{"Data":{"Vue":{"Events":[{"Id":"6681600854","Type":"PullRequestEvent","CreatedAt":"2017-10-06T05:21:25","Actor":"alexeden","Repository":"vuejs/vue","Organization":"vuejs","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/vuejs/vue/pull/6745","RelatedDescription":"Opened pull request \"Extend config keyCodes property type to accept an array of numbers\" (#6745) at vuejs/vue","RelatedBody":"<!--\r\nPlease make sure to read the Pull Request Guidelines:\r\nhttps://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md#pull-request-guidelines\r\n-->\r\n\r\n<!-- PULL REQUEST TEMPLATE -->\r\n<!-- (Update \"[ ]\" to \"[x]\" to check a box) -->\r\n\r\n**What kind of change does this PR introduce?** (check at least one)\r\n\r\n- [ ] Bugfix\r\n- [ ] Feature\r\n- [ ] Code style update\r\n- [ ] Refactor\r\n- [ ] Build-related changes\r\n- [x] Other, please describe:\r\n\r\nModification of Vue's static `config` property type definition.\r\n\r\n**Does this PR introduce a breaking change?** (check one)\r\n\r\n- [ ] Yes\r\n- [x] No\r\n\r\n**The PR fulfills these requirements:**\r\n\r\n- [x] It's submitted to the `dev` branch for v2.x (or to a previous version branch), _not_ the `master` branch\r\n- [ ] When resolving a specific issue, it's referenced in the PR's title (e.g. `fix #xxx[,#xxx]`, where \"xxx\" is the issue number)\r\n- [x] All tests are passing: https://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md#development-setup\r\n- [ ] New/updated tests are included\r\n\r\n**Other information:**\r\n\r\n![image](https://user-images.githubusercontent.com/10469676/31264038-0a7df5e0-aa2c-11e7-9ef9-441ca9e91dd4.png)\r\n\r\n[Per the documentation of the Vue config's `keyCodes` object](https://vuejs.org/v2/api/#keyCodes), the value of a `keyCodes` property may be either a number or an array of numbers. The current `keyCodes` type definition only accepts a single, non-array number. This PR corrects the type definition to reflect both types of acceptable values.\r\n\r\n\r\n"},{"Id":"6681350744","Type":"IssuesEvent","CreatedAt":"2017-10-06T03:08:19","Actor":"yyx990803","Repository":"vuejs/vue","Organization":"vuejs","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/vuejs/vue/issues/5964","RelatedDescription":"Closed issue \"Add shouldPrefetch() in vue-server-renderer\" (#5964) at vuejs/vue","RelatedBody":"### What problem does this feature solve?\r\nWhen using Vue to create a static site (like via `nuxt generate`) every code split asset is getting prefetched. This is an awesome feature if we were thinking about offline mode, but when you're trying to create a site with triple digit  routes and little concern for offline browsing (i.e. a marketing site) this is creating some pretty beefy code overhead.\r\n\r\nIt would be great if there was a way to get a shouldPrefetch in vue-server-renderer, similar to shouldPreload.\r\n\r\n### What does the proposed API look like?\r\nExactly like shouldPreload(), but for prefetching would be great.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->"},{"Id":"6681301014","Type":"IssuesEvent","CreatedAt":"2017-10-06T02:43:06","Actor":"yyx990803","Repository":"vuejs/vue","Organization":"vuejs","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/vuejs/vue/issues/6160","RelatedDescription":"Closed issue \"Support promise for renderToString in vue-server-renderer \" (#6160) at vuejs/vue","RelatedBody":"### What problem does this feature solve?\r\nBecause now the render.renderToString function return nothing, but its a async function, i need return response in its callback, it will lead to bug in koa. I have to wrap it to a function return promise to let it to work. Something like this:\r\n\r\n```\r\nfunction render(renderer) {\r\n    let resolve;\r\n    const promise = new Promise(r => resolve = r);\r\n\r\n    renderer.renderToString(context, (err, html) => {\r\n      resolve(html);\r\n    });\r\n\r\n    return promise;\r\n}\r\n\r\nserver.get('*', async ctx => {\r\n    const res = await render(renderer);\r\n    ctx.status = 200;\r\n    ctx.body = res;\r\n})\r\n```\r\nMaybe the render.renderToString return a promise will be better ?\r\n\r\n### What does the proposed API look like?\r\nkoa2:\r\n```\r\nserver.get('*', async ctx => {\r\n    const res = await renderer.renderToString(context);\r\n    ctx.status = 200;\r\n    ctx.body = res;\r\n})\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->"}],"ResultType":"GitHubEvent"},"Router":{"Events":[{"Id":"6679375913","Type":"IssuesEvent","CreatedAt":"2017-10-05T17:15:50","Actor":"BlackCode7","Repository":"vuejs/vue-router","Organization":"vuejs","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/vuejs/vue-router/issues/1786","RelatedDescription":"Opened issue \"router.match(location) not return query object from url like this.$route\" (#1786) at vuejs/vue-router","RelatedBody":"### Version\r\n2.7.0\r\n\r\n### Reproduction link\r\n[https://github.com/BlackCode7/vue-router-bug](https://github.com/BlackCode7/vue-router-bug)\r\n\r\n### Steps to reproduce\r\n1. git clone https://github.com/BlackCode7/vue-router-bug\r\n2. npm install\r\n3. npm run dev\r\n4. open console\r\n5. click on the \"Get console.log\" button\r\n6. Look at both objects, they should be the same but \"router.match(location)\" loses query parameters\r\n\r\n### What is expected?\r\nObjects returned by \"this.$route\" and \"router.match(location)\" should be the same\r\n\r\n### What is actually happening?\r\nThe object returned by \"router.match(location)\", contains an empty query object inside when there are query in the url\r\n\r\n---\r\nDocumentation: https://router.vuejs.org/en/api/route-object.html\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->"},{"Id":"6677732541","Type":"IssuesEvent","CreatedAt":"2017-10-05T11:45:12","Actor":"tedmoyses","Repository":"vuejs/vue-router","Organization":"vuejs","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/vuejs/vue-router/issues/1783","RelatedDescription":"Closed issue \"link routes to wrong view from conditionally rendered nav\" (#1783) at vuejs/vue-router","RelatedBody":"### Version\r\n2.7.0\r\n\r\n### Reproduction link\r\n[https://ppxx14835q.codesandbox.io/](https://ppxx14835q.codesandbox.io/)\r\n\r\n### Steps to reproduce\r\nFor some reason the bootstrap drop down doesn't work on codesandbox so the nav is pinned at display:block but navigate to login, click login, menu changes to logged in menu, click either profile or organisations and the wrong view is displayed - it takes you to login or register.\r\n\r\nNote if you hover or inspect the correct link element is being displayed but incorrect view is shown\r\n\r\nIt's almost as if the previous nav list is being used\r\n\r\n### What is expected?\r\nclicking profile should show the profile view\r\n\r\n### What is actually happening?\r\nclicking profile shows the login view\r\n\r\n---\r\napologies if this is vue related and not vue-router. Using static links instead in the conditional nav lists works as expected\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->"},{"Id":"6677236271","Type":"IssuesEvent","CreatedAt":"2017-10-05T09:38:37","Actor":"LinusBorg","Repository":"vuejs/vue-router","Organization":"vuejs","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/vuejs/vue-router/issues/1785","RelatedDescription":"Closed issue \"If you have a empty data() {} in the component, it crashes vue when routing. \" (#1785) at vuejs/vue-router","RelatedBody":"### Version\r\n2.7.0\r\n\r\n### Reproduction link\r\n[http://jsfiddle.net/o5q632d0/](http://jsfiddle.net/o5q632d0/)\r\n\r\n### Steps to reproduce\r\nPut a data() {} in your component, when navigating between routes you will get a error which will completly crash vue and the only way to fix it that ive found is to refresh the browser. \r\n\r\nThe error looks like this: \r\n```\r\nTypeError: Cannot read property '__ob__' of undefined\r\n    at VueComponent.Vue.$destroy (npmcdn.com/vue@2.4.4/dist/vue.js:2511)\r\n    at destroy (npmcdn.com/vue@2.4.4/dist/vue.js:3606)\r\n    at invokeDestroyHook (npmcdn.com/vue@2.4.4/dist/vue.js:5330)\r\n    at removeVnodes (npmcdn.com/vue@2.4.4/dist/vue.js:5346)\r\n    at updateChildren (npmcdn.com/vue@2.4.4/dist/vue.js:5454)\r\n    at patchVnode (npmcdn.com/vue@2.4.4/dist/vue.js:5508)\r\n    at Vue$3.patch [as __patch__] (npmcdn.com/vue@2.4.4/dist/vue.js:5657)\r\n    at Vue$3.Vue._update (npmcdn.com/vue@2.4.4/dist/vue.js:2464)\r\n    at Vue$3.updateComponent (npmcdn.com/vue@2.4.4/dist/vue.js:2578)\r\n    at Watcher.get (npmcdn.com/vue@2.4.4/dist/vue.js:2919)\r\nhandleError @ npmcdn.com/vue@2.4.4/dist/vue.js:569\r\n10:20:25.621 \r\n```\r\n\r\nRelated to https://github.com/vuejs/vue-router/issues/1728\r\n\r\n### What is expected?\r\nNavigation should continue and discard the component. \r\n\r\n### What is actually happening?\r\nThe component crashes upon discarding and crashes vue as a result. \r\n\r\n---\r\nThis might not be a bug, but its really bad for the component to crash if the data is empty, it took me a very long time to find this error's cause.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->"},{"Id":"6677175303","Type":"IssuesEvent","CreatedAt":"2017-10-05T09:24:30","Actor":"ChadTaljaardt","Repository":"vuejs/vue-router","Organization":"vuejs","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/vuejs/vue-router/issues/1785","RelatedDescription":"Opened issue \"If you have a empty data() {} in the component, it crashes vue when routing. \" (#1785) at vuejs/vue-router","RelatedBody":"### Version\r\n2.7.0\r\n\r\n### Reproduction link\r\n[http://jsfiddle.net/o5q632d0/](http://jsfiddle.net/o5q632d0/)\r\n\r\n### Steps to reproduce\r\nPut a data() {} in your component, when navigating between routes you will get a error which will completly crash vue and the only way to fix it that ive found is to refresh the browser. \r\n\r\nThe error looks like this: \r\n```\r\nTypeError: Cannot read property '__ob__' of undefined\r\n    at VueComponent.Vue.$destroy (npmcdn.com/vue@2.4.4/dist/vue.js:2511)\r\n    at destroy (npmcdn.com/vue@2.4.4/dist/vue.js:3606)\r\n    at invokeDestroyHook (npmcdn.com/vue@2.4.4/dist/vue.js:5330)\r\n    at removeVnodes (npmcdn.com/vue@2.4.4/dist/vue.js:5346)\r\n    at updateChildren (npmcdn.com/vue@2.4.4/dist/vue.js:5454)\r\n    at patchVnode (npmcdn.com/vue@2.4.4/dist/vue.js:5508)\r\n    at Vue$3.patch [as __patch__] (npmcdn.com/vue@2.4.4/dist/vue.js:5657)\r\n    at Vue$3.Vue._update (npmcdn.com/vue@2.4.4/dist/vue.js:2464)\r\n    at Vue$3.updateComponent (npmcdn.com/vue@2.4.4/dist/vue.js:2578)\r\n    at Watcher.get (npmcdn.com/vue@2.4.4/dist/vue.js:2919)\r\nhandleError @ npmcdn.com/vue@2.4.4/dist/vue.js:569\r\n10:20:25.621 \r\n```\r\n\r\nRelated to https://github.com/vuejs/vue-router/issues/1728\r\n\r\n### What is expected?\r\nNavigation should continue and discard the component. \r\n\r\n### What is actually happening?\r\nThe component crashes upon discarding and crashes vue as a result. \r\n\r\n---\r\nThis might not be a bug, but its really bad for the component to crash if the data is empty, it took me a very long time to find this error's cause.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->"},{"Id":"6676743979","Type":"IssuesEvent","CreatedAt":"2017-10-05T07:35:34","Actor":"Zysce","Repository":"vuejs/vue-router","Organization":"vuejs","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/vuejs/vue-router/issues/1784","RelatedDescription":"Opened issue \"When initial route to non root route with lazy loading, this.$route not initialized in created and mounted events of root instance (App.vue)\" (#1784) at vuejs/vue-router","RelatedBody":"### Version\r\n2.7.0\r\n\r\n### Reproduction link\r\n[https://github.com/Zysce/VueRouterRouteIssue](https://github.com/Zysce/VueRouterRouteIssue)\r\n\r\n### Steps to reproduce\r\n* Launch project with npm run dev\r\n* Initial route set to component hello2\r\n* Navigate to link Hello (lazy loaded)\r\n* Refresh browser \r\n* Look to data displayed on page\r\n\r\n- When initial routing to root route (no params, no path), no problem\r\n- When initial routing to route not lazy loaded, no problem\r\n- When initial routing to route with lazy loading, this.$route not initialized in created and mounted of App.vue\r\n\r\n\r\n\r\n### What is expected?\r\nthis.$route not initialized on created and mounted of vue instance\r\n\r\n### What is actually happening?\r\nthis.$route initialized to route (name, params, ...)  on created and mounted of vue instance\r\n\r\n---\r\nI need url params in the mounted event.\r\nBefore adding lazy loading, no problem to access to data.\r\nAfter setting up lazy loading, couldnt access to url params since this.$route is not initialized.\r\nN.B : The initial routing needs to be a non root url with params.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->"},{"Id":"6675919354","Type":"IssuesEvent","CreatedAt":"2017-10-05T01:31:10","Actor":"tedmoyses","Repository":"vuejs/vue-router","Organization":"vuejs","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/vuejs/vue-router/issues/1783","RelatedDescription":"Opened issue \"link routes to wrong view from conditionally rendered nav\" (#1783) at vuejs/vue-router","RelatedBody":"### Version\r\n2.7.0\r\n\r\n### Reproduction link\r\n[https://ppxx14835q.codesandbox.io/](https://ppxx14835q.codesandbox.io/)\r\n\r\n### Steps to reproduce\r\nFor some reason the bootstrap drop down doesn't work on codesandbox so it is pinned at display:block but navigate to login, click login, menu changes to logged in menu, click either profile or organisations and the wrong view is displayed - it takes you to login or register.\r\n\r\nNote if you hover or inspect the correct link element is being displayed but incorrect view is shown\r\n\r\nIt's almost as if the previous nav list is being used\r\n\r\n### What is expected?\r\nclicking profile should show the profile view\r\n\r\n### What is actually happening?\r\nclicking profile shows the login view\r\n\r\n---\r\napologies if this is vue related and not vue-router. Using static links instead in the conditional nav lists works as expected\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->"},{"Id":"6673712116","Type":"IssuesEvent","CreatedAt":"2017-10-04T15:54:07","Actor":"posva","Repository":"vuejs/vue-router","Organization":"vuejs","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/vuejs/vue-router/issues/1782","RelatedDescription":"Closed issue \"beforeRouteUpdate not fired in a child component\" (#1782) at vuejs/vue-router","RelatedBody":"### Version\r\n2.7.0\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/mdz263j3/1/](https://jsfiddle.net/mdz263j3/1/)\r\n\r\n### Steps to reproduce\r\nSwitch the page using one of the `1`, `2`, `3` buttons.\r\n\r\n### What is expected?\r\nTwo alerts, one coming from the parent component and one from the child component.\r\n\r\n### What is actually happening?\r\nOnly one alert coming from the parent component.\r\n\r\n---\r\nEven though the `beforeRouteUpdate` hook is broken, watching the route works in both the parent and child component:\r\n```js\r\nwatch: {\r\n    $route() {\r\n        alert('here');\r\n    }\r\n}\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->"},{"Id":"6672480062","Type":"IssuesEvent","CreatedAt":"2017-10-04T11:50:16","Actor":"KKSzymanowski","Repository":"vuejs/vue-router","Organization":"vuejs","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/vuejs/vue-router/issues/1782","RelatedDescription":"Opened issue \"beforeRouteUpdate not fired in a child component\" (#1782) at vuejs/vue-router","RelatedBody":"### Version\r\n2.7.0\r\n\r\n### Reproduction link\r\n[https://jsfiddle.net/mdz263j3/1/](https://jsfiddle.net/mdz263j3/1/)\r\n\r\n### Steps to reproduce\r\nSwitch the page using one of the `1`, `2`, `3` buttons.\r\n\r\n### What is expected?\r\nTwo alerts, one coming from the parent component and one from the child component.\r\n\r\n### What is actually happening?\r\nOnly one alert coming from the parent component.\r\n\r\n---\r\nEven though the `beforeRouteUpdate` hook is broken, watching the route works in both the parent and child component:\r\n```js\r\nwatch: {\r\n    $route() {\r\n        alert('here');\r\n    }\r\n}\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->"}],"ResultType":"GitHubEvent"},"Vuex":{"Events":[{"Id":"6681220477","Type":"IssuesEvent","CreatedAt":"2017-10-06T02:01:21","Actor":"yyx990803","Repository":"vuejs/vuex","Organization":"vuejs","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/vuejs/vuex/issues/877","RelatedDescription":"Closed issue \"store logic is not reactive in data prefetching steps while doing ssr\" (#877) at vuejs/vuex","RelatedBody":"### Version\r\n2.3.0\r\n\r\n### Reproduction link\r\n[https://github.com/Harper04/vuex/tree/bug/ssr](https://github.com/Harper04/vuex/tree/bug/ssr)\r\n\r\n### Steps to reproduce\r\n*Either:*\r\n\r\nClone the linked repo and run `npm i && npm run test:ssr`\r\n\r\n*Or:*\r\n\r\nRun tests in your own repo with (this mimics the environment vue sees during ssr rendering):\r\n`VUE_ENV=server npm run test:unit`\r\n\r\n*Or:*\r\n\r\nHave a project with a lot of stores and watch for weird ssr behavior\r\n\r\n\r\n### What is expected?\r\nThe tests should run.\r\nYour store logic should behave exactly the same no matter whether you run it in your browser or during an ssr data prefetching step. \r\n\r\n\r\n### What is actually happening?\r\nVue turns of reactivity in case of server side rendering the moment you create/import the an vue ssr renderer. For frontend components/real rendering this is perfectly okay and an important optimization.\r\nThe problem is that vuex also uses a vue instance internally in order to get the reactivity and caching for getters etc. Therefore also the reactivity of vuex is turned of during ssr. Every getter will return whatever it returned the first time it was called (think of isValid getters or filtered lists)\r\n\r\n\r\n\r\n---\r\n*Debugging:*\r\n\r\nI did run the tests and my project with a modified version of vue where the `isServerRendering` check in the `observer` part of Vue is deactivated which worked fine.\r\nI also tried to just return the getter function instead of the computed property in mappedGetters (vuex) which also worked for me (but not for the tests).\r\n\r\n*PR?*\r\n\r\nI've tried to come up with a pull request where vue would get another constructor variable like `forceReactivity` or `dataOnlyVueInstance` which vuex could pass in during instantiation.\r\nUnfortunately apart from hacks i could only think of solutions which meant to much work for the risk of solving it in a way you would not accept.\r\nIf you could show me a way to pass vm.$options parameters to the observer module without touching too much code i would still be happy to do a PR.\r\n\r\n*Am i right here?*\r\n\r\nThis seems like a bug for vuex which should be solved by enhancing vue itself. Should i create a feature request there?\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->"}],"ResultType":"GitHubEvent"}},"RunOn":"2017-10-06T05:31:58.8506634Z","RunDurationInMilliseconds":1911}