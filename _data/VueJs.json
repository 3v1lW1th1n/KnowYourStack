{"Data":{"Vue":{"Events":[{"Id":"7068021320","Type":"IssuesEvent","CreatedAt":"2018-01-08T05:18:26","Actor":"HerringtonDarkholme","Repository":"vuejs/vue","Organization":"vuejs","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/vuejs/vue/issues/7392","RelatedDescription":"Closed issue \"Can't import Vue using TypeScript and Node\" (#7392) at vuejs/vue","RelatedBody":"### Version\r\n2.5.13\r\n\r\n### Reproduction link\r\n[https://github.com/marpstar/vue-typescript-import-problems](https://github.com/marpstar/vue-typescript-import-problems)\r\n\r\n### Steps to reproduce\r\n```\r\n# Clone this repo\r\ngit clone https://github.com/marpstar/vue-typescript-import-problems.git\r\n\r\n# Install dependencies\r\nnpm install\r\n\r\n# Compile TS\r\ntsc\r\n\r\n# Launch app. You'll see an error \"vue_1.default is not a constructor\"\r\nnode build/main.js\r\n\r\n```\r\n\r\n### What is expected?\r\nI can create a new Vue instance using the constructor.\r\n\r\n### What is actually happening?\r\nI get an error \"TypeError: vue_1.default is not a constructor\"\r\n\r\n---\r\nI believe this is related to the issue https://github.com/vuejs/vue/issues/7374, which I've included my comments below:\r\n\r\nI'm using `commonjs` output from TypeScript (no webpack). One similarity between OP and I is that we're both using the TypeScript `baseUrl` option. Something is definitely wrong with the standard import in TypeScript.\r\n\r\nI too am using Vue 2.5.13. I'm setting up SSR on Node 8.9.3 and TypeScript 2.6.  My `tsconfig.json` looks like this:\r\n\r\n```\r\n{\r\n  \"compilerOptions\": {\r\n    \"outDir\": \"build\",\r\n    \"target\": \"es6\",\r\n    \"module\": \"commonjs\",\r\n    \"moduleResolution\": \"node\",\r\n    \"sourceMap\": true,\r\n    \"emitDecoratorMetadata\": true,\r\n    \"experimentalDecorators\": true,\r\n    \"rootDir\": \"./src\",\r\n    \"baseUrl\": \"./src\",\r\n    \"noUnusedLocals\": true\r\n  },\r\n  \"exclude\": [\r\n    \"node_modules\",\r\n    \"typings\"\r\n  ]\r\n}\r\n```\r\n\r\nI tried a number of other workaround, including trying to load the vue.esm.js file via the `compilerOptions.paths` property, without success. I was getting the exact same `vue_1.default is not a constructor` error as OP.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->"}],"ResultType":"GitHubEvent"},"Router":{"Events":[{"Id":"7067841318","Type":"IssuesEvent","CreatedAt":"2018-01-08T03:31:23","Actor":"DaxChen","Repository":"vuejs/vue-router","Organization":"vuejs","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/vuejs/vue-router/issues/1968","RelatedDescription":"Opened issue \"afterEach with mounted hook\" (#1968) at vuejs/vue-router","RelatedBody":"### What problem does this feature solve?\r\nWhen implementing analytics with vue-router, we often rely on the `router.afterEach` hook. For example:\r\n\r\n```js\r\nrouter.afterEach((to, from) => {\r\n  ga('set', 'page', to.fullPath)\r\n  ga('send', 'pageview')\r\n})\r\n```\r\n\r\nHowever, when there is a page transition (and obviously the page transition will use `mode=\"out-in\"`), the new component will wait for the old component to fade out first, but the `afterEach` hook was already fired.\r\n\r\nIn the about example, say the user was originally on the home page with page title \"home\" and clicks on the `/about` link:\r\n1. The url changes immediately, and afterEach hook fires.\r\n2. The home page fades out, and finally destroyed.\r\n3. The about page gets mounted (and fades in), page title and other metadata get modified (in my case I'm using [vue-meta](https://github.com/declandewet/vue-meta)\r\n\r\nIn [this comment](https://github.com/vuejs/vue-router/issues/1529#issuecomment-309870038), @posva recommend using `Vue.nextTick`. I tried adding multiple `nextTick`s but doesn't work...\r\n\r\n\r\n### What does the proposed API look like?\r\n\r\nIs it possible to perhaps dynamically register a mounted hook (without overriding original one) to the `to` component in afterEach?\r\nFor example:\r\n\r\n```js\r\nrouter.afterEach((to, from) => {\r\n  // some kind of way to get the page component\r\n  to.$el.mounted = () => {\r\n    ga('set', 'page', to.fullPath)\r\n    ga('send', 'pageview')\r\n  }\r\n})\r\n```\r\n\r\nOr maybe add a new hook that will wait for page transition to finish, and the new component mounted?\r\nrouter.afterEachMounted((to, from) => {\r\n  ga(...)\r\n})\r\n\r\nThank you all so much!!!\r\n\r\nDax\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->"},{"Id":"7067139229","Type":"IssuesEvent","CreatedAt":"2018-01-07T19:35:29","Actor":"ahus1","Repository":"vuejs/vue-router","Organization":"vuejs","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/vuejs/vue-router/issues/1967","RelatedDescription":"Closed issue \"Navigation without history API should preserve scroll positions\" (#1967) at vuejs/vue-router","RelatedBody":"### What problem does this feature solve?\r\nUsing vue router without history API makes it easier for a backend to serve just an index.html as only hashes are added to the URL for the different routes. This is the reason we haven't switched to html5 history mode.\r\n\r\nBut using the hashes navigation doesn't preserve the scroll position. It doesn't even call the scrollBehavior methods that would make an implementation easier. \r\n\r\nA working solution for us (and probably most other other users) would be to save the scroll position once-per-route in pure javascript and provide these values once you enter the route again.\r\n\r\nI open this issue because I think this will help others. If you consider it out of scope for vue-router, consider closing it right away.\r\n\r\n### What does the proposed API look like?\r\nNo additional API would be provided. ScrollBehavior would be called even if not in HTML5 mode. Scroll positions would be saved in a once-per-route in pure JavaScript inside vue-router.\r\n\r\nFor us the following code works for forward and backward javascript navigation. It's part of the following open source app - https://latest.dukecon.org/pwa/javaland/2018/ (full source available here https://github.com/dukecon/dukecon_pwa/blob/develop/src/main.js)\r\n\r\n```javascript\r\n  // for each page, store the scroll position\r\n  var positionStore = {}\r\n\r\n  /* record the scrolling on current route (works better as back-navigation scrolls to different position,\r\n  and this would otherwise be recorded by beforeEach() */\r\n  window.onscroll = function () {\r\n    positionStore[app.$route.path] = {\r\n      x: window.pageXOffset,\r\n      y: window.pageYOffset\r\n    }\r\n  }\r\n\r\n  // whenever the route changes, scroll to old position\r\n  router.beforeEach((to, from, next) => {\r\n    const oldPosition = positionStore[to.path]\r\n    // restore position after next screen rendering\r\n    app.$nextTick(() => {\r\n      if (!oldPosition || (oldPosition.y === 0 && oldPosition.x === 0)) {\r\n        window.scrollTo(0, 0)\r\n      } else {\r\n        // I found that rendering of the screen might take a little bit more time,\r\n        // therefore wait a bit if we don't scroll to the top\r\n        window.setTimeout(function () {\r\n          window.scrollTo(oldPosition.x, oldPosition.y)\r\n        }, 50)\r\n      }\r\n    })\r\n    next()\r\n  })\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->"},{"Id":"7066769774","Type":"IssuesEvent","CreatedAt":"2018-01-07T15:21:57","Actor":"ahus1","Repository":"vuejs/vue-router","Organization":"vuejs","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/vuejs/vue-router/issues/1967","RelatedDescription":"Opened issue \"Navigation without history API should preserve scroll positions\" (#1967) at vuejs/vue-router","RelatedBody":"### What problem does this feature solve?\r\nUsing vue router without history API makes it easier for a backend to serve just an index.html as only hashes are added to the URL for the different routes. This is the reason we haven't switched to html5 history mode.\r\n\r\nBut using the hashes navigation doesn't preserve the scroll position. It doesn't even call the scrollBehavior methods that would make an implementation easier. \r\n\r\nA working solution for us (and probably most other other users) would be to save the scroll position once-per-route in pure javascript and provide these values once you enter the route again.\r\n\r\nI open this issue because I think this will help others. If you consider it out of scope for vue-router, consider closing it right away.\r\n\r\n### What does the proposed API look like?\r\nNo additional API would be provided. ScrollBehavior would be called even if not in HTML5 mode. Scroll positions would be saved in a once-per-route in pure JavaScript inside vue-router.\r\n\r\nFor us the following code works for forward and backward javascript navigation. It's part of the following open source app - https://latest.dukecon.org/pwa/javaland/2018/ (full source available here https://github.com/dukecon/dukecon_pwa/blob/develop/src/main.js)\r\n\r\n```javascript\r\n  // for each page, store the scroll position\r\n  var positionStore = {}\r\n\r\n  /* record the scrolling on current route (works better as back-navigation scrolls to different position,\r\n  and this would otherwise be recorded by beforeEach() */\r\n  window.onscroll = function () {\r\n    positionStore[app.$route.path] = {\r\n      x: window.pageXOffset,\r\n      y: window.pageYOffset\r\n    }\r\n  }\r\n\r\n  // whenever the route changes, scroll to old position\r\n  router.beforeEach((to, from, next) => {\r\n    const oldPosition = positionStore[to.path]\r\n    // restore position after next screen rendering\r\n    app.$nextTick(() => {\r\n      if (!oldPosition || (oldPosition.y === 0 && oldPosition.x === 0)) {\r\n        window.scrollTo(0, 0)\r\n      } else {\r\n        // I found that rendering of the screen might take a little bit more time,\r\n        // therefore wait a bit if we don't scroll to the top\r\n        window.setTimeout(function () {\r\n          window.scrollTo(oldPosition.x, oldPosition.y)\r\n        }, 50)\r\n      }\r\n    })\r\n    next()\r\n  })\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->"},{"Id":"7066363070","Type":"PullRequestEvent","CreatedAt":"2018-01-07T10:13:14","Actor":"posva","Repository":"vuejs/vue-router","Organization":"vuejs","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/vuejs/vue-router/pull/1966","RelatedDescription":"Merged pull request \"typo in doc\" (#1966) at vuejs/vue-router","RelatedBody":""},{"Id":"7065000122","Type":"IssuesEvent","CreatedAt":"2018-01-06T14:45:30","Actor":"yyx990803","Repository":"vuejs/vue-router","Organization":"vuejs","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/vuejs/vue-router/issues/1965","RelatedDescription":"Closed issue \"Vue router / Webpack dev server shows Cannot GET /path on page refresh now\" (#1965) at vuejs/vue-router","RelatedBody":"### Version\r\n3.0.1\r\n\r\n### Reproduction link\r\n[https://codepen.io/anon/pen/XVzRJY](https://codepen.io/anon/pen/XVzRJY)\r\n\r\n### Steps to reproduce\r\nRun default installation to create a new project:\r\n\r\n`vue init webpack projectName`\r\n\r\nThe `webpack.dev.conf.js` has been updated in the last update and the routing doesn't work on localhost now in `mode: 'history'`:\r\n\r\n1. Run: `npm run dev`\r\n2. Create any component (e.g. `Contact.vue`)  \r\n3. Import it as usual and add the route (e.g. `/contact`)\r\n4. Add `mode: 'history'`\r\n\r\n---\r\n\r\n- You won't be able to open the route by typing it in the address bar, you'll see: `Cannot GET /contact`\r\n- If you navigate to it by pressing a button with route link, you will see the component, but refresh the page and you'll get the same result: `Cannot GET /contact`\r\n\r\n### What is expected?\r\nTo work in mode: 'history' on localhost (`npm run dev`)\r\n\r\n### What is actually happening?\r\nRouter doesn't work in mode: 'history' on localhost (`npm run dev`)\r\n\r\n---\r\nAdditional info:\r\n\r\nhttps://stackoverflow.com/questions/48123503/why-does-vue-router-webpack-dev-server-shows-cannot-get-path-on-page-refresh\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->\r\n  \r\n  \r\n  "},{"Id":"7064836282","Type":"PullRequestEvent","CreatedAt":"2018-01-06T12:35:34","Actor":"MathieuDerelle","Repository":"vuejs/vue-router","Organization":"vuejs","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/vuejs/vue-router/pull/1966","RelatedDescription":"Opened pull request \"typo in doc\" (#1966) at vuejs/vue-router","RelatedBody":""}],"ResultType":"GitHubEvent"},"Vuex":{"Events":[{"Id":"7067926004","Type":"PullRequestEvent","CreatedAt":"2018-01-08T04:19:26","Actor":"ktsn","Repository":"vuejs/vuex","Organization":"vuejs","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/vuejs/vuex/pull/1124","RelatedDescription":"Merged pull request \"[Doc FR] deleting the word \"les\" doubled\" (#1124) at vuejs/vuex","RelatedBody":""},{"Id":"7066898060","Type":"PullRequestEvent","CreatedAt":"2018-01-07T16:47:24","Actor":"sdalichampt","Repository":"vuejs/vuex","Organization":"vuejs","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/vuejs/vuex/pull/1124","RelatedDescription":"Opened pull request \"[Doc FR] deleting the word \"les\" doubled\" (#1124) at vuejs/vuex","RelatedBody":""}],"ResultType":"GitHubEvent"}},"RunOn":"2018-01-08T05:30:41.2807746Z","RunDurationInMilliseconds":2068}