{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing Preview 1 of ASP.NET MVC 5.2.5, Web API 5.2.5, and Web Pages 3.2.5","PublishedOn":"2018-03-19T22:00:27+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today we released Preview 1 of ASP.NET MVC 5.2.5, Web API 5.2.5, and Web Pages 3.2.5 on NuGet. This is a patch release that contains only bug fixes. You can find the full list of bug fixes for this...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/19/announcing-preview-1-of-asp-net-mvc-5-2-5-web-api-5-2-5-and-web-pages-3-2-5/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Functional testing of MVC applications","PublishedOn":"2018-03-05T18:30:28+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For ASP.NET Core 2.1 we have created a new package, Microsoft.AspNetCore.Mvc.Testing, to help streamline in-memory end-to-end testing of MVC applications using TestServer. This package takes care of...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/05/asp-net-core-2-1-0-preview1-functional-testing-of-mvc-applications/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: GDPR enhancements","PublishedOn":"2018-03-04T19:21:40+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"2018 sees the introduction of the General Data Protection Regulation, an EU framework to allow EU citizens to control, correct and delete their data, no matter where in the word it is held. In ASP.NET...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/04/asp-net-core-2-1-0-preview1-gdpr-enhancements/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Introducing Identity UI as a library","PublishedOn":"2018-03-02T19:00:19+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"ASP.NET Core has historically provided project templates with code for setting up ASP.NET Core Identity, which enables support for identity related features like user registration, login, account...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/02/aspnetcore-2-1-identity-ui/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Razor UI in class libraries","PublishedOn":"2018-03-01T18:00:26+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"One frequently requested scenario that ASP.NET Core 2.1 improves is building UI in reusable class libraries. With ASP.NET Core 2.1 you can package your Razor views and pages (.cshtml files) along with...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/01/asp-net-core-2-1-razor-ui-in-class-libraries/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Improvements to IIS hosting","PublishedOn":"2018-03-01T01:56:02+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"The ASP.NET Core Module (ANCM) is a global IIS module that has been responsible for proxying requests over from IIS to your backend ASP.NET Core application running Kestrel. Since 2.0 we have been...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/28/asp-net-core-2-1-0-preview1-improvements-to-iis-hosting/","RawContent":null},{"Title":"ASP.NET Core 2.1-preview1: Introducing HTTPClient factory","PublishedOn":"2018-03-01T01:47:41+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"HttpClient factory is an opinionated factory for creating HttpClient instances to be used in your applications. It is designed to: Provide a central location for naming and configuring logical...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/28/asp-net-core-2-1-preview1-introducing-httpclient-factory/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Improvements for building Web APIs","PublishedOn":"2018-02-27T23:30:07+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"ASP.NET Core 2.1 adds a number of features that make it easier and more convenient to build Web APIs. These features include Web API controller specific conventions, more robust input processing and...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/27/asp-net-core-2-1-web-apis/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Introducing compatibility version in MVC","PublishedOn":"2018-02-27T22:34:39+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This post was written by Ryan Nowak In 2.1 we&#8217;re adding a feature to address a long-standing problem for maintaining MVC &#8211; how do we make improvements to framework code without making it...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/27/introducing-compatibility-version-in-mvc/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Getting started with SignalR","PublishedOn":"2018-02-27T21:57:11+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Since 2013, ASP.NET developers have been using SignalR to build real-time web applications. Now, with ASP.NET Core 2.1 Preview 1, we&#8217;re bringing SignalR over to ASP.NET Core so you can build...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/27/asp-net-core-2-1-0-preview1-getting-started-with-signalr/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7409791117","Type":"IssuesEvent","CreatedAt":"2018-03-20T22:41:04","Actor":"ryanbrandenburg","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/2982","RelatedDescription":"Opened issue \"Remove temporary breaking change listings\" (#2982) at aspnet/Home","RelatedBody":"The following breaking changes are listed only because of aspnet/BuildTools#615:\r\n```\r\n[\r\n    {\r\n        \"TypeId\": \"public class Microsoft.Extensions.DiagnosticAdapter.ProxyDiagnosticSourceMethodAdapter : Microsoft.Extensions.DiagnosticAdapter.IDiagnosticSourceMethodAdapter\",\r\n        \"Kind\": \"Removal\"\r\n    },\r\n    {\r\n        \"TypeId\": \"public interface Microsoft.Extensions.DiagnosticAdapter.IDiagnosticSourceMethodAdapter\",\r\n        \"Kind\": \"Removal\"\r\n    },\r\n    {\r\n        \"TypeId\": \"public class Microsoft.Extensions.DiagnosticAdapter.DiagnosticSourceAdapter : System.IObserver<System.Collections.Generic.KeyValuePair<System.String, System.Object>>\",\r\n        \"MemberId\": \"public System.Boolean Write(System.String diagnosticName, System.Object arg1, System.Object arg2 = null)\",\r\n        \"Kind\": \"Removal\"\r\n    }\r\n]\r\n```\r\n\r\nThey should be removed once it is resolved."},{"Id":"7408958779","Type":"IssuesEvent","CreatedAt":"2018-03-20T19:47:10","Actor":"Eilon","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/2959","RelatedDescription":"Closed issue \"Service Scoped but need force new\" (#2959) at aspnet/Home","RelatedBody":"In application .NET Core with Dependency Injection after some problems, i need service created Scoped, dispose the current injected instance object with new, how i can do it ?"},{"Id":"7408687060","Type":"IssuesEvent","CreatedAt":"2018-03-20T18:53:22","Actor":"fmaeseele","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/2981","RelatedDescription":"Closed issue \"Custom ActionFilterAttribute on Razor PageModel Get method\" (#2981) at aspnet/Home","RelatedBody":"Hi,\r\n\r\nI'm trying to get a custom ActionFilterAttribute to get working on the Get method of my Razor Pages.\r\nStarting with a simple .NetCore Web project, I created a custom ActionFilterAttribute as :\r\n\r\n` \r\n   public class MyCustomActionFilterAttribute : ActionFilterAttribute\r\n    {\r\n        /// <summary>\r\n        /// Title of the current item\r\n        /// </summary>\r\n        public string Title { get; set; }\r\n\r\n        public override void OnActionExecuting(ActionExecutingContext context)\r\n        {\r\n              // This method is NEVER called!!\r\n            System.Diagnostics.Debugger.Break();\r\n        }\r\n    }\r\n`\r\n\r\nThen I use it in my Index.cshtml.cs :\r\n\r\n` \r\n    public class IndexModel : PageModel\r\n    {\r\n        [MyCustomActionFilter(Title =\"My Title\", Order =1)]\r\n        public void OnGet()\r\n        {\r\n        }\r\n    }\r\n`\r\n\r\nBut the method OnActionExecuting is never called.\r\nWhat am I missing ?\r\n\r\nRegards.\r\nFrançois\r\n[TestCustomActionFilterAttribute.zip](https://github.com/aspnet/Home/files/1829007/TestCustomActionFilterAttribute.zip)\r\n"},{"Id":"7408488535","Type":"IssuesEvent","CreatedAt":"2018-03-20T18:17:05","Actor":"muratg","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/2680","RelatedDescription":"Closed issue \"Flaky test: CreateAggregate_works_when_exception_during_step\" (#2680) at aspnet/Home","RelatedBody":"_From @ryanbrandenburg on Wednesday, November 15, 2017 4:35:49 PM_\r\n\r\nhttp://aspnetci/viewLog.html?tab=buildLog&logTab=tree&filter=debug&expand=all&buildId=355973&_focus=53774\r\n\r\n_Copied from original issue: aspnet/HttpAbstractions#967_"},{"Id":"7405947200","Type":"IssuesEvent","CreatedAt":"2018-03-20T11:12:33","Actor":"fmaeseele","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/2981","RelatedDescription":"Opened issue \"Custom ActionFilterAttribute on Razor PageModel Get method\" (#2981) at aspnet/Home","RelatedBody":"Hi,\r\n\r\nI'm trying to get a custom ActionFilterAttribute to get working on the Get method of my Razor Pages.\r\nStarting with a simple .NetCore Web project, I created a custom ActionFilterAttribute as :\r\n\r\n` \r\n   public class MyCustomActionFilterAttribute : ActionFilterAttribute\r\n    {\r\n        /// <summary>\r\n        /// Title of the current item\r\n        /// </summary>\r\n        public string Title { get; set; }\r\n\r\n        public override void OnActionExecuting(ActionExecutingContext context)\r\n        {\r\n              // This method is NEVER called!!\r\n            System.Diagnostics.Debugger.Break();\r\n        }\r\n    }\r\n`\r\n\r\nThen I use it in my Index.cshtml.cs :\r\n\r\n` \r\n    public class IndexModel : PageModel\r\n    {\r\n        [MyCustomActionFilter(Title =\"My Title\", Order =1)]\r\n        public void OnGet()\r\n        {\r\n        }\r\n    }\r\n`\r\n\r\nBut the method OnActionExecuting is never called.\r\nWhat am I missing ?\r\n\r\nRegards.\r\nFrançois\r\n[TestCustomActionFilterAttribute.zip](https://github.com/aspnet/Home/files/1829007/TestCustomActionFilterAttribute.zip)\r\n"},{"Id":"7404623061","Type":"IssuesEvent","CreatedAt":"2018-03-20T06:00:50","Actor":"PureKrome","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/2977","RelatedDescription":"Closed issue \"Should the default StatusCodePageOptions body result be cached?\" (#2977) at aspnet/Home","RelatedBody":"👋 G'Day!\r\n\r\nI noticed that the [StatusCodePageOptions ](https://github.com/aspnet/Diagnostics/blob/4e044a1e30454b87edbc316f40ba608d1160cb28/src/Microsoft.AspNetCore.Diagnostics/StatusCodePage/StatusCodePagesOptions.cs) class has a default way of generating the the appropriate statuscode response to the client. Right now, it's just some standard text (and no, this issue is not about the CONTENT of the StatusCodePageOptions response). Great!\r\n\r\n[So right now, it basically does this](https://github.com/aspnet/Diagnostics/blob/4e044a1e30454b87edbc316f40ba608d1160cb28/src/Microsoft.AspNetCore.Diagnostics/StatusCodePage/StatusCodePagesOptions.cs#L25):\r\n\r\n```\r\n var body = BuildResponseBody(statusCode);\r\n...\r\nreturn context.HttpContext.Response.WriteAsync(body);\r\n```\r\n\r\n- Generate body (based on status code).\r\n- Write to response.\r\n\r\nThe body is always the same per StatusCode, right? If so, why not just cache this in say a `ConcurrentDictionary` ? Am I missing something?"}],"ResultType":"GitHubEvent"},"SignalR":{"Events":[{"Id":"7410605600","Type":"IssuesEvent","CreatedAt":"2018-03-21T03:37:39","Actor":"davidfowl","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/issues/1672","RelatedDescription":"Opened issue \"Flaky test CanStopAndStartConnection\" (#1672) at aspnet/SignalR","RelatedBody":"```\r\n[xUnit.net 00:00:10.1556603]     Microsoft.AspNetCore.SignalR.Client.FunctionalTests.HubConnectionTests.CanStopAndStartConnection(protocol: JsonHubProtocol { Name = \"json\", PayloadSerializer = JsonSerializer { Binder = (throws InvalidOperationException), CheckAdditionalContent = False, ConstructorHandling = Default, Context = System.Runtime.Serialization.StreamingContext, ContractResolver = CamelCasePropertyNamesContractResolver { ... }, ... }, TransferFormat = Text }, transportType: WebSockets, path: \"/hubT\") [FAIL]\r\nFailed   Microsoft.AspNetCore.SignalR.Client.FunctionalTests.HubConnectionTests.CanStopAndStartConnection(protocol: JsonHubProtocol { Name = \"json\", PayloadSerializer = JsonSerializer { Binder = (throws InvalidOperationException), CheckAdditionalContent = False, ConstructorHandling = Default, Context = System.Runtime.Serialization.StreamingContext, ContractResolver = CamelCasePropertyNamesContractResolver { ... }, ... }, TransferFormat = Text }, transportType: WebSockets, path: \"/hubT\")\r\nError Message:\r\n System.OperationCanceledException : The operation was canceled.\r\nStack Trace:\r\n   at System.Threading.CancellationToken.ThrowOperationCanceledException()\r\n```\r\n\r\nNot sure why this got cancelled"}],"ResultType":"GitHubEvent"},"Mvc":{"Events":[{"Id":"7410580866","Type":"PullRequestEvent","CreatedAt":"2018-03-21T03:28:10","Actor":"rynowak","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/pull/7516","RelatedDescription":"Opened pull request \"Set model prefix for [ApiController]\" (#7516) at aspnet/Mvc","RelatedBody":"Infers the 'empty' model prefix for complex types that are read from the value\r\nproviders. This gives us better defaults when using the parameter object\r\npattern with respect to swagger/API explorer."},{"Id":"7410243657","Type":"IssuesEvent","CreatedAt":"2018-03-21T01:10:38","Actor":"javiercn","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7515","RelatedDescription":"Opened issue \"Support for optional attribute in partial taghelper\" (#7515) at aspnet/Mvc","RelatedBody":"It would be neat if we can have the ability to optionally render a partial (similar to sections) either optionally or with a fallback. This is useful for libraries packing UI to allow easier composition with applications.\r\n\r\nFor example, a library could do something like\r\n\r\n`<partial name=\"./_LoginPartial.cshtml\" fallback=\"_LoginPartial />` to indicate:\r\n\r\nTry and render that view from the main app or use the fallback if not found.\r\n\r\nSimilarly this allows UI in libraries to define \"gaps\" in pages/views that the consuming app can use.\r\n\r\n/cc: @DamianEdwards \r\n"},{"Id":"7410029792","Type":"IssuesEvent","CreatedAt":"2018-03-20T23:51:42","Actor":"kspearrin","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7514","RelatedDescription":"Opened issue \"Feature Request: Custom HTMLHelper Form CSS Classes\" (#7514) at aspnet/Mvc","RelatedBody":"Currently the HtmlHelper css classes are constant strings:\r\n\r\nhttps://github.com/aspnet/Mvc/blob/ecedbd5372a8460055eefd269938d0b26e826d3c/src/Microsoft.AspNetCore.Mvc.ViewFeatures/ViewFeatures/HtmlHelper.cs#L25-L30\r\n\r\nFrameworks like Bootstrap 3 and now 4 have lots of special styling around these same elements, but they use different values (ex. `is-valid`, `is-invalid`,`invalid-feedback`, `invalid-tooltip`, etc. more at https://getbootstrap.com/docs/4.0/components/forms/#validation)\r\n\r\nI understand that we can write our own CSS rules to match this functionality, but it would be much nicer if we could just customize these values as part of MVC's configuration. That way we can easily tie into existing UI framework validation classes that provide much of the same functionality."}],"ResultType":"GitHubEvent"},"Identity":{"Events":[{"Id":"7409740211","Type":"IssuesEvent","CreatedAt":"2018-03-20T22:28:12","Actor":"HaoK","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1699","RelatedDescription":"Opened issue \"Investigate EF warning from tests about 20+ service providers\" (#1699) at aspnet/Identity","RelatedBody":"You'll see these if you build during many of the Identity functional tests\r\n\r\n```\r\nMore than twenty 'IServiceProvider' instances have been created for internal use by Entity Framework. This is commonly caused by injection of a new singleton servic\r\ne instance into every DbContext instance. For example, calling UseLoggerFactory passing in a new instance each time--see https://go.microsoft.com/fwlink/?linkid=869049 fo\r\nr more details. Consider reviewing calls on 'DbContextOptionsBuilder' that may require new service providers to be built. \r\n```\r\n\r\ncc @ajcvickers "},{"Id":"7408102748","Type":"IssuesEvent","CreatedAt":"2018-03-20T17:11:30","Actor":"HaoK","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/issues/1625","RelatedDescription":"Closed issue \"Add: AddDefaultIdentity()\" (#1625) at aspnet/Identity","RelatedBody":"Based on discussions with @davidfowl \r\n\r\nConsider something like:\r\n\r\n```\r\n   services.AddIdentity<User, Role, DbContext>()\r\n```\r\n\r\nFor auth consider adding a new options class with 4 `IOptionsBuilder` properties that allow configuration of each cookie.\r\n\r\ncc @ajcvickers @blowdart "},{"Id":"7408101086","Type":"PullRequestEvent","CreatedAt":"2018-03-20T17:11:15","Actor":"HaoK","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/pull/1694","RelatedDescription":"Closed pull request \"Add AddDefaultIdentity() method\" (#1694) at aspnet/Identity","RelatedBody":"- Fixes https://github.com/aspnet/Identity/issues/1625\r\n- Adds new template sugar method (AddIdentityV2) basically.\r\n- Roles are now not included by default, can be easily added back via `.AddRoles<IdentityRole>()`\r\n- Note this has to live in the UI package since that's the leaf package that has everything.\r\n- Still clobbers the authentication schemes to point to identity cookies, we'll revisit that in 2.2\r\n- Rolls the MaxKeyLength into a hidden default in the sugar method (should we set it only in the args less overload?)\r\n\r\n@ajcvickers @blowdart @javiercn "},{"Id":"7408095778","Type":"PullRequestEvent","CreatedAt":"2018-03-20T17:10:23","Actor":"HaoK","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Identity/pull/1698","RelatedDescription":"Merged pull request \"Merge from release/2.1\" (#1698) at aspnet/Identity","RelatedBody":""},{"Id":"7408093034","Type":"PullRequestEvent","CreatedAt":"2018-03-20T17:09:57","Actor":"HaoK","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/pull/1698","RelatedDescription":"Opened pull request \"Merge from release/2.1\" (#1698) at aspnet/Identity","RelatedBody":""},{"Id":"7407326203","Type":"IssuesEvent","CreatedAt":"2018-03-20T15:13:57","Actor":"HaoK","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/issues/1689","RelatedDescription":"Closed issue \"[Question] Get current user login info in ASP.Net Core 2.0\" (#1689) at aspnet/Identity","RelatedBody":"I want to get current user login info like username, id. The following code work good but is there any cleaner way to achieve it.\r\n```cs\r\nprivate readonly IHttpContextAccessor _httpContextAccessor;\r\n        private readonly IGenericRepository<User> _userRepository;\r\n        private readonly UserManager<User> _userManager;\r\n\r\n        private readonly string _currentUserGuid;\r\n        private readonly string _currentUserName;\r\n        private readonly List<string> _currentUserRoles;\r\n\r\n        public UserService(\r\n            UserManager<User> userManager,\r\n            IHttpContextAccessor httpContextAccessor,\r\n            IGenericRepository<User> userRepository)\r\n        {\r\n            _userManager = userManager;\r\n            _httpContextAccessor = httpContextAccessor;\r\n            _userRepository = userRepository;\r\n            _currentUserGuid = GetCurrentUserClaims().UserId;\r\n            _currentUserName = GetCurrentUserClaims().UserName;\r\n            _currentUserRoles = GetCurrentUserClaims().UserRoles;\r\n        }\r\n\r\n        public async Task<User> GetCurrentUserAsync()\r\n        {\r\n           return await _userRepository.GetByIdAsync(_currentUserGuid);\r\n        }\r\n\r\n        public string GetCurrentUserGuid()\r\n        {\r\n            return _currentUserGuid;\r\n        }\r\n\r\n        public string GetCurrentUserName()\r\n        {\r\n            return _currentUserName;\r\n        }\r\n\r\n        public List<string> GetCurrentUserRole()\r\n        {\r\n            return _currentUserRoles;\r\n        }\r\n\r\n        private UserClaims GetCurrentUserClaims()\r\n        {\r\n            var userClaims = new UserClaims();\r\n            var claims = _httpContextAccessor.HttpContext.User.Claims.ToList();\r\n            foreach (var claim in claims)\r\n            {\r\n                switch (claim.Type)\r\n                {\r\n                    case UserClaimsKey.Sub:\r\n                        userClaims.UserId = claim.Value;\r\n                        break;\r\n                    case UserClaimsKey.Name:\r\n                        userClaims.UserName = claim.Value;\r\n                        break;\r\n                    case UserClaimsKey.Role:\r\n                        userClaims.UserRoles.Add(claim.Value);\r\n                        break;\r\n                }\r\n            }\r\n\r\n            return userClaims;\r\n        }\r\n```"}],"ResultType":"GitHubEvent"},"Kestrel":{"Events":[{"Id":"7410155772","Type":"IssuesEvent","CreatedAt":"2018-03-21T00:36:09","Actor":"davidfowl","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2412","RelatedDescription":"Opened issue \"Bedrock API review\" (#2412) at aspnet/KestrelHttpServer","RelatedBody":"## Protocol abstractions renamed\r\n\r\nMicrosoft.AspNetCore.Connections.Abstractions\r\n\r\npublic abstract ConnectionHandler\r\n{\r\n    Task OnConnectionAsync(ConnectionContext connectionContext);\r\n}\r\n\r\npublic interface IConnectionBuilder\r\n{\r\n    void Use(Func<ConnectionDelegate, ConnectionDelegate> middleware);\r\n}\r\n"},{"Id":"7409763619","Type":"IssuesEvent","CreatedAt":"2018-03-20T22:34:00","Actor":"muratg","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2410","RelatedDescription":"Closed issue \" Error -107 ENOTCONN socket is not connected\" (#2410) at aspnet/KestrelHttpServer","RelatedBody":"I am having a strange issue, the Same application is running fine on one ubuntu 16.04 Server with Dotnet core 2.0\r\nI installed new Ubuntu and tried to deploy the application as soon as clients connect it gives this error\r\n\r\n\r\nelsteppgc@elbystep:~/stepel$ sudo su\r\n[sudo] password for elsteppgc:\r\nroot@elbystep:/home/elsteppgc/stepel# dotnet Elp.dll\r\nHosting environment: Production\r\nContent root path: /home/elsteppgc/stepel\r\nNow listening on: http://localhost:5000\r\nApplication started. Press Ctrl+C to shut down.\r\nfail: Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv[0]\r\n      ListenerSecondary.OnConnection\r\nMicrosoft.AspNetCore.Server.Kestrel.Transport.Libuv.Internal.Networking.UvException: Error -107 ENOTCONN socket is not connected\r\n   at Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv.Internal.Networking.LibuvFunctions.ThrowError(Int32 statusCode)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv.Internal.Networking.LibuvFunctions.tcp_getpeername(UvTcpHandle handle, SockAddr& addr, Int32& namelen)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv.Internal.Networking.UvTcpHandle.GetPeerIPEndPoint()\r\n   at Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv.Internal.LibuvConnection..ctor(ListenerContext context, UvStreamHandle socket)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv.Internal.ListenerSecondary.ReadStartCallback(UvStreamHandle handle, Int32 status)\r\n\r\n\r\nhttps://github.com/dexterhussain/KestrelWebTest\r\n"},{"Id":"7408821145","Type":"PullRequestEvent","CreatedAt":"2018-03-20T19:19:21","Actor":"halter73","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2409","RelatedDescription":"Merged pull request \"React to aspnet/BuildTools#611\" (#2409) at aspnet/KestrelHttpServer","RelatedBody":"This should fix the travis linux builds.\r\n\r\naspnet/BuildTools#611"},{"Id":"7408784571","Type":"IssuesEvent","CreatedAt":"2018-03-20T19:12:01","Actor":"zpodlovics","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2411","RelatedDescription":"Closed issue \"Kestrel Libuv transport flow control and TCP Window Full / TCP ZeroWindow\" (#2411) at aspnet/KestrelHttpServer","RelatedBody":"Hi,\r\n\r\nI am benchmarking Kestrel with a WebSocket client, and I ran into a problem where the client will hang forever. According to the network traces client flood the server with websocket messages and it works for a while, until the tcp window reduced to zero than the client-server state will go into a weird state where the client will hang forever (at least new clients could connect to the server that seems works). How the tcp flow control supposed to work between the Kestrel Server and the WebSocketClient when everything is async? Would it be possible to have some kind of async backpressure notification (as some kind of callbacks) on both the server and both the client when the they not be able to send/receive more data?\r\n\r\n**Update1**: it still have the same problem, when no min response data rate (but no exceptions) limit applied. \r\nThe Program.cs:16 line should be replaced to:\r\n.UseKestrel(options => options.Limits.MinResponseDataRate=null)\r\n\r\nPlease take a look at the attached screenshots too.\r\n\r\nRelated issues:\r\nI guess similar tcp flow control problem exists for https://github.com/aspnet/KestrelHttpServer/issues/2171\r\n\r\nAdditional observations:\r\nchanging the linux kernel network parameters (net.core.rmem_max, net.core.wmem_max, net.ipv4.tcp_rmem, net.ipv4.tcp_wmem) (increasing the default rcv/snd buffers) will not solve anything it will only delay the problem a little bit, it will eventually reach the tcp window full state.\r\n\r\nExample application (client+server) are attached and a network trace too (it could be viewed with wireshark).\r\n[aspnetwebsocketbenchmark.zip](https://github.com/aspnet/KestrelHttpServer/files/1829772/aspnetwebsocketbenchmark.zip)\r\n\r\n[aspnetwebsocketbenchmark_2018-03-20_1.pcapng.zip](https://github.com/aspnet/KestrelHttpServer/files/1829792/aspnetwebsocketbenchmark_2018-03-20_1.pcapng.zip)\r\n\r\nTCP Sequence Numbers:\r\n\r\n![screenshot from 2018-03-20 15-17-41](https://user-images.githubusercontent.com/8523206/37661678-41de3d94-2c4d-11e8-8396-0684817b6e20.png)\r\n\r\nWireshark screenshots:\r\n![screenshot from 2018-03-20 15-18-48](https://user-images.githubusercontent.com/8523206/37661728-58ee175c-2c4d-11e8-8fca-43a98aaa3778.png)\r\n![screenshot from 2018-03-20 15-19-01](https://user-images.githubusercontent.com/8523206/37661738-5b80a354-2c4d-11e8-890e-9b97ec595254.png)\r\n\r\n\r\n\r\nServer:\r\n\r\n```\r\nHosting environment: Production\r\nContent root path: /tmp/aspnetwebsocketbenchmark\r\nNow listening on: http://localhost:5000\r\nApplication started. Press Ctrl+C to shut down.\r\ninfo: Microsoft.AspNetCore.Hosting.Internal.WebHost[1]\r\n      Request starting HTTP/1.1 GET http://localhost:5000/ws  \r\ninfo: Microsoft.AspNetCore.Server.Kestrel[28]\r\n      Connection id \"0HLCEE0CSQB7N\", Request id \"0HLCEE0CSQB7N:00000001\": the connection was closed becuase the response was not read by the client at the specified minimum data rate.\r\ninfo: Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv[14]\r\n      Connection id \"0HLCEE0CSQB7N\" communication error.\r\nMicrosoft.AspNetCore.Server.Kestrel.Transport.Libuv.Internal.Networking.UvException: Error -125 ECANCELED operation canceled\r\nfail: Microsoft.AspNetCore.Server.Kestrel[13]\r\n      Connection id \"0HLCEE0CSQB7N\", Request id \"0HLCEE0CSQB7N:00000001\": An unhandled exception was thrown by the application.\r\nSystem.Net.WebSockets.WebSocketException (0x80004005): The remote party closed the WebSocket connection without completing the close handshake. ---> System.TimeoutException: The operation has timed out.\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Net.WebSockets.ManagedWebSocket.<EnsureBufferContainsAsync>d__70.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Net.WebSockets.ManagedWebSocket.<ReceiveAsyncPrivate>d__61.MoveNext()\r\n   at System.Net.WebSockets.ManagedWebSocket.<ReceiveAsyncPrivate>d__61.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at AspNetWebSocketBenchmark.Server.Startup.<Echo>d__2.MoveNext() in /tmp/aspnetwebsocketbenchmark/src/AspNetWebSocketBenchmark.Server/Startup.cs:line 70\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at AspNetWebSocketBenchmark.Server.Startup.<<Configure>b__1_0>d.MoveNext() in /tmp/aspnetwebsocketbenchmark/src/AspNetWebSocketBenchmark.Server/Startup.cs:line 46\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Hosting.Internal.RequestServicesContainerMiddleware.<Invoke>d__3.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.Frame`1.<ProcessRequestsAsync>d__2.MoveNext()\r\ninfo: Microsoft.AspNetCore.Hosting.Internal.WebHost[2]\r\n      Request finished in 7621.6606ms 101 \r\n```\r\n\r\nClient:\r\n```\r\nPress any key to stop.\r\nMessageCount: 100000 \r\nMessageCount: 200000 \r\nConnectAndSendAsync Exception: System.Net.WebSockets.WebSocketException (0x80004005): The remote party closed the WebSocket connection without completing the close handshake. ---> System.IO.IOException: Unable to transfer data on the transport connection: Connection reset by peer. ---> System.Net.Sockets.SocketException: Connection reset by peer\r\n   --- End of inner exception stack trace ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Net.WebSockets.ManagedWebSocket.<SendFrameFallbackAsync>d__56.MoveNext()\r\n   at System.Net.WebSockets.ManagedWebSocket.<SendFrameFallbackAsync>d__56.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at AspNetWebSocketBenchmark.Client.Program.<ConnectAndSendAsync>d__0.MoveNext() in /tmp/aspnetwebsocketbenchmark/src/AspNetWebSocketBenchmark.Client/Program.cs:line 22 \r\n\r\n```\r\n\r\nSystem: Ubuntu 16.04 x86_64 with 4.13-lowlatency kernel\r\n\r\nPackages:\r\n```\r\nii  dotnet-host                                                 2.1.0-preview1-26216-03-1                                   amd64        Microsoft .NET Core Host - 2.1.0 Preview 1\r\nii  dotnet-hostfxr-2.0.5                                        2.0.5-1                                                     amd64        Microsoft .NET Core Host FX Resolver - 2.0.5 2.0.5\r\nii  dotnet-hostfxr-2.0.6                                        2.0.6-1                                                     amd64        Microsoft .NET Core Host FX Resolver - 2.0.6 2.0.6\r\nii  dotnet-runtime-2.0.5                                        2.0.5-1                                                     amd64        Microsoft .NET Core Runtime - 2.0.5 Microsoft.NETCore.App 2.0.5\r\nii  dotnet-runtime-2.0.6                                        2.0.6-1                                                     amd64        Microsoft .NET Core Runtime - 2.0.6 Microsoft.NETCore.App 2.0.6\r\nii  dotnet-runtime-deps-2.1.0-preview1-26216-03                 2.1.0-preview1-26216-03-1                                   amd64        dotnet-runtime-deps-2.1.0-preview1-26216-03 2.1.0-preview1-26216-03\r\nii  dotnet-sdk-2.1.4                                            2.1.4-1                                                     amd64        Microsoft .NET Core SDK - 2.1.4\r\n\r\n```\r\n\r\nThanks for your help!\r\n\r\n"}],"ResultType":"GitHubEvent"},"Razor":{"Events":[{"Id":"7410002478","Type":"PullRequestEvent","CreatedAt":"2018-03-20T23:42:36","Actor":"pranavkm","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/pull/2201","RelatedDescription":"Opened pull request \"Add a few more Razor Sdk fixes\" (#2201) at aspnet/Razor","RelatedBody":"* UseSharedCompilation to determine the default value of UseRazorBuildServer\r\n* Generate AssemblyDescriptionAttribute"},{"Id":"7409747741","Type":"IssuesEvent","CreatedAt":"2018-03-20T22:30:05","Actor":"kichalla","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Razor/issues/2144","RelatedDescription":"Closed issue \"Incorrect target element of nested tag helper\" (#2144) at aspnet/Razor","RelatedBody":"The following code:\r\n```csharp\r\nnamespace CustomTagHelpers\r\n{\r\n    [HtmlTargetElement(\"outer-child-tag\")]\r\n    [HtmlTargetElement(\"child-tag\", ParentTag = \"parent-tag\")]\r\n    public class ChildTagHelper : TagHelper\r\n    {\r\n        public override void Process(TagHelperContext context, TagHelperOutput output)\r\n        {\r\n            output.TagName = \"span\";\r\n            output.Content.SetContent(\"child content\");\r\n        }\r\n    }\r\n\r\n    [HtmlTargetElement(\"parent-tag\")]\r\n    [RestrictChildren(\"child-tag\")]\r\n    public class ParentTagHelper : TagHelper\r\n    {\r\n        public override void Process(TagHelperContext context, TagHelperOutput output)\r\n        {\r\n            output.TagName = \"div\";\r\n\r\n            output.Content.SetContent(\"parent content\");\r\n        }\r\n    }\r\n}\r\n```\r\naims at exposing the `ChildTagHelper` as `<child-tag>` when used inside `<parent-tag>` and as `<outer-child-tag>` on root level.\r\n\r\nHowever, `<child-tag>` is also exposed on root level (screenshot from Visual Studio):\r\n![image](https://user-images.githubusercontent.com/1857705/37204585-0a0c60e6-239a-11e8-9181-d5494c6a0df2.png)\r\n\r\nCan you provide information why the above is happening and is there a way to update the definition:\r\n```\r\n [HtmlTargetElement(\"child-tag\", ParentTag = \"parent-tag\")]\r\n```\r\nso that it restricts the usage of `<child-tag>` in `<parent-tag>` only?\r\n\r\n"},{"Id":"7409745368","Type":"PullRequestEvent","CreatedAt":"2018-03-20T22:29:29","Actor":"kichalla","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Razor/pull/2195","RelatedDescription":"Merged pull request \"[Fixes #2144] Incorrect target element of nested tag helper\" (#2195) at aspnet/Razor","RelatedBody":""},{"Id":"7408455942","Type":"IssuesEvent","CreatedAt":"2018-03-20T18:11:13","Actor":"rynowak","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Razor/issues/1993","RelatedDescription":"Closed issue \"Update VS15.7 default Razor to be 2.1\" (#1993) at aspnet/Razor","RelatedBody":""},{"Id":"7408146772","Type":"IssuesEvent","CreatedAt":"2018-03-20T17:18:42","Actor":"vank-ms","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/issues/2200","RelatedDescription":"Opened issue \"Razor completion for <text> tags\" (#2200) at aspnet/Razor","RelatedBody":"I understand Razor gets opportunities to include C# completion items (like @page, @inject) and HTML items, which it currently does not participate in.  It would be nice if Razor contributed the <text> tag to HTML completion when appropriate."}],"ResultType":"GitHubEvent"},"Templates":{"Events":[],"ResultType":"GitHubEvent"},"Tooling":{"Events":[{"Id":"7381313128","Type":"IssuesEvent","CreatedAt":"2018-03-14T22:19:23","Actor":"AngelosP","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/240","RelatedDescription":"Closed issue \"Support debugging of JS executed with EdgeJS in VS\" (#240) at aspnet/Tooling","RelatedBody":"We would like to do the server side HTML rendering with ReactJS in our ASP.NET application. This works with EdgeJS, but there is currently no way to debug the JS code in VS. \n\nIt would be nice if this would work and we wouldn't need node-inspector for this.\n\nhttps://github.com/tjanczuk/edge/issues/316\n"},{"Id":"7376247861","Type":"IssuesEvent","CreatedAt":"2018-03-14T05:33:19","Actor":"barrytang","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1068","RelatedDescription":"Closed issue \"Switch between Razor Page View and Code Behind\" (#1068) at aspnet/Tooling","RelatedBody":"In the old web forms you were able to quickly switch between the ASPX file and the code behind using F7/Shift F7 or going View->Code or View->Designer. It would be useful if this was possible with Razor Pages in aspnet core projects?\r\n"},{"Id":"7372052889","Type":"IssuesEvent","CreatedAt":"2018-03-13T13:46:08","Actor":"TheConservativeCoder","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1068","RelatedDescription":"Opened issue \"Switch between Razor Page View and Code Behind\" (#1068) at aspnet/Tooling","RelatedBody":"In the old web forms you were able to quickly switch between the ASPX file and the code behind using F7/Shift F7 or going View->Code or View->Designer. It would be useful if this was possible with Razor Pages in aspnet core projects?\r\n"},{"Id":"7369868082","Type":"IssuesEvent","CreatedAt":"2018-03-13T05:33:42","Actor":"barrytang","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1067","RelatedDescription":"Closed issue \"Support dotnet watch in launchSettings.json\" (#1067) at aspnet/Tooling","RelatedBody":"I used to be able to use `dotnet watch` in Visual Studio by adding the following section to `launchSettings.json` and starting the project without debugging using CTRL + F5.\r\n\r\n```\r\n    \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    },\r\n```\r\n\r\nThis used to work in ASP.NET Core 1.1 but no longer does. According to https://github.com/aspnet/DotNetTools/issues/404 the new format for ASP.NET Core 2.0 is:\r\n\r\n```\r\n   \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"workingDirectory\": \"C:\\\\Users\\\\namc\\\\source\\\\repos\\\\WebApplication2\\\\WebApplication2\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    }\r\n```\r\n\r\nThe problem with this is the hard coded `executablePath` which is Windows specific and the `workingDirectory` which is specific to wherever I did a Git clone on my local machine."},{"Id":"7364725434","Type":"IssuesEvent","CreatedAt":"2018-03-12T10:19:58","Actor":"RehanSaeed","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1067","RelatedDescription":"Opened issue \"Support dotnet watch in launchSettings.json\" (#1067) at aspnet/Tooling","RelatedBody":"I used to be able to use `dotnet watch` in Visual Studio by adding the following section to `launchSettings.json` and starting the project without debugging using CTRL + F5.\r\n\r\n```\r\n    \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    },\r\n```\r\n\r\nThis used to work in ASP.NET Core 1.1 but no longer does. According to https://github.com/aspnet/DotNetTools/issues/404 the new format for ASP.NET Core 2.0 is:\r\n\r\n```\r\n   \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"workingDirectory\": \"C:\\\\Users\\\\namc\\\\source\\\\repos\\\\WebApplication2\\\\WebApplication2\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    }\r\n```\r\n\r\nThe problem with this is the hard coded `executablePath` which is Windows specific and the `workingDirectory` which is specific to wherever I did a Git clone on my local machine."},{"Id":"7307968614","Type":"IssuesEvent","CreatedAt":"2018-02-28T06:01:18","Actor":"barrytang","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1066","RelatedDescription":"Closed issue \"Nesting bug\" (#1066) at aspnet/Tooling","RelatedBody":"The is a problem nesting embedded resources.  I was experimenting with nesting .cshtml files using the existing rules and did this:\r\n\r\nModal.cs (bootstrap modal web component)\r\n   -> Modal.cs.cshtml (it's view file)\r\n\r\n`Modal.cs.cshtml` is set to Embedded Resource, and clearly shows it, but is completed IGNORED by the build process (simply open the DLL in a text editor [such as Notepad++] and scroll to the bottom and look for text).  If I rename the file to \"Modal.cshtml\" instead it works perfectly fine!  :/  I don't think whether or not a file is embedded should have and role in excluding a file from being embedded so this seems like a bug to me.\r\n\r\nYes, I'm aware of upcoming nesting controls in v15.6, but I'm not able to install it yet, and regardless, this should work fine, so it should be looked into nonetheless.\r\n\r\nJust to add: I'm using wild-cards to include the file.  If I explicitly add it I get this:\r\n\r\n`Duplicate 'EmbeddedResource' items were included. ...`\r\n\r\nSo it's clearly found.  It's obviously something up with the build process not finding the nested file."},{"Id":"7307353364","Type":"IssuesEvent","CreatedAt":"2018-02-28T02:19:15","Actor":"rjamesnw","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1066","RelatedDescription":"Opened issue \"Nesting bug\" (#1066) at aspnet/Tooling","RelatedBody":"The is a problem nesting embedded resources.  I was experimenting with nesting .cshtml files using the existing rules and did this:\r\n\r\nModal.cs (bootstrap modal web component)\r\n   -> Modal.cs.cshtml (it's view file)\r\n\r\n`Modal.cs.cshtml` is set to Embedded Resource, and is completed IGNORED by the build process (simply open the DLL in a text editor [such as Notepad++] and scroll to the bottom and look for text).  If I rename the file to \"Modal.cshtml\" instead it works perfectly fine!  :/  I don't think whether or not a file is embedded should have and role in excluding a file from being embedded so this seems like a bug to me.\r\n\r\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7390961156","Type":"IssuesEvent","CreatedAt":"2018-03-16T14:09:54","Actor":"natemcmaster","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Announcements/issues/297","RelatedDescription":"Closed issue \"Model binding accesses read-only properties in post-back\" (#297) at aspnet/Announcements","RelatedBody":"I have a simple edit model, which contains a few computed/read-only properties. When posting to a controller method, the model validation engine accesses these properties, causing an exception.\r\n\r\nHowever, it does not make sense to access or attempt to validate a read-only property.\r\n\r\nAdditionally, all properties are marked with [BindNever], which seems to have no effect on this behavior.\r\n\r\nThe controller method takes a single parameter (the edit model) decorated with [FromForm].\r\n\r\nUsing 2.1.0-preview2-30355."},{"Id":"7390872316","Type":"IssuesEvent","CreatedAt":"2018-03-16T13:54:05","Actor":"mnmr","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Announcements/issues/297","RelatedDescription":"Opened issue \"Model binding accesses read-only properties in post-back\" (#297) at aspnet/Announcements","RelatedBody":"I have a simple edit model, which contains a few computed/read-only properties. When posting to a controller method, the model validation engine accesses these properties, causing an exception.\r\n\r\nHowever, it does not make sense to access or attempt to validate a read-only property.\r\n\r\nAdditionally, all properties are marked with [BindNever], which seems to have no effect on this behavior.\r\n\r\nThe controller method takes a single parameter (the edit model) decorated with [FromForm].\r\n\r\nUsing 2.1.0-preview2-30355."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"976141395114082304","CreatedAt":"2018-03-20T17:00:19+00:00","UserScreenname":"aspnet","Text":"Starting now!\n\nThe #ASPNET Community Standup with @sshirhatti showing #aspnetcore 2.1 Improvements for IIS Hosting.\n\nhttps://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":16,"FavoriteCount":9,"RawContent":null},{"Id":"975923268740833280","CreatedAt":"2018-03-20T02:33:33+00:00","UserScreenname":"aspnet","Text":"This week's #ASPNET Community Standup is on Tuesday at 10 AM  Pacific / 1800 GMT. @sshirhatti will be showing… https://t.co/qlOERhEOaw","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":18,"FavoriteCount":13,"RawContent":null},{"Id":"974312682647162880","CreatedAt":"2018-03-15T15:53:40+00:00","UserScreenname":"aspnet","Text":"Watch @csharpfritz and @shanselman in this recorded video from today's LiveStream about converting an application t… https://t.co/6QP4SCXJ3S","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":16,"FavoriteCount":3,"RawContent":null},{"Id":"974274384792866817","CreatedAt":"2018-03-15T13:21:29+00:00","UserScreenname":"aspnet","Text":"Tune in to @csharpfritz and @shanselman talking through an #ASP.NET upgrade at 10am ET / 7am PT / 14:00 UTC! https://t.co/vJe8zHT12j","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":4,"FavoriteCount":3,"RawContent":null},{"Id":"973691520728510464","CreatedAt":"2018-03-13T22:45:23+00:00","UserScreenname":"aspnet","Text":"Starting now... join us for the weekly #ASPNET Community Standup at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":10,"FavoriteCount":12,"RawContent":null},{"Id":"973553523186159621","CreatedAt":"2018-03-13T13:37:02+00:00","UserScreenname":"aspnet","Text":"Today, Jeff shows you how to use dependency injection with web forms... check it out! https://t.co/viqZ28DBrV","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":23,"FavoriteCount":9,"RawContent":null},{"Id":"973350716046626816","CreatedAt":"2018-03-13T00:11:09+00:00","UserScreenname":"aspnet","Text":"Join us for the weekly #ASPNET Community Standup this Tuesday at 3:45 PM Pacific / 23:45 GMT at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":5,"FavoriteCount":3,"RawContent":null},{"Id":"972484011556818945","CreatedAt":"2018-03-10T14:47:10+00:00","UserScreenname":"aspnet","Text":"Be sure to check out Jeff's live coding stream this morning to see more about our #ASP.NET Core 2.1 preview release. https://t.co/EtKk0fMOgU","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":24,"FavoriteCount":10,"RawContent":null},{"Id":"971084152693866496","CreatedAt":"2018-03-06T18:04:38+00:00","UserScreenname":"aspnet","Text":"We are live at https://t.co/4Ioo9jNSN2 ! Join us!","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":3,"RawContent":null},{"Id":"971075755168841728","CreatedAt":"2018-03-06T17:31:16+00:00","UserScreenname":"aspnet","Text":"This week's #ASPNET Community Standup starts at 10 AM  Pacific / 1800 GMT. Ryan Nowak will be showing Web API 2.1 f… https://t.co/OW0zeYZPyq","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":22,"FavoriteCount":10,"RawContent":null},{"Id":"970812132399890432","CreatedAt":"2018-03-06T00:03:43+00:00","UserScreenname":"aspnet","Text":"This week's #ASPNET Community Standup is a feature deep dive on Web API improvements in 2.1 with Ryan Nowak.\n\nTuesd… https://t.co/eKElaXNIR3","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":36,"FavoriteCount":11,"RawContent":null},{"Id":"969671939106025473","CreatedAt":"2018-03-02T20:33:00+00:00","UserScreenname":"aspnet","Text":"Jon the Azure AD team for their first Office Hours call on March 8. https://t.co/kVYF9JWzeZ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":10,"FavoriteCount":6,"RawContent":null},{"Id":"968561906003791872","CreatedAt":"2018-02-27T19:02:08+00:00","UserScreenname":"aspnet","Text":"Join us for the weekly #ASPNET Community Standup today at 3:45 PM Pacific / 23:45 GMT at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":8,"FavoriteCount":6,"RawContent":null},{"Id":"968550190889267201","CreatedAt":"2018-02-27T18:15:34+00:00","UserScreenname":"aspnet","Text":"#ASPNET Core 2.1.0-preview1 now available https://t.co/loVh03KKfz","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":69,"FavoriteCount":54,"RawContent":null},{"Id":"966009382377897985","CreatedAt":"2018-02-20T17:59:19+00:00","UserScreenname":"aspnet","Text":"Starting now! \n\nJoin the #ASPNET Community Standup at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":8,"RawContent":null},{"Id":"965988674474188800","CreatedAt":"2018-02-20T16:37:01+00:00","UserScreenname":"aspnet","Text":"Catch the #ASPNET Community Standup today at 10 AM Pacific / 18:00 GMT with Javier C Nelson showing a preview of Ra… https://t.co/Fg8NoQJtJp","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":14,"FavoriteCount":4,"RawContent":null},{"Id":"965964952442933249","CreatedAt":"2018-02-20T15:02:46+00:00","UserScreenname":"aspnet","Text":"Jeff is working with cognitive services and Bots today on stream... check it out! https://t.co/HVyIw0Wcgd","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":7,"FavoriteCount":9,"RawContent":null}]}},"RunOn":"2018-03-21T05:30:09.8942151Z","RunDurationInMilliseconds":8569}