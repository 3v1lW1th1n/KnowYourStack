{"Data":{"Blog":{"FeedItems":[{"Title":"Mobile Developer Events in March","PublishedOn":"2018-03-01T19:05:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Around the world, Xamarin and .NET user groups are meeting up to learn and discuss the latest news on exciting releases, tooling, and updates with Xamarin and related technologies. This March, you can...","Href":"https://blog.xamarin.com/mobile-developer-events-march/","RawContent":null},{"Title":"The New, Feature-Packed UrhoSharp 1.8","PublishedOn":"2018-02-28T19:34:32+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"UrhoSharp is a .NET API for building 3D experiences in your apps. A .NET binding to the Urho3D engine, it allows developers to write cross-platform code targeting Android, iOS, Windows and macOS with...","Href":"https://blog.xamarin.com/announcing-urhosharp-1-8-release/","RawContent":null},{"Title":"New Xamarin University Course: Navigation Patterns in Xamarin.Forms (XAM205)","PublishedOn":"2018-02-26T19:10:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Xamarin.Forms, a popular choice for cross-platform Xamarin apps, has two stacks. It&#8217;s common to implement navigation by pushing and popping Pages on a stack, but the two stacks are intended for...","Href":"https://blog.xamarin.com/xamarin-forms-navigation-patterns-xam205/","RawContent":null},{"Title":"Add Tizen Projects to Your Xamarin.Forms Applications","PublishedOn":"2018-02-23T19:24:57+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This is a special guest post from Jay Cho of the Samsung Tizen team. It&#8217;s been a while since the first preview version of Tizen .NET was released. Thanks to the newest release, developing...","Href":"https://blog.xamarin.com/add-tizen-projects-xamarin-forms-apps/","RawContent":null},{"Title":"Create and Host tvOS TVML Apps with Azure and Xamarin","PublishedOn":"2018-02-22T20:30:55+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Creating amazing tvOS TVML apps doesn&#8217;t have to be hard. In this blog post, I&#8217;ll go over the many similarities tvOS has to iOS and show you how to create a sample quiz app using UIKit that...","Href":"https://blog.xamarin.com/create-tvos-tvml-apps-azure-xamarin/","RawContent":null},{"Title":"Use CoreML And Azure To Create Simple Xamarin.iOS Apps","PublishedOn":"2018-02-20T19:36:35+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last year Apple released a device-optimized machine learning framework called Core ML to make it as easy as possible to integrate machine learning and artificial intelligence services into your iOS...","Href":"https://blog.xamarin.com/coreml-azure-create-simple-xamarin-ios-apps/","RawContent":null},{"Title":"Extend Xamarin.Forms Controls Functionality with Behaviors","PublishedOn":"2018-02-16T18:48:28+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Xamarin.Forms provides a way to build 100% native, cross-platform applications with both a shared logic layer and a shared user-interface layer. Built-in Xamarin.Forms controls also provide a ton of...","Href":"https://blog.xamarin.com/extend-xamarin-forms-controls-functionality-with-behaviors/","RawContent":null},{"Title":"Xamarin.iOS and Xcode 9.3 Web Preview","PublishedOn":"2018-02-15T20:36:32+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The next release of Xcode, version 9.3, is currently in beta. Development of Xamarin.iOS to support the new Xcode 9.3 version is in-progress and available now as a web preview. Participating in...","Href":"https://blog.xamarin.com/xcode-9-3-web-preview-high-sierra-required/","RawContent":null},{"Title":"Add a Search Bar to Your Xamarin Apps in iOS 11","PublishedOn":"2018-02-12T20:00:25+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"As described in the Go Large with iOS 11 post, view controllers in iOS 11 can use large titles to improve the clarity of an app&#8217;s user interface. To complement a view controller&#8217;s large...","Href":"https://blog.xamarin.com/add-search-bar-xamarin-ios-11/","RawContent":null},{"Title":"Podcast: Rapid UI Prototyping with Ink to Code, Merged Dictionaries in Xamarin.Forms, & Android Emulator Tips","PublishedOn":"2018-02-09T19:33:06+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In this episode of the Xamarin Podcast, James Montemagno and I talk about a new tool that turns drawings into Android or UWP layouts, merged dictionaries coming to Xamarin.Forms, ways to make your...","Href":"https://blog.xamarin.com/podcast-rapid-ui-prototyping-ink-code-merged-dictionaries-xamarin-forms-android-emulator-tips/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"7335040218","Type":"PullRequestEvent","CreatedAt":"2018-03-06T01:46:01","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1367","RelatedDescription":"Merged pull request \"[build] ThirdPartyNotices.txt and $(CONFIGURATIONS)\" (#1367) at xamarin/xamarin-android","RelatedBody":"An unanticipated side-effect of commit 2bd13c4a was that\r\n`make prepare` was downloading `bundle-v*.zip` for *both*\r\n[Debug and Release][0] configurations, even on the PR builder (which\r\nonly builds Debug by default):\r\n\r\n[0]: https://jenkins.mono-project.com/view/Xamarin.Android/job/xamarin-android-pr-builder/2610/console\r\n\r\n\tDownloading `https://xamjenkinsartifact.azureedge.net/xamarin-android/xamarin-android/bin/Debug/bundle-v21-h86de098f-Debug-Darwin-libzip=1d8b1ac,llvm=bdb3a11,mono=607cbde.zip` to `/Users/builder/android-archives/.bundle-v21-h86de098f-Debug-Darwin-libzip=1d8b1ac,llvm=bdb3a11,mono=607cbde.zip.download`\r\n\t...\r\n\tDownloading `https://xamjenkinsartifact.azureedge.net/xamarin-android/xamarin-android/bin/Release/bundle-v21-h86de098f-Release-Darwin-libzip=1d8b1ac,llvm=bdb3a11,mono=607cbde.zip` to `/Users/builder/android-archives/.bundle-v21-h86de098f-Release-Darwin-libzip=1d8b1ac,llvm=bdb3a11,mono=607cbde.zip.download`.\r\n\r\nThis is unneccessary, but was a result of:\r\n\r\n\t$(foreach c, $(CONFIGURATIONS), \\\r\n\t  $(eval $(call CREATE_THIRD_PARTY_NOTICES ...)))\r\n\r\nSince `ThirdPartyNotices.csproj` has a `@(ProjectReference)` to\r\n`xa-prep-tasks.csproj`, the build of which attempts to download the\r\nbundle, simply executing `ThirdPartyNotices.csproj` was triggering a\r\nbundle download, which is not desired.\r\n\r\nRework the dependencies so that by default we only create\r\n`bin/$(CONFIGURATION)/lib/xamarin.android/ThirdPartyNotices.txt`, not\r\none for all `$(CONFIGURATIONS)`, and move the `$(CONFIGURATIONS)`\r\nlogic into `make leeroy-all`."},{"Id":"7335039295","Type":"PullRequestEvent","CreatedAt":"2018-03-06T01:45:43","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1366","RelatedDescription":"Merged pull request \"[build] Add `make package-test-errors` target\" (#1366) at xamarin/xamarin-android","RelatedBody":"Sometimes a PR build will [fail][0]. That's to be expected! ;-)\r\n\r\n[0]: https://jenkins.mono-project.com/view/Xamarin.Android/job/xamarin-android-pr-builder/2600/\r\n\r\nHowever, sometimes the error message is [largely useless][1]:\r\n\r\n[1]: https://jenkins.mono-project.com/view/Xamarin.Android/job/xamarin-android-pr-builder/2600/testReport/junit/Xamarin.Android.Build.Tests.BuildTest/BuildAotApplicationAndBundle/Xamarin_Android_Build_Tests_BuildTest_BuildAotApplicationAndBundle__armeabi_v7a__False_True____Debug/\r\n\r\n\tMESSAGE:\r\n\t  Build should have succeeded.\r\n\tExpected: True\r\n\tBut was:  False\r\n\r\n\tSTACK TRACE:\r\n\t  at Xamarin.Android.Build.Tests.BuildTest.BuildAotApplicationAndBundle (System.String supportedAbis, System.Boolean enableLLVM, System.Boolean expectedResult)\r\n\r\nThat's not helpful at all.\r\n\r\nIn such circumstanes, the usual \"fallback\" path is to check the\r\nJenkins [**Workspace**][2], then pray that the mentioned failing\r\nprojects *still exist*. The problem here is that the Workspace is\r\ncleared on *every* Jenkins build (for a specific job), so if another\r\nPR build has started, the Workspace for the previous build is no\r\nlonger accessible.\r\n\r\n[2]: https://jenkins.mono-project.com/view/Xamarin.Android/job/xamarin-android-pr-builder/ws/\r\n\r\nAdd a new `make package-test-errors` target. When called, *if* there\r\nare any error projects within `bin/Test*/temp`, they will be packaged\r\nup into `test-errors.zip`. We can then upload `test-errors.zip` to\r\nAzure -- along with the other PR build outputs -- allowing for saner\r\ndetermination of What Went Wrong™, allowing the PR to be fixed."},{"Id":"7335038455","Type":"PullRequestEvent","CreatedAt":"2018-03-06T01:45:27","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1365","RelatedDescription":"Merged pull request \"[tests] Attempt to fix up test result path after writing to local file\" (#1365) at xamarin/xamarin-android","RelatedBody":"Certain deployment targets require us to fix up an external storage path before we can pull it via adb (see ToAdbPath comments for more details). We should only attempt to fix up this path _after_ writing our test result, as our application context will not recognize it as a valid file path.\r\n\r\nFixes the following error:\r\n```\r\n03-05 12:27:26.949 E/xUnit   ( 4723): Error: System.IO.DirectoryNotFoundException: Could not find a part of the path \"/mnt/shell/emulated/0/Android/data/Xamarin.Android.Bcl_Tests/files/Documents/TestResults.xUnit.xml\".\r\n03-05 12:27:26.949 E/xUnit   ( 4723):   at System.IO.FileStream..ctor (System.String path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, System.Int32 bufferSize, System.Boolean anonymous, System.IO.FileOptions options) [0x00177] in /Users/builder/jenkins/workspace/xamarin-android-d15-7/xamarin-android/external/mono/mcs/class/corlib/System.IO/FileStream.cs:223 \r\n03-05 12:27:26.949 E/xUnit   ( 4723):   at System.IO.FileStream..ctor (System.String path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, System.Int32 bufferSize, System.IO.FileOptions options) [0x00000] in /Users/builder/jenkins/workspace/xamarin-android-d15-7/xamarin-android/external/mono/mcs/class/corlib/System.IO/FileStream.cs:106 \r\n03-05 12:27:26.949 E/xUnit   ( 4723):   at System.IO.FileStream..ctor (System.String path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, System.Int32 bufferSize, System.Boolean useAsync) [0x00000] in /Users/builder/jenkins/workspace/xamarin-android-d15-7/xamarin-android/external/mono/mcs/class/corlib/System.IO/FileStream.cs:101 \r\n03-05 12:27:26.949 E/xUnit   ( 4723):   at (wrapper remoting-invoke-with-check) System.IO.FileStream..ctor(string,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,int,bool)\r\n03-05 12:27:26.949 E/xUnit   ( 4723):   at System.Xml.XmlWriterSettings.CreateWriter (System.String outputFileName) [0x00051] in /Users/builder/jenkins/workspace/xamarin-android-d15-7/xamarin-android/external/mono/mcs/class/referencesource/System.Xml/System/Xml/Core/XmlWriterSettings.cs:464 \r\n03-05 12:27:26.949 E/xUnit   ( 4723):   at System.Xml.XmlWriter.Create (System.String outputFileName, System.Xml.XmlWriterSettings settings) [0x0000a] in /Users/builder/jenkins/workspace/xamarin-android-d15-7/xamarin-android/external/mono/mcs/class/referencesource/System.Xml/System/Xml/Core/XmlWriter.cs:610 \r\n03-05 12:27:26.949 E/xUnit   ( 4723):   at Xamarin.Android.UnitTests.XUnit.XUnitTestRunner.WriteResultsToFile () [0x00020] in C:\\Users\\peter\\source\\monodroid\\external\\xamarin-android\\tests\\TestRunner.xUnit\\XUnitTestRunner.cs:712 \r\n\r\n03-05 12:27:26.949 E/xUnit   ( 4723):   at Xamarin.Android.UnitTests.TestInstrumentation`1[TRunner].RunTests (Android.OS.Bundle& results) [0x00091] in C:\\Users\\peter\\source\\monodroid\\external\\xamarin-android\\tests\\TestRunner.Core\\TestInstrumentation.cs:240 \r\n03-05 12:27:26.949 E/xUnit   ( 4723):   at Xamarin.Android.UnitTests.TestInstrumentation`1[TRunner].OnStart () [0x00014] in C:\\Users\\peter\\source\\monodroid\\external\\xamarin-android\\tests\\TestRunner.Core\\TestInstrumentation.cs:86 \r\n03-05 12:27:27.023 I/MonoDroid( 4723): UNHANDLED EXCEPTION:\r\n03-05 12:27:27.070 I/MonoDroid( 4723): Java.Lang.NullPointerException: Exception of type 'Java.Lang.NullPointerException' was thrown.\r\n03-05 12:27:27.070 I/MonoDroid( 4723):   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw () [0x0000c] in /Users/builder/jenkins/workspace/xamarin-android-d15-7/xamarin-android/external/mono/mcs/class/referencesource/mscorlib/system/runtime/exceptionservices/exceptionservicescommon.cs:152 \r\n03-05 12:27:27.070 I/MonoDroid( 4723):   at Java.Interop.JniEnvironment+InstanceMethods.CallNonvirtualVoidMethod (Java.Interop.JniObjectReference instance, Java.Interop.JniObjectReference type, Java.Interop.JniMethodInfo method, Java.Interop.JniArgumentValue* args) [0x00089] in <1c16e67a812b475a9ae6b6e26eed9097>:0 \r\n03-05 12:27:27.070 I/MonoDroid( 4723):   at Java.Interop.JniPeerMembers+JniInstanceMethods.InvokeVirtualVoidMethod (System.String encodedMember, Java.Interop.IJavaPeerable self, Java.Interop.JniArgumentValue* parameters) [0x0005d] in <1c16e67a812b475a9ae6b6e26eed9097>:0 \r\n03-05 12:27:27.070 I/MonoDroid( 4723):   at Android.App.Instrumentation.Finish (Android.App.Result resultCode, Android.OS.Bundle results) [0x0003a] in /Users/builder/data/lanes/5945/28b08da2/source/monodroid/external/xamarin-android/src/Mono.Android/obj/Release/android-27/mcw/Android.App.Instrumentation.cs:1366 \r\n03-05 12:27:27.070 I/MonoDroid( 4723):   at Xamarin.Android.UnitTests.TestInstrumentation`1[TRunner].OnStart () [0x00053] in C:\\Users\\peter\\source\\monodroid\\external\\xamarin-android\\tests\\TestRunner.Core\\TestInstrumentation.cs:92 \r\n03-05 12:27:27.070 I/MonoDroid( 4723):   at Android.App.Instrumentation.n_OnStart (System.IntPtr jnienv, System.IntPtr native__this) [0x00008] in /Users/builder/data/lanes/5945/28b08da2/source/monodroid/external/xamarin-android/src/Mono.Android/obj/Release/android-27/mcw/Android.App.Instrumentation.cs:1729 \r\n03-05 12:27:27.071 I/MonoDroid( 4723):   at (wrapper dynamic-method) System.Object.60d1c0b0-3a21-410a-9b3a-12e201b965fe(intptr,intptr)\r\n03-05 12:27:27.071 I/MonoDroid( 4723):   --- End of managed Java.Lang.NullPointerException stack trace ---\r\n03-05 12:27:27.071 I/MonoDroid( 4723): java.lang.NullPointerException\r\n03-05 12:27:27.071 I/MonoDroid( 4723): \tat android.app.Instrumentation.finish(Instrumentation.java:213)\r\n03-05 12:27:27.071 I/MonoDroid( 4723): \tat md58bfc2187967f55be2f50e366b0d6b91f.TestInstrumentation_1.n_onStart(Native Method)\r\n03-05 12:27:27.071 I/MonoDroid( 4723): \tat md58bfc2187967f55be2f50e366b0d6b91f.TestInstrumentation_1.onStart(TestInstrumentation_1.java:35)\r\n03-05 12:27:27.071 I/MonoDroid( 4723): \tat android.app.Instrumentation$InstrumentationThread.run(Instrumentation.java:1792)\r\n03-05 12:27:27.103 E/AndroidRuntime( 4723): FATAL EXCEPTION: Instr: xamarin.android.bcltests.XUnitInstrumentation\r\n03-05 12:27:27.103 E/AndroidRuntime( 4723): Process: Xamarin.Android.Bcl_Tests, PID: 4723\r\n03-05 12:27:27.103 E/AndroidRuntime( 4723): java.lang.NullPointerException\r\n03-05 12:27:27.103 E/AndroidRuntime( 4723): \tat android.app.Instrumentation.finish(Instrumentation.java:213)\r\n03-05 12:27:27.103 E/AndroidRuntime( 4723): \tat md58bfc2187967f55be2f50e366b0d6b91f.TestInstrumentation_1.n_onStart(Native Method)\r\n03-05 12:27:27.103 E/AndroidRuntime( 4723): \tat md58bfc2187967f55be2f50e366b0d6b91f.TestInstrumentation_1.onStart(TestInstrumentation_1.java:35)\r\n03-05 12:27:27.103 E/AndroidRuntime( 4723): \tat android.app.Instrumentation$InstrumentationThread.run(Instrumentation.java:1792)\r\n```"},{"Id":"7334384232","Type":"PullRequestEvent","CreatedAt":"2018-03-05T22:35:35","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1367","RelatedDescription":"Opened pull request \"[build] ThirdPartyNotices.txt and $(CONFIGURATIONS)\" (#1367) at xamarin/xamarin-android","RelatedBody":"An unanticipated side-effect of commit 2bd13c4a was that\r\n`make prepare` was downloading `bundle-v*.zip` for *both*\r\n[Debug and Release][0] configurations, even on the PR builder (which\r\nonly builds Debug by default):\r\n\r\n[0]: https://jenkins.mono-project.com/view/Xamarin.Android/job/xamarin-android-pr-builder/2610/console\r\n\r\n\tDownloading `https://xamjenkinsartifact.azureedge.net/xamarin-android/xamarin-android/bin/Debug/bundle-v21-h86de098f-Debug-Darwin-libzip=1d8b1ac,llvm=bdb3a11,mono=607cbde.zip` to `/Users/builder/android-archives/.bundle-v21-h86de098f-Debug-Darwin-libzip=1d8b1ac,llvm=bdb3a11,mono=607cbde.zip.download`\r\n\t...\r\n\tDownloading `https://xamjenkinsartifact.azureedge.net/xamarin-android/xamarin-android/bin/Release/bundle-v21-h86de098f-Release-Darwin-libzip=1d8b1ac,llvm=bdb3a11,mono=607cbde.zip` to `/Users/builder/android-archives/.bundle-v21-h86de098f-Release-Darwin-libzip=1d8b1ac,llvm=bdb3a11,mono=607cbde.zip.download`.\r\n\r\nThis is unneccessary, but was a result of:\r\n\r\n\t$(foreach c, $(CONFIGURATIONS), \\\r\n\t  $(eval $(call CREATE_THIRD_PARTY_NOTICES ...)))\r\n\r\nSince `ThirdPartyNotices.csproj` has a `@(ProjectReference)` to\r\n`xa-prep-tasks.csproj`, the build of which attempts to download the\r\nbundle, simply executing `ThirdPartyNotices.csproj` was triggering a\r\nbundle download, which is not desired.\r\n\r\nRework the dependencies so that by default we only create\r\n`bin/$(CONFIGURATION)/lib/xamarin.android/ThirdPartyNotices.txt`, not\r\none for all `$(CONFIGURATIONS)`, and move the `$(CONFIGURATIONS)`\r\nlogic into `make leeroy-all`."},{"Id":"7333914708","Type":"PullRequestEvent","CreatedAt":"2018-03-05T20:58:43","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1366","RelatedDescription":"Opened pull request \"[build] Add `make package-test-errors` target\" (#1366) at xamarin/xamarin-android","RelatedBody":"Sometimes a PR build will [fail][0]. That's to be expected! ;-)\r\n\r\n[0]: https://jenkins.mono-project.com/view/Xamarin.Android/job/xamarin-android-pr-builder/2600/\r\n\r\nHowever, sometimes the error message is [largely useless][1]:\r\n\r\n[1]: https://jenkins.mono-project.com/view/Xamarin.Android/job/xamarin-android-pr-builder/2600/testReport/junit/Xamarin.Android.Build.Tests.BuildTest/BuildAotApplicationAndBundle/Xamarin_Android_Build_Tests_BuildTest_BuildAotApplicationAndBundle__armeabi_v7a__False_True____Debug/\r\n\r\n\tMESSAGE:\r\n\t  Build should have succeeded.\r\n  Expected: True\r\n  But was:  False\r\n\r\n\tSTACK TRACE:\r\n\t  at Xamarin.Android.Build.Tests.BuildTest.BuildAotApplicationAndBundle (System.String supportedAbis, System.Boolean enableLLVM, System.Boolean expectedResult)\r\n\r\nThat's not helpful at all.\r\n\r\nIn such circumstanes, the usual \"fallback\" path is to check the\r\nJenkins [**Workspace**][2], then pray that the mentioned failing\r\nprojects *still exist*. The problem here is that the Workspace is\r\ncleared on *every* Jenkins build (for a specific job), so if another\r\nPR build has started, the Workspace for the previous build is no\r\nlonger accessible.\r\n\r\n[2]: https://jenkins.mono-project.com/view/Xamarin.Android/job/xamarin-android-pr-builder/ws/\r\n\r\nAdd a new `make package-test-errors` target. When called, *if* there\r\nare any error projects within `bin/Test*/temp`, they will be packaged\r\nup into `test-errors.zip`. We can then upload `test-errors.zip` to\r\nAzure -- along with the other PR build outputs -- allowing for saner\r\ndetermination of What Went Wrong™, allowing the PR to be fixed."},{"Id":"7333636109","Type":"PullRequestEvent","CreatedAt":"2018-03-05T20:02:45","Actor":"pjcollins","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1365","RelatedDescription":"Opened pull request \"[tests] Attempt to fix up adb path after writing to local file\" (#1365) at xamarin/xamarin-android","RelatedBody":"Certain deployment targets require us to fix up an external storage pathbefore we can pull it via adb (see ToAdbPath comments for more details). We should only attempt to fix up this path _after_ writing our test result, as our application context will not recognize it as a valid file.\r\n\r\nFixes the following error:\r\n```\r\n03-05 12:27:26.949 E/xUnit   ( 4723): Error: System.IO.DirectoryNotFoundException: Could not find a part of the path \"/mnt/shell/emulated/0/Android/data/Xamarin.Android.Bcl_Tests/files/Documents/TestResults.xUnit.xml\".\r\n03-05 12:27:26.949 E/xUnit   ( 4723):   at System.IO.FileStream..ctor (System.String path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, System.Int32 bufferSize, System.Boolean anonymous, System.IO.FileOptions options) [0x00177] in /Users/builder/jenkins/workspace/xamarin-android-d15-7/xamarin-android/external/mono/mcs/class/corlib/System.IO/FileStream.cs:223 \r\n03-05 12:27:26.949 E/xUnit   ( 4723):   at System.IO.FileStream..ctor (System.String path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, System.Int32 bufferSize, System.IO.FileOptions options) [0x00000] in /Users/builder/jenkins/workspace/xamarin-android-d15-7/xamarin-android/external/mono/mcs/class/corlib/System.IO/FileStream.cs:106 \r\n03-05 12:27:26.949 E/xUnit   ( 4723):   at System.IO.FileStream..ctor (System.String path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, System.Int32 bufferSize, System.Boolean useAsync) [0x00000] in /Users/builder/jenkins/workspace/xamarin-android-d15-7/xamarin-android/external/mono/mcs/class/corlib/System.IO/FileStream.cs:101 \r\n03-05 12:27:26.949 E/xUnit   ( 4723):   at (wrapper remoting-invoke-with-check) System.IO.FileStream..ctor(string,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,int,bool)\r\n03-05 12:27:26.949 E/xUnit   ( 4723):   at System.Xml.XmlWriterSettings.CreateWriter (System.String outputFileName) [0x00051] in /Users/builder/jenkins/workspace/xamarin-android-d15-7/xamarin-android/external/mono/mcs/class/referencesource/System.Xml/System/Xml/Core/XmlWriterSettings.cs:464 \r\n03-05 12:27:26.949 E/xUnit   ( 4723):   at System.Xml.XmlWriter.Create (System.String outputFileName, System.Xml.XmlWriterSettings settings) [0x0000a] in /Users/builder/jenkins/workspace/xamarin-android-d15-7/xamarin-android/external/mono/mcs/class/referencesource/System.Xml/System/Xml/Core/XmlWriter.cs:610 \r\n03-05 12:27:26.949 E/xUnit   ( 4723):   at Xamarin.Android.UnitTests.XUnit.XUnitTestRunner.WriteResultsToFile () [0x00020] in C:\\Users\\peter\\source\\monodroid\\external\\xamarin-android\\tests\\TestRunner.xUnit\\XUnitTestRunner.cs:712 \r\n\r\n03-05 12:27:26.949 E/xUnit   ( 4723):   at Xamarin.Android.UnitTests.TestInstrumentation`1[TRunner].RunTests (Android.OS.Bundle& results) [0x00091] in C:\\Users\\peter\\source\\monodroid\\external\\xamarin-android\\tests\\TestRunner.Core\\TestInstrumentation.cs:240 \r\n03-05 12:27:26.949 E/xUnit   ( 4723):   at Xamarin.Android.UnitTests.TestInstrumentation`1[TRunner].OnStart () [0x00014] in C:\\Users\\peter\\source\\monodroid\\external\\xamarin-android\\tests\\TestRunner.Core\\TestInstrumentation.cs:86 \r\n03-05 12:27:27.023 I/MonoDroid( 4723): UNHANDLED EXCEPTION:\r\n03-05 12:27:27.070 I/MonoDroid( 4723): Java.Lang.NullPointerException: Exception of type 'Java.Lang.NullPointerException' was thrown.\r\n03-05 12:27:27.070 I/MonoDroid( 4723):   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw () [0x0000c] in /Users/builder/jenkins/workspace/xamarin-android-d15-7/xamarin-android/external/mono/mcs/class/referencesource/mscorlib/system/runtime/exceptionservices/exceptionservicescommon.cs:152 \r\n03-05 12:27:27.070 I/MonoDroid( 4723):   at Java.Interop.JniEnvironment+InstanceMethods.CallNonvirtualVoidMethod (Java.Interop.JniObjectReference instance, Java.Interop.JniObjectReference type, Java.Interop.JniMethodInfo method, Java.Interop.JniArgumentValue* args) [0x00089] in <1c16e67a812b475a9ae6b6e26eed9097>:0 \r\n03-05 12:27:27.070 I/MonoDroid( 4723):   at Java.Interop.JniPeerMembers+JniInstanceMethods.InvokeVirtualVoidMethod (System.String encodedMember, Java.Interop.IJavaPeerable self, Java.Interop.JniArgumentValue* parameters) [0x0005d] in <1c16e67a812b475a9ae6b6e26eed9097>:0 \r\n03-05 12:27:27.070 I/MonoDroid( 4723):   at Android.App.Instrumentation.Finish (Android.App.Result resultCode, Android.OS.Bundle results) [0x0003a] in /Users/builder/data/lanes/5945/28b08da2/source/monodroid/external/xamarin-android/src/Mono.Android/obj/Release/android-27/mcw/Android.App.Instrumentation.cs:1366 \r\n03-05 12:27:27.070 I/MonoDroid( 4723):   at Xamarin.Android.UnitTests.TestInstrumentation`1[TRunner].OnStart () [0x00053] in C:\\Users\\peter\\source\\monodroid\\external\\xamarin-android\\tests\\TestRunner.Core\\TestInstrumentation.cs:92 \r\n03-05 12:27:27.070 I/MonoDroid( 4723):   at Android.App.Instrumentation.n_OnStart (System.IntPtr jnienv, System.IntPtr native__this) [0x00008] in /Users/builder/data/lanes/5945/28b08da2/source/monodroid/external/xamarin-android/src/Mono.Android/obj/Release/android-27/mcw/Android.App.Instrumentation.cs:1729 \r\n03-05 12:27:27.071 I/MonoDroid( 4723):   at (wrapper dynamic-method) System.Object.60d1c0b0-3a21-410a-9b3a-12e201b965fe(intptr,intptr)\r\n03-05 12:27:27.071 I/MonoDroid( 4723):   --- End of managed Java.Lang.NullPointerException stack trace ---\r\n03-05 12:27:27.071 I/MonoDroid( 4723): java.lang.NullPointerException\r\n03-05 12:27:27.071 I/MonoDroid( 4723): \tat android.app.Instrumentation.finish(Instrumentation.java:213)\r\n03-05 12:27:27.071 I/MonoDroid( 4723): \tat md58bfc2187967f55be2f50e366b0d6b91f.TestInstrumentation_1.n_onStart(Native Method)\r\n03-05 12:27:27.071 I/MonoDroid( 4723): \tat md58bfc2187967f55be2f50e366b0d6b91f.TestInstrumentation_1.onStart(TestInstrumentation_1.java:35)\r\n03-05 12:27:27.071 I/MonoDroid( 4723): \tat android.app.Instrumentation$InstrumentationThread.run(Instrumentation.java:1792)\r\n03-05 12:27:27.103 E/AndroidRuntime( 4723): FATAL EXCEPTION: Instr: xamarin.android.bcltests.XUnitInstrumentation\r\n03-05 12:27:27.103 E/AndroidRuntime( 4723): Process: Xamarin.Android.Bcl_Tests, PID: 4723\r\n03-05 12:27:27.103 E/AndroidRuntime( 4723): java.lang.NullPointerException\r\n03-05 12:27:27.103 E/AndroidRuntime( 4723): \tat android.app.Instrumentation.finish(Instrumentation.java:213)\r\n03-05 12:27:27.103 E/AndroidRuntime( 4723): \tat md58bfc2187967f55be2f50e366b0d6b91f.TestInstrumentation_1.n_onStart(Native Method)\r\n03-05 12:27:27.103 E/AndroidRuntime( 4723): \tat md58bfc2187967f55be2f50e366b0d6b91f.TestInstrumentation_1.onStart(TestInstrumentation_1.java:35)\r\n03-05 12:27:27.103 E/AndroidRuntime( 4723): \tat android.app.Instrumentation$InstrumentationThread.run(Instrumentation.java:1792)\r\n```"},{"Id":"7333331233","Type":"IssuesEvent","CreatedAt":"2018-03-05T19:04:08","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1364","RelatedDescription":"Opened issue \"Defaults communication between SDK & IDEs\" (#1364) at xamarin/xamarin-android","RelatedBody":"## Scenario\r\n\r\nIn Xamarin.Android 8.3 (d15-7), we're changing the default **SSL/TLS Implementation** (`$(AndroidTlsProvider)`) value so that BTLS is enabled by default; see 6264be7ed529b9c600696ca5b17267becb1d7c17.\r\n\r\nThat's all well and good, but what about the *end-developer* experience? Visual Studio for Mac shows these drop-downs:\r\n\r\n![Visual Studio for Mac SSL Options](https://user-images.githubusercontent.com/155958/36993318-85136ec8-207b-11e8-88fc-e51eb95e6027.png)\r\n\r\n*What is* **Default**?\r\n\r\nThe end-developer *could* hover their mouse of the `?` on the right, but (1) that's extra work, and (2) in the case of **SSL/TLS Implementation**, the `?` is useless: there is no description of what \"Default\" *means*.\r\n\r\n¯\\_(ツ)_/¯\r\n\r\nAdditionally, the Xamarin.Android SDK team may want to change what \"Default\" means in the future, e.g. revert an \"empty\" `$(AndroidTlsProvider)`  value to mean the \"Managed TLS 1.0\" while the meaning of `$(AndroidClientHandler)==''` is altered.\r\n\r\n## Solution\r\n\r\nThe proposal is to update [`Xamarin.Android.Common.props`](https://github.com/xamarin/xamarin-android/blob/b6c490959bdc7f53a60b730994b35affc71e155c/src/Xamarin.Android.Build.Tasks/Xamarin.Android.Common.props.in) -- which the IDE *already knows about and has access to* -- so that it specifies what the default *is* and what it *means*.\r\n\r\nThe proposal is for two additional MSBuild properties:\r\n\r\n* `$(AndroidDefaultClientHandlerLabel)`: The label for the default **HttpClient Implementation** label.\r\n* `$(AndroidDefaultTlsProviderLabel)`: The label for the default **SSL/TLS Implementation** label.\r\n\r\nFor example, at present we'd have:\r\n\r\n```xml\r\n<AndroidDefaultClientHandlerLabel>Default (HttpClientHandler)</AndroidDefaultClientHandlerLabel>\r\n<AndroidDefaultTlsProviderLabel>Default (BTLS)</AndroidDefaultTlsProviderLabel>\r\n```\r\n\r\nThe value of these properties would be used instead of `Default` in the appropriate drop-down boxes within the IDEs.\r\n\r\n**Alternative take**: Instead of \"just\" specifying the default value, we could provide *all* the supported values in a `;`-and-`:`-delimited list: `;` between descriptions, and `:` to separate label names from `.csproj` values:\r\n\r\n```xml\r\n<AndroidDefaultClientHandlerLabels>\r\n    Default (HttpClientHandler):;\r\n    Managed (HttpClientHandler):System.Net.Http.HttpClientHandler, System.Net.Http;\r\n    AndroidClientHandler:Xamarin.Android.Net.AndroidClientHandler\r\n</AndroidDefaultClientHandlerLabels>\r\n<AndroidDefaultTlsProviderLabels>\r\n    Default (BTLS):;\r\n    Native TLS 1.2+:btls;\r\n    Managed TLS 1.0:legacy;\r\n</AndroidDefaultTlsProviderLabels>\r\n```\r\n\r\n## Discussion\r\n\r\nThe downside with either of these solutions is that it hardcodes localizable strings into an unlocalizable file. \"Default\" (should?) be localized. Perhaps the above solutions are \"fine\" and we just need to pass the resulting values through e.g. `gettext()` (or however the IDEs handle localization), or perhaps some other solution is needed."},{"Id":"7333192413","Type":"IssuesEvent","CreatedAt":"2018-03-05T18:37:33","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1361","RelatedDescription":"Reopened issue \"AndroidCreateDebugKey uses weak signature algorithm\" (#1361) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\nI did this under Linux but I guess it is the same under Windows:\r\n1. msbuild an Xamarin.Android project with target Debug / SignAndroidPackage \r\n2. msbuild task _CreateAndroidDebugSigningKey calls into [AndroidDebugKey](https://github.com/xamarin/xamarin-android/blob/master/src/Xamarin.Android.Build.Tasks/Tasks/AndroidCreateDebugKey.cs)\r\n3. AndroidDebugKey calls keytool with something like: /usr/bin/keytool -genkeypair -alias androiddebugkey -storepass android -keypass android -keystore \"..debug.keystore\" -dname \"CN=Android Debug,O=Android,C=US\" -keyalg RSA -validity 10950\r\n\r\n### Expected Behavior\r\n\r\nDebug APK is signed with an accepted algorithm. Refer to this page:\r\nhttp://www.oracle.com/technetwork/java/javase/8u131-relnotes-3565278.html\r\n\r\n### Actual Behavior\r\n\r\nThe value \"RSA\" for parameter keyalg leads to a signed APK which is considered not signed right after creation. Output of:\r\n\r\njarsigner -verify -verbose -certs ./bin/Android/AnyCPU/Release/some-Signed.apk\r\n\r\nshows:\r\n\r\nSigned by \"CN=Android Debug, O=Android, C=US\"\r\n    Digest algorithm: SHA1\r\n    Signature algorithm: MD5withRSA (weak), 2048-bit key\r\n\r\nWARNING: The jar will be treated as unsigned, because it is signed with a weak algorithm that is now disabled by the security property:\r\n\r\n  jdk.jar.disabledAlgorithms=MD2, MD5, RSA keySize < 1024, DSA keySize < 1024\r\n\r\n\r\n### Version Information\r\n\r\nTried with:\r\n\r\njava version \"1.8.0_161\"\r\nJava(TM) SE Runtime Environment (build 1.8.0_161-b12)\r\nJava HotSpot(TM) 64-Bit Server VM (build 25.161-b12, mixed mode)\r\n\r\nxamarin-android build version 8.3.99.19\r\n"},{"Id":"7333192188","Type":"IssuesEvent","CreatedAt":"2018-03-05T18:37:30","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1361","RelatedDescription":"Closed issue \"AndroidCreateDebugKey uses weak signature algorithm\" (#1361) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\nI did this under Linux but I guess it is the same under Windows:\r\n1. msbuild an Xamarin.Android project with target Debug / SignAndroidPackage \r\n2. msbuild task _CreateAndroidDebugSigningKey calls into [AndroidDebugKey](https://github.com/xamarin/xamarin-android/blob/master/src/Xamarin.Android.Build.Tasks/Tasks/AndroidCreateDebugKey.cs)\r\n3. AndroidDebugKey calls keytool with something like: /usr/bin/keytool -genkeypair -alias androiddebugkey -storepass android -keypass android -keystore \"..debug.keystore\" -dname \"CN=Android Debug,O=Android,C=US\" -keyalg RSA -validity 10950\r\n\r\n### Expected Behavior\r\n\r\nDebug APK is signed with an accepted algorithm. Refer to this page:\r\nhttp://www.oracle.com/technetwork/java/javase/8u131-relnotes-3565278.html\r\n\r\n### Actual Behavior\r\n\r\nThe value \"RSA\" for parameter keyalg leads to a signed APK which is considered not signed right after creation. Output of:\r\n\r\njarsigner -verify -verbose -certs ./bin/Android/AnyCPU/Release/some-Signed.apk\r\n\r\nshows:\r\n\r\nSigned by \"CN=Android Debug, O=Android, C=US\"\r\n    Digest algorithm: SHA1\r\n    Signature algorithm: MD5withRSA (weak), 2048-bit key\r\n\r\nWARNING: The jar will be treated as unsigned, because it is signed with a weak algorithm that is now disabled by the security property:\r\n\r\n  jdk.jar.disabledAlgorithms=MD2, MD5, RSA keySize < 1024, DSA keySize < 1024\r\n\r\n\r\n### Version Information\r\n\r\nTried with:\r\n\r\njava version \"1.8.0_161\"\r\nJava(TM) SE Runtime Environment (build 1.8.0_161-b12)\r\nJava HotSpot(TM) 64-Bit Server VM (build 25.161-b12, mixed mode)\r\n\r\nxamarin-android build version 8.3.99.19\r\n"},{"Id":"7333179369","Type":"PullRequestEvent","CreatedAt":"2018-03-05T18:34:53","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1363","RelatedDescription":"Merged pull request \"Fix package creation on oss\" (#1363) at xamarin/xamarin-android","RelatedBody":"`make package-oss` fails on Linux with the following error:\r\n\r\n    if [ ! -f xamarin.android-oss_v8.3.99.23_Linux-x86_64_master_3f587f51/ThirdPartyNotices.txt ] ; then cp -f bin/*/lib/xamarin.android/ThirdPartyNotices.txt xamarin.android-oss_v8.3.99.23_Linux-x86_64_master_3f587f51 ; fi\r\n    cp: will not overwrite just-created 'xamarin.android-oss_v8.3.99.23_Linux-x86_64_master_3f587f51/ThirdPartyNotices.txt' with 'bin/Release/lib/xamarin.android/ThirdPartyNotices.txt'\r\n\r\nwhich is due to some weird decisions GNU cp makes when copying files with the\r\nsame names from different source directories to the same destination. The fix is\r\nto use `-a` (archive), however, it's not portable as macOS (BSD) version of cp\r\ndoesn't support it. Thus, this patch"},{"Id":"7332044085","Type":"PullRequestEvent","CreatedAt":"2018-03-05T15:16:52","Actor":"grendello","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1363","RelatedDescription":"Opened pull request \"Fix package creation on oss\" (#1363) at xamarin/xamarin-android","RelatedBody":"`make package-oss` fails on Linux with the following error:\r\n\r\n    if [ ! -f xamarin.android-oss_v8.3.99.23_Linux-x86_64_master_3f587f51/ThirdPartyNotices.txt ] ; then cp -f bin/*/lib/xamarin.android/ThirdPartyNotices.txt xamarin.android-oss_v8.3.99.23_Linux-x86_64_master_3f587f51 ; fi\r\n    cp: will not overwrite just-created 'xamarin.android-oss_v8.3.99.23_Linux-x86_64_master_3f587f51/ThirdPartyNotices.txt' with 'bin/Release/lib/xamarin.android/ThirdPartyNotices.txt'\r\n\r\nwhich is due to some weird decisions GNU cp makes when copying files with the\r\nsame names from different source directories to the same destination. The fix is\r\nto use `-a` (archive), however, it's not portable as macOS (BSD) version of cp\r\ndoesn't support it. Thus, this patch"}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"7334859669","Type":"IssuesEvent","CreatedAt":"2018-03-06T00:48:25","Actor":"jassmith","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/1953","RelatedDescription":"Closed issue \"Scaling broken with current Forms (WidthRequest property)\" (#1953) at xamarin/Xamarin.Forms","RelatedBody":"Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues\r\n\r\n### Description\r\nI am setting a static property which gets the physical screen size from the device. This is then applied to the WidthRequest property of a button. The request is being ignored.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Download and build the following source https://www.dropbox.com/s/o2m5piotj39kr6t/dynamicsize.zip?dl=0\r\n2. Run on UWP, Android or iOS\r\n\r\n### Expected Behavior\r\nThe button is correctly scaled (this can equally be an image or any other UI object)\r\n\r\n### Actual Behavior\r\nThe button appears full screen. A debug point before the Content is set shows the screen size is correctly read\r\n\r\n### Basic Information\r\n\r\n- Version with issue:\r\n- Last known good version: 2.5.0.122203 (Android/iOS)\r\n- IDE: VS.Mac and VS2017 15.5.7\r\n- Platform Target Frameworks: <!-- All that apply -->\r\n  - iOS:  11.2\r\n  - Android: 6\r\n  - UWP:  16299\r\n\r\n### Reproduction Link\r\n\r\nhttps://www.dropbox.com/s/o2m5piotj39kr6t/dynamicsize.zip?dl=0>\r\n\r\nThis is bug is also related to #1893 and shows it as a minimal case"},{"Id":"7334780551","Type":"IssuesEvent","CreatedAt":"2018-03-06T00:23:05","Actor":"codercampos","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/2021","RelatedDescription":"Opened issue \"Removing TapGestureRecognizer and then re-add it inside its command throws an Exception\" (#2021) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\nWe have found a particular issue when you try to remove a TapGestureRecognizer from a element inside its command and then re-add it to that element. When tries to add it again, throws an InvalidOperationException. This only happens on Android, on iOS seems to work without problem.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Set a new TapGestureRecognizer\r\n2. Set the a new Command\r\n3. In the Command, remove the TapGestureRecognizer from the collection you will add it\r\n4. Execute any code you want (maybe a new Page call)\r\n5. Re-Add the TapGestureRecognizer to the control you previously added\r\n\r\nExample code:\r\n```\r\nvar tabGesture = new TapGestureRecognizer();\r\nvar animateCommand = new Command(async () =>\r\n{\r\n      await stack.ScaleTo(.96, 100);\r\n      await stack.ScaleTo(1, 100);\r\n      DataContext.SearchPopupCommand.Execute(key);\r\n});\r\ntabGesture.Command = animateCommand;\r\nstack.GestureRecognizers.Add(tabGesture);\r\n```\r\n\r\n### Expected Behavior\r\nCommand should be executed without problem.\r\n\r\n### Actual Behavior\r\nOn iOS: Works fine. Command is executed.\r\nOn Android: System.InvalidOperationException is thrown: Collection was modified; enumeration operation may not execute.\r\n\r\n### Basic Information\r\n\r\n- Version with issue: Version 2.5.0.122203\r\n- Last known good version: Unknown \r\n- IDE: Visual Studio for Mac 7.3.3\r\n- Platform Target Frameworks: \r\n  - iOS:  11.6.1.4 (with Xcode 9.2)\r\n  - Android: 7.1\r\n- Android Support Library Version: 25.4.0.2 (Xamarin.Android.Support.v7.AppCompat)\r\n- Affected Devices: Nexus 5 Android Emulator with Google Services (Android 5.0), Samsung Core 2 (SM-G355M and Android 4.4.2) \r\n"},{"Id":"7334653436","Type":"IssuesEvent","CreatedAt":"2018-03-05T23:44:45","Actor":"insearchof1230","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/2019","RelatedDescription":"Reopened issue \"BindingContext object not being passed thru CommandParameter\" (#2019) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\nViewCell BindingContext object is no being passed thru the CommandParameter property to viewModel (Prism.Forms). All signs point to the BindingContext being the issue, not the CommandParameter.\r\n\r\nXAML Snippet:\r\n```\r\n<ListView x:Name=\"List\" Grid.Row=\"0\" ItemsSource=\"{Binding AttachmentTypeSet.Items}\">\r\n <ListView.ItemTemplate>\r\n  <DataTemplate>\r\n   <ViewCell>\r\n    <StackLayout x:Name=\"Item\" Padding=\"15,0\">\r\n     <Grid>\r\n      <Grid.ColumnDefinitions>\r\n       <ColumnDefinition Width=\"8*\" />\r\n       <ColumnDefinition Width=\"1*\" />\r\n       <ColumnDefinition Width=\"1*\" />\r\n      </Grid.ColumnDefinitions>\r\n      <Label Grid.Row=\"0\" Grid.Column=\"0\" Text=\"{Binding Message}\" VerticalOptions=\"Center\" />\r\n      <Button BindingContext=\"{Binding Source={x:Reference List}, Path=BindingContext}\" Command=\"{Binding Camera}\" **CommandParameter=\"{Binding Source={x:Reference Item}, Path=BindingContext}\"** Grid.Row=\"0\" Grid.Column=\"1\" Text=\"Cam\" TextColor=\"#0098d1\" HorizontalOptions=\"End\" />\r\n      <Button BindingContext=\"{Binding Source={x:Reference List}, Path=BindingContext}\" Command=\"{Binding Library}\" **CommandParameter=\"{Binding Source={x:Reference Item}, Path=BindingContext}\"** Grid.Row=\"0\" Grid.Column=\"2\" Text=\"Lib\" TextColor=\"#0098d1\" HorizontalOptions=\"End\" />\r\n     </Grid>\r\n    </StackLayout>\r\n   </ViewCell>\r\n  </DataTemplate>\r\n </ListView.ItemTemplate>\r\n</ListView>\r\n```\r\n\r\nViewModel Snippet:\r\n```\r\n_camera = new DelegateCommand<FAMLookupItem>(**u** => TakePicture(FileSource.Camera, (AttachmentTypeViewModel)u.Obj));\r\n_library = new DelegateCommand<FAMLookupItem>(**u** => TakePicture(FileSource.Picker, (AttachmentTypeViewModel)u.Obj));\r\n```\r\n\r\n\r\n### Steps to Reproduce\r\n\r\n1. Create a ListView. \r\n2. Create a button within the ViewCell.\r\n3. Set a bindingContext to the button for the ListView rows object.\r\n4. Click the button\r\n\r\n### Expected Behavior\r\nCommandParameter passed into ViewModel should not be NULL.\r\n\r\n### Actual Behavior\r\nCommandParameter passed into ViewModel IS NULL.\r\n\r\n### Basic Information\r\n\r\n- Version with issue: 2.5.1.317207-pre1\r\n- Last known good version: 2.5.0.280555\r\n- IDE: Visual Studio for Mac\r\n- Platform Target Frameworks:\r\n  - iOS:  11.2 \r\n  - Android: didn't try\r\n  - UWP:  didn't try\r\n- Android Support Library Version: N/A\r\n- Nuget Packages: Xamarin.Forms.2.5.1.317207-pre1.nupkg\r\n- Affected Devices:\r\n\r\n### Screenshots\r\nN/A\r\n\r\n### Reproduction Link\r\nWill create one if requested.\r\n\r\n"},{"Id":"7334652919","Type":"IssuesEvent","CreatedAt":"2018-03-05T23:44:36","Actor":"insearchof1230","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/2019","RelatedDescription":"Closed issue \"BindingContext object not being passed thru CommandParameter\" (#2019) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\nViewCell BindingContext object is no being passed thru the CommandParameter property to viewModel (Prism.Forms). All signs point to the BindingContext being the issue, not the CommandParameter.\r\n\r\nXAML Snippet:\r\n```\r\n<ListView x:Name=\"List\" Grid.Row=\"0\" ItemsSource=\"{Binding AttachmentTypeSet.Items}\">\r\n <ListView.ItemTemplate>\r\n  <DataTemplate>\r\n   <ViewCell>\r\n    <StackLayout x:Name=\"Item\" Padding=\"15,0\">\r\n     <Grid>\r\n      <Grid.ColumnDefinitions>\r\n       <ColumnDefinition Width=\"8*\" />\r\n       <ColumnDefinition Width=\"1*\" />\r\n       <ColumnDefinition Width=\"1*\" />\r\n      </Grid.ColumnDefinitions>\r\n      <Label Grid.Row=\"0\" Grid.Column=\"0\" Text=\"{Binding Message}\" VerticalOptions=\"Center\" />\r\n      <Button BindingContext=\"{Binding Source={x:Reference List}, Path=BindingContext}\" Command=\"{Binding Camera}\" **CommandParameter=\"{Binding Source={x:Reference Item}, Path=BindingContext}\"** Grid.Row=\"0\" Grid.Column=\"1\" Text=\"Cam\" TextColor=\"#0098d1\" HorizontalOptions=\"End\" />\r\n      <Button BindingContext=\"{Binding Source={x:Reference List}, Path=BindingContext}\" Command=\"{Binding Library}\" **CommandParameter=\"{Binding Source={x:Reference Item}, Path=BindingContext}\"** Grid.Row=\"0\" Grid.Column=\"2\" Text=\"Lib\" TextColor=\"#0098d1\" HorizontalOptions=\"End\" />\r\n     </Grid>\r\n    </StackLayout>\r\n   </ViewCell>\r\n  </DataTemplate>\r\n </ListView.ItemTemplate>\r\n</ListView>\r\n```\r\n\r\nViewModel Snippet:\r\n```\r\n_camera = new DelegateCommand<FAMLookupItem>(**u** => TakePicture(FileSource.Camera, (AttachmentTypeViewModel)u.Obj));\r\n_library = new DelegateCommand<FAMLookupItem>(**u** => TakePicture(FileSource.Picker, (AttachmentTypeViewModel)u.Obj));\r\n```\r\n\r\n\r\n### Steps to Reproduce\r\n\r\n1. Create a ListView. \r\n2. Create a button within the ViewCell.\r\n3. Set a bindingContext to the button for the ListView rows object.\r\n4. Click the button\r\n\r\n### Expected Behavior\r\nCommandParameter passed into ViewModel should not be NULL.\r\n\r\n### Actual Behavior\r\nCommandParameter passed into ViewModel IS NULL.\r\n\r\n### Basic Information\r\n\r\n- Version with issue: 2.5.1.317207-pre1\r\n- Last known good version: 2.5.0.280555\r\n- IDE: Visual Studio for Mac\r\n- Platform Target Frameworks:\r\n  - iOS:  11.2 \r\n  - Android: didn't try\r\n  - UWP:  didn't try\r\n- Android Support Library Version: N/A\r\n- Nuget Packages: Xamarin.Forms.2.5.1.317207-pre1.nupkg\r\n- Affected Devices:\r\n\r\n### Screenshots\r\nN/A\r\n\r\n### Reproduction Link\r\nWill create one if requested.\r\n\r\n"},{"Id":"7334250326","Type":"PullRequestEvent","CreatedAt":"2018-03-05T22:06:42","Actor":"jassmith","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/1970","RelatedDescription":"Merged pull request \"Add Application.PageAppearing/Dissapearing events\" (#1970) at xamarin/Xamarin.Forms","RelatedBody":"In scenarios where you want to keep track of pages as they are\r\nappearing on screen, it's useful to be able to subscribe to a\r\nglobal event from the `Application` to track those pages for\r\nlater processing (i.e. showing a timeline for the app, reloading\r\nXAML for some of those pages, maybe replaying the timeline, etc.)\r\n\r\nThe new events are automatically raised from the Page base class\r\nright after sending the page-level Appearing/Disappearing events."},{"Id":"7334157292","Type":"IssuesEvent","CreatedAt":"2018-03-05T21:47:53","Actor":"jassmith","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/1355","RelatedDescription":"Closed issue \"Setting Main Page in quick succession causes crash on Android\" (#1355) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\nWhen setting the main page of an application twice in quick succession, the app crashes with an IllegalArgumentException on Android.\r\n\r\n### Steps to Reproduce\r\n1. Set the main page of an application to a NavigationPage\r\n2. A short time after, set the main page again\r\n\r\n### Expected Behavior\r\nThe application navigates to the first page, then the second.\r\n\r\n### Actual Behavior\r\nThe application crashes.\r\n\r\n### Basic Information\r\n\r\n- Version with issue: 2.5\r\n- Visual Studio Version: VS for Mac 7.3\r\n\r\n- Platform Target Frameworks: \r\n  - Android: 7.1 \r\n- Android Support Library Version: 25.4.0.2\r\n\r\nBelow is a stack trace from the attached sample application:\r\n  --- End of managed Java.Lang.IllegalArgumentException stack trace ---\r\njava.lang.IllegalArgumentException: No view found for id 0x3 (unknown) for fragment FragmentContainer{eabbdaa #0 id=0x3}\r\n\tat android.support.v4.app.FragmentManagerImpl.moveToState(FragmentManager.java:1334)\r\n\tat android.support.v4.app.FragmentManagerImpl.moveFragmentToExpectedState(FragmentManager.java:1569)\r\n\tat android.support.v4.app.FragmentManagerImpl.moveToState(FragmentManager.java:1636)\r\n\tat android.support.v4.app.BackStackRecord.executeOps(BackStackRecord.java:758)\r\n\tat android.support.v4.app.FragmentManagerImpl.executeOps(FragmentManager.java:2415)\r\n\tat android.support.v4.app.FragmentManagerImpl.executeOpsTogether(FragmentManager.java:2201)\r\n\tat android.support.v4.app.FragmentManagerImpl.optimizeAndExecuteOps(FragmentManager.java:2155)\r\n\tat android.support.v4.app.FragmentManagerImpl.execPendingActions(FragmentManager.java:2064)\r\n\tat android.support.v4.app.FragmentManagerImpl$1.run(FragmentManager.java:718)\r\n\tat android.os.Handler.handleCallback(Handler.java:751)\r\n\tat android.os.Handler.dispatchMessage(Handler.java:95)\r\n\tat android.os.Looper.loop(Looper.java:154)\r\n\tat android.app.ActivityThread.main(ActivityThread.java:6682)\r\n\tat java.lang.reflect.Method.invoke(Native Method)\r\n\tat com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:1520)\r\n\tat com.android.internal.os.ZygoteInit.main(ZygoteInit.java:1410)\r\n\r\nHere is another stacktrace from our application in development, which seems to point to the disposal of the NavigationPageRenderer.\r\n\r\njava.lang.IllegalArgumentException: No view found for id 0x2 (unknown) for fragment FragmentContainer{1b3651a #0 id=0x2}\r\nandroid.support.v4.app.FragmentManagerImpl.moveToState()FragmentManager.java:1293\r\nandroid.support.v4.app.FragmentManagerImpl.moveFragmentToExpectedState()FragmentManager.java:1528\r\nandroid.support.v4.app.FragmentManagerImpl.moveToState()FragmentManager.java:1595\r\nandroid.support.v4.app.BackStackRecord.executeOps()BackStackRecord.java:758\r\nandroid.support.v4.app.FragmentManagerImpl.executeOps()FragmentManager.java:2363\r\nandroid.support.v4.app.FragmentManagerImpl.executeOpsTogether()FragmentManager.java:2149\r\nandroid.support.v4.app.FragmentManagerImpl.optimizeAndExecuteOps()FragmentManager.java:2103\r\nandroid.support.v4.app.FragmentManagerImpl.execPendingActions()FragmentManager.java:2013\r\nandroid.support.v4.app.FragmentManagerImpl.executePendingTransactions()FragmentManager.java:763\r\nmono.java.lang.RunnableImplementor.n_run(Native Method)\r\nmono.java.lang.RunnableImplementor.run()RunnableImplementor.java:30\r\nandroid.os.Handler.handleCallback()Handler.java:751\r\nandroid.os.Handler.dispatchMessage()Handler.java:95\r\nandroid.os.Looper.loop()Looper.java:154\r\nandroid.app.ActivityThread.main()ActivityThread.java:6077\r\njava.lang.reflect.Method.invoke(Native Method)\r\ncom.android.internal.os.ZygoteInit$MethodAndArgsCaller.run()ZygoteInit.java:865\r\ncom.android.internal.os.ZygoteInit.main()ZygoteInit.java:755\r\ncaused.RuntimeException(unknown)\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()<01e1b59e4261433ba399257491230b03>:0\r\nJava.Interop.JniEnvironment.InstanceMethods.CallBooleanMethod(JniObjectReference instance, JniMethodInfo method)<02d99c7710584bb18b40b9052f4c0bab>:0\r\nAndroid.Runtime.JNIEnv.CallBooleanMethod(IntPtr jobject, IntPtr jmethod)<27f5f7ad675348b8b88d2eb52bf5ff31>:0\r\nAndroid.Support.V4.App.FragmentManagerInvoker.ExecutePendingTransactions()<7e083afc7c9045f59e01d9c14931060d>:0\r\nXamarin.Forms.Platform.Android.AppCompat.NavigationPageRenderer.Dispose(bool disposing)<1481f85a917c4f2b882ea161e9bc082f>:0\r\nJava.Lang.Object.Dispose()<27f5f7ad675348b8b88d2eb52bf5ff31>:0\r\nXamarin.Forms.Platform.Android.AppCompat.Platform.SetPage(Page newRoot)<1481f85a917c4f2b882ea161e9bc082f>:0\r\nXamarin.Forms.Platform.Android.FormsAppCompatActivity.InternalSetPage(Page page)<1481f85a917c4f2b882ea161e9bc082f>:0\r\nXamarin.Forms.Platform.Android.FormsAppCompatActivity.AppOnPropertyChanged(object sender, PropertyChangedEventArgs args)<1481f85a917c4f2b882ea161e9bc082f>:0\r\nXamarin.Forms.BindableObject.OnPropertyChanged(string propertyName)<0f1ce60dbc6b4e24af01294c7acf41c6>:0\r\nXamarin.Forms.Element.OnPropertyChanged(string propertyName)<0f1ce60dbc6b4e24af01294c7acf41c6>:0\r\nXamarin.Forms.Application.set_MainPage(Page value)<0f1ce60dbc6b4e24af01294c7acf41c6>:0\r\nCompany.Forms.Services.NavigationService.<>c__DisplayClass11_0.<<NavigateTo>b__0>d.MoveNext()<093836f8b263470cbe4aa7ecb3e2d09b>:0\r\nSystem.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()<01e1b59e4261433ba399257491230b03>:0\r\nSystem.Runtime.CompilerServices.AsyncMethodBuilderCore.<>c.<ThrowAsync>b__6_0(object state)<01e1b59e4261433ba399257491230b03>:0\r\nAndroid.App.SyncContext.<>c__DisplayClass2_0.<Post>b__0()<27f5f7ad675348b8b88d2eb52bf5ff31>:0\r\nJava.Lang.Thread.RunnableImplementor.Run()<27f5f7ad675348b8b88d2eb52bf5ff31>:0\r\nJava.Lang.IRunnableInvoker.n_Run(IntPtr jnienv, IntPtr native__this)<27f5f7ad675348b8b88d2eb52bf5ff31>:0\r\nat (wrapper dynamic-method) System.Object:f04862c3-b38a-42d2-895a-840077e201b6 (intptr,intptr)\r\n--- End of managed Java.Lang.RuntimeException stack trace ---\r\njava.lang.IllegalArgumentException: No view found for id 0x2 (unknown) for fragment FragmentContainer{1b3651a #0 id=0x2}\r\nandroid.support.v4.app.FragmentManagerImpl.moveToState()FragmentManager.java:1293\r\nandroid.support.v4.app.FragmentManagerImpl.moveFragmentToExpectedState()FragmentManager.java:1528\r\nandroid.support.v4.app.FragmentManagerImpl.moveToState()FragmentManager.java:1595\r\nandroid.support.v4.app.BackStackRecord.executeOps()BackStackRecord.java:758\r\nandroid.support.v4.app.FragmentManagerImpl.executeOps()FragmentManager.java:2363\r\nandroid.support.v4.app.FragmentManagerImpl.executeOpsTogether()FragmentManager.java:2149\r\nandroid.support.v4.app.FragmentManagerImpl.optimizeAndExecuteOps()FragmentManager.java:2103\r\nandroid.support.v4.app.FragmentManagerImpl.execPendingActions()FragmentManager.java:2013\r\nandroid.support.v4.app.FragmentManagerImpl.executePendingTransactions()FragmentManager.java:763\r\nmono.java.lang.RunnableImplementor.n_run(Native Method)\r\nmono.java.lang.RunnableImplementor.run()RunnableImplementor.java:30\r\nandroid.os.Handler.handleCallback()Handler.java:751\r\nandroid.os.Handler.dispatchMessage()Handler.java:95\r\nandroid.os.Looper.loop()Looper.java:154\r\nandroid.app.ActivityThread.main()ActivityThread.java:6077\r\njava.lang.reflect.Method.invoke(Native Method)\r\ncom.android.internal.os.ZygoteInit$MethodAndArgsCaller.run()ZygoteInit.java:865\r\ncom.android.internal.os.ZygoteInit.main()ZygoteInit.java:755\r\n\r\n### Reproduction Link\r\n\r\n[navigationcrash.zip](https://github.com/xamarin/Xamarin.Forms/files/1542396/navigationcrash.zip)\r\n\r\n"},{"Id":"7334157262","Type":"IssuesEvent","CreatedAt":"2018-03-05T21:47:53","Actor":"jassmith","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/1731","RelatedDescription":"Closed issue \"[Enhancement] Add API for programmatically checking if running in design mode\" (#1731) at xamarin/Xamarin.Forms","RelatedBody":"## Rationale\r\n\r\nUser’s desire a way to specify code that should only run when their code is running in a designer context such as Previewer or Live Player.\r\n\r\n## Implementation\r\n\r\n```\r\n// In Xamarin.Forms\r\npubic static class DesignMode\r\n{\r\n    public static bool DesignModeEnabled { get; set; }\r\n}\r\n```\r\n\r\n```\r\n// Example usage \r\nif(Xamarin.Forms.DesignMode.DesignModeEnabled)\r\n{\r\n    // do something special\r\n}\r\n```\r\n\r\nThe property should be considered to have a public setter so that third-party tools can also mark this as true when they would prefer to. i.e. LiveXaml, GorillaPlayer, etc. may want to set this to true so users can do something special in those contexts. Or, perhaps it's better to make this read only and make some static method for enabling it. i.e. \r\n\r\n`Xamarin.Forms.DesignMode.EnableDesignMode()` \r\n\r\nSee [UWP documentation](https://docs.microsoft.com/en-us/uwp/api/windows.applicationmodel.designmode#Windows_ApplicationModel_DesignMode_DesignModeEnabled). \r\n\r\n## Expected Result\r\n\r\n`DesignModeEnabled` would return `true` when code is running in a preview or design-time tool. Otherwise, false. \r\n\r\n### Android\r\n\r\nNothing specific for Android.\r\n\r\n### iOS\r\n\r\nNothing specific for iOS.\r\n\r\n### UWP\r\n\r\nNothing specific for UWP\r\n\r\n## Implications for CSS\r\n\r\nNone that I am aware of.\r\n\r\n## Backward Compatibility\r\n\r\nUncertain, but it seems a new API like this would have little to no backwards compatibility issues.\r\n\r\n## Difficulty: Easy\r\n\r\nThere may be some additional coordination required with the designer team for a few additions for the previewer to work with this. Otherwise, it should be simple to implement. "}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"7335543711","Type":"PullRequestEvent","CreatedAt":"2018-03-06T04:42:08","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3663","RelatedDescription":"Opened pull request \"Merge d15-6 into xcode9.3\" (#3663) at xamarin/xamarin-macios","RelatedBody":null},{"Id":"7334307699","Type":"PullRequestEvent","CreatedAt":"2018-03-05T22:18:55","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3661","RelatedDescription":"Merged pull request \"[mtouch] Move native code sharing check for the remove-dynamic-registrar optimization until after checking the linker settings. (#3643)\" (#3661) at xamarin/xamarin-macios","RelatedBody":"Fixes this test failure:\n\n1) Failed : Xamarin.MTouch.MT0113_linker\nThe error 'MT0113: Native code sharing has been disabled for the extension 'testServiceExtension' because the managed linker settings are different between the container app (None) and the extension (All).' was not found in the output:\n\tMessage #1 did not match:\n\t\tactual:   'Native code sharing has been disabled for the extension 'testServiceExtension' because the remove-dynamic-registrar optimization differ between the container app (default) and the extension (false).'\n\t\texpected: 'Native code sharing has been disabled for the extension 'testServiceExtension' because the managed linker settings are different between the container app (None) and the extension (All).'\n\nwhich happens because:\n\n* Removing the dynamic registrar requires the linker, so removal of the dynamic registrar is disabled if the linker is not disabled\n* This results in the app and appex having different values for the remove-dynamic-registrar option\n* Thus the error message.\n\nTechnically either error is correct, but I prefer the previous one (about the\nlinker), because it directly assigns blame (the linker setting). Figuring out\nwhat has to change (the linker setting) when the error message complains about\nan optimization is not so straight forward for users."},{"Id":"7333084283","Type":"PullRequestEvent","CreatedAt":"2018-03-05T18:15:47","Actor":"rolfbjarne","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3662","RelatedDescription":"Opened pull request \"[xharness] All variants of GuiUnit projects must be special-cased. (#3602)\" (#3662) at xamarin/xamarin-macios","RelatedBody":"This fixes an issue where multiple copies of the GuiUnit project would have\nthe same output directory, causing random problems when building those\nprojects in parallel."},{"Id":"7333073383","Type":"PullRequestEvent","CreatedAt":"2018-03-05T18:13:40","Actor":"rolfbjarne","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3661","RelatedDescription":"Opened pull request \"[mtouch] Move native code sharing check for the remove-dynamic-registrar optimization until after checking the linker settings. (#3643)\" (#3661) at xamarin/xamarin-macios","RelatedBody":"Fixes this test failure:\n\n1) Failed : Xamarin.MTouch.MT0113_linker\nThe error 'MT0113: Native code sharing has been disabled for the extension 'testServiceExtension' because the managed linker settings are different between the container app (None) and the extension (All).' was not found in the output:\n\tMessage #1 did not match:\n\t\tactual:   'Native code sharing has been disabled for the extension 'testServiceExtension' because the remove-dynamic-registrar optimization differ between the container app (default) and the extension (false).'\n\t\texpected: 'Native code sharing has been disabled for the extension 'testServiceExtension' because the managed linker settings are different between the container app (None) and the extension (All).'\n\nwhich happens because:\n\n* Removing the dynamic registrar requires the linker, so removal of the dynamic registrar is disabled if the linker is not disabled\n* This results in the app and appex having different values for the remove-dynamic-registrar option\n* Thus the error message.\n\nTechnically either error is correct, but I prefer the previous one (about the\nlinker), because it directly assigns blame (the linker setting). Figuring out\nwhat has to change (the linker setting) when the error message complains about\nan optimization is not so straight forward for users."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"970709776488419328","CreatedAt":"2018-03-05T17:17:00+00:00","UserScreenname":"xamarinhq","Text":"DataBinding Power Moves You May Not Be Using (Yet), with @davidortinau: https://t.co/VpucH7m8z9","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":30,"FavoriteCount":10,"RawContent":null},{"Id":"970456916488015873","CreatedAt":"2018-03-05T00:32:13+00:00","UserScreenname":"xamarinhq","Text":"Add a little 3D to your #Xamarin iOS apps with #ARKit and F#: https://t.co/0UXY2Lk1XB https://t.co/jQn1NkyLSA","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":26,"FavoriteCount":12,"RawContent":null},{"Id":"970104538375118848","CreatedAt":"2018-03-04T01:12:00+00:00","UserScreenname":"xamarinhq","Text":"Better resource organization in #XamarinForms: https://t.co/8bKeJx4e22","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":59,"FavoriteCount":17,"RawContent":null},{"Id":"969656588805001217","CreatedAt":"2018-03-02T19:32:00+00:00","UserScreenname":"xamarinhq","Text":"You don't want to miss this! It's your chance to ask living legend @migueldeicaza your questions in his @reddit… https://t.co/6qG4JhCwia","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":8,"FavoriteCount":6,"RawContent":null},{"Id":"969616829483311104","CreatedAt":"2018-03-02T16:54:01+00:00","UserScreenname":"xamarinhq","Text":"Add cross-platform charts to any app the easy way with #MicroCharts: https://t.co/VeqfS1vfIL https://t.co/3D8bDqoefW","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":101,"FavoriteCount":29,"RawContent":null},{"Id":"969291313173745665","CreatedAt":"2018-03-01T19:20:32+00:00","UserScreenname":"xamarinhq","Text":"Amp up your skills with a #Xamarin mobile developer event near you in March: https://t.co/glgXli4KCp https://t.co/hUYXkqMYl6","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":30,"FavoriteCount":14,"RawContent":null},{"Id":"969256455504318464","CreatedAt":"2018-03-01T17:02:01+00:00","UserScreenname":"xamarinhq","Text":"Bring 3D Models to life in augmented reality with #UrhoSharp: https://t.co/0c8YDgfF2Z https://t.co/MNLAkVzqaz","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":20,"FavoriteCount":7,"RawContent":null},{"Id":"968935619358527488","CreatedAt":"2018-02-28T19:47:08+00:00","UserScreenname":"xamarinhq","Text":"Check out the new, feature-packed release of #UrhoSharp 1.8: https://t.co/ZxSIstdhNE https://t.co/cwathwkTEw","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":57,"FavoriteCount":21,"RawContent":null},{"Id":"968895325460103168","CreatedAt":"2018-02-28T17:07:01+00:00","UserScreenname":"xamarinhq","Text":"Add Augmented Reality to your #XamarinAndroid apps with #ARCore: https://t.co/TwpBAAMyUJ https://t.co/YZBmRK5CcT","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":33,"FavoriteCount":11,"RawContent":null},{"Id":"968530780724088832","CreatedAt":"2018-02-27T16:58:27+00:00","UserScreenname":"xamarinhq","Text":"Our own @mayur_tendulkar shows you how to build a mobile app using #XamarinForms and the Microsoft Graph API:… https://t.co/svcX6jHBJ4","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":58,"FavoriteCount":17,"RawContent":null},{"Id":"968204127166754816","CreatedAt":"2018-02-26T19:20:26+00:00","UserScreenname":"xamarinhq","Text":"Get a sneak peek at our newest @XamarinU course, \"Navigation Patterns in #XamarinForms\": https://t.co/3fd0sIUJMZ https://t.co/GzDZxRtlZH","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":65,"FavoriteCount":21,"RawContent":null},{"Id":"968170803916361728","CreatedAt":"2018-02-26T17:08:02+00:00","UserScreenname":"xamarinhq","Text":"Learn how to supercharge your Xamarin.Mac app startup times: https://t.co/JzwELyF3Tm https://t.co/ABxM6v3B6S","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":24,"FavoriteCount":4,"RawContent":null},{"Id":"967928201430388736","CreatedAt":"2018-02-26T01:04:01+00:00","UserScreenname":"xamarinhq","Text":"Implement or improve end-to-end mobile #DevOps in your apps with this series from Greg Shackles on the #VSAppCenter… https://t.co/bCckhyxtl6","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":47,"FavoriteCount":25,"RawContent":null},{"Id":"967564304206745600","CreatedAt":"2018-02-25T00:58:01+00:00","UserScreenname":"xamarinhq","Text":"Running #Xamarin.iOS unit tests in #VSTS: https://t.co/20PDCJZkbJ https://t.co/6VAIpDbCD7","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":78,"FavoriteCount":45,"RawContent":null},{"Id":"967121514339405824","CreatedAt":"2018-02-23T19:38:31+00:00","UserScreenname":"xamarinhq","Text":"Add @TizenProject to your #XamarinForms apps: https://t.co/pom9Nki4vo https://t.co/EVWC9fi7wy","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":25,"FavoriteCount":8,"RawContent":null},{"Id":"967078348043190272","CreatedAt":"2018-02-23T16:47:00+00:00","UserScreenname":"xamarinhq","Text":"Learn how ActivityTask makes async/await easier to use in your #Xamarin Android mobile apps: https://t.co/drhcfIy4ht","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":64,"FavoriteCount":23,"RawContent":null},{"Id":"966787653097181187","CreatedAt":"2018-02-22T21:31:53+00:00","UserScreenname":"xamarinhq","Text":"Create and host tvOS TVML apps with Microsoft #Azure and #Xamarin: https://t.co/ScMHDQBDvs https://t.co/sPxlVR6weS","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":30,"FavoriteCount":18,"RawContent":null},{"Id":"966716967104245760","CreatedAt":"2018-02-22T16:51:00+00:00","UserScreenname":"xamarinhq","Text":"It's almost time for our webinar with @XamarinU on building your first intelligent app with #Xamarin and Microsoft… https://t.co/nrzOWMsSV0","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":17,"FavoriteCount":4,"RawContent":null},{"Id":"966354831018520577","CreatedAt":"2018-02-21T16:52:00+00:00","UserScreenname":"xamarinhq","Text":"You don't want to miss tomorrow's webinar with @XamarinU on building your first intelligent app with #Xamarin and M… https://t.co/XMK3ovJfTs","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":35,"FavoriteCount":18,"RawContent":null}]}},"RunOn":"2018-03-06T05:30:42.2654606Z","RunDurationInMilliseconds":4060}