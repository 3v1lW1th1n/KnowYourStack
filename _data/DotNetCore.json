{"Data":{"Blog":{"FeedItems":[{"Title":".NET Core May 2018 Update","PublishedOn":"2018-05-08T22:31:30+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core May 2018 Update. This update includes .NET Core 2.1.200 SDK and ASP.NET Core 2.0.8. Security Microsoft is releasing this security advisory to provide information...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/08/net-core-may-2018-update/","RawContent":null},{"Title":".NET Framework May 2018 Security and Quality Rollup","PublishedOn":"2018-05-08T21:18:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the May 2018 Security and Quality Rollup. Security CVE-2018-1039 – Windows Security Feature Bypass Vulnerability A security feature bypass vulnerability exists in Windows which...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/08/net-framework-may-2018-security-and-quality-rollup/","RawContent":null},{"Title":"F# language and tools update for Visual Studio 2017 version 15.7","PublishedOn":"2018-05-08T18:22:06+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"We’re excited to share updates about changes to F# and F# tools which shipped with the Visual Studio 2017 version 15.7 release. Let’s dive in! Type Providers now support .NET Standard For those who...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/08/f-language-and-tools-update-for-visual-studio-2017-version-15-7/","RawContent":null},{"Title":"Introducing ML.NET: Cross-platform, Proven and Open Source Machine Learning Framework","PublishedOn":"2018-05-08T00:41:28+00:00","CommentsCount":19,"FacebookCount":0,"Summary":"Today at //Build 2018, we are excited to announce the preview of ML.NET, a cross-platform, open source machine learning framework. ML.NET will allow .NET developers to develop their own models and...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/07/introducing-ml-net-cross-platform-proven-and-open-source-machine-learning-framework/","RawContent":null},{"Title":"Announcing Entity Framework Core 2.1 RC 1","PublishedOn":"2018-05-07T18:00:05+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Today, we are excited to announce that the first release candidate of EF Core 2.1 is available, alongside .NET Core 2.1 RC 1 and ASP.NET Core 2.1 RC 1, for broad testing, and now also for production...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/07/announcing-entity-framework-core-2-1-rc-1/","RawContent":null},{"Title":".NET Core 3 and Support for Windows Desktop Applications","PublishedOn":"2018-05-07T15:40:04+00:00","CommentsCount":243,"FacebookCount":0,"Summary":"At Microsoft Build Live today, we are sharing a first look at our plans for .NET Core 3. The highlight of .NET Core 3 is support for Windows desktop applications, specifically Windows Forms, Windows...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/07/net-core-3-and-support-for-windows-desktop-applications/","RawContent":null},{"Title":"Announcing .NET Core 2.1 RC 1","PublishedOn":"2018-05-07T15:39:20+00:00","CommentsCount":26,"FacebookCount":0,"Summary":"Today, we&#8217;re announcing .NET Core 2.1 Release Candidate 1 (RC 1). The .NET Core 2.1 RC 1 is now ready for broad testing and for production use. Our quality, reliability, and performance testing...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/07/announcing-net-core-2-1-rc-1/","RawContent":null},{"Title":"Announcing the .NET Framework 4.7.2","PublishedOn":"2018-04-30T20:56:19+00:00","CommentsCount":54,"FacebookCount":0,"Summary":"Today, we are happy to announce the release of the .NET Framework 4.7.2. It’s included in the Windows 10 April 2018 Update. .NET Framework 4.7.2 is also available on Windows 7+ and Windows Server 2008...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/30/announcing-the-net-framework-4-7-2/","RawContent":null},{"Title":"Help us plan the future of .NET!","PublishedOn":"2018-04-20T16:55:37+00:00","CommentsCount":75,"FacebookCount":0,"Summary":"We’re currently planning our next major .NET releases and would love to hear your feedback on how you interact with .NET Framework and .NET Core today. Please fill out the survey below and help shape...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/20/help-us-plan-the-future-of-net/","RawContent":null},{"Title":"Performance Improvements in .NET Core 2.1","PublishedOn":"2018-04-18T19:29:45+00:00","CommentsCount":48,"FacebookCount":0,"Summary":"Back before .NET Core 2.0 shipped, I wrote a post highlighting various performance improvements in .NET Core 2.0 when compared with .NET Core 1.1 and the .NET Framework. As .NET Core 2.1 is in its...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/18/performance-improvements-in-net-core-2-1/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7640755266","Type":"PullRequestEvent","CreatedAt":"2018-05-08T00:32:51","Actor":"shauheen","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/102","RelatedDescription":"Opened pull request \"Update projects.json adding MLNET\" (#102) at dotnet/home","RelatedBody":""},{"Id":"7640750127","Type":"PullRequestEvent","CreatedAt":"2018-05-08T00:31:03","Actor":"shauheen","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/101","RelatedDescription":"Opened pull request \"Create mlnet.md\" (#101) at dotnet/home","RelatedBody":""},{"Id":"7559882384","Type":"PullRequestEvent","CreatedAt":"2018-04-20T06:42:59","Actor":"Cheesebaron","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/100","RelatedDescription":"Opened pull request \"Create mvvmcross.md\" (#100) at dotnet/home","RelatedBody":"Added MvvmCross as project"},{"Id":"7452103949","Type":"PullRequestEvent","CreatedAt":"2018-03-29T07:03:03","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/97","RelatedDescription":"Merged pull request \"update CLA PDF link\" (#97) at dotnet/home","RelatedBody":""},{"Id":"7419410563","Type":"IssuesEvent","CreatedAt":"2018-03-22T14:02:36","Actor":"vvavrychuk","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/99","RelatedDescription":"Opened issue \"not working \"Linux Distribution\" dropdown on http://www.microsoft.com/net/learn/get-started/linux \" (#99) at dotnet/home","RelatedBody":"On the page http://www.microsoft.com/net/learn/get-started/linux dropdown \"Linux Distribution\" has no effect on the installation instruction next to him (they are always displayed for RedHat).\r\n\r\n![screenshot from 2018-03-22 16-02-19](https://user-images.githubusercontent.com/152563/37775020-6ec5778e-2dea-11e8-9ea3-b33e26c1c4e1.png)\r\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7660843516","Type":"IssuesEvent","CreatedAt":"2018-05-11T12:12:46","Actor":"Longvimol","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/69","RelatedDescription":"Opened issue \"Dotnet / announcement \" (#69) at dotnet/announcements","RelatedBody":"This repo doesn't accept issues. Please see README.md in the root for more details.\r\n"},{"Id":"7644965785","Type":"IssuesEvent","CreatedAt":"2018-05-08T17:03:40","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/67","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0765: .NET Core Denial Of Service Vulnerability\" (#67) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0765: .NET Core Denial Of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and .NET native version 2.0. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability that exists when .NET Framework and .NET Core improperly process XML documents. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Framework, .NET Core, or .NET native application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Framework, .NET Core, and .NET native applications handle XML document processing.\r\n\r\nIf your application is an ASP.NET Core application, developers are also advised to update to ASP.NET Core 2.0.8.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/Home/ **TBD**\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\n* If an application does not process signed XML, it is not affected by this vulnerability.\r\n* If your application targets .NET Core 1.x or .NET native 1.x, it is not affected as the vulnerable package is not available for these platforms.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core, .NET native, or ASP.NET Core based application that uses System.Security.Cryptography.Xml with a version of 4.4.1 or earlier.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Security.Cryptography.Xml | ≤4.4.1 |  4.4.2 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n.NET Core has two types of dependencies: direct and transitive. Direct dependencies are dependencies where you specifically add a package to your project, transitive dependencies occur when you add a package to your project that in turn relies on another package.\r\n\r\nFor example, the `Microsoft.AspNetCore.Mvc` package depends on the `Microsoft.AspNetCore.Mvc.Core` package. When you add a dependency on `Microsoft.AspNetCore.Mvc` in your project, you're taking a transitive dependency on `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\nAny application that has a direct or transitive dependency on the [affected package](#affected-software) can be exposed to the vulnerability if it does not meet any of the [mitigation factors](#mitigation-factors).\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n---\r\n\r\nIf you're targeting ASP.NET Core 2.0 and using the `Microsoft.AspNetCore.All` metapackage:\r\n\r\n* Update its version number to 2.0.8 to pull in updated packages that update their transitive dependencies to the fixed version of `System.Security.Cryptography.Xml`.\r\n\r\n---\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your *csproj* file. They can be fixed by [editing the csproj file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the *project.assets.json* file contained in the obj directory of your project.\r\n\r\nThe *project.assets.json* files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Security.Cryptography.Xml\" Version=\"4.4.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Security.Cryptography.Xml` version 4.4.1.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.Security.Cryptography.Xml` to a [fixed package number](#affected-software). Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Security.Cryptography.Xml\" Version=\"4.4.2\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can [review the *project.assets.json* file](#project-assets-json).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio 2017, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a>Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Security.Cryptography.Xml/4.4.0` is a reference to version 4.4.0 of `System.Security.Cryptography.Xml`.\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\n##### Fixing transitive dependencies\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.Security.Cryptography.Xml` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Security.Cryptography.Xml\" Version=\"4.4.2\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n---\r\n\r\nIf you're targeting .NET native for a Universal Windows Platform (UWP) application, you should update your dependencies and republish your application.\r\n\r\nIf you submit an application to the Windows Store with an outdated reference, the store will update the reference automatically, which has the potential for compatibility issues. Thus, we recommend updating your application directly and testing its functionality before resubmitting.\r\n\r\n---\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-0787](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-0765)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 8, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-05-08_"},{"Id":"7619224203","Type":"IssuesEvent","CreatedAt":"2018-05-02T20:28:55","Actor":"MichaelSimons","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/65","RelatedDescription":"Opened issue \".NET Framework Runtime and Builder Docker repos have merged \" (#65) at dotnet/announcements","RelatedBody":"# .NET Framework Runtime and Builder Docker repos have merged\r\n\r\nThe [microsoft/dotnet-framework-build](https://hub.docker.com/r/microsoft/dotnet-framework-build/) Docker Hub repo has been merged into the [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) Docker Hub repo.  All new tags going forward will only be pushed to [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/).  The images in the [microsoft/dotnet-framework-build](https://hub.docker.com/r/microsoft/dotnet-framework-build/) Docker Hub repo will be retained and serviced accordingly as to not affect existing usage.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker #125](https://github.com/Microsoft/dotnet-framework-docker/issues/125)\r\n\r\n## Details\r\n\r\nThe [microsoft/dotnet-framework-build](https://hub.docker.com/r/microsoft/dotnet-framework-build/) Docker Hub repo has been merged into the [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) Docker Hub repo.\r\n\r\n* https://github.com/Microsoft/dotnet-framework-docker/pull/123\r\n* https://github.com/Microsoft/dotnet-framework-docker/issues/78\r\n\r\nIn order to differentiate the runtime and build images, `runtime` and `sdk` distinguishing identifiers have been added to the tags.  For example, `4.7.2-runtime` and `4.7.2-sdk`.\r\n\r\nAll new tags going forward will only be pushed to [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/).   For example, the build images for 4.7.2 which was released today, only exist in [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) repo.\r\n\r\nThe existing tags in [microsoft/dotnet-framework-build](https://hub.docker.com/r/microsoft/dotnet-framework-build/) will remain and be serviced accordingly.  For example, the stable tags such as `4.7.1-windowsservercore-1709` will continue to be patched on a monthly basis.\r\n\r\nWe recommend that as you create and maintain your code, you move to use the new `runtime` and `sdk` images from the [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) repo.\r\n"},{"Id":"7545995438","Type":"IssuesEvent","CreatedAt":"2018-04-18T00:20:14","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/64","RelatedDescription":"Opened issue \"April 2018 .NET Updates\" (#64) at dotnet/announcements","RelatedBody":"# April 2018 .NET Updates\r\n\r\nThe following .NET updates were released this month. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework\r\n\r\n* No new releases. See: [.NET Framework February 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/02/13/net-framework-february-2018-security-and-quality-rollup/).\r\n* [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) and related Docker images were updated for [KB4093112](https://support.microsoft.com/help/4093112) and associated updates.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core April 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/04/17/net-core-april-2018-update/)\r\n   * [2.0.7 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.0/2.0.7.md)\r\n   * [1.1.8 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.8.md)\r\n   * [1.0.11 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.11.md)\r\n* [.NET Core 2.1 Preview 2](https://blogs.msdn.microsoft.com/dotnet/2018/04/11/announcing-net-core-2-1-preview-2/)\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) and related Docker images were updated for [KB4093112](https://support.microsoft.com/help/4093112) and associated updates.\r\n* Latest .NET Core security release: [.NET Core March 2018 Update](https://github.com/dotnet/core/issues/1341)\r\n\r\n## .NET for UWP\r\n\r\n* No new releases. See: [.NET for UWP January 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-for-uwp-january-2018-update/).\r\n\r\n## Previous Updates\r\n\r\n* [February 2018 Security and Quality Updates](https://github.com/dotnet/announcements/issues/59)"},{"Id":"7387413694","Type":"IssuesEvent","CreatedAt":"2018-03-15T21:18:32","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/announcements/issues/63","RelatedDescription":"Reopened issue \"Transport Layer Security (TLS) best practices with the .NET Framework article published\" (#63) at dotnet/announcements","RelatedBody":"# Transport Layer Security (TLS) best practices with the .NET Framework article published\r\n\r\nA new article was published that discusses the Transport Layer Security (TLS) best practices at https://docs.microsoft.com/dotnet/framework/network-programming/tls.\r\n\r\nTo ensure .NET Framework applications remain secure, the TLS version should **not** be hardcoded. .NET Framework applications should use the TLS version the operating system (OS) supports.\r\n\r\nThe (TLS) best practices article targets developers who are:\r\n* Directly using the System.Net APIs (for example, `System.Net.Http.HttpClient` and `System.Net.Security.SslStream`).\r\n* Directly using WCF clients and services using the `System.ServiceModel` namespace.\r\n* Using [Azure Cloud Services](https://azure.microsoft.com/services/cloud-services/) Web and Worker roles to host and run your application. See the [Azure Cloud Services](https://docs.microsoft.com/dotnet/framework/network-programming/tls#azure-cloud-services) section.\r\n\r\nThe article explains how to enable the strongest security available for the version of the .NET Framework that your app targets and runs on.\r\n\r\nThe section [Audit your code and make code changes](https://docs.microsoft.com/dotnet/framework/network-programming/tls#audit-your-code-and-make-code-changes) covers auditing and updating your code.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\ndotnet/docs#4675"},{"Id":"7387391842","Type":"IssuesEvent","CreatedAt":"2018-03-15T21:13:45","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/63","RelatedDescription":"Closed issue \"Transport Layer Security (TLS) best practices with the .NET Framework article published\" (#63) at dotnet/announcements","RelatedBody":"# Transport Layer Security (TLS) best practices with the .NET Framework article published\r\n\r\nA new article was published that discussed the Transport Layer Security (TLS) best practices at https://docs.microsoft.com/dotnet/framework/network-programming/tls.\r\n\r\nTo ensure .NET Framework applications remain secure, the TLS version should **not** be hardcoded. .NET Framework applications should use the TLS version the operating system (OS) supports.\r\n\r\nThe (TLS) best practices article targets developers who are:\r\n* Directly using the System.Net APIs (for example, `System.Net.Http.HttpClient` and `System.Net.Security.SslStream`).\r\n* Directly using WCF clients and services using the `System.ServiceModel` namespace.\r\n* Using [Azure Cloud Services](https://azure.microsoft.com/services/cloud-services/) Web and Worker roles to host and run your application. See the [Azure Cloud Services](https://docs.microsoft.com/dotnet/framework/network-programming/tls#azure-cloud-services) section.\r\n\r\nThe article explains how to enable the strongest security available for the version of the .NET Framework that your app targets and runs on.\r\n\r\nThe section [Audit your code and make code changes](https://docs.microsoft.com/dotnet/framework/network-programming/tls#audit-your-code-and-make-code-changes) covers auditing and updating your code.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\ndotnet/docs#4675"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7663967738","Type":"PullRequestEvent","CreatedAt":"2018-05-12T00:49:07","Actor":"dotnet-maestro-bot","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17974","RelatedDescription":"Opened pull request \"Update CoreClr to preview1-26512-01 (master)\" (#17974) at dotnet/coreclr","RelatedBody":"/cc @dotnet/coreclr-auto-update-notify"},{"Id":"7663817829","Type":"PullRequestEvent","CreatedAt":"2018-05-11T23:28:53","Actor":"CarolEidt","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17948","RelatedDescription":"Merged pull request \"Call ContainCheckIndir on the newly created indir\" (#17948) at dotnet/coreclr","RelatedBody":"Contributes to #17932 (https://github.com/dotnet/coreclr/issues/17932#issuecomment-388008331)\r\n\r\nIt looks like containment might have been lost in #13198. Though it cause a significant diff so it's not clear how this slipped in.\r\n\r\n```\r\n; x64\r\nTotal bytes of diff: -23148 (-0.08% of base)\r\n    diff is an improvement.\r\nTotal byte diff includes 0 bytes from reconciling methods\r\n        Base had    0 unique methods,        0 unique bytes\r\n        Diff had    0 unique methods,        0 unique bytes\r\nTop file improvements by size (bytes):\r\n      -12340 : System.Linq.Expressions.dasm (-0.45% of base)\r\n       -3280 : Microsoft.Diagnostics.Tracing.TraceEvent.dasm (-0.12% of base)\r\n       -2009 : System.Private.CoreLib.dasm (-0.06% of base)\r\n        -813 : CommandLine.dasm (-0.54% of base)\r\n        -714 : System.Linq.dasm (-0.47% of base)\r\n80 total files with size differences (80 improved, 0 regressed), 50 unchanged.\r\nTop method improvements by size (bytes):\r\n      -10599 : System.Linq.Expressions.dasm - FuncCallInstruction`3:Run(ref):int:this (3375 methods)\r\n        -690 : System.Linq.Expressions.dasm - ActionCallInstruction`2:Run(ref):int:this (225 methods)\r\n        -675 : System.Linq.Expressions.dasm - FuncCallInstruction`2:Run(ref):int:this (225 methods)\r\n        -182 : System.Private.CoreLib.dasm - ArraySortHelper`1:PickPivotAndPartition(ref,int,int,ref):int (23 methods)\r\n        -141 : System.Private.CoreLib.dasm - ArraySortHelper`1:DownHeap(ref,int,int,int,ref) (23 methods)\r\n2491 total methods with size differences (2491 improved, 0 regressed), 143077 unchanged.\r\n\r\n; x86\r\nTotal bytes of diff: -17119 (-0.08% of base)\r\n    diff is an improvement.\r\nTotal byte diff includes 0 bytes from reconciling methods\r\n        Base had    0 unique methods,        0 unique bytes\r\n        Diff had    0 unique methods,        0 unique bytes\r\nTop file improvements by size (bytes):\r\n       -8973 : System.Linq.Expressions.dasm (-0.39% of base)\r\n       -2307 : Microsoft.Diagnostics.Tracing.TraceEvent.dasm (-0.11% of base)\r\n       -1850 : System.Private.CoreLib.dasm (-0.06% of base)\r\n        -550 : System.Linq.dasm (-0.46% of base)\r\n        -542 : CommandLine.dasm (-0.43% of base)\r\n80 total files with size differences (80 improved, 0 regressed), 50 unchanged.\r\nTop method regessions by size (bytes):\r\n           3 : System.Private.CoreLib.dasm - Module:FindTypes(ref,ref):ref:this\r\n           1 : System.Private.CoreLib.dasm - Type:FindInterfaces(ref,ref):ref:this\r\nTop method improvements by size (bytes):\r\n       -7715 : System.Linq.Expressions.dasm - FuncCallInstruction`3:Run(ref):int:this (3375 methods)\r\n        -454 : System.Linq.Expressions.dasm - ActionCallInstruction`2:Run(ref):int:this (225 methods)\r\n        -450 : System.Linq.Expressions.dasm - FuncCallInstruction`2:Run(ref):int:this (225 methods)\r\n        -310 : System.Private.CoreLib.dasm - ArraySortHelper`1:DownHeap(ref,int,int,int,ref) (23 methods)\r\n        -299 : System.Private.CoreLib.dasm - ArraySortHelper`1:PickPivotAndPartition(ref,int,int,ref):int (23 methods)\r\n2491 total methods with size differences (2489 improved, 2 regressed), 143063 unchanged.\r\n```\r\n"},{"Id":"7663710474","Type":"IssuesEvent","CreatedAt":"2018-05-11T22:44:56","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/17858","RelatedDescription":"Closed issue \"[Linux][arm] CoreFx test System.Transactions.Local.Tests hangs and more\" (#17858) at dotnet/coreclr","RelatedBody":"CoreFx test `System.Transactions.Local.Tests` hangs during `System.Transactions.Tests.AsyncTransactionScopeTests.VerifyBYOTAsyncTSNestedAsync` on Ubuntu/arm with both Checked and Release coreclr\r\n(as an example, https://ci.dot.net/job/dotnet_coreclr/job/master/job/jitstress/job/arm_cross_checked_ubuntu_corefx_baseline_tst_prtest/1/consoleText)\r\n\r\n```\r\nxUnit.net console test runner (32-bit .NET Core)\r\nCopyright (C) 2014 Outercurve Foundation.\r\n\r\nDiscovering: System.Transactions.Local.Tests\r\nDiscovered:  System.Transactions.Local.Tests\r\nStarting:    System.Transactions.Local.Tests\r\n   System.Transactions.Tests.AsyncTransactionScopeTests.VerifyBYOTAsyncTSNestedAsync [STARTING]\r\n```\r\nWhat is interesting - if you keep at least one core busy (e.g. by running `stress --cpu 1 --timeout 600`) the test always passes (I have a quad-core ARMv7 cpu) and you get\r\n\r\n```\r\nxUnit.net console test runner (32-bit .NET Core)\r\nCopyright (C) 2014 Outercurve Foundation.\r\n\r\nDiscovering: System.Transactions.Local.Tests\r\nDiscovered:  System.Transactions.Local.Tests\r\nStarting:    System.Transactions.Local.Tests\r\n   System.Transactions.Tests.AsyncTransactionScopeTests.VerifyBYOTAsyncTSNestedAsync [STARTING]\r\n   System.Transactions.Tests.AsyncTransactionScopeTests.VerifyBYOTAsyncTSNestedAsync [FINISHED] Time: 0.2283526s\r\nFinished:    System.Transactions.Local.Tests\r\n\r\n=== TEST EXECUTION SUMMARY ===\r\n   System.Transactions.Local.Tests  Total: 1, Errors: 0, Failed: 0, Skipped: 0, Time: 0.935s\r\n```\r\n\r\nSteps to reproduce is:\r\n1. Build (Checked or Release) coreclr\r\n2. Build Release corefx tests\r\n3. Run something like this inside System.Transactions.Local.Tests folder:\r\n```\r\ncoreclr/_/fx-Release/bin/testhost/netcoreapp-Linux-Release-arm/dotnet xunit.console.netcore.exe System.Transactions.Local.Tests.dll  -xml testResults.xml -notrait Benchmark=true -notrait category=nonnetcoreapptests -notrait category=nonlinuxtests  -notrait category=IgnoreForCI -notrait category=OuterLoop -notrait category=failing -method System.Transactions.Tests.AsyncTransactionScopeTests.VerifyBYOTAsyncTSNestedAsync -showprogress\r\n```\r\nIt doesn't seem to be reproducible on Windows/arm though, so could be a Linux specific issue.\r\n\r\n**More:** I also tend to believe that this is **not** a test specific. The problem just manifests itself as a deadlock in this particular scenario, but in other scenarios it could be just an unnecessary waiting. For example, running `System.Collections.Tests` test suite on average (in 10 test runs) takes 62.5s on my machine (with Release coreclr). However, if I do the same trick by running `stress` in a separate ssh window the tests will take on average 38s. This is also true for `System.Runtime.Tests` - 92s vs 55s.\r\nWe also confirmed with @BruceForstall that this happens with Checked coreclr on a different machine (same kernel and cpu though).\r\n\r\n@janvorli  Is this something you would be interested to look into and see if it can be reproduced on your hardware? \r\n/cc @RussKeldorph"},{"Id":"7663641911","Type":"PullRequestEvent","CreatedAt":"2018-05-11T22:19:53","Actor":"sandreenko","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16172","RelatedDescription":"Closed pull request \"[wip][do not merge]dummy change, test arm r2r\" (#16172) at dotnet/coreclr","RelatedBody":""},{"Id":"7663641293","Type":"IssuesEvent","CreatedAt":"2018-05-11T22:19:41","Actor":"jashook","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/17924","RelatedDescription":"Closed issue \"Following build/test instructions doesn't build any tests\" (#17924) at dotnet/coreclr","RelatedBody":"I'm trying to build coreclr release/2.1 on Amazon Linux 2017.03 and can't get the tests to build.  (I have the same issue on Ubuntu)\r\nHere are the instructions I'm following:\r\nhttps://github.com/dotnet/coreclr/blob/release/2.1/Documentation/building/linux-instructions.md\r\nhttps://github.com/dotnet/coreclr/blob/release/2.1/Documentation/building/unix-test-instructions.md\r\n\r\nHere's my script:\r\n```\r\n# build coreclr\r\nmkdir -p ~/build\r\ncd ~/build\r\ngit clone https://github.com/dotnet/coreclr.git\r\ncd coreclr\r\ngit checkout release/2.1\r\n\r\n./build.sh x64 release msbuildonunsupportedplatform\r\n./build-test.sh x64 release msbuildonunsupportedplatform\r\n\r\n# build corefx\r\ncd ~/build\r\ngit clone https://github.com/dotnet/corefx.git\r\ncd corefx\r\ngit checkout release/2.1\r\n\r\n./build.sh -release -RuntimeOS=linux\r\n\r\n# test coreclr\r\ncd ~/build/coreclr\r\n\r\ntests/runtest.sh \\\r\n    --testRootDir=/home/user/build/coreclr/bin/tests/Linux.x64.Release \\\r\n    --testNativeBinDir=/home/user/build/coreclr/bin/obj/Linux.x64.Release/tests \\\r\n    --coreClrBinDir=/home/user/build/coreclr/bin/Product/Linux.x64.Release \\\r\n    --mscorlibDir=/home/user/build/coreclr/bin/Product/Linux.x64.Release \\\r\n    --coreFxBinDir=/home/user/build/corefx/bin/runtime/netcoreapp-Linux-Release-x64\r\n```\r\n\r\nThis results in:\r\n```\r\n.\r\n.\r\n.\r\nThe tests have been prepared\r\n\r\n=======================\r\n     Test Results\r\n=======================\r\n# CoreCLR Bin Dir  : /home/user/build/coreclr/bin/Product/Linux.x64.Release\r\n# Tests Discovered : 0\r\n# Passed           : 0\r\n# Failed           : 0\r\n# Skipped          : 0\r\n=======================\r\n0 minutes and 0 seconds taken to run CoreCLR tests.\r\n```\r\nThe main problem is that build-test.sh isn't building the tests.  If I build an individual test:\r\n```\r\n# from https://github.com/dotnet/coreclr/blob/release/2.1/Documentation/building/unix-test-instructions.md\r\ncoreclr/Tools/msbuild.sh /maxcpucount coreclr/tests/src/JIT/CodeGenBringUpTests/Array1.csproj /p:__BuildType=Release /p:__BuildOS=Linux\r\n```\r\nThen when I run my runtest.sh command from above the test is run.\r\n\r\nHow do I get the tests to build?\r\n\r\n"},{"Id":"7663564073","Type":"PullRequestEvent","CreatedAt":"2018-05-11T21:55:06","Actor":"jashook","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17965","RelatedDescription":"Merged pull request \"Port build-test.sh changes from master to release/2.1\" (#17965) at dotnet/coreclr","RelatedBody":"This change addresses https://github.com/dotnet/coreclr/issues/17924. In summary, build-test.sh was broken and tracked with https://github.com/dotnet/coreclr/issues/17503. @4creators's https://github.com/dotnet/coreclr/pull/17725 fixed issue #17503; however, was never ported to release/2.1.\r\n\r\nThis will port those changes to release/2.1 to allow using build-test.sh correctly. In addition, this change cherry-picks https://github.com/dotnet/coreclr/pull/17785 to bring build-test.sh to closer to build-test.cmd in release/2.1.\r\n\r\nFixes https://github.com/dotnet/coreclr/issues/17924.\r\n\r\n!! Note !!\r\n\r\nThis change does not affect the 2.1 product. As of release/2.1 build-test.sh's test build is also not used in any infrastructure, so this change should be very low risk. "}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7664152332","Type":"IssuesEvent","CreatedAt":"2018-05-12T03:16:04","Actor":"rasik210","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/9268","RelatedDescription":"Opened issue \".NET core sdk 2.0.0 zip archive is not downloadable\" (#9268) at dotnet/cli","RelatedBody":"I want to install .NET core SDK 2.0.0 using zip archive:\r\n## Steps to reproduce\r\n\r\n1. Go to [this](https://www.microsoft.com/net/download/dotnet-core/sdk-2.0.0) link to download the SDK.\r\n2. Go to Linux > File downloads section.\r\n3. click the link \"x64 binaries\" \r\n\r\nIt takes you to \"Thanks for downloading\" page to download the .gz zip archive. \r\n\r\n## Expected  behavior\r\n\r\nZip archive should get downloaded.\r\n\r\n## Actual behavior\r\n\r\nPage loads with file not found error. Below URL is seen in the address bar of the browser:\r\n\r\nhttps://download.microsoft.com/download/0/F/D/0FD852A4-7EA1-4E2A-983A-0484AC19B92C/dotnet-sdk-2.0.0-linux-x64.tar.gz\r\n\r\n## Environment data\r\n\r\n- I'm using Mozilla Firefox browser for the download.\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"7663950958","Type":"PullRequestEvent","CreatedAt":"2018-05-12T00:38:35","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/9267","RelatedDescription":"Opened pull request \"Fix incorrect default VSTest verbosity level.\" (#9267) at dotnet/cli","RelatedBody":"Commit 10289504a8aeb5fab7c1c9f8e0e7602e9c14250a changed the default verbosity\r\noption used for MSBuild from `-v:quiet` to `-verbosity:quiet`.  This triggered a\r\nmatch that was being done against arguments starting with `-verbosity` to\r\nforward the value to VSTest via the `VSTestVerbosity` property.  The result is\r\nthat VSTest is using a default verbosity of `quiet`, suppressing error output\r\nthat users expect to see.\r\n\r\nThe fix is to change the check to only match against user-supplied options.\r\nThe default level the command uses for MSBuild is not forwarded to VSTest.\r\n\r\nFixes #9229.\r\n"},{"Id":"7663749921","Type":"IssuesEvent","CreatedAt":"2018-05-11T23:00:27","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/8652","RelatedDescription":"Closed issue \"Manually Uninstall .NET Core SDK 2.2.0-Preview and 15.5.0-Preview Nightly Builds\" (#8652) at dotnet/cli","RelatedBody":"# Manually Uninstall .NET Core SDK 2.2.0-Preview and 15.5.0-Preview Nightly Builds\r\n\r\n[A change in the version number strategy for .NET Core SDK](https://github.com/dotnet/designs/pull/29) resulted in some nightly builds having a higher version number. This higher version number will block the installation of the correct .NET Core SDK.\r\n\r\nIf you have installed nightly builds of the .NET Core SDK that start with version number that begin with `2.2.0-preview1` or `15.5.0-preview`, you must manually uninstall these preview builds before later versions of the SDK with version numbers like 2.1.xxx will be available. This may have occurred by installing nightly builds of the .NET Core SDK or concurrent nightly builds of Visual Studio previews.\r\n\r\n## Details\r\n\r\n[We changed the version number strategy for .NET Core SDK](https://github.com/dotnet/designs/pull/29) as development was ongoing. Because of this, version numbers on the old scheme appeared in nightly builds. Unfortunately, these numbers are higher than the version numbers in the new scheme. All of the newer SDKs for .NET Core 2.1 will be ignored due to this higher version number; this includes newer nightly builds, public previews and eventual releases.\r\n\r\nThese older version numbers are similar to the following, with the last several different values in the last six digits:\r\n\r\n```\r\n2.2.0-preview1-008000\r\n15.5.0-preview-007082\r\n```\r\n\r\nSince the newer versions are in the form:\r\n\r\n```\r\n2.1.300-preview1-008000\r\n```\r\n\r\n## Call to Action\r\n\r\nIf you have installed nightly builds, please uninstall any .NET SDK versions that start with `2.2.0-preview1` or `15.5.0-preview`."},{"Id":"7663726845","Type":"IssuesEvent","CreatedAt":"2018-05-11T22:51:27","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/8492","RelatedDescription":"Closed issue \"Tool management experience - update, list, uninstall\" (#8492) at dotnet/cli","RelatedBody":"Since `dotnet install tool -g` allows installing commands, there should be additional commands to manage the installed tools.\r\n\r\nThis includes:\r\n* Listing installed tool packages and command names they provide.\r\n* Updating tools (one specific or all)\r\n* Listing outdated tools (could as well be update with a \"pretend\"/\"whatif\" flag or included in a listing command)\r\n* Uninstalling tools\r\n\r\ndoes `dotnet install tool -g` record any metadata at the moment? If any of the experiences above will be enabled in future updates/previews, metadata should already have been recorded for versions that didn't provide these management experiences.\r\n\r\ncc @wli3 @livarcocc @KathleenDollard"},{"Id":"7663715214","Type":"IssuesEvent","CreatedAt":"2018-05-11T22:46:44","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7401","RelatedDescription":"Closed issue \"EntityFramework Core 1.1 support for Spatial.\" (#7401) at dotnet/cli","RelatedBody":"Hi,\r\n\r\nI have question around System.Data.Spatial.\r\n\r\nWe have been using System.Data.Spatial in .NetFramework4.5 a lot.\r\nDo we have alternative in DotNetCoreApp 1.1. \r\nI did not find.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\nDotNetCoreApp 1.1. \r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"7663710891","Type":"IssuesEvent","CreatedAt":"2018-05-11T22:45:05","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/6821","RelatedDescription":"Closed issue \"ProjectReference Version number issue (Visual Studio 2017 Community)\" (#6821) at dotnet/cli","RelatedBody":"**Domain.csproj** _(potable)_ [Targetting shown below] \r\n\r\n![image](https://user-images.githubusercontent.com/6217482/26986023-dd8ddd9a-4d13-11e7-9743-1ac1c8dec513.png)\r\n\r\n**Business.csproj** _(.net core class library)_\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <VersionPrefix>1.0.0.0</VersionPrefix>\r\n    <TargetFrameworks>netstandard1.1;net45</TargetFrameworks>\r\n    <PackageTargetFallback>portable-net45+win8</PackageTargetFallback>\r\n  </PropertyGroup>\r\n  <ItemGroup>   \r\n    <ProjectReference Include=\"..\\Domain\\Domain.csproj\" />\r\n  </ItemGroup>  \r\n</Project>\r\n```\r\n**Business.Tests.csproj** _(.net core class library)_\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFrameworks>netcoreapp1.1;net45</TargetFrameworks>\r\n    <PackageTargetFallback>portable-net45+win8</PackageTargetFallback>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"15.0.0\" />\r\n    <PackageReference Include=\"NUnit\" Version=\"3.6.1\" />\r\n    <PackageReference Include=\"NUnit3TestAdapter\" Version=\"3.8.0-alpha1\" />\r\n    <PackageReference Include=\"Shouldly\" Version=\"2.8.2\" />\r\n    <PackageReference Include=\"Moq\" Version=\"4.7.10\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <Service Include=\"{82a7f48d-3b50-4b1e-b82e-3ada8210c358}\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <ProjectReference Include=\"..\\Business\\Business.csproj\"/>\r\n    <ProjectReference Include=\"..\\Domain\\Domain.csproj\"/>\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\n**WebApi.csproj**  _(asp.net core web api)_\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFrameworks>netcoreapp1.1;net45</TargetFrameworks>\r\n    <PackageTargetFallback>portable-net45+win8</PackageTargetFallback>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <Folder Include=\"Controllers\\\" />\r\n    <Folder Include=\"wwwroot\\\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.ApplicationInsights.AspNetCore\" Version=\"2.0.0\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore\" Version=\"1.1.2\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc\" Version=\"1.1.2\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.StaticFiles\" Version=\"1.1.2\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc.Formatters.Xml\" Version=\"1.1.2\" />\r\n    <PackageReference Include=\"Microsoft.Extensions.Logging.Debug\" Version=\"1.1.2\" />\r\n    <PackageReference Include=\"Newtonsoft.Json\" Version=\"10.0.2\" />\r\n    <PackageReference Include=\"System.Linq\" Version=\"4.3.0\" />\r\n    <PackageReference Include=\"System.Threading\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <ProjectReference Include=\"..\\Business\\Business.csproj\" />\r\n    <ProjectReference Include=\"..\\Domain\\Domain.csproj\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nGetting following errors (both Business & webapi and respective test projects) when opening solution in **Visual studio 2017 community**:\r\n\r\n>Unable to resolve 'C:\\Projects\\Dmian\\Domain.csproj' for '.NETStandard,Version=v1.1'.\t\r\n\r\n>Unable to resolve 'C:\\Projects\\Dmian\\Domain.csproj' for '.NETFramework,Version=v4.5'.\t\t\t\t\r\n\r\n\r\n>Unexpected dependency 'C:\\Projects\\Domain\\Domain.csproj' with no version number.\t\r\nProject: Business.Tests\t\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\MSBuild\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.PackageDependencyResolution.targets\t154\t\r\n\r\n\r\n**_What can be the best way to add reference to \"Portable class library( Framework 45) into .net core project\"_**"},{"Id":"7663707924","Type":"IssuesEvent","CreatedAt":"2018-05-11T22:43:57","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/5129","RelatedDescription":"Closed issue \"Unable to load DLL 'System.Security.Cryptography.Native.OpenSsl': The specified module could not be found. (Exception from HRESULT: 0x8007007E)\" (#5129) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n\r\n1. Follow the public instructions for installing and configuring .NET core on Mac OSX from [here](https://www.microsoft.com/net/core#macos)\r\n2. Create a directory to host a new application\r\n3. Run \"dotnet new -t web\" from the terminal\r\n4. Run \"donnet restore\" from the terminal\r\n\r\n\r\n## Expected  behavior\r\n\r\nAll the necessary nuget packages should be installed.\r\n\r\n## Actual behavior\r\n\r\nA series of errors ending with \"Unable to load DLL 'System.Security.Cryptography.Native.OpenSsl': The specified module could not be found.\"\r\n\r\n## Resolution\r\n\r\nI had to run a modified version of the install_name_tool command from [this StackOverflow answer](http://stackoverflow.com/a/40448157/292547).  The command that resolved the issue is as follows:\r\n\r\n`sudo install_name_tool -add_rpath /usr/local/opt/openssl/lib /usr/local/share/dotnet/shared/Microsoft.NETCore.App/1.1.0/System.Security.Cryptography.Native.OpenSsl.dylib`\r\n\r\nThis step should be added into the instructions for installing .NET Core on a Mac if possible.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n.NET Command Line Tools (1.0.0-preview2-1-003177)\r\n\r\nProduct Information:\r\n Version:            1.0.0-preview2-1-003177\r\n Commit SHA-1 hash:  a2df9c2576\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.12\r\n OS Platform: Darwin\r\n RID:         osx.10.12-x64\r\n\r\n\r\n\r\n\r\n"},{"Id":"7663703682","Type":"IssuesEvent","CreatedAt":"2018-05-11T22:42:17","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/4874","RelatedDescription":"Closed issue \"'Migrating' from .NET Framework to .NET Standard\" (#4874) at dotnet/cli","RelatedBody":"What would be best practice when trying to convert a whole bunch of '.NET Framework' csproj-projects to '.NET Standard'/'.NET Core' csproj-projects, optionally targeting multiple frameworks?\r\n\r\nThe projects are mostly libraries that should be simple enough to compile targeting .NET Standard, but is there any (planned) tool support to convert the traditional csproj files into the new ones?"},{"Id":"7663682473","Type":"IssuesEvent","CreatedAt":"2018-05-11T22:34:22","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/4754","RelatedDescription":"Closed issue \"editing csproj is VERY painfull\" (#4754) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\nEdit csproj file\r\n\r\n## Expected  behavior\r\ngood experience\r\n\r\n## Actual behavior\r\n**xml warning everywhere**\r\n![image](https://cloud.githubusercontent.com/assets/3386797/20369684/3f72d92e-ac39-11e6-8aa8-1ec42ae6ad15.png)\r\n\r\n![image](https://cloud.githubusercontent.com/assets/3386797/20369701/5f935bde-ac39-11e6-9fd7-eb9b3f7352aa.png)\r\n\r\n**no intellisense**\r\n![image](https://cloud.githubusercontent.com/assets/3386797/20369725/75f7aa7e-ac39-11e6-9811-f91e4752c659.png)\r\n\r\nimposible to discover options, everything is magic strings\r\n\r\netc,etc,etc.\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"7663679030","Type":"IssuesEvent","CreatedAt":"2018-05-11T22:33:06","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/4743","RelatedDescription":"Closed issue \"dotnet restore and dotnet build fails when pnpm is used to install npm packages\" (#4743) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\nuse pnpm to install any npm package\r\nthen do a 'dotnet restore'\r\n\r\n## Expected  behavior\r\n'dotnet restore' would restore packages\r\n\r\n## Actual behavior\r\nError message is displayed: 'error: The name of the file cannot be resolved by the system'\r\n\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n.NET Command Line Tools (1.0.0-preview2-003133)\r\n\r\nProduct Information:\r\n Version:            1.0.0-preview2-003133\r\n Commit SHA-1 hash:  74df06500c\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  6.2.9200\r\n OS Platform: Windows\r\n RID:         win8-x64\r\n\r\n\r\n\r\n\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7662579315","Type":"IssuesEvent","CreatedAt":"2018-05-11T18:00:51","Actor":"ericstj","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/724","RelatedDescription":"Opened issue \"Consider a more open-ended compatibilty mapping with .NET Framework\" (#724) at dotnet/standard","RelatedBody":"@Petermarcu suggested that we might desire a more open ended behavior rather than what we currently have (.NET 4.6.1).  Opening this on his behalf."},{"Id":"7656799964","Type":"PullRequestEvent","CreatedAt":"2018-05-10T17:30:13","Actor":"dotnet-maestro-bot","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/723","RelatedDescription":"Opened pull request \"Update BuildTools to preview1-02810-01 (master)\" (#723) at dotnet/standard","RelatedBody":""},{"Id":"7652677945","Type":"PullRequestEvent","CreatedAt":"2018-05-09T23:15:58","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/721","RelatedDescription":"Merged pull request \"Update BuildTools to preview1-02808-01 (master)\" (#721) at dotnet/standard","RelatedBody":""}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7664239708","Type":"IssuesEvent","CreatedAt":"2018-05-12T04:34:27","Actor":"jkotas","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/19210","RelatedDescription":"Closed issue \"ResourceSet enumeration fails on uapaot\" (#19210) at dotnet/corefx","RelatedBody":"Attempt to shared ResourceSet implementation between CoreRT and CoreCLR reveled bugs in the CoreRT/ProjectN version: https://github.com/dotnet/corefx/pull/19196#issuecomment-298439628"},{"Id":"7664238743","Type":"IssuesEvent","CreatedAt":"2018-05-12T04:33:27","Actor":"jkotas","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/4611","RelatedDescription":"Closed issue \"System.Resources.ResourceManager with other project (dll) for the resources\" (#4611) at dotnet/corefx","RelatedBody":"Could you add some features to do compatible the resources (text localization) in SiteMapNode? By now we an create a custom provider, or code expression builder but not a expression builder in sitemapnode.\n\nhttps://msdn.microsoft.com/en-us/library/aa905797.aspx#exaspnet20rpm_topic5\n"},{"Id":"7663965352","Type":"PullRequestEvent","CreatedAt":"2018-05-12T00:47:21","Actor":"dotnet-maestro-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/29671","RelatedDescription":"Opened pull request \"Update CoreClr to preview1-26512-01 (master)\" (#29671) at dotnet/corefx","RelatedBody":""},{"Id":"7663856072","Type":"PullRequestEvent","CreatedAt":"2018-05-11T23:47:15","Actor":"maryamariyan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/29670","RelatedDescription":"Opened pull request \"Skipping test on uap because metadata removed for perf reason\" (#29670) at dotnet/corefx","RelatedBody":"Fixes: #29652 \r\n\r\nNote, I wasn't not able to reproduce locally.\r\n\r\ncc: @danmosemsft "}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7664117997","Type":"PullRequestEvent","CreatedAt":"2018-05-12T02:47:23","Actor":"OmarTawfik","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/26815","RelatedDescription":"Opened pull request \"Produce errors on emitting attributes using default constructor of structs\" (#26815) at dotnet/roslyn","RelatedBody":"Fixes #19394\r\n\r\nFor personal review only for now."},{"Id":"7664069727","Type":"IssuesEvent","CreatedAt":"2018-05-12T02:06:28","Actor":"kobelev-dev","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/26814","RelatedDescription":"Opened issue \"Linefeeds inside interpolated string parameter cause syntax error\" (#26814) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\nVS Enterprise 2017, 15.5.5\r\n\r\n**Steps to Reproduce**:\r\n\r\nThis one compiles fine:\r\n\r\n                    var jobMatchesAsString = string.Join(\", \", bucket.Value.AssociatedJobs.Select(jmr =>\r\n                            $\"{jmr.Job.Job.JobId} (on {string.Join(\", \", jmr.MatchingKeywords.Select(mk => $\"{mk.Keyword.Item1}: {mk.Keyword.Item2}: {mk.countOfUses}\"))})\"));\r\n\r\nand this one with errors:\r\n                    var jobMatchesAsString = string.Join(\", \", bucket.Value.AssociatedJobs.Select(jmr =>\r\n                            $\"{jmr.Job.Job.JobId} (on {string.Join(\", \", jmr.MatchingKeywords.Select(mk =>\r\n                                    $\"{mk.Keyword.Item1}: {mk.Keyword.Item2}: {mk.countOfUses}\"))})\"));\r\n\r\n1>------ Build started: Project: AsyncJobHelper, Configuration: Debug x64 ------\r\n1>C:\\CBP\\Tools3\\AsyncJobHelper\\AsyncJobHelper\\Analysis\\TelemetryProcessor.cs(212,26,212,28): error CS8076: Missing close delimiter '}' for interpolated expression started with '{'.\r\n1>C:\\CBP\\Tools3\\AsyncJobHelper\\AsyncJobHelper\\Analysis\\TelemetryProcessor.cs(212,107,212,107): error CS1733: Expected expression\r\n1>C:\\CBP\\Tools3\\AsyncJobHelper\\AsyncJobHelper\\Analysis\\TelemetryProcessor.cs(212,107,212,107): error CS1026: ) expected\r\n1>C:\\CBP\\Tools3\\AsyncJobHelper\\AsyncJobHelper\\Analysis\\TelemetryProcessor.cs(212,107,212,107): error CS1003: Syntax error, ',' expected\r\n1>C:\\CBP\\Tools3\\AsyncJobHelper\\AsyncJobHelper\\Analysis\\TelemetryProcessor.cs(213,94,213,95): error CS1002: ; expected\r\n1>C:\\CBP\\Tools3\\AsyncJobHelper\\AsyncJobHelper\\Analysis\\TelemetryProcessor.cs(213,95,213,96): error CS1513: } expected\r\n1>C:\\CBP\\Tools3\\AsyncJobHelper\\AsyncJobHelper\\Analysis\\TelemetryProcessor.cs(213,96,213,96): error CS1010: Newline in constant\r\n1>C:\\CBP\\Tools3\\AsyncJobHelper\\AsyncJobHelper\\Analysis\\TelemetryProcessor.cs(213,100,213,100): error CS1002: ; expected\r\n1>C:\\CBP\\Tools3\\AsyncJobHelper\\AsyncJobHelper\\Analysis\\TelemetryProcessor.cs(232,13,232,15): error CS1519: Invalid token 'if' in class, struct, or interface member declaration\r\n1>C:\\CBP\\Tools3\\AsyncJobHelper\\AsyncJobHelper\\Analysis\\TelemetryProcessor.cs(232,17,232,18): error CS1031: Type expected\r\n1>C:\\CBP\\Tools3\\AsyncJobHelper\\AsyncJobHelper\\Analysis\\TelemetryProcessor.cs(232,17,232,18): error CS8124: Tuple must contain at least two elements.\r\n1>C:\\CBP\\Tools3\\AsyncJobHelper\\AsyncJobHelper\\Analysis\\TelemetryProcessor.cs(232,17,232,18): error CS1026: ) expected\r\n1>C:\\CBP\\Tools3\\AsyncJobHelper\\AsyncJobHelper\\Analysis\\TelemetryProcessor.cs(232,17,232,18): error CS1519: Invalid token '!' in class, struct, or interface member declaration\r\n1>C:\\CBP\\Tools3\\AsyncJobHelper\\AsyncJobHelper\\Analysis\\TelemetryProcessor.cs(232,36,232,37): error CS1519: Invalid token ')' in class, struct, or interface member declaration\r\n1>C:\\CBP\\Tools3\\AsyncJobHelper\\AsyncJobHelper\\Analysis\\TelemetryProcessor.cs(234,34,234,35): error CS1519: Invalid token '(' in class, struct, or interface member declaration\r\n1>C:\\CBP\\Tools3\\AsyncJobHelper\\AsyncJobHelper\\Analysis\\TelemetryProcessor.cs(234,35,234,36): error CS8124: Tuple must contain at least two elements.\r\n1>C:\\CBP\\Tools3\\AsyncJobHelper\\AsyncJobHelper\\Analysis\\TelemetryProcessor.cs(234,36,234,37): error CS1519: Invalid token ';' in class, struct, or interface member declaration\r\n1>C:\\CBP\\Tools3\\AsyncJobHelper\\AsyncJobHelper\\Analysis\\TelemetryProcessor.cs(237,5,237,6): error CS1022: Type or namespace definition, or end-of-file expected\r\n1>C:\\CBP\\Tools3\\AsyncJobHelper\\AsyncJobHelper\\Analysis\\TelemetryProcessor.cs(238,1,238,2): error CS1022: Type or namespace definition, or end-of-file expected\r\n**Expected Behavior**:\r\nCompile without errors\r\n\r\n**Actual Behavior**:\r\nSyntax errors.\r\n"},{"Id":"7663830856","Type":"IssuesEvent","CreatedAt":"2018-05-11T23:34:59","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/26813","RelatedDescription":"Opened issue \"Bound nodes have different meanings in different phases in VB\" (#26813) at dotnet/roslyn","RelatedBody":"The bound nodes in the VB compiler appear to have different semantics when used at different places in the compilation pipeline.\r\n\r\nFor example, before local lowering a `BoundConversion` node with conversion kind `NarrowingNumeric` that converts from `Single` to `Int32` is used to represent a `CInt` operation, and its semantics require calling a helper method `System.Math.Round` that rounds (rather than truncates) the value. However, after lowering the generated bound nodes include a `BoundConversion` node with conversion kind `NarrowingNumeric` that converts the `Single` resulting from the helper method to `Int32`. The Emit phase does not produce an invocation of the rounding helper. In other words Lowering is not idempotent.\r\n\r\nAs a general design principle, any node whose semantics are rewritten in the lowering phase should not be a node whose shape can appear in the output of the lowering phase.\r\n"},{"Id":"7663746206","Type":"IssuesEvent","CreatedAt":"2018-05-11T22:59:04","Actor":"cston","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/26812","RelatedDescription":"Opened issue \"Incorrect nullability for double assignment\" (#26812) at dotnet/roslyn","RelatedBody":"```c#\r\nusing static System.Console;\r\nclass C\r\n{\r\n    static void Main()\r\n    {\r\n        string? x;\r\n        x = x = \"\";\r\n        WriteLine(x.Length); // warning CS8602: Possible dereference of a null reference\r\n        string? y;\r\n        x = y = \"\";\r\n        WriteLine(x.Length); // warning CS8602: Possible dereference of a null reference\r\n        WriteLine(y.Length);\r\n    }\r\n}\r\n```\r\nReported by @bgrainger."},{"Id":"7663741530","Type":"IssuesEvent","CreatedAt":"2018-05-11T22:57:14","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/26738","RelatedDescription":"Closed issue \"Nullable types fixer should handle 'as' expressions\" (#26738) at dotnet/roslyn","RelatedBody":"**Version Used**: Nullable Reference Types Preview (7 May 2018)\r\n\r\n**Steps to Reproduce**:\r\n\r\n```csharp\r\nType type = obj as Type;\r\n```\r\n\r\n**Expected Behavior**:\r\n\r\nA code fix is provided for converting `Type type` to `Type? type`.\r\n\r\n**Actual Behavior**:\r\n\r\nNo code fix is provided.\r\n\r\n@jcouv Following the initial handling of `null`, this appears to be the next most common case for me."},{"Id":"7663740928","Type":"PullRequestEvent","CreatedAt":"2018-05-11T22:56:59","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/26789","RelatedDescription":"Merged pull request \"DeclareAsNullable: recognize 'as' expressions as nullable\" (#26789) at dotnet/roslyn","RelatedBody":"The compiler puts a nullable warning on the expression in `string s = o as string;`, just like it does for `string s = null;`. With this PR, the DeclareAsNullable fixer can recognize the expression as nullable (the code should have used a cast otherwise) and offer to fix the type of the local.\r\n\r\nFixes https://github.com/dotnet/roslyn/issues/26738\r\n\r\n@sharwell @dpoeschl for review (one line fix). Thanks"},{"Id":"7663740402","Type":"IssuesEvent","CreatedAt":"2018-05-11T22:56:46","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23703","RelatedDescription":"Closed issue \"Auto-formatting inserts space between `[]` and `?`\" (#23703) at dotnet/roslyn","RelatedBody":"Auto-formatting inserts a space between `[]` and `?` when typing a `;` after the declaration:\r\n```\r\nclass C\r\n{\r\n    object[]? F = null\r\n}\r\n```"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7663894041","Type":"IssuesEvent","CreatedAt":"2018-05-12T00:05:50","Actor":"christianscheuer","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/5682","RelatedDescription":"Closed issue \"Question: Is there a way to catch native exceptions in other threads?\" (#5682) at dotnet/corert","RelatedBody":"In our production macOS app (which has been built on corert since April 2017 !) we are sometimes experiencing bugs that come from native exceptions being thrown on other threads, or native exceptions that we somehow miss to catch in other ways.\r\n\r\nSince our logging and error handling infrastructure is in C#, it would be great if there was a way to deal with these native exceptions somehow - without them causing the process to exit.\r\nIs there already support for this in CoreRT or would it be possible for us to inject some custom logic?\r\n\r\nAnother thing we're seeing is that when our CoreRT console process is launched by another process, which is then killed, the CoreRT process hangs with CPU usage around 100%.\r\nI'm not entirely sure how to debug this - my first look at the \"Sample\" in Activity Monitor didn't reveal anything that I could see problematic, but would that be helpful for you to help find the bug?\r\n"},{"Id":"7662991714","Type":"PullRequestEvent","CreatedAt":"2018-05-11T19:33:23","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5800","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5800) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7662856614","Type":"PullRequestEvent","CreatedAt":"2018-05-11T19:01:38","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5801","RelatedDescription":"Merged pull request \"Merge master to nmirror\" (#5801) at dotnet/corert","RelatedBody":""},{"Id":"7662855227","Type":"PullRequestEvent","CreatedAt":"2018-05-11T19:01:19","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5801","RelatedDescription":"Opened pull request \"Merge master to nmirror\" (#5801) at dotnet/corert","RelatedBody":""},{"Id":"7662471287","Type":"PullRequestEvent","CreatedAt":"2018-05-11T17:37:27","Actor":"stephentoub","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/5797","RelatedDescription":"Closed pull request \"Remove StringBuilderCache from S.P.CoreLib.csproj\" (#5797) at dotnet/corert","RelatedBody":"To be cherry-picked once https://github.com/dotnet/coreclr/pull/17964 is merged and mirrored."},{"Id":"7662457210","Type":"PullRequestEvent","CreatedAt":"2018-05-11T17:34:18","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5800","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5800) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7662308611","Type":"IssuesEvent","CreatedAt":"2018-05-11T17:01:01","Actor":"christianscheuer","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/5798","RelatedDescription":"Closed issue \"Question: Stacktrace address resolving\" (#5798) at dotnet/corert","RelatedBody":"Hi CoreRT team,\r\n\r\nIs there any way to resolve raw stacktrace addresses to full type/method names without having to embed stacktrace metadata?\r\nWe are not concerned at all about executable size, but more concerned with limiting the amount of embedded metadata to not reveal too much sensitive information to possible reverse engineers.\r\n"},{"Id":"7662125414","Type":"PullRequestEvent","CreatedAt":"2018-05-11T16:21:27","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5799","RelatedDescription":"Opened pull request \"Add support for setting AppContext switches \" (#5799) at dotnet/corert","RelatedBody":"Two commits:\r\n\r\n* Adds an `--appcontextswitch` argument to the compiler (and accompanying `AppContextSwitchOverrides` MSBuild `ItemGroup`) to influence class library behaviors. This is a general purpose feature that Project N has, but we didn't have it yet.\r\n* Add possibility to opt out of strict `Enum.GetValues` semantic and use it in CoreFX test runner. This fixes 39 CoreFX System.Collections tests."},{"Id":"7661888168","Type":"PullRequestEvent","CreatedAt":"2018-05-11T15:35:25","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5796","RelatedDescription":"Merged pull request \"Fix diagnostic stacktrace for shared generic methods\" (#5796) at dotnet/corert","RelatedBody":"Diagnostic stacktraces were missing symbols for shared generic methods. TryGetMethodForOriginalLdFtnResult is expecting fat pointer for these, and failed to find the method when used for method entrypoint.\r\n\r\nThe fix is to create a clone of TryGetMethodForOriginalLdFtnResult that does not require instantiation argument and does not return exact instantiation."}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7663668809","Type":"IssuesEvent","CreatedAt":"2018-05-11T22:29:30","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/2240","RelatedDescription":"Opened issue \"GenerateDeps.proj should be protected against Directory.Build.props/.targets from outside the installation folder\" (#2240) at dotnet/sdk","RelatedBody":"The SDK has a `GenerateDeps.proj` file which is used to support `DotNetCliToolReference`.  When we build this project, we should prevent Directory.Build.props or Directory.Build.targets from being imported.\r\n\r\nI encountered this now that the stage 0 SDK is installed in `<Repo root>\\.dotnet`, when I tried to use `dotnet xunit` on a project which had a `DotNetCliToolReference` to `dotnet-xunit`, it failed because it was picking up the repo's Directory.Build.props which was causing it to fail."},{"Id":"7663603680","Type":"PullRequestEvent","CreatedAt":"2018-05-11T22:07:26","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2239","RelatedDescription":"Opened pull request \"WIP Generate shim with PackAsTool\" (#2239) at dotnet/sdk","RelatedBody":""},{"Id":"7663588721","Type":"PullRequestEvent","CreatedAt":"2018-05-11T22:02:37","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/2238","RelatedDescription":"Closed pull request \"WIP Generate shim in PackAsTool\" (#2238) at dotnet/sdk","RelatedBody":""},{"Id":"7663556791","Type":"PullRequestEvent","CreatedAt":"2018-05-11T21:52:50","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/2234","RelatedDescription":"Merged pull request \"Let EmbedAppNameInHost task call the csharp class\" (#2234) at dotnet/sdk","RelatedBody":"Prerequisite for https://github.com/dotnet/sdk/pull/2230\r\n\r\nThat csharp class was extracted and copied to CLI first. Doing so can help reduce the duplication of cli and sdk work in the future https://github.com/dotnet/cli/issues/9027\r\n\r\nAlso, Shim generation on PackAsTool need to use the EmbedAppNameInHostUtil, since compared to the original task, it can embed relative path, not just a file name. https://github.com/dotnet/sdk/pull/2230/files#diff-a19564bd6fa2c5ce365c212cb5b11fb7R80\r\n"},{"Id":"7663542553","Type":"IssuesEvent","CreatedAt":"2018-05-11T21:48:32","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/2226","RelatedDescription":"Closed issue \"[2.1-rc1] dotnet clean fails when obj folder is missing\" (#2226) at dotnet/sdk","RelatedBody":"**How to reproduce**\r\n* Run `dotnet new classlib` in an empty folder\r\n* Delete the obj folder\r\n* Run `dotnet clean`\r\n\r\n**What happens**\r\n* Clean fails\r\n* obj folder is created with empty folders\r\n\r\n**What should happen**\r\n* Nothing, project is already clean\r\n\r\nThis is an issue on our CI server, where we run `dotnet clean` as the first step of every build, and then run `dotnet restore` as the second step. It now fails on the initial build, when it clones the repo and there is no obj folder."},{"Id":"7663527752","Type":"PullRequestEvent","CreatedAt":"2018-05-11T21:44:17","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/2230","RelatedDescription":"Closed pull request \"WIP Generate shim in PackAsTool\" (#2230) at dotnet/sdk","RelatedBody":"Is my approach to use task for most of the logic ok?\r\nIs the property name good?\r\n\r\npending loc\r\npending dedup EmbedAppNameInHostUtil, will create a separate PR that will make the task use util\r\npending test coverage for embedded path\r\npending doc on task"},{"Id":"7663527498","Type":"PullRequestEvent","CreatedAt":"2018-05-11T21:44:13","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2238","RelatedDescription":"Opened pull request \"WIP Generate shim in PackAsTool\" (#2238) at dotnet/sdk","RelatedBody":""},{"Id":"7663480763","Type":"PullRequestEvent","CreatedAt":"2018-05-11T21:31:09","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/2229","RelatedDescription":"Merged pull request \"Fix regression in clean when no assets file is present\" (#2229) at dotnet/sdk","RelatedBody":"## Issues fixed\r\n\r\n#2226 \r\n\r\n## Description of Issue\r\n\r\nRunning `dotnet clean` on a pristine working copy with no project.assets.json files present will fail.\r\n\r\nAlso impacts `msbuild /t:Clean` and Clean from VS with auto-restore disabled.\r\n\r\nThis regressed from preview 2 to RTM and was reported by a customer.\r\n\r\n## Customer Impact\r\n\r\nCan't clean without doing restore first, which is extremely unintuitive: why do I need to restore things in order to delete things?\r\nAnother workaround is to use `git clean` to obliterate everything instead of using the build target.\r\n\r\n## Risk\r\n\r\nLow\r\n\r\n## Testing\r\n\r\nRegression coverage added as a unit test\r\n\r\n## Implementation notes\r\n\r\nIdeally, we wouldn't read the assets file at all on Clean, but there are complications around rebuild with that, so it is tracked #2233 and not fixed here. A test is added that will fail if the naive fix for #2233. \r\n\r\nInstead, this change takes the conservative approach of reverting to the 2.1.300-preview2 (and all releases before that) behavior of having Clean only read the assets file when present.\r\n\r\nI've also replaced the SuppressAssetsLogMessages and UnsuppressAssetsLogMessages with _SdkBeforeClean and _SdkBeforeRebuild for two reasons:\r\n\r\n1. These have never shipped in an RTM release and I don't want them to be considered supported extensibility points. Hence the \"_\". In addressing #2233, we may find a better way to handle issues with cleaning.\r\n2.  I didn't want to start a pattern of adding more target pairs every time something is wrong with clean."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"994438149693620225","CreatedAt":"2018-05-10T04:45:05+00:00","UserScreenname":"dotnet","Text":"Bye bye! See you next year for #MSBuild 👋 https://t.co/IwcXQwKarV","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":105,"FavoriteCount":10,"RawContent":null},{"Id":"993982168476012544","CreatedAt":"2018-05-08T22:33:10+00:00","UserScreenname":"dotnet","Text":".NET Core May 2018 Update https://t.co/OZkHLwpebZ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":57,"FavoriteCount":34,"RawContent":null},{"Id":"993982051735879680","CreatedAt":"2018-05-08T22:32:43+00:00","UserScreenname":"dotnet","Text":".NET Framework May 2018 Security and Quality Rollup https://t.co/jmOfJy1TEn","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":13,"FavoriteCount":7,"RawContent":null}]}},"RunOn":"2018-05-12T05:30:22.6823269Z","RunDurationInMilliseconds":7932}