{"Data":{"Blog":{"FeedItems":[{"Title":"GlideX for For Fast Images on Android","PublishedOn":"2019-03-28T16:01:13+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Getting good image performance on Android has traditionally been a difficult task. Google has some documentation on the subject, which unfortunately mentions some complex topics: Cache and recycle...","Href":"https://blog.xamarin.com/glidex-fast-images-android/","RawContent":null},{"Title":"Introducing the Xamarin.iOS Interpreter","PublishedOn":"2019-03-26T16:41:43+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Historically iOS applications have had a number of limitations when running on a device, as Apple disallows the execution of dynamically generated code. Applications are compiled “Ahead of Time” (AOT)...","Href":"https://blog.xamarin.com/introducing-xamarin-ios-interpreter/","RawContent":null},{"Title":"Join the Xamarin Visual Challenge","PublishedOn":"2019-03-22T16:00:19+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For the past month, we have been running a low-key challenge to flex the new Xamarin.Forms 3.6 feature, Visual with Material Design. For more information about what Visual is and what you can do with...","Href":"https://blog.xamarin.com/join-the-xamarin-visual-challenge/","RawContent":null},{"Title":"Get Your Apps Ready for Apple’s New Watch Processor Architecture","PublishedOn":"2019-03-20T15:59:03+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Last fall, Apple announced that new applications and updates would need to support the Apple Watch Series 4. &#8220;Starting March 2019, all new apps and app updates for iPhone, including universal...","Href":"https://blog.xamarin.com/apple-new-processor-architecture/","RawContent":null},{"Title":"Xamarin.Essentials Adds Detect Shake, Browser Customization, Color Helpers, and More!","PublishedOn":"2019-03-18T18:54:27+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Xamarin.Essentials are your ultimate open source library to access native features from a single cross-platform API. Since the first release, we have received awesome feedback on GitHub from...","Href":"https://blog.xamarin.com/xamarin-essentials-detect-shake-browser-customization/","RawContent":null},{"Title":"Introducing the New Xamarin Customer Showcase","PublishedOn":"2019-03-15T16:53:07+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Developers around the world use Xamarin every day to build beautiful native mobile apps with .NET. What better way to highlight the amazing work that these developers are doing than with a customer...","Href":"https://blog.xamarin.com/new-xamarin-customer-showcase/","RawContent":null},{"Title":"A Quick Update on Google Components for iOS and Android","PublishedOn":"2019-03-13T19:12:15+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"One of the best parts about using Xamarin for mobile development is access to all of the platform APIs from C# bindings. Additionally, any native iOS or Android library can be consumed by a Xamarin...","Href":"https://blog.xamarin.com/update-google-components-ios-android/","RawContent":null},{"Title":"Enhanced Xamarin Development With MFractor","PublishedOn":"2019-03-12T15:58:18+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This post was guest authored and contributed by Matthew Robbins. Matthew is a Microsoft MVP and the founder of MFractor, incredible Xamarin tools for Visual Studio Mac. MFractor MFractor is a powerful...","Href":"https://blog.xamarin.com/enhanced-xamarin-development-with-mfractor/","RawContent":null},{"Title":"Podcast: POP! New docs, blogs, customer showcases, and Twitch streams!","PublishedOn":"2019-03-08T17:03:42+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The Visual Studio Mobile Developer Podcast features Matt Soucoup and James Montemagno discussing the latest and greatest in mobile and cloud development. Podcast Highlights This month&#8217;s Visual...","Href":"https://blog.xamarin.com/podcast-pop-docs-blogs-showcases-twitch/","RawContent":null},{"Title":"Beautiful Material Design for Android & iOS","PublishedOn":"2019-03-07T20:27:10+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This week, Xamarin.Forms 3.6 shipped with another round of improvements, the most exciting of which is called Visual. Visual enables developers to create beautiful, cross-platform mobile applications...","Href":"https://blog.xamarin.com/beautiful-material-design-android-ios/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"9344257769","Type":"PullRequestEvent","CreatedAt":"2019-03-29T22:02:10","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2903","RelatedDescription":"Opened pull request \"[build] use a repository-wide NuGet.config\" (#2903) at xamarin/xamarin-android","RelatedBody":"Context: https://docs.microsoft.com/en-us/nuget/consume-packages/configuring-nuget-behavior\r\nContext: http://build.devdiv.io/2500191\r\nContext: https://github.com/xamarin/xamarin-android/pull/2859#issuecomment-476691256\r\n\r\nWe are randomly getting failures during Windows builds such as:\r\n\r\n    NuGet.targets(114,5): Unable to load the service index for source https://someurl.visualstudio.com/_packaging/Dev/nuget/v3/index.json.\r\n        Response status code does not indicate success: 401 (Unauthorized).\r\n\r\nIt appears that some of our build machines on Azure DevOps have a\r\nglobal (or user-level) `NuGet.Config` file that points to a NuGet feed\r\nwe don't have access to.\r\n\r\nThe way we can workaround this, is to provide our own `NuGet.config`\r\nfile that *only* uses the official nuget.org feed.\r\n\r\n* We can put a top-level `NuGet.config` next to our SLN files.\r\n* We also need to use this file during MSBuild tests.\r\n\r\nI also made sure any calls to `nuget restore` are giving us the\r\nhighest log information via `-Verbosity Detailed`. This will tell us\r\nwhat `NuGet.config` files and feeds are used."},{"Id":"9344242551","Type":"IssuesEvent","CreatedAt":"2019-03-29T21:58:42","Actor":"jNery","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2902","RelatedDescription":"Opened issue \"NetworkCredential ignored using AndroidClientHandler resulting in 401 (Unauthorized) \" (#2902) at xamarin/xamarin-android","RelatedBody":"NetworkCredential ignored using AndroidClientHandler resulting in 401 (Unauthorized) \r\n\r\n### Steps to Reproduce\r\n\r\n1. Set NetworkCredential to valid username/password\r\nNotice that `HttpClientHandler` works just fine but 401 (Unauthorized) using `AndroidClientHandler`\r\n```CSharp\r\nEventHandler clickedHandler = async (a, b) =>\r\n{\r\n    var dialog = new Android.App.AlertDialog.Builder(this);\r\n    try\r\n    {\r\n        if (a == button)\r\n        {\r\n            var client = new System.Net.Http.HttpClient(new HttpClientHandler() { Credentials = new System.Net.NetworkCredential(\"guest\", \"guest\") });\r\n            var response = await client.GetAsync(new Uri(\"https://jigsaw.w3.org/HTTP/Basic/\"));\r\n            dialog.SetTitle(response.StatusCode.ToString());\r\n            dialog.SetMessage(await response.Content.ReadAsStringAsync());\r\n        }\r\n        else if (a == button1)\r\n        {\r\n            var client = new System.Net.Http.HttpClient(new AndroidClientHandler() { Credentials = new System.Net.NetworkCredential(\"guest\", \"guest\") });\r\n            var response = await client.GetAsync(new Uri(\"https://jigsaw.w3.org/HTTP/Basic/\"));\r\n            dialog.SetTitle(response.StatusCode.ToString());\r\n            dialog.SetMessage(await response.Content.ReadAsStringAsync());\r\n        }\r\n    }\r\n    catch (Exception error)\r\n    {\r\n        Exception ex = error;\r\n        if (ex is AggregateException)\r\n        {\r\n            ex = ((AggregateException)ex).GetBaseException();\r\n        }\r\n        dialog.SetTitle(ex.GetType().Name);\r\n        dialog.SetMessage(ex.Message);\r\n    }\r\n    RunOnUiThread(() => dialog.Show());\r\n};\r\nbutton.Click += clickedHandler;\r\nbutton1.Click += clickedHandler;\r\n```\r\n\r\n<!--\r\nIf you have a repro project, you may drag & drop the .zip/etc. onto the issue editor to attach it.\r\n-->\r\n\r\n### Expected Behavior\r\nServer should respond with `HttpStatusCode.OK` \r\n### Actual Behavior\r\nServer should respond with `HttpStatusCode.Unauthorized` \r\n### Version Information\r\n\r\n<!--\r\n1. On macOS and within Visual Studio, select Visual Studio > About Visual Studio, then click the Show Details button, then click the Copy Information button.\r\n\r\n2. Paste below this comment block.\r\n-->\r\nMicrosoft Visual Studio Enterprise 2017 \r\nVersion 15.9.9\r\nVisualStudio.15.Release/15.9.9+28307.518\r\nMicrosoft .NET Framework\r\nVersion 4.7.03190\r\n\r\nMono Debugging for Visual Studio   4.13.12-pre (9bc9548)\r\nSupport for debugging Mono processes with Visual Studio.\r\n\r\nVisualStudio.Mac   1.0\r\nMac Extension for Visual Studio\r\n\r\nXamarin   4.12.3.80 (d15-9@914127c74)\r\nVisual Studio extension to enable development for Xamarin.iOS and Xamarin.Android.\r\n\r\nXamarin Designer   4.16.13 (45a16efd4)\r\nVisual Studio extension to enable Xamarin Designer tools in Visual Studio.\r\n\r\nXamarin Templates   1.1.128 (6f5ebb2)\r\nTemplates for building iOS, Android, and Windows apps with Xamarin and Xamarin.Forms.\r\n\r\nXamarin.Android SDK   9.1.7.0 (HEAD/ba9da7a76)\r\nXamarin.Android Reference Assemblies and MSBuild support.\r\n\r\nXamarin.iOS and Xamarin.Mac SDK   12.2.1.15 (d60abd1)\r\nXamarin.iOS and Xamarin.Mac Reference Assemblies and MSBuild support.\r\n### Log File\r\n\r\n<!--\r\n1. On macOS and within Visual Studio:\r\n    a. Click **Tools** > **SDK Command Prompt**.\r\n    b. Within the launched `Terminal.app` window, run:\r\n\r\n            adb logcat -d | pbcopy\r\n\r\n2. Paste below this comment block\r\n-->\r\n\r\n\r\n\r\n<!--\r\nSwitch to the \"Preview\" tab to ensure your issue renders correctly.\r\n\r\nPlease add an appropriate \"Area:\" label in the Labels section.\r\n-->"},{"Id":"9344086243","Type":"IssuesEvent","CreatedAt":"2019-03-29T21:24:33","Actor":"jNery","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2901","RelatedDescription":"Opened issue \"ObjectDisposedException when retrying POST request using AndroidClientHandler\" (#2901) at xamarin/xamarin-android","RelatedBody":"ObjectDisposedException when retrying POST request using AndroidClientHandler\r\n\r\n### Steps to Reproduce\r\n\r\n1. Implement AndroidClientHandler that will retry the same request\r\n```CSharp\r\npublic class NativeClientHandler : AndroidClientHandler\r\n{\r\n    bool retry = true;\r\n    protected override async Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n    {\r\n        HttpResponseMessage response = await BaseSendAsync(request, cancellationToken);\r\n        if (retry)\r\n        {\r\n            retry = !retry;\r\n            return await SendAsync(request, cancellationToken);\r\n        }\r\n        return response;\r\n    }\r\n    internal Task<HttpResponseMessage> BaseSendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n    {\r\n        return base.SendAsync(request, cancellationToken);\r\n    }\r\n}\r\n```\r\nNotice that same implementation above for HttpClientHandler works just fine\r\n```CSharp\r\npublic class ManagedClientHandler : HttpClientHandler\r\n{\r\n    bool retry = true;\r\n    protected override async Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n    {\r\n        HttpResponseMessage response = await BaseSendAsync(request, cancellationToken);\r\n        if (retry)\r\n        {\r\n            retry = !retry;\r\n            return await SendAsync(request, cancellationToken);\r\n        }\r\n        return response;\r\n    }\r\n    internal Task<HttpResponseMessage> BaseSendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n    {\r\n        return base.SendAsync(request, cancellationToken);\r\n    }\r\n}\r\n```\r\n2. Send POST request that will be re-sent \r\nUse case: server may respond with JSON error so client can challenge for credential; thus, sending the same POST request with authorization header or parameter.\r\n\r\n```CSharp\r\nEventHandler clickedHandler = async (a, b) =>\r\n{\r\n    var dialog = new Android.App.AlertDialog.Builder(this);\r\n    try\r\n    {\r\n        if (a == button)\r\n        {\r\n            var client = new System.Net.Http.HttpClient(new NativeClientHandler());\r\n            var response = await client.PostAsync(new Uri(\"http://httpbin.org/post\"), new System.Net.Http.FormUrlEncodedContent(new[] { new KeyValuePair<string, string>(\"f\", \"json\") }));\r\n        }\r\n        if (a == button1)\r\n        {\r\n            var client = new System.Net.Http.HttpClient(new ManagedClientHandler());\r\n            var response = await client.PostAsync(new Uri(\"http://httpbin.org/post\"), new System.Net.Http.FormUrlEncodedContent(new[] { new KeyValuePair<string, string>(\"f\", \"json\") }));\r\n            dialog.SetMessage(await response.Content.ReadAsStringAsync());\r\n        }\r\n        dialog.SetTitle(\"Success!\");\r\n    }\r\n    catch (Exception error)\r\n    {\r\n        Exception ex = error;\r\n        if (ex is AggregateException)\r\n        {\r\n            ex = ((AggregateException)ex).GetBaseException();\r\n        }\r\n        dialog.SetTitle(ex.GetType().Name);\r\n        dialog.SetMessage(ex.Message);\r\n    }\r\n    RunOnUiThread(() => dialog.Show());\r\n};\r\nbutton.Click += clickedHandler;\r\nbutton1.Click += clickedHandler\r\n```\r\n\r\n3. \r\n\r\n<!--\r\nIf you have a repro project, you may drag & drop the .zip/etc. onto the issue editor to attach it.\r\n-->\r\n\r\n### Expected Behavior\r\nFollowing request should have succeeded.\r\n\r\n### Actual Behavior\r\nFollowing request fails with ObjectDisposedException \"Cannot access a closed Stream\"\r\n\r\n### Version Information\r\n\r\n<!--\r\n1. On macOS and within Visual Studio, select Visual Studio > About Visual Studio, then click the Show Details button, then click the Copy Information button.\r\n\r\n2. Paste below this comment block.\r\n-->\r\nMicrosoft Visual Studio Enterprise 2017 \r\nVersion 15.9.9\r\nVisualStudio.15.Release/15.9.9+28307.518\r\nMicrosoft .NET Framework\r\nVersion 4.7.03190\r\n\r\nMono Debugging for Visual Studio   4.13.12-pre (9bc9548)\r\nSupport for debugging Mono processes with Visual Studio.\r\n\r\nVisualStudio.Mac   1.0\r\nMac Extension for Visual Studio\r\n\r\nXamarin   4.12.3.80 (d15-9@914127c74)\r\nVisual Studio extension to enable development for Xamarin.iOS and Xamarin.Android.\r\n\r\nXamarin Designer   4.16.13 (45a16efd4)\r\nVisual Studio extension to enable Xamarin Designer tools in Visual Studio.\r\n\r\nXamarin Templates   1.1.128 (6f5ebb2)\r\nTemplates for building iOS, Android, and Windows apps with Xamarin and Xamarin.Forms.\r\n\r\nXamarin.Android SDK   9.1.7.0 (HEAD/ba9da7a76)\r\nXamarin.Android Reference Assemblies and MSBuild support.\r\n\r\nXamarin.iOS and Xamarin.Mac SDK   12.2.1.15 (d60abd1)\r\nXamarin.iOS and Xamarin.Mac Reference Assemblies and MSBuild support.\r\n### Log File\r\n\r\n<!--\r\n1. On macOS and within Visual Studio:\r\n    a. Click **Tools** > **SDK Command Prompt**.\r\n    b. Within the launched `Terminal.app` window, run:\r\n\r\n            adb logcat -d | pbcopy\r\n\r\n2. Paste below this comment block\r\n-->\r\n\r\n\r\n\r\n<!--\r\nSwitch to the \"Preview\" tab to ensure your issue renders correctly.\r\n\r\nPlease add an appropriate \"Area:\" label in the Labels section.\r\n-->"},{"Id":"9344008556","Type":"PullRequestEvent","CreatedAt":"2019-03-29T21:08:42","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2897","RelatedDescription":"Merged pull request \"Bump to mono/mono/2018-10@2264e1b30cc\" (#2897) at xamarin/xamarin-android","RelatedBody":"Context: https://github.com/mono/mono/pull/13722\r\nChanges: https://github.com/mono/mono/compare/204d95cec15...2264e1b30cc\r\n\r\nFixes: https://github.com/mono/mono/issues/12307\r\nFixes: https://github.com/mono/mono/issues/12843\r\nFixes: https://github.com/mono/mono/issues/13610\r\n\r\nShould fix AOT failures on Windows, when the mono archive is used."},{"Id":"9343114346","Type":"PullRequestEvent","CreatedAt":"2019-03-29T18:26:47","Actor":"grendello","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2900","RelatedDescription":"Opened pull request \"Use correct `strip` path when building with mono archives\" (#2900) at xamarin/xamarin-android","RelatedBody":"Mono Android build still creates a standalone NDK toolchain as part of its\r\nprovisioning step and places it in `~/android-toolchain/toolchains` and its\r\nsubdirectories. Xamarin.Android then uses this location to find the `strip`\r\nutility which we call after the build is done. However, when Mono archives are\r\nused and the Mono build does *not* take place, the standalone toolchain is never\r\ncreated (as Xamarin.Android itself doesn't use it) and thus we fail to find the\r\nrequired `strip` binaries and the build fails\r\n\r\nThis commit fixes the problem by always using strip from the prebuilt toolchains\r\nas shipped with the NDK."},{"Id":"9342567162","Type":"PullRequestEvent","CreatedAt":"2019-03-29T17:02:35","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2881","RelatedDescription":"Merged pull request \"[Xamarin.Android.Build.Tasks] helpers for AsyncTask + TPL\" (#2881) at xamarin/xamarin-android","RelatedBody":"Unhandled exceptions from a `Parallel.ForEach` log an exception in\r\nMSBuild such as:\r\n\r\n    E:\\A\\_work\\1214\\s\\bin\\Release\\lib\\xamarin.android\\xbuild\\Xamarin\\Android\\Xamarin.Android.Aapt2.targets(84,3): One or more errors occurred.\r\n        at System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions)\r\n        at System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout, CancellationToken cancellationToken)\r\n        at System.Threading.Tasks.Task.Wait()\r\n        at System.Threading.Tasks.Parallel.ForWorker[TLocal](Int32 fromInclusive, Int32 toExclusive, ParallelOptions parallelOptions, Action`1 body, Action`2 bodyWithState, Func`4 bodyWithLocal, Func`1 localInit, Action`1 localFinally)\r\n        at System.Threading.Tasks.Parallel.ForEachWorker[TSource,TLocal](TSource[] array, ParallelOptions parallelOptions, Action`1 body, Action`2 bodyWithState, Action`3 bodyWithStateAndIndex, Func`4 bodyWithStateAndLocal, Func`5 bodyWithEverything, Func`1 localInit, Action`1 localFinally)\r\n        at System.Threading.Tasks.Parallel.ForEachWorker[TSource,TLocal](IEnumerable`1 source, ParallelOptions parallelOptions, Action`1 body, Action`2 bodyWithState, Action`3 bodyWithStateAndIndex, Func`4 bodyWithStateAndLocal, Func`5 bodyWithEverything, Func`1 localInit, Action`1 localFinally)\r\n        at System.Threading.Tasks.Parallel.ForEach[TSource](IEnumerable`1 source, ParallelOptions parallelOptions, Action`1 body)\r\n        at Xamarin.Android.Tasks.Aapt2Compile.DoExecute()\r\n        at Xamarin.Android.Tasks.Aapt2Compile.<Execute>b__15_0()\r\n        at System.Threading.Tasks.Task.InnerInvoke()\r\n        at System.Threading.Tasks.Task.Execute() [E:\\A\\_work\\1214\\s\\bin\\TestRelease\\temp\\BuildAMassiveApp\\App1\\App1.csproj]\r\n\r\n`One or more errors occurred` is not helpful, and it looks like this\r\ncould happen in several places throughout our MSBuild tasks. The only\r\nway to get a better error is to add a `try-catch` and manually log the\r\nexception.\r\n\r\nA couple extension methods can simplify where we use the PCL, and fix\r\nthis problem at the same time:\r\n\r\n* `Parallel.ForEach` -> `this.ParallelForEach()`:\r\n  * Can setup `ParallelOptions` & `CancellationToken`\r\n  * Adds a `try-catch` block that reports `XA0000` on unhandled\r\n    exceptions\r\n  * Calls `AsyncTask.Cancel()` if there is an exception\r\n* `this.ParallelForEachWithLock` passes an `object lockObject` to the\r\n  inner method for any needed locking.\r\n* `Task.Run` -> `this.RunTask()`\r\n  * Sets up the `CancellationToken`\r\n\r\nWith these extension methods we can also drop this `using` in several\r\nfiles:\r\n\r\n    using ThreadingTasks = System.Threading.Tasks;\r\n\r\nIt is a bit annoying to have to disambiguate an MSBuild task from a\r\nthreading task."},{"Id":"9342322837","Type":"PullRequestEvent","CreatedAt":"2019-03-29T16:27:05","Actor":"dellis1972","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2899","RelatedDescription":"Opened pull request \"[WIP] AndroidX SkipResources/Packaging etc.\" (#2899) at xamarin/xamarin-android","RelatedBody":"Context #2895"},{"Id":"9342183687","Type":"IssuesEvent","CreatedAt":"2019-03-29T16:07:21","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2898","RelatedDescription":"Opened issue \"[linker] does not currently link away Resource.designer.cs\" (#2898) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Build an app with the support libraries. This [Xamarin.Forms one](https://github.com/xamarin/xamarin-android/tree/master/tests/Xamarin.Forms-Performance-Integration) is fine.\r\n2. Notice how huge the `Resource.designer.cs` file is.\r\n3. Even when using `link all assemblies`, the `Resource` class doesn't get stripped down because of the way the fields are used.\r\n\r\nSome comments from @erikpowa https://github.com/xamarin/xamarin-android/issues/2836#issuecomment-477874589:\r\n\r\n> I haven't dived myself into the designtime resource-generator, but the only problem is the \"strong references\" to the fields. As I see as for solution:\r\nCurrently, library resource fields are required to be static, because UpdateIdValues() will change them when app starts (or atleast when the Resource class first accessed, which is also bad because of it uses reflection when \"we know the metadata at compile time\"). Foreg:\r\nglobal::CommonUI.Resource.Dimension.size200 = global::MainAssembly.Resource.Dimension.size200;\r\nthis is one line from UpdateIdValues() in MainAssembly\r\nwhere global::CommonUI.Resource.Dimension.size200 is static field from a library\r\nwhere global::MainAssembly.Resource.Dimension.size200 const field from the RootAssembly (having the final resourceId)\r\n\r\n> If the res designer already knows what resource will be set for which static field, then why isn't this knowledge/process moved out?\r\nLet's say global::MainAssembly.Resource.Dimension.size200 has value 2131099880.\r\n\"LinkAssemblies\" uses mono cecil anyway, it would be easier just modify the field's value in the libraries when the app compiles (we know the field, we know what value it's gonna get) Foreg: In CommonUI library, the global::CommonUI.Resource.Dimension.size200 will be set to 2131099880 in the UpdateIdValues(), but if we could make the global::CommonUI.Resource.Dimension.size200 a const field and modify the IL code to have a value with 2131099880 then all the problem will disappear... no longer strong reference to fields, no longer required to call UpdateIdValues(), no static constructor with trigger of UpdateIdValues, no reflection used and the linker will remove any unused const field(?).\r\n\r\n### Expected Behavior\r\n\r\n`Resource.designer.cs` can get smaller when `link all assemblies` is used.\r\n\r\n### Actual Behavior\r\n\r\n`Resource.designer.cs` contains a lot of unused IL. I did not measure the size, but since .NET assemblies are uncompressed in the APK it could be quite a bit if you an app that uses Google Play Services into account"},{"Id":"9342095142","Type":"PullRequestEvent","CreatedAt":"2019-03-29T15:55:39","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2897","RelatedDescription":"Opened pull request \"Bump to mono/mono/2018-10@2264e1b30cc\" (#2897) at xamarin/xamarin-android","RelatedBody":"Changes: https://github.com/mono/mono/compare/204d95cec15...2264e1b30cc\r\n\r\nFixes: https://github.com/mono/mono/issues/12307\r\nFixes: https://github.com/mono/mono/issues/12843\r\nFixes: https://github.com/mono/mono/issues/13610\r\n\r\nShould fix AOT failures on Windows, when the mono archive is used."},{"Id":"9341973922","Type":"PullRequestEvent","CreatedAt":"2019-03-29T15:40:14","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2896","RelatedDescription":"Opened pull request \"[Xamarin.Android.Build.Tasks] generate R.java like Android Studio\" (#2896) at xamarin/xamarin-android","RelatedBody":"Context: https://android.googlesource.com/platform/tools/base/+/refs/heads/master/build-system/builder/\r\nFixes: https://github.com/xamarin/xamarin-android/issues/2680\r\nFixes: https://github.com/xamarin/xamarin-android/issues/2836\r\n\r\nThe current behavior in the `_GenerateJavaDesignerForComponent`\r\nMSBuild target does the following:\r\n\r\n* For each library that has Android resources... (in parallel)\r\n* Run an instance of aapt/aapt2 to generate the `R.java` file for each\r\n  library.\r\n* This actually creates an `R.java` file that contains *every*\r\n  resource id for *every* library. These libraries are not using most\r\n  of these ids.\r\n\r\nThis has a few problems:\r\n\r\n* #2680 notes a problem where a file is locked on Windows during\r\n  `_GenerateJavaDesignerForComponent`.\r\n```\r\n    Xamarin.Android.Common.targets(1541,2): The process cannot access the file 'C:\\repos\\msalnet\\tests\\devapps\\XForms\\XForms.Android\\obj\\Debug\\90\\lp\\26\\jl\\manifest\\AndroidManifest.xml' because it is being used by another process.\r\n        at System.IO.__Error.WinIOError(Int32 errorCode, String maybeFullPath)\r\n        at System.IO.FileStream.Init(String path, FileMode mode, FileAccess access, Int32 rights, Boolean useRights, FileShare share, Int32 bufferSize, FileOptions options, SECURITY_ATTRIBUTES secAttrs, String msgPath, Boolean bFromProxy, Boolean useLongPath, Boolean checkHost)\r\n        at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options, String msgPath, Boolean bFromProxy, Boolean useLongPath, Boolean checkHost)\r\n        at System.IO.StreamWriter.CreateFile(String path, Boolean append, Boolean checkHost)\r\n        at System.IO.StreamWriter..ctor(String path, Boolean append, Encoding encoding, Int32 bufferSize, Boolean checkHost)\r\n        at System.IO.StreamWriter..ctor(String path, Boolean append, Encoding encoding)\r\n        at Xamarin.Android.Tasks.ManifestDocument.Save(String filename)\r\n        at Xamarin.Android.Tasks.Aapt.GenerateCommandLineCommands(String ManifestFile, String currentAbi, String currentResourceOutputFile)\r\n        at Xamarin.Android.Tasks.Aapt.ProcessManifest(ITaskItem manifestFile)\r\n        at System.Threading.Tasks.Parallel.<>c__DisplayClass30_0`2.<ForEachWorker>b__0(Int32 i)\r\n        at System.Threading.Tasks.Parallel.<>c__DisplayClass17_0`1.<ForWorker>b__1()\r\n        at System.Threading.Tasks.Task.InnerInvoke()\r\n        at System.Threading.Tasks.Task.InnerInvokeWithArg(Task childTask)\r\n        at System.Threading.Tasks.Task.<>c__DisplayClass176_0.<ExecuteSelfReplicating>b__0(Object ) [C:\\repos\\msalnet\\tests\\devapps\\XForms\\XForms.Android\\XForms.Android.csproj]\r\n```\r\n* We are hugely contributing to the dex limit for fields. Apps contain\r\n  exponentially more fields for each library with resources.\r\n\r\nAn example from @PureWeen:\r\n\r\n    1>  trouble writing output: Too many field references to fit in one dex file: 70468; max is 65536.\r\n\r\n* Quite a few instances of aapt/aapt2 startup on developer's machines:\r\n  this pegs the CPU. We have had a few general complaints about it.\r\n\r\nReviewing the source code for the Android gradle plugin, here is what\r\nthey do:\r\n\r\n* Build the main app's \"full\" `R.txt` file.\r\n* For each library, load its `R.txt` file.\r\n* Map each resource in the library's `R.txt` back to the main app\r\n* Write a small `R.java` file for each library: containing *only* the\r\n  lines from the `R.txt` and updated integer values from the main app\r\n  `R.txt` file.\r\n\r\nLooking into this, we can do the exact same thing? We have the `R.txt`\r\nfile one directory above where we extract resources for each library.\r\nWe already had code parsing `R.txt` files I could repurpose, the only\r\nthing *new* is a `R.java` writer: a pretty simple port from java.\r\n\r\nThe results are great!\r\n\r\n    Before:\r\n    3173 ms  _GenerateJavaDesignerForComponentAapt2     1 calls\r\n    After:\r\n      20 ms  GenerateLibraryResources                   1 calls\r\n\r\n`_GenerateJavaDesignerForComponent` is now completely gone. This is a\r\ntotal savings of ~3 seconds on first build and incremental builds\r\nwith library changes.\r\n\r\nTo compare APKs, I used:\r\n\r\n    $ ~/android-toolchain/sdk/tools/bin/apkanalyzer dex packages Xamarin.Forms_Performance_Integration-Before.apk | grep ^F\r\n\r\nWhich omits a line for each field such as:\r\n\r\n    F d 0\t0\t16\txamarin.forms_performance_integration.R$color int abc_background_cache_hint_selector_material_dark\r\n\r\nSo then, before these changes:\r\n\r\n    $ ~/android-toolchain/sdk/tools/bin/apkanalyzer dex packages Xamarin.Forms_Performance_Integration-Before.apk | grep ^F | wc -l\r\n    29681\r\n\r\nAfter:\r\n\r\n    $ ~/android-toolchain/sdk/tools/bin/apkanalyzer dex packages Xamarin.Forms_Performance_Integration-After.apk | grep ^F | wc -l\r\n    17210\r\n\r\n12K less fields in a \"Hello World\" Xamarin.Forms app!\r\n\r\nComparing file sizes seems good, too:\r\n\r\n    $ zipinfo Xamarin.Forms_Performance_Integration-Before.apk | grep classes.dex\r\n    -rw-rw-r--  6.3 unx  3657872 b- defX 19-Mar-28 16:37 classes.dex\r\n    $ zipinfo Xamarin.Forms_Performance_Integration-After.apk | grep classes.dex\r\n    -rw-rw-r--  6.3 unx  3533120 b- defX 19-Mar-28 16:20 classes.dex\r\n\r\nDex file in the APK is ~120KB smaller."},{"Id":"9340541730","Type":"PullRequestEvent","CreatedAt":"2019-03-29T12:22:41","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2882","RelatedDescription":"Merged pull request \"[Xamarin.Android.Build.Tasks] Check a jar has .class files in it.\" (#2882) at xamarin/xamarin-android","RelatedBody":"We have found an issue with our fastdev support when\r\nit comes across a `.jar` file which does NOT contain\r\nany `.class` files.\r\n\r\nAs part of our fastdev system we convert all the\r\n`.jar` files we need to `.dex` files so they\r\ncan be fast deployed.\r\n\r\nIf we come across a `.jar` file which does not\r\ncontain any `.class` files `dx` exists with the\r\nfollowing error\r\n\r\n\tno classes!\r\n\r\nThis causes the build to fail. So what we need to do\r\nis check that a `.jar` has `.class` files in it.\r\nThis commit also reworks some code to not use Linq\r\nin favour of a standard foreach loop."}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"9344921944","Type":"IssuesEvent","CreatedAt":"2019-03-30T02:12:57","Actor":"kingces95","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/5565","RelatedDescription":"Closed issue \"Navigation to the page with ScrollView\" (#5565) at xamarin/Xamarin.Forms","RelatedBody":"**Description**\r\n\r\nI am using XF 3.6 last version with PRISM framework, when navigate to the page with ScrollView, StackLayout and Label, in the console I get this message: \r\n\r\n```\r\n03-14 13:33:12.123 W/View    (12512): requestLayout() improperly called by md51558244f76c53b6aeda52c8a337f2c37.ScrollViewContainer{b3f8940 V.E...... ......ID 0,0-768,1024} during layout: running second layout pass\r\n03-14 13:33:12.267 W/View    (12512): requestLayout() improperly called by md58432a647068b097f9637064b8985a5e0.NavigationPageRenderer{b8f74ef V.E...... ......ID 0,0-768,1136 #18} during second layout pass: posting in next frame\r\n```\r\nWhen I remove the ScrollView, the message not show.\r\n\r\n**Basic Information**\r\nVersion with issue: 3.6.0.220655\r\nIDE: VS2017\r\nPlatform Target Frameworks:\r\nAndroid: 9.0"},{"Id":"9344877529","Type":"PullRequestEvent","CreatedAt":"2019-03-30T01:47:39","Actor":"hartez","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/5759","RelatedDescription":"Closed pull request \"[Android] Make type for SetElevation explicit\" (#5759) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\n`SetElevation` helper method on Android relies on covariance in `IElementConfiguration<T>`, which was removed for performance reasons. Because of the change, `SetElevation` was no longer actually setting the `Elevation` property on Android.\r\n\r\nThis change makes `SetElevation` use a specific `VisualElement` type so that `Elevation` is correctly set.\r\n\r\n### API Changes ###\r\n \r\n None\r\n\r\n### Platforms Affected ### \r\n\r\n- Android\r\n\r\n### Behavioral/Visual Changes ###\r\n\r\nNone\r\n\r\n### Before/After Screenshots ### \r\n\r\nNot applicable\r\n\r\n### PR Checklist ###\r\n\r\n- [x] Has automated tests \r\n- [x] Rebased on top of the target branch at time of PR\r\n- [x] Changes adhere to coding standard\r\n"},{"Id":"9344847144","Type":"IssuesEvent","CreatedAt":"2019-03-30T01:30:43","Actor":"kingces95","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/5708","RelatedDescription":"Closed issue \"OnIdiom returns Phone instead of Tablet on Android 9 tablet (x86)\" (#5708) at xamarin/Xamarin.Forms","RelatedBody":"<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\n### Description\r\n\r\nWhen I use OnIdiom to detect Tablet from Phone I get an unexpected behavior on Android tablet. It gets detected as Phone:\r\n\r\n### Steps to Reproduce\r\n\r\nInser this code in XAML page:\r\n\r\n```\r\n<Label>\r\n    <Label.Text>\r\n        <OnIdiom x:TypeArguments=\"x:String\">\r\n            <OnIdiom.Phone>Hello from a phone app</OnIdiom.Phone>\r\n            <OnIdiom.Tablet>Hello from a tablet app</OnIdiom.Tablet>\r\n            <OnIdiom.Desktop>Hello from a desktop app</OnIdiom.Desktop>\r\n          </OnIdiom>\r\n    </Label.Text>\r\n</Label>\r\n```\r\n\r\n### Expected Behavior\r\n\r\nI see \"Hello from a tablet app\"\r\n\r\n### Actual Behavior\r\n\r\nI see \"Hello from a phone app\"\r\n\r\n![image](https://user-images.githubusercontent.com/8274816/55076105-dcb8ef00-5094-11e9-8538-e4b8eae99012.png)\r\n\r\n### Basic Information\r\n\r\n- Version with issue: 3.6.0.264807 (3.6.0 Service Release 1)\r\n- Last known good version: n/a\r\n- IDE: VS2017 15.9.10\r\n- Platform Target Frameworks: <!-- All that apply -->\r\n  - iOS:  n/a\r\n  - Android: 8.1\r\n  - UWP:  n/a\r\n- Android Support Library Version: 4.28.0.0.1\r\n- Nuget Packages: 3.6.0.264807 \r\n- Affected Devices: Toshiba Encore 8 (8\" Intel Baytrail Tablet sold with Windows 8.1, upgraded to Windows 10 and dual booted Android 9 x86 Pie (Bliss x86, Patch Level 2019-03-05)\r\n\r\n### Screenshots\r\n\r\n![image](https://user-images.githubusercontent.com/8274816/55076323-6963ad00-5095-11e9-8968-e2a57de36a8e.png)\r\n\r\n\r\n### Reproduction Link\r\n\r\n\r\nadd XAML code from above to a new project and run app on Android Tablet."}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"9344319584","Type":"PullRequestEvent","CreatedAt":"2019-03-29T22:17:28","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5823","RelatedDescription":"Opened pull request \"[linker] Teach linker to accept old (before optimization) bindings      Existing binding binaries won't have the `[Preserve]` attribute on the `Handler` field and, with the new optimization, would not work properly.      This tweak make sure that older, already linker-safe, bindings will remain this way (safe) in this (and future) versions of both iOS and macOS SDK.\" (#5823) at xamarin/xamarin-macios","RelatedBody":""},{"Id":"9343753294","Type":"PullRequestEvent","CreatedAt":"2019-03-29T20:20:45","Actor":"VincentDondain","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5822","RelatedDescription":"Opened pull request \"Merge `xcode10.2` into `d16-0`\" (#5822) at xamarin/xamarin-macios","RelatedBody":""},{"Id":"9343719562","Type":"IssuesEvent","CreatedAt":"2019-03-29T20:14:29","Actor":"jwholme2","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/5810","RelatedDescription":"Closed issue \"Sporadic build failures caused by native linking error\" (#5810) at xamarin/xamarin-macios","RelatedBody":"<!-- 🚨 STOP 🚨 𝗦𝗧𝗢𝗣 🚨 𝑺𝑻𝑶𝑷 🚨 -->\r\n\r\n<!--\r\nPlease fill in the *entire* template below.\r\nThe template is designed to avoid unnecessary delays to confirm and fix reported issues. Issues with missing information generally end up with a `need-info` label and take significantly more time to fix. Please help us help you!\r\nFor more information see https://github.com/xamarin/xamarin-macios/wiki/Submitting-Bugs-&-Suggestions\r\nFor support requests use https://www.xamarin.com/support\r\n-->\r\n### Steps to Reproduce\r\nMy iOS builds in AppCenter fail if\r\n1. Xamarin iOS 12.2 and Mono 5.16 is selected\r\n\r\nThe builds _did_ work for a few days if I select Mono 5.12, but now they are failing again. It's always a native linker issue. \r\n\r\n### Expected Behavior\r\niOS builds work.\r\n### Actual Behavior\r\niOS builds fail.\r\n### Environment\r\nAppCenter builds.\r\n<!--\r\n1.\r\nVisual Studio: Help > About Microsoft Visual Studio > Copy Info [button]\r\nVisual Studio for Mac: Visual Studio > About Visual Studio > Show Details > Copy Information [button]\r\n2. Paste into the code block below (between ```)\r\n-->\r\n\r\n```\r\n```\r\n\r\n### Build Logs\r\n\r\n<!--\r\n1. Place cursor below this comment block.\r\n2. Attach build log or link to gist (https://gist.github.com/) of the log.\r\n-->\r\nhttps://gist.github.com/jwholme2/af89f2979e45289f2d0fa7b034e68050\r\n\r\n### Example Project (If Possible)\r\n\r\n<!--\r\n1. Place cursor below this comment block.\r\n2. Drag and drop the compressed project or files needed to reproduce.\r\n-->\r\n\r\n<!--\r\nSwitch to the \"Preview\" tab to ensure your issue renders correctly.\r\n-->\r\n"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1111358962681765893","CreatedAt":"2019-03-28T20:06:39+00:00","UserScreenname":"xamarinhq","Text":"Unlock the power of Glide with “GlideX”: a simple library to swap-in Glide’s image loading implementation in-place… https://t.co/bAk49l9er6","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":42,"FavoriteCount":24,"RawContent":null},{"Id":"1111318034789158912","CreatedAt":"2019-03-28T17:24:01+00:00","UserScreenname":"xamarinhq","Text":"How are we doing? The #Xamarin March survey is now ready for your feedback: https://t.co/yfktVy49Pl \nIt's only avai… https://t.co/gX2uC9QShF","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":50,"FavoriteCount":36,"RawContent":null},{"Id":"1110599405390962693","CreatedAt":"2019-03-26T17:48:26+00:00","UserScreenname":"xamarinhq","Text":"Interpret some of the #CSharp in your application while compiling the rest ahead of time as usual.\n\nCool.... Introd… https://t.co/vkhDptAeTr","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":92,"FavoriteCount":43,"RawContent":null},{"Id":"1109140611515498502","CreatedAt":"2019-03-22T17:11:43+00:00","UserScreenname":"xamarinhq","Text":"https://t.co/GFuU36E9x5 - Let's walk through a basic building block of #Xamarin.Forms. In the latest episode of Xam… https://t.co/qczJXvqcNK","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":63,"FavoriteCount":27,"RawContent":null},{"Id":"1108410911151345664","CreatedAt":"2019-03-20T16:52:09+00:00","UserScreenname":"xamarinhq","Text":"We're ready for testing &amp; app submission. The latest #Xamarin .iOS SDKs shipping with #VS2019 and #VS4Mac 8.0, are… https://t.co/KC1Gih3MFF","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":56,"FavoriteCount":25,"RawContent":null},{"Id":"1107723971531862017","CreatedAt":"2019-03-18T19:22:29+00:00","UserScreenname":"xamarinhq","Text":"We have received some great pull requests to add some new features and that have gone into the newest release. Now… https://t.co/EqNQUDloOm","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":117,"FavoriteCount":47,"RawContent":null},{"Id":"1106650380182659080","CreatedAt":"2019-03-15T20:16:25+00:00","UserScreenname":"xamarinhq","Text":"Introducing the New Xamarin Customer Showcase\n\nHighlighting the amazing work developers are doing for all sorts of… https://t.co/yQbcA4cYc6","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":94,"FavoriteCount":42,"RawContent":null},{"Id":"1106576630884065280","CreatedAt":"2019-03-15T15:23:22+00:00","UserScreenname":"xamarinhq","Text":"This week on the #XamarinShow, @JamesMontemagno &amp; @JonathanPeppers show us how to optimize image loading for Androi… https://t.co/FkiznwhBep","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":73,"FavoriteCount":17,"RawContent":null},{"Id":"1105942645308678144","CreatedAt":"2019-03-13T21:24:08+00:00","UserScreenname":"xamarinhq","Text":"There have been some drastic changes across key libraries for Google Play Services &amp; Android Support. Let's get a q… https://t.co/heywxPz0Qs","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":39,"FavoriteCount":25,"RawContent":null},{"Id":"1105573743986917377","CreatedAt":"2019-03-12T20:58:15+00:00","UserScreenname":"xamarinhq","Text":"#MFractor is a powerful #VS4Mac extension to streamline Xamarin app dev so you can save significant time &amp; effort o… https://t.co/pEwcgwzd3t","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":44,"FavoriteCount":22,"RawContent":null},{"Id":"1105491570583851008","CreatedAt":"2019-03-12T15:31:44+00:00","UserScreenname":"xamarinhq","Text":".@codemillmatt &amp; @JamesMontemagno talk about a ton of newness out there for all mobile devs including a hot new… https://t.co/05m3VTmUBe","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":62,"FavoriteCount":24,"RawContent":null},{"Id":"1103762250509283332","CreatedAt":"2019-03-07T21:00:02+00:00","UserScreenname":"xamarinhq","Text":"Introducing Material Design; a suite of cross-platform components in the #Xamarin.Forms 3.6 Visual feature that boo… https://t.co/gin9lpb0eQ","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":150,"FavoriteCount":70,"RawContent":null},{"Id":"1103750171215699968","CreatedAt":"2019-03-07T20:12:02+00:00","UserScreenname":"xamarinhq","Text":"Level up your mobile development skills at #MSBuild, May 6-8, 2019 in Seattle. Registration is now open!… https://t.co/EZNWhIn3p6","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":40,"FavoriteCount":9,"RawContent":null},{"Id":"1103709031066189825","CreatedAt":"2019-03-07T17:28:33+00:00","UserScreenname":"xamarinhq","Text":"Happening right now! Join the Mobile #dotNET Teams for our community stand-up covering great community contribution… https://t.co/9HUp86ZqBU","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":30,"FavoriteCount":16,"RawContent":null},{"Id":"1103701857682231296","CreatedAt":"2019-03-07T17:00:03+00:00","UserScreenname":"xamarinhq","Text":"On this week's Essential API of the week we take a look at Accelerometer, which enables you monitor the device's ac… https://t.co/UxhHHar5zN","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":56,"FavoriteCount":18,"RawContent":null},{"Id":"1103399934966067200","CreatedAt":"2019-03-06T21:00:19+00:00","UserScreenname":"xamarinhq","Text":"Announcing Xamarin.Forms 3.6:\n- we've made enhancements, cleaned up some bugs, AND, we've moved our Visual feature… https://t.co/fG4RqX25PH","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":262,"FavoriteCount":130,"RawContent":null},{"Id":"1102666586194931713","CreatedAt":"2019-03-04T20:26:15+00:00","UserScreenname":"xamarinhq","Text":"Sweeky Satpathy (from the Mobile Customer Advisory Team) shares some best practices &amp; tips/tricks the team uses to… https://t.co/GSrw6zLTHZ","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":58,"FavoriteCount":19,"RawContent":null},{"Id":"1101572485114462220","CreatedAt":"2019-03-01T19:58:41+00:00","UserScreenname":"xamarinhq","Text":"Developer Community User Groups are gathering to learn about new, exciting releases and tooling to help jumpstart t… https://t.co/GgCWj5LttS","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":49,"FavoriteCount":23,"RawContent":null},{"Id":"1101202237752258564","CreatedAt":"2019-02-28T19:27:27+00:00","UserScreenname":"xamarinhq","Text":"Want to display PDF docs w/i your #Xamarin apps? Now you can. Learn to view PDF files within your Xamarin.Forms app… https://t.co/GjuKzrvNYM","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":99,"FavoriteCount":30,"RawContent":null}]}},"RunOn":"2019-03-30T05:30:50.1393579Z","RunDurationInMilliseconds":2621}