{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing ML.NET 0.3","PublishedOn":"2018-07-09T18:30:19+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Two months ago, at //Build 2018, we released ML.NET 0.1, a cross-platform, open source machine learning framework for .NET developers. We’ve gotten great feedback so far and would like to thank the...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/07/09/announcing-ml-net-0-3/","RawContent":null},{"Title":"System.IO.Pipelines: High performance IO in .NET","PublishedOn":"2018-07-09T16:02:10+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"System.IO.Pipelines is a new library that is designed to make it easier to do high performance IO in .NET. It&#8217;s a library targeting .NET Standard that works on all .NET implementations....","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/07/09/system-io-pipelines-high-performance-io-in-net/","RawContent":null},{"Title":".NET Core 2.1 June Update","PublishedOn":"2018-06-22T21:08:25+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"We released .NET Core 2.1.1. This update includes .NET Core SDK 2.1.301, ASP.NET Core 2.1.1 and .NET Core 2.1.1. See .NET Core 2.1.1 release notes for complete details on the release. Quality Updates...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/22/net-core-2-1-june-update/","RawContent":null},{"Title":".NET Core 2.0 will reach End of Life on October 1, 2018","PublishedOn":"2018-06-20T19:12:38+00:00","CommentsCount":12,"FacebookCount":0,"Summary":"Last Updated: 6/22/2018 .NET Core 2.0 was released on August 14, 2017. As a non-LTS release, it is supported for 3 months after the next release. .NET Core 2.1 was released on May 30th, 2018. As a...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/","RawContent":null},{"Title":"The RyuJIT transition is complete!","PublishedOn":"2018-06-19T22:53:27+00:00","CommentsCount":34,"FacebookCount":0,"Summary":"RyuJIT is the code name for the .NET just-in-time compiler, one of the foundational components of the .NET runtime. In contrast, the Roslyn C# compiler compiles C# code to IL byte code. The RyuJIT...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/19/the-ryujit-transition-is-complete/","RawContent":null},{"Title":"Staying up-to-date with .NET Container Images","PublishedOn":"2018-06-18T18:59:03+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"This post describes the container images that we produce and update for you, that you can use with Docker, Kubernetes and other systems. When you are using .NET and Docker together, you are probably...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/18/staying-up-to-date-with-net-container-images/","RawContent":null},{"Title":"Using .NET and Docker Together – DockerCon 2018 Update","PublishedOn":"2018-06-14T00:15:31+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"I posted about Using .NET and Docker Together last year. With DockerCon 2018 being this week, it seemed like a great time to give you an update.  Since my last post, we&#8217;ve enabled a set of...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/13/using-net-and-docker-together-dockercon-2018-update/","RawContent":null},{"Title":".NET Framework June 2018 Security and Quality Rollup","PublishedOn":"2018-06-13T19:29:27+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the June 2018 Security and Quality Rollup. Security No new security fixes. See .NET Framework May 2018 Security and Quality Rollup for the latest security updates. Quality and...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/13/net-framework-june-2018-security-and-quality-rollup/","RawContent":null},{"Title":"Announcing .NET Framework 4.8 Early Access build 3621!","PublishedOn":"2018-06-06T21:19:43+00:00","CommentsCount":39,"FacebookCount":0,"Summary":"Today, we are happy to share the .NET Framework 4.8 Early Access build 3621 for your feedback. This is one of the in-development builds of the next version of the .NET Framework. The changes in this...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/06/announcing-net-framework-4-8-early-access-build-3621/","RawContent":null},{"Title":"Announcing ML.NET 0.2","PublishedOn":"2018-06-06T04:36:25+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"Last month at //Build 2018, we released ML.NET 0.1, a cross-platform, open source machine learning framework. We would like to thank the community for the engagement so far in helping us shape ML.NET....","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/05/announcing-ml-net-0-2/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7939112505","Type":"PullRequestEvent","CreatedAt":"2018-07-09T17:43:55","Actor":"slide","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/105","RelatedDescription":"Opened pull request \"Add DLR/IronPython2/IronPython3\" (#105) at dotnet/home","RelatedBody":"Add DLR/IronPython2/IronPython3 to project list."},{"Id":"7896820874","Type":"IssuesEvent","CreatedAt":"2018-06-29T09:52:53","Actor":"tomkerkhove","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/104","RelatedDescription":"Opened issue \"About still mentions CodePlex\" (#104) at dotnet/home","RelatedBody":"About still mentions CodePlex which is now in archive mode.\r\n\r\n![image](https://user-images.githubusercontent.com/4345663/42086259-e0b7d008-7b92-11e8-96c9-02ee61ddc457.png)\r\n\r\nIs this something that I can PR?"},{"Id":"7724991049","Type":"PullRequestEvent","CreatedAt":"2018-05-24T16:33:10","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/103","RelatedDescription":"Merged pull request \"Add ML.NET to readme\" (#103) at dotnet/home","RelatedBody":"cc @shauheen @jongalloway "},{"Id":"7724874671","Type":"PullRequestEvent","CreatedAt":"2018-05-24T16:12:32","Actor":"danmosemsft","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/103","RelatedDescription":"Opened pull request \"Add ML.NET to readme\" (#103) at dotnet/home","RelatedBody":"cc @shauheen @jongalloway "},{"Id":"7697543163","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:10:28","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/91","RelatedDescription":"Merged pull request \"Add NUnit to the .NET Foundation Projects\" (#91) at dotnet/home","RelatedBody":""},{"Id":"7697541521","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:10:06","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/92","RelatedDescription":"Merged pull request \"Remove contact email from system.drawing.md\" (#92) at dotnet/home","RelatedBody":"Contact email is outdated. Mono-project site's community section has better, more up-to-date information."},{"Id":"7697539314","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:09:35","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/93","RelatedDescription":"Merged pull request \"Add Humanizer\" (#93) at dotnet/home","RelatedBody":"Onboarding Humanizer: https://github.com/Humanizr/Humanizer/issues/682"},{"Id":"7697528376","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:07:09","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/94","RelatedDescription":"Merged pull request \"add SourceLink\" (#94) at dotnet/home","RelatedBody":"Adding SourceLink to the project list as per the checklist https://github.com/ctaggart/SourceLink/issues/138"},{"Id":"7697526900","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:06:48","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/95","RelatedDescription":"Merged pull request \"Fix broken logo URL\" (#95) at dotnet/home","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7780591341","Type":"IssuesEvent","CreatedAt":"2018-06-05T20:33:11","Actor":"huanwu","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/72","RelatedDescription":"Opened issue \"Introducing dotnet-svcutil.xmlserializer for .NET Core\" (#72) at dotnet/announcements","RelatedBody":"# Introducing dotnet-svcutil.xmlserializer for .NET Core\r\nOn the full .NET Framework you are able to pre-generate a serialization assembly using the tool svcutil. We are providing similar functionality on .NET Core by releasing the dotnet-svcutil.xmlserializer NuGet package. It pre-generates c# serialization code for the types used by WCF Service Contract in the client applications that can be serialized using the XmlSerializer to improve the startup performance of Xml Serialization when serializing or de-serializing objects of those types using XmlSerializer. \r\nYou can start using the tool today by following the instructions. \r\n## Discussion \r\nPlease share with us any thoughts of questions that you may have at: \r\n\r\n- dotnet/wcf [#2927](https://github.com/dotnet/wcf/issues/2927)\r\n## Details \r\nWhen to use XmlSerializer with WCF in an app to serialize contract data types, it will generate an XmlSerializer during runtime to do the serialization. You can improve the startup performance of Xml serialization by simply adding the reference of dotnet-svcutil.xmlserializer NuGet package to your project. This tool will generate the serialization code and compile it into an assembly next to your output assembly at build time in advance. This assembly can then be deployed and ran with your application. \r\n\r\nPlease create an issue with your feedback at [dotnet/wcf](https://github.com/dotnet/wcf/issues). We are actively looking to improve the tool and your input is a valuable part of the process. "}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7941455133","Type":"PullRequestEvent","CreatedAt":"2018-07-10T04:46:59","Actor":"tannergooding","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/18849","RelatedDescription":"Opened pull request \"Fixing encodeXmmRegAsIval to ensure the result meets the \"fits in imm8\" check\" (#18849) at dotnet/coreclr","RelatedBody":"FYI. @CarolEidt, @fiigii, @eerhardt\r\n\r\nThis resolves #18815"},{"Id":"7941450354","Type":"PullRequestEvent","CreatedAt":"2018-07-10T04:44:58","Actor":"tannergooding","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/pull/18820","RelatedDescription":"Closed pull request \"Fixing encodeXmmRegAsIval to ensure the result meets the \"fits in imm8\" check\" (#18820) at dotnet/coreclr","RelatedBody":"FYI. @CarolEidt, @fiigii, @eerhardt \r\n\r\nThis resolves https://github.com/dotnet/coreclr/issues/18815"},{"Id":"7941403465","Type":"PullRequestEvent","CreatedAt":"2018-07-10T04:25:37","Actor":"tgiphil","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/18848","RelatedDescription":"Opened pull request \"Corrected a few typos in the documentation and comments\" (#18848) at dotnet/coreclr","RelatedBody":""},{"Id":"7941317337","Type":"IssuesEvent","CreatedAt":"2018-07-10T03:49:32","Actor":"jinhduong","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/18847","RelatedDescription":"Opened issue \"Failed to initialize CoreCLR, HRESULT: 0x80131500 (Ubuntu 18.04)\" (#18847) at dotnet/coreclr","RelatedBody":"Error: `Failed to initialize CoreCLR, HRESULT: 0x80131500`\r\nI have a project which using `dotnet 1.1.2` and it works in `Window` well but when I move the environment to Ubuntu and then install the latest version `2.1.301`.\r\n\r\nAfter that once I create new project like as `dotnet new webapi` and then use `dotnet run`, it works well. But when I run the old project (`1.1.2`) it always throw the above `error`\r\n\r\nHere is my logfile `strace`\r\n[logfile.txt](https://github.com/dotnet/coreclr/files/2178758/logfile.txt)\r\n\r\nThanks.\r\n\r\n# OS\r\nNo LSB modules are available.\r\nDistributor ID:\tUbuntu\r\nDescription:\tUbuntu 18.04 LTS\r\nRelease:\t18.04\r\nCodename:\tbionic\r\n"},{"Id":"7941313305","Type":"IssuesEvent","CreatedAt":"2018-07-10T03:47:55","Actor":"M144-Coder","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/18846","RelatedDescription":"Opened issue \"An assembly specified in the application dependencies manifest (Example.deps.json) was not found\" (#18846) at dotnet/coreclr","RelatedBody":"I am developing a web application using Asp.NET Core 2.1 on Visual Studio 17.7, the problem is when I publish the web app as a Framework-Dependent and I try to run the app on production machine I get this error message:\r\n\r\n`Error:\r\nAn assembly specified in the application dependencies manifest (Example.deps.json) was not found:\r\npackage: 'Cronos', version: '0.6.3'\r\npath: 'lib/netstandard1.0/Cronos.dll'`\r\n\r\nCronos.dll is a dependency of Hangfire library which I am using in the web app, in the Example.deps.json file I found this:\r\n\r\n`\"Cronos/0.6.3\": {\r\n    \"dependencies\": {\r\n      \"NETStandard.Library\": \"2.0.3\"\r\n    },\r\n    \"runtime\": {\r\n      \"lib/netstandard1.0/Cronos.dll\": {\r\n        \"assemblyVersion\": \"0.6.3.0\",\r\n        \"fileVersion\": \"0.6.3.0\"\r\n      }\r\n    },\r\n    \"compile\": {\r\n      \"lib/netstandard1.0/Cronos.dll\": {}\r\n    }\r\n  },`\r\n\r\nThe problem is that it's referencing the libraries in the runtime store, which will work on the developemnt machine but when I deploy to another machine the error happens.\r\n\r\nI have tried the suggested solution in this article:\r\n\r\nhttps://docs.microsoft.com/en-us/dotnet/core/deploying/runtime-store\r\n\r\nBy setting:-\r\n\r\n`<PropertyGroup>\r\n    <PublishWithAspNetCoreTargetManifest>false</PublishWithAspNetCoreTargetManifest>\r\n</PropertyGroup>`\r\n\r\nand I have also tried solutions in this github issue with no success:\r\n\r\nhttps://github.com/dotnet/coreclr/issues/13542"},{"Id":"7941064137","Type":"PullRequestEvent","CreatedAt":"2018-07-10T02:14:16","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/18845","RelatedDescription":"Opened pull request \"Move BinaryReader to shared CoreLib partition\" (#18845) at dotnet/coreclr","RelatedBody":""}],"ResultType":"GitHubEvent"},"CLI":{"Events":[],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7938907741","Type":"IssuesEvent","CreatedAt":"2018-07-09T17:02:13","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/786","RelatedDescription":"Closed issue \"[Question] Using UWP APIs from .NET Standard\" (#786) at dotnet/standard","RelatedBody":"I have a PCL targeting .NET Framework 4.6 & UWP 10.0.10240 that I'm trying to convert to .NET Standard. It is actually used to share code that uses some UWP APIs that are available on desktop as well. I currently have these references in the project file:\r\n\r\n```xml\r\n<Reference Include=\"System.Runtime.WindowsRuntime\">\r\n  <HintPath>$(MSBuildProgramFiles32)\\Reference Assemblies\\Microsoft\\Framework\\.NETCore\\v4.5\\System.Runtime.WindowsRuntime.dll</HintPath>\r\n</Reference>\r\n<Reference Include=\"Windows\">\r\n  <HintPath>$(MSBuildProgramFiles32)\\Windows Kits\\10\\UnionMetadata\\Windows.winmd</HintPath>\r\n</Reference>\r\n```\r\n\r\nBased on the target frameworks, I figured that my desired version of .NET Standard would be 1.3. However I'm getting compilation errors about missing mscorlib whenever I use any of the UWP APIs.\r\n\r\nThis is the new csproj:\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netstandard1.3</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <Reference Include=\"System.Runtime.WindowsRuntime\">\r\n      <HintPath>$(MSBuildProgramFiles32)\\Reference Assemblies\\Microsoft\\Framework\\.NETCore\\v4.5\\System.Runtime.WindowsRuntime.dll</HintPath>\r\n    </Reference>\r\n    <Reference Include=\"Windows\">\r\n      <HintPath>$(MSBuildProgramFiles32)\\Windows Kits\\10\\UnionMetadata\\Windows.winmd</HintPath>\r\n    </Reference>\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nand a small example:\r\n```c#\r\nusing Windows.Storage;\r\n\r\nclass C\r\n{\r\n    void M()\r\n    {\r\n        var folder = KnownFolders.PicturesLibrary; // error CS0012: The type 'Object' is defined in an assembly that is not referenced. You must add a reference to assembly 'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.\r\n    }\r\n}\r\n```\r\n\r\nI noticed that if I target `netstandard2.0` instead, the compilation succeeds. But since I'm trying to target all versions of UWP, I can't afford that. Is it impossible to use these APIs from 1.3? Are PCLs the only option? Thank you (Sorry if this is not the appropriate repo)"},{"Id":"7936811887","Type":"IssuesEvent","CreatedAt":"2018-07-09T10:39:53","Actor":"stijnherreman","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/795","RelatedDescription":"Opened issue \"It's not possible to make a .NET Standard project depend on a .NET Framework project, to ensure build order\" (#795) at dotnet/standard","RelatedBody":"I have a .NET Standard project that needs to depend on a .NET Framework project, to ensure build order of the projects. The .NET Framework project generates a file in an `AfterTargets=\"Build\"` target (using [NSwag.MSBuild](https://github.com/RSuter/NSwag/wiki/MSBuild)), and this file is added as a *linked file* in the .NET Standard project.\r\n\r\n**Solution1.sln**\r\n```\r\nMicrosoft Visual Studio Solution File, Format Version 12.00\r\n# Visual Studio 15\r\nVisualStudioVersion = 15.0.27703.2035\r\nMinimumVisualStudioVersion = 10.0.40219.1\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"ClassLibrary1\", \"ClassLibrary1\\ClassLibrary1.csproj\", \"{CCF4D537-E3DF-4172-9B3F-D3B06DAAC1F8}\"\r\nEndProject\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"ClassLibrary2\", \"ClassLibrary2\\ClassLibrary2.csproj\", \"{82F74C55-84D7-4C10-86A8-F04BE16DCB78}\"\r\nEndProject\r\nGlobal\r\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\r\n\t\tDebug|Any CPU = Debug|Any CPU\r\n\t\tRelease|Any CPU = Release|Any CPU\r\n\tEndGlobalSection\r\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\r\n\t\t{CCF4D537-E3DF-4172-9B3F-D3B06DAAC1F8}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{CCF4D537-E3DF-4172-9B3F-D3B06DAAC1F8}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{CCF4D537-E3DF-4172-9B3F-D3B06DAAC1F8}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{CCF4D537-E3DF-4172-9B3F-D3B06DAAC1F8}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{82F74C55-84D7-4C10-86A8-F04BE16DCB78}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{82F74C55-84D7-4C10-86A8-F04BE16DCB78}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{82F74C55-84D7-4C10-86A8-F04BE16DCB78}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{82F74C55-84D7-4C10-86A8-F04BE16DCB78}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\tEndGlobalSection\r\n\tGlobalSection(SolutionProperties) = preSolution\r\n\t\tHideSolutionNode = FALSE\r\n\tEndGlobalSection\r\n\tGlobalSection(ExtensibilityGlobals) = postSolution\r\n\t\tSolutionGuid = {DC8EDB39-5B76-4A28-BC1A-351F2CA1269C}\r\n\tEndGlobalSection\r\nEndGlobal\r\n```\r\n\r\n**ClassLibrary1\\ClassLibrary1.csproj**\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>net471</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```\r\n\r\n**ClassLibrary2\\ClassLibrary2.csproj**\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netstandard2.0</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```\r\n\r\nWhen running `dotnet build .\\Solution1.sln`, the solution builds as expected.\r\n\r\nNow make ClassLibrary2 depend on ClassLibrary1:\r\n\r\n**Solution1.sln**\r\n```\r\n...\r\nProject(\"{9A19103F-16F7-4668-BE54-9A1E7A4F7556}\") = \"ClassLibrary2\", \"ClassLibrary2\\ClassLibrary2.csproj\", \"{82F74C55-84D7-4C10-86A8-F04BE16DCB78}\"\r\n\tProjectSection(ProjectDependencies) = postProject\r\n\t\t{CCF4D537-E3DF-4172-9B3F-D3B06DAAC1F8} = {CCF4D537-E3DF-4172-9B3F-D3B06DAAC1F8}\r\n\tEndProjectSection\r\nEndProject\r\n...\r\n```\r\n\r\nWhen running `dotnet build .\\Solution1.sln`, the following error is thrown:\r\n\r\n> C:\\Program Files\\dotnet\\sdk\\2.1.300\\Microsoft.Common.CurrentVersion.targets(1656,5): error : Project 'C:\\...\\Solution1\\ClassLibrary1\\ClassLibrary1.csproj' targets 'net471'. It cannot be referenced by a project that targets '.NETStandard,Version=v2.0'. [C:\\...\\Solution1\\ClassLibrary2\\ClassLibrary2.csproj]\r\n\r\nClassLibrary2 doesn't reference ClassLibrary1 in a way that is technically impossible, so I expect this to work instead of throwing an error."},{"Id":"7934327248","Type":"IssuesEvent","CreatedAt":"2018-07-08T17:53:27","Actor":"Pilchie","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/760","RelatedDescription":"Closed issue \"Unable to properly debug a netstandard project when starting a external executable\" (#760) at dotnet/standard","RelatedBody":"### Summary\r\n\r\nDebugging doesnt seem to work properly when you start a net framework exe from a netstandard project through the Debug Launch setting. Everything else seems to be working fine.\r\n\r\nWhen testing inside a game engine called duality I noticed this behavior. Latter on I found out that I can reproduce this in a separate project as well.\r\n\r\nSome background info: In duality you add functionality through plugins which currently are portable projects. We want to eventually change this to netstandard projects. Plugins themselves are not runnable but instead we run duality itself when you try to run a plugin in VS. This will load all the plugins so you can proceed to debugging your plugin.\r\n\r\nNote: the attached test project was simplified as much as possible to isolate the problem and thus does not include duality.\r\n\r\n### How to reproduce\r\n\r\n- Download and open the attached test project.\r\n- RebuildBuild the solution and start `ClassLibrary1`. This will actually start the exe generated by `NetStandardDebugTest`. Note that it will run properly.\r\n- Now set a breakpoint and run it again. Note that the break point will not work.\r\n- Now try to pause the execution. You will get a Unknown error 0x80004005\r\n\r\n### Attachments\r\n\r\n- [NetStandardDebugTest.zip](https://github.com/AdamsLair/duality/files/2048379/NetStandardDebugTest.zip)\r\n"},{"Id":"7931123364","Type":"IssuesEvent","CreatedAt":"2018-07-06T21:56:00","Actor":"natemcmaster","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/794","RelatedDescription":"Opened issue \"xmldoc file in NETStandard.Library 2.0.3 is invalid xml\" (#794) at dotnet/standard","RelatedBody":"Trying to parse netstandard.library/2.0.3/build/netstandard2.0/ref/netstandard.xml with System.Xml.Linq.XDocument throws the following error:\r\n```\r\nThe 'p' start tag on line 654 position 2 does not match the end tag of 'th'. Line 654, position 86.\r\n```\r\n\r\nHere's the offending section:\r\n```\r\n    <member name=\"M:System.Collections.CaseInsensitiveComparer.Compare(System.Object,System.Object)\">\r\n      <summary>Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.</summary>\r\n      <param name=\"a\">The first object to compare.</param>\r\n      <param name=\"b\">The second object to compare.</param>\r\n      <returns><p sourcefile=\"netstandard.yml\" sourcestartlinenumber=\"1\" sourceendlinenumber=\"2\"><p sourcefile=\"netstandard.yml\" sourcestartlinenumber=\"1\" sourceendlinenumber=\"1\">A signed integer that indicates the relative values of <code data-dev-comment-type=\"paramref\">a</code> and <code data-dev-comment-type=\"paramref\">b</code>, as shown in the following table.  </p>\r\n <table><thead><tr><th> Value  <p>\r\n<p sourcefile=\"netstandard.yml\" sourcestartlinenumber=\"4\" sourceendlinenumber=\"4\"> </th><th> Meaning  <p>\r\n<p sourcefile=\"netstandard.yml\" sourcestartlinenumber=\"6\" sourceendlinenumber=\"6\"> </th></tr></thead><tbody><tr><td> Less than zero  <p>\r\n<p sourcefile=\"netstandard.yml\" sourcestartlinenumber=\"8\" sourceendlinenumber=\"8\"> </td><td><code data-dev-comment-type=\"paramref\">a</code> is less than <code data-dev-comment-type=\"paramref\">b</code>, with casing ignored.  <p>\r\n<p sourcefile=\"netstandard.yml\" sourcestartlinenumber=\"10\" sourceendlinenumber=\"10\"> </td></tr><tr><td> Zero  <p>\r\n<p sourcefile=\"netstandard.yml\" sourcestartlinenumber=\"12\" sourceendlinenumber=\"12\"> </td><td><code data-dev-comment-type=\"paramref\">a</code> equals <code data-dev-comment-type=\"paramref\">b</code>, with casing ignored.  <p>\r\n<p sourcefile=\"netstandard.yml\" sourcestartlinenumber=\"14\" sourceendlinenumber=\"14\"> </td></tr><tr><td> Greater than zero  <p>\r\n<p sourcefile=\"netstandard.yml\" sourcestartlinenumber=\"16\" sourceendlinenumber=\"16\"> </td><td><code data-dev-comment-type=\"paramref\">a</code> is greater than <code data-dev-comment-type=\"paramref\">b</code>, with casing ignored.  <p>\r\n<p sourcefile=\"netstandard.yml\" sourcestartlinenumber=\"18\" sourceendlinenumber=\"18\"> </td></tr></tbody></table></p>\r\n</returns>\r\n      <exception cref=\"T:System.ArgumentException\">Neither <paramref name=\"a\">a</paramref> nor <paramref name=\"b\">b</paramref> implements the <see cref=\"T:System.IComparable\"></see> interface.   -or-  <paramref name=\"a\">a</paramref> and <paramref name=\"b\">b</paramref> are of different types.</exception>\r\n    </member>\r\n```"},{"Id":"7930952606","Type":"PullRequestEvent","CreatedAt":"2018-07-06T21:07:36","Actor":"ionux","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/793","RelatedDescription":"Opened pull request \"Minor text correction for ObsoleteAttribute message.\" (#793) at dotnet/standard","RelatedBody":""}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7941524335","Type":"PullRequestEvent","CreatedAt":"2018-07-10T05:15:56","Actor":"dotnet-maestro-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/30935","RelatedDescription":"Opened pull request \"Update ProjectNTfs, ProjectNTfsTestILC to beta-26710-00, beta-26710-00, respectively (master)\" (#30935) at dotnet/corefx","RelatedBody":""},{"Id":"7941313498","Type":"IssuesEvent","CreatedAt":"2018-07-10T03:48:01","Actor":"Zhentar","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/30934","RelatedDescription":"Opened issue \"Utf8Parser TryParse Numeric Parsing Wrappers Don't Inline\" (#30934) at dotnet/corefx","RelatedBody":"(Disclaimer: I have only examined the int32 behavior; I presume the other types exhibit similar behaviors)\r\nWhen calling the new numeric TryParse functions, e.g. `Utf8Parser.TryParse(parseSpan, out int result, out _);`, the TryParse wrapper function does not inline. This is unfortunate because the format to parse is commonly a hardcoded constant; if the JIT attempted to inline it the format switch statement could be entirely optimized away, saving the cost of a function call while simultaneously reducing (slightly) the code size of the caller. \r\n\r\nSlapping a `[MethodImpl(MethodImplOptions.AggressiveInlining)]` on there would address the problem and performs great in my microbenchmarks, but would come at a relatively substantial code size penalty for the caller when the format isn't a constant. \r\n\r\nIn my testing, this seemed to achieve a good balance:\r\n```cs\r\n\t\t\t\tpublic static bool TryParse(ReadOnlySpan<byte> source, out int value, out int bytesConsumed, char standardFormat = default)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (standardFormat == default(char))\r\n\t\t\t\t\t\treturn TryParseInt32D(source, out value, out bytesConsumed);\r\n\r\n\t\t\t\t\treturn TryParseInner(source, out value, out bytesConsumed, standardFormat);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tprivate static bool TryParseInner(ReadOnlySpan<byte> source, out int value, out int bytesConsumed, char standardFormat)\r\n\t\t\t\t{\r\n\t\t\t\t\tswitch ((char)(standardFormat | 0x20))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcase 'g':\r\n\t\t\t\t\t\tcase 'd':\r\n\t\t\t\t\t\t\treturn TryParseInt32D(source, out value, out bytesConsumed);\r\n\t\t\t\t\t\tcase 'n':\r\n\t\t\t\t\t\t\treturn TryParseInt32N(source, out value, out bytesConsumed);\r\n\t\t\t\t\t\tcase 'x':\r\n\t\t\t\t\t\t\tvalue = default;\r\n\t\t\t\t\t\t\treturn TryParseUInt32X(source, out Unsafe.As<int, uint>(ref value), out bytesConsumed);\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\treturn ThrowHelper.TryParseThrowFormatException(out value, out bytesConsumed);\r\n\t\t\t\t\t}\r\n\t\t\t\t}```\r\n\r\nWhen there is a hardcoded constant format, the JIT will inline both functions and resolve to the appropriate direct parsing call. When the format is not constant, the outer wrapper inlines, giving a small code size penalty to the caller, but the inner function with the bulk of the code is deemed unprofitable and is not inlined."},{"Id":"7941200929","Type":"PullRequestEvent","CreatedAt":"2018-07-10T03:05:16","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/30932","RelatedDescription":"Merged pull request \"Update BuildTools, CoreClr, CoreSetup to preview1-03010-01, preview1-26710-01, preview1-26709-03, respectively (master)\" (#30932) at dotnet/corefx","RelatedBody":""},{"Id":"7941178440","Type":"IssuesEvent","CreatedAt":"2018-07-10T02:57:12","Actor":"tannergooding","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/30933","RelatedDescription":"Opened issue \"Support generating random 64-bit values.\" (#30933) at dotnet/corefx","RelatedBody":"### Rationale\r\n\r\nIt is sometimes desirable to generate random numbers as inputs to tests. This works nicely for the majority of the primitive types, but not for `long`/`ulong`.\r\n\r\nAs such, I propose a method be exposed that allows the generation of random 64-bit integer values.\r\n\r\n### Proposed API\r\n```C#\r\npublic class Random\r\n{\r\n    public virtual int NextInt64();\r\n    public virtual int NextInt64(long maxValue);\r\n    public virtual int NextInt64(long minValue, long maxValue);\r\n}\r\n```"},{"Id":"7941151495","Type":"PullRequestEvent","CreatedAt":"2018-07-10T02:46:56","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/30856","RelatedDescription":"Merged pull request \"Update PoolBlockPeriodTest to check if connection string is setup\" (#30856) at dotnet/corefx","RelatedBody":"Fixes #30732 "},{"Id":"7941151481","Type":"IssuesEvent","CreatedAt":"2018-07-10T02:46:56","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/30732","RelatedDescription":"Closed issue \"PoolBlockPeriodTest/TestNonAzureBlockingPeriod test failed in CI\" (#30732) at dotnet/corefx","RelatedBody":"https://mc.dot.net/#/user/baulig/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/ee2ee9a8190e80c62219d0f138f031c966085b60/workItem/System.Data.SqlClient.ManualTesting.Tests/analysis/xunit/System.Data.SqlClient.ManualTesting.Tests.PoolBlockPeriodTest~2FTestNonAzureBlockingPeriod(description:%20%5C%22NonAzure%20with%20Always%20Policy%20must%20Enable%20Blocking%5C%22,%20Params:%20%5B%5C%22nonexistanceserver%5C%22,%20)\r\n```\r\nUnhandled Exception of Type Xunit.Sdk.InRangeException\r\nMessage :\r\nAssert.InRange() Failure\r\nRange:  (0 - 16)\r\nActual: 17\r\nStack Trace :\r\n   at System.Data.SqlClient.ManualTesting.Tests.PoolBlockPeriodTest.PoolBlockingPeriodNonAzureTest(String connStr, Nullable`1 policy) in D:\\j\\workspace\\windows-TGrou---74aa877a\\src\\System.Data.SqlClient\\tests\\ManualTests\\SQL\\ConnectionPoolTest\\PoolBlockPeriodTest.netcoreapp.cs:line 100\r\n   at System.Data.SqlClient.ManualTesting.Tests.PoolBlockPeriodTest.TestNonAzureBlockingPeriod(String description, Object[] Params) in D:\\j\\workspace\\windows-TGrou---74aa877a\\src\\System.Data.SqlClient\\tests\\ManualTests\\SQL\\ConnectionPoolTest\\PoolBlockPeriodTest.netcoreapp.cs:line 59\r\n```\r\n\r\nBut... in addition to this failing, why is a \"Manual\" test running in CI?  Seems like either it should be attributed to not be run in CI as with the other connection tests, or it's in the wrong project.\r\n\r\ncc: @AfsanehR "}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7941520750","Type":"IssuesEvent","CreatedAt":"2018-07-10T05:14:33","Actor":"tiandian","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/6072","RelatedDescription":"Closed issue \"It is possible make writing rd.xml easier by write a log in GetType()?\" (#6072) at dotnet/corert","RelatedBody":"When I publish a asp.net core app to corert, it often runs error,  i reference many third party libraries,\r\nI don't know which code generate the error, and I can't change the code in the third party libraries,\r\nbut I know it is most possible be a reflection error,   and it is most possible Type.GetType() return null,\r\n\r\nso I want ask it is possible let Type.GetType to write to a log file when it return null when publish to corert?\r\nchange Type.GetType's code to below:\r\n\r\n```\r\n        public static Type GetType(String typeName)\r\n        {\r\n            StackCrawlMark stackMark = StackCrawlMark.LookForMyCaller;\r\n            Type t = return RuntimeType.GetType(typeName, false, false, false, ref stackMark);\r\n\r\n#if LOG\r\n            if (t == null)\r\n            {\r\n                Writelog(\"ReflectionError.txt\", string.Format(\"GetType: typeName = {0} return null.\", typeName));\r\n            }\r\n#endif\r\n\r\n            return t;\r\n        }\r\n```\r\n\r\nthen when i run `dotnet publish -r win-x64 -c release --LOG=1`, when i run the published exe, it will write a ReflectionError.txt file, I don't need know which line code in the third library generate the error, I just need add the error type in the ReflectionError.txt to rd.xml to resolve the problem.\r\n\r\nthanks!\r\n"},{"Id":"7941167135","Type":"PullRequestEvent","CreatedAt":"2018-07-10T02:52:47","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6056","RelatedDescription":"Merged pull request \"Add back most CreateInstance APIs to AppDomain and Activator\" (#6056) at dotnet/corert","RelatedBody":"Contributes to  https://github.com/dotnet/corefx/issues/30190\r\n\r\nAs advised by @jkotas  https://github.com/dotnet/corefx/pull/30809#issuecomment-402680660 we need to add new Activator.CreateInstance apis to allow compilation.\r\n"},{"Id":"7941159452","Type":"PullRequestEvent","CreatedAt":"2018-07-10T02:49:53","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6068","RelatedDescription":"Merged pull request \"Use uapaot mscorlib facade\" (#6068) at dotnet/corert","RelatedBody":"This is required to use the correct forwarder for System.Runtime.InteropServices types that still\r\nhave a different home between CoreCLR and CoreRT.\r\n\r\nWorkaround for #3231\r\nFixes #6062"},{"Id":"7941159449","Type":"IssuesEvent","CreatedAt":"2018-07-10T02:49:53","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/6062","RelatedDescription":"Closed issue \"Marshal.PtrToStringAnsi(IntPtr) is missing!\" (#6062) at dotnet/corert","RelatedBody":"Hi,\r\n\r\nI'm getting this unhandled exception: \r\n\r\n``Unhandled Exception: System.MissingMethodException: Method not found: 'System.String System.Runtime.InteropServices.Marshal.PtrToStringAnsi(IntPtr)'.``\r\n\r\n\r\nI tested on Windows 10 with .net core 2.1\r\n"},{"Id":"7941112103","Type":"PullRequestEvent","CreatedAt":"2018-07-10T02:32:05","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6079","RelatedDescription":"Merged pull request \"Merge nmirror to master\" (#6079) at dotnet/corert","RelatedBody":""},{"Id":"7941029457","Type":"PullRequestEvent","CreatedAt":"2018-07-10T02:01:07","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/corert/pull/6067","RelatedDescription":null,"RelatedBody":"Extracted from #6060"},{"Id":"7941029389","Type":"PullRequestEvent","CreatedAt":"2018-07-10T02:01:05","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/6067","RelatedDescription":"Closed pull request \"Regression test for inlined PInvoke with marshalling data\" (#6067) at dotnet/corert","RelatedBody":"Extracted from #6060"},{"Id":"7941027703","Type":"PullRequestEvent","CreatedAt":"2018-07-10T02:00:30","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/corert/pull/6068","RelatedDescription":null,"RelatedBody":"This is required to use the correct forwarder for System.Runtime.InteropServices types that still\r\nhave a different home between CoreCLR and CoreRT.\r\n\r\nWorkaround for #3231\r\nFixes #6062"},{"Id":"7941027507","Type":"PullRequestEvent","CreatedAt":"2018-07-10T02:00:27","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/6068","RelatedDescription":"Closed pull request \"Use uapaot mscorlib facade\" (#6068) at dotnet/corert","RelatedBody":"This is required to use the correct forwarder for System.Runtime.InteropServices types that still\r\nhave a different home between CoreCLR and CoreRT.\r\n\r\nWorkaround for #3231\r\nFixes #6062"},{"Id":"7941024507","Type":"IssuesEvent","CreatedAt":"2018-07-10T01:59:23","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/6071","RelatedDescription":"Closed issue \"Linux non-trivial marshalling support\" (#6071) at dotnet/corert","RelatedBody":"Any idea when this will be fixed or how I can work around it? I can't make HttpClient requests with the CurlHandler as it always fails with the same exception. If I use the SocketsHttpHandler I run into another marshaling issue for authentication (GSSAPI). I have no issues on Windows.\r\n\r\n```\r\nUnhandled Exception: System.Exception: Method '[System.Net.Http]Interop+Http.RegisterSslCtxCallback(SafeCurlHandle,SslCtxCallback,native int,SafeCallbackHandle&)' requires non-trivial marshalling that is not yet supported by this compiler.\r\n   at Interop.Http.RegisterSslCtxCallback(Interop.Http.SafeCurlHandle, Interop.Http.SslCtxCallback, IntPtr, Interop.Http.SafeCallbackHandle&) + 0x24\r\n   at System.Net.Http.CurlHandler.SslProvider.SetSslOptionsForSupportedBackend(CurlHandler.EasyRequest, CurlHandler.ClientCertificateProvider, IntPtr) + 0x2a\r\n   at System.Net.Http.CurlHandler.SslProvider.SetSslOptions(CurlHandler.EasyRequest, ClientCertificateOption) + 0x157\r\n   at System.Net.Http.CurlHandler.EasyRequest.InitializeCurl() + 0x188\r\n   at System.Net.Http.CurlHandler.MultiAgent.ActivateNewRequest(CurlHandler.EasyRequest) + 0x16c\r\n```\r\n\r\n```\r\nUnhandled Exception: System.ComponentModel.Win32Exception (0x80090020): Method '[System.Net.Http]Interop+NetSecurityNative.InitSecContext(Status&,SafeGssCredHandle,SafeGssContextHandle&,bool,SafeGssNameHandle,uint32,uint8[],int32,GssBuffer&,uint32&,int32&)' requires non-trivial marshalling that is not yet supported by this compiler.\r\n   at System.Net.NTAuthentication.GetOutgoingBlob(Byte[], Boolean, SecurityStatusPal&) + 0x550\r\n   at System.Net.NTAuthentication.GetOutgoingBlob(String) + 0x64\r\n   at System.Net.Http.AuthenticationHelper.<SendWithNtAuthAsync>d__46.MoveNext() + 0x396\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() + 0x1b\r\n   at System.Net.Http.HttpConnectionPool.<SendWithRetryAsync>d__39.MoveNext() + 0x3c1\r\n```"},{"Id":"7941023749","Type":"PullRequestEvent","CreatedAt":"2018-07-10T01:59:07","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6074","RelatedDescription":"Merged pull request \"Fix In,Out marshaling for SafeHandles\" (#6074) at dotnet/corert","RelatedBody":"Fixes #3291 #6071"},{"Id":"7941023747","Type":"IssuesEvent","CreatedAt":"2018-07-10T01:59:07","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/3291","RelatedDescription":"Closed issue \"Add SafeHandle marshaling support for [In,Out] arguments\" (#3291) at dotnet/corert","RelatedBody":"Currently we support one or the other; not both."},{"Id":"7941022804","Type":"PullRequestEvent","CreatedAt":"2018-07-10T01:58:45","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6081","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#6081) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @ViktorHofer"},{"Id":"7940659721","Type":"PullRequestEvent","CreatedAt":"2018-07-09T23:40:11","Actor":"dotnet-maestro-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6081","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#6081) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7940657716","Type":"PullRequestEvent","CreatedAt":"2018-07-09T23:39:29","Actor":"Anipik","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6080","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/corefx,coreclr\" (#6080) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @Anipik @HumanEquivalentUnit"},{"Id":"7939740130","Type":"PullRequestEvent","CreatedAt":"2018-07-09T19:51:57","Actor":"nattress","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6045","RelatedDescription":"Merged pull request \"Produce image with executable Main\" (#6045) at dotnet/corert","RelatedBody":"Define nodes for some of the key data strucures emitted into the\r\nready-to-run image. This includes `ImportSectionNode` which contains\r\nimports of a like kind (ie, eager fixups) along with optionally a set of\r\nsignatures describing the import target.\r\n\r\nCurrently we emit the module import cell and can specialize from here\r\nadding others.\r\n\r\nFix an alignment issue where the SectionBuilder didn't understand zero\r\nalignment. Maybe the default should just be 1."}],"ResultType":"GitHubEvent"},"SDK":{"Events":[],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1016363772737273856","CreatedAt":"2018-07-09T16:49:41+00:00","UserScreenname":"dotnet","Text":"https://t.co/EpnUCQtOJb.Pipelines: High performance IO in .NET https://t.co/LLJUxPVWlC","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":244,"FavoriteCount":109,"RawContent":null},{"Id":"1016363637726797824","CreatedAt":"2018-07-09T16:49:09+00:00","UserScreenname":"dotnet","Text":"Announcing https://t.co/XkD7piEeFS 0.3 https://t.co/dLw78XRgcE","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":97,"FavoriteCount":66,"RawContent":null},{"Id":"1013052742326280192","CreatedAt":"2018-06-30T13:32:50+00:00","UserScreenname":"dotnet","Text":"Tune in for Jeff's Saturday show, learn how to use C# and @ASPNET Core.  Always a good time https://t.co/KJoRPYHnHt","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":32,"FavoriteCount":8,"RawContent":null}]}},"RunOn":"2018-07-10T05:30:40.8972295Z","RunDurationInMilliseconds":6880}