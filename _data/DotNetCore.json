{"Data":{"Blog":{"FeedItems":[{"Title":".NET Core 2.1 June Update","PublishedOn":"2018-06-22T21:08:25+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"We released .NET Core 2.1.1. This update includes .NET Core SDK 2.1.301, ASP.NET Core 2.1.1 and .NET Core 2.1.1. See .NET Core 2.1.1 release notes for complete details on the release. Quality Updates...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/22/net-core-2-1-june-update/","RawContent":null},{"Title":".NET Core 2.0 will reach End of Life on October 1, 2018","PublishedOn":"2018-06-20T19:12:38+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Last Updated: 6/22/2018 .NET Core 2.0 was released on August 14, 2017. As a non-LTS release, it is supported for 3 months after the next release. .NET Core 2.1 was released on May 30th, 2018. As a...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/","RawContent":null},{"Title":"The RyuJIT transition is complete!","PublishedOn":"2018-06-19T22:53:27+00:00","CommentsCount":26,"FacebookCount":0,"Summary":"RyuJIT is the code name for the .NET just-in-time compiler, one of the foundational components of the .NET runtime. In contrast, the Roslyn C# compiler compiles C# code to IL byte code. The RyuJIT...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/19/the-ryujit-transition-is-complete/","RawContent":null},{"Title":"Staying up-to-date with .NET Container Images","PublishedOn":"2018-06-18T18:59:03+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"This post describes the container images that we produce and update for you, that you can use with Docker, Kubernetes and other systems. When you are using .NET and Docker together, you are probably...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/18/staying-up-to-date-with-net-container-images/","RawContent":null},{"Title":"Using .NET and Docker Together – DockerCon 2018 Update","PublishedOn":"2018-06-14T00:15:31+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"I posted about Using .NET and Docker Together last year. With DockerCon 2018 being this week, it seemed like a great time to give you an update.  Since my last post, we&#8217;ve enabled a set of...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/13/using-net-and-docker-together-dockercon-2018-update/","RawContent":null},{"Title":".NET Framework June 2018 Security and Quality Rollup","PublishedOn":"2018-06-13T19:29:27+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the June 2018 Security and Quality Rollup. Security No new security fixes. See .NET Framework May 2018 Security and Quality Rollup for the latest security updates. Quality and...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/13/net-framework-june-2018-security-and-quality-rollup/","RawContent":null},{"Title":"Announcing .NET Framework 4.8 Early Access build 3621!","PublishedOn":"2018-06-06T21:19:43+00:00","CommentsCount":38,"FacebookCount":0,"Summary":"Today, we are happy to share the .NET Framework 4.8 Early Access build 3621 for your feedback. This is one of the in-development builds of the next version of the .NET Framework. The changes in this...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/06/announcing-net-framework-4-8-early-access-build-3621/","RawContent":null},{"Title":"Announcing ML.NET 0.2","PublishedOn":"2018-06-06T04:36:25+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"Last month at //Build 2018, we released ML.NET 0.1, a cross-platform, open source machine learning framework. We would like to thank the community for the engagement so far in helping us shape ML.NET....","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/06/05/announcing-ml-net-0-2/","RawContent":null},{"Title":"Announcing .NET Core 2.1","PublishedOn":"2018-05-30T17:22:16+00:00","CommentsCount":71,"FacebookCount":0,"Summary":"We&#8217;re excited to announce the release of .NET Core 2.1. It includes improvements to performance, to the runtime and tools. It also includes a new way to deploy tools as NuGet packages....","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-net-core-2-1/","RawContent":null},{"Title":"Announcing Entity Framework Core 2.1","PublishedOn":"2018-05-30T17:22:00+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Today we are excited to announce the release of Entity Framework (EF) Core 2.1. This is the latest production-ready release of our open-source and cross-platform data access technology. We are...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-entity-framework-core-2-1/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7724991049","Type":"PullRequestEvent","CreatedAt":"2018-05-24T16:33:10","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/103","RelatedDescription":"Merged pull request \"Add ML.NET to readme\" (#103) at dotnet/home","RelatedBody":"cc @shauheen @jongalloway "},{"Id":"7724874671","Type":"PullRequestEvent","CreatedAt":"2018-05-24T16:12:32","Actor":"danmosemsft","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/103","RelatedDescription":"Opened pull request \"Add ML.NET to readme\" (#103) at dotnet/home","RelatedBody":"cc @shauheen @jongalloway "},{"Id":"7697543163","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:10:28","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/91","RelatedDescription":"Merged pull request \"Add NUnit to the .NET Foundation Projects\" (#91) at dotnet/home","RelatedBody":""},{"Id":"7697541521","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:10:06","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/92","RelatedDescription":"Merged pull request \"Remove contact email from system.drawing.md\" (#92) at dotnet/home","RelatedBody":"Contact email is outdated. Mono-project site's community section has better, more up-to-date information."},{"Id":"7697539314","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:09:35","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/93","RelatedDescription":"Merged pull request \"Add Humanizer\" (#93) at dotnet/home","RelatedBody":"Onboarding Humanizer: https://github.com/Humanizr/Humanizer/issues/682"},{"Id":"7697528376","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:07:09","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/94","RelatedDescription":"Merged pull request \"add SourceLink\" (#94) at dotnet/home","RelatedBody":"Adding SourceLink to the project list as per the checklist https://github.com/ctaggart/SourceLink/issues/138"},{"Id":"7697526900","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:06:48","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/95","RelatedDescription":"Merged pull request \"Fix broken logo URL\" (#95) at dotnet/home","RelatedBody":""},{"Id":"7697525283","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:06:25","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/96","RelatedDescription":"Merged pull request \"Adding DNN Platform.\" (#96) at dotnet/home","RelatedBody":""},{"Id":"7697523628","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:06:02","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/98","RelatedDescription":"Merged pull request \"Updates to reflect the latest information\" (#98) at dotnet/home","RelatedBody":""},{"Id":"7697521624","Type":"PullRequestEvent","CreatedAt":"2018-05-18T19:05:34","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/100","RelatedDescription":"Merged pull request \"Create mvvmcross.md\" (#100) at dotnet/home","RelatedBody":"Added MvvmCross as project as part of on-boarding.\r\n\r\nhttps://github.com/MvvmCross/MvvmCross/issues/2415"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7780591341","Type":"IssuesEvent","CreatedAt":"2018-06-05T20:33:11","Actor":"huanwu","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/72","RelatedDescription":"Opened issue \"Introducing dotnet-svcutil.xmlserializer for .NET Core\" (#72) at dotnet/announcements","RelatedBody":"# Introducing dotnet-svcutil.xmlserializer for .NET Core\r\nOn the full .NET Framework you are able to pre-generate a serialization assembly using the tool svcutil. We are providing similar functionality on .NET Core by releasing the dotnet-svcutil.xmlserializer NuGet package. It pre-generates c# serialization code for the types used by WCF Service Contract in the client applications that can be serialized using the XmlSerializer to improve the startup performance of Xml Serialization when serializing or de-serializing objects of those types using XmlSerializer. \r\nYou can start using the tool today by following the instructions. \r\n## Discussion \r\nPlease share with us any thoughts of questions that you may have at: \r\n\r\n- dotnet/wcf [#2927](https://github.com/dotnet/wcf/issues/2927)\r\n## Details \r\nWhen to use XmlSerializer with WCF in an app to serialize contract data types, it will generate an XmlSerializer during runtime to do the serialization. You can improve the startup performance of Xml serialization by simply adding the reference of dotnet-svcutil.xmlserializer NuGet package to your project. This tool will generate the serialization code and compile it into an assembly next to your output assembly at build time in advance. This assembly can then be deployed and ran with your application. \r\n\r\nPlease create an issue with your feedback at [dotnet/wcf](https://github.com/dotnet/wcf/issues). We are actively looking to improve the tool and your input is a valuable part of the process. "}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7895584695","Type":"PullRequestEvent","CreatedAt":"2018-06-29T04:19:39","Actor":"tgiphil","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/18706","RelatedDescription":"Opened pull request \"Corrected a few typos in the documentation and comments\" (#18706) at dotnet/coreclr","RelatedBody":"Just fixing up a few typos as I read/browse/study through the source code. "},{"Id":"7895192816","Type":"IssuesEvent","CreatedAt":"2018-06-29T01:40:35","Actor":"peppy","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/18705","RelatedDescription":"Opened issue \"Huge slowdowns on threaded operations when debugger attached (macOS)\" (#18705) at dotnet/coreclr","RelatedBody":"When debugging our application (with attached debugger, no breakpoints), performance can drop to a point it becomes frustrating to do anything. On occasion we are also seeing OS level hard locking for seconds to minutes, which *may* be related.\r\n\r\nReproducible in both VSCode and Jetbrains Rider. This is exclusive to netcore (2.0 and 2.1) – does not occur under mono or net471 runtime environments. It also seems limited to macOS as I have not been able to reproduce on windows.\r\n\r\nThis can easily be reproduced on our game framework project: https://github.com/ppy/osu-framework (building should require not extra steps beyond checking it out).\r\n\r\n- Start in `VisualTests` configuration\r\n- Switch to `DelayedLoad` in the left menu\r\n- Observe severe frame drops when threaded load events occur\r\n\r\nTesting with debugger attached should drop to less than 1fps while it is easy to maintain hundreds without a debugger attached.\r\n\r\nIt seems to be directly related to creation of threads, specifically with the `TaskCreationOptions.LongRunning` flag. On removing this flag from hot paths ([#1](https://github.com/ppy/osu-framework/blob/2fb9404792f0d7c39bed1272419e53683d6cb747/osu.Framework/IO/Network/WebRequest.cs#L229) [#2](https://github.com/ppy/osu-framework/blob/5a4bbc322d7d7e334fc1056550d2e3943b24e9c9/osu.Framework/Graphics/Drawable.cs#L145)), performance will return to normal.\r\n\r\nI've been trying to reproduce this with a more isolated test case but have not succeeded yet. Some pointers on moving forward in diagnosing this issue would be appreciated!\r\n\r\n"},{"Id":"7895106671","Type":"IssuesEvent","CreatedAt":"2018-06-29T01:04:55","Actor":"A-And","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/18704","RelatedDescription":"Opened issue \"System.Net.Primitives.Functional.Tests Failures\" (#18704) at dotnet/coreclr","RelatedBody":"The following tests fail in System.Net.Primitives.Functional.Tests with an EntryPointNotFoundException\r\n```\r\n    CookieCollectionTest.Clear_Success\r\n    CookieCollectionTest.Remove_Success\r\n    CookieCollectionTest.Contains_Success\r\n    CookieCollectionTest.Remove_NonExistantCookie_ReturnsFalse\r\n```\r\n\r\n### To reproduce failing \r\n\r\n1. `build x64 [release/debug] skiptests`\r\n2. `.\\build-test.cmd x64 [release/debug] buildtesthostonly`\r\n3. Navigate to `<repo-root>\\bin\\tests\\<Configuration>\\CoreFX\\tests_downloaded\\System.Net.Primitives.Functional.Tests`\r\n4. Run `<repo-root>\\bin\\tests\\<Configuration>\\testhost\\dotnet.exe .\\xunit.console.netcore.exe .\\System.Net.Primitives.Functional.Tests.dll -method [name of method to debug] `\r\n\r\n\r\n"},{"Id":"7895084794","Type":"IssuesEvent","CreatedAt":"2018-06-29T00:56:08","Actor":"A-And","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/18703","RelatedDescription":"Opened issue \"System.Net.Http.Functional.Tests Failures\" (#18703) at dotnet/coreclr","RelatedBody":"Three \"*Uppercased\" tests fail in System.Net.Http.Functional.Tests\r\nTest:\r\n    SocketsHttpHandler_HttpProtocolTests_Dribble.CustomMethod_SentUppercasedIfKnown\r\nError:\r\n    Xunit.Sdk.StartsWithException Assert.StartsWith() Failure:\\\\r\\\\nExpected: GET \\\\r\\\\nActual:   get ..\r\n\r\nTest:\r\n    SocketsHttpHandler_HttpProtocolTests.CustomMethod_SentUppercasedIfKnown_Additional\r\nError:\r\n    Xunit.Sdk.StartsWithException Assert.StartsWith() Failure:\\\\r\\\\nExpected: DELETE \\\\r\\\\nActual:   delete ...\r\n\r\nTest:\r\n    SocketsHttpHandler_HttpProtocolTests.CustomMethod_SentUppercasedIfKnown\r\nError:\r\n    Xunit.Sdk.StartsWithException Assert.StartsWith() Failure:\\\\r\\\\nExpected: GET \\\\r\\\\nActual:   get ...\r\n\r\n\r\n### To reproduce failing \r\n\r\n1. `build x64 [release/debug] skiptests`\r\n2. `.\\build-test.cmd x64 [release/debug] generatetesthostonly`\r\n3. Navigate to `<repo-root>\\bin\\tests\\<Configuration>\\CoreFX\\tests_downloaded\\System.Net.Http.Functional.Tests`\r\n4. Run `<repo-root>\\bin\\tests\\<Configuration>\\testhost\\dotnet.exe .\\xunit.console.netcore.exe .\\System.Net.Http.Functional.Tests.dll -method [name of method to debug] `\r\n"},{"Id":"7895077887","Type":"IssuesEvent","CreatedAt":"2018-06-29T00:53:14","Actor":"A-And","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/18702","RelatedDescription":"Opened issue \"System.Linq.Expressions.Tests Failures\" (#18702) at dotnet/coreclr","RelatedBody":"Multiple tests in Linq.Expressions.Tests fail. \r\n\r\nWith all of the below, only some elements in the collections don't pass the test.\r\n\r\n```\r\n\r\nGroupJoinTests.GroupJoin_CustomComparator_LeftWithOrderingColisions\r\n\r\nGroupJoinTests.GroupJoin_Multiple_LeftWithOrderingColisions\r\n\r\nGroupJoinTests.GroupJoin_CustomComparator\r\n\r\nGroupJoinTests.GroupJoin_Multiple\r\n\r\nJoinTests.Join_CustomComparator_LeftWithOrderingColisions_UnorderedRight\r\n\r\nJoinTests.Join_CustomComparator\r\n\r\nJoinTests.Join_Multiple_LeftWithOrderingColisions_UnorderedRight\r\n\r\nJoinTests.Join_CustomComparator_LeftWithOrderingColisions\r\n\r\nJoinTests.Join_Multiple_LeftWithOrderingColisions\r\n\r\n```\r\n\r\nThe `LeftWithOrderingCollisions`, `CustomComparator` and `GroupJoin` patterns seem to stand out.\r\n\r\n### To reproduce failing \r\n\r\n1. `build [release/debug] skiptests`\r\n2. `.\\build-test.cmd corefxtests skipmanaged`\r\n3. Navigate to `<repo-root>\\bin\\tests\\<Configuration>\\CoreFX\\tests_downloaded\\System.Linq.Expressions`\r\n4. Run `<repo-root>\\bin\\tests\\<Configuration>\\testhost\\dotnet.exe .\\xunit.console.netcore.exe .\\TOREPLACE.dll -method [name of method to debug] `"},{"Id":"7895069416","Type":"IssuesEvent","CreatedAt":"2018-06-29T00:49:35","Actor":"A-And","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/18701","RelatedDescription":"Opened issue \"System.Security.Principal.Tests Failure\" (#18701) at dotnet/coreclr","RelatedBody":"The following error is hit when running System.Security.Principal.Tests - this also crashes the .NET Core Host running the XUnit runner. \r\nThere is a substantial number of tests, which fail with `ObjectDisposedException`\r\nTest:\r\nError:\r\n    System.ObjectDisposedException: Safe handle has been closed\r\n       at System.Runtime.InteropServices.SafeHandle.DangerousAddRef(Boolean& success)\r\n       at System.StubHelpers.StubHelpers.SafeHandleAddRef(SafeHandle pHandle, Boolean& success)\r\n       at Interop.Advapi32.ImpersonateLoggedOnUser(SafeAccessTokenHandle userToken)\r\n       at System.Security.Principal.WindowsIdentity.CurrentImpersonatedTokenChanged(AsyncLocalValueChangedArgs`1 args)\r\n       at System.Threading.AsyncLocal`1.System.Threading.IAsyncLocal.OnValueChanged(Object previousValueObj, Object currentValueObj, Boolean contextChanged)\r\n       at System.Threading.ExecutionContext.OnValuesChanged(ExecutionContext previousExecutionCtx, ExecutionContext nextExecutionCtx)\r\n\r\n### To reproduce failing tests\r\n\r\n1. `build [release/debug] skiptests`\r\n2. `.\\build-test.cmd corefxtests skipmanaged`\r\n3. Navigate to <repo-root>\\bin\\tests\\<Configuration>\\CoreFX\\tests_downloaded\\System.Security.Principal.Tests\r\n4. Run `<repo-root>\\bin\\tests\\<Configuration>\\testhost\\dotnet.exe .\\xunit.console.netcore.exe .\\System.Security.Principal.Tests.dll `"},{"Id":"7895064921","Type":"IssuesEvent","CreatedAt":"2018-06-29T00:47:41","Actor":"A-And","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/18700","RelatedDescription":"Opened issue \"System.Linq.Expressions.Tests TypeLoadException in System.Private.CoreLib\" (#18700) at dotnet/coreclr","RelatedBody":"A TypeLoadException is hit when running System.Linq.Expressions.\r\n```\r\nTest:\r\n    GetDelegateTypeTests.CantBeFunc\r\nResult:\r\n    System.TypeLoadException System.TypeLoadException : The generic type 'System.Func`1' was used with an invalid instantiation in assembly 'System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e'.\r\n\r\nTest:\r\n    GetDelegateTypeTests.CantBeAction\r\nResult:\r\n    System.TypeLoadException System.TypeLoadException: The generic type 'System.Action`1' was used with an invalid instantiation in assembly 'System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e'\r\n```\r\n\r\n### To reproduce failing \r\n\r\n1. `build [release/debug] skiptests`\r\n2. `.\\build-test.cmd corefxtests skipmanaged`\r\n3. Navigate to <repo-root>\\bin\\tests\\<Configuration>\\CoreFX\\tests_downloaded\\System.Linq.Expressions.Tests\r\n4. Run `<repo-root>\\bin\\tests\\<Configuration>\\testhost\\dotnet.exe .\\xunit.console.netcore.exe .\\System.Linq.Expressions.Tests.dll -method [name of method to debug] `\r\n"},{"Id":"7895060204","Type":"IssuesEvent","CreatedAt":"2018-06-29T00:45:36","Actor":"A-And","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/18699","RelatedDescription":"Opened issue \"System.Drawing.Common.Tests Failures\" (#18699) at dotnet/coreclr","RelatedBody":"Some System.Drawing tests are failing with invalid Enum values. The disabled tests failing from the same cause are \r\n\r\n```\r\nTest:\r\n    GraphicsTests.InterpolationMode_SetInvalid_ThrowsInvalidEnumArgumentException`\r\nError:\r\n    Expected: typeof(System.ComponentModel.InvalidEnumArgumentException)\r\n    Actual:   typeof(System.ComponentModel.InvalidEnumArgumentException): The value of argument 'value' (-2) is invalid for Enum type 'InterpolationMode'.\r\n\r\nTest:\r\n    `GraphicsTests.CompositingQuality_SetInvalid_ThrowsInvalidEnumArgumentException`\r\nError:\r\n    Expected: typeof(System.ComponentModel.InvalidEnumArgumentException)\r\n    Actual:   typeof(System.ComponentModel.InvalidEnumArgumentException): The value of argument 'value' (-2) is invalid for Enum type 'CompositingQuality'.\r\n\r\nTest:\r\n    `GraphicsTests.PixelOffsetMode_SetInvalid_ThrowsInvalidEnumArgumentException`\r\nError:\r\n    Expected: typeof(System.ComponentModel.InvalidEnumArgumentException)\r\n    Actual:   typeof(System.ComponentModel.InvalidEnumArgumentException): The value of argument 'value' (-2) is invalid for Enum type 'PixelOffsetM\r\n\r\nTest:\r\n    `GraphicsTests.PageUnit_SetInvalid_ThrowsInvalidEnumArgumentException`\r\nError:\r\n    Expected: typeof(System.ComponentModel.InvalidEnumArgumentException)\r\n    Actual:   typeof(System.ComponentModel.InvalidEnumArgumentException): The value of argument 'value' (-1) is invalid for Enum type 'GraphicsUnit'\r\n\r\nTest:\r\n    `GraphicsTests.SmoothingMode_SetInvalid_ThrowsInvalidEnumArgumentException`\r\nError:\r\n    Expected: typeof(System.ComponentModel.InvalidEnumArgumentException)\r\n    Actual:   typeof(System.ComponentModel.InvalidEnumArgumentException): The value of argument 'value' (-2) is invalid for Enum type 'SmoothingMode'\r\n\r\nTest:\r\n    `GraphicsTests.CompositingMode_SetInvalid_ThrowsInvalidEnumArgumentException`\r\nError:\r\n    Expected: typeof(System.ComponentModel.InvalidEnumArgumentException)\r\n    Actual:   typeof(System.ComponentModel.InvalidEnumArgumentException): The value of argument 'value' (-1) is invalid for Enum type 'CompositingMode'\r\n\r\nTest:\r\n    `GraphicsTests.TextRenderingHint_SetInvalid_ThrowsInvalidEnumArgumentException`\r\nError:\r\n    Expected: typeof(System.ComponentModel.InvalidEnumArgumentException)\r\n    Actual:   typeof(System.ComponentModel.InvalidEnumArgumentException): The value of argument 'value' (-1) is invalid for Enum type 'TextRenderingHint'\r\n\r\n```\r\n#### To reproduce \r\n1. `build [release/debug] `\r\n2. `.\\build-test.cmd buildtesthostonly `\r\n3. Navigate to <repo-root>\\bin\\tests\\<Configuration>\\CoreFX\\tests_downloaded\\System.Drawing.Common.Tests\r\n4. Run `<repo-root>\\bin\\tests\\<Configuration>\\testhost\\dotnet.exe .\\xunit.console.netcore.exe .System.Drawing.Common.Tests.dll -method [name of method to debug]` "}],"ResultType":"GitHubEvent"},"CLI":{"Events":[],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7894690813","Type":"PullRequestEvent","CreatedAt":"2018-06-28T22:34:51","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/768","RelatedDescription":"Merged pull request \"Update version\" (#768) at dotnet/standard","RelatedBody":""},{"Id":"7894686205","Type":"IssuesEvent","CreatedAt":"2018-06-28T22:33:25","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/127","RelatedDescription":"Closed issue \"Request for a Formal Proposal Process\" (#127) at dotnet/standard","RelatedBody":"I'm very excited for .NET Standard; however, I am concerned that there is no formal process for changing it.\r\n\r\nFor example, **how does one propose APIs to be added**?\r\n\r\nThe [FAQ](https://github.com/dotnet/standard/blob/master/docs/faq.md#who-decides-what-is-in-net-standard) says that the board (a closed group of a few runtime vendors) decide.\r\n\r\nI do not think that this is sufficient to keep Standard evolving with the demands of developers. I worry that only features that these vendors are interested in will get added and the larger .NET community will be voiceless.\r\n\r\nI would like to see a formal proposal process, open to anyone, that we can track, to see changes made to Standard.\r\n\r\nWhat is the current state here? Are we supposed to use github issues to change the standard? If that is the case, then perhaps a proposal_instructions.md doc should be written so that people have a template or something to work from."},{"Id":"7894686139","Type":"PullRequestEvent","CreatedAt":"2018-06-28T22:33:24","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/764","RelatedDescription":"Merged pull request \"Detail governance model for .NET Standard\" (#764) at dotnet/standard","RelatedBody":"This updates the previously fairly vague definition of the .NET Standard review board and outlines the process by which we decide whether APIs will be added to .NET Standard. Key aspects:\r\n\r\n* Anybody can submit API standardization requests\r\n* The API request needs a sponsor that is on the .NET Standard review board\r\n* The API needs an implementation in at least one .NET implementation\r\n* The .NET Standard review board has representatives from all existing .NET implementations. @migueldeicaza will act as the chairman, which is fancy way to say he'll act as the tie-breaker.\r\n\r\n@migueldeicaza @dotnet/fxdc @dotnet/nsboard "},{"Id":"7892912796","Type":"IssuesEvent","CreatedAt":"2018-06-28T16:19:01","Actor":"Neme12","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/786","RelatedDescription":"Opened issue \"[Question] Using UWP APIs from .NET Standard\" (#786) at dotnet/standard","RelatedBody":"Hi, I have a PCL targeting .NET Framework 4.6 & UWP 10.0.10240 that I'm trying to convert to .NET Standard. It is actually used to share code that uses some UWP APIs that are available on desktop as well. I currently have these references in the project file:\r\n\r\n```xml\r\n<Reference Include=\"System.Runtime.WindowsRuntime\">\r\n  <HintPath>$(MSBuildProgramFiles32)\\Reference Assemblies\\Microsoft\\Framework\\.NETCore\\v4.5\\System.Runtime.WindowsRuntime.dll</HintPath>\r\n</Reference>\r\n<Reference Include=\"Windows\">\r\n  <HintPath>$(MSBuildProgramFiles32)\\Windows Kits\\10\\UnionMetadata\\Windows.winmd</HintPath>\r\n</Reference>\r\n```\r\n\r\nBased on the target frameworks, I figured that my desired version of .NET Standard would be 1.3. However I'm getting compilation errors about missing mscorlib whenever I use any of the UWP APIs.\r\n\r\nThis is the new csproj:\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netstandard1.3</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <Reference Include=\"System.Runtime.WindowsRuntime\">\r\n      <HintPath>$(MSBuildProgramFiles32)\\Reference Assemblies\\Microsoft\\Framework\\.NETCore\\v4.5\\System.Runtime.WindowsRuntime.dll</HintPath>\r\n    </Reference>\r\n    <Reference Include=\"Windows\">\r\n      <HintPath>$(MSBuildProgramFiles32)\\Windows Kits\\10\\UnionMetadata\\Windows.winmd</HintPath>\r\n    </Reference>\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nand a small example:\r\n```c#\r\nusing Windows.Storage;\r\n\r\nclass C\r\n{\r\n    void M()\r\n    {\r\n        var folder = KnownFolders.PicturesLibrary; // error CS0012: The type 'Object' is defined in an assembly that is not referenced. You must add a reference to assembly 'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.\r\n    }\r\n}\r\n```\r\n\r\nI noticed that if I target `netstandard2.0` instead, the compilation succeeds. But since I'm trying to target all versions of UWP, I can't afford that. Is it impossible to use these APIs from 1.3? Are PCLs the only option? Thank you (Sorry if this is not the appropriate repo)"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7895563211","Type":"PullRequestEvent","CreatedAt":"2018-06-29T04:09:51","Actor":"kasper3","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/30751","RelatedDescription":"Opened pull request \" Update brotli to v1.0.5 \" (#30751) at dotnet/corefx","RelatedBody":"Release notes: https://github.com/google/brotli/releases/tag/v1.0.5\r\nSimply removed `src/Native/AnyOS/brotli` and extracted https://github.com/google/brotli/archive/v1.0.5.zip's `brotli/c` directory there. Some new `.c` sources introduced in this release are added to `src/Native/Unix/System.IO.Compression.Native/CMakeLists.txt` and `src/Native/Windows/clrcompression/CMakeLists.txt`.\r\n\r\nfixes https://github.com/dotnet/corefx/issues/30249"},{"Id":"7895558587","Type":"IssuesEvent","CreatedAt":"2018-06-29T04:07:49","Actor":"NaveenKumar2303","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/30750","RelatedDescription":"Opened issue \"Referencing .Net Framework library to Core projects throwing error\" (#30750) at dotnet/corefx","RelatedBody":"Hello Team ,\r\nI am using a DLL library which was created in .Net Framework (earlier to 4.5) and i am referencing the same to my Core Project . the Core project builds correctly but the issue is when the code is pointing towards the methods that is corresponding towards the DLL library(.Net Framework) it is throwing \"BadImageFormatException: Could not load file or assembly 'xxxx'. An attempt was made to load a program with an incorrect format.\" According to the solution in nuget i also installed the Windows.Compatibity package , still the error is not resolved .\r\nCould you please provide us the alternative turn around solution for this as my project really requires to start up quickly and i am very keen on doing with Core rather than going back to .Net Framework approach .\r\nMany thanks in advance.\r\n"},{"Id":"7895313431","Type":"IssuesEvent","CreatedAt":"2018-06-29T02:27:51","Actor":"GrabYourPitchforks","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/30749","RelatedDescription":"Opened issue \"SpanHelpers.ClearWithoutReferences has several invalid (unaligned) casts\" (#30749) at dotnet/corefx","RelatedBody":"https://github.com/dotnet/corefx/blob/c86814f6b2ab6fee0848433bc379fba479041c0c/src/Common/src/CoreLib/System/SpanHelpers.cs#L45\r\n\r\nIt is invalid to reinterpret cast a `ref byte` to a `ref ushort/uint/ulong` without first checking the alignment of the input buffer. This could cause problems on future architectures or IOT devices where unaligned reads incur faults. This code should pin and check alignment or should use `Unsafe.WriteUnaligned` instead."},{"Id":"7895310376","Type":"IssuesEvent","CreatedAt":"2018-06-29T02:26:39","Actor":"GrabYourPitchforks","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/30748","RelatedDescription":"Opened issue \"Marvin.ComputeHash has an invalid (unaligned) cast\" (#30748) at dotnet/corefx","RelatedBody":"https://github.com/dotnet/corefx/blob/540a99ce273265ba62a25b48c696d2d506c88ab4/src/Common/src/System/Marvin.cs#L34\r\n\r\nIt is invalid to reinterpret cast a `ref byte` to a `ref uint` without first checking the alignment of the input buffer. This could cause problems on future architectures or IOT devices where unaligned reads incur faults. This code should pin and check alignment or should use `Unsafe.ReadUnaligned` instead."},{"Id":"7895104515","Type":"IssuesEvent","CreatedAt":"2018-06-29T01:04:01","Actor":"davidsh","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/30191","RelatedDescription":"Closed issue \".NET Core 2.1 WinHttpHandler proxy authentication broken when using PAC files\" (#30191) at dotnet/corefx","RelatedBody":"This issue split off from #30166.\r\n\r\nProxy authentication using system default proxy settings that involve a PAC file (either autodiscovery or explicit PAC file) cause a NullReferenceException in WinHttpHandler.\r\n\r\n![image](https://user-images.githubusercontent.com/7684835/41113984-f179e8ac-6a37-11e8-8d35-022c55383431.png)\r\n\r\nThis is a regression from .NET Core 2.0 caused by PR #28105"},{"Id":"7895102753","Type":"IssuesEvent","CreatedAt":"2018-06-29T01:03:16","Actor":"davidsh","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/30330","RelatedDescription":"Closed issue \"SocketsHttpHandler fails to authenticate to proxy when doing HTTPS tunneling to server\" (#30330) at dotnet/corefx","RelatedBody":"Found this bug while investigating #30166.\r\n\r\nWhen connecting to an HTTPS endpoint thru an authenticating proxy server where the proxy server uses Windows authentication schemes (Negotiate or NTLM), SocketsHttpHandler will not send any credentials. This causes the final HTTP response to be a 407.  This occurs whether or not the authenticating proxy server closes the initial 407 response (see #30327 for related bug).\r\n\r\nRepro code showing an authenticating proxy and resulting in no authentication by the handler and ending with a final 407 response:\r\n\r\n```c#\r\nstatic void Main()\r\n{\r\n    Console.WriteLine($\"(Framework: {Path.GetDirectoryName(typeof(object).Assembly.Location)})\");\r\n    Socket listener = null;\r\n\r\n    // Start a \"proxy\" server in the background.\r\n    listener = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);\r\n    listener.Bind(new IPEndPoint(IPAddress.Loopback, 0));\r\n    listener.Listen(int.MaxValue);\r\n    var ep = (IPEndPoint)listener.LocalEndPoint;\r\n    var proxyUri = new Uri($\"http://{ep.Address}:{ep.Port}/\");\r\n\r\n    Task.Run(async () =>\r\n    {\r\n        while (true)\r\n        {\r\n            Socket s = await listener.AcceptAsync();\r\n            var ignored = Task.Run(() =>\r\n            {\r\n                using (var ns = new NetworkStream(s))\r\n                using (var reader = new StreamReader(ns))\r\n                using (var writer = new StreamWriter(ns) { AutoFlush = true })\r\n                {\r\n                    int request = 1;\r\n                    while (true)\r\n                    {\r\n                        string line = null;\r\n                        while (!string.IsNullOrEmpty(line = reader.ReadLine()))\r\n                        {\r\n                            Console.WriteLine($\"    [request:{request}] Server received: {line}\");\r\n                        }\r\n\r\n                        Console.WriteLine($\"    Server sending response\\r\\n\");\r\n                        writer.Write(\r\n                            \"HTTP/1.1 407 Proxy Authentication Required\\r\\n\" +\r\n                            \"Proxy-Authenticate: NEGOTIATE\\r\\n\" +\r\n                            \"Proxy-Authenticate: NTLM\\r\\n\" +\r\n                            \"Proxy-Authenticate: BASIC realm=\\\"IWA_Direct\\\"\\r\\n\" +\r\n                            \"Cache-Control: no-cache\\r\\n\" +\r\n                            \"Pragma: no-cache\\r\\n\" +\r\n                            \"Content-Length: 0\\r\\n\\r\\n\");\r\n                        request++;\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    });\r\n            \r\n    var serverUri = new Uri(\"https://corefx-net.cloudapp.net/echo.ashx/\"); // HTTPS endpoint\r\n\r\n    var handler = new HttpClientHandler();\r\n    handler.Proxy = new WebProxy(proxyUri);\r\n    handler.Proxy.Credentials = new NetworkCredential(\"username\", \"password\", \"domain\");\r\n    using (var client = new HttpClient(handler))\r\n    {\r\n        Console.WriteLine($\"Doing GET for {serverUri}\");\r\n        HttpResponseMessage response = client.GetAsync(serverUri).GetAwaiter().GetResult();\r\n    }\r\n}\r\n```\r\n\r\nIf you run this code, you'll see that the loopback proxy server only receives 1 request.  \r\n\r\n```\r\n(Framework: C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\2.2.0-preview1-26609-02)\r\nDoing GET for https://corefx-net.cloudapp.net/echo.ashx/\r\n    [request:1] Server received: CONNECT corefx-net.cloudapp.net:443 HTTP/1.1\r\n    [request:1] Server received: Host: corefx-net.cloudapp.net:443\r\n    Server sending response\r\n```\r\n\r\nIf you change the above code so that the proxy only requests 'Basic' scheme, then the loopback proxy server receives 2 requests where the second request has the 'Proxy-Authorization Basic *blob*' request header.\r\n\r\n```\r\n(Framework: C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\2.2.0-preview1-26609-02)\r\nDoing GET for https://corefx-net.cloudapp.net/echo.ashx/\r\n    [request:1] Server received: CONNECT corefx-net.cloudapp.net:443 HTTP/1.1\r\n    [request:1] Server received: Host: corefx-net.cloudapp.net:443\r\n    Server sending response\r\n\r\n    [request:2] Server received: CONNECT corefx-net.cloudapp.net:443 HTTP/1.1\r\n    [request:2] Server received: Host: corefx-net.cloudapp.net:443\r\n    [request:2] Server received: Proxy-Authorization: Basic ZG9tYWluXHVzZXJuYW1lOnBhc3N3b3Jk\r\n    Server sending response\r\n```"},{"Id":"7895084552","Type":"IssuesEvent","CreatedAt":"2018-06-29T00:56:01","Actor":"GrabYourPitchforks","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/30747","RelatedDescription":"Opened issue \"ManagedWebSocket.ApplyMask has an invalid (unaligned) cast\" (#30747) at dotnet/corefx","RelatedBody":"https://github.com/dotnet/corefx/blob/e36eaec682d5fa81bc1754e89787b0353b9c46b8/src/Common/src/System/Net/WebSockets/ManagedWebSocket.cs#L1262\r\n\r\nIt is invalid to reinterpret cast a `ref byte` to a `ref Vector<byte>` without first checking the alignment of the input buffer. This could cause problems on future architectures or IOT devices where unaligned reads incur faults. This code should pin and check alignment or should use `Unsafe.ReadUnaligned` instead."}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7895079042","Type":"PullRequestEvent","CreatedAt":"2018-06-29T00:53:42","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/5723","RelatedDescription":"Closed pull request \"Add StdCall intrinsic support\" (#5723) at dotnet/corert","RelatedBody":"This is a building block to be able to write a repro case for #5587 in C#. With this, it's possible to use `AddrOf` intrinsic in connection with `StdCall` and a `NativeCallable` method to hit the unimplemented functionality with pure C#."},{"Id":"7894402846","Type":"PullRequestEvent","CreatedAt":"2018-06-28T21:21:36","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6031","RelatedDescription":"Opened pull request \"Make emission of managed resources controlled by a policy\" (#6031) at dotnet/corert","RelatedBody":"This makes it possible for the compiler to filter what managed resources should be included in the executable image.\r\n\r\nI'm implementing a RESX blocking policy for framework assemblies. This will be used to block emission of framework exception messages. I'm planning to use this from the ProjectX side. Eventually, I would also like to expose this on the CoreRT compiler side. Submitting through git because it's just a better way to do development. I'll follow up on the TFS side and pipe it through NUTC."},{"Id":"7892201052","Type":"PullRequestEvent","CreatedAt":"2018-06-28T14:23:48","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6030","RelatedDescription":"Opened pull request \"Fix MembersMustExist to account for dotnet/coreclr#18645\" (#6030) at dotnet/corert","RelatedBody":"Found as blocking TFS integration."},{"Id":"7891746343","Type":"PullRequestEvent","CreatedAt":"2018-06-28T13:10:13","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6028","RelatedDescription":"Merged pull request \"[32BIT] Fix cpp codegen\" (#6028) at dotnet/corert","RelatedBody":"@dotnet/arm32-corert-contrib please review"},{"Id":"7890848170","Type":"PullRequestEvent","CreatedAt":"2018-06-28T10:03:50","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6029","RelatedDescription":"Merged pull request \"Typo\" (#6029) at dotnet/corert","RelatedBody":""},{"Id":"7890645525","Type":"PullRequestEvent","CreatedAt":"2018-06-28T09:26:58","Actor":"github-john-doe","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6029","RelatedDescription":"Opened pull request \"Typo\" (#6029) at dotnet/corert","RelatedBody":""},{"Id":"7890527008","Type":"PullRequestEvent","CreatedAt":"2018-06-28T09:05:41","Actor":"BredPet","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6028","RelatedDescription":"Opened pull request \"[32BIT] Fix cpp codegen\" (#6028) at dotnet/corert","RelatedBody":"@dotnet/arm32-corert-contrib please review"},{"Id":"7888951540","Type":"PullRequestEvent","CreatedAt":"2018-06-28T00:57:38","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6027","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#6027) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub"},{"Id":"7888766909","Type":"PullRequestEvent","CreatedAt":"2018-06-27T23:46:53","Actor":"dotnet-maestro-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6027","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#6027) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1010269960948465665","CreatedAt":"2018-06-22T21:15:03+00:00","UserScreenname":"dotnet","Text":".NET Core 2.0 End of Life Extended to October 1, 2018 https://t.co/KQAlfqjfGv","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":54,"FavoriteCount":51,"RawContent":null},{"Id":"1010268594725269504","CreatedAt":"2018-06-22T21:09:37+00:00","UserScreenname":"dotnet","Text":".NET Core 2.1 June Update https://t.co/GJkOJkg0zJ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":135,"FavoriteCount":85,"RawContent":null},{"Id":"1010144767924154368","CreatedAt":"2018-06-22T12:57:34+00:00","UserScreenname":"dotnet","Text":"It's #fsharp Friday on Fritz and Friends with our friend @csharpfritz  -- tune in today and learn about… https://t.co/tBMBYu7qnC","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":21,"FavoriteCount":11,"RawContent":null},{"Id":"1009783192751099904","CreatedAt":"2018-06-21T13:00:48+00:00","UserScreenname":"dotnet","Text":"These two are always great to learn from separately, and today they're working together.  You won't want to miss… https://t.co/DhpOULOjfn","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":15,"FavoriteCount":3,"RawContent":null},{"Id":"1009514602428710912","CreatedAt":"2018-06-20T19:13:31+00:00","UserScreenname":"dotnet","Text":".NET Core 2.0 will reach End of Life on September 1, 2018 https://t.co/5PoTWEAQgt","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":269,"FavoriteCount":305,"RawContent":null},{"Id":"1009477602791133186","CreatedAt":"2018-06-20T16:46:30+00:00","UserScreenname":"dotnet","Text":"Call for papers now open for #dotnetconf virtual event in September! Present to our worldwide community. No travel… https://t.co/KraqcAKxAo","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":357,"FavoriteCount":255,"RawContent":null},{"Id":"1009207915775811584","CreatedAt":"2018-06-19T22:54:51+00:00","UserScreenname":"dotnet","Text":"The RyuJIT transition is complete! https://t.co/JhkSV0Aybh","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":322,"FavoriteCount":171,"RawContent":null}]}},"RunOn":"2018-06-29T05:30:33.1424871Z","RunDurationInMilliseconds":7524}