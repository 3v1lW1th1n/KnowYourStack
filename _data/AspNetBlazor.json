{"Data":{"GitHubIssues":{"Issues":[{"Id":"318242553","IsPullRequest":true,"CreatedAt":"2018-04-27T00:47:10","Actor":"danroth27","Number":"692","RawContent":null,"Title":"[WIP] Fixup project templates to handle project names with dashes","State":"open","Body":"This template update is a partial fix for when the project name has a dash in it. \r\n\r\nIt's  only a partial fix because it doesn't address sanitizing the namespace for the generated component classes. @rynowak Is this something you could help me out with?","Url":"https://github.com/aspnet/Blazor/pull/692","RelatedDescription":"Open PR \"[WIP] Fixup project templates to handle project names with dashes\" (#692)"},{"Id":"318212707","IsPullRequest":true,"CreatedAt":"2018-04-26T22:02:00","Actor":"SteveSandersonMS","Number":"691","RawContent":null,"Title":"OnAfterRender / OnAfterRenderAsync","State":"open","Body":"Gives components notification when rendering has occurred. This makes it possible to perform additional initialization, such as activating third-party JS libraries that want to operate on the rendered DOM elements.\r\n\r\nI've chained this PR onto #685 because I wanted the E2E test to cover the combination of these two features, as it's the most interesting and important use case.","Url":"https://github.com/aspnet/Blazor/pull/691","RelatedDescription":"Open PR \"OnAfterRender / OnAfterRenderAsync\" (#691)"},{"Id":"318141013","IsPullRequest":false,"CreatedAt":"2018-04-26T21:03:07","Actor":"alexfdezsauco","Number":"688","RawContent":null,"Title":"Expose getRegisteredFunctions from Blazor javascript module","State":"closed","Body":"Should be possible expose the getRegisteredFunctions from Blazor javascript module.\r\n\r\nThis could be useful in custom interop solutions like this one for promises:\r\n\r\nhttps://joonasw.net/view/csharp-await-and-js-promises-in-blazor\r\n\r\ndoesn't require 'host' the functions in the window object. Just use the same approach to register the function to be called.\r\n\r\nThe implementation could be this one:\r\n\r\n`let promise = Blazor.getRegisteredFunction(fnName)(data)`\r\n\r\ninstead this one:\r\n\r\n`let promise = window[fnName](data);`\r\n\r\nBWT, could Blazor include a solution like this one https://joonasw.net/view/csharp-await-and-js-promises-in-blazor to call promise (async/await).","Url":"https://github.com/aspnet/Blazor/issues/688","RelatedDescription":"Closed issue \"Expose getRegisteredFunctions from Blazor javascript module\" (#688)"},{"Id":"318173475","IsPullRequest":false,"CreatedAt":"2018-04-26T21:00:58","Actor":"grahamehorner","Number":"689","RawContent":null,"Title":"[Feature Request] Generate JavaScriptInterop using Roslyn","State":"closed","Body":"IMHO It would be a great if Blazor used Roslyn to dynamically create in memory implementation of JavaScriptInterop based of c# abstract classes, eg.\r\n\r\n`\r\nnamespace someJavascriptNamespace {\r\npublic abstract class someJavaScriptInterop { \r\npublic abstract bool someJavaScriptMethod(string stringParameter, bool boolParameter);\r\n...\r\n}\r\n}\r\n\r\n/// use roslyn to generate and compile the code that calls/invokes the javascript  \r\nTJavaScriptInteropDefinition GenerateImplementation<TJavaScriptInteropDefinition>( );\r\n`\r\n/// calling the generated implementation \r\nvar result = GenerateImplementation<TJavaScriptInteropDefinition>( )\r\n.someJavaScriptMethod(\"\",true);\r\n\r\n\r\n\r\n","Url":"https://github.com/aspnet/Blazor/issues/689","RelatedDescription":"Closed issue \"[Feature Request] Generate JavaScriptInterop using Roslyn\" (#689)"},{"Id":"318194771","IsPullRequest":false,"CreatedAt":"2018-04-26T21:00:00","Actor":"danroth27","Number":"690","RawContent":null,"Title":"Bootstrap 4 component library","State":"open","Body":"","Url":"https://github.com/aspnet/Blazor/issues/690","RelatedDescription":"Open issue \"Bootstrap 4 component library\" (#690)"},{"Id":"318028339","IsPullRequest":false,"CreatedAt":"2018-04-26T13:45:17","Actor":"daveabrock","Number":"687","RawContent":null,"Title":"Getting started?","State":"closed","Body":"Hey all! I am loving this project and would love to help! Of course, I read through the [contributing guide](https://github.com/aspnet/Blazor/blob/dev/CONTRIBUTING.md) so would be happy to look at any issues or make suggestions, but is there anything that newbies to Blazor could review? If not, I can just play with it and help where I can!","Url":"https://github.com/aspnet/Blazor/issues/687","RelatedDescription":"Closed issue \"Getting started?\" (#687)"},{"Id":"317946390","IsPullRequest":true,"CreatedAt":"2018-04-26T12:30:07","Actor":"Daddoon","Number":"684","RawContent":null,"Title":"Added OnRemove and OnRemoveAsync method on BlazorComponent","State":"closed","Body":"Added **OnRemove** and **OnRemoveAsync** method on **BlazorComponent**.\r\n\r\nLike the opposite of OnInit and OnInitAsync, theses methods are overridable, and will be called once when disposing in ComponentState.DisposeInBatch method.\r\n\r\nThis way we can leverage some specific event based on type or data or whatever.\r\n\r\nMy actual needs were more for caching some component somewhere, like some \"singleton\" component, but being able to track them if any dispose occur, in order to free their reference/existence somewhere in my app for consistency and security.\r\n\r\nI searched for an existing unit test for this case, something like OnInit, but i didn't find it.\r\n\r\nTested on the template project, with a nested component in a foreach loop, then leaving the page, checking that OnRemove was called.","Url":"https://github.com/aspnet/Blazor/pull/684","RelatedDescription":"Closed or merged PR \"Added OnRemove and OnRemoveAsync method on BlazorComponent\" (#684)"},{"Id":"317990596","IsPullRequest":false,"CreatedAt":"2018-04-26T11:41:12","Actor":"ivryakhov","Number":"686","RawContent":null,"Title":"Failed to set a RenderFragment property of a child component","State":"closed","Body":"Hi,\r\n\r\nthere is an error in browser's console when I try to pass some text to a child component via a RenderFragment property as it is described in a doc. The page is not rendered as a result.\r\n\r\nI'm going throw the Blazor's tutorial from https://blazor.net/docs/components/index.html\r\nAnd I have a fault trying to execute examples from the **Child content** section.\r\n\r\nI created the both  _ParentComponent.cshtml_ and _ChildComponent.cshtml_ with  the same content as described in the doc. \r\n\r\n_ParentComponent.cshtml:_\r\n```\r\n@page \"/ParentComponent\"\r\n\r\n<h1>Parent-child example</h1>\r\n\r\n<ChildComponent Title=\"Panel Title from Parent\">\r\n    Panel content of the child component is supplied by the parent component.\r\n</ChildComponent>\r\n```\r\n\r\n_ChildComponent.cshtml:_\r\n```\r\n<div class=\"panel panel-success\">\r\n  <div class=\"panel-heading\">@Title</div>\r\n  <div class=\"panel-body\">@PanelContent</div>\r\n</div>\r\n\r\n@functions {\r\n    public string Title { get; set; }\r\n    public RenderFragment PanelContent { get; set; }\r\n}\r\n```\r\n\r\n\r\nAs a result, there are a lot of errors in a browser's console after trying to render the /ParentComponent page:\r\n\r\n> Uncaught (in promise) Error: System.InvalidOperationException: Object of type 'WebApplication1.Pages.ChildComponent' does not have a property matching the name 'ChildContent'.\r\n>   at Microsoft.AspNetCore.Blazor.Components.ParameterCollectionExtensions.GetPropertyInfo (System.Type targetType, System.String propertyName) <0x1a16c48 + 0x00058> in <8a8022566b074cca8a70e10050945cdd>:0 \r\n\r\n<details> \r\n  <summary>The full trace: </summary>\r\n\r\n> Uncaught (in promise) Error: System.InvalidOperationException: Object of type 'WebApplication1.Pages.ChildComponent' does not have a property matching the name 'ChildContent'.\r\n>   at Microsoft.AspNetCore.Blazor.Components.ParameterCollectionExtensions.GetPropertyInfo (System.Type targetType, System.String propertyName) <0x1a16c48 + 0x00058> in <8a8022566b074cca8a70e10050945cdd>:0 \r\n>   at Microsoft.AspNetCore.Blazor.Components.ParameterCollectionExtensions.AssignToProperty (System.Object target, Microsoft.AspNetCore.Blazor.Components.Parameter parameter) <0x1a16a70 + 0x00022> in <8a8022566b074cca8a70e10050945cdd>:0 \r\n>   at Microsoft.AspNetCore.Blazor.Components.ParameterCollectionExtensions.AssignToProperties (Microsoft.AspNetCore.Blazor.Components.ParameterCollection parameterCollection, System.Object target) <0x19cc3c8 + 0x00060> in <8a8022566b074cca8a70e10050945cdd>:0 \r\n>   at Microsoft.AspNetCore.Blazor.Components.BlazorComponent.SetParameters (Microsoft.AspNetCore.Blazor.Components.ParameterCollection parameters) <0x19cc0a8 + 0x00018> in <8a8022566b074cca8a70e10050945cdd>:0 \r\n>   at Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder.InitializeNewComponentFrame (Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder+DiffContext& diffContext, System.Int32 frameIndex) <0x19dd138 + 0x0007a> in <8a8022566b074cca8a70e10050945cdd>:0 \r\n>   at Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder.InitializeNewSubtree (Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder+DiffContext& diffContext, System.Int32 frameIndex) <0x19dcfe0 + 0x00074> in <8a8022566b074cca8a70e10050945cdd>:0 \r\n>   at Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder.InsertNewFrame (Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder+DiffContext& diffContext, System.Int32 newFrameIndex) <0x19dca70 + 0x000b4> in <8a8022566b074cca8a70e10050945cdd>:0 \r\n>   at Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder.AppendDiffEntriesForRange (Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder+DiffContext& diffContext, System.Int32 oldStartIndex, System.Int32 oldEndIndexExcl, System.Int32 newStartIndex, System.Int32 newEndIndexExcl) <0x19dc400 + 0x0025e> in <8a8022566b074cca8a70e10050945cdd>:0 \r\n>   at Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder.ComputeDiff (Microsoft.AspNetCore.Blazor.Rendering.Renderer renderer, Microsoft.AspNetCore.Blazor.Rendering.RenderBatchBuilder batchBuilder, System.Int32 componentId, Microsoft.AspNetCore.Blazor.RenderTree.ArrayRange`1[T] oldTree, Microsoft.AspNetCore.Blazor.RenderTree.ArrayRange`1[T] newTree) <0x19d5b80 + 0x000a2> in <8a8022566b074cca8a70e10050945cdd>:0 \r\n>   at Microsoft.AspNetCore.Blazor.Rendering.ComponentState.RenderIntoBatch (Microsoft.AspNetCore.Blazor.Rendering.RenderBatchBuilder batchBuilder, Microsoft.AspNetCore.Blazor.RenderFragment renderFragment) <0x19d2dc0 + 0x000b4> in <8a8022566b074cca8a70e10050945cdd>:0 \r\n>   at Microsoft.AspNetCore.Blazor.Rendering.Renderer.RenderInExistingBatch (Microsoft.AspNetCore.Blazor.Rendering.RenderQueueEntry renderQueueEntry) <0x19d2968 + 0x00040> in <8a8022566b074cca8a70e10050945cdd>:0 \r\n>   at Microsoft.AspNetCore.Blazor.Rendering.Renderer.ProcessRenderQueue () <0x19cdb80 + 0x00048> in <8a8022566b074cca8a70e10050945cdd>:0 \r\n>   at Microsoft.AspNetCore.Blazor.Rendering.Renderer.AddToRenderQueue (System.Int32 componentId, Microsoft.AspNetCore.Blazor.RenderFragment renderFragment) <0x19ccbf8 + 0x00068> in <8a8022566b074cca8a70e10050945cdd>:0 \r\n>   at Microsoft.AspNetCore.Blazor.Components.RenderHandle.Render (Microsoft.AspNetCore.Blazor.RenderFragment renderFragment) <0x19cc8e0 + 0x00036> in <8a8022566b074cca8a70e10050945cdd>:0 \r\n>   at Microsoft.AspNetCore.Blazor.Components.BlazorComponent.StateHasChanged () <0x19cc7e8 + 0x00048> in <8a8022566b074cca8a70e10050945cdd>:0 \r\n>   at Microsoft.AspNetCore.Blazor.Components.BlazorComponent.SetParameters (Microsoft.AspNetCore.Blazor.Components.ParameterCollection parameters) <0x19cc0a8 + 0x000b2> in <8a8022566b074cca8a70e10050945cdd>:0 \r\n>   at Microsoft.AspNetCore.Blazor.Browser.Rendering.BrowserRenderer.AddComponent (System.Type componentType, System.String domElementSelector) <0x1995690 + 0x0005e> in <08ceae4b872f4f8d8ccefc410a9a8971>:0 \r\n>   at Microsoft.AspNetCore.Blazor.Browser.Rendering.BrowserRenderer.AddComponent[TComponent] (System.String domElementSelector) <0x1995380 + 0x00020> in <08ceae4b872f4f8d8ccefc410a9a8971>:0 \r\n>   at WebApplication1.Program.Main (System.String[] args) <0x184fbc0 + 0x00036> in <98a6978f1ec940a2bec6710e05bf3770>:0 \r\n>   at Microsoft.AspNetCore.Blazor.Components.ParameterCollectionExtensions.GetPropertyInfo (System.Type targetType, System.String propertyName) <0x1a16c48 + 0x00058> in <8a8022566b074cca8a70e10050945cdd>:0 \r\n>   at Microsoft.AspNetCore.Blazor.Components.ParameterCollectionExtensions.AssignToProperty (System.Object target, Microsoft.AspNetCore.Blazor.Components.Parameter parameter) <0x1a16a70 + 0x00022> in <8a8022566b074cca8a70e10050945cdd>:0 \r\n>   at Microsoft.AspNetCore.Blazor.Components.ParameterCollectionExtensions.AssignToProperties (Microsoft.AspNetCore.Blazor.Components.ParameterCollection parameterCollection, System.Object target) <0x19cc3c8 + 0x00060> in <8a8022566b074cca8a70e10050945cdd>:0 \r\n>   at Microsoft.AspNetCore.Blazor.Components.BlazorComponent.SetParameters (Microsoft.AspNetCore.Blazor.Components.ParameterCollection parameters) <0x19cc0a8 + 0x00018> in <8a8022566b074cca8a70e10050945cdd>:0 \r\n>   at Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder.InitializeNewComponentFrame (Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder+DiffContext& diffContext, System.Int32 frameIndex) <0x19dd138 + 0x0007a> in <8a8022566b074cca8a70e10050945cdd>:0 \r\n>   at Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder.InitializeNewSubtree (Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder+DiffContext& diffContext, System.Int32 frameIndex) <0x19dcfe0 + 0x00074> in <8a8022566b074cca8a70e10050945cdd>:0 \r\n>   at Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder.InsertNewFrame (Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder+DiffContext& diffContext, System.Int32 newFrameIndex) <0x19dca70 + 0x000b4> in <8a8022566b074cca8a70e10050945cdd>:0 \r\n>   at Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder.AppendDiffEntriesForRange (Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder+DiffContext& diffContext, System.Int32 oldStartIndex, System.Int32 oldEndIndexExcl, System.Int32 newStartIndex, System.Int32 newEndIndexExcl) <0x19dc400 + 0x0025e> in <8a8022566b074cca8a70e10050945cdd>:0 \r\n>   at Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder.ComputeDiff (Microsoft.AspNetCore.Blazor.Rendering.Renderer renderer, Microsoft.AspNetCore.Blazor.Rendering.RenderBatchBuilder batchBuilder, System.Int32 componentId, Microsoft.AspNetCore.Blazor.RenderTree.ArrayRange`1[T] oldTree, Microsoft.AspNetCore.Blazor.RenderTree.ArrayRange`1[T] newTree) <0x19d5b80 + 0x000a2> in <8a8022566b074cca8a70e10050945cdd>:0 \r\n>   at Microsoft.AspNetCore.Blazor.Rendering.ComponentState.RenderIntoBatch (Microsoft.AspNetCore.Blazor.Rendering.RenderBatchBuilder batchBuilder, Microsoft.AspNetCore.Blazor.RenderFragment renderFragment) <0x19d2dc0 + 0x000b4> in <8a8022566b074cca8a70e10050945cdd>:0 \r\n>   at Microsoft.AspNetCore.Blazor.Rendering.Renderer.RenderInExistingBatch (Microsoft.AspNetCore.Blazor.Rendering.RenderQueueEntry renderQueueEntry) <0x19d2968 + 0x00040> in <8a8022566b074cca8a70e10050945cdd>:0 \r\n>   at Microsoft.AspNetCore.Blazor.Rendering.Renderer.ProcessRenderQueue () <0x19cdb80 + 0x00048> in <8a8022566b074cca8a70e10050945cdd>:0 \r\n>   at Microsoft.AspNetCore.Blazor.Rendering.Renderer.AddToRenderQueue (System.Int32 componentId, Microsoft.AspNetCore.Blazor.RenderFragment renderFragment) <0x19ccbf8 + 0x00068> in <8a8022566b074cca8a70e10050945cdd>:0 \r\n>   at Microsoft.AspNetCore.Blazor.Components.RenderHandle.Render (Microsoft.AspNetCore.Blazor.RenderFragment renderFragment) <0x19cc8e0 + 0x00036> in <8a8022566b074cca8a70e10050945cdd>:0 \r\n>   at Microsoft.AspNetCore.Blazor.Components.BlazorComponent.StateHasChanged () <0x19cc7e8 + 0x00048> in <8a8022566b074cca8a70e10050945cdd>:0 \r\n>   at Microsoft.AspNetCore.Blazor.Components.BlazorComponent.SetParameters (Microsoft.AspNetCore.Blazor.Components.ParameterCollection parameters) <0x19cc0a8 + 0x000b2> in <8a8022566b074cca8a70e10050945cdd>:0 \r\n>   at Microsoft.AspNetCore.Blazor.Browser.Rendering.BrowserRenderer.AddComponent (System.Type componentType, System.String domElementSelector) <0x1995690 + 0x0005e> in <08ceae4b872f4f8d8ccefc410a9a8971>:0 \r\n>   at Microsoft.AspNetCore.Blazor.Browser.Rendering.BrowserRenderer.AddComponent[TComponent] (System.String domElementSelector) <0x1995380 + 0x00020> in <08ceae4b872f4f8d8ccefc410a9a8971>:0 \r\n>   at WebApplication1.Program.Main (System.String[] args) <0x184fbc0 + 0x00036> in <98a6978f1ec940a2bec6710e05bf3770>:0 \r\n>     at Object.callMethod (MonoPlatform.ts:70)\r\n>     at Object.callEntryPoint (MonoPlatform.ts:47)\r\n>     at Boot.ts:38\r\n>     at step (UriHelper.ts:89)\r\n>     at Object.next (UriHelper.ts:89)\r\n>     at fulfilled (UriHelper.ts:89)\r\n\r\n</details>\r\n<br>\r\nI'm not sure if this is a bug or documentation is outdated. Though, I didn't find any spec if is it allowed to pass RenderFragment to a child component.\r\n\r\n\r\nMy setup:\r\n- Windows 8\r\n- Visual Studio 2017 15.7 preview\r\n- .NET Core 2.1 Preview 2 SDK.\r\n- Blazor 0.2.0\r\n- Chrome browser  65.0.3325.181\r\n\r\n\r\n\r\n","Url":"https://github.com/aspnet/Blazor/issues/686","RelatedDescription":"Closed issue \"Failed to set a RenderFragment property of a child component\" (#686)"},{"Id":"317608058","IsPullRequest":false,"CreatedAt":"2018-04-26T11:39:30","Actor":"SergeySeleznyov","Number":"679","RawContent":null,"Title":"RenderTreeBuilder - Make methods virtual","State":"closed","Body":"Let's suppose I have markup as shown below:\r\n\r\n```\r\n<MyComponent>\r\n    <RowTemplate>\r\n        <div>\"@SomeExpression\"<div>\r\n    </RowTemplate>\r\n    <SomeSettings Mode=\"Auto\"/>\r\n</MyComponent>\r\n```\r\n\r\nCurrently, it is possible to manage where to render the nested markup:\r\n\r\n```\r\npublic class MyComponent : BlazorDataComponent \r\n{\r\n\tpublic RenderFragment ChildContent { get; set; }\r\n        protected override void BuildRenderTree(RenderTreeBuilder builder)\r\n        {\r\n        \t// ...\r\n        \t// Some render tree building \r\n        \t// ...\r\n            ChildContent(builder); // here\r\n            // ...\r\n            // Some render tree building \r\n            // ...\r\n        }\r\n}\r\n```\r\n\r\nIf methods of the RenderTreeBuilder class (the type of \"builder\" in the example above) were virtual, it would allow us to affect Blazor's process of tree building.\r\nDerive from RenderTreeBuilder and override all required methods:\r\n\r\n```\r\npublic class MyRenderTreeBuilder : RenderTreeBuilder\r\n{\r\n    public MyRenderTreeBuilder(Renderer renderer) : base(renderer)\r\n    {\r\n    }\r\n\r\n    public override void OpenElement(int sequence, string elementName) \r\n    {\r\n    \tif(elementName == \"SomeSettings\") { ... }\r\n    \tif(elementName == \"RowTemplate\") { ... }\r\n    \t...\r\n    }\r\n\r\n    public override ...\r\n}\r\n```\r\n\r\nInject the derived MyRenderTreeBuilder into BuildRenderTree method:\r\n\r\n```\r\npublic class MyComponent : BlazorDataComponent \r\n{\r\n\tpublic RenderFragment ChildContent { get; set; }\r\n        protected override void BuildRenderTree(RenderTreeBuilder builder)\r\n        {\r\n        \tvar myBuilder = new MyRenderTreeBuilder();\r\n            ChildContent(myBuilder); // Process the tree internally and pass the processed tree to the Blazor\r\n        \t\r\n        \t// ...\r\n\r\n        }\r\n}\r\n```\r\n\r\nProcess the tree internally and pass the processed tree to the Blazor.\r\n\r\nIf this were done, we would be granted a powerful capability to build rich components.","Url":"https://github.com/aspnet/Blazor/issues/679","RelatedDescription":"Closed issue \"RenderTreeBuilder - Make methods virtual\" (#679)"},{"Id":"317988519","IsPullRequest":true,"CreatedAt":"2018-04-26T11:31:20","Actor":"SteveSandersonMS","Number":"685","RawContent":null,"Title":"Support 'ref' syntax for capturing references to elements and components","State":"open","Body":"First, apologies that this is such a massive PR. It involves every level of the system, including tooling, compilation, component APIs, rendering/diffing, and JS interop. I'm providing the following information in the hope that it will be useful when writing docs for these features.\r\n\r\nThis PR provides two related features:\r\n\r\n### Capturing references to elements\r\n\r\nExample:\r\n\r\n```\r\n    <input ref=\"username\" ... />\r\n\r\n    @functions {\r\n        ElementRef username;\r\n    }\r\n```\r\n\r\nAs far as .NET code is concerned, an `ElementRef` is an opaque handle. The *only* thing you can do with it is pass it through to JS code via JSON-marshalled interop. When you do so, the JS-side code receives an `HTMLElement` instance which it can use in normal DOM APIs.\r\n\r\nFor example, if you registered the following:\r\n\r\n```js\r\nBlazor.registerFunction('MyLib.FocusElement', function (element) {\r\n    element.focus();\r\n});\r\n```\r\n\r\n... then in .NET code you could also define an extension method:\r\n\r\n```csharp\r\nnamespace MyLib\r\n{\r\n    public static class MyLibElementRefExtensions\r\n    {\r\n        public static void Focus(this ElementRef elementRef)\r\n        {\r\n            RegisteredFunction.Invoke<object>(\"MyLib.FocusElement\", elementRef);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nNow you can focus inputs in any of your components:\r\n\r\n```\r\n    @using MyLib\r\n\r\n    <input ref=\"username\" />\r\n    <button onclick=\"@SetFocus\">Set focus</button>\r\n\r\n    @functions {\r\n        ElementRef username;\r\n\r\n        void SetFocus()\r\n        {\r\n            username.Focus();\r\n        }\r\n    }\r\n```\r\n\r\n*Important*: The `username` variable will only be populated after the component has rendered and its output includes the `<input>` element, because until then there is nothing to reference. If you try to pass an unpopulated `ElementRef` to JS code, then the JS code will receive `null`. Once we implement support for an \"after render\" lifecycle method, you'll be able to put code in it that lifecycle method that, for example, sets the initial focus on an element as soon as the component is first rendered.\r\n\r\n**Use case**\r\n\r\nThe intended use cases for this feature are:\r\n\r\n1. Integration with third-party UI libraries (such as Bootstrap) whose APIs sometimes require you to pass them references to elements for initialization\r\n2. Calling DOM APIs that represent \"commands\" such as `focus` or `play` (but *not* APIs that are for constructing content, such as setting text).\r\n\r\nIt is **strongly not recommended** to use this as a way of populating the DOM routinely in cases where you could instead use Blazor's normal declarative rendering. Declarative rendering is strongly preferred because it knows how to update automatically at the correct time with minimal diffs.\r\n\r\n### Capturing references to components\r\n\r\nSimilarly, you can use `ref` on child components:\r\n\r\n```\r\n    <MyLoginDialog ref=\"loginDialog\" ... />\r\n\r\n    @functions {\r\n        MyLoginDialog loginDialog;\r\n\r\n        void OnSomething()\r\n        {\r\n            loginDialog.Show();\r\n        }\r\n    }\r\n```\r\n\r\nAs you can see, in this case the value type is not `ElementRef`, but instead is the type of the component being referenced. Again, the `loginDialog` field will only be non-`null` once the component is rendered, because until then there is no child component to reference.\r\n\r\n*Note:* This is not a JS interop feature. It's not expected that you will pass instances of Blazor components to JS code, because the JS code would not be able to do anything meaningful with it. It's only expected that you'll use the references in .NET code.\r\n\r\n**Use case**\r\n\r\nThe intended use case is to allow parent components to issue commands to child components such as \"show\" or \"reset\".\r\n\r\nEven then, architecturally it's a compromise because it would be cleaner still for your child components to be stateless (that is, not acting on any state other than their parameters) and in that case it's not even theoretically possible for it to make sense to issue an \"action\" other than by changing their child's parameters, in which case you don't need `ref` at all.\r\n\r\nIt is **strongly not recommended** that you use `ref` as a way of mutating the state of child components. Instead, always use normal declarative parameters to pass data to child components. This will cause child components to re-render at the correct times automatically. We are moving towards changing how parameters on components are represented so that by default they are encapsulated and not possible to read/write from outside.\r\n\r\n### Notes for PR reviewers\r\n\r\n**Perf**\r\n\r\nI had to introduce a new `RenderTreeFrame` type to hold a delegate that assigns the reference. This is because we can't obtain the reference during the render phase; we can only obtain it during diffing because that's when children are instantiated.\r\n\r\nWith current versions of C#, this means it will cause one allocation per `ref` per render. Later versions of C# that cache noncapturing lambda delegate instances will only require one allocation per `ref` per component (not per render).\r\n\r\nThat is, except for when it's a capturing lambda (e.g., `<div ref=\"someLoopVariable.SomeReference\" />`. In this case there will always be more allocations, but I consider that enough of an edge case not to mind. Plus it's not like I have any reasonable alternative.\r\n\r\nOther than that, it should be pretty neutral on perf.\r\n\r\n**Issues**\r\n\r\n* The `ref` tag helper doesn't show any intellisense if you prefix its value with `@` (e.g., `<div ref=\"@myThing\" />`), even though it's fine without (e.g., `<div ref=\"myThing\" />`). I have not been able to track down why this difference exists. The source map data *looks* correct. Would appreciate any insight from @rynowak on this! It does work correctly in runtime builds with or without `@`.\r\n* The `ref` tag helper does show correct warning squigglies if you reference a nonexistent variable (e.g., `<div ref=\"somethingThatIsNotDefined\" />`). But it does *not* show squigglies if you reference something of the wrong type (e.g., `<div ref=\"someIntField\" />`). I know why, which is because in the generated code we can only associate the source token with either the assigned variable **or** the value we're assigning to it. In the case of a type mismatch, the error is associated with the value being assigned. I consider it more important to catch the \"nonexistent variable\" case. In both cases the runtime compiler output is correct and makes it easy to diagnose the error. I didn't find any trick to produce alternate design-time code that catches both error types using a single token.","Url":"https://github.com/aspnet/Blazor/pull/685","RelatedDescription":"Open PR \"Support 'ref' syntax for capturing references to elements and components\" (#685)"},{"Id":"317831730","IsPullRequest":true,"CreatedAt":"2018-04-25T23:53:23","Actor":"marcusbooyah","Number":"683","RawContent":null,"Title":"Pass list of references via temp file #682","State":"open","Body":"…ild commands","Url":"https://github.com/aspnet/Blazor/pull/683","RelatedDescription":"Open PR \"Pass list of references via temp file #682\" (#683)"},{"Id":"317807524","IsPullRequest":false,"CreatedAt":"2018-04-25T21:53:37","Actor":"marcusbooyah","Number":"682","RawContent":null,"Title":"Unable to build Blazor: Input too long","State":"open","Body":"This is similar to #554 \r\n\r\nMy project has a long list of references, not embedded resources and I'm getting the same error as #554.\r\n\r\nI think the fix is the same as #561 but for references. ","Url":"https://github.com/aspnet/Blazor/issues/682","RelatedDescription":"Open issue \"Unable to build Blazor: Input too long\" (#682)"},{"Id":"317439801","IsPullRequest":true,"CreatedAt":"2018-04-25T19:46:49","Actor":"rynowak","Number":"672","RawContent":null,"Title":"Make Razor.Design a transitive dependency","State":"closed","Body":"By making Razor.Design a transitive dependency of Blazor.Build we can\r\navoid the need for users to care which version of Razor we depend upon,\r\nand take it out of the templates.","Url":"https://github.com/aspnet/Blazor/pull/672","RelatedDescription":"Closed or merged PR \"Make Razor.Design a transitive dependency\" (#672)"},{"Id":"317696079","IsPullRequest":false,"CreatedAt":"2018-04-25T16:32:14","Actor":"copernicus365","Number":"681","RawContent":null,"Title":"Use Blazor just for client side C# code in place of JavaScript (no UI)","State":"closed","Body":"I don't know if this is already possible or not, but could Blazor be used just for getting C# working as client-side code in place of JavaScript, while keeping the regular html / css rendering? \r\n\r\nIf I could preempt one comment: No, I'm not trying to replace every day little client-side javascript, but for more significant use cases. \r\n\r\nHere's one example: See this [blazedown](https://www.telerik.com/blogs/blazedown-experiment-with-markdown-and-blazor) experiment. Like him, I happen to be using MarkDig on the backend to render markdown, while for the ongoing preview while client types, I make calls to the backend every half second etc to render an html preview panel of the document (yes, I could use, as I did originally, one of the javascript based MD renderers, but without going into details, this way gives me consistent *and* better results to what I'm doing on the backend for rendering). It would be terrific if MarkDig could be compiled and used client-side with Blazor, using whatever it does to get .NET working with webassembly on the client, without replacing the UI. So I'm envisioning a way to probably use javascript to call functions in the webassembly / blazor .NET code. Or is that just not possible?\r\n\r\nThanks y'all ","Url":"https://github.com/aspnet/Blazor/issues/681","RelatedDescription":"Closed issue \"Use Blazor just for client side C# code in place of JavaScript (no UI)\" (#681)"},{"Id":"317575559","IsPullRequest":false,"CreatedAt":"2018-04-25T15:34:28","Actor":"Smilefounder","Number":"678","RawContent":null,"Title":"\"<blazor-component>\" auto-gen HTML tag will break the CSS layout (e.g bootstrap > btn-group)","State":"closed","Body":"Hi team,\r\n\r\nAs you can see from below, \"<blazor-component>\" auto-gen HTML tag will break the CSS layout (e.g bootstrap > btn-group). Could you help advise?\r\n\r\n![image](https://user-images.githubusercontent.com/3785721/39241424-0285bd36-48b1-11e8-9f83-3168f1051dc7.png)\r\n\r\nThanks,\r\nHuy\r\n","Url":"https://github.com/aspnet/Blazor/issues/678","RelatedDescription":"Closed issue \"\"<blazor-component>\" auto-gen HTML tag will break the CSS layout (e.g bootstrap > btn-group)\" (#678)"},{"Id":"317630458","IsPullRequest":false,"CreatedAt":"2018-04-25T14:44:04","Actor":"MangeshPersonal","Number":"680","RawContent":null,"Title":"the name @onclick  does not exist in current context","State":"closed","Body":"I am using the button but i am getting error as @onclick does not exist in current context \r\n\r\nplease help","Url":"https://github.com/aspnet/Blazor/issues/680","RelatedDescription":"Closed issue \"the name @onclick  does not exist in current context\" (#680)"},{"Id":"317564745","IsPullRequest":false,"CreatedAt":"2018-04-25T10:16:49","Actor":"Smilefounder","Number":"677","RawContent":null,"Title":"Not able to use Layouts in nested sub-folders","State":"open","Body":"Hi team,\r\n\r\nI tried to use the layouts in nested \"Shared\" sub-folder but not able to use, the site will freeze once you access to the subpages. Please help advise.\r\n\r\n![image](https://user-images.githubusercontent.com/3785721/39239777-26af1b80-48ac-11e8-96e5-3704ddbf0122.png)\r\n\r\nThanks.","Url":"https://github.com/aspnet/Blazor/issues/677","RelatedDescription":"Open issue \"Not able to use Layouts in nested sub-folders\" (#677)"},{"Id":"317423571","IsPullRequest":false,"CreatedAt":"2018-04-25T09:29:55","Actor":"muqeet-khan","Number":"670","RawContent":null,"Title":"Navlink doesn't take base href into account","State":"closed","Body":"https://muqeet-khan.github.io/BlazorComponents.github.io/ is an example of a blazor app hosted on Github pages. I had to modify the base href to get github pages to work. \r\n\r\nBut the navlink component links still point to the local blazor pages URL. Shouldn't the navlink component take the base URL into account?\r\n\r\nFor example, \r\nhttps://muqeet-khan.github.io/BlazorComponents.github.io/linechart works, but, \r\nhttps://muqeet-khan.github.io/linechart does not which is what Navlink is pointing to currently.  \r\n\r\nif not, then, is there a JS interop or API i could invoke before blazor boot that will make it work?\r\n","Url":"https://github.com/aspnet/Blazor/issues/670","RelatedDescription":"Closed issue \"Navlink doesn't take base href into account\" (#670)"},{"Id":"317428489","IsPullRequest":false,"CreatedAt":"2018-04-25T09:23:11","Actor":"Andrzej-W","Number":"671","RawContent":null,"Title":"Project build failed - no error message","State":"closed","Body":"Blazor Language Service v. 15.7.10245\r\nCreate demo project (standalone or hosted). In Counter.cshtml add\r\n`int counter;`\r\nbelow `int currentCount = 0;`\r\nBuild solution. In Error List window warning is displayed that Counter.counter is never used - it is expected.\r\nChange variable name to\r\n`int Counter;`\r\nBuild solution. In VS status bar (blue line at the bottom) I see Build failed. In Error List window I don't see an error.","Url":"https://github.com/aspnet/Blazor/issues/671","RelatedDescription":"Closed issue \"Project build failed - no error message\" (#671)"},{"Id":"317522224","IsPullRequest":false,"CreatedAt":"2018-04-25T09:20:52","Actor":"hhblaze","Number":"675","RawContent":null,"Title":"'Router' cannot find any component with a route for '/index.html'","State":"closed","Body":"Hi, first of all - thank you for your brilliant efforts in blazor!\r\n\r\nNow question.\r\nI try to run sample app on our server. But it doesn't have index.html in the root and complete blazor bundle is located in the subfolder:\r\n\r\n![image](https://user-images.githubusercontent.com/486781/39233456-ae657e84-4870-11e8-8439-956cde5d7c2d.png)\r\n\r\nand I come to the point\r\n\r\n![image](https://user-images.githubusercontent.com/486781/39233495-cf863ebe-4870-11e8-8ae3-dd88d6653e5b.png)\r\n\r\nChanging internal links like this didn't help:\r\n\r\n![image](https://user-images.githubusercontent.com/486781/39233551-f0e75110-4870-11e8-8c3b-4f0d954922f5.png)\r\n\r\nSo, what can be the option?","Url":"https://github.com/aspnet/Blazor/issues/675","RelatedDescription":"Closed issue \"'Router' cannot find any component with a route for '/index.html'\" (#675)"},{"Id":"317522485","IsPullRequest":false,"CreatedAt":"2018-04-25T09:19:08","Actor":"kieronlanning","Number":"676","RawContent":null,"Title":"Question: AAD Authentication integration sample/ advice","State":"closed","Body":"Is there any reference material on integrating Azure Active Directory for authentication into the Blazor framework?\r\n\r\nSimilar, presumably, to [ADAL.JS](https://github.com/AzureAD/azure-activedirectory-library-for-js)?","Url":"https://github.com/aspnet/Blazor/issues/676","RelatedDescription":"Closed issue \"Question: AAD Authentication integration sample/ advice\" (#676)"},{"Id":"317463500","IsPullRequest":false,"CreatedAt":"2018-04-25T03:03:13","Actor":"galvesribeiro","Number":"674","RawContent":null,"Title":"Blazor lib projects JS may need access to 'platform ready' event","State":"open","Body":"While experimenting the new Blazor library projects (which is awesome btw) we've hit a wall when using Blazor APIs.\r\n\r\nTo repro just create a blazor library project and at the .js file, call this:\r\n\r\n```\r\nconst callbackMethod = Blazor.platform.findMethod(\r\n  assemblyName,\r\n  namespace,\r\n  typeName,\r\n  methodName\r\n);\r\n```\r\n\r\nAdd this project to a Blazor app project and just run it.\r\n\r\n![image](https://user-images.githubusercontent.com/4714040/39224046-7ec5e3a8-481b-11e8-8c04-5f062af6059c.png)\r\n\r\nThe project build actions looks like is adding the content properly to the index.html as the scripts are added _after_ mono.js import...\r\n\r\n![image](https://user-images.githubusercontent.com/4714040/39224087-b8d3a81e-481b-11e8-86fc-8c0df4986583.png)\r\n\r\nSo, how to workaround this?\r\n\r\nIt looks to me that all `Blazor.xxx` objects are properly defined in JS except the `Blazor.platform.xxxx`...","Url":"https://github.com/aspnet/Blazor/issues/674","RelatedDescription":"Open issue \"Blazor lib projects JS may need access to 'platform ready' event\" (#674)"},{"Id":"317448570","IsPullRequest":true,"CreatedAt":"2018-04-25T01:31:26","Actor":"zbecknell","Number":"673","RawContent":null,"Title":"Update README.md","State":"closed","Body":"Minor updates in the dev builds section.","Url":"https://github.com/aspnet/Blazor/pull/673","RelatedDescription":"Closed or merged PR \"Update README.md\" (#673)"},{"Id":"317162333","IsPullRequest":false,"CreatedAt":"2018-04-24T20:48:49","Actor":"chassq","Number":"663","RawContent":null,"Title":"TimeZone issues related to Mono?","State":"closed","Body":"Just wanted to report I am seeing issues with timezone related code. See:\r\n\r\n**ERROR**\r\n```\r\nMonoPlatform.ts:70 Uncaught Error: System.TimeZoneNotFoundException: Couldn't read time zone file /usr/share/zoneinfo/Eastern Standard Time ---> System.IO.DirectoryNotFoundException: Could not find a part of the path \"/usr/share/zoneinfo/Eastern Standard Time\".\r\n  at System.IO.FileStream..ctor (System.String path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, System.Int32 bufferSize, System.Boolean anonymous, System.IO.FileOptions options) <0x1f623d8 + 0x00226> in <031009ec673a4a808e11b357311ab8f4>:0 \r\n  at System.IO.FileStream..ctor (System.String path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share) <0x1f5a478 + 0x00032> in <031009ec673a4a808e11b357311ab8f4>:0 \r\n  at System.IO.File.OpenRead (System.String path) <0x1f5a180 + 0x0000e> in <031009ec673a4a808e11b357311ab8f4>:0 \r\n  at System.TimeZoneInfo.FindSystemTimeZoneByFileName (System.String id, System.String filepath) <0x1f59ef0 + 0x00014> in <031009ec673a4a808e11b357311ab8f4>:0 \r\n   --- End of inner exception stack trace ---\r\n  at System.TimeZoneInfo.FindSystemTimeZoneByFileName (System.String id, System.String filepath) <0x1f59ef0 + 0x00038> in <031009ec673a4a808e11b357311ab8f4>:0 \r\n  at System.TimeZoneInfo.FindSystemTimeZoneByIdCore (System.String id) <0x1f596d0 + 0x0001e> in <031009ec673a4a808e11b357311ab8f4>:0 \r\n  at System.TimeZoneInfo.FindSystemTimeZoneById (System.String id) <0x1f594e8 + 0x00030> in <031009ec673a4a808e11b357311ab8f4>:0 \r\n  at System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId (System.DateTimeOffset dateTimeOffset, System.String destinationTimeZoneId) <0x1f59398 + 0x00018> in <031009ec673a4a808e11b357311ab8f4>:0 \r\n  at lib.shared.util.Helper.DateTimeHelper.GetEstFromUtc () <0x1f53c90 + 0x00012> in <ea87f8326c3d4dca87bad74658f34e5b>:0 \r\n  at TestBlazor_0_2_0.Client.Pages.Test.TestLibSharedUtilHelper.RunTests () <0x1f53a78 + 0x00022> in <9ce1d538f01b40c39a6a753959ed2ef0>:0 \r\n  at Microsoft.AspNetCore.Blazor.Rendering.Renderer+<>c__DisplayClass13_0.<AssignEventHandlerId>b__0 (Microsoft.AspNetCore.Blazor.UIEventArgs e) <0x1f53908 + 0x00014> in <8a8022566b074cca8a70e10050945cdd>:0 \r\n  at Microsoft.AspNetCore.Blazor.Components.BlazorComponent.Microsoft.AspNetCore.Blazor.Components.IHandleEvent.HandleEvent (Microsoft.AspNetCore.Blazor.UIEventHandler handler, Microsoft.AspNetCore.Blazor.UIEventArgs args) <0x1f53798 + 0x00018> in <8a8022566b074cca8a70e10050945cdd>:0 \r\n  at Microsoft.AspNetCore.Blazor.Rendering.ComponentState.DispatchEvent (Microsoft.AspNetCore.Blazor.UIEventHandler handler, Microsoft.AspNetCore.Blazor.UIEventArgs eventArgs) <0x1f535c0 + 0x00034> in <8a8022566b074cca8a70e10050945cdd>:0 \r\n  at Microsoft.AspNetCore.Blazor.Rendering.Renderer.DispatchEvent (System.Int32 componentId, System.Int32 eventHandlerId, Microsoft.AspNetCore.Blazor.UIEventArgs eventArgs) <0x1f53088 + 0x00050> in <8a8022566b074cca8a70e10050945cdd>:0 \r\n  at Microsoft.AspNetCore.Blazor.Browser.Rendering.BrowserRenderer.DispatchBrowserEvent (System.Int32 componentId, System.Int32 eventHandlerId, Microsoft.AspNetCore.Blazor.UIEventArgs eventArgs) <0x1f52f20 + 0x00020> in <08ceae4b872f4f8d8ccefc410a9a8971>:0 \r\n  at Microsoft.AspNetCore.Blazor.Browser.Rendering.BrowserRendererEventDispatcher.DispatchEvent (System.String eventDescriptorJson, System.String eventArgsJson) <0x1f11940 + 0x0005a> in <08ceae4b872f4f8d8ccefc410a9a8971>:0 \r\n  at System.IO.FileStream..ctor (System.String path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, System.Int32 bufferSize, System.Boolean anonymous, System.IO.FileOptions options) <0x1f623d8 + 0x00226> in <031009ec673a4a808e11b357311ab8f4>:0 \r\n  at System.IO.FileStream..ctor (System.String path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share) <0x1f5a478 + 0x00032> in <031009ec673a4a808e11b357311ab8f4>:0 \r\n  at System.IO.File.OpenRead (System.String path) <0x1f5a180 + 0x0000e> in <031009ec673a4a808e11b357311ab8f4>:0 \r\n  at System.TimeZoneInfo.FindSystemTimeZoneByFileName (System.String id, System.String filepath) <0x1f59ef0 + 0x00014> in <031009ec673a4a808e11b357311ab8f4>:0 \r\n   --- End of inner exception stack trace ---\r\n  at System.TimeZoneInfo.FindSystemTimeZoneByFileName (System.String id, System.String filepath) <0x1f59ef0 + 0x00038> in <031009ec673a4a808e11b357311ab8f4>:0 \r\n  at System.TimeZoneInfo.FindSystemTimeZoneByIdCore (System.String id) <0x1f596d0 + 0x0001e> in <031009ec673a4a808e11b357311ab8f4>:0 \r\n  at System.TimeZoneInfo.FindSystemTimeZoneById (System.String id) <0x1f594e8 + 0x00030> in <031009ec673a4a808e11b357311ab8f4>:0 \r\n  at System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId (System.DateTimeOffset dateTimeOffset, System.String destinationTimeZoneId) <0x1f59398 + 0x00018> in <031009ec673a4a808e11b357311ab8f4>:0 \r\n  at lib.shared.util.Helper.DateTimeHelper.GetEstFromUtc () <0x1f53c90 + 0x00012> in <ea87f8326c3d4dca87bad74658f34e5b>:0 \r\n  at TestBlazor_0_2_0.Client.Pages.Test.TestLibSharedUtilHelper.RunTests () <0x1f53a78 + 0x00022> in <9ce1d538f01b40c39a6a753959ed2ef0>:0 \r\n  at Microsoft.AspNetCore.Blazor.Rendering.Renderer+<>c__DisplayClass13_0.<AssignEventHandlerId>b__0 (Microsoft.AspNetCore.Blazor.UIEventArgs e) <0x1f53908 + 0x00014> in <8a8022566b074cca8a70e10050945cdd>:0 \r\n  at Microsoft.AspNetCore.Blazor.Components.BlazorComponent.Microsoft.AspNetCore.Blazor.Components.IHandleEvent.HandleEvent (Microsoft.AspNetCore.Blazor.UIEventHandler handler, Microsoft.AspNetCore.Blazor.UIEventArgs args) <0x1f53798 + 0x00018> in <8a8022566b074cca8a70e10050945cdd>:0 \r\n  at Microsoft.AspNetCore.Blazor.Rendering.ComponentState.DispatchEvent (Microsoft.AspNetCore.Blazor.UIEventHandler handler, Microsoft.AspNetCore.Blazor.UIEventArgs eventArgs) <0x1f535c0 + 0x00034> in <8a8022566b074cca8a70e10050945cdd>:0 \r\n  at Microsoft.AspNetCore.Blazor.Rendering.Renderer.DispatchEvent (System.Int32 componentId, System.Int32 eventHandlerId, Microsoft.AspNetCore.Blazor.UIEventArgs eventArgs) <0x1f53088 + 0x00050> in <8a8022566b074cca8a70e10050945cdd>:0 \r\n  at Microsoft.AspNetCore.Blazor.Browser.Rendering.BrowserRenderer.DispatchBrowserEvent (System.Int32 componentId, System.Int32 eventHandlerId, Microsoft.AspNetCore.Blazor.UIEventArgs eventArgs) <0x1f52f20 + 0x00020> in <08ceae4b872f4f8d8ccefc410a9a8971>:0 \r\n  at Microsoft.AspNetCore.Blazor.Browser.Rendering.BrowserRendererEventDispatcher.DispatchEvent (System.String eventDescriptorJson, System.String eventArgsJson) <0x1f11940 + 0x0005a> in <08ceae4b872f4f8d8ccefc410a9a8971>:0 \r\n    at Object.callMethod (http://localhost:49819/_framework/blazor.js:435:23)\r\n    at raiseEvent (http://localhost:49819/_framework/blazor.js:949:28)\r\n    at EventDelegator.onEvent (http://localhost:49819/_framework/blazor.js:692:13)\r\n    at EventDelegator.onGlobalEvent (http://localhost:49819/_framework/blazor.js:1096:26)\r\ncallMethod @ MonoPlatform.ts:70\r\nraiseEvent @ BrowserRenderer.ts:304\r\n(anonymous) @ BrowserRenderer.ts:17\r\nEventDelegator.onGlobalEvent @ EventDelegator.ts:77\r\n```\r\n**CODE:** - Works fine on server just not in blazor/mono\r\n```\r\n@using lib.shared.util.Helper\r\n@page \"/test/libsharedutilhelper\"\r\n\r\n<h3>Test Lib.Shared.Util.Heplers</h3>\r\n<p>Test a bunch of static helpers for fun :-)</p>\r\n\r\n<button onclick=@RunTests>Run Tests</button>\r\n<p>@TestList</p>\r\n\r\n@functions {\r\n\r\n    string TestList = \"\";\r\n\r\n    private void RunTests()\r\n    {\r\n        TestList = \"Init...\";\r\n        TestList += \"<br />Get Est From Utc: \" + TimeZoneInfo.ConvertTimeBySystemTimeZoneId(DateTimeOffset.UtcNow, \"Eastern Standard Time\").ToString();\r\n    }\r\n}\r\n```\r\nI looked at some articles and they suggested this is a mono issue?\r\nhttps://bugzilla.xamarin.com/show_bug.cgi?id=11817\r\nhttps://bugzilla.xamarin.com/show_bug.cgi?id=31432\r\nhttps://stackoverflow.com/questions/18395018/system-timezonenotfoundexception-on-viewpage-using-servicestack-razor\r\nhttps://www.reddit.com/r/jailbreak/comments/3ll1rf/tutorial_solution_how_to_fix_broken_timezone_in/\r\n\r\nKind of an essential missing piece.. Any workaround ideas? Thoughts?\r\n","Url":"https://github.com/aspnet/Blazor/issues/663","RelatedDescription":"Closed issue \"TimeZone issues related to Mono?\" (#663)"},{"Id":"317164765","IsPullRequest":false,"CreatedAt":"2018-04-24T20:47:54","Actor":"MihaMarkic","Number":"664","RawContent":null,"Title":"Json serialization on RegisteredFunction.Invoke includes members with null value","State":"closed","Body":"If I'm not mistaken, I think that serializer includes members having a null value, so if I have a type\r\n```\r\nclass Tubo {\r\n  public string Text { get; set; }\r\n}\r\n```\r\nand I serialize new Tubo(), I'd get\r\n`{ Text: null }`\r\ninstead of\r\n`{}`\r\nThis is a problem when you don't want to pass properties around.","Url":"https://github.com/aspnet/Blazor/issues/664","RelatedDescription":"Closed issue \"Json serialization on RegisteredFunction.Invoke includes members with null value\" (#664)"},{"Id":"317214731","IsPullRequest":false,"CreatedAt":"2018-04-24T20:46:55","Actor":"chassq","Number":"666","RawContent":null,"Title":"Code Lens References show up in cshtml  and corresponding g.i.cs files","State":"closed","Body":"See attached pic. When I reference a lib method in the blazor project cshtml file code lens displays the refs in 2 places (cshtml file and generated corresponding g.i.cs file). I guess this is technically correct but looks strange in the code lens references.\r\n![capture](https://user-images.githubusercontent.com/4785384/39188498-f2cdf57a-479d-11e8-8597-5574a1b53d10.PNG)\r\n","Url":"https://github.com/aspnet/Blazor/issues/666","RelatedDescription":"Closed issue \"Code Lens References show up in cshtml  and corresponding g.i.cs files\" (#666)"},{"Id":"317308897","IsPullRequest":false,"CreatedAt":"2018-04-24T20:45:33","Actor":"RemiBou","Number":"668","RawContent":null,"Title":"Cannot get out of Blazor app when using base tag","State":"closed","Body":"# Description\r\nGiven this documentation : https://blazor.net/docs/host-and-deploy/index.html#app-base-path \r\nIf our app is located in \"/a\" we should change the base tag by `<base href=\"/a\" >` we can deploy our Blazor app in virtual directory of our server. But once on the app all the link to other virtual directory on the server are broken.\r\n\r\n# Actual behavior\r\n\r\nWith the following base tag \r\n `<base href=\"/a\" >` \r\nIf we add a link in the app like this\r\n`<a class='navbar-brand' href='/manage/index'>Account</a>`\r\nOnce we click on it, the console will displays a router error \r\n> 'Router' cannot find any component with a route for '/manage/index'.\r\n\r\nThis is because of the method \"isWithinBaseUriSpace\" in https://github.com/aspnet/Blazor/blob/dev/src/Microsoft.AspNetCore.Blazor.Browser.JS/src/Services/UriHelper.ts it calls \"toBaseUriPrefixWithTrailingSlash\" which ignores the last part of the base URI we set in the base tag.\r\n\r\nIf I set this base tag\r\n`<base href=\"/a/\" >`\r\nI get the following error on first load\r\n> Uncaught SyntaxError: Unexpected token <\r\n\r\n# Expected behavior\r\nBlazor let the browser query the page \"/manage/index\"\r\n\r\n# Suggested solution\r\nChange the behavior of toBaseUriPrefixWithTrailingSlash and just check if baseUri ends with a slash and adds it if it doesn't. I can send a PR if you agree on this solution\r\n\r\n# Temporary solution\r\nManage navigation with vanila js (document.location = xxx)\r\n\r\n# System spec\r\nBlazor 0.2.1\r\nWeb server Asp.Net core 2.1","Url":"https://github.com/aspnet/Blazor/issues/668","RelatedDescription":"Closed issue \"Cannot get out of Blazor app when using base tag\" (#668)"},{"Id":"317214412","IsPullRequest":false,"CreatedAt":"2018-04-24T19:42:20","Actor":"dlr1","Number":"665","RawContent":null,"Title":"Looping and passing arguments to a method","State":"closed","Body":"I have the following code\r\n```\r\n@inherits MyCompBase\r\n\r\n@for(var i=0; i< Counter;i++)\r\n{\r\n    <div onclick=@( x=>ItemClicked(i))>this is item @i</div>\r\n}\r\n\r\nusing Microsoft.AspNetCore.Blazor.Components;\r\nusing System;\r\n\r\nnamespace WebApplication2.Shared\r\n{\r\n    public class MyCompBase : BlazorComponent\r\n    {\r\n        public int Counter { get; set; } = 4;\r\n        public void ItemClicked(int value)\r\n        {\r\n            Console.WriteLine(value);\r\n        }\r\n    }\r\n}\r\n```\r\nI expected it to write value \"i\" to be written to console when the div is clicked. it is always writing \"4\". what am I missing?","Url":"https://github.com/aspnet/Blazor/issues/665","RelatedDescription":"Closed issue \"Looping and passing arguments to a method\" (#665)"},{"Id":"317352698","IsPullRequest":false,"CreatedAt":"2018-04-24T19:08:00","Actor":"floreseken","Number":"669","RawContent":null,"Title":"Floatingpoint numbers lose their comma in JsonUtil","State":"closed","Body":"JsonUtil seems not to honor the comma in floatingpoint numbers.\r\n\r\nThis JSON\r\n```{\"MyNumber\": 100.99}```\r\n\r\nMapped to this property:\r\n```public decimal MyNumber {get;set;}```\r\n\r\nWill end up with the number `10099` in MyNumber when deserialized with JsonUtil.\r\n\r\nI've tried setting the Culture and UICulture (which seem to be empty by default) in my `Main` of the blazor app, but that doesn't seem to help.\r\n\r\nAnybody already tackled this?","Url":"https://github.com/aspnet/Blazor/issues/669","RelatedDescription":"Closed issue \"Floatingpoint numbers lose their comma in JsonUtil\" (#669)"},{"Id":"317222641","IsPullRequest":false,"CreatedAt":"2018-04-24T16:21:22","Actor":"chassq","Number":"667","RawContent":null,"Title":"Environment.OSVersion = Unix 1.0.0.0","State":"closed","Body":"Using Blazor I just printed out the Environment.OSVersion in a .cshtml file. Its value was Unix 1.0.0.0. Can I assume this is why the method System.IO.Path.GetInvalidFileNameChars() returns only a null character per the mono documents at https://github.com/mono/mono/blob/master/mcs/class/corlib/System.IO/Path.cs#L540 ?\r\n\r\n**I am using:**\r\nVS 2017 15.7.0 Preview 4.0\r\nDotnet SDK 2.1.300-preview2-008533\r\nBlazor Language Services 0.2.1-rtm-10237\r\nChrome 66.0.3359.117\r\nWindows Server 2016 Datacenter (Azure VM for VS preview)","Url":"https://github.com/aspnet/Blazor/issues/667","RelatedDescription":"Closed issue \"Environment.OSVersion = Unix 1.0.0.0\" (#667)"}],"ResultType":"GitHubIssue"}},"RunOn":"2018-04-27T05:30:02.6267784Z","RunDurationInMilliseconds":1262}