{"Data":{"Blog":{"FeedItems":[{"Title":"Entity Framework Core 2.1 Roadmap","PublishedOn":"2018-02-02T18:39:25+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"As mentioned in the announcement of the .NET Core 2.1 roadmap earlier today, at this point we know the overall shape of our next release and we have decided on a general schedule for it. As we...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/02/entity-framework-core-2-1-roadmap/","RawContent":null},{"Title":".NET Core 2.1 Roadmap","PublishedOn":"2018-02-02T18:22:30+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The .NET team has been working on the .NET Core 2.1 release for the last several months on GitHub. We know that many of you have been using .NET Core 2.0 since it shipped in August of last year and...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/02/net-core-2-1-roadmap/","RawContent":null},{"Title":"January 2018 Preview of Quality Rollup","PublishedOn":"2018-01-27T00:52:41+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We recently released the January 2018 Preview of Quality Rollup. Quality and Reliability This release contains the following quality and reliability improvements. ASP.NET Behavior change of...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/26/january-2018-preview-of-quality-rollup/","RawContent":null},{"Title":".NET Framework January 2018 Security and Quality Rollup","PublishedOn":"2018-01-10T06:39:31+00:00","CommentsCount":31,"FacebookCount":0,"Summary":"Updated: January 25, 2018 Today, we are releasing the January 2018 Security and Quality Rollup. An issue with the January 2018 Monthly Rollup was found on Windows 7 and Windows Server 2008 R2 if .NET...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-january-2018-security-and-quality-rollup/","RawContent":null},{"Title":".NET for UWP January 2018 Update","PublishedOn":"2018-01-10T04:17:28+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the .NET for UWP January 2018 Update. This post includes the fix included and instructions on how to update your applications. Security CVE-2018-0786 – Security Feature Bypass...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-for-uwp-january-2018-update/","RawContent":null},{"Title":".NET Framework 4.7.1 is available on Windows Update, WSUS and MU Catalog!","PublishedOn":"2018-01-09T21:39:54+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"Today, we are happy to announce the Microsoft .NET Framework 4.7.1 is available on Windows Update, Windows Server Update Services (WSUS) and Microsoft Update (MU) Catalog. This includes reliability...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-4-7-1-is-available-on-windows-update-wsus-and-mu-catalog/","RawContent":null},{"Title":".NET Core January 2018 Update","PublishedOn":"2018-01-09T21:08:03+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core January 2018 Update. This includes .NET Core  1.0.9, 1.1.6 and 2.0.5. Please leave feedback on the release in the comments below or at dotnet/core #1199. Security...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-core-january-2018-update/","RawContent":null},{"Title":"Migrating your existing .NET application to the cloud? Tell us about it!","PublishedOn":"2017-12-05T18:14:46+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Hi everyone! The .NET team is conducting a survey to learn more about your approach for moving existing .NET applications to the cloud.  The survey should take less than 5 minutes to complete. Take...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/12/05/migrating-your-existing-net-application-to-the-cloud-tell-us-about-it/","RawContent":null},{"Title":"Announcing the Windows Compatibility Pack for .NET Core","PublishedOn":"2017-11-17T04:59:32+00:00","CommentsCount":76,"FacebookCount":0,"Summary":"Porting existing code to .NET Core used to be quite hard because the available API set was very small. In .NET Core 2.0, we already made this much easier, thanks to .NET Standard 2.0. Today,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/announcing-the-windows-compatibility-pack-for-net-core/","RawContent":null},{"Title":"UPDATE – Microservices and Docker containers: Architecture, Patterns and Development guidance (Updated for .NET Core 2.0)","PublishedOn":"2017-11-16T22:00:06+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Nov. 15th 2017 update Earlier this year, we published this eBook/guide and sample application offering guidance for architecting microservices and Docker containers based applications. We have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/update-microservices-and-docker-containers-architecture-patterns-and-development-guidance-updated-for-net-core-2-0/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7192252734","Type":"PullRequestEvent","CreatedAt":"2018-02-03T01:30:47","Actor":"karann-msft","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/98","RelatedDescription":"Opened pull request \"Updates to reflect the latest information\" (#98) at dotnet/home","RelatedBody":""},{"Id":"7187459205","Type":"PullRequestEvent","CreatedAt":"2018-02-02T05:26:03","Actor":"mairaw","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/97","RelatedDescription":"Opened pull request \"update CLA PDF link\" (#97) at dotnet/home","RelatedBody":""},{"Id":"7102763357","Type":"PullRequestEvent","CreatedAt":"2018-01-16T00:17:04","Actor":"galatrash-at-dnn","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/96","RelatedDescription":"Opened pull request \"Adding DNN Platform.\" (#96) at dotnet/home","RelatedBody":""},{"Id":"7097053889","Type":"PullRequestEvent","CreatedAt":"2018-01-14T15:15:00","Actor":"bfistein","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/95","RelatedDescription":"Opened pull request \"Fix broken logo URL\" (#95) at dotnet/home","RelatedBody":""},{"Id":"7065382954","Type":"PullRequestEvent","CreatedAt":"2018-01-06T19:21:47","Actor":"ctaggart","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/94","RelatedDescription":"Opened pull request \"add SourceLink\" (#94) at dotnet/home","RelatedBody":"Adding SourceLink to the project list as per the checklist https://github.com/ctaggart/SourceLink/issues/138"},{"Id":"7044237283","Type":"PullRequestEvent","CreatedAt":"2017-12-31T20:25:44","Actor":"onovotny","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/93","RelatedDescription":"Opened pull request \"Add Humanizer\" (#93) at dotnet/home","RelatedBody":"Onboarding Humanizer: https://github.com/Humanizr/Humanizer/issues/682"},{"Id":"6946829856","Type":"PullRequestEvent","CreatedAt":"2017-12-05T18:08:42","Actor":"heiligerdankgesang","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/92","RelatedDescription":"Opened pull request \"Remove contact email from system.drawing.md\" (#92) at dotnet/home","RelatedBody":"Contact email is outdated. Mono-project site's community section has better, more up-to-date information."},{"Id":"6934052963","Type":"PullRequestEvent","CreatedAt":"2017-12-02T15:19:09","Actor":"rprouse","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/91","RelatedDescription":"Opened pull request \"Add NUnit to the .NET Foundation Projects\" (#91) at dotnet/home","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7148376542","Type":"IssuesEvent","CreatedAt":"2018-01-25T06:31:53","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/54","RelatedDescription":"Opened issue \"January 2018 Security and Quality Updates\" (#54) at dotnet/announcements","RelatedBody":"# January 2018 Security and Quality Updates\r\n\r\nThe following Security and Quality Updates were released this month. Known issues and resolved CVEs are also listed.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework January 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-january-2018-security-and-quality-rollup/)\r\n* [.NET Framework January 2018 Monthly Rollup Known Issue KB4074906 - \"TypeInitializationException\" or \"FileFormatException\" error in WPF applications](https://github.com/dotnet/announcements/issues/53)\r\n* [CVE-2018-0786](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-0786) – Security Feature Bypass in X509 Certificate Validation\r\n* [CVE-2018-0764](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-0764) – Denial of Service when parsing XML documents\r\n\r\n## .NET Core\r\n\r\n* [.NET Core January 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-core-january-2018-update/)\r\n* [CVE-2018-0786](https://github.com/dotnet/announcements/issues/51) – Security Feature Bypass in X509 Certificate Validation\r\n* [CVE-2018-0764](https://github.com/dotnet/announcements/issues/52) – Denial of Service when parsing XML documents\r\n\r\n## .NET for UWP\r\n\r\n* [.NET for UWP January 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-for-uwp-january-2018-update/)\r\n* [CVE-2018-0786](https://github.com/dotnet/announcements/issues/51) – Security Feature Bypass in X509 Certificate Validation"},{"Id":"7089727012","Type":"IssuesEvent","CreatedAt":"2018-01-12T04:51:18","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/53","RelatedDescription":"Opened issue \".NET Framework January 2018 Rollup Known Issue KB4074906 - \"TypeInitializationException\" or \"FileFormatException\" error in WPF applications\" (#53) at dotnet/announcements","RelatedBody":"# .NET Framework January 2018 Rollup Known Issue KB4074906 - \"TypeInitializationException\" or \"FileFormatException\" error in WPF applications\r\n\r\nAn issue has been found in the [.NET Framework January 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-january-2018-security-and-quality-rollup/). The .NET team is in the process of fixing the issue. This document describes the symptom and workarounds to resolve the issue while you are waiting for a fix.\r\n\r\nThis document will be updated when a fix is made available.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [microsoft/dotnet #599](https://github.com/Microsoft/dotnet/issues/599)\r\n\r\n## Symptoms\r\n\r\nWindows Presentation Foundation (WPF) applications that request a fallback font or a character that is not included in the currently selected font return the following error messages: \r\n\r\n```\r\nSystem.TypeInitializationException\r\n \r\n“FileFormatException: No FontFamily element found in FontFamilyCollection \r\nthat matches current OS or greater: Win7SP1”.\r\n\r\nInner exception originates from: CompositeFontParser\r\n```\r\n\r\n## Workarounds\r\n\r\nTo work around this problem, use one of the following methods.\r\n\r\n### Workaround 1 - Uninstall the January 2018 Update\r\n\r\nTo keep .NET 4.7.1 installed and maintain protection against vulnerabilities that are addressed by the January security updates, uninstall the January .NET Framework Security and Quality Rollup ([KB4055002](https://support.microsoft.com/en-us/help/4055002)), and then install the January .NET Framework Security-Only Update ([KB4054183](https://support.microsoft.com/en-us/help/4054183)). To do this, follow these steps:\r\n\r\n1. In Control Panel, open the Windows Update item, and then select View update history.\r\n1. In the Review your update history list, locate and select Security Update for Microsoft .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, 4.7.1 ([KB4055002](https://support.microsoft.com/en-us/help/4055002)). Then, select Uninstall.\r\n1. When you are prompted for confirmation to uninstall, select Yes.\r\n1. Restart your computer if you are prompted to do this.\r\n1. Download and install the Security Only update for .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, and 4.7.1 for Windows 7 SP1 and Windows Server 2008 R2 SP1 and .NET Framework 4.6 for Windows Server 2008 SP2 ([KB4054183](https://support.microsoft.com/en-us/help/4054183)) for your operating system configuration from the following links:\r\n   * [Security Only update for .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, and 4.7.1 for Windows 7 SP1 and Windows Server 2008 R2 SP1 for x86 systems (KB4054183)](http://download.windowsupdate.com/d/msdownload/update/software/secu/2018/01/ndp47-kb4054183-x86_301cb3d6591b572786c8349c12a28e5ec5d2d334.exe)\r\n   * [Security Only update for .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, and 4.7.1 on Windows 7 SP1 and Windows Server 2008 R2 SP1 for x64 systems (KB4055269)](http://download.windowsupdate.com/d/msdownload/update/software/secu/2018/01/ndp47-kb4054183-x64_a022ad5109b1208dff502d1be4477668b4fa258d.exe)\r\n1. Follow the installation prompts, and then restart your computer if your are prompted to do this.\r\n\r\n### Workaround 2 - Uninstall the .NET Framework 4.7.1, Install .NET Framework 4.7\r\n\r\nRoll back to the previous version of .NET Framework. To do this, follow these steps:\r\n\r\n1. In Control Panel, open the Programs and Features item.\r\n1. In the Uninstall or change a program list, locate and then select Microsoft .NET Framework 4.7.1, and then select Uninstall/Change.\r\n![image](https://user-images.githubusercontent.com/2608468/34859496-5a3f11e6-f70b-11e7-82cb-5a12a4f9a633.png)\r\n1. Select Remove .NET Framework 4.7.1 from this computer, and then select Next.\r\n![image](https://user-images.githubusercontent.com/2608468/34859585-f5d50f3e-f70b-11e7-8fb9-a75e35c08767.png)\r\n1. Select Continue to confirm uninstallation.\r\n1. Select Finish after the uninstallation is finished.\r\n![image](https://user-images.githubusercontent.com/2608468/34859595-07877226-f70c-11e7-9d66-908a37ef0ded.png)\r\n1. Restart your computer if you are prompted to do this.\r\n1. Install [.NET Framework 4.7](https://www.microsoft.com/en-us/download/details.aspx?id=55170).\r\n\r\n## Issue Reports\r\n\r\n* [KB4074906 (Microsoft)](https://support.microsoft.com/en-us/help/4074906)\r\n* [0xd4d/dnSpy #692](https://github.com/0xd4d/dnSpy/issues/692)\r\n* [Wox-launcher/Wox #1823](https://github.com/Wox-launcher/Wox/issues/1823)\r\n"},{"Id":"7076404590","Type":"IssuesEvent","CreatedAt":"2018-01-09T18:02:02","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/52","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0764: Denial of Service when parsing XML documents\" (#52) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0764\r\n## Denial of Service when parsing XML documents\r\n### Executive Summary \r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 1.1, and 2.0. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a Denial of Service vulnerability in all public versions of .NET core due to improper processing of XML documents. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET application. A remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET core handles XML document processing.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.9, 1.1.6 and 2.0.5. Developers are advised to update their .NET Core SDK to version 2.1.4 or 1.1.7. These runtime and SDK versions will also address CVE-2018-0786,  https://github.com/dotnet/announcements/issues/51\r\n\r\n### Discussion\r\n\r\nPlease use **** TODO: FILL IN ISSUE LINK *** for discussion of this advisory.\r\n\r\n## Affected Software\r\nThe vulnerability affects any Microsoft .NET Core project if it uses any of affected runtime versions listed below\r\n\r\n Runtime Version | Fixed runtime version\r\n----------------| -------------------------\r\n1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5, 1.0.7, 1.0.8 | 1.0.9\r\n1.1.0, 1.1.1, 1.1.2, 1.1.4, 1.1.5 | 1.1.6\r\n2.0.0, 2.0.3, 2.0.4 |  2.0.5\r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\n\r\nTo check the runtimes installed on a computer you must view the contents of the runtime folder. By default these are\r\n\r\n| Operating System          | Location          |\r\n|---------------------------|-------------------|\r\n| Windows | C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\ |\r\n| macOS | /usr/local/share/dotnet/shared/Microsoft.NETCore.App/    |\r\n| Supported Linux platforms | /usr/share/dotnet/shared/Microsoft.NETCore.App/   |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you do not have a directory for 1.0.9, 1.1.6 or 2.0.2 then any applications targeting .NET Core will be vulnerable. Downloads for all supported platforms can be acquired from https://www.microsoft.com/net/download/\r\n\r\n#### How do I fix my affected application?\r\nApplications can be fixed by installing the latest runtimes or SDKs. Typically application servers only install a runtime package, developer machines install SDKs. Installers can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). Runtime version 1.1.6 will also install runtime version 1.0.9.\r\n\r\nIf you have built a [self-contained application](https://docs.microsoft.com/en-us/dotnet/core/deploying/#self-contained-deployments-scd) you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\r\n### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the [application.runtime.config](https://github.com/dotnet/cli/blob/ede74b6be1406ba0c086b6d5fc1a5d4eacff1f01/Documentation/specs/runtime-configuration-file.md#appnameruntimeconfigjson) file for that application and editing the framework version and setting `rollForward` to `false`. This should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nNote that this file is optional, you may need to create it for each application alongside the executable.\r\n\r\n### External Links\r\n\r\n[CVE-2018-0764](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0764)\r\n\r\n### Revisions\r\n\r\nV1.0 (Jan 9, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-01-09_\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  "},{"Id":"7076401836","Type":"IssuesEvent","CreatedAt":"2018-01-09T18:01:26","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/51","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0786: Security Feature Bypass in X509 Certificate Validation\" (#51) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0786\r\n## Security Feature Bypass in X509 Certificate Validation\r\n### Executive Summary \r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 1.1, and 2.0. This advisory also provides guidance on what developers can do to update their applications correctly. \r\n\r\nMicrosoft is aware of a security vulnerability in the public versions of .NET Core where an attacker could present a certificate that is marked invalid for a specific use, but a component uses it for that purpose. This action disregards the Enhanced Key Usage tagging.\r\n\r\nThe security update addresses the vulnerability by ensuring that .NET Core components completely validate certificates.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.9, 1.1.6 and 2.0.5. Developers are advised to update their .NET Core SDK to version 2.1.4 or 1.1.7. These runtime and SDK versions will also address CVE-2018-0764 ***** TODO: ADD LINK TO OTHER ISSUE *****\r\n\r\n### Discussion\r\n\r\nPlease use **** TODO: FILL IN ISSUE LINK *** for discussion of this advisory.\r\n\r\n## Affected Software\r\nThe vulnerability affects any Microsoft .NET Core project if it uses any of affected runtime versions listed below\r\n\r\n Runtime Version | Fixed runtime version\r\n----------------| -------------------------\r\n1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5, 1.0.7, 1.0.8 | 1.0.9\r\n1.1.0, 1.1.1, 1.1.2, 1.1.4, 1.1.5 | 1.1.6\r\n2.0.0, 2.0.3, 2.0.4 |  2.0.5\r\n\r\nThis vulnerability also affects any .NET native applications using the following NuGet packages.\r\n\r\nNuGet Packages | Fixed NuGet Packages\r\n-- | --\r\nMicrosoft.NETCore.UniversalWindowsPlatform 5.2.* (contains   .NET native 1.4.*) | Microsoft.NETCore.UniversalWindowsPlatform 5.2.4\r\nMicrosoft.NETCore.UniversalWindowsPlatform 5.3.* (contains   .NET native 1.6.*) | Microsoft.NETCore.UniversalWindowsPlatform 5.3.5\r\nMicrosoft.NETCore.UniversalWindowsPlatform 5.4.* (contains   .NET native 1.7.*) | Microsoft.NETCore.UniversalWindowsPlatform 5.4.2\r\nMicrosoft.NETCore.UniversalWindowsPlatform 6.0.* (contains   .NET native 2.0.*) | Microsoft.NETCore.UniversalWindowsPlatform 6.0.6\r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\n\r\nTo check the runtimes installed on a computer you must view the contents of the runtime folder. By default these are\r\n\r\n| Operating System          | Location          |\r\n|---------------------------|-------------------|\r\n| Windows | C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\ |\r\n| macOS | /usr/local/share/dotnet/shared/Microsoft.NETCore.App/    |\r\n| Supported Linux platforms | /usr/share/dotnet/shared/Microsoft.NETCore.App/   |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you do not have a directory for 1.0.9, 1.1.6 or 2.0.2 then any applications targeting .NET Core will be vulnerable. Downloads for all supported platforms can be acquired from https://www.microsoft.com/net/download/\r\n\r\n#### How do I fix my affected application?\r\nApplications can be fixed by installing the latest runtimes or SDKs. Typically application servers only install a runtime package, developer machines install SDKs. Installers can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). Runtime version 1.1.6 will also install runtime version 1.0.9.\r\n\r\nIf you have built a [self-contained application](https://docs.microsoft.com/en-us/dotnet/core/deploying/#self-contained-deployments-scd) you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n#### How do I fix my .NET native application? \r\n\r\n.NET native requires that applications be re-processed by the .NET native compiler to incorporate the fixes and the re-processed version needs to be distributed via the Windows Store.\r\n\r\nWe recommend that you update your .NET UWP apps to use the latest minor version of the `Microsoft.NETCore.UniversalWindowsPlatform` NuGet package so that you can build and verify that your app works as expected when updated. If you are using version 6.0.x, you should update to 6.0.6 and if you’re using 5.2.x, you can update to 5.2.4. Of course, you can update to a higher major version too, but we are distributing security updates for all impacted major versions (currently 5.2.x, 5.3.x, 5.4.x and 6.0.x). Additionally, whether or not you update your NuGet packages, all applications submitted to the store after today will be automatically fixed during submission processing.\r\n\r\nIf you do not update your app in the Store, it will automatically be reprocessed and distributed via an application update in the next few weeks. Users who have automatic app updates enabled will get the fix with no intervention on your or their parts. Because updated apps are distributed through the Windows Store, sideloaded apps will not be automatically updated. We recommend that developers who distribute sideloaded apps update the affected NuGet packages, rebuild their applications and distribute them to their users.\r\n\r\nMicrosoft is committed to keeping UWP applications secure and to supporting developers. If you have feedback on the fix distribution process, please let us know at dotnetnative@microsoft.com. \r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\r\n### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the [application.runtime.config](https://github.com/dotnet/cli/blob/ede74b6be1406ba0c086b6d5fc1a5d4eacff1f01/Documentation/specs/runtime-configuration-file.md#appnameruntimeconfigjson) file for that application and editing the framework version and setting `rollForward` to `false`. This should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nNote that this file is optional, you may need to create it for each application alongside the executable.\r\n\r\n### External Links\r\n\r\n[CVE-2018-0786](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0786)\r\n\r\n### Revisions\r\n\r\nV1.0 (Jan 9, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-01-09_"},{"Id":"6948315401","Type":"IssuesEvent","CreatedAt":"2017-12-05T23:41:57","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/50","RelatedDescription":"Closed issue \".Net Core ARM32 SDK availability\" (#50) at dotnet/announcements","RelatedBody":"Referencing #29.\r\n\r\nWill it be possible to : \r\n\r\na) Provide ARM32 builds for the SDK at its current state\r\nor\r\nb) Provide links on how to build the .Net Core SDK for ARM32?\r\n\r\nThe thing is I am planning to use it in a virtual environnement, through proot + qemu-arm-static. This way I would be able to build and, more importantly, run unit tests on ARM32. Another thing I am planning to do is to setup a build environnement on i686 through virtualisation as qemu doesn't seem to be able to emulate x86_64 on i686 (but arm32 does seem to work well enough).\r\n\r\nThank you in advance.\r\n\r\nSergio\r\n\r\n"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7194369253","Type":"IssuesEvent","CreatedAt":"2018-02-04T03:43:27","Actor":"Anipik","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/16195","RelatedDescription":"Opened issue \"Extra allocation in corner cases CombineNoChecks(ReadOnlySpan<char> first, ReadOnlySpan<char> second)\" (#16195) at dotnet/coreclr","RelatedBody":"We changed the string version of CombineNoChecks to a span version which introduced new allocations in corner cases like \r\n\r\n```\r\nCombineNoChecks(\"foo\", \"\");\r\n```\r\nwhich was not the case earlier.\r\n\r\nCC: @JeremyKuhne @danmosemsft "},{"Id":"7194357106","Type":"IssuesEvent","CreatedAt":"2018-02-04T03:32:08","Actor":"Anipik","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/16194","RelatedDescription":"Opened issue \"Using string.create instead of stringbuilder in normalizing path \" (#16194) at dotnet/coreclr","RelatedBody":"```\r\n            StringBuilder builder = new StringBuilder(path.Length);\r\n\r\n            if (IsDirectorySeparator(path[start]))\r\n            {\r\n                start++;\r\n                builder.Append(DirectorySeparatorChar);\r\n            }\r\n\r\n            for (int i = start; i < path.Length; i++)\r\n            {\r\n                current = path[i];\r\n\r\n                // If we have a separator\r\n                if (IsDirectorySeparator(current))\r\n                {\r\n                    // If the next is a separator, skip adding this\r\n                    if (i + 1 < path.Length && IsDirectorySeparator(path[i + 1]))\r\n                    {\r\n                        continue;\r\n                    }\r\n\r\n                    // Ensure it is the primary separator\r\n                    current = DirectorySeparatorChar;\r\n                }\r\n\r\n                builder.Append(current);\r\n            }\r\n\r\n            return builder.ToString();\r\n```\r\n\r\nCurrent Version is using stringBuilder to normalize the path whichi is highly inefficient, I suggest to use \r\nstring.create to improve this.\r\n\r\ncc @JeremyKuhne  @danmosemsft @jkotas \r\n"},{"Id":"7194331262","Type":"IssuesEvent","CreatedAt":"2018-02-04T03:08:27","Actor":"tmat","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/16193","RelatedDescription":"Opened issue \"EnC: stack corruption when editing recursive function\" (#16193) at dotnet/coreclr","RelatedBody":"**Steps to Reproduce**:\r\n\r\n```C#\r\nusing System;\r\n\r\nclass Program\r\n{\r\n    static void Main()\r\n    {\r\n        FuncTest(30);\r\n    }\r\n\r\n    static int FuncTest(int i)\r\n    {\r\n        Console.WriteLine(i);\r\n\r\n        int j = 100; // conditional BP: \"i == 20\"\r\n        j++;\r\n        // j++;\r\n        if (i == 1)\r\n        {\r\n            return 10;\r\n        }\r\n        else\r\n        {\r\n            return FuncTest(i - 1);\r\n        }\r\n    }\r\n}     \r\n```\r\n\r\n1. In the above code place conditional BP as indicated.\r\n2. F5\r\n3. When the BP is hit, uncomment `// j++;`\r\n4. Step (F11) until `Console.WriteLine(i)` is reached and then step over (F10).\r\n5. Observe the output.\r\n\r\n**Expected Behavior**:\r\n\r\n```\r\n30\r\n29\r\n28\r\n27\r\n26\r\n25\r\n24\r\n23\r\n22\r\n21\r\n20\r\n19\r\n```\r\n\r\n**Actual Behavior**:\r\n\r\n```\r\n30\r\n29\r\n28\r\n27\r\n26\r\n25\r\n24\r\n23\r\n22\r\n21\r\n20\r\n32765\r\n```\r\n"},{"Id":"7194281113","Type":"PullRequestEvent","CreatedAt":"2018-02-04T02:23:36","Actor":"tannergooding","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16192","RelatedDescription":"Opened pull request \" Moving a number of the Sse2 hwintrinsic tests to use the test template.\" (#16192) at dotnet/coreclr","RelatedBody":"This also implements the LoadVector128, LoadAlignedVector128, and LoadScalarVector128 intrinscis for Sse2."},{"Id":"7194221259","Type":"PullRequestEvent","CreatedAt":"2018-02-04T01:31:26","Actor":"dotnet-maestro-bot","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16191","RelatedDescription":"Opened pull request \"Update CoreClr to preview2-26204-01 (master)\" (#16191) at dotnet/coreclr","RelatedBody":"/cc @dotnet/coreclr-auto-update-notify"},{"Id":"7194172926","Type":"PullRequestEvent","CreatedAt":"2018-02-04T00:50:31","Actor":"davidfowl","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16190","RelatedDescription":"Opened pull request \"Merged FileStreamCompletionSource and MemoryCompletionSource\" (#16190) at dotnet/coreclr","RelatedBody":"- Change FileStreamCompletionSource to take a ReadOnlyMemory<byte> instead of byte[]\r\n- Delegate to memory.Retain if the underlying ReadOnlyMemory<byte> is backed by an array that isn't the stream's internal buffer.\r\n\r\nPS: I haven't run any tests locally yet 😄. I will when I find out how to do so.\r\n\r\n/cc @stephentoub "},{"Id":"7194109574","Type":"IssuesEvent","CreatedAt":"2018-02-03T23:58:47","Actor":"sywhang","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/14867","RelatedDescription":"Closed issue \"Failed Debug.Assert prints the stacktrace twice to the console\" (#14867) at dotnet/coreclr","RelatedBody":"Repro: Run the following as debug build:\r\n\r\n```C#\r\nusing System.Diagnostics;\r\n\r\nclass Program\r\n{\r\n    static void Main(string[] args)\r\n    {\r\n        Debug.Assert(false);\r\n    }\r\n}\r\n```\r\n\r\nResult:\r\n\r\n```\r\nFailFast:\r\n\r\n   at System.Diagnostics.Debug.Assert(Boolean condition, String message, String detailMessage)\r\n   at Program.Main(String[] args) in C:\\repro\\Program.cs:line 7\r\n\r\n   at System.Environment.FailFast(System.String, System.Exception)\r\n   at Program.Main(System.String[])\r\n```\r\n\r\nProblems:\r\n\r\n- Stacktrace is printed twice\r\n- `System.Diagnostics.Debug.Assert` should not be included in the stacktrace\r\n- Title should say `Assertion failed` instead of `FailFast`"},{"Id":"7194109065","Type":"PullRequestEvent","CreatedAt":"2018-02-03T23:58:23","Actor":"sywhang","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15895","RelatedDescription":"Merged pull request \"Fix failfast stacktrace\" (#15895) at dotnet/coreclr","RelatedBody":"This addresses issue #14867, by adding another Environment.FailFast FCall that gets passed in an UINT type that specifies the error source, to print the correct title for stack trace.\r\n\r\nThe stack getting printed twice is also addressed here."},{"Id":"7194037773","Type":"PullRequestEvent","CreatedAt":"2018-02-03T23:03:31","Actor":"noahfalk","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15151","RelatedDescription":"Merged pull request \"JitBench harness improvements\" (#15151) at dotnet/coreclr","RelatedBody":"This is work in progress on JitBench before I head off on vacation. It consumes the changes in https://github.com/aspnet/JitBench/pull/79 once they are checked in. After that happens this PR would need to be merged up and the hardcoded JitBench repo commit SHA to download would need to be updated. Testing with all those changes locally everything appeared to work and it did fix issues I was hitting where the test was failing part way through with versioning related errors.\r\n\r\n---\r\n\r\n\r\nUse a shared framework version that is pinned to the CoreCLR package version in dependencies.props instead of using open-ended latest build versions. This should help make results more predictable. If two runs have CoreCLR synced to the same point they should use all the same .Net Core component versions, regardless of the passage of time.\r\n\r\nUse the RunBenchmark.ps1 script maintained by the JitBench repo rather than hard-coding all the different setup, install, restore, publish steps here.\r\n\r\nAdded a new option to grab JitBench repo from a local folder on the machine instead of downloading it from github to make local development easier. It still has some issues trying to overwrite the previous folder if you run the full benchmark multiple times in this mode, but it can be worked around manually be deleting the previous folder yourself, or use the 'Use-Existing-Setup option' to avoid making redundant copies."}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7194296276","Type":"IssuesEvent","CreatedAt":"2018-02-04T02:36:24","Actor":"natemcmaster","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8529","RelatedDescription":"Opened issue \"MacOS pkg installer does not include aspnetcore runtime\" (#8529) at dotnet/cli","RelatedBody":"The pkg installer for macOS doesn't install the aspnetcore runtime on my machine. However, the tar.gz for macOS contains the runtimes.\r\n\r\n## Steps to reproduce\r\nDownload https://dotnetfeed.blob.core.windows.net/orchestrated-release-2-1/20180202-02/final/assets/Sdk/2.1.300-preview1-008019/dotnet-sdk-2.1.300-preview1-008019-osx-x64.pkg\r\nInstall\r\n\r\n## Expected  behavior\r\nShould contain two aspnetcore runtimes\r\n```\r\n/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App/2.1.0-preview1-something\r\n/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All/2.1.0-preview1-something\r\n```\r\n\r\n## Actual behavior\r\nNo aspnetcore shared runtime installed.\r\n\r\nCompare to this: https://dotnetfeed.blob.core.windows.net/orchestrated-release-2-1/20180202-02/final/assets/Sdk/2.1.300-preview1-008019/dotnet-sdk-2.1.300-preview1-008019-osx-x64.tar.gz contains the right runtime.\r\n\r\ncc @livarcocc @Eilon - safe to assume this is a critical 2.1.0-preview1 scenario, eh?\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"7192729963","Type":"IssuesEvent","CreatedAt":"2018-02-03T07:42:01","Actor":"AustinWise","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8528","RelatedDescription":"Opened issue \"How to update referenced package versions from CLI\" (#8528) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n1) Type `dotnet help`\r\n\r\n## Expected  behavior\r\n1) Expect to see `dotnet update` or similar command to update referenced packages. Something equivalent to Visual Studio's GUI that allows upgrading packages.\r\n\r\n## Actual behavior\r\n1) After much searching, I can't find any command to update the package version.\r\n\r\n## Other thoughts\r\nCurrently there is no way that I can tell to update package versions when running on Linux, except to delete the reference and add it back. I can set the the `Version` attribute to equal \"`*`\", but that does not bind to a predictable version.\r\n\r\nIs there a way to list which packages are upgradeable that I missed?\r\n\r\nIf there is not such a command, is it desired?"},{"Id":"7192196704","Type":"IssuesEvent","CreatedAt":"2018-02-03T01:01:56","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/8338","RelatedDescription":"Closed issue \"dotnet build -c throws exception instead of error message\" (#8338) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n` dotnet build -c`\r\n\r\n## Expected  behavior\r\n\r\nSome friendly error message\r\n\r\n## Actual behavior\r\n```\r\nSystem.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\r\nParameter name: index\r\n   at System.ThrowHelper.ThrowArgumentOutOfRange_IndexException()\r\n   at System.SZArrayHelper.get_Item[T](Int32 index)\r\n   at System.Linq.Enumerable.ElementAt[TSource](IEnumerable`1 source, Int32 index)\r\n   at Microsoft.DotNet.Cli.Telemetry.TopLevelCommandNameAndOptionToLog.AllowList(ParseResult parseResult)\r\n   at Microsoft.DotNet.Cli.Telemetry.TelemetryFilter.Filter(Object objectToFilter)\r\n   at Microsoft.DotNet.Cli.Utils.TelemetryEventEntry.SendFiltered(Object o)\r\n   at Microsoft.DotNet.Cli.Program.ProcessArgs(String[] args, ITelemetry telemetryClient)\r\n   at Microsoft.DotNet.Cli.Program.Main(String[] args)\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\n.NET Command Line Tools (2.1.2)\r\n\r\nProduct Information:\r\n Version:            2.1.2\r\n Commit SHA-1 hash:  5695315371\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.2\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.3\r\n  Build    : a9190d4a75f4a982ae4b4fa8d1a24526566c69df\r\n\r\n```\r\n\r\n\r\n"},{"Id":"7191999120","Type":"PullRequestEvent","CreatedAt":"2018-02-02T23:37:13","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8486","RelatedDescription":"Merged pull request \"Add verbosity option to `install tool` command.\" (#8486) at dotnet/cli","RelatedBody":"This PR adds the `--verbosity` option to the `install tool` command.\r\n\r\nMSBuild/NuGet output is now controllable by the user and defaults to being \"quiet\".\r\n\r\nThis enables users to see warnings from NuGet that otherwise would be swallowed\r\nunless NuGet returned a non-zero exit code. As a byproduct of this change, the\r\nexception handling and error messages related to obtaining tool packages was\r\nretooled. We no longer display `install tool` command line help for installation\r\nfailures, as it should only be displayed for command line syntax errors.\r\n\r\nFixes #8465."},{"Id":"7191999112","Type":"IssuesEvent","CreatedAt":"2018-02-02T23:37:13","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/8465","RelatedDescription":"Closed issue \"Tool installation swallows NuGet warnings.\" (#8465) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n\r\nInstall a tool that causes NuGet to output warnings, but no errors:\r\n\r\n```\r\n$ dotnet install tool $PKG_WITH_WARNINGS\r\n```\r\n\r\n## Expected  behavior\r\n\r\nThe `install tool` command displays the warnings emitted by NuGet during tool installation.\r\n\r\n## Actual behavior\r\n\r\nNo warnings are displayed.\r\n\r\n## Environment data\r\n\r\n```\r\n$ dotnet --info\r\n.NET Command Line Tools (2.2.0-preview1-007986)\r\n\r\nProduct Information:\r\n Version:            2.2.0-preview1-007986\r\n Commit SHA-1 hash:  e447bae210\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.13\r\n OS Platform: Darwin\r\n RID:         osx-x64\r\n Base Path:   /Users/peterhuene/src/cli/bin/2/osx-x64/dotnet/sdk/2.2.0-preview1-007986/\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.1.0-preview1-26116-04\r\n  Build    : eeb3a84e2142aba791fe003564b8afd048c45ff9\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"7191516537","Type":"PullRequestEvent","CreatedAt":"2018-02-02T21:21:13","Actor":"mmitche","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8527","RelatedDescription":"Merged pull request \"Update the branch info to be correct for 2.1\" (#8527) at dotnet/cli","RelatedBody":""},{"Id":"7190896155","Type":"PullRequestEvent","CreatedAt":"2018-02-02T18:55:35","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8517","RelatedDescription":"Merged pull request \"Update F# to match dev15.6 preview 4\" (#8517) at dotnet/cli","RelatedBody":"\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7190412954","Type":"IssuesEvent","CreatedAt":"2018-02-02T17:09:21","Actor":"colgreen","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/640","RelatedDescription":"Opened issue \"Support for XDocument.LoadAsync()\" (#640) at dotnet/standard","RelatedBody":"XDocument.LoadAsync() is available in dotnet core 2.0 but not .NET Standard 2.0. We have encountered a few scenarios recently where this would have been useful.\r\n\r\nThe the workarounds we have are:\r\n\r\n1) Do a synchronous Load() and have a thread blocked waiting for IO.\r\n\r\n2) An asynchronous load into memory (e.g. sourceStream.CopyToAsnc(tempMemoryStream) and then do an synchronous load from the MemoryStream (which of course has no IO), however this requires allocation of large arrays, associated garbage collection, etc. It will also be a poor choice for very large XML documents.\r\n\r\n"},{"Id":"7186097286","Type":"IssuesEvent","CreatedAt":"2018-02-01T21:52:42","Actor":"reyou","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/639","RelatedDescription":"Closed issue \"VS 2017 can build multi-target project but cli \"dotnet build\" fails.\" (#639) at dotnet/standard","RelatedBody":"I am following documentation at https://docs.microsoft.com/en-us/dotnet/core/tutorials/libraries#how-to-multitarget\r\nI can build project with VS 2017,  but \"dotnet build\" gives following error:\r\n\r\n> MultiTarget\\MultitargetLib.cs(1,18): error CS0234: The type or namespace name 'Http' does not exist in the namespace 'System.Net' (are you missing an assembly reference?) [C:\\SampleNetStandard\\SampleNetStandard.csproj]\r\n\r\nBuild FAILED.\r\n\r\n**To Reproduce:**\r\n\r\n1- Create a stand-alone .net standard 2.0 project with following .csproj \r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFrameworks>netstandard2.0;net40;net45</TargetFrameworks>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Newtonsoft.Json\" Version=\"10.0.3\" />\r\n  </ItemGroup>\r\n  <!-- Need to conditionally bring in references for the .NET Framework 4.0 target -->\r\n  <ItemGroup Condition=\"'$(TargetFramework)' == 'net40'\">\r\n    <Reference Include=\"System.Net\" />\r\n  </ItemGroup>\r\n\r\n  <!-- Need to conditionally bring in references for the .NET Framework 4.5 target -->\r\n  <ItemGroup Condition=\"'$(TargetFramework)' == 'net45'\">\r\n    <Reference Include=\"System.Net.Http\" />\r\n    <Reference Include=\"System.Threading.Tasks\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\n2- Add `MultitargetLib.cs` file from following link: \r\nhttps://docs.microsoft.com/en-us/dotnet/core/tutorials/libraries#how-to-multitarget\r\n\r\n3- In project folder make `dotnet restore`\r\n\r\n4- Make VS build. Should be building fine.\r\n\r\n5- In project folder make  `dotnet build`. This will give previous error mentioned. Cannot find reference.\r\n\r\n"},{"Id":"7185998311","Type":"IssuesEvent","CreatedAt":"2018-02-01T21:31:53","Actor":"reyou","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/639","RelatedDescription":"Opened issue \"VS 2017 can build multi-target project but cli \"dotnet build\" fails.\" (#639) at dotnet/standard","RelatedBody":"I am following documentation at https://docs.microsoft.com/en-us/dotnet/core/tutorials/libraries#how-to-multitarget\r\nI can build project with VS 2017,  but \"dotnet build\" gives following error:\r\n\r\n> MultiTarget\\MultitargetLib.cs(1,18): error CS0234: The type or namespace name 'Http' does not exist in the namespace 'System.Net' (are you missing an assembly reference?) [C:\\SampleNetStandard\\SampleNetStandard.csproj]\r\n\r\nBuild FAILED.\r\n\r\n**To Reproduce:**\r\n\r\n1- Create a stand-alone .net standard 2.0 project with following .csproj \r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFrameworks>netstandard2.0;net40;net45</TargetFrameworks>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Newtonsoft.Json\" Version=\"10.0.3\" />\r\n  </ItemGroup>\r\n  <!-- Need to conditionally bring in references for the .NET Framework 4.0 target -->\r\n  <ItemGroup Condition=\"'$(TargetFramework)' == 'net40'\">\r\n    <Reference Include=\"System.Net\" />\r\n  </ItemGroup>\r\n\r\n  <!-- Need to conditionally bring in references for the .NET Framework 4.5 target -->\r\n  <ItemGroup Condition=\"'$(TargetFramework)' == 'net45'\">\r\n    <Reference Include=\"System.Net.Http\" />\r\n    <Reference Include=\"System.Threading.Tasks\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\n2- Add `MultitargetLib.cs` file from following link: \r\nhttps://docs.microsoft.com/en-us/dotnet/core/tutorials/libraries#how-to-multitarget\r\n\r\n3- In project folder make `dotnet restore`\r\n\r\n4- Make VS build. Should be building fine.\r\n\r\n5- In project folder make  `dotnet build`. This will give previous error mentioned. Cannot find reference.\r\n\r\n"},{"Id":"7185077325","Type":"PullRequestEvent","CreatedAt":"2018-02-01T18:18:58","Actor":"joperezr","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/638","RelatedDescription":"Merged pull request \"Building non-Windows builds using the CLI's MSBuild\" (#638) at dotnet/standard","RelatedBody":"cc: @weshaggard "},{"Id":"7184946192","Type":"PullRequestEvent","CreatedAt":"2018-02-01T17:51:31","Actor":"joperezr","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/638","RelatedDescription":"Opened pull request \"Building non-Windows builds using the CLI's MSBuild\" (#638) at dotnet/standard","RelatedBody":"cc: @weshaggard "},{"Id":"7171898026","Type":"IssuesEvent","CreatedAt":"2018-01-30T15:18:32","Actor":"ditux","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/637","RelatedDescription":"Closed issue \"ProjectInSolution class is not recognised in .Net Standard 2.0\" (#637) at dotnet/standard","RelatedBody":"Hello,\r\n\r\nI am writing a c# automation application that requires \"ProjectInSolution\" class which i understand is only available on the .NET Framework. I am targeting the .NET Standard 2.0 and would like to know if there is an alternative?\r\n\r\nThanks"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7194464744","Type":"IssuesEvent","CreatedAt":"2018-02-04T05:13:29","Actor":"danmosemsft","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/25847","RelatedDescription":"Closed issue \"System.Text.RegularExpressions.Tests.RegexReplaceTests/Replace OutOfMemoryException on two Regex tests on 64 bit Windows\" (#25847) at dotnet/corefx","RelatedBody":"These two regex tests have recently started failing consistently\r\n```\r\n            yield return new object[] { \"([a-z]([a-z]([a-z]([a-z]([a-z]([a-z]([a-z]([a-z]([a-z]([a-z]([a-z]([a-z]([a-z]([a-z]([a-z])))))))))))))))\", \"abcdefghiklmnop\", \"$15\", RegexOptions.None, 15, 0, \"p\" };\r\n            yield return new object[] { \"([a-z]([a-z]([a-z]([a-z]([a-z]([a-z]([a-z]([a-z]([a-z]([a-z]([a-z]([a-z]([a-z]([a-z]([a-z])))))))))))))))\", \"abcdefghiklmnop\", \"$3\", RegexOptions.None, 15, 0, \"cdefghiklmnop\" };\r\n```\r\non 64 bit Windows runs\r\n```\r\nUnhandled Exception of Type System.OutOfMemoryException\r\nMessage :\r\nSystem.OutOfMemoryException : Exception of type 'System.OutOfMemoryException' was thrown.\r\nStack Trace :\r\n   at Go18(RegexRunner )\r\n   at System.Text.RegularExpressions.RegexRunner.Scan(Regex regex, String text, Int32 textbeg, Int32 textend, Int32 textstart, Int32 prevlen, Boolean quick, TimeSpan timeout)\r\n   at System.Text.RegularExpressions.Regex.Run(Boolean quick, Int32 prevlen, String input, Int32 beginning, Int32 length, Int32 startat)\r\n   at System.Text.RegularExpressions.Regex.Match(String input, Int32 startat)\r\n   at System.Text.RegularExpressions.RegexReplacement.Replace(Regex regex, String input, Int32 count, Int32 startat)\r\n   at System.Text.RegularExpressions.Regex.Replace(String input, String replacement)\r\n   at System.Text.RegularExpressions.Tests.RegexReplaceTests.Replace(String pattern, String input, String replacement, RegexOptions options, Int32 count, Int32 start, String expected)\r\n```\r\n\r\nNothing has changed in regex code/tests. It's also odd that the OOM is 64 bit only.\r\n\r\n@maririos is the repro system ready and working for such a case?"},{"Id":"7194461462","Type":"PullRequestEvent","CreatedAt":"2018-02-04T05:10:21","Actor":"danmosemsft","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/26829","RelatedDescription":"Opened pull request \"Fix IndexOutOfRange for invalid grouping construct\" (#26829) at dotnet/corefx","RelatedBody":"Fix https://github.com/dotnet/corefx/issues/26483\r\n\r\nFirst commit is just a rename to make method name consistent with MoveRight() and RightChar()."},{"Id":"7194441214","Type":"PullRequestEvent","CreatedAt":"2018-02-04T04:51:34","Actor":"danmosemsft","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/26828","RelatedDescription":"Opened pull request \"Regex.pattern.rebased\" (#26828) at dotnet/corefx","RelatedBody":"Fix https://github.com/dotnet/corefx/issues/26501\r\n\r\nIn `(cat)(\\c[*)(dog)` the `\\c[` should match the `[` control character ie `\\u001b`. However it was rejecting the pattern because it does a pre-scan for capturing groups. In this phase it assumes that `\\` always escaped a single character, so it treats the `[` as the start of a character class, which is ultimately never closed.\r\n\r\nThe fix is to call into the real scanner for escape characters. It is necessary to pass a flag indicating we are scanning. This is to avoid validating that backreferences refer to valid capturing groups (these are not all set up until the pre-scanning is complete) and also to avoid allocating objects that aren't needed in this phase. We already do something very similar with ScanCharClass.\r\n\r\nIdeally there would not be a pre-scan but I imagine that would be a substantial change.\r\n\r\nThis causes more code to run during the pre-scan when a backslash is encountered. To verify this does not impact perf I used\r\n\r\n### Before\r\n\r\nSystem.Text.RegularExpressions.Performance.Tests.dll | Metric | Unit | Iterations | Average | STDEV.S | Min | Max\r\n--- | --- | --- | --- | --- | --- | --- | ---\r\nSystem.Text.RegularExpressions.Tests.Perf_Regex.Match | Duration | msec | 40 | 254.4937651 | 10.61602132 | 242.199422 | 292.2573603\r\nSystem.Text.RegularExpressions.Tests.Perf_Regex.Match | GC Allocations | bytes | 40 | 199009143.4 | 51155.77152 | 198894312 | 199115104\r\n--- | --- | --- | --- | --- | --- | --- | ---\r\nSystem.Text.RegularExpressions.Tests.Perf_Regex.Match | Duration | msec | 40 | 254.5757042 | 9.581244315 | 240.640903 | 280.4672477\r\nSystem.Text.RegularExpressions.Tests.Perf_Regex.Match | GC Allocations | bytes | 40 | 199014283.6 | 53740.21012 | 198891600 | 199147112\r\n\r\n### After this and #26543\r\n\r\nSystem.Text.RegularExpressions.Performance.Tests.dll | Metric | Unit | Iterations | Average | STDEV.S | Min | Max\r\n--- | --- | --- | --- | --- | --- | --- | ---\r\nSystem.Text.RegularExpressions.Tests.Perf_Regex.Match | Duration | msec | 40 | 255.7465251 | 8.22304857 | 245.721344 | 274.720744\r\nSystem.Text.RegularExpressions.Tests.Perf_Regex.Match | GC Allocations | bytes | 40 | 199048536.2 | 43711.56892 | 198975760 | 199152184\r\n--- | --- | --- | --- | --- | --- | --- | ---\r\nSystem.Text.RegularExpressions.Tests.Perf_Regex.Match | Duration | msec | 40 | 252.0985474 | 6.940020203 | 241.216865 | 268.1445129\r\nSystem.Text.RegularExpressions.Tests.Perf_Regex.Match | GC Allocations | bytes | 40 | 199049236 | 42700.49669 | 198976144 | 199151832\r\n\r\nElapsed difference is within noise level and allocations are negligibly increased.\r\n"},{"Id":"7194417443","Type":"PullRequestEvent","CreatedAt":"2018-02-04T04:28:24","Actor":"danmosemsft","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/26827","RelatedDescription":"Opened pull request \"Regex perf test\" (#26827) at dotnet/corefx","RelatedBody":"A crude start at regex perf tests.\r\n\r\nThe patterns and inputs are a subset of those in RegexGroupTests.Groups_Basic_TestData -- I excluded a small number that were unusually slow. All patterns are valid patterns.\r\n\r\nI initially started by measuring each pattern separately but this produces too much data (and since each should take 100ms-1sec to measure, takes a long time). Rather than cherry pick a few of the patterns, I chose to start the tests with a single test that gets broad coverage, until we break tests out further.\r\n\r\nExecution time is ~15 sec and produces a table like this, with matching CSV.\r\n```\r\n   System.Text.RegularExpressions.Performance.Tests.dll  | Metric         | Unit  | Iterations |    Average |   STDEV.S |        Min |        Max\r\n  :----------------------------------------------------- |:-------------- |:-----:|:----------:| ----------:| ---------:| ----------:| ----------:\r\n   System.Text.RegularExpressions.Tests.Perf_Regex.Match | Duration       | msec  |     40     |    255.747 |     8.223 |    245.721 |    274.721\r\n   System.Text.RegularExpressions.Tests.Perf_Regex.Match | GC Allocations | bytes |     40     | 1.990E+008 | 43711.569 | 1.990E+008 | 1.992E+008\r\n```"},{"Id":"7194406754","Type":"IssuesEvent","CreatedAt":"2018-02-04T04:18:14","Actor":"MohammadHamdyGhanem","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/26826","RelatedDescription":"Opened issue \"Add Convert.ToString(sbyte value, int toBase) \" (#26826) at dotnet/corefx","RelatedBody":"1. Why there is no\r\nConvert.ToString(sbyte value, int toBase)\r\nOverloaded method?\r\nWhen I use:\r\nsbyte n = -1;\r\nvar x = Convert.ToString(n, 2);\r\nConsole.WriteLine(x);\r\nthe output is \"1111111111111111\" because the ToString casts n to float!\r\n\r\n2. Why is -1 is represented as 1111111111111111, and -128 is represented as 1111111110000000?\r\nAs far as I know, the most significant bit is used as the sign. I'm not familiar with this representation.\r\n\r\n\r\n\r\n"},{"Id":"7194389297","Type":"PullRequestEvent","CreatedAt":"2018-02-04T04:01:47","Actor":"tmat","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/26321","RelatedDescription":"Merged pull request \"Codecoverage corefx\\src\\System.Reflection.Metadata\\src\\System\\Reflection\\Metadata\\MetadataReader.cs \" (#26321) at dotnet/corefx","RelatedBody":"Completes code coverage for the constructors and everything the constructors call, except lines 777 and 778. These are only reachable with some sort of corruption that I can't simulate.\r\n\r\nThis includes everything from pull request #26029.\r\n\r\nFixes #26028\r\n"},{"Id":"7194389291","Type":"IssuesEvent","CreatedAt":"2018-02-04T04:01:47","Actor":"tmat","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/26028","RelatedDescription":"Closed issue \"Wrong exception thrown with invalid external table mask\" (#26028) at dotnet/corefx","RelatedBody":"In system.reflection.metadata\\src\\system\\reflection\\metadata\\metadatareader.cs, an invalid External Table Mask should throw a BadImageFormatException but always throws a System.FormatException."},{"Id":"7194364104","Type":"PullRequestEvent","CreatedAt":"2018-02-04T03:38:43","Actor":"jkotas","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/26819","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#26819) at dotnet/corefx","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7194360852","Type":"PullRequestEvent","CreatedAt":"2018-02-04T03:35:40","Actor":"jkotas","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/26825","RelatedDescription":"Opened pull request \"Update CoreClr to preview2-26204-01 (master)\" (#26825) at dotnet/corefx","RelatedBody":""},{"Id":"7194360490","Type":"PullRequestEvent","CreatedAt":"2018-02-04T03:35:18","Actor":"jkotas","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/pull/26824","RelatedDescription":"Closed pull request \"Update CoreClr to preview2-26204-01 (master)\" (#26824) at dotnet/corefx","RelatedBody":""},{"Id":"7194360025","Type":"PullRequestEvent","CreatedAt":"2018-02-04T03:34:53","Actor":"jkotas","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/corefx/pull/26824","RelatedDescription":null,"RelatedBody":""},{"Id":"7194359945","Type":"PullRequestEvent","CreatedAt":"2018-02-04T03:34:49","Actor":"jkotas","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/pull/26824","RelatedDescription":"Closed pull request \"Update CoreClr to preview2-26204-01 (master)\" (#26824) at dotnet/corefx","RelatedBody":""},{"Id":"7194352156","Type":"PullRequestEvent","CreatedAt":"2018-02-04T03:27:35","Actor":"jkotas","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/26824","RelatedDescription":"Opened pull request \"Update CoreClr to preview2-26204-01 (master)\" (#26824) at dotnet/corefx","RelatedBody":""},{"Id":"7194351694","Type":"PullRequestEvent","CreatedAt":"2018-02-04T03:27:06","Actor":"jkotas","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/pull/26823","RelatedDescription":"Closed pull request \"Update CoreClr to preview2-26204-01\" (#26823) at dotnet/corefx","RelatedBody":""}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7194339599","Type":"IssuesEvent","CreatedAt":"2018-02-04T03:16:15","Actor":"KirillOsenkov","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/24626","RelatedDescription":"Opened issue \"Decompiler: NullReferenceException in DecompileSymbolAsync\" (#24626) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\nadbce761b91992740c128b7d4233f51b49541e97\r\n\r\n**Steps to Reproduce**:\r\n\r\nWhen hosting Roslyn outside of Visual Studio we try to go to definition for System.Object and the decompiler is invoked. When trying to decompile, this line gets called:\r\n\r\nhttp://source.roslyn.io/#Microsoft.CodeAnalysis.EditorFeatures/Implementation/MetadataAsSource/MetadataAsSourceFileService.cs,198\r\n\r\nThis is because `var reference = compilation.GetMetadataReference(symbol.ContainingAssembly);` returns null. It asks for PresentationCore, and there is a PresentationCore in the list of references, however the object in the list is a different instance, and the lookup is simply done using ReferenceEquals, so since the objects are different the lookup fails. Not sure if the lookup in here should be using value identity:\r\nhttp://source.roslyn.io/#Microsoft.CodeAnalysis/ReferenceManager/CommonReferenceManager.State.cs,420efd0d0f6c08ec\r\nNot sure what the contract of the `GetMetadataReference` method is (reference identity or value identity?)\r\n\r\n**Expected Behavior**:\r\nShould work.\r\n\r\n**Actual Behavior**:\r\n```\r\nNullReferenceException:\r\n \tMicrosoft.CodeAnalysis.CommonReferenceManager<Microsoft.CodeAnalysis.CSharp.CSharpCompilation, Microsoft.CodeAnalysis.CSharp.Symbols.AssemblySymbol>.GetMetadataReference Line 655\tC#\tSymbols loaded.\r\n \tMicrosoft.CodeAnalysis.Compilation.GetMetadataReference Line 726\tC#\tSymbols loaded.\r\n>\tMicrosoft.CodeAnalysis.Editor.Implementation.MetadataAsSource.MetadataAsSourceFileService.DecompileSymbolAsync Line 192\tC#\tSymbols loaded.\r\n \tMicrosoft.CodeAnalysis.Editor.Implementation.MetadataAsSource.MetadataAsSourceFileService.GetGeneratedFileAsync Line 121\tC#\tSymbols loaded.\r\n \t...SymbolNavigationService.TryNavigateToSymbol.AnonymousMethod__2 Line 88\tC#\tSymbols loaded.\r\n\r\n```"},{"Id":"7194323166","Type":"IssuesEvent","CreatedAt":"2018-02-04T03:01:14","Actor":"KirillOsenkov","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/24625","RelatedDescription":"Opened issue \"SuggestedActionsSourceProvider is not resilient against documents that are not part of a workspace\" (#24625) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\nadbce761b91992740c128b7d4233f51b49541e97\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Have a C# .cs document that is not a part of a workspace (content type must be CSharp)\r\n2. Open that document in an editor\r\n\r\n**Expected Behavior**:\r\nSuggestedActionsSource should be resilient against the situation where the text view/buffer for the .cs document is not added to the workspace.\r\n\r\n**Actual Behavior**:\r\nNullReferenceException:\r\n\r\nMicrosoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedActionsSourceProvider.SuggestedActionsSource.<GetFixLevelAsync>d__40.MoveNext() in /_/src/EditorFeatures/Core.Wpf/Suggestions/SuggestedActionsSource.cs:line 736\r\n\r\nIn these locations, we need to gracefully deal with the fact that document may be null:\r\n\r\nhttp://source.roslyn.io/#Microsoft.CodeAnalysis.EditorFeatures.Wpf/Suggestions/SuggestedActionsSource.cs,161\r\nhttp://source.roslyn.io/#Microsoft.CodeAnalysis.EditorFeatures.Wpf/Suggestions/SuggestedActionsSource.cs,899\r\n\r\nNote that this location already does the right thing:\r\nhttp://source.roslyn.io/#Microsoft.CodeAnalysis.EditorFeatures.Wpf/Suggestions/SuggestedActionsSource.cs,671"},{"Id":"7194247624","Type":"PullRequestEvent","CreatedAt":"2018-02-04T01:54:17","Actor":"Neme12","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/24624","RelatedDescription":"Opened pull request \"Support for local & anonymous functions in InitializeParameter refactorings\" (#24624) at dotnet/roslyn","RelatedBody":"From this request: #20983"},{"Id":"7194242763","Type":"PullRequestEvent","CreatedAt":"2018-02-04T01:49:57","Actor":"Neme12","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/pull/24608","RelatedDescription":"Closed pull request \"Support for C# local functions in InitializeParameter refactorings\" (#24608) at dotnet/roslyn","RelatedBody":""},{"Id":"7194236910","Type":"PullRequestEvent","CreatedAt":"2018-02-04T01:44:36","Actor":"jasonmalinowski","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/24620","RelatedDescription":"Merged pull request \"Merge dev15.6.x to dev15.6.x-vs-deps\" (#24620) at dotnet/roslyn","RelatedBody":"This is a pull request from dev15.6.x into dev15.6.x-vs-deps.\r\n\r\n``` bash\r\ngit fetch --all\r\ngit checkout merges/dev15.6.x-to-dev15.6.x-vs-deps-20180202\r\ngit reset --hard upstream/dev15.6.x-vs-deps\r\ngit merge upstream/dev15.6.x\r\n# Fix merge conflicts\r\ngit commit\r\ngit push merges/dev15.6.x-to-dev15.6.x-vs-deps-20180202 --force\r\n```\r\n\r\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7194246719","Type":"PullRequestEvent","CreatedAt":"2018-02-04T01:53:27","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5342","RelatedDescription":"Merged pull request \"Fixed ldind failure and properly zext unsigned types in WebAssembly\" (#5342) at dotnet/corert","RelatedBody":"@morganbr \r\nThis is to fix the ldind issue I noticed in testing for #5172, In making the test for this I noticed that we weren't getting the right results for comparisons between unsigned types (smaller than 32bit) when they had the high bit set."},{"Id":"7194170564","Type":"IssuesEvent","CreatedAt":"2018-02-04T00:48:34","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/4508","RelatedDescription":"Closed issue \"Add support for building WebAssembly on Mac/Linux\" (#4508) at dotnet/corert","RelatedBody":"Currently, ILC can only produce WebAssembly on Windows because it depends on [LLVMSharp](https://github.com/Microsoft/LLVMSharp), which in turn depends on a Windows build of libLLVM. There appears to be a Linux build of LLVMSharp, so the work should be to incorporate the Linux version and an associated Mac/Linux version of libLLVM into building ILC.\r\n\r\nWhen this is complete, please also remove the no_unix file from tests/src/Simple/HelloWasm in order to enable the test for Mac and Linux."},{"Id":"7194168900","Type":"PullRequestEvent","CreatedAt":"2018-02-04T00:47:18","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5297","RelatedDescription":"Merged pull request \"Add support for building wasm on OSX and Ubuntu 16\" (#5297) at dotnet/corert","RelatedBody":"Work in progress for making it possible to build wasm on OSX host.\r\n\r\nSpun off from this issue:\r\nhttps://github.com/dotnet/corert/issues/4508"},{"Id":"7193259823","Type":"PullRequestEvent","CreatedAt":"2018-02-03T14:38:54","Actor":"Blealtan","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5344","RelatedDescription":"Opened pull request \"Implement break opcode as llvm.debugtrap.\" (#5344) at dotnet/corert","RelatedBody":"Implemented break opcode as llvm.debugtrap. Not adding any test cases since it seems that no C# codes generates break opcode directly."},{"Id":"7192645369","Type":"PullRequestEvent","CreatedAt":"2018-02-03T06:27:27","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5343","RelatedDescription":"Merged pull request \"perfom -> perform\" (#5343) at dotnet/corert","RelatedBody":""},{"Id":"7192642112","Type":"PullRequestEvent","CreatedAt":"2018-02-03T06:24:47","Actor":"github-john-doe","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5343","RelatedDescription":"Opened pull request \"perfom -> perform\" (#5343) at dotnet/corert","RelatedBody":""},{"Id":"7192560251","Type":"IssuesEvent","CreatedAt":"2018-02-03T05:15:19","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/4510","RelatedDescription":"Closed issue \"Implement castclass/isinst opcodes\" (#4510) at dotnet/corert","RelatedBody":"The castclass and isinst opcodes should be implemented as calls into RhTypeCast functions. The method that handles these opcodes is https://github.com/dotnet/corert/blob/e6d0a9398e3d8fc83d047cccda302ed13610f190/src/ILCompiler.WebAssembly/src/CodeGen/ILToWebAssemblyImporter.cs#L507\r\n\r\nThe complete mapping based on opcode and type is in https://github.com/dotnet/corert/blob/cccbccac222c70766962412a2d485a5edd2fbf79/src/ILCompiler.Compiler/src/Compiler/JitHelper.cs#L287\r\n"},{"Id":"7192560211","Type":"PullRequestEvent","CreatedAt":"2018-02-03T05:15:18","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5325","RelatedDescription":"Merged pull request \"Implement castclass & isinst for WebAssembly\" (#5325) at dotnet/corert","RelatedBody":"Implement `castclass` and `isinst` opcodes in `ILToWebAssemblyImporter` by doing related function calls to methods in `System.Runtime.TypeCast`, fixing #4510.\r\n\r\nAt the same time, corresponding test is added in `HelloWasm`. This includes three types of casting:\r\n* castclass/isinst to classes.\r\n* castclass/isinst to interfaces, failing due to that in `IsInstanceOfInterface`, an cache miss will lead to an exception: null `pHandleTable` found in fetched segment pointer.\r\n* castclass/isinst to array types, failing due to always true return value by `IsInstanceOfArray`.\r\n\r\nThese two failing cases still need further investigation; however, I believe the `ImportCasting` implementation is already functioning correctly, so this PR is here."},{"Id":"7192548050","Type":"PullRequestEvent","CreatedAt":"2018-02-03T05:04:47","Actor":"hippiehunter","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5342","RelatedDescription":"Opened pull request \"Fixed ldind failure and properly zext unsigned types in WebAssembly\" (#5342) at dotnet/corert","RelatedBody":"@morganbr \r\nThis is to fix the ldind issue I noticed in testing for #5172, In making the test for this I noticed that we weren't getting the right results for comparisons between unsigned types (smaller than 32bit) when they had the high bit set."}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7191955018","Type":"PullRequestEvent","CreatedAt":"2018-02-02T23:22:16","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1928","RelatedDescription":"Merged pull request \"NETCorePlatformsImplicitPackageVersion copy from BundledNETCorePlatformsVersion\" (#1928) at dotnet/sdk","RelatedBody":"https://github.com/dotnet/cli/issues/8421\r\n\r\nTo BundledNETCorePlatformsVersion\r\nNETCorePlatformsImplicitPackageVersion copy from BundledNETCorePlatformsVersion\r\nnext step insert SDK along with the name change in CLI in one PR to make CLI build"},{"Id":"7191556124","Type":"PullRequestEvent","CreatedAt":"2018-02-02T21:30:57","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1928","RelatedDescription":"Opened pull request \"Rename to BundledNETCoreAppPackageVersion\" (#1928) at dotnet/sdk","RelatedBody":"https://github.com/dotnet/cli/issues/8421"},{"Id":"7189133425","Type":"IssuesEvent","CreatedAt":"2018-02-02T12:54:34","Actor":"dafo","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1926","RelatedDescription":"Closed issue \"r\" (#1926) at dotnet/sdk","RelatedBody":""},{"Id":"7189132361","Type":"IssuesEvent","CreatedAt":"2018-02-02T12:54:18","Actor":"dafo","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/1926","RelatedDescription":"Opened issue \"r\" (#1926) at dotnet/sdk","RelatedBody":""},{"Id":"7188811502","Type":"PullRequestEvent","CreatedAt":"2018-02-02T11:32:34","Actor":"v-zbsail","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1925","RelatedDescription":"Opened pull request \"LOC CHECKIN | sdk master | 20180202\" (#1925) at dotnet/sdk","RelatedBody":null},{"Id":"7187904529","Type":"PullRequestEvent","CreatedAt":"2018-02-02T08:00:50","Actor":"dotnet-bot","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1924","RelatedDescription":"Opened pull request \"Merge release/2.1 to master\" (#1924) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.1 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1-to-master-20180202-080048\ngit reset --hard upstream/master\ngit merge upstream/release/2.1\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1-to-master-20180202-080048 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7187904435","Type":"PullRequestEvent","CreatedAt":"2018-02-02T08:00:48","Actor":"dotnet-bot","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1923","RelatedDescription":"Opened pull request \"Merge release/2.0.0 to release/2.1\" (#1923) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.0.0 into release/2.1.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.0.0-to-release/2.1-20180202-080047\ngit reset --hard upstream/release/2.1\ngit merge upstream/release/2.0.0\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.0.0-to-release/2.1-20180202-080047 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"959498964503425026","CreatedAt":"2018-02-02T18:49:14+00:00","UserScreenname":"dotnet","Text":"https://t.co/iOiV9qNspl Core 2.1 roadmap https://t.co/1QFI97S11f","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":219,"FavoriteCount":175,"RawContent":null},{"Id":"959498759733301248","CreatedAt":"2018-02-02T18:48:25+00:00","UserScreenname":"dotnet","Text":"Entity Framework Core 2.1 Roadmap https://t.co/jyrJwFiQzJ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":102,"FavoriteCount":69,"RawContent":null},{"Id":"959492955391143939","CreatedAt":"2018-02-02T18:25:21+00:00","UserScreenname":"dotnet","Text":".NET Core 2.1 Roadmap https://t.co/v7JFqyVWWb","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":203,"FavoriteCount":162,"RawContent":null},{"Id":"959125554988371969","CreatedAt":"2018-02-01T18:05:26+00:00","UserScreenname":"dotnet","Text":"#TBT: You've probably used LINQ for years, but have you ever wondered about the underlying pieces and how they fit… https://t.co/tuqqdA5nUG","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":80,"FavoriteCount":25,"RawContent":null},{"Id":"956524881096708096","CreatedAt":"2018-01-25T13:51:17+00:00","UserScreenname":"dotnet","Text":"Jeff and Maira - improving https://t.co/QxdK7Ocjtg LIVE at 10am ET / 15:00 UTC.  Check it out! https://t.co/jlSeKESN3g","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":14,"FavoriteCount":8,"RawContent":null},{"Id":"955790963024257024","CreatedAt":"2018-01-23T13:14:57+00:00","UserScreenname":"dotnet","Text":"Check out @csharpfritz and @condrong at 10am ET, 15:00 UTC talking about new @AspNet Core features and benefits for… https://t.co/BLXAg7rubK","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":12,"FavoriteCount":4,"RawContent":null},{"Id":"954763538328883201","CreatedAt":"2018-01-20T17:12:20+00:00","UserScreenname":"dotnet","Text":"Jeff is close to his first follower goal!  Follow him on Mixer or Twitch and he will host a FREE workshop live on s… https://t.co/EefnkSEqfe","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":17,"FavoriteCount":6,"RawContent":null},{"Id":"954724179533758465","CreatedAt":"2018-01-20T14:35:56+00:00","UserScreenname":"dotnet","Text":"Join Jeff at 10am ET (-5:00 UTC) for a live coding stream about .NET, .NET Core, C#, and Visual Studio.  He'll also… https://t.co/dWA8n7Ttph","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":20,"FavoriteCount":7,"RawContent":null}]}},"RunOn":"2018-02-04T05:30:19.5495777Z","RunDurationInMilliseconds":7982}