{"Data":{"Blog":{"FeedItems":[{"Title":"A Quick Update on Google Components for iOS and Android","PublishedOn":"2019-03-13T19:12:15+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"One of the best parts about using Xamarin for mobile development is access to all of the platform APIs from C# bindings. Additionally, any native iOS or Android library can be consumed by a Xamarin...","Href":"https://blog.xamarin.com/update-google-components-ios-android/","RawContent":null},{"Title":"Enhanced Xamarin Development With MFractor","PublishedOn":"2019-03-12T15:58:18+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This post was guest authored and contributed by Matthew Robbins. Matthew is a Microsoft MVP and the founder of MFractor, incredible Xamarin tools for Visual Studio Mac. MFractor MFractor is a powerful...","Href":"https://blog.xamarin.com/enhanced-xamarin-development-with-mfractor/","RawContent":null},{"Title":"Podcast: POP! New docs, blogs, customer showcases, and Twitch streams!","PublishedOn":"2019-03-08T17:03:42+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The Visual Studio Mobile Developer Podcast features Matt Soucoup and James Montemagno discussing the latest and greatest in mobile and cloud development. Podcast Highlights This month&#8217;s Visual...","Href":"https://blog.xamarin.com/podcast-pop-docs-blogs-showcases-twitch/","RawContent":null},{"Title":"Beautiful Material Design for Android & iOS","PublishedOn":"2019-03-07T20:27:10+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This week, Xamarin.Forms 3.6 shipped with another round of improvements, the most exciting of which is called Visual. Visual enables developers to create beautiful, cross-platform mobile applications...","Href":"https://blog.xamarin.com/beautiful-material-design-android-ios/","RawContent":null},{"Title":"Xamarin.Forms 3.6: Visual Has Materialized","PublishedOn":"2019-03-06T20:12:09+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We’re pleased to announce the release of Xamarin.Forms 3.6 in the usual cadence of our regular releases. In addition to the usual enhancements and bug fixes, we’re also moving our Visual feature from...","Href":"https://blog.xamarin.com/xamarin-forms-3-6-visual-has-materialized/","RawContent":null},{"Title":"Best Practices and Tips for Using Xamarin.UITest","PublishedOn":"2019-03-04T19:35:49+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We can all agree that it is very important for mobile apps to have great user interfaces, be accessible, and be extremely performant. Given the plethora of devices with different screen sizes, screen...","Href":"https://blog.xamarin.com/best-practices-tips-xamarin-uitest/","RawContent":null},{"Title":"Developer Community Events in March","PublishedOn":"2019-03-01T17:59:05+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"User groups are getting together to learn about new, exciting releases and tooling to help jumpstart their next mobile development project. Network with your local community and you too could get all...","Href":"https://blog.xamarin.com/developer-community-events-in-march/","RawContent":null},{"Title":"View PDF Files within Your Xamarin.Forms Apps Using the Syncfusion PDF Viewer","PublishedOn":"2019-02-28T17:04:29+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This post was guest authored and contributed by Suresh Mohan. Suresh is the Product Manager for PDF Viewer at Syncfusion Software where he specializes in desktop and mobile app development. &#160;...","Href":"https://blog.xamarin.com/xamarin-forms-apps-syncfusion-pdf-viewer/","RawContent":null},{"Title":"Quick Tip: Debugging Local ASP.NET Core Web APIs on Android Emulators","PublishedOn":"2019-02-25T19:36:04+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"When developing mobile applications with a web API backend there is always a need to debug locally on your development machine. If you are using Visual Studio for Mac and debugging iOS applications...","Href":"https://blog.xamarin.com/debug-local-asp-net-core-web-apis-android-emulators/","RawContent":null},{"Title":"Xamarin and Azure Office Hours Recap from December 2018 and January 2019","PublishedOn":"2019-02-21T18:11:51+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"That&#8217;s right, I ❤️ every single one of you(!) and I want to know more about your stories building mobile apps. I want to hear stories of your successes and also, the not-so-successful...","Href":"https://blog.xamarin.com/xamarin-azure-office-hours-recap-december-january/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"9238740201","Type":"PullRequestEvent","CreatedAt":"2019-03-13T22:28:34","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2828","RelatedDescription":"Opened pull request \"Bump to mono/opentk/master@197827f0\" (#2828) at xamarin/xamarin-android","RelatedBody":"Sanitizes identifiers for politeness checks."},{"Id":"9238732875","Type":"PullRequestEvent","CreatedAt":"2019-03-13T22:27:02","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2799","RelatedDescription":"Closed pull request \"Bump to mono:2019-02\" (#2799) at xamarin/xamarin-android","RelatedBody":""},{"Id":"9238628628","Type":"PullRequestEvent","CreatedAt":"2019-03-13T22:05:37","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2825","RelatedDescription":"Merged pull request \"[Xamarin.Android.Build.Tasks] include arm64-v8a by default\" (#2825) at xamarin/xamarin-android","RelatedBody":"Fixes: http://work.devdiv.io/788593\r\n\r\nGoogle Play has some new policies coming soon:\r\n\r\n    Starting August 1, 2019: Google Play Store will require apps to\r\n    support 64-bit architectures.\r\n\r\n    The current recommendation from Google is to provide 64-bit versions\r\n    in addition to 32-bit versions of the application.\r\n\r\n    Starting August 1, 2021: Google Play Store will stop serving apps\r\n    without 64-bit versions on 64-bit capable devices.\r\n\r\nTo prepare for this, we are changing defaults in Xamarin.Android:\r\n\r\n    <AndroidSupportedAbis Condition=\" '$(AndroidSupportedAbis)' == '' \">armeabi-v7a;arm64-v8a</AndroidSupportedAbis>\r\n\r\nWe may change this at a later date, but this adds `arm64-v8a` to the\r\nlist of default architectures.\r\n\r\nAdditionally, I had to add change `Configuration.props`, so XA's build\r\nwill build `arm64-v8a` by default:\r\n\r\n    <AndroidSupportedTargetJitAbis Condition=\" '$(AndroidSupportedTargetJitAbis)' == '' \">armeabi-v7a:arm64-v8a:x86</AndroidSupportedTargetJitAbis>\r\n\r\n*NOTE: this one uses `:` as a delimiter*\r\n\r\nWe can investigate using a 64-bit emulator down the road.\r\n\r\nI also did a little digging in monodroid, it does not appear any\r\nchanges are needed there for `arm64-v8a`."},{"Id":"9238557299","Type":"PullRequestEvent","CreatedAt":"2019-03-13T21:52:11","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2826","RelatedDescription":"Merged pull request \"[create-vsix] fix for building the VSIX on Windows\" (#2826) at xamarin/xamarin-android","RelatedBody":"Context: http://build.devdiv.io/2492963\r\n\r\ne83ba0d made quite a few changes to consolidate our installers, yay!\r\n\r\nBut we started getting a build failure on Azure DevOps:\r\n\r\n    CreateVsixContainer:\r\n    Creating VSIX Container...\r\n    Creating the package with the following compression level. \"Normal\".\r\n        E:\\A\\_work\\484\\s\\packages\\Microsoft.VSSDK.BuildTools.15.0.26201\\tools\\VSSDK\\Microsoft.VsSDK.targets(590,5): error VSSDK1025: Could not add the file \"E:\\A\\_work\\484\\s\\\\bin\\Release\\\\lib\\xamarin.android\\xbuild\\Xamarin\\Android\\Java.Runtime.Environment.dll.config\" to the zip package \"bin\\Release\\Xamarin.Android.Sdk-OSS-9.2.99.66_HEAD_b77c037.vsix\". Could not find file 'E:\\A\\_work\\484\\s\\bin\\Release\\lib\\xamarin.android\\xbuild\\Xamarin\\Android\\Java.Runtime.Environment.dll.config'. [E:\\A\\_work\\484\\s\\build-tools\\create-vsix\\create-vsix.csproj]\r\n        Done Building Project \"E:\\A\\_work\\484\\s\\build-tools\\create-vsix\\create-vsix.csproj\" (default targets) -- FAILED.\r\n\r\nCurrently, there are a few files that are missing when you build on\r\nWindows:\r\n\r\n* `Java.Runtime.Environment.dll.config` is created with make:\r\n  https://github.com/xamarin/java.interop/blob/bd8662998aa3b807bd3abdbc11a006a22c97cfb3/Makefile#L87-L89\r\n* `libZipSharp.dll.config` is created with unix commands:\r\n  https://github.com/grendello/LibZipSharp/blob/44de300d48ac49effa74405850b75cd4216c4fdd/libZipSharp.csproj#L189-L195\r\n* `libmono-android.debug.dll` and `libmono-android.release.dll` are\r\n  not currently built on Windows hosts targeting Windows.\r\n\r\nWe could certainly improve things in this area, but this will get our\r\nWindows build green again."},{"Id":"9238545404","Type":"PullRequestEvent","CreatedAt":"2019-03-13T21:49:57","Actor":"radekdoulik","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2827","RelatedDescription":"Opened pull request \"Profiled AOT support\" (#2827) at xamarin/xamarin-android","RelatedBody":"[Xamarin.Android.Build.Tasks] Handle AOT profiles in Aot task\r\n\r\nAdded `AndroidEnableProfiledAot` property to control usage of AOT\r\nprofiles and `AndroidAotProfiles` item group to supply the profiles.\r\n\r\nThe `AndroidEnableProfiledAot` also enables the `AotAssemblies` when\r\nnot set.\r\n\r\nUpdated the `Aot` task to use the profiles\r\n\r\nThe current default startup AOT profile is recorded with our XF\r\ntest. Thus it should improve startup of XF apps as well as plain XA\r\napps.\r\n\r\nThe measurements with XF test app:\r\n\r\nNo AOT:\r\n```\r\n  Time:    368ms Message: Runtime.init: end, total time; elapsed: 0s:325::608574\r\n  Time:    366ms Message: Runtime.init: end, total time; elapsed: 0s:326::203731\r\n  Time:    365ms Message: Runtime.init: end, total time; elapsed: 0s:325::254824\r\n  Time:    360ms Message: Runtime.init: end, total time; elapsed: 0s:325::276959\r\n  Time:    366ms Message: Runtime.init: end, total time; elapsed: 0s:326::578470\r\n```\r\nProfiled AOT:\r\n```\r\n  Time:    259ms Message: Runtime.init: end, total time; elapsed: 0s:215::16115\r\n  Time:    263ms Message: Runtime.init: end, total time; elapsed: 0s:218::214709\r\n  Time:    250ms Message: Runtime.init: end, total time; elapsed: 0s:214::419813\r\n  Time:    248ms Message: Runtime.init: end, total time; elapsed: 0s:213::317157\r\n  Time:    262ms Message: Runtime.init: end, total time; elapsed: 0s:214::172313\r\n```\r\nAOT:\r\n```\r\n  Time:    282ms Message: Runtime.init: end, total time; elapsed: 0s:246::433202\r\n  Time:    279ms Message: Runtime.init: end, total time; elapsed: 0s:236::330753\r\n  Time:    267ms Message: Runtime.init: end, total time; elapsed: 0s:232::307732\r\n  Time:    267ms Message: Runtime.init: end, total time; elapsed: 0s:228::444398\r\n  Time:    263ms Message: Runtime.init: end, total time; elapsed: 0s:228::738252\r\n```\r\n\r\nThe whole start of the XF test takes about 1 second compared to about\r\n2 seconds without AOT.\r\n\r\n[Documentation] Added AndroidEnableProfiledAot description\r\n\r\nAlso noted the `AndroidAotProfiles` item group."},{"Id":"9238529683","Type":"PullRequestEvent","CreatedAt":"2019-03-13T21:47:05","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2818","RelatedDescription":"Merged pull request \"[prep-tasks] Fix git branch name identification\" (#2818) at xamarin/xamarin-android","RelatedBody":"Our current branch name identification logic does not work well when\r\nbuilding in CI, and seemingly always returns `HEAD` for builds\r\noccurring on Jenkins.\r\n\r\nIn an attempt to fix this, we'll now use @kzu's\r\n[git branch name identification logic][0], which involves attempting\r\nto read the branch name from `$(XamarinAndroidSourcePath)/.git/HEAD`\r\nbefore invoking (as a fallback):\r\n\r\n\tgit name-rev --name-only --exclude=tags/* HEAD\r\n\r\nThis \"try `.git/HEAD` then `git name-rev`\" approach allows us to get\r\nuseful branch names even in a \"detached HEAD\" state, which is typical\r\nfor our CI builds on Jenkins.\r\n\r\nSome examples of output differences; compare the previous command:\r\n\r\n\tgit rev-parse --abbrev-ref HEAD\r\n\r\n  * Local branch: `gitbranch-detached`\r\n  * Merge commit: `HEAD`\r\n  * Detached HEAD: `HEAD`\r\n  * Submodule: `HEAD`\r\n\r\nto the new `git name-rev` approach:\r\n\r\n\tgit name-rev --name-only HEAD\r\n\r\n  * Local branch: `gitbranch-detached`\r\n  * Merge commit: `remotes/origin/pr/2733/merge`\r\n  * Detached HEAD: `remotes/origin/create-installers~1`\r\n  * Submodule: `remotes/origin/gitbranch-detached`\r\n\r\nGiven these local results, the `<GitBranch/>` task has been updated\r\nto use `git name-rev --name-only --exclude=tags/* HEAD` over the\r\nprevious `git rev-parse --abbrev-ref`.\r\n\r\nThe exclude parameter has been provided to prefer a branch name or\r\nother ref name over a tag when a tag exists.\r\n\r\n[0]: https://github.com/kzu/GitInfo/blob/b62e1c0e147cf75a20e94af9169b8eca5b153700/src/GitInfo/build/GitInfo.targets#L351"},{"Id":"9238504266","Type":"PullRequestEvent","CreatedAt":"2019-03-13T21:42:31","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2824","RelatedDescription":"Merged pull request \"[tests] Remove impolite identifiers\" (#2824) at xamarin/xamarin-android","RelatedBody":""},{"Id":"9238251658","Type":"PullRequestEvent","CreatedAt":"2019-03-13T20:59:50","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2826","RelatedDescription":"Opened pull request \"[create-vsix] fix for building the VSIX on Windows\" (#2826) at xamarin/xamarin-android","RelatedBody":"Context: http://build.devdiv.io/2492963\r\n\r\ne83ba0d made quite a few changes to consolidate our installers, yay!\r\n\r\nBut we started getting a build failure on Azure DevOps:\r\n\r\n    CreateVsixContainer:\r\n    Creating VSIX Container...\r\n    Creating the package with the following compression level. \"Normal\".\r\n        E:\\A\\_work\\484\\s\\packages\\Microsoft.VSSDK.BuildTools.15.0.26201\\tools\\VSSDK\\Microsoft.VsSDK.targets(590,5): error VSSDK1025: Could not add the file \"E:\\A\\_work\\484\\s\\\\bin\\Release\\\\lib\\xamarin.android\\xbuild\\Xamarin\\Android\\Java.Runtime.Environment.dll.config\" to the zip package \"bin\\Release\\Xamarin.Android.Sdk-OSS-9.2.99.66_HEAD_b77c037.vsix\". Could not find file 'E:\\A\\_work\\484\\s\\bin\\Release\\lib\\xamarin.android\\xbuild\\Xamarin\\Android\\Java.Runtime.Environment.dll.config'. [E:\\A\\_work\\484\\s\\build-tools\\create-vsix\\create-vsix.csproj]\r\n        Done Building Project \"E:\\A\\_work\\484\\s\\build-tools\\create-vsix\\create-vsix.csproj\" (default targets) -- FAILED.\r\n\r\nCurrently, there are a few files that are missing when you build on\r\nWindows:\r\n\r\n* `Java.Runtime.Environment.dll.config` is created with make:\r\n  https://github.com/xamarin/java.interop/blob/bd8662998aa3b807bd3abdbc11a006a22c97cfb3/Makefile#L87-L89\r\n* `libZipSharp.dll.config` is created with unix commands:\r\n  https://github.com/grendello/LibZipSharp/blob/44de300d48ac49effa74405850b75cd4216c4fdd/libZipSharp.csproj#L189-L195\r\n* `libmono-android.debug.dll` and `libmono-android.release.dll` are\r\n  not currently built on Windows hosts targeting Windows.\r\n\r\nWe could certainly improve things in this area, but this will get our\r\nWindows build green again."}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"9240024927","Type":"PullRequestEvent","CreatedAt":"2019-03-14T04:19:40","Actor":"masonyc","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/5545","RelatedDescription":"Opened pull request \"[iOS] CaroselView - System.InvalidCastException: Specified cast is not valid.\" (#5545) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\nExtend CaroselView renderer in iOS from ItemsViewRenderer\r\n\r\n### Issues Resolved ### \r\n- fixes #5488 \r\n\r\n### API Changes ###\r\n None\r\n\r\n### Platforms Affected ### \r\n- iOS\r\n\r\n### Behavioral/Visual Changes ###\r\nCaroselView in iOS does not crash on InvalidCastException anymore.\r\n\r\n### Before/After Screenshots ### \r\nNot applicable\r\n\r\n### Testing Procedure ###\r\nGo to issue 5488 page, app should not crash\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [x] Rebased on top of the target branch at time of PR\r\n- [x] Changes adhere to coding standard\r\n"},{"Id":"9239616042","Type":"IssuesEvent","CreatedAt":"2019-03-14T02:20:57","Actor":"davidortinau","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/1694","RelatedDescription":"Closed issue \"[Enhancement] ProgressBar: Height\" (#1694) at xamarin/Xamarin.Forms","RelatedBody":"## Rationale\r\n\r\nCurrently there is no way to increase the height of the progress bar without using a custom effect/renderer\r\n\r\n## Implementation\r\n\r\nFor backwards compatibility add a property to the ProgressBar to enable height scaling\r\n\r\n```csharp\r\n\r\npublic enum ProgressBarLayoutOption\r\n{\r\nDefault // how it currently works\r\nFitToConstraints\r\n}\r\n\r\npublic ProgressBarLayoutOption LayoutOption //BP\r\n\r\n```\r\n\r\n\r\n\r\n### iOS\r\nA number of ways to increase the height are mentioned here\r\nhttps://stackoverflow.com/questions/3437564/how-to-increase-height-of-uiprogressview\r\n\r\nMost seem partial to\r\n```\r\nCGAffineTransform transform = CGAffineTransformMakeScale(1.0f, 3.0f);  \r\nprogressView.transform = transform;\r\n```\r\n\r\n### Android\r\n```\r\n<style name=\"CustomProgressBarHorizontal\" parent=\"android:Widget.ProgressBar.Horizontal\">\r\n      <item name=\"android:progressDrawable\">@drawable/custom_progress_bar_horizontal</item>\r\n      <item name=\"android:minHeight\">10dip</item>\r\n      <item name=\"android:maxHeight\">20dip</item>\r\n</style>\r\n```\r\n\r\n### UWP\r\nhttps://github.com/bartlannoeye-com/2016-10-ProgressBarTemplateSettings\r\n\r\n\r\n## Expected Result\r\n\r\n### Android\r\nIf ProgressBarLayoutOption is set to FitToConstraints then the progressbar should size itself vertically like any other control would with the same settings\r\n\r\n### iOS\r\nSee Android\r\n\r\n### UWP\r\nSee Android\r\n\r\n## Implications for CSS\r\n\r\n```css\r\nprogressbar {height:100; }\r\n```\r\n\r\n## Backward Compatibility\r\nThird party renderers may need to be updated to ensure that this functionality is supported through the new official mechanism. Further we will need to be careful to code the changes to the renderers in a careful manner to ensure that if someone is already using an effect support this feature that the effect is as best as possible not broken by our changes.  The current default height used should be maintained. The height of the progressbar should only change when this behavior is triggered\r\n\r\n## Difficulty : Medium\r\n"},{"Id":"9239150802","Type":"IssuesEvent","CreatedAt":"2019-03-14T00:06:33","Actor":"davidortinau","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/5544","RelatedDescription":"Opened issue \"[Material, iOS] Frame on iOS isn't respecting the corner radius\" (#5544) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\n\r\n```<Frame Margin=\"20\" \r\n               HeightRequest=\"200\"\r\n               Padding=\"0\"\r\n               CornerRadius=\"0\"\r\n               >\r\n```\r\n\r\nResults in sharp corners with a default Frame, but with a rounded corner using Material on iOS. Android appears consistent.\r\n\r\n### Expected Behavior\r\n\r\nRadius works throughout.\r\n\r\n### Actual Behavior\r\n\r\nMaterial renderer isn't getting it done.\r\n\r\n### Basic Information\r\n\r\n- Version with issue: 3.6.0\r\n\r\n### Screenshots\r\n\r\n<img width=\"527\" alt=\"Screenshot 2019-03-13 19 02 22\" src=\"https://user-images.githubusercontent.com/41873/54322399-0701ab80-45c3-11e9-948d-79efad5b245a.png\">\r\n<img width=\"478\" alt=\"Screenshot 2019-03-13 19 00 26\" src=\"https://user-images.githubusercontent.com/41873/54322400-0701ab80-45c3-11e9-9b8e-e0b4db8f5a14.png\">\r\n\r\n\r\n### Reproduction Link\r\n\r\n[Archive.zip](https://github.com/xamarin/Xamarin.Forms/files/2964118/Archive.zip)\r\n\r\n"},{"Id":"9239075824","Type":"IssuesEvent","CreatedAt":"2019-03-13T23:46:39","Actor":"davidortinau","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/5543","RelatedDescription":"Opened issue \"Font glyphs don't consistently work\" (#5543) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\n\r\nI have Labels and ImageButtons using Font icons. They appear and then don't. See video.\r\n\r\nhttps://www.screencast.com/t/m0zxJeFw4e0M\r\n\r\n### Expected Behavior\r\n\r\nFont renders consistently.\r\n\r\n### Actual Behavior\r\n\r\nIt's hit or miss.\r\n\r\n### Basic Information\r\n\r\n- Version with issue: 3.6\r\n  - Android: 9.0\r\n  \r\n### Screenshots\r\n\r\nYou can see Previewer rendering one of the icons:\r\n\r\nhttps://www.screencast.com/t/m0zxJeFw4e0M\r\n![image](https://user-images.githubusercontent.com/41873/54321730-4aa6e600-45c0-11e9-9d31-55131ba59ca4.png)\r\n\r\n\r\n### Reproduction Link\r\n\r\nhttps://github.com/davidortinau/VisualChallenge/blob/davidortinau/msnews/VisualChallenge/VisualChallenge/Views/InterestTile.xaml\r\n"},{"Id":"9239043491","Type":"IssuesEvent","CreatedAt":"2019-03-13T23:38:17","Actor":"Clancey","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/5542","RelatedDescription":"Opened issue \"iOS ListView based navigation can crash by updating disposed cells\" (#5542) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\nBinding contexts update stale iOS Views. This causes a crash.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Use the sample app provided, navigate around and it will crash.\r\n\r\n### Expected Behavior\r\n\r\n### Actual Behavior\r\n\r\n### Basic Information\r\n\r\nStack Trace\r\n```\r\nSystem.ObjectDisposedException: Cannot access a disposed object.\r\nObject name: 'CellTableViewCell'.\r\n  at Foundation.NSObject.get_SuperHandle () [0x00012] in /Library/Frameworks/Xamarin.iOS.framework/Versions/12.6.0.25/src/Xamarin.iOS/Foundation/NSObject2.cs:449 \r\n  at UIKit.UITableViewCell.get_TextLabel () [0x0002a] in /Library/Frameworks/Xamarin.iOS.framework/Versions/12.6.0.25/src/Xamarin.iOS/UIKit/UITableViewCell.g.cs:980 \r\n  at Xamarin.Forms.Platform.iOS.TextCellRenderer.HandleCellPropertyChanged (System.Object sender, System.ComponentModel.PropertyChangedEventArgs args) [0x0002a] in <0648e2dffe9e4201b8c6e274ced6579f>:0 \r\n  at Xamarin.Forms.Platform.iOS.CellTableViewCell.HandlePropertyChanged (System.Object sender, System.ComponentModel.PropertyChangedEventArgs e) [0x0000a] in <0648e2dffe9e4201b8c6e274ced6579f>:0 \r\n  at Xamarin.Forms.BindableObject.OnPropertyChanged (System.String propertyName) [0x00000] in D:\\a\\1\\s\\Xamarin.Forms.Core\\BindableObject.cs:173 \r\n  at Xamarin.Forms.Element.OnPropertyChanged (System.String propertyName) [0x00000] in D:\\a\\1\\s\\Xamarin.Forms.Core\\Element.cs:339 \r\n  at Xamarin.Forms.BindableObject.SetValueActual (Xamarin.Forms.BindableProperty property, Xamarin.Forms.BindableObject+BindablePropertyContext context, System.Object value, System.Boolean currentlyApplying, Xamarin.Forms.Internals.SetValueFlags attributes, System.Boolean silent) [0x00114] in D:\\a\\1\\s\\Xamarin.Forms.Core\\BindableObject.cs:622 \r\n  at Xamarin.Forms.BindableObject.SetValueCore (Xamarin.Forms.BindableProperty property, System.Object value, Xamarin.Forms.Internals.SetValueFlags attributes, Xamarin.Forms.BindableObject+SetValuePrivateFlags privateAttributes) [0x00179] in D:\\a\\1\\s\\Xamarin.Forms.Core\\BindableObject.cs:422 \r\n  at Xamarin.Forms.BindingExpression.ApplyCore (System.Object sourceObject, Xamarin.Forms.BindableObject target, Xamarin.Forms.BindableProperty property, System.Boolean fromTarget) [0x00220] in D:\\a\\1\\s\\Xamarin.Forms.Core\\BindingExpression.cs:167 \r\n  at Xamarin.Forms.BindingExpression.Apply (System.Object sourceObject, Xamarin.Forms.BindableObject target, Xamarin.Forms.BindableProperty property) [0x0006b] in D:\\a\\1\\s\\Xamarin.Forms.Core\\BindingExpression.cs:78 \r\n  at Xamarin.Forms.Binding.Apply (System.Object context, Xamarin.Forms.BindableObject bindObj, Xamarin.Forms.BindableProperty targetProperty, System.Boolean fromBindingContextChanged) [0x00057] in D:\\a\\1\\s\\Xamarin.Forms.Core\\Binding.cs:131 \r\n  at Xamarin.Forms.BindableObject.ApplyBindings (System.Boolean skipBindingContext, System.Boolean fromBindingContextChanged) [0x00041] in D:\\a\\1\\s\\Xamarin.Forms.Core\\BindableObject.cs:453 \r\n  at Xamarin.Forms.BindableObject.BindingContextPropertyChanged (Xamarin.Forms.BindableObject bindable, System.Object oldvalue, System.Object newvalue) [0x00007] in D:\\a\\1\\s\\Xamarin.Forms.Core\\BindableObject.cs:472 \r\n  at Xamarin.Forms.BindableObject.SetValueActual (Xamarin.Forms.BindableProperty property, Xamarin.Forms.BindableObject+BindablePropertyContext context, System.Object value, System.Boolean currentlyApplying, Xamarin.Forms.Internals.SetValueFlags attributes, System.Boolean silent) [0x00120] in D:\\a\\1\\s\\Xamarin.Forms.Core\\BindableObject.cs:624 \r\n  at Xamarin.Forms.BindableObject.SetValueCore (Xamarin.Forms.BindableProperty property, System.Object value, Xamarin.Forms.Internals.SetValueFlags attributes, Xamarin.Forms.BindableObject+SetValuePrivateFlags privateAttributes) [0x00179] in D:\\a\\1\\s\\Xamarin.Forms.Core\\BindableObject.cs:422 \r\n  at Xamarin.Forms.BindableObject.SetValue (Xamarin.Forms.BindableProperty property, System.Object value, System.Boolean fromStyle, System.Boolean checkAccess) [0x0003d] in D:\\a\\1\\s\\Xamarin.Forms.Core\\BindableObject.cs:572 \r\n  at Xamarin.Forms.BindableObject.SetValue (Xamarin.Forms.BindableProperty property, System.Object value) [0x00000] in D:\\a\\1\\s\\Xamarin.Forms.Core\\BindableObject.cs:122 \r\n  at Xamarin.Forms.BindableObject.set_BindingContext (System.Object value) [0x00000] in D:\\a\\1\\s\\Xamarin.Forms.Core\\BindableObject.cs:26 \r\n  at Xamarin.Forms.Internals.TemplatedItemsList`2[TView,TItem].UnhookItem (TItem item) [0x000a5] in D:\\a\\1\\s\\Xamarin.Forms.Core\\TemplatedItemsList.cs:1207 \r\n  at System.Runtime.CompilerServices.AsyncMethodBuilderCore+<>c.<ThrowAsync>b__6_0 (System.Object state) [0x00000] in /Library/Frameworks/Xamarin.iOS.framework/Versions/12.6.0.25/src/Xamarin.iOS/mcs/class/referencesource/mscorlib/system/runtime/compilerservices/AsyncMethodBuilder.cs:1023 \r\n  at Foundation.NSAsyncSynchronizationContextDispatcher.Apply () [0x00000] in /Library/Frameworks/Xamarin.iOS.framework/Versions/12.6.0.25/src/Xamarin.iOS/Foundation/NSAction.cs:178 \r\n--- End of stack trace from previous location where exception was thrown ---\r\n\r\n  at (wrapper managed-to-native) UIKit.UIApplication.UIApplicationMain(int,string[],intptr,intptr)\r\n  at UIKit.UIApplication.Main (System.String[] args, System.IntPtr principal, System.IntPtr delegate) [0x00005] in /Library/Frameworks/Xamarin.iOS.framework/Versions/12.6.0.25/src/Xamarin.iOS/UIKit/UIApplication.cs:79 \r\n  at UIKit.UIApplication.Main (System.String[] args, System.String principalClassName, System.String delegateClassName) [0x0002c] in /Library/Frameworks/Xamarin.iOS.framework/Versions/12.6.0.25/src/Xamarin.iOS/UIKit/UIApplication.cs:63 \r\n  at gMusic.iOS.Application.Main (System.String[] args) [0x00001] in /Users/clancey/Projects/LiveStream/gMusic/gMusic.iOS/Main.cs:17\r\n2019-03-13 15:34:48.689852-0800 gMusic.iOS[25077:820323] Unhandled managed exception:\r\nCannot access a disposed object.\r\nObject name: 'CellTableViewCell'. (System.ObjectDisposedException)\r\n  at Foundation.NSObject.get_SuperHandle () [0x00012] in /Library/Frameworks/Xamarin.iOS.framework/Versions/12.6.0.25/src/Xamarin.iOS/Foundation/NSObject2.cs:449 \r\n  at UIKit.UITableViewCell.get_TextLabel () [0x0002a] in /Library/Frameworks/Xamarin.iOS.framework/Versions/12.6.0.25/src/Xamarin.iOS/UIKit/UITableViewCell.g.cs:980 \r\n  at Xamarin.Forms.Platform.iOS.TextCellRenderer.HandleCellPropertyChanged (System.Object sender, System.ComponentModel.PropertyChangedEventArgs args) [0x0002a] in <0648e2dffe9e4201b8c6e274ced6579f>:0 \r\n  at Xamarin.Forms.Platform.iOS.CellTableViewCell.HandlePropertyChanged (System.Object sender, System.ComponentModel.PropertyChangedEventArgs e) [0x0000a] in <0648e2dffe9e4201b8c6e274ced6579f>:0 \r\n  at Xamarin.Forms.BindableObject.OnPropertyChanged (System.String propertyName) [0x00000] in D:\\a\\1\\s\\Xamarin.Forms.Core\\BindableObject.cs:173 \r\n  at Xamarin.Forms.Element.OnPropertyChanged (System.String propertyName) [0x00000] in D:\\a\\1\\s\\Xamarin.Forms.Core\\Element.cs:339 \r\n  at Xamarin.Forms.BindableObject.SetValueActual (Xamarin.Forms.BindableProperty property, Xamarin.Forms.BindableObject+BindablePropertyContext context, System.Object value, System.Boolean currentlyApplying, Xamarin.Forms.Internals.SetValueFlags attributes, System.Boolean silent) [0x00114] in D:\\a\\1\\s\\Xamarin.Forms.Core\\BindableObject.cs:622 \r\n  at Xamarin.Forms.BindableObject.SetValueCore (Xamarin.Forms.BindableProperty property, System.Object value, Xamarin.Forms.Internals.SetValueFlags attributes, Xamarin.Forms.BindableObject+SetValuePrivateFlags privateAttributes) [0x00179] in D:\\a\\1\\s\\Xamarin.Forms.Core\\BindableObject.cs:422 \r\n  at Xamarin.Forms.BindingExpression.ApplyCore (System.Object sourceObject, Xamarin.Forms.BindableObject target, Xamarin.Forms.BindableProperty property, System.Boolean fromTarget) [0x00220] in D:\\a\\1\\s\\Xamarin.Forms.Core\\BindingExpression.cs:167 \r\n  at Xamarin.Forms.BindingExpression.Apply (System.Object sourceObject, Xamarin.Forms.BindableObject target, Xamarin.Forms.BindableProperty property) [0x0006b] in D:\\a\\1\\s\\Xamarin.Forms.Core\\BindingExpression.cs:78 \r\n  at Xamarin.Forms.Binding.Apply (System.Object context, Xamarin.Forms.BindableObject bindObj, Xamarin.Forms.BindableProperty targetProperty, System.Boolean fromBindingContextChanged) [0x00057] in D:\\a\\1\\s\\Xamarin.Forms.Core\\Binding.cs:131 \r\n  at Xamarin.Forms.BindableObject.ApplyBindings (System.Boolean skipBindingContext, System.Boolean fromBindingContextChanged) [0x00041] in D:\\a\\1\\s\\Xamarin.Forms.Core\\BindableObject.cs:453 \r\n  at Xamarin.Forms.BindableObject.BindingContextPropertyChanged (Xamarin.Forms.BindableObject bindable, System.Object oldvalue, System.Object newvalue) [0x00007] in D:\\a\\1\\s\\Xamarin.Forms.Core\\BindableObject.cs:472 \r\n  at Xamarin.Forms.BindableObject.SetValueActual (Xamarin.Forms.BindableProperty property, Xamarin.Forms.BindableObject+BindablePropertyContext context, System.Object value, System.Boolean currentlyApplying, Xamarin.Forms.Internals.SetValueFlags attributes, System.Boolean silent) [0x00120] in D:\\a\\1\\s\\Xamarin.Forms.Core\\BindableObject.cs:624 \r\n  at Xamarin.Forms.BindableObject.SetValueCore (Xamarin.Forms.BindableProperty property, System.Object value, Xamarin.Forms.Internals.SetValueFlags attributes, Xamarin.Forms.BindableObject+SetValuePrivateFlags privateAttributes) [0x00179] in D:\\a\\1\\s\\Xamarin.Forms.Core\\BindableObject.cs:422 \r\n  at Xamarin.Forms.BindableObject.SetValue (Xamarin.Forms.BindableProperty property, System.Object value, System.Boolean fromStyle, System.Boolean checkAccess) [0x0003d] in D:\\a\\1\\s\\Xamarin.Forms.Core\\BindableObject.cs:572 \r\n  at Xamarin.Forms.BindableObject.SetValue (Xamarin.Forms.BindableProperty property, System.Object value) [0x00000] in D:\\a\\1\\s\\Xamarin.Forms.Core\\BindableObject.cs:122 \r\n  at Xamarin.Forms.BindableObject.set_BindingContext (System.Object value) [0x00000] in D:\\a\\1\\s\\Xamarin.Forms.Core\\BindableObject.cs:26 \r\n  at Xamarin.Forms.Internals.TemplatedItemsList`2[TView,TItem].UnhookItem (TItem item) [0x000a5] in D:\\a\\1\\s\\Xamarin.Forms.Core\\TemplatedItemsList.cs:1207 \r\n  at System.Runtime.CompilerServices.AsyncMethodBuilderCore+<>c.<ThrowAsync>b__6_0 (System.Object state) [0x00000] in /Library/Frameworks/Xamarin.iOS.framework/Versions/12.6.0.25/src/Xamarin.iOS/mcs/class/referencesource/mscorlib/system/runtime/compilerservices/AsyncMethodBuilder.cs:1023 \r\n  at Foundation.NSAsyncSynchronizationContextDispatcher.Apply () [0x00000] in /Library/Frameworks/Xamarin.iOS.framework/Versions/12.6.0.25/src/Xamarin.iOS/Foundation/NSAction.cs:178 \r\n--- End of stack trace from previous location where exception was thrown ---\r\n\r\n  at (wrapper managed-to-native) UIKit.UIApplication.UIApplicationMain(int,string[],intptr,intptr)\r\n  at UIKit.UIApplication.Main (System.String[] args, System.IntPtr principal, System.IntPtr delegate) [0x00005] in /Library/Frameworks/Xamarin.iOS.framework/Versions/12.6.0.25/src/Xamarin.iOS/UIKit/UIApplication.cs:79 \r\n  at UIKit.UIApplication.Main (System.String[] args, System.String principalClassName, System.String delegateClassName) [0x0002c] in /Library/Frameworks/Xamarin.iOS.framework/Versions/12.6.0.25/src/Xamarin.iOS/UIKit/UIApplication.cs:63 \r\n  at gMusic.iOS.Application.Main (System.String[] args) [0x00001] in /Users/clancey/Projects/LiveStream/gMusic/gMusic.iOS/Main.cs:17\r\n```\r\n### Reproduction Link\r\n\r\nhttps://github.com/clancey/gmusic.forms\r\n"},{"Id":"9239026696","Type":"IssuesEvent","CreatedAt":"2019-03-13T23:33:56","Actor":"Clancey","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/5541","RelatedDescription":"Opened issue \"ListView Item Selected changing, always looks up the index\" (#5541) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\nWhen you click on a row item in a ListView, it will lookup the index from the item source. \r\nThe index is already known when the selection happens. Looking the index back up is a performance hit.\r\nStack Trace:\r\n```\r\n  at gMusic.ViewModels.GroupedList`1[T].IndexOf (System.Object value) [0x00000] in /Users/clancey/Projects/LiveStream/gMusic/gMusic/ViewModels/SimpleDatabaseSource.cs:145 \r\n  at Xamarin.Forms.ListProxy.IndexOf (System.Object item) [0x00008] in D:\\a\\1\\s\\Xamarin.Forms.Core\\ListProxy.cs:87 \r\n  at Xamarin.Forms.Internals.TemplatedItemsList`2[TView,TItem].GetGlobalIndexOfItem (System.Object item) [0x00008] in D:\\a\\1\\s\\Xamarin.Forms.Core\\TemplatedItemsList.cs:388 \r\n  at Xamarin.Forms.Internals.TemplatedItemsList`2[TView,TItem].GetGlobalIndexOfItem (System.Object item) [0x0003d] in D:\\a\\1\\s\\Xamarin.Forms.Core\\TemplatedItemsList.cs:397 \r\n  at Xamarin.Forms.ListView.OnSelectedItemChanged (Xamarin.Forms.BindableObject bindable, System.Object oldValue, System.Object newValue) [0x00000] in D:\\a\\1\\s\\Xamarin.Forms.Core\\ListView.cs:601 \r\n  at Xamarin.Forms.BindableObject.SetValueActual (Xamarin.Forms.BindableProperty property, Xamarin.Forms.BindableObject+BindablePropertyContext context, System.Object value, System.Boolean currentlyApplying, Xamarin.Forms.Internals.SetValueFlags attributes, System.Boolean silent) [0x00120] in D:\\a\\1\\s\\Xamarin.Forms.Core\\BindableObject.cs:624 \r\n  at Xamarin.Forms.BindableObject.SetValueCore (Xamarin.Forms.BindableProperty property, System.Object value, Xamarin.Forms.Internals.SetValueFlags attributes, Xamarin.Forms.BindableObject+SetValuePrivateFlags privateAttributes) [0x00179] in D:\\a\\1\\s\\Xamarin.Forms.Core\\BindableObject.cs:422 \r\n  at Xamarin.Forms.BindableObject.SetValueCore (Xamarin.Forms.BindableProperty property, System.Object value, Xamarin.Forms.Internals.SetValueFlags attributes) [0x00000] in D:\\a\\1\\s\\Xamarin.Forms.Core\\BindableObject.cs:367 \r\n  at Xamarin.Forms.ListView.NotifyRowTapped (System.Int32 groupIndex, System.Int32 inGroupIndex, Xamarin.Forms.Cell cell) [0x0004c] in D:\\a\\1\\s\\Xamarin.Forms.Core\\ListView.cs:441 \r\n```\r\n### Steps to Reproduce\r\n\r\n1. \r\n2. \r\n3. \r\n\r\n### Expected Behavior\r\nThe IndexOf would never be called.\r\n### Actual Behavior\r\nIndexOf is called on selection\r\n### Basic Information\r\n"},{"Id":"9238847798","Type":"IssuesEvent","CreatedAt":"2019-03-13T22:52:14","Actor":"PureWeen","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/5540","RelatedDescription":"Opened issue \"Letting the previewer do its buildless thing leaves cross platform embedded resources in a bad state \" (#5540) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\nI only see this on VS MAC\r\n\r\nIf the previewer is the first to process a XAML file it seems to not process the cross platform resources correctly which leads to the resource not getting packaged with the dll when the user actually runs the project\r\n\r\n### Steps to Reproduce\r\n\r\n1. Open the SLN\r\n2. open MainPage.xaml and let it finish processing MainPage.xaml (don't touch anything or modify the xaml at all)\r\n3. deploy the android or iOS project\r\n\r\nit will crash with the following exception\r\n```\r\nXamarin.Forms.Xaml.XamlParseException: No embeddedresource found for PreviewrBash.App\r\n  at Xamarin.Forms.Xaml.XamlLoader.Load (System.Object view, System.Type callingType) [0x00011] in D:\\a\\1\\s\\Xamarin.Forms.Xaml\\XamlLoader.cs:68\r\n  at Xamarin.Forms.Xaml.Extensions.LoadFromXaml[TXaml] (TXaml view, System.Type callingType) [0x00000] in D:\\a\\1\\s\\Xamarin.Forms.Xaml\\ViewExtensions.cs:36\r\n  at PreviewrBash.App.InitializeComponent () [0x00001] in /Users/shane/Downloads/PreviewrBash/PreviewrBash/PreviewrBash/obj/Debug/netstandard2.0/App.xaml.g.cs:21\r\n  at PreviewrBash.App..ctor () [0x00008] in /Users/shane/Downloads/PreviewrBash/PreviewrBash/PreviewrBash/App.xaml.cs:11\r\n  at PreviewrBash.Droid.MainActivity.OnCreate (Android.OS.Bundle savedInstanceState) [0x0002f] in /Users/shane/Downloads/PreviewrBash/PreviewrBash/PreviewrBash.Android/MainActivity.cs:24\r\n  at Android.App.Activity.n_OnCreate_Landroid_os_Bundle_ (System.IntPtr jnienv, System.IntPtr native__this, System.IntPtr native_savedInstanceState) [0x00011] in <53fc2ed8be3d47a7a35803aaf5ccf076>:0\r\n  at at (wrapper dynamic-method) Android.Runtime.DynamicMethodNameCounter.14(intptr,intptr,intptr)\r\n```\r\n\r\nat this point if you modify anything in the source code and then rerun the project you won't see the exception\r\n\r\n### Expected Behavior\r\nApplication shouldn't crash. It should find the embedded resource\r\n\r\n### Actual Behavior\r\ncrashes\r\n\r\n### Basic Information\r\n\r\n- Version with issue: VS MAC 2804 and XF 3.6\r\n\r\n\r\n### Reproduction Link\r\n\r\n[PreviewrBash.zip](https://github.com/xamarin/Xamarin.Forms/files/2963940/PreviewrBash.zip)\r\n\r\n[iOSDesigner.2019-03-13__14-54-33.log](https://github.com/xamarin/Xamarin.Forms/files/2963964/iOSDesigner.2019-03-13__14-54-33.log)\r\n[AndroidDesigner.2019-03-13__14-54-33.log](https://github.com/xamarin/Xamarin.Forms/files/2963965/AndroidDesigner.2019-03-13__14-54-33.log)\r\n\r\n"},{"Id":"9238799880","Type":"IssuesEvent","CreatedAt":"2019-03-13T22:41:39","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/4933","RelatedDescription":"Closed issue \"Grid size incorrect when using with Image\" (#4933) at xamarin/Xamarin.Forms","RelatedBody":"## Grid size incorrect when using with Image\r\n\r\nWhen Grid.VerticalOption is not fill to parent, and Grid has an Image view, Grid.Height is incorrect. \r\n\r\nGrid should use scaled image size as row height, but it use original image height.\r\n\r\nfor example like this\r\n```\r\n<Grid HorizontalOptions=\"FillAndExpand\" VerticalOptions=\"Center\" BackgroundColor=\"Maroon\" RowSpacing=\"0\" \\>\r\n    <Grid.RowDefinitions>\r\n        <RowDefinition Height=\"Auto\" />\r\n        <RowDefinition Height=\"Auto\" />\r\n    </Grid.RowDefinitions>\r\n    <Image Source=\"logo.jpg\" Grid.Row=\"0\" />\r\n    <Label Grid.Row=\"1\" Text=\"test message\" BackgroundColor=\"Blue\" />\r\n</Grid\\>\r\n```\r\n* * *\r\nThere are reproduction steps and screenshots in Bugzilla. I am not the original author of the bug but would also like to see this fixed and don't see this bug in GitHub. I am on Xamarin.Forms 3.4.0 and it is still an issue.\r\n \r\nSubmitted by a community member on 2017-04-17 16:35 UTC on Bugzilla and has a Confirmed Status. \r\n\r\n_Reference: <https://bugzilla.xamarin.com/show_bug.cgi?id=55294>_"},{"Id":"9238799856","Type":"IssuesEvent","CreatedAt":"2019-03-13T22:41:39","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/5188","RelatedDescription":"Closed issue \"[UWP] Could not find Windows Runtime type 'Microsoft.Graphics.Canvas.UI.Xaml.CanvasImageSource'.\" (#5188) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\nApplication is crashing on UWP with following exception when updated to latest Xamarin Forms \r\nCould not find Windows Runtime type 'Microsoft.Graphics.Canvas.UI.Xaml.CanvasImageSource'\r\nNot reproducible on Android\r\n\r\n### Steps to Reproduce\r\n\r\nRun my application with updated Xamarin Forms, yeah i know that not good steps to reproduce but don't know how to create reproducible sample.\r\n\r\n### Basic Information\r\n\r\n- Version with issue: 4.0.1.102444\r\n- Last known good version: XF 3.4\r\n- IDE: VS 2015\r\n- Platform Target Frameworks:\r\n  - Android: 8.1\r\n  - UWP:  6.2.2\r\n- Android Support Library Version:\r\n- Nuget Packages:\r\n- Affected Devices: Windows 10 Laptop\r\n\r\n### Screenshots\r\n\r\n<!-- If the issue is a visual issue, please include screenshots showing the problem if possible -->\r\n![image](https://user-images.githubusercontent.com/3065454/52525255-2006fc00-2ca7-11e9-8f53-feb919cb4d81.png)\r\n\r\n### Reproduction Link\r\n\r\nI was not able to reproduce it."},{"Id":"9238799840","Type":"PullRequestEvent","CreatedAt":"2019-03-13T22:41:39","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/5484","RelatedDescription":"Closed pull request \"Adds a test scenario for another Previewer Markup Extension issue\" (#5484) at xamarin/Xamarin.Forms","RelatedBody":"See #5473\r\n"},{"Id":"9238554482","Type":"PullRequestEvent","CreatedAt":"2019-03-13T21:51:39","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/5539","RelatedDescription":"Merged pull request \"[Housekeeping] Be more polite\" (#5539) at xamarin/Xamarin.Forms","RelatedBody":""},{"Id":"9238545310","Type":"PullRequestEvent","CreatedAt":"2019-03-13T21:49:56","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/5539","RelatedDescription":"Opened pull request \"[Housekeeping] Be more polite\" (#5539) at xamarin/Xamarin.Forms","RelatedBody":""}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"9237460428","Type":"PullRequestEvent","CreatedAt":"2019-03-13T18:56:13","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5766","RelatedDescription":"Opened pull request \"[mtouch] Make the SealerSubStep a configurable optimization\" (#5766) at xamarin/xamarin-macios","RelatedBody":"document it and adjust the optimization tests.\n\nThis allows the optimization to be:\n* disabled (if ever needed) on fully AOT'ed applications\n* re-enabled for the interpreter (at your own risk)"},{"Id":"9237170456","Type":"PullRequestEvent","CreatedAt":"2019-03-13T18:13:35","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5765","RelatedDescription":"Opened pull request \"[mtouch] Consider deployment and simulator availability versions for frameworks. Fixes #5753\" (#5765) at xamarin/xamarin-macios","RelatedBody":"E.g. `MetalPerformanceShaders` is unusable in 10.3.1 on the simulator so\ntrying to build with the static registrar cause simlauncher to be rebuilt\nwith a **strong** (and not _weak_) reference to the framework. This cause\na crash then the application start\n\n```\nDyld Error Message:\n  Library not loaded: /System/Library/Frameworks/MetalPerformanceShaders.framework/MetalPerformanceShaders\n  Referenced from: /Users/USER/Library/Developer/CoreSimulator/Devices/95679F95-CCE7-4733-8376-35E91E97039C/data/Containers/Bundle/Application/0F665B2D-ADAC-4CA0-BD04-33E968B3F268/FailerApp.app/FailerApp\n  Reason: no suitable image found.  Did find:\n\t/System/Library/Frameworks/MetalPerformanceShaders.framework/MetalPerformanceShaders: mach-o, but not built for iOS simulator\n```\n\nref: https://github.com/xamarin/xamarin-macios/issues/5753"},{"Id":"9237081371","Type":"PullRequestEvent","CreatedAt":"2019-03-13T18:00:50","Actor":"mandel-macaque","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5763","RelatedDescription":"Merged pull request \"[XHarness] Add an extra configuration option for the tests matrix to match those in QA. (Thumb)\" (#5763) at xamarin/xamarin-macios","RelatedBody":""}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1105942645308678144","CreatedAt":"2019-03-13T21:24:08+00:00","UserScreenname":"xamarinhq","Text":"There have been some drastic changes across key libraries for Google Play Services &amp; Android Support. Let's get a q… https://t.co/heywxPz0Qs","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":23,"FavoriteCount":16,"RawContent":null},{"Id":"1105573743986917377","CreatedAt":"2019-03-12T20:58:15+00:00","UserScreenname":"xamarinhq","Text":"#MFractor is a powerful #VS4Mac extension to streamline Xamarin app dev so you can save significant time &amp; effort o… https://t.co/pEwcgwzd3t","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":42,"FavoriteCount":21,"RawContent":null},{"Id":"1105491570583851008","CreatedAt":"2019-03-12T15:31:44+00:00","UserScreenname":"xamarinhq","Text":".@codemillmatt &amp; @JamesMontemagno talk about a ton of newness out there for all mobile devs including a hot new… https://t.co/05m3VTmUBe","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":62,"FavoriteCount":22,"RawContent":null},{"Id":"1103762250509283332","CreatedAt":"2019-03-07T21:00:02+00:00","UserScreenname":"xamarinhq","Text":"Introducing Material Design; a suite of cross-platform components in the #Xamarin.Forms 3.6 Visual feature that boo… https://t.co/gin9lpb0eQ","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":146,"FavoriteCount":68,"RawContent":null},{"Id":"1103750171215699968","CreatedAt":"2019-03-07T20:12:02+00:00","UserScreenname":"xamarinhq","Text":"Level up your mobile development skills at #MSBuild, May 6-8, 2019 in Seattle. Registration is now open!… https://t.co/EZNWhIn3p6","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":39,"FavoriteCount":8,"RawContent":null},{"Id":"1103709031066189825","CreatedAt":"2019-03-07T17:28:33+00:00","UserScreenname":"xamarinhq","Text":"Happening right now! Join the Mobile #dotNET Teams for our community stand-up covering great community contribution… https://t.co/9HUp86ZqBU","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":30,"FavoriteCount":15,"RawContent":null},{"Id":"1103701857682231296","CreatedAt":"2019-03-07T17:00:03+00:00","UserScreenname":"xamarinhq","Text":"On this week's Essential API of the week we take a look at Accelerometer, which enables you monitor the device's ac… https://t.co/UxhHHar5zN","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":56,"FavoriteCount":17,"RawContent":null},{"Id":"1103399934966067200","CreatedAt":"2019-03-06T21:00:19+00:00","UserScreenname":"xamarinhq","Text":"Announcing Xamarin.Forms 3.6:\n- we've made enhancements, cleaned up some bugs, AND, we've moved our Visual feature… https://t.co/fG4RqX25PH","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":260,"FavoriteCount":128,"RawContent":null},{"Id":"1102666586194931713","CreatedAt":"2019-03-04T20:26:15+00:00","UserScreenname":"xamarinhq","Text":"Sweeky Satpathy (from the Mobile Customer Advisory Team) shares some best practices &amp; tips/tricks the team uses to… https://t.co/GSrw6zLTHZ","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":60,"FavoriteCount":19,"RawContent":null},{"Id":"1101572485114462220","CreatedAt":"2019-03-01T19:58:41+00:00","UserScreenname":"xamarinhq","Text":"Developer Community User Groups are gathering to learn about new, exciting releases and tooling to help jumpstart t… https://t.co/GgCWj5LttS","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":48,"FavoriteCount":21,"RawContent":null},{"Id":"1101202237752258564","CreatedAt":"2019-02-28T19:27:27+00:00","UserScreenname":"xamarinhq","Text":"Want to display PDF docs w/i your #Xamarin apps? Now you can. Learn to view PDF files within your Xamarin.Forms app… https://t.co/GjuKzrvNYM","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":98,"FavoriteCount":30,"RawContent":null},{"Id":"1100455963361005570","CreatedAt":"2019-02-26T18:02:01+00:00","UserScreenname":"xamarinhq","Text":"In this episode of the #dotNETCore podcast, @jimbobbennett talks #Xamarin &amp; .NET Standard. Listen in or read the tr… https://t.co/VDFrb1excV","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":39,"FavoriteCount":14,"RawContent":null},{"Id":"1100149148282769409","CreatedAt":"2019-02-25T21:42:51+00:00","UserScreenname":"xamarinhq","Text":"Android emulators have their own networking config but now you can debug #Android apps locally regardless of whethe… https://t.co/Hbsm6gbXft","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":72,"FavoriteCount":31,"RawContent":null},{"Id":"1098996242238111745","CreatedAt":"2019-02-22T17:21:37+00:00","UserScreenname":"xamarinhq","Text":"This week on the #XamarinShow, @DavidOrtinau gives us all the reasons and features to &lt;3 in Xamarin.Forms 3.5. This… https://t.co/pVcHVX6LYJ","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":56,"FavoriteCount":27,"RawContent":null},{"Id":"1097993381496700935","CreatedAt":"2019-02-19T22:56:36+00:00","UserScreenname":"xamarinhq","Text":"With only a few lines of code, today's #Xamarin.Essentials API of the week helps you persist settings and preferenc… https://t.co/izkl5pGL6m","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":50,"FavoriteCount":21,"RawContent":null},{"Id":"1097939132532310018","CreatedAt":"2019-02-19T19:21:02+00:00","UserScreenname":"xamarinhq","Text":"On this week's #XamarinShow Essential API of the week, we take a look at Secure Storage, which enables you to easil… https://t.co/OwQSZ1QRlI","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":46,"FavoriteCount":26,"RawContent":null},{"Id":"1097603017375993857","CreatedAt":"2019-02-18T21:05:26+00:00","UserScreenname":"xamarinhq","Text":"Xamarin.Forms 101: Command Parameters: https://t.co/rwzzq9yQib\n\n.@JamesMontemagno takes us through a new mini-serie… https://t.co/ZFInvKFhSL","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":109,"FavoriteCount":48,"RawContent":null},{"Id":"1096561048562384898","CreatedAt":"2019-02-16T00:05:01+00:00","UserScreenname":"xamarinhq","Text":"The #Xamarin Developer Blog is migrating to a new platform with a modern, clean design and powerful features that m… https://t.co/nJUxXItfe8","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":98,"FavoriteCount":35,"RawContent":null},{"Id":"1095804816121581570","CreatedAt":"2019-02-13T22:00:01+00:00","UserScreenname":"xamarinhq","Text":"The #VisualStudio Mobile Dev Podcast is out. In this episode, @CodeMillMatt &amp; @JamesMontemagno discuss the latest &amp;… https://t.co/SPEvfxFuLn","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":54,"FavoriteCount":14,"RawContent":null},{"Id":"1095445655076700162","CreatedAt":"2019-02-12T22:12:51+00:00","UserScreenname":"xamarinhq","Text":"To provide the best user experience we need access to the current network state of our users’ devices.\n\n...new from… https://t.co/w2ZGMgKqli","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":42,"FavoriteCount":25,"RawContent":null}]}},"RunOn":"2019-03-14T05:30:55.2501134Z","RunDurationInMilliseconds":3119}