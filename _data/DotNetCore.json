{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing Entity Framework Core 3.0 Preview 7 and Entity Framework 6.3 Preview 7","PublishedOn":"2019-07-23T17:06:53+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"Today, we are making new previews of EF Core 3.0 and EF 6.3 available on nuget.org.\n.NET Core 3.0 Preview 7 and ASP.NET Core 3.0 Preview 7 were also made available today.\nWe encourage you to install...","Href":"https://devblogs.microsoft.com/dotnet/announcing-entity-framework-core-3-0-preview-7-and-entity-framework-6-3-preview-7/","RawContent":null},{"Title":"Announcing .NET Core 3.0 Preview 7","PublishedOn":"2019-07-23T17:00:54+00:00","CommentsCount":31,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 3.0 Preview 7. We&#8217;ve transitioned from creating new features to polishing the release. Expect a singular focus on quality for the remaining preview...","Href":"https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0-preview-7/","RawContent":null},{"Title":"Announcing ML.NET 1.2 and Model Builder updates (Machine Learning for .NET)","PublishedOn":"2019-07-17T19:25:46+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"We are excited to announce ML.NET 1.2 and updates to Model Builder and the CLI. ML.NET is an open-source and cross-platform machine learning framework for .NET developers. ML.NET also includes Model...","Href":"https://devblogs.microsoft.com/dotnet/announcing-ml-net-1-2-and-model-builder-updates-machine-learning-for-net/","RawContent":null},{"Title":"Write Better Code Faster with Roslyn Analyzers","PublishedOn":"2019-07-10T16:40:11+00:00","CommentsCount":12,"FacebookCount":0,"Summary":"Roslyn, the .NET compiler platform, helps you catch bugs even before you run your code. One example is Roslyn’s spellcheck analyzer that is built into Visual Studio. Let’s say you are creating a...","Href":"https://devblogs.microsoft.com/dotnet/write-better-code-faster-with-roslyn-analyzers/","RawContent":null},{"Title":".NET Core July 2019 Updates – 2.1.12 and 2.2.6","PublishedOn":"2019-07-09T17:50:51+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core July 2019 Update. These updates contain security and reliability fixes. See the individual release notes for details on updated packages.\nNOTE: If you are a...","Href":"https://devblogs.microsoft.com/dotnet/net-core-july-2019/","RawContent":null},{"Title":".NET Framework July 2019 Security and Quality Rollup","PublishedOn":"2019-07-09T17:22:13+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are releasing the July 2019 Cumulative Update, Security and Quality Rollup, and Security Only Update for .NET Framework.\nSecurity\nCVE-2019-1006 – WCF/WIF SAML Token Authentication Bypass...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-july-2019-security-and-quality-rollup/","RawContent":null},{"Title":".NET Framework June 27, 2019 Cumulative Update for Windows 10 version 1903","PublishedOn":"2019-06-27T18:01:46+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Today, we released the June 2019 Cumulative Update for .NET Framework 3.5 and 4.8 on Windows 10 version 1903.\nQuality and Reliability\nThis release contains the following quality and reliability...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-june-27-2019-cumulative-update-for-windows-10-version-1903/","RawContent":null},{"Title":"Help us shape the future of .NET for Apache Spark","PublishedOn":"2019-06-20T17:58:41+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"Apache Spark™ is a general-purpose distributed processing engine for analytics over large data set typically terabytes or petabytes of data. Apache Spark can be used for processing batches of data,...","Href":"https://devblogs.microsoft.com/dotnet/help-us-shape-the-future-of-net-for-apache-spark/","RawContent":null},{"Title":"Create interactive documentation with the new Try .NET template","PublishedOn":"2019-06-20T16:05:37+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"In our previous post, we announced dotnet try a global tool which allows developers to create interactive workshops and documentation. Tutorials created with dotnet try let users start learning...","Href":"https://devblogs.microsoft.com/dotnet/create-interactive-documentation-with-the-new-try-net-template/","RawContent":null},{"Title":".NET Framework June 2019 Preview of Quality Rollup","PublishedOn":"2019-06-19T00:12:52+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"Today, we are releasing the June 2019 Preview of Quality Rollup.\nQuality and Reliability\nThis release contains the following quality and reliability improvements.\nWPF1\nAddresses an issue in which...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-june-2019-preview-of-quality-rollup/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"9814702366","Type":"PullRequestEvent","CreatedAt":"2019-06-13T10:49:31","Actor":"gep13","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/147","RelatedDescription":"Opened pull request \"(GH-111) Update SourceLink location\" (#147) at dotnet/foundation","RelatedBody":""},{"Id":"9812903344","Type":"PullRequestEvent","CreatedAt":"2019-06-13T06:28:59","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/146","RelatedDescription":"Merged pull request \"Update Cake Project Contacts\" (#146) at dotnet/foundation","RelatedBody":"@jongalloway just noticed that this wasn't up to date."},{"Id":"9812878014","Type":"PullRequestEvent","CreatedAt":"2019-06-13T06:23:52","Actor":"gep13","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/146","RelatedDescription":"Opened pull request \"Update Cake Project Contacts\" (#146) at dotnet/foundation","RelatedBody":"@jongalloway just noticed that this wasn't up to date."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"10047192673","Type":"IssuesEvent","CreatedAt":"2019-07-19T16:54:03","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/118","RelatedDescription":"Opened issue \".NET Core master branches have switched to \"5.0\"\" (#118) at dotnet/announcements","RelatedBody":"# .NET Core master branches have switched to \"5.0\"\r\n\r\nVarious .NET Core repos have switched their `master` branches to \"5.0\", and will use 3.x branches for 3.0 and 3.1 projects. This is very similar to how we approached 2.x and 3.0 projects. As context, `master` branches produced 3.0 builds for the entire period of the 2.2 project.\r\n\r\nAt present, this change is only relevant if you contribute to .NET Core repositories. Otherwise, we recommend that you wait for the 5.0 Preview releases before installing this new version.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/core #3059](https://github.com/dotnet/core/issues/3059)\r\n\r\n## Details\r\n\r\nThe following repos have moved their master branches to \"5.0\":\r\n\r\n- [dotnet/coreclr](https://github.com/dotnet/coreclr)\r\n- [dotnet/corefx](https://github.com/dotnet/corefx)\r\n- [dotnet/core-setup](https://github.com/dotnet/core-setup)\r\n\r\nYou can see that [5.0 .NET Core Runtime builds](https://github.com/dotnet/core-setup#daily-builds) are now being built and published at dotnet/core-setup.\r\n\r\nIn large part, we switched `master` to 5.0 to enable to the community to contribute changes. As the .NET Core 3.0 released has progressed, we've had to increase scrutiny on the changes we will accept. Now that we've permanently branched for 3.0, we can accept a much broader set of changes. Please consider that to be an open invitation!\r\n\r\nNotably, [dotnet/core-sdk](https://github.com/dotnet/core-sdk) is not yet producing 5.0 builds. We expect that the dotnet/core-sdk master branch will continue as a 3.0 branch for 2-3 months while we finish up the .NET Core 3.0 project.\r\n\r\nAt present, there is no developer experience for 5.0. We are waiting on the dotnet/core-sdk repo to switch to 5.0. Switching your project file to target `netcoreapp5.0` won't do anything useful. We'll update this issue when a 5.0 SDK comes available."},{"Id":"9971220766","Type":"IssuesEvent","CreatedAt":"2019-07-08T23:25:31","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/117","RelatedDescription":"Opened issue \"System.Text.Json usability study results\" (#117) at dotnet/announcements","RelatedBody":"We've performed a usability study on the new `System.Text.Json` APIs which will replace JSON.NET as the default JSON experience in .NET Core 3.0:\r\n\r\n* We focused on the primary \"getting started\" scenarios to validate that we picked the right type- and method names.\r\n* We simulated what we believe to be common error cases to validate that our exception messages are understandable and actionable.\r\n* Since we were short on time, we couldn't use the recruiting provided by the UX lab but instead brought in our own developers, which we recruited from the .NET engineering team\r\n\r\nThis has worked out well for us as we were able to get short term feedback which resulted in significant improvements to the overall API shape and usability. In the future, we should do more API focused UX studies 😊\r\n\r\n## Tasks\r\n\r\n| # | Description                            | Code\r\n|:--|:---------------------------------------|:-----\r\n| 1 | Serialize and pretty print             | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario1/Program.cs#L19-L31)\r\n| 2 | Deserialize with trailing comma        | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario2/Program.cs#L19-L25)\r\n| 3 | Deserialize with custom property names | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario3/Program.cs#L30-L45)\r\n| 4 | Read with DOM                          | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario4/Program.cs#L20-L35)\r\n| 5 | Pretty print an existing JSON file     | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario5/Program.cs#L26-L34)\r\n\r\n## Hypotheses\r\n\r\nWe expect developers to...\r\n\r\n| # | Description                                            | Result\r\n|:--|:-------------------------------------------------------|:---------------\r\n| 1 | ...assume the APIs are similar/identical to JSON.NET   |  Validated\r\n| 2 | ...complete tasks 1-4 successfully                     |  Validated\r\n| 3 | ...struggle/unable to complete the task 5, because it requires working with two different components which is very different from JSON.NET |  Invalidated\r\n| 4 | ...not look at documentation for most of their coding as IntelliSense is good enough |  Invalidated\r\n| 5 | ...be happy with the experience of using the API                                     |  Validated\r\n| 6 | ...plan on using `System.Text.Json` for their next JSON task                         |  Partially Validated\r\n\r\n##  Key Observations\r\n\r\n* Everyone completed scenarios #1-#3, 2 didn't complete #4, 6 didn't complete #5\r\n    - The reason was always \"out of time\". Every person who started a scenario successfully finished it.\r\n    - We feel this validates that we picked the right scope for a 60 minute study of people from various backgrounds\r\n* Overall people liked the new API\r\n    - Key value prop for most people was the fact that \"it's now built in\"\r\n    - Very few mentioned perf and the ones that did thought that it probably wouldn't make a difference in their scenarios.\r\n    - Most people said they would prefer `System.Text.Json` for new APIs, but would stick to JSON.NET in code that already uses it.\r\n    - **[Action]** None, this is in line with what we expected.\r\n* Virtually everyone tried to google for sample code in the documentation\r\n    - Everyone found our blog post and online documentation\r\n    - People new to .NET were confused that JSON.NET and `System.Text.Json` weren't the same thing\r\n    - Everyone complained that the current docs are lacking, especially sample code.\r\n    - **[Action]** Docs are work in progress. We plan on shipping with a fully documented API surface and sample code.\r\n* Virtually everyone found the key type relatively quickly\r\n    - Some people were confused when types were static, rather than something that one can new up\r\n    - **[Action]** None. This is by-design as we try to reduce the number of allocations.\r\n* Virtually everyone had trouble selecting the correct method on\r\n  `JsonSerializer`\r\n    - We chose a very complicated naming convention\r\n    - **[Action]** We simplified it by using names that people in the study told us were looking for.\r\n* Most of our error messages were well received because they told people what\r\n  the problem is & how they can fix them.\r\n    - One error message was unclear because we reported an unexpected character when we could have reported that we didn't expect a comment.\r\n    - **[Action]** We've reworded the error message.\r\n    - We had one error message that was generated by a lower layer and provided an action item that doesn't make sense when people receive it when using the higher layer component.\r\n    - **[Action]** We've reworded the error message to be more generic so it makes sense for both kind of consumers.\r\n* Virtually everyone used the new Roslyn completion feature which will also show\r\n  types from namespaces not imported yet.\r\n    - However, virtually nobody realized that they were doing it.\r\n    - This caused confusion when people found other APIs that happen to include Json in them, specifically the old data contract serialization.\r\n    - **[Action]** Talk to the Roslyn IDE team to see if this something more people will run into. This could prove to be especially problematic for technologies that share type names (e.g. `UserControl` in WinForms and WPF) and both are referenced by the project.\r\n* Optional parameters and `async`/`await` are usability cliffs\r\n    - Many were confused by optional parameters and tried to pass them in, even though they didn't have to.\r\n    - **[Action]** Talk to the Roslyn IDE team to see if we can visualize them better in VS.\r\n    - **[Action]** Try to avoid heavy use of optional parameters for mainline APIs.\r\n    - Async is a very steep cliff. People have no idea what to do in their code to make async work. While IntelliSense shows the usage by prefixing it with await, people didn't notice that.\r\n    - **[Action]** Unclear; this is a broader issue.\r\n* Virtually nobody used F1 to get help for APIs\r\n    - *Surprise*. I expected more people to use <kbd>F1</kbd>.\r\n* Virtually everyone used F12 to explore the API (\"metadata view\")\r\n    - *Surprise*. I expected most people to explore the type via the\r\n      IntelliSense completion\r\n* Nobody used Object Browser to explorer the APIs\r\n    - *Surprise*. I expected at least some people to.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/39304."},{"Id":"9963969636","Type":"IssuesEvent","CreatedAt":"2019-07-08T03:13:39","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/116","RelatedDescription":"Opened issue \"Updates to releases.json (.NET Core release metadata)\" (#116) at dotnet/announcements","RelatedBody":"**The changes described in this issue will be live with the .NET Core July update on 7/9/2019.**\r\n\r\nThe releases.json files (e.g. [2.2 releases.json](https://raw.githubusercontent.com/dotnet/core/master/release-notes/2.2/releases.json)) are comprehensive metadata files which capture details of each .NET Core release. These files, along with the top level [releases-index.json](https://raw.githubusercontent.com/dotnet/core/master/release-notes/releases-index.json), are becoming increasingly important .NET Core release assets. These files, one for each major.minor channel, are relied upon by many to detect when updates for .NET Core are available, discover security update details and other uses.\r\n\r\nChanges are sometimes necessary, and the growing dependencies require that we treat compatibility of the schema with the utmost care. This announcement describes an addition to the releases.json schema.\r\n\r\n## SDK Versions and Visual Studio\r\n\r\nBecause of current .NET Core SDK product construction dependencies, there is a hard link between the Runtime, SDK, toolset (compilers, msbuild, nuget, and other components), and Visual Studio. Simplistically, this means that when anything updates, everything updates. The unfortunate result of this linking is that multiple versions of the SDK are released with each monthly update for each supported versions of Visual Studio. For example, the May Update for .NET Core 2.2 included the 2.2.5 runtime, 2.2.107 SDK for Visual Studio 2017 and 2.2.204 for Visual Studio 2019 and yet another pair of SDK versions for .NET Core 2.1. An example of this is the [2.2.5 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.5/2.2.5.md). \r\n\r\nThis is a confusing situation and we are working to mitigate the need to release multiple SDKs with .NET Core 3.0. The need for multiple SDK versions will persist for 2.1 LTS.\r\n\r\n## Adding the SDKS array\r\n\r\nTo appropriately model multiple SDKs per release, we are adding an SDKs array to releases.json, which will contain SDK objects. The top-level SDK object will represent the highest versioned SDK for a given update. Using the previous 2.2.5 update example, SDK 2.2.204 is in the top SDK object as well as duplicated in the SDKS array. All other applicable 2.2* SDK objects are included in the SDKS array. The SDK objects within the array will carry specific Visual Studio compatibility and version inclusion information to provide appropriate context.\r\n\r\nHere is a partial example of the new array based on the upcoming July update. \r\nAgain, this will be additive and the previous SDK object will include the highest SDK version for the release.\r\n\r\n```json\r\n{\r\n  \"sdks\": [\r\n    {\r\n        \"version\": \"2.2.301\",\r\n        \"version-display\": \"2.2.301\",\r\n        \"runtime-version\": \"2.2.6\",\r\n        \"vs-version\": \"16.1.3\",\r\n        \"vs-support\": \"Visual Studio 2019 (v16.1)\",\r\n        \"csharp-version\": \"7.3\",\r\n        \"fsharp-version\": \"4.5\",\r\n        \"vb-version\": null,\r\n        \"files\": [\r\n            {\r\n            \"name\": \"\",\r\n            \"rid\": \"\",\r\n            \"url\": \"\",\r\n            \"hash\": \"\"\r\n            }\r\n        ]\r\n    }\r\n    ]\r\n}\r\n```\r\n\r\n## vs-version and the Runtime\r\n\r\nThe same version of the runtime is included in multiple versions of Visual Studio. To account for this, the vs-version field is being updated to a comma-delimited string. The string will represent all versions of Visual Studio which first include the particular .NET Core update. Again, an example from the upcoming July Update.\r\n\r\n```json\r\n\"runtime\": {\r\n        \"version\": \"2.2.6\",\r\n        \"version-display\": \"2.2.6\",\r\n        \"vs-version\": \"15.9.13, 16.1.3, 16.2.0\",\r\n```\r\n\r\nThe same `vs-versions` changes will be seen in the `aspnetcore-runtime` object.\r\n\r\n## Future Enhancements\r\n\r\nThere are other improvements to the schema which have been suggested by the communitiy which we are evaluating. Generally, theses enhancements are additive and should not represent compatibility comprimises for existing parsers and similar announcements will be published ahead of any changes.\r\n\r\n"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"10116342907","Type":"IssuesEvent","CreatedAt":"2019-07-31T01:33:08","Actor":"scalablecory","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/25945","RelatedDescription":"Opened issue \"SIGSEGV is not transformed into NullReferenceException in WSL\" (#25945) at dotnet/coreclr","RelatedBody":"Under WSL (at least Ubuntu 18.04, and seemingly OpenSUSE 15) , SIGSEGV is not caught and transformed into a `NullReferenceException` as it is on other platforms.\r\n\r\nRepro:\r\n\r\n```c#\r\nclass Program\r\n{\r\n    static unsafe void Main(string[] args)\r\n    {\r\n        int* ptr = null;\r\n        Console.WriteLine(*ptr);\r\n    }\r\n}\r\n```\r\n\r\n```\r\ncory@conelso1:~/39732-smtp-segfault$ dotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview7-012821\r\n Commit:    6348f1068a\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  18.04\r\n OS Platform: Linux\r\n RID:         ubuntu.18.04-x64\r\n Base Path:   /usr/share/dotnet/sdk/3.0.100-preview7-012821/\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview7-27912-14\r\n  Commit:  4da6ee6450\r\n\r\n.NET Core SDKs installed:\r\n  3.0.100-preview7-012821 [/usr/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.App 3.0.0-preview7.19365.7 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview7-27912-14 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\ncory@conelso1:~/39732-smtp-segfault$ ./bin/Debug/netcoreapp3.0/39732-smtp-segfault\r\nSegmentation fault (core dumped)\r\n```\r\n\r\nFound during our investigation of https://github.com/dotnet/corefx/issues/39732\r\n\r\ncc @janvorli @wfurt "},{"Id":"10116253162","Type":"IssuesEvent","CreatedAt":"2019-07-31T01:07:28","Actor":"VincentBu","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/25944","RelatedDescription":"Opened issue \"Test failed: MonoTests.System.Drawing.Imaging.BmpCodecTest.Bitmap24bitData\" (#25944) at dotnet/coreclr","RelatedBody":"**Job:**\r\nhttps://mc.dot.net/#/user/coreclr-corefx/ci~2Fdotnet~2Fcoreclr~2Frefs~2Fheads~2Fmaster/test~2Ffunctional~2Fcorefx~2F/20190730.1/workItem/System.Drawing.Common.Tests/analysis/xunit/MonoTests.System.Drawing.Imaging.BmpCodecTest~2FBitmap24bitData\r\n\r\n**Failed tests:**\r\nMonoTests.System.Drawing.Imaging.BmpCodecTest.Bitmap24bitData\r\n\r\n**Log:**\r\n```\r\nAssert.Equal() Failure\r\nExpected: 173\r\nActual:   0\r\n```"},{"Id":"10116135662","Type":"PullRequestEvent","CreatedAt":"2019-07-31T00:32:36","Actor":"jiangzeng01","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/25893","RelatedDescription":"Merged pull request \"Add 2 EventPipe tests\" (#25893) at dotnet/coreclr","RelatedBody":""},{"Id":"10116002845","Type":"IssuesEvent","CreatedAt":"2019-07-30T23:55:53","Actor":"davmason","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/25934","RelatedDescription":"Closed issue \"ProfilerAPI: RequestReJit hang when Microsoft.NET.Sdk.Web used\" (#25934) at dotnet/coreclr","RelatedBody":"When profiler calls RequestReJit, if Microsoft.NET.Sdk.Web for instrumented project, application main thread hangs. .Net even will not call GetReJITParameters callback.\r\n\r\nIssue is reproducible on .Net Core 3 Preview 7, windows x64.\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview7-012821\r\n Commit:    6348f1068a\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview7-012821\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview7-27912-14\r\n  Commit:  4da6ee6450\r\n\r\n.NET Core SDKs installed:\r\n  2.1.701 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.101 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.301 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview7-012821 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview7.19365.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview7-27912-14 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview7-27912-14 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n```\r\n\r\nI've prepared repro: https://github.com/iskiselev/ProfilerReJitHang (see readme.md for instructions).\r\nIssue is not reproducible when \"Microsoft.NET.Sdk\" is used. It is not reproducible on .NET Core 2.x also."},{"Id":"10115894945","Type":"IssuesEvent","CreatedAt":"2019-07-30T23:27:16","Actor":"fadimounir","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/25943","RelatedDescription":"Opened issue \"Add generic method instantiation information to ETW events\" (#25943) at dotnet/coreclr","RelatedBody":"Today, the ETW events for jitting and perf traces doesn't contain the generic method instantiation type arguments. Example\r\n`System.Runtime.CompilerServices.AsyncTaskMethodBuilder.AwaitUnsafeOnCompleted(!!0& !!1&)`\r\n\r\nThis should have been something like:\r\n`System.Runtime.CompilerServices.AsyncTaskMethodBuilder.AwaitUnsafeOnCompleted<bool,int>(!!0& !!1&)`\r\n\r\nFixing this requires some care because we need to be able to diff 2.x/3.0 traces to traces with generic instantiation info (when the bug gets fixed).\r\n\r\nWe need to put a switch in the runtime and default it to the new format.  "},{"Id":"10115807601","Type":"PullRequestEvent","CreatedAt":"2019-07-30T23:04:58","Actor":"jashook","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/25942","RelatedDescription":"Opened pull request \"[TEST] Test vs 2019 windows container build\" (#25942) at dotnet/coreclr","RelatedBody":""},{"Id":"10115657579","Type":"PullRequestEvent","CreatedAt":"2019-07-30T22:30:33","Actor":"RussKeldorph","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/25941","RelatedDescription":"Opened pull request \"Consistent telm. type for crossgen-comparison job\" (#25941) at dotnet/coreclr","RelatedBody":"For some reason our telemetry prefers a slash appended to the HelixType parameter."},{"Id":"10115635517","Type":"PullRequestEvent","CreatedAt":"2019-07-30T22:25:55","Actor":"jcagme","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/pull/25940","RelatedDescription":"Closed pull request \"RestoreSources cleanup\" (#25940) at dotnet/coreclr","RelatedBody":"Remove `RestoreSources` from Versions.props in order to complete [step 2](https://github.com/dotnet/arcade/blob/master/Documentation/RestoreSourcesUpdateStatus.md#part-2)"},{"Id":"10115574235","Type":"PullRequestEvent","CreatedAt":"2019-07-30T22:13:08","Actor":"jcagme","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/25940","RelatedDescription":"Opened pull request \"RestoreSources cleanup\" (#25940) at dotnet/coreclr","RelatedBody":"Remove `RestoreSources` from Versions.props in order to complete [step 2](https://github.com/dotnet/arcade/blob/master/Documentation/RestoreSourcesUpdateStatus.md#part-2)"},{"Id":"10115383862","Type":"PullRequestEvent","CreatedAt":"2019-07-30T21:37:55","Actor":"dotnet-maestro-bot","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/25939","RelatedDescription":"Opened pull request \"[automated] Merge branch 'release/2.1' => 'release/2.2'\" (#25939) at dotnet/coreclr","RelatedBody":"I detected changes in the release/2.1 branch which have not been merged yet to release/2.2. I'm a robot and am configured to help you automatically keep release/2.2 up to date, so I've opened this PR.\r\n\r\nThis PR merges commits made on release/2.1 by the following committers:\n\n* @mmitche\n* @dotnet-maestro-bot\n* @wtgodbe\n* @jashook\r\n\r\n## Instructions for merging from UI\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, complete this PR by creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nIf this repo does not allow creating merge commits from the GitHub UI, use command line instructions.\r\n\r\n## Instructions for merging via command line\r\n\r\nRun these commands to merge this pull request from the command line.\r\n\r\n``` sh\r\ngit fetch\r\ngit checkout release/2.1\r\ngit pull --ff-only\r\ngit checkout release/2.2\r\ngit pull --ff-only\r\ngit merge --no-ff release/2.1\r\n\r\n# If there are merge conflicts, resolve them and then run git merge --continue to complete the merge\r\n# Pushing the changes to the PR branch will re-trigger PR validation.\r\ngit push https://github.com/dotnet-maestro-bot/coreclr HEAD:merge/release/2.1-to-release/2.2\r\n```\r\n\r\n<details>\r\n<summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit push git@github.com:dotnet-maestro-bot/coreclr HEAD:merge/release/2.1-to-release/2.2\r\n```\r\n\r\n</details>\r\n\r\n\r\nAfter PR checks are complete push the branch\r\n```\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging. You can do this [using GitHub][resolve-github] or using the [command line][resolve-cli].\r\n\r\n[resolve-github]: https://help.github.com/articles/resolving-a-merge-conflict-on-github/\r\n[resolve-cli]: https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/\r\n\r\n## Instructions for updating this pull request\r\n\r\nContributors to this repo have permission update this pull request by pushing to the branch 'merge/release/2.1-to-release/2.2'. This can be done to resolve conflicts or make other changes to this pull request before it is merged.\r\n\r\n```\r\ngit checkout -b merge/release/2.1-to-release/2.2 release/2.2\r\ngit pull https://github.com/dotnet-maestro-bot/coreclr merge/release/2.1-to-release/2.2\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push https://github.com/dotnet-maestro-bot/coreclr merge/release/2.1-to-release/2.2\r\n```\r\n\r\n<details>\r\n    <summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit checkout -b merge/release/2.1-to-release/2.2 release/2.2\r\ngit pull git@github.com:dotnet-maestro-bot/coreclr merge/release/2.1-to-release/2.2\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push git@github.com:dotnet-maestro-bot/coreclr merge/release/2.1-to-release/2.2\r\n```\r\n\r\n</details>\r\n\r\nContact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.\r\n"},{"Id":"10115374409","Type":"PullRequestEvent","CreatedAt":"2019-07-30T21:36:15","Actor":"mmitche","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/25937","RelatedDescription":"Merged pull request \"Update BuildTools, CoreClr, CoreFx to preview1-04230-02, servicing-27817-03, servicing-27818-02, respectively (release/2.2)\" (#25937) at dotnet/coreclr","RelatedBody":"/cc @dotnet/maestro-reviewers-core"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"10116421167","Type":"PullRequestEvent","CreatedAt":"2019-07-31T01:55:00","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/12088","RelatedDescription":"Merged pull request \"[release/3.0.100-preview8] Update dependencies from dotnet/sdk\" (#12088) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:6e10c9b4-9a39-4546-565f-08d7114adc5e)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190730.2\r\n- **Date Produced**: 7/31/2019 1:19 AM\r\n- **Commit**: 5871fd3821d31a930d36e35f466f245be20c6b16\r\n- **Branch**: refs/heads/release/3.0.100-preview8\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview8.19380.2\r\n\r\n[marker]: <> (End:6e10c9b4-9a39-4546-565f-08d7114adc5e)\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"10113435286","Type":"PullRequestEvent","CreatedAt":"2019-07-30T16:43:13","Actor":"JohnTortugo","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1379","RelatedDescription":"Merged pull request \"Patch reference to _PublishUsingPipelines\" (#1379) at dotnet/standard","RelatedBody":"For context see description of this Arcade PR: https://github.com/dotnet/arcade/pull/3482\r\n\r\n/cc @riarenas @jcagme "},{"Id":"10111520001","Type":"PullRequestEvent","CreatedAt":"2019-07-30T12:56:42","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1380","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/corefx\" (#1380) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190729.12\r\n- **Date Produced**: 7/30/2019 5:11 AM\r\n- **Commit**: b2ff0db61cc9348775d73a8934ad80218ded8bc0\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19379.12\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19379.12\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19379.12\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"},{"Id":"10111442631","Type":"PullRequestEvent","CreatedAt":"2019-07-30T12:46:36","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1380","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/corefx\" (#1380) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190729.12\r\n- **Date Produced**: 7/30/2019 5:11 AM\r\n- **Commit**: b2ff0db61cc9348775d73a8934ad80218ded8bc0\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19379.12\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19379.12\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19379.12\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"},{"Id":"10107400174","Type":"PullRequestEvent","CreatedAt":"2019-07-29T23:49:57","Actor":"JohnTortugo","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1379","RelatedDescription":"Opened pull request \"Patch reference to _PublishUsingPipelines\" (#1379) at dotnet/standard","RelatedBody":"For context see description of this Arcade PR: https://github.com/dotnet/arcade/pull/3482\r\n\r\n/cc @riarenas @jcagme "},{"Id":"10103178250","Type":"PullRequestEvent","CreatedAt":"2019-07-29T13:03:25","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1378","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/corefx\" (#1378) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190728.4\r\n- **Date Produced**: 7/29/2019 4:09 AM\r\n- **Commit**: e36291288fc182e94a919f45e61a8924f953c3cd\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19378.4\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19378.4\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19378.4\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"},{"Id":"10103100299","Type":"PullRequestEvent","CreatedAt":"2019-07-29T12:53:18","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1378","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/corefx\" (#1378) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190728.4\r\n- **Date Produced**: 7/29/2019 4:09 AM\r\n- **Commit**: e36291288fc182e94a919f45e61a8924f953c3cd\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19378.4\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19378.4\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19378.4\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"},{"Id":"10099018210","Type":"IssuesEvent","CreatedAt":"2019-07-28T19:57:53","Actor":"KubaO","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/1377","RelatedDescription":"Opened issue \"System.Xml.Serialization needs a dynamic element name for interop\" (#1377) at dotnet/standard","RelatedBody":"There's some awful XML out there that uses such a multitude of element names that it's infeasible to map them all out in explicit `XMLElement` attributes. Heck, such XML often programmatically generates the names. It's not a practice to be encouraged, but we should be able to simplify the life of people who need to interoperate with such XML.\r\n\r\nIt'd be nice if we could do this:\r\n\r\n```\r\nclass AnAwfulElement {\r\n  [XmlDynamicElementName]\r\n  string name;\r\n  [XmlText(typeOf(int))]\r\n  int aNumber;\r\n  ...\r\n}\r\n```\r\n\r\nThe attribute definition would be rather basic. A `DefaultElementName` property is a fallback if the name the attribute applies to is null. An exception would be thrown on serialization if both the name-attributed field as well as the default name were empty. On deserialization, the `name` is filled in with the name of the element.\r\n\r\n```\r\n[System.AttributeUsageAttribute(System.AttributeTargets.Field | System.AttributeTargets.Property, AllowMultiple=false)]\r\n    public partial class XmlDynamicElementNameAttribute: System.Attribute\r\n    {\r\n        public XmlDynamicElementNameAttribute() { }\r\n        public XmlDynamicElementNameAttribute(string defaultElementName) { }\r\n        public string DefaultElementName { get { throw null; } set { } }\r\n        public System.Xml.Schema.XmlSchemaForm Form { get { throw null; } set { } }\r\n        public string Namespace { get { throw null; } set { } }\r\n    }\r\n```"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"10116480139","Type":"IssuesEvent","CreatedAt":"2019-07-31T02:11:17","Actor":"summeney","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/39909","RelatedDescription":"Opened issue \"HttpClient send with no-ascii header value throw exception\" (#39909) at dotnet/corefx","RelatedBody":"header value is no-ascii. we should pass.\r\nbut....\r\n\r\nHttpConnection.cs\r\n                     await WriteStringAsync(header.Value[0]).ConfigureAwait(false);\r\n\r\nthrow exception in WriteStringAsync\r\n\r\n                    if ((c & 0xFF80) != 0)\r\n                    {\r\n                        throw new HttpRequestException(SR.net_http_request_invalid_char_encoding);\r\n                    }\r\n\r\nboom..............."},{"Id":"10116319244","Type":"IssuesEvent","CreatedAt":"2019-07-31T01:26:25","Actor":"foxjazz","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/39908","RelatedDescription":"Opened issue \"process not sharing file for RW\" (#39908) at dotnet/corefx","RelatedBody":"https://github.com/coding-reason/LogFileMonitor.git\r\n\r\nclone  run windows 10\r\n"},{"Id":"10116180408","Type":"PullRequestEvent","CreatedAt":"2019-07-31T00:45:56","Actor":"PRIMETSS","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/corefx/pull/39885","RelatedDescription":null,"RelatedBody":"https://github.com/dotnet/corefx/issues/39840\r\n\r\nAlso Requries fix to coreclr to fix Microsoft.NET.Sdk.IL.targets:\r\n\r\nSource: \"C:\\Users\\User.nuget\\packages\\microsoft.net.sdk.il\\5.0.0-alpha1.19377.2\\targets\\Microsoft.NET.Sdk.IL.targets\"\r\n\r\n`<_IldasmCommand>\"$(_IlasmDir)\"ildasm</_IldasmCommand>`\r\n`and`\r\n`<_IlasmSwitches Condition=\"'$(IlasmResourceFile)' != ''\">$(_IlasmSwitches) -RESOURCES=\"$(IlasmResourceFile)\"</_IlasmSwitches>`\r\n`and`\r\n`<Exec Command=\"&quot;$(_IlasmDir)&quot;ilasm $(_IlasmSwitches) $(_OutputTypeArgument)` `$(IlasmFlags) -OUTPUT=&quot;@(IntermediateAssembly)&quot; $(_KeyFileArgument) `@(Compile)\"> <Output TaskParameter=\"ExitCode\" PropertyName=\"_ILAsmExitCode\" /> </Exec>`"},{"Id":"10116180292","Type":"PullRequestEvent","CreatedAt":"2019-07-31T00:45:53","Actor":"PRIMETSS","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/pull/39885","RelatedDescription":"Closed pull request \"Fix to Build fails with 'error MSB3073' when run from folder containing space\" (#39885) at dotnet/corefx","RelatedBody":"https://github.com/dotnet/corefx/issues/39840\r\n\r\nAlso Requries fix to coreclr to fix Microsoft.NET.Sdk.IL.targets:\r\n\r\nSource: \"C:\\Users\\User.nuget\\packages\\microsoft.net.sdk.il\\5.0.0-alpha1.19377.2\\targets\\Microsoft.NET.Sdk.IL.targets\"\r\n\r\n`<_IldasmCommand>\"$(_IlasmDir)\"ildasm</_IldasmCommand>`\r\n`and`\r\n`<_IlasmSwitches Condition=\"'$(IlasmResourceFile)' != ''\">$(_IlasmSwitches) -RESOURCES=\"$(IlasmResourceFile)\"</_IlasmSwitches>`\r\n`and`\r\n`<Exec Command=\"&quot;$(_IlasmDir)&quot;ilasm $(_IlasmSwitches) $(_OutputTypeArgument)` `$(IlasmFlags) -OUTPUT=&quot;@(IntermediateAssembly)&quot; $(_KeyFileArgument) `@(Compile)\"> <Output TaskParameter=\"ExitCode\" PropertyName=\"_ILAsmExitCode\" /> </Exec>`"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"10116978795","Type":"PullRequestEvent","CreatedAt":"2019-07-31T04:29:06","Actor":"cston","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/37610","RelatedDescription":"Opened pull request \"Remove AttributeTargets.Module from NullableContextAttribute\" (#37610) at dotnet/roslyn","RelatedBody":"The C# compiler does not support module-level `NullableContextAttribute`. This change updates the spec-let and the `AttributeTargets` on the embedded attribute definition to reflect that.\r\n"},{"Id":"10116935987","Type":"PullRequestEvent","CreatedAt":"2019-07-31T04:16:30","Actor":"gundermanc","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/pull/37359","RelatedDescription":"Closed pull request \"WIP: Expose Roslyn OOP as a limited LSP server supporting code search via extended LSP\" (#37359) at dotnet/roslyn","RelatedBody":"Polish for @olegtk's PR #37190... I don't have permissions to push directly to the existing PR.\r\n\r\nThis prototype exposes RoslynCodeAnalysis service hub service as a limited LSP server supporting only extended (streaming) version of LSP's workspace symbol search. This allows Roslyn to support VS search on par with GoTo.\r\n\r\nMore context: VS Search (former Quick Launch) public extensibility is LSP only, it supports both standard workspace/symbol and extended workspace/beginSymbol and workspace/publishSymbol (not yet documented). Standard LSP's workspace/symbol doesn't support streaming of results yet (expected in next version via microsoft/vs-streamjsonrpc#139), that's why until it does we need to extend LSP with workspace/beginSymbol.\r\n\r\nThis implementation is reusing AbstractNavigateToSearchServic, just like GoTo, but unlike GoTo it uses PrimaryWorkspace as LSP doesn't support workspace synchronization.\r\n\r\nInitialization of this Roslyn LSP server is left to VS LSP client for now, it will initialize it when user starts interacting with VS Search (based on \"Capability\" metadata)."},{"Id":"10116851929","Type":"IssuesEvent","CreatedAt":"2019-07-31T03:51:49","Actor":"jinujoseph","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/37554","RelatedDescription":"Closed issue \"IntelliSense: Exclude current file when including\" (#37554) at dotnet/roslyn","RelatedBody":"IntelliSense is suggesting the current file when typing an #include statement, which is not useful.\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/idea/600638/intellisense-exclude-current-file-when-including.html\nVSTS ticketId: 915779_\n_These are the original issue comments:_\n\nJane Wu [MSFT] on 6/11/2019, 00:01 AM (48 days ago): <p>Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&nbsp;We'll provide an update once the issue has been triaged by the product team.</p>"},{"Id":"10116664994","Type":"PullRequestEvent","CreatedAt":"2019-07-31T03:00:38","Actor":"dotnet-automerge-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/37590","RelatedDescription":"Merged pull request \"Merge release/dev16.2-vs-deps to release/dev16.3-preview2-vs-deps\" (#37590) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from release/dev16.2-vs-deps into release/dev16.3-preview2-vs-deps.\n(created from a manual run of the PR generation tool)\n\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.2-vs-deps-to-release/dev16.3-preview2-vs-deps\ngit reset --hard upstream/release/dev16.3-preview2-vs-deps\ngit merge upstream/release/dev16.2-vs-deps\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.2-vs-deps-to-release/dev16.3-preview2-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"10116664281","Type":"PullRequestEvent","CreatedAt":"2019-07-31T03:00:28","Actor":"dotnet-automerge-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/37591","RelatedDescription":"Merged pull request \"Merge master to master-vs-deps\" (#37591) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from master into master-vs-deps.\n(created from a manual run of the PR generation tool)\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"10116501442","Type":"PullRequestEvent","CreatedAt":"2019-07-31T02:16:54","Actor":"jnm2","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/37609","RelatedDescription":"Opened pull request \"[wip] Fix trailing whitespace and superfluous blank lines in generated GlobalSuppressions.cs\" (#37609) at dotnet/roslyn","RelatedBody":"Fixes #37529\r\n\r\nI fixed the trailing whitespace and leading blank line. I'd appreciate pointers on where the `\\r\\n\\r\\n` is coming from at the end of the file. This looked likely, but I deleted the code and it didn't seem to get rid of the double crlf:\r\n\r\nhttps://github.com/dotnet/roslyn/blob/1113a88fd4ae089e151059bda1e6ab214d9c8c4a/src/Features/CSharp/Portable/CodeFixes/Suppression/CSharpSuppressionCodeFixProvider.cs#L142-L148"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"10103247464","Type":"PullRequestEvent","CreatedAt":"2019-07-29T13:12:32","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7659","RelatedDescription":"Opened pull request \"Prevent computing bad layout\" (#7659) at dotnet/corert","RelatedBody":"Value type fields that contain GC pointers need to start at pointer boundaries.\r\n\r\nCoreCLR does this check a bit differently (it technically allows unaligned fields, provided the GC pointer inside the valuetype ends up being aligned with respect to the beginning of the type, but in reality, I don't think it's possible to end up in such situation - the layout of the field type itself would end up being invalid).\r\n\r\nFixes one of the CPAOT failures."},{"Id":"10100689813","Type":"PullRequestEvent","CreatedAt":"2019-07-29T06:41:45","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7657","RelatedDescription":"Merged pull request \"Split interop manager to usage- and analysis-based\" (#7657) at dotnet/corert","RelatedBody":"This puts interop manager on the same plan as metadata manager. The reason we need two managers is inlining: to determine what structs/delegates need marshaling data, we look at what methods got compiled. This works great as long as there's no inlining of these methods. If we inline a method used as such marker, we lose track of what needs interop data.\r\n\r\nWith this split, we can collect usage information during the IL scanning phase, and for codegen phase, we can reuse the information from the scanner.\r\n\r\nCommit 4c1058a removes a bunch of workarounds that we had in place because of this.\r\n\r\nThe commits mostly make sense (might help reviewing this big change), although I'm planning to squash them anyway. The `Don't make so much marshalling data` commit undoes something I did wrong in the `Track interop dependencies in the dependency graph` commit.\r\n\r\nFixes #6063."},{"Id":"10100689790","Type":"IssuesEvent","CreatedAt":"2019-07-29T06:41:45","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/6063","RelatedDescription":"Closed issue \"Re-enable PInvoke inlining\" (#6063) at dotnet/corert","RelatedBody":"The problem is:\r\n1. PInvoke with delegate argument in signature gets inlined\r\n2. We do not have a root to keep the delegate marshaling info alive, so we drop it from the final image. \r\n3. Crash at runtime"},{"Id":"10096737683","Type":"PullRequestEvent","CreatedAt":"2019-07-27T21:00:42","Actor":"Suchiman","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7658","RelatedDescription":"Opened pull request \"Add support for embedding and processing embedded stacktrace line infos\" (#7658) at dotnet/corert","RelatedBody":"As discussed @MichalStrehovsky \r\n**TODO**:\r\n- configurability\r\n- compression"},{"Id":"10096389481","Type":"IssuesEvent","CreatedAt":"2019-07-27T17:37:44","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/1596","RelatedDescription":"Closed issue \"Interop calls into reflection on startup before reflection is online\" (#1596) at dotnet/corert","RelatedBody":"When I run my CoreRT app, an unhandled `InvalidOperationException` is thrown in [the getter for `Internal.Runtime.Augments.RuntimeAugments.Callbacks`](https://github.com/dotnet/corert/blob/master/src/System.Private.CoreLib/src/Internal/Runtime/Augments/RuntimeAugments.cs#L759). This occurs within the call to `InitializeModules`, prior to entry into my application code. I haven't seen this happen before. The getter is being called [here](https://github.com/dotnet/corert/blob/master/src/System.Private.CoreLib/src/Internal/Reflection/Core/NonPortable/RuntimeTypeUnifier.Internals.cs#L38). Inspection of the call stack gives references to COM interop, which was completely unimplemented the last time I checked. This just started happening now, right after I updated my clone of CoreRT to mirror the head of master. Can anyone tell me what's going on here? Thanks!\n"},{"Id":"10096384097","Type":"IssuesEvent","CreatedAt":"2019-07-27T17:34:25","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/7640","RelatedDescription":"Closed issue \"Latest WebAPI broken\" (#7640) at dotnet/corert","RelatedBody":"I haven't looked into it as yet but we made some changes that seem to result in failures after compiling with the IL compiler.\r\n\r\n```\r\nUnhandled Exception: System.PlatformNotSupportedException: Operation is not supported on this platform.\r\n   at System.Reflection.Runtime.Assemblies.RuntimeAssembly.get_CodeBase() + 0x24\r\n   at Microsoft.AspNetCore.Mvc.ApplicationParts.RelatedAssemblyAttribute.GetRelatedAssemblies(Assembly, Boolean, Func`2, Func`2) + 0x50\r\n   at Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartManager.<GetAsemblyClosure>d__9.MoveNext() + 0x8d\r\n   at System.Linq.Enumerable.ConcatIterator`1.MoveNext() + 0x62\r\n   at Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartManager.PopulateDefaultParts(String) + 0x16f\r\n   at Microsoft.Extensions.DependencyInjection.MvcCoreServiceCollectionExtensions.GetApplicationPartManager(IServiceCollection) + 0x81\r\n   at Microsoft.Extensions.DependencyInjection.MvcCoreServiceCollectionExtensions.AddMvcCore(IServiceCollection) + 0x17\r\n   at Microsoft.Extensions.DependencyInjection.MvcServiceCollectionExtensions.AddControllersCore(IServiceCollection) + 0xa\r\n   at Microsoft.Extensions.DependencyInjection.MvcServiceCollectionExtensions.AddControllers(IServiceCollection) + 0x11\r\n   at WebApplication2.Startup.ConfigureServices(IServiceCollection) + 0xc\r\n   at WebApplication2!<BaseAddress>+0xcd7ccd\r\n   at System.InvokeUtils.CallDynamicInvokeMethod(Object, IntPtr, Object, IntPtr, IntPtr, Object, Object[], BinderBundle, Boolean, Boolean, Boolean) + 0x218\r\n   at Internal.Reflection.Execution.MethodInvokers.InstanceMethodInvoker.Invoke(Object, Object[], BinderBundle, Boolean) + 0x7f\r\n   at Internal.Reflection.Core.Execution.MethodInvoker.Invoke(Object, Object[], Binder, BindingFlags, CultureInfo) + 0x46\r\n   at System.Reflection.Runtime.MethodInfos.RuntimeMethodInfo.Invoke(Object, BindingFlags, Binder, Object[], CultureInfo) + 0x58\r\n   at Microsoft.AspNetCore.Hosting.ConfigureServicesBuilder.InvokeCore(Object, IServiceCollection) + 0xf6\r\n   at Microsoft.AspNetCore.Hosting.GenericWebHostBuilder.UseStartup(Type, HostBuilderContext, IServiceCollection) + 0x198\r\n   at Microsoft.AspNetCore.Hosting.GenericWebHostBuilder.<>c__DisplayClass12_0.<UseStartup>b__0(HostBuilderContext, IServiceCollection) + 0xa1\r\n   at Microsoft.Extensions.Hosting.HostBuilder.CreateServiceProvider() + 0x19e\r\n   at Microsoft.Extensions.Hosting.HostBuilder.Build() + 0x3a\r\n   at WebApplication2.Program.Main(String[]) + 0x1b\r\n   at WebApplication2!<BaseAddress>+0xc04c30\r\n```\r\n\r\n"},{"Id":"10096339598","Type":"IssuesEvent","CreatedAt":"2019-07-27T17:10:19","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/7648","RelatedDescription":"Closed issue \"Build error: nutc_driver.exe returned exit code 1 with VS2019. No others errors. Ok on VS2017\" (#7648) at dotnet/corert","RelatedBody":"My project has built on Azure Pipelines hosted agent for months.\r\nI switched from VS2017 to VS2019. Now it fails with \"nutc_driver.exe returned exit code 1\".\r\n\r\nI read about similar issue saying to use `<Use64BitCompiler>true</Use64BitCompiler>`. I did yet the problem remains. Other issues mention \"Out of memory\" or other errors. In my case, the log doesn't have any other errors but the one I report.\r\n\r\nI tried to uncheck \"native compilation\" but then the build took 2min (instead of over an hour), the app was about 30mb (vs 100mb usually) and would'nt install.\r\n"},{"Id":"10096338472","Type":"PullRequestEvent","CreatedAt":"2019-07-27T17:09:49","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7657","RelatedDescription":"Opened pull request \"Split interop manager to usage- and analysis-based\" (#7657) at dotnet/corert","RelatedBody":"This puts interop manager on the same plan as metadata manager. The reason we need two managers is inlining: to determine what structs/delegates need marshaling data, we look at what methods got compiled. This works great as long as there's no inlining of these methods. If we inline a method used as such marker, we lose track of what needs interop data.\r\n\r\nWith this split, we can collect usage information during the IL scanning phase, and for codegen phase, we can reuse the information from the scanner.\r\n\r\nCommit 4c1058a removes a bunch of workarounds that we had in place because of this.\r\n\r\nThe commits mostly make sense (might help reviewing this big change), although I'm planning to squash them anyway. The `Don't make so much marshalling data` commit undoes something I did wrong in the `Track interop dependencies in the dependency graph` commit.\r\n\r\nFixes #6063."},{"Id":"10095532184","Type":"PullRequestEvent","CreatedAt":"2019-07-27T09:46:45","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7656","RelatedDescription":"Merged pull request \"Use a single ReadyToRunHelper enum\" (#7656) at dotnet/corert","RelatedBody":"When I was troubleshooting the double/float helpers issue, it was really hairy because we have two copies or ReadyToRunHelper. We only need one.\r\n\r\nWhen Jan initially added the ILCompiler version in #129, it already came with `Keep in sync with https://github.com/dotnet/coreclr/blob/master/src/inc/readytorun.h`. We then added a couple helpers that don't exist in CoreCLR R2R because it was convenient, but we do want these numbers to match.\r\n\r\nI extracted the AOT specific ones to the end of the file, realizing that the ReadyToRun mode is trying to handle things it shouldn't. I deleted those."},{"Id":"10093299522","Type":"PullRequestEvent","CreatedAt":"2019-07-26T19:08:27","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7653","RelatedDescription":"Merged pull request \"Delete dead code in ILCompiler.ReadyToRun\" (#7653) at dotnet/corert","RelatedBody":"Not sure how much of this is earmarked for the future (I left a couple that I found obvious), and how much is just leftovers from old designs that we should delete."},{"Id":"10093295467","Type":"PullRequestEvent","CreatedAt":"2019-07-26T19:07:43","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7654","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/corefx\" (#7654) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub"},{"Id":"10093294734","Type":"PullRequestEvent","CreatedAt":"2019-07-26T19:07:34","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7652","RelatedDescription":"Merged pull request \"Add R2R implementation of getMethodSync\" (#7652) at dotnet/corert","RelatedBody":"The R2R implementation is to just throw.\r\n\r\nThis doesn't throw in crossgen, but it takes an NGen-specific code path and _then_ throws when we deal with `CORINFO_HELP_MON_ENTER_STATIC`/`CORINFO_HELP_MON_EXIT_STATIC` (that the result of `getMethodSync` is the parameter for)."},{"Id":"10093108257","Type":"PullRequestEvent","CreatedAt":"2019-07-26T18:35:47","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7656","RelatedDescription":"Opened pull request \"Use a single ReadyToRunHelper enum\" (#7656) at dotnet/corert","RelatedBody":"When I was troubleshooting the double/float helpers issue, it was really hairy because we have two copies or ReadyToRunHelper. We only need one.\r\n\r\nWhen Jan initially added the ILCompiler version in #129, it already came with `Keep in sync with https://github.com/dotnet/coreclr/blob/master/src/inc/readytorun.h`. We then added a couple helpers that don't exist in CoreCLR R2R because it was convenient, but we do want these numbers to match.\r\n\r\nI extracted the AOT specific ones to the end of the file, realizing that the ReadyToRun mode is trying to handle things it shouldn't. I deleted those."}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"10116884030","Type":"IssuesEvent","CreatedAt":"2019-07-31T04:01:04","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/3469","RelatedDescription":"Closed issue \"appsettings files aren't included in publish folder when using PublishSingleFile\" (#3469) at dotnet/sdk","RelatedBody":"I'm testing out the `/p:PublishSingleFile=true` option and it's working well so far, but my `appsettings.json` doesn't get included in the publish folder. If I don't use `PublishSingleFile=true` then the file does get copied to the publish folder.\r\n\r\nI'm using the following to publish:\r\n\r\n```console\r\ndotnet publish -c Release /p:PublishSingleFile=true /p:PublishTrimmed=true\r\n```\r\n\r\nIn my `.csproj` I have the following but it doesn't seem to have an effect when `PublishSingleFile=true`:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp3.0</TargetFramework>\r\n    <RuntimeIdentifier>win10-x64</RuntimeIdentifier>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <None Update=\"appsettings*.json\" CopyToOutputDirectory=\"Always\" CopyToPublishDirectory=\"Always\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\nI'm using SDK version 3.0.100-preview7-012821.\r\n\r\n## Current workaround\r\n\r\nAfter looking through some GitHub issues I found mention of `ExcludeFromSingleFile`. If I add that to my appsettings entry then the file gets included in the single file publish results.\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <ItemGroup>\r\n    <None Update=\"appsettings*.json\" CopyToOutputDirectory=\"Always\" CopyToPublishDirectory=\"Always\" ExcludeFromSingleFile=\"True\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\nSince these files are the standard way of handling settings in a file I'd assume they would be included in the publish results without any extra settings, or at least if `CopyToPublishDirectory` is set."}],"ResultType":"GitHubEvent"},"Home-Issues":{"Issues":[{"Id":"455670422","IsPullRequest":true,"CreatedAt":"2019-06-13T10:49:30","Actor":"gep13","Number":"147","RawContent":null,"Title":"(GH-111) Update Source Link location","State":"open","Body":"","Url":"https://github.com/dotnet/foundation/pull/147","RelatedDescription":"Open PR \"(GH-111) Update Source Link location\" (#147)"},{"Id":"455555823","IsPullRequest":true,"CreatedAt":"2019-06-13T06:28:59","Actor":"gep13","Number":"146","RawContent":null,"Title":"Update Cake Project Contacts","State":"closed","Body":"@jongalloway just noticed that this wasn't up to date.","Url":"https://github.com/dotnet/foundation/pull/146","RelatedDescription":"Closed or merged PR \"Update Cake Project Contacts\" (#146)"},{"Id":"441542047","IsPullRequest":true,"CreatedAt":"2019-05-09T18:35:22","Actor":"mitchelsellers","Number":"145","RawContent":null,"Title":"Edits to DNN Platform Information","State":"closed","Body":"Edits to reflect changes in repository structure with recent modifications to the overall project structure.","Url":"https://github.com/dotnet/foundation/pull/145","RelatedDescription":"Closed or merged PR \"Edits to DNN Platform Information\" (#145)"},{"Id":"437980746","IsPullRequest":true,"CreatedAt":"2019-05-03T20:10:38","Actor":"FlorianRappl","Number":"143","RawContent":null,"Title":"Add AngleSharp","State":"closed","Body":"cc @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/143","RelatedDescription":"Closed or merged PR \"Add AngleSharp\" (#143)"},{"Id":"426787230","IsPullRequest":true,"CreatedAt":"2019-05-03T20:08:40","Actor":"mairaw","Number":"141","RawContent":null,"Title":"add links to ML.NET docs","State":"closed","Body":"/cc @JRAlexander @shauheen \r\n\r\nTo match the info we have added for other projects","Url":"https://github.com/dotnet/foundation/pull/141","RelatedDescription":"Closed or merged PR \"add links to ML.NET docs\" (#141)"},{"Id":"440030132","IsPullRequest":true,"CreatedAt":"2019-05-03T20:08:15","Actor":"tomasherceg","Number":"144","RawContent":null,"Title":"Add DotVVM","State":"closed","Body":"cc @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/144","RelatedDescription":"Closed or merged PR \"Add DotVVM\" (#144)"},{"Id":"426787542","IsPullRequest":true,"CreatedAt":"2019-03-29T14:44:24","Actor":"mairaw","Number":"142","RawContent":null,"Title":"add docs samples link","State":"closed","Body":"@BillWagner should we add the samples project too?","Url":"https://github.com/dotnet/foundation/pull/142","RelatedDescription":"Closed or merged PR \"add docs samples link\" (#142)"},{"Id":"426658581","IsPullRequest":true,"CreatedAt":"2019-03-29T02:16:07","Actor":"scottaddie","Number":"139","RawContent":null,"Title":"Add link to ASP.NET Core docs","State":"closed","Body":"Provide a link to the docs site for ASP.NET Core.","Url":"https://github.com/dotnet/foundation/pull/139","RelatedDescription":"Closed or merged PR \"Add link to ASP.NET Core docs\" (#139)"},{"Id":"426666928","IsPullRequest":true,"CreatedAt":"2019-03-29T02:15:48","Actor":"BillWagner","Number":"140","RawContent":null,"Title":"add links to .NET docs","State":"closed","Body":"/cc @mairaw @scottaddie\r\n\r\nMaira, did I miss any project repos to tag?","Url":"https://github.com/dotnet/foundation/pull/140","RelatedDescription":"Closed or merged PR \"add links to .NET docs\" (#140)"},{"Id":"419205679","IsPullRequest":true,"CreatedAt":"2019-03-18T21:04:01","Actor":"MikeWilliams-UK","Number":"137","RawContent":null,"Title":"Add V3.1 repo and change documentation link","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/137","RelatedDescription":"Closed or merged PR \"Add V3.1 repo and change documentation link\" (#137)"},{"Id":"419897914","IsPullRequest":true,"CreatedAt":"2019-03-18T21:03:34","Actor":"devlead","Number":"138","RawContent":null,"Title":"Add Dave to cake.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/138","RelatedDescription":"Closed or merged PR \"Add Dave to cake.md\" (#138)"},{"Id":"391459677","IsPullRequest":false,"CreatedAt":"2019-03-08T19:00:06","Actor":"manne","Number":"123","RawContent":null,"Title":"Missing logo for Steeltoe","State":"closed","Body":"`https://brandfolder.com/pivotal-assets/attachments/ohxttd-7yxa60-clvf50/pivotal-assets-pivotal-genericfile.png` redirects to a sign in page\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L128-L130","Url":"https://github.com/dotnet/foundation/issues/123","RelatedDescription":"Closed issue \"Missing logo for Steeltoe\" (#123)"},{"Id":"417018694","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:32","Actor":"jkonicki","Number":"136","RawContent":null,"Title":"Fix logo and update team contributors","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/136","RelatedDescription":"Closed or merged PR \"Fix logo and update team contributors\" (#136)"},{"Id":"416428925","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"135","RawContent":null,"Title":"adds Umbraco logo","State":"closed","Body":"fixes #124 ","Url":"https://github.com/dotnet/foundation/pull/135","RelatedDescription":"Closed or merged PR \"adds Umbraco logo\" (#135)"},{"Id":"391459812","IsPullRequest":false,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"124","RawContent":null,"Title":"Missing logo for Umbraco","State":"closed","Body":"`https://fbcdn-profile-a.akamaihd.net/hprofile-ak-xap1/v/t1.0-1/p160x160/971596_519168901464439_566592989_n.png?oh=ce61e5b4cbd60c0d99c4164cbb05a434&oe=54F091C9&__gda__=1424472439_c9f76213a915bc2af88246f464f29e8b` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L149-L151","Url":"https://github.com/dotnet/foundation/issues/124","RelatedDescription":"Closed issue \"Missing logo for Umbraco\" (#124)"},{"Id":"416427614","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:45","Actor":"manne","Number":"134","RawContent":null,"Title":"adds the prism logo","State":"closed","Body":"fixes #126 ","Url":"https://github.com/dotnet/foundation/pull/134","RelatedDescription":"Closed or merged PR \"adds the prism logo\" (#134)"},{"Id":"391460225","IsPullRequest":false,"CreatedAt":"2019-03-08T18:58:44","Actor":"manne","Number":"126","RawContent":null,"Title":"No logo provided for Prism","State":"closed","Body":"Can/should this [image](http://prismlibrary.github.io/images/logo-prism-symbol@2x.png) be used?\r\n\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L155-L157","Url":"https://github.com/dotnet/foundation/issues/126","RelatedDescription":"Closed issue \"No logo provided for Prism\" (#126)"},{"Id":"416157860","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:26","Actor":"glennawatson","Number":"133","RawContent":null,"Title":"Add additional ReactiveUI organization projects.","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/133","RelatedDescription":"Closed or merged PR \"Add additional ReactiveUI organization projects.\" (#133)"},{"Id":"407251900","IsPullRequest":true,"CreatedAt":"2019-02-18T17:45:44","Actor":"Potapy4","Number":"132","RawContent":null,"Title":"Update MVVM project logo","State":"closed","Body":"Fixes dotnet/dotnetfoundation-website#72\r\nFixes #125","Url":"https://github.com/dotnet/foundation/pull/132","RelatedDescription":"Closed or merged PR \"Update MVVM project logo\" (#132)"},{"Id":"391459919","IsPullRequest":false,"CreatedAt":"2019-02-18T17:45:44","Actor":"manne","Number":"125","RawContent":null,"Title":"Missing logo for MVVM Light Toolkit","State":"closed","Body":"`https://raw.githubusercontent.com/paulcbetts/mvvmlight/master/Installer/InstallItems/html/MVVM_BlackText_190x147.png` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L137-L139","Url":"https://github.com/dotnet/foundation/issues/125","RelatedDescription":"Closed issue \"Missing logo for MVVM Light Toolkit\" (#125)"},{"Id":"406210463","IsPullRequest":true,"CreatedAt":"2019-02-18T17:44:39","Actor":"NextTurn","Number":"131","RawContent":null,"Title":"Replace http links with https links","State":"closed","Body":"Replace http links with https where possible - both returned 200 OK.","Url":"https://github.com/dotnet/foundation/pull/131","RelatedDescription":"Closed or merged PR \"Replace http links with https links\" (#131)"},{"Id":"399191617","IsPullRequest":true,"CreatedAt":"2019-02-02T11:04:15","Actor":"NextTurn","Number":"130","RawContent":null,"Title":"Update Open XML links","State":"closed","Body":"OpenXmlDeveloper.org was shut down long ago.\r\n\r\nThe content has been moved to EricWhite.com.","Url":"https://github.com/dotnet/foundation/pull/130","RelatedDescription":"Closed or merged PR \"Update Open XML links\" (#130)"},{"Id":"395863354","IsPullRequest":true,"CreatedAt":"2019-01-09T22:28:14","Actor":"ErikEJ","Number":"128","RawContent":null,"Title":"Update of EF description","State":"closed","Body":"@divega !","Url":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Closed or merged PR \"Update of EF description\" (#128)"},{"Id":"395901602","IsPullRequest":true,"CreatedAt":"2019-01-05T03:23:39","Actor":"MarcBruins","Number":"129","RawContent":null,"Title":"Update to absolute path","State":"closed","Body":"Update to absolute path so that when this list is copied the link will actually work","Url":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Closed or merged PR \"Update to absolute path\" (#129)"},{"Id":"395705579","IsPullRequest":true,"CreatedAt":"2019-01-04T00:22:42","Actor":"carloscds","Number":"127","RawContent":null,"Title":"Update documentation information","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/127","RelatedDescription":"Closed or merged PR \"Update documentation information\" (#127)"},{"Id":"391459057","IsPullRequest":true,"CreatedAt":"2019-01-03T04:47:09","Actor":"manne","Number":"122","RawContent":null,"Title":"targets the existing document","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/122","RelatedDescription":"Closed or merged PR \"targets the existing document\" (#122)"},{"Id":"384569679","IsPullRequest":true,"CreatedAt":"2019-01-03T04:46:31","Actor":"JamesNK","Number":"121","RawContent":null,"Title":"Add Newtonsoft.Json","State":"closed","Body":"// @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/121","RelatedDescription":"Closed or merged PR \"Add Newtonsoft.Json\" (#121)"},{"Id":"384212839","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:50","Actor":"stefanov-stefan","Number":"120","RawContent":null,"Title":"Added Telerik info","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/120","RelatedDescription":"Closed or merged PR \"Added Telerik info\" (#120)"},{"Id":"384212448","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:22","Actor":"stefanov-stefan","Number":"119","RawContent":null,"Title":"Added Telerik UWP proj","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/119","RelatedDescription":"Closed or merged PR \"Added Telerik UWP proj\" (#119)"},{"Id":"382378851","IsPullRequest":true,"CreatedAt":"2018-11-23T10:32:15","Actor":"pkgw","Number":"118","RawContent":null,"Title":"Update WorldWide Telescope","State":"closed","Body":"Some layout fixes, but the main change is that @pkgw is now the project director.","Url":"https://github.com/dotnet/foundation/pull/118","RelatedDescription":"Closed or merged PR \"Update WorldWide Telescope\" (#118)"}],"ResultType":"GitHubIssue"},"CoreCLR-Issues":{"Issues":[{"Id":"474892680","IsPullRequest":false,"CreatedAt":"2019-07-31T01:33:07","Actor":"scalablecory","Number":"25945","RawContent":null,"Title":"SIGSEGV is not transformed into NullReferenceException in WSL","State":"open","Body":"Under WSL (at least Ubuntu 18.04, and seemingly OpenSUSE 15) , SIGSEGV is not caught and transformed into a `NullReferenceException` as it is on other platforms.\r\n\r\nRepro:\r\n\r\n```c#\r\nclass Program\r\n{\r\n    static unsafe void Main(string[] args)\r\n    {\r\n        int* ptr = null;\r\n        Console.WriteLine(*ptr);\r\n    }\r\n}\r\n```\r\n\r\n```\r\ncory@conelso1:~/39732-smtp-segfault$ dotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview7-012821\r\n Commit:    6348f1068a\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  18.04\r\n OS Platform: Linux\r\n RID:         ubuntu.18.04-x64\r\n Base Path:   /usr/share/dotnet/sdk/3.0.100-preview7-012821/\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview7-27912-14\r\n  Commit:  4da6ee6450\r\n\r\n.NET Core SDKs installed:\r\n  3.0.100-preview7-012821 [/usr/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.App 3.0.0-preview7.19365.7 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview7-27912-14 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\ncory@conelso1:~/39732-smtp-segfault$ ./bin/Debug/netcoreapp3.0/39732-smtp-segfault\r\nSegmentation fault (core dumped)\r\n```\r\n\r\nFound during our investigation of https://github.com/dotnet/corefx/issues/39732\r\n\r\ncc @janvorli @wfurt ","Url":"https://github.com/dotnet/coreclr/issues/25945","RelatedDescription":"Open issue \"SIGSEGV is not transformed into NullReferenceException in WSL\" (#25945)"},{"Id":"474887283","IsPullRequest":false,"CreatedAt":"2019-07-31T01:07:28","Actor":"VincentBu","Number":"25944","RawContent":null,"Title":"Test failed: MonoTests.System.Drawing.Imaging.BmpCodecTest.Bitmap24bitData","State":"open","Body":"**Job:**\r\nhttps://mc.dot.net/#/user/coreclr-corefx/ci~2Fdotnet~2Fcoreclr~2Frefs~2Fheads~2Fmaster/test~2Ffunctional~2Fcorefx~2F/20190730.1/workItem/System.Drawing.Common.Tests/analysis/xunit/MonoTests.System.Drawing.Imaging.BmpCodecTest~2FBitmap24bitData\r\n\r\n**Failed tests:**\r\nMonoTests.System.Drawing.Imaging.BmpCodecTest.Bitmap24bitData\r\n\r\n**Log:**\r\n```\r\nAssert.Equal() Failure\r\nExpected: 173\r\nActual:   0\r\n```","Url":"https://github.com/dotnet/coreclr/issues/25944","RelatedDescription":"Open issue \"Test failed: MonoTests.System.Drawing.Imaging.BmpCodecTest.Bitmap24bitData\" (#25944)"},{"Id":"474377251","IsPullRequest":false,"CreatedAt":"2019-07-30T23:55:52","Actor":"iskiselev","Number":"25934","RawContent":null,"Title":"ProfilerAPI: RequestReJit hang when Microsoft.NET.Sdk.Web used","State":"closed","Body":"When profiler calls RequestReJit, if Microsoft.NET.Sdk.Web for instrumented project, application main thread hangs. .Net even will not call GetReJITParameters callback.\r\n\r\nIssue is reproducible on .Net Core 3 Preview 7, windows x64.\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview7-012821\r\n Commit:    6348f1068a\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview7-012821\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview7-27912-14\r\n  Commit:  4da6ee6450\r\n\r\n.NET Core SDKs installed:\r\n  2.1.701 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.101 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.301 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview7-012821 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview7.19365.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview7-27912-14 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview7-27912-14 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n```\r\n\r\nI've prepared repro: https://github.com/iskiselev/ProfilerReJitHang (see readme.md for instructions).\r\nIssue is not reproducible when \"Microsoft.NET.Sdk\" is used. It is not reproducible on .NET Core 2.x also.","Url":"https://github.com/dotnet/coreclr/issues/25934","RelatedDescription":"Closed issue \"ProfilerAPI: RequestReJit hang when Microsoft.NET.Sdk.Web used\" (#25934)"},{"Id":"474865997","IsPullRequest":false,"CreatedAt":"2019-07-30T23:27:16","Actor":"fadimounir","Number":"25943","RawContent":null,"Title":"Add generic method instantiation information to ETW events","State":"open","Body":"Today, the ETW events for jitting and perf traces doesn't contain the generic method instantiation type arguments. Example\r\n`System.Runtime.CompilerServices.AsyncTaskMethodBuilder.AwaitUnsafeOnCompleted(!!0& !!1&)`\r\n\r\nThis should have been something like:\r\n`System.Runtime.CompilerServices.AsyncTaskMethodBuilder.AwaitUnsafeOnCompleted<bool,int>(!!0& !!1&)`\r\n\r\nFixing this requires some care because we need to be able to diff 2.x/3.0 traces to traces with generic instantiation info (when the bug gets fixed).\r\n\r\nWe need to put a switch in the runtime and default it to the new format.  ","Url":"https://github.com/dotnet/coreclr/issues/25943","RelatedDescription":"Open issue \"Add generic method instantiation information to ETW events\" (#25943)"},{"Id":"474860559","IsPullRequest":true,"CreatedAt":"2019-07-30T23:04:58","Actor":"jashook","Number":"25942","RawContent":null,"Title":"[TEST] Test vs 2019 windows container build","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/25942","RelatedDescription":"Open PR \"[TEST] Test vs 2019 windows container build\" (#25942)"},{"Id":"474850903","IsPullRequest":true,"CreatedAt":"2019-07-30T22:30:33","Actor":"RussKeldorph","Number":"25941","RawContent":null,"Title":"Consistent telm. type for crossgen-comparison job","State":"open","Body":"For some reason our telemetry prefers a slash appended to the HelixType parameter.","Url":"https://github.com/dotnet/coreclr/pull/25941","RelatedDescription":"Open PR \"Consistent telm. type for crossgen-comparison job\" (#25941)"},{"Id":"474845782","IsPullRequest":true,"CreatedAt":"2019-07-30T22:25:55","Actor":"jcagme","Number":"25940","RawContent":null,"Title":"RestoreSources cleanup","State":"closed","Body":"Remove `RestoreSources` from Versions.props in order to complete [step 2](https://github.com/dotnet/arcade/blob/master/Documentation/RestoreSourcesUpdateStatus.md#part-2)","Url":"https://github.com/dotnet/coreclr/pull/25940","RelatedDescription":"Closed or merged PR \"RestoreSources cleanup\" (#25940)"},{"Id":"474832997","IsPullRequest":true,"CreatedAt":"2019-07-30T21:37:54","Actor":"dotnet-maestro-bot","Number":"25939","RawContent":null,"Title":"[automated] Merge branch 'release/2.1' => 'release/2.2'","State":"open","Body":"I detected changes in the release/2.1 branch which have not been merged yet to release/2.2. I'm a robot and am configured to help you automatically keep release/2.2 up to date, so I've opened this PR.\r\n\r\nThis PR merges commits made on release/2.1 by the following committers:\n\n* @mmitche\n* @dotnet-maestro-bot\n* @wtgodbe\n* @jashook\r\n\r\n## Instructions for merging from UI\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, complete this PR by creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nIf this repo does not allow creating merge commits from the GitHub UI, use command line instructions.\r\n\r\n## Instructions for merging via command line\r\n\r\nRun these commands to merge this pull request from the command line.\r\n\r\n``` sh\r\ngit fetch\r\ngit checkout release/2.1\r\ngit pull --ff-only\r\ngit checkout release/2.2\r\ngit pull --ff-only\r\ngit merge --no-ff release/2.1\r\n\r\n# If there are merge conflicts, resolve them and then run git merge --continue to complete the merge\r\n# Pushing the changes to the PR branch will re-trigger PR validation.\r\ngit push https://github.com/dotnet-maestro-bot/coreclr HEAD:merge/release/2.1-to-release/2.2\r\n```\r\n\r\n<details>\r\n<summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit push git@github.com:dotnet-maestro-bot/coreclr HEAD:merge/release/2.1-to-release/2.2\r\n```\r\n\r\n</details>\r\n\r\n\r\nAfter PR checks are complete push the branch\r\n```\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging. You can do this [using GitHub][resolve-github] or using the [command line][resolve-cli].\r\n\r\n[resolve-github]: https://help.github.com/articles/resolving-a-merge-conflict-on-github/\r\n[resolve-cli]: https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/\r\n\r\n## Instructions for updating this pull request\r\n\r\nContributors to this repo have permission update this pull request by pushing to the branch 'merge/release/2.1-to-release/2.2'. This can be done to resolve conflicts or make other changes to this pull request before it is merged.\r\n\r\n```\r\ngit checkout -b merge/release/2.1-to-release/2.2 release/2.2\r\ngit pull https://github.com/dotnet-maestro-bot/coreclr merge/release/2.1-to-release/2.2\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push https://github.com/dotnet-maestro-bot/coreclr merge/release/2.1-to-release/2.2\r\n```\r\n\r\n<details>\r\n    <summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit checkout -b merge/release/2.1-to-release/2.2 release/2.2\r\ngit pull git@github.com:dotnet-maestro-bot/coreclr merge/release/2.1-to-release/2.2\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push git@github.com:dotnet-maestro-bot/coreclr merge/release/2.1-to-release/2.2\r\n```\r\n\r\n</details>\r\n\r\nContact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.\r\n","Url":"https://github.com/dotnet/coreclr/pull/25939","RelatedDescription":"Open PR \"[automated] Merge branch 'release/2.1' => 'release/2.2'\" (#25939)"},{"Id":"474787382","IsPullRequest":true,"CreatedAt":"2019-07-30T21:36:15","Actor":"dotnet-maestro-bot","Number":"25937","RawContent":null,"Title":"Update BuildTools, CoreClr, CoreFx to preview1-04230-02, servicing-27817-03, servicing-27818-02, respectively (release/2.2)","State":"closed","Body":"/cc @dotnet/maestro-reviewers-core","Url":"https://github.com/dotnet/coreclr/pull/25937","RelatedDescription":"Closed or merged PR \"Update BuildTools, CoreClr, CoreFx to preview1-04230-02, servicing-27817-03, servicing-27818-02, respectively (release/2.2)\" (#25937)"},{"Id":"474777965","IsPullRequest":true,"CreatedAt":"2019-07-30T21:34:48","Actor":"dotnet-maestro-bot","Number":"25936","RawContent":null,"Title":"Update BuildTools to rc1-04230-01 (release/2.1)","State":"closed","Body":"/cc @dotnet/maestro-reviewers-core","Url":"https://github.com/dotnet/coreclr/pull/25936","RelatedDescription":"Closed or merged PR \"Update BuildTools to rc1-04230-01 (release/2.1)\" (#25936)"},{"Id":"474802240","IsPullRequest":false,"CreatedAt":"2019-07-30T20:30:04","Actor":"jakobbotsch","Number":"25938","RawContent":null,"Title":"ARM: Investigate \"incoming arg area\" logic for arg passing during fast tail calls","State":"closed","Body":"A comment in the source mentions that, on ARM, we cannot assume that stack arguments come in order of offset:\r\nhttps://github.com/dotnet/coreclr/blob/39f207ad8babe677029ddc2c72714a9959da2475/src/jit/lclvars.cpp#L5118-L5143\r\n\r\nHowever fast tail calls make this assumption when writing outgoing args:\r\nhttps://github.com/dotnet/coreclr/blob/39f207ad8babe677029ddc2c72714a9959da2475/src/jit/codegenarmarch.cpp#L701-L715\r\n\r\nhttps://github.com/dotnet/coreclr/blob/39f207ad8babe677029ddc2c72714a9959da2475/src/jit/codegencommon.cpp#L10280-L10325\r\n\r\nPresumably `getFirstArgWithStackSlot` needs to be renamed and should somehow find the arg at the first stack offset instead.\r\n\r\ncc @jashook ","Url":"https://github.com/dotnet/coreclr/issues/25938","RelatedDescription":"Closed issue \"ARM: Investigate \"incoming arg area\" logic for arg passing during fast tail calls\" (#25938)"},{"Id":"474369968","IsPullRequest":false,"CreatedAt":"2019-07-30T15:23:06","Actor":"Ivan-Kouznetsov","Number":"25933","RawContent":null,"Title":"Bug in File.WriteAllLines wherein it writes an extra newline","State":"closed","Body":"There is a bug in File.WriteAllLines wherein it writes an extra newline at the end.\r\nIt's easy to reproduce: \r\n\r\n```\r\n[TestMethod]\r\npublic void WriteAllLines()\r\n{\r\n            string noEmptyLineAtTheEnd = \"Hello\" + Environment.NewLine + \"World\";            \r\n\r\n            File.WriteAllText(\"File1.txt\", noEmptyLineAtTheEnd);            \r\n            File.WriteAllLines(\"File2.txt\", File.ReadAllLines(\"File1.txt\"));\r\n\r\n            Assert.AreEqual(File.ReadAllText(\"File1.txt\").EndsWith(Environment.NewLine), File.ReadAllText(\"File2.txt\").EndsWith(Environment.NewLine));\r\n            // result:   Assert.AreEqual failed. Expected:<False>. Actual:<True>. \r\n}\r\n```\r\n\r\nA reasonable person could not be faulted for expecting that reading all lines and then writing all lines would produce a copy with the same number of lines, it doesn't.  ","Url":"https://github.com/dotnet/coreclr/issues/25933","RelatedDescription":"Closed issue \"Bug in File.WriteAllLines wherein it writes an extra newline\" (#25933)"},{"Id":"474412457","IsPullRequest":false,"CreatedAt":"2019-07-30T07:40:30","Actor":"mateusz-osojca","Number":"25935","RawContent":null,"Title":"Gen2 Collections happening without Gen1 Collections","State":"closed","Body":"We are using .NET 4.7.2 and developing WPF application (GC workstation mode). Once every 30seconds we have seen quite big CPU load on our process. What we discovered is that during that, GC jumps in with the collection of Generation 2. We tried to investigate what exactly is happening (and what is the root cause of that, since our application is not executing any user code at that time...), and what we see in GC stats is that we are getting only collections on GEN 0 and Gen2. I could explain that to myself if that would be triggered by Large Allocations but it is Small allocations that is actually happening (at least up to PerFiew stats). \r\nThe weird thing is that we don't see  (in the dumps compare in the PerfView)any allocations of our types, all we get is the allocations of internal .NET / WPF types (at least to our knowledge)\r\nHere You can see the GC Stats  ()All GC Events):\r\n\r\n![image](https://user-images.githubusercontent.com/48021601/62106615-f28a2b00-b2a5-11e9-801a-b74fa7749e77.png)\r\n\r\nGC Rollup By Generation: \r\n![image](https://user-images.githubusercontent.com/48021601/62106662-1483ad80-b2a6-11e9-9c0a-c5c806e97d5b.png)\r\n\r\nCondemned reasons for GC:\r\n![image](https://user-images.githubusercontent.com/48021601/62106693-28c7aa80-b2a6-11e9-9d65-b9d9d0e8b55b.png)\r\n\r\nFinalized Object Counts:\r\n![image](https://user-images.githubusercontent.com/48021601/62106718-367d3000-b2a6-11e9-924d-b3ed9d36dc19.png)\r\n\r\nAnd the PerGeneration GC Events from Excel:\r\n\r\n![image](https://user-images.githubusercontent.com/48021601/62107905-f4092280-b2a8-11e9-94b2-f9af71e9f8ed.png)\r\n\r\nSince this bug was discovered quite recently and also few months ago we upgraded the .NET to 4.7.2 (from 4.6) we tried to downgrade to 4.6 but still having the same issue. \r\n\r\nCould You help out what could be the root-cause? Maybe even exaplnation of how is it possible to collect Gen2 withoug Gen1? I guess it could be those finalizable objects but the Gen1 would have to happen anyway and GC would see that some of the objects are \"Finnalizable\" so it would land in Que for finalization in Gen 2...? Or we are missing something here?","Url":"https://github.com/dotnet/coreclr/issues/25935","RelatedDescription":"Closed issue \"Gen2 Collections happening without Gen1 Collections\" (#25935)"},{"Id":"474352347","IsPullRequest":true,"CreatedAt":"2019-07-30T03:30:10","Actor":"jakobbotsch","Number":"25932","RawContent":null,"Title":"[WIP] Remove tailcall limitations on unix64 and arm64","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/25932","RelatedDescription":"Open PR \"[WIP] Remove tailcall limitations on unix64 and arm64\" (#25932)"},{"Id":"474324341","IsPullRequest":false,"CreatedAt":"2019-07-30T01:18:29","Actor":"VincentBu","Number":"25931","RawContent":null,"Title":"Test failed: baseservices_threading._generics_WaitCallback_thread22_thread22_._generics_WaitCallback_thread22_thread22_sh","State":"open","Body":"**Job:**\r\nhttps://mc.dot.net/#/user/coreclr-gcstress-extra/ci~2Fdotnet~2Fcoreclr~2Frefs~2Fheads~2Fmaster/test~2Ffunctional~2Fcli~2F/20190728.1/workItem/baseservices.threading.generics/analysis/xunit/baseservices_threading._generics_WaitCallback_thread22_thread22_~2F_generics_WaitCallback_thread22_thread22_sh\r\n\r\n**Failed tests:**\r\nbaseservices_threading._generics_WaitCallback_thread22_thread22_._generics_WaitCallback_thread22_thread22_sh\r\n\r\n**Log:**\r\n```\r\n/home/helixbot/work/25909902-6c69-46a1-8acb-333a2920d9e4/Work/8f025a06-d3a1-44c4-aa64-fe14208461b8/Exec/baseservices/threading/generics/WaitCallback/thread22/thread22.sh: line 252:  3582 Segmentation fault      (core dumped) $LAUNCHER $ExePath \\\"${CLRTestExecutionArguments[@]}\\\"\r\n\r\nReturn code:      1\r\nRaw output file:      /home/helixbot/work/25909902-6c69-46a1-8acb-333a2920d9e4/Work/8f025a06-d3a1-44c4-aa64-fe14208461b8/Exec/baseservices/threading/Reports/baseservices.threading/generics/WaitCallback/thread22/thread22.output.txt\r\nRaw output:\r\nBEGIN EXECUTION\r\n/home/helixbot/work/25909902-6c69-46a1-8acb-333a2920d9e4/Payload/corerun thread22.exe ''\r\nExpected: 100\r\nActual: 139\r\nEND EXECUTION - FAILED\r\nTest Harness Exitcode is : 1\r\nTo run the test:\r\n> set CORE_ROOT=/home/helixbot/work/25909902-6c69-46a1-8acb-333a2920d9e4/Payload\r\n> /home/helixbot/work/25909902-6c69-46a1-8acb-333a2920d9e4/Work/8f025a06-d3a1-44c4-aa64-fe14208461b8/Exec/baseservices/threading/generics/WaitCallback/thread22/thread22.sh\r\nExpected: True\r\nActual:   False\r\n```","Url":"https://github.com/dotnet/coreclr/issues/25931","RelatedDescription":"Open issue \"Test failed: baseservices_threading._generics_WaitCallback_thread22_thread22_._generics_WaitCallback_thread22_thread22_sh\" (#25931)"},{"Id":"474302211","IsPullRequest":true,"CreatedAt":"2019-07-29T23:32:54","Actor":"jkoritzinsky","Number":"25930","RawContent":null,"Title":"Make ILAsm and ILDasm packages standalone. Clean up Microsoft.NET.Sdk.IL","State":"open","Body":"Now that ILAsm and ILDasm are standalone as of #25144, this PR updates the Microsoft.NETCore.ILAsm and Microsoft.NETCore.ILDasm packages to not depend on the CoreCLR package.\r\n\r\nAdditionally, this PR also cleans up the Microsoft.NET.Sdk.IL sdk since standalone ILAsm and ILDasm allows a lot of the MSBuild logic to be removed.\r\n","Url":"https://github.com/dotnet/coreclr/pull/25930","RelatedDescription":"Open PR \"Make ILAsm and ILDasm packages standalone. Clean up Microsoft.NET.Sdk.IL\" (#25930)"},{"Id":"474289550","IsPullRequest":false,"CreatedAt":"2019-07-29T22:44:49","Actor":"sdmaclea","Number":"25929","RawContent":null,"Title":"Investigate whether unwind is properly handling floating point registers","State":"open","Body":"It is not clear whether unwind is properly handling floating point registers during unwind.\r\n\r\nThis may impact examination of enregistered floating point registers in higher stack frames.","Url":"https://github.com/dotnet/coreclr/issues/25929","RelatedDescription":"Open issue \"Investigate whether unwind is properly handling floating point registers\" (#25929)"},{"Id":"474278034","IsPullRequest":true,"CreatedAt":"2019-07-29T22:05:38","Actor":"wtgodbe","Number":"25928","RawContent":null,"Title":"Update branding to preview9","State":"open","Body":"We should merge this once a final build is declared for preview8.\r\n\r\nCC @RussKeldorph @mmitche ","Url":"https://github.com/dotnet/coreclr/pull/25928","RelatedDescription":"Open PR \"Update branding to preview9\" (#25928)"},{"Id":"474260670","IsPullRequest":true,"CreatedAt":"2019-07-29T21:16:36","Actor":"jashook","Number":"25927","RawContent":null,"Title":"Force runtest to run with tests build on same host","State":"open","Body":"This now invalidates running runtest.py on an OS/Arch that is not the same as the machine it is built on. We have had the requirement that tests are built on the same machine type for quite some time now, and deprecated the usage of running Windows built tests on unix. This will officially end support for that scenario.","Url":"https://github.com/dotnet/coreclr/pull/25927","RelatedDescription":"Open PR \"Force runtest to run with tests build on same host\" (#25927)"},{"Id":"474257049","IsPullRequest":true,"CreatedAt":"2019-07-29T21:07:17","Actor":"briansull","Number":"25926","RawContent":null,"Title":"Fixes Issue #20262 for CoreCLR 5.0","State":"open","Body":"Disassembler:  ildasm/dasm.cpp\r\n\r\n In the CoreCLR with reference assemblies and redirection it is more difficult to determine if\r\n a particular Assembly is the System assembly, like mscorlib.dll is for the Desktop CLR.\r\n In the CoreCLR runtimes, the System assembly can be System.Private.CoreLib.dll, System.Runtime.dll\r\n or netstandard.dll and in the future a different Assembly name could be used.\r\n We now determine the identity of the System assembly by querying if the Assembly defines the\r\n well known type System.Object as that type must be defined by the System assembly\r\n If this type is defined then we will output the \".mscorlib\" directive to indicate that this\r\n assembly is the System assembly.\r\n\r\nAssembler:  ilasm/assembler.cpp\r\n\r\n In Assembler:GetBaseAsmRef() add a check for System.Private.CoreLib as the System or Base assembly.","Url":"https://github.com/dotnet/coreclr/pull/25926","RelatedDescription":"Open PR \"Fixes Issue #20262 for CoreCLR 5.0\" (#25926)"},{"Id":"474193949","IsPullRequest":true,"CreatedAt":"2019-07-29T18:30:34","Actor":"jashook","Number":"25925","RawContent":null,"Title":"Publish built tests","State":"open","Body":"This will allow us to publish the tests that are built during the azure dev ops run.","Url":"https://github.com/dotnet/coreclr/pull/25925","RelatedDescription":"Open PR \"Publish built tests\" (#25925)"},{"Id":"474165169","IsPullRequest":false,"CreatedAt":"2019-07-29T17:19:03","Actor":"jorive","Number":"25924","RawContent":null,"Title":"[crossgen] Test failed: tracing_eventpipe._buffersize_buffersize_buffersize_._buffersize_buffersize_buffersize_cmd","State":"open","Body":"From this comment: https://github.com/dotnet/coreclr/issues/25815#issuecomment-515373472\r\n\r\n**Message**\r\n```log\r\n\r\ncmdLine:C:\\\\dotnetbuild\\\\work\\\\b32ed47f-3a4a-4cd8-99a5-035b9d2db11c\\\\Work\\\\b883f6c8-423d-49c3-be11-0d7517474875\\\\Exec\\\\tracing\\\\eventpipe\\\\buffersize\\\\buffersize\\\\buffersize.cmd Timed Out\r\n\r\nReturn code:      -100\r\nRaw output file:      C:\\\\dotnetbuild\\\\work\\\\b32ed47f-3a4a-4cd8-99a5-035b9d2db11c\\\\Work\\\\b883f6c8-423d-49c3-be11-0d7517474875\\\\Exec\\\\tracing\\\\eventpipe\\\\Reports\\\\tracing.eventpipe\\\\buffersize\\\\buffersize\\\\buffersize.output.txt\r\nRaw output:\r\nBEGIN EXECUTION\r\n        1 file(s) copied.\r\n\\\" C:\\\\dotnetbuild\\\\work\\\\b32ed47f-3a4a-4cd8-99a5-035b9d2db11c\\\\Payload\\\\crossgen.exe\\\"  /Platform_Assemblies_Paths C:\\\\dotnetbuild\\\\work\\\\b32ed47f-3a4a-4cd8-99a5-035b9d2db11c\\\\Payload;C:\\\\dotnetbuild\\\\work\\\\b32ed47f-3a4a-4cd8-99a5-035b9d2db11c\\\\Work\\\\b883f6c8-423d-49c3-be11-0d7517474875\\\\Exec\\\\tracing\\\\eventpipe\\\\buffersize\\\\buffersize\\\\IL;C:\\\\dotnetbuild\\\\work\\\\b32ed47f-3a4a-4cd8-99a5-035b9d2db11c\\\\Work\\\\b883f6c8-423d-49c3-be11-0d7517474875\\\\Exec\\\\tracing\\\\eventpipe\\\\buffersize\\\\buffersize /in buffersize.org /out buffersize.exe\r\nMicrosoft (R) CoreCLR Native Image Generator - Version 4.5.30319.0\r\nCopyright (c) Microsoft Corporation.  All rights reserved.\r\n\r\nNative image buffersize.exe generated successfully.\r\n \\\"C:\\\\dotnetbuild\\\\work\\\\b32ed47f-3a4a-4cd8-99a5-035b9d2db11c\\\\Payload\\\\corerun.exe\\\" buffersize.exe \r\nTEST STARTING\r\nTEST PASSED!\r\nTEST STARTING\r\nTEST PASSED!\r\n\r\ncmdLine:C:\\\\dotnetbuild\\\\work\\\\b32ed47f-3a4a-4cd8-99a5-035b9d2db11c\\\\Work\\\\b883f6c8-423d-49c3-be11-0d7517474875\\\\Exec\\\\tracing\\\\eventpipe\\\\buffersize\\\\buffersize\\\\buffersize.cmd Timed Out\r\nTest Harness Exitcode is : -100\r\nTo run the test:\r\n> set CORE_ROOT=C:\\\\dotnetbuild\\\\work\\\\b32ed47f-3a4a-4cd8-99a5-035b9d2db11c\\\\Payload\r\n> C:\\\\dotnetbuild\\\\work\\\\b32ed47f-3a4a-4cd8-99a5-035b9d2db11c\\\\Work\\\\b883f6c8-423d-49c3-be11-0d7517474875\\\\Exec\\\\tracing\\\\eventpipe\\\\buffersize\\\\buffersize\\\\buffersize.cmd\r\nExpected: True\r\nActual:   False\r\n```\r\n**Stack Trace :**\r\n```log\r\n   at tracing_eventpipe._buffersize_buffersize_buffersize_._buffersize_buffersize_buffersize_cmd() in F:\\workspace.1\\_work\\1\\s\\bin\\tests\\Windows_NT.x64.Release\\TestWrappers\\tracing.eventpipe\\tracing.eventpipe.XUnitWrapper.cs:line 142\r\n```\r\n\r\n**Details**\r\nhttps://mc.dot.net/#/product/netcore/master/source/official~2Fdotnet~2Fcoreclr~2Frefs~2Fheads~2Fmaster/type/test~2Ffunctional~2Fr2r~2Fcli~2F/build/20190725.2/workItem/PayloadGroup0/analysis/xunit/tracing_eventpipe._buffersize_buffersize_buffersize_~2F_buffersize_buffersize_buffersize_cmd","Url":"https://github.com/dotnet/coreclr/issues/25924","RelatedDescription":"Open issue \"[crossgen] Test failed: tracing_eventpipe._buffersize_buffersize_buffersize_._buffersize_buffersize_buffersize_cmd\" (#25924)"},{"Id":"473955655","IsPullRequest":false,"CreatedAt":"2019-07-29T09:48:21","Actor":"k15tfu","Number":"25923","RawContent":null,"Title":"Support asynchronous stack walk on Linux/MacOs","State":"open","Body":"_Originally posted by @davmason in https://github.com/dotnet/coreclr/issues/25676#issuecomment-512555568_\r\n\r\n> @k15tfu In some other issue I mentioned that the only supported DoStackSnapshot scenarios are either after calling ICorProfilerInfo10::SuspendRuntime or doing a synchronous stack walk on the same thread.\r\n> \r\n> The docs that you are referring to were written for Windows a long time ago, and we don't have the support for asynchronous stack walking yet on Linux. It is something I would like to get working in a future release, but for now I don't think there is a solution that allows this to work as you are attempting on Linux.\r\n> \r\n> [...]\r\n> \r\n> If you can tell us why you are trying to get a stack from a signal handler, we might be able to provide a work around that avoids the problem.\r\n\r\n_Originally posted by @k15tfu in https://github.com/dotnet/coreclr/issues/25676#issuecomment-513143826_\r\n\r\n> @davmason\r\n> \r\n> [...]\r\n> \r\n> > or doing a synchronous stack walk on the same thread\r\n> \r\n> Did you mean doing it not only being in the same thread, but also from one of the profiler callbacks? Just to be on the same page =)\r\n> \r\n> > and we don't have the support for asynchronous stack walking yet on Linux.\r\n> \r\n> Does it mean it may not work, or it definitely doesn't work on Linux? Because I don't see other critical issues at the moment (except one more issue I'll report a bit later). Do you know other issues I will face? =)\r\n> \r\n> > If you can tell us why you are trying to get a stack from a signal handler, we might be able to provide a work around that avoids the problem.\r\n> \r\n> I do a sampling profiler. On Windows I use SuspendThread() and GetThreadContext() and then unwind the stack. But on Linux I cannot neither suspend it, nor get another thread's context, thus usually such profilers are implemented in Linux using signals. Honestly, I would not want to use ICorProfilerInfo10::SuspendRuntime() because I'm sure it will affect the whole app much more significantly than signal handlers.\r\n> \r\n> [...]\r\n\r\n_Originally posted by @janvorli in https://github.com/dotnet/coreclr/issues/25676#issuecomment-513160482_\r\n\r\n> Btw, it seems to me that on Linux, you can simulate the SuspendThread / GetThreadContext using a signal handler in an async signal safe manner. Basically the way I've mentioned in a response to another issue that you've created.\r\n> \r\n> * From one thread, send a signal to all other threads\r\n> * In the signal handler for that signal, save the signal context in a way that will allow the thread initiating the \"suspension\" read it later (e.g have a lock free global stack of references to the contexts using e.g. a singly linked list as an underlying structure) and then synchronize with the initiating thread using a pipe or some other way that is async signal safe (if using pipe, send a byte into the pipe and then read from it. The initiating thread writes into the pipe when it is done walking the stacks)\r\n> * When the initiating thread completes reading from pipes of all the threads, it knows all threads are waiting. So it can read the contexts they have captured and it is safe to start walking their stacks.\r\n\r\n_Originally posted by @davmason in https://github.com/dotnet/coreclr/issues/25676#issuecomment-513405905_\r\n\r\n> > > or doing a synchronous stack walk on the same thread\r\n> > \r\n> > \r\n> > Did you mean doing it not only being in the same thread, but also from one of the profiler callbacks? Just to be on the same page =)\r\n> \r\n> It should be done within the profiler callback to be safe, it would generally work anywhere but you might run in to the same stub issue if not within a profiler callback.\r\n> \r\n> > > and we don't have the support for asynchronous stack walking yet on Linux.\r\n> > \r\n> > \r\n> > Does it mean it may not work, or it definitely doesn't work on Linux? Because I don't see other critical issues at the moment (except one more issue I'll report a bit later). Do you know other issues I will face? =)\r\n> \r\n> It's completely untested on our end. This might be the only issue or it might not be. I don't know of any issues already, but I would not be surprised to find out there are more.\r\n> \r\n> > I do a sampling profiler. On Windows I use SuspendThread() and GetThreadContext() and then unwind the stack. But on Linux I cannot neither suspend it, nor get another thread's context, thus usually such profilers are implemented in Linux using signals. Honestly, I would not want to use ICorProfilerInfo10::SuspendRuntime() because I'm sure it will affect the whole app much more significantly than signal handlers.\r\n> \r\n> ICorProfilerInfo10::SuspendRuntime was intended to be used by sampling profilers. It should not be much overhead at all, we use a very similar approach internally when doing sampling for EventPipe (see https://github.com/dotnet/coreclr/blob/master/src/vm/sampleprofiler.cpp#L169-L208). ICorProfilerInfo10 is basically just a shim that calls ThreadSuspend::SuspendEE. If you have evidence that this approach is too much overhead I would love to hear it.\r\n\r\n_Originally posted by @k15tfu in https://github.com/dotnet/coreclr/issues/25676#issuecomment-514527091_\r\n\r\n> @janvorli Yes, we surely can emulate it like this. I remember that we have already discussed it in another issue, thanks again for that =) But it doesn't help me to avoid this problem, because the root case is that I use the context taken from signal handler (I simply cannot get the context any other way) when the thread can be stopped at an arbitrary moment.\r\n> \r\n> [...]\r\n> \r\n> @davmason\r\n> \r\n> > In some other issue I mentioned that the only supported DoStackSnapshot scenarios are either after calling ICorProfilerInfo10::SuspendRuntime or doing a synchronous stack walk on the same thread.\r\n> \r\n> I'm not sure what \"the only supported scenarios\" means. The others are not supported yet (but you are ready to work on it), or they are prohibited and will never be supported on Linux?\r\n> \r\n> > It's completely untested on our end. This might be the only issue or it might not be. I don't know of any issues already, but I would not be surprised to find out there are more.\r\n> \r\n> Okay, I get you, I'll let you know if I find anything else.\r\n> \r\n> > ICorProfilerInfo10 is basically just a shim that calls ThreadSuspend::SuspendEE. If you have evidence that this approach is too much overhead I would love to hear it.\r\n> \r\n> We do not stop all managed threads at the same time. To the contrary, we sequentially stop each thread, take a snapshot, resume it, and then repeat it for the remaining threads. So from this point of view, using of OS level feature _signals_ to temporarily \"interrupt\" the thread (like the system does it all the time during scheduling) and ask it to do some task for us seems to be more affective than stopping the whole CLR runtime.\r\n\r\n_Originally posted by @davmason in https://github.com/dotnet/coreclr/issues/25676#issuecomment-515629550_\r\n\r\n> > I'm not sure what \"the only supported scenarios\" means. The others are not supported yet (but you are ready to work on it), or they are prohibited and will never be supported on Linux?\r\n> \r\n> 3.0 is past the point where I can introduce new features so all I can say at this point is that for 3.0 the only scenarios that we have tested and can support fully are the ones I mentioned. Other ones (like the signal scenario you are attempting) will need some level of code changes and testing, and will have to be evaluated against everything else for future releases. Planning for 5.0 hasn't happened yet, so I do not intend to say they will be forbidden but I can't guarantee that they will fully supported either. It seems like a reasonable feature request, whether or not it happens will depend on the cost and what other work happens in the 5.0 timeframe.\r\n> \r\n> > We do not stop all managed threads at the same time. To the contrary, we sequentially stop each thread, take a snapshot, resume it, and then repeat it for the remaining threads. So from this point of view, using of OS level feature _signals_ to temporarily \"interrupt\" the thread (like the system does it all the time during scheduling) and ask it to do some task for us seems to be more affective than stopping the whole CLR runtime.\r\n> \r\n> It probably is more performant to do sampling the way you are attempting, but you have to weigh that against the difficulty of the work and the number of workarounds necessary. I am trying to be as honest as possible that you will run in to issues and we won't be able to work around some of them.\r\n\r\n","Url":"https://github.com/dotnet/coreclr/issues/25923","RelatedDescription":"Open issue \"Support asynchronous stack walk on Linux/MacOs\" (#25923)"},{"Id":"473802161","IsPullRequest":false,"CreatedAt":"2019-07-29T09:11:32","Actor":"brainode","Number":"25920","RawContent":null,"Title":"NullReferenceException in Hello World DateTime.","State":"closed","Body":"# Issue Title\r\nI have OpenSUSE Tumbleweed with Version 2.2.401 and Commit 729b316c13.\r\n\r\nWhen i trying to run Hello World sample:\r\n```using System;\r\n\r\nnamespace cons\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            Console.WriteLine(\"Hello World!\");\r\n            Console.WriteLine(\"The current time is \" + DateTime.Now);\r\n        }\r\n    }\r\n}\r\n```\r\nI've got an error:\r\n```\r\nAn unhandled exception of type 'System.NullReferenceException' occurred in System.Private.CoreLib.dll: 'Object reference not set to an instance of an object.'\r\n   at System.Globalization.CalendarData.NormalizeDatePattern(String input)\r\n   at System.Globalization.CalendarData.LoadCalendarDataFromSystem(String localeName, CalendarId calendarId)\r\n   at System.Globalization.CalendarData..ctor(String localeName, CalendarId calendarId, Boolean bUseUserOverrides)\r\n   at System.Globalization.CultureData.GetCalendar(CalendarId calendarId)\r\n   at System.Globalization.CultureData.DateSeparator(CalendarId calendarId)\r\n   at System.Globalization.DateTimeFormatInfo.InitializeOverridableProperties(CultureData cultureData, CalendarId calendarId)\r\n   at System.Globalization.CultureInfo.get_DateTimeFormat()\r\n   at System.Globalization.DateTimeFormatInfo.get_CurrentInfo()\r\n   at System.DateTimeFormat.Format(DateTime dateTime, String format, IFormatProvider provider, TimeSpan offset)\r\n   at System.DateTimeFormat.Format(DateTime dateTime, String format, IFormatProvider provider)\r\n   at System.String.Concat(Object arg0, Object arg1)\r\n   at cons.Program.Main(String[] args) in /home/rusbaron/Tmp/cs/cons/Program.cs:line 10\r\n```\r\nWhat's wrong?\r\n","Url":"https://github.com/dotnet/coreclr/issues/25920","RelatedDescription":"Closed issue \"NullReferenceException in Hello World DateTime.\" (#25920)"},{"Id":"473828126","IsPullRequest":false,"CreatedAt":"2019-07-29T03:08:52","Actor":"AriNuer","Number":"25922","RawContent":null,"Title":"Test failure: System.Diagnostics.Tests.EventLogTraceListenerTests/TraceEventFormatAndParams(format: \\\"This is a weird {0}{1}{2} format that but args len\\\"..., parameters: []) ","State":"open","Body":"Test `System.Diagnostics.Tests.EventLogTraceListenerTests/TraceEventFormatAndParams(format: \\\"This is a weird {0}{1}{2} format that but args len\\\"..., parameters: []) ` has failed.\r\n\r\n```\r\nGet Repro environment \r\nUnhandled Exception of Type System.ComponentModel.Win32Exception\r\nMessage :\r\nSystem.ComponentModel.Win32Exception : A device attached to the system is not functioning.\r\nStack Trace :\r\n   at System.Diagnostics.EventLogInternal.Clear() in /_/src/System.Diagnostics.EventLog/src/System/Diagnostics/EventLogInternal.cs:line 488\r\n   at System.Diagnostics.EventLog.Clear() in /_/src/System.Diagnostics.EventLog/src/System/Diagnostics/EventLog.cs:line 228\r\n   at System.Diagnostics.EventLog.Delete(String logName, String machineName) in /_/src/System.Diagnostics.EventLog/src/System/Diagnostics/EventLog.cs:line 404\r\n   at System.Diagnostics.EventLog.Delete(String logName) in /_/src/System.Diagnostics.EventLog/src/System/Diagnostics/EventLog.cs:line 368\r\n   at System.Diagnostics.Tests.EventLogTraceListenerTests.<>c__DisplayClass12_0.<TraceEventFormatAndParams>b__0() in /_/src/System.Diagnostics.EventLog/tests/EventLogTraceListenerTests.cs:line 248\r\n   at System.Diagnostics.Tests.Helpers.<>c__DisplayClass6_0.<RetryOnWin7>b__0() in /_/src/System.Diagnostics.EventLog/tests/Helpers.cs:line 23\r\n   at System.Diagnostics.Tests.Helpers.RetryOnWin7[T](Func`1 func) in /_/src/System.Diagnostics.EventLog/tests/Helpers.cs:line 30\r\n   at System.Diagnostics.Tests.Helpers.RetryOnWin7(Action func) in /_/src/System.Diagnostics.EventLog/tests/Helpers.cs:line 23\r\n   at System.Diagnostics.Tests.EventLogTraceListenerTests.TraceEventFormatAndParams(String format, Object[] parameters)\r\n```\r\nBuild: -[20190728](https://mc.dot.net/#/user/dotnet-bot/pr~2Fdotnet~2Fcorefx~2Frefs~2Fheads~2Fmaster/test~2Ffunctional~2Fcli~2F~2F/20190728.14)(Master)\r\nFailing configuration:\r\n\r\n- Windows.10.Amd64.Client19H1.Open-x86-Release\r\n\r\nDetails:\r\nhttps://mc.dot.net/#/user/dotnet-bot/pr~2Fdotnet~2Fcorefx~2Frefs~2Fheads~2Fmaster/test~2Ffunctional~2Fcli~2F~2F/20190728.14/workItem/System.Diagnostics.EventLog.Tests/analysis/xunit/System.Diagnostics.Tests.EventLogTraceListenerTests~2FTraceEventFormatAndParams(format:%20%5C%22This%20is%20a%20weird%20%7B0%7D%7B1%7D%7B2%7D%20format%20that%20but%20args%20len%5C%22...,%20parameters:%20%5B%5D)","Url":"https://github.com/dotnet/coreclr/issues/25922","RelatedDescription":"Open issue \"Test failure: System.Diagnostics.Tests.EventLogTraceListenerTests/TraceEventFormatAndParams(format: \\\"This is a weird {0}{1}{2} format that but args len\\\"..., parameters: []) \" (#25922)"},{"Id":"473811495","IsPullRequest":false,"CreatedAt":"2019-07-29T01:32:22","Actor":"VincentBu","Number":"25921","RawContent":null,"Title":"Test failed: GC_API._NoGCRegion_NoGC_NoGC_._NoGCRegion_NoGC_NoGC_cmd","State":"open","Body":"**Job:**\r\nhttps://mc.dot.net/#/user/coreclr-jitstress2-jitstressregs/ci~2Fdotnet~2Fcoreclr~2Frefs~2Fheads~2Fmaster/test~2Ffunctional~2Fcli~2F/20190728.1/workItem/PayloadGroup0/analysis/xunit/GC_API._NoGCRegion_NoGC_NoGC_~2F_NoGCRegion_NoGC_NoGC_cmd\r\n\r\n**Failed tests:**\r\nGC_API._NoGCRegion_NoGC_NoGC_._NoGCRegion_NoGC_NoGC_cmd\r\n\r\n**Log:**\r\n```\r\nReturn code:      1\r\nRaw output file:      C:\\\\dotnetbuild\\\\work\\\\60895ced-77d4-4682-b9e9-ff6a1b0d4d04\\\\Work\\\\322b9fee-2fee-4bb5-88fd-c814de3e5c54\\\\Exec\\\\GC\\\\API\\\\Reports\\\\GC.API\\\\NoGCRegion\\\\NoGC\\\\NoGC.output.txt\r\nRaw output:\r\nBEGIN EXECUTION\r\n \\\"C:\\\\dotnetbuild\\\\work\\\\60895ced-77d4-4682-b9e9-ff6a1b0d4d04\\\\Payload\\\\corerun.exe\\\" NoGC.exe \r\nWorkstation on 64-bit with 2 procs\r\n=====allocating 100mb allowing full blocking GC first=====\r\n\r\nCalling TryStartNoGCRegion(..) with totalSize = 100 MB\r\n100 MB SUCCEEDED, did 1 gen2 GCs\r\nbefore GC: 40, after GC: 40\r\nended no gc region\r\ncurrent GC count: 81\r\n\r\n=====allocating 100mb allowing full blocking GC first Succeeded=====\r\n=====allocating 200mb allowing full blocking GC first=====\r\n\r\nCalling TryStartNoGCRegion(..) with totalSize = 200 MB\r\n200 MB SUCCEEDED, did 1 gen2 GCs\r\nbefore GC: 121, after GC: 121\r\nended no gc region\r\ncurrent GC count: 161\r\n\r\n=====allocating 200mb allowing full blocking GC first Succeeded=====\r\n=====allocating 200mb disallowing full blocking GC first=====\r\n\r\nCalling TryStartNoGCRegion(..) with totalSize = 200 MB\r\n200 MB SUCCEEDED, did 1 gen2 GCs\r\nbefore GC: 202, after GC: 202\r\nended no gc region\r\ncurrent GC count: 242\r\n\r\n=====allocating 200mb disallowing full blocking GC first Succeeded=====\r\n=====allocating 400mb allowing full blocking GC first=====\r\n\r\nCalling TryStartNoGCRegion(..) with totalSize = 400 MB\r\nBy Design: 400 MB ArgumentOutOfRangeException totalSize is too large. For more information about setting the maximum size, see \\\"Latency Modes\\\" in http://go.microsoft.com/fwlink/?LinkId=522706 (Parameter 'totalSize')\r\ncurrent GC count: 321\r\n\r\n=====allocating 400mb allowing full blocking GC first Succeeded=====\r\n=====allocating 400mb disallowing full blocking GC first=====\r\n\r\nCalling TryStartNoGCRegion(..) with totalSize = 400 MB\r\nBy Design: 400 MB ArgumentOutOfRangeException totalSize is too large. For more information about setting the maximum size, see \\\"Latency Modes\\\" in http://go.microsoft.com/fwlink/?LinkId=522706 (Parameter 'totalSize')\r\ncurrent GC count: 403\r\n\r\n=====allocating 400mb disallowing full blocking GC first Succeeded=====\r\n=====allocating 100mb allowing full blocking GC first=====\r\n\r\nCalling TryStartNoGCRegion(..) with totalSize = 100 MB\r\n100 MB SUCCEEDED, did 1 gen2 GCs\r\nbefore GC: 445, after GC: 445\r\nended no gc region\r\ncurrent GC count: 487\r\n\r\n=====allocating 100mb allowing full blocking GC first Succeeded=====\r\n=====allocating 200mb allowing full blocking GC first=====\r\n\r\nCalling TryStartNoGCRegion(..) with totalSize = 200 MB\r\n200 MB SUCCEEDED, did 1 gen2 GCs\r\nbefore GC: 530, after GC: 531\r\nWe did GCs in no gc mode!!!\r\nended no gc region\r\nEnd NoGC region: 200 MB InvalidOperationException Garbage collection was induced in NoGCRegion mode\r\ncurrent GC count: 571\r\n\r\n=====allocating 200mb allowing full blocking GC first Failed=====\r\n=====allocating 200mb disallowing full blocking GC first=====\r\n\r\nCalling TryStartNoGCRegion(..) with totalSize = 200 MB\r\n200 MB SUCCEEDED, did 1 gen2 GCs\r\nbefore GC: 613, after GC: 632\r\nWe did GCs in no gc mode!!!\r\nended no gc region\r\nEnd NoGC region: 200 MB InvalidOperationException Garbage collection was induced in NoGCRegion mode\r\ncurrent GC count: 672\r\n\r\n=====allocating 200mb disallowing full blocking GC first Failed=====\r\n=====allocating 400mb allowing full blocking GC first=====\r\n\r\nCalling TryStartNoGCRegion(..) with totalSize = 400 MB\r\n400 MB SUCCEEDED, did 1 gen2 GCs\r\nbefore GC: 714, after GC: 719\r\nWe did GCs in no gc mode!!!\r\nended no gc region\r\nEnd NoGC region: 400 MB InvalidOperationException Garbage collection was induced in NoGCRegion mode\r\ncurrent GC count: 759\r\n\r\n=====allocating 400mb allowing full blocking GC first Failed=====\r\n=====allocating 400mb disallowing full blocking GC first=====\r\n\r\nCalling TryStartNoGCRegion(..) with totalSize = 400 MB\r\n400 MB SUCCEEDED, did 1 gen2 GCs\r\nbefore GC: 801, after GC: 835\r\nWe did GCs in no gc mode!!!\r\nended no gc region\r\nEnd NoGC region: 400 MB InvalidOperationException Garbage collection was induced in NoGCRegion mode\r\ncurrent GC count: 874\r\n\r\n=====allocating 400mb disallowing full blocking GC first Failed=====\r\n=====allocating 400mb allowing full blocking GC first=====\r\n\r\nCalling TryStartNoGCRegion(..) with totalSize = 400 MB\r\n400 MB SUCCEEDED, did 1 gen2 GCs\r\nbefore GC: 916, after GC: 917\r\nWe did GCs in no gc mode!!!\r\nended no gc region\r\nEnd NoGC region: 400 MB InvalidOperationException Garbage collection was induced in NoGCRegion mode\r\ncurrent GC count: 957\r\n\r\n=====allocating 400mb allowing full blocking GC first Failed=====\r\nExpected: 100\r\nActual: 1\r\nEND EXECUTION - FAILED\r\nFAILED\r\nTest Harness Exitcode is : 1\r\nTo run the test:\r\n> set CORE_ROOT=C:\\\\dotnetbuild\\\\work\\\\60895ced-77d4-4682-b9e9-ff6a1b0d4d04\\\\Payload\r\n> C:\\\\dotnetbuild\\\\work\\\\60895ced-77d4-4682-b9e9-ff6a1b0d4d04\\\\Work\\\\322b9fee-2fee-4bb5-88fd-c814de3e5c54\\\\Exec\\\\GC\\\\API\\\\NoGCRegion\\\\NoGC\\\\NoGC.cmd\r\nExpected: True\r\nActual:   False\r\n```","Url":"https://github.com/dotnet/coreclr/issues/25921","RelatedDescription":"Open issue \"Test failed: GC_API._NoGCRegion_NoGC_NoGC_._NoGCRegion_NoGC_NoGC_cmd\" (#25921)"},{"Id":"473729081","IsPullRequest":false,"CreatedAt":"2019-07-28T18:59:07","Actor":"sakno","Number":"25916","RawContent":null,"Title":"Managed calling conventions and calli","State":"closed","Body":"I'm playing with different combinations of managed calling conventions (defined by `System.Reflection.CallingConventions`) and `calli` IL instruction and found the following things:\r\n1. Static method can be called successfully with `HasThis` calling convention if its first parameter of reference type or managed pointer to value type\r\n1. Instance non-virtual method can be called successfully with `Standard` calling convention if its first argument is passed explicitly as type `O` or `&`.\r\n\r\nECMA-334 is unclear about this. Chapter III.3.2 0 saying that:\r\n> The calling convention is not checked dynamically, so code that uses a calli instruction will not work correctly if the destination does not actually use the specified calling convention.\r\n\r\nIt's OK that `calli` cannot check actual calling convention because the target method is unknown at compile time. However, my experiments showing that mismatch in calling convention is normal for CLR.\r\nMy question is it legal to use `HasThis` CC to call static methods and `Standard` to call instance methods through `calli`?","Url":"https://github.com/dotnet/coreclr/issues/25916","RelatedDescription":"Closed issue \"Managed calling conventions and calli\" (#25916)"},{"Id":"473766630","IsPullRequest":true,"CreatedAt":"2019-07-28T17:23:40","Actor":"DanHarltey","Number":"25919","RawContent":null,"Title":"perf improvement int.ToString(\"x\")","State":"open","Body":"The change affects both int and uint, and both ToString(\"x\") and ToString(\"X\"). It provides a performance improvement of around 40% for no extra memory allocation. It does this by replacing some unsafe code with a string.Create.\r\n\r\nWould this change be something that you would be interested in?\r\n\r\nThe change could be taken a little further by also providing it for long and ulong.","Url":"https://github.com/dotnet/coreclr/pull/25919","RelatedDescription":"Open PR \"perf improvement int.ToString(\"x\")\" (#25919)"},{"Id":"473757572","IsPullRequest":false,"CreatedAt":"2019-07-28T15:46:22","Actor":"MiyamuraMiyako","Number":"25918","RawContent":null,"Title":"PublishSingleFile for Asp.NetCore's WorkDirectory issue.","State":"open","Body":"If publish aspnetcore program to single self-contained executable file, all file will extract to temp dir, but I think program work dir should be executable file's stqrtup path, not temp path, because temp path can not manage and inconvenient.","Url":"https://github.com/dotnet/coreclr/issues/25918","RelatedDescription":"Open issue \"PublishSingleFile for Asp.NetCore's WorkDirectory issue.\" (#25918)"},{"Id":"473736567","IsPullRequest":false,"CreatedAt":"2019-07-28T12:04:54","Actor":"GSPP","Number":"25917","RawContent":null,"Title":"Hang possibly related to GC in preview7","State":"open","Body":"The following program is expected to consume 1 full CPU core forever:\r\n\r\n            byte[] encryptionData = new byte[16];\r\n\r\n            using (var algorithm = new AesManaged())\r\n            {\r\n                algorithm.GenerateKey();\r\n                algorithm.GenerateIV();\r\n                algorithm.Mode = CipherMode.ECB;\r\n                algorithm.Padding = PaddingMode.None;\r\n\r\n                var cryptoTransform = algorithm.CreateEncryptor();\r\n\r\n                while (true)\r\n                {\r\n                    var result = cryptoTransform.TransformFinalBlock(encryptionData, 0, encryptionData.Length);\r\n                }\r\n            }\r\n\r\nBut sometimes CPU usage stops. The debugger cannot stop the program at that point. Using Process Explorer I captured this stack for the main thread:\r\n\r\n![image](https://user-images.githubusercontent.com/12032350/62006383-5692df00-b140-11e9-821c-8622a3453514.png)\r\n\r\n![image](https://user-images.githubusercontent.com/12032350/62006397-75917100-b140-11e9-8290-b40f2390d9c3.png)\r\n\r\nThis is Windows 10 and a very recent `dbghelp.dll` so I don't understand why the stack is broken.\r\n\r\nReproducing this is a bit brittle. Sometimes, it is enough to start the program and the hang occurs after at most a minute or so. Sometimes, this does not seem to work. But starting PerfView and starting to collect data always leads to a hang within seconds.\r\n\r\n","Url":"https://github.com/dotnet/coreclr/issues/25917","RelatedDescription":"Open issue \"Hang possibly related to GC in preview7\" (#25917)"}],"ResultType":"GitHubIssue"},"CLI-Issues":{"Issues":[{"Id":"474889803","IsPullRequest":true,"CreatedAt":"2019-07-31T01:55:00","Actor":"dotnet-maestro[bot]","Number":"12088","RawContent":null,"Title":"[release/3.0.100-preview8] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:6e10c9b4-9a39-4546-565f-08d7114adc5e)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190730.2\r\n- **Date Produced**: 7/31/2019 1:19 AM\r\n- **Commit**: 5871fd3821d31a930d36e35f466f245be20c6b16\r\n- **Branch**: refs/heads/release/3.0.100-preview8\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview8.19380.2\r\n\r\n[marker]: <> (End:6e10c9b4-9a39-4546-565f-08d7114adc5e)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12088","RelatedDescription":"Closed or merged PR \"[release/3.0.100-preview8] Update dependencies from dotnet/sdk\" (#12088)"},{"Id":"474864302","IsPullRequest":true,"CreatedAt":"2019-07-30T23:20:01","Actor":"nguerrera","Number":"12087","RawContent":null,"Title":"Update branding to 2.2.402","State":"open","Body":"","Url":"https://github.com/dotnet/cli/pull/12087","RelatedDescription":"Open PR \"Update branding to 2.2.402\" (#12087)"},{"Id":"474864083","IsPullRequest":true,"CreatedAt":"2019-07-30T23:19:06","Actor":"nguerrera","Number":"12086","RawContent":null,"Title":"Update branding to 2.1.802","State":"open","Body":"\r\n","Url":"https://github.com/dotnet/cli/pull/12086","RelatedDescription":"Open PR \"Update branding to 2.1.802\" (#12086)"},{"Id":"474853680","IsPullRequest":true,"CreatedAt":"2019-07-30T22:39:58","Actor":"richlander","Number":"12085","RawContent":null,"Title":"Update welcome string for configuring HTTPS","State":"open","Body":"The current text is too narrow and doesn't relate to what the developer actually needs to do. Proposed text fixes that.","Url":"https://github.com/dotnet/cli/pull/12085","RelatedDescription":"Open PR \"Update welcome string for configuring HTTPS\" (#12085)"},{"Id":"474851371","IsPullRequest":true,"CreatedAt":"2019-07-30T22:32:10","Actor":"wli3","Number":"12084","RawContent":null,"Title":"[WIP NO MERGE] test CI","State":"open","Body":"(cherry picked from commit 4f0a4922b1d77f427b4634bd560b943ed0d4a682)\r\n\r\n- If this PR should not run tests add text \"skip[REMOVE_THIS]ci[REMOVE_THIS]please\" (remove the marked text, no quotes).\r\n- Add description for changes you are making.\r\n- If there is an issue related to this PR, add the reference.\r\n","Url":"https://github.com/dotnet/cli/pull/12084","RelatedDescription":"Open PR \"[WIP NO MERGE] test CI\" (#12084)"},{"Id":"474788844","IsPullRequest":true,"CreatedAt":"2019-07-30T20:46:31","Actor":"dotnet-maestro[bot]","Number":"12083","RawContent":null,"Title":"[release/3.0.100-preview8] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:1323e428-028e-4f02-070d-08d7114b0b3e)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190730.08\r\n- **Date Produced**: 7/30/2019 7:48 PM\r\n- **Commit**: c855ac718789051d5d67282c88decca445de7711\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview8-28380-08\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-preview8-28380-08\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.0.0-preview8-28380-08\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-preview8-28380-08\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-preview8-28380-08\r\n\r\n[marker]: <> (End:1323e428-028e-4f02-070d-08d7114b0b3e)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12083","RelatedDescription":"Closed or merged PR \"[release/3.0.100-preview8] Update dependencies from dotnet/core-setup\" (#12083)"},{"Id":"474783557","IsPullRequest":true,"CreatedAt":"2019-07-30T20:05:58","Actor":"dotnet-maestro[bot]","Number":"12082","RawContent":null,"Title":"[master] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190730.3\r\n- **Date Produced**: 7/30/2019 7:35 PM\r\n- **Commit**: 1bff37bec1b185217857cbdffd147283bb22cd76\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 5.0.0-alpha1.19380.3\r\n\r\n[marker]: <> (End:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12082","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from aspnet/AspNetCore\" (#12082)"},{"Id":"474677215","IsPullRequest":true,"CreatedAt":"2019-07-30T17:28:17","Actor":"dotnet-maestro[bot]","Number":"12081","RawContent":null,"Title":"[release/3.0.100-preview8] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:1323e428-028e-4f02-070d-08d7114b0b3e)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190730.03\r\n- **Date Produced**: 7/30/2019 4:13 PM\r\n- **Commit**: e2f55eb923e9d611de1533ab80f31cc558934122\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview8-28380-03\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-preview8-28380-03\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.0.0-preview8-28380-03\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-preview8-28380-03\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-preview8-28380-03\r\n\r\n[marker]: <> (End:1323e428-028e-4f02-070d-08d7114b0b3e)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12081","RelatedDescription":"Closed or merged PR \"[release/3.0.100-preview8] Update dependencies from dotnet/core-setup\" (#12081)"},{"Id":"474548890","IsPullRequest":true,"CreatedAt":"2019-07-30T12:48:33","Actor":"dotnet-maestro[bot]","Number":"12080","RawContent":null,"Title":"[master] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190729.8\r\n- **Date Produced**: 7/30/2019 3:00 AM\r\n- **Commit**: 221810a81f83446a7cc0e4fa51d3dc9fecd293c5\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 5.0.0-alpha1.19379.8\r\n\r\n[marker]: <> (End:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12080","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/templating\" (#12080)"},{"Id":"474014026","IsPullRequest":true,"CreatedAt":"2019-07-30T12:41:13","Actor":"dotnet-maestro[bot]","Number":"12062","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:433865d5-f754-408e-06ed-08d645e2db8e)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190729.29\r\n- **Date Produced**: 7/29/2019 10:51 PM\r\n- **Commit**: 84d9a013b66c3e14a67ace0a99ae84e6eb8b6a7d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19379.29\r\n\r\n[marker]: <> (End:433865d5-f754-408e-06ed-08d645e2db8e)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12062","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#12062)"},{"Id":"474374230","IsPullRequest":true,"CreatedAt":"2019-07-30T05:39:07","Actor":"dotnet-maestro[bot]","Number":"12079","RawContent":null,"Title":"[release/3.0.100-preview8] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:6e10c9b4-9a39-4546-565f-08d7114adc5e)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190729.6\r\n- **Date Produced**: 7/30/2019 5:03 AM\r\n- **Commit**: 3d9deb98f9ee58db83245aaa5e439e6ed7ce0345\r\n- **Branch**: refs/heads/release/3.0.100-preview8\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview8.19379.6\r\n\r\n[marker]: <> (End:6e10c9b4-9a39-4546-565f-08d7114adc5e)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12079","RelatedDescription":"Closed or merged PR \"[release/3.0.100-preview8] Update dependencies from dotnet/sdk\" (#12079)"},{"Id":"474348083","IsPullRequest":true,"CreatedAt":"2019-07-30T04:08:36","Actor":"dotnet-maestro[bot]","Number":"12077","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d4b89351-e138-4a22-94d9-08d690bc143a)\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190729.7\r\n- **Date Produced**: 7/30/2019 2:58 AM\r\n- **Commit**: 77ce7767d3e297ad0fdef917cb27c212c746590a\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 3.0.0-preview9.19379.7\r\n\r\n[marker]: <> (End:d4b89351-e138-4a22-94d9-08d690bc143a)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12077","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/templating\" (#12077)"},{"Id":"474349005","IsPullRequest":true,"CreatedAt":"2019-07-30T03:45:22","Actor":"dotnet-maestro[bot]","Number":"12078","RawContent":null,"Title":"[release/3.0.100-preview8] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:6e10c9b4-9a39-4546-565f-08d7114adc5e)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190729.5\r\n- **Date Produced**: 7/30/2019 3:14 AM\r\n- **Commit**: 7e1ed3283f50a43642380b087dcb1847967156a5\r\n- **Branch**: refs/heads/release/3.0.100-preview8\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview8.19379.5\r\n\r\n[marker]: <> (End:6e10c9b4-9a39-4546-565f-08d7114adc5e)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12078","RelatedDescription":"Closed or merged PR \"[release/3.0.100-preview8] Update dependencies from dotnet/sdk\" (#12078)"},{"Id":"474327981","IsPullRequest":true,"CreatedAt":"2019-07-30T03:01:57","Actor":"dotnet-maestro[bot]","Number":"12076","RawContent":null,"Title":"[release/3.0.100-preview8] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:e7b11919-7fec-4904-d004-08d7114cdbad)\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190729.6\r\n- **Date Produced**: 7/30/2019 1:24 AM\r\n- **Commit**: dd6eb08b7aad05eeadb585ef4c853f29ea95726c\r\n- **Branch**: refs/heads/release/3.0-preview8\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 3.0.0-preview8.19379.6\r\n\r\n[marker]: <> (End:e7b11919-7fec-4904-d004-08d7114cdbad)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12076","RelatedDescription":"Closed or merged PR \"[release/3.0.100-preview8] Update dependencies from dotnet/templating\" (#12076)"},{"Id":"474320634","IsPullRequest":true,"CreatedAt":"2019-07-30T02:01:59","Actor":"dotnet-maestro[bot]","Number":"12075","RawContent":null,"Title":"[release/3.0.100-preview8] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:1323e428-028e-4f02-070d-08d7114b0b3e)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190729.14\r\n- **Date Produced**: 7/30/2019 12:15 AM\r\n- **Commit**: f4b35ce6e8583b08630baf576f55424728b04081\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview8-28379-14\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-preview8-28379-14\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.0.0-preview8-28379-14\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-preview8-28379-14\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-preview8-28379-14\r\n\r\n[marker]: <> (End:1323e428-028e-4f02-070d-08d7114b0b3e)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12075","RelatedDescription":"Closed or merged PR \"[release/3.0.100-preview8] Update dependencies from dotnet/core-setup\" (#12075)"},{"Id":"474309261","IsPullRequest":true,"CreatedAt":"2019-07-30T00:04:40","Actor":"dotnet-bot","Number":"12074","RawContent":null,"Title":"Merge release/3.0.1xx to master","State":"open","Body":"\nThis is an automatically generated pull request from release/3.0.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/12074","RelatedDescription":"Open PR \"Merge release/3.0.1xx to master\" (#12074)"},{"Id":"474173656","IsPullRequest":true,"CreatedAt":"2019-07-29T23:53:02","Actor":"livarcocc","Number":"12068","RawContent":null,"Title":"Updating branding to preview9","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/12068","RelatedDescription":"Closed or merged PR \"Updating branding to preview9\" (#12068)"},{"Id":"474290492","IsPullRequest":true,"CreatedAt":"2019-07-29T23:24:07","Actor":"dotnet-maestro[bot]","Number":"12073","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190729.12\r\n- **Date Produced**: 7/29/2019 10:27 PM\r\n- **Commit**: 38f6ef72ca902e2462ef17535c54f9dbdd2a112c\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview8-28379-12\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-preview8-28379-12\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.0.0-preview8-28379-12\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-preview8-28379-12\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-preview8-28379-12\r\n\r\n[marker]: <> (End:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12073","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/core-setup\" (#12073)"},{"Id":"474245670","IsPullRequest":true,"CreatedAt":"2019-07-29T22:48:13","Actor":"dotnet-maestro[bot]","Number":"12071","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190729.10\r\n- **Date Produced**: 7/29/2019 8:38 PM\r\n- **Commit**: 0e67a4ebce79bab61182a673b418314d1098ece8\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview8-28379-10\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-preview8-28379-10\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.0.0-preview8-28379-10\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-preview8-28379-10\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-preview8-28379-10\r\n\r\n[marker]: <> (End:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12071","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/core-setup\" (#12071)"},{"Id":"474284905","IsPullRequest":false,"CreatedAt":"2019-07-29T22:40:08","Actor":"VictorioBerra","Number":"12072","RawContent":null,"Title":"I can not run any dotnet tool installed with --tool-path","State":"closed","Body":"I am trying to configure my build environment to download and run my tools in a local directory so I dont blow up anyone elses builds. I have tried all of the following:\r\n\r\n```powershell\r\nPS C:\\Users\\toryb\\Desktop\\build_server> dotnet tool install dotnetsay --tool-path tools\r\nYou can invoke the tool using the following command: dotnetsay\r\nTool 'dotnetsay' (version '2.1.4') was successfully installed.\r\nPS C:\\Users\\toryb\\Desktop\\build_server> dotnetsay\r\ndotnetsay : The term 'dotnetsay' is not recognized as the name of a cmdlet, function, script file, or operable\r\nprogram. Check the spelling of the name, or if a path was included, verify that the path is correct and try again.\r\nAt line:1 char:1\r\n+ dotnetsay\r\n+ ~~~~~~~~~\r\n    + CategoryInfo          : ObjectNotFound: (dotnetsay:String) [], CommandNotFoundException\r\n    + FullyQualifiedErrorId : CommandNotFoundException\r\n\r\nPS C:\\Users\\toryb\\Desktop\\build_server> dotnet dotnetsay\r\nNo executable found matching command \"dotnet-dotnetsay\"\r\nPS C:\\Users\\toryb\\Desktop\\build_server> dotnet .\\tools\\dotnetsay.exe\r\nA fatal error was encountered. The library 'hostpolicy.dll' required to execute the application was not found in 'C:\\Users\\toryb\\Desktop\\build_server\\tools\\'.\r\nFailed to run as a self-contained app. If this should be a framework-dependent app, add the C:\\Users\\toryb\\Desktop\\build_server\\tools\\dotnetsay.runtimeconfig.json file specifying the appropriate framework.\r\nPS C:\\Users\\toryb\\Desktop\\build_server> # ... wtf\r\nPS C:\\Users\\toryb\\Desktop\\build_server> $env:path = \"${pwd}\\tools;\" + $env:path;\r\nPS C:\\Users\\toryb\\Desktop\\build_server> dotnet dotnetsay\r\nNo executable found matching command \"dotnet-dotnetsay\"\r\nPS C:\\Users\\toryb\\Desktop\\build_server>\r\n```\r\n\r\nYou can see nothing I try works. This is with a fresh install of the latest core. I even try and set the `env:path`.\r\n\r\nShould I be installing the tool differently in order to use it in my build environment?","Url":"https://github.com/dotnet/cli/issues/12072","RelatedDescription":"Closed issue \"I can not run any dotnet tool installed with --tool-path\" (#12072)"},{"Id":"474232064","IsPullRequest":true,"CreatedAt":"2019-07-29T20:57:02","Actor":"dotnet-maestro[bot]","Number":"12070","RawContent":null,"Title":"[master] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190729.2\r\n- **Date Produced**: 7/29/2019 8:05 PM\r\n- **Commit**: e0e9096af526448cb1a02f97e60efd8567b7ba35\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview8.19379.2\r\n\r\n[marker]: <> (End:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12070","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from aspnet/AspNetCore\" (#12070)"},{"Id":"474201678","IsPullRequest":true,"CreatedAt":"2019-07-29T19:50:46","Actor":"dotnet-maestro[bot]","Number":"12069","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:fa87930c-8514-45a1-0d47-08d6910cd73b)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190729.3\r\n- **Date Produced**: 7/29/2019 6:49 PM\r\n- **Commit**: 7e1ed3283f50a43642380b087dcb1847967156a5\r\n- **Branch**: refs/heads/release/3.0.1xx\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview8.19379.3\r\n\r\n[marker]: <> (End:fa87930c-8514-45a1-0d47-08d6910cd73b)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12069","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/sdk\" (#12069)"},{"Id":"474158342","IsPullRequest":true,"CreatedAt":"2019-07-29T17:07:30","Actor":"dotnet-maestro[bot]","Number":"12067","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190729.08\r\n- **Date Produced**: 7/29/2019 5:01 PM\r\n- **Commit**: f6de07f6754045f18757fbb118bf4e049a684d34\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview8-28379-08\r\n\r\n[marker]: <> (End:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12067","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/core-setup\" (#12067)"},{"Id":"474113809","IsPullRequest":true,"CreatedAt":"2019-07-29T15:24:36","Actor":"dotnet-maestro[bot]","Number":"12066","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190730.13\r\n- **Date Produced**: 7/31/2019 4:16 AM\r\n- **Commit**: 6862502118e8989cae198d3e27f99616be3498db\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19380.13\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19380.13\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19380.13\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19380.13\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19380.13\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12066","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/core-setup\" (#12066)"},{"Id":"474028390","IsPullRequest":true,"CreatedAt":"2019-07-29T13:10:12","Actor":"dotnet-maestro[bot]","Number":"12065","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190729.03\r\n- **Date Produced**: 7/29/2019 12:39 PM\r\n- **Commit**: 915722554dc08a7075f89eddb40691caca23b6be\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview8-28379-03\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-preview8-28379-03\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.0.0-preview8-28379-03\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-preview8-28379-03\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-preview8-28379-03\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12065","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12065)"},{"Id":"474017162","IsPullRequest":true,"CreatedAt":"2019-07-29T12:44:30","Actor":"dotnet-maestro[bot]","Number":"12064","RawContent":null,"Title":"[master] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190728.1\r\n- **Date Produced**: 7/28/2019 12:46 PM\r\n- **Commit**: 6aa89884a7a4353f6abd9eb385bba33a58624670\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 2.0.0-preview8.19378.1\r\n\r\n[marker]: <> (End:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12064","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/templating\" (#12064)"},{"Id":"474014234","IsPullRequest":true,"CreatedAt":"2019-07-29T12:37:26","Actor":"dotnet-maestro[bot]","Number":"12063","RawContent":null,"Title":"[master] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:145b81c3-fdcc-4cb6-70fa-08d645e3a44f)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190728.2\r\n- **Date Produced**: 7/28/2019 10:44 PM\r\n- **Commit**: cd5d216a81958169a88e7cfd84e673bc6f9822dc\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview8.19378.2\r\n\r\n[marker]: <> (End:145b81c3-fdcc-4cb6-70fa-08d645e3a44f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12063","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/sdk\" (#12063)"},{"Id":"473994783","IsPullRequest":true,"CreatedAt":"2019-07-29T11:55:29","Actor":"dotnet-maestro[bot]","Number":"12061","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190729.02\r\n- **Date Produced**: 7/29/2019 11:19 AM\r\n- **Commit**: 3a87ac0079c714f13e35b319ad68cd15f66e0172\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview8-28379-02\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-preview8-28379-02\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.0.0-preview8-28379-02\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-preview8-28379-02\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-preview8-28379-02\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12061","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12061)"},{"Id":"473951134","IsPullRequest":true,"CreatedAt":"2019-07-29T10:09:10","Actor":"dotnet-maestro[bot]","Number":"12060","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190729.01\r\n- **Date Produced**: 7/29/2019 9:38 AM\r\n- **Commit**: 6a62209e78a23fe4e6af59b14f2f74edacb2be3f\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview8-28379-01\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-preview8-28379-01\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.0.0-preview8-28379-01\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-preview8-28379-01\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-preview8-28379-01\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12060","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12060)"},{"Id":"473852183","IsPullRequest":true,"CreatedAt":"2019-07-29T05:39:51","Actor":"dotnet-maestro[bot]","Number":"12059","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190728.16\r\n- **Date Produced**: 7/29/2019 5:09 AM\r\n- **Commit**: 44512181385551ade3b82730eb28dceb4bd57662\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview8-28378-16\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-preview8-28378-16\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.0.0-preview8-28378-16\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-preview8-28378-16\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-preview8-28378-16\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12059","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12059)"}],"ResultType":"GitHubIssue"},"Standard-Issues":{"Issues":[{"Id":"474306086","IsPullRequest":true,"CreatedAt":"2019-07-30T16:43:12","Actor":"JohnTortugo","Number":"1379","RawContent":null,"Title":"Patch reference to _PublishUsingPipelines","State":"closed","Body":"For context see description of this Arcade PR: https://github.com/dotnet/arcade/pull/3482\r\n\r\n/cc @riarenas @jcagme ","Url":"https://github.com/dotnet/standard/pull/1379","RelatedDescription":"Closed or merged PR \"Patch reference to _PublishUsingPipelines\" (#1379)"},{"Id":"474564366","IsPullRequest":true,"CreatedAt":"2019-07-30T12:56:42","Actor":"dotnet-maestro[bot]","Number":"1380","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190729.12\r\n- **Date Produced**: 7/30/2019 5:11 AM\r\n- **Commit**: b2ff0db61cc9348775d73a8934ad80218ded8bc0\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19379.12\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19379.12\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19379.12\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1380","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1380)"},{"Id":"474034730","IsPullRequest":true,"CreatedAt":"2019-07-29T13:03:24","Actor":"dotnet-maestro[bot]","Number":"1378","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190728.4\r\n- **Date Produced**: 7/29/2019 4:09 AM\r\n- **Commit**: e36291288fc182e94a919f45e61a8924f953c3cd\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19378.4\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19378.4\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19378.4\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1378","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1378)"},{"Id":"473779780","IsPullRequest":false,"CreatedAt":"2019-07-28T19:57:53","Actor":"KubaO","Number":"1377","RawContent":null,"Title":"System.Xml.Serialization needs a dynamic element name for interop","State":"open","Body":"There's some awful XML out there that uses such a multitude of element names that it's infeasible to map them all out in explicit `XMLElement` attributes. Heck, such XML is usually produced with  dynamically generated names. It's a horrible practice - not to be encouraged, but we should be able to simplify the life of people who need to interoperate with such XML.\r\n\r\nIt'd be nice if we could do this:\r\n\r\n```\r\nclass AwfulElement {\r\n  [XmlDynamicElementName]\r\n  string name;\r\n  [XmlText(typeOf(int))]\r\n  int aNumber;\r\n  ...\r\n}\r\n```\r\n\r\nOther names for the proposed attribute may be `XmlInteropDynamicElementName` to signify that this is for interop purposes only, or `XmlAwfulDynamicElementName` to make it abundantly clear what it is :/\r\n\r\n### Rationale\r\n\r\nAs it stands, `XmlSerializer` infrastructure does a very poor job of supporting this - it requires quite a bit of semi-efficient code. Imagine you wanted a bunch of such elements in a collection with the following spec (note that currently it requires having an `INamedElement`, but with the support for the proposed attribute there'd be no need for it):\r\n\r\n```\r\npartial class AwfulCollection<T> : IXmlSerializable, IEnumerable<T> where T : INamedElement, new();\r\n\r\nclass AwfulParent {\r\n  public AwfulCollection<AwfulElement> Elements;\r\n}\r\n\r\n<?xml>\r\n<AwfulParemt>\r\n  <Awful1\\>\r\n  <Awful2\\>\r\n</AwfulParent>\r\n```\r\n\r\nI'll spare the details, but implementing this generic `AwfulCollection` is a pain. With the support for the proposed attribute, the usual array could be used:\r\n\r\n```\r\nclass LessAwfulParent {\r\n  public AwfulElement[] Element;\r\n}\r\n```\r\n\r\n### Spec\r\n\r\nThe attribute definition would be rather basic. A `DefaultElementName` property is a fallback if the name the attribute applies to is null. An exception would be thrown on serialization if both the name-attributed field as well as the default name were empty. On deserialization, the `name` is filled in with the name of the element.\r\n\r\n```\r\n[System.AttributeUsageAttribute(System.AttributeTargets.Field | System.AttributeTargets.Property, AllowMultiple=false)]\r\n    public partial class XmlDynamicElementNameAttribute: System.Attribute\r\n    {\r\n        public XmlDynamicElementNameAttribute() { }\r\n        public XmlDynamicElementNameAttribute(string defaultElementName) { }\r\n        public string DefaultElementName { get { throw null; } set { } }\r\n        public System.Xml.Schema.XmlSchemaForm Form { get { throw null; } set { } }\r\n        public string Namespace { get { throw null; } set { } }\r\n    }\r\n```","Url":"https://github.com/dotnet/standard/issues/1377","RelatedDescription":"Open issue \"System.Xml.Serialization needs a dynamic element name for interop\" (#1377)"},{"Id":"473740823","IsPullRequest":true,"CreatedAt":"2019-07-28T13:03:23","Actor":"dotnet-maestro[bot]","Number":"1376","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190727.2\r\n- **Date Produced**: 7/28/2019 5:49 AM\r\n- **Commit**: 57df8b38e4e70fc25aabe3d061cd1745cff0b26b\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19377.2\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19377.2\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19377.2\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1376","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1376)"},{"Id":"473635514","IsPullRequest":true,"CreatedAt":"2019-07-27T13:03:22","Actor":"dotnet-maestro[bot]","Number":"1375","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190726.14\r\n- **Date Produced**: 7/27/2019 4:10 AM\r\n- **Commit**: 8a6389529afdc0dd53d4c94fe665695ec54c21af\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19376.14\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19376.14\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19376.14\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1375","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1375)"},{"Id":"473583225","IsPullRequest":false,"CreatedAt":"2019-07-27T01:16:07","Actor":"GrabYourPitchforks","Number":"1374","RawContent":null,"Title":"Obsolete String.Copy in netstandard","State":"open","Body":"This is obsoleted in .NET Core 3 (see https://github.com/dotnet/corefx/issues/32563). It needs to be obsoleted in netstandard as well for consistency.","Url":"https://github.com/dotnet/standard/issues/1374","RelatedDescription":"Open issue \"Obsolete String.Copy in netstandard\" (#1374)"},{"Id":"473519038","IsPullRequest":true,"CreatedAt":"2019-07-26T21:14:24","Actor":"wtgodbe","Number":"1373","RawContent":null,"Title":"Enable YAML Stages publishing","State":"closed","Body":"Resolves https://github.com/dotnet/standard/issues/1372 & takes care of https://github.com/dotnet/arcade/blob/master/Documentation/CorePackages/YamlStagesPublishing.md for Standard.\r\n\r\n@riarenas @safern PTAL\r\n\r\nDiff is easier to reason about if you just look at https://github.com/dotnet/standard/pull/1373/commits/a2553ad6d898cf5c2db8940eb6ad4c1f65448557 - the other commit just fixes indentation","Url":"https://github.com/dotnet/standard/pull/1373","RelatedDescription":"Closed or merged PR \"Enable YAML Stages publishing\" (#1373)"},{"Id":"473459061","IsPullRequest":false,"CreatedAt":"2019-07-26T21:14:24","Actor":"wtgodbe","Number":"1372","RawContent":null,"Title":"Use YAML stages publishing","State":"closed","Body":"See https://github.com/dotnet/arcade/blob/master/Documentation/CorePackages/YamlStagesPublishing.md for guidance - needs to done by 8/13.","Url":"https://github.com/dotnet/standard/issues/1372","RelatedDescription":"Closed issue \"Use YAML stages publishing\" (#1372)"},{"Id":"473345599","IsPullRequest":true,"CreatedAt":"2019-07-26T13:07:57","Actor":"dotnet-maestro[bot]","Number":"1371","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190725.17\r\n- **Date Produced**: 7/26/2019 6:46 AM\r\n- **Commit**: 98227597b152076cb02c55bb695c572c14284e32\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19375.17\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19375.17\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19375.17\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1371","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1371)"},{"Id":"473325489","IsPullRequest":true,"CreatedAt":"2019-07-26T12:04:24","Actor":"dotnet-maestro[bot]","Number":"1370","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190729.29\r\n- **Date Produced**: 7/29/2019 10:51 PM\r\n- **Commit**: 84d9a013b66c3e14a67ace0a99ae84e6eb8b6a7d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19379.29\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19379.29\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19379.29\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19379.29\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19379.29\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19379.29\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1370","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/arcade\" (#1370)"},{"Id":"472245036","IsPullRequest":true,"CreatedAt":"2019-07-25T22:51:23","Actor":"dotnet-maestro[bot]","Number":"1366","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190725.2\r\n- **Date Produced**: 7/25/2019 1:09 PM\r\n- **Commit**: 3dfa62fddcde597959c323d17426f215384e773a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19375.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19375.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19375.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19375.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19375.2\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19375.2\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1366","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1366)"},{"Id":"472873123","IsPullRequest":true,"CreatedAt":"2019-07-25T13:51:44","Actor":"dotnet-maestro[bot]","Number":"1369","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190724.11\r\n- **Date Produced**: 7/25/2019 6:46 AM\r\n- **Commit**: bdd0814360d4c3a58860919f292a306242f27da1\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19374.11\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19374.11\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19374.11\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1369","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1369)"},{"Id":"472753186","IsPullRequest":false,"CreatedAt":"2019-07-25T09:12:42","Actor":"guliteb","Number":"1368","RawContent":null,"Title":"System.Management Plans?","State":"open","Body":"I am developing UWP and want to access some system information via WMI.\r\n\r\nSo I want to ask if there is plan to support System.Management namespace in the future.\r\n\r\nThanks.","Url":"https://github.com/dotnet/standard/issues/1368","RelatedDescription":"Open issue \"System.Management Plans?\" (#1368)"},{"Id":"472270481","IsPullRequest":true,"CreatedAt":"2019-07-24T13:11:42","Actor":"dotnet-maestro[bot]","Number":"1367","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190724.2\r\n- **Date Produced**: 7/24/2019 11:35 AM\r\n- **Commit**: ca3fe6738ae6afc56e1f8fb5477a57a8dc2e183c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19374.2\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19374.2\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19374.2\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1367","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1367)"},{"Id":"471683422","IsPullRequest":true,"CreatedAt":"2019-07-23T13:11:11","Actor":"dotnet-maestro[bot]","Number":"1365","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190722.9\r\n- **Date Produced**: 7/23/2019 8:02 AM\r\n- **Commit**: b58a866ba8709d66eed52bb8ecb13966b7436a1d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19372.9\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19372.9\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19372.9\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1365","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1365)"},{"Id":"471657801","IsPullRequest":true,"CreatedAt":"2019-07-23T12:15:09","Actor":"dotnet-maestro[bot]","Number":"1364","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190722.10\r\n- **Date Produced**: 7/23/2019 2:43 AM\r\n- **Commit**: 0793e2df782efc9ccae387bc779b2549208fa4a1\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19372.10\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19372.10\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19372.10\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19372.10\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19372.10\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19372.10\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1364","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1364)"},{"Id":"471068821","IsPullRequest":true,"CreatedAt":"2019-07-22T12:41:52","Actor":"dotnet-maestro[bot]","Number":"1363","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190721.2\r\n- **Date Produced**: 7/21/2019 6:08 PM\r\n- **Commit**: 347412c9a917c71a744d8e20b090da90aa558a79\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19371.2\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19371.2\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19371.2\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1363","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1363)"},{"Id":"470778037","IsPullRequest":true,"CreatedAt":"2019-07-21T12:59:17","Actor":"dotnet-maestro[bot]","Number":"1362","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190720.5\r\n- **Date Produced**: 7/21/2019 4:24 AM\r\n- **Commit**: 9bb93a61365db848aaf914b5dfb8d6684df3335e\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19370.5\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19370.5\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19370.5\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1362","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1362)"},{"Id":"470671520","IsPullRequest":true,"CreatedAt":"2019-07-20T13:02:05","Actor":"dotnet-maestro[bot]","Number":"1361","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190719.9\r\n- **Date Produced**: 7/20/2019 6:18 AM\r\n- **Commit**: 45851336efa3b754f427d00cef3d388357aed308\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19369.9\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19369.9\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19369.9\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1361","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1361)"},{"Id":"470667719","IsPullRequest":true,"CreatedAt":"2019-07-20T12:15:15","Actor":"dotnet-maestro[bot]","Number":"1360","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190719.2\r\n- **Date Produced**: 7/19/2019 5:55 PM\r\n- **Commit**: a190d4865fe3c86a168ec49c4fc61c90c96ae051\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19369.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19369.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19369.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19369.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19369.2\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19369.2\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1360","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1360)"},{"Id":"470573371","IsPullRequest":true,"CreatedAt":"2019-07-19T23:02:20","Actor":"terrajobst","Number":"1359","RawContent":null,"Title":"Adds attribution for APIs previously specialcased by the compiler","State":"closed","Body":"Reviewed as #1356.","Url":"https://github.com/dotnet/standard/pull/1359","RelatedDescription":"Closed or merged PR \"Adds attribution for APIs previously specialcased by the compiler\" (#1359)"},{"Id":"470089821","IsPullRequest":true,"CreatedAt":"2019-07-19T21:44:01","Actor":"terrajobst","Number":"1356","RawContent":null,"Title":"Adds attribution for APIs previously special-cased by the compiler","State":"closed","Body":"This applies some of the nullable attributes for APIs that were previously special-cased by the compiler. The attribution is very basic only includes cases where we'e a 100% certain that these are never going to change.\r\n\r\nI've arrived here by diffing CoreFX and .NET Standard using the following approach:\r\n\r\n**Included**\r\n\r\n* `DoesNotReturn`\r\n* `DoesNotReturnIf`\r\n\r\n**Considered**\r\n\r\n* `NotNullWhen`\r\n\r\n**Excluded**\r\n\r\n* `MaybeNullWhenAttribute`\r\n* `MaybeNullAttribute`\r\n* `AllowNullAttribute`\r\n* `DisallowNullAttribute`\r\n* `NotNullAttribute`\r\n* `NotNullIfNotNullAttribute`\r\n\r\n@stephentoub @jcouv @dotnet/nullablefc: Please double check my work here.","Url":"https://github.com/dotnet/standard/pull/1356","RelatedDescription":"Closed or merged PR \"Adds attribution for APIs previously special-cased by the compiler\" (#1356)"},{"Id":"470307252","IsPullRequest":true,"CreatedAt":"2019-07-19T12:58:18","Actor":"dotnet-maestro[bot]","Number":"1358","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190718.5\r\n- **Date Produced**: 7/19/2019 2:12 AM\r\n- **Commit**: 182bed51dec709b3b1b56a4f435e0727e5dea110\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19368.5\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19368.5\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19368.5\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1358","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1358)"},{"Id":"470290592","IsPullRequest":true,"CreatedAt":"2019-07-19T12:14:40","Actor":"dotnet-maestro[bot]","Number":"1357","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190718.7\r\n- **Date Produced**: 7/18/2019 11:09 PM\r\n- **Commit**: eecde8a8751dbe7fdb17ba4dfbd032e26f4cae7d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19368.7\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19368.7\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19368.7\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19368.7\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19368.7\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19368.7\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1357","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1357)"},{"Id":"469972263","IsPullRequest":true,"CreatedAt":"2019-07-18T21:52:21","Actor":"terrajobst","Number":"1355","RawContent":null,"Title":"Add attributes for expressing nullability","State":"closed","Body":"Discussed in #1349.\r\n\r\n@danmosemsft, any objections taking this? \r\n\r\n/cc @wtgodbe ","Url":"https://github.com/dotnet/standard/pull/1355","RelatedDescription":"Closed or merged PR \"Add attributes for expressing nullability\" (#1355)"},{"Id":"469751295","IsPullRequest":true,"CreatedAt":"2019-07-18T20:38:18","Actor":"dotnet-maestro[bot]","Number":"1354","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190717.11\r\n- **Date Produced**: 7/18/2019 5:04 AM\r\n- **Commit**: ba2d62a24ea8574f40c43cd27cc384f079958a0c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19367.11\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19367.11\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19367.11\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1354","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1354)"},{"Id":"469365862","IsPullRequest":false,"CreatedAt":"2019-07-18T18:12:45","Actor":"codernator","Number":"1352","RawContent":null,"Title":"Interesting BadImageFormatException involving generics, deferred functions, and closures.","State":"closed","Body":"I stumbled over an edge case in which it is possible to write code that compiles but generates a BadImageFormatException with HResult: 0x8007000B during runtime. I originally found it in a C# 7.3 dotnet core 2.2 API application, but have reproduced it with a simple example in LINQPad 5, which uses C#7 and I believe dotnet standard 2.  The below contains both the exception generating code as well as similar counter-examples.\r\n\r\n\t/// <summary>\r\n\t/// Demonstrate how a generic function passing a closure to of a deferred function\r\n\t/// can create a BadImageFormatException. This includes an example of the exception,\r\n\t/// and similar examples that do not create the exception.\r\n\t/// </summary>\r\n\tstatic void Main()\r\n\t{\r\n\t\t// The data type and value is not important to this example.\r\n\t\t// Only the context in which this variable is used is important.\r\n\t\tvar myClosure = 0;\r\n\t\t\r\n\t\tHereComesTheException(new object[0]);\r\n\t\t//NonGenericNoException(new object[0]);\r\n\t\t//GenericWorkAroundA(new object[0]);\r\n\t\t//GenericWorkAroundB(new object[0]);\r\n\t\r\n\t\t// This fucntion creates a BadImageFormatException. Note the\r\n\t\t// use of myClosure within a deferred function that is\r\n\t\t// inline to a foreach. As far as I could read the IL, there is no\r\n\t\t// reference to myClosure in the scope of this function.\r\n\t\tvoid HereComesTheException<T>(IEnumerable<T> things)\r\n\t\t{\r\n\t\t\tforeach (var thing in things.Where(tt => myClosure == 0)) {}\r\n\t\t}\r\n\t\r\n\t\t// This function doesn't create a BadImageFormatException...\r\n\t\t// The only difference from HereComesTheException is that\r\n\t\t// this function is not generic.\r\n\t\tvoid NonGenericNoException(IEnumerable<object> things)\r\n\t\t{\r\n\t\t\tforeach (var thing in things.Where(tt => myClosure == 0)) {}\r\n\t\t}\r\n\t\r\n\t\t// This function doesn't create a BadImageFormatException because the\r\n\t\t// outer closure is stored in a local variable that is clearly in scope \r\n\t\t// when the deferred function is executed.\r\n\t\tvoid GenericWorkAroundA<T>(IEnumerable<T> things)\r\n\t\t{\r\n\t\t\tvar inner = myClosure;\r\n\t\t\tforeach (var thing in things.Where(tt => inner == 0)) {}\r\n\t\t}\r\n\t\t\r\n\t\t// This function doesn't create a BadImageFormatException... \r\n\t\t// Is this because declaring the Enumerator as a local variable forces\r\n\t\t// local context to be given to myClosure?\r\n\t\tvoid GenericWorkAroundB<T>(IEnumerable<T> things)\r\n\t\t{\r\n\t\t\tvar filtered = things.Where(tt => myClosure == 0);\r\n\t\t\tforeach (var thing in filtered) {}\r\n\t\t}\r\n\t}","Url":"https://github.com/dotnet/standard/issues/1352","RelatedDescription":"Closed issue \"Interesting BadImageFormatException involving generics, deferred functions, and closures.\" (#1352)"},{"Id":"469731560","IsPullRequest":true,"CreatedAt":"2019-07-18T17:36:33","Actor":"dotnet-maestro[bot]","Number":"1353","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190717.8\r\n- **Date Produced**: 7/17/2019 10:06 PM\r\n- **Commit**: 2359dc4184133defa27c8f3072622270b71b4ecf\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19367.8\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19367.8\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19367.8\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19367.8\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19367.8\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19367.8\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1353","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1353)"},{"Id":"469174631","IsPullRequest":true,"CreatedAt":"2019-07-17T13:00:53","Actor":"dotnet-maestro[bot]","Number":"1351","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190716.11\r\n- **Date Produced**: 7/17/2019 5:26 AM\r\n- **Commit**: da3d086edde315db03ff9b04c2926ab22940d50c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19366.11\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19366.11\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19366.11\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1351","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1351)"}],"ResultType":"GitHubIssue"},"CoreFx-Issues":{"Issues":[{"Id":"474900263","IsPullRequest":false,"CreatedAt":"2019-07-31T02:11:17","Actor":"summeney","Number":"39909","RawContent":null,"Title":"HttpClient send with no-ascii header value throw exception","State":"open","Body":"header value is no-ascii. we should pass.\r\nbut....\r\n\r\nHttpConnection.cs\r\n                     await WriteStringAsync(header.Value[0]).ConfigureAwait(false);\r\n\r\nthrow exception in WriteStringAsync\r\n\r\n                    if ((c & 0xFF80) != 0)\r\n                    {\r\n                        throw new HttpRequestException(SR.net_http_request_invalid_char_encoding);\r\n                    }\r\n\r\nboom...............","Url":"https://github.com/dotnet/corefx/issues/39909","RelatedDescription":"Open issue \"HttpClient send with no-ascii header value throw exception\" (#39909)"},{"Id":"474891287","IsPullRequest":false,"CreatedAt":"2019-07-31T01:26:25","Actor":"foxjazz","Number":"39908","RawContent":null,"Title":"process not sharing file for RW","State":"open","Body":"https://github.com/coding-reason/LogFileMonitor.git\r\n\r\nclone  run windows 10\r\n","Url":"https://github.com/dotnet/corefx/issues/39908","RelatedDescription":"Open issue \"process not sharing file for RW\" (#39908)"},{"Id":"474777127","IsPullRequest":true,"CreatedAt":"2019-07-31T00:43:57","Actor":"dotnet-maestro-bot","Number":"39895","RawContent":null,"Title":"Update BuildTools to rc1-04230-01 (release/uwp6.2)","State":"closed","Body":"/cc @dotnet/maestro-reviewers-core","Url":"https://github.com/dotnet/corefx/pull/39895","RelatedDescription":"Closed or merged PR \"Update BuildTools to rc1-04230-01 (release/uwp6.2)\" (#39895)"},{"Id":"474878675","IsPullRequest":true,"CreatedAt":"2019-07-31T00:23:09","Actor":"scalablecory","Number":"39907","RawContent":null,"Title":"HPACK decoder fixes","State":"open","Body":"- Fix HPACK decoder failing inconsistently with 0-length header names. Fail fast with same exception message that HTTP1 uses. Resolves #39873.\r\n- Fix `DynamicTable` returning incorrect values or throwing exceptions when it wraps its ring buffer. Resolves #39656.\r\n- Moves HPACK encoder methods from `Http2LoopbackConnection` into their own class.\r\n- Implement all forms of header encodings in HPACK encoder.\r\n- Move a number of files where they belong into the ProductionCode folder in unit test project.","Url":"https://github.com/dotnet/corefx/pull/39907","RelatedDescription":"Open PR \"HPACK decoder fixes\" (#39907)"},{"Id":"474869682","IsPullRequest":false,"CreatedAt":"2019-07-30T23:42:58","Actor":"wfurt","Number":"39906","RawContent":null,"Title":"platform detections is throwing on windows.10.amd64.serverrs5.open queue","State":"open","Body":"I bump to this while looking at #38046\r\nIt keeps failing with `System.InvalidOperationException` \r\n\r\n(jobid dd99f893-7693-4c2e-aef2-328a7ae8b538 for example)\r\n\r\n```\r\n   at System.PlatformDetection.get_IsInAppContainer() in /_/src/Common/tests/CoreFx.Private.TestUtilities/System/PlatformDetection.Windows.cs:line 238\r\n   at System.PlatformDetection.get_IsUap() in /_/src/Common/tests/CoreFx.Private.TestUtilities/System/PlatformDetection.Windows.cs:line 25\r\n   at System.Net.Http.Functional.Tests.HttpClientHandlerTestBase.CreateHttpClientHandler(Boolean useSocketsHttpHandler, Boolean useHttp2LoopbackServer) in /_/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTestBase.cs:line 75\r\n   at System.Net.Http.Functional.Tests.HttpClientHandlerTestBase.CreateHttpClientHandler() in /_/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTestBase.cs:line 59\r\n   at System.Net.Http.Functional.Tests.HttpClientHandlerTestBase.CreateHttpClient() in /_/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTestBase.cs:line 40\r\n   at System.Net.Http.Functional.Tests.HttpClientHandlerTest.GetAsync_IPv6LinkLocalAddressUri_Success() in /_/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.cs:line 243\r\n--- End of stack trace from previous location where exception was thrown ---\r\n```","Url":"https://github.com/dotnet/corefx/issues/39906","RelatedDescription":"Open issue \"platform detections is throwing on windows.10.amd64.serverrs5.open queue\" (#39906)"},{"Id":"474865470","IsPullRequest":false,"CreatedAt":"2019-07-30T23:25:04","Actor":"Joelius300","Number":"39905","RawContent":null,"Title":"Allow custom JsonConverters for base-classes","State":"open","Body":"I'm currently trying to migrate from `Newtonsoft.Json` to `System.Text.Json` and have to update my special enums (`ObjectEnum`s). The main reason for that is simply because [`IJSRuntime` has been migrated to `System.Text.Json`](https://github.com/aspnet/Announcements/issues/364) and my custom converters for `Newtonsoft.Json` don't work anymore.\r\n\r\n## Issue and solution\r\nI have a base class called `ObjectEnum`. This class can be inherited to get an enum which has backing values of different types. It is used for strongly-typed JS-interops and thus needs a custom serializer.  \r\n\r\nFirst of all let's look at `ObjectEnum`:\r\n```\r\npublic abstract class ObjectEnum\r\n{\r\n    internal object Value { get; }\r\n    \r\n    protected ObjectEnum(object value) => Value = value;\r\n\r\n    public override string ToString() => Value.ToString();\r\n    // operator and Equals/GetHashCode implementations omitted\r\n}\r\n```\r\n\r\nNow one of the implementations:\r\n```\r\npublic class SizeEnum : ObjectEnum\r\n{\r\n    // \"enum\"-values\r\n    public static SizeEnum Auto => new SizeEnum(\"auto\");\r\n    public static SizeEnum Number(int value) => new SizeEnum(value);\r\n\r\n    // private constructors\r\n    private SizeEnum(string value) : base(value) { }\r\n    private SizeEnum(int value) : base(value) { }\r\n}\r\n```\r\n\r\nFinally a use case: \r\n```\r\npublic class Config\r\n{\r\n    public SizeEnum Size { get; set; } = SizeEnum.Auto;\r\n}\r\n```\r\n\r\nNow if I just serialize `Config` without any custom converters I just get an empty object for `Size` because the property `Value` in `ObjectEnum` is not `public` so nothing is serialized.  \r\n\r\nWith `Newtonsoft.Json` I had a really simple (write-only for simplicity here) Converter for this: \r\n```\r\ninternal class ObjectEnumConverter : JsonConverter<ObjectEnum>\r\n{\r\n    public sealed override bool CanRead => false;\r\n    public sealed override bool CanWrite => true;\r\n\r\n    public sealed override ObjectEnum ReadJson(JsonReader reader, Type objectType, ObjectEnum existingValue, bool hasExistingValue, JsonSerializer serializer)\r\n    {\r\n        throw new NotImplementedException(\"Don't use me to read JSON\");\r\n    }\r\n\r\n    public override void WriteJson(JsonWriter writer, ObjectEnum wrapper, JsonSerializer serializer)\r\n    {\r\n        try\r\n        {\r\n            // if it can be written in a single JToken, \r\n            // json.net understands what type the wrapped object (.Value) is and serializes it accordingly -> correct value and type (eg. bool, string, double)\r\n            writer.WriteValue(wrapper.Value);\r\n        }\r\n        catch (JsonWriterException)\r\n        {\r\n            // if there was an error, try to explicitly serialize it before writing\r\n            // if this also fails just let it bubble up because the developer should not have values in their enum that fail here\r\n            serializer.Serialize(writer, wrapper.Value);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nI then put a `JsonConverterAttribute` to the `ObjectEnum`-class like so:  \r\n`[Newtonsoft.Json.JsonConverter(typeof(ObjectEnumConverter))]`\r\n\r\nAll classes which derived from `ObjectEnum` automatically had this converter applied so I did not need to add this converter to any other class or create custom converters for each new enum. After adding the attribute to the class, `Config` got serialized correctly (see below).  \r\n\r\n#### Without attribute/custom serializer\r\n```\r\n{\r\n    \"Size\":{}\r\n}\r\n```\r\n\r\n#### With attribute/custom serializer\r\n```\r\n{\r\n    \"Size\":\"auto\"\r\n}\r\n```\r\n\r\nNow when porting everything to `System.Text.Json` I implemented a `System.Text.Json.JsonConverter` for `ObjectEnum` just like I did with `Newtonsoft.Json` (which was even easier). Before I show any code, yes, I checked all the Namespaces and ensured that I did not accidentally use `Newtonsoft.Json` classes if I didn't intend to.\r\n```\r\ninternal class ObjectEnumConverter :  JsonConverter<ObjectEnum>\r\n{\r\n    public sealed override ObjectEnum Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)\r\n    {\r\n        throw new NotImplementedException(\"Don't use me to read JSON\");\r\n    }\r\n\r\n    public override void Write(System.Text.Json.Utf8JsonWriter writer, ObjectEnum value, System.Text.Json.JsonSerializerOptions options)\r\n    {\r\n        System.Text.Json.JsonSerializer.Serialize(writer, value.Value, value.Value.GetType(), options);\r\n    }\r\n}\r\n```\r\n\r\nThen I defined an attribute on my `ObjectEnum` just like I did before with the following code:  \r\n`[System.Text.Json.Serialization.JsonConverter(typeof(ObjectEnumConverter))]`\r\n\r\nTesting that resulted in an empty object just like without custom serializer (see above json). I also put a breakpoint in the `ObjectEnumConverter.Write` method and I can confirm that it never actually got to this converter.    \r\n\r\nNext thing I tried was applying the attribute to the implementation. This means I put the same attribute-code on my `SizeEnum`-class.  \r\nThis resulted in a weird `FormatException` which you can see below.  \r\n\r\n### System.FormatException\r\n\r\n#### Stacktrace:  \r\n```\r\n   at System.Text.StringBuilder.AppendFormatHelper(IFormatProvider provider, String format, ParamsArray args)\r\n   at System.String.FormatHelper(IFormatProvider provider, String format, ParamsArray args)\r\n   at System.String.Format(String format, Object arg0)\r\n   at System.SR.Format(String resourceFormat, Object p1)\r\n   at System.Text.Json.ThrowHelper.ThrowInvalidOperationException_SerializationConverterOnAttributeNotCompatible(Type classType, PropertyInfo propertyInfo)\r\n   at System.Text.Json.JsonSerializerOptions.GetConverterFromAttribute(JsonConverterAttribute converterAttribute, Type typeToConvert, Type classType, PropertyInfo propertyInfo)\r\n   at System.Text.Json.JsonSerializerOptions.GetConverter(Type typeToConvert)\r\n   at System.Text.Json.JsonClassInfo.GetClassType(Type type, JsonSerializerOptions options)\r\n   at System.Text.Json.JsonClassInfo.CreateProperty(Type declaredPropertyType, Type runtimePropertyType, PropertyInfo propertyInfo, Type parentClassType, JsonSerializerOptions options)\r\n   at System.Text.Json.JsonClassInfo.AddProperty(Type propertyType, PropertyInfo propertyInfo, Type classType, JsonSerializerOptions options)\r\n   at System.Text.Json.JsonClassInfo..ctor(Type type, JsonSerializerOptions options)\r\n   at System.Text.Json.JsonSerializerOptions.GetOrAddClass(Type classType)\r\n   at System.Text.Json.WriteStackFrame.Initialize(Type type, JsonSerializerOptions options)\r\n   at System.Text.Json.JsonSerializer.WriteCore(Utf8JsonWriter writer, PooledByteBufferWriter output, Object value, Type type, JsonSerializerOptions options)\r\n   at System.Text.Json.JsonSerializer.WriteCore(PooledByteBufferWriter output, Object value, Type type, JsonSerializerOptions options)\r\n   at System.Text.Json.JsonSerializer.WriteCoreString(Object value, Type type, JsonSerializerOptions options)\r\n   at System.Text.Json.JsonSerializer.Serialize[TValue](TValue value, JsonSerializerOptions options)\r\n```\r\n\r\n#### Message:  \r\n```\r\nIndex (zero based) must be greater than or equal to zero and less than the size of the argument list.\r\n```\r\n\r\n#### Source: \r\n`System.Private.CoreLib`\r\n\r\n\r\nAfter that I created a new `JsonConverter` for my `SizeEnum`. I only had to change the typeparam (and the name) from my `ObjectEnumConverter`.\r\n```\r\ninternal class SizeEnumConverter : JsonConverter<SizeEnum>\r\n{\r\n    public sealed override SizeEnum Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)\r\n    {\r\n        throw new NotImplementedException(\"Don't use me to read JSON\");\r\n    }\r\n\r\n    public override void Write(System.Text.Json.Utf8JsonWriter writer, SizeEnum value, System.Text.Json.JsonSerializerOptions options)\r\n    {\r\n        System.Text.Json.JsonSerializer.Serialize(writer, value.Value, value.Value.GetType(), options);\r\n    }\r\n}\r\n```\r\n\r\nI used this converter in the `JsonConverterAttribute` on `SizeEnum` like so:\r\n`[System.Text.Json.Serialization.JsonConverter(typeof(SizeEnumConverter))]`\r\n\r\nThis works! But I really don't think we want to persue this. It would be much more practical and nice if you were able to just put one converter for _all_ `ObjectEnum`s on the `ObjectEnum`-class and this one would be used if there is not a more concrete one (basically the same behaviour like `Newtonsoft.Json`).\r\n\r\nLet me know what you think of this idea, I think it would be a great addition :)  \r\n\r\n\r\nPs. It also doesn't work if you just use `JsonSerializer.Serialize` with `JsonSerializerOptions` where you add a new instance of `ObjectEnumConverter` to the `Converters` property. This approach wouldn't work for me anyway since my concern is `IJSRuntime` which currently doesn't support using your own `JsonSerializerOptions`.","Url":"https://github.com/dotnet/corefx/issues/39905","RelatedDescription":"Open issue \"Allow custom JsonConverters for base-classes\" (#39905)"},{"Id":"474865107","IsPullRequest":false,"CreatedAt":"2019-07-30T23:23:30","Actor":"BrennanConroy","Number":"39904","RawContent":null,"Title":"macOS Catalina fails in SslStream","State":"open","Body":"Using preview7 sdk\r\nRepro:\r\n```\r\n> dotnet new mvc\r\n> dotnet run\r\nnavigate to https://localhost:5001\r\n```\r\n\r\n```\r\nFailed to authenticate HTTPS connection.\r\nSystem.Security.Authentication.AuthenticationException: Authentication failed, see inner exception.\r\n ---> Interop+AppleCrypto+SslException: Internal error\r\n   --- End of inner exception stack trace ---\r\n   at System.Net.Security.SslStream.StartSendAuthResetSignal(ProtocolToken message, AsyncProtocolRequest asyncRequest, ExceptionDispatchInfo exception)\r\n   at System.Net.Security.SslStream.CheckCompletionBeforeNextReceive(ProtocolToken message, AsyncProtocolRequest asyncRequest)\r\n   at System.Net.Security.SslStream.StartSendBlob(Byte[] incoming, Int32 count, AsyncProtocolRequest asyncRequest)\r\n   at System.Net.Security.SslStream.ProcessReceivedBlob(Byte[] buffer, Int32 count, AsyncProtocolRequest asyncRequest)\r\n   at System.Net.Security.SslStream.StartReadFrame(Byte[] buffer, Int32 readBytes, AsyncProtocolRequest asyncRequest)\r\n   at System.Net.Security.SslStream.StartReceiveBlob(Byte[] buffer, AsyncProtocolRequest asyncRequest)\r\n   at System.Net.Security.SslStream.ForceAuthentication(Boolean receiveFirst, Byte[] buffer, AsyncProtocolRequest asyncRequest)\r\n   at System.Net.Security.SslStream.ProcessAuthentication(LazyAsyncResult lazyResult, CancellationToken cancellationToken)\r\n   at System.Net.Security.SslStream.BeginAuthenticateAsServer(SslServerAuthenticationOptions sslServerAuthenticationOptions, CancellationToken cancellationToken, AsyncCallback asyncCallback, Object asyncState)\r\n   at System.Net.Security.SslStream.<>c.<AuthenticateAsServerAsync>b__69_0(SslServerAuthenticationOptions arg1, CancellationToken arg2, AsyncCallback callback, Object state)\r\n   at System.Threading.Tasks.TaskFactory`1.FromAsyncImpl[TArg1,TArg2](Func`5 beginMethod, Func`2 endFunction, Action`1 endAction, TArg1 arg1, TArg2 arg2, Object state, TaskCreationOptions creationOptions)\r\n   at System.Threading.Tasks.TaskFactory.FromAsync[TArg1,TArg2](Func`5 beginMethod, Action`1 endMethod, TArg1 arg1, TArg2 arg2, Object state, TaskCreationOptions creationOptions)\r\n   at System.Threading.Tasks.TaskFactory.FromAsync[TArg1,TArg2](Func`5 beginMethod, Action`1 endMethod, TArg1 arg1, TArg2 arg2, Object state)\r\n   at System.Net.Security.SslStream.AuthenticateAsServerAsync(SslServerAuthenticationOptions sslServerAuthenticationOptions, CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Https.Internal.HttpsConnectionMiddleware.InnerOnConnectionAsync(ConnectionContext context)\r\n```\r\n\r\ncc @danmosemsft @bartonjs ","Url":"https://github.com/dotnet/corefx/issues/39904","RelatedDescription":"Open issue \"macOS Catalina fails in SslStream\" (#39904)"},{"Id":"474847405","IsPullRequest":false,"CreatedAt":"2019-07-30T22:18:44","Actor":"Joelius300","Number":"39903","RawContent":null,"Title":"System.Text.Json.JsonSerializer doesn't correctly serialize generic super class when nested","State":"open","Body":"I'm currently trying to migrate from `Newtonsoft.Json` to `System.Text.Json`. The main reason for that is simply because [`IJSRuntime` has been migrated to `System.Text.Json`](https://github.com/aspnet/Announcements/issues/364) but this doesn't really matter for this bug.  \r\n\r\nWhile testing how things get serialized currently (with `System.Text.Json`) and comparing that to `Newtonsoft.Json`s output I have found what I believe to be a (rather critical) bug.  \r\n\r\n## Bug\r\n\r\nI have an `InnerContainer` and an `OuterContainer`. The `InnerContainer` has to be generic but I also have to be able to generalize it. This is done via an empty class which is not generic. The classes are defined as follows:\r\n\r\n```\r\n// non-generic for generalization\r\npublic abstract class InnerContainer { }\r\n\r\n// generic for actual use\r\npublic class InnerContainer<TValue> : InnerContainer\r\n{\r\n    public TValue Value { get; set; }\r\n}\r\n\r\npublic class OuterContainer\r\n{\r\n    // use of non-generic class, actual type can of course be generic (derived class)\r\n    public InnerContainer Container { get; set; }\r\n}\r\n```\r\n\r\nNow the bug happens when serializing an instance of `OuterContainer`.  \r\nThe following is the serialization code:  \r\n```\r\n// note this is declared as the non-generic type, just like in OuterContainer\r\nInnerContainer inner = new InnerContainer<string>   // actual type is generic\r\n{\r\n    Value = \"StringValue\"\r\n};\r\n\r\nOuterContainer outer = new OuterContainer\r\n{\r\n    Container = inner\r\n};\r\n\r\n// serialize inner\r\nstring innerJsonSystemTextJson = JsonSerializer.Serialize(inner);\r\nstring innerJsonNewtonsoft = Newtonsoft.Json.JsonConvert.SerializeObject(inner);\r\n\r\n// serialize outer\r\nstring outerJsonSystemTextJson = JsonSerializer.Serialize(outer);\r\nstring outerJsonNewtonsoft = Newtonsoft.Json.JsonConvert.SerializeObject(outer);\r\n```\r\n\r\nBelow are the results of the above code:  \r\n\r\n### Inner container directly\r\n#### Newtonsoft.Json (innerJsonNewtonsoft)\r\n`{\"Value\":\"StringValue\"}`\r\n\r\n#### System.Text.Json (innerJsonSystemTextJson)\r\n`{\"Value\":\"StringValue\"}`\r\n\r\n### Outer container\r\n#### Newtonsoft.Json (outerJsonNewtonsoft)\r\n`{\"Container\":{\"Value\":\"StringValue\"}}`\r\n\r\n#### System.Text.Json (outerJsonSystemTextJson)\r\n`{\"Container\":{}}`\r\n\r\nAs you can see if we directly serialize the inner container it works without any issues and produces the same results with both serializers.  \r\nOn the other hand if we serialize the outer one (which contains the inner container) only `Newtonsoft.Json` produces the correct result.  \r\n\r\nWhy does `System.Text.Json` write an empty object instead of the expected value?\r\n\r\n\r\n## Further examination/information\r\n\r\nIf I add a property to the non-generic `InnerContainer` like so..\r\n```\r\npublic abstract class InnerContainer\r\n{\r\n    public int MyInt { get; set; } = 3;\r\n}\r\n```\r\n\r\n.. the output changes like you would expect.\r\n\r\n### Inner container directly\r\n#### Newtonsoft.Json (innerJsonNewtonsoft)\r\n`{\"Value\":\"StringValue\",\"MyInt\":3}`\r\n\r\n#### System.Text.Json (innerJsonSystemTextJson)\r\n`{\"Value\":\"StringValue\",\"MyInt\":3}`\r\n\r\n### Outer container\r\n#### Newtonsoft.Json (outerJsonNewtonsoft)\r\n`{\"Container\":{\"Value\":\"StringValue\",\"MyInt\":3}}`\r\n\r\n#### System.Text.Json (outerJsonSystemTextJson)\r\n`{\"Container\":{\"MyInt\":3}}`\r\n\r\n`MyInt` does get serialized but `Value` still doesn't - if nested in `OuterContainer`.  \r\n\r\nI believe there must be some bug in the library which chooses the wrong type (declaring type instead of actual type maybe?) for serialization. I'm no expert of course this is just what I suspect :)  \r\n\r\nIs this a bug which can be expected to be fixed in upcoming previews?  \r\n\r\nVersion Information:\r\n- **IDE:** Newest preview of VS 2019 (unrelated I think)\r\n- **SDK:** .Net Core 3.0.100-preview7-012821","Url":"https://github.com/dotnet/corefx/issues/39903","RelatedDescription":"Open issue \"System.Text.Json.JsonSerializer doesn't correctly serialize generic super class when nested\" (#39903)"},{"Id":"474842477","IsPullRequest":true,"CreatedAt":"2019-07-30T22:02:43","Actor":"stephentoub","Number":"39902","RawContent":null,"Title":"Add TrailingHeaders to HttpResponseMessage.ToString output","State":"open","Body":"Fixes https://github.com/dotnet/corefx/issues/39891\r\ncc: @dotnet/ncl \r\n\r\nSeemed better to not include the trailing headers in the same grouping as the other headers, since they're fundamentally different.  If folks prefer a different representation, just let me know; this seemed reasonable.","Url":"https://github.com/dotnet/corefx/pull/39902","RelatedDescription":"Open PR \"Add TrailingHeaders to HttpResponseMessage.ToString output\" (#39902)"},{"Id":"474361187","IsPullRequest":true,"CreatedAt":"2019-07-30T21:37:00","Actor":"scalablecory","Number":"39880","RawContent":null,"Title":"Fix DynamicTableSizeUpdate_Exceeds_Settings_Throws","State":"closed","Body":"Fixes test by reading correct exception structure.\r\n\r\nResolves #39876.","Url":"https://github.com/dotnet/corefx/pull/39880","RelatedDescription":"Closed or merged PR \"Fix DynamicTableSizeUpdate_Exceeds_Settings_Throws\" (#39880)"},{"Id":"474832513","IsPullRequest":true,"CreatedAt":"2019-07-30T21:36:27","Actor":"dotnet-maestro-bot","Number":"39901","RawContent":null,"Title":"[automated] Merge branch 'release/2.1' => 'release/2.2'","State":"open","Body":"I detected changes in the release/2.1 branch which have not been merged yet to release/2.2. I'm a robot and am configured to help you automatically keep release/2.2 up to date, so I've opened this PR.\r\n\r\nThis PR merges commits made on release/2.1 by the following committers:\n\n* @mmitche\n* @dotnet-maestro-bot\r\n\r\n## Instructions for merging from UI\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, complete this PR by creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nIf this repo does not allow creating merge commits from the GitHub UI, use command line instructions.\r\n\r\n## Instructions for merging via command line\r\n\r\nRun these commands to merge this pull request from the command line.\r\n\r\n``` sh\r\ngit fetch\r\ngit checkout release/2.1\r\ngit pull --ff-only\r\ngit checkout release/2.2\r\ngit pull --ff-only\r\ngit merge --no-ff release/2.1\r\n\r\n# If there are merge conflicts, resolve them and then run git merge --continue to complete the merge\r\n# Pushing the changes to the PR branch will re-trigger PR validation.\r\ngit push https://github.com/dotnet-maestro-bot/corefx HEAD:merge/release/2.1-to-release/2.2\r\n```\r\n\r\n<details>\r\n<summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit push git@github.com:dotnet-maestro-bot/corefx HEAD:merge/release/2.1-to-release/2.2\r\n```\r\n\r\n</details>\r\n\r\n\r\nAfter PR checks are complete push the branch\r\n```\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging. You can do this [using GitHub][resolve-github] or using the [command line][resolve-cli].\r\n\r\n[resolve-github]: https://help.github.com/articles/resolving-a-merge-conflict-on-github/\r\n[resolve-cli]: https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/\r\n\r\n## Instructions for updating this pull request\r\n\r\nContributors to this repo have permission update this pull request by pushing to the branch 'merge/release/2.1-to-release/2.2'. This can be done to resolve conflicts or make other changes to this pull request before it is merged.\r\n\r\n```\r\ngit checkout -b merge/release/2.1-to-release/2.2 release/2.2\r\ngit pull https://github.com/dotnet-maestro-bot/corefx merge/release/2.1-to-release/2.2\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push https://github.com/dotnet-maestro-bot/corefx merge/release/2.1-to-release/2.2\r\n```\r\n\r\n<details>\r\n    <summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit checkout -b merge/release/2.1-to-release/2.2 release/2.2\r\ngit pull git@github.com:dotnet-maestro-bot/corefx merge/release/2.1-to-release/2.2\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push git@github.com:dotnet-maestro-bot/corefx merge/release/2.1-to-release/2.2\r\n```\r\n\r\n</details>\r\n\r\nContact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.\r\n","Url":"https://github.com/dotnet/corefx/pull/39901","RelatedDescription":"Open PR \"[automated] Merge branch 'release/2.1' => 'release/2.2'\" (#39901)"},{"Id":"474786888","IsPullRequest":true,"CreatedAt":"2019-07-30T21:34:12","Actor":"dotnet-maestro-bot","Number":"39896","RawContent":null,"Title":"Update BuildTools to preview1-04230-02 (release/2.2)","State":"closed","Body":"/cc @dotnet/maestro-reviewers-core","Url":"https://github.com/dotnet/corefx/pull/39896","RelatedDescription":"Closed or merged PR \"Update BuildTools to preview1-04230-02 (release/2.2)\" (#39896)"},{"Id":"474777086","IsPullRequest":true,"CreatedAt":"2019-07-30T21:33:41","Actor":"dotnet-maestro-bot","Number":"39894","RawContent":null,"Title":"Update BuildTools to rc1-04230-01 (release/2.1)","State":"closed","Body":"/cc @dotnet/maestro-reviewers-core","Url":"https://github.com/dotnet/corefx/pull/39894","RelatedDescription":"Closed or merged PR \"Update BuildTools to rc1-04230-01 (release/2.1)\" (#39894)"},{"Id":"474830826","IsPullRequest":true,"CreatedAt":"2019-07-30T21:31:49","Actor":"steveharter","Number":"39900","RawContent":null,"Title":"Add Encode(Span<char>) API","State":"open","Body":"Fixes https://github.com/dotnet/corefx/issues/39523\r\n\r\nFor performance adds the API linked above for encoding char. Also changes the semantics of System.Text.Json to use the replacement character for Utf16 to bad surrogate pairs instead of throwing - this makes it consistent with Utf8 and the default behavior of System.Text.Encoding.Json.\r\n\r\nImproves performance of Utf16 encoding (with custom encode) by ~25% by avoiding Utf16->Utf8->Utf16 conversions:\r\n```\r\nBefore\r\n|            Method |       Mean |    Error  |   StdDev  |     Median |        Min |        Max | Gen 0/1k Op | Gen 1/1k Op | Gen 2/1k Op | Allocated Memory/Op |\r\n| EscapeUtf16Custom | 1,745.3 ns | 19.710 ns | 16.459 ns | 1,749.1 ns | 1,719.2 ns | 1,774.9 ns |      0.2635 |           - |           - |             1.66 KB |\r\n|  EscapeUtf8Custom | 1,606.9 ns |  8.175 ns |  6.827 ns | 1,607.7 ns | 1,593.5 ns | 1,618.8 ns |      0.2657 |           - |           - |             1.66 KB |\r\n\r\nAfter\r\n| EscapeUtf16Custom | 1,285.4 ns | 17.460 ns | 16.332 ns | 1,279.2 ns | 1,264.2 ns | 1,312.6 ns |      0.2684 |           - |           - |             1.66 KB |\r\n|  EscapeUtf8Custom | 1,150.1 ns |  9.990 ns |  9.344 ns | 1,149.0 ns | 1,133.8 ns | 1,167.3 ns |      0.2702 |           - |           - |             1.66 KB |\r\n```\r\n\r\nAlso by changing code in System.Text.Json, improves performance of Utf8 escaping when no escaping needs to occur (~15% faster), or occurs later in the string:\r\n```\r\nBefore\r\n|            Method | Formatted | SkipValidation |     Escaped |      Mean |     Error |    StdDev |    Median |       Min |       Max | Gen 0/1k Op | Gen 1/1k Op | Gen 2/1k Op | Allocated Memory/Op |\r\n|------------------ |---------- |--------------- |------------ |----------:|----------:|----------:|----------:|----------:|----------:|------------:|------------:|------------:|--------------------:|\r\n|  WriteStringsUtf8 |     False |          False |  AllEscaped | 54.647 ms | 0.1615 ms | 0.1432 ms | 54.612 ms | 54.468 ms | 54.922 ms |           - |           - |           - |               120 B |\r\n|  WriteStringsUtf8 |     False |          False |  OneEscaped |  9.646 ms | 0.0793 ms | 0.0742 ms |  9.615 ms |  9.583 ms |  9.812 ms |           - |           - |           - |               120 B |\r\n|  WriteStringsUtf8 |     False |          False | NoneEscaped |  6.866 ms | 0.2275 ms | 0.2620 ms |  6.759 ms |  6.555 ms |  7.303 ms |           - |           - |           - |               120 B |\r\n\r\n\r\nAfter\r\n|  WriteStringsUtf8 |     False |          False |  AllEscaped | 52.957 ms | 0.5980 ms | 0.5594 ms | 52.929 ms | 52.145 ms | 53.978 ms |           - |           - |           - |               120 B |\r\n|  WriteStringsUtf8 |     False |          False |  OneEscaped |  8.678 ms | 0.0992 ms | 0.0879 ms |  8.688 ms |  8.529 ms |  8.845 ms |           - |           - |           - |               120 B |\r\n|  WriteStringsUtf8 |     False |          False | NoneEscaped |  5.604 ms | 0.0700 ms | 0.0655 ms |  5.610 ms |  5.495 ms |  5.757 ms |           - |           - |           - |               120 B |\r\n```\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/39900","RelatedDescription":"Open PR \"Add Encode(Span<char>) API\" (#39900)"},{"Id":"474821686","IsPullRequest":true,"CreatedAt":"2019-07-30T21:08:12","Actor":"stephentoub","Number":"39899","RawContent":null,"Title":"Re-enable CA1823 (unused private fields)","State":"open","Body":"cc: @bartonjs, @danmosemsft ","Url":"https://github.com/dotnet/corefx/pull/39899","RelatedDescription":"Open PR \"Re-enable CA1823 (unused private fields)\" (#39899)"},{"Id":"474800981","IsPullRequest":false,"CreatedAt":"2019-07-30T20:18:18","Actor":"jlchavez","Number":"39898","RawContent":null,"Title":"Delay Sign CertificateRequest with ECSDA key pair","State":"open","Body":"I've been trying to delay sign a CertificateRequest with a CA Certificate that has ECSDA Key Pair.\r\nSince .net core has not way of loading the CertificteRequest from a CER File, I've tried BouncyCastle.NetCore 1.8.5. to load it to a CertificationRequestInfo.\r\n\r\nThe CA Certificate is stored on Windows or on a .PFX file with password.\r\nFor purposes of signing I need to build the ECSDA Private Key again, or provider a AsymmetricCipherKeyPair with the ECPublicKeyParameters and ECPrivateKeyParameters (both from BouncyCastle), \r\n\r\n`            string curveName = \"P-521\";\r\n            X9ECParameters ecP = NistNamedCurves.GetByName(curveName);\r\n            var ecdomain = new ECDomainParameters(ecP.Curve, ecP.G, ecP.N);\r\n            var pr = new ECPrivateKeyParameters(\"ECDSA\", new BigInteger(signer.GetECDsaPrivateKey().ExportParameters(true).D), ecdomain);\r\n            var signatureFactory = new Asn1SignatureFactory(\"SHA512WITHECSDA\", pr, random);\r\n`\r\n\r\nWhen getting to the ExportParameters(true) call I get\r\n\r\n`Unhandled Exception: Internal.Cryptography.CryptoThrowHelper+WindowsCryptographicException: The requested operation is not supported`\r\n\r\nThe certificate has the private key, the code is running as an administrator, and also the certificate has been granted access to the private key with ACLs. I've also tested that I can encrypt, decrypt, sign and verify the signature, with no problem at all.\r\n\r\nAny suggestions on what is wrong? any alternate way to delay sign my certificate with ECSDA keys? or how to get the Certificate's Private Key? Should I also store it on Cng? Wouldn't I have the same problem?","Url":"https://github.com/dotnet/corefx/issues/39898","RelatedDescription":"Open issue \"Delay Sign CertificateRequest with ECSDA key pair\" (#39898)"},{"Id":"474793641","IsPullRequest":false,"CreatedAt":"2019-07-30T20:00:20","Actor":"JeffreyZhao","Number":"39897","RawContent":null,"Title":"Change to source code in CoreLib has no effect","State":"open","Body":"I'm trying to contribute to corefx since I've found a bug in System.dll. \r\n\r\n1. I forked the project and build as documented with `build & build -buildtests -test`, which looks good as expected.\r\n2. I searched for the test file for the class I'm going to change and find it in `System.Runtime\\tests`, although the source code is in `src\\Common\\src\\CoreLib\\System`. I added some unit tests to the test file, rebuild the tests and execute them by `build -buildtests -test`, and those new test cases failed as expected.\r\n3. I fix the code in `src\\Common\\src\\CoreLib\\System`, rebuild by `build`, and then `build -buildtests -test` again, those tests still fails as no change has been made.\r\n4. I went back the source code and write some code that cannot be compiled, and then `build` again. The build succeeded. It seems it hasn't picked up the change I've make.\r\n5. I did a clean by `build -clean` and repeated the whole build process, and it's all the same.\r\n\r\nSo I have some questions:\r\n\r\n1. Why my changes to the CoreLib cannot be picked by the build process. Is that the correct place to change?\r\n2. Why the tests are in `src\\System.Runtime` but the source code is in `src\\Common\\src\\CoreLib`?\r\n3. When I exam the build results, I found the dlls like `mscorlib.dll` or `System.dll` are all \"reference dll\" with metadata only. Where's the real dll with implementation in it?\r\n\r\nThanks\r\nJeff","Url":"https://github.com/dotnet/corefx/issues/39897","RelatedDescription":"Open issue \"Change to source code in CoreLib has no effect\" (#39897)"},{"Id":"474747035","IsPullRequest":true,"CreatedAt":"2019-07-30T18:33:00","Actor":"mmitche","Number":"39893","RawContent":null,"Title":"[release/2.1] Update signing certificates from sha1 to sha2","State":"open","Body":"","Url":"https://github.com/dotnet/corefx/pull/39893","RelatedDescription":"Open PR \"[release/2.1] Update signing certificates from sha1 to sha2\" (#39893)"},{"Id":"474693376","IsPullRequest":false,"CreatedAt":"2019-07-30T16:50:36","Actor":"imranbaloch","Number":"39892","RawContent":null,"Title":"Unhandled exception at 0x77256214 (ntdll.dll) in My.exe: 0xC0000374: A heap has been corrupted (parameters: 0x77272378).","State":"open","Body":"I have a long-running .NET console application (4.6.1). Suddenly since fews days I am getting this error in Visual Studio,\r\n\r\n`Unhandled exception at 0x77256214 (ntdll.dll) in My.exe: 0xC0000374: A heap has been corrupted (parameters: 0x77272378).`\r\n\r\nPressing F5 again, it shows me another stuck and then stuck with the same error,\r\n\r\n`Exception thrown at 0x771B234D (ntdll.dll) in My.exe: 0xC0000005: Access violation reading location 0x656C6573.`\r\n\r\nI have global try catch which is not triggering in the console application. I have added,\r\n\r\n`<legacyCorruptedStateExceptionsPolicy enabled=\"true\" /> ` and `[HandleProcessCorruptedStateExceptionsAttribute]` but still application crashes without hitting the breakpoint. Then I tried WinDBG (`.loadby sos clr` then `!analyze -v` then `!CLRStack -a` then `!dumpstackobjects`),\r\n\r\n```\r\nOS Thread Id: 0x3da4 (0)\r\nChild SP       IP Call Site\r\n007cea38 771ac33c [GCFrame: 007cea38] \r\n007cea54 771ac33c [HelperMethodFrame_1OBJ: 007cea54] System.Threading.Monitor.ReliableEnter(System.Object, Boolean ByRef)\r\n007cead0 60f98710 System.Collections.Hashtable+SyncHashtable.Remove(System.Object) [f:\\dd\\ndp\\clr\\src\\BCL\\system\\collections\\hashtable.cs @ 1518]\r\n\r\n\r\n007ceafc 0db7405f Oracle.DataAccess.Client.OracleResourcePool.RemoveResourceHolder(Oracle.DataAccess.Client.OracleResourceHolder)\r\n\r\n007ceb28 0db73ffd Oracle.DataAccess.Client.OracleResourceHolder.Dispose()\r\n\r\n007ceb34 0db7386f Oracle.DataAccess.Client.OracleResourceHolder.TransactionCompleted(System.Object, System.Transactions.TransactionEventArgs)\r\n  \r\n007ceb38 0086e053 [InlinedCallFrame: 007ceb38] \r\n007cebb0 0086e053 [MulticastFrame: 007cebb0] System.Transactions.TransactionCompletedEventHandler.Invoke(System.Object, System.Transactions.TransactionEventArgs)\r\n007cebdc 556cc0fb System.Transactions.InternalTransaction.FireCompletion()\r\n\r\n007cebf0 556ea3f2 System.Transactions.TransactionStatePromotedAborted.EnterState(System.Transactions.InternalTransaction)\r\n  \r\n007cec08 556ed9c0 System.Transactions.TransactionStateDelegatedAborting.ChangeStatePromotedAborted(System.Transactions.InternalTransaction)\r\n\r\n007cec14 556ee8ba System.Transactions.DurableEnlistmentDelegated.Aborted(System.Transactions.InternalEnlistment, System.Exception)\r\n\r\n\r\n007cec24 556e34d6 System.Transactions.SinglePhaseEnlistment.Aborted()\r\n\r\n\r\n007cec6c 0e36d662 Oracle.DataAccess.Client.PromotableTxnMgr.Rollback(System.Transactions.SinglePhaseEnlistment)\r\n\r\n007cec90 556ed922 System.Transactions.TransactionStateDelegatedAborting.EnterState(System.Transactions.InternalTransaction)\r\n\r\n007cecd4 556eb8f5 System.Transactions.TransactionStateDelegated.Rollback(System.Transactions.InternalTransaction, System.Exception)\r\n\r\n007cece4 556c9c0a System.Transactions.Transaction.Rollback()\r\n\r\n007ced18 556f0f43 System.Transactions.TransactionScope.InternalDispose()\r\n\r\n007ced50 556f0da7 System.Transactions.TransactionScope.Dispose()\r\n\r\n007cee04 0d49f9ae MyApp.Program.method()\r\n```\r\n\r\nClearly, it's related to TransactionScope and Oracle but dunno why its crashing. For now I am just looking for a work around\r\n\r\n","Url":"https://github.com/dotnet/corefx/issues/39892","RelatedDescription":"Open issue \"Unhandled exception at 0x77256214 (ntdll.dll) in My.exe: 0xC0000374: A heap has been corrupted (parameters: 0x77272378).\" (#39892)"},{"Id":"474677883","IsPullRequest":false,"CreatedAt":"2019-07-30T16:15:24","Actor":"Tratcher","Number":"39891","RawContent":null,"Title":"HttpResponseMessage.ToString should include TrailingHeaders","State":"open","Body":"HttpResponseMessage.ToString includes response headers and content headers, but not trailers.\r\nhttps://github.com/dotnet/corefx/blob/da0ebf17b2c0e7e707e4555242f170e2146d98be/src/System.Net.Http/src/System/Net/Http/HttpResponseMessage.cs#L199\r\n\r\n```\r\nvar result = await client.GetAsync(Address);\r\nConsole.WriteLine(result);\r\nConsole.WriteLine(result.TrailingHeaders);\r\n```\r\n```\r\nStatusCode: 200, ReasonPhrase: 'OK', Version: 2.0, Content: System.Net.Http.HttpConnectionResponseContent, Headers:\r\n{\r\n  Date: Tue, 30 Jul 2019 16:13:38 GMT\r\n  Trailer: Server-Timing\r\n  Server: Kestrel\r\n}\r\nserver-timing: app;dur=0.0\r\n```","Url":"https://github.com/dotnet/corefx/issues/39891","RelatedDescription":"Open issue \"HttpResponseMessage.ToString should include TrailingHeaders\" (#39891)"},{"Id":"474660475","IsPullRequest":false,"CreatedAt":"2019-07-30T15:40:53","Actor":"tannergooding","Number":"39890","RawContent":null,"Title":"Audit the existing System.Numerics tests to validate the inputs are not all the same","State":"open","Body":"It was discovered that https://github.com/dotnet/corefx/pull/31779 introduced a regression due to the values for certain tests being the same between the LHS and RHS inputs.\r\n\r\nWe should audit the tests to ensure that they are testing unique inputs as well so that core functionality isn't missed and more regressions aren't introduced.","Url":"https://github.com/dotnet/corefx/issues/39890","RelatedDescription":"Open issue \"Audit the existing System.Numerics tests to validate the inputs are not all the same\" (#39890)"},{"Id":"474654621","IsPullRequest":true,"CreatedAt":"2019-07-30T15:29:41","Actor":"tannergooding","Number":"39889","RawContent":null,"Title":"fix Matrix4x4 + and - operator bugs (#39838)","State":"open","Body":"### Description\r\n\r\nhttps://github.com/dotnet/corefx/pull/31779 brought a perf improvement to the `Matrix4x4` addition and subtraction operators, but also introduced a functional regression due to using the left-hand side variable twice.\r\n\r\n### Customer Impact\r\n\r\nCustomers using the addition or subtraction operators on `Matrix4x4` will compute the wrong result\r\n\r\n### Regression?\r\n\r\nYes, as per the description.\r\n\r\n### Risk\r\n\r\nLow. The tests are being updated to use different values for the left and right hand side inputs to validate this stays correct and we don't accidentally introduce bugs like this in the future.","Url":"https://github.com/dotnet/corefx/pull/39889","RelatedDescription":"Open PR \"fix Matrix4x4 + and - operator bugs (#39838)\" (#39889)"},{"Id":"474599325","IsPullRequest":false,"CreatedAt":"2019-07-30T13:53:41","Actor":"stephentoub","Number":"39888","RawContent":null,"Title":"Microsoft.VisualBasic.Core test differences between .NET Framework and .NET Core","State":"open","Body":"A bunch of the FinancialTests are failing when run on netfx:\r\n```\r\n      Microsoft.VisualBasic.Tests.FinancialTests.FV(Rate: 0.00166666666666667, NPer: 12, Pmt: -100, PV: -100, Due: BegOfPeriod, expectedOld: 1315.09821202641, expectedNew: 1315.09821202641) [FAIL]\r\n        Assert.Equal() Failure\r\n        Expected: 1315.09821202641\r\n        Actual:   1315.09821202641\r\n        Stack Trace:\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(21,0): at Microsoft.VisualBasic.Tests.FinancialTests.AreEqual[T](T expectedOld, T expectedNew, T actual)\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(62,0): at Microsoft.VisualBasic.Tests.FinancialTests.FV(Double Rate, Double NPer, Double Pmt, Double PV, DueDate Due, Double expectedOld, Double expectedNew)\r\n      Microsoft.VisualBasic.Tests.FinancialTests.FV(Rate: 0.0083, NPer: 15, Pmt: 263, PV: 0, Due: EndOfPeriod, expectedOld: -4182.65729113816, expectedNew: -4182.65729113816) [FAIL]\r\n        Assert.Equal() Failure\r\n        Expected: -4182.65729113816\r\n        Actual:   -4182.65729113816\r\n        Stack Trace:\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(21,0): at Microsoft.VisualBasic.Tests.FinancialTests.AreEqual[T](T expectedOld, T expectedNew, T actual)\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(62,0): at Microsoft.VisualBasic.Tests.FinancialTests.FV(Double Rate, Double NPer, Double Pmt, Double PV, DueDate Due, Double expectedOld, Double expectedNew)\r\n      Microsoft.VisualBasic.Tests.FinancialTests.FV(Rate: 0.013, NPer: 90, Pmt: 81, PV: 5000, Due: BegOfPeriod, expectedOld: -29860.9051541809, expectedNew: -29860.9051541809) [FAIL]\r\n        Assert.Equal() Failure\r\n        Expected: -29860.9051541809\r\n        Actual:   -29860.9051541809\r\n        Stack Trace:\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(21,0): at Microsoft.VisualBasic.Tests.FinancialTests.AreEqual[T](T expectedOld, T expectedNew, T actual)\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(62,0): at Microsoft.VisualBasic.Tests.FinancialTests.FV(Double Rate, Double NPer, Double Pmt, Double PV, DueDate Due, Double expectedOld, Double expectedNew)\r\n      Microsoft.VisualBasic.Tests.FinancialTests.FV(Rate: 0.01, NPer: 37, Pmt: 100, PV: 0, Due: BegOfPeriod, expectedOld: -4495.27236141772, expectedNew: -4495.27236141772) [FAIL]\r\n        Assert.Equal() Failure\r\n        Expected: -4495.27236141772\r\n        Actual:   -4495.27236141772\r\n        Stack Trace:\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(21,0): at Microsoft.VisualBasic.Tests.FinancialTests.AreEqual[T](T expectedOld, T expectedNew, T actual)\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(62,0): at Microsoft.VisualBasic.Tests.FinancialTests.FV(Double Rate, Double NPer, Double Pmt, Double PV, DueDate Due, Double expectedOld, Double expectedNew)\r\n      Microsoft.VisualBasic.Tests.FinancialTests.FV(Rate: -0.0083, NPer: 15, Pmt: 263, PV: 0, Due: EndOfPeriod, expectedOld: -3723.83765008048, expectedNew: -3723.83765008048) [FAIL]\r\n        Assert.Equal() Failure\r\n        Expected: -3723.83765008048\r\n        Actual:   -3723.83765008048\r\n        Stack Trace:\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(21,0): at Microsoft.VisualBasic.Tests.FinancialTests.AreEqual[T](T expectedOld, T expectedNew, T actual)\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(62,0): at Microsoft.VisualBasic.Tests.FinancialTests.FV(Double Rate, Double NPer, Double Pmt, Double PV, DueDate Due, Double expectedOld, Double expectedNew)\r\n      Microsoft.VisualBasic.Tests.FinancialTests.FV(Rate: 1E+25, NPer: 12, Pmt: 1797, PV: 0, Due: BegOfPeriod, expectedOld: -1.797E+303, expectedNew: -1.797E+303) [FAIL]\r\n        Assert.Equal() Failure\r\n        Expected: -1.797E+303\r\n        Actual:   -1.797E+303\r\n        Stack Trace:\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(21,0): at Microsoft.VisualBasic.Tests.FinancialTests.AreEqual[T](T expectedOld, T expectedNew, T actual)\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(62,0): at Microsoft.VisualBasic.Tests.FinancialTests.FV(Double Rate, Double NPer, Double Pmt, Double PV, DueDate Due, Double expectedOld, Double expectedNew)\r\n      Microsoft.VisualBasic.Tests.FinancialTests.PPmt(Rate: 0.00166666666666667, Per: 1, NPer: 24, PV: -10000, FV: 0, Due: BegOfPeriod, expectedOld: 424.694809003121, expectedNew: 424.694809003121) [FAIL]\r\n        Assert.Equal() Failure\r\n        Expected: 424.694809003121\r\n        Actual:   424.694809003121\r\n        Stack Trace:\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(21,0): at Microsoft.VisualBasic.Tests.FinancialTests.AreEqual[T](T expectedOld, T expectedNew, T actual)\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(221,0): at Microsoft.VisualBasic.Tests.FinancialTests.PPmt(Double Rate, Double Per, Double NPer, Double PV, Double FV, DueDate Due, Double expectedOld, Double expectedNew)\r\n      Microsoft.VisualBasic.Tests.FinancialTests.PPmt(Rate: 0.008, Per: 4, NPer: 12, PV: 3000, FV: 0, Due: EndOfPeriod, expectedOld: -244.976482926292, expectedNew: -244.976482926292) [FAIL]\r\n        Assert.Equal() Failure\r\n        Expected: -244.976482926292\r\n        Actual:   -244.976482926292\r\n        Stack Trace:\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(21,0): at Microsoft.VisualBasic.Tests.FinancialTests.AreEqual[T](T expectedOld, T expectedNew, T actual)\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(221,0): at Microsoft.VisualBasic.Tests.FinancialTests.PPmt(Double Rate, Double Per, Double NPer, Double PV, Double FV, DueDate Due, Double expectedOld, Double expectedNew)\r\n      Microsoft.VisualBasic.Tests.FinancialTests.PPmt(Rate: 0.012, Per: 15, NPer: 79, PV: 2387, FV: 200, Due: BegOfPeriod, expectedOld: -23.1486833595771, expectedNew: -23.1486833595771) [FAIL]\r\n        Assert.Equal() Failure\r\n        Expected: -23.1486833595771\r\n        Actual:   -23.1486833595771\r\n        Stack Trace:\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(21,0): at Microsoft.VisualBasic.Tests.FinancialTests.AreEqual[T](T expectedOld, T expectedNew, T actual)\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(221,0): at Microsoft.VisualBasic.Tests.FinancialTests.PPmt(Double Rate, Double Per, Double NPer, Double PV, Double FV, DueDate Due, Double expectedOld, Double expectedNew)\r\n      Microsoft.VisualBasic.Tests.FinancialTests.PPmt(Rate: 0.0096, Per: 54, NPer: 123, PV: 4760, FV: 0, Due: EndOfPeriod, expectedOld: -33.8688007923638, expectedNew: -33.8688007923638) [FAIL]\r\n        Assert.Equal() Failure\r\n        Expected: -33.8688007923638\r\n        Actual:   -33.8688007923638\r\n        Stack Trace:\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(21,0): at Microsoft.VisualBasic.Tests.FinancialTests.AreEqual[T](T expectedOld, T expectedNew, T actual)\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(221,0): at Microsoft.VisualBasic.Tests.FinancialTests.PPmt(Double Rate, Double Per, Double NPer, Double PV, Double FV, DueDate Due, Double expectedOld, Double expectedNew)\r\n      Microsoft.VisualBasic.Tests.FinancialTests.PPmt(Rate: -0.008, Per: 4, NPer: 12, PV: 3000, FV: 0, Due: EndOfPeriod, expectedOld: -254.972824918514, expectedNew: -254.972824918514) [FAIL]\r\n        Assert.Equal() Failure\r\n        Expected: -254.972824918514\r\n        Actual:   -254.972824918514\r\n        Stack Trace:\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(21,0): at Microsoft.VisualBasic.Tests.FinancialTests.AreEqual[T](T expectedOld, T expectedNew, T actual)\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(221,0): at Microsoft.VisualBasic.Tests.FinancialTests.PPmt(Double Rate, Double Per, Double NPer, Double PV, Double FV, DueDate Due, Double expectedOld, Double expectedNew)\r\n      Microsoft.VisualBasic.Tests.FinancialTests.PPmt(Rate: 0.008, Per: 4, NPer: 12, PV: 3000, FV: 0, Due: 7, expectedOld: -243.03222512529, expectedNew: -243.03222512529) [FAIL]\r\n        Assert.Equal() Failure\r\n        Expected: -243.03222512529\r\n        Actual:   -243.03222512529\r\n        Stack Trace:\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(21,0): at Microsoft.VisualBasic.Tests.FinancialTests.AreEqual[T](T expectedOld, T expectedNew, T actual)\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(221,0): at Microsoft.VisualBasic.Tests.FinancialTests.PPmt(Double Rate, Double Per, Double NPer, Double PV, Double FV, DueDate Due, Double expectedOld, Double expectedNew)\r\n      Microsoft.VisualBasic.Tests.FinancialTests.Pmt_Default [FAIL]\r\n        Assert.Equal() Failure\r\n        Expected: 131.224540233228\r\n        Actual:   131.224540233228\r\n        Stack Trace:\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(21,0): at Microsoft.VisualBasic.Tests.FinancialTests.AreEqual[T](T expectedOld, T expectedNew, T actual)\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(207,0): at Microsoft.VisualBasic.Tests.FinancialTests.Pmt_Default()\r\n      Microsoft.VisualBasic.Tests.FinancialTests.IRR(ValueArray: [-10000, 6000, -2000, 7000, 1000], Guess: 0.1, expectedOld: 0.0866720474291716, expectedNew: 0.0866720474291716) [FAIL]\r\n        Assert.Equal() Failure\r\n        Expected: 0.0866720474291716\r\n        Actual:   0.0866720474291716\r\n        Stack Trace:\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(21,0): at Microsoft.VisualBasic.Tests.FinancialTests.AreEqual[T](T expectedOld, T expectedNew, T actual)\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(111,0): at Microsoft.VisualBasic.Tests.FinancialTests.IRR(Double[] ValueArray, Double Guess, Double expectedOld, Double expectedNew)\r\n      Microsoft.VisualBasic.Tests.FinancialTests.IRR(ValueArray: [-30000, -10000, 25000, 12000, 15000], Guess: 0.1, expectedOld: 0.10928101434576, expectedNew: 0.10928101434576) [FAIL]\r\n        Assert.Equal() Failure\r\n        Expected: 0.10928101434576\r\n        Actual:   0.10928101434576\r\n        Stack Trace:\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(21,0): at Microsoft.VisualBasic.Tests.FinancialTests.AreEqual[T](T expectedOld, T expectedNew, T actual)\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(111,0): at Microsoft.VisualBasic.Tests.FinancialTests.IRR(Double[] ValueArray, Double Guess, Double expectedOld, Double expectedNew)\r\n      Microsoft.VisualBasic.Tests.FinancialTests.SLN(Cost: 54870, Salvage: 21008, Life: 7, expectedOld: 4837.42857142857, expectedNew: 4837.42857142857) [FAIL]\r\n        Assert.Equal() Failure\r\n        Expected: 4837.42857142857\r\n        Actual:   4837.42857142857\r\n        Stack Trace:\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(21,0): at Microsoft.VisualBasic.Tests.FinancialTests.AreEqual[T](T expectedOld, T expectedNew, T actual)\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(290,0): at Microsoft.VisualBasic.Tests.FinancialTests.SLN(Double Cost, Double Salvage, Double Life, Double expectedOld, Double expectedNew)\r\n      Microsoft.VisualBasic.Tests.FinancialTests.SLN(Cost: 5000, Salvage: 0, Life: 12, expectedOld: 416.666666666667, expectedNew: 416.666666666667) [FAIL]\r\n        Assert.Equal() Failure\r\n        Expected: 416.666666666667\r\n        Actual:   416.666666666667\r\n        Stack Trace:\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(21,0): at Microsoft.VisualBasic.Tests.FinancialTests.AreEqual[T](T expectedOld, T expectedNew, T actual)\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(290,0): at Microsoft.VisualBasic.Tests.FinancialTests.SLN(Double Cost, Double Salvage, Double Life, Double expectedOld, Double expectedNew)\r\n      Microsoft.VisualBasic.Tests.FinancialTests.Pmt(Rate: 0.00166666666666667, NPer: 24, PV: -10000, FV: 0, Due: BegOfPeriod, expectedOld: 424.694809003121, expectedNew: 424.694809003121) [FAIL]\r\n        Assert.Equal() Failure\r\n        Expected: 424.694809003121\r\n        Actual:   424.694809003121\r\n        Stack Trace:\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(21,0): at Microsoft.VisualBasic.Tests.FinancialTests.AreEqual[T](T expectedOld, T expectedNew, T actual)\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(201,0): at Microsoft.VisualBasic.Tests.FinancialTests.Pmt(Double Rate, Double NPer, Double PV, Double FV, DueDate Due, Double expectedOld, Double expectedNew)\r\n      Microsoft.VisualBasic.Tests.FinancialTests.Pmt(Rate: 0.007, NPer: 25, PV: -3000, FV: 0, Due: EndOfPeriod, expectedOld: 131.224540233228, expectedNew: 131.224540233228) [FAIL]\r\n        Assert.Equal() Failure\r\n        Expected: 131.224540233228\r\n        Actual:   131.224540233228\r\n        Stack Trace:\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(21,0): at Microsoft.VisualBasic.Tests.FinancialTests.AreEqual[T](T expectedOld, T expectedNew, T actual)\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(201,0): at Microsoft.VisualBasic.Tests.FinancialTests.Pmt(Double Rate, Double NPer, Double PV, Double FV, DueDate Due, Double expectedOld, Double expectedNew)\r\n      Microsoft.VisualBasic.Tests.FinancialTests.Pmt(Rate: 0.019, NPer: 70, PV: 80000, FV: 20000, Due: BegOfPeriod, expectedOld: -2173.61322345131, expectedNew: -2173.61322345131) [FAIL]\r\n        Assert.Equal() Failure\r\n        Expected: -2173.61322345131\r\n        Actual:   -2173.61322345131\r\n        Stack Trace:\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(21,0): at Microsoft.VisualBasic.Tests.FinancialTests.AreEqual[T](T expectedOld, T expectedNew, T actual)\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(201,0): at Microsoft.VisualBasic.Tests.FinancialTests.Pmt(Double Rate, Double NPer, Double PV, Double FV, DueDate Due, Double expectedOld, Double expectedNew)\r\n      Microsoft.VisualBasic.Tests.FinancialTests.Pmt(Rate: 0.0012, NPer: 5, PV: 500, FV: 0, Due: EndOfPeriod, expectedOld: -100.360287827152, expectedNew: -100.360287827152) [FAIL]\r\n        Assert.Equal() Failure\r\n        Expected: -100.360287827152\r\n        Actual:   -100.360287827152\r\n        Stack Trace:\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(21,0): at Microsoft.VisualBasic.Tests.FinancialTests.AreEqual[T](T expectedOld, T expectedNew, T actual)\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(201,0): at Microsoft.VisualBasic.Tests.FinancialTests.Pmt(Double Rate, Double NPer, Double PV, Double FV, DueDate Due, Double expectedOld, Double expectedNew)\r\n      Microsoft.VisualBasic.Tests.FinancialTests.Pmt(Rate: -0.007, NPer: 25, PV: -3000, FV: 0, Due: EndOfPeriod, expectedOld: 109.386677326841, expectedNew: 109.386677326841) [FAIL]\r\n        Assert.Equal() Failure\r\n        Expected: 109.386677326841\r\n        Actual:   109.386677326841\r\n        Stack Trace:\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(21,0): at Microsoft.VisualBasic.Tests.FinancialTests.AreEqual[T](T expectedOld, T expectedNew, T actual)\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(201,0): at Microsoft.VisualBasic.Tests.FinancialTests.Pmt(Double Rate, Double NPer, Double PV, Double FV, DueDate Due, Double expectedOld, Double expectedNew)\r\n      Microsoft.VisualBasic.Tests.FinancialTests.Pmt(Rate: 0.007, NPer: -25, PV: 3000, FV: 0, Due: EndOfPeriod, expectedOld: 110.224540233228, expectedNew: 110.224540233228) [FAIL]\r\n        Assert.Equal() Failure\r\n        Expected: 110.224540233228\r\n        Actual:   110.224540233228\r\n        Stack Trace:\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(21,0): at Microsoft.VisualBasic.Tests.FinancialTests.AreEqual[T](T expectedOld, T expectedNew, T actual)\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(201,0): at Microsoft.VisualBasic.Tests.FinancialTests.Pmt(Double Rate, Double NPer, Double PV, Double FV, DueDate Due, Double expectedOld, Double expectedNew)\r\n      Microsoft.VisualBasic.Tests.FinancialTests.Pmt(Rate: 0.007, NPer: 25, PV: 3000, FV: 0, Due: 7, expectedOld: -130.31235375693, expectedNew: -130.31235375693) [FAIL]\r\n        Assert.Equal() Failure\r\n        Expected: -130.31235375693\r\n        Actual:   -130.31235375693\r\n        Stack Trace:\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(21,0): at Microsoft.VisualBasic.Tests.FinancialTests.AreEqual[T](T expectedOld, T expectedNew, T actual)\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(201,0): at Microsoft.VisualBasic.Tests.FinancialTests.Pmt(Double Rate, Double NPer, Double PV, Double FV, DueDate Due, Double expectedOld, Double expectedNew)\r\n      Microsoft.VisualBasic.Tests.FinancialTests.DDB(Cost: 10000, Salvage: 4350, Life: 84, Period: 35, Factor: 2, expectedOld: 57.3268063538875, expectedNew: 57.3268063538875) [FAIL]\r\n        Assert.Equal() Failure\r\n        Expected: 57.3268063538875\r\n        Actual:   57.3268063538875\r\n        Stack Trace:\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(21,0): at Microsoft.VisualBasic.Tests.FinancialTests.AreEqual[T](T expectedOld, T expectedNew, T actual)\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(34,0): at Microsoft.VisualBasic.Tests.FinancialTests.DDB(Double Cost, Double Salvage, Double Life, Double Period, Double Factor, Double expectedOld, Double expectedNew)\r\n      Microsoft.VisualBasic.Tests.FinancialTests.DDB(Cost: 15006, Salvage: 6350, Life: 81, Period: 23, Factor: 1.5, expectedOld: 184.194898366662, expectedNew: 184.194898366662) [FAIL]\r\n        Assert.Equal() Failure\r\n        Expected: 184.194898366662\r\n        Actual:   184.194898366662\r\n        Stack Trace:\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(21,0): at Microsoft.VisualBasic.Tests.FinancialTests.AreEqual[T](T expectedOld, T expectedNew, T actual)\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(34,0): at Microsoft.VisualBasic.Tests.FinancialTests.DDB(Double Cost, Double Salvage, Double Life, Double Period, Double Factor, Double expectedOld, Double expectedNew)\r\n      Microsoft.VisualBasic.Tests.FinancialTests.DDB(Cost: 11606, Salvage: 6350, Life: 74, Period: 17, Factor: 2.1, expectedOld: 207.790109365989, expectedNew: 207.790109365989) [FAIL]\r\n        Assert.Equal() Failure\r\n        Expected: 207.790109365989\r\n        Actual:   207.790109365989\r\n        Stack Trace:\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(21,0): at Microsoft.VisualBasic.Tests.FinancialTests.AreEqual[T](T expectedOld, T expectedNew, T actual)\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(34,0): at Microsoft.VisualBasic.Tests.FinancialTests.DDB(Double Cost, Double Salvage, Double Life, Double Period, Double Factor, Double expectedOld, Double expectedNew)\r\n      Microsoft.VisualBasic.Tests.FinancialTests.NPer_Default [FAIL]\r\n        Assert.Equal() Failure\r\n        Expected: 21.6727748893013\r\n        Actual:   21.6727748893013\r\n        Stack Trace:\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(21,0): at Microsoft.VisualBasic.Tests.FinancialTests.AreEqual[T](T expectedOld, T expectedNew, T actual)\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(163,0): at Microsoft.VisualBasic.Tests.FinancialTests.NPer_Default()\r\n      Microsoft.VisualBasic.Tests.FinancialTests.IPmt_Default [FAIL]\r\n        Assert.Equal() Failure\r\n        Expected: -18.2133959841799\r\n        Actual:   -18.2133959841799\r\n        Stack Trace:\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(21,0): at Microsoft.VisualBasic.Tests.FinancialTests.AreEqual[T](T expectedOld, T expectedNew, T actual)\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(91,0): at Microsoft.VisualBasic.Tests.FinancialTests.IPmt_Default()\r\n      Microsoft.VisualBasic.Tests.FinancialTests.PV_Default [FAIL]\r\n        Assert.Equal() Failure\r\n        Expected: -2952.94485232014\r\n        Actual:   -2952.94485232014\r\n        Stack Trace:\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(21,0): at Microsoft.VisualBasic.Tests.FinancialTests.AreEqual[T](T expectedOld, T expectedNew, T actual)\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(249,0): at Microsoft.VisualBasic.Tests.FinancialTests.PV_Default()\r\n      Microsoft.VisualBasic.Tests.FinancialTests.DDB_Default [FAIL]\r\n        Assert.Equal() Failure\r\n        Expected: 57.3268063538875\r\n        Actual:   57.3268063538875\r\n        Stack Trace:\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(21,0): at Microsoft.VisualBasic.Tests.FinancialTests.AreEqual[T](T expectedOld, T expectedNew, T actual)\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(40,0): at Microsoft.VisualBasic.Tests.FinancialTests.DDB_Default()\r\n      Microsoft.VisualBasic.Tests.FinancialTests.SYD(Cost: 1000, Salvage: 800, Life: 50, Period: 2, expectedOld: 7.68627450980392, expectedNew: 7.68627450980392) [FAIL]\r\n        Assert.Equal() Failure\r\n        Expected: 7.68627450980392\r\n        Actual:   7.68627450980392\r\n        Stack Trace:\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(21,0): at Microsoft.VisualBasic.Tests.FinancialTests.AreEqual[T](T expectedOld, T expectedNew, T actual)\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(303,0): at Microsoft.VisualBasic.Tests.FinancialTests.SYD(Double Cost, Double Salvage, Double Life, Double Period, Double expectedOld, Double expectedNew)\r\n      Microsoft.VisualBasic.Tests.FinancialTests.SYD(Cost: 4322, Salvage: 1009, Life: 73, Period: 23, expectedOld: 62.5557201036653, expectedNew: 62.5557201036653) [FAIL]\r\n        Assert.Equal() Failure\r\n        Expected: 62.5557201036653\r\n        Actual:   62.5557201036653\r\n        Stack Trace:\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(21,0): at Microsoft.VisualBasic.Tests.FinancialTests.AreEqual[T](T expectedOld, T expectedNew, T actual)\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(303,0): at Microsoft.VisualBasic.Tests.FinancialTests.SYD(Double Cost, Double Salvage, Double Life, Double Period, Double expectedOld, Double expectedNew)\r\n      Microsoft.VisualBasic.Tests.FinancialTests.SYD(Cost: 78000, Salvage: 21008, Life: 8, Period: 2, expectedOld: 11081.7777777778, expectedNew: 11081.7777777778) [FAIL]\r\n        Assert.Equal() Failure\r\n        Expected: 11081.7777777778\r\n        Actual:   11081.7777777778\r\n        Stack Trace:\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(21,0): at Microsoft.VisualBasic.Tests.FinancialTests.AreEqual[T](T expectedOld, T expectedNew, T actual)\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(303,0): at Microsoft.VisualBasic.Tests.FinancialTests.SYD(Double Cost, Double Salvage, Double Life, Double Period, Double expectedOld, Double expectedNew)\r\n      Microsoft.VisualBasic.Tests.FinancialTests.SYD(Cost: 23, Salvage: 7, Life: 21, Period: 9, expectedOld: 0.9004329004329, expectedNew: 0.9004329004329) [FAIL]\r\n        Assert.Equal() Failure\r\n        Expected: 0.9004329004329\r\n        Actual:   0.9004329004329\r\n        Stack Trace:\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(21,0): at Microsoft.VisualBasic.Tests.FinancialTests.AreEqual[T](T expectedOld, T expectedNew, T actual)\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(303,0): at Microsoft.VisualBasic.Tests.FinancialTests.SYD(Double Cost, Double Salvage, Double Life, Double Period, Double expectedOld, Double expectedNew)\r\n      Microsoft.VisualBasic.Tests.FinancialTests.SYD(Cost: 9.9999999999999E+305, Salvage: 0, Life: 100, Period: 10, expectedOld: 1.80198019801978E+304, expectedNew: 1.80198019801978E+304) [FAIL]\r\n        Assert.Equal() Failure\r\n        Expected: 1.80198019801978E+304\r\n        Actual:   1.80198019801978E+304\r\n        Stack Trace:\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(21,0): at Microsoft.VisualBasic.Tests.FinancialTests.AreEqual[T](T expectedOld, T expectedNew, T actual)\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(303,0): at Microsoft.VisualBasic.Tests.FinancialTests.SYD(Double Cost, Double Salvage, Double Life, Double Period, Double expectedOld, Double expectedNew)\r\n      Microsoft.VisualBasic.Tests.FinancialTests.SYD(Cost: 1009, Salvage: 4322, Life: 73, Period: 23, expectedOld: -62.5557201036653, expectedNew: -62.5557201036653) [FAIL]\r\n        Assert.Equal() Failure\r\n        Expected: -62.5557201036653\r\n        Actual:   -62.5557201036653\r\n        Stack Trace:\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(21,0): at Microsoft.VisualBasic.Tests.FinancialTests.AreEqual[T](T expectedOld, T expectedNew, T actual)\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(303,0): at Microsoft.VisualBasic.Tests.FinancialTests.SYD(Double Cost, Double Salvage, Double Life, Double Period, Double expectedOld, Double expectedNew)\r\n      Microsoft.VisualBasic.Tests.FinancialTests.MIRR(ValueArray: [-70000, 22000, 25000, 28000, 31000], FinanceRate: 0.1, ReinvestRate: 0.12, expectedOld: 0.155127062819277, expectedNew: 0.155127062819277) [FAIL]\r\n        Assert.Equal() Failure\r\n        Expected: 0.155127062819277\r\n        Actual:   0.155127062819277\r\n        Stack Trace:\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(21,0): at Microsoft.VisualBasic.Tests.FinancialTests.AreEqual[T](T expectedOld, T expectedNew, T actual)\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(135,0): at Microsoft.VisualBasic.Tests.FinancialTests.MIRR(Double[] ValueArray, Double FinanceRate, Double ReinvestRate, Double expectedOld, Double expectedNew)\r\n        Assert.Equal() Failure\r\n      Microsoft.VisualBasic.Tests.FinancialTests.Rate_Default [FAIL]\r\n        Expected: 0.00788643837763396\r\n        Actual:   0.00788643837763396\r\n        Stack Trace:\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(21,0): at Microsoft.VisualBasic.Tests.FinancialTests.AreEqual[T](T expectedOld, T expectedNew, T actual)\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(268,0): at Microsoft.VisualBasic.Tests.FinancialTests.Rate_Default()\r\n      Microsoft.VisualBasic.Tests.FinancialTests.FV_Default [FAIL]\r\n        Assert.Equal() Failure\r\n        Expected: -4182.65729113816\r\n        Actual:   -4182.65729113816\r\n        Stack Trace:\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(21,0): at Microsoft.VisualBasic.Tests.FinancialTests.AreEqual[T](T expectedOld, T expectedNew, T actual)\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(68,0): at Microsoft.VisualBasic.Tests.FinancialTests.FV_Default()\r\n      Microsoft.VisualBasic.Tests.FinancialTests.NPer(Rate: 0.00166666666666667, Pmt: -800, PV: 10000, FV: 0, Due: BegOfPeriod, expectedOld: 12.6213107881059, expectedNew: 12.6213107881059) [FAIL]\r\n        Assert.Equal() Failure\r\n        Expected: 12.6213107881059\r\n        Actual:   12.6213107881059\r\n        Stack Trace:\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(21,0): at Microsoft.VisualBasic.Tests.FinancialTests.AreEqual[T](T expectedOld, T expectedNew, T actual)\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(157,0): at Microsoft.VisualBasic.Tests.FinancialTests.NPer(Double Rate, Double Pmt, Double PV, Double FV, DueDate Due, Double expectedOld, Double expectedNew)\r\n      Microsoft.VisualBasic.Tests.FinancialTests.NPer(Rate: 0.0072, Pmt: -350, PV: 7000, FV: 0, Due: EndOfPeriod, expectedOld: 21.6727748893013, expectedNew: 21.6727748893013) [FAIL]\r\n        Assert.Equal() Failure\r\n        Expected: 21.6727748893013\r\n        Actual:   21.6727748893013\r\n        Stack Trace:\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(21,0): at Microsoft.VisualBasic.Tests.FinancialTests.AreEqual[T](T expectedOld, T expectedNew, T actual)\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(157,0): at Microsoft.VisualBasic.Tests.FinancialTests.NPer(Double Rate, Double Pmt, Double PV, Double FV, DueDate Due, Double expectedOld, Double expectedNew)\r\n      Microsoft.VisualBasic.Tests.FinancialTests.NPer(Rate: 0.018, Pmt: -982, PV: 33000, FV: 2387, Due: BegOfPeriod, expectedOld: 52.9127060554833, expectedNew: 52.9127060554833) [FAIL]\r\n        Assert.Equal() Failure\r\n        Expected: 52.9127060554833\r\n        Actual:   52.9127060554833\r\n        Stack Trace:\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(21,0): at Microsoft.VisualBasic.Tests.FinancialTests.AreEqual[T](T expectedOld, T expectedNew, T actual)\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(157,0): at Microsoft.VisualBasic.Tests.FinancialTests.NPer(Double Rate, Double Pmt, Double PV, Double FV, DueDate Due, Double expectedOld, Double expectedNew)\r\n      Microsoft.VisualBasic.Tests.FinancialTests.NPer(Rate: -0.0072, Pmt: -350, PV: 7000, FV: 0, Due: EndOfPeriod, expectedOld: 18.6174997871788, expectedNew: 18.6174997871788) [FAIL]\r\n        Assert.Equal() Failure\r\n        Expected: 18.6174997871788\r\n        Actual:   18.6174997871788\r\n        Stack Trace:\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(21,0): at Microsoft.VisualBasic.Tests.FinancialTests.AreEqual[T](T expectedOld, T expectedNew, T actual)\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(157,0): at Microsoft.VisualBasic.Tests.FinancialTests.NPer(Double Rate, Double Pmt, Double PV, Double FV, DueDate Due, Double expectedOld, Double expectedNew)\r\n      Microsoft.VisualBasic.Tests.FinancialTests.NPer(Rate: 0.0072, Pmt: -350, PV: 7000, FV: 0, Due: 7, expectedOld: 21.5052532943763, expectedNew: 21.5052532943763) [FAIL]\r\n        Assert.Equal() Failure\r\n        Expected: 21.5052532943763\r\n        Actual:   21.5052532943763\r\n        Stack Trace:\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(21,0): at Microsoft.VisualBasic.Tests.FinancialTests.AreEqual[T](T expectedOld, T expectedNew, T actual)\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(157,0): at Microsoft.VisualBasic.Tests.FinancialTests.NPer(Double Rate, Double Pmt, Double PV, Double FV, DueDate Due, Double expectedOld, Double expectedNew)\r\n      Microsoft.VisualBasic.Tests.FinancialTests.NPer(Rate: 0.0072, Pmt: -9000, PV: 200, FV: 0, Due: EndOfPeriod, expectedOld: 0.0223039109268324, expectedNew: 0.0223039109268324) [FAIL]\r\n        Assert.Equal() Failure\r\n        Expected: 0.0223039109268324\r\n        Actual:   0.0223039109268324\r\n        Stack Trace:\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(21,0): at Microsoft.VisualBasic.Tests.FinancialTests.AreEqual[T](T expectedOld, T expectedNew, T actual)\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(157,0): at Microsoft.VisualBasic.Tests.FinancialTests.NPer(Double Rate, Double Pmt, Double PV, Double FV, DueDate Due, Double expectedOld, Double expectedNew)\r\n      Microsoft.VisualBasic.Tests.FinancialTests.Rate(NPer: 24, Pmt: -800, PV: 10000, FV: 0, Due: BegOfPeriod, Guess: 0.1, expectedOld: 0.0676702786565114, expectedNew: 0.0676702786565114) [FAIL]\r\n        Assert.Equal() Failure\r\n        Expected: 0.0676702786565114\r\n        Actual:   0.0676702786565114\r\n        Stack Trace:\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(21,0): at Microsoft.VisualBasic.Tests.FinancialTests.AreEqual[T](T expectedOld, T expectedNew, T actual)\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(262,0): at Microsoft.VisualBasic.Tests.FinancialTests.Rate(Double NPer, Double Pmt, Double PV, Double FV, DueDate Due, Double Guess, Double expectedOld, Double expectedNew)\r\n      Microsoft.VisualBasic.Tests.FinancialTests.Rate(NPer: 12, Pmt: -263, PV: 3000, FV: 0, Due: EndOfPeriod, Guess: 0.1, expectedOld: 0.00788643837763396, expectedNew: 0.00788643837763396) [FAIL]\r\n        Assert.Equal() Failure\r\n        Expected: 0.00788643837763396\r\n        Actual:   0.00788643837763396\r\n        Stack Trace:\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(21,0): at Microsoft.VisualBasic.Tests.FinancialTests.AreEqual[T](T expectedOld, T expectedNew, T actual)\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(262,0): at Microsoft.VisualBasic.Tests.FinancialTests.Rate(Double NPer, Double Pmt, Double PV, Double FV, DueDate Due, Double Guess, Double expectedOld, Double expectedNew)\r\n      Microsoft.VisualBasic.Tests.FinancialTests.Rate(NPer: 48, Pmt: -570, PV: 24270, FV: 0, Due: BegOfPeriod, Guess: 0.1, expectedOld: 0.00522401643399906, expectedNew: 0.00522401643399908) [FAIL]\r\n        Assert.Equal() Failure\r\n        Expected: 0.00522401643399906\r\n        Actual:   0.00522401643399908\r\n        Stack Trace:\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(21,0): at Microsoft.VisualBasic.Tests.FinancialTests.AreEqual[T](T expectedOld, T expectedNew, T actual)\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(262,0): at Microsoft.VisualBasic.Tests.FinancialTests.Rate(Double NPer, Double Pmt, Double PV, Double FV, DueDate Due, Double Guess, Double expectedOld, Double expectedNew)\r\n      Microsoft.VisualBasic.Tests.FinancialTests.Rate(NPer: 96, Pmt: -1000, PV: 56818, FV: 0, Due: EndOfPeriod, Guess: 0.1, expectedOld: 0.0120002073302547, expectedNew: 0.0120002073302547) [FAIL]\r\n        Assert.Equal() Failure\r\n        Expected: 0.0120002073302547\r\n        Actual:   0.0120002073302547\r\n        Stack Trace:\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(21,0): at Microsoft.VisualBasic.Tests.FinancialTests.AreEqual[T](T expectedOld, T expectedNew, T actual)\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(262,0): at Microsoft.VisualBasic.Tests.FinancialTests.Rate(Double NPer, Double Pmt, Double PV, Double FV, DueDate Due, Double Guess, Double expectedOld, Double expectedNew)\r\n      Microsoft.VisualBasic.Tests.FinancialTests.Rate(NPer: 12, Pmt: -3000, PV: 300, FV: 0, Due: EndOfPeriod, Guess: 0.1, expectedOld: -1.98502387722876, expectedNew: -1.98502387722876) [FAIL]\r\n        Assert.Equal() Failure\r\n        Expected: -1.98502387722876\r\n        Actual:   -1.98502387722876\r\n        Stack Trace:\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(21,0): at Microsoft.VisualBasic.Tests.FinancialTests.AreEqual[T](T expectedOld, T expectedNew, T actual)\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(262,0): at Microsoft.VisualBasic.Tests.FinancialTests.Rate(Double NPer, Double Pmt, Double PV, Double FV, DueDate Due, Double Guess, Double expectedOld, Double expectedNew)\r\n      Microsoft.VisualBasic.Tests.FinancialTests.PV(Rate: 0.00166666666666667, NPer: 12, Pmt: -100, FV: -100, Due: BegOfPeriod, expectedOld: 1287.10048252122, expectedNew: 1287.10048252122) [FAIL]\r\n        Assert.Equal() Failure\r\n        Expected: 1287.10048252122\r\n        Actual:   1287.10048252122\r\n        Stack Trace:\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(21,0): at Microsoft.VisualBasic.Tests.FinancialTests.AreEqual[T](T expectedOld, T expectedNew, T actual)\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(243,0): at Microsoft.VisualBasic.Tests.FinancialTests.PV(Double Rate, Double NPer, Double Pmt, Double FV, DueDate Due, Double expectedOld, Double expectedNew)\r\n      Microsoft.VisualBasic.Tests.FinancialTests.PV(Rate: 0.008, NPer: 31, Pmt: 2000, FV: 0, Due: EndOfPeriod, expectedOld: -54717.4159104136, expectedNew: -54717.4159104136) [FAIL]\r\n        Assert.Equal() Failure\r\n        Expected: -54717.4159104136\r\n        Actual:   -54717.4159104136\r\n        Stack Trace:\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(21,0): at Microsoft.VisualBasic.Tests.FinancialTests.AreEqual[T](T expectedOld, T expectedNew, T actual)\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(243,0): at Microsoft.VisualBasic.Tests.FinancialTests.PV(Double Rate, Double NPer, Double Pmt, Double FV, DueDate Due, Double expectedOld, Double expectedNew)\r\n        Assert.Equal() Failure\r\n      Microsoft.VisualBasic.Tests.FinancialTests.PV(Rate: 0.012, NPer: 15, Pmt: 780, FV: 2000, Due: BegOfPeriod, expectedOld: -12449.3560902104, expectedNew: -12449.3560902104) [FAIL]\r\n        Expected: -12449.3560902104\r\n        Actual:   -12449.3560902104\r\n        Stack Trace:\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(21,0): at Microsoft.VisualBasic.Tests.FinancialTests.AreEqual[T](T expectedOld, T expectedNew, T actual)\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(243,0): at Microsoft.VisualBasic.Tests.FinancialTests.PV(Double Rate, Double NPer, Double Pmt, Double FV, DueDate Due, Double expectedOld, Double expectedNew)\r\n      Microsoft.VisualBasic.Tests.FinancialTests.PV(Rate: 0.0096, NPer: 54, Pmt: 123, FV: 4760, Due: EndOfPeriod, expectedOld: -8005.58690087404, expectedNew: -8005.58690087404) [FAIL]\r\n        Assert.Equal() Failure\r\n        Expected: -8005.58690087404\r\n        Actual:   -8005.58690087404\r\n        Stack Trace:\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(21,0): at Microsoft.VisualBasic.Tests.FinancialTests.AreEqual[T](T expectedOld, T expectedNew, T actual)\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(243,0): at Microsoft.VisualBasic.Tests.FinancialTests.PV(Double Rate, Double NPer, Double Pmt, Double FV, DueDate Due, Double expectedOld, Double expectedNew)\r\n      Microsoft.VisualBasic.Tests.FinancialTests.PV(Rate: -0.008, NPer: 31, Pmt: 2000, FV: 0, Due: EndOfPeriod, expectedOld: -70684.6496700943, expectedNew: -70684.6496700943) [FAIL]\r\n        Assert.Equal() Failure\r\n        Expected: -70684.6496700943\r\n        Actual:   -70684.6496700943\r\n        Stack Trace:\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(21,0): at Microsoft.VisualBasic.Tests.FinancialTests.AreEqual[T](T expectedOld, T expectedNew, T actual)\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(243,0): at Microsoft.VisualBasic.Tests.FinancialTests.PV(Double Rate, Double NPer, Double Pmt, Double FV, DueDate Due, Double expectedOld, Double expectedNew)\r\n      Microsoft.VisualBasic.Tests.FinancialTests.PV(Rate: 0.008, NPer: -31, Pmt: 2000, FV: 0, Due: EndOfPeriod, expectedOld: 70049.0217362546, expectedNew: 70049.0217362546) [FAIL]\r\n        Assert.Equal() Failure\r\n        Expected: 70049.0217362546\r\n        Actual:   70049.0217362546\r\n        Stack Trace:\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(21,0): at Microsoft.VisualBasic.Tests.FinancialTests.AreEqual[T](T expectedOld, T expectedNew, T actual)\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(243,0): at Microsoft.VisualBasic.Tests.FinancialTests.PV(Double Rate, Double NPer, Double Pmt, Double FV, DueDate Due, Double expectedOld, Double expectedNew)\r\n      Microsoft.VisualBasic.Tests.FinancialTests.IPmt(Rate: 0.00833333333333333, Per: 12, NPer: 48, PV: -20000, FV: 0, Due: BegOfPeriod, expectedOld: 133.00409235109, expectedNew: 133.00409235109) [FAIL]\r\n        Assert.Equal() Failure\r\n        Expected: 133.00409235109\r\n        Actual:   133.00409235109\r\n        Stack Trace:\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(21,0): at Microsoft.VisualBasic.Tests.FinancialTests.AreEqual[T](T expectedOld, T expectedNew, T actual)\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(83,0): at Microsoft.VisualBasic.Tests.FinancialTests.IPmt(Double Rate, Double Per, Double NPer, Double PV, Double FV, DueDate Due, Double expectedOld, Double expectedNew)\r\n      Microsoft.VisualBasic.Tests.FinancialTests.IPmt(Rate: 0.008, Per: 4, NPer: 12, PV: 3000, FV: 0, Due: EndOfPeriod, expectedOld: -18.2133959841799, expectedNew: -18.2133959841799) [FAIL]\r\n        Assert.Equal() Failure\r\n        Expected: -18.2133959841799\r\n        Actual:   -18.2133959841799\r\n        Stack Trace:\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(21,0): at Microsoft.VisualBasic.Tests.FinancialTests.AreEqual[T](T expectedOld, T expectedNew, T actual)\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(83,0): at Microsoft.VisualBasic.Tests.FinancialTests.IPmt(Double Rate, Double Per, Double NPer, Double PV, Double FV, DueDate Due, Double expectedOld, Double expectedNew)\r\n      Microsoft.VisualBasic.Tests.FinancialTests.IPmt(Rate: 0.012, Per: 15, NPer: 79, PV: 2387, FV: 200, Due: BegOfPeriod, expectedOld: -24.7440714828291, expectedNew: -24.7440714828291) [FAIL]\r\n        Assert.Equal() Failure\r\n        Expected: -24.7440714828291\r\n        Actual:   -24.7440714828291\r\n        Stack Trace:\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(21,0): at Microsoft.VisualBasic.Tests.FinancialTests.AreEqual[T](T expectedOld, T expectedNew, T actual)\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(83,0): at Microsoft.VisualBasic.Tests.FinancialTests.IPmt(Double Rate, Double Per, Double NPer, Double PV, Double FV, DueDate Due, Double expectedOld, Double expectedNew)\r\n      Microsoft.VisualBasic.Tests.FinancialTests.IPmt(Rate: 0.0096, Per: 54, NPer: 123, PV: 4760, FV: 0, Due: EndOfPeriod, expectedOld: -32.2391587542905, expectedNew: -32.2391587542905) [FAIL]\r\n        Assert.Equal() Failure\r\n        Expected: -32.2391587542905\r\n        Actual:   -32.2391587542905\r\n        Stack Trace:\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(21,0): at Microsoft.VisualBasic.Tests.FinancialTests.AreEqual[T](T expectedOld, T expectedNew, T actual)\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(83,0): at Microsoft.VisualBasic.Tests.FinancialTests.IPmt(Double Rate, Double Per, Double NPer, Double PV, Double FV, DueDate Due, Double expectedOld, Double expectedNew)\r\n      Microsoft.VisualBasic.Tests.FinancialTests.IPmt(Rate: -0.008, Per: 4, NPer: 12, PV: 3000, FV: 0, Due: EndOfPeriod, expectedOld: 17.7814213334481, expectedNew: 17.7814213334481) [FAIL]\r\n        Assert.Equal() Failure\r\n        Expected: 17.7814213334481\r\n        Actual:   17.7814213334481\r\n        Stack Trace:\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(21,0): at Microsoft.VisualBasic.Tests.FinancialTests.AreEqual[T](T expectedOld, T expectedNew, T actual)\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(83,0): at Microsoft.VisualBasic.Tests.FinancialTests.IPmt(Double Rate, Double Per, Double NPer, Double PV, Double FV, DueDate Due, Double expectedOld, Double expectedNew)\r\n      Microsoft.VisualBasic.Tests.FinancialTests.IPmt(Rate: 0.008, Per: 4, NPer: 12, PV: 3000, FV: 0, Due: 7, expectedOld: -18.0688452224006, expectedNew: -18.0688452224006) [FAIL]\r\n        Assert.Equal() Failure\r\n        Expected: -18.0688452224006\r\n        Actual:   -18.0688452224006\r\n        Stack Trace:\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(21,0): at Microsoft.VisualBasic.Tests.FinancialTests.AreEqual[T](T expectedOld, T expectedNew, T actual)\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(83,0): at Microsoft.VisualBasic.Tests.FinancialTests.IPmt(Double Rate, Double Per, Double NPer, Double PV, Double FV, DueDate Due, Double expectedOld, Double expectedNew)\r\n      Microsoft.VisualBasic.Tests.FinancialTests.PPmt_Default [FAIL]\r\n        Assert.Equal() Failure\r\n        Expected: -244.976482926292\r\n        Actual:   -244.976482926292\r\n        Stack Trace:\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(21,0): at Microsoft.VisualBasic.Tests.FinancialTests.AreEqual[T](T expectedOld, T expectedNew, T actual)\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(227,0): at Microsoft.VisualBasic.Tests.FinancialTests.PPmt_Default()\r\n      Microsoft.VisualBasic.Tests.FinancialTests.NPV(Rate: 0.1, ValueArray: [-70000, 22000, 25000, 28000, 31000], expectedOld: 11701.2623330498, expectedNew: 11701.2623330498) [FAIL]\r\n        Assert.Equal() Failure\r\n        Expected: 11701.2623330498\r\n        Actual:   11701.2623330498\r\n        Stack Trace:\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(21,0): at Microsoft.VisualBasic.Tests.FinancialTests.AreEqual[T](T expectedOld, T expectedNew, T actual)\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(178,0): at Microsoft.VisualBasic.Tests.FinancialTests.NPV(Double Rate, Double[] ValueArray, Double expectedOld, Double expectedNew)\r\n      Microsoft.VisualBasic.Tests.FinancialTests.NPV(Rate: 0.0625, ValueArray: [-70000, 22000, 25000, 28000, 31000], expectedOld: 19312.5702095352, expectedNew: 19312.5702095352) [FAIL]\r\n        Assert.Equal() Failure\r\n        Expected: 19312.5702095352\r\n        Actual:   19312.5702095352\r\n        Stack Trace:\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(21,0): at Microsoft.VisualBasic.Tests.FinancialTests.AreEqual[T](T expectedOld, T expectedNew, T actual)\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(178,0): at Microsoft.VisualBasic.Tests.FinancialTests.NPV(Double Rate, Double[] ValueArray, Double expectedOld, Double expectedNew)\r\n      Microsoft.VisualBasic.Tests.FinancialTests.NPV(Rate: 0.089, ValueArray: [-10000, 6000, -2000, 7000, 1000], expectedOld: -41.8655316029477, expectedNew: -41.8655316029477) [FAIL]\r\n        Assert.Equal() Failure\r\n        Expected: -41.8655316029477\r\n        Actual:   -41.8655316029477\r\n        Stack Trace:\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(21,0): at Microsoft.VisualBasic.Tests.FinancialTests.AreEqual[T](T expectedOld, T expectedNew, T actual)\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(178,0): at Microsoft.VisualBasic.Tests.FinancialTests.NPV(Double Rate, Double[] ValueArray, Double expectedOld, Double expectedNew)\r\n      Microsoft.VisualBasic.Tests.FinancialTests.NPV(Rate: 0.011, ValueArray: [-30000, -10000, 25000, 12000, 15000], expectedOld: 10423.4025719865, expectedNew: 10423.4025719865) [FAIL]\r\n        Assert.Equal() Failure\r\n        Expected: 10423.4025719865\r\n        Actual:   10423.4025719865\r\n        Stack Trace:\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(21,0): at Microsoft.VisualBasic.Tests.FinancialTests.AreEqual[T](T expectedOld, T expectedNew, T actual)\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(178,0): at Microsoft.VisualBasic.Tests.FinancialTests.NPV(Double Rate, Double[] ValueArray, Double expectedOld, Double expectedNew)\r\n      Microsoft.VisualBasic.Tests.FinancialTests.NPV(Rate: -0.011, ValueArray: [-30000, -10000, 25000, 12000, 15000], expectedOld: 13681.9191276061, expectedNew: 13681.9191276061) [FAIL]\r\n        Assert.Equal() Failure\r\n        Expected: 13681.9191276061\r\n        Actual:   13681.9191276061\r\n        Stack Trace:\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(21,0): at Microsoft.VisualBasic.Tests.FinancialTests.AreEqual[T](T expectedOld, T expectedNew, T actual)\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(178,0): at Microsoft.VisualBasic.Tests.FinancialTests.NPV(Double Rate, Double[] ValueArray, Double expectedOld, Double expectedNew)\r\n      Microsoft.VisualBasic.Tests.FinancialTests.NPV(Rate: 0.0625, ValueArray: [70000, 22000, 25000, 28000, 31000], expectedOld: 151077.276091888, expectedNew: 151077.276091888) [FAIL]\r\n        Assert.Equal() Failure\r\n        Expected: 151077.276091888\r\n        Actual:   151077.276091888\r\n        Stack Trace:\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(21,0): at Microsoft.VisualBasic.Tests.FinancialTests.AreEqual[T](T expectedOld, T expectedNew, T actual)\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(178,0): at Microsoft.VisualBasic.Tests.FinancialTests.NPV(Double Rate, Double[] ValueArray, Double expectedOld, Double expectedNew)\r\n      Microsoft.VisualBasic.Tests.FinancialTests.NPV(Rate: 0.0625, ValueArray: [-70000, -22000, -25000, -28000, -31000], expectedOld: -151077.276091888, expectedNew: -151077.276091888) [FAIL]\r\n        Assert.Equal() Failure\r\n        Expected: -151077.276091888\r\n        Actual:   -151077.276091888\r\n        Stack Trace:\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(21,0): at Microsoft.VisualBasic.Tests.FinancialTests.AreEqual[T](T expectedOld, T expectedNew, T actual)\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\FinancialTests.cs(178,0): at Microsoft.VisualBasic.Tests.FinancialTests.NPV(Double Rate, Double[] ValueArray, Double expectedOld, Double expectedNew)\r\n```\r\n\r\nAnd several of the InlineDatas for the `Asc_Chr_DoubleByte` test are also failing on netfx:\r\n```\r\n  Unhandled Exception: Xunit.Sdk.EqualException: Assert.Equal() Failure\r\n  Expected: 255\r\n  Actual:   63\r\n     at Xunit.Assert.Equal[T](T expected, T actual, IEqualityComparer`1 comparer)\r\n     at Microsoft.VisualBasic.Tests.StringsTests.<>c.<Asc_Chr_DoubleByte>b__13_0(String charCodeString, String expectedString) in d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\StringsTests.cs:line 157\r\n  --- End of stack trace from previous location where exception was thrown ---\r\n     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n     at Microsoft.DotNet.RemoteExecutorHost.Program.Main(String[] args)\r\n      Microsoft.VisualBasic.Tests.StringsTests.Asc_Chr_DoubleByte(charCode: 255, expected: 255) [FAIL]\r\n        Microsoft.DotNet.RemoteExecutor.RemoteExecutionException : Remote process failed with an unhandled exception.\r\n        Stack Trace:\r\n\r\n          Child exception:\r\n            Xunit.Sdk.EqualException: Assert.Equal() Failure\r\n          Expected: 255\r\n          Actual:   63\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\StringsTests.cs(157,0): at Microsoft.VisualBasic.Tests.StringsTests.<>c.<Asc_Chr_DoubleByte>b__13_0(String charCodeString, String expectedString)\r\n\r\n          Child process:\r\n            Microsoft.VisualBasic.Core.Tests, Version=10.0.4.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51 Microsoft.VisualBasic.Tests.StringsTests+<>c Void <Asc_Chr_DoubleByte>b__13_0(System.String, System.String)\r\n\r\n          Child arguments:\r\n            255, 255\r\n\r\n\r\n  Unhandled Exception: Xunit.Sdk.EqualException: Assert.Equal() Failure\r\n  Expected: 33089\r\n  Actual:   63\r\n     at Xunit.Assert.Equal[T](T expected, T actual, IEqualityComparer`1 comparer)\r\n     at Microsoft.VisualBasic.Tests.StringsTests.<>c.<Asc_Chr_DoubleByte>b__13_0(String charCodeString, String expectedString) in d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\StringsTests.cs:line 157\r\n  --- End of stack trace from previous location where exception was thrown ---\r\n     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n     at Microsoft.DotNet.RemoteExecutorHost.Program.Main(String[] args)\r\n      Microsoft.VisualBasic.Tests.StringsTests.Asc_Chr_DoubleByte(charCode: 33089, expected: 33089) [FAIL]\r\n        Microsoft.DotNet.RemoteExecutor.RemoteExecutionException : Remote process failed with an unhandled exception.\r\n        Stack Trace:\r\n\r\n          Child exception:\r\n            Xunit.Sdk.EqualException: Assert.Equal() Failure\r\n          Expected: 33089\r\n          Actual:   63\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\StringsTests.cs(157,0): at Microsoft.VisualBasic.Tests.StringsTests.<>c.<Asc_Chr_DoubleByte>b__13_0(String charCodeString, String expectedString)\r\n\r\n          Child process:\r\n            Microsoft.VisualBasic.Core.Tests, Version=10.0.4.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51 Microsoft.VisualBasic.Tests.StringsTests+<>c Void <Asc_Chr_DoubleByte>b__13_0(System.String, System.String)\r\n\r\n          Child arguments:\r\n            33089, 33089\r\n\r\n\r\n  Unhandled Exception: Xunit.Sdk.EqualException: Assert.Equal() Failure\r\n  Expected: 51454\r\n  Actual:   63\r\n     at Xunit.Assert.Equal[T](T expected, T actual, IEqualityComparer`1 comparer)\r\n     at Microsoft.VisualBasic.Tests.StringsTests.<>c.<Asc_Chr_DoubleByte>b__13_0(String charCodeString, String expectedString) in d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\StringsTests.cs:line 157\r\n  --- End of stack trace from previous location where exception was thrown ---\r\n     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n     at Microsoft.DotNet.RemoteExecutorHost.Program.Main(String[] args)\r\n        Microsoft.DotNet.RemoteExecutor.RemoteExecutionException : Remote process failed with an unhandled exception.\r\n      Microsoft.VisualBasic.Tests.StringsTests.Asc_Chr_DoubleByte(charCode: 51454, expected: 51454) [FAIL]\r\n        Stack Trace:\r\n\r\n          Child exception:\r\n            Xunit.Sdk.EqualException: Assert.Equal() Failure\r\n          Expected: 51454\r\n          Actual:   63\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\StringsTests.cs(157,0): at Microsoft.VisualBasic.Tests.StringsTests.<>c.<Asc_Chr_DoubleByte>b__13_0(String charCodeString, String expectedString)\r\n\r\n          Child process:\r\n            Microsoft.VisualBasic.Core.Tests, Version=10.0.4.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51 Microsoft.VisualBasic.Tests.StringsTests+<>c Void <Asc_Chr_DoubleByte>b__13_0(System.String, System.String)\r\n\r\n          Child arguments:\r\n            51454, 51454\r\n\r\n\r\n  Unhandled Exception: Xunit.Sdk.EqualException: Assert.Equal() Failure\r\n  Expected: 255\r\n  Actual:   63\r\n     at Xunit.Assert.Equal[T](T expected, T actual, IEqualityComparer`1 comparer)\r\n     at Microsoft.VisualBasic.Tests.StringsTests.<>c.<Asc_Chr_DoubleByte>b__13_0(String charCodeString, String expectedString) in d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\StringsTests.cs:line 157\r\n  --- End of stack trace from previous location where exception was thrown ---\r\n     at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n     at Microsoft.DotNet.RemoteExecutorHost.Program.Main(String[] args)\r\n        Microsoft.DotNet.RemoteExecutor.RemoteExecutionException : Remote process failed with an unhandled exception.\r\n      Microsoft.VisualBasic.Tests.StringsTests.Asc_Chr_DoubleByte(charCode: 65535, expected: 255) [FAIL]\r\n        Stack Trace:\r\n\r\n          Child exception:\r\n            Xunit.Sdk.EqualException: Assert.Equal() Failure\r\n          Expected: 255\r\n          Actual:   63\r\n          d:\\repos\\corefx\\src\\Microsoft.VisualBasic.Core\\tests\\StringsTests.cs(157,0): at Microsoft.VisualBasic.Tests.StringsTests.<>c.<Asc_Chr_DoubleByte>b__13_0(String charCodeString, String expectedString)\r\n\r\n          Child process:\r\n            Microsoft.VisualBasic.Core.Tests, Version=10.0.4.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51 Microsoft.VisualBasic.Tests.StringsTests+<>c Void <Asc_Chr_DoubleByte>b__13_0(System.String, System.String)\r\n\r\n          Child arguments:\r\n            65535, 255\r\n\r\n    Finished:    Microsoft.VisualBasic.Core.Tests\r\n```\r\ncc: @cston ","Url":"https://github.com/dotnet/corefx/issues/39888","RelatedDescription":"Open issue \"Microsoft.VisualBasic.Core test differences between .NET Framework and .NET Core\" (#39888)"},{"Id":"474575238","IsPullRequest":false,"CreatedAt":"2019-07-30T13:09:15","Actor":"roglainc","Number":"39887","RawContent":null,"Title":"WebClient http proxy broken in .Net Core 3 Preview 7","State":"open","Body":"I am using WebClient and HttpWebRequest to call external Http APIs and is dependent on a proxy to make external calls. After upgrading to .Net Core Preview 7 I get Proxy authentication error (407). The code runs ok in .Net Core 2.1, and .Net Core 3 preview 3. \r\n\r\nThis is a snippet that \r\nsucceeds on .Net Core 2.1 & 3.0 preview 3 \r\nbut fails on preview 7, \r\nrunning in  Visual Studio 2019 16.2.0:\r\n\r\n            string proxy = <_name of Proxy_>;\r\n            string url = \"https://www.kemi.se/global/faktablad/faktablad-om-sakerhetsdatablad.pdf\";\r\n            var client = new WebClient() {\r\n                Proxy = new WebProxy(proxy, 8080) {\r\n                    UseDefaultCredentials = true\r\n                }\r\n            };\r\n            var data = client.DownloadData(url);\r\n\r\n","Url":"https://github.com/dotnet/corefx/issues/39887","RelatedDescription":"Open issue \"WebClient http proxy broken in .Net Core 3 Preview 7\" (#39887)"},{"Id":"474463078","IsPullRequest":false,"CreatedAt":"2019-07-30T09:04:31","Actor":"3lcarry","Number":"39886","RawContent":null,"Title":"HttpClient is not providing complete certificate chain on windows","State":"open","Body":"Hi,\r\nWe are facing issue when authenticate against a server expecting client certificate + intermediate certificate. The HttpClient is only sending the client certificate and the pfx file is build containing the 3 certificates\r\n\r\nOn the attached file you can see an example of the issue, using curl sample under the curl folder is possible to authenticate against the server validating the intermediate certificate but using the HttpClient provided is not working\r\n\r\n[CertificateAuthentication.zip](https://github.com/dotnet/corefx/files/3445992/CertificateAuthentication.zip)","Url":"https://github.com/dotnet/corefx/issues/39886","RelatedDescription":"Open issue \"HttpClient is not providing complete certificate chain on windows\" (#39886)"},{"Id":"474424867","IsPullRequest":true,"CreatedAt":"2019-07-30T07:39:24","Actor":"PRIMETSS","Number":"39885","RawContent":null,"Title":"Fix to Build fails with 'error MSB3073' when run from folder containing space","State":"open","Body":"https://github.com/dotnet/corefx/issues/39840\r\n\r\nAlso Requries fix to coreclr to fix Microsoft.NET.Sdk.IL.targets:\r\n\r\nSource: \"C:\\Users\\User.nuget\\packages\\microsoft.net.sdk.il\\5.0.0-alpha1.19377.2\\targets\\Microsoft.NET.Sdk.IL.targets\"\r\n\r\n`<_IldasmCommand>\"$(_IlasmDir)\"ildasm</_IldasmCommand>`\r\n`and`\r\n`<_IlasmSwitches Condition=\"'$(IlasmResourceFile)' != ''\">$(_IlasmSwitches) -RESOURCES=\"$(IlasmResourceFile)\"</_IlasmSwitches>`\r\n`and`\r\n`<Exec Command=\"&quot;$(_IlasmDir)&quot;ilasm $(_IlasmSwitches) $(_OutputTypeArgument)` `$(IlasmFlags) -OUTPUT=&quot;@(IntermediateAssembly)&quot; $(_KeyFileArgument) `@(Compile)\"> <Output TaskParameter=\"ExitCode\" PropertyName=\"_ILAsmExitCode\" /> </Exec>`","Url":"https://github.com/dotnet/corefx/pull/39885","RelatedDescription":"Open PR \"Fix to Build fails with 'error MSB3073' when run from folder containing space\" (#39885)"},{"Id":"474405140","IsPullRequest":true,"CreatedAt":"2019-07-30T06:49:49","Actor":"luyikk","Number":"39884","RawContent":null,"Title":"Merge pull request #1 from dotnet/master","State":"closed","Body":"UPDATE","Url":"https://github.com/dotnet/corefx/pull/39884","RelatedDescription":"Closed or merged PR \"Merge pull request #1 from dotnet/master\" (#39884)"},{"Id":"474400071","IsPullRequest":false,"CreatedAt":"2019-07-30T06:35:54","Actor":"Gnbrkm41","Number":"39883","RawContent":null,"Title":"SqlBinary throws IndexOutOfRangeException instead of SqlNullValueException when tried to index beyond the end of the array","State":"open","Body":"https://github.com/dotnet/corefx/blob/master/src/System.Data.Common/tests/System/Data/SqlTypes/SqlBinaryTest.cs#L92-L93\r\n\r\n[The documents](https://docs.microsoft.com/en-gb/dotnet/api/system.data.sqltypes.sqlbinary?view=netframework-4.8) say that the indexer should throw SqlNullValueException if it is indexed past the array (`If index indicates a position beyond the end of the byte array, a SqlNullValueException will be raised.`), however the current test checking for `IndexOutOfRangeException` is passing just fine.\r\n\r\nNoticed while cleaning up some of the codes.","Url":"https://github.com/dotnet/corefx/issues/39883","RelatedDescription":"Open issue \"SqlBinary throws IndexOutOfRangeException instead of SqlNullValueException when tried to index beyond the end of the array\" (#39883)"},{"Id":"474392619","IsPullRequest":true,"CreatedAt":"2019-07-30T06:12:49","Actor":"geoffkizer","Number":"39882","RawContent":null,"Title":"HTTP2: Fix handling of RST_STREAM with error = NO_ERROR after response EndStream","State":"open","Body":"Fixes #39586 \r\n\r\nThe RFC defines special behavior for receiving a RST_STREAM with error = NO_ERROR after the response body stream has been completed. When this happens, a client is supposed to cancel sending the request body but still consider the request successful. Previously, we did not do this.\r\n\r\n@danmosemsft This impacts GRPC scenarios and will need to be ported to the 3.0 branch.\r\n","Url":"https://github.com/dotnet/corefx/pull/39882","RelatedDescription":"Open PR \"HTTP2: Fix handling of RST_STREAM with error = NO_ERROR after response EndStream\" (#39882)"},{"Id":"474372947","IsPullRequest":false,"CreatedAt":"2019-07-30T04:58:51","Actor":"aspcompiler","Number":"39881","RawContent":null,"Title":"FileSystemWatcher events out of order on OSX","State":"open","Body":"macOS Sierra 10.12.6.\r\ndotnet --version 2.2.300\r\n\r\nWhen I do the following experiment:\r\n\r\n1. Create a file.\r\n2. Delete the file.\r\n3. Start FileSystemWatcher.\r\n4. Recreate the file.\r\n\r\nI got the following events on Windows and Linux:\r\nFile created\r\nFile changed.\r\n\r\nHowever, I got the following events on OSX from the same code:\r\nFile changed\r\nFile created\r\nFile deleted\r\n\r\nNot only file created and file changed are out of order. File deleted before I start FileSystemWatcher generateds an event later.\r\n\r\nI have prepared the following project on github to help reproducing the behavior:\r\n\r\nhttps://github.com/aspcompiler/FSWTest/blob/master/FSWTest/Program.cs","Url":"https://github.com/dotnet/corefx/issues/39881","RelatedDescription":"Open issue \"FileSystemWatcher events out of order on OSX\" (#39881)"}],"ResultType":"GitHubIssue"},"Roslyn-Issues":{"Issues":[{"Id":"474929684","IsPullRequest":true,"CreatedAt":"2019-07-31T04:29:05","Actor":"cston","Number":"37610","RawContent":null,"Title":"Remove AttributeTargets.Module from NullableContextAttribute","State":"open","Body":"The C# compiler does not support module-level `NullableContextAttribute`. This change updates the spec-let and the `AttributeTargets` on the embedded attribute definition to reflect that.\r\n","Url":"https://github.com/dotnet/roslyn/pull/37610","RelatedDescription":"Open PR \"Remove AttributeTargets.Module from NullableContextAttribute\" (#37610)"},{"Id":"474823923","IsPullRequest":true,"CreatedAt":"2019-07-31T03:00:37","Actor":"dotnet-bot","Number":"37590","RawContent":null,"Title":"Merge release/dev16.2-vs-deps to release/dev16.3-preview2-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from release/dev16.2-vs-deps into release/dev16.3-preview2-vs-deps.\n(created from a manual run of the PR generation tool)\n\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.2-vs-deps-to-release/dev16.3-preview2-vs-deps\ngit reset --hard upstream/release/dev16.3-preview2-vs-deps\ngit merge upstream/release/dev16.2-vs-deps\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.2-vs-deps-to-release/dev16.3-preview2-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/37590","RelatedDescription":"Closed or merged PR \"Merge release/dev16.2-vs-deps to release/dev16.3-preview2-vs-deps\" (#37590)"},{"Id":"474824357","IsPullRequest":true,"CreatedAt":"2019-07-31T03:00:27","Actor":"dotnet-bot","Number":"37591","RawContent":null,"Title":"Merge master to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n(created from a manual run of the PR generation tool)\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/37591","RelatedDescription":"Closed or merged PR \"Merge master to master-vs-deps\" (#37591)"},{"Id":"474901509","IsPullRequest":true,"CreatedAt":"2019-07-31T02:16:53","Actor":"jnm2","Number":"37609","RawContent":null,"Title":"[wip] Fix trailing whitespace and superfluous blank lines in generated GlobalSuppressions.cs","State":"open","Body":"Fixes #37529\r\n\r\nI fixed the trailing whitespace and leading blank line. I'd appreciate pointers on where the `\\r\\n\\r\\n` is coming from at the end of the file. This looked likely, but I deleted the code and it didn't seem to get rid of the double crlf:\r\n\r\nhttps://github.com/dotnet/roslyn/blob/1113a88fd4ae089e151059bda1e6ab214d9c8c4a/src/Features/CSharp/Portable/CodeFixes/Suppression/CSharpSuppressionCodeFixProvider.cs#L142-L148","Url":"https://github.com/dotnet/roslyn/pull/37609","RelatedDescription":"Open PR \"[wip] Fix trailing whitespace and superfluous blank lines in generated GlobalSuppressions.cs\" (#37609)"},{"Id":"474896109","IsPullRequest":true,"CreatedAt":"2019-07-31T01:50:19","Actor":"dotnet-bot","Number":"37608","RawContent":null,"Title":"Merge release/dev16.3-preview2 to release/dev16.3-preview2-vs-deps","State":"open","Body":"\nThis is an automatically generated pull request from release/dev16.3-preview2 into release/dev16.3-preview2-vs-deps.\n(created from a manual run of the PR generation tool)\n\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.3-preview2-to-release/dev16.3-preview2-vs-deps\ngit reset --hard upstream/release/dev16.3-preview2-vs-deps\ngit merge upstream/release/dev16.3-preview2\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.3-preview2-to-release/dev16.3-preview2-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/37608","RelatedDescription":"Open PR \"Merge release/dev16.3-preview2 to release/dev16.3-preview2-vs-deps\" (#37608)"},{"Id":"474873943","IsPullRequest":true,"CreatedAt":"2019-07-31T01:30:06","Actor":"dotnet-bot","Number":"37606","RawContent":null,"Title":"Merge release/dev16.4-preview1 to release/dev16.4-preview1-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from release/dev16.4-preview1 into release/dev16.4-preview1-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.4-preview1-to-release/dev16.4-preview1-vs-deps\ngit reset --hard upstream/release/dev16.4-preview1-vs-deps\ngit merge upstream/release/dev16.4-preview1\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.4-preview1-to-release/dev16.4-preview1-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/37606","RelatedDescription":"Closed or merged PR \"Merge release/dev16.4-preview1 to release/dev16.4-preview1-vs-deps\" (#37606)"},{"Id":"474731939","IsPullRequest":true,"CreatedAt":"2019-07-31T01:12:17","Actor":"agocke","Number":"37583","RawContent":null,"Title":"Handle checking for language version in speculative semantic model","State":"closed","Body":"Asking for Location.SourceTree may not produce a syntax tree, even if there\r\nis a backing syntax tree, because a speculative tree node may produce NoLocation\r\nwhen asked for one, even if there is a backing tree. This change stops us from\r\ntrying to do the SyntaxTree->Location->SyntaxTree roundtrip because it's not guaranteed\r\nto succeed.\r\n\r\nFixes #37454\r\n\r\n(cherry picked from commit 83e8f8f0602aecf68dd257ea24b0b4817d842f72)","Url":"https://github.com/dotnet/roslyn/pull/37583","RelatedDescription":"Closed or merged PR \"Handle checking for language version in speculative semantic model\" (#37583)"},{"Id":"474881121","IsPullRequest":true,"CreatedAt":"2019-07-31T00:35:12","Actor":"dibarbet","Number":"37607","RawContent":null,"Title":"Add back typescript gotodef on the client.","State":"open","Body":"Missed copying the typescript client export for goto def.  adding back so that TS liveshare clients can gotodef.","Url":"https://github.com/dotnet/roslyn/pull/37607","RelatedDescription":"Open PR \"Add back typescript gotodef on the client.\" (#37607)"},{"Id":"474727897","IsPullRequest":false,"CreatedAt":"2019-07-31T00:03:13","Actor":"kendrahavens","Number":"37580","RawContent":null,"Title":"Toggle Block Comment does not behave as expected","State":"closed","Body":"[Original customer feedback on developer community](https://developercommunity.visualstudio.com/idea/589032/feature-add-in-reverse-comments-key-sequence.html)\r\n\r\n**Version Used**: \r\nVisual Studio 2019 version 16.3 Preview 1\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Have multiple lines of code, one commented some uncommented:\r\n```csharp\r\nConsole.WriteLine(\"Hello World 1\");\r\n//Console.WriteLine(\"Hello World 2\");\r\n```\r\n2. Toggle Block Comment/Uncomment - (Ctrl+Shift+/)\r\n\r\n**Expected Behavior**: Toggle the comment\r\n```csharp\r\n//Console.WriteLine(\"Hello World 1\");\r\nConsole.WriteLine(\"Hello World 2\");\r\n```\r\n**Actual Behavior**:\r\n```csharp\r\n/*Console.WriteLine(\"Hello World 1\");\r\n//Console.WriteLine(\"Hello World 2\");*/\r\n```\r\n\r\nI believe this was a diversion from the original customer ask back when we started implementing the toggle comment commands as users can already use (Ctrl K, C) to comment the selection. Toggle block comment was meant to toggle the selection.","Url":"https://github.com/dotnet/roslyn/issues/37580","RelatedDescription":"Closed issue \"Toggle Block Comment does not behave as expected\" (#37580)"},{"Id":"474873705","IsPullRequest":true,"CreatedAt":"2019-07-31T00:01:30","Actor":"dotnet-bot","Number":"37605","RawContent":null,"Title":"Merge master-vs-deps to release/dev16.4-preview1-vs-deps","State":"open","Body":"\nThis is an automatically generated pull request from master-vs-deps into release/dev16.4-preview1-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-vs-deps-to-release/dev16.4-preview1-vs-deps\ngit reset --hard upstream/release/dev16.4-preview1-vs-deps\ngit merge upstream/master-vs-deps\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-vs-deps-to-release/dev16.4-preview1-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/37605","RelatedDescription":"Open PR \"Merge master-vs-deps to release/dev16.4-preview1-vs-deps\" (#37605)"},{"Id":"474873501","IsPullRequest":true,"CreatedAt":"2019-07-31T00:00:45","Actor":"dotnet-bot","Number":"37604","RawContent":null,"Title":"Merge master to release/dev16.4-preview1","State":"open","Body":"\nThis is an automatically generated pull request from master into release/dev16.4-preview1.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-release/dev16.4-preview1\ngit reset --hard upstream/release/dev16.4-preview1\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-release/dev16.4-preview1 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/37604","RelatedDescription":"Open PR \"Merge master to release/dev16.4-preview1\" (#37604)"},{"Id":"474869191","IsPullRequest":true,"CreatedAt":"2019-07-30T23:40:37","Actor":"jasonmalinowski","Number":"37602","RawContent":null,"Title":"Don't show nullability information in quick info if it's not enabled","State":"open","Body":"We don't have this scenario fully polished and it can often be more confusing because the information shown won't always be useful or accurate.\r\n\r\nFixes https://github.com/dotnet/roslyn/issues/37314","Url":"https://github.com/dotnet/roslyn/pull/37602","RelatedDescription":"Open PR \"Don't show nullability information in quick info if it's not enabled\" (#37602)"},{"Id":"474868114","IsPullRequest":false,"CreatedAt":"2019-07-30T23:35:51","Actor":"jnm2","Number":"37601","RawContent":null,"Title":"Master branch intermittently fails to build in 16.3.0-p1.0, empty error list, buggy build output","State":"open","Body":"This happens occasionally across reboots of VS and I don't know what it correlates with. Note the status bar and the error count in the error list:\r\n\r\n![image](https://user-images.githubusercontent.com/8040367/62172658-08790980-b301-11e9-896a-f7038ec91d74.png)\r\n\r\nThe build output summary says `Build: 152 succeeded, 1 failed, 17 up-to-date, 0 skipped`, but no line before it mentions a failure:\r\nhttps://pastebin.com/raw/R06g7bfK\r\n\r\n@sharwell, @jasonmalinowski at Cyrus' request\r\n\r\n\r\nHelp > About > Info:\r\n\r\n<details>\r\n\r\nMicrosoft Visual Studio Enterprise 2019 Preview\r\nVersion 16.3.0 Preview 1.0\r\nVisualStudio.16.Preview/16.3.0-pre.1.0+29123.89\r\nMicrosoft .NET Framework\r\nVersion 4.8.03752\r\n\r\nInstalled Version: Enterprise\r\n\r\nVisual C++ 2019   00435-60000-00000-AA632\r\nMicrosoft Visual C++ 2019\r\n\r\nASP.NET and Web Tools 2019   16.3.34.53219\r\nASP.NET and Web Tools 2019\r\n\r\nASP.NET Web Frameworks and Tools 2019   16.3.34.53219\r\nFor additional information, visit https://www.asp.net/\r\n\r\nAzure App Service Tools v3.0.0   16.3.34.53219\r\nAzure App Service Tools v3.0.0\r\n\r\nC# Tools   3.3.0-beta1-19360-03+7d47461d2ddd32defbc51c2cf0e75a3fef16c3d7\r\nC# components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.\r\n\r\nCommon Azure Tools   1.10\r\nProvides common services for use by Azure Mobile Services and Microsoft Azure Tools.\r\n\r\nGitHub.VisualStudio   2.9.1.7781\r\nA Visual Studio Extension that brings the GitHub Flow into Visual Studio.\r\n\r\nIntelliCode Extension   1.0\r\nIntelliCode Visual Studio Extension Detailed Info\r\n\r\nMicrosoft Continuous Delivery Tools for Visual Studio   0.4\r\nSimplifying the configuration of Azure DevOps pipelines from within the Visual Studio IDE.\r\n\r\nMicrosoft JVM Debugger   1.0\r\nProvides support for connecting the Visual Studio debugger to JDWP compatible Java Virtual Machines\r\n\r\nMicrosoft Library Manager   1.0\r\nInstall client-side libraries easily to any web project\r\n\r\nMicrosoft MI-Based Debugger   1.0\r\nProvides support for connecting Visual Studio to MI compatible debuggers\r\n\r\nMicrosoft Visual C++ Wizards   1.0\r\nMicrosoft Visual C++ Wizards\r\n\r\nMicrosoft Visual Studio Tools for Containers   1.1\r\nDevelop, run, validate your ASP.NET Core applications in the target environment. F5 your application directly into a container with debugging, or CTRL + F5 to edit & refresh your app without having to rebuild the container.\r\n\r\nMicrosoft Visual Studio VC Package   1.0\r\nMicrosoft Visual Studio VC Package\r\n\r\nNuGet Package Manager   5.2.0\r\nNuGet Package Manager in Visual Studio. For more information about NuGet, visit https://docs.nuget.org/\r\n\r\nProjectServicesPackage Extension   1.0\r\nProjectServicesPackage Visual Studio Extension Detailed Info\r\n\r\nResourcePackage Extension   1.0\r\nResourcePackage Visual Studio Extension Detailed Info\r\n\r\nResourcePackage Extension   1.0\r\nResourcePackage Visual Studio Extension Detailed Info\r\n\r\nReviewsToolWindow Extension   1.0\r\nReviewsToolWindow Visual Studio Extension Detailed Info\r\n\r\nSQL Server Data Tools   16.0.61906.28070\r\nMicrosoft SQL Server Data Tools\r\n\r\nTypeScript Tools   16.0.10627.2001\r\nTypeScript Tools for Microsoft Visual Studio\r\n\r\nVisual Basic Tools   3.3.0-beta1-19360-03+7d47461d2ddd32defbc51c2cf0e75a3fef16c3d7\r\nVisual Basic components used in the IDE. Depending on your project type and settings, a different version of the compiler may be used.\r\n\r\nVisual F# Tools 10.4 for F# 4.6   16.3.0-beta.19321.6+5289eb027336eb4c1ea70eaff246f42ca5584b4d\r\nMicrosoft Visual F# Tools 10.4 for F# 4.6\r\n\r\nVisual Studio Code Debug Adapter Host Package   1.0\r\nInterop layer for hosting Visual Studio Code debug adapters in Visual Studio\r\n\r\nVisual Studio Spell Check Everywhere   VSSpellCheckEverywhere\r\nAn extension that enables spell checking within any Visual Studio file editor or tool window that uses WPF text boxes.\r\nhttps://GitHub.com/EWSoftware/VSSpellChecker\r\n\r\nVisual Studio Spell Checker   VSSpellChecker\r\nAn editor extension that checks the spelling of comments, strings, and plain text as you type or interactively with tool windows.\r\nhttps://GitHub.com/EWSoftware/VSSpellChecker\r\n\r\nVisual Studio Tools for Containers   1.0\r\nVisual Studio Tools for Containers\r\n\r\n</details>","Url":"https://github.com/dotnet/roslyn/issues/37601","RelatedDescription":"Open issue \"Master branch intermittently fails to build in 16.3.0-p1.0, empty error list, buggy build output\" (#37601)"},{"Id":"474864158","IsPullRequest":true,"CreatedAt":"2019-07-30T23:19:23","Actor":"petrroll","Number":"37600","RawContent":null,"Title":"Backported fix for #37584 to 16.3-preview2","State":"open","Body":"Fix for: #37584","Url":"https://github.com/dotnet/roslyn/pull/37600","RelatedDescription":"Open PR \"Backported fix for #37584 to 16.3-preview2\" (#37600)"},{"Id":"474859514","IsPullRequest":false,"CreatedAt":"2019-07-30T23:00:46","Actor":"JohanLarsson","Number":"37599","RawContent":null,"Title":"Filtering error list does not update.","State":"open","Body":"![Animation](https://user-images.githubusercontent.com/1640096/62171201-7687f580-b32e-11e9-892c-453e064e12ff.gif)\r\n\r\nI expected the warnings to show up here.","Url":"https://github.com/dotnet/roslyn/issues/37599","RelatedDescription":"Open issue \"Filtering error list does not update.\" (#37599)"},{"Id":"474823672","IsPullRequest":true,"CreatedAt":"2019-07-30T23:00:31","Actor":"dotnet-bot","Number":"37589","RawContent":null,"Title":"Merge master to release/dev16.4-preview1","State":"closed","Body":"\nThis is an automatically generated pull request from master into release/dev16.4-preview1.\n(created from a manual run of the PR generation tool)\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-release/dev16.4-preview1\ngit reset --hard upstream/release/dev16.4-preview1\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-release/dev16.4-preview1 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/37589","RelatedDescription":"Closed or merged PR \"Merge master to release/dev16.4-preview1\" (#37589)"},{"Id":"474824400","IsPullRequest":true,"CreatedAt":"2019-07-30T23:00:07","Actor":"dotnet-bot","Number":"37592","RawContent":null,"Title":"Merge release/dev16.4-preview1 to release/dev16.4-preview1-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from release/dev16.4-preview1 into release/dev16.4-preview1-vs-deps.\n(created from a manual run of the PR generation tool)\n\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.4-preview1-to-release/dev16.4-preview1-vs-deps\ngit reset --hard upstream/release/dev16.4-preview1-vs-deps\ngit merge upstream/release/dev16.4-preview1\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.4-preview1-to-release/dev16.4-preview1-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/37592","RelatedDescription":"Closed or merged PR \"Merge release/dev16.4-preview1 to release/dev16.4-preview1-vs-deps\" (#37592)"},{"Id":"474858960","IsPullRequest":true,"CreatedAt":"2019-07-30T22:58:34","Actor":"ivanbasov","Number":"37598","RawContent":null,"Title":"EnC for nullables editing tests with lambdas","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/37598","RelatedDescription":"Open PR \"EnC for nullables editing tests with lambdas\" (#37598)"},{"Id":"474856424","IsPullRequest":false,"CreatedAt":"2019-07-30T22:48:34","Actor":"tmat","Number":"37597","RawContent":null,"Title":"Improve error message reported when attempting to declare `ref` field in a `ref struct`","State":"open","Body":"![image](https://user-images.githubusercontent.com/41759/62170760-7281b680-b2e1-11e9-94a2-dfb8281b3805.png)\r\n\r\nCurrent error message:\r\n\r\n\r\n![image](https://user-images.githubusercontent.com/41759/62170785-8a593a80-b2e1-11e9-8a41-4b2ed5d60fb4.png)\r\n\r\nSeems like the code is parsed as method declaration. It would be better to parse as field declaration and report error on `ref` keyword.","Url":"https://github.com/dotnet/roslyn/issues/37597","RelatedDescription":"Open issue \"Improve error message reported when attempting to declare `ref` field in a `ref struct`\" (#37597)"},{"Id":"474853730","IsPullRequest":true,"CreatedAt":"2019-07-30T22:40:07","Actor":"jcouv","Number":"37596","RawContent":null,"Title":"Fix conversions on default literals","State":"open","Body":"This PR fixes two problems with `default` literal (from C# 7.1):\r\n- from a language perspective, we should not have re-used the \"null literal conversion\" (which is specifically a conversion from the `null` literal to a nullable value type), so I'm introducing a \"default literal conversion\" (conversion from the `default` literal to any type)\r\n- from a binding perspective, whenever a `default` was getting converted, we would incorrectly give it a natural type. This PR follows Neal's recent PRs by having a `BoundDefaultExpression` and a `BoundConvertedDefaultExpression`.\r\n\r\nFixes https://github.com/dotnet/roslyn/issues/31029\r\nFixes https://github.com/dotnet/roslyn/issues/18609","Url":"https://github.com/dotnet/roslyn/pull/37596","RelatedDescription":"Open PR \"Fix conversions on default literals\" (#37596)"},{"Id":"474852821","IsPullRequest":false,"CreatedAt":"2019-07-30T22:37:13","Actor":"jasonmalinowski","Number":"37595","RawContent":null,"Title":"Assigning result of oblivious method to nullable field still says it's non-null","State":"open","Body":"Code sample:\r\n\r\n```\r\n    class Program\r\n    {\r\n#nullable disable\r\n\r\n        // This is just Enumerable.FirstOrDefault\r\n        private static T FirstOrDefault<T>(IEnumerable<T> strings, Predicate<T> predicate)\r\n        {\r\n            foreach (var s in strings)\r\n            {\r\n                if (predicate(s))\r\n                {\r\n                    return s;\r\n                }\r\n            }\r\n\r\n            return default(T);\r\n        }\r\n\r\n#nullable enable\r\n\r\n        static void Main(string[] args)\r\n        {\r\n            string? s = FirstOrDefault(args, s => s.Length > 42);\r\n\r\n            // No warning here?\r\n            Console.WriteLine(s.Length);\r\n        }\r\n    }\r\n```\r\n\r\n**Expected:** a warning on the \"no warning here\" line warning that s.Length may access a null.\r\n\r\nFirstOrDefault returns an oblivious value, so if I had written `var s = FirstOrDefault(…)` I wouldn't be surprised if it didn't work. So I then I then tried to write string? explicitly, since I was under the impression that oblivious being assigned to a nullable local would count as nullable at that point. But it seems it's still non-null regardless.","Url":"https://github.com/dotnet/roslyn/issues/37595","RelatedDescription":"Open issue \"Assigning result of oblivious method to nullable field still says it's non-null\" (#37595)"},{"Id":"474850196","IsPullRequest":true,"CreatedAt":"2019-07-30T22:27:56","Actor":"jasonmalinowski","Number":"37594","RawContent":null,"Title":"Add nullable annotations to speculative model creation and update code for bug found","State":"open","Body":"Commit at a time recommended, since this also changes the exception type we might throw in some case.\r\n\r\nThis isn't actually fixing any bug; this is just me cleaning up some code that I had to spend trying to decipher.","Url":"https://github.com/dotnet/roslyn/pull/37594","RelatedDescription":"Open PR \"Add nullable annotations to speculative model creation and update code for bug found\" (#37594)"},{"Id":"474803205","IsPullRequest":true,"CreatedAt":"2019-07-30T22:00:37","Actor":"dotnet-bot","Number":"37586","RawContent":null,"Title":"Merge release/dev16.3-preview1-vs-deps to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from release/dev16.3-preview1-vs-deps into master-vs-deps.\n(created from a manual run of the PR generation tool)\n\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.3-preview1-vs-deps-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/release/dev16.3-preview1-vs-deps\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.3-preview1-vs-deps-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/37586","RelatedDescription":"Closed or merged PR \"Merge release/dev16.3-preview1-vs-deps to master-vs-deps\" (#37586)"},{"Id":"474811711","IsPullRequest":true,"CreatedAt":"2019-07-30T20:44:18","Actor":"petrroll","Number":"37588","RawContent":null,"Title":"Add tests for RefaHelpers with empty Attributes / empty decls. ","State":"open","Body":"Add regression tests for #37584","Url":"https://github.com/dotnet/roslyn/pull/37588","RelatedDescription":"Open PR \"Add tests for RefaHelpers with empty Attributes / empty decls. \" (#37588)"},{"Id":"474810042","IsPullRequest":true,"CreatedAt":"2019-07-30T20:40:20","Actor":"dpoeschl","Number":"37587","RawContent":null,"Title":"Some Inline Rename accessibility improvements","State":"open","Body":"1. More descriptive text when an Inline Rename session begins to let the user know:\r\n    - The name of the identifier being renamed\r\n    - More options exist, and you can access them by invoking inline rename again\r\n    - That the identifier being renamed can be edited at any time\r\n2. Keyboard tabbing around the dashboard now skips invisible controls\r\n3. The Apply and Cancel (X) buttons now read automation text correctly","Url":"https://github.com/dotnet/roslyn/pull/37587","RelatedDescription":"Open PR \"Some Inline Rename accessibility improvements\" (#37587)"},{"Id":"474798377","IsPullRequest":true,"CreatedAt":"2019-07-30T20:11:51","Actor":"fayrose","Number":"37585","RawContent":null,"Title":"Added language check to null-checked parameters in parsing","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/37585","RelatedDescription":"Open PR \"Added language check to null-checked parameters in parsing\" (#37585)"},{"Id":"474841943","IsPullRequest":false,"CreatedAt":"2019-07-30T18:23:12","Actor":"stephentoub","Number":"37593","RawContent":null,"Title":"CA1823 incorrectly flags const used as a fixed buffer length","State":"open","Body":"#### Analyzer package\r\n\r\n[Microsoft.CodeAnalysis.FxCopAnalyzers](https://www.nuget.org/packages/Microsoft.CodeAnalysis.FxCopAnalyzers)\r\n\r\n#### Package Version\r\n\r\nv2.9.4\r\n\r\n#### Diagnostic ID\r\n\r\n[CA1823](https://docs.microsoft.com/en-us/visualstudio/code-quality/ca1823-avoid-unused-private-fields?view=vs-2019)\r\n\r\n#### Repro steps\r\n\r\n```C#\r\nusing System.Runtime.InteropServices;\r\n\r\nclass Program\r\n{\r\n    static void Main() { }\r\n\r\n    private const int SomeLength = 16;\r\n\r\n    [StructLayout(LayoutKind.Sequential)]\r\n    internal unsafe struct SomeStruct\r\n    {\r\n        internal fixed byte FixedBuffer[SomeLength];\r\n    }\r\n}\r\n```\r\n\r\n#### Expected behavior\r\nNo warnings.\r\n\r\n#### Actual behavior\r\nThe CA1823 analyzer flags the SomeLength const as being unused:\r\n```\r\nProgram.cs(7,23,7,33): warning CA1823: Unused field 'SomeLength'.\r\n```\r\neven though obviously it is being used.\r\n","Url":"https://github.com/dotnet/roslyn/issues/37593","RelatedDescription":"Open issue \"CA1823 incorrectly flags const used as a fixed buffer length\" (#37593)"},{"Id":"474732193","IsPullRequest":false,"CreatedAt":"2019-07-30T18:09:10","Actor":"333fred","Number":"37584","RawContent":null,"Title":"Refactoring crashes when typing `[]` in class body","State":"open","Body":"```CS\r\npublic class Class1\r\n{\r\n   // Uncomment \r\n   // []\r\n}\r\n\r\npublic class TestAttribute : Attribute\r\n{\r\n}\r\n```\r\n\r\nUncommenting that line crashes a whole bunch of IDE refactorings. This is one such stack trace:\r\n```\r\nSystem.ArgumentOutOfRangeException : 'end' must not be less than 'start'\r\nParameter name: end\r\n   at Microsoft.CodeAnalysis.Text.TextSpan.FromBounds(Int32 start,Int32 end)\r\n   at Microsoft.CodeAnalysis.CodeRefactorings.AbstractRefactoringHelpersService.GetSpanWithoutAttributes(SyntaxNode node,SyntaxNode root,ISyntaxFactsService syntaxFacts)\r\n   at async Microsoft.CodeAnalysis.CodeRefactorings.AbstractRefactoringHelpersService.TryGetSelectedNodeAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.CodeRefactorings.AbstractRefactoringHelpersService.TryGetSelectedNodeAsync[TSyntaxNode](<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.CSharp.CodeRefactorings.PullMemberUp.CSharpPullMemberUpCodeRefactoringProvider.GetSelectedNodeAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.CodeRefactorings.PullMemberUp.AbstractPullMemberUpRefactoringProvider.ComputeRefactoringsAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringService.GetRefactoringFromProviderAsync(<Unknown Parameters>)\r\n   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)\r\n```\r\n\r\nInt Preview 16.3 Preview 2.0 29128.8","Url":"https://github.com/dotnet/roslyn/issues/37584","RelatedDescription":"Open issue \"Refactoring crashes when typing `[]` in class body\" (#37584)"},{"Id":"474731770","IsPullRequest":false,"CreatedAt":"2019-07-30T18:08:12","Actor":"RikkiGibson","Number":"37582","RawContent":null,"Title":"NETSDK1056: Project is targeting runtime 'win-x64' but did not resolve any runtime-specific packages. This runtime may not be supported by the target framework.\tILTools ","State":"open","Body":"**Version used**: VisualStudio.16.Preview/16.3.0-pre.1.0+29123.89\r\nC# Tools 3.3.0-beta1-19360-03+7d47461d2ddd32defbc51c2cf0e75a3fef16c3d7\r\n\r\nI have been getting this error occasionally on incremental builds of Roslyn.sln. It doesn't seem to stop me from running my tests but it is a bit confusing.\r\n\r\n`NETSDK1056: Project is targeting runtime 'win-x64' but did not resolve any runtime-specific packages. This runtime may not be supported by the target framework.\tILTools\tF:\\src\\roslyn\\src\\Tools\\ILTools\\ILTools.proj\t1`\r\n\r\n","Url":"https://github.com/dotnet/roslyn/issues/37582","RelatedDescription":"Open issue \"NETSDK1056: Project is targeting runtime 'win-x64' but did not resolve any runtime-specific packages. This runtime may not be supported by the target framework.\tILTools \" (#37582)"},{"Id":"474731368","IsPullRequest":false,"CreatedAt":"2019-07-30T18:07:11","Actor":"vsfeedback","Number":"37581","RawContent":null,"Title":"Bad C# code formatting: using-statement without curly braces","State":"open","Body":"```\r\n// original code\r\nusing (var v = BeginScope())\r\nusing (A a = new A())\r\nusing (A a = new A(), b = new A())\r\nusing (BeginScope())\r\nreturn;\r\n\r\n// after VS2019 Format Selection (Ctrl+k, Ctrl+f)\r\nusing (var v = BeginScope())\r\nusing (A a = new A())\r\nusing (A a = new A(), b = new A())\r\nusing (BeginScope())\r\n͏͏͏ ͏͏͏ ͏͏͏ ͏͏͏ return;\r\n\r\n// suggested formatting:\r\nusing (var v = BeginScope())\r\n͏͏͏ ͏͏͏ ͏͏͏ ͏͏͏ using (A a = new A())\r\n͏͏͏ ͏͏͏ ͏͏͏ ͏͏͏ ͏͏͏ ͏͏͏ ͏͏͏ ͏͏͏ using (A a = new A(), b = new A())\r\n͏͏͏ ͏͏͏ ͏͏͏ ͏͏͏ ͏͏͏ ͏͏͏ ͏͏͏ ͏͏͏ ͏͏͏ ͏͏͏ ͏͏͏ ͏͏͏ using (BeginScope())\r\n͏͏͏ ͏͏͏ ͏͏͏ ͏͏͏ ͏͏͏ ͏͏͏ ͏͏͏ ͏͏͏ ͏͏͏ ͏͏͏ ͏͏͏ ͏͏͏ ͏͏͏ ͏͏͏ ͏͏͏ ͏͏͏ return;\r\n```\r\n\r\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/664154/bad-c-code-formatting-using-statement-without-curl.html\r\nVSTS ticketId: 956517_\r\n_These are the original issue comments:_\r\n\r\nVisual Studio Feedback System on 7/29/2019, 03:10 AM (31 hours ago): <markdown><p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\r\n</markdown>\r\n_These are the original issue solutions:_\r\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/37581","RelatedDescription":"Open issue \"Bad C# code formatting: using-statement without curly braces\" (#37581)"}],"ResultType":"GitHubIssue"},"CoreRT-Issues":{"Issues":[{"Id":"474043889","IsPullRequest":true,"CreatedAt":"2019-07-29T13:12:31","Actor":"MichalStrehovsky","Number":"7659","RawContent":null,"Title":"Prevent computing bad layout","State":"open","Body":"Value type fields that contain GC pointers need to start at pointer boundaries.\r\n\r\nCoreCLR does this check a bit differently (it technically allows unaligned fields, provided the GC pointer inside the valuetype ends up being aligned with respect to the beginning of the type, but in reality, I don't think it's possible to end up in such situation - the layout of the field type itself would end up being invalid).\r\n\r\nFixes one of the CPAOT failures.","Url":"https://github.com/dotnet/corert/pull/7659","RelatedDescription":"Open PR \"Prevent computing bad layout\" (#7659)"},{"Id":"473658285","IsPullRequest":true,"CreatedAt":"2019-07-29T06:41:45","Actor":"MichalStrehovsky","Number":"7657","RawContent":null,"Title":"Split interop manager to usage- and analysis-based","State":"closed","Body":"This puts interop manager on the same plan as metadata manager. The reason we need two managers is inlining: to determine what structs/delegates need marshaling data, we look at what methods got compiled. This works great as long as there's no inlining of these methods. If we inline a method used as such marker, we lose track of what needs interop data.\r\n\r\nWith this split, we can collect usage information during the IL scanning phase, and for codegen phase, we can reuse the information from the scanner.\r\n\r\nCommit 4c1058a removes a bunch of workarounds that we had in place because of this.\r\n\r\nThe commits mostly make sense (might help reviewing this big change), although I'm planning to squash them anyway. The `Don't make so much marshalling data` commit undoes something I did wrong in the `Track interop dependencies in the dependency graph` commit.\r\n\r\nFixes #6063.","Url":"https://github.com/dotnet/corert/pull/7657","RelatedDescription":"Closed or merged PR \"Split interop manager to usage- and analysis-based\" (#7657)"},{"Id":"473677246","IsPullRequest":true,"CreatedAt":"2019-07-27T21:00:42","Actor":"Suchiman","Number":"7658","RawContent":null,"Title":"Add support for embedding and processing embedded stacktrace line infos","State":"open","Body":"As discussed @MichalStrehovsky \r\n**TODO**:\r\n- configurability\r\n- compression\r\n- disabling reflection fallback\r\n\r\nUncompressed numbers for sizes:\r\nFor a debug Hello World application (which includes debug information for corelib).\r\n\r\n| Section | bytes | count |\r\n| --- | --- | --- |\r\n| rvaTokenMap | 127.788 | 10.648 |\r\n| sequencePoints | 1.012.608 | 111.737 |\r\n| stringHeap | 70.160 | 767 |","Url":"https://github.com/dotnet/corert/pull/7658","RelatedDescription":"Open PR \"Add support for embedding and processing embedded stacktrace line infos\" (#7658)"},{"Id":"470798920","IsPullRequest":false,"CreatedAt":"2019-07-27T17:34:25","Actor":"davidfowl","Number":"7640","RawContent":null,"Title":"Latest WebAPI broken","State":"closed","Body":"I haven't looked into it as yet but we made some changes that seem to result in failures after compiling with the IL compiler.\r\n\r\n```\r\nUnhandled Exception: System.PlatformNotSupportedException: Operation is not supported on this platform.\r\n   at System.Reflection.Runtime.Assemblies.RuntimeAssembly.get_CodeBase() + 0x24\r\n   at Microsoft.AspNetCore.Mvc.ApplicationParts.RelatedAssemblyAttribute.GetRelatedAssemblies(Assembly, Boolean, Func`2, Func`2) + 0x50\r\n   at Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartManager.<GetAsemblyClosure>d__9.MoveNext() + 0x8d\r\n   at System.Linq.Enumerable.ConcatIterator`1.MoveNext() + 0x62\r\n   at Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartManager.PopulateDefaultParts(String) + 0x16f\r\n   at Microsoft.Extensions.DependencyInjection.MvcCoreServiceCollectionExtensions.GetApplicationPartManager(IServiceCollection) + 0x81\r\n   at Microsoft.Extensions.DependencyInjection.MvcCoreServiceCollectionExtensions.AddMvcCore(IServiceCollection) + 0x17\r\n   at Microsoft.Extensions.DependencyInjection.MvcServiceCollectionExtensions.AddControllersCore(IServiceCollection) + 0xa\r\n   at Microsoft.Extensions.DependencyInjection.MvcServiceCollectionExtensions.AddControllers(IServiceCollection) + 0x11\r\n   at WebApplication2.Startup.ConfigureServices(IServiceCollection) + 0xc\r\n   at WebApplication2!<BaseAddress>+0xcd7ccd\r\n   at System.InvokeUtils.CallDynamicInvokeMethod(Object, IntPtr, Object, IntPtr, IntPtr, Object, Object[], BinderBundle, Boolean, Boolean, Boolean) + 0x218\r\n   at Internal.Reflection.Execution.MethodInvokers.InstanceMethodInvoker.Invoke(Object, Object[], BinderBundle, Boolean) + 0x7f\r\n   at Internal.Reflection.Core.Execution.MethodInvoker.Invoke(Object, Object[], Binder, BindingFlags, CultureInfo) + 0x46\r\n   at System.Reflection.Runtime.MethodInfos.RuntimeMethodInfo.Invoke(Object, BindingFlags, Binder, Object[], CultureInfo) + 0x58\r\n   at Microsoft.AspNetCore.Hosting.ConfigureServicesBuilder.InvokeCore(Object, IServiceCollection) + 0xf6\r\n   at Microsoft.AspNetCore.Hosting.GenericWebHostBuilder.UseStartup(Type, HostBuilderContext, IServiceCollection) + 0x198\r\n   at Microsoft.AspNetCore.Hosting.GenericWebHostBuilder.<>c__DisplayClass12_0.<UseStartup>b__0(HostBuilderContext, IServiceCollection) + 0xa1\r\n   at Microsoft.Extensions.Hosting.HostBuilder.CreateServiceProvider() + 0x19e\r\n   at Microsoft.Extensions.Hosting.HostBuilder.Build() + 0x3a\r\n   at WebApplication2.Program.Main(String[]) + 0x1b\r\n   at WebApplication2!<BaseAddress>+0xc04c30\r\n```\r\n\r\n","Url":"https://github.com/dotnet/corert/issues/7640","RelatedDescription":"Closed issue \"Latest WebAPI broken\" (#7640)"},{"Id":"472235106","IsPullRequest":false,"CreatedAt":"2019-07-27T17:10:19","Actor":"FrancoisM","Number":"7648","RawContent":null,"Title":"Build error: nutc_driver.exe returned exit code 1 with VS2019. No others errors. Ok on VS2017","State":"closed","Body":"My project has built on Azure Pipelines hosted agent for months.\r\nI switched from VS2017 to VS2019. Now it fails with \"nutc_driver.exe returned exit code 1\".\r\n\r\nI read about similar issue saying to use `<Use64BitCompiler>true</Use64BitCompiler>`. I did yet the problem remains. Other issues mention \"Out of memory\" or other errors. In my case, the log doesn't have any other errors but the one I report.\r\n\r\nI tried to uncheck \"native compilation\" but then the build took 2min (instead of over an hour), the app was about 30mb (vs 100mb usually) and would'nt install.\r\n","Url":"https://github.com/dotnet/corert/issues/7648","RelatedDescription":"Closed issue \"Build error: nutc_driver.exe returned exit code 1 with VS2019. No others errors. Ok on VS2017\" (#7648)"},{"Id":"473484940","IsPullRequest":true,"CreatedAt":"2019-07-27T09:46:44","Actor":"MichalStrehovsky","Number":"7656","RawContent":null,"Title":"Use a single ReadyToRunHelper enum","State":"closed","Body":"When I was troubleshooting the double/float helpers issue, it was really hairy because we have two copies or ReadyToRunHelper. We only need one.\r\n\r\nWhen Jan initially added the ILCompiler version in #129, it already came with `Keep in sync with https://github.com/dotnet/coreclr/blob/master/src/inc/readytorun.h`. We then added a couple helpers that don't exist in CoreCLR R2R because it was convenient, but we do want these numbers to match.\r\n\r\nI extracted the AOT specific ones to the end of the file, realizing that the ReadyToRun mode is trying to handle things it shouldn't. I deleted those.","Url":"https://github.com/dotnet/corert/pull/7656","RelatedDescription":"Closed or merged PR \"Use a single ReadyToRunHelper enum\" (#7656)"},{"Id":"473380499","IsPullRequest":true,"CreatedAt":"2019-07-26T19:08:27","Actor":"MichalStrehovsky","Number":"7653","RawContent":null,"Title":"Delete dead code in ILCompiler.ReadyToRun","State":"closed","Body":"Not sure how much of this is earmarked for the future (I left a couple that I found obvious), and how much is just leftovers from old designs that we should delete.","Url":"https://github.com/dotnet/corert/pull/7653","RelatedDescription":"Closed or merged PR \"Delete dead code in ILCompiler.ReadyToRun\" (#7653)"},{"Id":"473452930","IsPullRequest":true,"CreatedAt":"2019-07-26T19:07:42","Actor":"Dotnet-GitSync-Bot","Number":"7654","RawContent":null,"Title":"Mirror changes from dotnet/corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7654","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx\" (#7654)"},{"Id":"473357025","IsPullRequest":true,"CreatedAt":"2019-07-26T19:07:33","Actor":"MichalStrehovsky","Number":"7652","RawContent":null,"Title":"Add R2R implementation of getMethodSync","State":"closed","Body":"The R2R implementation is to just throw.\r\n\r\nThis doesn't throw in crossgen, but it takes an NGen-specific code path and _then_ throws when we deal with `CORINFO_HELP_MON_ENTER_STATIC`/`CORINFO_HELP_MON_EXIT_STATIC` (that the result of `getMethodSync` is the parameter for).","Url":"https://github.com/dotnet/corert/pull/7652","RelatedDescription":"Closed or merged PR \"Add R2R implementation of getMethodSync\" (#7652)"},{"Id":"473477763","IsPullRequest":true,"CreatedAt":"2019-07-26T18:15:15","Actor":"trylek","Number":"7655","RawContent":null,"Title":"One more fix for SuperILC OOM","State":"open","Body":"In my previous change I fixed OOM's caused by copying too long\r\nexecution log files but I forgot to apply the same fix to compilation\r\nlogs. This additional delta does just that.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7655","RelatedDescription":"Open PR \"One more fix for SuperILC OOM\" (#7655)"},{"Id":"473264674","IsPullRequest":true,"CreatedAt":"2019-07-26T11:03:46","Actor":"trylek","Number":"7651","RawContent":null,"Title":"Fork RyuJit and ReadyToRun version of getGSCookie","State":"closed","Body":"In CPAOT, we need a CoreCLR-compatible version of the GS cookie\r\nusing the appropriate R2R helper, not some hardcoded constant\r\npresumably used by the full AOT CoreRT runtime.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7651","RelatedDescription":"Closed or merged PR \"Fork RyuJit and ReadyToRun version of getGSCookie\" (#7651)"},{"Id":"473050887","IsPullRequest":true,"CreatedAt":"2019-07-26T06:02:22","Actor":"MichalStrehovsky","Number":"7650","RawContent":null,"Title":"Revert \"Fix enumeration value of R2R helpers [Dbl|Flt][Rem|Round]\"","State":"closed","Body":"Reverts dotnet/corert#6779\r\n\r\nThis is so that the enum matches CoreCLR readytorun.h.","Url":"https://github.com/dotnet/corert/pull/7650","RelatedDescription":"Closed or merged PR \"Revert \"Fix enumeration value of R2R helpers [Dbl|Flt][Rem|Round]\"\" (#7650)"},{"Id":"472326257","IsPullRequest":true,"CreatedAt":"2019-07-25T07:51:34","Actor":"Dotnet-GitSync-Bot","Number":"7649","RawContent":null,"Title":"Mirror changes from dotnet/corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7649","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx\" (#7649)"},{"Id":"472004492","IsPullRequest":true,"CreatedAt":"2019-07-24T02:07:47","Actor":"Dotnet-GitSync-Bot","Number":"7647","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @sywhang","Url":"https://github.com/dotnet/corert/pull/7647","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#7647)"},{"Id":"471969859","IsPullRequest":true,"CreatedAt":"2019-07-24T02:00:21","Actor":"nattress","Number":"7646","RawContent":null,"Title":"Add Linux / Mac ReadyToRun CI testing","State":"closed","Body":"* Remove Windows_NT only condition on CI R2R test leg\r\n* Use Top200 suite of CoreCLR tests since they reliably pass in R2R mode","Url":"https://github.com/dotnet/corert/pull/7646","RelatedDescription":"Closed or merged PR \"Add Linux / Mac ReadyToRun CI testing\" (#7646)"},{"Id":"471965978","IsPullRequest":true,"CreatedAt":"2019-07-23T21:35:43","Actor":"trylek","Number":"7645","RawContent":null,"Title":"CoreCLR Pri#1 fixes for the IsManagedSequential method","State":"open","Body":"This change fixes all remaining differences between CPAOT\r\nand Crossgen for the CoreCLR Pri#1 tests w.r.t. my recently\r\nimplemented IsManagedSequential instrumentation.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7645","RelatedDescription":"Open PR \"CoreCLR Pri#1 fixes for the IsManagedSequential method\" (#7645)"},{"Id":"471750238","IsPullRequest":true,"CreatedAt":"2019-07-23T21:09:18","Actor":"trylek","Number":"7644","RawContent":null,"Title":"Mechanical move of IsManagedSequentialType to R2R field algorithm","State":"closed","Body":"Based on JanK's suggestion I'm moving IsManagedSequentialType\r\nto ReadyToRunMetadataFieldLayoutAlgorithm. In this change I'm not\r\nmaking any semantic changes to the method; I'll send out a subsequent\r\nPR for an additional delta fixing discrepancies in the method\r\nas discovered by the instrumentation I recently implemented.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7644","RelatedDescription":"Closed or merged PR \"Mechanical move of IsManagedSequentialType to R2R field algorithm\" (#7644)"},{"Id":"470009694","IsPullRequest":true,"CreatedAt":"2019-07-23T17:32:43","Actor":"trylek","Number":"7633","RawContent":null,"Title":"Initial support for IsManagedSequential diffing in SuperIlc","State":"closed","Body":"This change searches compiler logs for specially formatted sections\r\nproduced by my private CPAOT and Crossgen instrumentation changes\r\nand outputs their lists and diffs between CPAOT and Crossgen.\r\n\r\nI have finally reached almost 100% parity between CPAOT and Crossgen\r\nqueries for the IsManagedSequential type characteristics and I have\r\nalready identified a type with mismatching results. Based on JanK's\r\nsuggestion I assume we should run this through anything we can find\r\nto maximize our confidence in the R2R compiler.\r\n\r\nThanks\r\n\r\nTomas\r\n\r\nP.S. I'm going to send out separate not-for-checkin PR's for the\r\nappropriate CPAOT and Crossgen instrumentations. For SuperIlc,\r\nI believe there's no harm in actually merging the change in.","Url":"https://github.com/dotnet/corert/pull/7633","RelatedDescription":"Closed or merged PR \"Initial support for IsManagedSequential diffing in SuperIlc\" (#7633)"},{"Id":"471340295","IsPullRequest":false,"CreatedAt":"2019-07-22T21:15:59","Actor":"nattress","Number":"7643","RawContent":null,"Title":"Compile static constructors for R2R","State":"open","Body":"CPAOT doesn't compile static constructors which has a runtime JIT cost. We should measure with them enabled (rooting them all for compilation) to assess if they give a startup benefit worth the cost of carrying them in the binary.","Url":"https://github.com/dotnet/corert/issues/7643","RelatedDescription":"Open issue \"Compile static constructors for R2R\" (#7643)"},{"Id":"471311302","IsPullRequest":false,"CreatedAt":"2019-07-22T20:29:12","Actor":"nattress","Number":"7642","RawContent":null,"Title":"Access checks in JIT interface methods","State":"open","Body":"The final section of `CEEInfo::getCallInfo` (https://github.com/dotnet/coreclr/blob/5f93d3b1c48ba6916d5f31d79cb7c17d564eecef/src/vm/jitinterface.cpp#L5597) deals with access checks validating the declarative authority of a given caller to call the callee. This is currently missing in the CPAOT compiler. Similar checks needed in `CEEInfo::getFieldInfo`.","Url":"https://github.com/dotnet/corert/issues/7642","RelatedDescription":"Open issue \"Access checks in JIT interface methods\" (#7642)"},{"Id":"471307755","IsPullRequest":false,"CreatedAt":"2019-07-22T20:23:51","Actor":"nattress","Number":"7641","RawContent":null,"Title":"Type Layout Checks","State":"open","Body":"To protect system resiliency, Crossgen emits method pre-codes (code that is guaranteed to run once before a given method is executed for the first time) that checks various properties of dependent types outside the version bubble that affect codegen of that particular method. This functionality is currently missing and needs porting into CPAOT.","Url":"https://github.com/dotnet/corert/issues/7641","RelatedDescription":"Open issue \"Type Layout Checks\" (#7641)"},{"Id":"469527045","IsPullRequest":false,"CreatedAt":"2019-07-22T14:31:50","Actor":"forestbat","Number":"7631","RawContent":null,"Title":"Future of AOT","State":"closed","Body":"#https://github.com/dotnet/coreclr/commit/0cc81b60eb184c92b8526348d4bb056ed563e9d6\r\n#https://github.com/dotnet/corefx/commit/1acaa2017cfc64ef1aabcf3b19d0e097af692616\r\nAs we all know，development for .NET5 has started and this project is like a forgotten corner，so in the next year（until November 2020）will MS invest more to this？\r\nAnd will AOT of C#（either corert or mono aot）support more processor structure such as MIPS or RISCV？\r\nHope your reply.","Url":"https://github.com/dotnet/corert/issues/7631","RelatedDescription":"Closed issue \"Future of AOT\" (#7631)"},{"Id":"470729291","IsPullRequest":false,"CreatedAt":"2019-07-21T18:17:23","Actor":"Suchiman","Number":"7639","RawContent":null,"Title":"CoreRT instructions no longer work","State":"closed","Body":"I'm not sure what has changed but it affects both of my machines:\r\n```\r\nMicrosoft.NETCore.Native.Publish.targets(78,5): error :\r\nThe PrivateSdkAssemblies ItemGroup is required for _ComputeAssembliesToCompileToNative\r\n```\r\nbut only when using the nuget package and not when using my own CoreRT build","Url":"https://github.com/dotnet/corert/issues/7639","RelatedDescription":"Closed issue \"CoreRT instructions no longer work\" (#7639)"},{"Id":"470726858","IsPullRequest":false,"CreatedAt":"2019-07-21T03:46:42","Actor":"Shadow4walker","Number":"7638","RawContent":null,"Title":"System.Reflection.MissingRuntimeArtifactException","State":"closed","Body":"I'm trying to use a [NoesisGUI](https://github.com/Shadow4walker/NoesisSample) with corert\r\nalso i have tried all of rd.xml possible solutions with no luck!! idk what am i missing here! \"actually I don't know what's the correct way to use rd.xml with this\"\r\n[NoesisGUI Managed SDK](https://github.com/Noesis/Managed)\r\n\r\n here's the log after starting the sample\r\n\r\n> Unhandled Exception: EETypeRva:0x009F1C88(System.Reflection.MissingRuntimeArtifactException): MakeGenericMethod() cannot create this generic method instantiation because the instantiation was not metadata-enabled: 'Noesis.Extend.CreateGetterHelper<NoesisApp.Display,System.Int32>(System.Reflection.MethodInfo)' For more information, please visit http://go.microsoft.com/fwlink/?LinkID=616868\r\n   at Internal.Reflection.Core.Execution.ExecutionEnvironment.GetMethodInvoker(RuntimeTypeInfo, QMethodDefinition, RuntimeTypeInfo[], MemberInfo) + 0x148\r\n   at System.Reflection.Runtime.MethodInfos.NativeFormat.NativeFormatMethodCommon.GetUncachedMethodInvoker(RuntimeTypeInfo[], MemberInfo) + 0x50\r\n   at System.Reflection.Runtime.MethodInfos.RuntimeMethodInfo.get_MethodInvoker() + 0xa8\r\n   at System.Reflection.Runtime.MethodInfos.RuntimeNamedMethodInfo`1.MakeGenericMethod(Type[]) + 0x104\r\n   at Noesis.Extend.CreateGetter[ReturnT](Type, MethodInfo) + 0x6b\r\n   at Noesis.Extend.PropertyAccessorRO`1..ctor(PropertyInfo) + 0x3e\r\n   at Noesis.Extend.<>c__DisplayClass407_0`1.<AddPropertyAccessor>b__1() + 0x24\r\n   at Noesis.Extend.AddPropertyAccessor(Extend.NativeTypePropsInfo, PropertyInfo, Func`1, Func`1) + 0xa4\r\n   at Noesis.Extend.AddPropertyAccessor[PropertyT](Extend.NativeTypePropsInfo, PropertyInfo, Boolean) + 0x88\r\n   at Noesis.Extend.<>c.<AddPropertyFunctions>b__405_4(Extend.NativeTypePropsInfo, PropertyInfo, Boolean) + 0x39\r\n   at Noesis.Extend.AddProperty(Extend.NativeTypePropsInfo, PropertyInfo, Boolean) + 0xae\r\n   at Noesis.Extend.CreateNativePropsData(Type, PropertyInfo[], Extend.NativeTypeInfo, Int32&) + 0x1b4\r\n   at Noesis.Extend.RegisterNativeType(Type, Boolean) + 0x278\r\n   at Noesis.Extend.EnsureNativeType(Type, Boolean) + 0x31\r\n   at Noesis.Extend.AddProperty(Extend.NativeTypePropsInfo, PropertyInfo, Boolean) + 0x108\r\n   at Noesis.Extend.CreateNativePropsData(Type, PropertyInfo[], Extend.NativeTypeInfo, Int32&) + 0x1b4\r\n   at Noesis.Extend.RegisterNativeType(Type, Boolean) + 0x278\r\n   at Noesis.Extend.EnsureNativeType(Type, Boolean) + 0x31\r\n   at Noesis.Extend.CreateNativeTypeData(Type, IntPtr) + 0x4e\r\n   at Noesis.Extend.RegisterNativeType(Type, Boolean) + 0x266\r\n   at Noesis.Extend.EnsureNativeType(Type, Boolean) + 0x31\r\n   at Noesis.Extend.NewCPtr(Type, Object) + 0x21\r\n   at Noesis.Extend.GetInstanceHandle(Object) + 0x6c\r\n   at NoesisApp.Application.Start() + 0x28f\r\n   at NoesisApp.Application.Run() + 0x30\r\n   at ConsoleApp1.Program.Main(String[]) + 0x5c\r\n   at ConsoleApp1!<BaseAddress>+0x52d480<","Url":"https://github.com/dotnet/corert/issues/7638","RelatedDescription":"Closed issue \"System.Reflection.MissingRuntimeArtifactException\" (#7638)"},{"Id":"470254205","IsPullRequest":true,"CreatedAt":"2019-07-19T16:29:37","Actor":"MichalStrehovsky","Number":"7636","RawContent":null,"Title":"Adjust getMethodSig for generic inlining","State":"closed","Body":"We were not using the `memberParent` parameter, but it's critical to use it when generic inlining happens.\r\n\r\nFixes #7625.","Url":"https://github.com/dotnet/corert/pull/7636","RelatedDescription":"Closed or merged PR \"Adjust getMethodSig for generic inlining\" (#7636)"},{"Id":"470345239","IsPullRequest":true,"CreatedAt":"2019-07-19T16:18:01","Actor":"jkotas","Number":"7637","RawContent":null,"Title":"Port GC change from CoreCLR","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7637","RelatedDescription":"Closed or merged PR \"Port GC change from CoreCLR\" (#7637)"},{"Id":"470057749","IsPullRequest":true,"CreatedAt":"2019-07-19T02:17:13","Actor":"cshung","Number":"7635","RawContent":null,"Title":"Fix string import for CppCodeGen","State":"closed","Body":"The capital `X` is not a standard [escape sequence](https://en.cppreference.com/w/cpp/language/escape), we should use lower case `x`.","Url":"https://github.com/dotnet/corert/pull/7635","RelatedDescription":"Closed or merged PR \"Fix string import for CppCodeGen\" (#7635)"},{"Id":"470006900","IsPullRequest":true,"CreatedAt":"2019-07-18T23:57:40","Actor":"jkotas","Number":"7632","RawContent":null,"Title":"Port GC changes from CoreCLR","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7632","RelatedDescription":"Closed or merged PR \"Port GC changes from CoreCLR\" (#7632)"},{"Id":"470014921","IsPullRequest":true,"CreatedAt":"2019-07-18T22:12:09","Actor":"trylek","Number":"7634","RawContent":null,"Title":"WIP [no-merge] IsManagedSequential CPAOT instrumentation","State":"open","Body":"This instrumentation change (I don't intend to merge in) adds logging\r\nof IsManagedSequential results. I have sent out a separate PR\r\nfor the corresponding SuperIlc change (I believe the SuperIlc change\r\nis worth merging in) and I'll send out another instrumentation change\r\nfor Crossgen.\r\n\r\nThanks\r\n\r\nTomas\r\n\r\nP.S. Once I figure out how to fix the remaining inconsistencies in\r\nIsManagedSequential, I'm going to merge in a smaller change just\r\nmoving the [fixed] IsManagedSequentialMethod to the R2R field\r\nlayout algorithm source file per JanK's suggestion.","Url":"https://github.com/dotnet/corert/pull/7634","RelatedDescription":"Open PR \"WIP [no-merge] IsManagedSequential CPAOT instrumentation\" (#7634)"},{"Id":"469455160","IsPullRequest":true,"CreatedAt":"2019-07-18T18:19:11","Actor":"jkotas","Number":"7630","RawContent":null,"Title":"Delete stale cache size detection code on Windows","State":"closed","Body":"Fill cache size detection on Unix with CoreCLR PAL implementation","Url":"https://github.com/dotnet/corert/pull/7630","RelatedDescription":"Closed or merged PR \"Delete stale cache size detection code on Windows\" (#7630)"}],"ResultType":"GitHubIssue"},"SDK-Issues":{"Issues":[{"Id":"473535606","IsPullRequest":false,"CreatedAt":"2019-07-31T04:01:03","Actor":"xt0rted","Number":"3469","RawContent":null,"Title":"appsettings files aren't included in publish folder when using PublishSingleFile","State":"closed","Body":"I'm testing out the `/p:PublishSingleFile=true` option and it's working well so far, but my `appsettings.json` doesn't get included in the publish folder. If I don't use `PublishSingleFile=true` then the file does get copied to the publish folder.\r\n\r\nI'm using the following to publish:\r\n\r\n```console\r\ndotnet publish -c Release /p:PublishSingleFile=true /p:PublishTrimmed=true\r\n```\r\n\r\nIn my `.csproj` I have the following but it doesn't seem to have an effect when `PublishSingleFile=true`:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp3.0</TargetFramework>\r\n    <RuntimeIdentifier>win10-x64</RuntimeIdentifier>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <None Update=\"appsettings*.json\" CopyToOutputDirectory=\"Always\" CopyToPublishDirectory=\"Always\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\nI'm using SDK version 3.0.100-preview7-012821.\r\n\r\n## Current workaround\r\n\r\nAfter looking through some GitHub issues I found mention of `ExcludeFromSingleFile`. If I add that to my appsettings entry then the file gets included in the single file publish results.\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <ItemGroup>\r\n    <None Update=\"appsettings*.json\" CopyToOutputDirectory=\"Always\" CopyToPublishDirectory=\"Always\" ExcludeFromSingleFile=\"True\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\nSince these files are the standard way of handling settings in a file I'd assume they would be included in the publish results without any extra settings, or at least if `CopyToPublishDirectory` is set.","Url":"https://github.com/dotnet/sdk/issues/3469","RelatedDescription":"Closed issue \"appsettings files aren't included in publish folder when using PublishSingleFile\" (#3469)"},{"Id":"474677142","IsPullRequest":true,"CreatedAt":"2019-07-30T23:33:44","Actor":"dotnet-maestro[bot]","Number":"3491","RawContent":null,"Title":"[release/3.0.100-preview8] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:0e68ca02-619f-4dab-d003-08d7114cdbad)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190730.08\r\n- **Date Produced**: 7/30/2019 7:48 PM\r\n- **Commit**: c855ac718789051d5d67282c88decca445de7711\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-preview8-28380-08\r\n\r\n[marker]: <> (End:0e68ca02-619f-4dab-d003-08d7114cdbad)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3491","RelatedDescription":"Closed or merged PR \"[release/3.0.100-preview8] Update dependencies from dotnet/core-setup\" (#3491)"},{"Id":"474614791","IsPullRequest":false,"CreatedAt":"2019-07-30T22:18:15","Actor":"JohanLarsson","Number":"3489","RawContent":null,"Title":"Pack when referencing Microsoft.CodeAnalysis.CSharp generates exclude=\"Build,Analyzers\"","State":"closed","Body":"Repro steps:\r\n\r\n1. New project:\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netstandard1.3</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <PropertyGroup>\r\n    <Version>0.1.0-dev</Version>\r\n    <Authors>Author</Authors>\r\n    <Description>Descriptor</Description>\r\n    <NeutralLanguage>en</NeutralLanguage>\r\n    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>\r\n    <PackageLicenseExpression>MIT</PackageLicenseExpression>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.CodeAnalysis.CSharp\" Version=\"2.3.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\n2. Build in VS\r\n3. Check created package.\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<package xmlns=\"http://schemas.microsoft.com/packaging/2012/06/nuspec.xsd\">\r\n  <metadata>\r\n    <id>PackRepro</id>\r\n    <version>0.1.0-dev</version>\r\n    <authors>Author</authors>\r\n    <owners>Author</owners>\r\n    <requireLicenseAcceptance>false</requireLicenseAcceptance>\r\n    <license type=\"expression\">MIT</license>\r\n    <description>Descriptor</description>\r\n    <dependencies>\r\n      <group targetFramework=\".NETStandard1.3\">\r\n        <dependency id=\"Microsoft.CodeAnalysis.CSharp\" version=\"2.3.1\" exclude=\"Build,Analyzers\" />\r\n        <dependency id=\"NETStandard.Library\" version=\"1.6.1\" exclude=\"Build,Analyzers\" />\r\n      </group>\r\n    </dependencies>\r\n  </metadata>\r\n</package>\r\n```\r\n\r\nI tried `<PackageReference Include=\"Microsoft.CodeAnalysis.CSharp\" Version=\"2.3.1\" PrivateAssets=\"none\"/>` but it did not have any effect.\r\n\r\nIs there a way to pack this so that analyzers are not excluded?\r\nIs there documentation about this?","Url":"https://github.com/dotnet/sdk/issues/3489","RelatedDescription":"Closed issue \"Pack when referencing Microsoft.CodeAnalysis.CSharp generates exclude=\"Build,Analyzers\"\" (#3489)"},{"Id":"474858582","IsPullRequest":false,"CreatedAt":"2019-07-30T18:57:29","Actor":"davidmatson","Number":"3492","RawContent":null,"Title":"When using new-style csproj with .NET Framework, the default TargetPlatform is x86 rather than AnyCPU","State":"open","Body":"**Visual Studio Version**:\r\n2019 (16.2.0)\r\n\r\n**Summary**:\r\nWhen using the new-style (CPS?) csproj but targeting .NET Framework, the default TargetPlatform is differe than either .NET Core or old-style .NET Framework csprojs (x86 rather than AnyCPU).\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. File -> New -> Project -> .NET Core exe\r\n\r\n2. Unload the csproj and replace the target framework line with: ```<TargetFramework>net472</TargetFramework>```\r\n\r\n3. Releoad the project and check its properties\r\n\r\n**Expected Behavior**:\r\nTarget platform in AnyCPU.\r\n\r\n**Actual Behavior**:\r\nTarget platform is x86.\r\n\r\n**User Impact**:\r\nConfusing behavior when restoring NuGet packages, and inconsistency with all other C# project variants.","Url":"https://github.com/dotnet/sdk/issues/3492","RelatedDescription":"Open issue \"When using new-style csproj with .NET Framework, the default TargetPlatform is x86 rather than AnyCPU\" (#3492)"},{"Id":"474626403","IsPullRequest":false,"CreatedAt":"2019-07-30T14:40:37","Actor":"JohanLarsson","Number":"3490","RawContent":null,"Title":"Pack without explicit NETStandard.Library dependency","State":"open","Body":"Repro steps:\r\n1. New project:\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netstandard1.3</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <PropertyGroup>\r\n    <Version>0.1.0-dev</Version>\r\n    <Authors>Author</Authors>\r\n    <Description>Descriptor</Description>\r\n    <NeutralLanguage>en</NeutralLanguage>\r\n    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>\r\n    <PackageLicenseExpression>MIT</PackageLicenseExpression>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.CodeAnalysis.CSharp\" Version=\"2.3.1\" PrivateAssets=\"none\"/>\r\n    <PackageReference Update=\"NETStandard.Library\" PrivateAssets=\"all\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\n2. Build in VS\r\n3. Inspect package:\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<package xmlns=\"http://schemas.microsoft.com/packaging/2012/06/nuspec.xsd\">\r\n  <metadata>\r\n    <id>PackRepro</id>\r\n    <version>0.1.0-dev</version>\r\n    <authors>Author</authors>\r\n    <owners>Author</owners>\r\n    <requireLicenseAcceptance>false</requireLicenseAcceptance>\r\n    <license type=\"expression\">MIT</license>\r\n    <description>Descriptor</description>\r\n    <dependencies>\r\n      <group targetFramework=\".NETStandard1.3\">\r\n        <dependency id=\"Microsoft.CodeAnalysis.CSharp\" version=\"2.3.1\" exclude=\"Build,Analyzers\" />\r\n        <dependency id=\"NETStandard.Library\" version=\"1.6.1\" exclude=\"Build,Analyzers\" />\r\n      </group>\r\n    </dependencies>\r\n  </metadata>\r\n</package>\r\n```","Url":"https://github.com/dotnet/sdk/issues/3490","RelatedDescription":"Open issue \"Pack without explicit NETStandard.Library dependency\" (#3490)"},{"Id":"474545209","IsPullRequest":true,"CreatedAt":"2019-07-30T14:36:33","Actor":"dotnet-maestro[bot]","Number":"3486","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190729.29\r\n- **Date Produced**: 7/29/2019 10:51 PM\r\n- **Commit**: 84d9a013b66c3e14a67ace0a99ae84e6eb8b6a7d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19379.29\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19379.29\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3486","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3486)"},{"Id":"474566979","IsPullRequest":true,"CreatedAt":"2019-07-30T12:52:07","Actor":"dotnet-maestro[bot]","Number":"3488","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/core-setup","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee7760b1-2875-4869-d002-08d7114cdbad)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190729.05\r\n- **Date Produced**: 7/29/2019 3:24 PM\r\n- **Commit**: d15a0adeb874801e7bfaa4fbbb306a2efa268497\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-preview8-28379-05\r\n\r\n[marker]: <> (End:ee7760b1-2875-4869-d002-08d7114cdbad)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3488","RelatedDescription":"Open PR \"[release/3.0.1xx] Update dependencies from dotnet/core-setup\" (#3488)"},{"Id":"474566203","IsPullRequest":true,"CreatedAt":"2019-07-30T12:50:34","Actor":"dotnet-maestro[bot]","Number":"3487","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c3e20d8c-7bed-4085-8124-08d70655e1d3)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190729.19\r\n- **Date Produced**: 7/30/2019 6:49 AM\r\n- **Commit**: 2128ad006b493c4fa35dacd7d5b7bca65630413d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19379.19\r\n\r\n[marker]: <> (End:c3e20d8c-7bed-4085-8124-08d70655e1d3)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3487","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/core-setup\" (#3487)"},{"Id":"474481551","IsPullRequest":false,"CreatedAt":"2019-07-30T09:41:44","Actor":"mcartoixa","Number":"3485","RawContent":null,"Title":"When using custom $(BaseIntermediateOutputPath) the build still picks files from obj/","State":"open","Body":"I like to customize `$(BaseIntermediateOutputPath)` on my build servers to a centralized location so that I am very sure to start from fresh (just delete the folder and there you go).\r\nOn a development machine, Visual Studio generates files (e.g. `AssemblyInfo.cs`) in the default folder, (`obj/`, inside the project folder). When trying the build server script, it regenerates those files in the customized `$(BaseIntermediateOutputPath)` folder but it stills picks up the default ones that have been generated before for compilation...\r\n\r\nMy workaround is to add the following property on my projects in the build server script: `DefaultItemExcludesInProjectFolder=bin/**;obj/**`. My use case might be a fringe one, but I think these folders should be excluded by default, in a hardcoded way (cf. https://github.com/dotnet/sdk/blob/master/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.Sdk.DefaultItems.targets#L39).\r\n\r\nUsing .NET Core 3.0 preview 7.","Url":"https://github.com/dotnet/sdk/issues/3485","RelatedDescription":"Open issue \"When using custom $(BaseIntermediateOutputPath) the build still picks files from obj/\" (#3485)"},{"Id":"474386703","IsPullRequest":true,"CreatedAt":"2019-07-30T05:52:39","Actor":"peterhuene","Number":"3484","RawContent":null,"Title":"Retry apphost creation.","State":"open","Body":"This PR implements a parameterized retry count for creating the apphost.\r\n\r\nLike the `Copy` task from MSBuild, the `CreateAppHost` task now takes a\r\nparameter to specify the number of retries and the delay between retries (in\r\nmilliseconds) to perform if the creation fails.\r\n\r\nThis should help alleviate build failures when external processes are locking\r\nthe intermediate apphost during a build (especially on Windows).\r\n\r\nFixes [AB#950462](https://devdiv.visualstudio.com/0bdbc590-a062-4c3f-b0f6-9383f67865ee/_workitems/edit/950462).\r\nFixes dotnet/cli#11650.","Url":"https://github.com/dotnet/sdk/pull/3484","RelatedDescription":"Open PR \"Retry apphost creation.\" (#3484)"},{"Id":"474320728","IsPullRequest":true,"CreatedAt":"2019-07-30T03:36:59","Actor":"dotnet-maestro[bot]","Number":"3483","RawContent":null,"Title":"[release/3.0.100-preview8] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:0e68ca02-619f-4dab-d003-08d7114cdbad)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190729.14\r\n- **Date Produced**: 7/30/2019 12:15 AM\r\n- **Commit**: f4b35ce6e8583b08630baf576f55424728b04081\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-preview8-28379-14\r\n\r\n[marker]: <> (End:0e68ca02-619f-4dab-d003-08d7114cdbad)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3483","RelatedDescription":"Closed or merged PR \"[release/3.0.100-preview8] Update dependencies from dotnet/core-setup\" (#3483)"},{"Id":"473569646","IsPullRequest":false,"CreatedAt":"2019-07-30T00:09:33","Actor":"wli3","Number":"3471","RawContent":null,"Title":"Cannot run pack when GeneratePackageOnBuild is true","State":"closed","Body":"Create a console app. Set GeneratePackageOnBuild=true. Run `dotnet pack`. This bug as there since 2.0\r\n\r\n```\r\nMicrosoft (R) Build Engine version 16.3.0-preview-19375-03+c19c7499a for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n  Restore completed in 130.75 ms for C:\\work\\sdk\\artifacts\\tmp\\Debug\\It_packs_succ---E7D10EDE\\HelloWorld.csproj.\r\nC:\\work\\sdk\\artifacts\\bin\\Debug\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Publish.targets(154,5): error MSB3030: Could not copy the file \"C:\\work\\sdk\\artifacts\\tmp\\Debug\\It_packs_succ---E7D10EDE\\bin\\Debug\\netcoreapp2.1\\HelloWorld.deps.json\" because it was not found. [C:\\work\\sdk\\artifacts\\tmp\\Debug\\It_packs_succ---E7D10EDE\\HelloWorld.csproj]\r\nC:\\work\\sdk\\artifacts\\bin\\Debug\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Publish.targets(154,5): error MSB3030: Could not copy the file \"obj\\Debug\\netcoreapp2.1\\HelloWorld.dll\" because it was not found. [C:\\work\\sdk\\artifacts\\tmp\\Debug\\It_packs_succ---E7D10EDE\\HelloWorld.csproj]\r\nC:\\work\\sdk\\artifacts\\bin\\Debug\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Publish.targets(154,5): error MSB3030: Could not copy the file \"obj\\Debug\\netcoreapp2.1\\HelloWorld.pdb\" because it was not found. [C:\\work\\sdk\\artifacts\\tmp\\Debug\\It_packs_succ---E7D10EDE\\HelloWorld.csproj]\r\nC:\\work\\sdk\\artifacts\\bin\\Debug\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Publish.targets(154,5): error MSB3030: Could not copy the file \"C:\\work\\sdk\\artifacts\\tmp\\Debug\\It_packs_succ---E7D10EDE\\bin\\Debug\\netcoreapp2.1\\HelloWorld.runtimeconfig.json\" because it was not found. [C:\\work\\sdk\\artifacts\\tmp\\Debug\\It_packs_succ---E7D10EDE\\HelloWorld.csproj]\r\n```","Url":"https://github.com/dotnet/sdk/issues/3471","RelatedDescription":"Closed issue \"Cannot run pack when GeneratePackageOnBuild is true\" (#3471)"},{"Id":"474309570","IsPullRequest":true,"CreatedAt":"2019-07-30T00:06:01","Actor":"dotnet-bot","Number":"3482","RawContent":null,"Title":"Merge release/3.0.1xx to master","State":"open","Body":"\nThis is an automatically generated pull request from release/3.0.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3482","RelatedDescription":"Open PR \"Merge release/3.0.1xx to master\" (#3482)"},{"Id":"474174355","IsPullRequest":true,"CreatedAt":"2019-07-29T17:41:44","Actor":"livarcocc","Number":"3481","RawContent":null,"Title":"Updating the branding to preview9","State":"open","Body":"","Url":"https://github.com/dotnet/sdk/pull/3481","RelatedDescription":"Open PR \"Updating the branding to preview9\" (#3481)"},{"Id":"473773578","IsPullRequest":true,"CreatedAt":"2019-07-29T17:26:53","Actor":"livarcocc","Number":"3478","RawContent":null,"Title":"Update branding on master to 5.0.100-alpha1","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/3478","RelatedDescription":"Closed or merged PR \"Update branding on master to 5.0.100-alpha1\" (#3478)"},{"Id":"473773459","IsPullRequest":true,"CreatedAt":"2019-07-29T17:26:39","Actor":"livarcocc","Number":"3477","RawContent":null,"Title":"Merge master into release/3.0.1xx","State":"closed","Body":"This was a clean merge.","Url":"https://github.com/dotnet/sdk/pull/3477","RelatedDescription":"Closed or merged PR \"Merge master into release/3.0.1xx\" (#3477)"},{"Id":"474037748","IsPullRequest":true,"CreatedAt":"2019-07-29T14:35:37","Actor":"dotnet-maestro[bot]","Number":"3480","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c3e20d8c-7bed-4085-8124-08d70655e1d3)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190729.02\r\n- **Date Produced**: 7/29/2019 11:19 AM\r\n- **Commit**: 3a87ac0079c714f13e35b319ad68cd15f66e0172\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-preview8-28379-02\r\n\r\n[marker]: <> (End:c3e20d8c-7bed-4085-8124-08d70655e1d3)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3480","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#3480)"},{"Id":"474013337","IsPullRequest":true,"CreatedAt":"2019-07-29T13:46:01","Actor":"dotnet-maestro[bot]","Number":"3479","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190728.1\r\n- **Date Produced**: 7/28/2019 12:52 PM\r\n- **Commit**: a8e982d3bac01d8f4f91a4c57191147570079448\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19378.1\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19378.1\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3479","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3479)"},{"Id":"473631846","IsPullRequest":true,"CreatedAt":"2019-07-28T21:27:06","Actor":"dotnet-maestro[bot]","Number":"3474","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190727.2\r\n- **Date Produced**: 7/27/2019 10:53 PM\r\n- **Commit**: 8b670142ae1b65aa4d834257b0b64d4f69f30eb8\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19377.2\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19377.2\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3474","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3474)"},{"Id":"473741363","IsPullRequest":true,"CreatedAt":"2019-07-28T14:35:12","Actor":"dotnet-maestro[bot]","Number":"3476","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c3e20d8c-7bed-4085-8124-08d70655e1d3)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190728.01\r\n- **Date Produced**: 7/28/2019 11:19 AM\r\n- **Commit**: 65ab0315fd8ad9a3c25493b3d3b234585a643ae0\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-preview8-28378-01\r\n\r\n[marker]: <> (End:c3e20d8c-7bed-4085-8124-08d70655e1d3)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3476","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#3476)"},{"Id":"473635972","IsPullRequest":true,"CreatedAt":"2019-07-27T14:35:24","Actor":"dotnet-maestro[bot]","Number":"3475","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c3e20d8c-7bed-4085-8124-08d70655e1d3)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190726.29\r\n- **Date Produced**: 7/27/2019 8:19 AM\r\n- **Commit**: bd44f59e21537ce560d6924805a222f13c009bcb\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-preview8-28376-29\r\n\r\n[marker]: <> (End:c3e20d8c-7bed-4085-8124-08d70655e1d3)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3475","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#3475)"},{"Id":"473576592","IsPullRequest":false,"CreatedAt":"2019-07-27T06:12:03","Actor":"sbomer","Number":"3472","RawContent":null,"Title":"RID-specific restore of console app installs AspNetCore runtime","State":"closed","Body":"Maybe this is the intended behavior, but I didn't expect this:\r\n```\r\n> dotnet new console\r\n> dotnet restore -r <RID> /v:n\r\n...\r\nInstalling Microsoft.AspNetCore.App.Runtime.osx-x64 3.0.0-preview8.19365.5.\r\n           CACHE https://dotnetfeed.blob.core.windows.net/aspnet-aspnetcore/flatcontainer/microsoft.aspnetcore.app.runtime.osx-x64/3.0.0-preview8.19365.5/microsoft.aspnetcore.app.runtime.osx-x64.3.0.0-preview8.19365.5.nupkg\r\n```\r\n\r\nAdditionally, if my nuget.config doesn't have the asp.net feeds listed at https://github.com/dotnet/core-sdk, I get a failure:\r\n```\r\nerror NU1102: Unable to find package Microsoft.AspNetCore.App.Runtime.osx-x64 with version (= 3.0.0-preview8.19365.5)\r\nerror NU1102:   - Found 24 version(s) in dotnet-core [ Nearest version: 3.0.0-preview4-19121-14 ]\r\nerror NU1102:   - Found 3 version(s) in nuget [ Nearest version: 3.0.0-preview7.19365.7 ]\r\nerror NU1102:   - Found 0 version(s) in dotnet-coreclr\r\nerror NU1102:   - Found 0 version(s) in gRPC repository\r\n```\r\n```\r\n> dotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview8-013266\r\n Commit:    c8598edd70\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.14\r\n OS Platform: Darwin\r\n RID:         osx.10.14-x64\r\n Base Path:   /Users/sven/bin/sdk/3.0.100-preview8-013266/\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview8-27916-04\r\n  Commit:  828432edc4\r\n```","Url":"https://github.com/dotnet/sdk/issues/3472","RelatedDescription":"Closed issue \"RID-specific restore of console app installs AspNetCore runtime\" (#3472)"},{"Id":"473325623","IsPullRequest":true,"CreatedAt":"2019-07-27T01:02:16","Actor":"dotnet-maestro[bot]","Number":"3464","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190725.15\r\n- **Date Produced**: 7/26/2019 2:14 AM\r\n- **Commit**: ef1c110152df0d500fffb87878a86f88d1ca5295\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19375.15\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19375.15\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3464","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3464)"},{"Id":"473560159","IsPullRequest":true,"CreatedAt":"2019-07-27T00:38:13","Actor":"peterhuene","Number":"3470","RawContent":null,"Title":"Retry apphost creation.","State":"closed","Body":"This commit implements a parameterized retry count for creating the apphost.\r\n\r\nLike the `Copy` task from MSBuild, the `CreateAppHost` task now takes a\r\nparameter to specify the number of retries and the delay between retries (in\r\nmilliseconds) to perform if the creation fails.\r\n\r\nThis should help alleviate build failures when external processes are locking\r\nthe intermediate apphost during a build (especially on Windows).\r\n\r\nFixes devdiv#950462.\r\nFixes dotnet/cli#11650.","Url":"https://github.com/dotnet/sdk/pull/3470","RelatedDescription":"Closed or merged PR \"Retry apphost creation.\" (#3470)"},{"Id":"473577126","IsPullRequest":true,"CreatedAt":"2019-07-27T00:22:53","Actor":"wli3","Number":"3473","RawContent":null,"Title":"WIP Fix Publish with GeneratePackageOnBuild=true","State":"open","Body":"Fix https://github.com/dotnet/sdk/issues/3367\r\n\r\nIf we think the overall fix is too complicated. (I think the only way to make `GeneratePackageOnBuild` work is to write a completely new dependency graph for GeneratePackageOnBuild. And that flag makes everything super complicated). We could revert 3255, and keep it pre 3.0 state and call it won't fix\r\n\r\n===============\r\n\r\nWhat I did is essentially write a different dependency graph in GeneratePackageOnBuild = true to avoid circular dependency . Original bug. I added the https://github.com/dotnet/sdk/pull/3255/files and essentially regressed https://github.com/NuGet/Home/issues/7801. Instead of the logic is in nuget, it is in SDK now. Publish should not skip Build  if GeneratePackageOnBuild is true. Or it will mean no build even use Publish verb.\r\n\r\nBut revert 3255 means, https://github.com/dotnet/sdk/issues/2114 will be back. The solution is to break Pack’s dependency on Build in GeneratePackageOnBuild. But it still need Publish. So I need to let Pack depend directly on no build version of publish.\r\n\r\n> Why cannot directly use “_PublishNoBuildAlternative”?\r\n\r\nWe want to exclude Build step regardless NoBuild flag is true or not.\r\n\r\n> Test coverage\r\n\r\nI have GeneratePackageOnBuild + PackAsTool + Publish/Build/Pack all combinations covered in tests. Although I did discover GeneratePackageOnBuild+Pack https://github.com/dotnet/sdk/issues/3471 does not work. But it was there since 2.0. And without nuget help, we cannot easily fix it.","Url":"https://github.com/dotnet/sdk/pull/3473","RelatedDescription":"Open PR \"WIP Fix Publish with GeneratePackageOnBuild=true\" (#3473)"},{"Id":"473459297","IsPullRequest":true,"CreatedAt":"2019-07-26T23:56:52","Actor":"wli3","Number":"3466","RawContent":null,"Title":"Update global.json","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/3466","RelatedDescription":"Closed or merged PR \"Update global.json\" (#3466)"},{"Id":"473517135","IsPullRequest":true,"CreatedAt":"2019-07-26T23:11:33","Actor":"riarenas","Number":"3468","RawContent":null,"Title":"Remove duplicate entry in versions.details.xml","State":"closed","Body":"The duplicate entry is causing errors when trying to create dependency update PRs.\r\n\r\nMy guess is there was a merge conflict that caused the duplicate to show up in the first place?","Url":"https://github.com/dotnet/sdk/pull/3468","RelatedDescription":"Closed or merged PR \"Remove duplicate entry in versions.details.xml\" (#3468)"},{"Id":"473499742","IsPullRequest":true,"CreatedAt":"2019-07-26T22:52:16","Actor":"nguerrera","Number":"3467","RawContent":null,"Title":"Don't run ProduceContentAssets unnecessarily","State":"closed","Body":"It is rare to have preprocessed content assets from NuGet, save unneccessary ~10 ms per incremental build in the common case.","Url":"https://github.com/dotnet/sdk/pull/3467","RelatedDescription":"Closed or merged PR \"Don't run ProduceContentAssets unnecessarily\" (#3467)"},{"Id":"473141206","IsPullRequest":true,"CreatedAt":"2019-07-26T16:29:02","Actor":"dsplaisted","Number":"3463","RawContent":null,"Title":"Fix failure building .NET Standard 2.1 projects","State":"closed","Body":"Since the .NET Standard 2.1 targeting pack added PackageOverrides.txt, building .NET Standard 2.1 projects is broken.  The problem is that `ResolveTargetingPackAssets` was using the `RuntimeFrameworkName` metadata from the targeting pack as the itemspec for PackageConflictOverrides.  This metadata wasn't set for the .NET Standard 2.1 targeting pack, causing the following error:\r\n\r\n> C:\\git\\dotnet-sdk\\artifacts\\bin\\Debug\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.FrameworkReferenceResolution.targets(269,7): error MSB4028: The \"ResolveTargetingPackAssets\" task's outputs could not be retrieved from the \"PackageConflictOverrides\" parameter. Parameter \"includeEscaped\" cannot have zero length. [C:\\git\\dotnet-sdk\\artifacts\\tmp\\Debug\\netstandard\\netstandard.csproj]","Url":"https://github.com/dotnet/sdk/pull/3463","RelatedDescription":"Closed or merged PR \"Fix failure building .NET Standard 2.1 projects\" (#3463)"},{"Id":"473416286","IsPullRequest":false,"CreatedAt":"2019-07-26T15:30:54","Actor":"buckstephenh","Number":"3465","RawContent":null,"Title":"/usr/local/share/dotnet/sdk/3.0.100-preview7-012821/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Publish.targets(801,5): error MSB4018: System.ArgumentException: Invalid input specification: Found multiple entries with the same BundleRelativePath","State":"open","Body":"/usr/local/share/dotnet/sdk/3.0.100-preview7-012821/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Publish.targets(801,5): error MSB4018: System.ArgumentException: Invalid input specification: Found multiple entries with the same BundleRelativePath\r\n\r\nBecause there are no specifics in the error message about the actual multiple entries I'm not sure where to look. ","Url":"https://github.com/dotnet/sdk/issues/3465","RelatedDescription":"Open issue \"/usr/local/share/dotnet/sdk/3.0.100-preview7-012821/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Publish.targets(801,5): error MSB4018: System.ArgumentException: Invalid input specification: Found multiple entries with the same BundleRelativePath\" (#3465)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"470434872","IsPullRequest":false,"CreatedAt":"2019-07-19T16:54:02","Actor":"richlander","Number":"118","RawContent":null,"Title":".NET Core master branches have switched to \"5.0\"","State":"open","Body":"# .NET Core master branches have switched to \"5.0\"\r\n\r\nVarious .NET Core repos have switched their `master` branches to \"5.0\", and will use 3.x branches for 3.0 and 3.1 projects. This is very similar to how we approached 2.x and 3.0 projects. As context, `master` branches produced 3.0 builds for the entire period of the 2.2 project.\r\n\r\nAt present, this change is only relevant if you contribute to .NET Core repositories. Otherwise, we recommend that you wait for the 5.0 Preview releases before installing this new version.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/core #3059](https://github.com/dotnet/core/issues/3059)\r\n\r\n## Details\r\n\r\nThe following repos have moved their master branches to \"5.0\":\r\n\r\n- [dotnet/coreclr](https://github.com/dotnet/coreclr)\r\n- [dotnet/corefx](https://github.com/dotnet/corefx)\r\n- [dotnet/core-setup](https://github.com/dotnet/core-setup)\r\n\r\nYou can see that [5.0 .NET Core Runtime builds](https://github.com/dotnet/core-setup#daily-builds) are now being built and published at dotnet/core-setup.\r\n\r\nIn large part, we switched `master` to 5.0 to enable to the community to contribute changes. As the .NET Core 3.0 released has progressed, we've had to increase scrutiny on the changes we will accept. Now that we've permanently branched for 3.0, we can accept a much broader set of changes. Please consider that to be an open invitation!\r\n\r\nNotably, [dotnet/core-sdk](https://github.com/dotnet/core-sdk) is not yet producing 5.0 builds. We expect that the dotnet/core-sdk master branch will continue as a 3.0 branch for 2-3 months while we finish up the .NET Core 3.0 project.\r\n\r\nAt present, there is no developer experience for 5.0. We are waiting on the dotnet/core-sdk repo to switch to 5.0. Switching your project file to target `netcoreapp5.0` won't do anything useful. We'll update this issue when a 5.0 SDK comes available.","Url":"https://github.com/dotnet/announcements/issues/118","RelatedDescription":"Open issue \".NET Core master branches have switched to \"5.0\"\" (#118)"},{"Id":"465501070","IsPullRequest":false,"CreatedAt":"2019-07-08T23:25:31","Actor":"terrajobst","Number":"117","RawContent":null,"Title":"System.Text.Json usability study results","State":"open","Body":"We've performed a usability study on the new `System.Text.Json` APIs which will replace JSON.NET as the default JSON experience in .NET Core 3.0:\r\n\r\n* We focused on the primary \"getting started\" scenarios to validate that we picked the right type- and method names.\r\n* We simulated what we believe to be common error cases to validate that our exception messages are understandable and actionable.\r\n* Since we were short on time, we couldn't use the recruiting provided by the UX lab but instead brought in our own developers, which we recruited from the .NET engineering team\r\n\r\nThis has worked out well for us as we were able to get short term feedback which resulted in significant improvements to the overall API shape and usability. In the future, we should do more API focused UX studies 😊\r\n\r\n## Tasks\r\n\r\n| # | Description                            | Code\r\n|:--|:---------------------------------------|:-----\r\n| 1 | Serialize and pretty print             | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario1/Program.cs#L19-L31)\r\n| 2 | Deserialize with trailing comma        | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario2/Program.cs#L19-L25)\r\n| 3 | Deserialize with custom property names | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario3/Program.cs#L30-L45)\r\n| 4 | Read with DOM                          | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario4/Program.cs#L20-L35)\r\n| 5 | Pretty print an existing JSON file     | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario5/Program.cs#L26-L34)\r\n\r\n## Hypotheses\r\n\r\nWe expect developers to...\r\n\r\n| # | Description                                            | Result\r\n|:--|:-------------------------------------------------------|:---------------\r\n| 1 | ...assume the APIs are similar/identical to JSON.NET   |  Validated\r\n| 2 | ...complete tasks 1-4 successfully                     |  Validated\r\n| 3 | ...struggle/unable to complete the task 5, because it requires working with two different components which is very different from JSON.NET |  Invalidated\r\n| 4 | ...not look at documentation for most of their coding as IntelliSense is good enough |  Invalidated\r\n| 5 | ...be happy with the experience of using the API                                     |  Validated\r\n| 6 | ...plan on using `System.Text.Json` for their next JSON task                         |  Partially Validated\r\n\r\n##  Key Observations\r\n\r\n* Everyone completed scenarios #1-#3, 2 didn't complete #4, 6 didn't complete #5\r\n    - The reason was always \"out of time\". Every person who started a scenario successfully finished it.\r\n    - We feel this validates that we picked the right scope for a 60 minute study of people from various backgrounds\r\n* Overall people liked the new API\r\n    - Key value prop for most people was the fact that \"it's now built in\"\r\n    - Very few mentioned perf and the ones that did thought that it probably wouldn't make a difference in their scenarios.\r\n    - Most people said they would prefer `System.Text.Json` for new APIs, but would stick to JSON.NET in code that already uses it.\r\n    - **[Action]** None, this is in line with what we expected.\r\n* Virtually everyone tried to google for sample code in the documentation\r\n    - Everyone found our blog post and online documentation\r\n    - People new to .NET were confused that JSON.NET and `System.Text.Json` weren't the same thing\r\n    - Everyone complained that the current docs are lacking, especially sample code.\r\n    - **[Action]** Docs are work in progress. We plan on shipping with a fully documented API surface and sample code.\r\n* Virtually everyone found the key type relatively quickly\r\n    - Some people were confused when types were static, rather than something that one can new up\r\n    - **[Action]** None. This is by-design as we try to reduce the number of allocations.\r\n* Virtually everyone had trouble selecting the correct method on\r\n  `JsonSerializer`\r\n    - We chose a very complicated naming convention\r\n    - **[Action]** We simplified it by using names that people in the study told us were looking for.\r\n* Most of our error messages were well received because they told people what\r\n  the problem is & how they can fix them.\r\n    - One error message was unclear because we reported an unexpected character when we could have reported that we didn't expect a comment.\r\n    - **[Action]** We've reworded the error message.\r\n    - We had one error message that was generated by a lower layer and provided an action item that doesn't make sense when people receive it when using the higher layer component.\r\n    - **[Action]** We've reworded the error message to be more generic so it makes sense for both kind of consumers.\r\n* Virtually everyone used the new Roslyn completion feature which will also show\r\n  types from namespaces not imported yet.\r\n    - However, virtually nobody realized that they were doing it.\r\n    - This caused confusion when people found other APIs that happen to include Json in them, specifically the old data contract serialization.\r\n    - **[Action]** Talk to the Roslyn IDE team to see if this something more people will run into. This could prove to be especially problematic for technologies that share type names (e.g. `UserControl` in WinForms and WPF) and both are referenced by the project.\r\n* Optional parameters and `async`/`await` are usability cliffs\r\n    - Many were confused by optional parameters and tried to pass them in, even though they didn't have to.\r\n    - **[Action]** Talk to the Roslyn IDE team to see if we can visualize them better in VS.\r\n    - **[Action]** Try to avoid heavy use of optional parameters for mainline APIs.\r\n    - Async is a very steep cliff. People have no idea what to do in their code to make async work. While IntelliSense shows the usage by prefixing it with await, people didn't notice that.\r\n    - **[Action]** Unclear; this is a broader issue.\r\n* Virtually nobody used F1 to get help for APIs\r\n    - *Surprise*. I expected more people to use <kbd>F1</kbd>.\r\n* Virtually everyone used F12 to explore the API (\"metadata view\")\r\n    - *Surprise*. I expected most people to explore the type via the\r\n      IntelliSense completion\r\n* Nobody used Object Browser to explorer the APIs\r\n    - *Surprise*. I expected at least some people to.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/39304.","Url":"https://github.com/dotnet/announcements/issues/117","RelatedDescription":"Open issue \"System.Text.Json usability study results\" (#117)"},{"Id":"465034831","IsPullRequest":false,"CreatedAt":"2019-07-08T03:13:38","Actor":"leecow","Number":"116","RawContent":null,"Title":"Updates to releases.json (.NET Core release metadata)","State":"open","Body":"**The changes described in this issue will be live with the .NET Core July update on 7/9/2019.**\r\n\r\nThe releases.json files (e.g. [2.2 releases.json](https://raw.githubusercontent.com/dotnet/core/master/release-notes/2.2/releases.json)) are comprehensive metadata files which capture details of each .NET Core release. These files, along with the top level [releases-index.json](https://raw.githubusercontent.com/dotnet/core/master/release-notes/releases-index.json), are becoming increasingly important .NET Core release assets. These files, one for each major.minor channel, are relied upon by many to detect when updates for .NET Core are available, discover security update details and other uses.\r\n\r\nChanges are sometimes necessary, and the growing dependencies require that we treat compatibility of the schema with the utmost care. This announcement describes an addition to the releases.json schema.\r\n\r\n## SDK Versions and Visual Studio\r\n\r\nBecause of current .NET Core SDK product construction dependencies, there is a hard link between the Runtime, SDK, toolset (compilers, MSBuild, NuGet, and other components), and Visual Studio. Simplistically, this means that when anything updates, everything updates. The unfortunate result of this linking is that multiple versions of the SDK are released with each monthly update for each supported versions of Visual Studio. For example, the May Update for .NET Core 2.2 included the 2.2.5 runtime, 2.2.107 SDK for Visual Studio 2017 and 2.2.204 for Visual Studio 2019 and yet another pair of SDK versions for .NET Core 2.1. An example of this is the [2.2.5 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.5/2.2.5.md). \r\n\r\nThis is a confusing situation and we are working to mitigate the need to release multiple SDKs with .NET Core 3.0. The need for multiple SDK versions will persist for 2.1 LTS.\r\n\r\n## Adding the SDKS array\r\n\r\nTo appropriately model multiple SDKs per release, we are adding an SDKs array to releases.json, which will contain SDK objects. The top-level SDK object will represent the highest versioned SDK for a given update. Using the previous 2.2.5 update example, SDK 2.2.204 is in the top SDK object as well as duplicated in the SDKS array. All other applicable 2.2* SDK objects are included in the SDKS array. The SDK objects within the array will carry specific Visual Studio compatibility and version inclusion information to provide appropriate context.\r\n\r\nHere is an example of the new array based on the upcoming July update.\r\nAgain, this will be additive and the previous SDK object will include the highest SDK version for the release.\r\n\r\n```json\r\n{\r\n    \"sdk\": {\r\n        \"version\": \"2.2.301\",\r\n        \"version-display\": \"2.2.301\",\r\n        \"runtime-version\": \"2.2.6\",\r\n        \"vs-version\": \"16.1.3\",\r\n        \"vs-support\": \"Visual Studio 2019 (v16.1)\",\r\n        \"csharp-version\": \"7.3\",\r\n        \"fsharp-version\": \"4.5\",\r\n        \"vb-version\": null,\r\n        \"files\": []\r\n    },\r\n    \"sdks\": [\r\n        {\r\n            \"version\": \"2.2.301\",\r\n            \"version-display\": \"2.2.301\",\r\n            \"runtime-version\": \"2.2.6\",\r\n            \"vs-version\": \"16.1.3\",\r\n            \"vs-support\": \"Visual Studio 2019 (v16.1)\",\r\n            \"csharp-version\": \"7.3\",\r\n            \"fsharp-version\": \"4.5\",\r\n            \"vb-version\": null,\r\n            \"files\": []\r\n        },\r\n        {\r\n          \"version\": \"2.2.205\",\r\n          \"version-display\": \"2.2.205\",\r\n          \"runtime-version\": \"2.2.6\",\r\n          \"vs-version\": \"16.0.5\",\r\n          \"vs-support\": \"Visual Studio 2019 (v16.0)\",\r\n          \"csharp-version\": \"7.3\",\r\n          \"fsharp-version\": \"4.5\",\r\n          \"vb-version\": null,\r\n          \"files\": []\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\n## vs-version and the Runtime\r\n\r\nThe same version of the runtime is included in multiple versions of Visual Studio. To account for this, the vs-version field is being updated to a comma-delimited string. The string will represent all versions of Visual Studio which first include the particular .NET Core update. Again, an example from the upcoming July Update.\r\n\r\n```json\r\n\"runtime\": {\r\n        \"version\": \"2.2.6\",\r\n        \"version-display\": \"2.2.6\",\r\n        \"vs-version\": \"15.9.13, 16.1.3, 16.2.0\",\r\n```\r\n\r\nThe same `vs-versions` changes will be seen in the `aspnetcore-runtime` object.\r\n\r\n## Future Enhancements\r\n\r\nThere are other improvements to the schema which have been suggested by the community which we are evaluating. Generally, theses enhancements are additive and should not represent compatibility compromises for existing parsers and similar announcements will be published ahead of any changes.\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/116","RelatedDescription":"Open issue \"Updates to releases.json (.NET Core release metadata)\" (#116)"},{"Id":"444065225","IsPullRequest":false,"CreatedAt":"2019-05-14T18:38:23","Actor":"TaraOverfield","Number":"114","RawContent":null,"Title":"May 2019 .NET Updates","State":"open","Body":"# May 2019 .NET Updates\r\n\r\nThe following .NET updates were released in May 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.16 and .NET Core SDK 1.1.13( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.16/1.0.16.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.13/1.1.13.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.11 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.11/2.1.11.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.5 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.5/2.2.5.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2727](https://github.com/dotnet/core/issues/2727)\r\n\r\n## .NET Framework\r\n* [.NET Framework May 2019 Security and Quality Rollup - May 14, 2019](https://devblogs.microsoft.com/dotnet/net-framework-may-2019-security-and-quality-rollup/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/114","RelatedDescription":"Open issue \"May 2019 .NET Updates\" (#114)"},{"Id":"444027703","IsPullRequest":false,"CreatedAt":"2019-05-14T17:06:24","Actor":"blowdart","Number":"113","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and ASP.NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core and ASP.NET Core improperly handle web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core and ASP.NET Core application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core and ASP.NET Core web applications handle web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37651\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Private.Uri package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0, 4.3.1 | 4.3.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Nemanja Mijailovic](https://mijailovic.net/)\r\n\r\n### External Links\r\n\r\n[CVE-2019-0981](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0981)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/113","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability\" (#113)"},{"Id":"444027025","IsPullRequest":false,"CreatedAt":"2019-05-14T17:04:45","Actor":"blowdart","Number":"112","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and ASP.NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core and ASP.NET Core improperly handle web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core and ASP.NET Core application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core and ASP.NET Core web applications handle web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37650\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Private.Uri package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0, 4.3.1 | 4.3.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Nemanja Mijailovic](https://mijailovic.net/)\r\n\r\n### External Links\r\n\r\n[CVE-2019-0980](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0980)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/112","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability\" (#112)"},{"Id":"444026277","IsPullRequest":false,"CreatedAt":"2019-05-14T17:02:57","Actor":"blowdart","Number":"111","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core improperly process RegEx strings. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET application.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handle RegEx string processing.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37649\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Text.RegularExpressions package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Text.RegularExpressions.dll | 4.3.0 | 4.3.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0820](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0820)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/111","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability\" (#111)"},{"Id":"435015242","IsPullRequest":false,"CreatedAt":"2019-04-19T01:16:10","Actor":"MichaelSimons","Number":"110","RawContent":null,"Title":"New images for .NET Framework 4.8","State":"open","Body":"# New images for .NET Framework 4.8\r\n\r\nNew images have been released with support for [.NET Framework 4.8 runtime and SDK](https://devblogs.microsoft.com/dotnet/announcing-the-net-framework-4-8/).\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#271](https://github.com/Microsoft/dotnet-framework-docker/issues/271)\r\n\r\n## Details\r\n* Pull request: #270\r\n\r\nYou can access these new images with the following tags:\r\n* `mcr.microsoft.com/dotnet/framework/runtime:4.8`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.8`\r\n\r\nIn addition, the `latest` tag has been updated to refer to these new 4.8 images.\r\n\r\nCheck out the readme files for more information on the latest tags:\r\n* [Runtime](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.runtime.md)\r\n* [SDK](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.sdk.md)\r\n\r\nThe [3.5 SDK](https://github.com/Microsoft/dotnet-framework-docker/tree/master/3.5/sdk) images are intended to always contain the latest .NET Framework SDK and have also been updated to use the 4.8 SDK.","Url":"https://github.com/dotnet/announcements/issues/110","RelatedDescription":"Open issue \"New images for .NET Framework 4.8\" (#110)"},{"Id":"433297298","IsPullRequest":false,"CreatedAt":"2019-04-15T13:57:07","Actor":"MichaelSimons","Number":"109","RawContent":null,"Title":".NET Framework SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Framework SDK container images now contain the Visual Studio 2019 toolset\r\n.NET Framework SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add additional tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Framework SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Framework SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#269](https://github.com/Microsoft/dotnet-framework-docker/issues/269)\r\n\r\n## Details\r\nVisual Studio 2019 was released on April 2, 2019. We updated the .NET Framework SDK container images, on the same day, to include a new version of the .NET Framework SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag (e.g. mcr.microsoft.com/dotnet/framework/sdk:4.7.2-20190312-windowsservercore-ltsc2019).\r\n\r\nRelated pull request: [#252](https://github.com/Microsoft/dotnet-framework-docker/pull/252)","Url":"https://github.com/dotnet/announcements/issues/109","RelatedDescription":"Open issue \".NET Framework SDK container images now contain the Visual Studio 2019 toolset\" (#109)"},{"Id":"432735158","IsPullRequest":false,"CreatedAt":"2019-04-12T20:35:55","Actor":"KathleenDollard","Number":"108","RawContent":null,"Title":".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017","State":"open","Body":"# .NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\r\n\r\n.NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017. For example, 2.2.203 and 2.1.603 cause failures in Visual Studio 2017. To work on projects in Visual Studio 2017, use .NET Core SDK 2.2.1nn and 2.1.5nn, such as 2.2.106 and 2.1.506. You can install any combination of these SDKs side by side.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3124](https://github.com/dotnet/sdk/issues/3124)\r\n\r\n## Details\r\n\r\nYou can find the SDKs on you machine using the following at a command prompt:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2. Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nIf you downloaded the .NET Core SDK 2.2 between April 2 and April 12, 2019, the main [.NET downloads page](https://dotnet.microsoft.com/download/) included only 2.2.2nn. Starting April 12th, a new button marked \"Compatible with Visual Studio 2017\" is provided to target 2.2.1nn. If you downloaded 2.2 prior to this date, and you use Visual Studio 2017, install the compatible version.\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nThis problem most often occurs because you manually uninstall the 2.1.5nn version. Simply reinstall it from the [.NET Core 2.1 downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n## More information\r\n\r\nHere is the draft of an article we are preparing for .NET Core documentation:\r\n\r\n---\r\n\r\n## Solving Problems with .NET Core SDK Selection in Visual Studio\r\n\r\nYou may have .NET Core SDKs on your machine and still have problems with Visual Studio finding an appropriate one. This article explains why this happens and how you can fix your installation.\r\n\r\nWhen Visual Studio can't find an appropriate version of the .NET Core SDK, you'll receive an error message. This may appear in the Error pane as NETSDK1045:\r\n\r\n\"The current .NET SDK does not support targeting .NET Core 2...\"\r\n\r\nYou can check what .NET Core SDKs you have on your machine with the following command:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\nUnless you have a global.json file, when you use `dotnet` from the command line, the latest .NET Core SDK is used.\r\n\r\n> [TIP!] \r\n> Open a command prompt and try to build with `dotnet build`. If the command line build works, but Visual Studio doesn't suggestions in this article may help.\r\n\r\nThe last two digits of the .NET Core SDK version numbers are in the format are a patch number, which is represented by `nn` in this article because we will continue to service them to include the latest runtimes. To find out more, vist the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\n## Fixes for Common Problems\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2… Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.2.1nn. As an example, 2.2.106 would be a valid entry.\r\n\r\nIf you downloaded the .NET Core SDK 2.2 after April 2, 2019, version 2.2.2nn (such as 2.2.203) is listed first and is the highest version available. However, Visual Studio 2017 requires 2.2.1nn (such as 2.2.106). .NET Core SDK 2.2.2nn works with Visual Studio 2019. Visual Studio 2017 and Visual Studio 2019 can be installed side by side, but this requires both .NET Core SDK 2.2.1nn and .NET Core SDK 2.2.2nn to develop .NET Core 2.2 applications.\r\n\r\nTo download .NET Core SDK 2.2.2nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.1.5nn. As an example, 2.1.505 would be a valid entry. \r\n\r\nThis problem occurs of you manually uninstall the 2.1.5nn version.\r\n\r\nThe Visual Studio 2019 installation will not remove this file and Visual Studio 2017 will continue to work side by side.\r\n\r\nTo reinstall .NET Core SDK 2.1.5nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n### Visual Studio 2019 can't target .NET Core 3.0 Preview\r\n\r\nIf you receive this error message in Visual Studio 2019:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 3.0.100-preview... As an example, SDK 3.0.100-preview3-010431 would be a valid entry.\r\n\r\nTo install .NET Core SDK 3.0.1nn preview, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/3.0).\r\n\r\nIn Visual Studio, go to `Tools\\Options\\Projects and Solutions\\.NET Core` and check the box `Use Previews of the .NET Core SDK`.\r\n\r\n> [NOTE!]\r\n> This option will be moving to `Tools\\Options\\Environment` and renamed `Preview Features` in Visual Studio 2019 version 16.1 Preview 2.\r\n\r\nIf you are targeting .NET Core 3.0 preview, the [C# language version will be C# 8.0 Preview by default](https://docs.microsoft.com/en-us/visualstudio/releases/2019/release-notes#csharp-defaults) allowing you to use new C# features.\r\n\r\n## Understand the relationship between .NET Core SDKs and Visual Studio build tools\r\n\r\nVisual Studio has its own copies of tools like MSBuild, NuGet and the compilers. If you install the .NET Core workload, it also installs the .NET Core SDK which has versions of these tools and provides tasks and targets. These two versions are built from the same repositories, but target .NET Framework and .NET Core respectively. \r\n\r\nWhen you build a .NET Core project in Visual Studio, it uses Visual Studio's copy of MSBuild, but the tasks and targets are supplied from the selected version of the .NET Core SDK. \r\n\r\nWhen you upgrade the .NET Core SDK, you get new tasks and targets. These new tasks and targets may contain features that are not supported by older versions of MSBuild. Like all of the .NET Core SDK, MSBuild is backwards compatible. It is not forwards compatible.\r\n\r\nThis generally works well, but requires a guarantee that the tasks and targets work with the MSBuild version. To ensure this, each .NET Core SDK indicates an MSBuild version range that is used by Visual Studio to determine compatibility. Versions of the .NET Core SDK that have a higher MSBuild identifier than expected are ignored by Visual Studio. In the normal case, this simply means you use the tasks and targets that were installed with your version of Visual Studio.\r\n\r\nBecause of this, you may have many versions of the .NET Core SDK on your machine and Visual Studio still fail to find one it considers appropriate. This is compounded by a poor error message, which we cannot fully correct because it is from the old version of the .NET Core SDK on your machine. Confusion is also compounded by a complex non-linear release matrix that makes it difficult to predict the right .NET Core SDK to select. We are working to improve all this. \r\n\r\n## The Visual Studio / .NET Core SDK support matrix\r\n\r\nThe last two digits of the .NET Core SDK version number are a patch number, which are represented by a `nn` in this table. You can learn more about .NET Core SDK and .NET Core Runtime versioning at the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\nThe following table shows which Visual Studio versions and .NET Core SDKs are compatible and how they are acquired if you are working with Visual Studio. \r\n\r\n| .NET Core SDK | .NET Core Runtime | Compatible Visual Studio | MSBuild | Notes                                     |\r\n|---------------|-------------------|--------------------------|---------|-------------------------------------------|\r\n| 2.1.5nn       | 2.1               | 2017                     | 15      | Installed as part of VS 2017 version 15.9 |\r\n| 2.1.6nn       | 2.1               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 2.2.1nn       | 2.2               | 2017                     | 15      | Installed manually                        |\r\n| 2.2.2nn       | 2.2               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 3.0.1nn       | 3.0 (Preview)     | 2019                     | 16      | Installed manually                        |\r\n\r\nVisual Studio 2017 cannot work with .NET Core SDK 2.1.6nn or 2.2.2nn.\r\n\r\nTo find out more about removing older versions of the .NET Core Runtime and .NET Core SDK, visit the [How to remove the .NET Core Runtime and SDK page](https://docs.microsoft.com/en-us/dotnet/core/versions/remove-runtime-sdk-versions?tabs=macos).\r\n\r\nTo download the .NET Core SDK, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core).","Url":"https://github.com/dotnet/announcements/issues/108","RelatedDescription":"Open issue \".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\" (#108)"},{"Id":"432081093","IsPullRequest":false,"CreatedAt":"2019-04-11T15:16:43","Actor":"KathleenDollard","Number":"107","RawContent":null,"Title":"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below","State":"open","Body":"# Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\r\n\r\n.NET Core 3 takes the next step in the .NET Core tool strategy with local tools. As part of this process, starting in Preview 4 DotNetCliToolReference tools will be restricted to targeting .NET Core 2.2 and below. DotNetCliToolReference tools can be used in projects targeting .NET Core 3.0, but the tools themselves should target .NET Core 2.2 or below.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3115](https://github.com/dotnet/sdk/issues/3115)\r\n\r\n## Details\r\n\r\nThe suggested approach going forward is to to use [.NET Core Local Tools](https://aka.ms/local-tools) when you want a tool that is specific to a project or repository. At the same time we are removing the need to access local tools by the verbose `dotnet tool run <toolname>` that was present in earlier previews. You can now access local tools via `dotnet <toolname>`.\r\n\r\nDotNetCliToolReference tools have a flaw in how their dependencies are restored which can create [difficult to diagnose bugs when running these tools](https://github.com/NuGet/Home/issues/5067). This issue would occur much more frequently if targeting .NET Core 3.0 was allowed. Restricting tools to target only .NET Core 2.2 and below means existing scenarios to continue to work (as well as they previously did), regardless of the framework version targeted by the project or the current .NET Core SDK. \r\n\r\nThe new .NET Core tool strategy avoids this flaw in restore strategy and offers other benefits, like the ability to author one type of tool and install it in different ways depending on project and user needs.\r\n\r\nWe look forward to your feedback on .NET Core Local Tools, and on challenges you face moving away from DotNetCliToolReference tools. \r\n\r\n[dotnet/sdk #3057](https://github.com/dotnet/sdk/pull/3057)","Url":"https://github.com/dotnet/announcements/issues/107","RelatedDescription":"Open issue \"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\" (#107)"},{"Id":"431012407","IsPullRequest":false,"CreatedAt":"2019-04-09T14:51:18","Actor":"MichaelSimons","Number":"106","RawContent":null,"Title":".NET Core SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Core SDK container images now contain the Visual Studio 2019 toolset\r\n\r\n.NET Core SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add *additional* tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Core SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Core SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1042](https://github.com/dotnet/dotnet-docker/issues/1042)\r\n\r\n## Details\r\n\r\n[Visual Studio 2019](https://devblogs.microsoft.com/visualstudio/visual-studio-2019-code-faster-work-smarter-create-the-future/) was released on April 2, 2019. We updated the .NET Core SDK container images, on the same day, to include a new version of the .NET Core SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag:\r\n\r\n* 2.1: `mcr.microsoft.com/dotnet/core/sdk:2.1.505`\r\n* 2.2: `mcr.microsoft.com/dotnet/core/sdk:2.2.105`\r\n\r\nDetails:\r\n\r\n* [dotnet/dotnet-docker #1029](https://github.com/dotnet/dotnet-docker/pull/1029)\r\n* [2.1 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.602-SDK/2.1.602-SDK.md)\r\n* [2.2 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.202-SDK/2.2.202-SDK.md)\r\n\r\n## Known Breaking Changes for SDK images (VS 2017 to VS 2019 upgrade)\r\n\r\nThe following issues and breaks have been discovered.\r\n \r\n### Test Log File Name Change\r\n\r\nA change was introduced to the `dotnet test` command when a user-defined log file name is specified.  In the previous version the resulting log file would be named exactly as specified.  In the current version, the log file is named with a timestamp suffix automatically added to the user-defined name.  \r\n\r\nDetails:\r\n* [Microsoft/vstest #1603](https://github.com/Microsoft/vstest/issues/1603) \r\n* [Microsoft/vstest#1876](https://github.com/Microsoft/vstest/issues/1876)","Url":"https://github.com/dotnet/announcements/issues/106","RelatedDescription":"Open issue \".NET Core SDK container images now contain the Visual Studio 2019 toolset\" (#106)"},{"Id":"431003701","IsPullRequest":false,"CreatedAt":"2019-04-09T14:35:39","Actor":"MichaelSimons","Number":"105","RawContent":null,"Title":"Windows Server, version 1709 no longer Supported by .NET Framework","State":"open","Body":"# Windows Server, version 1709 no longer Supported by .NET Framework\r\n\r\nWindows Server, version 1709 is no longer supported. As a result, this version of Windows is no longer supported by the .NET Team and we will no longer produce .NET Framework container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Framework Docker images](https://hub.docker.com/_/microsoft-dotnet-framework)\r\n* [.NET Framework Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-framework)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-framework-docker #259](https://github.com/Microsoft/dotnet-framework-docker/issues/259)\r\n\r\n## Details\r\n\r\nDocker tags that contain `windowsservercore-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Windows Server and .NET Framework.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `4.7.1`, and  `4.7.2`. These are tags that are supported on multiple operating systems and versions, and do  not contain the operating system in them. As a result of no longer producing new images for Windows Server, version 1709, manifest tags no longer include entries for Windows 10, version 1709, and Windows Server,version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.17134-based image is incompatible with a 10.0.16299 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Windows Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Windows Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/framework/runtime:4.7.2-windowsservercore-1709` or `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-windowsservercore-1709`.","Url":"https://github.com/dotnet/announcements/issues/105","RelatedDescription":"Open issue \"Windows Server, version 1709 no longer Supported by .NET Framework\" (#105)"},{"Id":"430998341","IsPullRequest":false,"CreatedAt":"2019-04-09T14:25:57","Actor":"MichaelSimons","Number":"104","RawContent":null,"Title":"Nano Server 2016 and 1709 no longer Supported by .NET Core","State":"open","Body":"# Nano Server 2016 and 1709 no longer Supported by .NET Core\r\n\r\nNano Server 2016 and Nano Server, version 1709 are no longer supported. As a result, these versions of Windows are no longer supported by the .NET Team and we will no longer produce .NET Core container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Core Docker images](https://hub.docker.com/_/microsoft-dotnet-core)\r\n* [.NET Core Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-core)\r\n* [Products Reaching End of Support for 2018](https://support.microsoft.com/en-us/help/4043450/products-reaching-end-of-support-for-2018)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\nWe previously announced Nano Server 2016 going out of support in [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/). That post is still accurate.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1041](https://github.com/dotnet/dotnet-docker/issues/1041)\r\n\r\n## Details\r\n\r\nDocker tags that contain `nanoserver-sac2016` and `nanoserver-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Nano Server and .NET Core.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `2.1`, `2.1-sdk`, `2.2.1-runtime`. These are tags that are supported on multiple operating systems, and do not contain the operating system in them. As a result of no longer producing new images for Nano Server 2016 and Nano Server, version 1709, manifest tags no longer include entries for Nano Server 2016, Windows Server 2016, Windows 10, version 1607, Windows 10, version 1709, and Windows Server, version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.16299-based image is incompatible with a 10.0.14393 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Nano Server 2016 or Nano Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Nano Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-sac2016` or `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-1709`.\r\n\r\n### Nano Server Support\r\n\r\n.NET Core is supported on Nano Server, version 1803 and later. \r\n\r\n.NET Core 2.x and 3.0 images are available for all supported versions of Nano Server, version 1803 and later. This means that 2.x and 3.0 manifest tags can be used on Windows 10, version 1803+, and Windows Server, version 1803+. You can also use non-manifest tags for those versions, too, such as `2.2-nanoserver-1809`.\r\n\r\n.NET Core 1.x images are available for Nano Server, version 1809 and later. This means that 1.x manifest tags can be used on Windows 10, version 1809+, Windows Server, version 1809+ and Windows Server 2019. You can also use non-manifest tags for those versions, too, such as `1.1-nanoserver-1809` tag.","Url":"https://github.com/dotnet/announcements/issues/104","RelatedDescription":"Open issue \"Nano Server 2016 and 1709 no longer Supported by .NET Core\" (#104)"},{"Id":"420117627","IsPullRequest":false,"CreatedAt":"2019-03-12T17:35:16","Actor":"vivmishra","Number":"103","RawContent":null,"Title":"March 2019 .NET Updates","State":"open","Body":"# March 2019 .NET Updates\r\n\r\nThe following .NET updates were released in March 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework March 2019 Update - March 19, 2019](https://devblogs.microsoft.com/dotnet/net-framework-march-2019-update/)\r\n* [.NET Framework April 2, 2019 Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - April 2, 2019](https://devblogs.microsoft.com/dotnet/net-framework-april-2-2019-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.15 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.15/1.0.15.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.12/1.1.12.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.9 and .NET Core SDK 2.1.505 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.9/2.1.9.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.3 and .NET Core SDK 2.2.105 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.3/2.2.3.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2432](https://github.com/dotnet/core/issues/2432)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/103","RelatedDescription":"Open issue \"March 2019 .NET Updates\" (#103)"},{"Id":"415363751","IsPullRequest":false,"CreatedAt":"2019-02-27T22:49:51","Actor":"leecow","Number":"102","RawContent":null,"Title":"SDK Installers will remove previous patch versions","State":"open","Body":"The SDK Installers for Windows will upgrade patch versions in place within the same feature band. This will reduce the number of SDKs that are installed on programmer machines.\r\n\r\nFeature bands of the SDK are defined like 3.0.1nn. [Find out more about SDK version numbers](https://docs.microsoft.com/dotnet/core/versions/#versioning-details).\r\n\r\nThis means when .NET Core SDK 3.0.101 becomes available and is installed, .NET Core SDK 3.0.100 will be removed from the machine if it exists. When .NET Core SDK 3.0.200 becomes available and is installed on the same machine, .NET Core SDK versions like 3.0.101 will not be removed but stay side by side with 3.0.200.\r\n\r\nThis approach supports use of `global.json` which will roll forward across patch versions, but not feature bands of the SDK. Thus, upgrading via the SDK installer will not result in errors due to a missing SDK. Feature bands also align with side by side Visual Studio installations for those users that install SDKs for Visual Studio use. For example, Visual Studio 15.9 uses .NET Core SDK 2.2.500 but does not support .NET Core SDK 2.2.600.\r\n\r\nFind out how to [remove other .NET Core SDK versions here.](https://docs.microsoft.com/dotnet/core/versions/remove-runtime-sdk-versions).","Url":"https://github.com/dotnet/announcements/issues/102","RelatedDescription":"Open issue \"SDK Installers will remove previous patch versions\" (#102)"},{"Id":"410971363","IsPullRequest":false,"CreatedAt":"2019-02-15T22:24:40","Actor":"richlander","Number":"101","RawContent":null,"Title":"Publishing .NET Core images to Microsoft Container Registry (MCR)","State":"open","Body":"# Publishing .NET Core images to Microsoft Container Registry (MCR)\r\n\r\nMicrosoft teams are now publishing container images to the [Microsoft Container Registry](https://azure.microsoft.com/en-us/blog/microsoft-syndicates-container-catalog/). There are two primary reasons for this change:\r\n\r\n* Syndicate Microsoft-provided container images to multiple registries, like Docker Hub and Red Hat.\r\n* Use Microsoft Azure as a global CDN for delivering Microsoft-provided container images.\r\n\r\nYou will use and see MCR as a storage back-end for Microsoft images. The primary way you learn about Microsoft container images and tags will be through a registry, which for most users will continue to be Docker Hub. Most of the experience you've had browsing for .NET Core container images will continue unchanged with this new model. The Docker Hub URLs you've used for Microsoft repos will continue to work, and forward to updated locations on Docker Hub. Existing Docker Hub will images will be maintained as-is.\r\n\r\nSee [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/) for the most updated information on our use of MCR.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #935](https://github.com/dotnet/dotnet-docker/issues/935)\r\n\r\n## Starting with .NET Core nightly repo\r\n\r\nOn the .NET team, we started our [transition to MCR](https://github.com/dotnet/dotnet-docker/issues/745) with the .NET Core \"nightly\" repo. [dotnet-nightly](dockerhub.com/r/microsoft/dotnet-nightly) is now hosted on MCR and syndicated to Docker Hub. We started with the nightly repo in order to discover and fix any challenges we found with this new model before we move our higher-traffic primary container repository.\r\n\r\nWe will start publishing [dotnet](dockerhub.com/r/microsoft/dotnet) to MCR a bit later, in either February or March. This issue will be updated when that happens.\r\n\r\n## Repo Split\r\n\r\nThe [.NET Core repo](https://hub.docker.com/r/microsoft/dotnet) currently includes 4 major categories of tags: \r\n\r\n* `sdk`\r\n* `aspnetcore-runtime`\r\n* `runtime` \r\n* `runtime-deps`\r\n\r\nProviding all of the tags in one place has helped with discoverability but made for a repo with an enormous README that can be challenging to navigate and consume. It is large enough that we exceeded Docker Hub README limits and had to artificially make it smaller.\r\n\r\nGoing forward, we will provide a repo for each of the tag categories listed above. We'll also provide a \"product repo\" that will hierarchicaly group all of our repos together. This will satisfy discoverability needs so that it will be easy to find the tags you want.\r\n\r\nYou can already see this experience with [microsoft-dotnet-core-nightly](https://hub.docker.com/_/microsoft-dotnet-core-nightly). There are now multiple repos for our nightly builds:\r\n\r\n* [.NET Core Nightly product repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly)\r\n* [.NET Core SDK Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-sdk/)\r\n* [.NET Core ASP.NET Core Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-aspnet/)\r\n* [.NET Core Runtime Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime/)\r\n* [.NET Core Runtime-deps Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime-deps/)\r\n\r\nThe same split will exist for the non-nightly stable repo (currently hosted at  [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet)) when we start publishing it to MCR and syndicating it back to DockerHub.\r\n\r\n## Changes to registry URL\r\n\r\nThe biggest change is that your Dockerfiles need to be updated to point to the MCR registry in order get access to new .NET Core container tags. The same change is required for scripts or human operations that pull images via `docker pull`.\r\n\r\nThe following example shows the registry path, repo and tag for the .NET Core 2.2 \"Nightly\" SDK on MCR:\r\n\r\n```console\r\nmcr.microsoft.com/dotnet/core-nightly/sdk:2.2\r\n```\r\n\r\nAs comparison, the following repo and tag have been used to date for the .NET Core 2.2 \"Nightly\" SDK on Docker Hub:\r\n\r\n```console\r\nmicrosoft/dotnet-nightly:2.2-sdk\r\n```\r\n\r\nThe new repo URL is provided at each of the news repos. For example, the new .NET Core SDK \"nightly\" repo provides a box on the right where you can copy and paste the correct MCR-based repo syntax that you can use for `docker pull` or in `FROM` statements in your Dockerfiles.\r\n\r\n![image](https://user-images.githubusercontent.com/2608468/52811702-95c5eb80-304a-11e9-8de8-e6ea1f4b4d75.png)\r\n\r\n## Servicing existing Docker Hub tags\r\n\r\nWe will continue to service existing non-version-specific or floating tags on Docker Hub while the associated .NET Core version is supported. For example the `microsoft/dotnet:2.1-sdk` tag is a floating tag that will continue to be serviced for the lifetime of .NET Core 2.1. You can continue using floating tags without issue.\r\n\r\nIf you use non-floating tags, like `microsoft/dotnet:2.1.504-sdk-alpine`, then you will need to update your Dockerfile to use a new non-floating tag. No new non-floating tags will be published to `microsoft/dotnet` and `microsoft/dotnet-nightly` after we fully transition to MCR.\r\n\r\n.NET Core 3.0 Preview 3 and later will only be made available on MCR.\r\n\r\n## Microsoft is a Verified Publisher\r\n\r\nUntil now, Microsoft-provided container images were considered \"community images\". As part of this change, we are re-classifying Microsoft as a \"verified publisher\" on Docker Hub. This designation should make it clearer that .NET and other Microsoft-provided images are coming from a verified source. There clearly was that expectation previously, but Docker is now making that clearer in the Docker Hub pages they host for Microsoft.\r\n\r\nWe will provide official vulnerability scanning Microsoft-provided images as a second phase of this transition.","Url":"https://github.com/dotnet/announcements/issues/101","RelatedDescription":"Open issue \"Publishing .NET Core images to Microsoft Container Registry (MCR)\" (#101)"},{"Id":"410784442","IsPullRequest":false,"CreatedAt":"2019-02-15T14:06:29","Actor":"TaraOverfield","Number":"100","RawContent":null,"Title":"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809","State":"open","Body":"<strong><em>Final Update 2/19/19 @1:30 PM (PST)</em></strong><em>: This </em><em>advisory is now resolved with no action needed from Microsoft Customers. The issue was not applicable to any valid or supported configuration. There is no consequence for .NET 4.8 Preview customers. </em>\r\n\r\n<em>We strive to share timely information to protect our customer’s productivity, in this case, our finding was thankfully of no consequence for customers on supported configurations.</em>\r\n\r\n<del><em><strong>Update 2/15/19 @3:35 PM (PST)</strong></em><em>: As we continue our investigation, we are finding the issue to be restricted to a limited and isolated set of test-only systems that are using non-official versions of the .NET 4.8 Preview. As of 2/15/19 around 12:00 pm (PST) we further tightened our delivery mechanisms to ensure that the February .NET security updates are only deployed to their expected target systems.</em></del>\r\n\r\n<del><span>The </span><a href=\"https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/\" rel=\"nofollow\">February 2019 Security and Quality Rollup for Windows 10 update 1809</a><span> was released earlier this week. We have received multiple customer reports of issues when a customer has installed .NET Framework 4.8 Preview then installed the February security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>.</span> These reports are specific to only to the scenario when a customer has installed both .NET Framework 4.8 Preview and the February security update.</del>\r\n\r\n<del>We are actively working on investigating and addressing this issue. If you installed the February 2019 security update and have not seen any negative behavior, we recommend that you leave your system as-is but closely monitor it and ensure that you apply upcoming .NET Framework updates.</del>\r\n\r\n<del>We will continue to update this <a href=\"https://github.com/dotnet/announcements/issues/100\" rel=\"nofollow\">post</a> as we have new information.</del>\r\n<h2><del>Guidance</del></h2>\r\n<del>We are working on guidance and will update this post and as we have new information.</del>\r\n<h2><del>Workaround</del></h2>\r\n<del>There are no known workarounds at this time.</del>\r\n<h2><del>Symptoms</del></h2>\r\n<del>After installing .NET Framework 4.8 Preview then the February 2019 security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>, Visual Studios will crash with this error message:</del>\r\n<p class=\"xxxxxmsonormal\"><del><b><span style=\"font-size: 10.5pt;font-family: 'Segoe UI',sans-serif;color: black\">\"Exception has been thrown by the target of an invocation.\"</span></b></del></p>","Url":"https://github.com/dotnet/announcements/issues/100","RelatedDescription":"Open issue \"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809\" (#100)"},{"Id":"410455095","IsPullRequest":false,"CreatedAt":"2019-02-14T19:28:25","Actor":"richlander","Number":"99","RawContent":null,"Title":"Supporting new Alpine versions (for containers)","State":"open","Body":"# Supporting new Alpine versions (for containers)\r\n\r\n[Alpine 3.9](https://twitter.com/alpinelinux/status/1090416212822110214) was recently announced. Congratulations, Alpine team! On the .NET team, we are committed to supporting new Alpine versions quickly, and also need to define a policy for older versions. This policy only applies for the container images that we publish.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #933](https://github.com/dotnet/dotnet-docker/issues/933)\r\n\r\n## Policy\r\n\r\nWe intend to establish the following policy for supporting Alpine with .NET Core container images:\r\n\r\n* Support new Alpine versions within 60 days of release (hopefully much less).\r\n* Support n-1 Alpine versions for 3 months after we support a new Alpine version.\r\n\r\nNote: The [.NET Core support policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md) may be broader. This policy is specific to the container images we produce.\r\n\r\n## Plans\r\n\r\nWe're in the process of [fixing issues required to support Alpine 3.9](https://github.com/dotnet/dotnet-docker/issues/921). We expect that these issues will be resolved in February and that we'll be able to provide support for Alpine 3.9 in March.\r\n\r\nWe will produce Alpine 3.9 images for .NET Core 2.1, 2.2 and 3.0. Assuming we publish 3.9 images in March, we'll stop producing and supporting Alpine 3.7 and 3.8 images after June (2019).\r\n\r\n## Using Alpine-based .NET Core images\r\n\r\nWe produce a variety of Alpine-based images. You can either depend on a specific Alpine version, like with `microsoft/dotnet:2.2-sdk-alpine3.8` or opt to use the latest Alpine image we have to offer, like with `microsoft/dotnet:2.2-sdk-alpine`. Either are good choices. It is just a question of whether you want to make a conscious decision to move to later Alpine releases.\r\n\r\n## Support for ARM32?\r\n\r\nWe produce Alpine images for x64 (and ARM64, shortly). The [Alpine 3.9 announcement](https://twitter.com/alpinelinux/status/1090416212822110214) made mention of support for ARM32v7. We would like to enable .NET Core [Alpine-based images on ARM32](https://github.com/gliderlabs/docker-alpine/issues/463#issuecomment-460530395). We are patiently waiting for that to happen. If that's important to you, you should comment on that thread.","Url":"https://github.com/dotnet/announcements/issues/99","RelatedDescription":"Open issue \"Supporting new Alpine versions (for containers)\" (#99)"},{"Id":"409840927","IsPullRequest":false,"CreatedAt":"2019-02-13T14:48:21","Actor":"TaraOverfield","Number":"98","RawContent":null,"Title":"February 2019 .NET Updates","State":"open","Body":"# February 2019 .NET Updates\r\nThe following .NET updates were released in February 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework February 2019 Security and Quality Rollup - February 12, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/)\r\n* [.NET Framework February 2019 Preview of Quality Rollup - February 19, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/19/net-framework-february-2019-preview-of-quality-rollup/)\r\n\r\n## .NET Support Policies\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/98","RelatedDescription":"Open issue \"February 2019 .NET Updates\" (#98)"},{"Id":"409436643","IsPullRequest":false,"CreatedAt":"2019-02-12T18:21:22","Actor":"leecow","Number":"97","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability","State":"open","Body":"## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a domain spoofing vulnerability in .NET Framework and .NET Core which causes the meaning of a URI to change when International Domain Name encoding is applied. An attacker who successfully exploited the vulnerability could redirect a URI.\r\n\r\nThe security update addresses the vulnerability by disallowing certain Unicode characters from the URI.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/35265\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core 1.0 or 1.1 based application that uses the [System.Private.Uri](https://www.nuget.org/packages/System.Private.Uri/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0 | 4.3.1\r\n\r\nAny .NET Core 2.1 or 2.2 based application that uses the [Microsoft.NETCore.App](https://www.nuget.org/packages/Microsoft.NETCore.App) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6, 2.1.7, 2.2.0, 2.2.1 | 2.1.8, 2.2.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Private.Uri` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.2.1, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Private.Uri/4.3.0` is a reference to version 4.3.0 of `System.Private.Uri`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.8 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.2 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Private.Uri` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.Private.Uri` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0657](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0657)\r\n\r\n### Revisions\r\n\r\nV1.0 (February 12, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-02-08_\r\n","Url":"https://github.com/dotnet/announcements/issues/97","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability\" (#97)"},{"Id":"397026248","IsPullRequest":false,"CreatedAt":"2019-01-08T18:17:45","Actor":"leecow","Number":"96","RawContent":null,"Title":"January 2019 .NET Updates","State":"open","Body":"# January 2019 .NET Updates\r\n\r\nThe following .NET updates were released in January 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework January 2019 Preview of Quality Rollup - January 15, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/15/net-framework-january-2019-preview-of-quality-rollup/)\r\n* [.NET Framework January 2019 Security and Quality Rollup - January 8, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/08/net-framework-january-2019-security-and-quality-rollup/)\r\n* [.NET Framework January 22, 2018 Preview of Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - January 22, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/22/net-framework-january-22-2018-preview-of-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.7 and .NET Core SDK 2.1.503 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.7/2.1.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.1 and .NET Core SDK 2.2.102 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.1/2.2.1.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2210](https://github.com/dotnet/core/issues/2210)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/96","RelatedDescription":"Open issue \"January 2019 .NET Updates\" (#96)"},{"Id":"397020176","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:27","Actor":"blowdart","Number":"95","RawContent":null,"Title":" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a tampering vulnerability exists when .NET Core improperly handles specially crafted files. An attacker who successfully exploited this vulnerability could write arbitrary files and directories to certain locations on a vulnerable system. However, an attacker would have limited control over the destination of the files and directories.\r\n\r\nTo exploit the vulnerability, an attacker must send a specially crafted file to a vulnerable system\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core handles these files.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34427\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nIf your application does not extract ZIP compressed files it is unaffected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.IO.Compression.ZipFile](https://www.nuget.org/packages/System.IO.Compression.ZipFile/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.IO.Compression.ZipFile) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n`System.IO.Compression.ZipFile` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\nFinally, you must restart your applications once an updated runtime or SDK is installed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Danny Grander](https://twitter.com/grander) of [Snyk](https://snyk.io/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-8416](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8416)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected pacakge table.\r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/95","RelatedDescription":"Open issue \" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\" (#95)"},{"Id":"397020142","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:23","Actor":"blowdart","Number":"94","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of an information disclosure vulnerability exists in .NET Framework and .NET Core which allows bypassing Cross-origin Resource Sharing (CORS) configurations. An attacker who successfully exploited the vulnerability could retrieve content, that is normally restricted, from a web application.\r\n\r\nThe security update addresses the vulnerability by enforcing CORS configuration to prevent its bypass.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34428\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.2.0 | 2.2.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Net.Http` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `SSystem.Net.Http/4.3.0` is a reference to version 4.3.0 of `System.Net.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Net.Http` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0545](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0545)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected package table. \r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n","Url":"https://github.com/dotnet/announcements/issues/94","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\" (#94)"},{"Id":"390948658","IsPullRequest":false,"CreatedAt":"2018-12-14T03:22:58","Actor":"wu-yafeng","Number":"93","RawContent":null,"Title":"Docker image with tag '2.2-aspnetcore-runtime' is not compatible","State":"closed","Body":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]","Url":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Closed issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93)"},{"Id":"390193072","IsPullRequest":false,"CreatedAt":"2018-12-12T12:56:53","Actor":"bilalmalik777","Number":"92","RawContent":null,"Title":".net core Console","State":"closed","Body":"I am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n    networks:\r\n     - app-network\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\nIf the detail is not enough or you do not get my point, you can share your confusion in comment","Url":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Closed issue \".net core Console\" (#92)"},{"Id":"380346599","IsPullRequest":false,"CreatedAt":"2018-11-13T17:44:44","Actor":"leecow","Number":"91","RawContent":null,"Title":"November 2018 .NET Updates","State":"open","Body":"# November 2018 .NET Updates\r\n\r\nThe following .NET updates were released in November 2018. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core November 2018 (2.1.6 and SDK 2.1.500) Update release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.6/2.1.6.md)\r\n\r\nA [discussion issue](https://github.com/dotnet/core/issues/2053) is available for questions or feedback about this release.\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [October 2018](https://github.com/dotnet/announcements/issues/89)\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/91","RelatedDescription":"Open issue \"November 2018 .NET Updates\" (#91)"},{"Id":"375230004","IsPullRequest":false,"CreatedAt":"2018-10-29T21:45:27","Actor":"terrajobst","Number":"90","RawContent":null,"Title":"The future of JSON in .NET Core 3.0","State":"open","Body":"JSON has become an essential part of virtually all modern .NET applications and in many cases even surpassed the usage of XML. However, .NET hasn't had a (great) built-in way to deal with JSON. Instead we've relied on [Json.NET] which continues to serve the .NET ecosystem well.\r\n\r\n[Json.NET]: https://www.newtonsoft.com/json\r\n\r\nMoving forward, we plan on making some changes to our JSON support:\r\n\r\n* **We need high-performance JSON APIs**. We need a new set of JSON APIs that are highly tuned for performance by using `Span<T>` and allows for processing UTF-8 directly without having to transcode to UTF-16 `string` instances. Both aspects are critical for our web server Kestrel, where throughput is a key requirement.\r\n\r\n* **Remove dependency from ASP.NET Core to Json.NET**. Today, ASP.NET Core has a dependency on Json.NET. While this provides a tight integration between ASP.NET Core and Json.NET, it also means that application developers cannot freely choose which JSON library they are using. This is also problematic for customers of Json.NET as the version is dictated by the underlying platform. However, Json.NET is frequently updated and application developers often want to -- or even have to -- use a specific version. Thus, we want to remove the dependency from ASP.NET Core 3.0 to Json.NET so that customers can choose which version to use, without fearing they might accidentally break the underlying platform. In addition, this makes it also possible to plug-in an entirely different JSON library.\r\n\r\n* **Provide an ASP.NET Core integration package for Json.NET**. Json.NET has basically become the Swiss Army knife of JSON processing in .NET. It provides many options and facilities that allow customers to handle their JSON needs with ease. We don't want to compromise on the Json.NET support customers are getting today, for example, the ability to configure the JSON serialization via the `AddJsonOptions` extension method. Thus, we want to provide the Json.NET integration as a NuGet package that developers can optionally install so they get all the bells and whistles they get from Json.NET today. The other part of this work item is to ensure we have the right extension points so that other parties can provide similar integration packages for their JSON library of choice.\r\n\r\nBelow are more details around this plan.\r\n\r\n## The need for high-performance JSON APIs\r\n\r\nThe requirements for the .NET stack have changed a bit since the arrival of .NET Core. Historically, .NET has valued usability and convenience. With .NET Core, we've added a focus on performance, and we've made significant investments to serve high performance needs. And the [improvements we made][techempower] in the popular TechEmpower benchmark are a testament to that.\r\n\r\n[techempower]: https://www.techempower.com/blog/2016/11/16/framework-benchmarks-round-13/\r\n\r\nWith .NET Core 2.1, we've added a brand new primitive called [Span\\<T>][span-msdn] that allows us to represent native memory and arrays in a uniform way. With this type, we've also added a set of parsing and encoding APIs that are much more memory efficient without having to resort to unsafe code.\r\n\r\n[span-msdn]: https://msdn.microsoft.com/en-us/magazine/mt814808.aspx\r\n\r\nPart of the work of minimizing allocations is to avoid having to transcode UTF-8 payloads into UTF-16 strings, purely for parsing reasons. Currently, Json.NET is implemented by reading UTF-16. We need the ability to read (and write) JSON documents directly in UTF-8 because most network protocols (including HTTP) use UTF-8.\r\n\r\nDuring .NET Core 2.1 we've learned that updating our existing APIs to leverage `Span<T>` has limits. While we did add a bunch of overloads that accept spans, we also had to produce brand new APIs that are designed around minimizing allocations and dealing with buffers, which we exposed in `System.Buffers` namespaces. And with `System.IO.Pipelines` we've also added a programming model that enables developers to share buffers without having to deal with lifetime issues.\r\n\r\nBased on these experiences we believe in order to support JSON parsing, we'll need to expose a new set of JSON APIs that are specifically geared for high-performance scenarios.\r\n\r\nYou might wonder why we can't just update Json.NET to include support for parsing JSON using `Span<T>`? Well, James Newton-King -- the author of Json.NET -- has the following to say about that:\r\n\r\n> Json.NET was created over 10 years ago, and since then it has added a wide range of features aimed to help developers work with JSON in .NET. In that time Json.NET has also become far and away NuGet's most depended on and downloaded package, and is the go-to library for JSON support in .NET. Unfortunately, Json.NET's wealth of features and popularity works against making major changes to it. Supporting new technologies like `Span<T>` would require fundamental breaking changes to the library and would disrupt existing applications and libraries that depend on it.\r\n>\r\n> Going forward Json.NET will continue to be worked on and invested in, both addressing known issues today and supporting new platforms in the future. Json.NET has always existed alongside other JSON libraries for .NET, and there will be nothing to prevent you using one or more together, depending on whether you need the performance of the new JSON APIs or the large feature set of Json.NET.\r\n\r\n## Move Json.NET integration into a separate NuGet package\r\n\r\nToday, you cannot use ASP.NET Core without Json.NET because it is a dependency of ASP.NET Core itself. Over the years, we've received feedback that the dependency can conflict with other libraries that have their own dependency on a different version of Json.NET. In the past, we've considered addressing this issue by using a private copy of Json.NET in ASP.NET. However, this would create problems when developers want to configure Json.NET (for instance, in order to control how the serializer behaves when formatting JSON objects).\r\n\r\nMoving forward we'd like to:\r\n\r\n1. Replace the internal usage of Json.NET in ASP.NET Core by the new platform-provided JSON APIs.\r\n\r\n2. Factor the public facing usage of Json.NET into an optional integration package that can be acquired from NuGet.\r\n\r\nSo the existing integration between ASP.NET Core and Json.NET will continue to be supported, but will be moving out of the platform and into a separate package. However, since the integration is then designed to sit on top of the platform, it will also allow customers to update Json.NET to later versions.\r\n\r\nFurthermore, customers who need more performance can also choose to use the new JSON APIs, at the expense of the rich feature set that Json.NET offers.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/33115.","Url":"https://github.com/dotnet/announcements/issues/90","RelatedDescription":"Open issue \"The future of JSON in .NET Core 3.0\" (#90)"},{"Id":"368440353","IsPullRequest":false,"CreatedAt":"2018-10-09T23:44:06","Actor":"vivmishra","Number":"89","RawContent":null,"Title":"October 2018 .NET Updates","State":"open","Body":"# October 2018 .NET Updates\r\n\r\nThe following .NET updates were released in October 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core October 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/10/09/net-core-october-2018-update-net-core-1-0-and-1-1/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/89","RelatedDescription":"Open issue \"October 2018 .NET Updates\" (#89)"},{"Id":"368429033","IsPullRequest":false,"CreatedAt":"2018-10-09T22:51:18","Actor":"leecow","Number":"88","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core when HTTP authentication information is inadvertently exposed in an outbound request that encounters an HTTP redirect. An attacker who successfully exploited this vulnerability could use the information to further compromise the web application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handles HTTP redirects.\r\n\r\nSystem administrators running .NET Core 1.0 or .NET Core 1.1 applications must update their .NET Core runtimes to versions 1.0.13 and 1.1.10 then restart their applications. If installed applications target .NET Core 2.0, the applications must be migrated to 2.1 or newer and redeployed.\r\n\r\nDevelopers must update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core 2.0](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 then redeploy.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at <https://github.com/dotnet/corefx/issues/32730>\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nNone\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nAdditionally package authors should check their dependencies to ensure they aren't depending on a vulnerable version of the following package:\r\n\r\n<a name=\"package-list\"></a>Package name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Net.Http| 2.0.20126.16343, 2.0.20505, 2.0.20710, 4.0.0, 4.1.0, 4.1.1, 4.1.2, 4.3.0, 4.3.1, 4.3.2, 4.3.3 |  4.3.4 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nTo check the currently installed runtimes and SDKs with version 2.1 or later of .NET Core, open a command prompt and run the `dotnet --info` command. You should see an output similar to the following:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.403\r\n Commit:    04e15494b6\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.403\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.5\r\n  Commit:  290303f510\r\n\r\n.NET Core SDKs installed:\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.10 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf you don't see a runtime entry for 1.0.13 or 1.1.10, any .NET Core 1.x applications run on that computer are vulnerable.\r\n\r\nIf you don't have a 2.1 version of the runtime or SDK installed, you can produce the complete list of runtimes by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows | `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS | `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms | `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.13, 1.1.10 then any application targeting versions 1.0 or 1.1 are vulnerable.\r\n\r\nAdditionally, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n### <a name=\"fix-runtime\">How do I fix the vulnerability?\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.13, 1.1.10 and install the latest 2.1 runtime, ensuring that any 2.0 applications are migrated to 2.1 as soon as possible.\r\n\r\n Developers are advised to update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at <https://github.com/dotnet/> and <https://github.com/aspnet/>, respectively. The Announcements repo for each product (<https://github.com/dotnet/Announcements> and <https://github.com/aspnet/Announcements>) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8292](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8292)\r\n\r\n### Revisions\r\n\r\nV1.0 (October 10, 2018): Advisory published.\r\n_Version 1.0_\r\n_Last Updated 2018-10-10_\r\n","Url":"https://github.com/dotnet/announcements/issues/88","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\" (#88)"}],"ResultType":"GitHubIssue"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1156333221136625664","CreatedAt":"2019-07-30T22:38:18+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demos and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":3,"FavoriteCount":2,"RawContent":null},{"Id":"1155911372049461248","CreatedAt":"2019-07-29T18:42:01+00:00","UserScreenname":"dotnet","Text":"The journey to a better game development experience starts here. Whether you’re new to game development or need a r… https://t.co/UjsTqoHRxc","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":40,"FavoriteCount":13,"RawContent":null},{"Id":"1154430362157821952","CreatedAt":"2019-07-25T16:37:01+00:00","UserScreenname":"dotnet","Text":"Game development can be fun we have the right tools to help you get off the ground quickly with a new, free learnin… https://t.co/AivXhRP7Sb","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":31,"FavoriteCount":9,"RawContent":null},{"Id":"1154105630220640257","CreatedAt":"2019-07-24T19:06:39+00:00","UserScreenname":"dotnet","Text":"Announcing .NET Core 3.0 Preview 7\n\nhttps://t.co/gNfmpbO5bA","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":171,"FavoriteCount":86,"RawContent":null},{"Id":"1154104343131410432","CreatedAt":"2019-07-24T19:01:32+00:00","UserScreenname":"dotnet","Text":"Visual Studio 2019 version 16.2 Generally Available and 16.3 Preview 1\n\nhttps://t.co/Dd5t9pJ8nn","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":201,"FavoriteCount":125,"RawContent":null},{"Id":"1153711768151052289","CreatedAt":"2019-07-23T17:01:35+00:00","UserScreenname":"dotnet","Text":"https://t.co/iOiV9qNspl Core and Blazor updates in .NET Core 3.0 Preview 7 https://t.co/2gzRbk6aoK","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":129,"FavoriteCount":73,"RawContent":null},{"Id":"1153711590702632961","CreatedAt":"2019-07-23T17:00:52+00:00","UserScreenname":"dotnet","Text":"Announcing .NET Core 3.0 Preview 7 https://t.co/gNfmpbO5bA","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":299,"FavoriteCount":172,"RawContent":null},{"Id":"1153705997988323329","CreatedAt":"2019-07-23T16:38:39+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demos and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":10,"FavoriteCount":0,"RawContent":null},{"Id":"1153304666932961280","CreatedAt":"2019-07-22T14:03:54+00:00","UserScreenname":"dotnet","Text":"Interested in game development but not sure where to start? Check out our new free learning course on getting start… https://t.co/qZIuFYLIDZ","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":91,"FavoriteCount":32,"RawContent":null},{"Id":"1151899037030764545","CreatedAt":"2019-07-18T16:58:26+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demos and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":14,"FavoriteCount":8,"RawContent":null}]}},"RunOn":"2019-07-31T05:30:39.5595848Z","RunDurationInMilliseconds":16083}