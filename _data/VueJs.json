{"Data":{"Vue":{"Events":[{"Id":"7039145363","Type":"IssuesEvent","CreatedAt":"2017-12-29T03:19:24","Actor":"xxssww0258","Repository":"vuejs/vue","Organization":"vuejs","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/vuejs/vue/issues/7342","RelatedDescription":"Opened issue \"v-for 和 v-html 同时使用时如何去掉 外层标签\" (#7342) at vuejs/vue","RelatedBody":"### Version\r\n2.5.9\r\n\r\n### Reproduction link\r\n\r\n### Steps to reproduce\r\n```\r\n<div id=\"content-vue\">\r\n     <div v-for=\"(v,i) in domArr\" :key=\"i\" v-html=\"v\">\r\n    </div>\r\n</div>\r\n\r\ndomArr='<p></p><span></span><img src=\"\">'\r\n```\r\n\r\n### What is expected?\r\n```\r\n<div id=\"content-vue\">\r\n  <p></p>\r\n  <span></span>\r\n  <img src=\"\">\r\n</div>\r\n```\r\n\r\n### What is actually happening?\r\n```\r\n<div id=\"content-vue\">\r\n  <div><p></p></div>\r\n  <div><span></span></div>\r\n  <div><img src=\"\"></div>\r\n</div>\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->"}],"ResultType":"GitHubEvent"},"Router":{"Events":[{"Id":"7037948745","Type":"IssuesEvent","CreatedAt":"2017-12-28T17:40:23","Actor":"mymtw","Repository":"vuejs/vue-router","Organization":"vuejs","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/vuejs/vue-router/issues/1956","RelatedDescription":"Opened issue \"Vuejs ssr check user is authenticated for each request\" (#1956) at vuejs/vue-router","RelatedBody":"I’m using this ssr boilerplate for my app, https://github.com/vuejs/vue-hackernews-2.0\r\n\r\nI don’t know how to implement logic for checking is user authenticated for each user’s page request, I’m using cookies for storing user's token\r\n\r\nI looked that router can handle request before render component:\r\n```\r\nrouter.beforeEach((to, from, next) => {\r\n    if (to.matched.some(record => record.meta.requiresAuth)) {\r\n      // this route requires auth, check if logged in\r\n      // if not, redirect to login page.\r\n      // isLoggedIn()\r\n      //   .then(response => response.json())\r\n      //   .then(json => {\r\n      //     console.log(json[0])\r\n      //     next()\r\n      //   })\r\n      //   .catch(error => {\r\n      //     console.log(error)\r\n      //     next()\r\n      //   })\r\n\r\n      const x = true\r\n\r\n      if (!x) {\r\n        next({\r\n          path: '/signin',\r\n          query: { redirect: to.fullPath }\r\n        })\r\n      } else {\r\n        next()\r\n      }\r\n    } else {\r\n      next() // make sure to always call next()!\r\n    }\r\n  })\r\n\r\n  return router\r\n}\r\n```\r\n\r\nHere is problem, router starting to use this code in client-side and in server-side, which in my case a little bit incorrect.\r\n\r\nHow to send request for is user authenticated only once, or in client-side or in server-side?"}],"ResultType":"GitHubEvent"},"Vuex":{"Events":[{"Id":"7037807217","Type":"PullRequestEvent","CreatedAt":"2017-12-28T16:49:34","Actor":"ktsn","Repository":"vuejs/vuex","Organization":"vuejs","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/vuejs/vuex/pull/1103","RelatedDescription":"Closed pull request \"Refactoring: Use isFunction and isString utility\" (#1103) at vuejs/vuex","RelatedBody":"This PR removes repetitive type checks for function and string by introducing simple `isFunction` and `isString` utility functions.\r\n\r\nThere is a small change in dist size.\r\n\r\nBefore:\r\ndist/vuex.js 24.94kb\r\ndist/vuex.min.js 9.32kb (gzipped: 2.94kb)\r\ndist/vuex.common.js 25.33kb\r\ndist/vuex.esm.js 25.42kb\r\n\r\nAfter:\r\ndist/vuex.js 24.93kb\r\ndist/vuex.min.js 9.29kb (gzipped: 2.98kb)\r\ndist/vuex.common.js 25.33kb\r\ndist/vuex.esm.js 25.42kb"},{"Id":"7037684449","Type":"IssuesEvent","CreatedAt":"2017-12-28T16:09:03","Actor":"ktsn","Repository":"vuejs/vuex","Organization":"vuejs","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/vuejs/vuex/issues/1087","RelatedDescription":"Closed issue \"Proposal: Component-like methods\" (#1087) at vuejs/vuex","RelatedBody":"### What problem does this feature solve?\r\nCurrently, Vuex allows to have set of custom getters which act as computed properties for components, but doesn't have anything like component methods. While this may seem to contradict with some of Vuex principles (methods usually imply some kind of action, which in turn is implied to be in mutations/actions), it doesn't necessarily do so: just like getters, there is need for some helper computational functionality that takes some arguments. Imagine that i have application that may have several modes turned on and i need to check if some specific mode is set. If i would have something like `.hasMode(mode)` method, it would be a breeze.\r\n\r\n### What does the proposed API look like?\r\n```js\r\n{\r\n  methods: {\r\n     hasMode (state, payload, rootState) {\r\n        return state.modes.indexOf(payload) > -1\r\n     }\r\n  }\r\n}\r\n```\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->"}],"ResultType":"GitHubEvent"}},"RunOn":"2017-12-29T05:30:33.093044Z","RunDurationInMilliseconds":2233}