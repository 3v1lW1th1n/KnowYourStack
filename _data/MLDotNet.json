{"Data":{"GitHub":{"Issues":[{"Id":"405993615","IsPullRequest":false,"CreatedAt":"2019-02-02T15:41:01","Actor":"kant2002","Number":"2389","RawContent":null,"Title":"Incorrect throwing during data loading","State":"open","Body":"### System information\r\n\r\n- Win10\r\n- .NET Core 2.1/3.0 Preview 2\r\n\r\n### Issue\r\n\r\nLet's say we do loading of data from CSV file using simple POCO class and forget to add `LoadColumn` attribute on the properties. Then call to `CreateTextLoader<T>/CreateTextReader<T>` fails with NullReferenceException\r\n\r\n```\r\nUnhandled Exception: System.NullReferenceException: Object reference not set to an instance of an object.\r\n   at Microsoft.ML.Data.TextLoader.CreateTextReader[TInput](IHostEnvironment host, Boolean hasHeader, Char separator, Boolean allowQuotedStrings, Boolean supportSparse, Boolean trimWhitespace)\r\n   at MLConsoleApp1.Program.Main(String[] args) in MLConsoleApp1\\Program.cs:line 54\r\n```\r\n\r\nwhich definitely not user friendly. I track down that to line https://github.com/dotnet/machinelearning/blob/master/src/Microsoft.ML.Data/DataLoadSave/Text/TextLoader.cs#L1344\r\n\r\nwhere you delegate assertion to IHostEnvironment since I running LocalEnvironment, I believe that by default when running in Local environment proper default behavior would be just throw. Right now I could not even imaging that such big usability mistake was made by MS, so I have to manually clone project and compile it locally to track down this error. \r\n\r\n\r\n### Source code / logs\r\n\r\n```\r\npublic class SentimentRow\r\n{\r\n    public bool Sentiment { get; set; }\r\n\r\n    public string SentimentText { get; set; }\r\n}\r\n...\r\nvar mlContext = new MLContext();\r\nvar reader = mlContext.Data.CreateTextLoader<SentimentRow>(hasHeader: true);\r\n```\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2389","RelatedDescription":"Open issue \"Incorrect throwing during data loading\" (#2389)"},{"Id":"405989462","IsPullRequest":true,"CreatedAt":"2019-02-02T14:50:47","Actor":"kant2002","Number":"2388","RawContent":null,"Title":"Support buld using VS2019","State":"open","Body":"CMake shipped with VS does not support VS2019 yet, so run generator for VS 2017. It will still build using VS 2019\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2388","RelatedDescription":"Open PR \"Support buld using VS2019\" (#2388)"},{"Id":"405953114","IsPullRequest":true,"CreatedAt":"2019-02-02T06:13:34","Actor":"rogancarr","Number":"2387","RawContent":null,"Title":"Adding a catalog entry for the bootstrap sample","State":"open","Body":"This PR adds a catalog entry for the bootstrap sample and creates a sample demonstrating its use.\r\n\r\nFixes #2384 ","Url":"https://github.com/dotnet/machinelearning/pull/2387","RelatedDescription":"Open PR \"Adding a catalog entry for the bootstrap sample\" (#2387)"},{"Id":"405940316","IsPullRequest":true,"CreatedAt":"2019-02-02T02:53:16","Actor":"zeahmed","Number":"2386","RawContent":null,"Title":"Fixed output schema produced by ValueMappingEstimator","State":"open","Body":"\r\nThis PR fixes #2385.","Url":"https://github.com/dotnet/machinelearning/pull/2386","RelatedDescription":"Open PR \"Fixed output schema produced by ValueMappingEstimator\" (#2386)"},{"Id":"405940234","IsPullRequest":false,"CreatedAt":"2019-02-02T02:52:20","Actor":"zeahmed","Number":"2385","RawContent":null,"Title":"Fix output schema produced by ValueMappingEstimator ","State":"open","Body":"There is a bug in `ValueMappingEstimator` output schema. \r\nhttps://github.com/dotnet/machinelearning/blob/0e80d6c07580cea5ce072fd7cba02d7171dc61f4/src/Microsoft.ML.Data/Transforms/ValueMapping.cs#L61\r\n\r\nWhen input is a vector the output produced is a vector. However, the schema produced by the `ValueMappingEstimator` shows that the output is scalar. This throws an exception when `ValueMappingEstimator` is followed by another estimator which checks for schema.\r\n\r\nThis regression was caused by #2162 ","Url":"https://github.com/dotnet/machinelearning/issues/2385","RelatedDescription":"Open issue \"Fix output schema produced by ValueMappingEstimator \" (#2385)"},{"Id":"405930430","IsPullRequest":false,"CreatedAt":"2019-02-02T01:13:21","Actor":"rogancarr","Number":"2384","RawContent":null,"Title":"Add BootstrapSamplingTransform to DataOperationsCatalog","State":"open","Body":"As noted in #933, the `BootstrapSamplingTransform` isn't something that we want recorded in pipelines (e.g. having it executed on a test set). However, it is super useful to have in our library, so it would be nice to have a way to use it in user-facing code.","Url":"https://github.com/dotnet/machinelearning/issues/2384","RelatedDescription":"Open issue \"Add BootstrapSamplingTransform to DataOperationsCatalog\" (#2384)"},{"Id":"405923073","IsPullRequest":true,"CreatedAt":"2019-02-02T00:23:13","Actor":"Ivanidzo4ka","Number":"2383","RawContent":null,"Title":"Internalize IDataTransform","State":"open","Body":"towards #1995 ","Url":"https://github.com/dotnet/machinelearning/pull/2383","RelatedDescription":"Open PR \"Internalize IDataTransform\" (#2383)"},{"Id":"405922878","IsPullRequest":true,"CreatedAt":"2019-02-02T00:22:07","Actor":"shmoradims","Number":"2382","RawContent":null,"Title":"MLContext catalog cleanup","State":"open","Body":"End-users will use ML.NET mainly through MLContext. As part of documentation cleanup, I started from MLContext and cleaned up the top level catalogs as follows:\r\n\r\n* Internal catalog constructors: All catalog constructors are made internal, since the user shouldn't be creating those objects.\r\n* `protected internal` for some fields: doc.microsoft includes `protected` fields/methods (like [Host field here](https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.binaryclassificationcontext?view=ml-dotnet#fields)). Since all our catalogs are sealed, I changed some `protected` fields/method to `protected internal` so that they don't get mentioned in the docs at all. \r\n* Xml cleanup: Fixed some incorrect/missing texts along the way.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2382","RelatedDescription":"Open PR \"MLContext catalog cleanup\" (#2382)"},{"Id":"405918700","IsPullRequest":false,"CreatedAt":"2019-02-01T23:58:59","Actor":"danmosemsft","Number":"2381","RawContent":null,"Title":"Do we have sufficient distro coverage","State":"open","Body":"Right now we build and test for Linux on only one distro -- Centos 7 (a container hosted on Ubuntu 1804). We use .NET Core 2.1.\r\n\r\nWe maybe should add a leg to test on a Debian/Ubuntu family distro (Centos is in the RedHat family). That should be able to use all the same binaries. If we did that it would probably be good to use .NET Core 3.0 instead of 2.1 to get Linux coverage with that.\r\n\r\n.NET Core also supports Alpine, which some people use to minimise the size and security surface of their containers. It would be more \"interesting\" (takes= more work to support) because as well as having few default packages it is musl not glibc based so it needs a special build. We probably have to defer support for Alpine.\r\n\r\n@eerhardt thoughts?","Url":"https://github.com/dotnet/machinelearning/issues/2381","RelatedDescription":"Open issue \"Do we have sufficient distro coverage\" (#2381)"},{"Id":"405918527","IsPullRequest":true,"CreatedAt":"2019-02-01T23:58:05","Actor":"rogancarr","Number":"2380","RawContent":null,"Title":"Add a sample to SelectColumns","State":"open","Body":"This is a small PR to address documentation and samples.\r\n- Added a sample to SelectColumns\r\n- Fixes a bug in a sample link for ConcatTransform.\r\n\r\nFixes #2370  ","Url":"https://github.com/dotnet/machinelearning/pull/2380","RelatedDescription":"Open PR \"Add a sample to SelectColumns\" (#2380)"},{"Id":"405915069","IsPullRequest":false,"CreatedAt":"2019-02-01T23:38:59","Actor":"justinormont","Number":"2379","RawContent":null,"Title":"Image Classification Benchmark","State":"open","Body":"@Anipik: We could make a good benchmark for the image processing pipeline. \r\nI'd recommend using the Dog Breeds vs. Fruits dataset which we used in [NimbusML for its image examples](https://docs.microsoft.com/en-us/nimbusml/tutorials/b_f-image-processing-clustering). We currently host this dataset in our CDN for NimbusML.\r\n\r\nIn Python, the dataset / image loader looks like:\r\n```Python\r\n# Load image summary data from github\r\nurl = \"https://express-tlcresources.azureedge.net/datasets/DogBreedsVsFruits/DogFruitWiki.SHUF.117KB.735-rows.tsv\"\r\ndf_train = pd.read_csv(url, sep = \"\\t\", nrows = 100)\r\ndf_train['ImagePath_full'] = \"https://express-tlcresources.azureedge.net/datasets/DogBreedsVsFruits/\" + \\\r\n                         df_train['ImagePath']\r\n... load images\r\n```\r\n\r\nPurpose of the dataset is for example code & includes ~775 images of dogs & fruit:\r\n![image](https://user-images.githubusercontent.com/4080826/52151638-ab89e880-2628-11e9-9df5-2b060875e56e.png)\r\n![image](https://user-images.githubusercontent.com/4080826/52151656-b5abe700-2628-11e9-8f5a-483b3ddf20e5.png)\r\n\r\n(copied from PR -- https://github.com/dotnet/machinelearning/pull/2372#pullrequestreview-199284335)","Url":"https://github.com/dotnet/machinelearning/issues/2379","RelatedDescription":"Open issue \"Image Classification Benchmark\" (#2379)"},{"Id":"405894257","IsPullRequest":false,"CreatedAt":"2019-02-01T22:13:18","Actor":"TomFinley","Number":"2378","RawContent":null,"Title":"State of CalibratorPredictorBase v1","State":"open","Body":"There have been some issues concerning calibrator estimators (#1871 and #1622) but not calibrators themselves.\r\n\r\nSo, calibrated models are basically wrappers for model that have.\r\n\r\nThey are ultimately something akin to `CalibratedPredictorBase`. The trouble with `CalibratedPredictorBase` is this property:\r\n\r\nSo, consider this code.\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/578c188876cd7f158aca214d2e729500183b588c/docs/samples/Microsoft.ML.Samples/Dynamic/PermutationFeatureImportance/PFIRegressionExample.cs#L21-L29\r\n\r\nFocus on the last part, where we're able to get the feature weights.\r\n\r\nWhat is this `SubPredictor`? It is this:\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/578c188876cd7f158aca214d2e729500183b588c/src/Microsoft.ML.Data/Prediction/Calibrator.cs#L130\r\n\r\nGreat news: it has a definite type! Bad news: that is just a marker interface. As a mechanism for the API, it is as useless as if it were just, say, of type `object` (which, incidentally, I will have to do anyway as part of #2251). For that reason, we see lots of code that looks like this:\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/578c188876cd7f158aca214d2e729500183b588c/test/Microsoft.ML.Tests/TrainerEstimators/LbfgsTests.cs#L66\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/578c188876cd7f158aca214d2e729500183b588c/test/Microsoft.ML.Predictor.Tests/TestIniModels.cs#L584\r\n\r\nThis reason is, that object by itself is not useful: to get the actual model parameters, you have to do a \"magical cast\" to somehow get it into the right format. This sort of worked in command-line land or entry-point land, since everything was more or less dynamically typed anyway.\r\n\r\nIt might be desirable that, when training a logistic regression binary classification model, I should be able to, in a type safe fashion, be able to inspect the model weights without having to perform any \"magical casts.\"\r\n\r\nThe most obvious solution to me is the following: calibrators becomes some sort of class which involves generics on both the \"subpredictor\" model parameters, as well as the calibrator. Then things like logistic regression would return instances of that generic class, or else some class derived from that generic class if we decide that must be an abstract class for some reason.7\r\n\r\nThe alternative is: we accept that \"magical casts\" are desirable, which I would not like since it is a little silly since I view the above \"desirable\" state is perfectly reasonable. But some people really hate generics.\r\n\r\nI believe @yaeldekel had some thoughts on this, perhaps others do as well.","Url":"https://github.com/dotnet/machinelearning/issues/2378","RelatedDescription":"Open issue \"State of CalibratorPredictorBase v1\" (#2378)"},{"Id":"405846374","IsPullRequest":true,"CreatedAt":"2019-02-01T21:34:05","Actor":"ganik","Number":"2374","RawContent":null,"Title":"Lockdown Microsoft.ML.PCA public surface","State":"closed","Body":"fixes #2275 ","Url":"https://github.com/dotnet/machinelearning/pull/2374","RelatedDescription":"Closed or merged PR \"Lockdown Microsoft.ML.PCA public surface\" (#2374)"},{"Id":"405876197","IsPullRequest":false,"CreatedAt":"2019-02-01T21:15:00","Actor":"daholste","Number":"2377","RawContent":null,"Title":"MissingValueHandlingTransformer -- do you ever plan to make it an estimator?","State":"open","Body":"I see MissingValueIndicatorEstimator and MissingValueReplacingEstimator have been created. Do you currently plan to make an estimator for MissingValueHandlingTransformer?","Url":"https://github.com/dotnet/machinelearning/issues/2377","RelatedDescription":"Open issue \"MissingValueHandlingTransformer -- do you ever plan to make it an estimator?\" (#2377)"},{"Id":"405867914","IsPullRequest":false,"CreatedAt":"2019-02-01T20:49:07","Actor":"TomFinley","Number":"2376","RawContent":null,"Title":"KeyToValueMapping API is inconsistent with rest","State":"open","Body":"Pursuant to #2064 and the work done in #2239, column mapping transforms are to have an output and input column. However, I notice something like this:\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/578c188876cd7f158aca214d2e729500183b588c/src/Microsoft.ML.Data/Transforms/ConversionsExtensionsCatalog.cs#L72-L73\r\n\r\nThis has just one column specified, that is, there is no convenient way to map an input to an output column and have the mapping have a distinct names, without working through the `params` overload which is a bit less convenient. This is inconsistent with the direction summarized by @sfilipi in #2064 as well as some of our other APIs. For example, in this same file:\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/578c188876cd7f158aca214d2e729500183b588c/src/Microsoft.ML.Data/Transforms/ConversionsExtensionsCatalog.cs#L30-L31\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/578c188876cd7f158aca214d2e729500183b588c/src/Microsoft.ML.Data/Transforms/ConversionsExtensionsCatalog.cs#L49-L50\r\n\r\nThis method should be similar to the others in terms of the `string outputColumnName, string inputColumnName = null` signature. Note that this mistake extends down into the associated estimator and transformer constructors as well, so it will have to be fixed there as well.\r\n\r\n/cc @sfilipi ","Url":"https://github.com/dotnet/machinelearning/issues/2376","RelatedDescription":"Open issue \"KeyToValueMapping API is inconsistent with rest\" (#2376)"},{"Id":"405850866","IsPullRequest":false,"CreatedAt":"2019-02-01T19:55:52","Actor":"srsaggam","Number":"2375","RawContent":null,"Title":"Parameter name Consistency in FastTree","State":"open","Body":"https://github.com/dotnet/machinelearning/blob/4bb3e0006c656387ec96dc7e5878e204e1710f50/src/Microsoft.ML.FastTree/FastTreeArguments.cs#L528\r\n\r\nShould this be LearningRate? The Options have it named wrongly.\r\n\r\nThe named parameter for the FastTree is named correctly as learningRate.\r\nhttps://github.com/dotnet/machinelearning/blob/4bb3e0006c656387ec96dc7e5878e204e1710f50/src/Microsoft.ML.FastTree/TreeTrainersCatalog.cs#L34\r\n\r\n\r\nIt would be great if you can check the same with all the trainers and transforms. i.e the named parameters(in the method) resemble the Actual Property name(in the options). In my opinion these all should be consistent. In case of named params (camel case) and for actual Property (of course is pascal case)","Url":"https://github.com/dotnet/machinelearning/issues/2375","RelatedDescription":"Open issue \"Parameter name Consistency in FastTree\" (#2375)"},{"Id":"405845505","IsPullRequest":false,"CreatedAt":"2019-02-01T19:39:55","Actor":"Anipik","Number":"2373","RawContent":null,"Title":"DnnImageFeaturizingTests failing for netfx","State":"open","Body":"These tests were not being tested due to the bug in conditionalFact attribute.\r\nHowever when I tried to run these tests on my local machine they are failing.\r\n\r\nThe call stack is this\r\n```C#\r\nSystem.ArgumentOutOfRangeException : Specified argument was out of the range of valid values.\r\nParameter name: ModelFile\r\nStack Trace:\r\n  C:\\git\\machinelearning\\src\\Microsoft.ML.OnnxTransform\\OnnxTransform.cs(155,0): at Microsoft.ML.Transforms.OnnxTransformer..ctor(IHostEnvironment env, Arguments args, Byte[] modelBytes)\r\n  C:\\git\\machinelearning\\src\\Microsoft.ML.DnnImageFeaturizer.ResNet18\\ResNet18Extension.cs(43,0): at Microsoft.ML.Transforms.ResNet18Extension.ResNet18(DnnImageModelSelector dnnModelContext, IHostEnvironment env, String outputColumnName, String inputColumnName, String modelDir)\r\n  C:\\git\\machinelearning\\src\\Microsoft.ML.DnnImageFeaturizer.ResNet18\\ResNet18Extension.cs(25,0): at Microsoft.ML.Transforms.ResNet18Extension.ResNet18(DnnImageModelSelector dnnModelContext, IHostEnvironment env, String outputColumnName, String inputColumnName)\r\n  C:\\git\\machinelearning\\src\\Microsoft.ML.OnnxTransform\\DnnImageFeaturizerTransform.cs(66,0): at Microsoft.ML.Transforms.DnnImageFeaturizerEstimator..ctor(IHostEnvironment env, String outputColumnName, Func`2 modelFactory, String inputColumnName)\r\n  C:\\git\\machinelearning\\test\\Microsoft.ML.OnnxTransformTest\\DnnImageFeaturizerTest.cs(161,0): at Microsoft.ML.Tests.DnnImageFeaturizerTests.TestOldSavingAndLoading()\r\n```\r\n\r\n\r\nThe tests failing due to this are \r\nTestOldSavingAndLoading\r\nOnnxStatic\r\nTestDnnImageFeaturizer\r\n\r\ncc @jignparm @yaeldekel @danmosemsft @eerhardt ","Url":"https://github.com/dotnet/machinelearning/issues/2373","RelatedDescription":"Open issue \"DnnImageFeaturizingTests failing for netfx\" (#2373)"},{"Id":"405831582","IsPullRequest":true,"CreatedAt":"2019-02-01T18:59:50","Actor":"sfilipi","Number":"2372","RawContent":null,"Title":"Image analytics documentation, samples, internalization","State":"open","Body":"Addressing both:\r\n\r\n#1209  in the first commit by adding samples, and documenting the classes and the extensions better. \r\n#1798 in the second commit by:\r\n1- Internalizing constructors of estimators and transformers\r\n2- Keep ColumnInfo and move it to to the estimators #1760\r\n3- Rename Arguments -> Options","Url":"https://github.com/dotnet/machinelearning/pull/2372","RelatedDescription":"Open PR \"Image analytics documentation, samples, internalization\" (#2372)"},{"Id":"405727166","IsPullRequest":true,"CreatedAt":"2019-02-01T18:27:09","Actor":"artidoro","Number":"2368","RawContent":null,"Title":"WIP: Making TrivialEstimator an ITransformer","State":"closed","Body":"Fixes #2354.\r\n\r\nAs elaborated in the issue, it can be unintuitive to a `.Fit()` step for non trainable estimators/transformers. \r\nIn this PR, I make the base class of most trivial estimators an `ITransformer`.\r\n\r\nNext steps for the PR:\r\n1. Identify the trivial estimators that don't implement `TrivialEstimator` and make them derive from that.\r\n2. Consider whether it is worth it to rename the trivial estimators, including \"Transformer\" in their name. Something like \"ActionPerformingTransformerEstimator\".\r\n3. Add some tests.\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2368","RelatedDescription":"Closed or merged PR \"WIP: Making TrivialEstimator an ITransformer\" (#2368)"},{"Id":"405817670","IsPullRequest":false,"CreatedAt":"2019-02-01T18:19:54","Actor":"rogancarr","Number":"2371","RawContent":null,"Title":"SelectColumns handles input string arrays differently than other schema transformations","State":"open","Body":"`SelectColumns` has a different input contract than related schema manipulation transforms. Look at the difference:\r\n\r\n```cs\r\nmlContext.Transforms.DropColumns(\"Column1\", \"Column2\");\r\nmlContext.Transforms.SelectColumns(new string[] { \"Column1\", \"Column2\" })\r\n```\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2371","RelatedDescription":"Open issue \"SelectColumns handles input string arrays differently than other schema transformations\" (#2371)"},{"Id":"405804094","IsPullRequest":false,"CreatedAt":"2019-02-01T17:42:36","Actor":"rogancarr","Number":"2370","RawContent":null,"Title":"Add an example for the SelectColumns transform","State":"open","Body":"The SelectColumns schema transformer doesn't have an example, and it's summary is a bit incorrect.","Url":"https://github.com/dotnet/machinelearning/issues/2370","RelatedDescription":"Open issue \"Add an example for the SelectColumns transform\" (#2370)"},{"Id":"405800686","IsPullRequest":true,"CreatedAt":"2019-02-01T17:32:31","Actor":"wschin","Number":"2369","RawContent":null,"Title":"Address minor comments in #2243","State":"open","Body":"This paper continues addressing some small comments left in #2243.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2369","RelatedDescription":"Open PR \"Address minor comments in #2243\" (#2369)"},{"Id":"405716585","IsPullRequest":true,"CreatedAt":"2019-02-01T14:08:42","Actor":"artidoro","Number":"2367","RawContent":null,"Title":"Creation of components through MLContext and cleanup (Onnx, Tensorflow, SelectColumn, KeytoBinVec, ValueMap)","State":"open","Body":"This PR is part of the work outlined in #1798, and focuses on the GcnNorm, LpNorm, RandomFourier, CustomStopWords, VectorWhiten, PCA transformers/estimators:\r\n\r\n1. Internalize constructors of estimators and transformers\r\n2. Keep ColumnInfo and move it to to the estimators #1760\r\n3. Rename Arguments -> Options\r\n4. Internalize Options only when they are not used by public constructor. For all other cases, retain Options as public #1758 \r\n\r\nThis PR is marked as WIP because I have to figure out how to make the DNN assemblies BestFriends with the ONNX assembly. I need to figure out how to do that.","Url":"https://github.com/dotnet/machinelearning/pull/2367","RelatedDescription":"Open PR \"Creation of components through MLContext and cleanup (Onnx, Tensorflow, SelectColumn, KeytoBinVec, ValueMap)\" (#2367)"},{"Id":"405653036","IsPullRequest":true,"CreatedAt":"2019-02-01T11:01:14","Actor":"artidoro","Number":"2366","RawContent":null,"Title":"Creation of components through MLContext and cleanup (GcnNorm, LpNorm, RandomFourier, CustomStopWords, VectorWhiten, PCA)","State":"open","Body":"This PR is part of the work outlined in #1798, and focuses on the GcnNorm, LpNorm, RandomFourier, CustomStopWords, VectorWhiten, PCA transformers/estimators:\r\n\r\n1. Internalize constructors of estimators and transformers\r\n2. Keep ColumnInfo and move it to to the estimators #1760\r\n3. Rename Arguments -> Options\r\n4. Internalize Options only when they are not used by public constructor. For all other cases, retain Options as public #1758\r\n\r\nfixes #2275  \r\n\r\nIf I wrote (not a ITransformer) on the #1798 issue, and this PR number appears on the same line, I renamed the Arguments to Options, and tried to make it internal.","Url":"https://github.com/dotnet/machinelearning/pull/2366","RelatedDescription":"Open PR \"Creation of components through MLContext and cleanup (GcnNorm, LpNorm, RandomFourier, CustomStopWords, VectorWhiten, PCA)\" (#2366)"},{"Id":"405615891","IsPullRequest":true,"CreatedAt":"2019-02-01T09:20:28","Actor":"artidoro","Number":"2365","RawContent":null,"Title":"Creation of components through MLContext and cleanup (Convert, DropSlots, FeatureSelection)","State":"open","Body":"This PR is part of the work outlined in #1798, and focuses on the Convert, DropSlots, CountFeatureSelection, MutualInformationFeatureSelection, FeatureContributionCalculationTransform,  PermutationFeatureImportanceTransform, MissingValueDropping, TreeEnsembleFeaturizationTransform transformers/estimators:\r\n\r\n1. Internalize constructors of estimators and transformers\r\n2. Keep ColumnInfo and move it to to the estimators #1760\r\n3. Rename Arguments -> Options\r\n4. Internalize Options only when they are not used by public constructor. For all other cases, retain Options as public #1758\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2365","RelatedDescription":"Open PR \"Creation of components through MLContext and cleanup (Convert, DropSlots, FeatureSelection)\" (#2365)"},{"Id":"405594181","IsPullRequest":true,"CreatedAt":"2019-02-01T08:10:30","Actor":"artidoro","Number":"2364","RawContent":null,"Title":"Creation of components through MLContext and cleanup (OneHotHash, Hash, CopyCol, KeyToVector)","State":"open","Body":"This PR is part of the work outlined in #1798, and focuses on the OneHotHash, Hash, CopyCol, KeyToVector transformers/estimators:\r\n\r\n1. Internalize constructors of estimators and transformers\r\n2. Keep ColumnInfo and move it to to the estimators #1760\r\n3. Rename Arguments -> Options\r\n4. Internalize Options only when they are not used by public constructor. For all other cases, retain Options as public #1758\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2364","RelatedDescription":"Open PR \"Creation of components through MLContext and cleanup (OneHotHash, Hash, CopyCol, KeyToVector)\" (#2364)"},{"Id":"405588724","IsPullRequest":true,"CreatedAt":"2019-02-01T07:49:44","Actor":"artidoro","Number":"2363","RawContent":null,"Title":" Creation of components through MLContext and cleanup (Concat, Normalizer, NA Indicator/Replace) ","State":"open","Body":"This PR is part of the work outlined in #1798, and focuses on the Concat, Normalizer, NA Indicator/Replace  transformers/estimators:\r\n\r\n1. Internalize constructors of estimators and transformers\r\n2. Keep ColumnInfo and move it to to the estimators #1760\r\n3. Rename Arguments -> Options\r\n4. Internalize Options only when they are not used by public constructor. For all other cases, retain Options as public #1758\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2363","RelatedDescription":"Open PR \" Creation of components through MLContext and cleanup (Concat, Normalizer, NA Indicator/Replace) \" (#2363)"},{"Id":"405582489","IsPullRequest":true,"CreatedAt":"2019-02-01T07:25:22","Actor":"mareklinka","Number":"2362","RawContent":null,"Title":"Add ResizingMode.Fill to ImageResizerTransformer","State":"open","Body":"This PR adds a new resizing mode to the `ImageResizerTransformer`. This mode is called `Fill` and when used, the transformer ignores aspect ratio and squeezes/stretches the source image into the target dimensions.\r\n\r\nThe idea for this mode came up in #2022 - when attempting to score a Keras-trained model it turned out that Keras resizes images in a way that ML.NET cannot do on its own. To increase interoperability, the Fill mode was proposed.\r\n\r\nI also included a test for the new mode. This tests uses a specially prepared image, runs the resizing transformation, and then checks whether the result fulfills the specification for the resizing mode.\r\n\r\nFixes #2022\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2362","RelatedDescription":"Open PR \"Add ResizingMode.Fill to ImageResizerTransformer\" (#2362)"},{"Id":"405571223","IsPullRequest":false,"CreatedAt":"2019-02-01T06:34:50","Actor":"artidoro","Number":"2361","RawContent":null,"Title":"MLContext.Transform should be further organized","State":"open","Body":"It seems that `MLContext.Transforms` can be further organized.\r\nIn `MLContext.Transforms` it is possible to access many transforms directly:\r\n- IndicateMissingValues\r\n- ReplaceMissingValues\r\n- ApplyOnnxModel\r\n- Concatenate\r\n- LoadImage\r\n- Normalize\r\n- Resize\r\n- ScoreTensorFlowModel\r\n- SelectColumns\r\n- TemsorFlow\r\n\r\nThere are also subgroups:\r\n- Transforms.Text\r\n- Transforms.Projection\r\n- Transforms.Categorical\r\n- Transforms.Conversion\r\n- Transforms.FeatureSelection\r\n\r\n\r\n\r\n**Suggestions:**\r\n1. It seems that more groupings can be made:\r\n      - Transforms.Image\r\n      - Transforms.MissingValues\r\n     - Transforms.TensorFlow\r\n2. And maybe Normalize can be moved to the `Transforms.Projections`.\r\n\r\n\r\n**Question:**\r\nDoes it even make sense to have some transforms in a subgroup, while others directly accessible?\r\n\r\n/cc: @rogancarr, @sfilipi, @TomFinley ","Url":"https://github.com/dotnet/machinelearning/issues/2361","RelatedDescription":"Open issue \"MLContext.Transform should be further organized\" (#2361)"},{"Id":"405570040","IsPullRequest":true,"CreatedAt":"2019-02-01T06:29:28","Actor":"mareklinka","Number":"2360","RawContent":null,"Title":"Fix locale-sensitivity for float.Parse calls in CpuMathUtilsUnitTests","State":"open","Body":"As discussed in #2342, the tests in `CpuMathUtilsUnitTests` are culture-sensitive due to `float.Parse` calls which do not specify format providers.\r\n\r\nI updated the calls to be `float.Parse(x, CultureInfo.InvariantCulture)`. Now the tests pass even on my Slovak locale which uses comma (`,`) as a decimal separator.\r\n\r\nFixes #2342 ","Url":"https://github.com/dotnet/machinelearning/pull/2360","RelatedDescription":"Open PR \"Fix locale-sensitivity for float.Parse calls in CpuMathUtilsUnitTests\" (#2360)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-02-03T05:30:51.1223832Z","RunDurationInMilliseconds":979}