{"Data":{"Blog":{"FeedItems":[{"Title":"Surfacing GitHub Usage for packages on NuGet.org","PublishedOn":"2019-07-17T20:00:23+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"There are several criteria you can use today to evaluate NuGet packages. We received feedback that you would like even more information to help choose the right packages. We&#8217;re excited to...","Href":"https://devblogs.microsoft.com/nuget/surfacing-github-usage-for-packages-on-nuget-org/","RawContent":null},{"Title":"NuGet Spring 2019 Roadmap","PublishedOn":"2019-04-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We published our last NuGet roadmap in June last year. Many of the features announced were major additions to NuGet and we have been hard at work to implement those over the last few months. In this...","Href":"https://devblogs.microsoft.com/nuget/nuget-spring-2019-roadmap/","RawContent":null},{"Title":"Enable repeatable package restores using a lock file","PublishedOn":"2018-12-17T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"With PackageReference, NuGet always tries to produce the same closure of package dependencies if the input package reference list has not changed. However, there are a few scenarios where it may not...","Href":"https://devblogs.microsoft.com/nuget/enable-repeatable-package-restores-using-a-lock-file/","RawContent":null},{"Title":"Lock down your dependencies using configurable trust policies","PublishedOn":"2018-12-05T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For the past several months we have focused on various features to improve package security and trust. Around a year back, we had announced our plans on various signing functionalities that we have...","Href":"https://devblogs.microsoft.com/nuget/lock-down-your-dependencies-using-configurable-trust-policies/","RawContent":null},{"Title":"Improved package debugging experience with the NuGet.org symbol server","PublishedOn":"2018-11-16T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Starting today, you can publish symbol packages to the NuGet.org symbol server. With NuGet.org as a single service provider for libraries and symbols, package authors and consumers will have a...","Href":"https://devblogs.microsoft.com/nuget/improved-package-debugging-experience-with-the-nuget-org-symbol-server/","RawContent":null},{"Title":"Introducing Source Code Link for NuGet packages","PublishedOn":"2018-08-27T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"NuGet.org now supports surfacing source code repository link for NuGet packages. This will enable package authors to surface both the project&#8217;s website and the source repository using the...","Href":"https://devblogs.microsoft.com/nuget/introducing-source-code-link-for-nuget-packages/","RawContent":null},{"Title":"NuGet.org starts repo-signing packages","PublishedOn":"2018-08-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In May, we implemented Stage 1 and enabled support for any NuGet.org user to submit signed packages to NuGet.org. Today, we are announcing Stage 2 of our NuGet package signing journey &#8211; tamper...","Href":"https://devblogs.microsoft.com/nuget/introducing-repository-signatures/","RawContent":null},{"Title":"NuGet Summer 2018 Roadmap","PublishedOn":"2018-07-02T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This blog post provides insights into the NuGet team plans for the upcoming quarter (July &#8211; Sep 2018). In the March 2018 NuGet Spring 2018 Roadmap, we had outlined Package Signing,...","Href":"https://devblogs.microsoft.com/nuget/nuget-summer-2018-roadmap/","RawContent":null},{"Title":"Introducing signed package submissions to NuGet.org","PublishedOn":"2018-05-22T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In September 2017, we announced our plans to improve the security of the NuGet ecosystem by introducing the ability for package authors to sign packages. Today, we want to announce support for any...","Href":"https://devblogs.microsoft.com/nuget/introducing-signed-package-submissions/","RawContent":null},{"Title":"NuGet.org will only support MSA/AAD starting June 1st, 2018","PublishedOn":"2018-05-15T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We had previously announced the deprecation of NuGet.org&#8217;s home-grown authentication in favor of Microsoft accounts (MSA) that will allow us to add support for additional security systems such...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-will-only-support-msa-aad-starting-june/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"10115954130","Type":"IssuesEvent","CreatedAt":"2019-07-30T23:42:37","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7390","RelatedDescription":"Opened issue \"[Azure Search] Consider shingling\" (#7390) at NuGet/NuGetGallery","RelatedBody":"Target queries:\r\n\r\n* \"mysql\" - The desired second result should be \"MySqlConnector\"\r\n* \"fxcop\" - The desired top result should be \"Microsoft.CodeAnalysis.FxCopAnalyzers\"\r\n* \"entityframework\" - The desired second result should be \"Microsoft.EntityFrameworkCore\" "},{"Id":"10115331839","Type":"PullRequestEvent","CreatedAt":"2019-07-30T21:28:55","Actor":"ryuyu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7377","RelatedDescription":"Merged pull request \"Add Auditing support to AccountDeleter\" (#7377) at NuGet/NuGetGallery","RelatedBody":"Enables real auditing service to be hydrated in AccountDeleter."},{"Id":"10113543682","Type":"IssuesEvent","CreatedAt":"2019-07-30T16:58:57","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7333","RelatedDescription":"Closed issue \"[Azure Search] Investigate and improve and/or problem in matching\" (#7333) at NuGet/NuGetGallery","RelatedBody":"Right now if multiple terms in a search query match, the \"boost\" doesn't seem very extreme as if it is as relevant as only one term matching.\r\n\r\nAzure Search people can help here."},{"Id":"10113541961","Type":"IssuesEvent","CreatedAt":"2019-07-30T16:58:42","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7332","RelatedDescription":"Closed issue \"[Azure Search] Get rid of freshness in scoring profile until we do more analysis\" (#7332) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"10113511357","Type":"IssuesEvent","CreatedAt":"2019-07-30T16:54:16","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7328","RelatedDescription":"Closed issue \"[Azure Search] Make App Insights \"role name\" same across deployments\" (#7328) at NuGet/NuGetGallery","RelatedBody":"See https://github.com/NuGet/NuGet.Services.Metadata/pull/581"},{"Id":"10113365029","Type":"IssuesEvent","CreatedAt":"2019-07-30T16:33:05","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/6980","RelatedDescription":"Closed issue \"[Azure Search] Establish patterns for functional test search result quality\" (#6980) at NuGet/NuGetGallery","RelatedBody":"This should have a mini design spec. Scope to just PROD for now to reduce flakiness. These should be easy to run from a dev box onto a custom Azure Search service instance to test latest changes.\r\n\r\nConsider converting the OneNote list of expected search results as functional tests. Favor fewer tests to start to shield from flakiness/relevancy changes.\r\n\r\nFollowed by https://github.com/NuGet/NuGetGallery/issues/7191"},{"Id":"10107222983","Type":"PullRequestEvent","CreatedAt":"2019-07-29T23:04:13","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7364","RelatedDescription":"Merged pull request \"Move business logic out of ViewModels related to upcoming embedded icon changes\" (#7364) at NuGet/NuGetGallery","RelatedBody":"Addresses https://github.com/NuGet/Engineering/issues/2599.\r\n\r\n`ViewModelExtensions` class was added and all the initialization code from the constructors was moved there. All the properties of affected VMs were made read-write where possible, so controllers are now have freedom to set the to whatever they like without potentially complicated (in case of deep inheritance trees) changes to VM constructors.\r\n`BasicUserViewModel` class was introduced to be used instead of passing `User` model into VMs, helpers were updated to accommodate to the change."},{"Id":"10107195097","Type":"IssuesEvent","CreatedAt":"2019-07-29T22:57:28","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7389","RelatedDescription":"Opened issue \"[GitHub Usage] Test unicode\" (#7389) at NuGet/NuGetGallery","RelatedBody":"### Is your feature request related to a problem? Please describe.\r\nAdd unit tests to check that the job works as expected when the following are unicode:\r\n\r\n* Repository names\r\n* Repository file names\r\n* Repository file contents\r\n* Package names / package versions"},{"Id":"10107125447","Type":"IssuesEvent","CreatedAt":"2019-07-29T22:40:51","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7351","RelatedDescription":"Closed issue \"[Azure Search] Search queries with mismatched quotes cause 503\" (#7351) at NuGet/NuGetGallery","RelatedBody":"`Tags:\"\"Bing\"`\r\n`Tags:\"\"windows\"`\r\n\r\nThese throw an exception.\r\n\r\n`\r\nFailed to parse query string at line 1, column 7. See https://aka.ms/azure-search-full-query for supported syntax.\r\n`\r\n\r\n\r\n"},{"Id":"10107123130","Type":"IssuesEvent","CreatedAt":"2019-07-29T22:40:19","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7360","RelatedDescription":"Closed issue \"[Azure Search] \"luceneQuery\" query parameter should default to true on V2 search\" (#7360) at NuGet/NuGetGallery","RelatedBody":"Old search has it defaulting to true."},{"Id":"10107110877","Type":"IssuesEvent","CreatedAt":"2019-07-29T22:37:26","Actor":"scottbommarito","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7388","RelatedDescription":"Opened issue \"Add page for managing site admins\" (#7388) at NuGet/NuGetGallery","RelatedBody":"Site admins should be able to manage the list of site admins. Previously, we had a database editor that could be used to add/remove admins. After it was removed, adding or removing an admin requires database access. We should be able to do this from the UI."},{"Id":"10107100125","Type":"PullRequestEvent","CreatedAt":"2019-07-29T22:35:05","Actor":"scottbommarito","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7387","RelatedDescription":"Merged pull request \"Add page for managing site admins\" (#7387) at NuGet/NuGetGallery","RelatedBody":"Currently, we don't have a UI that allows us to manage site admins. Previously, we had the database editor, which we would use to do this, but we recently removed it. As a result, now, whenever we need to onboard someone to the team, we have to gain database access and make a SQL query to make them a site admin.\r\n\r\nThis PR adds a simple UI to the admin section of the site that allows us to easily and quickly manage site admins.\r\n\r\n# Link to page in Admins index\r\n\r\n![image](https://user-images.githubusercontent.com/18014088/62084147-70e6be80-b20d-11e9-93a6-2f611dd8cc48.png)\r\n\r\n# Site Admins page\r\n\r\n![image](https://user-images.githubusercontent.com/18014088/62085377-46e2cb80-b210-11e9-8571-b7922e52671b.png)"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"10115724063","Type":"IssuesEvent","CreatedAt":"2019-07-30T22:45:13","Actor":"shoter","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8408","RelatedDescription":"Opened issue \"Replace reference to codeplex issue numer 3072 \" (#8408) at NuGet/Home","RelatedBody":"This is copy of codeplex issue number 3072 as it is referenced inside code. I should do a PR shortly to address this one.\r\n\r\nThe place where it is referenced is RuntimeHelper.cs:150\r\n\r\n---\r\n\r\nWe're hitting an issue with Microsoft.Bcl package where NuGet is adding a binding redirect for a binary that is considered part of the framework, this causes the application to crash because the binding redirect refers to assembly version that is not available at runtime.\r\n\r\n@Repro:\r\n\r\n1. Create a new Console Application targeting 4.5\r\n2. Create a new Portable Library targeting .NET Framework 4.5, Silverlight 4, Windows Phone 7.5 and .NET for Windows Store apps\r\n3. Add a reference to the portable library from the Console Application\r\n4. Install the Microsoft.Bcl package (1.0.16-rc) to both projects\r\n\r\n@Expected: No binding redirect for System.Runtime in the .NET Framework 4.5 project because a ___later version___ is part of the target framework (see C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.5\\RedistList\\FrameworkList.xml)\r\n@Actual: Binding redirect\r\n\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Runtime\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-1.5.11.0\" newVersion=\"1.5.11.0\" />\r\n</dependentAssembly>\r\n\r\n\r\nYou can use the IVsFrameworkMultiTargeting to determine if a given assembly version is available as part of a given target framework.\r\nMake sure when you fix this, that you only skip the binding redirect if ___a later or same version___ is available in the framework.  \r\n2013-02-22\r\n\r\n---\r\n\r\nWe'll do this in 2.4 release.  \r\n2013-02-26\r\n\r\n---\r\n\r\nIs IVsFrameworkMultiTargeting.IsReferenceableInTargetFx the method I need to call? What should I pass to pwszAssemblySpec?  \r\n2013-06-08\r\n\r\n---\r\n\r\nIt's the full name of the assembly (mscorlib, Version=[version], PublicKeyToken=[token], Culture=[culture]). It can either contain all the information (key, version, etc), or just the simple name (\"mscorlib\")  \r\n2013-06-10\r\n\r\n---\r\n\r\nSo look like I can only check for the same version of the target framework. Can't check for a later version using this method, because I don't know what future versions will be.  \r\n2013-06-12\r\n\r\n---\r\n\r\nThat's fine. That's exactly the behavior we want. For example, System.Runtime didn't ship in 4.0, but did in 4.5. We still want a binding redirect generated for it in 4.0, but not for 4.5.  \r\n2013-06-13\r\n\r\n---\r\n\r\nI followed the exact same steps above, but there's no binding redirect added to the Console Application. It's only added to the __Portable Library project__. Is that the bug?  \r\n2013-06-13\r\n\r\n---\r\n\r\nThe binding redirects added to the Portable Library project seems to come from the Microsoft.Bcl package itself (from the content folder's app.config.transform file). this looks like a non-bug.\r\n2013-06-13\r\n\r\n  \r\nI'm chasing up the repro with Eric St. John. He walked through the code and figured out where it was broken.\r\n\r\nIt's the not the app.config.tranform, notice how the net45 content is empty, and hence no transforms. We also marked our transforms with a special marker that indicates that we added the redirects . The binding redirects we were seeing were not coming from us.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAre you seeing the binding redirects added to the Console Application or the Portable Library? I don't see binding redirect added to Console Application, only the Portable Library.  \r\n2013-06-13\r\n\r\n---\r\n\r\nYes I'm talking about the ConsoleApplication. The binding redirects in the portable library project are expected, and do not affect runtime behavior (as the app.config is ignored and not copied to the app project), and hence can't cause an application to crash.\r\n\r\nI've found another repro (NuGet has really weird logic around when it decides to add binding redirects so it was hard to find a repro).\r\n\r\nThe repro is instead of using the Microsoft.Bcl package, install the Microsoft.Net.Http, 2.2.3-beta package. Make sure you are targeting __4.5__ from the ConsoleApplication and the exact platforms that I called out above for portable.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAlso, the ConsoleApplication must be referencing the portable project before installing the package.  \r\n2013-06-13\r\n\r\n---\r\n\r\nOK now I can repro  \r\n2013-06-14\r\n\r\n---\r\n\r\nOK, I've got a fix now. It no longer adds the binding redirect for System.Runtime.dll, but still adds one for System.Net.Http.Primitives. I guess it's expected, right? Please confirm.\r\n\r\n```\r\n<assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Net.Http.Primitives\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-4.2.3.0\" newVersion=\"4.2.3.0\" />\r\n</dependentAssembly>\r\n</assemblyBinding>\r\n```  \r\n2013-06-14\r\n\r\n---\r\n\r\n\r\nYes that's correct. System.Net.Http.Primitives does not exist in the framework.  \r\n2013-06-14\r\n\r\n---\r\n\r\nFixed in changeset b8d515f6341193b970d2a9d837e580e762d2eb71  \r\n2013-06-19\r\n\r\n---\r\n\r\ni get the same issue with my test project still, runtime being added... if i comment this out the tests run fine... if not i get exceptions thrown from json.net  \r\n2013-08-09\r\n\r\n---\r\n\r\n(or i can change the version up to 4.0.0.0 or something and it works)  \r\n2013-08-09"},{"Id":"10115690636","Type":"IssuesEvent","CreatedAt":"2019-07-30T22:37:50","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8407","RelatedDescription":"Opened issue \"Problem saving settings in Visual Studio\" (#8407) at NuGet/Home","RelatedBody":"Root issue : https://developercommunity.visualstudio.com/content/problem/640886/failed-to-apply-nuget-package-manager-settings-vs.html\r\n\r\nThe customer has not provided additional feedback so it's a bit more difficult to investigate.\r\n\r\nRoot cause is: \r\n\r\n```xml\r\n<entry>\r\n    <record>917</record>\r\n    <time>2019/07/11 05:17:42.112</time>\r\n    <type>Error</type>\r\n    <source>NuGet Package Manager</source>\r\n    <description>System.ArgumentException: An item with the same key has already been added.&#x000D;&#x000A;   at System.ThrowHelper.ThrowArgumentException(ExceptionResource resource)&#x000D;&#x000A;   at System.Collections.Generic.Dictionary`2.Insert(TKey key, TValue value, Boolean add)&#x000D;&#x000A;   at System.Linq.Enumerable.ToDictionary[TSource,TKey,TElement](IEnumerable`1 source, Func`2 keySelector, Func`2 elementSelector, IEqualityComparer`1 comparer)&#x000D;&#x000A;   at NuGet.Configuration.PackageSourceProvider.SavePackageSources(IEnumerable`1 sources)&#x000D;&#x000A;   at NuGet.Options.PackageSourcesOptionsControl.ApplyChangedSettings()</description>\r\n  </entry>\r\n  <entry>\r\n    <record>918</record>\r\n    <time>2019/07/11 05:17:44.430</time>\r\n    <type>Error</type>\r\n    <source>NuGet Package Manager</source>\r\n    <description>System.ArgumentException: An item with the same key has already been added.&#x000D;&#x000A;   at System.ThrowHelper.ThrowArgumentException(ExceptionResource resource)&#x000D;&#x000A;   at System.Collections.Generic.Dictionary`2.Insert(TKey key, TValue value, Boolean add)&#x000D;&#x000A;   at System.Linq.Enumerable.ToDictionary[TSource,TKey,TElement](IEnumerable`1 source, Func`2 keySelector, Func`2 elementSelector, IEqualityComparer`1 comparer)&#x000D;&#x000A;   at NuGet.Configuration.PackageSourceProvider.SavePackageSources(IEnumerable`1 sources)&#x000D;&#x000A;   at NuGet.Options.PackageSourcesOptionsControl.ApplyChangedSettings()</description>\r\n  </entry>\r\n  <entry>\r\n    <record>919</record>\r\n    <time>2019/07/11 05:20:39.330</time>\r\n    <type>Error</type>\r\n    <source>NuGet Package Manager</source>\r\n    <description>System.ArgumentException: An item with the same key has already been added.&#x000D;&#x000A;   at System.ThrowHelper.ThrowArgumentException(ExceptionResource resource)&#x000D;&#x000A;   at System.Collections.Generic.Dictionary`2.Insert(TKey key, TValue value, Boolean add)&#x000D;&#x000A;   at System.Linq.Enumerable.ToDictionary[TSource,TKey,TElement](IEnumerable`1 source, Func`2 keySelector, Func`2 elementSelector, IEqualityComparer`1 comparer)&#x000D;&#x000A;   at NuGet.Configuration.PackageSourceProvider.SavePackageSources(IEnumerable`1 sources)&#x000D;&#x000A;   at NuGet.Options.PackageSourcesOptionsControl.ApplyChangedSettings()</description>\r\n  </entry>\r\n```\r\n\r\n![PackageSourcesIssue (1)](https://user-images.githubusercontent.com/2878341/62170361-faff5780-b2df-11e9-897f-df361fc292bc.png)\r\n"},{"Id":"10115043463","Type":"IssuesEvent","CreatedAt":"2019-07-30T20:43:16","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8393","RelatedDescription":"Closed issue \"Test:  NuGet.PackageManagement.UI.Test.PackageItemLoaderTests.EmitsSearchTelemetryEvents is flaky\" (#8393) at NuGet/Home","RelatedBody":"Test `NuGet.PackageManagement.UI.Test.PackageItemLoaderTests.EmitsSearchTelemetryEvents` is flaky.\r\n```\r\nNuGet.PackageManagement.UI.Test.PackageItemLoaderTests.EmitsSearchTelemetryEvents [FAIL]\r\n  Assert.Equal() Failure\r\n  Expected: 4\r\n  Actual:   5\r\n  Stack Trace:\r\n    C:\\git\\NuGet.Client\\test\\NuGet.Clients.Tests\\NuGet.PackageManagement.UI.Test\\PackageItemLoaderTests.cs(107,0): at NuGet.PackageManagement.UI.Test.PackageItemLoaderTests.<EmitsSearchTelemetryEvents>d__2.MoveNext()\r\n    --- End of stack trace from previous location where exception was thrown ---\r\n       at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n       at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n    --- End of stack trace from previous location where exception was thrown ---\r\n       at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n       at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n    --- End of stack trace from previous location where exception was thrown ---\r\n       at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n       at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n```"},{"Id":"10115036661","Type":"IssuesEvent","CreatedAt":"2019-07-30T20:42:14","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8401","RelatedDescription":"Closed issue \"Multiple enumeration in NuGetPackageManager.PreviewUpdatePackagesAsync\" (#8401) at NuGet/Home","RelatedBody":"Currently, there is the following code in `NuGet.PackageManagement.NuGetPackageManager.PreviewUpdatePackagesAsync`:\r\n\r\n```cs\r\nprivate async Task<IEnumerable<NuGetProjectAction>> PreviewUpdatePackagesAsync(\r\n        string packageId,\r\n        List<PackageIdentity> packageIdentities,\r\n        IEnumerable<NuGetProject> nuGetProjects,\r\n        ResolutionContext resolutionContext,\r\n        INuGetProjectContext nuGetProjectContext,\r\n        IEnumerable<SourceRepository> primarySources,\r\n        IEnumerable<SourceRepository> secondarySources,\r\n        CancellationToken token)\r\n{\r\n    // ...\r\n    var buildIntegratedProjects = nuGetProjects.OfType<BuildIntegratedNuGetProject>().ToList();\r\n    var nonBuildIntegratedProjects = nuGetProjects.Except(buildIntegratedProjects).ToList();\r\n```\r\nHere we have multiple enumeration of `nuGetProjects` which may lead to a bug. E.g., if we create a new `NuGetProject` inside each `MoveNext` of `nuGetProjects`, the `Except` call will not filter any integration projects.\r\nTo avoid such kind of bugs, `nuGetProjects` should be converted to `List` before, the patch is trivial:\r\n```patch\r\ndiff --git a/src/NuGet.Core/NuGet.PackageManagement/NuGetPackageManager.cs b/src/NuGet.Core/NuGet.PackageManagement/NuGetPackageManager.cs\r\nindex 895cc13c9..430a2819c 100644\r\n--- a/src/NuGet.Core/NuGet.PackageManagement/NuGetPackageManager.cs\r\n+++ b/src/NuGet.Core/NuGet.PackageManagement/NuGetPackageManager.cs\r\n@@ -637,8 +637,9 @@ private void InitializePackagesFolderInfo(string packagesFolderPath, bool exclud\r\n             var tasks = new List<Task<IEnumerable<NuGetProjectAction>>>(maxTasks);\r\n             var nugetActions = new List<NuGetProjectAction>();\r\n \r\n-            var buildIntegratedProjects = nuGetProjects.OfType<BuildIntegratedNuGetProject>().ToList();\r\n-            var nonBuildIntegratedProjects = nuGetProjects.Except(buildIntegratedProjects).ToList();\r\n+            var nuGetProjectList = nuGetProjects.ToList();\r\n+            var buildIntegratedProjects = nuGetProjectList.OfType<BuildIntegratedNuGetProject>().ToList();\r\n+            var nonBuildIntegratedProjects = nuGetProjectList.Except(buildIntegratedProjects).ToList();\r\n \r\n             var shouldFilterProjectsForUpdate = false;\r\n             if (packageIdentities.Count > 0)\r\n```\r\nLet me know if it's OK, I will be happy to create a pull request"},{"Id":"10114630768","Type":"IssuesEvent","CreatedAt":"2019-07-30T19:40:36","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8365","RelatedDescription":"Closed issue \"Test:  update .NET Core SDK\" (#8365) at NuGet/Home","RelatedBody":"[.NET Core SDK 1.0 has reached end of life status](https://dotnet.microsoft.com/download/dotnet-core).  [scripts/funcTests/runFuncTests.sh](https://github.com/NuGet/NuGet.Client/blob/cb8a79ef3c75a614b768c879cf465759c053b019/scripts/funcTests/runFuncTests.sh#L41) should be updated to 2.1 or later."},{"Id":"10113858044","Type":"IssuesEvent","CreatedAt":"2019-07-30T17:45:48","Actor":"xavierdecoster","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8406","RelatedDescription":"Opened issue \"Convert async void test methods to async Task\" (#8406) at NuGet/Home","RelatedBody":"Convert `async void` test methods to `async Task` to avoid potentially unobserved exceptions to crash the test runner process."},{"Id":"10113273844","Type":"IssuesEvent","CreatedAt":"2019-07-30T16:20:27","Actor":"PhilPJL","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8405","RelatedDescription":"Opened issue \"Migrate from packages.config for an existing WCF service application fails\" (#8405) at NuGet/Home","RelatedBody":"Please read the following information before posting the issue.\r\n\r\nVS version 16.2.0\r\n\r\n Attempting to migrate an existing .NET 4.7.2 WCF service application to use package refs results in:\r\n\r\n![image](https://user-images.githubusercontent.com/271656/62146787-fe99db00-b2ed-11e9-9138-67d500e7122d.png)\r\n\r\nHowever creating a new WCF service application allows the use of package refs.\r\n\r\n![image](https://user-images.githubusercontent.com/271656/62146849-28530200-b2ee-11e9-8b2f-6e128911d936.png)\r\n\r\n\r\n\r\n"},{"Id":"10112979076","Type":"IssuesEvent","CreatedAt":"2019-07-30T15:43:15","Actor":"loic-sharma","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8404","RelatedDescription":"Opened issue \"Improve error message when pushing a NuGet symbol package results in a 404\" (#8404) at NuGet/Home","RelatedBody":"The NuGet protocol returns a HTTP 404 response status code if the uploaded NuGet symbols package does not correspond to an already existing NuGet package:\r\n\r\n![](https://user-images.githubusercontent.com/1833692/62123757-ea8fb280-b2c8-11e9-9778-87cbb4dfc373.png)\r\n\r\nThis behavior is documented here: https://docs.microsoft.com/en-us/nuget/api/symbol-package-publish-resource#response\r\n\r\nWe should improve the error message to state something like `A corresponding package with the provided ID and version does not exist.`\r\n"},{"Id":"10106794262","Type":"IssuesEvent","CreatedAt":"2019-07-29T21:33:46","Actor":"heng-liu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8403","RelatedDescription":"Opened issue \"Remove NuGet.Build.Tasks.Pack.Sdk2x package\" (#8403) at NuGet/Home","RelatedBody":"As there is no more NuGet insertion into SDK 2.x, there is no need to generate the NuGet.Build.Tasks.Pack.Sdk2x package in our code.\r\nWe should remove related code.\r\nRelated issue https://github.com/NuGet/Home/issues/8043"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"10115721045","Type":"IssuesEvent","CreatedAt":"2019-07-30T22:44:31","Actor":"shoter","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/36","RelatedDescription":"Closed issue \"Replace reference to codeplex issue numer 3072\" (#36) at NuGet/Announcements","RelatedBody":"This is copy of codeplex issue number 3072 as it is referenced inside code. I should do a PR shortly to address this one.\r\n\r\nThe place where it is referenced is RuntimeHelper.cs:150\r\n\r\n\r\n---\r\n\r\nWe're hitting an issue with Microsoft.Bcl package where NuGet is adding a binding redirect for a binary that is considered part of the framework, this causes the application to crash because the binding redirect refers to assembly version that is not available at runtime.\r\n\r\n@Repro:\r\n\r\n1. Create a new Console Application targeting 4.5\r\n2. Create a new Portable Library targeting .NET Framework 4.5, Silverlight 4, Windows Phone 7.5 and .NET for Windows Store apps\r\n3. Add a reference to the portable library from the Console Application\r\n4. Install the Microsoft.Bcl package (1.0.16-rc) to both projects\r\n\r\n@Expected: No binding redirect for System.Runtime in the .NET Framework 4.5 project because a ___later version___ is part of the target framework (see C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.5\\RedistList\\FrameworkList.xml)\r\n@Actual: Binding redirect\r\n\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Runtime\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-1.5.11.0\" newVersion=\"1.5.11.0\" />\r\n</dependentAssembly>\r\n\r\n\r\nYou can use the IVsFrameworkMultiTargeting to determine if a given assembly version is available as part of a given target framework.\r\nMake sure when you fix this, that you only skip the binding redirect if ___a later or same version___ is available in the framework.  \r\n2013-02-22\r\n\r\n---\r\n\r\nWe'll do this in 2.4 release.  \r\n2013-02-26\r\n\r\n---\r\n\r\nIs IVsFrameworkMultiTargeting.IsReferenceableInTargetFx the method I need to call? What should I pass to pwszAssemblySpec?  \r\n2013-06-08\r\n\r\n---\r\n\r\nIt's the full name of the assembly (mscorlib, Version=[version], PublicKeyToken=[token], Culture=[culture]). It can either contain all the information (key, version, etc), or just the simple name (\"mscorlib\")  \r\n2013-06-10\r\n\r\n---\r\n\r\nSo look like I can only check for the same version of the target framework. Can't check for a later version using this method, because I don't know what future versions will be.  \r\n2013-06-12\r\n\r\n---\r\n\r\nThat's fine. That's exactly the behavior we want. For example, System.Runtime didn't ship in 4.0, but did in 4.5. We still want a binding redirect generated for it in 4.0, but not for 4.5.  \r\n2013-06-13\r\n\r\n---\r\n\r\nI followed the exact same steps above, but there's no binding redirect added to the Console Application. It's only added to the __Portable Library project__. Is that the bug?  \r\n2013-06-13\r\n\r\n---\r\n\r\nThe binding redirects added to the Portable Library project seems to come from the Microsoft.Bcl package itself (from the content folder's app.config.transform file). this looks like a non-bug.\r\n2013-06-13\r\n\r\n  \r\nI'm chasing up the repro with Eric St. John. He walked through the code and figured out where it was broken.\r\n\r\nIt's the not the app.config.tranform, notice how the net45 content is empty, and hence no transforms. We also marked our transforms with a special marker that indicates that we added the redirects . The binding redirects we were seeing were not coming from us.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAre you seeing the binding redirects added to the Console Application or the Portable Library? I don't see binding redirect added to Console Application, only the Portable Library.  \r\n2013-06-13\r\n\r\n---\r\n\r\nYes I'm talking about the ConsoleApplication. The binding redirects in the portable library project are expected, and do not affect runtime behavior (as the app.config is ignored and not copied to the app project), and hence can't cause an application to crash.\r\n\r\nI've found another repro (NuGet has really weird logic around when it decides to add binding redirects so it was hard to find a repro).\r\n\r\nThe repro is instead of using the Microsoft.Bcl package, install the Microsoft.Net.Http, 2.2.3-beta package. Make sure you are targeting __4.5__ from the ConsoleApplication and the exact platforms that I called out above for portable.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAlso, the ConsoleApplication must be referencing the portable project before installing the package.  \r\n2013-06-13\r\n\r\n---\r\n\r\nOK now I can repro  \r\n2013-06-14\r\n\r\n---\r\n\r\nOK, I've got a fix now. It no longer adds the binding redirect for System.Runtime.dll, but still adds one for System.Net.Http.Primitives. I guess it's expected, right? Please confirm.\r\n\r\n```\r\n<assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Net.Http.Primitives\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-4.2.3.0\" newVersion=\"4.2.3.0\" />\r\n</dependentAssembly>\r\n</assemblyBinding>\r\n```  \r\n2013-06-14\r\n\r\n---\r\n\r\n\r\nYes that's correct. System.Net.Http.Primitives does not exist in the framework.  \r\n2013-06-14\r\n\r\n---\r\n\r\nFixed in changeset b8d515f6341193b970d2a9d837e580e762d2eb71  \r\n2013-06-19\r\n\r\n---\r\n\r\ni get the same issue with my test project still, runtime being added... if i comment this out the tests run fine... if not i get exceptions thrown from json.net  \r\n2013-08-09\r\n\r\n---\r\n\r\n(or i can change the version up to 4.0.0.0 or something and it works)  \r\n2013-08-09"},{"Id":"10115715827","Type":"IssuesEvent","CreatedAt":"2019-07-30T22:43:23","Actor":"shoter","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/36","RelatedDescription":"Opened issue \"Replace reference to codeplex issue numer 3072\" (#36) at NuGet/Announcements","RelatedBody":"This is copy of codeplex issue number 3072 as it is referenced inside code. I should do a PR shortly to address this one.\r\n\r\nThe place where it is referenced is RuntimeHelper.cs:150\r\n\r\n\r\n---\r\n\r\nWe're hitting an issue with Microsoft.Bcl package where NuGet is adding a binding redirect for a binary that is considered part of the framework, this causes the application to crash because the binding redirect refers to assembly version that is not available at runtime.\r\n\r\n@Repro:\r\n\r\n1. Create a new Console Application targeting 4.5\r\n2. Create a new Portable Library targeting .NET Framework 4.5, Silverlight 4, Windows Phone 7.5 and .NET for Windows Store apps\r\n3. Add a reference to the portable library from the Console Application\r\n4. Install the Microsoft.Bcl package (1.0.16-rc) to both projects\r\n\r\n@Expected: No binding redirect for System.Runtime in the .NET Framework 4.5 project because a ___later version___ is part of the target framework (see C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.5\\RedistList\\FrameworkList.xml)\r\n@Actual: Binding redirect\r\n\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Runtime\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-1.5.11.0\" newVersion=\"1.5.11.0\" />\r\n</dependentAssembly>\r\n\r\n\r\nYou can use the IVsFrameworkMultiTargeting to determine if a given assembly version is available as part of a given target framework.\r\nMake sure when you fix this, that you only skip the binding redirect if ___a later or same version___ is available in the framework.  \r\n2013-02-22\r\n\r\n---\r\n\r\nWe'll do this in 2.4 release.  \r\n2013-02-26\r\n\r\n---\r\n\r\nIs IVsFrameworkMultiTargeting.IsReferenceableInTargetFx the method I need to call? What should I pass to pwszAssemblySpec?  \r\n2013-06-08\r\n\r\n---\r\n\r\nIt's the full name of the assembly (mscorlib, Version=[version], PublicKeyToken=[token], Culture=[culture]). It can either contain all the information (key, version, etc), or just the simple name (\"mscorlib\")  \r\n2013-06-10\r\n\r\n---\r\n\r\nSo look like I can only check for the same version of the target framework. Can't check for a later version using this method, because I don't know what future versions will be.  \r\n2013-06-12\r\n\r\n---\r\n\r\nThat's fine. That's exactly the behavior we want. For example, System.Runtime didn't ship in 4.0, but did in 4.5. We still want a binding redirect generated for it in 4.0, but not for 4.5.  \r\n2013-06-13\r\n\r\n---\r\n\r\nI followed the exact same steps above, but there's no binding redirect added to the Console Application. It's only added to the __Portable Library project__. Is that the bug?  \r\n2013-06-13\r\n\r\n---\r\n\r\nThe binding redirects added to the Portable Library project seems to come from the Microsoft.Bcl package itself (from the content folder's app.config.transform file). this looks like a non-bug.\r\n2013-06-13\r\n\r\n  \r\nI'm chasing up the repro with Eric St. John. He walked through the code and figured out where it was broken.\r\n\r\nIt's the not the app.config.tranform, notice how the net45 content is empty, and hence no transforms. We also marked our transforms with a special marker that indicates that we added the redirects . The binding redirects we were seeing were not coming from us.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAre you seeing the binding redirects added to the Console Application or the Portable Library? I don't see binding redirect added to Console Application, only the Portable Library.  \r\n2013-06-13\r\n\r\n---\r\n\r\nYes I'm talking about the ConsoleApplication. The binding redirects in the portable library project are expected, and do not affect runtime behavior (as the app.config is ignored and not copied to the app project), and hence can't cause an application to crash.\r\n\r\nI've found another repro (NuGet has really weird logic around when it decides to add binding redirects so it was hard to find a repro).\r\n\r\nThe repro is instead of using the Microsoft.Bcl package, install the Microsoft.Net.Http, 2.2.3-beta package. Make sure you are targeting __4.5__ from the ConsoleApplication and the exact platforms that I called out above for portable.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAlso, the ConsoleApplication must be referencing the portable project before installing the package.  \r\n2013-06-13\r\n\r\n---\r\n\r\nOK now I can repro  \r\n2013-06-14\r\n\r\n---\r\n\r\nOK, I've got a fix now. It no longer adds the binding redirect for System.Runtime.dll, but still adds one for System.Net.Http.Primitives. I guess it's expected, right? Please confirm.\r\n\r\n```\r\n<assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Net.Http.Primitives\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-4.2.3.0\" newVersion=\"4.2.3.0\" />\r\n</dependentAssembly>\r\n</assemblyBinding>\r\n```  \r\n2013-06-14\r\n\r\n---\r\n\r\n\r\nYes that's correct. System.Net.Http.Primitives does not exist in the framework.  \r\n2013-06-14\r\n\r\n---\r\n\r\nFixed in changeset b8d515f6341193b970d2a9d837e580e762d2eb71  \r\n2013-06-19\r\n\r\n---\r\n\r\ni get the same issue with my test project still, runtime being added... if i comment this out the tests run fine... if not i get exceptions thrown from json.net  \r\n2013-08-09\r\n\r\n---\r\n\r\n(or i can change the version up to 4.0.0.0 or something and it works)  \r\n2013-08-09"},{"Id":"10105705706","Type":"IssuesEvent","CreatedAt":"2019-07-29T18:41:10","Actor":"anangaur","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/35","RelatedDescription":"Opened issue \"Machine readable output for dotnet list package\" (#35) at NuGet/Announcements","RelatedBody":"The spec for 'Machine readable output for dotnet list package' is ready for **review**:\r\n\r\n|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Machine readable output for dotnet list package](https://github.com/NuGet/Home/wiki/%5BSpec%5D-Machine-readable-output-for-dotnet-list-package) | https://github.com/NuGet/Home/issues/7752 |"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1124053944269983745","CreatedAt":"2019-05-02T20:51:58+00:00","UserScreenname":"nuget","Text":"https://t.co/F9kiKfvqkS is currently degraded and some pages might take too long to load. We are investigating the… https://t.co/j3saBGKARZ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":3,"FavoriteCount":2,"RawContent":null},{"Id":"1121348019914334210","CreatedAt":"2019-04-25T09:39:36+00:00","UserScreenname":"nuget","Text":"Thanks for your contribution. https://t.co/RDrP9LnHU3","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":26,"FavoriteCount":3,"RawContent":null},{"Id":"1116042504854335488","CreatedAt":"2019-04-10T18:17:22+00:00","UserScreenname":"nuget","Text":"We have just published the NuGet Roadmap for Spring 2019. Check it out now! \nhttps://t.co/gt7qR0S3wV","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":24,"FavoriteCount":18,"RawContent":null},{"Id":"1115380341353537538","CreatedAt":"2019-04-08T22:26:10+00:00","UserScreenname":"nuget","Text":"Alert 🚨: Package publishing to @NuGet.org is taking more time than expected. The team is currently investigating th… https://t.co/EuaZ7gBehM","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":1,"FavoriteCount":6,"RawContent":null}]}},"RunOn":"2019-07-31T05:30:46.8704803Z","RunDurationInMilliseconds":1954}