{"Data":{"Blog":{"FeedItems":[{"Title":"Deprecating TLS 1.0 and 1.1 on NuGet.org","PublishedOn":"2019-11-15T18:58:33+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"co-authored by Scott Bommarito\nAt Microsoft, using the latest and secure encryption techniques is very important to us to ensure the security and privacy of our customers. TLS 1.0 and TLS 1.1,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org/","RawContent":null},{"Title":"Deprecating packages on nuget.org","PublishedOn":"2019-09-30T18:29:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are excited to announce that nuget.org now supports package deprecation. This has been a long standing ask that will help the ecosystem use supported packages. As a package publisher on nuget.org,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-packages-on-nuget-org/","RawContent":null},{"Title":"New and improved NuGet Search is here!","PublishedOn":"2019-08-23T03:31:26+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"It’s been a long time coming, and today we are excited to announce the new and improved search on NuGet.org leveraging Azure Search. We want to start this post with a huge thanks to you, the NuGet...","Href":"https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/","RawContent":null},{"Title":"Surfacing GitHub Usage for packages on NuGet.org","PublishedOn":"2019-07-17T20:00:23+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"There are several criteria you can use today to evaluate NuGet packages. We received feedback that you would like even more information to help choose the right packages. We&#8217;re excited to...","Href":"https://devblogs.microsoft.com/nuget/surfacing-github-usage-for-packages-on-nuget-org/","RawContent":null},{"Title":"NuGet Spring 2019 Roadmap","PublishedOn":"2019-04-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We published our last NuGet roadmap in June last year. Many of the features announced were major additions to NuGet and we have been hard at work to implement those over the last few months. In this...","Href":"https://devblogs.microsoft.com/nuget/nuget-spring-2019-roadmap/","RawContent":null},{"Title":"Enable repeatable package restores using a lock file","PublishedOn":"2018-12-17T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"With PackageReference, NuGet always tries to produce the same closure of package dependencies if the input package reference list has not changed. However, there are a few scenarios where it may not...","Href":"https://devblogs.microsoft.com/nuget/enable-repeatable-package-restores-using-a-lock-file/","RawContent":null},{"Title":"Lock down your dependencies using configurable trust policies","PublishedOn":"2018-12-05T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For the past several months we have focused on various features to improve package security and trust. Around a year back, we had announced our plans on various signing functionalities that we have...","Href":"https://devblogs.microsoft.com/nuget/lock-down-your-dependencies-using-configurable-trust-policies/","RawContent":null},{"Title":"Improved package debugging experience with the NuGet.org symbol server","PublishedOn":"2018-11-16T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Starting today, you can publish symbol packages to the NuGet.org symbol server. With NuGet.org as a single service provider for libraries and symbols, package authors and consumers will have a...","Href":"https://devblogs.microsoft.com/nuget/improved-package-debugging-experience-with-the-nuget-org-symbol-server/","RawContent":null},{"Title":"Introducing Source Code Link for NuGet packages","PublishedOn":"2018-08-27T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"NuGet.org now supports surfacing source code repository link for NuGet packages. This will enable package authors to surface both the project&#8217;s website and the source repository using the...","Href":"https://devblogs.microsoft.com/nuget/introducing-source-code-link-for-nuget-packages/","RawContent":null},{"Title":"NuGet.org starts repo-signing packages","PublishedOn":"2018-08-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In May, we implemented Stage 1 and enabled support for any NuGet.org user to submit signed packages to NuGet.org. Today, we are announcing Stage 2 of our NuGet package signing journey &#8211; tamper...","Href":"https://devblogs.microsoft.com/nuget/introducing-repository-signatures/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"11447901898","Type":"PullRequestEvent","CreatedAt":"2020-02-06T01:20:43","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7838","RelatedDescription":"Opened pull request \"Block versions that NuGet pack does not allow\" (#7838) at NuGet/NuGetGallery","RelatedBody":"When you try to pack a .nuspec with a floating version in it, NuGet pack prevents this by taking out the floating part and substituting in min version. \"12.*\" turns into \"12.0.0\". However, someone can hand-craft a .nuspec to get around it.\r\n\r\nWhen we moved from 2.x APIs to 3.x APIs in gallery, we started supporting this without realizing it. Our .nuspec validation looks at each dependency version and parses it as a `VersionRange` which supports floating (since it's the same model that is used for `<PackageReference>` version).\r\n\r\nThese are the only packages that have utilized this:\r\n\r\nId | Version | Created\r\n-- | -- | --\r\nPInvokeCompiler  |  1.0.0-rc1 |  2017-01-09\r\nScissorhands.Helpers |   1.0.0-alpha-17  |  2016-01-13\r\nScissorhands.Helpers |   1.0.0-alpha-16  | 2016-01-13\r\n\r\nThanks @zivkan for the data.\r\n\r\nWe should block these since it has unpredictable impact on the restore graph and is a totally undocumented case for package dependencies.\r\n\r\nIf we want to open the flood gates later we can but it would be coupled with official client support and a well thought through plan of how this will impact package consumers as a whole.\r\n\r\n"},{"Id":"11447671517","Type":"PullRequestEvent","CreatedAt":"2020-02-06T00:33:39","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7837","RelatedDescription":"Opened pull request \"Remove the SemVer 2.0.0 warnings from push and display packages\" (#7837) at NuGet/NuGetGallery","RelatedBody":"Address https://github.com/NuGet/NuGetGallery/issues/7836\r\n\r\n# Push from command line\r\n\r\n## Before\r\n\r\n![image](https://user-images.githubusercontent.com/94054/73895268-defee480-4833-11ea-9c75-3f06f84d3cda.png)\r\n\r\n## After\r\n\r\n![image](https://user-images.githubusercontent.com/94054/73895274-e8884c80-4833-11ea-9794-36e2eea8c1b3.png)\r\n\r\n# UI upload\r\n\r\n## Before\r\n\r\n![image](https://user-images.githubusercontent.com/94054/73895620-0ace9a00-4835-11ea-95a4-dd7f672c10ed.png)\r\n\r\n## After\r\n\r\n![image](https://user-images.githubusercontent.com/94054/73895603-ff7b6e80-4834-11ea-9cab-db34aba32eca.png)\r\n\r\n# Package details page\r\n\r\n## Before\r\n\r\n![image](https://user-images.githubusercontent.com/94054/73895639-1d48d380-4835-11ea-9ec0-f4856af403a9.png)\r\n\r\n## After\r\n\r\n![image](https://user-images.githubusercontent.com/94054/73895674-36ea1b00-4835-11ea-824c-acedafcb9983.png)\r\n"},{"Id":"11446601716","Type":"IssuesEvent","CreatedAt":"2020-02-05T21:36:39","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7836","RelatedDescription":"Opened issue \"Remove the SemVer 2.0.0 warning from nuget.org\" (#7836) at NuGet/NuGetGallery","RelatedBody":"### Is your feature request related to a problem? Please describe.\r\n\r\nWhen the SemVer 2.0.0 changes were introduced to the V2 and V3 protocol, they are intended to mitigate the impact of SemVer 2.0.0 packages breaking old clients, e.g. suppose a very popular package released a SemVer 2.0.0 version. In such a case a 2.x customer would fail to restore a package because the version parsing would explode. So we make SemVer 2.0.0 packages \"opt-in\". \r\n\r\nThis protocol change meant that SemVer 2.0.0 packages were hidden in most of our APIs for clients that predate NuGet version 4.3. 4.3 is when the SemVer 2.0.0 protocol was implemented. At that same time we put a warning banner on nuget.org.\r\n\r\n![image](https://user-images.githubusercontent.com/94054/73881689-a223f500-4815-11ea-8717-653f6302cc65.png)\r\nhttps://www.nuget.org/packages/NuGet.Versioning/5.5.0-preview.2.6382\r\n\r\nA similar warning is also visible during UI upload and during package push. And during pack (NU5105).\r\n\r\nSince 4.3 was shipped so long ago, most clients now support the SemVer 2.0.0 protocol and this warning is more noisy than helpful.\r\n\r\nRange | Percent | Note\r\n-- | -- | --\r\n≥ 4.3 | ~96.4% | Supports SemVer 2.0.0 protocol\r\n≥ 3.0 && < 4.3 | ~3.6% | Partial SemVer 2.0.0 but not SemVer 2.0.0 protocol `*`\r\n< 3.0 | ~0.0% | Does not support SemVer 2.0.0\r\n\r\n`*` =\r\n- 3.5.0 and on supported SemVer 2.0.0 in packages.config\r\n- PackageReference always supported SemVer 2.0.0 from what I can tell\r\n- V3 feeds always return SemVer 2.0.0 packages from flat container so packages can be found prior to SemVer 2.0.0. protocol support\r\n\r\n### Describe the solution you'd like\r\n\r\nRemove these warnings entirely.\r\n\r\n### Additional details\r\n\r\nPrompted by https://twitter.com/SimonCropp/status/1169447145939685376, https://github.com/NuGet/NuGetGallery/pull/7772, and https://github.com/NuGet/Home/issues/5201.\r\n\r\n/cc @nkolev92 @SimonCropp @agr @karann-msft \r\n"},{"Id":"11444714968","Type":"IssuesEvent","CreatedAt":"2020-02-05T17:38:56","Actor":"taori","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7835","RelatedDescription":"Opened issue \"Improved link functionality for nuget.org\" (#7835) at NuGet/NuGetGallery","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe):\r\nNuget.org page\r\n\r\nIt would be great if there were a page link for nuget.org to access the latest version of a packet matching a given version suffix name.\r\n\r\ne.g nuget.org/packages/mypage/latest/alpha or nuget.org/packages/mypage/latest\r\n"},{"Id":"11437632836","Type":"PullRequestEvent","CreatedAt":"2020-02-05T00:35:11","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7834","RelatedDescription":"Merged pull request \"Tool to determine if a .nupkg has valid Microsoft metadata\" (#7834) at NuGet/NuGetGallery","RelatedBody":"This is a new version of https://github.com/NuGet/NuGetGallery/pull/7000. I did this so that I can leave `jver-verify` as-is, which is hard-coded into Arcade:\r\nhttps://github.com/dotnet/arcade/blob/a68b528ad1d0305f55c4fbdc977ebb0c02cfcc19/eng/common/post-build/nuget-validation.ps1#L12\r\n\r\nGiven that Arcade is using this in their official pipeline, it's time to merge this and get them to switch to a build that is properly signed and published by the NuGet team. The current dependency is precarious since the binary they are using is built by me and not published by the NuGet team.\r\nhttps://www.nuget.org/packages/Jver.VerifyMicrosoftPackage/0.0.1-beta\r\n\r\nWe will be providing the tool as-is (no behavior changes)."}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"11447874323","Type":"IssuesEvent","CreatedAt":"2020-02-06T01:15:28","Actor":"SimonSDA","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9144","RelatedDescription":"Opened issue \"NU1101: Welcome to hell \" (#9144) at NuGet/Home","RelatedBody":"This error has caused me the greatest amount of pain as Visual Studio is really bad at dealing with NuGet PackageReference for non - .net.core projects. I mean REALLY BAD. Here is an example (for an asp.net webservice):\n\nNU1101\tUnable to find package Gladstone.ClubCentric.HeadOffice.BackEnd.DataAccess.SDABankOfIrelandEFTCommon. No packages exist with this id in source(s): ClubCentric, Microsoft, Microsoft Visual Studio Offline Packages\tSDAMemberWS\tC:\\Git\\Build\\ClubCentric\\HeadOffice\\BackEnd\\WebServices\\SDAMemberWS\\SDAMemberWS.csproj\t1\t\n\nThis package DOES exist. It is correctly references in the project and the nuspec file. I have cleared the nuget cache, wiped obj folders etc. The problem will be down to some OTHER package referencing this package which has some other problem, which is nigh on impossible to find. Why can this error not show the ACTUAL PACKAGE that is causing the problem...\n\nI am in the process of converting a massive (500+ project) set of solutions to using NuGet packages (as fun as it sounds) and had to do most of this manually as Visual Studio has no built-in way to do it. Namely:\n\n1) Creating a NuGet package for a DLL will not include any dependent DLLs in the same solution (i.e. non-nuget references). They have to be manually added in the &lt;files&gt; section in the .nuspec file.\n\n2) Updating an existing package (without changing the version number) requires deleting the bin and obj folders + wiping the .suo file from the hidden .vs folder in the solution, clear the nuget cache then package restore as it tends to hang around in various package.json files and obj folders otherwise causing much frustration.\n\n3) projects have to be set to output to bin\\ in all configurations rather then bin\\debug / bin\\release as you have to hard-code dependent files in the nuspec file as per point 1).\n\n4) Including project-dependent DLLs as per step 1) seems to cause the compiler to build each of their dependencies multiple times leading the much longer compile time when using nuget pack -Build. This doesn't happen with a regular build using msbuild.\n\n---\n#### Document details\n\n⚠ *Do not edit this section. It is required for docs.microsoft.com ➟ GitHub issue linking.*\n\n* ID: c334f18d-66ca-28a9-3350-c20e762bbec1\n* Version Independent ID: 2ea96dfa-e016-ae3b-864c-2a1ce513d90e\n* Content: [NuGet Error NU1101](https://docs.microsoft.com/en-gb/nuget/reference/errors-and-warnings/nu1101?f1url=https%3A%2F%2Fmsdn.microsoft.com%2Fquery%2Fdev15.query%3FappId%3DDev15IDEF1%26l%3Den-GB%26k%3Dk(NU1101)%26rd%3Dtrue)\n* Content Source: [docs/reference/errors-and-warnings/NU1101.md](https://github.com/NuGet/docs.microsoft.com-nuget/blob/master/docs/reference/errors-and-warnings/NU1101.md)\n* Product: **nuget**\n* GitHub Login: @zhili1208\n* Microsoft Alias: **lzhi**"},{"Id":"11447612924","Type":"IssuesEvent","CreatedAt":"2020-02-06T00:21:52","Actor":"rrelyea","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9143","RelatedDescription":"Opened issue \"Code Review polish from `Dotnet nuget add|remove|* source`\" (#9143) at NuGet/Home","RelatedBody":"Fix the rest of the feedback that we didn't have time to address before checkin: https://github.com/NuGet/NuGet.Client/pull/3206"},{"Id":"11447609402","Type":"IssuesEvent","CreatedAt":"2020-02-06T00:21:12","Actor":"kunalranglani","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9142","RelatedDescription":"Opened issue \"Repository element missing from .nuspec on running nuget pack\" (#9142) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used: NuGet.exe\r\n\r\nNuGet version:  5.0.2.5988\r\n\r\nVS version : VS 2019 16.5.0 Preview 3.0\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Open .nuspec file and remove type=\"git\" from the repository element. Leave the url attribute there with a url to your repo\r\n\r\n2. \"type\" attribute is optional in nuspec.xsd\r\n\r\n3. run nuget pack .\\app.nuspec\r\n\r\n4. The nuspec generated in the nupkg doesnt have the repository element\r\n\r\n5. This causes failures in uploading private packages to GitHub package registry\r\n\r\n...\r\n\r\nIssue doesnt repro when running pack from VS or running pack on the csproj\r\n"},{"Id":"11447608012","Type":"IssuesEvent","CreatedAt":"2020-02-06T00:20:56","Actor":"rrelyea","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8668","RelatedDescription":"Closed issue \"Determine if nuget source name is case-sensitive and ensure disable and other uses works properly given that\" (#8668) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe): nuget.exe\r\n\r\nNuGet version (x.x.x.xxx): 5.2.0.6090\r\n\r\ndotnet.exe --version (if appropriate):\r\n\r\nVS version (if appropriate):\r\n\r\nOS version (i.e. win10 v1607 (14393.321)):  win10 v1709 (16299.1268)\r\n\r\nWorked before? If so, with which NuGet version: Don't know\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. `nuget sources add -name FOO -source https://example.com`\r\n1. `nuget sources list` (confirm new source is there)\r\n1. `nuget sources disable -name foo` (nuget reports `Package source with Name: foo disabled successfully.`)\r\n1. `nuget sources list` (source is still enabled!)\r\n1. `nuget sources disable -name FOO` (nuget reports `Package source with Name: foo disabled successfully.`)\r\n1. `nuget sources list` (source is disabled)\r\n\r\nNote that `nuget sources remove -name foo` works just fine to remove a source whose name is `FOO`.\r\n\r\n"},{"Id":"11447607700","Type":"IssuesEvent","CreatedAt":"2020-02-06T00:20:53","Actor":"rrelyea","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/4126","RelatedDescription":"Closed issue \"add `dotnet nuget <add|remove|update|disable|enable|list> source` command\" (#4126) at NuGet/Home","RelatedBody":"Moving from https://github.com/dotnet/cli/issues/5053#issuecomment-267794961 on behalf of @meichtf, @emgarten.\r\n\r\n----\r\n\r\n## Steps to reproduce\r\ntry to add a username/ClearTextPassword in the dotnet restore --source command\r\n\r\n## Expected  behavior\r\nMy nuget repository requires authentication and it is not possible to add a username/ClearTextPassword in the dotnet restore command for a source\r\n\r\n## Actual behavior\r\nIt's not possible to add a username/ClearTextPassword for a ..source\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n.NET Command Line Tools (1.0.0-preview2-1-003177)\r\n\r\nProduct Information:\r\n Version:            1.0.0-preview2-1-003177\r\n Commit SHA-1 hash:  a2df9c2576\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.14393\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n"},{"Id":"11446807517","Type":"IssuesEvent","CreatedAt":"2020-02-05T22:04:45","Actor":"aperdomob","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9141","RelatedDescription":"Opened issue \"$ENV_VARIABLE doesn't work in my mac\" (#9141) at NuGet/Home","RelatedBody":"this comment\n\n&lt;!--\n            Used to specify the default location to expand packages.\n            See: nuget.exe help install\n            See: nuget.exe help update\n\n            In this example, %PACKAGEHOME% is an environment variable. On Mac/Linux,\n            use $PACKAGE_HOME/External as the value.\n        --&gt;\n\nsuggests that in mac I need to use `$` for environment variables but It doesn't work, it works with %ENV_VARIABLE%\n\n---\n#### Document Details\n\n⚠ *Do not edit this section. It is required for docs.microsoft.com ➟ GitHub issue linking.*\n\n* ID: 0ea1390e-db36-6759-3095-ebab9d546fdb\n* Version Independent ID: ca88d8c6-0515-a267-aac3-a508c54157ab\n* Content: [nuget.config File Reference](https://docs.microsoft.com/en-us/nuget/reference/nuget-config-file)\n* Content Source: [docs/reference/nuget-config-file.md](https://github.com/NuGet/docs.microsoft.com-nuget/blob/master/docs/reference/nuget-config-file.md)\n* Product: **nuget**\n* GitHub Login: @karann-msft\n* Microsoft Alias: **karann**"},{"Id":"11446801878","Type":"IssuesEvent","CreatedAt":"2020-02-05T22:03:58","Actor":"gravidThoughts","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9140","RelatedDescription":"Opened issue \"Determine Entire Configuration for a Given Path\" (#9140) at NuGet/Home","RelatedBody":"I've read all of the configuration documents, and I am pretty sure the answer is no.\r\n\r\nIs there a Nuget CLI config command that will display the **entire** resolved configuration for the directory that nuget is executing in? This includes the configuration elements that cannot be accessed with the **config** command like <packageSources>."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"10740159942","Type":"IssuesEvent","CreatedAt":"2019-10-29T17:39:29","Actor":"anangaur","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/39","RelatedDescription":"Opened issue \"Flag vulnerable packages\" (#39) at NuGet/Announcements","RelatedBody":"The spec for 'Flagging vulnerable packages' is ready for **review**:\r\n\r\n|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Flag vulnerable packages](https://github.com/NuGet/Home/wiki/Flag-vulnerable-packages) | https://github.com/nuget/home/issues/8087|"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1219766107269025792","CreatedAt":"2020-01-21T23:37:56+00:00","UserScreenname":"nuget","Text":"https://t.co/F9kiKfdOWi package publishing is currently facing technical difficulty and new packages pushed to… https://t.co/4E67LHHnbI","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":2,"FavoriteCount":2,"RawContent":null},{"Id":"1204812404573392897","CreatedAt":"2019-12-11T17:17:16+00:00","UserScreenname":"nuget","Text":"We are currently experiencing CDN issues in a few geographies.  https://t.co/F9kiKfdOWi services like package resto… https://t.co/0ZVMeF11CW","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":10,"FavoriteCount":8,"RawContent":null},{"Id":"1190360390980395008","CreatedAt":"2019-11-01T20:10:07+00:00","UserScreenname":"nuget","Text":"The issue with the publishing pipeline has been resolved and packages are now being published normally. https://t.co/NdK8mVk7UF","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":3,"FavoriteCount":0,"RawContent":null},{"Id":"1190331936293572608","CreatedAt":"2019-11-01T18:17:03+00:00","UserScreenname":"nuget","Text":"We are experiencing an issue with our publishing pipeline causing a delay in the publishing of new packages. We are… https://t.co/gM91QcE1Zc","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":5,"FavoriteCount":3,"RawContent":null}]}},"RunOn":"2020-02-06T05:30:45.0284332Z","RunDurationInMilliseconds":1905}