{"Data":{"Blog":{"FeedItems":[{"Title":"Get started building .NET web apps that run in the browser with Blazor","PublishedOn":"2018-03-22T17:00:26+00:00","CommentsCount":17,"FacebookCount":0,"Summary":"Today we released our first public preview of Blazor, a new experimental .NET web framework using C#/Razor and HTML that runs in the browser with WebAssembly. Blazor enables full stack web development...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/22/get-started-building-net-web-apps-in-the-browser-with-blazor/","RawContent":null},{"Title":"ASP.NET Core manageability and Application Insights improvements","PublishedOn":"2018-03-22T14:12:38+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"There are many great investments on the ASP.NET Core 2.1 roadmap. These investments make ASP.NET Core applications easier to write, host, test, and make security and standards compliant. This blog...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/22/asp-net-core-manageability-and-application-insights-improvements/","RawContent":null},{"Title":"Announcing Preview 1 of ASP.NET MVC 5.2.5, Web API 5.2.5, and Web Pages 3.2.5","PublishedOn":"2018-03-19T22:00:27+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today we released Preview 1 of ASP.NET MVC 5.2.5, Web API 5.2.5, and Web Pages 3.2.5 on NuGet. This is a patch release that contains only bug fixes. You can find the full list of bug fixes for this...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/19/announcing-preview-1-of-asp-net-mvc-5-2-5-web-api-5-2-5-and-web-pages-3-2-5/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Functional testing of MVC applications","PublishedOn":"2018-03-05T18:30:28+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For ASP.NET Core 2.1 we have created a new package, Microsoft.AspNetCore.Mvc.Testing, to help streamline in-memory end-to-end testing of MVC applications using TestServer. This package takes care of...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/05/asp-net-core-2-1-0-preview1-functional-testing-of-mvc-applications/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: GDPR enhancements","PublishedOn":"2018-03-04T19:21:40+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"2018 sees the introduction of the General Data Protection Regulation, an EU framework to allow EU citizens to control, correct and delete their data, no matter where in the word it is held. In ASP.NET...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/04/asp-net-core-2-1-0-preview1-gdpr-enhancements/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Introducing Identity UI as a library","PublishedOn":"2018-03-02T19:00:19+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"ASP.NET Core has historically provided project templates with code for setting up ASP.NET Core Identity, which enables support for identity related features like user registration, login, account...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/02/aspnetcore-2-1-identity-ui/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Razor UI in class libraries","PublishedOn":"2018-03-01T18:00:26+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"One frequently requested scenario that ASP.NET Core 2.1 improves is building UI in reusable class libraries. With ASP.NET Core 2.1 you can package your Razor views and pages (.cshtml files) along with...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/01/asp-net-core-2-1-razor-ui-in-class-libraries/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Improvements to IIS hosting","PublishedOn":"2018-03-01T01:56:02+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"The ASP.NET Core Module (ANCM) is a global IIS module that has been responsible for proxying requests over from IIS to your backend ASP.NET Core application running Kestrel. Since 2.0 we have been...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/28/asp-net-core-2-1-0-preview1-improvements-to-iis-hosting/","RawContent":null},{"Title":"ASP.NET Core 2.1-preview1: Introducing HTTPClient factory","PublishedOn":"2018-03-01T01:47:41+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"HttpClient factory is an opinionated factory for creating HttpClient instances to be used in your applications. It is designed to: Provide a central location for naming and configuring logical...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/28/asp-net-core-2-1-preview1-introducing-httpclient-factory/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Improvements for building Web APIs","PublishedOn":"2018-02-27T23:30:07+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"ASP.NET Core 2.1 adds a number of features that make it easier and more convenient to build Web APIs. These features include Web API controller specific conventions, more robust input processing and...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/27/asp-net-core-2-1-web-apis/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7443576004","Type":"IssuesEvent","CreatedAt":"2018-03-27T19:32:33","Actor":"ajaybhargavb","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/2363","RelatedDescription":"Closed issue \"Review and Update BaseView\" (#2363) at aspnet/Home","RelatedBody":"_From @rynowak on Tuesday, June 6, 2017 11:34:06 PM_\r\n\r\nWe made some changes to Razor codegen that could impact this class. We need to review this and determine what should be adjusted.\r\n\r\n/cc @ajaybhargavb \r\n\r\n_Copied from original issue: aspnet/Common#236_"},{"Id":"7443371341","Type":"IssuesEvent","CreatedAt":"2018-03-27T18:51:53","Actor":"brownbl1","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/3006","RelatedDescription":"Closed issue \"Missing assembly reference after adding net471 target\" (#3006) at aspnet/Home","RelatedBody":"I started a .net core web application using `dotnet new` and then ran into a need to include a library that targets `net471`. \r\n\r\nI changed `<Framework>` to `<Frameworks>` and added `net471`. \r\n\r\n`dotnet restore` works well, but `dotnet run` results in build errors like:\r\n`error CS0234: The type or namespace name 'AspNetCore' does not exist in the namespace 'Microsoft' (are you missing an assembly reference?)`\r\n\r\nI've examined the docs related to targeting multiple versions but this was as far as I was able to get. What might I be missing?\r\n\r\nThanks.\r\n\r\nMy csproj file looks like: \r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFrameworks>netcoreapp2.0;net471</TargetFrameworks>\r\n    <TypeScriptCompileBlocked>true</TypeScriptCompileBlocked>\r\n    <TypeScriptToolsVersion>Latest</TypeScriptToolsVersion>\r\n    <IsPackable>false</IsPackable>\r\n  </PropertyGroup>\r\n  <ItemGroup Condition=\" '$(TargetFramework)' == 'net471' \">\r\n    <PackageReference Include=\"MyPackage\" Version=\"2017.11.1.1\" />\r\n  </ItemGroup>\r\n  <ItemGroup Condition=\" '$(TargetFramework)' == 'netcoreapp2.0' \">\r\n    <PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.3\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Authentication.WsFederation\" Version=\"2.0.3\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Server.Kestrel.Https\" Version=\"2.0.1\" />\r\n    <PackageReference Include=\"Serilog.AspNetCore\" Version=\"2.1.0\" />\r\n    <PackageReference Include=\"Serilog.Sinks.Seq\" Version=\"4.0.0\" />\r\n    <PackageReference Include=\"Serilog.Exceptions\" Version=\"3.0.0\" />\r\n    <PackageReference Include=\"Destructurama.JsonNet\" Version=\"1.2.0\" />\r\n    <PackageReference Include=\"Serilog.Enrichers.Environment\" Version=\"2.1.2\" />\r\n    <PackageReference Include=\"Serilog.Sinks.Console\" Version=\"3.1.1\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.VisualStudio.Web.CodeGeneration.Tools\" Version=\"2.0.1\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <Content Remove=\"ClientApp\\**\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <Folder Include=\"wwwroot\\dist\\\" />\r\n  </ItemGroup>\r\n  <Target Name=\"DebugRunWebpack\" BeforeTargets=\"Build\" Condition=\" '$(Configuration)' == 'Debug' And !Exists('wwwroot\\dist') \">\r\n    <Exec Command=\"node --version\" ContinueOnError=\"true\">\r\n      <Output TaskParameter=\"ExitCode\" PropertyName=\"ErrorCode\" />\r\n    </Exec>\r\n    <Exec Command=\"node node_modules/webpack/bin/webpack.js --config webpack.config.vendor.js\" />\r\n    <Exec Command=\"node node_modules/webpack/bin/webpack.js\" />\r\n    <Error Condition=\"'$(ErrorCode)' != '0'\" Text=\"Node.js is required to build and run this project. To continue, please install Node.js from https://nodejs.org/, and then restart your command prompt or IDE.\" />\r\n    <Message Importance=\"high\" Text=\"Performing first-run Webpack build...\" />\r\n  </Target>\r\n  <Target Name=\"PublishRunWebpack\" AfterTargets=\"ComputeFilesToPublish\">\r\n    <Exec Command=\"npm install\" />\r\n    <Exec Command=\"node node_modules/webpack/bin/webpack.js --config webpack.config.vendor.js --env.prod\" />\r\n    <Exec Command=\"node node_modules/webpack/bin/webpack.js --env.prod\" />\r\n    <ItemGroup>\r\n      <DistFiles Include=\"wwwroot\\dist\\**; ClientApp\\dist\\**\" />\r\n      <ResolvedFileToPublish Include=\"@(DistFiles->'%(FullPath)')\" Exclude=\"@(ResolvedFileToPublish)\">\r\n        <RelativePath>%(DistFiles.Identity)</RelativePath>\r\n        <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>\r\n      </ResolvedFileToPublish>\r\n    </ItemGroup>\r\n  </Target>\r\n</Project>\r\n```"}],"ResultType":"GitHubEvent"},"SignalR":{"Events":[{"Id":"7451788480","Type":"PullRequestEvent","CreatedAt":"2018-03-29T05:19:03","Actor":"BrennanConroy","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/pull/1763","RelatedDescription":"Opened pull request \"[WIP] Add detailed error option\" (#1763) at aspnet/SignalR","RelatedBody":"#1614\r\n\r\nOpening now to solicit early feedback\r\n\r\nNeed to fill in the exception strings"},{"Id":"7451762805","Type":"PullRequestEvent","CreatedAt":"2018-03-29T05:08:18","Actor":"JamesNK","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/pull/1762","RelatedDescription":"Opened pull request \"Make HubConnection write messages directly to the PipeWriter\" (#1762) at aspnet/SignalR","RelatedBody":"Follow up on https://github.com/aspnet/SignalR/issues/1633, possible now that the connection refactor is done."},{"Id":"7451746293","Type":"PullRequestEvent","CreatedAt":"2018-03-29T05:01:23","Actor":"BrennanConroy","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/SignalR/pull/1761","RelatedDescription":"Merged pull request \"Upgrade deps\" (#1761) at aspnet/SignalR","RelatedBody":"@davidfowl "},{"Id":"7451743073","Type":"PullRequestEvent","CreatedAt":"2018-03-29T05:00:15","Actor":"BrennanConroy","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/pull/1761","RelatedDescription":"Opened pull request \"Upgrade deps\" (#1761) at aspnet/SignalR","RelatedBody":"@davidfowl "},{"Id":"7451725243","Type":"IssuesEvent","CreatedAt":"2018-03-29T04:52:30","Actor":"JamesNK","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/SignalR/issues/1657","RelatedDescription":"Closed issue \"Optimize reading handshake request and response JSON\" (#1657) at aspnet/SignalR","RelatedBody":"Handshake request and response JSON is loaded into a `JObject` when read.\r\n\r\nCould save cycles and allocations by reading JSON with `JsonTextReader` like JSON protocol now does."},{"Id":"7451723485","Type":"PullRequestEvent","CreatedAt":"2018-03-29T04:51:42","Actor":"JamesNK","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/SignalR/pull/1760","RelatedDescription":"Merged pull request \"Handshake and negotiation optimization (#1731)\" (#1760) at aspnet/SignalR","RelatedBody":""},{"Id":"7451722379","Type":"PullRequestEvent","CreatedAt":"2018-03-29T04:51:11","Actor":"JamesNK","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/pull/1760","RelatedDescription":"Opened pull request \"Handshake and negotiation optimization (#1731)\" (#1760) at aspnet/SignalR","RelatedBody":""},{"Id":"7451721532","Type":"PullRequestEvent","CreatedAt":"2018-03-29T04:50:47","Actor":"JamesNK","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/SignalR/pull/1731","RelatedDescription":"Merged pull request \"Handshake and negotiation optimization\" (#1731) at aspnet/SignalR","RelatedBody":"https://github.com/aspnet/SignalR/issues/1657"},{"Id":"7451709091","Type":"IssuesEvent","CreatedAt":"2018-03-29T04:45:16","Actor":"JamesNK","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/SignalR/issues/1759","RelatedDescription":"Closed issue \"Failed disposing connection\" (#1759) at aspnet/SignalR","RelatedBody":"```\r\nSystem.NullReferenceException: Object reference not set to an instance of an object.\r\n   at Microsoft.AspNetCore.Sockets.HttpConnectionContext.DisposeAsync() in C:\\Development\\Source\\SignalR\\src\\Microsoft.AspNetCore.Sockets.Http\\HttpConnectionContext.cs:line 152\r\n   at Microsoft.AspNetCore.Sockets.HttpConnectionManager.DisposeAndRemoveAsync(HttpConnectionContext connection) in C:\\Development\\Source\\SignalR\\src\\Microsoft.AspNetCore.Sockets.Http\\HttpConnectionManager.cs:line 228\r\n```\r\n\r\nRepo:\r\n1. Run browser function tests multiple times from different browser windows\r\n2. Attach a debugger to the server\r\n3. Break points in all the `HttpConnectionManager.DisposeAndRemoveAsync` catches\r\n4. Ctrl+C to kill the server process\r\n5. Error is raised to breakpoint\r\n\r\nThe actual `NullReferenceException` is line 152 because `Transport` is null. `Application` is also null. See screenshot below.\r\n\r\nQuestion is why does this `HttpConnectionContext` instance hang around until the server is killed? Memory leak caused by waiting forever on a lock?\r\n\r\nIf having connection contexts hang around is intentional, need to make `DisposeAsync` check for null.\r\n\r\n![image](https://user-images.githubusercontent.com/303201/38065498-1e818922-3360-11e8-9099-84df354e13b0.png)\r\n"}],"ResultType":"GitHubEvent"},"Mvc":{"Events":[{"Id":"7451529840","Type":"PullRequestEvent","CreatedAt":"2018-03-29T03:31:39","Actor":"rynowak","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/pull/7568","RelatedDescription":"Opened pull request \"Fix #7558 infer [FromRoute] with parameter in ANY route\" (#7568) at aspnet/Mvc","RelatedBody":"This changes the logic for when we infer [FromRoute] on an action\r\nparameter from *ALL* to *ANY*.\r\n\r\nThis means that if a parameter occurs in any route on an ApiController,\r\nwe will treat it as [FromRoute]. We think this is the best decision\r\nbecause it's less ambiguous. If a parameter appears in a route, it won't\r\nbe eligible to be bound from query. I think that's good.\r\n\r\nIf for some reason you want this kind of behavior (route or query) then\r\nwe suggest breaking up the actions. This isn't very documentation\r\nfriendly (swagger) so we don't suggest it."},{"Id":"7450487856","Type":"IssuesEvent","CreatedAt":"2018-03-28T21:44:39","Actor":"mkArtakMSFT","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7489","RelatedDescription":"Closed issue \"Model binding accesses read-only properties in post-back\" (#7489) at aspnet/Mvc","RelatedBody":"I have a simple edit model, which contains a few computed/read-only properties. When posting to a controller method, the model validation engine accesses these properties, causing an exception.\r\n\r\nHowever, it does not make sense to access or attempt to validate a read-only property.\r\n\r\nAdditionally, all properties are marked with [BindNever], which seems to have no effect on this behavior.\r\n\r\nThe controller method takes a single parameter (the edit model) decorated with [FromForm].\r\n\r\nUsing 2.1.0-preview2-30355."},{"Id":"7450463111","Type":"IssuesEvent","CreatedAt":"2018-03-28T21:38:53","Actor":"mkArtakMSFT","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7527","RelatedDescription":"Closed issue \"Nuget Microsoft.AspNetCore.Mvc.Core detected package downgrade\" (#7527) at aspnet/Mvc","RelatedBody":"I have a library project called WebApp.Auth.Sso.Abstractions with this as the csproj:\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netstandard2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Mvc.Core\" Version=\"2.0.3\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\nAnd when I run `dotnet restore` it works but when I run `dotnet restore -r win81-x64` I get this error:\r\n\r\n```\r\nError\tNU1605\tDetected package downgrade: System.IO.FileSystem.Primitives from 4.3.0 to 4.0.1. Reference the package directly from the project to select a different version.\r\n\r\nWebApp.Auth.Sso.Abstractions -> Microsoft.AspNetCore.Mvc.Core 2.0.3 -> Microsoft.Extensions.DependencyModel 2.0.3 -> Microsoft.DotNet.PlatformAbstractions 2.0.3 -> System.IO.FileSystem 4.0.1 -> runtime.win.System.IO.FileSystem 4.3.0 -> System.IO.FileSystem.Primitives (>= 4.3.0)\r\n\r\nWebApp.Auth.Sso.Abstractions -> Microsoft.AspNetCore.Mvc.Core 2.0.3 -> Microsoft.Extensions.DependencyModel 2.0.3 -> Microsoft.DotNet.PlatformAbstractions 2.0.3 -> System.IO.FileSystem 4.0.1 -> System.IO.FileSystem.Primitives (>= 4.0.1)\r\n```"}],"ResultType":"GitHubEvent"},"Identity":{"Events":[{"Id":"7450981038","Type":"PullRequestEvent","CreatedAt":"2018-03-29T00:07:15","Actor":"ajcvickers","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Identity/pull/1671","RelatedDescription":"Merged pull request \"Update README.md\" (#1671) at aspnet/Identity","RelatedBody":"Hi guys,\r\nToday I propose you Aguacongas.Identy.Redis, my implemention of APS.NET Identity Redis Provider"},{"Id":"7450389550","Type":"PullRequestEvent","CreatedAt":"2018-03-28T21:23:11","Actor":"kichalla","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/pull/1719","RelatedDescription":"Opened pull request \"[Design][Fixes #1690] AddDefaultUI() throws when using IdentityUser<T>\" (#1719) at aspnet/Identity","RelatedBody":""},{"Id":"7450284137","Type":"IssuesEvent","CreatedAt":"2018-03-28T21:01:38","Actor":"Phrohdoh","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1718","RelatedDescription":"Opened issue \"Attempting to override a view included in the default UI results in incorrect anchor tags\" (#1718) at aspnet/Identity","RelatedBody":"I have scaffolded out an ASP.NET Core MVC project with Individual auth.\r\n\r\nThe below code-blocks are unaltered from the templated code and markup.\r\n\r\n#### _LoginPartial.cshtml\r\n```html\r\n        <a asp-area=\"Identity\" asp-page=\"/Account/Register\">Register</a>\r\n        <a asp-area=\"Identity\" asp-page=\"/Account/Login\">Login</a>\r\n```\r\n\r\n#### Startup.cs\r\n```csharp\r\n            services.AddIdentity<IdentityUser, IdentityRole>(options => options.Stores.MaxLengthForKeys = 128)\r\n                .AddEntityFrameworkStores<ApplicationDbContext>()\r\n                .AddDefaultUI()\r\n                .AddDefaultTokenProviders();\r\n```\r\n\r\nIf I create `Areas/Identity/Pages/Account/Register.cshtml` in an attempt to provide a custom registration UI the target of the `Register` anchor above is set to the *current route*.\r\n\r\nWhat that means is if you are on the About view and click `Register` you are taken to `About`.\r\n\r\nSame for Contact, Login, and any other page.\r\n\r\n---\r\n\r\nDoes literature exist to teach developers to provide custom UIs but keep the shipped logic?"},{"Id":"7450178186","Type":"IssuesEvent","CreatedAt":"2018-03-28T20:40:40","Actor":"westerncj","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/issues/1717","RelatedDescription":"Closed issue \"Can't access the AddToRolesAsync method\" (#1717) at aspnet/Identity","RelatedBody":"Is there a way to access the `AddToRolesAsync` method? I can currently only access `AddToRoleAsync`."}],"ResultType":"GitHubEvent"},"Kestrel":{"Events":[{"Id":"7450722510","Type":"IssuesEvent","CreatedAt":"2018-03-28T22:44:45","Actor":"lkfr","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2441","RelatedDescription":"Opened issue \"Kestrel randomly stops responding\" (#2441) at aspnet/KestrelHttpServer","RelatedBody":"We are facing a Kestrel-related issue with an ASP.NET Core 2.0 app running in an Azure App Service.\r\nThe server suddenly stops responding and we see a huge number of HTTP 502.3 errors.\r\nThe problem occurs a few times a day (during peak hours) and it generally lasts about 1 minute (according to error logs) before everything gets back to normal, but we have experienced situations where things get worse and the only way to solve the problem is to completely stop the app service (we are unable to get Azure to restart the app on the concerned instance).\r\n\r\nWe have looked at a few metrics before the problem occurs and CPU and memory usage are OK, network connections look fine. App Insight does not report anything wrong in the app and the only thing we see in the app logs is the following entry that is created every time the problem happens: Application 'MACHINE/WEBROOT/APPHOST/X' started process 'xyz' successfully and is listening on port 'xyz'\r\n\r\nIt should be noted that our app has a lot of HTTP dependencies and we rely heavily on HttpClient.\r\nHowever we do use only one instance of HttpClient and we think we got the calls right:\r\n\r\nUsage 1\r\n```\r\nvar client = HttpGateway.Client;\r\nstring xml = await client.GetStringAsync(url);\r\n```\r\n\r\nUsage 2\r\n```\r\nusing (HttpRequestMessage request = CreateRequestMessage())\r\n{\r\n\tvar client = HttpGateway.Client;\r\n\tusing (var response = await client.SendAsync(request, HttpCompletionOption.ResponseHeadersRead, context.RequestAborted))\r\n\t{\r\n\t\t// Check response headers\r\n\t\r\n\t\t// Get response content\r\n\t\tstring content = await response.Content.ReadAsStringAsync();\r\n\t\t\r\n\t\t// More processing\r\n\t}\r\n}\r\n```\r\nWe have not looked at `ServicePointManager.DefaultConnectionLimit` but it seems that `WinHttpHandler.MaxConnectionsPerServer` is now used and has a default value of `int.MaxValue`.\r\n\r\nHow can we proceed to understand exactly what is going on and to solve this issue? Needless to say we are fully committed on this as this is a really serious issue in our mind.\r\n\r\nWould stdout logging in Kestrel enable us to see the cause of the problem when it occurs? Which log level should we set (we want to keep the log size under control as we have a huge number of requests)?\r\n\r\nAny help would be really appreciated.\r\n\r\n\r\n\r\n"},{"Id":"7449926285","Type":"IssuesEvent","CreatedAt":"2018-03-28T19:51:17","Actor":"jkotalik","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2440","RelatedDescription":"Opened issue \"Make Kestrel TryAdd when adding it's IServer implementation\" (#2440) at aspnet/KestrelHttpServer","RelatedBody":"For ANCM in-proc to work with scenarios like:\r\n```c#\r\nWebHostBuilder.CreateDefaultWebHostBuilder() // which calls UseKestrel() and UseIISIntegration();\r\n    .UseKestrel();\r\n```\r\nwe need the call to UseIISIntegration to always add it's IServer implementation rather than Kestrel overriding it. \r\n\r\nAs we want out-of-proc and in-proc to work without code changes, we will need [Kestrel to TryAdd it's server implementation](https://github.com/aspnet/KestrelHttpServer/blob/dev/src/Kestrel/WebHostBuilderKestrelExtensions.cs#L35).\r\n\r\ncc/ @davidfowl @pakrym @Tratcher "}],"ResultType":"GitHubEvent"},"Razor":{"Events":[{"Id":"7451537263","Type":"IssuesEvent","CreatedAt":"2018-03-29T03:34:15","Actor":"rynowak","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Razor/issues/1809","RelatedDescription":"Closed issue \"Improve support for precompilation of razor views in class libraries (embedded ui)\" (#1809) at aspnet/Razor","RelatedBody":"_From @evil-shrike on October 17, 2017 15:31_\n\nAs continue of https://github.com/aspnet/MvcPrecompilation/issues/187\r\n\r\nThe problem: I need a class library with embedded UI. \r\nCurrently it's hard implement such setup when a class library in a solution contains pre-compilable razor views. Lloading views from embedded resource is another option and it works fine. \r\n\r\nAt the end of the mentioned discussion (#187) there was posted a link to blog post about how to implement embedded UI - https://dzone.com/articles/self-contained-ui-running-one-aspnet-core-mvc-site \r\nIt seems to work well. But looks hacky, too much cleaver things should be done in csproj. Another problem it's not documented in official docs.\r\n\r\nSo this issue is an suggestion to have more simplified approach for \"embedded UI\", i.e. keeping razor views in class libraries and automatically compile **and** deploy them.\r\n\r\nSome nuances which should be elaborated:\r\n* a solution with app and lib both can contain views and identical routes (like \"Home/Index\")\r\n* solution should start with F5/CtrlF5 in VS (views should be compiled and deploy)\r\n* on deployment assemblies with pre-compiled views should be deployed correctly\r\n* ideally there shouldn't be required to make a library project \"runnable\" (set `Sdk=\"Microsoft.NET.Sdk.Web\"` and declare `static Main` method) but it's not critical indeed, at least it should be documented\r\n\r\nCurrently (aspnetcore2.0) we have to do the following (thanks to @dasMulli for describing it in this comment - https://github.com/aspnet/MVCPrecompilation/issues/71#issuecomment-282494937)\r\n\r\n1.\r\n```\r\n\t\t<MvcRazorCompileOnPublish>true</MvcRazorCompileOnPublish>\r\n```\r\n2. \r\n```\r\n\t<Target Name=\"SetMvcRazorOutputPath\">\r\n\t\t<PropertyGroup>\r\n\t\t\t<MvcRazorOutputPath>$(OutputPath)</MvcRazorOutputPath>\r\n\t\t</PropertyGroup>\r\n\t</Target>\r\n\t<Target Name=\"_MvcRazorPrecompileOnBuild\" DependsOnTargets=\"SetMvcRazorOutputPath;MvcRazorPrecompile\" AfterTargets=\"Build\" Condition=\" '$(IsCrossTargetingBuild)' != 'true' \" />\r\n\t<Target Name=\"IncludePrecompiledViewsInPublishOutput\" DependsOnTargets=\"_MvcRazorPrecompileOnBuild\" BeforeTargets=\"PrepareForPublish\" Condition=\" '$(IsCrossTargetingBuild)' != 'true' \">\r\n\t\t<ItemGroup>\r\n\t\t\t<_PrecompiledViewsOutput Include=\"$(MvcRazorOutputPath)$(MSBuildProjectName).PrecompiledViews.dll\" />\r\n\t\t\t<_PrecompiledViewsOutput Include=\"$(MvcRazorOutputPath)$(MSBuildProjectName).PrecompiledViews.pdb\" />\r\n\t\t\t<ContentWithTargetPath Include=\"@(_PrecompiledViewsOutput->'%(FullPath)')\" RelativePath=\"%(_PrecompiledViewsOutput.Identity)\" TargetPath=\"%(_PrecompiledViewsOutput.Filename)%(_PrecompiledViewsOutput.Extension)\" CopyToPublishDirectory=\"PreserveNewest\" />\r\n\t\t</ItemGroup>\r\n\t</Target>\r\n```\r\n\r\nOff the top of my head I'd suggest to introduce `MvcRazorCompile=true`.\n\n_Copied from original issue: aspnet/MvcPrecompilation#214_"},{"Id":"7451195237","Type":"IssuesEvent","CreatedAt":"2018-03-29T01:27:45","Actor":"ajaybhargavb","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Razor/issues/2226","RelatedDescription":"Closed issue \"Handle Mutex creation failures gracefully\" (#2226) at aspnet/Razor","RelatedBody":"This issue https://github.com/dotnet/roslyn/issues/24124 causes the Mutex constructor to throw on Linux causing the Roslyn build server to fail without falling back to the slow process. We need to account for that in Razor build server as well."},{"Id":"7451089740","Type":"IssuesEvent","CreatedAt":"2018-03-29T00:48:07","Actor":"ajaybhargavb","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/issues/2230","RelatedDescription":"Opened issue \"Shutdown command needs to compute the correct default pipe name\" (#2230) at aspnet/Razor","RelatedBody":"We recently changed the server to be created using the pipe name computed from the path to `rzc.dll` https://github.com/aspnet/Razor/issues/2216. But when the shutdown command is directly invoked, we don't pass in the tool assembly path [here](https://github.com/aspnet/Razor/blob/dev/src/Microsoft.AspNetCore.Razor.Tools/ShutdownCommand.cs#L30). It should instead pass in the tool assembly path to `ComputeDefault()`.\r\n\r\ncc @rynowak "},{"Id":"7450526277","Type":"IssuesEvent","CreatedAt":"2018-03-28T21:53:47","Actor":"mkArtakMSFT","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Razor/issues/2158","RelatedDescription":"Closed issue \"Tag helper design question\" (#2158) at aspnet/Razor","RelatedBody":"We're not sure how tag helpers are intented to be used for our scenario, we'd be glad if you could provide us with some guideline :-)\r\n\r\nScenario: we want a submit-button tag helper:\r\n\r\n    <submit-button fx-style=\"primary\"/>\r\n    // converted by our tag helper to the following HTML:\r\n    <button type=\"submit\" class=\"submit-button-primary\" [...morestuffhere...] />\r\n\r\nHowever, this design has the shortcoming that any other tag helper that registers for all `button` tag helpers is not run because they haven't registered for the `submit-button` tag.\r\n\r\nIs it now:\r\n\r\na) better to set a very low order on the submit-button tag helper so that the tag is already of type `button` when other tag helpers are run\r\n\r\nor \r\n\r\nb) don't use \"own-tag-name\"-tag-helpers and instead register our tag helper for `button` as well and fall back to the following (not-so-great) Razor HTML:\r\n\r\n    <button fx-type=\"submit\" fx-style=\"primary\"/>\r\n\r\nWhat's your take on this?"},{"Id":"7450497527","Type":"IssuesEvent","CreatedAt":"2018-03-28T21:46:49","Actor":"mkArtakMSFT","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Razor/issues/2177","RelatedDescription":"Closed issue \"Generate AssemblyDescriptionAttribute by default in RazorSdk\" (#2177) at aspnet/Razor","RelatedBody":"Microsoft.NET.Sdk generates an `AssemblyDescriptionAttribute` using the `Description` property. We should do the same in the Razor.Sdk with an option to override the value similar to AssemblyTitleAttribute."}],"ResultType":"GitHubEvent"},"Templates":{"Events":[],"ResultType":"GitHubEvent"},"Tooling":{"Events":[{"Id":"7439234583","Type":"IssuesEvent","CreatedAt":"2018-03-27T05:23:09","Actor":"barrytang","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1069","RelatedDescription":"Closed issue \"EntityFramework migrations not available to be applied during publish\" (#1069) at aspnet/Tooling","RelatedBody":"Workaround does not work for me. Apply migration missing in any case. after rebuilt, reload, restart etc"},{"Id":"7438189808","Type":"IssuesEvent","CreatedAt":"2018-03-26T23:00:08","Actor":"dvdobrovolskiy","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1069","RelatedDescription":"Opened issue \"EntityFramework migrations not available to be applied during publish\" (#1069) at aspnet/Tooling","RelatedBody":"Workaround does not work for me. Apply migration missing in any case. after rebuilt, reload, restart etc"},{"Id":"7416019717","Type":"IssuesEvent","CreatedAt":"2018-03-21T22:57:29","Actor":"snebjorn","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/823","RelatedDescription":"Closed issue \"Make tooling support splitting asp.net and bootstrapping in different projects (onion architecture)\" (#823) at aspnet/Tooling","RelatedBody":"I'd like to see better tooling support for a more onion architecture like solution structure.\n\nFor instance\n- Solution\n  - Core (business logic, domain model, etc)\n  - Infrastructure.EntityFramework (DAL)\n  - Presentation.ASPNET (MVC or WebApi)\n  - Bootstrapper (Program.cs and Startup.cs)\n\nSo basically I just moved Program.cs and Startup.cs to another project. This is important because according to the onion architecture Presentation.ASPNET should not have references to Entity Framework.\n\nIf I do this today I loose the \"IIS Express\" run button and I cannot publish via wed deploy in the way I'm used to. Plus a ton of other issues.\n\nWould be sweet if there was better support for this setup :)\n"},{"Id":"7381313128","Type":"IssuesEvent","CreatedAt":"2018-03-14T22:19:23","Actor":"AngelosP","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/240","RelatedDescription":"Closed issue \"Support debugging of JS executed with EdgeJS in VS\" (#240) at aspnet/Tooling","RelatedBody":"We would like to do the server side HTML rendering with ReactJS in our ASP.NET application. This works with EdgeJS, but there is currently no way to debug the JS code in VS. \n\nIt would be nice if this would work and we wouldn't need node-inspector for this.\n\nhttps://github.com/tjanczuk/edge/issues/316\n"},{"Id":"7376247861","Type":"IssuesEvent","CreatedAt":"2018-03-14T05:33:19","Actor":"barrytang","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1068","RelatedDescription":"Closed issue \"Switch between Razor Page View and Code Behind\" (#1068) at aspnet/Tooling","RelatedBody":"In the old web forms you were able to quickly switch between the ASPX file and the code behind using F7/Shift F7 or going View->Code or View->Designer. It would be useful if this was possible with Razor Pages in aspnet core projects?\r\n"},{"Id":"7372052889","Type":"IssuesEvent","CreatedAt":"2018-03-13T13:46:08","Actor":"TheConservativeCoder","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1068","RelatedDescription":"Opened issue \"Switch between Razor Page View and Code Behind\" (#1068) at aspnet/Tooling","RelatedBody":"In the old web forms you were able to quickly switch between the ASPX file and the code behind using F7/Shift F7 or going View->Code or View->Designer. It would be useful if this was possible with Razor Pages in aspnet core projects?\r\n"},{"Id":"7369868082","Type":"IssuesEvent","CreatedAt":"2018-03-13T05:33:42","Actor":"barrytang","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1067","RelatedDescription":"Closed issue \"Support dotnet watch in launchSettings.json\" (#1067) at aspnet/Tooling","RelatedBody":"I used to be able to use `dotnet watch` in Visual Studio by adding the following section to `launchSettings.json` and starting the project without debugging using CTRL + F5.\r\n\r\n```\r\n    \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    },\r\n```\r\n\r\nThis used to work in ASP.NET Core 1.1 but no longer does. According to https://github.com/aspnet/DotNetTools/issues/404 the new format for ASP.NET Core 2.0 is:\r\n\r\n```\r\n   \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"workingDirectory\": \"C:\\\\Users\\\\namc\\\\source\\\\repos\\\\WebApplication2\\\\WebApplication2\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    }\r\n```\r\n\r\nThe problem with this is the hard coded `executablePath` which is Windows specific and the `workingDirectory` which is specific to wherever I did a Git clone on my local machine."},{"Id":"7364725434","Type":"IssuesEvent","CreatedAt":"2018-03-12T10:19:58","Actor":"RehanSaeed","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1067","RelatedDescription":"Opened issue \"Support dotnet watch in launchSettings.json\" (#1067) at aspnet/Tooling","RelatedBody":"I used to be able to use `dotnet watch` in Visual Studio by adding the following section to `launchSettings.json` and starting the project without debugging using CTRL + F5.\r\n\r\n```\r\n    \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    },\r\n```\r\n\r\nThis used to work in ASP.NET Core 1.1 but no longer does. According to https://github.com/aspnet/DotNetTools/issues/404 the new format for ASP.NET Core 2.0 is:\r\n\r\n```\r\n   \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"workingDirectory\": \"C:\\\\Users\\\\namc\\\\source\\\\repos\\\\WebApplication2\\\\WebApplication2\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    }\r\n```\r\n\r\nThe problem with this is the hard coded `executablePath` which is Windows specific and the `workingDirectory` which is specific to wherever I did a Git clone on my local machine."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7390961156","Type":"IssuesEvent","CreatedAt":"2018-03-16T14:09:54","Actor":"natemcmaster","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Announcements/issues/297","RelatedDescription":"Closed issue \"Model binding accesses read-only properties in post-back\" (#297) at aspnet/Announcements","RelatedBody":"I have a simple edit model, which contains a few computed/read-only properties. When posting to a controller method, the model validation engine accesses these properties, causing an exception.\r\n\r\nHowever, it does not make sense to access or attempt to validate a read-only property.\r\n\r\nAdditionally, all properties are marked with [BindNever], which seems to have no effect on this behavior.\r\n\r\nThe controller method takes a single parameter (the edit model) decorated with [FromForm].\r\n\r\nUsing 2.1.0-preview2-30355."},{"Id":"7390872316","Type":"IssuesEvent","CreatedAt":"2018-03-16T13:54:05","Actor":"mnmr","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Announcements/issues/297","RelatedDescription":"Opened issue \"Model binding accesses read-only properties in post-back\" (#297) at aspnet/Announcements","RelatedBody":"I have a simple edit model, which contains a few computed/read-only properties. When posting to a controller method, the model validation engine accesses these properties, causing an exception.\r\n\r\nHowever, it does not make sense to access or attempt to validate a read-only property.\r\n\r\nAdditionally, all properties are marked with [BindNever], which seems to have no effect on this behavior.\r\n\r\nThe controller method takes a single parameter (the edit model) decorated with [FromForm].\r\n\r\nUsing 2.1.0-preview2-30355."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"978766397814710272","CreatedAt":"2018-03-27T22:51:08+00:00","UserScreenname":"aspnet","Text":"We're live on the #ASPNET Community Standup! Join us! https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":7,"RawContent":null},{"Id":"978605317293576193","CreatedAt":"2018-03-27T12:11:03+00:00","UserScreenname":"aspnet","Text":"This will be a fun show that you won't want to miss if you're starting to lean #ASP.NET Core.  Jeff and Shayne are… https://t.co/MdzhQjXGY3","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":48,"FavoriteCount":12,"RawContent":null},{"Id":"978387927041323008","CreatedAt":"2018-03-26T21:47:14+00:00","UserScreenname":"aspnet","Text":"Join us for the weekly #ASPNET Community Standup this Tuesday at 3:45 PM Pacific / 23:45 GMT at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":9,"FavoriteCount":10,"RawContent":null},{"Id":"976910278083432449","CreatedAt":"2018-03-22T19:55:35+00:00","UserScreenname":"aspnet","Text":"Get started building .NET web apps in the browser with Blazor https://t.co/NLDaIe6hpY","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":157,"FavoriteCount":99,"RawContent":null},{"Id":"976141395114082304","CreatedAt":"2018-03-20T17:00:19+00:00","UserScreenname":"aspnet","Text":"Starting now!\n\nThe #ASPNET Community Standup with @sshirhatti showing #aspnetcore 2.1 Improvements for IIS Hosting.\n\nhttps://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":21,"FavoriteCount":10,"RawContent":null},{"Id":"975923268740833280","CreatedAt":"2018-03-20T02:33:33+00:00","UserScreenname":"aspnet","Text":"This week's #ASPNET Community Standup is on Tuesday at 10 AM  Pacific / 1800 GMT. @sshirhatti will be showing… https://t.co/qlOERhEOaw","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":19,"FavoriteCount":14,"RawContent":null},{"Id":"974312682647162880","CreatedAt":"2018-03-15T15:53:40+00:00","UserScreenname":"aspnet","Text":"Watch @csharpfritz and @shanselman in this recorded video from today's LiveStream about converting an application t… https://t.co/6QP4SCXJ3S","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":20,"FavoriteCount":4,"RawContent":null},{"Id":"974274384792866817","CreatedAt":"2018-03-15T13:21:29+00:00","UserScreenname":"aspnet","Text":"Tune in to @csharpfritz and @shanselman talking through an #ASP.NET upgrade at 10am ET / 7am PT / 14:00 UTC! https://t.co/vJe8zHT12j","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":3,"FavoriteCount":3,"RawContent":null},{"Id":"973691520728510464","CreatedAt":"2018-03-13T22:45:23+00:00","UserScreenname":"aspnet","Text":"Starting now... join us for the weekly #ASPNET Community Standup at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":10,"FavoriteCount":12,"RawContent":null},{"Id":"973553523186159621","CreatedAt":"2018-03-13T13:37:02+00:00","UserScreenname":"aspnet","Text":"Today, Jeff shows you how to use dependency injection with web forms... check it out! https://t.co/viqZ28DBrV","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":23,"FavoriteCount":9,"RawContent":null},{"Id":"973350716046626816","CreatedAt":"2018-03-13T00:11:09+00:00","UserScreenname":"aspnet","Text":"Join us for the weekly #ASPNET Community Standup this Tuesday at 3:45 PM Pacific / 23:45 GMT at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":5,"FavoriteCount":3,"RawContent":null},{"Id":"972484011556818945","CreatedAt":"2018-03-10T14:47:10+00:00","UserScreenname":"aspnet","Text":"Be sure to check out Jeff's live coding stream this morning to see more about our #ASP.NET Core 2.1 preview release. https://t.co/EtKk0fMOgU","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":23,"FavoriteCount":10,"RawContent":null},{"Id":"971084152693866496","CreatedAt":"2018-03-06T18:04:38+00:00","UserScreenname":"aspnet","Text":"We are live at https://t.co/4Ioo9jNSN2 ! Join us!","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":3,"RawContent":null},{"Id":"971075755168841728","CreatedAt":"2018-03-06T17:31:16+00:00","UserScreenname":"aspnet","Text":"This week's #ASPNET Community Standup starts at 10 AM  Pacific / 1800 GMT. Ryan Nowak will be showing Web API 2.1 f… https://t.co/OW0zeYZPyq","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":22,"FavoriteCount":10,"RawContent":null},{"Id":"970812132399890432","CreatedAt":"2018-03-06T00:03:43+00:00","UserScreenname":"aspnet","Text":"This week's #ASPNET Community Standup is a feature deep dive on Web API improvements in 2.1 with Ryan Nowak.\n\nTuesd… https://t.co/eKElaXNIR3","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":36,"FavoriteCount":11,"RawContent":null},{"Id":"969671939106025473","CreatedAt":"2018-03-02T20:33:00+00:00","UserScreenname":"aspnet","Text":"Jon the Azure AD team for their first Office Hours call on March 8. https://t.co/kVYF9JWzeZ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":10,"FavoriteCount":6,"RawContent":null}]}},"RunOn":"2018-03-29T05:30:09.7163372Z","RunDurationInMilliseconds":8348}