{"Data":{"GitHub":{"Issues":[{"Id":"466093013","IsPullRequest":true,"CreatedAt":"2019-07-10T04:30:09","Actor":"harishsk","Number":"3983","RawContent":null,"Title":"TF package size fix","State":"open","Body":"The Tensorflow tar files contain libtensorflow.so, libtensorflow.so.$(MajorVersion) and libtensorflow.so.$(Version). Of these, the first two are symlinked to the third. When these files get copied over to the nuget package, they are copied as files and not as symlinks which causes the package size to almost triple. \r\nThis fix reduces the copied files to only libtensorflow.so and libtensorflow_framework.so.$(MajorVersion).\r\n","Url":"https://github.com/dotnet/machinelearning/pull/3983","RelatedDescription":"Open PR \"TF package size fix\" (#3983)"},{"Id":"465922355","IsPullRequest":false,"CreatedAt":"2019-07-09T23:24:31","Actor":"artidoro","Number":"3980","RawContent":null,"Title":"Update API Compat after 1.2 release","State":"closed","Body":"We should update the API Compat tool after the 1.2 release. There are two updates that need to be made.\r\n\r\n1. Update the current projects to point to point to the 1.2 nugets\r\nhttps://github.com/dotnet/machinelearning/blob/78bfecb4c5999e1d675255544e2032f29c5fd621/tools-local/Microsoft.ML.StableApi/Microsoft.ML.StableApi.csproj#L10-L16\r\n\r\n2. Activate API Compat on the new stable projects (Onnx, TensorFlow and TimeSeries) and make the stable version point to the 1.2 nugets.","Url":"https://github.com/dotnet/machinelearning/issues/3980","RelatedDescription":"Closed issue \"Update API Compat after 1.2 release\" (#3980)"},{"Id":"463429776","IsPullRequest":true,"CreatedAt":"2019-07-09T23:24:31","Actor":"codemzs","Number":"3957","RawContent":null,"Title":"Increment version for application compatibility.","State":"closed","Body":"\r\nFixes #3980","Url":"https://github.com/dotnet/machinelearning/pull/3957","RelatedDescription":"Closed or merged PR \"Increment version for application compatibility.\" (#3957)"},{"Id":"465943872","IsPullRequest":false,"CreatedAt":"2019-07-09T19:18:05","Actor":"nighotatul","Number":"3982","RawContent":null,"Title":"Need More Detail regarding feature","State":"open","Body":"\r\nis feature columns consider as complex variable that means all are consider as object when processes in ml.net?\r\n\r\nex.\r\nif consider label is Purchased Bike\r\nand feature are Commute Distance,Gender,Age,Cars.\r\n\r\nso all feature columns consider as object in ml.net?\r\n\r\nmeans like all column data convert into vector array.\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/3982","RelatedDescription":"Open issue \"Need More Detail regarding feature\" (#3982)"},{"Id":"465931398","IsPullRequest":true,"CreatedAt":"2019-07-09T18:51:20","Actor":"artidoro","Number":"3981","RawContent":null,"Title":"Update Api Compat after 1.2 release","State":"closed","Body":"Fixes #3980 \r\n\r\nI update the package version number for the stable projects and I activate the API Compat tool for Onnx, TimeSeries and TensorFlow packages which became stable in the last release.  \r\n","Url":"https://github.com/dotnet/machinelearning/pull/3981","RelatedDescription":"Closed or merged PR \"Update Api Compat after 1.2 release\" (#3981)"},{"Id":"465905104","IsPullRequest":true,"CreatedAt":"2019-07-09T17:39:45","Actor":"artidoro","Number":"3979","RawContent":null,"Title":"Internalizing Static API code","State":"open","Body":"Related to #3952.\r\n\r\nIn this PR I internalize the static API code and do some clean up:\r\n1. Everything in the StaticPipe assembly is made internal\r\n2. The Static API samples have been removed\r\n3. The packaging step does not produce StaticPipe nuget\r\n\r\nNotice that this is the first of a three step process which will end up removing the static API code from the repository.","Url":"https://github.com/dotnet/machinelearning/pull/3979","RelatedDescription":"Open PR \"Internalizing Static API code\" (#3979)"},{"Id":"465852280","IsPullRequest":false,"CreatedAt":"2019-07-09T15:37:15","Actor":"famschopman","Number":"3978","RawContent":null,"Title":"AutoML, How can I identify dropped features ","State":"open","Body":"Based on the documentation AutoML automatically drops features during training where needed.\r\n\r\nIs there a way to retrieve the actual list of features that was included in the final model, e.g. determine which features were dropped and didn't improve the accuracy of the model?\r\n\r\nWhen I inspect the final model, the OutputSchema tends to always include all the features based on the initial training data.","Url":"https://github.com/dotnet/machinelearning/issues/3978","RelatedDescription":"Open issue \"AutoML, How can I identify dropped features \" (#3978)"},{"Id":"465819663","IsPullRequest":false,"CreatedAt":"2019-07-09T14:38:17","Actor":"darren-zdc","Number":"3977","RawContent":null,"Title":"[AutoML/CLI] Error in running a multiClass training for a datasets","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10\r\n- **.NET Version (eg., dotnet --info)**:  3.0.0-preview6-27804-01\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nRunning the command `mlnet auto-train --task multiclass-classification --dataset \"SampleTrainDataset.txt\" --label-column-name \"label\" --has-header true --max-exploration-time 60 -V diag` for this \r\n[dataset](https://github.com/dotnet/machinelearning/files/3373418/SampleTrainDataset.txt)\r\n- **What happened?**\r\n![image](https://user-images.githubusercontent.com/36833304/60896587-9ac34b80-a234-11e9-8804-da562ba5d093.png)\r\nThe ColumnConcatenating set only contains 4 columns. It ignores the first \"dataValue\" column for no reason. \r\n- **What did you expect?**\r\nI tried to debug it by the source code. I found out that after the `mlContext.Auto().InferColumns(SampleTrainDatasetPath, \"label\", separatorChar: '\\t')` function, the first column (\"dataValue\") went into the `IgnoredColumnNames` collection. I want to know why,,,\r\n### Source code / logs\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n[debug_log.txt](https://github.com/dotnet/machinelearning/files/3373536/debug_log.txt)\r\n","Url":"https://github.com/dotnet/machinelearning/issues/3977","RelatedDescription":"Open issue \"[AutoML/CLI] Error in running a multiClass training for a datasets\" (#3977)"},{"Id":"463719476","IsPullRequest":false,"CreatedAt":"2019-07-09T14:35:09","Actor":"Oceania2018","Number":"3962","RawContent":null,"Title":"Version mismatch for Microsoft.ML.TensorFlow.Redist","State":"closed","Body":"The NuGet shows v0.14.0. But when I download and install, it actually v0.13.1.\r\n\r\n![image](https://user-images.githubusercontent.com/1705364/60590780-811c9280-9d62-11e9-9ef9-4930a047b281.png)\r\n\r\nhttps://github.com/dotnet/machinelearning/tree/master/src/Redist/Microsoft.ML.TensorFlow.Redist.\r\n\r\n![image](https://user-images.githubusercontent.com/1705364/60590824-9ee9f780-9d62-11e9-8a7a-8f8cbdafac45.png)\r\n","Url":"https://github.com/dotnet/machinelearning/issues/3962","RelatedDescription":"Closed issue \"Version mismatch for Microsoft.ML.TensorFlow.Redist\" (#3962)"},{"Id":"465783476","IsPullRequest":false,"CreatedAt":"2019-07-09T13:32:40","Actor":"fwaris","Number":"3976","RawContent":null,"Title":"IPredictorProducing 'internal' is causing issues with F# type resolution","State":"open","Body":"I am trying to use PermutationFeatureImportance (PFI)  with F# but the F# type system is not resolving ITransformer to ISingleFeaturePredictionTransformer - which is required by PFI.\r\n\r\nI believe it is due to  IPredictorProducing (and related interfaces) being marked as \"internal\".\r\n\r\nF# supports explicit interfaces and maybe that is the reason for this issue.\r\n\r\nHere is a snippet of code that shows what I am trying to do\r\n(I am using the latest bits - v 1.2.0 at the time of this post)\r\n\r\n```F#\r\nlet mutable schema = null\r\nlet mdl = ctx.Model.Load(@\"F:\\fwaris\\data\\t\\analysis\\model_cv_LightGbmBinary.bin\", &schema) \r\nlet mdlt =  mdl :?> TransformerChain<ITransformer>\r\nlet m1 =  mdlt.LastTransformer //debugger shows it is Microsoft.ML.Data.BinaryPredictionTransformer<Microsoft.ML.IPredictorProducing<float>>\r\nlet scored = mdl.Transform(trainView)\r\nscored.Preview()\r\nctx.BinaryClassification.PermutationFeatureImportance(m1 :?> _,scored)\r\n```\r\n\r\n@dsyme \r\n","Url":"https://github.com/dotnet/machinelearning/issues/3976","RelatedDescription":"Open issue \"IPredictorProducing 'internal' is causing issues with F# type resolution\" (#3976)"},{"Id":"465620979","IsPullRequest":false,"CreatedAt":"2019-07-09T07:37:41","Actor":"wovas","Number":"3975","RawContent":null,"Title":"Add Product recommendation sample that will suggest k best related products to subject product","State":"open","Body":"Provided sample it's not quite useful in real word scenarios. As basically the problem stated as pick k best-suited products to the subject product. Using the current approach I should recalculate scoring for all universe of products from N total products. So to form recommendations for whole store I should recalculate n*n scores and sort to pick the best recommendation, which looks too compute intensive even if this is quite parallelizable computations for several thousand products it's quite expensive.\r\n\r\nAs per @wschin suggestion, we can try and implement \r\n\r\n> There are some approximated solutions (**approximated maximum inner product search and approximated nearest neighbor search usually via K-D tree**) but ML.NET doesn't support any of them.","Url":"https://github.com/dotnet/machinelearning/issues/3975","RelatedDescription":"Open issue \"Add Product recommendation sample that will suggest k best related products to subject product\" (#3975)"},{"Id":"465476473","IsPullRequest":false,"CreatedAt":"2019-07-08T21:54:57","Actor":"pieths","Number":"3974","RawContent":null,"Title":"SaveOnnxCommand appears to ignore predictors when saving a model to ONNX format.","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10\r\n\r\n### Steps To Recreate The Issue\r\n\r\n1. Create and save a PredictorModel to disk using the entry point api.\r\n2. Try and convert the model to ONNX format using the entry point api.\r\n3. Notice that `SaveOnnxCommand.GetPipe` only cycles through the transforms and never encounters the logistic regression node.\r\n\r\n    This might be happening because `ExecuteGraphCommand.GetOutputToPath` saves a `TlcModule.DataKind.PredictorModel` to disk in step (1). And then, `ExecuteGraphCommand.SetInputFromPath` loads a `TlcModule.DataKind.TransformModel` from disk in step (2) (apparently a consequence of `SaveOnnxCommand.Arguments.Model` being of type `TransformModel`). `PredictorModelImpl` and `TransformModelImpl` don't appear to be compatible from a serialization point of view.\r\n\r\n### Source code / logs\r\n\r\nSee [here](https://github.com/pieths/dotnet_machinelearning/commit/1058abc7086d58a76000717b284a5b115931c70e) for an ml.net test which demonstrates the issue.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/3974","RelatedDescription":"Open issue \"SaveOnnxCommand appears to ignore predictors when saving a model to ONNX format.\" (#3974)"},{"Id":"465466145","IsPullRequest":false,"CreatedAt":"2019-07-08T21:23:42","Actor":"pieths","Number":"3973","RawContent":null,"Title":"Converting from ml.net pipeline to ONNX fails.","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10\r\n\r\n### Issue\r\n\r\nI created an ml.net pipeline using onnx exportable transforms and a logistic regression node. It trains and predicts as expected but exporting the pipeline using `ConvertToOnnxProtobuf` fails with the following error:\r\n\r\n```console\r\nSystem.InvalidOperationException : The targeted pipeline can not be fully converted into\r\na well-defined ONNX model. Please check if all steps in that pipeline are convertible\r\nto ONNX and all necessary variables are not dropped (via command line arguments).\r\n```\r\n\r\n### Source code / logs\r\n\r\nSee [here](https://github.com/pieths/dotnet_machinelearning/commit/5335349756c50e54b8cb221484f6c56fd9805d49) for an ml.net test which demonstrates the issue.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/3973","RelatedDescription":"Open issue \"Converting from ml.net pipeline to ONNX fails.\" (#3973)"},{"Id":"465433267","IsPullRequest":true,"CreatedAt":"2019-07-08T21:02:10","Actor":"PranovD","Number":"3971","RawContent":null,"Title":"[WIP] NO MERGE.","State":"closed","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/3971","RelatedDescription":"Closed or merged PR \"[WIP] NO MERGE.\" (#3971)"},{"Id":"465458248","IsPullRequest":false,"CreatedAt":"2019-07-08T21:01:50","Actor":"famschopman","Number":"3972","RawContent":null,"Title":"Using PFI with AutoML, possible?","State":"open","Body":"Playing with AutoML and so far having much fun with it. \r\n\r\nI have a trained model and now trying to retrieve the feature weights. None of the objects returned expose a LastTransformer object that I need to \r\n\r\nCode snippet:\r\n\r\n```\r\nvar mlContext = new MLContext();\r\nvar _appPath = AppDomain.CurrentDomain.BaseDirectory;\r\n var _dataPath = Path.Combine(_appPath, \"Datasets\", \"dataset.csv\");\r\nvar _modelPath = Path.Combine(_appPath, \"Datasets\", \"TrainedModels\");\r\n\r\n\r\nColumnInferenceResults columnInference = mlContext.Auto().InferColumns(_dataPath, LabelColumnName, groupColumns: false);\r\n            ColumnInformation columnInformation = columnInference.ColumnInformation;\r\n\r\n            TextLoader textLoader = mlContext.Data.CreateTextLoader(columnInference.TextLoaderOptions);\r\n            IDataView data = textLoader.Load(_dataPath);\r\n\r\n            DataOperationsCatalog.TrainTestData dataSplit = mlContext.Data.TrainTestSplit(data, testFraction: 0.2);\r\n            IDataView trainData = dataSplit.TrainSet;\r\n            IDataView testData = dataSplit.TestSet;\r\n\r\n            var cts = new CancellationTokenSource();\r\n            var experimentSettings = CreateExperimentSettings(mlContext, cts);\r\n\r\n            var progressHandler = new BinaryExperimentProgressHandler();\r\n\r\n            ExperimentResult<BinaryClassificationMetrics> experimentResult = mlContext.Auto()\r\n                .CreateBinaryClassificationExperiment(experimentSettings)\r\n                .Execute(trainData, labelColumnName: \"Attrition\", progressHandler: new BinaryExperimentProgressHandler());\r\n\r\n            RunDetail<BinaryClassificationMetrics> bestRun = experimentResult.BestRun;\r\n            ITransformer trainedModel = bestRun.Model;\r\n            var predictions = trainedModel.Transform(testData);\r\n            var metrics = mlContext.BinaryClassification.EvaluateNonCalibrated(data: predictions, labelColumnName: \"Attrition\", scoreColumnName: \"Score\");\r\n\r\n            mlContext.Model.Save(trainedModel, trainData.Schema, _modelPath);\r\n```\r\n\r\nThen I want to get the PFI information and I get stuck. There appears no way to get the LastTransformer object from the trainedModel.\r\n\r\n\r\n```\r\n            var transformedData = trainedModel.Transform(trainData);\r\n            var linearPredictor = model.LastTransformer; \r\n\r\n            var permutationMetrics = mlContext.BinaryClassification.PermutationFeatureImportance(\r\n                linearPredictor, transformedData, permutationCount: 30);\r\n```\r\n\r\nHope someone can help me with some guidance.","Url":"https://github.com/dotnet/machinelearning/issues/3972","RelatedDescription":"Open issue \"Using PFI with AutoML, possible?\" (#3972)"},{"Id":"465138521","IsPullRequest":false,"CreatedAt":"2019-07-08T16:22:02","Actor":"baruchiro","Number":"3970","RawContent":null,"Title":"What about the constructors?","State":"closed","Body":"How can I initialize this type?\n\n---\n#### Document Details\n\n⚠ *Do not edit this section. It is required for docs.microsoft.com ➟ GitHub issue linking.*\n\n* ID: 7366dd71-3899-63fb-690e-5e0d11a5bf13\n* Version Independent ID: 4e44da94-51eb-2617-135a-eb71186b4da9\n* Content: [TensorFlowEstimator Class (Microsoft.ML.Transforms)](https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.transforms.tensorflowestimator?view=ml-dotnet)\n* Content Source: [dotnet/xml/Microsoft.ML.Transforms/TensorFlowEstimator.xml](https://github.com/dotnet/ml-api-docs/blob/live/dotnet/xml/Microsoft.ML.Transforms/TensorFlowEstimator.xml)\n* Product: **dotnet-ml-api**\n* GitHub Login: @sfilipi\n* Microsoft Alias: **johalex**","Url":"https://github.com/dotnet/machinelearning/issues/3970","RelatedDescription":"Closed issue \"What about the constructors?\" (#3970)"},{"Id":"465135177","IsPullRequest":false,"CreatedAt":"2019-07-08T08:55:14","Actor":"NektoDron","Number":"3969","RawContent":null,"Title":"Futures  as bytes","State":"open","Body":"Can I use bytes in the Futures vector for binary classification?\r\n\r\nI tried to make scheme like this\r\n```\r\n            var scheme = SchemaDefinition.Create(typeof(PredictionData));\r\n            scheme[\"Preview\"].ColumnType = BooleanDataViewType.Instance;\r\n            scheme[\"Preview\"].ColumnName = \"Label\";\r\n            scheme[\"Probability\"].ColumnType = NumberDataViewType.Single;\r\n            scheme[\"Features\"].ColumnType = new VectorDataViewType(NumberDataViewType.Byte, size);\r\n```\r\n\r\nBut after calling trainingPipeline.Fit I get an exception\r\n`System.ArgumentOutOfRangeException: 'Schema mismatch for feature column 'Features': expected Vector<Single>, got Vector<Byte>`\r\n\r\nIf I use Single, it will take 4 times more memory for the data.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/3969","RelatedDescription":"Open issue \"Futures  as bytes\" (#3969)"},{"Id":"463399692","IsPullRequest":true,"CreatedAt":"2019-07-07T09:01:22","Actor":"Shrutiagarwal2107","Number":"3955","RawContent":null,"Title":"Update .gitattributes","State":"closed","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [ ] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [ ] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/3955","RelatedDescription":"Closed or merged PR \"Update .gitattributes\" (#3955)"},{"Id":"464916277","IsPullRequest":true,"CreatedAt":"2019-07-07T08:52:20","Actor":"justinormont","Number":"3968","RawContent":null,"Title":"[AutoML] Increment AutoML build version to 0.15.0 for preview.","State":"closed","Body":"Increment build version to 1.3.0 for release and 0.15.0 for preview. Note there are no release AutoML components at this time.\r\n\r\nThis is to keep in sync w/ the ML.NET versions -- ref: https://github.com/dotnet/machinelearning/pull/3956","Url":"https://github.com/dotnet/machinelearning/pull/3968","RelatedDescription":"Closed or merged PR \"[AutoML] Increment AutoML build version to 0.15.0 for preview.\" (#3968)"},{"Id":"464117076","IsPullRequest":false,"CreatedAt":"2019-07-04T07:48:06","Actor":"nighotatul","Number":"3967","RawContent":null,"Title":"We are not getting submodel for LinearBinaryModelParameters after loading model","State":"open","Body":"Hi \r\n\r\nAfter loading model for binary classification we are trying to get submodel and calibrator\r\n\r\nbut if you see after loading model we write below code\r\n```\r\n((Microsoft.ML.Calibrators.CalibratedModelParametersBase)((Microsoft.ML.Data.PredictionTransformerBase<Microsoft.ML.IPredictorProducing<float>>)((Microsoft.ML.Data.TransformerChain<Microsoft.ML.ITransformer>)mlModel).LastTransformer).Model).SubModel\r\n```\r\n but failed to getting sub model which is required for us for\r\nLinearBinaryModelParameters\r\n\r\nif you see in CreateModel method we easily get SubModel by writing below code\r\n```\r\nLinearBinaryModelParameters linearBinaryModelParameters = ((Microsoft.ML.Data.TransformerChain<Microsoft.ML.Data.BinaryPredictionTransformer<Microsoft.ML.Calibrators.CalibratedModelParametersBase<Microsoft.ML.Trainers.LinearBinaryModelParameters, Microsoft.ML.Calibrators.PlattCalibrator>>>)mlModel).LastTransformer.Model.SubModel;\r\n```\r\nbut same code if we writer after loading model the we got exception of casting\r\n\r\nplease guide us.\r\n\r\n\r\n\r\n[mlApp_ex.zip](https://github.com/dotnet/machinelearning/files/3358212/mlApp_ex.zip)\r\n","Url":"https://github.com/dotnet/machinelearning/issues/3967","RelatedDescription":"Open issue \"We are not getting submodel for LinearBinaryModelParameters after loading model\" (#3967)"},{"Id":"463980232","IsPullRequest":false,"CreatedAt":"2019-07-03T22:31:16","Actor":"natke","Number":"3966","RawContent":null,"Title":"Simplify include repo configuration in ml-api-docs repo","State":"open","Body":"The current config in https://github.com/dotnet/ml-api-docs is:\r\n\r\n.openpublishing.publish.config.json\r\n\r\n    \"dependent_repositories\": [\r\n     ...\r\n        {\r\n          \"path_to_root\": \"docs/samples\",\r\n          \"url\": \"https://github.com/dotnet/machinelearning\",\r\n          \"branch\": \"master\",\r\n          \"branch_mapping\": {}\r\n        }\r\n      ],\r\n\r\nThis means that the includes have to be specified like this:\r\n\r\n    [!code-csharp[OrdinaryLeastSquares](~/../docs/samples/docs/samples/Microsoft.ML.Samples/Dynamic/Trainers/Regression/OrdinaryLeastSquares.cs)]\r\n\r\nand\r\n\r\n    [!include[algorithm](~/../docs/samples/docs/api-reference/tree-featurization-prediction.md)]\r\n\r\nIf we change it to\r\n\r\n.openpublishing.publish.config.json\r\n\r\n    {\r\n        \"path_to_root\": \"dotnet/machinelearning\", <-- ~ is relative to the docfx root dir i.e. dotnet\r\n        \"url\": \"https://github.com/dotnet/machinelearning\",\r\n        \"branch\": \"master\",\r\n        \"branch_mapping\": {}\r\n    } \r\n\r\nthen we can specify the includes as:\r\n\r\n    [!code-csharp[OrdinaryLeastSquares](~/machinelearning/docs/samples/Microsoft.ML.Samples/Dynamic/Trainers/Regression/OrdinaryLeastSquares.cs)]\r\n\r\n    [!include[algorithm](~/machinelearning/docs/api-reference/tree-featurization-prediction.md)]\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/3966","RelatedDescription":"Open issue \"Simplify include repo configuration in ml-api-docs repo\" (#3966)"},{"Id":"463877098","IsPullRequest":false,"CreatedAt":"2019-07-03T17:41:54","Actor":"bartczernicki","Number":"3965","RawContent":null,"Title":"LightGbm Warning after upgrading to LightGBM v1.2 ([LightGBM] [Warning] Unknown parameter metric=)","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Windows Server 2016\r\n- **.NET Version (eg., dotnet --info)**: .NET Core 2.1\r\n\r\n### Issue\r\n\r\n- **What did you do?** Updated to ML.NET/LightGBM v1.2\r\n- **What happened?** Warning started appearing.\r\n- **What did you expect?** No warning\r\n\r\n### Source code / logs\r\n\r\nSource code is located here:\r\nhttps://github.com/bartczernicki/MLDotNet-BaseballClassification\r\n\r\nFit method that throws the warning...\r\nhttps://github.com/bartczernicki/MLDotNet-BaseballClassification/blob/28143bb71d962bcb919393db258e7e458480f071/MLDotNet-BaseballClassification/Program.cs#L113\r\n\r\n_Error: [LightGBM] [Warning] Unknown parameter metric=_","Url":"https://github.com/dotnet/machinelearning/issues/3965","RelatedDescription":"Open issue \"LightGbm Warning after upgrading to LightGBM v1.2 ([LightGBM] [Warning] Unknown parameter metric=)\" (#3965)"},{"Id":"463870772","IsPullRequest":false,"CreatedAt":"2019-07-03T17:26:17","Actor":"taffmak","Number":"3964","RawContent":null,"Title":"Missing or incorrect dependencies in generated code","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**:\r\n- **.NET Version (eg., dotnet --info)**: \r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nAdded machine learning to a .net core console project.\r\nFollowed the training to generate a model and added the projects to my solution.\r\n(Note: when I created the solution I opted for solution and project in same folder)\r\n- **What happened?**\r\nMany Build Errors:\r\n2>MLConsoleL1ML.ConsoleApp\\ModelBuilder.cs(11,17,11,19): error CS0234: The type or namespace name 'ML' does not exist in the namespace 'Microsoft' (are you missing an assembly reference?)\r\n\r\n- **What did you expect?**\r\n1. Generated code to build.\r\n2. Generated code to work.\r\n\r\n- **What I tried to resolve it**\r\nInstalled nuget package Microsoft.ML\r\n\r\n- **Then what happened?**\r\nEven more errors:\r\n2>MLConsoleL1ML.Model\\obj\\Debug\\netcoreapp2.1\\MLConsoleL1ML.Model.AssemblyInfo.cs(14,12,14,54): error CS0579: Duplicate 'System.Reflection.AssemblyCompanyAttribute' attribute\r\n\r\nin addition to the previous errors\r\n\r\n\r\n\r\n\r\n\r\n### Source code / logs\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/3964","RelatedDescription":"Open issue \"Missing or incorrect dependencies in generated code\" (#3964)"},{"Id":"463844700","IsPullRequest":true,"CreatedAt":"2019-07-03T16:24:09","Actor":"wschin","Number":"3963","RawContent":null,"Title":"Allow user to overwrite unknown shapes loaded from ONNX model","State":"open","Body":"This PR adds an extra argument to `ApplyOnnxModel` functions.\r\n```c#\r\n        /// <param name=\"shapeDictionary\">ONNX shape should be used to over those loaded from <paramref name=\"modelFile\"/>.</param>\r\n```\r\nIf a key-value pair, (`tensor_name`, `[1, 2, 3]`) exists, the `tensor_name`'s shape loaded from ONNX model file will be replaced by `[1, 2, 3]`. It's allows user to replace unknown shapes in their applications.\r\n\r\nFix #3932.\r\n\r\nWith this PR, FasterRCNN mentioned in #3932 can be run as the example below.\r\n```c#\r\n        private class RcnnInput\r\n        {\r\n            [ColumnName(\"image\")]\r\n            [VectorType(3, 224, 224)]\r\n            public float[] Input { get; set; }\r\n        }\r\n\r\n        private class RcnnOutput\r\n        {\r\n            [ColumnName(\"6379\")]\r\n            public float[] Boxes { get; set; }\r\n\r\n            [ColumnName(\"6381\")]\r\n            public long[] Label { get; set; } \r\n\r\n            [ColumnName(\"6383\")]\r\n            public float[] Score { get; set; }\r\n        }\r\n\r\n        static public IEnumerable<float> GenerateRandomVector(int size)\r\n        {\r\n            var rnd = new Random(0);\r\n\r\n            for (int i = 0; i < size; ++i)\r\n                yield return rnd.NextSingle();\r\n        }\r\n\r\n        /// <summary>\r\n        /// A test to check if dynamic shape works.\r\n        /// </summary>\r\n        [OnnxFact]\r\n        public void TestOnnxTransformDynamicShape()\r\n        {\r\n            var modelFile = Path.Combine(Directory.GetCurrentDirectory(), \"fasterRCNN\", \"faster_rcnn_R_50_FPN_1x.onnx\");\r\n\r\n            var dataPoints = new RcnnInput[] {\r\n                new RcnnInput() { Input = GenerateRandomVector(3 * 224 * 224).ToArray(), }\r\n            };\r\n\r\n            var shapeDictionary = new Dictionary<string, int[]>() { { \"image\", new int[] { 3, 224, 224 } } };\r\n\r\n            var dataView = ML.Data.LoadFromEnumerable(dataPoints);\r\n            var transformedDataView = ML.Transforms.ApplyOnnxModel(new[] { \"6379\", \"6381\", \"6383\" }, new[] { \"image\" }, modelFile,\r\n                shapeDictionary: shapeDictionary).Fit(dataView).Transform(dataView);\r\n\r\n            // Convert IDataView to IEnumerable<ZipMapOutput> and then inspect the values.\r\n            var transformedDataPoints = ML.Data.CreateEnumerable<RcnnOutput>(transformedDataView, false).ToList();\r\n\r\n            for (int i = 0; i < transformedDataPoints.Count; ++i)\r\n            {\r\n                Assert.NotNull(transformedDataPoints[i].Boxes);\r\n                Assert.NotNull(transformedDataPoints[i].Label);\r\n                Assert.NotNull(transformedDataPoints[i].Score);\r\n            }\r\n        }\r\n```\r\n","Url":"https://github.com/dotnet/machinelearning/pull/3963","RelatedDescription":"Open PR \"Allow user to overwrite unknown shapes loaded from ONNX model\" (#3963)"},{"Id":"463563176","IsPullRequest":false,"CreatedAt":"2019-07-03T08:37:37","Actor":"justinormont","Number":"3960","RawContent":null,"Title":"Update AutoML dependency to ML.NET 1.2.0","State":"closed","Body":"ML.NET has released a new version (1.2.0). \r\n\r\nUpdate:\r\n* AutoML API\r\n* CLI & CodeGen","Url":"https://github.com/dotnet/machinelearning/issues/3960","RelatedDescription":"Closed issue \"Update AutoML dependency to ML.NET 1.2.0\" (#3960)"},{"Id":"463561677","IsPullRequest":false,"CreatedAt":"2019-07-03T08:37:24","Actor":"justinormont","Number":"3959","RawContent":null,"Title":"Bump AutoML API & CLI version to 0.14.0","State":"closed","Body":"To match the existing pre-release version of ML.NET, bump AutoML API and CLI nugets to 0.14.0. Currently the version is 0.4.0, and we will fast forward to 0.14.0.\r\n\r\nThis provides a uniform versioning across ML.NET. ","Url":"https://github.com/dotnet/machinelearning/issues/3959","RelatedDescription":"Closed issue \"Bump AutoML API & CLI version to 0.14.0\" (#3959)"},{"Id":"463576791","IsPullRequest":true,"CreatedAt":"2019-07-03T07:15:00","Actor":"daholste","Number":"3961","RawContent":null,"Title":"[AutoML] Produce AutoML NuGet package in build pipeline","State":"closed","Body":"Produce AutoML NuGet package in build pipeline\r\n\r\nCurrently, only the `mlnet` and _symbols_ for `Microsoft.ML.AutoML` are produced. We need to also produce the NuGet for `Microsoft.ML.AutoML`.\r\n\r\nThis reverts the change from https://github.com/dotnet/machinelearning/pull/3656.","Url":"https://github.com/dotnet/machinelearning/pull/3961","RelatedDescription":"Closed or merged PR \"[AutoML] Produce AutoML NuGet package in build pipeline\" (#3961)"},{"Id":"463549805","IsPullRequest":true,"CreatedAt":"2019-07-03T06:59:41","Actor":"daholste","Number":"3958","RawContent":null,"Title":"[AutoML] Bump ML.NET package version to 1.2.0 in AutoML API and CLI; and AutoML package versions to 0.14.0","State":"closed","Body":"Closes https://github.com/dotnet/machinelearning/issues/3959 and closes https://github.com/dotnet/machinelearning/issues/3960:\r\nBump ML.NET package version to latest 1.2.0 in AutoML API and CLI (including the generated C# code); bump AutoML package versions to 0.14.0 to be consistent with ML.NET preview version","Url":"https://github.com/dotnet/machinelearning/pull/3958","RelatedDescription":"Closed or merged PR \"[AutoML] Bump ML.NET package version to 1.2.0 in AutoML API and CLI; and AutoML package versions to 0.14.0\" (#3958)"},{"Id":"463371044","IsPullRequest":true,"CreatedAt":"2019-07-02T22:35:12","Actor":"daholste","Number":"3954","RawContent":null,"Title":"[AutoML] CLI: Regenerate templated CS files","State":"closed","Body":"Regenerate all templated CS files from checked-in TT files. (I unknowingly upgraded CS files to be FXCop / StyleCop compliant in https://github.com/dotnet/machinelearning/pull/3823 . This was unnecessary. I did not modify TT files. I'm reverting my FXCop / StyleCop change to the generated files by regenerating them from the checked-in TT files.)","Url":"https://github.com/dotnet/machinelearning/pull/3954","RelatedDescription":"Closed or merged PR \"[AutoML] CLI: Regenerate templated CS files\" (#3954)"},{"Id":"463414699","IsPullRequest":true,"CreatedAt":"2019-07-02T20:46:20","Actor":"codemzs","Number":"3956","RawContent":null,"Title":"Increment build version to 1.3 for release and 0.15 for preview.","State":"closed","Body":"\r\n","Url":"https://github.com/dotnet/machinelearning/pull/3956","RelatedDescription":"Closed or merged PR \"Increment build version to 1.3 for release and 0.15 for preview.\" (#3956)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-07-10T05:30:37.3999024Z","RunDurationInMilliseconds":753}