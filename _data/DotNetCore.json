{"Data":{"Blog":{"FeedItems":[{"Title":".NET Framework September 2019 Preview of Quality Rollup","PublishedOn":"2019-09-26T19:36:06+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We have released the September 2019 Preview of Quality Rollup and Cumulative Updates for .NET Framework for Windows 10\nQuality and Reliability\nThis release contains the following quality and...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-september-2019-preview-of-quality-rollup/","RawContent":null},{"Title":"ML.NET and Model Builder at .NET Conf 2019 (Machine Learning for .NET)","PublishedOn":"2019-09-24T19:48:06+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are excited today to announce updates to Model Builder and improvements in ML.NET. You can learn more in the “What’s new in ML.NET?.” session at .NET Conf.\nML.NET is an open-source and...","Href":"https://devblogs.microsoft.com/dotnet/ml-net-and-model-builder-at-net-conf-2019-machine-learning-for-net/","RawContent":null},{"Title":"Joining the .NET Foundation Maturity Model Pilot","PublishedOn":"2019-09-23T16:59:08+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Joining the .NET Foundation Maturity Model Pilot\nThe .NET Foundation is starting a new pilot program to increase quality and user confidence in open source projects, using a new project maturity...","Href":"https://devblogs.microsoft.com/dotnet/joining-the-net-foundation-maturity-model-pilot/","RawContent":null},{"Title":"Announcing Entity Framework Core 3.0 and Entity Framework 6.3 General Availability","PublishedOn":"2019-09-23T16:20:13+00:00","CommentsCount":33,"FacebookCount":0,"Summary":"We are extremely excited to announce the general availability of EF Core 3.0and EF 6.3 on nuget.org.\nThe final versions of .NET Core 3.0 and ASP.NET Core 3.0 are also available now.\nHow to get EF Core...","Href":"https://devblogs.microsoft.com/dotnet/announcing-ef-core-3-0-and-ef-6-3-general-availability/","RawContent":null},{"Title":"Announcing F# 4.7","PublishedOn":"2019-09-23T16:06:23+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"We’re excited to announce general availability of F# 4.7 in conjunction with the .NET Core 3.0 release! In this post, I’ll show you how to get started, explain everything in F# 4.7 and give you a...","Href":"https://devblogs.microsoft.com/dotnet/announcing-f-4-7/","RawContent":null},{"Title":"Announcing .NET Core 3.0","PublishedOn":"2019-09-23T16:00:29+00:00","CommentsCount":87,"FacebookCount":0,"Summary":"Announcing .NET Core 3.0\nWe’re excited to announce the release of .NET Core 3.0. It includes many improvements, including adding Windows Forms and WPF, adding new JSON APIs, support for ARM64 and...","Href":"https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0/","RawContent":null},{"Title":"Release Candidate builds of Entity Framework Core 3.0 and Entity Framework 6.3 are now available","PublishedOn":"2019-09-16T21:47:32+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"We previously said that preview 9 would be your last chance to test EF Core 3.0 and EF 6.3 before general availability. But it turns out that we made enough improvements to our libraries and across...","Href":"https://devblogs.microsoft.com/dotnet/release-candidate-builds-of-entity-framework-core-3-0-and-entity-framework-6-3-are-now-available/","RawContent":null},{"Title":"Announcing .NET Core 3.0 Release Candidate 1","PublishedOn":"2019-09-16T18:45:09+00:00","CommentsCount":29,"FacebookCount":0,"Summary":"Today, we&#8217;re announcing .NET Core 3.0 Release Candidate 1. Just like with Preview 9, we&#8217;ve focused on polishing .NET Core 3.0 for a final release. We are now getting very, very close. We...","Href":"https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0-release-candidate-1/","RawContent":null},{"Title":"Finalization implementation details","PublishedOn":"2019-09-16T17:43:41+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Years ago I wrote a document on making finalization scanning concurrent. At the time there was an internal team that was using finalization as a way to resurrect objects and putting them back in their...","Href":"https://devblogs.microsoft.com/dotnet/finalization-implementation-details/","RawContent":null},{"Title":".NET Framework September 2019 Security and Quality Rollup","PublishedOn":"2019-09-10T18:54:39+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the September 2019 Cumulative Update, Security and Quality Rollup, and Security Only Update for .NET Framework.\nSecurity\nCVE-2019-1142– .NET Framework Elevation of Privilege...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-september-2019-security-and-quality-rollup/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"10123005051","Type":"IssuesEvent","CreatedAt":"2019-07-31T19:23:23","Actor":"MeikTranel","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/issues/148","RelatedDescription":"Opened issue \"Clarify guidelines in regards to Options and Requirements\" (#148) at dotnet/foundation","RelatedBody":"I'd be interested in which part of the project submission guidelines is optional and which are deal breaker requirements.\r\n\r\n- Is the Role Matrix laid out an absolute or (as can be read between the lines) just a preset, which may be subject to individual projects needs?\r\n- Is it a strong requirement that the project uses the contributor covenant CoC?"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"10486020433","Type":"IssuesEvent","CreatedAt":"2019-09-24T19:01:32","Actor":"MichaelSimons","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/124","RelatedDescription":"Opened issue \".NET Core `latest` Docker tags updated to 3.0\" (#124) at dotnet/announcements","RelatedBody":"# .NET Core `latest` Docker tags updated to 3.0\r\n \r\nThe `latest` tags for the [dotnet/core](https://hub.docker.com/_/microsoft-dotnet-core) repos have been updated to reference [.NET Core 3.0](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0/).\r\n \r\n## Discussion\r\n \r\nYou can share your thoughts on this change or see what others are saying at:\r\n \r\n* [dotnet/dotnet-docker#1337](https://github.com/dotnet/dotnet-docker/issues/1337)\r\n \r\n## Details\r\n \r\n* [dotnet-docker#1334](https://github.com/dotnet/dotnet-docker/pull/1334)\r\n \r\nThe `latest` tags for the [dotnet/core](https://hub.docker.com/_/microsoft-dotnet-core) repos are always intended to reference the latest supported version of .NET Core. At this time, the latest supported version is .NET Core 3.0.\r\n \r\nThe following Docker repos have been updated:\r\n \r\n* [dotnet/core/sdk](https://hub.docker.com/_/microsoft-dotnet-core-sdk)\r\n* [dotnet/core/aspnet](https://hub.docker.com/_/microsoft-dotnet-core-aspnet)\r\n* [dotnet/core/runtime](https://hub.docker.com/_/microsoft-dotnet-core-runtime)\r\n* [dotnet/core/runtime-deps](https://hub.docker.com/_/microsoft-dotnet-core-runtime-deps)\r\n* [dotnet/core/samples](https://hub.docker.com/_/microsoft-dotnet-core-samples)\r\n \r\nIt is recommended to use a more-specific tag than `latest` for anything other than casual development. Once you have an application that you believe will eventually go to production, you are recommended to use a tag like `3.0`. The [.NET Core Docker Samples](https://github.com/dotnet/dotnet-docker/tree/master/samples) contain examples of more specific usage such as the [.NET Core console sample](https://github.com/dotnet/dotnet-docker/blob/master/samples/dotnetapp/Dockerfile).\r\n"},{"Id":"10427072993","Type":"IssuesEvent","CreatedAt":"2019-09-16T19:03:54","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/123","RelatedDescription":"Opened issue \".NET Core 3.0 RC 1\" (#123) at dotnet/announcements","RelatedBody":".NET Core RC 1 released today. https://github.com/dotnet/core/issues/3380 has been opened for discussion. \r\n\r\n[Release Notes](https://github.com/dotnet/core/blob/master/release-notes/3.0/preview/3.0.0-rc1.md)\r\n[Download](https://github.com/dotnet/core/blob/master/release-notes/3.0/preview/3.0.0-rc1-download.md)\r\n\r\n**Blog posts**\r\n\r\n[.NET Core](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0-release-candidate-1/)\r\n[ASP.NET Core](https://devblogs.microsoft.com/aspnet/asp-net-core-and-blazor-updates-in-net-core-3-0-release-candidate-1/)\r\n\r\nPlease report any issues you find with 3.0.0 RC 1, either responding to this issue, creating a new issue or creating a new issue in one of the following repos:\r\n\r\n* [aspnet/AspNetCore](https://github.com/aspnet/AspNetCore) - for ASP.NET Core questions\r\n* [aspnet/EntityFrameworkCore](https://github.com/aspnet/EntityFrameworkCore) - for Entity Framework Core questions\r\n* [dotnet/cli](https://github.com/dotnet/cli/issues) - for CLI tools and questions\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues) - for API issues and questions\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues) - for runtime issues\r\n* [dotnet/core-setup](https://github.com/dotnet/core-setup/issues) - for installer issues\r\n* [dotnet/winforms](https://github.com/dotnet/winforms/issues) - for Winforms issues\r\n* [dotnet/wpf](https://github.com/dotnet/wpf/issues) - for WPF issues\r\n* [nuget/home](https://github.com/nuget/home/issues) - for NuGet questions and issues"},{"Id":"10387173702","Type":"IssuesEvent","CreatedAt":"2019-09-10T17:23:27","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/122","RelatedDescription":"Opened issue \"September 2019 .NET Updates\" (#122) at dotnet/announcements","RelatedBody":"The following .NET updates were released on September 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.13 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.13/2.1.13.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.7 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.7/2.2.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/3345](https://github.com/dotnet/core/issues/3345)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)"},{"Id":"10387041341","Type":"IssuesEvent","CreatedAt":"2019-09-10T17:04:51","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/121","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2019-1301: Denial of Service Vulnerability in .NET Core\" (#121) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2019-1301: Denial of Service Vulnerability in .NET Core\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability when .NET Core improperly handles web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core web application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nThe update addresses the vulnerability by correcting how the .NET Core web application handles web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/32971\r\n\r\n## <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nNone\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application running on .NET Core 2.1.0-2.1.12, or .NET Core 2.2.0-2.2.7\r\n\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nYou can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  2.1.604 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf you have a version of .NET Core less than 2.1.13 or less than 2.2.8, you're vulnerable.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\n* For machines running .NET Core 2.1, you should download Runtime 2.1.13 or SDK 2.1.509 for Visual Studio 2017 or SDK 2.1.606 for Visual Studio 2019 (v16.0) or SDK 2.1.802 for Visual Studio 2019 (v16.2) from https://dotnet.microsoft.com/download/dotnet-core/2.1.\r\n* For machines running .NET Core 2.2, you should download Runtime 2.2.7 or SDK 2.2.109 for Visual Studio 2017 or SDK 2.2.206 for Visual Studio 2019 (v16.0) or SDK 2.2.402 for Visual Studio 2019 (v16.2) from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nIf you have both 2.1 and 2.2, you need to install updates for both versions.\r\n\r\nOnce you have installed the updated runtime or SDK, restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/dotnet/core/versions/selection) to a specific version of the runtime, you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n# Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/, respectively. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\nPaul Ryman of VMware Sydney Engineering Team\r\n\r\n### External Links\r\n\r\n[CVE-2019-1301](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-1301)\r\n\r\n### Revisions\r\n\r\nV1.0 (September 10, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-09-10_\r\n"},{"Id":"10348207363","Type":"IssuesEvent","CreatedAt":"2019-09-04T19:14:06","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/120","RelatedDescription":"Opened issue \".NET Core 3.0 Preview 9\" (#120) at dotnet/announcements","RelatedBody":".NET Core Preview 9 released today. https://github.com/dotnet/core/issues/3304 has been opened for discussion. \r\n\r\n[Release Notes](https://github.com/dotnet/core/blob/master/release-notes/3.0/preview/3.0.0-preview9.md)\r\n[Download](https://github.com/dotnet/core/blob/master/release-notes/3.0/preview/3.0.0-preview9-download.md)\r\n\r\n**Blog posts**\r\n\r\n[.NET Core](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0-preview-9/)\r\n[ASP.NET Core](https://devblogs.microsoft.com/aspnet/asp-net-core-and-blazor-updates-in-net-core-3-0-preview-9/)\r\n[EF Core](https://devblogs.microsoft.com/dotnet/announcing-entity-framework-core-3-0-preview-9-and-entity-framework-6-3-preview-9/)\r\n\r\nPlease report any issues you find with 3.0.0 Preview 9, either responding to this issue, creating a new issue or creating a new issue in one of the following repos:\r\n\r\n* [aspnet/Home](https://github.com/aspnet/Home) - for ASP.NET Core questions\r\n* [aspnet/EntityFrameworkCore](https://github.com/aspnet/EntityFrameworkCore) - for Entity Framework Core questions\r\n* [dotnet/cli](https://github.com/dotnet/cli/issues) - for CLI tools and questions\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues) - for API issues and questions\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues) - for runtime issues\r\n* [dotnet/core-setup](https://github.com/dotnet/core-setup/issues) - for installer issues\r\n* [dotnet/winforms](https://github.com/dotnet/winforms/issues) - for Winforms issues\r\n* [dotnet/wpf](https://github.com/dotnet/wpf/issues) - for WPF issues\r\n* [nuget/home](https://github.com/nuget/home/issues) - for NuGet questions and issues"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"10517452085","Type":"IssuesEvent","CreatedAt":"2019-09-29T02:36:43","Actor":"AriNuer","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/26877","RelatedDescription":"Reopened issue \"Assert failure(PID 5640 [0x00001608], Thread: 3936 [0x0f60]): !\"About to FailFast. set ComPlus_AssertOnFailFast=0 if this is expected\"\" (#26877) at dotnet/coreclr","RelatedBody":"**Job:**\r\ncoreclr-corefx: [#20190924.1 Run Test Pri1 CoreFX Windows_NT x86 checked](https://dnceng.visualstudio.com/public/_build/results?buildId=364181)\r\n\r\n**Details:**\r\nhttps://helix.dot.net/api/2019-06-17/jobs/1251ceea-ddad-47e1-ad0a-4a3266d8af9e/workitems/System.Runtime.Tests/console\r\n\r\n**OS & Arch:**\r\nWindows x86\r\n\r\n**Note:**\r\nThis failure **repro** on our windows x86 machine.\r\n\r\n**Log:**\r\n```\r\nC:\\dotnetbuild\\work\\1251ceea-ddad-47e1-ad0a-4a3266d8af9e\\Work\\ac8413bb-8b7a-4fdf-9e4a-6368a8bf0e12\\Exec>\"C:\\dotnetbuild\\work\\1251ceea-ddad-47e1-ad0a-4a3266d8af9e\\Payload\\dotnet.exe\" exec --runtimeconfig System.Runtime.Tests.runtimeconfig.json xunit.console.dll System.Runtime.Tests.dll -xml testResults.xml -nologo -nocolor -notrait category=nonnetcoreapptests -notrait category=nonwindowstests -notrait category=IgnoreForCI -notrait category=OuterLoop -notrait category=failing @C:\\dotnetbuild\\work\\1251ceea-ddad-47e1-ad0a-4a3266d8af9e\\Payload\\CoreFX.issues.rsp \r\n  Discovering: System.Runtime.Tests (method display = ClassAndMethod, method display options = None)\r\n  Discovered:  System.Runtime.Tests (found 5376 of 5409 test cases)\r\n  Starting:    System.Runtime.Tests (parallel test collections = on, max threads = 2)\r\n    System.Tests.ArgIteratorTests.ArgIterator_Throws_PlatformNotSupportedException [SKIP]\r\n      Condition(s) not met: \"IsArgIteratorNotSupported\"\r\n    System.Tests.IntPtrTests.Size [SKIP]\r\n      Condition(s) not met: \"Is64Bit\"\r\n    System.Tests.IntPtrTests.Add [SKIP]\r\n      Condition(s) not met: \"Is64Bit\"\r\n    System.Tests.IntPtrTests.Subtract [SKIP]\r\n      Condition(s) not met: \"Is64Bit\"\r\n    System.Tests.IntPtrTests.ImplicitCast [SKIP]\r\n      Condition(s) not met: \"Is64Bit\"\r\n    System.Tests.IntPtrTests.GetHashCodeRespectAllBits [SKIP]\r\n      Condition(s) not met: \"Is64Bit\"\r\n    System.Tests.IntPtrTests.Ctor_VoidPointer_ToPointer [SKIP]\r\n      Condition(s) not met: \"Is64Bit\"\r\n    System.Tests.IntPtrTests.Ctor_Long [SKIP]\r\n      Condition(s) not met: \"Is64Bit\"\r\n\r\nAssert failure(PID 5640 [0x00001608], Thread: 3936 [0x0f60]): !\"About to FailFast. set ComPlus_AssertOnFailFast=0 if this is expected\"\r\n\r\nCORECLR! DoJITFailFast + 0xA2 (0x72d72cb3)\r\nCORECLR! CrawlFrame::SetCurGSCookie + 0x13 (0x72cd06e1)\r\nCORECLR! CrawlFrame::GotoNextFrame + 0x8D (0x72cceae9)\r\nCORECLR! StackFrameIterator::NextRaw + 0x938 (0x72ccfe46)\r\nCORECLR! StackFrameIterator::Next + 0x46 (0x72ccf4ca)\r\nCORECLR! Thread::StackWalkFramesEx + 0x180 (0x72cd0a5c)\r\nCORECLR! Thread::StackWalkFrames + 0x159 (0x72cd085c)\r\nCORECLR! UnwindFrames + 0x7D (0x72d1c0b2)\r\nCORECLR! COMPlusAfterUnwind + 0x16C (0x72cfdfb3)\r\nCORECLR! CPFH_RealFirstPassHandler + 0xE1E (0x72d00936)\r\n    File: f:\\workspace\\_work\\1\\s\\src\\vm\\jithelpers.cpp Line: 5057\r\n    Image: C:\\dotnetbuild\\work\\1251ceea-ddad-47e1-ad0a-4a3266d8af9e\\Payload\\dotnet.exe\r\n\r\n----- end Tue 09/24/2019 10:50:35.65 ----- exit code -1073740286 ----------------------------------------------------------\r\n```\r\n"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"10516967541","Type":"IssuesEvent","CreatedAt":"2019-09-28T21:41:57","Actor":"felizk","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/12749","RelatedDescription":"Opened issue \"Settings for a self-contained WinForms goes into new folders for every publish\" (#12749) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n * Publish a self contained WinForms app. \r\n * Run it.\r\n * Change and save some Settings (using the WinForms style .settings)\r\n * Notice settings are saved in LocalAppData ultimately in a folder with this kind of postfix: \"_Url_2z3wslwxp2unr2f2llkyxtrbrq3rb5cd\"\r\n * Repeat, notice the postfix has changed and settings are not reused\r\n\r\n## Expected  behavior\r\nTo be able to persist settings between versions of the application.\r\n\r\n## Actual behavior\r\nEvery time you publish, settings are effectively wiped.\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"10516797760","Type":"PullRequestEvent","CreatedAt":"2019-09-28T20:15:14","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/12748","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/core-setup\" (#12748) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190928.4\r\n- **Date Produced**: 9/28/2019 6:55 PM\r\n- **Commit**: 98ee997ccb0ae479a4c03b23c682a198b12dd682\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19478.4\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19478.4\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19478.4\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19478.4\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19478.4\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n"},{"Id":"10516589455","Type":"PullRequestEvent","CreatedAt":"2019-09-28T18:40:43","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/12747","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/core-setup\" (#12747) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190928.3\r\n- **Date Produced**: 9/28/2019 4:17 PM\r\n- **Commit**: 31d255861fefd39312dc636850528dd94765ebc6\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19478.3\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19478.3\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19478.3\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19478.3\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19478.3\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n"},{"Id":"10516508910","Type":"PullRequestEvent","CreatedAt":"2019-09-28T18:05:29","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/12747","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/core-setup\" (#12747) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190928.3\r\n- **Date Produced**: 9/28/2019 4:17 PM\r\n- **Commit**: 31d255861fefd39312dc636850528dd94765ebc6\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19478.3\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19478.3\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19478.3\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19478.3\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19478.3\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n"},{"Id":"10516508433","Type":"PullRequestEvent","CreatedAt":"2019-09-28T18:05:16","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/12746","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/core-setup\" (#12746) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190928.2\r\n- **Date Produced**: 9/28/2019 4:06 PM\r\n- **Commit**: 31d255861fefd39312dc636850528dd94765ebc6\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19478.2\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19478.2\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19478.2\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19478.2\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19478.2\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n"},{"Id":"10516430432","Type":"PullRequestEvent","CreatedAt":"2019-09-28T17:30:14","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/12746","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/core-setup\" (#12746) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190928.2\r\n- **Date Produced**: 9/28/2019 4:06 PM\r\n- **Commit**: 31d255861fefd39312dc636850528dd94765ebc6\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19478.2\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19478.2\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19478.2\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19478.2\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19478.2\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"10517691319","Type":"IssuesEvent","CreatedAt":"2019-09-29T04:57:45","Actor":"B16180339","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/1581","RelatedDescription":"Closed issue \"Dotnet\" (#1581) at dotnet/standard","RelatedBody":""},{"Id":"10517690637","Type":"IssuesEvent","CreatedAt":"2019-09-29T04:57:13","Actor":"B16180339","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/1581","RelatedDescription":"Opened issue \"Dotnet\" (#1581) at dotnet/standard","RelatedBody":""},{"Id":"10515751225","Type":"PullRequestEvent","CreatedAt":"2019-09-28T12:28:37","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1580","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/corefx\" (#1580) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190927.7\r\n- **Date Produced**: 9/28/2019 1:48 AM\r\n- **Commit**: 7e9a177824cbefaee8985a9b517ebb0ea2e17a81\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19477.7\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19477.7\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19477.7\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"},{"Id":"10515729024","Type":"PullRequestEvent","CreatedAt":"2019-09-28T12:18:33","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1580","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/corefx\" (#1580) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190927.7\r\n- **Date Produced**: 9/28/2019 1:48 AM\r\n- **Commit**: 7e9a177824cbefaee8985a9b517ebb0ea2e17a81\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19477.7\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19477.7\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19477.7\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"},{"Id":"10515713571","Type":"PullRequestEvent","CreatedAt":"2019-09-28T12:11:24","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1579","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/arcade\" (#1579) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190927.2\r\n- **Date Produced**: 9/27/2019 6:33 PM\r\n- **Commit**: 14abaee3dba41fbe608431fb6a4f4b2435dcac33\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 5.0.0-beta.19477.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19477.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 5.0.0-beta.19477.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 5.0.0-beta.19477.2\r\n  - **Microsoft.DotNet.GenAPI** -> 5.0.0-beta.19477.2\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.19477.2\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n"},{"Id":"10515691590","Type":"PullRequestEvent","CreatedAt":"2019-09-28T12:01:20","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1579","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/arcade\" (#1579) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190927.2\r\n- **Date Produced**: 9/27/2019 6:33 PM\r\n- **Commit**: 14abaee3dba41fbe608431fb6a4f4b2435dcac33\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 5.0.0-beta.19477.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19477.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 5.0.0-beta.19477.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 5.0.0-beta.19477.2\r\n  - **Microsoft.DotNet.GenAPI** -> 5.0.0-beta.19477.2\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.19477.2\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n"},{"Id":"10510004723","Type":"PullRequestEvent","CreatedAt":"2019-09-27T12:28:38","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1578","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/corefx\" (#1578) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190926.10\r\n- **Date Produced**: 9/27/2019 5:59 AM\r\n- **Commit**: 296c0e71ddcc4885d30af18dea829c1923cfdc5c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19476.10\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19476.10\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19476.10\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"},{"Id":"10509936860","Type":"PullRequestEvent","CreatedAt":"2019-09-27T12:18:34","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1578","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/corefx\" (#1578) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190926.10\r\n- **Date Produced**: 9/27/2019 5:59 AM\r\n- **Commit**: 296c0e71ddcc4885d30af18dea829c1923cfdc5c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19476.10\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19476.10\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19476.10\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"},{"Id":"10509890160","Type":"PullRequestEvent","CreatedAt":"2019-09-27T12:11:33","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1577","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/arcade\" (#1577) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190926.6\r\n- **Date Produced**: 9/27/2019 1:21 AM\r\n- **Commit**: b449f372df1a3374ebdc85f42ff137dcda08776b\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 5.0.0-beta.19476.6\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19476.6\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 5.0.0-beta.19476.6\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 5.0.0-beta.19476.6\r\n  - **Microsoft.DotNet.GenAPI** -> 5.0.0-beta.19476.6\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.19476.6\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n"},{"Id":"10509823861","Type":"PullRequestEvent","CreatedAt":"2019-09-27T12:01:28","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1577","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/arcade\" (#1577) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190926.6\r\n- **Date Produced**: 9/27/2019 1:21 AM\r\n- **Commit**: b449f372df1a3374ebdc85f42ff137dcda08776b\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 5.0.0-beta.19476.6\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19476.6\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 5.0.0-beta.19476.6\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 5.0.0-beta.19476.6\r\n  - **Microsoft.DotNet.GenAPI** -> 5.0.0-beta.19476.6\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.19476.6\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"10517384445","Type":"IssuesEvent","CreatedAt":"2019-09-29T02:00:12","Actor":"chenyj796","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/41430","RelatedDescription":"Opened issue \"How do I host a WebApi in WPF application?\" (#41430) at dotnet/corefx","RelatedBody":""},{"Id":"10517377828","Type":"IssuesEvent","CreatedAt":"2019-09-29T01:56:29","Actor":"sdwdjzhy","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/41429","RelatedDescription":"Closed issue \"how can I make a JsonConverter to Converter Enum\" (#41429) at dotnet/corefx","RelatedBody":"``` C#\r\npublic class User\r\n{\r\n   public UserSex Sex { get; set; }\r\n}\r\npublic enum UserSex\r\n{\r\n    unknown = 0,\r\n    male,\r\n    female,\r\n}\r\n\r\nvar user = new User\r\n{\r\n    Sex = UserSex.female,\r\n};\r\n\r\nvar jsetting = new JsonSerializerOptions();\r\n\r\nreturn JsonSerializer.Serialize(user, jsetting);\r\n// print\r\n// {\"Sex\":2}\r\n```\r\nbut I want it is `{ \"Sex\": \"female\" }`\r\nhow can I do?\r\nThanks!\r\n"},{"Id":"10517330542","Type":"IssuesEvent","CreatedAt":"2019-09-29T01:29:27","Actor":"sdwdjzhy","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/41429","RelatedDescription":"Opened issue \"how can I make a JsonConverter to Converter Enum\" (#41429) at dotnet/corefx","RelatedBody":"``` C#\r\npublic class User\r\n{\r\n   public UserSex Sex { get; set; }\r\n}\r\npublic enum UserSex\r\n{\r\n    unknown = 0,\r\n    male,\r\n    female,\r\n}\r\n\r\nvar user = new User\r\n{\r\n    Sex = UserSex.female,\r\n};\r\n\r\nvar jsetting = new JsonSerializerOptions();\r\n\r\nreturn JsonSerializer.Serialize(user, jsetting);\r\n// print\r\n// {\"Sex\":2}\r\n```\r\nbut I want it is `{ \"Sex\": \"female\" }`\r\nhow can I do?\r\nThanks!\r\n"},{"Id":"10517149905","Type":"IssuesEvent","CreatedAt":"2019-09-28T23:33:54","Actor":"davidmilligan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/41428","RelatedDescription":"Opened issue \"System.Composition: CompositionContext.TryGetExport throws CompositionFailedException\" (#41428) at dotnet/corefx","RelatedBody":"The `CompositionContext.TryGetExport` method can throw a `CompositionFailedException`. This violates the common convention/expectation that `TryXXX` methods don't throw, instead they just return false. \r\n\r\nI would expect that calling `GetExport` would throw an exception in this situation but I would expect that `TryGetExport` would simply return `false`.\r\n\r\nStack Trace:\r\n```\r\nAn exception of type 'System.Composition.Hosting.CompositionFailedException' occurred in System.Composition.Hosting.dll but was not handled in user code: 'The component (unknown) cannot be created outside the Scoped sharing boundary.'\r\n   at System.Composition.Hosting.Core.LifetimeContext.FindContextWithin(String sharingBoundary)\r\n   at System.Composition.TypedParts.ActivationFeatures.LifetimeFeature.<>c__DisplayClass1_0.<RewriteActivator>b__0(LifetimeContext c, CompositionOperation o)\r\n   at System.Composition.Hosting.Core.CompositionOperation.Run(LifetimeContext outermostLifetimeContext, CompositeActivator compositionRootActivator)\r\n   at System.Composition.Hosting.Core.LifetimeContext.TryGetExport(CompositionContract contract, Object& export)\r\n   at System.Composition.CompositionContext.TryGetExport(Type exportType, String contractName, Object& export)\r\n   at System.Composition.CompositionContext.TryGetExport(Type exportType, Object& export)\r\n```\r\n"},{"Id":"10517038908","Type":"IssuesEvent","CreatedAt":"2019-09-28T22:22:53","Actor":"GrabYourPitchforks","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/41349","RelatedDescription":"Closed issue \"Issue regarding AddAuthenticationCore and cookies\" (#41349) at dotnet/corefx","RelatedBody":"Before in my old code, I used to do:\r\n\r\n```csharp\r\nservices\r\n    .AddAuthentication(options =>\r\n    {\r\n        options.DefaultSignInScheme = CookieAuthenticationDefaults.AuthenticationScheme;\r\n        options.DefaultAuthenticateScheme = CookieAuthenticationDefaults.AuthenticationScheme;\r\n        options.DefaultChallengeScheme = CookieAuthenticationDefaults.AuthenticationScheme;\r\n        options.DefaultScheme = CookieAuthenticationDefaults.AuthenticationScheme;\r\n    })\r\n    .AddCookie(options =>\r\n    {\r\n        options.LoginPath = \"/Admin/Account/Login\";\r\n    });\r\n```\r\n\r\nTo get auth with cookies working. \r\n\r\nNow, after migrating to .NET Core 3 while still using the above code, my identity showed as never authenticated. I found something referring to something being moved around, and concluded I needed to use `AddAuthenticationCore`.\r\n\r\nI couldn't find any documentation on how to get the same working with that, so I ended up with the following code:\r\n\r\n```csharp\r\nservices.AddAuthenticationCore(options =>\r\n{\r\n    options.DefaultSignInScheme = CookieAuthenticationDefaults.AuthenticationScheme;\r\n    options.DefaultAuthenticateScheme = CookieAuthenticationDefaults.AuthenticationScheme;\r\n    options.DefaultChallengeScheme = CookieAuthenticationDefaults.AuthenticationScheme;\r\n    options.DefaultScheme = CookieAuthenticationDefaults.AuthenticationScheme;\r\n\r\n    options.AddScheme<CookieAuthenticationHandler>(CookieAuthenticationDefaults.AuthenticationScheme, null);\r\n});\r\n```\r\n\r\nBut now I get the following error:\r\n\r\n> Unable to resolve service for type 'Microsoft.AspNetCore.Authentication.ISystemClock' while attempting to activate 'Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationHandler'.\r\n\r\nThe reason I tried using this approach, is that `AddCookie` no longer exists with the new method approach.\r\n\r\nWhat can I do to get this working?"},{"Id":"10517022676","Type":"IssuesEvent","CreatedAt":"2019-09-28T22:13:25","Actor":"FyiurAmron","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/41427","RelatedDescription":"Opened issue \"System.Text.Json fails on deserializing into sub-subclasses of system collections\" (#41427) at dotnet/corefx","RelatedBody":"When trying to deserialize into a class that has a class being a valid deserialization target for a collection higher in the class inheritance graph than its direct parent, the deserialization fails.\r\n\r\nExample code:\r\n```\r\nnamespace JsonProblem {\r\n\r\nusing System.Collections.Generic;\r\nusing System.Text.Json;\r\n\r\nclass ListString : List<string> {\r\n}\r\n\r\nclass MyList<T> : List<T> {\r\n}\r\n\r\nclass MyMyList<T> : MyList<T> {\r\n}\r\n\r\nclass MyListString : MyList<string> {\r\n}\r\n\r\nclass Program {\r\n    const string JSON = \"[\\\"test\\\"]\";\r\n\r\n    static void Main( string[] args ) {\r\n        JsonSerializer.Deserialize( JSON, typeof(string[]) ); // works\r\n        JsonSerializer.Deserialize( JSON, typeof(List<string>) ); // works\r\n        JsonSerializer.Deserialize( JSON, typeof(ListString) ); // also works\r\n        JsonSerializer.Deserialize( JSON, typeof(MyList<string>) ); // works\r\n        JsonSerializer.Deserialize( JSON, typeof(MyMyList<string>) ); // doesn't work\r\n        JsonSerializer.Deserialize( JSON, typeof(MyListString) ); // doesn't work\r\n    }\r\n}\r\n\r\n}\r\n```\r\n\r\nAll the above classes worked OK in Json.NET - IMVHO, the deserializer should handle them, which it doesn't."},{"Id":"10516310281","Type":"IssuesEvent","CreatedAt":"2019-09-28T16:36:26","Actor":"jasonkuo41","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/41426","RelatedDescription":"Opened issue \"API Proposal: Re-entrantable AsyncLock\" (#41426) at dotnet/corefx","RelatedBody":"Inspired by #34073 and it's related resources.\r\n\r\n## Usage\r\nInstead of using semaphore (SempahoreSlim) as a means to use to lock asynchronous content, which may result in deadlock if it is re-acquired without prior releasing on the same Task execution context.\r\n\r\nIt would be a good idea if we have a low cost, yet that prevents deadlocking upon re-entrant.\r\nInspired by #34073, I tested out the possibility by combining the usage of `AsyncLocal` and `SempahoreSlim`, [[Here in this Repo]](https://github.com/jasonkuo41/CellWars.Threading.AsyncLock).\r\n\r\nUpon writing tests, it is suggested that this is possibly do-able.\r\nHere's more of the detail of how I approached this idea:\r\n\r\n> AsyncLock utilizes two main classes SemphoreSlim and AsyncLocal; the actual lock is maintained by SemphoreSlim and the re-entrant check is done by using AsyncLocal.\r\n\r\n> When locking with AsyncLock, it returns an object implementing ILockHandle, which can either contain actual content that does the unlocking when Dispose() is called, or does absolutely nothing. The former one is acquired when the current Task has not acquired AsyncLock, the latter one is returned when AsyncLock detects when it already acquired the lock.\r\n\r\n> The detection of the current lock acquired by the current task is achieved through AsyncLocal, the underlying value of AsyncLocal is (almost) different when it's in different Task. When it's underlying value is null we know that the current Task hasn't acquired the lock and is put into the semaphore; if it's not null then we know the current Task has already acquired a lock given by this current AsyncLock instance, and would not await the semaphore and returns an empty ILockHandle.\r\n\r\n## Thoughts and Questions\r\n\r\nFew problems araised when there's a limitation of what AsyncLocal can do.\r\nIf the lock acquiring process is inside the scope of `ExecutionContext.SuppressFlow()`, this would effectively break the re-entrant check.\r\nA good solution I came up with would be further integrating with `Task`, making it maintain a record of acquired `AsyncLock` without being affected by `SuppressFlow` (or just make SuppressFlow ignore the tracking of acquired locks) "},{"Id":"10516175859","Type":"IssuesEvent","CreatedAt":"2019-09-28T15:38:45","Actor":"codexguy","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/41420","RelatedDescription":"Closed issue \"Unable to serialize ValueTuple using System.Text.Json\" (#41420) at dotnet/corefx","RelatedBody":"To reproduce:\r\nTake the sample default ASPNET Core 3.0 app (API-based template), change the WeatherForecast class to include a ValueTuple:\r\n\r\n    public class WeatherForecast\r\n    {\r\n...\r\n\r\n        public (int x, int y) Location { get; set; }\r\n    }\r\n\r\nChange the Get method to populate Location with arbitrary values. Run the project: JSON returned has an empty location. Serializing ValueTuple's is possible with Newtonsoft (being unable to do so wrecks existing code I have that uses ValueTuples successfully with Core 2.1, moving to Core 3.0)."}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"10516712604","Type":"PullRequestEvent","CreatedAt":"2019-09-28T19:35:07","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7667","RelatedDescription":"Merged pull request \"Add a doc on debugging CoreRT programs\" (#7667) at dotnet/corert","RelatedBody":"A couple useful tips."},{"Id":"10515879419","Type":"PullRequestEvent","CreatedAt":"2019-09-28T13:26:50","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7802","RelatedDescription":"Opened pull request \"Fix Windows debug information for classes\" (#7802) at dotnet/corert","RelatedBody":"Fixes a longstanding issue where we were emitting erroneous vfptr debug entries and incorrectly mangling class names. One could only inspect things as they were statically typed in the source (so if a variable was typed as `object` in the sources, you wouldn't see any fields in the native debugger, no matter what was assigned to it).\r\n\r\nIt wasn't too terrible, so I sort of just lived with it, but this should work.\r\n\r\nWith this, casting to base classes in the debugger works.\r\n\r\n## Before\r\n\r\n![before](https://user-images.githubusercontent.com/13110571/65817093-98550a00-e203-11e9-88ce-efd8109ae303.gif)\r\n\r\n\r\n## After\r\n\r\n![after](https://user-images.githubusercontent.com/13110571/65817095-9d19be00-e203-11e9-9ec7-73ffe4587b62.gif)\r\n"},{"Id":"10514196898","Type":"PullRequestEvent","CreatedAt":"2019-09-27T23:17:06","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7800","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr,corefx\" (#7800) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @GrabYourPitchforks @benaadams"},{"Id":"10511294262","Type":"PullRequestEvent","CreatedAt":"2019-09-27T15:09:04","Actor":"am11","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/7801","RelatedDescription":"Closed pull request \"Remove duplicate enum SystemVClassificationType\" (#7801) at dotnet/corert","RelatedBody":"Found the duplicate definition at: https://github.com/dotnet/corert/blob/a7ce92678876ba55a1c7a65c464363b51d777b4f/src/JitInterface/src/CorInfoTypes.cs#L1170"},{"Id":"10510278407","Type":"PullRequestEvent","CreatedAt":"2019-09-27T13:06:15","Actor":"am11","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7801","RelatedDescription":"Opened pull request \"Remove duplicate enum SystemVClassificationType\" (#7801) at dotnet/corert","RelatedBody":"Found the duplicate definition at: https://github.com/dotnet/corert/blob/a7ce92678876ba55a1c7a65c464363b51d777b4f/src/JitInterface/src/CorInfoTypes.cs#L1170"},{"Id":"10505849379","Type":"PullRequestEvent","CreatedAt":"2019-09-26T22:32:32","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7800","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr,corefx\" (#7800) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**"},{"Id":"10505835320","Type":"PullRequestEvent","CreatedAt":"2019-09-26T22:29:33","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7798","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr,corefx\" (#7798) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @GrabYourPitchforks @benaadams @stephentoub"},{"Id":"10504902164","Type":"IssuesEvent","CreatedAt":"2019-09-26T19:57:17","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/7799","RelatedDescription":"Opened issue \"CppCodeGen: Implement RVA-backed static fields\" (#7799) at dotnet/corert","RelatedBody":""},{"Id":"10496318197","Type":"PullRequestEvent","CreatedAt":"2019-09-25T21:19:00","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7798","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr,corefx\" (#7798) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**"},{"Id":"10496308214","Type":"PullRequestEvent","CreatedAt":"2019-09-25T21:17:25","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7797","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#7797) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas @stephentoub"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"10517322003","Type":"PullRequestEvent","CreatedAt":"2019-09-29T01:24:39","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/sdk/pull/3666","RelatedDescription":null,"RelatedBody":"will that work?"},{"Id":"10517321958","Type":"PullRequestEvent","CreatedAt":"2019-09-29T01:24:37","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/3666","RelatedDescription":"Closed pull request \"WIP Helix test\" (#3666) at dotnet/sdk","RelatedBody":"will that work?"},{"Id":"10516002023","Type":"PullRequestEvent","CreatedAt":"2019-09-28T14:22:33","Actor":"dotnet-maestro[bot]","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/3693","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/arcade\" (#3693) at dotnet/sdk","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190927.2\r\n- **Date Produced**: 9/27/2019 6:33 PM\r\n- **Commit**: 14abaee3dba41fbe608431fb6a4f4b2435dcac33\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19477.2\r\n  - **Microsoft.DotNet.SignTool** -> 5.0.0-beta.19477.2\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n"},{"Id":"10515700352","Type":"PullRequestEvent","CreatedAt":"2019-09-28T12:05:24","Actor":"dotnet-bot","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/3695","RelatedDescription":"Opened pull request \"Merge release/3.1.1xx to master\" (#3695) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/3.1.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.1.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.1.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.1.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."}],"ResultType":"GitHubEvent"},"Home-Issues":{"Issues":[{"Id":"475315730","IsPullRequest":false,"CreatedAt":"2019-07-31T19:23:23","Actor":"MeikTranel","Number":"148","RawContent":null,"Title":"Clarify guidelines in regards to Options and Requirements","State":"open","Body":"I'd be interested in which part of the project submission guidelines is optional and which are deal breaker requirements.\r\n\r\n- Is the Role Matrix laid out an absolute or (as can be read between the lines) just a preset, which may be subject to individual projects needs?\r\n- Is it a strong requirement that the project uses the contributor covenant CoC?","Url":"https://github.com/dotnet/foundation/issues/148","RelatedDescription":"Open issue \"Clarify guidelines in regards to Options and Requirements\" (#148)"},{"Id":"455670422","IsPullRequest":true,"CreatedAt":"2019-06-13T10:49:30","Actor":"gep13","Number":"147","RawContent":null,"Title":"(GH-111) Update Source Link location","State":"open","Body":"","Url":"https://github.com/dotnet/foundation/pull/147","RelatedDescription":"Open PR \"(GH-111) Update Source Link location\" (#147)"},{"Id":"455555823","IsPullRequest":true,"CreatedAt":"2019-06-13T06:28:59","Actor":"gep13","Number":"146","RawContent":null,"Title":"Update Cake Project Contacts","State":"closed","Body":"@jongalloway just noticed that this wasn't up to date.","Url":"https://github.com/dotnet/foundation/pull/146","RelatedDescription":"Closed or merged PR \"Update Cake Project Contacts\" (#146)"},{"Id":"441542047","IsPullRequest":true,"CreatedAt":"2019-05-09T18:35:22","Actor":"mitchelsellers","Number":"145","RawContent":null,"Title":"Edits to DNN Platform Information","State":"closed","Body":"Edits to reflect changes in repository structure with recent modifications to the overall project structure.","Url":"https://github.com/dotnet/foundation/pull/145","RelatedDescription":"Closed or merged PR \"Edits to DNN Platform Information\" (#145)"},{"Id":"437980746","IsPullRequest":true,"CreatedAt":"2019-05-03T20:10:38","Actor":"FlorianRappl","Number":"143","RawContent":null,"Title":"Add AngleSharp","State":"closed","Body":"cc @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/143","RelatedDescription":"Closed or merged PR \"Add AngleSharp\" (#143)"},{"Id":"426787230","IsPullRequest":true,"CreatedAt":"2019-05-03T20:08:40","Actor":"mairaw","Number":"141","RawContent":null,"Title":"add links to ML.NET docs","State":"closed","Body":"/cc @JRAlexander @shauheen \r\n\r\nTo match the info we have added for other projects","Url":"https://github.com/dotnet/foundation/pull/141","RelatedDescription":"Closed or merged PR \"add links to ML.NET docs\" (#141)"},{"Id":"440030132","IsPullRequest":true,"CreatedAt":"2019-05-03T20:08:15","Actor":"tomasherceg","Number":"144","RawContent":null,"Title":"Add DotVVM","State":"closed","Body":"cc @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/144","RelatedDescription":"Closed or merged PR \"Add DotVVM\" (#144)"},{"Id":"426787542","IsPullRequest":true,"CreatedAt":"2019-03-29T14:44:24","Actor":"mairaw","Number":"142","RawContent":null,"Title":"add docs samples link","State":"closed","Body":"@BillWagner should we add the samples project too?","Url":"https://github.com/dotnet/foundation/pull/142","RelatedDescription":"Closed or merged PR \"add docs samples link\" (#142)"},{"Id":"426658581","IsPullRequest":true,"CreatedAt":"2019-03-29T02:16:07","Actor":"scottaddie","Number":"139","RawContent":null,"Title":"Add link to ASP.NET Core docs","State":"closed","Body":"Provide a link to the docs site for ASP.NET Core.","Url":"https://github.com/dotnet/foundation/pull/139","RelatedDescription":"Closed or merged PR \"Add link to ASP.NET Core docs\" (#139)"},{"Id":"426666928","IsPullRequest":true,"CreatedAt":"2019-03-29T02:15:48","Actor":"BillWagner","Number":"140","RawContent":null,"Title":"add links to .NET docs","State":"closed","Body":"/cc @mairaw @scottaddie\r\n\r\nMaira, did I miss any project repos to tag?","Url":"https://github.com/dotnet/foundation/pull/140","RelatedDescription":"Closed or merged PR \"add links to .NET docs\" (#140)"},{"Id":"419205679","IsPullRequest":true,"CreatedAt":"2019-03-18T21:04:01","Actor":"MikeWilliams-UK","Number":"137","RawContent":null,"Title":"Add V3.1 repo and change documentation link","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/137","RelatedDescription":"Closed or merged PR \"Add V3.1 repo and change documentation link\" (#137)"},{"Id":"419897914","IsPullRequest":true,"CreatedAt":"2019-03-18T21:03:34","Actor":"devlead","Number":"138","RawContent":null,"Title":"Add Dave to cake.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/138","RelatedDescription":"Closed or merged PR \"Add Dave to cake.md\" (#138)"},{"Id":"391459677","IsPullRequest":false,"CreatedAt":"2019-03-08T19:00:06","Actor":"manne","Number":"123","RawContent":null,"Title":"Missing logo for Steeltoe","State":"closed","Body":"`https://brandfolder.com/pivotal-assets/attachments/ohxttd-7yxa60-clvf50/pivotal-assets-pivotal-genericfile.png` redirects to a sign in page\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L128-L130","Url":"https://github.com/dotnet/foundation/issues/123","RelatedDescription":"Closed issue \"Missing logo for Steeltoe\" (#123)"},{"Id":"417018694","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:32","Actor":"jkonicki","Number":"136","RawContent":null,"Title":"Fix logo and update team contributors","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/136","RelatedDescription":"Closed or merged PR \"Fix logo and update team contributors\" (#136)"},{"Id":"416428925","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"135","RawContent":null,"Title":"adds Umbraco logo","State":"closed","Body":"fixes #124 ","Url":"https://github.com/dotnet/foundation/pull/135","RelatedDescription":"Closed or merged PR \"adds Umbraco logo\" (#135)"},{"Id":"391459812","IsPullRequest":false,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"124","RawContent":null,"Title":"Missing logo for Umbraco","State":"closed","Body":"`https://fbcdn-profile-a.akamaihd.net/hprofile-ak-xap1/v/t1.0-1/p160x160/971596_519168901464439_566592989_n.png?oh=ce61e5b4cbd60c0d99c4164cbb05a434&oe=54F091C9&__gda__=1424472439_c9f76213a915bc2af88246f464f29e8b` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L149-L151","Url":"https://github.com/dotnet/foundation/issues/124","RelatedDescription":"Closed issue \"Missing logo for Umbraco\" (#124)"},{"Id":"416427614","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:45","Actor":"manne","Number":"134","RawContent":null,"Title":"adds the prism logo","State":"closed","Body":"fixes #126 ","Url":"https://github.com/dotnet/foundation/pull/134","RelatedDescription":"Closed or merged PR \"adds the prism logo\" (#134)"},{"Id":"391460225","IsPullRequest":false,"CreatedAt":"2019-03-08T18:58:44","Actor":"manne","Number":"126","RawContent":null,"Title":"No logo provided for Prism","State":"closed","Body":"Can/should this [image](http://prismlibrary.github.io/images/logo-prism-symbol@2x.png) be used?\r\n\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L155-L157","Url":"https://github.com/dotnet/foundation/issues/126","RelatedDescription":"Closed issue \"No logo provided for Prism\" (#126)"},{"Id":"416157860","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:26","Actor":"glennawatson","Number":"133","RawContent":null,"Title":"Add additional ReactiveUI organization projects.","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/133","RelatedDescription":"Closed or merged PR \"Add additional ReactiveUI organization projects.\" (#133)"},{"Id":"407251900","IsPullRequest":true,"CreatedAt":"2019-02-18T17:45:44","Actor":"Potapy4","Number":"132","RawContent":null,"Title":"Update MVVM project logo","State":"closed","Body":"Fixes dotnet/dotnetfoundation-website#72\r\nFixes #125","Url":"https://github.com/dotnet/foundation/pull/132","RelatedDescription":"Closed or merged PR \"Update MVVM project logo\" (#132)"},{"Id":"391459919","IsPullRequest":false,"CreatedAt":"2019-02-18T17:45:44","Actor":"manne","Number":"125","RawContent":null,"Title":"Missing logo for MVVM Light Toolkit","State":"closed","Body":"`https://raw.githubusercontent.com/paulcbetts/mvvmlight/master/Installer/InstallItems/html/MVVM_BlackText_190x147.png` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L137-L139","Url":"https://github.com/dotnet/foundation/issues/125","RelatedDescription":"Closed issue \"Missing logo for MVVM Light Toolkit\" (#125)"},{"Id":"406210463","IsPullRequest":true,"CreatedAt":"2019-02-18T17:44:39","Actor":"NextTurn","Number":"131","RawContent":null,"Title":"Replace http links with https links","State":"closed","Body":"Replace http links with https where possible - both returned 200 OK.","Url":"https://github.com/dotnet/foundation/pull/131","RelatedDescription":"Closed or merged PR \"Replace http links with https links\" (#131)"},{"Id":"399191617","IsPullRequest":true,"CreatedAt":"2019-02-02T11:04:15","Actor":"NextTurn","Number":"130","RawContent":null,"Title":"Update Open XML links","State":"closed","Body":"OpenXmlDeveloper.org was shut down long ago.\r\n\r\nThe content has been moved to EricWhite.com.","Url":"https://github.com/dotnet/foundation/pull/130","RelatedDescription":"Closed or merged PR \"Update Open XML links\" (#130)"},{"Id":"395863354","IsPullRequest":true,"CreatedAt":"2019-01-09T22:28:14","Actor":"ErikEJ","Number":"128","RawContent":null,"Title":"Update of EF description","State":"closed","Body":"@divega !","Url":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Closed or merged PR \"Update of EF description\" (#128)"},{"Id":"395901602","IsPullRequest":true,"CreatedAt":"2019-01-05T03:23:39","Actor":"MarcBruins","Number":"129","RawContent":null,"Title":"Update to absolute path","State":"closed","Body":"Update to absolute path so that when this list is copied the link will actually work","Url":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Closed or merged PR \"Update to absolute path\" (#129)"},{"Id":"395705579","IsPullRequest":true,"CreatedAt":"2019-01-04T00:22:42","Actor":"carloscds","Number":"127","RawContent":null,"Title":"Update documentation information","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/127","RelatedDescription":"Closed or merged PR \"Update documentation information\" (#127)"},{"Id":"391459057","IsPullRequest":true,"CreatedAt":"2019-01-03T04:47:09","Actor":"manne","Number":"122","RawContent":null,"Title":"targets the existing document","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/122","RelatedDescription":"Closed or merged PR \"targets the existing document\" (#122)"},{"Id":"384569679","IsPullRequest":true,"CreatedAt":"2019-01-03T04:46:31","Actor":"JamesNK","Number":"121","RawContent":null,"Title":"Add Newtonsoft.Json","State":"closed","Body":"// @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/121","RelatedDescription":"Closed or merged PR \"Add Newtonsoft.Json\" (#121)"},{"Id":"384212839","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:50","Actor":"stefanov-stefan","Number":"120","RawContent":null,"Title":"Added Telerik info","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/120","RelatedDescription":"Closed or merged PR \"Added Telerik info\" (#120)"},{"Id":"384212448","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:22","Actor":"stefanov-stefan","Number":"119","RawContent":null,"Title":"Added Telerik UWP proj","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/119","RelatedDescription":"Closed or merged PR \"Added Telerik UWP proj\" (#119)"}],"ResultType":"GitHubIssue"},"CoreCLR-Issues":{"Issues":[{"Id":"499822985","IsPullRequest":false,"CreatedAt":"2019-09-28T21:28:04","Actor":"faruknane","Number":"26935","RawContent":null,"Title":"Is it possible to specify the code blocks that are most used to JIT in order to let it optimize those blocks?","State":"open","Body":"I have been learning a lot these days and heard of JIT optimizes codes based on their statistical information like how frequently they are used by letting the code work without optimization by a few times and measuring it. Some codes are not optimized to keep the memory usage lower for example and some codes needs to be optimized at most to gain performance. Before JIT testing my code statistics, can I inform JIT that some methods need to be optimized the most? So it performs at best from the beginning. By this way, I don't need to wait it (compiler) to explore which codes need optimizing. \r\n\r\nExample I have a method A();\r\nRun A 20 times -> 450ms\r\nRun A 2000 times -> 36000ms\r\n\r\nSo can I somehow inform JIT that when I run A 20 times, it takes 360ms? \r\n\r\nNote: [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)] these doesn't help to do so.","Url":"https://github.com/dotnet/coreclr/issues/26935","RelatedDescription":"Open issue \"Is it possible to specify the code blocks that are most used to JIT in order to let it optimize those blocks?\" (#26935)"},{"Id":"499799747","IsPullRequest":true,"CreatedAt":"2019-09-28T17:40:33","Actor":"benaadams","Number":"26934","RawContent":null,"Title":"Use ValueStringBuilder in preference to StringBuilderCache","State":"open","Body":"Saves 44MB of allocations for the 20k Exceptions thrown async, caught, captured, `.Throw()`, caught and then `throw` https://gist.github.com/benaadams/49633777609ed91e8b41624b72026bf9\r\n\r\nBefore\r\n![image](https://user-images.githubusercontent.com/1142958/65823949-a6347a80-e257-11e9-9b43-edcf30abb283.png)\r\n\r\n\r\nAfter\r\n![image](https://user-images.githubusercontent.com/1142958/65823953-b3ea0000-e257-11e9-8998-54c8b43a567e.png)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/26934","RelatedDescription":"Open PR \"Use ValueStringBuilder in preference to StringBuilderCache\" (#26934)"},{"Id":"499793866","IsPullRequest":true,"CreatedAt":"2019-09-28T16:45:45","Actor":"benaadams","Number":"26933","RawContent":null,"Title":"Use runtime cache for GetDefaultConstructor","State":"open","Body":"The QCall GetDefaultConstructor would always allocate; however we can use the RuntimeType Constructor cache that already exists for this purpose which skips the allocation.\r\n\r\nThrowing, catching and `.ToString`ing 80k+ Exceptions (effects GetAttributes and CustomAttributes.IsDefined)\r\n\r\nBefore\r\n\r\n![image](https://user-images.githubusercontent.com/1142958/65819681-63eb4900-e217-11e9-9467-da15628a8bfe.png)\r\n\r\nAfter\r\n\r\n![image](https://user-images.githubusercontent.com/1142958/65819688-6e0d4780-e217-11e9-84ae-d36826a9bdc9.png)\r\n","Url":"https://github.com/dotnet/coreclr/pull/26933","RelatedDescription":"Open PR \"Use runtime cache for GetDefaultConstructor\" (#26933)"},{"Id":"499765734","IsPullRequest":false,"CreatedAt":"2019-09-28T14:26:18","Actor":"deinok","Number":"26931","RawContent":null,"Title":"[Snap] [dotnet-sdk] Segmentation Fault","State":"closed","Body":"OS: ubuntu-desktop_19.04\r\nSDK: 3.0.100\r\n\r\n# How to reproduce it\r\n- install dotnet-sdk via snap and alias dotnet-sdk.dotnet to dotnet\r\n- create a webapi project using the CLI\r\n- Run `dotnet run` - No message / Not running\r\n- Run `dotnet *.dll` - Works as expected\r\n- Run the executable generated -  `Segmentation fault (core dumped)` ","Url":"https://github.com/dotnet/coreclr/issues/26931","RelatedDescription":"Closed issue \"[Snap] [dotnet-sdk] Segmentation Fault\" (#26931)"},{"Id":"499764043","IsPullRequest":true,"CreatedAt":"2019-09-28T12:11:40","Actor":"dotnet-maestro[bot]","Number":"26930","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d21e78e6-fa30-42ea-2807-08d690bc5860)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190927.25\r\n- **Date Produced**: 9/28/2019 5:48 AM\r\n- **Commit**: a323ccda8bb6792254b4e447772c48ae03281a30\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19477.25\r\n\r\n[marker]: <> (End:d21e78e6-fa30-42ea-2807-08d690bc5860)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/26930","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/core-setup\" (#26930)"},{"Id":"499175241","IsPullRequest":true,"CreatedAt":"2019-09-28T08:21:56","Actor":"hoyosjs","Number":"26911","RawContent":null,"Title":"Check for nullity of the context in FuncEval setup's SP alignment checks","State":"closed","Body":"Func-evals in the case of a hijacked thread that is handling a first or second hand exception are not expected to necessarily have non-null filter contexts - this can happen during user exceptions handled by the debugger or nested func-evals. The alignment assumes this is not the case. However, the case of an exception just queues the func-eval to be executed once the exception handling logic has executed. The SP alignment check might need to be done here once the queued item starts.","Url":"https://github.com/dotnet/coreclr/pull/26911","RelatedDescription":"Closed or merged PR \"Check for nullity of the context in FuncEval setup's SP alignment checks\" (#26911)"},{"Id":"499783418","IsPullRequest":false,"CreatedAt":"2019-09-28T07:10:22","Actor":"Symbai","Number":"26932","RawContent":null,"Title":"A fatal error occurred. The required library hostfxr.dll could not be found.","State":"open","Body":"1. Created a plain .NET Core 3.0 WPF project\r\n2. Rebuild in release mode\r\n3. Copied the files in the release folder to a new computer which is missing .NET Core at all\r\n![image](https://user-images.githubusercontent.com/14368203/65813024-c2d0a400-e1be-11e9-8fb0-c154b3c273ad.png)\r\n4. Visited https://dotnet.microsoft.com/download on this computer and downloaded the `Download .NET Core Runtime for desktop apps` and installed it\r\n5. Tried to start the program, nothing happens. \r\n\r\nThe event viewer says:\r\n```\r\nDescription: A .NET Core application failed.\r\nApplication: WpfApp12.exe\r\nPath: C:\\Users\\TestAccount\\Desktop\\WpfApp12.exe\r\nMessage: A fatal error occurred. The required library hostfxr.dll could not be found.\r\nIf this is a self-contained application, that library should exist in [C:\\Users\\TestAccount\\Desktop\\].\r\nIf this is a framework-dependent application, install the runtime in the global location [C:\\Program Files\\dotnet] or use the DOTNET_ROOT environment variable to specify the runtime location or register the runtime location in [HKLM\\SOFTWARE\\dotnet\\Setup\\InstalledVersions\\x64\\InstallLocation].\r\n```\r\n\r\n//edit: `dotnet publish` creates >290 files even when not self contained with an overall size of 150mb. My thought was that installing the runtime would install these >290 files and avoid having me to ship a 150mb application. Similar to .NET Framework. If that's not the case then: What exactly is the runtime installer for? And whats the purpose of self-contained when even the not self-contained application would force me to ship >290 files and >150mb?\r\n","Url":"https://github.com/dotnet/coreclr/issues/26932","RelatedDescription":"Open issue \"A fatal error occurred. The required library hostfxr.dll could not be found.\" (#26932)"},{"Id":"499715471","IsPullRequest":false,"CreatedAt":"2019-09-28T02:28:02","Actor":"nnhy","Number":"26929","RawContent":null,"Title":"Failed to load libhostfxr.so, error: /lib/libstdc++.so.6: version `GLIBCXX_3.4.18' not found","State":"open","Body":"root@A1:~# uname -a\r\nLinux A1 3.2.0 #561 Mon Mar 13 13:36:13 CST 2017 armv7l GNU/Linux\r\nroot@A1:~# cat /proc/version \r\nLinux version 3.2.0 (gcc version 4.7.3 20130226 (prerelease) (crosstool-NG linaro-1.13.1-4.7-2013.03-20130313 - Linaro GCC 2013.03) ) #561 Mon Mar 13 13:36:13 CST 2017\r\nroot@A1:~# dotnet\r\n\r\nUsage: dotnet [options]\r\nUsage: dotnet [path-to-application]\r\n\r\nOptions:\r\n  -h|--help         Display help.\r\n  --info            Display .NET Core information.\r\n  --list-sdks       Display the installed SDKs.\r\n  --list-runtimes   Display the installed runtimes.\r\n\r\npath-to-application:\r\n  The path to an application .dll file to execute.\r\nroot@A1:~# dotnet --info\r\nFailed to load ¼, error: /lib/libstdc++.so.6: version `GLIBCXX_3.4.18' not found (required by /usr/share/dotnet/host/fxr/3.0.0/libhostfxr.so)\r\nThe library libhostfxr.so was found, but loading it from /usr/share/dotnet/host/fxr/3.0.0/libhostfxr.so failed\r\n  - Installing .NET Core prerequisites might help resolve this problem.\r\n     https://go.microsoft.com/fwlink/?linkid=2063370\r\nroot@A1:~# strings /lib/libstdc++.so.6 | grep GLIBCXX\r\nGLIBCXX_3.4\r\nGLIBCXX_3.4.1\r\nGLIBCXX_3.4.2\r\nGLIBCXX_3.4.3\r\nGLIBCXX_3.4.4\r\nGLIBCXX_3.4.5\r\nGLIBCXX_3.4.6\r\nGLIBCXX_3.4.7\r\nGLIBCXX_3.4.8\r\nGLIBCXX_3.4.9\r\nGLIBCXX_3.4.10\r\nGLIBCXX_3.4.11\r\nGLIBCXX_3.4.12\r\nGLIBCXX_3.4.13\r\nGLIBCXX_3.4.14\r\nGLIBCXX_3.4.15\r\nGLIBCXX_3.4.16\r\nGLIBCXX_3.4.17\r\nGLIBCXX_DEBUG_MESSAGE_LENGTH\r\n\r\n","Url":"https://github.com/dotnet/coreclr/issues/26929","RelatedDescription":"Open issue \"Failed to load libhostfxr.so, error: /lib/libstdc++.so.6: version `GLIBCXX_3.4.18' not found\" (#26929)"},{"Id":"499500379","IsPullRequest":true,"CreatedAt":"2019-09-27T23:31:29","Actor":"am11","Number":"26922","RawContent":null,"Title":"Remove duplicate enum SystemVClassificationType","State":"closed","Body":"Found the duplicate definition at: https://github.com/dotnet/coreclr/blob/5afed1b6ce4f3bef71b7a69ac627f313d39e1458/src/tools/crossgen2/Common/JitInterface/CorInfoTypes.cs#L1170","Url":"https://github.com/dotnet/coreclr/pull/26922","RelatedDescription":"Closed or merged PR \"Remove duplicate enum SystemVClassificationType\" (#26922)"},{"Id":"499615821","IsPullRequest":true,"CreatedAt":"2019-09-27T23:01:09","Actor":"jkotas","Number":"26926","RawContent":null,"Title":"Delete dead code","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/26926","RelatedDescription":"Closed or merged PR \"Delete dead code\" (#26926)"},{"Id":"499675288","IsPullRequest":false,"CreatedAt":"2019-09-27T22:23:04","Actor":"swaroop-sridhar","Number":"26928","RawContent":null,"Title":"PEFile: FlatImageImageLayout created twice for loading R2R images on Unix","State":"open","Body":"When an R2R assembly is loaded on Linux/Mac, the PE File is first loaded using `FlatImageLayout`, and then the headers are checked to see if it is pure IL (in which case the `FlatImageLayout` will suffice).  If not, the created layout object is released, and the assembly is loaded via `MappedImageLayout`.\r\n\r\nHowever, the `MappedImageLayout` again constructs a `FlatImageLayout` as its \"inner\" layout, thus remapping the PE file. \r\n\r\nThe work here is to cache the original `FlatImageLayout` object and associated file mappings for use with `MappedImageLayout`.\r\n\r\nThis path doesn't affect Windows, since assemblies are loaded via `LoadLibrary()` calls (`LoadedImageLayout`).  ","Url":"https://github.com/dotnet/coreclr/issues/26928","RelatedDescription":"Open issue \"PEFile: FlatImageImageLayout created twice for loading R2R images on Unix\" (#26928)"},{"Id":"499658811","IsPullRequest":true,"CreatedAt":"2019-09-27T21:27:29","Actor":"SrivastavaAnubhav","Number":"26927","RawContent":null,"Title":"Parallelize JIT calls","State":"open","Body":"SuperILC/Performance measurement changes\r\n- Separate JIT start/stop events into JitPhase and JitMethod so we can keep track of total wall-clock time and per-method info (e.g. number of methods JITed) separately (respectively).\r\n\r\nReadyToRun compilation changes\r\n- Compile each batch of methods (after dependency analysis) in parallel\r\n- Create a new CorInfoImpl per thread, instead of just one\r\n- Use NodeCache (thread-safe) instead of Dictionary for node caches in ReadyToRunNodeFactory and ReadyToRunSymbolNodeFactory\r\n- Change Dictionary in ModuleTokenResolver, MetadataFieldLayoutAlgorithm, and CompilationModuleGroup to ConcurrentDictionary\r\n\r\nResults (on my Surface laptop)\r\n- CoreLib compilation time: 7.1s -> 5.1s (~ -28%)\r\n- CoreLib JIT wall-clock time: 3.6s -> 2.0s (~ -44%)\r\n","Url":"https://github.com/dotnet/coreclr/pull/26927","RelatedDescription":"Open PR \"Parallelize JIT calls\" (#26927)"},{"Id":"499574135","IsPullRequest":false,"CreatedAt":"2019-09-27T18:02:39","Actor":"jnm2","Number":"26925","RawContent":null,"Title":"Should ResolveEventArgs.Name be nullable?","State":"closed","Body":"Is [`AppDomain.AssemblyResolve`](https://docs.microsoft.com/en-us/dotnet/api/system.appdomain.assemblyresolve?view=netcore-3.0) ever raised with a null [`ResolveEventArgs.Name`](https://docs.microsoft.com/en-us/dotnet/api/system.resolveeventargs.name?view=netcore-3.0) property? It doesn't seem like anything useful could be done by the event handler if `Name` is null.\r\n\r\nIt would save having to write `if (e.Name is null) return null;` in every handler if `ResolveEventArgs.Name` could be non-nullable to guarantee that the handler won't be called unless there is some name.\r\n\r\nhttps://github.com/dotnet/corefx/blob/967eb3c5cb5fd36c8bb56d06f4c840f6a7a5a754/src/Common/src/CoreLib/System/ResolveEventArgs.cs#L11-L23","Url":"https://github.com/dotnet/coreclr/issues/26925","RelatedDescription":"Closed issue \"Should ResolveEventArgs.Name be nullable?\" (#26925)"},{"Id":"499221482","IsPullRequest":true,"CreatedAt":"2019-09-27T17:32:54","Actor":"franksinankaya","Number":"26914","RawContent":null,"Title":"Replace hfaType with GetHfaType()","State":"closed","Body":"@am11 @jkotas @janvorli @sandreenko ","Url":"https://github.com/dotnet/coreclr/pull/26914","RelatedDescription":"Closed or merged PR \"Replace hfaType with GetHfaType()\" (#26914)"},{"Id":"499501323","IsPullRequest":true,"CreatedAt":"2019-09-27T17:22:23","Actor":"Youssef1313","Number":"26923","RawContent":null,"Title":"typo and add language identifier","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/26923","RelatedDescription":"Closed or merged PR \"typo and add language identifier\" (#26923)"},{"Id":"499550964","IsPullRequest":false,"CreatedAt":"2019-09-27T17:00:15","Actor":"agoretsky","Number":"26924","RawContent":null,"Title":"Port fix available memory extraction on Linux to 3.1 release","State":"open","Body":"Issue to track porting of #26764 to 3.1","Url":"https://github.com/dotnet/coreclr/issues/26924","RelatedDescription":"Open issue \"Port fix available memory extraction on Linux to 3.1 release\" (#26924)"},{"Id":"499409369","IsPullRequest":true,"CreatedAt":"2019-09-27T13:57:11","Actor":"dotnet-maestro[bot]","Number":"26920","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d21e78e6-fa30-42ea-2807-08d690bc5860)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190927.1\r\n- **Date Produced**: 9/27/2019 10:07 AM\r\n- **Commit**: 7e3c99a9229d29443b94770de5628f066bfa17fa\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19477.1\r\n\r\n[marker]: <> (End:d21e78e6-fa30-42ea-2807-08d690bc5860)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/26920","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#26920)"},{"Id":"499385754","IsPullRequest":false,"CreatedAt":"2019-09-27T13:34:22","Actor":"LunicLynx","Number":"26919","RawContent":null,"Title":"Missing [Serializable] on List<>.Enumerator","State":"closed","Body":"I just ran into an Serialization issue with List<>.Enumerator.\r\n\r\nThis worked on .NET Framework, but doesn't work on .NET Core.\r\n\r\nThe documentation states that the Enumerator should have the Serializable attribute, but currently it doesn't.\r\n\r\nDocs:\r\nhttps://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1.enumerator?view=netcore-3.0\r\n\r\nCode:\r\nhttps://github.com/dotnet/coreclr/blob/0d1c180164555513cbdb206dd4546007cbb3a42c/src/System.Private.CoreLib/shared/System/Collections/Generic/List.cs#L1075-L1079\r\n","Url":"https://github.com/dotnet/coreclr/issues/26919","RelatedDescription":"Closed issue \"Missing [Serializable] on List<>.Enumerator\" (#26919)"},{"Id":"499226170","IsPullRequest":true,"CreatedAt":"2019-09-27T13:27:31","Actor":"Youssef1313","Number":"26915","RawContent":null,"Title":"Typo: retreive => retrieve","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/26915","RelatedDescription":"Closed or merged PR \"Typo: retreive => retrieve\" (#26915)"},{"Id":"499427777","IsPullRequest":false,"CreatedAt":"2019-09-27T12:51:54","Actor":"AdamSpeight2008","Number":"26921","RawContent":null,"Title":"Extend generic constraint checks to cover the attribute <Flags> on enum.","State":"open","Body":"It would be helpful if the clr could valid that a enum constraint, also has the attribute `System.Flags`\r\nSo the it possible to implement generic methods that apply to all enums that are semantically treated as flags.\r\n\r\neg.\r\n```vbnet\r\n<Extension>\r\nPublic Function AreAllFlagsSet(Of T As {Structure, <Flags>Enum})( value As T, flags As T ) As T\r\n  Return (value And flags) = flags\r\nEnd Function\r\n\r\n<Extension>\r\nPublic Function AnyOfFlagsSet(Of T As {Structure, <Flags>Enum})( value As T, flags As T ) As T\r\n  Return (value And flags) <> 0\r\nEnd Function\r\n\r\n<Extension>\r\nPublic Function SetFlags(Of T As {Structure, <Flags>Enum})( value As T, flags As T ) As T\r\n  Return value Or flags\r\nEnd Function\r\n\r\n<Extension>\r\nPublic Function ClearFlags(Of T As {Structure, <Flags>Enum})( value As T, flags As T ) As T\r\n  Return value And Not flags\r\nEnd Function\r\n```\r\n\r\nNote: I implemented a set of operators over `flags enum` that effectively lowered the implementation in to the above implementations. An effect of do that was constant folding was applied a compile-time, effectively optimising the checks.  ","Url":"https://github.com/dotnet/coreclr/issues/26921","RelatedDescription":"Open issue \"Extend generic constraint checks to cover the attribute <Flags> on enum.\" (#26921)"},{"Id":"499303582","IsPullRequest":true,"CreatedAt":"2019-09-27T08:14:42","Actor":"davmason","Number":"26918","RawContent":null,"Title":"Create IL Rewriting Basics.md","State":"open","Body":"@williamXieMSFT asked me to create a short article on IL rewriting and point to CLR Instrumentation Engine so folks who are interested in profiling know about CLRIE.\r\n\r\nIs this along the lines of what you expected? I can flesh out areas more if necessary (although adding full instructions on how to rewrite IL would not be feasible in the short term).","Url":"https://github.com/dotnet/coreclr/pull/26918","RelatedDescription":"Open PR \"Create IL Rewriting Basics.md\" (#26918)"},{"Id":"499287395","IsPullRequest":false,"CreatedAt":"2019-09-27T07:38:16","Actor":"tmds","Number":"26917","RawContent":null,"Title":"dotnet segfaults when COMPlus_PerfMapEnabled=1","State":"closed","Body":"```\r\n$ dotnet --version\r\n3.0.100\r\n$ COMPlus_PerfMapEnabled=1 dotnet new console\r\nGetting ready...\r\nSegmentation fault (core dumped)\r\n```\r\nstacktrace:\r\n```\r\n(gdb) bt\r\n#0  0x00007ffff6f77caa in PerfInfo::LogImage(PEFile*, char16_t*) () from /home/tmds/Downloads/dotnet-3.0/shared/Microsoft.NETCore.App/3.0.0/libcoreclr.so\r\n#1  0x00007ffff6f76e57 in PerfMap::LogImage(PEFile*) () from /home/tmds/Downloads/dotnet-3.0/shared/Microsoft.NETCore.App/3.0.0/libcoreclr.so\r\n#2  0x00007ffff70b156a in Assembly::CreateDynamic(AppDomain*, CreateDynamicAssemblyArgs*) ()\r\n   from /home/tmds/Downloads/dotnet-3.0/shared/Microsoft.NETCore.App/3.0.0/libcoreclr.so\r\n#3  0x00007ffff710552a in AppDomainNative::CreateDynamicAssembly(AssemblyNameBaseObject*, StackCrawlMark*, int) ()\r\n   from /home/tmds/Downloads/dotnet-3.0/shared/Microsoft.NETCore.App/3.0.0/libcoreclr.so\r\n```\r\n","Url":"https://github.com/dotnet/coreclr/issues/26917","RelatedDescription":"Closed issue \"dotnet segfaults when COMPlus_PerfMapEnabled=1\" (#26917)"},{"Id":"499207948","IsPullRequest":true,"CreatedAt":"2019-09-27T06:13:57","Actor":"franksinankaya","Number":"26913","RawContent":null,"Title":"Rename GetIsVararg to IsVararg","State":"closed","Body":"@am11 @jkotas @janvorli @sandreenko ","Url":"https://github.com/dotnet/coreclr/pull/26913","RelatedDescription":"Closed or merged PR \"Rename GetIsVararg to IsVararg\" (#26913)"},{"Id":"499241126","IsPullRequest":true,"CreatedAt":"2019-09-27T05:26:55","Actor":"jakobbotsch","Number":"26916","RawContent":null,"Title":"Add csproj and bash script for crossgen2 ThunkGenerator","State":"open","Body":"I have had to run this from Linux twice and both times I have had to create a csproj first because even using the `csc` that comes with the SDK does not automatically add the needed references.\r\n\r\nPTAL @MichalStrehovsky ","Url":"https://github.com/dotnet/coreclr/pull/26916","RelatedDescription":"Open PR \"Add csproj and bash script for crossgen2 ThunkGenerator\" (#26916)"},{"Id":"499190619","IsPullRequest":true,"CreatedAt":"2019-09-27T01:44:14","Actor":"303248153","Number":"26912","RawContent":null,"Title":"Fix out of range access in GetRecycleMemoryInfo (#26873)","State":"open","Body":"Related to #26873 \r\n\r\nOn linux, GetCurrentProcessorNumber which uses sched_getcpu() can return a value greater than the number of processors reported by sched_getaffinity with CPU_COUNT or sysconf(_SC_NPROCESSORS_CONF). For example, `taskset -c 2,3 ./MyApp` will make CPU_COUNT be 2 but sched_getcpu() can return 2 or 3, and OpenVZ kernel can make `sysconf(_SC_NPROCESSORS_CONF)` return a limited cpu count but sched_getcpu() still report the real processor number.\r\n\r\nWe should use `GetCurrentProcessorNumber()%NumberOfProcessors` for the array index of pRecycledListPerProcessor to avoid out of range access.\r\n\r\n------\r\n\r\nAlso I hope it could merge to 3.0.x release so my openvz vps can upgrade .NET Core to 3.0 sooner :|","Url":"https://github.com/dotnet/coreclr/pull/26912","RelatedDescription":"Open PR \"Fix out of range access in GetRecycleMemoryInfo (#26873)\" (#26912)"},{"Id":"499152147","IsPullRequest":true,"CreatedAt":"2019-09-26T22:53:50","Actor":"brianrob","Number":"26910","RawContent":null,"Title":"Fix Segfault in PerfInfo Image Logging","State":"open","Body":"## Description\r\n\r\nLimits entries in the perfinfo-<pid>.map file to disk-based assemblies that are ready to run images.\r\n\r\n## Customer Impact\r\n\r\nFixes an AV that occurred when dynamically generated assemblies are loaded when `COMPlus_PerfMapEnabled=1`.  The result of profiling on Linux should be unchanged.\r\n\r\n## Regression\r\n\r\nThis is a regression from 3.0-preview9 which occurred due to the fact that new versions of perf_events are now emitting virtual addresses instead of file offsets.  The change that caused this regression was a reaction to the perf_events change.\r\n\r\n## Risk\r\n\r\nMinimal, and should be limited to when `COMPlus_PerfMapEnabled=1`.\r\n\r\n## Tests\r\n\r\nNo tests added as part of this change.  It would be useful to do so, but will require a mechanism to set environment variables before the process starts.  Recommend following up on this.\r\n\r\nFixes #26883","Url":"https://github.com/dotnet/coreclr/pull/26910","RelatedDescription":"Open PR \"Fix Segfault in PerfInfo Image Logging\" (#26910)"},{"Id":"499117245","IsPullRequest":false,"CreatedAt":"2019-09-26T21:08:06","Actor":"sanchoflat","Number":"26909","RawContent":null,"Title":"VS2019.3.0 \"Hello World\" stackoverflow exception","State":"open","Body":"Created empty .net core 3.0 console project. Press F5 and it fell down with StackOverFlow Exception. .exe file works from Debug folder fine. \r\n\r\n**System**\r\n```\r\nWindows 10\r\nVisualStudio 2019.3.0\r\n.NET Core Version: 3.0.100\r\n.NET Core Commit: 04339c3a26\r\n```\r\n\r\n**Exception details** \r\n```\r\nSystem.StackOverflowException\r\nHResult=0x800703E9\r\nMessage=Exception of type 'System.StackOverflowException' was thrown.\r\n```\r\n\r\n![Animation](https://user-images.githubusercontent.com/6221261/65725036-608e7b00-e0ba-11e9-8f90-5a78a09ca78e.gif)\r\n","Url":"https://github.com/dotnet/coreclr/issues/26909","RelatedDescription":"Open issue \"VS2019.3.0 \"Hello World\" stackoverflow exception\" (#26909)"},{"Id":"498843381","IsPullRequest":true,"CreatedAt":"2019-09-26T19:32:14","Actor":"dotnet-maestro[bot]","Number":"26906","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d21e78e6-fa30-42ea-2807-08d690bc5860)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190925.24\r\n- **Date Produced**: 9/26/2019 7:03 AM\r\n- **Commit**: d0160877a2485212c80f3bc2a2ded2d3719e1d28\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19475.24\r\n\r\n[marker]: <> (End:d21e78e6-fa30-42ea-2807-08d690bc5860)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/26906","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#26906)"},{"Id":"499072584","IsPullRequest":true,"CreatedAt":"2019-09-26T19:27:10","Actor":"trylek","Number":"26908","RawContent":null,"Title":"Preparatory changes for implementing Crossgen2 pipeline","State":"open","Body":"1) Modify CoreCLR pipelines to use the zipping / unzipping templates\r\nfor manipulating the product build.\r\n\r\n2) Pass the crossgen option to product build so that it crossgens the\r\nframework assemblies.\r\n\r\n3) Fix duplicate variable definitions in xplat-test-job vs. build-job.\r\n\r\n4) Optimize the pipeline by reusing managed artifacts across architectures.\r\n\r\nBased on Jan Vorlicek's explanation Crossgen compilation takes place\r\nat execution time using a command injected to the cmd / sh execution\r\nscript so we should be good with architecture independence.\r\n\r\nFor now I'm splitting Windows builds per bitness as R2R runs have some\r\nweird dependency on the Machine ID stored in the PE header I don't\r\nwant to waste time investigating right now, I'll tackle that in a follow-up\r\nchange.\r\n\r\nEven with this limitation, I believe there's still overall benefit to this\r\nadditional cleanup change. Before my split of managed and native\r\ncomponents, PR runs included 16 test build jobs. My initial merge\r\nreduced this to 13 and this change further gets it down to 9.\r\n\r\n<b>Future work</b>: After fixing the R2R issue we should be able\r\nto unify the 32/64-bit Windows test build jobs further reducing the\r\nnumber of test build jobs to 7.\r\n\r\nWe should be able to get down to 3 but that requires more substantial\r\nchanges to how platform-matrix works - basically creating a custom\r\nversion of platform-matrix for test-job emitting the JIT-ted, R2R,\r\nCoreFX and possibly CoreFX R2R (that we don't have now) at once\r\nso that it can optimize test build jobs across all of these.\r\n\r\nUltimately, once we manage to unify Windows and Unix managed\r\ntest artifacts, it should be just 2 - OSX x64 debug and OSX x64\r\nrelease. I don't see how to get below that.\r\n\r\nThanks\r\n\r\nTomas\r\n\r\nP.S. I tested a slightly older version of this change earlier today on the\r\ninternal dotnet-coreclr pipeline and it was mostly passing apart from\r\nthe Windows bitness issue I have fixed since with an additional commit.","Url":"https://github.com/dotnet/coreclr/pull/26908","RelatedDescription":"Open PR \"Preparatory changes for implementing Crossgen2 pipeline\" (#26908)"},{"Id":"499030565","IsPullRequest":false,"CreatedAt":"2019-09-26T13:01:22","Actor":"pr8x","Number":"26907","RawContent":null,"Title":"Reducing the size of crash dumps (Windows)","State":"open","Body":"I am hosting a dotnet module inside my native C++ application and use google breakpad to generate minidumps. I noticed that only `MiniDumpWithFullMemory` seems to be useful for getting proper managed stacks. Some of these dumps can get quite big however. I was wondering if you guys have some clue on reducing the size a bit. Exporting \"every readable page in the process\" seems quite extreme. \r\nhttp://www.debuginfo.com/tools/clrdump.html claims to reduce the size of .NET dumps while maintaining relevant stack/thread information. It's not open-source AFAICT and seems to be targeting .NET Framework (not .NET Core!). Apparently he's using (according to https://stackoverflow.com/a/8258911/2354690):\r\n```\r\nMiniDumpNormal\r\nMiniDumpWithProcessThreadData\r\nMiniDumpWithThreadInfo\r\nMiniDumpWithUnloadedModules\r\n```\r\n\r\nThey don't seem to work for me. Any ideas?\r\n","Url":"https://github.com/dotnet/coreclr/issues/26907","RelatedDescription":"Open issue \"Reducing the size of crash dumps (Windows)\" (#26907)"}],"ResultType":"GitHubIssue"},"CLI-Issues":{"Issues":[{"Id":"499824171","IsPullRequest":false,"CreatedAt":"2019-09-28T21:41:57","Actor":"felizk","Number":"12749","RawContent":null,"Title":"Settings for a self-contained WinForms goes into new folders for every publish","State":"open","Body":"## Steps to reproduce\r\n * Publish a self contained WinForms app. \r\n * Run it.\r\n * Change and save some Settings (using the WinForms style .settings)\r\n * Notice settings are saved in LocalAppData ultimately in a folder with this kind of postfix: \"_Url_2z3wslwxp2unr2f2llkyxtrbrq3rb5cd\"\r\n * Repeat, notice the postfix has changed and settings are not reused\r\n\r\n## Expected  behavior\r\nTo be able to persist settings between versions of the application.\r\n\r\n## Actual behavior\r\nEvery time you publish, settings are effectively wiped.\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/12749","RelatedDescription":"Open issue \"Settings for a self-contained WinForms goes into new folders for every publish\" (#12749)"},{"Id":"499816555","IsPullRequest":true,"CreatedAt":"2019-09-28T20:15:14","Actor":"dotnet-maestro[bot]","Number":"12748","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190928.4\r\n- **Date Produced**: 9/28/2019 6:55 PM\r\n- **Commit**: 98ee997ccb0ae479a4c03b23c682a198b12dd682\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19478.4\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19478.4\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19478.4\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19478.4\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19478.4\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12748","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/core-setup\" (#12748)"},{"Id":"499802257","IsPullRequest":true,"CreatedAt":"2019-09-28T18:40:43","Actor":"dotnet-maestro[bot]","Number":"12747","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190928.3\r\n- **Date Produced**: 9/28/2019 4:17 PM\r\n- **Commit**: 31d255861fefd39312dc636850528dd94765ebc6\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19478.3\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19478.3\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19478.3\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19478.3\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19478.3\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12747","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12747)"},{"Id":"499798690","IsPullRequest":true,"CreatedAt":"2019-09-28T18:05:16","Actor":"dotnet-maestro[bot]","Number":"12746","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190928.2\r\n- **Date Produced**: 9/28/2019 4:06 PM\r\n- **Commit**: 31d255861fefd39312dc636850528dd94765ebc6\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19478.2\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19478.2\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19478.2\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19478.2\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19478.2\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12746","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12746)"},{"Id":"499783572","IsPullRequest":true,"CreatedAt":"2019-09-28T15:45:28","Actor":"dotnet-maestro[bot]","Number":"12745","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190928.1\r\n- **Date Produced**: 9/28/2019 1:54 PM\r\n- **Commit**: 25051cf8364907bb226e5b3b164f99e7f1c8bd8f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19478.1\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19478.1\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19478.1\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19478.1\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19478.1\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12745","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12745)"},{"Id":"499763021","IsPullRequest":true,"CreatedAt":"2019-09-28T12:03:56","Actor":"dotnet-bot","Number":"12744","RawContent":null,"Title":"Merge release/3.0.1xx to release/3.1.1xx","State":"open","Body":"\nThis is an automatically generated pull request from release/3.0.1xx into release/3.1.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-release/3.1.1xx\ngit reset --hard upstream/release/3.1.1xx\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-release/3.1.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/12744","RelatedDescription":"Open PR \"Merge release/3.0.1xx to release/3.1.1xx\" (#12744)"},{"Id":"499762932","IsPullRequest":true,"CreatedAt":"2019-09-28T12:02:50","Actor":"dotnet-maestro[bot]","Number":"12743","RawContent":null,"Title":"[master] Update dependencies from dotnet/sdk","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:145b81c3-fdcc-4cb6-70fa-08d645e3a44f)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190927.5\r\n- **Date Produced**: 9/28/2019 3:13 AM\r\n- **Commit**: b28a8efbfb30d84019351abb3aa9a2b15e008662\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 5.0.100-alpha1.19477.5\r\n\r\n[marker]: <> (End:145b81c3-fdcc-4cb6-70fa-08d645e3a44f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12743","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/sdk\" (#12743)"},{"Id":"499736376","IsPullRequest":true,"CreatedAt":"2019-09-28T07:40:28","Actor":"dotnet-maestro[bot]","Number":"12742","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190927.25\r\n- **Date Produced**: 9/28/2019 5:48 AM\r\n- **Commit**: a323ccda8bb6792254b4e447772c48ae03281a30\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19477.25\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19477.25\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19477.25\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19477.25\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19477.25\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12742","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12742)"},{"Id":"499729500","IsPullRequest":true,"CreatedAt":"2019-09-28T06:10:28","Actor":"dotnet-maestro[bot]","Number":"12741","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190927.24\r\n- **Date Produced**: 9/28/2019 4:14 AM\r\n- **Commit**: 01d74def06147f8855d65f0891a1cdba8f1794e5\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19477.24\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19477.24\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19477.24\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19477.24\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19477.24\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12741","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12741)"},{"Id":"499725082","IsPullRequest":true,"CreatedAt":"2019-09-28T05:10:28","Actor":"dotnet-maestro[bot]","Number":"12740","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190927.23\r\n- **Date Produced**: 9/28/2019 3:25 AM\r\n- **Commit**: 01d74def06147f8855d65f0891a1cdba8f1794e5\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19477.23\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19477.23\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19477.23\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19477.23\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19477.23\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12740","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12740)"},{"Id":"499702917","IsPullRequest":true,"CreatedAt":"2019-09-28T03:26:25","Actor":"dotnet-maestro[bot]","Number":"12738","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:fa87930c-8514-45a1-0d47-08d6910cd73b)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190927.3\r\n- **Date Produced**: 9/27/2019 11:43 PM\r\n- **Commit**: 3819a21a612cd8bc15b6f6c4e361d18490469577\r\n- **Branch**: refs/heads/release/3.0.1xx\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.101-servicing.19477.3\r\n\r\n[marker]: <> (End:fa87930c-8514-45a1-0d47-08d6910cd73b)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12738","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/sdk\" (#12738)"},{"Id":"499715655","IsPullRequest":true,"CreatedAt":"2019-09-28T03:05:30","Actor":"dotnet-maestro[bot]","Number":"12739","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190927.21\r\n- **Date Produced**: 9/28/2019 1:09 AM\r\n- **Commit**: 81720d9339549e5b706c9a4c4cef0a95f2789231\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19477.21\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19477.21\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19477.21\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19477.21\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19477.21\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12739","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12739)"},{"Id":"499690052","IsPullRequest":true,"CreatedAt":"2019-09-28T00:00:28","Actor":"dotnet-maestro[bot]","Number":"12737","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190927.19\r\n- **Date Produced**: 9/27/2019 10:11 PM\r\n- **Commit**: a1633a2804d8ffa7b8f5bc299433996c19395890\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19477.19\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19477.19\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19477.19\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19477.19\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19477.19\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12737","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12737)"},{"Id":"499650912","IsPullRequest":false,"CreatedAt":"2019-09-27T23:39:48","Actor":"TingluoHuang","Number":"12736","RawContent":null,"Title":"`Dotnet.exe --version` shows different version","State":"closed","Body":"## Steps to reproduce\r\n- Download: https://dotnetcli.azureedge.net/dotnet/Sdk/2.2.300/dotnet-sdk-2.2.300-win-x64.zip\r\n- unzip.\r\n- `./dotnet.exe --version`\r\n\r\n## Expected  behavior\r\n`./dotnet.exe --version` => 2.2.300\r\n\r\n## Actual behavior\r\n`./dotnet.exe --version` => 2.2.401\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\ntihuang@TingDev MINGW64 ~/Downloads/dotnet-sdk-2.2.300-win-x64\r\n$ ./dotnet.exe --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.401\r\n Commit:    729b316c13\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.401\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.5\r\n  Commit:  0a3c9209c0\r\n\r\n.NET Core SDKs installed:\r\n  1.0.0-preview2-003131 [C:\\Program Files\\dotnet\\sdk]\r\n  1.0.0-preview2-003133 [C:\\Program Files\\dotnet\\sdk]\r\n  1.0.0-preview2-1-003177 [C:\\Program Files\\dotnet\\sdk]\r\n  1.0.0-preview3-003786 [C:\\Program Files\\dotnet\\sdk]\r\n  1.0.0-rc4-004771 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.14 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.801 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.300 [C:\\Users\\tihuang\\Downloads\\dotnet-sdk-2.2.300-win-x64\\sdk]\r\n  2.2.401 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspN                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 etCore.All]\r\n  Microsoft.AspNetCore.All 2.2.5 [C:\\Users\\tihuang\\Downloads\\dotnet-sdk-2.2.300-                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 win-x64\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNe                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 tCore.All]\r\n  Microsoft.AspNetCore.App 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspN                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 etCore.App]\r\n  Microsoft.AspNetCore.App 2.2.5 [C:\\Users\\tihuang\\Downloads\\dotnet-sdk-2.2.300-                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 win-x64\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNe                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 tCore.App]\r\n  Microsoft.NETCore.App 1.0.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 App]\r\n  Microsoft.NETCore.App 1.0.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 App]\r\n  Microsoft.NETCore.App 1.0.16 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 .App]\r\n  Microsoft.NETCore.App 1.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 App]\r\n  Microsoft.NETCore.App 1.1.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 .App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 App]\r\n  Microsoft.NETCore.App 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 .App]\r\n  Microsoft.NETCore.App 2.2.5 [C:\\Users\\tihuang\\Downloads\\dotnet-sdk-2.2.300-win                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 -x64\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n\r\n```\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/12736","RelatedDescription":"Closed issue \"`Dotnet.exe --version` shows different version\" (#12736)"},{"Id":"499543504","IsPullRequest":true,"CreatedAt":"2019-09-27T23:38:46","Actor":"wli3","Number":"12732","RawContent":null,"Title":"Auto update dotnet version in first run message","State":"closed","Body":"Fix https://github.com/dotnet/cli/issues/12713\r\n\r\nThere is no dotnet version embedded in CLI. So derive it from full SDK version. {major}.{minor}","Url":"https://github.com/dotnet/cli/pull/12732","RelatedDescription":"Closed or merged PR \"Auto update dotnet version in first run message\" (#12732)"},{"Id":"499576778","IsPullRequest":true,"CreatedAt":"2019-09-27T21:46:50","Actor":"dotnet-maestro[bot]","Number":"12735","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190927.18\r\n- **Date Produced**: 9/27/2019 7:55 PM\r\n- **Commit**: dbb2e2a160e0e6bdd5b58339d4b0ccac34c1c49f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19477.18\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19477.18\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19477.18\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19477.18\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19477.18\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12735","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12735)"},{"Id":"499574792","IsPullRequest":true,"CreatedAt":"2019-09-27T18:00:35","Actor":"dotnet-maestro[bot]","Number":"12734","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/sdk","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:3731cb06-cbf9-46bf-a883-08d7219800a1)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190927.1\r\n- **Date Produced**: 9/27/2019 5:24 PM\r\n- **Commit**: 2dca73e46cfbb24b3fc429ae4e2095fc6ba8ef5b\r\n- **Branch**: refs/heads/release/3.1.1xx\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.1.100-preview1.19477.1\r\n\r\n[marker]: <> (End:3731cb06-cbf9-46bf-a883-08d7219800a1)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12734","RelatedDescription":"Open PR \"[release/3.1.1xx] Update dependencies from dotnet/sdk\" (#12734)"},{"Id":"499544702","IsPullRequest":true,"CreatedAt":"2019-09-27T16:45:08","Actor":"wli3","Number":"12733","RawContent":null,"Title":"Update 3.1.1xx stage0","State":"open","Body":"","Url":"https://github.com/dotnet/cli/pull/12733","RelatedDescription":"Open PR \"Update 3.1.1xx stage0\" (#12733)"},{"Id":"499506293","IsPullRequest":true,"CreatedAt":"2019-09-27T15:55:33","Actor":"dotnet-maestro[bot]","Number":"12731","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190927.3\r\n- **Date Produced**: 9/27/2019 2:13 PM\r\n- **Commit**: 46241981138f20292a6df007d6aeaf60a3663352\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19477.3\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19477.3\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19477.3\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19477.3\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19477.3\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12731","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12731)"},{"Id":"499308313","IsPullRequest":true,"CreatedAt":"2019-09-27T11:51:45","Actor":"dotnet-maestro[bot]","Number":"12730","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190927.1\r\n- **Date Produced**: 9/27/2019 10:07 AM\r\n- **Commit**: 7e3c99a9229d29443b94770de5628f066bfa17fa\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19477.1\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19477.1\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19477.1\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19477.1\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19477.1\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12730","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12730)"},{"Id":"499189628","IsPullRequest":true,"CreatedAt":"2019-09-27T06:32:10","Actor":"dotnet-maestro[bot]","Number":"12729","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190926.30\r\n- **Date Produced**: 9/27/2019 4:41 AM\r\n- **Commit**: 0ccb1a18ad9d021f0145904d2f49f51eb22f1db2\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19476.30\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19476.30\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19476.30\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19476.30\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19476.30\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12729","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12729)"},{"Id":"499168085","IsPullRequest":true,"CreatedAt":"2019-09-27T00:35:40","Actor":"dotnet-maestro[bot]","Number":"12728","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:fa87930c-8514-45a1-0d47-08d6910cd73b)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190926.2\r\n- **Date Produced**: 9/26/2019 11:26 PM\r\n- **Commit**: 9cd501f50f426f24d98065d1617ee67cd4ce0d2d\r\n- **Branch**: refs/heads/release/3.0.1xx\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.101-servicing.19476.2\r\n\r\n[marker]: <> (End:fa87930c-8514-45a1-0d47-08d6910cd73b)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12728","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/sdk\" (#12728)"},{"Id":"499119672","IsPullRequest":true,"CreatedAt":"2019-09-26T21:51:44","Actor":"mmitche","Number":"12726","RawContent":null,"Title":"3.0.101 branding","State":"closed","Body":"- If this PR should not run tests add text \"skip[REMOVE_THIS]ci[REMOVE_THIS]please\" (remove the marked text, no quotes).\r\n- Add description for changes you are making.\r\n- If there is an issue related to this PR, add the reference.\r\n","Url":"https://github.com/dotnet/cli/pull/12726","RelatedDescription":"Closed or merged PR \"3.0.101 branding\" (#12726)"},{"Id":"499122123","IsPullRequest":true,"CreatedAt":"2019-09-26T21:20:33","Actor":"dotnet-maestro[bot]","Number":"12727","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/templating","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2f46839f-4f80-4d33-eeee-08d727dab80f)\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190926.7\r\n- **Date Produced**: 9/26/2019 9:06 PM\r\n- **Commit**: fa98e14b1b8d84a1a711ef909384f16ada8bbe7c\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 3.1.0-preview1.19476.7\r\n\r\n[marker]: <> (End:2f46839f-4f80-4d33-eeee-08d727dab80f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12727","RelatedDescription":"Open PR \"[release/3.1.1xx] Update dependencies from dotnet/templating\" (#12727)"},{"Id":"499044524","IsPullRequest":true,"CreatedAt":"2019-09-26T19:00:32","Actor":"dotnet-maestro[bot]","Number":"12725","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190926.4\r\n- **Date Produced**: 9/26/2019 5:15 PM\r\n- **Commit**: 77f801a594eb047401d8a63bc9e154dfa7a5724f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19476.4\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19476.4\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19476.4\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19476.4\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19476.4\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12725","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12725)"},{"Id":"499042301","IsPullRequest":true,"CreatedAt":"2019-09-26T18:55:37","Actor":"dotnet-maestro[bot]","Number":"12724","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2f46839f-4f80-4d33-eeee-08d727dab80f)\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190926.6\r\n- **Date Produced**: 9/26/2019 6:05 PM\r\n- **Commit**: 019e43b3e52904a5f4b2e6d398541046ae96a902\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 3.1.0-preview1.19476.6\r\n\r\n[marker]: <> (End:2f46839f-4f80-4d33-eeee-08d727dab80f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12724","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/templating\" (#12724)"},{"Id":"499015948","IsPullRequest":false,"CreatedAt":"2019-09-26T17:21:46","Actor":"Viir","Number":"12723","RawContent":null,"Title":".NET core app does not start when published with `/p:PublishSingleFile=true`","State":"open","Body":"How can I use publishing of [single-file executables](https://docs.microsoft.com/en-us/dotnet/core/whats-new/dotnet-core-3-0#single-file-executables)?\r\n\r\nI tried to follow the instructions from https://docs.microsoft.com/en-us/dotnet/core/whats-new/dotnet-core-3-0#single-file-executables, but this did not work:\r\n\r\n## Steps to reproduce\r\n\r\n+ Clone the repository from https://github.com/Viir/bots\r\n+ `publish` the .NET core app in this directory: https://github.com/Viir/bots/tree/82ef37f3089a3e40bd496f507b691a5c25011b33/implement/engine/BotEngine.Windows.Console , using the following command:\r\n```powershell\r\ndotnet publish -r win10-x64 /p:PublishSingleFile=true\r\n```\r\n\r\nThe publish command produced following output in the console:\r\n```text\r\nMicrosoft (R) Build Engine version 16.3.0+0f4c62fea for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 85,07 ms for K:\\Source\\Repos\\bots\\implement\\engine\\BotEngine.Windows.Console\\BotEngine.Windows.Console.csproj.\r\n  BotEngine.Windows.Console -> K:\\Source\\Repos\\bots\\implement\\engine\\BotEngine.Windows.Console\\bin\\Debug\\netcoreapp3.0\\win10-x64\\BotEngine.dll\r\n  BotEngine.Windows.Console -> K:\\Source\\Repos\\bots\\implement\\engine\\BotEngine.Windows.Console\\bin\\Debug\\netcoreapp3.0\\win10-x64\\publish\\\r\n```\r\n\r\n+ Run the published app on the same machine, by entering the following command in powershell: `./botengine`\r\n\r\n## Expected behavior\r\n\r\nI expected the single-file executable app to behave the same way as when published without the `/p:PublishSingleFile=true` option.\r\nWhen published without the `/p:PublishSingleFile=true` option, the apps output starts as follows:\r\n```\r\nPlease specify a subcommand.\r\nBotEngine console version 2019-09-01\r\n[...]\r\n```\r\n\r\n## Actual behavior\r\n\r\nWhen trying to start the app, it outputs the following message:\r\n```consoleoutput\r\nError:\r\n  An assembly specified in the application dependencies manifest (BotEngine.deps.json) was not found:\r\n    package: 'LibGit2Sharp.NativeBinaries', version: '2.0.267'\r\n    path: 'runtimes/win-x64/native/git2-572e4d8.pdb'\r\n```\r\nand then exits.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```console-output\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100\r\n Commit:    04339c3a26\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0\r\n  Commit:  7d57652f33\r\n\r\n.NET Core SDKs installed:\r\n  1.0.0-preview4-004233 [C:\\Program Files\\dotnet\\sdk]\r\n  1.0.0-rc4-004771 [C:\\Program Files\\dotnet\\sdk]\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.0 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.0-preview2-006497 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.1-servicing-006957 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.103 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.300 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.503 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.504 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.505 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.604 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.700 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.701 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.101 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.104 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.204 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.300 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.301 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.0-preview2-25407-01 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.2-servicing-25708-01 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/12723","RelatedDescription":"Open issue \".NET core app does not start when published with `/p:PublishSingleFile=true`\" (#12723)"},{"Id":"498985292","IsPullRequest":true,"CreatedAt":"2019-09-26T16:45:39","Actor":"dotnet-maestro[bot]","Number":"12722","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d4b89351-e138-4a22-94d9-08d690bc143a)\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190926.1\r\n- **Date Produced**: 9/26/2019 4:00 PM\r\n- **Commit**: a776e417c83c52908298b3767e462feae8b18b98\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 3.0.1-servicing.19476.1\r\n\r\n[marker]: <> (End:d4b89351-e138-4a22-94d9-08d690bc143a)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12722","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/templating\" (#12722)"},{"Id":"498943182","IsPullRequest":true,"CreatedAt":"2019-09-26T15:35:37","Actor":"dotnet-maestro[bot]","Number":"12721","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190926.2\r\n- **Date Produced**: 9/26/2019 1:52 PM\r\n- **Commit**: 5a0e8cf49b21c1c6551296f9ee02225c49cc4940\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19476.2\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19476.2\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19476.2\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19476.2\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19476.2\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12721","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12721)"},{"Id":"498853097","IsPullRequest":true,"CreatedAt":"2019-09-26T13:05:31","Actor":"dotnet-maestro[bot]","Number":"12720","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190926.1\r\n- **Date Produced**: 9/26/2019 11:10 AM\r\n- **Commit**: 17b6876e330f07f3a5d792a77cf18b7e192b888f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19476.1\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19476.1\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19476.1\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19476.1\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19476.1\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12720","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12720)"}],"ResultType":"GitHubIssue"},"Standard-Issues":{"Issues":[{"Id":"499857194","IsPullRequest":false,"CreatedAt":"2019-09-29T04:57:44","Actor":"B16180339","Number":"1581","RawContent":null,"Title":"Dotnet","State":"closed","Body":"","Url":"https://github.com/dotnet/standard/issues/1581","RelatedDescription":"Closed issue \"Dotnet\" (#1581)"},{"Id":"499764886","IsPullRequest":true,"CreatedAt":"2019-09-28T12:28:37","Actor":"dotnet-maestro[bot]","Number":"1580","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190927.7\r\n- **Date Produced**: 9/28/2019 1:48 AM\r\n- **Commit**: 7e9a177824cbefaee8985a9b517ebb0ea2e17a81\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19477.7\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19477.7\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19477.7\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1580","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1580)"},{"Id":"499762811","IsPullRequest":true,"CreatedAt":"2019-09-28T12:11:24","Actor":"dotnet-maestro[bot]","Number":"1579","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190927.2\r\n- **Date Produced**: 9/27/2019 6:33 PM\r\n- **Commit**: 14abaee3dba41fbe608431fb6a4f4b2435dcac33\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 5.0.0-beta.19477.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19477.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 5.0.0-beta.19477.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 5.0.0-beta.19477.2\r\n  - **Microsoft.DotNet.GenAPI** -> 5.0.0-beta.19477.2\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.19477.2\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1579","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1579)"},{"Id":"499412533","IsPullRequest":true,"CreatedAt":"2019-09-27T12:28:38","Actor":"dotnet-maestro[bot]","Number":"1578","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190926.10\r\n- **Date Produced**: 9/27/2019 5:59 AM\r\n- **Commit**: 296c0e71ddcc4885d30af18dea829c1923cfdc5c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19476.10\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19476.10\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19476.10\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1578","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1578)"},{"Id":"499405308","IsPullRequest":true,"CreatedAt":"2019-09-27T12:11:32","Actor":"dotnet-maestro[bot]","Number":"1577","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190926.6\r\n- **Date Produced**: 9/27/2019 1:21 AM\r\n- **Commit**: b449f372df1a3374ebdc85f42ff137dcda08776b\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 5.0.0-beta.19476.6\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19476.6\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 5.0.0-beta.19476.6\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 5.0.0-beta.19476.6\r\n  - **Microsoft.DotNet.GenAPI** -> 5.0.0-beta.19476.6\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.19476.6\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1577","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1577)"},{"Id":"498397654","IsPullRequest":true,"CreatedAt":"2019-09-26T15:09:19","Actor":"dotnet-maestro[bot]","Number":"1574","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:29f70c24-3711-40be-9246-08d6c732a216)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190924.3\r\n- **Date Produced**: 9/24/2019 6:16 PM\r\n- **Commit**: 0e9ffd6464aff37aef2dc41dc2162d258f266e32\r\n- **Branch**: refs/heads/release/3.x\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19474.3\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19474.3\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19474.3\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19474.3\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19474.3\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19474.3\r\n\r\n[marker]: <> (End:29f70c24-3711-40be-9246-08d6c732a216)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1574","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/arcade\" (#1574)"},{"Id":"498433598","IsPullRequest":true,"CreatedAt":"2019-09-26T15:08:53","Actor":"mmitche","Number":"1575","RawContent":null,"Title":"Update to non prerelease","State":"closed","Body":"","Url":"https://github.com/dotnet/standard/pull/1575","RelatedDescription":"Closed or merged PR \"Update to non prerelease\" (#1575)"},{"Id":"498844948","IsPullRequest":true,"CreatedAt":"2019-09-26T12:22:45","Actor":"dotnet-maestro[bot]","Number":"1576","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190926.1\r\n- **Date Produced**: 9/26/2019 9:11 AM\r\n- **Commit**: 0a1850cc370986c7348e09bcd1c1adcf522d6db3\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19476.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19476.1\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19476.1\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1576","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1576)"},{"Id":"498249739","IsPullRequest":true,"CreatedAt":"2019-09-25T12:30:34","Actor":"dotnet-maestro[bot]","Number":"1573","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190924.3\r\n- **Date Produced**: 9/24/2019 7:06 PM\r\n- **Commit**: da147ece700c2502b91e57d99213feadcfb9c1f0\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19474.3\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19474.3\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19474.3\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1573","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1573)"},{"Id":"498239365","IsPullRequest":true,"CreatedAt":"2019-09-25T12:10:59","Actor":"dotnet-maestro[bot]","Number":"1572","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190923.5\r\n- **Date Produced**: 9/24/2019 4:15 AM\r\n- **Commit**: ef4b288de587f0b86e65b3950e9095f714808ade\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 5.0.0-beta.19473.5\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19473.5\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 5.0.0-beta.19473.5\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 5.0.0-beta.19473.5\r\n  - **Microsoft.DotNet.GenAPI** -> 5.0.0-beta.19473.5\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.19473.5\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1572","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1572)"},{"Id":"498151562","IsPullRequest":false,"CreatedAt":"2019-09-25T09:07:45","Actor":"NicolasDorier","Number":"1571","RawContent":null,"Title":"Github does not render the diff files of netstandard2.1 correctly","State":"open","Body":"In the [diff for netstandard2.1](https://github.com/dotnet/standard/blob/master/docs/versions/netstandard2.1_diff.md), Github is showing `(Sorry about that, but we can’t show files that are this big right now.)` instead of a nicely formatted diff.\r\n\r\nProposed workaround:\r\n\r\n* Ping the github team to increase the limit\r\n* Send the dotnet team in holiday during the development of netstandard2.2 so the diff file get smaller.\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/standard/issues/1571","RelatedDescription":"Open issue \"Github does not render the diff files of netstandard2.1 correctly\" (#1571)"},{"Id":"497649559","IsPullRequest":true,"CreatedAt":"2019-09-24T12:24:38","Actor":"dotnet-maestro[bot]","Number":"1570","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190923.4\r\n- **Date Produced**: 9/23/2019 10:04 PM\r\n- **Commit**: 485441f79ead7878af206a6af61a300e1458616a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19473.4\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19473.4\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19473.4\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1570","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1570)"},{"Id":"497622081","IsPullRequest":false,"CreatedAt":"2019-09-24T11:15:45","Actor":"GammaFour","Number":"1569","RawContent":null,"Title":"Massive problems with no support of UWP in .NET Standard 2.1","State":"open","Body":"How can you release .NET Standard 2.1 and not support UWP? I made the mistake of upgrading my NuGet packages yesterday to the recommended versions and I've been untangling this mess ever since. My server code wants to be .NET Standard 2.1. So I go through and retarget all my common libraries only to find that I've screwed the pooch on my UWP client. This is seriously a big miss.","Url":"https://github.com/dotnet/standard/issues/1569","RelatedDescription":"Open issue \"Massive problems with no support of UWP in .NET Standard 2.1\" (#1569)"},{"Id":"497566465","IsPullRequest":false,"CreatedAt":"2019-09-24T09:24:09","Actor":"nikolay-dimitrov","Number":"1568","RawContent":null,"Title":"Reference to type 'SqlParameter' claims it is defined in 'System.Data', but it could not be found","State":"open","Body":"I have custom method over DbContext(EF 6.3) with class library targeting .NET Framework 4.7.1\r\nIm trying to migrate to .NET Standart 2.1 but into the both cases i got this error when im calling the method above from any places(the example is calling from .NET Standart 2.1 library with installed EF 6.3)\r\n\r\n    public static async Task<IList<T>> SqlQueryAsync<T>(this DbContext db, CommandType type, string sql, List<SqlParameter> parameters) where T : new()\r\n        {\r\n            var conn = db.Database.Connection.State;\r\n\r\n            if (conn == ConnectionState.Closed)\r\n                await db.Database.Connection.OpenAsync();\r\n            using (var command =  db.Database.Connection.CreateCommand())\r\n            {\r\n                command.CommandText = sql;\r\n                command.CommandType = type;\r\n                if (parameters != null && parameters.Count() > 0)\r\n                {\r\n                    foreach (var item in parameters)\r\n                    {\r\n                        DbParameter p = command.CreateParameter();\r\n                        p.DbType = item.DbType;\r\n                        p.ParameterName = item.ParameterName;\r\n                        p.Value = item.Value;\r\n                        command.Parameters.Add(p);\r\n                    }\r\n                }\r\n                var propts = typeof(T).GetProperties();\r\n                var rtnList = new List<T>();\r\n                T model;\r\n                object val;\r\n                using (var reader = await command.ExecuteReaderAsync())\r\n                {\r\n                    while (await reader.ReadAsync())\r\n                    {\r\n                        model = new T();\r\n                        foreach (var l in propts)\r\n                        {\r\n\r\n                            if (Enumerable.Range(0, reader.FieldCount).Any(i => string.Equals(reader.GetName(i), l.Name, StringComparison.OrdinalIgnoreCase)))\r\n                            {\r\n                                val = reader[l.Name];\r\n                                if (val == DBNull.Value)\r\n                                    l.SetValue(model, null);\r\n                                else\r\n                                    l.SetValue(model, val);\r\n                            }\r\n                            \r\n                        }\r\n                        rtnList.Add(model);\r\n                    }\r\n                }\r\n                return rtnList;\r\n            }\r\n        }\r\n\r\nI found simular issue https://github.com/dotnet/corefx/issues/27247# but the proposals there do not resolve the error","Url":"https://github.com/dotnet/standard/issues/1568","RelatedDescription":"Open issue \"Reference to type 'SqlParameter' claims it is defined in 'System.Data', but it could not be found\" (#1568)"},{"Id":"497516549","IsPullRequest":false,"CreatedAt":"2019-09-24T07:46:11","Actor":"YZahringer","Number":"1567","RawContent":null,"Title":".NET Standard 2.1 support on Universal Windows Platform","State":"open","Body":"Regarding the support of `.NET Standard 2.1` in UWP projects, it is written that it will be supported in the upcoming version.\r\n\r\nThis means that there will be the same problem as with the `.NET Standard 2.0` version and that we will not be able to target older versions of Windows 10? `.NET Standard 2.0` requires as min target version Windows 10 Fall Creators Update `16299`.\r\n\r\nThis is a big problem for my projects and backward compatibility. I can't remove support for older versions of Windows 10, especially `LTSC` editions. This means that my projects are blocked in `.NET Standard 1.4` and it also blocks any dependency updates:\r\n- `Xamarin.Forms 2.5` because version `>=3.0` requires `.NET Standard 2.0`\r\n- `Microsoft.EntityFrameworkCore 1.1` because version `>=2.0` requires `.NET Standard 2.0`\r\n- `.NET Core 1.1` because version `>=2.0` requires `.NET Standard 2.0`\r\n\r\nI can't ask my users to have the latest version installed, especially in business applications and Windows `LTSC` editions. I have to wait several years before removing the support of an old version.\r\n\r\nIs it planned to continue support the min target version `16299` of UWP projects with `.NET Standard 2.1`? I understand the constraints, but with Xcode I can still min target `iOS 7` and with Android I can still min target `4.4 KitKat`, still with the latest version of frameworks. And with Windows I can only support the latest version? That doesn't make much sense.","Url":"https://github.com/dotnet/standard/issues/1567","RelatedDescription":"Open issue \".NET Standard 2.1 support on Universal Windows Platform\" (#1567)"},{"Id":"497453537","IsPullRequest":false,"CreatedAt":"2019-09-24T04:51:49","Actor":"shyamutty","Number":"1566","RawContent":null,"Title":"Grpc .net client issue with .NET Core and .NET standard (2.0)","State":"closed","Body":"Severity\tCode\tDescription\tProject\tFile\tLine\tSuppression State\r\nError\tNU1202\tPackage Grpc.Net.Client 0.2.23-pre1 is not compatible with netcoreapp2.1 (.NETCoreApp,Version=v2.1). Package Grpc.Net.Client 0.2.23-pre1 supports: netstandard2.1 (.NETStandard,Version=v2.1)\tGrpcGreeterClient\t\r\n\r\nGrpc.Net.Client 2.23.2 dependency is .NETStandard 2.1\r\n\r\n\r\n","Url":"https://github.com/dotnet/standard/issues/1566","RelatedDescription":"Closed issue \"Grpc .net client issue with .NET Core and .NET standard (2.0)\" (#1566)"},{"Id":"497424795","IsPullRequest":false,"CreatedAt":"2019-09-24T02:51:23","Actor":"goldmannyc","Number":"1565","RawContent":null,"Title":"Where to download the netstandard.dll 2.1?","State":"open","Body":"","Url":"https://github.com/dotnet/standard/issues/1565","RelatedDescription":"Open issue \"Where to download the netstandard.dll 2.1?\" (#1565)"},{"Id":"497309683","IsPullRequest":true,"CreatedAt":"2019-09-23T20:25:00","Actor":"terrajobst","Number":"1564","RawContent":null,"Title":"Ns21 summary","State":"closed","Body":"","Url":"https://github.com/dotnet/standard/pull/1564","RelatedDescription":"Closed or merged PR \"Ns21 summary\" (#1564)"},{"Id":"497303937","IsPullRequest":true,"CreatedAt":"2019-09-23T20:15:45","Actor":"terrajobst","Number":"1563","RawContent":null,"Title":"Update diffs to final product","State":"closed","Body":"","Url":"https://github.com/dotnet/standard/pull/1563","RelatedDescription":"Closed or merged PR \"Update diffs to final product\" (#1563)"},{"Id":"497024033","IsPullRequest":false,"CreatedAt":"2019-09-23T10:49:00","Actor":"yb199478","Number":"1562","RawContent":null,"Title":"Is it possible to add a method that kills the process tree?","State":"open","Body":".Net standard does not provide any method to kill a process tree.","Url":"https://github.com/dotnet/standard/issues/1562","RelatedDescription":"Open issue \"Is it possible to add a method that kills the process tree?\" (#1562)"},{"Id":"496771346","IsPullRequest":true,"CreatedAt":"2019-09-22T12:23:49","Actor":"dotnet-maestro[bot]","Number":"1561","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190921.2\r\n- **Date Produced**: 9/21/2019 6:26 PM\r\n- **Commit**: 4c074ae47660448eae66a362076124177709640a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19471.2\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19471.2\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19471.2\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1561","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1561)"},{"Id":"496650404","IsPullRequest":true,"CreatedAt":"2019-09-21T12:33:22","Actor":"dotnet-maestro[bot]","Number":"1560","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190920.3\r\n- **Date Produced**: 9/20/2019 4:58 PM\r\n- **Commit**: 0286bce5fd360207ca707fe7024248be428cf0e9\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19470.3\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19470.3\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19470.3\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1560","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1560)"},{"Id":"496648540","IsPullRequest":true,"CreatedAt":"2019-09-21T12:11:40","Actor":"dotnet-maestro[bot]","Number":"1559","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190920.9\r\n- **Date Produced**: 9/20/2019 9:08 PM\r\n- **Commit**: 84778cd659cc0509e9ebf651c73f2341ae82df8c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 5.0.0-beta.19470.9\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19470.9\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 5.0.0-beta.19470.9\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 5.0.0-beta.19470.9\r\n  - **Microsoft.DotNet.GenAPI** -> 5.0.0-beta.19470.9\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.19470.9\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1559","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1559)"},{"Id":"496322557","IsPullRequest":true,"CreatedAt":"2019-09-20T12:34:19","Actor":"dotnet-maestro[bot]","Number":"1558","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190920.1\r\n- **Date Produced**: 9/20/2019 10:21 AM\r\n- **Commit**: ce5dfbb9ad62f95885748c7e95ebcd3ca453d1bf\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19470.1\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19470.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19470.1\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1558","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1558)"},{"Id":"496312709","IsPullRequest":true,"CreatedAt":"2019-09-20T12:11:37","Actor":"dotnet-maestro[bot]","Number":"1557","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190919.8\r\n- **Date Produced**: 9/19/2019 10:34 PM\r\n- **Commit**: 67f02d61a4bff11930c10fb03f77bb4f93a37690\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 5.0.0-beta.19469.8\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19469.8\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 5.0.0-beta.19469.8\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 5.0.0-beta.19469.8\r\n  - **Microsoft.DotNet.GenAPI** -> 5.0.0-beta.19469.8\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.19469.8\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1557","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1557)"},{"Id":"496006418","IsPullRequest":true,"CreatedAt":"2019-09-19T20:28:51","Actor":"dotnet-maestro[bot]","Number":"1556","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190919.4\r\n- **Date Produced**: 9/19/2019 6:33 PM\r\n- **Commit**: 19e994876c2c29b01b78cc7a2a7019eb7dfcbd54\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 5.0.0-beta.19469.4\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19469.4\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 5.0.0-beta.19469.4\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 5.0.0-beta.19469.4\r\n  - **Microsoft.DotNet.GenAPI** -> 5.0.0-beta.19469.4\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.19469.4\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1556","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1556)"},{"Id":"495468017","IsPullRequest":false,"CreatedAt":"2019-09-19T14:08:45","Actor":"mstoffel-infraserv","Number":"1553","RawContent":null,"Title":"Regex Match Hangs forever","State":"closed","Body":"During processing with one of our applications we ran into an issue with Regex Match method hanging forever with a specific regular expression and specific text. See attached code for details.\r\n[BadRegex.zip](https://github.com/dotnet/standard/files/3628478/BadRegex.zip)\r\n\r\n\r\n","Url":"https://github.com/dotnet/standard/issues/1553","RelatedDescription":"Closed issue \"Regex Match Hangs forever\" (#1553)"},{"Id":"495764912","IsPullRequest":true,"CreatedAt":"2019-09-19T12:28:23","Actor":"dotnet-maestro[bot]","Number":"1555","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190918.14\r\n- **Date Produced**: 9/19/2019 4:54 AM\r\n- **Commit**: 19b304f7815894b13cb61e87e1c9eac49a474c7e\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19468.14\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19468.14\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19468.14\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1555","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1555)"},{"Id":"495754976","IsPullRequest":true,"CreatedAt":"2019-09-19T12:21:51","Actor":"dotnet-maestro[bot]","Number":"1554","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190918.2\r\n- **Date Produced**: 9/18/2019 8:56 PM\r\n- **Commit**: a28ee518026d2c5d477472f44d391cf9379fc7cb\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 5.0.0-beta.19468.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19468.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 5.0.0-beta.19468.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 5.0.0-beta.19468.2\r\n  - **Microsoft.DotNet.GenAPI** -> 5.0.0-beta.19468.2\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.19468.2\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1554","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1554)"},{"Id":"495184946","IsPullRequest":true,"CreatedAt":"2019-09-18T12:19:39","Actor":"dotnet-maestro[bot]","Number":"1552","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190917.6\r\n- **Date Produced**: 9/18/2019 3:17 AM\r\n- **Commit**: 4ca1feeeb484e8a7089ce8a9d377703ad5b8a53e\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19467.6\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19467.6\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19467.6\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1552","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1552)"}],"ResultType":"GitHubIssue"},"CoreFx-Issues":{"Issues":[{"Id":"499843132","IsPullRequest":false,"CreatedAt":"2019-09-29T02:00:12","Actor":"chenyj796","Number":"41430","RawContent":null,"Title":"How do I host a WebApi in WPF application directly since they have different project SDK?","State":"open","Body":"Currently, I add a project reference to a webapi project.\r\nHow do I host a webapi in WPF application directly since they have different project SDK?","Url":"https://github.com/dotnet/corefx/issues/41430","RelatedDescription":"Open issue \"How do I host a WebApi in WPF application directly since they have different project SDK?\" (#41430)"},{"Id":"499840788","IsPullRequest":false,"CreatedAt":"2019-09-29T01:56:29","Actor":"sdwdjzhy","Number":"41429","RawContent":null,"Title":"how can I make a JsonConverter to Converter Enum","State":"closed","Body":"``` C#\r\npublic class User\r\n{\r\n   public UserSex Sex { get; set; }\r\n}\r\npublic enum UserSex\r\n{\r\n    unknown = 0,\r\n    male,\r\n    female,\r\n}\r\n\r\nvar user = new User\r\n{\r\n    Sex = UserSex.female,\r\n};\r\n\r\nvar jsetting = new JsonSerializerOptions();\r\n\r\nreturn JsonSerializer.Serialize(user, jsetting);\r\n// print\r\n// {\"Sex\":2}\r\n```\r\nbut I want it is `{ \"Sex\": \"female\" }`\r\nhow can I do?\r\nThanks!\r\n","Url":"https://github.com/dotnet/corefx/issues/41429","RelatedDescription":"Closed issue \"how can I make a JsonConverter to Converter Enum\" (#41429)"},{"Id":"499832330","IsPullRequest":false,"CreatedAt":"2019-09-28T23:33:53","Actor":"davidmilligan","Number":"41428","RawContent":null,"Title":"System.Composition: CompositionContext.TryGetExport throws CompositionFailedException","State":"open","Body":"The `CompositionContext.TryGetExport` method can throw a `CompositionFailedException`. This violates the common convention/expectation that `TryXXX` methods don't throw, instead they just return false. \r\n\r\nI would expect that calling `GetExport` would throw an exception in this situation but I would expect that `TryGetExport` would simply return `false`.\r\n\r\nStack Trace:\r\n```\r\nAn exception of type 'System.Composition.Hosting.CompositionFailedException' occurred in System.Composition.Hosting.dll but was not handled in user code: 'The component (unknown) cannot be created outside the Scoped sharing boundary.'\r\n   at System.Composition.Hosting.Core.LifetimeContext.FindContextWithin(String sharingBoundary)\r\n   at System.Composition.TypedParts.ActivationFeatures.LifetimeFeature.<>c__DisplayClass1_0.<RewriteActivator>b__0(LifetimeContext c, CompositionOperation o)\r\n   at System.Composition.Hosting.Core.CompositionOperation.Run(LifetimeContext outermostLifetimeContext, CompositeActivator compositionRootActivator)\r\n   at System.Composition.Hosting.Core.LifetimeContext.TryGetExport(CompositionContract contract, Object& export)\r\n   at System.Composition.CompositionContext.TryGetExport(Type exportType, String contractName, Object& export)\r\n   at System.Composition.CompositionContext.TryGetExport(Type exportType, Object& export)\r\n```\r\n","Url":"https://github.com/dotnet/corefx/issues/41428","RelatedDescription":"Open issue \"System.Composition: CompositionContext.TryGetExport throws CompositionFailedException\" (#41428)"},{"Id":"499826639","IsPullRequest":false,"CreatedAt":"2019-09-28T22:13:24","Actor":"FyiurAmron","Number":"41427","RawContent":null,"Title":"System.Text.Json fails on deserializing into sub-subclasses of system collections","State":"open","Body":"When trying to deserialize into a class that has a class being a valid deserialization target for a collection higher in the class inheritance graph than its direct parent, the deserialization fails.\r\n\r\nExample code:\r\n```cs\r\nnamespace JsonProblem {\r\n\r\nusing System.Collections.Generic;\r\nusing System.Text.Json;\r\n\r\nclass ListString : List<string> {\r\n}\r\n\r\nclass MyList<T> : List<T> {\r\n}\r\n\r\nclass MyMyList<T> : MyList<T> {\r\n}\r\n\r\nclass MyListString : MyList<string> {\r\n}\r\n\r\nclass Program {\r\n    const string JSON = \"[\\\"test\\\"]\";\r\n\r\n    static void Main( string[] args ) {\r\n        JsonSerializer.Deserialize( JSON, typeof(string[]) ); // works\r\n        JsonSerializer.Deserialize( JSON, typeof(List<string>) ); // works\r\n        JsonSerializer.Deserialize( JSON, typeof(ListString) ); // also works\r\n        JsonSerializer.Deserialize( JSON, typeof(MyList<string>) ); // works\r\n        JsonSerializer.Deserialize( JSON, typeof(MyMyList<string>) ); // doesn't work\r\n        JsonSerializer.Deserialize( JSON, typeof(MyListString) ); // doesn't work\r\n    }\r\n}\r\n\r\n}\r\n```\r\n\r\nAll the above classes worked OK in Json.NET - IMVHO, the deserializer should handle them, which it doesn't.","Url":"https://github.com/dotnet/corefx/issues/41427","RelatedDescription":"Open issue \"System.Text.Json fails on deserializing into sub-subclasses of system collections\" (#41427)"},{"Id":"499792887","IsPullRequest":false,"CreatedAt":"2019-09-28T16:36:26","Actor":"jasonkuo41","Number":"41426","RawContent":null,"Title":"API Proposal: Re-entrantable AsyncLock","State":"open","Body":"Inspired by #34073 and it's related resources.\r\n\r\n## Usage\r\nInstead of using semaphore (SempahoreSlim) as a means to use to lock asynchronous content, which may result in deadlock if it is re-acquired without prior releasing on the same Task execution context.\r\n\r\nIt would be a good idea if we have a low cost, yet that prevents deadlocking upon re-entrant.\r\nInspired by #34073, I tested out the possibility by combining the usage of `AsyncLocal` and `SempahoreSlim`, [[Here in this Repo]](https://github.com/jasonkuo41/CellWars.Threading.AsyncLock).\r\n\r\nUpon writing tests, it is suggested that this is possibly do-able.\r\nHere's more of the detail of how I approached this idea:\r\n\r\n> AsyncLock utilizes two main classes SemphoreSlim and AsyncLocal; the actual lock is maintained by SemphoreSlim and the re-entrant check is done by using AsyncLocal.\r\n\r\n> When locking with AsyncLock, it returns an object implementing ILockHandle, which can either contain actual content that does the unlocking when Dispose() is called, or does absolutely nothing. The former one is acquired when the current Task has not acquired AsyncLock, the latter one is returned when AsyncLock detects when it already acquired the lock.\r\n\r\n> The detection of the current lock acquired by the current task is achieved through AsyncLocal, the underlying value of AsyncLocal is (almost) different when it's in different Task. When it's underlying value is null we know that the current Task hasn't acquired the lock and is put into the semaphore; if it's not null then we know the current Task has already acquired a lock given by this current AsyncLock instance, and would not await the semaphore and returns an empty ILockHandle.\r\n\r\n## Thoughts and Questions\r\n\r\nFew problems araised when there's a limitation of what AsyncLocal can do.\r\nIf the lock acquiring process is inside the scope of `ExecutionContext.SuppressFlow()`, this would effectively break the re-entrant check.\r\nA good solution I came up with would be further integrating with `Task`, making it maintain a record of acquired `AsyncLock` without being affected by `SuppressFlow` (or just make SuppressFlow ignore the tracking of acquired locks) ","Url":"https://github.com/dotnet/corefx/issues/41426","RelatedDescription":"Open issue \"API Proposal: Re-entrantable AsyncLock\" (#41426)"},{"Id":"499725390","IsPullRequest":false,"CreatedAt":"2019-09-28T15:38:45","Actor":"codexguy","Number":"41420","RawContent":null,"Title":"Unable to serialize ValueTuple using System.Text.Json","State":"closed","Body":"To reproduce:\r\nTake the sample default ASPNET Core 3.0 app (API-based template), change the WeatherForecast class to include a ValueTuple:\r\n\r\n    public class WeatherForecast\r\n    {\r\n...\r\n\r\n        public (int x, int y) Location { get; set; }\r\n    }\r\n\r\nChange the Get method to populate Location with arbitrary values. Run the project: JSON returned has an empty location. Serializing ValueTuple's is possible with Newtonsoft (being unable to do so wrecks existing code I have that uses ValueTuples successfully with Core 2.1, moving to Core 3.0).","Url":"https://github.com/dotnet/corefx/issues/41420","RelatedDescription":"Closed issue \"Unable to serialize ValueTuple using System.Text.Json\" (#41420)"},{"Id":"499774465","IsPullRequest":false,"CreatedAt":"2019-09-28T13:40:01","Actor":"GREsau","Number":"41425","RawContent":null,"Title":"JsonConverterAttribute can't be used to deserialize IEnumerable properties","State":"open","Body":"When trying to deserialize an object where one of the properties is an IEnumerable/collection and has a custom converter set by `JsonConverterAttribute`, a `JsonException` is thrown. Repro:\r\n\r\n```csharp\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text.Json;\r\nusing System.Text.Json.Serialization;\r\n\r\nnamespace JsonConverterRepro\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var options = new JsonSerializerOptions();\r\n            // Program works as expected when this line is uncommented:\r\n            // options.Converters.Add(new DummyConverter());\r\n\r\n            var json = @\"{ \"\"Items\"\": [\"\"hello\"\", 1, true] }\";\r\n            var model = JsonSerializer.Deserialize<MyModel>(json, options);\r\n\r\n            Console.WriteLine(string.Join(\", \", model.Items));\r\n        }\r\n\r\n        class MyModel\r\n        {\r\n            [JsonConverter(typeof(ToStringConverter))]\r\n            public List<string> Items { get; set; }\r\n        }\r\n\r\n        // This converter coerces list items into strings when deserializing\r\n        class ToStringConverter : JsonConverter<List<string>>\r\n        {\r\n            public override List<string> Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)\r\n            {\r\n                using var doc = JsonDocument.ParseValue(ref reader);\r\n                return doc.RootElement.EnumerateArray().Select(e => e.ToString()).ToList();\r\n            }\r\n\r\n            public override void Write(Utf8JsonWriter writer, List<string> value, JsonSerializerOptions options)\r\n            {\r\n                JsonSerializer.Serialize(writer, value, options);\r\n            }\r\n        }\r\n\r\n        class DummyConverter : JsonConverter<List<string>>\r\n        {\r\n            public override List<string> Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) =>\r\n                throw new NotImplementedException();\r\n\r\n            public override void Write(Utf8JsonWriter writer, List<string> value, JsonSerializerOptions options) =>\r\n                throw new NotImplementedException();\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nThis program should output `hello, 1, True`. However, when this is actually run, this exception is thrown:\r\n```\r\nUnhandled exception. System.Text.Json.JsonException: The JSON value could not be converted to System.Collections.Generic.List`1[System.String]. Path: $.Items | LineNumber: 0 | BytePositionInLine: 12.\r\n ---> System.InvalidOperationException: Cannot get the value of a token type 'StartArray' as a string.\r\n   at System.Text.Json.Utf8JsonReader.GetString()\r\n   at System.Text.Json.Serialization.Converters.JsonConverterString.Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options)\r\n   at System.Text.Json.JsonPropertyInfoNotNullable`4.OnReadEnumerable(JsonTokenType tokenType, ReadStack& state, Utf8JsonReader& reader)\r\n   at System.Text.Json.JsonPropertyInfo.ReadEnumerable(JsonTokenType tokenType, ReadStack& state, Utf8JsonReader& reader)\r\n   at System.Text.Json.JsonPropertyInfo.Read(JsonTokenType tokenType, ReadStack& state, Utf8JsonReader& reader)\r\n   at System.Text.Json.JsonSerializer.HandleValue(JsonTokenType tokenType, JsonSerializerOptions options, Utf8JsonReader& reader, ReadStack& state)\r\n   at System.Text.Json.JsonSerializer.ReadCore(JsonSerializerOptions options, Utf8JsonReader& reader, ReadStack& readStack)\r\n   --- End of inner exception stack trace ---\r\n   at System.Text.Json.ThrowHelper.ReThrowWithPath(ReadStack& readStack, Utf8JsonReader& reader, Exception ex)\r\n   at System.Text.Json.JsonSerializer.ReadCore(JsonSerializerOptions options, Utf8JsonReader& reader, ReadStack& readStack)\r\n   at System.Text.Json.JsonSerializer.ReadCore(Type returnType, JsonSerializerOptions options, Utf8JsonReader& reader)\r\n   at System.Text.Json.JsonSerializer.ParseCore(String json, Type returnType, JsonSerializerOptions options)\r\n   at System.Text.Json.JsonSerializer.Deserialize[TValue](String json, JsonSerializerOptions options)\r\n   at JsonConverterRepro.Program.Main(String[] args) in H:\\projects\\JsonConverterRepro\\Program.cs:line 17\r\n```\r\n\r\nThe correct behaviour is observed when when a custom converter for that property's type is added to the `JsonSerializerOptions`, even if that custom converter doesn't get used. This program also works correctly when the `ToStringConverter` is added to the `JsonSerializerOptions` instead of being set via an attribute.\r\n\r\nAlthough this repro uses `List<string>`, the same problem occurs with other collection types and item types e.g. `IEnumerable<string>`, `HashSet<int>`.\r\n\r\nTested on .NET Core 3.0.100","Url":"https://github.com/dotnet/corefx/issues/41425","RelatedDescription":"Open issue \"JsonConverterAttribute can't be used to deserialize IEnumerable properties\" (#41425)"},{"Id":"499762772","IsPullRequest":true,"CreatedAt":"2019-09-28T12:00:55","Actor":"dotnet-maestro[bot]","Number":"41424","RawContent":null,"Title":"[master] Update dependencies from 4 repositories","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c297d885-0692-40f8-6b97-08d61f281b4c)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190927.2\r\n- **Date Produced**: 9/27/2019 6:33 PM\r\n- **Commit**: 14abaee3dba41fbe608431fb6a4f4b2435dcac33\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions** -> 5.0.0-beta.19477.2\r\n  - **Microsoft.DotNet.XUnitConsoleRunner** -> 2.5.1-beta.19477.2\r\n  - **Microsoft.DotNet.VersionTools.Tasks** -> 5.0.0-beta.19477.2\r\n  - **Microsoft.DotNet.ApiCompat** -> 5.0.0-beta.19477.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19477.2\r\n  - **Microsoft.DotNet.Build.Tasks.Configuration** -> 5.0.0-beta.19477.2\r\n  - **Microsoft.DotNet.Build.Tasks.Feed** -> 5.0.0-beta.19477.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 5.0.0-beta.19477.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 5.0.0-beta.19477.2\r\n  - **Microsoft.DotNet.CoreFxTesting** -> 5.0.0-beta.19477.2\r\n  - **Microsoft.DotNet.GenAPI** -> 5.0.0-beta.19477.2\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.19477.2\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 5.0.0-beta.19477.2\r\n  - **Microsoft.DotNet.RemoteExecutor** -> 5.0.0-beta.19477.2\r\n\r\n[marker]: <> (End:c297d885-0692-40f8-6b97-08d61f281b4c)\r\n\r\n[marker]: <> (Begin:08549e3e-8f8e-4201-dc38-08d6815d521b)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190927.25\r\n- **Date Produced**: 9/28/2019 5:48 AM\r\n- **Commit**: a323ccda8bb6792254b4e447772c48ae03281a30\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19477.25\r\n  - **Microsoft.NETCore.DotNetHostPolicy** -> 5.0.0-alpha1.19477.25\r\n  - **Microsoft.NETCore.DotNetHost** -> 5.0.0-alpha1.19477.25\r\n\r\n[marker]: <> (End:08549e3e-8f8e-4201-dc38-08d6815d521b)\r\n\r\n[marker]: <> (Begin:368e60b9-57f7-48bd-020d-08d6874ba0bd)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190927.7\r\n- **Date Produced**: 9/28/2019 1:48 AM\r\n- **Commit**: 7e9a177824cbefaee8985a9b517ebb0ea2e17a81\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **runtime.native.System.IO.Ports** -> 5.0.0-alpha1.19477.7\r\n  - **Microsoft.NETCore.Platforms** -> 5.0.0-alpha1.19477.7\r\n\r\n[marker]: <> (End:368e60b9-57f7-48bd-020d-08d6874ba0bd)\r\n\r\n[marker]: <> (Begin:a2867060-7cad-40ad-7917-08d6937ac7c4)\r\n## From https://github.com/dotnet/standard\r\n- **Build**: 20190927.1\r\n- **Date Produced**: 9/27/2019 12:52 PM\r\n- **Commit**: d48034aaf1f18d50dcfc3fb1e5711a3cfd718fa5\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **NETStandard.Library** -> 2.2.0-prerelease.19477.1\r\n\r\n[marker]: <> (End:a2867060-7cad-40ad-7917-08d6937ac7c4)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/41424","RelatedDescription":"Open PR \"[master] Update dependencies from 4 repositories\" (#41424)"},{"Id":"499738961","IsPullRequest":false,"CreatedAt":"2019-09-28T07:35:21","Actor":"mika76","Number":"41423","RawContent":null,"Title":"UnmanagedType.AnsiBStr is marked as obsolete with no alternative given","State":"open","Body":"Title says it all. After a load of searching I came upon issue #34949 and pull request  #35161 in which it states:\r\n\r\n> I am leaving the attribute on the following though:\r\n> \r\n>     UnmanagedType.AnsiBStr\r\n>     UnmanagedType.AsAny\r\n>     UnmanagedType.Currency\r\n>     UnmanagedType.TBStr\r\n>     UnmanagedType.VBByRefStr\r\n> \r\n> My reasoning is because the BSTR ones are incredibly nuanced and cause more stress than need be and should be actively discouraged.\r\n> ...\r\n\r\nand from issue #34949:\r\n\r\n> If your application is targeting Windows and only Windows, this API is fine to use and will be around for years to come. If there are plans for your application to run on non-Windows platforms, I would suggest avoiding any API that relates to VARIANT for the time being since support on non-Windows platform is still in question.\r\n\r\nI think that using the `Obsolete` attribute for this is wrong considering the intention seems to be to stop people from using it because of cross-incompatibility. Can a new attribute with a bit more explanation or intention not be built in? Or maybe at least giving a but more of a specific reason in the obsolete attribute.\r\n\r\nIt's a bit weird to support calling windows API's but mark specific feature Obsolete.\r\n\r\nAlso, the documentation of UnmanagedType at https://docs.microsoft.com/en-us/dotnet/api/system.runtime.interopservices.unmanagedtype?view=netcore-3.0 does not mention obsolete or the reasoning behind it at all.\r\n\r\nFor anyone else looking, currently the only workaround I know of is switch off warnings for error 618\r\n\r\n```C#\r\n#pragma warning disable 618\r\n//and then after the call\r\n#pragma warning restore 618\r\n```","Url":"https://github.com/dotnet/corefx/issues/41423","RelatedDescription":"Open issue \"UnmanagedType.AnsiBStr is marked as obsolete with no alternative given\" (#41423)"},{"Id":"499730927","IsPullRequest":false,"CreatedAt":"2019-09-28T05:54:40","Actor":"unruledboy","Number":"41421","RawContent":null,"Title":"System.Text.Json forces double quote on name","State":"open","Body":"The following json works fine with Newtonsoft.Json, but does not work with System.Text.Json\r\n```\r\n{\r\n  name: \"value\"\r\n}\r\n\r\n```\r\n\r\nIt says: \r\n\r\n> System.Text.Json.JsonException: ''m' is an invalid start of a property name. Expected a '\"'. Path: $ | LineNumber: 1 | BytePositionInLine: 0.'\r\n\r\nI tried to find if there is anything in `JsonSerializerOptions `that can help me to support this, but I could not find one.\r\n\r\nI know System.Text.Json has better performance that's why I switched to it. I don't want to switch back if there is solution.\r\n\r\nThere are cases that we have no control over the source json to be in double-quoted name format.","Url":"https://github.com/dotnet/corefx/issues/41421","RelatedDescription":"Open issue \"System.Text.Json forces double quote on name\" (#41421)"},{"Id":"499690882","IsPullRequest":true,"CreatedAt":"2019-09-27T23:29:03","Actor":"safern","Number":"41419","RawContent":null,"Title":"Update Microsoft.Windows.Compatibility package for WCF and remove S.R.WindowsRuntime*","State":"open","Body":"Contributes to: #41335 \r\nContributes to: #41403 \r\n\r\nSee: https://github.com/dotnet/corefx/issues/41403#issuecomment-536105027\r\n\r\nThis will need to go into 3.0 to get serviced\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/41419","RelatedDescription":"Open PR \"Update Microsoft.Windows.Compatibility package for WCF and remove S.R.WindowsRuntime*\" (#41419)"},{"Id":"499690552","IsPullRequest":true,"CreatedAt":"2019-09-27T23:27:34","Actor":"josalem","Number":"41418","RawContent":null,"Title":"Prevent ImplicitTransform of index getter method","State":"open","Body":"partially resolves dotnet/coreclr#26890\r\n\r\n<details>\r\n    <summary>small repro (click to expand)</summary>\r\n\r\n---\r\nAttach `dotnet trace` to this app and turn on the `Microsoft-Diagnostics-DiagnosticSource` provider.\r\n\r\n```csharp\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            Console.WriteLine($\"PID: {System.Diagnostics.Process.GetCurrentProcess().Id}\");\r\n            var diagnosticListener = new DiagnosticListener(\"MySource\");\r\n            while (true)\r\n            {\r\n                Console.Write(\">\");\r\n                var input = Console.ReadLine();\r\n                if (input == \"exit\")\r\n                    break;\r\n\r\n                diagnosticListener.Write(\"MyEvent\", new List<int> { 1, 2, 3 });\r\n            }\r\n        }\r\n    }\r\n```\r\n---\r\n</details>\r\n\r\n### Root Cause of Exception:\r\nThe getter for the implicit `Item` property for the index operator takes an argument, and `DiagnosticSourceEventSource` makes the assumption that property getters don't take arguments.  It tries to bind the resulting delegate of type `[retval] get_Item(int32 index)` to the type `Func<TObject, TProperty>` so the binding fails and we get the exception you see in dotnet/coreclr#26890.\r\n\r\noffending code:\r\nhttps://github.com/dotnet/corefx/blob/ac99a1b7168bd32046a954c3f06012c0fa909bed/src/System.Diagnostics.DiagnosticSource/src/System/Diagnostics/DiagnosticSourceEventSource.cs#L890-L901\r\n\r\nThis change should prevent `DiagnosticSourceEventSource` from attempting to serialize the implicit `Item` property by blocking index getters.\r\n\r\nI am intending for this change to be back ported to 3.1 and hopefully 3.0, since ASP.NET Core has used `DiagnosticSourceEventSource` for their eventing.  Since they changed their event types to inherit from `IReadOnlyCollection`, they will all hit the exception in dotnet/coreclr#26890 causing a bad diagnostic experience if you do not explicitly specify a transform.","Url":"https://github.com/dotnet/corefx/pull/41418","RelatedDescription":"Open PR \"Prevent ImplicitTransform of index getter method\" (#41418)"},{"Id":"499667480","IsPullRequest":true,"CreatedAt":"2019-09-27T23:23:21","Actor":"safern","Number":"41415","RawContent":null,"Title":"Make ResolveEventArgs.Name not nullable","State":"closed","Body":"Fixes: https://github.com/dotnet/corefx/issues/41404\r\n\r\ncc: @jnm2 @stephentoub @jkotas ","Url":"https://github.com/dotnet/corefx/pull/41415","RelatedDescription":"Closed or merged PR \"Make ResolveEventArgs.Name not nullable\" (#41415)"},{"Id":"499575870","IsPullRequest":false,"CreatedAt":"2019-09-27T23:23:21","Actor":"jnm2","Number":"41404","RawContent":null,"Title":"Should ResolveEventArgs.Name be nullable?","State":"closed","Body":"Is [`AppDomain.AssemblyResolve`](https://docs.microsoft.com/en-us/dotnet/api/system.appdomain.assemblyresolve?view=netcore-3.0) ever raised with a null [`ResolveEventArgs.Name`](https://docs.microsoft.com/en-us/dotnet/api/system.resolveeventargs.name?view=netcore-3.0) property? It doesn't seem like anything useful could be done by the event handler if `Name` is null.\r\n\r\nIt would save having to write `if (e.Name is null) return null;` in every handler if `ResolveEventArgs.Name` could be non-nullable to guarantee that the handler won't be called unless there is some name.\r\n\r\nhttps://github.com/dotnet/corefx/blob/967eb3c5cb5fd36c8bb56d06f4c840f6a7a5a754/src/Common/src/CoreLib/System/ResolveEventArgs.cs#L11-L23","Url":"https://github.com/dotnet/corefx/issues/41404","RelatedDescription":"Closed issue \"Should ResolveEventArgs.Name be nullable?\" (#41404)"},{"Id":"499681260","IsPullRequest":true,"CreatedAt":"2019-09-27T22:47:48","Actor":"safern","Number":"41417","RawContent":null,"Title":"Set IsShipping only for experimental and IsShippingPackages only for private packages","State":"open","Body":"### Description\r\nFixes: https://github.com/dotnet/corefx/issues/41315\r\n\r\n.NET Core App product assemblies that contain `Private` in their name, like `System.Private.Xml` contain wrong `AssemblyInformationalVersion` in its metadata.\r\n\r\n### Customer Impact:\r\n\r\nFor people that read that to know what release the assembly is coming from, it would lead to the wrong release because it would always include a prerelease suffix on the version (depending on the build date). This also affected the display in http://bing.com/version\r\n\r\n### Regression? \r\n\r\nYes, infrastructure regression when adopting `IsShipping` and `NonShipping` conventions from arcade to adopt stages.\r\n\r\n### Risk\r\n\r\nLow, it just changes metadata information.\r\n\r\n### Tests run / added\r\n\r\nManual testing:\r\n![image](https://user-images.githubusercontent.com/22899328/65660774-9c571100-dfe4-11e9-9a79-62beea3de501.png)\r\n\r\n![image](https://user-images.githubusercontent.com/22899328/65660801-ada01d80-dfe4-11e9-9431-4de9654c03bf.png)\r\n\r\n![image](https://user-images.githubusercontent.com/22899328/65660810-b85ab280-dfe4-11e9-8c2c-fc1551d1bf88.png)\r\n\r\n![image](https://user-images.githubusercontent.com/22899328/65660838-ca3c5580-dfe4-11e9-857d-ed46bfe60a46.png)\r\n\r\ncc: @danmosemsft \r\n","Url":"https://github.com/dotnet/corefx/pull/41417","RelatedDescription":"Open PR \"Set IsShipping only for experimental and IsShippingPackages only for private packages\" (#41417)"},{"Id":"499574409","IsPullRequest":false,"CreatedAt":"2019-09-27T22:19:00","Actor":"simonferquel","Number":"41402","RawContent":null,"Title":"Introduce Http over arbitrary streams","State":"closed","Body":"# Summary\r\n\r\nThis issue is about contributing back support for HTTP over arbitrary streams (named pipe, unix socket, ...) that we use internally for Docker Desktop to .net core libraries.\r\n\r\n# Context\r\n\r\nI am part of the team building Docker Desktop, and we are in the process of refactoring it to share as much code as possible between Mac and Windows. To align with the company practices, we are using golang for all shared components, and use HTTP over Unix sockets (on Mac) or Named Pipes (on Windows) for IPC. We have extensive experience with Golang for this development model, and so far it has been a success: as an example, Docker Engine API is an HTTP/REST API that can be exposed to clients trough TCP/TLS, Unix sockets, Named pipes (and in the context of Docker Desktop, even trough v-socks or Hyper-V Sockets).\r\n\r\nAs part of this ongoing Docker Desktop refactoring, I wrote both an HttpClient MessageHandler (for the client side) and a ASP.Net core host (for server side) to support this architecture in C#. You can see an early version of that work here: https://github.com/simonferquel/HttpOverStream/tree/master/src\r\n\r\n# What I want to do with it ?\r\n\r\nI think support for this kind of architecture directly in the .net Core library would make for a great addition. \r\n- Users could use it easily for local IPC\r\n- Could also be used for speeding up Unit Tests in large projects (with http clients/server using Http over an in-process Pipe)\r\n- By having access to .net core internal classes, these components will have an improved behavior consistency compared to traditional HTTP/TCP case (if you have a look at https://github.com/simonferquel/HttpOverStream/tree/master/src/HttpOverStream, you'll see much code duplication coming from .net core and CoreFX internal classes, that is not easy to keep in sync with upstream versions).\r\n\r\nAs an interesting side effect, it would make things easier to build a .net Docker Client library, working with every kind of transport we support.\r\n\r\nFrom the Docker Point of view, it would also be very interesting in term of maintenance costs: every time a bug fix or performance improvement is introduced in internal components shared with the current TCP-focused implementation (mainly the whole HTTP grammar handling), the arbitrary-stream handlers would get it for free (compared to the current model where we have to constantly watch for changes in this part of the code base - which we honestly don't do). Exposure to a broader developer audience and set of use cases would also help us making it more robust (both for us, and other developers).\r\n\r\n# Questions to resolve\r\n\r\nWhere to write PRs:\r\n- I suppose the client side should go there: https://github.com/dotnet/corefx/tree/master/src/System.Net.Http/src/System/Net/Http\r\n- Server side support, I am not completely sure. We could ever make it as a separate server, or make it a new Kestrel feature\r\n- I'd like also to have end-to-end tests, and validate things with cross-language tests: testing client interaction with a golang http server and testing the server with a golang client. Those end-to-end tests could easily be implemented using docker (so we don't require contributors to install a golang toolchain locally), but I have no idea were it could live in the .net core code base.\r\n\r\nping @karelz \r\n\r\n\r\n","Url":"https://github.com/dotnet/corefx/issues/41402","RelatedDescription":"Closed issue \"Introduce Http over arbitrary streams\" (#41402)"},{"Id":"499672844","IsPullRequest":true,"CreatedAt":"2019-09-27T22:14:09","Actor":"carlossanlop","Number":"41416","RawContent":null,"Title":"Update System.Data ownership","State":"open","Body":"@glennc do you know who should be the main owner of System.Data now?\r\n@roji should I add you to the list of owners?","Url":"https://github.com/dotnet/corefx/pull/41416","RelatedDescription":"Open PR \"Update System.Data ownership\" (#41416)"},{"Id":"499665960","IsPullRequest":true,"CreatedAt":"2019-09-27T21:50:08","Actor":"steveharter","Number":"41414","RawContent":null,"Title":"Address misc feedback and issues from recent perf changes","State":"open","Body":"Address late feedback and other misc issues from previous perf PR #41098\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/41414","RelatedDescription":"Open PR \"Address misc feedback and issues from recent perf changes\" (#41414)"},{"Id":"499664855","IsPullRequest":true,"CreatedAt":"2019-09-27T21:46:22","Actor":"micampbell","Number":"41413","RawContent":null,"Title":"added cross product for 2D and 4D following discussion at ","State":"open","Body":"https://github.com/dotnet/corefx/issues/35434","Url":"https://github.com/dotnet/corefx/pull/41413","RelatedDescription":"Open PR \"added cross product for 2D and 4D following discussion at \" (#41413)"},{"Id":"499663199","IsPullRequest":false,"CreatedAt":"2019-09-27T21:40:35","Actor":"zivkan","Number":"41412","RawContent":null,"Title":"API Proposal: size of http response headers","State":"open","Body":"## Rationale and Usage\r\n\r\nDownload managers, or other applications that wish to closely monitor network performance, when using `HttpClient` may be interested in the number of bytes a response header was, in order to calculate a bytes/second metric from that HTTP server. Right now the best we can do count the bytes of the response's content stream, but responses with no body are treated as zero bytes transferred, despite the fact that it did indeed transfer bytes over the network.\r\n\r\nHere's a simplistic example of what I'd like to be able to do:\r\n```csharp\r\nvar requestTime = Stopwatch.StartNew();\r\nvar headerTime = Stopwatch.StartNew();\r\nvar response = client.SendAsync(request, HttpCompletionOption.ResponseHeadersRead);\r\nheaderTime.Stop();\r\n\r\nvar responseData = await response.Content.ReadAsByteArrayAsync();\r\nrequestTime.Stop();\r\n\r\nnetworkTelemetry.OnComplete(request.RequestUri, headerTime.Elapsed, response.HeaderBytesTransferred, responseTime.Elapsed, responseData.Length);\r\n```\r\n\r\nI work on NuGet and due to the design on how it works, we expect a large number of our requests to return 404's. Therefore not being able to take into account header size impacts our ability to better understand our own network usage, or the network connectivity of the customer's machine to the host it's trying to download from.\r\n\r\n## Proposed API\r\nI'd like the input of experts in the area, as I'm not sure where this would go, assuming the concept is agreeable.\r\n\r\nOne possibility is to add a `Size` property to `HttpResponseHeaders`, however, this makes it sound like there was a header returned with the name \"Size\". So it doesn't feel right to me.\r\n\r\nAnother possibility is to add a `HeaderSize` property to `HttpResponseMessage`, but it also feels a bit out of place.\r\n\r\nA third option is along the lines of #41408, but rather than having position set to zero at the start of the body, the position is zero before headers are read and the position when `HttpClient.SendAsync` returns determines the size of the headers. The position once the full body has been read is therefore the body size plus the header size. For example:\r\n\r\n```csharp\r\nvar response = client.SendAsync(request, HttpCompletionOption.ResponseHeadersRead);\r\nvar stream = await response.Content.ReadAsStreamAsync();\r\nvar headerSize = stream.Position;\r\nawait ProcessStreamToEnd(stream);\r\nvar bodySize = stream.Position - headerSize;\r\n```\r\n\r\n## Open Questions\r\n\r\nUnfortunately I'm not an expert in the HTTP protocol. My understanding is that with HTTP 1.x, response headers are not compressed, but with HTTP 2.0 they will be. Therefore there is a question if the header size should be the number of bytes before of after decompression. Since I am interested in measuring the network connectivity to the HTTP host, I would prefer the compressed size, which would give a more consistent result, regardless of whether the header was highly or poorly compressible for a particular response.\r\n\r\nI assume that TLS streams are the same size encrypted and decrypted and therefore they hopefully won't complicate the issue further.","Url":"https://github.com/dotnet/corefx/issues/41412","RelatedDescription":"Open issue \"API Proposal: size of http response headers\" (#41412)"},{"Id":"499662970","IsPullRequest":true,"CreatedAt":"2019-09-27T21:39:43","Actor":"eiriktsarpalis","Number":"41411","RawContent":null,"Title":"[WIP] Try fixing failing IpPacketInformationTest","State":"open","Body":"* Increases socket receive timeout.\r\n* Adds disambiguating messages to assertions.\r\n\r\nAttempts to fix #41361","Url":"https://github.com/dotnet/corefx/pull/41411","RelatedDescription":"Open PR \"[WIP] Try fixing failing IpPacketInformationTest\" (#41411)"},{"Id":"499645995","IsPullRequest":false,"CreatedAt":"2019-09-27T20:54:24","Actor":"zivkan","Number":"41410","RawContent":null,"Title":"API proposal: Stream with BaseStream","State":"open","Body":"There are multiple classes that extend `Stream` and add a `BaseStream` property, such as [`DeflateStream`](https://github.com/dotnet/corefx/blob/e667c29636a622eb4f9493f75232b44e0ae90b29/src/System.IO.Compression/src/System/IO/Compression/DeflateZLib/DeflateStream.cs#L120), [`GzipStream`](https://github.com/dotnet/corefx/blob/e667c29636a622eb4f9493f75232b44e0ae90b29/src/System.IO.Compression/src/System/IO/Compression/GZipStream.cs#L170) and [`BrotliStream`](https://github.com/dotnet/corefx/blob/e667c29636a622eb4f9493f75232b44e0ae90b29/src/System.IO.Compression.Brotli/src/System/IO/Compression/BrotliStream.cs#L131).\r\n\r\nI think this would be useful for applications that want to monitor network performance, such as download managers (I work on NuGet). Coupled with #41408 it would become very easy to measure the number of bytes downloaded, taking into account compressed responses.\r\n\r\n## Rationale and Usage\r\nCurrently to find the base stream, my method would need to either cast to each type known in advance that has a base stream, or use reflection to look for a property named `BaseStream`. If this proposal is implemented, then it would be possible to simply cast to a single type and get the property directly.\r\n\r\nAn example of this would be getting the base stream from an HttpClient response:\r\n\r\n```csharp\r\nvar response = await client.GetAsync(uri, HttpCompletionOption.ResponseHeadersRead);\r\nvar stream = await response.Content.ReadAsStreamAsync();\r\n\r\nStream baseStream;\r\nif (stream is GZipStream gzipStream)\r\n{\r\n    baseStream = gzipStream.BaseStream;\r\n}\r\nelse if (stream is DeflateStream deflateStream)\r\n{\r\n    baseStream = deflateStream.BaseStream;\r\n}\r\nelse if (stream is BrotliStream brotliStream)\r\n{\r\n    baseStream = brotliStream.BaseStream;\r\n}\r\n```\r\n\r\nWith this proposal, it would be simplified to this:\r\n```csharp\r\nvar response = await client.GetAsync(uri, HttpCompletionOption.ResponseHeadersRead);\r\nvar stream = await response.Content.ReadAsStreamAsync();\r\n\r\nStream baseStream;\r\nif (stream is StreamWrapper streamWrapper)\r\n{\r\n    baseStream = streamWrapper.BaseStream;\r\n}\r\n```\r\n\r\nThis is not only less code, but it's also adaptable to `HttpClient` implementing new compression types.\r\n\r\n## Proposed API\r\n```csharp\r\npublic abstract class StreamWrapper : Stream\r\n{\r\n    public Stream BaseStream { get; }\r\n\r\n    protected StreamWrapper(Stream baseStream);\r\n}\r\n```\r\n\r\n`DeflateStream`, `GzipStream` and `BrotliStream` should be changed to extend this class, but there may be others that are relevant as well.","Url":"https://github.com/dotnet/corefx/issues/41410","RelatedDescription":"Open issue \"API proposal: Stream with BaseStream\" (#41410)"},{"Id":"499634805","IsPullRequest":false,"CreatedAt":"2019-09-27T20:26:14","Actor":"TylerBrinkley","Number":"41409","RawContent":null,"Title":"Make mutable generic collection interfaces implement read-only collection interfaces","State":"open","Body":"## Rationale\r\nIt's long been a source of confusion that the mutable generic collection interfaces don't implement their respective read-only collection interfaces. This was of course due to the read-only collection interfaces being added after the fact and thus would cause breaking changes by changing a published interface API.\r\n\r\nWith the addition of default interface implementations in C#8/.NET Core 3.0 I think the mutable generic collection interfaces, `ICollection<T>`, `IList<T>`, and `IDictionary<K, V>` should now implicitly inherit their respective read-only collection interfaces. This can now be done without causing breaking changes.\r\n\r\nWhile it would have been nice for these interfaces to share members, I think the proposed API below is the best we can possibly do with the read-only interfaces being added after the fact.\r\n\r\nAs an added bonus, this should allow some simplification of the type checking in LINQ code to check for the read-only interfaces instead of the mutable interfaces.\r\n\r\n## Proposed API\r\n\r\n```diff\r\n namespace System.Collections.Generic {\r\n-    public interface ICollection<T> : IEnumerable<T> {\r\n+    public interface ICollection<T> : IReadOnlyCollection<T> {\r\n-        int Count { get; }\r\n+        new int Count { get; }\r\n+        int IReadOnlyCollection<T>.Count => Count;\r\n     }\r\n-    public interface IList<T> : ICollection<T> {\r\n+    public interface IList<T> : ICollection<T>, IReadOnlyList<T> {\r\n-        T this[int index] { get; set; }\r\n+        new T this[int index] { get; set; }\r\n+        T IReadOnlyList<T>.this[int index] => this[index];\r\n     }\r\n-    public interface IDictionary<TKey, TValue> : ICollection<KeyValuePair<TKey, TValue>> {\r\n+    public interface IDictionary<TKey, TValue> : ICollection<KeyValuePair<TKey, TValue>>, IReadOnlyDictionary<TKey, TValue> {\r\n-        TValue this[TKey key] { get; set; }\r\n+        new TValue this[TKey key] { get; set; }\r\n-        ICollection<TKey> Keys { get; }\r\n+        new ICollection<TKey> Keys { get; }\r\n-        ICollection<TValue> Values { get; }\r\n+        new ICollection<TValue> Values { get; }\r\n-        bool ContainsKey(TKey key);\r\n+        new bool ContainsKey(TKey key);\r\n-        bool TryGetValue(TKey key, out TValue value);\r\n+        new bool TryGetValue(TKey key, out TValue value);\r\n+        TValue IReadOnlyDictionary<TKey, TValue>.this[TKey key] => this[key];\r\n+        IEnumerable<TKey> IReadOnlyDictionary<TKey, TValue>.Keys => Keys;\r\n+        IEnumerable<TValue> IReadOnlyDictionary<TKey, TValue>.Values => Values;\r\n+        bool IReadOnlyDictionary<TKey, TValue>.ContainsKey(TKey key) => ContainsKey(key);\r\n+        bool IReadOnlyDictionary<TKey, TValue>.TryGetValue(TKey key, out TValue value) => TryGetValue(key, out value);\r\n     }\r\n }\r\n```\r\n\r\n## Binary Compatibility Test\r\nI was able to test that this change isn't a breaking change with the following custom interfaces and by simply dropping the new interfaces dll to the publish folder without recompiling the consuming code, the `IMyReadOnlyList<T>` interface was automatically supported without breaking the code.\r\n\r\n### Original Interfaces DLL code\r\n```c#\r\nnamespace InterfaceTest\r\n{\r\n    public interface IMyReadOnlyList<T>\r\n    {\r\n        int Count { get; }\r\n        T this[int index] { get; }\r\n    }\r\n\r\n    public interface IMyList<T>\r\n    {\r\n        int Count { get; }\r\n        T this[int index] { get; set; }\r\n    }\r\n}\r\n```\r\n\r\n### New Interfaces DLL code\r\n```c#\r\nnamespace InterfaceTest\r\n{\r\n    public interface IMyReadOnlyList<T>\r\n    {\r\n        int Count { get; }\r\n        T this[int index] { get; }\r\n    }\r\n\r\n    public interface IMyList<T> : IMyReadOnlyList<T>\r\n    {\r\n        new int Count { get; }\r\n        new T this[int index] { get; set; }\r\n        int IMyReadOnlyList<T>.Count => Count;\r\n        T IMyReadOnlyList<T>.this[int index] => this[index];\r\n    }\r\n}\r\n```\r\n\r\n### Consuming Code\r\n```c#\r\nusing System;\r\nusing System.Collections.Generic;\r\n\r\nnamespace InterfaceTest\r\n{\r\n    class Program\r\n    {\r\n        static void Main()\r\n        {\r\n            var myList = new MyList<int>();\r\n            Console.WriteLine($\"MyList<int>.Count: {myList.Count}\");\r\n            Console.WriteLine($\"IMyList<int>.Count: {((IMyList<int>)myList).Count}\");\r\n            Console.WriteLine($\"IMyReadOnlyList<int>.Count: {(myList as IMyReadOnlyList<int>)?.Count}\");\r\n            Console.WriteLine($\"MyList<int>[1]: {myList[1]}\");\r\n            Console.WriteLine($\"IMyList<int>[1]: {((IMyList<int>)myList)[1]}\");\r\n            Console.WriteLine($\"IMyReadOnlyList<int>[1]: {(myList as IMyReadOnlyList<int>)?[1]}\");\r\n        }\r\n    }\r\n\r\n    public class MyList<T> : IMyList<T>\r\n    {\r\n        private readonly List<T> _list = new List<T> { default, default };\r\n\r\n        public T this[int index] { get => _list[index]; set => _list[index] = value; }\r\n\r\n        public int Count => _list.Count;\r\n    }\r\n}\r\n```\r\n\r\n### Original Output\r\n```\r\nMyList<int>.Count: 2\r\nIMyList<int>.Count: 2\r\nIMyReadOnlyList<int>.Count:\r\nMyList<int>[1]: 0\r\nIMyList<int>[1]: 0\r\nIMyReadOnlyList<int>[1]:\r\n```\r\n\r\n### New Output\r\n```\r\nMyList<int>.Count: 2\r\nIMyList<int>.Count: 2\r\nIMyReadOnlyList<int>.Count: 2\r\nMyList<int>[1]: 0\r\nIMyList<int>[1]: 0\r\nIMyReadOnlyList<int>[1]: 0\r\n```\r\n\r\nMoved from #5489 ","Url":"https://github.com/dotnet/corefx/issues/41409","RelatedDescription":"Open issue \"Make mutable generic collection interfaces implement read-only collection interfaces\" (#41409)"},{"Id":"499634530","IsPullRequest":false,"CreatedAt":"2019-09-27T20:25:32","Actor":"zivkan","Number":"41408","RawContent":null,"Title":"implement HttpContentReadStream.Position getter","State":"open","Body":"There are some scenarios where knowing the number of bytes downloaded from an HttpClient response stream would be useful. For example, showing progress during a large download, or reporting on how many bytes were transferred after the response stream is processed, when `HttpResposeMessage.Content.Headers.ContentLength` is not available and a buffered stream of the entire response was not used. I'm fine with this not working with the WinHttpHandler, but working in both the HTTP 1.x SocketsHttpHandler and the HTTP2 handler would be useful.\r\n\r\nI think complexities from HTTP keepalive, pipelineing and HTTP2 streams are out of scope. I think this code snippet explains why better than I can describe with words:\r\n\r\n```csharp\r\nvar response = client.SendAsync(request, HttpCompletionOption.ResponseHeadersRead);\r\nvar stream = await response.Content.ReadAsStreamAsync();\r\nAssert.AreEqual(0, stream.Position);\r\n```\r\n\r\nI care about the position of the individual response stream. The total number of bytes received since the TCP connection was opened is not important to me (and if needed should be obtained though something other than the HTTP response's content stream).\r\n\r\n`HttpBaseStream` currently [throws a `NotSupportedException`](https://github.com/dotnet/corefx/blob/61a6264018989e06d314b68d57bd91b4b72e4360/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/HttpBaseStream.cs#L34-L38). I do have a workaround, which is to use my own stream wrapper, something similar to:\r\n\r\n```csharp\r\ninternal class PositionStream : Stream\r\n{\r\n    private long _position;\r\n    private Stream _baseStream;\r\n\r\n    public PositionStream(Stream baseStream)\r\n    {\r\n        _position = 0;\r\n        _baseStream = baseStream;\r\n    }\r\n\r\n    public override long Position { get => _position; set => throw new NotSupportedException(); }\r\n\r\n    public override int Read(byte[] buffer, int offset, int count)\r\n    {\r\n        var read = _baseStream.Read(buffer, offset, count);\r\n        _position += read;\r\n        return read;\r\n    }\r\n\r\n    // the rest of the class\r\n}\r\n```\r\n\r\nThis is what I'd like `HttpConentReadStream` to implement. While this is a simple workaround and therefore it's tempting to keep it out of the BCL, the problem is that when `AutomaticDecompression` is used, it measures a different number of bytes that may be relevant, depending on what the app author wants to measure.\r\n\r\n[SocketsHttpHandler already has code to use the correct decompression algorithm based on content encoding](https://github.com/dotnet/corefx/blob/61a6264018989e06d314b68d57bd91b4b72e4360/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/DecompressionHandler.cs#L68-L79), but it's in a private class, so I can't call it from my own code, meaning if a new compression type becomes available, I'd have to update my code. Perhaps if the code that uses the right decompression based on `AutomaticDecompression` settings and content-encoding, if that is made public, then it would be an alternative to my proposal as it would be possible to use my own byte-counting stream wrapper while also being forwards-compatible with new compressions types being added to HTTP responses in the future.\r\n\r\nHere's a simple example of what I'd like to be able to do:\r\n\r\n```csharp\r\nvar sw = Stopwatch.StartNew();\r\nvar response = await client.GetAsync(uri, HttpCompletionOption.ResponseHeadersRead);\r\nvar stream = await response.Content.ReadAsStreamAsync();\r\n\r\nStream baseStream;\r\nif (stream is GZipStream gzipStream)\r\n{\r\n    baseStream = gzipStream.BaseStream;\r\n}\r\nelse if (stream is DeflateStream deflateStream)\r\n{\r\n    baseStream = deflateStream.BaseStream;\r\n}\r\nelse if (stream is BrotliStream brotliStream)\r\n{\r\n    baseStream = brotliStream.BaseStream;\r\n}\r\nelse\r\n{\r\n    baseStream = stream;\r\n}\r\n\r\nvar value = Deserialize<T>(stream);\r\n\r\nsw.Stop();\r\nnetworkTelemetry.OnComplete(uri, sw.Elapsed, bytesTransferred: baseStream.Position);\r\n```\r\n","Url":"https://github.com/dotnet/corefx/issues/41408","RelatedDescription":"Open issue \"implement HttpContentReadStream.Position getter\" (#41408)"},{"Id":"499632152","IsPullRequest":true,"CreatedAt":"2019-09-27T20:19:06","Actor":"buyaa-n","Number":"41407","RawContent":null,"Title":"  Nullable annotation for System.IO.Pipelines","State":"open","Body":"Contributes to #40623\r\ncc: @dotnet/nullablefc","Url":"https://github.com/dotnet/corefx/pull/41407","RelatedDescription":"Open PR \"  Nullable annotation for System.IO.Pipelines\" (#41407)"},{"Id":"499597001","IsPullRequest":false,"CreatedAt":"2019-09-27T18:51:34","Actor":"jnm2","Number":"41405","RawContent":null,"Title":"Remove [DisallowNull] from EqualityComparer.GetHashCode","State":"open","Body":"Visual Studio 16.3.1 generates code like this for GetHashCode specifically because this way the null check is handled. EqualityComparer.GetHashCode is well-known to return 0 if you pass null:\r\n\r\n```cs\r\nstruct Foo\r\n{\r\n    public string? Bar { get; }\r\n\r\n    public override int GetHashCode()\r\n    {\r\n        // CS8604 Possible null reference argument for parameter 'obj' in\r\n        // 'int EqualityComparer<string?>.GetHashCode(string? obj)'.      ↓\r\n        return 1739646154 + EqualityComparer<string?>.Default.GetHashCode(Bar);\r\n    }\r\n}\r\n```\r\n\r\nRather than generating a `!` to go along with it, could `[DisallowNull]` be removed from `EqualityComparer<>.GetHashCode` as a kind of contravariance, even though `IEqualityComparer<>.GetHashCode` has it? It would reflect the true behavior of the `EqualityComparer<>` class.","Url":"https://github.com/dotnet/corefx/issues/41405","RelatedDescription":"Open issue \"Remove [DisallowNull] from EqualityComparer.GetHashCode\" (#41405)"},{"Id":"499575058","IsPullRequest":false,"CreatedAt":"2019-09-27T18:01:14","Actor":"nick-beer","Number":"41403","RawContent":null,"Title":"Updating Microsoft.Windows.Compatibility to v3.0.0 Results in Build Errors","State":"open","Body":"I recently update my Microsoft.Windows.Compatibility nuget from v3.0.0-preview5.19224.8 to v3.0.0.  After updating, I'm not longer able to build.  The build generates many errors similar to:\r\n\r\n```\r\nFile.cs(1814,20): error CS0012: The type 'IAsyncAction' is defined in an assembly that is not referenced. You must add a reference to assembly 'Windows, Version=255.255.255.255, Culture=neutral, PublicKeyToken=null, ContentType=WindowsRuntime'. [G:\\Project.NetCore_015px2u3_wpftmp.csproj]\r\n```\r\n\r\nThis error is repeated for `IAsyncAction`, `IAsyncActionWithProgress<>`, `IAsyncOperation<>`, and `IAsyncOperationWithProgress<>`.\r\n\r\nThe lines that are generating these errors are places that we are awaiting a custom object that contains a Task<bool>.  That object has a `GetAwaiter` extension method that returns a TaskAwaiter<bool> - obtained from the contained Task<bool>.\r\n\r\nThe project's in question have Sdk=\"Microsoft.NET.Sdk.WindowsDesktop\", and UseWpf and UseWindowsForms set to 'true'.\r\n\r\nI've tried reproducing these build errors in a smaller application, but I haven't had any luck yet.  I'll keep trying to reproduce, but in the meantime, does anyone have any ideas?","Url":"https://github.com/dotnet/corefx/issues/41403","RelatedDescription":"Open issue \"Updating Microsoft.Windows.Compatibility to v3.0.0 Results in Build Errors\" (#41403)"},{"Id":"499569523","IsPullRequest":false,"CreatedAt":"2019-09-27T17:47:41","Actor":"joshmouch","Number":"41401","RawContent":null,"Title":"System.Text.Json Headers","State":"open","Body":"I'm switching to System.Text.Json from Json.Net, and the following is no longer serializable:\r\n`Microsoft.AspNetCore.Http.FormFile`\r\n\r\nThe exception is:\r\n```\r\nSystem.NotSupportedException : The collection type 'Microsoft.AspNetCore.Http.IHeaderDictionary' on 'Microsoft.AspNetCore.Http.FormFile.Headers' is not supported.`\r\n```\r\n\r\nWill this be supported? Are there any workarounds?","Url":"https://github.com/dotnet/corefx/issues/41401","RelatedDescription":"Open issue \"System.Text.Json Headers\" (#41401)"},{"Id":"499544180","IsPullRequest":false,"CreatedAt":"2019-09-27T16:43:55","Actor":"joshmouch","Number":"41399","RawContent":null,"Title":"System.Text.Json ModelStateDictionary","State":"open","Body":"I'm switching to System.Text.Json from Json.Net, and the following is no longer serializable:\r\n`Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary`.\r\n\r\nThe exception is:\r\n```\r\nSystem.InvalidCastException : Unable to cast object of type 'Enumerator' to type 'System.Collections.IDictionaryEnumerator'.\r\n   at System.Text.Json.JsonSerializer.HandleDictionary(JsonClassInfo elementClassInfo, JsonSerializerOptions options, Utf8JsonWriter writer, WriteStack& state)\r\n   at System.Text.Json.JsonSerializer.HandleObject(JsonPropertyInfo jsonPropertyInfo, JsonSerializerOptions options, Utf8JsonWriter writer, WriteStack& state)\r\n   at System.Text.Json.JsonSerializer.WriteObject(JsonSerializerOptions options, Utf8JsonWriter writer, WriteStack& state)\r\n   at System.Text.Json.JsonSerializer.Write(Utf8JsonWriter writer, Int32 originalWriterDepth, Int32 flushThreshold, JsonSerializerOptions options, WriteStack& state)\r\n   at System.Text.Json.JsonSerializer.WriteAsyncCore(Stream utf8Json, Object value, Type inputType, JsonSerializerOptions options, CancellationToken cancellationToken)\r\n   at Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)\r\n   at Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)\r\n   at \r\n```\r\n\r\nWill this be supported? Are there any workarounds?","Url":"https://github.com/dotnet/corefx/issues/41399","RelatedDescription":"Open issue \"System.Text.Json ModelStateDictionary\" (#41399)"},{"Id":"499598810","IsPullRequest":false,"CreatedAt":"2019-08-01T09:03:01","Actor":"zz1231118","Number":"41406","RawContent":null,"Title":"HttpListenerRequestUriBuilder.GetPath throw IndexOutOfRangeException","State":"open","Body":"# Issue HttpListenerRequestUriBuilder.GetPath throw IndexOutOfRangeException\r\n.net core \r\nSystem.Net.HttpListener\r\n\r\n# General\r\nAppDomain: UnhandledException:System.IndexOutOfRangeException: Index was outside the bounds of the array.\r\n   at System.Net.HttpListenerRequestUriBuilder.GetPath(String uriString)\r\n   at System.Net.HttpListenerRequestUriBuilder.BuildRequestUriUsingRawPath()\r\n   at System.Net.HttpListenerRequestUriBuilder.Build()\r\n   at System.Net.HttpListenerRequest.FinishInitialization()\r\n   at System.Net.HttpConnection.OnReadInternal(IAsyncResult ares)\r\n   at System.Net.HttpConnection.OnRead(IAsyncResult ares)\r\n   at System.Net.LazyAsyncResult.Complete(IntPtr userToken)\r\n   at System.Net.ContextAwareResult.CompleteCallback()\r\n   at System.Net.ContextAwareResult.<>c.<Complete>b__15_0(Object s)\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Net.ContextAwareResult.Complete(IntPtr userToken)\r\n   at System.Net.LazyAsyncResult.ProtectedInvokeCallback(Object result, IntPtr userToken)\r\n   at System.Net.Sockets.BaseOverlappedAsyncResult.CompletionCallback(Int32 numBytes, SocketError errorCode)\r\n   at System.Net.Sockets.OverlappedAsyncResult.CompletionCallback(Int32 numBytes, Byte[] socketAddress, Int32 socketAddressSize, SocketFlags receivedFlags, SocketError errorCode)\r\n   at System.Net.Sockets.SocketAsyncContext.BufferMemoryReceiveOperation.InvokeCallback(Boolean allowPooling)\r\n   at System.Net.Sockets.SocketAsyncContext.OperationQueue`1.ProcessAsyncOperation(TOperation op)\r\n   at System.Net.Sockets.SocketAsyncContext.OperationQueue`1.<>c.<.cctor>b__18_0(Object op)\r\n   at System.Threading.ThreadPoolWorkQueue.Dispatch()","Url":"https://github.com/dotnet/corefx/issues/41406","RelatedDescription":"Open issue \"HttpListenerRequestUriBuilder.GetPath throw IndexOutOfRangeException\" (#41406)"}],"ResultType":"GitHubIssue"},"Roslyn-Issues":{"Issues":[{"Id":"499824084","IsPullRequest":false,"CreatedAt":"2019-09-28T21:40:43","Actor":"dlech","Number":"38943","RawContent":null,"Title":"nullability of value parameter in properties","State":"open","Body":"**Version Used**: master (23 September 2019) via https://sharplab.io\r\n\r\n**Steps to Reproduce**:\r\n\r\n```C#\r\n#nullable enable\r\n\r\nusing System;\r\nusing System.Diagnostics.CodeAnalysis;\r\n\r\npublic class C {\r\n    string? Getter() {\r\n        return null;\r\n    }\r\n    \r\n    void Setter(string s) {\r\n    }\r\n    \r\n    [DisallowNull]\r\n    public string? Property {\r\n        get => Getter();\r\n        set => Setter(value); // get unexpected warning here\r\n    }\r\n    \r\n    public void Test() {\r\n        Property = \"\"; // no warning here as expected\r\n        Property = null; // get warning here as expected\r\n        Setter(Property); // get warning here as expected\r\n    }\r\n}\r\n```\r\n\r\n**Expected Behavior**: Given a property with the `DisallowNull` attribute it should mean that the return value can be null but `value` parameter of the setter cannot be null.\r\n\r\n**Actual Behavior**: The code analysis gets this right when assigning to a property, but not in the property declaration.\r\n","Url":"https://github.com/dotnet/roslyn/issues/38943","RelatedDescription":"Open issue \"nullability of value parameter in properties\" (#38943)"},{"Id":"499801579","IsPullRequest":false,"CreatedAt":"2019-09-28T17:58:37","Actor":"agocke","Number":"38942","RawContent":null,"Title":"System.Index indexing for arrays does not use pattern-based Index","State":"open","Body":"https://sharplab.io/#v2:EYLgtghgzgLgpgJwDQxASwDYB8ACAmARgFgAoHABgAIcCAWAblNJwGZq9KBhS0gb1MqDqBAGyU0AOxiUAsgApJMANoBdShAQIAlEMEBeAHzrNSgHoEV9SgHprlAO4ALAJ4B+AUI+CaYgMaONWTkaKlhtIUNKMLMLRhJdL2ExRSCAZQAHCAkAHkUjKHSJHUiCiRjLRIT4oR9xKSCAGTRYXKkjDFhi9thyuIBfIA==","Url":"https://github.com/dotnet/roslyn/issues/38942","RelatedDescription":"Open issue \"System.Index indexing for arrays does not use pattern-based Index\" (#38942)"},{"Id":"499792994","IsPullRequest":false,"CreatedAt":"2019-09-28T16:37:37","Actor":"oliverhanappi","Number":"38941","RawContent":null,"Title":"C# compiler should treat return value of SingleOrDefault as nullable for enumerables with reference types","State":"open","Body":"**Version Used**: .NET Core SDK 3.0.100\r\n\r\n**Steps to Reproduce**:\r\n\r\n```csharp\r\n#nullable enable\r\n\r\npublic class DemoClass\r\n{\r\n    public object DemoMethod() => new object[0].SingleOrDefault();\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\n\r\nC# compiler detects the return value of SingleOrDefault as nullable and therefore emits warning CS8603.\r\n\r\n**Actual Behavior**:\r\n\r\nNo warning is emitted.","Url":"https://github.com/dotnet/roslyn/issues/38941","RelatedDescription":"Open issue \"C# compiler should treat return value of SingleOrDefault as nullable for enumerables with reference types\" (#38941)"},{"Id":"499763514","IsPullRequest":true,"CreatedAt":"2019-09-28T14:13:04","Actor":"dotnet-maestro[bot]","Number":"38938","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:567feadf-e495-4ebb-cee4-08d67668456c)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190927.2\r\n- **Date Produced**: 9/27/2019 6:33 PM\r\n- **Commit**: 14abaee3dba41fbe608431fb6a4f4b2435dcac33\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19477.2\r\n\r\n[marker]: <> (End:567feadf-e495-4ebb-cee4-08d67668456c)\r\n\r\n","Url":"https://github.com/dotnet/roslyn/pull/38938","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#38938)"},{"Id":"499768550","IsPullRequest":false,"CreatedAt":"2019-09-28T12:48:42","Actor":"yyjdelete","Number":"38940","RawContent":null,"Title":"System.InvalidOperationException: 'The project already references the target project.' and `Loading Intellsense` never finished when `Allow partial loading of projects during solution open` is enabled in VS16.4Preview1","State":"open","Body":"**Version Used**: \r\nVS16.4Preview1\r\n\r\nNot sure but I remember that doesn't happen with latest preview version of VS16.3. It not happen with `Preview Features`/`Allow partial loading of projects during solution open` disabled.\r\nNot sure it's an issue of roslyn or VS.\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Enable `Preview Features`/`Allow partial loading of projects during solution open` in VS16.4Preview1, and restart.\r\n2. Open the attached solutions(All cs files are removed. I tried to rename the projects and folders, but failed)\r\n[Solution.zip](https://github.com/dotnet/roslyn/files/3665454/Solution.zip)\r\n\r\n3. Wait and see whether the task `Loading Intellsense` can finish or not.(sometimes it even failed at the first time)\r\n4. If it finished, click `File/Close Solutions`, and reopen the solution again.\r\n5. Wait and see the task `Loading Intellsense` never finish.\r\n\r\n**Expected Behavior**:\r\nIntellsense should always end.\r\n\r\n**Actual Behavior**:\r\n![image](https://user-images.githubusercontent.com/1819074/65815472-7a4ad200-e222-11e9-92ec-55db1f6c7535.png)\r\n![image](https://user-images.githubusercontent.com/1819074/65815851-0eb73380-e227-11e9-9558-8642a83bdb9f.png)\r\n\r\n\r\nIt just never finished, but no CPU is used.\r\n\r\nAnd attach an debugger on VS only show an strange exception throw by roslyn on the 3 projects unable to load.\r\n```cs\r\nSystem.InvalidOperationException: 'The project already references the target project.'\r\n   at Microsoft.CodeAnalysis.SolutionState.CheckNotContainsProjectReference(ProjectId projectId, ProjectReference referencedProject)\r\n   at Microsoft.CodeAnalysis.SolutionState.AddProjectReferences(ProjectId projectId, IEnumerable`1 projectReferences)\r\n   at Microsoft.CodeAnalysis.Solution.AddProjectReferences(ProjectId projectId, IEnumerable`1 projectReferences)\r\n   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioProject.<>c__DisplayClass75_0.<OnBatchScopeDisposed>b__0(Solution solution)\r\n   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioWorkspaceImpl.ApplyBatchChangeToWorkspace(Func`2 mutation)\r\n   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioProject.OnBatchScopeDisposed()\r\n   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioProject.BatchScope.Dispose()\r\n   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.CPS.CPSProject.EndBatch()\r\n   at Microsoft.VisualStudio.ProjectSystem.LanguageServices.WorkspaceProjectContextHost.WorkspaceProjectContextHostInstance.<ApplyProjectChangesUnderLockAsync>d__19.MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[TStateMachine](TStateMachine& stateMachine)\r\n   at Microsoft.VisualStudio.ProjectSystem.LanguageServices.WorkspaceProjectContextHost.WorkspaceProjectContextHostInstance.ApplyProjectChangesUnderLockAsync(IProjectVersionedValue`1 update, Boolean evaluation, CancellationToken cancellationToken)\r\n   at Microsoft.VisualStudio.ProjectSystem.LanguageServices.WorkspaceProjectContextHost.WorkspaceProjectContextHostInstance.<>c__DisplayClass18_0.<OnProjectChangedAsync>b__0(CancellationToken ct)\r\n   at Microsoft.VisualStudio.ProjectSystem.OnceInitializedOnceDisposedUnderLockAsync.<>c__DisplayClass7_0.<ExecuteUnderLockCoreAsync>b__0()\r\n   at Microsoft.VisualStudio.Threading.ReentrantSemaphore.StackSemaphore.<>c__DisplayClass3_0.<<ExecuteAsync>b__0>d.MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[TStateMachine](TStateMachine& stateMachine)\r\n   at Microsoft.VisualStudio.Threading.ReentrantSemaphore.StackSemaphore.<>c__DisplayClass3_0.<ExecuteAsync>b__0()\r\n   at Microsoft.VisualStudio.Threading.JoinableTaskFactory.ExecuteJob[T](Func`1 asyncMethod, JoinableTask job)\r\n   at Microsoft.VisualStudio.Threading.ReentrantSemaphore.ExecuteCoreAsync(Func`1 semaphoreUser)\r\n   at Microsoft.VisualStudio.Threading.ReentrantSemaphore.StackSemaphore.<ExecuteAsync>d__3.MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[TStateMachine](TStateMachine& stateMachine)\r\n   at Microsoft.VisualStudio.Threading.ReentrantSemaphore.StackSemaphore.ExecuteAsync(Func`1 operation, CancellationToken cancellationToken)\r\n   at Microsoft.VisualStudio.ProjectSystem.OnceInitializedOnceDisposedUnderLockAsync.<ExecuteUnderLockCoreAsync>d__7.MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[TStateMachine](TStateMachine& stateMachine)\r\n   at Microsoft.VisualStudio.ProjectSystem.OnceInitializedOnceDisposedUnderLockAsync.ExecuteUnderLockCoreAsync(Func`2 action, CancellationToken cancellationToken)\r\n   at Microsoft.VisualStudio.ProjectSystem.LanguageServices.WorkspaceProjectContextHost.WorkspaceProjectContextHostInstance.OnProjectChangedAsync(IProjectVersionedValue`1 update, Boolean evaluation)\r\n   at Microsoft.VisualStudio.ProjectSystem.LanguageServices.WorkspaceProjectContextHost.WorkspaceProjectContextHostInstance.<InitializeCoreAsync>b__14_1(IProjectVersionedValue`1 e)\r\n   at Microsoft.VisualStudio.ProjectSystem.ActionBlockSlimAsync`1.ProcessInputAsync(TInput input)\r\n   at Microsoft.VisualStudio.ProjectSystem.DataReceivingBlockSlim`1.<ProcessInputQueueAsync>d__5.MoveNext()\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.Start[TStateMachine](TStateMachine& stateMachine)\r\n   at Microsoft.VisualStudio.ProjectSystem.DataReceivingBlockSlim`1.ProcessInputQueueAsync(InputDataBuffer inputQueue)\r\n   at Microsoft.VisualStudio.ProjectSystem.DataReceivingBlockSlim`1.<>c.<System.Threading.Tasks.Dataflow.ITargetBlock<TInput>.OfferMessage>b__2_0(Object s)\r\n   at System.Threading.Tasks.Task`1.InnerInvoke()\r\n   at System.Threading.Tasks.Task.Execute()\r\n   at System.Threading.Tasks.Task.ExecutionContextCallback(Object obj)\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\r\n   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\r\n   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot)\r\n   at System.Threading.Tasks.Task.ExecuteEntry(Boolean bPreventDoubleExecution)\r\n   at System.Threading.Tasks.Task.System.Threading.IThreadPoolWorkItem.ExecuteWorkItem()\r\n   at System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n   at System.Threading._ThreadPoolWaitCallback.PerformWaitCallback()\r\n```\r\nAnd then an assert failed.\r\n```cs\r\nSystem.InvalidOperationException: 'Unexpected false'\r\n   at Roslyn.Utilities.Contract.ThrowIfFalse(bool condition, string message)\r\n   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.CPS.CPSProject.EndBatch()\r\n```\r\n\r\n","Url":"https://github.com/dotnet/roslyn/issues/38940","RelatedDescription":"Open issue \"System.InvalidOperationException: 'The project already references the target project.' and `Loading Intellsense` never finished when `Allow partial loading of projects during solution open` is enabled in VS16.4Preview1\" (#38940)"},{"Id":"499763629","IsPullRequest":false,"CreatedAt":"2019-09-28T12:08:02","Actor":"NextTurn","Number":"38939","RawContent":null,"Title":"Broken Nuget package Microsoft.VisualStudio.Shell.15.0","State":"open","Body":"The first dependency of the latest version of package [`Microsoft.VisualStudio.Shell.15.0`](https://www.nuget.org/packages/Microsoft.VisualStudio.Shell.15.0/), [`Microsoft.ServiceHub.Framework`](https://www.nuget.org/packages/Microsoft.ServiceHub.Framework/), is broken. Can someone please forward this issue to the SDK team?","Url":"https://github.com/dotnet/roslyn/issues/38939","RelatedDescription":"Open issue \"Broken Nuget package Microsoft.VisualStudio.Shell.15.0\" (#38939)"},{"Id":"499724960","IsPullRequest":true,"CreatedAt":"2019-09-28T04:33:19","Actor":"CyrusNajmabadi","Number":"38937","RawContent":null,"Title":"Allow parsing of attributes on any statement.","State":"open","Body":"Tagging @RikkiGibson \r\n\r\nI recommend reading with whitespace diffs off.  This PR incorporates https://github.com/dotnet/roslyn/pull/38935.  If we can get that merged in first it will make this PR easier to read.\r\n\r\nTODO: \r\n- [x] tests for all forms.","Url":"https://github.com/dotnet/roslyn/pull/38937","RelatedDescription":"Open PR \"Allow parsing of attributes on any statement.\" (#38937)"},{"Id":"499721764","IsPullRequest":false,"CreatedAt":"2019-09-28T03:49:22","Actor":"Sergey-Vlasov","Number":"38936","RawContent":null,"Title":"Task already completed exception in Workspace.TryApplyChanges","State":"open","Body":"In my Visual Studio extension I create a temporary workspace like this:\r\n```\r\nMicrosoft.CodeAnalysis.Workspace w = new Workspace();\r\nMicrosoft.CodeAnalysis.Project project = w.CurrentSolution.AddProject();\r\nw.TryApplyChanges(project.Solution);\r\n```\r\nIt worked fine for several years, but after the recent VS 2019 16.3.0 update it generates the following exception:\r\n\r\n> System.InvalidOperationException: An attempt was made to transition a task to a final state when it had already completed.\r\n>    at System.Threading.Tasks.TaskCompletionSource`1.SetResult(TResult result)\r\n>    at Microsoft.VisualStudio.LanguageServices.Implementation.LanguageService.LanguageServerClientEventListener.StartListening(Workspace workspace, Object serviceOpt)\r\n>    at Microsoft.CodeAnalysis.Host.DefaultWorkspaceEventListenerServiceFactory.Service.EnsureListeners()\r\n>    at Microsoft.CodeAnalysis.Workspace.GetEventHandlers[T](String eventName)\r\n>    at Microsoft.CodeAnalysis.Workspace.RaiseWorkspaceChangedEventAsync(WorkspaceChangeKind kind, Solution oldSolution, Solution newSolution, ProjectId projectId, DocumentId documentId)\r\n>    at Microsoft.CodeAnalysis.Workspace.OnProjectAdded_NoLock(ProjectInfo projectInfo, Boolean silent)\r\n>    at Microsoft.CodeAnalysis.Workspace.OnProjectAdded(ProjectInfo projectInfo, Boolean silent)\r\n>    at Microsoft.CodeAnalysis.Workspace.ApplyProjectAdded(ProjectInfo project)\r\n>    at Microsoft.CodeAnalysis.Workspace.TryApplyChanges(Solution newSolution, IProgressTracker progressTracker)\r\n>    at Microsoft.CodeAnalysis.Workspace.TryApplyChanges(Solution newSolution)\r\n\r\nNote that it looks very much like a race condition, because I don't see the error when running the code first time on a \"cold\" machine. But when all assemblies are already in memory, the exception occurs every time.\r\n\r\nLooking at source:\r\n```\r\n        public void StartListening(Workspace workspace, object serviceOpt)\r\n        {\r\n            // mark that roslyn solution is added\r\n            _taskCompletionSource.SetResult(null);\r\n        }\r\n```\r\nMaybe there should be a check that result is not yet set?\r\n","Url":"https://github.com/dotnet/roslyn/issues/38936","RelatedDescription":"Open issue \"Task already completed exception in Workspace.TryApplyChanges\" (#38936)"},{"Id":"499691725","IsPullRequest":true,"CreatedAt":"2019-09-27T23:32:57","Actor":"CyrusNajmabadi","Number":"38935","RawContent":null,"Title":"Simplify parsing of attributes","State":"open","Body":"I recommend reviewing this with whitespace changes *off*.\r\n\r\nOur existing parsing strategy was pretty strange, given that we would create a mutable builder, fill it with parsed attributes, then pass that builder along.  This was confusing and potentially error prone as no downstream consumers were ever expected to continue mutating the list.  It also meant in several places we needed more complex try/finally logic to place things back in the pool.\r\n\r\nI've moved to an approach where we just parse out hte attribute list on demand and then pass along to whoever wants to consume it.\r\n\r\nNote: i would like to do this next with modifiers.  Though i am *less* certain if that will be possible due to downstream consumers possibly wanting to mutate hte modifiers list after the initial parsing.\r\n\r\nUpdate: modifiers looks to be much harder/out-of-scope.  The mods list is definitely mutated post creation, making it less suitable for this sort of up-front realization of the list. ","Url":"https://github.com/dotnet/roslyn/pull/38935","RelatedDescription":"Open PR \"Simplify parsing of attributes\" (#38935)"},{"Id":"499687102","IsPullRequest":false,"CreatedAt":"2019-09-27T23:13:18","Actor":"vsfeedback","Number":"38934","RawContent":null,"Title":"Use Enhanced Colors For VB is only listed under C #","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/734508/use-enhanced-colors-for-vb-is-only-listed-under-c.html)._\n\n---\nVisual Basic options should be selectable under Visual Basic or listed in 2 places also the text should be &quot;Use Enhanced Colors for C# and Visual Basic&quot; not just &quot;Basic&quot;\n\n---\n### Original Comments\n\n#### Jane Wu [MSFT] on 9/16/2019, 00:19 AM: \n\n<p>Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.</p>\n","Url":"https://github.com/dotnet/roslyn/issues/38934","RelatedDescription":"Open issue \"Use Enhanced Colors For VB is only listed under C #\" (#38934)"},{"Id":"499684349","IsPullRequest":false,"CreatedAt":"2019-09-27T23:01:03","Actor":"sharwell","Number":"38933","RawContent":null,"Title":"Cannot null-check a [MaybeNull] value","State":"open","Body":"**Version Used**: 89b4f60648fadeebdd53088fe8391bf9197bba7b\r\n\r\n**Steps to Reproduce**:\r\n\r\n[Sharplab](https://sharplab.io/#v2:EYLgtghgzgLgpgJwDQBMQGoA+BiAdgVwBtCJhC4ACOXU8gWAChGABAJgEYWAGC59gOgAiASwgBzXAHtYwgMZR+AYUko4AQRqEAnlGFQA3IxYBmXqwqKAPABUAfBQDejCi4oBtALIQtwOADkiQgBdCmsKADcIQnw4QwZXXlNmABYKDwAKAEpHZwTXYQAzCnTI6Mo9CgJiTNy8vOYAdjiEgF9GNqYGIA==)\r\n\r\n```csharp\r\n#nullable enable\r\n\r\nusing System;\r\nusing System.Diagnostics.CodeAnalysis;\r\n\r\npublic class C<T> {\r\n    [MaybeNull] T value;\r\n    public void M() {\r\n        if (value is null)\r\n            return;\r\n    }\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\n\r\nNo warnings.\r\n\r\n**Actual Behavior**:\r\n\r\n1. CS8717: A member returning a [MaybeNull] value introduces a null value when 'T' is a non-nullable reference type (this issue)\r\n1. Warnings CS8618 (separate issue #37511)","Url":"https://github.com/dotnet/roslyn/issues/38933","RelatedDescription":"Open issue \"Cannot null-check a [MaybeNull] value\" (#38933)"},{"Id":"499682652","IsPullRequest":false,"CreatedAt":"2019-09-27T22:53:56","Actor":"vsfeedback","Number":"38932","RawContent":null,"Title":"Ctrl and M-O cannot collapse internal types such as enum","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/732602/ctrl-m-o不能折叠内部类型比如enum.html)._\n\n---\nCtrl and M-O cannot collapse internal types such as enum\n\n---\n### Original Comments\n\n#### Jane Wu [MSFT] on 9/16/2019, 00:23 AM: \n\n<p>Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.</p>\n","Url":"https://github.com/dotnet/roslyn/issues/38932","RelatedDescription":"Open issue \"Ctrl and M-O cannot collapse internal types such as enum\" (#38932)"},{"Id":"499679942","IsPullRequest":false,"CreatedAt":"2019-09-27T22:41:54","Actor":"vsfeedback","Number":"38931","RawContent":null,"Title":"Intellsense left hand talk to right","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/730687/intellsense-left-hand-talk-to-right.html)._\n\n---\nThere are a number of rules and tools to help the developer. One of these is being able to add a missing USING reference. Another is enforcing rules about where a USING statement should appear in a code file. PLEASE make it so the two understand each other. It's really annoying to have an automatically added 'anything' immediatley become a problem.\n\n---\n### Original Comments\n\n#### Jane Wu [MSFT] on 9/11/2019, 11:44 PM: \n\n<p>Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.</p>\n","Url":"https://github.com/dotnet/roslyn/issues/38931","RelatedDescription":"Open issue \"Intellsense left hand talk to right\" (#38931)"},{"Id":"499562895","IsPullRequest":true,"CreatedAt":"2019-09-27T22:38:46","Actor":"sharwell","Number":"38917","RawContent":null,"Title":"Avoid a newline after type parameter attributes","State":"closed","Body":"Fixes #38916\r\n","Url":"https://github.com/dotnet/roslyn/pull/38917","RelatedDescription":"Closed or merged PR \"Avoid a newline after type parameter attributes\" (#38917)"},{"Id":"499556109","IsPullRequest":false,"CreatedAt":"2019-09-27T22:38:46","Actor":"cston","Number":"38916","RawContent":null,"Title":"Formatting of type parameter with attribute includes a line break","State":"closed","Body":"A line break is included in the formatting of a type parameter with an attribute.\r\n\r\nCreate a .NET Core 3.0 C# project and Go To Definition on `System.IEquatable<T>`:\r\n\r\n<img width=\"348\" alt=\"GoToDefinition\" src=\"https://user-images.githubusercontent.com/10732005/65788125-42069f00-e10f-11e9-8a48-37789d7c50b3.PNG\">\r\n","Url":"https://github.com/dotnet/roslyn/issues/38916","RelatedDescription":"Closed issue \"Formatting of type parameter with attribute includes a line break\" (#38916)"},{"Id":"499667362","IsPullRequest":true,"CreatedAt":"2019-09-27T22:13:33","Actor":"sharwell","Number":"38930","RawContent":null,"Title":"Fix expected test output for TestPragmaWarningDirectiveWithDocumentationComment2","State":"closed","Body":"My bad y'all 😞 ","Url":"https://github.com/dotnet/roslyn/pull/38930","RelatedDescription":"Closed or merged PR \"Fix expected test output for TestPragmaWarningDirectiveWithDocumentationComment2\" (#38930)"},{"Id":"499666737","IsPullRequest":true,"CreatedAt":"2019-09-27T21:52:49","Actor":"agocke","Number":"38929","RawContent":null,"Title":"Fix crash in flow analysis","State":"open","Body":"When we added support for tracking static fields as part of nullable\r\nanalysis, we used -1 for their containing slot. Negative numbers are\r\nnot meant to be used as actual slots and flowed through the flow analysis\r\ncode, they are only used as sentinels from slot-returning methods to indicate\r\nthat the variable in question is not tracked. The appropriate root\r\nslot for a static variable is the same as the root slot for a top-level tracked\r\nvariable (like a local), which is 0.\r\n\r\nFixes #38725","Url":"https://github.com/dotnet/roslyn/pull/38929","RelatedDescription":"Open PR \"Fix crash in flow analysis\" (#38929)"},{"Id":"499661016","IsPullRequest":false,"CreatedAt":"2019-09-27T21:33:46","Actor":"vsfeedback","Number":"38928","RawContent":null,"Title":"show outlining for comments (separate option)","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/725721/show-outlining-for-comments-separate-option.html)._\n\n---\n**Now:**\nShow outlining for comments and preprocessor regions \n\n**Suggest:**\nShow outlining for comments\nShow outlining for preprocessor regions\n\n---\n### Original Comments\n\n#### Jane Wu [MSFT] on 9/9/2019, 00:02 AM: \n\n<p>Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.</p>\n","Url":"https://github.com/dotnet/roslyn/issues/38928","RelatedDescription":"Open issue \"show outlining for comments (separate option)\" (#38928)"},{"Id":"499659511","IsPullRequest":false,"CreatedAt":"2019-09-27T21:29:27","Actor":"vsfeedback","Number":"38927","RawContent":null,"Title":"Copy fully qualified name of selected identifier","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/725281/copy-fully-qualified-name-of-selected-identifier.html)._\n\n---\nOften I want to share a class or a function or a member etc with another team member  and browsing in VS I can easily copy a name like &quot;Foo&quot; and send it to them but that is ambiguous for them to find in a very large codebase.\n\nInstead I'd like to send them the fully qualified namespace &quot;Team::Project::Component::Foo&quot;\nI find myself doing this a lot the hard way by hovering over the object to see it's intellisense info and typing tha tout manually which is error prone and tedious.\n\n---\n### Original Comments\n\n#### Jane Wu [MSFT] on 9/5/2019, 11:22 PM: \n\n<p>Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.</p>\n","Url":"https://github.com/dotnet/roslyn/issues/38927","RelatedDescription":"Open issue \"Copy fully qualified name of selected identifier\" (#38927)"},{"Id":"499656376","IsPullRequest":false,"CreatedAt":"2019-09-27T21:20:45","Actor":"sharwell","Number":"38926","RawContent":null,"Title":"Cannot assign from [MaybeNull] to [AllowNull]","State":"open","Body":"**Version Used**: 89b4f60648fadeebdd53088fe8391bf9197bba7b\r\n\r\n**Steps to Reproduce**:\r\n\r\n[Sharplab](https://sharplab.io/#v2:EYLgtghgzgLgpgJwDQBMQGoA+BiAdgVwBtCJhC4ACOXU8gWAChGABAJgEYWAGC59gOgAiASwgBzXAHtYwgMZR+AYUko4AQRqEAnlGFQA3IxYBmXqwqKAPABUAfBQDejCi4oBtALIQtwOADkiQiQKNWJJAHcA4gBdCmsKAA9grUMmBldeU2YAFgoPAAoASkdnDNcEigBeChTSlwBfRka0oA==)\r\n\r\n```csharp\r\n#nullable enable\r\n#pragma warning disable 649\r\n\r\nusing System;\r\nusing System.Diagnostics.CodeAnalysis;\r\n\r\npublic class C<T> {\r\n    [MaybeNull, AllowNull] T x, y;\r\n\r\n    public void M() {\r\n        x = y; // This should not report a warning\r\n    }\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\n\r\nNo warnings.\r\n\r\n**Actual Behavior**:\r\n\r\n1. CS8717: A member returning a [MaybeNull] value introduces a null value when 'T' is a non-nullable reference type (this issue)\r\n1. Two warnings CS8618 (separate issue #37511)","Url":"https://github.com/dotnet/roslyn/issues/38926","RelatedDescription":"Open issue \"Cannot assign from [MaybeNull] to [AllowNull]\" (#38926)"},{"Id":"499647479","IsPullRequest":false,"CreatedAt":"2019-09-27T20:58:08","Actor":"gafter","Number":"38925","RawContent":null,"Title":"Prevent unbound lambdas from remaining in the trees after initial binding","State":"open","Body":"In some cases, unbound lambdas remain in the bound tree after initial binding and have to be dealt with by later passes.  About this the code has a comment\r\n\r\n``` c#\r\n        // UNDONE: [MattWar]\r\n        // UNDONE: Here we enable the consumer of an unbound lambda that could not be \r\n        // UNDONE: successfully converted to a best bound lambda to do error recovery \r\n        // UNDONE: by either picking an existing binding, or by binding the body using\r\n        // UNDONE: error types for parameter types as necessary. This is not exactly\r\n        // UNDONE: the strategy we discussed in the design meeting; rather there we\r\n        // UNDONE: decided to do this more the way we did it in the native compiler:\r\n        // UNDONE: there we wrote a post-processing pass that searched the tree for\r\n        // UNDONE: unbound lambdas and did this sort of replacement on them, so that\r\n        // UNDONE: we never observed an unbound lambda in the tree.\r\n        // UNDONE:\r\n        // UNDONE: I think that is a reasonable approach but it is not implemented yet.\r\n        // UNDONE: When we figure out precisely where that rewriting pass should go, \r\n        // UNDONE: we can use the gear implemented in this method as an implementation\r\n        // UNDONE: detail of it.\r\n```\r\n\r\nHowever, we now *do* have a place for this rewriting to go: `BindToTypeForErrorRecovery`\r\n\r\nIt would be nice to \"clean\" the initial bound tree of unbound lambdas.\r\n","Url":"https://github.com/dotnet/roslyn/issues/38925","RelatedDescription":"Open issue \"Prevent unbound lambdas from remaining in the trees after initial binding\" (#38925)"},{"Id":"499641871","IsPullRequest":true,"CreatedAt":"2019-09-27T20:43:44","Actor":"mavasani","Number":"38924","RawContent":null,"Title":"Share name for semantic classification view tagger provider and buffe…","State":"open","Body":"…r tagger provider\r\n\r\nEditor team has requested that we share the name on our semantic classification view tagger and bugger tagger providers. This allows them to implement the following strategy to avoid creating both taggers where possible:\r\n\r\n1. Create the view taggers first.\r\n2. Keep track of the names of the view tagger providers that created a tagger for a particular buffer.\r\n3. Don’t call buffer tagger providers for a buffer if it has the same name as a view tagger provider that provided a tagger for that buffer.\r\n\r\nThis also requires that the returned tagger returns tags when either GetTags() or GetAllTags() is called.","Url":"https://github.com/dotnet/roslyn/pull/38924","RelatedDescription":"Open PR \"Share name for semantic classification view tagger provider and buffe…\" (#38924)"},{"Id":"499638286","IsPullRequest":false,"CreatedAt":"2019-09-27T20:35:18","Actor":"vsfeedback","Number":"38923","RawContent":null,"Title":"Consolidate many quick fixes to simplify class creation.","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/656674/consolidate-many-quick-fixes-to-simplify-class-cre.html)._\n\n---\n<p>When I create a new class in my project, it usually needs a handful of dependencies injected via constructor. Right now I do that by typing out a constructor parameter, pushing Alt-Enter to bring up &quot;Quick Fixes&quot;, then choosing the &quot;create and initialize field&quot; or &quot;create and initialize property&quot; fix as appropriate.</p> <p>C# record types and representative constructors have spent at least half a decade in spec Hell, but I think the IDE has the tools to do this:</p> <ol>\n<li>Create a new type.</li> <li>Type all of the constructor parameters.</li> <li>When I Alt-Enter and choose Quick Fixes, I want a &quot;create and initialize all&quot; quick fix that does what it says for any parameters that aren't currently initialized.</li></ol> <p>For example, suppose I had this constructor:</p> <pre>public Example(IDependency dependency, ILogger logger) {}</pre> <p>After the quick fix, this would be the result if I chose &quot;create and initialize all as fields&quot;.</p> <pre>private readonly IDependency _dependency;\nprivate readonly ILogger _logger;\n\npublic Example(IDependency dependency, ILogger logger)\n{\n    _dependency = dependency;\n    _logger = logger;\n}\n</pre><p>Similar options would exist for properties. I'd use this many times daily.</p>\n\n---\n### Original Comments\n\n#### Jane Wu [MSFT] on 7/23/2019, 01:53 AM: \n\n<p>Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.</p>\n","Url":"https://github.com/dotnet/roslyn/issues/38923","RelatedDescription":"Open issue \"Consolidate many quick fixes to simplify class creation.\" (#38923)"},{"Id":"499620499","IsPullRequest":false,"CreatedAt":"2019-09-27T19:48:24","Actor":"333fred","Number":"38922","RawContent":null,"Title":"Handle reparenting LocalFunction TypeParameters with nullablility reinference","State":"open","Body":"```cs\r\nusing System;\r\n#nullable enable\r\nclass C\r\n{\r\n    public static Action<T> Create<T>(T t, Action<T> a) => throw null!;\r\n\tpublic static T[] Create<T>(T t) => throw null!;\r\n\r\n    public static void M(object? o)\r\n    {\r\n        var a = Create(o, o1 => {\r\n            LocalFunction(o1);\r\n            T LocalFunction<T>(T t) \r\n            {\r\n                _ = Create(t); // Type argument for Create needs to be reparented\r\n\t\t\t\tvar d = new D<T>(); // Type argument in D's substituted type needs to be reparented\r\n\t\t\t\td.DoSomething(t); // Argument of the function needs to be reparented\r\n\t\t\t\treturn d.Prop; // Return type needs to be reparented\r\n            }\r\n        });\r\n    }\r\n}\r\nclass D<T>\r\n{\r\n\tpublic void DoSomething(T t) => throw null!;\r\n\tpublic T Prop { get; }\r\n}\r\n```\r\n\r\nThe parent of that type parameter T should be the given local function, and all usages of that type parameter need to be substituted as well. This includes:\r\n* Regular usage as a type symbol\r\n* Use in substitution for other type symbols\r\n* Use as the return/argument types off of calls from other substituted types.","Url":"https://github.com/dotnet/roslyn/issues/38922","RelatedDescription":"Open issue \"Handle reparenting LocalFunction TypeParameters with nullablility reinference\" (#38922)"},{"Id":"499608618","IsPullRequest":false,"CreatedAt":"2019-09-27T19:19:29","Actor":"jnm2","Number":"38921","RawContent":null,"Title":"Incorrect IDE0044 when NRTs are enabled, the class is generic, and the field is only set by a non-this reference","State":"open","Body":"Visual Studio 16.3.1 and 16.4p1\r\n\r\nIDE0044 should not be reported.\r\n\r\n```cs\r\nclass GenericClass<T>\r\n{\r\n    // IDE0044 Make field readonly\r\n    private int field;\r\n\r\n    public static void Method(GenericClass<T> instance)\r\n    {\r\n        instance.field++;\r\n    }\r\n}\r\n```\r\n\r\nSimilarly:\r\n\r\n```cs\r\nclass GenericClass<T>\r\n{\r\n    // IDE0044 Make field readonly\r\n    private int field;\r\n\r\n    public struct Helper\r\n    {\r\n        private readonly GenericClass<T> instance;\r\n\r\n        public Helper(GenericClass<T> instance)\r\n        {\r\n            this.instance = instance;\r\n        }\r\n\r\n        public void Method()\r\n        {\r\n            instance.field++;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nCsproj:\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp3.0</TargetFramework>\r\n    <LangVersion>latest</LangVersion>\r\n    <Nullable>enable</Nullable>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```","Url":"https://github.com/dotnet/roslyn/issues/38921","RelatedDescription":"Open issue \"Incorrect IDE0044 when NRTs are enabled, the class is generic, and the field is only set by a non-this reference\" (#38921)"},{"Id":"499603694","IsPullRequest":true,"CreatedAt":"2019-09-27T19:07:23","Actor":"ryzngard","Number":"38920","RawContent":null,"Title":"Remove experimentation for file rename with inline rename","State":"open","Body":"This is no longer an experiment. ","Url":"https://github.com/dotnet/roslyn/pull/38920","RelatedDescription":"Open PR \"Remove experimentation for file rename with inline rename\" (#38920)"},{"Id":"499502505","IsPullRequest":true,"CreatedAt":"2019-09-27T19:06:37","Actor":"Youssef1313","Number":"38915","RawContent":null,"Title":"typo: ahve -> have","State":"closed","Body":"","Url":"https://github.com/dotnet/roslyn/pull/38915","RelatedDescription":"Closed or merged PR \"typo: ahve -> have\" (#38915)"},{"Id":"499572841","IsPullRequest":false,"CreatedAt":"2019-09-27T18:21:24","Actor":"sandyarmstrong","Number":"38918","RawContent":null,"Title":"Inline Rename: Cannot type \".\" when renaming namespace","State":"closed","Body":"**Version Used**: 3.3\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Right-click a namespace in any C# file.\r\n2. Select \"Rename\" menu item.\r\n3. Type a new namespace that include a \".\" character.\r\n\r\n**Expected Behavior**:\r\n\r\nYou can type or paste a \".\" character as long as it is a valid namespace string.\r\n\r\n**Actual Behavior**:\r\n\r\nYou cannot type a \".\" character. If you attempt to paste one, the outline becomes red, and the popup in the corner of the editor says \"The new name is not a valid identifier.\"\r\n\r\n**Bonus**: In an ASP.NET Core app, if you hit return anyway at this point, a yellow bar appears indicating that a `NotSupportedException` has been raised.\r\n\r\n```\r\n    <description>System.NotSupportedException: Changing document &apos;C:\\Users\\sandy\\source\\repos\\WebApplication1\\WebApplication1\\Pages\\_ViewImports.g.cs&apos; is not supported.&#x000D;&#x000A;   at Microsoft.CodeAnalysis.Workspace.CheckAllowedProjectChanges(ProjectChanges projectChanges)&#x000D;&#x000A;   at Microsoft.CodeAnalysis.Workspace.CheckAllowedSolutionChanges(SolutionChanges solutionChanges)&#x000D;&#x000A;   at Microsoft.CodeAnalysis.Workspace.TryApplyChanges(Solution newSolution, IProgressTracker progressTracker)&#x000D;&#x000A;   at Microsoft.VisualStudio.LanguageServices.Implementation.ProjectSystem.VisualStudioWorkspaceImpl.TryApplyChanges(Solution newSolution, IProgressTracker progressTracker)&#x000D;&#x000A;   at Microsoft.CodeAnalysis.Workspace.TryApplyChanges(Solution newSolution)&#x000D;&#x000A;   at Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.InlineRenameSession.ApplyRename(Solution newSolution, IWaitContext waitContext)&#x000D;&#x000A;   at Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.InlineRenameSession.CommitCore(IWaitContext waitContext, Boolean previewChanges)&#x000D;&#x000A;   at Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.InlineRenameSession.&lt;&gt;c__DisplayClass76_0.&lt;Commit&gt;b__0(IWaitContext waitContext)&#x000D;&#x000A;   at Microsoft.VisualStudio.LanguageServices.Implementation.Utilities.VisualStudioWaitIndicator.Wait(String title, String message, Boolean allowCancel, Boolean showProgress, Action`1 action)&#x000D;&#x000A;   at Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.InlineRenameSession.Commit(Boolean previewChanges)&#x000D;&#x000A;   at Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.RenameCommandHandler.ExecuteCommand(ReturnKeyCommandArgs args, CommandExecutionContext context)&#x000D;&#x000A;   at Microsoft.VisualStudio.Commanding.CommandHandlerExtensions.ExecuteCommand[T](ICommandHandler commandHandler, T args, Action nextCommandHandler, CommandExecutionContext executionContext)&#x000D;&#x000A;   at Microsoft.VisualStudio.UI.Text.Commanding.Implementation.EditorCommandHandlerService.&lt;&gt;c__DisplayClass13_1`1.&lt;Execute&gt;b__1()&#x000D;&#x000A;   at Microsoft.VisualStudio.Text.Utilities.GuardedOperations.CallExtensionPoint(Object errorSource, Action call, Predicate`1 exceptionFilter)&#x000D;&#x000A;--- End of stack trace from previous location where exception was thrown ---&#x000D;&#x000A;   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)</description>\r\n```\r\n\r\nIn a simple console app, you can hit return and the namespace rename will be successful.","Url":"https://github.com/dotnet/roslyn/issues/38918","RelatedDescription":"Closed issue \"Inline Rename: Cannot type \".\" when renaming namespace\" (#38918)"},{"Id":"499576582","IsPullRequest":false,"CreatedAt":"2019-09-27T18:04:47","Actor":"vsfeedback","Number":"38919","RawContent":null,"Title":"mbox shortcut changes in WPF","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/554389/mbox-shortcut-changes-in-wpf.html)._\n\n---\n<p>In WPF/C#, I used mbox shortcut. At that time, this code was inputed.</p><pre>System.Windows.Forms.MessageBox.Show(&quot;Test&quot;);\n</pre><p>But I want to enter the code below in WPF.</p><pre>System.Windows.MessageBox.Show(&quot;Test&quot;);</pre><p>or</p><pre>using System.Windows;\n// Some Code\nMessageBox.Show(&quot;Test&quot;);  // Where I used shortcut</pre><p></p>\n\n---\n### Original Comments\n\n#### Jane Wu [MSFT] on 5/5/2019, 03:20 AM: \n\n<p>Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&nbsp;We'll provide an update once the issue has been triaged by the product team.</p>\n#### Kendra Havens [MSFT] on 9/27/2019, 11:03 AM: \n\n<p>Thank you for filing this feedback! I'm going to move this to our open source repository on GitHub for further discussion with the community.</p>\n","Url":"https://github.com/dotnet/roslyn/issues/38919","RelatedDescription":"Open issue \"mbox shortcut changes in WPF\" (#38919)"},{"Id":"499497068","IsPullRequest":false,"CreatedAt":"2019-09-27T15:02:16","Actor":"sharwell","Number":"38914","RawContent":null,"Title":"'Suppress diagnostic' should appear before 'Configure diagnostic'","State":"open","Body":"**Version Used**: 16.4 Preview 1\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Expand the light bulb for a diagnostic\r\n2. Attempt to suppress the diagnostic\r\n\r\n**Expected Behavior**:\r\n\r\nThe localized action (suppress diagnostic) should appear before the project-wide action (configure diagnostic). This matches the default selection of 'Fix single' when 'Fix All' is also available.\r\n\r\n**Actual Behavior**:\r\n\r\nSuppressing diagnostics now takes several additional steps relative to earlier releases, because it is more deeply nested and not selected by default.\r\n![image](https://user-images.githubusercontent.com/1408396/65779687-17134f80-e0fd-11e9-9793-ee6ad68434c8.png)\r\n","Url":"https://github.com/dotnet/roslyn/issues/38914","RelatedDescription":"Open issue \"'Suppress diagnostic' should appear before 'Configure diagnostic'\" (#38914)"}],"ResultType":"GitHubIssue"},"CoreRT-Issues":{"Issues":[{"Id":"499773007","IsPullRequest":true,"CreatedAt":"2019-09-28T13:26:50","Actor":"MichalStrehovsky","Number":"7802","RawContent":null,"Title":"Fix Windows debug information for classes","State":"open","Body":"Fixes a longstanding issue where we were emitting erroneous vfptr debug entries and incorrectly mangling class names. One could only inspect things as they were statically typed in the source (so if a variable was typed as `object` in the sources, you wouldn't see any fields in the native debugger, no matter what was assigned to it).\r\n\r\nIt wasn't too terrible, so I sort of just lived with it, but this should work.\r\n\r\nWith this, casting to base classes in the debugger works.\r\n\r\n## Before\r\n\r\n![before](https://user-images.githubusercontent.com/13110571/65817093-98550a00-e203-11e9-88ce-efd8109ae303.gif)\r\n\r\n\r\n## After\r\n\r\n![after](https://user-images.githubusercontent.com/13110571/65817095-9d19be00-e203-11e9-9ec7-73ffe4587b62.gif)\r\n","Url":"https://github.com/dotnet/corert/pull/7802","RelatedDescription":"Open PR \"Fix Windows debug information for classes\" (#7802)"},{"Id":"499146410","IsPullRequest":true,"CreatedAt":"2019-09-27T23:17:06","Actor":"Dotnet-GitSync-Bot","Number":"7800","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @GrabYourPitchforks @benaadams","Url":"https://github.com/dotnet/corert/pull/7800","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#7800)"},{"Id":"499434828","IsPullRequest":true,"CreatedAt":"2019-09-27T15:09:03","Actor":"am11","Number":"7801","RawContent":null,"Title":"Remove duplicate enum SystemVClassificationType","State":"closed","Body":"Found the duplicate definition at: https://github.com/dotnet/corert/blob/a7ce92678876ba55a1c7a65c464363b51d777b4f/src/JitInterface/src/CorInfoTypes.cs#L1170","Url":"https://github.com/dotnet/corert/pull/7801","RelatedDescription":"Closed or merged PR \"Remove duplicate enum SystemVClassificationType\" (#7801)"},{"Id":"498529328","IsPullRequest":true,"CreatedAt":"2019-09-26T22:29:33","Actor":"Dotnet-GitSync-Bot","Number":"7798","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @GrabYourPitchforks @benaadams @stephentoub","Url":"https://github.com/dotnet/corert/pull/7798","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#7798)"},{"Id":"499086023","IsPullRequest":false,"CreatedAt":"2019-09-26T19:57:16","Actor":"jkotas","Number":"7799","RawContent":null,"Title":"CppCodeGen: Implement RVA-backed static fields","State":"open","Body":"E.g. `private static ReadOnlySpan<byte> CategoryForLatin1 => new byte[] { 1, 2, 3, ... };`. CppCodeGen allocates space for these, but does not initialize it.","Url":"https://github.com/dotnet/corert/issues/7799","RelatedDescription":"Open issue \"CppCodeGen: Implement RVA-backed static fields\" (#7799)"},{"Id":"497810701","IsPullRequest":true,"CreatedAt":"2019-09-25T21:17:24","Actor":"Dotnet-GitSync-Bot","Number":"7797","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas @stephentoub","Url":"https://github.com/dotnet/corert/pull/7797","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7797)"},{"Id":"496108391","IsPullRequest":false,"CreatedAt":"2019-09-24T00:16:58","Actor":"Unreal-System","Number":"7795","RawContent":null,"Title":".NET Core 3 ILCompiler.CodeGenerationFailedException: Code generation failed ---> ILCompiler.ScannerFailedException: VTable of type 'System.Net.HttpWebRequest' not computed by the IL scanner.","State":"closed","Body":"[Demo.zip](https://github.com/dotnet/corert/files/3633903/Demo.zip)\r\ndotnet --version\r\n3.0.100-rc1-014190\r\n\r\n用于 .NET Core 的 Microsoft (R) 生成引擎版本 16.3.0-preview-19455-02+4a2d77107\r\n版权所有(C) Microsoft Corporation。保留所有权利。\r\n\r\n  C:\\Users\\Admin\\Desktop\\Fix\\LoginNet\\LoginNet.csproj 的还原在 101.78 ms 内完成。\r\n  你正在使用 .NET Core 的预览版。请查看 https://aka.ms/dotnet-core-preview\r\n  LoginNet -> C:\\Users\\Admin\\Desktop\\Fix\\LoginNet\\bin\\Release\\netcoreapp3.0\\win-x64\\LoginNet.dll\r\n  Generating compatible native code. To optimize for size or speed, visit https://aka.ms/OptimizeCoreRT\r\nEXEC : error : Code generation failed [C:\\Users\\Admin\\Desktop\\Fix\\LoginNet\\LoginNet.csproj]\r\n  ILCompiler.CodeGenerationFailedException: Code generation failed ---> ILCompiler.ScannerFailedException: VTable of type 'System.Net.HttpWebRequest' not computed by the IL scanner. You can work around by running the compilation with scanner disabled.\r\n     at ILCompiler.ILScanResults.ScannedVTableProvider.GetSlice(TypeDesc type)\r\n     at System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(TKey key, Func`2 valueFactory)\r\n     at ILCompiler.Compilation.HasFixedSlotVTable(TypeDesc type)\r\n     at Internal.JitInterface.CorInfoImpl.getCallInfo(CORINFO_RESOLVED_TOKEN& pResolvedToken, CORINFO_RESOLVED_TOKEN* pConstrainedResolvedToken, CORINFO_METHOD_STRUCT_* callerHandle, CORINFO_CALLINFO_FLAGS flags, CORINFO_CALL_INFO* pResult)\r\n     at Internal.JitInterface.CorInfoImpl._getCallInfo(IntPtr thisHandle, IntPtr* ppException, CORINFO_RESOLVED_TOKEN& pResolvedToken, CORINFO_RESOLVED_TOKEN* pConstrainedResolvedToken, CORINFO_METHOD_STRUCT_* callerHandle, CORINFO_CALLINFO_FLAGS flags, CORINFO_CALL_INFO* pResult)\r\n     --- End of inner exception stack trace ---\r\n     at Internal.JitInterface.CorInfoImpl.CompileMethodInternal(IMethodNode methodCodeNodeNeedingCode, MethodIL methodIL)\r\n     at ILCompiler.RyuJitCompilation.ComputeDependencyNodeDependencies(List`1 obj)\r\n     at ILCompiler.DependencyAnalysisFramework.DependencyAnalyzer`2.ComputeMarkedNodes()\r\n     at ILCompiler.RyuJitCompilation.CompileInternal(String outputFile, ObjectDumper dumper)\r\n     at ILCompiler.Compilation.ILCompiler.ICompilation.Compile(String outputFile, ObjectDumper dumper)\r\n     at ILCompiler.Program.Run(String[] args)\r\n     at ILCompiler.Program.Main(String[] args)\r\nC:\\Users\\Admin\\.nuget\\packages\\microsoft.dotnet.ilcompiler\\1.0.0-alpha-27527-01\\build\\Microsoft.NETCore.Native.targets(239,5): error MSB3073: The command \"\"C:\\Users\\Admin\\.nuget\\packages\\runtime.win-x64.microsoft.dotnet.ilcompiler\\1.0.0-alpha-27527-01\\tools\\ilc\" @\"obj\\Release\\netcoreapp3.0\\win-x64\\native\\LoginNet.ilc.rsp\"”exited with code 1. [C:\\Users\\Admin\\Desktop\\Fix\\LoginNet\\LoginNet.csproj]\r\n\r\nCan be compiled on earlier .NET Core 3 previews and CoreRT daily builds.","Url":"https://github.com/dotnet/corert/issues/7795","RelatedDescription":"Closed issue \".NET Core 3 ILCompiler.CodeGenerationFailedException: Code generation failed ---> ILCompiler.ScannerFailedException: VTable of type 'System.Net.HttpWebRequest' not computed by the IL scanner.\" (#7795)"},{"Id":"496830692","IsPullRequest":false,"CreatedAt":"2019-09-22T20:46:12","Actor":"genifycom","Number":"7796","RawContent":null,"Title":"[TEMPORARY EXCEPTION MESSAGE] FileLoadErrorGeneric: Microsoft.Management.Infrastructure","State":"open","Body":"Now getting this strange error:\r\n\r\n  Generating compatible native code. To optimize for size or speed, visit https://aka.ms/OptimizeCoreRT\r\nEXEC : error : [TEMPORARY EXCEPTION MESSAGE] FileLoadErrorGeneric: Microsoft.Management.Infrastructure [C:\\xxx.csproj]\r\n  Internal.TypeSystem.TypeSystemException+FileNotFoundException: [TEMPORARY EXCEPTION MESSAGE] FileLoadErrorGeneric: Microsoft.Management.Infrastructure\r\n     at Internal.TypeSystem.ThrowHelper.ThrowFileNotFoundException(ExceptionStringID id, String fileName)\r\n     at ILCompiler.CompilerTypeSystemContext.GetModuleForSimpleName(String simpleName, Boolean throwIfNotFound)\r\n     at Internal.TypeSystem.Ecma.EcmaModule.ResolveAssemblyReference(AssemblyReferenceHandle handle)\r\n     at Internal.TypeSystem.Ecma.EcmaModule.EcmaObjectLookupHashtable.CreateValueFromKey(EntityHandle handle)\r\n     at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey key)\r\n     at Internal.TypeSystem.Ecma.EcmaModule.GetObject(EntityHandle handle)\r\n     at Internal.TypeSystem.Ecma.EcmaModule.ResolveTypeReference(TypeReferenceHandle handle)\r\n     at Internal.TypeSystem.Ecma.EcmaModule.EcmaObjectLookupHashtable.CreateValueFromKey(EntityHandle handle)\r\n     at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey key)\r\n     at Internal.TypeSystem.Ecma.EcmaModule.GetObject(EntityHandle handle)\r\n     at Internal.TypeSystem.Ecma.EcmaModule.GetType(EntityHandle handle)\r\n     at Internal.TypeSystem.Ecma.EcmaSignatureParser.ParseType(SignatureTypeCode typeCode)\r\n     at Internal.TypeSystem.Ecma.EcmaSignatureParser.ParseMethodSignature()\r\n     at Internal.TypeSystem.Ecma.EcmaMethod.InitializeSignature()\r\n     at ILCompiler.DependencyAnalysis.MethodMetadataNode.GetStaticDependencies(NodeFactory factory)\r\n     at ILCompiler.DependencyAnalysisFramework.DependencyAnalyzer`2.GetStaticDependenciesImpl(DependencyNodeCore`1 node)\r\n     at ILCompiler.DependencyAnalysisFramework.DependencyAnalyzer`2.ProcessMarkStack()\r\n     at ILCompiler.DependencyAnalysisFramework.DependencyAnalyzer`2.ComputeMarkedNodes()\r\n     at ILCompiler.RyuJitCompilation.CompileInternal(String outputFile, ObjectDumper dumper)\r\n     at ILCompiler.Compilation.ILCompiler.ICompilation.Compile(String outputFile, ObjectDumper dumper)\r\n     at ILCompiler.Program.Run(String[] args)\r\n     at ILCompiler.Program.Main(String[] args)\r\nC:\\Users\\DAnderson\\.nuget\\packages\\microsoft.dotnet.ilcompiler\\1.0.0-alpha-28121-01\\build\\Microsoft.NETCore.Native.targets(253,5): error MSB3073: The command \"\"C:\\...\\runtime.win-x64.microsoft.dotnet.ilcompiler\\1.0.0-alpha-28121-01\\tools\\ilc\" @\"obj\\Debug\\netcoreapp2.1\\win-x64\\native\\xxx.ilc.rsp\"\" exited with code 1. [C:\\xxx.csproj]","Url":"https://github.com/dotnet/corert/issues/7796","RelatedDescription":"Open issue \"[TEMPORARY EXCEPTION MESSAGE] FileLoadErrorGeneric: Microsoft.Management.Infrastructure\" (#7796)"},{"Id":"494589847","IsPullRequest":true,"CreatedAt":"2019-09-17T14:13:36","Actor":"Dotnet-GitSync-Bot","Number":"7794","RawContent":null,"Title":"Mirror changes from dotnet/corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7794","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx\" (#7794)"},{"Id":"494273259","IsPullRequest":true,"CreatedAt":"2019-09-16T23:13:23","Actor":"Dotnet-GitSync-Bot","Number":"7793","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @tarekgh @stephentoub","Url":"https://github.com/dotnet/corert/pull/7793","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7793)"},{"Id":"493430075","IsPullRequest":false,"CreatedAt":"2019-09-16T15:38:33","Actor":"RalfKornmannEnvision","Number":"7790","RawContent":null,"Title":"GC on ARM64 based \"kind of unix\" system","State":"closed","Body":"I am sorry to bother again. After fixing some more minor issues and brush up my ARM64 assembler knowledge I was finally able to run a simple hello world on my ARM64 system without crashing. Doing things like writing to the log (the system doesn't have a text based console at all), Thread.Sleep, Environment.TickCount, printing the command line arguments etc works fine. But than I made the \"mistake\" to trigger the GC. \r\n\r\nTo make a long story short after some more debugging I noticed that the unwind of the stack does not work. The reason was pretty obvious. Libunwind doesn't have any information about the function were the stack walk should be started. I am aware that there are some parts missing for ARM64 targets that I need to fill but there is one question I was not able to answer so far. Does the GC only need unwind information for the managed code part? Or do I need to provide information for the C/C++ parts and even the dynamic libs of the OS? I am aware that libunwind can fetch these information by it's own. Unfortunately the function that it uses for this is not supported by the OS my system is using.  I may be able to get the unwind sections from the runtime C/C++ code.\r\n\r\n","Url":"https://github.com/dotnet/corert/issues/7790","RelatedDescription":"Closed issue \"GC on ARM64 based \"kind of unix\" system\" (#7790)"},{"Id":"493684541","IsPullRequest":true,"CreatedAt":"2019-09-15T07:35:11","Actor":"Dotnet-GitSync-Bot","Number":"7792","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7792","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7792)"},{"Id":"493500562","IsPullRequest":true,"CreatedAt":"2019-09-14T14:02:26","Actor":"MichalStrehovsky","Number":"7791","RawContent":null,"Title":"Fix casting to pointers","State":"closed","Body":"Porting a fix made for .NET Native.\r\n\r\nA popular game engine has a `castclass void*` IL instruction in one of the generated files it ships with. This construct is weird enough that it crashes the .NET Native compiler. It doesn't crash the CoreRT compiler, but we still want the runtime side of the fix.","Url":"https://github.com/dotnet/corert/pull/7791","RelatedDescription":"Closed or merged PR \"Fix casting to pointers\" (#7791)"},{"Id":"492984849","IsPullRequest":true,"CreatedAt":"2019-09-13T13:52:21","Actor":"Dotnet-GitSync-Bot","Number":"7789","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @NextTurn","Url":"https://github.com/dotnet/corert/pull/7789","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7789)"},{"Id":"489459547","IsPullRequest":true,"CreatedAt":"2019-09-12T19:12:20","Actor":"cshung","Number":"7775","RawContent":null,"Title":"[WIP] Complete the filtering for MethodImpl.AggressiveOptimization","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7775","RelatedDescription":"Closed or merged PR \"[WIP] Complete the filtering for MethodImpl.AggressiveOptimization\" (#7775)"},{"Id":"492918947","IsPullRequest":true,"CreatedAt":"2019-09-12T19:11:42","Actor":"Dotnet-GitSync-Bot","Number":"7788","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub @TylerBrinkley @tarekgh @obligaron @marek-safar @jkotas @sywhang","Url":"https://github.com/dotnet/corert/pull/7788","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7788)"},{"Id":"491162081","IsPullRequest":true,"CreatedAt":"2019-09-11T00:16:26","Actor":"Dotnet-GitSync-Bot","Number":"7786","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7786","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#7786)"},{"Id":"490571600","IsPullRequest":true,"CreatedAt":"2019-09-09T17:52:58","Actor":"davidwrighton","Number":"7779","RawContent":null,"Title":"Resource writing","State":"closed","Body":"- Refactor the win32 resource reading code to use more natural managed data structures\r\n- Build a Win32 resource emitter on top of refactored data structures\r\n- Replace resource section copy logic with new node to generate win32 resources","Url":"https://github.com/dotnet/corert/pull/7779","RelatedDescription":"Closed or merged PR \"Resource writing\" (#7779)"},{"Id":"491229182","IsPullRequest":false,"CreatedAt":"2019-09-09T17:33:38","Actor":"RalfKornmannEnvision","Number":"7787","RawContent":null,"Title":"finally funclets brocken for ARM64!?","State":"open","Body":"I am not sure if this is a corert or coreclr issue but as I am working on a corert port for an custom ARM64 system I start with posting it here.\r\n\r\nAfter adding code to the objectwriter and the ilcompiler I managed to get a simple hello world app running to the main method. But it than crashed during the shutdown. After some debugging i figured out that the static constructors are never called. After some more debugging I noticed that ClassConstructorRunner.GetCctor corrupts the stack frame,\r\n\r\nIt happens at the end of the method in an assembler block that i believe is the finally funclet for the using. It looks like this\r\n\r\n  28667c: a9be7bfd stp x29, x30, [sp, #-32]!\r\n  286680: f90013f3 str x19, [sp, #32]\r\n  286684: 9103a3a0 add x0, x29, #0xe8\r\n  286688: 97fc0d42 bl 189b90 <S_P_CoreLib_System_Threading_LockHolder__Dispose>\r\n  28668c: d503201f nop\r\n  286690: d503201f nop\r\n  286694: f94013f3 ldr x19, [sp, #32]\r\n  286698: a8c27bfd ldp x29, x30, [sp], #32\r\n  28669c: d65f03c0 ret\r\n\r\nThe fact that x19 is stored with an offset of 32 looks strange for me and it overwrites the already stored data. Based on other stackframes I would expect an offset of 16 here. Or the new stackframe for the funclet needs to be 16 bytes larger.\r\n\r\nDisclaimer: As the development system for the custom ARM64 system runs on windows I although use a ARM64 jit that is build to run on X64. Very simular to the protonojit but not as alt jit to get all the data needed to write the arm64 elf file that the linker for the custom ARM64 system needs. Unfortunately I don't have an ARM64 windows or linux system to check if a non cross jit generates the same code.\r\n\r\nI assume there is no ready to use jit for my use case and I need to build it anyway. In this case I could properly fix the issue but I would need a hint how the code is expected to look like.  ","Url":"https://github.com/dotnet/corert/issues/7787","RelatedDescription":"Open issue \"finally funclets brocken for ARM64!?\" (#7787)"},{"Id":"490799316","IsPullRequest":true,"CreatedAt":"2019-09-08T23:57:41","Actor":"MichalStrehovsky","Number":"7785","RawContent":null,"Title":"Mark unsafe intrinsics as reflection blocked","State":"closed","Body":"Keeping these reflection enabled pulls in quite a bit of junk (generic dictionaries, standalone method bodies, bookkeeping) that adds up to 1.5% of the size of Hello World...","Url":"https://github.com/dotnet/corert/pull/7785","RelatedDescription":"Closed or merged PR \"Mark unsafe intrinsics as reflection blocked\" (#7785)"},{"Id":"490775070","IsPullRequest":false,"CreatedAt":"2019-09-08T21:11:53","Actor":"mrzaxaryan","Number":"7784","RawContent":null,"Title":"Non-trivial marshalling is not yet supported by this compiler.","State":"closed","Body":"Can't save image to MemoryStream \r\n.NET Core v3.0.0-preview9\r\nVisual Studio 16.3.0 Preview 3.0\r\nException: `System.Exception: Method '[System.Drawing.Common]System.Drawing.SafeNativeMethods+Gdip.GdipSaveImageToStream(HandleRef,IStream,Guid&,HandleRef)' requires non-trivial marshalling that is not yet supported by this compiler.\r\n   at System.Drawing.SafeNativeMethods.Gdip.GdipSaveImageToStream(HandleRef, Interop.Ole32.IStream, Guid&, HandleRef) + 0x39\r\n   at System.Drawing.Image.Save(Stream, ImageCodecInfo, EncoderParameters) + 0x1af`\r\n","Url":"https://github.com/dotnet/corert/issues/7784","RelatedDescription":"Closed issue \"Non-trivial marshalling is not yet supported by this compiler.\" (#7784)"},{"Id":"490757817","IsPullRequest":true,"CreatedAt":"2019-09-08T20:09:59","Actor":"MichalStrehovsky","Number":"7782","RawContent":null,"Title":"Port GC changes from CoreCLR","State":"closed","Body":"Ports https://github.com/dotnet/coreclr/commit/cd42ee8fe410f71026467ad2e90116115b85f68d\r\nPorts https://github.com/dotnet/coreclr/commit/740752c9d206a465e96a4d01e7dafb6adb6ded63","Url":"https://github.com/dotnet/corert/pull/7782","RelatedDescription":"Closed or merged PR \"Port GC changes from CoreCLR\" (#7782)"},{"Id":"490760342","IsPullRequest":true,"CreatedAt":"2019-09-08T20:08:39","Actor":"MichalStrehovsky","Number":"7783","RawContent":null,"Title":"Update CoreFX","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7783","RelatedDescription":"Closed or merged PR \"Update CoreFX\" (#7783)"},{"Id":"490704961","IsPullRequest":true,"CreatedAt":"2019-09-08T05:12:25","Actor":"Dotnet-GitSync-Bot","Number":"7781","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7781","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7781)"},{"Id":"490412146","IsPullRequest":true,"CreatedAt":"2019-09-08T00:46:12","Actor":"trylek","Number":"7777","RawContent":null,"Title":"Output raw test lists for the individual outcomes from SuperIlc","State":"closed","Body":"This change tweaks SuperIlc to emit simple line-oriented test lists\r\nfor the various compilation and execution outcomes. I found this\r\nquite useful for comparing various runs. I have also deleted a bit\r\nof dead code I noticed.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7777","RelatedDescription":"Closed or merged PR \"Output raw test lists for the individual outcomes from SuperIlc\" (#7777)"},{"Id":"490662770","IsPullRequest":false,"CreatedAt":"2019-09-07T17:55:27","Actor":"nexon33","Number":"7780","RawContent":null,"Title":"Implement GetInterfaceMap","State":"open","Body":"I want to be able to render a view in asp.net core, I need the controller inheritance to be able to call View();\r\nIs there any simple way of doing this or should I forget about it for now?","Url":"https://github.com/dotnet/corert/issues/7780","RelatedDescription":"Open issue \"Implement GetInterfaceMap\" (#7780)"},{"Id":"490072419","IsPullRequest":true,"CreatedAt":"2019-09-06T23:34:35","Actor":"davidwrighton","Number":"7776","RawContent":null,"Title":"Partial compilation and generic ibc processing","State":"closed","Body":"- Support for partial compilation\r\n- Support for parsing generics in IBC data\r\n - Bonus feature of searching referenced and input assemblies for types if the module in the IBC data is invalid","Url":"https://github.com/dotnet/corert/pull/7776","RelatedDescription":"Closed or merged PR \"Partial compilation and generic ibc processing\" (#7776)"},{"Id":"490437186","IsPullRequest":true,"CreatedAt":"2019-09-06T22:57:58","Actor":"Dotnet-GitSync-Bot","Number":"7778","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7778","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7778)"},{"Id":"489380977","IsPullRequest":true,"CreatedAt":"2019-09-05T14:33:56","Actor":"MichalStrehovsky","Number":"7773","RawContent":null,"Title":"Get jitwrapper building on x86","State":"closed","Body":"CoreCLR repo is going to build it that way. I could exclude that outside x64, but it's just better to fix it...","Url":"https://github.com/dotnet/corert/pull/7773","RelatedDescription":"Closed or merged PR \"Get jitwrapper building on x86\" (#7773)"},{"Id":"489406467","IsPullRequest":true,"CreatedAt":"2019-09-04T23:16:31","Actor":"Dotnet-GitSync-Bot","Number":"7774","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub @NextTurn","Url":"https://github.com/dotnet/corert/pull/7774","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7774)"}],"ResultType":"GitHubIssue"},"SDK-Issues":{"Issues":[{"Id":"499762840","IsPullRequest":true,"CreatedAt":"2019-09-28T14:22:33","Actor":"dotnet-maestro[bot]","Number":"3693","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190927.2\r\n- **Date Produced**: 9/27/2019 6:33 PM\r\n- **Commit**: 14abaee3dba41fbe608431fb6a4f4b2435dcac33\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19477.2\r\n  - **Microsoft.DotNet.SignTool** -> 5.0.0-beta.19477.2\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3693","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3693)"},{"Id":"499763174","IsPullRequest":true,"CreatedAt":"2019-09-28T12:05:23","Actor":"dotnet-bot","Number":"3695","RawContent":null,"Title":"Merge release/3.1.1xx to master","State":"open","Body":"\nThis is an automatically generated pull request from release/3.1.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.1.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.1.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.1.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3695","RelatedDescription":"Open PR \"Merge release/3.1.1xx to master\" (#3695)"},{"Id":"499763157","IsPullRequest":true,"CreatedAt":"2019-09-28T12:05:16","Actor":"dotnet-bot","Number":"3694","RawContent":null,"Title":"Merge release/3.0.1xx to release/3.1.1xx","State":"open","Body":"\nThis is an automatically generated pull request from release/3.0.1xx into release/3.1.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-release/3.1.1xx\ngit reset --hard upstream/release/3.1.1xx\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-release/3.1.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3694","RelatedDescription":"Open PR \"Merge release/3.0.1xx to release/3.1.1xx\" (#3694)"},{"Id":"499723055","IsPullRequest":true,"CreatedAt":"2019-09-28T04:05:13","Actor":"dotnet-maestro[bot]","Number":"3692","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/core-setup","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190927.22\r\n- **Date Produced**: 9/28/2019 2:45 AM\r\n- **Commit**: e5ea848cf4173815a04921132e163e9e8ee17587\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.1.0-preview1.19477.22\r\n\r\n[marker]: <> (End:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3692","RelatedDescription":"Open PR \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#3692)"},{"Id":"497919543","IsPullRequest":false,"CreatedAt":"2019-09-28T02:53:44","Actor":"nguerrera","Number":"3672","RawContent":null,"Title":"It_publishes_and_runs_self_contained_wpf_app assumes `dotnet new wpf` targets 3.0","State":"closed","Body":"Test is failing in merge of core-sdk 3.0 to 3.1 as it starts running is unprepared for the fact that `dotnet new wpf` now targets 3.1.","Url":"https://github.com/dotnet/sdk/issues/3672","RelatedDescription":"Closed issue \"It_publishes_and_runs_self_contained_wpf_app assumes `dotnet new wpf` targets 3.0\" (#3672)"},{"Id":"497912531","IsPullRequest":false,"CreatedAt":"2019-09-28T02:53:44","Actor":"nguerrera","Number":"3671","RawContent":null,"Title":"ReadyToRun failing in 3.1 due to bad assumption about known framework references","State":"closed","Body":"```\r\nD:\\Src\\core-sdk\\artifacts\\bin\\redist\\Debug\\dotnet-with-previous-runtimes\\sdk\\3.1.100-preview1-014353\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Publish.targets(252,5): error MSB4018: The \"PrepareForReadyToRunCompilation\" task failed unexpectedly. [D:\\Src\\core-sdk\\artifacts\\tmp\\Debug\\dotnetSdkTests\\GetPublishCom---86179EA5\\HelloWorldWithSubDirs.csproj]\r\nD:\\Src\\core-sdk\\artifacts\\bin\\redist\\Debug\\dotnet-with-previous-runtimes\\sdk\\3.1.100-preview1-014353\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Publish.targets(252,5): error MSB4018: System.InvalidOperationException: Sequence contains more than one element [D:\\Src\\core-sdk\\artifacts\\tmp\\Debug\\dotnetSdkTests\\GetPublishCom---86179EA5\\HelloWorldWithSubDirs.csproj]\r\nD:\\Src\\core-sdk\\artifacts\\bin\\redist\\Debug\\dotnet-with-previous-runtimes\\sdk\\3.1.100-preview1-014353\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Publish.targets(252,5): error MSB4018:    at System.Linq.ThrowHelper.ThrowMoreThanOneElementException() [D:\\Src\\core-sdk\\artifacts\\tmp\\Debug\\dotnetSdkTests\\GetPublishCom---86179EA5\\HelloWorldWithSubDirs.csproj]\r\nD:\\Src\\core-sdk\\artifacts\\bin\\redist\\Debug\\dotnet-with-previous-runtimes\\sdk\\3.1.100-preview1-014353\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Publish.targets(252,5): error MSB4018:    at System.Linq.Enumerable.SingleOrDefault[TSource](IEnumerable`1 source) [D:\\Src\\core-sdk\\artifacts\\tmp\\Debug\\dotnetSdkTests\\GetPublishCom---86179EA5\\HelloWorldWithSubDirs.csproj]\r\nD:\\Src\\core-sdk\\artifacts\\bin\\redist\\Debug\\dotnet-with-previous-runtimes\\sdk\\3.1.100-preview1-014353\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Publish.targets(252,5): error MSB4018:    at Microsoft.NET.Build.Tasks.PrepareForReadyToRunCompilation.ExecuteCore() [D:\\Src\\core-sdk\\artifacts\\tmp\\Debug\\dotnetSdkTests\\GetPublishCom---86179EA5\\HelloWorldWithSubDirs.csproj]\r\nD:\\Src\\core-sdk\\artifacts\\bin\\redist\\Debug\\dotnet-with-previous-runtimes\\sdk\\3.1.100-preview1-014353\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Publish.targets(252,5): error MSB4018:    at Microsoft.NET.Build.Tasks.TaskBase.Execute() [D:\\Src\\core-sdk\\artifacts\\tmp\\Debug\\dotnetSdkTests\\GetPublishCom---86179EA5\\HelloWorldWithSubDirs.csproj]\r\nD:\\Src\\core-sdk\\artifacts\\bin\\redist\\Debug\\dotnet-with-previous-runtimes\\sdk\\3.1.100-preview1-014353\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Publish.targets(252,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute() [D:\\Src\\core-sdk\\artifacts\\tmp\\Debug\\dotnetSdkTests\\GetPublishCom---86179EA5\\HelloWorldWithSubDirs.csproj]\r\nD:\\Src\\core-sdk\\artifacts\\bin\\redist\\Debug\\dotnet-with-previous-runtimes\\sdk\\3.1.100-preview1-014353\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Publish.targets(252,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskBuilder.ExecuteInstantiatedTask(ITaskExecutionHost taskExecutionHost, TaskLoggingContext taskLoggingContext, TaskHost taskHost, ItemBucket bucket, TaskExecutionMode howToExecuteTask) [D:\\Src\\core-sdk\\artifacts\\tmp\\Debug\\dotnetSdkTests\\GetPublishCom---86179EA5\\HelloWorldWithSubDirs.csproj]\r\n```\r\n\r\nThe code is doing a SingleOrDefault on the KnownFrameworkReferences with Microsoft.NETCore.App framework name, but now there are two that are known: 3.0 and 3.1 so it fails.\r\n\r\n","Url":"https://github.com/dotnet/sdk/issues/3671","RelatedDescription":"Closed issue \"ReadyToRun failing in 3.1 due to bad assumption about known framework references\" (#3671)"},{"Id":"499678524","IsPullRequest":true,"CreatedAt":"2019-09-28T02:53:41","Actor":"dotnet-bot","Number":"3688","RawContent":null,"Title":"Merge release/3.1.1xx to master","State":"closed","Body":"\nThis is an automatically generated pull request from release/3.1.1xx into master.\n(created from a manual run of the PR generation tool)\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.1.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.1.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.1.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3688","RelatedDescription":"Closed or merged PR \"Merge release/3.1.1xx to master\" (#3688)"},{"Id":"498396299","IsPullRequest":true,"CreatedAt":"2019-09-28T02:51:33","Actor":"dotnet-maestro[bot]","Number":"3675","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:e76888f5-e4f1-4c3d-d4c4-08d7315d8bc7)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190924.3\r\n- **Date Produced**: 9/24/2019 6:16 PM\r\n- **Commit**: 0e9ffd6464aff37aef2dc41dc2162d258f266e32\r\n- **Branch**: refs/heads/release/3.x\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19474.3\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19474.3\r\n\r\n[marker]: <> (End:e76888f5-e4f1-4c3d-d4c4-08d7315d8bc7)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3675","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/arcade\" (#3675)"},{"Id":"499678501","IsPullRequest":true,"CreatedAt":"2019-09-28T02:50:08","Actor":"dotnet-bot","Number":"3687","RawContent":null,"Title":"Merge release/3.0.1xx to release/3.1.1xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/3.0.1xx into release/3.1.1xx.\n(created from a manual run of the PR generation tool)\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-release/3.1.1xx\ngit reset --hard upstream/release/3.1.1xx\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-release/3.1.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3687","RelatedDescription":"Closed or merged PR \"Merge release/3.0.1xx to release/3.1.1xx\" (#3687)"},{"Id":"499697830","IsPullRequest":true,"CreatedAt":"2019-09-28T00:05:15","Actor":"dotnet-bot","Number":"3691","RawContent":null,"Title":"Merge release/3.0.100-preview9 to release/3.0.1xx","State":"open","Body":"\nThis is an automatically generated pull request from release/3.0.100-preview9 into release/3.0.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.100-preview9-to-release/3.0.1xx\ngit reset --hard upstream/release/3.0.1xx\ngit merge upstream/release/3.0.100-preview9\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.100-preview9-to-release/3.0.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3691","RelatedDescription":"Open PR \"Merge release/3.0.100-preview9 to release/3.0.1xx\" (#3691)"},{"Id":"499697806","IsPullRequest":true,"CreatedAt":"2019-09-28T00:05:08","Actor":"dotnet-bot","Number":"3690","RawContent":null,"Title":"Merge release/2.2.2xx to release/3.0.100-preview9","State":"open","Body":"\nThis is an automatically generated pull request from release/2.2.2xx into release/3.0.100-preview9.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.2xx-to-release/3.0.100-preview9\ngit reset --hard upstream/release/3.0.100-preview9\ngit merge upstream/release/2.2.2xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.2xx-to-release/3.0.100-preview9 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3690","RelatedDescription":"Open PR \"Merge release/2.2.2xx to release/3.0.100-preview9\" (#3690)"},{"Id":"498447740","IsPullRequest":true,"CreatedAt":"2019-09-27T23:22:57","Actor":"nguerrera","Number":"3676","RawContent":null,"Title":"Revert \"Remove perf from builds\"","State":"closed","Body":"Revert #3654\r\n\r\nFix #3655","Url":"https://github.com/dotnet/sdk/pull/3676","RelatedDescription":"Closed or merged PR \"Revert \"Remove perf from builds\"\" (#3676)"},{"Id":"499653558","IsPullRequest":true,"CreatedAt":"2019-09-27T23:20:14","Actor":"nguerrera","Number":"3686","RawContent":null,"Title":"Flow available RIDs to R2R via targeting pack, not runtime pack","State":"closed","Body":"Follow up on feedback on merge from 3.0 -> 3.1","Url":"https://github.com/dotnet/sdk/pull/3686","RelatedDescription":"Closed or merged PR \"Flow available RIDs to R2R via targeting pack, not runtime pack\" (#3686)"},{"Id":"499169291","IsPullRequest":true,"CreatedAt":"2019-09-27T23:16:02","Actor":"dotnet-bot","Number":"3682","RawContent":null,"Title":"Merge release/3.0.100-preview9 to release/3.0.1xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/3.0.100-preview9 into release/3.0.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.100-preview9-to-release/3.0.1xx\ngit reset --hard upstream/release/3.0.1xx\ngit merge upstream/release/3.0.100-preview9\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.100-preview9-to-release/3.0.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3682","RelatedDescription":"Closed or merged PR \"Merge release/3.0.100-preview9 to release/3.0.1xx\" (#3682)"},{"Id":"499679772","IsPullRequest":true,"CreatedAt":"2019-09-27T22:41:07","Actor":"wli3","Number":"3689","RawContent":null,"Title":"Better error message when c++ targeting TFM lower than 3.1","State":"open","Body":"fix https://github.com/dotnet/sdk/issues/3626","Url":"https://github.com/dotnet/sdk/pull/3689","RelatedDescription":"Open PR \"Better error message when c++ targeting TFM lower than 3.1\" (#3689)"},{"Id":"499599835","IsPullRequest":false,"CreatedAt":"2019-09-27T18:58:04","Actor":"swaroop-sridhar","Number":"3685","RawContent":null,"Title":"Publish Single-file: Smart settings for IncludeSymbolsInSingleFile","State":"open","Body":"When publishing an app as a single file, the default setting is to not include PDB files in the output bundle by default (and instead leave them as separate files).\r\n\r\nHowever, this setting is unsuitable for some apps, where the `deps.json` file includes a dependency on the PDB file. This causes runtime-crash of the app when the `apphost` validates the contents against the deps.json manifest. For example: \r\nhttps://github.com/PowerShell/PowerShell/issues/10266\r\nhttps://github.com/Viir/bots/tree/adapt-for-single-file-exe-publish\r\n\r\nThe inclusion of PDB files as a dependency is almost always an error, but an app (and its dependencies/nuget packages) are not required to associate the same semantics with file-extensions. \r\n\r\nSo, if the deps.json writer finds a PDB file in the manifest, the SDK should default the `IncludeSymbolsInSingleFile` setting to true. The SDK should also issue a warning about this change, so that PDBs are not silently included -- unintentionally increasing the size of published apps.\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/issues/3685","RelatedDescription":"Open issue \"Publish Single-file: Smart settings for IncludeSymbolsInSingleFile\" (#3685)"},{"Id":"499577923","IsPullRequest":false,"CreatedAt":"2019-09-27T18:07:57","Actor":"dsplaisted","Number":"3684","RawContent":null,"Title":"Re-enable tests disabled as part of repo merge","State":"open","Body":"I'm working on merging the cli and toolset repos, and there are some tests which are failing only on non-Windows and only in CI.  I am going to disable these tests for now in order to not block the repo merge.\r\n\r\nOnce everything is merged into the SDK repo, we should investigate and re-enable them.","Url":"https://github.com/dotnet/sdk/issues/3684","RelatedDescription":"Open issue \"Re-enable tests disabled as part of repo merge\" (#3684)"},{"Id":"499515674","IsPullRequest":false,"CreatedAt":"2019-09-27T14:41:30","Actor":"aguacongas","Number":"3683","RawContent":null,"Title":"dotnet publish with a runtime identifier and no build publish the wrong version of System.Net.Http dll","State":"open","Body":"I have a wrote a Windows Service and I compile it using `donet build -c Release` and I publish it using `dotnet publish -c Release --no-build`   \r\nBut the System.Net.Http dll packaged has the file version 4.6.27110.4, it should be 4.6.27207.3.  \r\nAnd I received error that should be fixed in runtime 2.2.1 :   [System.ServiceModel.CommunicationException: The server returned an invalid or unrecognized response](https://github.com/dotnet/corefx/issues/31423)\r\n\r\nThe project .csproj declare:  \r\n``` xml\r\n<PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp2.2</TargetFramework>\r\n    <RuntimeIdentifier>win7-x64</RuntimeIdentifier>\r\n    <LangVersion>latest</LangVersion>\r\n  </PropertyGroup>\r\n```\r\nThe `dotnet --info` output:\r\n```bash\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.402\r\n Commit:    c7f2f96116\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.14393\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.402\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.7\r\n  Commit:  b1e29ae826\r\n\r\n.NET Core SDKs installed:\r\n  1.1.9 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.11 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.301 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.400 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.401 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.503 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.504 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.802 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.101 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.402 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\nIf I replace System.Net.Http.dll with file version 4.6.27110.4 by the one I found in dotnet\\shared\\Microsoft.NETCore.App\\2.2.1 I don't received errors. \r\n\r\nIf I don't used the --no-build args it works","Url":"https://github.com/dotnet/sdk/issues/3683","RelatedDescription":"Open issue \"dotnet publish with a runtime identifier and no build publish the wrong version of System.Net.Http dll\" (#3683)"},{"Id":"498386287","IsPullRequest":true,"CreatedAt":"2019-09-26T22:53:53","Actor":"dotnet-maestro[bot]","Number":"3674","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:df8a2755-bec9-40dc-b710-08d7368af630)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190924.3\r\n- **Date Produced**: 9/24/2019 6:16 PM\r\n- **Commit**: 0e9ffd6464aff37aef2dc41dc2162d258f266e32\r\n- **Branch**: refs/heads/release/3.x\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19474.3\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19474.3\r\n\r\n[marker]: <> (End:df8a2755-bec9-40dc-b710-08d7368af630)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3674","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/arcade\" (#3674)"},{"Id":"499119549","IsPullRequest":true,"CreatedAt":"2019-09-26T22:51:28","Actor":"mmitche","Number":"3681","RawContent":null,"Title":"[release/3.0.1xx] Rebrand for 3.0.101","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/3681","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Rebrand for 3.0.101\" (#3681)"},{"Id":"499103379","IsPullRequest":false,"CreatedAt":"2019-09-26T20:36:17","Actor":"wli3","Number":"3680","RawContent":null,"Title":"Refresh docker images","State":"open","Body":"- [ ] Since they are outdated, it starts to fail and there is no easy fix. Like this case https://github.com/dotnet/core-sdk/pull/4955. Check all our outdate docker images. Update them to the supported version.\r\n- [ ] Check in the docker file to https://github.com/dotnet/dotnet-buildtools-prereqs-docker/ and use the image. We can save a lot of build time by using image instead of installing dependencies during the build","Url":"https://github.com/dotnet/sdk/issues/3680","RelatedDescription":"Open issue \"Refresh docker images\" (#3680)"},{"Id":"498700038","IsPullRequest":false,"CreatedAt":"2019-09-26T07:06:21","Actor":"taori","Number":"3679","RawContent":null,"Title":"Upgraded projects which compile to NS 2.1, didn't compile, downgrade, now compile fails as well","State":"open","Body":"I was trying to update an application to netcore3 to fix some issues, which spawned other issues (RazorTagHelper requiring some Configuration to operate). To attempt resolve those issues i figured i may try to update the libraries to netstandard 2.1 - that didn't fix it either, so i downgraded my projects back to 2.0.\r\n\r\nOddly enough now those libraries won't compile either even if i clean the solution + delete bin/obj manually.\r\n\r\nFehler: Es wurde versucht, einen numerischen Vergleich für \"$(_TargetFrameworkVersionWithoutV)\" auszuführen, der zu \"**.2.0**\" anstatt zu einer Zahl in Bedingung \" '$(TargetFrameworkIdentifier)' == '.NETCoreApp' and '$(_TargetFrameworkVersionWithoutV)' < '**2.0**' \" ausgewertet wird.  C:\\Program Files\\dotnet\\sdk\\3.0.100\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.NuGetOfflineCache.targets","Url":"https://github.com/dotnet/sdk/issues/3679","RelatedDescription":"Open issue \"Upgraded projects which compile to NS 2.1, didn't compile, downgrade, now compile fails as well\" (#3679)"},{"Id":"498578523","IsPullRequest":false,"CreatedAt":"2019-09-25T23:55:16","Actor":"livarcocc","Number":"3678","RawContent":null,"Title":"Turn wpf vb template tests back","State":"open","Body":"Turned the test off because the wpf vb template has been removed for now.\r\n\r\ncc @KathleenDollard ","Url":"https://github.com/dotnet/sdk/issues/3678","RelatedDescription":"Open issue \"Turn wpf vb template tests back\" (#3678)"},{"Id":"497966698","IsPullRequest":true,"CreatedAt":"2019-09-25T23:42:33","Actor":"dsplaisted","Number":"3673","RawContent":null,"Title":"Fix build error when UserSecretsId property is defined but API is not referenced","State":"closed","Body":"Fixes dotnet/core#3290","Url":"https://github.com/dotnet/sdk/pull/3673","RelatedDescription":"Closed or merged PR \"Fix build error when UserSecretsId property is defined but API is not referenced\" (#3673)"},{"Id":"498458933","IsPullRequest":false,"CreatedAt":"2019-09-25T18:44:27","Actor":"nguerrera","Number":"3677","RawContent":null,"Title":"Make perf tests run out of band","State":"open","Body":"See discussion #3654, #3676, #3655\r\n\r\nWe should not block the official build on them and end up having to turn them off in an urgent situation as was done for 3.0 release.","Url":"https://github.com/dotnet/sdk/issues/3677","RelatedDescription":"Open issue \"Make perf tests run out of band\" (#3677)"},{"Id":"497578216","IsPullRequest":false,"CreatedAt":"2019-09-24T23:55:42","Actor":"fugaku","Number":"3667","RawContent":null,"Title":"Error NETSDK1073: The FrameworkReference 'Microsoft.AspNetCore.App' was not recognized","State":"closed","Body":"I'm trying to upgrade my library project from .net core 2.2 to .net core 3.0 using below setup for the `.csproj`\r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netstandard2.0</TargetFramework>\r\n    <LangVersion>latest</LangVersion>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <FrameworkReference Include=\"Microsoft.AspNetCore.App\" />\r\n    <PackageReference Include=\"LibLog\" Version=\"5.0.6\">\r\n      <PrivateAssets>all</PrivateAssets>\r\n      <IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>\r\n    </PackageReference>\r\n    <PackageReference Include=\"Microsoft.Extensions.DependencyInjection\" Version=\"3.0.0\" />\r\n    <PackageReference Include=\"Microsoft.EntityFrameworkCore\" Version=\"2.2.6\" />\r\n    <PackageReference Include=\"Newtonsoft.Json\" Version=\"12.0.2\" />\r\n    <PackageReference Include=\"System.Runtime.Loader\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nI have this dotnet sdk versions installed\r\n```\r\n.NET Core SDK (reflecting any global.json):                                                                                                                                                    Version:   3.0.100                                                                                                                                                                            Commit:    04339c3a26                                                                                                                                                                                                                                                                                                                                                                      Runtime Environment:                                                                                                                                                                           OS Name:     Windows                                                                                                                                                                          OS Version:  10.0.18362                                                                                                                                                                       OS Platform: Windows                                                                                                                                                                          RID:         win10-x64                                                                                                                                                                        Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100\\                                                                                                                                                                                                                                                                                                                                          Host (useful for support):                                                                                                                                                                      Version: 3.0.0                                                                                                                                                                                Commit:  7d57652f33                                                                                                                                                                                                                                                                                                                                                                       .NET Core SDKs installed:                                                                                                                                                                       2.1.200 [C:\\Program Files\\dotnet\\sdk]                                                                                                                                                         2.1.302 [C:\\Program Files\\dotnet\\sdk]                                                                                                                                                         2.1.503 [C:\\Program Files\\dotnet\\sdk]                                                                                                                                                         2.1.504 [C:\\Program Files\\dotnet\\sdk]                                                                                                                                                         2.1.505 [C:\\Program Files\\dotnet\\sdk]                                                                                                                                                         2.1.507 [C:\\Program Files\\dotnet\\sdk]                                                                                                                                                         2.1.602 [C:\\Program Files\\dotnet\\sdk]                                                                                                                                                         2.1.700 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.701 [C:\\Program Files\\dotnet\\sdk]Modules\\CustomsInventory.Modules>\r\n  2.1.801 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.802 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.102 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.103 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.104 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.300 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.301 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.401 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.402 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n```\r\n\r\nBuilding the project gives me the error \r\n```\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.FrameworkReferenceResolution.targets(263,5): error NETSDK1073: The FrameworkReference 'Microsoft.AspNetCore.App' was not recognized\r\n```\r\n\r\nIs there any documentation regarding referencing Microsoft.AspNetCore.* libraries from a netstandard projects ?","Url":"https://github.com/dotnet/sdk/issues/3667","RelatedDescription":"Closed issue \"Error NETSDK1073: The FrameworkReference 'Microsoft.AspNetCore.App' was not recognized\" (#3667)"},{"Id":"497674518","IsPullRequest":false,"CreatedAt":"2019-09-24T13:02:29","Actor":"smoothdeveloper","Number":"3670","RawContent":null,"Title":"Suggestion: location of global.json (and like files), should they move to a .dotnet subfolder?","State":"open","Body":"Asking if `global.json` (and other similar files) could be resolved from a `.dotnet` subfolder rather than at the root of repository.\r\n\r\nMotives:\r\n1. root folder is a crawded place\r\n1. `global.json` is to  generic of a name, doesn't convey anything related to dotnet, moving it to a folder, and maybe renaming it?\r\n\r\nSorry if this issue has been brought up, tried to search, and it has been bothering me due to point 1.","Url":"https://github.com/dotnet/sdk/issues/3670","RelatedDescription":"Open issue \"Suggestion: location of global.json (and like files), should they move to a .dotnet subfolder?\" (#3670)"},{"Id":"497672701","IsPullRequest":false,"CreatedAt":"2019-09-24T12:59:18","Actor":"retifrav","Number":"3669","RawContent":null,"Title":"dotnet build ignores .config files from .csproj CopyToOutputDirectory","State":"open","Body":"I noticed that `.csproj` rule\r\n\r\n```\r\n<ItemGroup>\r\n  <None Update=\"log4net.config\" CopyToOutputDirectory=\"Always\" />\r\n</ItemGroup>\r\n```\r\n\r\nis ignored for files with `.config` extension when performing `dotnet build`.\r\n\r\nI've done some testing with the following project:\r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.2</TargetFramework>\r\n    <AspNetCoreHostingModel>InProcess</AspNetCoreHostingModel>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <None Update=\"ololo.config\" CopyToOutputDirectory=\"Always\" />\r\n    <None Update=\"ololo.config2\" CopyToOutputDirectory=\"Always\" />\r\n    <None Update=\"ololo.confi\" CopyToOutputDirectory=\"Always\" />\r\n    <None Update=\"log4net.config\" CopyToOutputDirectory=\"Always\" />\r\n    <None Update=\"some.txt\" CopyToOutputDirectory=\"Always\" />\r\n  </ItemGroup>\r\n\r\n  ...\r\n\r\n</Project>\r\n```\r\n\r\nThe following files are successfully copied to the output directory:\r\n\r\n- `ololo.config2`\r\n- `ololo.confi`\r\n- `some.txt`\r\n\r\nBut these files are not copied:\r\n\r\n- `ololo.config`\r\n- `log4net.config`\r\n\r\nLike I said, this happens on `dotnet build`. At the same time `dotnet publish` works fine and copies all the files.\r\n\r\nMy environment:\r\n\r\n```\r\n> dotnet --info\r\n\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.402\r\n Commit:    c7f2f96116\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.402\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.7\r\n  Commit:  b1e29ae826\r\n\r\n.NET Core SDKs installed:\r\n  2.2.402 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.2.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.2.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n```","Url":"https://github.com/dotnet/sdk/issues/3669","RelatedDescription":"Open issue \"dotnet build ignores .config files from .csproj CopyToOutputDirectory\" (#3669)"},{"Id":"497596539","IsPullRequest":false,"CreatedAt":"2019-09-24T10:21:19","Actor":"gmeks","Number":"3668","RawContent":null,"Title":" error MSB6006: \"dotnet.exe\" exited with code -532462766. (With PublishTrimmed=true)","State":"open","Body":"Host (useful for support):\r\n  Version: 3.0.0\r\n  Commit:  7d57652f33\r\n\r\nIf i enabled PublishTrimmed=true when trying to publish a .net Core 3.0 application ( Newly updated from .net Core 2.2) i get the following error:\r\nC:\\SourceCode\\PlaniaHomeMVC\\BuildServerAgent>dotnet publish -c Release -r win10-x64 /p:PublishSingleFile=true /p:PublishTrimmed=true\r\nMicrosoft (R) Build Engine version 16.3.0+0f4c62fea for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n```\r\n  Restore completed in 26,23 ms for C:\\SourceCode\\PlaniaHomeMVC\\PlaniaHomeShared\\PlaniaHomeShared.csproj.\r\n  Restore completed in 40,52 ms for C:\\SourceCode\\PlaniaHomeMVC\\HomeAgentShared\\HomeAgentShared.csproj.\r\n  Restore completed in 40,68 ms for C:\\SourceCode\\PlaniaHomeMVC\\BuildServerAgent\\BuildServerAgent.csproj.\r\n  PlaniaHomeShared -> C:\\SourceCode\\PlaniaHomeMVC\\PlaniaHomeShared\\bin\\Release\\netcoreapp3.0\\PlaniaHomeShared.dll\r\n  HomeAgentShared -> C:\\SourceCode\\PlaniaHomeMVC\\HomeAgentShared\\bin\\Release\\netcoreapp3.0\\HomeAgentShared.dll\r\n  BuildServerAgent -> C:\\SourceCode\\PlaniaHomeMVC\\BuildServerAgent\\bin\\Release\\netcoreapp3.0\\win10-x64\\BuildServerAgent.dll\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.ILLink.targets(87,5): error MSB6006: \"dotnet.exe\" exited with code -532462766. [C:\\SourceCode\\PlaniaHomeMVC\\BuildServerAgent\\BuildServerAgent.csproj]\r\n\r\n```\r\nAnd im unsure what i have done wrong, i assume i missed something in the upgrade to .NET Core 3.0. If i remove PublishTrimmed it works","Url":"https://github.com/dotnet/sdk/issues/3668","RelatedDescription":"Open issue \" error MSB6006: \"dotnet.exe\" exited with code -532462766. (With PublishTrimmed=true)\" (#3668)"},{"Id":"497396166","IsPullRequest":true,"CreatedAt":"2019-09-24T00:49:46","Actor":"wli3","Number":"3666","RawContent":null,"Title":"WIP Helix test","State":"open","Body":"will that work?","Url":"https://github.com/dotnet/sdk/pull/3666","RelatedDescription":"Open PR \"WIP Helix test\" (#3666)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"497868605","IsPullRequest":false,"CreatedAt":"2019-09-24T19:01:32","Actor":"MichaelSimons","Number":"124","RawContent":null,"Title":".NET Core `latest` Docker tags updated to 3.0","State":"open","Body":"# .NET Core `latest` Docker tags updated to 3.0\r\n \r\nThe `latest` tags for the [dotnet/core](https://hub.docker.com/_/microsoft-dotnet-core) repos have been updated to reference [.NET Core 3.0](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0/).\r\n \r\n## Discussion\r\n \r\nYou can share your thoughts on this change or see what others are saying at:\r\n \r\n* [dotnet/dotnet-docker#1337](https://github.com/dotnet/dotnet-docker/issues/1337)\r\n \r\n## Details\r\n \r\n* [dotnet-docker#1334](https://github.com/dotnet/dotnet-docker/pull/1334)\r\n \r\nThe `latest` tags for the [dotnet/core](https://hub.docker.com/_/microsoft-dotnet-core) repos are always intended to reference the latest supported version of .NET Core. At this time, the latest supported version is .NET Core 3.0.\r\n \r\nThe following Docker repos have been updated:\r\n \r\n* [dotnet/core/sdk](https://hub.docker.com/_/microsoft-dotnet-core-sdk)\r\n* [dotnet/core/aspnet](https://hub.docker.com/_/microsoft-dotnet-core-aspnet)\r\n* [dotnet/core/runtime](https://hub.docker.com/_/microsoft-dotnet-core-runtime)\r\n* [dotnet/core/runtime-deps](https://hub.docker.com/_/microsoft-dotnet-core-runtime-deps)\r\n* [dotnet/core/samples](https://hub.docker.com/_/microsoft-dotnet-core-samples)\r\n \r\nIt is recommended to use a more-specific tag than `latest` for anything other than casual development. Once you have an application that you believe will eventually go to production, you are recommended to use a tag like `3.0`. The [.NET Core Docker Samples](https://github.com/dotnet/dotnet-docker/tree/master/samples) contain examples of more specific usage such as the [.NET Core console sample](https://github.com/dotnet/dotnet-docker/blob/master/samples/dotnetapp/Dockerfile).\r\n","Url":"https://github.com/dotnet/announcements/issues/124","RelatedDescription":"Open issue \".NET Core `latest` Docker tags updated to 3.0\" (#124)"},{"Id":"494223006","IsPullRequest":false,"CreatedAt":"2019-09-16T19:03:54","Actor":"leecow","Number":"123","RawContent":null,"Title":".NET Core 3.0 RC 1","State":"open","Body":".NET Core RC 1 released today. https://github.com/dotnet/core/issues/3380 has been opened for discussion. \r\n\r\n[Release Notes](https://github.com/dotnet/core/blob/master/release-notes/3.0/preview/3.0.0-rc1.md)\r\n[Download](https://github.com/dotnet/core/blob/master/release-notes/3.0/preview/3.0.0-rc1-download.md)\r\n\r\n**Blog posts**\r\n\r\n[.NET Core](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0-release-candidate-1/)\r\n[ASP.NET Core](https://devblogs.microsoft.com/aspnet/asp-net-core-and-blazor-updates-in-net-core-3-0-release-candidate-1/)\r\n\r\nPlease report any issues you find with 3.0.0 RC 1, either responding to this issue, creating a new issue or creating a new issue in one of the following repos:\r\n\r\n* [aspnet/AspNetCore](https://github.com/aspnet/AspNetCore) - for ASP.NET Core questions\r\n* [aspnet/EntityFrameworkCore](https://github.com/aspnet/EntityFrameworkCore) - for Entity Framework Core questions\r\n* [dotnet/cli](https://github.com/dotnet/cli/issues) - for CLI tools and questions\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues) - for API issues and questions\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues) - for runtime issues\r\n* [dotnet/core-setup](https://github.com/dotnet/core-setup/issues) - for installer issues\r\n* [dotnet/winforms](https://github.com/dotnet/winforms/issues) - for Winforms issues\r\n* [dotnet/wpf](https://github.com/dotnet/wpf/issues) - for WPF issues\r\n* [nuget/home](https://github.com/nuget/home/issues) - for NuGet questions and issues","Url":"https://github.com/dotnet/announcements/issues/123","RelatedDescription":"Open issue \".NET Core 3.0 RC 1\" (#123)"},{"Id":"491801748","IsPullRequest":false,"CreatedAt":"2019-09-10T17:23:20","Actor":"leecow","Number":"122","RawContent":null,"Title":"September 2019 .NET Updates","State":"open","Body":"The following .NET updates were released on September 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.13 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.13/2.1.13.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.7 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.7/2.2.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/3345](https://github.com/dotnet/core/issues/3345)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/122","RelatedDescription":"Open issue \"September 2019 .NET Updates\" (#122)"},{"Id":"491794046","IsPullRequest":false,"CreatedAt":"2019-09-10T17:04:46","Actor":"blowdart","Number":"121","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-1301: Denial of Service Vulnerability in .NET Core","State":"open","Body":"# Microsoft Security Advisory CVE-2019-1301: Denial of Service Vulnerability in .NET Core\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability when .NET Core improperly handles web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core web application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nThe update addresses the vulnerability by correcting how the .NET Core web application handles web requests.\r\n\r\n## Announcement\r\n\r\nThe original announcement for this issue can be found at https://github.com/dotnet/announcements/issues/121\r\n\r\n## <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nNone\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application running on .NET Core 2.1.0-2.1.12, or .NET Core 2.2.0-2.2.6\r\n\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nYou can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  2.1.604 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf you have a version of .NET Core less than 2.1.13 or less than 2.2.7, you're vulnerable.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\n* For machines running .NET Core 2.1, you should download Runtime 2.1.13 or SDK 2.1.509 for Visual Studio 2017 or SDK 2.1.606 for Visual Studio 2019 (v16.0) or SDK 2.1.802 for Visual Studio 2019 (v16.2) from https://dotnet.microsoft.com/download/dotnet-core/2.1.\r\n* For machines running .NET Core 2.2, you should download Runtime 2.2.7 or SDK 2.2.109 for Visual Studio 2017 or SDK 2.2.206 for Visual Studio 2019 (v16.0) or SDK 2.2.402 for Visual Studio 2019 (v16.2) from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nIf you have both 2.1 and 2.2, you need to install updates for both versions.\r\n\r\nOnce you have installed the updated runtime or SDK, restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/dotnet/core/versions/selection) to a specific version of the runtime, you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n# Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/, respectively. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\nPaul Ryman of VMware Sydney Engineering Team\r\n\r\n### External Links\r\n\r\n[CVE-2019-1301](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-1301)\r\n\r\n### Revisions\r\n\r\nV1.0 (September 10, 2019): Advisory published.\r\nV1.1 (September 10, 2019): Fix version numbers\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-09-10_\r\n","Url":"https://github.com/dotnet/announcements/issues/121","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-1301: Denial of Service Vulnerability in .NET Core\" (#121)"},{"Id":"489344106","IsPullRequest":false,"CreatedAt":"2019-09-04T19:14:05","Actor":"leecow","Number":"120","RawContent":null,"Title":".NET Core 3.0 Preview 9","State":"open","Body":".NET Core Preview 9 released today. https://github.com/dotnet/core/issues/3304 has been opened for discussion. \r\n\r\n[Release Notes](https://github.com/dotnet/core/blob/master/release-notes/3.0/preview/3.0.0-preview9.md)\r\n[Download](https://github.com/dotnet/core/blob/master/release-notes/3.0/preview/3.0.0-preview9-download.md)\r\n\r\n**Blog posts**\r\n\r\n[.NET Core](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0-preview-9/)\r\n[ASP.NET Core](https://devblogs.microsoft.com/aspnet/asp-net-core-and-blazor-updates-in-net-core-3-0-preview-9/)\r\n\r\nPlease report any issues you find with 3.0.0 Preview 9, either responding to this issue, creating a new issue or creating a new issue in one of the following repos:\r\n\r\n* [aspnet/AspNetCore](https://github.com/aspnet/AspNetCore) - for ASP.NET Core questions\r\n* [aspnet/EntityFrameworkCore](https://github.com/aspnet/EntityFrameworkCore) - for Entity Framework Core questions\r\n* [dotnet/cli](https://github.com/dotnet/cli/issues) - for CLI tools and questions\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues) - for API issues and questions\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues) - for runtime issues\r\n* [dotnet/core-setup](https://github.com/dotnet/core-setup/issues) - for installer issues\r\n* [dotnet/winforms](https://github.com/dotnet/winforms/issues) - for Winforms issues\r\n* [dotnet/wpf](https://github.com/dotnet/wpf/issues) - for WPF issues\r\n* [nuget/home](https://github.com/nuget/home/issues) - for NuGet questions and issues","Url":"https://github.com/dotnet/announcements/issues/120","RelatedDescription":"Open issue \".NET Core 3.0 Preview 9\" (#120)"},{"Id":"480859726","IsPullRequest":false,"CreatedAt":"2019-08-14T19:54:26","Actor":"stephentoub","Number":"119","RawContent":null,"Title":"Consolidating .NET GitHub repos","State":"open","Body":"*To discuss these plans, please comment on the corresponding issue at https://github.com/dotnet/coreclr/issues/26175.*\r\n\r\nOver the next few months, we plan to consolidate several of the foundational repositories of .NET Core, including dotnet/coreclr and dotnet/corefx.\r\n\r\n.NET’s repository structure on GitHub was initially created in a fairly fine-grained manner, with the aim of enabling runtime agility and increased developer productivity.  However, this separation has led to a variety of complications for contributors and maintainers alike.  For example:\r\n- **Confusion about where issues should be opened.**  It’s not always clear in which repo an issue should be reported, complicated by the fact that some implementations actually span repositories (e.g. a type might be exposed through a reference assembly and have its tests in corefx but actually be implemented in System.Private.CoreLib in coreclr).\r\n- **Difficulty sharing source.**  System.Private.CoreLib is intricately connected to the rest of the runtime, and thus has lived with the runtime code.  That, however, means that although corefx has been intended as the place to share as much core library code as possible across any underlying runtime, we’ve needed to keep a significant body of code in System.Private.CoreLib, which then has meant it’s needed to be “mirrored” to each runtime repo (coreclr, corert, mono) that needs to consume it as source; similarly, corefx has similarly required access to much of that source, for example to use the same interop DllImports that are employed elsewhere in the runtimes.  The automatic mirror that shares this source needs to be maintained, and even when it has been, it’s often led to lag.  It’s also complicated developer processes, where to validate a change in one repo generally requires manually mirroring the code to other local repos in order to validate the change and ensure merging into one repo won’t break the others.\r\n- **PRs spanning multiple repos.**  Because the runtime, CoreLib, and the core libraries are all intricately linked, changing runtime behaviors, adding new APIs, or changing various build processes (e.g. improving static analysis) often requires multiple PRs carefully staged across time and multiple repos.  For example, to add a new method to a type like Dictionary<>, a developer must first make the source changes in her local coreclr repo and the test and reference assembly changes in her local corefx repo.  When satisfied with the fix, the developer must submit a PR to coreclr as well as a PR to corefx, the latter of which will fail.  Eventually the coreclr PR will be merged, and the changes will mirror to the other runtimes that also require the update.  Eventually those mirror PRs will be merged, and builds will be created containing the fix for each runtime.  At some point later those builds will be consumed into the corefx repo, after which point the original corefx PR can be re-validated and eventually merged.  That’s the best case; things get more complicated in situations where there are bidirectional dependencies.\r\n- **Building an installable runtime.** Self-hosting a custom built .NET requires intricate knowledge of how all the repos work and interact.  A developer can’t just clone a single repo, make a desired change, and easily produce an installer.\r\n- **Consistency.**  One goal we had for more fine-grained repos was to enable isolation and independence for teams working within each repo’s confines, but this has led to non-trivial duplication of effort on things like build systems and CI, and then the resulting lack of consistency as each system ends up diverging from the others.\r\n\r\nThe issues go beyond the runtime.  For example, the ASP.NET maintainers and community did a great job in the past year or so consolidating from ~55 repos down to ~5 repos, but that’s still more repos than is desirable, leading to similar issues as cited above for the runtime.  On top of that, these ASP.NET repositories are in the aspnet GitHub org, which adds an additional set of issues, for example:\r\n- **Complications moving issues between repos.**  If a developer opens an issue in aspnet/aspnetcore and it’s determined that the cause of the issue is actually in dotnet/corefx, there is no GitHub mechanism to enable easily moving that issue across the aspnet to dotnet organizational boundary.\r\n- **Permissions.** Each organization’s permissions end up needing to be managed and maintained separately.\r\n\r\nThe issues extend into tooling as well.  For example, we currently have multiple repositories that all logically make up the dotnet CLI, but actually creating a working installer spans multiple repos.\r\n\r\n### Plan\r\n\r\nTo address these issues, we’re planning to make some changes to our repository structure:\r\n- **dotnet/platform.**  We plan to combine dotnet/coreclr, dotnet/corefx, dotnet/corert, dotnet/core-setup, and the relevant portions of mono/mono into a new dotnet/platform repo.  Everything needed to build and produce the Microsoft.NETCore.App shared framework will be in this repo.  We will no longer suffer from the complications of source mirroring.  Features like changing runtime behavior or adding an API will no longer require a complicated dance across multiple repos.  Etc.\r\n- **dotnet/aspnetcore.**  We plan to move the existing aspnet/aspnetcore repository into the dotnet organization.  Along with that, we aim to combine a variety of the other aspnet repositories into aspnetcore, such as aspnet/blazor.  Whether repos like entityframeworkcore remain separate or combined remains an open question.  A goal is that, just as dotnet/platform will be responsible for the creation of Microsoft.NETCore.App, dotnet/aspnetcore will be responsible for the creation of Microsoft.AspNETCore.App.\r\n- **dotnet/cli.**  We plan to combine dotnet/toolset and dotnet/sdk into the dotnet/cli repo.\r\n\r\n### FAQ\r\n\r\n#### Why are we merging repos?\r\n\r\nWe believe we can significantly improve several aspects of .NET on GitHub by combining repos, benefiting both maintainers and contributors.  These improvements will manifest in a variety of ways, such as in better issue management, much easier models of contribution, and easier and faster ways to build and install the resulting bits.\r\n\r\n####  What will happen to the aspnet org?\r\n\r\nThe aspnet org as a separate entity is legacy and artificial.  In time we hope to absorb it into the dotnet org and sunset the aspnet org.\r\n\r\n#### Will the coreclr and corefx repos go away?\r\n\r\nWith the help of GitHub, we plan to migrate all issues from these repos to the new dotnet/platform repo, and then lock down creation of additional issues, such that the repos will no longer be used for issue management.  We will also inhibit the creation of PRs to the master branch, which will effectively become an archive for read-only review of history.  In this sense, these repos will be archived, and no active development will happen with them.  However, we plan to continue servicing previous .NET Core releases out of these repos, so the various release branches (e.g. release/2.1, release/3.0, etc.) will continue to see (limited) activity.\r\n\r\n#### Will the mono repo go away?\r\n\r\nNo. mono/mono contains the source for the full mono stack and will continue to live on happily.  We will simply be moving the managed source associated with System.Private.CoreLib and copying the relatively small amount of source that makes up the native mono runtime to dotnet/platform.  We may choose to then use some mirroring technology to keep the runtime copy in sync (this will, however, not suffer from the same mirroring issues we currently experience, as we would not be mirroring between two components required to build the same binaries), or we may choose to let them diverge and manually sync only those changes deemed relevant to both implementations.\r\n\r\n#### Will the corert repo go away?\r\n\r\nYes.  We plan to retire/archive the corert repo.  Some of the technology in the corert repo will be migrated to the master branch of dotnet/platform, where it will be productized as part of .NET.  Other portions of the corert repo will be migrated to feature branches of dotnet/platform, where the experimentation can continue.  In this way, we will use feature branches to continue experimenting with the corert technology, while making it easier to share portions with its shipping counterpart and also graduate functionality into master if/when it’s ready.\r\n\r\n#### Does this mean there will be a single repo for all of .NET?\r\n\r\nNo.  We will be reducing the number of repos that contribute to .NET, but currently we do not believe that going all the way down to one is the right answer.\r\n\r\n#### Doesn’t this mean that issue and PR tracking will now be overwhelming?\r\n\r\nIt is already the case that the vast majority of issues in a given repo are not relevant to any individual developer, and with several thousand open issues in each repo and on the order of a hundred open PRs in each, we already need systems (e.g. labels) to successfully manage issues and PRs.  As such, we don’t believe the merging will have a significant impact on this aspect of developer productivity.  If it turns out to have an unexpectedly large negative impact, we will work with the community to find ways to mitigate the problem.  However, there are already a multitude of successful open source projects on GitHub with at least an order of magnitude more issues.\r\n\r\n#### What will happen to existing issues?\r\n\r\nWith the help of GitHub functionality, we plan to migrate all issues from old repos (e.g. dotnet/coreclr, dotnet/corefx) to the new repos (e.g. dotnet/platform).  We may also use this as a forcing function to revisit stale issues and either close those that are no longer relevant or reinvigorate those that are demanding of more immediate attention.\r\n\r\n#### What about git history?\r\n\r\nIn general, we plan to keep history, such that history from each constituent repo will be a part of the new repo.  However, we have made some mistakes in the past (e.g. large binaries, multitudes of automated PRs for flowing bits and source between repos, etc.), and we plan to rewrite history to correct those mistakes wherever possible and impactful.  Some rough calculations suggest this could end up significantly reducing the size of the repos as well as the time it takes to clone, which should not only help developers approaching the project but also CI.  This will end up meaning that SHAs may be different in the new repo than they were in the old repo; as previously mentioned, however, any references to the old SHAs in the old repos will continue to work, as those repos will remain accessible.\r\n\r\n#### Will I still show up in the contributor list due to previous contributions?\r\n\r\nYes.  We plan to merge all such history.\r\n\r\n#### Will this break debugging with SourceLink?\r\n\r\nNo.  The existing repos will continue to be accessible, and commit SHAs there will remain unchanged.\r\n\r\n#### Might plans change?\r\n\r\nSure.  Part of the goal of posting this announcement is to hear from you, hear about additional benefits you're excited about, and hear about additional concerns we may not have considered.  We will include such ideas in our planning and course correct as necessary.\r\n\r\n## Discussion\r\n\r\nTo discuss these plans, please comment on the corresponding issue at https://github.com/dotnet/coreclr/issues/26175.\r\n","Url":"https://github.com/dotnet/announcements/issues/119","RelatedDescription":"Open issue \"Consolidating .NET GitHub repos\" (#119)"},{"Id":"470434872","IsPullRequest":false,"CreatedAt":"2019-07-19T16:54:02","Actor":"richlander","Number":"118","RawContent":null,"Title":".NET Core master branches have switched to \"5.0\"","State":"open","Body":"# .NET Core master branches have switched to \"5.0\"\r\n\r\nVarious .NET Core repos have switched their `master` branches to \"5.0\", and will use 3.x branches for 3.0 and 3.1 projects. This is very similar to how we approached 2.x and 3.0 projects. As context, `master` branches produced 3.0 builds for the entire period of the 2.2 project.\r\n\r\nAt present, this change is only relevant if you contribute to .NET Core repositories. Otherwise, we recommend that you wait for the 5.0 Preview releases before installing this new version.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/core #3059](https://github.com/dotnet/core/issues/3059)\r\n\r\n## Details\r\n\r\nThe following repos have moved their master branches to \"5.0\":\r\n\r\n- [dotnet/coreclr](https://github.com/dotnet/coreclr)\r\n- [dotnet/corefx](https://github.com/dotnet/corefx)\r\n- [dotnet/core-setup](https://github.com/dotnet/core-setup)\r\n\r\nYou can see that [5.0 .NET Core Runtime builds](https://github.com/dotnet/core-setup#daily-builds) are now being built and published at dotnet/core-setup.\r\n\r\nIn large part, we switched `master` to 5.0 to enable to the community to contribute changes. As the .NET Core 3.0 released has progressed, we've had to increase scrutiny on the changes we will accept. Now that we've permanently branched for 3.0, we can accept a much broader set of changes. Please consider that to be an open invitation!\r\n\r\nNotably, [dotnet/core-sdk](https://github.com/dotnet/core-sdk) is not yet producing 5.0 builds. We expect that the dotnet/core-sdk master branch will continue as a 3.0 branch for 2-3 months while we finish up the .NET Core 3.0 project.\r\n\r\nAt present, there is no developer experience for 5.0. We are waiting on the dotnet/core-sdk repo to switch to 5.0. Switching your project file to target `netcoreapp5.0` won't do anything useful. We'll update this issue when a 5.0 SDK comes available.","Url":"https://github.com/dotnet/announcements/issues/118","RelatedDescription":"Open issue \".NET Core master branches have switched to \"5.0\"\" (#118)"},{"Id":"465501070","IsPullRequest":false,"CreatedAt":"2019-07-08T23:25:31","Actor":"terrajobst","Number":"117","RawContent":null,"Title":"System.Text.Json usability study results","State":"open","Body":"We've performed a usability study on the new `System.Text.Json` APIs which will replace JSON.NET as the default JSON experience in .NET Core 3.0:\r\n\r\n* We focused on the primary \"getting started\" scenarios to validate that we picked the right type- and method names.\r\n* We simulated what we believe to be common error cases to validate that our exception messages are understandable and actionable.\r\n* Since we were short on time, we couldn't use the recruiting provided by the UX lab but instead brought in our own developers, which we recruited from the .NET engineering team\r\n\r\nThis has worked out well for us as we were able to get short term feedback which resulted in significant improvements to the overall API shape and usability. In the future, we should do more API focused UX studies 😊\r\n\r\n## Tasks\r\n\r\n| # | Description                            | Code\r\n|:--|:---------------------------------------|:-----\r\n| 1 | Serialize and pretty print             | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario1/Program.cs#L19-L31)\r\n| 2 | Deserialize with trailing comma        | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario2/Program.cs#L19-L25)\r\n| 3 | Deserialize with custom property names | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario3/Program.cs#L30-L45)\r\n| 4 | Read with DOM                          | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario4/Program.cs#L20-L35)\r\n| 5 | Pretty print an existing JSON file     | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario5/Program.cs#L26-L34)\r\n\r\n## Hypotheses\r\n\r\nWe expect developers to...\r\n\r\n| # | Description                                            | Result\r\n|:--|:-------------------------------------------------------|:---------------\r\n| 1 | ...assume the APIs are similar/identical to JSON.NET   |  Validated\r\n| 2 | ...complete tasks 1-4 successfully                     |  Validated\r\n| 3 | ...struggle/unable to complete the task 5, because it requires working with two different components which is very different from JSON.NET |  Invalidated\r\n| 4 | ...not look at documentation for most of their coding as IntelliSense is good enough |  Invalidated\r\n| 5 | ...be happy with the experience of using the API                                     |  Validated\r\n| 6 | ...plan on using `System.Text.Json` for their next JSON task                         |  Partially Validated\r\n\r\n##  Key Observations\r\n\r\n* Everyone completed scenarios #1-#3, 2 didn't complete #4, 6 didn't complete #5\r\n    - The reason was always \"out of time\". Every person who started a scenario successfully finished it.\r\n    - We feel this validates that we picked the right scope for a 60 minute study of people from various backgrounds\r\n* Overall people liked the new API\r\n    - Key value prop for most people was the fact that \"it's now built in\"\r\n    - Very few mentioned perf and the ones that did thought that it probably wouldn't make a difference in their scenarios.\r\n    - Most people said they would prefer `System.Text.Json` for new APIs, but would stick to JSON.NET in code that already uses it.\r\n    - **[Action]** None, this is in line with what we expected.\r\n* Virtually everyone tried to google for sample code in the documentation\r\n    - Everyone found our blog post and online documentation\r\n    - People new to .NET were confused that JSON.NET and `System.Text.Json` weren't the same thing\r\n    - Everyone complained that the current docs are lacking, especially sample code.\r\n    - **[Action]** Docs are work in progress. We plan on shipping with a fully documented API surface and sample code.\r\n* Virtually everyone found the key type relatively quickly\r\n    - Some people were confused when types were static, rather than something that one can new up\r\n    - **[Action]** None. This is by-design as we try to reduce the number of allocations.\r\n* Virtually everyone had trouble selecting the correct method on\r\n  `JsonSerializer`\r\n    - We chose a very complicated naming convention\r\n    - **[Action]** We simplified it by using names that people in the study told us were looking for.\r\n* Most of our error messages were well received because they told people what\r\n  the problem is & how they can fix them.\r\n    - One error message was unclear because we reported an unexpected character when we could have reported that we didn't expect a comment.\r\n    - **[Action]** We've reworded the error message.\r\n    - We had one error message that was generated by a lower layer and provided an action item that doesn't make sense when people receive it when using the higher layer component.\r\n    - **[Action]** We've reworded the error message to be more generic so it makes sense for both kind of consumers.\r\n* Virtually everyone used the new Roslyn completion feature which will also show\r\n  types from namespaces not imported yet.\r\n    - However, virtually nobody realized that they were doing it.\r\n    - This caused confusion when people found other APIs that happen to include Json in them, specifically the old data contract serialization.\r\n    - **[Action]** Talk to the Roslyn IDE team to see if this something more people will run into. This could prove to be especially problematic for technologies that share type names (e.g. `UserControl` in WinForms and WPF) and both are referenced by the project.\r\n* Optional parameters and `async`/`await` are usability cliffs\r\n    - Many were confused by optional parameters and tried to pass them in, even though they didn't have to.\r\n    - **[Action]** Talk to the Roslyn IDE team to see if we can visualize them better in VS.\r\n    - **[Action]** Try to avoid heavy use of optional parameters for mainline APIs.\r\n    - Async is a very steep cliff. People have no idea what to do in their code to make async work. While IntelliSense shows the usage by prefixing it with await, people didn't notice that.\r\n    - **[Action]** Unclear; this is a broader issue.\r\n* Virtually nobody used F1 to get help for APIs\r\n    - *Surprise*. I expected more people to use <kbd>F1</kbd>.\r\n* Virtually everyone used F12 to explore the API (\"metadata view\")\r\n    - *Surprise*. I expected most people to explore the type via the\r\n      IntelliSense completion\r\n* Nobody used Object Browser to explorer the APIs\r\n    - *Surprise*. I expected at least some people to.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/39304.","Url":"https://github.com/dotnet/announcements/issues/117","RelatedDescription":"Open issue \"System.Text.Json usability study results\" (#117)"},{"Id":"465034831","IsPullRequest":false,"CreatedAt":"2019-07-08T03:13:38","Actor":"leecow","Number":"116","RawContent":null,"Title":"Updates to releases.json (.NET Core release metadata)","State":"open","Body":"**The changes described in this issue will be live with the .NET Core July update on 7/9/2019.**\r\n\r\nThe releases.json files (e.g. [2.2 releases.json](https://raw.githubusercontent.com/dotnet/core/master/release-notes/2.2/releases.json)) are comprehensive metadata files which capture details of each .NET Core release. These files, along with the top level [releases-index.json](https://raw.githubusercontent.com/dotnet/core/master/release-notes/releases-index.json), are becoming increasingly important .NET Core release assets. These files, one for each major.minor channel, are relied upon by many to detect when updates for .NET Core are available, discover security update details and other uses.\r\n\r\nChanges are sometimes necessary, and the growing dependencies require that we treat compatibility of the schema with the utmost care. This announcement describes an addition to the releases.json schema.\r\n\r\n## SDK Versions and Visual Studio\r\n\r\nBecause of current .NET Core SDK product construction dependencies, there is a hard link between the Runtime, SDK, toolset (compilers, MSBuild, NuGet, and other components), and Visual Studio. Simplistically, this means that when anything updates, everything updates. The unfortunate result of this linking is that multiple versions of the SDK are released with each monthly update for each supported versions of Visual Studio. For example, the May Update for .NET Core 2.2 included the 2.2.5 runtime, 2.2.107 SDK for Visual Studio 2017 and 2.2.204 for Visual Studio 2019 and yet another pair of SDK versions for .NET Core 2.1. An example of this is the [2.2.5 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.5/2.2.5.md). \r\n\r\nThis is a confusing situation and we are working to mitigate the need to release multiple SDKs with .NET Core 3.0. The need for multiple SDK versions will persist for 2.1 LTS.\r\n\r\n## Adding the SDKS array\r\n\r\nTo appropriately model multiple SDKs per release, we are adding an SDKs array to releases.json, which will contain SDK objects. The top-level SDK object will represent the highest versioned SDK for a given update. Using the previous 2.2.5 update example, SDK 2.2.204 is in the top SDK object as well as duplicated in the SDKS array. All other applicable 2.2* SDK objects are included in the SDKS array. The SDK objects within the array will carry specific Visual Studio compatibility and version inclusion information to provide appropriate context.\r\n\r\nHere is an example of the new array based on the upcoming July update.\r\nAgain, this will be additive and the previous SDK object will include the highest SDK version for the release.\r\n\r\n```json\r\n{\r\n    \"sdk\": {\r\n        \"version\": \"2.2.301\",\r\n        \"version-display\": \"2.2.301\",\r\n        \"runtime-version\": \"2.2.6\",\r\n        \"vs-version\": \"16.1.3\",\r\n        \"vs-support\": \"Visual Studio 2019 (v16.1)\",\r\n        \"csharp-version\": \"7.3\",\r\n        \"fsharp-version\": \"4.5\",\r\n        \"vb-version\": null,\r\n        \"files\": []\r\n    },\r\n    \"sdks\": [\r\n        {\r\n            \"version\": \"2.2.301\",\r\n            \"version-display\": \"2.2.301\",\r\n            \"runtime-version\": \"2.2.6\",\r\n            \"vs-version\": \"16.1.3\",\r\n            \"vs-support\": \"Visual Studio 2019 (v16.1)\",\r\n            \"csharp-version\": \"7.3\",\r\n            \"fsharp-version\": \"4.5\",\r\n            \"vb-version\": null,\r\n            \"files\": []\r\n        },\r\n        {\r\n          \"version\": \"2.2.205\",\r\n          \"version-display\": \"2.2.205\",\r\n          \"runtime-version\": \"2.2.6\",\r\n          \"vs-version\": \"16.0.5\",\r\n          \"vs-support\": \"Visual Studio 2019 (v16.0)\",\r\n          \"csharp-version\": \"7.3\",\r\n          \"fsharp-version\": \"4.5\",\r\n          \"vb-version\": null,\r\n          \"files\": []\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\n## vs-version and the Runtime\r\n\r\nThe same version of the runtime is included in multiple versions of Visual Studio. To account for this, the vs-version field is being updated to a comma-delimited string. The string will represent all versions of Visual Studio which first include the particular .NET Core update. Again, an example from the upcoming July Update.\r\n\r\n```json\r\n\"runtime\": {\r\n        \"version\": \"2.2.6\",\r\n        \"version-display\": \"2.2.6\",\r\n        \"vs-version\": \"15.9.13, 16.1.3, 16.2.0\",\r\n```\r\n\r\nThe same `vs-versions` changes will be seen in the `aspnetcore-runtime` object.\r\n\r\n## Future Enhancements\r\n\r\nThere are other improvements to the schema which have been suggested by the community which we are evaluating. Generally, theses enhancements are additive and should not represent compatibility compromises for existing parsers and similar announcements will be published ahead of any changes.\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/116","RelatedDescription":"Open issue \"Updates to releases.json (.NET Core release metadata)\" (#116)"},{"Id":"444065225","IsPullRequest":false,"CreatedAt":"2019-05-14T18:38:23","Actor":"TaraOverfield","Number":"114","RawContent":null,"Title":"May 2019 .NET Updates","State":"open","Body":"# May 2019 .NET Updates\r\n\r\nThe following .NET updates were released in May 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.16 and .NET Core SDK 1.1.13( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.16/1.0.16.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.13/1.1.13.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.11 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.11/2.1.11.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.5 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.5/2.2.5.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2727](https://github.com/dotnet/core/issues/2727)\r\n\r\n## .NET Framework\r\n* [.NET Framework May 2019 Security and Quality Rollup - May 14, 2019](https://devblogs.microsoft.com/dotnet/net-framework-may-2019-security-and-quality-rollup/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/114","RelatedDescription":"Open issue \"May 2019 .NET Updates\" (#114)"},{"Id":"444027703","IsPullRequest":false,"CreatedAt":"2019-05-14T17:06:24","Actor":"blowdart","Number":"113","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and ASP.NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core and ASP.NET Core improperly handle web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core and ASP.NET Core application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core and ASP.NET Core web applications handle web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37651\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Private.Uri package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0, 4.3.1 | 4.3.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Nemanja Mijailovic](https://mijailovic.net/)\r\n\r\n### External Links\r\n\r\n[CVE-2019-0981](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0981)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/113","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability\" (#113)"},{"Id":"444027025","IsPullRequest":false,"CreatedAt":"2019-05-14T17:04:45","Actor":"blowdart","Number":"112","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and ASP.NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core and ASP.NET Core improperly handle web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core and ASP.NET Core application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core and ASP.NET Core web applications handle web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37650\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Private.Uri package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0, 4.3.1 | 4.3.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Nemanja Mijailovic](https://mijailovic.net/)\r\n\r\n### External Links\r\n\r\n[CVE-2019-0980](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0980)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/112","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability\" (#112)"},{"Id":"444026277","IsPullRequest":false,"CreatedAt":"2019-05-14T17:02:57","Actor":"blowdart","Number":"111","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core improperly process RegEx strings. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET application.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handle RegEx string processing.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37649\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Text.RegularExpressions package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Text.RegularExpressions.dll | 4.3.0 | 4.3.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0820](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0820)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/111","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability\" (#111)"},{"Id":"435015242","IsPullRequest":false,"CreatedAt":"2019-04-19T01:16:10","Actor":"MichaelSimons","Number":"110","RawContent":null,"Title":"New images for .NET Framework 4.8","State":"open","Body":"# New images for .NET Framework 4.8\r\n\r\nNew images have been released with support for [.NET Framework 4.8 runtime and SDK](https://devblogs.microsoft.com/dotnet/announcing-the-net-framework-4-8/).\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#271](https://github.com/Microsoft/dotnet-framework-docker/issues/271)\r\n\r\n## Details\r\n* Pull request: #270\r\n\r\nYou can access these new images with the following tags:\r\n* `mcr.microsoft.com/dotnet/framework/runtime:4.8`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.8`\r\n\r\nIn addition, the `latest` tag has been updated to refer to these new 4.8 images.\r\n\r\nCheck out the readme files for more information on the latest tags:\r\n* [Runtime](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.runtime.md)\r\n* [SDK](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.sdk.md)\r\n\r\nThe [3.5 SDK](https://github.com/Microsoft/dotnet-framework-docker/tree/master/3.5/sdk) images are intended to always contain the latest .NET Framework SDK and have also been updated to use the 4.8 SDK.","Url":"https://github.com/dotnet/announcements/issues/110","RelatedDescription":"Open issue \"New images for .NET Framework 4.8\" (#110)"},{"Id":"433297298","IsPullRequest":false,"CreatedAt":"2019-04-15T13:57:07","Actor":"MichaelSimons","Number":"109","RawContent":null,"Title":".NET Framework SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Framework SDK container images now contain the Visual Studio 2019 toolset\r\n.NET Framework SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add additional tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Framework SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Framework SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#269](https://github.com/Microsoft/dotnet-framework-docker/issues/269)\r\n\r\n## Details\r\nVisual Studio 2019 was released on April 2, 2019. We updated the .NET Framework SDK container images, on the same day, to include a new version of the .NET Framework SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag (e.g. mcr.microsoft.com/dotnet/framework/sdk:4.7.2-20190312-windowsservercore-ltsc2019).\r\n\r\nRelated pull request: [#252](https://github.com/Microsoft/dotnet-framework-docker/pull/252)","Url":"https://github.com/dotnet/announcements/issues/109","RelatedDescription":"Open issue \".NET Framework SDK container images now contain the Visual Studio 2019 toolset\" (#109)"},{"Id":"432735158","IsPullRequest":false,"CreatedAt":"2019-04-12T20:35:55","Actor":"KathleenDollard","Number":"108","RawContent":null,"Title":".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017","State":"open","Body":"# .NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\r\n\r\n.NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017. For example, 2.2.203 and 2.1.603 cause failures in Visual Studio 2017. To work on projects in Visual Studio 2017, use .NET Core SDK 2.2.1nn and 2.1.5nn, such as 2.2.106 and 2.1.506. You can install any combination of these SDKs side by side.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3124](https://github.com/dotnet/sdk/issues/3124)\r\n\r\n## Details\r\n\r\nYou can find the SDKs on you machine using the following at a command prompt:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2. Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nIf you downloaded the .NET Core SDK 2.2 between April 2 and April 12, 2019, the main [.NET downloads page](https://dotnet.microsoft.com/download/) included only 2.2.2nn. Starting April 12th, a new button marked \"Compatible with Visual Studio 2017\" is provided to target 2.2.1nn. If you downloaded 2.2 prior to this date, and you use Visual Studio 2017, install the compatible version.\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nThis problem most often occurs because you manually uninstall the 2.1.5nn version. Simply reinstall it from the [.NET Core 2.1 downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n## More information\r\n\r\nHere is the draft of an article we are preparing for .NET Core documentation:\r\n\r\n---\r\n\r\n## Solving Problems with .NET Core SDK Selection in Visual Studio\r\n\r\nYou may have .NET Core SDKs on your machine and still have problems with Visual Studio finding an appropriate one. This article explains why this happens and how you can fix your installation.\r\n\r\nWhen Visual Studio can't find an appropriate version of the .NET Core SDK, you'll receive an error message. This may appear in the Error pane as NETSDK1045:\r\n\r\n\"The current .NET SDK does not support targeting .NET Core 2...\"\r\n\r\nYou can check what .NET Core SDKs you have on your machine with the following command:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\nUnless you have a global.json file, when you use `dotnet` from the command line, the latest .NET Core SDK is used.\r\n\r\n> [TIP!] \r\n> Open a command prompt and try to build with `dotnet build`. If the command line build works, but Visual Studio doesn't suggestions in this article may help.\r\n\r\nThe last two digits of the .NET Core SDK version numbers are in the format are a patch number, which is represented by `nn` in this article because we will continue to service them to include the latest runtimes. To find out more, vist the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\n## Fixes for Common Problems\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2… Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.2.1nn. As an example, 2.2.106 would be a valid entry.\r\n\r\nIf you downloaded the .NET Core SDK 2.2 after April 2, 2019, version 2.2.2nn (such as 2.2.203) is listed first and is the highest version available. However, Visual Studio 2017 requires 2.2.1nn (such as 2.2.106). .NET Core SDK 2.2.2nn works with Visual Studio 2019. Visual Studio 2017 and Visual Studio 2019 can be installed side by side, but this requires both .NET Core SDK 2.2.1nn and .NET Core SDK 2.2.2nn to develop .NET Core 2.2 applications.\r\n\r\nTo download .NET Core SDK 2.2.2nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.1.5nn. As an example, 2.1.505 would be a valid entry. \r\n\r\nThis problem occurs of you manually uninstall the 2.1.5nn version.\r\n\r\nThe Visual Studio 2019 installation will not remove this file and Visual Studio 2017 will continue to work side by side.\r\n\r\nTo reinstall .NET Core SDK 2.1.5nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n### Visual Studio 2019 can't target .NET Core 3.0 Preview\r\n\r\nIf you receive this error message in Visual Studio 2019:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 3.0.100-preview... As an example, SDK 3.0.100-preview3-010431 would be a valid entry.\r\n\r\nTo install .NET Core SDK 3.0.1nn preview, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/3.0).\r\n\r\nIn Visual Studio, go to `Tools\\Options\\Projects and Solutions\\.NET Core` and check the box `Use Previews of the .NET Core SDK`.\r\n\r\n> [NOTE!]\r\n> This option will be moving to `Tools\\Options\\Environment` and renamed `Preview Features` in Visual Studio 2019 version 16.1 Preview 2.\r\n\r\nIf you are targeting .NET Core 3.0 preview, the [C# language version will be C# 8.0 Preview by default](https://docs.microsoft.com/en-us/visualstudio/releases/2019/release-notes#csharp-defaults) allowing you to use new C# features.\r\n\r\n## Understand the relationship between .NET Core SDKs and Visual Studio build tools\r\n\r\nVisual Studio has its own copies of tools like MSBuild, NuGet and the compilers. If you install the .NET Core workload, it also installs the .NET Core SDK which has versions of these tools and provides tasks and targets. These two versions are built from the same repositories, but target .NET Framework and .NET Core respectively. \r\n\r\nWhen you build a .NET Core project in Visual Studio, it uses Visual Studio's copy of MSBuild, but the tasks and targets are supplied from the selected version of the .NET Core SDK. \r\n\r\nWhen you upgrade the .NET Core SDK, you get new tasks and targets. These new tasks and targets may contain features that are not supported by older versions of MSBuild. Like all of the .NET Core SDK, MSBuild is backwards compatible. It is not forwards compatible.\r\n\r\nThis generally works well, but requires a guarantee that the tasks and targets work with the MSBuild version. To ensure this, each .NET Core SDK indicates an MSBuild version range that is used by Visual Studio to determine compatibility. Versions of the .NET Core SDK that have a higher MSBuild identifier than expected are ignored by Visual Studio. In the normal case, this simply means you use the tasks and targets that were installed with your version of Visual Studio.\r\n\r\nBecause of this, you may have many versions of the .NET Core SDK on your machine and Visual Studio still fail to find one it considers appropriate. This is compounded by a poor error message, which we cannot fully correct because it is from the old version of the .NET Core SDK on your machine. Confusion is also compounded by a complex non-linear release matrix that makes it difficult to predict the right .NET Core SDK to select. We are working to improve all this. \r\n\r\n## The Visual Studio / .NET Core SDK support matrix\r\n\r\nThe last two digits of the .NET Core SDK version number are a patch number, which are represented by a `nn` in this table. You can learn more about .NET Core SDK and .NET Core Runtime versioning at the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\nThe following table shows which Visual Studio versions and .NET Core SDKs are compatible and how they are acquired if you are working with Visual Studio. \r\n\r\n| .NET Core SDK | .NET Core Runtime | Compatible Visual Studio | MSBuild | Notes                                     |\r\n|---------------|-------------------|--------------------------|---------|-------------------------------------------|\r\n| 2.1.5nn       | 2.1               | 2017                     | 15      | Installed as part of VS 2017 version 15.9 |\r\n| 2.1.6nn       | 2.1               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 2.2.1nn       | 2.2               | 2017                     | 15      | Installed manually                        |\r\n| 2.2.2nn       | 2.2               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 3.0.1nn       | 3.0 (Preview)     | 2019                     | 16      | Installed manually                        |\r\n\r\nVisual Studio 2017 cannot work with .NET Core SDK 2.1.6nn or 2.2.2nn.\r\n\r\nTo find out more about removing older versions of the .NET Core Runtime and .NET Core SDK, visit the [How to remove the .NET Core Runtime and SDK page](https://docs.microsoft.com/en-us/dotnet/core/versions/remove-runtime-sdk-versions?tabs=macos).\r\n\r\nTo download the .NET Core SDK, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core).","Url":"https://github.com/dotnet/announcements/issues/108","RelatedDescription":"Open issue \".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\" (#108)"},{"Id":"432081093","IsPullRequest":false,"CreatedAt":"2019-04-11T15:16:43","Actor":"KathleenDollard","Number":"107","RawContent":null,"Title":"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below","State":"open","Body":"# Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\r\n\r\n.NET Core 3 takes the next step in the .NET Core tool strategy with local tools. As part of this process, starting in Preview 4 DotNetCliToolReference tools will be restricted to targeting .NET Core 2.2 and below. DotNetCliToolReference tools can be used in projects targeting .NET Core 3.0, but the tools themselves should target .NET Core 2.2 or below.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3115](https://github.com/dotnet/sdk/issues/3115)\r\n\r\n## Details\r\n\r\nThe suggested approach going forward is to to use [.NET Core Local Tools](https://aka.ms/local-tools) when you want a tool that is specific to a project or repository. At the same time we are removing the need to access local tools by the verbose `dotnet tool run <toolname>` that was present in earlier previews. You can now access local tools via `dotnet <toolname>`.\r\n\r\nDotNetCliToolReference tools have a flaw in how their dependencies are restored which can create [difficult to diagnose bugs when running these tools](https://github.com/NuGet/Home/issues/5067). This issue would occur much more frequently if targeting .NET Core 3.0 was allowed. Restricting tools to target only .NET Core 2.2 and below means existing scenarios to continue to work (as well as they previously did), regardless of the framework version targeted by the project or the current .NET Core SDK. \r\n\r\nThe new .NET Core tool strategy avoids this flaw in restore strategy and offers other benefits, like the ability to author one type of tool and install it in different ways depending on project and user needs.\r\n\r\nWe look forward to your feedback on .NET Core Local Tools, and on challenges you face moving away from DotNetCliToolReference tools. \r\n\r\n[dotnet/sdk #3057](https://github.com/dotnet/sdk/pull/3057)","Url":"https://github.com/dotnet/announcements/issues/107","RelatedDescription":"Open issue \"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\" (#107)"},{"Id":"431012407","IsPullRequest":false,"CreatedAt":"2019-04-09T14:51:18","Actor":"MichaelSimons","Number":"106","RawContent":null,"Title":".NET Core SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Core SDK container images now contain the Visual Studio 2019 toolset\r\n\r\n.NET Core SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add *additional* tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Core SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Core SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1042](https://github.com/dotnet/dotnet-docker/issues/1042)\r\n\r\n## Details\r\n\r\n[Visual Studio 2019](https://devblogs.microsoft.com/visualstudio/visual-studio-2019-code-faster-work-smarter-create-the-future/) was released on April 2, 2019. We updated the .NET Core SDK container images, on the same day, to include a new version of the .NET Core SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag:\r\n\r\n* 2.1: `mcr.microsoft.com/dotnet/core/sdk:2.1.505`\r\n* 2.2: `mcr.microsoft.com/dotnet/core/sdk:2.2.105`\r\n\r\nDetails:\r\n\r\n* [dotnet/dotnet-docker #1029](https://github.com/dotnet/dotnet-docker/pull/1029)\r\n* [2.1 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.602-SDK/2.1.602-SDK.md)\r\n* [2.2 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.202-SDK/2.2.202-SDK.md)\r\n\r\n## Known Breaking Changes for SDK images (VS 2017 to VS 2019 upgrade)\r\n\r\nThe following issues and breaks have been discovered.\r\n \r\n### Test Log File Name Change\r\n\r\nA change was introduced to the `dotnet test` command when a user-defined log file name is specified.  In the previous version the resulting log file would be named exactly as specified.  In the current version, the log file is named with a timestamp suffix automatically added to the user-defined name.  \r\n\r\nDetails:\r\n* [Microsoft/vstest #1603](https://github.com/Microsoft/vstest/issues/1603) \r\n* [Microsoft/vstest#1876](https://github.com/Microsoft/vstest/issues/1876)","Url":"https://github.com/dotnet/announcements/issues/106","RelatedDescription":"Open issue \".NET Core SDK container images now contain the Visual Studio 2019 toolset\" (#106)"},{"Id":"431003701","IsPullRequest":false,"CreatedAt":"2019-04-09T14:35:39","Actor":"MichaelSimons","Number":"105","RawContent":null,"Title":"Windows Server, version 1709 no longer Supported by .NET Framework","State":"open","Body":"# Windows Server, version 1709 no longer Supported by .NET Framework\r\n\r\nWindows Server, version 1709 is no longer supported. As a result, this version of Windows is no longer supported by the .NET Team and we will no longer produce .NET Framework container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Framework Docker images](https://hub.docker.com/_/microsoft-dotnet-framework)\r\n* [.NET Framework Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-framework)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-framework-docker #259](https://github.com/Microsoft/dotnet-framework-docker/issues/259)\r\n\r\n## Details\r\n\r\nDocker tags that contain `windowsservercore-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Windows Server and .NET Framework.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `4.7.1`, and  `4.7.2`. These are tags that are supported on multiple operating systems and versions, and do  not contain the operating system in them. As a result of no longer producing new images for Windows Server, version 1709, manifest tags no longer include entries for Windows 10, version 1709, and Windows Server,version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.17134-based image is incompatible with a 10.0.16299 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Windows Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Windows Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/framework/runtime:4.7.2-windowsservercore-1709` or `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-windowsservercore-1709`.","Url":"https://github.com/dotnet/announcements/issues/105","RelatedDescription":"Open issue \"Windows Server, version 1709 no longer Supported by .NET Framework\" (#105)"},{"Id":"430998341","IsPullRequest":false,"CreatedAt":"2019-04-09T14:25:57","Actor":"MichaelSimons","Number":"104","RawContent":null,"Title":"Nano Server 2016 and 1709 no longer Supported by .NET Core","State":"open","Body":"# Nano Server 2016 and 1709 no longer Supported by .NET Core\r\n\r\nNano Server 2016 and Nano Server, version 1709 are no longer supported. As a result, these versions of Windows are no longer supported by the .NET Team and we will no longer produce .NET Core container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Core Docker images](https://hub.docker.com/_/microsoft-dotnet-core)\r\n* [.NET Core Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-core)\r\n* [Products Reaching End of Support for 2018](https://support.microsoft.com/en-us/help/4043450/products-reaching-end-of-support-for-2018)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\nWe previously announced Nano Server 2016 going out of support in [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/). That post is still accurate.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1041](https://github.com/dotnet/dotnet-docker/issues/1041)\r\n\r\n## Details\r\n\r\nDocker tags that contain `nanoserver-sac2016` and `nanoserver-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Nano Server and .NET Core.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `2.1`, `2.1-sdk`, `2.2.1-runtime`. These are tags that are supported on multiple operating systems, and do not contain the operating system in them. As a result of no longer producing new images for Nano Server 2016 and Nano Server, version 1709, manifest tags no longer include entries for Nano Server 2016, Windows Server 2016, Windows 10, version 1607, Windows 10, version 1709, and Windows Server, version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.16299-based image is incompatible with a 10.0.14393 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Nano Server 2016 or Nano Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Nano Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-sac2016` or `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-1709`.\r\n\r\n### Nano Server Support\r\n\r\n.NET Core is supported on Nano Server, version 1803 and later. \r\n\r\n.NET Core 2.x and 3.0 images are available for all supported versions of Nano Server, version 1803 and later. This means that 2.x and 3.0 manifest tags can be used on Windows 10, version 1803+, and Windows Server, version 1803+. You can also use non-manifest tags for those versions, too, such as `2.2-nanoserver-1809`.\r\n\r\n.NET Core 1.x images are available for Nano Server, version 1809 and later. This means that 1.x manifest tags can be used on Windows 10, version 1809+, Windows Server, version 1809+ and Windows Server 2019. You can also use non-manifest tags for those versions, too, such as `1.1-nanoserver-1809` tag.","Url":"https://github.com/dotnet/announcements/issues/104","RelatedDescription":"Open issue \"Nano Server 2016 and 1709 no longer Supported by .NET Core\" (#104)"},{"Id":"420117627","IsPullRequest":false,"CreatedAt":"2019-03-12T17:35:16","Actor":"vivmishra","Number":"103","RawContent":null,"Title":"March 2019 .NET Updates","State":"open","Body":"# March 2019 .NET Updates\r\n\r\nThe following .NET updates were released in March 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework March 2019 Update - March 19, 2019](https://devblogs.microsoft.com/dotnet/net-framework-march-2019-update/)\r\n* [.NET Framework April 2, 2019 Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - April 2, 2019](https://devblogs.microsoft.com/dotnet/net-framework-april-2-2019-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.15 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.15/1.0.15.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.12/1.1.12.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.9 and .NET Core SDK 2.1.505 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.9/2.1.9.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.3 and .NET Core SDK 2.2.105 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.3/2.2.3.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2432](https://github.com/dotnet/core/issues/2432)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/103","RelatedDescription":"Open issue \"March 2019 .NET Updates\" (#103)"},{"Id":"415363751","IsPullRequest":false,"CreatedAt":"2019-02-27T22:49:51","Actor":"leecow","Number":"102","RawContent":null,"Title":"SDK Installers will remove previous patch versions","State":"open","Body":"The SDK Installers for Windows will upgrade patch versions in place within the same feature band. This will reduce the number of SDKs that are installed on programmer machines.\r\n\r\nFeature bands of the SDK are defined like 3.0.1nn. [Find out more about SDK version numbers](https://docs.microsoft.com/dotnet/core/versions/#versioning-details).\r\n\r\nThis means when .NET Core SDK 3.0.101 becomes available and is installed, .NET Core SDK 3.0.100 will be removed from the machine if it exists. When .NET Core SDK 3.0.200 becomes available and is installed on the same machine, .NET Core SDK versions like 3.0.101 will not be removed but stay side by side with 3.0.200.\r\n\r\nThis approach supports use of `global.json` which will roll forward across patch versions, but not feature bands of the SDK. Thus, upgrading via the SDK installer will not result in errors due to a missing SDK. Feature bands also align with side by side Visual Studio installations for those users that install SDKs for Visual Studio use. For example, Visual Studio 15.9 uses .NET Core SDK 2.2.500 but does not support .NET Core SDK 2.2.600.\r\n\r\nFind out how to [remove other .NET Core SDK versions here.](https://docs.microsoft.com/dotnet/core/versions/remove-runtime-sdk-versions).","Url":"https://github.com/dotnet/announcements/issues/102","RelatedDescription":"Open issue \"SDK Installers will remove previous patch versions\" (#102)"},{"Id":"410971363","IsPullRequest":false,"CreatedAt":"2019-02-15T22:24:40","Actor":"richlander","Number":"101","RawContent":null,"Title":"Publishing .NET Core images to Microsoft Container Registry (MCR)","State":"open","Body":"# Publishing .NET Core images to Microsoft Container Registry (MCR)\r\n\r\nMicrosoft teams are now publishing container images to the [Microsoft Container Registry](https://azure.microsoft.com/en-us/blog/microsoft-syndicates-container-catalog/). There are two primary reasons for this change:\r\n\r\n* Syndicate Microsoft-provided container images to multiple registries, like Docker Hub and Red Hat.\r\n* Use Microsoft Azure as a global CDN for delivering Microsoft-provided container images.\r\n\r\nYou will use and see MCR as a storage back-end for Microsoft images. The primary way you learn about Microsoft container images and tags will be through a registry, which for most users will continue to be Docker Hub. Most of the experience you've had browsing for .NET Core container images will continue unchanged with this new model. The Docker Hub URLs you've used for Microsoft repos will continue to work, and forward to updated locations on Docker Hub. Existing Docker Hub will images will be maintained as-is.\r\n\r\nSee [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/) for the most updated information on our use of MCR.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #935](https://github.com/dotnet/dotnet-docker/issues/935)\r\n\r\n## Starting with .NET Core nightly repo\r\n\r\nOn the .NET team, we started our [transition to MCR](https://github.com/dotnet/dotnet-docker/issues/745) with the .NET Core \"nightly\" repo. [dotnet-nightly](dockerhub.com/r/microsoft/dotnet-nightly) is now hosted on MCR and syndicated to Docker Hub. We started with the nightly repo in order to discover and fix any challenges we found with this new model before we move our higher-traffic primary container repository.\r\n\r\nWe will start publishing [dotnet](dockerhub.com/r/microsoft/dotnet) to MCR a bit later, in either February or March. This issue will be updated when that happens.\r\n\r\n## Repo Split\r\n\r\nThe [.NET Core repo](https://hub.docker.com/r/microsoft/dotnet) currently includes 4 major categories of tags: \r\n\r\n* `sdk`\r\n* `aspnetcore-runtime`\r\n* `runtime` \r\n* `runtime-deps`\r\n\r\nProviding all of the tags in one place has helped with discoverability but made for a repo with an enormous README that can be challenging to navigate and consume. It is large enough that we exceeded Docker Hub README limits and had to artificially make it smaller.\r\n\r\nGoing forward, we will provide a repo for each of the tag categories listed above. We'll also provide a \"product repo\" that will hierarchicaly group all of our repos together. This will satisfy discoverability needs so that it will be easy to find the tags you want.\r\n\r\nYou can already see this experience with [microsoft-dotnet-core-nightly](https://hub.docker.com/_/microsoft-dotnet-core-nightly). There are now multiple repos for our nightly builds:\r\n\r\n* [.NET Core Nightly product repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly)\r\n* [.NET Core SDK Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-sdk/)\r\n* [.NET Core ASP.NET Core Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-aspnet/)\r\n* [.NET Core Runtime Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime/)\r\n* [.NET Core Runtime-deps Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime-deps/)\r\n\r\nThe same split will exist for the non-nightly stable repo (currently hosted at  [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet)) when we start publishing it to MCR and syndicating it back to DockerHub.\r\n\r\n## Changes to registry URL\r\n\r\nThe biggest change is that your Dockerfiles need to be updated to point to the MCR registry in order get access to new .NET Core container tags. The same change is required for scripts or human operations that pull images via `docker pull`.\r\n\r\nThe following example shows the registry path, repo and tag for the .NET Core 2.2 \"Nightly\" SDK on MCR:\r\n\r\n```console\r\nmcr.microsoft.com/dotnet/core-nightly/sdk:2.2\r\n```\r\n\r\nAs comparison, the following repo and tag have been used to date for the .NET Core 2.2 \"Nightly\" SDK on Docker Hub:\r\n\r\n```console\r\nmicrosoft/dotnet-nightly:2.2-sdk\r\n```\r\n\r\nThe new repo URL is provided at each of the news repos. For example, the new .NET Core SDK \"nightly\" repo provides a box on the right where you can copy and paste the correct MCR-based repo syntax that you can use for `docker pull` or in `FROM` statements in your Dockerfiles.\r\n\r\n![image](https://user-images.githubusercontent.com/2608468/52811702-95c5eb80-304a-11e9-8de8-e6ea1f4b4d75.png)\r\n\r\n## Servicing existing Docker Hub tags\r\n\r\nWe will continue to service existing non-version-specific or floating tags on Docker Hub while the associated .NET Core version is supported. For example the `microsoft/dotnet:2.1-sdk` tag is a floating tag that will continue to be serviced for the lifetime of .NET Core 2.1. You can continue using floating tags without issue.\r\n\r\nIf you use non-floating tags, like `microsoft/dotnet:2.1.504-sdk-alpine`, then you will need to update your Dockerfile to use a new non-floating tag. No new non-floating tags will be published to `microsoft/dotnet` and `microsoft/dotnet-nightly` after we fully transition to MCR.\r\n\r\n.NET Core 3.0 Preview 3 and later will only be made available on MCR.\r\n\r\n## Microsoft is a Verified Publisher\r\n\r\nUntil now, Microsoft-provided container images were considered \"community images\". As part of this change, we are re-classifying Microsoft as a \"verified publisher\" on Docker Hub. This designation should make it clearer that .NET and other Microsoft-provided images are coming from a verified source. There clearly was that expectation previously, but Docker is now making that clearer in the Docker Hub pages they host for Microsoft.\r\n\r\nWe will provide official vulnerability scanning Microsoft-provided images as a second phase of this transition.","Url":"https://github.com/dotnet/announcements/issues/101","RelatedDescription":"Open issue \"Publishing .NET Core images to Microsoft Container Registry (MCR)\" (#101)"},{"Id":"410784442","IsPullRequest":false,"CreatedAt":"2019-02-15T14:06:29","Actor":"TaraOverfield","Number":"100","RawContent":null,"Title":"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809","State":"open","Body":"<strong><em>Final Update 2/19/19 @1:30 PM (PST)</em></strong><em>: This </em><em>advisory is now resolved with no action needed from Microsoft Customers. The issue was not applicable to any valid or supported configuration. There is no consequence for .NET 4.8 Preview customers. </em>\r\n\r\n<em>We strive to share timely information to protect our customer’s productivity, in this case, our finding was thankfully of no consequence for customers on supported configurations.</em>\r\n\r\n<del><em><strong>Update 2/15/19 @3:35 PM (PST)</strong></em><em>: As we continue our investigation, we are finding the issue to be restricted to a limited and isolated set of test-only systems that are using non-official versions of the .NET 4.8 Preview. As of 2/15/19 around 12:00 pm (PST) we further tightened our delivery mechanisms to ensure that the February .NET security updates are only deployed to their expected target systems.</em></del>\r\n\r\n<del><span>The </span><a href=\"https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/\" rel=\"nofollow\">February 2019 Security and Quality Rollup for Windows 10 update 1809</a><span> was released earlier this week. We have received multiple customer reports of issues when a customer has installed .NET Framework 4.8 Preview then installed the February security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>.</span> These reports are specific to only to the scenario when a customer has installed both .NET Framework 4.8 Preview and the February security update.</del>\r\n\r\n<del>We are actively working on investigating and addressing this issue. If you installed the February 2019 security update and have not seen any negative behavior, we recommend that you leave your system as-is but closely monitor it and ensure that you apply upcoming .NET Framework updates.</del>\r\n\r\n<del>We will continue to update this <a href=\"https://github.com/dotnet/announcements/issues/100\" rel=\"nofollow\">post</a> as we have new information.</del>\r\n<h2><del>Guidance</del></h2>\r\n<del>We are working on guidance and will update this post and as we have new information.</del>\r\n<h2><del>Workaround</del></h2>\r\n<del>There are no known workarounds at this time.</del>\r\n<h2><del>Symptoms</del></h2>\r\n<del>After installing .NET Framework 4.8 Preview then the February 2019 security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>, Visual Studios will crash with this error message:</del>\r\n<p class=\"xxxxxmsonormal\"><del><b><span style=\"font-size: 10.5pt;font-family: 'Segoe UI',sans-serif;color: black\">\"Exception has been thrown by the target of an invocation.\"</span></b></del></p>","Url":"https://github.com/dotnet/announcements/issues/100","RelatedDescription":"Open issue \"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809\" (#100)"},{"Id":"410455095","IsPullRequest":false,"CreatedAt":"2019-02-14T19:28:25","Actor":"richlander","Number":"99","RawContent":null,"Title":"Supporting new Alpine versions (for containers)","State":"open","Body":"# Supporting new Alpine versions (for containers)\r\n\r\n[Alpine 3.9](https://twitter.com/alpinelinux/status/1090416212822110214) was recently announced. Congratulations, Alpine team! On the .NET team, we are committed to supporting new Alpine versions quickly, and also need to define a policy for older versions. This policy only applies for the container images that we publish.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #933](https://github.com/dotnet/dotnet-docker/issues/933)\r\n\r\n## Policy\r\n\r\nWe intend to establish the following policy for supporting Alpine with .NET Core container images:\r\n\r\n* Support new Alpine versions within 60 days of release (hopefully much less).\r\n* Support n-1 Alpine versions for 3 months after we support a new Alpine version.\r\n\r\nNote: The [.NET Core support policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md) may be broader. This policy is specific to the container images we produce.\r\n\r\n## Plans\r\n\r\nWe're in the process of [fixing issues required to support Alpine 3.9](https://github.com/dotnet/dotnet-docker/issues/921). We expect that these issues will be resolved in February and that we'll be able to provide support for Alpine 3.9 in March.\r\n\r\nWe will produce Alpine 3.9 images for .NET Core 2.1, 2.2 and 3.0. Assuming we publish 3.9 images in March, we'll stop producing and supporting Alpine 3.7 and 3.8 images after June (2019).\r\n\r\n## Using Alpine-based .NET Core images\r\n\r\nWe produce a variety of Alpine-based images. You can either depend on a specific Alpine version, like with `microsoft/dotnet:2.2-sdk-alpine3.8` or opt to use the latest Alpine image we have to offer, like with `microsoft/dotnet:2.2-sdk-alpine`. Either are good choices. It is just a question of whether you want to make a conscious decision to move to later Alpine releases.\r\n\r\n## Support for ARM32?\r\n\r\nWe produce Alpine images for x64 (and ARM64, shortly). The [Alpine 3.9 announcement](https://twitter.com/alpinelinux/status/1090416212822110214) made mention of support for ARM32v7. We would like to enable .NET Core [Alpine-based images on ARM32](https://github.com/gliderlabs/docker-alpine/issues/463#issuecomment-460530395). We are patiently waiting for that to happen. If that's important to you, you should comment on that thread.","Url":"https://github.com/dotnet/announcements/issues/99","RelatedDescription":"Open issue \"Supporting new Alpine versions (for containers)\" (#99)"},{"Id":"409840927","IsPullRequest":false,"CreatedAt":"2019-02-13T14:48:21","Actor":"TaraOverfield","Number":"98","RawContent":null,"Title":"February 2019 .NET Updates","State":"open","Body":"# February 2019 .NET Updates\r\nThe following .NET updates were released in February 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework February 2019 Security and Quality Rollup - February 12, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/)\r\n* [.NET Framework February 2019 Preview of Quality Rollup - February 19, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/19/net-framework-february-2019-preview-of-quality-rollup/)\r\n\r\n## .NET Support Policies\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/98","RelatedDescription":"Open issue \"February 2019 .NET Updates\" (#98)"},{"Id":"409436643","IsPullRequest":false,"CreatedAt":"2019-02-12T18:21:22","Actor":"leecow","Number":"97","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability","State":"open","Body":"## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a domain spoofing vulnerability in .NET Framework and .NET Core which causes the meaning of a URI to change when International Domain Name encoding is applied. An attacker who successfully exploited the vulnerability could redirect a URI.\r\n\r\nThe security update addresses the vulnerability by disallowing certain Unicode characters from the URI.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/35265\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core 1.0 or 1.1 based application that uses the [System.Private.Uri](https://www.nuget.org/packages/System.Private.Uri/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0 | 4.3.1\r\n\r\nAny .NET Core 2.1 or 2.2 based application that uses the [Microsoft.NETCore.App](https://www.nuget.org/packages/Microsoft.NETCore.App) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6, 2.1.7, 2.2.0, 2.2.1 | 2.1.8, 2.2.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Private.Uri` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.2.1, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Private.Uri/4.3.0` is a reference to version 4.3.0 of `System.Private.Uri`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.8 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.2 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Private.Uri` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.Private.Uri` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0657](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0657)\r\n\r\n### Revisions\r\n\r\nV1.0 (February 12, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-02-08_\r\n","Url":"https://github.com/dotnet/announcements/issues/97","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability\" (#97)"},{"Id":"397026248","IsPullRequest":false,"CreatedAt":"2019-01-08T18:17:45","Actor":"leecow","Number":"96","RawContent":null,"Title":"January 2019 .NET Updates","State":"open","Body":"# January 2019 .NET Updates\r\n\r\nThe following .NET updates were released in January 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework January 2019 Preview of Quality Rollup - January 15, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/15/net-framework-january-2019-preview-of-quality-rollup/)\r\n* [.NET Framework January 2019 Security and Quality Rollup - January 8, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/08/net-framework-january-2019-security-and-quality-rollup/)\r\n* [.NET Framework January 22, 2018 Preview of Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - January 22, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/22/net-framework-january-22-2018-preview-of-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.7 and .NET Core SDK 2.1.503 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.7/2.1.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.1 and .NET Core SDK 2.2.102 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.1/2.2.1.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2210](https://github.com/dotnet/core/issues/2210)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/96","RelatedDescription":"Open issue \"January 2019 .NET Updates\" (#96)"},{"Id":"397020176","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:27","Actor":"blowdart","Number":"95","RawContent":null,"Title":" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a tampering vulnerability exists when .NET Core improperly handles specially crafted files. An attacker who successfully exploited this vulnerability could write arbitrary files and directories to certain locations on a vulnerable system. However, an attacker would have limited control over the destination of the files and directories.\r\n\r\nTo exploit the vulnerability, an attacker must send a specially crafted file to a vulnerable system\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core handles these files.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34427\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nIf your application does not extract ZIP compressed files it is unaffected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.IO.Compression.ZipFile](https://www.nuget.org/packages/System.IO.Compression.ZipFile/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.IO.Compression.ZipFile) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n`System.IO.Compression.ZipFile` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\nFinally, you must restart your applications once an updated runtime or SDK is installed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Danny Grander](https://twitter.com/grander) of [Snyk](https://snyk.io/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-8416](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8416)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected pacakge table.\r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/95","RelatedDescription":"Open issue \" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\" (#95)"},{"Id":"397020142","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:23","Actor":"blowdart","Number":"94","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of an information disclosure vulnerability exists in .NET Framework and .NET Core which allows bypassing Cross-origin Resource Sharing (CORS) configurations. An attacker who successfully exploited the vulnerability could retrieve content, that is normally restricted, from a web application.\r\n\r\nThe security update addresses the vulnerability by enforcing CORS configuration to prevent its bypass.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34428\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.2.0 | 2.2.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Net.Http` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `SSystem.Net.Http/4.3.0` is a reference to version 4.3.0 of `System.Net.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Net.Http` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0545](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0545)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected package table. \r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n","Url":"https://github.com/dotnet/announcements/issues/94","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\" (#94)"}],"ResultType":"GitHubIssue"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1178059427242377217","CreatedAt":"2019-09-28T21:30:29+00:00","UserScreenname":"dotnet","Text":"Hi 👋 @timheuer. Welcome back in @dotnet land. 😀 https://t.co/85GRHHLARg","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":37,"FavoriteCount":5,"RawContent":null},{"Id":"1177599991445106695","CreatedAt":"2019-09-27T15:04:51+00:00","UserScreenname":"dotnet","Text":"The #dotNETConf live event may be over, but that just means that all the sessions are now available to watch whenev… https://t.co/iwCcdYUvJ3","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":2790,"FavoriteCount":265,"RawContent":null},{"Id":"1177009895125737478","CreatedAt":"2019-09-26T00:00:01+00:00","UserScreenname":"dotnet","Text":"…and that's a wrap!!! THANK YOU!!! from all of us at #dotNETconf! 👏 👏 👏 \n\nWatch for our on demand sessions - we'll… https://t.co/h1k6wRrSLg","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":106,"FavoriteCount":15,"RawContent":null},{"Id":"1177001086831538184","CreatedAt":"2019-09-25T23:25:01+00:00","UserScreenname":"dotnet","Text":"Be an A11Y. Build Accessible Web Sites for Everyone is streaming live @ #dotNETConf with @rachelappel The last sess… https://t.co/Cqy7FgAB9Z","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":21,"FavoriteCount":3,"RawContent":null},{"Id":"1176993538233516032","CreatedAt":"2019-09-25T22:55:01+00:00","UserScreenname":"dotnet","Text":"Happening now @ #dotNETConf: Mixed Reality with Xamarin and Azure Spatial Anchors with @SweekritiS. Tune in:… https://t.co/VtnLnD72W9","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":14,"FavoriteCount":6,"RawContent":null},{"Id":"1176985986494021632","CreatedAt":"2019-09-25T22:25:01+00:00","UserScreenname":"dotnet","Text":"Happening now @ #dotNETConf: How containerized #SQLServer makes development easier with @michaeljolley. Watch here:… https://t.co/9sHXsLEbvX","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":28,"FavoriteCount":7,"RawContent":null},{"Id":"1176978438521008129","CreatedAt":"2019-09-25T21:55:01+00:00","UserScreenname":"dotnet","Text":"Happening now @ #dotNETConf, @MillerMark gives us the science behind creating great UI. Check it out:… https://t.co/reMT35s4iH","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":15,"FavoriteCount":3,"RawContent":null},{"Id":"1176970887410659330","CreatedAt":"2019-09-25T21:25:01+00:00","UserScreenname":"dotnet","Text":"Happening now @ #dotNETConf: Modeling Relational Data using #CosmosDB with @southpolesteve. Tune in here:… https://t.co/Fhwy6hw0n3","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":5,"FavoriteCount":2,"RawContent":null},{"Id":"1176963337957064704","CreatedAt":"2019-09-25T20:55:01+00:00","UserScreenname":"dotnet","Text":"Flat-tops, feature flags, and finite state machines... Disaster resilience the Waffle House way with @wiredferret i… https://t.co/BmJZBZxRCx","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":7,"FavoriteCount":3,"RawContent":null},{"Id":"1176955788922904576","CreatedAt":"2019-09-25T20:25:01+00:00","UserScreenname":"dotnet","Text":"Happening now @ #dotNETConf, @ardalis gives us a tour of Microsoft's Reference #ASPNET Core App, eShopOnWeb. Check… https://t.co/g5arV1PVGg","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":26,"FavoriteCount":7,"RawContent":null},{"Id":"1176948239322484736","CreatedAt":"2019-09-25T19:55:01+00:00","UserScreenname":"dotnet","Text":"Get a gentle intro to Azure #CosmosDB for @ASPNET and #SQLServer devs. @_s_hari is streaming now at #dotNETConf:… https://t.co/zBrBJoz6cT","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":5,"FavoriteCount":2,"RawContent":null},{"Id":"1176945465516072961","CreatedAt":"2019-09-25T19:44:00+00:00","UserScreenname":"dotnet","Text":"ICYMI Check out this video with Bart De Smet talking about the System.Linq.Async nuget package that adds some commo… https://t.co/ZrFVZMo6NK","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":54,"FavoriteCount":23,"RawContent":null},{"Id":"1176940689617297408","CreatedAt":"2019-09-25T19:25:01+00:00","UserScreenname":"dotnet","Text":"Happening now @ #dotNETConf: Architecting .NET Microservices in a Docker Ecosystem with @rebaihamida. Watch here:… https://t.co/X1TJluYztU","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":34,"FavoriteCount":5,"RawContent":null},{"Id":"1176933139450605568","CreatedAt":"2019-09-25T18:55:01+00:00","UserScreenname":"dotnet","Text":"Let's go beyond the basics... happening now @ #dotNETConf, @mjrousos discusses modernizing .NET applications with .… https://t.co/oossHhkmnJ","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":13,"FavoriteCount":4,"RawContent":null},{"Id":"1176925591091765248","CreatedAt":"2019-09-25T18:25:01+00:00","UserScreenname":"dotnet","Text":"Put the \".NET\" into \"KuberNETes.\" Happening now @ #dotNETConf, @EltonStoneman is streaming live:… https://t.co/arx9iGoVZ5","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":38,"FavoriteCount":6,"RawContent":null}]}},"RunOn":"2019-09-29T05:30:40.4035907Z","RunDurationInMilliseconds":17612}