{"Data":{"Blog":{"FeedItems":[{"Title":"Deprecating packages on nuget.org","PublishedOn":"2019-09-30T18:29:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are excited to announce that nuget.org now supports package deprecation. This has been a long standing ask that will help the ecosystem use supported packages. As a package publisher on nuget.org,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-packages-on-nuget-org/","RawContent":null},{"Title":"New and improved NuGet Search is here!","PublishedOn":"2019-08-23T03:31:26+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"It’s been a long time coming, and today we are excited to announce the new and improved search on NuGet.org leveraging Azure Search. We want to start this post with a huge thanks to you, the NuGet...","Href":"https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/","RawContent":null},{"Title":"Surfacing GitHub Usage for packages on NuGet.org","PublishedOn":"2019-07-17T20:00:23+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"There are several criteria you can use today to evaluate NuGet packages. We received feedback that you would like even more information to help choose the right packages. We&#8217;re excited to...","Href":"https://devblogs.microsoft.com/nuget/surfacing-github-usage-for-packages-on-nuget-org/","RawContent":null},{"Title":"NuGet Spring 2019 Roadmap","PublishedOn":"2019-04-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We published our last NuGet roadmap in June last year. Many of the features announced were major additions to NuGet and we have been hard at work to implement those over the last few months. In this...","Href":"https://devblogs.microsoft.com/nuget/nuget-spring-2019-roadmap/","RawContent":null},{"Title":"Enable repeatable package restores using a lock file","PublishedOn":"2018-12-17T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"With PackageReference, NuGet always tries to produce the same closure of package dependencies if the input package reference list has not changed. However, there are a few scenarios where it may not...","Href":"https://devblogs.microsoft.com/nuget/enable-repeatable-package-restores-using-a-lock-file/","RawContent":null},{"Title":"Lock down your dependencies using configurable trust policies","PublishedOn":"2018-12-05T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For the past several months we have focused on various features to improve package security and trust. Around a year back, we had announced our plans on various signing functionalities that we have...","Href":"https://devblogs.microsoft.com/nuget/lock-down-your-dependencies-using-configurable-trust-policies/","RawContent":null},{"Title":"Improved package debugging experience with the NuGet.org symbol server","PublishedOn":"2018-11-16T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Starting today, you can publish symbol packages to the NuGet.org symbol server. With NuGet.org as a single service provider for libraries and symbols, package authors and consumers will have a...","Href":"https://devblogs.microsoft.com/nuget/improved-package-debugging-experience-with-the-nuget-org-symbol-server/","RawContent":null},{"Title":"Introducing Source Code Link for NuGet packages","PublishedOn":"2018-08-27T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"NuGet.org now supports surfacing source code repository link for NuGet packages. This will enable package authors to surface both the project&#8217;s website and the source repository using the...","Href":"https://devblogs.microsoft.com/nuget/introducing-source-code-link-for-nuget-packages/","RawContent":null},{"Title":"NuGet.org starts repo-signing packages","PublishedOn":"2018-08-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In May, we implemented Stage 1 and enabled support for any NuGet.org user to submit signed packages to NuGet.org. Today, we are announcing Stage 2 of our NuGet package signing journey &#8211; tamper...","Href":"https://devblogs.microsoft.com/nuget/introducing-repository-signatures/","RawContent":null},{"Title":"NuGet Summer 2018 Roadmap","PublishedOn":"2018-07-02T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This blog post provides insights into the NuGet team plans for the upcoming quarter (July &#8211; Sep 2018). In the March 2018 NuGet Spring 2018 Roadmap, we had outlined Package Signing,...","Href":"https://devblogs.microsoft.com/nuget/nuget-summer-2018-roadmap/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"10614928159","Type":"IssuesEvent","CreatedAt":"2019-10-12T00:04:35","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7625","RelatedDescription":"Opened issue \"[GitHub Indexer] Add run duration telemetry\" (#7625) at NuGet/NuGetGallery","RelatedBody":""},{"Id":"10614664595","Type":"PullRequestEvent","CreatedAt":"2019-10-11T22:43:43","Actor":"scottbommarito","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7624","RelatedDescription":"Merged pull request \"Add nuget.org and nugettest.org to the HTTP URL rewrite list\" (#7624) at NuGet/NuGetGallery","RelatedBody":"https://github.com/nuget/engineering/issues/2756\r\nhttps://github.com/nuget/engineering/issues/2757\r\n\r\nWe should rewrite http nuget.org and nugettest.org links into https."},{"Id":"10613840270","Type":"PullRequestEvent","CreatedAt":"2019-10-11T20:05:24","Actor":"scottbommarito","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7624","RelatedDescription":"Opened pull request \"Add nuget.org and nugettest.org to the HTTP URL rewrite list\" (#7624) at NuGet/NuGetGallery","RelatedBody":"https://github.com/nuget/engineering/issues/2756\r\nhttps://github.com/nuget/engineering/issues/2757\r\n\r\nWe should rewrite http://*.nuget.org and http://*.nugettest.org links into https."},{"Id":"10613605849","Type":"IssuesEvent","CreatedAt":"2019-10-11T19:27:02","Actor":"scottbommarito","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7623","RelatedDescription":"Opened issue \"[Deployment] Week of 2019-10-14\" (#7623) at NuGet/NuGetGallery","RelatedBody":"# Stats.RollUpDownloadFacts\r\n\r\nhttps://github.com/NuGet/NuGet.Jobs/commit/dbda2dae19a32cb20f293176d39502ce4794e789\r\n\r\n- [x] DEV\r\n    - [x] Apply schema changes\r\n    - [x] Deploy job\r\n- [ ] INT\r\n    - [ ] Apply schema changes\r\n    - [ ] Deploy job\r\n- [ ] PROD\r\n    - [ ] Apply schema changes\r\n    - [ ] Deploy job"},{"Id":"10612805497","Type":"IssuesEvent","CreatedAt":"2019-10-11T17:25:29","Actor":"babakontheweb","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7601","RelatedDescription":"Closed issue \"Extensibility: How to load a custom storage implementation\" (#7601) at NuGet/NuGetGallery","RelatedBody":"### Is your feature request related to a problem? Please describe.\r\nThere are a number of open issues for users trying to deploy NuGet Gallery on AWS with S3 storage. The hardest part of keeping custom implementations up to date with primary repo is that we would need to add to enum StorageType (in this case, adding AwsS3 as a value).\r\n\r\n### Describe the solution you'd like\r\nMy proposal is to replace the enum with a static class of constants by the same name. This would allow others to define their own constant values for different storage types while keeping the primary code base intact.\r\n\r\n### Additional context\r\nAdd any other context or screenshots about the feature request here."},{"Id":"10612679467","Type":"IssuesEvent","CreatedAt":"2019-10-11T17:05:39","Actor":"scottbommarito","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7575","RelatedDescription":"Closed issue \"[GitHub Indexer] GitHub Indexer does not clean up properly after deployment\" (#7575) at NuGet/NuGetGallery","RelatedBody":"The GitHub Indexer job does not properly clean up its state if it is is deployed while it is running. This happens b/c the job stores its state in it's working directory, and the working directory changes on each deployment. Instead, the job should use one known location to store its state."}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"10619160728","Type":"IssuesEvent","CreatedAt":"2019-10-13T11:13:01","Actor":"adamralph","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8459","RelatedDescription":"Closed issue \"Distribute the NuGet CLI as a .NET Core Global Tool\" (#8459) at NuGet/Home","RelatedBody":"I.e. so that it can be installed using `dotnet tool install`.\r\n\r\nA continuous source of pain is the mismatch between `dotnet` and `nuget.exe`. The former does not support all the operations of the latter, and often lags behind when new features are released. Some of the problems described in https://github.com/dotnet/coreclr/issues/26175 also apply with regard to issues and repos. Often, I find it near to impossible find out which version of the SDK is going to contain a given change to the NuGet client.\r\n\r\nWhile it possible to use nuget.exe instead, bootstrapping this from, for example, a build script is relatively painful in that it requires a non-trivial amount of boilerplate code. Whereas it's trivial to bootstrap a .NET Core Global Tool (`dotnet tool install --tool-path ...`).\r\n\r\nIf the NuGet CLI was distributed as a .NET Core Global Tool, that would probably solve most of these issues. We could choose to ignore any NuGet commands in the SDK and use the .NET Core Global Tool instead. We could follow issues in the NuGet repo in isolation, and pick up the new versions of the .NET Core Global Tool when we need to."},{"Id":"10612599871","Type":"IssuesEvent","CreatedAt":"2019-10-11T16:53:42","Actor":"rainersigwald","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8688","RelatedDescription":"Opened issue \"Credential providers cause MSBuild crash on second run of RestoreTask\" (#8688) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nThis is the root cause of microsoft/msbuild#4792 and the related .NET Core servicing build failures.\r\n\r\nNuGet product used: .NET Core SDK 3.0.100-preview6 in Arcade\r\n\r\nNuGet version: 5.2.0.6020\r\n\r\nOS version (i.e. win10 v1607 (14393.321)): Windows\r\n\r\nWorked before? If so, with which NuGet version: no\r\n\r\n## Detailed repro steps so we can see the same problem\r\nI experienced this on a repro machine provided by @nkolev92. I don't have a minimized repro but I believe it looks something like this:\r\n\r\n1. Call `RestoreTask` in one project.\r\n2. In the same MSBuild build session, call `RestoreTask` in another project.\r\n3. Experience MSBuild crash `MSB0001: Internal MSBuild Error: ContextID 10 should have been in the ID-to-project file mapping but wasn't!`\r\n\r\n----\r\n\r\nWhat's happening here is this:\r\n\r\n1. The first call to `RestoreTask` creates a new NuGet `ILogger` wrapping a `Microsoft.Build.Utilities.TaskLoggingHelper` associated with that task invocation -- call this logger `$1`.\r\nhttps://github.com/NuGet/NuGet.Client/blob/840b09a4cecda6ae8fd1c07967874fe8061ece63/src/NuGet.Core/NuGet.Build.Tasks/RestoreTask.cs#L103\r\n1. `RestoreTask.ExecuteAsync()` calls [`DefaultCredentialServiceUtility.SetupDefaultCredentialService`](https://github.com/NuGet/NuGet.Client/blob/840b09a4cecda6ae8fd1c07967874fe8061ece63/src/NuGet.Core/NuGet.Credentials/DefaultCredentialServiceUtility.cs#L17-L28), passing that logger.\r\n1. That populates the **static** field [`HttpHandlerResourceV3.CredentialService`](https://github.com/NuGet/NuGet.Client/blob/840b09a4cecda6ae8fd1c07967874fe8061ece63/src/NuGet.Core/NuGet.Protocol/HttpSource/HttpHandlerResourceV3.cs#L40), preserving a link to the `TaskLoggingHelper` in an object with a longer lifetime than the task.\r\n1. The first `RestoreTask` completes.\r\n1. MSBuild tears down logging infrastructure required to log messages from the context of the first `RestoreTask`. Normally this would make `$1` eligible for GC, but it's now referenced from a static.\r\n1. The second `RestoreTask` is called.\r\n1. On this pass through, `HttpHandlerResourceV3.CredentialService` is non-null and not reset to the current `TaskLoggingHelper`.\r\n1. The credential provider is invoked and attempts to log (using `$1`).\r\n1. MSBuild crashes because of the logging infrastructure teardown from step 5."},{"Id":"10611545934","Type":"IssuesEvent","CreatedAt":"2019-10-11T14:36:27","Actor":"lanfeust69","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8687","RelatedDescription":"Opened issue \"No fallback to full framework TFM dll when other assets are in a package\" (#8687) at NuGet/Home","RelatedBody":"NuGet.exe, version 5.2.0\r\n\r\n## Detailed repro steps\r\n\r\n1. Create a .Net Core 3 application\r\n\r\n2. Add a PackageReference to a nuget package with content similar to\r\n`build/MyPackage.targets`\r\n`lib/net40/MyPackage.dll`\r\n\r\n3. Execute `nuget restore`\r\n\r\nWe would expect a `NU1701` warning, and a `project.assets.json` containing\r\n```json\r\n      \"MyPackage/1.2.3\": {\r\n        \"type\": \"package\",\r\n        \"compile\": {\r\n          \"lib/net40/MyPackage.dll\": {}\r\n        },\r\n        \"runtime\": {\r\n          \"lib/net40/MyPackage.dll\": {}\r\n        },\r\n        \"build\": {\r\n          \"build/MyPackage.targets\": {}\r\n        }\r\n      },\r\n```\r\nbut instead, there is no warning, and the json is missing the `compile` and `runtime` entries.\r\n\r\nThen of course, the dll isn't referenced in the compilation step, which fails if it is really needed.\r\n\r\n## Root cause\r\n\r\nThe issue comes from [this code](https://github.com/NuGet/NuGet.Client/blob/dev/src/NuGet.Core/NuGet.Commands/RestoreCommand/Utility/LockFileUtils.cs#L89,L98) : the `.targets` asset is compatible, so the less strict TFMs are not checked.\r\n\r\n"},{"Id":"10610990005","Type":"IssuesEvent","CreatedAt":"2019-10-11T13:31:40","Actor":"andrew-z","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8686","RelatedDescription":"Opened issue \"Add a machine-readable NuGet CLI list command output\" (#8686) at NuGet/Home","RelatedBody":"Are there any plans for NuGet.exe \"list\" command to have a way of outputting list of packages + versions in a machine readable format? A lot of people (including myself) have scripts depend on it, it's awkward to parse and it feels very fragile since it can change anytime.\r\n\r\nMoreover, recently I found that changing the verbosity level (I wanted to debug things) totally changes the way packages are listed in the output, so it's very unpractical to do so (unless I have a verbose and non-verbose version of the script).\r\n\r\n(Using NuGet version 5.2.0.6090)"},{"Id":"10609808637","Type":"IssuesEvent","CreatedAt":"2019-10-11T10:44:00","Actor":"andrewducker","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8666","RelatedDescription":"Closed issue \"VS2010 plugin doesn't remember passwords\" (#8666) at NuGet/Home","RelatedBody":"## Details about Problem\r\nNuGet version (x.x.x.xxx): 4.3.0.4406\r\n\r\nVS version (if appropriate): 2010\r\n\r\nOS version (i.e. win10 v1607 (14393.321)): 7\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Open a VS2010 solution with a bunch of dependencies coming from a local NuGet repository.  Open \"Manage NuGet packages for Solution\".\r\n\r\n2. See the \"Some NuGet packages are missing from this solution.  Click to Restore...\" and click the Restore button.\r\n\r\n3.  Get hit with the password prompt every time, despite having put the correct password in when setting up the NuGet sources.  If I hit \"cancel\" then it tells me there was a \"(401) Unauthorized.\"\r\n\r\nThings that I've tried:\r\nRunning \"nuget restore\" on the solution.  This works perfectly, and uses the password set in the nuget.config file.\r\n\r\nTheories I have:\r\nThe VS2010 nuget plugin doesn't support using the saved password.\r\nThe format that NuGet 4 uses to store the password isn't supported by the VS2010 plugin.\r\n\r\nAdditional Info:\r\nThe package is hosted on a Nexus server.\r\nBut as it works with \"nuget restore\" I'm fairly sure that that's not the issue.\r\n\r\nI know that we should be moving off of VS2010, but it would be good to know if this issue will go away when we do (and would help build the business case for doing so).\r\n\r\nThis is an issue in the project because there are over a hundred dependendies, and it's a massive pain having to enter your password that many times!"},{"Id":"10609772574","Type":"IssuesEvent","CreatedAt":"2019-10-11T10:38:19","Actor":"v-luzh","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8685","RelatedDescription":"Opened issue \"[Bug Bash][Test Failure][Accessibility]No dashed-line box show for the check-box “Top-Level” in “Migrate NuGet format to PackageReference” dialog when navigating by Tab\" (#8685) at NuGet/Home","RelatedBody":"## Details about Problem\r\nNuGet version: NuGet Client Dev\\5.4.0.6265\r\nVS Version: Master\\29410.161\r\nOS: Windows-10-Enterprise-19H2(18363.418)\r\n## Detailed repro steps \r\n1. Create a C# Console Application (.NET Framework) template via VS.\r\n2. Open PM UI of the project by right-clicking the project->Manage NuGet Packages… in Solution Explorer.\r\n3. Install a package with “packages.config” format.\r\n4. Right-click the “References” node and select the “Migrate packages.config to PackageReference…”\r\n5. Tab through the “Migrate NuGet format to PackageReference” dialog and verify the check-box “Top-Level”.\r\n## Expected\r\nThere should be a dashed-line box show for the check-box “Top-Level” when tabbing to it. Please refer to the same behavior for the check-box “Include prerelease” when navigating by Tab in PM UI as below screenshot.\r\n![CorrectSelection](https://user-images.githubusercontent.com/20632625/66645471-1ed30800-ec56-11e9-864a-9eeb2fbb4428.png)\r\n## Actual\r\nNo dashed-line box show for the check-box “Top-Level” when tabbing to it as below screenshot. \r\n![NoDashlinedBox](https://user-images.githubusercontent.com/20632625/66645490-2abeca00-ec56-11e9-9cb6-618941cc1dd9.png)\r\n\r\n\r\n"},{"Id":"10607968070","Type":"IssuesEvent","CreatedAt":"2019-10-11T06:07:18","Actor":"kartheekp-ms","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8660","RelatedDescription":"Closed issue \"Issue with replacing deprecated '<iconUrl>' with '<icon>'\" (#8660) at NuGet/Home","RelatedBody":"# Details about Problem\r\n\r\nI'm trying to make the replacement that was suggested when I recently uploaded \".nupkg\".  \r\nI've added the new `icon` element to my \".nuspec\" file, but when trying to PACK it using \"nuget.exe - recommended latest v5.2.0\" I get the following error:\r\n\r\n>The element 'metadata' in namespace 'http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd' has invalid child element 'icon' in namespace 'http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd'. List of possible elements expected: 'contentFiles, iconUrl, developmentDependency, copyright, releaseNotes, repository, references, language, summary, dependencies, description, serviceable, tags, frameworkReferences, packageTypes, licenseUrl, frameworkAssemblies' in namespace 'http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd'. This validation error occurred in a 'icon' element.\r\n\r\n# Detailed repro steps so we can see the same problem\r\n\r\n1. Create \"sample.nuspec\" with 'icon' element:\r\n\r\n```xml\r\n<package>\r\n  <metadata>\r\n    ...\r\n    <icon>images\\icon.png</icon>\r\n    ...\r\n  </metadata>\r\n  <files>\r\n    ...\r\n    <file src=\"..\\icon.png\" target=\"images\\\" />\r\n    ...\r\n  </files>\r\n</package>\r\n```\r\n2. Download [nuget.exe - recommended latest v5.2.0](https://dist.nuget.org/win-x86-commandline/latest/nuget.exe).\r\n\r\n3. Run command:\r\n\r\n```powershell\r\nnuget.exe Pack sample.nuspec\r\n```"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"10286366828","Type":"IssuesEvent","CreatedAt":"2019-08-26T13:37:09","Actor":"karann-msft","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/38","RelatedDescription":"Opened issue \"New and improved NuGet Search is live!\" (#38) at NuGet/Announcements","RelatedBody":"Announcing the new and improved search on NuGet.org leveraging Azure Search.\r\n\r\n[Blogpost](https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/) | [Feedback Issue](https://github.com/NuGet/NuGetGallery/issues/4124)"},{"Id":"10168692521","Type":"IssuesEvent","CreatedAt":"2019-08-07T21:31:54","Actor":"anangaur","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/37","RelatedDescription":"Opened issue \"Using OData to query NuGet.org repository is being deprecated\" (#37) at NuGet/Announcements","RelatedBody":"We introduced `V3 APIs` in early 2016. We have made continuous investments to make it more reliable, performant and secure. Going forward, we plan to bring all new features and improvements only to the newer `V3 APIs`. As part of this strategy, we are deprecating the usage of `OData` queries. Subsequently, we plan to **disable the `OData` queries starting Feb 5th, 2020**.\r\n\r\n**Call to Action: Transition to V3 APIs**\r\n\r\nHere are some resources to help you with the migration:\r\n* [NuGet Server `V3 APIs` reference](https://devblogs.microsoft.com/nuget/switching-from-wcf-odata-to-web-api/)\r\n* [Guide to transition from NuGet `V2 API` to `V3 API`](https://docs.microsoft.com/en-us/nuget/guides/api/query-for-all-published-packages). \r\n* [Blog post: Switching from WCF OData to Web API](https://devblogs.microsoft.com/nuget/switching-from-wcf-odata-to-web-api/)\r\n\r\nIf you need further help in moving your use case to `V3 APIs`, do reach out to us at [support@nuget.org](mailto:support@nuget.org).\r\n"},{"Id":"10115721045","Type":"IssuesEvent","CreatedAt":"2019-07-30T22:44:31","Actor":"shoter","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/36","RelatedDescription":"Closed issue \"Replace reference to codeplex issue numer 3072\" (#36) at NuGet/Announcements","RelatedBody":"This is copy of codeplex issue number 3072 as it is referenced inside code. I should do a PR shortly to address this one.\r\n\r\nThe place where it is referenced is RuntimeHelper.cs:150\r\n\r\n\r\n---\r\n\r\nWe're hitting an issue with Microsoft.Bcl package where NuGet is adding a binding redirect for a binary that is considered part of the framework, this causes the application to crash because the binding redirect refers to assembly version that is not available at runtime.\r\n\r\n@Repro:\r\n\r\n1. Create a new Console Application targeting 4.5\r\n2. Create a new Portable Library targeting .NET Framework 4.5, Silverlight 4, Windows Phone 7.5 and .NET for Windows Store apps\r\n3. Add a reference to the portable library from the Console Application\r\n4. Install the Microsoft.Bcl package (1.0.16-rc) to both projects\r\n\r\n@Expected: No binding redirect for System.Runtime in the .NET Framework 4.5 project because a ___later version___ is part of the target framework (see C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.5\\RedistList\\FrameworkList.xml)\r\n@Actual: Binding redirect\r\n\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Runtime\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-1.5.11.0\" newVersion=\"1.5.11.0\" />\r\n</dependentAssembly>\r\n\r\n\r\nYou can use the IVsFrameworkMultiTargeting to determine if a given assembly version is available as part of a given target framework.\r\nMake sure when you fix this, that you only skip the binding redirect if ___a later or same version___ is available in the framework.  \r\n2013-02-22\r\n\r\n---\r\n\r\nWe'll do this in 2.4 release.  \r\n2013-02-26\r\n\r\n---\r\n\r\nIs IVsFrameworkMultiTargeting.IsReferenceableInTargetFx the method I need to call? What should I pass to pwszAssemblySpec?  \r\n2013-06-08\r\n\r\n---\r\n\r\nIt's the full name of the assembly (mscorlib, Version=[version], PublicKeyToken=[token], Culture=[culture]). It can either contain all the information (key, version, etc), or just the simple name (\"mscorlib\")  \r\n2013-06-10\r\n\r\n---\r\n\r\nSo look like I can only check for the same version of the target framework. Can't check for a later version using this method, because I don't know what future versions will be.  \r\n2013-06-12\r\n\r\n---\r\n\r\nThat's fine. That's exactly the behavior we want. For example, System.Runtime didn't ship in 4.0, but did in 4.5. We still want a binding redirect generated for it in 4.0, but not for 4.5.  \r\n2013-06-13\r\n\r\n---\r\n\r\nI followed the exact same steps above, but there's no binding redirect added to the Console Application. It's only added to the __Portable Library project__. Is that the bug?  \r\n2013-06-13\r\n\r\n---\r\n\r\nThe binding redirects added to the Portable Library project seems to come from the Microsoft.Bcl package itself (from the content folder's app.config.transform file). this looks like a non-bug.\r\n2013-06-13\r\n\r\n  \r\nI'm chasing up the repro with Eric St. John. He walked through the code and figured out where it was broken.\r\n\r\nIt's the not the app.config.tranform, notice how the net45 content is empty, and hence no transforms. We also marked our transforms with a special marker that indicates that we added the redirects . The binding redirects we were seeing were not coming from us.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAre you seeing the binding redirects added to the Console Application or the Portable Library? I don't see binding redirect added to Console Application, only the Portable Library.  \r\n2013-06-13\r\n\r\n---\r\n\r\nYes I'm talking about the ConsoleApplication. The binding redirects in the portable library project are expected, and do not affect runtime behavior (as the app.config is ignored and not copied to the app project), and hence can't cause an application to crash.\r\n\r\nI've found another repro (NuGet has really weird logic around when it decides to add binding redirects so it was hard to find a repro).\r\n\r\nThe repro is instead of using the Microsoft.Bcl package, install the Microsoft.Net.Http, 2.2.3-beta package. Make sure you are targeting __4.5__ from the ConsoleApplication and the exact platforms that I called out above for portable.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAlso, the ConsoleApplication must be referencing the portable project before installing the package.  \r\n2013-06-13\r\n\r\n---\r\n\r\nOK now I can repro  \r\n2013-06-14\r\n\r\n---\r\n\r\nOK, I've got a fix now. It no longer adds the binding redirect for System.Runtime.dll, but still adds one for System.Net.Http.Primitives. I guess it's expected, right? Please confirm.\r\n\r\n```\r\n<assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Net.Http.Primitives\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-4.2.3.0\" newVersion=\"4.2.3.0\" />\r\n</dependentAssembly>\r\n</assemblyBinding>\r\n```  \r\n2013-06-14\r\n\r\n---\r\n\r\n\r\nYes that's correct. System.Net.Http.Primitives does not exist in the framework.  \r\n2013-06-14\r\n\r\n---\r\n\r\nFixed in changeset b8d515f6341193b970d2a9d837e580e762d2eb71  \r\n2013-06-19\r\n\r\n---\r\n\r\ni get the same issue with my test project still, runtime being added... if i comment this out the tests run fine... if not i get exceptions thrown from json.net  \r\n2013-08-09\r\n\r\n---\r\n\r\n(or i can change the version up to 4.0.0.0 or something and it works)  \r\n2013-08-09"},{"Id":"10115715827","Type":"IssuesEvent","CreatedAt":"2019-07-30T22:43:23","Actor":"shoter","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/36","RelatedDescription":"Opened issue \"Replace reference to codeplex issue numer 3072\" (#36) at NuGet/Announcements","RelatedBody":"This is copy of codeplex issue number 3072 as it is referenced inside code. I should do a PR shortly to address this one.\r\n\r\nThe place where it is referenced is RuntimeHelper.cs:150\r\n\r\n\r\n---\r\n\r\nWe're hitting an issue with Microsoft.Bcl package where NuGet is adding a binding redirect for a binary that is considered part of the framework, this causes the application to crash because the binding redirect refers to assembly version that is not available at runtime.\r\n\r\n@Repro:\r\n\r\n1. Create a new Console Application targeting 4.5\r\n2. Create a new Portable Library targeting .NET Framework 4.5, Silverlight 4, Windows Phone 7.5 and .NET for Windows Store apps\r\n3. Add a reference to the portable library from the Console Application\r\n4. Install the Microsoft.Bcl package (1.0.16-rc) to both projects\r\n\r\n@Expected: No binding redirect for System.Runtime in the .NET Framework 4.5 project because a ___later version___ is part of the target framework (see C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.5\\RedistList\\FrameworkList.xml)\r\n@Actual: Binding redirect\r\n\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Runtime\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-1.5.11.0\" newVersion=\"1.5.11.0\" />\r\n</dependentAssembly>\r\n\r\n\r\nYou can use the IVsFrameworkMultiTargeting to determine if a given assembly version is available as part of a given target framework.\r\nMake sure when you fix this, that you only skip the binding redirect if ___a later or same version___ is available in the framework.  \r\n2013-02-22\r\n\r\n---\r\n\r\nWe'll do this in 2.4 release.  \r\n2013-02-26\r\n\r\n---\r\n\r\nIs IVsFrameworkMultiTargeting.IsReferenceableInTargetFx the method I need to call? What should I pass to pwszAssemblySpec?  \r\n2013-06-08\r\n\r\n---\r\n\r\nIt's the full name of the assembly (mscorlib, Version=[version], PublicKeyToken=[token], Culture=[culture]). It can either contain all the information (key, version, etc), or just the simple name (\"mscorlib\")  \r\n2013-06-10\r\n\r\n---\r\n\r\nSo look like I can only check for the same version of the target framework. Can't check for a later version using this method, because I don't know what future versions will be.  \r\n2013-06-12\r\n\r\n---\r\n\r\nThat's fine. That's exactly the behavior we want. For example, System.Runtime didn't ship in 4.0, but did in 4.5. We still want a binding redirect generated for it in 4.0, but not for 4.5.  \r\n2013-06-13\r\n\r\n---\r\n\r\nI followed the exact same steps above, but there's no binding redirect added to the Console Application. It's only added to the __Portable Library project__. Is that the bug?  \r\n2013-06-13\r\n\r\n---\r\n\r\nThe binding redirects added to the Portable Library project seems to come from the Microsoft.Bcl package itself (from the content folder's app.config.transform file). this looks like a non-bug.\r\n2013-06-13\r\n\r\n  \r\nI'm chasing up the repro with Eric St. John. He walked through the code and figured out where it was broken.\r\n\r\nIt's the not the app.config.tranform, notice how the net45 content is empty, and hence no transforms. We also marked our transforms with a special marker that indicates that we added the redirects . The binding redirects we were seeing were not coming from us.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAre you seeing the binding redirects added to the Console Application or the Portable Library? I don't see binding redirect added to Console Application, only the Portable Library.  \r\n2013-06-13\r\n\r\n---\r\n\r\nYes I'm talking about the ConsoleApplication. The binding redirects in the portable library project are expected, and do not affect runtime behavior (as the app.config is ignored and not copied to the app project), and hence can't cause an application to crash.\r\n\r\nI've found another repro (NuGet has really weird logic around when it decides to add binding redirects so it was hard to find a repro).\r\n\r\nThe repro is instead of using the Microsoft.Bcl package, install the Microsoft.Net.Http, 2.2.3-beta package. Make sure you are targeting __4.5__ from the ConsoleApplication and the exact platforms that I called out above for portable.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAlso, the ConsoleApplication must be referencing the portable project before installing the package.  \r\n2013-06-13\r\n\r\n---\r\n\r\nOK now I can repro  \r\n2013-06-14\r\n\r\n---\r\n\r\nOK, I've got a fix now. It no longer adds the binding redirect for System.Runtime.dll, but still adds one for System.Net.Http.Primitives. I guess it's expected, right? Please confirm.\r\n\r\n```\r\n<assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Net.Http.Primitives\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-4.2.3.0\" newVersion=\"4.2.3.0\" />\r\n</dependentAssembly>\r\n</assemblyBinding>\r\n```  \r\n2013-06-14\r\n\r\n---\r\n\r\n\r\nYes that's correct. System.Net.Http.Primitives does not exist in the framework.  \r\n2013-06-14\r\n\r\n---\r\n\r\nFixed in changeset b8d515f6341193b970d2a9d837e580e762d2eb71  \r\n2013-06-19\r\n\r\n---\r\n\r\ni get the same issue with my test project still, runtime being added... if i comment this out the tests run fine... if not i get exceptions thrown from json.net  \r\n2013-08-09\r\n\r\n---\r\n\r\n(or i can change the version up to 4.0.0.0 or something and it works)  \r\n2013-08-09"},{"Id":"10105705706","Type":"IssuesEvent","CreatedAt":"2019-07-29T18:41:10","Actor":"anangaur","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/35","RelatedDescription":"Opened issue \"Machine readable output for dotnet list package\" (#35) at NuGet/Announcements","RelatedBody":"The spec for 'Machine readable output for dotnet list package' is ready for **review**:\r\n\r\n|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Machine readable output for dotnet list package](https://github.com/NuGet/Home/wiki/%5BSpec%5D-Machine-readable-output-for-dotnet-list-package) | https://github.com/NuGet/Home/issues/7752 |"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1164220617710686209","CreatedAt":"2019-08-21T17:00:00+00:00","UserScreenname":"nuget","Text":"⚠ Restoring packages from https://t.co/KVB7werYQh might fail in some regions. We are investigating the issue. Follo… https://t.co/t69YZ9eFo1","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":4,"FavoriteCount":2,"RawContent":null},{"Id":"1162433926578626560","CreatedAt":"2019-08-16T18:40:19+00:00","UserScreenname":"nuget","Text":"Did you check out the new docs landing page? We tried to make it better and more useful. What do you think?… https://t.co/96nBP0rV5l","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":13,"FavoriteCount":3,"RawContent":null},{"Id":"1159229316351197184","CreatedAt":"2019-08-07T22:26:21+00:00","UserScreenname":"nuget","Text":"Using OData to query https://t.co/F9kiKfdOWi repository is being deprecated\n#Announcement \n\nhttps://t.co/dtelctlNOe","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":10,"FavoriteCount":3,"RawContent":null}]}},"RunOn":"2019-10-14T05:30:43.4441297Z","RunDurationInMilliseconds":3034}