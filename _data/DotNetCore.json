{"Data":{"Blog":{"FeedItems":[{"Title":".NET Framework 4.7.1 Runtime and Compiler Features","PublishedOn":"2017-09-28T23:56:59+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"This post describes the new Runtime, Compiler and Base Class Library (BCL) improvements in the .NET Framework 4.7.1. You can try out these features by downloading the Developer Pack, described in the Welcome to the .NET Framework 4.7.1 Early Access blog post.  BCL &#8211; .NET Standard 2.0 Support .NET Framework 4.7.1 has built-in support for .NET Standard 2.0. .NET Framework 4.7.1... <a aria-label=\"read more about .NET Framework 4.7.1 Runtime and Compiler Features\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/28/net-framework-4-7-1-runtime-and-compiler-features/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/28/net-framework-4-7-1-runtime-and-compiler-features/","RawContent":null},{"Title":"Build a web service with F# and .NET Core 2.0","PublishedOn":"2017-09-26T16:39:23+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"Earlier this year, I wrote about an update to the roadmap for F# and .NET Core. I had mentioned that there were a number of things you could build with F# and .NET Core today, such as web services. In this post, I&#8217;ll walk through building a web service with F# and .NET Core 2.0... <a aria-label=\"read more about Build a web service with F# and .NET Core 2.0\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/26/build-a-web-service-with-f-and-net-core-2-0/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/26/build-a-web-service-with-f-and-net-core-2-0/","RawContent":null},{"Title":".NET Framework September 2017 Preview of Quality Rollup","PublishedOn":"2017-09-25T19:57:18+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are releasing the September 2017 Preview of Quality Rollup. This type of rollup is intended for businesses that want to the preview or use quality improvements as soon as they are available. This update applies to Windows 10 Update 1607 (Anniversary Update) and to Windows Server 2016. FYI: The KBs for Windows Server 2016... <a aria-label=\"read more about .NET Framework September 2017 Preview of Quality Rollup\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/25/net-framework-september-2017-preview-of-quality-rollup/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/25/net-framework-september-2017-preview-of-quality-rollup/","RawContent":null},{"Title":".NET Core September 2017 Update — macOS High Sierra Support","PublishedOn":"2017-09-22T22:29:09+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"We released .NET Core updates for macOS High Sierra Support and additional quality fixes. You can download and install the update for Windows, macOS and Linux. This update is for .NET Core 1.0 and 1.1. The initial .NET Core 2.0 release includes similar improvements, so is not being updated with this release. Downloads .NET Core 1.0.7 .NET... <a aria-label=\"read more about .NET Core September 2017 Update &#8212; macOS High Sierra Support\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/22/net-core-september-2017-update-macos-high-sierra-support/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/22/net-core-september-2017-update-macos-high-sierra-support/","RawContent":null},{"Title":".NET Framework 4.7.1 Accessibility and WPF Improvements","PublishedOn":"2017-09-21T22:00:20+00:00","CommentsCount":17,"FacebookCount":0,"Summary":"This post describes the new WPF and accessibility features and improvements in .NET Framework 4.7.1. You can try out these features by downloading the Developer Pack, described in the Welcome to the .NET Framework 4.7.1 Early Access blog post. Accessibility improvements .NET Framework 4.7.1 brings in a lot of accessibility improvements across different libraries to align with the... <a aria-label=\"read more about .NET Framework 4.7.1 Accessibility and WPF Improvements\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/21/net-framework-4-7-1-accessibility-and-wpf-improvements/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/21/net-framework-4-7-1-accessibility-and-wpf-improvements/","RawContent":null},{"Title":"Watch .NET Conf 2017!","PublishedOn":"2017-09-19T14:35:54+00:00","CommentsCount":12,"FacebookCount":0,"Summary":".NET Conf starts today. It&#8217;s a three-day, free, virtual and global .NET conference. All you need to do is point your web browser to channel9.msdn.com, starting at 8AM Pacific Time. We have a packed agenda with a great set of expert .NET developers. What will you learn? Many things. You will learn to build for... <a aria-label=\"read more about Watch .NET Conf 2017!\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/19/watch-net-conf-2017/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/19/watch-net-conf-2017/","RawContent":null},{"Title":".NET Framework 4.7.1 ASP.NET and Configuration features","PublishedOn":"2017-09-14T00:23:49+00:00","CommentsCount":24,"FacebookCount":0,"Summary":"This post describes the new ASP.NET, Configuration and System.Messaging features and improvements in the .NET Framework 4.7.1. More information on the build these features are available in and how to get the Developer Pack is covered in the Welcome to the .NET Framework 4.7.1 Early Access blog post. Configuration builders Configuration builders allow developers to inject and build... <a aria-label=\"read more about .NET Framework 4.7.1 ASP.NET and Configuration features\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/13/net-framework-4-7-1-asp-net-and-configuration-features/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/13/net-framework-4-7-1-asp-net-and-configuration-features/","RawContent":null},{"Title":".NET Framework September 2017 Security and Quality Rollup","PublishedOn":"2017-09-13T01:11:33+00:00","CommentsCount":25,"FacebookCount":0,"Summary":"Last Updated: 2017.09.21. Today, we are releasing the September 2017 Security and Quality Rollup and Security Only Update. This update applies to Windows 7 and later client versions and Windows Server 2008 and later server versions. This update has known issues. Please see them at the bottom of the update. Security This release contains the... <a aria-label=\"read more about .NET Framework September 2017 Security and Quality Rollup\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/12/net-framework-september-2017-security-and-quality-rollup/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/12/net-framework-september-2017-security-and-quality-rollup/","RawContent":null},{"Title":"The week in .NET – Let’s Encrypt Web App Renewer, Seattle CodeCamp 2017","PublishedOn":"2017-08-29T08:33:21+00:00","CommentsCount":15,"FacebookCount":0,"Summary":"Previous posts: Project File Tools, Maira Wenzel, Mixed Reality in Miami .NET Core 2.0, ASP.NET Core 2.0, Entity Framework 2.0, Visual Studio 2017 Update 3, enterprise Entity Framework Core in Boston Rezoom.SQL, Protobuf in Orlando Open-source project of the week: Let&#8217;s Encrypt Azure Web App Renewer There&#8217;s a growing consensus that all web sites should... <a aria-label=\"read more about The week in .NET &#8211; Let&#8217;s Encrypt Web App Renewer, Seattle CodeCamp 2017\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/08/29/the-week-in-net/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/08/29/the-week-in-net/","RawContent":null},{"Title":"UWP & .NET Standard 2.0: A preview is now available!","PublishedOn":"2017-08-25T21:00:11+00:00","CommentsCount":50,"FacebookCount":0,"Summary":"Today, we released the first Preview of Visual Studio 2017 version 15.4. This includes an update to the UWP tooling that supports .NET Standard 2.0. In this post, I&#8217;ll outline what this means for UWP development with .NET. Prerequisites In order to use .NET Standard 2.0 in UWP, you need to target Fall Creators Update (FCU)... <a aria-label=\"read more about UWP &#38; .NET Standard 2.0: A preview is now available!\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/08/25/uwp-net-standard-2-0-preview/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/08/25/uwp-net-standard-2-0-preview/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"6650451504","Type":"IssuesEvent","CreatedAt":"2017-09-28T16:22:10","Actor":"hughbe","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/87","RelatedDescription":"Opened issue \"PRs to repos outside of dotnet/* pattern should not always thank for signing the CLA\" (#87) at dotnet/home","RelatedBody":"For example: https://github.com/mono/libgdiplus/pull/109\r\n\r\nI have already signed the CLI. On the dotnet/corefx etc. projects, I don't get the extra message:\r\n\r\n```\r\n@hughbe,\r\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by .NET Foundation. We will now review your pull request.\r\nThanks,\r\n.NET Foundation Pull Request Bot\r\n```\r\n\r\nJust a small gripe, as I get an email each time I do this. I've seen this in Mono and Xunit.\r\n\r\n/cc @karelz I know this is unrelated to corefx but maybe you know the right person/repo to route this to :D\r\n"},{"Id":"6515896963","Type":"PullRequestEvent","CreatedAt":"2017-08-26T22:20:18","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/85","RelatedDescription":"Merged pull request \"Create telerik-ui-for-uwp.md\" (#85) at dotnet/home","RelatedBody":"Submission of Telerik UI for UWP"},{"Id":"6515896506","Type":"PullRequestEvent","CreatedAt":"2017-08-26T22:19:49","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/86","RelatedDescription":"Merged pull request \"Corrected list of maintainers\" (#86) at dotnet/home","RelatedBody":""},{"Id":"6483200432","Type":"PullRequestEvent","CreatedAt":"2017-08-18T19:58:41","Actor":"gep13","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/86","RelatedDescription":"Opened pull request \"Corrected list of maintainers\" (#86) at dotnet/home","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"6645912196","Type":"IssuesEvent","CreatedAt":"2017-09-27T19:47:08","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/32","RelatedDescription":"Opened issue \".NET Framework 4.7.1 provides built-in support for .NET Standard 2.0\" (#32) at dotnet/announcements","RelatedBody":"## Summary\r\n\r\n.NET Framework 4.7.1 will have built-in support for .NET Standard 2.0. This means that you don't have to deploy any additional files or use binding redirects to use .NET Standard 2.0 libraries.\r\n\r\nFor a demo, check out [this video][video].\r\n\r\n## Details\r\n\r\nWhile libraries targeting [.NET Standard 2.0][ns20post] are can be consumed by applications and libraries [targeting .NET Framework 4.6.1][nstable] and higher, not all files that are required for .NET Standard libraries were part of .NET Framework 4.6.1. In fact, .NET Framework 4.6.1 was shipped before .NET Standard 2.0 was even designed. That's why building an application targeting .NET Framework 4.6.1 (as well as 4.6.2 and 4.7) will have to deploy additional files.\r\n\r\n* If you use **Visual Studio 2017 15.3** or higher, these files are automatically copied to the application's output folder.\r\n\r\n* If you use **Visual Studio 2015 and [use NuGet 3.6][nuget36]**, we'll prompt you to install a [support package][vs2015support] which will handle copying the files to the output directory.\r\n\r\nStarting with .NET Framework 4.7.1 these files no longer have to be deployed with the application -- they are built right into the .NET Framework itself.\r\n\r\n.NET Framework 4.7.1 also adds[about 200 missing APIs][missingapis] that were part of .NET Standard 2.0 but not actually implemented by .NET Framework 4.6.1, 4.6.2 or 4.7.\r\n\r\nThis also removes the need for [binding redirects][netfx-issues] when using .NET Standard libraries on .NET Framework because the CLR automatically unifies version numbers of assemblies that are part of the platform.\r\n\r\nLearn more [by reading the .NET Standard FAQ](http://aka.ms/netstandardfaq).\r\n\r\n## Discussion\r\n\r\nDiscussion\r\n\r\nFor a discussion, please go to dotnet/standard#514.\r\n\r\n[ns20post]: https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-standard-2-0/\r\n[nstable]: https://docs.microsoft.com/en-us/dotnet/standard/net-standard\r\n[nuget36]: https://dist.nuget.org/visualstudio-2015-vsix/v3.6.0/NuGet.Tools.vsix\r\n[vs2015support]: https://aka.ms/netstandard-build-support-netfx\r\n[missingapis]: https://github.com/dotnet/standard/blob/master/netstandard/src/ApiCompatBaseline.net461.txt\r\n[netfx-issues]: https://github.com/dotnet/standard/issues/481\r\n[video]: https://www.youtube.com/watch?v=u67Eu_IgEMs\r\n\r\nhttps://github.com/dotnet/standard/issues/514"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"6694790047","Type":"IssuesEvent","CreatedAt":"2017-10-10T04:29:37","Actor":"luboid","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/14379","RelatedDescription":"Closed issue \"IL working in .Net Framework but not in .Net Core 2.0\" (#14379) at dotnet/coreclr","RelatedBody":"Hi,\r\n\r\nI have project \r\n\r\nhttps://github.com/luboid/ES5.Script/tree/dotnet-core-2 \r\n\r\nwhich compile JavaScript to IL, here is problematic case \r\n\r\nhttps://github.com/luboid/ES5.Script/tree/dotnet-core-2/TestConsole/test-cases/not-working\r\n\r\n*.frmw.txt IL code generated by .Net Framework\r\n*.core.txt IL code generated by .Net Core\r\n\r\nIL code is identical and there is no differences but generate exception :\r\n\r\nSystem.InvalidProgramException: Common Language Runtime detected an invalid program.\r\n\r\nwhen executed in .Net Core\r\n\r\nI'am using \r\n\r\nhttp://blogs.msdn.com/b/haibo_luo/archive/2005/10/25/484861.aspx\r\n\r\nto catch IL\r\n\r\nES5.Script\\EcmaScript\\EcmaScriptCompiler.cs:line 384\r\n\r\n\r\nWin 10 (version:1703, build:15063.608) \r\nVS 2017 (version:15.3.5)\r\n.Net Core 2.0\r\n.Net Framework 4.7.02046\r\n\r\n"},{"Id":"6694706115","Type":"IssuesEvent","CreatedAt":"2017-10-10T03:50:31","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/14402","RelatedDescription":"Opened issue \"ValueType.GetHashCode/Equals stack overflows when struct contains cycle\" (#14402) at dotnet/coreclr","RelatedBody":"Repro:\r\n```C#\r\nusing System;\r\n\r\nclass Program\r\n{\r\n    static void Main()\r\n    {\r\n        IA a = new A();\r\n        a.SetB(new B { a = a });\r\n\r\n        // both of the following lines stack overflow\r\n        Console.WriteLine(a.GetHashCode());\r\n        Console.WriteLine(a.Equals(a));\r\n    }\r\n}\r\n\r\ninterface IA\r\n{\r\n    void SetB(object o);\r\n}\r\n\r\ninternal struct A : IA\r\n{\r\n    public B b;\r\n    public void SetB(object o) { b = (B)o; }\r\n}\r\n\r\ninternal struct B\r\n{\r\n    public object a;\r\n}\r\n```"},{"Id":"6694506699","Type":"PullRequestEvent","CreatedAt":"2017-10-10T02:27:31","Actor":"AndyAyersMS","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14381","RelatedDescription":"Merged pull request \"JIT: improve type equality opts for generic and prejitted code\" (#14381) at dotnet/coreclr","RelatedBody":"Handle cases where a `GetType()` call on a generically typed object\r\nfeeds into a type equality comparison.\r\n\r\nThese calls have constraint prefixes. For value classes the constraint\r\ntells us the type and so we can avoid the box and call and just construct\r\nthat type directly. For ref classes the type test can usually reduce to\r\na method table comparison.\r\n\r\nAlso, handle cases that arise in prejiited code better, by generalizing\r\nhow the jit looks for class handles from type construction trees.\r\n\r\nAdded test cases.\r\n\r\nCloses #14304."},{"Id":"6694506663","Type":"IssuesEvent","CreatedAt":"2017-10-10T02:27:30","Actor":"AndyAyersMS","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/14304","RelatedDescription":"Closed issue \"JIT: look into why intrinsic recognition is disabled for constrained callvirt\" (#14304) at dotnet/coreclr","RelatedBody":"In particular, the last clause on this line in `Compiler::impImportCall`\r\n```C++\r\n        if ((isIntrinsic || isJitIntrinsic) && !pConstrainedResolvedToken)\r\n```\r\nThis prevents some type equality opts from kicking in:\r\n```C\r\n#using System;\r\nclass C\r\n{\r\n    static bool IsInt<T>(T t)\r\n    {\r\n        if (t.GetType() == typeof(int))\r\n        {\r\n            return true;\r\n        }\r\n        else\r\n        {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public static int Main()\r\n    {\r\n       return IsInt<int>(3) && !IsInt<string>(\"Three\") ? 100 : 0;\r\n    }\r\n}\r\n```\r\nThe `int` case currently produces:\r\n```asm\r\nG_M63928_IG01:\r\n       56                   push     rsi\r\n       4883EC20             sub      rsp, 32\r\n       8BF1                 mov      esi, ecx\r\n\r\nG_M63928_IG02:\r\n       48B910697B21FD7F0000 mov      rcx, 0x7FFD217B6910\r\n       E84A45835F           call     CORINFO_HELP_NEWSFAST\r\n       488BC8               mov      rcx, rax\r\n       897108               mov      dword ptr [rcx+8], esi\r\n       3909                 cmp      dword ptr [rcx], ecx\r\n       E81D25A95F           call     System.Object:GetType():ref:this\r\n       488BF0               mov      rsi, rax\r\n       48B910697B21FD7F0000 mov      rcx, 0x7FFD217B6910\r\n       E83B00395F           call     CORINFO_HELP_TYPEHANDLE_TO_RUNTIMETYPE\r\n       483BF0               cmp      rsi, rax\r\n       750B                 jne      SHORT G_M63928_IG04\r\n       B801000000           mov      eax, 1\r\n\r\nG_M63928_IG03:\r\n       4883C420             add      rsp, 32\r\n       5E                   pop      rsi\r\n       C3                   ret\r\n\r\nG_M63928_IG04:\r\n       33C0                 xor      eax, eax\r\n\r\nG_M63928_IG05:\r\n       4883C420             add      rsp, 32\r\n       5E                   pop      rsi\r\n       C3                   ret\r\n```"},{"Id":"6694407320","Type":"PullRequestEvent","CreatedAt":"2017-10-10T01:45:50","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14394","RelatedDescription":"Merged pull request \"Undo unnecessary change from DateTime.Parse commit\" (#14394) at dotnet/coreclr","RelatedBody":"This change shouldn't have been included in my DateTime.Parse span change (https://github.com/dotnet/coreclr/pull/14352).  It was left- over from some local experimentation.  The change doesn't hurt anything functionally, but it does undo a small optimization; I've not measured whether it's impactful or not, so I'm putting it back the way it was."},{"Id":"6694207453","Type":"IssuesEvent","CreatedAt":"2017-10-10T00:19:31","Actor":"sdmaclea","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/14371","RelatedDescription":"Closed issue \"[Arm64] Support for Vector Intrinsics and/or SIMD requires 128bit argument registers to be preserved\" (#14371) at dotnet/coreclr","RelatedBody":"@dotnet/jit-contrib @dotnet/arm64-contrib \r\n\r\nThe following logic and assumptions will no longer be true when SIMD intrinsic support is added.\r\n``` C++\r\n//--------------------------------------------------------------------\r\n// This represents the floating point argument registers which are saved\r\n// as part of the NegInfo for a FramedMethodFrame. Note that these\r\n// might not be saved by all stubs: typically only those that call into\r\n// C++ helpers will need to preserve the values in these volatile\r\n// registers.\r\n//--------------------------------------------------------------------\r\ntypedef DPTR(struct FloatArgumentRegisters) PTR_FloatArgumentRegisters;\r\nstruct FloatArgumentRegisters {\r\n    // armV8 supports 32 floating point registers. Each register is 128bits long.\r\n    // It can be accessed as 128-bit value or 64-bit value(d0-d31) or as 32-bit value (s0-s31)\r\n    // or as 16-bit value or as 8-bit values. C# only has two builtin floating datatypes float(32-bit) and \r\n    // double(64-bit). It does not have a quad-precision floating point.So therefore it does not make sense to\r\n    // store full 128-bit values in Frame when the upper 64 bit will not contain any values.\r\n    double  d[8];  // d0-d7\r\n};\r\n```\r\n\r\nI plan to change this to save ful 128-bits all the time.  If there are any objections, let me know.\r\n\r\nThis will also affect `SAVE_FLOAT_ARGUMENT_REGISTERS` and `RESTORE_FLOAT_ARGUMENT_REGISTERS` macros and related assembly frame layouts"},{"Id":"6694200520","Type":"PullRequestEvent","CreatedAt":"2017-10-10T00:16:31","Actor":"sandreenko","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14401","RelatedDescription":"Opened pull request \"Fix InitializeArray intrinsic must always be expanded\" for CoreRT.\" (#14401) at dotnet/coreclr","RelatedBody":"The issue is dotnet/corert#4690.\r\n\r\nThe problem is the same as the old one(#10215),  we do spill because reach the max tree size.\r\n\r\n`impInitializeArrayIntrinsic` relies that the last stmt is the helper call.\r\nWe violate it if `MAX_TREE` spill happens before dbg spill on the stmt boundaries. We ends up with the wrong stmt order and can't import the intrinsic.\r\n\r\nIt works with optimization because we force to spill after 'dup' that are not 'elementary' and the right spills happen before we spill because of `MAX_TREE_SIZE`.\r\n\r\nThe good example:\r\n\r\n```\r\n    [ 1]   7 (0x007) dup\r\n    [ 2]   8 (0x008) ldc.i4.0 0\r\n    [ 3]   9 (0x009) ldc.i4.s 16\r\n    [ 4]  11 (0x00b) newarr 01000047\r\n*****************************************SPILL FOR DBG CODE*********************************************(\r\n spill tree 9\r\nlvaGrabTemp returning 1 (V01 tmp1) called for impSpillStackEnsure.\r\nassign tree 9 to temp 1\r\n\r\n\r\n               [000015] ------------             *  STMT      void  (IL 0x007...  ???)\r\n               [000009] ------------             |  /--*  CNS_INT   int    0\r\n               [000014] -A----------             \\--*  ASG       int\r\n               [000013] D------N----                \\--*  LCL_VAR   int    V01 tmp1\r\n\r\n spill tree 12\r\nlvaGrabTemp returning 2 (V02 tmp2) called for impSpillStackEnsure.\r\nassign tree 12 to temp 2\r\n\r\n\r\n               [000019] ------------             *  STMT      void  (IL   ???...  ???)\r\n               [000012] --CXG-------             |  /--*  CALL help ref    HELPER.CORINFO_HELP_READYTORUN_NEWARR_1\r\n               [000010] ------------ arg0        |  |  \\--*  CNS_INT   int    16\r\n               [000018] -ACXG-------             \\--*  ASG       ref\r\n               [000017] D------N----                \\--*  LCL_VAR   ref    V02 tmp2\r\n\r\nlvaSetClass: setting class for V02 to (0000000000420038) [System.Private.CoreLib]System.Byte[]\r\n\r\n)\r\n    [ 4]  16 (0x010) dup\r\n    [ 5]  17 (0x011) ldtoken\r\n    [ 6]  22 (0x016) call 0A000190\r\nIn Compiler::impImportCall: opcode is call, kind=0, callRetType is void, structSize is 0\r\n```\r\nThe last statement is `[000019]`.\r\n\r\nBad example:\r\n```\r\n    [ 1] 196 (0x0c4) dup\r\n    [ 2] 197 (0x0c5) ldc.i4.s 9\r\n    [ 3] 199 (0x0c7) ldc.i4.s 16\r\n    [ 4] 201 (0x0c9) newarr 01000047\r\n*****************************************SPILL BECAUSE REACHED MAX_TREE_SIZE************************(\r\n spill tree 273\r\nlvaGrabTemp returning 19 (V19 tmp19) called for impSpillStackEnsure.\r\nassign tree 273 to temp 19\r\n\r\n\r\n               [000276] ------------             *  STMT      void  (IL   ???...  ???)\r\n               [000273] --CXG-------             |  /--*  CALL help ref    HELPER.CORINFO_HELP_READYTORUN_NEWARR_1\r\n               [000271] ------------ arg0        |  |  \\--*  CNS_INT   int    16\r\n               [000275] -ACXG-------             \\--*  ASG       ref\r\n               [000274] D------N----                \\--*  LCL_VAR   ref    V19 tmp19\r\n\r\nlvaSetClass: setting class for V19 to (0000000000420038) [System.Private.CoreLib]System.Byte[]\r\n\r\n)\r\n*****************************************SPILL FOR DBG CODE*********************************************(\r\n spill tree 270\r\nlvaGrabTemp returning 20 (V20 tmp20) called for impSpillStackEnsure.\r\nassign tree 270 to temp 20\r\n\r\n\r\n               [000280] ------------             *  STMT      void  (IL   ???...  ???)\r\n               [000270] ------------             |  /--*  CNS_INT   int    9\r\n               [000279] -A----------             \\--*  ASG       int\r\n               [000278] D------N----                \\--*  LCL_VAR   int    V20 tmp20\r\n\r\n)\r\n    [ 4] 206 (0x0ce) dup\r\n    [ 5] 207 (0x0cf) ldtoken\r\n    [ 6] 212 (0x0d4) call 0A000190\r\n```\r\nin the bad example we do not spill `[000280]` because it is leaf node, that we ignore \r\n```\r\nif ((opcodeOffs - lastSpillOffs) > MAX_TREE_SIZE && impCanSpillNow(prevOpcode))\r\n{\r\n  impSpillStackEnsure(spillLeaves = false);\r\n}\r\n```\r\nbut then this leave is spilled for dbg code and `000280` becomes the last statement.\r\n\r\nI see 3 possible cheap fixes:\r\n1. do not spill after `new_arr`, `new_obj`;\r\n2. search for the correct stmt in the `impInitializeArrayIntrinsic`;\r\n3. swap the order of the spilling because of DBG_CODE and MAX_TREE_SIZE.\r\n\r\nI do not like the second variant, because it creates additional checks in the `impInitializeArrayIntrinsic`.\r\nThe third variant is good, possible that there are other intrinsics that will benefit from the right order, but it causes asm diffs in CoreCLR.\r\n\r\nSo this PR implements the first variant as the cheapest to implement and check.\r\nIt is safe not to add `dup` into this list, because it doesn't add new stmt or locals. It is important not to add it, because we can create a test, that will cause stack overflow with such exclusion. \r\n"},{"Id":"6694175456","Type":"IssuesEvent","CreatedAt":"2017-10-10T00:06:20","Actor":"sdmaclea","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/14400","RelatedDescription":"Opened issue \"VectorTest.CheckValue<T> uses unsupported format\" (#14400) at dotnet/coreclr","RelatedBody":"`VectorTest.CheckValue<T>(T value, T expectedValue)` is using format `X` for `T` Single/Double\r\n\r\n```\r\nConsole.WriteLine(\"CheckValue failed for type \" + typeof(T).ToString() + \". Expected: {0} (0x{0:X}), Got: {1} (0x{1:X})\", expectedValue, value)\r\n```\r\n\r\nThis is not currently supported by `src/classlibnative/bcltype/number.cpp`  and results in an exception making it difficult to understand initial failure."},{"Id":"6694168214","Type":"PullRequestEvent","CreatedAt":"2017-10-10T00:03:18","Actor":"jorive","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14364","RelatedDescription":"Merged pull request \"Fixing JitBench\" (#14364) at dotnet/coreclr","RelatedBody":"- In the lab, the path where the JitBench sources are downloaded is already too long, which eventially causes `dotnet-install.ps1` to fail. Part of the changes are to reduce the PATH where the tests are placed.\r\n- Updated the JitBench version/commit being used. This one is already on 2.1"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"6693881106","Type":"PullRequestEvent","CreatedAt":"2017-10-09T22:18:57","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/7795","RelatedDescription":"Merged pull request \"Remove 15.5 from 2.0\" (#7795) at dotnet/cli","RelatedBody":"There were incorrect merges from release/15.5 to release/2.0.0. This reverts them."},{"Id":"6693603518","Type":"PullRequestEvent","CreatedAt":"2017-10-09T21:01:47","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/7795","RelatedDescription":"Opened pull request \"Remove 15.5 from 2.0\" (#7795) at dotnet/cli","RelatedBody":"There were incorrect merges from release/15.5 to release/2.0.0. This reverts them."},{"Id":"6693540771","Type":"PullRequestEvent","CreatedAt":"2017-10-09T20:46:23","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/7794","RelatedDescription":"Opened pull request \"Adding the unified transport NuGet feed.\" (#7794) at dotnet/cli","RelatedBody":"Step 1 for: https://github.com/dotnet/cli/issues/7793\r\n"},{"Id":"6693525830","Type":"IssuesEvent","CreatedAt":"2017-10-09T20:42:39","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/7793","RelatedDescription":"Opened issue \"CLI and the Transport Feed\" (#7793) at dotnet/cli","RelatedBody":"Four steps to complete moving to the Transport Feed:\r\n-[] 1. Use the Transport Feed as the default feed\r\n-[] 2. Publish the CLI NuGet package to the Transport Feed\r\n-[] 3. Stop publishing the CLI NuGet package to MyGet\r\n-[] 4. use the transport feed exclusively - requirement: all dependencies are publishing to the new feed\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"6692911265","Type":"PullRequestEvent","CreatedAt":"2017-10-09T18:11:05","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/7789","RelatedDescription":"Merged pull request \"Merge release/15.5 to release/2.0.0\" (#7789) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/15.5 into release/2.0.0.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/15.5-to-release/2.0.0-20171009-070027\ngit reset --hard upstream/release/2.0.0\ngit merge upstream/release/15.5\n# Fix merge conflicts\ngit commit\ngit push merges/release/15.5-to-release/2.0.0-20171009-070027 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"6692691781","Type":"IssuesEvent","CreatedAt":"2017-10-09T17:18:50","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7787","RelatedDescription":"Closed issue \"Cannot run application in another machine due to wrong path for dependencies. \" (#7787) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n\r\n1) Create a project with the following .csproj.\r\n\r\n```XML\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n    <RuntimeIdentifiers>win10-x64;ubuntu.16.04-x64</RuntimeIdentifiers>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"MySql.Data\" Version=\"8.0.9-dmr\" />\r\n    <PackageReference Include=\"Newtonsoft.Json\" Version=\"10.0.3\" />\r\n    <PackageReference Include=\"NUnit\" Version=\"3.8.1\" />\r\n    <PackageReference Include=\"TweetinviAPI\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\n2) Use the following commands:\r\n```\r\nPS> dotnet restore\r\nPS> dotnet publish -c Release -r ubuntu.16.04-x64\r\n```\r\n\r\n3) Execute the program on Ubuntu machine.\r\n\r\n## Expected  behavior\r\n\r\nThe applications is run successfully. \r\n\r\n## Actual behavior\r\n\r\nIt throws an error:\r\n`Error:\r\n  An assembly specified in the application dependencies manifest (Twitter.deps.json) was not found:\r\n    package: 'Autofac', version: '4.6.0'\r\n    path: 'lib/netstandard1.1/Autofac.dll'`\r\n\r\n## Environment data\r\n\r\n.NET Command Line Tools (2.0.0)\r\n\r\nProduct Information:\r\n Version:            2.0.0\r\n Commit SHA-1 hash:  cdcd1928c9\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.15063\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.0\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n\r\n## Diagnostic \r\n\r\nIt is failing to looking for the dependencies in the right place. On _runtimeconfig.dev.json_ file there is this in all deployments.\r\n\r\n```json\r\n{\r\n  \"runtimeOptions\": {\r\n    \"additionalProbingPaths\": [\r\n      \"C:\\\\Users\\\\leoat\\\\.dotnet\\\\store\\\\|arch|\\\\|tfm|\",\r\n      \"C:\\\\Users\\\\leoat\\\\.nuget\\\\packages\",\r\n      \"C:\\\\Program Files\\\\dotnet\\\\sdk\\\\NuGetFallbackFolder\"\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\nThese paths exist on my computer, but not in the target Ubuntu machine, of course. I can reproduce the error on my own computer by removing all these paths. As a self-contained deployment, it should be looking for the dependencies on the _publish_ folder, they are all there, but it is looking for them in the wrong place.\r\n\r\n**Thanks you for the help!** \r\n\r\n\r\n\r\n\r\n"},{"Id":"6692655181","Type":"PullRequestEvent","CreatedAt":"2017-10-09T17:10:13","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/pull/7775","RelatedDescription":"Closed pull request \"Merge release/2.0.0 to master\" (#7775) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.0.0 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.0.0-to-master-20171006-070027\ngit reset --hard upstream/master\ngit merge upstream/release/2.0.0\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.0.0-to-master-20171006-070027 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"6692617694","Type":"IssuesEvent","CreatedAt":"2017-10-09T17:00:56","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7788","RelatedDescription":"Closed issue \"dotnet restore fails with private feeds on MacOS Sierra\" (#7788) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n- Create a private feed on VSTS;\r\n- Clone VSTS' Git repository;\r\n- Configure `NuGet.config` accordingly:\r\n```\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<configuration>\r\n  <packageSources>\r\n    <clear/>\r\n    <add key=\"MyPrivateFeed\" value=\"https://{myPrivateRepo}.pkgs.visualstudio.com/_packaging/{MyPackages}/nuget/v3/index.json\"/>\r\n  </packageSources>\r\n</configuration>\r\n```\r\n- Call `dotnet restore`\r\n\r\n## Expected  behavior\r\nI should be able to restore my private feeds' packages. It works fine in a similar Windows environment.\r\n\r\n## Actual behavior\r\nI'm unable to restore packages from our private VSTS feeds when I call `dotnet restore`:\r\n\r\n```\r\n  Restoring packages for /Users/Marie-Francoise/Felix/Git/AutoVu.SaaS.Ptms.DataShareService/src/AutoVu.SaaS.Ptms.Dss.Business.Abstractions/AutoVu.SaaS.Ptms.Dss.Business.Abstractions.csproj...\r\n  Restoring packages for /Users/Marie-Francoise/Felix/Git/AutoVu.SaaS.Ptms.DataShareService/src/AutoVu.SaaS.Ptms.Dss.Business.Server/AutoVu.SaaS.Ptms.Dss.Business.Server.csproj...\r\n  Restoring packages for /Users/Marie-Francoise/Felix/Git/AutoVu.SaaS.Ptms.DataShareService/src/AutoVu.SaaS.Ptms.Dss.AzureFunctions/AutoVu.SaaS.Ptms.Dss.AzureFunctions.csproj...\r\n  Restoring packages for /Users/Marie-Francoise/Felix/Git/AutoVu.SaaS.Ptms.DataShareService/src/AutoVu.SaaS.Ptms.Dss.DataLayer/AutoVu.SaaS.Ptms.Dss.DataLayer.csproj...\r\n/usr/local/share/dotnet/sdk/2.0.0/NuGet.targets(102,5): error : Unable to load the service index for source https://autovurnd.pkgs.visualstudio.com/_packaging/AutoVuPackages/nuget/v3/index.json. [/Users/Marie-Francoise/Felix/Git/AutoVu.SaaS.Ptms.DataShareService/AutoVu.SaaS.Ptms.Dss.sln]\r\n/usr/local/share/dotnet/sdk/2.0.0/NuGet.targets(102,5): error :   Response status code does not indicate success: 401 (Unauthorized). [/Users/Marie-Francoise/Felix/Git/AutoVu.SaaS.Ptms.DataShareService/AutoVu.SaaS.Ptms.Dss.sln]\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\nOutils en ligne de commande .NET (2.0.0)\r\n\r\nProduct Information:\r\n Version:            2.0.0\r\n Commit SHA-1 hash:  cdcd1928c9\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.13\r\n OS Platform: Darwin\r\n RID:         osx.10.12-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/2.0.0/\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n```\r\n\r\n\r\n\r\n\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"6694208094","Type":"IssuesEvent","CreatedAt":"2017-10-10T00:19:47","Actor":"danmosemsft","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/524","RelatedDescription":"Closed issue \"After the final release of .Net Standard 2.0 and .Net Core 2.0, what are the missing 43 API that not implemented in net461?\" (#524) at dotnet/standard","RelatedBody":"I read the discussion:\r\n[Understanding why there is no cleaner way than .NET Framework 4.6.1 supporting .NET Standard 2.0 #133](https://github.com/dotnet/standard/issues/133) and \r\n[What are the 43 APIs that are in .Net Standard 2.0 but not in .Net Framework 4.6.1?](https://stackoverflow.com/questions/43601101/what-are-the-43-apis-that-are-in-net-standard-2-0-but-not-in-net-framework-4-6)\r\nAnd find that these 43 API are not documented anywhere on the Internet, so I ask:\r\n\r\n- What are the missing 43 API that is not implemented in net461?\r\n- How to avoid their usage in net461 (before firing exceptions in unit test)?\r\n- Can we get a browser like [.NET API Browser](https://docs.microsoft.com/en-us/dotnet/api/) or tool in github  that mention frankly these API?\r\n- Can  multi target project (netstandard2,net461) protect against the usage of these 43 API?\r\n"},{"Id":"6693454918","Type":"PullRequestEvent","CreatedAt":"2017-10-09T20:25:02","Actor":"joperezr","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/531","RelatedDescription":"Merged pull request \"Updating to 2.0.0 RTM CLI\" (#531) at dotnet/standard","RelatedBody":"cc: @eerhardt @weshaggard \r\n\r\nUpdating Standard repo to 2.0 CLI on the dev/release/2.0 branch"},{"Id":"6692887807","Type":"PullRequestEvent","CreatedAt":"2017-10-09T18:05:23","Actor":"joperezr","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/531","RelatedDescription":"Opened pull request \"Updating to 2.0.0 RTM CLI\" (#531) at dotnet/standard","RelatedBody":"cc: @eerhardt @weshaggard \r\n\r\nUpdating Standard repo to 2.0 CLI on the dev/release/2.0 branch"},{"Id":"6690571613","Type":"IssuesEvent","CreatedAt":"2017-10-09T09:38:48","Actor":"gyeesoft","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/530","RelatedDescription":"Closed issue \"KeyedHashAlgorithm.Create(\"HMACSHA1\") throw \"Operation is not supported on this platform \" Exception\" (#530) at dotnet/standard","RelatedBody":".net standard 2.0 , The following code throw Operation is not supported on this platform exception。\r\n\r\nusing (var algorithm = KeyedHashAlgorithm.Create(\"HMACSHA1\"))\r\n{\r\n//... some codes\r\n}"},{"Id":"6690514515","Type":"IssuesEvent","CreatedAt":"2017-10-09T09:25:22","Actor":"gyeesoft","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/530","RelatedDescription":"Opened issue \"KeyedHashAlgorithm.Create(\"HMACSHA1\") throw \"Operation is not supported on this platform \" Exception\" (#530) at dotnet/standard","RelatedBody":".net standard 2.0 , The following code throw Operation is not supported on this platform exception。\r\n\r\nusing (var algorithm = KeyedHashAlgorithm.Create(\"HMACSHA1\"))\r\n{\r\n//... some codes\r\n}"},{"Id":"6689316337","Type":"IssuesEvent","CreatedAt":"2017-10-09T00:46:43","Actor":"Petermarcu","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/528","RelatedDescription":"Closed issue \".Close() on TcpClient & Socket missing for some platforms\" (#528) at dotnet/standard","RelatedBody":"@danielgerlag commented on [Mon Sep 11 2017](https://github.com/dotnet/core/issues/956)\n\n# .Close() on TcpClient & Socket missing for some platforms\r\n\r\n.Close() on TcpClient & Socket (System.Net.Sockets) is available in .net standard 2.0, only if compiling on a Windows machine... if I try compile on a Mac, these methods are missing.\r\nAlso, have to explicitly reference `System.Net.Sockets` when building from the Mac.\r\n\r\n# General\r\n\r\n.NET Standard 2.0\r\nWindows 10 vs. MacOS\r\n\n\n---\n\n@Petermarcu commented on [Thu Oct 05 2017](https://github.com/dotnet/core/issues/956#issuecomment-334622113)\n\n@weshaggard, we use the same ref's in both cases don't we? Any idea what may be going on?\n\n---\n\n@weshaggard commented on [Fri Oct 06 2017](https://github.com/dotnet/core/issues/956#issuecomment-334810208)\n\nYes we use the same ref everywhere when targeting netstandard20. @danielgerlag can you share more of how you are building? \r\n\r\nClose should be available on both of those types when targeting netstandard20\n\n"},{"Id":"6685680055","Type":"IssuesEvent","CreatedAt":"2017-10-06T23:45:39","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/529","RelatedDescription":"Opened issue \".NET Standard and Click Once\" (#529) at dotnet/standard","RelatedBody":"## Summary\r\n\r\nThere is currently a bug that prevents ClickOnce setups from correctly deploying all the necessary .NET Standard support files. But you can work this around by editing your project file.\r\n\r\n## Symptoms and root cause\r\n\r\nRunning the application from inside of Visual Studio succeeds, so does publishing and installing. But when the application is launched, it crashes with with an exception [like this one](https://github.com/dotnet/core/issues/1010):\r\n\r\n> Unable to initialize the application (Could not load file or assembly 'System.Runtime, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The System cannot find the file specified.\r\n\r\nThe root cause is bug in the way ClickOnce discovers and packages dependencies from the application project.\r\n\r\n## Workaround\r\n\r\nIn order to make sure the right files are added to your installer, you need to add a custom target to your project file:\r\n\r\n1. Right click your project and select **Unload Project**.\r\n2. Then, right click your project again and select **Edit \\<your project\\>**.\r\n3. Locate the first `<Import>` element and copy & paste the code from below before the `<Import>` element.\r\n4. Right click your project and select **Reload Project**\r\n\r\n```xml\r\n  <ItemGroup>\r\n    <PublishFile Include=\"netfx.force.conflicts\">\r\n      <Visible>False</Visible>\r\n      <PublishState>Exclude</PublishState>\r\n      <IncludeHash>True</IncludeHash>\r\n      <FileType>Assembly</FileType>\r\n    </PublishFile>\r\n  </ItemGroup>\r\n  <Target Name=\"FixClickOnceDependencies\" BeforeTargets=\"_DeploymentComputeClickOnceManifestInfo\">\r\n    <ItemGroup>\r\n      <_noCopyRefs Include=\"@(ReferencePath)\" Condition=\"'%(ReferencePath.Private)' == 'false'\" />\r\n      <_noCopyRefsByFileName Include=\"@(_noCopyRefs->'%(FileName)')\">\r\n        <OriginalItem>%(Identity)</OriginalItem>\r\n      </_noCopyRefsByFileName>\r\n      <_libByFileName Include=\"@(ReferenceCopyLocalPaths->'%(FileName)')\">\r\n        <OriginalItem>%(Identity)</OriginalItem>\r\n      </_libByFileName>\r\n      <_overlappingRefByFileName Include=\"@(_noCopyRefsByFileName)\" Condition=\"'@(_noCopyRefsByFileName)' == '@(_libByFileName)' AND '%(Identity)' != ''\" />\r\n      <_overlappingLibByFileName Include=\"@(_libByFileName)\" Condition=\"'@(_noCopyRefsByFileName)' == '@(_libByFileName)' AND '%(Identity)' != ''\" />\r\n      <_overlappingRef Include=\"@(_overlappingRefByFileName->'%(OriginalItem)')\" />\r\n      <_overlappingLib Include=\"@(_overlappingLibByFileName->'%(OriginalItem)')\" />\r\n    </ItemGroup>\r\n    <ItemGroup Condition=\"'@(_overlappingRef)' != ''\">\r\n      <ReferencePath Remove=\"@(_overlappingRef)\" />\r\n      <ReferencePath Include=\"@(_overlappingLib)\">\r\n        <Private>True</Private>\r\n      </ReferencePath>\r\n    </ItemGroup>\r\n  </Target>\r\n```"},{"Id":"6685025919","Type":"IssuesEvent","CreatedAt":"2017-10-06T20:06:21","Actor":"Petermarcu","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/528","RelatedDescription":"Opened issue \".Close() on TcpClient & Socket missing for some platforms\" (#528) at dotnet/standard","RelatedBody":"@danielgerlag commented on [Mon Sep 11 2017](https://github.com/dotnet/core/issues/956)\n\n# .Close() on TcpClient & Socket missing for some platforms\r\n\r\n.Close() on TcpClient & Socket (System.Net.Sockets) is available in .net standard 2.0, only if compiling on a Windows machine... if I try compile on a Mac, these methods are missing.\r\nAlso, have to explicitly reference `System.Net.Sockets` when building from the Mac.\r\n\r\n# General\r\n\r\n.NET Standard 2.0\r\nWindows 10 vs. MacOS\r\n\n\n---\n\n@Petermarcu commented on [Thu Oct 05 2017](https://github.com/dotnet/core/issues/956#issuecomment-334622113)\n\n@weshaggard, we use the same ref's in both cases don't we? Any idea what may be going on?\n\n---\n\n@weshaggard commented on [Fri Oct 06 2017](https://github.com/dotnet/core/issues/956#issuecomment-334810208)\n\nYes we use the same ref everywhere when targeting netstandard20. @danielgerlag can you share more of how you are building? \r\n\r\nClose should be available on both of those types when targeting netstandard20\n\n"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"6694768082","Type":"PullRequestEvent","CreatedAt":"2017-10-10T04:19:01","Actor":"danmosemsft","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/24532","RelatedDescription":"Merged pull request \"Update BuildTools, CoreFx, ProjectNTfs, ProjectNTfsTestILC to prerelease-02110-01, preview1-25810-01, beta-25810-00, beta-25810-00, respectively (master)\" (#24532) at dotnet/corefx","RelatedBody":""},{"Id":"6694751487","Type":"IssuesEvent","CreatedAt":"2017-10-10T04:10:43","Actor":"wfurt","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/24538","RelatedDescription":"Opened issue \"FreeBSD: System.Drawing.Printing tests are failing\" (#24538) at dotnet/corefx","RelatedBody":"=== TEST EXECUTION SUMMARY ===\r\n   System.Drawing.Common.Tests  Total: 1731, Errors: 0, Failed: 31, Skipped: 1327, Time: 1.415s\r\n~/git/corefx/bin/tests/System.Drawing.Common.Tests/netcoreapp-FreeBSD-Debug-x64\r\n \r\n     ---- System.TypeInitializationException : The type initializer for 'System.Drawing.Printing.LibcupsNative' threw an exception.\r\n      -------- System.DllNotFoundException : Unable to load DLL 'libdl': The specified module or one of its dependencies could not be found.\r\n       (Exception from HRESULT: 0x8007007E)\r\n      Stack Trace:\r\n         /home/furt/git/wfurt2-corefx/src/System.Drawing.Common/src/System/Drawing/Printing/PrintingServices.Unix.cs(88,0): at System.Drawing.Printing.PrintingServices.get_DefaultPrinter()\r\n         /home/furt/git/wfurt2-corefx/src/System.Drawing.Common/src/System/Drawing/Printing/PrinterSettings.Unix.cs(70,0): at System.Drawing.Printing.PrinterSettings..ctor()\r\n         /home/furt/git/wfurt2-corefx/src/System.Drawing.Common/tests/Printing/PrinterSettingsTests.cs(224,0): at System.Drawing.Printing.Tests.PrinterSettingsTests.MaximumPage_SetValue_ReturnsExpected(Int32 maximumPage)\r\n         ----- Inner Stack Trace -----\r\n         /home/furt/git/wfurt2-corefx/src/System.Drawing.Common/src/System/Drawing/Printing/LibcupsNative.cs(44,0): at System.Drawing.Printing.LibcupsNative.cupsGetDefault()\r\n         /home/furt/git/wfurt2-corefx/src/System.Drawing.Common/src/System/Drawing/Printing/PrintingServices.Unix.cs(107,0): at System.Drawing.Printing.PrintingServices.CheckCupsInstalled()\r\n         /home/furt/git/wfurt2-corefx/src/System.Drawing.Common/src/System/Drawing/Printing/PrintingServices.Unix.cs(64,0): at System.Drawing.Printing.PrintingServices..cctor()\r\n         ----- Inner Stack Trace -----\r\n            at Interop.Libdl.dlopen(String fileName, Int32 flag)\r\n         /home/furt/git/wfurt2-corefx/src/System.Drawing.Common/src/System/Drawing/Printing/LibcupsNative.cs(17,0): at System.Drawing.Printing.LibcupsNative.LoadLibcups()\r\n         /home/furt/git/wfurt2-corefx/src/System.Drawing.Common/src/System/Drawing/Printing/LibcupsNative.cs(12,0): at System.Drawing.Printing.LibcupsNative..cctor()\r\n\r\n\r\nThis is because FreeBSD has dlopen in libc instead of libdl. \r\nThis may be simple as updating src/Common/src/Interop/Unix/Interop.Libraries.cs\r\nlibcups.so seems to exit but no testing has been done.\r\n\r\nThis is part of https://github.com/dotnet/corefx/issues/1626\r\n\r\n "},{"Id":"6694577032","Type":"IssuesEvent","CreatedAt":"2017-10-10T02:56:35","Actor":"Jiayili1","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/24537","RelatedDescription":"Opened issue \"System.ComponentModel.Tests.AsyncOperationFinalizerTests.Finalizer_OperationNotCompleted_CompletesOperation failed in CI\" (#24537) at dotnet/corefx","RelatedBody":"Failed test: System.ComponentModel.Tests.AsyncOperationFinalizerTests.Finalizer_OperationNotCompleted_CompletesOperation \r\n\r\nConfiguration: osx10.12_debug\r\n\r\nDetail: https://ci.dot.net/job/dotnet_corefx/job/master/job/osx10.12_debug/3273/testReport/System.ComponentModel.Tests/AsyncOperationFinalizerTests/Finalizer_OperationNotCompleted_CompletesOperation/\r\n\r\nMESSAGE:\r\n~~~\r\nExit code was 131 but it should have been 42\\nExpected: True\\nActual: False\r\n~~~\r\nSTACK TRACE:\r\n~~~\r\nat System.Diagnostics.RemoteExecutorTestBase.RemoteInvokeHandle.Dispose() in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx10.12_debug/src/CoreFx.Private.TestUtilities/src/System/Diagnostics/RemoteExecutorTestBase.cs:line 191 \r\nat System.ComponentModel.Tests.AsyncOperationFinalizerTests.Finalizer_OperationNotCompleted_CompletesOperation() in /Users/dotnet-bot/j/workspace/dotnet_corefx/master/osx10.12_debug/src/System.ComponentModel.EventBasedAsync/tests/AsyncOperationFinalizerTests.cs:line 42\r\n~~~"},{"Id":"6694520401","Type":"PullRequestEvent","CreatedAt":"2017-10-10T02:33:18","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/24536","RelatedDescription":"Opened pull request \"Fix hang when SmtpClient.SendAsync fails to connect\" (#24536) at dotnet/corefx","RelatedBody":"If Send{Mail}Async fails to connect, an exception gets thrown/eaten, and the completion callback is never invoked / the returned Task is never completed.\r\n\r\n(Ignore the first commit; it's just #24521, which this builds upon.  I'll squash it away when merging this.)\r\ncc: @Priya91"},{"Id":"6694343101","Type":"PullRequestEvent","CreatedAt":"2017-10-10T01:18:33","Actor":"maryamariyan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/24535","RelatedDescription":"Opened pull request \"Improve messaging when odbc dependency is not installed\" (#24535) at dotnet/corefx","RelatedBody":""}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"6694891585","Type":"IssuesEvent","CreatedAt":"2017-10-10T05:18:56","Actor":"abhijitparkhi1983","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22596","RelatedDescription":"Closed issue \"Visual Studios 2013 Roslyn code Extension Exception: Could not load file or assembly Microsoft.VisualStudio.LanguageServices Version 1.3.1.0\" (#22596) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\n1.3.1.0\r\nVisual Studios 2013\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. We want to get a reference to the current solution in a solution opened using Visual Studios 2013. \r\n2. For this purpose, we are creating a Visual Studios 2013 Extension Project.\r\n3. In the extension project, we use following  code to get a reference to the current solution:\r\n```\r\nvar componentModel =                  (IComponentModel)Microsoft.VisualStudio.Shell.Package.GetGlobalService(typeof(SComponentModel));\r\n\r\nVisualStudioWorkspace workspace = componentModel.GetService<VisualStudioWorkspace>();\r\n\r\nSolution solution = workspace.CurrentSolution;\r\n```\r\n4. We have added a nugget reference to **Microsoft.VisualStudio.LanguageServices** Version **1.3.1.0**. \r\nThis package installs the required **Microsoft.CodeAnalysis** Version **1.3.1.0** and other required packages.\r\n5. When we run the Extension project in debug mode or installed mode and when the code flow reaches the above code lines, we get an exception **Could not load file or assembly Microsoft.VisualStudio.LanguageServices** Version **1.3.1.0**.\r\n\r\nNote: \r\n1. My assumption is that the base version of Roslyn for plugin code to work in VS 2013 context is version 1.3.1.0. May be my assumption could be a problem and we probably would require further older version. But I am not sure about it.\r\n2. I have checked if the dlls emitted with the .vsix package have the required version and it looks all good.\r\n\r\n\r\n**Expected Behavior**:\r\nThe above code should work and return the reference to the current solution successfully.\r\n\r\n**Actual Behavior**:\r\nException: Could not load file or assembly 'Microsoft.VisualStudio.LanguageServices, Version=1.3.1.0' or one of its dependencies. The system cannot find the file specified. "},{"Id":"6694779591","Type":"PullRequestEvent","CreatedAt":"2017-10-10T04:24:32","Actor":"mavasani","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22498","RelatedDescription":"Merged pull request \"Ensure that we throw the CLR's InsufficientExecutionStackException in…\" (#22498) at dotnet/roslyn","RelatedBody":"…stead of CancelledByStackGuardException\r\n\r\nAs the rewriter is being invoked from the OperationFactory, which is accessible from the public API `SemanticModel.GetOperation`, we prefer to throw the CLR InsufficientExecutionStackException instead of compiler's internal CancelledByStackGuardException.\r\n\r\nFixes #22193"},{"Id":"6694779582","Type":"IssuesEvent","CreatedAt":"2017-10-10T04:24:31","Actor":"mavasani","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22193","RelatedDescription":"Closed issue \"Revisit use of BoundTreeRewriterWithStackGuard in VisualBasicOperationFactory_QueryLambdaRewriter.vb\" (#22193) at dotnet/roslyn","RelatedBody":"See https://github.com/dotnet/roslyn/pull/21356#discussion_r139535884"},{"Id":"6694651854","Type":"IssuesEvent","CreatedAt":"2017-10-10T03:27:10","Actor":"ericmutta","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22627","RelatedDescription":"Opened issue \"VB: Editor should not automatically remove digit grouping character for decimal literals.\" (#22627) at dotnet/roslyn","RelatedBody":"**Version Used**:\r\n\r\nVisual Studio Community 2017 v15.3.3\r\n\r\n**Steps to Reproduce**:\r\n\r\nTry typing this in any VB project `Dim num = 12_000.29`. The editor automatically removes the `_`  digit grouping character. But if you type `Dim num = 12_000` it remains. Not sure why it does this since it doesn't appear to be a syntax error (Immediate window evals it just fine):\r\n\r\n![vs_digit_seperator](https://user-images.githubusercontent.com/20465797/31368037-d647a11c-ad83-11e7-9628-f83c9237cf95.png)\r\n\r\n\r\n**Expected Behavior**:\r\n\r\nThe editor should leave decimal literals with digit grouping characters as is, otherwise you can type things like `12_000_000` but can't do `12_000_000.998` which makes no sense to me (unless I am overlooking something)."},{"Id":"6694199254","Type":"PullRequestEvent","CreatedAt":"2017-10-10T00:16:02","Actor":"jasonmalinowski","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22622","RelatedDescription":"Merged pull request \"merge master into Dev15.5.x\" (#22622) at dotnet/roslyn","RelatedBody":"merge master into Dev15.5.x\r\n\r\n@jasonmalinowski "}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"6694894978","Type":"PullRequestEvent","CreatedAt":"2017-10-10T05:20:26","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4696","RelatedDescription":"Merged pull request \"Fix building with prerelease VS versions\" (#4696) at dotnet/corert","RelatedBody":"Add the -prelease switch to vswhere in build scripts to allow them to find prerelease versions of Visual Studio. This fixes building on a machine that only has C++ installed in a preview build of VS 2017."},{"Id":"6694690947","Type":"PullRequestEvent","CreatedAt":"2017-10-10T03:43:57","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4693","RelatedDescription":"Merged pull request \"Implement dup IL instruction\" (#4693) at dotnet/corert","RelatedBody":"Fixes #4513 "},{"Id":"6694690938","Type":"IssuesEvent","CreatedAt":"2017-10-10T03:43:57","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/4513","RelatedDescription":"Closed issue \"Implement dup opcode\" (#4513) at dotnet/corert","RelatedBody":"Implement the dup opcode, which duplicates the top object on the execution stack. Handling for the dup opcode goes in\r\nhttps://github.com/dotnet/corert/blob/e6d0a9398e3d8fc83d047cccda302ed13610f190/src/ILCompiler.WebAssembly/src/CodeGen/ILToWebAssemblyImporter.cs#L494"},{"Id":"6694657180","Type":"PullRequestEvent","CreatedAt":"2017-10-10T03:29:27","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4696","RelatedDescription":"Opened pull request \"Fix building with prerelease VS versions\" (#4696) at dotnet/corert","RelatedBody":"Add the -prelease switch to vswhere in build scripts to allow them to find prerelease versions of Visual Studio. This fixes building on a machine that only has C++ installed in a preview build of VS 2017."},{"Id":"6694409252","Type":"PullRequestEvent","CreatedAt":"2017-10-10T01:46:36","Actor":"stephentoub","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4686","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#4686) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"6689551147","Type":"PullRequestEvent","CreatedAt":"2017-10-09T03:10:58","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4695","RelatedDescription":"Opened pull request \"WebAssembly instance method support\" (#4695) at dotnet/corert","RelatedBody":"Implements instance method support for WebAssembly. String.Length now works (there aren't many testable instance methods since we don't have newobj yet). By doing this, many more methods start compiling, so I had to fix bugs related to those.\r\n\r\nIncludes:\r\n* Fixing instance method 'this' parameter handling\r\n* Correcting method names to include their types since LLVM was treating all methods with the same short name as the same method\r\n* Implementing ldfld for instance fields. Fixes #4530 \r\n* Implementing leave opcode to fix bad codegen that made LLVM fail compilation\r\n* Creating trap stubs for RuntimeImport methods since we can't build the runtime yet, but ignoring them would fail compilation\r\n"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"916703209548214272","CreatedAt":"2017-10-07T16:34:11+00:00","UserScreenname":"dotnet","Text":"Join @terrajobst at his fire place for a story about .NET Standard versioning. https://t.co/8JAOGpk0Pm","Source":"<a href=\"http://twitter.com/#!/download/ipad\" rel=\"nofollow\">Twitter for iPad</a>","RetweetCount":48,"FavoriteCount":26,"RawContent":null},{"Id":"912821941706268673","CreatedAt":"2017-09-26T23:31:24+00:00","UserScreenname":"dotnet","Text":"Build a web service with F# and .NET Core 2.0 https://t.co/2jSgo1gbty","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":112,"FavoriteCount":64,"RawContent":null}]}},"RunOn":"2017-10-10T05:30:19.3505857Z","RunDurationInMilliseconds":7027}