{"Data":{"GitHubIssues":{"Issues":[{"Id":"379314203","IsPullRequest":false,"CreatedAt":"2018-11-09T22:16:22","Actor":"PaulOst","Number":"1657","RawContent":null,"Title":"Using D3.js with Blazor.","State":"closed","Body":"@danroth27 @SteveSandersonMS I would like to incorporate the popular D3 library into a prototype blazor app. Is that possible using JS Interop? If so, how? Thanks in advance!","Url":"https://github.com/aspnet/Blazor/issues/1657","RelatedDescription":"Closed issue \"Using D3.js with Blazor.\" (#1657)"},{"Id":"379260578","IsPullRequest":false,"CreatedAt":"2018-11-09T21:56:19","Actor":"mikewodarczyk","Number":"1656","RawContent":null,"Title":"Select Multiple not rendering correct selections when updating during async callback","State":"closed","Body":"I have 2 select list with multiple set on both of them.  They are linked so that each acts as a filter for the other, kind of like how Excel's filter works.  When I select 2 options and apply the filter (which calls back and updates the list), my 2 selected options are selected, but another 2 random options are selected.  I can see from the logging that only my 2 selected options were set, but when I query the select through JS interop, I can see that 4 options are selected.  \r\n\r\n\r\nI am attaching the full solution.  \r\nRun the BlazorLinkedMultiSelectDemo.Server,\r\nClick the FirstName's \"Andy\" and \"Jeff\"\r\nClick Apply.\r\n\"Andy\" and \"Jeff\" stay selected, but also \"Annie\" and \"Julie\" appear as selected. Actually, the list starts with just \"Andy\" and \"Jeff\" selected, but less than a second later \"Annie\" and \"Julie\" get selected.  I cannot tell if the log messages below come out before or after \"Annie\" and \"Julie\" are selected.\r\n\r\nMy logging shows as the last messages:\r\nWASM: FirstName HTML Update writing NOT selected option Alexa \r\nWASM: FirstName HTML Update writing NOT selected option Andrew \r\nWASM: FirstName HTML Update writing selected option Andy \r\nWASM: FirstName HTML Update writing NOT selected option Annie \r\nWASM: FirstName HTML Update writing NOT selected option Janice \r\nWASM: FirstName HTML Update writing selected option Jeff \r\nWASM: FirstName HTML Update writing NOT selected option Jerry \r\nWASM: FirstName HTML Update writing NOT selected option Julie \r\nWASM: FirstName HTML Update writing NOT selected option Sam \r\nWASM: FirstName HTML Update writing NOT selected option Sarah \r\nWASM: FirstName HTML Update writing NOT selected option Shelly \r\nWASM: FirstName HTML Update writing NOT selected option Steve\r\n\r\nSo, I am not setting \"Annie\" and \"Julie\"\r\n\r\nThe code snipped that renders the select looks like this:\r\n\r\n    <select ref=\"sel\" multiple=\"multiple\" onchange=\"@SelectionChanged\"  style=\"height: 10rem;\">\r\n              @foreach (string s in ToFilteredStringList())\r\n                {\r\n                    if (selections.Contains(s))\r\n                    {\r\n                           Console.WriteLine(Title + \" HTML Update writing selected option \" + s);\r\n                           <option value=\"@s\" selected=\"selected\">@s</option>\r\n                     }\r\n                    else\r\n                    {\r\n                          Console.WriteLine(Title + \" HTML Update writing NOT selected option \" + s);\r\n                          <option value=\"@s\">@s</option>\r\n                     }\r\n                }\r\n      </select>\r\n\r\n\r\n\r\n[BlazorLinkedMultiSelectDemo.zip](https://github.com/aspnet/Blazor/files/2566953/BlazorLinkedMultiSelectDemo.zip)\r\n","Url":"https://github.com/aspnet/Blazor/issues/1656","RelatedDescription":"Closed issue \"Select Multiple not rendering correct selections when updating during async callback\" (#1656)"},{"Id":"377051963","IsPullRequest":false,"CreatedAt":"2018-11-09T18:12:12","Actor":"Knudel","Number":"1635","RawContent":null,"Title":"Using C# expression in event handler attribute value breaks compilation","State":"closed","Body":"When you pass a c# property to a javacript function you get an error.\r\n\r\nSample:\r\n\r\nI created a Blazor server side project.\r\nI include a javascript file with a function:\r\n\r\n```\r\nfunction doAlert(str) {\r\n    alert(str);\r\n}\r\n```\r\n\r\n\r\nThen I create a blazor view like this:\r\n\r\n\r\n```\r\n@page \"/\"\r\n\r\n<button onclick=\"doAlert(@message)\">Click me</button>\r\n\r\n@functions\r\n{\r\n\r\n    public string message { get; set; } = \"Hello World!!!!\";\r\n\r\n}\r\n\r\n```\r\n\r\nWhen compiling I get the error:\r\n\r\nError\tCS1525\tInvalid expression term ')'\t\r\n\r\n\r\n","Url":"https://github.com/aspnet/Blazor/issues/1635","RelatedDescription":"Closed issue \"Using C# expression in event handler attribute value breaks compilation\" (#1635)"},{"Id":"379223093","IsPullRequest":true,"CreatedAt":"2018-11-09T16:09:21","Actor":"SteveSandersonMS","Number":"1655","RawContent":null,"Title":"Handle overlapping events","State":"open","Body":"This is to fix the general issue with server-side Blazor that the client can trigger events more rapidly than they get processed and the results flushed back to the client. A typical scenario would be when the user is typing and triggering `input` events on each keystroke.\r\n\r\nPreviously, if the client triggered the same event multiple times in quick succession, then the server might handle the first instance by re-rendering a component and hence disposing an event handler, then it might try to process the next instance and fail because the event handler was already disposed.\r\n\r\nWith this PR, the server delays the event handler disposals until it gets confirmation from the client that it's finished updating the UI with whatever renderbatch contains the disposal.\r\n\r\nThis should eliminate the issue, because once the client has updated the UI with whatever renderbatch contains the disposal, it can no longer legitimately try to trigger new instances of the event (the client knows it has gone from the UI). Also since client/server message delivery order is guaranteed, there's no way that an earlier event triggering message could come through *after* the client's message to confirm the completion of the renderbatch in which the event is disposed.","Url":"https://github.com/aspnet/Blazor/pull/1655","RelatedDescription":"Open PR \"Handle overlapping events\" (#1655)"},{"Id":"379188114","IsPullRequest":false,"CreatedAt":"2018-11-09T14:42:08","Actor":"grahamehorner","Number":"1654","RawContent":null,"Title":"IBlazorStartup","State":"open","Body":"IMHO the IBlazorStartup interface should be made public and the extension method UseBlazorStartup<T> should use the where T :  IBlazorStartup  constraint so to enforce contract; this would allow developers to create/extend the IBlazorStartup and discover the required methods via intellisence   ","Url":"https://github.com/aspnet/Blazor/issues/1654","RelatedDescription":"Open issue \"IBlazorStartup\" (#1654)"},{"Id":"379076641","IsPullRequest":false,"CreatedAt":"2018-11-09T11:47:19","Actor":"tidyui","Number":"1653","RawContent":null,"Title":"Why shouldn't parameters be public?","State":"closed","Body":"I'm building a composite application where you register the different fields your data-models can use at startup. \r\n\r\n    RegisterField<T>() where T : IField\r\n\r\nAs a result you also need to register the component that should handle the field in the Blazor App. To make sure that the component provides that basic functionality needed by the **generic** part of the app I want the component to also implement an interface using the `@implements` keyword.\r\n\r\n    RegisterFieldComponent<T> where T : IFieldComponent\r\n\r\nNaturally I want to include the mandatory parameters these components need to have for them to function **but** then the compiler throws a warning telling me that parameters shouldn't be public. As I can't get a good night sleep with compiler warnings in my projects this only leaves with the option to use an abstract base class instead of an interface **but** this feels a bit dodgy as I'm not really encapsulating any logic, I only want the components to fulfill a certain contract.\r\n\r\nWhat is the reason for the warning that parameters shouldn't be public? Help me get a good night sleep with a good motivation 😀\r\n\r\nBest regards","Url":"https://github.com/aspnet/Blazor/issues/1653","RelatedDescription":"Closed issue \"Why shouldn't parameters be public?\" (#1653)"},{"Id":"379060311","IsPullRequest":false,"CreatedAt":"2018-11-09T08:37:25","Actor":"chassq","Number":"1652","RawContent":null,"Title":"Question: Guidance on switch between server side and client side","State":"closed","Body":"Was wondering if anyone could point me to docs and/or discussion regarding how best to setup a blazor project to more readily switch between server-side to client-side. For example in client side every call to the server might need to use HttpClient while on the server-side one could make direct calls to a class or EF to get data. I guess some form of data abstraction with a switch of some kind when client or server is detected? Any nudge in the right direction would be greatly appreciated. Thanks!","Url":"https://github.com/aspnet/Blazor/issues/1652","RelatedDescription":"Closed issue \"Question: Guidance on switch between server side and client side\" (#1652)"},{"Id":"377162021","IsPullRequest":false,"CreatedAt":"2018-11-09T06:44:17","Actor":"marcelgoldstein","Number":"1637","RawContent":null,"Title":"Unable to bind property to input with type of datetime","State":"closed","Body":"A simpel binding to a datetime property does not work. Am I doing something wrong here?\r\nWithout binding the control seems to work properly.\r\n\r\nHere is a simplified code example with console-errors:\r\n![grafik](https://user-images.githubusercontent.com/32980128/47965681-30755e00-e04a-11e8-9d01-9d00e1f21112.png)\r\n![grafik](https://user-images.githubusercontent.com/32980128/47965809-04f37300-e04c-11e8-9644-738db8569756.png)\r\n\r\n\r\nWith type=\"date\":\r\n![grafik](https://user-images.githubusercontent.com/32980128/47965747-ee98e780-e04a-11e8-912e-112abf8cf769.png)\r\n![grafik](https://user-images.githubusercontent.com/32980128/47965763-3750a080-e04b-11e8-8cc6-7430eb7e4794.png)","Url":"https://github.com/aspnet/Blazor/issues/1637","RelatedDescription":"Closed issue \"Unable to bind property to input with type of datetime\" (#1637)"},{"Id":"378749266","IsPullRequest":true,"CreatedAt":"2018-11-08T14:14:21","Actor":"SteveSandersonMS","Number":"1651","RawContent":null,"Title":"Route events based on delegate target, not component ID","State":"open","Body":"This fixes multiple issues and potential areas of confusion related to event routing (in effect, the scenarios where you have to call `StateHasChanged` or not).\r\n\r\nPreviously, if one component passed an event handler (e.g., an `Action`, `Func<Task>`, `MulticastDelegate`, etc.) through to another component, either as a `[Parameter]` or simply by including it in some `ChildContent`, then when the event was fired it would be routed not to the component that owns the event handler, but the one that rendered it into the tree.\r\n\r\n### Example\r\n\r\nMyButton.cshtml:\r\n\r\n```\r\n<button onclick=@OnClick>Click me<button>\r\n@functions {\r\n    [Parameter] Action OnClick { get; set; }\r\n}\r\n```\r\n\r\nConsumer:\r\n\r\n```\r\n<MyButton OnClick=@SomeMethod /> or <MyButton OnClick=@(() => { clickCount++; }) />\r\n\r\nClicks: @clickCount\r\n\r\n@functions {\r\n    int clickCount = 0;\r\n\r\n    void SomeMethod()\r\n    {\r\n        clickCount++;\r\n    }\r\n}\r\n```\r\n\r\nYou'd expect that clicking the button would update the click count, but it wouldn't. You'd have to fix it by calling `StateHasChanged` manually in the consumer's `SomeMethod` or the lambda. This was annoying and confusing.\r\n\r\n### Example 2:\r\n\r\nPassthroughComponent.cshtml:\r\n\r\n```\r\n@ChildContent\r\n\r\n@functions {\r\n    [Parameter] RenderFragment ChildContent { get; set; }\r\n}\r\n```\r\n\r\nConsumer.cshtml:\r\n\r\n```\r\n<PassthroughComponent>\r\n    <button OnClick=@(() => { clickCount++; })>Click me</button>\r\n</PassthroughComponent>\r\n\r\nClicks: @clickCount\r\n\r\n@functions {\r\n    int clickCount = 0;\r\n}\r\n```\r\n\r\nAgain, clicking the button would seem to have no effect, unless you manually put `StateHasChanged` into the lambda.\r\n\r\n### Fix\r\n\r\nWe now route events to the component matching `eventHandlerDelegate.Target`, not the component that inserted the delegate into the render tree. This fixes both of the common cases above, and works with event handlers expressed as both methods and lambdas.\r\n\r\nThis also simplifies cases around binding. Components that expose custom bindables can now trigger updates in their consumers easily.\r\n\r\n### New API\r\n\r\nIn the case where a custom component wants to trigger a supplied event handler delegate indirectly (e.g., inside one of its own methods), there's now a public static API:\r\n\r\n```\r\nComponentEvents.InvokeEventHandler(someDelegate, eventArgs)\r\n```\r\n\r\nThis works with delegates that are `Action`, `Action<T>`, `Func<Task>`, `Func<T, Task>` (the fast paths), or arbitrary `MulticastDelgate` (slower path). It automatically causes the recipient to trigger its own re-rendering logic, including responses to async tasks (i.e., if it's a `Func<Task>`, then the recipient renders once synchronously, then again asynchronously after the task, just like normal event handlers).\r\n\r\n### Breaking change\r\n\r\nThere's one scenario where this may break something people were already doing, i.e., relying on the older strange behavior. Example:\r\n\r\n```\r\n<button onclick=@SomeOtherObject.SomeMethod>Click me</button>\r\n```\r\n\r\nPreviously, this would run `SomeOtherObject.SomeMethod` and then re-render the component. That might be useful if this method updated some global state that you read back during rendering.\r\n\r\nNow it will no longer re-render the component, because `SomeMethod` isn't on that component. If you actually do want to re-render the component in this case, the solution is to ensure you're actually calling one of its methods or lambdas, e.g.:\r\n\r\n```\r\n<button onclick=@(() => SomeOtherObject.SomeMethod())>Click me</button>\r\n```\r\n\r\nAlternatively, if you're actually updating some global state container, it's better still to have the state container raise some event that triggers all the necessary UI updates on all components, not just the one that raised the action.\r\n\r\nAlthough it's a slight drawback to have this breaking change, I still think this is the right thing to do. The new rules about when events update components are much simpler and easier to reason about (i.e., we re-render the component that owns the event handler method/lambda, regardless of who passed it where).","Url":"https://github.com/aspnet/Blazor/pull/1651","RelatedDescription":"Open PR \"Route events based on delegate target, not component ID\" (#1651)"},{"Id":"378420061","IsPullRequest":false,"CreatedAt":"2018-11-07T18:46:05","Actor":"scottsauber","Number":"1650","RawContent":null,"Title":"Reaction to React Hooks?","State":"open","Body":"Just wanted to open a discussion about the new React Hooks which was announced at ReactConf.  I reach for React when I do a SPA currently (although we have a non-critical IT only app we built in Blazor as well), and React Hooks have me pretty excited, because it groups similar logic together much like Feature Folders do for a folder structure.\r\n\r\n**Wrapper Hell**\r\n\r\n[One of the things they discussed](https://youtu.be/dpw9EHDh2bM?t=448) that React Hooks is solving is \"Wrapper Hell\" where you have tons of components nested beneath each other.  [Specifically they call out Context](https://youtu.be/dpw9EHDh2bM?t=1905), which is very close to how Cascading parameters work in Blazor with the `<CascadingValue>` wrapper component.\r\n\r\nCurious what the Blazor team thinks about this and if there are any thoughts around perhaps doing something similar to what the React team is moving to with Hooks and getting rid of the need for the wrapper component.\r\n\r\nMy quick thoughts would be something like making global state injectable instead of using a wrapped component... or having access to some grab bag off of the BlazorComponent base class where you could do something like `.Get<T>` and have it magically grab your value for you.  Those are my crappy 1 minute ideas, but feels like Blazor could do something similar to remove the need for the wrapper component and keep the component trees less nested and easier to follow.\r\n\r\n**React is getting rid of lifecycle methods**\r\n\r\n[React is also moving away from lifecycle methods](https://youtu.be/dpw9EHDh2bM?t=480) like componentDidMount (OnInit/OnInitAsync in Blazor).  They're mostly doing this so that setup (addEventListener) and cleanup (removeEventListener) is wired up in the same spot instead of separate lifecycle methods which led to bugs when you forgot to cleanup for instance.  Curious to hear other's thoughts on this and how it would apply to Blazor.  I personally haven't done any cleanup of my Blazor components, but maybe I'm causing a memory leak I don't know about.\r\n\r\nObviously it's very early days in React Hooks land, but the concepts behind them makes a lot of sense. \r\n Just wanted to generate some discussion.  Thanks!","Url":"https://github.com/aspnet/Blazor/issues/1650","RelatedDescription":"Open issue \"Reaction to React Hooks?\" (#1650)"},{"Id":"378395235","IsPullRequest":false,"CreatedAt":"2018-11-07T17:37:10","Actor":"fayezmm","Number":"1649","RawContent":null,"Title":"Build error when parameter and child component have the same name","State":"open","Body":"## Add support for `@tagHelperPrefix`\r\n\r\n### Problem\r\nCurrent implementation of Blazor v0.6.0 does not have support for Razor `@tagHelperPrefix`\r\n\r\n### Functional impact\r\nTrying to Include a child component inside a **RenderFragment** of a parent component where both the child and the **RenderFragment** have the same name will result in compile time error. \r\n\r\n### Minimal repro steps\r\n\r\nLet us suppose we have a component in `Panel.cshtml` as follows: \r\n\r\n```html\r\n<div class=\"panel panel-default\">\r\n  <div class=\"panel-heading\">@PanelHeader</div>\r\n  <div class=\"panel-body\">@PanelBody</div>\r\n</div>\r\n\r\n@functions{\r\n  [Parameter] private RenderFragment PanelHeader { get; set; }\r\n  [Parameter] private RenderFragment PanelBody { get; set; }\r\n}\r\n```\r\nand another component in `PanelHeader.cshtml` like this:\r\n\r\n```html\r\n<div>@Title</div>\r\n<div>@SubTitle</div>\r\n\r\n@functions{\r\n  [Parameter] private string Title { get; set; }\r\n  [Parameter] private string SubTitle { get; set; }\r\n}\r\n```\r\n\r\nthen using these two components in a page like below code will result in a compile time error: \r\n\r\n```html\r\n<Panel>\r\n  <PanelHeader>\r\n       <PanelHeader Title=\"some title\" SubTitle=\"sub title\"></PanelHeader>\r\n  </PanelHeader>\r\n  <PanelBody>Some content ...</PanelBody>\r\n<Panel>\r\n```\r\n\r\n### Proposal \r\n\r\nI would recommend to add support for `@tagHelperPrefix` so to simplify distinguishing components from RenderFragments. \r\n\r\nAbove code could then can be re-written as follows: \r\n\r\n`Panel.cshtml` would be like this:\r\n\r\n```html\r\n@tagHelperPrefix \"pre1:\"\r\n<div class=\"panel panel-default\">\r\n  <div  class=\"panel-heading\">@PanelHeader</div>\r\n  <div  class=\"panel-body\">@PanelBody</div>\r\n</div>\r\n\r\n@functions{\r\n  [Parameter] private RenderFragment PanelHeader { get; set; }\r\n  [Parameter] private RenderFragment PanelBody { get; set; }\r\n}\r\n``` \r\n\r\nAnd `PanelHeader.cshtml` would look like this:\r\n\r\n```html\r\n@tagHelperPrefix \"pre2:\"\r\n<div>@Title</div>\r\n<div>@SubTitle</div>\r\n\r\n@functions{\r\n  [Parameter] private string Title { get; set; }\r\n  [Parameter] private string SubTitle { get; set; }\r\n}\r\n```\r\n\r\nAnd finally both the child and the parent components can be used like this: \r\n\r\n```html\r\n<pre1:Panel>\r\n  <PanelHeader>\r\n       <pre2:PanelHeader Title=\"some title\" SubTitle=\"sub title\"></pre2:PanelHeader>\r\n  </PanelHeader>\r\n  <PanelBody>Some content ...</PanelBody>\r\n<pre1:Panel>\r\n```\r\n\r\n\r\n","Url":"https://github.com/aspnet/Blazor/issues/1649","RelatedDescription":"Open issue \"Build error when parameter and child component have the same name\" (#1649)"},{"Id":"378359138","IsPullRequest":false,"CreatedAt":"2018-11-07T16:14:01","Actor":"FeeSaver","Number":"1648","RawContent":null,"Title":"Dispose doesnt work when page is refreshed (server-side blazor)","State":"open","Body":"Hello I was trying to make the fetchdata example update values without refreshing page or clicking buttons. And I found out that I can use timer which seemed like working ok. But after testing with different data it was acting strange and I found out that page doesnt dispose the timer when I go to different page and its not displayed anymore. \r\nThat was solved by adding dispose but it didnt solve different issue.. When I press F5 while on /fetchdata page it reloads and doesnt dispose the timer. And then it runs twice. I tried it by adding int into ForecastService and it increment everytime GetForecastAsync is called. After 10 refreshes it increment +10 every second instead of +1. \r\nI hope it makes sense. \r\n\r\n```\r\n@functions {\r\nWeatherForecast[] forecasts;\r\nTimer timer;\r\nprivate async void Update()\r\n{\r\n    forecasts = await ForecastService.GetForecastAsync(DateTime.Now);\r\n    StateHasChanged();\r\n}\r\n\r\nprotected override async Task OnInitAsync()\r\n{\r\n    timer = new Timer(1000);\r\n    timer.Elapsed += (sender, args) => Update();\r\n    timer.Start();\r\n    Update();\r\n}\r\n\r\npublic void Dispose()\r\n{\r\n    timer.Dispose();\r\n}\r\n}\r\n```","Url":"https://github.com/aspnet/Blazor/issues/1648","RelatedDescription":"Open issue \"Dispose doesnt work when page is refreshed (server-side blazor)\" (#1648)"},{"Id":"378244295","IsPullRequest":true,"CreatedAt":"2018-11-07T12:01:51","Actor":"SteveSandersonMS","Number":"1647","RawContent":null,"Title":"Update to latest Mono (for 0.7.0 release)","State":"closed","Body":"As of this PR, we're now using Mono's prebuilt binaries instead of building custom ones for Blazor. This greatly simplifies the process of changing Mono versions.\r\n\r\nThis PR also drops the historical support for asm.js fallback. We're making this choice because better alternatives have now emerged for all the primary asm.js fallback scenarios:\r\n\r\n* For Safari, it now supports WebAssembly properly so there's no remaining need for asm.js fallback\r\n* For old browsers such as IE11, the best solution is server-side Blazor. This avoids putting heavy load on the browser, meaning you can get excellent compatibility and perf right back to really ancient versions of IE (given suitable JS polyfills). In the long run it wouldn't be realistic to rely on asm.js fallback because the JS engine in these older browsers typically wouldn't supply acceptable perf.\r\n\r\nThe reason we're making this change (removing asm.js fallback) now is that it's a necessary part of switching to use prebuilt Mono binaries (they don't ship asm.js versions).\r\n\r\n**Debugging improvements**\r\n\r\nThis PR also updates to a newer version of @kumpera's debug proxy. You can now remove breakpoints and step in/over properly 👍 ","Url":"https://github.com/aspnet/Blazor/pull/1647","RelatedDescription":"Closed or merged PR \"Update to latest Mono (for 0.7.0 release)\" (#1647)"},{"Id":"378059810","IsPullRequest":false,"CreatedAt":"2018-11-07T12:00:36","Actor":"AppiePau","Number":"1645","RawContent":null,"Title":"Singleton service property bound variable not updated in realtime","State":"closed","Body":"I can't find a similar issue and I'll do my best to explain. The point is that I find the behavior unexpected and like someone to explain what I might be doing wrong or it's just  a bug.\r\n\r\nSo I was writing an authentication mechanism with JWT tokens (wich works!) and thought it might be useful to put the user data (id, name, token) into a singleton object called AuthorizationContainer and register it as a singleton service. So then it is globally available for data binding (local db not yet implemented):\r\n\r\n````csharp\r\n public sealed class AuthenticationContainer\r\n{\r\n   public AuthenticationHeaderValue BearerToken { get; set; }\r\n   public bool IsAuthenticated { get; set; }\r\n}\r\n\r\npublic class Startup\r\n{\r\n   public void ConfigureServices(IServiceCollection services)\r\n   {\r\n      services.AddSingleton<AuthenticationContainer>();\r\n   }\r\n}\r\n`````\r\n\r\nThe following code uses the container and after authenticating through a form, the user is redirected to the home page.\r\n\r\n```cshtml\r\n@inject AuthenticationContainer auth;\r\n<ul class=\"nav flex-column\">\r\n<li class=\"nav-item px-3\">\r\n    <NavLink class=\"nav-link\" href=\"\" Match=NavLinkMatch.All>\r\n        <span class=\"oi oi-home\" aria-hidden=\"true\"></span> Home\r\n    </NavLink>\r\n</li>\r\n@if (auth.IsAuthenticated)\r\n{\r\n    <li class=\"nav-item px-3\">\r\n        <NavLink class=\"nav-link\" href=\"organizations\">\r\n             <span class=\"fa fa-building\" aria-hidden=\"true\"></span> Buildings\r\n         </NavLink>\r\n    </li>\r\n}\r\n@if (!auth.IsAuthenticated)\r\n{\r\n    <li class=\"nav-item px-3\">\r\n        <NavLink class=\"nav-link\" href=\"authentication\">\r\n            <span class=\"oi oi-key\" aria-hidden=\"true\"></span> Inloggen\r\n        </NavLink>\r\n    </li>\r\n}\r\n</ul>\r\n````\r\n\r\nAfter the user has been authenticated the IsAuthenticated property will be set to true, but nothing happens. Even after a redirect the menu items will not popup for the authenticated user. With some Angular experience I expect it to work.\r\n\r\nOnly after clicking manually on the home link, the items will apear. What is happening here? Does the framework not detect a property/reference change? Should I manually trigger an event (wich I would not prefer). ","Url":"https://github.com/aspnet/Blazor/issues/1645","RelatedDescription":"Closed issue \"Singleton service property bound variable not updated in realtime\" (#1645)"},{"Id":"378214064","IsPullRequest":false,"CreatedAt":"2018-11-07T09:51:40","Actor":"tidyui","Number":"1646","RawContent":null,"Title":"Passing object as parameter to component fails with implicit operator","State":"open","Body":"Consider the following code:\r\n\r\n    namespace MyModels\r\n    {\r\n        public interface IField \r\n        {\r\n            Guid Id { get; set; }\r\n        }\r\n    \r\n        public class StringField : IField\r\n        {\r\n            public Guid Id { get; set; }\r\n            public string Value { get; set; }\r\n\r\n            public static implicit operator string(StringField field)\r\n            {\r\n                return field.Value;\r\n            }\r\n        }\r\n    }\r\n\r\nI have a component for rendering a `StringField` in the UI that simplified looks like this:\r\n\r\n    <input type=\"text\" bind=\"@Data.Value\" />\r\n\r\n    @functions {\r\n        [Parameter]\r\n        private MyModels.StringField Data { get; set; }\r\n    }\r\n\r\nIn my main page I operate on a collection of `IField` objects. Trying to invoke the component like this fails as runtime. This has worked fine for all previous components that didn't have the implicit operator.\r\n\r\n    <StringField Data=\"@((MyModels.StringField)Field)\"></StringField>\r\n\r\nHowever changing the component to this and passing the param as an `IField` works just fine but is a bit messy.\r\n\r\n    <input type=\"text\" bind=\"@(((MyModels.StringField)Data).Value)\" />\r\n\r\n    @functions {\r\n        [Parameter]\r\n        private MyModels.IField Data { get; set; }\r\n    }\r\n\r\nIt looks like the implicit operator converts the param before trying to set it in runtime making the app break.","Url":"https://github.com/aspnet/Blazor/issues/1646","RelatedDescription":"Open issue \"Passing object as parameter to component fails with implicit operator\" (#1646)"},{"Id":"377990462","IsPullRequest":false,"CreatedAt":"2018-11-06T19:04:52","Actor":"tidyui","Number":"1644","RawContent":null,"Title":"Invoke Component by name instead of Tag","State":"open","Body":"It would be very helpful to be able to invoke a component by its **name** instead of its **tagname**. If I for example create the component:\r\n\r\n`~/Components/MyComponent.cshtml`\r\n\r\nthis is used from my page by writing.\r\n\r\n`<MyComponent></MyComponent>`\r\n\r\nConsider the use case where the data model I want to render using Blazor looks something like this:\r\n\r\n    public class MyDataModel\r\n    {\r\n        public IEnumerable<IField> Fields { get; set; }\r\n    }\r\n\r\nFields are registered through code at Startup, for example like this:\r\n\r\n    MyApp.Fields.Register<StringField>();\r\n    MyApp.Fields.Register<IntegerField>();\r\n\r\nwhere both `StringField` and `IntegerField` implement `IField`. When rendering the page I want these fields to be handled by the components `StringField.cshtml` and `IntegerField.cshtml` but **without** actually knowing which components are available (as these are registered at startup by the main application). This would require the option to invoke a component with a syntax similar to this (example):\r\n\r\n    @foreach (var field in Data.Fields)\r\n    {\r\n        @Component(field.GetType().Name, new { InputParamName = field })\r\n    }\r\n\r\nThis functionality would support the same use case as `@Html.Editor` does in MVC which is very useful for handling composite data models.\r\n\r\nBest regards","Url":"https://github.com/aspnet/Blazor/issues/1644","RelatedDescription":"Open issue \"Invoke Component by name instead of Tag\" (#1644)"},{"Id":"377795039","IsPullRequest":false,"CreatedAt":"2018-11-06T11:29:14","Actor":"maraf","Number":"1643","RawContent":null,"Title":"Page parameter value is not always cleared","State":"closed","Body":"Hi there.\r\nI have a page with optional parameter. The page contains links to itself with and without this parameter.\r\n\r\n```html\r\n@page  \"/test\"\r\n@page  \"/test/{parameter}\"\r\n<ul>\r\n    <li>\r\n        <a href=\"/test\">Without parameter</a>\r\n    </li>\r\n    <li>\r\n        <a href=\"/test/1\">With parameter value set to 1</a>\r\n    </li>\r\n    <li>\r\n        <a href=\"/test/2\">With parameter value set to 2</a>\r\n    </li>\r\n</ul>\r\n<p>\r\n    Current parameter value is <b>@(Parameter ?? \"<null>\")</b>\r\n</p>\r\n\r\n@functions\r\n{\r\n    [Parameter]\r\n    protected string Parameter { get; set; }\r\n}\r\n```\r\nWhen I click on the second link (with parameter) and than on the first one (without parameter), a value of property `Parameter` doesn't get cleared.\r\n\r\nI found a workaround in clearing property value before parameters are applied.\r\n```C#\r\npublic override void SetParameters(ParameterCollection parameters)\r\n{\r\n    Parameter = null;\r\n\r\n    base.SetParameters(parameters);\r\n}\r\n```\r\n\r\nIs it desired or it's a bug?\r\nI'm using Blazor 0.6.0.","Url":"https://github.com/aspnet/Blazor/issues/1643","RelatedDescription":"Closed issue \"Page parameter value is not always cleared\" (#1643)"},{"Id":"377763849","IsPullRequest":false,"CreatedAt":"2018-11-06T09:42:08","Actor":"SteveSandersonMS","Number":"1642","RawContent":null,"Title":"Make SignalR Service usage an aspect of deployment, not source code","State":"open","Body":"For Razor Components (currently, server-side Blazor), the decision to use Azure SignalR Service or not shouldn't be hardcoded into the app code. Ideally it would be something determined by the deployment mechanism.\r\n\r\nSomehow we need sufficient abstraction to remove this from the project source code. The tricky bit is that we don't want to bring in a dependency on `Microsoft.Azure.SignalR` for all projects, so I'm not sure how we solve this.\r\n\r\nI seem to recall that @DamianEdwards mentioned this is just a one example of a broader class of requirements to make service usage determined by the deployment/hosting mechanism. So perhaps this is not something we need to solve in this repo, because we're going to inherit a broader solution that applies to all services. CC @davidfowl.","Url":"https://github.com/aspnet/Blazor/issues/1642","RelatedDescription":"Open issue \"Make SignalR Service usage an aspect of deployment, not source code\" (#1642)"},{"Id":"377761276","IsPullRequest":false,"CreatedAt":"2018-11-06T09:35:33","Actor":"SteveSandersonMS","Number":"1641","RawContent":null,"Title":"Higher-level pattern for async data loading","State":"open","Body":"We've had an internal request to consider ways of loading data without having to implement the usual `if (data == null) { loading... } else { show data }` in the markup, possibly also without overriding `OnInitAsync` or similar to put in the load logic.\r\n\r\nSketch:\r\n\r\n```html\r\n<DataSource Url=\"people/@id\" TResult=Person>\r\n    <BeforeLoaded>Loading person @id...</BeforeLoaded>\r\n    <OnError>Sorry, there was a problem. The response was @context.StatusCode.</OnError>\r\n    <AfterLoaded Context=\"person\">\r\n        @person.Name is @person.Age years old\r\n    </AfterLoaded>\r\n</DataSource>\r\n```\r\n\r\nThis doesn't really have to be baked into the core, but we might want this to appear in the default project template.","Url":"https://github.com/aspnet/Blazor/issues/1641","RelatedDescription":"Open issue \"Higher-level pattern for async data loading\" (#1641)"},{"Id":"377316419","IsPullRequest":false,"CreatedAt":"2018-11-05T09:34:05","Actor":"robertsundstrom","Number":"1640","RawContent":null,"Title":"Unable to link with System.IdentityModel.Tokens.Jwt","State":"open","Body":"I added the ```System.IdentityModel.Tokens.Jwt``` package to my Blazor-project to handle JWT on the client. When building, I got the usual error about not being able to link because of dependencies, such as \"Semaphore\".\r\n\r\n```cmd\r\n3>TestApp.Client -> S:\\Downloads\\TestApp\\src\\TestApp.Client\\bin\\Debug\\netstandard2.0\\TestApp.Client.dll\r\n3>Cannot find declaration of exported type 'System.Threading.Semaphore' from the assembly 'System.Threading, Version=4.0.12.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'\r\n3>Fatal error in IL Linker\r\n3>Mono.Cecil.AssemblyResolutionException: Failed to resolve assembly: 'System.Private.DataContractSerialization, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'\r\n3>   at Mono.Linker.DirectoryAssemblyResolver.Resolve(AssemblyNameReference name, ReaderParameters parameters)\r\n3>   at Mono.Linker.AssemblyResolver.Resolve(AssemblyNameReference name, ReaderParameters parameters)\r\n3>   at Mono.Linker.DirectoryAssemblyResolver.Resolve(AssemblyNameReference name)\r\n3>   at Mono.Cecil.MetadataResolver.Resolve(TypeReference type)\r\n3>   at Mono.Linker.Steps.ResolveFromAssemblyStep.ProcessLibrary(LinkContext context, AssemblyDefinition assembly, RootVisibility rootVisibility)\r\n3>   at Mono.Linker.Steps.ResolveFromAssemblyStep.ProcessLibrary(AssemblyDefinition assembly)\r\n3>   at Mono.Linker.Steps.ResolveFromAssemblyStep.Process()\r\n3>   at Mono.Linker.Steps.BaseStep.Process(LinkContext context)\r\n3>   at Mono.Linker.Pipeline.ProcessStep(LinkContext context, IStep step)\r\n3>   at Mono.Linker.Pipeline.Process(LinkContext context)\r\n3>   at Mono.Linker.Driver.Run(ILogger customLogger)\r\n3>   at Mono.Linker.Driver.Execute(String[] args, ILogger customLogger)\r\n```\r\nIs there a way to get around this? What is preventing me from using the package?","Url":"https://github.com/aspnet/Blazor/issues/1640","RelatedDescription":"Open issue \"Unable to link with System.IdentityModel.Tokens.Jwt\" (#1640)"},{"Id":"377280599","IsPullRequest":false,"CreatedAt":"2018-11-05T07:33:35","Actor":"philipri","Number":"1639","RawContent":null,"Title":"Suggestion: 401 Redirect Helper","State":"open","Body":"With the way the HttpClient is working on client side Blazor it's actually super hard to intecept the HTTP errors (even with try/catch).\r\n\r\nIt would be great on the HttpClient DI Singleton if we could specify a route associated with common HTTP codes that it returns.\r\n\r\ne.g. on a 401 it might redirect to a login route or token refresh route etc.\r\neg. on a 500 it might show an error page etc.\r\n\r\nThese might be specified in the Startup (i.e. when the dependency is injected).\r\n\r\nAs a temp workaround I might try wrapping the current singleton - but it seems to be acting strangely (more debugging required by me).","Url":"https://github.com/aspnet/Blazor/issues/1639","RelatedDescription":"Open issue \"Suggestion: 401 Redirect Helper\" (#1639)"},{"Id":"377113133","IsPullRequest":false,"CreatedAt":"2018-11-05T05:45:22","Actor":"groogiam","Number":"1636","RawContent":null,"Title":"File System Functionality Question","State":"closed","Body":"Could you please provide some detail on the current implementation of the System.IO.FIle and Directory classes? Based on some initial testing it looks like these are currently ephemeral storage and are lost when the page is reloaded. I'm guessing the file data is just persisted to some data structure in memory. If this is the case is there any plans to potentially patch the file system api's through to browser storage (local,session or indexeddb). similar to what enscripten does https://kripken.github.io/emscripten-site/docs/api_reference/Filesystem-API.html. Thanks.","Url":"https://github.com/aspnet/Blazor/issues/1636","RelatedDescription":"Closed issue \"File System Functionality Question\" (#1636)"},{"Id":"377186713","IsPullRequest":false,"CreatedAt":"2018-11-04T19:41:02","Actor":"kswoll","Number":"1638","RawContent":null,"Title":"<option value=\"\"> incorrectly omits value attribute when body of option contains razor content","State":"open","Body":"What follows is a simple example that leverages HTML5 `required` for an HTML `<select>` element.  The idea is to force the user to choose a value from the dropdown when submitting the form.  A value must be provided to the first option that is the empty string.  (see https://stackoverflow.com/a/6048891/189950)  This works, but if the content of the option element is, for example, provided by a field, Blazor incorrectly omits the `value` attribute, which breaks validation (in Chrome and Edge, anyway).\r\n\r\nYou can see this behavior in the example.  The first select element tries to make the \"none\" option text provided by a field (`@noneString`) whereas the second select element just hard codes it to `None`.\r\n\r\nIf you run it, you'll notice that when clicking the submit button, it highlights the second select element as being required and ignores the first one.  If you simply replace `@noneString` with `None`, then it correctly validates the first select element as well.  (If you look at devtools and examine the first option element in the broken version, there is no `value` attribute present.)\r\n\r\n```\r\n@page \"/\"\r\n\r\n<form>\r\n    <p>\r\n        <select required size=\"1\">\r\n            <option value=\"\" selected>@noneString</option>\r\n            <option value=\"1\">1</option>\r\n            <option value=\"2\">2</option>\r\n        </select>\r\n    </p>\r\n    <p>\r\n        <select required size=\"1\">\r\n            <option value=\"\" selected>None</option>\r\n            <option value=\"1\">1</option>\r\n            <option value=\"2\">2</option>\r\n        </select>\r\n    </p>\r\n    \r\n    <input type=\"submit\" />\r\n</form>\r\n\r\n@functions {\r\n    string noneString = \"None\";\r\n}  \r\n```","Url":"https://github.com/aspnet/Blazor/issues/1638","RelatedDescription":"Open issue \"<option value=\"\"> incorrectly omits value attribute when body of option contains razor content\" (#1638)"},{"Id":"375726189","IsPullRequest":false,"CreatedAt":"2018-11-02T23:30:03","Actor":"AppiePau","Number":"1630","RawContent":null,"Title":"Binding  a select with an int? makes a page hang","State":"closed","Body":"With the following code, I'm able to let a page become unresponsive. \"details.CountryId\" is a Nullable<int> and the current value is null. Sometimes the page not updating and in other cases Chrome is becoming unresponsive and the tab must be closed.\r\n\r\nI could reproduce this scenerio on Windows (VS2017 18.8.8) and VS Code on MacOs Mojave. Whilst being aamazzed it is also running on MacOs! 😄 \r\n\r\nWhen countryId is an int and  for example 0, it will work fine.\r\n```html\r\n....\r\n<div class=\"form-group\">\r\n     <label for=\"recipientCountry\">Country</label>\r\n     <select id=\"recipientCountry\" class=\"form-control\" bind=\"@details.CountryId\">\r\n          <option value=\"0\">None</option>\r\n          <option value=\"1\">USA</option>\r\n          <option value=\"2\">Canada</option>\r\n     </select>\r\n</div>\r\n....\r\n```\r\n\r\n```csharp\r\n@functions {\r\n    [Parameter]\r\n    string Id { get; set; } \r\n\r\n    OrganizationDetailModel details;\r\n\r\n    protected override async Task OnInitAsync()\r\n    {\r\n        this.details = await Http.GetJsonAsync<OrganizationDetailModel>(\"api/organizations/\" + this.Id);\r\n    }\r\n}\r\n``` @ #","Url":"https://github.com/aspnet/Blazor/issues/1630","RelatedDescription":"Closed issue \"Binding  a select with an int? makes a page hang\" (#1630)"},{"Id":"376711681","IsPullRequest":false,"CreatedAt":"2018-11-02T23:18:23","Actor":"kingreatwill","Number":"1634","RawContent":null,"Title":" Object of type 'System.Int64' cannot be converted to type 'System.UInt16'.","State":"closed","Body":"![image](https://user-images.githubusercontent.com/13087689/47901728-b31be300-debb-11e8-8b3f-f826703852c9.png)\r\n![image](https://user-images.githubusercontent.com/13087689/47901757-c169ff00-debb-11e8-9b8d-ee0d95fa0a67.png)\r\n![image](https://user-images.githubusercontent.com/13087689/47901794-d9da1980-debb-11e8-9efe-d85d216b3c50.png)\r\n","Url":"https://github.com/aspnet/Blazor/issues/1634","RelatedDescription":"Closed issue \" Object of type 'System.Int64' cannot be converted to type 'System.UInt16'.\" (#1634)"},{"Id":"376410846","IsPullRequest":false,"CreatedAt":"2018-11-02T16:58:37","Actor":"mickturn","Number":"1633","RawContent":null,"Title":"Blazor Generic Support and reusability","State":"closed","Body":"Sorry, I know this is not a forum, but I did not find where I could post this. (copy/paste from a previous message…)\r\n\r\nUp to now, we are developing web app, using Bootstrap as front-end framework.\r\nPersonally, I am pretty tired to rebuild from scratch and copy/paste, for each new project, some part of codes + the ajax stack, and we have to rewrite one big app and write ~5 new app.\r\n\r\nNow, we are looking for an alternative.\r\n\r\nAngular have been exclude as:\r\n- TypeScript is not a very appealing language for old school guys like us (C, C++ syntax)\r\n- TypeScript is not usable elsewhere (I mean not like C# with Xamarin, .Net Core, Blazor)\r\n- Some part of the documentation is poorly documented\r\n- Too much update\r\n- Poor reusability\r\n- Debugging sucks\r\n- Big apps are Too fat\r\n\r\nWe then thought that AngularDart could fit but we found:\r\n- Very POOR documentation, and incomplete\r\n- Debugging sucks\r\n- [Archaic generic support](https://stackoverflow.com/questions/53029732/componentfactory-and-generic-component) that leads to ↓\r\n- Big apps are Too fat, as there is a lack of generic component (a lot of copy/paste). For an app rewritten at 1/5, we reached ~20Mb. So we have to find a solution…\r\n\r\nNow we are thinking about Blazor.\r\n\r\nWe see only advantage, among them, the future lazy loading that seems so powerful.\r\n\r\nWe know the quality of MS documentation, and that C# is highly generic, but we did not find enough information about:\r\n- Can we structure Blazor Component around MVC pattern (did not see yet)?\r\n- Are components \"really\" generic (not like the archaic AngularDart generic support, check the link provided)? Because I have seen [this video](https://channel9.msdn.com/Shows/ASPNET-Community-Standup/ASPNET-Community-Standup-Oct-9-2018-The-Blazor-Show), but it does not really show reusability of components outside a given area, with a different type.\r\n- Where is the doc for Blazor Server side vs Blazor Client side? [We find this video ](https://www.youtube.com/watch?v=61qmX5eAPwI)very useful, but not \"complete\" (the switch between Blazor Server side vs Blazor Client side seems \"magic\").\r\n\r\nCan we start to write apps? Or the future of Blazor is still uncertain?","Url":"https://github.com/aspnet/Blazor/issues/1633","RelatedDescription":"Closed issue \"Blazor Generic Support and reusability\" (#1633)"},{"Id":"376185125","IsPullRequest":false,"CreatedAt":"2018-10-31T22:30:45","Actor":"danroth27","Number":"1632","RawContent":null,"Title":"Make it easier to enable client-side SignalR logging when using server-side Blazor","State":"open","Body":"We should provide a simple way to [enable client-side SignalR logging](https://github.com/aspnet/SignalR/wiki/Diagnostics-Guide#javascript-client-logging) when using server-side Blazor.","Url":"https://github.com/aspnet/Blazor/issues/1632","RelatedDescription":"Open issue \"Make it easier to enable client-side SignalR logging when using server-side Blazor\" (#1632)"},{"Id":"376022166","IsPullRequest":false,"CreatedAt":"2018-10-31T15:30:44","Actor":"MarkStega","Number":"1631","RawContent":null,"Title":"Server side Blazor + Paste large amount of text into text area with binding = Disconnection of client","State":"open","Body":"I have a server side execution Blazor app that is displaying a text area with a simple 'bind=\"@backingProperty\"'. If I paste moderate amounts of text into the text area everything functions as it should. However, if I paste a large amount of text (it happens to be a base64 representation of an image in some html) then the connection is closed with the following error appearing:\r\n\r\n```\r\nError: Connection disconnected with error 'Error: Server returned an error on close: Connection closed with an error.'. blazor.server.js:16:6839\r\n\tI</e.prototype.log https://localhost:44379/_framework/blazor.server.js:16:6839\r\n\tP</e.prototype.stopConnection/</< https://localhost:44379/_framework/blazor.server.js:16:27531\r\n\ta/</< https://localhost:44379/_framework/blazor.server.js:16:1652\r\n\ta/< https://localhost:44379/_framework/blazor.server.js:16:970\r\n\ts/< https://localhost:44379/_framework/blazor.server.js:16:697\r\n\ts https://localhost:44379/_framework/blazor.server.js:16:474\r\n\tP</e.prototype.stopConnection https://localhost:44379/_framework/blazor.server.js:16:27424\r\n\tP</e.prototype.startInternal/</</this.transport.onclose https://localhost:44379/_framework/blazor.server.js:16:23753\r\n\tU</e.prototype.connect/</</</i.onclose https://localhost:44379/_framework/blazor.server.js:16:20576\r\n\r\nBlazor 0.6.0\r\nFirefox 63.0\r\nWindow 10 Pro x64\r\nIIS Express hosted server side Blazor\r\n","Url":"https://github.com/aspnet/Blazor/issues/1631","RelatedDescription":"Open issue \"Server side Blazor + Paste large amount of text into text area with binding = Disconnection of client\" (#1631)"},{"Id":"375675355","IsPullRequest":false,"CreatedAt":"2018-10-30T20:36:25","Actor":"RemiBou","Number":"1628","RawContent":null,"Title":"Failed to start app with server-side blazor","State":"closed","Body":"You can find my app here https://github.com/RemiBou/Toss.Blazor/tree/try-server-side. When launching the server side, I got my splash screen then it's blank. There is no error in the console, some small messages are exchanged in the websocket connection but nothing interesting.","Url":"https://github.com/aspnet/Blazor/issues/1628","RelatedDescription":"Closed issue \"Failed to start app with server-side blazor\" (#1628)"},{"Id":"375582058","IsPullRequest":false,"CreatedAt":"2018-10-30T16:32:01","Actor":"danroth27","Number":"1627","RawContent":null,"Title":"CLI for creating components","State":"open","Body":"","Url":"https://github.com/aspnet/Blazor/issues/1627","RelatedDescription":"Open issue \"CLI for creating components\" (#1627)"}],"ResultType":"GitHubIssue"}},"RunOn":"2018-11-10T05:30:03.9504606Z","RunDurationInMilliseconds":1537}