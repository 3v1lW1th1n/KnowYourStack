{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing .NET Framework 4.8 Early Access build 3694","PublishedOn":"2018-11-29T00:21:07+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are happy to let you know that .NET Framework 4.8 is now feature complete and we have an early access build to share with you all! We will continue to stabilize this release and take more fixes...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/11/28/announcing-net-framework-4-8-early-access-build-3694/","RawContent":null},{"Title":".NET Framework November 2018 Preview of Quality Rollup","PublishedOn":"2018-11-28T01:04:15+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the November 2018 Preview of Quality Rollup. Quality and Reliability This release contains the following quality and reliability improvements. CLR Addressed an issue with...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/11/27/net-framework-november-2018-preview-of-quality-rollup/","RawContent":null},{"Title":"Handling a new era in the Japanese calendar in .NET","PublishedOn":"2018-11-14T20:30:13+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"Typically, calendar eras represent long time periods. In the Gregorian calendar, for example, the current era spans (as of this year) 2,018 years. In the Japanese calendar, however, a new era begins...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/11/14/handling-a-new-era-in-the-japanese-calendar-in-net/","RawContent":null},{"Title":".NET Framework November 2018 Security and Quality Rollup","PublishedOn":"2018-11-14T00:24:37+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the November 2018 Security and Quality Rollup. Security No new security fixes. See .NET Framework September 2018 Security and Quality Rollup for the latest security updates....","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/11/13/net-framework-november-2018-security-and-quality-rollup/","RawContent":null},{"Title":".NET Core tooling update for Visual Studio 2017 version 15.9","PublishedOn":"2018-11-13T18:09:43+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Starting with Visual Studio 2017 version 15.9, we’ve changed how the Visual Studio tooling for .NET consumes .NET Core SDKs. Prior to this change, installing a preview version of the .NET Core SDK...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/11/13/net-core-tooling-update-for-visual-studio-2017-version-15-9/","RawContent":null},{"Title":"Cross-platform Time Zones with .NET Core","PublishedOn":"2018-11-13T18:00:21+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Developing applications that span multiple operating systems in .NET Core while working with Time Zone information can lead to unexpected results for developers not familiar with the differences in...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/11/13/cross-platform-time-zones-with-net-core/","RawContent":null},{"Title":"Building C# 8.0","PublishedOn":"2018-11-13T00:00:02+00:00","CommentsCount":163,"FacebookCount":0,"Summary":"Building C# 8.0 The next major version of C# is C# 8.0. It&#8217;s been in the works for quite some time, even as we built and shipped the minor releases C# 7.1, 7.2 and 7.3, and I&#8217;m quite...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/11/12/building-c-8-0/","RawContent":null},{"Title":"Announcing ML.NET 0.7 (Machine Learning .NET)","PublishedOn":"2018-11-08T20:57:16+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"We&#8217;re excited to announce today the release of ML.NET 0.7 &#8211; the latest release of the cross-platform and open source machine learning framework for .NET developers (ML.NET 0.1 was released...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/11/08/announcing-ml-net-0-7-machine-learning-net/","RawContent":null},{"Title":"Understanding the Whys, Whats, and Whens of ValueTask","PublishedOn":"2018-11-07T18:00:31+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"The .NET Framework 4 saw the introduction of the System.Threading.Tasks namespace, and with it the Task class. This type and the derived Task&#60;TResult&#62; have long since become a staple of .NET...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/11/07/understanding-the-whys-whats-and-whens-of-valuetask/","RawContent":null},{"Title":"Announcing .NET Standard 2.1","PublishedOn":"2018-11-05T17:42:38+00:00","CommentsCount":107,"FacebookCount":0,"Summary":"Since we shipped .NET Standard 2.0 about a year ago, we&#8217;ve shipped two updates to .NET Core 2.1 and are about to release .NET Core 2.2. It&#8217;s time to update the standard to include some of...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/11/05/announcing-net-standard-2-1/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"8650911785","Type":"PullRequestEvent","CreatedAt":"2018-11-27T00:35:00","Actor":"JamesNK","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/121","RelatedDescription":"Opened pull request \"Add Newtonsoft.Json\" (#121) at dotnet/foundation","RelatedBody":"// @jongalloway "},{"Id":"8645831625","Type":"PullRequestEvent","CreatedAt":"2018-11-26T09:33:50","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/120","RelatedDescription":"Merged pull request \"Added Telerik info\" (#120) at dotnet/foundation","RelatedBody":""},{"Id":"8645829054","Type":"PullRequestEvent","CreatedAt":"2018-11-26T09:33:23","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/119","RelatedDescription":"Merged pull request \"Added Telerik UWP proj\" (#119) at dotnet/foundation","RelatedBody":""},{"Id":"8645355358","Type":"PullRequestEvent","CreatedAt":"2018-11-26T07:59:20","Actor":"stefanov-stefan","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/120","RelatedDescription":"Opened pull request \"Added Telerik info\" (#120) at dotnet/foundation","RelatedBody":""},{"Id":"8645349176","Type":"PullRequestEvent","CreatedAt":"2018-11-26T07:57:50","Actor":"stefanov-stefan","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/119","RelatedDescription":"Opened pull request \"Added Telerik UWP proj\" (#119) at dotnet/foundation","RelatedBody":""},{"Id":"8637227393","Type":"PullRequestEvent","CreatedAt":"2018-11-23T10:32:15","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/118","RelatedDescription":"Merged pull request \"Update WorldWide Telescope\" (#118) at dotnet/foundation","RelatedBody":"Some layout fixes, but the main change is that @pkgw is now the project director."},{"Id":"8637225303","Type":"PullRequestEvent","CreatedAt":"2018-11-23T10:31:49","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/117","RelatedDescription":"Merged pull request \"Update identityserver.md\" (#117) at dotnet/foundation","RelatedBody":"significant whitespace"},{"Id":"8615388364","Type":"PullRequestEvent","CreatedAt":"2018-11-19T20:23:18","Actor":"pkgw","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/118","RelatedDescription":"Opened pull request \"Update WorldWide Telescope\" (#118) at dotnet/foundation","RelatedBody":"Some layout fixes, but the main change is that @pkgw is now the project director."},{"Id":"8578587104","Type":"PullRequestEvent","CreatedAt":"2018-11-13T05:53:19","Actor":"leastprivilege","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/117","RelatedDescription":"Opened pull request \"Update identityserver.md\" (#117) at dotnet/foundation","RelatedBody":"significant whitespace"},{"Id":"8578321898","Type":"PullRequestEvent","CreatedAt":"2018-11-13T04:22:33","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/114","RelatedDescription":"Merged pull request \"Update identityserver.md\" (#114) at dotnet/foundation","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"8582735181","Type":"IssuesEvent","CreatedAt":"2018-11-13T17:44:44","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/91","RelatedDescription":"Opened issue \".NET Core November Update - 2.1.6 and SDK 2.1.500\" (#91) at dotnet/announcements","RelatedBody":"# November 2018 .NET Updates\r\n\r\nThe following .NET updates were released in November 2018. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core November 2018 (2.1.6 and SDK 2.1.500) Update release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.6/2.1.6.md)\r\n\r\nA [discussion issue](https://github.com/dotnet/core/issues/2053) is available for questions or feedback about this release.\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [October 2018[(https://github.com/dotnet/announcements/issues/89)\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"8666482188","Type":"PullRequestEvent","CreatedAt":"2018-11-29T04:20:55","Actor":"tannergooding","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/21274","RelatedDescription":"Opened pull request \"Don't treat the Vector64/128/256<T> helper methods as intrinsic if featureSIMD is disabled\" (#21274) at dotnet/coreclr","RelatedBody":"This resolves https://github.com/dotnet/coreclr/issues/21257"},{"Id":"8666433709","Type":"PullRequestEvent","CreatedAt":"2018-11-29T04:04:09","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/21254","RelatedDescription":"Merged pull request \"Improve Enum.ToString perf for [Flags] enums\" (#21254) at dotnet/coreclr","RelatedBody":"Two main changes:\r\n- Rather than using a StringBuilder to insert the strings for all of the constituent values, we track the constituent values in a span, summing the expected length, and then new up a string and copy the results directly into it.\r\n- When there's a single value that matches the supplied value, we just return the cached string rather than allocating a new one.\r\n\r\n| Method                                                   | Value                                      | Before Time (ns) | After Time (ns) | Before Alloc (b) | After Alloc (b) | Time Improvement | Alloc Improvement | \r\n|----------------------------------------------------------|--------------------------------------------|------------------|-----------------|------------------|-----------------|------------------|-------------------| \r\n| FlagsToString                                            | 2147483647                                 | 422.54           | 103.70           | 96               | 96              | 4.07x            | 1.00x             | \r\n| FlagsToString                                            |                                   Eighth   | 85.88            | 28.54           | 64               | 24              | 3.01x            | 2.67x             | \r\n| FlagsToString                                            | Eleventh, Twelth, Sixth, Seventh, Eighth | 385.98           | 83.00              | 128              | 128             | 4.65x            | 1.00x             | \r\n| FlagsToString |                     Fifth, Seventh | 139.75                                     | 58.62            | 80              | 80               | 2.38x           | 1.00x            |\r\n| FlagsToString                                            |                                    First   | 85.57            | 34.03           | 56               | 24              | 2.51x            | 2.33x             | \r\n| FlagsToString                                            |                                     None   | 53.49            | 26.92           | 24               | 24              | 1.99x            | 1.00x             | \r\n| FlagsToString                                            |                                   Twelth   | 90.19            | 29.13           | 64               | 24              | 3.10x            | 2.67x             | \r\n\r\ncc: @jkotas, @ahsonkhan, @GrabYourPitchforks, @joperezr "}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"8666532137","Type":"PullRequestEvent","CreatedAt":"2018-11-29T04:38:57","Actor":"jkotas","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/10410","RelatedDescription":"Opened pull request \"Replace private System.AppDomain reflection with a regular call\" (#10410) at dotnet/cli","RelatedBody":"Fixes #10399\r\n"},{"Id":"8665835394","Type":"PullRequestEvent","CreatedAt":"2018-11-29T01:07:50","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/10404","RelatedDescription":"Merged pull request \"Merge release/2.2.1xx to release/2.2.2xx\" (#10404) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.2.1xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.1xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.2.1xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.2.1xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"8665785229","Type":"PullRequestEvent","CreatedAt":"2018-11-29T00:54:26","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/10409","RelatedDescription":"Opened pull request \"Fix build status badge to point at dnceng.\" (#10409) at dotnet/cli","RelatedBody":"This fixes the build status badge to point at dnceng, which is where the\r\nrolling builds are currently.\r\n\r\nskip ci please\r\n"},{"Id":"8665747857","Type":"PullRequestEvent","CreatedAt":"2018-11-29T00:43:55","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/10392","RelatedDescription":"Merged pull request \"Fix no restore command error message\" (#10392) at dotnet/cli","RelatedBody":"It should show _Run \"dotnet tool restore\" to make the \"dotnetsay\" command available._ instead of _Cannot find a command with command name 'dotnetsay'_ when there is no restore.\r\n\r\nRoot cause, a case forget to test"},{"Id":"8665590665","Type":"PullRequestEvent","CreatedAt":"2018-11-29T00:00:35","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/10408","RelatedDescription":"Merged pull request \"Bump SDK package to `3.0.100-preview.18578.2`.\" (#10408) at dotnet/cli","RelatedBody":"This commit bumps the SDK package to `3.0.100-preview.18578.2`."}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"8661684001","Type":"PullRequestEvent","CreatedAt":"2018-11-28T13:11:41","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/984","RelatedDescription":"Merged pull request \"Update dependency files\" (#984) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18577.9\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18577.9\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18577.9\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18577.9\r\n\r\n"},{"Id":"8661625149","Type":"PullRequestEvent","CreatedAt":"2018-11-28T13:01:33","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/984","RelatedDescription":"Opened pull request \"Update dependency files\" (#984) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18577.9\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18577.9\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18577.9\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18577.9\r\n\r\n"},{"Id":"8661622275","Type":"PullRequestEvent","CreatedAt":"2018-11-28T13:01:05","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/983","RelatedDescription":"Merged pull request \"Update dependency files\" (#983) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18576.5\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18576.5\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18576.5\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18576.5\r\n\r\n"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"8666481101","Type":"PullRequestEvent","CreatedAt":"2018-11-29T04:20:29","Actor":"jnaputi253","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/33738","RelatedDescription":"Opened pull request \"Fixed typos in the ArrayTensorExtensions file\" (#33738) at dotnet/corefx","RelatedBody":"Fixed documentation typos"},{"Id":"8666266379","Type":"PullRequestEvent","CreatedAt":"2018-11-29T03:11:06","Actor":"tannergooding","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/33694","RelatedDescription":"Merged pull request \"Adding some RealParserTests to cover -0 and case insensitive infinity/nan\" (#33694) at dotnet/corefx","RelatedBody":"Tests to cover the changes in: https://github.com/dotnet/coreclr/pull/21036"},{"Id":"8666255810","Type":"PullRequestEvent","CreatedAt":"2018-11-29T03:08:01","Actor":"dotnet-maestro-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/33737","RelatedDescription":"Opened pull request \"Update CoreFx, CoreSetup to preview.18579.1, preview-27128-02, respectively (master)\" (#33737) at dotnet/corefx","RelatedBody":"/cc @dotnet/maestro-reviewers-core"},{"Id":"8666198326","Type":"IssuesEvent","CreatedAt":"2018-11-29T02:51:10","Actor":"jnaputi253","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/33736","RelatedDescription":"Opened issue \"Typos in ArrayTensorExtensions.cs\" (#33736) at dotnet/corefx","RelatedBody":"In the ArrayTensorExtensions class, certain functions have DenseTensor and SparseTensor mistyped as DenseTensorr and SparseTensorr."},{"Id":"8666179740","Type":"IssuesEvent","CreatedAt":"2018-11-29T02:45:46","Actor":"miketheitguy","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/33735","RelatedDescription":"Opened issue \"Documentation - Cross-Platform-Cryptography Update OAEP SHA-2 Padding Support Matrix\" (#33735) at dotnet/corefx","RelatedBody":"Cross Platform Cryptography document mentions that OAEP SHA-2 padding is not available on Linux. But it looks like support for this was added per: https://github.com/dotnet/corefx/issues/2523\r\n\r\nAlso appears to be called out here: https://docs.microsoft.com/en-us/dotnet/core/whats-new/dotnet-core-2-1#api-changes\r\n\r\nAnd using RSA.Encrypt & Decrypt on Linux specifying OAEP-SHA256 Padding appears to work without an error (using .NET Core 2.1 and PowerShell  6.1.1)."},{"Id":"8666090073","Type":"PullRequestEvent","CreatedAt":"2018-11-29T02:19:46","Actor":"steveharter","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/33734","RelatedDescription":"Opened pull request \"Add PathAssemblyResolver feature to System.Reflection.MetadataLoadContext\" (#33734) at dotnet/corefx","RelatedBody":"Based on original PR #33201 we deferred PathAssemblyResolver until we had better requirements especially around duplicate assemblies.\r\n\r\nFixes #33323 - see this for requirements.\r\n\r\nDiscussion topic: one design point is that the resolver loops through all previously loaded assemblies during the Resolve() method to look for a match. It obtains the list of assemblies by calling MetadataLoadContext.GetAssemblies(). This allows the resolver to see or pick up any assemblies that the user may have loaded themselves (by calling one of the non-AssemblyName MetadataLoadContext.Load* methods including LoadFromAssemblyPath, LoadFromByteArray and LoadFromStream). Due to this looping the design is not as efficient as having the resolver track just the assemblies it loaded from within its Resolve() and only use those. However, this is somewhat mitigated because MetadataLoadContext will cache and remember the exact AssemblyName properties (Name, Version, CultureName and PublicKeyToken) of previously resolved AssemblyNames so subsequent access is fast and not handled by the resolver again. If we decide to not support this, and have the resolver only track the assemblies it loaded, then any of the Load* methods mentioned above made by the end user would be ignored which may be confusing to the end user and\\or limit the usefulness of this resolver (which may be an acceptable tradeoff)."},{"Id":"8666020549","Type":"PullRequestEvent","CreatedAt":"2018-11-29T01:59:38","Actor":"safern","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/33725","RelatedDescription":"Merged pull request \"Remove PackagingTaskDir property in packaging.props\" (#33725) at dotnet/corefx","RelatedBody":"This property is no longer needed here since we now define it in the Packaging package coming from arcade. Setting this property is causing to use packaging tasks coming from buildtools rather than the ones from arcade.\r\n\r\ncc: @danmosemsft @ericstj @joperezr "}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"8666415900","Type":"PullRequestEvent","CreatedAt":"2018-11-29T03:58:23","Actor":"CyrusNajmabadi","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/31432","RelatedDescription":"Opened pull request \"Allow completion to provide an 'short description' for completion items.\" (#31432) at dotnet/roslyn","RelatedBody":"This was extracted out from https://github.com/dotnet/roslyn/pull/27694 to make the RegexCompletion work simpler to review."},{"Id":"8666281751","Type":"PullRequestEvent","CreatedAt":"2018-11-29T03:15:35","Actor":"tmat","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/30330","RelatedDescription":null,"RelatedBody":"Fixes https://github.com/dotnet/roslyn/issues/25049"},{"Id":"8666281644","Type":"PullRequestEvent","CreatedAt":"2018-11-29T03:15:33","Actor":"tmat","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/pull/30330","RelatedDescription":"Closed pull request \"Use Arcade testing targets\" (#30330) at dotnet/roslyn","RelatedBody":"Fixes https://github.com/dotnet/roslyn/issues/25049"},{"Id":"8666278797","Type":"IssuesEvent","CreatedAt":"2018-11-29T03:14:42","Actor":"tmat","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/31431","RelatedDescription":"Opened issue \"Microsoft.CodeAnalysis.VisualBasic.UnitTests.AnonymousTypesCodeGenTests failed in CI on Linux\" (#31431) at dotnet/roslyn","RelatedBody":"```\r\n[mAssertion Failed\r\nforward branches and fall-through must agree on stack depth\r\n\r\n   at Microsoft.CodeAnalysis.CodeGen.ILBuilder.MarkLabel(Object label) in /_/src/Compilers/Core/Portable/CodeGen/ILBuilderEmit.cs:line 157\r\n   at Microsoft.CodeAnalysis.VisualBasic.CodeGen.CodeGenerator.EmitLabelStatement(BoundLabelStatement boundLabelStatement) in /_/src/Compilers/VisualBasic/Portable/CodeGen/EmitStatement.vb:line 845\r\n   at Microsoft.CodeAnalysis.VisualBasic.CodeGen.CodeGenerator.EmitStatement(BoundStatement statement) in /_/src/Compilers/VisualBasic/Portable/CodeGen/EmitStatement.vb:line 50\r\n   at Microsoft.CodeAnalysis.VisualBasic.CodeGen.CodeGenerator.EmitBlock(BoundBlock scope) in /_/src/Compilers/VisualBasic/Portable/CodeGen/EmitStatement.vb:line 1235\r\n   at Microsoft.CodeAnalysis.VisualBasic.CodeGen.CodeGenerator.EmitStatement(BoundStatement statement) in /_/src/Compilers/VisualBasic/Portable/CodeGen/EmitStatement.vb:line 19\r\n   at Microsoft.CodeAnalysis.VisualBasic.CodeGen.CodeGenerator.GenerateImpl() in /_/src/Compilers/VisualBasic/Portable/CodeGen/CodeGenerator.vb:line 163\r\n   at Microsoft.CodeAnalysis.VisualBasic.CodeGen.CodeGenerator.Generate() in /_/src/Compilers/VisualBasic/Portable/CodeGen/CodeGenerator.vb:line 106\r\n   at Microsoft.CodeAnalysis.VisualBasic.MethodCompiler.GenerateMethodBody(PEModuleBuilder moduleBuilder, MethodSymbol method, Int32 methodOrdinal, BoundStatement block, ImmutableArray`1 lambdaDebugInfo, ImmutableArray`1 closureDebugInfo, StateMachineTypeSymbol stateMachineTypeOpt, VariableSlotAllocator variableSlotAllocatorOpt, DebugDocumentProvider debugDocumentProvider, DiagnosticBag diagnostics, Boolean emittingPdb, Boolean emitTestCoverageData, ImmutableArray`1 dynamicAnalysisSpans) in /_/src/Compilers/VisualBasic/Portable/Compilation/MethodCompiler.vb:line 1560\r\n   at Microsoft.CodeAnalysis.VisualBasic.MethodCompiler.LowerAndEmitMethod(MethodSymbol method, Int32 methodOrdinal, BoundBlock block, Binder binderOpt, TypeCompilationState compilationState, DiagnosticBag diagsForCurrentMethod, ProcessedFieldOrPropertyInitializers processedInitializers, SynthesizedSubmissionFields previousSubmissionFields, MethodSymbol constructorToInject, Int32& delegateRelaxationIdDispenser) in /_/src/Compilers/VisualBasic/Portable/Compilation/MethodCompiler.vb:line 1463\r\n   at Microsoft.CodeAnalysis.VisualBasic.MethodCompiler.CompileMethod(MethodSymbol method, Int32 methodOrdinal, Int32& withEventPropertyIdDispenser, Int32& delegateRelaxationIdDispenser, Predicate`1 filter, TypeCompilationState compilationState, ProcessedFieldOrPropertyInitializers processedInitializers, Binder containingTypeBinder, SynthesizedSubmissionFields previousSubmissionFields, MethodSymbol& referencedConstructor) in /_/src/Compilers/VisualBasic/Portable/Compilation/MethodCompiler.vb:line 1236\r\n   at Microsoft.CodeAnalysis.VisualBasic.MethodCompiler.CompileNamedType(NamedTypeSymbol containingType, Predicate`1 filter) in /_/src/Compilers/VisualBasic/Portable/Compilation/MethodCompiler.vb:line 661\r\n   at Microsoft.CodeAnalysis.VisualBasic.MethodCompiler._Closure$__30-0._Lambda$__0() in /_/src/Compilers/VisualBasic/Portable/Compilation/MethodCompiler.vb:line 503\r\n   at Roslyn.Utilities.UICultureUtilities.<>c__DisplayClass5_0.<WithCurrentUICulture>b__0() in /_/src/Compilers/Core/Portable/InternalUtilities/UICultureUtilities.cs:line 136\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot)\r\n   at System.Threading.Tasks.ThreadPoolTaskScheduler.TryExecuteTaskInline(Task task, Boolean taskWasPreviouslyQueued)\r\n   at System.Threading.Tasks.TaskScheduler.TryRunInline(Task task, Boolean taskWasPreviouslyQueued)\r\n   at System.Threading.Tasks.Task.WrappedTryRunInline()\r\n   at System.Threading.Tasks.Task.InternalWaitCore(Int32 millisecondsTimeout, CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.VisualBasic.MethodCompiler.WaitForWorkers() in /_/src/Compilers/VisualBasic/Portable/Compilation/MethodCompiler.vb:line 313\r\n   at Microsoft.CodeAnalysis.VisualBasic.MethodCompiler.CompileMethodBodies(VisualBasicCompilation compilation, PEModuleBuilder moduleBeingBuiltOpt, Boolean emittingPdb, Boolean emitTestCoverageData, Boolean hasDeclarationErrors, Predicate`1 filter, DiagnosticBag diagnostics, CancellationToken cancellationToken) in /_/src/Compilers/VisualBasic/Portable/Compilation/MethodCompiler.vb:line 235\r\n   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.CompileMethods(CommonPEModuleBuilder moduleBuilder, Boolean emittingPdb, Boolean emitMetadataOnly, Boolean emitTestCoverageData, DiagnosticBag diagnostics, Predicate`1 filterOpt, CancellationToken cancellationToken) in /_/src/Compilers/VisualBasic/Portable/Compilation/VisualBasicCompilation.vb:line 2321\r\n   at Microsoft.CodeAnalysis.Compilation.Emit(Stream peStream, Stream metadataPEStream, Stream pdbStream, Stream xmlDocumentationStream, Stream win32Resources, IEnumerable`1 manifestResources, EmitOptions options, IMethodSymbol debugEntryPoint, Stream sourceLinkStream, IEnumerable`1 embeddedTexts, CompilationTestData testData, CancellationToken cancellationToken) in /_/src/Compilers/Core/Portable/Compilation/Compilation.cs:line 2391\r\n   at Microsoft.CodeAnalysis.Compilation.Emit(Stream peStream, Stream pdbStream, Stream xmlDocumentationStream, Stream win32Resources, IEnumerable`1 manifestResources, EmitOptions options, IMethodSymbol debugEntryPoint, Stream sourceLinkStream, IEnumerable`1 embeddedTexts, Stream metadataPEStream, CancellationToken cancellationToken) in /_/src/Compilers/Core/Portable/Compilation/Compilation.cs:line 2335\r\n   at Microsoft.CodeAnalysis.VisualBasic.UnitTests.AnonymousTypesCodeGenTests._Closure$__2-1._Lambda$__0() in /_/src/Compilers/VisualBasic/Test/Emit/CodeGen/AnonymousTypesCodeGenTests.vb:line 167\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot)\r\n   at System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n```"},{"Id":"8666022259","Type":"PullRequestEvent","CreatedAt":"2018-11-29T02:00:07","Actor":"dotnet-automerge-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/31428","RelatedDescription":"Merged pull request \"Merge master to master-vs-deps\" (#31428) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"8665772533","Type":"IssuesEvent","CreatedAt":"2018-11-29T00:50:51","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/31031","RelatedDescription":"Closed issue \"\"No suitable Deconstruct instance or extension method was found\" is incorrect\" (#31031) at dotnet/roslyn","RelatedBody":"Compiling the following reports (among other things) that `CS8129 No suitable Deconstruct instance or extension method was found for type 'IA', with 2 out parameters and a void return type.`\r\n\r\n``` c#\r\nusing System;\r\n\r\nclass Program\r\n{\r\n    static void Main()\r\n    {\r\n        IA a = new A();\r\n        (var x, var y) = a;\r\n    }\r\n}\r\ninterface I1\r\n{\r\n    void Deconstruct(out int X, out int Y);\r\n}\r\ninterface I2\r\n{\r\n    void Deconstruct(out int X, out int Y);\r\n}\r\ninterface IA : I1, I2 { }\r\nclass A : IA, I1, I2\r\n{\r\n    void I1.Deconstruct(out int X, out int Y) => (X, Y) = (3, 4);\r\n    void I2.Deconstruct(out int X, out int Y) => (X, Y) = (7, 8);\r\n}\r\n```\r\n\r\nHowever, there are indeed suitable `Deconstruct` instance methods for type `IA`. In fact there are too many of them. This diagnostic is simply incorrect.\r\n"},{"Id":"8665771617","Type":"IssuesEvent","CreatedAt":"2018-11-29T00:50:34","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/30906","RelatedDescription":"Closed issue \"Matching nullables with var pattern\" (#30906) at dotnet/roslyn","RelatedBody":"**Version Used**: features/recursive-patterns\r\n\r\n**Steps to Reproduce**:\r\n\r\n```cs\r\nusing System;\r\nclass C {\r\n    extern static (int, int)? Get();   \r\n\r\n    static void Test() {\r\n        if (Get() is var (x, y)) {\r\n            Console.Write(x);   \r\n            Console.Write(y);   \r\n        }\r\n    }\r\n}\r\n```\r\n\r\n\r\n**Expected Behavior**: Should check for HasValue and deconstruct.\r\n\r\n**Actual Behavior**: Error.\r\n\r\nNote: should work for any deconstructible, not just tuples.\r\nNote: in effect, this should be equivalent to the `(var x, var y)` pattern.\r\n\r\n"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"8664090050","Type":"PullRequestEvent","CreatedAt":"2018-11-28T19:09:55","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6620","RelatedDescription":"Merged pull request \"Fix warning on OSX\" (#6620) at dotnet/corert","RelatedBody":"Fixes #6619"},{"Id":"8664090039","Type":"IssuesEvent","CreatedAt":"2018-11-28T19:09:55","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/6619","RelatedDescription":"Closed issue \"clang '-pthread' warning on OS-X when building native apps\" (#6619) at dotnet/corert","RelatedBody":"bash:  `dotnet publish -r osx-x64 -c release`\r\n\r\n`clang : warning : argument unused during compilation: '-pthread' [-Wunused-command-line-argument] [/Users/yy/Desktop/BinCalc/NativeCalc.csproj]\r\n `\r\n\r\nIt seems that this warning had no effect on native app, but I still want to know how to resolve them."},{"Id":"8662936907","Type":"PullRequestEvent","CreatedAt":"2018-11-28T16:09:07","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6616","RelatedDescription":"Merged pull request \"Remove TypedReference.MakeTypedReference readonly restriction\" (#6616) at dotnet/corert","RelatedBody":"Port https://github.com/dotnet/coreclr/pull/21193 to corert\r\ncc: @jkotas"},{"Id":"8662934360","Type":"PullRequestEvent","CreatedAt":"2018-11-28T16:08:46","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6620","RelatedDescription":"Opened pull request \"Fix warning on OSX\" (#6620) at dotnet/corert","RelatedBody":"Fixes #6619"},{"Id":"8661326303","Type":"PullRequestEvent","CreatedAt":"2018-11-28T12:08:55","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6614","RelatedDescription":"Merged pull request \"[armel] Fix 8-byte object alignment\" (#6614) at dotnet/corert","RelatedBody":"Fix for #4698. `RequiresAlign8` previously always returned false on armel. Also, add `-DFEATURE_64BIT_ALIGNMENT` on arm and armel so that this code path may exist:\r\nhttps://github.com/dotnet/corert/blob/6b6cfd0a10ccf282144757555ae4a2116d289b0e/src/Native/Runtime/gcrhenv.cpp#L270\r\nFixes bus errors with backtraces like:\r\n```\r\n 0: RhpLockCmpXchg64 + 0xd (0x000cacac) [/tmp/Alloc_neg2] + 0xbacac\r\n 1: S_P_CoreLib_System_Threading_Interlocked__CompareExchange_0 + 0x2a (0x001bacf7) [/tmp/Alloc_neg2] + 0x1aacf7\r\n 2: S_P_CoreLib_System_Threading_Interlocked__Read + 0x32 (0x001bb0db) [/tmp/Alloc_neg2] + 0x1ab0db\r\n 3: S_P_CoreLib_System_IO_UnmanagedMemoryStream__get_Length + 0x28 (0x001d277d) [/tmp/Alloc_neg2] + 0x1c277d\r\n 4: S_P_CoreLib_System_Resources_ManifestBasedResourceGroveler__CreateResourceSet + 0x68 (0x0021cf6d) [/tmp/Alloc_neg2] + 0x20cf6d\r\n 5: S_P_CoreLib_System_Resources_ManifestBasedResourceGroveler__GrovelForResourceSet + 0x214 (0x0021cb41) [/tmp/Alloc_neg2] + 0x20cb41\r\n 6: S_P_CoreLib_System_Resources_ResourceManager__InternalGetResourceSet + 0x174 (0x0021e89d) [/tmp/Alloc_neg2] + 0x20e89d\r\n 7: S_P_CoreLib_System_Resources_ResourceManager__GetString_0 + 0x184 (0x0021f23d) [/tmp/Alloc_neg2] + 0x20f23d\r\n 8: S_P_CoreLib_System_SR__InternalGetResourceString + 0x162 (0x001b1bab) [/tmp/Alloc_neg2] + 0x1a1bab\r\n 9: S_P_CoreLib_System_SR__GetResourceString_0 + 0x4e (0x001b19e7) [/tmp/Alloc_neg2] + 0x1a19e7\r\n10: S_P_CoreLib_System_SR__get_Arg_ArgumentOutOfRangeException + 0x22 (0x001b1f2b) [/tmp/Alloc_neg2] + 0x1a1f2b\r\n11: S_P_CoreLib_System_ArgumentOutOfRangeException___ctor + 0x12 (0x0016fa9b) [/tmp/Alloc_neg2] + 0x15fa9b\r\n12: S_P_CoreLib_System_Runtime_InteropServices_GCHandle___ctor + 0x3e (0x00234c53) [/tmp/Alloc_neg2] + 0x224c53\r\n13: S_P_CoreLib_System_Runtime_InteropServices_GCHandle__Alloc_0 + 0x24 (0x00234d15) [/tmp/Alloc_neg2] + 0x224d15\r\n14: Alloc_neg2_Test__Main + 0xde (0x000e545f) [/tmp/Alloc_neg2] + 0xd545f\r\n15: Alloc_neg2__Module___MainMethodWrapper + 0xc (0x002d752d) [/tmp/Alloc_neg2] + 0x2c752d\r\n16: __managed__Main + 0x52 (0x002d7583) [/tmp/Alloc_neg2] + 0x2c7583\r\n17: main + 0x36 (0x000209fb) [/tmp/Alloc_neg2] + 0x109fb\r\n18: __libc_start_main + 0x114 (0xf72c163c) [/usr/lib/libc-2.24.so] + 0x1663c\r\n19: _start + 0x2c (0x000142b8) [/tmp/Alloc_neg2] + 0x42b8\r\n```\r\n CC @alpencolt @iarischenko "},{"Id":"8660439485","Type":"IssuesEvent","CreatedAt":"2018-11-28T09:39:43","Actor":"differentrain","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/6619","RelatedDescription":"Opened issue \"clang '-pthread' warning on OS-X when building native apps\" (#6619) at dotnet/corert","RelatedBody":"bash:  `dotnet publish -r osx-x64 -c release`\r\n\r\n`clang : warning : argument unused during compilation: '-pthread' [-Wunused-command-line-argument] [/Users/yy/Desktop/BinCalc/NativeCalc.csproj]\r\n `\r\n\r\nIt seems that this warning had no effect on native app, but I still want to know how to resolve them."},{"Id":"8655951909","Type":"IssuesEvent","CreatedAt":"2018-11-27T17:07:32","Actor":"yowl","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/6618","RelatedDescription":"Opened issue \"wasm: should it be able to compile with --nativelib ?\" (#6618) at dotnet/corert","RelatedBody":"Should ilc be able to compile a wasm library for later linking?   I tried with `--nativelib` and you get\r\n```\r\nUnhandled Exception: System.Exception: Main not found\r\n   at ILCompiler.DependencyAnalysis.WebAssemblyObjectWriter.EmitNativeMain() in D:\\GitHub\\corert\\corert\\src\\ILCompiler.WebAssembly\\src\\CodeGen\\WebAssemblyObjectWriter.cs:line 280\r\n   at ILCompiler.DependencyAnalysis.WebAssemblyObjectWriter.FinishObjWriter() in D:\\GitHub\\corert\\corert\\src\\ILCompiler.WebAssembly\\src\\CodeGen\\WebAssemblyObjectWriter.cs:line 184\r\n   at ILCompiler.DependencyAnalysis.WebAssemblyObjectWriter.Dispose(Boolean bDisposing) in D:\\GitHub\\corert\\corert\\src\\ILCompiler.WebAssembly\\src\\CodeGen\\WebAssemblyObjectWriter.cs:line 685\r\n   at ILCompiler.DependencyAnalysis.WebAssemblyObjectWriter.Dispose() in D:\\GitHub\\corert\\corert\\src\\ILCompiler.WebAssembly\\src\\CodeGen\\WebAssemblyObjectWriter.cs:line 680\r\n   at ILCompiler.DependencyAnalysis.WebAssemblyObjectWriter.EmitObject(String objectFilePath, IEnumerable`1 nodes, NodeFactory factory, WebAssemblyCodegenCompilation compilation, IObjectDumper dumper) in D:\\GitHub\\corert\\corert\\src\\ILCompiler.WebAssembly\\src\\CodeGen\\WebAssemblyObjectWriter.cs:line 903\r\n   at ILCompiler.WebAssemblyCodegenCompilation.CompileInternal(String outputFile, ObjectDumper dumper) in D:\\GitHub\\corert\\corert\\src\\ILCompiler.WebAssembly\\src\\Compiler\\WebAssemblyCodegenCompilation.cs:line 54\r\n   at ILCompiler.Compilation.ILCompiler.ICompilation.Compile(String outputFile, ObjectDumper dumper) in D:\\GitHub\\corert\\corert\\src\\ILCompiler.Compiler\\src\\Compiler\\Compilation.cs:line 353\r\n   at ILCompiler.Program.Run(String[] args) in D:\\GitHub\\corert\\corert\\src\\ILCompiler\\src\\Program.cs:line 572\r\n   at ILCompiler.Program.Main(String[] args) in D:\\GitHub\\corert\\corert\\src\\ILCompiler\\src\\Program.cs:line 728\r\n```"},{"Id":"8654048060","Type":"PullRequestEvent","CreatedAt":"2018-11-27T12:37:43","Actor":"trylek","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6617","RelatedDescription":"Opened pull request \"WIP: fixes for building CoreRT under VS 2019\" (#6617) at dotnet/corert","RelatedBody":"1) Several places were hardcoding VS150COMNTOOLS; I changed these\r\nto use _VSCOMNTOOLS.\r\n\r\n2) The previously used BuildTools drop is too old and its version\r\nof the ReferenceAssemblies.targets script doesn't have proper\r\nhandling for the new 'Current' MSBuild version ID.\r\n\r\n3) One more change to BuildTools is necessary to run xunit.console\r\nusing \"dotnet\" instead of \"call\" which crashes under VS 2019 due\r\nto being unable to find \"System.Runtime\" version 4.2.0.0.\r\n\r\n4) I have sent out the PR; once that gets merged in and a new\r\nBuildTools package gets produced, I'll update the\r\nBuildToolsVersion.txt file once more and I'll remove the\r\nWIP tag from the PR title.\r\n\r\nThanks\r\n\r\nTomas\r\n\r\nP.S. I have also yet to investigate one remaining failure in one of the JIT tests, all the other basic CoreRT tests including the CPAOT trivial tests pass now. CoreCLR CPAOT tests are not yet fully functional, I intend to look at them next."},{"Id":"8651242379","Type":"PullRequestEvent","CreatedAt":"2018-11-27T02:10:56","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6592","RelatedDescription":"Merged pull request \"wasm: Fix callback to NativeCallable methods\" (#6592) at dotnet/corert","RelatedBody":"Fixes #6580. Previously when making the callback to a NativeCallable function, the wrong PInvoke method was used as described in #6580 .  This change fixes that, and also fixes a problem where the thread state was not being changed from Cooperative->Preemptive->Cooperative on managed->unmanaged->managed Pinvokes.  When calling back from unmanaged to the NativeCallable an asssert is made on the thread being in Preemptive mode, but the change from Cooperative->Preemptive was missing and hence the assert failed.  @morganbr I'm marking this as WIP because I needed to add some C++ function to get a simple test that exercised the callback, so I have this in a cpp file https://github.com/dotnet/corert/compare/master...yowl:callbackfromnative?expand=1#diff-380d7928db22ba701b6239aaf0c6d09c, but I'm not sure how to go about changing the build to get this included.  Do I just make the changes in https://github.com/dotnet/corert/blob/master/src/BuildIntegration/Microsoft.NETCore.Native.targets so that I can `emcc` the bitcode for the cpp and add it to the linker command?\r\n\r\n"},{"Id":"8651242372","Type":"IssuesEvent","CreatedAt":"2018-11-27T02:10:56","Actor":"morganbr","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/6580","RelatedDescription":"Closed issue \"wasm: NativeCallable function is not used\" (#6580) at dotnet/corert","RelatedBody":"I don't know if I'm doing something wrong, or its the wasm compiler.  I have this c#:\r\n```\r\n    private static unsafe void ThreadTest()\r\n    {\r\n        p_thread pThread;\r\n        int arg = 0;\r\n        int join;\r\n        var t = pthread_create((IntPtr)(&pThread), (IntPtr)(0), System.Runtime.InteropServices.AddrofIntrinsics.AddrOf<ThreadStartFunc>(ThreadStart), (IntPtr)(&arg));\r\n        join = pthread_join((IntPtr)(&pThread), (IntPtr)0);\r\n    }\r\n\r\n    [NativeCallable(CallingConvention = CallingConvention.StdCall)]\r\n    private static unsafe void* ThreadStart(void* arg)\r\n    {\r\n...\r\n    }\r\n```\r\nSo I'm trying to get `pthread_create` to callback into `ThreadStart`.  When I run this it complains:\r\n```\r\nInvalid function pointer '6920' called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this) HelloWasm.js:6610:27\r\nThis pointer might make sense in another type signature: i: 0  iii: _HelloWasm_Program__ThreadStart  iiii: 0  iiiii: 0  iiiiii: 0  iiiiiii: undefined  iiiiiiii: 0  iiiiiiiiii: undefined  vii: 0  di: undefined  vi: 0  viii: 0  v: 0  viiii: 0  viiiii: 0  viiiiii: 0  viiiiiii: 0 \r\n```\r\nSo you can see that its looking for a method in the function table `ii` whereas the one that its been given, `_HelloWasm_Program__ThreadStart` is in the `iii` table.  Indeed `_HelloWasm_Program__ThreadStart` is the wrong signature, its has the signature for any other method, i.e. the first param is the shadow stack:\r\n```\r\ndefine i8* @HelloWasm_Program__ThreadStart(i8*, i8*) \r\n```\r\nThere is another function emitted which looks like the right one:\r\n```\r\ndefine i8* @ThreadStart(i8*) {\r\nShadowStackSetupBlock:\r\n  %ShadowStackPtr = alloca i8*\r\n  %SavedShadowStack = load i8*, i8** @t_pShadowStackTop\r\n  store i8* %SavedShadowStack, i8** %ShadowStackPtr\r\n  %ShadowStackNull = icmp eq i8* %SavedShadowStack, null\r\n  br i1 %ShadowStackNull, label %allocateShadowStackBlock, label %ManagedCallBlock\r\n\r\nallocateShadowStackBlock:                         ; preds = %ShadowStackSetupBlock\r\n  %NewShadowStack = tail call i8* @malloc(i32 mul (i32 ptrtoint (i8* getelementptr (i8, i8* null, i32 1) to i32), i32 1000000))\r\n  store i8* %NewShadowStack, i8** %ShadowStackPtr\r\n  br label %ManagedCallBlock\r\n\r\nManagedCallBlock:                                 ; preds = %allocateShadowStackBlock, %ShadowStackSetupBlock\r\n  %ReversePInvokeFrame = alloca { i8*, i8* }\r\n  call void @RhpReversePInvoke2({ i8*, i8* }* %ReversePInvokeFrame)\r\n  %ShadowStack = load i8*, i8** %ShadowStackPtr\r\n  %calleeFrame = getelementptr i8, i8* %ShadowStack, i32 4\r\n  %1 = call i8* @HelloWasm_Program__ThreadStart(i8* %calleeFrame, i8* %0)\r\n  call void @RhpReversePInvokeReturn2({ i8*, i8* }* %ReversePInvokeFrame)\r\n  ret i8* %1\r\n}\r\n```\r\nBut this does not seem to be used anywhere else in the LLVM file.  I'm not sure what the right question is.  What should the parameters to `InitializeReversePInvokeThunk` be for this?  \r\n\r\n\r\n\r\nI have these attributes defined:\r\n```\r\nnamespace System.Runtime.InteropServices\r\n{\r\n    /// <summary>\r\n    /// Any method marked with NativeCallableAttribute can be directly called from\r\n    /// native code. The function token can be loaded to a local variable using LDFTN\r\n    /// and passed as a callback to native method.\r\n    /// </summary>\r\n    [AttributeUsage(AttributeTargets.Method)]\r\n    public sealed class NativeCallableAttribute : Attribute\r\n    {\r\n        public NativeCallableAttribute()\r\n        {\r\n        }\r\n\r\n        /// <summary>\r\n        /// Optional. If omitted, compiler will choose one for you.\r\n        /// </summary>\r\n        public CallingConvention CallingConvention;\r\n\r\n        /// <summary>\r\n        /// Optional. If omitted, then the method is native callable, but no EAT is emitted.\r\n        /// </summary>\r\n        public string EntryPoint;\r\n    }\r\n\r\n    [AttributeUsage((System.AttributeTargets.Method | System.AttributeTargets.Class))]\r\n    internal class McgIntrinsicsAttribute : Attribute\r\n    {\r\n    }\r\n\r\n    [McgIntrinsics]\r\n    internal static class AddrofIntrinsics\r\n    {\r\n        // This method is implemented elsewhere in the toolchain\r\n        internal static IntPtr AddrOf<T>(T ftn)\r\n        {\r\n            throw new PlatformNotSupportedException();\r\n        }\r\n    }\r\n}\r\n\r\n```\r\n"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"8666059257","Type":"PullRequestEvent","CreatedAt":"2018-11-29T02:10:48","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/2692","RelatedDescription":"Merged pull request \"Update dependency files\" (#2692) at dotnet/sdk","RelatedBody":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18575.1\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18576.5\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18577.9\r\n\r\n"},{"Id":"8666043208","Type":"PullRequestEvent","CreatedAt":"2018-11-29T02:06:04","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/2691","RelatedDescription":"Merged pull request \"Identifer -> Identifier\" (#2691) at dotnet/sdk","RelatedBody":""},{"Id":"8665593313","Type":"PullRequestEvent","CreatedAt":"2018-11-29T00:01:12","Actor":"dotnet-bot","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2704","RelatedDescription":"Opened pull request \"Merge release/2.1.4xx to release/2.1.5xx\" (#2704) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.1.4xx into release/2.1.5xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.4xx-to-release/2.1.5xx\ngit reset --hard upstream/release/2.1.5xx\ngit merge upstream/release/2.1.4xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1.4xx-to-release/2.1.5xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."}],"ResultType":"GitHubEvent"},"Home-Issues":{"Issues":[{"Id":"384569679","IsPullRequest":true,"CreatedAt":"2018-11-27T00:35:00","Actor":"JamesNK","Number":"121","RawContent":null,"Title":"Add Newtonsoft.Json","State":"open","Body":"// @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/121","RelatedDescription":"Open PR \"Add Newtonsoft.Json\" (#121)"},{"Id":"384212839","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:50","Actor":"stefanov-stefan","Number":"120","RawContent":null,"Title":"Added Telerik info","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/120","RelatedDescription":"Closed or merged PR \"Added Telerik info\" (#120)"},{"Id":"384212448","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:22","Actor":"stefanov-stefan","Number":"119","RawContent":null,"Title":"Added Telerik UWP proj","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/119","RelatedDescription":"Closed or merged PR \"Added Telerik UWP proj\" (#119)"},{"Id":"382378851","IsPullRequest":true,"CreatedAt":"2018-11-23T10:32:15","Actor":"pkgw","Number":"118","RawContent":null,"Title":"Update WorldWide Telescope","State":"closed","Body":"Some layout fixes, but the main change is that @pkgw is now the project director.","Url":"https://github.com/dotnet/foundation/pull/118","RelatedDescription":"Closed or merged PR \"Update WorldWide Telescope\" (#118)"},{"Id":"380070557","IsPullRequest":true,"CreatedAt":"2018-11-23T10:31:49","Actor":"leastprivilege","Number":"117","RawContent":null,"Title":"Update identityserver.md","State":"closed","Body":"significant whitespace","Url":"https://github.com/dotnet/foundation/pull/117","RelatedDescription":"Closed or merged PR \"Update identityserver.md\" (#117)"},{"Id":"379731798","IsPullRequest":true,"CreatedAt":"2018-11-13T04:22:32","Actor":"leastprivilege","Number":"114","RawContent":null,"Title":"Update identityserver.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/114","RelatedDescription":"Closed or merged PR \"Update identityserver.md\" (#114)"},{"Id":"379777451","IsPullRequest":true,"CreatedAt":"2018-11-13T04:21:35","Actor":"scottbrady91","Number":"116","RawContent":null,"Title":"Update to IdentityManager project","State":"closed","Body":"My employer and I have recently taken over the IdentityManager project from Dom & Brock. I've updated the IdentityManager page to reflect this and the newer version of the core repo.","Url":"https://github.com/dotnet/foundation/pull/116","RelatedDescription":"Closed or merged PR \"Update to IdentityManager project\" (#116)"},{"Id":"379733880","IsPullRequest":true,"CreatedAt":"2018-11-13T04:20:23","Actor":"leastprivilege","Number":"115","RawContent":null,"Title":"Create identitymodel.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/115","RelatedDescription":"Closed or merged PR \"Create identitymodel.md\" (#115)"},{"Id":"371941750","IsPullRequest":true,"CreatedAt":"2018-11-01T16:20:07","Actor":"SeanKilleen","Number":"113","RawContent":null,"Title":"Update logo for couchbase-lite in projects.json","State":"closed","Body":"Uses a working link to the logo.\r\n\r\nResolves https://github.com/dotnet/dotnetfoundation-website/issues/65\r\n\r\nFix can be verified by copying/pasting the URL into a browser.","Url":"https://github.com/dotnet/foundation/pull/113","RelatedDescription":"Closed or merged PR \"Update logo for couchbase-lite in projects.json\" (#113)"},{"Id":"365089074","IsPullRequest":false,"CreatedAt":"2018-09-29T02:45:47","Actor":"athinboy","Number":"112","RawContent":null,"Title":"Suggest: key  F12  go to source code of dotnetcore  rather then metadata","State":"open","Body":"Apology for my poor english!\r\n\r\nI have change to Java due to the boss's decision .   I think dotnet  need a big change. In China, more and more dotnet project go to die,  but new java project continuously increase!\r\n\r\nI suggest:key  F12  go to source code of dotnetcore  rather then metadata(e.g.    ***.dll.source.zip \\****.exe.source.zip),   maybe there is already done,but i don't know. \r\n\r\nthanks!\r\n","Url":"https://github.com/dotnet/foundation/issues/112","RelatedDescription":"Open issue \"Suggest: key  F12  go to source code of dotnetcore  rather then metadata\" (#112)"},{"Id":"356296763","IsPullRequest":false,"CreatedAt":"2018-09-02T16:49:34","Actor":"adamralph","Number":"111","RawContent":null,"Title":"Sourcelink location is confusing","State":"open","Body":"The README has link under the \"Cameron Taggart\" section pointing to https://github.com/ctaggart/SourceLink but the project now seems to live under the \"dotnet\" org in https://github.com/dotnet/sourcelink/ which suggests the link should be changed to that, and moved under the \"Microsoft\" section.","Url":"https://github.com/dotnet/foundation/issues/111","RelatedDescription":"Open issue \"Sourcelink location is confusing\" (#111)"},{"Id":"353832272","IsPullRequest":true,"CreatedAt":"2018-08-27T16:21:55","Actor":"jkonicki","Number":"110","RawContent":null,"Title":"Fix - add missing comma","State":"closed","Body":"@jongalloway - Looks like I missed a comma in my previous PR. Here is the fix.","Url":"https://github.com/dotnet/foundation/pull/110","RelatedDescription":"Closed or merged PR \"Fix - add missing comma\" (#110)"},{"Id":"352736883","IsPullRequest":true,"CreatedAt":"2018-08-23T23:10:07","Actor":"anthonychu","Number":"108","RawContent":null,"Title":"Fix errors in projects.json","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/108","RelatedDescription":"Closed or merged PR \"Fix errors in projects.json\" (#108)"},{"Id":"353536205","IsPullRequest":true,"CreatedAt":"2018-08-23T23:09:07","Actor":"jkonicki","Number":"109","RawContent":null,"Title":"Add Steeltoe to the project listing","State":"closed","Body":"Hi @jongalloway, Here is the PR for adding Steeltoe to the projects listing.  Let me know if you need any changes. \r\nThanks.","Url":"https://github.com/dotnet/foundation/pull/109","RelatedDescription":"Closed or merged PR \"Add Steeltoe to the project listing\" (#109)"},{"Id":"339545098","IsPullRequest":true,"CreatedAt":"2018-08-17T23:19:54","Actor":"slide","Number":"105","RawContent":null,"Title":"Add DLR/IronPython2/IronPython3","State":"closed","Body":"Add DLR/IronPython2/IronPython3 to project list.","Url":"https://github.com/dotnet/foundation/pull/105","RelatedDescription":"Closed or merged PR \"Add DLR/IronPython2/IronPython3\" (#105)"},{"Id":"336936558","IsPullRequest":false,"CreatedAt":"2018-08-07T07:06:40","Actor":"tomkerkhove","Number":"104","RawContent":null,"Title":"About still mentions CodePlex","State":"closed","Body":"About still mentions CodePlex which is now in archive mode.\r\n\r\n![image](https://user-images.githubusercontent.com/4345663/42086259-e0b7d008-7b92-11e8-96c9-02ee61ddc457.png)\r\n\r\nIs this something that I can PR?","Url":"https://github.com/dotnet/foundation/issues/104","RelatedDescription":"Closed issue \"About still mentions CodePlex\" (#104)"},{"Id":"340355507","IsPullRequest":false,"CreatedAt":"2018-07-11T18:28:16","Actor":"Eilon","Number":"107","RawContent":null,"Title":"Links to .NET Foundation web site use HTTP instead of HTTPS","State":"open","Body":"It appears that HTTPS works just fine: https://www.dotnetfoundation.org/\r\n\r\nBut the links at these places use HTTP:\r\n1. The link in the header of https://github.com/dotnet/home\r\n2. The link in the header of https://github.com/dotnet\r\n3. Some links in https://github.com/dotnet/home/blob/master/README.md (both to .NET Foundation, and a GitHub link to another project)\r\n\r\nThese links should all change to HTTPS.","Url":"https://github.com/dotnet/foundation/issues/107","RelatedDescription":"Open issue \"Links to .NET Foundation web site use HTTP instead of HTTPS\" (#107)"},{"Id":"340126921","IsPullRequest":false,"CreatedAt":"2018-07-11T07:41:25","Actor":"glatzert","Number":"106","RawContent":null,"Title":"Updates are not requested from local WSUS","State":"open","Body":"The Team somewhen Mention, that fixes should be installed automatically, if .NET Core is on a Windows Server.\r\nThis seems not to work. What are the prerequisits for this to be working?","Url":"https://github.com/dotnet/foundation/issues/106","RelatedDescription":"Open issue \"Updates are not requested from local WSUS\" (#106)"},{"Id":"326192782","IsPullRequest":true,"CreatedAt":"2018-05-24T16:33:09","Actor":"danmosemsft","Number":"103","RawContent":null,"Title":"Add ML.NET to readme","State":"closed","Body":"cc @shauheen @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/103","RelatedDescription":"Closed or merged PR \"Add ML.NET to readme\" (#103)"},{"Id":"279475345","IsPullRequest":true,"CreatedAt":"2018-05-18T19:10:06","Actor":"heiligerdankgesang","Number":"92","RawContent":null,"Title":"Remove contact email from system.drawing.md","State":"closed","Body":"Contact email is outdated. Mono-project site's community section has better, more up-to-date information.","Url":"https://github.com/dotnet/foundation/pull/92","RelatedDescription":"Closed or merged PR \"Remove contact email from system.drawing.md\" (#92)"},{"Id":"285274998","IsPullRequest":true,"CreatedAt":"2018-05-18T19:09:35","Actor":"onovotny","Number":"93","RawContent":null,"Title":"Add Humanizer","State":"closed","Body":"Onboarding Humanizer: https://github.com/Humanizr/Humanizer/issues/682","Url":"https://github.com/dotnet/foundation/pull/93","RelatedDescription":"Closed or merged PR \"Add Humanizer\" (#93)"},{"Id":"286511421","IsPullRequest":true,"CreatedAt":"2018-05-18T19:07:08","Actor":"ctaggart","Number":"94","RawContent":null,"Title":"add SourceLink","State":"closed","Body":"Adding SourceLink to the project list as per the checklist https://github.com/ctaggart/SourceLink/issues/138","Url":"https://github.com/dotnet/foundation/pull/94","RelatedDescription":"Closed or merged PR \"add SourceLink\" (#94)"},{"Id":"288415599","IsPullRequest":true,"CreatedAt":"2018-05-18T19:06:48","Actor":"bfistein","Number":"95","RawContent":null,"Title":"Fix broken logo URL","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/95","RelatedDescription":"Closed or merged PR \"Fix broken logo URL\" (#95)"},{"Id":"288749196","IsPullRequest":true,"CreatedAt":"2018-05-18T19:06:24","Actor":"galatrash","Number":"96","RawContent":null,"Title":"Adding DNN Platform.","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/96","RelatedDescription":"Closed or merged PR \"Adding DNN Platform.\" (#96)"},{"Id":"294070713","IsPullRequest":true,"CreatedAt":"2018-05-18T19:06:02","Actor":"karann-msft","Number":"98","RawContent":null,"Title":"Updates to reflect the latest information","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/98","RelatedDescription":"Closed or merged PR \"Updates to reflect the latest information\" (#98)"},{"Id":"316146229","IsPullRequest":true,"CreatedAt":"2018-05-18T19:05:34","Actor":"Cheesebaron","Number":"100","RawContent":null,"Title":"Create mvvmcross.md","State":"closed","Body":"Added MvvmCross as project as part of on-boarding.\r\n\r\nhttps://github.com/MvvmCross/MvvmCross/issues/2415","Url":"https://github.com/dotnet/foundation/pull/100","RelatedDescription":"Closed or merged PR \"Create mvvmcross.md\" (#100)"},{"Id":"321003666","IsPullRequest":true,"CreatedAt":"2018-05-18T19:05:07","Actor":"shauheen","Number":"102","RawContent":null,"Title":"Update projects.json adding MLNET","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/102","RelatedDescription":"Closed or merged PR \"Update projects.json adding MLNET\" (#102)"},{"Id":"321003407","IsPullRequest":true,"CreatedAt":"2018-05-18T19:04:23","Actor":"shauheen","Number":"101","RawContent":null,"Title":"Create mlnet.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/101","RelatedDescription":"Closed or merged PR \"Create mlnet.md\" (#101)"},{"Id":"293777118","IsPullRequest":true,"CreatedAt":"2018-03-29T07:03:03","Actor":"mairaw","Number":"97","RawContent":null,"Title":"update CLA PDF link","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/97","RelatedDescription":"Closed or merged PR \"update CLA PDF link\" (#97)"},{"Id":"307656482","IsPullRequest":false,"CreatedAt":"2018-03-22T14:02:36","Actor":"vvavrychuk","Number":"99","RawContent":null,"Title":"not working \"Linux Distribution\" dropdown on http://www.microsoft.com/net/learn/get-started/linux ","State":"open","Body":"On the page http://www.microsoft.com/net/learn/get-started/linux dropdown \"Linux Distribution\" has no effect on the installation instruction next to him (they are always displayed for RedHat).\r\n\r\n![screenshot from 2018-03-22 16-02-19](https://user-images.githubusercontent.com/152563/37775020-6ec5778e-2dea-11e8-9ea3-b33e26c1c4e1.png)\r\n","Url":"https://github.com/dotnet/foundation/issues/99","RelatedDescription":"Open issue \"not working \"Linux Distribution\" dropdown on http://www.microsoft.com/net/learn/get-started/linux \" (#99)"}],"ResultType":"GitHubIssue"},"CoreCLR-Issues":{"Issues":[{"Id":"385564050","IsPullRequest":true,"CreatedAt":"2018-11-29T04:20:54","Actor":"tannergooding","Number":"21274","RawContent":null,"Title":"Don't treat the Vector64/128/256<T> helper methods as intrinsic if featureSIMD is disabled","State":"open","Body":"This resolves https://github.com/dotnet/coreclr/issues/21257","Url":"https://github.com/dotnet/coreclr/pull/21274","RelatedDescription":"Open PR \"Don't treat the Vector64/128/256<T> helper methods as intrinsic if featureSIMD is disabled\" (#21274)"},{"Id":"385483989","IsPullRequest":true,"CreatedAt":"2018-11-29T04:04:09","Actor":"stephentoub","Number":"21254","RawContent":null,"Title":"Improve Enum.ToString perf for [Flags] enums","State":"closed","Body":"Two main changes:\r\n- Rather than using a StringBuilder to insert the strings for all of the constituent values, we track the constituent values in a span, summing the expected length, and then new up a string and copy the results directly into it.\r\n- When there's a single value that matches the supplied value, we just return the cached string rather than allocating a new one.\r\n\r\n| Method                                                   | Value                                      | Before Time (ns) | After Time (ns) | Before Alloc (b) | After Alloc (b) | Time Improvement | Alloc Improvement | \r\n|----------------------------------------------------------|--------------------------------------------|------------------|-----------------|------------------|-----------------|------------------|-------------------| \r\n| FlagsToString                                            | 2147483647                                 | 422.54           | 103.70           | 96               | 96              | 4.07x            | 1.00x             | \r\n| FlagsToString                                            |                                   Eighth   | 85.88            | 28.54           | 64               | 24              | 3.01x            | 2.67x             | \r\n| FlagsToString                                            | Eleventh, Twelth, Sixth, Seventh, Eighth | 385.98           | 83.00              | 128              | 128             | 4.65x            | 1.00x             | \r\n| FlagsToString |                     Fifth, Seventh | 139.75                                     | 58.62            | 80              | 80               | 2.38x           | 1.00x            |\r\n| FlagsToString                                            |                                    First   | 85.57            | 34.03           | 56               | 24              | 2.51x            | 2.33x             | \r\n| FlagsToString                                            |                                     None   | 53.49            | 26.92           | 24               | 24              | 1.99x            | 1.00x             | \r\n| FlagsToString                                            |                                   Twelth   | 90.19            | 29.13           | 64               | 24              | 3.10x            | 2.67x             | \r\n\r\ncc: @jkotas, @ahsonkhan, @GrabYourPitchforks, @joperezr ","Url":"https://github.com/dotnet/coreclr/pull/21254","RelatedDescription":"Closed or merged PR \"Improve Enum.ToString perf for [Flags] enums\" (#21254)"},{"Id":"385553344","IsPullRequest":false,"CreatedAt":"2018-11-29T03:24:54","Actor":"tannergooding","Number":"21273","RawContent":null,"Title":"Respect the precision specifier when formatting floats/doubles using 'E' or 'G'","State":"open","Body":"This was broken out of https://github.com/dotnet/coreclr/issues/19802\r\n\r\nCurrently when formatting a `Single`/`Double` using the `\"G\"`/`\"E\"` specifiers, we clamp the precision specifier to 17. We should remove this limitation and instead return the number of digits the user requested.","Url":"https://github.com/dotnet/coreclr/issues/21273","RelatedDescription":"Open issue \"Respect the precision specifier when formatting floats/doubles using 'E' or 'G'\" (#21273)"},{"Id":"385552931","IsPullRequest":false,"CreatedAt":"2018-11-29T03:22:59","Actor":"tannergooding","Number":"21272","RawContent":null,"Title":"Update the double/single formatter to return the shortest roundtrippable string","State":"open","Body":"This was broken out of https://github.com/dotnet/coreclr/issues/19802\r\n\r\nCurrently we, when using the `R` specifier, attempt to format to 15 digits, roundtrip back, and if the value does not equal, we reformat to 17 digits and return that value. This has a number of issues, including that it is less performant and is not always correct. The simplest fix is to always roundtrip to 17 digits, but this has the undesired side-effect of returning less user-friendly strings for some numbers.\r\n\r\nA more ideal fix would be to instead return the shortest roundtrippable string for a given value. There are several whitepapers on the subject and our current formatting algorithms (Dragon4 and Grisu3) both have sections in their whitepapers that cover this. This provides a good balance between being \"correct\" and returning \"user-friendly\" strings.","Url":"https://github.com/dotnet/coreclr/issues/21272","RelatedDescription":"Open issue \"Update the double/single formatter to return the shortest roundtrippable string\" (#21272)"},{"Id":"385551781","IsPullRequest":false,"CreatedAt":"2018-11-29T03:17:32","Actor":"tannergooding","Number":"21271","RawContent":null,"Title":"Support parsing `snan`","State":"open","Body":"The IEEE 754:2008 specification requires that we be able to recover a string matching \"snan\" (case-insensitive) with an optional preceding sign. We are not required to recover this to an actual `snan` and are permitted to silently convert it to a `qnan` (such as `double.NaN` or `float.NaN`) instead.\r\n\r\n@jkotas raised some concern around this on https://github.com/dotnet/coreclr/issues/19802 given that it may require a new public surface and due to it not being unusual to have `NaN` checked for by string comparison\r\n\r\nAt a minimum, we should update the invariant culture to check for `snan` and return `double.NaN` or `float.NaN`. Optionally, and if it is determined to not be breaking, we can add a `NumberFormatInfo.SignallingNaN` and provide culture specific `snan` information.\r\n\r\nI don't believe either of these should be considered breaking since we are only parsing new values. What could be breaking is if we start formatting `snan` to `NumberFormatInfo.SignallingNaN`, as that may break existing code that checks for `NaN` by string comparison (we currently don't, as IEEE allows us to silently convert a signalling NaN into the quiet nan string: \"NaN\").","Url":"https://github.com/dotnet/coreclr/issues/21271","RelatedDescription":"Open issue \"Support parsing `snan`\" (#21271)"},{"Id":"385548917","IsPullRequest":true,"CreatedAt":"2018-11-29T03:05:05","Actor":"AndyAyersMS","Number":"21270","RawContent":null,"Title":"Guarded devirtualization foundations [WIP]","State":"open","Body":"Exploratory changes to enable guarded devirtualization. See the design doc for motivation and discussion.\r\n\r\nThis series of changes mainly introduces the ability to do the proper transformation. The heuristics for when to transform and what to guess for are quite crude, but serve, for now, as a good stress test. The middle part of the commit stream includes some experimental runtime changes (thanks to @davidwrighton) that would support better decision making, but those have been undone by later commits. They will return at some point.\r\n\r\nI will likely split this up into a series of smaller PRs once I've thought though some of the open issues and figured out how I really want to refactor things. But I want to expose this now for some broader testing and early feedback.\r\n\r\ncc @dotnet/jit-contrib (feel free to comment, but don't feel obligated)\r\n\r\nCurrent crude heuristic has a pretty sizeable impact on code size:\r\n```\r\nPMI Diffs for System.Private.CoreLib.dll, framework assemblies for x64 default jit\r\nSummary:\r\n(Lower is better)\r\nTotal bytes of diff: 1923401 (5.15% of base)\r\n    diff is a regression.\r\nTop file regressions by size (bytes):\r\n      436212 : Microsoft.CodeAnalysis.VisualBasic.dasm (7.80% of base)\r\n      339130 : System.Private.Xml.dasm (9.37% of base)\r\n      330916 : Microsoft.CodeAnalysis.CSharp.dasm (7.60% of base)\r\n      105677 : System.Data.Common.dasm (8.07% of base)\r\n       97797 : System.Private.DataContractSerialization.dasm (12.75% of base)\r\n119 total files with size differences (0 improved, 119 regressed), 10 unchanged.\r\nTop method regressions by size (bytes):\r\n       19555 (150.86% of base) : Microsoft.CodeAnalysis.VisualBasic.dasm - BoundTreeVisitor`2:VisitInternal(ref,struct):long:this\r\n        8076 (96.52% of base) : Microsoft.CodeAnalysis.VisualBasic.dasm - BoundTreeVisitor`2:VisitInternal(ref,double):long:this\r\n        7747 (111.55% of base) : System.Private.Xml.dasm - XmlSerializationWriterCodeGen:WriteElements(ref,ref,ref,ref,ref,ref,bool,bool):this\r\n        7483 (51.50% of base) : System.Data.Common.dasm - XmlTreeGen:HandleTable(ref,ref,ref,bool):ref:this\r\n        7277 (111.64% of base) : Microsoft.CodeAnalysis.CSharp.dasm - BoundTreeVisitor`2:VisitInternal(ref,struct):long:this\r\nTop method improvements by size (bytes):\r\n        -790 (-4.49% of base) : Microsoft.CodeAnalysis.VisualBasic.dasm - Binder:ReportOverloadResolutionFailureForASingleCandidate(ref,ref,int,byref,struct,struct,bool,bool,bool,bool,ref,ref,bool,ref,ref):this\r\n        -155 (-16.47% of base) : Microsoft.CodeAnalysis.CSharp.dasm - IteratorStateMachine:.ctor(ref,ref,ref,int,bool,ref):this\r\n        -132 (-10.56% of base) : System.Net.Requests.dasm - FtpWebRequest:FinishRequestStage(int):int:this\r\n         -82 (-8.35% of base) : System.Net.Http.dasm - WinHttpRequestCallback:OnRequestSendingRequest(ref)\r\n         -67 (-32.84% of base) : System.Collections.NonGeneric.dasm - ReadOnlyCollectionBase:get_Count():int:this\r\nTop method regressions by size (percentage):\r\n         220 (1,047.62% of base) : System.Private.CoreLib.dasm - Progress`1:System.IProgress<T>.Report(struct):this\r\n         158 (831.58% of base) : Newtonsoft.Json.dasm - JToken:System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(ref):ref:this\r\n         189 (756.00% of base) : System.Private.DataContractSerialization.dasm - XmlWriterDelegator:WriteDecimal(struct):this\r\n         144 (600.00% of base) : System.Net.Requests.dasm - HttpWebResponse:Close():this\r\n         125 (568.18% of base) : System.Private.Xml.dasm - XmlBaseConverter:ToString(ref):ref:this\r\nTop method improvements by size (percentage):\r\n         -10 (-50.00% of base) : System.Private.CoreLib.dasm - CultureInfo:ToString():ref:this (2 base, 1 diff methods)\r\n         -18 (-50.00% of base) : System.Private.CoreLib.dasm - RuntimeAssembly:get_ManifestModule():ref:this (2 base, 1 diff methods)\r\n         -20 (-50.00% of base) : System.Private.CoreLib.dasm - FileStream:get_IsClosed():bool:this (2 base, 1 diff methods)\r\n         -24 (-50.00% of base) : System.Private.CoreLib.dasm - Hashtable:Add(ref,ref):this (2 base, 1 diff methods)\r\n          -9 (-50.00% of base) : System.Runtime.Extensions.dasm - ArrayList:get_Count():int:this (2 base, 1 diff methods)\r\n27393 total methods with size differences (129 improved, 27264 regressed), 163883 unchanged.\r\n```","Url":"https://github.com/dotnet/coreclr/pull/21270","RelatedDescription":"Open PR \"Guarded devirtualization foundations [WIP]\" (#21270)"},{"Id":"385540266","IsPullRequest":false,"CreatedAt":"2018-11-29T02:24:47","Actor":"AriNuer","Number":"21269","RawContent":null,"Title":"[arm64/linux]Sevaral tests failed in arm64_cross_checked_ubuntu16.04_r2r_jitstress1_tiered_tst","State":"open","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/arm64/job/jitstress/job/arm64_cross_checked_ubuntu16.04_r2r_jitstress1_tiered_tst/10/#showFailuresLink\r\n**Failed tests:**\r\nGC_Scenarios._GCSimulator_GCSimulator_360_GCSimulator_360_._GCSimulator_GCSimulator_360_GCSimulator_360_sh\r\nGC_Scenarios._GCSimulator_GCSimulator_324_GCSimulator_324_._GCSimulator_GCSimulator_324_GCSimulator_324_sh\r\nGC_Scenarios._GCSimulator_GCSimulator_201_GCSimulator_201_._GCSimulator_GCSimulator_201_GCSimulator_201_sh\r\nJIT_CodeGenBringUpTests._Swap_ro_Swap_ro_._Swap_ro_Swap_ro_sh\r\nJIT_CodeGenBringUpTests._DblSubConst_ro_DblSubConst_ro_._DblSubConst_ro_DblSubConst_ro_sh\r\nJIT_Directed._coverage_importer_stfldstatic1_il_r_stfldstatic1_il_r_._coverage_importer_stfldstatic1_il_r_stfldstatic1_il_r_sh\r\nJIT_HardwareIntrinsics._X86_Sse3_MoveHighAndDuplicate_ro_MoveHighAndDuplicate_ro_._X86_Sse3_MoveHighAndDuplicate_ro_MoveHighAndDuplicate_ro_sh\r\nJIT_HardwareIntrinsics._X86_Sse_StoreAlignedNonTemporal_ro_StoreAlignedNonTemporal_ro_._X86_Sse_StoreAlignedNonTemporal_ro_StoreAlignedNonTemporal_ro_sh\r\nJIT_IL_Conformance._Old_Conformance_Base_ble_r4_ble_r4_._Old_Conformance_Base_ble_r4_ble_r4_sh\r\nJIT_jit64._opt_cse_fieldexpr1_fieldexpr1_._opt_cse_fieldexpr1_fieldexpr1_sh\r\nJIT_opt._Inline_tests_Inline_Inline_._Inline_tests_Inline_Inline_sh\r\nJIT_Regression._CLR_x86_JIT_V2_0_Beta2_b309555_b309555_b309555_._CLR_x86_JIT_V2_0_Beta2_b309555_b309555_b309555_sh\r\nJIT_Regression._CLR_x86_JIT_V1_M10_b04306_b04306_b04306_._CLR_x86_JIT_V1_M10_b04306_b04306_b04306_sh\r\nJIT_SIMD._VectorDiv_ro_VectorDiv_ro_._VectorDiv_ro_VectorDiv_ro_sh\r\n**Some filed logs:**\r\nGC_Scenarios._GCSimulator_GCSimulator_360_GCSimulator_360_._GCSimulator_GCSimulator_360_GCSimulator_360_sh\r\n```\r\nGC_Scenarios._GCSimulator_GCSimulator_360_GCSimulator_360_._GCSimulator_GCSimulator_360_GCSimulator_360_sh [FAIL]\r\n        Test Infrastructure Failure: System.ComponentModel.Win32Exception (12): Cannot allocate memory\r\n           at Interop.Sys.ForkAndExecProcess(String filename, String[] argv, String[] envp, String cwd, Boolean redirectStdin, Boolean redirectStdout, Boolean redirectStderr, Boolean setUser, UInt32 userId, UInt32 groupId, Int32& lpChildPid, Int32& stdinFd, Int32& stdoutFd, Int32& stderrFd, Boolean shouldThrow) in /root/corefx-2230763/src/Common/src/Interop/Unix/System.Native/Interop.ForkAndExecProcess.cs:line 44\r\n           at System.Diagnostics.Process.StartCore(ProcessStartInfo startInfo) in /root/corefx-2230763/src/System.Diagnostics.Process/src/System/Diagnostics/Process.Unix.cs:line 329\r\n           at System.Diagnostics.Process.Start() in /root/corefx-2230763/src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs:line 1216\r\n           at CoreclrTestLib.CoreclrTestWrapperLib.RunTest(String executable, String outputFile, String errorFile) in /mnt/j/workspace/dotnet_coreclr/master/arm64_cross_checked_ubuntu16.04/tests/src/Common/Coreclr.TestWrapper/CoreclrTestWrapperLib.cs:line 199\r\n           at GC_Scenarios._GCSimulator_GCSimulator_360_GCSimulator_360_._GCSimulator_GCSimulator_360_GCSimulator_360_sh() in /mnt/j/workspace/dotnet_coreclr/master/arm64_cross_checked_ubuntu16.04/bin/tests/Linux.arm64.Checked/TestWrappers/GC.Scenarios/GC.Scenarios.XUnitWrapper.cs:line 22329\r\n        Expected: True\r\n        Actual:   False\r\n        Stack Trace:\r\n          /mnt/j/workspace/dotnet_coreclr/master/arm64_cross_checked_ubuntu16.04/bin/tests/Linux.arm64.Checked/TestWrappers/GC.Scenarios/GC.Scenarios.XUnitWrapper.cs(22369,0): at GC_Scenarios._GCSimulator_GCSimulator_360_GCSimulator_360_._GCSimulator_GCSimulator_360_GCSimulator_360_sh()\r\n```\r\nGC_Scenarios._GCSimulator_GCSimulator_324_GCSimulator_324_._GCSimulator_GCSimulator_324_GCSimulator_324_sh\r\n```\r\nGC_Scenarios._GCSimulator_GCSimulator_324_GCSimulator_324_._GCSimulator_GCSimulator_324_GCSimulator_324_sh [FAIL]\r\n        /n/nReturn code:      139/nRaw output file:      /home/robox/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_r2r_jitstress1_tiered_tst/bin/tests/Linux.arm64.Checked/GC/Scenarios/Reports/GC.Scenarios/GCSimulator/GCSimulator_324/GCSimulator_324.output.txt/nRaw output:/nTest Harness Exitcode is : 139\r\n        /nTo run the test:/n> set CORE_ROOT=/home/robox/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_r2r_jitstress1_tiered_tst/bin/tests/Linux.arm64.Checked/Tests/Core_Root/n> /home/robox/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_r2r_jitstress1_tiered_tst/bin/tests/Linux.arm64.Checked/GC/Scenarios/GCSimulator/GCSimulator_324/GCSimulator_324.sh/n\r\n        Expected: True\r\n        Actual:   False\r\n        Stack Trace:\r\n          /mnt/j/workspace/dotnet_coreclr/master/arm64_cross_checked_ubuntu16.04/bin/tests/Linux.arm64.Checked/TestWrappers/GC.Scenarios/GC.Scenarios.XUnitWrapper.cs(19569,0): at GC_Scenarios._GCSimulator_GCSimulator_324_GCSimulator_324_._GCSimulator_GCSimulator_324_GCSimulator_324_sh()\r\n```\r\nJIT_Directed._coverage_importer_stfldstatic1_il_r_stfldstatic1_il_r_._coverage_importer_stfldstatic1_il_r_stfldstatic1_il_r_sh\r\n```\r\nJIT_Directed._coverage_importer_stfldstatic1_il_r_stfldstatic1_il_r_._coverage_importer_stfldstatic1_il_r_stfldstatic1_il_r_sh [FAIL]\r\n           at Interop.Sys.ForkAndExecProcess(String filename, String[] argv, String[] envp, String cwd, Boolean redirectStdin, Boolean redirectStdout, Boolean redirectStderr, Boolean setUser, UInt32 userId, UInt32 groupId, Int32& lpChildPid, Int32& stdinFd, Int32& stdoutFd, Int32& stderrFd, Boolean shouldThrow) in /root/corefx-2230763/src/Common/src/Interop/Unix/System.Native/Interop.ForkAndExecProcess.cs:line 44\r\n           at System.Diagnostics.Process.StartCore(ProcessStartInfo startInfo) in /root/corefx-2230763/src/System.Diagnostics.Process/src/System/Diagnostics/Process.Unix.cs:line 329\r\n           at System.Diagnostics.Process.Start() in /root/corefx-2230763/src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs:line 1216\r\n           at CoreclrTestLib.CoreclrTestWrapperLib.RunTest(String executable, String outputFile, String errorFile) in /mnt/j/workspace/dotnet_coreclr/master/arm64_cross_checked_ubuntu16.04/tests/src/Common/Coreclr.TestWrapper/CoreclrTestWrapperLib.cs:line 199\r\n           at JIT_Directed._coverage_importer_stfldstatic1_il_r_stfldstatic1_il_r_._coverage_importer_stfldstatic1_il_r_stfldstatic1_il_r_sh() in /mnt/j/workspace/dotnet_coreclr/master/arm64_cross_checked_ubuntu16.04/bin/tests/Linux.arm64.Checked/TestWrappers/JIT.Directed/JIT.Directed.XUnitWrapper.cs:line 10149\r\n        Expected: True\r\n        Actual:   False\r\n        Stack Trace:\r\n          /mnt/j/workspace/dotnet_coreclr/master/arm64_cross_checked_ubuntu16.04/bin/tests/Linux.arm64.Checked/TestWrappers/JIT.Directed/JIT.Directed.XUnitWrapper.cs(10189,0): at JIT_Directed._coverage_importer_stfldstatic1_il_r_stfldstatic1_il_r_._coverage_importer_stfldstatic1_il_r_stfldstatic1_il_r_sh()\r\n```\r\nJIT_opt._Inline_tests_Inline_Inline_._Inline_tests_Inline_Inline_sh\r\n```\r\nJIT_opt._Inline_tests_Inline_Inline_._Inline_tests_Inline_Inline_sh [FAIL]\r\n        /home/robox/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_r2r_jitstress1_tiered_tst/bin/tests/Linux.arm64.Checked/JIT/opt/Inline/tests/Inline/Inline.sh: fork: Cannot allocate memory\r\n        /n/nReturn code:      254/nRaw output file:      /home/robox/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_r2r_jitstress1_tiered_tst/bin/tests/Linux.arm64.Checked/JIT/opt/Reports/JIT.opt/Inline/tests/Inline/Inline.output.txt/nRaw output:/nBEGIN EXECUTION\r\n        in takeLock\r\n        Test Harness Exitcode is : 254\r\n        /nTo run the test:/n> set CORE_ROOT=/home/robox/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_r2r_jitstress1_tiered_tst/bin/tests/Linux.arm64.Checked/Tests/Core_Root/n> /home/robox/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_r2r_jitstress1_tiered_tst/bin/tests/Linux.arm64.Checked/JIT/opt/Inline/tests/Inline/Inline.sh/n\r\n        Expected: True\r\n        Actual:   False\r\n        Stack Trace:\r\n          /mnt/j/workspace/dotnet_coreclr/master/arm64_cross_checked_ubuntu16.04/bin/tests/Linux.arm64.Checked/TestWrappers/JIT.opt/JIT.opt.XUnitWrapper.cs(5499,0): at JIT_opt._Inline_tests_Inline_Inline_._Inline_tests_Inline_Inline_sh()\r\n```\r\n","Url":"https://github.com/dotnet/coreclr/issues/21269","RelatedDescription":"Open issue \"[arm64/linux]Sevaral tests failed in arm64_cross_checked_ubuntu16.04_r2r_jitstress1_tiered_tst\" (#21269)"},{"Id":"385494772","IsPullRequest":true,"CreatedAt":"2018-11-29T02:23:00","Actor":"cshung","Number":"21260","RawContent":null,"Title":"Remove obsolete assert","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/21260","RelatedDescription":"Closed or merged PR \"Remove obsolete assert\" (#21260)"},{"Id":"385529485","IsPullRequest":false,"CreatedAt":"2018-11-29T01:34:51","Actor":"Fabi","Number":"21268","RawContent":null,"Title":"Setting static readonly properties fails","State":"open","Body":"Hey after updating to the latest .net core 3.0 version today I noticed that setting fields like `public static LogTypes LogLevel { get; }` through the backing field with FieldInfo.SetValue isn't longer working. \r\n\r\nIt's throwing `$exception    {System.FieldAccessException: Cannot set initonly static field '<LogLevel>k__BackingField' after type 'Arctium.Manager.Misc.ManagerConfig' is initialized.` now.\r\n\r\nThe base class got a static Initialize method that is setting all values of the config class at runtime.\r\n\r\nThe class I'm walking about can be found here: https://github.com/Arctium/WildStar-Server/blob/master/src/Arctium.Manager/src/Misc/ManagerConfig.cs\r\n\r\nI saw that this was updated here: https://github.com/dotnet/coreclr/commit/c2abe892b227740c4b8baa51f5433dfc1101a52f#diff-a07ab78d2f4a1c72865756edae89399c\r\n","Url":"https://github.com/dotnet/coreclr/issues/21268","RelatedDescription":"Open issue \"Setting static readonly properties fails\" (#21268)"},{"Id":"385526337","IsPullRequest":true,"CreatedAt":"2018-11-29T01:19:29","Actor":"BruceForstall","Number":"21267","RawContent":null,"Title":"Fix ObjectStackAllocationTests on Linux under minopts","State":"open","Body":"Fix the capitalization of COMPlus_JITMinOpts variable, which\r\nis case-sensitive on Linux.\r\n\r\nFixes #21266","Url":"https://github.com/dotnet/coreclr/pull/21267","RelatedDescription":"Open PR \"Fix ObjectStackAllocationTests on Linux under minopts\" (#21267)"},{"Id":"385524829","IsPullRequest":false,"CreatedAt":"2018-11-29T01:12:13","Actor":"BruceForstall","Number":"21266","RawContent":null,"Title":"[Linux] ObjectStackAllocationTests fails in minopts","State":"open","Body":"E.g., for arm32:\r\n\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/arm/job/jitstress/job/arm_cross_checked_ubuntu_minopts_flow/40/\r\n\r\narm64:\r\n\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/arm64/job/jitstress/job/arm64_cross_checked_ubuntu16.04_minopts_flow/66/\r\n\r\n```\r\nJIT_opt._ObjectStackAllocation_ObjectStackAllocationTests_ObjectStackAllocationTests_._ObjectStackAllocation_ObjectStackAllocationTests_ObjectStackAllocationTests_sh [FAIL]\r\n10:07:40         /n/nReturn code:      1/nRaw output file:      /ssd/j/workspace/dotnet_coreclr/master/jitstress/arm_cross_checked_ubuntu_minopts_tst/bin/tests/Linux.arm.Checked/JIT/opt/Reports/JIT.opt/ObjectStackAllocation/ObjectStackAllocationTests/ObjectStackAllocationTests.output.txt/nRaw output:/nBEGIN EXECUTION\r\n10:07:40         /ssd/j/workspace/dotnet_coreclr/master/jitstress/arm_cross_checked_ubuntu_minopts_tst/bin/tests/Linux.arm.Checked/Tests/Core_Root/corerun ObjectStackAllocationTests.exe\r\n10:07:40         FAILURE (AllocateSimpleClassAndAddFields): unexpected allocation of 16 bytes\r\n10:07:40         FAILURE (AllocateSimpleClassesAndEQCompareThem): unexpected allocation of 32 bytes\r\n10:07:40         FAILURE (AllocateSimpleClassesAndNECompareThem): unexpected allocation of 32 bytes\r\n10:07:40         FAILURE (AllocateSimpleClassAndGetField): unexpected allocation of 16 bytes\r\n10:07:40         FAILURE (AllocateClassWithNestedStructAndGetField): unexpected allocation of 24 bytes\r\n10:07:40         FAILURE (AllocateClassWithNestedStructAndAddFields): unexpected allocation of 24 bytes\r\n10:07:40         SUCCESS (AllocateSimpleClassAndCheckType)\r\n10:07:40         SUCCESS (AllocateSimpleClassAndCast)\r\n10:07:41         SUCCESS (AllocateSimpleClassWithGCFieldAndAddFields)\r\n10:07:41         SUCCESS (AllocateSimpleClassAndAssignRefToAField)\r\n10:07:41         SUCCESS (BoxSimpleStructAndAddFields)\r\n10:07:41         Expected: 100\r\n10:07:41         Actual: 255\r\n10:07:41         END EXECUTION - FAILED\r\n10:07:41         Test Harness Exitcode is : 1\r\n10:07:41         /nTo run the test:/n> set CORE_ROOT=/ssd/j/workspace/dotnet_coreclr/master/jitstress/arm_cross_checked_ubuntu_minopts_tst/bin/tests/Linux.arm.Checked/Tests/Core_Root/n> /ssd/j/workspace/dotnet_coreclr/master/jitstress/arm_cross_checked_ubuntu_minopts_tst/bin/tests/Linux.arm.Checked/JIT/opt/ObjectStackAllocation/ObjectStackAllocationTests/ObjectStackAllocationTests.sh/n\r\n10:07:41         Expected: True\r\n10:07:41         Actual:   False\r\n10:07:41         Stack Trace:\r\n10:07:41           /mnt/j/workspace/dotnet_coreclr/master/arm_cross_checked_ubuntu/bin/tests/Linux.arm.Checked/TestWrappers/JIT.opt/JIT.opt.XUnitWrapper.cs(8439,0): at JIT_opt._ObjectStackAllocation_ObjectStackAllocationTests_ObjectStackAllocationTests_._ObjectStackAllocation_ObjectStackAllocationTests_ObjectStackAllocationTests_sh()\r\n```\r\n","Url":"https://github.com/dotnet/coreclr/issues/21266","RelatedDescription":"Open issue \"[Linux] ObjectStackAllocationTests fails in minopts\" (#21266)"},{"Id":"385518782","IsPullRequest":true,"CreatedAt":"2018-11-29T00:44:40","Actor":"AaronRobinsonMSFT","Number":"21265","RawContent":null,"Title":"Enable type equivalence","State":"open","Body":"Enabling the `TypeEquivalence` feature. I have verified the supplied simple test does exercise the desired code path.\r\n\r\nThis PR represents the feature and simplest test. A subsequent PR will add additional testing.\r\n\r\ncc @davidwrighton @jeffschwMSFT @jkotas ","Url":"https://github.com/dotnet/coreclr/pull/21265","RelatedDescription":"Open PR \"Enable type equivalence\" (#21265)"},{"Id":"385517280","IsPullRequest":true,"CreatedAt":"2018-11-29T00:37:10","Actor":"fiigii","Number":"21264","RawContent":null,"Title":" Implement 64-bit-only hardware intrinsic","State":"open","Body":"This PR implements 64-bit-only hardware intrinsic that are exposed in `X64` nested classes.\r\n\r\nIn the next PR, I will implement the remaining BMI1/2 intrinsic and move more tests to the template framework.\r\n\r\nImplement https://github.com/dotnet/coreclr/pull/20146 in JIT and  close https://github.com/dotnet/coreclr/issues/21042.","Url":"https://github.com/dotnet/coreclr/pull/21264","RelatedDescription":"Open PR \" Implement 64-bit-only hardware intrinsic\" (#21264)"},{"Id":"385509234","IsPullRequest":true,"CreatedAt":"2018-11-29T00:00:16","Actor":"adiaaida","Number":"21263","RawContent":null,"Title":"Specify path to python3.5 for perf jobs (#20443)","State":"open","Body":"* Specify path to python3.5 for perf jobs\r\n\r\n* Change path to python in throughput testing","Url":"https://github.com/dotnet/coreclr/pull/21263","RelatedDescription":"Open PR \"Specify path to python3.5 for perf jobs (#20443)\" (#21263)"},{"Id":"385509084","IsPullRequest":true,"CreatedAt":"2018-11-28T23:59:39","Actor":"adiaaida","Number":"21262","RawContent":null,"Title":"Specify path to python3.5 for perf jobs (#20443)","State":"open","Body":"* Specify path to python3.5 for perf jobs\r\n\r\n* Change path to python in throughput testing","Url":"https://github.com/dotnet/coreclr/pull/21262","RelatedDescription":"Open PR \"Specify path to python3.5 for perf jobs (#20443)\" (#21262)"},{"Id":"385502970","IsPullRequest":true,"CreatedAt":"2018-11-28T23:33:38","Actor":"AaronRobinsonMSFT","Number":"21261","RawContent":null,"Title":"Update how CoreDisTools is discovered","State":"open","Body":"Fixes #21221\r\n\r\nReverts #21222\r\n\r\ncc @sandreenko @davidwrighton ","Url":"https://github.com/dotnet/coreclr/pull/21261","RelatedDescription":"Open PR \"Update how CoreDisTools is discovered\" (#21261)"},{"Id":"385494683","IsPullRequest":true,"CreatedAt":"2018-11-28T23:02:08","Actor":"tannergooding","Number":"21259","RawContent":null,"Title":"Implement the Count property, the IEquatable and IFormattable interfaces, and the standard object overrides on Vector64/128/256<T>","State":"open","Body":"This resolves https://github.com/dotnet/corefx/issues/33613 and https://github.com/dotnet/corefx/issues/33614","Url":"https://github.com/dotnet/coreclr/pull/21259","RelatedDescription":"Open PR \"Implement the Count property, the IEquatable and IFormattable interfaces, and the standard object overrides on Vector64/128/256<T>\" (#21259)"},{"Id":"385492991","IsPullRequest":true,"CreatedAt":"2018-11-28T22:56:26","Actor":"adiaaida","Number":"21258","RawContent":null,"Title":"[WIP] Move the perf jobs to Windows.10.Amd64.ClientRS4.DevEx.15.8.Open","State":"open","Body":"We have moved the python3 artifact to the base Windows queue, so we do not need to specifically use the Perf queue anymore.","Url":"https://github.com/dotnet/coreclr/pull/21258","RelatedDescription":"Open PR \"[WIP] Move the perf jobs to Windows.10.Amd64.ClientRS4.DevEx.15.8.Open\" (#21258)"},{"Id":"385486469","IsPullRequest":false,"CreatedAt":"2018-11-28T22:35:56","Actor":"BruceForstall","Number":"21257","RawContent":null,"Title":"Assertion failed 'featureSIMD'","State":"open","Body":"In\r\n\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/x64/job/jitstress/job/x64_checked_windows_nt_jitx86hwintrinsicnosimd/297\r\n\r\njob, with:\r\n```\r\nset COMPlus_TieredCompilation=0\r\nset COMPlus_EnableIncompleteISAClass=1\r\nset COMPlus_FeatureSIMD=0  \r\n```\r\n\r\nFailed tests: \r\n```\r\nJIT_HardwareIntrinsics._General_Vector128_Vector128_ro_Vector128_ro_._General_Vector128_Vector128_ro_Vector128_ro_cmd\r\nJIT_HardwareIntrinsics._General_Vector256_Vector256_r_Vector256_r_._General_Vector256_Vector256_r_Vector256_r_cmd\r\nJIT_HardwareIntrinsics._General_Vector256_1_Vector256_1_ro_Vector256_1_ro_._General_Vector256_1_Vector256_1_ro_Vector256_1_ro_cmd\r\nJIT_HardwareIntrinsics._General_Vector64_1_Vector64_1_r_Vector64_1_r_._General_Vector64_1_Vector64_1_r_Vector64_1_r_cmd\r\nJIT_HardwareIntrinsics._General_Vector256_Vector256_ro_Vector256_ro_._General_Vector256_Vector256_ro_Vector256_ro_cmd\r\nJIT_HardwareIntrinsics._X86_Avx2_GatherMaskVector128_r_GatherMaskVector128_r_._X86_Avx2_GatherMaskVector128_r_GatherMaskVector128_r_cmd\r\nJIT_HardwareIntrinsics._General_NotSupported_NotSupported_r_NotSupported_r_._General_NotSupported_NotSupported_r_NotSupported_r_cmd\r\nJIT_HardwareIntrinsics._X86_General_VectorUnused_r_VectorUnused_r_._X86_General_VectorUnused_r_VectorUnused_r_cmd\r\nJIT_HardwareIntrinsics._X86_Sse2_MaskMove_r_MaskMove_r_._X86_Sse2_MaskMove_r_MaskMove_r_cmd\r\nJIT_HardwareIntrinsics._X86_Avx2_GatherMaskVector256_r_GatherMaskVector256_r_._X86_Avx2_GatherMaskVector256_r_GatherMaskVector256_r_cmd\r\nJIT_HardwareIntrinsics._General_Vector64_1_Vector64_1_ro_Vector64_1_ro_._General_Vector64_1_Vector64_1_ro_Vector64_1_ro_cmd\r\nJIT_HardwareIntrinsics._General_NotSupported_NotSupported_ro_NotSupported_ro_._General_NotSupported_NotSupported_ro_NotSupported_ro_cmd\r\nJIT_HardwareIntrinsics._General_Vector128_Vector128_r_Vector128_r_._General_Vector128_Vector128_r_Vector128_r_cmd\r\nJIT_HardwareIntrinsics._General_Vector128_1_Vector128_1_ro_Vector128_1_ro_._General_Vector128_1_Vector128_1_ro_Vector128_1_ro_cmd\r\nJIT_HardwareIntrinsics._General_Vector128_1_Vector128_1_r_Vector128_1_r_._General_Vector128_1_Vector128_1_r_Vector128_1_r_cmd\r\nJIT_HardwareIntrinsics._General_Vector256_1_Vector256_1_r_Vector256_1_r_._General_Vector256_1_Vector256_1_r_Vector256_1_r_cmd\r\n```\r\n\r\n```\r\n        Assert failure(PID 7884 [0x00001ecc], Thread: 7964 [0x1f1c]): Assertion failed 'featureSIMD' in 'JIT.HardwareIntrinsics.General.VectorCreate__CreateScalarByte:RunBasicScenario():this' (IL size 37)\r\n05:31:13         \r\n05:31:13             File: d:\\j\\workspace\\x64_checked_w---2304cfbe\\src\\jit\\simd.cpp Line: 124\r\n05:31:13             Image: D:\\j\\workspace\\x64_checked_w---2304cfbe\\bin\\tests\\Windows_NT.x64.Checked\\Tests\\Core_Root\\CoreRun.exe\r\n```\r\n","Url":"https://github.com/dotnet/coreclr/issues/21257","RelatedDescription":"Open issue \"Assertion failed 'featureSIMD'\" (#21257)"},{"Id":"385484688","IsPullRequest":true,"CreatedAt":"2018-11-28T22:30:08","Actor":"ritchxu","Number":"21256","RawContent":null,"Title":"Clarify use of LoadFromAssemblyName method","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/21256","RelatedDescription":"Open PR \"Clarify use of LoadFromAssemblyName method\" (#21256)"},{"Id":"385484594","IsPullRequest":true,"CreatedAt":"2018-11-28T22:29:49","Actor":"brianrob","Number":"21255","RawContent":null,"Title":"Defer Initialization of FrameworkEventSource During EventPipeController Initialization","State":"open","Body":"EventPipeController is initialized right before Main is called.  The goal is to do very little work during initialization unless tracing is enabled.  Because EventPipeController initialization creates a timer, and timer creation uses FrameworkEventSource, this path faults in initialization of FrameworkEventSource on the start-up path.\r\n\r\nTo fix this, we don't emit the FrameworkEventSource event for timer creation during EventPipeController initialization.  With this change we no longer see the following class constructor call for FrameworkEventSource:\r\n\r\n```\r\n+ system.private.corelib!EventSource.Initialize\r\n+ system.private.corelib!System.Diagnostics.Tracing.FrameworkEventSource..ctor()\r\n+ system.private.corelib!System.Diagnostics.Tracing.FrameworkEventSource..cctor()\r\n+ coreclr!CallDescrWorkerInternal\r\n+ coreclr!DispatchCallDebuggerWrapper\r\n+ coreclr!DispatchCallSimple\r\n+ coreclr!MethodTable::RunClassInitEx\r\n+ coreclr!MethodTable::DoRunClassInitThrowing\r\n+ coreclr!MethodTable::CheckRunClassInitThrowing\r\n+ coreclr!JIT_GetSharedGCStaticBase_Helper\r\n+ system.private.corelib!TimerQueueTimer.Change\r\n+ system.private.corelib!EventPipeController.PollForTracingCommand\r\n+ system.private.corelib!EventPipeController.Initialize\r\n+ system.private.corelib!StartupHookProvider.ProcessStartupHooks\r\n+ coreclr!CallDescrWorkerInternal\r\n```","Url":"https://github.com/dotnet/coreclr/pull/21255","RelatedDescription":"Open PR \"Defer Initialization of FrameworkEventSource During EventPipeController Initialization\" (#21255)"},{"Id":"385482561","IsPullRequest":false,"CreatedAt":"2018-11-28T22:23:20","Actor":"BruceForstall","Number":"21253","RawContent":null,"Title":"[Windows/x64] GCStress tests all fail due to timeout AFTER tests have been run","State":"open","Body":"For all the recent Windows x64 GCStress-related jobs I looked at, the xunit run has completed (with some tests failed in all cases), and xunit has printed out the \"GRAND TOTAL\" line, but then it appears to hang. Then, the job either hangs, or, more likely, loses the Jenkins connection at some point.\r\n\r\ne.g., from a console log:\r\n```\r\n23:41:30                                                 GRAND TOTAL: 10356          0          4           0        97309.608s (9951.395s)\r\n07:47:46 FATAL: command execution failed\r\n07:47:46 java.nio.channels.ClosedChannelException\r\n```\r\n\r\nNote how long it was sitting at the \"GRAND TOTAL\" line: about 8 hours.\r\n\r\nSome jobs showing this behavior:\r\n\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/x64/job/jitstress/job/x64_checked_windows_nt_gcstress0xc/116/consoleFull\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/x64/job/jitstress/job/x64_checked_windows_nt_gcstress0xc_jitstress1/112/consoleFull\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/x64/job/jitstress/job/x64_checked_windows_nt_gcstress0xc_jitstress2/110/consoleFull\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/x64/job/jitstress/job/x64_checked_windows_nt_gcstress0xc_minopts_heapverify1/110/consoleFull\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/x64/job/jitstress/job/x64_checked_windows_nt_gcstress0xc_zapdisable_heapverify1/109/consoleFull\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/x64/job/jitstress/job/x64_checked_windows_nt_gcstress0xc_zapdisable_jitstress2/114/consoleFull\r\n","Url":"https://github.com/dotnet/coreclr/issues/21253","RelatedDescription":"Open issue \"[Windows/x64] GCStress tests all fail due to timeout AFTER tests have been run\" (#21253)"},{"Id":"385478503","IsPullRequest":true,"CreatedAt":"2018-11-28T22:10:43","Actor":"jashook","Number":"21252","RawContent":null,"Title":"SuperPMI Collection/AsmDiff/Replay tool","State":"open","Body":"This change adds superpmi.py. The tool feature three modes, collection, replay, and asmdiffs.\r\n\r\n### Collection\r\n\r\nThe collection logic is very similar to the logic in our superpmi-collect test. Mostly it just allows running a script which will run managed code and it will produce a .mch which is clean to be run against. See superpmi.md for more information on specific usage and problems.\r\n\r\n### Replay\r\n\r\nReplay will take an existing .mch file and run the current jit over the collection. If there is no .mch file on disk, the script will download the latest collection and run against that.\r\n\r\n### AsmDiffs\r\n\r\nsuperpmi.md has the latest information on what platforms support asmdiffs. So far, I have an updated OSX and Windows collection that I have run against. If there are binary diffs, the tool will automatically generate base & diff folders with the asm under each one. Future work would include automatically running jit-analyze over those locations.\r\n\r\nIn addition, the tool has the option to automatically run and diff jit dumps, I have found this to be useful to looking into diffs created, as re-running superpmi with different jits to collect this same information is somewhat tedious.\r\n\r\n### Future work\r\n\r\nThis change is in no way the end of the work needed to leverage superpmi effectively. Instead, it is a good first step. Below are some suggestions for future superpmi work:\r\n\r\n1. Automated collections\r\n2. Add pmi collection support\r\n3. Leverage some of the new corefx work to use superpmi shim for collections of corefx runs\r\n\r\n### To be added/changed\r\n\r\n1. I will unset zapdisable being set by default, it creates too much data, although it is useful it should be opt in\r\n2. Will include example usage in superpmi.md.\r\n3. coreclr-arguments.py and run-pmi.py will conflict with https://github.com/dotnet/coreclr/pull/20812, will merge https://github.com/dotnet/coreclr/pull/20812 first then handle the merge issues.\r\n\r\n/cc @dotnet/jit-contrib ","Url":"https://github.com/dotnet/coreclr/pull/21252","RelatedDescription":"Open PR \"SuperPMI Collection/AsmDiff/Replay tool\" (#21252)"},{"Id":"385464475","IsPullRequest":true,"CreatedAt":"2018-11-28T21:28:47","Actor":"AndyAyersMS","Number":"21251","RawContent":null,"Title":"Track single def locals in importer","State":"open","Body":"Two separate commits (currently).\r\n\r\nFirst just refactors existing use of `lvSingleDef` and is no diff. \r\n\r\nSecond repurposes `lvSingleDef` early to keep track of locals that are amenable to type updates, and then adds some type propagation to the late devirtualization callback.","Url":"https://github.com/dotnet/coreclr/pull/21251","RelatedDescription":"Open PR \"Track single def locals in importer\" (#21251)"},{"Id":"385421525","IsPullRequest":true,"CreatedAt":"2018-11-28T21:23:23","Actor":"RussKeldorph","Number":"21248","RawContent":null,"Title":"Update Helix queues used for testing","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/21248","RelatedDescription":"Closed or merged PR \"Update Helix queues used for testing\" (#21248)"},{"Id":"385447677","IsPullRequest":true,"CreatedAt":"2018-11-28T20:40:28","Actor":"kouvel","Number":"21250","RawContent":null,"Title":"[WIP] Test vtable slot patching","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/21250","RelatedDescription":"Open PR \"[WIP] Test vtable slot patching\" (#21250)"},{"Id":"385423476","IsPullRequest":true,"CreatedAt":"2018-11-28T19:32:08","Actor":"tannergooding","Number":"21249","RawContent":null,"Title":"Updating genSIMDZero to only use `xorps`","State":"open","Body":"I believe this is the \"smallest\" targeted fix for https://github.com/dotnet/coreclr/issues/21105","Url":"https://github.com/dotnet/coreclr/pull/21249","RelatedDescription":"Open PR \"Updating genSIMDZero to only use `xorps`\" (#21249)"},{"Id":"385367111","IsPullRequest":false,"CreatedAt":"2018-11-28T17:02:13","Actor":"gfoidl","Number":"21247","RawContent":null,"Title":"!Avx.Test{Z,C} suboptimal codegen","State":"open","Body":"`!Avx.TestZ` and `!Avx.TestC` produce suboptimal code, can be shown with a simple repro:\r\n\r\n```c#\r\nusing System.Runtime.CompilerServices;\r\nusing System.Runtime.Intrinsics;\r\nusing System.Runtime.Intrinsics.X86;\r\n\r\nnamespace ConsoleApp3\r\n{\r\n    class Program\r\n    {\r\n        static int Main(string[] args)\r\n        {\r\n            Vector256<sbyte> a = Avx.SetAllVector256<sbyte>(-42);\r\n            Vector256<sbyte> b = Avx.SetAllVector256<sbyte>(42);\r\n\r\n            bool res = Foo(a, b);\r\n\r\n            return res ? 1 : 0;\r\n        }\r\n\r\n        [MethodImpl(MethodImplOptions.NoInlining)]\r\n        private static bool Foo(Vector256<sbyte> a, Vector256<sbyte> b)\r\n        {\r\n            return !Avx.TestZ(a, b);\r\n        }\r\n    }\r\n}\r\n```\r\nresults in (method `Foo`):\r\n```asm\r\nG_M7898_IG01:\r\n       C5F877               vzeroupper \r\n       6690                 nop      \r\n\r\nG_M7898_IG02:\r\n       C4E17D10442408       vmovupd  ymm0, ymmword ptr[rsp+08H]\r\n       C4E27D17442428       vptest   ymm0, ymmword ptr[rsp+28H]\r\n       0F94C0               sete     al\r\n       0FB6C0               movzx    rax, al\r\n       85C0                 test     eax, eax\r\n       0F94C0               sete     al\r\n       0FB6C0               movzx    rax, al\r\n\r\nG_M7898_IG03:\r\n       C5F877               vzeroupper \r\n       C3                   ret      \r\n```\r\nEven withoud `NoInlining` this not ideal pattern can be seen.\r\n\r\nInstead of the additional `test`-part, `setne` would be enough:\r\n```diff\r\nG_M7898_IG01:\r\n       C5F877               vzeroupper\r\n       6690                 nop\r\n\r\nG_M7898_IG02:\r\n       C4E17D10442408       vmovupd  ymm0, ymmword ptr[rsp+08H]\r\n       C4E27D17442428       vptest   ymm0, ymmword ptr[rsp+28H]\r\n-      0F94C0               sete     al\r\n-      0FB6C0               movzx    rax, al\r\n-      85C0                 test     eax, eax\r\n-      0F94C0               sete     al\r\n+      0F94C0               setne    al\r\n       0FB6C0               movzx    rax, al\r\n\r\nG_M7898_IG03:\r\n       C5F877               vzeroupper\r\n       C3                   ret\r\n```\r\n`COMPlus_TieredCompilation=0` is set, so it is tier-1 code.\r\n\r\nCodegen for the \"positive\" case (i.e. `Avx.TestZ` and `Avx.TestC`) is optimal.","Url":"https://github.com/dotnet/coreclr/issues/21247","RelatedDescription":"Open issue \"!Avx.Test{Z,C} suboptimal codegen\" (#21247)"},{"Id":"385303651","IsPullRequest":false,"CreatedAt":"2018-11-28T14:51:00","Actor":"ritchxu","Number":"21246","RawContent":null,"Title":"Achieve AppDomain.CreateInstanceAndUnwrap with AssemblyLoadContext","State":"open","Body":"Is following a valid porting from .NET to .NET Core regarding use of AppDomain?\r\n\r\n`AppDomain` in .NET\r\n```\r\npublic static TypeABC CreateInstanceInDomain(AppDomain appDomain)\r\n{\r\n     return (TypeABC)appDomain.CreateInstanceAndUnwrap(typeof(TypeABC).Assembly.FullName, typeof(TypeABC).FullName);\r\n}\r\n```\r\n`AssemblyLoadContext` in .NET Core\r\n```\r\npublic static TypeABC CreateInstanceInDomain()\r\n{\r\n     // AssemblyLoadContext loads assembly into a load context different from that of the currently executing assembly\r\n     Assembly loadContextAssembly = AssemblyLoadContext.Default.LoadFromAssemblyName(typeof(TypeABC).Assembly.GetName());\r\n     return (TypeABC)loadContextAssembly.CreateInstance(typeof(TypeABC).FullName);\r\n}\r\n```","Url":"https://github.com/dotnet/coreclr/issues/21246","RelatedDescription":"Open issue \"Achieve AppDomain.CreateInstanceAndUnwrap with AssemblyLoadContext\" (#21246)"},{"Id":"385269246","IsPullRequest":true,"CreatedAt":"2018-11-28T13:31:40","Actor":"benaadams","Number":"21245","RawContent":null,"Title":"Allow Task.WaitAny completion to run synchronously","State":"open","Body":"Following on from \"Allow some ITaskCompletionActions to always run synchronously\" https://github.com/dotnet/coreclr/pull/2718 which worked for `Task.Wait` and `Task.WaitAll` to release the calling thread rather than queuing a callback when not a valid inline; extend this to `Task.WaitAny` which is also releasing a blocked thread in same way, rather than running potentially unknown long running code.\r\n\r\n@stephentoub I think this is a correct approach?","Url":"https://github.com/dotnet/coreclr/pull/21245","RelatedDescription":"Open PR \"Allow Task.WaitAny completion to run synchronously\" (#21245)"}],"ResultType":"GitHubIssue"},"CLI-Issues":{"Issues":[{"Id":"385567265","IsPullRequest":true,"CreatedAt":"2018-11-29T04:38:57","Actor":"jkotas","Number":"10410","RawContent":null,"Title":"Replace private System.AppDomain reflection with a regular call","State":"open","Body":"Fixes #10399\r\n","Url":"https://github.com/dotnet/cli/pull/10410","RelatedDescription":"Open PR \"Replace private System.AppDomain reflection with a regular call\" (#10410)"},{"Id":"385412581","IsPullRequest":true,"CreatedAt":"2018-11-29T01:07:50","Actor":"dotnet-bot","Number":"10404","RawContent":null,"Title":"Merge release/2.2.1xx to release/2.2.2xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.2.1xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.1xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.2.1xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.2.1xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/10404","RelatedDescription":"Closed or merged PR \"Merge release/2.2.1xx to release/2.2.2xx\" (#10404)"},{"Id":"385520785","IsPullRequest":true,"CreatedAt":"2018-11-29T00:54:25","Actor":"peterhuene","Number":"10409","RawContent":null,"Title":"Fix build status badge to point at dnceng.","State":"open","Body":"This fixes the build status badge to point at dnceng, which is where the\r\nrolling builds are currently.\r\n\r\nskip ci please\r\n","Url":"https://github.com/dotnet/cli/pull/10409","RelatedDescription":"Open PR \"Fix build status badge to point at dnceng.\" (#10409)"},{"Id":"384553140","IsPullRequest":true,"CreatedAt":"2018-11-29T00:43:55","Actor":"wli3","Number":"10392","RawContent":null,"Title":"Fix no restore command error message","State":"closed","Body":"It should show _Run \"dotnet tool restore\" to make the \"dotnetsay\" command available._ instead of _Cannot find a command with command name 'dotnetsay'_ when there is no restore.\r\n\r\nRoot cause, a case forget to test","Url":"https://github.com/dotnet/cli/pull/10392","RelatedDescription":"Closed or merged PR \"Fix no restore command error message\" (#10392)"},{"Id":"385496926","IsPullRequest":true,"CreatedAt":"2018-11-29T00:00:34","Actor":"peterhuene","Number":"10408","RawContent":null,"Title":"Bump SDK package to `3.0.100-preview.18578.2`.","State":"closed","Body":"This commit bumps the SDK package to `3.0.100-preview.18578.2`.","Url":"https://github.com/dotnet/cli/pull/10408","RelatedDescription":"Closed or merged PR \"Bump SDK package to `3.0.100-preview.18578.2`.\" (#10408)"},{"Id":"385487801","IsPullRequest":true,"CreatedAt":"2018-11-28T22:40:22","Actor":"wli3","Number":"10407","RawContent":null,"Title":"Remove query NuGetGlobalPackagesFolder during command resolve","State":"open","Body":"Before this change, cache store a relative path to NuGet Global Packages Folder and resolver will query that location and construct the full path. Later we realize the query to get the path is too slow and it showed up in the performance profile.\r\n\r\nThe decision is to remove this indirection. This will cause the following case. If repo A override nuget global packages folder location say to its root directory and it has a local tool L. Repo B also has the same local tool L. If A restored first, when running the tool L in Repo B will run the dll from A’s root directory. However since local tools pin down package id and package version, the dll should be the same.\r\nThis changed cache scheme. If you restore local tools before, please delete your old cache folder. At $HOME/.dotnet/toolResolverCache or %USERPROFILE%\\.dotnet\\toolResolverCache\r\n\r\nMove NuGetGlobalPackagesFolder to test helper\r\n","Url":"https://github.com/dotnet/cli/pull/10407","RelatedDescription":"Open PR \"Remove query NuGetGlobalPackagesFolder during command resolve\" (#10407)"},{"Id":"385460718","IsPullRequest":false,"CreatedAt":"2018-11-28T21:17:38","Actor":"cjablonski76","Number":"10406","RawContent":null,"Title":"Builds of solutions frequently fail with CS2012 \"Cannot open\" file errors","State":"open","Body":"## Steps to reproduce\r\n\r\n1. Clone my repro repository: https://github.com/cjablonski76/dotnetCoreBuildIssue.git\r\n\r\n1. Restart your machine (this was the only consistent way I could repro the issue).\r\n\r\n1. open command prompt, navigate to the cloned repo location\r\n\r\n1. run `dotnet build ./WebApplication1/WebApplication1.sln --framework netcoreapp2.1`\r\n    - Removing the `--framework` option seems to build without any \"Cannot open\" errors.\r\n\r\n1. build command will error with: \r\n\r\n      > CSC : error CS2012: Cannot open 'c:\\src\\dotnetCoreBuildIssue\\WebApplication1\\ClassLibrary1\\obj\\Debug\\netcoreapp2.1\\ClassLibrary1.dll' for writing -- 'The process cannot access the file 'c:\\src\\dotnetCoreBuildIssue\\WebApplication1\\ClassLibrary1\\obj\\Debug\\netcoreapp2.1\\ClassLibrary1.dll' because it is being used by another process.' [c:\\src\\dotnetCoreBuildIssue\\WebApplication1\\ClassLibrary1\\ClassLibrary1.csproj]\r\n\r\n**NOTE:** you must restart the machine each time you wish to reproduce the error. During my testing, after the first run on a fresh restart `dotnet build --framework netcoreapp2.1` ran successfully. I'm sure there is a way to get into the bad state without restarting the machine, but this was the simplest thing I could find with my knowledge around the build process. When running on our CI servers, they tend to fail with a project like this a majority of the time if we build with the `--framework` flag.\r\n\r\n## Expected  behavior\r\nSuccessful build of the solution.\r\n\r\n## Actual behavior\r\nErrors on build with output:\r\n```Microsoft (R) Build Engine version 15.8.169+g1ccb72aefa for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 57.46 ms for c:\\src\\dotnetCoreBuildIssue\\WebApplication1\\ClassLibrary1\\ClassLibrary1.csproj.\r\n  Restore completed in 259.57 ms for c:\\src\\dotnetCoreBuildIssue\\WebApplication1\\WebApplication1\\WebApplication1.csproj.\r\n  ClassLibrary1 -> c:\\src\\dotnetCoreBuildIssue\\WebApplication1\\ClassLibrary1\\bin\\Debug\\netcoreapp2.1\\ClassLibrary1.dll\r\nCSC : error CS2012: Cannot open 'c:\\src\\dotnetCoreBuildIssue\\WebApplication1\\ClassLibrary1\\obj\\Debug\\netcoreapp2.1\\ClassLibrary1.dll' for writing -- 'The process cannot access the file 'c:\\src\\dotnetCoreBuildIssue\\WebApplication1\\ClassLibrary1\\obj\\Debug\\netcoreapp2.1\\ClassLibrary1.dll' because it is being used by another process.' [c:\\src\\dotnetCoreBuildIssue\\WebApplication1\\ClassLibrary1\\ClassLibrary1.csproj]\r\n  WebApplication1 -> c:\\src\\dotnetCoreBuildIssue\\WebApplication1\\WebApplication1\\bin\\Debug\\netcoreapp2.1\\WebApplication1.dll\r\n\r\nBuild FAILED.\r\n\r\nCSC : error CS2012: Cannot open 'c:\\src\\dotnetCoreBuildIssue\\WebApplication1\\ClassLibrary1\\obj\\Debug\\netcoreapp2.1\\ClassLibrary1.dll' for writing -- 'The process cannot access the file 'c:\\src\\dotnetCoreBuildIssue\\WebApplication1\\ClassLibrary1\\obj\\Debug\\netcoreapp2.1\\ClassLibrary1.dll' because it is being used by another process.' [c:\\src\\dotnetCoreBuildIssue\\WebApplication1\\ClassLibrary1\\ClassLibrary1.csproj]\r\n    0 Warning(s)\r\n    1 Error(s)\r\n\r\nTime Elapsed 00:00:02.97\r\n```\r\n\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.403\r\n Commit:    04e15494b6\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.14393\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.403\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.5\r\n  Commit:  290303f510\r\n\r\n.NET Core SDKs installed:\r\n  2.1.401 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.3-servicing-26724-03 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10406","RelatedDescription":"Open issue \"Builds of solutions frequently fail with CS2012 \"Cannot open\" file errors\" (#10406)"},{"Id":"385454891","IsPullRequest":false,"CreatedAt":"2018-11-28T21:00:45","Actor":"peterhuene","Number":"10405","RawContent":null,"Title":"Support Nano Server and non-Windows OSes for apphost customization","State":"open","Body":"## Steps to reproduce\r\n\r\nOn Windows with Docker for Windows installed that has been configured to use \"Windows Containers\":\r\n\r\n1. `docker run -it microsoft/dotnet-nightly:3.0-sdk`\r\n2. `mkdir repro && cd repro`\r\n3. `dotnet new console`\r\n4. `dotnet build`\r\n\r\n## Expected  behavior\r\n\r\nThe project builds without warnings or errors.  The resulting apphost is customized.\r\n\r\n## Actual behavior\r\n\r\nA warning is printed that the application host will not be customized because the Docker \r\n```\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview-009784\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets(294,5): warning NETSDK1074: The application host executable will not be customized because adding resources requires that the build be performed on Windows (excluding Nano Server).\r\n```\r\n\r\nThis is because the resource updating API (starting with `BeginUpdateResource`) isn't available on Nano Server.\r\n\r\nGiven that CI systems might be using Nano Server to build applications, users will likely want this to work so that their build doesn't differ from other platforms.\r\n\r\n## Environment data\r\n\r\n```\r\nC:\\>dotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview-009784\r\n Commit:    d86a1816c4\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.14393\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview-009784\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview-27122-01\r\n  Commit:  00c5c8bc40\r\n\r\n.NET Core SDKs installed:\r\n  3.0.100-preview-009784 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.App 3.0.0-preview-18572-0018 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27122-01 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-alpha-27122-4 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10405","RelatedDescription":"Open issue \"Support Nano Server and non-Windows OSes for apphost customization\" (#10405)"},{"Id":"384600468","IsPullRequest":true,"CreatedAt":"2018-11-28T18:55:38","Actor":"wli3","Number":"10395","RawContent":null,"Title":"User facing string for local tools install/uninstall","State":"closed","Body":"All string changes","Url":"https://github.com/dotnet/cli/pull/10395","RelatedDescription":"Closed or merged PR \"User facing string for local tools install/uninstall\" (#10395)"},{"Id":"385199693","IsPullRequest":false,"CreatedAt":"2018-11-28T18:26:58","Actor":"YunWeiaa","Number":"10401","RawContent":null,"Title":"An unhandled exception occurred while processing the request. InvalidOperationException if run mvc application with sdk 3.0.100-preview-009793","State":"closed","Body":"## Steps to reproduce\r\n1. Install sdk 3.0.100-preview-009793\r\n2. dotnet new mvc\r\n3. dotnet run\r\n\r\n## Expected  behavior\r\nDotnet run for mvc, works well\r\n\r\n## Actual behavior\r\nAn unhandled exception occurred while processing the request. InvalidOperationException: The view 'Index' was not found. The following locations were searched: /Views/Home/Index.cshtml /Views/Shared/Index.cshtml /Pages/Shared/Index.cshtml\r\nMicrosoft.AspNetCore.Mvc.ViewEngines.ViewEngineResult.EnsureSuccessful(IEnumerable<string> originalLocations)\r\nMicrosoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor.ExecuteAsync(ActionContext context, ViewResult result)\r\nMicrosoft.AspNetCore.Mvc.ViewResult.ExecuteResultAsync(ActionContext context)\r\nMicrosoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.InvokeResultAsync(IActionResult result)\r\nMicrosoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.InvokeNextResultFilterAsync<TFilter, TFilterAsync>()\r\nMicrosoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResultExecutedContext context)\r\nMicrosoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.ResultNext<TFilter, TFilterAsync>(ref State next, ref Scope scope, ref object state, ref bool isCompleted)\r\nMicrosoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.InvokeResultFilters()\r\nMicrosoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.InvokeNextResourceFilter()\r\nMicrosoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResourceExecutedContext context)\r\nMicrosoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Next(ref State next, ref Scope scope, ref object state, ref bool isCompleted)\r\nMicrosoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.InvokeFilterPipelineAsync()\r\nMicrosoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.InvokeAsync()\r\nMicrosoft.AspNetCore.Routing.EndpointMiddleware.Invoke(HttpContext httpContext)\r\nMicrosoft.AspNetCore.Routing.EndpointRoutingMiddleware.Invoke(HttpContext httpContext)\r\nMicrosoft.AspNetCore.StaticFiles.StaticFileMiddleware.Invoke(HttpContext context)\r\nMicrosoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview-009793\r\n Commit:    27333fabf3\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview-009793\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview-27122-01\r\n  Commit:  00c5c8bc40\r\n\r\n.NET Core SDKs installed:\r\n  2.1.600-preview-009426 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.200-preview-009648 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview-009793 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview-18577-0031 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27122-01 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-alpha-27122-4 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10401","RelatedDescription":"Closed issue \"An unhandled exception occurred while processing the request. InvalidOperationException if run mvc application with sdk 3.0.100-preview-009793\" (#10401)"},{"Id":"384896522","IsPullRequest":false,"CreatedAt":"2018-11-28T17:46:31","Actor":"Evangelink","Number":"10398","RawContent":null,"Title":"dotnet build is locking custom msbuild task dlls","State":"closed","Body":"## Description\r\n\r\nWe are providing a tool that needs to be called before the build and after the tests which synchronize some analyzers (with their rulesets...) from a central server and at the end pushes some code quality information back to the server.\r\nTo do so we are copying some targets and some tasks dlls inside a `.sonarqube\\bin` folder.\r\n\r\nWe have had a couple of complaints from our users on the different channels (StackOverflow, GitHub Issues, our community forum) about the fact the `dotnet build` is locking some of our dlls.\r\n\r\nWhen using only `msbuild` we don't have such behavior but when using `dotnet build` or `dotnet msbuild` then the failure starts appearing.\r\n\r\nFor example see https://github.com/SonarSource/sonar-scanner-msbuild/issues/535\r\n\r\nWe couldn't find any easy way to prevent this behavior and before starting to try to hack around, we would prefer to have your input on what could be done.\r\n\r\n## Steps to reproduce \r\n\r\nExample of commands:\r\n```\r\ndotnet tool install --global dotnet-sonarscanner\r\ndotnet sonarscanner begin /k:\"project-key\"\r\ndotnet build\r\ndotnet sonarscanner end\r\n```\r\n\r\nNow if you do again the `dotnet sonarscanner begin /k::project-key\"` you end up with the message `Access to the path 'SonarScanner.MSBuild.Common.dll' is denied`.\r\n\r\n## Known workarounds\r\n\r\n1. Kill dotnet process\r\n1. Use `/nodereuse:false`","Url":"https://github.com/dotnet/cli/issues/10398","RelatedDescription":"Closed issue \"dotnet build is locking custom msbuild task dlls\" (#10398)"},{"Id":"385315254","IsPullRequest":false,"CreatedAt":"2018-11-28T15:15:13","Actor":"salorob","Number":"10403","RawContent":null,"Title":"dotnet as service, empty journal entries","State":"open","Body":"Hi all,\r\nUnsure where to ask, I'll start here:\r\n\r\nWhile running a dotnet core application as service like so:\r\n\r\n```\r\n[Unit]\r\nDescription=Modulio\r\n\r\n[Service]\r\nWorkingDirectory=/home/pi/modulio\r\nExecStart=/usr/local/bin/dotnet app/modulio.dll\r\nRestart=always\r\nRestartSec=10\r\nTimeoutStopSec=10\r\nSyslogIdentifier=modulio\r\n\r\n[Install]\r\nWantedBy=multi-user.target\r\n```\r\n\r\nI get allot of empty lines in systemstl status log (journal) with the dotnet identifier, like so:\r\n\r\n```\r\npi@host:~ $ systemctl status modulio\r\n● modulio.service - Modulio\r\nLoaded: loaded (/lib/systemd/system/modulio.service; enabled; vendor preset:\r\nActive: active (running) since Wed 2018-11-28 12:56:27 UTC; 1min 5s ago\r\nMain PID: 7066 (dotnet)\r\nCGroup: /system.slice/modulio.service\r\n├─7066 /usr/local/bin/dotnet app/modulio.dll\r\n\r\nNov 28 12:57:25 host modulio[7066]: info: Modulio.Core.DataLogger[0]\r\nNov 28 12:57:25 host modulio[7066]:       Blablabla messages\r\nNov 28 12:57:26 host modulio[7066]: info: Modulio.Core.Engine[0]\r\nNov 28 12:57:26 host modulio[7066]:       Blablabla messages\r\nNov 28 12:57:26 host dotnet[7066]:\r\nNov 28 12:57:27 host modulio[7066]: info: Modulio.Core.Engine[0]\r\nNov 28 12:57:27 host modulio[7066]:       Blablabla messages\r\nNov 28 12:57:28 host dotnet[7066]:\r\nNov 28 12:57:30 host dotnet[7066]:\r\nNov 28 12:57:32 host dotnet[7066]:\r\n```\r\n\r\nThe log is really flooded with empty lines like that, over 100mb worth in a few days.\r\ndoes anyone know anything about this?\r\n\r\nI'm not inserting empty lines to console anywhere, afaik.\r\n\r\nMany thanks!","Url":"https://github.com/dotnet/cli/issues/10403","RelatedDescription":"Open issue \"dotnet as service, empty journal entries\" (#10403)"},{"Id":"385258331","IsPullRequest":true,"CreatedAt":"2018-11-28T13:03:12","Actor":"dotnet-maestro[bot]","Number":"10402","RawContent":null,"Title":"Update dependency files","State":"open","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18577.9\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10402","RelatedDescription":"Open PR \"Update dependency files\" (#10402)"},{"Id":"384321120","IsPullRequest":true,"CreatedAt":"2018-11-28T13:02:44","Actor":"dotnet-maestro[bot]","Number":"10390","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18575.1\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18576.5\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10390","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#10390)"},{"Id":"385180317","IsPullRequest":true,"CreatedAt":"2018-11-28T09:41:04","Actor":"singhsarab","Number":"10400","RawContent":null,"Title":"TestPlatform insertion 16.0-preview-20181128-01","State":"open","Body":"Release : https://github.com/Microsoft/vstest/releases/tag/v16.0.0-preview-20181128-01\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10400","RelatedDescription":"Open PR \"TestPlatform insertion 16.0-preview-20181128-01\" (#10400)"},{"Id":"385020140","IsPullRequest":false,"CreatedAt":"2018-11-27T22:43:18","Actor":"adiaaida","Number":"10399","RawContent":null,"Title":"dotnet new console failing with System.ArgumentNullException using a custom coreclr","State":"open","Body":"## Steps to reproduce\r\n\r\n1. Use dotnet-install.ps1 to pull down the latest concurrent dotnet\r\n2. Pull down dotnet/coreclr\r\n3. build.cmd release x64 skiptests\r\n4. Copy coreclr.dll, clrjit.dll, mscordaccore.dll, mscordbi.dll, sos.dll, sos.NETCore.dll, clretwrc.dll, System.Private.CoreLib.dll, mscorrc.debug.dll and mscorrc.dll into the shared framework of the dotnet install you got in step 1.\r\n5. run dotnet.exe new console\r\n\r\n## Expected  behavior\r\n\r\ndotnet creates a hello world cs file and csproj\r\n\r\n## Actual behavior\r\nDotnet fails with the following output:\r\n\r\n```\r\nSystem.ArgumentNullException: Value cannot be null.\r\nParameter name: fileName\r\n   at System.IO.FileInfo..ctor(String originalPath, String fullPath, String fileName, Boolean isNormalized)\r\n   at System.IO.FileInfo..ctor(String fileName)\r\n   at Microsoft.DotNet.Cli.Utils.Muxer.get_SharedFxVersion()\r\n   at Microsoft.DotNet.Tools.New.NewCommandShim.CreateHost()\r\n   at Microsoft.DotNet.Tools.New.NewCommandShim.Run(String[] args)\r\n   at Microsoft.DotNet.Cli.Program.ProcessArgs(String[] args, ITelemetry telemetryClient)\r\n   at Microsoft.DotNet.Cli.Program.Main(String[] args)\r\n```\r\n\r\n## Environment data\r\nI am seeing this with both of these dotnets (and yes, we are seeing the error when running dotnet --info too):\r\n`dotnet --info` output:\r\n\r\n```\r\n.NET Command Line Tools (2.2.0-preview1-007558)\r\n\r\nProduct Information:\r\n Version:            2.2.0-preview1-007558\r\n Commit SHA-1 hash:  1b8c5b498b\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18283\r\n OS Platform: Windows\r\nSystem.ArgumentNullException: Path cannot be null.\r\nParameter name: path\r\n   at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options)\r\n   at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share)\r\n   at System.IO.File.OpenRead(String path)\r\n   at Microsoft.DotNet.Cli.Utils.FrameworkDependencyFile.CreateDependencyContext()\r\n   at System.Lazy`1.ViaFactory(LazyThreadSafetyMode mode)\r\n   at System.Lazy`1.ExecutionAndPublication(LazyHelper executionAndPublication, Boolean useDefaultConstructor)\r\n   at System.Lazy`1.CreateValue()\r\n   at Microsoft.DotNet.Cli.Utils.FrameworkDependencyFile.IsRuntimeSupported(String runtimeIdentifier)\r\n   at Microsoft.DotNet.Cli.Program.GetDisplayRid(DotnetVersionFile versionFile)\r\n   at Microsoft.DotNet.Cli.Program.PrintInfo()\r\n   at Microsoft.DotNet.Cli.Program.ProcessArgs(String[] args, ITelemetry telemetryClient)\r\n   at Microsoft.DotNet.Cli.Program.Main(String[] args)\r\n\r\nHost (useful for support):\r\n  Version: 2.1.0-preview3-26416-01\r\n  Commit:  967b9806b2\r\n\r\n.NET Core SDKs installed:\r\n  1.0.0-preview2-003131 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.100-preview-007341 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.100-preview-007354 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.100 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.300 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.400-preview-009088 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500-preview-009324 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500-preview-009335 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.0-preview1-007558 [C:\\michelm\\coreclr\\bin\\sandbox_logs\\Scenarios\\Off\\JitBench\\.dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0-preview3-26416-01 [C:\\michelm\\coreclr\\bin\\sandbox_logs\\Scenarios\\Off\\JitBench\\.dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5-servicing-26911-03 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n```\r\nD:\\output\\CLRx64WINmas\\PGO\\cli\\x64\\dotnet.exe --info\r\n00:36:45 .NET Core SDK (reflecting any global.json):\r\n00:36:45  Version:   3.0.100-preview-009778\r\n00:36:45  Commit:    20b40ce7b3\r\n00:36:45 \r\n00:36:45 Runtime Environment:\r\n00:36:45  OS Name:     Windows\r\n00:36:45  OS Version:  6.3.9600\r\n00:36:45  OS Platform: Windows\r\n00:36:47 System.ArgumentNullException: Path cannot be null.\r\n00:36:47 Parameter name: path\r\n00:36:47    at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options)\r\n00:36:47    at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share)\r\n00:36:47    at System.IO.File.OpenRead(String path)\r\n00:36:47    at Microsoft.DotNet.Cli.Utils.FrameworkDependencyFile.CreateDependencyContext()\r\n00:36:47    at System.Lazy`1.ViaFactory(LazyThreadSafetyMode mode)\r\n00:36:47    at System.Lazy`1.ExecutionAndPublication(LazyHelper executionAndPublication, Boolean useDefaultConstructor)\r\n00:36:47    at System.Lazy`1.CreateValue()\r\n00:36:47    at Microsoft.DotNet.Cli.Utils.FrameworkDependencyFile.IsRuntimeSupported(String runtimeIdentifier)\r\n00:36:47    at Microsoft.DotNet.Cli.Program.GetDisplayRid(DotnetVersionFile versionFile)\r\n00:36:47    at Microsoft.DotNet.Cli.Program.PrintInfo()\r\n00:36:47    at Microsoft.DotNet.Cli.Program.ProcessArgs(String[] args, ITelemetry telemetryClient)\r\n00:36:47    at Microsoft.DotNet.Cli.Program.Main(String[] args)\r\n00:36:47 \r\n00:36:47 Host (useful for support):\r\n00:36:47   Version: 3.0.0-preview-27125-01\r\n00:36:47   Commit:  7c25ee34e4\r\n00:36:47 \r\n00:36:47 .NET Core SDKs installed:\r\n00:36:47   3.0.100-preview-009778 [D:\\output\\CLRx64WINmas\\PGO\\cli\\x64\\sdk]\r\n00:36:47 \r\n00:36:47 .NET Core runtimes installed:\r\n00:36:47   Microsoft.AspNetCore.App 3.0.0-alpha1-10772 [D:\\output\\CLRx64WINmas\\PGO\\cli\\x64\\shared\\Microsoft.AspNetCore.App]\r\n00:36:47   Microsoft.NETCore.App 3.0.0-preview-27117-01 [D:\\output\\CLRx64WINmas\\PGO\\cli\\x64\\shared\\Microsoft.NETCore.App]\r\n00:36:47   Microsoft.NETCore.App 3.0.0-preview-27125-01 [D:\\output\\CLRx64WINmas\\PGO\\cli\\x64\\shared\\Microsoft.NETCore.App]\r\n00:36:47   Microsoft.WindowsDesktop.App 3.0.0-alpha-27119-7 [D:\\output\\CLRx64WINmas\\PGO\\cli\\x64\\shared\\Microsoft.WindowsDesktop.App]\r\n00:36:47 \r\n00:36:47 To install additional .NET Core runtimes or SDKs:\r\n00:36:47   https://aka.ms/dotnet-download\r\n```\r\n\r\nThis failing both for one of our perf scenarios and for our PGO and IBC data collection jobs, and has been failing since Nov 24, 2018 7:00 AM","Url":"https://github.com/dotnet/cli/issues/10399","RelatedDescription":"Open issue \"dotnet new console failing with System.ArgumentNullException using a custom coreclr\" (#10399)"},{"Id":"384587354","IsPullRequest":false,"CreatedAt":"2018-11-27T22:15:29","Actor":"yuki233","Number":"10394","RawContent":null,"Title":"Unhandled exception returned if run web application with sdk 3.0.100-preview-009784","State":"closed","Body":"## Steps to reproduce\r\n1. Install sdk 3.0.100-preview-009784\r\n2. dotnet new mvc /web /webapi\r\n3. dotnet run\r\n\r\n## Expected  behavior\r\nDotnet run for mvc, web and webap works well\r\n\r\n## Actual behavior\r\nIt returns Unhandled Exception: System.ArgumentException: Value cannot be null or an empty string.\r\n_nicole@ubu16-27:~/mywebapi$ dotnet run\r\nUnhandled Exception: System.ArgumentException: Value cannot be null or an empty string.\r\nParameter name: userSecretId\r\nat Microsoft.Extensions.Configuration.UserSecrets.UserSecretsIdAttribute..ctor(String userSecretId)\r\nat System.Reflection.CustomAttribute.CreateCaObject(RuntimeModule pModule, RuntimeType type, IRuntimeMethodInfo pCtor, Byte** ppBlob, Byte* pEndBlob, Int32* pcNamedArgs)\r\nat System.Reflection.CustomAttribute.CreateCaObject(RuntimeModule module, RuntimeType type, IRuntimeMethodInfo ctor, IntPtr& blob, IntPtr blobEnd, Int32& namedArgs)\r\nat System.Reflection.CustomAttribute.AddCustomAttributes(ListBuilder1& attributes, RuntimeModule decoratedModule, Int32 decoratedMetadataToken, RuntimeType attributeFilterType, Boolean mustBeInheritable, ListBuilder1& derivedAttributes)\r\nat System.Reflection.CustomAttribute.GetCustomAttributes(RuntimeModule decoratedModule, Int32 decoratedMetadataToken, Int32 pcaCount, RuntimeType attributeFilterType)\r\nat System.Attribute.GetCustomAttributes(Assembly element, Type attributeType, Boolean inherit)\r\nat System.Attribute.GetCustomAttribute(Assembly element, Type attributeType, Boolean inherit)\r\nat System.Reflection.CustomAttributeExtensions.GetCustomAttribute[T](Assembly element)\r\nat Microsoft.Extensions.Configuration.UserSecretsConfigurationExtensions.AddUserSecrets(IConfigurationBuilder configuration, Assembly assembly, Boolean optional, Boolean reloadOnChange)\r\nat Microsoft.Extensions.Configuration.UserSecretsConfigurationExtensions.AddUserSecrets(IConfigurationBuilder configuration, Assembly assembly, Boolean optional)\r\nat Microsoft.AspNetCore.WebHost.<>c__DisplayClass8_0.b__0(WebHostBuilderContext hostingContext, IConfigurationBuilder config)\r\nat Microsoft.AspNetCore.Hosting.WebHostBuilder.BuildCommonServices(AggregateException& hostingStartupErrors)\r\nat Microsoft.AspNetCore.Hosting.WebHostBuilder.Build()\r\nat mywebapi.Program.Main(String[] args) in /home/nicole/mywebapi/Program.cs:line 17_\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n.NET Core SDK (reflecting any global.json):\r\nVersion: 3.0.100-preview-009784\r\nCommit: d86a1816c4\r\nRuntime Environment:\r\nOS Name: ubuntu\r\nOS Version: 16.04\r\nOS Platform: Linux\r\nRID: ubuntu.16.04-x64\r\nBase Path: /usr/share/dotnet/sdk/3.0.100-preview-009784/\r\nHost (useful for support):\r\nVersion: 3.0.0-preview-27122-01\r\nCommit: 00c5c8bc40\r\n.NET Core SDKs installed:\r\n3.0.100-preview-009784 [/usr/share/dotnet/sdk]\r\n.NET Core runtimes installed:\r\nMicrosoft.AspNetCore.App 3.0.0-preview-18572-0018 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\nMicrosoft.NETCore.App 3.0.0-preview-27122-01 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\nTo install additional .NET Core runtimes or SDKs:\r\nhttps://aka.ms/dotnet-download\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10394","RelatedDescription":"Closed issue \"Unhandled exception returned if run web application with sdk 3.0.100-preview-009784\" (#10394)"},{"Id":"383393222","IsPullRequest":false,"CreatedAt":"2018-11-27T19:54:54","Actor":"gallivantor","Number":"10381","RawContent":null,"Title":"Publish does not copy all dependencies leading to runtime exception","State":"closed","Body":"(see also StackOverflow post: https://stackoverflow.com/questions/53422385/net-core-published-app-fails-with-filenotfoundexception )\r\n\r\n## Steps to reproduce\r\n1. Create a .net core console app\r\n2. Reference Microsoft.Windows.Compatibility nuget package\r\n3. Add some code to call a WCF service \r\n4. Build & run the app through VS or with `dotnet dllname.dll` - succeeds!\r\n5. Publish the app and try to run it from the published .exe file\r\n\r\n## Expected  behavior\r\nPublished app works just the same as running it with `dotnet dllname.dll`\r\n\r\n## Actual behavior\r\nPublished app throws exception:\r\n`System.IO.FileNotFoundException: Could not load file or assembly \r\n'System.Private.ServiceModel, Version=4.1.2.1, Culture=neutral,\r\nPublicKeyToken=b03f5f7f11d50a3a'. The system cannot find the file specified.`\r\nThe file `System.Private.ServiceModel.dll` has not been copied to the publish output\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.500\r\n Commit:    b68b931422\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.500\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.6\r\n  Commit:  3f4f8eebd8\r\n\r\n.NET Core SDKs installed:\r\n  1.1.0 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.2 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.2 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.100 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.101 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.104 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.200 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.400 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]","Url":"https://github.com/dotnet/cli/issues/10381","RelatedDescription":"Closed issue \"Publish does not copy all dependencies leading to runtime exception\" (#10381)"},{"Id":"384785086","IsPullRequest":true,"CreatedAt":"2018-11-27T13:03:38","Actor":"dotnet-maestro[bot]","Number":"10397","RawContent":null,"Title":"Update dependency files","State":"open","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview.18576.1\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview.18577.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10397","RelatedDescription":"Open PR \"Update dependency files\" (#10397)"},{"Id":"384774150","IsPullRequest":false,"CreatedAt":"2018-11-27T12:34:15","Actor":"Sathyaish","Number":"10396","RawContent":null,"Title":"Please increase the time-out for downloads within the dotnet-install.ps1 script from 10 minutes to 30 minutes","State":"open","Body":"# Increase in the download time-out limit from 10 to 30 minutes\r\n\r\nA few days ago, I was trying to set up the source code for MS Build on my machine so I could play with it, but the build process for setting up the code on my machine kept failing. I finally figured that one of the problems why it was failing was that it was running a Powershell script named `dotnet-install.ps1` which was downloaded from the URL `https://dotnetcli.azureedge.net/dotnet/Sdk/2.1 .401/dotnet-sdk-2.1.401-win-x64.zip`, and in the script, a 10 minute time-out was declared for the download.\r\n\r\nI have a 2 Mbps connection and that file takes only slightly more than 10 minutes on my computer. \r\n\r\n[The specific line of code](https://github.com/dotnet/cli/blob/master/scripts/obtain/dotnet-install.ps1#L230) to change is in the script block that's passed as an argument to the `Invoke-With-Retry` method from within the `GetHTTPResponse` method in the Powershell script `dotnet-install.ps1`.\r\n\r\n`$HttpClient.Timeout = New-TimeSpan -Minutes 10`\r\n\r\nFor details of the issue, please read [this comment](https://github.com/Microsoft/msbuild/issues/3937#issuecomment-442037965) of mine in this issue in the MS Build repo.","Url":"https://github.com/dotnet/cli/issues/10396","RelatedDescription":"Open issue \"Please increase the time-out for downloads within the dotnet-install.ps1 script from 10 minutes to 30 minutes\" (#10396)"},{"Id":"384579537","IsPullRequest":false,"CreatedAt":"2018-11-27T01:22:59","Actor":"wli3","Number":"10393","RawContent":null,"Title":"Put https://aka.ms/discover-dotnet-tools in help","State":"open","Body":"And update the linked site to a better page when the index of _PackageType_ is available","Url":"https://github.com/dotnet/cli/issues/10393","RelatedDescription":"Open issue \"Put https://aka.ms/discover-dotnet-tools in help\" (#10393)"},{"Id":"384468963","IsPullRequest":false,"CreatedAt":"2018-11-26T19:07:58","Actor":"wli3","Number":"10391","RawContent":null,"Title":"Point user to `dotnet tool restore` when the command is in manifest but lacking restore","State":"open","Body":"","Url":"https://github.com/dotnet/cli/issues/10391","RelatedDescription":"Open issue \"Point user to `dotnet tool restore` when the command is in manifest but lacking restore\" (#10391)"},{"Id":"383440815","IsPullRequest":false,"CreatedAt":"2018-11-26T17:05:18","Actor":"adamralph","Number":"10382","RawContent":null,"Title":"dotnet tool update does not work when only pre-releases are available","State":"closed","Body":"## Steps to reproduce\r\n\r\n(At the time of writing.)\r\n\r\n- `dotnet tool install -g --version 1.0.0-alpha.15 minver-cli`\r\n- `dotnet tool update -g minver-cli`\r\n\r\n## Expected  behavior\r\n\r\nThe package is updated to `1.0.0-alpha.16` (or a later pre-release).\r\n\r\n## Actual behavior\r\n\r\n```\r\nerror NU1103: Unable to find a stable package minver-cli with version\r\nerror NU1103:   - Found 2 version(s) in NuGet [ Nearest version: 1.0.0-alpha.16 ]\r\nerror NU1103:   - Found 0 version(s) in Microsoft Visual Studio Offline Packages\r\nerror NU1103:   - Found 0 version(s) in C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\r\nTool 'minver-cli' failed to update due to the following:\r\nThe tool package could not be restored.\r\nTool 'minver-cli' failed to install. This failure may have been caused by:\r\n\r\n* You are attempting to install a preview release and did not use the --version option to specify the version.\r\n* A package by this name was found, but it was not a .NET Core tool.\r\n* The required NuGet feed cannot be accessed, perhaps because of an Internet connection problem.\r\n* You mistyped the name of the tool.\r\n```\r\n\r\nBut `dotnet tool update` does not have a `--version` option!\r\n\r\nAlso, the first line in that output looks wrong.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.500\r\n Commit:    b68b931422\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.500\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.6\r\n  Commit:  3f4f8eebd8\r\n\r\n.NET Core SDKs installed:\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.0 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.0 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.2 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.2 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.300 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.301 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.302 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.400 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.401 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.402 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```","Url":"https://github.com/dotnet/cli/issues/10382","RelatedDescription":"Closed issue \"dotnet tool update does not work when only pre-releases are available\" (#10382)"},{"Id":"383987794","IsPullRequest":true,"CreatedAt":"2018-11-25T16:57:56","Actor":"dotnet-maestro[bot]","Number":"10388","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview.18573.1\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview.18573.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10388","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#10388)"},{"Id":"383648799","IsPullRequest":true,"CreatedAt":"2018-11-25T16:56:12","Actor":"github-john-doe","Number":"10386","RawContent":null,"Title":"Typos","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/10386","RelatedDescription":"Closed or merged PR \"Typos\" (#10386)"},{"Id":"384088310","IsPullRequest":false,"CreatedAt":"2018-11-25T16:55:43","Actor":"mixandmatch025","Number":"10389","RawContent":null,"Title":"Running all tests in a solution in parallel","State":"closed","Body":"Hi, I'm trying to run all tests in a given .sln file in parallel, using either ```dotnet test``` or ```dotnet vstest```.\r\n\r\nUsing https://dasmulli.blog/2018/01/20/make-dotnet-test-work-on-solution-files/ I managed to run all the tests, but they are running sequentially.\r\n\r\nI did manage to use vstest to run tests in parallel, but only using .dll files.\r\n\r\nIs there any way to achieve this?\r\n","Url":"https://github.com/dotnet/cli/issues/10389","RelatedDescription":"Closed issue \"Running all tests in a solution in parallel\" (#10389)"},{"Id":"383526836","IsPullRequest":true,"CreatedAt":"2018-11-23T20:35:32","Actor":"dotnet-maestro[bot]","Number":"10383","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18571.7\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18571.7\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10383","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#10383)"},{"Id":"383670141","IsPullRequest":false,"CreatedAt":"2018-11-23T20:24:17","Actor":"FoxCouncil","Number":"10387","RawContent":null,"Title":"dotnet build & dotnet publish do not include runtimeconfig.json for referenced applications","State":"closed","Body":"## Steps to reproduce\r\n\r\n1. Create new .NET Core 2.1 Console App solution/project in your favorite IDE (Project A)\r\n2. Create a new .NET Core 2.1 Console App project in the same solution. (Project B)\r\n3. Reference Project B in Project A\r\n4. `dotnet build` and/or `dotnet publish` Project A\r\n5. Notice that Project B's .runtimeconfig.json file is not in Project A's bin/*/netcoreapp2.1/ folder\r\n\r\n## Expected  behavior\r\n\r\nProject B's .runtimeconfig.json is included in the bin directory of Project A.\r\n\r\n## Actual behavior\r\n\r\nProject B's .runtimeconfig.json is not in the bin directory of Project A.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.500\r\n Commit:    b68b931422\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.500\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.6\r\n  Commit:  3f4f8eebd8\r\n\r\n.NET Core SDKs installed:\r\n  2.1.2 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.102 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.103 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.104 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.200 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.400 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.401 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.402 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.3-servicing-26724-03 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n````","Url":"https://github.com/dotnet/cli/issues/10387","RelatedDescription":"Closed issue \"dotnet build & dotnet publish do not include runtimeconfig.json for referenced applications\" (#10387)"},{"Id":"383531960","IsPullRequest":false,"CreatedAt":"2018-11-23T20:22:57","Actor":"ygoe","Number":"10385","RawContent":null,"Title":"Current stable download URL","State":"closed","Body":"I'd like to install the .NET CLI on a Raspberry Pi. Since there are no packages for `apt` yet, this needs to be done manually. I'm writing a script that does that automatically. But it still needs the URL to download the archive from. It can easily be looked up on the web, but I believe this could also be automatic.\r\n\r\nSo I'm looking for a URL like this: `https://download.microsoft.com/dotnet/runtime/linux/arm/latest.tar.gz`","Url":"https://github.com/dotnet/cli/issues/10385","RelatedDescription":"Closed issue \"Current stable download URL\" (#10385)"},{"Id":"383526864","IsPullRequest":true,"CreatedAt":"2018-11-23T01:03:08","Actor":"dotnet-maestro[bot]","Number":"10384","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/sdk\r\n\r\n- Microsoft.NET.Sdk - 3.0.100-preview.18571.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10384","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#10384)"}],"ResultType":"GitHubIssue"},"Standard-Issues":{"Issues":[{"Id":"385257703","IsPullRequest":true,"CreatedAt":"2018-11-28T13:11:41","Actor":"dotnet-maestro[bot]","Number":"984","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18577.9\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18577.9\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18577.9\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18577.9\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/984","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#984)"},{"Id":"384784248","IsPullRequest":true,"CreatedAt":"2018-11-28T13:01:05","Actor":"dotnet-maestro[bot]","Number":"983","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18576.5\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18576.5\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18576.5\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18576.5\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/983","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#983)"},{"Id":"384320442","IsPullRequest":true,"CreatedAt":"2018-11-26T13:16:39","Actor":"dotnet-maestro[bot]","Number":"982","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18575.1\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18575.1\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18575.1\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18575.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/982","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#982)"},{"Id":"382463251","IsPullRequest":false,"CreatedAt":"2018-11-24T23:17:50","Actor":"verb0se","Number":"976","RawContent":null,"Title":"Could not load file or assembly System.Configuration.ConfigurationManager","State":"closed","Body":"Upgrading some .NET Framework projects to Standard 2.0, I've installed the System.Configuration.ConfigurationManager package v4.5.0 via NuGet on all projects.  Getting the following error:\r\n\r\nUnhandled Exception: System.IO.FileNotFoundException: Could not load file or assembly 'System.Configuration.ConfigurationManager, Version=4.0.1.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51' or one of its dependencies. The system cannot find the file specified.\r\n  \r\nJust to see if the issue might have been due to something with the current solution, I created a new Standard 2.0 console app, installed the System.Configuration.ConfigurationManager package v4.5.0 via NuGet as the only dependency, and got the same error.\r\n\r\nFrom the deps.json file:\r\n\r\n\"System.Configuration.ConfigurationManager/4.5.0\": {\r\n        \"dependencies\": {\r\n          \"System.Security.Cryptography.ProtectedData\": \"4.5.0\",\r\n          \"System.Security.Permissions\": \"4.5.0\"\r\n        },\r\n        \"runtime\": {\r\n          \"lib/netstandard2.0/System.Configuration.ConfigurationManager.dll\": {\r\n            \"assemblyVersion\": \"4.0.1.0\",\r\n            \"fileVersion\": \"4.6.26515.6\"\r\n          }\r\n        }\r\n      }\r\n\r\nWe would like to use System.Configuration.ConfigurationManager with our upgrade but I can't seem to load it from a project \r\n","Url":"https://github.com/dotnet/standard/issues/976","RelatedDescription":"Closed issue \"Could not load file or assembly System.Configuration.ConfigurationManager\" (#976)"},{"Id":"383526186","IsPullRequest":true,"CreatedAt":"2018-11-22T13:11:28","Actor":"dotnet-maestro[bot]","Number":"980","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18571.7\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18571.7\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18571.7\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18571.7\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/980","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#980)"},{"Id":"382877179","IsPullRequest":true,"CreatedAt":"2018-11-21T17:57:15","Actor":"wtgodbe","Number":"978","RawContent":null,"Title":"Make sure Signing target finds packages to sign","State":"closed","Body":"This will fix a build error where we can't find any packages to sign. The problem was caused by me moving the `PackageOutputPath` property from `Directory.Build.props` to `Directory.Build.targets`, which was a workaround to allow us to continue outputting packages to the bin dir while using Arcade's packaging tasks. Once we're outputting packages to `artifacts`, we can revert this PR.\r\n\r\nCC @danmosemsft @JohnTortugo","Url":"https://github.com/dotnet/standard/pull/978","RelatedDescription":"Closed or merged PR \"Make sure Signing target finds packages to sign\" (#978)"},{"Id":"383107897","IsPullRequest":true,"CreatedAt":"2018-11-21T13:11:28","Actor":"dotnet-maestro[bot]","Number":"979","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18570.17\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18570.17\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18570.17\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18570.17\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/979","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#979)"},{"Id":"382653062","IsPullRequest":true,"CreatedAt":"2018-11-20T13:11:36","Actor":"dotnet-maestro[bot]","Number":"977","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18569.4\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18569.4\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18569.4\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18569.4\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/977","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#977)"},{"Id":"382204388","IsPullRequest":true,"CreatedAt":"2018-11-19T13:11:31","Actor":"dotnet-maestro[bot]","Number":"975","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18568.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/975","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#975)"},{"Id":"381958026","IsPullRequest":true,"CreatedAt":"2018-11-18T13:11:15","Actor":"dotnet-maestro[bot]","Number":"974","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18567.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/974","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#974)"},{"Id":"381888184","IsPullRequest":false,"CreatedAt":"2018-11-17T18:30:40","Actor":"AaronRobinsonMSFT","Number":"973","RawContent":null,"Title":"Consider adding IDispatchConstantAttribute","State":"open","Body":"The `IUnknownConstantAttribute` is in netstandard, but the related `IDispatchConstantAttribute` is not. We should consider whether this attribute should be added for consistency.\r\n\r\nSee dotnet/corefx#33559","Url":"https://github.com/dotnet/standard/issues/973","RelatedDescription":"Open issue \"Consider adding IDispatchConstantAttribute\" (#973)"},{"Id":"381861179","IsPullRequest":true,"CreatedAt":"2018-11-17T13:26:19","Actor":"dotnet-maestro[bot]","Number":"972","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18566.6\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/972","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#972)"},{"Id":"381590194","IsPullRequest":true,"CreatedAt":"2018-11-16T13:16:27","Actor":"dotnet-maestro[bot]","Number":"971","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18565.9\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/971","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#971)"},{"Id":"381151026","IsPullRequest":true,"CreatedAt":"2018-11-15T13:21:29","Actor":"dotnet-maestro[bot]","Number":"970","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18564.20\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/970","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#970)"},{"Id":"380687722","IsPullRequest":true,"CreatedAt":"2018-11-14T13:12:04","Actor":"dotnet-maestro[bot]","Number":"969","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18563.21\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/969","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#969)"},{"Id":"380342819","IsPullRequest":false,"CreatedAt":"2018-11-13T17:35:50","Actor":"terrajobst","Number":"968","RawContent":null,"Title":"Clarify which facades we need to for .NET Standard 2.1","State":"open","Body":"With .NET Standard 2.1 we've in-boxed several types that were previously available as an OOB only, such as `Span<T>`. We need to put these in-box so that when people retarget an existing project to .NET Standard 2.1 and reference the OOB, they don't get compilation errors.","Url":"https://github.com/dotnet/standard/issues/968","RelatedDescription":"Open issue \"Clarify which facades we need to for .NET Standard 2.1\" (#968)"},{"Id":"380215026","IsPullRequest":true,"CreatedAt":"2018-11-13T13:31:46","Actor":"dotnet-maestro[bot]","Number":"967","RawContent":null,"Title":"[Darc-Update] Update dependencies from build 20181112.25 of https://github.com/dotnet/arcade","State":"closed","Body":"This change updates the dependencies from https://github.com/dotnet/arcade to the following\n\n- Microsoft.AspNetCore.ApiVersioning - 1.0.0-beta.18562.25\n- symbols/Microsoft.AspNetCore.ApiVersioning.Swashbuckle.1.0.0-beta.18562.25.symbols.nupkg - 1.0.0-beta.18562.25\n- symbols/Microsoft.DotNet.ApiCompat.1.0.0-beta.18562.25.symbols.nupkg - 1.0.0-beta.18562.25\n- symbols/Microsoft.DotNet.Arcade.Sdk.1.0.0-beta.18562.25.symbols.nupkg - 1.0.0-beta.18562.25\n- symbols/Microsoft.DotNet.Build.Tasks.Feed.2.2.0-beta.18562.25.symbols.nupkg - 2.2.0-beta.18562.25\n- symbols/Microsoft.DotNet.Build.Tasks.Packaging.1.0.0-beta.18562.25.symbols.nupkg - 1.0.0-beta.18562.25\n- symbols/Microsoft.DotNet.CodeAnalysis.1.0.0-beta.18562.25.symbols.nupkg - 1.0.0-beta.18562.25\n- symbols/Microsoft.DotNet.Darc.1.0.0-beta.18562.25.symbols.nupkg - 1.0.0-beta.18562.25\n- symbols/Microsoft.DotNet.DarcLib.1.0.0-beta.18562.25.symbols.nupkg - 1.0.0-beta.18562.25\n- symbols/Microsoft.DotNet.Deployment.Tasks.Links.1.0.0-beta.18562.25.symbols.nupkg - 1.0.0-beta.18562.25\n- symbols/Microsoft.AspNetCore.ApiVersioning.Analyzers.1.0.0-beta.18562.25.symbols.nupkg - 1.0.0-beta.18562.25\n- symbols/Microsoft.DotNet.GenAPI.1.0.0-beta.18562.25.symbols.nupkg - 1.0.0-beta.18562.25\n- symbols/Microsoft.DotNet.Helix.Client.1.0.0-beta.18562.25.symbols.nupkg - 1.0.0-beta.18562.25\n- symbols/Microsoft.DotNet.Helix.JobSender.1.0.0-beta.18562.25.symbols.nupkg - 1.0.0-beta.18562.25\n- symbols/Microsoft.DotNet.Helix.Sdk.1.0.0-beta.18562.25.symbols.nupkg - 1.0.0-beta.18562.25\n- symbols/Microsoft.DotNet.Maestro.Client.1.0.0-beta.18562.25.symbols.nupkg - 1.0.0-beta.18562.25\n- symbols/Microsoft.DotNet.Maestro.Tasks.1.0.0-beta.18562.25.symbols.nupkg - 1.0.0-beta.18562.25\n- symbols/Microsoft.DotNet.SignCheck.1.0.0-beta.18562.25.symbols.nupkg - 1.0.0-beta.18562.25\n- symbols/Microsoft.DotNet.SignTool.1.0.0-beta.18562.25.symbols.nupkg - 1.0.0-beta.18562.25\n- symbols/Microsoft.DotNet.SwaggerGenerator.CmdLine.1.0.0-beta.18562.25.symbols.nupkg - 1.0.0-beta.18562.25\n- symbols/Microsoft.DotNet.SwaggerGenerator.MSBuild.1.0.0-beta.18562.25.symbols.nupkg - 1.0.0-beta.18562.25\n- symbols/Microsoft.DotNet.GenFacades.1.0.0-beta.18562.25.symbols.nupkg - 1.0.0-beta.18562.25\n- symbols/Microsoft.DotNet.XUnitExtensions.2.4.0-beta.18562.25.symbols.nupkg - 2.4.0-beta.18562.25\n- symbols/Microsoft.AspNetCore.ApiVersioning.1.0.0-beta.18562.25.symbols.nupkg - 1.0.0-beta.18562.25\n- Microsoft.DotNet.SwaggerGenerator.MSBuild - 1.0.0-beta.18562.25\n- Microsoft.AspNetCore.ApiVersioning.Analyzers - 1.0.0-beta.18562.25\n- Microsoft.AspNetCore.ApiVersioning.Swashbuckle - 1.0.0-beta.18562.25\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18562.25\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18562.25\n- Microsoft.DotNet.Build.Tasks.Feed - 2.2.0-beta.18562.25\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18562.25\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.18562.25\n- Microsoft.DotNet.Darc - 1.0.0-beta.18562.25\n- Microsoft.DotNet.DarcLib - 1.0.0-beta.18562.25\n- Microsoft.DotNet.XUnitExtensions - 2.4.0-beta.18562.25\n- Microsoft.DotNet.Deployment.Tasks.Links - 1.0.0-beta.18562.25\n- Microsoft.DotNet.GenFacades - 1.0.0-beta.18562.25\n- Microsoft.DotNet.Helix.Client - 1.0.0-beta.18562.25\n- Microsoft.DotNet.Helix.JobSender - 1.0.0-beta.18562.25\n- Microsoft.DotNet.Helix.Sdk - 1.0.0-beta.18562.25\n- Microsoft.DotNet.Maestro.Client - 1.0.0-beta.18562.25\n- Microsoft.DotNet.Maestro.Tasks - 1.0.0-beta.18562.25\n- Microsoft.DotNet.SignCheck - 1.0.0-beta.18562.25\n- Microsoft.DotNet.SignTool - 1.0.0-beta.18562.25\n- Microsoft.DotNet.SwaggerGenerator.CmdLine - 1.0.0-beta.18562.25\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18562.25","Url":"https://github.com/dotnet/standard/pull/967","RelatedDescription":"Closed or merged PR \"[Darc-Update] Update dependencies from build 20181112.25 of https://github.com/dotnet/arcade\" (#967)"},{"Id":"379409079","IsPullRequest":false,"CreatedAt":"2018-11-10T17:02:09","Actor":"bernd5","Number":"964","RawContent":null,"Title":"Why including everything into netstandard","State":"closed","Body":"Hello,\r\nwhy is net standard growing so much? Wouldn't it be better to provide new APIs via normal libraries?\r\nFor other platforms it becomes very hard to implement all changes in net standard.\r\n\r\nThe good thing is, that we have the coreFx repository which contains almost all standard APIs. But one problem is, that it has some strong (not documented) dependencies to the underlying runtime (e.g. RuntimeThread). Theres no indicator which says \"this type needs special runtime support\". For some types this is obvious, e.g. it's clear that Int32 can't be implemented by a value of \"Int32\". But for others not!\r\n\r\nTo implement net standard I would like to have two sets of APIs. One which needs special runtime Handling (like Delegate, Int32, String, Thread ...). And another one which has only non special APIs like Dicitionaries, Lists, Color (all types which can be implemented without any special runtime support).","Url":"https://github.com/dotnet/standard/issues/964","RelatedDescription":"Closed issue \"Why including everything into netstandard\" (#964)"},{"Id":"379420450","IsPullRequest":true,"CreatedAt":"2018-11-10T13:16:22","Actor":"dotnet-maestro[bot]","Number":"965","RawContent":null,"Title":"[Darc-Update] Update dependencies from build 20181109.22 of https://github.com/dotnet/arcade","State":"closed","Body":"This change updates the dependencies from https://github.com/dotnet/arcade to the following\n\n- Microsoft.AspNetCore.ApiVersioning - 1.0.0-beta.18559.22\n- symbols/Microsoft.AspNetCore.ApiVersioning.Swashbuckle.1.0.0-beta.18559.22.symbols.nupkg - 1.0.0-beta.18559.22\n- symbols/Microsoft.DotNet.ApiCompat.1.0.0-beta.18559.22.symbols.nupkg - 1.0.0-beta.18559.22\n- symbols/Microsoft.DotNet.Arcade.Sdk.1.0.0-beta.18559.22.symbols.nupkg - 1.0.0-beta.18559.22\n- symbols/Microsoft.DotNet.Build.Tasks.Feed.2.2.0-beta.18559.22.symbols.nupkg - 2.2.0-beta.18559.22\n- symbols/Microsoft.DotNet.Build.Tasks.Packaging.1.0.0-beta.18559.22.symbols.nupkg - 1.0.0-beta.18559.22\n- symbols/Microsoft.DotNet.CodeAnalysis.1.0.0-beta.18559.22.symbols.nupkg - 1.0.0-beta.18559.22\n- symbols/Microsoft.DotNet.Darc.1.0.0-beta.18559.22.symbols.nupkg - 1.0.0-beta.18559.22\n- symbols/Microsoft.DotNet.DarcLib.1.0.0-beta.18559.22.symbols.nupkg - 1.0.0-beta.18559.22\n- symbols/Microsoft.DotNet.Deployment.Tasks.Links.1.0.0-beta.18559.22.symbols.nupkg - 1.0.0-beta.18559.22\n- symbols/Microsoft.AspNetCore.ApiVersioning.Analyzers.1.0.0-beta.18559.22.symbols.nupkg - 1.0.0-beta.18559.22\n- symbols/Microsoft.DotNet.GenAPI.1.0.0-beta.18559.22.symbols.nupkg - 1.0.0-beta.18559.22\n- symbols/Microsoft.DotNet.Helix.Client.1.0.0-beta.18559.22.symbols.nupkg - 1.0.0-beta.18559.22\n- symbols/Microsoft.DotNet.Helix.JobSender.1.0.0-beta.18559.22.symbols.nupkg - 1.0.0-beta.18559.22\n- symbols/Microsoft.DotNet.Helix.Sdk.1.0.0-beta.18559.22.symbols.nupkg - 1.0.0-beta.18559.22\n- symbols/Microsoft.DotNet.Maestro.Client.1.0.0-beta.18559.22.symbols.nupkg - 1.0.0-beta.18559.22\n- symbols/Microsoft.DotNet.Maestro.Tasks.1.0.0-beta.18559.22.symbols.nupkg - 1.0.0-beta.18559.22\n- symbols/Microsoft.DotNet.SignCheck.1.0.0-beta.18559.22.symbols.nupkg - 1.0.0-beta.18559.22\n- symbols/Microsoft.DotNet.SignTool.1.0.0-beta.18559.22.symbols.nupkg - 1.0.0-beta.18559.22\n- symbols/Microsoft.DotNet.SwaggerGenerator.CmdLine.1.0.0-beta.18559.22.symbols.nupkg - 1.0.0-beta.18559.22\n- symbols/Microsoft.DotNet.SwaggerGenerator.MSBuild.1.0.0-beta.18559.22.symbols.nupkg - 1.0.0-beta.18559.22\n- symbols/Microsoft.DotNet.GenFacades.1.0.0-beta.18559.22.symbols.nupkg - 1.0.0-beta.18559.22\n- symbols/Microsoft.DotNet.XUnitExtensions.2.4.0-beta.18559.22.symbols.nupkg - 2.4.0-beta.18559.22\n- symbols/Microsoft.AspNetCore.ApiVersioning.1.0.0-beta.18559.22.symbols.nupkg - 1.0.0-beta.18559.22\n- Microsoft.DotNet.SwaggerGenerator.MSBuild - 1.0.0-beta.18559.22\n- Microsoft.AspNetCore.ApiVersioning.Analyzers - 1.0.0-beta.18559.22\n- Microsoft.AspNetCore.ApiVersioning.Swashbuckle - 1.0.0-beta.18559.22\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18559.22\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18559.22\n- Microsoft.DotNet.Build.Tasks.Feed - 2.2.0-beta.18559.22\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18559.22\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.18559.22\n- Microsoft.DotNet.Darc - 1.0.0-beta.18559.22\n- Microsoft.DotNet.DarcLib - 1.0.0-beta.18559.22\n- Microsoft.DotNet.XUnitExtensions - 2.4.0-beta.18559.22\n- Microsoft.DotNet.Deployment.Tasks.Links - 1.0.0-beta.18559.22\n- Microsoft.DotNet.GenFacades - 1.0.0-beta.18559.22\n- Microsoft.DotNet.Helix.Client - 1.0.0-beta.18559.22\n- Microsoft.DotNet.Helix.JobSender - 1.0.0-beta.18559.22\n- Microsoft.DotNet.Helix.Sdk - 1.0.0-beta.18559.22\n- Microsoft.DotNet.Maestro.Client - 1.0.0-beta.18559.22\n- Microsoft.DotNet.Maestro.Tasks - 1.0.0-beta.18559.22\n- Microsoft.DotNet.SignCheck - 1.0.0-beta.18559.22\n- Microsoft.DotNet.SignTool - 1.0.0-beta.18559.22\n- Microsoft.DotNet.SwaggerGenerator.CmdLine - 1.0.0-beta.18559.22\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18559.22","Url":"https://github.com/dotnet/standard/pull/965","RelatedDescription":"Closed or merged PR \"[Darc-Update] Update dependencies from build 20181109.22 of https://github.com/dotnet/arcade\" (#965)"},{"Id":"378547705","IsPullRequest":true,"CreatedAt":"2018-11-09T22:29:24","Actor":"terrajobst","Number":"963","RawContent":null,"Title":"Add ISOWeek","State":"closed","Body":"This fixes #956 ","Url":"https://github.com/dotnet/standard/pull/963","RelatedDescription":"Closed or merged PR \"Add ISOWeek\" (#963)"},{"Id":"377591337","IsPullRequest":false,"CreatedAt":"2018-11-09T22:29:24","Actor":"khellang","Number":"956","RawContent":null,"Title":"Include System.Globalization.ISOWeek","State":"closed","Body":"I'd like to propose the inclusion of the new `System.Globalization.ISOWeek` APIs, added in https://github.com/dotnet/corefx/pull/30386.\r\n\r\nI would consider these pretty fundamental APIs that would be useful on all the current .NET platforms.\r\n\r\nThe implementation doesn't have a lot of dependencies and could probably be (more or less) copied to other platforms.\r\n\r\n```patch\r\ndiff --git a/netstandard/ref/System.Globalization.cs b/netstandard/ref/System.Globalization.cs\r\nindex 995ce25..4214d5a 100644\r\n--- a/netstandard/ref/System.Globalization.cs\r\n+++ b/netstandard/ref/System.Globalization.cs\r\n@@ -446,6 +446,15 @@ namespace System.Globalization\r\n         public string GetUnicode(string ascii, int index) { throw null; }\r\n         public string GetUnicode(string ascii, int index, int count) { throw null; }\r\n     }\r\n+    public static partial class ISOWeek\r\n+    {\r\n+        public static int GetWeekOfYear(System.DateTime date) { throw null; }\r\n+        public static int GetWeeksInYear(int year) { throw null; }\r\n+        public static int GetYear(System.DateTime date) { throw null; }\r\n+        public static System.DateTime GetYearEnd(int year) { throw null; }\r\n+        public static System.DateTime GetYearStart(int year) { throw null; }\r\n+        public static System.DateTime ToDateTime(int year, int week, System.DayOfWeek dayOfWeek) { throw null; }\r\n+    }\r\n     public partial class JapaneseCalendar : System.Globalization.Calendar\r\n     {\r\n         public JapaneseCalendar() { }\r\n```","Url":"https://github.com/dotnet/standard/issues/956","RelatedDescription":"Closed issue \"Include System.Globalization.ISOWeek\" (#956)"},{"Id":"378277892","IsPullRequest":true,"CreatedAt":"2018-11-08T13:13:35","Actor":"dotnet-maestro[bot]","Number":"959","RawContent":null,"Title":"[Darc-Update] Update dependencies from build 20181106.6 of https://github.com/dotnet/arcade","State":"closed","Body":"This change updates the dependencies from https://github.com/dotnet/arcade to the following\n\n- Microsoft.AspNetCore.ApiVersioning - 1.0.0-beta.18556.6\n- symbols/Microsoft.AspNetCore.ApiVersioning.Swashbuckle.1.0.0-beta.18556.6.symbols.nupkg - 1.0.0-beta.18556.6\n- symbols/Microsoft.DotNet.ApiCompat.1.0.0-beta.18556.6.symbols.nupkg - 1.0.0-beta.18556.6\n- symbols/Microsoft.DotNet.Arcade.Sdk.1.0.0-beta.18556.6.symbols.nupkg - 1.0.0-beta.18556.6\n- symbols/Microsoft.DotNet.Build.Tasks.Feed.2.2.0-beta.18556.6.symbols.nupkg - 2.2.0-beta.18556.6\n- symbols/Microsoft.DotNet.Build.Tasks.Packaging.1.0.0-beta.18556.6.symbols.nupkg - 1.0.0-beta.18556.6\n- symbols/Microsoft.DotNet.CodeAnalysis.1.0.0-beta.18556.6.symbols.nupkg - 1.0.0-beta.18556.6\n- symbols/Microsoft.DotNet.Darc.1.0.0-beta.18556.6.symbols.nupkg - 1.0.0-beta.18556.6\n- symbols/Microsoft.DotNet.DarcLib.1.0.0-beta.18556.6.symbols.nupkg - 1.0.0-beta.18556.6\n- symbols/Microsoft.DotNet.Deployment.Tasks.Links.1.0.0-beta.18556.6.symbols.nupkg - 1.0.0-beta.18556.6\n- symbols/Microsoft.AspNetCore.ApiVersioning.Analyzers.1.0.0-beta.18556.6.symbols.nupkg - 1.0.0-beta.18556.6\n- symbols/Microsoft.DotNet.GenAPI.1.0.0-beta.18556.6.symbols.nupkg - 1.0.0-beta.18556.6\n- symbols/Microsoft.DotNet.Helix.Client.1.0.0-beta.18556.6.symbols.nupkg - 1.0.0-beta.18556.6\n- symbols/Microsoft.DotNet.Helix.JobSender.1.0.0-beta.18556.6.symbols.nupkg - 1.0.0-beta.18556.6\n- symbols/Microsoft.DotNet.Helix.Sdk.1.0.0-beta.18556.6.symbols.nupkg - 1.0.0-beta.18556.6\n- symbols/Microsoft.DotNet.Maestro.Client.1.0.0-beta.18556.6.symbols.nupkg - 1.0.0-beta.18556.6\n- symbols/Microsoft.DotNet.Maestro.Tasks.1.0.0-beta.18556.6.symbols.nupkg - 1.0.0-beta.18556.6\n- symbols/Microsoft.DotNet.SignCheck.1.0.0-beta.18556.6.symbols.nupkg - 1.0.0-beta.18556.6\n- symbols/Microsoft.DotNet.SignTool.1.0.0-beta.18556.6.symbols.nupkg - 1.0.0-beta.18556.6\n- symbols/Microsoft.DotNet.SwaggerGenerator.CmdLine.1.0.0-beta.18556.6.symbols.nupkg - 1.0.0-beta.18556.6\n- symbols/Microsoft.DotNet.SwaggerGenerator.MSBuild.1.0.0-beta.18556.6.symbols.nupkg - 1.0.0-beta.18556.6\n- symbols/Microsoft.DotNet.GenFacades.1.0.0-beta.18556.6.symbols.nupkg - 1.0.0-beta.18556.6\n- symbols/Microsoft.DotNet.XUnitExtensions.2.4.0-beta.18556.6.symbols.nupkg - 2.4.0-beta.18556.6\n- symbols/Microsoft.AspNetCore.ApiVersioning.1.0.0-beta.18556.6.symbols.nupkg - 1.0.0-beta.18556.6\n- Microsoft.DotNet.SwaggerGenerator.MSBuild - 1.0.0-beta.18556.6\n- Microsoft.AspNetCore.ApiVersioning.Analyzers - 1.0.0-beta.18556.6\n- Microsoft.AspNetCore.ApiVersioning.Swashbuckle - 1.0.0-beta.18556.6\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18556.6\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18556.6\n- Microsoft.DotNet.Build.Tasks.Feed - 2.2.0-beta.18556.6\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18556.6\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.18556.6\n- Microsoft.DotNet.Darc - 1.0.0-beta.18556.6\n- Microsoft.DotNet.DarcLib - 1.0.0-beta.18556.6\n- Microsoft.DotNet.XUnitExtensions - 2.4.0-beta.18556.6\n- Microsoft.DotNet.Deployment.Tasks.Links - 1.0.0-beta.18556.6\n- Microsoft.DotNet.GenFacades - 1.0.0-beta.18556.6\n- Microsoft.DotNet.Helix.Client - 1.0.0-beta.18556.6\n- Microsoft.DotNet.Helix.JobSender - 1.0.0-beta.18556.6\n- Microsoft.DotNet.Helix.Sdk - 1.0.0-beta.18556.6\n- Microsoft.DotNet.Maestro.Client - 1.0.0-beta.18556.6\n- Microsoft.DotNet.Maestro.Tasks - 1.0.0-beta.18556.6\n- Microsoft.DotNet.SignCheck - 1.0.0-beta.18556.6\n- Microsoft.DotNet.SignTool - 1.0.0-beta.18556.6\n- Microsoft.DotNet.SwaggerGenerator.CmdLine - 1.0.0-beta.18556.6\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18556.6","Url":"https://github.com/dotnet/standard/pull/959","RelatedDescription":"Closed or merged PR \"[Darc-Update] Update dependencies from build 20181106.6 of https://github.com/dotnet/arcade\" (#959)"},{"Id":"377878481","IsPullRequest":false,"CreatedAt":"2018-11-08T02:02:40","Actor":"rtroupin","Number":"958","RawContent":null,"Title":"Fails to see certificates in X509Store for StoreLocation.CurrentUser","State":"closed","Body":"Running in UWP application in Visual Studio 2017 on Windows 10 version 1803. Running as Administrator does not change result.  Sees LocalMachine certificates.  Current User should be able to access their own Certificates.  What permissions does a cross platform application need to support seeing own personal certificate store certificates? \r\n\r\ncode sample to illustrate:\r\n\r\nint certCountInStore = 0;\r\nint certCountInMyStore = 0;\r\n//=======Sees machine certs\r\nX509Store machStore = new X509Store(StoreName.TrustedPublisher, StoreLocation.LocalMachine);\r\nmachStore.Open(OpenFlags.ReadOnly);\r\nX509Certificate2Collection machcollection = (X509Certificate2Collection)machStore.Certificates;\r\ncertCountInStore = machcollection.Count;\r\nmachStore.Close();\r\n//==========does not see Current User Certs\r\nX509Store myStore = new X509Store(StoreName.My,StoreLocation.CurrentUser);\r\nmyStore.Open(OpenFlags.ReadOnly);\r\nX509Certificate2Collection mycollection = (X509Certificate2Collection)myStore.Certificates;\r\ncertCountInMyStore = mycollection.Count;\r\nmyStore.Close();\r\n","Url":"https://github.com/dotnet/standard/issues/958","RelatedDescription":"Closed issue \"Fails to see certificates in X509Store for StoreLocation.CurrentUser\" (#958)"},{"Id":"378523644","IsPullRequest":false,"CreatedAt":"2018-11-08T01:55:38","Actor":"ferrata","Number":"961","RawContent":null,"Title":"x2","State":"closed","Body":"","Url":"https://github.com/dotnet/standard/issues/961","RelatedDescription":"Closed issue \"x2\" (#961)"},{"Id":"378537277","IsPullRequest":false,"CreatedAt":"2018-11-08T01:54:15","Actor":"sam-piper","Number":"962","RawContent":null,"Title":"System.IO.Path.GetRelativePath() missing in .NET Standard 2.0","State":"closed","Body":"If I create a new .NET Standard 2.0 Class Library project using Visual Studio 2017, I cannot use System.IO.GetRelativePath(), it's not available.\r\n\r\nI tried adding a reference to System.Runtime.Extensions from NuGet, which contains the implementation, but it's still not available.\r\n\r\nIf I create a new .NET Core 2.1 class library then the method is available.\r\n\r\nIs there a workaround for this issue? I can't change the project type.","Url":"https://github.com/dotnet/standard/issues/962","RelatedDescription":"Closed issue \"System.IO.Path.GetRelativePath() missing in .NET Standard 2.0\" (#962)"},{"Id":"378404334","IsPullRequest":false,"CreatedAt":"2018-11-07T18:02:13","Actor":"mrlucmorin","Number":"960","RawContent":null,"Title":"Strong name validation failed","State":"open","Body":"Hi,\r\n\r\nI installed Microsoft.Packaging.Tools.Trimming, making sure to use the \"-pre\" cli parameter as recommended in #518 .\r\n\r\nVersion of the trimming tool is 1.1.0-preview1-27107-01\r\n\r\nProject is targeting .NET Framework 4.6.1\r\n\r\nAdded the following to the .csproj file:\r\n\r\n```\r\n  <PropertyGroup>\r\n    <TrimUnusedDependencies>true</TrimUnusedDependencies>\r\n  </PropertyGroup>\r\n\r\n```\r\nI added it as the very first PropertyGroup if that matters.\r\n\r\nWhen building the project from within VS2017, the following error happens:\r\n\r\n> Could not load file or assembly 'Microsoft.Packaging.Tools.Trimming.Tasks, Version=999.999.999.999, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51' or one of its dependencies. \r\n> \r\n> Strong name validation failed. (Exception from HRESULT: 0x8013141A) Confirm that the <UsingTask> declaration is correct, \r\n> that the assembly and all its dependencies are available, and that the task contains a public class that implements Microsoft.Build.Framework.ITask.\t\r\n> \r\n\r\nMicrosoft Visual Studio Professional 2017 \r\nVersion 15.8.9\r\nVisualStudio.15.Release/15.8.9+28010.2050\r\nMicrosoft .NET Framework\r\nVersion 4.7.03056\r\n\r\nAny suggestion?\r\n\r\nThanks","Url":"https://github.com/dotnet/standard/issues/960","RelatedDescription":"Open issue \"Strong name validation failed\" (#960)"},{"Id":"377836311","IsPullRequest":true,"CreatedAt":"2018-11-06T13:11:20","Actor":"dotnet-maestro[bot]","Number":"957","RawContent":null,"Title":"[Darc-Update] Update dependencies from build 20181105.4 of https://github.com/dotnet/arcade","State":"closed","Body":"This change updates the dependencies from https://github.com/dotnet/arcade to the following\n\n- Microsoft.AspNetCore.ApiVersioning - 1.0.0-beta.18555.4\n- symbols/Microsoft.AspNetCore.ApiVersioning.Swashbuckle.1.0.0-beta.18555.4.symbols.nupkg - 1.0.0-beta.18555.4\n- symbols/Microsoft.DotNet.ApiCompat.1.0.0-beta.18555.4.symbols.nupkg - 1.0.0-beta.18555.4\n- symbols/Microsoft.DotNet.Arcade.Sdk.1.0.0-beta.18555.4.symbols.nupkg - 1.0.0-beta.18555.4\n- symbols/Microsoft.DotNet.Build.Tasks.Feed.2.2.0-beta.18555.4.symbols.nupkg - 2.2.0-beta.18555.4\n- symbols/Microsoft.DotNet.Build.Tasks.Packaging.1.0.0-beta.18555.4.symbols.nupkg - 1.0.0-beta.18555.4\n- symbols/Microsoft.DotNet.CodeAnalysis.1.0.0-beta.18555.4.symbols.nupkg - 1.0.0-beta.18555.4\n- symbols/Microsoft.DotNet.Darc.1.0.0-beta.18555.4.symbols.nupkg - 1.0.0-beta.18555.4\n- symbols/Microsoft.DotNet.DarcLib.1.0.0-beta.18555.4.symbols.nupkg - 1.0.0-beta.18555.4\n- symbols/Microsoft.DotNet.Deployment.Tasks.Links.1.0.0-beta.18555.4.symbols.nupkg - 1.0.0-beta.18555.4\n- symbols/Microsoft.AspNetCore.ApiVersioning.Analyzers.1.0.0-beta.18555.4.symbols.nupkg - 1.0.0-beta.18555.4\n- symbols/Microsoft.DotNet.GenAPI.1.0.0-beta.18555.4.symbols.nupkg - 1.0.0-beta.18555.4\n- symbols/Microsoft.DotNet.Helix.Client.1.0.0-beta.18555.4.symbols.nupkg - 1.0.0-beta.18555.4\n- symbols/Microsoft.DotNet.Helix.JobSender.1.0.0-beta.18555.4.symbols.nupkg - 1.0.0-beta.18555.4\n- symbols/Microsoft.DotNet.Helix.Sdk.1.0.0-beta.18555.4.symbols.nupkg - 1.0.0-beta.18555.4\n- symbols/Microsoft.DotNet.Maestro.Client.1.0.0-beta.18555.4.symbols.nupkg - 1.0.0-beta.18555.4\n- symbols/Microsoft.DotNet.Maestro.Tasks.1.0.0-beta.18555.4.symbols.nupkg - 1.0.0-beta.18555.4\n- symbols/Microsoft.DotNet.SignCheck.1.0.0-beta.18555.4.symbols.nupkg - 1.0.0-beta.18555.4\n- symbols/Microsoft.DotNet.SignTool.1.0.0-beta.18555.4.symbols.nupkg - 1.0.0-beta.18555.4\n- symbols/Microsoft.DotNet.SwaggerGenerator.CmdLine.1.0.0-beta.18555.4.symbols.nupkg - 1.0.0-beta.18555.4\n- symbols/Microsoft.DotNet.SwaggerGenerator.MSBuild.1.0.0-beta.18555.4.symbols.nupkg - 1.0.0-beta.18555.4\n- symbols/Microsoft.DotNet.GenFacades.1.0.0-beta.18555.4.symbols.nupkg - 1.0.0-beta.18555.4\n- symbols/Microsoft.DotNet.XUnitExtensions.2.4.0-beta.18555.4.symbols.nupkg - 2.4.0-beta.18555.4\n- symbols/Microsoft.AspNetCore.ApiVersioning.1.0.0-beta.18555.4.symbols.nupkg - 1.0.0-beta.18555.4\n- Microsoft.DotNet.SwaggerGenerator.MSBuild - 1.0.0-beta.18555.4\n- Microsoft.AspNetCore.ApiVersioning.Analyzers - 1.0.0-beta.18555.4\n- Microsoft.AspNetCore.ApiVersioning.Swashbuckle - 1.0.0-beta.18555.4\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18555.4\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18555.4\n- Microsoft.DotNet.Build.Tasks.Feed - 2.2.0-beta.18555.4\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18555.4\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.18555.4\n- Microsoft.DotNet.Darc - 1.0.0-beta.18555.4\n- Microsoft.DotNet.DarcLib - 1.0.0-beta.18555.4\n- Microsoft.DotNet.XUnitExtensions - 2.4.0-beta.18555.4\n- Microsoft.DotNet.Deployment.Tasks.Links - 1.0.0-beta.18555.4\n- Microsoft.DotNet.GenFacades - 1.0.0-beta.18555.4\n- Microsoft.DotNet.Helix.Client - 1.0.0-beta.18555.4\n- Microsoft.DotNet.Helix.JobSender - 1.0.0-beta.18555.4\n- Microsoft.DotNet.Helix.Sdk - 1.0.0-beta.18555.4\n- Microsoft.DotNet.Maestro.Client - 1.0.0-beta.18555.4\n- Microsoft.DotNet.Maestro.Tasks - 1.0.0-beta.18555.4\n- Microsoft.DotNet.SignCheck - 1.0.0-beta.18555.4\n- Microsoft.DotNet.SignTool - 1.0.0-beta.18555.4\n- Microsoft.DotNet.SwaggerGenerator.CmdLine - 1.0.0-beta.18555.4\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18555.4","Url":"https://github.com/dotnet/standard/pull/957","RelatedDescription":"Closed or merged PR \"[Darc-Update] Update dependencies from build 20181105.4 of https://github.com/dotnet/arcade\" (#957)"},{"Id":"377048432","IsPullRequest":true,"CreatedAt":"2018-11-03T12:26:24","Actor":"dotnet-maestro[bot]","Number":"955","RawContent":null,"Title":"[Darc-Update] Update dependencies from build 20181102.21 of https://github.com/dotnet/arcade","State":"closed","Body":"This change updates the dependencies from https://github.com/dotnet/arcade to the following\n\n- Microsoft.AspNetCore.ApiVersioning - 1.0.0-beta.18552.21\n- symbols/Microsoft.AspNetCore.ApiVersioning.Swashbuckle.1.0.0-beta.18552.21.symbols.nupkg - 1.0.0-beta.18552.21\n- symbols/Microsoft.DotNet.ApiCompat.1.0.0-beta.18552.21.symbols.nupkg - 1.0.0-beta.18552.21\n- symbols/Microsoft.DotNet.Arcade.Sdk.1.0.0-beta.18552.21.symbols.nupkg - 1.0.0-beta.18552.21\n- symbols/Microsoft.DotNet.Build.Tasks.Feed.2.2.0-beta.18552.21.symbols.nupkg - 2.2.0-beta.18552.21\n- symbols/Microsoft.DotNet.Build.Tasks.Packaging.1.0.0-beta.18552.21.symbols.nupkg - 1.0.0-beta.18552.21\n- symbols/Microsoft.DotNet.CodeAnalysis.1.0.0-beta.18552.21.symbols.nupkg - 1.0.0-beta.18552.21\n- symbols/Microsoft.DotNet.Darc.1.0.0-beta.18552.21.symbols.nupkg - 1.0.0-beta.18552.21\n- symbols/Microsoft.DotNet.DarcLib.1.0.0-beta.18552.21.symbols.nupkg - 1.0.0-beta.18552.21\n- symbols/Microsoft.DotNet.Deployment.Tasks.Links.1.0.0-beta.18552.21.symbols.nupkg - 1.0.0-beta.18552.21\n- symbols/Microsoft.AspNetCore.ApiVersioning.Analyzers.1.0.0-beta.18552.21.symbols.nupkg - 1.0.0-beta.18552.21\n- symbols/Microsoft.DotNet.GenAPI.1.0.0-beta.18552.21.symbols.nupkg - 1.0.0-beta.18552.21\n- symbols/Microsoft.DotNet.Helix.Client.1.0.0-beta.18552.21.symbols.nupkg - 1.0.0-beta.18552.21\n- symbols/Microsoft.DotNet.Helix.JobSender.1.0.0-beta.18552.21.symbols.nupkg - 1.0.0-beta.18552.21\n- symbols/Microsoft.DotNet.Helix.Sdk.1.0.0-beta.18552.21.symbols.nupkg - 1.0.0-beta.18552.21\n- symbols/Microsoft.DotNet.Maestro.Client.1.0.0-beta.18552.21.symbols.nupkg - 1.0.0-beta.18552.21\n- symbols/Microsoft.DotNet.Maestro.Tasks.1.0.0-beta.18552.21.symbols.nupkg - 1.0.0-beta.18552.21\n- symbols/Microsoft.DotNet.SignCheck.1.0.0-beta.18552.21.symbols.nupkg - 1.0.0-beta.18552.21\n- symbols/Microsoft.DotNet.SignTool.1.0.0-beta.18552.21.symbols.nupkg - 1.0.0-beta.18552.21\n- symbols/Microsoft.DotNet.SwaggerGenerator.CmdLine.1.0.0-beta.18552.21.symbols.nupkg - 1.0.0-beta.18552.21\n- symbols/Microsoft.DotNet.SwaggerGenerator.MSBuild.1.0.0-beta.18552.21.symbols.nupkg - 1.0.0-beta.18552.21\n- symbols/Microsoft.DotNet.GenFacades.1.0.0-beta.18552.21.symbols.nupkg - 1.0.0-beta.18552.21\n- symbols/Microsoft.DotNet.XUnitExtensions.2.4.0-beta.18552.21.symbols.nupkg - 2.4.0-beta.18552.21\n- symbols/Microsoft.AspNetCore.ApiVersioning.1.0.0-beta.18552.21.symbols.nupkg - 1.0.0-beta.18552.21\n- Microsoft.DotNet.SwaggerGenerator.MSBuild - 1.0.0-beta.18552.21\n- Microsoft.AspNetCore.ApiVersioning.Analyzers - 1.0.0-beta.18552.21\n- Microsoft.AspNetCore.ApiVersioning.Swashbuckle - 1.0.0-beta.18552.21\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18552.21\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18552.21\n- Microsoft.DotNet.Build.Tasks.Feed - 2.2.0-beta.18552.21\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18552.21\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.18552.21\n- Microsoft.DotNet.Darc - 1.0.0-beta.18552.21\n- Microsoft.DotNet.DarcLib - 1.0.0-beta.18552.21\n- Microsoft.DotNet.XUnitExtensions - 2.4.0-beta.18552.21\n- Microsoft.DotNet.Deployment.Tasks.Links - 1.0.0-beta.18552.21\n- Microsoft.DotNet.GenFacades - 1.0.0-beta.18552.21\n- Microsoft.DotNet.Helix.Client - 1.0.0-beta.18552.21\n- Microsoft.DotNet.Helix.JobSender - 1.0.0-beta.18552.21\n- Microsoft.DotNet.Helix.Sdk - 1.0.0-beta.18552.21\n- Microsoft.DotNet.Maestro.Client - 1.0.0-beta.18552.21\n- Microsoft.DotNet.Maestro.Tasks - 1.0.0-beta.18552.21\n- Microsoft.DotNet.SignCheck - 1.0.0-beta.18552.21\n- Microsoft.DotNet.SignTool - 1.0.0-beta.18552.21\n- Microsoft.DotNet.SwaggerGenerator.CmdLine - 1.0.0-beta.18552.21\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18552.21","Url":"https://github.com/dotnet/standard/pull/955","RelatedDescription":"Closed or merged PR \"[Darc-Update] Update dependencies from build 20181102.21 of https://github.com/dotnet/arcade\" (#955)"},{"Id":"376782406","IsPullRequest":true,"CreatedAt":"2018-11-02T12:31:38","Actor":"dotnet-maestro[bot]","Number":"954","RawContent":null,"Title":"[Darc-Update] Update dependencies from build 20181101.8 of https://github.com/dotnet/arcade","State":"closed","Body":"This change updates the dependencies from https://github.com/dotnet/arcade to the following\n\n- Microsoft.AspNetCore.ApiVersioning - 1.0.0-beta.18551.8\n- symbols/Microsoft.AspNetCore.ApiVersioning.Swashbuckle.1.0.0-beta.18551.8.symbols.nupkg - 1.0.0-beta.18551.8\n- symbols/Microsoft.DotNet.ApiCompat.1.0.0-beta.18551.8.symbols.nupkg - 1.0.0-beta.18551.8\n- symbols/Microsoft.DotNet.Arcade.Sdk.1.0.0-beta.18551.8.symbols.nupkg - 1.0.0-beta.18551.8\n- symbols/Microsoft.DotNet.Build.Tasks.Feed.2.2.0-beta.18551.8.symbols.nupkg - 2.2.0-beta.18551.8\n- symbols/Microsoft.DotNet.Build.Tasks.Packaging.1.0.0-beta.18551.8.symbols.nupkg - 1.0.0-beta.18551.8\n- symbols/Microsoft.DotNet.CodeAnalysis.1.0.0-beta.18551.8.symbols.nupkg - 1.0.0-beta.18551.8\n- symbols/Microsoft.DotNet.Darc.1.0.0-beta.18551.8.symbols.nupkg - 1.0.0-beta.18551.8\n- symbols/Microsoft.DotNet.DarcLib.1.0.0-beta.18551.8.symbols.nupkg - 1.0.0-beta.18551.8\n- symbols/Microsoft.DotNet.Deployment.Tasks.Links.1.0.0-beta.18551.8.symbols.nupkg - 1.0.0-beta.18551.8\n- symbols/Microsoft.AspNetCore.ApiVersioning.Analyzers.1.0.0-beta.18551.8.symbols.nupkg - 1.0.0-beta.18551.8\n- symbols/Microsoft.DotNet.GenAPI.1.0.0-beta.18551.8.symbols.nupkg - 1.0.0-beta.18551.8\n- symbols/Microsoft.DotNet.Helix.Client.1.0.0-beta.18551.8.symbols.nupkg - 1.0.0-beta.18551.8\n- symbols/Microsoft.DotNet.Helix.JobSender.1.0.0-beta.18551.8.symbols.nupkg - 1.0.0-beta.18551.8\n- symbols/Microsoft.DotNet.Helix.Sdk.1.0.0-beta.18551.8.symbols.nupkg - 1.0.0-beta.18551.8\n- symbols/Microsoft.DotNet.Maestro.Client.1.0.0-beta.18551.8.symbols.nupkg - 1.0.0-beta.18551.8\n- symbols/Microsoft.DotNet.Maestro.Tasks.1.0.0-beta.18551.8.symbols.nupkg - 1.0.0-beta.18551.8\n- symbols/Microsoft.DotNet.SignCheck.1.0.0-beta.18551.8.symbols.nupkg - 1.0.0-beta.18551.8\n- symbols/Microsoft.DotNet.SignTool.1.0.0-beta.18551.8.symbols.nupkg - 1.0.0-beta.18551.8\n- symbols/Microsoft.DotNet.SwaggerGenerator.CmdLine.1.0.0-beta.18551.8.symbols.nupkg - 1.0.0-beta.18551.8\n- symbols/Microsoft.DotNet.SwaggerGenerator.MSBuild.1.0.0-beta.18551.8.symbols.nupkg - 1.0.0-beta.18551.8\n- symbols/Microsoft.DotNet.GenFacades.1.0.0-beta.18551.8.symbols.nupkg - 1.0.0-beta.18551.8\n- symbols/Microsoft.DotNet.XUnitExtensions.2.4.0-beta.18551.8.symbols.nupkg - 2.4.0-beta.18551.8\n- symbols/Microsoft.AspNetCore.ApiVersioning.1.0.0-beta.18551.8.symbols.nupkg - 1.0.0-beta.18551.8\n- Microsoft.DotNet.SwaggerGenerator.MSBuild - 1.0.0-beta.18551.8\n- Microsoft.AspNetCore.ApiVersioning.Analyzers - 1.0.0-beta.18551.8\n- Microsoft.AspNetCore.ApiVersioning.Swashbuckle - 1.0.0-beta.18551.8\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.18551.8\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18551.8\n- Microsoft.DotNet.Build.Tasks.Feed - 2.2.0-beta.18551.8\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.18551.8\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.18551.8\n- Microsoft.DotNet.Darc - 1.0.0-beta.18551.8\n- Microsoft.DotNet.DarcLib - 1.0.0-beta.18551.8\n- Microsoft.DotNet.XUnitExtensions - 2.4.0-beta.18551.8\n- Microsoft.DotNet.Deployment.Tasks.Links - 1.0.0-beta.18551.8\n- Microsoft.DotNet.GenFacades - 1.0.0-beta.18551.8\n- Microsoft.DotNet.Helix.Client - 1.0.0-beta.18551.8\n- Microsoft.DotNet.Helix.JobSender - 1.0.0-beta.18551.8\n- Microsoft.DotNet.Helix.Sdk - 1.0.0-beta.18551.8\n- Microsoft.DotNet.Maestro.Client - 1.0.0-beta.18551.8\n- Microsoft.DotNet.Maestro.Tasks - 1.0.0-beta.18551.8\n- Microsoft.DotNet.SignCheck - 1.0.0-beta.18551.8\n- Microsoft.DotNet.SignTool - 1.0.0-beta.18551.8\n- Microsoft.DotNet.SwaggerGenerator.CmdLine - 1.0.0-beta.18551.8\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.18551.8","Url":"https://github.com/dotnet/standard/pull/954","RelatedDescription":"Closed or merged PR \"[Darc-Update] Update dependencies from build 20181101.8 of https://github.com/dotnet/arcade\" (#954)"},{"Id":"376706311","IsPullRequest":false,"CreatedAt":"2018-11-02T08:04:34","Actor":"sgarshol","Number":"953","RawContent":null,"Title":"Using .NET Standard from .NET Framework web application fails with \"Could not load file or assembly...\"","State":"open","Body":"Hi.\r\n\r\nI am trying to use .NET Standard libraries in .NET Framework ASP.NET web applications, and I frequently encounter errors relating to type loading. I have reproduced the problem as follows:\r\n\r\nhttps://github.com/sgarshol/VTSample\r\n\r\nI have built a bare-bones .NET Standard 2.0  library with a single class:\r\n\r\n```\r\nnamespace VTLib\r\n{\r\n    public class VTMaker\r\n    {\r\n        public (int, string) GetVT()\r\n        {\r\n            return (3, \"value\");\r\n        }\r\n    }\r\n}\r\n\r\n```\r\n\r\nI have referenced this library as a project reference in a console application and a ASP.NET MVC application, both .NET Framework v4.6.2. Both projects instantiate the class and call `GetVT()`.\r\n\r\nThe console application works fine.\r\n\r\nThe web application does not, and I receive the following error:\r\n\r\n> Could not load file or assembly 'System.ValueTuple, Version=0.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51' or one of its dependencies. The located assembly's manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040) \r\n\r\nChecking my the web application/bin folder, I find that the following .dlls:\r\n\r\n/bin/System.ValueTuple.dll (4.0.2.0, msil, .Net Framework v4.0)\r\n/bin/roslyn/System.ValueTuple.dll (4.0.1.0, msil, .Net Framework v.4.6.2)\r\n\r\nUsing JetBrains dotPeek, I examine my web application .dll and my library .dll and glean the following:\r\n\r\n- The web application .dll references System.ValueTuple (4.0.2.0), though the .csproj file includes no such reference.\r\n- The library .dll references netstandard (2.0.0.0) as its single reference.\r\n\r\nI find that I can \"resolve\" the issue by manually adding an assembly redirect instruction in the Web.config file:\r\n\r\n```\r\n<dependentAssembly>\r\n    <assemblyIdentity name=\"System.ValueTuple\" publicKeyToken=\"cc7b13ffcd2ddd51\" />\r\n    <bindingRedirect oldVersion=\"0.0.0.0-4.0.2.0\" newVersion=\"4.0.2.0\" />\r\n</dependentAssembly>\r\n\r\n```\r\nRegards\r\nSigurd\r\n\r\n","Url":"https://github.com/dotnet/standard/issues/953","RelatedDescription":"Open issue \"Using .NET Standard from .NET Framework web application fails with \"Could not load file or assembly...\"\" (#953)"}],"ResultType":"GitHubIssue"},"CoreFx-Issues":{"Issues":[{"Id":"385563986","IsPullRequest":true,"CreatedAt":"2018-11-29T04:20:29","Actor":"jnaputi253","Number":"33738","RawContent":null,"Title":"Fixed typos in the ArrayTensorExtensions file","State":"open","Body":"Fixed documentation typos","Url":"https://github.com/dotnet/corefx/pull/33738","RelatedDescription":"Open PR \"Fixed typos in the ArrayTensorExtensions file\" (#33738)"},{"Id":"385549530","IsPullRequest":true,"CreatedAt":"2018-11-29T03:08:00","Actor":"dotnet-maestro-bot","Number":"33737","RawContent":null,"Title":"Update CoreFx, CoreSetup to preview.18579.1, preview-27128-02, respectively (master)","State":"open","Body":"/cc @dotnet/maestro-reviewers-core","Url":"https://github.com/dotnet/corefx/pull/33737","RelatedDescription":"Open PR \"Update CoreFx, CoreSetup to preview.18579.1, preview-27128-02, respectively (master)\" (#33737)"},{"Id":"385546032","IsPullRequest":false,"CreatedAt":"2018-11-29T02:51:10","Actor":"jnaputi253","Number":"33736","RawContent":null,"Title":"Typos in ArrayTensorExtensions.cs Docs","State":"open","Body":"In the ArrayTensorExtensions class, certain functions have DenseTensor and SparseTensor mistyped as DenseTensorr and SparseTensorr.","Url":"https://github.com/dotnet/corefx/issues/33736","RelatedDescription":"Open issue \"Typos in ArrayTensorExtensions.cs Docs\" (#33736)"},{"Id":"385544900","IsPullRequest":false,"CreatedAt":"2018-11-29T02:45:46","Actor":"miketheitguy","Number":"33735","RawContent":null,"Title":"Documentation - Cross-Platform-Cryptography Update OAEP SHA-2 Padding Support Matrix","State":"open","Body":"Cross Platform Cryptography document mentions that OAEP SHA-2 padding is not available on Linux. But it looks like support for this was added per: https://github.com/dotnet/corefx/issues/2523\r\n\r\nAlso appears to be called out here: https://docs.microsoft.com/en-us/dotnet/core/whats-new/dotnet-core-2-1#api-changes\r\n\r\nAnd using RSA.Encrypt & Decrypt on Linux specifying OAEP-SHA256 Padding appears to work without an error (using .NET Core 2.1 and PowerShell  6.1.1).","Url":"https://github.com/dotnet/corefx/issues/33735","RelatedDescription":"Open issue \"Documentation - Cross-Platform-Cryptography Update OAEP SHA-2 Padding Support Matrix\" (#33735)"},{"Id":"385539174","IsPullRequest":true,"CreatedAt":"2018-11-29T02:19:45","Actor":"steveharter","Number":"33734","RawContent":null,"Title":"Add PathAssemblyResolver feature to System.Reflection.MetadataLoadContext","State":"open","Body":"Based on original PR #33201 we deferred PathAssemblyResolver until we had better requirements especially around duplicate assemblies.\r\n\r\nFixes #33323 - see this for requirements.\r\n\r\nDiscussion topic: one design point is that the resolver loops through all previously loaded assemblies during the Resolve() method to look for a match. It obtains the list of assemblies by calling MetadataLoadContext.GetAssemblies(). This allows the resolver to see or pick up any assemblies that the user may have loaded themselves (by calling one of the non-AssemblyName MetadataLoadContext.Load* methods including LoadFromAssemblyPath, LoadFromByteArray and LoadFromStream). Due to this looping the design is not as efficient as having the resolver track just the assemblies it loaded from within its Resolve() and only use those. However, this is somewhat mitigated because MetadataLoadContext will cache and remember the exact AssemblyName properties (Name, Version, CultureName and PublicKeyToken) of previously resolved AssemblyNames so subsequent access is fast and not handled by the resolver again. If we decide to not support this, and have the resolver only track the assemblies it loaded, then any of the Load* methods mentioned above made by the end user would be ignored which may be confusing to the end user and\\or limit the usefulness of this resolver (which may be an acceptable tradeoff).","Url":"https://github.com/dotnet/corefx/pull/33734","RelatedDescription":"Open PR \"Add PathAssemblyResolver feature to System.Reflection.MetadataLoadContext\" (#33734)"},{"Id":"385145697","IsPullRequest":true,"CreatedAt":"2018-11-29T01:59:38","Actor":"safern","Number":"33725","RawContent":null,"Title":"Remove PackagingTaskDir property in packaging.props","State":"closed","Body":"This property is no longer needed here since we now define it in the Packaging package coming from arcade. Setting this property is causing to use packaging tasks coming from buildtools rather than the ones from arcade.\r\n\r\ncc: @danmosemsft @ericstj @joperezr ","Url":"https://github.com/dotnet/corefx/pull/33725","RelatedDescription":"Closed or merged PR \"Remove PackagingTaskDir property in packaging.props\" (#33725)"},{"Id":"385503505","IsPullRequest":false,"CreatedAt":"2018-11-28T23:35:53","Actor":"Marv51","Number":"33733","RawContent":null,"Title":"Clean up netstandard build configurations from System.IO.Compression.Brotli tests and common compression tests","State":"open","Body":"This is a follow-up issue for PR #33345, specifically to address this [comment](https://github.com/dotnet/corefx/pull/33345#pullrequestreview-174506575)\r\n\r\nThe main goal is to remove the `STREAM_MEMORY_OVERLOADS_AVAILABLE` constant from the Brotli Tests and then the ifs for that constant.","Url":"https://github.com/dotnet/corefx/issues/33733","RelatedDescription":"Open issue \"Clean up netstandard build configurations from System.IO.Compression.Brotli tests and common compression tests\" (#33733)"},{"Id":"385466423","IsPullRequest":false,"CreatedAt":"2018-11-28T21:34:31","Actor":"adiaaida","Number":"33732","RawContent":null,"Title":"[CoreFX] [master] Multiple tests failing with error code 1","State":"open","Body":"@DrewScoggins commented on [Tue Nov 27 2018](https://github.com/dotnet/core-eng/issues/4712)\n\n```[11/21/2018 11:15:30 AM][INF] File saved to: \"C:\\j\\w\\perf_windows_---356c2fc4\\artifacts\\bin\\tests\\System.Collections.Concurrent.Performance.Tests\\netcoreapp-Windows_NT-Release-x64\\Perf-Profile-System.Collections.Concurrent.Performance.Tests.csv\"\r\n11:16:03 C:\\j\\w\\perf_windows_---356c2fc4\\Tools\\tests.targets(576,5): warning MSB3073: The command \"C:\\j\\w\\perf_windows_---356c2fc4\\artifacts\\bin\\tests/System.Collections.Concurrent.Performance.Tests/netcoreapp-Windows_NT-Release-x64//RunTests.cmd C:\\j\\w\\perf_windows_---356c2fc4\\artifacts\\bin\\testhost/netcoreapp-Windows_NT-Release-x64/\" exited with code 1. [C:\\j\\w\\perf_windows_---356c2fc4\\src\\System.Collections.Concurrent\\tests\\Performance\\System.Collections.Concurrent.Performance.Tests.csproj]\r\n11:16:03 C:\\j\\w\\perf_windows_---356c2fc4\\Tools\\tests.targets(584,5): error : One or more tests failed while running tests from 'System.Collections.Concurrent.Performance.Tests' please check C:\\j\\w\\perf_windows_---356c2fc4\\artifacts\\bin\\tests/System.Collections.Concurrent.Performance.Tests/netcoreapp-Windows_NT-Release-x64/testResults.xml for details! [C:\\j\\w\\perf_windows_---356c2fc4\\src\\System.Collections.Concurrent\\tests\\Performance\\System.Collections.Concurrent.Performance.Tests.csproj]\r\n```\r\nAbove is the output of one of the perf tests in particular, but we are seeing this across multiple tests that are being run. You can find a log here, https://ci2.dot.net/job/dotnet_corefx/job/perf/job/master/job/perf_windows_nt_release/7376/consoleFull. It seems like all of the tests are being run properly, but something in the run script is returning error code 1.\r\n\r\ncc: @brianrob @billwert @adamsitnik\n\n","Url":"https://github.com/dotnet/corefx/issues/33732","RelatedDescription":"Open issue \"[CoreFX] [master] Multiple tests failing with error code 1\" (#33732)"},{"Id":"384978453","IsPullRequest":false,"CreatedAt":"2018-11-28T19:41:55","Actor":"DrewScoggins","Number":"33715","RawContent":null,"Title":"Release 2.2 branch failes to build","State":"closed","Body":"```\r\nC:\\git\\corefx2\\Tools\\Symbols.targets(515,7): warning : Downloading https://dotnetfeed.blob.core.windows.net/dotnet-core\r\n/assets/symbols/runtime.win-x64.Microsoft.NETCore.Runtime.CoreCLR.2.2.0-rtm-27110-04.symbols.nupkg failed with exceptio\r\nn:  [C:\\git\\corefx2\\external\\runtime\\runtime.depproj]\r\nC:\\git\\corefx2\\Tools\\Symbols.targets(515,7): warning : Response status code does not indicate success: 404 (The specifi\r\ned blob does not exist.). [C:\\git\\corefx2\\external\\runtime\\runtime.depproj]\r\nC:\\git\\corefx2\\Tools\\Symbols.targets(515,7): warning :    at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuc\r\ncess(Task task) [C:\\git\\corefx2\\external\\runtime\\runtime.depproj]\r\nC:\\git\\corefx2\\Tools\\Symbols.targets(515,7): warning :    at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSucce\r\nssAndDebuggerNotification(Task task) [C:\\git\\corefx2\\external\\runtime\\runtime.depproj]\r\nC:\\git\\corefx2\\Tools\\Symbols.targets(515,7): warning :    at Microsoft.DotNet.Build.Tasks.DownloadFilesFromUrl.<Execute\r\nAsync>d__17.MoveNext() [C:\\git\\corefx2\\external\\runtime\\runtime.depproj]\r\nC:\\git\\corefx2\\external\\runtime\\runtime.depproj(102,7): warning : Failed to download CoreCLR symbols\r\n```\r\n\r\nI was seeing this failure when trying to build the release/2.2 branch in the perf lab, and I am also seeing this on my local machine. Is this a known issue? It seems to be missing a symbol package. @danmosemsft @stephentoub ","Url":"https://github.com/dotnet/corefx/issues/33715","RelatedDescription":"Closed issue \"Release 2.2 branch failes to build\" (#33715)"},{"Id":"385422324","IsPullRequest":true,"CreatedAt":"2018-11-28T19:28:52","Actor":"jkotas","Number":"33730","RawContent":null,"Title":"Fix non-deterministic test failures caused by accessing uninitialized memory","State":"open","Body":"Fixes dotnet/coreclr#21238","Url":"https://github.com/dotnet/corefx/pull/33730","RelatedDescription":"Open PR \"Fix non-deterministic test failures caused by accessing uninitialized memory\" (#33730)"},{"Id":"385295519","IsPullRequest":false,"CreatedAt":"2018-11-28T19:26:19","Actor":"justinushermawan","Number":"33727","RawContent":null,"Title":".NET Core 2.1 Roslyn cannot find System.Decimal in assemblies","State":"closed","Body":"I'm using **Roslyn** to compile my class in runtime to `assembly` output. I've added my needed assemblies into metadata references as below:\r\n\r\n```\r\nstring p = Path.GetDirectoryName(typeof(object).Assembly.Location);\r\n_ref = new MetadataReference[] {\r\n     MetadataReference.CreateFromFile(Path.Combine(p, \"System.Collections.dll\")),\r\n     MetadataReference.CreateFromFile(Path.Combine(p, \"System.Runtime.dll\")),\r\n     MetadataReference.CreateFromFile(Path.Combine(p, \"System.Private.CoreLib.dll\")),\r\n     MetadataReference.CreateFromFile(typeof(object).Assembly.Location),          \r\n     MetadataReference.CreateFromFile(typeof(Schema).Assembly.Location)\r\n};\r\n```\r\nAnd my CSharp syntax tree:\r\n\r\n```\r\nusing System;\r\n\r\nnamespace _\r\n{\r\n    public sealed class Model : Record\r\n    {\r\n        public string name;\r\n        public decimal amount;\r\n        public bool granted;\r\n        public DateTime birthdate;\r\n    }\r\n}\r\n```\r\nAnd when I use my `dll` file in **another project**, I got an error when I create an instance of `Model`, the error is located on my `decimal` property which is `amount`. Omnisharp shows me:\r\n\r\n`The type 'Decimal' is defined in an assembly that is not referenced. You must add a reference to assembly 'System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e'.`\r\n\r\nAs far as I known, the `System.Private.CoreLib.dll` has been existed in `typeof(object).Assembly.Location`, so it doesn't make any sense if still giving me the error.\r\n\r\nWhat's wrong here??","Url":"https://github.com/dotnet/corefx/issues/33727","RelatedDescription":"Closed issue \".NET Core 2.1 Roslyn cannot find System.Decimal in assemblies\" (#33727)"},{"Id":"385105221","IsPullRequest":true,"CreatedAt":"2018-11-28T18:43:54","Actor":"tannergooding","Number":"33723","RawContent":null,"Title":"Updating S.N.Tensors to only include the implementation","State":"closed","Body":"CC. @eerhardt, @ericstj ","Url":"https://github.com/dotnet/corefx/pull/33723","RelatedDescription":"Closed or merged PR \"Updating S.N.Tensors to only include the implementation\" (#33723)"},{"Id":"385405811","IsPullRequest":false,"CreatedAt":"2018-11-28T18:42:40","Actor":"tannergooding","Number":"33729","RawContent":null,"Title":"Ensure that new projects/APIs are documented and the relevant intellisense files are updated","State":"open","Body":"We've introduced a couple of new projects (such as `System.Runtime.Intrinsics` and `System.Numerics.Tensors`) as well as several new APIs across the board.\r\n\r\nWe should ensure that the relevant IntelliSense files are updated and included in the `Microsoft.Private.Intellisense` package to ensure that our nupkg ship with up-to-date IntelliSense/Documentation.","Url":"https://github.com/dotnet/corefx/issues/33729","RelatedDescription":"Open issue \"Ensure that new projects/APIs are documented and the relevant intellisense files are updated\" (#33729)"},{"Id":"385290671","IsPullRequest":true,"CreatedAt":"2018-11-28T18:39:37","Actor":"dotnet-maestro-bot","Number":"33726","RawContent":null,"Title":"Update CoreClr, CoreFx, CoreSetup to preview-27128-02, preview.18578.2, preview-27128-01, respectively (master)","State":"closed","Body":"","Url":"https://github.com/dotnet/corefx/pull/33726","RelatedDescription":"Closed or merged PR \"Update CoreClr, CoreFx, CoreSetup to preview-27128-02, preview.18578.2, preview-27128-01, respectively (master)\" (#33726)"},{"Id":"385065226","IsPullRequest":true,"CreatedAt":"2018-11-28T16:44:20","Actor":"danmosemsft","Number":"33721","RawContent":null,"Title":"Fix SourceLink URL to be GitHub one","State":"closed","Body":"Currently our sourcelink URL's point to a private server which hosts a clone of the public server. We want them to point to the public locations as they did before the Arcade conversion.\r\n\r\nI suspect this is the fix but I cannot get my local repo to build in such a way it reproes the problem like the official build.\r\n\r\nThis prevents Arcade using $(PrivateRepositoryUrl)\r\nhttps://github.com/dotnet/arcade/blob/a991a1d46cf6e5ed7dde93309217306f6a42c136/src/Microsoft.DotNet.Arcade.Sdk/tools/Workarounds.targets#L122-L123\r\n\r\nCLI sets this property: https://github.com/dotnet/cli/blob/e08f56b7e4f67be64f3084fb91ac0e995c32e75e/build/BuildDefaults.props#L25\r\n\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/33721","RelatedDescription":"Closed or merged PR \"Fix SourceLink URL to be GitHub one\" (#33721)"},{"Id":"385325498","IsPullRequest":false,"CreatedAt":"2018-11-28T15:35:24","Actor":"gunars-skangals","Number":"33728","RawContent":null,"Title":"Expression.MemberInit: assigning non-constant Int64 expression to nullable Int64 property","State":"open","Body":"after executing such expression, the property contains some random value instead\r\n\r\naffects .NET Core 2.1\r\nnoticed in https://github.com/OData/WebApi/issues/1565\r\n\r\ncode to reproduce:\r\n```c#\r\nclass A {\r\n\tpublic long? PropA { get; set; }\r\n\tpublic static long Return11() => 11;\r\n}\r\n\r\nvar aType = typeof(A);\r\nvar valueToAssignExpr = Expression.Call(aType.GetMethod(\"Return11\"));            \r\nvar bindExpr = Expression.Bind(aType.GetProperty(\"PropA\"), valueToAssignExpr);\r\nvar memberInitExpr = Expression.MemberInit(Expression.New(aType), bindExpr);\r\nvar createInstanceFn = Expression.Lambda<Func<A>>(memberInitExpr).Compile();\r\n\r\nvar instance = createInstanceFn();\r\nConsole.WriteLine(instance.PropA); // 2220528703218 or some other random noise\r\n```\r\n\r\nAdditional weirdness:\r\n- if the value to assign is an Expression.Constant, i.e. 11L, it just throws NullReferenceException in setter, at least is an error though\r\n- for Int32? property, the new value seems to always be 0\r\n","Url":"https://github.com/dotnet/corefx/issues/33728","RelatedDescription":"Open issue \"Expression.MemberInit: assigning non-constant Int64 expression to nullable Int64 property\" (#33728)"},{"Id":"385014535","IsPullRequest":true,"CreatedAt":"2018-11-28T14:19:29","Actor":"pharring","Number":"33718","RawContent":null,"Title":"Move ObsoleteAttribute to correct property","State":"closed","Body":"The ObsoleteAttribute for System.Diagnostics.Process.VirtualMemorySize was on the wrong property.","Url":"https://github.com/dotnet/corefx/pull/33718","RelatedDescription":"Closed or merged PR \"Move ObsoleteAttribute to correct property\" (#33718)"},{"Id":"385072109","IsPullRequest":true,"CreatedAt":"2018-11-28T11:48:54","Actor":"dotnet-maestro-bot","Number":"33722","RawContent":null,"Title":"Update CoreClr, CoreFx, CoreSetup to preview-27128-01, preview.18578.1, preview-27127-02, respectively (master)","State":"closed","Body":"","Url":"https://github.com/dotnet/corefx/pull/33722","RelatedDescription":"Closed or merged PR \"Update CoreClr, CoreFx, CoreSetup to preview-27128-01, preview.18578.1, preview-27127-02, respectively (master)\" (#33722)"},{"Id":"385118384","IsPullRequest":false,"CreatedAt":"2018-11-28T06:19:30","Actor":"cycbluesky","Number":"33724","RawContent":null,"Title":"EmailAddressAttribute is sealed class","State":"open","Body":"EmailAddressAttribute is sealed class but others such as StringLengthAttribute, RequiredAttribute are not.\r\nWhy?\r\n\r\nI want to use a new class which inherit EmailAddressAttribute to set the ErrorMessage globally.","Url":"https://github.com/dotnet/corefx/issues/33724","RelatedDescription":"Open issue \"EmailAddressAttribute is sealed class\" (#33724)"},{"Id":"385031001","IsPullRequest":false,"CreatedAt":"2018-11-27T23:19:54","Actor":"nguerrera","Number":"33720","RawContent":null,"Title":"Duplicate types in System.IO.Packaging.dll and WindowsBase.dll","State":"open","Body":"(Filing bugs from my notes after customer visit exploring porting large WPF app to .NET core 3)\r\n\r\n# Repro steps\r\n* Install 3.0 SDK\r\n* mkdir repro\r\n* cd repro\r\n* dotnet new wpf\r\n* dotnet add package Microsoft.Windows.Compatibility\r\n* Edit MainWindow.xaml.cs\r\n\r\n```diff\r\n        public MainWindow()\r\n        {\r\n            InitializeComponent();\r\n+            var x = typeof(System.IO.Packaging.PackUriHelper);\r\n        }\r\n```\r\n\r\n* dotnet build\r\n\r\n# Expected result\r\n\r\nBuilds successfully\r\n\r\n# Actual result\r\n```\r\nMainWindow.xaml.cs(26,48): error CS0433: The type 'PackUriHelper' exists in both 'System.IO.Packaging, Version=4.0.3.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' and 'WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35' [\r\n```\r\n\r\n@ericstj \r\n\r\n","Url":"https://github.com/dotnet/corefx/issues/33720","RelatedDescription":"Open issue \"Duplicate types in System.IO.Packaging.dll and WindowsBase.dll\" (#33720)"},{"Id":"385026646","IsPullRequest":false,"CreatedAt":"2018-11-27T23:09:54","Actor":"nguerrera","Number":"33719","RawContent":null,"Title":"MissingMethodException when referencing to netfx binary using File/Directory static methods with ACL types ","State":"closed","Body":"(Filing bugs from my notes after customer visit exploring porting large WPF app to .NET core 3)\r\n\r\nI think this was probably discussed before, but I can't find an existing issue with a conclusion.\r\n\r\nThere are static methods on System.IO.File/System.IO.Directory that take FileSecurity/DirectorySecurity\r\n\r\nExamples:\r\nhttps://apisof.net/catalog/System.IO.Directory.CreateDirectory(String,DirectorySecurity)\r\nhttps://apisof.net/catalog/System.IO.File.Create(String,Int32,FileOptions,FileSecurity)\r\n\r\nThese have alternatives in .NET Core as extension methods on FileInfo/DirectoryInfo. However, if you're using a netfx binary that calls these methods and can't recompile it to use the extensions, then you get MissingMethodException at runtime. I understand the layering reasoning for this, but should we consider a capability API + PlatformNotSupportedException and bring these back to maximize compatibility with existing binaries?\r\n\r\ncc @terrajobst @karelz \r\n","Url":"https://github.com/dotnet/corefx/issues/33719","RelatedDescription":"Closed issue \"MissingMethodException when referencing to netfx binary using File/Directory static methods with ACL types \" (#33719)"},{"Id":"385012367","IsPullRequest":false,"CreatedAt":"2018-11-27T22:20:40","Actor":"bartonjs","Number":"33717","RawContent":null,"Title":"Allow recovering writable/heapable buffers from \"lower level\" types.","State":"open","Body":"Thanks to @ChadNedzlek for the \"why can't you?\" as a followup to the \"how many copies of this?\" do we need from  #31011 and #26528:\r\n\r\nThe general idea is that when using utility methods that \"downcast\" from Memory toward ReadOnlySpan, a caller can recover their writable (and/or heapable) needs operating on the same memory range.  This means that for cases where writable doesn't feel very common (or heapable doesn't feel very common) the caller has a common \"how do I slice my original data to match?\" escape valve; and frameworks can fill in the {ReadOnly|}{Memory|Span} matrix as needed by scenario usage (for the places that the performance memory.Span twice is unacceptable).\r\n\r\n```C#\r\npublic partial struct Span<T>\r\n{\r\n    /// <summary>\r\n    /// Get a slice of this (writable) span which has the same start and length as a\r\n    /// contained readonly span.\r\n    /// </summary>\r\n    /// <remarks>\r\n    /// If containedSpan is empty, the behavior is the same as Slice(0, 0).\r\n    /// </remarks>\r\n    /// <exception cref=\"ArgumentOutOfRangeException\">containedSpan is not a sub-span of this span</exception>\r\n    public Span<T> SliceTo(ReadOnlySpan<T> containedSpan);\r\n}\r\n\r\npublic partial struct ReadOnlyMemory<T>\r\n{\r\n    /// <summary>\r\n    /// Get a slice of this memory which has the same start and length as a span over the\r\n    /// same memory\r\n    /// </summary>\r\n    /// <remarks>\r\n    /// If containedSpan is empty, the behavior is the same as Slice(0, 0).\r\n    /// </remarks>\r\n    /// <exception cref=\"ArgumentOutOfRangeException\">\r\n    /// containedSpan is not a sub-span of this span\r\n    /// </exception>\r\n    public ReadOnlyMemory<T> SliceTo(ReadOnlySpan<T> containedSpan);\r\n}\r\n\r\npublic partial struct Memory<T>\r\n{\r\n    /// <summary>\r\n    /// Get a slice of this memory which has the same start and length as a span\r\n    /// over the same memory\r\n    /// </summary>\r\n    /// <remarks>\r\n    /// If containedSpan is empty, the behavior is the same as Slice(0, 0).\r\n    /// </remarks>\r\n    /// <exception cref=\"ArgumentOutOfRangeException\">containedSpan is\r\n    /// not a sub-span of this span</exception>\r\n    public Memory<T> SliceTo(ReadOnlySpan<T> containedSpan);\r\n\r\n    /// <summary>\r\n    /// Get a slice of this (writable) memory which has the same start and length\r\n    /// as a contained readonly memory.\r\n    /// </summary>\r\n    /// <remarks>\r\n    /// If containedSpan is empty, the behavior is the same as Slice(0, 0).\r\n    /// </remarks>\r\n    /// <exception cref=\"ArgumentOutOfRangeException\">containedSpan is\r\n    /// not a sub-span of this span</exception>\r\n    public Memory<T> SliceTo(ReadOnlyMemory<T> containedSpan);\r\n}\r\n```\r\n\r\nSample usage for Split:\r\n\r\n```C#\r\nSpan<byte> data = ...;\r\n\r\nforeach (ReadOnlySpan<byte> segment in ((ReadOnlySpan<byte>)data).Split(0xFF))\r\n{\r\n    Span<byte> writableSegment = data.SliceTo(segment);\r\n    writableSegment.Clear();\r\n}\r\n```\r\n\r\nCC: @stephentoub @GrabYourPitchforks @terrajobst @ahsonkhan @KrzysztofCwalina ","Url":"https://github.com/dotnet/corefx/issues/33717","RelatedDescription":"Open issue \"Allow recovering writable/heapable buffers from \"lower level\" types.\" (#33717)"},{"Id":"384998810","IsPullRequest":false,"CreatedAt":"2018-11-27T21:42:43","Actor":"rahuldutta90","Number":"33716","RawContent":null,"Title":"Migration from HttpWebRequest to HttpClient for net452","State":"open","Body":"Hi,\r\n\r\nI am migrating our ADLS sdk from httpwebrequest to HttpClient because httpclient is better performant in netcore and provides more flexibility and also it is recommended. However I have seen regression in performance on post requests (append) for httpclient in net452. \r\n\r\nUsage before: new HttpWebrequest instance per request.\r\nCurrent usage: Single httpClient instance with WebRequestHandler for all requests\r\n\r\nI have done single threaded append tests (post requests) also multthreaded tests and both show there is a regression (max 1.25 times) in performance with webrequesthandler (httpclient).\r\n\r\nI have kept all the settings same like ServicePointManager.UseNagleAlgorithm = false,            ServicePointManager.Expect100Continue = false and set the ServicePointManager.Defaultconnection limit for the multithreaded test. \r\n\r\nOur sdk is run by quite a few customers on netframework so I would want to avoid this regression. Can someone comment why is there a difference and if I should do something else to get equal performance?","Url":"https://github.com/dotnet/corefx/issues/33716","RelatedDescription":"Open issue \"Migration from HttpWebRequest to HttpClient for net452\" (#33716)"},{"Id":"384977065","IsPullRequest":false,"CreatedAt":"2018-11-27T20:41:41","Actor":"onovotny","Number":"33714","RawContent":null,"Title":"Process Start fails with URL on .NET Core 3","State":"open","Body":"The following code works on .NET Framework but throws on .NET Core 3:\r\n\r\n`Process.Start(\"https://github.com\");`\r\n\r\n```\r\nSystem.ComponentModel.Win32Exception\r\n  HResult=0x80004005\r\n  Message=The system cannot find the file specified.\r\n  Source=System.Diagnostics.Process\r\n  StackTrace:\r\n   at System.Diagnostics.Process.StartWithCreateProcess(ProcessStartInfo startInfo)\r\n   at System.Diagnostics.Process.Start()\r\n   at System.Diagnostics.Process.Start(ProcessStartInfo startInfo)\r\n   at System.Diagnostics.Process.Start(String fileName)\r\n   at NetCoreProcessStartBug.MainWindow.ButtonBase_OnClick(Object sender, RoutedEventArgs e) in c:\\dev\\NetCoreProcessStartBug\\NetCoreProcessStartBug\\MainWindow.xaml.cs:line 31\r\n   at System.Windows.RoutedEventHandlerInfo.InvokeHandler(Object target, RoutedEventArgs routedEventArgs)\r\n   at System.Windows.RouteItem.InvokeHandler(RoutedEventArgs routedEventArgs)\r\n   at System.Windows.EventRoute.InvokeHandlersImpl(Object source, RoutedEventArgs args, Boolean reRaised)\r\n   at System.Windows.EventRoute.InvokeHandlers(Object source, RoutedEventArgs args)\r\n   at System.Windows.UIElement.RaiseEventImpl(DependencyObject sender, RoutedEventArgs args)\r\n   at System.Windows.UIElement.RaiseEvent(RoutedEventArgs e)\r\n   at System.Windows.Controls.Primitives.ButtonBase.OnClick()\r\n   at System.Windows.Controls.Button.OnClick()\r\n   at System.Windows.Controls.Primitives.ButtonBase.OnMouseLeftButtonUp(MouseButtonEventArgs e)\r\n   at System.Windows.UIElement.OnMouseLeftButtonUpThunk(Object sender, MouseButtonEventArgs e)\r\n   at System.Windows.Input.MouseButtonEventArgs.InvokeEventHandler(Delegate genericHandler, Object genericTarget)\r\n   at System.Windows.RoutedEventArgs.InvokeHandler(Delegate handler, Object target)\r\n   at System.Windows.RoutedEventHandlerInfo.InvokeHandler(Object target, RoutedEventArgs routedEventArgs)\r\n   at System.Windows.RouteItem.InvokeHandler(RoutedEventArgs routedEventArgs)\r\n   at System.Windows.EventRoute.InvokeHandlersImpl(Object source, RoutedEventArgs args, Boolean reRaised)\r\n   at System.Windows.EventRoute.ReInvokeHandlers(Object source, RoutedEventArgs args)\r\n   at System.Windows.UIElement.ReRaiseEventAs(DependencyObject sender, RoutedEventArgs args, RoutedEvent newEvent)\r\n   at System.Windows.UIElement.CrackMouseButtonEventAndReRaiseEvent(DependencyObject sender, MouseButtonEventArgs e)\r\n   at System.Windows.UIElement.OnMouseUpThunk(Object sender, MouseButtonEventArgs e)\r\n   at System.Windows.Input.MouseButtonEventArgs.InvokeEventHandler(Delegate genericHandler, Object genericTarget)\r\n   at System.Windows.RoutedEventArgs.InvokeHandler(Delegate handler, Object target)\r\n   at System.Windows.RoutedEventHandlerInfo.InvokeHandler(Object target, RoutedEventArgs routedEventArgs)\r\n   at System.Windows.RouteItem.InvokeHandler(RoutedEventArgs routedEventArgs)\r\n   at System.Windows.EventRoute.InvokeHandlersImpl(Object source, RoutedEventArgs args, Boolean reRaised)\r\n   at System.Windows.EventRoute.InvokeHandlers(Object source, RoutedEventArgs args)\r\n   at System.Windows.UIElement.RaiseEventImpl(DependencyObject sender, RoutedEventArgs args)\r\n   at System.Windows.UIElement.RaiseTrustedEvent(RoutedEventArgs args)\r\n   at System.Windows.UIElement.RaiseEvent(RoutedEventArgs args, Boolean trusted)\r\n   at System.Windows.Input.InputManager.ProcessStagingArea()\r\n   at System.Windows.Input.InputManager.ProcessInput(InputEventArgs input)\r\n   at System.Windows.Input.InputProviderSite.ReportInput(InputReport inputReport)\r\n   at System.Windows.Interop.HwndMouseInputProvider.ReportInput(IntPtr hwnd, InputMode mode, Int32 timestamp, RawMouseActions actions, Int32 x, Int32 y, Int32 wheel)\r\n   at System.Windows.Interop.HwndMouseInputProvider.FilterMessage(IntPtr hwnd, WindowMessage msg, IntPtr wParam, IntPtr lParam, Boolean& handled)\r\n   at System.Windows.Interop.HwndSource.InputFilterMessage(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam, Boolean& handled)\r\n   at MS.Win32.HwndWrapper.WndProc(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam, Boolean& handled)\r\n   at MS.Win32.HwndSubclass.DispatcherCallbackOperation(Object o)\r\n   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, Object args, Int32 numArgs)\r\n   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(Object source, Delegate callback, Object args, Int32 numArgs, Delegate catchHandler)\r\n   at System.Windows.Threading.Dispatcher.WrappedInvoke(Delegate callback, Object args, Int32 numArgs, Delegate catchHandler)\r\n   at System.Windows.Threading.Dispatcher.LegacyInvokeImpl(DispatcherPriority priority, TimeSpan timeout, Delegate method, Object args, Int32 numArgs)\r\n   at System.Windows.Threading.Dispatcher.Invoke(DispatcherPriority priority, Delegate method, Object arg)\r\n   at MS.Win32.HwndSubclass.SubclassWndProc(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam)\r\n   at MS.Win32.UnsafeNativeMethods.DispatchMessage(MSG& msg)\r\n   at System.Windows.Threading.Dispatcher.TranslateAndDispatchMessage(MSG& msg)\r\n   at System.Windows.Threading.Dispatcher.PushFrameImpl(DispatcherFrame frame)\r\n   at System.Windows.Threading.Dispatcher.PushFrame(DispatcherFrame frame)\r\n   at System.Windows.Threading.Dispatcher.Run()\r\n   at System.Windows.Application.RunDispatcher(Object ignore)\r\n   at System.Windows.Application.RunInternal(Window window)\r\n   at System.Windows.Application.Run(Window window)\r\n   at System.Windows.Application.Run()\r\n   at NetCoreProcessStartBug.App.Main()\r\n```\r\nGitHub repro: https://github.com/onovotny/NetCoreProcessStartBug","Url":"https://github.com/dotnet/corefx/issues/33714","RelatedDescription":"Open issue \"Process Start fails with URL on .NET Core 3\" (#33714)"},{"Id":"384965601","IsPullRequest":true,"CreatedAt":"2018-11-27T20:09:50","Actor":"JeremyKuhne","Number":"33713","RawContent":null,"Title":"QueryDirectoryFile requires 64 bit alignment to work on ARM32.","State":"open","Body":"Using Marshal.AllocHGlobal instead of byte[] will do that (and avoid the need to pin).\r\n\r\nShould fix #33563, still setting up hardware to validate. Putting this up to validate other environments and get the approach validated.\r\n\r\ncc: @danmosemsft, @joperezr, @joshfree ","Url":"https://github.com/dotnet/corefx/pull/33713","RelatedDescription":"Open PR \"QueryDirectoryFile requires 64 bit alignment to work on ARM32.\" (#33713)"},{"Id":"384956593","IsPullRequest":false,"CreatedAt":"2018-11-27T19:45:37","Actor":"willdrob","Number":"33712","RawContent":null,"Title":"CookieContainer memory leak","State":"open","Body":"I'm seeing a small memory leak coupled with gradual CPU usage increase over time in an app that is using static HttpClient to regularly hit distinct urls that return set-cookie headers. These issues are solved by setting UseCookies = false on HttpClientHandler. That led me to investigate CookieContainer and I noticed that it maintains a hashtable (m_domaintable) of domains and for each domain it maintains a sorted list of paths (m_list). So even though cookies are correctly removed based on Capacity and PerDomainCapacity, memory and cpu usage grow over time as m_domaintable/m_list grow with each new domain/path that is hit. There are some examples below that show the memory leak.\r\n\r\nFirst example: add a cookie for many distinct domains\r\n\r\n```\r\nvar cookieContainer = new CookieContainer();\r\nfor (int i = 0; i < 10000; i++)\r\n{\r\n    cookieContainer.Add(new Cookie(\"name1\", \"value1\", \"/\", $\"test{i}.com\"));\r\n}\r\n```\r\nSecond example: add a cookie for the same domain with different paths\r\n\r\n```\r\nvar cookieContainer = new CookieContainer();\r\nfor (int i = 0; i < 10000; i++)\r\n{\r\n    cookieContainer.Add(new Cookie(\"name1\", \"value1\", $\"/{i}\", \"test.com\"));\r\n}\r\n```\r\nIs there something I'm missing here in my usage of HttpClient/HttpClientHandler/CookieContainer? The documentation states that HttpClient should re-used throughout the life of an application but that means that CookieContainer will also be re-used and these collections will continue to grow.","Url":"https://github.com/dotnet/corefx/issues/33712","RelatedDescription":"Open issue \"CookieContainer memory leak\" (#33712)"},{"Id":"384912060","IsPullRequest":true,"CreatedAt":"2018-11-27T19:24:23","Actor":"stephentoub","Number":"33709","RawContent":null,"Title":"Revert \"Add another Zip IEnumerable<T> extension method (#26582)\"","State":"closed","Body":"This reverts commit 6b2b9e42097df84f9b1504fe7d14e9b64f8f0870 (using `git revert 6b2b9e42097df84f9b1504fe7d14e9b64f8f0870`, no conflicts).\r\n\r\nThe new Enumerable.Zip overload was added with PascalCased element names, which frustrates some folks, just as camelCased names would frustrate others, and potentially even no names.  Until we re-review and come up with the long-term story for how we want to (or not) expose ValueTuples in .NET public APIs, I'm removing this overload so we don't accidentally ship it as-is.  In the meantime, it's easy for someone to accomplish themselves without the overload, e.g. using the existing overload `Enumerable.Zip(first, second, (f,s) => (f,s))` instead of `Enumerable.Zip(first, second)`.\r\n\r\ncc: @terrajobst, @jaredpar, @bartonjs, @agocke, @cston \r\nRelated to https://github.com/dotnet/corefx/issues/33553","Url":"https://github.com/dotnet/corefx/pull/33709","RelatedDescription":"Closed or merged PR \"Revert \"Add another Zip IEnumerable<T> extension method (#26582)\"\" (#33709)"},{"Id":"384944743","IsPullRequest":false,"CreatedAt":"2018-11-27T19:16:07","Actor":"dotMorten","Number":"33711","RawContent":null,"Title":"Add release notes for UWP .NET Core 6.2.2","State":"closed","Body":"Release notes are missing for 6.2.2 @HollyAM \r\n\r\nhttps://github.com/Microsoft/dotnet/blob/master/releases/UWP/README.md\r\nhttps://github.com/Microsoft/dotnet/tree/master/releases/UWP/net-native2.2","Url":"https://github.com/dotnet/corefx/issues/33711","RelatedDescription":"Closed issue \"Add release notes for UWP .NET Core 6.2.2\" (#33711)"},{"Id":"384935140","IsPullRequest":false,"CreatedAt":"2018-11-27T18:46:50","Actor":"GrabYourPitchforks","Number":"33710","RawContent":null,"Title":"Many MemoryExtensions search APIs null ref when given a null value as input","State":"open","Body":"Example:\r\n\r\n```cs\r\n  public static void Main()\r\n  {\r\n    Span<string> theStrings = new string[1];\r\n    Console.WriteLine(theStrings.IndexOf((string)null));\r\n  }\r\n```\r\n\r\nThis should return 0, but it instead null refs.","Url":"https://github.com/dotnet/corefx/issues/33710","RelatedDescription":"Open issue \"Many MemoryExtensions search APIs null ref when given a null value as input\" (#33710)"},{"Id":"384879220","IsPullRequest":true,"CreatedAt":"2018-11-27T16:43:03","Actor":"richlander","Number":"33708","RawContent":null,"Title":"Update README.md","State":"closed","Body":"","Url":"https://github.com/dotnet/corefx/pull/33708","RelatedDescription":"Closed or merged PR \"Update README.md\" (#33708)"}],"ResultType":"GitHubIssue"},"Roslyn-Issues":{"Issues":[{"Id":"385559889","IsPullRequest":true,"CreatedAt":"2018-11-29T03:58:23","Actor":"CyrusNajmabadi","Number":"31432","RawContent":null,"Title":"Allow completion to provide an 'short description' for completion items.","State":"open","Body":"This was extracted out from https://github.com/dotnet/roslyn/pull/27694 to make the RegexCompletion work simpler to review.","Url":"https://github.com/dotnet/roslyn/pull/31432","RelatedDescription":"Open PR \"Allow completion to provide an 'short description' for completion items.\" (#31432)"},{"Id":"385551166","IsPullRequest":false,"CreatedAt":"2018-11-29T03:14:42","Actor":"tmat","Number":"31431","RawContent":null,"Title":"Microsoft.CodeAnalysis.VisualBasic.UnitTests.AnonymousTypesCodeGenTests failed in CI on Linux","State":"open","Body":"```\r\n[mAssertion Failed\r\nforward branches and fall-through must agree on stack depth\r\n\r\n   at Microsoft.CodeAnalysis.CodeGen.ILBuilder.MarkLabel(Object label) in /_/src/Compilers/Core/Portable/CodeGen/ILBuilderEmit.cs:line 157\r\n   at Microsoft.CodeAnalysis.VisualBasic.CodeGen.CodeGenerator.EmitLabelStatement(BoundLabelStatement boundLabelStatement) in /_/src/Compilers/VisualBasic/Portable/CodeGen/EmitStatement.vb:line 845\r\n   at Microsoft.CodeAnalysis.VisualBasic.CodeGen.CodeGenerator.EmitStatement(BoundStatement statement) in /_/src/Compilers/VisualBasic/Portable/CodeGen/EmitStatement.vb:line 50\r\n   at Microsoft.CodeAnalysis.VisualBasic.CodeGen.CodeGenerator.EmitBlock(BoundBlock scope) in /_/src/Compilers/VisualBasic/Portable/CodeGen/EmitStatement.vb:line 1235\r\n   at Microsoft.CodeAnalysis.VisualBasic.CodeGen.CodeGenerator.EmitStatement(BoundStatement statement) in /_/src/Compilers/VisualBasic/Portable/CodeGen/EmitStatement.vb:line 19\r\n   at Microsoft.CodeAnalysis.VisualBasic.CodeGen.CodeGenerator.GenerateImpl() in /_/src/Compilers/VisualBasic/Portable/CodeGen/CodeGenerator.vb:line 163\r\n   at Microsoft.CodeAnalysis.VisualBasic.CodeGen.CodeGenerator.Generate() in /_/src/Compilers/VisualBasic/Portable/CodeGen/CodeGenerator.vb:line 106\r\n   at Microsoft.CodeAnalysis.VisualBasic.MethodCompiler.GenerateMethodBody(PEModuleBuilder moduleBuilder, MethodSymbol method, Int32 methodOrdinal, BoundStatement block, ImmutableArray`1 lambdaDebugInfo, ImmutableArray`1 closureDebugInfo, StateMachineTypeSymbol stateMachineTypeOpt, VariableSlotAllocator variableSlotAllocatorOpt, DebugDocumentProvider debugDocumentProvider, DiagnosticBag diagnostics, Boolean emittingPdb, Boolean emitTestCoverageData, ImmutableArray`1 dynamicAnalysisSpans) in /_/src/Compilers/VisualBasic/Portable/Compilation/MethodCompiler.vb:line 1560\r\n   at Microsoft.CodeAnalysis.VisualBasic.MethodCompiler.LowerAndEmitMethod(MethodSymbol method, Int32 methodOrdinal, BoundBlock block, Binder binderOpt, TypeCompilationState compilationState, DiagnosticBag diagsForCurrentMethod, ProcessedFieldOrPropertyInitializers processedInitializers, SynthesizedSubmissionFields previousSubmissionFields, MethodSymbol constructorToInject, Int32& delegateRelaxationIdDispenser) in /_/src/Compilers/VisualBasic/Portable/Compilation/MethodCompiler.vb:line 1463\r\n   at Microsoft.CodeAnalysis.VisualBasic.MethodCompiler.CompileMethod(MethodSymbol method, Int32 methodOrdinal, Int32& withEventPropertyIdDispenser, Int32& delegateRelaxationIdDispenser, Predicate`1 filter, TypeCompilationState compilationState, ProcessedFieldOrPropertyInitializers processedInitializers, Binder containingTypeBinder, SynthesizedSubmissionFields previousSubmissionFields, MethodSymbol& referencedConstructor) in /_/src/Compilers/VisualBasic/Portable/Compilation/MethodCompiler.vb:line 1236\r\n   at Microsoft.CodeAnalysis.VisualBasic.MethodCompiler.CompileNamedType(NamedTypeSymbol containingType, Predicate`1 filter) in /_/src/Compilers/VisualBasic/Portable/Compilation/MethodCompiler.vb:line 661\r\n   at Microsoft.CodeAnalysis.VisualBasic.MethodCompiler._Closure$__30-0._Lambda$__0() in /_/src/Compilers/VisualBasic/Portable/Compilation/MethodCompiler.vb:line 503\r\n   at Roslyn.Utilities.UICultureUtilities.<>c__DisplayClass5_0.<WithCurrentUICulture>b__0() in /_/src/Compilers/Core/Portable/InternalUtilities/UICultureUtilities.cs:line 136\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot)\r\n   at System.Threading.Tasks.ThreadPoolTaskScheduler.TryExecuteTaskInline(Task task, Boolean taskWasPreviouslyQueued)\r\n   at System.Threading.Tasks.TaskScheduler.TryRunInline(Task task, Boolean taskWasPreviouslyQueued)\r\n   at System.Threading.Tasks.Task.WrappedTryRunInline()\r\n   at System.Threading.Tasks.Task.InternalWaitCore(Int32 millisecondsTimeout, CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.VisualBasic.MethodCompiler.WaitForWorkers() in /_/src/Compilers/VisualBasic/Portable/Compilation/MethodCompiler.vb:line 313\r\n   at Microsoft.CodeAnalysis.VisualBasic.MethodCompiler.CompileMethodBodies(VisualBasicCompilation compilation, PEModuleBuilder moduleBeingBuiltOpt, Boolean emittingPdb, Boolean emitTestCoverageData, Boolean hasDeclarationErrors, Predicate`1 filter, DiagnosticBag diagnostics, CancellationToken cancellationToken) in /_/src/Compilers/VisualBasic/Portable/Compilation/MethodCompiler.vb:line 235\r\n   at Microsoft.CodeAnalysis.VisualBasic.VisualBasicCompilation.CompileMethods(CommonPEModuleBuilder moduleBuilder, Boolean emittingPdb, Boolean emitMetadataOnly, Boolean emitTestCoverageData, DiagnosticBag diagnostics, Predicate`1 filterOpt, CancellationToken cancellationToken) in /_/src/Compilers/VisualBasic/Portable/Compilation/VisualBasicCompilation.vb:line 2321\r\n   at Microsoft.CodeAnalysis.Compilation.Emit(Stream peStream, Stream metadataPEStream, Stream pdbStream, Stream xmlDocumentationStream, Stream win32Resources, IEnumerable`1 manifestResources, EmitOptions options, IMethodSymbol debugEntryPoint, Stream sourceLinkStream, IEnumerable`1 embeddedTexts, CompilationTestData testData, CancellationToken cancellationToken) in /_/src/Compilers/Core/Portable/Compilation/Compilation.cs:line 2391\r\n   at Microsoft.CodeAnalysis.Compilation.Emit(Stream peStream, Stream pdbStream, Stream xmlDocumentationStream, Stream win32Resources, IEnumerable`1 manifestResources, EmitOptions options, IMethodSymbol debugEntryPoint, Stream sourceLinkStream, IEnumerable`1 embeddedTexts, Stream metadataPEStream, CancellationToken cancellationToken) in /_/src/Compilers/Core/Portable/Compilation/Compilation.cs:line 2335\r\n   at Microsoft.CodeAnalysis.VisualBasic.UnitTests.AnonymousTypesCodeGenTests._Closure$__2-1._Lambda$__0() in /_/src/Compilers/VisualBasic/Test/Emit/CodeGen/AnonymousTypesCodeGenTests.vb:line 167\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot)\r\n   at System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n```\r\n\r\n```\r\n=== COMMAND LINE ===\r\n\"/data/agent/_work/7/s/build/scripts/../../.dotnet/dotnet\" exec --depsfile \"/data/agent/_work/7/s/Binaries/Debug/UnitTests/Microsoft.CodeAnalysis.VisualBasic.Emit.UnitTests/netcoreapp2.1/Microsoft.CodeAnalysis.VisualBasic.Emit.UnitTests.deps.json\" --runtimeconfig \"/data/agent/_work/7/s/Binaries/Debug/UnitTests/Microsoft.CodeAnalysis.VisualBasic.Emit.UnitTests/netcoreapp2.1/Microsoft.CodeAnalysis.VisualBasic.Emit.UnitTests.runtimeconfig.json\" \"/home/dditadministrator/.nuget/packages/xunit.runner.console/2.4.1-pre.build.4059/tools/netcoreapp2.0/xunit.console.dll\" \"/data/agent/_work/7/s/Binaries/Debug/UnitTests/Microsoft.CodeAnalysis.VisualBasic.Emit.UnitTests/netcoreapp2.1/Microsoft.CodeAnalysis.VisualBasic.Emit.UnitTests.dll\" -noautoreporters -xml \"/data/agent/_work/7/s/Binaries/TestResults/Debug/Microsoft.CodeAnalysis.VisualBasic.Emit.UnitTests_netcoreapp2.1_x64.xml\" -html \"/data/agent/_work/7/s/Binaries/TestResults/Debug/Microsoft.CodeAnalysis.VisualBasic.Emit.UnitTests_netcoreapp2.1_x64.html\"  > \"/data/agent/_work/7/s/Binaries/Debug/Logs/Microsoft.CodeAnalysis.VisualBasic.Emit.UnitTests_netcoreapp2.1_x64.log\" 2>&1\r\n```","Url":"https://github.com/dotnet/roslyn/issues/31431","RelatedDescription":"Open issue \"Microsoft.CodeAnalysis.VisualBasic.UnitTests.AnonymousTypesCodeGenTests failed in CI on Linux\" (#31431)"},{"Id":"385509279","IsPullRequest":true,"CreatedAt":"2018-11-29T02:00:07","Actor":"dotnet-bot","Number":"31428","RawContent":null,"Title":"Merge master to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/31428","RelatedDescription":"Closed or merged PR \"Merge master to master-vs-deps\" (#31428)"},{"Id":"385516953","IsPullRequest":true,"CreatedAt":"2018-11-29T00:35:40","Actor":"ryzngard","Number":"31430","RawContent":null,"Title":"Dont warn about the deprecated lincseUrl property","State":"open","Body":"Command line builds can fail with a warning like below. This removes that warning for all projects. Based on the fix provided in [project-system](https://github.com/dotnet/project-system/pull/4320)\r\n\r\nTo repro, run `build/scripts/cibuild.cmd -configuration Debug -testDesktop -Test32 `\r\n\r\n```\r\nC:\\Program Files\\dotnet\\sdk\\2.1.500\\Sdks\\NuGet.Build.Tasks.Pack\\build\\NuGet.Build.Tasks.Pack.targets(202,5): error NU51\r\n25: The 'licenseUrl' element will be deprecated. Consider using the 'license' element instead. [C:\\Users\\ryzng\\Source\\R\r\nepos\\roslyn\\src\\NuGet\\Microsoft.Net.Compilers\\Microsoft.Net.Compilers.Package.csproj]\r\n\r\nBuild FAILED.\r\n\r\nC:\\Program Files\\dotnet\\sdk\\2.1.500\\Sdks\\NuGet.Build.Tasks.Pack\\build\\NuGet.Build.Tasks.Pack.targets(202,5): error NU51\r\n25: The 'licenseUrl' element will be deprecated. Consider using the 'license' element instead. [C:\\Users\\ryzng\\Source\\R\r\nepos\\roslyn\\src\\NuGet\\Microsoft.Net.Compilers\\Microsoft.Net.Compilers.Package.csproj]\r\n    0 Warning(s)\r\n    1 Error(s)\r\n```","Url":"https://github.com/dotnet/roslyn/pull/31430","RelatedDescription":"Open PR \"Dont warn about the deprecated lincseUrl property\" (#31430)"},{"Id":"385511811","IsPullRequest":true,"CreatedAt":"2018-11-29T00:12:01","Actor":"sharwell","Number":"31429","RawContent":null,"Title":"Improve test performance by disposing of the workspace","State":"open","Body":"The cleanup from `[UseExportProvider]` runs before the cleanup from a test class implementing `IAsyncLifetime` or `IDisposable`, so the completion tests were creating `Workspace` instances that didn't cancel outstanding work before waiting for that work to complete. This change improves test performance by 3 seconds per completion test.","Url":"https://github.com/dotnet/roslyn/pull/31429","RelatedDescription":"Open PR \"Improve test performance by disposing of the workspace\" (#31429)"},{"Id":"385407531","IsPullRequest":true,"CreatedAt":"2018-11-28T23:29:10","Actor":"AlekseyTs","Number":"31420","RawContent":null,"Title":"Change type of CSharpCompilationOptions.Nullable from bool? To bool.","State":"closed","Body":"Don't warn about \"!\", regardless of context (https://github.com/dotnet/csharplang/blob/master/meetings/2018/LDM-2018-10-29.md).\r\n\r\nCloses #30177.","Url":"https://github.com/dotnet/roslyn/pull/31420","RelatedDescription":"Closed or merged PR \"Change type of CSharpCompilationOptions.Nullable from bool? To bool.\" (#31420)"},{"Id":"385041205","IsPullRequest":true,"CreatedAt":"2018-11-28T23:14:43","Actor":"jasonmalinowski","Number":"31407","RawContent":null,"Title":"Delete unused linkedhashqueue.cs","State":"closed","Body":"Just dead code.","Url":"https://github.com/dotnet/roslyn/pull/31407","RelatedDescription":"Closed or merged PR \"Delete unused linkedhashqueue.cs\" (#31407)"},{"Id":"385461196","IsPullRequest":false,"CreatedAt":"2018-11-28T21:50:32","Actor":"WillSullivan","Number":"31427","RawContent":null,"Title":"Make it easy to obtain the MethodInfo for a method","State":"closed","Body":"I'm knee deep in Expression land (the mascots are obscure, for some reason) and I'm finding I have to get quite a few ```MethodInfo```s for a lot of ```Expression.Call```s, and there is just not any easy way to obtain them for complex and generic methods.\r\n\r\nWho doesn't love reflecting over hoary old chestnuts like\r\n\r\n``` c#\r\nmethod = typeof(AppDomain).GetMethod(\r\n     nameof(AppDomain.CreateDomain), \r\n     BindingFlags.Public | BindingFlags.Static, \r\n     null, \r\n     new[] { typeof(string), typeof(Evidence), typeof(AppDomainSetup), typeof(PermissionSet), typeof(StrongName[]) }, \r\n     null);\r\n```\r\n\r\nAnd this doesn't look like a dirty filthy hack at all (and courtesy of Jon Skeet, no less)\r\n\r\n``` c#\r\nmethod = typeof(Enumerable).GetMethods()\r\n    .Where(m => m.Name == nameof(Enumerable.Contains))\r\n    .Single(m => m.GetParameters().Length == 2)\r\n    .MakeGenericMethod(typeof(int));\r\n```\r\nYou have to admit this is pretty awful. Could we have a  new operator to make this a little better? \r\n\r\n## Proposal: Add a ```methodof``` operator\r\nLike ```typeof```, which retrieves the Type of a class definition, add a ```methodof``` expression that gives us the MethodInfo for a given method. Using the above as examples, doesn't\r\n``` c#\r\nmethodof(AppDomain.CreateDomain(string, Evidence, AppDomainSetup, PermissionSet, StrongName[]))\r\n```\r\nand \r\n``` c#\r\nmethodof(Enumerable.Contains(IEnumerable<int>, int)\r\n```\r\nlook almost... nay, absolutely professional? Easier to combine into a single line?\r\n\r\n## Pros\r\nomg look at what it's replacing. And it would be possible to get intellisense involved, which GetMethod does not provide. And this means you'll know before compile time if you're doing it wrong. With GetMethod I sometimes have to bust out a prototype to play with different BindingFlags until I get something other than ```null``` back from the stupid call.\r\n\r\n## Cons\r\nSomebody's got to code it. Although I can't think of an example I'd bet it might be possible to find a situation where the compiler isn't able to correctly identify the method you want. But if so there's always the fallback option. \r\n\r\nI did scan the backlog for similar feature requests, but no luck. Hope I'm not wasting your time on something that's already been proposed.","Url":"https://github.com/dotnet/roslyn/issues/31427","RelatedDescription":"Closed issue \"Make it easy to obtain the MethodInfo for a method\" (#31427)"},{"Id":"385416882","IsPullRequest":true,"CreatedAt":"2018-11-28T21:10:35","Actor":"AlekseyTs","Number":"31422","RawContent":null,"Title":"Rename members of the NullableAnnotation enum","State":"closed","Body":"","Url":"https://github.com/dotnet/roslyn/pull/31422","RelatedDescription":"Closed or merged PR \"Rename members of the NullableAnnotation enum\" (#31422)"},{"Id":"385457154","IsPullRequest":false,"CreatedAt":"2018-11-28T21:07:34","Actor":"MichaelPuckett2","Number":"31426","RawContent":null,"Title":"using statement allows possible race condition that prevents disposing","State":"open","Body":"**Version Used**: *, 7.3 (all previous versions)\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Start a ```using``` with some disposable type (preferably in a separate thread).\r\n2. Abort the thread by any means after initializing the type but before entering the auto wired ```try```\r\n3. The disposable type never gets disposed properly.\r\n\r\n**Expected Behavior**:\r\nWe should expect that ```using``` statement will always dispose of a type regardless of error.\r\n\r\n**Actual Behavior**:\r\nThe disposable type used via a ```using``` statement is exposed to a possible race condition where it may never get disposed.\r\n\r\nThe currently generated IL when using a ```using``` statement works like this:\r\n\r\n```\r\nR r = new R();\r\ntry\r\n{\r\n    //Do something with r\r\n}\r\nfinally\r\n{\r\n    r?.Dispose();\r\n}\r\n\r\n```\r\nIL Generated:\r\n\r\n```\r\n  IL_0001:  newobj     instance void Question_Answer_Console_App.R::.ctor()\r\n  IL_0006:  stloc.0\r\n  .try\r\n  {\r\n    IL_0007:  nop\r\n    IL_0008:  nop\r\n    IL_0009:  leave.s    IL_0016\r\n  }  // end .try\r\n  finally\r\n  {\r\n    IL_000b:  ldloc.0\r\n    IL_000c:  brfalse.s  IL_0015\r\n    IL_000e:  ldloc.0\r\n    IL_000f:  callvirt   instance void [mscorlib]System.IDisposable::Dispose()\r\n    IL_0014:  nop\r\n    IL_0015:  endfinally\r\n  }  // end handler\r\n```\r\n\r\nNote that there is a possible race condition when initializing ```R``` or before entering ```try``` with ```R``` which prevents the opportunity for ```finally``` to be called for disposal.\r\n\r\nHere is one solution that would allow ```R``` to be initialized inside of the ```try``` with a ```using``` statement.  Have the ```using``` auto generated code work more like this:\r\n\r\n```\r\nR r = null;\r\ntry\r\n{\r\n    r = new R();\r\n    //Do something with r\r\n}\r\nfinally\r\n{\r\n    r?.Dispose();\r\n}\r\n```\r\nIL Generated something like this:\r\n\r\n```\r\n  IL_0001:  ldnull\r\n  IL_0002:  stloc.0\r\n  .try\r\n  {\r\n    IL_0003:  nop\r\n    IL_0004:  newobj     instance void Question_Answer_Console_App.R::.ctor()\r\n    IL_0009:  stloc.0\r\n    IL_000a:  nop\r\n    IL_000b:  leave.s    IL_001c\r\n  }  // end .try\r\n  finally\r\n  {\r\n    IL_000d:  nop\r\n    IL_000e:  ldloc.0\r\n    IL_000f:  brtrue.s   IL_0013\r\n    IL_0011:  br.s       IL_001a\r\n    IL_0013:  ldloc.0\r\n    IL_0014:  call       instance void Question_Answer_Console_App.R::Dispose()\r\n    IL_0019:  nop\r\n    IL_001a:  nop\r\n    IL_001b:  endfinally\r\n  }  // end handler\r\n```\r\n\r\nHere is a console app demonstrating the problem with using:  \r\n\r\n```\r\nusing System;\r\nusing System.Threading;\r\n\r\nnamespace Question_Answer_Console_App\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            Console.WriteLine(\"Start Main\");\r\n\r\n            Thread thread = null;\r\n            thread = new Thread(new ThreadStart(() =>\r\n            {\r\n                Console.WriteLine(\"Thread Started\");\r\n                using (var r = new R(thread))\r\n                {\r\n                    Console.WriteLine($\"Using {nameof(R)}\");\r\n                }\r\n            }));\r\n\r\n            thread.Start();\r\n            thread.Join();\r\n\r\n            Console.WriteLine(\"End Main\");\r\n            Console.ReadKey();\r\n        }\r\n    }\r\n\r\n    public class R : IDisposable\r\n    {\r\n        public R(Thread thread)\r\n        {\r\n            Console.WriteLine($\"Init {nameof(R)}\");\r\n            //Comment out the line below to see R used as expected; leave as is to expose the possible race condition.\r\n            thread.Abort(); //We abort during initialization and never get disposed. Although aborting here doesn't initialize or assign the type to a variable it can be assumed aborted just as if it happened immediately after the assignment and before the try.\r\n        }\r\n\r\n        public void Dispose()\r\n        {\r\n            Console.WriteLine($\"Disposed {nameof(R)}\");\r\n        }\r\n    }\r\n}\r\n```\r\nThis outputs:\r\n\r\n> Start Main\r\n> Thread Started\r\n> Init R\r\n> End Main\r\n\r\nWhen we are expecting the output to be this:\r\n\r\n> Start Main\r\n> Thread Started\r\n> Init R\r\n> Using R\r\n> Disposed R\r\n> End Main","Url":"https://github.com/dotnet/roslyn/issues/31426","RelatedDescription":"Open issue \"using statement allows possible race condition that prevents disposing\" (#31426)"},{"Id":"385452641","IsPullRequest":true,"CreatedAt":"2018-11-28T20:54:40","Actor":"tmat","Number":"31425","RawContent":null,"Title":"Upload all VSIXes to drop, not just those that are inserted","State":"open","Body":"Temporary measure to make the vsixes available.\r\nLong term we will want to remove dependency on cpvsbuild completely.","Url":"https://github.com/dotnet/roslyn/pull/31425","RelatedDescription":"Open PR \"Upload all VSIXes to drop, not just those that are inserted\" (#31425)"},{"Id":"385412352","IsPullRequest":true,"CreatedAt":"2018-11-28T20:30:08","Actor":"dotnet-bot","Number":"31421","RawContent":null,"Title":"Merge master to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/31421","RelatedDescription":"Closed or merged PR \"Merge master to master-vs-deps\" (#31421)"},{"Id":"385434522","IsPullRequest":false,"CreatedAt":"2018-11-28T20:02:29","Actor":"ivanbasov","Number":"31424","RawContent":null,"Title":"Editor Completion: Roslyn + Razor scnearios","State":"open","Body":"The following scenarios should be validated/implemented by Roslyn/Editor/Razor:\r\n\r\n1. @P|age where | is the cursor. When I click on CTRL+J here, completion appears. “Page” is provided by C#/Roslyn.\r\n2. @add|tagHelper where | is the cursor and ‘t’ is small. When I click on CTRL+J here, completion appears. It includes items provided by C#/Roslyn as well.\r\n3. @add|TagHelper where | is the cursor. Click on CTRL+J here. Expected to see Razor items.\r\n4. @| -and click CTRL+J. Expected to see Roslyn and Razor items.\r\n\r\nAll scenarios should work in both .NET Framework and .NET Core platforms. Especially, need to verify .NET Core - it seems to be more buggy.","Url":"https://github.com/dotnet/roslyn/issues/31424","RelatedDescription":"Open issue \"Editor Completion: Roslyn + Razor scnearios\" (#31424)"},{"Id":"385424602","IsPullRequest":false,"CreatedAt":"2018-11-28T19:35:04","Actor":"TessenR","Number":"31423","RawContent":null,"Title":"Incorrect nullable warnings in local functions' closures","State":"open","Body":"**Version Used**: \r\n\r\nBranch C# 8.0: Nullable reference type (29 Oct 2018)\r\nhttps://github.com/dotnet/csharplang/blob/master/proposals/nullable-reference-types.md\r\nLatest commit 2f8fef by AlekseyTs:\r\nCompare Nullable modifiers while comparing type symbols by default. (#30770)\r\n\r\n**Steps to Reproduce**:\r\n\r\nCompile the following code:\r\n```cs\r\n#nullable enable\r\npublic class C {\r\n    void M(C? c)\r\n    {\r\n        c = new C();\r\n        Local();\r\n        void Local() => c.ToString();\r\n    }\r\n}\r\n```\r\n\r\nhttps://sharplab.io/#v2:EYLgZgpghgLgrgJwgZwLQDk4BstWFiAJQkiQDsBjCAFQE8AHFAGhhAEssAfAYjO13wQABBDJ4CAWABQAAQDMQmQCYhAYSEBvaUJ2KALEICyAClUB+IRQCU23Vqm7HloQF4hZCAHc1xqwG5bJyEAGQB7CigsXwCHIP0Q8MjfVwA+SwA6alCAZRgENjIAc2jAoQBfaTKgA\r\n\r\n**Expected Behavior**:\r\n\r\nNo warnings\r\n\r\n**Actual Behavior**:\r\n\r\n`warning CS8602: Possible dereference of a null reference.`","Url":"https://github.com/dotnet/roslyn/issues/31423","RelatedDescription":"Open issue \"Incorrect nullable warnings in local functions' closures\" (#31423)"},{"Id":"385014418","IsPullRequest":true,"CreatedAt":"2018-11-28T18:42:03","Actor":"tmat","Number":"31403","RawContent":null,"Title":"Fix format of version strings generated to DependentAssemblyVersions.csv","State":"closed","Body":"before: `Version=1.2.3.4.Split('=')[1]` after: `1.2.3.4`","Url":"https://github.com/dotnet/roslyn/pull/31403","RelatedDescription":"Closed or merged PR \"Fix format of version strings generated to DependentAssemblyVersions.csv\" (#31403)"},{"Id":"385306223","IsPullRequest":false,"CreatedAt":"2018-11-28T14:56:18","Actor":"sharwell","Number":"31419","RawContent":null,"Title":"Formatter fails to ignore excluded preprocessor lines","State":"open","Body":"**Version Used**: 15.9.2\r\n\r\n🔗 Found during investigation in #31142.\r\n\r\n**Steps to Reproduce**:\r\n\r\nRun **Format Document** on the following code:\r\n\r\n```csharp\r\n#if !DEBUG\r\n\r\nusing System;\r\n\r\nclass Class1\r\n{\r\n    public void Main()\r\n    {\r\n        Console.WriteLine(@\"Here is a sample:\r\n    #region Region\r\n    #endregion\r\n\");\r\n    }\r\n}\r\n\r\n#endif\r\n```\r\n\r\n**Expected Behavior**:\r\n\r\nNo changes are made.\r\n\r\n**Actual Behavior**:\r\n\r\n* ✔️ In **Debug** builds, no changes are made.\r\n* :x: In **Release** builds, significant whitespace in the string literal is changed:\r\n\r\n    ```csharp\r\n    #if !DEBUG\r\n\r\n    using System;\r\n\r\n    class Class1\r\n    {\r\n        public void Main()\r\n        {\r\n            Console.WriteLine(@\"Here is a sample:\r\n    #region Region\r\n    #endregion\r\n    \");\r\n        }\r\n    }\r\n\r\n    #endif\r\n    ```","Url":"https://github.com/dotnet/roslyn/issues/31419","RelatedDescription":"Open issue \"Formatter fails to ignore excluded preprocessor lines\" (#31419)"},{"Id":"385303174","IsPullRequest":false,"CreatedAt":"2018-11-28T14:49:57","Actor":"sharwell","Number":"31418","RawContent":null,"Title":"Incomplete indentation of lambda in formatter","State":"open","Body":"**Version Used**: 15.9.2\r\n\r\n🔗 Found during review of #31142\r\n\r\n**Steps to Reproduce**:\r\n\r\nRun **Format Document** on the following code:\r\n\r\n```csharp\r\nusing System;\r\n\r\nclass Class1\r\n{\r\n    public void Main(Func<int> action)\r\n    {\r\n       Main(action: () =>\r\n       {\r\n           return new int\r\n           {\r\n               // This comment affects formatting\r\n           };\r\n       });\r\n    }\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\n\r\n```csharp\r\nusing System;\r\n\r\nclass Class1\r\n{\r\n    public void Main(Func<int> action)\r\n    {\r\n        Main(action: () =>\r\n        {\r\n            return new int\r\n            {\r\n                // This comment affects formatting\r\n            };\r\n        });\r\n    }\r\n}\r\n```\r\n\r\n**Actual Behavior**:\r\n\r\n```csharp\r\nusing System;\r\n\r\nclass Class1\r\n{\r\n    public void Main(Func<int> action)\r\n    {\r\n        Main(action: () =>\r\n        {\r\n            return new int\r\n            {\r\n               // This comment affects formatting\r\n           };\r\n        });\r\n    }\r\n}\r\n```\r\n","Url":"https://github.com/dotnet/roslyn/issues/31418","RelatedDescription":"Open issue \"Incomplete indentation of lambda in formatter\" (#31418)"},{"Id":"385302284","IsPullRequest":false,"CreatedAt":"2018-11-28T14:48:08","Actor":"sharwell","Number":"31417","RawContent":null,"Title":"Incorrect formatting of lambda when formatting enclosing node","State":"open","Body":"**Version Used**: 15.9.2\r\n\r\n🔗 Found during review of #31142\r\n\r\n**Steps to Reproduce**:\r\n\r\nRun **Format Document** on the following code:\r\n\r\n```csharp\r\nusing System;\r\n\r\nclass Class1\r\n{\r\n    public void Main(Func<int> action)\r\n    {\r\n       Main(action: () =>\r\n        {\r\n            return new int\r\n            {\r\n                // This comment affects formatting\r\n            };\r\n        });\r\n    }\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\n\r\n```csharp\r\nusing System;\r\n\r\nclass Class1\r\n{\r\n    public void Main(Func<int> action)\r\n    {\r\n        Main(action: () =>\r\n        {\r\n            return new int\r\n            {\r\n                // This comment affects formatting\r\n            };\r\n        });\r\n    }\r\n}\r\n```\r\n\r\n**Actual Behavior**:\r\n\r\n```csharp\r\nusing System;\r\n\r\nclass Class1\r\n{\r\n    public void Main(Func<int> action)\r\n    {\r\n        Main(action: () =>\r\n         {\r\n             return new int\r\n             {\r\n                // This comment affects formatting\r\n            };\r\n         });\r\n    }\r\n}\r\n```","Url":"https://github.com/dotnet/roslyn/issues/31417","RelatedDescription":"Open issue \"Incorrect formatting of lambda when formatting enclosing node\" (#31417)"},{"Id":"385300951","IsPullRequest":false,"CreatedAt":"2018-11-28T14:45:16","Actor":"sharwell","Number":"31416","RawContent":null,"Title":"Incorrect formatting of lambda when indenting first line","State":"open","Body":"**Version Used**: 15.9.2\r\n\r\n🔗 Found during review of #31142\r\n\r\n**Steps to Reproduce**:\r\n\r\nRun **Format Document** on the following code:\r\n\r\n```csharp\r\nusing System;\r\n\r\nclass Class1\r\n{\r\n    public void Main(Func<int> action)\r\n    {\r\n        Main(action:() =>\r\n        {\r\n            return new int\r\n            {\r\n                // This comment affects formatting\r\n            };\r\n        });\r\n    }\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\n\r\n```csharp\r\nusing System;\r\n\r\nclass Class1\r\n{\r\n    public void Main(Func<int> action)\r\n    {\r\n        Main(action: () =>\r\n        {\r\n            return new int\r\n            {\r\n                // This comment affects formatting\r\n            };\r\n        });\r\n    }\r\n}\r\n```\r\n\r\n**Actual Behavior**:\r\n\r\n```csharp\r\nusing System;\r\n\r\nclass Class1\r\n{\r\n    public void Main(Func<int> action)\r\n    {\r\n        Main(action: () =>\r\n         {\r\n             return new int\r\n             {\r\n                // This comment affects formatting\r\n            };\r\n         });\r\n    }\r\n}\r\n```","Url":"https://github.com/dotnet/roslyn/issues/31416","RelatedDescription":"Open issue \"Incorrect formatting of lambda when indenting first line\" (#31416)"},{"Id":"385235320","IsPullRequest":true,"CreatedAt":"2018-11-28T13:30:07","Actor":"dotnet-bot","Number":"31415","RawContent":null,"Title":"Merge master to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/31415","RelatedDescription":"Closed or merged PR \"Merge master to master-vs-deps\" (#31415)"},{"Id":"385180893","IsPullRequest":false,"CreatedAt":"2018-11-28T09:42:34","Actor":"justinushermawan","Number":"31414","RawContent":null,"Title":".NET Core Roslyn cannot find System.Decimal in assemblies","State":"open","Body":"I'm using **Roslyn** to compile my class in runtime to `assembly` output. I've added my needed assemblies into metadata references as below:\r\n\r\n```\r\nstring p = Path.GetDirectoryName(typeof(object).Assembly.Location);\r\n_ref = new MetadataReference[] {\r\n     MetadataReference.CreateFromFile(Path.Combine(p, \"System.Collections.dll\")),\r\n     MetadataReference.CreateFromFile(Path.Combine(p, \"System.Runtime.dll\")),\r\n     MetadataReference.CreateFromFile(Path.Combine(p, \"System.Private.CoreLib.dll\")),\r\n     MetadataReference.CreateFromFile(typeof(object).Assembly.Location),          \r\n     MetadataReference.CreateFromFile(typeof(Schema).Assembly.Location)\r\n};\r\n```\r\nAnd my CSharp syntax tree:\r\n\r\n```\r\nusing System;\r\n\r\nnamespace _\r\n{\r\n    public sealed class Model : Record\r\n    {\r\n        public string name;\r\n        public decimal amount;\r\n        public bool granted;\r\n        public DateTime birthdate;\r\n    }\r\n}\r\n```\r\nAnd when I use my `dll` file in **another project**, I got an error when I create an instance of `Model`, the error is located on my `decimal` property which is `amount`. Omnisharp shows me:\r\n\r\n`The type 'Decimal' is defined in an assembly that is not referenced. You must add a reference to assembly 'System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e'.`\r\n\r\nAs far as I known, the `System.Private.CoreLib.dll` has been existed in `typeof(object).Assembly.Location`, so it doesn't make any sense if still giving me the error.\r\n\r\nWhat's wrong here??","Url":"https://github.com/dotnet/roslyn/issues/31414","RelatedDescription":"Open issue \".NET Core Roslyn cannot find System.Decimal in assemblies\" (#31414)"},{"Id":"385082628","IsPullRequest":true,"CreatedAt":"2018-11-28T03:14:15","Actor":"sharwell","Number":"31413","RawContent":null,"Title":"Remove unnecessary asynchronous Formatter operations","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/31413","RelatedDescription":"Open PR \"Remove unnecessary asynchronous Formatter operations\" (#31413)"},{"Id":"385074963","IsPullRequest":false,"CreatedAt":"2018-11-28T02:37:44","Actor":"tmat","Number":"31412","RawContent":null,"Title":"CodeStyle tests fail on Mono","State":"open","Body":"```\r\nSystem.TypeInitializationException : The type initializer for 'Microsoft.CodeAnalysis.Testing.MetadataReferences' threw an exception.\\n---- System.IO.FileNotFoundException : Could not load file or assembly 'Microsoft.VisualBasic, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies.\r\nStack trace\r\n  at (wrapper managed-to-native) System.Object.__icall_wrapper_mono_generic_class_init(intptr)\r\n  at Microsoft.CodeAnalysis.Testing.AnalyzerTest`1[TVerifier].CreateSolution (Microsoft.CodeAnalysis.ProjectId projectId, System.String language) [0x0008a] in <dd18822397554aca8b5e68ec5a8f6fe9>:0 \r\n  at Microsoft.CodeAnalysis.Testing.AnalyzerTest`1[TVerifier].CreateProjectImpl (System.ValueTuple`2[System.String,Microsoft.CodeAnalysis.Text.SourceText][] sources, System.ValueTuple`2[System.String,Microsoft.CodeAnalysis.Text.SourceText][] additionalFiles, Microsoft.CodeAnalysis.MetadataReference[] additionalMetadataReferences, System.String language) [0x0001b] in <dd18822397554aca8b5e68ec5a8f6fe9>:0 \r\n  at Microsoft.CodeAnalysis.Testing.AnalyzerTest`1[TVerifier].CreateProject (System.ValueTuple`2[System.String,Microsoft.CodeAnalysis.Text.SourceText][] sources, System.ValueTuple`2[System.String,Microsoft.CodeAnalysis.Text.SourceText][] additionalFiles, Microsoft.CodeAnalysis.MetadataReference[] additionalMetadataReferences, System.String language) [0x0000b] in <dd18822397554aca8b5e68ec5a8f6fe9>:0 \r\n  at Microsoft.CodeAnalysis.Testing.AnalyzerTest`1[TVerifier].GetSolution (System.ValueTuple`2[System.String,Microsoft.CodeAnalysis.Text.SourceText][] sources, System.ValueTuple`2[System.String,Microsoft.CodeAnalysis.Text.SourceText][] additionalFiles, Microsoft.CodeAnalysis.MetadataReference[] additionalMetadataReferences) [0x00025] in <dd18822397554aca8b5e68ec5a8f6fe9>:0 \r\n  at Microsoft.CodeAnalysis.Testing.AnalyzerTest`1[TVerifier].GetSortedDiagnosticsAsync (System.ValueTuple`2[System.String,Microsoft.CodeAnalysis.Text.SourceText][] sources, System.ValueTuple`2[System.String,Microsoft.CodeAnalysis.Text.SourceText][] additionalFiles, Microsoft.CodeAnalysis.MetadataReference[] additionalMetadataReferences, System.Collections.Immutable.ImmutableArray`1[T] analyzers, System.Threading.CancellationToken cancellationToken) [0x00001] in <dd18822397554aca8b5e68ec5a8f6fe9>:0 \r\n  at Microsoft.CodeAnalysis.Testing.AnalyzerTest`1[TVerifier].VerifyDiagnosticsAsync (System.ValueTuple`2[System.String,Microsoft.CodeAnalysis.Text.SourceText][] sources, System.ValueTuple`2[System.String,Microsoft.CodeAnalysis.Text.SourceText][] additionalFiles, Microsoft.CodeAnalysis.MetadataReference[] additionalMetadataReferences, Microsoft.CodeAnalysis.Testing.DiagnosticResult[] expected, System.Threading.CancellationToken cancellationToken) [0x0004f] in <dd18822397554aca8b5e68ec5a8f6fe9>:0 \r\n  at Microsoft.CodeAnalysis.Testing.CodeFixTest`1[TVerifier].RunAsync (System.Threading.CancellationToken cancellationToken) [0x002ca] in <bea6109ce718443bafa8672a3f0e818d>:0 \r\n  at Microsoft.CodeAnalysis.CodeStyle.FormattingAnalyzerTests.TestCaseCorrection () [0x0007c] in <99a0aee16a8940b390b7bf4f0389ae59>:0 \r\n```","Url":"https://github.com/dotnet/roslyn/issues/31412","RelatedDescription":"Open issue \"CodeStyle tests fail on Mono\" (#31412)"},{"Id":"385068148","IsPullRequest":true,"CreatedAt":"2018-11-28T02:06:23","Actor":"jasonmalinowski","Number":"31411","RawContent":null,"Title":"Properly import the IAsyncServiceProvider","State":"open","Body":"Just removing a TODO.","Url":"https://github.com/dotnet/roslyn/pull/31411","RelatedDescription":"Open PR \"Properly import the IAsyncServiceProvider\" (#31411)"},{"Id":"385067363","IsPullRequest":true,"CreatedAt":"2018-11-28T02:02:27","Actor":"JoeRobich","Number":"31410","RawContent":null,"Title":"Classify malformed XML Doc comments as XmlDocCommentText","State":"open","Body":"SkippedTokensTrivia was not being given a classification even though it fell within an XML Doc comment.\r\n\r\nResolves #31314","Url":"https://github.com/dotnet/roslyn/pull/31410","RelatedDescription":"Open PR \"Classify malformed XML Doc comments as XmlDocCommentText\" (#31410)"},{"Id":"385065733","IsPullRequest":true,"CreatedAt":"2018-11-28T01:54:53","Actor":"jasonmalinowski","Number":"31409","RawContent":null,"Title":"Fix up VisualStudioWorkspace.GetFileCodeModel","State":"open","Body":"fixes : [718880](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/718880)\r\n\r\nThe implementation was commented out and not restored prior to merging the project system refactoring.\r\n\r\nI attempted to write a unit test for this but it's icky: everything we have for Code Model tests is using a mock of VisualStudioWorkspace instead of the real one, and moving the code in question down to the base version runs into issues because the Code Model implementation lives in our special Implementation assembly. I could do it with a huge amount of churn, or by breaking encapsulation in a few ways that I like that we have it now. Given this was a silly mistake on my part, I'm not terribly worried about new regressions here.\r\n\r\nFixes https://devdiv.visualstudio.com/DevDiv/_workitems/edit/718880","Url":"https://github.com/dotnet/roslyn/pull/31409","RelatedDescription":"Open PR \"Fix up VisualStudioWorkspace.GetFileCodeModel\" (#31409)"},{"Id":"385040890","IsPullRequest":true,"CreatedAt":"2018-11-28T01:30:04","Actor":"dotnet-bot","Number":"31406","RawContent":null,"Title":"Merge master to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/31406","RelatedDescription":"Closed or merged PR \"Merge master to master-vs-deps\" (#31406)"},{"Id":"385041428","IsPullRequest":true,"CreatedAt":"2018-11-28T00:02:19","Actor":"jasonmalinowski","Number":"31408","RawContent":null,"Title":"Delete ImmutableHashMap","State":"open","Body":"This doesn't seem to be notably faster than just using the framework library; in a case where we're doing an excessive number of GetProject calls this only is saving us a few dozen milliseconds over all of loading Roslyn.sln.","Url":"https://github.com/dotnet/roslyn/pull/31408","RelatedDescription":"Open PR \"Delete ImmutableHashMap\" (#31408)"},{"Id":"385040627","IsPullRequest":true,"CreatedAt":"2018-11-27T23:59:23","Actor":"jasonmalinowski","Number":"31405","RawContent":null,"Title":"Switch calls to GetProjectState if we don't need the snapshot","State":"open","Body":"These methods are called any time we add a new project and we have a new output path; this was causing us to realize a Project object for every project in the solution, which was O(n^2) during solution load. This was adding a few hundred milliseconds of overhead in the immutable data structure, which in this particular case we don't need.\r\n\r\nFixes #31306.","Url":"https://github.com/dotnet/roslyn/pull/31405","RelatedDescription":"Open PR \"Switch calls to GetProjectState if we don't need the snapshot\" (#31405)"},{"Id":"385018394","IsPullRequest":true,"CreatedAt":"2018-11-27T23:52:22","Actor":"sharwell","Number":"31404","RawContent":null,"Title":"Remove the Code Style dependency on Hash.cs","State":"closed","Body":"* Fixes a build error from an indirect merge conflict between #31276 and #30777 \r\n* Reverts the changes to **Hash.cs** introduced in #31276 and unlinks it from the Code Style layer (see https://github.com/dotnet/roslyn/pull/31276#discussion_r236864512)","Url":"https://github.com/dotnet/roslyn/pull/31404","RelatedDescription":"Closed or merged PR \"Remove the Code Style dependency on Hash.cs\" (#31404)"}],"ResultType":"GitHubIssue"},"CoreRT-Issues":{"Issues":[{"Id":"385342053","IsPullRequest":true,"CreatedAt":"2018-11-28T19:09:55","Actor":"jkotas","Number":"6620","RawContent":null,"Title":"Fix warning on OSX","State":"closed","Body":"Fixes #6619","Url":"https://github.com/dotnet/corert/pull/6620","RelatedDescription":"Closed or merged PR \"Fix warning on OSX\" (#6620)"},{"Id":"385179785","IsPullRequest":false,"CreatedAt":"2018-11-28T19:09:55","Actor":"differentrain","Number":"6619","RawContent":null,"Title":"clang '-pthread' warning on OS-X when building native apps","State":"closed","Body":"bash:  `dotnet publish -r osx-x64 -c release`\r\n\r\n`clang : warning : argument unused during compilation: '-pthread' [-Wunused-command-line-argument] [/Users/yy/Desktop/BinCalc/NativeCalc.csproj]\r\n `\r\n\r\nIt seems that this warning had no effect on native app, but I still want to know how to resolve them.","Url":"https://github.com/dotnet/corert/issues/6619","RelatedDescription":"Closed issue \"clang '-pthread' warning on OS-X when building native apps\" (#6619)"},{"Id":"384583083","IsPullRequest":true,"CreatedAt":"2018-11-28T16:09:06","Actor":"stephentoub","Number":"6616","RawContent":null,"Title":"Remove TypedReference.MakeTypedReference readonly restriction","State":"closed","Body":"Port https://github.com/dotnet/coreclr/pull/21193 to corert\r\ncc: @jkotas","Url":"https://github.com/dotnet/corert/pull/6616","RelatedDescription":"Closed or merged PR \"Remove TypedReference.MakeTypedReference readonly restriction\" (#6616)"},{"Id":"384290807","IsPullRequest":true,"CreatedAt":"2018-11-28T12:08:55","Actor":"kvochko","Number":"6614","RawContent":null,"Title":"[armel] Fix 8-byte object alignment","State":"closed","Body":"Fix for #4698. `RequiresAlign8` previously always returned false on armel. Also, add `-DFEATURE_64BIT_ALIGNMENT` on arm and armel so that this code path may exist:\r\nhttps://github.com/dotnet/corert/blob/6b6cfd0a10ccf282144757555ae4a2116d289b0e/src/Native/Runtime/gcrhenv.cpp#L270\r\nFixes bus errors with backtraces like:\r\n```\r\n 0: RhpLockCmpXchg64 + 0xd (0x000cacac) [/tmp/Alloc_neg2] + 0xbacac\r\n 1: S_P_CoreLib_System_Threading_Interlocked__CompareExchange_0 + 0x2a (0x001bacf7) [/tmp/Alloc_neg2] + 0x1aacf7\r\n 2: S_P_CoreLib_System_Threading_Interlocked__Read + 0x32 (0x001bb0db) [/tmp/Alloc_neg2] + 0x1ab0db\r\n 3: S_P_CoreLib_System_IO_UnmanagedMemoryStream__get_Length + 0x28 (0x001d277d) [/tmp/Alloc_neg2] + 0x1c277d\r\n 4: S_P_CoreLib_System_Resources_ManifestBasedResourceGroveler__CreateResourceSet + 0x68 (0x0021cf6d) [/tmp/Alloc_neg2] + 0x20cf6d\r\n 5: S_P_CoreLib_System_Resources_ManifestBasedResourceGroveler__GrovelForResourceSet + 0x214 (0x0021cb41) [/tmp/Alloc_neg2] + 0x20cb41\r\n 6: S_P_CoreLib_System_Resources_ResourceManager__InternalGetResourceSet + 0x174 (0x0021e89d) [/tmp/Alloc_neg2] + 0x20e89d\r\n 7: S_P_CoreLib_System_Resources_ResourceManager__GetString_0 + 0x184 (0x0021f23d) [/tmp/Alloc_neg2] + 0x20f23d\r\n 8: S_P_CoreLib_System_SR__InternalGetResourceString + 0x162 (0x001b1bab) [/tmp/Alloc_neg2] + 0x1a1bab\r\n 9: S_P_CoreLib_System_SR__GetResourceString_0 + 0x4e (0x001b19e7) [/tmp/Alloc_neg2] + 0x1a19e7\r\n10: S_P_CoreLib_System_SR__get_Arg_ArgumentOutOfRangeException + 0x22 (0x001b1f2b) [/tmp/Alloc_neg2] + 0x1a1f2b\r\n11: S_P_CoreLib_System_ArgumentOutOfRangeException___ctor + 0x12 (0x0016fa9b) [/tmp/Alloc_neg2] + 0x15fa9b\r\n12: S_P_CoreLib_System_Runtime_InteropServices_GCHandle___ctor + 0x3e (0x00234c53) [/tmp/Alloc_neg2] + 0x224c53\r\n13: S_P_CoreLib_System_Runtime_InteropServices_GCHandle__Alloc_0 + 0x24 (0x00234d15) [/tmp/Alloc_neg2] + 0x224d15\r\n14: Alloc_neg2_Test__Main + 0xde (0x000e545f) [/tmp/Alloc_neg2] + 0xd545f\r\n15: Alloc_neg2__Module___MainMethodWrapper + 0xc (0x002d752d) [/tmp/Alloc_neg2] + 0x2c752d\r\n16: __managed__Main + 0x52 (0x002d7583) [/tmp/Alloc_neg2] + 0x2c7583\r\n17: main + 0x36 (0x000209fb) [/tmp/Alloc_neg2] + 0x109fb\r\n18: __libc_start_main + 0x114 (0xf72c163c) [/usr/lib/libc-2.24.so] + 0x1663c\r\n19: _start + 0x2c (0x000142b8) [/tmp/Alloc_neg2] + 0x42b8\r\n```\r\n CC @alpencolt @iarischenko ","Url":"https://github.com/dotnet/corert/pull/6614","RelatedDescription":"Closed or merged PR \"[armel] Fix 8-byte object alignment\" (#6614)"},{"Id":"384897283","IsPullRequest":false,"CreatedAt":"2018-11-27T17:07:31","Actor":"yowl","Number":"6618","RawContent":null,"Title":"wasm: should it be able to compile with --nativelib ?","State":"open","Body":"Should ilc be able to compile a wasm library for later linking?   I tried with `--nativelib` and you get\r\n```\r\nUnhandled Exception: System.Exception: Main not found\r\n   at ILCompiler.DependencyAnalysis.WebAssemblyObjectWriter.EmitNativeMain() in D:\\GitHub\\corert\\corert\\src\\ILCompiler.WebAssembly\\src\\CodeGen\\WebAssemblyObjectWriter.cs:line 280\r\n   at ILCompiler.DependencyAnalysis.WebAssemblyObjectWriter.FinishObjWriter() in D:\\GitHub\\corert\\corert\\src\\ILCompiler.WebAssembly\\src\\CodeGen\\WebAssemblyObjectWriter.cs:line 184\r\n   at ILCompiler.DependencyAnalysis.WebAssemblyObjectWriter.Dispose(Boolean bDisposing) in D:\\GitHub\\corert\\corert\\src\\ILCompiler.WebAssembly\\src\\CodeGen\\WebAssemblyObjectWriter.cs:line 685\r\n   at ILCompiler.DependencyAnalysis.WebAssemblyObjectWriter.Dispose() in D:\\GitHub\\corert\\corert\\src\\ILCompiler.WebAssembly\\src\\CodeGen\\WebAssemblyObjectWriter.cs:line 680\r\n   at ILCompiler.DependencyAnalysis.WebAssemblyObjectWriter.EmitObject(String objectFilePath, IEnumerable`1 nodes, NodeFactory factory, WebAssemblyCodegenCompilation compilation, IObjectDumper dumper) in D:\\GitHub\\corert\\corert\\src\\ILCompiler.WebAssembly\\src\\CodeGen\\WebAssemblyObjectWriter.cs:line 903\r\n   at ILCompiler.WebAssemblyCodegenCompilation.CompileInternal(String outputFile, ObjectDumper dumper) in D:\\GitHub\\corert\\corert\\src\\ILCompiler.WebAssembly\\src\\Compiler\\WebAssemblyCodegenCompilation.cs:line 54\r\n   at ILCompiler.Compilation.ILCompiler.ICompilation.Compile(String outputFile, ObjectDumper dumper) in D:\\GitHub\\corert\\corert\\src\\ILCompiler.Compiler\\src\\Compiler\\Compilation.cs:line 353\r\n   at ILCompiler.Program.Run(String[] args) in D:\\GitHub\\corert\\corert\\src\\ILCompiler\\src\\Program.cs:line 572\r\n   at ILCompiler.Program.Main(String[] args) in D:\\GitHub\\corert\\corert\\src\\ILCompiler\\src\\Program.cs:line 728\r\n```","Url":"https://github.com/dotnet/corert/issues/6618","RelatedDescription":"Open issue \"wasm: should it be able to compile with --nativelib ?\" (#6618)"},{"Id":"384775448","IsPullRequest":true,"CreatedAt":"2018-11-27T12:37:42","Actor":"trylek","Number":"6617","RawContent":null,"Title":"Fixes for building CoreRT under VS 2019","State":"open","Body":"1) Several places were hardcoding VS150COMNTOOLS; I changed these\r\nto use _VSCOMNTOOLS.\r\n\r\n2) The previously used BuildTools drop is too old and its version\r\nof the ReferenceAssemblies.targets script doesn't have proper\r\nhandling for the new 'Current' MSBuild version ID. I have fixed this\r\nby updating BuildToolsVersion.txt.\r\n\r\n3) Based on Viktor Hofer's offline advice I managed to figure out\r\nhow to formulate the change so that it no longer requires an update\r\nto BuildTools. I have basically set the property\r\nBuildingNETCoreAppVertical to true and I subsequently leveraged\r\ntwo more properties to fix various issues.\r\n\r\nThanks\r\n\r\nTomas\r\n\r\nP.S. With these changes, the \"build\" CoreRT command passes cleanly i.e. it succeeds building and running all tests. I have managed to make a bit of progress on running CoreCLR tests in CPAOT mode but that is not fully functional yet.","Url":"https://github.com/dotnet/corert/pull/6617","RelatedDescription":"Open PR \"Fixes for building CoreRT under VS 2019\" (#6617)"},{"Id":"382007184","IsPullRequest":true,"CreatedAt":"2018-11-27T02:10:55","Actor":"yowl","Number":"6592","RawContent":null,"Title":"wasm: Fix callback to NativeCallable methods","State":"closed","Body":"Fixes #6580. Previously when making the callback to a NativeCallable function, the wrong PInvoke method was used as described in #6580 .  This change fixes that, and also fixes a problem where the thread state was not being changed from Cooperative->Preemptive->Cooperative on managed->unmanaged->managed Pinvokes.  When calling back from unmanaged to the NativeCallable an asssert is made on the thread being in Preemptive mode, but the change from Cooperative->Preemptive was missing and hence the assert failed.  @morganbr I'm marking this as WIP because I needed to add some C++ function to get a simple test that exercised the callback, so I have this in a cpp file https://github.com/dotnet/corert/compare/master...yowl:callbackfromnative?expand=1#diff-380d7928db22ba701b6239aaf0c6d09c, but I'm not sure how to go about changing the build to get this included.  Do I just make the changes in https://github.com/dotnet/corert/blob/master/src/BuildIntegration/Microsoft.NETCore.Native.targets so that I can `emcc` the bitcode for the cpp and add it to the linker command?\r\n\r\n","Url":"https://github.com/dotnet/corert/pull/6592","RelatedDescription":"Closed or merged PR \"wasm: Fix callback to NativeCallable methods\" (#6592)"},{"Id":"384103149","IsPullRequest":true,"CreatedAt":"2018-11-26T17:59:09","Actor":"jkotas","Number":"6613","RawContent":null,"Title":"React to .NET Core 3.0 SDK changes","State":"closed","Body":"Fixes #6612","Url":"https://github.com/dotnet/corert/pull/6613","RelatedDescription":"Closed or merged PR \"React to .NET Core 3.0 SDK changes\" (#6613)"},{"Id":"384082170","IsPullRequest":false,"CreatedAt":"2018-11-26T17:59:09","Actor":"Fabi","Number":"6612","RawContent":null,"Title":"FileLoadErrorGeneric: Newtonsoft.Json","State":"closed","Body":"Hey, today I faced some issues when compiling some of my tools.\r\n\r\nIt get the following error message: `EXEC : error : [TEMPORARY EXCEPTION MESSAGE] FileLoadErrorGeneric: Newtonsoft.Json`\r\n\r\nCommand line used: `dotnet publish -r win-x64 /p:Configuration=Release /p:platform=\"x64\"`\r\nILCompiler pkg: 1.0.0-alpha-27124-01\r\n\r\nSample source: \r\n\r\n```\r\nusing System;\r\n\r\nnamespace jsontest\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var test = Newtonsoft.Json.JsonConvert.SerializeObject(new int[5]);\r\n\r\n            Console.WriteLine(test);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\ncsproj file:\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp3.0</TargetFramework>\r\n\t<Platforms>x64</Platforms>\r\n    <PlatformTarget>x64</PlatformTarget>\r\n    <RuntimeIdentifier>win10-x64</RuntimeIdentifier>\r\n  </PropertyGroup>\r\n  \r\n  <ItemGroup>\r\n    <RdXmlFile Include=\"rd.xml\" />\r\n  </ItemGroup>\r\n  \r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.DotNet.ILCompiler\" Version=\"1.0.0-alpha-*\" />\r\n    <PackageReference Include=\"Newtonsoft.Json\" Version=\"12.0.1-beta2\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nrd.xml:\r\n```\r\n<Directives>\r\n  <Application>\r\n    <Assembly Name=\"Newtonsoft.Json\" >\r\n      <Type Name=\"Newtonsoft.Json.Serialization.ObjectConstructor`1[[System.Object,System.Private.CoreLib]]\" Dynamic=\"Required All\" />\r\n    </Assembly>\r\n\r\n  </Application>\r\n</Directives>\r\n```\r\n\r\n.NET Core info:\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview-009782\r\n Commit:    d07ba39934\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview-009782\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview-27122-01\r\n  Commit:  00c5c8bc40\r\n\r\n.NET Core SDKs installed:\r\n  3.0.100-preview-009782 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.App 3.0.0-alpha1-10772 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27122-01 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-alpha-27122-4 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n```\r\n","Url":"https://github.com/dotnet/corert/issues/6612","RelatedDescription":"Closed issue \"FileLoadErrorGeneric: Newtonsoft.Json\" (#6612)"},{"Id":"384347890","IsPullRequest":true,"CreatedAt":"2018-11-26T14:11:26","Actor":"MichalStrehovsky","Number":"6615","RawContent":null,"Title":"Merge master to nmirror","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/6615","RelatedDescription":"Closed or merged PR \"Merge master to nmirror\" (#6615)"},{"Id":"383920585","IsPullRequest":true,"CreatedAt":"2018-11-24T19:53:34","Actor":"jkotas","Number":"6610","RawContent":null,"Title":"Delete CORECLR ifdef","State":"closed","Body":"This ifdef should not be needed anymore.","Url":"https://github.com/dotnet/corert/pull/6610","RelatedDescription":"Closed or merged PR \"Delete CORECLR ifdef\" (#6610)"},{"Id":"384001321","IsPullRequest":true,"CreatedAt":"2018-11-24T16:11:51","Actor":"tonerdo","Number":"6611","RawContent":null,"Title":"[Interpreter] Locals and operators","State":"open","Body":"The PR extends the interpreter to support locals and some operator opcodes:\r\n\r\n### Locals\r\n\r\n* stloc.*\r\n* ldloc.*\r\n\r\n### Unary operators\r\n\r\n* not\r\n* neg\r\n* pop\r\n* dup\r\n\r\n### Comparison operators\r\n\r\n* ceq\r\n* cgt.*\r\n* clt.*\r\n\r\n### Conversion operators\r\n\r\n* conv.*\r\n* conv.ovf.*\r\n\r\n### Bitwise Shift operators\r\n\r\n* shl\r\n* shr*\r\n\r\nThe CoreCLR interpreter (https://github.com/dotnet/coreclr/blob/master/src/vm/interpreter.cpp) was used as a development reference. However, I'm still not very confident about my implementation of the conversion and bitwise shift operators especially around things relating to type casting and general code structure.\r\n\r\ncc @jkotas @MichalStrehovsky @morganbr \r\n","Url":"https://github.com/dotnet/corert/pull/6611","RelatedDescription":"Open PR \"[Interpreter] Locals and operators\" (#6611)"},{"Id":"383835964","IsPullRequest":true,"CreatedAt":"2018-11-23T18:02:56","Actor":"MichalStrehovsky","Number":"6609","RawContent":null,"Title":"Implement new math helpers","State":"closed","Body":"Fixes #6577.","Url":"https://github.com/dotnet/corert/pull/6609","RelatedDescription":"Closed or merged PR \"Implement new math helpers\" (#6609)"},{"Id":"383751690","IsPullRequest":true,"CreatedAt":"2018-11-23T13:10:31","Actor":"trylek","Number":"6607","RawContent":null,"Title":"Add two xunit packages to runtime.depproj to unblock about 90 tests","State":"closed","Body":"This change adds the packages \"xunit.core\" and \"xunit.performance.core\"\r\nrequired by some CoreCLR tests to external test dependencies. I have\r\ncopied the clauses from external.depproj in CoreCLR and their versions\r\nfrom dependency.props. This change reduces the number of failures from\r\n346 to 254.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/6607","RelatedDescription":"Closed or merged PR \"Add two xunit packages to runtime.depproj to unblock about 90 tests\" (#6607)"},{"Id":"383745358","IsPullRequest":true,"CreatedAt":"2018-11-23T10:53:29","Actor":"MichalStrehovsky","Number":"6606","RawContent":null,"Title":"Update RyuJIT","State":"closed","Body":"Picks up dotnet/coreclr#21163. Fixes #6601.","Url":"https://github.com/dotnet/corert/pull/6606","RelatedDescription":"Closed or merged PR \"Update RyuJIT\" (#6606)"},{"Id":"383200910","IsPullRequest":false,"CreatedAt":"2018-11-23T10:53:29","Actor":"MichalStrehovsky","Number":"6601","RawContent":null,"Title":"Report CORINFO_FIELD_INTRINSIC_EMPTY_STRING to RyuJIT","State":"closed","Body":"We are not reporting `CORINFO_FIELD_INTRINSIC_EMPTY_STRING` to RyuJIT because it's hitting what appears to be a RyuJIT bug in late devirtualization (see assert in the jitdump). Likely because our string literals are different than string literals RyuJIT normally sees in CoreCLR.\r\n\r\nTo repro, uncomment the line in CorInfoImpl.cs that references this issue and build a multimodule release System.Private.CoreLib.\r\n\r\n[jitdump.txt](https://github.com/dotnet/corert/files/2604999/jitdump.txt)\r\n","Url":"https://github.com/dotnet/corert/issues/6601","RelatedDescription":"Closed issue \"Report CORINFO_FIELD_INTRINSIC_EMPTY_STRING to RyuJIT\" (#6601)"},{"Id":"383779352","IsPullRequest":true,"CreatedAt":"2018-11-23T10:53:16","Actor":"MichalStrehovsky","Number":"6608","RawContent":null,"Title":"Merge master to nmirror","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/6608","RelatedDescription":"Closed or merged PR \"Merge master to nmirror\" (#6608)"},{"Id":"383648779","IsPullRequest":true,"CreatedAt":"2018-11-22T22:23:09","Actor":"github-john-doe","Number":"6605","RawContent":null,"Title":"Typos","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/6605","RelatedDescription":"Closed or merged PR \"Typos\" (#6605)"},{"Id":"383602483","IsPullRequest":true,"CreatedAt":"2018-11-22T17:35:42","Actor":"MichalStrehovsky","Number":"6604","RawContent":null,"Title":"Implement getCastingHelper and compareTypesForCast","State":"closed","Body":"This lets RyuJIT do more casting optimizations in both ReadyToRun and full AOT modes.","Url":"https://github.com/dotnet/corert/pull/6604","RelatedDescription":"Closed or merged PR \"Implement getCastingHelper and compareTypesForCast\" (#6604)"},{"Id":"383203026","IsPullRequest":true,"CreatedAt":"2018-11-22T16:01:18","Actor":"MichalStrehovsky","Number":"6602","RawContent":null,"Title":"Properly report intrinsic fields","State":"closed","Body":"We were hitting an assert in RyuJIT because we were reporting IntPtr.Zero as an intrinsic even if we were not trying to `CORINFO_ACCESS_GET`.\r\n\r\nI fixed that part and also went ahead to port the rest of getFieldIntrinsic from CoreCLR. We'll need this anyway.","Url":"https://github.com/dotnet/corert/pull/6602","RelatedDescription":"Closed or merged PR \"Properly report intrinsic fields\" (#6602)"},{"Id":"383283720","IsPullRequest":true,"CreatedAt":"2018-11-21T22:13:08","Actor":"nattress","Number":"6603","RawContent":null,"Title":"Use netcore3.0 CoreCLR for R2R testing","State":"closed","Body":"Replace use of 2.1 runtime with a recent version from master targetting netcoreapp3.0. This version now includes System.Runtime.Intrinsics, which was previously named System.Runtime.Intrinsics.Experimental (and lived in a separate Nuget package) meaning the test drop we used couldn't bind against it.\r\n\r\nruntest.cmd /coreclr all /mode readytorun fail rate improved from 489 -> 346 (2001/2347 or 85% pass rate).","Url":"https://github.com/dotnet/corert/pull/6603","RelatedDescription":"Closed or merged PR \"Use netcore3.0 CoreCLR for R2R testing\" (#6603)"},{"Id":"383200850","IsPullRequest":true,"CreatedAt":"2018-11-21T17:32:29","Actor":"MichalStrehovsky","Number":"6600","RawContent":null,"Title":"Prevent generating bad SafeHandle marshalling","State":"closed","Body":"These marshalers are not implemented yet.\r\n\r\nFixes #6556.","Url":"https://github.com/dotnet/corert/pull/6600","RelatedDescription":"Closed or merged PR \"Prevent generating bad SafeHandle marshalling\" (#6600)"},{"Id":"383182545","IsPullRequest":true,"CreatedAt":"2018-11-21T16:49:33","Actor":"jkotas","Number":"6599","RawContent":null,"Title":"Make ThreadPool.UnsafeQueueUserWorkItem<TState> public","State":"closed","Body":"Port https://github.com/dotnet/coreclr/pull/21125 to CoreRT","Url":"https://github.com/dotnet/corert/pull/6599","RelatedDescription":"Closed or merged PR \"Make ThreadPool.UnsafeQueueUserWorkItem<TState> public\" (#6599)"},{"Id":"382742185","IsPullRequest":false,"CreatedAt":"2018-11-21T15:07:27","Actor":"yowl","Number":"6596","RawContent":null,"Title":"wasm: question - how to specify additional flags for em++ and emcc ","State":"closed","Body":"I'm experimenting with adding threading support to the wasm build.  For that to work, the cpp, and any other library needs to be built with `-s USE_PTHREADS=1`.  In particular I would like to build \r\n```\r\nlibPortableRuntime.bc \r\nlibbootstrappercpp.bc\r\nlibSystem.Private.CoreLib.Native.bc\r\n```\r\nwith this option.  I think this could be part of my current problem as when I look at the LLVM, I only see `thread_local` on `@t_pShadowStackTop = internal thread_local global i8* null` whereas I would hope to see it also on at least `tls_CurrentThread` in `threadstore.cpp`.  I tried setting `set EMMAKEN_CFLAGS=-s USE_PTHREADS=1` and `build clean` but that didn't seem to help although I'm having a hard time finding the actual command that is used in the build output.  Can someone help me understand the build system a bit more so that I know where I would have to add this flag for it to be picked up by the `em++` and `emcc` commands?\r\n\r\nThanks","Url":"https://github.com/dotnet/corert/issues/6596","RelatedDescription":"Closed issue \"wasm: question - how to specify additional flags for em++ and emcc \" (#6596)"},{"Id":"383058002","IsPullRequest":false,"CreatedAt":"2018-11-21T10:47:31","Actor":"charlesroddie","Number":"6598","RawContent":null,"Title":"UWP 6.2.2 System.Runtime.CompilerServices.Unsafe duplicate file error","State":"closed","Body":"APPX1101: Payload contains two or more files with the same destination path 'System.Runtime.CompilerServices.Unsafe.dll'\r\n\r\nWhen using .Net Native 6.2.2 to compile UWP projects using libraries with unsafe code, e.g. Microsoft.EntityFrameworkCore.Sqlite, System.Reactive 4.1.2, and others.\r\n\r\nReposted from https://github.com/Microsoft/dotnet/issues/925 .","Url":"https://github.com/dotnet/corert/issues/6598","RelatedDescription":"Closed issue \"UWP 6.2.2 System.Runtime.CompilerServices.Unsafe duplicate file error\" (#6598)"},{"Id":"382827915","IsPullRequest":true,"CreatedAt":"2018-11-20T20:05:28","Actor":"trylek","Number":"6597","RawContent":null,"Title":"WIP: incomplete fixes for LDVIRTFTN and other framework build issues","State":"open","Body":"This change includes several experimental hotfixes I made to fix\r\nLDVIRTFTN and other issues is CPAOT framework compilation:\r\n\r\n1) The infra change to Microsoft.NetCore.Native.targets to ignore\r\nCSC exit code is required to receive meaningful results for the ASP.NET\r\ntest build, otherwise the build stops as soon as we hit the first error\r\nin ILC assembly builds.\r\n\r\n2) I tried to reverse engineer Crossgen behavior with JanV's help\r\nand use the info to properly implement LDVIRTFTN but apparently the\r\nchanges are still not completely correct, about 15 framework assemblies\r\nare failing an assert in JIT that we're passing CORINFO_VIRTUALCALL_STUB\r\nto some method that only expects CORINFO_CALL or CORINFO_CALL_CODE_POINTER.\r\n\r\n3) I added a throw clause to abort JIT compilation of methods that\r\npreviously ended up crashing due to the Enum thunks.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/6597","RelatedDescription":"Open PR \"WIP: incomplete fixes for LDVIRTFTN and other framework build issues\" (#6597)"},{"Id":"382293556","IsPullRequest":true,"CreatedAt":"2018-11-19T20:47:43","Actor":"MichalStrehovsky","Number":"6595","RawContent":null,"Title":"Optimize when building retail shared framework","State":"closed","Body":"Fixes the CI failure in my weekend project (#6557).","Url":"https://github.com/dotnet/corert/pull/6595","RelatedDescription":"Closed or merged PR \"Optimize when building retail shared framework\" (#6595)"},{"Id":"382121039","IsPullRequest":true,"CreatedAt":"2018-11-19T17:04:21","Actor":"kbaladurin","Number":"6593","RawContent":null,"Title":"[CppCodeGen] Support thread statics","State":"closed","Body":"This patch fixes https://github.com/dotnet/corert/issues/6406","Url":"https://github.com/dotnet/corert/pull/6593","RelatedDescription":"Closed or merged PR \"[CppCodeGen] Support thread statics\" (#6593)"},{"Id":"382154544","IsPullRequest":true,"CreatedAt":"2018-11-19T13:03:13","Actor":"kbaladurin","Number":"6594","RawContent":null,"Title":"[CppCodeGen] Add support for Activator.DefaultConstructorOf<T> intrinsic","State":"closed","Body":"This patch fixes https://github.com/dotnet/corert/issues/6403\r\n\r\nFollowing examples works fine with this changes:\r\n```cs\r\nusing System;\r\n\r\nnamespace Hello\r\n{\r\n    internal class Program\r\n    {\r\n        public class A\r\n        {\r\n           public static void M<T>() where T : new()\r\n           {\r\n               System.Console.WriteLine(\"Instance \" + new T());\r\n           }\r\n        }\r\n\r\n        public class B\r\n        {\r\n            public B()\r\n            {\r\n                System.Console.WriteLine(\"B ctor\");\r\n            }\r\n        }\r\n\r\n        public struct C\r\n        {\r\n\r\n        }\r\n\r\n        private static void Main(string[] args)\r\n        {\r\n            A.M<B>();\r\n            A.M<C>();\r\n        }\r\n    }\r\n}\r\n```\r\n```\r\n$ Hello\r\nB ctor\r\nInstance Hello.Program+B\r\nInstance Hello.Program+C\r\n```\r\n","Url":"https://github.com/dotnet/corert/pull/6594","RelatedDescription":"Closed or merged PR \"[CppCodeGen] Add support for Activator.DefaultConstructorOf<T> intrinsic\" (#6594)"},{"Id":"381997712","IsPullRequest":true,"CreatedAt":"2018-11-18T21:54:56","Actor":"MichalStrehovsky","Number":"6591","RawContent":null,"Title":"Fixes to allow non-.NET base class libraries","State":"closed","Body":"A couple fixes so that we can compile base class libraries that don't look like regular .NET base class libraries. This is for a weekend project, but general purpose enough.","Url":"https://github.com/dotnet/corert/pull/6591","RelatedDescription":"Closed or merged PR \"Fixes to allow non-.NET base class libraries\" (#6591)"}],"ResultType":"GitHubIssue"},"SDK-Issues":{"Issues":[{"Id":"384320582","IsPullRequest":true,"CreatedAt":"2018-11-29T02:10:47","Actor":"dotnet-maestro[bot]","Number":"2692","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18575.1\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18576.5\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18577.9\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2692","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#2692)"},{"Id":"383675536","IsPullRequest":true,"CreatedAt":"2018-11-29T02:06:04","Actor":"github-john-doe","Number":"2691","RawContent":null,"Title":"Identifer -> Identifier","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/2691","RelatedDescription":"Closed or merged PR \"Identifer -> Identifier\" (#2691)"},{"Id":"385509484","IsPullRequest":true,"CreatedAt":"2018-11-29T00:01:12","Actor":"dotnet-bot","Number":"2704","RawContent":null,"Title":"Merge release/2.1.4xx to release/2.1.5xx","State":"open","Body":"\nThis is an automatically generated pull request from release/2.1.4xx into release/2.1.5xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.4xx-to-release/2.1.5xx\ngit reset --hard upstream/release/2.1.5xx\ngit merge upstream/release/2.1.4xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1.4xx-to-release/2.1.5xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2704","RelatedDescription":"Open PR \"Merge release/2.1.4xx to release/2.1.5xx\" (#2704)"},{"Id":"385500715","IsPullRequest":false,"CreatedAt":"2018-11-28T23:24:22","Actor":"twsouthwick","Number":"2703","RawContent":null,"Title":"PresentationFramework.Aero not included by default when compiling against .NET Framework","State":"open","Body":"I'm porting an app that relies on `PresentationFramework.Aero` for `ButtonChrome` and found I need to include the following in the csproj to get it to compile when building for .NET Framework 4.7.1:\r\n\r\n```xml\r\n  <ItemGroup Condition=\" '$(TargetFramework)' == 'net471'\">\r\n    <Reference Include=\"PresentationFramework.Aero\" />\r\n  </ItemGroup\r\n```\r\n\r\nIs there a reason this isn't automatically included when setting `<UseWindowsForms>true</UseWindowsForms>`?","Url":"https://github.com/dotnet/sdk/issues/2703","RelatedDescription":"Open issue \"PresentationFramework.Aero not included by default when compiling against .NET Framework\" (#2703)"},{"Id":"385392299","IsPullRequest":true,"CreatedAt":"2018-11-28T21:54:59","Actor":"johnbeisner","Number":"2702","RawContent":null,"Title":"Backport performance test fixes from SDK master","State":"closed","Body":"Reference: https://github.com/dotnet/sdk/pull/2696\r\nAddressing the 103 exitcode [inability to find the Python exe] on official performance machines.\r\n\r\n@DrewScoggins","Url":"https://github.com/dotnet/sdk/pull/2702","RelatedDescription":"Closed or merged PR \"Backport performance test fixes from SDK master\" (#2702)"},{"Id":"385058288","IsPullRequest":true,"CreatedAt":"2018-11-28T20:52:38","Actor":"peterhuene","Number":"2700","RawContent":null,"Title":"Skip resource updating on Nano Server.","State":"closed","Body":"This commit fixes the resource updater usage to be skipped when building on\r\nNano Server.\r\n\r\nFor Windows Server Nano 2016, this fixes an `EntryPointNotFoundException` because\r\n`BeginUpdateResource` cannot be found in kernel32.\r\n\r\nFor 1709+ of Windows Server Nano, this fixes an `HResultException` with code\r\n`80070000`, because the export resolves but seemingly is not implemented.\r\n\r\nFixes #2652.","Url":"https://github.com/dotnet/sdk/pull/2700","RelatedDescription":"Closed or merged PR \"Skip resource updating on Nano Server.\" (#2700)"},{"Id":"385093777","IsPullRequest":true,"CreatedAt":"2018-11-28T20:50:02","Actor":"peterhuene","Number":"2701","RawContent":null,"Title":"Rename `_HandlePackageFileConflictsForBuild` back to `_HandlePackageFileConflicts`","State":"closed","Body":"This commit renames the `_HandlePackageFileConflictsForBuild` target back to\r\nthe original name of `_HandlePackageFileConflicts`.\r\n\r\nThis prevents a failure to find the target when using a previously shipping\r\n`Microsoft.NET.Build.Extensions.NETFramework.targets` with a 3.0 .NET Core SDK.\r\n\r\nFixes #2695.","Url":"https://github.com/dotnet/sdk/pull/2701","RelatedDescription":"Closed or merged PR \"Rename `_HandlePackageFileConflictsForBuild` back to `_HandlePackageFileConflicts`\" (#2701)"},{"Id":"384996290","IsPullRequest":false,"CreatedAt":"2018-11-28T20:50:02","Actor":"dsplaisted","Number":"2695","RawContent":null,"Title":"ImplicitlyExpandNETStandardFacades does not run when using full framework MSBuild and 3.0 .NET Core SDK","State":"closed","Body":"As part of unifying publish and build (https://github.com/dotnet/sdk/commit/1936ebd7307cebd6c5d1d8d699b9844f73b8fb2c#diff-037688beff60348f7a74e33446cb6131), we split _HandlePackageFileConflicts into two targets: _HandlePackageFileConflictsForBuild and _HandlePackageFileConflictsForPublish.\r\n\r\nThis required updating the `BeforeTargets` declaration of the ImplicitlyExpandNETStandardFacades target in Microsoft.NET.Build.Extensions.NETFramework.targets.\r\n\r\nUnfortunately, that targets file ships separately for the .NET Core SDK and full Framework MSBuild.  So if you have a 3.0 SDK but are building with full-framework MSBuild, you will get the old copy of Microsoft.NET.Build.Extensions.NETFramework.targets, which expects there to be a _HandlePackageFileConflicts target instead of _HandlePackageFileConflictsForBuild.\r\n\r\nProbably the way to fix this is to rename _HandlePackageFileConflictsForBuild to _HandlePackageFileConflicts, and _HandlePackageFileConflictsForPublish can still be a separate target (at least for now).\r\n\r\n@peterhuene, thoughts?","Url":"https://github.com/dotnet/sdk/issues/2695","RelatedDescription":"Closed issue \"ImplicitlyExpandNETStandardFacades does not run when using full framework MSBuild and 3.0 .NET Core SDK\" (#2695)"},{"Id":"385031778","IsPullRequest":true,"CreatedAt":"2018-11-28T05:31:44","Actor":"johnbeisner","Number":"2696","RawContent":null,"Title":"Fixing official SDK performance runs","State":"closed","Body":"Addressing the 103 exitcode [inability to find the Python exe] on official performance machines.\r\n\r\nAll Windows official SDK performance runs have been failing since Nov 19/20, 2018\r\nFailure is in the upload step:\r\nhttps://ci2.dot.net/job/dotnet_sdk/job/perf/job/master/job/SDK_Perf_Windows_NT_x64/119/\r\n```\r\nC:\\J\\w\\SDK_Perf_Wind---192517a8>py \"C:\\J\\w\\SDK_Perf_Wind---192517a8\\artifacts\\TestResults\\Release\\Performance\\Microsoft.BenchView.JSONFormat\\tools\\upload.py\" \"C:\\J\\w\\SDK_Perf_Wind---192517a8\\artifacts\\TestResults\\Release\\Performance\\submission.json\" --container coreclr \r\n\r\nC:\\J\\w\\SDK_Perf_Wind---192517a8>exit /b 103 \r\n```\r\n\r\n@DrewScoggins\r\n","Url":"https://github.com/dotnet/sdk/pull/2696","RelatedDescription":"Closed or merged PR \"Fixing official SDK performance runs\" (#2696)"},{"Id":"385041161","IsPullRequest":true,"CreatedAt":"2018-11-28T01:30:13","Actor":"dotnet-bot","Number":"2699","RawContent":null,"Title":"Merge release/2.2.2xx to master","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.2.2xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.2xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/2.2.2xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.2.2xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2699","RelatedDescription":"Closed or merged PR \"Merge release/2.2.2xx to master\" (#2699)"},{"Id":"385036667","IsPullRequest":false,"CreatedAt":"2018-11-27T23:43:17","Actor":"wli3","Number":"2698","RawContent":null,"Title":"Package Shim only look at \"Version\" not \"PackageVersion\"","State":"open","Body":"If this 2 properties are different. Shim will have the wrong path.","Url":"https://github.com/dotnet/sdk/issues/2698","RelatedDescription":"Open issue \"Package Shim only look at \"Version\" not \"PackageVersion\"\" (#2698)"},{"Id":"385035450","IsPullRequest":false,"CreatedAt":"2018-11-27T23:38:14","Actor":"nguerrera","Number":"2697","RawContent":null,"Title":"Automatic Link generation from LinkBase does not work for Page, Resource items","State":"open","Body":"(Filing bugs from my notes after customer visit exploring porting large WPF app to .NET core 3)\r\n\r\nThis:\r\n``` xml\r\n<ItemGroup>\r\n  <Page Include=\"..\\X\\**\\*.xaml\"  LinkBase=\"Y\" />\r\n</ItemGroup>\r\n```\r\n\r\nDoes not work as it does for Compile, EmbeddedResource, AdditionalFiles, EmbeddedResource:\r\n\r\nhttps://github.com/dotnet/sdk/blob/9543229b2d30f4c712846540e725014754229919/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.Sdk.DefaultItems.targets#L201-L246\r\n\r\nThis has two consequences:\r\n\r\n1. It prevents the easy way of getting these files outside project cone to show in sln explorer\r\n2. Xaml interpretation can actually change based on the Link so the impact of not generating a Link as expected can change the application behavior. I forget the details here, but I observed this in customer app.\r\n\r\nI'm unsure if the WindowsDesktop SDK should be handling it or if we should add to above. We probably need to do this for Resource items as well.\r\n\r\ncc @dsplaisted @vatsan-madhavan\r\n\r\n","Url":"https://github.com/dotnet/sdk/issues/2697","RelatedDescription":"Open issue \"Automatic Link generation from LinkBase does not work for Page, Resource items\" (#2697)"},{"Id":"383226249","IsPullRequest":true,"CreatedAt":"2018-11-27T18:54:02","Actor":"johnbeisner","Number":"2686","RawContent":null,"Title":"Enable BuildMVCApp performance test","State":"closed","Body":"Enable 'BuildMVCApp' performance test\r\nRev stage0 to: '3.0.100-preview-009790'\r\nRename: \"Microsoft.NET.Sdk.Wpf\" to: \"Microsoft.NET.Sdk.WindowsDesktop\"\r\nDisable x86 performance tests\r\n\r\nAddresses: https://github.com/dotnet/sdk/issues/2668","Url":"https://github.com/dotnet/sdk/pull/2686","RelatedDescription":"Closed or merged PR \"Enable BuildMVCApp performance test\" (#2686)"},{"Id":"384521607","IsPullRequest":true,"CreatedAt":"2018-11-27T18:20:31","Actor":"dotnet-bot","Number":"2693","RawContent":null,"Title":"Merge release/2.2.1xx to release/2.2.2xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.2.1xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.1xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.2.1xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.2.1xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2693","RelatedDescription":"Closed or merged PR \"Merge release/2.2.1xx to release/2.2.2xx\" (#2693)"},{"Id":"384521621","IsPullRequest":true,"CreatedAt":"2018-11-26T23:00:08","Actor":"dotnet-bot","Number":"2694","RawContent":null,"Title":"Merge release/2.2.2xx to master","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.2.2xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.2xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/2.2.2xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.2.2xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2694","RelatedDescription":"Closed or merged PR \"Merge release/2.2.2xx to master\" (#2694)"},{"Id":"383332870","IsPullRequest":true,"CreatedAt":"2018-11-26T16:19:15","Actor":"dotnet-bot","Number":"2688","RawContent":null,"Title":"Merge release/2.2.1xx to release/2.2.2xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.2.1xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.1xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.2.1xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.2.1xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2688","RelatedDescription":"Closed or merged PR \"Merge release/2.2.1xx to release/2.2.2xx\" (#2688)"},{"Id":"383332858","IsPullRequest":true,"CreatedAt":"2018-11-26T16:19:03","Actor":"dotnet-bot","Number":"2687","RawContent":null,"Title":"Merge release/2.1.5xx to release/2.2.1xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.1.5xx into release/2.2.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.5xx-to-release/2.2.1xx\ngit reset --hard upstream/release/2.2.1xx\ngit merge upstream/release/2.1.5xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1.5xx-to-release/2.2.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2687","RelatedDescription":"Closed or merged PR \"Merge release/2.1.5xx to release/2.2.1xx\" (#2687)"},{"Id":"383593679","IsPullRequest":false,"CreatedAt":"2018-11-23T20:38:25","Actor":"jnm2","Number":"2690","RawContent":null,"Title":"SDK 2.1.500 fails to set IsTestProject in net40 projects","State":"closed","Body":"Here's a full repro: [DotnetTestBug.zip](https://github.com/Microsoft/vstest/files/2608701/DotnetTestBug.zip)\r\n\r\nProjects like this worked in all SDKs up to 2.1.500 because Microsoft.NET.Test.Sdk sets `<IsTestProject>true</IsTestProject>`:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <!-- This works in all SDK versions until 2.1.500: -->\r\n    <TargetFramework>net40</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"NUnit\" Version=\"3.11.0\" />\r\n    <PackageReference Include=\"NUnit3TestAdapter\" Version=\"3.11.0\" />\r\n    <PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"15.9.0\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\nE.g. using SDK 2.1.403, you get this output for `dotnet test`:\r\n\r\n```\r\nTest run for C:\\Users\\Joseph\\Desktop\\DotnetTestBug\\Using SDK 2.1.403\\bin\\Debug\\net40\\TestProject1.dll(.NETFramework,Version=v4.0)\r\nMicrosoft (R) Test Execution Command Line Tool Version 15.8.0\r\n...\r\nTest Run Successful.\r\n```\r\n\r\nStarting with SDK 2.1.500, `<IsTestProject>true</IsTestProject>` is no longer set. `dotnet test` gives:\r\n\r\n```\r\nSkipping running test for project C:\\Users\\Joseph\\Desktop\\DotnetTestBug\\Using SDK 2.1.500\\TestProject1.csproj. To run tests with dotnet test add \"\\<IsTestProject>true\\<IsTestProject>\" property to project file.\r\n```\r\n\r\nNote that the same `<PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"15.9.0\" />` is used in both cases.\r\nWasn't sure if this belonged here or at https://github.com/Microsoft/vstest/issues.\r\n\r\n### Issues\r\n\r\n- Is it your intention to require test projects which include a `net40` target to have to manually include `<IsTestProject>true</IsTestProject>` directly in the test csproj? Why isn't this the case for `net45`, since VSTest 15.9 supports `net40` and `net45` equally?\r\n\r\n- > To run tests with dotnet test add \"\\<IsTestProject>true\\<IsTestProject>\"\r\n  \r\n  This is invalid XML. Second tag should be a closing tag: \\<IsTestProject>true\\</IsTestProject>\r\n","Url":"https://github.com/dotnet/sdk/issues/2690","RelatedDescription":"Closed issue \"SDK 2.1.500 fails to set IsTestProject in net40 projects\" (#2690)"},{"Id":"383526362","IsPullRequest":true,"CreatedAt":"2018-11-23T20:35:02","Actor":"dotnet-maestro[bot]","Number":"2689","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18571.7\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18571.7\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2689","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#2689)"},{"Id":"383108070","IsPullRequest":true,"CreatedAt":"2018-11-21T16:48:11","Actor":"dotnet-maestro[bot]","Number":"2685","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18570.17\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2685","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#2685)"},{"Id":"382917779","IsPullRequest":true,"CreatedAt":"2018-11-21T01:33:03","Actor":"peterhuene","Number":"2684","RawContent":null,"Title":"Use `PreserveNewest` for explicitly published files.","State":"open","Body":"The publish targets contain files that are explicitly published, such as the\r\nbuild output, the deps file, the runtime config, etc.  Because the default for\r\nresolved files to publish was to always copy, a second publish operation when\r\neverything was up-to-date had needless copies of these files.\r\n\r\nThis commit changes those items to use `PreserveNewest` so that they are only\r\ncopied if the source is newer than the target.\r\n\r\nFixes #2573.","Url":"https://github.com/dotnet/sdk/pull/2684","RelatedDescription":"Open PR \"Use `PreserveNewest` for explicitly published files.\" (#2684)"},{"Id":"382653275","IsPullRequest":true,"CreatedAt":"2018-11-20T17:50:04","Actor":"dotnet-maestro[bot]","Number":"2683","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18569.4\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2683","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#2683)"},{"Id":"382443930","IsPullRequest":true,"CreatedAt":"2018-11-20T01:26:05","Actor":"peterhuene","Number":"2681","RawContent":null,"Title":"Add back `RunResolvePublishAssemblies` target.","State":"closed","Body":"This commit adds the `RunResolvePublishAssemblies` target back as a no-op\r\ntarget.  The Azure Functions SDK relies on this target for making copy local\r\nwork for build.  However, since the 3.0 SDK behaves the same as publish for\r\nbuild copy local, this is no longer necessary.\r\n\r\nAdding the target back will prevent the Azure Functions SDK from breaking.\r\n\r\nFixes dotnet/cli#10363.","Url":"https://github.com/dotnet/sdk/pull/2681","RelatedDescription":"Closed or merged PR \"Add back `RunResolvePublishAssemblies` target.\" (#2681)"},{"Id":"382435204","IsPullRequest":false,"CreatedAt":"2018-11-20T01:01:05","Actor":"jcouv","Number":"2680","RawContent":null,"Title":"Roslyn no longer builds if I install .NET Core 3 SDK","State":"closed","Body":"I installed a preview of .NET Core  3 (from https://github.com/dotnet/core-sdk/blob/master/README.md#installers-and-binaries ).\r\nWhen I build I get the error below.\r\n\r\nUninstalling it fixes the issue.\r\n\r\n\r\n```C#\r\nD:\\repos\\roslyn>Restore.cmd\r\n…\r\nD:\\repos\\roslyn>msbuild /v:m /m Compilers.sln\r\nMicrosoft (R) Build Engine version 15.9.20+g88f5fadfbe for .NET Framework\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  RunTests -> D:\\repos\\roslyn\\Binaries\\Debug\\Exes\\RunTests\\RunTests.exe\r\n  Microsoft.CodeAnalysis -> D:\\repos\\roslyn\\Binaries\\Debug\\Dlls\\Microsoft.CodeAnalysis\\Microsoft.CodeAnalysis.dll\r\n  CSharpSyntaxGenerator -> D:\\repos\\roslyn\\Binaries\\Debug\\Exes\\CSharpSyntaxGenerator\\CSharpSyntaxGenerator.dll\r\n  CSharpErrorFactsGenerator -> D:\\repos\\roslyn\\Binaries\\Debug\\Exes\\CSharpErrorFactsGenerator\\CSharpErrorFactsGenerator.dll\r\n  VisualBasicErrorFactsGenerator -> D:\\repos\\roslyn\\Binaries\\Debug\\Exes\\VisualBasicErrorFactsGenerator\\VBErrorFactsGenerator.dll\r\n  CompilersBoundTreeGenerator -> D:\\repos\\roslyn\\Binaries\\Debug\\Exes\\CompilersBoundTreeGenerator\\BoundTreeGenerator.dll\r\n  VisualBasicSyntaxGenerator -> D:\\repos\\roslyn\\Binaries\\Debug\\Exes\\VisualBasicSyntaxGenerator\\VBSyntaxGenerator.dll\r\n  Microsoft.Build.Tasks.CodeAnalysis -> D:\\repos\\roslyn\\Binaries\\Debug\\Dlls\\Microsoft.Build.Tasks.CodeAnalysis\\net472\\Microsoft.Build.Tasks.CodeAnalysis.dll\r\n  Microsoft.CodeAnalysis.CodeStyle -> D:\\repos\\roslyn\\Binaries\\Debug\\Dlls\\Microsoft.CodeAnalysis.CodeStyle\\Microsoft.CodeAnalysis.CodeStyle.dll\r\n\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview-009762\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(220,5): error NETSDK1047: Assets file 'D:\\repos\\roslyn\\Binaries\\Obj\\CompilerBenchmarks\\project.assets.json' doesn't have a target for '.NETCoreApp,Version=v2.1/win-\r\nx64'. Ensure that restore has run and that you have included 'netcoreapp2.1' in the TargetFrameworks for your project. You may also need to include 'win-x64' in your project's RuntimeIdentifiers. [D:\\repos\\roslyn\\src\\Tools\\CompilerBenchmarks\\CompilerBenchmarks.csproj]\r\n  \r\n…\r\n```","Url":"https://github.com/dotnet/sdk/issues/2680","RelatedDescription":"Closed issue \"Roslyn no longer builds if I install .NET Core 3 SDK\" (#2680)"},{"Id":"382451469","IsPullRequest":false,"CreatedAt":"2018-11-20T00:42:45","Actor":"jkotas","Number":"2682","RawContent":null,"Title":" NETSDK1061: The project was restored using Microsoft.NETCore.App version 2.1.6, but with current settings, version 2.1.0 would be used instead. ","State":"open","Body":"_From @gpresland on November 19, 2018 21:38_\n\nCreating a simple project from scratch and attempting to build it throws multiple errors with SDK 2.1.500.\r\n\r\nCreate a new project with:\r\n\r\n```\r\ndotnet new webapi -o example\r\ncd example\r\ncode\r\n```\r\n\r\nInside Visual Studio Code run:\r\n\r\n```\r\ndotnet publish -c Release -r win10-x64\r\n```\r\n\r\nYou will be spammed with errors such as:\r\n\r\n```\r\n[fail]: OmniSharp.MSBuild.ProjectLoader\r\n        NETSDK1061: The project was restored using Microsoft.NETCore.App version 2.1.6, but with current settings, version 2.1.0 would be used instead. To resolve this issue, make sure the same settings are used for restore and for subsequent operations such as build or publish. Typically this issue can occur if the RuntimeIdentifier property is set during build or publish but not during restore. For more information, see https://aka.ms/dotnet-runtime-patch-selection.\r\n```\n\n_Copied from original issue: dotnet/coreclr#21095_","Url":"https://github.com/dotnet/sdk/issues/2682","RelatedDescription":"Open issue \" NETSDK1061: The project was restored using Microsoft.NETCore.App version 2.1.6, but with current settings, version 2.1.0 would be used instead. \" (#2682)"},{"Id":"382369214","IsPullRequest":true,"CreatedAt":"2018-11-19T21:33:00","Actor":"johnbeisner","Number":"2678","RawContent":null,"Title":"Updates to perf.groovy for Arcade","State":"closed","Body":"Re-enabling the performance tests in SDK:master\r\n\r\nArcade changed the 'perf' parameters to build.*\r\n\"-msbuildEngine dotnet\" is necessary to skip the VS checks","Url":"https://github.com/dotnet/sdk/pull/2678","RelatedDescription":"Closed or merged PR \"Updates to perf.groovy for Arcade\" (#2678)"},{"Id":"382374902","IsPullRequest":false,"CreatedAt":"2018-11-19T20:11:59","Actor":"onovotny","Number":"2679","RawContent":null,"Title":"Discussion: Change default DebugType to embedded for .NET Core 3","State":"open","Body":"Inspired from this issue and twitter thread\r\nhttps://github.com/dotnet/docs/pull/9110\r\nhttps://twitter.com/rrelyea/status/1064587440935956482\r\n\r\nI want to propose that the default `DebugType` in the SDK change from `portable` to `embedded`. I would also propose that Sourcelink be included/used by default.\r\n\r\nAt the very least, there should be one property `ConfigureOpenSourceDefaults` that turns these on as best practices.\r\n\r\nMy rationale is driven by the pit of success. I believe that out-of-the-box, developers should produce fully debuggable code. This is similar to how JS typically generates/includes sourcemaps by default, so there is precedent.\r\n\r\nFew notes:\r\n- Embedding a pdb yields a file size that's 20-30% bigger.\r\n- Some .NET tools, like .NET Native do not support symbol server; the symbols need to be alongside the dll\r\n- Symbol server significantly slows down VS debug startup as it probes for files\r\n\r\nSome things like Appx/MSIX packaging strip-out pdb files by default. They rely on extra properties (`AppxPackageIncludePrivateSymbols`) to include them, which I'm sure 99% of people wouldn't know to add. Without them, the stack traces aren't as useful.\r\n\r\nSymbol servers may be blocked by corporate firewalls, or otherwise affected by low-bandwidth connections (think airplanes, trains, mobile hotspots, and anywhere else with slower/spotty connections). \r\n\r\nI believe that the extra size of the files with embedded pdb's is worth the trade-off for most cases as it presents the best debugging experience without any extra configuration. It just works. \r\n\r\nThanks","Url":"https://github.com/dotnet/sdk/issues/2679","RelatedDescription":"Open issue \"Discussion: Change default DebugType to embedded for .NET Core 3\" (#2679)"},{"Id":"382120889","IsPullRequest":false,"CreatedAt":"2018-11-19T20:01:22","Actor":"TimRowe","Number":"2677","RawContent":null,"Title":"Publish failed to deploy with https","State":"closed","Body":"When I update visual studio to newest version. My project publish was failed.\r\nThe info is  : can't create SSL/TLS security channel. Publish failed to deploy.\r\nWebDeploy focus to use https?  But my target server not suppot with https.\r\n","Url":"https://github.com/dotnet/sdk/issues/2677","RelatedDescription":"Closed issue \"Publish failed to deploy with https\" (#2677)"},{"Id":"381956117","IsPullRequest":false,"CreatedAt":"2018-11-19T20:00:52","Actor":"ghost1372","Number":"2676","RawContent":null,"Title":"run wpf on linux","State":"closed","Body":"dotnet --version = 3.0.100-preview-009756\r\nhi i want run my wpf app on linux so:\r\n1 - Create WPF app dotnet new wpf\r\n2 - dotnet publish -c release -r ubuntu.16.04-x64\r\n3 - Copy Publish folder on linux\r\n4 - chmod 777 ./wpfapp\r\n5 - ./wpfapp\r\nbut i get this error:\r\n\r\n> Unhandled Exception: System.IO.FileNotFoundException: Could not load file or assembly 'PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'. The system cannot find the file specified.\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/issues/2676","RelatedDescription":"Closed issue \"run wpf on linux\" (#2676)"},{"Id":"381861219","IsPullRequest":true,"CreatedAt":"2018-11-19T20:00:29","Actor":"dotnet-maestro[bot]","Number":"2675","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18566.6\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18567.1\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18568.1\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2675","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#2675)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"380346599","IsPullRequest":false,"CreatedAt":"2018-11-13T17:44:44","Actor":"leecow","Number":"91","RawContent":null,"Title":".NET Core November Update - 2.1.6 and SDK 2.1.500","State":"open","Body":"# November 2018 .NET Updates\r\n\r\nThe following .NET updates were released in November 2018. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core November 2018 (2.1.6 and SDK 2.1.500) Update release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.6/2.1.6.md)\r\n\r\nA [discussion issue](https://github.com/dotnet/core/issues/2053) is available for questions or feedback about this release.\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [October 2018](https://github.com/dotnet/announcements/issues/89)\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/91","RelatedDescription":"Open issue \".NET Core November Update - 2.1.6 and SDK 2.1.500\" (#91)"},{"Id":"375230004","IsPullRequest":false,"CreatedAt":"2018-10-29T21:45:27","Actor":"terrajobst","Number":"90","RawContent":null,"Title":"The future of JSON in .NET Core 3.0","State":"open","Body":"JSON has become an essential part of virtually all modern .NET applications and in many cases even surpassed the usage of XML. However, .NET hasn't had a (great) built-in way to deal with JSON. Instead we've relied on [Json.NET] which continues to serve the .NET ecosystem well.\r\n\r\n[Json.NET]: https://www.newtonsoft.com/json\r\n\r\nMoving forward, we plan on making some changes to our JSON support:\r\n\r\n* **We need high-performance JSON APIs**. We need a new set of JSON APIs that are highly tuned for performance by using `Span<T>` and allows for processing UTF-8 directly without having to transcode to UTF-16 `string` instances. Both aspects are critical for our web server Kestrel, where throughput is a key requirement.\r\n\r\n* **Remove dependency from ASP.NET Core to Json.NET**. Today, ASP.NET Core has a dependency on Json.NET. While this provides a tight integration between ASP.NET Core and Json.NET, it also means that application developers cannot freely choose which JSON library they are using. This is also problematic for customers of Json.NET as the version is dictated by the underlying platform. However, Json.NET is frequently updated and application developers often want to -- or even have to -- use a specific version. Thus, we want to remove the dependency from ASP.NET Core 3.0 to Json.NET so that customers can choose which version to use, without fearing they might accidentally break the underlying platform. In addition, this makes it also possible to plug-in an entirely different JSON library.\r\n\r\n* **Provide an ASP.NET Core integration package for Json.NET**. Json.NET has basically become the Swiss Army knife of JSON processing in .NET. It provides many options and facilities that allow customers to handle their JSON needs with ease. We don't want to compromise on the Json.NET support customers are getting today, for example, the ability to configure the JSON serialization via the `AddJsonOptions` extension method. Thus, we want to provide the Json.NET integration as a NuGet package that developers can optionally install so they get all the bells and whistles they get from Json.NET today. The other part of this work item is to ensure we have the right extension points so that other parties can provide similar integration packages for their JSON library of choice.\r\n\r\nBelow are more details around this plan.\r\n\r\n## The need for high-performance JSON APIs\r\n\r\nThe requirements for the .NET stack have changed a bit since the arrival of .NET Core. Historically, .NET has valued usability and convenience. With .NET Core, we've added a focus on performance, and we've made significant investments to serve high performance needs. And the [improvements we made][techempower] in the popular TechEmpower benchmark are a testament to that.\r\n\r\n[techempower]: https://www.techempower.com/blog/2016/11/16/framework-benchmarks-round-13/\r\n\r\nWith .NET Core 2.1, we've added a brand new primitive called [Span\\<T>][span-msdn] that allows us to represent native memory and arrays in a uniform way. With this type, we've also added a set of parsing and encoding APIs that are much more memory efficient without having to resort to unsafe code.\r\n\r\n[span-msdn]: https://msdn.microsoft.com/en-us/magazine/mt814808.aspx\r\n\r\nPart of the work of minimizing allocations is to avoid having to transcode UTF-8 payloads into UTF-16 strings, purely for parsing reasons. Currently, Json.NET is implemented by reading UTF-16. We need the ability to read (and write) JSON documents directly in UTF-8 because most network protocols (including HTTP) use UTF-8.\r\n\r\nDuring .NET Core 2.1 we've learned that updating our existing APIs to leverage `Span<T>` has limits. While we did add a bunch of overloads that accept spans, we also had to produce brand new APIs that are designed around minimizing allocations and dealing with buffers, which we exposed in `System.Buffers` namespaces. And with `System.IO.Pipelines` we've also added a programming model that enables developers to share buffers without having to deal with lifetime issues.\r\n\r\nBased on these experiences we believe in order to support JSON parsing, we'll need to expose a new set of JSON APIs that are specifically geared for high-performance scenarios.\r\n\r\nYou might wonder why we can't just update Json.NET to include support for parsing JSON using `Span<T>`? Well, James Newton-King -- the author of Json.NET -- has the following to say about that:\r\n\r\n> Json.NET was created over 10 years ago, and since then it has added a wide range of features aimed to help developers work with JSON in .NET. In that time Json.NET has also become far and away NuGet's most depended on and downloaded package, and is the go-to library for JSON support in .NET. Unfortunately, Json.NET's wealth of features and popularity works against making major changes to it. Supporting new technologies like `Span<T>` would require fundamental breaking changes to the library and would disrupt existing applications and libraries that depend on it.\r\n>\r\n> Going forward Json.NET will continue to be worked on and invested in, both addressing known issues today and supporting new platforms in the future. Json.NET has always existed alongside other JSON libraries for .NET, and there will be nothing to prevent you using one or more together, depending on whether you need the performance of the new JSON APIs or the large feature set of Json.NET.\r\n\r\n## Move Json.NET integration into a separate NuGet package\r\n\r\nToday, you cannot use ASP.NET Core without Json.NET because it is a dependency of ASP.NET Core itself. Over the years, we've received feedback that the dependency can conflict with other libraries that have their own dependency on a different version of Json.NET. In the past, we've considered addressing this issue by using a private copy of Json.NET in ASP.NET. However, this would create problems when developers want to configure Json.NET (for instance, in order to control how the serializer behaves when formatting JSON objects).\r\n\r\nMoving forward we'd like to:\r\n\r\n1. Replace the internal usage of Json.NET in ASP.NET Core by the new platform-provided JSON APIs.\r\n\r\n2. Factor the public facing usage of Json.NET into an optional integration package that can be acquired from NuGet.\r\n\r\nSo the existing integration between ASP.NET Core and Json.NET will continue to be supported, but will be moving out of the platform and into a separate package. However, since the integration is then designed to sit on top of the platform, it will also allow customers to update Json.NET to later versions.\r\n\r\nFurthermore, customers who need more performance can also choose to use the new JSON APIs, at the expense of the rich feature set that Json.NET offers.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/33115.","Url":"https://github.com/dotnet/announcements/issues/90","RelatedDescription":"Open issue \"The future of JSON in .NET Core 3.0\" (#90)"},{"Id":"368440353","IsPullRequest":false,"CreatedAt":"2018-10-09T23:44:06","Actor":"vivmishra","Number":"89","RawContent":null,"Title":"October 2018 .NET Updates","State":"open","Body":"# October 2018 .NET Updates\r\n\r\nThe following .NET updates were released in October 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core October 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/10/09/net-core-october-2018-update-net-core-1-0-and-1-1/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/89","RelatedDescription":"Open issue \"October 2018 .NET Updates\" (#89)"},{"Id":"368429033","IsPullRequest":false,"CreatedAt":"2018-10-09T22:51:18","Actor":"leecow","Number":"88","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core when HTTP authentication information is inadvertently exposed in an outbound request that encounters an HTTP redirect. An attacker who successfully exploited this vulnerability could use the information to further compromise the web application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handles HTTP redirects.\r\n\r\nSystem administrators running .NET Core 1.0 or .NET Core 1.1 applications must update their .NET Core runtimes to versions 1.0.13 and 1.1.10 then restart their applications. If installed applications target .NET Core 2.0, the applications must be migrated to 2.1 or newer and redeployed.\r\n\r\nDevelopers must update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core 2.0](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 then redeploy.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at <https://github.com/dotnet/corefx/issues/32730>\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nNone\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nAdditionally package authors should check their dependencies to ensure they aren't depending on a vulnerable version of the following package:\r\n\r\n<a name=\"package-list\"></a>Package name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Net.Http| 2.0.20126.16343, 2.0.20505, 2.0.20710, 4.0.0, 4.1.0, 4.1.1, 4.1.2, 4.3.0, 4.3.1, 4.3.2, 4.3.3 |  4.3.4 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nTo check the currently installed runtimes and SDKs with version 2.1 or later of .NET Core, open a command prompt and run the `dotnet --info` command. You should see an output similar to the following:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.403\r\n Commit:    04e15494b6\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.403\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.5\r\n  Commit:  290303f510\r\n\r\n.NET Core SDKs installed:\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.10 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf you don't see a runtime entry for 1.0.13 or 1.1.10, any .NET Core 1.x applications run on that computer are vulnerable.\r\n\r\nIf you don't have a 2.1 version of the runtime or SDK installed, you can produce the complete list of runtimes by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows | `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS | `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms | `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.13, 1.1.10 then any application targeting versions 1.0 or 1.1 are vulnerable.\r\n\r\nAdditionally, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n### <a name=\"fix-runtime\">How do I fix the vulnerability?\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.13, 1.1.10 and install the latest 2.1 runtime, ensuring that any 2.0 applications are migrated to 2.1 as soon as possible.\r\n\r\n Developers are advised to update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at <https://github.com/dotnet/> and <https://github.com/aspnet/>, respectively. The Announcements repo for each product (<https://github.com/dotnet/Announcements> and <https://github.com/aspnet/Announcements>) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8292](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8292)\r\n\r\n### Revisions\r\n\r\nV1.0 (October 10, 2018): Advisory published.\r\n_Version 1.0_\r\n_Last Updated 2018-10-10_\r\n","Url":"https://github.com/dotnet/announcements/issues/88","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\" (#88)"},{"Id":"367393517","IsPullRequest":false,"CreatedAt":"2018-10-05T22:58:51","Actor":"leecow","Number":"87","RawContent":null,"Title":".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan","State":"open","Body":"# .NET Core Release Data (releases.json) Redesign and Deprecation\r\n\r\nThe releases.json and releases.csv files began life as helper tools for some of our internal release work, some experimentation and to possibly be useful to the community. It has been great to learn the files are indeed in use and many folks depend on them as a trigger for a number of activities.\r\n\r\n* [release-notes/releases.json](https://github.com/dotnet/core/blob/master/release-notes/releases.json)\r\n* [release-notes/releases.csv](https://github.com/dotnet/core/blob/master/release-notes/releases.csv)\r\n\r\nA discussion topic is available to share thoughts and see what others are thinking at https://github.com/dotnet/core/issues/1986\r\n\r\nBetween the usages which we have become aware and in considering further activities that could be enabled to reason about things such as checking .NET Core version availability and support status, it became clear the current format is inadequate.\r\n\r\nAn updated format has been designed and tested which will replace the current files. The timeline below describes the path to obsoleting the current files.\r\n\r\n## The Plan\r\n\r\n| Date | Action |\r\n| :--- | :----- |\r\n| Oct 2018 | Notify the community of the coming change |\r\n| Oct 2018 | Release the new json format into dotnet/core |\r\n| Oct 2018 - Feb 2019 | Maintain the old json and csv files |\r\n| Feb 2019 | Reminder announcement that old format file is coming soon |\r\n| Mar 2019 | Old json and csv files are obsoleted and removed from dotnet/core |\r\n\r\n## Breaking change\r\n\r\nIf you are currently utilizing the old version json or csv, you will need to update the relevant code to work with the new format. If you are just getting started with consuming this data, use the new version.\r\n\r\n## The Format\r\n\r\nBelow are fragments of the files from our most recent .NET Core release.\r\n\r\n### release-index.json\r\n\r\nThis file consists of a top level array with data on the latest release versions and a property for locating the more detailed channel-specific releases.json. This file is found in [dotnet/core/release-notes](https://github.com/dotnet/core/tree/new-json/release-notes/)\r\n\r\n[releases-index.json](https://github.com/dotnet/core/blob/new-json/release-notes/releases-index.json)\r\n\r\n```\r\n{\r\n    \"releases-index\": [\r\n        {\r\n            \"channel-version\": \"2.1\",\r\n            \"latest-release\": \"2.1.5\",\r\n            \"latest-release-date\":\"2018-10-02\",\r\n            \"product\": \".NET Core\",\r\n            \"support-phase\": \"lts\",\r\n            \"eol-date\": \"\",\r\n            \"releases.json\": \"https://github.com/dotnet/core/blob/master/release-notes/2.1/releases.json\",\r\n        },\r\n        ...\r\n}\r\n```\r\n\r\n### releases.json\r\n\r\nThis file provides detailed data for each release. A copy of this file will be found in each versioned directories under [dotnet/core/release-notes](https://github.com/dotnet/core/release-notes). For example [dotnet/core/release-notes/2.1](https://github.com/dotnet/core/tree/new-json/release-notes/2.1)\r\n\r\n\r\n[releases.json](https://github.com/dotnet/core/tree/new-json/release-notes/2.1/releases.json)\r\n\r\n```\r\n{\r\n    \"channel-version\": \"2.1\",\r\n    \"latest-release\": \"2.1.5\",\r\n    \"latest-release-date\":\"2018-10-12\",\r\n    \"support-phase\": \"lts\",\r\n    \"eol-date\": \"\",\r\n    \"lifecycle-policy\": \"https://www.microsoft.com/net/support/policy\",\r\n    \"releases\":\r\n    [\r\n        {\r\n            \"release-date\":  \"2018-10-02\",\r\n            \"release-version\":  \"2.1.5\",\r\n            \"security\":  false,\r\n            \"release-notes\":  \"https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.5/2.1.5.md\",\r\n            \"runtime\":  \r\n            {\r\n                \"version\":  \"2.1.5\",\r\n                \"version-display\":  \"2.1.5\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"files\":  \r\n                [\r\n                    {\r\n                        \"name\": \"dotnet-runtime-linux-arm.tar.gz\",\r\n                        \"url\": \"https://download.visualstudio.microsoft.com/download/pr/4d555219-1f04-47c6-90e5-8b3ff8989b9c/0798763e6e4b98a62846116f997d046e/dotnet-runtime-2.1.5-linux-arm.tar.gz\",\r\n                        \"hash\": \"89a77a07065ea24e7198c77a233b9ce5c6cf51b1deb2ef55c88f0adbb2ecd9db1ba4e7d55eec2ef7139c47f91346fed360161a5bb6e3a7ccfc4559bcde286364\"\r\n                    },\r\n                    ...\r\n                ]\r\n            }\r\n            \"sdk\":  \r\n            {\r\n                \"version\":  \"2.1.403\",\r\n                \"version-display\":  \"2.1.403\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"csharp-language\":  \"7.3\",\r\n                \"fsharp-language\":  \"4.5\",\r\n                \"files\":  \r\n                [...]\r\n            }\r\n        }\r\n    ]\r\n}\r\n```","Url":"https://github.com/dotnet/announcements/issues/87","RelatedDescription":"Open issue \".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan\" (#87)"},{"Id":"366416503","IsPullRequest":false,"CreatedAt":"2018-10-03T16:11:18","Actor":"leecow","Number":"86","RawContent":null,"Title":".NET Core 2.0 has reached end of life","State":"open","Body":"[.NET Core 2.0 reached end of life](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) on October 1, 2018. This means [.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) is no longer supported and updates will no longer be provided. We recommend moving to [.NET Core 2.1](https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-net-core-2-1/), our long term support (LTS) release.\r\n\r\n- [Download .NET Core 2.1](https://www.microsoft.com/net/download/dotnet-core/2.1)\r\n- [.NET Core 2.1 LTS statement](https://blogs.msdn.microsoft.com/dotnet/2018/08/21/net-core-august-2018-update/)\r\n- [.NET Core 2.0 end-of-life statement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n\r\n## Discussion\r\n\r\nPlease share you thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/core#1983](https://github.com/dotnet/core/issues/1983)\r\n\r\n## Lifecycle Context\r\n\r\n.NET Core releases belong to one of two [support lifecycles](https://www.microsoft.com/net/platform/support-policy): long term support (LTS) and Current. LTS releases are stable release which receive critical updates and are supported for at least three years. Current releases can include new features that may undergo future change based on feedback. Current releases are supported for three months after the subsequent .NET Core major or minor release. Both LTS and Current releases receive critical fixes throughout their lifecycle, for security, reliability, or to add support for new operating system versions. You must stay up-to-date with the latest patches to qualify for support. \r\n\r\n## .NET Core 2.0 Lifecycle\r\n\r\n[.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) was released in August 2017 as a Current release. Per the lifecycle policy, Current releases reach end of life 3 months after a subsequent release (Current or LTS). .NET Core 2.1 released May 2018 and began the end of life countdown for .NET Core 2.0. The 3 month maintenance period for .NET Core 2.0 was scheduled to end August 2018 but was [extended to October](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) to allow time to address an issue some customers were experiencing while migrating to .NET Core 2.1.\r\n\r\n## .NET Core 2.0 Downloads\r\n\r\n.NET Core 2.0 installers, zips and tar.gzs will remain available, but unsupported. This includes existing releases available on Linux package feeds. Previous versions, including 2.0, will be accessible through the [Download Archives](https://www.microsoft.com/net/download/archives). \r\n\r\n## .NET Core 2.0 Docker Images\r\n\r\n.NET Core 2.0 will be removed from the .NET and ASP.NET Docker repo READMEs, however the existing images remain available in those repos.\r\n\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/)\r\n* [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/)\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)\r\n\r\n## Policy Information\r\n\r\nAdditional lifecycle and support details  and background can be seen in the following:\r\n\r\n* [.NET Core Support Lifecycle](https://www.microsoft.com/net/platform/support-policy)\r\n* [Support and Versioning](https://blogs.msdn.microsoft.com/dotnet/2016/07/26/net-support-and-versioning/)\r\n* [2.0 end of life early announcement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n","Url":"https://github.com/dotnet/announcements/issues/86","RelatedDescription":"Open issue \".NET Core 2.0 has reached end of life\" (#86)"},{"Id":"361098704","IsPullRequest":false,"CreatedAt":"2018-09-18T01:10:23","Actor":"spshant","Number":"85","RawContent":null,"Title":"NET Framework 4.8 Early Access build 3646 is available!","State":"open","Body":"Today, we are happy to share an Early Access build for the .NET Framework 4.8. This includes an updated .NET 4.8 runtime as well as the .NET 4.8 Developer Pack (a a single package that bundles the .NET Framework 4.8 runtime, the .NET 4.8 Targeting Pack, and the .NET Framework 4.8 SDK). \r\n\r\nPlease help us ensure this is a high quality and compatible release by trying out this build and exploring the new features. \r\n\r\n**Next steps:**\r\nTo explore the new features, download the [.NET 4.8 Developer Pack build 3646](https://go.microsoft.com/fwlink/?LinkId=2018486).  Instead, if you want to try just the .NET 4.8 runtime, you can download either of these:\r\n•\t[.NET 4.8 Web Installer](https://go.microsoft.com/fwlink/?LinkId=2018525) - requires an internet connection during installation \r\n•\t[.NET 4.8 Offline installer](https://go.microsoft.com/fwlink/?LinkId=2018531) - can be downloaded and installed later in a disconnected state\r\n\r\nPlease provide your feedback by [reporting an issue at the .NET Framework Early Access GitHub repository](https://github.com/Microsoft/dotnet-framework-early-access/issues/new).\r\n\r\n**Note**: this release is still under development, you can expect to see more features and fixes in future preview builds. Also, a reminder that this build is not supported for production use.\r\n\r\nThis preview build 3646 includes improvements/fixes in the following areas:\r\n•\t**[Runtime]** JIT and NGEN improvements\r\n•\t**[Windows Forms]** Accessibility enhancements\r\n•\t**[WPF]** SelectionTextBrush Property\r\n•\t**[BCL]** Updated ZLib\r\n\r\nYou can see the complete list of improvements in this build [here](https://github.com/Microsoft/dotnet-framework-early-access/blob/master/release-notes/NET48/build-3646/changes.md).\r\n\r\n.NET Framework build 3646 is also included in the next update for Windows 10. You can sign up for [Windows Insiders](https://insider.windows.com/en-us/) to validate that your applications work great on the latest .NET Framework included in the latest Windows 10 releases.\r\n","Url":"https://github.com/dotnet/announcements/issues/85","RelatedDescription":"Open issue \"NET Framework 4.8 Early Access build 3646 is available!\" (#85)"},{"Id":"359151445","IsPullRequest":false,"CreatedAt":"2018-09-11T17:44:50","Actor":"leecow","Number":"84","RawContent":null,"Title":"September 2018 .NET Updates","State":"open","Body":"# September 2018 .NET Updates\r\n\r\nThe following .NET updates were released in September 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework September 2018 Security and Quality Rollup - September 11, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/09/11/net-framework-september-2018-security-and-quality-rollup/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core September 2018 Update - September 11, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.4/2.1.4.md)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/84","RelatedDescription":"Open issue \"September 2018 .NET Updates\" (#84)"},{"Id":"359136325","IsPullRequest":false,"CreatedAt":"2018-09-11T17:00:55","Actor":"blowdart","Number":"83","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability in .NET Core when System.IO.Pipelines improperly handles requests. An attacker who successfully exploited this vulnerability could cause a denial of service against an application that is leveraging System.IO.Pipelines. The vulnerability can be exploited remotely, without authentication. A remote unauthenticated attacker could exploit this vulnerability by providing specially crafted requests to the application.\r\n\r\nThe update addresses the vulnerability by correcting how System.IO.Pipelines handles requests.\r\n\r\nIf you are using ASP.NET Core 2.1 you will also need to update your ASP.NET version this by following the instructions in the [ASP.NET Core bulletin](https://github.com/aspnet/Announcements/issues/316).\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/32228\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.IO.Pipelines package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.IO.Pipelines | 4.5.0 | 4.5.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications which use System.IO.Pipelines\r\n\r\nSystem.IO.Pipelines is distributed both in ASP.NET Core 2.1 and separately as a NuGet package. If you are not using Microsoft.AspNetCore.App or .All, you may still be affected if you are referencing the System.IO.Pipelines package.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.IO.Pipelines/4.5.0` is a reference to version 4.5.0 of `System.IO.Pipelines`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.IO.Pipelines` version 4.5.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8409](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8409)\r\n\r\n### Revisions\r\n\r\nV1.0 (September 11, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-09-11_\r\n","Url":"https://github.com/dotnet/announcements/issues/83","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability\" (#83)"},{"Id":"357399856","IsPullRequest":false,"CreatedAt":"2018-09-05T20:56:25","Actor":"richlander","Number":"82","RawContent":null,"Title":".NET Core Runtime ARM64 Status","State":"open","Body":"# .NET Core Runtime ARM64 Status\r\n\r\nThe .NET Core team is in the process of adding support for ARM64, as part of the .NET Core 3.0 project. This issue will be updated as ARM64 support progresses.\r\n\r\nInitial support for ARM64 was added in the .NET Core 2.1 release. The team is not maintaining .NET Core 2.x branches with respect to ARM64. All ARM64 improvements will be made in the .NET Core 3.0 branch (currently [master](https://github.com/dotnet/coreclr)).\r\n\r\nSee [Installing .NET Core 3.0 on Linux ARM64](https://gist.github.com/richlander/467813274cea8abc624553ee72b28213) to install .NET Core on your ARM64 machine. Builds are available from the [daily builds page](https://github.com/dotnet/core/blob/master/daily-builds.md).\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/coreclr #19843](https://github.com/dotnet/coreclr/issues/19843)\r\n\r\n## Current Status\r\n\r\nARM64 builds are functional, for console apps. ASP.NET Core is not yet functional.\r\n\r\nSee following known issues:\r\n\r\n* [dotnet/core-sdk #75](https://github.com/dotnet/core-sdk/issues/75)\r\n* [dotnet/core-sdk #76](https://github.com/dotnet/core-sdk/issues/76)\r\n\r\n## Bug Queries\r\n\r\nthe following bugs queries are available for ARM64:\r\n\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues?q=is%3Aopen+is%3Aissue+label%3Aarch-arm64)\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues?q=is%3Aopen+is%3Aissue+label%3Aarch-arm64)\r\n\r\n## Operating Systems\r\n\r\n.NET Core 3.0 ARM64 builds have been tested on the following operating systems:\r\n\r\n* Ubuntu 16.04\r\n* Windows 10\r\n\r\n## Test Hardware\r\n\r\n.NET Core 3.0 ARM64 builds have been tested on the following hardware:\r\n\r\n* [NVIDIA Jetson TX2 Module](https://developer.nvidia.com/embedded/buy/jetson-tx2)\r\n* [Pine A64](https://www.pine64.org/?page_id=46823)\r\n* [Qualcomm Centriq 2400](https://www.qualcomm.com/products/qualcomm-centriq-2400-processor)\r\n* [Qualcomm Snapdragon](https://www.qualcomm.com/snapdragon/always-connected-pc)\r\n* [Raspberry Pi3](https://www.raspberrypi.org/products/raspberry-pi-3-model-b-plus/)","Url":"https://github.com/dotnet/announcements/issues/82","RelatedDescription":"Open issue \".NET Core Runtime ARM64 Status\" (#82)"},{"Id":"349693735","IsPullRequest":false,"CreatedAt":"2018-08-22T18:23:01","Actor":"richlander","Number":"80","RawContent":null,"Title":"Improving Performance of ARM32 Docker Images with .NET Core Package Cache","State":"closed","Body":"# Improving Performance of ARM32 Docker Images with .NET Core Package Cache\r\n\r\n.NET Core SDK distributions include a compressed copy of NuGet packages for .NET Core, ASP.NET Core and EF Core. These packages are decompressed upon installation of the .NET Core SDK. The packages are not currently included in ARM32 distributions due to the time and space cost to decompress the packages. Instead, they will be added to [.NET Core ARM32 Docker images](https://hub.docker.com/r/microsoft/dotnet/), where these costs can be paid as part of image creation.\r\n\r\nThese NuGet packages include content for two purposes:\r\n\r\n- Reference assemblies for .NET Core, for code compilation.\r\n- Pre-compiled assemblies (compiled with [crossgen](https://github.com/dotnet/coreclr/blob/master/Documentation/building/crossgen.md)) for .NET Core, for use in self-contained applications.\r\n\r\nIn both cases, the presence of these packages avoid the need to access remote NuGet feeds for .NET Core assemblies as part of package restore.\r\n\r\nThis change only affects [.NET Core 2.1 SDK ARM32 Docker images](https://hub.docker.com/r/microsoft/dotnet/). This change will be made in August 2018.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #653](https://github.com/dotnet/dotnet-docker/issues/653)\r\n\r\n## .NET Core SDK NugetFallbackFolder\r\n\r\nThe .NET Core SDK includes a compressed copy of all NuGet package, in LZMA format. It exists at the following version-specific location:\r\n\r\n```\r\nroot@3778032bc43d:/# ls -l /usr/share/dotnet/sdk/2.1.302/*.lzma\r\n-rw-r--r-- 1 1004 sudo 35995936 Jul  2 22:51 /usr/share/dotnet/sdk/2.1.302/nuGetPackagesArchive.lzma\r\n```\r\n\r\nThis file is decompressed to the following location: `/usr/share/dotnet/sdk/NuGetFallbackFolder/`\r\n\r\nA package restore for a .NET Core assembly will restore the assembly from the NuGetFallbackFolder location and copy it to the user NuGet cache. At that point, regular NuGet behavior is used.\r\n\r\n## Impact of this change\r\n\r\nThere should be no functional difference in behavior after this change. .NET SDK commands should complete faster and require fewer package restore network requests.\r\n\r\nThe following examples demonstrates the benefit of this change. The improvement can be observed with package restore. Build times (assuming no restore) are not affected.\r\n\r\n### .NET Core 2.1 SDK image after this change\r\n\r\n> The change has already been made in the `microsoft/dotnet-nightly` repo, as you can see in the example below. In August, this same change will be made available in the `microsoft/dotnet` repo.\r\n\r\n```console\r\npi@raspberrypi:~ $ docker run -it --rm microsoft/dotnet-nightly:2.1-sdk\r\nroot@416731f24915:/# time dotnet new mvc -o mvcapp\r\nGetting ready...\r\nThe template \"ASP.NET Core Web App (Model-View-Controller)\" was created successfully.\r\nThis template contains technologies from parties other than Microsoft, see https://aka.ms/aspnetcore-template-3pn-210 for details.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on mvcapp/mvcapp.csproj...\r\n  Restoring packages for /mvcapp/mvcapp.csproj...\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.props.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.targets.\r\n  Restore completed in 6.68 sec for /mvcapp/mvcapp.csproj.\r\n\r\nRestore succeeded.\r\n\r\n\r\nreal    0m32.496s\r\nuser    0m35.820s\r\nsys     0m4.280s\r\nroot@416731f24915:/# cd mvcapp/\r\nroot@416731f24915:/mvcapp# time dotnet build\r\nMicrosoft (R) Build Engine version 15.8.138-preview+ge0cd4f1c1f for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 524.78 ms for /mvcapp/mvcapp.csproj.\r\n/usr/share/dotnet/sdk/2.1.401-preview-009081/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.RuntimeIdentifierInference.targets(143,5): message NETSDK1057: You are working with a preview version of the .NET Core SDK. You can define the SDK version via a global.json file in the current project. More at https://go.microsoft.com/fwlink/?linkid=869452 [/mvcapp/mvcapp.csproj]\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.dll\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.Views.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:02:09.15\r\n\r\nreal    2m13.377s\r\nuser    1m25.260s\r\nsys     0m9.420s\r\nroot@416731f24915:/mvcapp#\r\n```\r\n\r\n### .NET Core 2.1 SDK image before this change\r\n\r\n```console\r\npi@raspberrypi:~ $ docker run -it --rm microsoft/dotnet:2.1-sdk\r\nroot@9d1d5e45df6a:/# time dotnet new mvc -o mvcapp\r\nGetting ready...\r\nThe template \"ASP.NET Core Web App (Model-View-Controller)\" was created successfully.\r\nThis template contains technologies from parties other than Microsoft, see https://aka.ms/aspnetcore-template-3pn-210 for details.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on mvcapp/mvcapp.csproj...\r\n  Restoring packages for /mvcapp/mvcapp.csproj...\r\n  Installing System.Xml.XmlSerializer 4.3.0.\r\n  Installing System.Threading.Tasks.Extensions 4.0.0.\r\n  Installing System.Globalization.Extensions 4.0.1.\r\n  Installing runtime.native.System.Security.Cryptography 4.0.0.\r\n  Installing System.Security.Cryptography.OpenSsl 4.0.0.\r\n  Installing System.Security.Cryptography.Cng 4.2.0.\r\n  Installing System.Security.Cryptography.Csp 4.0.0.\r\n  Installing runtime.native.System.Net.Http 4.0.1.\r\n  Installing runtime.native.System 4.0.0.\r\n  Installing runtime.native.System.IO.Compression 4.1.0.\r\n  Installing System.Buffers 4.0.0.\r\n  Installing System.Private.DataContractSerialization 4.3.0.\r\n  Installing System.Security.Principal 4.3.0.\r\n  Installing runtime.osx.10.10-x64.runtime.native.System.Security.Cryptography.Apple 4.3.0.\r\n  Installing runtime.rhel.7-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.ubuntu.14.04-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.opensuse.42.1-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.NETCore.App 2.1.0.\r\n  Installing runtime.ubuntu.16.10-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.App 2.1.1.\r\n  Installing runtime.ubuntu.16.04-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.NETCore.Platforms 2.1.0.\r\n  Installing Microsoft.NETCore.Targets 2.1.0.\r\n  Installing NETStandard.Library 2.0.3.\r\n  Installing Microsoft.NETCore.DotNetHostPolicy 2.1.0.\r\n  Installing Microsoft.AspNetCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Antiforgery 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Session 2.1.1.\r\n  Installing Microsoft.AspNetCore.SpaServices 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.KeyPerFile 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Hosting 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Embedded 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Physical 2.1.1.\r\n  Installing Microsoft.Extensions.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Cookies 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Core 2.1.1.\r\n  Installing runtime.osx.10.10-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.Authentication.Google 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Facebook 2.1.1.\r\n  Installing Microsoft.Extensions.Hosting.Abstractions 2.1.1.\r\n  Installing runtime.opensuse.13.2-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.HttpsPolicy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.MicrosoftAccount 2.1.1.\r\n  Installing Microsoft.Extensions.Http 2.1.1.\r\n  Installing Microsoft.AspNetCore.MiddlewareAnalysis 2.1.1.\r\n  Installing Microsoft.Extensions.FileSystemGlobbing 2.1.1.\r\n  Installing Microsoft.Extensions.DiagnosticAdapter 2.1.0.\r\n  Installing Microsoft.Extensions.Identity.Core 2.1.1.\r\n  Installing Microsoft.Extensions.Identity.Stores 2.1.1.\r\n  Installing Microsoft.Extensions.Options.ConfigurationExtensions 2.1.1.\r\n  Installing Microsoft.Extensions.Localization.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Abstractions 2.1.1.\r\n  Installing runtime.fedora.24-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.Options 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Composite 2.1.1.\r\n  Installing Microsoft.Extensions.Logging 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Configuration 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.TraceSource 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.UserSecrets 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Debug 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Console 2.1.1.\r\n  Installing Microsoft.Extensions.DependencyInjection 2.1.1.\r\n  Installing Microsoft.Extensions.ObjectPool 2.1.1.\r\n  Installing runtime.debian.8-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.DependencyInjection.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Binder 2.1.1.\r\n  Installing runtime.fedora.23-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.Configuration.EnvironmentVariables 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.FileExtensions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.Memory 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.CommandLine 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.Abstractions 2.1.1.\r\n  Installing Microsoft.Net.Http.Headers 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.InMemory 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Ini 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Analyzers 2.1.1.\r\n  Installing Microsoft.AspNetCore.StaticFiles 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Relational 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Https 2.1.1.\r\n  Installing Microsoft.Extensions.Primitives 2.1.1.\r\n  Installing Microsoft.AspNetCore.SpaServices.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel 2.1.1.\r\n  Installing Microsoft.Extensions.WebEncoders 2.1.1.\r\n  Installing Microsoft.AspNetCore.WebUtilities 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR 1.0.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets 2.1.1.\r\n  Installing Microsoft.AspNetCore.Routing 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Tools 2.1.1.\r\n  Installing Microsoft.AspNetCore.Routing.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Rewrite 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCaching.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Transport.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCaching 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCompression 2.1.1.\r\n  Installing System.Globalization.Extensions 4.3.0.\r\n  Installing Microsoft.AspNetCore.Razor.Language 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.TagHelpers 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor.Runtime 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.RazorPages 2.1.1.\r\n  Installing Microsoft.AspNetCore.Owin 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor.ViewCompilation 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Analyzers 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Formatters.Json 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Design 2.1.1.\r\n  Installing Microsoft.AspNetCore.WebSockets 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Cors 2.1.1.\r\n  Installing System.Diagnostics.DiagnosticSource 4.3.0.\r\n  Installing Microsoft.AspNetCore.Mvc.DataAnnotations 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.ApiExplorer 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Formatters.Xml 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.EventSource 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.OAuth 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Json 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR.Protocols.Json 1.0.1.\r\n  Installing Microsoft.AspNetCore.NodeServices 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR.Common 1.0.1.\r\n  Installing Microsoft.AspNetCore.JsonPatch 2.1.1.\r\n  Installing Microsoft.AspNetCore.Localization.Routing 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.IISIntegration 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity.UI 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor.Design 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity.EntityFrameworkCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.HttpOverrides 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Features 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Connections 1.0.1.\r\n  Installing Microsoft.AspNetCore.Http.Connections.Common 1.0.1.\r\n  Installing Microsoft.AspNetCore.Http 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cors 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting.Server.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cryptography.Internal 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cryptography.KeyDerivation 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.HostFiltering 2.1.1.\r\n  Installing Microsoft.CSharp 4.0.1.\r\n  Installing Microsoft.AspNetCore.CookiePolicy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Core 2.1.1.\r\n  Installing Microsoft.AspNetCore.Html.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Twitter 2.1.1.\r\n  Installing Microsoft.AspNetCore.Connections.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authorization.Policy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authorization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.HttpSys 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Xml 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.SqlServer 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.SqlServer 2.1.1.\r\n  Installing Microsoft.AspNet.WebApi.Client 5.2.6.\r\n  Installing Microsoft.AspNetCore.SignalR.Core 1.0.1.\r\n  Installing Microsoft.AspNetCore.Mvc.ViewFeatures 2.1.1.\r\n  Installing Microsoft.CodeAnalysis.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.JwtBearer 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.OpenIdConnect 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.WsFederation 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore 2.1.1.\r\n  Installing System.Runtime.Serialization.Primitives 4.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Core 2.1.1.\r\n  Installing System.Xml.ReaderWriter 4.0.11.\r\n  Installing Microsoft.NETCore.DotNetHostResolver 2.1.0.\r\n  Installing System.Diagnostics.DiagnosticSource 4.5.0.\r\n  Installing System.ComponentModel.Annotations 4.5.0.\r\n  Installing System.Buffers 4.5.0.\r\n  Installing System.Memory 4.5.1.\r\n  Installing System.Runtime.CompilerServices.Unsafe 4.5.1.\r\n  Installing System.Text.Encodings.Web 4.5.0.\r\n  Installing Microsoft.CSharp 4.5.0.\r\n  Installing System.Net.WebSockets.WebSocketProtocol 4.5.1.\r\n  Installing Newtonsoft.Json 11.0.2.\r\n  Installing System.IO.Pipelines 4.5.0.\r\n  Installing System.Numerics.Vectors 4.5.0.\r\n  Installing System.Security.Principal.Windows 4.5.0.\r\n  Installing System.Threading.Tasks.Extensions 4.5.1.\r\n  Installing System.Security.Cryptography.Cng 4.5.0.\r\n  Installing System.Net.Http 4.1.0.\r\n  Installing System.Security.Cryptography.Xml 4.5.0.\r\n  Installing Microsoft.Win32.Registry 4.5.0.\r\n  Installing System.Reflection.Metadata 1.6.0.\r\n  Installing System.Data.SqlClient 4.5.1.\r\n  Installing Newtonsoft.Json.Bson 1.0.1.\r\n  Installing Newtonsoft.Json 10.0.1.\r\n  Installing System.Threading.Channels 4.5.0.\r\n  Installing System.Reflection.Emit 4.3.0.\r\n  Installing Microsoft.CodeAnalysis.CSharp 2.8.0.\r\n  Installing Microsoft.CodeAnalysis.Common 2.8.0.\r\n  Installing System.Security.Cryptography.Algorithms 4.2.0.\r\n  Installing Microsoft.IdentityModel.Protocols.OpenIdConnect 5.2.0.\r\n  Installing System.IdentityModel.Tokens.Jwt 5.2.0.\r\n  Installing Microsoft.IdentityModel.Protocols.WsFederation 5.2.0.\r\n  Installing System.Collections.Immutable 1.5.0.\r\n  Installing Remotion.Linq 2.2.0.\r\n  Installing System.Interactive.Async 3.1.1.\r\n  Installing Microsoft.Extensions.DependencyModel 2.1.0.\r\n  Installing Microsoft.NETCore.DotNetAppHost 2.1.0.\r\n  Installing Microsoft.NETCore.Platforms 2.0.0.\r\n  Installing System.Security.Cryptography.Pkcs 4.5.0.\r\n  Installing System.Security.Permissions 4.5.0.\r\n  Installing System.Security.AccessControl 4.5.0.\r\n  Installing NETStandard.Library 1.6.1.\r\n  Installing System.Text.Encoding.CodePages 4.5.0.\r\n  Installing System.Linq 4.3.0.\r\n  Installing runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing System.Diagnostics.Debug 4.3.0.\r\n  Installing System.Globalization 4.3.0.\r\n  Installing System.IO 4.3.0.\r\n  Installing System.Collections 4.3.0.\r\n  Installing System.Runtime.Serialization.Primitives 4.3.0.\r\n  Installing System.Runtime.Serialization.Formatters 4.3.0.\r\n  Installing System.Xml.XmlDocument 4.3.0.\r\n  Installing System.Threading 4.3.0.\r\n  Installing System.Resources.ResourceManager 4.3.0.\r\n  Installing System.Text.Encoding.Extensions 4.3.0.\r\n  Installing System.Xml.XDocument 4.3.0.\r\n  Installing System.Threading.Tasks 4.3.0.\r\n  Installing System.Linq.Expressions 4.3.0.\r\n  Installing System.Runtime.Numerics 4.3.0.\r\n  Installing System.Text.Encoding 4.3.0.\r\n  Installing System.Reflection.Extensions 4.3.0.\r\n  Installing System.Text.RegularExpressions 4.3.0.\r\n  Installing System.Runtime.Extensions 4.3.0.\r\n  Installing System.Reflection 4.3.0.\r\n  Installing System.ObjectModel 4.3.0.\r\n  Installing System.Dynamic.Runtime 4.3.0.\r\n  Installing System.Xml.ReaderWriter 4.3.0.\r\n  Installing Microsoft.CSharp 4.3.0.\r\n  Installing System.ComponentModel.TypeConverter 4.3.0.\r\n  Installing System.Runtime 4.3.0.\r\n  Installing System.Reflection.Emit.ILGeneration 4.3.0.\r\n  Installing System.Reflection.Primitives 4.3.0.\r\n  Installing System.AppContext 4.3.0.\r\n  Installing System.Console 4.3.0.\r\n  Installing System.Collections.Concurrent 4.3.0.\r\n  Installing System.Diagnostics.Tools 4.3.0.\r\n  Installing System.Security.Cryptography.Encoding 4.0.0.\r\n  Installing System.IO.Compression 4.3.0.\r\n  Installing System.IO.FileSystem 4.3.0.\r\n  Installing System.IO.FileSystem.Primitives 4.3.0.\r\n  Installing System.Security.Cryptography.Encoding 4.3.0.\r\n  Installing System.Collections.Immutable 1.3.1.\r\n  Installing System.Runtime.InteropServices 4.3.0.\r\n  Installing System.Security.Cryptography.X509Certificates 4.1.0.\r\n  Installing System.Diagnostics.StackTrace 4.3.0.\r\n  Installing System.Reflection.Metadata 1.4.2.\r\n  Installing System.Threading.Thread 4.3.0.\r\n  Installing Microsoft.CodeAnalysis.Analyzers 1.1.0.\r\n  Installing System.Security.Cryptography.X509Certificates 4.3.0.\r\n  Installing System.ValueTuple 4.3.0.\r\n  Installing System.Diagnostics.FileVersionInfo 4.3.0.\r\n  Installing System.Threading.Tasks.Parallel 4.3.0.\r\n  Installing System.Security.Cryptography.Algorithms 4.3.0.\r\n  Installing System.Xml.XPath.XDocument 4.3.0.\r\n  Installing System.Text.Encoding.CodePages 4.3.0.\r\n  Installing System.Runtime.InteropServices 4.1.0.\r\n  Installing Microsoft.IdentityModel.Protocols 5.2.0.\r\n  Installing Microsoft.IdentityModel.Tokens 5.2.0.\r\n  Installing Microsoft.IdentityModel.Xml 5.2.0.\r\n  Installing System.Diagnostics.Debug 4.0.11.\r\n  Installing System.Reflection.Extensions 4.0.1.\r\n  Installing Microsoft.IdentityModel.Tokens.Saml 5.2.0.\r\n  Installing System.Runtime.Extensions 4.1.0.\r\n  Installing System.Threading 4.0.11.\r\n  Installing System.Collections 4.0.11.\r\n  Installing System.Reflection 4.1.0.\r\n  Installing System.ObjectModel 4.0.12.\r\n  Installing System.Linq 4.1.0.\r\n  Installing System.Linq.Queryable 4.0.1.\r\n  Installing System.Linq.Expressions 4.1.0.\r\n  Installing System.Runtime 4.1.0.\r\n  Installing NETStandard.Library 1.6.0.\r\n  Installing System.Dynamic.Runtime 4.0.11.\r\n  Installing Newtonsoft.Json 9.0.1.\r\n  Installing Microsoft.DotNet.PlatformAbstractions 2.1.0.\r\n  Installing System.Runtime.CompilerServices.Unsafe 4.5.0.\r\n  Installing runtime.win-x64.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing runtime.win-x86.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing runtime.win-arm64.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing Microsoft.NETCore.Platforms 1.1.0.\r\n  Installing Microsoft.Win32.Primitives 4.3.0.\r\n  Installing System.Net.Sockets 4.3.0.\r\n  Installing System.Diagnostics.Tracing 4.3.0.\r\n  Installing System.IO.Compression.ZipFile 4.3.0.\r\n  Installing System.Globalization.Calendars 4.3.0.\r\n  Installing System.Threading.Timer 4.3.0.\r\n  Installing System.Security.Cryptography.Primitives 4.3.0.\r\n  Installing System.Runtime.InteropServices.RuntimeInformation 4.0.0.\r\n  Installing System.Runtime.Handles 4.3.0.\r\n  Installing System.Runtime.InteropServices.RuntimeInformation 4.3.0.\r\n  Installing System.Net.Http 4.3.0.\r\n  Installing Microsoft.NETCore.Targets 1.1.0.\r\n  Installing System.Net.Primitives 4.3.0.\r\n  Installing System.Reflection.Emit.Lightweight 4.3.0.\r\n  Installing System.Reflection.TypeExtensions 4.3.0.\r\n  Installing System.Threading.Tasks.Extensions 4.3.0.\r\n  Installing System.ComponentModel 4.3.0.\r\n  Installing System.ComponentModel.Primitives 4.3.0.\r\n  Installing System.Collections.NonGeneric 4.3.0.\r\n  Installing System.Collections.Specialized 4.3.0.\r\n  Installing runtime.native.System 4.3.0.\r\n  Installing runtime.native.System.IO.Compression 4.3.0.\r\n  Installing System.Buffers 4.3.0.\r\n  Installing runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.native.System.Net.Http 4.3.0.\r\n  Installing System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing System.Security.Cryptography.Cng 4.3.0.\r\n  Installing System.Security.Cryptography.Csp 4.3.0.\r\n  Installing runtime.native.System.Security.Cryptography.Apple 4.3.0.\r\n  Installing System.Xml.XPath 4.3.0.\r\n  Installing Microsoft.IdentityModel.Logging 5.2.0.\r\n  Installing System.Diagnostics.Contracts 4.3.0.\r\n  Installing System.Runtime.Serialization.Xml 4.3.0.\r\n  Installing Microsoft.NETCore.Platforms 1.0.1.\r\n  Installing Microsoft.NETCore.Targets 1.0.1.\r\n  Installing System.Security.Claims 4.3.0.\r\n  Installing System.Reflection.Primitives 4.0.1.\r\n  Installing System.IO 4.1.0.\r\n  Installing System.Globalization 4.0.11.\r\n  Installing System.Threading.Tasks 4.0.11.\r\n  Installing System.Resources.ResourceManager 4.0.1.\r\n  Installing System.Reflection.Emit 4.0.1.\r\n  Installing System.Reflection.TypeExtensions 4.1.0.\r\n  Installing System.Reflection.Emit.ILGeneration 4.0.1.\r\n  Installing System.Reflection.Emit.Lightweight 4.0.1.\r\n  Installing System.AppContext 4.1.0.\r\n  Installing System.Collections.Concurrent 4.0.12.\r\n  Installing System.IO.FileSystem.Primitives 4.0.1.\r\n  Installing System.Runtime.Numerics 4.0.1.\r\n  Installing System.Security.Cryptography.Primitives 4.0.0.\r\n  Installing System.Xml.XDocument 4.0.11.\r\n  Installing System.Text.RegularExpressions 4.1.0.\r\n  Installing Microsoft.Win32.Primitives 4.0.1.\r\n  Installing System.Console 4.0.0.\r\n  Installing System.Diagnostics.Tools 4.0.1.\r\n  Installing System.Diagnostics.Tracing 4.1.0.\r\n  Installing System.Globalization.Calendars 4.0.1.\r\n  Installing System.IO.FileSystem 4.0.1.\r\n  Installing System.Net.Sockets 4.1.0.\r\n  Installing System.Text.Encoding 4.0.11.\r\n  Installing System.Threading.Timer 4.0.1.\r\n  Installing System.Net.Primitives 4.0.11.\r\n  Installing System.Runtime.Handles 4.0.1.\r\n  Installing System.Text.Encoding.Extensions 4.0.11.\r\n  Installing System.IO.Compression.ZipFile 4.0.1.\r\n  Installing System.IO.Compression 4.1.0.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.props.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.targets.\r\n  Restore completed in 44.04 sec for /mvcapp/mvcapp.csproj.\r\n\r\nRestore succeeded.\r\n\r\n\r\nreal    1m8.386s\r\nuser    1m8.010s\r\nsys     0m18.190s\r\nroot@9d1d5e45df6a:/# cd mvcapp/\r\nroot@9d1d5e45df6a:/mvcapp# time dotnet build\r\nMicrosoft (R) Build Engine version 15.7.179.6572 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 557.76 ms for /mvcapp/mvcapp.csproj.\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.dll\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.Views.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:02:07.34\r\n\r\nreal    2m11.716s\r\nuser    1m22.990s\r\nsys     0m8.880s\r\nroot@9d1d5e45df6a:/mvcapp#\r\n```\r\n","Url":"https://github.com/dotnet/announcements/issues/80","RelatedDescription":"Closed issue \"Improving Performance of ARM32 Docker Images with .NET Core Package Cache\" (#80)"},{"Id":"350233220","IsPullRequest":false,"CreatedAt":"2018-08-13T23:50:57","Actor":"richlander","Number":"81","RawContent":null,"Title":"Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+","State":"open","Body":"# Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+\r\n\r\nAn [issue with serializing/deserializing a CultureAwareComparer](https://github.com/Microsoft/dotnet/blob/master/releases/net471/KnownIssues/521954%20-%20BCL%20CultureAwareComparer%20with%20ignore%20casing%20on%20serialized%20on%20previous%20versions%20of%20.NET%20do%20not%20correctly%20deserialize%20on%20.NET%204.7.1.md) was discovered with [.NET Framework 4.7.1](https://blogs.msdn.microsoft.com/dotnet/2017/10/17/announcing-the-net-framework-4-7-1/). This issue was resolved earlier this year, with the [May 2018 Preview of Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/15/net-framework-may-2018-preview-of-quality-rollup/). We recently learned that some applications, including Johnson Controls’ C-CURE 9000 Software, were negatively impacted by this change as this update requires all client and server workstations to be updated simultaneously with the appropriate Microsoft updates. The changes made to .NET Framework 4.7.1 were also integrated into .NET Framework 4.6 and later servicing releases. As a result, this advisory applies to .NET Framework 4.6 and later versions.\r\n\r\nThis advisory is provided so that developers can correctly diagnose this issue and be aware of our guidance. We will continue to update this issue as we have new information to share.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [microsoft/dotnet #832](https://github.com/Microsoft/dotnet/issues/832)\r\n\r\n## Guidance\r\n\r\nThis guidance only applies to customers that have experienced this issue.\r\n\r\nWe have released [an update for .NET Framework 4.6](https://blogs.msdn.microsoft.com/dotnet/2018/08/30/net-framework-august-2018-preview-of-quality-rollup/) and later that resolves the issue. **You must deploy the .NET Framework update for this issue to all .NET Framework 4.6+ machines that communicate via serialized objects**. After doing that, cross-machine serialization will work as expected. \r\n \r\nPlease consult your software vendor to understand if this impacts the software you are using.\r\n\r\n## Technical Context\r\n\r\nIn the [May 2018 Preview of Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/15/net-framework-may-2018-preview-of-quality-rollup/), we made a change to the internal type CultureAwareComparer to implement ISerializable. We made the change in order to address [issue with serializing/deserializing a CultureAwareComparer](https://github.com/Microsoft/dotnet/blob/master/releases/net471/KnownIssues/521954%20-%20BCL%20CultureAwareComparer%20with%20ignore%20casing%20on%20serialized%20on%20previous%20versions%20of%20.NET%20do%20not%20correctly%20deserialize%20on%20.NET%204.7.1.md).\r\n\r\nThe issue reported was that a type that contains an instance of CultureAwareComparer was not able to correctly serialize and deserialize across different versions of the .NET Framework. There are a few types in .NET Framework that do this, the most commonly impacted one being the Dictionary<TKey, TValue> type.\r\n \r\nThe change to implement the ISerializable interface had unintended side effects when exchanging this type across different machines. We have had a small number of reports from customers who have been affected.\r\n\r\nA common, but not unique way, of exchanging objects across machines is to use WCF in conjunction with a serializer. One of the common serializers being DataContractSerializer. The side-effect of the change prevented data serialized on systems where the type implements ISerializable to correctly deserialize of systems where the type does NOT implement ISerializable. The same is true of the opposite case, that systems where the type does not implement ISerializable will not correctly deserialize data from systems where the type does implement ISerializable.\r\n\r\nWe have an updated fix that we intend to release within the next month that will remove the implementation of the ISerializable interface on the type and use a different internal mechanism for ensuring the cross-version serialization continues to work as expected. This change addresses the break experienced with WCF.\r\n\r\nThe upcoming fix will remove the implementation of the ISerializable interface on the type and use a different mechanism for ensuring the cross-version serialization of that type continues to work. This change addresses the break experienced with WCF.\r\n\r\n## Symptoms\r\n\r\nAn application that is affected by this issue will most likely crash when trying to deserialize an object. It may print or log an error message similar to the following one:\r\n\r\n```\r\nThe formatter threw an exception while trying to deserialize the message: \r\nThere was an error while trying to deserialize parameter . The InnerException message was ''EndElement' 'Comparer' from namespace '' is not expected. Expecting element '_compareInfo'.'.  Please see InnerException for more details.\r\n```\r\n","Url":"https://github.com/dotnet/announcements/issues/81","RelatedDescription":"Open issue \"Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+\" (#81)"},{"Id":"348162872","IsPullRequest":false,"CreatedAt":"2018-08-07T04:26:40","Actor":"richlander","Number":"79","RawContent":null,"Title":"August 2018 .NET Updates","State":"open","Body":"# August 2018 .NET Updates\r\n\r\nThe following .NET updates were released in August 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework \r\n\r\n* [August 2018 .NET Framework Security and Quality Rollup - August 14, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/08/14/august-2018-security-and-quality-rollup/)\r\n* [Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+](https://github.com/dotnet/announcements/issues/81)\r\n* [Advisory on July 2018 .NET Framework Updates](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/)\r\n* [August 2018 Preview of Quality Rollup - August 30, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/08/30/net-framework-august-2018-preview-of-quality-rollup/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core August 2018 Update - August 21, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.3/2.1.3.md)\r\n* [.NET Core 2.1.400 SDK Update - August 14, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.400-SDK/2.1.400-sdk.md)\r\n\r\n## End of Support for Operating System Versions\r\n\r\n.NET Core does not support systems that are out of support. The following operating systems are now out of support. To stay supported, move to a [later version of the given operating system](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md).\r\n\r\n* [Debian 8 -- Jessie](https://lists.debian.org/debian-security-announce/2018/msg00132.html)\r\n* [Ubuntu 17.10 -- Artful Aardvark](https://lists.ubuntu.com/archives/ubuntu-announce/2018-July/000232.html)\r\n\r\nSee [Debian Jessie End of Life -- Impact on .NET Core Docker Images](https://github.com/dotnet/announcements/issues/78)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/79","RelatedDescription":"Open issue \"August 2018 .NET Updates\" (#79)"},{"Id":"348161534","IsPullRequest":false,"CreatedAt":"2018-08-07T04:18:01","Actor":"richlander","Number":"78","RawContent":null,"Title":"Debian Jessie End of Life -- Impact on .NET Core Docker Images","State":"open","Body":"# Debian Jessie End of Life -- Impact on .NET Core Docker Images\r\n\r\nDebian Jessie (AKA Debian 8) is now [out of support](https://lists.debian.org/debian-security-announce/2018/msg00132.html). Debian Jessie is no longer a supported operating system for .NET Core. Docker users need to switch to Debian Stretch-based (AKA Debian 9) images to stay in support.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #647](https://github.com/dotnet/dotnet-docker/issues/647)\r\n\r\n## Context\r\n\r\nJessie-based images are currently provided for .NET Core 1.0, 1.1 and 2.0. .NET Core 1.0 and 1.1 expose multi-arch tags, such as `1.0-runtime` and `1.1-sdk`, that support Debian Jessie. When pulled for a Linux Docker daemon (on Linux or Windows), these tags pull Jessie-based images. .NET Core 2.0 supports Jessie, but it is not the default. .NET Core 2.0 multi-arch tags, such as `2.0-runtime` and `2.0-sdk`, pull Debian Stretch-based images, when pulled for a Linux Docker daemon. We made a conscious decision with .NET Core 2.0 to move off of Jessie as the default to avoid this problem, based the Jessie 2018 EOL date. .NET Core 2.1 does not support Jessie, only Stretch.\r\n\r\nWe recently posted about our policy for underlying operating system dependencies with Docker:\r\n\r\n> For each major and minor .NET version, we may take a new major operating system version dependency. As I mentioned earlier, we adopted Debian 9 as the base image for .NET Core 2.0. We stayed with Debian 9 for .NET Core 2.1, since Debian 10 (AKA “Buster”) has not been released. Debian 9 will remain the default base image for .NET Core 2.1 for the life of .NET Core 2.1. **Once we adopt an underlying operating system major version, we will not change it for the life of that given .NET release.**\r\n\r\nSource: https://blogs.msdn.microsoft.com/dotnet/2018/06/18/staying-up-to-date-with-net-container-images/\r\n\r\n## Plan\r\n\r\nWe will continue to re-build .NET Core 1.0 and 1.1 multi-arch tags on top of Jessie for the remaining [supported lifetime of .NET Core 1.0 and 1.1](https://github.com/dotnet/core/blob/master/microsoft-support.md). We will also provide a Stretch-based image for .NET Core 1.1. This tag will look like the following: `1.1-runtime-stretch` or `1.1.9-sdk-stretch`. This is same format that Jessie has used.\r\n\r\nWe will produce Jessie-based images for NET Core 2.0 until October 2018, which is when [.NET Core 2.0 support ends](https://github.com/dotnet/core/blob/master/microsoft-support.md). .NET Core 2.0 multi-arch tags support Debian Stretch, not Jessie, as described above.\r\n\r\nIn summary, .NET Core is no longer supported on Debian Jessie, with Docker or otherwise. We will produce Docker images for Jessie until .NET Core 1.0, 1.1 and 2.0 support ends, respectively, to avoid breaking applications. This aligns with the policy defined above, per [Staying up-to-date with .NET Container Images](https://blogs.msdn.microsoft.com/dotnet/2018/06/18/staying-up-to-date-with-net-container-images/).\r\n\r\n## Affected Repos\r\n\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/)\r\n* [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/)\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)","Url":"https://github.com/dotnet/announcements/issues/78","RelatedDescription":"Open issue \"Debian Jessie End of Life -- Impact on .NET Core Docker Images\" (#78)"},{"Id":"345028102","IsPullRequest":false,"CreatedAt":"2018-07-26T22:31:32","Actor":"leecow","Number":"77","RawContent":null,"Title":"https://dot.net now using TLS 1.2-only","State":"open","Body":"Earlier today, https://dot.net switched to using TLS 1.2-only. Most Windows Powershell instances default to TLS 1.1 and will thus fail with `wget : The underlying connection was closed: An unexpected error occurred on a send. trying to run the previous command.`\r\n\r\nAn example of a PowerShell script fix can be seen in https://github.com/dotnet/docs/pull/6689","Url":"https://github.com/dotnet/announcements/issues/77","RelatedDescription":"Open issue \"https://dot.net now using TLS 1.2-only\" (#77)"},{"Id":"343360319","IsPullRequest":false,"CreatedAt":"2018-07-21T22:29:05","Actor":"richlander","Number":"76","RawContent":null,"Title":"July 2018 .NET Updates","State":"open","Body":"# July 2018 .NET Updates\r\n\r\nThe following .NET updates were released in June 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework \r\n\r\n* [.NET Framework 4.7.2 is available on Windows Update, WSUS and MU Catalog](https://blogs.msdn.microsoft.com/dotnet/2018/07/10/net-framework-4-7-2-is-available-on-windows-update-wsus-and-mu-catalog/)\r\n* [Announcing .NET Framework 4.8 Early Access build 3632](https://blogs.msdn.microsoft.com/dotnet/2018/07/18/announcing-net-framework-4-8-early-access-build-3632/)\r\n* [Advisory on July 2018 .NET Framework Updates](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/)\r\n* [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/10/net-core-july-2018-update/)\r\n\r\n## .NET Core Support Policies\r\n\r\n* [Microsoft Support for .NET Core](https://github.com/dotnet/core/blob/master/microsoft-support.md)\r\n* [.NET Core Supported OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)\r\n* [April 2018](https://github.com/dotnet/announcements/issues/64)\r\n","Url":"https://github.com/dotnet/announcements/issues/76","RelatedDescription":"Open issue \"July 2018 .NET Updates\" (#76)"},{"Id":"343360017","IsPullRequest":false,"CreatedAt":"2018-07-21T22:22:25","Actor":"richlander","Number":"75","RawContent":null,"Title":"June 2018 .NET Updates","State":"open","Body":"# June 2018 .NET Updates\r\n\r\nThe following .NET updates were released in June 2018.\r\n\r\n## .NET Framework \r\n\r\n* [.NET Framework June 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/06/13/net-framework-june-2018-security-and-quality-rollup/)\r\n* [Announcing .NET Framework 4.8 Early Access build 3621!](https://blogs.msdn.microsoft.com/dotnet/2018/06/06/announcing-net-framework-4-8-early-access-build-3621/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core 2.1 June Update](https://blogs.msdn.microsoft.com/dotnet/2018/06/22/net-core-2-1-june-update/)\r\n* [.NET Core 2.0 will reach End of Life on October 1, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n* [.NET Core 1.0 and 1.1 EOL Dates Documented](https://github.com/dotnet/core/blob/master/microsoft-support.md)\r\n\r\n## Previous Updates\r\n\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)\r\n* [April 2018](https://github.com/dotnet/announcements/issues/64)\r\n* [February 2018](https://github.com/dotnet/announcements/issues/59)","Url":"https://github.com/dotnet/announcements/issues/75","RelatedDescription":"Open issue \"June 2018 .NET Updates\" (#75)"},{"Id":"343283437","IsPullRequest":false,"CreatedAt":"2018-07-21T00:56:48","Actor":"richlander","Number":"74","RawContent":null,"Title":"Advisory on July 2018 .NET Framework Updates","State":"open","Body":"# Advisory on July 2018 .NET Framework Updates\r\n\r\nUpdated: 08/14/2018\r\n\r\n> A new [.NET Framework August 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/08/14/august-2018-security-and-quality-rollup/) has been released that **resolves this advisory for all supported Windows versions**.\r\n\r\n~~A new [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/) has been released that resolves this advisory. See Guidance section.~~\r\n\r\n~~Guidance has changed for Windows 7, Windows Server 2008 and Windows Server 2008 R2. See Guidance section.~~\r\n\r\nThe [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356) was released earlier this month. We have received multiple customer reports of [applications that fail to start or don't run correctly](https://support.microsoft.com/en-us/help/4345913) after installing the July 2018 update. These reports are specific to applications that initialize a COM component and run with restricted permissions.\r\n\r\nWe have stopped distributing the .NET Framework July 2018 updates on Windows Update and are actively working on fixing and re-shipping this month's updates. If you installed the July 2018 update and have not yet seen any negative behavior, we recommend that you leave your systems as-is but closely monitor them and ensure that you apply upcoming .NET Framework updates.\r\n\r\nAs a team, we regret that this release was shipped with this flaw. This release was tested using our regular and extensive testing process. We discovered while investigating this issue that we have a test hole for the specific combination of COM activation and restricted permissions, including impersonation. We will be mitigating that gap going forward. Again, we are sorry for any inconvenience that this product flaw has caused.\r\n\r\nWe will continue to update this issue and [post](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/) as we have new information.\r\n\r\n## Discussion\r\nPlease share your thoughts/experience on this advisory and see what others are saying at:\r\n\r\n* [microsoft/dotnet #811](https://github.com/Microsoft/dotnet/issues/811)\r\n\r\n## Guidance\r\n\r\nWe strongly recommend that you install [.NET Framework August 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/08/14/august-2018-security-and-quality-rollup/).\r\n\r\n~~We recommend that you install [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/) on your systems if you experienced the symptoms described in this advisory. If you did not experience these symptoms, we recommend you wait to update your machines until the next regular update, in August.~~\r\n\r\n~~On Windows 7, Windows Server 2008, and Windows Server 2008 R2, we have found that the combination of [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356) and  [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/) do not resolve all symptoms. On these Windows versions, if you are experiencing these symptoms after installing this combination of patches, we recommend that you uninstall (only) the Monthly Rollup patch and then install the appropriate Security Only patch listed at [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356).~~\r\n\r\n## Technical Context\r\n\r\nThe .NET Framework runtime uses the process token to determine whether the process is being run within an elevated context. These system calls can fail if the required process inspection permissions are not present. This causes an “access denied\" error.\r\n\r\n## Symptoms\r\n\r\nA COM component fails to load because of “access denied,” “class not registered,” or “internal failure occurred for unknown reasons” errors. \r\n\r\nThe most commonly reported failure results in the following error message:\r\n\r\n```console\r\nException type: System.UnauthorizedAccessException\r\nMessage: Access is denied. (Exception from HRESULT: 0x80070005 (E_ACCESSDENIED))\r\n```\r\n\r\n### Sharepoint\r\n\r\nWhen users browse to a SharePoint site they may see the following HTTP 403 message:\r\n\r\n```console\r\n\"The Web Site declined to show this webpage\"\r\n```\r\n\r\nThe SharePoint ULS Logs will contain a message like the following:  \r\n\r\n```console\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General 0000       High                UnauthorizedAccessException for the request. 403 Forbidden will be returned. Error=An error occurred creating the configuration section handler for system.serviceModel/extensions: Could not load file or assembly <AssemblySignature>  or one of its dependencies. Access is denied. (C:\\Windows\\Microsoft.NET\\Framework64\\v2.0.50727\\Config\\machine.config line 180)    \r\n\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General b6p2      VerboseEx                Sending HTTP response 403:403 FORBIDDEN.      \r\n\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General 8nca       Verbose                Application error when access /, Error=Access is denied. (Exception from HRESULT: 0x80070005 (E_ACCESSDENIED))\r\n```\r\n\r\nWhen crawling a people content source, the request may fail with the following entry logged to the SharePoint ULS Log: \r\n\r\n```console\r\nmssearch.exe (0x118C) 0x203C SharePoint Server Search Crawler:Gatherer Plugin cd11 Warning The start address sps3s://<URLtoSite> cannot be crawled.  Context: Application 'Search_Service_Application', Catalog 'Portal_Content'  Details:  Class not registered   (0x80040154)  \r\n\r\nIIS Hosted Classic ASP calling CreateObject for .NET COM objects may receive error \"ActiveX component can't create object\" \r\n\r\n.NET Application creates instance of .NET COM application within an Impersonation Context may receive error \"0x80040154 (REGDB_E_CLASSNOTREG)\"\r\n```\r\n\r\n### BizTalk Server Administration Console\r\n\r\nBizTalk Server Administration Console fails to launch properly with the following errors: \r\n\r\n```console\r\nAn internal failure occurred for unknown reasons. (WinMgmt) \r\n\r\nProgram Location:  \r\n\r\n   at System.Runtime.InteropServices.Marshal.ThrowExceptionForHRInternal(Int32 errorCode, IntPtr errorInfo) \r\n\r\n   at System.Management.ManagementObject.Get() \r\n\r\n   at Microsoft.BizTalk.SnapIn.Framework.WmiProvider.SelectInstance\r\n```\r\n\r\n> Warning: The following workarounds may make a computer or a network more vulnerable to attack by malicious users or by malicious software such as viruses. We do not recommend these workarounds but are providing this information so that you can implement the workarounds at your own discretion. Use these workarounds at your own risk.\r\n\r\nUse the following guidance as a workaround:\r\n\r\n* Add “NETWORK SERVICE” to the local Administrators group. \r\n\r\n### IIS with Classic ASP\r\n\r\nIIS Hosted Classic ASP calling CreateObject for .NET COM objects may receive the following error: \"ActiveX component can't create object\". Use the following guidance as a workaround.\r\n\r\n* If your web site uses Anonymous Authentication, change the Web Site Anonymous Authentication credentials to use the \"Application pool identity\"\r\n* If your site uses Basic Authentication, log into the application once as the application pool identity and then create an instance of the .NET COM component. All subsequent activations for that .NET COM component should succeed, for any user.\r\n\r\n### .NET applications using COM and impersonation\r\n\r\n.NET Applications that creates instances of .NET COM application within an Impersonation Context may receive the following error: \"0x80040154 (REGDB_E_CLASSNOTREG)\". Use the following guidance as a workaround.\r\n\r\n* Create an instance of the .NET COM component prior to the impersonation context call. Later impersonated create instance calls should work as expected.\r\n* Run the .NET Application in the context of the impersonated user\r\n* Avoid using Impersonation when creating the .NET COM object","Url":"https://github.com/dotnet/announcements/issues/74","RelatedDescription":"Open issue \"Advisory on July 2018 .NET Framework Updates\" (#74)"},{"Id":"339929129","IsPullRequest":false,"CreatedAt":"2018-07-10T17:00:37","Actor":"blowdart","Number":"73","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core does not correctly validate certificates. An attacker who successfully exploited this vulnerability could present an expired certificate when challenged.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handle certificate validation.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/wcf/issues/3009\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\n* If an application does not use Windows Communication Foundation you are not affected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core, or ASP.NET Core based application that uses System.Private.ServiceModel with a version of 4.5.1 or earlier.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Private.ServiceModel | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 |  4.1.3 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Duplex | 4.0.0, 4.0.1, 4.0.2 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.0.4 or later <br /> 4.3.3 or later <br /> 4.443 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Http | 4.0.0, 4.0.10, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.3 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.NetTcp | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.3 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Primitives | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.2 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Security | 4.0.0, 4.0.1, 4.0.2 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.0.4 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n### <a name=\"project-format\"></a>.NET Core Project formats\r\n\r\n.NET Core has two different project file formats, depending on what software created the project.\r\n\r\n1. `project.json` is the format used in .NET Core 1.0 and Microsoft Visual Studio 2015.\r\n2. `csproj` is the format used in .NET Core 1.1, .NET Core 2.0 and Microsoft Visual Studio 2017.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file or your `project.json` file. They can be fixed by [editing the project file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n The `System.Private.ServiceModel` package is not meant to be directly depended on and will not appear in your direct dependency list.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in three ways, depending on your [project format](#project-format):\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects *OR*.\r\n* By examining the `project.lock.json` file contained in the root directory of your project for `project.json` based projects.\r\n\r\nThe `project.assets.json` and `project.lock.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies-vs2017\"></a>Fixing direct dependencies in a csproj based project / Visual Studio 2017\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.4.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.ServiceModel.Http` version 4.4.0.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.ServiceModel.Http` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.4.3\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"direct-dependencies-vs2015\"></a> Fixing Direct Dependencies in project.json based project / Visual Studio 2015\r\n\r\nOpen your `project.json` file in your editor. Look for the dependencies section. Below is an example dependencies section:\r\n\r\n``` json\r\n    \"dependencies\": {\r\n      \"Microsoft.NETCore.App\": {\r\n        \"version\": \"1.0.1\",\r\n        \"type\": \"platform\"\r\n      },\r\n     \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",\r\n     \"System.ServiceModel.Http\" : \"4.0.0\"\r\n    }\r\n```\r\n\r\nThis example has three direct dependencies: `Microsoft.NETCore.App`, `Microsoft.AspNetCore.Mvc.Core` and `System.ServiceModel.Http`.\r\n\r\n`Microsoft.NetCore.App` is the platform the application targets, you should ignore this. The other packages expose their version to the right of the package name. In our example, our non-platform packages are version 1.0.1.\r\n\r\nReview your direct dependencies for any instance of the packages and versions listed above. In the example above, there is a direct dependency on a vulnerable package, `System.ServiceModel.Http` version 4.4.0.\r\n\r\nTo update to the fixed package, change the version number to be the appropriate package for your release. In the example, this would be updating `System.ServiceModel.Http` to 4.4.3.\r\n\r\nAfter updating the vulnerable package versions, save your `project.json` file.\r\n\r\nThe dependencies section in our example `project.json` would now look as follows:\r\n\r\n```json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",\r\n    \"System.ServiceModel.Http \": \"4.4.3\"\r\n  }\r\n```\r\n\r\nIf you are using Visual Studio and save your updated `project.json` file, Visual Studio will restore the new package version. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependency.\r\n\r\nAfter you have addressed all of your direct dependencies, you must also review your transitive dependencies.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json) or the [the `project.lock.json` file](#project-lock-json).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json (csproj/VS2017)\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.ServiceModel.Http/4.3.0` is a reference to version 4.3.0 of `System.ServiceModel.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.3.2\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### <a name=\"project-lock-json\"></a> Manually reviewing project.lock.json (project.json/VS2015)\r\n\r\nOpen the `project.lock.json` file in your editor. We suggest you use an editor that understands json and allows you to collapse and expand nodes to review this file; both Visual Studio and Visual Studio Code provide this functionality.\r\n\r\nIf you are using Visual Studio the `project.lock.json` file is “under” the `project.json` file. Click the right pointing triangle, ▷, to the left of the `project.json` file to expand the solution tree to expose the `project.lock.json` file. The following image shows a project with the `project.json` file expanded to show the `project.lock.json` file.\r\n\r\n![project lock json](https://cloud.githubusercontent.com/assets/796298/25858179/f6e01200-348f-11e7-8a77-7176d8dd3f03.png)\r\n\r\nSearch the `project.lock.json` file for the vulnerable packages, using the format `packagename/`, using each of the package names from the table above. If you find any vulnerable assembly name in your search examine the line on which they are found, the version number is after the `/` and compare to the vulnerable versions table above. For example a search result that shows `System.ServiceModel.Http/4.0.1` is a reference to v4.0.1 of `System.ServiceModel.Http`.   If your `project.lock.json` file includes references to any of the package versions shown above then you will need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to a vulnerable version of `System.ServiceModel.Http` this means none of your direct dependencies depend on any vulnerable packages or you have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your `project.json` file to override the transitive dependency. Open your `project.json` and find the dependencies section. For example:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nFor each of the vulnerable packages your search returned you must add a direct dependency to the updated version by adding it to the `project.json` file. You do this by adding a new line to the dependencies section, referring the fixed version. For example, if your search showed a transitive reference to the vulnerable `System.ServiceModel.Http` version 1.0.0 you would add a reference to the appropriate fixed version, 1.0.6. Edit the `project.json` file as follows:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"System.ServiceModel.Http\": \"4.1.2\",\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nAfter you have added direct dependencies to the fixed packages, save your `project.json` file.\r\n\r\nIf you are using Visual Studio save your updated `project.json` file and Visual Studio will restore the new package versions. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8356](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8356)\r\n\r\n### Revisions\r\n\r\nV1.1 (July 23, 2018): Updated package versions, as some assemblies were released unsigned.\r\nV1.0 (July 10, 2018): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2018-07-23_\r\n","Url":"https://github.com/dotnet/announcements/issues/73","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability\" (#73)"},{"Id":"329614193","IsPullRequest":false,"CreatedAt":"2018-06-05T20:33:10","Actor":"huanwu","Number":"72","RawContent":null,"Title":"Introducing dotnet-svcutil.xmlserializer for .NET Core","State":"open","Body":"# Introducing dotnet-svcutil.xmlserializer for .NET Core\r\nOn the full .NET Framework you are able to pre-generate a serialization assembly using the tool svcutil. We are providing similar functionality on .NET Core by releasing the dotnet-svcutil.xmlserializer NuGet package. It pre-generates c# serialization code for the types used by WCF Service Contract in the client applications that can be serialized using the XmlSerializer to improve the startup performance of Xml Serialization when serializing or de-serializing objects of those types using XmlSerializer. \r\nYou can start using the tool today by following the [instructions](https://github.com/dotnet/core/blob/master/samples/dotnet-svcutil.xmlserializer-instructions.md). \r\n\r\n## Discussion \r\nPlease share with us any thoughts of questions that you may have at: \r\n\r\n- dotnet/wcf [#2927](https://github.com/dotnet/wcf/issues/2927)\r\n## Details \r\nWhen to use XmlSerializer with WCF in an app to serialize contract data types, it will generate an XmlSerializer during runtime to do the serialization. You can improve the startup performance of Xml serialization by simply adding the reference of dotnet-svcutil.xmlserializer NuGet package to your project. This tool will generate the serialization code and compile it into an assembly next to your output assembly at build time in advance. This assembly can then be deployed and ran with your application. \r\n\r\nPlease create an issue with your feedback at [dotnet/wcf](https://github.com/dotnet/wcf/issues). We are actively looking to improve the tool and your input is a valuable part of the process. ","Url":"https://github.com/dotnet/announcements/issues/72","RelatedDescription":"Open issue \"Introducing dotnet-svcutil.xmlserializer for .NET Core\" (#72)"},{"Id":"327817883","IsPullRequest":false,"CreatedAt":"2018-05-30T17:02:38","Actor":"MichaelSimons","Number":"71","RawContent":null,"Title":".NET Core 2.1 Docker Image Updates","State":"open","Body":"# .NET Core 2.1 Docker Image Updates\r\n\r\nWe have consolidating the set of Docker Hub repositories that we use for .NET Core and ASP.NET Core. We will use [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) as the only repository that we publish to for .NET Core 2.1 and later releases.\r\n\r\nWe added a set of environment variables to .NET Core images to make it easier to host ASP.NET Core sites at any .NET Core image layer and to enable `dotnet watch` in SDK container images without additional configuration.\r\n\r\nAlpine and ARM32 image variants have been added and are supported.\r\n\r\n[.NET Core Docker Samples](https://github.com/dotnet/dotnet-docker/blob/master/samples/README.md) have been moved to the [dotnet/dotnet-docker](https://github.com/dotnet/dotnet-docker) repo. The samples have been updated for .NET Core 2.1. New samples have been added, including [Hosting ASP.NET Core Images with Docker over HTTPS](https://github.com/dotnet/dotnet-docker/blob/master/samples/aspnetapp/aspnetcore-docker-https.md).\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #560](https://github.com/dotnet/dotnet-docker/issues/560)\r\n\r\n## Details\r\n\r\nThe following changes have been made as part of the .NET Core 2.1 release.\r\n\r\n### Repo consolidation\r\n\r\n.NET Core and ASP.NET Core images will be published to the [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) Docker Hub repo for .NET Core 2.1 and later releases. Co-location of images improves image discovery. The .NET Core runtime and SDK images are already co-located. We are adding the ASP.NET Core runtime images to the [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) repo as a third image type. We are [no longer producing the microsoft/aspnetcore-build image](https://github.com/aspnet/Announcements/issues/298) with .NET Core 2.1.\r\n\r\nThe following three tags are now available at the [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) repo:\r\n\r\n* `2.1-sdk`\r\n* `2.1-aspnetcore-runtime`\r\n* `2.1-runtime`\r\n\r\n### Environment variables enable new scenarios\r\n\r\nWe added a set of environment variables to .NET Core docker images, for .NET Core 2.1 and later. These environment variables enable more scenarios to work without additional configuration, such as [developing ASP.NET Core applications in a container](https://github.com/dotnet/dotnet-docker/blob/master/samples/aspnetapp/aspnet-docker-dev-in-container.md).\r\n\r\nNew sdk image environment variables ([example](https://github.com/dotnet/dotnet-docker/blob/master/2.1/sdk/bionic/amd64/Dockerfile#L28-L32))\r\n* `ASPNETCORE_URLS=http://+:80`\r\n* `DOTNET_RUNNING_IN_CONTAINER=true`\r\n* `DOTNET_USE_POLLING_FILE_WATCHER=true`\r\n\r\nNew Linux runtime-deps image environment variables ([example](https://github.com/dotnet/dotnet-docker/blob/master/2.1/runtime-deps/alpine3.7/amd64/Dockerfile#L19-L21))\r\n* `ASPNETCORE_URLS=http://+:80`\r\n* `DOTNET_RUNNING_IN_CONTAINER=true`\r\n\r\nNew Windows runtime image environment variables ([example](https://github.com/dotnet/dotnet-docker/blob/master/2.1/runtime/nanoserver-1709/amd64/Dockerfile#L33-L35))\r\n* `ASPNETCORE_URLS=http://+:80`\r\n* `DOTNET_RUNNING_IN_CONTAINER=true`\r\n\r\n### New image variants\r\n\r\nAlpine and ARM32 image variants have been added and are supported as part of the .NET Core 2.1 release. \r\n\r\nFor Alpine, you must [use specific tags to create Alpine-based images](https://github.com/dotnet/dotnet-docker/blob/master/samples/dotnetapp/README.md#build-and-run-the-sample-for-alpine-with-docker), such as `2.1-runtime-alpine`. \r\n\r\nFor ARM32, you can use the regular multi-arch tags, like `2.1-runtime` and `2.1-sdk` if you are building on an ARM32 device. If you are building on another type of machine, you need to use ARM32-specific tags for the runtime images you create, such as `2.1-runtime-bionic-arm32v7` (for Ubuntu 18.04).\r\n\r\n### Related repos\r\n\r\nThe following repos are related to this announcement:\r\n\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)\r\n* [microsoft/dotnet/](https://hub.docker.com/r/microsoft/dotnet/)\r\n","Url":"https://github.com/dotnet/announcements/issues/71","RelatedDescription":"Open issue \".NET Core 2.1 Docker Image Updates\" (#71)"},{"Id":"325815293","IsPullRequest":false,"CreatedAt":"2018-05-23T18:04:46","Actor":"mlacouture","Number":"70","RawContent":null,"Title":"Introducing dotnet-svcutil","State":"open","Body":"# Introducing dotnet-svcutil\r\n\r\nThe Microsoft Windows Communication Foundation (WCF) **dotnet-svcutil** tool is a .NET Core CLI tool that retrieves metadata from a web service on a network location or from a WSDL file, and generates a WCF class containing client proxy methods that you can use to access the web service operations.\r\n\r\nSimilarly to the [Service Model Metadata - svcutil](https://docs.microsoft.com/en-us/dotnet/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe) tool for .NET Framework projects, the **dotnet-svcutil** is a command line tool for generating a web service reference compatible with .NET Core and .NET Standard projects. \r\n\r\nThe **dotnet-svcutil** tool is an alternative option to the [WCF Web Service Reference ](https://docs.microsoft.com/en-us/dotnet/core/additional-tools/wcf-web-service-reference-guide)Visual Studio connected service provider which first shipped with Visual Studio 2017 v15.5.  The **dotnet-svcutil** tool as a .NET Core CLI tool, however, can be run on multiple platforms like Linux and MacOS in addition to Windows.\r\n\r\n# Discussion\r\nPlease share your thoughts with us by commenting on GitHub issue dotnet/wcf#2894\r\n","Url":"https://github.com/dotnet/announcements/issues/70","RelatedDescription":"Open issue \"Introducing dotnet-svcutil\" (#70)"},{"Id":"321374728","IsPullRequest":false,"CreatedAt":"2018-05-08T22:56:33","Actor":"richlander","Number":"68","RawContent":null,"Title":"May 2018 .NET Updates","State":"open","Body":"# May 2018 .NET Updates\r\n\r\nThe following .NET updates were released this month. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework May 2018 Preview of Quality Rollup for Windows 10 April 2018 Update (version 1803)](https://blogs.msdn.microsoft.com/dotnet/2018/05/23/net-framework-may-2018-preview-of-quality-rollup-for-windows-10-april-2018-update-version-1803/)\r\n* [.NET Framework May 2018 Preview of Quality Rollup for Windows 10 1709 (Fall Creators Update)](https://blogs.msdn.microsoft.com/dotnet/2018/05/21/net-framework-may-2018-preview-of-quality-rollup-for-windows-10-1709-fall-creators-update/)\r\n* [.NET Framework May 2018 Security and Quality Rollup for Windows 10](https://blogs.msdn.microsoft.com/dotnet/2018/05/17/net-framework-may-2018-preview-of-quality-rollup-for-windows-10/)\r\n* [.NET Framework May 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/08/net-framework-may-2018-security-and-quality-rollup/)\r\n* [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) and related Docker images were updated for [Windows Server, version 1803](https://docs.microsoft.com/en-us/windows-server/get-started/get-started-with-1803).\r\n\r\n## .NET Core\r\n\r\n* [Announcing .NET Core 2.1](https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-net-core-2-1/)\r\n* [.NET Core May 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/05/08/net-core-may-2018-update/)\r\n* [.NET Core 2.1 RC1](https://blogs.msdn.microsoft.com/dotnet/2018/05/07/announcing-net-core-2-1-rc-1/)\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) and related Docker images were updated for [Windows Server, version 1803](https://docs.microsoft.com/en-us/windows-server/get-started/get-started-with-1803).\r\n\r\n## Previous Updates\r\n\r\n* [April 2018 .NET Updates](https://github.com/dotnet/announcements/issues/64)\r\n* [February 2018 Security and Quality Updates](https://github.com/dotnet/announcements/issues/59)","Url":"https://github.com/dotnet/announcements/issues/68","RelatedDescription":"Open issue \"May 2018 .NET Updates\" (#68)"},{"Id":"321269154","IsPullRequest":false,"CreatedAt":"2018-05-08T17:03:39","Actor":"blowdart","Number":"67","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-0765: .NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-0765: .NET Core Denial Of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and .NET native version 2.0. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability that exists when .NET Framework and .NET Core improperly process XML documents. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Framework, .NET Core, or .NET native application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Framework, .NET Core, and .NET native applications handle XML document processing.\r\n\r\nIf your application is an ASP.NET Core application, developers are also advised to update to [ASP.NET Core 2.0.8](https://www.nuget.org/packages/Microsoft.AspNetCore.All/2.0.8).\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/29578\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\n* If an application does not process signed XML, it is not affected by this vulnerability.\r\n* If your application targets .NET Core 1.x or .NET native 1.x, it is not affected as the vulnerable package is not available for these platforms.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core, .NET native, or ASP.NET Core based application that uses System.Security.Cryptography.Xml with a version of 4.4.1 or earlier.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Security.Cryptography.Xml | ≤4.4.1 |  4.4.2 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n.NET Core has two types of dependencies: direct and transitive. Direct dependencies are dependencies where you specifically add a package to your project, transitive dependencies occur when you add a package to your project that in turn relies on another package.\r\n\r\nFor example, the `Microsoft.AspNetCore.Mvc` package depends on the `Microsoft.AspNetCore.Mvc.Core` package. When you add a dependency on `Microsoft.AspNetCore.Mvc` in your project, you're taking a transitive dependency on `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\nAny application that has a direct or transitive dependency on the [affected package](#affected-software) can be exposed to the vulnerability if it does not meet any of the [mitigation factors](#mitigation-factors).\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n---\r\n\r\nIf you're targeting ASP.NET Core 2.0 and using the `Microsoft.AspNetCore.All` metapackage:\r\n\r\n* Update its version number to [2.0.8](https://www.nuget.org/packages/Microsoft.AspNetCore.All/2.0.8) to pull in updated packages that update their transitive dependencies to the fixed version of `System.Security.Cryptography.Xml`.\r\n\r\n---\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your *csproj* file. They can be fixed by [editing the csproj file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the *project.assets.json* file contained in the obj directory of your project.\r\n\r\nThe *project.assets.json* files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Security.Cryptography.Xml\" Version=\"4.4.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Security.Cryptography.Xml` version 4.4.1.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.Security.Cryptography.Xml` to a [fixed package number](#affected-software). Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Security.Cryptography.Xml\" Version=\"4.4.2\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can [review the *project.assets.json* file](#project-assets-json).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio 2017, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a>Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Security.Cryptography.Xml/4.4.0` is a reference to version 4.4.0 of `System.Security.Cryptography.Xml`.\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\n##### Fixing transitive dependencies\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.Security.Cryptography.Xml` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Security.Cryptography.Xml\" Version=\"4.4.2\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n---\r\n\r\nIf you're targeting .NET native for a Universal Windows Platform (UWP) application, you should update your dependencies and republish your application.\r\n\r\nIf you submit an application to the Windows Store with an outdated reference, the store will update the reference automatically, which has the potential for compatibility issues. Thus, we recommend updating your application directly and testing its functionality before resubmitting.\r\n\r\n---\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-0787](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-0765)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 8, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-05-08_","Url":"https://github.com/dotnet/announcements/issues/67","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-0765: .NET Core Denial Of Service Vulnerability\" (#67)"},{"Id":"319701474","IsPullRequest":false,"CreatedAt":"2018-05-02T20:31:57","Actor":"MichaelSimons","Number":"66","RawContent":null,"Title":".NET Framework Docker Samples have moved","State":"open","Body":"# .NET Framework Docker Samples have moved\r\nThe .NET Framework Docker samples have moved to the [samples folder of Microsoft/dotnet-framework-docker](https://github.com/Microsoft/dotnet-framework-docker/tree/master/samples).\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker #128](https://github.com/Microsoft/dotnet-framework-docker/issues/128)\r\n\r\n## Details\r\nThe .NET Framework Docker samples have been enhanced and moved to the [samples folder of Microsoft/dotnet-framework-docker](https://github.com/Microsoft/dotnet-framework-docker/tree/master/samples).\r\n\r\n- https://github.com/Microsoft/dotnet-framework-docker/pull/126\r\n- https://github.com/Microsoft/dotnet-framework-docker-samples/issues/22\r\n\r\nThe samples show various ways to use the .NET Framework and Docker together. You can use the samples as the basis of your own Docker images or just to play.\r\n\r\nThe samples exercise various levels of functionality. The [.NET Framework Docker sample](https://github.com/Microsoft/dotnet-framework-docker/blob/master/samples/dotnetapp/README.md) includes the most functionality, including build, unit testing, and pushing images to a container registry. The [ASP.NET Docker sample](https://github.com/Microsoft/dotnet-framework-docker/blob/master/samples/aspnetapp/README.md) includes instructions for testing images with [Azure Container Instances](https://azure.microsoft.com/services/container-instances/). The samples include detailed instructions for use with and without Docker.\r\n","Url":"https://github.com/dotnet/announcements/issues/66","RelatedDescription":"Open issue \".NET Framework Docker Samples have moved\" (#66)"},{"Id":"319700544","IsPullRequest":false,"CreatedAt":"2018-05-02T20:28:55","Actor":"MichaelSimons","Number":"65","RawContent":null,"Title":".NET Framework Runtime and Builder Docker repos have merged ","State":"open","Body":"# .NET Framework Runtime and Builder Docker repos have merged\r\n\r\nThe [microsoft/dotnet-framework-build](https://hub.docker.com/r/microsoft/dotnet-framework-build/) Docker Hub repo has been merged into the [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) Docker Hub repo.  All new tags going forward will only be pushed to [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/).  The images in the [microsoft/dotnet-framework-build](https://hub.docker.com/r/microsoft/dotnet-framework-build/) Docker Hub repo will be retained and serviced accordingly as to not affect existing usage.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker #125](https://github.com/Microsoft/dotnet-framework-docker/issues/125)\r\n\r\n## Details\r\n\r\nThe [microsoft/dotnet-framework-build](https://hub.docker.com/r/microsoft/dotnet-framework-build/) Docker Hub repo has been merged into the [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) Docker Hub repo.\r\n\r\n* https://github.com/Microsoft/dotnet-framework-docker/pull/123\r\n* https://github.com/Microsoft/dotnet-framework-docker/issues/78\r\n\r\nIn order to differentiate the runtime and build images, `runtime` and `sdk` distinguishing identifiers have been added to the tags.  For example, `4.7.2-runtime` and `4.7.2-sdk`.\r\n\r\nAll new tags going forward will only be pushed to [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/).   For example, the build images for 4.7.2 which was released today, only exist in [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) repo.\r\n\r\nThe existing tags in [microsoft/dotnet-framework-build](https://hub.docker.com/r/microsoft/dotnet-framework-build/) will remain and be serviced accordingly.  For example, the stable tags such as `4.7.1-windowsservercore-1709` will continue to be patched on a monthly basis.\r\n\r\nWe recommend that as you create and maintain your code, you move to use the new `runtime` and `sdk` images from the [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) repo.\r\n","Url":"https://github.com/dotnet/announcements/issues/65","RelatedDescription":"Open issue \".NET Framework Runtime and Builder Docker repos have merged \" (#65)"},{"Id":"315285808","IsPullRequest":false,"CreatedAt":"2018-04-18T00:20:13","Actor":"richlander","Number":"64","RawContent":null,"Title":"April 2018 .NET Updates","State":"open","Body":"# April 2018 .NET Updates\r\n\r\nThe following .NET updates were released this month. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework\r\n\r\n* [Announcing the .NET Framework 4.7.2](https://blogs.msdn.microsoft.com/dotnet/2018/04/30/announcing-the-net-framework-4-7-2/)\r\n* No new patch releases. See: [.NET Framework February 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/02/13/net-framework-february-2018-security-and-quality-rollup/).\r\n* [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) and related Docker images were updated for [KB4093112](https://support.microsoft.com/help/4093112) and associated updates.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core April 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/04/17/net-core-april-2018-update/)\r\n   * [2.0.7 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.0/2.0.7.md)\r\n   * [1.1.8 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.8.md)\r\n   * [1.0.11 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.11.md)\r\n* [.NET Core 2.1 Preview 2](https://blogs.msdn.microsoft.com/dotnet/2018/04/11/announcing-net-core-2-1-preview-2/)\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) and related Docker images were updated for [KB4093112](https://support.microsoft.com/help/4093112) and associated updates.\r\n* Latest .NET Core security release: [.NET Core March 2018 Update](https://github.com/dotnet/core/issues/1341)\r\n\r\n## .NET for UWP\r\n\r\n* No new releases. See: [.NET for UWP January 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-for-uwp-january-2018-update/).\r\n\r\n## Previous Updates\r\n\r\n* [February 2018 Security and Quality Updates](https://github.com/dotnet/announcements/issues/59)","Url":"https://github.com/dotnet/announcements/issues/64","RelatedDescription":"Open issue \"April 2018 .NET Updates\" (#64)"},{"Id":"305721744","IsPullRequest":false,"CreatedAt":"2018-03-15T21:13:36","Actor":"mairaw","Number":"63","RawContent":null,"Title":"Transport Layer Security (TLS) best practices with the .NET Framework article published","State":"open","Body":"# Transport Layer Security (TLS) best practices with the .NET Framework article published\r\n\r\nA new article was published that discusses the Transport Layer Security (TLS) best practices for .NET Framework applications at https://docs.microsoft.com/dotnet/framework/network-programming/tls.\r\n\r\nTo ensure .NET Framework applications remain secure, the TLS version should **not** be hardcoded. .NET Framework applications should use the TLS version the operating system (OS) supports.\r\n\r\nThe (TLS) best practices article targets developers who are:\r\n* Directly using the System.Net APIs (for example, `System.Net.Http.HttpClient` and `System.Net.Security.SslStream`).\r\n* Directly using WCF clients and services using the `System.ServiceModel` namespace.\r\n* Using [Azure Cloud Services](https://azure.microsoft.com/services/cloud-services/) Web and Worker roles to host and run your application. See the [Azure Cloud Services](https://docs.microsoft.com/dotnet/framework/network-programming/tls#azure-cloud-services) section.\r\n\r\nThe article explains how to enable the strongest security available for the version of the .NET Framework that your app targets and runs on.\r\n\r\nThe section [Audit your code and make code changes](https://docs.microsoft.com/dotnet/framework/network-programming/tls#audit-your-code-and-make-code-changes) covers auditing and updating your code.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\ndotnet/docs#4675","Url":"https://github.com/dotnet/announcements/issues/63","RelatedDescription":"Open issue \"Transport Layer Security (TLS) best practices with the .NET Framework article published\" (#63)"},{"Id":"304852590","IsPullRequest":false,"CreatedAt":"2018-03-13T17:01:52","Actor":"blowdart","Number":"62","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-0875: Hash Collision can cause Denial of Service","State":"open","Body":"# Microsoft Security Advisory CVE-2018-0875: Hash Collision can cause Denial of Service\r\n## Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 2.0 (including other minor and patch releases).\r\nThis advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability in the public versions of .NET Core where a malicious file or web request could cause a denial of service (DoS) attack.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.10, 1.1.7 or 2.0.6. Developers are advised to update their .NET Core SDK to versions 1.1.8 or 2.1.101.\r\n\r\n## Discussion\r\n\r\nUse https://github.com/dotnet/corefx/issues/28010 for discussion of this advisory.\r\n\r\n### Mitigation Factors\r\nNone\r\n\r\n### Affected Software\r\n\r\nAny application running against .NET Core 1.0.9 or lower versions, 1.1.6 or lower minor versions or 2.0.5 or lower minor versions is affected. \r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\nAny application running against .NET Core 1.0.9 or lower versions, 1.1.6 or lower minor versions or 2.0.5 or lower minor versions is affected. \r\n\r\nA complete list of runtimes can be discovered by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows\t| `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS\t| `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms\t| `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.10, 1.1.7 and 2.0.6, then any applications targeting the respective major/minor versions, 1.0 or 1.1 or 2.0 of .NET Core are vulnerable.\r\n\r\nAdditionally, if you've deployed self-contained applications targeting any of the impacted versions, these applications are also vulnerable and must be updated to target the updated .NET Core runtime, recompiled and redeployed.\r\n\r\n#### How do I fix my affected application?\r\n\r\nApplications can be fixed by installing the latest .NET Core runtimes or SDKs. Typically, application servers only have runtime packages installed and developer machines have the SDKs installed. \r\nInstallers for the runtimes can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). \r\n.NET Core 1.1.8 SDK installs both versions 1.0.10 and 1.1.7 of the .NET Core runtime.\r\n\r\nIf you've built a self-contained application, you must install the new runtime and SDK, update your application to target the updated .NET Core runtime, recompile and redeploy. To update your runtime version edit the `RuntimeFrameworkVersion` property in the project's .csproj file to indicate the desired target version. For example:\r\n\r\n```xml\r\n<PropertyGroup>\r\n  <RuntimeFrameworkVersion>2.0.6</RuntimeFrameworkVersion>\r\n</PropertyGroup>\r\n```\r\n\r\n#### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the `{applicationName}.runtimeconfig.json` file for that application., where `{applicationName}` is the name of the executable, for example `example.exe` would have a runtime configuration file titled `example.runtimeconfig.json`. Set the framework version to the desired version and the `rollForward` property to false. These settings should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nSince the `{applicationName}.runtimeconfig.json` file is an optional file, you may need to create one for each application and add it alongside the executable.\r\n\r\n### Acknowledgments\r\n[Ben Adams](https://twitter.com/ben_a_adams) of [Illyriad Games](https://www.illyriad.co.uk/)\r\n\r\n### External Links\r\n[CVE-2018-0875](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0875)\r\n\r\n### Revisions\r\n\r\nV1.2 (Mar 26, 2018): Corrected instructions for runtimeconfig.json\r\nV1.1 (Mar 14, 2018): Added instructions for self contained application retargetting.\r\nV1.0 (Mar 13, 2018): Advisory published.\r\n\r\n_Version 1.2_\r\n_Last Updated 2018-03-26_","Url":"https://github.com/dotnet/announcements/issues/62","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-0875: Hash Collision can cause Denial of Service\" (#62)"},{"Id":"300505281","IsPullRequest":false,"CreatedAt":"2018-02-27T06:10:33","Actor":"mairaw","Number":"61","RawContent":null,"Title":"New offline books released for Visual Studio 2017","State":"open","Body":"# New offline books released for Visual Studio 2017\r\n\r\nEarlier this month, we released an update to Offline Books for the Visual Studio 2017 Help Viewer.\r\n\r\nThis release includes new .NET books, including .NET Core Guide, .NET Guide, .NET Framework Guide and the .NET API Reference. It also includes the latest content for Visual Studio 2017 version 15.5, the latest updates to Visual Basic, C# (7.1 and 7.2), F#, ASP.NET Core, NuGet, SQL Server, and the Universal Windows Platform.\r\n\r\nThe .NET Guide, .NET Framework Guide and .NET API Reference books together are a replacement for the .NET Framework 4.6 and 4.5 book, which can be removed. Just be aware that the new .NET API Reference book currently displays the API syntax block for C# only, but examples are shown in other languages, just like the experience you currently have on docs.microsoft.com.If you need to see the API syntax for Visual Basic, C++/CLI or F#, then you should keep the old book until the new reference book is updated again in a few weeks. Once you remove the .NET Framework 4.6 and 4.5 book, you cannot reinstall it.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\n- https://github.com/dotnet/docs/issues/4502\r\n\r\n## Help Viewer installation\r\n\r\nYou will see these new books when you have Help Viewer installed and choose **Help** > **Add and Remove Content** from the Visual Studio 2017 main menu. If you don't see this menu item, then [open the Visual Studio Installer](https://docs.microsoft.com/visualstudio/install/modify-visual-studio), click the **More** dropdown and choose **Modify**. When the component list appears, choose **Individual Components** at the top, then check **Help Viewer**.\r\n\r\n![help_viewer_component](https://user-images.githubusercontent.com/12971179/36713111-c9d49a7c-1b40-11e8-918a-e7e3619669a2.png)\r\n\r\n## Add and Remove Content\r\n\r\nTo start the installation, select the **Modify** button in the lower right corner of the Installer window.\r\n\r\nTo update individual books whose status is \"Updates available\", remove the book and then click **Add** to get the new version. To update all your books at once, select the link in the lower right corner of the **Add and Remove Content** window:\r\n\r\n![offline-books](https://user-images.githubusercontent.com/12971179/36713028-75b944f6-1b40-11e8-91c4-4830355f815e.png)","Url":"https://github.com/dotnet/announcements/issues/61","RelatedDescription":"Open issue \"New offline books released for Visual Studio 2017\" (#61)"}],"ResultType":"GitHubIssue"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1067069226786201600","CreatedAt":"2018-11-26T14:55:03+00:00","UserScreenname":"dotnet","Text":"In this episode of the #OnDotNet show, @billwagner joins @runfaster2000 to discuss how @HTbox is supporting disaste… https://t.co/AmJJn42rRq","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":4,"FavoriteCount":1,"RawContent":null},{"Id":"1064967345070882817","CreatedAt":"2018-11-20T19:42:55+00:00","UserScreenname":"dotnet","Text":"Find out what's new in F# 4.5 from Phillip Carter (@_cartermp) in this episode of the #OnDotNet show.\n\nhttps://t.co/B5Q1Xt828F","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":66,"FavoriteCount":35,"RawContent":null}]}},"RunOn":"2018-11-29T05:31:04.3434258Z","RunDurationInMilliseconds":31319}