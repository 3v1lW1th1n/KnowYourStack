{"Data":{"GitHub":{"Issues":[{"Id":"476408739","IsPullRequest":true,"CreatedAt":"2019-08-03T03:16:02","Actor":"dotnet-maestro[bot]","Number":"1516","RawContent":null,"Title":"[master] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20190802.5\r\n- **Date Produced**: 8/3/2019 2:14 AM\r\n- **Commit**: 44b5076b843a67ab8497fe73c17576ef3e4dbd99\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 4.8.0-preview9.19402.5\r\n\r\n[marker]: <> (End:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1516","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/winforms\" (#1516)"},{"Id":"476390391","IsPullRequest":true,"CreatedAt":"2019-08-02T23:41:51","Actor":"vatsan-madhavan","Number":"1515","RawContent":null,"Title":"Fix for #1198 - fixes potential crashes in high-DPI applications","State":"open","Body":"Addresses #1198. \r\n\r\n#### [Watson] clr20r3: CLR_EXCEPTION_System.Collections.Generic.KeyNotFoundException_80131577_PresentationCore.dll!MS.Internal.DpiUtil+DpiAwarenessScope..ctor\r\n\r\n--\r\n\r\nWhen a caller passes in `dpiAwarenessContextValue==Invalid`, `new DpiAwarenessContextHandle(dpiAwarenssContextValue)` throws `KeyNotFoundException`.\r\n\r\nThis happens because we do not have a pre-created pseudo-_HANDLE_  corresponding to `Invalid` in our internal map of pseudo-handles in `DpiAwarenessContextHandle.WellKnownContextValues`. Such a pseudo-handle cannot be created either.\r\n\r\nWhen `dpiAwarenessContextValue=Invalid` is passed, the correct behavior is to treat it as a no-op and simply `return`. The corresponding `Dispose()` will also run benignly and the caller will get the correct behavior - which is that no changes will be made to the thread-state.","Url":"https://github.com/dotnet/wpf/pull/1515","RelatedDescription":"Open PR \"Fix for #1198 - fixes potential crashes in high-DPI applications\" (#1515)"},{"Id":"476361789","IsPullRequest":true,"CreatedAt":"2019-08-02T22:21:23","Actor":"dotnet-maestro[bot]","Number":"1514","RawContent":null,"Title":"[master] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20190802.4\r\n- **Date Produced**: 8/2/2019 8:44 PM\r\n- **Commit**: f9557ba65ed0b8232c058556c38b22a11b1dab00\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 4.8.0-preview9.19402.4\r\n\r\n[marker]: <> (End:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1514","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/winforms\" (#1514)"},{"Id":"476340600","IsPullRequest":true,"CreatedAt":"2019-08-02T20:17:58","Actor":"rladuca","Number":"1513","RawContent":null,"Title":"XPS: Use original font when subsetting would grow the font","State":"open","Body":"When a call to CreateDeltaTTF returns ERR_WOULD_GROW, ComputeSubset should not throw FileFormatException.  Instead, it should copy the original font into the result buffer and return that.\r\n\r\nThis is so a subsetting attempt that would increase the font size can succeed by using the original font, since that is sufficient to display the file and is more compact than the subsetting algorithm can achieve.\r\n\r\nAddresses #1511 ","Url":"https://github.com/dotnet/wpf/pull/1513","RelatedDescription":"Open PR \"XPS: Use original font when subsetting would grow the font\" (#1513)"},{"Id":"476315275","IsPullRequest":true,"CreatedAt":"2019-08-02T19:21:06","Actor":"dotnet-maestro[bot]","Number":"1512","RawContent":null,"Title":"[master] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20190802.2\r\n- **Date Produced**: 8/2/2019 6:20 PM\r\n- **Commit**: 95677fb3cac1a3f368d8d247ed1677764733adea\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 4.8.0-preview9.19402.2\r\n\r\n[marker]: <> (End:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1512","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/winforms\" (#1512)"},{"Id":"476310129","IsPullRequest":false,"CreatedAt":"2019-08-02T18:45:59","Actor":"rladuca","Number":"1511","RawContent":null,"Title":"XpsSerialization in presentationcore.dll throws System.IO.FileFormatException","State":"open","Body":"When working with XPS documents WPF will subset fonts in order to reduce their size during embedding.  In certain cases, this can result in the font growing during subsetting.\r\n\r\nThis results in us returning [ERR_WOULD_GROW](https://github.com/dotnet/wpf/blob/ae1790531c3b993b56eba8b1f0dd395a3ed7de75/src/Microsoft.DotNet.Wpf/src/DirectWriteForwarder/CPP/TrueTypeSubsetter/TtfDelta/ttferror.h):\r\nhttps://github.com/dotnet/wpf/blob/e4a212b4fd7d3bb6bce7d88cf6f0471a9fc8e6f4/src/Microsoft.DotNet.Wpf/src/DirectWriteForwarder/CPP/TrueTypeSubsetter/TtfDelta/ttfdelta.cpp#L920\r\n\r\nWe already know what to do in this case (as the comments in the code above suggest), use the original font.  However, we seem to be ignoring that:\r\n\r\nhttps://github.com/dotnet/wpf/blob/70da708a5cb79eaccda5e924687c827393e144ba/src/Microsoft.DotNet.Wpf/src/DirectWriteForwarder/CPP/TrueTypeSubsetter/truetype.cpp#L105-L106\r\n\r\nThe fix is pretty straightforward, simply copy the font into the result buffer when we detect `ERR_WOULD_GROW` and return as usual.\r\n","Url":"https://github.com/dotnet/wpf/issues/1511","RelatedDescription":"Open issue \"XpsSerialization in presentationcore.dll throws System.IO.FileFormatException\" (#1511)"},{"Id":"476285179","IsPullRequest":false,"CreatedAt":"2019-08-02T17:34:47","Actor":"rladuca","Number":"1510","RawContent":null,"Title":"[DRT] Fix DrtFlow failures","State":"open","Body":"DrtFlow()\r\nOS: 2k8R2\r\nLog Link: See Test Results Emails","Url":"https://github.com/dotnet/wpf/issues/1510","RelatedDescription":"Open issue \"[DRT] Fix DrtFlow failures\" (#1510)"},{"Id":"476270366","IsPullRequest":false,"CreatedAt":"2019-08-02T16:52:07","Actor":"Safirion","Number":"1509","RawContent":null,"Title":"ProgressBar Indeterminate has a high CPU usage (even when collapsed)","State":"open","Body":"* .NET Core Version:  3.0 Preview7\r\n* Windows version: Certainly all but tested on Windows Server 2016 and Windows 10 1903\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Yes\r\n \r\n **Problem description:**\r\n \r\nProgress bar with IsIndeterminate=true has a high CPU usage when collapsed.\r\n\r\n![image](https://user-images.githubusercontent.com/11511729/62385464-76b60a00-b555-11e9-997c-7c15e481d845.png)\r\n\r\nAs we can see, I have ~10-15% of CPU usage for a ProgressBar in collapsed stackpanel (and up to 50% of CPU usage on VM with only 2 vcpu).  I notice that every time I paused the process, the main thread is on \"WindowsBase.dll!MS.Win32.UnsafeNativeMethods.GetMessageW\"\r\n\r\nMy current workaround for this situation is when I collapse my StackPanel, I set also the IsIndeterminate property of my progressbar to false.\r\n\r\n **Actual behavior:** \r\nProgressBar indeterminate has high usage of CPU when collapsed.\r\n \r\n **Expected behavior:**\r\n ProgressBar indeterminate has no impact on CPU when collapsed.\r\n\r\nObviously, the best scenario should be that indeterminate progress bar has no impact on CPU even when visible... But animation has a cost, I know that...\r\n\r\n **Minimal repro:**\r\n```\r\n<StackPanel x:Name=\"LoadingPanel\">\r\n          <ProgressBar IsIndeterminate=\"True\" />\r\n</StackPanel>\r\n```\r\n\r\nDisplay LoadingPanel in a Window and collapse LoadingPanel. \r\n\r\n","Url":"https://github.com/dotnet/wpf/issues/1509","RelatedDescription":"Open issue \"ProgressBar Indeterminate has a high CPU usage (even when collapsed)\" (#1509)"},{"Id":"476254678","IsPullRequest":false,"CreatedAt":"2019-08-02T16:09:59","Actor":"grubioe","Number":"1508","RawContent":null,"Title":"Japanese kanji characters are not rendered correctly on WPF applications after applied KB4482887.","State":"open","Body":"Copied from OSG AzDO ID:  [22130413](https://microsoft.visualstudio.com/OS/_workitems/edit/22130413)\r\n\r\nWindows Versions affected: Windows 10 RS5, 19H1\r\n\r\n**Issue:** \r\nJapanese kanji characters are not rendered correctly on WPF applications after applied KB4482887.   Some horizontal lines of kanji characters will disappear.\r\nIt is hard to read and recognize what character is displayed.\r\n\r\n**Before KB 4482887**\r\n![image](https://user-images.githubusercontent.com/49078227/62383425-98d36c00-b504-11e9-8e5f-92fdb4c00556.png)\r\n\r\n**After KB 4482887**\r\n![image](https://user-images.githubusercontent.com/49078227/62383467-b43e7700-b504-11e9-84fb-45548ca1b87b.png)\r\n\r\n\r\nRepro Steps:\r\n\r\n1.  Install KB442887\r\n\r\n2.  Launch WPF application\r\n\r\n[20190417_WpfSample.zip](https://github.com/dotnet/wpf/files/3462088/20190417_WpfSample.zip)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/wpf/issues/1508","RelatedDescription":"Open issue \"Japanese kanji characters are not rendered correctly on WPF applications after applied KB4482887.\" (#1508)"},{"Id":"475984414","IsPullRequest":false,"CreatedAt":"2019-08-02T15:08:29","Actor":"skanvk15","Number":"1503","RawContent":null,"Title":"System.Windows.Forms.FolderBrowserDialog no longer compiles in WPF app","State":"closed","Body":"* .NET Core Version: (e.g. 3.0 Preview1, or daily build number, use `dotnet --info`)\r\n  Microsoft.NETCore.App 3.0.0-preview7-27912-14 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview7-27912-14 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\n* Windows version: (`winver`)\r\nWindows 10\r\n\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Yes/No\r\nN/A\r\n\r\n <!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\n \r\n **Problem description:**\r\nI used to be able to use the Win Forms folder dialog in .NET Core 3.0 Preview version WPF app, like this:\r\n`System.Windows.Forms.FolderBrowserDialog folderBrowserDialog;`\r\nBut with latest .NET Core 3.0 Preview version I get compiler error.\r\n\r\n **Actual behavior:** <!-- callstack for crashes / exceptions -->\r\n I get this compiler error:\r\nerror CS0234: The type or namespace name 'Forms' does not exist in the namespace 'System.Windows' (are you missing an assembly reference?)\r\n\r\n **Expected behavior:**\r\nNo error\r\n \r\n **Minimal repro:**\r\n Create new .NET Core WPF app and update MainWindow constructor like this:\r\n`public MainWindow()\r\n        {\r\n            InitializeComponent();\r\n            System.Windows.Forms.FolderBrowserDialog folderBrowserDialog;\r\n        }`\r\n","Url":"https://github.com/dotnet/wpf/issues/1503","RelatedDescription":"Closed issue \"System.Windows.Forms.FolderBrowserDialog no longer compiles in WPF app\" (#1503)"},{"Id":"476174427","IsPullRequest":true,"CreatedAt":"2019-08-02T13:36:06","Actor":"dotnet-maestro[bot]","Number":"1507","RawContent":null,"Title":"[master] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20190802.1\r\n- **Date Produced**: 8/2/2019 1:06 PM\r\n- **Commit**: 8437748b9bad0f8311218afb0f040dfaf8fdd737\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 4.8.0-preview9.19402.1\r\n\r\n[marker]: <> (End:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1507","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/winforms\" (#1507)"},{"Id":"476166708","IsPullRequest":true,"CreatedAt":"2019-08-02T13:22:54","Actor":"dotnet-maestro[bot]","Number":"1506","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Build**: 20190801.17\r\n- **Date Produced**: 8/2/2019 12:03 AM\r\n- **Commit**: 7bc5f66791539efacf8ed5952c720ba88a5f1948\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng** -> 4.8.0-preview9.19401.17\r\n\r\n[marker]: <> (End:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1506","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#1506)"},{"Id":"476165783","IsPullRequest":false,"CreatedAt":"2019-08-02T12:55:24","Actor":"xhanb","Number":"1505","RawContent":null,"Title":"Add  value to collection of type  'System.Windows.Controls.UIElementCollection' threw an exception","State":"open","Body":"* .NET Core Version: Preview7\r\n* Windows version: Windows Server 2012 R2\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: No\r\n\r\n <!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\n \r\n **Problem description:**\r\nMy project is based on NET Core Preview7 and and references Mahapps.Metro nuget packge.\r\nWhen I run it on Windows Server 2012 R2, it crashes immediately and throw the exception like title.\r\nbut running normally on Win10.\r\n\r\n \r\n **Actual behavior:** <!-- callstack for crashes / exceptions -->\r\n application  crash  and  throw an exception\r\n **Expected behavior:**\r\n running normally.\r\n **Minimal repro:**\r\n \r\n","Url":"https://github.com/dotnet/wpf/issues/1505","RelatedDescription":"Open issue \"Add  value to collection of type  'System.Windows.Controls.UIElementCollection' threw an exception\" (#1505)"},{"Id":"476147510","IsPullRequest":true,"CreatedAt":"2019-08-02T12:53:31","Actor":"dotnet-maestro[bot]","Number":"1504","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:3a1d3bb6-c64d-406d-e8f4-08d648cf64cb)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190801.23\r\n- **Date Produced**: 8/2/2019 6:58 AM\r\n- **Commit**: 941d6497356e00ea6b2bc35a22a67f4ecf988fd6\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19401.23\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19401.23\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19401.23\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19401.23\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19401.23\r\n\r\n[marker]: <> (End:3a1d3bb6-c64d-406d-e8f4-08d648cf64cb)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1504","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1504)"},{"Id":"475923393","IsPullRequest":true,"CreatedAt":"2019-08-01T22:56:45","Actor":"ojhad","Number":"1502","RawContent":null,"Title":"Removed HandleTwoWayBindingToPropertyWithNonPublicSetter compat flag","State":"open","Body":"Issue number: #1379 \r\n\r\nTwo-way binding to properties with non-public setters was being allowed because we took on behavior that was caused by a bug in .NET Framework 4.5. Back then, a compatibility flag was introduced due to this 4.5 bug. We no longer want to support this scenario because we want correct behavior in .NET Core and we want the behavior to be on parity with net472/8. So there is no longer need for the compat flag.\r\n\r\nRan a full DRT pass against this change and it was successful.","Url":"https://github.com/dotnet/wpf/pull/1502","RelatedDescription":"Open PR \"Removed HandleTwoWayBindingToPropertyWithNonPublicSetter compat flag\" (#1502)"},{"Id":"475863837","IsPullRequest":true,"CreatedAt":"2019-08-01T20:02:33","Actor":"arpitmathur","Number":"1501","RawContent":null,"Title":"WIP PR: Fixing hit detection in controls in system aware dialogs in mi…","State":"open","Body":"This is a WIP PR for an issue that was reported with bad hit detection in system aware dialogs hosted in mixed mode DPI","Url":"https://github.com/dotnet/wpf/pull/1501","RelatedDescription":"Open PR \"WIP PR: Fixing hit detection in controls in system aware dialogs in mi…\" (#1501)"},{"Id":"475409255","IsPullRequest":false,"CreatedAt":"2019-08-01T17:21:53","Actor":"vatsan-madhavan","Number":"1495","RawContent":null,"Title":"Workaround for build-failures caused by ResXCodeFileGenerator regression in dotnet-wpf-int","State":"closed","Body":"Related: #1492 \r\n\r\n> WPF uses `ResXFileCodeGenerator `it its builds. We have a resx with entries like this (Documents.resx)\r\n> \r\n> ```\r\n>   <data name=\"Invalid_35x35\" type=\"System.Resources.ResXFileRef, System.Windows.Forms\">\r\n>     <value>Invalid_35x35.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>\r\n>   </data>\r\n> ```\r\n> \r\n> It generates getters that should look like this:\r\n> \r\n> ```cs\r\n>         internal static System.Drawing.Bitmap Invalid_35x35 {\r\n>             get {\r\n>                 object obj = ResourceManager.GetObject(\"Invalid_35x35\", resourceCulture);\r\n>                 return ((System.DrawingBitmap)(obj));\r\n>             }\r\n>         }\r\n> ```\r\n> \r\n> Suddenly, as of some recent VS build, `ResXFileCodeGenerator `is starting to emit files with getters that are instead like this (not the return type – they are plain `object`).\r\n> \r\n> ```cs\r\n>         /// <summary>\r\n>         ///   Looks up a localized resource of type System.Object similar to Microsoft.Build.Tasks.ResourceHandling.LiveObjectResource.\r\n>         /// </summary>\r\n>         internal static object Invalid_35x35 {\r\n>             get {\r\n>                 object obj = ResourceManager.GetObject(\"Invalid_35x35\", resourceCulture);\r\n>                 return ((object)(obj));\r\n>             }\r\n>         }\r\n> ```\r\n> \r\n> Here is a standalone repro that illustrates the problem. Build with commandline msbuild (not `dotnet`, use `msbuild`, VS version dev16.3p2 29128.8.master, Int Preview).\r\n> \r\n> After building, open `obj\\Debug\\netcoreapp3.0\\MS.Internal.Documents.Resources.cs` and you can see getters that return `object` instead of specifc types.\r\n> \r\n> [resx-codegen-issue.zip](https://github.%60com/dotnet/wpf/files/3453868/resx-codegen-issue.zip)\r\n\r\n\r\n\r\n> WPF uses `ResXFileCodeGenerator `it its builds. We have a resx with entries like this (Documents.resx)\r\n> \r\n> ```\r\n>   <data name=\"Invalid_35x35\" type=\"System.Resources.ResXFileRef, System.Windows.Forms\">\r\n>     <value>Invalid_35x35.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>\r\n>   </data>\r\n> ```\r\n> \r\n> It generates getters that should look like this:\r\n> \r\n> ```cs\r\n>         internal static System.Drawing.Bitmap Invalid_35x35 {\r\n>             get {\r\n>                 object obj = ResourceManager.GetObject(\"Invalid_35x35\", resourceCulture);\r\n>                 return ((System.DrawingBitmap)(obj));\r\n>             }\r\n>         }\r\n> ```\r\n> \r\n> Suddenly, as of some recent VS build, `ResXFileCodeGenerator `is starting to emit files with getters that are instead like this (not the return type – they are plain `object`).\r\n> \r\n> ```cs\r\n>         /// <summary>\r\n>         ///   Looks up a localized resource of type System.Object similar to Microsoft.Build.Tasks.ResourceHandling.LiveObjectResource.\r\n>         /// </summary>\r\n>         internal static object Invalid_35x35 {\r\n>             get {\r\n>                 object obj = ResourceManager.GetObject(\"Invalid_35x35\", resourceCulture);\r\n>                 return ((object)(obj));\r\n>             }\r\n>         }\r\n> ```\r\n> \r\n> Here is a standalone repro that illustrates the problem. Build with commandline msbuild (not `dotnet`, use `msbuild`, VS version dev16.3p2 29128.8.master, Int Preview).\r\n> \r\n> After building, open `obj\\Debug\\netcoreapp3.0\\MS.Internal.Documents.Resources.cs` and you can see getters that return `object` instead of specifc types.\r\n> \r\n> [resx-codegen-issue.zip](https://github.%60com/dotnet/wpf/files/3453868/resx-codegen-issue.zip)\r\n\r\n","Url":"https://github.com/dotnet/wpf/issues/1495","RelatedDescription":"Closed issue \"Workaround for build-failures caused by ResXCodeFileGenerator regression in dotnet-wpf-int\" (#1495)"},{"Id":"475698487","IsPullRequest":true,"CreatedAt":"2019-08-01T14:16:30","Actor":"dotnet-maestro[bot]","Number":"1500","RawContent":null,"Title":"[master] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20190801.2\r\n- **Date Produced**: 8/1/2019 1:18 PM\r\n- **Commit**: 1a7ac6bb28432654e258440aae39377ac7c79ba1\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 4.8.0-preview9.19401.2\r\n\r\n[marker]: <> (End:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1500","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/winforms\" (#1500)"},{"Id":"475669511","IsPullRequest":true,"CreatedAt":"2019-08-01T13:46:21","Actor":"dotnet-maestro[bot]","Number":"1499","RawContent":null,"Title":"[master] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20190801.1\r\n- **Date Produced**: 8/1/2019 12:21 PM\r\n- **Commit**: fd9df08ba6eb47f8ddae2c287631ece88376684a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 4.8.0-preview9.19401.1\r\n\r\n[marker]: <> (End:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1499","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/winforms\" (#1499)"},{"Id":"475663800","IsPullRequest":true,"CreatedAt":"2019-08-01T13:29:22","Actor":"dotnet-maestro[bot]","Number":"1498","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Build**: 20190801.2\r\n- **Date Produced**: 8/1/2019 10:23 AM\r\n- **Commit**: 86e0387f31bd3ed165cce42b13279cb1a9e96439\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng** -> 4.8.0-preview9.19401.2\r\n\r\n[marker]: <> (End:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1498","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#1498)"},{"Id":"475645636","IsPullRequest":true,"CreatedAt":"2019-08-01T12:58:40","Actor":"dotnet-maestro[bot]","Number":"1497","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:3a1d3bb6-c64d-406d-e8f4-08d648cf64cb)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190731.19\r\n- **Date Produced**: 8/1/2019 12:27 AM\r\n- **Commit**: 48787606d809963cc800151cbfbefe0a74ae74b4\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19381.19\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19381.19\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19381.19\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19381.19\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19381.19\r\n\r\n[marker]: <> (End:3a1d3bb6-c64d-406d-e8f4-08d648cf64cb)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1497","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1497)"},{"Id":"475539448","IsPullRequest":false,"CreatedAt":"2019-08-01T08:13:31","Actor":"jdbriaris","Number":"1496","RawContent":null,"Title":"System.Windows.Point not available in System.Windows","State":"open","Body":"* .NET Core Version: 3.0.100-preview7-012821\r\n* Windows version: Windows 10, Version 1903, Build 18362.239\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: No\r\n \r\n **Problem description:**\r\nI have a separate \"pure\" .NET Core 3 library (i.e. no reference to Microsoft.WindowsDesktop.App) that I'm using to define my View Models. Within that library I have access to the geometry classes, e.g. [ArcSegment](https://docs.microsoft.com/en-us/dotnet/api/system.windows.media.arcsegment?view=netframework-4.8), available in the `System.Windows.Media namespace`. However, if I then attempt to create an [ArcSegment](https://docs.microsoft.com/en-us/dotnet/api/system.windows.media.arcsegment?view=netframework-4.8) by defining its [ArcSegment.Point](https://docs.microsoft.com/en-us/dotnet/api/system.windows.media.arcsegment.point?view=netframework-4.8) property, I get the build error\r\n\r\n`Error\tCS0234\tThe type or namespace name 'Point' does not exist in the namespace 'System.Windows' (are you missing an assembly reference?)`\r\n\r\nBoth the docs for [ArcSegment.Point](https://docs.microsoft.com/en-us/dotnet/api/system.windows.media.arcsegment?view=netframework-4.8) suggest that it applies to .NET Core Preview 7, but the docs for [Point](https://docs.microsoft.com/en-us/dotnet/api/system.windows.point?view=netframework-4.8) does not suggest such support.\r\n\r\nIf I reference the package `Microsoft.WindowsDesktop.App` I have access to [Point](https://docs.microsoft.com/en-us/dotnet/api/system.windows.point?view=netframework-4.8) and can successfully build. However, I'd want to keep this a pure .NET Core 3 library.\r\n\r\nFurther explanation on this [SO question](https://stackoverflow.com/questions/57295940/net-core-3-wpf-and-paths).\r\n \r\n **Expected behavior:**\r\nI'd expect to be able to use the geometry classes specified in `System.Windows.Media` in a .NET Core 3 library.\r\n \r\n","Url":"https://github.com/dotnet/wpf/issues/1496","RelatedDescription":"Open issue \"System.Windows.Point not available in System.Windows\" (#1496)"},{"Id":"475365891","IsPullRequest":true,"CreatedAt":"2019-08-01T00:07:35","Actor":"vatsan-madhavan","Number":"1493","RawContent":null,"Title":"Embed Commit SHA as a string resource in native DLLs","State":"closed","Body":"Fixes #1491 \r\n\r\nEmbeds a new RC file containing a string table for any native DLL or EXE project. This string table will contain **two** pieces of information:\r\n- Commit SHA\r\n- Repo name that built this assembly. \r\n\r\n![image](https://user-images.githubusercontent.com/20246435/62249278-dfa75180-b39e-11e9-97b6-81c88652c539.png)\r\n\r\n![image](https://user-images.githubusercontent.com/20246435/62249303-efbf3100-b39e-11e9-96af-155879c82c11.png)\r\n\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1493","RelatedDescription":"Closed or merged PR \"Embed Commit SHA as a string resource in native DLLs\" (#1493)"},{"Id":"475259085","IsPullRequest":false,"CreatedAt":"2019-08-01T00:07:34","Actor":"grubioe","Number":"1491","RawContent":null,"Title":"Add SHA in native assemblies resource files","State":"closed","Body":"","Url":"https://github.com/dotnet/wpf/issues/1491","RelatedDescription":"Closed issue \"Add SHA in native assemblies resource files\" (#1491)"},{"Id":"475377357","IsPullRequest":false,"CreatedAt":"2019-07-31T22:40:09","Actor":"acemod13","Number":"1494","RawContent":null,"Title":"Missing PlatformTarget tags breaks Ready2Run","State":"closed","Body":"* .NET Core Version: 3.0.100-preview7-012821\r\n* Windows version: Windows 10 (1903, Build 18362.267)\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: No\r\n \r\n **Problem description:**\r\nI noticed an issue where if the <PlatformTarget> tag is missing for one of the build configurations in the csproj file (usually, it's on projects that migrated from .NET Framework by hand) will break the Publishing Ready2Run option. An example of how it could cause it is attempting to make a self-contained win-x64 package (with the <PublishReady2Run> tag set to true) using the Release | Any CPU build configuration. If the PlatformTarget tag is missing, it assumes that it has to compile to x86. This causes an issue where 32-bit binaries have the wrong R2R image (the Ahead-Of-Time compiler requires that the binary and the image to match, so 32-bit binary must have a 32-bit R2R image), causing a crash.\r\n \r\n **Actual behavior:**\r\nThe app will start, taking up some RAM, but the usage will go to 1MB (or lower) before closing.\r\n \r\n **Expected behavior:**\r\nThe app loads up as normal.\r\n \r\n **Minimal repro:**\r\nI have a repo that is affected by the bug and it's pretty small (it's a small wrapper for a compiler): https://github.com/acemod13/RMMVCookTool\r\n\r\nI'll see if I can make an even smaller repro app.\r\n \r\n","Url":"https://github.com/dotnet/wpf/issues/1494","RelatedDescription":"Closed issue \"Missing PlatformTarget tags breaks Ready2Run\" (#1494)"},{"Id":"475356330","IsPullRequest":false,"CreatedAt":"2019-07-31T21:03:10","Actor":"vatsan-madhavan","Number":"1492","RawContent":null,"Title":"dotnet-wpf-int builds fail due to ResXCodeFileGenerator regression in recent dev16.3p2 builds","State":"open","Body":"\r\nWPF uses `ResXFileCodeGenerator `it its builds. We have a resx with entries like this (Documents.resx)\r\n\r\n```xml\r\n  <data name=\"Invalid_35x35\" type=\"System.Resources.ResXFileRef, System.Windows.Forms\">\r\n    <value>Invalid_35x35.png;System.Drawing.Bitmap, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>\r\n  </data>\r\n```\r\n\r\nIt generates getters that should look like this: \r\n\r\n``` C#\r\n        internal static System.Drawing.Bitmap Invalid_35x35 {\r\n            get {\r\n                object obj = ResourceManager.GetObject(\"Invalid_35x35\", resourceCulture);\r\n                return ((System.DrawingBitmap)(obj));\r\n            }\r\n        }\r\n```\r\n\r\nSuddenly, as of some recent VS build, `ResXFileCodeGenerator `is starting to emit files with getters that are instead like this (not the return type – they are plain `object`). \r\n\r\n``` C#\r\n        /// <summary>\r\n        ///   Looks up a localized resource of type System.Object similar to Microsoft.Build.Tasks.ResourceHandling.LiveObjectResource.\r\n        /// </summary>\r\n        internal static object Invalid_35x35 {\r\n            get {\r\n                object obj = ResourceManager.GetObject(\"Invalid_35x35\", resourceCulture);\r\n                return ((object)(obj));\r\n            }\r\n        }\r\n```\r\n\r\nHere is a standalone repro that illustrates the problem. Build with commandline msbuild (not `dotnet`, use `msbuild`, VS version dev16.3p2 29128.8.master, Int Preview). \r\n\r\nAfter building, open `obj\\Debug\\netcoreapp3.0\\MS.Internal.Documents.Resources.cs` and you can see getters that return `object` instead of specifc types. \r\n\r\n[resx-codegen-issue.zip](https://github.`com/dotnet/wpf/files/3453868/resx-codegen-issue.zip)","Url":"https://github.com/dotnet/wpf/issues/1492","RelatedDescription":"Open issue \"dotnet-wpf-int builds fail due to ResXCodeFileGenerator regression in recent dev16.3p2 builds\" (#1492)"},{"Id":"475258354","IsPullRequest":false,"CreatedAt":"2019-07-31T17:05:10","Actor":"grubioe","Number":"1490","RawContent":null,"Title":"A11y_.NETCore3.0(WPF)_WPFAnnotationsStyling_Screenreader: The options present in the \"StickyNote Style\" combo box is not announced to the screen reader users.","State":"open","Body":"Copied from VSO [957351](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/957351)\r\n\r\n\r\nEnvironment Details:\r\nApplication Name: .NET Core 3.0 (WPF)\r\n\r\n\r\nApplication version: VS 2019 Preview 4.7.03190\r\n\r\nWindows Version: Windows10\r\n\r\nScreenReader Version: Narrator, NVDA 2019.1.1\r\n\r\n\r\n\r\n\r\nPre-requisite:\r\n\r\n1) Download the latest .NET Core 3 daily build by going to this link.\r\n2) Install Windows (x86 or x64) versions of sdk listed under Master (3.0.x Runtime) by clicking \"Installer\" link.\r\n\r\n\r\nRepro Steps:\r\n\r\n\r\n1) Run exe file for \"AnnotationsStyling\" from the build app folder provided.\r\n2) Main Window for \"AnnotationsStyling\" solution will appear.\r\n3) Start screen reader.\r\n4) Navigate to the \"StickyNote Style\" combo box and navigate through it's options.\r\n5) Listen how are they announced.\r\n\r\n\r\nActual:\r\n\r\nWhen screen reader users navigates through the options of the  \"StickyNote Style\" combo box and the option names are not announced as per it's visual appearance on the screen. \r\n\r\n\r\n\r\nThe same issue is observed using the both the screen readers i.e. Narrator and NVDA.\r\n\r\n\r\n\r\nExpected:\r\n\r\nThe options of the  \"StickyNote Style\" combo box should be announced properly to the screen reader users as per it's visual appearance.\r\n\r\n\r\n\r\nUser Impact:\r\n\r\nIf the options of a combo box is not announced correctly to the screen reader users then they might not understand which option should be selected and they will also get confused whether the option which they are selecting is correct or not.\r\n\r\n\r\n\r\n\r\nRecommendations:\r\n\r\nPlease refer to below URL which is repository for accessibility bug fixes.\r\n\r\nhttps://microsoft.sharepoint.com/teams/msenable/Pages/Home.aspx\r\n\r\n\r\n\r\n\r\nMAS Reference:\r\n\r\nMAS 1.3.1\r\n\r\nhttps://microsoft.sharepoint.com/:w:/r/teams/msenable/_layouts/15/WopiFrame.aspx?sourcedoc={54f28d1f-a2d1-4dcd-84e1-5c9b87e8aba4}","Url":"https://github.com/dotnet/wpf/issues/1490","RelatedDescription":"Open issue \"A11y_.NETCore3.0(WPF)_WPFAnnotationsStyling_Screenreader: The options present in the \"StickyNote Style\" combo box is not announced to the screen reader users.\" (#1490)"},{"Id":"475191589","IsPullRequest":true,"CreatedAt":"2019-07-31T15:11:11","Actor":"dotnet-maestro[bot]","Number":"1489","RawContent":null,"Title":"[master] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20190731.3\r\n- **Date Produced**: 7/31/2019 2:40 PM\r\n- **Commit**: 733090b305bc66e34affe64e938dfe3c08dcaa03\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 4.8.0-preview9.19381.3\r\n\r\n[marker]: <> (End:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1489","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/winforms\" (#1489)"},{"Id":"475152033","IsPullRequest":true,"CreatedAt":"2019-07-31T14:01:05","Actor":"dotnet-maestro[bot]","Number":"1488","RawContent":null,"Title":"[master] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20190731.2\r\n- **Date Produced**: 7/31/2019 12:58 PM\r\n- **Commit**: 3a383a329c1f785a981997c16105ed5816e8d25e\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 4.8.0-preview9.19381.2\r\n\r\n[marker]: <> (End:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1488","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/winforms\" (#1488)"},{"Id":"475105395","IsPullRequest":true,"CreatedAt":"2019-07-31T12:54:09","Actor":"dotnet-maestro[bot]","Number":"1487","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:3a1d3bb6-c64d-406d-e8f4-08d648cf64cb)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190730.3\r\n- **Date Produced**: 7/30/2019 6:57 PM\r\n- **Commit**: def377f94747dac91482aad67b33a1c011ffc770\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19380.3\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19380.3\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19380.3\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19380.3\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19380.3\r\n\r\n[marker]: <> (End:3a1d3bb6-c64d-406d-e8f4-08d648cf64cb)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1487","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1487)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-08-03T05:30:50.9726347Z","RunDurationInMilliseconds":731}