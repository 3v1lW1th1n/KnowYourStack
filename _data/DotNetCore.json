{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing Entity Framework Core 3.0 Preview 9 and Entity Framework 6.3 Preview 9","PublishedOn":"2019-09-05T00:25:11+00:00","CommentsCount":9,"FacebookCount":0,"Summary":"The Preview 9 versions of the EF Core 3.0 package and the EF 6.3 package are now available for download from nuget.org.\nThese are the last planned previews before we release the final versions later...","Href":"https://devblogs.microsoft.com/dotnet/announcing-entity-framework-core-3-0-preview-9-and-entity-framework-6-3-preview-9/","RawContent":null},{"Title":"Announcing .NET Core 3.0 Preview 9","PublishedOn":"2019-09-04T19:00:55+00:00","CommentsCount":13,"FacebookCount":0,"Summary":"Today, we&#8217;re announcing .NET Core 3.0 Preview 9. Just like with Preview 8, we&#8217;ve focused on polishing .NET Core 3.0 for a final release and aren&#8217;t adding new features. If these final...","Href":"https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0-preview-9/","RawContent":null},{"Title":"Hardware Intrinsics in .NET Core","PublishedOn":"2019-09-03T22:35:55+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"Several years ago, we decided that it was time to support SIMD code in .NET. We introduced the System.Numerics namespace with Vector2, Vector3, Vector4, Vector&#60;T&#62;, and related types. These...","Href":"https://devblogs.microsoft.com/dotnet/hardware-intrinsics-in-net-core/","RawContent":null},{"Title":"Announcing ML.NET 1.4 Preview and Model Builder updates (Machine Learning for .NET)","PublishedOn":"2019-09-03T18:00:35+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"We are excited to announce ML.NET 1.4 Preview and updates to Model Builder and CLI.\nML.NET is an open-source and cross-platform machine learning framework for .NET developers. ML.NET also includes...","Href":"https://devblogs.microsoft.com/dotnet/announcing-ml-net-1-4-preview-and-model-builder-updates-machine-learning-for-net/","RawContent":null},{"Title":"Join us for .NET Conf 2019, Sept 23-25","PublishedOn":"2019-09-03T17:51:17+00:00","CommentsCount":6,"FacebookCount":0,"Summary":".NET Conf is back again this year and will be live streaming to a device near you September 23-25 on www.dotnetconf.net! .NET Conf is a FREE, 3 day virtual developer event co-organized by the .NET...","Href":"https://devblogs.microsoft.com/dotnet/join-us-for-net-conf-2019-sept-23-25/","RawContent":null},{"Title":".NET Framework August 30, 2019 Cumulative Update for Windows 10 version 1903","PublishedOn":"2019-08-30T17:00:13+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The August 2019 Cumulative Update for .NET Framework 3.5 and 4.8 on Windows 10 version 1903 was released.\nQuality and Reliability\nThis release contains the following quality and reliability...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-august-30-2019-cumulative-update-for-windows-10-version-1903/","RawContent":null},{"Title":"How the .NET Team uses Azure Pipelines to produce Docker Images","PublishedOn":"2019-08-28T16:30:06+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Producing Docker images for .NET might not seem like that big of a deal.  Once you’ve got a Dockerfile defined, just run &#8220;docker build&#8220; and &#8220;docker push&#8220; and you’re done,...","Href":"https://devblogs.microsoft.com/dotnet/how-the-net-team-uses-azure-pipelines-to-produce-docker-images/","RawContent":null},{"Title":"Visual Studio Tips and Tricks: Increasing your Productivity for .NET","PublishedOn":"2019-08-22T17:20:27+00:00","CommentsCount":16,"FacebookCount":0,"Summary":"The .NET team is constantly thinking of new ways to make developers more productive. We&#8217;ve been working hard over the past year to take the feedback you&#8217;ve sent us and turn it into tools...","Href":"https://devblogs.microsoft.com/dotnet/visual-studio-tips-and-tricks-increasing-your-productivity-for-net/","RawContent":null},{"Title":"Messaging Practices","PublishedOn":"2019-08-22T16:00:21+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This post is a collection of content from David Boike from the Particular.net blog calling out some common problems and solutions for building message based distributed systems. They are relevant to...","Href":"https://devblogs.microsoft.com/dotnet/messaging-practices/","RawContent":null},{"Title":"Hey .NET! Have you tried ML.NET?","PublishedOn":"2019-08-21T15:00:51+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"ML.NET is an open source and cross-platform machine learning framework made for .NET developers.\nUsing ML.NET you can easily build custom machine learning models for scenarios like sentiment analysis,...","Href":"https://devblogs.microsoft.com/dotnet/hey-net-have-you-tried-ml-net/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"10123005051","Type":"IssuesEvent","CreatedAt":"2019-07-31T19:23:23","Actor":"MeikTranel","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/issues/148","RelatedDescription":"Opened issue \"Clarify guidelines in regards to Options and Requirements\" (#148) at dotnet/foundation","RelatedBody":"I'd be interested in which part of the project submission guidelines is optional and which are deal breaker requirements.\r\n\r\n- Is the Role Matrix laid out an absolute or (as can be read between the lines) just a preset, which may be subject to individual projects needs?\r\n- Is it a strong requirement that the project uses the contributor covenant CoC?"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"10348207363","Type":"IssuesEvent","CreatedAt":"2019-09-04T19:14:06","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/120","RelatedDescription":"Opened issue \".NET Core 3.0 Preview 9\" (#120) at dotnet/announcements","RelatedBody":".NET Core Preview 9 released today. https://github.com/dotnet/core/issues/3304 has been opened for discussion. \r\n\r\n[Release Notes](https://github.com/dotnet/core/blob/master/release-notes/3.0/preview/3.0.0-preview9.md)\r\n[Download](https://github.com/dotnet/core/blob/master/release-notes/3.0/preview/3.0.0-preview9-download.md)\r\n\r\n**Blog posts**\r\n\r\n[.NET Core](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0-preview-9/)\r\n[ASP.NET Core](https://devblogs.microsoft.com/aspnet/asp-net-core-and-blazor-updates-in-net-core-3-0-preview-9/)\r\n[EF Core](https://devblogs.microsoft.com/dotnet/announcing-entity-framework-core-3-0-preview-9-and-entity-framework-6-3-preview-9/)\r\n\r\nPlease report any issues you find with 3.0.0 Preview 9, either responding to this issue, creating a new issue or creating a new issue in one of the following repos:\r\n\r\n* [aspnet/Home](https://github.com/aspnet/Home) - for ASP.NET Core questions\r\n* [aspnet/EntityFrameworkCore](https://github.com/aspnet/EntityFrameworkCore) - for Entity Framework Core questions\r\n* [dotnet/cli](https://github.com/dotnet/cli/issues) - for CLI tools and questions\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues) - for API issues and questions\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues) - for runtime issues\r\n* [dotnet/core-setup](https://github.com/dotnet/core-setup/issues) - for installer issues\r\n* [dotnet/winforms](https://github.com/dotnet/winforms/issues) - for Winforms issues\r\n* [dotnet/wpf](https://github.com/dotnet/wpf/issues) - for WPF issues\r\n* [nuget/home](https://github.com/nuget/home/issues) - for NuGet questions and issues"},{"Id":"10212614045","Type":"IssuesEvent","CreatedAt":"2019-08-14T19:54:26","Actor":"stephentoub","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/119","RelatedDescription":"Opened issue \"Consolidating .NET GitHub repos\" (#119) at dotnet/announcements","RelatedBody":"Over the next few months, we plan to consolidate several of the foundational repositories of .NET Core, including dotnet/coreclr and dotnet/corefx.\r\n\r\n.NET’s repository structure on GitHub was initially created in a fairly fine-grained manner, with the aim of enabling runtime agility and increased developer productivity.  However, this separation has led to a variety of complications for contributors and maintainers alike.  For example:\r\n- **Confusion about where issues should be opened.**  It’s not always clear in which repo an issue should be reported, complicated by the fact that some implementations actually span repositories (e.g. a type might be exposed through a reference assembly and have its tests in corefx but actually be implemented in System.Private.CoreLib in coreclr).\r\n- **Difficulty sharing source.**  System.Private.CoreLib is intricately connected to the rest of the runtime, and thus has lived with the runtime code.  That, however, means that although corefx has been intended as the place to share as much core library code as possible across any underlying runtime, we’ve needed to keep a significant body of code in System.Private.CoreLib, which then has meant it’s needed to be “mirrored” to each runtime repo (coreclr, corert, mono) that needs to consume it as source; similarly, corefx has similarly required access to much of that source, for example to use the same interop DllImports that are employed elsewhere in the runtimes.  The automatic mirror that shares this source needs to be maintained, and even when it has been, it’s often led to lag.  It’s also complicated developer processes, where to validate a change in one repo generally requires manually mirroring the code to other local repos in order to validate the change and ensure merging into one repo won’t break the others.\r\n- **PRs spanning multiple repos.**  Because the runtime, CoreLib, and the core libraries are all intricately linked, changing runtime behaviors, adding new APIs, or changing various build processes (e.g. improving static analysis) often requires multiple PRs carefully staged across time and multiple repos.  For example, to add a new method to a type like Dictionary<>, a developer must first make the source changes in her local coreclr repo and the test and reference assembly changes in her local corefx repo.  When satisfied with the fix, the developer must submit a PR to coreclr as well as a PR to corefx, the latter of which will fail.  Eventually the coreclr PR will be merged, and the changes will mirror to the other runtimes that also require the update.  Eventually those mirror PRs will be merged, and builds will be created containing the fix for each runtime.  At some point later those builds will be consumed into the corefx repo, after which point the original corefx PR can be re-validated and eventually merged.  That’s the best case; things get more complicated in situations where there are bidirectional dependencies.\r\n- **Building an installable runtime.** Self-hosting a custom built .NET requires intricate knowledge of how all the repos work and interact.  A developer can’t just clone a single repo, make a desired change, and easily produce an installer.\r\n- **Consistency.**  One goal we had for more fine-grained repos was to enable isolation and independence for teams working within each repo’s confines, but this has led to non-trivial duplication of effort on things like build systems and CI, and then the resulting lack of consistency as each system ends up diverging from the others.\r\n\r\nThe issues go beyond the runtime.  For example, the ASP.NET maintainers and community did a great job in the past year or so consolidating from ~55 repos down to ~5 repos, but that’s still more repos than is desirable, leading to similar issues as cited above for the runtime.  On top of that, these ASP.NET repositories are in the aspnet GitHub org, which adds an additional set of issues, for example:\r\n- **Complications moving issues between repos.**  If a developer opens an issue in aspnet/aspnetcore and it’s determined that the cause of the issue is actually in dotnet/corefx, there is no GitHub mechanism to enable easily moving that issue across the aspnet to dotnet organizational boundary.\r\n- **Permissions.** Each organization’s permissions end up needing to be managed and maintained separately.\r\n\r\nThe issues extend into tooling as well.  For example, we currently have multiple repositories that all logically make up the dotnet CLI, but actually creating a working installer spans multiple repos.\r\n\r\n### Plan\r\n\r\nTo address these issues, we’re planning to make some changes to our repository structure:\r\n- **dotnet/platform.**  We plan to combine dotnet/coreclr, dotnet/corefx, dotnet/corert, dotnet/core-setup, and the relevant portions of mono/mono into a new dotnet/platform repo.  Everything needed to build and produce the Microsoft.NETCore.App shared framework will be in this repo.  We will no longer suffer from the complications of source mirroring.  Features like changing runtime behavior or adding an API will no longer require a complicated dance across multiple repos.  Etc.\r\n- **dotnet/aspnetcore.**  We plan to move the existing aspnet/aspnetcore repository into the dotnet organization.  Along with that, we aim to combine a variety of the other aspnet repositories into aspnetcore, such as aspnet/blazor.  Whether repos like entityframeworkcore remain separate or combined remains an open question.  A goal is that, just as dotnet/platform will be responsible for the creation of Microsoft.NETCore.App, dotnet/aspnetcore will be responsible for the creation of Microsoft.AspNETCore.App.\r\n- **dotnet/cli.**  We plan to combine dotnet/toolset and dotnet/sdk into the dotnet/cli repo.\r\n\r\n## To discuss these plans, please comment on the corresponding issue at https://github.com/dotnet/coreclr/issues/26175.\r\n\r\n### FAQ\r\n\r\n#### Why are we merging repos?\r\n\r\nWe believe we can significantly improve several aspects of .NET on GitHub by combining repos, benefiting both maintainers and contributors.  These improvements will manifest in a variety of ways, such as in better issue management, much easier models of contribution, and easier and faster ways to build and install the resulting bits.\r\n\r\n####  What will happen to the aspnet org?\r\n\r\nThe aspnet org as a separate entity is legacy and artificial.  In time we hope to absorb it into the dotnet org and sunset the aspnet org.\r\n\r\n#### Will the coreclr and corefx repos go away?\r\n\r\nWith the help of GitHub, we plan to migrate all issues from these repos to the new dotnet/platform repo, and then lock down creation of additional issues, such that the repos will no longer be used for issue management.  We will also inhibit the creation of PRs to the master branch, which will effectively become an archive for read-only review of history.  In this sense, these repos will be archived, and no active development will happen with them.  However, we plan to continue servicing previous .NET Core releases out of these repos, so the various release branches (e.g. release/2.1, release/3.0, etc.) will continue to see (limited) activity.\r\n\r\n#### Will the mono repo go away?\r\n\r\nNo. mono/mono contains the source for the full mono stack and will continue to live on happily.  We will simply be moving the managed source associated with System.Private.CoreLib and copying the relatively small amount of source that makes up the native mono runtime to dotnet/platform.  We may choose to then use some mirroring technology to keep the runtime copy in sync (this will, however, not suffer from the same mirroring issues we currently experience, as we would not be mirroring between two components required to build the same binaries), or we may choose to let them diverge and manually sync only those changes deemed relevant to both implementations.\r\n\r\n#### Will the corert repo go away?\r\n\r\nYes.  We plan to retire/archive the corert repo.  Some of the technology in the corert repo will be migrated to the master branch of dotnet/platform, where it will be productized as part of .NET.  Other portions of the corert repo will be migrated to feature branches of dotnet/platform, where the experimentation can continue.  In this way, we will use feature branches to continue experimenting with the corert technology, while making it easier to share portions with its shipping counterpart and also graduate functionality into master if/when it’s ready.\r\n\r\n#### Does this mean there will be a single repo for all of .NET?\r\n\r\nNo.  We will be reducing the number of repos that contribute to .NET, but currently we do not believe that going all the way down to one is the right answer.\r\n\r\n#### Doesn’t this mean that issue and PR tracking will now be overwhelming?\r\n\r\nIt is already the case that the vast majority of issues in a given repo are not relevant to any individual developer, and with several thousand open issues in each repo and on the order of a hundred open PRs in each, we already need systems (e.g. labels) to successfully manage issues and PRs.  As such, we don’t believe the merging will have a significant impact on this aspect of developer productivity.  If it turns out to have an unexpectedly large negative impact, we will work with the community to find ways to mitigate the problem.  However, there are already a multitude of successful open source projects on GitHub with at least an order of magnitude more issues.\r\n\r\n#### What will happen to existing issues?\r\n\r\nWith the help of GitHub functionality, we plan to migrate all issues from old repos (e.g. dotnet/coreclr, dotnet/corefx) to the new repos (e.g. dotnet/platform).  We may also use this as a forcing function to revisit stale issues and either close those that are no longer relevant or reinvigorate those that are demanding of more immediate attention.\r\n\r\n#### What about git history?\r\n\r\nIn general, we plan to keep history, such that history from each constituent repo will be a part of the new repo.  However, we have made some mistakes in the past (e.g. large binaries, multitudes of automated PRs for flowing bits and source between repos, etc.), and we plan to rewrite history to correct those mistakes wherever possible and impactful.  Some rough calculations suggest this could end up significantly reducing the size of the repos as well as the time it takes to clone, which should not only help developers approaching the project but also CI.  This will end up meaning that SHAs may be different in the new repo than they were in the old repo; as previously mentioned, however, any references to the old SHAs in the old repos will continue to work, as those repos will remain accessible.\r\n\r\n#### Will I still show up in the contributor list due to previous contributions?\r\n\r\nYes.  We plan to merge all such history.\r\n\r\n#### Will this break debugging with SourceLink?\r\n\r\nNo.  The existing repos will continue to be accessible, and commit SHAs there will remain unchanged.\r\n\r\n#### Might plans change?\r\n\r\nSure.  Part of the goal of posting this announcement is to hear from you, hear about additional benefits you're excited about, and hear about additional concerns we may not have considered.  We will include such ideas in our planning and course correct as necessary."}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"10366981435","Type":"PullRequestEvent","CreatedAt":"2019-09-07T03:40:05","Actor":"grant-d","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/26575","RelatedDescription":"Opened pull request \"[WIP] Add 'split' support for ReadOnlySpan\" (#26575) at dotnet/coreclr","RelatedBody":"Resolves https://github.com/dotnet/corefx/issues/26528"},{"Id":"10366833003","Type":"PullRequestEvent","CreatedAt":"2019-09-07T02:14:42","Actor":"fadimounir","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/26546","RelatedDescription":"Merged pull request \"Load generics R2R code from the root module\" (#26546) at dotnet/coreclr","RelatedBody":"PR includes:\r\n1) Cherry pick https://github.com/dotnet/coreclr/commit/21d651bb4613ca480cd97793fe5d854af36b765c\r\n2) Changes to prestub.cpp to lookup the root module for R2R generics code\r\n\r\nThis change can be used with the newly added switch to the cpaot compiler (--compilebubblegenerics)"},{"Id":"10366674269","Type":"PullRequestEvent","CreatedAt":"2019-09-07T00:51:29","Actor":"davidwrighton","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/26574","RelatedDescription":"Opened pull request \"Add support for logging generics ibc data\" (#26574) at dotnet/coreclr","RelatedBody":"- set COMPLUS_ZapBBInstrR2RGenerics=2 to get logging that will be parsed best by cpaot"},{"Id":"10366547534","Type":"PullRequestEvent","CreatedAt":"2019-09-07T00:00:05","Actor":"josalem","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/26573","RelatedDescription":"Opened pull request \"[test] Protect against zombie IPC sockets in tests\" (#26573) at dotnet/coreclr","RelatedBody":"Add a check to ensure that there are not any zombied Diagnostics IPC sockets on Linux and error in a readable manner if we are unable to clean them up before running the test.\r\n\r\nBugs, test failures, etc. can leave behind Diagnostics IPC sockets on the test machines.  In typical use cases, these will be cleaned up by computer restart (`/tmp` gets cleared on restart), but the test VMs can be in use for long periods of time without being restarted.  If a test were to catastrophically fail resulting the in the pipe not being cleaned up, and the VM had been alive long enough for an EventPipe test to get the same PID as it previously had when it failed, we would error in the test.  This change will prevent previous test failures from tainting later test runs accidentally.\r\n\r\nCC - @tommcdon "},{"Id":"10366322273","Type":"PullRequestEvent","CreatedAt":"2019-09-06T22:46:34","Actor":"sdmaclea","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/26572","RelatedDescription":"Opened pull request \"Fix SP alignment during FuncEval\" (#26572) at dotnet/coreclr","RelatedBody":"When the debugger is stopped at an arbitrary assembly instruction, the SP is not guaranteed to be aligned. When hijacking a thread, we need to align the SP before making a `FuncEval` call.\r\n\r\nFixes #25753 \r\n\r\n/cc @davidfowl @gregg-miskelly "}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"10367134297","Type":"PullRequestEvent","CreatedAt":"2019-09-07T05:13:40","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/12526","RelatedDescription":"Merged pull request \"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore\" (#12526) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190906.11\r\n- **Date Produced**: 9/7/2019 4:38 AM\r\n- **Commit**: c3fa16970d7a4f80d079b69468f38228ff0e5f84\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-rc2.19456.11\r\n\r\n[marker]: <> (End:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n\r\n"},{"Id":"10367079605","Type":"PullRequestEvent","CreatedAt":"2019-09-07T04:38:19","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/12526","RelatedDescription":"Opened pull request \"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore\" (#12526) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190906.11\r\n- **Date Produced**: 9/7/2019 4:38 AM\r\n- **Commit**: c3fa16970d7a4f80d079b69468f38228ff0e5f84\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-rc2.19456.11\r\n\r\n[marker]: <> (End:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n\r\n"},{"Id":"10366998464","Type":"IssuesEvent","CreatedAt":"2019-09-07T03:50:26","Actor":"SidShetye","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/12525","RelatedDescription":"Opened issue \"dotnet publish for single file executable doesn't copy supporting non-executable files\" (#12525) at dotnet/cli","RelatedBody":"When publishing a dotnet core app to a single file per directions at https://docs.microsoft.com/en-us/dotnet/core/whats-new/dotnet-core-3-0#single-file-executables, any supporting files that are supposed to be copied over are not copied. This typically breaks any project dependent on such additional file \r\n(non-code) resources.\r\n\r\n## Steps to reproduce\r\n\r\n1. clone repo @ https://github.com/SidShetye/DotNetPublishTrimSkipsCopyFiles\r\n2. `dotnet publish`\r\n3. navigate to `\\bin\\Debug\\netcoreapp3.0\\win10-x64\\publish\\` and run `DotNetPublishTrimSkipsCopyFiles.exe`\r\n4. See error\r\n\r\n## Expected  behavior\r\n\r\nSupporting files are copied over based on the csproj definition of `CopyToOutputDirectory` = `Always`\r\n\r\n## Actual behavior\r\n\r\nFiles are not copied\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n<details>\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview9-014004\r\n Commit:    8e7ef240a5\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview9-014004\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview9-19423-09\r\n  Commit:  2be172345a\r\n\r\n.NET Core SDKs installed:\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.302 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.400 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.401 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.402 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.503 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.504 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.505 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.507 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.700 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.701 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.801 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.300 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.301 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.401 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview9-014004 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview9.19424.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.3-servicing-26724-03 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview9-19423-09 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview9-19423-09 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n</details>\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"10366969229","Type":"PullRequestEvent","CreatedAt":"2019-09-07T03:32:39","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/12481","RelatedDescription":"Merged pull request \"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore\" (#12481) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190906.8\r\n- **Date Produced**: 9/7/2019 2:46 AM\r\n- **Commit**: 8a8a0a5b827507ce62285d8dd547e77c335904d1\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-rc2.19456.8\r\n\r\n[marker]: <> (End:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"10366944614","Type":"PullRequestEvent","CreatedAt":"2019-09-07T03:18:25","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/12520","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/core-setup\" (#12520) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190906.27\r\n- **Date Produced**: 9/7/2019 1:33 AM\r\n- **Commit**: eee6d7a3cc7418cec87f109a1cf6d94e97e25cb0\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19456.27\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19456.27\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19456.27\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19456.27\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19456.27\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"10366743315","Type":"PullRequestEvent","CreatedAt":"2019-09-07T01:25:43","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/12524","RelatedDescription":"Merged pull request \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#12524) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190906.22\r\n- **Date Produced**: 9/6/2019 11:22 PM\r\n- **Commit**: 321d01390849836541c2caac6d124c75ef961578\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.1.0-preview1.19456.22\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.1.0-preview1.19456.22\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.1.0-preview1.19456.22\r\n  - **Microsoft.NET.HostModel** -> 3.1.0-preview1.19456.22\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.1.0-preview1.19456.22\r\n\r\n[marker]: <> (End:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n\r\n"},{"Id":"10366671863","Type":"PullRequestEvent","CreatedAt":"2019-09-07T00:50:22","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/12524","RelatedDescription":"Opened pull request \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#12524) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190906.22\r\n- **Date Produced**: 9/6/2019 11:22 PM\r\n- **Commit**: 321d01390849836541c2caac6d124c75ef961578\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.1.0-preview1.19456.22\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.1.0-preview1.19456.22\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.1.0-preview1.19456.22\r\n  - **Microsoft.NET.HostModel** -> 3.1.0-preview1.19456.22\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.1.0-preview1.19456.22\r\n\r\n[marker]: <> (End:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n\r\n"},{"Id":"10366589108","Type":"PullRequestEvent","CreatedAt":"2019-09-07T00:15:23","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/12523","RelatedDescription":"Opened pull request \"[release/3.0.100-preview9] Update dependencies from dotnet/sdk\" (#12523) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:96481569-9086-408c-b59d-08d7219835fd)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190906.2\r\n- **Date Produced**: 9/6/2019 10:47 PM\r\n- **Commit**: 76255c6d07b95ff13c4f3c195063504598a7e723\r\n- **Branch**: refs/heads/release/3.0.100-preview9\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-rc1.19456.2\r\n\r\n[marker]: <> (End:96481569-9086-408c-b59d-08d7219835fd)\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"10366503879","Type":"PullRequestEvent","CreatedAt":"2019-09-06T23:44:06","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1514","RelatedDescription":"Opened pull request \"Expose SequenceReader<T> and friends\" (#1514) at dotnet/standard","RelatedBody":""},{"Id":"10366501157","Type":"PullRequestEvent","CreatedAt":"2019-09-06T23:43:05","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1513","RelatedDescription":"Opened pull request \"Add missing readonly modifiers\" (#1513) at dotnet/standard","RelatedBody":""},{"Id":"10366486875","Type":"PullRequestEvent","CreatedAt":"2019-09-06T23:38:03","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1508","RelatedDescription":"Merged pull request \"Add missing readonly modifiers\" (#1508) at dotnet/standard","RelatedBody":"I've recently updated the reference assembly generation tool to the latest C# version. This exposed a bug where .NET Standard didn't include `readonly` modifiers that .NET Core added in 3.0. For the affected APIs these wouldn't cause correctness issues, but it would result in superfluous defensive copies, which, given the size of some of these structs, could result in reduced performance.\r\n\r\n/cc @stephentoub @tannergooding "},{"Id":"10366022838","Type":"IssuesEvent","CreatedAt":"2019-09-06T21:34:20","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/1497","RelatedDescription":"Closed issue \"Expose ReadOnlySequence<T>.GetFirstSpan()\" (#1497) at dotnet/standard","RelatedBody":"_Originally posted by @davidfowl in https://github.com/dotnet/corefx/issues/33029#issuecomment-526800999_"},{"Id":"10366022777","Type":"PullRequestEvent","CreatedAt":"2019-09-06T21:34:19","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1500","RelatedDescription":"Merged pull request \"Expose SequenceReader<T> and friends\" (#1500) at dotnet/standard","RelatedBody":"Fixes #1493, #1497\r\n\r\n/cc @chris579"},{"Id":"10366022767","Type":"IssuesEvent","CreatedAt":"2019-09-06T21:34:19","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/1493","RelatedDescription":"Closed issue \"Make SequenceReader available\" (#1493) at dotnet/standard","RelatedBody":"Reading from a `ReadOnlySequence<T>` requires to keep track of position and consumed data. In core you can use the type [SequenceReader](https://docs.microsoft.com/en-us/dotnet/api/system.buffers.sequencereader-1?view=netcore-3.0) that does that for you. In standard you don't have it which leads to three possibilities:\r\n- Write your own implementation which does similar things like `SequenceReader`\r\n- Copy the implementation of `SequenceReader`\r\n- Converting the `ReadOnlySequence<t>` to `T[]` which defeats the purpose\r\n\r\nAll options are not convenient. Making `SequenceReader` available in standard would allow libraries to use the performance benefits of `SequenceReader` without the need to rely on third party implementations or crushing performance because of allocations."},{"Id":"10365996049","Type":"IssuesEvent","CreatedAt":"2019-09-06T21:28:55","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/1512","RelatedDescription":"Opened issue \"Align private fields with structs from re-run in CoreFX\" (#1512) at dotnet/standard","RelatedBody":"Once you have it, we should take it to ship room and align it between .NET Standard and .NET Core.\r\n\r\n_Originally posted by @terrajobst in https://github.com/dotnet/standard/pull/1500_"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"10367083185","Type":"IssuesEvent","CreatedAt":"2019-09-07T04:40:46","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/40905","RelatedDescription":"Closed issue \"Supports for serializing enums to their text name\" (#40905) at dotnet/corefx","RelatedBody":"# Issue Title\r\n1) Define “Foo” class which provide access to enum property “Color” (enumeration has different values)\r\n2) Create instance and serialize to json with System.Text.Json.JsonSerializer.Serialize(…)\r\n\r\n# General\r\nRepresentation of serialized enum is integer instead of string e.g. “2” instead of “Red”. Because of shared public APIs with customers it's not so easy possible to write converters for enumerations. Therefore this small feature would be very helpful to support our switch. (observed with W10 and .Net Core SDK 3.0.100 preview8 x64) \r\n"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"10366949744","Type":"PullRequestEvent","CreatedAt":"2019-09-07T03:21:23","Actor":"ivanbasov","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/38524","RelatedDescription":"Merged pull request \"Updating TPN to the current MSFT format and adding Humanizer, SQLitePCLRaw and ICSharpCode.Decompiler\" (#38524) at dotnet/roslyn","RelatedBody":""},{"Id":"10366641280","Type":"PullRequestEvent","CreatedAt":"2019-09-07T00:36:58","Actor":"ivanbasov","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/38569","RelatedDescription":"Opened pull request \"Remove legacy completion\" (#38569) at dotnet/roslyn","RelatedBody":""},{"Id":"10366580294","Type":"IssuesEvent","CreatedAt":"2019-09-07T00:11:51","Actor":"filipnavara","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/38568","RelatedDescription":"Opened issue \"Regression: Operator '==' cannot be applied to operands of type 'T' and 'default'\" (#38568) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\n\r\n.NET SDK 5.0.100-alpha1-014075\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Get https://github.com/dotnet/performance\r\n2. Run `dotnet run -f netcoreapp5.0 -c Release` from `performance/src/benchmarks/micro/` directory\r\n\r\n**Expected Behavior**:\r\n\r\nNo error.\r\n\r\n**Actual Behavior**:\r\n\r\n```\r\ncorefx/System.Buffers/ArrayPoolTests.cs(44,21): error CS0019: Operator '==' cannot be applied to operands of type 'T' and 'default' [/Users/filipnavara/agent/_work/1/s/work/performance/src/benchmarks/micro/MicroBenchmarks.csproj]\r\n```\r\n\r\nRelevant code: \r\n\r\nhttps://github.com/dotnet/performance/blob/97d49cfc30502b835122d360ca4b93f29215d4cc/src/benchmarks/micro/corefx/System.Buffers/ArrayPoolTests.cs#L39-L47\r\n\r\nThis worked few hours ago with the latest .NET SDK from git master (as of 06/09/2019, 18:09:56 UTC). I assume the Roslyn dependency got bumped and introduced some breaking change.\r\n"},{"Id":"10366578454","Type":"IssuesEvent","CreatedAt":"2019-09-07T00:11:06","Actor":"petrroll","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/38567","RelatedDescription":"Opened issue \"Unnecessary code colapse points \" (#38567) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\n16.4.intpreview\r\n\r\n**Steps to Reproduce**:\r\nHave code with sufficient amount of constructs that have header and then block. Look at collapsible regions.\r\n\r\n```\r\n        /// <summary>\r\n        /// Use this helper to register multiple refactorings (<paramref name=\"actions\"/>).\r\n        /// </summary>\r\n        internal static void RegisterRefactorings<TCodeAction>(\r\n            this CodeRefactoringContext context, ImmutableArray<TCodeAction> actions)\r\n            where TCodeAction : CodeAction\r\n        {\r\n            if (!actions.IsDefault)\r\n            {\r\n                foreach (var action in actions)\r\n                {\r\n                    context.RegisterRefactoring(action);\r\n                }\r\n            }\r\n        }\r\n````\r\n\r\n![image](https://user-images.githubusercontent.com/1764721/64466836-e70df900-d0c8-11e9-8d71-3543dbf6209b.png)\r\n\r\n\r\n**Expected Behavior**:\r\nOnly the top marked collapsible region is there.\r\n\r\n**Actual Behavior**:\r\nBoth are, the lower one is redundant from UX point of view.\r\n\r\nUseful:\r\n![image](https://user-images.githubusercontent.com/1764721/64466920-47049f80-d0c9-11e9-8eb6-ef52ffee4164.png)\r\n\r\nNot useful:\r\n![image](https://user-images.githubusercontent.com/1764721/64466896-2fc5b200-d0c9-11e9-8e9b-0fdde809c7d1.png)\r\n\r\n"},{"Id":"10366553960","Type":"PullRequestEvent","CreatedAt":"2019-09-07T00:02:06","Actor":"dotnet-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/38566","RelatedDescription":"Opened pull request \"Merge master to master-vs-deps\" (#38566) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"10366667639","Type":"PullRequestEvent","CreatedAt":"2019-09-07T00:48:25","Actor":"davidwrighton","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7779","RelatedDescription":"Opened pull request \"Resource writing\" (#7779) at dotnet/corert","RelatedBody":"- Refactor the win32 resource reading code to use more natural managed data structures\r\n- Build a Win32 resource emitter on top of refactored data structures\r\n- Replace resource section copy logic with new node to generate win32 resources"},{"Id":"10366476946","Type":"PullRequestEvent","CreatedAt":"2019-09-06T23:34:35","Actor":"davidwrighton","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7776","RelatedDescription":"Merged pull request \"Partial compilation and generic ibc processing\" (#7776) at dotnet/corert","RelatedBody":"- Support for partial compilation\r\n- Support for parsing generics in IBC data\r\n - Bonus feature of searching referenced and input assemblies for types if the module in the IBC data is invalid"},{"Id":"10366360441","Type":"PullRequestEvent","CreatedAt":"2019-09-06T22:57:58","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7778","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#7778) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub"},{"Id":"10364521024","Type":"PullRequestEvent","CreatedAt":"2019-09-06T17:23:59","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7778","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#7778) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"10364110559","Type":"PullRequestEvent","CreatedAt":"2019-09-06T16:18:41","Actor":"trylek","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7777","RelatedDescription":"Opened pull request \"Output raw test lists for the individual outcomes from SuperIlc\" (#7777) at dotnet/corert","RelatedBody":"This change tweaks SuperIlc to emit simple line-oriented test lists\r\nfor the various compilation and execution outcomes. I found this\r\nquite useful for comparing various runs. I have also deleted a bit\r\nof dead code I noticed.\r\n\r\nThanks\r\n\r\nTomas"},{"Id":"10358729210","Type":"PullRequestEvent","CreatedAt":"2019-09-06T00:32:06","Actor":"davidwrighton","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7776","RelatedDescription":"Opened pull request \"Partial compilation and generic ibc processing\" (#7776) at dotnet/corert","RelatedBody":"- Support for partial compilation\r\n- Support for parsing generics in IBC data\r\n - Bonus feature of searching referenced and input assemblies for types if the module in the IBC data is invalid"},{"Id":"10357905651","Type":"PullRequestEvent","CreatedAt":"2019-09-05T21:27:38","Actor":"davidwrighton","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7758","RelatedDescription":"Merged pull request \"Ibc work\" (#7758) at dotnet/corert","RelatedBody":"Implement IBC tuning compilation and parsing\r\nStill tbd\r\n- method block count utilization\r\n- generics testing\r\n\r\n(Also my most recent changes introduced some sort of subtle bug, but I wanted to get this out for initial code review from the folks in Europe.)"},{"Id":"10357184969","Type":"PullRequestEvent","CreatedAt":"2019-09-05T19:38:18","Actor":"fadimounir","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7772","RelatedDescription":"Merged pull request \"Compile cross-module generics in the same version bubble.\" (#7772) at dotnet/corert","RelatedBody":"This work is related to the single-exe prototype, but after discussing with @davidwrighton, these are changes that we can have in master as well.\r\n\r\nCompiling generics from external modules in the version bubble is enabled using a command line switch.\r\n\r\nOther changes: Changing signatures in hashtable of instantiations to include owning type as a way of encoding the module override info\r\n"},{"Id":"10354877327","Type":"PullRequestEvent","CreatedAt":"2019-09-05T14:33:56","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7773","RelatedDescription":"Merged pull request \"Get jitwrapper building on x86\" (#7773) at dotnet/corert","RelatedBody":"CoreCLR repo is going to build it that way. I could exclude that outside x64, but it's just better to fix it..."},{"Id":"10354411490","Type":"PullRequestEvent","CreatedAt":"2019-09-05T13:42:33","Actor":"janvorli","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7767","RelatedDescription":"Merged pull request \"Implement SystemV AMD64 ABI struct classification\" (#7767) at dotnet/corert","RelatedBody":"This change implements SystemV AMD64 ABI struct classification necessary\r\nfor correct passing of function arguments of struct types and returning\r\nthese by value on Unix AMD64.\r\n\r\nThis change is a port of the CoreCLR version with necessary changes to reflect differences in the type system interface between CoreRT and CoreCLR. I have also added caching of the classification result as JIT calls classification for the same type many times."},{"Id":"10352674950","Type":"IssuesEvent","CreatedAt":"2019-09-05T09:45:28","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/6379","RelatedDescription":"Closed issue \"Match IL intrinsic expansion logic with CoreCLR\" (#6379) at dotnet/corert","RelatedBody":"See #6378. This will be needed to compile CoreLib."},{"Id":"10352667764","Type":"IssuesEvent","CreatedAt":"2019-09-05T09:44:35","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/6315","RelatedDescription":"Closed issue \"R2R InvalidCastException due to generating ValueType/Enum stubs\" (#6315) at dotnet/corert","RelatedBody":"The TypeSystemContext Is automatically adding Equals and GetHashCode stubs to ValueTypes and Enums when ```GetAllMethodsForValueType```, ```GetAllMethodsForEnum```, or ```TryResolveConstrainedEnumMethod``` are called. This has a couple of problems:\r\n1. The stubs trigger an InvalidCastException in ```ReadyToRunCodegenCompilation.ComputeDependencyNodeDependencies``` when it tries to cast them to ```EcmaMethod```\r\n2. It's probably incorrect to generate stubs for ValueTypes outside of the current assembly and a R2R helper call should be used instead."}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"10366286218","Type":"PullRequestEvent","CreatedAt":"2019-09-06T22:36:34","Actor":"mmitche","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/3608","RelatedDescription":"Merged pull request \"[release/3.0.100-preview9] Update dependencies from dotnet/core-setup\" (#3608) at dotnet/sdk","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:99181a82-e62d-4080-a0f9-08d721cca946)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190906.20\r\n- **Date Produced**: 9/6/2019 9:40 PM\r\n- **Commit**: 8f5d7b1ba4f744199ba006cac38dfcb9a2408880\r\n- **Branch**: refs/heads/release/3.0-preview9\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-rc1-19456-20\r\n\r\n[marker]: <> (End:99181a82-e62d-4080-a0f9-08d721cca946)\r\n\r\n"},{"Id":"10366278167","Type":"PullRequestEvent","CreatedAt":"2019-09-06T22:34:15","Actor":"dotnet-maestro[bot]","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/3608","RelatedDescription":"Opened pull request \"[release/3.0.100-preview9] Update dependencies from dotnet/core-setup\" (#3608) at dotnet/sdk","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:99181a82-e62d-4080-a0f9-08d721cca946)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190906.20\r\n- **Date Produced**: 9/6/2019 9:40 PM\r\n- **Commit**: 8f5d7b1ba4f744199ba006cac38dfcb9a2408880\r\n- **Branch**: refs/heads/release/3.0-preview9\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-rc1-19456-20\r\n\r\n[marker]: <> (End:99181a82-e62d-4080-a0f9-08d721cca946)\r\n\r\n"}],"ResultType":"GitHubEvent"},"Home-Issues":{"Issues":[{"Id":"475315730","IsPullRequest":false,"CreatedAt":"2019-07-31T19:23:23","Actor":"MeikTranel","Number":"148","RawContent":null,"Title":"Clarify guidelines in regards to Options and Requirements","State":"open","Body":"I'd be interested in which part of the project submission guidelines is optional and which are deal breaker requirements.\r\n\r\n- Is the Role Matrix laid out an absolute or (as can be read between the lines) just a preset, which may be subject to individual projects needs?\r\n- Is it a strong requirement that the project uses the contributor covenant CoC?","Url":"https://github.com/dotnet/foundation/issues/148","RelatedDescription":"Open issue \"Clarify guidelines in regards to Options and Requirements\" (#148)"},{"Id":"455670422","IsPullRequest":true,"CreatedAt":"2019-06-13T10:49:30","Actor":"gep13","Number":"147","RawContent":null,"Title":"(GH-111) Update Source Link location","State":"open","Body":"","Url":"https://github.com/dotnet/foundation/pull/147","RelatedDescription":"Open PR \"(GH-111) Update Source Link location\" (#147)"},{"Id":"455555823","IsPullRequest":true,"CreatedAt":"2019-06-13T06:28:59","Actor":"gep13","Number":"146","RawContent":null,"Title":"Update Cake Project Contacts","State":"closed","Body":"@jongalloway just noticed that this wasn't up to date.","Url":"https://github.com/dotnet/foundation/pull/146","RelatedDescription":"Closed or merged PR \"Update Cake Project Contacts\" (#146)"},{"Id":"441542047","IsPullRequest":true,"CreatedAt":"2019-05-09T18:35:22","Actor":"mitchelsellers","Number":"145","RawContent":null,"Title":"Edits to DNN Platform Information","State":"closed","Body":"Edits to reflect changes in repository structure with recent modifications to the overall project structure.","Url":"https://github.com/dotnet/foundation/pull/145","RelatedDescription":"Closed or merged PR \"Edits to DNN Platform Information\" (#145)"},{"Id":"437980746","IsPullRequest":true,"CreatedAt":"2019-05-03T20:10:38","Actor":"FlorianRappl","Number":"143","RawContent":null,"Title":"Add AngleSharp","State":"closed","Body":"cc @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/143","RelatedDescription":"Closed or merged PR \"Add AngleSharp\" (#143)"},{"Id":"426787230","IsPullRequest":true,"CreatedAt":"2019-05-03T20:08:40","Actor":"mairaw","Number":"141","RawContent":null,"Title":"add links to ML.NET docs","State":"closed","Body":"/cc @JRAlexander @shauheen \r\n\r\nTo match the info we have added for other projects","Url":"https://github.com/dotnet/foundation/pull/141","RelatedDescription":"Closed or merged PR \"add links to ML.NET docs\" (#141)"},{"Id":"440030132","IsPullRequest":true,"CreatedAt":"2019-05-03T20:08:15","Actor":"tomasherceg","Number":"144","RawContent":null,"Title":"Add DotVVM","State":"closed","Body":"cc @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/144","RelatedDescription":"Closed or merged PR \"Add DotVVM\" (#144)"},{"Id":"426787542","IsPullRequest":true,"CreatedAt":"2019-03-29T14:44:24","Actor":"mairaw","Number":"142","RawContent":null,"Title":"add docs samples link","State":"closed","Body":"@BillWagner should we add the samples project too?","Url":"https://github.com/dotnet/foundation/pull/142","RelatedDescription":"Closed or merged PR \"add docs samples link\" (#142)"},{"Id":"426658581","IsPullRequest":true,"CreatedAt":"2019-03-29T02:16:07","Actor":"scottaddie","Number":"139","RawContent":null,"Title":"Add link to ASP.NET Core docs","State":"closed","Body":"Provide a link to the docs site for ASP.NET Core.","Url":"https://github.com/dotnet/foundation/pull/139","RelatedDescription":"Closed or merged PR \"Add link to ASP.NET Core docs\" (#139)"},{"Id":"426666928","IsPullRequest":true,"CreatedAt":"2019-03-29T02:15:48","Actor":"BillWagner","Number":"140","RawContent":null,"Title":"add links to .NET docs","State":"closed","Body":"/cc @mairaw @scottaddie\r\n\r\nMaira, did I miss any project repos to tag?","Url":"https://github.com/dotnet/foundation/pull/140","RelatedDescription":"Closed or merged PR \"add links to .NET docs\" (#140)"},{"Id":"419205679","IsPullRequest":true,"CreatedAt":"2019-03-18T21:04:01","Actor":"MikeWilliams-UK","Number":"137","RawContent":null,"Title":"Add V3.1 repo and change documentation link","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/137","RelatedDescription":"Closed or merged PR \"Add V3.1 repo and change documentation link\" (#137)"},{"Id":"419897914","IsPullRequest":true,"CreatedAt":"2019-03-18T21:03:34","Actor":"devlead","Number":"138","RawContent":null,"Title":"Add Dave to cake.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/138","RelatedDescription":"Closed or merged PR \"Add Dave to cake.md\" (#138)"},{"Id":"391459677","IsPullRequest":false,"CreatedAt":"2019-03-08T19:00:06","Actor":"manne","Number":"123","RawContent":null,"Title":"Missing logo for Steeltoe","State":"closed","Body":"`https://brandfolder.com/pivotal-assets/attachments/ohxttd-7yxa60-clvf50/pivotal-assets-pivotal-genericfile.png` redirects to a sign in page\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L128-L130","Url":"https://github.com/dotnet/foundation/issues/123","RelatedDescription":"Closed issue \"Missing logo for Steeltoe\" (#123)"},{"Id":"417018694","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:32","Actor":"jkonicki","Number":"136","RawContent":null,"Title":"Fix logo and update team contributors","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/136","RelatedDescription":"Closed or merged PR \"Fix logo and update team contributors\" (#136)"},{"Id":"416428925","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"135","RawContent":null,"Title":"adds Umbraco logo","State":"closed","Body":"fixes #124 ","Url":"https://github.com/dotnet/foundation/pull/135","RelatedDescription":"Closed or merged PR \"adds Umbraco logo\" (#135)"},{"Id":"391459812","IsPullRequest":false,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"124","RawContent":null,"Title":"Missing logo for Umbraco","State":"closed","Body":"`https://fbcdn-profile-a.akamaihd.net/hprofile-ak-xap1/v/t1.0-1/p160x160/971596_519168901464439_566592989_n.png?oh=ce61e5b4cbd60c0d99c4164cbb05a434&oe=54F091C9&__gda__=1424472439_c9f76213a915bc2af88246f464f29e8b` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L149-L151","Url":"https://github.com/dotnet/foundation/issues/124","RelatedDescription":"Closed issue \"Missing logo for Umbraco\" (#124)"},{"Id":"416427614","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:45","Actor":"manne","Number":"134","RawContent":null,"Title":"adds the prism logo","State":"closed","Body":"fixes #126 ","Url":"https://github.com/dotnet/foundation/pull/134","RelatedDescription":"Closed or merged PR \"adds the prism logo\" (#134)"},{"Id":"391460225","IsPullRequest":false,"CreatedAt":"2019-03-08T18:58:44","Actor":"manne","Number":"126","RawContent":null,"Title":"No logo provided for Prism","State":"closed","Body":"Can/should this [image](http://prismlibrary.github.io/images/logo-prism-symbol@2x.png) be used?\r\n\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L155-L157","Url":"https://github.com/dotnet/foundation/issues/126","RelatedDescription":"Closed issue \"No logo provided for Prism\" (#126)"},{"Id":"416157860","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:26","Actor":"glennawatson","Number":"133","RawContent":null,"Title":"Add additional ReactiveUI organization projects.","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/133","RelatedDescription":"Closed or merged PR \"Add additional ReactiveUI organization projects.\" (#133)"},{"Id":"407251900","IsPullRequest":true,"CreatedAt":"2019-02-18T17:45:44","Actor":"Potapy4","Number":"132","RawContent":null,"Title":"Update MVVM project logo","State":"closed","Body":"Fixes dotnet/dotnetfoundation-website#72\r\nFixes #125","Url":"https://github.com/dotnet/foundation/pull/132","RelatedDescription":"Closed or merged PR \"Update MVVM project logo\" (#132)"},{"Id":"391459919","IsPullRequest":false,"CreatedAt":"2019-02-18T17:45:44","Actor":"manne","Number":"125","RawContent":null,"Title":"Missing logo for MVVM Light Toolkit","State":"closed","Body":"`https://raw.githubusercontent.com/paulcbetts/mvvmlight/master/Installer/InstallItems/html/MVVM_BlackText_190x147.png` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L137-L139","Url":"https://github.com/dotnet/foundation/issues/125","RelatedDescription":"Closed issue \"Missing logo for MVVM Light Toolkit\" (#125)"},{"Id":"406210463","IsPullRequest":true,"CreatedAt":"2019-02-18T17:44:39","Actor":"NextTurn","Number":"131","RawContent":null,"Title":"Replace http links with https links","State":"closed","Body":"Replace http links with https where possible - both returned 200 OK.","Url":"https://github.com/dotnet/foundation/pull/131","RelatedDescription":"Closed or merged PR \"Replace http links with https links\" (#131)"},{"Id":"399191617","IsPullRequest":true,"CreatedAt":"2019-02-02T11:04:15","Actor":"NextTurn","Number":"130","RawContent":null,"Title":"Update Open XML links","State":"closed","Body":"OpenXmlDeveloper.org was shut down long ago.\r\n\r\nThe content has been moved to EricWhite.com.","Url":"https://github.com/dotnet/foundation/pull/130","RelatedDescription":"Closed or merged PR \"Update Open XML links\" (#130)"},{"Id":"395863354","IsPullRequest":true,"CreatedAt":"2019-01-09T22:28:14","Actor":"ErikEJ","Number":"128","RawContent":null,"Title":"Update of EF description","State":"closed","Body":"@divega !","Url":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Closed or merged PR \"Update of EF description\" (#128)"},{"Id":"395901602","IsPullRequest":true,"CreatedAt":"2019-01-05T03:23:39","Actor":"MarcBruins","Number":"129","RawContent":null,"Title":"Update to absolute path","State":"closed","Body":"Update to absolute path so that when this list is copied the link will actually work","Url":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Closed or merged PR \"Update to absolute path\" (#129)"},{"Id":"395705579","IsPullRequest":true,"CreatedAt":"2019-01-04T00:22:42","Actor":"carloscds","Number":"127","RawContent":null,"Title":"Update documentation information","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/127","RelatedDescription":"Closed or merged PR \"Update documentation information\" (#127)"},{"Id":"391459057","IsPullRequest":true,"CreatedAt":"2019-01-03T04:47:09","Actor":"manne","Number":"122","RawContent":null,"Title":"targets the existing document","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/122","RelatedDescription":"Closed or merged PR \"targets the existing document\" (#122)"},{"Id":"384569679","IsPullRequest":true,"CreatedAt":"2019-01-03T04:46:31","Actor":"JamesNK","Number":"121","RawContent":null,"Title":"Add Newtonsoft.Json","State":"closed","Body":"// @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/121","RelatedDescription":"Closed or merged PR \"Add Newtonsoft.Json\" (#121)"},{"Id":"384212839","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:50","Actor":"stefanov-stefan","Number":"120","RawContent":null,"Title":"Added Telerik info","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/120","RelatedDescription":"Closed or merged PR \"Added Telerik info\" (#120)"},{"Id":"384212448","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:22","Actor":"stefanov-stefan","Number":"119","RawContent":null,"Title":"Added Telerik UWP proj","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/119","RelatedDescription":"Closed or merged PR \"Added Telerik UWP proj\" (#119)"}],"ResultType":"GitHubIssue"},"CoreCLR-Issues":{"Issues":[{"Id":"490586448","IsPullRequest":true,"CreatedAt":"2019-09-07T03:40:05","Actor":"grant-d","Number":"26575","RawContent":null,"Title":"[WIP] Add 'split' support for ReadOnlySpan","State":"open","Body":"Resolves https://github.com/dotnet/corefx/issues/26528","Url":"https://github.com/dotnet/coreclr/pull/26575","RelatedDescription":"Open PR \"[WIP] Add 'split' support for ReadOnlySpan\" (#26575)"},{"Id":"490001825","IsPullRequest":true,"CreatedAt":"2019-09-07T02:14:41","Actor":"fadimounir","Number":"26546","RawContent":null,"Title":"Load generics R2R code from the root module","State":"closed","Body":"PR includes:\r\n1) Cherry pick https://github.com/dotnet/coreclr/commit/21d651bb4613ca480cd97793fe5d854af36b765c\r\n2) Changes to prestub.cpp to lookup the root module for R2R generics code\r\n\r\nThis change can be used with the newly added switch to the cpaot compiler (--compilebubblegenerics)","Url":"https://github.com/dotnet/coreclr/pull/26546","RelatedDescription":"Closed or merged PR \"Load generics R2R code from the root module\" (#26546)"},{"Id":"490571995","IsPullRequest":true,"CreatedAt":"2019-09-07T00:51:28","Actor":"davidwrighton","Number":"26574","RawContent":null,"Title":"Add support for logging generics ibc data","State":"open","Body":"- set COMPLUS_ZapBBInstrR2RGenerics=2 to get logging that will be parsed best by cpaot","Url":"https://github.com/dotnet/coreclr/pull/26574","RelatedDescription":"Open PR \"Add support for logging generics ibc data\" (#26574)"},{"Id":"490564184","IsPullRequest":true,"CreatedAt":"2019-09-07T00:00:04","Actor":"josalem","Number":"26573","RawContent":null,"Title":"[test] Protect against zombie IPC sockets in tests","State":"open","Body":"Add a check to ensure that there are not any zombied Diagnostics IPC sockets on Linux and error in a readable manner if we are unable to clean them up before running the test.\r\n\r\nBugs, test failures, etc. can leave behind Diagnostics IPC sockets on the test machines.  In typical use cases, these will be cleaned up by computer restart (`/tmp` gets cleared on restart), but the test VMs can be in use for long periods of time without being restarted.  If a test were to catastrophically fail resulting the in the pipe not being cleaned up, and the VM had been alive long enough for an EventPipe test to get the same PID as it previously had when it failed, we would error in the test.  This change will prevent previous test failures from tainting later test runs accidentally.\r\n\r\nExample failure this should prevent:\r\n```log\r\n Discovering: tracing.eventpipe.XUnitWrapper\r\n  Discovered:  tracing.eventpipe.XUnitWrapper\r\n  Starting:    tracing.eventpipe.XUnitWrapper\r\n    tracing/eventpipe/buffersize/buffersize/buffersize.sh [FAIL]\r\n      \r\n      Return code:      1\r\n      Raw output file:      /private/tmp/helix/working/-/Work/-/Exec/tracing/eventpipe/Reports/tracing.eventpipe/buffersize/buffersize/buffersize.output.txt\r\n      Raw output:\r\n      BEGIN EXECUTION\r\n      in takeLock\r\n      /tmp/helix/working/-/Payload/crossgen /Platform_Assemblies_Paths /tmp/helix/working-/Payload:/private/tmp/helix/working/-/Work/-/Exec/tracing/eventpipe/buffersize/buffersize/IL:/private/tmp/helix/working/-/Work/-/Exec/tracing/eventpipe/buffersize/buffersize /in buffersize.org /out buffersize.dll\r\n      Microsoft (R) CoreCLR Native Image Generator - Version 4.5.30319.0\r\n      Copyright (c) Microsoft Corporation.  All rights reserved.\r\n      \r\n      Native image buffersize.dll generated successfully.\r\n      in ReleaseLock\r\n      in takeLock\r\n      /tmp/helix/working/-/Payload/corerun buffersize.dll ''\r\n        0.0s: ==TEST STARTING==\r\n        0.0s: Connecting to EventPipe...\r\n        0.3s: System.InvalidOperationException: Sequence contains more than one matching element\r\n         at System.Linq.ThrowHelper.ThrowMoreThanOneMatchException() in /_/src/System.Linq/src/System/Linq/ThrowHelper.cs:line 22\r\n         at System.Linq.Enumerable.SingleOrDefault[TSource](IEnumerable`1 source, Func`2 predicate) in /_/src/System.Linq/src/System/Linq/Single.cs:line 150\r\n         at Microsoft.Diagnostics.Tools.RuntimeClient.DiagnosticsIpc.IpcClient.GetTransport(Int32 processId) in /_/src/Microsoft.Diagnostics.Tools.RuntimeClient/DiagnosticsIpc/IpcClient.cs:line 43\r\n         at Microsoft.Diagnostics.Tools.RuntimeClient.DiagnosticsIpc.IpcClient.SendMessage(Int32 processId, IpcMessage message, IpcMessage& response) in /_/src/Microsoft.Diagnostics.Tools.RuntimeClient/DiagnosticsIpc/IpcClient.cs:line 84\r\n         at Microsoft.Diagnostics.Tools.RuntimeClient.EventPipeClient.CollectTracing(Int32 processId, SessionConfiguration configuration, UInt64& sessionId) in /_/src/Microsoft.Diagnostics.Tools.RuntimeClient/Eventing/EventPipeClient.cs:line 51\r\n         at Tracing.Tests.Common.IpcTraceTest.Validate() in /Users/vsts/agent/2.155.1/work/1/s/tests/src/tracing/eventpipe/common/IpcTraceTest.cs:line 175\r\n         at Tracing.Tests.Common.IpcTraceTest.RunAndValidateEventCounts(Dictionary`2 expectedEventCounts, Action eventGeneratingAction, Nullable`1 sessionConfiguration, Func`2 optionalTraceValidator) in /Users/vsts/agent/2.155.1/work/1/s/tests/src/tracing/eventpipe/common/IpcTraceTest.cs:line 297\r\n        0.3s: ==TEST FINISHED: FAILED!==\r\n      in ReleaseLock\r\n      Expected: 100\r\n      Actual: 255\r\n      END EXECUTION - FAILED\r\n...\r\n```\r\n\r\nCC - @tommcdon ","Url":"https://github.com/dotnet/coreclr/pull/26573","RelatedDescription":"Open PR \"[test] Protect against zombie IPC sockets in tests\" (#26573)"},{"Id":"490550530","IsPullRequest":true,"CreatedAt":"2019-09-06T22:46:34","Actor":"sdmaclea","Number":"26572","RawContent":null,"Title":"Fix SP alignment during FuncEval","State":"open","Body":"When the debugger is stopped at an arbitrary assembly instruction, the SP is not guaranteed to be aligned. When hijacking a thread, we need to align the SP before making a `FuncEval` call.\r\n\r\nFixes #25753 \r\n\r\n/cc @davidfowl @gregg-miskelly ","Url":"https://github.com/dotnet/coreclr/pull/26572","RelatedDescription":"Open PR \"Fix SP alignment during FuncEval\" (#26572)"},{"Id":"490525436","IsPullRequest":false,"CreatedAt":"2019-09-06T21:13:38","Actor":"EgorBo","Number":"26571","RawContent":null,"Title":"Optimize Math.Max/Min(X, C) in JIT","State":"open","Body":"`Math.Min` and `Math.Max` are currently quite slow due to IEEE754 corner cases, here is the codegen for [Math.Max(double, double)](https://github.com/dotnet/coreclr/blob/bd8e35e41e6a6e626c4fc623845ec40b7704d109/src/System.Private.CoreLib/shared/System/Math.cs#L542-L561) (it's not inlineable):\r\n```asm\r\n; Max(double,double):double\r\nG_M17496_IG01:\r\n       sub      rsp, 24\r\n       vzeroupper \r\nG_M17496_IG02:\r\n       vucomisd xmm0, xmm1\r\n       ja       SHORT G_M17496_IG03\r\n       vmovsd   qword ptr [rsp+10H], xmm0\r\n       mov      rax, qword ptr [rsp+10H]\r\n       mov      rdx, 0xD1FFAB1E\r\n       and      rax, rdx\r\n       mov      rdx, 0xD1FFAB1E\r\n       cmp      rax, rdx\r\n       jle      SHORT G_M17496_IG04\r\nG_M17496_IG03:\r\n       add      rsp, 24\r\n       ret      \r\nG_M17496_IG04:\r\n       vucomisd xmm0, xmm1\r\n       jp       SHORT G_M17496_IG08\r\n       jne      SHORT G_M17496_IG08\r\n       vmovsd   qword ptr [rsp+08H], xmm0\r\n       cmp      qword ptr [rsp+08H], 0\r\n       jl       SHORT G_M17496_IG06\r\nG_M17496_IG05:\r\n       add      rsp, 24\r\n       ret      \r\nG_M17496_IG06:\r\n       vmovaps  xmm0, xmm1\r\nG_M17496_IG07:\r\n       add      rsp, 24\r\n       ret      \r\nG_M17496_IG08:\r\n       vmovaps  xmm0, xmm1\r\nG_M17496_IG09:\r\n       add      rsp, 24\r\n       ret      \r\n; Total bytes of code: 102\r\n```\r\nThe code looks HUGE, especially if you compare it with C/C++'s [fmax](https://godbolt.org/z/nFn7tt) (I know it doesn't really care about corner cases, e.g. `fmax(-0.0, 0.0) => -0.0`) but for the case when one of the arguments is a constant value this codegen can be just:\r\n```asm\r\n       vmaxsd  xmm0, xmm0, C\r\n```\r\nand still be IEEE754-2019 compliant (unlike https://github.com/dotnet/coreclr/pull/22965) if `C` is a \"normal\" value like `100.0` (we can re-use `FloatingPointUtils::isNormal` from https://github.com/dotnet/coreclr/pull/24584).\r\nI found plenty of usages of `Math.Max(X, C)` pattern in open-source projects, e.g.: [AvaloniaUI](https://github.com/AvaloniaUI/Avalonia/blob/e08162626343d30362b818d81a5f38521069baef/src/Avalonia.X11/X11Screens.cs#L251), [Xenko](https://github.com/xenko3d/xenko/blob/951335d9d421889a7459130f3e68436c62d8a02c/samples/Particles/ParticlesSample/ParticlesSample.Game/CameraOrbitScript.cs#L37).\r\n","Url":"https://github.com/dotnet/coreclr/issues/26571","RelatedDescription":"Open issue \"Optimize Math.Max/Min(X, C) in JIT\" (#26571)"},{"Id":"490497455","IsPullRequest":true,"CreatedAt":"2019-09-06T19:55:49","Actor":"TylerBrinkley","Number":"26570","RawContent":null,"Title":"Make StringComparer.Create throw ArgumentNullException","State":"open","Body":"Throws proper exception.\r\n\r\n@danmosemsft","Url":"https://github.com/dotnet/coreclr/pull/26570","RelatedDescription":"Open PR \"Make StringComparer.Create throw ArgumentNullException\" (#26570)"},{"Id":"490433696","IsPullRequest":false,"CreatedAt":"2019-09-06T17:15:13","Actor":"tannergooding","Number":"26569","RawContent":null,"Title":"Inefficient codegen for floating-point operations","State":"open","Body":"Older x86 hardware only had the legacy SSE encoding which encodes two parameters: dst/op1, and op2. These instructions are considered RMW since dst and op1 are encoded in the same parameter. In order to handle this, you generally need to insert an additional move instruction if `dst` and `op1` were not determined to be the same by the register allocator.\r\n\r\nNewer x86 hardware (anything with AVX support) has the newer VEX encoding which takes three parameters: dst, op1, and op2. This encoding is not RMW and does not require an additional move instruction. The encoding is also more efficient and takes up the same number of bytes to encode (for the same allocated registers) or less bytes when dst != op1 (since you don't need to also encode an additional move instruction).\r\n\r\nWe are already emitting the VEX encoding by default for floating-point instructions; however codegen for non-intrinsic codepaths are not VEX aware and are still treating floating-point operations as RMW and as if the encoding only supports `dst/op1` and `op2`.\r\n\r\nIt would be beneficial if the codegen and register allocator were updated to be VEX aware and to call the appropriate `emit_SIMD` codepath (which handles VEX vs legacy encoding differences) where possible.","Url":"https://github.com/dotnet/coreclr/issues/26569","RelatedDescription":"Open issue \"Inefficient codegen for floating-point operations\" (#26569)"},{"Id":"490414919","IsPullRequest":false,"CreatedAt":"2019-09-06T16:25:36","Actor":"kevingosse","Number":"26568","RawContent":null,"Title":"GC does not correctly evaluate the memory load on Linux","State":"open","Body":"On Linux, when running in an unrestricted environment, the GC uses `sysconf(SYSCONF_PAGES) * sysconf(_SC_PAGE_SIZE)` to evaluate the total memory consumption of the system (https://github.com/dotnet/coreclr/blob/master/src/pal/src/misc/sysinfo.cpp#L368). \r\n\r\n`SYSCONF_PAGES` is mapped on `_SC_AVPHYS_PAGES`. Unfortunately, it counts the memory used by the page cache (which is automatically freed by the OS as needed), and therefore overestimates the system load. \r\n\r\n```\r\n$ free -h\r\n              total        used        free      shared  buff/cache   available\r\nMem:            62G         26G         30G        1.5M        6.1G         35G\r\nSwap:            0B          0B          0B\r\n\r\n$ getconf _AVPHYS_PAGES\r\n7968847\r\n\r\n$ getconf PAGESIZE\r\n4096\r\n```\r\n\r\nWe can see here that _AVPHYS_PAGES * PAGESIZE is 32 GB, even though only 26 GB of resident memory is actually used. We've seen instances where the GC incorrectly concludes that more of 90% of the memory is used, and start doing blocking collections even though it shouldn't be needed.\r\n","Url":"https://github.com/dotnet/coreclr/issues/26568","RelatedDescription":"Open issue \"GC does not correctly evaluate the memory load on Linux\" (#26568)"},{"Id":"490407654","IsPullRequest":true,"CreatedAt":"2019-09-06T16:07:34","Actor":"stephentoub","Number":"26567","RawContent":null,"Title":"Fix race conditions in CultureInfo.GetCultureInfoHelper","State":"open","Body":"The implementation reads the current value of the static cache field and then later overwrites that field with the originally read value.  If ClearCachedData was called in the interim to clear the cached data, this will end up effectively undoing part of that clearing, as it'll end up restoring the previous cache. The fix is to write back the new reference only when we need to, which we could do when we detect it's null.\r\n\r\nThere's a secondary race condition this fixes as well.  When a name and an altname are used with CultureInfo.GetCurrentCulture(string, string), the implementation was publishig the newly created instance into the dictionary under the lock, but then after the lock was released, it was setting that TextInfo to be read-only.  That provides a window where another thread could see it as non-read-only and mutate it.  The fix is to ensure it's marked as read-only fully before it's published.\r\n\r\nAs I was doing this, it struck me that the implementation was overly complicated, trying to merge three different code paths for three different callers, presumably to share code, but most of the code ended up not being shared anyway, which just made the code harder to follow for little gain.  So, I split it back out into the three calling functions and removed the helper.\r\n\r\nI also changed the locking mechanism.  It had been using a single shared lock to protect all state, but the purpose of the lock is really just to synchronize access to an individual dictionary, so we can just lock on the relevant dictionary.\r\n\r\nFixes https://github.com/dotnet/corefx/issues/40813\r\ncc: @tarekgh ","Url":"https://github.com/dotnet/coreclr/pull/26567","RelatedDescription":"Open PR \"Fix race conditions in CultureInfo.GetCultureInfoHelper\" (#26567)"},{"Id":"490363103","IsPullRequest":false,"CreatedAt":"2019-09-06T14:37:30","Actor":"uffebjorklund","Number":"26566","RawContent":null,"Title":"AssemblyLoadContext Unload does not release assembly lock on Windows","State":"open","Body":"This is a question about how things are supposed to work, but if my suspicion is right I will file a sample project where I reproduce the issue I am experiencing.\r\n\r\n## Background\r\n\r\nI have a project that downloads zip files with assemblies. These assemblies are then loaded into a custom assembly load context. Later on the ALC will be unloaded and then the Unloading event fires (and all assemblies loaded will be unloaded).\r\n\r\nI see no increase in memory when repeating this scenario so I guess that the assemblies are unloaded. A weird thing (not important here) is that the global tool `dotnet-counters` never decrease the number of assemblies loaded. The count increases for every time I create a new ALC, I thought that unloading would make the count decrease.\r\n\r\n## The Issue\r\n\r\nWhen the Unloading of a ALC is completed my assumption was that the assemblies would be released/unlocked on windows so that I actually can remove them form the file system. However, this is not the case.\r\nIf assemblies can be unloaded it would make sense to also let us delete the plugins since we might update the plugins later on and on windows we get exceptions since we cant delete the locked assemblies loaded by the ALC even though the ALC is long gone and the assemblies unloaded from dotnet core.\r\n\r\nThe be more specific the assemblies are written to a shared docker volume, since we want to persist these assemblies between if the container restarts.\r\n\r\n## Workaround\r\n\r\nI have solved this temporary by only storing a zip with the actual assemblies in the shared volume, and then I load the assemblies inside the container so that windows cant lock them.\r\nHowever, this will probably not work when we later on will use windows containers since my guess is that they will be locked inside the container by windows then.\r\n\r\n## Environment\r\n\r\nHost: Win10 Enterprise 1903\r\nDocker Desktop\r\nBase Image: mcr.microsoft.com/dotnet/core/runtime-deps:3.0-alpine\r\nApplication: dotnet core 3 preview9 \r\n\r\nThe issue only occurs when running containers on windows (Mac/Linux works just fine).\r\n","Url":"https://github.com/dotnet/coreclr/issues/26566","RelatedDescription":"Open issue \"AssemblyLoadContext Unload does not release assembly lock on Windows\" (#26566)"},{"Id":"490282932","IsPullRequest":false,"CreatedAt":"2019-09-06T14:11:54","Actor":"dlewis-arcontech","Number":"26556","RawContent":null,"Title":"StackOverflowException .Net core 2.x windows only","State":"closed","Body":"Hello,\r\n\r\nI have a .Net assembly that has been heavily used on windows for many years under the .Net Frameworks from 2.0 up to 4.6.1. When I compile the code as a .Net Standard 2.0 dll and run it under .Net Framework 4.6.1 that works fine too. \r\n\r\nWhen I run the same .Net Standard dll on linux with .Net Core 2.2.401 it also works fine (Incidentally I've tried it under CoreRT on linux which also works fine). \r\n\r\nWhen I run the same  .Net Standard dll under .Net Core 2.2.401 (or any 2.x version I've tried 2.0/2.1 as well) on windows I get a StackOverflowException very early on when the static constructors are being run.\r\n\r\nThe exception initially happens with a RegEx match being called and if I comment this out it happens with a Dictionary just being declared a bit later on, you don't even need to new an instance. It just seems a bit random. I've downloaded the symbols for coreclr and debugged in to the code but that didn't tell me too much. For the RegEx exception I'm getting messages like:\r\n\r\nException thrown at 0x00007FF98F715618 (coreclr.dll) in dotnet.exe: 0xC00000FD: Stack overflow (parameters: 0x0000000000000001, 0x000000B2F01F3DA8).\r\nException thrown at 0x00007FF9E1FB5FD0 (KernelBase.dll) in dotnet.exe: 0xC0000005: Access violation writing location 0x000000B2F01F0EA4.\r\n\r\nAnd it seems to be pointing to ( System.Text.RegularExpressions.Regex) line 20:\r\n\r\nprivate static readonly Dictionary<CachedCodeEntryKey, CachedCodeEntry> s_cache = new Dictionary<CachedCodeEntryKey, CachedCodeEntry>(s_cacheSize);\r\n\r\nBut pretty sure it's not directly related to regex.\r\n\r\nI've also tried to install sos and tried to use cdb to debug further but I'm not familiar with either tool so it's slow going. I thought I'd post an issue to get advise on how to diagnose further.\r\n\r\nThanks!","Url":"https://github.com/dotnet/coreclr/issues/26556","RelatedDescription":"Closed issue \"StackOverflowException .Net core 2.x windows only\" (#26556)"},{"Id":"490014851","IsPullRequest":true,"CreatedAt":"2019-09-06T13:09:05","Actor":"stephentoub","Number":"26547","RawContent":null,"Title":"More in-between meetings style cleanup","State":"closed","Body":"- Use ??= to consolidate null checks in more places\r\n- Use expression-bodied members for indexers in more places","Url":"https://github.com/dotnet/coreclr/pull/26547","RelatedDescription":"Closed or merged PR \"More in-between meetings style cleanup\" (#26547)"},{"Id":"490303870","IsPullRequest":true,"CreatedAt":"2019-09-06T12:36:14","Actor":"dotnet-maestro[bot]","Number":"26565","RawContent":null,"Title":"[release/3.1] Update dependencies from dotnet/core-setup","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:b062bd78-6e50-43e6-cd59-08d72a4d12e0)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190905.31\r\n- **Date Produced**: 9/6/2019 7:39 AM\r\n- **Commit**: 7194756bb3b052f1550dd50d3e229b350d348da2\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.1.0-preview1.19455.31\r\n\r\n[marker]: <> (End:b062bd78-6e50-43e6-cd59-08d72a4d12e0)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/26565","RelatedDescription":"Open PR \"[release/3.1] Update dependencies from dotnet/core-setup\" (#26565)"},{"Id":"490303553","IsPullRequest":true,"CreatedAt":"2019-09-06T12:35:29","Actor":"dotnet-maestro[bot]","Number":"26564","RawContent":null,"Title":"[release/3.1] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:88e1281a-0536-412d-736c-08d72a4ce44a)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190905.21\r\n- **Date Produced**: 9/6/2019 1:51 AM\r\n- **Commit**: e99f81b0e3289cfd851be0d927c1fcffa43af6b5\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19455.21\r\n  - **Microsoft.DotNet.Build.Tasks.Feed** -> 2.2.0-beta.19455.21\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19455.21\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19455.21\r\n\r\n[marker]: <> (End:88e1281a-0536-412d-736c-08d72a4ce44a)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/26564","RelatedDescription":"Open PR \"[release/3.1] Update dependencies from dotnet/arcade\" (#26564)"},{"Id":"490299906","IsPullRequest":true,"CreatedAt":"2019-09-06T12:26:56","Actor":"dotnet-maestro[bot]","Number":"26563","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/core-setup","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:9a4bff4b-85c2-4174-9247-08d6c732a216)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190905.28\r\n- **Date Produced**: 9/6/2019 6:05 AM\r\n- **Commit**: ff03f37493197645460f51ab4dc17cbb50c500a8\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-rc2-19455-28\r\n\r\n[marker]: <> (End:9a4bff4b-85c2-4174-9247-08d6c732a216)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/26563","RelatedDescription":"Open PR \"[release/3.0] Update dependencies from dotnet/core-setup\" (#26563)"},{"Id":"490298035","IsPullRequest":true,"CreatedAt":"2019-09-06T12:22:36","Actor":"janvorli","Number":"26562","RawContent":null,"Title":"[WIP] Fix issue with locals overlapping out of scope GCFrame","State":"open","Body":"More aggressive C/C++ optimizations done by VS2019 are breaking fragile\r\nassumptions of the CoreCLR \"manually managed code\".\r\n\r\nUnwinding of Frame chains accesses stack local variables after the stack\r\nframe has been unwound, but it depends on their content to be left\r\nintact. The new compiler is breaking this assumption by stack-packing a\r\ndifferent variable over it.\r\n\r\nThis change fixes the problem by adding a destructor to GCFrame that\r\npops the frame from the per-thread Frame list.\r\n\r\nI also had to refactor two functions where the compiler was complaining about\r\nmixing SEH and C++ EH in single function.\r\n\r\nWith these changes applied, there was still a problem that I've discovered\r\nwhen running CoreCLR tests with GCStress 3. When the\r\nExceptionTracker::m_pInitialExplicitFrame was still pointing to a frame\r\nthat was already removed from the explicit Frame chain. When the\r\nExceptionTracker::HasFrameBeenUnwoundByAnyActiveException was walking the\r\nframe chain starting at m_pInitialExplicitFrame to figure out if a given\r\nframe was already unwound, it has walked to the destryoyed GCFrame and\r\ncrashed.\r\nAfter various attempts to update the m_pInitialExplicitFrame during the\r\nexception handling so that the explicit frames chain starting at it doesn't\r\ncontain the destroyed GC frames, I have decided to drop the m_pInitialExplicitFrame\r\ncompletely and rather add a flag to the Frame indicating whether it was already\r\nunwound by an exception or not. The Frame already had a method ExceptionUnwind\r\nthat is called when the unwinding happens, so I could just set the flag in\r\nthere.\r\nDue to this change, I had to fix a couple of ASM helpers and some places in\r\nnative code generators in the runtime. There were places where we were using\r\nnumeric constants for various offsets and sizes instead of constants defined\r\nin asmconstants.h and verified at build time.","Url":"https://github.com/dotnet/coreclr/pull/26562","RelatedDescription":"Open PR \"[WIP] Fix issue with locals overlapping out of scope GCFrame\" (#26562)"},{"Id":"490296092","IsPullRequest":true,"CreatedAt":"2019-09-06T12:17:58","Actor":"dotnet-maestro[bot]","Number":"26561","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/corefx","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d7eb9992-d759-446e-f8f0-08d6910be5f1)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190906.1\r\n- **Date Produced**: 9/6/2019 8:30 AM\r\n- **Commit**: 8bcf07a7dd95574a6343c19aa3d9a08cb93bc9e9\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.Platforms** -> 3.0.0-rc2.19456.1\r\n  - **Microsoft.Private.CoreFx.NETCoreApp** -> 4.6.0-rc2.19456.1\r\n\r\n[marker]: <> (End:d7eb9992-d759-446e-f8f0-08d6910be5f1)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/26561","RelatedDescription":"Open PR \"[release/3.0] Update dependencies from dotnet/corefx\" (#26561)"},{"Id":"490295918","IsPullRequest":true,"CreatedAt":"2019-09-06T12:17:32","Actor":"dotnet-maestro[bot]","Number":"26560","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:9d917c39-9eee-4aa5-f8e9-08d6910be5f1)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190905.21\r\n- **Date Produced**: 9/6/2019 1:51 AM\r\n- **Commit**: e99f81b0e3289cfd851be0d927c1fcffa43af6b5\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19455.21\r\n  - **Microsoft.DotNet.Build.Tasks.Feed** -> 2.2.0-beta.19455.21\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19455.21\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19455.21\r\n\r\n[marker]: <> (End:9d917c39-9eee-4aa5-f8e9-08d6910be5f1)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/26560","RelatedDescription":"Open PR \"[release/3.0] Update dependencies from dotnet/arcade\" (#26560)"},{"Id":"490295200","IsPullRequest":true,"CreatedAt":"2019-09-06T12:15:50","Actor":"dotnet-maestro[bot]","Number":"26559","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d21e78e6-fa30-42ea-2807-08d690bc5860)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190906.2\r\n- **Date Produced**: 9/6/2019 8:28 AM\r\n- **Commit**: 7bc2cd591ca8f2ae31119d8a137c69a192a88bac\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19456.2\r\n\r\n[marker]: <> (End:d21e78e6-fa30-42ea-2807-08d690bc5860)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/26559","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/core-setup\" (#26559)"},{"Id":"490294860","IsPullRequest":true,"CreatedAt":"2019-09-06T12:14:57","Actor":"dotnet-maestro[bot]","Number":"26558","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:16d3c6aa-851a-4668-94d4-08d690bc143a)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190905.16\r\n- **Date Produced**: 9/6/2019 1:28 AM\r\n- **Commit**: 4390a665c2fe082007f6bd25be0e055307ee5573\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.Platforms** -> 5.0.0-alpha1.19455.16\r\n  - **Microsoft.Private.CoreFx.NETCoreApp** -> 5.0.0-alpha1.19455.16\r\n\r\n[marker]: <> (End:16d3c6aa-851a-4668-94d4-08d690bc143a)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/26558","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/corefx\" (#26558)"},{"Id":"490293630","IsPullRequest":true,"CreatedAt":"2019-09-06T12:11:51","Actor":"dotnet-maestro[bot]","Number":"26557","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:1cc0f2b0-7abd-45f0-cee6-08d67668456c)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190906.2\r\n- **Date Produced**: 9/6/2019 2:35 PM\r\n- **Commit**: 397060df67388da56b50de7e6f7292a5dccc2de6\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19456.2\r\n  - **Microsoft.DotNet.Build.Tasks.Feed** -> 2.2.0-beta.19456.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19456.2\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19456.2\r\n\r\n[marker]: <> (End:1cc0f2b0-7abd-45f0-cee6-08d67668456c)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/26557","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/arcade\" (#26557)"},{"Id":"490119243","IsPullRequest":false,"CreatedAt":"2019-09-06T04:13:17","Actor":"VincentBu","Number":"26555","RawContent":null,"Title":"Test failed: JIT\\Methodical\\doublearray\\dblarray3_cs_ro\\dblarray3_cs_ro.cmd","State":"open","Body":"**Job:**\r\n[coreclr-jitstress 20190904.1](https://dev.azure.com/dnceng/public/_build/results?buildId=338039)\r\nRun Test Pri1 Windows_NT x86 checked\r\n\r\n**Detail:**\r\nconsole log: https://helix.dot.net/api/2019-06-17/jobs/4665d575-581c-4e18-bc85-a05bfe8a2925/workitems/JIT.Methodical.a-dA-D/console\r\n\r\n**OS & Arch:**\r\nWindows x86\r\n\r\n**Mode:**\r\nset COMPlus_TieredCompilation=0\r\nset COMPlus_ReadyToRun=0\r\nset COMPlus_ZapDisable=1\r\n\r\n**Failed tests:**\r\nJIT\\Methodical\\doublearray\\dblarray3_cs_ro\\dblarray3_cs_ro.cmd\r\n\r\n**Note:**\r\nThis failure **doesn't repro** on our windows x64 machine.\r\n\r\n**Log:**\r\n```\r\nJIT\\Methodical\\doublearray\\dblarray3_cs_ro\\dblarray3_cs_ro.cmd [FAIL]\r\n      \r\n      Return code:      1\r\n      Raw output file:      C:\\dotnetbuild\\work\\4665d575-581c-4e18-bc85-a05bfe8a2925\\Work\\2234b90c-22ce-42c0-92c2-9b3eef8bab05\\Exec\\JIT\\Methodical\\Reports\\JIT.Methodical\\doublearray\\dblarray3_cs_ro\\dblarray3_cs_ro.output.txt\r\n      Raw output:\r\n      BEGIN EXECUTION\r\n       \"C:\\dotnetbuild\\work\\4665d575-581c-4e18-bc85-a05bfe8a2925\\Payload\\corerun.exe\" dblarray3_cs_ro.dll \r\n      X86\r\n      Garbage collection was induced in NoGCRegion mode\r\n         at System.GC.EndNoGCRegionWorker()\r\n         at DblArray3.Run(Action f)\r\n         at DblArray3.Main()\r\n      FAILED\r\n      Expected: 100\r\n      Actual: -1\r\n      END EXECUTION - FAILED\r\n      FAILED\r\n      Test Harness Exitcode is : 1\r\n```","Url":"https://github.com/dotnet/coreclr/issues/26555","RelatedDescription":"Open issue \"Test failed: JIT\\Methodical\\doublearray\\dblarray3_cs_ro\\dblarray3_cs_ro.cmd\" (#26555)"},{"Id":"490093707","IsPullRequest":false,"CreatedAt":"2019-09-06T02:17:51","Actor":"VincentBu","Number":"26554","RawContent":null,"Title":"Test failed: tracing/eventpipe/buffersize/buffersize/buffersize.sh","State":"open","Body":"**Job:**\r\n[coreclr-outerloop 20190905.7](https://dev.azure.com/dnceng/public/_build/results?buildId=339271)\r\nRun Test Pri1 R2R OSX x64 checked\r\n\r\n**Detail:**\r\nconsole log: https://helix.dot.net/api/2019-06-17/jobs/04af6fb9-85f4-42d7-ab4b-0d5bb40960e9/workitems/PayloadGroup0/console\r\n\r\n**OS & Arch:** \r\nOSX x64\r\n\r\n**Mode:** \r\n    RunCrossGen=1\r\n    COMPlus_TieredCompilation=0\r\n\r\n**Failed tests:**\r\ntracing/eventpipe/buffersize/buffersize/buffersize.sh\r\ntracing/eventpipe/rundownvalidation/rundownvalidation/rundownvalidation.sh\r\n\r\n**Note:**\r\nThese failures **don't repro** on our OSX x64 machine.\r\n\r\n**Log:**\r\n```\r\ntracing/eventpipe/buffersize/buffersize/buffersize.sh [FAIL]\r\n      \r\n      Return code:      1\r\n      Raw output file:      /private/tmp/helix/working/04af6fb9-85f4-42d7-ab4b-0d5bb40960e9/Work/557401af-9032-472a-8131-66fb6aa90e5b/Exec/tracing/eventpipe/Reports/tracing.eventpipe/buffersize/buffersize/buffersize.output.txt\r\n      Raw output:\r\n      BEGIN EXECUTION\r\n      in takeLock\r\n      /tmp/helix/working/04af6fb9-85f4-42d7-ab4b-0d5bb40960e9/Payload/crossgen /Platform_Assemblies_Paths /tmp/helix/working/04af6fb9-85f4-42d7-ab4b-0d5bb40960e9/Payload:/private/tmp/helix/working/04af6fb9-85f4-42d7-ab4b-0d5bb40960e9/Work/557401af-9032-472a-8131-66fb6aa90e5b/Exec/tracing/eventpipe/buffersize/buffersize/IL:/private/tmp/helix/working/04af6fb9-85f4-42d7-ab4b-0d5bb40960e9/Work/557401af-9032-472a-8131-66fb6aa90e5b/Exec/tracing/eventpipe/buffersize/buffersize /in buffersize.org /out buffersize.dll\r\n      Microsoft (R) CoreCLR Native Image Generator - Version 4.5.30319.0\r\n      Copyright (c) Microsoft Corporation.  All rights reserved.\r\n      \r\n      Native image buffersize.dll generated successfully.\r\n      in ReleaseLock\r\n      in takeLock\r\n      /tmp/helix/working/04af6fb9-85f4-42d7-ab4b-0d5bb40960e9/Payload/corerun buffersize.dll ''\r\n        0.0s: ==TEST STARTING==\r\n        0.0s: Connecting to EventPipe...\r\n        0.3s: System.InvalidOperationException: Sequence contains more than one matching element\r\n         at System.Linq.ThrowHelper.ThrowMoreThanOneMatchException() in /_/src/System.Linq/src/System/Linq/ThrowHelper.cs:line 22\r\n         at System.Linq.Enumerable.SingleOrDefault[TSource](IEnumerable`1 source, Func`2 predicate) in /_/src/System.Linq/src/System/Linq/Single.cs:line 150\r\n         at Microsoft.Diagnostics.Tools.RuntimeClient.DiagnosticsIpc.IpcClient.GetTransport(Int32 processId) in /_/src/Microsoft.Diagnostics.Tools.RuntimeClient/DiagnosticsIpc/IpcClient.cs:line 43\r\n         at Microsoft.Diagnostics.Tools.RuntimeClient.DiagnosticsIpc.IpcClient.SendMessage(Int32 processId, IpcMessage message, IpcMessage& response) in /_/src/Microsoft.Diagnostics.Tools.RuntimeClient/DiagnosticsIpc/IpcClient.cs:line 84\r\n         at Microsoft.Diagnostics.Tools.RuntimeClient.EventPipeClient.CollectTracing(Int32 processId, SessionConfiguration configuration, UInt64& sessionId) in /_/src/Microsoft.Diagnostics.Tools.RuntimeClient/Eventing/EventPipeClient.cs:line 51\r\n         at Tracing.Tests.Common.IpcTraceTest.Validate() in /Users/vsts/agent/2.155.1/work/1/s/tests/src/tracing/eventpipe/common/IpcTraceTest.cs:line 175\r\n         at Tracing.Tests.Common.IpcTraceTest.RunAndValidateEventCounts(Dictionary`2 expectedEventCounts, Action eventGeneratingAction, Nullable`1 sessionConfiguration, Func`2 optionalTraceValidator) in /Users/vsts/agent/2.155.1/work/1/s/tests/src/tracing/eventpipe/common/IpcTraceTest.cs:line 297\r\n        0.3s: ==TEST FINISHED: FAILED!==\r\n      in ReleaseLock\r\n      Expected: 100\r\n      Actual: 255\r\n      END EXECUTION - FAILED\r\n      Test Harness Exitcode is : 1\r\n\r\ntracing/eventpipe/rundownvalidation/rundownvalidation/rundownvalidation.sh [FAIL]\r\n      \r\n      Return code:      1\r\n      Raw output file:      /private/tmp/helix/working/04af6fb9-85f4-42d7-ab4b-0d5bb40960e9/Work/557401af-9032-472a-8131-66fb6aa90e5b/Exec/tracing/eventpipe/Reports/tracing.eventpipe/rundownvalidation/rundownvalidation/rundownvalidation.output.txt\r\n      Raw output:\r\n      BEGIN EXECUTION\r\n      in takeLock\r\n      /tmp/helix/working/04af6fb9-85f4-42d7-ab4b-0d5bb40960e9/Payload/crossgen /Platform_Assemblies_Paths /tmp/helix/working/04af6fb9-85f4-42d7-ab4b-0d5bb40960e9/Payload:/private/tmp/helix/working/04af6fb9-85f4-42d7-ab4b-0d5bb40960e9/Work/557401af-9032-472a-8131-66fb6aa90e5b/Exec/tracing/eventpipe/rundownvalidation/rundownvalidation/IL:/private/tmp/helix/working/04af6fb9-85f4-42d7-ab4b-0d5bb40960e9/Work/557401af-9032-472a-8131-66fb6aa90e5b/Exec/tracing/eventpipe/rundownvalidation/rundownvalidation /in rundownvalidation.org /out rundownvalidation.dll\r\n      Microsoft (R) CoreCLR Native Image Generator - Version 4.5.30319.0\r\n      Copyright (c) Microsoft Corporation.  All rights reserved.\r\n      \r\n      Native image rundownvalidation.dll generated successfully.\r\n      in ReleaseLock\r\n      in takeLock\r\n      /tmp/helix/working/04af6fb9-85f4-42d7-ab4b-0d5bb40960e9/Payload/corerun rundownvalidation.dll ''\r\n        0.0s: ==TEST STARTING==\r\n        0.1s: Connecting to EventPipe...\r\n        0.3s: System.InvalidOperationException: Sequence contains more than one matching element\r\n         at System.Linq.ThrowHelper.ThrowMoreThanOneMatchException() in /_/src/System.Linq/src/System/Linq/ThrowHelper.cs:line 22\r\n         at System.Linq.Enumerable.SingleOrDefault[TSource](IEnumerable`1 source, Func`2 predicate) in /_/src/System.Linq/src/System/Linq/Single.cs:line 150\r\n         at Microsoft.Diagnostics.Tools.RuntimeClient.DiagnosticsIpc.IpcClient.GetTransport(Int32 processId) in /_/src/Microsoft.Diagnostics.Tools.RuntimeClient/DiagnosticsIpc/IpcClient.cs:line 43\r\n         at Microsoft.Diagnostics.Tools.RuntimeClient.DiagnosticsIpc.IpcClient.SendMessage(Int32 processId, IpcMessage message, IpcMessage& response) in /_/src/Microsoft.Diagnostics.Tools.RuntimeClient/DiagnosticsIpc/IpcClient.cs:line 84\r\n         at Microsoft.Diagnostics.Tools.RuntimeClient.EventPipeClient.CollectTracing(Int32 processId, SessionConfiguration configuration, UInt64& sessionId) in /_/src/Microsoft.Diagnostics.Tools.RuntimeClient/Eventing/EventPipeClient.cs:line 51\r\n         at Tracing.Tests.Common.IpcTraceTest.Validate() in /Users/vsts/agent/2.155.1/work/1/s/tests/src/tracing/eventpipe/common/IpcTraceTest.cs:line 175\r\n         at Tracing.Tests.Common.IpcTraceTest.RunAndValidateEventCounts(Dictionary`2 expectedEventCounts, Action eventGeneratingAction, Nullable`1 sessionConfiguration, Func`2 optionalTraceValidator) in /Users/vsts/agent/2.155.1/work/1/s/tests/src/tracing/eventpipe/common/IpcTraceTest.cs:line 297\r\n        0.3s: ==TEST FINISHED: FAILED!==\r\n      in ReleaseLock\r\n      Expected: 100\r\n      Actual: 255\r\n      END EXECUTION - FAILED\r\n      Test Harness Exitcode is : 1\r\n```","Url":"https://github.com/dotnet/coreclr/issues/26554","RelatedDescription":"Open issue \"Test failed: tracing/eventpipe/buffersize/buffersize/buffersize.sh\" (#26554)"},{"Id":"490069924","IsPullRequest":true,"CreatedAt":"2019-09-06T00:19:55","Actor":"sandreenko","Number":"26553","RawContent":null,"Title":"Add a repro for GitHub_26311.","State":"open","Body":"Add an IL test that reproduces #26311 without using external functions or stress modes.\r\nThe test uses tail call opcode to force a tail call to VSD over generic class via a slow helper.\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/26553","RelatedDescription":"Open PR \"Add a repro for GitHub_26311.\" (#26553)"},{"Id":"490020963","IsPullRequest":true,"CreatedAt":"2019-09-05T23:36:54","Actor":"Anipik","Number":"26548","RawContent":null,"Title":"Update preReleaselabel to rc2","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/26548","RelatedDescription":"Closed or merged PR \"Update preReleaselabel to rc2\" (#26548)"},{"Id":"490056424","IsPullRequest":true,"CreatedAt":"2019-09-05T23:20:00","Actor":"EgorBo","Number":"26552","RawContent":null,"Title":"Optimize Math.Pow(x, c) in JIT","State":"open","Body":"Fixes https://github.com/dotnet/coreclr/issues/26434\r\n\r\nConverts:\r\n`Math.Pow(x,  2)` to `x*x`\r\n`Math.Pow(x,  1)` to `x`\r\n`Math.Pow(x, -1)` to `1/x`\r\n(same for MathF and floats)\r\n\r\nCan be added:\r\n`Math.Pow(c1, c2)` to `c3` (call PAL_pow?)\r\n`Math.Pow(1, x)` to `1`\r\n`Math.Pow(2, x)` to `exp2(x)`\r\n`Math.Pow(x, 0)` to `1`\r\n`Math.Pow(x, -0)` to `1`\r\n`Math.Pow(x, 0.5)` to `sqrt(x)` \r\n`Math.Pow(x, -2)` to `1/(x*x)`  (probably is not safe)\r\n\r\n### Test\r\n```csharp\r\nstatic double Pow2(double x) => Math.Pow(x, 2);\r\n\r\nstatic double Pow1(double x) => Math.Pow(x, 1);\r\n\r\nstatic double PowN1(double x) => Math.Pow(x, -1);\r\n```\r\n### Before (tier1):\r\n```asm\r\n; Pow2(double):double\r\nG_M37400_IG01:\r\n       sub      rsp, 40\r\n       vzeroupper \r\nG_M37400_IG02:\r\n       vmovsd   xmm1, qword ptr [reloc @RWD00]\r\n       call     System.Math:Pow(double,double):double\r\n       nop      \r\nG_M37400_IG03:\r\n       add      rsp, 40\r\n       ret      \r\nRWD00  dq\t4000000000000000h\r\n; Total bytes of code: 26\r\n\r\n\r\n; Pow1(double):double\r\nG_M37403_IG01:\r\n       sub      rsp, 40\r\n       vzeroupper \r\nG_M37403_IG02:\r\n       vmovsd   xmm1, qword ptr [reloc @RWD00]\r\n       call     System.Math:Pow(double,double):double\r\n       nop      \r\nG_M37403_IG03:\r\n       add      rsp, 40\r\n       ret      \r\nRWD00  dq\t3FF0000000000000h\r\n; Total bytes of code: 26\r\n\r\n\r\n; PowN1(double):double\r\nG_M24053_IG01:\r\n       sub      rsp, 40\r\n       vzeroupper \r\nG_M24053_IG02:\r\n       vmovsd   xmm1, qword ptr [reloc @RWD00]\r\n       call     System.Math:Pow(double,double):double\r\n       nop      \r\nG_M24053_IG03:\r\n       add      rsp, 40\r\n       ret      \r\nRWD00  dq\tBFF0000000000000h\r\n; Total bytes of code: 26\r\n```\r\n### After (tier1):\r\n```asm\r\n; Pow2(double):double\r\nG_M37400_IG01:\r\n       vzeroupper \r\nG_M37400_IG02:\r\n       vmulsd   xmm0, xmm0\r\nG_M37400_IG03:\r\n       ret      \r\n; Total bytes of code: 8\r\n\r\n\r\n; Pow1(double):double\r\nG_M37403_IG01:\r\n       vzeroupper \r\nG_M37403_IG02:\r\n       ret      \r\n; Total bytes of code: 4\r\n\r\n\r\n; PowN1(double):double\r\nG_M24053_IG01:\r\n       vzeroupper \r\nG_M24053_IG02:\r\n       vmovsd   xmm1, qword ptr [reloc @RWD00]\r\n       vdivsd   xmm1, xmm0\r\n       vmovaps  xmm0, xmm1\r\nG_M24053_IG03:\r\n       ret      \r\nRWD00  dq\t3FF0000000000000h\r\n; Total bytes of code: 20\r\n```\r\n\r\nWill run the jit-diff tools but I suspect it won't find anything in the BCL (**UPD** there are actually two cases). But I did see such usages in different applications. E.g. `Xenko` (a game engine): https://github.com/xenko3d/xenko/search?q=Math.Pow&unscoped_q=Math.Pow\r\n\r\nAlso, once some sort of ffast-math mode is implemented - we can unroll other constants (gcc unrolls up to 100, clang - 32)","Url":"https://github.com/dotnet/coreclr/pull/26552","RelatedDescription":"Open PR \"Optimize Math.Pow(x, c) in JIT\" (#26552)"},{"Id":"490056333","IsPullRequest":true,"CreatedAt":"2019-09-05T23:19:34","Actor":"briansull","Number":"26551","RawContent":null,"Title":"Don't hoist constants or nodes that have been assigned a constant value.","State":"open","Body":"Fixes Issue #26417","Url":"https://github.com/dotnet/coreclr/pull/26551","RelatedDescription":"Open PR \"Don't hoist constants or nodes that have been assigned a constant value.\" (#26551)"},{"Id":"490028606","IsPullRequest":false,"CreatedAt":"2019-09-05T21:55:49","Actor":"CarolEidt","Number":"26550","RawContent":null,"Title":"Clean up struct allocation in `gsParamsToShadows`","State":"open","Body":"This method creates shadow copies (this is excerpted from the discussion here: https://github.com/dotnet/coreclr/pull/21705#discussion_r321414655):\r\n* first, it creates the variables, without calling `lvaSetStruct`, but copies some of the struct-related info, such as `lvVerTypeInfo`.\r\n* then it changes the IR to use the new variables (ugly because the IR will now temporarily be in an invalid state - the newly created variables may have not been fully setup without `lvaSetStruct`)\r\n* then it generates copies from the old variables to the new variables and here it calls `lvaSetStruct`\r\n\r\nIt should presumably call `lvaSetStruct` when it first creates the new locals.","Url":"https://github.com/dotnet/coreclr/issues/26550","RelatedDescription":"Open issue \"Clean up struct allocation in `gsParamsToShadows`\" (#26550)"},{"Id":"490027985","IsPullRequest":true,"CreatedAt":"2019-09-05T21:53:56","Actor":"echesakovMSFT","Number":"26549","RawContent":null,"Title":"Add STRESS_PROFILER_CALLBACKS stress mode","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/26549","RelatedDescription":"Open PR \"Add STRESS_PROFILER_CALLBACKS stress mode\" (#26549)"}],"ResultType":"GitHubIssue"},"CLI-Issues":{"Issues":[{"Id":"490590712","IsPullRequest":true,"CreatedAt":"2019-09-07T05:13:40","Actor":"dotnet-maestro[bot]","Number":"12526","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190906.11\r\n- **Date Produced**: 9/7/2019 4:38 AM\r\n- **Commit**: c3fa16970d7a4f80d079b69468f38228ff0e5f84\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-rc2.19456.11\r\n\r\n[marker]: <> (End:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12526","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore\" (#12526)"},{"Id":"490587166","IsPullRequest":false,"CreatedAt":"2019-09-07T03:50:26","Actor":"SidShetye","Number":"12525","RawContent":null,"Title":"dotnet publish for single file executable doesn't copy supporting non-executable files","State":"open","Body":"When publishing a dotnet core app to a single file per directions at https://docs.microsoft.com/en-us/dotnet/core/whats-new/dotnet-core-3-0#single-file-executables, any supporting files that are supposed to be copied over are not copied. This typically breaks any project dependent on such additional file \r\n(non-code) resources.\r\n\r\n## Steps to reproduce\r\n\r\n1. clone repo @ https://github.com/SidShetye/DotNetPublishTrimSkipsCopyFiles\r\n2. `dotnet publish`\r\n3. navigate to `\\bin\\Debug\\netcoreapp3.0\\win10-x64\\publish\\` and run `DotNetPublishTrimSkipsCopyFiles.exe`\r\n4. See error\r\n\r\n## Expected  behavior\r\n\r\nSupporting files are copied over based on the csproj definition of `CopyToOutputDirectory` = `Always`\r\n\r\n## Actual behavior\r\n\r\nFiles are not copied\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n<details>\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview9-014004\r\n Commit:    8e7ef240a5\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview9-014004\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview9-19423-09\r\n  Commit:  2be172345a\r\n\r\n.NET Core SDKs installed:\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.302 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.400 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.401 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.402 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.503 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.504 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.505 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.507 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.700 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.701 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.801 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.300 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.301 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.401 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview9-014004 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview9.19424.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.3-servicing-26724-03 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview9-19423-09 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview9-19423-09 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n</details>\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/12525","RelatedDescription":"Open issue \"dotnet publish for single file executable doesn't copy supporting non-executable files\" (#12525)"},{"Id":"490536648","IsPullRequest":true,"CreatedAt":"2019-09-07T03:18:25","Actor":"dotnet-maestro[bot]","Number":"12520","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190906.27\r\n- **Date Produced**: 9/7/2019 1:33 AM\r\n- **Commit**: eee6d7a3cc7418cec87f109a1cf6d94e97e25cb0\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19456.27\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19456.27\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19456.27\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19456.27\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19456.27\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12520","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12520)"},{"Id":"490571877","IsPullRequest":true,"CreatedAt":"2019-09-07T01:25:43","Actor":"dotnet-maestro[bot]","Number":"12524","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190906.22\r\n- **Date Produced**: 9/6/2019 11:22 PM\r\n- **Commit**: 321d01390849836541c2caac6d124c75ef961578\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.1.0-preview1.19456.22\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.1.0-preview1.19456.22\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.1.0-preview1.19456.22\r\n  - **Microsoft.NET.HostModel** -> 3.1.0-preview1.19456.22\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.1.0-preview1.19456.22\r\n\r\n[marker]: <> (End:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12524","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#12524)"},{"Id":"490566670","IsPullRequest":true,"CreatedAt":"2019-09-07T00:15:22","Actor":"dotnet-maestro[bot]","Number":"12523","RawContent":null,"Title":"[release/3.0.100-preview9] Update dependencies from dotnet/sdk","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:96481569-9086-408c-b59d-08d7219835fd)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190906.2\r\n- **Date Produced**: 9/6/2019 10:47 PM\r\n- **Commit**: 76255c6d07b95ff13c4f3c195063504598a7e723\r\n- **Branch**: refs/heads/release/3.0.100-preview9\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-rc1.19456.2\r\n\r\n[marker]: <> (End:96481569-9086-408c-b59d-08d7219835fd)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12523","RelatedDescription":"Open PR \"[release/3.0.100-preview9] Update dependencies from dotnet/sdk\" (#12523)"},{"Id":"490554614","IsPullRequest":false,"CreatedAt":"2019-09-06T23:07:30","Actor":"KathleenDollard","Number":"12522","RawContent":null,"Title":"--nologo incorrect/ugly in --help","State":"open","Body":"## Steps to reproduce\r\ndotnet build -h \r\ndotnet pack -h\r\npossibly others\r\n\r\n## Expected  behavior\r\n--nologo\r\n\r\n## Actual behavior\r\n/nologo, --nologo\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n/usr/local/share/dotnet/sdk $ dotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview9-014004\r\n Commit:    8e7ef240a5\r\n\r\nRuntime Environment: (Preview 9)\r\n OS Name:     Mac OS X\r\n OS Version:  10.14\r\n OS Platform: Darwin\r\n RID:         osx.10.14-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/3.0.100-preview9-014004/\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview9-19423-09\r\n  Commit:  2be172345a\r\n\r\n.NET Core SDKs installed:\r\n  2.1.505 [/usr/local/share/dotnet/sdk]\r\n  2.2.204 [/usr/local/share/dotnet/sdk]\r\n  3.0.100-preview-009812 [/usr/local/share/dotnet/sdk]\r\n  3.0.100-preview-009988 [/usr/local/share/dotnet/sdk]\r\n  3.0.100-preview5-011568 [/usr/local/share/dotnet/sdk]\r\n  3.0.100-preview6-012266 [/usr/local/share/dotnet/sdk]\r\n  3.0.100-preview7-012650 [/usr/local/share/dotnet/sdk]\r\n  3.0.100-preview7-012821 [/usr/local/share/dotnet/sdk]\r\n  3.0.100-preview9-014004 [/usr/local/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.8 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.9 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.5 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.8 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.9 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.5 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview-18579-0056 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview5-19227-01 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview6.19307.2 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview7.19326.10 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview7.19365.7 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview9.19424.4 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.5 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27122-01 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27218-01 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview5-27626-15 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview6-27813-07 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview7-27826-04 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview7-27912-14 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview9-19423-09 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/12522","RelatedDescription":"Open issue \"--nologo incorrect/ugly in --help\" (#12522)"},{"Id":"490547969","IsPullRequest":true,"CreatedAt":"2019-09-06T22:36:56","Actor":"dotnet-maestro[bot]","Number":"12521","RawContent":null,"Title":"[release/3.0.100-preview9] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:5806dcbf-daa2-4c4e-a876-08d7219800a1)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190906.20\r\n- **Date Produced**: 9/6/2019 9:40 PM\r\n- **Commit**: 8f5d7b1ba4f744199ba006cac38dfcb9a2408880\r\n- **Branch**: refs/heads/release/3.0-preview9\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-rc1-19456-20\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-rc1-19456-20\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.0.0-rc1-19456-20\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-rc1-19456-20\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-rc1-19456-20\r\n\r\n[marker]: <> (End:5806dcbf-daa2-4c4e-a876-08d7219800a1)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12521","RelatedDescription":"Closed or merged PR \"[release/3.0.100-preview9] Update dependencies from dotnet/core-setup\" (#12521)"},{"Id":"490484793","IsPullRequest":true,"CreatedAt":"2019-09-06T20:11:43","Actor":"dotnet-maestro[bot]","Number":"12519","RawContent":null,"Title":"[release/3.0.100-preview9] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:5806dcbf-daa2-4c4e-a876-08d7219800a1)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190906.12\r\n- **Date Produced**: 9/6/2019 5:32 PM\r\n- **Commit**: 6de53852e89ecf403fc893c9a0286d5027b51c83\r\n- **Branch**: refs/heads/release/3.0-preview9\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-rc1-19456-12\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-rc1-19456-12\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.0.0-rc1-19456-12\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-rc1-19456-12\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-rc1-19456-12\r\n\r\n[marker]: <> (End:5806dcbf-daa2-4c4e-a876-08d7219800a1)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12519","RelatedDescription":"Closed or merged PR \"[release/3.0.100-preview9] Update dependencies from dotnet/core-setup\" (#12519)"},{"Id":"490441034","IsPullRequest":true,"CreatedAt":"2019-09-06T18:33:59","Actor":"dotnet-maestro[bot]","Number":"12517","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:433865d5-f754-408e-06ed-08d645e2db8e)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190906.2\r\n- **Date Produced**: 9/6/2019 2:35 PM\r\n- **Commit**: 397060df67388da56b50de7e6f7292a5dccc2de6\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19456.2\r\n\r\n[marker]: <> (End:433865d5-f754-408e-06ed-08d645e2db8e)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12517","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#12517)"},{"Id":"490441795","IsPullRequest":true,"CreatedAt":"2019-09-06T18:30:55","Actor":"dotnet-maestro[bot]","Number":"12518","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190906.09\r\n- **Date Produced**: 9/6/2019 4:25 PM\r\n- **Commit**: 7062a74af05f1e0230cff6dca085b89bc6d27830\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-rc2-19456-09\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-rc2-19456-09\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.0.0-rc2-19456-09\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-rc2-19456-09\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-rc2-19456-09\r\n\r\n[marker]: <> (End:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12518","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/core-setup\" (#12518)"},{"Id":"490439875","IsPullRequest":true,"CreatedAt":"2019-09-06T18:15:59","Actor":"dotnet-maestro[bot]","Number":"12516","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190906.10\r\n- **Date Produced**: 9/6/2019 4:23 PM\r\n- **Commit**: 7bc2cd591ca8f2ae31119d8a137c69a192a88bac\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19456.10\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19456.10\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19456.10\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19456.10\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19456.10\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12516","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12516)"},{"Id":"490382757","IsPullRequest":true,"CreatedAt":"2019-09-06T16:10:58","Actor":"dotnet-maestro[bot]","Number":"12515","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190906.06\r\n- **Date Produced**: 9/6/2019 2:09 PM\r\n- **Commit**: 950a2810e6239be0d3d841b46157c1fb48dbdc28\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-rc2-19456-06\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-rc2-19456-06\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.0.0-rc2-19456-06\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-rc2-19456-06\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-rc2-19456-06\r\n\r\n[marker]: <> (End:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12515","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/core-setup\" (#12515)"},{"Id":"490290164","IsPullRequest":true,"CreatedAt":"2019-09-06T13:03:48","Actor":"dotnet-maestro[bot]","Number":"12513","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:433865d5-f754-408e-06ed-08d645e2db8e)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190905.21\r\n- **Date Produced**: 9/6/2019 1:51 AM\r\n- **Commit**: e99f81b0e3289cfd851be0d927c1fcffa43af6b5\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19455.21\r\n\r\n[marker]: <> (End:433865d5-f754-408e-06ed-08d645e2db8e)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12513","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#12513)"},{"Id":"490292996","IsPullRequest":true,"CreatedAt":"2019-09-06T12:10:17","Actor":"dotnet-maestro[bot]","Number":"12514","RawContent":null,"Title":"[master] Update dependencies from dotnet/templating","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190905.1\r\n- **Date Produced**: 9/5/2019 12:45 PM\r\n- **Commit**: b926d9bee62f0c8962c7645015ab8e68c794f9e4\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 5.0.0-alpha1.19455.1\r\n\r\n[marker]: <> (End:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12514","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/templating\" (#12514)"},{"Id":"490272297","IsPullRequest":true,"CreatedAt":"2019-09-06T11:16:34","Actor":"singhsarab","Number":"12512","RawContent":null,"Title":"Converging test and vstest verb","State":"open","Body":"Adding the code to make sure we are able to run dll/exe using the dotnet test command.\r\nConvert the given args to vstest parsable args and invoke vstest.\r\n\r\nFixes: microsoft/vstest#1453","Url":"https://github.com/dotnet/cli/pull/12512","RelatedDescription":"Open PR \"Converging test and vstest verb\" (#12512)"},{"Id":"490241091","IsPullRequest":true,"CreatedAt":"2019-09-06T11:00:59","Actor":"dotnet-maestro[bot]","Number":"12511","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190906.2\r\n- **Date Produced**: 9/6/2019 8:28 AM\r\n- **Commit**: 7bc2cd591ca8f2ae31119d8a137c69a192a88bac\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19456.2\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19456.2\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19456.2\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19456.2\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19456.2\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12511","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12511)"},{"Id":"490114622","IsPullRequest":true,"CreatedAt":"2019-09-06T10:03:54","Actor":"dotnet-maestro[bot]","Number":"12509","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190905.31\r\n- **Date Produced**: 9/6/2019 7:39 AM\r\n- **Commit**: 7194756bb3b052f1550dd50d3e229b350d348da2\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.1.0-preview1.19455.31\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.1.0-preview1.19455.31\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.1.0-preview1.19455.31\r\n  - **Microsoft.NET.HostModel** -> 3.1.0-preview1.19455.31\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.1.0-preview1.19455.31\r\n\r\n[marker]: <> (End:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12509","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#12509)"},{"Id":"490085831","IsPullRequest":true,"CreatedAt":"2019-09-06T08:34:16","Actor":"dotnet-maestro[bot]","Number":"12507","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190905.30\r\n- **Date Produced**: 9/6/2019 6:10 AM\r\n- **Commit**: 594892686c9f132b5fc70c39c41037383957f7bb\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19455.30\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19455.30\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19455.30\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19455.30\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19455.30\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12507","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12507)"},{"Id":"490180804","IsPullRequest":true,"CreatedAt":"2019-09-06T08:30:51","Actor":"dotnet-maestro[bot]","Number":"12510","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190905.28\r\n- **Date Produced**: 9/6/2019 6:05 AM\r\n- **Commit**: ff03f37493197645460f51ab4dc17cbb50c500a8\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-rc2-19455-28\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-rc2-19455-28\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.0.0-rc2-19455-28\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-rc2-19455-28\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-rc2-19455-28\r\n\r\n[marker]: <> (End:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12510","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/core-setup\" (#12510)"},{"Id":"490106898","IsPullRequest":true,"CreatedAt":"2019-09-06T04:01:02","Actor":"dotnet-maestro[bot]","Number":"12508","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:fa87930c-8514-45a1-0d47-08d6910cd73b)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190905.7\r\n- **Date Produced**: 9/6/2019 2:25 AM\r\n- **Commit**: b88161ed99ded0dd598779ad1afe044818422a6f\r\n- **Branch**: refs/heads/release/3.0.1xx\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-rc2.19455.7\r\n\r\n[marker]: <> (End:fa87930c-8514-45a1-0d47-08d6910cd73b)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12508","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/sdk\" (#12508)"},{"Id":"490066650","IsPullRequest":true,"CreatedAt":"2019-09-06T00:04:07","Actor":"dotnet-bot","Number":"12506","RawContent":null,"Title":"Merge release/3.0.100-preview9 to release/3.0.1xx","State":"open","Body":"\nThis is an automatically generated pull request from release/3.0.100-preview9 into release/3.0.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.100-preview9-to-release/3.0.1xx\ngit reset --hard upstream/release/3.0.1xx\ngit merge upstream/release/3.0.100-preview9\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.100-preview9-to-release/3.0.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/12506","RelatedDescription":"Open PR \"Merge release/3.0.100-preview9 to release/3.0.1xx\" (#12506)"},{"Id":"489971923","IsPullRequest":true,"CreatedAt":"2019-09-05T23:48:06","Actor":"dotnet-maestro[bot]","Number":"12500","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190905.17\r\n- **Date Produced**: 9/5/2019 9:26 PM\r\n- **Commit**: e8f7aaf617218ee21f0d15fb79e339662fea14a7\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19455.17\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19455.17\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19455.17\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19455.17\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19455.17\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12500","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12500)"},{"Id":"490040956","IsPullRequest":true,"CreatedAt":"2019-09-05T23:41:01","Actor":"dotnet-maestro[bot]","Number":"12504","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:fa87930c-8514-45a1-0d47-08d6910cd73b)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190905.5\r\n- **Date Produced**: 9/5/2019 10:05 PM\r\n- **Commit**: 021e6140f09b28f15a048db6709c7be8f74eda3d\r\n- **Branch**: refs/heads/release/3.0.1xx\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-rc1.19455.5\r\n\r\n[marker]: <> (End:fa87930c-8514-45a1-0d47-08d6910cd73b)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12504","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/sdk\" (#12504)"},{"Id":"490036597","IsPullRequest":true,"CreatedAt":"2019-09-05T23:26:47","Actor":"dotnet-maestro[bot]","Number":"12503","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190905.16\r\n- **Date Produced**: 9/5/2019 8:38 PM\r\n- **Commit**: 8cdffdc87fb6c1d63adb575df18645e5e45c0d94\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.1.0-preview1.19455.16\r\n  - **Microsoft.NET.HostModel** -> 3.1.0-preview1.19455.16\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.1.0-preview1.19455.16\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.1.0-preview1.19455.16\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.1.0-preview1.19455.16\r\n\r\n[marker]: <> (End:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12503","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#12503)"},{"Id":"490055998","IsPullRequest":true,"CreatedAt":"2019-09-05T23:18:03","Actor":"nguerrera","Number":"12505","RawContent":null,"Title":"Remove unused files","State":"open","Body":"Some files got added to the packaging/ directory that came from 2.2 -> master merges. These files are not needed as this repo does not build the installer packages anymore.\r\n\r\nMore importantly, the eula.rtf file is tripping a wire for source build, which is why I've targeted this cleanup at 3.0.","Url":"https://github.com/dotnet/cli/pull/12505","RelatedDescription":"Open PR \"Remove unused files\" (#12505)"},{"Id":"490034860","IsPullRequest":true,"CreatedAt":"2019-09-05T23:15:58","Actor":"dotnet-maestro[bot]","Number":"12502","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190905.18\r\n- **Date Produced**: 9/5/2019 9:07 PM\r\n- **Commit**: 1d5906d7734a0998ffaed65845590d7189947296\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-rc1-19455-18\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-rc1-19455-18\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.0.0-rc1-19455-18\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-rc1-19455-18\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-rc1-19455-18\r\n\r\n[marker]: <> (End:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12502","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/core-setup\" (#12502)"},{"Id":"489955217","IsPullRequest":true,"CreatedAt":"2019-09-05T22:38:00","Actor":"livarcocc","Number":"12499","RawContent":null,"Title":"Updating branding to rc2","State":"closed","Body":"Marking draft because we need release/3.0.1xx to be merged into release/3.0.100-preview9 before merging this PR.","Url":"https://github.com/dotnet/cli/pull/12499","RelatedDescription":"Closed or merged PR \"Updating branding to rc2\" (#12499)"},{"Id":"489992647","IsPullRequest":true,"CreatedAt":"2019-09-05T22:37:41","Actor":"livarcocc","Number":"12501","RawContent":null,"Title":"Merge release/3.0.1xx into release/3.0.100 preview9","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/12501","RelatedDescription":"Closed or merged PR \"Merge release/3.0.1xx into release/3.0.100 preview9\" (#12501)"},{"Id":"489948294","IsPullRequest":true,"CreatedAt":"2019-09-05T20:47:40","Actor":"peterhuene","Number":"12497","RawContent":null,"Title":"Add missing host options to dotnet help.","State":"closed","Body":"This commit adds help text for the `--depsfile` and `--runtimeconfig` host\r\noptions to `dotnet help` and `dotnet --help`.\r\n\r\nFixes #12444.\r\n","Url":"https://github.com/dotnet/cli/pull/12497","RelatedDescription":"Closed or merged PR \"Add missing host options to dotnet help.\" (#12497)"},{"Id":"489953691","IsPullRequest":true,"CreatedAt":"2019-09-05T20:33:13","Actor":"livarcocc","Number":"12498","RawContent":null,"Title":"Merge release/3.0.100-preview9 into release/3.0.1xx","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/12498","RelatedDescription":"Closed or merged PR \"Merge release/3.0.100-preview9 into release/3.0.1xx\" (#12498)"}],"ResultType":"GitHubIssue"},"Standard-Issues":{"Issues":[{"Id":"490561333","IsPullRequest":true,"CreatedAt":"2019-09-06T23:44:05","Actor":"terrajobst","Number":"1514","RawContent":null,"Title":"Expose SequenceReader<T> and friends","State":"open","Body":"***Ask Mode 3.0 GA: Expose SequenceReader<T> in .NET Standard 2.1***\r\n\r\n### Description\r\n\r\nFor ASP.NET pipelines we've added a type called `SequenceReader` that allows efficient traversal of data that is stored in multiple buffers. It's a key exchange type for low-level code. Unfortunately, we missed this API when adding new .NET Core 3.0 concepts to .NET Standard 2.1. This PR addresses that.\r\n\r\n### Customer Impact\r\n\r\nFrom @davidfowl:\r\n\r\n> its damn near impossible to write efficient code that works well without the `SequenceReader`. The options today lead you to writing something very similar or converting the `ReadOnlySequence<T>` to `T[]` (which defeats the purpose).\r\n\r\n### How found\r\n\r\nReported by customer.\r\n\r\n### Regression?\r\n\r\nNo\r\n\r\n### Risk\r\n\r\nRisk is very small. .NET Standard just exposed the API that already exists in .NET Core.\r\n","Url":"https://github.com/dotnet/standard/pull/1514","RelatedDescription":"Open PR \"Expose SequenceReader<T> and friends\" (#1514)"},{"Id":"490561176","IsPullRequest":true,"CreatedAt":"2019-09-06T23:43:04","Actor":"terrajobst","Number":"1513","RawContent":null,"Title":"Add missing readonly modifiers","State":"open","Body":"***Ask Mode 3.0 GA: Fix missing read-only modifiers***\r\n\r\n### Description\r\n\r\nC# 8 adds the ability to apply the `readonly` modifier to members. This allows the compiler to avoid defensive copies of structs when calling methods that don't change the struct's state.\r\n\r\nWhen comparing the reference assemblies between .NET Core and .NET Standard we were using an older language version to generate the C# representation of the reference assemblies. This resulted in us not marking the .NET Standard version of certain .NET Core APIs as `readonly`.\r\n\r\n### Customer Impact\r\n\r\nReduced performance.\r\n\r\n### How found\r\n\r\nReported by @stephentoub.\r\n\r\n### Regression?\r\n\r\nNo\r\n\r\n### Risk\r\n\r\nRisk is very small. .NET Standard just exposes the API that already exists in .NET Core.\r\n","Url":"https://github.com/dotnet/standard/pull/1513","RelatedDescription":"Open PR \"Add missing readonly modifiers\" (#1513)"},{"Id":"490103212","IsPullRequest":true,"CreatedAt":"2019-09-06T23:38:03","Actor":"terrajobst","Number":"1508","RawContent":null,"Title":"Add missing readonly modifiers","State":"closed","Body":"I've recently updated the reference assembly generation tool to the latest C# version. This exposed a bug where .NET Standard didn't include `readonly` modifiers that .NET Core added in 3.0. For the affected APIs these wouldn't cause correctness issues, but it would result in superfluous defensive copies, which, given the size of some of these structs, could result in reduced performance.\r\n\r\n/cc @stephentoub @tannergooding ","Url":"https://github.com/dotnet/standard/pull/1508","RelatedDescription":"Closed or merged PR \"Add missing readonly modifiers\" (#1508)"},{"Id":"488805881","IsPullRequest":false,"CreatedAt":"2019-09-06T21:34:19","Actor":"terrajobst","Number":"1497","RawContent":null,"Title":"Expose ReadOnlySequence<T>.GetFirstSpan()","State":"closed","Body":"_Originally posted by @davidfowl in https://github.com/dotnet/corefx/issues/33029#issuecomment-526800999_","Url":"https://github.com/dotnet/standard/issues/1497","RelatedDescription":"Closed issue \"Expose ReadOnlySequence<T>.GetFirstSpan()\" (#1497)"},{"Id":"489500906","IsPullRequest":true,"CreatedAt":"2019-09-06T21:34:18","Actor":"terrajobst","Number":"1500","RawContent":null,"Title":"Expose SequenceReader<T> and friends","State":"closed","Body":"Fixes #1493, #1497\r\n\r\n/cc @chris579","Url":"https://github.com/dotnet/standard/pull/1500","RelatedDescription":"Closed or merged PR \"Expose SequenceReader<T> and friends\" (#1500)"},{"Id":"487768943","IsPullRequest":false,"CreatedAt":"2019-09-06T21:34:18","Actor":"chris579","Number":"1493","RawContent":null,"Title":"Make SequenceReader available","State":"closed","Body":"Reading from a `ReadOnlySequence<T>` requires to keep track of position and consumed data. In core you can use the type [SequenceReader](https://docs.microsoft.com/en-us/dotnet/api/system.buffers.sequencereader-1?view=netcore-3.0) that does that for you. In standard you don't have it which leads to three possibilities:\r\n- Write your own implementation which does similar things like `SequenceReader`\r\n- Copy the implementation of `SequenceReader`\r\n- Converting the `ReadOnlySequence<t>` to `T[]` which defeats the purpose\r\n\r\nAll options are not convenient. Making `SequenceReader` available in standard would allow libraries to use the performance benefits of `SequenceReader` without the need to rely on third party implementations or crushing performance because of allocations.","Url":"https://github.com/dotnet/standard/issues/1493","RelatedDescription":"Closed issue \"Make SequenceReader available\" (#1493)"},{"Id":"490530227","IsPullRequest":false,"CreatedAt":"2019-09-06T21:28:54","Actor":"terrajobst","Number":"1512","RawContent":null,"Title":"Align private fields with structs from re-run in CoreFX","State":"open","Body":"[Looks like CoreFX](https://github.com/dotnet/standard/pull/1500#discussion_r321890968) accidentally removed some private field annotations for structs. Once CoreFX added them back, we should update .NET Standard to match.","Url":"https://github.com/dotnet/standard/issues/1512","RelatedDescription":"Open issue \"Align private fields with structs from re-run in CoreFX\" (#1512)"},{"Id":"490440451","IsPullRequest":true,"CreatedAt":"2019-09-06T17:41:59","Actor":"dotnet-maestro[bot]","Number":"1511","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190906.2\r\n- **Date Produced**: 9/6/2019 2:35 PM\r\n- **Commit**: 397060df67388da56b50de7e6f7292a5dccc2de6\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19456.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19456.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19456.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19456.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19456.2\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19456.2\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1511","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1511)"},{"Id":"490300335","IsPullRequest":true,"CreatedAt":"2019-09-06T12:48:09","Actor":"dotnet-maestro[bot]","Number":"1510","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190905.16\r\n- **Date Produced**: 9/6/2019 1:28 AM\r\n- **Commit**: 4390a665c2fe082007f6bd25be0e055307ee5573\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19455.16\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19455.16\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19455.16\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1510","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1510)"},{"Id":"490289536","IsPullRequest":true,"CreatedAt":"2019-09-06T12:11:49","Actor":"dotnet-maestro[bot]","Number":"1509","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190905.21\r\n- **Date Produced**: 9/6/2019 1:51 AM\r\n- **Commit**: e99f81b0e3289cfd851be0d927c1fcffa43af6b5\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19455.21\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19455.21\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19455.21\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19455.21\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19455.21\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19455.21\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1509","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1509)"},{"Id":"490039576","IsPullRequest":true,"CreatedAt":"2019-09-05T23:36:38","Actor":"Anipik","Number":"1507","RawContent":null,"Title":"snapping release/3.0 -> release/3.0-preview9","State":"closed","Body":"","Url":"https://github.com/dotnet/standard/pull/1507","RelatedDescription":"Closed or merged PR \"snapping release/3.0 -> release/3.0-preview9\" (#1507)"},{"Id":"489720165","IsPullRequest":true,"CreatedAt":"2019-09-05T22:28:52","Actor":"dotnet-maestro[bot]","Number":"1504","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:29f70c24-3711-40be-9246-08d6c732a216)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190904.31\r\n- **Date Produced**: 9/5/2019 2:00 AM\r\n- **Commit**: 00d8aa82b488f321204a0e69a81399af9df276a1\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19454.31\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19454.31\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19454.31\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19454.31\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19454.31\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19454.31\r\n\r\n[marker]: <> (End:29f70c24-3711-40be-9246-08d6c732a216)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1504","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/arcade\" (#1504)"},{"Id":"489720957","IsPullRequest":true,"CreatedAt":"2019-09-05T12:45:45","Actor":"dotnet-maestro[bot]","Number":"1506","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:8358c059-232d-4dac-c08d-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190904.13\r\n- **Date Produced**: 9/5/2019 6:39 AM\r\n- **Commit**: 5f2c2771e077f98c097ecc1b9202bee22ef50aed\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-rc1.19454.13\r\n  - **System.Reflection.Emit** -> 4.6.0-rc1.19454.13\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-rc1.19454.13\r\n\r\n[marker]: <> (End:8358c059-232d-4dac-c08d-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1506","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/corefx\" (#1506)"},{"Id":"489720839","IsPullRequest":true,"CreatedAt":"2019-09-05T12:45:30","Actor":"dotnet-maestro[bot]","Number":"1505","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190904.11\r\n- **Date Produced**: 9/5/2019 4:02 AM\r\n- **Commit**: 838832e2ecac9f81b5a5649bfac2fc835db76c1e\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19454.11\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19454.11\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19454.11\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1505","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1505)"},{"Id":"489707331","IsPullRequest":true,"CreatedAt":"2019-09-05T12:11:48","Actor":"dotnet-maestro[bot]","Number":"1503","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190904.31\r\n- **Date Produced**: 9/5/2019 2:00 AM\r\n- **Commit**: 00d8aa82b488f321204a0e69a81399af9df276a1\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19454.31\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19454.31\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19454.31\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19454.31\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19454.31\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19454.31\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1503","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1503)"},{"Id":"489700481","IsPullRequest":false,"CreatedAt":"2019-09-05T11:45:40","Actor":"CShepartd","Number":"1502","RawContent":null,"Title":"Add System.Text.Json","State":"open","Body":"[`System.Text.Json`](https://docs.microsoft.com/en-us/dotnet/api/system.text.json?view=netcore-3.0) should be added to .Net Standard 2.1 or next release","Url":"https://github.com/dotnet/standard/issues/1502","RelatedDescription":"Open issue \"Add System.Text.Json\" (#1502)"},{"Id":"489648306","IsPullRequest":false,"CreatedAt":"2019-09-05T09:51:10","Actor":"MRebati","Number":"1501","RawContent":null,"Title":"adding Netstandard nuget package to another Netstandard project cause \"Unable to find metadata of Microsoft.NETCore.Targets.1.1.0\" error","State":"open","Body":"hello, I've been working on this for a few days.\r\nI created a net standard project. packed it as nuget package. added to a local nuget server. tried to add it as a reference to another project and got this error on adding.\r\n\r\n\"Unable to find metadata of Microsoft.NETCore.Targets.1.1.0\"\r\n\r\nchecked the nuget.org for the new version of \"Microsoft.NETCore.Targets\" and downloaded it.\r\nit did not solve any problem. tried to add the 1.1.0 version. and it did not help either.\r\n\r\ntried to add net core platform on both projects. also did not help.\r\nwhy is net standard even dependent on net core platform?","Url":"https://github.com/dotnet/standard/issues/1501","RelatedDescription":"Open issue \"adding Netstandard nuget package to another Netstandard project cause \"Unable to find metadata of Microsoft.NETCore.Targets.1.1.0\" error\" (#1501)"},{"Id":"487457614","IsPullRequest":true,"CreatedAt":"2019-09-04T16:54:58","Actor":"dotnet-maestro[bot]","Number":"1487","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:29f70c24-3711-40be-9246-08d6c732a216)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190903.5\r\n- **Date Produced**: 9/3/2019 10:25 PM\r\n- **Commit**: 6e94f0da0f12c7663ab39ce5bd6a67c4ab58b5ee\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19453.5\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19453.5\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19453.5\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19453.5\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19453.5\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19453.5\r\n\r\n[marker]: <> (End:29f70c24-3711-40be-9246-08d6c732a216)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1487","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/arcade\" (#1487)"},{"Id":"489129967","IsPullRequest":true,"CreatedAt":"2019-09-04T12:39:41","Actor":"dotnet-maestro[bot]","Number":"1499","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190903.12\r\n- **Date Produced**: 9/4/2019 8:04 AM\r\n- **Commit**: 1511f723f7adfe82cef72460df45dc4422d303c6\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19453.12\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19453.12\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19453.12\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1499","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1499)"},{"Id":"489117219","IsPullRequest":true,"CreatedAt":"2019-09-04T12:11:56","Actor":"dotnet-maestro[bot]","Number":"1498","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190903.5\r\n- **Date Produced**: 9/3/2019 10:25 PM\r\n- **Commit**: 6e94f0da0f12c7663ab39ce5bd6a67c4ab58b5ee\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19453.5\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19453.5\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19453.5\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19453.5\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19453.5\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19453.5\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1498","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1498)"},{"Id":"488570303","IsPullRequest":true,"CreatedAt":"2019-09-03T12:27:46","Actor":"dotnet-maestro[bot]","Number":"1496","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190902.6\r\n- **Date Produced**: 9/3/2019 5:38 AM\r\n- **Commit**: b2412774416fc177cf5daa025bb4644a0a91c2df\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19452.6\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19452.6\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19452.6\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1496","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1496)"},{"Id":"488161716","IsPullRequest":true,"CreatedAt":"2019-09-02T12:28:26","Actor":"dotnet-maestro[bot]","Number":"1495","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190901.2\r\n- **Date Produced**: 9/1/2019 5:40 PM\r\n- **Commit**: 130d8582e4973bbdb55ae737b942d214ad3c6570\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19451.2\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19451.2\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19451.2\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1495","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1495)"},{"Id":"487879063","IsPullRequest":true,"CreatedAt":"2019-09-01T12:27:14","Actor":"dotnet-maestro[bot]","Number":"1494","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190831.3\r\n- **Date Produced**: 8/31/2019 5:22 PM\r\n- **Commit**: c4b450ba5d9898be09fe589ba2583772c70a4712\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19431.3\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19431.3\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19431.3\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1494","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1494)"},{"Id":"487765426","IsPullRequest":true,"CreatedAt":"2019-08-31T12:39:19","Actor":"dotnet-maestro[bot]","Number":"1492","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190831.1\r\n- **Date Produced**: 8/31/2019 8:30 AM\r\n- **Commit**: 2c974d484209ab46815ec9abd35936ca66f2444e\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19431.1\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19431.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19431.1\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1492","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1492)"},{"Id":"487763042","IsPullRequest":true,"CreatedAt":"2019-08-31T12:11:55","Actor":"dotnet-maestro[bot]","Number":"1491","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190830.3\r\n- **Date Produced**: 8/30/2019 6:51 PM\r\n- **Commit**: 316c80d0c373be63f991cc4d586db85273c1c553\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19430.3\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19430.3\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19430.3\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19430.3\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19430.3\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19430.3\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1491","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1491)"},{"Id":"487637930","IsPullRequest":true,"CreatedAt":"2019-08-30T23:35:03","Actor":"jonpryor","Number":"1490","RawContent":null,"Title":".NET Standard 2.1 needs Xamarin.Android 10.0","State":"closed","Body":"Xamarin.Android 9.5.0 was a preview release for Visual Studio 16.3\r\nPreview 1.  It has since become Xamarin.Android 10.0.0, as of\r\nVisual Studio 16.3 Preview 2.","Url":"https://github.com/dotnet/standard/pull/1490","RelatedDescription":"Closed or merged PR \".NET Standard 2.1 needs Xamarin.Android 10.0\" (#1490)"},{"Id":"487534078","IsPullRequest":false,"CreatedAt":"2019-08-30T15:44:35","Actor":"masterwok","Number":"1489","RawContent":null,"Title":"Make BigInteger Big Endian friendly like CoreFX ","State":"closed","Body":"It would be nice to expose the same big endian friendly interface for BigInteger that CoreFX does as outlined in this issue: https://github.com/dotnet/corefx/issues/24575\r\n\r\nIs this a possibility? Thank you.","Url":"https://github.com/dotnet/standard/issues/1489","RelatedDescription":"Closed issue \"Make BigInteger Big Endian friendly like CoreFX \" (#1489)"},{"Id":"487458245","IsPullRequest":true,"CreatedAt":"2019-08-30T12:40:45","Actor":"dotnet-maestro[bot]","Number":"1488","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190829.10\r\n- **Date Produced**: 8/30/2019 3:58 AM\r\n- **Commit**: ae0d0cb852a6186ca5ef8130b0bf862314485017\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19429.10\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19429.10\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19429.10\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1488","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1488)"},{"Id":"487446462","IsPullRequest":true,"CreatedAt":"2019-08-30T12:11:56","Actor":"dotnet-maestro[bot]","Number":"1486","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190829.16\r\n- **Date Produced**: 8/30/2019 1:19 AM\r\n- **Commit**: e5aaea7fcfc46449b035d5b220032bfb933e98a4\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19429.16\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19429.16\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19429.16\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19429.16\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19429.16\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19429.16\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1486","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1486)"},{"Id":"486948512","IsPullRequest":true,"CreatedAt":"2019-08-29T20:54:50","Actor":"ViktorHofer","Number":"1485","RawContent":null,"Title":"[release/3.0] fix syntax for the publishUsingPipelines variable","State":"closed","Body":"Same fix as in https://github.com/dotnet/corefx/commit/a596356bcd8c1a66f9401b28d7f00837a99ca788\r\n\r\ncc @Anipik ","Url":"https://github.com/dotnet/standard/pull/1485","RelatedDescription":"Closed or merged PR \"[release/3.0] fix syntax for the publishUsingPipelines variable\" (#1485)"}],"ResultType":"GitHubIssue"},"CoreFx-Issues":{"Issues":[{"Id":"490553519","IsPullRequest":false,"CreatedAt":"2019-09-07T04:40:45","Actor":"AnFa1978","Number":"40905","RawContent":null,"Title":"Supports for serializing enums to their text name","State":"closed","Body":"# Issue Title\r\n1) Define “Foo” class which provide access to enum property “Color” (enumeration has different values)\r\n2) Create instance and serialize to json with System.Text.Json.JsonSerializer.Serialize(…)\r\n\r\n# General\r\nRepresentation of serialized enum is integer instead of string e.g. “2” instead of “Red”. Because of shared public APIs with customers it's not so easy possible to write converters for enumerations. Therefore this small feature would be very helpful to support our switch. (observed with W10 and .Net Core SDK 3.0.100 preview8 x64) \r\n","Url":"https://github.com/dotnet/corefx/issues/40905","RelatedDescription":"Closed issue \"Supports for serializing enums to their text name\" (#40905)"},{"Id":"490557494","IsPullRequest":true,"CreatedAt":"2019-09-07T01:50:06","Actor":"Anipik","Number":"40907","RawContent":null,"Title":"Remove Redundant dependency of microsoft.netcoreapp.platforms ","State":"closed","Body":"","Url":"https://github.com/dotnet/corefx/pull/40907","RelatedDescription":"Closed or merged PR \"Remove Redundant dependency of microsoft.netcoreapp.platforms \" (#40907)"},{"Id":"490556364","IsPullRequest":true,"CreatedAt":"2019-09-07T01:49:23","Actor":"Anipik","Number":"40906","RawContent":null,"Title":"Remove Redundant dependency of microsoft.netcoreapp.platforms","State":"closed","Body":"","Url":"https://github.com/dotnet/corefx/pull/40906","RelatedDescription":"Closed or merged PR \"Remove Redundant dependency of microsoft.netcoreapp.platforms\" (#40906)"},{"Id":"490564824","IsPullRequest":true,"CreatedAt":"2019-09-07T00:03:51","Actor":"safern","Number":"40910","RawContent":null,"Title":"Add missing dummy primitive to ReadOnlySequence<T>.Enumerator","State":"open","Body":"cc: @ahsonkhan @stephentoub @terrajobst @ericstj ","Url":"https://github.com/dotnet/corefx/pull/40910","RelatedDescription":"Open PR \"Add missing dummy primitive to ReadOnlySequence<T>.Enumerator\" (#40910)"},{"Id":"490563159","IsPullRequest":false,"CreatedAt":"2019-09-06T23:54:16","Actor":"safern","Number":"40909","RawContent":null,"Title":"Do a sanity check of our ref assemblies to see if any struct is missing a dummy field","State":"open","Body":"Based on the following discussion: https://github.com/dotnet/standard/pull/1500#discussion_r321741920\r\n\r\nWe should do a sanity check to find out if we're missing any dummy field from any significant structs in our ref assemblies.\r\n\r\ncc: @stephentoub @ahsonkhan @ericstj ","Url":"https://github.com/dotnet/corefx/issues/40909","RelatedDescription":"Open issue \"Do a sanity check of our ref assemblies to see if any struct is missing a dummy field\" (#40909)"},{"Id":"490530310","IsPullRequest":false,"CreatedAt":"2019-09-06T23:49:19","Actor":"JamesNK","Number":"40904","RawContent":null,"Title":"HTTP2: Canceling token given to HttpClient.SendAsync does not send RST_STREAM","State":"closed","Body":"Found by a customer: https://twitter.com/stevejgordon/status/1169995743568048129\r\n\r\nThis is a high impact bug. A user will cancel a streaming gRPC call on the client, but the server will never be notified. If the server is checking `CancellationToken.IsCancellationRequested` then it will hang open forever.\r\n\r\nThis is a regression of https://github.com/dotnet/corefx/issues/38391\r\n\r\nRelated: https://github.com/dotnet/corefx/issues/39049\r\n\r\n---\r\n\r\nRepro:\r\n1. `git clone https://github.com/JamesNK/grpc-dotnet.git`\r\n2. `git checkout jamesnk/duplex-cancellation-regression`\r\n3. `dotnet test test\\FunctionalTests --filter Name~ServerStreaming_CancellationOnClient_SentToServer`\r\n\r\nLogic in the test is something like:\r\n1. Client makes a server streaming call to the server. This means the client is sending one message in the request's HttpContent, which then completes.\r\n2. Server streams multiple messages to the client\r\n3. Client triggers the cancellation token given to gRPC client. HttpClient.SendAsync token is canceled\r\n4. The HttpClient should be sending RST_STREAM to the server, and the server should report the call is canceled. This isn't happening so the server will stream messages forever.\r\n\r\nWireshark log: [cancellation-regression.zip](https://github.com/dotnet/corefx/files/3585848/cancellation-regression.zip)\r\n\r\n","Url":"https://github.com/dotnet/corefx/issues/40904","RelatedDescription":"Closed issue \"HTTP2: Canceling token given to HttpClient.SendAsync does not send RST_STREAM\" (#40904)"},{"Id":"490561895","IsPullRequest":true,"CreatedAt":"2019-09-06T23:46:58","Actor":"safern","Number":"40908","RawContent":null,"Title":"[release/3.0] Disable ToolboxBitmatAttribute test in netfx (#40901)","State":"open","Body":"Fixes: https://github.com/dotnet/corefx/issues/40877\r\n\r\nTEST Only change.\r\n\r\ncc: @ViktorHofer ","Url":"https://github.com/dotnet/corefx/pull/40908","RelatedDescription":"Open PR \"[release/3.0] Disable ToolboxBitmatAttribute test in netfx (#40901)\" (#40908)"},{"Id":"490521956","IsPullRequest":true,"CreatedAt":"2019-09-06T23:38:03","Actor":"mmitche","Number":"40903","RawContent":null,"Title":"Disable SDL validation","State":"closed","Body":"SDL validation is too expensive to run on a per-build basis. Disable for now","Url":"https://github.com/dotnet/corefx/pull/40903","RelatedDescription":"Closed or merged PR \"Disable SDL validation\" (#40903)"},{"Id":"490500470","IsPullRequest":true,"CreatedAt":"2019-09-06T21:56:57","Actor":"safern","Number":"40901","RawContent":null,"Title":"Disable ToolboxBitmatAttribute test in netfx","State":"closed","Body":"contributes to: https://github.com/dotnet/corefx/issues/40877\r\n\r\ncc: @ViktorHofer ","Url":"https://github.com/dotnet/corefx/pull/40901","RelatedDescription":"Closed or merged PR \"Disable ToolboxBitmatAttribute test in netfx\" (#40901)"},{"Id":"490511656","IsPullRequest":true,"CreatedAt":"2019-09-06T20:34:33","Actor":"TylerBrinkley","Number":"40902","RawContent":null,"Title":"Update StringComparerTests.cs","State":"open","Body":"Added test to check that `StringComparer.Create` overload throws `ArgumentNullException` when a `null` culture is provided.\r\n\r\nRelates to https://github.com/dotnet/coreclr/pull/26570","Url":"https://github.com/dotnet/corefx/pull/40902","RelatedDescription":"Open PR \"Update StringComparerTests.cs\" (#40902)"},{"Id":"490480255","IsPullRequest":true,"CreatedAt":"2019-09-06T19:08:57","Actor":"dotnet-maestro-bot","Number":"40900","RawContent":null,"Title":"[automated] Merge branch 'release/3.0' => 'release/3.1'","State":"open","Body":"I detected changes in the release/3.0 branch which have not been merged yet to release/3.1. I'm a robot and am configured to help you automatically keep release/3.1 up to date, so I've opened this PR.\r\n\r\nThis PR merges commits made on release/3.0 by the following committers:\n\n* @stephentoub\n* @joperezr\n* @dotnet-maestro[bot]\n* @Anipik\n* @danmosemsft\n* @mmitche\r\n\r\n## Instructions for merging from UI\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, complete this PR by creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nIf this repo does not allow creating merge commits from the GitHub UI, use command line instructions.\r\n\r\n## Instructions for merging via command line\r\n\r\nRun these commands to merge this pull request from the command line.\r\n\r\n``` sh\r\ngit fetch\r\ngit checkout release/3.0\r\ngit pull --ff-only\r\ngit checkout release/3.1\r\ngit pull --ff-only\r\ngit merge --no-ff release/3.0\r\n\r\n# If there are merge conflicts, resolve them and then run git merge --continue to complete the merge\r\n# Pushing the changes to the PR branch will re-trigger PR validation.\r\ngit push https://github.com/dotnet-maestro-bot/corefx HEAD:merge/release/3.0-to-release/3.1\r\n```\r\n\r\n<details>\r\n<summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit push git@github.com:dotnet-maestro-bot/corefx HEAD:merge/release/3.0-to-release/3.1\r\n```\r\n\r\n</details>\r\n\r\n\r\nAfter PR checks are complete push the branch\r\n```\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging. You can do this [using GitHub][resolve-github] or using the [command line][resolve-cli].\r\n\r\n[resolve-github]: https://help.github.com/articles/resolving-a-merge-conflict-on-github/\r\n[resolve-cli]: https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/\r\n\r\n## Instructions for updating this pull request\r\n\r\nContributors to this repo have permission update this pull request by pushing to the branch 'merge/release/3.0-to-release/3.1'. This can be done to resolve conflicts or make other changes to this pull request before it is merged.\r\n\r\n```\r\ngit checkout -b merge/release/3.0-to-release/3.1 release/3.1\r\ngit pull https://github.com/dotnet-maestro-bot/corefx merge/release/3.0-to-release/3.1\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push https://github.com/dotnet-maestro-bot/corefx HEAD:merge/release/3.0-to-release/3.1\r\n```\r\n\r\n<details>\r\n    <summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit checkout -b merge/release/3.0-to-release/3.1 release/3.1\r\ngit pull git@github.com:dotnet-maestro-bot/corefx merge/release/3.0-to-release/3.1\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push git@github.com:dotnet-maestro-bot/corefx HEAD:merge/release/3.0-to-release/3.1\r\n```\r\n\r\n</details>\r\n\r\nContact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.\r\n","Url":"https://github.com/dotnet/corefx/pull/40900","RelatedDescription":"Open PR \"[automated] Merge branch 'release/3.0' => 'release/3.1'\" (#40900)"},{"Id":"490437003","IsPullRequest":true,"CreatedAt":"2019-09-06T19:08:25","Actor":"Dotnet-GitSync-Bot","Number":"40895","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corefx/pull/40895","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#40895)"},{"Id":"490337361","IsPullRequest":true,"CreatedAt":"2019-09-06T19:06:29","Actor":"ViktorHofer","Number":"40887","RawContent":null,"Title":"Remove misleading test condition variable for registry","State":"closed","Body":"Fixes https://github.com/dotnet/corefx/issues/40842\r\n\r\nAs the name is misleading, removing the condition variable and replacing the callees with PlatformDetection.IsUap checks directly inline.\r\n\r\n@cston, @333fred","Url":"https://github.com/dotnet/corefx/pull/40887","RelatedDescription":"Closed or merged PR \"Remove misleading test condition variable for registry\" (#40887)"},{"Id":"490306231","IsPullRequest":true,"CreatedAt":"2019-09-06T19:05:18","Actor":"dotnet-maestro[bot]","Number":"40884","RawContent":null,"Title":"[release/3.1] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:8e91fa34-ea12-4ebd-d4c2-08d7315d8bc7)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190905.21\r\n- **Date Produced**: 9/6/2019 1:51 AM\r\n- **Commit**: e99f81b0e3289cfd851be0d927c1fcffa43af6b5\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions** -> 2.4.1-beta.19455.21\r\n  - **Microsoft.DotNet.XUnitConsoleRunner** -> 2.5.1-beta.19455.21\r\n  - **Microsoft.DotNet.VersionTools.Tasks** -> 1.0.0-beta.19455.21\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19455.21\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19455.21\r\n  - **Microsoft.DotNet.Build.Tasks.Configuration** -> 1.0.0-beta.19455.21\r\n  - **Microsoft.DotNet.Build.Tasks.Feed** -> 2.2.0-beta.19455.21\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19455.21\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19455.21\r\n  - **Microsoft.DotNet.CoreFxTesting** -> 1.0.0-beta.19455.21\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19455.21\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19455.21\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19455.21\r\n  - **Microsoft.DotNet.RemoteExecutor** -> 1.0.0-beta.19455.21\r\n\r\n[marker]: <> (End:8e91fa34-ea12-4ebd-d4c2-08d7315d8bc7)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/40884","RelatedDescription":"Closed or merged PR \"[release/3.1] Update dependencies from dotnet/arcade\" (#40884)"},{"Id":"490298355","IsPullRequest":true,"CreatedAt":"2019-09-06T19:05:07","Actor":"dotnet-maestro[bot]","Number":"40882","RawContent":null,"Title":"[master] Update dependencies from dotnet/coreclr","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:be1e858a-d56c-4174-7dc0-08d6ba16a224)\r\n## From https://github.com/dotnet/coreclr\r\n- **Build**: 20190905.9\r\n- **Date Produced**: 9/6/2019 1:43 AM\r\n- **Commit**: f23c07f692e4ce8cf6385afb7246b7cfbeff28ee\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk.IL** -> 5.0.0-alpha1.19455.9\r\n  - **Microsoft.NETCore.ILAsm** -> 5.0.0-alpha1.19455.9\r\n  - **Microsoft.NETCore.Runtime.CoreCLR** -> 5.0.0-alpha1.19455.9\r\n\r\n[marker]: <> (End:be1e858a-d56c-4174-7dc0-08d6ba16a224)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/40882","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/coreclr\" (#40882)"},{"Id":"490412982","IsPullRequest":true,"CreatedAt":"2019-09-06T19:04:18","Actor":"stephentoub","Number":"40891","RawContent":null,"Title":"Make \"remote\" more CultureInfo.CurrentCulture setting tests","State":"closed","Body":"Fixes https://github.com/dotnet/corefx/issues/40890 (hopefully)\r\ncc: @ViktorHofer ","Url":"https://github.com/dotnet/corefx/pull/40891","RelatedDescription":"Closed or merged PR \"Make \"remote\" more CultureInfo.CurrentCulture setting tests\" (#40891)"},{"Id":"490410336","IsPullRequest":false,"CreatedAt":"2019-09-06T19:04:18","Actor":"stephentoub","Number":"40890","RawContent":null,"Title":"GetInstance_ExpectedCurrent_ReturnsExpected failed in CI on uap","State":"closed","Body":"uap-Windows_NT-Debug-x64-Windows.10.Amd64.ClientRS5.Open\r\nhttps://github.com/dotnet/corefx/pull/40867\r\n```\r\n    System.Globalization.Tests.DateTimeFormatInfoGetInstance.GetInstance_ExpectedCurrent_ReturnsExpected [FAIL]\r\n      Assert.Equal() Failure\r\n      Expected: String[] [\"?\", \"?\", \"?\", \"?\", \"?\", ...]\r\n      Actual:   String[] [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", ...]\r\n      Stack Trace:\r\n        /_/src/System.Globalization/tests/DateTimeFormatInfo/DateTimeFormatInfoGetInstance.cs(50,0): at System.Globalization.Tests.DateTimeFormatInfoGetInstance.AssertSameValues(DateTimeFormatInfo expected, DateTimeFormatInfo value)\r\n        /_/src/System.Globalization/tests/DateTimeFormatInfo/DateTimeFormatInfoGetInstance.cs(77,0): at System.Globalization.Tests.DateTimeFormatInfoGetInstance.GetInstance_ExpectedCurrent_ReturnsExpected()\r\n```","Url":"https://github.com/dotnet/corefx/issues/40890","RelatedDescription":"Closed issue \"GetInstance_ExpectedCurrent_ReturnsExpected failed in CI on uap\" (#40890)"},{"Id":"490478274","IsPullRequest":false,"CreatedAt":"2019-09-06T19:03:29","Actor":"stephentoub","Number":"40899","RawContent":null,"Title":"Message_ShouldFormatCountOfRootCausesUsingTheCurrentCulture test failed in CI on UAP","State":"open","Body":"```\r\nC:\\dotnetbuild\\work\\c71fee18-1413-44e3-abc2-d15744bffa90\\Work\\5e9317f6-b4e2-44b9-9be7-60b734371f6b\\Exec>XUnitRunnerUap System.ComponentModel.Composition.Tests.dll -xml \"C:\\Users\\runner\\AppData\\Local\\Packages\\5cd54353-3ed7-4a6e-a72f-db349f28867c_v52bfwc2c21ha\\LocalState\\System.ComponentModel.Composition.Tests.xml\" -nologo -nocolor -notrait category=nonuaptests -notrait category=nonwindowstests -notrait category=IgnoreForCI -notrait category=OuterLoop -notrait category=failing  \r\n  Discovering: System.ComponentModel.Composition.Tests (method display = ClassAndMethod, method display options = None)\r\n  Discovered:  System.ComponentModel.Composition.Tests (found 1500 of 1630 test cases)\r\n  Starting:    System.ComponentModel.Composition.Tests (parallel test collections = on, max threads = 2)\r\nUnhandled exception. Xunit.Sdk.TrueException: Assert.True() Failure\r\nExpected: True\r\nActual:   False\r\n   at Xunit.Assert.True(Nullable`1 condition, String userMessage) in C:\\Dev\\xunit\\xunit\\src\\xunit.assert\\Asserts\\BooleanAsserts.cs:line 96\r\n   at Xunit.Assert.True(Boolean condition) in C:\\Dev\\xunit\\xunit\\src\\xunit.assert\\Asserts\\BooleanAsserts.cs:line 63\r\n   at System.ComponentModel.Composition.CompositionExceptionTests.AssertMessage(CompositionException exception, Int32 rootCauseCount, CultureInfo culture) in /_/src/System.ComponentModel.Composition/tests/System/ComponentModel/Composition/CompositionExceptionTests.cs:line 420\r\n   at System.ComponentModel.Composition.CompositionExceptionTests.<Message_ShouldFormatCountOfRootCausesUsingTheCurrentCulture>b__31_0() in /_/src/System.ComponentModel.Composition/tests/System/ComponentModel/Composition/CompositionExceptionTests.cs:line 383\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at Xunit.ConsoleClient.RemoteExecutor.Execute(String[] args)\r\n   at Xunit.ConsoleClient.ConsoleRunner.EntryPoint(String[] args)\r\n   at Xunit.ConsoleClient.Program.Main(String[] args)\r\n    System.ComponentModel.Composition.CompositionExceptionTests.Message_ShouldFormatCountOfRootCausesUsingTheCurrentCulture [FAIL]\r\n      Microsoft.DotNet.RemoteExecutor.RemoteExecutionException : Remote process failed with an unhandled exception.\r\n      Stack Trace:\r\n        \r\n        Child exception:\r\n          Xunit.Sdk.TrueException: Assert.True() Failure\r\n        Expected: True\r\n        Actual:   False\r\n        /_/src/System.ComponentModel.Composition/tests/System/ComponentModel/Composition/CompositionExceptionTests.cs(420,0): at System.ComponentModel.Composition.CompositionExceptionTests.AssertMessage(CompositionException exception, Int32 rootCauseCount, CultureInfo culture)\r\n        /_/src/System.ComponentModel.Composition/tests/System/ComponentModel/Composition/CompositionExceptionTests.cs(383,0): at System.ComponentModel.Composition.CompositionExceptionTests.<Message_ShouldFormatCountOfRootCausesUsingTheCurrentCulture>b__31_0()\r\n        \r\n        Child process:\r\n          System.ComponentModel.Composition.Tests, Version=4.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51 System.ComponentModel.Composition.CompositionExceptionTests Int32 <Message_ShouldFormatCountOfRootCausesUsingTheCurrentCulture>b__31_0()\r\n        \r\n        \r\n  Finished:    System.ComponentModel.Composition.Tests\r\n```","Url":"https://github.com/dotnet/corefx/issues/40899","RelatedDescription":"Open issue \"Message_ShouldFormatCountOfRootCausesUsingTheCurrentCulture test failed in CI on UAP\" (#40899)"},{"Id":"490470116","IsPullRequest":false,"CreatedAt":"2019-09-06T18:42:54","Actor":"steveharter","Number":"40898","RawContent":null,"Title":"Normalizing casing for property names in JsonException.Path helps deserialization performance","State":"open","Body":"Creating this issue to discuss feasibility of getting this into 5.0. cc @pranavkm @ahsonkhan @rynowak \r\n\r\nIf we remove support for using the literal JSON value for `JsonException.Path` we can get a ~5% end-to-end performance improvement during deserialization when using `options.CaseInsensitivePropertyNames=true` (which is the default for ASP.NET). Allocations are also reduced by ~30% (depends on property name lengths).\r\n\r\nThis means that when case insensitivity is on, the value of the `JsonException.Path` property may not exactly match the property name **casing** in the JSON (the value is always correct; just the casing can be off).\r\n\r\nThere are three ways the JSON property name is specified:\r\n1) The object's CLR property reflected name (default case).\r\n2) The value from `[JsonPropertyName]` attribute applied to a property.\r\n3) The naming policy from `options.PropertyNamingPolicy` such as camel-casing.\r\n\r\nSo currently if there exists JSON like `{\"myProp:1\"}` against a property named `MyProp` (either through case 1, 2 or 3 above) then when case-insensitivity is on the `JsonException.Path` will be `\"$.myProp\"`.\r\n\r\nHowever, using the raw JSON value comes at a cost for case insensitivity. Instead if we just use the value obtained from case 1, 2 or 3 (and not the actual JSON) then we get the perf improvement -- e.g. path would be `\"$.MyProp\"` instead of  `{\"myProp:1\"}` (again this would only occur when case insensitivity is on and does not match the actual property name).\r\n\r\n```\r\nCurrent:\r\n|                   Method |     Mean |    Error |   StdDev |   Median |      Min |      Max | Gen 0/1k Op | Gen 1/1k Op | Gen 2/1k Op | Allocated Memory/Op |\r\n|------------------------- |---------:|---------:|---------:|---------:|---------:|---------:|------------:|------------:|------------:|--------------------:|\r\n|    DeserializeFromString | 662.8 ns | 3.631 ns | 3.218 ns | 662.8 ns | 658.7 ns | 670.2 ns |      0.0611 |           - |           - |               384 B |\r\n| DeserializeFromUtf8Bytes | 614.0 ns | 2.882 ns | 2.696 ns | 614.6 ns | 609.1 ns | 618.9 ns |      0.0420 |           - |           - |               272 B |\r\n|    DeserializeFromStream | 915.3 ns | 3.769 ns | 3.341 ns | 916.6 ns | 908.8 ns | 918.4 ns |      0.0513 |           - |           - |               344 B |\r\n\r\nAfter:\r\n|    DeserializeFromString | 637.5 ns | 3.702 ns | 3.463 ns | 636.6 ns | 632.2 ns | 643.7 ns |      0.0436 |           - |           - |               280 B |\r\n| DeserializeFromUtf8Bytes | 586.1 ns | 4.028 ns | 3.768 ns | 585.3 ns | 579.7 ns | 592.6 ns |      0.0259 |           - |           - |               168 B |\r\n|    DeserializeFromStream | 913.7 ns | 4.604 ns | 4.307 ns | 912.7 ns | 907.1 ns | 921.5 ns |      0.0369 |           - |           - |               240 B |\r\n```","Url":"https://github.com/dotnet/corefx/issues/40898","RelatedDescription":"Open issue \"Normalizing casing for property names in JsonException.Path helps deserialization performance\" (#40898)"},{"Id":"490435517","IsPullRequest":true,"CreatedAt":"2019-09-06T18:29:21","Actor":"Anipik","Number":"40894","RawContent":null,"Title":"updating the target framework to 3.1 for Microsoft.Private.CoreFx.NETCoreApp.pkgproj ","State":"closed","Body":"","Url":"https://github.com/dotnet/corefx/pull/40894","RelatedDescription":"Closed or merged PR \"updating the target framework to 3.1 for Microsoft.Private.CoreFx.NETCoreApp.pkgproj \" (#40894)"},{"Id":"490452329","IsPullRequest":false,"CreatedAt":"2019-09-06T17:59:27","Actor":"madmir","Number":"40897","RawContent":null,"Title":"Make NameValueCollection.HasKeys() method virtual and override it in WebHeaderCollection","State":"open","Body":"This suggestion is order to provide a fix for #33628. \r\n\r\n**AllKeys** and **Keys** are overridden in WebHeaderCollection, but we are unable to change behavior of related **HasKeys()** method. This causes inconsistency described in aforementioned bug report.\r\n\r\n**InternalHasKeys()**, as it's currently defined, seems to be redundant as well.\r\n\r\n### Current\r\n```cs\r\npublic class NameValueCollection : NameObjectCollectionBase\r\n{\r\n    public bool HasKeys();\r\n    internal virtual bool InternalHasKeys();\r\n}\r\npublic class WebHeaderCollection : NameValueCollection, ISerializable\r\n{\r\n}\r\n```\r\n### Proposed\r\n```cs\r\npublic class NameValueCollection : NameObjectCollectionBase\r\n{\r\n    public virtual bool HasKeys();\r\n}\r\npublic class WebHeaderCollection : NameValueCollection, ISerializable\r\n{\r\n    public override bool HasKeys();\r\n}\r\n```","Url":"https://github.com/dotnet/corefx/issues/40897","RelatedDescription":"Open issue \"Make NameValueCollection.HasKeys() method virtual and override it in WebHeaderCollection\" (#40897)"},{"Id":"490439251","IsPullRequest":true,"CreatedAt":"2019-09-06T17:29:02","Actor":"krwq","Number":"40896","RawContent":null,"Title":"Fix SerialStream.Flush on Unix","State":"open","Body":"Fixes: #37770\r\n\r\ncc: @blelem @carlossanlop \r\n\r\nSeems we have accidentally called tcflush instead of tcdrain on Flush. tcflush is causing the data to be discarded while drain is waiting for ops to be completed. Code already had interop defined for tcdrain but it was never called.\r\n\r\nI've also added a code to wait for internal queue to be emptied.\r\n\r\nWe already have tests for this scenario but on some devices (the one I used for testing specifically) tcflush actually didn't do anything observable since the USB driver doesn't have access to clear the queue correctly so likely it was implemented as no-op or only does it before data leaves the driver which makes it very unlikely to happen","Url":"https://github.com/dotnet/corefx/pull/40896","RelatedDescription":"Open PR \"Fix SerialStream.Flush on Unix\" (#40896)"},{"Id":"490433626","IsPullRequest":false,"CreatedAt":"2019-09-06T17:15:01","Actor":"TylerBrinkley","Number":"40893","RawContent":null,"Title":"Make generic collection interfaces implement non-generic collection interfaces","State":"open","Body":"When dealing with collections from a non-generic context such as a serializer you must access the collection through the non-generic collection interfaces. Sometimes you can just cast the collection to the non-generic collection interface but when the collection does not implement the non-generic interface such as with `HashSet<T>` you must then use some reflection and wrap the collection in a new collection object that does implement the non-generic interface. This is somewhat difficult and is a pain in general. I propose considering making the generic collection interfaces implement the non-generic collection interfaces through the use of default interface implementations.\r\n\r\n## Proposed API\r\n```diff\r\n namespace System.Collections.Generic {\r\n-    public interface ICollection<T> : IEnumerable<T> {\r\n+    public interface ICollection<T> : IEnumerable<T>, ICollection {\r\n-        int Count { get; }\r\n+        new int Count { get; }\r\n+        bool ICollection.Count => Count;\r\n+        bool ICollection.IsSynchonized => false;\r\n+        object ICollection.SyncRoot => this;\r\n+        void ICollection.CopyTo(Array array, int index) => array is T[] a ? CopyTo(a, index) : throw (array == null ? new ArgumentNullException(nameof(array)) : new ArgumentException());\r\n     }\r\n-    public interface IList<T> : ICollection<T> {\r\n+    public interface IList<T> : ICollection<T>, IList {\r\n-        T this[int index] { get; set; }\r\n+        new T this[int index] { get; set; }\r\n-        void Clear();\r\n+        new void Clear();\r\n-        void RemoveAt(int index);\r\n+        new void RemoveAt(int index);\r\n+        bool IList.IsFixedSize => throw new NotSupportedException();\r\n+        bool IList.IsReadOnly => IsReadOnly;\r\n+        object IList.this[int index] { get => this[index]; set => this[index] = GetValue(value); }\r\n+        int IList.Add(object value) {\r\n+            Add(GetValue(value));\r\n+            return Count - 1;\r\n+        }\r\n+        void IList.Clear() => Clear();\r\n+        bool IList.Contains(object value) => Contains(GetValue(value));\r\n+        int IList.IndexOf(object value) => IndexOf(GetValue(value));\r\n+        void IList.Insert(int index, object value) => Insert(index, GetValue(value));\r\n+        void IList.Remove(object value) => Remove(GetValue(value));\r\n+        void IList.RemoveAt(int index) => RemoveAt(index);\r\n+        private static T GetValue(object value) => value is T t ? t : (value == null ? default(T) ?? throw new ArgumentNullException(nameof(value)) : throw new ArgumentException());\r\n     }\r\n-    public interface IDictionary<TKey, TValue> : ICollection<KeyValuePair<TKey, TValue>> {\r\n+    public interface IDictionary<TKey, TValue> : ICollection<KeyValuePair<TKey, TValue>>, IDictionary {\r\n-        ICollection<TKey> Keys { get; }\r\n+        new ICollection<TKey> Keys { get; }\r\n-        ICollection<TValue> Values { get; }\r\n+        new ICollection<TValue> Values { get; }\r\n-        void Clear();\r\n+        new void Clear();\r\n+        bool IDictionary.IsFixedSize => throw new NotSupportedException();\r\n+        bool IDictionary.IsReadOnly => IsReadOnly;\r\n+        object IDictionary.this[object key] { get => this[GetKey(key)]; set => this[GetKey(key)] = GetValue(value); }\r\n+        ICollection IDictionary.Keys => Keys;\r\n+        ICollection IDictionary.Values => Values;\r\n+        void IDictionary.Add(object key, object value) => Add(GetKey(key), GetValue(value));\r\n+        void IDictionary.Clear() => Clear();\r\n+        bool IDictionary.Contains(object key) => Contains(GetKey(key));\r\n+        IDictionaryEnumerator IDictionary.GetEnumerator() => new EnumeratorWrapper(GetEnumerator());\r\n+        void IDictionary.Remove(object key) => Remove(GetKey(key));\r\n+        private static TKey GetKey(object key) => value is TKey t ? t : throw (value == null ? new ArgumentNullException(nameof(key)) : new ArgumentException());\r\n+        private static TValue GetValue(object value) => value is TValue t ? t : (value == null ? default(TValue) ?? throw new ArgumentNullException(nameof(value)) : throw new ArgumentException());\r\n     }\r\n }\r\n```\r\n\r\n## Open Questions\r\n* Is returning `Count - 1` reasonable for `IList.Add`?\r\n* Is throwing a `NotSupportedException` reasonable for `IList` and `IDictionary` `IsFixedSize`?","Url":"https://github.com/dotnet/corefx/issues/40893","RelatedDescription":"Open issue \"Make generic collection interfaces implement non-generic collection interfaces\" (#40893)"},{"Id":"490429086","IsPullRequest":false,"CreatedAt":"2019-09-06T17:02:36","Actor":"Trolldemorted","Number":"40892","RawContent":null,"Title":"PipeReader.ReadAsync can return empty segments","State":"open","Body":"I just noticed that segments in a ReadResult can be empty:\r\n\r\n![grafik](https://user-images.githubusercontent.com/10261186/64445911-ce590f80-d0d7-11e9-846d-ae255df18171.png)\r\nI assumed that the first segment was never empty, so I often use `result.Buffer.First.Span[0];` to access the first byte.\r\n\r\nIs this intended behaviour? Can this be caused by me writing to the pipe in a wrong way? This is how I fill my pipe from a `System.IO.Compression.DeflateStream`:\r\n\r\n```c#\r\nprivate async Task Decompress(PipeWriter writer, ReadOnlyMemory<byte> data, int count)\r\n{\r\n    InflateInputStream.Position = 0;\r\n    InflateInputStream.Write(data.Span.Slice(0, count));\r\n    InflateInputStream.Position = 0;\r\n    InflateInputStream.SetLength(count);\r\n    int read;\r\n\r\n    do\r\n    {\r\n        Memory<byte> memory = writer.GetMemory(data.Length * 2);\r\n        read = InflateOutputStream.Read(memory.Span);\r\n        writer.Advance(read);\r\n    }\r\n    while (read != 0);\r\n    await writer.FlushAsync();\r\n}\r\n```\r\n","Url":"https://github.com/dotnet/corefx/issues/40892","RelatedDescription":"Open issue \"PipeReader.ReadAsync can return empty segments\" (#40892)"},{"Id":"490312167","IsPullRequest":true,"CreatedAt":"2019-09-06T15:51:57","Actor":"MichalStrehovsky","Number":"40886","RawContent":null,"Title":"Add license header to S.R.CS.Unsafe","State":"closed","Body":"I assume this was an omission.","Url":"https://github.com/dotnet/corefx/pull/40886","RelatedDescription":"Closed or merged PR \"Add license header to S.R.CS.Unsafe\" (#40886)"},{"Id":"490377988","IsPullRequest":true,"CreatedAt":"2019-09-06T15:06:10","Actor":"steveharter","Number":"40889","RawContent":null,"Title":"Minor deserialization perf improvements for collections","State":"open","Body":"- Defer calls to ReadStack.JsonPath until an exception needs that information (avoids String and StringBuilder allocs).\r\n- Remove dead code and unused variables\r\n\r\n\r\nBenchmarks for deserializing single collection `System.Text.Json.Serialization.Tests.ReadJson<ImmutableDictionary<string, string>>`\r\n```\r\nBefore\r\n|                   Method |     Mean |     Error |    StdDev |   Median |      Min |      Max | Gen 0/1k Op | Gen 1/1k Op | Gen 2/1k Op | Allocated Memory/Op |\r\n|------------------------- |---------:|----------:|----------:|---------:|---------:|---------:|------------:|------------:|------------:|--------------------:|\r\n|    DeserializeFromString | 65.60 us | 0.6393 us | 0.5668 us | 65.50 us | 64.64 us | 66.60 us |      6.6489 |      0.5319 |           - |            40.87 KB |\r\n| DeserializeFromUtf8Bytes | 63.73 us | 0.9506 us | 0.8891 us | 63.58 us | 62.40 us | 65.20 us |      5.5444 |      0.5040 |           - |            35.07 KB |\r\n|    DeserializeFromStream | 64.76 us | 1.2135 us | 1.0758 us | 64.87 us | 63.33 us | 66.52 us |      5.6921 |      0.5175 |           - |            35.14 KB\r\n\r\nAfter\r\n|                   Method |     Mean |     Error |    StdDev |   Median |      Min |      Max | Gen 0/1k Op | Gen 1/1k Op | Gen 2/1k Op | Allocated Memory/Op |\r\n|------------------------- |---------:|----------:|----------:|---------:|---------:|---------:|------------:|------------:|------------:|--------------------:|\r\n|    DeserializeFromString | 64.71 us | 0.8625 us | 0.8067 us | 64.36 us | 63.72 us | 66.20 us |      6.4317 |      0.7718 |           - |            40.75 KB |\r\n| DeserializeFromUtf8Bytes | 62.82 us | 0.6094 us | 0.5701 us | 62.72 us | 62.14 us | 63.98 us |      5.4781 |      0.7470 |           - |            34.94 KB |\r\n|    DeserializeFromStream | 63.31 us | 0.6213 us | 0.5812 us | 63.20 us | 62.42 us | 64.38 us |      5.5710 |      0.7597 |           - |            35.01 KB |\r\n```","Url":"https://github.com/dotnet/corefx/pull/40889","RelatedDescription":"Open PR \"Minor deserialization perf improvements for collections\" (#40889)"},{"Id":"490340339","IsPullRequest":false,"CreatedAt":"2019-09-06T13:53:05","Actor":"mrward","Number":"40888","RawContent":null,"Title":"Disposing the FileSystemWatcher does not close associated file descriptors","State":"open","Body":"Filed this against Mono, which uses corefx, but the problem also affects corefx.\r\n\r\nhttps://github.com/mono/mono/issues/16709\r\n\r\n## Steps to Reproduce\r\n\r\nRelated problem - https://github.com/mono/mono/issues/15931\r\n\r\n1. Sample project - https://github.com/mrward/test-file-watcher-dispose - multi-target project that builds .NET 4.7.2 and .NET Core 2.1\r\n2. Build this project.\r\n3. From the command line run `dotnet bin/debug/netcoreapp2.1/FileWatcherDisposeTest.dll`\r\n4. Run `lsof -p pid`. Process id is output from the console app.\r\n5. See that the file watcher creates file descriptors for several directories.\r\n6. After 10 seconds the file watcher will be disposed.\r\n7. Run `lsof -p pid` again.\r\n\r\n### Current Behavior\r\n\r\nlsof still lists the directories.\r\n\r\n```\r\ndotnet 3972 user    4r DIR   1,12      170   51740695 /Volumes/Drive/projects/tests/FileWatcherDisposeTest/FileWatcherDisposeTest/bin/Debug/net472\r\ndotnet 3972 user    5r DIR   1,12      136   51740600 /Volumes/Drive/projects/tests/FileWatcherDisposeTest/FileWatcherDisposeTest/bin/Debug\r\ndotnet 3972 user    6r DIR   1,12      102   51740599 /Volumes/Drive/projects/tests/FileWatcherDisposeTest/FileWatcherDisposeTest/bin\r\ndotnet 3972 user    7r DIR   1,12      204   51740594 /Volumes/Drive/projects/tests/FileWatcherDisposeTest/FileWatcherDisposeTest\r\ndotnet 3972 user    8r DIR   1,12      170   51740593 /Volumes/Drive/projects/tests/FileWatcherDisposeTest\r\ndotnet 3972 user    9r DIR   1,12     6324     185300 /Volumes/Drive/projects/tests\r\ndotnet 3972 user   10r DIR   1,12     2312        278 /Volumes/Drive/projects\r\ndotnet 3972 user   11r DIR   1,12      646          2 /Volumes/Drive\r\ndotnet 3972 user   12r DIR    1,4      160     420284 /Volumes\r\n```\r\nIf you change the console project to run GC.Collect after the dispose does not fix the problem (this does work with Mono)\r\n\r\n### Expected Behavior\r\n\r\nFile watcher directories not listed by lsof.\r\n\r\nNote that \r\n\r\n## On which platforms did you notice this\r\n\r\n[x] macOS\r\n[ ] Linux\r\n[ ] Windows\r\n\r\n**Version Used**:\r\n\r\ndotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview9-014004\r\n Commit:    8e7ef240a5\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.14\r\n OS Platform: Darwin\r\n RID:         osx.10.14-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/3.0.100-preview9-014004/\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview9-19423-09\r\n  Commit:  2be172345a\r\n\r\n.NET Core SDKs installed:\r\n  2.1.701 [/usr/local/share/dotnet/sdk]\r\n  3.0.100-preview9-014004 [/usr/local/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.12 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.12 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview9.19424.4 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.12 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview9-19423-09 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\n## Stacktrace\r\n\r\n","Url":"https://github.com/dotnet/corefx/issues/40888","RelatedDescription":"Open issue \"Disposing the FileSystemWatcher does not close associated file descriptors\" (#40888)"},{"Id":"490309649","IsPullRequest":false,"CreatedAt":"2019-09-06T12:49:08","Actor":"softworkz","Number":"40885","RawContent":null,"Title":"API Proposal: SequenceReader<T>.GetSpan(offset, length)","State":"open","Body":"Today it isn't possible to acquire a span from a `SequenceReader<T>` without taking care about segment boundaries.\r\n\r\nFor example:\r\n\r\n- You cannot simply do:\r\n`BinaryPrimitives.ReadUInt32BigEndian(reader.UnreadSpan.Slice(0, 4))`\r\n Because you could hit a segment boundary\r\n- You don't want to allocate a byte buffer each time, execute `TryCopyMultisegment` only to parse the `Int32` from it (at least not in the majority of cases where there's no segment boundary)\r\n- But you also don't want to have your code full of conditional statements to handle this as you may have a ton of those `BinaryPrimitives` calls.\r\n\r\nThe `SequenceReader>T>` is meant to make it easier to with `ReadonlySequence<T>` and to remedy the pain that is involved by using it - specifically the handling of segmment boundaries. To do so, it requires this:\r\n\r\n```cs\r\npublic partial ref struct SequenceReader<T>\r\n{\r\n    /// <summary>\r\n    /// Returns a span covering the specified range.\r\n    /// If required, a temporary buffer is created for the returned span.\r\n    /// </summary>\r\n    ReadOnlySpan<T> GetSpan(int offset, int length);\r\n}\r\n\r\n```\r\n\r\nUsage Example 1:\r\n\r\n```cs\r\nvoid Parse(in ReadOnlySequence<byte> data, int offset = 0)\r\n{\r\n    var reader = new SequenceReader<byte>(data);\r\n\r\n    var myValue = BinaryPrimitives.ReadUInt32BigEndian(reader.GetSpan(offset, 4));\r\n}\r\n\r\n```\r\n\r\nUsage Example 2:\r\n\r\n```cs\r\nvoid Parse(in ReadOnlySequence<char> data, int offset = 0)\r\n{\r\n    var reader = new SequenceReader<data>(data);\r\n\r\n    DateTime.TryParse(reader.GetSpan(offset, 4), out DateTime parsedDate);\r\n}\r\n\r\n```\r\n\r\nReference dicussion: https://github.com/davidfowl/TcpEcho/issues/15#issuecomment-528571480\r\n\r\nRelated: https://github.com/dotnet/corefx/issues/40843, https://github.com/dotnet/corefx/issues/40845\r\n","Url":"https://github.com/dotnet/corefx/issues/40885","RelatedDescription":"Open issue \"API Proposal: SequenceReader<T>.GetSpan(offset, length)\" (#40885)"},{"Id":"490303631","IsPullRequest":true,"CreatedAt":"2019-09-06T12:35:42","Actor":"RussKie","Number":"40883","RawContent":null,"Title":"[release/3.0] Fix TypeConverter for IComponent (#40837)","State":"open","Body":"A cherry pick of the #40837 fix to unblock dotnet/winforms#1553 for 3.0-GA.\r\n\r\n/cc: @danmosemsft @hughbe @zsd4yr @ericstj \r\n\r\n\r\n\r\n## Customer Impact\r\n\r\nWindows Forms customers using `PropertyGrid` control in their apps won't be able to drill down into object trees and expand complex objects.\r\n\r\n## Regression?\r\n\r\nYes \r\n\r\n## Risk\r\n\r\nRisk is very small; just adding the missing interface registration for the type converter.\r\n","Url":"https://github.com/dotnet/corefx/pull/40883","RelatedDescription":"Open PR \"[release/3.0] Fix TypeConverter for IComponent (#40837)\" (#40883)"},{"Id":"490297499","IsPullRequest":false,"CreatedAt":"2019-09-06T12:21:20","Actor":"matthew798","Number":"40881","RawContent":null,"Title":"Inconsistent socket behavior between dotnet and native","State":"open","Body":"I have observed what I believe to be a discrepancy between managed and native socket.\r\n\r\nI am on dotnet core 2.2 and 3.0 on linux x64.\r\n\r\nThe problem is when you have 2 sockets. Both _bound_ to the same endpoint (`localEP`), and one _connected_ to a remote endpoint (`remoteEp`). AFAIK, dgrams from `remoteEp` should _always_ end up at the _connected_ socket, and dgrams from _anywhere_ else should end up at the _bound_ socket. This behavior can be observed in the code from [here](https://github.com/nplab/DTLS-Examples/blob/master/src/dtls_udp_echo.c). This code implements a DTLS server. It listens for DTLS connection requests on one socket which is only bound to a local EP. When a connection is established, it creates a new socket _bound to the same EP_ and _connects_ it to the remote EP.\r\n\r\nThe result is that all dgrams from a connected client end up at their respective sockets.\r\n\r\nIn C# (dotnet 2.2 and 3.0), this cannot be reproduced. Take, for example, the following:\r\n\r\n```\r\nvar localEp = new IPEndPoint(IPAddress.Loopback, 1114);\r\n\r\nvar socket = new Socket(AddressFamily.InterNetwork, SocketType.Dgram, ProtocolType.Udp);\r\nsocket.SetSocketOption(SocketOptionLevel.Socket, SocketOptionName.ReuseAddress, true);\r\nsocket.Bind(localEp);\r\n...\r\naccept a connection...\r\n...\r\nvar clientSocket = new Socket(AddressFamily.InterNetwork, SocketType.Dgram, ProtocolType.Udp);\r\nclientSocket.SetSocketOption(SocketOptionLevel.Socket, SocketOptionName.ReuseAddress, true);\r\nclientSocket.Bind(localEp);\r\nclientSocket.Connect(remoteEp);\r\n```\r\n\r\nAt this point, there is no way to guarantee that the client's dgrams will make it to clientSocket. This does not match the behavior of the code I linked above.\r\n\r\nFrom reading #32027 I know that as of core 3.0, when setting SO_REUSEADDRESS, SO_REUSEPORT is also set. In the linked code, SO_REUSEPORT is _not_ set on linux. I doubt this is the problem however since my code also doesn't work in 2.2.\r\n\r\nI posted a [question on SO](https://stackoverflow.com/questions/57780384/managed-sockets-not-behaving-as-i-expected). I did a test with managed sockets and the result is confusing at best.\r\n\r\n[This document](https://lwn.net/Articles/542629/) confirms the expected behavior:\r\n\r\n> The first of these is a useful aspect of the implementation. Incoming connections and datagrams are distributed to the server sockets using a hash based on the 4-tuple of the connection—that is, the peer IP address and port plus the local IP address and port. This means, for example, that if a client uses the same socket to send a series of datagrams to the server port, then those datagrams will all be directed to the same receiving server (as long as it continues to exist). This eases the task of conducting stateful conversations between the client and server.\r\n","Url":"https://github.com/dotnet/corefx/issues/40881","RelatedDescription":"Open issue \"Inconsistent socket behavior between dotnet and native\" (#40881)"}],"ResultType":"GitHubIssue"},"Roslyn-Issues":{"Issues":[{"Id":"490569953","IsPullRequest":true,"CreatedAt":"2019-09-07T00:36:57","Actor":"ivanbasov","Number":"38569","RawContent":null,"Title":"Remove legacy completion","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/38569","RelatedDescription":"Open PR \"Remove legacy completion\" (#38569)"},{"Id":"490566149","IsPullRequest":false,"CreatedAt":"2019-09-07T00:11:51","Actor":"filipnavara","Number":"38568","RawContent":null,"Title":"Regression: Operator '==' cannot be applied to operands of type 'T' and 'default'","State":"open","Body":"**Version Used**: \r\n\r\n.NET SDK 5.0.100-alpha1-014075, 5.0.100-alpha1-014078\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Get https://github.com/dotnet/performance\r\n2. Run `dotnet run -f netcoreapp5.0 -c Release` from `performance/src/benchmarks/micro/` directory\r\n\r\n**Expected Behavior**:\r\n\r\nNo error.\r\n\r\n**Actual Behavior**:\r\n\r\n```\r\ncorefx/System.Buffers/ArrayPoolTests.cs(44,21): error CS0019: Operator '==' cannot be applied to operands of type 'T' and 'default' [/Users/filipnavara/agent/_work/1/s/work/performance/src/benchmarks/micro/MicroBenchmarks.csproj]\r\n```\r\n\r\nRelevant code: \r\n\r\nhttps://github.com/dotnet/performance/blob/97d49cfc30502b835122d360ca4b93f29215d4cc/src/benchmarks/micro/corefx/System.Buffers/ArrayPoolTests.cs#L39-L47\r\n\r\nThis worked few hours ago with the latest .NET SDK from git master (as of 06/09/2019, 18:09:56 UTC; reported by BDN as `.NET Core 5.0.0-alpha1.19456.2 (CoreCLR 5.0.19.45509, CoreFX 5.0.19.45516), X64 RyuJIT`). I assume the Roslyn dependency got bumped and introduced some breaking change.\r\n","Url":"https://github.com/dotnet/roslyn/issues/38568","RelatedDescription":"Open issue \"Regression: Operator '==' cannot be applied to operands of type 'T' and 'default'\" (#38568)"},{"Id":"490566025","IsPullRequest":false,"CreatedAt":"2019-09-07T00:11:06","Actor":"petrroll","Number":"38567","RawContent":null,"Title":"Unnecessary code colapse points ","State":"open","Body":"**Version Used**: \r\n16.4.intpreview\r\n\r\n**Steps to Reproduce**:\r\nHave code with sufficient amount of constructs that have header and then block. Look at collapsible regions.\r\n\r\n```\r\n        /// <summary>\r\n        /// Use this helper to register multiple refactorings (<paramref name=\"actions\"/>).\r\n        /// </summary>\r\n        internal static void RegisterRefactorings<TCodeAction>(\r\n            this CodeRefactoringContext context, ImmutableArray<TCodeAction> actions)\r\n            where TCodeAction : CodeAction\r\n        {\r\n            if (!actions.IsDefault)\r\n            {\r\n                foreach (var action in actions)\r\n                {\r\n                    context.RegisterRefactoring(action);\r\n                }\r\n            }\r\n        }\r\n````\r\n\r\n![image](https://user-images.githubusercontent.com/1764721/64466836-e70df900-d0c8-11e9-8d71-3543dbf6209b.png)\r\n\r\n\r\n**Expected Behavior**:\r\nOnly the top marked collapsible region is there.\r\n\r\n**Actual Behavior**:\r\nBoth are, the lower one is redundant from UX point of view.\r\n\r\nUseful:\r\n![image](https://user-images.githubusercontent.com/1764721/64466920-47049f80-d0c9-11e9-8eb6-ef52ffee4164.png)\r\n\r\nNot useful:\r\n![image](https://user-images.githubusercontent.com/1764721/64466896-2fc5b200-d0c9-11e9-8e9b-0fdde809c7d1.png)\r\n\r\n","Url":"https://github.com/dotnet/roslyn/issues/38567","RelatedDescription":"Open issue \"Unnecessary code colapse points \" (#38567)"},{"Id":"490564530","IsPullRequest":true,"CreatedAt":"2019-09-07T00:02:04","Actor":"dotnet-bot","Number":"38566","RawContent":null,"Title":"Merge master to master-vs-deps","State":"open","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/38566","RelatedDescription":"Open PR \"Merge master to master-vs-deps\" (#38566)"},{"Id":"490564392","IsPullRequest":true,"CreatedAt":"2019-09-07T00:01:16","Actor":"dotnet-bot","Number":"38565","RawContent":null,"Title":"Merge release/dev16.3-vs-deps to master-vs-deps","State":"open","Body":"\nThis is an automatically generated pull request from release/dev16.3-vs-deps into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.3-vs-deps-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/release/dev16.3-vs-deps\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.3-vs-deps-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/38565","RelatedDescription":"Open PR \"Merge release/dev16.3-vs-deps to master-vs-deps\" (#38565)"},{"Id":"490563763","IsPullRequest":true,"CreatedAt":"2019-09-06T23:57:33","Actor":"AlekseyTs","Number":"38564","RawContent":null,"Title":"Perform lookup in base interfaces even in a type-only context.","State":"open","Body":"Fixes #38469.","Url":"https://github.com/dotnet/roslyn/pull/38564","RelatedDescription":"Open PR \"Perform lookup in base interfaces even in a type-only context.\" (#38564)"},{"Id":"490542638","IsPullRequest":false,"CreatedAt":"2019-09-06T23:50:38","Actor":"JeremyCaney","Number":"38561","RawContent":null,"Title":"Null reference warning when validation expression result relayed as boolean","State":"closed","Body":"If I write the following code,\r\n```\r\npublic void DoSomething(string value) {\r\n  Console.WriteLine(value.Length);\r\n}\r\n```\r\nI will receive the warning, \r\n> `CA1062`: In externally visible method `void DoSomething(string value)`, validate parameter `value` is non-null before using it. If appropriate, throw an `ArgumentNullException` when the argument is null or add a Code Contract precondition asserting non-null argument.\r\n\r\nSimilarly, in a slightly different construction—such as retrieving the value from a function that may result in a `null` value—I may receive:\r\n> `CS8602`: Dereference of a possibly null reference.\r\n\r\nThis is totally expected; after all, the parameter `value` may well be `null` since `#nullable` doesn't include runtime checking. As the warning suggests, I can easily fix this by adding a guard clause, such as:\r\n```\r\npublic void DoSomething(string value) {\r\n  if (value == null) {\r\n    throw new ArgumentNullException(nameof(value));\r\n  }\r\n  Console.WriteLine(value.Length);\r\n}\r\n```\r\nIf, however, I store the result of the validation expression (`value == null` in this case) to a `bool` and check that value, I will still get the `CA1062` (or `CS8602`) warning:\r\n```\r\npublic void DoSomething(string value) {\r\n  var isInvalid = value == null;\r\n  if (isInvalid) {\r\n    throw new ArgumentNullException(nameof(value));\r\n  }\r\n  Console.WriteLine(value.Length);\r\n}\r\n```\r\nMy expectation would be that the previous two code examples would yield the same results. \r\n\r\nThis may well be expected based on Roslyn's flow analysis implementation. That said, it limits the methods through which `null` references can be validated. For example, it restricts the use of utility methods that assist in creating guard clauses, similar in _structure_ to Code Contracts:\r\n```\r\npublic static void Requires<T>(bool isValid) where T : Exception, new() {\r\n  if (!isValid) {\r\n    throw new T();\r\n  }\r\n}\r\n```\r\n> **Note:** This is obviously a contrived example. A real implementation would be far more sophisticated, accounting for e.g. variable names and/or error messages.\r\n\r\nFWIW, the project I'm working on happens to be targeting .NET Standard 2.2, but I wouldn't expect that to be relevant here since I'm just referencing internal code and not .NET Standard libraries. ","Url":"https://github.com/dotnet/roslyn/issues/38561","RelatedDescription":"Closed issue \"Null reference warning when validation expression result relayed as boolean\" (#38561)"},{"Id":"490554036","IsPullRequest":true,"CreatedAt":"2019-09-06T23:04:31","Actor":"jcouv","Number":"38563","RawContent":null,"Title":"Adjust tuple and nullability checks on duplicate implementations and type constraints","State":"open","Body":"Fixes https://github.com/dotnet/roslyn/issues/38560 (open questions on duplicate implementations with nullability differences): in this change, we're treating such duplicates as an error (instead of a warning previously), except that we're relaxing the comparison to account for oblivious.\r\n\r\nFixes https://github.com/dotnet/roslyn/issues/38427 (missing diagnostic on duplicate type constraint with tuple name differences): in this change, we're treating such duplicates as an error, as well as  duplicate type constraints with any nullability differences.\r\n\r\nAt the same time, I'm fixing a small issue with how those duplicates are checked: we were not detecting duplicates when they differed in tuple names and nullability at the same time.","Url":"https://github.com/dotnet/roslyn/pull/38563","RelatedDescription":"Open PR \"Adjust tuple and nullability checks on duplicate implementations and type constraints\" (#38563)"},{"Id":"490544520","IsPullRequest":true,"CreatedAt":"2019-09-06T22:19:54","Actor":"sharwell","Number":"38562","RawContent":null,"Title":"Add dotnet-format as a local tool","State":"open","Body":"This local tool allows developers to format documents in **Roslyn.sln** with the following sequence:\r\n\r\n```\r\ndotnet tool restore\r\ndotnet format -w Roslyn.sln\r\n```\r\n\r\nAfter installing the tool, the sequence above was run. The automated changes were applied in three commits by category of change (all attributed to @dotnet-bot). In some cases, IDE0055 was suppressed around the code which changed. However, neither the Format Document command nor the dotnet-format tool adhere to this suppression, so the suppressions were removed after changes were made to the code in these regions. I will add comments in the diff to call attention to this behavior to the original author of each of these suppressions.","Url":"https://github.com/dotnet/roslyn/pull/38562","RelatedDescription":"Open PR \"Add dotnet-format as a local tool\" (#38562)"},{"Id":"490517746","IsPullRequest":false,"CreatedAt":"2019-09-06T20:51:33","Actor":"jcouv","Number":"38560","RawContent":null,"Title":"Refine nullability checks on interface implementations","State":"open","Body":"Implementing the same interface twice, indirectly and with nullability differences involving oblivious currently produces a warning, but arguably shouldn't:\r\n```C#\r\n#nullable enable\r\n\r\npublic class C : I<object>, IObjectOblivious // warning CS8645: 'I<object>' is already listed in the interface list on type 'C' with different nullability of reference types.\r\n{\r\n}\r\n\r\npublic interface I<T> { }\r\n\r\n#nullable disable\r\n\r\npublic interface IObjectOblivious : I<object> { }\r\n```\r\n([sharplab](https://sharplab.io/#v2:EYLgtghgzgLgpgJwD4FgBQBiAdgVwDZ4TB5wAEcWRJ66AAgMym0BMpAwqSKQJIA8A9sABWcAMYwAfABoeAeWFiY8vAEsAbiv44opAPS7SAdwgIsKrAHN2AZQAcANgAsAVi4ByPoJHiJb0ip0IPAQ4CAATAE9SVVg4MP8sUhgACzJzeAQAMwhRMhiYUn5EmAiABzI3Nj9DFRTSMJVMzMQKAtwCIhVVEsLM0hDmkKxcpLK4KAA6dABvdABfGjQGBIzskb4AFQlSadIFtHRsfEJiMgaoKjhF5fTENbJueW8lYnVNbU4eAQUfHb2gA==))\r\n\r\nOn the other hand, implementing the same interface twice, directly and with nullability differences arguably should produce an error instead of just a warning:\r\n```C#\r\n#nullable enable\r\npublic class C : I<object>, I<object?> // warning CS8645: 'I<object?>' is already listed in the interface list on type 'C' with different nullability of reference types.\r\n{\r\n}\r\n\r\npublic interface I<T> { }\r\n```\r\n([sharplab](https://sharplab.io/#v2:EYLgtghgzgLgpgJwD4GIB2BXANliwtwAEcaeBAsAFAACAzIdQEyEDChIhAkgDwD2wAKzgBjGAD4ANFz6CRMAPxjCAemWEA7hARoAlmgDmrAMoAOAGwAWAKwcA5D35DRi24R1RCELAjgQAJgCehFju8H5uaIQwABZEevAIAGYQwkQhsIS8kTABAA5Etiyu6joxhH46iYmIJDCEmDh4OiE5mYmEPtU+aKlReXBQAHRUAN5UAL5UVHQRCcm9PAAqSiOE40A))\r\n\r\nFinally, this behavior is not consistently enforced on type constraints: direct scenarios (`where T : I<object?>, I<object>`) produce an error and indirect scenarios (`where T : I<object?>, IObjectUnannotated`) produce no diagnostic.\r\n\r\nRelates to tuple name checks on interface implementations (issue https://github.com/dotnet/roslyn/issues/38427 tracks some irregularities).\r\nRelates to PR https://github.com/dotnet/roslyn/pull/38460 (type inference can now handle types that implement duplicate interfaces with nullability differences).","Url":"https://github.com/dotnet/roslyn/issues/38560","RelatedDescription":"Open issue \"Refine nullability checks on interface implementations\" (#38560)"},{"Id":"490206168","IsPullRequest":true,"CreatedAt":"2019-09-06T19:43:14","Actor":"petrroll","Number":"38544","RawContent":null,"Title":"Fix incomplete attribute causing exc. in IsOnHeaderXXX methods #38502","State":"closed","Body":"","Url":"https://github.com/dotnet/roslyn/pull/38544","RelatedDescription":"Closed or merged PR \"Fix incomplete attribute causing exc. in IsOnHeaderXXX methods #38502\" (#38544)"},{"Id":"490455300","IsPullRequest":true,"CreatedAt":"2019-09-06T19:28:45","Actor":"sharwell","Number":"38553","RawContent":null,"Title":"Rewrite reference assemblies to include nullability annotations","State":"closed","Body":"Update our **netstandard2.0** and **net472** builds to use new nullability annotations from **netcoreapp3.0** where available. Bugs found by this change were submitted as a separate pull request (#38551).\r\n\r\nSubmitting this pull request for personal review to see if it works with our CI before discussing it with infrastructure team.","Url":"https://github.com/dotnet/roslyn/pull/38553","RelatedDescription":"Closed or merged PR \"Rewrite reference assemblies to include nullability annotations\" (#38553)"},{"Id":"490483939","IsPullRequest":false,"CreatedAt":"2019-09-06T19:18:54","Actor":"gundermanc","Number":"38559","RawContent":null,"Title":"Signature help is not classified in C#","State":"open","Body":"**Version Used**: \r\nVisual Studio 2019 Int Preview 16.4\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Open a C# project\r\n2. Type some method name 'Foo'\r\n\r\n**Expected Behavior**:\r\nSignature help appears and is classified.\r\n\r\n**Actual Behavior**:\r\nSignature help appears unclassified.\r\n\r\n![image](https://user-images.githubusercontent.com/5387680/64454691-76eb7d00-d0a0-11e9-8e95-552c33be73b8.png)\r\n","Url":"https://github.com/dotnet/roslyn/issues/38559","RelatedDescription":"Open issue \"Signature help is not classified in C#\" (#38559)"},{"Id":"490442956","IsPullRequest":true,"CreatedAt":"2019-09-06T19:04:00","Actor":"dotnet-maestro[bot]","Number":"38549","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:567feadf-e495-4ebb-cee4-08d67668456c)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190906.2\r\n- **Date Produced**: 9/6/2019 2:35 PM\r\n- **Commit**: 397060df67388da56b50de7e6f7292a5dccc2de6\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19456.2\r\n\r\n[marker]: <> (End:567feadf-e495-4ebb-cee4-08d67668456c)\r\n\r\n","Url":"https://github.com/dotnet/roslyn/pull/38549","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#38549)"},{"Id":"490476432","IsPullRequest":false,"CreatedAt":"2019-09-06T18:58:46","Actor":"stephentoub","Number":"38558","RawContent":null,"Title":"IDE0018 preview presents incorrect option if blank line present","State":"open","Body":"**Version Used**: \r\n3.4.0-beta1-19426-03+b18d90790da95b6862def56802fa4249e4868bb4\r\n\r\n**Steps to Reproduce**:\r\n```C#\r\nusing System;\r\n\r\nclass Program\r\n{\r\n    static void Main() { }\r\n\r\n    private static bool M1(string name)\r\n    {\r\n        bool result;\r\n\r\n        Bar(name, out result);\r\n        return result;\r\n    }\r\n\r\n    private static bool M2(string name)\r\n    {\r\n        bool result;\r\n        Bar(name, out result);\r\n        return result;\r\n    }\r\n\r\n    private static bool Bar(string name, out bool result) => throw new NotImplementedException();\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\nInvoking IDE0018 for the Document presents two cases to be fixed, one in M1 and one in M2.\r\n\r\n**Actual Behavior**:\r\nInvoking IDE0018 for the Document presents three cases to be fixed, two in M1, one of which if executed on its own would result in code that doesn't compile:\r\n![image](https://user-images.githubusercontent.com/2642209/64453543-c9d02f00-d0b6-11e9-87ba-533654d7c9d7.png)\r\n","Url":"https://github.com/dotnet/roslyn/issues/38558","RelatedDescription":"Open issue \"IDE0018 preview presents incorrect option if blank line present\" (#38558)"},{"Id":"490471270","IsPullRequest":false,"CreatedAt":"2019-09-06T18:45:49","Actor":"tmat","Number":"38557","RawContent":null,"Title":"Inline rename throws InvalidOperationException in ASP.NET Core page","State":"open","Body":"**Version Used**: \r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Create an ASP.NET Core Web App\r\n2. Open `Error.cshtml`.\r\n3. Rename `ErrorModel` class to `ErrorModel2` (Ctrl+R+R).\r\n\r\n**Expected Behavior**:\r\n\r\n**Actual Behavior**:\r\n\r\nAssertion failed:\r\n\r\n```\r\n---------------------------\r\nAssertion Failed: Abort=Quit, Retry=Debug, Ignore=Continue\r\n---------------------------\r\n\r\n\r\n\r\n\r\n   at Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.InlineRenameSession.OpenTextBufferManager.OnTextBufferChanged(Object sender, TextContentChangedEventArgs args)\r\n\r\n   at Microsoft.VisualStudio.Text.Utilities.GuardedOperations.RaiseEvent[TArgs](Object sender, EventHandler`1 eventHandlers, TArgs args)\r\n\r\n   at Microsoft.VisualStudio.Text.Implementation.BaseBuffer.RawRaiseEvent(TextContentChangedEventArgs args, Boolean immediate)\r\n\r\n   at Microsoft.VisualStudio.Text.Projection.Implementation.ProjectionBuffer.SourceSpansChangedEventRaiser.RaiseEvent(BaseBuffer baseBuffer, Boolean immediate)\r\n\r\n   at Microsoft.VisualStudio.Text.Implementation.BufferGroup.RaiseEvents()\r\n\r\n   at Microsoft.VisualStudio.Text.Implementation.BufferGroup.FinishEdit()\r\n\r\n   at Microsoft.VisualStudio.Text.Projection.Implementation.ProjectionBuffer.SpanEdit.ReplaceSpans(Int32 position, Int32 spansToReplace, IList`1 spansToInsert, EditOptions options, Object editTag)\r\n\r\n   at Microsoft.VisualStudio.Text.Projection.Implementation.ProjectionBuffer.ReplaceSpans(Int32 position, Int32 spansToReplace, IList`1 spansToInsert, EditOptions options, Object editTag)\r\n\r\n   at Microsoft.WebTools.Languages.Html.Editor.Projection.LanguageProjectionManager.UpdateTextBuffer(ProjectionMapping[] mappings, String fullLangBufferText)\r\n\r\n   at Microsoft.WebTools.Languages.Html.Editor.Projection.LanguageProjectionManager.SetMappingsHelper(ProjectionMapping[] mappings, String fullLangBufferText)\r\n\r\n   at Microsoft.WebTools.Languages.Html.Editor.Projection.LanguageProjectionBuffer.SetTextAndMappings(String text, ProjectionMapping[] mappings)\r\n\r\n   at Microsoft.WebTools.Languages.Razor.Core.RazorCodeGenerator.SetTextAndMappings(List`1 newCodeRanges)\r\n\r\n   at Microsoft.WebTools.Languages.Razor.Core.RazorCodeGenerator.<>c__DisplayClass80_0.<OnDocumentStructureChanged>b__0()\r\n\r\n   at Microsoft.WebTools.Languages.Shared.Editor.Utility.GuardedOperations.InvokeExtensionPoint(Object errorSource, Action action)\r\n\r\n   at Microsoft.WebTools.Languages.Razor.Core.RazorCodeGenerator.OnDocumentStructureChanged(Object sender, DocumentStructureChangedEventArgs e)\r\n\r\n   at Microsoft.VisualStudio.Editor.Razor.DefaultVisualStudioRazorParser.OnDocumentStructureChanged(Object state)\r\n\r\n   at System.Threading.Tasks.Task.InnerInvoke()\r\n\r\n   at System.Threading.Tasks.Task.Execute()\r\n\r\n   at System.Threading.Tasks.Task.ExecutionContextCallback(Object obj)\r\n\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\r\n\r\n   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\r\n\r\n   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot)\r\n\r\n   at System.Threading.Tasks.Task.ExecuteEntry(Boolean bPreventDoubleExecution)\r\n\r\n   at System.Threading.Tasks.SynchronizationContextTaskScheduler.PostCallback(Object obj)\r\n\r\n   at Microsoft.VisualStudio.Threading.JoinableTaskFactory.SingleExecuteProtector.TryExecute()\r\n\r\n   at Microsoft.VisualStudio.Threading.JoinableTaskFactory.SingleExecuteProtector.<>c.<.cctor>b__20_0(Object state)\r\n\r\n   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, Object args, Int32 numArgs)\r\n\r\n   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(Object source, Delegate callback, Object args, Int32 numArgs, Delegate catchHandler)\r\n\r\n   at System.Windows.Threading.DispatcherOperation.InvokeImpl()\r\n\r\n   at System.Windows.Threading.DispatcherOperation.InvokeInSecurityContext(Object state)\r\n\r\n   at MS.Internal.CulturePreservingExecutionContext.CallbackWrapper(Object obj)\r\n\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\r\n\r\n   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx)\r\n\r\n   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n\r\n   at MS.Internal.CulturePreservingExecutionContext.Run(CulturePreservingExecutionContext executionContext, ContextCallback callback, Object state)\r\n\r\n   at System.Windows.Threading.DispatcherOperation.Invoke()\r\n\r\n   at System.Windows.Threading.Dispatcher.ProcessQueue()\r\n\r\n   at System.Windows.Threading.Dispatcher.WndProcHook(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam, Boolean& handled)\r\n\r\n   at MS.Win32.HwndWrapper.WndProc(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam, Boolean& handled)\r\n\r\n   at MS.Win32.HwndSubclass.DispatcherCallbackOperation(Object o)\r\n\r\n   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, Object args, Int32 numArgs)\r\n\r\n   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(Object source, Delegate callback, Object args, Int32 numArgs, Delegate catchHandler)\r\n\r\n   at System.Windows.Threading.Dispatcher.LegacyInvokeImpl(DispatcherPriority priority, TimeSpan timeout, Delegate method, Object args, Int32 numArgs)\r\n\r\n   at MS.Win32.HwndSubclass.SubclassWndProc(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam)\r\n\r\n```\r\n\r\nFollowed by an exception:\r\n```\r\n>\tSystem.Core.dll!System.Linq.Enumerable.Single<Microsoft.VisualStudio.Text.SnapshotSpan>(System.Collections.Generic.IEnumerable<Microsoft.VisualStudio.Text.SnapshotSpan> source) Line 1173\tC#\r\n \tMicrosoft.CodeAnalysis.EditorFeatures.Wpf.dll!Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.InlineRenameSession.OpenTextBufferManager.OnTextBufferChanged(object sender, Microsoft.VisualStudio.Text.TextContentChangedEventArgs args) Line 247\tC#\r\n \tMicrosoft.VisualStudio.Platform.VSEditor.dll!Microsoft.VisualStudio.Text.Utilities.GuardedOperations.RaiseEvent<Microsoft.VisualStudio.Text.TextContentChangedEventArgs>(object sender, System.EventHandler<Microsoft.VisualStudio.Text.TextContentChangedEventArgs> eventHandlers, Microsoft.VisualStudio.Text.TextContentChangedEventArgs args) Line 546\tC#\r\n \tMicrosoft.VisualStudio.Platform.VSEditor.dll!Microsoft.VisualStudio.Text.Implementation.BaseBuffer.RawRaiseEvent(Microsoft.VisualStudio.Text.TextContentChangedEventArgs args, bool immediate) Line 1061\tC#\r\n \tMicrosoft.VisualStudio.Platform.VSEditor.dll!Microsoft.VisualStudio.Text.Projection.Implementation.ProjectionBuffer.SourceSpansChangedEventRaiser.RaiseEvent(Microsoft.VisualStudio.Text.Implementation.BaseBuffer baseBuffer, bool immediate) Line 362\tC#\r\n \tMicrosoft.VisualStudio.Platform.VSEditor.dll!Microsoft.VisualStudio.Text.Implementation.BufferGroup.RaiseEvents() Line 626\tC#\r\n \tMicrosoft.VisualStudio.Platform.VSEditor.dll!Microsoft.VisualStudio.Text.Implementation.BufferGroup.FinishEdit() Line 586\tC#\r\n \tMicrosoft.VisualStudio.Platform.VSEditor.dll!Microsoft.VisualStudio.Text.Projection.Implementation.ProjectionBuffer.SpanEdit.ReplaceSpans(int position, int spansToReplace, System.Collections.Generic.IList<object> spansToInsert, Microsoft.VisualStudio.Text.EditOptions options, object editTag) Line 758\tC#\r\n \tMicrosoft.VisualStudio.Platform.VSEditor.dll!Microsoft.VisualStudio.Text.Projection.Implementation.ProjectionBuffer.ReplaceSpans(int position, int spansToReplace, System.Collections.Generic.IList<object> spansToInsert, Microsoft.VisualStudio.Text.EditOptions options, object editTag) Line 995\tC#\r\n \tMicrosoft.WebTools.Languages.Html.Editor.dll!Microsoft.WebTools.Languages.Html.Editor.Projection.LanguageProjectionManager.UpdateTextBuffer(Microsoft.WebTools.Languages.Html.Editor.Projection.ProjectionMapping[] mappings, string fullLangBufferText) Line 156\tC#\r\n \tMicrosoft.WebTools.Languages.Html.Editor.dll!Microsoft.WebTools.Languages.Html.Editor.Projection.LanguageProjectionManager.SetMappingsHelper(Microsoft.WebTools.Languages.Html.Editor.Projection.ProjectionMapping[] mappings, string fullLangBufferText) Line 214\tC#\r\n \tMicrosoft.WebTools.Languages.Html.Editor.dll!Microsoft.WebTools.Languages.Html.Editor.Projection.LanguageProjectionBuffer.SetTextAndMappings(string text, Microsoft.WebTools.Languages.Html.Editor.Projection.ProjectionMapping[] mappings) Line 34\tC#\r\n \tMicrosoft.WebTools.Languages.Razor.Core.dll!Microsoft.WebTools.Languages.Razor.Core.RazorCodeGenerator.SetTextAndMappings(System.Collections.Generic.List<Microsoft.WebTools.Languages.Html.Editor.ContainedLanguage.Razor.RazorRange> newCodeRanges) Line 873\tC#\r\n \tMicrosoft.WebTools.Languages.Razor.Core.dll!Microsoft.WebTools.Languages.Razor.Core.RazorCodeGenerator.OnDocumentStructureChanged.AnonymousMethod__0() Line 345\tC#\r\n \tMicrosoft.WebTools.Languages.Shared.Editor.dll!Microsoft.WebTools.Languages.Shared.Editor.Utility.GuardedOperations.InvokeExtensionPoint(object errorSource, System.Action action) Line 84\tC#\r\n \tMicrosoft.WebTools.Languages.Razor.Core.dll!Microsoft.WebTools.Languages.Razor.Core.RazorCodeGenerator.OnDocumentStructureChanged(object sender, Microsoft.VisualStudio.Editor.Razor.DocumentStructureChangedEventArgs e) Line 366\tC#\r\n \tMicrosoft.VisualStudio.Editor.Razor.dll!Microsoft.VisualStudio.Editor.Razor.DefaultVisualStudioRazorParser.OnDocumentStructureChanged(object state) Line 472\tC#\r\n\r\n```\r\n\r\n","Url":"https://github.com/dotnet/roslyn/issues/38557","RelatedDescription":"Open issue \"Inline rename throws InvalidOperationException in ASP.NET Core page\" (#38557)"},{"Id":"490463947","IsPullRequest":false,"CreatedAt":"2019-09-06T18:27:45","Actor":"vsfeedback","Number":"38556","RawContent":null,"Title":"Degraded nullable analysis with conditional expression of Generic type","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/608446/degraded-nullable-analysis-with-conditional-expres.html)._\n\n---\nThis code raised null reference warning at conditional expression assignment until on VS 16.2.0 Preview 1.0.\nBut now no warnings and happens NullReferenceException at runtime.\nPlease check below.\n\n```csharp\n#nullable enable\nusing System;\n\npublic class Program\n{\n    public static void Main()\n    {\n        var x = new Test&lt;object&gt;(new object());\n        Console.WriteLine(x.Value.ToString()); // NullReferenceException here!\n    }\n}\n\npublic class Test&lt;T&gt;\n{\n    public T Value { get; }\n\npublic Test(T value)\n    {\n        // this. Value = default; // this raises CS8602 correctly even at 16.2.0 Preview 2.0\n\nvar dummyCond = value == null;\n        this. Value = (dummyCond) ? value : default; // no nullable warnings since 16.2.0 Preview 2.0\n    }\n}\n```\n\n---\n### Original Comments\n\n#### Visual Studio Feedback System on 6/17/2019, 03:47 AM: \n\n<p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n#### Visual Studio Feedback System on 6/17/2019, 08:14 PM: \n\n<p>This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.</p>\n\n\n---\n### Original Solutions\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/38556","RelatedDescription":"Open issue \"Degraded nullable analysis with conditional expression of Generic type\" (#38556)"},{"Id":"490462355","IsPullRequest":false,"CreatedAt":"2019-09-06T18:23:53","Actor":"jaredpar","Number":"38555","RawContent":null,"Title":"FixupSpan tests are flaky","State":"open","Body":"The following two tests are failing in otherwise good builds:\r\n\r\n- `CSharp_FixupSpanDuringResolvableConflict_ComplexificationReordersReferenceSpans`\r\n- `VisualBasic_FixupSpanDuringResolvableConflict_NonReferenceConflict`\r\n\r\nError message: \r\n\r\n```\r\nAssert.Equal() Failure\\r\\nExpected: WhereSelectEnumerableIterator<TextSpan, Span> [[41..44), [177..180), [184..187)]\\r\\nActual: List<Span> [[41..44), [177..180), [177..180), [184..187), [184..187)]\r\n```\r\n\r\nStack trace:\r\n\r\n```\r\n   at Microsoft.CodeAnalysis.Editor.UnitTests.Rename.RenameTagProducerTests.VB$StateMachine_8_VerifyTaggedSpansCore.MoveNext() in /_/src/EditorFeatures/Test2/Rename/RenameTagProducerTests.vb:line 91\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.CodeAnalysis.Editor.UnitTests.Rename.RenameTagProducerTests.VB$StateMachine_2_VerifyTaggedSpans.MoveNext() in /_/src/EditorFeatures/Test2/Rename/RenameTagProducerTests.vb:line 26\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.CodeAnalysis.Editor.UnitTests.Rename.RenameTagProducerTests.VB$StateMachine_6_VerifySpansBeforeConflictResolution.MoveNext() in /_/src/EditorFeatures/Test2/Rename/RenameTagProducerTests.vb:line 61\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.CodeAnalysis.Editor.UnitTests.Rename.RenameTagProducerTests.VB$StateMachine_28_CSharp_FixupSpanDuringResolvableConflict_ComplexificationReordersReferenceSpans.MoveNext() in /_/src/EditorFeatures/Test2/Rename/RenameTagProducerTests.vb:line 1383\r\n--- End of stack trace from previous location where exception was thrown ---\r\n```\r\n\r\n","Url":"https://github.com/dotnet/roslyn/issues/38555","RelatedDescription":"Open issue \"FixupSpan tests are flaky\" (#38555)"},{"Id":"490461546","IsPullRequest":false,"CreatedAt":"2019-09-06T18:21:51","Actor":"stephentoub","Number":"38554","RawContent":null,"Title":"IDE0018 removes necessary nullable annotations","State":"open","Body":"**Version Used**: \r\n3.4.0-beta1-19426-03+b18d90790da95b6862def56802fa4249e4868bb4\r\n\r\n**Steps to Reproduce**:\r\n```C#\r\n#nullable enable\r\nclass Program\r\n{\r\n    static void Main()\r\n    {\r\n        string? result;\r\n        TryGetValue(\"hi\", out result);\r\n    }\r\n\r\n    static bool TryGetValue(string key, out string? result)\r\n    {\r\n        result = null;\r\n        return false;\r\n    }\r\n}\r\n``` \r\n\r\n**Expected Behavior**:\r\nIDE0018 offered and changes:\r\n```C#\r\n        string? result;\r\n        TryGetValue(\"hi\", out result);\r\n```\r\ninto\r\n```C#\r\n        TryGetValue(\"hi\", out string? result);\r\n```\r\n\r\n**Actual Behavior**:\r\nIDE0018 offered and changes:\r\n```C#\r\n        string? result;\r\n        TryGetValue(\"hi\", out result);\r\n```\r\ninto\r\n```C#\r\n        TryGetValue(\"hi\", out string result);\r\n```\r\nwhich fails to compile with \"warning CS8600: Converting null literal or possible null value to non-nullable type.\".","Url":"https://github.com/dotnet/roslyn/issues/38554","RelatedDescription":"Open issue \"IDE0018 removes necessary nullable annotations\" (#38554)"},{"Id":"490452980","IsPullRequest":false,"CreatedAt":"2019-09-06T18:01:05","Actor":"stephentoub","Number":"38552","RawContent":null,"Title":"IDE1006 doesn't provide a \"fix all\"?","State":"open","Body":"**Version Used**: \r\n3.4.0-beta1-19426-03+b18d90790da95b6862def56802fa4249e4868bb4\r\n\r\nIDE1006 (naming violations) doesn't provide a \"fix all\".  My project has > 1000 violations; how do I fix them all based on my editorconfig settings without going through one-by-one?","Url":"https://github.com/dotnet/roslyn/issues/38552","RelatedDescription":"Open issue \"IDE1006 doesn't provide a \"fix all\"?\" (#38552)"},{"Id":"490451562","IsPullRequest":true,"CreatedAt":"2019-09-06T17:57:38","Actor":"sharwell","Number":"38551","RawContent":null,"Title":"Fix inconsistencies with nullability annotations in the BCL","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/38551","RelatedDescription":"Open PR \"Fix inconsistencies with nullability annotations in the BCL\" (#38551)"},{"Id":"490448032","IsPullRequest":true,"CreatedAt":"2019-09-06T17:49:33","Actor":"tmat","Number":"38550","RawContent":null,"Title":"Reuse previously resolved missing assembly metadata objects when identity doesn't match","State":"open","Body":"Fixes https://github.com/dotnet/try/issues/345.\r\n\r\n**Background**\r\nWhen the compiler is resolving compilation references and encounters a reference whose assembly identity does not match any of the explicitly given references it falls back to a Reference Resolver. In regular compilation an error is reported since there is no Reference Resolver. Interactive compiler supplies a resolver that attempts to find the missing reference. \r\n\r\nOnce the missing reference is found the compiler adds it to the list of implicitly resolved assemblies and if the same missing assembly identity is referenced later (by a subsequent submission) it reuses the assembly symbol from this list, so that we don't end up loading multiple instances of the same missing assembly. [1]\r\n\r\nThe resolver may find an assembly that matches the name of the missing reference but doesn't match the version exactly. This is expected as a newer version of the assembly may be available than was referenced and the compiler correctly binds to the newer version. \r\n\r\n**Issue** \r\nThe first submission added a reference to a netstandard20 library on .NET Core and the subsequent submission referenced a type from that library. The reference resolution in the compilation corresponding to the second submission ended up adding a new, distinct reference to the library, instead of reusing the one that was already resolved for the first submission compilation.\r\n\r\nThis was caused by mismatch in versions of some of the facades transitively referenced by the library thru `netstandard.dll` reference and resolved thru the missing reference resolution mechanism. The facades ware referenced with different versions than the actual versions available in the set of references the Reference Resolver resolved missing references from. The compiler ended up using two distinct instances of the same facade assembly metadata. An assembly symbol is only reused if all its transitively referenced assemblies match. In this case the library assembly symbol wasn't reused because some of the facade assembly symbols did not match.\r\n\r\nThe problem was that the mechanism [1] didn't reuse missing assembly metadata with a different version than what was requested. The fix is to check whether we have seen an assembly with the resolved identity in addition to the requested identity.\r\n","Url":"https://github.com/dotnet/roslyn/pull/38550","RelatedDescription":"Open PR \"Reuse previously resolved missing assembly metadata objects when identity doesn't match\" (#38550)"},{"Id":"490101556","IsPullRequest":false,"CreatedAt":"2019-09-06T17:49:04","Actor":"yyjdelete","Number":"38542","RawContent":null,"Title":"Consider add an diagnostic to report call to an virtual method via base from an different method?","State":"closed","Body":"**Version Used**: \r\nVS2019 16.3.0preview3.0(3.3.1-beta3-19430-03+fa8e2c9b566e4471a3509fc63d7baca0a2a6d30b)\r\nwith `Microsoft.CodeAnalysis.FxCopAnalyzers` 2.9.4\r\n\r\n**Steps to Reproduce**:\r\n\r\n```cs\r\n    public class Class1\r\n    {\r\n        public virtual void Test1()\r\n        {\r\n        }\r\n\r\n        /*public void Test2()\r\n        {\r\n        }*/\r\n    }\r\n    public class Class2 : Class1\r\n    {\r\n        public void Test2()\r\n        {\r\n            base.Test1();\r\n        }\r\n    }\r\n    public class Class3 : Class2\r\n    {\r\n        public override void Test1()\r\n        {\r\n            Console.WriteLine(\"Do something.\");\r\n        }\r\n    }\r\n```\r\n\r\n**Expected Behavior**:\r\nIt will be better if roslyn can report an diagnostic(Info or Warn) for `base.Test1();`(call virtual method `Class1.Test1()` via `base` from another method `Test2()`), it can easily be an mistake of `base.Test2()` or `this.Test1()`(I used to use `base` when there is no `Test1()` in `Class2`, but it will also make the override in `Class3.Test1()` useless).\r\n\r\n**Actual Behavior**:\r\nNo diagnostic is reported.\r\n","Url":"https://github.com/dotnet/roslyn/issues/38542","RelatedDescription":"Closed issue \"Consider add an diagnostic to report call to an virtual method via base from an different method?\" (#38542)"},{"Id":"490439784","IsPullRequest":false,"CreatedAt":"2019-09-06T17:30:17","Actor":"cston","Number":"38548","RawContent":null,"Title":"Null dereference warning within local function","State":"open","Body":"The compiler generates a warning for `y.ToString()` in 16.4 but no warning in 16.3.\r\n```C#\r\nclass Program\r\n{\r\n    static void F(System.Action a) { }\r\n\r\n    static void M(string? x)\r\n    {\r\n        string? y = x;\r\n        if (y == null) return;\r\n\r\n        F(Local);\r\n        return;\r\n\r\n        void Local()\r\n        {\r\n            y.ToString();\r\n        }\r\n    }\r\n}\r\n```","Url":"https://github.com/dotnet/roslyn/issues/38548","RelatedDescription":"Open issue \"Null dereference warning within local function\" (#38548)"},{"Id":"490317495","IsPullRequest":false,"CreatedAt":"2019-09-06T13:06:28","Actor":"stephentoub","Number":"38547","RawContent":null,"Title":"[MaybeNullWhen(false)] results in disagreement between IntelliSense and compiler","State":"open","Body":"**Version Used**: \r\n3.4.0-beta1-19426-03+b18d90790da95b6862def56802fa4249e4868bb4\r\n\r\n**Steps to Reproduce**:\r\n```C#\r\n#nullable enable\r\nusing System.Diagnostics.CodeAnalysis;\r\n\r\nclass Program\r\n{\r\n    static void Main()\r\n    {\r\n        var d = new MyDictionary<string, string>();\r\n        d.TryGetValue(\"hello\", out string? s1);\r\n        d.TryGetValue(\"hello\", out string s2);\r\n    }\r\n}\r\n\r\nclass MyDictionary<TKey, TValue>\r\n{\r\n    public bool TryGetValue(TKey key, [MaybeNullWhen(false)] out TKey value)\r\n    {\r\n        value = default!;\r\n        return false;\r\n    }\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\nThe compiler's needs and IntelliSense match.\r\n\r\n**Actual Behavior**:\r\nThe compiler requires a `?` on the `out` argument, but IntelliSense doesn't include one:\r\n![image](https://user-images.githubusercontent.com/2642209/64430139-99bc6800-d085-11e9-9e6a-c77ecf63be5e.png)\r\n","Url":"https://github.com/dotnet/roslyn/issues/38547","RelatedDescription":"Open issue \"[MaybeNullWhen(false)] results in disagreement between IntelliSense and compiler\" (#38547)"},{"Id":"490316703","IsPullRequest":false,"CreatedAt":"2019-09-06T13:04:45","Actor":"Youssef1313","Number":"38546","RawContent":null,"Title":"Interpolated string","State":"open","Body":"```csharp\r\nvar x = $\"Some string\";\r\n```\r\n\r\n**Actual Behavior**:\r\nI think the following code is transformed into a `String.Format` method call, even if there are no `{ }` between the double quotes.\r\n\r\n**Expected Behavior**:\r\nIt's better if the `$` is just ignored and the code is treated as\r\n\r\n```csharp\r\nvar x = \"Some string\";\r\n```\r\n\r\n","Url":"https://github.com/dotnet/roslyn/issues/38546","RelatedDescription":"Open issue \"Interpolated string\" (#38546)"},{"Id":"490283976","IsPullRequest":false,"CreatedAt":"2019-09-06T11:47:32","Actor":"heejaechang","Number":"38545","RawContent":null,"Title":"get rid of VSTHRD100 \"Avoid async void methods\" suppression and VSSDK006 suppression","State":"open","Body":"moving to new VS SDK introduced new warning VSTHRD100 abd VSSDK006 which is suppressed for now. @sharwell  want to enable those.","Url":"https://github.com/dotnet/roslyn/issues/38545","RelatedDescription":"Open issue \"get rid of VSTHRD100 \"Avoid async void methods\" suppression and VSSDK006 suppression\" (#38545)"},{"Id":"490156542","IsPullRequest":false,"CreatedAt":"2019-09-06T06:36:12","Actor":"NekoKoneko","Number":"38543","RawContent":null,"Title":"Ternary operator in async method crashes the compiler","State":"open","Body":"**Version Used**: 3.2.1-beta4-19408-03 (2fc6a049) included with the Visual Studio 2019 (16.2.4)\r\n\r\n**Steps to Reproduce**:\r\n```C#\r\nusing System;\r\nusing System.Threading.Tasks;\r\n\r\nclass Program\r\n{\r\n    static Task Foo(bool b) => Bar(async () =>\r\n        b ? await Task.Delay(1) : await Task.Delay(2));\r\n\r\n    static T Bar<T>(Func<T> f) => f();\r\n\r\n    static void Main(string[] args) {}\r\n}\r\n```\r\nThis code crashes the compiler with the following stack:\r\n<details>\r\n  <summary>Stack trace</summary>\r\n\r\n```\r\n  Message: System.NullReferenceException: Object reference not set to an instance of an object.\r\n   at Microsoft.CodeAnalysis.CSharp.AsyncMethodToStateMachineRewriter.VisitExpressionStatement(BoundExpressionStatement node)\r\n   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.Visit(BoundNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[T](ImmutableArray`1 list)\r\n   at Microsoft.CodeAnalysis.CSharp.Symbols.MethodToClassRewriter.VisitBlock(BoundBlock node)\r\n   at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.<>c__DisplayClass41_0.<VisitBlock>b__0()\r\n   at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.PossibleIteratorScope(ImmutableArray`1 locals, Func`1 wrapped)\r\n   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.Visit(BoundNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[T](ImmutableArray`1 list)\r\n   at Microsoft.CodeAnalysis.CSharp.Symbols.MethodToClassRewriter.VisitBlock(BoundBlock node)\r\n   at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.<>c__DisplayClass41_0.<VisitBlock>b__0()\r\n   at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.PossibleIteratorScope(ImmutableArray`1 locals, Func`1 wrapped)\r\n   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.Visit(BoundNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[T](ImmutableArray`1 list)\r\n   at Microsoft.CodeAnalysis.CSharp.Symbols.MethodToClassRewriter.VisitBlock(BoundBlock node)\r\n   at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.<>c__DisplayClass41_0.<VisitBlock>b__0()\r\n   at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.PossibleIteratorScope(ImmutableArray`1 locals, Func`1 wrapped)\r\n   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.Visit(BoundNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[T](ImmutableArray`1 list)\r\n   at Microsoft.CodeAnalysis.CSharp.Symbols.MethodToClassRewriter.VisitBlock(BoundBlock node)\r\n   at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.<>c__DisplayClass41_0.<VisitBlock>b__0()\r\n   at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.PossibleIteratorScope(ImmutableArray`1 locals, Func`1 wrapped)\r\n   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(BoundNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.Visit(BoundNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.AsyncMethodToStateMachineRewriter.VisitBody(BoundStatement body)\r\n   at Microsoft.CodeAnalysis.CSharp.AsyncMethodToStateMachineRewriter.GenerateMoveNext(BoundStatement body, MethodSymbol moveNextMethod)\r\n   at Microsoft.CodeAnalysis.CSharp.AsyncRewriter.GenerateMoveNext(SynthesizedImplementationMethod moveNextMethod)\r\n   at Microsoft.CodeAnalysis.CSharp.AsyncRewriter.GenerateMethodImplementations()\r\n   at Microsoft.CodeAnalysis.CSharp.StateMachineRewriter.Rewrite()\r\n   at Microsoft.CodeAnalysis.CSharp.AsyncRewriter.Rewrite(BoundStatement bodyWithAwaitLifted, MethodSymbol method, Int32 methodOrdinal, VariableSlotAllocator slotAllocatorOpt, TypeCompilationState compilationState, DiagnosticBag diagnostics, AsyncStateMachine& stateMachineType)\r\n   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileSynthesizedMethods(TypeCompilationState compilationState)\r\n   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamedType(NamedTypeSymbol containingType)\r\n   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.<>c__DisplayClass22_0.<CompileNamedTypeAsTask>b__0()\r\nStack Trace:\r\n   at System.Environment.FailFast(System.String, System.Exception)\r\n   at Microsoft.CodeAnalysis.FatalError.ReportUnlessCanceled(System.Exception)\r\n   at Microsoft.CodeAnalysis.CSharp.MethodCompiler+<>c__DisplayClass22_0.<CompileNamedTypeAsTask>b__0()\r\n   at Microsoft.CodeAnalysis.CSharp.AsyncMethodToStateMachineRewriter.VisitExpressionStatement(Microsoft.CodeAnalysis.CSharp.BoundExpressionStatement)\r\n   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode)\r\n   at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode)\r\n   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.Collections.Immutable.ImmutableArray`1<System.__Canon>)\r\n   at Microsoft.CodeAnalysis.CSharp.Symbols.MethodToClassRewriter.VisitBlock(Microsoft.CodeAnalysis.CSharp.BoundBlock)\r\n   at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter+<>c__DisplayClass41_0.<VisitBlock>b__0()\r\n   at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.PossibleIteratorScope(System.Collections.Immutable.ImmutableArray`1<Microsoft.CodeAnalysis.CSharp.Symbols.LocalSymbol>, System.Func`1<Microsoft.CodeAnalysis.CSharp.BoundStatement>)\r\n   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode)\r\n   at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode)\r\n   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.Collections.Immutable.ImmutableArray`1<System.__Canon>)\r\n   at Microsoft.CodeAnalysis.CSharp.Symbols.MethodToClassRewriter.VisitBlock(Microsoft.CodeAnalysis.CSharp.BoundBlock)\r\n   at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter+<>c__DisplayClass41_0.<VisitBlock>b__0()\r\n   at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.PossibleIteratorScope(System.Collections.Immutable.ImmutableArray`1<Microsoft.CodeAnalysis.CSharp.Symbols.LocalSymbol>, System.Func`1<Microsoft.CodeAnalysis.CSharp.BoundStatement>)\r\n   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode)\r\n   at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode)\r\n   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.Collections.Immutable.ImmutableArray`1<System.__Canon>)\r\n   at Microsoft.CodeAnalysis.CSharp.Symbols.MethodToClassRewriter.VisitBlock(Microsoft.CodeAnalysis.CSharp.BoundBlock)\r\n   at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter+<>c__DisplayClass41_0.<VisitBlock>b__0()\r\n   at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.PossibleIteratorScope(System.Collections.Immutable.ImmutableArray`1<Microsoft.CodeAnalysis.CSharp.Symbols.LocalSymbol>, System.Func`1<Microsoft.CodeAnalysis.CSharp.BoundStatement>)\r\n   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode)\r\n   at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode)\r\n   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriter.DoVisitList[[System.__Canon, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]](System.Collections.Immutable.ImmutableArray`1<System.__Canon>)\r\n   at Microsoft.CodeAnalysis.CSharp.Symbols.MethodToClassRewriter.VisitBlock(Microsoft.CodeAnalysis.CSharp.BoundBlock)\r\n   at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter+<>c__DisplayClass41_0.<VisitBlock>b__0()\r\n   at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.PossibleIteratorScope(System.Collections.Immutable.ImmutableArray`1<Microsoft.CodeAnalysis.CSharp.Symbols.LocalSymbol>, System.Func`1<Microsoft.CodeAnalysis.CSharp.BoundStatement>)\r\n   at Microsoft.CodeAnalysis.CSharp.BoundTreeRewriterWithStackGuard.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode)\r\n   at Microsoft.CodeAnalysis.CSharp.MethodToStateMachineRewriter.Visit(Microsoft.CodeAnalysis.CSharp.BoundNode)\r\n   at Microsoft.CodeAnalysis.CSharp.AsyncMethodToStateMachineRewriter.VisitBody(Microsoft.CodeAnalysis.CSharp.BoundStatement)\r\n   at Microsoft.CodeAnalysis.CSharp.AsyncMethodToStateMachineRewriter.GenerateMoveNext(Microsoft.CodeAnalysis.CSharp.BoundStatement, Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol)\r\n   at Microsoft.CodeAnalysis.CSharp.AsyncRewriter.GenerateMoveNext(Microsoft.CodeAnalysis.CSharp.Symbols.SynthesizedImplementationMethod)\r\n   at Microsoft.CodeAnalysis.CSharp.AsyncRewriter.GenerateMethodImplementations()\r\n   at Microsoft.CodeAnalysis.CSharp.StateMachineRewriter.Rewrite()\r\n   at Microsoft.CodeAnalysis.CSharp.AsyncRewriter.Rewrite(Microsoft.CodeAnalysis.CSharp.BoundStatement, Microsoft.CodeAnalysis.CSharp.Symbols.MethodSymbol, Int32, Microsoft.CodeAnalysis.CodeGen.VariableSlotAllocator, Microsoft.CodeAnalysis.CSharp.TypeCompilationState, Microsoft.CodeAnalysis.DiagnosticBag, Microsoft.CodeAnalysis.CSharp.AsyncStateMachine ByRef)\r\n   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileSynthesizedMethods(Microsoft.CodeAnalysis.CSharp.TypeCompilationState)\r\n   at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamedType(Microsoft.CodeAnalysis.CSharp.Symbols.NamedTypeSymbol)\r\n   at Microsoft.CodeAnalysis.CSharp.MethodCompiler+<>c__DisplayClass22_0.<CompileNamedTypeAsTask>b__0()\r\n   at Roslyn.Utilities.UICultureUtilities+<>c__DisplayClass5_0.<WithCurrentUICulture>b__0()\r\n   at System.Threading.Tasks.Task.Execute()\r\n   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\r\n   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)\r\n   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(System.Threading.Tasks.Task ByRef)\r\n   at System.Threading.Tasks.Task.ExecuteEntry(Boolean)\r\n   at System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n```\r\n</details>\r\n\r\nReplacing ternary operator with the code block fixes compilation error:\r\n```C#\r\n    static Task Foo(bool b) => Bar(async () =>\r\n    {\r\n        if (b)\r\n            await Task.Delay(1);\r\n        else\r\n            await Task.Delay(2);\r\n    });\r\n```\r\n","Url":"https://github.com/dotnet/roslyn/issues/38543","RelatedDescription":"Open issue \"Ternary operator in async method crashes the compiler\" (#38543)"},{"Id":"490093934","IsPullRequest":false,"CreatedAt":"2019-09-06T02:18:46","Actor":"petrroll","Number":"38541","RawContent":null,"Title":"Debuger can't evaluate expression ImmutableArray<'namedTuple'>","State":"open","Body":"**Version Used**: \r\nCurrent Int Preview + Roslyn ~master\r\n**Steps to Reproduce**:\r\n\r\n![image](https://user-images.githubusercontent.com/1764721/64396243-dbabc680-d011-11e9-8a88-bab32d14744e.png)\r\n\r\n**Expected Behavior**:\r\nAll expressions in locals are evaluated.\r\n\r\n**Actual Behavior**:\r\nNone of them is.\r\n\r\n---\r\nI'll try to provide more info / minimal repro if I have time tomorrow.","Url":"https://github.com/dotnet/roslyn/issues/38541","RelatedDescription":"Open issue \"Debuger can't evaluate expression ImmutableArray<'namedTuple'>\" (#38541)"},{"Id":"490084827","IsPullRequest":false,"CreatedAt":"2019-09-06T01:35:03","Actor":"davkean","Number":"38540","RawContent":null,"Title":"\"Introduce using startment\" refactoring doesn't show up in the middle of a variable","State":"open","Body":"**Version Used**: \r\n\r\n**Steps to Reproduce**:\r\n\r\nThis occurs for both C# and VB.\r\n\r\n1.  CTRL+. at $\r\n\r\n``` C#\r\nusing System;\r\nusing System.IO;\r\n\r\nclass Class1\r\n{\r\n    public static void Main()\r\n    {\r\n        Stream stream = G$etStream();\r\n\r\n        Console.WriteLine(stream);\r\n    }\r\n\r\n    private static Stream GetStream()\r\n    {\r\n        return null;\r\n    }\r\n}\r\n\r\n```\r\n\r\nExpected: \r\n![image](https://user-images.githubusercontent.com/1103906/64394534-fe81bd80-d099-11e9-95f6-bc57634d5b52.png)\r\n\r\nActual:\r\nNothing, the refactoring isn't available\r\n\r\nThis is particularly odd when the CA00067 complains about the type not being disposed and covers the entire span of the variable, so you can suppress the warning but not introduce the fix.\r\n\r\n","Url":"https://github.com/dotnet/roslyn/issues/38540","RelatedDescription":"Open issue \"\"Introduce using startment\" refactoring doesn't show up in the middle of a variable\" (#38540)"}],"ResultType":"GitHubIssue"},"CoreRT-Issues":{"Issues":[{"Id":"490571600","IsPullRequest":true,"CreatedAt":"2019-09-07T00:48:23","Actor":"davidwrighton","Number":"7779","RawContent":null,"Title":"Resource writing","State":"open","Body":"- Refactor the win32 resource reading code to use more natural managed data structures\r\n- Build a Win32 resource emitter on top of refactored data structures\r\n- Replace resource section copy logic with new node to generate win32 resources","Url":"https://github.com/dotnet/corert/pull/7779","RelatedDescription":"Open PR \"Resource writing\" (#7779)"},{"Id":"490072419","IsPullRequest":true,"CreatedAt":"2019-09-06T23:34:35","Actor":"davidwrighton","Number":"7776","RawContent":null,"Title":"Partial compilation and generic ibc processing","State":"closed","Body":"- Support for partial compilation\r\n- Support for parsing generics in IBC data\r\n - Bonus feature of searching referenced and input assemblies for types if the module in the IBC data is invalid","Url":"https://github.com/dotnet/corert/pull/7776","RelatedDescription":"Closed or merged PR \"Partial compilation and generic ibc processing\" (#7776)"},{"Id":"490437186","IsPullRequest":true,"CreatedAt":"2019-09-06T22:57:58","Actor":"Dotnet-GitSync-Bot","Number":"7778","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7778","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7778)"},{"Id":"490412146","IsPullRequest":true,"CreatedAt":"2019-09-06T16:18:41","Actor":"trylek","Number":"7777","RawContent":null,"Title":"Output raw test lists for the individual outcomes from SuperIlc","State":"open","Body":"This change tweaks SuperIlc to emit simple line-oriented test lists\r\nfor the various compilation and execution outcomes. I found this\r\nquite useful for comparing various runs. I have also deleted a bit\r\nof dead code I noticed.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7777","RelatedDescription":"Open PR \"Output raw test lists for the individual outcomes from SuperIlc\" (#7777)"},{"Id":"487718255","IsPullRequest":true,"CreatedAt":"2019-09-05T21:27:38","Actor":"davidwrighton","Number":"7758","RawContent":null,"Title":"Ibc work","State":"closed","Body":"Implement IBC tuning compilation and parsing\r\nStill tbd\r\n- method block count utilization\r\n- generics testing\r\n\r\n(Also my most recent changes introduced some sort of subtle bug, but I wanted to get this out for initial code review from the folks in Europe.)","Url":"https://github.com/dotnet/corert/pull/7758","RelatedDescription":"Closed or merged PR \"Ibc work\" (#7758)"},{"Id":"489360143","IsPullRequest":true,"CreatedAt":"2019-09-05T19:38:18","Actor":"fadimounir","Number":"7772","RawContent":null,"Title":"Compile cross-module generics in the same version bubble.","State":"closed","Body":"This work is related to the single-exe prototype, but after discussing with @davidwrighton, these are changes that we can have in master as well.\r\n\r\nCompiling generics from external modules in the version bubble is enabled using a command line switch.\r\n\r\nOther changes: Changing signatures in hashtable of instantiations to include owning type as a way of encoding the module override info\r\n","Url":"https://github.com/dotnet/corert/pull/7772","RelatedDescription":"Closed or merged PR \"Compile cross-module generics in the same version bubble.\" (#7772)"},{"Id":"489380977","IsPullRequest":true,"CreatedAt":"2019-09-05T14:33:56","Actor":"MichalStrehovsky","Number":"7773","RawContent":null,"Title":"Get jitwrapper building on x86","State":"closed","Body":"CoreCLR repo is going to build it that way. I could exclude that outside x64, but it's just better to fix it...","Url":"https://github.com/dotnet/corert/pull/7773","RelatedDescription":"Closed or merged PR \"Get jitwrapper building on x86\" (#7773)"},{"Id":"488748576","IsPullRequest":true,"CreatedAt":"2019-09-05T13:42:32","Actor":"janvorli","Number":"7767","RawContent":null,"Title":"Implement SystemV AMD64 ABI struct classification","State":"closed","Body":"This change implements SystemV AMD64 ABI struct classification necessary\r\nfor correct passing of function arguments of struct types and returning\r\nthese by value on Unix AMD64.\r\n\r\nThis change is a port of the CoreCLR version with necessary changes to reflect differences in the type system interface between CoreRT and CoreCLR. I have also added caching of the classification result as JIT calls classification for the same type many times.","Url":"https://github.com/dotnet/corert/pull/7767","RelatedDescription":"Closed or merged PR \"Implement SystemV AMD64 ABI struct classification\" (#7767)"},{"Id":"489459547","IsPullRequest":true,"CreatedAt":"2019-09-04T23:50:25","Actor":"cshung","Number":"7775","RawContent":null,"Title":"[WIP] Complete the filtering for MethodImpl.AggressiveOptimization","State":"open","Body":"","Url":"https://github.com/dotnet/corert/pull/7775","RelatedDescription":"Open PR \"[WIP] Complete the filtering for MethodImpl.AggressiveOptimization\" (#7775)"},{"Id":"489406467","IsPullRequest":true,"CreatedAt":"2019-09-04T23:16:31","Actor":"Dotnet-GitSync-Bot","Number":"7774","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub @NextTurn","Url":"https://github.com/dotnet/corert/pull/7774","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7774)"},{"Id":"488925681","IsPullRequest":true,"CreatedAt":"2019-09-04T16:39:39","Actor":"Dotnet-GitSync-Bot","Number":"7771","RawContent":null,"Title":"Mirror changes from dotnet/corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7771","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx\" (#7771)"},{"Id":"488893657","IsPullRequest":true,"CreatedAt":"2019-09-04T02:16:33","Actor":"Dotnet-GitSync-Bot","Number":"7770","RawContent":null,"Title":"Mirror changes from dotnet/corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7770","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx\" (#7770)"},{"Id":"488826953","IsPullRequest":true,"CreatedAt":"2019-09-04T01:18:56","Actor":"Dotnet-GitSync-Bot","Number":"7769","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas @stephentoub","Url":"https://github.com/dotnet/corert/pull/7769","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7769)"},{"Id":"488782037","IsPullRequest":true,"CreatedAt":"2019-09-03T21:33:47","Actor":"trylek","Number":"7768","RawContent":null,"Title":"Minor triage improvement in SuperIlc","State":"closed","Body":"For tests with unhandled runtime exceptions, we can improve SuperIlc\r\ntriage by using the exception as the triage string instead of just\r\nreporting a non-zero exit code. Part of the logic already existed\r\nbut it apparently had a typo in the exception message check due to\r\nwhich it failed to kick in.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7768","RelatedDescription":"Closed or merged PR \"Minor triage improvement in SuperIlc\" (#7768)"},{"Id":"488681079","IsPullRequest":true,"CreatedAt":"2019-09-03T20:23:38","Actor":"MichalStrehovsky","Number":"7765","RawContent":null,"Title":"Delete unused file","State":"closed","Body":"Noticed when auditing the CPAOT copy scripts.","Url":"https://github.com/dotnet/corert/pull/7765","RelatedDescription":"Closed or merged PR \"Delete unused file\" (#7765)"},{"Id":"488732123","IsPullRequest":true,"CreatedAt":"2019-09-03T19:16:49","Actor":"trylek","Number":"7766","RawContent":null,"Title":"Update RyuJIT","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7766","RelatedDescription":"Closed or merged PR \"Update RyuJIT\" (#7766)"},{"Id":"488341349","IsPullRequest":true,"CreatedAt":"2019-09-03T00:07:22","Actor":"yowl","Number":"7764","RawContent":null,"Title":"[WIP]: Wasm: fix more occurrences of loading Sbytes into int32 without sign extending.","State":"open","Body":"While #7763 was fine as far as it went, it didn't actually catch all problems with loading sbyte on to the stack, namely binary operations, shifting and branching.   This add a few more tests for those and fixes the sign extending","Url":"https://github.com/dotnet/corert/pull/7764","RelatedDescription":"Open PR \"[WIP]: Wasm: fix more occurrences of loading Sbytes into int32 without sign extending.\" (#7764)"},{"Id":"487641478","IsPullRequest":true,"CreatedAt":"2019-09-02T20:20:50","Actor":"trylek","Number":"7755","RawContent":null,"Title":"Preparatory change to fix JIT tokenScope during devirtualization","State":"closed","Body":"Based on Andy's advice I investigated fixing tokenScope in JIT\r\nto work correctly even in the presence of devirtualization by\r\nbasically calling getMethodModule for the resolved virtual method\r\nto update the token scope. To make that work end to end, I had\r\nto actually implement the [previously unused] helper in CoreRT.\r\n\r\nThanks\r\n\r\nTomas\r\n\r\nP.S. Based on Michal's offline advice I have locally verified that\r\nthe Generics CoreRT test works in release mode with the updated\r\nJIT.\r\n","Url":"https://github.com/dotnet/corert/pull/7755","RelatedDescription":"Closed or merged PR \"Preparatory change to fix JIT tokenScope during devirtualization\" (#7755)"},{"Id":"487654553","IsPullRequest":false,"CreatedAt":"2019-09-02T15:10:29","Actor":"OshoNot","Number":"7756","RawContent":null,"Title":"System.ArgumentNullException while running basic Suave web server","State":"closed","Body":"Hi guys,\r\n\r\nI've been trying to come up with a basic web server using Suave + CoreRT. Check this [repo](https://github.com/OshoNot/suave-corert) for source code and error analysis. When I start the generated executable, it yields the following exception:\r\n\r\n```bash\r\nUnhandled Exception: System.ArgumentNullException: Value cannot be null. Parameter name: path1\r\n   at System.IO.Path.Combine(String, String) + 0x53\r\n   at Suave.Web.startWebServerAsync(SuaveConfig, FSharpFunc\\`2) + 0x46\r\n   at Suave.Web.startWebServer(SuaveConfig, FSharpFunc\\`2) + 0x17\r\n   at Program.main(String[]) + 0x28\r\n   at Simple-Web!<BaseAddress>+0x7d639d\r\nAborted\r\n```","Url":"https://github.com/dotnet/corert/issues/7756","RelatedDescription":"Closed issue \"System.ArgumentNullException while running basic Suave web server\" (#7756)"},{"Id":"488211989","IsPullRequest":true,"CreatedAt":"2019-09-02T15:07:10","Actor":"yowl","Number":"7763","RawContent":null,"Title":"Wasm: fixes loading int16 and SBytes from the stack where they were previously not sign extended","State":"closed","Body":"Previously loading SBytes from the stack did not sign extend causing problems in the NativeFormatReader.  This adds a test and fixes that scenario.","Url":"https://github.com/dotnet/corert/pull/7763","RelatedDescription":"Closed or merged PR \"Wasm: fixes loading int16 and SBytes from the stack where they were previously not sign extended\" (#7763)"},{"Id":"487908157","IsPullRequest":true,"CreatedAt":"2019-09-02T07:56:48","Actor":"MichalStrehovsky","Number":"7762","RawContent":null,"Title":"Remove MetadataManager.SupportsReflection","State":"closed","Body":"The property was added when we started compiling ProjectN mrt100_app.dll. It was problematic because it didn't actually mean reflection - it meant \"is this something non-essential that we can skip\". We actually need what it was doing at a finer graunlarity. This commit starts with that.\r\n\r\nWith this, generic virtual methods work in the reflection disabled mode.\r\n\r\nA couple notes:\r\n* Some of the SupportsReflection calls were redundant (they were in a code path that is already related to reflection). Those disappeared without replacement.\r\n* CodeBaseDependencyAlgorithm references moved to the metadata manager. Hopefully we can get better control of generated templates in the future. (Not all types/generic methods need templates.)\r\n* DictionaryLayoutNode references were redundant with the references from code/EETypes. Removed without replacement.\r\n* Method template table emission needs to check whether the template was marked. This mirrors what we do for type templates. Eventually, we should make this for loop to go over all generated method templates instead of all methods (just keep track of the templates themselves).\r\n* GVMs were implicitly relying on getting templates because we make templates for everything. Added explicit template generation.","Url":"https://github.com/dotnet/corert/pull/7762","RelatedDescription":"Closed or merged PR \"Remove MetadataManager.SupportsReflection\" (#7762)"},{"Id":"487859012","IsPullRequest":false,"CreatedAt":"2019-09-01T09:35:37","Actor":"xoofx","Number":"7761","RawContent":null,"Title":"The type or namespace name 'System' could not be found","State":"closed","Body":"Hey,\r\n\r\nI'm trying to open `ILCompiler.sln` but I'm unable to compile any projects there, I tried both with Visual Studio 2017 and 2019\r\n\r\n![image](https://user-images.githubusercontent.com/715038/64073842-c9ddc280-cca3-11e9-807a-e74edbc1b17b.png)\r\n\r\nI tried to reclone entirely corert, `init-tools.cmd` but it still doesn't work.\r\n\r\nFrom the screenshot above I tried to compile repro.csproj and the command line from msbuild is like this:\r\n\r\n```\r\nC:\\code\\dotnet\\corert\\packages\\microsoft.net.compilers.toolset\\3.3.0-beta2-19367-02\\tasks\\net472\\csc.exe /noconfig /unsafe+ /nowarn:169,414,1701,1702,2008 /nostdlib+ /warn:4 /define:X86;BIT32;PLATFORM_WINDOWS;CORERT;DEBUG;TRACE;DEBUGRESOURCES /errorendlocation /preferreduilang:en-US /debug+ /debug:portable /optimize- /out:C:\\code\\dotnet\\corert\\bin/obj/Windows_NT.x86.Debug/repro\\repro.exe /ruleset:\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Professional\\Team Tools\\Static Analysis Tools\\\\Rule Sets\\MinimumRecommendedRules.ruleset\" /target:exe /warnaserror+ /utf8output /checksumalgorithm:SHA256 /langversion:preview /analyzerconfig:C:\\code\\dotnet\\corert\\.editorconfig Program.cs\r\n```\r\n\r\nSo it is passing `/nostdlib+` but I don't see any netstandard library passed to it for example, so not sure how this can work.\r\n\r\nAny clues?\r\n","Url":"https://github.com/dotnet/corert/issues/7761","RelatedDescription":"Closed issue \"The type or namespace name 'System' could not be found\" (#7761)"},{"Id":"487763609","IsPullRequest":true,"CreatedAt":"2019-08-31T18:14:47","Actor":"MichalStrehovsky","Number":"7759","RawContent":null,"Title":"Consider method referenced with LDTOKEN called","State":"closed","Body":"When usage based metadata manager is enabled, we'll consider methods referenced with LDTOKEN as called. They pretty much have to be to make LINQ expressions work.","Url":"https://github.com/dotnet/corert/pull/7759","RelatedDescription":"Closed or merged PR \"Consider method referenced with LDTOKEN called\" (#7759)"},{"Id":"487765387","IsPullRequest":true,"CreatedAt":"2019-08-31T18:13:54","Actor":"MichalStrehovsky","Number":"7760","RawContent":null,"Title":"Do not root module metadata for modules not generating metadata","State":"closed","Body":"Fixes the multimodule compiler crash in DynamicGenerics.","Url":"https://github.com/dotnet/corert/pull/7760","RelatedDescription":"Closed or merged PR \"Do not root module metadata for modules not generating metadata\" (#7760)"},{"Id":"487702491","IsPullRequest":true,"CreatedAt":"2019-08-31T00:52:18","Actor":"Dotnet-GitSync-Bot","Number":"7757","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @NextTurn","Url":"https://github.com/dotnet/corert/pull/7757","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7757)"},{"Id":"487178311","IsPullRequest":true,"CreatedAt":"2019-08-30T20:03:57","Actor":"trylek","Number":"7752","RawContent":null,"Title":"Fix subtle bug in token context module resolution","State":"closed","Body":"I found out that my recent relaxation of DevirtualizationManager\r\nto allow devirtualization across modules within the large version\r\nbubble uncovered a pre-existing bug in token module context\r\nresolution causing about 10% execution failure rate in Pri#1 tests\r\nin release large-bubble mode.\r\n\r\nMy original implementation (that Michal later expanded to also\r\ncover generated IL thunks) used \"pResolvedToken.tokenScope\" to\r\ndetermine the token context. This is however incorrect in the\r\npresence of devirtualization - in such case, JIT only updates\r\nthe tokenContext in pResolvedToken to refer to the devirtualized\r\nmethod, not tokenScope (which continues pointing at the original\r\nmethod in which we devirtualized a method call). Due to this the\r\nreference module and token value went out of sync, causing a\r\nwrong function to be called.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7752","RelatedDescription":"Closed or merged PR \"Fix subtle bug in token context module resolution\" (#7752)"},{"Id":"487608901","IsPullRequest":true,"CreatedAt":"2019-08-30T19:41:35","Actor":"davidwrighton","Number":"7754","RawContent":null,"Title":"Fix calls to non-virtual Object methods on generic type parameters","State":"closed","Body":"- Calls to non-virtual Object methods are translated by the jit into\r\ndirect calls that should not be resolved via a constrained resolver\r\n- Add testcase covering behavior","Url":"https://github.com/dotnet/corert/pull/7754","RelatedDescription":"Closed or merged PR \"Fix calls to non-virtual Object methods on generic type parameters\" (#7754)"},{"Id":"487533247","IsPullRequest":true,"CreatedAt":"2019-08-30T18:56:00","Actor":"MichalStrehovsky","Number":"7753","RawContent":null,"Title":"Separate out ReadyToRun specific type system","State":"closed","Body":"This was pretty clean thanks to the existing dot-file structure.","Url":"https://github.com/dotnet/corert/pull/7753","RelatedDescription":"Closed or merged PR \"Separate out ReadyToRun specific type system\" (#7753)"},{"Id":"487108586","IsPullRequest":true,"CreatedAt":"2019-08-29T21:48:18","Actor":"trylek","Number":"7751","RawContent":null,"Title":"Fix path separator on Linux","State":"closed","Body":"As Jan Vorlicek found out in his local testing, SuperIlc always\r\nused semicolon as path separator when emitting the list of reference\r\npaths for Crossgen. This is incorrect on Linux - colon should be\r\nuse as the path separator instead.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7751","RelatedDescription":"Closed or merged PR \"Fix path separator on Linux\" (#7751)"},{"Id":"486646291","IsPullRequest":true,"CreatedAt":"2019-08-29T20:56:35","Actor":"nattress","Number":"7750","RawContent":null,"Title":"Remove SectionStartNode mechanism","State":"closed","Body":"Symbols for the beginning of each PE section were added as part of https://github.com/dotnet/corert/commit/b34583dc66abb2a74e0d6dd4ec937294cadc0e76#diff-2559cd80eabcbd275c059bd09c5cc961. This is no longer needed as RVA field references now just use standard relocations to `CopiedFieldRvaNode` objects and don't need any special case logic.","Url":"https://github.com/dotnet/corert/pull/7750","RelatedDescription":"Closed or merged PR \"Remove SectionStartNode mechanism\" (#7750)"}],"ResultType":"GitHubIssue"},"SDK-Issues":{"Issues":[{"Id":"490547922","IsPullRequest":true,"CreatedAt":"2019-09-06T22:36:34","Actor":"dotnet-maestro[bot]","Number":"3608","RawContent":null,"Title":"[release/3.0.100-preview9] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:99181a82-e62d-4080-a0f9-08d721cca946)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190906.20\r\n- **Date Produced**: 9/6/2019 9:40 PM\r\n- **Commit**: 8f5d7b1ba4f744199ba006cac38dfcb9a2408880\r\n- **Branch**: refs/heads/release/3.0-preview9\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-rc1-19456-20\r\n\r\n[marker]: <> (End:99181a82-e62d-4080-a0f9-08d721cca946)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3608","RelatedDescription":"Closed or merged PR \"[release/3.0.100-preview9] Update dependencies from dotnet/core-setup\" (#3608)"},{"Id":"490484818","IsPullRequest":true,"CreatedAt":"2019-09-06T21:12:23","Actor":"dotnet-maestro[bot]","Number":"3607","RawContent":null,"Title":"[release/3.0.100-preview9] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:99181a82-e62d-4080-a0f9-08d721cca946)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190906.12\r\n- **Date Produced**: 9/6/2019 5:32 PM\r\n- **Commit**: 6de53852e89ecf403fc893c9a0286d5027b51c83\r\n- **Branch**: refs/heads/release/3.0-preview9\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-rc1-19456-12\r\n\r\n[marker]: <> (End:99181a82-e62d-4080-a0f9-08d721cca946)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3607","RelatedDescription":"Closed or merged PR \"[release/3.0.100-preview9] Update dependencies from dotnet/core-setup\" (#3607)"},{"Id":"490289736","IsPullRequest":true,"CreatedAt":"2019-09-06T19:21:00","Actor":"dotnet-maestro[bot]","Number":"3602","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190906.2\r\n- **Date Produced**: 9/6/2019 2:35 PM\r\n- **Commit**: 397060df67388da56b50de7e6f7292a5dccc2de6\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19456.2\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19456.2\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3602","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3602)"},{"Id":"490470058","IsPullRequest":false,"CreatedAt":"2019-09-06T18:42:45","Actor":"RoyalMugu","Number":"3606","RawContent":null,"Title":"In process hosting is not supported for AspNetCoreModule. Change the AspNetCoreModule to atleast AspNetCoreModuleV2.","State":"open","Body":"I have created a Asp.net core web application. I am able to rebuild successfully but when I try to publish the solution to Azure App Service, I am getting the below error,\r\n============================================================\r\nThe \"TransformWebConfig\" task failed unexpectedly.\r\nSystem.Exception: In process hosting is not supported for AspNetCoreModule. Change the AspNetCoreModule to atleast AspNetCoreModuleV2.\r\n   at Microsoft.NET.Sdk.Publish.Tasks.WebConfigTransform.TransformAspNetCore(XElement aspNetCoreElement, String appName, Boolean configureForAzure, Boolean useAppHost, String extension, String aspNetCoreModuleName, String aspNetCoreHostingModel)\r\n   at Microsoft.NET.Sdk.Publish.Tasks.WebConfigTransform.Transform(XDocument webConfig, String appName, Boolean configureForAzure, Boolean useAppHost, String extension, String aspNetCoreModuleName, String aspNetCoreHostingModel, String environmentName)\r\n   at Microsoft.NET.Sdk.Publish.Tasks.TransformWebConfig.Execute()\r\n   at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute()\r\n   at Microsoft.Build.BackEnd.TaskBuilder.<ExecuteInstantiatedTask>d__26.MoveNext()\t\r\n\r\n============================================================\r\nEnvironment:\r\n.Net Core 2.2\r\n.Net Core runtime 2.2.6 (x64)\r\nAsp.Net core 2.2.6 - Shared Framework\r\n\r\nHow do I change the AspNetCoreModule to atleast AspNetCoreModuleV2 in the appsettings.json file? \r\nAlso I dont want to change it to out of process hosting.\r\n\r\nI am not sure if I will be able to publish even after making this change. Any of your inputs will be helpful. \r\n","Url":"https://github.com/dotnet/sdk/issues/3606","RelatedDescription":"Open issue \"In process hosting is not supported for AspNetCoreModule. Change the AspNetCoreModule to atleast AspNetCoreModuleV2.\" (#3606)"},{"Id":"490463119","IsPullRequest":true,"CreatedAt":"2019-09-06T18:25:46","Actor":"wli3","Number":"3605","RawContent":null,"Title":"Block publishing in single C++ and building exe","State":"open","Body":"","Url":"https://github.com/dotnet/sdk/pull/3605","RelatedDescription":"Open PR \"Block publishing in single C++ and building exe\" (#3605)"},{"Id":"490306683","IsPullRequest":true,"CreatedAt":"2019-09-06T12:42:38","Actor":"dotnet-maestro[bot]","Number":"3604","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:e76888f5-e4f1-4c3d-d4c4-08d7315d8bc7)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190905.21\r\n- **Date Produced**: 9/6/2019 1:51 AM\r\n- **Commit**: e99f81b0e3289cfd851be0d927c1fcffa43af6b5\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19455.21\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19455.21\r\n\r\n[marker]: <> (End:e76888f5-e4f1-4c3d-d4c4-08d7315d8bc7)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3604","RelatedDescription":"Open PR \"[release/3.1.1xx] Update dependencies from dotnet/arcade\" (#3604)"},{"Id":"490291005","IsPullRequest":true,"CreatedAt":"2019-09-06T12:05:23","Actor":"dotnet-bot","Number":"3603","RawContent":null,"Title":"Merge release/3.0.100-preview9 to release/3.0.1xx","State":"open","Body":"\nThis is an automatically generated pull request from release/3.0.100-preview9 into release/3.0.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.100-preview9-to-release/3.0.1xx\ngit reset --hard upstream/release/3.0.1xx\ngit merge upstream/release/3.0.100-preview9\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.100-preview9-to-release/3.0.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3603","RelatedDescription":"Open PR \"Merge release/3.0.100-preview9 to release/3.0.1xx\" (#3603)"},{"Id":"490145747","IsPullRequest":true,"CreatedAt":"2019-09-06T06:02:09","Actor":"wli3","Number":"3601","RawContent":null,"Title":"Fix restore skip package dependency resolution.targets by using NoOp version","State":"open","Body":"","Url":"https://github.com/dotnet/sdk/pull/3601","RelatedDescription":"Open PR \"Fix restore skip package dependency resolution.targets by using NoOp version\" (#3601)"},{"Id":"490082274","IsPullRequest":true,"CreatedAt":"2019-09-06T05:45:50","Actor":"wli3","Number":"3600","RawContent":null,"Title":"Experimental cpp 3 test ci, if CI's VS has the latest C++ props","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/3600","RelatedDescription":"Closed or merged PR \"Experimental cpp 3 test ci, if CI's VS has the latest C++ props\" (#3600)"},{"Id":"488843649","IsPullRequest":true,"CreatedAt":"2019-09-06T01:19:58","Actor":"wli3","Number":"3591","RawContent":null,"Title":"Experimental cpp 3 fix restore by skipping package dependency resolution.targets","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/3591","RelatedDescription":"Closed or merged PR \"Experimental cpp 3 fix restore by skipping package dependency resolution.targets\" (#3591)"},{"Id":"489953405","IsPullRequest":true,"CreatedAt":"2019-09-06T00:36:02","Actor":"livarcocc","Number":"3598","RawContent":null,"Title":"Update branding to rc2","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/3598","RelatedDescription":"Closed or merged PR \"Update branding to rc2\" (#3598)"},{"Id":"489951769","IsPullRequest":true,"CreatedAt":"2019-09-06T00:35:49","Actor":"livarcocc","Number":"3597","RawContent":null,"Title":"Merge release/3.0.1xx into release/3.0.100-preview9","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/3597","RelatedDescription":"Closed or merged PR \"Merge release/3.0.1xx into release/3.0.100-preview9\" (#3597)"},{"Id":"490022605","IsPullRequest":false,"CreatedAt":"2019-09-05T21:38:52","Actor":"sebastienros","Number":"3599","RawContent":null,"Title":"Latest SDK contains a netcoreapp3.0 ref pack for ASP.NET","State":"open","Body":"https://dotnetcli.azureedge.net/dotnet/Sdk/5.0.100-alpha1-014061/dotnet-sdk-5.0.100-alpha1-014061-win-x64.zip\r\n\r\n![image](https://user-images.githubusercontent.com/1165805/64383979-c5d6db00-cfea-11e9-93a9-2477dac23095.png)\r\n","Url":"https://github.com/dotnet/sdk/issues/3599","RelatedDescription":"Open issue \"Latest SDK contains a netcoreapp3.0 ref pack for ASP.NET\" (#3599)"},{"Id":"486583658","IsPullRequest":true,"CreatedAt":"2019-09-05T20:56:54","Actor":"dsplaisted","Number":"3584","RawContent":null,"Title":"Fix symbols for tasks","State":"closed","Body":"Create PDBs for tasks and put them in the directory where Arcade will upload them\r\n\r\nFixes #3581","Url":"https://github.com/dotnet/sdk/pull/3584","RelatedDescription":"Closed or merged PR \"Fix symbols for tasks\" (#3584)"},{"Id":"489923150","IsPullRequest":true,"CreatedAt":"2019-09-05T20:18:57","Actor":"dotnet-maestro[bot]","Number":"3596","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:e76888f5-e4f1-4c3d-d4c4-08d7315d8bc7)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190905.3\r\n- **Date Produced**: 9/5/2019 4:27 PM\r\n- **Commit**: fee4ebe849050a385a4999e4c84fa61c1dc234bb\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19455.3\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19455.3\r\n\r\n[marker]: <> (End:e76888f5-e4f1-4c3d-d4c4-08d7315d8bc7)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3596","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/arcade\" (#3596)"},{"Id":"489727977","IsPullRequest":true,"CreatedAt":"2019-09-05T14:41:09","Actor":"dotnet-maestro[bot]","Number":"3595","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:e76888f5-e4f1-4c3d-d4c4-08d7315d8bc7)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190904.31\r\n- **Date Produced**: 9/5/2019 2:00 AM\r\n- **Commit**: 00d8aa82b488f321204a0e69a81399af9df276a1\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19454.31\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19454.31\r\n\r\n[marker]: <> (End:e76888f5-e4f1-4c3d-d4c4-08d7315d8bc7)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3595","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/arcade\" (#3595)"},{"Id":"488505457","IsPullRequest":true,"CreatedAt":"2019-09-05T14:20:59","Actor":"dotnet-maestro[bot]","Number":"3590","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190904.31\r\n- **Date Produced**: 9/5/2019 2:00 AM\r\n- **Commit**: 00d8aa82b488f321204a0e69a81399af9df276a1\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19454.31\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19454.31\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3590","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3590)"},{"Id":"489451698","IsPullRequest":true,"CreatedAt":"2019-09-04T23:29:14","Actor":"dotnet-maestro[bot]","Number":"3594","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/core-setup","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190906.22\r\n- **Date Produced**: 9/6/2019 11:22 PM\r\n- **Commit**: 321d01390849836541c2caac6d124c75ef961578\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.1.0-preview1.19456.22\r\n\r\n[marker]: <> (End:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3594","RelatedDescription":"Open PR \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#3594)"},{"Id":"489143174","IsPullRequest":false,"CreatedAt":"2019-09-04T18:33:31","Actor":"AArnott","Number":"3593","RawContent":null,"Title":"`dotnet test --blame` does not ","State":"closed","Body":"dotnet SDK version: 2.2.401\r\n\r\n`dotnet test -f netcoreapp2.1 --no-build --blame`  should produce a `Sequence.xml` file while running tests so we can know what test was running at the time of a crash or hang. But it doesn't create this file.\r\n\r\n```\r\n  --blame                                  Run the tests in blame mode. This option is helpful in isolating a problematic test causing the test host to crash.\r\n                                           Outputs a 'Sequence.xml' file in the current directory that captures the order of execution of test before the crash.\r\n```\r\n\r\nWithout this file, for async tests on linux it's impossible to know which test was running when the test runner hung.","Url":"https://github.com/dotnet/sdk/issues/3593","RelatedDescription":"Closed issue \"`dotnet test --blame` does not \" (#3593)"},{"Id":"488881838","IsPullRequest":false,"CreatedAt":"2019-09-04T00:28:05","Actor":"AArnott","Number":"3592","RawContent":null,"Title":"NETSDK1100 blocks building on Linux","State":"open","Body":"I have a test project which multi-targets between net472;netcoreapp2.1;netcoreapp3.0.\r\nOnly when targeting net472 or netcoreapp3.0 does it reference or use any WPF/WinForms types. Nevertheless, I have to set the SDK attribute to `Microsoft.NET.Sdk.WindowsDesktop` for this to work with netcoreapp3.0 at all, AFAIK.\r\n\r\nThis blocks the test project from building the `netcoreapp2.1` target on linux, which blocks me testing my library on Linux.\r\n\r\nHow should I proceed?","Url":"https://github.com/dotnet/sdk/issues/3592","RelatedDescription":"Open issue \"NETSDK1100 blocks building on Linux\" (#3592)"},{"Id":"486353347","IsPullRequest":true,"CreatedAt":"2019-09-03T18:55:57","Actor":"v-zbsail","Number":"3583","RawContent":null,"Title":"LOC CHECKIN | dotnet/sdk release/3.0.1xx | 20190828","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/3583","RelatedDescription":"Closed or merged PR \"LOC CHECKIN | dotnet/sdk release/3.0.1xx | 20190828\" (#3583)"},{"Id":"487548540","IsPullRequest":true,"CreatedAt":"2019-09-01T17:55:41","Actor":"johnbeisner","Number":"3589","RawContent":null,"Title":"Remove duplicate FolderPublish capability for SDK projects","State":"closed","Body":"Addresses: https://github.com/dotnet/sdk/issues/2769\r\n\r\nThe 'FolderPublish' capability is now being delivered to Visual Studio via. 'Microsoft.Managed.DesignTime.targets' [ https://github.com/dotnet/project-system/pull/4400 ] and is not required on the SDK command-line; removing 'FolderPublish' from 'Microsoft.NET.Sdk.targets'\r\n\r\nManually tested with Visual Studio 16.3 Preview 2","Url":"https://github.com/dotnet/sdk/pull/3589","RelatedDescription":"Closed or merged PR \"Remove duplicate FolderPublish capability for SDK projects\" (#3589)"},{"Id":"487516926","IsPullRequest":false,"CreatedAt":"2019-08-30T17:22:23","Actor":"Const-me","Number":"3588","RawContent":null,"Title":"MSBuild doesn’t define variables for .NET core?","State":"closed","Body":"Using VS2017 15.9.5, building a class library for .NET core 2.2. Here’s the relevant XML from my .csproj file:\r\n\r\n\t<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\t\t<PropertyGroup>\r\n\t\t\t<TargetFramework>netcoreapp2.2</TargetFramework>\r\n\t\t\t<!-- Skipped -->\r\n\t\t</PropertyGroup>\r\n\t\t<PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|AnyCPU'\">\r\n\t\t\t<DocumentationFile>$(OutputPath)doc.xml</DocumentationFile>\r\n\t\t</PropertyGroup>\r\n\t\t<ItemGroup>\r\n\t\t\t<Reference Include=\"System\">\r\n\t\t\t\t<HintPath>System</HintPath>\r\n\t\t\t</Reference>\r\n\t\t</ItemGroup>\r\n\t</Project>\r\n\r\nThe setting is used, but the doc.xml is produced in the root of the project instead of $(OutputPath).\r\n\r\nSame XML expression for `<DocumentationFile>` works OK for desktop .NET, i.e. the problem is specific to .NET Core projects.\r\n\r\nTried `$(OutDir)` and `$(qwer123)` got same result. Why $(OutputPath) is not defined? Maybe it has different name?","Url":"https://github.com/dotnet/sdk/issues/3588","RelatedDescription":"Closed issue \"MSBuild doesn’t define variables for .NET core?\" (#3588)"},{"Id":"486766608","IsPullRequest":false,"CreatedAt":"2019-08-29T17:05:04","Actor":"AkosLukacs","Number":"3586","RawContent":null,"Title":"FSharp - Compiler crashes if an anonymous record passed as obj argument","State":"closed","Body":"The FSharp compiler's issue was reported FSharp repo: https://github.com/dotnet/fsharp/issues/6434, and is fixed, and does work with 3.0.100-preview8-013656.\r\nBut doesn't work with SDK 2.2.401, I guess the compiler fix isn't in 2.2.401. Do you plan on releasing new version for 2.2?\r\n\r\nRepro: \r\n> dotnet new console -lang F#\r\n\r\n```fsharp\r\n// Program.fs, stolen from Vasily\r\nlet foo (_: obj) = ()\r\n\r\nlet bar() = foo {| F = 1 |}\r\n\r\n[<EntryPoint>]\r\nlet main argv =\r\n    bar()\r\n    0\r\n```\r\n\r\n> dotnet run\r\n\r\n# 2.2.401\r\nFails `error FS0192 : internal error : the anonymous record <>f__AnonymousType951611317`1' has not been generated in the pre-phase of generating this module`\r\n - Failed before I installed v3 preview\r\n - Did work after installing v3 preview\r\n - Failed to compile again after creating global.json and setting sdk version to 2.2.401\r\n\r\n# 3.0.100-preview8-013656\r\nWorks as expected\r\n","Url":"https://github.com/dotnet/sdk/issues/3586","RelatedDescription":"Closed issue \"FSharp - Compiler crashes if an anonymous record passed as obj argument\" (#3586)"},{"Id":"486811709","IsPullRequest":false,"CreatedAt":"2019-08-29T08:24:33","Actor":"PDostalek","Number":"3587","RawContent":null,"Title":"[loc][Query][sdk] Localizability of \"0; \"FailedToDeleteApphost\"","State":"open","Body":"Hi,\r\nplease help localization team to answer question from translator.\r\nIn case translator is not sure about context/meaning/localizability of string we raise a question.\r\n\r\nSource:\r\nNETSDK1111: Failed to delete output apphost: {0}\r\n\r\nFile Name:\r\nTasks\\Common\\Resources\\xlf\\Strings.xlf\r\n\r\n==========================================\r\nQuery:\r\nWould you please confirm if \"apphost\" can be translated? \r\nWhat does the placeholder {0} in this string imply?","Url":"https://github.com/dotnet/sdk/issues/3587","RelatedDescription":"Open issue \"[loc][Query][sdk] Localizability of \"0; \"FailedToDeleteApphost\"\" (#3587)"},{"Id":"486639844","IsPullRequest":false,"CreatedAt":"2019-08-28T22:29:49","Actor":"olgaark","Number":"3585","RawContent":null,"Title":"Microsoft.NET.Build.Extensions.Tasks.dll\tshould not be loaded in devenv projecc during reference resolution for native vc projects","State":"open","Body":"The problem is found while investigating \r\nVS Bug 973252: Perf: CPlusPlus_DDRIT.0900.Close Solution regressed VM_AdjustedImagesInMemory_Total_devenv by 2.000 Count (0.5%). Baseline 29226.70\r\n\r\nMicrosoft.NET.Build.Extensions.Tasks.dll is loaded by _HandlePackageFileConflicts target during\r\n\r\nTarget Name=ResolveAssemblyReferences Project=ConsoleApplication1.vcxproj  note that there is no assembly references in the native vc project\r\n            …\r\n            Target Name=_HandlePackageFileConflicts Project=ConsoleApplication1.vcxproj\r\n\r\nThe target is implemented here:\r\n\r\nf:\\Visual Studio 16 Master\\MSBuild\\Microsoft\\Microsoft.NET.Build.Extensions\\Microsoft.NET.Build.Extensions.ConflictResolution.targets\r\n============================================================================================================================================\r\n-->\r\n  <UsingTask TaskName=\"ResolvePackageFileConflicts\" AssemblyFile=\"$(MicrosoftNETBuildExtensionsTasksAssembly)\" />\r\n  <Target Name=\"_HandlePackageFileConflicts\" BeforeTargets=\"$(_HandlePackageFileConflictsBefore)\" AfterTargets=\"$(_HandlePackageFileConflictsAfter)\"  \r\nDependsOnTargets=\"GetReferenceAssemblyPaths\">\r\n    <ResolvePackageFileConflicts References=\"@(Reference)\" ReferenceCopyLocalPaths=\"@(ReferenceCopyLocalPaths)\" PlatformManifests=\"@(PackageConflictPlatformManifests)\" TargetFrameworkDirectories=\"$(TargetFrameworkDirectory)\" PackageOverrides=\"@(PackageConflictOverrides)\" PreferredPackages=\"$(PackageConflictPreferredPackages)\">\r\n      <Output TaskParameter=\"ReferencesWithoutConflicts\" ItemName=\"_ReferencesWithoutConflicts\" />\r\n      <Output TaskParameter=\"ReferenceCopyLocalPathsWithoutConflicts\" ItemName=\"_ReferenceCopyLocalPathsWithoutConflicts\" />\r\n      <Output TaskParameter=\"Conflicts\" ItemName=\"_ConflictPackageFiles\" />\r\n    </ResolvePackageFileConflicts>\r\n\r\nIs this target doing something applicable to vc projects? If not, please either disable it for vcxproj or add a condition so cpp targets can disable it.\r\nAt least, please add a condition there for empty @(Reference) so the task dll is not loaded in this case.\r\n\r\n","Url":"https://github.com/dotnet/sdk/issues/3585","RelatedDescription":"Open issue \"Microsoft.NET.Build.Extensions.Tasks.dll\tshould not be loaded in devenv projecc during reference resolution for native vc projects\" (#3585)"},{"Id":"486095529","IsPullRequest":false,"CreatedAt":"2019-08-28T00:12:21","Actor":"dsplaisted","Number":"3582","RawContent":null,"Title":"RID-specific self-contained .NET Core 3 app with dependency on Microsoft.NETCore.App 2.0.0 fails to run","State":"open","Body":"# Repro\r\n\r\nBuild and run the following project:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp3.0</TargetFramework>\r\n    <RuntimeIdentifier>win10-x64</RuntimeIdentifier>\r\n    <SelfContained>false</SelfContained>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.NETCore.App\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\n# Expected\r\n\r\nProject runs successfully\r\n\r\n# Actual\r\n\r\nProject fails to run with error messages such as the following:\r\n\r\n- > A fatal error was encountered. The library 'hostpolicy.dll' required to execute the application was not found in 'C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App\\3.0.0-preview9.19416.11'.\r\n- > The specified framework 'Microsoft.NETCore.App', version '3.0.0-preview9-19409-16' was not found.\r\n\r\nThe output folder also includes the following files, which come from the Microsoft.NETCore.App 2.0.0 package closure:\r\n\r\n- apphost.exe\r\n- hostfxr.dll\r\n- hostpolicy.dll\r\n- System.Private.CoreLib.dll\r\n\r\n# Details\r\n\r\nNuGet/Home#7344 would fix this.  Alternatively, we could try to use conflict resolution to exclude these extra assets.  That would probably require updating the platform manifest in the targeting pack.","Url":"https://github.com/dotnet/sdk/issues/3582","RelatedDescription":"Open issue \"RID-specific self-contained .NET Core 3 app with dependency on Microsoft.NETCore.App 2.0.0 fails to run\" (#3582)"},{"Id":"485985392","IsPullRequest":false,"CreatedAt":"2019-08-27T19:14:13","Actor":"livarcocc","Number":"3581","RawContent":null,"Title":"symbols packages being generated empty","State":"open","Body":"We have turned off symbols package generation for now on this repo.\r\n\r\nThey were generating empty nupkgs and conflicting with the actual nupkgs when the sign tool was repackaging signing assemblies.\r\n\r\nThe fact that symbols are empty here are causing symbol checks to fail on VS insertions.","Url":"https://github.com/dotnet/sdk/issues/3581","RelatedDescription":"Open issue \"symbols packages being generated empty\" (#3581)"},{"Id":"485513070","IsPullRequest":true,"CreatedAt":"2019-08-27T00:17:39","Actor":"JohnTortugo","Number":"3580","RawContent":null,"Title":"Disable symbol creation for now","State":"closed","Body":"The symbol packages getting created were causing conflicts in SignToolTask. Disabling the symbol creation until the proper adjustments are made to prevent inadvertently signing symbol packages.\r\n\r\n/cc @riarenas ","Url":"https://github.com/dotnet/sdk/pull/3580","RelatedDescription":"Closed or merged PR \"Disable symbol creation for now\" (#3580)"},{"Id":"485478158","IsPullRequest":true,"CreatedAt":"2019-08-26T23:35:07","Actor":"JohnTortugo","Number":"3579","RawContent":null,"Title":"Use SignTool with more logging","State":"closed","Body":"This new SignTool will show more information about what's repacking\r\n\r\nRelates to: https://github.com/dotnet/core-eng/issues/7569","Url":"https://github.com/dotnet/sdk/pull/3579","RelatedDescription":"Closed or merged PR \"Use SignTool with more logging\" (#3579)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"489344106","IsPullRequest":false,"CreatedAt":"2019-09-04T19:14:05","Actor":"leecow","Number":"120","RawContent":null,"Title":".NET Core 3.0 Preview 9","State":"open","Body":".NET Core Preview 9 released today. https://github.com/dotnet/core/issues/3304 has been opened for discussion. \r\n\r\n[Release Notes](https://github.com/dotnet/core/blob/master/release-notes/3.0/preview/3.0.0-preview9.md)\r\n[Download](https://github.com/dotnet/core/blob/master/release-notes/3.0/preview/3.0.0-preview9-download.md)\r\n\r\n**Blog posts**\r\n\r\n[.NET Core](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0-preview-9/)\r\n[ASP.NET Core](https://devblogs.microsoft.com/aspnet/asp-net-core-and-blazor-updates-in-net-core-3-0-preview-9/)\r\n\r\nPlease report any issues you find with 3.0.0 Preview 9, either responding to this issue, creating a new issue or creating a new issue in one of the following repos:\r\n\r\n* [aspnet/AspNetCore](https://github.com/aspnet/AspNetCore) - for ASP.NET Core questions\r\n* [aspnet/EntityFrameworkCore](https://github.com/aspnet/EntityFrameworkCore) - for Entity Framework Core questions\r\n* [dotnet/cli](https://github.com/dotnet/cli/issues) - for CLI tools and questions\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues) - for API issues and questions\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues) - for runtime issues\r\n* [dotnet/core-setup](https://github.com/dotnet/core-setup/issues) - for installer issues\r\n* [dotnet/winforms](https://github.com/dotnet/winforms/issues) - for Winforms issues\r\n* [dotnet/wpf](https://github.com/dotnet/wpf/issues) - for WPF issues\r\n* [nuget/home](https://github.com/nuget/home/issues) - for NuGet questions and issues","Url":"https://github.com/dotnet/announcements/issues/120","RelatedDescription":"Open issue \".NET Core 3.0 Preview 9\" (#120)"},{"Id":"480859726","IsPullRequest":false,"CreatedAt":"2019-08-14T19:54:26","Actor":"stephentoub","Number":"119","RawContent":null,"Title":"Consolidating .NET GitHub repos","State":"open","Body":"*To discuss these plans, please comment on the corresponding issue at https://github.com/dotnet/coreclr/issues/26175.*\r\n\r\nOver the next few months, we plan to consolidate several of the foundational repositories of .NET Core, including dotnet/coreclr and dotnet/corefx.\r\n\r\n.NET’s repository structure on GitHub was initially created in a fairly fine-grained manner, with the aim of enabling runtime agility and increased developer productivity.  However, this separation has led to a variety of complications for contributors and maintainers alike.  For example:\r\n- **Confusion about where issues should be opened.**  It’s not always clear in which repo an issue should be reported, complicated by the fact that some implementations actually span repositories (e.g. a type might be exposed through a reference assembly and have its tests in corefx but actually be implemented in System.Private.CoreLib in coreclr).\r\n- **Difficulty sharing source.**  System.Private.CoreLib is intricately connected to the rest of the runtime, and thus has lived with the runtime code.  That, however, means that although corefx has been intended as the place to share as much core library code as possible across any underlying runtime, we’ve needed to keep a significant body of code in System.Private.CoreLib, which then has meant it’s needed to be “mirrored” to each runtime repo (coreclr, corert, mono) that needs to consume it as source; similarly, corefx has similarly required access to much of that source, for example to use the same interop DllImports that are employed elsewhere in the runtimes.  The automatic mirror that shares this source needs to be maintained, and even when it has been, it’s often led to lag.  It’s also complicated developer processes, where to validate a change in one repo generally requires manually mirroring the code to other local repos in order to validate the change and ensure merging into one repo won’t break the others.\r\n- **PRs spanning multiple repos.**  Because the runtime, CoreLib, and the core libraries are all intricately linked, changing runtime behaviors, adding new APIs, or changing various build processes (e.g. improving static analysis) often requires multiple PRs carefully staged across time and multiple repos.  For example, to add a new method to a type like Dictionary<>, a developer must first make the source changes in her local coreclr repo and the test and reference assembly changes in her local corefx repo.  When satisfied with the fix, the developer must submit a PR to coreclr as well as a PR to corefx, the latter of which will fail.  Eventually the coreclr PR will be merged, and the changes will mirror to the other runtimes that also require the update.  Eventually those mirror PRs will be merged, and builds will be created containing the fix for each runtime.  At some point later those builds will be consumed into the corefx repo, after which point the original corefx PR can be re-validated and eventually merged.  That’s the best case; things get more complicated in situations where there are bidirectional dependencies.\r\n- **Building an installable runtime.** Self-hosting a custom built .NET requires intricate knowledge of how all the repos work and interact.  A developer can’t just clone a single repo, make a desired change, and easily produce an installer.\r\n- **Consistency.**  One goal we had for more fine-grained repos was to enable isolation and independence for teams working within each repo’s confines, but this has led to non-trivial duplication of effort on things like build systems and CI, and then the resulting lack of consistency as each system ends up diverging from the others.\r\n\r\nThe issues go beyond the runtime.  For example, the ASP.NET maintainers and community did a great job in the past year or so consolidating from ~55 repos down to ~5 repos, but that’s still more repos than is desirable, leading to similar issues as cited above for the runtime.  On top of that, these ASP.NET repositories are in the aspnet GitHub org, which adds an additional set of issues, for example:\r\n- **Complications moving issues between repos.**  If a developer opens an issue in aspnet/aspnetcore and it’s determined that the cause of the issue is actually in dotnet/corefx, there is no GitHub mechanism to enable easily moving that issue across the aspnet to dotnet organizational boundary.\r\n- **Permissions.** Each organization’s permissions end up needing to be managed and maintained separately.\r\n\r\nThe issues extend into tooling as well.  For example, we currently have multiple repositories that all logically make up the dotnet CLI, but actually creating a working installer spans multiple repos.\r\n\r\n### Plan\r\n\r\nTo address these issues, we’re planning to make some changes to our repository structure:\r\n- **dotnet/platform.**  We plan to combine dotnet/coreclr, dotnet/corefx, dotnet/corert, dotnet/core-setup, and the relevant portions of mono/mono into a new dotnet/platform repo.  Everything needed to build and produce the Microsoft.NETCore.App shared framework will be in this repo.  We will no longer suffer from the complications of source mirroring.  Features like changing runtime behavior or adding an API will no longer require a complicated dance across multiple repos.  Etc.\r\n- **dotnet/aspnetcore.**  We plan to move the existing aspnet/aspnetcore repository into the dotnet organization.  Along with that, we aim to combine a variety of the other aspnet repositories into aspnetcore, such as aspnet/blazor.  Whether repos like entityframeworkcore remain separate or combined remains an open question.  A goal is that, just as dotnet/platform will be responsible for the creation of Microsoft.NETCore.App, dotnet/aspnetcore will be responsible for the creation of Microsoft.AspNETCore.App.\r\n- **dotnet/cli.**  We plan to combine dotnet/toolset and dotnet/sdk into the dotnet/cli repo.\r\n\r\n### FAQ\r\n\r\n#### Why are we merging repos?\r\n\r\nWe believe we can significantly improve several aspects of .NET on GitHub by combining repos, benefiting both maintainers and contributors.  These improvements will manifest in a variety of ways, such as in better issue management, much easier models of contribution, and easier and faster ways to build and install the resulting bits.\r\n\r\n####  What will happen to the aspnet org?\r\n\r\nThe aspnet org as a separate entity is legacy and artificial.  In time we hope to absorb it into the dotnet org and sunset the aspnet org.\r\n\r\n#### Will the coreclr and corefx repos go away?\r\n\r\nWith the help of GitHub, we plan to migrate all issues from these repos to the new dotnet/platform repo, and then lock down creation of additional issues, such that the repos will no longer be used for issue management.  We will also inhibit the creation of PRs to the master branch, which will effectively become an archive for read-only review of history.  In this sense, these repos will be archived, and no active development will happen with them.  However, we plan to continue servicing previous .NET Core releases out of these repos, so the various release branches (e.g. release/2.1, release/3.0, etc.) will continue to see (limited) activity.\r\n\r\n#### Will the mono repo go away?\r\n\r\nNo. mono/mono contains the source for the full mono stack and will continue to live on happily.  We will simply be moving the managed source associated with System.Private.CoreLib and copying the relatively small amount of source that makes up the native mono runtime to dotnet/platform.  We may choose to then use some mirroring technology to keep the runtime copy in sync (this will, however, not suffer from the same mirroring issues we currently experience, as we would not be mirroring between two components required to build the same binaries), or we may choose to let them diverge and manually sync only those changes deemed relevant to both implementations.\r\n\r\n#### Will the corert repo go away?\r\n\r\nYes.  We plan to retire/archive the corert repo.  Some of the technology in the corert repo will be migrated to the master branch of dotnet/platform, where it will be productized as part of .NET.  Other portions of the corert repo will be migrated to feature branches of dotnet/platform, where the experimentation can continue.  In this way, we will use feature branches to continue experimenting with the corert technology, while making it easier to share portions with its shipping counterpart and also graduate functionality into master if/when it’s ready.\r\n\r\n#### Does this mean there will be a single repo for all of .NET?\r\n\r\nNo.  We will be reducing the number of repos that contribute to .NET, but currently we do not believe that going all the way down to one is the right answer.\r\n\r\n#### Doesn’t this mean that issue and PR tracking will now be overwhelming?\r\n\r\nIt is already the case that the vast majority of issues in a given repo are not relevant to any individual developer, and with several thousand open issues in each repo and on the order of a hundred open PRs in each, we already need systems (e.g. labels) to successfully manage issues and PRs.  As such, we don’t believe the merging will have a significant impact on this aspect of developer productivity.  If it turns out to have an unexpectedly large negative impact, we will work with the community to find ways to mitigate the problem.  However, there are already a multitude of successful open source projects on GitHub with at least an order of magnitude more issues.\r\n\r\n#### What will happen to existing issues?\r\n\r\nWith the help of GitHub functionality, we plan to migrate all issues from old repos (e.g. dotnet/coreclr, dotnet/corefx) to the new repos (e.g. dotnet/platform).  We may also use this as a forcing function to revisit stale issues and either close those that are no longer relevant or reinvigorate those that are demanding of more immediate attention.\r\n\r\n#### What about git history?\r\n\r\nIn general, we plan to keep history, such that history from each constituent repo will be a part of the new repo.  However, we have made some mistakes in the past (e.g. large binaries, multitudes of automated PRs for flowing bits and source between repos, etc.), and we plan to rewrite history to correct those mistakes wherever possible and impactful.  Some rough calculations suggest this could end up significantly reducing the size of the repos as well as the time it takes to clone, which should not only help developers approaching the project but also CI.  This will end up meaning that SHAs may be different in the new repo than they were in the old repo; as previously mentioned, however, any references to the old SHAs in the old repos will continue to work, as those repos will remain accessible.\r\n\r\n#### Will I still show up in the contributor list due to previous contributions?\r\n\r\nYes.  We plan to merge all such history.\r\n\r\n#### Will this break debugging with SourceLink?\r\n\r\nNo.  The existing repos will continue to be accessible, and commit SHAs there will remain unchanged.\r\n\r\n#### Might plans change?\r\n\r\nSure.  Part of the goal of posting this announcement is to hear from you, hear about additional benefits you're excited about, and hear about additional concerns we may not have considered.  We will include such ideas in our planning and course correct as necessary.\r\n\r\n## Discussion\r\n\r\nTo discuss these plans, please comment on the corresponding issue at https://github.com/dotnet/coreclr/issues/26175.\r\n","Url":"https://github.com/dotnet/announcements/issues/119","RelatedDescription":"Open issue \"Consolidating .NET GitHub repos\" (#119)"},{"Id":"470434872","IsPullRequest":false,"CreatedAt":"2019-07-19T16:54:02","Actor":"richlander","Number":"118","RawContent":null,"Title":".NET Core master branches have switched to \"5.0\"","State":"open","Body":"# .NET Core master branches have switched to \"5.0\"\r\n\r\nVarious .NET Core repos have switched their `master` branches to \"5.0\", and will use 3.x branches for 3.0 and 3.1 projects. This is very similar to how we approached 2.x and 3.0 projects. As context, `master` branches produced 3.0 builds for the entire period of the 2.2 project.\r\n\r\nAt present, this change is only relevant if you contribute to .NET Core repositories. Otherwise, we recommend that you wait for the 5.0 Preview releases before installing this new version.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/core #3059](https://github.com/dotnet/core/issues/3059)\r\n\r\n## Details\r\n\r\nThe following repos have moved their master branches to \"5.0\":\r\n\r\n- [dotnet/coreclr](https://github.com/dotnet/coreclr)\r\n- [dotnet/corefx](https://github.com/dotnet/corefx)\r\n- [dotnet/core-setup](https://github.com/dotnet/core-setup)\r\n\r\nYou can see that [5.0 .NET Core Runtime builds](https://github.com/dotnet/core-setup#daily-builds) are now being built and published at dotnet/core-setup.\r\n\r\nIn large part, we switched `master` to 5.0 to enable to the community to contribute changes. As the .NET Core 3.0 released has progressed, we've had to increase scrutiny on the changes we will accept. Now that we've permanently branched for 3.0, we can accept a much broader set of changes. Please consider that to be an open invitation!\r\n\r\nNotably, [dotnet/core-sdk](https://github.com/dotnet/core-sdk) is not yet producing 5.0 builds. We expect that the dotnet/core-sdk master branch will continue as a 3.0 branch for 2-3 months while we finish up the .NET Core 3.0 project.\r\n\r\nAt present, there is no developer experience for 5.0. We are waiting on the dotnet/core-sdk repo to switch to 5.0. Switching your project file to target `netcoreapp5.0` won't do anything useful. We'll update this issue when a 5.0 SDK comes available.","Url":"https://github.com/dotnet/announcements/issues/118","RelatedDescription":"Open issue \".NET Core master branches have switched to \"5.0\"\" (#118)"},{"Id":"465501070","IsPullRequest":false,"CreatedAt":"2019-07-08T23:25:31","Actor":"terrajobst","Number":"117","RawContent":null,"Title":"System.Text.Json usability study results","State":"open","Body":"We've performed a usability study on the new `System.Text.Json` APIs which will replace JSON.NET as the default JSON experience in .NET Core 3.0:\r\n\r\n* We focused on the primary \"getting started\" scenarios to validate that we picked the right type- and method names.\r\n* We simulated what we believe to be common error cases to validate that our exception messages are understandable and actionable.\r\n* Since we were short on time, we couldn't use the recruiting provided by the UX lab but instead brought in our own developers, which we recruited from the .NET engineering team\r\n\r\nThis has worked out well for us as we were able to get short term feedback which resulted in significant improvements to the overall API shape and usability. In the future, we should do more API focused UX studies 😊\r\n\r\n## Tasks\r\n\r\n| # | Description                            | Code\r\n|:--|:---------------------------------------|:-----\r\n| 1 | Serialize and pretty print             | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario1/Program.cs#L19-L31)\r\n| 2 | Deserialize with trailing comma        | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario2/Program.cs#L19-L25)\r\n| 3 | Deserialize with custom property names | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario3/Program.cs#L30-L45)\r\n| 4 | Read with DOM                          | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario4/Program.cs#L20-L35)\r\n| 5 | Pretty print an existing JSON file     | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario5/Program.cs#L26-L34)\r\n\r\n## Hypotheses\r\n\r\nWe expect developers to...\r\n\r\n| # | Description                                            | Result\r\n|:--|:-------------------------------------------------------|:---------------\r\n| 1 | ...assume the APIs are similar/identical to JSON.NET   |  Validated\r\n| 2 | ...complete tasks 1-4 successfully                     |  Validated\r\n| 3 | ...struggle/unable to complete the task 5, because it requires working with two different components which is very different from JSON.NET |  Invalidated\r\n| 4 | ...not look at documentation for most of their coding as IntelliSense is good enough |  Invalidated\r\n| 5 | ...be happy with the experience of using the API                                     |  Validated\r\n| 6 | ...plan on using `System.Text.Json` for their next JSON task                         |  Partially Validated\r\n\r\n##  Key Observations\r\n\r\n* Everyone completed scenarios #1-#3, 2 didn't complete #4, 6 didn't complete #5\r\n    - The reason was always \"out of time\". Every person who started a scenario successfully finished it.\r\n    - We feel this validates that we picked the right scope for a 60 minute study of people from various backgrounds\r\n* Overall people liked the new API\r\n    - Key value prop for most people was the fact that \"it's now built in\"\r\n    - Very few mentioned perf and the ones that did thought that it probably wouldn't make a difference in their scenarios.\r\n    - Most people said they would prefer `System.Text.Json` for new APIs, but would stick to JSON.NET in code that already uses it.\r\n    - **[Action]** None, this is in line with what we expected.\r\n* Virtually everyone tried to google for sample code in the documentation\r\n    - Everyone found our blog post and online documentation\r\n    - People new to .NET were confused that JSON.NET and `System.Text.Json` weren't the same thing\r\n    - Everyone complained that the current docs are lacking, especially sample code.\r\n    - **[Action]** Docs are work in progress. We plan on shipping with a fully documented API surface and sample code.\r\n* Virtually everyone found the key type relatively quickly\r\n    - Some people were confused when types were static, rather than something that one can new up\r\n    - **[Action]** None. This is by-design as we try to reduce the number of allocations.\r\n* Virtually everyone had trouble selecting the correct method on\r\n  `JsonSerializer`\r\n    - We chose a very complicated naming convention\r\n    - **[Action]** We simplified it by using names that people in the study told us were looking for.\r\n* Most of our error messages were well received because they told people what\r\n  the problem is & how they can fix them.\r\n    - One error message was unclear because we reported an unexpected character when we could have reported that we didn't expect a comment.\r\n    - **[Action]** We've reworded the error message.\r\n    - We had one error message that was generated by a lower layer and provided an action item that doesn't make sense when people receive it when using the higher layer component.\r\n    - **[Action]** We've reworded the error message to be more generic so it makes sense for both kind of consumers.\r\n* Virtually everyone used the new Roslyn completion feature which will also show\r\n  types from namespaces not imported yet.\r\n    - However, virtually nobody realized that they were doing it.\r\n    - This caused confusion when people found other APIs that happen to include Json in them, specifically the old data contract serialization.\r\n    - **[Action]** Talk to the Roslyn IDE team to see if this something more people will run into. This could prove to be especially problematic for technologies that share type names (e.g. `UserControl` in WinForms and WPF) and both are referenced by the project.\r\n* Optional parameters and `async`/`await` are usability cliffs\r\n    - Many were confused by optional parameters and tried to pass them in, even though they didn't have to.\r\n    - **[Action]** Talk to the Roslyn IDE team to see if we can visualize them better in VS.\r\n    - **[Action]** Try to avoid heavy use of optional parameters for mainline APIs.\r\n    - Async is a very steep cliff. People have no idea what to do in their code to make async work. While IntelliSense shows the usage by prefixing it with await, people didn't notice that.\r\n    - **[Action]** Unclear; this is a broader issue.\r\n* Virtually nobody used F1 to get help for APIs\r\n    - *Surprise*. I expected more people to use <kbd>F1</kbd>.\r\n* Virtually everyone used F12 to explore the API (\"metadata view\")\r\n    - *Surprise*. I expected most people to explore the type via the\r\n      IntelliSense completion\r\n* Nobody used Object Browser to explorer the APIs\r\n    - *Surprise*. I expected at least some people to.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/39304.","Url":"https://github.com/dotnet/announcements/issues/117","RelatedDescription":"Open issue \"System.Text.Json usability study results\" (#117)"},{"Id":"465034831","IsPullRequest":false,"CreatedAt":"2019-07-08T03:13:38","Actor":"leecow","Number":"116","RawContent":null,"Title":"Updates to releases.json (.NET Core release metadata)","State":"open","Body":"**The changes described in this issue will be live with the .NET Core July update on 7/9/2019.**\r\n\r\nThe releases.json files (e.g. [2.2 releases.json](https://raw.githubusercontent.com/dotnet/core/master/release-notes/2.2/releases.json)) are comprehensive metadata files which capture details of each .NET Core release. These files, along with the top level [releases-index.json](https://raw.githubusercontent.com/dotnet/core/master/release-notes/releases-index.json), are becoming increasingly important .NET Core release assets. These files, one for each major.minor channel, are relied upon by many to detect when updates for .NET Core are available, discover security update details and other uses.\r\n\r\nChanges are sometimes necessary, and the growing dependencies require that we treat compatibility of the schema with the utmost care. This announcement describes an addition to the releases.json schema.\r\n\r\n## SDK Versions and Visual Studio\r\n\r\nBecause of current .NET Core SDK product construction dependencies, there is a hard link between the Runtime, SDK, toolset (compilers, MSBuild, NuGet, and other components), and Visual Studio. Simplistically, this means that when anything updates, everything updates. The unfortunate result of this linking is that multiple versions of the SDK are released with each monthly update for each supported versions of Visual Studio. For example, the May Update for .NET Core 2.2 included the 2.2.5 runtime, 2.2.107 SDK for Visual Studio 2017 and 2.2.204 for Visual Studio 2019 and yet another pair of SDK versions for .NET Core 2.1. An example of this is the [2.2.5 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.5/2.2.5.md). \r\n\r\nThis is a confusing situation and we are working to mitigate the need to release multiple SDKs with .NET Core 3.0. The need for multiple SDK versions will persist for 2.1 LTS.\r\n\r\n## Adding the SDKS array\r\n\r\nTo appropriately model multiple SDKs per release, we are adding an SDKs array to releases.json, which will contain SDK objects. The top-level SDK object will represent the highest versioned SDK for a given update. Using the previous 2.2.5 update example, SDK 2.2.204 is in the top SDK object as well as duplicated in the SDKS array. All other applicable 2.2* SDK objects are included in the SDKS array. The SDK objects within the array will carry specific Visual Studio compatibility and version inclusion information to provide appropriate context.\r\n\r\nHere is an example of the new array based on the upcoming July update.\r\nAgain, this will be additive and the previous SDK object will include the highest SDK version for the release.\r\n\r\n```json\r\n{\r\n    \"sdk\": {\r\n        \"version\": \"2.2.301\",\r\n        \"version-display\": \"2.2.301\",\r\n        \"runtime-version\": \"2.2.6\",\r\n        \"vs-version\": \"16.1.3\",\r\n        \"vs-support\": \"Visual Studio 2019 (v16.1)\",\r\n        \"csharp-version\": \"7.3\",\r\n        \"fsharp-version\": \"4.5\",\r\n        \"vb-version\": null,\r\n        \"files\": []\r\n    },\r\n    \"sdks\": [\r\n        {\r\n            \"version\": \"2.2.301\",\r\n            \"version-display\": \"2.2.301\",\r\n            \"runtime-version\": \"2.2.6\",\r\n            \"vs-version\": \"16.1.3\",\r\n            \"vs-support\": \"Visual Studio 2019 (v16.1)\",\r\n            \"csharp-version\": \"7.3\",\r\n            \"fsharp-version\": \"4.5\",\r\n            \"vb-version\": null,\r\n            \"files\": []\r\n        },\r\n        {\r\n          \"version\": \"2.2.205\",\r\n          \"version-display\": \"2.2.205\",\r\n          \"runtime-version\": \"2.2.6\",\r\n          \"vs-version\": \"16.0.5\",\r\n          \"vs-support\": \"Visual Studio 2019 (v16.0)\",\r\n          \"csharp-version\": \"7.3\",\r\n          \"fsharp-version\": \"4.5\",\r\n          \"vb-version\": null,\r\n          \"files\": []\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\n## vs-version and the Runtime\r\n\r\nThe same version of the runtime is included in multiple versions of Visual Studio. To account for this, the vs-version field is being updated to a comma-delimited string. The string will represent all versions of Visual Studio which first include the particular .NET Core update. Again, an example from the upcoming July Update.\r\n\r\n```json\r\n\"runtime\": {\r\n        \"version\": \"2.2.6\",\r\n        \"version-display\": \"2.2.6\",\r\n        \"vs-version\": \"15.9.13, 16.1.3, 16.2.0\",\r\n```\r\n\r\nThe same `vs-versions` changes will be seen in the `aspnetcore-runtime` object.\r\n\r\n## Future Enhancements\r\n\r\nThere are other improvements to the schema which have been suggested by the community which we are evaluating. Generally, theses enhancements are additive and should not represent compatibility compromises for existing parsers and similar announcements will be published ahead of any changes.\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/116","RelatedDescription":"Open issue \"Updates to releases.json (.NET Core release metadata)\" (#116)"},{"Id":"444065225","IsPullRequest":false,"CreatedAt":"2019-05-14T18:38:23","Actor":"TaraOverfield","Number":"114","RawContent":null,"Title":"May 2019 .NET Updates","State":"open","Body":"# May 2019 .NET Updates\r\n\r\nThe following .NET updates were released in May 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.16 and .NET Core SDK 1.1.13( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.16/1.0.16.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.13/1.1.13.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.11 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.11/2.1.11.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.5 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.5/2.2.5.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2727](https://github.com/dotnet/core/issues/2727)\r\n\r\n## .NET Framework\r\n* [.NET Framework May 2019 Security and Quality Rollup - May 14, 2019](https://devblogs.microsoft.com/dotnet/net-framework-may-2019-security-and-quality-rollup/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/114","RelatedDescription":"Open issue \"May 2019 .NET Updates\" (#114)"},{"Id":"444027703","IsPullRequest":false,"CreatedAt":"2019-05-14T17:06:24","Actor":"blowdart","Number":"113","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and ASP.NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core and ASP.NET Core improperly handle web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core and ASP.NET Core application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core and ASP.NET Core web applications handle web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37651\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Private.Uri package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0, 4.3.1 | 4.3.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Nemanja Mijailovic](https://mijailovic.net/)\r\n\r\n### External Links\r\n\r\n[CVE-2019-0981](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0981)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/113","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability\" (#113)"},{"Id":"444027025","IsPullRequest":false,"CreatedAt":"2019-05-14T17:04:45","Actor":"blowdart","Number":"112","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and ASP.NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core and ASP.NET Core improperly handle web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core and ASP.NET Core application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core and ASP.NET Core web applications handle web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37650\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Private.Uri package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0, 4.3.1 | 4.3.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Nemanja Mijailovic](https://mijailovic.net/)\r\n\r\n### External Links\r\n\r\n[CVE-2019-0980](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0980)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/112","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability\" (#112)"},{"Id":"444026277","IsPullRequest":false,"CreatedAt":"2019-05-14T17:02:57","Actor":"blowdart","Number":"111","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core improperly process RegEx strings. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET application.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handle RegEx string processing.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37649\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Text.RegularExpressions package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Text.RegularExpressions.dll | 4.3.0 | 4.3.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0820](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0820)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/111","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability\" (#111)"},{"Id":"435015242","IsPullRequest":false,"CreatedAt":"2019-04-19T01:16:10","Actor":"MichaelSimons","Number":"110","RawContent":null,"Title":"New images for .NET Framework 4.8","State":"open","Body":"# New images for .NET Framework 4.8\r\n\r\nNew images have been released with support for [.NET Framework 4.8 runtime and SDK](https://devblogs.microsoft.com/dotnet/announcing-the-net-framework-4-8/).\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#271](https://github.com/Microsoft/dotnet-framework-docker/issues/271)\r\n\r\n## Details\r\n* Pull request: #270\r\n\r\nYou can access these new images with the following tags:\r\n* `mcr.microsoft.com/dotnet/framework/runtime:4.8`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.8`\r\n\r\nIn addition, the `latest` tag has been updated to refer to these new 4.8 images.\r\n\r\nCheck out the readme files for more information on the latest tags:\r\n* [Runtime](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.runtime.md)\r\n* [SDK](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.sdk.md)\r\n\r\nThe [3.5 SDK](https://github.com/Microsoft/dotnet-framework-docker/tree/master/3.5/sdk) images are intended to always contain the latest .NET Framework SDK and have also been updated to use the 4.8 SDK.","Url":"https://github.com/dotnet/announcements/issues/110","RelatedDescription":"Open issue \"New images for .NET Framework 4.8\" (#110)"},{"Id":"433297298","IsPullRequest":false,"CreatedAt":"2019-04-15T13:57:07","Actor":"MichaelSimons","Number":"109","RawContent":null,"Title":".NET Framework SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Framework SDK container images now contain the Visual Studio 2019 toolset\r\n.NET Framework SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add additional tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Framework SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Framework SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#269](https://github.com/Microsoft/dotnet-framework-docker/issues/269)\r\n\r\n## Details\r\nVisual Studio 2019 was released on April 2, 2019. We updated the .NET Framework SDK container images, on the same day, to include a new version of the .NET Framework SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag (e.g. mcr.microsoft.com/dotnet/framework/sdk:4.7.2-20190312-windowsservercore-ltsc2019).\r\n\r\nRelated pull request: [#252](https://github.com/Microsoft/dotnet-framework-docker/pull/252)","Url":"https://github.com/dotnet/announcements/issues/109","RelatedDescription":"Open issue \".NET Framework SDK container images now contain the Visual Studio 2019 toolset\" (#109)"},{"Id":"432735158","IsPullRequest":false,"CreatedAt":"2019-04-12T20:35:55","Actor":"KathleenDollard","Number":"108","RawContent":null,"Title":".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017","State":"open","Body":"# .NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\r\n\r\n.NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017. For example, 2.2.203 and 2.1.603 cause failures in Visual Studio 2017. To work on projects in Visual Studio 2017, use .NET Core SDK 2.2.1nn and 2.1.5nn, such as 2.2.106 and 2.1.506. You can install any combination of these SDKs side by side.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3124](https://github.com/dotnet/sdk/issues/3124)\r\n\r\n## Details\r\n\r\nYou can find the SDKs on you machine using the following at a command prompt:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2. Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nIf you downloaded the .NET Core SDK 2.2 between April 2 and April 12, 2019, the main [.NET downloads page](https://dotnet.microsoft.com/download/) included only 2.2.2nn. Starting April 12th, a new button marked \"Compatible with Visual Studio 2017\" is provided to target 2.2.1nn. If you downloaded 2.2 prior to this date, and you use Visual Studio 2017, install the compatible version.\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nThis problem most often occurs because you manually uninstall the 2.1.5nn version. Simply reinstall it from the [.NET Core 2.1 downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n## More information\r\n\r\nHere is the draft of an article we are preparing for .NET Core documentation:\r\n\r\n---\r\n\r\n## Solving Problems with .NET Core SDK Selection in Visual Studio\r\n\r\nYou may have .NET Core SDKs on your machine and still have problems with Visual Studio finding an appropriate one. This article explains why this happens and how you can fix your installation.\r\n\r\nWhen Visual Studio can't find an appropriate version of the .NET Core SDK, you'll receive an error message. This may appear in the Error pane as NETSDK1045:\r\n\r\n\"The current .NET SDK does not support targeting .NET Core 2...\"\r\n\r\nYou can check what .NET Core SDKs you have on your machine with the following command:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\nUnless you have a global.json file, when you use `dotnet` from the command line, the latest .NET Core SDK is used.\r\n\r\n> [TIP!] \r\n> Open a command prompt and try to build with `dotnet build`. If the command line build works, but Visual Studio doesn't suggestions in this article may help.\r\n\r\nThe last two digits of the .NET Core SDK version numbers are in the format are a patch number, which is represented by `nn` in this article because we will continue to service them to include the latest runtimes. To find out more, vist the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\n## Fixes for Common Problems\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2… Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.2.1nn. As an example, 2.2.106 would be a valid entry.\r\n\r\nIf you downloaded the .NET Core SDK 2.2 after April 2, 2019, version 2.2.2nn (such as 2.2.203) is listed first and is the highest version available. However, Visual Studio 2017 requires 2.2.1nn (such as 2.2.106). .NET Core SDK 2.2.2nn works with Visual Studio 2019. Visual Studio 2017 and Visual Studio 2019 can be installed side by side, but this requires both .NET Core SDK 2.2.1nn and .NET Core SDK 2.2.2nn to develop .NET Core 2.2 applications.\r\n\r\nTo download .NET Core SDK 2.2.2nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.1.5nn. As an example, 2.1.505 would be a valid entry. \r\n\r\nThis problem occurs of you manually uninstall the 2.1.5nn version.\r\n\r\nThe Visual Studio 2019 installation will not remove this file and Visual Studio 2017 will continue to work side by side.\r\n\r\nTo reinstall .NET Core SDK 2.1.5nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n### Visual Studio 2019 can't target .NET Core 3.0 Preview\r\n\r\nIf you receive this error message in Visual Studio 2019:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 3.0.100-preview... As an example, SDK 3.0.100-preview3-010431 would be a valid entry.\r\n\r\nTo install .NET Core SDK 3.0.1nn preview, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/3.0).\r\n\r\nIn Visual Studio, go to `Tools\\Options\\Projects and Solutions\\.NET Core` and check the box `Use Previews of the .NET Core SDK`.\r\n\r\n> [NOTE!]\r\n> This option will be moving to `Tools\\Options\\Environment` and renamed `Preview Features` in Visual Studio 2019 version 16.1 Preview 2.\r\n\r\nIf you are targeting .NET Core 3.0 preview, the [C# language version will be C# 8.0 Preview by default](https://docs.microsoft.com/en-us/visualstudio/releases/2019/release-notes#csharp-defaults) allowing you to use new C# features.\r\n\r\n## Understand the relationship between .NET Core SDKs and Visual Studio build tools\r\n\r\nVisual Studio has its own copies of tools like MSBuild, NuGet and the compilers. If you install the .NET Core workload, it also installs the .NET Core SDK which has versions of these tools and provides tasks and targets. These two versions are built from the same repositories, but target .NET Framework and .NET Core respectively. \r\n\r\nWhen you build a .NET Core project in Visual Studio, it uses Visual Studio's copy of MSBuild, but the tasks and targets are supplied from the selected version of the .NET Core SDK. \r\n\r\nWhen you upgrade the .NET Core SDK, you get new tasks and targets. These new tasks and targets may contain features that are not supported by older versions of MSBuild. Like all of the .NET Core SDK, MSBuild is backwards compatible. It is not forwards compatible.\r\n\r\nThis generally works well, but requires a guarantee that the tasks and targets work with the MSBuild version. To ensure this, each .NET Core SDK indicates an MSBuild version range that is used by Visual Studio to determine compatibility. Versions of the .NET Core SDK that have a higher MSBuild identifier than expected are ignored by Visual Studio. In the normal case, this simply means you use the tasks and targets that were installed with your version of Visual Studio.\r\n\r\nBecause of this, you may have many versions of the .NET Core SDK on your machine and Visual Studio still fail to find one it considers appropriate. This is compounded by a poor error message, which we cannot fully correct because it is from the old version of the .NET Core SDK on your machine. Confusion is also compounded by a complex non-linear release matrix that makes it difficult to predict the right .NET Core SDK to select. We are working to improve all this. \r\n\r\n## The Visual Studio / .NET Core SDK support matrix\r\n\r\nThe last two digits of the .NET Core SDK version number are a patch number, which are represented by a `nn` in this table. You can learn more about .NET Core SDK and .NET Core Runtime versioning at the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\nThe following table shows which Visual Studio versions and .NET Core SDKs are compatible and how they are acquired if you are working with Visual Studio. \r\n\r\n| .NET Core SDK | .NET Core Runtime | Compatible Visual Studio | MSBuild | Notes                                     |\r\n|---------------|-------------------|--------------------------|---------|-------------------------------------------|\r\n| 2.1.5nn       | 2.1               | 2017                     | 15      | Installed as part of VS 2017 version 15.9 |\r\n| 2.1.6nn       | 2.1               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 2.2.1nn       | 2.2               | 2017                     | 15      | Installed manually                        |\r\n| 2.2.2nn       | 2.2               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 3.0.1nn       | 3.0 (Preview)     | 2019                     | 16      | Installed manually                        |\r\n\r\nVisual Studio 2017 cannot work with .NET Core SDK 2.1.6nn or 2.2.2nn.\r\n\r\nTo find out more about removing older versions of the .NET Core Runtime and .NET Core SDK, visit the [How to remove the .NET Core Runtime and SDK page](https://docs.microsoft.com/en-us/dotnet/core/versions/remove-runtime-sdk-versions?tabs=macos).\r\n\r\nTo download the .NET Core SDK, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core).","Url":"https://github.com/dotnet/announcements/issues/108","RelatedDescription":"Open issue \".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\" (#108)"},{"Id":"432081093","IsPullRequest":false,"CreatedAt":"2019-04-11T15:16:43","Actor":"KathleenDollard","Number":"107","RawContent":null,"Title":"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below","State":"open","Body":"# Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\r\n\r\n.NET Core 3 takes the next step in the .NET Core tool strategy with local tools. As part of this process, starting in Preview 4 DotNetCliToolReference tools will be restricted to targeting .NET Core 2.2 and below. DotNetCliToolReference tools can be used in projects targeting .NET Core 3.0, but the tools themselves should target .NET Core 2.2 or below.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3115](https://github.com/dotnet/sdk/issues/3115)\r\n\r\n## Details\r\n\r\nThe suggested approach going forward is to to use [.NET Core Local Tools](https://aka.ms/local-tools) when you want a tool that is specific to a project or repository. At the same time we are removing the need to access local tools by the verbose `dotnet tool run <toolname>` that was present in earlier previews. You can now access local tools via `dotnet <toolname>`.\r\n\r\nDotNetCliToolReference tools have a flaw in how their dependencies are restored which can create [difficult to diagnose bugs when running these tools](https://github.com/NuGet/Home/issues/5067). This issue would occur much more frequently if targeting .NET Core 3.0 was allowed. Restricting tools to target only .NET Core 2.2 and below means existing scenarios to continue to work (as well as they previously did), regardless of the framework version targeted by the project or the current .NET Core SDK. \r\n\r\nThe new .NET Core tool strategy avoids this flaw in restore strategy and offers other benefits, like the ability to author one type of tool and install it in different ways depending on project and user needs.\r\n\r\nWe look forward to your feedback on .NET Core Local Tools, and on challenges you face moving away from DotNetCliToolReference tools. \r\n\r\n[dotnet/sdk #3057](https://github.com/dotnet/sdk/pull/3057)","Url":"https://github.com/dotnet/announcements/issues/107","RelatedDescription":"Open issue \"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\" (#107)"},{"Id":"431012407","IsPullRequest":false,"CreatedAt":"2019-04-09T14:51:18","Actor":"MichaelSimons","Number":"106","RawContent":null,"Title":".NET Core SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Core SDK container images now contain the Visual Studio 2019 toolset\r\n\r\n.NET Core SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add *additional* tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Core SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Core SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1042](https://github.com/dotnet/dotnet-docker/issues/1042)\r\n\r\n## Details\r\n\r\n[Visual Studio 2019](https://devblogs.microsoft.com/visualstudio/visual-studio-2019-code-faster-work-smarter-create-the-future/) was released on April 2, 2019. We updated the .NET Core SDK container images, on the same day, to include a new version of the .NET Core SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag:\r\n\r\n* 2.1: `mcr.microsoft.com/dotnet/core/sdk:2.1.505`\r\n* 2.2: `mcr.microsoft.com/dotnet/core/sdk:2.2.105`\r\n\r\nDetails:\r\n\r\n* [dotnet/dotnet-docker #1029](https://github.com/dotnet/dotnet-docker/pull/1029)\r\n* [2.1 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.602-SDK/2.1.602-SDK.md)\r\n* [2.2 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.202-SDK/2.2.202-SDK.md)\r\n\r\n## Known Breaking Changes for SDK images (VS 2017 to VS 2019 upgrade)\r\n\r\nThe following issues and breaks have been discovered.\r\n \r\n### Test Log File Name Change\r\n\r\nA change was introduced to the `dotnet test` command when a user-defined log file name is specified.  In the previous version the resulting log file would be named exactly as specified.  In the current version, the log file is named with a timestamp suffix automatically added to the user-defined name.  \r\n\r\nDetails:\r\n* [Microsoft/vstest #1603](https://github.com/Microsoft/vstest/issues/1603) \r\n* [Microsoft/vstest#1876](https://github.com/Microsoft/vstest/issues/1876)","Url":"https://github.com/dotnet/announcements/issues/106","RelatedDescription":"Open issue \".NET Core SDK container images now contain the Visual Studio 2019 toolset\" (#106)"},{"Id":"431003701","IsPullRequest":false,"CreatedAt":"2019-04-09T14:35:39","Actor":"MichaelSimons","Number":"105","RawContent":null,"Title":"Windows Server, version 1709 no longer Supported by .NET Framework","State":"open","Body":"# Windows Server, version 1709 no longer Supported by .NET Framework\r\n\r\nWindows Server, version 1709 is no longer supported. As a result, this version of Windows is no longer supported by the .NET Team and we will no longer produce .NET Framework container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Framework Docker images](https://hub.docker.com/_/microsoft-dotnet-framework)\r\n* [.NET Framework Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-framework)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-framework-docker #259](https://github.com/Microsoft/dotnet-framework-docker/issues/259)\r\n\r\n## Details\r\n\r\nDocker tags that contain `windowsservercore-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Windows Server and .NET Framework.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `4.7.1`, and  `4.7.2`. These are tags that are supported on multiple operating systems and versions, and do  not contain the operating system in them. As a result of no longer producing new images for Windows Server, version 1709, manifest tags no longer include entries for Windows 10, version 1709, and Windows Server,version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.17134-based image is incompatible with a 10.0.16299 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Windows Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Windows Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/framework/runtime:4.7.2-windowsservercore-1709` or `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-windowsservercore-1709`.","Url":"https://github.com/dotnet/announcements/issues/105","RelatedDescription":"Open issue \"Windows Server, version 1709 no longer Supported by .NET Framework\" (#105)"},{"Id":"430998341","IsPullRequest":false,"CreatedAt":"2019-04-09T14:25:57","Actor":"MichaelSimons","Number":"104","RawContent":null,"Title":"Nano Server 2016 and 1709 no longer Supported by .NET Core","State":"open","Body":"# Nano Server 2016 and 1709 no longer Supported by .NET Core\r\n\r\nNano Server 2016 and Nano Server, version 1709 are no longer supported. As a result, these versions of Windows are no longer supported by the .NET Team and we will no longer produce .NET Core container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Core Docker images](https://hub.docker.com/_/microsoft-dotnet-core)\r\n* [.NET Core Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-core)\r\n* [Products Reaching End of Support for 2018](https://support.microsoft.com/en-us/help/4043450/products-reaching-end-of-support-for-2018)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\nWe previously announced Nano Server 2016 going out of support in [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/). That post is still accurate.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1041](https://github.com/dotnet/dotnet-docker/issues/1041)\r\n\r\n## Details\r\n\r\nDocker tags that contain `nanoserver-sac2016` and `nanoserver-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Nano Server and .NET Core.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `2.1`, `2.1-sdk`, `2.2.1-runtime`. These are tags that are supported on multiple operating systems, and do not contain the operating system in them. As a result of no longer producing new images for Nano Server 2016 and Nano Server, version 1709, manifest tags no longer include entries for Nano Server 2016, Windows Server 2016, Windows 10, version 1607, Windows 10, version 1709, and Windows Server, version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.16299-based image is incompatible with a 10.0.14393 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Nano Server 2016 or Nano Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Nano Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-sac2016` or `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-1709`.\r\n\r\n### Nano Server Support\r\n\r\n.NET Core is supported on Nano Server, version 1803 and later. \r\n\r\n.NET Core 2.x and 3.0 images are available for all supported versions of Nano Server, version 1803 and later. This means that 2.x and 3.0 manifest tags can be used on Windows 10, version 1803+, and Windows Server, version 1803+. You can also use non-manifest tags for those versions, too, such as `2.2-nanoserver-1809`.\r\n\r\n.NET Core 1.x images are available for Nano Server, version 1809 and later. This means that 1.x manifest tags can be used on Windows 10, version 1809+, Windows Server, version 1809+ and Windows Server 2019. You can also use non-manifest tags for those versions, too, such as `1.1-nanoserver-1809` tag.","Url":"https://github.com/dotnet/announcements/issues/104","RelatedDescription":"Open issue \"Nano Server 2016 and 1709 no longer Supported by .NET Core\" (#104)"},{"Id":"420117627","IsPullRequest":false,"CreatedAt":"2019-03-12T17:35:16","Actor":"vivmishra","Number":"103","RawContent":null,"Title":"March 2019 .NET Updates","State":"open","Body":"# March 2019 .NET Updates\r\n\r\nThe following .NET updates were released in March 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework March 2019 Update - March 19, 2019](https://devblogs.microsoft.com/dotnet/net-framework-march-2019-update/)\r\n* [.NET Framework April 2, 2019 Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - April 2, 2019](https://devblogs.microsoft.com/dotnet/net-framework-april-2-2019-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.15 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.15/1.0.15.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.12/1.1.12.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.9 and .NET Core SDK 2.1.505 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.9/2.1.9.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.3 and .NET Core SDK 2.2.105 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.3/2.2.3.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2432](https://github.com/dotnet/core/issues/2432)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/103","RelatedDescription":"Open issue \"March 2019 .NET Updates\" (#103)"},{"Id":"415363751","IsPullRequest":false,"CreatedAt":"2019-02-27T22:49:51","Actor":"leecow","Number":"102","RawContent":null,"Title":"SDK Installers will remove previous patch versions","State":"open","Body":"The SDK Installers for Windows will upgrade patch versions in place within the same feature band. This will reduce the number of SDKs that are installed on programmer machines.\r\n\r\nFeature bands of the SDK are defined like 3.0.1nn. [Find out more about SDK version numbers](https://docs.microsoft.com/dotnet/core/versions/#versioning-details).\r\n\r\nThis means when .NET Core SDK 3.0.101 becomes available and is installed, .NET Core SDK 3.0.100 will be removed from the machine if it exists. When .NET Core SDK 3.0.200 becomes available and is installed on the same machine, .NET Core SDK versions like 3.0.101 will not be removed but stay side by side with 3.0.200.\r\n\r\nThis approach supports use of `global.json` which will roll forward across patch versions, but not feature bands of the SDK. Thus, upgrading via the SDK installer will not result in errors due to a missing SDK. Feature bands also align with side by side Visual Studio installations for those users that install SDKs for Visual Studio use. For example, Visual Studio 15.9 uses .NET Core SDK 2.2.500 but does not support .NET Core SDK 2.2.600.\r\n\r\nFind out how to [remove other .NET Core SDK versions here.](https://docs.microsoft.com/dotnet/core/versions/remove-runtime-sdk-versions).","Url":"https://github.com/dotnet/announcements/issues/102","RelatedDescription":"Open issue \"SDK Installers will remove previous patch versions\" (#102)"},{"Id":"410971363","IsPullRequest":false,"CreatedAt":"2019-02-15T22:24:40","Actor":"richlander","Number":"101","RawContent":null,"Title":"Publishing .NET Core images to Microsoft Container Registry (MCR)","State":"open","Body":"# Publishing .NET Core images to Microsoft Container Registry (MCR)\r\n\r\nMicrosoft teams are now publishing container images to the [Microsoft Container Registry](https://azure.microsoft.com/en-us/blog/microsoft-syndicates-container-catalog/). There are two primary reasons for this change:\r\n\r\n* Syndicate Microsoft-provided container images to multiple registries, like Docker Hub and Red Hat.\r\n* Use Microsoft Azure as a global CDN for delivering Microsoft-provided container images.\r\n\r\nYou will use and see MCR as a storage back-end for Microsoft images. The primary way you learn about Microsoft container images and tags will be through a registry, which for most users will continue to be Docker Hub. Most of the experience you've had browsing for .NET Core container images will continue unchanged with this new model. The Docker Hub URLs you've used for Microsoft repos will continue to work, and forward to updated locations on Docker Hub. Existing Docker Hub will images will be maintained as-is.\r\n\r\nSee [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/) for the most updated information on our use of MCR.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #935](https://github.com/dotnet/dotnet-docker/issues/935)\r\n\r\n## Starting with .NET Core nightly repo\r\n\r\nOn the .NET team, we started our [transition to MCR](https://github.com/dotnet/dotnet-docker/issues/745) with the .NET Core \"nightly\" repo. [dotnet-nightly](dockerhub.com/r/microsoft/dotnet-nightly) is now hosted on MCR and syndicated to Docker Hub. We started with the nightly repo in order to discover and fix any challenges we found with this new model before we move our higher-traffic primary container repository.\r\n\r\nWe will start publishing [dotnet](dockerhub.com/r/microsoft/dotnet) to MCR a bit later, in either February or March. This issue will be updated when that happens.\r\n\r\n## Repo Split\r\n\r\nThe [.NET Core repo](https://hub.docker.com/r/microsoft/dotnet) currently includes 4 major categories of tags: \r\n\r\n* `sdk`\r\n* `aspnetcore-runtime`\r\n* `runtime` \r\n* `runtime-deps`\r\n\r\nProviding all of the tags in one place has helped with discoverability but made for a repo with an enormous README that can be challenging to navigate and consume. It is large enough that we exceeded Docker Hub README limits and had to artificially make it smaller.\r\n\r\nGoing forward, we will provide a repo for each of the tag categories listed above. We'll also provide a \"product repo\" that will hierarchicaly group all of our repos together. This will satisfy discoverability needs so that it will be easy to find the tags you want.\r\n\r\nYou can already see this experience with [microsoft-dotnet-core-nightly](https://hub.docker.com/_/microsoft-dotnet-core-nightly). There are now multiple repos for our nightly builds:\r\n\r\n* [.NET Core Nightly product repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly)\r\n* [.NET Core SDK Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-sdk/)\r\n* [.NET Core ASP.NET Core Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-aspnet/)\r\n* [.NET Core Runtime Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime/)\r\n* [.NET Core Runtime-deps Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime-deps/)\r\n\r\nThe same split will exist for the non-nightly stable repo (currently hosted at  [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet)) when we start publishing it to MCR and syndicating it back to DockerHub.\r\n\r\n## Changes to registry URL\r\n\r\nThe biggest change is that your Dockerfiles need to be updated to point to the MCR registry in order get access to new .NET Core container tags. The same change is required for scripts or human operations that pull images via `docker pull`.\r\n\r\nThe following example shows the registry path, repo and tag for the .NET Core 2.2 \"Nightly\" SDK on MCR:\r\n\r\n```console\r\nmcr.microsoft.com/dotnet/core-nightly/sdk:2.2\r\n```\r\n\r\nAs comparison, the following repo and tag have been used to date for the .NET Core 2.2 \"Nightly\" SDK on Docker Hub:\r\n\r\n```console\r\nmicrosoft/dotnet-nightly:2.2-sdk\r\n```\r\n\r\nThe new repo URL is provided at each of the news repos. For example, the new .NET Core SDK \"nightly\" repo provides a box on the right where you can copy and paste the correct MCR-based repo syntax that you can use for `docker pull` or in `FROM` statements in your Dockerfiles.\r\n\r\n![image](https://user-images.githubusercontent.com/2608468/52811702-95c5eb80-304a-11e9-8de8-e6ea1f4b4d75.png)\r\n\r\n## Servicing existing Docker Hub tags\r\n\r\nWe will continue to service existing non-version-specific or floating tags on Docker Hub while the associated .NET Core version is supported. For example the `microsoft/dotnet:2.1-sdk` tag is a floating tag that will continue to be serviced for the lifetime of .NET Core 2.1. You can continue using floating tags without issue.\r\n\r\nIf you use non-floating tags, like `microsoft/dotnet:2.1.504-sdk-alpine`, then you will need to update your Dockerfile to use a new non-floating tag. No new non-floating tags will be published to `microsoft/dotnet` and `microsoft/dotnet-nightly` after we fully transition to MCR.\r\n\r\n.NET Core 3.0 Preview 3 and later will only be made available on MCR.\r\n\r\n## Microsoft is a Verified Publisher\r\n\r\nUntil now, Microsoft-provided container images were considered \"community images\". As part of this change, we are re-classifying Microsoft as a \"verified publisher\" on Docker Hub. This designation should make it clearer that .NET and other Microsoft-provided images are coming from a verified source. There clearly was that expectation previously, but Docker is now making that clearer in the Docker Hub pages they host for Microsoft.\r\n\r\nWe will provide official vulnerability scanning Microsoft-provided images as a second phase of this transition.","Url":"https://github.com/dotnet/announcements/issues/101","RelatedDescription":"Open issue \"Publishing .NET Core images to Microsoft Container Registry (MCR)\" (#101)"},{"Id":"410784442","IsPullRequest":false,"CreatedAt":"2019-02-15T14:06:29","Actor":"TaraOverfield","Number":"100","RawContent":null,"Title":"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809","State":"open","Body":"<strong><em>Final Update 2/19/19 @1:30 PM (PST)</em></strong><em>: This </em><em>advisory is now resolved with no action needed from Microsoft Customers. The issue was not applicable to any valid or supported configuration. There is no consequence for .NET 4.8 Preview customers. </em>\r\n\r\n<em>We strive to share timely information to protect our customer’s productivity, in this case, our finding was thankfully of no consequence for customers on supported configurations.</em>\r\n\r\n<del><em><strong>Update 2/15/19 @3:35 PM (PST)</strong></em><em>: As we continue our investigation, we are finding the issue to be restricted to a limited and isolated set of test-only systems that are using non-official versions of the .NET 4.8 Preview. As of 2/15/19 around 12:00 pm (PST) we further tightened our delivery mechanisms to ensure that the February .NET security updates are only deployed to their expected target systems.</em></del>\r\n\r\n<del><span>The </span><a href=\"https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/\" rel=\"nofollow\">February 2019 Security and Quality Rollup for Windows 10 update 1809</a><span> was released earlier this week. We have received multiple customer reports of issues when a customer has installed .NET Framework 4.8 Preview then installed the February security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>.</span> These reports are specific to only to the scenario when a customer has installed both .NET Framework 4.8 Preview and the February security update.</del>\r\n\r\n<del>We are actively working on investigating and addressing this issue. If you installed the February 2019 security update and have not seen any negative behavior, we recommend that you leave your system as-is but closely monitor it and ensure that you apply upcoming .NET Framework updates.</del>\r\n\r\n<del>We will continue to update this <a href=\"https://github.com/dotnet/announcements/issues/100\" rel=\"nofollow\">post</a> as we have new information.</del>\r\n<h2><del>Guidance</del></h2>\r\n<del>We are working on guidance and will update this post and as we have new information.</del>\r\n<h2><del>Workaround</del></h2>\r\n<del>There are no known workarounds at this time.</del>\r\n<h2><del>Symptoms</del></h2>\r\n<del>After installing .NET Framework 4.8 Preview then the February 2019 security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>, Visual Studios will crash with this error message:</del>\r\n<p class=\"xxxxxmsonormal\"><del><b><span style=\"font-size: 10.5pt;font-family: 'Segoe UI',sans-serif;color: black\">\"Exception has been thrown by the target of an invocation.\"</span></b></del></p>","Url":"https://github.com/dotnet/announcements/issues/100","RelatedDescription":"Open issue \"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809\" (#100)"},{"Id":"410455095","IsPullRequest":false,"CreatedAt":"2019-02-14T19:28:25","Actor":"richlander","Number":"99","RawContent":null,"Title":"Supporting new Alpine versions (for containers)","State":"open","Body":"# Supporting new Alpine versions (for containers)\r\n\r\n[Alpine 3.9](https://twitter.com/alpinelinux/status/1090416212822110214) was recently announced. Congratulations, Alpine team! On the .NET team, we are committed to supporting new Alpine versions quickly, and also need to define a policy for older versions. This policy only applies for the container images that we publish.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #933](https://github.com/dotnet/dotnet-docker/issues/933)\r\n\r\n## Policy\r\n\r\nWe intend to establish the following policy for supporting Alpine with .NET Core container images:\r\n\r\n* Support new Alpine versions within 60 days of release (hopefully much less).\r\n* Support n-1 Alpine versions for 3 months after we support a new Alpine version.\r\n\r\nNote: The [.NET Core support policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md) may be broader. This policy is specific to the container images we produce.\r\n\r\n## Plans\r\n\r\nWe're in the process of [fixing issues required to support Alpine 3.9](https://github.com/dotnet/dotnet-docker/issues/921). We expect that these issues will be resolved in February and that we'll be able to provide support for Alpine 3.9 in March.\r\n\r\nWe will produce Alpine 3.9 images for .NET Core 2.1, 2.2 and 3.0. Assuming we publish 3.9 images in March, we'll stop producing and supporting Alpine 3.7 and 3.8 images after June (2019).\r\n\r\n## Using Alpine-based .NET Core images\r\n\r\nWe produce a variety of Alpine-based images. You can either depend on a specific Alpine version, like with `microsoft/dotnet:2.2-sdk-alpine3.8` or opt to use the latest Alpine image we have to offer, like with `microsoft/dotnet:2.2-sdk-alpine`. Either are good choices. It is just a question of whether you want to make a conscious decision to move to later Alpine releases.\r\n\r\n## Support for ARM32?\r\n\r\nWe produce Alpine images for x64 (and ARM64, shortly). The [Alpine 3.9 announcement](https://twitter.com/alpinelinux/status/1090416212822110214) made mention of support for ARM32v7. We would like to enable .NET Core [Alpine-based images on ARM32](https://github.com/gliderlabs/docker-alpine/issues/463#issuecomment-460530395). We are patiently waiting for that to happen. If that's important to you, you should comment on that thread.","Url":"https://github.com/dotnet/announcements/issues/99","RelatedDescription":"Open issue \"Supporting new Alpine versions (for containers)\" (#99)"},{"Id":"409840927","IsPullRequest":false,"CreatedAt":"2019-02-13T14:48:21","Actor":"TaraOverfield","Number":"98","RawContent":null,"Title":"February 2019 .NET Updates","State":"open","Body":"# February 2019 .NET Updates\r\nThe following .NET updates were released in February 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework February 2019 Security and Quality Rollup - February 12, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/)\r\n* [.NET Framework February 2019 Preview of Quality Rollup - February 19, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/19/net-framework-february-2019-preview-of-quality-rollup/)\r\n\r\n## .NET Support Policies\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/98","RelatedDescription":"Open issue \"February 2019 .NET Updates\" (#98)"},{"Id":"409436643","IsPullRequest":false,"CreatedAt":"2019-02-12T18:21:22","Actor":"leecow","Number":"97","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability","State":"open","Body":"## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a domain spoofing vulnerability in .NET Framework and .NET Core which causes the meaning of a URI to change when International Domain Name encoding is applied. An attacker who successfully exploited the vulnerability could redirect a URI.\r\n\r\nThe security update addresses the vulnerability by disallowing certain Unicode characters from the URI.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/35265\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core 1.0 or 1.1 based application that uses the [System.Private.Uri](https://www.nuget.org/packages/System.Private.Uri/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0 | 4.3.1\r\n\r\nAny .NET Core 2.1 or 2.2 based application that uses the [Microsoft.NETCore.App](https://www.nuget.org/packages/Microsoft.NETCore.App) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6, 2.1.7, 2.2.0, 2.2.1 | 2.1.8, 2.2.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Private.Uri` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.2.1, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Private.Uri/4.3.0` is a reference to version 4.3.0 of `System.Private.Uri`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.8 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.2 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Private.Uri` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.Private.Uri` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0657](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0657)\r\n\r\n### Revisions\r\n\r\nV1.0 (February 12, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-02-08_\r\n","Url":"https://github.com/dotnet/announcements/issues/97","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability\" (#97)"},{"Id":"397026248","IsPullRequest":false,"CreatedAt":"2019-01-08T18:17:45","Actor":"leecow","Number":"96","RawContent":null,"Title":"January 2019 .NET Updates","State":"open","Body":"# January 2019 .NET Updates\r\n\r\nThe following .NET updates were released in January 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework January 2019 Preview of Quality Rollup - January 15, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/15/net-framework-january-2019-preview-of-quality-rollup/)\r\n* [.NET Framework January 2019 Security and Quality Rollup - January 8, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/08/net-framework-january-2019-security-and-quality-rollup/)\r\n* [.NET Framework January 22, 2018 Preview of Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - January 22, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/22/net-framework-january-22-2018-preview-of-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.7 and .NET Core SDK 2.1.503 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.7/2.1.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.1 and .NET Core SDK 2.2.102 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.1/2.2.1.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2210](https://github.com/dotnet/core/issues/2210)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/96","RelatedDescription":"Open issue \"January 2019 .NET Updates\" (#96)"},{"Id":"397020176","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:27","Actor":"blowdart","Number":"95","RawContent":null,"Title":" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a tampering vulnerability exists when .NET Core improperly handles specially crafted files. An attacker who successfully exploited this vulnerability could write arbitrary files and directories to certain locations on a vulnerable system. However, an attacker would have limited control over the destination of the files and directories.\r\n\r\nTo exploit the vulnerability, an attacker must send a specially crafted file to a vulnerable system\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core handles these files.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34427\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nIf your application does not extract ZIP compressed files it is unaffected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.IO.Compression.ZipFile](https://www.nuget.org/packages/System.IO.Compression.ZipFile/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.IO.Compression.ZipFile) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n`System.IO.Compression.ZipFile` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\nFinally, you must restart your applications once an updated runtime or SDK is installed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Danny Grander](https://twitter.com/grander) of [Snyk](https://snyk.io/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-8416](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8416)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected pacakge table.\r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/95","RelatedDescription":"Open issue \" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\" (#95)"},{"Id":"397020142","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:23","Actor":"blowdart","Number":"94","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of an information disclosure vulnerability exists in .NET Framework and .NET Core which allows bypassing Cross-origin Resource Sharing (CORS) configurations. An attacker who successfully exploited the vulnerability could retrieve content, that is normally restricted, from a web application.\r\n\r\nThe security update addresses the vulnerability by enforcing CORS configuration to prevent its bypass.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34428\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.2.0 | 2.2.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Net.Http` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `SSystem.Net.Http/4.3.0` is a reference to version 4.3.0 of `System.Net.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Net.Http` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0545](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0545)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected package table. \r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n","Url":"https://github.com/dotnet/announcements/issues/94","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\" (#94)"},{"Id":"390948658","IsPullRequest":false,"CreatedAt":"2018-12-14T03:22:58","Actor":"wu-yafeng","Number":"93","RawContent":null,"Title":"Docker image with tag '2.2-aspnetcore-runtime' is not compatible","State":"closed","Body":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]","Url":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Closed issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93)"},{"Id":"390193072","IsPullRequest":false,"CreatedAt":"2018-12-12T12:56:53","Actor":"bilalmalik777","Number":"92","RawContent":null,"Title":".net core Console","State":"closed","Body":"I am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n    networks:\r\n     - app-network\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\nIf the detail is not enough or you do not get my point, you can share your confusion in comment","Url":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Closed issue \".net core Console\" (#92)"},{"Id":"380346599","IsPullRequest":false,"CreatedAt":"2018-11-13T17:44:44","Actor":"leecow","Number":"91","RawContent":null,"Title":"November 2018 .NET Updates","State":"open","Body":"# November 2018 .NET Updates\r\n\r\nThe following .NET updates were released in November 2018. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core November 2018 (2.1.6 and SDK 2.1.500) Update release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.6/2.1.6.md)\r\n\r\nA [discussion issue](https://github.com/dotnet/core/issues/2053) is available for questions or feedback about this release.\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [October 2018](https://github.com/dotnet/announcements/issues/89)\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/91","RelatedDescription":"Open issue \"November 2018 .NET Updates\" (#91)"},{"Id":"375230004","IsPullRequest":false,"CreatedAt":"2018-10-29T21:45:27","Actor":"terrajobst","Number":"90","RawContent":null,"Title":"The future of JSON in .NET Core 3.0","State":"open","Body":"JSON has become an essential part of virtually all modern .NET applications and in many cases even surpassed the usage of XML. However, .NET hasn't had a (great) built-in way to deal with JSON. Instead we've relied on [Json.NET] which continues to serve the .NET ecosystem well.\r\n\r\n[Json.NET]: https://www.newtonsoft.com/json\r\n\r\nMoving forward, we plan on making some changes to our JSON support:\r\n\r\n* **We need high-performance JSON APIs**. We need a new set of JSON APIs that are highly tuned for performance by using `Span<T>` and allows for processing UTF-8 directly without having to transcode to UTF-16 `string` instances. Both aspects are critical for our web server Kestrel, where throughput is a key requirement.\r\n\r\n* **Remove dependency from ASP.NET Core to Json.NET**. Today, ASP.NET Core has a dependency on Json.NET. While this provides a tight integration between ASP.NET Core and Json.NET, it also means that application developers cannot freely choose which JSON library they are using. This is also problematic for customers of Json.NET as the version is dictated by the underlying platform. However, Json.NET is frequently updated and application developers often want to -- or even have to -- use a specific version. Thus, we want to remove the dependency from ASP.NET Core 3.0 to Json.NET so that customers can choose which version to use, without fearing they might accidentally break the underlying platform. In addition, this makes it also possible to plug-in an entirely different JSON library.\r\n\r\n* **Provide an ASP.NET Core integration package for Json.NET**. Json.NET has basically become the Swiss Army knife of JSON processing in .NET. It provides many options and facilities that allow customers to handle their JSON needs with ease. We don't want to compromise on the Json.NET support customers are getting today, for example, the ability to configure the JSON serialization via the `AddJsonOptions` extension method. Thus, we want to provide the Json.NET integration as a NuGet package that developers can optionally install so they get all the bells and whistles they get from Json.NET today. The other part of this work item is to ensure we have the right extension points so that other parties can provide similar integration packages for their JSON library of choice.\r\n\r\nBelow are more details around this plan.\r\n\r\n## The need for high-performance JSON APIs\r\n\r\nThe requirements for the .NET stack have changed a bit since the arrival of .NET Core. Historically, .NET has valued usability and convenience. With .NET Core, we've added a focus on performance, and we've made significant investments to serve high performance needs. And the [improvements we made][techempower] in the popular TechEmpower benchmark are a testament to that.\r\n\r\n[techempower]: https://www.techempower.com/blog/2016/11/16/framework-benchmarks-round-13/\r\n\r\nWith .NET Core 2.1, we've added a brand new primitive called [Span\\<T>][span-msdn] that allows us to represent native memory and arrays in a uniform way. With this type, we've also added a set of parsing and encoding APIs that are much more memory efficient without having to resort to unsafe code.\r\n\r\n[span-msdn]: https://msdn.microsoft.com/en-us/magazine/mt814808.aspx\r\n\r\nPart of the work of minimizing allocations is to avoid having to transcode UTF-8 payloads into UTF-16 strings, purely for parsing reasons. Currently, Json.NET is implemented by reading UTF-16. We need the ability to read (and write) JSON documents directly in UTF-8 because most network protocols (including HTTP) use UTF-8.\r\n\r\nDuring .NET Core 2.1 we've learned that updating our existing APIs to leverage `Span<T>` has limits. While we did add a bunch of overloads that accept spans, we also had to produce brand new APIs that are designed around minimizing allocations and dealing with buffers, which we exposed in `System.Buffers` namespaces. And with `System.IO.Pipelines` we've also added a programming model that enables developers to share buffers without having to deal with lifetime issues.\r\n\r\nBased on these experiences we believe in order to support JSON parsing, we'll need to expose a new set of JSON APIs that are specifically geared for high-performance scenarios.\r\n\r\nYou might wonder why we can't just update Json.NET to include support for parsing JSON using `Span<T>`? Well, James Newton-King -- the author of Json.NET -- has the following to say about that:\r\n\r\n> Json.NET was created over 10 years ago, and since then it has added a wide range of features aimed to help developers work with JSON in .NET. In that time Json.NET has also become far and away NuGet's most depended on and downloaded package, and is the go-to library for JSON support in .NET. Unfortunately, Json.NET's wealth of features and popularity works against making major changes to it. Supporting new technologies like `Span<T>` would require fundamental breaking changes to the library and would disrupt existing applications and libraries that depend on it.\r\n>\r\n> Going forward Json.NET will continue to be worked on and invested in, both addressing known issues today and supporting new platforms in the future. Json.NET has always existed alongside other JSON libraries for .NET, and there will be nothing to prevent you using one or more together, depending on whether you need the performance of the new JSON APIs or the large feature set of Json.NET.\r\n\r\n## Move Json.NET integration into a separate NuGet package\r\n\r\nToday, you cannot use ASP.NET Core without Json.NET because it is a dependency of ASP.NET Core itself. Over the years, we've received feedback that the dependency can conflict with other libraries that have their own dependency on a different version of Json.NET. In the past, we've considered addressing this issue by using a private copy of Json.NET in ASP.NET. However, this would create problems when developers want to configure Json.NET (for instance, in order to control how the serializer behaves when formatting JSON objects).\r\n\r\nMoving forward we'd like to:\r\n\r\n1. Replace the internal usage of Json.NET in ASP.NET Core by the new platform-provided JSON APIs.\r\n\r\n2. Factor the public facing usage of Json.NET into an optional integration package that can be acquired from NuGet.\r\n\r\nSo the existing integration between ASP.NET Core and Json.NET will continue to be supported, but will be moving out of the platform and into a separate package. However, since the integration is then designed to sit on top of the platform, it will also allow customers to update Json.NET to later versions.\r\n\r\nFurthermore, customers who need more performance can also choose to use the new JSON APIs, at the expense of the rich feature set that Json.NET offers.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/33115.","Url":"https://github.com/dotnet/announcements/issues/90","RelatedDescription":"Open issue \"The future of JSON in .NET Core 3.0\" (#90)"}],"ResultType":"GitHubIssue"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1169655923788242945","CreatedAt":"2019-09-05T16:57:58+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demos and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":22,"FavoriteCount":4,"RawContent":null},{"Id":"1169325641541357568","CreatedAt":"2019-09-04T19:05:32+00:00","UserScreenname":"dotnet","Text":"Announcing .NET Core 3.0 Preview 9 https://t.co/eOTg9Nc4Su","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":409,"FavoriteCount":212,"RawContent":null},{"Id":"1169325512033878016","CreatedAt":"2019-09-04T19:05:01+00:00","UserScreenname":"dotnet","Text":"https://t.co/iOiV9qNspl Core and Blazor updates in .NET Core 3.0 Preview 9 https://t.co/esDON00GK9","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":150,"FavoriteCount":84,"RawContent":null},{"Id":"1169016977245032449","CreatedAt":"2019-09-03T22:39:01+00:00","UserScreenname":"dotnet","Text":"Do you care about performance or low-level stuff like SIMD and popcnt? Then this post is for you. https://t.co/rIpKfNwSeu","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":62,"FavoriteCount":24,"RawContent":null},{"Id":"1168996825828855810","CreatedAt":"2019-09-03T21:18:56+00:00","UserScreenname":"dotnet","Text":".@BethMassi get's us revved up and raring to go in the latest .NET Blog post that gives us a #dotNETConf conference… https://t.co/78ndo1xgQJ","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":28,"FavoriteCount":10,"RawContent":null},{"Id":"1168980895031812096","CreatedAt":"2019-09-03T20:15:38+00:00","UserScreenname":"dotnet","Text":"#dotNETConf is coming to a town near you...\n\nWe're not only streaming live, but we're partnering with organizers ar… https://t.co/iON1XQF7Oo","Source":"<a href=\"https://ads-api.twitter.com\" rel=\"nofollow\">Twitter Ads Composer</a>","RetweetCount":1194,"FavoriteCount":176,"RawContent":null},{"Id":"1167169777414168576","CreatedAt":"2019-08-29T20:18:54+00:00","UserScreenname":"dotnet","Text":".NET Conference 2019\nDiscover The World Of .NET\nSeptember 23-25\nhttps://t.co/FkW2WpZcMn https://t.co/6bQPcWJFdj","Source":"<a href=\"https://ads-api.twitter.com\" rel=\"nofollow\">Twitter Ads Composer</a>","RetweetCount":1832,"FavoriteCount":281,"RawContent":null},{"Id":"1166751382612787201","CreatedAt":"2019-08-28T16:36:21+00:00","UserScreenname":"dotnet","Text":"How the .NET Team uses @AzureDevOps Pipelines to produce @docker Images https://t.co/SXvj2qewdE","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":127,"FavoriteCount":58,"RawContent":null},{"Id":"1166709015444959233","CreatedAt":"2019-08-28T13:48:00+00:00","UserScreenname":"dotnet","Text":"With the release of .NET Core 3 on the way, we've been putting together tons of great content to get you ready.\n\nCh… https://t.co/SkVCaSDA1b","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":326,"FavoriteCount":147,"RawContent":null},{"Id":"1166481079546478592","CreatedAt":"2019-08-27T22:42:16+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demos and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":16,"FavoriteCount":0,"RawContent":null}]}},"RunOn":"2019-09-07T05:30:38.1455792Z","RunDurationInMilliseconds":15486}