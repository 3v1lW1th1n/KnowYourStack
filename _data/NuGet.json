{"Data":{"Blog":{"FeedItems":[{"Title":"Deprecating TLS 1.0 and 1.1 on NuGet.org","PublishedOn":"2019-11-15T18:58:33+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"At Microsoft, using the latest and secure encryption techniques is very important to us to ensure the security and privacy of our customers. TLS 1.0 and TLS 1.1, released in 1999 and 2006...","Href":"https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org/","RawContent":null},{"Title":"Deprecating packages on nuget.org","PublishedOn":"2019-09-30T18:29:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are excited to announce that nuget.org now supports package deprecation. This has been a long standing ask that will help the ecosystem use supported packages. As a package publisher on nuget.org,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-packages-on-nuget-org/","RawContent":null},{"Title":"New and improved NuGet Search is here!","PublishedOn":"2019-08-23T03:31:26+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"It’s been a long time coming, and today we are excited to announce the new and improved search on NuGet.org leveraging Azure Search. We want to start this post with a huge thanks to you, the NuGet...","Href":"https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/","RawContent":null},{"Title":"Surfacing GitHub Usage for packages on NuGet.org","PublishedOn":"2019-07-17T20:00:23+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"There are several criteria you can use today to evaluate NuGet packages. We received feedback that you would like even more information to help choose the right packages. We&#8217;re excited to...","Href":"https://devblogs.microsoft.com/nuget/surfacing-github-usage-for-packages-on-nuget-org/","RawContent":null},{"Title":"NuGet Spring 2019 Roadmap","PublishedOn":"2019-04-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We published our last NuGet roadmap in June last year. Many of the features announced were major additions to NuGet and we have been hard at work to implement those over the last few months. In this...","Href":"https://devblogs.microsoft.com/nuget/nuget-spring-2019-roadmap/","RawContent":null},{"Title":"Enable repeatable package restores using a lock file","PublishedOn":"2018-12-17T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"With PackageReference, NuGet always tries to produce the same closure of package dependencies if the input package reference list has not changed. However, there are a few scenarios where it may not...","Href":"https://devblogs.microsoft.com/nuget/enable-repeatable-package-restores-using-a-lock-file/","RawContent":null},{"Title":"Lock down your dependencies using configurable trust policies","PublishedOn":"2018-12-05T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For the past several months we have focused on various features to improve package security and trust. Around a year back, we had announced our plans on various signing functionalities that we have...","Href":"https://devblogs.microsoft.com/nuget/lock-down-your-dependencies-using-configurable-trust-policies/","RawContent":null},{"Title":"Improved package debugging experience with the NuGet.org symbol server","PublishedOn":"2018-11-16T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Starting today, you can publish symbol packages to the NuGet.org symbol server. With NuGet.org as a single service provider for libraries and symbols, package authors and consumers will have a...","Href":"https://devblogs.microsoft.com/nuget/improved-package-debugging-experience-with-the-nuget-org-symbol-server/","RawContent":null},{"Title":"Introducing Source Code Link for NuGet packages","PublishedOn":"2018-08-27T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"NuGet.org now supports surfacing source code repository link for NuGet packages. This will enable package authors to surface both the project&#8217;s website and the source repository using the...","Href":"https://devblogs.microsoft.com/nuget/introducing-source-code-link-for-nuget-packages/","RawContent":null},{"Title":"NuGet.org starts repo-signing packages","PublishedOn":"2018-08-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In May, we implemented Stage 1 and enabled support for any NuGet.org user to submit signed packages to NuGet.org. Today, we are announcing Stage 2 of our NuGet package signing journey &#8211; tamper...","Href":"https://devblogs.microsoft.com/nuget/introducing-repository-signatures/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"10954715701","Type":"IssuesEvent","CreatedAt":"2019-11-26T21:22:40","Actor":"dannyjdev","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7705","RelatedDescription":"Closed issue \"\"Could not create SSL/TLS secure channel\" error in Visual Studio\" (#7705) at NuGet/NuGetGallery","RelatedBody":"### Describe the bug\r\nSome Visual Studio customers are reporting the following error:\r\n\r\n```\r\nUnable to load the service index for source https://api.nuget.org/v3/index.json.\r\nAn error occurred while sending the request.\r\nThe request was aborted: Could not create SSL/TLS secure channel.\r\n```\r\n\r\nThe NuGet team is actively investigating this problem. At this time, the issue's root cause is unknown. See: https://developercommunity.visualstudio.com/content/problem/815971/unable-to-browse-nuget-packages-1.html\r\n\r\n### Workaround\r\n\r\nSome customers have reported that disabling TLS 1.3 has resolved their issues:\r\n\r\n```ps1\r\nNew-Item 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\TLS 1.3\\Server' -Force | Out-Null\r\n\t\r\nNew-ItemProperty -path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\TLS 1.3\\Server' -name 'Enabled' -value '0' -PropertyType 'DWord' -Force | Out-Null\r\n\t\r\nNew-ItemProperty -path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\TLS 1.3\\Server' -name 'DisabledByDefault' -value 1 -PropertyType 'DWord' -Force | Out-Null\r\n\t\r\nNew-Item 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\TLS 1.3\\Client' -Force | Out-Null\r\n\t\r\nNew-ItemProperty -path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\TLS 1.3\\Client' -name 'Enabled' -value '0' -PropertyType 'DWord' -Force | Out-Null\r\n\t\r\nNew-ItemProperty -path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\TLS 1.3\\Client' -name 'DisabledByDefault' -value 1 -PropertyType 'DWord' -Force | Out-Null\r\nWrite-Host 'TLS 1.3 has been disabled.'\r\n```\r\n\r\nYou may also need to change your .NET Framework default TLS version:\r\n\r\n```ps1\r\nreg add HKLM\\SOFTWARE\\Microsoft\\.NETFramework\\v4.0.30319 /v SystemDefaultTlsVersions /t REG_DWORD /d 1 /f /reg:64\r\nreg add HKLM\\SOFTWARE\\Microsoft\\.NETFramework\\v4.0.30319 /v SystemDefaultTlsVersions /t REG_DWORD /d 1 /f /reg:32\r\n```"},{"Id":"10952754342","Type":"IssuesEvent","CreatedAt":"2019-11-26T17:02:13","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7714","RelatedDescription":"Opened issue \"Gallery should reject packages with duplicate dependencies\" (#7714) at NuGet/NuGetGallery","RelatedBody":"These packages can't be opened by some tools (NuGet Package Explorer) and the semantics of a duplicate dependency are undefined.\r\n\r\nFor example:\r\nhttps://www.nuget.org/packages/Paket.Core/5.237.1\r\n\r\n![image](https://user-images.githubusercontent.com/94054/69655106-bf289480-102a-11ea-9368-ee717e540b9b.png)\r\n\r\nThese duplicate dependencies became an array with two items for the dependency range, which is invalid and caused Catalog2Lucene to get blocked.\r\n\r\n/cc @zhhyu "},{"Id":"10944888412","Type":"PullRequestEvent","CreatedAt":"2019-11-25T21:33:34","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7713","RelatedDescription":"Opened pull request \"Deployment label log enrichment\" (#7713) at NuGet/NuGetGallery","RelatedBody":"Progress on https://github.com/NuGet/Engineering/issues/1912\r\n\r\nNeed it to differentiate between the deployments for app service conversion since `DeploymentIdTelemetryEnricher` will not work there. Unfortunately, this change will only work with App services, so for transition period we would need to look at both. I didn't find a way to pass this configuration bit to the cloud service configuration."},{"Id":"10941736345","Type":"IssuesEvent","CreatedAt":"2019-11-25T15:05:18","Actor":"MadKoder","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7665","RelatedDescription":"Closed issue \"Nuget.Server replies 406 on push request if .nuspec contains <group targetFramework=\"...\">\" (#7665) at NuGet/NuGetGallery","RelatedBody":"When the server is running on a computer with different profiles in \"C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETPortable\", if the .nuspec has group dependencies with targetFrameworkl, the push fails.\r\n\r\nBuild and run a server with Nuget.Server v3.4.1 package, on a computed that contains different profiles in \"C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETPortable\".\r\nPush a package that contains for exemple \r\n\\<dependencies\\>\r\n      \\<group targetFramework=\"netstandard2.0\" /\\>\r\n\\</dependencies\\>\r\nThe server replies with 406 (Not acceptable)\r\n\r\nAfter a thorough inspection, I could find the source of the problem, in the deprecated package Nuget.Core:\r\nWhen the nuspec contains a group with a targetFramework attribute, the method NuGet.Server.Core.FrameworkNameExtensions.ToShortNameOrNull() is called. and after that, down the call stack, there is a \"new NetPortableProfile\" with parameter \"supportedFrameworks\" given an empty enumerable.\r\nThis triggers the throw of an ArgumentOutOfRangeException, and seems to be the cause of the 406 reply.\r\n\r\nWhy the IEnumerable supportedFrameworks is empty ? Because it is filled by a code that scans \"C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETPortable\". Going down the directories, this code reads xml files found in \"vXXX\\Profile\\ProfileYYY\\SupportedFrameworks\" subdirectories.\r\nFor each \"ProfileYYY\" directory, it construct a NetPortableProfile, and the supportedFrameworks is filled by these xml files.\r\nBUT, I don't know why, profiles that starts with \"Mono\" or \"Xamarin\" are considered optionals, and removed from the list. Problem is that, on my computer, there are only Xamarin and Mono profiles...\r\n\r\nTo find this, I had to use the project Core found in Nuget.Client sources, and replaced in Nuget.Server sources the dependency to the deprecated package by this project. After that, if I add a test to check if the IEnumerable is not empty before trying to construct a NetPortableProfile, everything seems to be working fine.\r\nOf course this is a terrible hack, but for me the fundamental problem is that Nuget.Server use a deprecated package with no official sources, so there was no other way for me to find a solution.\r\n\r\nSo, did anybody already encountered this problem ? Is Something wrong in my computer configuration (the supported frameworks) ?\r\n\r\nThanks for your support!"},{"Id":"10930064473","Type":"PullRequestEvent","CreatedAt":"2019-11-22T23:38:46","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7709","RelatedDescription":"Merged pull request \"Dropped the `DiagnosticMonitorTraceListener` usage.\" (#7709) at NuGet/NuGetGallery","RelatedBody":"Progress on https://github.com/NuGet/Engineering/issues/1912\r\n\r\nRemoved some dead code. `DiagnosticMonitorTraceListener` needs to be configured, we don't have any configuration code in the project (or in web.config)."},{"Id":"10929792843","Type":"PullRequestEvent","CreatedAt":"2019-11-22T22:38:54","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7712","RelatedDescription":"Merged pull request \"Link to 'evaluate packages' documentation\" (#7712) at NuGet/NuGetGallery","RelatedBody":"![image](https://user-images.githubusercontent.com/737941/69391216-f55ec080-0c86-11ea-94d4-eeefcbe100a5.png)\r\n\r\n\r\nPart of https://github.com/NuGet/Engineering/issues/2763"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"10956733833","Type":"IssuesEvent","CreatedAt":"2019-11-27T04:19:47","Actor":"kartheekp-ms","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8856","RelatedDescription":"Closed issue \"Manage Package for Solutions shows error while browsing packages from an internal JFrog NuGet artifactory\" (#8856) at NuGet/Home","RelatedBody":"NuGet product used (NuGet.exe | VS UI | Package Manager Console):\r\n\r\nNuGet version (x.x.x.xxx): 5.3.1.6268\r\n\r\ndotnet.exe --version (if appropriate): 3.0.100\r\n\r\nVS version (if appropriate): 2017\r\n\r\nOS version (i.e. win10 v1607 (14393.321)): win10\r\n\r\nWorked before? If so, with which NuGet version: No\r\n\r\nPrerequisite: Downloaded latest nuget.exe \r\n\r\n1. Created and pushed a NuGet package to an internal JFrog artifactory. Everything works fine and I can view my package at the artifactory. i.e. nuget push <packageName> is successful.\r\n\r\n2. When I try to connect the artifactory from Visual studio ( Tools > NuGet Package Manager > Manage Packages for Solution), It just shows me an error message \r\n![image](https://user-images.githubusercontent.com/10449218/69584225-88527000-0f91-11ea-9024-27d6420f735b.png)\r\nI believe, if it doesnot find any apikey, then it should allow me to enter the apikey. But it does nothing.\r\n\r\n3. I set up my api key from package manager console from the Visual Studio 17, with the following command: \r\nnuget setapikey <USERNAME>:<PASSWORD> -Source Artifactory\r\n\r\n4. I try to list all the packages in my artifactory using command : nuget list \r\nBut it hangs for a while and gives me following error\r\n![image](https://user-images.githubusercontent.com/10449218/69584535-3e1dbe80-0f92-11ea-9601-4cdae1716d64.png)\r\nHere, it first says Please provide credentials for ... for there is no space to enter the username and password. It does nothing and it waits for the timeout.\r\n\r\n5. As an alternative, I perform steps 3 and 4 from cmd, it works and shows me all the packages. So, I'm assuming something is wrong while using it with Visual Studio 17. \r\n...\r\n\r\n"},{"Id":"10954008493","Type":"IssuesEvent","CreatedAt":"2019-11-26T19:44:00","Actor":"czangarine","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8858","RelatedDescription":"Opened issue \"Odd dependency installation behavior\" (#8858) at NuGet/Home","RelatedBody":"## Details about Problem\r\nNuGet product used: nuget binary (Mac), Rider 2019.2 IDE (Mac), VS 2019 IDE (Win)\r\nNuGet version (x.x.x.xxx): 4.7.0.5148\r\ndotnet.exe --version (if appropriate): 3.0.100\r\nVS version (if appropriate): 2019\r\nOS version (i.e. win10 v1607 (14393.321)): MacOS Mojave 10.14.6\r\nWorked before? If so, with which NuGet version:  N/A\r\n\r\n## Detailed repro steps so we can see the same problem\r\nWe create and host NuGet packages in-house, with deep dependency trees.  I'm hoping you've seen this problem before and can provide some guidance.  I don't expect it to be a VS/Rider/etc bug, so much as we're doing something slightly wrong.\r\n\r\n**Scenario**:\r\n- Create “Package A” using the PackageReference style compilation of “contentFiles/any/any”.\r\n     - Create a sub-folder under “contentFiles/any/any” called “Source”.\r\n     - Place source code files in the “Source” folder.\r\n     - Have a dependency on “Package B”.\r\n- Create “Package B”, again using the PackageReference style, with a “Source” subfolder.\r\n     - Place source code files in its “Source” folder.\r\n- Pack and publish both.\r\n\r\n**Expectation**:\r\n- Install “Package A” (using the built-in NuGet package manager UI).\r\n     - Your project gains a “Source” folder.\r\n          - A’s source files are referenced into the new “Source” folder and compile with the project.\r\n     - “Package B” is also installed, since it’s a dependency.\r\n          - B’s source files are also referenced into the “Source” folder and compile with the project.\r\n- Package A is immediately consumable by the project because all of its code, and all of its dependency’s code, is present.\r\n\r\n**Actual**:\r\n- Install “Package A”.\r\n     - Your project gains a “Source” folder.\r\n          - A’s source files are referenced into the new “Source” folder and compile with the project.\r\n     - “Package B” is also installed, since it’s a dependency.\r\n          - B’s source files **are not referenced** into the “Source” folder.\r\n     - **Package A code cannot be compiled because the source for B is not in the project**.\r\n- Manually install “Package B”, same as you did for “A”.\r\n     - B’s source files are referenced into the new “Source” folder in the project.\r\n     - Now “Package A” can be compiled and consumed.\r\n\r\nIf sample nuspec files are needed, etc. please let me know.\r\n\r\nThanks"},{"Id":"10949469581","Type":"IssuesEvent","CreatedAt":"2019-11-26T10:54:38","Actor":"mingkuang-Chuyu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8857","RelatedDescription":"Opened issue \"How do I install NuGet.Tools.vsix that I compiled?\" (#8857) at NuGet/Home","RelatedBody":"\r\n\r\n## Details about Problem\r\n\r\nNuGet product used VS UI\r\n\r\nNuGet version (5.5.0.54553)\r\n\r\nVS version 16.3.10:\r\n\r\nOS version  Win7 SP1 x64 :\r\n\r\n\r\n## Detailed repro steps so we can see the same problem\r\nHello, due to the poor support for props in the official version, such as unable to import Shared ImportGroup or ExtensionSettings ImportGroup with C++ Project.\r\n\r\nSo I modified the source code and compiled it to get NuGet.Tools.vsix, but I couldn't install it. What should I do to install my NuGet.Tools.vsix? I'm eager to get help to make C++ better. \r\n\r\nThank you\r\n\r\nmingkuang\r\n\r\n\r\n"},{"Id":"10947598693","Type":"IssuesEvent","CreatedAt":"2019-11-26T06:40:54","Actor":"The-real-Urb","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8851","RelatedDescription":"Closed issue \"NuGet.exe list/push/... unable to connect to feed: Specified method is not supported\" (#8851) at NuGet/Home","RelatedBody":"NuGet Version: 4.7.3.5893\r\nNuGet Version: 4.9.4.5839\r\nNuGet Version: 5.3.1.6268\r\n\r\nOS version:\r\nLSB Version:    core-9.20170808ubuntu1-noarch:security-9.20170808ubuntu1-noarch\r\nDistributor ID: Ubuntu\r\nDescription:    Ubuntu 18.04.3 LTS\r\nRelease:        18.04\r\nCodename:       bionic\r\n\r\nmono version:\r\nMono JIT compiler version 6.4.0.198 (tarball Tue Sep 24 01:21:28 UTC 2019)\r\nCopyright (C) 2002-2014 Novell, Inc, Xamarin Inc and Contributors. www.mono-project.com\r\n        TLS:           __thread\r\n        SIGSEGV:       altstack\r\n        Notifications: epoll\r\n        Architecture:  amd64\r\n        Disabled:      none\r\n        Misc:          softdebug\r\n        Interpreter:   yes\r\n        LLVM:          yes(610)\r\n        Suspend:       hybrid\r\n        GC:            sgen (concurrent by default)\r\n\r\nWe installed the Microsoft NuGet Credentials Provider with the automatic bash script.\r\nhttps://github.com/Microsoft/artifacts-credprovider/blob/master/README.md#automatic-bash-script\r\n\r\n## Problem\r\n\r\nWe have a new build-container for our Azure-DevOps-Pipelines. In our pipeline, we need to push nuget packages to our on-premise TFS-package-feed.\r\n\r\n### Detailed repro steps so we can see the same problem\r\n\r\n1. Create a PAT token in the on-premise VSTS/TFS for a tfs-user. Use the PAT and username in next step.\r\n2. Create the nuget.config.\r\n/usr/bin/mono /_work/_tool/NuGet/5.3.1/x64/nuget.exe sources Add -Name \"PackageFeed\" -Source \"http://tfs.xxxxxx.local:8080/tfs/xxxx%20xxxxx/_packaging/PackageFeed/nuget/v3/index.json\"  -ConfigFile ~/my_nuget.config -username xxx_xxxx_xxxxxxxxxxxx@xxxxx.xx -password m32165498321654983216549832165498732165498732165498a\r\n3. Test by listing the feed:\r\n/usr/bin/mono /_work/_tool/NuGet/5.3.1/x64/nuget.exe list -ConfigFile ~/my_nuget.config -Source PackageFeed -Verbosity Detailed\r\n\r\n#### This gives back the error: \r\n\r\n> Unable to load the service index for source http://tfs.xxxxxx.local:8080/tfs/xxxx%20xxxxx/_packaging/PackageFeed/nuget/v3/index.json.\r\nSpecified method is not supported.\r\n\r\n#### Verbose Logs\r\n```\r\nUnable to load the service index for source http://tfs.xxxxxx.local:8080/tfs/xxxx%20xxxxx/_packaging/PackageFeed/nuget/v3/index.json.\r\n  Specified method is not supported.\r\nNuGet.Protocol.Core.Types.FatalProtocolException: Unable to load the service index for source http://tfs.xxxxxx.local:8080/tfs/xxxx%20xxxxx/_packaging/PackageFeed/nuget/v3/index.json. ---> System.NotSupportedException: Specified method is not supported.\r\n  at Microsoft.Win32.SafeHandles.SafeGssNameHandle.CreatePrincipal (System.String name) [0x0000e] in <2703bbaa0a6e4686b6033c2dddb1a363>:0\r\n  at System.Net.Security.SafeDeleteNegoContext..ctor (System.Net.Security.SafeFreeNegoCredentials credential, System.String targetName) [0x0001c] in <2703bbaa0a6e4686b6033c2dddb1a363>:0\r\n  at System.Net.Security.NegotiateStreamPal.EstablishSecurityContext (System.Net.Security.SafeFreeNegoCredentials credential, System.Net.Security.SafeDeleteContext& context, System.String targetName, System.Net.ContextFlagsPal inFlags, System.Net.Security.SecurityBuffer inputBuffer, System.Net.Security.SecurityBuffer outputBuffer, System.Net.ContextFlagsPal& outFlags) [0x0000b] in <2703bbaa0a6e4686b6033c2dddb1a363>:0\r\n  at System.Net.Security.NegotiateStreamPal.InitializeSecurityContext (System.Net.Security.SafeFreeCredentials credentialsHandle, System.Net.Security.SafeDeleteContext& securityContext, System.String spn, System.Net.ContextFlagsPal requestedContextFlags, System.Net.Security.SecurityBuffer[] inSecurityBufferArray, System.Net.Security.SecurityBuffer outSecurityBuffer, System.Net.ContextFlagsPal& contextFlags) [0x0002a] in <2703bbaa0a6e4686b6033c2dddb1a363>:0\r\n  at System.Net.NTAuthentication.GetOutgoingBlob (System.Byte[] incomingBlob, System.Boolean throwOnError, System.Net.SecurityStatusPal& statusCode) [0x00096] in <2703bbaa0a6e4686b6033c2dddb1a363>:0\r\n  at System.Net.NTAuthentication.GetOutgoingBlob (System.String incomingBlob) [0x00033] in <2703bbaa0a6e4686b6033c2dddb1a363>:0\r\n  at System.Net.Http.AuthenticationHelper.SendWithNtAuthAsync (System.Net.Http.HttpRequestMessage request, System.Uri authUri, System.Net.ICredentials credentials, System.Boolean isProxyAuth, System.Net.Http.HttpConnection connection, System.Net.Http.HttpConnectionPool connectionPool, System.Threading.CancellationToken cancellationToken) [0x00290] in <7ecf813f2d314058b05c6c092c47b77a>:0\r\n  at System.Net.Http.HttpConnectionPool.SendWithNtConnectionAuthAsync (System.Net.Http.HttpConnection connection, System.Net.Http.HttpRequestMessage request, System.Boolean doRequestAuth, System.Threading.CancellationToken cancellationToken) [0x000b1] in <7ecf813f2d314058b05c6c092c47b77a>:0\r\n  at System.Net.Http.HttpConnectionPool.SendWithRetryAsync (System.Net.Http.HttpRequestMessage request, System.Boolean doRequestAuth, System.Threading.CancellationToken cancellationToken) [0x0014b] in <7ecf813f2d314058b05c6c092c47b77a>:0\r\n  at System.Net.Http.AuthenticationHelper.SendWithAuthAsync (System.Net.Http.HttpRequestMessage request, System.Uri authUri, System.Net.ICredentials credentials, System.Boolean preAuthenticate, System.Boolean isProxyAuth, System.Boolean doRequestAuth, System.Net.Http.HttpConnectionPool pool, System.Threading.CancellationToken cancellationToken) [0x00112] in <7ecf813f2d314058b05c6c092c47b77a>:0\r\n  at System.Net.Http.RedirectHandler.SendAsync (System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken) [0x000ba] in <7ecf813f2d314058b05c6c092c47b77a>:0\r\n  at System.Net.Http.DecompressionHandler.SendAsync (System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken) [0x000ca] in <7ecf813f2d314058b05c6c092c47b77a>:0\r\n  at NuGet.Protocol.ServerWarningLogHandler.SendAsync (System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken) [0x00088] in <ff502667b3fe4a85827635c6fe6b0d0d>:0\r\n  at NuGet.Protocol.StsAuthenticationHandler.SendAsync (System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken) [0x000bf] in <ff502667b3fe4a85827635c6fe6b0d0d>:0\r\n  at NuGet.Protocol.HttpSourceAuthenticationHandler.SendAsync (System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken) [0x000c4] in <ff502667b3fe4a85827635c6fe6b0d0d>:0\r\n  at System.Net.Http.HttpClient.FinishSendAsyncUnbuffered (System.Threading.Tasks.Task`1[TResult] sendTask, System.Net.Http.HttpRequestMessage request, System.Threading.CancellationTokenSource cts, System.Boolean disposeCts) [0x000b3] in <7ecf813f2d314058b05c6c092c47b77a>:0\r\n  at NuGet.Protocol.TimeoutUtility.StartWithTimeout[T] (System.Func`2[T,TResult] getTask, System.TimeSpan timeout, System.String timeoutMessage, System.Threading.CancellationToken token) [0x001cd] in <ff502667b3fe4a85827635c6fe6b0d0d>:0\r\n  at NuGet.Protocol.HttpRetryHandler.SendAsync (NuGet.Protocol.HttpRetryHandlerRequest request, NuGet.Common.ILogger log, System.Threading.CancellationToken cancellationToken) [0x004d5] in <ff502667b3fe4a85827635c6fe6b0d0d>:0\r\n  at NuGet.Protocol.HttpSource.GetThrottledResponse (System.Func`1[TResult] requestFactory, System.TimeSpan requestTimeout, System.TimeSpan downloadTimeout, System.Int32 maxTries, System.Guid sessionId, NuGet.Common.ILogger log, System.Threading.CancellationToken cancellationToken) [0x001e0] in <ff502667b3fe4a85827635c6fe6b0d0d>:0\r\n  at NuGet.Protocol.HttpSource+<>c__DisplayClass14_0`1[T].<GetAsync>b__0 (System.Threading.CancellationToken lockedToken) [0x00297] in <ff502667b3fe4a85827635c6fe6b0d0d>:0\r\n  at NuGet.Common.ConcurrencyUtilities.ExecuteWithFileLockedAsync[T] (System.String filePath, System.Func`2[T,TResult] action, System.Threading.CancellationToken token) [0x00234] in <ff502667b3fe4a85827635c6fe6b0d0d>:0\r\n  at NuGet.Protocol.HttpSource.GetAsync[T] (NuGet.Protocol.HttpSourceCachedRequest request, System.Func`2[T,TResult] processAsync, NuGet.Common.ILogger log, System.Threading.CancellationToken token) [0x000ea] in <ff502667b3fe4a85827635c6fe6b0d0d>:0\r\n  at NuGet.Protocol.ServiceIndexResourceV3Provider.GetServiceIndexResourceV3 (NuGet.Protocol.Core.Types.SourceRepository source, System.DateTime utcNow, NuGet.Common.ILogger log, System.Threading.CancellationToken token) [0x0021a] in <ff502667b3fe4a85827635c6fe6b0d0d>:0\r\n   --- End of inner exception stack trace ---\r\n  at NuGet.Protocol.ServiceIndexResourceV3Provider.GetServiceIndexResourceV3 (NuGet.Protocol.Core.Types.SourceRepository source, System.DateTime utcNow, NuGet.Common.ILogger log, System.Threading.CancellationToken token) [0x002ce] in <ff502667b3fe4a85827635c6fe6b0d0d>:0\r\n  at NuGet.Protocol.ServiceIndexResourceV3Provider.TryCreate (NuGet.Protocol.Core.Types.SourceRepository source, System.Threading.CancellationToken token) [0x00213] in <ff502667b3fe4a85827635c6fe6b0d0d>:0\r\n  at NuGet.Protocol.Core.Types.SourceRepository.GetResourceAsync[T] (System.Threading.CancellationToken token) [0x000b8] in <ff502667b3fe4a85827635c6fe6b0d0d>:0\r\n  at NuGet.Protocol.V3FeedListResourceProvider.TryCreate (NuGet.Protocol.Core.Types.SourceRepository source, System.Threading.CancellationToken token) [0x00082] in <ff502667b3fe4a85827635c6fe6b0d0d>:0\r\n  at NuGet.Protocol.Core.Types.SourceRepository.GetResourceAsync[T] (System.Threading.CancellationToken token) [0x000b8] in <ff502667b3fe4a85827635c6fe6b0d0d>:0\r\n  at NuGet.Commands.ListCommandRunner.ExecuteCommand (NuGet.Commands.ListArgs listArgs) [0x000df] in <ff502667b3fe4a85827635c6fe6b0d0d>:0\r\n  at NuGet.CommandLine.ListCommand.ExecuteCommandAsync () [0x0010a] in <ff502667b3fe4a85827635c6fe6b0d0d>:0\r\n  at NuGet.CommandLine.Command.Execute () [0x000ea] in <ff502667b3fe4a85827635c6fe6b0d0d>:0\r\n  at NuGet.CommandLine.Program.MainCore (System.String workingDirectory, System.String[] args) [0x001c1] in <ff502667b3fe4a85827635c6fe6b0d0d>:0\r\n```"},{"Id":"10945493457","Type":"IssuesEvent","CreatedAt":"2019-11-25T23:03:19","Actor":"buddhashrestha","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8856","RelatedDescription":"Opened issue \"Manage Package for Solutions shows error while browsing packages from an internal JFrog NuGet artifactory\" (#8856) at NuGet/Home","RelatedBody":"NuGet product used (NuGet.exe | VS UI | Package Manager Console):\r\n\r\nNuGet version (x.x.x.xxx): 5.3.1.6268\r\n\r\ndotnet.exe --version (if appropriate): 3.0.100\r\n\r\nVS version (if appropriate): 2017\r\n\r\nOS version (i.e. win10 v1607 (14393.321)): win10\r\n\r\nWorked before? If so, with which NuGet version: No\r\n\r\nPrerequisite: Downloaded latest nuget.exe \r\n\r\n1. Created and pushed a NuGet package to an internal JFrog artifactory. Everything works fine and I can view my package at the artifactory. i.e. nuget push <packageName> is successful.\r\n\r\n2. When I try to connect the artifactory from Visual studio ( Tools > NuGet Package Manager > Manage Packages for Solution), It just shows me an error message \r\n![image](https://user-images.githubusercontent.com/10449218/69584225-88527000-0f91-11ea-9024-27d6420f735b.png)\r\nI believe, if it doesnot find any apikey, then it should allow me to enter the apikey. But it does nothing.\r\n\r\n3. I set up my api key from package manager console from the Visual Studio 17, with the following command: \r\nnuget setapikey <USERNAME>:<PASSWORD> -Source Artifactory\r\n\r\n4. I try to list all the packages in my artifactory using command : nuget list \r\nBut it hangs for a while and gives me following error\r\n![image](https://user-images.githubusercontent.com/10449218/69584535-3e1dbe80-0f92-11ea-9601-4cdae1716d64.png)\r\nHere, it first says Please provide credentials for ... for there is no space to enter the username and password. It does nothing and it waits for the timeout.\r\n\r\n5. As an alternative, I perform steps 3 and 4 from cmd, it works and shows me all the packages. So, I'm assuming something is wrong while using it with Visual Studio 17. \r\n...\r\n\r\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"10740159942","Type":"IssuesEvent","CreatedAt":"2019-10-29T17:39:29","Actor":"anangaur","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/39","RelatedDescription":"Opened issue \"Flag vulnerable packages\" (#39) at NuGet/Announcements","RelatedBody":"The spec for 'Flagging vulnerable packages' is ready for **review**:\r\n\r\n|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Flag vulnerable packages](https://github.com/NuGet/Home/wiki/Flag-vulnerable-packages) | https://github.com/nuget/home/issues/8087|"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1190360390980395008","CreatedAt":"2019-11-01T20:10:07+00:00","UserScreenname":"nuget","Text":"The issue with the publishing pipeline has been resolved and packages are now being published normally. https://t.co/NdK8mVk7UF","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":3,"FavoriteCount":0,"RawContent":null},{"Id":"1190331936293572608","CreatedAt":"2019-11-01T18:17:03+00:00","UserScreenname":"nuget","Text":"We are experiencing an issue with our publishing pipeline causing a delay in the publishing of new packages. We are… https://t.co/gM91QcE1Zc","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":5,"FavoriteCount":3,"RawContent":null}]}},"RunOn":"2019-11-27T05:30:47.0491925Z","RunDurationInMilliseconds":2110}