{"Data":{"GitHub":{"Issues":[{"Id":"450582337","IsPullRequest":true,"CreatedAt":"2019-05-31T02:21:00","Actor":"dotnet-maestro[bot]","Number":"797","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190530.01\r\n- **Date Produced**: 5/30/2019 4:29 PM\r\n- **Commit**: 63abc77da6d99470caa5bfa0465afe244105e595\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview6-27730-01\r\n\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n- **Microsoft.Win32.Registry** -> 4.6.0-preview6.19279.8 (parent: Microsoft.NETCore.App)\r\n- **System.CodeDom** -> 4.6.0-preview6.19279.8 (parent: Microsoft.NETCore.App)\r\n- **System.Configuration.ConfigurationManager** -> 4.6.0-preview6.19279.8 (parent: Microsoft.NETCore.App)\r\n- **System.Diagnostics.EventLog** -> 4.6.0-preview6.19279.8 (parent: Microsoft.NETCore.App)\r\n- **System.DirectoryServices** -> 4.6.0-preview6.19279.8 (parent: Microsoft.NETCore.App)\r\n- **System.Drawing.Common** -> 4.6.0-preview6.19279.8 (parent: Microsoft.NETCore.App)\r\n- **System.Reflection.Emit** -> 4.6.0-preview6.19279.8 (parent: Microsoft.NETCore.App)\r\n- **System.Reflection.MetadataLoadContext** -> 4.6.0-preview6.19279.8 (parent: Microsoft.NETCore.App)\r\n- **System.Security.AccessControl** -> 4.6.0-preview6.19279.8 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Cryptography.Xml** -> 4.6.0-preview6.19279.8 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Permissions** -> 4.6.0-preview6.19279.8 (parent: Microsoft.NETCore.App)\r\n- **System.Security.Principal.Windows** -> 4.6.0-preview6.19279.8 (parent: Microsoft.NETCore.App)\r\n- **System.Windows.Extensions** -> 4.6.0-preview6.19279.8 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.Platforms** -> 3.0.0-preview6.19279.8 (parent: Microsoft.NETCore.App)\r\n- **System.IO.Packaging** -> 4.6.0-preview6.19279.8 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.ILDAsm** -> 3.0.0-preview6.19280.1 (parent: Microsoft.NETCore.Runtime.CoreCLR)\r\n- **Microsoft.NETCore.Runtime.CoreCLR** -> 3.0.0-preview6.19280.1 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.ILAsm** -> 3.0.0-preview6.19280.1 (parent: Microsoft.NETCore.Runtime.CoreCLR)\r\n- **Microsoft.NETCore.Runtime.CoreCLR** -> 3.0.0-preview6.19280.1 (parent: Microsoft.NETCore.App)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/797","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#797)"},{"Id":"450212741","IsPullRequest":true,"CreatedAt":"2019-05-30T22:53:28","Actor":"vatsan-madhavan","Number":"787","RawContent":null,"Title":"AppContext and *CompatibilityPreferences infrastructure","State":"closed","Body":"This PR brings up a functioning infrastructure for `AppContext` and `*CompatibilityPreferences` infrastructure. \r\n\r\n- `AppContext` based quirks would be set in `runtimeconfig.template.json`\r\n - I haven't tested to verify whether these support registry. \r\n- `*CompatibilityPreferences` would continue being set in `App.config`\r\n\r\nThe new defaults for various quirks are so: \r\n\r\n```JSON\r\n{\r\n  \"configProperties\": {\r\n    /*\r\n    // BuildTasksAppContextSwitches\r\n    \"Switch.System.Windows.Markup.DoNotUseSha256ForMarkupCompilerChecksumAlgorithm\": false,\r\n\r\n    // CoreAppContextSwitches\r\n    \"Switch.System.Windows.DoNotScaleForDpiChanges\": false,\r\n    \"Switch.System.Windows.Media.ImageSourceConverter.OverrideExceptionWithNullReferenceException\": false,\r\n    \"Switch.System.Windows.DoNotUsePresentationDpiCapabilityTier2OrGreater\": false,\r\n    \"Switch.System.Windows.Input.Stylus.DisableStylusAndTouchSupport\": false,\r\n    \"Switch.System.Windows.Input.Stylus.EnablePointerSupport\": false,\r\n    \"Switch.System.Windows.Diagnostics.DisableDiagnostics\": false,\r\n    \"Switch.System.Windows.Diagnostics.AllowChangesDuringVisualTreeChanged\": false,\r\n    \"Switch.System.Windows.Input.Stylus.DisableImplicitTouchKeyboardInvocation\": false,\r\n    \"Switch.System.Windows.Media.ShouldRenderEvenWhenNoDisplayDevicesAreAvailable\": false,\r\n    \"Switch.System.Windows.Media.ShouldNotRenderInNonInteractiveWindowStation\": false,\r\n    \"Switch.System.Windows.DoNotUsePresentationDpiCapabilityTier3OrGreater\": false, // Reserved for future use\r\n    \"Switch.System.Windows.AllowExternalProcessToBlockAccessToTemporaryFiles\": false,\r\n    \"Switch.System.Windows.EnableLegacyDangerousClipboardDeserializationMode\": false,\r\n\r\n    // FrameworkAppContextSwitches\r\n    \"Switch.System.Windows.Controls.Text.UseAdornerForTextboxSelectionRendering\": true,\r\n    \"Switch.MS.Internal.DoNotApplyLayoutRoundingToMarginsAndBorderThickness\": false,\r\n    \"Switch.System.Windows.Controls.Grid.StarDefinitionsCanExceedAvailableSpace\": false,\r\n    \"Switch.System.Windows.Controls.TabControl.SelectionPropertiesCanLagBehindSelectionChangedEvent\": false,\r\n    \"Switch.System.Windows.Data.DoNotUseFollowParentWhenBindingToADODataRelation\": false,\r\n    \"Switch.System.Windows.Data.Binding.IListIndexerHidesCustomIndexer\": false,\r\n    \"Switch.System.Windows.Baml2006.AppendLocalAssemblyVersionForSourceUri\": false,\r\n    \"Switch.System.Windows.Controls.KeyboardNavigationFromHyperlinkInItemsControlIsNotRelativeToFocusedElement\": false,\r\n    \"Switch.System.Windows.Automation.Peers.ItemAutomationPeerKeepsItsItemAlive\": false,\r\n\r\n    // BaseAppContextSwitches\r\n    \"Switch.MS.Internal.DoNotUseCulturePreservingDispatcherOperations\": false,\r\n    \"Switch.MS.Internal.UseSha1AsDefaultHashAlgorithmForDigitalSignatures\": false,\r\n    \"Switch.MS.Internal.DoNotInvokeInWeakEventTableShutdownListener\": false,\r\n    \"Switch.MS.Internal.EnableCleanupSchedulingImprovements\": false,\r\n    \"Switch.MS.Internal.EnableWeakEventMemoryImprovements\": false,\r\n\r\n    // AccessibilitySwitches\r\n    \"Switch.UseLegacyAccessibilityFeatures\": false,\r\n    \"Switch.UseLegacyAccessibilityFeatures.2\": false,\r\n    \"Switch.UseLegacyAccessibilityFeatures.3\": false,\r\n    \"Switch.UseLegacyToolTipDisplay\": false,\r\n    \"Switch.System.Windows.Controls.ItemsControlDoesNotSupportAutomation\": false\r\n  */\r\n  }\r\n}\r\n```\r\n\r\n```XML\r\n<configuration>\r\n  <appSettings>\r\n    <!-- Defined in CoreCompatibilityPreferences -->\r\n    <!-- \r\n    <add key=\"IsAltKeyRequiredInAccessKeyDefaultScope\" value=\"false\"/>\r\n    <add key=\"EnableMultiMonitorDisplayClipping\" value=\"null\"/>\r\n    <add key=\"IncludeAllInkInBoundingBox\" value=\"true\"/>\r\n    -->\r\n    \r\n    \r\n    <!-- Defined in BaseCompatibilityPreferences -->\r\n    <!-- \r\n    <add key=\"ReuseDispatcherSynchronizationContextInstance\" value=\"false\"/>\r\n    <add key=\"FlowDispatcherSynchronizationContextPriority\" value=\"true\"/>\r\n    <add key=\"InlineDispatcherSynchronizationContextSend\" value=\"true\"/>\r\n    <add key=\"HandleDispatcherRequestProcessingFailure\" value=\"Continue\"/>\r\n    <add key=\"MatchPackageSignatureMethodToPackagePartDigestMethod\" value=\"true\"/>\r\n    -->\r\n    \r\n    <!-- Defined in FrameworkCompatibilityPreferenes -->\r\n    <!-- \r\n    <add key=\"AreInactiveSelectionHighlightBrushKeysSupported\" value=\"true\"/>\r\n    <add key=\"KeepTextBoxDisplaySynchronizedWithTextProperty\" value=\"true\"/>\r\n    <add key=\"ShouldThrowOnCopyOrCutFailure\" value=\"false\"/>\r\n    <add key=\"HandleTwoWayBindingToPropertyWithNonPublicSetter\" value=\"Allow\"/>\r\n    <add key=\"UseSetWindowPosForTopmostWindows\" value=\"false\"/>\r\n    <add key=\"VSP45Compat\" value=\"false\"/>\r\n    -->\r\n  </appSettings>\r\n</configuration>\r\n```\r\n\r\nAlso see https://github.com/microsoft/WPF-Samples/pull/87","Url":"https://github.com/dotnet/wpf/pull/787","RelatedDescription":"Closed or merged PR \"AppContext and *CompatibilityPreferences infrastructure\" (#787)"},{"Id":"450508945","IsPullRequest":true,"CreatedAt":"2019-05-30T21:51:22","Actor":"ryalanms","Number":"796","RawContent":null,"Title":"Revert PresentationFramework to .NET Framework translations for DE","State":"closed","Body":"A previous loc check-in translated locked strings, only in DE.   I'm reviewing other loc updates to verify this didn't happen elsewhere.","Url":"https://github.com/dotnet/wpf/pull/796","RelatedDescription":"Closed or merged PR \"Revert PresentationFramework to .NET Framework translations for DE\" (#796)"},{"Id":"450033562","IsPullRequest":false,"CreatedAt":"2019-05-30T20:16:26","Actor":"rladuca","Number":"783","RawContent":null,"Title":"Extension assemblies are not building","State":"closed","Body":"The extension assemblies that were open sourced recently (see: #727 ) were not properly added to the solution file.  As such, they are not building.","Url":"https://github.com/dotnet/wpf/issues/783","RelatedDescription":"Closed issue \"Extension assemblies are not building\" (#783)"},{"Id":"450468249","IsPullRequest":true,"CreatedAt":"2019-05-30T20:15:31","Actor":"ryalanms","Number":"795","RawContent":null,"Title":"Add PresentationFramework extensions to WPF solution","State":"closed","Body":"Adds extensions to the WPF solution file, and includes a minor update to .editorconfig for .sln line endings.","Url":"https://github.com/dotnet/wpf/pull/795","RelatedDescription":"Closed or merged PR \"Add PresentationFramework extensions to WPF solution\" (#795)"},{"Id":"450451233","IsPullRequest":true,"CreatedAt":"2019-05-30T18:45:40","Actor":"rladuca","Number":"794","RawContent":null,"Title":"Remove PresentationCore-CommonResources and move composite fonts to PresentationCore","State":"open","Body":"fixes #793 ","Url":"https://github.com/dotnet/wpf/pull/794","RelatedDescription":"Open PR \"Remove PresentationCore-CommonResources and move composite fonts to PresentationCore\" (#794)"},{"Id":"450450220","IsPullRequest":false,"CreatedAt":"2019-05-30T18:43:15","Actor":"rladuca","Number":"793","RawContent":null,"Title":"Remove PresentationCore-CommonResources","State":"open","Body":"`PresentationCore-CommonResources` is currently used to house the composite font files as a resource due to an issue with getting them to be included when we were building `PresentationCore` as a mixed DLL from a C++/CLI object file and a C# netmodule.\r\n\r\nWe have since removed this (via creating `DirectWriteForwarder`) so the main reason for keeping the resource out of `PresentationCore` directly no longer exists.\r\n\r\nAs such, we should remove this DLL and move the composite font resources into `PresentationCore` directly.","Url":"https://github.com/dotnet/wpf/issues/793","RelatedDescription":"Open issue \"Remove PresentationCore-CommonResources\" (#793)"},{"Id":"450390020","IsPullRequest":false,"CreatedAt":"2019-05-30T16:21:50","Actor":"grubioe","Number":"792","RawContent":null,"Title":"[Accessibility] Narrator saying control type as header for ribbon tab","State":"open","Body":"Copied from VSO ID: 544458\r\n\r\nDoes the bug reproduce also in WPF for .NET Framework 4.8?: Yes\r\n\r\n <!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\n \r\n **Problem description:**\r\n Narrator saying control type as header for ribbon tab\r\n\r\n **Minimal repro:**\r\n Steps to reproduce:\r\nCreate a ribbon in wpf and add a ribbon tab with some header like\r\n\r\n```\r\n<Ribbon>\r\n        <RibbonTab Header=\"Home\">            \r\n        </RibbonTab>\r\n</Ribbon>\r\n```\r\n\r\nFor above ribbon tab, when narrator focuses, it says its control type as header instead of tab (see attached screenshot).\r\n\r\n![home-header](https://user-images.githubusercontent.com/49078227/58647248-f86e8a80-82bb-11e9-9ac9-63c70796f619.PNG)\r\n\r\n**Initial Commentary from Team:**\r\nFor Ribbons, the header is what receives focus (RibbonTabs are by default not focusable) we attempted to reroute Automation focus to the RibbonTab so that it would get announced correctly, but this lead to strange behaviors when dealing with SelectionPattern.RemoveFromSelection. We may need to re-evaluate the way we expose Ribbon->RibbonTab->RibbonHeader to UIAutomation\r\n","Url":"https://github.com/dotnet/wpf/issues/792","RelatedDescription":"Open issue \"[Accessibility] Narrator saying control type as header for ribbon tab\" (#792)"},{"Id":"450387152","IsPullRequest":false,"CreatedAt":"2019-05-30T16:15:58","Actor":"grubioe","Number":"791","RawContent":null,"Title":"Accessibility: (combobox control) An element of the given type should not support the Scroll pattern.","State":"open","Body":"Copied from VSO ID: 691457\r\n\r\nDoes the bug reproduce also in WPF for .NET Framework 4.8?: Yes\r\n\r\n **Problem description:**\r\nMAS-4.2.8: (combobox control) An element of the given type should not support the Scroll pattern.\r\n \r\n  **Minimal repro:**\r\n\r\nApplication: WPF Application project in C# with combo box control\r\n\r\nIssue Details\r\nAn element of the given type should not support the Scroll pattern.\r\n\r\nElement path: combo box \"test\"\r\n\r\nTo Reproduce and How to Fix guidance: Please open the attached Keros Test File (*.k4dtest) to reproduce the error in Keros for Desktop.\r\n\r\n[691457.zip](https://github.com/dotnet/wpf/files/3237825/691457.zip)\r\n\r\nThis accessibility issue was found using Keros for Desktop, a tool that helps debug and find accessibility issues earlier. Get more information & download this tool at https://aka.ms/K4D.\r\n\r\n![Screen](https://user-images.githubusercontent.com/49078227/58646909-42a33c00-82bb-11e9-85f6-65a9c4281c73.png)\r\n\r\n","Url":"https://github.com/dotnet/wpf/issues/791","RelatedDescription":"Open issue \"Accessibility: (combobox control) An element of the given type should not support the Scroll pattern.\" (#791)"},{"Id":"450384726","IsPullRequest":false,"CreatedAt":"2019-05-30T16:10:36","Actor":"grubioe","Number":"790","RawContent":null,"Title":"Narrator does not annouce HyperLink in reverse (Shift+Tab) on FlowDocumentScrollViewer","State":"open","Body":"Copied from VSO ID: 608596\r\n\r\nDoes the bug reproduce also in WPF for .NET Framework 4.8?: Yes\r\n\r\nSimple WPF program attached to demonstrate the issue\r\n\r\n[Sample.zip](https://github.com/dotnet/wpf/files/3237805/Sample.zip)\r\n \r\n **Problem description:**\r\nNarrator does not annouce HyperLink in reverse (Shift+Tab) on FlowDocumentScrollViewer\r\n \r\n **Repro:**\r\n 1.Tab to the FlowDocument and Narrator will announce \"Checked out branch Ham, which is out of date. [Pull]() the latest changes to update.\",\r\n2. Tab.  Focus is now on the hyperlink and it correctly says \"Pull hyperlink\"\r\n3. Tab again (focus will be on the Textblock's hyperlink)\r\n4. Shift Tab.  Focus is now on the hyperlink but it says \"Checked out branch Ham, which is out of date. [Pull]() the latest changes to update.\"\r\n5. Shift Tab. Focus is now on the FlowDocument and it will announce \"Checked out branch Ham, which is out of date. [Pull]() the latest changes to update.\",\r\n\r\nStep 4 should announce the same as Step 2.  Going forward or backwards shouldn't change what narrator reads.\r\n\r\nI attached the program for easy replay, but here is the crux of the XAML.  Only changes from default WPF project are in the MainWindow.xaml file.\r\n\r\n    <FlowDocumentScrollViewer Grid.Column=\"1\" AutomationProperties.Name=\"Checked out branch Ham, which is out of date. [Pull]() the latest changes to update.\">\r\n            <FlowDocument>\r\n                <Paragraph>\r\n                    <Run>Checked out branch Ham, which is out of date</Run>\r\n                    <Hyperlink NavigateUri=\"http://www.msn.com\">Pull</Hyperlink>\r\n                    <Run>the latest changes to update.</Run>\r\n                </Paragraph>\r\n            </FlowDocument>               \r\n        </FlowDocumentScrollViewer>\r\n\r\n\r\n","Url":"https://github.com/dotnet/wpf/issues/790","RelatedDescription":"Open issue \"Narrator does not annouce HyperLink in reverse (Shift+Tab) on FlowDocumentScrollViewer\" (#790)"},{"Id":"450381238","IsPullRequest":false,"CreatedAt":"2019-05-30T16:02:38","Actor":"grubioe","Number":"789","RawContent":null,"Title":"Unexpected UIA TextRange navigation results when moving through hyperlink UI hosted in a RichTextBox","State":"open","Body":"Copied from VSO ID 607015\r\n\r\nDoes the bug reproduce also in WPF for .NET Framework 4.8?: Yes\r\n\r\n\r\n **Problem description:**\r\nUnexpected UIA TextRange navigation results when moving through hyperlink UI hosted in a RichTextBox\r\n \r\n **Repro:**\r\n\r\nSteps to reproduce:\r\n\r\n1. Create a new WPF in VS, and add the following XAML:\r\n\r\n<RichTextBox VerticalAlignment=\"Center\" HorizontalAlignment=\"Center\" FontSize=\"14\">\r\n\r\n    <FlowDocument>\r\n\r\n        <Paragraph>First <Bold>Second</Bold> Third <Hyperlink>This is a link</Hyperlink> Final</Paragraph>\r\n\r\n    </FlowDocument>\r\n\r\n</RichTextBox>\r\n\r\n\r\n2. Run the app.\r\n3. Point the Keros For Desktop tool or Inspect SDK tool at the text in the app.\r\n4. Use the tool's text navigation functionality to move through the text by format.\r\n5. Move through the text as expected up to moving onto the hyperlink. \r\n6. Try to move beyond the hyperlink.\r\n\r\nResult: The tool stays at the hyperlink.\r\nExpected. The tool moves to the text following the hyperlink, just as it does with similar text in Wordpad or Word.\r\n\r\nThis bug was logged in response to the JAWS screen reader becoming unresponsive when interacting with the UI in the above app, and also at similar WPF UI in VS 2017.\r\n \r\n","Url":"https://github.com/dotnet/wpf/issues/789","RelatedDescription":"Open issue \"Unexpected UIA TextRange navigation results when moving through hyperlink UI hosted in a RichTextBox\" (#789)"},{"Id":"450274819","IsPullRequest":true,"CreatedAt":"2019-05-30T12:19:08","Actor":"dotnet-maestro[bot]","Number":"788","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190529.5\r\n- **Date Produced**: 5/30/2019 3:41 AM\r\n- **Commit**: fb62c6377a6bd163af2a7516260f064498942585\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19279.5\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19279.5\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/788","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#788)"},{"Id":"450212213","IsPullRequest":false,"CreatedAt":"2019-05-30T09:22:58","Actor":"BackDoorManUC","Number":"786","RawContent":null,"Title":"SharedSizeGroup and Visibility.Collapsed","State":"open","Body":"* .NET Core Version: 3.0\r\n* Windows version: 1803 (17763.437)\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Yes\r\n\r\n <!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\n \r\n **Problem description:**\r\n\r\nhttps://stackoverflow.com/questions/9977344/grid-column-with-sharedsizegroup-does-not-reclaim-the-size-when-it-is-collapse\r\n\r\n> I have the following xaml:\r\n> \r\n> ```xaml\r\n> <Window x:Class=\"SharedSizeGroupBug.MainWindow\"\r\n>     xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\r\n>     xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\r\n>     Title=\"MainWindow\" Height=\"350\" Width=\"525\">\r\n> <Window.Resources>\r\n>     <BooleanToVisibilityConverter x:Key=\"BooleanToVisibilityConverter\" />\r\n> </Window.Resources>\r\n> \r\n> <StackPanel Grid.IsSharedSizeScope=\"True\">\r\n>     <ToggleButton IsChecked=\"False\" Name=\"TB\" Content=\"Toggle\" />\r\n> \r\n>     <Grid>\r\n>         <Grid.ColumnDefinitions>\r\n>             <ColumnDefinition Width=\"Auto\" SharedSizeGroup=\"DZG\" />\r\n>             <ColumnDefinition Width=\"Auto\" />\r\n>         </Grid.ColumnDefinitions>\r\n> \r\n>         <TextBlock Text=\"A1\" Width=\"100\" />\r\n>         <TextBlock Text=\"A2\" Grid.Column=\"1\" />\r\n>     </Grid>\r\n> \r\n>     <Grid Visibility=\"{Binding IsChecked, ElementName=TB, Converter={StaticResource BooleanToVisibilityConverter}}\">\r\n>         <Grid.ColumnDefinitions>\r\n>             <ColumnDefinition Width=\"Auto\" SharedSizeGroup=\"DZG\" />\r\n>             <ColumnDefinition Width=\"Auto\" />\r\n>         </Grid.ColumnDefinitions>\r\n> \r\n>         <TextBlock Text=\"B1\" Width=\"200\" />\r\n>         <TextBlock Text=\"B2\" Grid.Column=\"1\" />\r\n>     </Grid>\r\n> </StackPanel>\r\n> </Window>\r\n> ```\r\n> When you try this, the initial state the first column is 100 wide. When the button is pressed and the second grid is made visible, the first column is made 200 wide. However, when you press the button again, the column will still be 200 wide.\r\n\r\n \r\nApparently, it works with Visibility.Hidden but it doesn't with Visibility.Collapsed. Columns/rows don't get remeasured.","Url":"https://github.com/dotnet/wpf/issues/786","RelatedDescription":"Open issue \"SharedSizeGroup and Visibility.Collapsed\" (#786)"},{"Id":"450098693","IsPullRequest":false,"CreatedAt":"2019-05-30T05:02:47","Actor":"DaZiYuan","Number":"785","RawContent":null,"Title":" Screen.AllScreens return different size ","State":"closed","Body":"* .NET Core Version: (e.g. 3.0 Preview1, or daily build number, use `dotnet --info`)\r\n* Windows version: (`winver`)\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Yes/No\r\n\r\n <!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\n \r\n **Problem description:**\r\n Screen.AllScreens return different size between framework and netcore ,system DPI 125%\r\n **Actual behavior:** <!-- callstack for crashes / exceptions -->\r\n net core\r\n![image](https://user-images.githubusercontent.com/80653/58603529-b1849300-82c3-11e9-8afc-7dee8439d1fc.png)\r\n\r\n **Expected behavior:**\r\n framework 4.7.2\r\n![image](https://user-images.githubusercontent.com/80653/58603550-c9f4ad80-82c3-11e9-8143-64efed9d4c22.png)\r\n\r\n **Minimal repro:**\r\n https://github.com/giantapp-libraries/LiveWallpaperEngine/blob/master/LiveWallpaperEngine/LiveWallpaperEngineManager.cs\r\n\r\nLine:56\r\n","Url":"https://github.com/dotnet/wpf/issues/785","RelatedDescription":"Closed issue \" Screen.AllScreens return different size \" (#785)"},{"Id":"450078219","IsPullRequest":false,"CreatedAt":"2019-05-30T00:41:16","Actor":"grubioe","Number":"784","RawContent":null,"Title":"Watson/Telemetry for .NET Core ","State":"open","Body":"EPIC to Track Watson/Telemetry related items","Url":"https://github.com/dotnet/wpf/issues/784","RelatedDescription":"Open issue \"Watson/Telemetry for .NET Core \" (#784)"},{"Id":"449528739","IsPullRequest":false,"CreatedAt":"2019-05-29T21:49:31","Actor":"vatsan-madhavan","Number":"777","RawContent":null,"Title":"Port code-generator for WindowsBase\\System\\Windows\\AccessibilitySwitches.cs ","State":"closed","Body":"[`WindowsBase\\System\\Windows\\AccessibilitySwitches.cs`](https://github.com/dotnet/wpf/blob/master/src/Microsoft.DotNet.Wpf/src/WindowsBase/System/Windows/AccessibilitySwitches.cs) is supposed to be generated using a T4 text template. \r\n\r\nThis T4 text template is not yet ported to [dotnet/wpf](https://github.com/dotnet/wpf). Port this before RTM => we'll need this for ongoing work, as well as for servicing. \r\n\r\n/cc @rladuca ","Url":"https://github.com/dotnet/wpf/issues/777","RelatedDescription":"Closed issue \"Port code-generator for WindowsBase\\System\\Windows\\AccessibilitySwitches.cs \" (#777)"},{"Id":"450018276","IsPullRequest":false,"CreatedAt":"2019-05-29T21:00:11","Actor":"stevenbrix","Number":"782","RawContent":null,"Title":"Get CI builds running in Helix","State":"open","Body":"","Url":"https://github.com/dotnet/wpf/issues/782","RelatedDescription":"Open issue \"Get CI builds running in Helix\" (#782)"},{"Id":"449944413","IsPullRequest":false,"CreatedAt":"2019-05-29T19:31:10","Actor":"stevenbrix","Number":"781","RawContent":null,"Title":"Fix developer guide and copy script","State":"closed","Body":"some minor typos in those things\r\n","Url":"https://github.com/dotnet/wpf/issues/781","RelatedDescription":"Closed issue \"Fix developer guide and copy script\" (#781)"},{"Id":"449503787","IsPullRequest":true,"CreatedAt":"2019-05-29T16:34:24","Actor":"rladuca","Number":"776","RawContent":null,"Title":"Wrap COM objects coming out of Clipboard.GetDataObjectInternal.","State":"closed","Body":"In the case where Clipboard objects are COM objects, this protects us from a System.InvalidOperationException from the marshaler when calling IDataObject.GetData(Type) due to Type not being marked with the COMVisibleAttribute.\r\n\r\nThis was already present in WPF on .NET Core 3 before and was accidentally dropped during a .NET Framework sync.\r\n\r\nFixes #735 ","Url":"https://github.com/dotnet/wpf/pull/776","RelatedDescription":"Closed or merged PR \"Wrap COM objects coming out of Clipboard.GetDataObjectInternal.\" (#776)"},{"Id":"449502151","IsPullRequest":false,"CreatedAt":"2019-05-29T13:23:34","Actor":"miguep","Number":"775","RawContent":null,"Title":"WPF apps crash when using clipboard APIs","State":"closed","Body":"* .NET Core Version: 3.0.100-preview6-012099\r\n* Windows version: Win10\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: No\r\n\r\n \r\n **Problem description:**\r\n \r\nUsing some of the Clipboard APIs, throw exceptions and cause application crashes.\r\n\r\nE.g.\r\nClipboard.SetData(DataFormats.UnicodeText, \"abc\");\r\n\r\n\r\n **Actual behavior:** <!-- callstack for crashes / exceptions -->\r\n\r\nThrows an ExecutionEngineException.\r\n \r\n **Expected behavior:**\r\n\r\nsets the data to the clipboard without issue\r\n \r\n **Minimal repro:**\r\nClipboard.SetData(DataFormats.UnicodeText, \"abc\");","Url":"https://github.com/dotnet/wpf/issues/775","RelatedDescription":"Closed issue \"WPF apps crash when using clipboard APIs\" (#775)"},{"Id":"449798825","IsPullRequest":true,"CreatedAt":"2019-05-29T13:19:42","Actor":"dotnet-maestro[bot]","Number":"780","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Build**: 20190528.10\r\n- **Date Produced**: 5/28/2019 9:17 PM\r\n- **Commit**: 15c3713f381b6208032e951e577be263152c310e\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng** -> 4.8.0-preview6.19278.10\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/780","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#780)"},{"Id":"449769678","IsPullRequest":true,"CreatedAt":"2019-05-29T12:19:17","Actor":"dotnet-maestro[bot]","Number":"779","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190528.1\r\n- **Date Produced**: 5/28/2019 6:41 PM\r\n- **Commit**: 11f90a2a260422201895de58e57170131ab4efe7\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19278.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19278.1\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/779","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#779)"},{"Id":"449550392","IsPullRequest":false,"CreatedAt":"2019-05-29T01:22:30","Actor":"glent1","Number":"778","RawContent":null,"Title":"Any text based control makes WPF crash in preview 6","State":"closed","Body":"**Dotnet core Version:**   \r\n3.0.100-preview6-012099\r\n\r\n**Windows version:** \r\n1803 (OS Build 17134.648)\r\n\r\n**Does the bug reproduce also in WPF for .NET Framework 4.8?**\r\nUnknown, but so fundamental and trivial, it shouldn't matter\r\n\r\n**Problem description**  \r\nAny text based control makes WPF crash on startup\r\n\r\n**Actual Behaviour**\r\n\r\n System.TypeInitializationException\r\n  HResult=0x80131534\r\n  Message=The type initializer for 'System.Windows.Media.FontFamily' threw an exception.\r\n  Source=PresentationCore\r\n  StackTrace:\r\n   at System.Windows.Media.Typeface..ctor(FontFamily fontFamily, FontStyle style, FontWeight weight, FontStretch stretch)\r\n   at MS.Internal.Text.DynamicPropertyReader.GetTypeface(DependencyObject element)\r\n   at MS.Internal.Text.TextProperties.InitCommon(DependencyObject target)\r\n   at MS.Internal.Text.TextProperties..ctor(FrameworkElement target, Boolean isTypographyDefaultValue)\r\n   at System.Windows.Controls.TextBlock.GetLineProperties()\r\n   at System.Windows.Controls.TextBlock.EnsureTextBlockCache()\r\n   at System.Windows.Controls.TextBlock.MeasureOverride(Size constraint)\r\n   at System.Windows.FrameworkElement.MeasureCore(Size availableSize)\r\n   at System.Windows.UIElement.Measure(Size availableSize)\r\n   at System.Windows.Controls.Grid.MeasureOverride(Size constraint)\r\n   at System.Windows.FrameworkElement.MeasureCore(Size availableSize)\r\n   at System.Windows.UIElement.Measure(Size availableSize)\r\n   at MS.Internal.Helper.MeasureElementWithSingleChild(UIElement element, Size constraint)\r\n   at System.Windows.Controls.ContentPresenter.MeasureOverride(Size constraint)\r\n   at System.Windows.FrameworkElement.MeasureCore(Size availableSize)\r\n   at System.Windows.UIElement.Measure(Size availableSize)\r\n   at System.Windows.Controls.Decorator.MeasureOverride(Size constraint)\r\n   at System.Windows.Documents.AdornerDecorator.MeasureOverride(Size constraint)\r\n   at System.Windows.FrameworkElement.MeasureCore(Size availableSize)\r\n   at System.Windows.UIElement.Measure(Size availableSize)\r\n   at System.Windows.Controls.Border.MeasureOverride(Size constraint)\r\n   at System.Windows.FrameworkElement.MeasureCore(Size availableSize)\r\n   at System.Windows.UIElement.Measure(Size availableSize)\r\n   at System.Windows.Window.MeasureOverrideHelper(Size constraint)\r\n   at System.Windows.Window.MeasureOverride(Size availableSize)\r\n   at System.Windows.FrameworkElement.MeasureCore(Size availableSize)\r\n   at System.Windows.UIElement.Measure(Size availableSize)\r\n   at System.Windows.Interop.HwndSource.SetLayoutSize()\r\n   at System.Windows.Interop.HwndSource.set_RootVisualInternal(Visual value)\r\n   at System.Windows.Interop.HwndSource.set_RootVisual(Visual value)\r\n   at System.Windows.Window.SetRootVisual()\r\n   at System.Windows.Window.SetRootVisualAndUpdateSTC()\r\n   at System.Windows.Window.SetupInitialState(Double requestedTop, Double requestedLeft, Double requestedWidth, Double requestedHeight)\r\n   at System.Windows.Window.CreateSourceWindow(Boolean duringShow)\r\n   at System.Windows.Window.CreateSourceWindowDuringShow()\r\n   at System.Windows.Window.SafeCreateWindowDuringShow()\r\n   at System.Windows.Window.ShowHelper(Object booleanBox)\r\n   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, Object args, Int32 numArgs)\r\n   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(Object source, Delegate callback, Object args, Int32 numArgs, Delegate catchHandler)\r\n   at System.Windows.Threading.DispatcherOperation.InvokeImpl()\r\n   at System.Windows.Threading.DispatcherOperation.InvokeInSecurityContext(Object state)\r\n   at MS.Internal.CulturePreservingExecutionContext.CallbackWrapper(Object obj)\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at MS.Internal.CulturePreservingExecutionContext.Run(CulturePreservingExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Windows.Threading.DispatcherOperation.Invoke()\r\n   at System.Windows.Threading.Dispatcher.ProcessQueue()\r\n   at System.Windows.Threading.Dispatcher.WndProcHook(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam, Boolean& handled)\r\n   at MS.Win32.HwndWrapper.WndProc(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam, Boolean& handled)\r\n   at MS.Win32.HwndSubclass.DispatcherCallbackOperation(Object o)\r\n   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, Object args, Int32 numArgs)\r\n   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(Object source, Delegate callback, Object args, Int32 numArgs, Delegate catchHandler)\r\n   at System.Windows.Threading.Dispatcher.LegacyInvokeImpl(DispatcherPriority priority, TimeSpan timeout, Delegate method, Object args, Int32 numArgs)\r\n   at MS.Win32.HwndSubclass.SubclassWndProc(IntPtr hwnd, Int32 msg, IntPtr wParam, IntPtr lParam)\r\n   at MS.Win32.UnsafeNativeMethods.DispatchMessage(MSG& msg)\r\n   at System.Windows.Threading.Dispatcher.PushFrameImpl(DispatcherFrame frame)\r\n   at System.Windows.Threading.Dispatcher.PushFrame(DispatcherFrame frame)\r\n   at System.Windows.Threading.Dispatcher.Run()\r\n   at System.Windows.Application.RunDispatcher(Object ignore)\r\n   at System.Windows.Application.RunInternal(Window window)\r\n   at System.Windows.Application.Run(Window window)\r\n   at System.Windows.Application.Run()\r\n   at wpfv6.App.Main()\r\n\r\nInner Exception 1:\r\nTypeInitializationException: The type initializer for 'MS.Internal.FontCache.DWriteFactory' threw an exception.\r\n\r\nInner Exception 2:\r\nInvalidCastException: Specified cast is not valid.\r\n\r\n \r\n**Expected behavior:**\r\n\r\nA WPF window with some text in it\r\n\r\n**Minimal repro:**\r\n \r\ndotnet new wpf\r\nAdd <TextBlock>T</TextBlock> to MainWindow.xaml grid\r\ndotnet run\r\n\r\nCheck eventvwr for exception text\r\n","Url":"https://github.com/dotnet/wpf/issues/778","RelatedDescription":"Closed issue \"Any text based control makes WPF crash in preview 6\" (#778)"},{"Id":"449430690","IsPullRequest":true,"CreatedAt":"2019-05-28T20:05:46","Actor":"vatsan-madhavan","Number":"774","RawContent":null,"Title":"Adding a pinned version of S.Runtime.CompilerServices.Unsafe to PresentationBuildTasks.csproj","State":"closed","Body":"Fixes #773 \r\nAs a result of https://github.com/dotnet/corefx/issues/37943, we have a pinned version of System.Memory in PresentationBuildTasks.csproj.\r\n\r\nTurns out that System.Memory v4.5.2 has a dependency on S.Runtime.CompilerServices.Unsafe v4.5.2/AssemblyVersion=4.0.4.1. Pinning this also to PresentationBuildTasks.csproj.","Url":"https://github.com/dotnet/wpf/pull/774","RelatedDescription":"Closed or merged PR \"Adding a pinned version of S.Runtime.CompilerServices.Unsafe to PresentationBuildTasks.csproj\" (#774)"},{"Id":"449430168","IsPullRequest":false,"CreatedAt":"2019-05-28T20:05:46","Actor":"vatsan-madhavan","Number":"773","RawContent":null,"Title":"Builds fail due to missing System.Runtime.CompilerServices.Unsafe","State":"closed","Body":"WPF builds are failing when invoked under msbuild with the following error:\r\n\r\nhttps://dev.azure.com/dnceng/internal/_build%2Fresults?buildId=203305&_a=summary\r\n\r\n```\r\n.packages\\microsoft.net.sdk.windowsdesktop\\3.0.0-preview6.19274.6\\targets\\Microsoft.WinFX.targets(243,9): error MC1000: Unknown build error, 'Could not load file or assembly 'System.Runtime.CompilerServices.Unsafe, Version=4.0.4.1, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The system cannot find the file specified.' \r\nCmd.exe exited with code '1'.\r\n```","Url":"https://github.com/dotnet/wpf/issues/773","RelatedDescription":"Closed issue \"Builds fail due to missing System.Runtime.CompilerServices.Unsafe\" (#773)"},{"Id":"449152988","IsPullRequest":false,"CreatedAt":"2019-05-28T17:17:43","Actor":"albahari","Number":"771","RawContent":null,"Title":"TypeInitializationException in System.Windows.Media.FontFamily","State":"closed","Body":"* .NET Core Version: 3.0.0preview6.19270.\r\n* Windows version: 10.0.17763.0\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: No\r\n\r\n **Problem description:**\r\n\r\nI have a WPF app in beta that targets .NET Core 3. When some users run it, it crashes with a TypeInitializationException - The type initializer for 'System.Windows.Media.FontFamily' threw an exception. I've contacted one of the users who has tried it on another machine and got the same error.\r\n\r\nI've attached a full stack trace including IL offsets. \r\n[stacktrace.txt](https://github.com/dotnet/wpf/files/3226579/stacktrace.txt)\r\n\r\n","Url":"https://github.com/dotnet/wpf/issues/771","RelatedDescription":"Closed issue \"TypeInitializationException in System.Windows.Media.FontFamily\" (#771)"},{"Id":"449370679","IsPullRequest":false,"CreatedAt":"2019-05-28T16:39:24","Actor":"grubioe","Number":"772","RawContent":null,"Title":"Most(All?) WPF controls have bad hit detection when hosted in a System aware Win32 window inside a PMA app","State":"open","Body":"Copied from internal VSO ID: 893156\r\n\r\nRepro Steps\r\n=================\r\n\r\n1. Have .NET 4.8, and 150% primary, 100% secondary.  (It should be noted that this bug seems to mostly impact high primary DPI with smaller secondary DPI. A small primary DPI with larger secondary DPI seems to behave almost perfectly, but still has some hit detection issues.)\r\n2. Launch repro proj exe on primary\r\n4. Move it to secondary\r\n5. Hover over various controls\r\n\r\n\r\n**Expected:**  Hit detection works correctly for all controls in all positions\r\n\r\n**Actual:**   Hit detection gets worse as you move further away from the top/left corner of the content\r\n\r\n**Specifically:**\r\n\r\n1) The top/left quadrant controls should all work normally\r\n\r\n2) The top/right quadrant should have issues when hovering on the right side controls only\r\n\r\n3) The bottom/left quadrant should have issues when hovering on the bottom half(-ish) controls only (some of the bottom radios start to have issues too)\r\n\r\n4) The bottom/right quadrant should have issues for all of the controls\r\n\r\n5) All combobox dropdowns have issues but the issues do get worse the further away from top/left you get (tracked by separate VSO bug #772815)","Url":"https://github.com/dotnet/wpf/issues/772","RelatedDescription":"Open issue \"Most(All?) WPF controls have bad hit detection when hosted in a System aware Win32 window inside a PMA app\" (#772)"},{"Id":"449014559","IsPullRequest":false,"CreatedAt":"2019-05-27T23:59:36","Actor":"Mrnikbobjeff","Number":"770","RawContent":null,"Title":"Reduce Heap allocations","State":"open","Body":"I have found several instances where we can eliminate heap allocations via simple changes such as iterating over an IList via for loop to avoid the boxing allocation for the enumerator or calling ToString on value types to be passed of to string formatting. On further investigation we are allocating a ton of method group to delegate conversions. From the C#  specification section 6.6, describing the run-time evaluation of a method group conversion:\r\nA new instance of the delegate type D is allocated. If there is not enough memory available to allocate the new instance, a System.OutOfMemoryException is thrown and no further steps are executed.\r\n\r\nThe section for anonymous function conversions (6.5.1) includes this:\r\n\r\nConversions of semantically identical anonymous functions with the same (possibly empty) set of captured outer variable instances to the same delegate types are permitted (but not required) to return the same delegate instance.\r\nAnd we have lots of places where these conversions happen. If wanted I would love to optimize these problems, the code will stay the same semantically but allocate less.","Url":"https://github.com/dotnet/wpf/issues/770","RelatedDescription":"Open issue \"Reduce Heap allocations\" (#770)"},{"Id":"448996408","IsPullRequest":false,"CreatedAt":"2019-05-27T21:38:43","Actor":"Mrnikbobjeff","Number":"769","RawContent":null,"Title":"Improve allocation with System.Buffers","State":"open","Body":"I mainly looked through windowbase and there are various array allocations to read stream or similar. Other small arrays are so small that they could be stackallocated as they are constant length. For a perfect example check CFStream. These allocations could be removed with System.Buffers which would not have a detrimental impact on anything as far as i can tell.\r\nI created a branch with the possible conversions in the WindowBase project. The improvements remove several immediate LOH allocations which stick around for a long time, in some instances I decided to leave the byte array allocation as the direct usage of these arrays required zeroed arrays. We could of course clear them after getting them from the ArrayPool, but then we would have to consider the tradeoff between allocation(cheap&fast) vs pool obtaining(cheap&fast) and zeroing the array (more expensive than allocation)","Url":"https://github.com/dotnet/wpf/issues/769","RelatedDescription":"Open issue \"Improve allocation with System.Buffers\" (#769)"},{"Id":"448933174","IsPullRequest":false,"CreatedAt":"2019-05-27T16:29:13","Actor":"Mrnikbobjeff","Number":"768","RawContent":null,"Title":"Improvements to Quaternion and other structs","State":"open","Body":"After looking over Quaternion I realised that it could heavily benefit from vectorization with new hardware intrinsics in .net core. I started on vectorizing some funcions there and have massive speedups measured in Benchmark.Net. Also, Why does Quaternion not implement IEquatable<Quaternion> as suggested per Microsoft struct guidelines? This enables EqualityComparer<T> to take a faster path, which improves creation time of HashSet<Quaternion> and similar. Finally, we could use the new HashCode.Combine<> in a lot of places, which would be superior to rolling out manual implementations for so many types. Finally, we could improve performance of GetHashCode in its current implementation by not calling the getter method for all properties and using the fields instead, as IsDistinguishedIdentity is already checked.","Url":"https://github.com/dotnet/wpf/issues/768","RelatedDescription":"Open issue \"Improvements to Quaternion and other structs\" (#768)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-05-31T05:30:49.640865Z","RunDurationInMilliseconds":874}