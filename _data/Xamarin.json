{"Data":{"Blog":{"FeedItems":[{"Title":"Getting Started With WorkManager","PublishedOn":"2019-04-08T18:12:29+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"If you need to schedule a background task on Android, you&#8217;re probably familiar with all of the various ways to accomplish this such as:\n\nGoogle Cloud Messaging\nFirebase Cloud...","Href":"https://devblogs.microsoft.com/xamarin/getting-started-workmanager/","RawContent":null},{"Title":"Visual Challenge Conquered!","PublishedOn":"2019-04-03T19:03:49+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The post Visual Challenge Conquered! appeared first on Xamarin Blog.","Href":"https://devblogs.microsoft.com/xamarin/visual-challenge-conquered/","RawContent":null},{"Title":"What’s New for Xamarin Developers in Visual Studio 2019","PublishedOn":"2019-04-02T19:56:18+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The post What&#8217;s New for Xamarin Developers in Visual Studio 2019 appeared first on Xamarin Blog.","Href":"https://devblogs.microsoft.com/xamarin/xamarin-visual-studio-2019/","RawContent":null},{"Title":"Xamarin and .NET Developer Events in April","PublishedOn":"2019-04-01T19:05:22+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The post Xamarin and .NET Developer Events in April appeared first on Xamarin Blog.","Href":"https://devblogs.microsoft.com/xamarin/xamarin-and-net-developer-events-in-april/","RawContent":null},{"Title":"GlideX For Fast Images on Android","PublishedOn":"2019-03-28T16:01:13+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The post GlideX For Fast Images on Android appeared first on Xamarin Blog.","Href":"https://devblogs.microsoft.com/xamarin/glidex-fast-images-android/","RawContent":null},{"Title":"Introducing the Xamarin.iOS Interpreter","PublishedOn":"2019-03-26T16:41:43+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The post Introducing the Xamarin.iOS Interpreter appeared first on Xamarin Blog.","Href":"https://devblogs.microsoft.com/xamarin/introducing-xamarin-ios-interpreter/","RawContent":null},{"Title":"Join the Xamarin Visual Challenge","PublishedOn":"2019-03-22T20:00:01+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For the past month, we have been running a low-key challenge to flex the new Xamarin.Forms 3.6 feature, Visual with Material Design. For more information about what Visual is and what you can do with...","Href":"https://devblogs.microsoft.com/xamarin/join-the-xamarin-visual-challenge/","RawContent":null},{"Title":"Get Your Apps Ready for Apple’s New Watch Processor Architecture","PublishedOn":"2019-03-20T19:59:52+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The post Get Your Apps Ready for Apple&#8217;s New Watch Processor Architecture appeared first on Xamarin Blog.","Href":"https://devblogs.microsoft.com/xamarin/apple-new-processor-architecture/","RawContent":null},{"Title":"Xamarin.Essentials Adds Detect Shake, Browser Customization, Color Helpers, and More!","PublishedOn":"2019-03-18T18:54:27+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The post Xamarin.Essentials Adds Detect Shake, Browser Customization, Color Helpers, and More! appeared first on Xamarin Blog.","Href":"https://devblogs.microsoft.com/xamarin/xamarin-essentials-detect-shake-browser-customization/","RawContent":null},{"Title":"Introducing the New Xamarin Customer Showcase","PublishedOn":"2019-03-15T16:53:07+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The post Introducing the New Xamarin Customer Showcase appeared first on Xamarin Blog.","Href":"https://devblogs.microsoft.com/xamarin/new-xamarin-customer-showcase/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"9404182256","Type":"PullRequestEvent","CreatedAt":"2019-04-09T04:53:37","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2945","RelatedDescription":"Opened pull request \"[Xamarin.Android.Build.Tasks] _LinkAssembliesNoShrink inputs\" (#2945) at xamarin/xamarin-android","RelatedBody":"Context: https://github.com/jonathanpeppers/xamarin-android/commit/5ec3e3abf4d5f59954d7f55701a1a13d301ef757\r\n\r\nIn 5ec3e3a, I used a new `@(_ResolvedUserMonoAndroidAssemblies)` item\r\ngroup to improve incremental build performance. Targets that only need\r\nto perform work with `MonoAndroid` assemblies, can be skipped unless a\r\n`MonoAndroid` assembly changes.\r\n\r\nWe can use this same technique with the linker for builds with\r\n`LinkMode=None`. The only steps in this case are:\r\n\r\n    if (options.LinkNone) {\r\n        pipeline.AppendStep (new FixAbstractMethodsStep ());\r\n        pipeline.AppendStep (new OutputStep ());\r\n        return pipeline;\r\n    }\r\n\r\n`FixAbstractMethodsStep` only applies to `MonoAndroid` assemblies, so\r\nwe can use `@(_ResolvedUserMonoAndroidAssemblies)` to decide if\r\n`_LinkAssembliesNoShrink` can be skipped.\r\n\r\nFor an incremental build with a XAML change, this target was taking:\r\n\r\n    424 ms  LinkAssemblies                             1 calls\r\n\r\nThis was the Xamarin.Forms app in this repo. I would say this improves\r\nincremental build times by about 400ms for small apps."},{"Id":"9403640836","Type":"PullRequestEvent","CreatedAt":"2019-04-09T02:20:45","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2944","RelatedDescription":"Opened pull request \"[tests] potential fix for hang in MSBuild tests on Windows\" (#2944) at xamarin/xamarin-android","RelatedBody":"Context: http://build.devdiv.io/2558223\r\n\r\nWe have had a couple cases where our tests timed out:\r\n\r\n    RunNUnitTests:\r\n        packages\\NUnit.ConsoleRunner.3.9.0\\tools\\nunit3-console.exe --trace=Verbose E:\\A\\_work\\1366\\s\\build-tools\\scripts\\..\\..\\bin\\TestRelease\\Xamarin.Android.Build.Tests.dll  --labels=all --result=\"TestResult-Xamarin.Android.Build.Tests.xml;format=nunit2\" --output=\"bin\\TestRelease\\TestOutput-Xamarin.Android.Build.Tests.txt\"\r\n    ...\r\n    Attempting to cancel the build...\r\n    ...\r\n    [error]The task has timed out.\r\n\r\nLooking at the NUnit log:\r\n\r\n    InternalTrace: Initializing at level Debug\r\n    09:39:55.704 Debug [ 5] DefaultTestAssemblyBuilder: Loading E:\\A\\_work\\1366\\s\\bin\\TestRelease\\Xamarin.Android.Build.Tests.dll in AppDomain domain-\r\n    09:39:55.712 Debug [ 5] DefaultTestAssemblyBuilder: Examining assembly for test fixtures\r\n    09:39:55.718 Debug [ 5] DefaultTestAssemblyBuilder: Found 106 classes to examine\r\n    09:39:55.851 Debug [ 5] DefaultTestAssemblyBuilder: Found 27 fixtures with 448 test cases\r\n    09:39:56.064 Info  [ 5] DefaultTestAssemblyRunner: Running tests\r\n    09:39:56.071 Info  [ 5] Dispatcher: Initializing with 8 workers\r\n    ...\r\n    09:47:33.794 Info  [21] TestWorker: ParallelWorker#6 executing ReportAaptWarningsForBlankLevel(True)\r\n    09:47:36.448 Debug [21] Dispatcher: Using Direct strategy for ReportAaptWarningsForBlankLevel OneTimeTearDown\r\n    09:47:47.515 Debug [20] Dispatcher: Using Direct strategy for RepetiviteBuildUpdateSingleResource OneTimeTearDown\r\n\r\nIt seems to me that we have a hang in the `[OneTimeTearDown]` method.\r\nLooking through our code, some usage of `System.Diagnostics.Process`\r\nseems a bit suspect:\r\n\r\n    var proc = System.Diagnostics.Process.Start (new System.Diagnostics.ProcessStartInfo (adb, command) { RedirectStandardOutput = true, RedirectStandardError = true, UseShellExecute = false });\r\n    if (!proc.WaitForExit ((int)TimeSpan.FromSeconds (30).TotalMilliseconds)) {\r\n        proc.Kill ();\r\n        proc.WaitForExit ();\r\n    }\r\n    var result = proc.StandardOutput.ReadToEnd ().Trim () + proc.StandardError.ReadToEnd ().Trim ();\r\n    return result;\r\n\r\nI think this code could hang on either a call to `WaitForExit` or\r\n`ReadToEnd`.\r\n\r\nI feel like there are a few things to fix here:\r\n\r\n* We should also set `CreateNoWindow=true` and\r\n  `WindowStyle=ProcessWindowStyle.Hidden`.\r\n* If the timeout is hit, I don't think we should actually try to read\r\n  from stdout/stderr. That text is going to be invalid anyway?\r\n* We should call `RunProcess` so we have less code in `RunAdbCommand`.\r\n\r\nAfter this change, it *might* fix the hang. We could be hitting a bug\r\nin NUnit, though?"},{"Id":"9403470548","Type":"PullRequestEvent","CreatedAt":"2019-04-09T01:34:06","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2935","RelatedDescription":"Merged pull request \"[Xamarin.Android.Build.Tasks] don't copy pdb/mdb to $(OutputPath)\" (#2935) at xamarin/xamarin-android","RelatedBody":"Looking at the build output of a simple app:\r\n\r\n    > ls .\\samples\\HelloWorld\\bin\\Debug\\*.pdb\r\n      Length Name\r\n      ------ ----\r\n        1024 HelloLibrary.pdb\r\n        1304 HelloWorld.pdb\r\n    13943324 Mono.Android.pdb\r\n      153048 Mono.Security.pdb\r\n     1545052 mscorlib.pdb\r\n      106160 System.ComponentModel.Composition.pdb\r\n      393532 System.Core.pdb\r\n       43076 System.Net.Http.pdb\r\n      795468 System.pdb\r\n      325732 System.Runtime.Serialization.pdb\r\n       77008 System.ServiceModel.Internals.pdb\r\n      917588 System.Xml.pdb\r\n\r\nThere are *not* accompanying `.dll` files for many of these symbols.\r\nSome of these symbols are also quite big!\r\n\r\nI don't think we need to be copying these files to `$(OutputPath)` at\r\nall; it doesn't make sense if their accompanying assembly isn't there!\r\n\r\nIf we remove the `<CopyIfChanged/>` calls in our targets, MSBuild will\r\nhandle copying the appropriate symbol files that are needed.\r\n\r\nAfter this change, the directory looks like:\r\n\r\n    > ls .\\samples\\HelloWorld\\bin\\Debug\\*.pdb\r\n      Length Name\r\n      ------ ----\r\n      1024 HelloLibrary.pdb\r\n      1304 HelloWorld.pdb\r\n\r\n## Results ##\r\n\r\nI did a performance comparison using the Xamarin.Forms app in this\r\nrepo. It seems the extra `<CopyIfChanged/>` call was taking between\r\n25-50ms, but the bigger savings here is to not copy a 13MB\r\nMono.Android.pdb file. There could be bigger savings for developers\r\nthat have slower hardware (or don't have SSDs).\r\n\r\nOverall it seems this change saves up to 50ms for a small project on\r\ninitial build, or incremental builds where an assembly changed."},{"Id":"9403458867","Type":"PullRequestEvent","CreatedAt":"2019-04-09T01:30:55","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2943","RelatedDescription":"Merged pull request \"Bump to mono/mono/2018-10@85d1920b\" (#2943) at xamarin/xamarin-android","RelatedBody":"Fixes: https://github.com/mono/mono/issues/13804\r\nFixes: https://github.com/mono/mono/issues/13834\r\n\r\nDon't do thread state transitions in `mono_dl_fallback_register()`."},{"Id":"9402146037","Type":"PullRequestEvent","CreatedAt":"2019-04-08T20:38:48","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2943","RelatedDescription":"Opened pull request \"Bump to mono/mono/2018-10@85d1920b\" (#2943) at xamarin/xamarin-android","RelatedBody":"Fixes: https://github.com/mono/mono/issues/13804\r\nFixes: https://github.com/mono/mono/issues/13834\r\n\r\nDon't do thread state transitions in `mono_dl_fallback_register()`."},{"Id":"9401696387","Type":"PullRequestEvent","CreatedAt":"2019-04-08T19:30:31","Actor":"dellis1972","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2930","RelatedDescription":"Merged pull request \"[Xamarin.Android.Build.Tasks] <GetImportedLibraries/> perf improvements\" (#2930) at xamarin/xamarin-android","RelatedBody":"I noticed a target running on an incremental build with only a XAML\r\ncode change:\r\n\r\n    116 ms  _BuildLibraryImportsCache                  1 calls\r\n\r\nThis was using VS 2019 GA, just a blank Xamarin.Forms app.\r\n\r\nReviewing `<GetImportedLibraries/>` it had some general perf\r\nimprovements that could be done:\r\n\r\n* It called `Directory.EnumerateFiles` three times...\r\n* It used a bunch of LINQ where a `foreach` would do.\r\n\r\nAdditionally, I saw some improvements I could do at the MSBuild target\r\nlevel:\r\n\r\n    <Target Name=\"_BuildLibraryImportsCache\"\r\n            Inputs=\"$(MSBuildProjectFullPath);@(_ReferencePath);@(_ReferenceDependencyPaths);$(_AndroidBuildPropertiesCache);$(_AndroidLibraryProjectImportsCache)\"\r\n            Outputs=\"$(_AndroidLibraryImportsCache).stamp\">\r\n\r\nThis target operates on the output of `_ResolveLibraryProjectImports`,\r\nbut it was re-running if *any* assembly changed?\r\n\r\nI think the `Inputs` and `Outputs` would more appropriately be:\r\n\r\n    Inputs=\"$(_AndroidLibraryProjectImportsCache)\"\r\n    Outputs=\"$(_AndroidStampDirectory)_BuildLibraryImportsCache.stamp\"\r\n\r\nThis way, if `_ResolveLibraryProjectImports` runs and does work, it\r\nwrites to `$(_AndroidLibraryProjectImportsCache)`. We then only need\r\nto run this task when that file changes.\r\n\r\nI also updated this target so it follows our new convention for\r\nplacing stamp files in `$(_AndroidStampDirectory)`.\r\n\r\n## Results ##\r\n\r\nAn example of an initial build of the Xamarin.Forms project in this\r\nrepo:\r\n\r\n    Before:\r\n    299 ms  GetImportedLibraries                       1 calls\r\n    After:\r\n    172 ms  GetImportedLibraries                       1 calls\r\n\r\nAnd then an incremental build, that is a XAML change:\r\n\r\n    Before:\r\n    109 ms  _BuildLibraryImportsCache                  1 calls\r\n    After:\r\n    n/a\r\n\r\nThe task is skipped now:\r\n\r\n    _BuildLibraryImportsCache:\r\n    Skipping target \"_BuildLibraryImportsCache\" because all output files are up-to-date with respect to the input files.\r\n\r\nOverall, I would say there is a ~120ms improvement on initial build.\r\nIncremental builds with XAML changes have a ~100ms improvement."},{"Id":"9401652846","Type":"PullRequestEvent","CreatedAt":"2019-04-08T19:23:44","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2934","RelatedDescription":"Merged pull request \"[Xamarin.Android.Build.Tasks] filter @(ReferencePath) for MonoAndroid assemblies\" (#2934) at xamarin/xamarin-android","RelatedBody":"We have a couple MSBuild targets that need to only operate on\r\n`MonoAndroid` assemblies:\r\n\r\n* `_BuildAdditionalResourcesCache` is the precursor to\r\n  Xamarin.Build.Download\r\n* `_ResolveLibraryProjectImports` unzips\r\n  `__AndroidLibrariesProjects__.zip`, .jar/.aar files, etc.\r\n\r\nBoth of these targets all looking at *all* assemblies, so we could\r\nmake a new item group `@(_MonoAndroidReferencePath)` and use this\r\ninstead. This would both allow the tasks inside these targets to\r\noperate on less assemblies. It would also allow them to skip for\r\nchanges in NetStandard projects.\r\n\r\nI added a new `<FilterAssemblies/>` MSBuild task to filter based on\r\nthe presence of this attribute in an assembly:\r\n\r\n    [assembly: System.Runtime.Versioning.TargetFrameworkAttribute (\"MonoAndroid,Version=v8.1\")]\r\n\r\nMSBuild/Roslyn populate this attribute based on the\r\n`$(TargetFrameworkIdentifier)` of the project.\r\n\r\nOne complication is that during design-time builds, some assemblies\r\nmay not exist. I made `<FilterAssemblies/>` just skip files in this\r\ncase--using the same logic that `<ResolveLibraryProjectImports/>`\r\nuses. (I also fixed some wording/misspelling)\r\n\r\n## Results ##\r\n\r\nI tested the Xamarin.Forms project in this repo.\r\n\r\nInitial build:\r\n\r\n    Before:\r\n      78 ms  _BuildAdditionalResourcesCache             1 calls\r\n    1678 ms  _ResolveLibraryProjectImports              1 calls\r\n    After:\r\n      47 ms  FilterAssemblies                           1 calls\r\n      23 ms  _BuildAdditionalResourcesCache             1 calls\r\n    1120 ms  _ResolveLibraryProjectImports              1 calls\r\n\r\nIncremental build with XAML change:\r\n\r\n    Before:\r\n     62 ms  _BuildAdditionalResourcesCache             1 calls\r\n    300 ms  _ResolveLibraryProjectImports              1 calls\r\n    After:\r\n     62 ms  FilterAssemblies                           1 calls\r\n      0 ms  _BuildAdditionalResourcesCache             1 calls\r\n     16 ms  _ResolveLibraryProjectImports              1 calls\r\n\r\nNote that during the incremental build, since only a NetStandard\r\nassembly was updated the following targets are skipped:\r\n\r\n    _BuildAdditionalResourcesCache:\r\n    Skipping target \"_BuildAdditionalResourcesCache\" because all output files are up-to-date with respect to the input files.\r\n    ...\r\n    _ResolveLibraryProjectImports:\r\n    Skipping target \"_ResolveLibraryProjectImports\" because all output files are up-to-date with respect to the input files.\r\n\r\nOverall I would say this saves ~500ms on initial build, and ~250ms on\r\nincremental builds."}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"9404009556","Type":"PullRequestEvent","CreatedAt":"2019-04-09T04:01:58","Actor":"adrianknight89","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/5853","RelatedDescription":"Opened pull request \"Create UI test template for XAML pages\" (#5853) at xamarin/Xamarin.Forms","RelatedBody":"It's time-consuming to create XAML test files from scratch. This template will help speed things up. Also updated existing template to add an empty view model & model."},{"Id":"9403522421","Type":"PullRequestEvent","CreatedAt":"2019-04-09T01:48:48","Actor":"PureWeen","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/5852","RelatedDescription":"Opened pull request \"refactor of processing uris\" (#5852) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nStill a heavy work in progress but wanted to get the changes up for people to see progress\r\n\r\n### Issues Resolved ### \r\n- fixes #5790\r\n"},{"Id":"9403242983","Type":"PullRequestEvent","CreatedAt":"2019-04-09T00:28:18","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/5851","RelatedDescription":"Opened pull request \"[Android] Null check on Switch TrackDrawable\" (#5851) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nAdd a null check to `TrackDrawable`, which may not be set and thus may be null.\r\n\r\n### Issues Resolved ### \r\n<!-- Please use the format \"fixes #xxxx\" for each issue this PR addresses -->\r\n\r\n- fixes #5553\r\n\r\n### API Changes ###\r\n<!-- List all API changes here (or just put None), example:\r\n\r\nAdded:\r\n - string ListView.GroupName { get; set; } //Bindable Property\r\n - int ListView.GroupId { get; set; } // Bindable Property\r\n - void ListView.Clear ();\r\n\r\nChanged:\r\n - object ListView.SelectedItem => Cell ListView.SelectedItem\r\n \r\n Removed:\r\n - object ListView.SelectedItem => Cell ListView.SelectedItem\r\n \r\n -->\r\n \r\n None\r\n\r\n### Platforms Affected ### \r\n<!-- Please list all platforms affected by these changes -->\r\n\r\n\r\n- Android\r\n\r\n\r\n### Behavioral/Visual Changes ###\r\n<!-- Describe any changes that may change how a user's app behaves or appears when upgrading to this version of the codebase. -->\r\n\r\nNone\r\n\r\n### Before/After Screenshots ### \r\n<!-- If possible, take a screenshot of your test case before these changes were made and another screenshot after the changes were made to show possible visual changes. -->\r\n\r\nNot applicable\r\n\r\n### Testing Procedure ###\r\nSee if the project attached to #5456 crashes.\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [x] Rebased on top of the target branch at time of PR\r\n- [x] Changes adhere to coding standard\r\n"},{"Id":"9403224193","Type":"IssuesEvent","CreatedAt":"2019-04-09T00:22:45","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/5456","RelatedDescription":"Closed issue \"Custom view rendering issue occurs when converting the Xamarin Forms Switch control from Forms to native view in android platform\" (#5456) at xamarin/Xamarin.Forms","RelatedBody":"<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\n### Description\r\nCustom view rendering issue occurs when converting the Xamarin Forms Switch control from Forms to native android platform. \r\n\r\n### Basic Information\r\nWe have a custom control in which we use the below code to convert the Xamarin Forms view to native view in iOS platform. When trying to convert the switch control I am getting a null reference exception. \r\n\r\nCode:\r\n```csharp\r\npublic static IVisualElementRenderer Convert(Xamarin.Forms.View source, Xamarin.Forms.VisualElement valid)\r\n\t\t{\r\n\t\t\tIVisualElementRenderer render = (IVisualElementRenderer)source.GetValue(RendererProperty);\r\n\t\t\tif (render == null)\r\n\t\t\t{\r\n                object oldBindingContext = source.BindingContext;\r\n                source.Parent = valid;\r\n                if (oldBindingContext != null && source.BindingContext.ToString() != oldBindingContext.ToString())\r\n                {\r\n                    source.Parent.BindingContext = oldBindingContext;\r\n                }\r\n\r\n\t\t\t\trender = Platform.CreateRenderer(source);\r\n\t\t\t\tsource.SetValue(RendererProperty, render);\r\n\t\t\t}\r\n\r\n\t\t\treturn render;\r\n\t\t}\r\n````\r\n\r\n\r\n"},{"Id":"9403203179","Type":"IssuesEvent","CreatedAt":"2019-04-09T00:16:42","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/5778","RelatedDescription":"Closed issue \"[Android] ListView crashing when updating items just before observable collection operations\" (#5778) at xamarin/Xamarin.Forms","RelatedBody":"<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\n### Description\r\nListView crashes with the following exception:\r\n\r\n```\r\nList`1[T].get_Item (System.Int32 index)\r\nIList.get_Item (System.Int32 index)\r\nListProxy+<>c__DisplayClass36_1.<TryGetValue>b__0 () D:\\a\\1\\s\\Xamarin.Forms.Core\\ListProxy.cs:259\r\nListProxy.TryGetValue (System.Int32 index, System.Object& value) D:\\a\\1\\s\\Xamarin.Forms.Core\\ListProxy.cs:266\r\nListProxy.get_Item (System.Int32 index) D:\\a\\1\\s\\Xamarin.Forms.Core\\ListProxy.cs:126\r\nIList.get_Item (System.Int32 index) D:\\a\\1\\s\\Xamarin.Forms.Core\\ListProxy.cs:444\r\n```\r\nWhen sorting bound ObservableCollection (multiple Move calls) right after item updating.\r\n\r\n```csharp\r\npublic void Sort(Comparison<TData> comparison)\r\n{\r\n     var sortedList = new List<TData>(Items);\r\n     sortedList.Sort(comparison);\r\n\r\n     for (int i = 0; i < sortedList.Count; i++)\r\n         Move(IndexOf(sortedList[i]), i);\r\n}\r\n```\r\nOr when deleting items from ObservableCollection, right after item updating.\r\n\r\nBut it is not consistent, it does not happen every time.\r\nAlso only happening on Android.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Create ListView with item template\r\n2. Bind ItemsSource to ObservableCollection\r\n3. Update some item (which implements INotifyPropertyChanged and is bound to item template)\r\n4. Do some ObservableCollection operations like, Delete/Move right after\r\n\r\n### Expected Behavior\r\nNot crashing\r\n\r\n### Actual Behavior\r\nCrashing\r\n\r\n### Basic Information\r\n\r\n- Version with issue:\r\n3.5.0.169047"},{"Id":"9403124290","Type":"IssuesEvent","CreatedAt":"2019-04-08T23:55:17","Actor":"tmt242001","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/5699","RelatedDescription":"Closed issue \"[Material, Android] BackgroundColor not working\" (#5699) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\nWhen using Xamarin.Forms Material.\r\n\r\nif BackgroundColor is set in Picker, DatePicker, TimePicker. It does not work.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Run the attach app\r\n\r\n### Expected Behavior\r\n\r\nBackgroundColor in all controls (Picker, DatePicker, TimePicker) should be CornflowerBlue.\r\n\r\n### Actual Behavior\r\n\r\nBackgroundColor in all controls (Picker, DatePicker, TimePicker) does not change.\r\n\r\n### Basic Information\r\n\r\n- Version with issue: 3.6.0.264807\r\n- Last known good version: It works when you set Visual=\"Material\" to Visual=\"Default\"\r\n- Platform Target Frameworks: \r\n  - Android:\r\n- Nuget Packages: https://www.nuget.org/packages/Xamarin.Forms.Visual.Material/\r\n\r\n### Reproduction Link\r\n\r\n[BGColorIssue.zip](https://github.com/xamarin/Xamarin.Forms/files/3010347/BGColorIssue.zip)\r\n"},{"Id":"9403117881","Type":"IssuesEvent","CreatedAt":"2019-04-08T23:53:34","Actor":"tmt242001","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/5641","RelatedDescription":"Closed issue \"[Material,Android]: Setting focus to Entry inside ListView crashes the app\" (#5641) at xamarin/Xamarin.Forms","RelatedBody":"<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\n### Description\r\nWhen using Xamarin.Forms Material.\r\n\r\nIf there is a Entry inside ListView, Setting focus to the Entry will crash the app.\r\n### Steps to Reproduce\r\n\r\n1. Run the attach app\r\n2. Set focus to \"Inside List View\" Entry\r\n\r\n### Expected Behavior\r\n\r\nNot to crash.\r\n\r\n### Actual Behavior\r\n\r\nApp crash.\r\n\r\n### Basic Information\r\n\r\n- Version with issue: 3.6.0.264807\r\n\r\n- Last known good version: It works when you set Visual=\"Material\" to Visual=\"Default\"\r\n- IDE:\r\n- Platform Target Frameworks: \r\n  - Android\r\n- Nuget Packages: https://www.nuget.org/packages/Xamarin.Forms.Visual.Material/\r\n\r\n### Error\r\n\r\nUnhandled Exception:\r\n\r\nSystem.InvalidCastException: Specified cast is not valid. occurred\r\n\r\n### Reproduction Link\r\n\r\n[ListViewEntryIssue.zip](https://github.com/xamarin/Xamarin.Forms/files/2989939/ListViewEntryIssue.zip)\r\n"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"9402441982","Type":"PullRequestEvent","CreatedAt":"2019-04-08T21:25:55","Actor":"VincentDondain","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5874","RelatedDescription":"Opened pull request \"Bump maccore to improve beta device testing\" (#5874) at xamarin/xamarin-macios","RelatedBody":""},{"Id":"9401985510","Type":"PullRequestEvent","CreatedAt":"2019-04-08T20:14:42","Actor":"dalexsoto","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5873","RelatedDescription":"Opened pull request \"[devops] Add azure devops build support\" (#5873) at xamarin/xamarin-macios","RelatedBody":""},{"Id":"9401506261","Type":"PullRequestEvent","CreatedAt":"2019-04-08T19:01:42","Actor":"mandel-macaque","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5872","RelatedDescription":"Opened pull request \"[XHarness] Ignore System.Data tests until the correct fix lands in mono.\" (#5872) at xamarin/xamarin-macios","RelatedBody":"The tests fail on device, they can be reneabled after we get PR\r\nhttps://github.com/mono/mono/pull/13935 landed and backported."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1115323538091720704","CreatedAt":"2019-04-08T18:40:27+00:00","UserScreenname":"xamarinhq","Text":"Say 'Hello' to WorkManager - a library that makes it easy to schedule deferrable, asynchronous tasks even if the ap… https://t.co/xOYvf5E0K0","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":68,"FavoriteCount":28,"RawContent":null},{"Id":"1113833658920472576","CreatedAt":"2019-04-04T16:00:12+00:00","UserScreenname":"xamarinhq","Text":"Join us live right now for another @dotnet #CommunityStandup with live demoes and QA from the #Xamarin team https://t.co/Umwxz8RtPj","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":31,"FavoriteCount":11,"RawContent":null},{"Id":"1113554700702449664","CreatedAt":"2019-04-03T21:31:44+00:00","UserScreenname":"xamarinhq","Text":"Last week we issued a challenge to the Xamarin community to use the new Material Design controls with Visual by rep… https://t.co/JpaGEihELG","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":142,"FavoriteCount":52,"RawContent":null},{"Id":"1113137014768066560","CreatedAt":"2019-04-02T17:52:00+00:00","UserScreenname":"xamarinhq","Text":"News from the #VisualStudio 2019 Launch Event. See what’s new for #Xamarin Developers in #VS2019,… https://t.co/ylrA7eBnQ4","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":145,"FavoriteCount":71,"RawContent":null},{"Id":"1112804184166944768","CreatedAt":"2019-04-01T19:49:27+00:00","UserScreenname":"xamarinhq","Text":"Learn about the new, exciting releases and tooling to help jumpstart your next mobile development project.\n\nJoin us… https://t.co/4AhXCdCrB0","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":27,"FavoriteCount":13,"RawContent":null},{"Id":"1111358962681765893","CreatedAt":"2019-03-28T20:06:39+00:00","UserScreenname":"xamarinhq","Text":"Unlock the power of Glide with “GlideX”: a simple library to swap-in Glide’s image loading implementation in-place… https://t.co/bAk49l9er6","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":47,"FavoriteCount":25,"RawContent":null},{"Id":"1111318034789158912","CreatedAt":"2019-03-28T17:24:01+00:00","UserScreenname":"xamarinhq","Text":"How are we doing? The #Xamarin March survey is now ready for your feedback: https://t.co/yfktVy49Pl \nIt's only avai… https://t.co/gX2uC9QShF","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":54,"FavoriteCount":37,"RawContent":null},{"Id":"1110599405390962693","CreatedAt":"2019-03-26T17:48:26+00:00","UserScreenname":"xamarinhq","Text":"Interpret some of the #CSharp in your application while compiling the rest ahead of time as usual.\n\nCool.... Introd… https://t.co/vkhDptAeTr","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":95,"FavoriteCount":44,"RawContent":null},{"Id":"1109140611515498502","CreatedAt":"2019-03-22T17:11:43+00:00","UserScreenname":"xamarinhq","Text":"https://t.co/GFuU36E9x5 - Let's walk through a basic building block of #Xamarin.Forms. In the latest episode of Xam… https://t.co/qczJXvqcNK","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":68,"FavoriteCount":29,"RawContent":null},{"Id":"1108410911151345664","CreatedAt":"2019-03-20T16:52:09+00:00","UserScreenname":"xamarinhq","Text":"We're ready for testing &amp; app submission. The latest #Xamarin .iOS SDKs shipping with #VS2019 and #VS4Mac 8.0, are… https://t.co/KC1Gih3MFF","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":59,"FavoriteCount":26,"RawContent":null},{"Id":"1107723971531862017","CreatedAt":"2019-03-18T19:22:29+00:00","UserScreenname":"xamarinhq","Text":"We have received some great pull requests to add some new features and that have gone into the newest release. Now… https://t.co/EqNQUDloOm","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":119,"FavoriteCount":47,"RawContent":null},{"Id":"1106650380182659080","CreatedAt":"2019-03-15T20:16:25+00:00","UserScreenname":"xamarinhq","Text":"Introducing the New Xamarin Customer Showcase\n\nHighlighting the amazing work developers are doing for all sorts of… https://t.co/yQbcA4cYc6","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":97,"FavoriteCount":42,"RawContent":null},{"Id":"1106576630884065280","CreatedAt":"2019-03-15T15:23:22+00:00","UserScreenname":"xamarinhq","Text":"This week on the #XamarinShow, @JamesMontemagno &amp; @JonathanPeppers show us how to optimize image loading for Androi… https://t.co/FkiznwhBep","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":74,"FavoriteCount":17,"RawContent":null},{"Id":"1105942645308678144","CreatedAt":"2019-03-13T21:24:08+00:00","UserScreenname":"xamarinhq","Text":"There have been some drastic changes across key libraries for Google Play Services &amp; Android Support. Let's get a q… https://t.co/heywxPz0Qs","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":41,"FavoriteCount":25,"RawContent":null},{"Id":"1105573743986917377","CreatedAt":"2019-03-12T20:58:15+00:00","UserScreenname":"xamarinhq","Text":"#MFractor is a powerful #VS4Mac extension to streamline Xamarin app dev so you can save significant time &amp; effort o… https://t.co/pEwcgwzd3t","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":45,"FavoriteCount":22,"RawContent":null},{"Id":"1105491570583851008","CreatedAt":"2019-03-12T15:31:44+00:00","UserScreenname":"xamarinhq","Text":".@codemillmatt &amp; @JamesMontemagno talk about a ton of newness out there for all mobile devs including a hot new… https://t.co/05m3VTmUBe","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":62,"FavoriteCount":24,"RawContent":null},{"Id":"1103762250509283332","CreatedAt":"2019-03-07T21:00:02+00:00","UserScreenname":"xamarinhq","Text":"Introducing Material Design; a suite of cross-platform components in the #Xamarin.Forms 3.6 Visual feature that boo… https://t.co/gin9lpb0eQ","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":150,"FavoriteCount":70,"RawContent":null},{"Id":"1103750171215699968","CreatedAt":"2019-03-07T20:12:02+00:00","UserScreenname":"xamarinhq","Text":"Level up your mobile development skills at #MSBuild, May 6-8, 2019 in Seattle. Registration is now open!… https://t.co/EZNWhIn3p6","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":41,"FavoriteCount":9,"RawContent":null},{"Id":"1103709031066189825","CreatedAt":"2019-03-07T17:28:33+00:00","UserScreenname":"xamarinhq","Text":"Happening right now! Join the Mobile #dotNET Teams for our community stand-up covering great community contribution… https://t.co/9HUp86ZqBU","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":30,"FavoriteCount":16,"RawContent":null}]}},"RunOn":"2019-04-09T05:30:53.6753986Z","RunDurationInMilliseconds":2197}