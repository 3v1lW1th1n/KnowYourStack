{"Data":{"GitHub":{"Issues":[{"Id":"451744537","IsPullRequest":true,"CreatedAt":"2019-06-04T00:28:35","Actor":"najeeb-kazmi","Number":"3815","RawContent":null,"Title":"Fix the treatment of LightGbm Evaluation Metric parameters in ML.NET …","State":"open","Body":"…and make them conform to LightGbm\r\n\r\nFixes #3761 plus some related issues discovered during investigation\r\n\r\n1. There was a bug in LightGbm `EvaluateMetricType` where if a user specified `EvaluateMetricType.Default`, the metric would not get added to the options Dictionary, and `LightGbmWrappedTraining` would throw because of that. \r\n\r\n2. Secondly, `EvaluateMetricType.Default` in LightGbm is supposed to be an empty string \"\" and LightGbm chooses the default metric according to the problem type when this is specified. This was not present in ML.NET parameter name mappings. `EvaluateMetricType.None` is supposed to be \"None\" in LightGbm but was \"\" in ML.NET parameter name mappings.\r\n\r\n3. Third, in ML.NET, the default `EvaluationMetric` is set to `EvaluateMetricType.Error` for multiclass, `EvaluationMetricType.LogLoss` for binary, and so on. This leads to inconsistent behavior from the user's perspective: If a user specified `EvaluationMetric = EvaluateMetricType.Default`, the parameter passed to LightGbm would be the empty string \"\" but if they do not specify `EvaluationMetric` at all, the parameter passed to LightGbm would be Error for multiclass, LogLoss for binary, and so on.\r\n\r\nThis PR does the following:\r\n- Fixes the bug in (1)\r\n- Addresses (2) by adding all the parameters to the options dictionary with the correct values (i.e. conforming to LightGbm [docs](https://lightgbm.readthedocs.io/en/latest/Parameters.html#metric-parameters)\r\n- Addresses (3) by changing the default `EvaluationMetric` in ML.NET to `EvaluationMetricType.Default`\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/3815","RelatedDescription":"Open PR \"Fix the treatment of LightGbm Evaluation Metric parameters in ML.NET …\" (#3815)"},{"Id":"450467731","IsPullRequest":true,"CreatedAt":"2019-06-03T23:55:23","Actor":"daholste","Number":"3794","RawContent":null,"Title":"[AutoML] Cross validation fixes; validate empty training / validation input data","State":"closed","Body":"Updates --\r\n- In the AutoML API -- when calling the `Execute` method signature that contains both training & validation data, if validation data is null, route to the `Execute` method that doesn't contain validation data / that splits the data in a train/test or cross-val manner depending on the # of rows.\r\n- Don't crash if some cross val splits have empty train/test data. As long as not all splits have empty train or test data, proceed only using splits w/ non-empty train & test sets. Explicitly throw an exception if all splits either have empty train or test sets.\r\n- Validate input training & validation data (if explicitly provided) are not empty","Url":"https://github.com/dotnet/machinelearning/pull/3794","RelatedDescription":"Closed or merged PR \"[AutoML] Cross validation fixes; validate empty training / validation input data\" (#3794)"},{"Id":"451649636","IsPullRequest":true,"CreatedAt":"2019-06-03T22:59:29","Actor":"abgoswam","Number":"3809","RawContent":null,"Title":"Check for number of input columns in concat transform","State":"closed","Body":"Fixes #3061 \r\n\r\nThe PR makes the following changes:\r\n- Follows Solution A mentioned in the issue\r\n- Added a unit test \r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/3809","RelatedDescription":"Closed or merged PR \"Check for number of input columns in concat transform\" (#3809)"},{"Id":"451720642","IsPullRequest":true,"CreatedAt":"2019-06-03T22:41:49","Actor":"daholste","Number":"3814","RawContent":null,"Title":"Expose NeedCalibration property of TrainerInfo","State":"open","Body":"Closes https://github.com/dotnet/machinelearning/issues/3813","Url":"https://github.com/dotnet/machinelearning/pull/3814","RelatedDescription":"Open PR \"Expose NeedCalibration property of TrainerInfo\" (#3814)"},{"Id":"451719517","IsPullRequest":false,"CreatedAt":"2019-06-03T22:37:35","Actor":"daholste","Number":"3813","RawContent":null,"Title":"Can we make NeedCalibration property of TrainerInfo public?","State":"open","Body":"Could we make the `NeedCalibration` property in `TrainerInfo` public?\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/7ca768a8740c5c873c7f26f2c71e0fa3ea28ea40/src/Microsoft.ML.Core/Prediction/TrainerInfo.cs#L30\r\n\r\nThis would help AutoML know when & when not to calibrate","Url":"https://github.com/dotnet/machinelearning/issues/3813","RelatedDescription":"Open issue \"Can we make NeedCalibration property of TrainerInfo public?\" (#3813)"},{"Id":"451712771","IsPullRequest":true,"CreatedAt":"2019-06-03T22:13:25","Actor":"wschin","Number":"3812","RawContent":null,"Title":"[WIP] Tree-based featurization","State":"open","Body":"Fix #2482. Generating features using tree structure has been a popular technique in data mining. This PR exposes this internal-only feature to the public.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/3812","RelatedDescription":"Open PR \"[WIP] Tree-based featurization\" (#3812)"},{"Id":"451702484","IsPullRequest":false,"CreatedAt":"2019-06-03T22:08:12","Actor":"nicolehaugen","Number":"3811","RawContent":null,"Title":"CreateTextLoader isn't respecting the KeyType attribute","State":"closed","Body":"### System information\r\n\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.503\r\n Commit:    4c506e0f35\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.14393\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.503\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.7\r\n  Commit:  cca5d72d48\r\n\r\n.NET Core SDKs installed:\r\n  2.1.503 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\n### Issue\r\n\r\nI used LoadFromTextFile to load data where the loaded poco object has the KeyType attribute applied as follows:\r\n\r\n   private class DataPoint\r\n        {\r\n            [LoadColumn(0), KeyType(5)]\r\n            public uint Label { get; set; }\r\n            [LoadColumn(1), KeyType(100)]\r\n            public uint GroupId { get; set; }\r\n            [LoadColumn(2,52), VectorType(50)]\r\n            public float[] Features { get; set; }\r\n        }\r\n\r\nWhen I call Fit using the LightGbm algorithm, I see the following exception because the KeyType attribute isn't being respected when loading from a text file:\r\n\r\nSystem.ArgumentOutOfRangeException  HResult=0x80131502\r\n  Message=Schema mismatch for label column 'Label': expected Single or Key, got UInt32\r\nParameter name: labelCol\r\n  Source=Microsoft.ML.LightGbm\r\n  StackTrace:\r\n   at Microsoft.ML.Trainers.LightGbm.LightGbmRankingTrainer.<>c__DisplayClass9_0.<CheckLabelCompatible>b__0() in E:\\A\\_work\\449\\s\\src\\Microsoft.ML.LightGbm\\LightGbmRankingTrainer.cs:line 240\r\n   at Microsoft.ML.Trainers.LightGbm.LightGbmRankingTrainer.CheckLabelCompatible(Column labelCol) in E:\\A\\_work\\449\\s\\src\\Microsoft.ML.LightGbm\\LightGbmRankingTrainer.cs:line 246\r\n   at Microsoft.ML.Trainers.TrainerEstimatorBase`2.CheckInputSchema(SchemaShape inputSchema)\r\n\r\nInstead, the KeyType attribute should be respected when loading from a text file.\r\n\r\n### Source code / logs\r\nRun the attached code which uses the attached data.\r\n[SampleKeyRepro.txt](https://github.com/dotnet/machinelearning/files/3249574/SampleKeyRepro.txt)\r\n\r\n[MyTestData.txt](https://github.com/dotnet/machinelearning/files/3249578/MyTestData.txt)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/3811","RelatedDescription":"Closed issue \"CreateTextLoader isn't respecting the KeyType attribute\" (#3811)"},{"Id":"451661805","IsPullRequest":false,"CreatedAt":"2019-06-03T19:57:36","Actor":"prathyusha12345","Number":"3810","RawContent":null,"Title":"why sampling key column is being added while Loading IDataView from Dataset stored Database ","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Windows\r\n\r\n### Issue\r\n\r\n- I am trying to create a sample to load data stored in SQL Server database. while loading data from database using mlContext.Data.TrainTestSplit(dataView) method, it adds a column called **SamplingKeyColumn**.  But this column is not added while **loading data from file**. \r\n\r\nI want to understand why this **SamplingKeyColumn** column is being added while loading from **Database**  but not while loading from file.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/3810","RelatedDescription":"Open issue \"why sampling key column is being added while Loading IDataView from Dataset stored Database \" (#3810)"},{"Id":"451322634","IsPullRequest":true,"CreatedAt":"2019-06-03T18:40:38","Actor":"codemzs","Number":"3805","RawContent":null,"Title":"Add overload for time series checkpoint API that takes a stream","State":"closed","Body":"fixes #3804","Url":"https://github.com/dotnet/machinelearning/pull/3805","RelatedDescription":"Closed or merged PR \"Add overload for time series checkpoint API that takes a stream\" (#3805)"},{"Id":"451322268","IsPullRequest":false,"CreatedAt":"2019-06-03T18:40:38","Actor":"codemzs","Number":"3804","RawContent":null,"Title":"Add overload for time series checkpoint API that takes a stream","State":"closed","Body":"This is needed is scenarios where the user is running the time series prediction on a blob where they don't have files but memory streams. ","Url":"https://github.com/dotnet/machinelearning/issues/3804","RelatedDescription":"Closed issue \"Add overload for time series checkpoint API that takes a stream\" (#3804)"},{"Id":"451611014","IsPullRequest":false,"CreatedAt":"2019-06-03T17:53:02","Actor":"justinormont","Number":"3808","RawContent":null,"Title":"TreeFeaturizer w/ Subsampling","State":"open","Body":"To support TB+ scale datasets, we should have a row sub-sampling parameter in the Tree Featurizer.\r\n\r\nWhy `TreeFeat`? The Tree Featurizer learns the feature interactions on a sub-set of the dataset. The `leaves` output of Tree Featurizer is then sent to a linear model (SDCA/AP/etc) which is scalable to TB scale datasets.\r\n\r\n**Gain**:\r\nThis provides an end-to-end solution for scalable learning. You get the accuracy of the Tree model plus the streamability of the linear model.\r\n\r\n**Request**:\r\n* Provide a `subsample` parameter for `TreeFeat`\r\n* Inside `TreeFeat` run the `TrainTestSplit` to get the correct subsample percent\r\n\r\n**Other solutions**:\r\n* TrainTest split to create a sub-sample of the dataset before `TreeFeat`, and train `TreeFeat` on this subsample. This fails in CV since you need a singular dataview to train on.\r\n* Shuffle + Take. This fails since our shuffle is block-wise; the 1st 4k rows are shuffled against each other, then the next 4k rows are independently shuffled against each other. This leads to the Take only receiving rows from the top of the file. Also fails in CV.\r\n* Generate + RangeFilter. We hid our Generate transform. Also fails in CV. \r\n\r\nWe would like to use the `TreeFeat` plus a streamable Linear model in AutoML to provide a good model to the user on datasets larger than RAM.","Url":"https://github.com/dotnet/machinelearning/issues/3808","RelatedDescription":"Open issue \"TreeFeaturizer w/ Subsampling\" (#3808)"},{"Id":"451595334","IsPullRequest":false,"CreatedAt":"2019-06-03T17:13:22","Actor":"Anipik","Number":"3807","RawContent":null,"Title":"csv files with colums containing commas are not splitted correctly","State":"open","Body":"I am trying to train a model on a github issue dataset. \r\n The dataset contains 4 columns ID, Title, Descriptions and label\r\n\r\n```\r\n7,\"Splitting XLinq classes into separate files, after rebasing the commits.\",\"\",area-System.Runtime.InteropServices\r\n12,\"Remove or cache some unnecessary allocations\",\"I noticed a few places where allocations were occurring unnecessary: - Across several of the immutable and XML collection types, the ICollection.CopyTo implementations were calling Array.SetValue in a loop; the second parameter to SetValue is a params array, so each iteration of the loop was resulting in allocating a new array... I've lifted that implicit allocation out to be an explicit one before the loop. - In a couple of places in the XML library and the metadata reader, string.Trim\\* was being used, either with an array of the same characters unnecessarily being allocated each time, or an implicitly allocated array of constant chars to fill a params array parameter.  I've replaced those with statically cached arrays. - In a couple of places in the XML library, a string was being constructed around a single character via creating a new char array; I've replaced that with usage of string's ctor that takes a character and a count, avoiding the unnecessary char[] allocation. \",area-System.Runtime.InteropServices\r\n13,\"Remove unnecessary unsafe code flag.\",\"The Immutable PCL targets platforms that include those that don't support unsafe code. Opening the solution in VS2015 results in a warning in the error list about this. But features that required unsafe code were recently removed so we don't need this flag any more. \",area-System.Runtime.InteropServices\r\n17,\"Some XPath.XDocument tests are failing\",\"Some XPath.XDocument queries have different results than other XPath navigators. This might be an old behavior or newly introduced bug.  Failing tests: build /p=IncludeTraits=ActiveIssue=17 \",area-System.Xml\r\n20,\"2 XPath.XDocument tests fail because of lacking feature\",\"XPath.XDocument navigator doesn't support MoveToId(string).  Verify if this was ever supported. If it was, verify if we want to support it in the future. If it wasn't move the tests to a different file and remove them from XPath.XDocument.Tests project.  Failing tests: NodeSetFunctionsTest2267 MatchesTest2352  <!--- @huboard:{\"order\":20.0,\"milestone_order\":20,\"custom_state\":\"\"} --> \",area-System.Xml\r\n22,\"Two Numerics Tests are failing only on our CI server\",\"Two of the tests in our System.Numerics.Vectors suite are failing only on our CI build server, and potentially only intermittently:  Vector2NormalizeTest1 Vector4NormalizeTest2  Given that these are very similar to other tests which cover a similar edge-case (especially the Vector3 normalization tests, which aren't failing), we will need to investigate why these tests in particular are failing on our build server. This may have been a point-in-time issue as we brought up our build infrastructure, and may not re-surface again. \",area-System.Numerics\r\n36,\"SIMD test failures on non-ENU configurations.\",\"After pulling both of @adamralph 's pull requests #31 and #32, I'm continuing to see test failures for SIMD on a DEU (German) test environment.  Here's a representative error: d:\\oss\\corefx\\src\\System.Numerics.Vectors\\tests\\GenericVectorTests.cs(545): error : System.Numerics.Tests.GenericVe ctorTests.ToStringCurrencySByte: Assert.Equal() Failure\\r\\nPosition: First difference is at position 8\\r\\nExpected:  <97,00 ?, -108,00 ?, 22,00 ?, 29,00 ?, 49,00 ?, 60,00 ?, 103,00 ?, 58,00 ?, -62,00 ?, -124,00 ?, -117,00 ?, 48,00 ?, 15,00 ?, -35,00 ?, -13,00 ?, -34,00 ?>\\r\\nActual:   <97,00 ?. -108,00 ?. 22,00 ?. 29,00 ?. 49,00 ?. 60,00 ?. 103 ,00 ?. 58,00 ?. -62,00 ?. -124,00 ?. -117,00 ?. 48,00 ?. 15,00 ?. -35,00 ?. -13,00 ?. -34,00 ?> [D:\\oss\\corefx\\bin\\ tools\\fxbuild.proj]  Observe that expected separates elements with a comma, actual separates elements with a dot. \",area-System.Numerics\r\n41,\"Quaternion operator overloads should be using the respective methods\",\"Quaternion declares a handful of methods to perform addition, subtraction and multiplication, and provides the respective overloads for these operations.  However, instead of re-using the `Add`, `Multiply` etc. methods, the code is re-written in the operator overloads. The operators should be using their respective methods rather than re-declaring the same code.  This is under the assumption that the JIT inlines the methods when they are used in the operator overloads. \",area-System.Numerics\r\n49,\"Add Linux/Mac build script\",\"A `build.sh` should be added alongside `build.cmd` to build corefx on Linux/Mac. \",area-Infrastructure\r\n50,\"Made Quarternion's operator overloads use their respective methods\",\"Operator overloads of Quaternion now utilize their respective methods, and removed redundant \"this\" qualifiers in Quaternion constructor. \",area-System.Numerics\r\n52,\"ReferenceSource repo license incorrect for individual files\",\"some of the files I looked up, it has header comment with Apache 2.0 license. which license should apply for those files? MIT or Apache 2.0 \",area-Meta\r\n54,\"Remove always true \"if\" and unreachable code in System.Xml.Linq.XObject.SkipNotify method.\",\"This: if (o.Annotations<XObjectChangeAnnotation>() != null)  is always true because the above while can finish only in two conditions: when o != null or when o.annotations == null. The first condition will be catched by \" if (o == null)\" and if the second one is true, \"o.Annotations<XObjectChangeAnnotation>() != null\" will also always be true i think. \",area-System.Xml\r\n55,\"[Issue 54] Removed always-true if and unreachable code in XObject.cs\",\"Removed always-true if and unreachable code in XObject.cs \",area-System.Xml\r\n58,\"System.Xml.sln fails to build on Mono, error CS0433\",\"**I know that cross-platform support is coming later, I just thought it might make sense to document this here in case someone else tries the same**  Building System.Xml.sln with xbuild on Mono doesn't work (the other solutions build fine), it throws the following errors:  ``` Build FAILED. Errors:  /home/alexander/dev/corefx/src/System.Xml.sln (default targets) -> (Build target) -> /home/alexander/dev/corefx/src/System.Xml.XPath.XDocument/System.Xml.XPath.XDocument.csproj (default targets) -> /usr/lib/mono/4.5/Microsoft.CSharp.targets (CoreCompile target) ->      System/Xml/XPath/XAttributeExtensions.cs(10,56): error CS0433: The imported type `System.Xml.Linq.XAttribute' is defined multiple times     System/Xml/XPath/XAttributeExtensions.cs(10,78): error CS0433: The imported type `System.Xml.Linq.XNamespace' is defined multiple times     System/Xml/XPath/XDocumentExtensions.cs(22,61): error CS0433: The imported type `System.Xml.Linq.XNode' is defined multiple times     System/Xml/XPath/XObjectExtensions.cs(10,23): error CS0433: The imported type `System.Xml.Linq.XContainer' is defined multiple times     System/Xml/XPath/XObjectExtensions.cs(10,49): error CS0433: The imported type `System.Xml.Linq.XObject' is defined multiple times     System/Xml/XPath/XNodeNavigator.cs(48,9): error CS0433: The imported type `System.Xml.Linq.XElement' is defined multiple times     System/Xml/XPath/XNodeNavigator.cs(784,35): error CS0433: The imported type `System.Xml.Linq.XText' is defined multiple times ```  It looks like it runs into a conflict with the System.Xml.Linq library in the Mono GAC. Needs further investigation. \",area-System.Xml\r\n69,\"build.cmd does not build solution on HP laptop (when Platform=MCD is pre-set)\",\"I've got HP laptop with windows 7. When I run build.cmd, I've got the error \"configuration is invalid\"  ``` C:\\Projects\\dotnet\\corefx>build.cmd C:\\Projects\\dotnet\\corefx\\src\\System.Collections.Immutable.sln.metaproj : error MSB4126: указанная конфигурация решения \"Release|MCD\" недопустима. Укажите допустимую конфигурац ию решения с помощью свойств Configuration и Platform (например, MSBuild.exe Solution.sln /p:Configuration=Debug /p:Platform=\"Any CPU\") или оставьте эти свойства пустыми, чтобы использовать конфигурацию решения по умолчанию. [C:\\Projects\\dotnet\\corefx\\src\\System.Collections.Immutable.sln] ```  The reason of this error is that environment variable `Platform` is set to `MCD` on the laptop by default. I have to change build command in the build.cmd by adding `/p:Platform=\"Any CPU\"` to compile the project.  Build script should check for allowed platforms and generate user-friendly error message, which says what to do to successfully compile the project when the platform is not supported.  \",area-Infrastructure\r\n70,\"\"Hello, World!\" sample\",\"Feature request: please add \"Hello, World!\" sample, which shows how to use .NET Core with user applications. \",area-Meta\r\n71,\"Behaviour of `Quaternion.CreateFromAxisAngle` when axis is not a unit vector\",\"The resulting quaternion depends on the length of `axis`. This does not describe a rotation and thus does not match the documentation.  There are a few ways to handle this issue: 1. Normalize `axis`, but this incurs a performance hit 2. Add a precondition that `axis.Length()` ≈ 1.        But enforcing that pre-condition is about as expensive as 1), so it'd probably need to be a documentation-only precondition. Unfortunately this means that consumers will rely on the current behaviour even if it's undocumented, so I don't think that this is a good solution. 3. Document the current behaviour  ---  Just for convenience, the relevant source code:  ``` /// <summary> /// Creates a Quaternion from a vector and an angle to rotate about the vector. /// </summary> /// <param name=\"axis\">The vector to rotate around.</param> /// <param name=\"angle\">The angle, in radians, to rotate around the vector.</param> /// <returns>The created Quaternion.</returns> public static Quaternion CreateFromAxisAngle(Vector3 axis, float angle) {     Quaternion ans;      float halfAngle = angle * 0.5f;     float s = (float)Math.Sin(halfAngle);     float c = (float)Math.Cos(halfAngle);      ans.X = axis.X * s;     ans.Y = axis.Y * s;     ans.Z = axis.Z * s;     ans.W = c;      return ans; } ``` \",area-System.Numerics\r\n72,\"`Equals` with NaN values (IEEE vs. reflexivity)\",\"The built in floating point types compare `NaN` as unequal when using `==` and `!=` (following IEEE semantics) but compare it as equal when using the `Equals` method.  Your floating point based types currently use IEEE semantics even for `Equals`. I suggest using the same behaviour as the built in types in your floating point based types like vectors or quaternions.  The  MSDN documentation of `Equals` contains an exception that allows `A.Equals(A)` to return false on floating point types, so you don't strictly violate its contract. But returning false still breaks hash tables and does not match the behaviour of the built in types, so I consider it a bad idea.  This can be avoided by calling `Equals` on the members instead of `==` in the implementation of `Equals` but not in `==` and `!=`.  For example with quaternion,  replace  ``` public bool Equals(Quaternion other) {     return (X == other.X &&             Y == other.Y &&             Z == other.Z &&             W == other.W); } ```  with  ``` public bool Equals(Quaternion other) {     return (X.Equals(other.X) &&             Y.Equals(other.Y) &&             Z.Equals(other.Z) &&             W.Equals(other.W)); } ```  You might want to add tests that check that `==` and `!=` compare all the above cases as unequal, so that they match the IEEE specification.  Replace:  ``` // Counterintuitive result - IEEE rules for NaN comparison are weird! Assert.False(a.Equals(a)); Assert.False(b.Equals(b)); Assert.False(c.Equals(c)); Assert.False(d.Equals(d)); ```  with:  ``` // Equals does not follow IEEE semantics since many consumers rely on equality being reflexive. // This includes collections like `Dictionary<K,V>` or `HashSet<T>` Assert.True(a.Equals(a)); Assert.True(b.Equals(b)); Assert.True(c.Equals(c)); Assert.True(d.Equals(d));  // Counterintuitive result - IEEE rules for NaN comparison are weird! Assert.False(a == a); Assert.False(b == b); Assert.False(c == c); Assert.False(d == d);  Assert.True(a != a); Assert.True(b != b); Assert.True(c != c); Assert.True(d != d); ``` \",area-System.Numerics\r\n77,\"Some Xml encoding tests lost their encoding\",\"Some of Xml tests were testing problematic characters in different Encoding (like Russian characters). At some point few years back the encoding was lost while moving between different repos. Tests pass because .cs files lost their encoding too. Tests need to be rewritten since there is no trace of original copy \",area-System.Xml\r\n81,\"Add test coverage for XPath and XDocument\",\"- Adding test coverage for XPath implementations (XPath.XPathDocument, XPath.XmlDocument, XPath.XDocument) - Adding some tests for XDocument (more coming later) \",area-System.Xml\r\n94,\"Necessary bits for Mono.Posix\",\"I tried to build [Mono.Posix](https://github.com/mono/mono/tree/master/mcs/class/Mono.Posix) against aspnetcore50 and found a lot of API that mono uses to be missing from .NET Core most prominently in the Interop-domain (like CustomMarshaler).  Please add Mono.Posix to your list of scenarios that can benefit from the API surface of .NET Core. \",area-Meta\r\n110,\"Add async document/element loading for XLinq.\",\"Adds XElement.LoadAsync and XDocument.LoadAsync. Code from the sync versions has been largely lifted out so they can share an implementation as much as possible. \",area-System.Xml\r\n116,\"Quaternion and public fields\",\"Is there a reason that the Quaternion struct has public exposed fields versus read only properties? Seems to be against the general guidelines for structs and immutability. Why would you want to allow X, Y, Z and W to be set outside of the ctor? \",area-System.Numerics\r\n118,\"Matrix4x4 - more useful public properties\",\"Forward, Backward, Up, Down, Left, Right public properties for Matrix4x4 \",area-System.Numerics\r\n119,\"Vector3 - more public static properties\",\"Up, Down, Left, Right, Forward, Backward vector public static properties \",area-System.Numerics\r\n121,\"Matrix4x4 - more useful public properties\",\"Added Forward, Backward, Up, Down, Left, Right vectors public properties for Matrix4x4.  Fix #118 \",area-System.Numerics\r\n129,\"Add XmlReader\",\"System.Xml.XmlReader is currently missing. \",area-System.Xml\r\n\r\n```\r\n\r\nThis Is shorter version of the dataset. The title and body are in quotes and columns are comma separated.\r\n\r\nWhen I try to use auto-ml on this \r\n```c#\r\nInferring Columns ...\r\nAn Error occured during inferring columns\r\nUnable to split the file provided into multiple, consistent columns.\r\nMicrosoft.ML.AutoML.InferenceException: Unable to split the file provided into multiple, consistent columns.\r\n   at Microsoft.ML.AutoML.ColumnInferenceApi.InferSplit(MLContext context, TextFileSample sample, Nullable`1 separatorChar, Nullable`1 allowQuotedStrings, Nullable`1 supportSparse)\r\n   at Microsoft.ML.AutoML.ColumnInferenceApi.InferColumns(MLContext context, String path, ColumnInformation columnInfo, Nullable`1 separatorChar, Nullable`1 allowQuotedStrings, Nullable`1 supportSparse, Boolean trimWhitespace, Boolean groupColumns)\r\n   at Microsoft.ML.CLI.CodeGenerator.AutoMLEngine.InferColumns(MLContext context, ColumnInformation columnInformation)\r\n   at Microsoft.ML.CLI.CodeGenerator.CodeGenerationHelper.GenerateCode()\r\n   at Microsoft.ML.CLI.Program.<>c__DisplayClass1_0.<Main>b__0(NewCommandSettings options)\r\nPlease see the log file for more info.\r\nExiting ...\r\n```\r\n\r\nMy guess is we are not respecting the quotes and just splitting the string on commas.\r\n\r\nThe dataset works if I separate the columns using tabs\r\n\r\n\r\n\r\ncc @eerhardt @danmosemsft @codemzs \r\n","Url":"https://github.com/dotnet/machinelearning/issues/3807","RelatedDescription":"Open issue \"csv files with colums containing commas are not splitted correctly\" (#3807)"},{"Id":"451537555","IsPullRequest":false,"CreatedAt":"2019-06-03T15:08:59","Actor":"Traijan1","Number":"3806","RawContent":null,"Title":"LearningPipeline was not found","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10\r\n- **.NET Version (eg., dotnet --info)**:  2.1.602\r\n### Issue\r\n\r\nHello,\r\nmy issue is that when I want to use \"var pipeline = new LearningPipeline();\" I get an error by \"LearningPipeline()\"\r\n\r\nA picture: http://prntscr.com/nx29zl\r\n\r\nThe error says: \"The type or namespace name \"LearningPipeline\" was not found\"\r\nCode: CS0246\r\n\r\n- **What did you do?**\r\nI found nothing.\r\n- **What happened?**\r\n- **What did you expect?**\r\n\r\n### Source code / logs\r\n\r\n```csharp\r\nusing System;\r\nusing Microsoft.ML;\r\nusing Microsoft.ML.Data;\r\n\r\nusing System.Threading.Tasks;\r\n\r\nnamespace Test {\r\n    class Program {\r\n        static void Main(string[] args) {\r\n            var pipeline = new LearningPipeline(); \r\n        }\r\n    }\r\n}\r\n```\r\n","Url":"https://github.com/dotnet/machinelearning/issues/3806","RelatedDescription":"Open issue \"LearningPipeline was not found\" (#3806)"},{"Id":"451289076","IsPullRequest":false,"CreatedAt":"2019-06-03T04:35:31","Actor":"justinormont","Number":"3803","RawContent":null,"Title":"Race condition in creation of AutoML temp folders","State":"open","Body":"**tldr;** recommend a GUID based folder name: `Temp\\Microsoft.ML.AutoML\\experiment_9bdaa79e-8ceb-4103-988b-9d73aefd53c2\\...`\r\n\r\nUser reported bug by @markusmobius in https://github.com/dotnet/machinelearning/issues/3749\r\n\r\n## Bug\r\nAutoML stores the trained models from the sweeping process on disk to avoid ever growing RAM usage. We currently ensure the folder is named uniquely by checking if it exists, and if so, incrementing a counter at the end. This process has a race condition where multiple processes will test for the folder's existence, see nothing, and both create and begin to work in the same folder. \r\n\r\n## Background\r\n@markusmobius was running multiple instances of the AutoML CLI, and the various processes were clobbering each others' temporary folders. See https://github.com/dotnet/machinelearning/issues/3749#issuecomment-495259293\r\n\r\nAs said by @daholste in https://github.com/dotnet/machinelearning/issues/3749#issuecomment-495407319:\r\n> Re: writing models to the temp folder -- when initializing experiments one after the other on a machine, each experiment would have its own unique model folder:\r\n> ![image](https://user-images.githubusercontent.com/43974253/58290281-0c6f3500-7d6e-11e9-8790-d8a4077dab21.png)\r\n> However, when initializing many experiments in parallel on the same machine, it is definitely possible to have a race condition that causes conflict here. Thanks for pointing this out \r\n\r\nReply by @justinormont in https://github.com/dotnet/machinelearning/issues/3749#issuecomment-495426783 / https://github.com/dotnet/machinelearning/issues/3749#issuecomment-495448847: \r\n> I believe we used a named mutex in the word embedding's model downloader to ensure only one copy of the model is being downloaded per machine. \r\n\r\n> I found the word embedding's named mutex: https://github.com/dotnet/machinelearning/blob/b861b5d64841cbe0f2c866ee7586872aac450a51/src/Microsoft.ML.Core/Utilities/ResourceManagerUtils.cs#L237-L246\r\n> \r\n> The lock is in the downloader class (resource manager).\r\n> \r\n> Plus the `finally` unlock:\r\n> https://github.com/dotnet/machinelearning/blob/b861b5d64841cbe0f2c866ee7586872aac450a51/src/Microsoft.ML.Core/Utilities/ResourceManagerUtils.cs#L287-L291\r\n> \r\n> We could do the same for the temp folder; if I recall I thought it was race free when the storage is local, but not for network shares due to lack of a remote atomic rename. \r\n> \r\n> More simple approach is to use a GUID: `Temp\\Microsoft.ML.AutoML\\experiment_9bdaa79e-8ceb-4103-988b-9d73aefd53c2\\...`","Url":"https://github.com/dotnet/machinelearning/issues/3803","RelatedDescription":"Open issue \"Race condition in creation of AutoML temp folders\" (#3803)"},{"Id":"451173031","IsPullRequest":true,"CreatedAt":"2019-06-02T09:42:21","Actor":"codemzs","Number":"3802","RawContent":null,"Title":"Bump master to 1.2 and 0.14 and upgrade tensorflow nuget to Release.","State":"open","Body":"\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/3802","RelatedDescription":"Open PR \"Bump master to 1.2 and 0.14 and upgrade tensorflow nuget to Release.\" (#3802)"},{"Id":"451171855","IsPullRequest":true,"CreatedAt":"2019-06-02T09:26:54","Actor":"codemzs","Number":"3801","RawContent":null,"Title":"Release notes for 1.1.0","State":"open","Body":"Adds release notes for v1.1.0 release.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/3801","RelatedDescription":"Open PR \"Release notes for 1.1.0\" (#3801)"},{"Id":"450681236","IsPullRequest":false,"CreatedAt":"2019-05-31T21:49:45","Actor":"mengaims","Number":"3799","RawContent":null,"Title":"Add SrCnn Anomaly Detection algorithm","State":"closed","Body":"### New Algorithm\r\n\r\nImplement SrCnn anomaly detection algorithm of KDD 2019 paper \"Time-Series Anomaly Detection Service at Microsoft\". Onboard Spectral Residual(SR) step firstly.\r\n### Benchmark report\r\n#### 1. Dataset\r\nWe evaluate on the Yahoo timeseries dataset, which has 367 timeseries and 5729660 points in total.\r\n#### 2. Evaluation method\r\nWe calculate the Precision, Recall, and F1 score using the method of： [https://github.com/iopsai/iops/tree/master/evaluation](https://github.com/iopsai/iops/tree/master/evaluation)\r\n#### 3. Score and Latency:\r\nWe ran the three algorithms on a machine with Intel(R) Xeon(R) CPU E5-2660 v3 @ 2.60GHz, 16GB memory, x64 operating system.\r\n\r\nAlgo | Precision | Recall | F1 | #TruePositive | #Positives | #Anomalies | Average latency to   predict the whole dataset | Fine tuned   parameters\r\n-- | -- | -- | -- | -- | -- | -- | -- | --\r\nSSA (need   training) | 0.582 | 0.585 | 0.583 | 2290 | 3936 | 3915 | 5595ms (training   time not included) | Confidence=99,   PValueHistoryLength=32, Season=11, and use half the data of each series to do   the training.\r\nIID | 0.668 | 0.491 | 0.566 | 1924 | 2579 | 3915 | 6163ms | Confidence=99,   PValueHistoryLength=56\r\nSR | 0.601 | 0.670 | 0.634 | 2625 | 4370 | 3915 | 20930ms | WindowSize=64,   BackAddWindowSize=5, LookaheadWindowSize=5, AveragingWindowSize=3,   JudgementWindowSize=64, Threshold=0.45\r\n#### 4. Some experiences for parameter tuning.\r\n<strong>SSA:</strong> Sensitive to the season value, need to find the period of timeseries if seasonality exists. Very sensitive to confidence, we keep it above 98.\r\n<strong>IID:</strong> Very sensitive to confidence, we keep it above 98.\r\n<strong>SR:</strong> WindowSize and Threshold are the most important parameters, you can focus on adjusting these two parameters to get a good score. And then tuning JudgementWindowSize will also help.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/3799","RelatedDescription":"Closed issue \"Add SrCnn Anomaly Detection algorithm\" (#3799)"},{"Id":"450909708","IsPullRequest":false,"CreatedAt":"2019-05-31T18:29:23","Actor":"woanware","Number":"3800","RawContent":null,"Title":"Issue training","State":"closed","Body":"I have tried creating a simple data and performing the training like so\r\n\r\n```\r\ndotnet .\\mlnet.dll auto-train --task binary-classification\r\n --dataset \"logons.csv\" --label-column-index 0 \r\n--has-header true --max-exploration-time 10\r\n```\r\n\r\nHere is an example of the data set which is reduced from my original, but shows the format:\r\n\r\n```\r\nValid\t Data\r\n0\t 09:00\r\n0\t 09:01\r\n0\t 09:02\r\n0\t 09:03\r\n0\t 09:04\r\n0\t 09:05\r\n0\t 09:06\r\n0\t 09:07\r\n1\t 12:08\r\n0\t 09:09\r\n0\t 09:10\r\n0\t 09:00\r\n0\t 09:01\r\n0\t 09:02\r\n0\t 09:03\r\n0\t 09:04\r\n0\t 09:05\r\n0\t 09:06\r\n0\t 09:07\r\n1\t 13:08\r\n0\t 09:09\r\n0\t 09:10\r\n0\t 09:00\r\n0\t 09:01\r\n0\t 09:02\r\n0\t 09:03\r\n0\t 09:04\r\n0\t 09:05\r\n0\t 09:06\r\n0\t 09:07\r\n1\t 14:08\r\n0\t 09:09\r\n0\t 09:10\r\n```\r\n\r\nEvery time I try and run the command I get the following error:\r\n\r\n```\r\nException occured while exploring pipelines:\r\nTraining failed with the exception: \r\nSystem.ArgumentOutOfRangeException: AUC is not definied \r\nwhen there is no positive class in the data\r\nParameter name: PosSample\r\n```\r\n\r\nI originally tried it via VS2019 and the latest version of ML.Net, but that failed, so I tried it using the binary directly","Url":"https://github.com/dotnet/machinelearning/issues/3800","RelatedDescription":"Closed issue \"Issue training\" (#3800)"},{"Id":"450377894","IsPullRequest":false,"CreatedAt":"2019-05-31T16:48:34","Actor":"huy302","Number":"3791","RawContent":null,"Title":"What data to be fed into PermutationFeatureImportance?","State":"closed","Body":"In general I know that the data should be transformed by the trained model before being fed into PermutationFeatureImportance, but should it be transformed training data or test data, assuming I have both? and why?\r\nI've been reading documents and related issues but couldn't find the answer. Thanks","Url":"https://github.com/dotnet/machinelearning/issues/3791","RelatedDescription":"Closed issue \"What data to be fed into PermutationFeatureImportance?\" (#3791)"},{"Id":"450569299","IsPullRequest":false,"CreatedAt":"2019-05-31T01:03:59","Actor":"CESARDELATORRE","Number":"3798","RawContent":null,"Title":"Release daily-drop preview packages on MyGet or any public feed","State":"open","Body":"I think it would be good to release the daily-drop preview packages on MyGet or any public feed.\r\n\r\nThoughts?","Url":"https://github.com/dotnet/machinelearning/issues/3798","RelatedDescription":"Open issue \"Release daily-drop preview packages on MyGet or any public feed\" (#3798)"},{"Id":"450553933","IsPullRequest":false,"CreatedAt":"2019-05-30T23:47:41","Actor":"ganik","Number":"3797","RawContent":null,"Title":"TextFeaturizer to save specific features","State":"open","Body":"User scenario:\r\nTrained learner on top of TextFeaturizer.\r\nLearner uses only several ngram features.\r\nStill the combined model file is huge due to the fact the TextFeaturizer save dictionary counts for all ngrams extracted. \r\n\r\nFeature request: add ability for TextFeaturizer to save its model with specified features / ngrams only","Url":"https://github.com/dotnet/machinelearning/issues/3797","RelatedDescription":"Open issue \"TextFeaturizer to save specific features\" (#3797)"},{"Id":"450542033","IsPullRequest":true,"CreatedAt":"2019-05-30T22:58:40","Actor":"yaeldekel","Number":"3796","RawContent":null,"Title":"Change ensembles trainer to work with ITrainerEstimators instead of ITrainers","State":"open","Body":"This is needed for using ensembles with non-default values for the sub-trainers.\r\nFixes #3709 .\r\n","Url":"https://github.com/dotnet/machinelearning/pull/3796","RelatedDescription":"Open PR \"Change ensembles trainer to work with ITrainerEstimators instead of ITrainers\" (#3796)"},{"Id":"450522222","IsPullRequest":false,"CreatedAt":"2019-05-30T21:50:42","Actor":"CESARDELATORRE","Number":"3795","RawContent":null,"Title":"Alternate Fit() with no IDataView parameter for cases where data is not needed (i.e. Scoring a Tensorflow model)","State":"open","Body":"The following is a typical case when you prepare a pipeline only for scoring with a TensorFlow model:\r\n\r\n```\r\nprivate ITransformer SetupMlnetModel(string imagesFolderPath, string tensorFlowModelFilePath)\r\n{\r\n    var pipeline = _mlContext.Transforms.LoadImages(outputColumnName: TensorFlowModelSettings.inputTensorName, imageFolder: imagesFolderPath, inputColumnName: nameof(ImageInputData.ImagePath))\r\n        .Append(_mlContext.Transforms.ResizeImages(outputColumnName: TensorFlowModelSettings.inputTensorName, imageWidth: ImageSettings.imageWidth, imageHeight: ImageSettings.imageHeight, inputColumnName: TensorFlowModelSettings.inputTensorName))\r\n        .Append(_mlContext.Transforms.ExtractPixels(outputColumnName: TensorFlowModelSettings.inputTensorName, interleavePixelColors: ImageSettings.channelsLast, offsetImage: ImageSettings.mean))\r\n        .Append(_mlContext.Model.LoadTensorFlowModel(tensorFlowModelFilePath).\r\n        ScoreTensorFlowModel(outputColumnNames: new[] { \"loss\" },\r\n                            inputColumnNames: new[] { \"Placeholder\" }, addBatchDimensionInput: false));\r\n\r\n    ITransformer mlModel = pipeline.Fit(CreateEmptyDataView());\r\n    return mlModel;\r\n}\r\nprivate IDataView CreateEmptyDataView()\r\n{\r\n    //Create empty DataView. We just need the schema to call fit()\r\n    List<ImageInputData> list = new List<ImageInputData>();\r\n    list.Add(new ImageInputData() { ImagePath = \"\" });\r\n    IEnumerable<ImageInputData> enumerableData = list;\r\n\r\n    var dv = _mlContext.Data.LoadFromEnumerable<ImageInputData>(list);\r\n    return dv;\r\n}\r\n```\r\n\r\nThe issue with that API is that Fit(IDataView idv) always requires an IDataView as parameter, but in this case, data is not needed, it just needs the IDataView schema. \r\n\r\nCurrently you just create an \"Empty DataView\" and from there, the schema will be taken. \r\nThis seems like a workaround but it doesn't make sense for the user to create an empty structure/DataView:\r\n\r\nPossible proposal:\r\n\r\nAllow a parameter-less for the \"Fit()\" method and by simply providing as a generic what's the data type to use as the base to generate the IDataView schema, such as:\r\n\r\n` .Fit<ImageInputData>();`\r\n\r\nBasically, internally it would run the code I have in the `CreateEmptyDataView()` method. \r\n\r\nAdditional solutions or thoughts to improve this API?\r\n","Url":"https://github.com/dotnet/machinelearning/issues/3795","RelatedDescription":"Open issue \"Alternate Fit() with no IDataView parameter for cases where data is not needed (i.e. Scoring a Tensorflow model)\" (#3795)"},{"Id":"450432101","IsPullRequest":true,"CreatedAt":"2019-05-30T17:59:17","Actor":"shmoradims","Number":"3793","RawContent":null,"Title":"Added samples for loading text","State":"open","Body":"Fix #2457 \r\n","Url":"https://github.com/dotnet/machinelearning/pull/3793","RelatedDescription":"Open PR \"Added samples for loading text\" (#3793)"},{"Id":"450411774","IsPullRequest":false,"CreatedAt":"2019-05-30T17:10:00","Actor":"justinormont","Number":"3792","RawContent":null,"Title":"CLI codegen fails with spaces in project name","State":"open","Body":"The AutoML CodeGen can't handle spaces in the project name, or it produces a corrupt .cs file.\r\n\r\nRepro:\r\n`mlnet auto-train --dataset analcatdata_germangss.csv  --ml-task multiclass-classification --label-column-name \"Political_system\" --max-exploration-time 60 --name \"Analyzing Categorical Data\" --output-path /tmp/blah/`\r\n\r\nNote the spaces in the project name: \r\n`--name \"Analyzing Categorical Data\" `\r\n\r\nDataset: \r\nhttps://www.openml.org/data/get_csv/53559/analcatdata_germangss.arff\r\n\r\nThis produces corrupted .cs files with replicas of the project name.\r\n\r\nFor example, `Program.cs`:\r\n```c#\r\nusing System;\r\nusing System.IO;\r\nusing System.Linq;\r\nusing Microsoft.ML;\r\nusing Analyzing Categorical Data.Model.DataModels;\r\n\r\nnamespace Analyzing Categorical Data.ConsoleApp\r\n{\r\n    class Program\r\n{\r\n```\r\n\r\nYou'll note `Analyzing Categorical Data` is replicated into `Program.cs` with the spaces intact. We need to sanitize the project name to fit namespace/variable name requirements.\r\n\r\nCurrently we use a simple sanitization on the column names:\r\nhttps://github.com/dotnet/machinelearning/blob/fac974daaec029b732802c1d0802818a27ab37be/src/mlnet/Utilities/Utils.cs#L47-L50\r\n\r\nWe may be able to reuse that sanitizer.","Url":"https://github.com/dotnet/machinelearning/issues/3792","RelatedDescription":"Open issue \"CLI codegen fails with spaces in project name\" (#3792)"},{"Id":"450090276","IsPullRequest":false,"CreatedAt":"2019-05-30T01:42:45","Actor":"CESARDELATORRE","Number":"3790","RawContent":null,"Title":"[Bug/issue] Prediction Engine using TensorFlow model doesn't close the used image files?","State":"open","Body":"Looks like when I provide an image file to the prediction engine which is using a TensorFlow model, after predicting and getting the result, it never closes the image file and you cannot even delete those image files (in my case, those image files are temp files that I need to delete from the code)\r\n\r\nOnly when the app using the prediction engine is finished, then the image files are closed and I can delete them (manually). But that is not the desired behavior. \r\n\r\nHere's an app with a repro:\r\nhttps://github.com/CESARDELATORRE/TensorFlowImageClassificationWebApp/tree/master/WebApp\r\n","Url":"https://github.com/dotnet/machinelearning/issues/3790","RelatedDescription":"Open issue \"[Bug/issue] Prediction Engine using TensorFlow model doesn't close the used image files?\" (#3790)"},{"Id":"450076677","IsPullRequest":true,"CreatedAt":"2019-05-30T00:32:38","Actor":"daholste","Number":"3789","RawContent":null,"Title":"[AutoML] CLI telemetry rev","State":"open","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/3789","RelatedDescription":"Open PR \"[AutoML] CLI telemetry rev\" (#3789)"},{"Id":"450063264","IsPullRequest":true,"CreatedAt":"2019-05-29T23:29:34","Actor":"artidoro","Number":"3788","RawContent":null,"Title":"Fix TextLoader constructor and add exception message","State":"open","Body":"Fixes #3705.\r\n\r\nIn issue #3705 it appeared that the class defining the data was required to have both get and **set** auto-properties. In `TextLoader` however, we don't use the set property, so I removed that from the conditions.\r\n\r\nSecond, I added an exception message in case no public readable property or field is found in the class defining the data and no dataSample is passed to the constructor.\r\n\r\nI added a related test which tests the various scenarios.\r\n ","Url":"https://github.com/dotnet/machinelearning/pull/3788","RelatedDescription":"Open PR \"Fix TextLoader constructor and add exception message\" (#3788)"},{"Id":"449810140","IsPullRequest":false,"CreatedAt":"2019-05-29T13:30:57","Actor":"PeterPann23","Number":"3787","RawContent":null,"Title":"Prediction multiclass only transmit score Label and label index are \"\" and 0","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: \r\nWindows 10\r\n- **.NET Version (eg., dotnet --info)**: \r\n.Net Core 3.0, Microsoft.ML 1.0.0\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nI created a pipline like so:\r\n```\r\nvar sdcaPipeline = mlContext.Transforms.Conversion.MapValueToKey(outputColumnName: DefaultColumnNames.KeyColumn, inputColumnName: DefaultColumnNames.Label,keyOrdinality:ValueToKeyMappingEstimator.KeyOrdinality.ByOccurrence)\r\n    .Append(mlContext.Transforms.Concatenate(DefaultColumnNames.RawFeatures, MSBar2.GetColumnNames(DataKind.Single)))\r\n    .Append(mlContext.Transforms.NormalizeMinMax(outputColumnName: DefaultColumnNames.Features,inputColumnName:DefaultColumnNames.RawFeatures))\r\n    .AppendCacheCheckpoint(mlContext)\r\n    .Append(mlContext.MulticlassClassification.Trainers.SdcaMaximumEntropy(labelColumnName : DefaultColumnNames.KeyColumn ,featureColumnName: DefaultColumnNames.Features))\r\n    .Append(mlContext.Transforms.CopyColumns(inputColumnName: KeyColumn, outputColumnName: DefaultColumnNames.PredictedLabelIndex))\r\n    .Append(mlContext.Transforms.Conversion.MapKeyToValue(inputColumnName: DefaultColumnNames.KeyColumn ,outputColumnName: DefaultColumnNames.PredictedLabel));                      \r\n\r\nvar model=  sdcaPipeline.Fit(trainingDataView);\r\n```\r\n\r\n- **What happened?**\r\nWhen performing a single prediction the score property is placed. However the DefaultColumnNames.PredictedLabel and DefaultColumnNames.PredictedLabelIndex are always populated with the .net default values of empty string and 0\r\n\r\n- **What did you expect?**\r\nI'd expect the values to be mapped as it is configured in the pipeline\r\n\r\n\r\n### Source code / logs\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/3787","RelatedDescription":"Open issue \"Prediction multiclass only transmit score Label and label index are \"\" and 0\" (#3787)"},{"Id":"449804898","IsPullRequest":false,"CreatedAt":"2019-05-29T13:21:01","Actor":"sharwell","Number":"3786","RawContent":null,"Title":"Replace LangVersion=latest with a specific version","State":"open","Body":"https://github.com/dotnet/machinelearning/blob/9a80b78d7aba8463859975119e697afb72f91c09/Directory.Build.props#L94\r\n\r\nThis property means \"vary the build environment for each individual developer, and break teams when possible\". It should be avoided in all circumstances outside of the dotnet/roslyn test suite. Currently this project appears to use C# 7.3, so I would recommend replacing the current value with:\r\n\r\n```xml\r\n<LangVersion>7.3</LangVersion>\r\n```\r\n\r\n📝 While the compile-time behavior can be locked to a specific version by referencing the Microsoft.Net.Compilers NuGet package, the IDE features triggered by specific language versions will not be able to correctly determine the effective language version in all cases and the experience will still vary across users. Using a specific version resolves all issues and ensures the experience is consistent.","Url":"https://github.com/dotnet/machinelearning/issues/3786","RelatedDescription":"Open issue \"Replace LangVersion=latest with a specific version\" (#3786)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-06-04T05:30:37.3671355Z","RunDurationInMilliseconds":743}