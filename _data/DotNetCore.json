{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing .NET Core 3 Preview 3","PublishedOn":"2019-03-06T19:10:42+00:00","CommentsCount":24,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 3.0 Preview 3. We would like to update you on the .NET Core 3.0 schedule and introduce you to improvements in .NET Core SDK installers, Docker containers, Range, and...","Href":"https://devblogs.microsoft.com/dotnet/announcing-net-core-3-preview-3/","RawContent":null},{"Title":"Floating-Point Parsing and Formatting improvements in .NET Core 3.0","PublishedOn":"2019-03-05T22:14:48+00:00","CommentsCount":17,"FacebookCount":0,"Summary":"Starting back with the .NET Core 2.1 release, we were making iterative improvements to the floating-point parsing and formatting code in .NET Core. Now, in .NET Core 3.0 Preview 3, we are nearing...","Href":"https://devblogs.microsoft.com/dotnet/floating-point-parsing-and-formatting-improvements-in-net-core-3-0/","RawContent":null},{"Title":"Collecting .NET Core Linux Container CPU Traces from a Sidecar Container","PublishedOn":"2019-03-05T19:31:18+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Introduction\nIn recent years, containerization has gained popularity in DevOps due to its valuable capacities, including more efficient resource utilization and better agility. Microsoft and Docker...","Href":"https://devblogs.microsoft.com/dotnet/collecting-net-core-linux-container-cpu-traces-from-a-sidecar-container/","RawContent":null},{"Title":".NET Framework March 1, 2019 Cumulative Update for Windows 10 version 1809 and Windows Server 2019","PublishedOn":"2019-03-01T18:25:39+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, March 1, we released the February 2019 Cumulative Update for Windows 10 version 1809 and Windows Server 2019.\nQuality and Reliability\nThis release contains the following quality and reliability...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-march-1-2019-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/","RawContent":null},{"Title":"An update to C# versions and C# tooling","PublishedOn":"2019-02-27T18:59:23+00:00","CommentsCount":12,"FacebookCount":0,"Summary":"Starting with Visual Studio 2019 Preview 4 and RC, we&#8217;ll be adjusting how C# versions are treated in .NET tooling.\nSummary of changes\nFirstly, we&#8217;re adding two new Language Version...","Href":"https://devblogs.microsoft.com/dotnet/an-update-to-c-versions-and-c-tooling/","RawContent":null},{"Title":"How to port desktop applications to .NET Core 3.0","PublishedOn":"2019-02-26T18:00:30+00:00","CommentsCount":16,"FacebookCount":0,"Summary":"In this post, I will describe how to port a desktop application from .NET Framework to .NET Core. I picked a WinForms application as an example. Steps for WPF application are similar and I&#8217;ll...","Href":"https://devblogs.microsoft.com/dotnet/how-to-port-desktop-applications-to-net-core-3-0/","RawContent":null},{"Title":"Announcing .NET Framework 4.8 Early Access Build 3745","PublishedOn":"2019-02-21T19:27:54+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"As we get closer to the final version, our efforts are focused on stabilizing the release over the coming weeks. Please keep up the support by trying out our latest preview 3745 and provide any...","Href":"https://devblogs.microsoft.com/dotnet/announcing-net-framework-4-8-early-access-build-3745/","RawContent":null},{"Title":".NET Framework February 2019 Preview of Quality Rollup","PublishedOn":"2019-02-19T15:19:18+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we released the February 2019 Preview of Quality Rollup.\nQuality and Reliability\nThis release contains the following quality and reliability improvements.\nCLR\n\nAddresses an issue in...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-february-2019-preview-of-quality-rollup/","RawContent":null},{"Title":".NET Core 1.0 and 1.1 will reach End of Life on June 27, 2019","PublishedOn":"2019-02-19T15:00:16+00:00","CommentsCount":3,"FacebookCount":0,"Summary":".NET Core 1.0 was released on June 27, 2016 and .NET Core 1.1 was released on November 16, 2016. As an LTS release, .NET Core 1.0 is supported for three years. .NET Core 1.1 fits into the same support...","Href":"https://devblogs.microsoft.com/dotnet/net-core-1-0-and-1-1-will-reach-end-of-life-on-june-27-2019/","RawContent":null},{"Title":"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809","PublishedOn":"2019-02-15T13:03:53+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Final Update 2/19/19 @1:30 PM (PST): This advisory is now resolved with no action needed from Microsoft Customers. The issue was not applicable to any valid or supported configuration. There is no...","Href":"https://devblogs.microsoft.com/dotnet/advisory-on-february-2019-security-update-for-windows-10-update-1809/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"9178188648","Type":"PullRequestEvent","CreatedAt":"2019-03-04T22:18:31","Actor":"jkonicki","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/136","RelatedDescription":"Opened pull request \"Fix logo and update team contributors\" (#136) at dotnet/foundation","RelatedBody":""},{"Id":"9168056662","Type":"PullRequestEvent","CreatedAt":"2019-03-02T18:57:28","Actor":"manne","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/135","RelatedDescription":"Opened pull request \"adds Umbraco logo\" (#135) at dotnet/foundation","RelatedBody":"fixes #124 "},{"Id":"9168030118","Type":"PullRequestEvent","CreatedAt":"2019-03-02T18:43:42","Actor":"manne","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/134","RelatedDescription":"Opened pull request \"adds the prism logo\" (#134) at dotnet/foundation","RelatedBody":"fixes #126 "},{"Id":"9163318579","Type":"PullRequestEvent","CreatedAt":"2019-03-01T15:37:52","Actor":"glennawatson","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/133","RelatedDescription":"Opened pull request \"Add additional ReactiveUI organization projects.\" (#133) at dotnet/foundation","RelatedBody":""},{"Id":"9142546450","Type":"IssuesEvent","CreatedAt":"2019-02-26T23:12:20","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/foundation/issues/75","RelatedDescription":"Closed issue \"Fix mailto link on Team page\" (#75) at dotnet/foundation","RelatedBody":"When visiting [https://dotnetfoundation.org/team](https://dotnetfoundation.org/team), I noticed that the email icon under **Miklos Barkoczi**'s name has `mailto:` referenced twice. It may be obvious to some, but not to others.\r\n\r\n```\r\n<a href=\"mailto:mailto:contact@dotnetfoundation.org\">\r\n    <i class=\"fa fa-envelope\" aria-hidden=\"true\"></i>\r\n</a>\r\n```\r\nshould be\r\n```\r\n<a href=\"mailto:contact@dotnetfoundation.org\">\r\n    <i class=\"fa fa-envelope\" aria-hidden=\"true\"></i>\r\n</a>\r\n```"},{"Id":"9089021734","Type":"PullRequestEvent","CreatedAt":"2019-02-18T17:45:45","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/132","RelatedDescription":"Merged pull request \"Update MVVM project logo\" (#132) at dotnet/foundation","RelatedBody":"Fixes dotnet/dotnetfoundation-website#72\r\nFixes #125"},{"Id":"9089021716","Type":"IssuesEvent","CreatedAt":"2019-02-18T17:45:45","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/foundation/issues/125","RelatedDescription":"Closed issue \"Missing logo for MVVM Light Toolkit\" (#125) at dotnet/foundation","RelatedBody":"`https://raw.githubusercontent.com/paulcbetts/mvvmlight/master/Installer/InstallItems/html/MVVM_BlackText_190x147.png` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L137-L139"},{"Id":"9089015890","Type":"PullRequestEvent","CreatedAt":"2019-02-18T17:44:39","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/131","RelatedDescription":"Merged pull request \"Update links\" (#131) at dotnet/foundation","RelatedBody":"Replace http links with https where possible - both returned 200 OK."},{"Id":"9018375188","Type":"PullRequestEvent","CreatedAt":"2019-02-06T14:07:17","Actor":"Potapy4","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/132","RelatedDescription":"Opened pull request \"Update MVVM project logo\" (#132) at dotnet/foundation","RelatedBody":"Fixes dotnet/dotnetfoundation-website#72\r\nFixes #125"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"9150531193","Type":"IssuesEvent","CreatedAt":"2019-02-27T22:49:51","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/102","RelatedDescription":"Opened issue \"SDK Installers will remove previous patch versions\" (#102) at dotnet/announcements","RelatedBody":"The SDK Installers for Windows will upgrade patch versions in place within the same feature band. This will reduce the number of SDKs that are installed on programmer machines.\r\n\r\nFeature bands of the SDK are defined like 3.0.1nn. [Find out more about SDK version numbers](https://docs.microsoft.com/dotnet/core/versions/#versioning-details).\r\n\r\nThis means when .NET Core SDK 3.0.101 becomes available and is installed, .NET Core SDK 3.0.100 will be removed from the machine if it exists. When .NET Core SDK 3.0.200 becomes available and is installed on the same machine, .NET Core SDK versions like 3.0.101 will not be removed but stay side by side with 3.0.200.\r\n\r\nThis approach supports use of `global.json` which will roll forward across patch versions, but not feature bands of the SDK. Thus, upgrading via the SDK installer will not result in errors due to a missing SDK. Feature bands also align with side by side Visual Studio installations for those users that install SDKs for Visual Studio use. For example, Visual Studio 15.9 uses .NET Core SDK 2.2.500 but does not support .NET Core SDK 2.2.600.\r\n\r\nFind out how to [remove other .NET Core SDK versions here.](https://docs.microsoft.com/dotnet/core/versions/remove-runtime-sdk-versions)."},{"Id":"9078417647","Type":"IssuesEvent","CreatedAt":"2019-02-15T22:24:40","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/101","RelatedDescription":"Opened issue \"Publishing .NET Core images to Microsoft Container Registry (MCR)\" (#101) at dotnet/announcements","RelatedBody":"# Publishing .NET Core images to Microsoft Container Registry (MCR)\r\n\r\nMicrosoft teams are now publishing container images to the [Microsoft Container Registry](https://azure.microsoft.com/en-us/blog/microsoft-syndicates-container-catalog/). There are two primary reasons for this change:\r\n\r\n* Syndicate Microsoft-provided container images to multiple registries, like Docker Hub and Red Hat.\r\n* Use Microsoft Azure as a global CDN for delivering Microsoft-provided container images.\r\n\r\nYou will use and see MCR as a storage back-end for Microsoft images. The primary way you learn about Microsoft container images and tags will be through a registry, which for most users will continue to be Docker Hub. Most of the experience you've had browsing for .NET Core container images will continue unchanged with this new model. The Docker Hub URLs you've used for Microsoft repos will continue to work, and forward to updated locations on Docker Hub. Existing Docker Hub will images will be maintained as-is.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #935](https://github.com/dotnet/dotnet-docker/issues/935)\r\n\r\n## Starting with .NET Core nightly repo\r\n\r\nOn the .NET team, we started our [transition to MCR](https://github.com/dotnet/dotnet-docker/issues/745) with the .NET Core \"nightly\" repo. [dotnet-nightly](dockerhub.com/r/microsoft/dotnet-nightly) is now hosted on MCR and syndicated to Docker Hub. We started with the nightly repo in order to discover and fix any challenges we found with this new model before we move our higher-traffic primary container repository.\r\n\r\nWe will start publishing [dotnet](dockerhub.com/r/microsoft/dotnet) to MCR a bit later, in either February or March. This issue will be updated when that happens.\r\n\r\n## Repo Split\r\n\r\nThe [.NET Core repo](https://hub.docker.com/r/microsoft/dotnet) currently includes 4 major categories of tags: \r\n\r\n* `sdk`\r\n* `aspnetcore-runtime`\r\n* `runtime` \r\n* `runtime-deps`\r\n\r\nProviding all of the tags in one place has helped with discoverability but made for a repo with an enormous README that can be challenging to navigate and consume. It is large enough that we exceeded Docker Hub README limits and had to artificially make it smaller.\r\n\r\nGoing forward, we will provide a repo for each of the tag categories listed above. We'll also provide a \"product repo\" that will hierarchicaly group all of our repos together. This will satisfy discoverability needs so that it will be easy to find the tags you want.\r\n\r\nYou can already see this experience with [microsoft-dotnet-core-nightly](https://hub.docker.com/_/microsoft-dotnet-core-nightly). There are now multiple repos for our nightly builds:\r\n\r\n* [.NET Core Nightly product repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly)\r\n* [.NET Core SDK Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-sdk/)\r\n* [.NET Core ASP.NET Core Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-aspnet/)\r\n* [.NET Core Runtime Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime/)\r\n* [.NET Core Runtime-deps Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime-deps/)\r\n\r\nThe same split will exist for the non-nightly stable repo (currently hosted at  [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet)) when we start publishing it to MCR and syndicating it back to DockerHub.\r\n\r\n## Changes to registry URL\r\n\r\nThe biggest change is that your Dockerfiles need to be updated to point to the MCR registry in order get access to new .NET Core container tags. The same change is required for scripts or human operations that pull images via `docker pull`.\r\n\r\nThe following example shows the registry path, repo and tag for the .NET Core 2.2 \"Nightly\" SDK on MCR:\r\n\r\n```console\r\nmcr.microsoft.com/dotnet/core-nightly/sdk:2.2\r\n```\r\n\r\nAs comparison, the following repo and tag have been used to date for the .NET Core 2.2 \"Nightly\" SDK on Docker Hub:\r\n\r\n```console\r\nmicrosoft/dotnet-nightly:2.2-sdk\r\n```\r\n\r\nThe new repo URL is provided at each of the news repos. For example, the new .NET Core SDK \"nightly\" repo provides a box on the right where you can copy and paste the correct MCR-based repo syntax that you can use for `docker pull` or in `FROM` statements in your Dockerfiles.\r\n\r\n![image](https://user-images.githubusercontent.com/2608468/52811702-95c5eb80-304a-11e9-8de8-e6ea1f4b4d75.png)\r\n\r\n## Servicing existing Docker Hub tags\r\n\r\nWe will continue to service existing non-version-specific or floating tags on Docker Hub while the associated .NET Core version is supported. For example the `microsoft/dotnet:2.1-sdk` tag is a floating tag that will continue to be serviced for the lifetime of .NET Core 2.1. You can continue using floating tags without issue.\r\n\r\nIf you use non-floating tags, like `microsoft/dotnet:2.1.504-sdk-alpine`, then you will need to update your Dockerfile to use a new non-floating tag. No new non-floating tags will be published to `microsoft/dotnet` and `microsoft/dotnet-nightly` after we fully transition to MCR.\r\n\r\n.NET Core 3.0 Preview 3 and later will only be made available on MCR.\r\n\r\n## Microsoft is a Verified Publisher\r\n\r\nUntil now, Microsoft-provided container images were considered \"community images\". As part of this change, we are re-classifying Microsoft as a \"verified publisher\" on Docker Hub. This designation should make it clearer that .NET and other Microsoft-provided images are coming from a verified source. There clearly was that expectation previously, but Docker is now making that clearer in the Docker Hub pages they host for Microsoft.\r\n\r\nWe will provide official vulnerability scanning Microsoft-provided images as a second phase of this transition."},{"Id":"9075495754","Type":"IssuesEvent","CreatedAt":"2019-02-15T14:06:30","Actor":"TaraOverfield","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/100","RelatedDescription":"Opened issue \"Advisory on February 2019 Security update for Windows 10 update 1809\" (#100) at dotnet/announcements","RelatedBody":"<span>The </span><a href=\"https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/\" rel=\"nofollow\">February 2019 Security and Quality Rollup for Windows 10 update 1809</a><span> was released earlier this week. We have received multiple customer reports of issues when a customer has installed .NET Framework 4.8 Preview then installed the February security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>.</span> These reports are specific to only to the scenario when a customer has installed both .NET Framework 4.8 Preview and the February security update.\r\n\r\nWe are actively working on fixing and re-shipping a correction for this issue. If you installed the February 2019 security update and have not yet seen any negative behavior, we recommend that you leave your system as-is but closely monitor them and ensure that you apply upcoming .NET Framework updates.\r\n\r\nAs a team, we regret that this release was shipped with this flaw. This release was tested using our regular and extensive testing process. We are working to improve our testing infrastructure to prevent these type of issues in the future. Again, we are sorry for any inconvenience that this product flaw has caused.\r\n\r\nWe will continue to update this <a href=\"https://blogs.msdn.microsoft.com/dotnet/2019/02/15/advisory-on-february-2019-security-update-for-windows-10-update-1809/\" rel=\"nofollow\">post</a> as we have new information.\r\n<h2>Guidance</h2>\r\nWe are working on guidance and will update this pose and as we have new information.\r\n<h2>Workaround</h2>\r\nThere are no known workarounds at this time.\r\n<h2>Symptoms</h2>\r\nAfter installing .NET Framework 4.8 Preview then the February 2019 security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>, Visual Studios will crash with this error message:\r\n<p class=\"xxxxxmsonormal\"><b><span style=\"font-size: 10.5pt;font-family: 'Segoe UI',sans-serif;color: black\">\"Exception has been thrown by the target of an invocation.\"</span></b></p>\r\n"},{"Id":"9070407129","Type":"IssuesEvent","CreatedAt":"2019-02-14T19:28:26","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/99","RelatedDescription":"Opened issue \"Supporting new Alpine versions (for containers)\" (#99) at dotnet/announcements","RelatedBody":"# Supporting new Alpine versions (for containers)\r\n\r\n[Alpine 3.9](https://twitter.com/alpinelinux/status/1090416212822110214) was recently announced. Congratulations, Alpine team! On the .NET team, we are committed to supporting new Alpine versions quickly, and also need to define a policy for older versions. This policy only applies for the container images that we publish.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #933](https://github.com/dotnet/dotnet-docker/issues/933)\r\n\r\n## Policy\r\n\r\nWe intend to establish the following policy for supporting Alpine with .NET Core container images:\r\n\r\n* Support new Alpine versions within 60 days of release (hopefully much less).\r\n* Support n-1 Alpine versions for 3 months after we support a new Alpine version.\r\n\r\nNote: The [.NET Core support policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md) may be broader. This policy is specific to the container images we produce.\r\n\r\n## Plans\r\n\r\nWe're in the process of [fixing issues required to support Alpine 3.9](https://github.com/dotnet/dotnet-docker/issues/921). We expect that these issues will be resolved in February and that we'll be able to provide support for Alpine 3.9 in March.\r\n\r\nWe will produce Alpine 3.9 images for .NET Core 2.1, 2.2 and 3.0. Assuming we publish 3.9 images in March, we'll stop producing and supporting Alpine 3.7 and 3.8 images after June (2019).\r\n\r\n## Using Alpine-based .NET Core images\r\n\r\nWe produce a variety of Alpine-based images. You can either depend on a specific Alpine version, like with `microsoft/dotnet:2.2-sdk-alpine3.8` or opt to use the latest Alpine image we have to offer, like with `microsoft/dotnet:2.2-sdk-alpine`. Either are good choices. It is just a question of whether you want to make a conscious decision to move to later Alpine releases.\r\n\r\n## Support for ARM32?\r\n\r\nWe produce Alpine images for x64 (and ARM64, shortly). The [Alpine 3.9 announcement](https://twitter.com/alpinelinux/status/1090416212822110214) made mention of support for ARM32v7. We would like to enable .NET Core [Alpine-based images on ARM32](https://github.com/gliderlabs/docker-alpine/issues/463#issuecomment-460530395). We are patiently waiting for that to happen. If that's important to you, you should comment on that thread."},{"Id":"9060710562","Type":"IssuesEvent","CreatedAt":"2019-02-13T14:48:22","Actor":"TaraOverfield","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/98","RelatedDescription":"Opened issue \"February 2019 .NET Updates\" (#98) at dotnet/announcements","RelatedBody":"# February 2019 .NET Updates\r\nThe following .NET updates were released in February 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework January 2019 Security and Quality Rollup - February 12, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/)\r\n\r\n## .NET Support Policies\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"9203972982","Type":"PullRequestEvent","CreatedAt":"2019-03-08T05:14:32","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/23128","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/corefx\" (#23128) at dotnet/coreclr","RelatedBody":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**"},{"Id":"9203701356","Type":"PullRequestEvent","CreatedAt":"2019-03-08T03:43:38","Actor":"sandreenko","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/23116","RelatedDescription":"Merged pull request \"Fix a rare JitStress assert.\" (#23116) at dotnet/coreclr","RelatedBody":"flowgraph.cpp: assert(!IsUninitialized(tree)) can fail if `UninitializedWord` returns a valid pointer value.\r\n\r\nMake pointers unaligned to avoid this situation.\r\n\r\nAlso fix undefined C++ behavior when we check `this == nullptr`."},{"Id":"9203650396","Type":"IssuesEvent","CreatedAt":"2019-03-08T03:28:25","Actor":"GrabYourPitchforks","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/23127","RelatedDescription":"Opened issue \"JIT emits unnecessary movsxd instructions when calling into Span indexer\" (#23127) at dotnet/coreclr","RelatedBody":"When passing a non-constant value into the `Span<T>` and `ReadOnlySpan<T>` indexer, the JIT will emit an unnecessary `movsxd` instruction on x64. The repro is fairly simple:\r\n\r\n```cs\r\nfor (int i = 0; i < ints.Length; i++)\r\n{\r\n    retVal += ints[i];\r\n}\r\n```\r\n\r\nCurrent codegen:\r\n\r\n```asm\r\n00007ffd`2a2e7291 85c9            test    ecx,ecx\r\n00007ffd`2a2e7293 7e0f            jle     <AFTER_LOOP>\r\n00007ffd`2a2e7295 4d63d1          movsxd  r10,r9d\r\n00007ffd`2a2e7298 42030492        add     eax,dword ptr [rdx+r10*4]\r\n00007ffd`2a2e729c 41ffc1          inc     r9d\r\n00007ffd`2a2e729f 443bc9          cmp     r9d,ecx\r\n00007ffd`2a2e72a2 7cf1            jl      00007ffd`2a2e7295\r\n```\r\n\r\nI prototyped the below change in my local branch by modifying the logic in `importer.cpp` to use zero-extension instead of signed-extension for the span indexer and ran a benchmark. The modified code took approximately one-third less time to run. This optimization may be worth investigating if we believe that developers are iterating over spans in hot loops. (Admittedly, any more complex logic within the loop would almost certainly overwhelm these benchmark results.)\r\n\r\n```cpp\r\n            // Element access\r\n            GenTree*             indexIntPtr = gtNewCastNode(TYP_U_IMPL, indexClone, true /* fromUnsigned */, TYP_U_IMPL);   // <-- modified line\r\n            GenTree*             sizeofNode  = gtNewIconNode(elemSize);\r\n            GenTree*             mulNode     = gtNewOperNode(GT_MUL, TYP_U_IMPL, indexIntPtr, sizeofNode);   // <-- modified line\r\n```\r\n\r\n|  Method | Toolchain | SpanLength |          Mean |        Error |       StdDev | Ratio | RatioSD |\r\n|-------- |---------- |----------- |--------------:|-------------:|-------------:|------:|--------:|\r\n| **SumInts** |  **baseline** |         **48** |   **2,921.32 us** |    **53.786 us** |    **44.914 us** |  **1.00** |    **0.00** |\r\n| SumInts |  modified |         48 |   1,964.96 us |    38.825 us |    43.154 us |  0.67 |    0.02 |\r\n|         |           |            |               |              |              |       |         |\r\n| **SumInts** |  **baseline** |        **512** |  **35,429.46 us** |   **574.800 us** |   **537.669 us** |  **1.00** |    **0.00** |\r\n| SumInts |  modified |        512 |  23,219.06 us |   457.335 us |   698.398 us |  0.67 |    0.02 |\r\n|         |           |            |               |              |              |       |         |\r\n| **SumInts** |  **baseline** |       **2048** | **139,664.62 us** | **1,799.241 us** | **1,683.011 us** |  **1.00** |    **0.00** |\r\n| SumInts |  modified |       2048 |  93,175.18 us | 1,838.916 us | 3,586.665 us |  0.66 |    0.04 |\r\n\r\n/cc @dotnet/jit-contrib"},{"Id":"9203604199","Type":"PullRequestEvent","CreatedAt":"2019-03-08T03:14:46","Actor":"kouvel","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/pull/22794","RelatedDescription":"Closed pull request \"Remove Timer _id from CoreCLR implementation\" (#22794) at dotnet/coreclr","RelatedBody":"- Followup to https://github.com/dotnet/corert/pull/7071, would have to be merged into PR that ports https://github.com/dotnet/corert/pull/7071 to CoreCLR"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"9203649981","Type":"PullRequestEvent","CreatedAt":"2019-03-08T03:28:17","Actor":"swaroop-sridhar","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/10951","RelatedDescription":"Opened pull request \"Small updates to runtime.config documentation\" (#10951) at dotnet/cli","RelatedBody":"Update some external document references, and other minor corrections."},{"Id":"9203402624","Type":"IssuesEvent","CreatedAt":"2019-03-08T02:18:27","Actor":"NicolasDorier","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/10950","RelatedDescription":"Opened issue \"Compilation error \"csc.dll\" exited with code 139 on ARMv7l\" (#10950) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n\r\nOn\r\n```\r\nuname -a\r\nLinux odroid 4.14.5-92 #1 SMP PREEMPT Mon Dec 11 15:48:15 UTC 2017 armv7l armv7l armv7l GNU/Linux\r\n```\r\n\r\n\r\n```\r\ngit clone https://github.com/btcpayserver/btcpayserver\r\ncd btcpayserver/btcpayserver\r\ndotnet build -c Release\r\n```\r\n\r\n## Expected  behavior\r\n\r\nBuild succeed.\r\n\r\n## Actual behavior\r\n\r\nUser reported compilation error \"csc.dll\" exited with code 134 on ARM.\r\nThe msbuild seems show error 139 from csc.dll.\r\n\r\n## Environment data\r\n\r\n@enorrmann can you provide precise `dotnet --version` here?\r\n\r\nHe tried with SDK `2.1.504` and `2.2.104` with same error it seems.\r\n\r\n![image](https://user-images.githubusercontent.com/3020646/54002883-7dea0f00-4193-11e9-88bd-03c161406535.png)\r\n\r\n\r\n[msbuild.binlog](https://www.dropbox.com/s/4ic7z1j7qnh72iv/msbuild.binlog?dl=1)\r\n\r\nOrignally reported on https://github.com/btcpayserver/btcpayserver/issues/600\r\n\r\nIt seems same issue as https://github.com/dotnet/roslyn/issues/28038 . I opened a new issue because this one happen on ARM32v7.\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"9203261065","Type":"PullRequestEvent","CreatedAt":"2019-03-08T01:40:03","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/10949","RelatedDescription":"Merged pull request \"Limit job object usage to Windows 8/2012 or later.\" (#10949) at dotnet/cli","RelatedBody":"The ASP.NET Core team has a test that runs on Windows 7/2008 which spawns IIS\r\nExpress.  The test is running under `dotnet test` and thus the child\r\nprocess gets assigned to dotnet's job object for process reaping.  However, IIS\r\nExpress maintains its own job object for the process it spawns and the dotnet\r\njob object assignment interferes with IIS Express' use of its job objects.\r\n\r\nThis occurs on Windows 7 and Windows Server 2008 because those versions of\r\nWindows do not support nested jobs.\r\n\r\nThe fix taken here is to limit the use of job objects for process reaping to\r\nWindows 8 / Windows Server 2012 or later.  This is done with an explicit OS\r\nversion check because there is no change to the Job Objects API to enable\r\nsupport for nested jobs and thus no other way to determine if the feature is\r\navailable to us.\r\n\r\nFixes #10947."},{"Id":"9203261044","Type":"IssuesEvent","CreatedAt":"2019-03-08T01:40:02","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/10947","RelatedDescription":"Closed issue \"Adding child processes to job objects prevents them from creating job objects of their own\" (#10947) at dotnet/cli","RelatedBody":"We are hitting an issue while trying to test AspNetCore Module for IIS Express on Windows 7/2008R2 after taking and SDK with https://github.com/dotnet/cli/pull/10720 change.\r\n\r\nIn the test, we start IIS Express process that spawns new indstance of dotnet.exe, tries to attach it to a job object and fails because the entire process tree is already attached to the job object that CLI has created.\r\n\r\nI see couple possible solutions:\r\n1. Disable process tracking using job objects on Windows 7\r\n2. Set `JOB_OBJECT_LIMIT_BREAKAWAY_OK` flag set on the job object.\r\n\r\ncc @peterhuene @danmosemsft \r\n\r\n\r\n\r\n"},{"Id":"9203047375","Type":"PullRequestEvent","CreatedAt":"2019-03-08T00:42:49","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/10949","RelatedDescription":"Opened pull request \"Limit job object usage to Windows 8/2012 or later.\" (#10949) at dotnet/cli","RelatedBody":"The ASP.NET Core team has a test that runs on Windows 7/2008 which spawns IIS\r\nExpress.  The test is running under `dotnet test` and thus the child\r\nprocess gets assigned to dotnet's job object for process reaping.  However, IIS\r\nExpress maintains its own job object for the process it spawns and the dotnet\r\njob object assignment interferes with IIS Express' use of its job objects.\r\n\r\nThis occurs on Windows 7 and Windows Server 2008 because those versions of\r\nWindows do not support nested jobs.\r\n\r\nThe fix taken here is to limit the use of job objects for process reaping to\r\nWindows 8 / Windows Server 2012 or later.  This is done with an explicit OS\r\nversion check because there is no change to the Job Objects API to enable\r\nsupport for nested jobs and thus no other way to determine if the feature is\r\navailable to us.\r\n\r\nFixes #10947."},{"Id":"9202986181","Type":"IssuesEvent","CreatedAt":"2019-03-08T00:26:44","Actor":"jaredpar","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/10948","RelatedDescription":"Opened issue \"SDK should use Microsoft.Net.Compilers.Toolset package\" (#10948) at dotnet/cli","RelatedBody":"The Roslyn team is deprecating the Microsoft.NETCore.Compilers package which contained only CoreCLR binaries and moving to Microsoft.Net.Compilers.Toolset which contains desktop and CoreCLR binaries. The SDK should switch to using this package when taking new Roslyn drops. \r\n\r\n\r\n@nguerrera is aware of this change. "}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"9202448299","Type":"IssuesEvent","CreatedAt":"2019-03-07T22:27:38","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/1097","RelatedDescription":"Closed issue \"Change .NET Standard 2.1 version number\" (#1097) at dotnet/standard","RelatedBody":"It was just [announced ](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-preview-3/#) that the next version of .NET Standard will be 2.1, which will be implemented by .NET Core 3.0 and incompatible with .NET Core 2.1 and incompatible with any version of .NET Framework. Got all that?\r\n\r\nI implore you to please change the version number of Standard 2.1 before it's too late. It is extremely confusing to have it be Standard 2.1 which is incompatible with Core 2.1. I strongly feel that Standard should version alongside of Core (given that Core is the lead implementation of .NET) and should be Standard 3.0\r\n\r\nIn lieu of that, at the very least it should get a version number which doesn't actively lead to confusion by aligning with the version number of an incompatible version of Core. Standard 2.5?\r\n\r\nI know Microsoft has a reputation to uphold at being horrible at naming things, but this is a bridge too far :)"},{"Id":"9201362694","Type":"IssuesEvent","CreatedAt":"2019-03-07T19:26:12","Actor":"MgSam","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/1097","RelatedDescription":"Opened issue \"Change .NET Standard 2.1 version number\" (#1097) at dotnet/standard","RelatedBody":"It was just [announced ](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-preview-3/#) that the next version of .NET Standard will be 2.1, which will be implemented by .NET Core 3.0 and incompatible with .NET Core 2.1 and incompatible with any version of .NET Framework. Got all that?\r\n\r\nI implore you to please change the version number of Standard 2.1 before it's too late. It is extremely confusing to have it be Standard 2.1 which is incompatible with Core 2.1. I strongly feel that Standard should version alongside of Core (given that Core is the lead implementation of .NET) and should be Standard 3.0\r\n\r\nIn lieu of that, at the very least it should get a version number which doesn't actively lead to confusion by aligning with the version number of an incompatible version of Core. Standard 2.5?\r\n\r\nI know Microsoft has a reputation to uphold at being horrible at naming things, but this is a bridge too far : )"},{"Id":"9187528444","Type":"PullRequestEvent","CreatedAt":"2019-03-06T03:17:38","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1096","RelatedDescription":"Merged pull request \"Update information for .NET Standard 2.1\" (#1096) at dotnet/standard","RelatedBody":"This updates the version table for .NET Standard 2.1 as well as the API diff.\r\n\r\n/cc @mairaw "},{"Id":"9187527961","Type":"PullRequestEvent","CreatedAt":"2019-03-06T03:17:31","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1096","RelatedDescription":"Opened pull request \"Update information for .NET Standard 2.1\" (#1096) at dotnet/standard","RelatedBody":"This updates the version table for .NET Standard 2.1 as well as the API diff.\r\n\r\n/cc @mairaw "},{"Id":"9187506544","Type":"PullRequestEvent","CreatedAt":"2019-03-06T03:11:40","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1095","RelatedDescription":"Merged pull request \"Add footnote regarding .NET Framework 4.6.1 support\" (#1095) at dotnet/standard","RelatedBody":"This mirrors what's already in the docs"},{"Id":"9187505457","Type":"PullRequestEvent","CreatedAt":"2019-03-06T03:11:21","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1095","RelatedDescription":"Opened pull request \"Add footnote regarding .NET Framework 4.6.1 support\" (#1095) at dotnet/standard","RelatedBody":""}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"9203987225","Type":"PullRequestEvent","CreatedAt":"2019-03-08T05:19:18","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/35872","RelatedDescription":"Merged pull request \"Fix ReflectPropertyDescriptor.IsReadOnly\" (#35872) at dotnet/corefx","RelatedBody":"When this code was ported from Desktop, the implementation was changed to use `PropertyInfo.GetMethod/SetMethod` which gets private properties as well. This breaks `ReflectPropertyDescriptor.IsReadOnly` when the set method is marked as private, because we're always able to find it via reflection, so we `return false` even though it is indeed read only.\r\n\r\nFixes: https://github.com/dotnet/corefx/issues/33629\r\n\r\ncc: @jkotas "},{"Id":"9203987213","Type":"IssuesEvent","CreatedAt":"2019-03-08T05:19:18","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/33629","RelatedDescription":"Closed issue \"PropertyDescriptor's IsReadOnly returns false for a property with private set accessor\" (#33629) at dotnet/corefx","RelatedBody":"When a class has a property with a private **set** accessor, its [PropertyDescriptor's IsReadOnly](https://docs.microsoft.com/en-us/dotnet/api/system.componentmodel.propertydescriptor.isreadonly?view=netcore-2.1#System_ComponentModel_PropertyDescriptor_IsReadOnly) property returns **false**. The same code evaluates IsReadOnly to **true** in .NET Framework 4.7.2. \r\nThe following code demonstrates the issue:\r\n```\r\n        static void AssertReadOnlyAttribute()\r\n        {\r\n            var foo = new Foo();\r\n            var barProperty = TypeDescriptor.GetProperties(foo).Find(\"Bar\", true);\r\n            System.Diagnostics.Debug.Assert(barProperty.IsReadOnly);\r\n        }\r\n\r\n        class Foo\r\n        {\r\n            public bool Bar { get; private set; }\r\n        }\r\n```"},{"Id":"9203975631","Type":"PullRequestEvent","CreatedAt":"2019-03-08T05:15:22","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/35854","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/coreclr\" (#35854) at dotnet/corefx","RelatedBody":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/coreclr\r\n\r\n- Microsoft.NET.Sdk.IL - 3.0.0-preview4-27506-73\r\n- Microsoft.NETCore.ILAsm - 3.0.0-preview4-27506-73\r\n- Microsoft.NETCore.Runtime.CoreCLR - 3.0.0-preview4-27506-73\r\n\r\n"},{"Id":"9203973477","Type":"PullRequestEvent","CreatedAt":"2019-03-08T05:14:43","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/35853","RelatedDescription":"Merged pull request \"Improve process test fail output\" (#35853) at dotnet/corefx","RelatedBody":"contributes to https://github.com/dotnet/corefx/issues/35783\r\n\r\nOutput sample\r\n```\r\n  ...\r\n  Pid: 15388 Name: MSBuild' Main module: 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Preview\\MSBuild\\Current\\Bin\\MSBuild.exe'\r\n  Pid: 18128 Name: conhost' Main module: 'C:\\WINDOWS\\system32\\conhost.exe'\r\n  Pid: 3172 Name: Microsoft.Alm.Shared.Remoting.RemoteContainer.dll' Main module: 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Preview\\common7\\ide\\PrivateAssemblies\\Microsoft.Alm.Shared.Remoting.RemoteContainer.dll'\r\n  Pid: 10644 Name: smartscreen' Main module: 'C:\\Windows\\System32\\smartscreen.exe'\r\n  Pid: 5764 Name: ConEmu64' Main module: 'C:\\tools\\cmder\\vendor\\conemu-maximus5\\ConEmu64.exe'\r\n  Pid: 15132 Name: ConEmuC64' Main module: 'C:\\tools\\cmder\\vendor\\conemu-maximus5\\ConEmu\\ConEmuC64.exe'\r\n  Pid: 9324 Name: conhost' Main module: 'C:\\WINDOWS\\system32\\conhost.exe'\r\n  Pid: 7312 Name: cmd' Main module: 'C:\\WINDOWS\\SYSTEM32\\cmd.exe'\r\n  Pid: 6216 Name: VBCSCompiler' Main module: 'C:\\Users\\Marco\\.nuget\\packages\\microsoft.net.compilers\\3.0.0-beta4-final\\tools\\VBCSCompiler.exe'\r\n  Pid: 17984 Name: conhost' Main module: 'C:\\WINDOWS\\system32\\conhost.exe'\r\n  Pid: 13024 Name: svchost' Main module: 'C:\\WINDOWS\\system32\\svchost.exe'\r\n  Pid: 17384 Name: MSBuild' Main module: 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\15.0\\bin\\MSBuild.exe'\r\n  Pid: 8004 Name: cmd' Main module: 'C:\\WINDOWS\\SysWOW64\\cmd.exe'\r\n  Pid: 16692 Name: conhost' Main module: 'C:\\WINDOWS\\system32\\conhost.exe'\r\n  Pid: 16116 Name: dotnet' Main module: 'C:\\git\\corefx\\artifacts\\bin\\testhost\\netcoreapp-Windows_NT-Debug-x64\\dotnet.exe'\r\n  Current process id: 16116\r\n      System.Diagnostics.Tests.ProcessTests.GetProcessesByName_ProcessName_ReturnsExpected [FAIL]\r\n        Assert.False() Failure\r\n        Expected: False\r\n        Actual:   True\r\n        Stack Trace:\r\n          C:\\git\\corefx\\src\\System.Diagnostics.Process\\tests\\ProcessTests.cs(1079,0): at System.Diagnostics.Tests.ProcessTests.GetProcessesByName_ProcessName_ReturnsExpected()\r\n   ...\r\n```\r\n\r\n/cc @danmosemsft @ahsonkhan "},{"Id":"9203967019","Type":"PullRequestEvent","CreatedAt":"2019-03-08T05:12:32","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/35851","RelatedDescription":"Merged pull request \"Added UserFlags field, unblocks #34560\" (#35851) at dotnet/corefx","RelatedBody":"Unblocks #34560 \r\n\r\nBased on the discussion in #34560 extracted this change to separate PR.\r\n\r\n/cc: @stephentoub @danmosemsft @jkotas @karelz "},{"Id":"9203884064","Type":"PullRequestEvent","CreatedAt":"2019-03-08T04:44:12","Actor":"lmolkova","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/35882","RelatedDescription":"Opened pull request \"Inject W3C headers in HTTP diagnostics handler\" (#35882) at dotnet/corefx","RelatedBody":"Depending on the Activity.IdFormat we want to inject [W3C distributed tracing](https://github.com/w3c/trace-context) headers or Request-Id headers."},{"Id":"9203878998","Type":"IssuesEvent","CreatedAt":"2019-03-08T04:42:26","Actor":"mandylatson","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/35881","RelatedDescription":"Opened issue \"🌐MRGL©\" (#35881) at dotnet/corefx","RelatedBody":"Machine Technologies© Microsoft world of enterprise and electric elements and intelligent inerface"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"9204008142","Type":"IssuesEvent","CreatedAt":"2019-03-08T05:26:10","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/33965","RelatedDescription":"Opened issue \"`System.TypedReference` should be treated as managed\" (#33965) at dotnet/roslyn","RelatedBody":"Even once the [corefx issue](https://github.com/dotnet/corefx/issues/35873) (adding a dummy `object` field to the ref assembly for `TypedReference`) is fixed, we're not sure that the compiler will honor it properly. We may have to add a special case to recognize `TypedReference`.\r\n\r\nThe goal is that `var x = stackalloc TypedReference[10];` should be an error (because `TypedReference` is managed)."},{"Id":"9203415981","Type":"PullRequestEvent","CreatedAt":"2019-03-08T02:22:06","Actor":"heejaechang","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/33964","RelatedDescription":"Opened pull request \"support feature flag service in IExperimentationService\" (#33964) at dotnet/roslyn","RelatedBody":"this will let us to create private ring of specific groups for new features until it is ready for bigger group.\r\n\r\nonce feature is ready for bigger group, this service can support VS experiment flight service which will let us to enable new features for bigger group.\r\n\r\nonce we are confident on the feature, we will enable it for general public"},{"Id":"9203401827","Type":"IssuesEvent","CreatedAt":"2019-03-08T02:18:13","Actor":"jnm2","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/33963","RelatedDescription":"Opened issue \"'Generate constructor' should not add null checks for nullable parameters.\" (#33963) at dotnet/roslyn","RelatedBody":"**Version Used**: Visual Studio 2019 RC.1 SVC 1\r\n\r\n`Generate constructor' with 'Add null checks' currently generates parameters which are pointlessly nullable, since the constructor throws if `null` is actually passed:\r\n\r\n```cs\r\nclass C\r\n{\r\n    public C(string foo, int? bar)\r\n    {\r\n        Foo = foo ?? throw new ArgumentNullException(nameof(foo));\r\n        Bar = bar ?? throw new ArgumentNullException(nameof(bar));\r\n    }\r\n\r\n    public string Foo { get; }\r\n    public int? Bar { get; }\r\n}\r\n```\r\n\r\nI'd expect nullable parameters to be passed over. I don't know what happens when you nullable reference types at it, but right now I really care about the experience with nullable value types."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"9203315167","Type":"PullRequestEvent","CreatedAt":"2019-03-08T01:54:43","Actor":"sergiy-k","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7127","RelatedDescription":"Merged pull request \"Unify invocation of build and test scripts on all platforms\" (#7127) at dotnet/corert","RelatedBody":""},{"Id":"9202474162","Type":"PullRequestEvent","CreatedAt":"2019-03-07T22:32:35","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7130","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#7130) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"9202055062","Type":"IssuesEvent","CreatedAt":"2019-03-07T21:19:46","Actor":"tonerdo","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/7129","RelatedDescription":"Opened issue \"[Interpreter] Implement newobj opcode\" (#7129) at dotnet/corert","RelatedBody":"I'm working on adding support for the `newobj` opcode and I think I might need some help.\r\n\r\nHere's what I'm doing:\r\n\r\n* Retrieve the constructor and its owning type\r\n  ```csharp\r\n  MethodDesc constructor = (MethodDesc)_methodIL.GetObject(token);\r\n  TypeDesc owningType = constructor.OwningType;\r\n  ```\r\n* Create a zero-initialized object from the owning type\r\n  ```csharp\r\n  object @this = RuntimeAugments.NewObject(owningType.GetRuntimeTypeHandle());\r\n  ```\r\n* Call the dynamic invoke method to invoke the constructor\r\n  ```csharp\r\n  object obj = RuntimeAugments.CallDynamicInvokeMethod(\r\n                thisPtr: @this,\r\n                methodToCall: constructor.FunctionPointer,\r\n                thisPtrDynamicInvokeMethod: null,\r\n                dynamicInvokeHelperMethod: IntPtr.Zero,\r\n                dynamicInvokeHelperGenericDictionary: IntPtr.Zero,\r\n                defaultParametersContext: null,\r\n                parameters: arguments,\r\n                binderBundle: null,\r\n                wrapInTargetInvocationException: true,\r\n                invokeMethodHelperIsThisCall: false,\r\n                methodToCallIsThisCall: true);\r\n  ```\r\n\r\nHere are the problems I'm having:\r\n\r\n* `constructor.FunctionPointer` always returns `IntPtr.Zero` and I've not been to figure out how to get a `RuntimeMethodHandle` from `constructor`\r\n* After taking a look at the invokers in the Reflection package, I came to the conclusion that I have to pass in non-zero pointers for  `dynamicInvokeHelperMethod` and `defaultParametersContext`. However, it's not immediately clear what these methods do and where they come from.\r\n\r\ncc @MichalStrehovsky @jkotas "},{"Id":"9201769470","Type":"PullRequestEvent","CreatedAt":"2019-03-07T20:32:05","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7128","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#7128) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @hughbe"},{"Id":"9201263926","Type":"PullRequestEvent","CreatedAt":"2019-03-07T19:10:32","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7128","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#7128) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"9196047747","Type":"PullRequestEvent","CreatedAt":"2019-03-07T05:25:18","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7126","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/corefx,coreclr\" (#7126) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @ViktorHofer @dotnet-maestro[bot] @shadow-cs @marek-safar @maryamariyan @stephentoub @tannergooding"},{"Id":"9195520791","Type":"PullRequestEvent","CreatedAt":"2019-03-07T02:46:42","Actor":"sergiy-k","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7127","RelatedDescription":"Opened pull request \"[WIP] Unify invocation of build and test scripts on all platforms\" (#7127) at dotnet/corert","RelatedBody":""},{"Id":"9195312120","Type":"PullRequestEvent","CreatedAt":"2019-03-07T01:53:13","Actor":"sergiy-k","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7125","RelatedDescription":"Merged pull request \"Add scripts to set up CI with Azure Pipelines for Linux\" (#7125) at dotnet/corert","RelatedBody":"This adds support for building and testing Pull Requests in Ubuntu docker containers. Note that docker images have all required dependencies preinstalled."},{"Id":"9193802750","Type":"PullRequestEvent","CreatedAt":"2019-03-06T20:41:56","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7126","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/corefx,coreclr\" (#7126) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"9192922873","Type":"PullRequestEvent","CreatedAt":"2019-03-06T18:24:45","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/7080","RelatedDescription":"Closed pull request \"Set up CI with Azure Pipelines\" (#7080) at dotnet/corert","RelatedBody":""},{"Id":"9189337880","Type":"PullRequestEvent","CreatedAt":"2019-03-06T09:57:23","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7077","RelatedDescription":"Merged pull request \"wasm: fix for incorrect use of VirtualMethodUseNode for generic method\" (#7077) at dotnet/corert","RelatedBody":"fixes #7073 .  Generic virtual methods were creating a `VirtualMethodUseNode` which I understand to be incorrect.  This PR adds a test for this type of call and calls `NodeFactory.MethodEntrypoint` instead.  I'd welcome feedback on how correct that is, it passes the simple test here, but possibly I'm not understanding the full implication.  Also I've not changed the processing for the `Ldvirtftn` opcode, would that suffer the same problem and if so, how would that be exercised?"},{"Id":"9189337828","Type":"IssuesEvent","CreatedAt":"2019-03-06T09:57:23","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/7073","RelatedDescription":"Closed issue \"wasm: A generic method on an interface fails to compile\" (#7073) at dotnet/corert","RelatedBody":"The following code fails to compile as it hits an assert:\r\n```\r\n    private static void TestVirtualMethodUse()\r\n    {\r\n        TestGenItf implInt = new TestGenItf();\r\n        implInt.Log<object>(new object());\r\n    }\r\n\r\n    public interface ITestGenItf\r\n    {\r\n        bool Log<TState>(TState state);\r\n    }\r\n\r\n    public class TestGenItf : ITestGenItf\r\n    {\r\n        public bool Log<TState>(TState state)\r\n        {\r\n            return true;\r\n        }\r\n    }\r\n```\r\n\r\nHits the assert at \r\nhttps://github.com/dotnet/corert/blob/a99bac8c410b9cbb2b5f6583105ea53db372e61d/src/ILCompiler.Compiler/src/Compiler/DependencyAnalysis/VirtualMethodUseNode.cs#L39\r\nwhen compiling the method `{[HelloWasm]Program+TestGenItf.Log<TState>(!!0)}`\r\n\r\nStack is\r\n```\r\n \tSystem.Private.CoreLib.dll!System.Diagnostics.Debug.Assert(bool condition, string message, string detailMessage) Line 107\tC#\r\n>\tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.VirtualMethodUseNode.VirtualMethodUseNode(Internal.TypeSystem.MethodDesc decl) Line 39\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.CreateNodeCaches.AnonymousMethod__36_19(Internal.TypeSystem.MethodDesc method) Line 303\tC#\r\n \tSystem.Collections.Concurrent.dll!System.Collections.Concurrent.ConcurrentDictionary<Internal.TypeSystem.MethodDesc, ILCompiler.DependencyAnalysis.VirtualMethodUseNode>.GetOrAdd(Internal.TypeSystem.MethodDesc key, System.Func<Internal.TypeSystem.MethodDesc, ILCompiler.DependencyAnalysis.VirtualMethodUseNode> valueFactory) Line 989\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.NodeCache<Internal.TypeSystem.MethodDesc, ILCompiler.DependencyAnalysis.VirtualMethodUseNode>.GetOrAdd(Internal.TypeSystem.MethodDesc key) Line 150\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.DependencyAnalysis.NodeFactory.VirtualMethodUse(Internal.TypeSystem.MethodDesc decl) Line 885\tC#\r\n \tILCompiler.WebAssembly.dll!Internal.IL.ILImporter.AddVirtualMethodReference(Internal.TypeSystem.MethodDesc method) Line 2330\tC#\r\n \tILCompiler.WebAssembly.dll!Internal.IL.ILImporter.HandleCall(Internal.TypeSystem.MethodDesc callee, Internal.TypeSystem.MethodSignature signature, Internal.IL.StackEntry[] argumentValues, Internal.IL.ILOpcode opcode, Internal.TypeSystem.TypeDesc constrainedType, LLVMSharp.LLVMValueRef calliTarget, Internal.TypeSystem.TypeDesc forcedReturnType) Line 2037\tC#\r\n \tILCompiler.WebAssembly.dll!Internal.IL.ILImporter.HandleCall(Internal.TypeSystem.MethodDesc callee, Internal.TypeSystem.MethodSignature signature, Internal.IL.ILOpcode opcode, Internal.TypeSystem.TypeDesc constrainedType, LLVMSharp.LLVMValueRef calliTarget) Line 2029\tC#\r\n \tILCompiler.WebAssembly.dll!Internal.IL.ILImporter.ImportCall(Internal.IL.ILOpcode opcode, int token) Line 1688\tC#\r\n \tILCompiler.WebAssembly.dll!Internal.IL.ILImporter.ImportBasicBlock(Internal.IL.ILImporter.BasicBlock basicBlock) Line 581\tC#\r\n \tILCompiler.WebAssembly.dll!Internal.IL.ILImporter.ImportBasicBlocks() Line 304\tC#\r\n \tILCompiler.WebAssembly.dll!Internal.IL.ILImporter.Import() Line 163\tC#\r\n \tILCompiler.WebAssembly.dll!Internal.IL.ILImporter.CompileMethod(ILCompiler.WebAssemblyCodegenCompilation compilation, ILCompiler.DependencyAnalysis.WebAssemblyMethodCodeNode methodCodeNodeNeedingCode) Line 86\tC#\r\n \tILCompiler.WebAssembly.dll!ILCompiler.WebAssemblyCodegenCompilation.ComputeDependencyNodeDependencies(System.Collections.Generic.List<ILCompiler.DependencyAnalysisFramework.DependencyNodeCore<ILCompiler.DependencyAnalysis.NodeFactory>> obj) Line 62\tC#\r\n \tILCompiler.DependencyAnalysisFramework.dll!ILCompiler.DependencyAnalysisFramework.DependencyAnalyzer<ILCompiler.DependencyAnalysisFramework.NoLogStrategy<ILCompiler.DependencyAnalysis.NodeFactory>, ILCompiler.DependencyAnalysis.NodeFactory>.ComputeDependencies(System.Collections.Generic.List<ILCompiler.DependencyAnalysisFramework.DependencyNodeCore<ILCompiler.DependencyAnalysis.NodeFactory>> deferredStaticDependencies) Line 139\tC#\r\n \tILCompiler.DependencyAnalysisFramework.dll!ILCompiler.DependencyAnalysisFramework.DependencyAnalyzer<ILCompiler.DependencyAnalysisFramework.NoLogStrategy<ILCompiler.DependencyAnalysis.NodeFactory>, ILCompiler.DependencyAnalysis.NodeFactory>.ComputeMarkedNodes() Line 262\tC#\r\n \tILCompiler.WebAssembly.dll!ILCompiler.WebAssemblyCodegenCompilation.CompileInternal(string outputFile, ILCompiler.ObjectDumper dumper) Line 51\tC#\r\n \tILCompiler.Compiler.dll!ILCompiler.Compilation.ILCompiler.ICompilation.Compile(string outputFile, ILCompiler.ObjectDumper dumper) Line 382\tC#\r\n \tilc.dll!ILCompiler.Program.Run(string[] args) Line 574\tC#\r\n \tilc.dll!ILCompiler.Program.Main(string[] args) Line 730\tC#\r\n```"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"9202888854","Type":"PullRequestEvent","CreatedAt":"2019-03-08T00:01:52","Actor":"dotnet-bot","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/3013","RelatedDescription":"Opened pull request \"Merge release/3.0.1xx to master\" (#3013) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/3.0.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"9202748359","Type":"PullRequestEvent","CreatedAt":"2019-03-07T23:28:08","Actor":"dotnet-maestro[bot]","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/3012","RelatedDescription":"Merged pull request \"[release/3.0.1xx] Update dependencies from dotnet/arcade\" (#3012) at dotnet/sdk","RelatedBody":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19157.4\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19157.4\r\n\r\n"},{"Id":"9202394202","Type":"PullRequestEvent","CreatedAt":"2019-03-07T22:17:40","Actor":"dotnet-maestro[bot]","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/3012","RelatedDescription":"Opened pull request \"[release/3.0.1xx] Update dependencies from dotnet/arcade\" (#3012) at dotnet/sdk","RelatedBody":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19157.4\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19157.4\r\n\r\n"},{"Id":"9202383807","Type":"IssuesEvent","CreatedAt":"2019-03-07T22:15:50","Actor":"nkolev92","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/3011","RelatedDescription":"Opened issue \"The SDK should error if a FrameworkReference is not supported for a certain TFM\" (#3011) at dotnet/sdk","RelatedBody":"Came up during the design discussion for FrameworkReference + NuGet. \r\nhttps://github.com/NuGet/Home/issues/7342\r\n\r\nThe SDK should error if a FrameworkReference is not supported for a certain TFM. \r\n\r\n* In the project author case, clearly call out that this is an authoring mistake. \r\n* In the transitive (project/package) case, clearly blame the package/project. \r\n\r\n//cc @nguerrera"}],"ResultType":"GitHubEvent"},"Home-Issues":{"Issues":[{"Id":"417018694","IsPullRequest":true,"CreatedAt":"2019-03-04T22:18:30","Actor":"jkonicki","Number":"136","RawContent":null,"Title":"Fix logo and update team contributors","State":"open","Body":"","Url":"https://github.com/dotnet/foundation/pull/136","RelatedDescription":"Open PR \"Fix logo and update team contributors\" (#136)"},{"Id":"416428925","IsPullRequest":true,"CreatedAt":"2019-03-02T18:57:28","Actor":"manne","Number":"135","RawContent":null,"Title":"adds Umbraco logo","State":"open","Body":"fixes #124 ","Url":"https://github.com/dotnet/foundation/pull/135","RelatedDescription":"Open PR \"adds Umbraco logo\" (#135)"},{"Id":"416427614","IsPullRequest":true,"CreatedAt":"2019-03-02T18:43:42","Actor":"manne","Number":"134","RawContent":null,"Title":"adds the prism logo","State":"open","Body":"fixes #126 ","Url":"https://github.com/dotnet/foundation/pull/134","RelatedDescription":"Open PR \"adds the prism logo\" (#134)"},{"Id":"416157860","IsPullRequest":true,"CreatedAt":"2019-03-01T15:37:52","Actor":"glennawatson","Number":"133","RawContent":null,"Title":"Add additional ReactiveUI organization projects.","State":"open","Body":"","Url":"https://github.com/dotnet/foundation/pull/133","RelatedDescription":"Open PR \"Add additional ReactiveUI organization projects.\" (#133)"},{"Id":"407251900","IsPullRequest":true,"CreatedAt":"2019-02-18T17:45:44","Actor":"Potapy4","Number":"132","RawContent":null,"Title":"Update MVVM project logo","State":"closed","Body":"Fixes dotnet/dotnetfoundation-website#72\r\nFixes #125","Url":"https://github.com/dotnet/foundation/pull/132","RelatedDescription":"Closed or merged PR \"Update MVVM project logo\" (#132)"},{"Id":"391459919","IsPullRequest":false,"CreatedAt":"2019-02-18T17:45:44","Actor":"manne","Number":"125","RawContent":null,"Title":"Missing logo for MVVM Light Toolkit","State":"closed","Body":"`https://raw.githubusercontent.com/paulcbetts/mvvmlight/master/Installer/InstallItems/html/MVVM_BlackText_190x147.png` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L137-L139","Url":"https://github.com/dotnet/foundation/issues/125","RelatedDescription":"Closed issue \"Missing logo for MVVM Light Toolkit\" (#125)"},{"Id":"406210463","IsPullRequest":true,"CreatedAt":"2019-02-18T17:44:39","Actor":"NextTurn","Number":"131","RawContent":null,"Title":"Update links","State":"closed","Body":"Replace http links with https where possible - both returned 200 OK.","Url":"https://github.com/dotnet/foundation/pull/131","RelatedDescription":"Closed or merged PR \"Update links\" (#131)"},{"Id":"399191617","IsPullRequest":true,"CreatedAt":"2019-02-02T11:04:15","Actor":"NextTurn","Number":"130","RawContent":null,"Title":"Update links","State":"closed","Body":"OpenXmlDeveloper.org was shut down long ago.\r\n\r\nThe content has been moved to EricWhite.com.","Url":"https://github.com/dotnet/foundation/pull/130","RelatedDescription":"Closed or merged PR \"Update links\" (#130)"},{"Id":"395863354","IsPullRequest":true,"CreatedAt":"2019-01-09T22:28:14","Actor":"ErikEJ","Number":"128","RawContent":null,"Title":"Update of EF description","State":"closed","Body":"@divega !","Url":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Closed or merged PR \"Update of EF description\" (#128)"},{"Id":"395901602","IsPullRequest":true,"CreatedAt":"2019-01-05T03:23:39","Actor":"MarcBruins","Number":"129","RawContent":null,"Title":"Update to absolute path","State":"closed","Body":"Update to absolute path so that when this list is copied the link will actually work","Url":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Closed or merged PR \"Update to absolute path\" (#129)"},{"Id":"395705579","IsPullRequest":true,"CreatedAt":"2019-01-04T00:22:42","Actor":"carloscds","Number":"127","RawContent":null,"Title":"Update documentation information","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/127","RelatedDescription":"Closed or merged PR \"Update documentation information\" (#127)"},{"Id":"391459057","IsPullRequest":true,"CreatedAt":"2019-01-03T04:47:09","Actor":"manne","Number":"122","RawContent":null,"Title":"targets the existing document","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/122","RelatedDescription":"Closed or merged PR \"targets the existing document\" (#122)"},{"Id":"384569679","IsPullRequest":true,"CreatedAt":"2019-01-03T04:46:31","Actor":"JamesNK","Number":"121","RawContent":null,"Title":"Add Newtonsoft.Json","State":"closed","Body":"// @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/121","RelatedDescription":"Closed or merged PR \"Add Newtonsoft.Json\" (#121)"},{"Id":"391460225","IsPullRequest":false,"CreatedAt":"2018-12-16T11:57:53","Actor":"manne","Number":"126","RawContent":null,"Title":"No logo provided for Prism","State":"open","Body":"Can/should this [image](http://prismlibrary.github.io/images/logo-prism-symbol@2x.png) be used?\r\n\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L155-L157","Url":"https://github.com/dotnet/foundation/issues/126","RelatedDescription":"Open issue \"No logo provided for Prism\" (#126)"},{"Id":"391459812","IsPullRequest":false,"CreatedAt":"2018-12-16T11:52:07","Actor":"manne","Number":"124","RawContent":null,"Title":"Missing logo for Umbraco","State":"open","Body":"`https://fbcdn-profile-a.akamaihd.net/hprofile-ak-xap1/v/t1.0-1/p160x160/971596_519168901464439_566592989_n.png?oh=ce61e5b4cbd60c0d99c4164cbb05a434&oe=54F091C9&__gda__=1424472439_c9f76213a915bc2af88246f464f29e8b` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L149-L151","Url":"https://github.com/dotnet/foundation/issues/124","RelatedDescription":"Open issue \"Missing logo for Umbraco\" (#124)"},{"Id":"391459677","IsPullRequest":false,"CreatedAt":"2018-12-16T11:50:29","Actor":"manne","Number":"123","RawContent":null,"Title":"Missing logo for Steeltoe","State":"open","Body":"`https://brandfolder.com/pivotal-assets/attachments/ohxttd-7yxa60-clvf50/pivotal-assets-pivotal-genericfile.png` redirects to a sign in page\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L128-L130","Url":"https://github.com/dotnet/foundation/issues/123","RelatedDescription":"Open issue \"Missing logo for Steeltoe\" (#123)"},{"Id":"384212839","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:50","Actor":"stefanov-stefan","Number":"120","RawContent":null,"Title":"Added Telerik info","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/120","RelatedDescription":"Closed or merged PR \"Added Telerik info\" (#120)"},{"Id":"384212448","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:22","Actor":"stefanov-stefan","Number":"119","RawContent":null,"Title":"Added Telerik UWP proj","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/119","RelatedDescription":"Closed or merged PR \"Added Telerik UWP proj\" (#119)"},{"Id":"382378851","IsPullRequest":true,"CreatedAt":"2018-11-23T10:32:15","Actor":"pkgw","Number":"118","RawContent":null,"Title":"Update WorldWide Telescope","State":"closed","Body":"Some layout fixes, but the main change is that @pkgw is now the project director.","Url":"https://github.com/dotnet/foundation/pull/118","RelatedDescription":"Closed or merged PR \"Update WorldWide Telescope\" (#118)"},{"Id":"380070557","IsPullRequest":true,"CreatedAt":"2018-11-23T10:31:49","Actor":"leastprivilege","Number":"117","RawContent":null,"Title":"Update identityserver.md","State":"closed","Body":"significant whitespace","Url":"https://github.com/dotnet/foundation/pull/117","RelatedDescription":"Closed or merged PR \"Update identityserver.md\" (#117)"},{"Id":"379731798","IsPullRequest":true,"CreatedAt":"2018-11-13T04:22:32","Actor":"leastprivilege","Number":"114","RawContent":null,"Title":"Update identityserver.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/114","RelatedDescription":"Closed or merged PR \"Update identityserver.md\" (#114)"},{"Id":"379777451","IsPullRequest":true,"CreatedAt":"2018-11-13T04:21:35","Actor":"scottbrady91","Number":"116","RawContent":null,"Title":"Update to IdentityManager project","State":"closed","Body":"My employer and I have recently taken over the IdentityManager project from Dom & Brock. I've updated the IdentityManager page to reflect this and the newer version of the core repo.","Url":"https://github.com/dotnet/foundation/pull/116","RelatedDescription":"Closed or merged PR \"Update to IdentityManager project\" (#116)"},{"Id":"379733880","IsPullRequest":true,"CreatedAt":"2018-11-13T04:20:23","Actor":"leastprivilege","Number":"115","RawContent":null,"Title":"Create identitymodel.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/115","RelatedDescription":"Closed or merged PR \"Create identitymodel.md\" (#115)"},{"Id":"371941750","IsPullRequest":true,"CreatedAt":"2018-11-01T16:20:07","Actor":"SeanKilleen","Number":"113","RawContent":null,"Title":"Update logo for couchbase-lite in projects.json","State":"closed","Body":"Uses a working link to the logo.\r\n\r\nResolves https://github.com/dotnet/dotnetfoundation-website/issues/65\r\n\r\nFix can be verified by copying/pasting the URL into a browser.","Url":"https://github.com/dotnet/foundation/pull/113","RelatedDescription":"Closed or merged PR \"Update logo for couchbase-lite in projects.json\" (#113)"},{"Id":"365089074","IsPullRequest":false,"CreatedAt":"2018-09-29T02:45:47","Actor":"athinboy","Number":"112","RawContent":null,"Title":"Suggest: key  F12  go to source code of dotnetcore  rather then metadata","State":"open","Body":"Apology for my poor english!\r\n\r\nI have change to Java due to the boss's decision .   I think dotnet  need a big change. In China, more and more dotnet project go to die,  but new java project continuously increase!\r\n\r\nI suggest:key  F12  go to source code of dotnetcore  rather then metadata(e.g.    ***.dll.source.zip \\****.exe.source.zip),   maybe there is already done,but i don't know. \r\n\r\nthanks!\r\n","Url":"https://github.com/dotnet/foundation/issues/112","RelatedDescription":"Open issue \"Suggest: key  F12  go to source code of dotnetcore  rather then metadata\" (#112)"},{"Id":"356296763","IsPullRequest":false,"CreatedAt":"2018-09-02T16:49:34","Actor":"adamralph","Number":"111","RawContent":null,"Title":"Sourcelink location is confusing","State":"open","Body":"The README has link under the \"Cameron Taggart\" section pointing to https://github.com/ctaggart/SourceLink but the project now seems to live under the \"dotnet\" org in https://github.com/dotnet/sourcelink/ which suggests the link should be changed to that, and moved under the \"Microsoft\" section.","Url":"https://github.com/dotnet/foundation/issues/111","RelatedDescription":"Open issue \"Sourcelink location is confusing\" (#111)"},{"Id":"353832272","IsPullRequest":true,"CreatedAt":"2018-08-27T16:21:55","Actor":"jkonicki","Number":"110","RawContent":null,"Title":"Fix - add missing comma","State":"closed","Body":"@jongalloway - Looks like I missed a comma in my previous PR. Here is the fix.","Url":"https://github.com/dotnet/foundation/pull/110","RelatedDescription":"Closed or merged PR \"Fix - add missing comma\" (#110)"},{"Id":"352736883","IsPullRequest":true,"CreatedAt":"2018-08-23T23:10:07","Actor":"anthonychu","Number":"108","RawContent":null,"Title":"Fix errors in projects.json","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/108","RelatedDescription":"Closed or merged PR \"Fix errors in projects.json\" (#108)"},{"Id":"353536205","IsPullRequest":true,"CreatedAt":"2018-08-23T23:09:07","Actor":"jkonicki","Number":"109","RawContent":null,"Title":"Add Steeltoe to the project listing","State":"closed","Body":"Hi @jongalloway, Here is the PR for adding Steeltoe to the projects listing.  Let me know if you need any changes. \r\nThanks.","Url":"https://github.com/dotnet/foundation/pull/109","RelatedDescription":"Closed or merged PR \"Add Steeltoe to the project listing\" (#109)"},{"Id":"340355507","IsPullRequest":false,"CreatedAt":"2018-07-11T18:28:16","Actor":"Eilon","Number":"107","RawContent":null,"Title":"Links to .NET Foundation web site use HTTP instead of HTTPS","State":"open","Body":"It appears that HTTPS works just fine: https://www.dotnetfoundation.org/\r\n\r\nBut the links at these places use HTTP:\r\n1. The link in the header of https://github.com/dotnet/home\r\n2. The link in the header of https://github.com/dotnet\r\n3. Some links in https://github.com/dotnet/home/blob/master/README.md (both to .NET Foundation, and a GitHub link to another project)\r\n\r\nThese links should all change to HTTPS.","Url":"https://github.com/dotnet/foundation/issues/107","RelatedDescription":"Open issue \"Links to .NET Foundation web site use HTTP instead of HTTPS\" (#107)"}],"ResultType":"GitHubIssue"},"CoreCLR-Issues":{"Issues":[{"Id":"418635039","IsPullRequest":true,"CreatedAt":"2019-03-08T05:14:32","Actor":"Dotnet-GitSync-Bot","Number":"23128","RawContent":null,"Title":"Mirror changes from dotnet/corefx","State":"open","Body":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @davidkaya","Url":"https://github.com/dotnet/coreclr/pull/23128","RelatedDescription":"Open PR \"Mirror changes from dotnet/corefx\" (#23128)"},{"Id":"418576583","IsPullRequest":true,"CreatedAt":"2019-03-08T03:43:37","Actor":"sandreenko","Number":"23116","RawContent":null,"Title":"Fix a rare JitStress assert.","State":"closed","Body":"flowgraph.cpp: assert(!IsUninitialized(tree)) can fail if `UninitializedWord` returns a valid pointer value.\r\n\r\nMake pointers unaligned to avoid this situation.\r\n\r\nAlso fix undefined C++ behavior when we check `this == nullptr`.","Url":"https://github.com/dotnet/coreclr/pull/23116","RelatedDescription":"Closed or merged PR \"Fix a rare JitStress assert.\" (#23116)"},{"Id":"418615967","IsPullRequest":false,"CreatedAt":"2019-03-08T03:28:24","Actor":"GrabYourPitchforks","Number":"23127","RawContent":null,"Title":"JIT emits unnecessary movsxd instructions when calling into Span indexer","State":"open","Body":"When passing a non-constant value into the `Span<T>` and `ReadOnlySpan<T>` indexer, the JIT will emit an unnecessary `movsxd` instruction on x64. The repro is fairly simple:\r\n\r\n```cs\r\nfor (int i = 0; i < ints.Length; i++)\r\n{\r\n    retVal += ints[i];\r\n}\r\n```\r\n\r\nCurrent codegen:\r\n\r\n```asm\r\n00007ffd`2a2e7291 85c9            test    ecx,ecx\r\n00007ffd`2a2e7293 7e0f            jle     <AFTER_LOOP>\r\n00007ffd`2a2e7295 4d63d1          movsxd  r10,r9d\r\n00007ffd`2a2e7298 42030492        add     eax,dword ptr [rdx+r10*4]\r\n00007ffd`2a2e729c 41ffc1          inc     r9d\r\n00007ffd`2a2e729f 443bc9          cmp     r9d,ecx\r\n00007ffd`2a2e72a2 7cf1            jl      00007ffd`2a2e7295\r\n```\r\n\r\nI prototyped the below change in my local branch by modifying the logic in `importer.cpp` to use zero-extension instead of signed-extension for the span indexer and ran a benchmark. The modified code took approximately one-third less time to run. This optimization may be worth investigating if we believe that developers are iterating over spans in hot loops. (Admittedly, any more complex logic within the loop would almost certainly overwhelm these benchmark results.)\r\n\r\n```cpp\r\n            // Element access\r\n            GenTree*             indexIntPtr = gtNewCastNode(TYP_U_IMPL, indexClone, true /* fromUnsigned */, TYP_U_IMPL);   // <-- modified line\r\n            GenTree*             sizeofNode  = gtNewIconNode(elemSize);\r\n            GenTree*             mulNode     = gtNewOperNode(GT_MUL, TYP_U_IMPL, indexIntPtr, sizeofNode);   // <-- modified line\r\n```\r\n\r\n|  Method | Toolchain | SpanLength |          Mean |        Error |       StdDev | Ratio | RatioSD |\r\n|-------- |---------- |----------- |--------------:|-------------:|-------------:|------:|--------:|\r\n| **SumInts** |  **baseline** |         **48** |   **2,921.32 us** |    **53.786 us** |    **44.914 us** |  **1.00** |    **0.00** |\r\n| SumInts |  modified |         48 |   1,964.96 us |    38.825 us |    43.154 us |  0.67 |    0.02 |\r\n|         |           |            |               |              |              |       |         |\r\n| **SumInts** |  **baseline** |        **512** |  **35,429.46 us** |   **574.800 us** |   **537.669 us** |  **1.00** |    **0.00** |\r\n| SumInts |  modified |        512 |  23,219.06 us |   457.335 us |   698.398 us |  0.67 |    0.02 |\r\n|         |           |            |               |              |              |       |         |\r\n| **SumInts** |  **baseline** |       **2048** | **139,664.62 us** | **1,799.241 us** | **1,683.011 us** |  **1.00** |    **0.00** |\r\n| SumInts |  modified |       2048 |  93,175.18 us | 1,838.916 us | 3,586.665 us |  0.66 |    0.04 |\r\n\r\n/cc @dotnet/jit-contrib","Url":"https://github.com/dotnet/coreclr/issues/23127","RelatedDescription":"Open issue \"JIT emits unnecessary movsxd instructions when calling into Span indexer\" (#23127)"},{"Id":"418605494","IsPullRequest":false,"CreatedAt":"2019-03-08T02:37:52","Actor":"sywhang","Number":"23126","RawContent":null,"Title":"Find out if EventSource callbacks may lead to recursive call","State":"open","Body":"In EventCounter's current implementation, under CounterGroup::OnEventSourceCommand there is a comment that says:\r\n\r\n```\r\n// Recursion through EventSource callbacks possible.  When we enable the timer\r\n// we synchonously issue a EventSource.Write event, which in turn can call back\r\n// to user code (in an EventListener) while holding this lock.   This is dangerous\r\n// because it means this code might inadvertantly participate in a lock loop. \r\n// The scenario seems very unlikely so we ignore that problem for now.  \r\nlock (this)      // Lock the CounterGroup\r\n```\r\n\r\nI have not looked deep into the EventSource callback implementation to see whether this is possible, but if it is, it may lead to a deadlock we don't want. We should investigate & add test for it as needed. ","Url":"https://github.com/dotnet/coreclr/issues/23126","RelatedDescription":"Open issue \"Find out if EventSource callbacks may lead to recursive call\" (#23126)"},{"Id":"418600017","IsPullRequest":true,"CreatedAt":"2019-03-08T02:11:44","Actor":"sywhang","Number":"23125","RawContent":null,"Title":"disabling tracing/tracevalidation/inducedgc/inducedgc test on ARM64","State":"open","Body":"For #23124. ","Url":"https://github.com/dotnet/coreclr/pull/23125","RelatedDescription":"Open PR \"disabling tracing/tracevalidation/inducedgc/inducedgc test on ARM64\" (#23125)"},{"Id":"418599413","IsPullRequest":false,"CreatedAt":"2019-03-08T02:08:54","Actor":"sywhang","Number":"23124","RawContent":null,"Title":"Test failure: tracing/tracevalidation/inducedgc/inducedgc ","State":"open","Body":"On ARM64 Linux, tracing/tracevalidation/inducedgc/inducedgc is keep failing with the following error:\r\n```\r\n\r\nUnhandled Exception: System.Exception: Values for 'matchingEventCount' are not equal! Left='10' Right='1'\r\n   at Tracing.Tests.Common.Assert.Equal[T](String name, T left, T right) in /__w/1/s/tests/src/tracing/common/Assert.cs:line 34\r\n   at Tracing.Tests.TraceValidationInducedGC.Main(String[] args) in /__w/1/s/tests/src/tracing/tracevalidation/inducedgc/InducedGC.cs:line 64\r\n/home/helixbot/dotnetbuild/work/2659a935-d8bb-42fc-9d92-98d375ab32de/Work/ccb456a9-b2f3-459f-8b9a-b46e7360a656/Exec/inducedgc/inducedgc/inducedgc.sh: line 266:  5653 Aborted                 $LAUNCHER $ExePath \\\"${CLRTestExecutionArguments[@]}\\\"\r\n/n/nReturn code:      1/nRaw output file:      /home/helixbot/dotnetbuild/work/2659a935-d8bb-42fc-9d92-98d375ab32de/Work/ccb456a9-b2f3-459f-8b9a-b46e7360a656/Exec/Reports/tracing.tracevalidation/inducedgc/inducedgc/inducedgc.output.txt/nRaw output:/nBEGIN EXECUTION\r\n/home/helixbot/dotnetbuild/work/2659a935-d8bb-42fc-9d92-98d375ab32de/Payload/corerun inducedgc.exe ''\r\n\\tStart: Enable tracing.\r\n\\tEnd: Enable tracing.\r\n\r\n\\tStart: Generate some events.\r\n\\tEnd: Generate some events.\r\n\r\n\\tStart: Disable tracing.\r\n\\tEnd: Disable tracing.\r\n\r\n\\tStart: Process the trace file.\r\n\\tEnd: Processing events from file.\r\n\r\nExpected: 100\r\nActual: 134\r\nEND EXECUTION - FAILED\r\nTest Harness Exitcode is : 1\r\n/nTo run the test:/n> set CORE_ROOT=/home/helixbot/dotnetbuild/work/2659a935-d8bb-42fc-9d92-98d375ab32de/Payload/n> /home/helixbot/dotnetbuild/work/2659a935-d8bb-42fc-9d92-98d375ab32de/Work/ccb456a9-b2f3-459f-8b9a-b46e7360a656/Exec/inducedgc/inducedgc/inducedgc.sh/n\r\nExpected: True\r\nActual:   False\r\n```\r\nIt seems like an actual failure but I don't have an ARM64 machine lying around to repro this locally. I will come back to investigate it later and will disable the test for now.","Url":"https://github.com/dotnet/coreclr/issues/23124","RelatedDescription":"Open issue \"Test failure: tracing/tracevalidation/inducedgc/inducedgc \" (#23124)"},{"Id":"418595371","IsPullRequest":false,"CreatedAt":"2019-03-08T01:49:59","Actor":"AriNuer","Number":"23123","RawContent":null,"Title":"[arm64\\linux] Test failure: JIT_jit64._localloc_call_call05_large_call05_large_._localloc_call_call05_large_call05_large_sh","State":"open","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/arm64/job/jitstress/job/arm64_cross_checked_ubuntu16.04_r2r_jitstressregs1_tst/24/\r\n\r\n**Failed test:**\r\nJIT_jit64._localloc_call_call05_large_call05_large_._localloc_call_call05_large_call05_large_sh\r\n\r\n**Failed log:**\r\n```\r\nJIT_jit64._localloc_call_call05_large_call05_large_._localloc_call_call05_large_call05_large_sh [FAIL]\r\n        Cannot get symbol ucal_getLimit from libicui18n\r\nEXEC : error : /usr/lib/aarch64-linux-gnu/libicui18n.so.55: undefined symbol: ucal_getLimit [/home/robox/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_r2r_jitstressregs1_tst/tests/runtest.proj]\r\n        /home/robox/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_r2r_jitstressregs1_tst/bin/tests/Linux.arm64.Checked/JIT/jit64/localloc/call/call05_large/call05_large.sh: line 252:  7817 Aborted                 (core dumped) $LAUNCHER $ExePath \"${CLRTestExecutionArguments[@]}\"\r\n        /n/nReturn code:      1/nRaw output file:      /home/robox/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_r2r_jitstressregs1_tst/bin/tests/Linux.arm64.Checked/JIT/jit64/Reports/JIT.jit64/localloc/call/call05_large/call05_large.output.txt/nRaw output:/nBEGIN EXECUTION\r\n        in takeLock\r\n        /home/robox/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_r2r_jitstressregs1_tst/bin/tests/Linux.arm64.Checked/Tests/Core_Root/crossgen /Platform_Assemblies_Paths /home/robox/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_r2r_jitstressregs1_tst/bin/tests/Linux.arm64.Checked/Tests/Core_Root:/home/robox/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_r2r_jitstressregs1_tst/bin/tests/Linux.arm64.Checked/JIT/jit64/localloc/call/call05_large/IL:/home/robox/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_r2r_jitstressregs1_tst/bin/tests/Linux.arm64.Checked/JIT/jit64/localloc/call/call05_large /in call05_large.org /out call05_large.exe\r\n        Microsoft (R) CoreCLR Native Image Generator - Version 4.5.30319.0\r\n        Copyright (c) Microsoft Corporation.  All rights reserved.\r\n        \r\n        Native image call05_large.exe generated successfully.\r\n        in ReleaseLock\r\n        in takeLock\r\n        /home/robox/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_r2r_jitstressregs1_tst/bin/tests/Linux.arm64.Checked/Tests/Core_Root/corerun call05_large.exe ''\r\n        in ReleaseLock\r\n        Expected: 100\r\n        Actual: 134\r\n        END EXECUTION - FAILED\r\n        Test Harness Exitcode is : 1\r\n        /nTo run the test:/n> set CORE_ROOT=/home/robox/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_r2r_jitstressregs1_tst/bin/tests/Linux.arm64.Checked/Tests/Core_Root/n> /home/robox/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_r2r_jitstressregs1_tst/bin/tests/Linux.arm64.Checked/JIT/jit64/localloc/call/call05_large/call05_large.sh/n\r\n        Expected: True\r\n        Actual:   False\r\n        Stack Trace:\r\n          /mnt/j/workspace/dotnet_coreclr/master/arm64_cross_checked_ubuntu16.04/bin/tests/Linux.arm64.Checked/TestWrappers/JIT.jit64/JIT.jit64.XUnitWrapper.cs(15299,0): at JIT_jit64._localloc_call_call05_large_call05_large_._localloc_call_call05_large_call05_large_sh()\r\n```","Url":"https://github.com/dotnet/coreclr/issues/23123","RelatedDescription":"Open issue \"[arm64\\linux] Test failure: JIT_jit64._localloc_call_call05_large_call05_large_._localloc_call_call05_large_call05_large_sh\" (#23123)"},{"Id":"418592861","IsPullRequest":false,"CreatedAt":"2019-03-08T01:37:51","Actor":"VincentBu","Number":"23122","RawContent":null,"Title":"[arm64] error: No artifacts found","State":"open","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/arm64/job/jitstress/job/arm64_cross_checked_ubuntu16.04_corefx_baseline_tst/129/\r\n\r\n**Log:**\r\n```\r\nArchiving artifacts\r\nERROR: No artifacts found that match the file pattern \"_/fx/artifacts/bin/**/testResults.xml\". Configuration error?\r\nERROR: java.lang.InterruptedException: no matches found within 10000\r\nBuild step 'Flexible publish' changed build result to FAILURE\r\n```","Url":"https://github.com/dotnet/coreclr/issues/23122","RelatedDescription":"Open issue \"[arm64] error: No artifacts found\" (#23122)"},{"Id":"418592830","IsPullRequest":true,"CreatedAt":"2019-03-08T01:37:41","Actor":"janvorli","Number":"23121","RawContent":null,"Title":"Enable build with clang static analyzer","State":"open","Body":"As part of LLVM, there is a clang static analyzer tool that provides\r\nuseful analysis of potential issues in the source code base.\r\n\r\nThis change enables building coreclr with that analyzer enabled\r\nwhen command line option `-staticanalyzer` is passed to build.sh","Url":"https://github.com/dotnet/coreclr/pull/23121","RelatedDescription":"Open PR \"Enable build with clang static analyzer\" (#23121)"},{"Id":"418590435","IsPullRequest":true,"CreatedAt":"2019-03-08T01:26:25","Actor":"cshung","Number":"23120","RawContent":null,"Title":"[WIP] Fix issue 22502","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/23120","RelatedDescription":"Open PR \"[WIP] Fix issue 22502\" (#23120)"},{"Id":"418586913","IsPullRequest":true,"CreatedAt":"2019-03-08T01:10:20","Actor":"BruceForstall","Number":"23119","RawContent":null,"Title":"Allow coalescing of SP adjustment into single register prolog STR/LDR","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/23119","RelatedDescription":"Open PR \"Allow coalescing of SP adjustment into single register prolog STR/LDR\" (#23119)"},{"Id":"418581907","IsPullRequest":false,"CreatedAt":"2019-03-08T00:48:53","Actor":"BruceForstall","Number":"23118","RawContent":null,"Title":"Slowness running jobs","State":"open","Body":"Windows/arm:\r\n\r\nI see in https://ci.dot.net/job/dotnet_coreclr/job/master/view/arm/job/jitstress/job/arm_cross_checked_windows_nt_r2r_jitstressregs8_flow/50/console:\r\n```\r\n01:58:09 Started by an SCM change\r\n01:58:09 Building remotely on win2012-19a9f0 (win2012-20180911) in workspace D:\\j\\workspace\\arm_cross_che---fbdfb62b\r\n01:58:09 [WS-CLEANUP] Deleting project workspace...\r\n01:58:09 Selected Git installation does not exist. Using Default\r\n01:58:09 Cloning the remote Git repository\r\n```\r\n\r\nbut it's been doing this for 4 days and 14 hours!\r\n","Url":"https://github.com/dotnet/coreclr/issues/23118","RelatedDescription":"Open issue \"Slowness running jobs\" (#23118)"},{"Id":"418580232","IsPullRequest":true,"CreatedAt":"2019-03-08T00:41:13","Actor":"ericstj","Number":"23117","RawContent":null,"Title":"Add a target to get native resources from another DLL to ILProj SDK","State":"open","Body":"We use a similar target in CoreFx and I'll need it for another project that is planning on\r\nusing this SDK.\r\n\r\nWhen ILResourceReference it will be disassembled to get native resources (EG: fileversion)\r\nto pass to ILasm.\r\n\r\nIf ILResourceReference is not specified then it does nothing since the target has no inputs.  It does nothing on Unix since cvtres is not available there.","Url":"https://github.com/dotnet/coreclr/pull/23117","RelatedDescription":"Open PR \"Add a target to get native resources from another DLL to ILProj SDK\" (#23117)"},{"Id":"418563585","IsPullRequest":false,"CreatedAt":"2019-03-07T23:31:33","Actor":"saucecontrol","Number":"23115","RawContent":null,"Title":"HWIntrinsics: FMA suboptimal codegen","State":"open","Body":"This code:\r\n\r\n```C#\r\nav1 = Fma.MultiplyAdd(iv1, Sse.LoadVector128(mp + 4), av1);\r\n```\r\n\r\ncurrently compiles to:\r\n\r\n```asm\r\nlea         rbx,[rdi+10h]  \r\nvfmadd132ps xmm4,xmm1,xmmword ptr [rbx]  \r\nvmovaps     xmm1,xmm4  \r\n```\r\n\r\nAssuming https://github.com/dotnet/coreclr/pull/22944 would eliminate the extra `lea` there, I believe this should be generating:\r\n\r\n```asm\r\nvfmadd231ps xmm1,xmm4,xmmword ptr [rdi+10h]  \r\n```\r\n\r\nIt looks like the logic in `genFMAIntrinsic` is missing the fact the two non-contained arguments could be swapped here.\r\n\r\ncc @tannergooding \r\n","Url":"https://github.com/dotnet/coreclr/issues/23115","RelatedDescription":"Open issue \"HWIntrinsics: FMA suboptimal codegen\" (#23115)"},{"Id":"418551368","IsPullRequest":true,"CreatedAt":"2019-03-07T22:50:55","Actor":"AndyAyersMS","Number":"23114","RawContent":null,"Title":"JIT: rework codegen for Arm64 SIMD Extract/Insert intrinsics","State":"open","Body":"Add an up-front bounds check during importation instead of waiting\r\nuntil codegen. Mirrors what we do for similar cases on xarch.\r\n\r\nCloses #20260.","Url":"https://github.com/dotnet/coreclr/pull/23114","RelatedDescription":"Open PR \"JIT: rework codegen for Arm64 SIMD Extract/Insert intrinsics\" (#23114)"},{"Id":"418550486","IsPullRequest":true,"CreatedAt":"2019-03-07T22:48:14","Actor":"tarekgh","Number":"23113","RawContent":null,"Title":"Port Japanese era fix from master","State":"open","Body":"This is straight port of the fix #21087","Url":"https://github.com/dotnet/coreclr/pull/23113","RelatedDescription":"Open PR \"Port Japanese era fix from master\" (#23113)"},{"Id":"418548784","IsPullRequest":false,"CreatedAt":"2019-03-07T22:43:14","Actor":"cshung","Number":"23112","RawContent":null,"Title":"Testing multi-file tracing","State":"open","Body":"It appears to me that we have no testing for the multi-file mode of EventPipe, we should have at least one hello world type testing for it.","Url":"https://github.com/dotnet/coreclr/issues/23112","RelatedDescription":"Open issue \"Testing multi-file tracing\" (#23112)"},{"Id":"418545024","IsPullRequest":true,"CreatedAt":"2019-03-07T22:32:27","Actor":"am11","Number":"23111","RawContent":null,"Title":"Improve gcc configuration","State":"open","Body":"* Use `find_path` instead of `check_include_files` for lttng to avoid\r\n  manual `-ldl` linkage.\r\n* Remove unsued `DCLR_CMAKE_COMPILER` argument.\r\n* `locate_gcc_exec gcc` to `locate_gcc_exec link` for `gcc_link`\r\n* Remove unused `DCMAKE_OBJCOPY`\r\n* Fix all warnings in gen-buildsys-gcc.sh reported by shellchecker.","Url":"https://github.com/dotnet/coreclr/pull/23111","RelatedDescription":"Open PR \"Improve gcc configuration\" (#23111)"},{"Id":"418420244","IsPullRequest":true,"CreatedAt":"2019-03-07T22:28:22","Actor":"stephentoub","Number":"23101","RawContent":null,"Title":"Add missing CopyToAsync override in FileStream.Unix.cs","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/23101","RelatedDescription":"Closed or merged PR \"Add missing CopyToAsync override in FileStream.Unix.cs\" (#23101)"},{"Id":"418541768","IsPullRequest":true,"CreatedAt":"2019-03-07T22:23:21","Actor":"dotnet-maestro[bot]","Number":"23110","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19157.4\r\n- Microsoft.DotNet.Helix.Sdk - 2.0.0-beta.19157.4\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/23110","RelatedDescription":"Open PR \"[release/3.0] Update dependencies from dotnet/arcade\" (#23110)"},{"Id":"418541353","IsPullRequest":true,"CreatedAt":"2019-03-07T22:22:13","Actor":"briansull","Number":"23109","RawContent":null,"Title":"Test case for Issue 21231","State":"open","Body":"Test case for #21231 ","Url":"https://github.com/dotnet/coreclr/pull/23109","RelatedDescription":"Open PR \"Test case for Issue 21231\" (#23109)"},{"Id":"418531923","IsPullRequest":true,"CreatedAt":"2019-03-07T21:56:59","Actor":"tarekgh","Number":"23108","RawContent":null,"Title":"Port Japanese era fix from master","State":"open","Body":"This is straight port of the fix https://github.com/dotnet/coreclr/pull/21087\r\n\r\nedit:\r\n\r\nDescription\r\nWe have fixed an issue with Japanese era in 3.0 through the PR https://github.com/dotnet/coreclr/pull/21087 and we got the request https://github.com/dotnet/coreclr/pull/21087 to port that to 2.1 and 2.2. I think it make sense to port the fix to the servicing branches to avoid any problem can happen when starting the new Japanese era in May 1st. \r\nThe issue we fixed is, on Linux we depend on ICU library for getting the list of the supported Japanese eras. We use ICU API ucal_getLimit to do that. Unfortunately, this API return the list of the eras up to the system clock time and not reporting any future eras even if the system support that. This means, if the system updated with the new era before May 1st we’ll not be able to handle this new era. We have raised the issue to ICU and this maybe end as by design for them or they may decide to change it but so far is not clear what they will do. Our fix is we get the era list more reliably by would be better just to get the era of Gregorian year 9999 which always should return the max era anyway.\r\n\r\nHere is the opened PR’s for porting the fix\r\n\r\nhttps://github.com/dotnet/coreclr/pull/20727\r\nhttps://github.com/dotnet/coreclr/pull/20729\r\n\r\nThese fixes originally code reviewed by Eric Erhardt.\r\n\r\nCustomer Impact \r\nThis is important fix specific because we learned Japan is going to announce the era name by April which means the software companies will try to update their software before May 1st with the new era information. That create a risk if anyone using 2.1 or 2.2 can run into problems at that time.\r\n\r\nRegression? \r\nNo. \r\n \r\nRisk\r\nThe risk is really very low as the change is very scoped to Japanese calendar with the era scenario and the fix has been in 3.0 master branch for awhile too. So, the fix is exercised for a while now.\r\n","Url":"https://github.com/dotnet/coreclr/pull/23108","RelatedDescription":"Open PR \"Port Japanese era fix from master\" (#23108)"},{"Id":"418435358","IsPullRequest":true,"CreatedAt":"2019-03-07T21:35:10","Actor":"jashook","Number":"23104","RawContent":null,"Title":"Disable tests based on 23103 and 23096","State":"closed","Body":"Disables tests for:\r\n\r\nhttps://github.com/dotnet/coreclr/issues/23096\r\nhttps://github.com/dotnet/coreclr/issues/23103","Url":"https://github.com/dotnet/coreclr/pull/23104","RelatedDescription":"Closed or merged PR \"Disable tests based on 23103 and 23096\" (#23104)"},{"Id":"418434260","IsPullRequest":false,"CreatedAt":"2019-03-07T21:34:48","Actor":"jashook","Number":"23103","RawContent":null,"Title":"[Windows|Arm] JIT/Methodical/MDArray/DataTypes/long_cs_do fails","State":"closed","Body":"https://dev.azure.com/dnceng/internal/_build/results?buildId=116945&view=ms.vss-test-web.build-test-results-tab\r\n\r\nOutput:\r\n\r\n```\r\nReturn code: -1073741819\r\nRaw output file: C:\\\\dotnetbuild\\\\work\\\\0f9269de-a827-4f66-ae29-3997bd5b4b9c\\\\Work\\\\fa6af447-4b5e-4aef-9275-fdc74d03686c\\\\Exec\\\\Reports\\\\JIT.Methodical\\\\MDArray\\\\DataTypes\\\\long_cs_do\\\\long_cs_do.output.txt\r\nRaw output:\r\nTest Harness Exitcode is : -1073741819\\r\r\n\r\nTo run the test:\r\n> set CORE_ROOT=C:\\\\dotnetbuild\\\\work\\\\0f9269de-a827-4f66-ae29-3997bd5b4b9c\\\\Payload\r\n> C:\\\\dotnetbuild\\\\work\\\\0f9269de-a827-4f66-ae29-3997bd5b4b9c\\\\Work\\\\fa6af447-4b5e-4aef-9275-fdc74d03686c\\\\Exec\\\\MDArray\\\\DataTypes\\\\long_cs_do\\\\long_cs_do.cmd\r\n\\r\r\nExpected: True\\r\r\nActual: False\r\n\r\n```","Url":"https://github.com/dotnet/coreclr/issues/23103","RelatedDescription":"Closed issue \"[Windows|Arm] JIT/Methodical/MDArray/DataTypes/long_cs_do fails\" (#23103)"},{"Id":"418487041","IsPullRequest":false,"CreatedAt":"2019-03-07T19:58:07","Actor":"aclerbois","Number":"23107","RawContent":null,"Title":"Dotnet new project create automatically sln","State":"open","Body":"Hello, \r\n\r\nAn improvment valuable for the dotnet creation template should be to add a parameter to create a new sln file and attach the new project into. \r\n\r\nCurrent scenario : \r\n\r\ndotnet new \"template\" -n \"ProjectName\"\r\ndotnet new sln -n \"ProjectName\"\r\ndotnet sln add \"ProjectName/ProjectName.csproj\"\r\n\r\nHave only one line for example : \r\n\r\ndotnet new \"template\" -n \"ProjectName\" -newSln\r\n\r\nWhat do you think about this idea ? \r\n\r\nBest regards,\r\n\r\nAdrien C.","Url":"https://github.com/dotnet/coreclr/issues/23107","RelatedDescription":"Open issue \"Dotnet new project create automatically sln\" (#23107)"},{"Id":"418469018","IsPullRequest":true,"CreatedAt":"2019-03-07T19:12:46","Actor":"jorive","Number":"23106","RawContent":null,"Title":"[WIP][EventPipe] Adding an IPC server to handle out of process communication.","State":"open","Body":"## What is in this PR?\r\n- Minimize the dependency to `EventPipeProviderConfiguration`. This is used on the \"QCALL\" layer and it should be kept this way. Using it outside this scenario will lead to memory leaks.\r\n- Moved `EventPipeInternal` to its own file (We can move the \"PInvoke\" code here in a later time).\r\n- Created a `StreamWriter` class to abstract how we write objects on `EventPipe`\r\n- Change the FastSerializer dependency from `CFileStream` to `StreamWriter`.\r\n  This abstraction is meant decouple the writing of objects in order to extend its usability.\r\n  The main objective is to reuse FastSerializer to stream data through the open IPC channel.\r\n- Created a `DiagnosticsServer` worker thread/object to handle IPC connections (NamedPipe on Windows and Sockets on *Nix).\r\n  This is currently used by `EventPipe`, and it can be extended to handle `Profiler` and `Debugger` scenarios too.\r\n  The \"server\" uses a `DiagnosticsIpc` object (IPC listener). This listener generates a client connection `IpcStream` (an IPC channel for communication).\r\n\r\n## Pending\r\n- [ ] Make sure the IPC names are unique to avoid collisions (verify with debugger code)\r\n- [ ] Handle multiple clients\r\n- [ ] Add streaming functionality\r\n    - [ ] Syncronus\r\n    - [ ] Asyncronous\r\n- [ ] Add tests","Url":"https://github.com/dotnet/coreclr/pull/23106","RelatedDescription":"Open PR \"[WIP][EventPipe] Adding an IPC server to handle out of process communication.\" (#23106)"},{"Id":"418456110","IsPullRequest":true,"CreatedAt":"2019-03-07T18:39:34","Actor":"dotnet-maestro-bot","Number":"23105","RawContent":null,"Title":"[automated] Merge branch 'master' => 'release/3.0'","State":"open","Body":"I detected changes in the master branch which have not been merged yet to release/3.0. I'm a robot and am configured to help you automatically keep release/3.0 up to date, so I've opened this PR.\r\n\r\nThis PR merges commits made on master by the following committers:\n\n* @hoyosjs\n* @BruceForstall\n* @jkotas\n* @sandreenko\n* @mikem8361\n* @sbomer\n* @jashook\n* @tannergooding\n* @AndyAyersMS\n* @CarolEidt\n* @fiigii\n* @sdmaclea\n* @jkoritzinsky\n* @stephentoub\n* @cshung\n* @josalem\n* @AaronRobinsonMSFT\n* @maryamariyan\n* @RussKeldorph\n* @sywhang\n* @echesakovMSFT\n* @marek-safar\n* @Maoni0\n* @jorive\n* @vancem\n* @bartonjs\n* @janvorli\n* @GrabYourPitchforks\n* @swaroop-sridhar\n* @tmat\n* @noahfalk\n* @ericstj\n* @am11\n* @davmason\n* @nattress\n* @MichalStrehovsky\n* @briansull\r\n\r\n## Instructions for merging from UI\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, complete this PR by creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nIf this repo does not allow creating merge commits from the GitHub UI, use command line instructions.\r\n\r\n## Instructions for merging via command line\r\n\r\nRun these commands to merge this pull request from the command line.\r\n\r\n``` sh\r\ngit fetch\r\ngit checkout master\r\ngit pull --ff-only\r\ngit checkout release/3.0\r\ngit pull --ff-only\r\ngit merge --no-ff master\r\n\r\n# If there are merge conflicts, resolve them and then run git merge --continue to complete the merge\r\n# Pushing the changes to the PR branch will re-trigger PR validation.\r\ngit push https://github.com/dotnet-maestro-bot/coreclr HEAD:merge/master-to-release/3.0\r\n```\r\n\r\n<details>\r\n<summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit push git@github.com:dotnet-maestro-bot/coreclr HEAD:merge/master-to-release/3.0\r\n```\r\n\r\n</details>\r\n\r\n\r\nAfter PR checks are complete push the branch\r\n```\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging. You can do this [using GitHub][resolve-github] or using the [command line][resolve-cli].\r\n\r\n[resolve-github]: https://help.github.com/articles/resolving-a-merge-conflict-on-github/\r\n[resolve-cli]: https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/\r\n\r\n## Instructions for updating this pull request\r\n\r\nContributors to this repo have permission update this pull request by pushing to the branch 'merge/master-to-release/3.0'. This can be done to resolve conflicts or make other changes to this pull request before it is merged.\r\n\r\n```\r\ngit checkout -b merge/master-to-release/3.0 release/3.0\r\ngit pull https://github.com/dotnet-maestro-bot/coreclr merge/master-to-release/3.0\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push https://github.com/dotnet-maestro-bot/coreclr merge/master-to-release/3.0\r\n```\r\n\r\n<details>\r\n    <summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit checkout -b merge/master-to-release/3.0 release/3.0\r\ngit pull git@github.com:dotnet-maestro-bot/coreclr merge/master-to-release/3.0\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push git@github.com:dotnet-maestro-bot/coreclr merge/master-to-release/3.0\r\n```\r\n\r\n</details>\r\n\r\nContact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.\r\n","Url":"https://github.com/dotnet/coreclr/pull/23105","RelatedDescription":"Open PR \"[automated] Merge branch 'master' => 'release/3.0'\" (#23105)"},{"Id":"418421882","IsPullRequest":false,"CreatedAt":"2019-03-07T17:13:31","Actor":"BruceForstall","Number":"23102","RawContent":null,"Title":"[arm64] Improve prolog/epilog single reg save/restore w/SP adjustment","State":"open","Body":"`CodeGen::genPrologSaveReg` and `CodeGen::genEpilogRestoreReg()` should fold in an optional `spDelta` adjustment to the STR/LDR instruction as pre-index/post-index, if possible.","Url":"https://github.com/dotnet/coreclr/issues/23102","RelatedDescription":"Open issue \"[arm64] Improve prolog/epilog single reg save/restore w/SP adjustment\" (#23102)"},{"Id":"418415817","IsPullRequest":true,"CreatedAt":"2019-03-07T17:00:08","Actor":"EgorBo","Number":"23100","RawContent":null,"Title":"Replace #if BIGENDIAN with BitConverter.IsLittleEndian","State":"open","Body":"JIT is able to eliminate one of the branches in `if (BitConverter.IsLittleEndian)` conditions. This PR is a copy of https://github.com/mono/mono/pull/13348.\r\n\r\nSo now on the managed side of CoreCLR only `BitConverter` has `#if BIGENDIAN` - is it needed there? In mono we have https://github.com/mono/mono/blob/master/mcs/class/corlib/System/BitConverter.cs","Url":"https://github.com/dotnet/coreclr/pull/23100","RelatedDescription":"Open PR \"Replace #if BIGENDIAN with BitConverter.IsLittleEndian\" (#23100)"},{"Id":"418269861","IsPullRequest":true,"CreatedAt":"2019-03-07T11:49:55","Actor":"janvorli","Number":"23099","RawContent":null,"Title":"Remove init_count zeroing from PAL cleanup at process exit","State":"open","Body":"Setting the init_count to 0 in the PALCommonCleanup was causing\r\nintermittent crashes in the GC stress C tests on Linux with\r\nSIGILL. The reason is that the signal handlers do nothing and call a\r\nprevious handler in case the PAL is not initialized, which is indicated\r\nby the init_count being zero.\r\n\r\nTo fix that issue, I have removed the init_count zeroing at process\r\nexit, since the PAL and runtime is still capable of handling the\r\nsignals.\r\n\r\nClose #21582","Url":"https://github.com/dotnet/coreclr/pull/23099","RelatedDescription":"Open PR \"Remove init_count zeroing from PAL cleanup at process exit\" (#23099)"}],"ResultType":"GitHubIssue"},"CLI-Issues":{"Issues":[{"Id":"418615934","IsPullRequest":true,"CreatedAt":"2019-03-08T03:28:17","Actor":"swaroop-sridhar","Number":"10951","RawContent":null,"Title":"Small updates to runtime.config documentation","State":"open","Body":"Update some external document references, and other minor corrections.","Url":"https://github.com/dotnet/cli/pull/10951","RelatedDescription":"Open PR \"Small updates to runtime.config documentation\" (#10951)"},{"Id":"418601539","IsPullRequest":false,"CreatedAt":"2019-03-08T02:18:27","Actor":"NicolasDorier","Number":"10950","RawContent":null,"Title":"Compilation error \"csc.dll\" exited with code 139 on ARMv7l","State":"open","Body":"## Steps to reproduce\r\n\r\nOn\r\n```\r\nuname -a\r\nLinux odroid 4.14.5-92 #1 SMP PREEMPT Mon Dec 11 15:48:15 UTC 2017 armv7l armv7l armv7l GNU/Linux\r\n```\r\n\r\n\r\n```\r\ngit clone https://github.com/btcpayserver/btcpayserver\r\ncd btcpayserver/btcpayserver\r\ndotnet build -c Release\r\n```\r\n\r\n## Expected  behavior\r\n\r\nBuild succeed.\r\n\r\n## Actual behavior\r\n\r\nUser reported compilation error \"csc.dll\" exited with code 134 on ARM.\r\nThe msbuild seems show error 139 from csc.dll.\r\n\r\n## Environment data\r\n\r\n@enorrmann can you provide precise `dotnet --version` here?\r\n\r\nHe tried with SDK `2.1.504` and `2.2.104` with same error it seems.\r\n\r\n![image](https://user-images.githubusercontent.com/3020646/54002883-7dea0f00-4193-11e9-88bd-03c161406535.png)\r\n\r\n\r\n[msbuild.binlog](https://www.dropbox.com/s/4ic7z1j7qnh72iv/msbuild.binlog?dl=1)\r\n\r\nOrignally reported on https://github.com/btcpayserver/btcpayserver/issues/600\r\n\r\nIt seems same issue as https://github.com/dotnet/roslyn/issues/28038 . I opened a new issue because this one happen on ARM32v7.\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10950","RelatedDescription":"Open issue \"Compilation error \"csc.dll\" exited with code 139 on ARMv7l\" (#10950)"},{"Id":"418580587","IsPullRequest":true,"CreatedAt":"2019-03-08T01:40:02","Actor":"peterhuene","Number":"10949","RawContent":null,"Title":"Limit job object usage to Windows 8/2012 or later.","State":"closed","Body":"The ASP.NET Core team has a test that runs on Windows 7/2008 which spawns IIS\r\nExpress.  The test is running under `dotnet test` and thus the child\r\nprocess gets assigned to dotnet's job object for process reaping.  However, IIS\r\nExpress maintains its own job object for the process it spawns and the dotnet\r\njob object assignment interferes with IIS Express' use of its job objects.\r\n\r\nThis occurs on Windows 7 and Windows Server 2008 because those versions of\r\nWindows do not support nested jobs.\r\n\r\nThe fix taken here is to limit the use of job objects for process reaping to\r\nWindows 8 / Windows Server 2012 or later.  This is done with an explicit OS\r\nversion check because there is no change to the Job Objects API to enable\r\nsupport for nested jobs and thus no other way to determine if the feature is\r\navailable to us.\r\n\r\nFixes #10947.","Url":"https://github.com/dotnet/cli/pull/10949","RelatedDescription":"Closed or merged PR \"Limit job object usage to Windows 8/2012 or later.\" (#10949)"},{"Id":"418558161","IsPullRequest":false,"CreatedAt":"2019-03-08T01:40:01","Actor":"pakrym","Number":"10947","RawContent":null,"Title":"Adding child processes to job objects prevents them from creating job objects of their own","State":"closed","Body":"We are hitting an issue while trying to test AspNetCore Module for IIS Express on Windows 7/2008R2 after taking and SDK with https://github.com/dotnet/cli/pull/10720 change.\r\n\r\nIn the test, we start IIS Express process that spawns new indstance of dotnet.exe, tries to attach it to a job object and fails because the entire process tree is already attached to the job object that CLI has created.\r\n\r\nI see couple possible solutions:\r\n1. Disable process tracking using job objects on Windows 7\r\n2. Set `JOB_OBJECT_LIMIT_BREAKAWAY_OK` flag set on the job object.\r\n\r\ncc @peterhuene @danmosemsft \r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10947","RelatedDescription":"Closed issue \"Adding child processes to job objects prevents them from creating job objects of their own\" (#10947)"},{"Id":"418576994","IsPullRequest":false,"CreatedAt":"2019-03-08T00:26:44","Actor":"jaredpar","Number":"10948","RawContent":null,"Title":"SDK should use Microsoft.Net.Compilers.Toolset package","State":"open","Body":"The Roslyn team is deprecating the Microsoft.NETCore.Compilers package which contained only CoreCLR binaries and moving to Microsoft.Net.Compilers.Toolset which contains desktop and CoreCLR binaries. The SDK should switch to using this package when taking new Roslyn drops. \r\n\r\n\r\n@nguerrera is aware of this change. ","Url":"https://github.com/dotnet/cli/issues/10948","RelatedDescription":"Open issue \"SDK should use Microsoft.Net.Compilers.Toolset package\" (#10948)"},{"Id":"418540041","IsPullRequest":true,"CreatedAt":"2019-03-07T22:18:38","Actor":"dotnet-maestro[bot]","Number":"10946","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19157.4\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10946","RelatedDescription":"Open PR \"[release/3.0.1xx] Update dependencies from dotnet/arcade\" (#10946)"},{"Id":"418274411","IsPullRequest":true,"CreatedAt":"2019-03-07T18:19:24","Actor":"dotnet-bot","Number":"10944","RawContent":null,"Title":"Merge release/2.1.6xx to release/2.2.2xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.1.6xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.6xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.1.6xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.6xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/10944","RelatedDescription":"Closed or merged PR \"Merge release/2.1.6xx to release/2.2.2xx\" (#10944)"},{"Id":"418297322","IsPullRequest":true,"CreatedAt":"2019-03-07T14:42:52","Actor":"dotnet-maestro[bot]","Number":"10945","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19156.20\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10945","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#10945)"},{"Id":"418274389","IsPullRequest":true,"CreatedAt":"2019-03-07T12:01:46","Actor":"dotnet-bot","Number":"10943","RawContent":null,"Title":"Merge release/2.2.1xx to release/2.2.2xx","State":"open","Body":"\nThis is an automatically generated pull request from release/2.2.1xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.1xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.2.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.1xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/10943","RelatedDescription":"Open PR \"Merge release/2.2.1xx to release/2.2.2xx\" (#10943)"},{"Id":"418212253","IsPullRequest":false,"CreatedAt":"2019-03-07T09:38:14","Actor":"pavelovcharov","Number":"10942","RawContent":null,"Title":"The 'dotnet build' command hangs when building a specific code","State":"open","Body":"The following code will cause the `dotnet build` command to hang:\r\n```\r\n class ListItem {\r\n            public ListItem Prev { get; set; }\r\n            public ListItem Next { get; set; }\r\n        }\r\n        void ArrangeNonOverlapping(IList<ListItem> labels) {\r\n            List<ListItem> actualLabels = new List<ListItem>(labels);\r\n            ListItem prev = null;\r\n            ListItem next = null;\r\n            for (int i = 0; i < labels.Count; i++) {\r\n                ListItem label = actualLabels[i];\r\n                label.Prev = prev;\r\n                label.Next = next;\r\n                if (prev != null)\r\n                    prev.Next = label;\r\n                if (next != null)\r\n                    next.Prev = label;\r\n            }\r\n        }\r\n```\r\nThere is no issue when this code is built within Visual Studio\r\n\r\n## Steps to reproduce\r\nI have prepared a small sample to demonstrate the issue: https://github.com/pavelovcharov/netcore3_dotnetbuildhangs\r\n\r\n1) git clone https://github.com/pavelovcharov/netcore3_dotnetbuildhangs\r\n2) cd netcore3_dotnetbuildhangs\r\n2) dotnet build\r\n\r\n## Expected  behavior\r\nThe ```dotnet  build``` command successfully builds the project\r\n\r\n## Actual behavior\r\nThe ```dotnet  build``` command hangs\r\n\r\n## Environment data\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview4-010591\r\n Commit:    6cb32d53bc\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview4-010591\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview4-27503-9\r\n  Commit:  04c13d860a\r\n\r\n.NET Core SDKs installed:\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600-preview-009426 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600-preview-009472 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600-preview-009497 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.600 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview-010124 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview4-010591 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview-19067-0383 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview4-19153-01 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview-27316-4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview4-27503-9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview-27316-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview4-27501-41 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/10942","RelatedDescription":"Open issue \"The 'dotnet build' command hangs when building a specific code\" (#10942)"},{"Id":"418124071","IsPullRequest":false,"CreatedAt":"2019-03-07T04:29:55","Actor":"tonycoelho","Number":"10941","RawContent":null,"Title":"dotnet Release Metadata 3.0.0-preview3-27503-5 missing hash","State":"open","Body":"The latest 3.0 release listed in the release metadata json file located at the link below, 3.0.0-preview3-27503-5 (aka 3.0.0-preview3), is missing the hash value on every file listed in the runtime, sdk, and aspnetcore-runtime file collections.\r\n\r\nhttps://dotnetcli.blob.core.windows.net/dotnet/release-metadata/3.0/releases.json\r\n\r\nThe hash property should contain the SHA256 hash for the file provided at the URL. Example of the issue below.\r\n```json\r\n{\r\n  \"name\": \"dotnet-runtime-linux-arm.tar.gz\",\r\n  \"rid\": \"linux-arm\",\r\n  \"url\": \"https://download.visualstudio.microsoft.com/download/pr/61afd68a-0079-45a3-917a-b8cb679fdc43/d3b8792106bbcc4b790407365fd025ac/dotnet-runtime-3.0.0-preview3-27503-5-linux-arm.tar.gz\",\r\n  \"hash\": \"\"\r\n}\r\n```\r\n\r\n@leecow ","Url":"https://github.com/dotnet/cli/issues/10941","RelatedDescription":"Open issue \"dotnet Release Metadata 3.0.0-preview3-27503-5 missing hash\" (#10941)"},{"Id":"418077650","IsPullRequest":true,"CreatedAt":"2019-03-07T00:53:18","Actor":"livarcocc","Number":"10940","RawContent":null,"Title":"Update branding to 2.2.106","State":"open","Body":"","Url":"https://github.com/dotnet/cli/pull/10940","RelatedDescription":"Open PR \"Update branding to 2.2.106\" (#10940)"},{"Id":"418077470","IsPullRequest":true,"CreatedAt":"2019-03-07T00:52:27","Actor":"livarcocc","Number":"10939","RawContent":null,"Title":"Update branding to 2.1.506","State":"open","Body":"","Url":"https://github.com/dotnet/cli/pull/10939","RelatedDescription":"Open PR \"Update branding to 2.1.506\" (#10939)"},{"Id":"417559004","IsPullRequest":true,"CreatedAt":"2019-03-07T00:39:17","Actor":"dotnet-bot","Number":"10933","RawContent":null,"Title":"Merge release/2.1.5xx to release/2.1.6xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.1.5xx into release/2.1.6xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.5xx-to-release/2.1.6xx\ngit reset --hard upstream/release/2.1.6xx\ngit merge upstream/release/2.1.5xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.5xx-to-release/2.1.6xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/10933","RelatedDescription":"Closed or merged PR \"Merge release/2.1.5xx to release/2.1.6xx\" (#10933)"},{"Id":"417263964","IsPullRequest":true,"CreatedAt":"2019-03-07T00:39:00","Actor":"dotnet-bot","Number":"10925","RawContent":null,"Title":"Merge release/2.2.1xx to release/2.2.2xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.2.1xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.1xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.2.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.1xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/10925","RelatedDescription":"Closed or merged PR \"Merge release/2.2.1xx to release/2.2.2xx\" (#10925)"},{"Id":"417263936","IsPullRequest":true,"CreatedAt":"2019-03-07T00:38:44","Actor":"dotnet-bot","Number":"10924","RawContent":null,"Title":"Merge release/2.1.5xx to release/2.2.1xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.1.5xx into release/2.2.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.5xx-to-release/2.2.1xx\ngit reset --hard upstream/release/2.2.1xx\ngit merge upstream/release/2.1.5xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.5xx-to-release/2.2.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/10924","RelatedDescription":"Closed or merged PR \"Merge release/2.1.5xx to release/2.2.1xx\" (#10924)"},{"Id":"417791945","IsPullRequest":true,"CreatedAt":"2019-03-06T23:06:57","Actor":"dotnet-maestro[bot]","Number":"10937","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19155.29\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10937","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#10937)"},{"Id":"418048279","IsPullRequest":false,"CreatedAt":"2019-03-06T22:57:27","Actor":"ObsidianMinor","Number":"10938","RawContent":null,"Title":".NET website doesn't list .NET Core install scripts as download options","State":"open","Body":"There's two install scripts listed under `/scripts/obtain/`, and as someone that never browsed this repository often, I never knew they existed until someone showed me. I was surprised that these scripts, which are incredibly useful, are never mentioned on the website. It'd be nice if they were listed in some form or fashion so other developers can easily find them if they always use the main downloads website.","Url":"https://github.com/dotnet/cli/issues/10938","RelatedDescription":"Open issue \".NET website doesn't list .NET Core install scripts as download options\" (#10938)"},{"Id":"417473742","IsPullRequest":true,"CreatedAt":"2019-03-06T21:38:32","Actor":"nguerrera","Number":"10928","RawContent":null,"Title":"Unblock dotnet/sdk -> dotnet/cli flow","State":"closed","Body":"1. Stop forcing runtime version in tests\r\n2. Update .NET Core SDK LKG\r\n3. Stop setting RestoreAdditionalProjectSources as global property\r\n4. Disable dotnet store tests against dotnet/sdk#2914 (as was done in dotnet/sdk)\r\n5. Fix tests that need at least one package reference vs. basic scenarios in 3.0 that don't have that by default\r\n6. Fix SIGTERM shutdown race","Url":"https://github.com/dotnet/cli/pull/10928","RelatedDescription":"Closed or merged PR \"Unblock dotnet/sdk -> dotnet/cli flow\" (#10928)"},{"Id":"417686359","IsPullRequest":true,"CreatedAt":"2019-03-06T08:46:35","Actor":"singhsarab","Number":"10936","RawContent":null,"Title":"Updating the test templates for net core 2.2","State":"open","Body":"Related to https://github.com/dotnet/test-templates/pull/57\r\n","Url":"https://github.com/dotnet/cli/pull/10936","RelatedDescription":"Open PR \"Updating the test templates for net core 2.2\" (#10936)"},{"Id":"417570668","IsPullRequest":true,"CreatedAt":"2019-03-06T04:13:40","Actor":"livarcocc","Number":"10935","RawContent":null,"Title":"MSBuild 16.0.450","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/10935","RelatedDescription":"Closed or merged PR \"MSBuild 16.0.450\" (#10935)"},{"Id":"417570263","IsPullRequest":true,"CreatedAt":"2019-03-06T04:13:16","Actor":"livarcocc","Number":"10934","RawContent":null,"Title":"MSBuild 16.0.450","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/10934","RelatedDescription":"Closed or merged PR \"MSBuild 16.0.450\" (#10934)"},{"Id":"417529491","IsPullRequest":true,"CreatedAt":"2019-03-06T00:39:04","Actor":"livarcocc","Number":"10931","RawContent":null,"Title":"Update the version of Tasks Feed tools to handle a breaking change on git.","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/10931","RelatedDescription":"Closed or merged PR \"Update the version of Tasks Feed tools to handle a breaking change on git.\" (#10931)"},{"Id":"417538581","IsPullRequest":true,"CreatedAt":"2019-03-06T00:38:34","Actor":"livarcocc","Number":"10932","RawContent":null,"Title":"TestPlatform Insertion 16.0.1","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/10932","RelatedDescription":"Closed or merged PR \"TestPlatform Insertion 16.0.1\" (#10932)"},{"Id":"417520899","IsPullRequest":true,"CreatedAt":"2019-03-05T23:27:29","Actor":"livarcocc","Number":"10930","RawContent":null,"Title":"Update the version of Tasks Feed tools to handle a breaking change on git.","State":"closed","Body":"@mmitche said he is almost certain this will work.\r\n","Url":"https://github.com/dotnet/cli/pull/10930","RelatedDescription":"Closed or merged PR \"Update the version of Tasks Feed tools to handle a breaking change on git.\" (#10930)"},{"Id":"417275123","IsPullRequest":true,"CreatedAt":"2019-03-05T23:00:06","Actor":"vagisha-nidhi","Number":"10926","RawContent":null,"Title":"TestPlatform Insertion 16.0.1","State":"closed","Body":"Release : [https://github.com/Microsoft/vstest/releases/tag/v16.0.1](https://github.com/Microsoft/vstest/releases/tag/v16.0.1)","Url":"https://github.com/dotnet/cli/pull/10926","RelatedDescription":"Closed or merged PR \"TestPlatform Insertion 16.0.1\" (#10926)"},{"Id":"417518154","IsPullRequest":true,"CreatedAt":"2019-03-05T22:47:55","Actor":"livarcocc","Number":"10929","RawContent":null,"Title":"Sdk 2.1.600-preview-63905-02","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/10929","RelatedDescription":"Closed or merged PR \"Sdk 2.1.600-preview-63905-02\" (#10929)"},{"Id":"417263917","IsPullRequest":true,"CreatedAt":"2019-03-05T16:35:35","Actor":"dotnet-bot","Number":"10923","RawContent":null,"Title":"Merge release/2.1.5xx to release/2.1.6xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.1.5xx into release/2.1.6xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.5xx-to-release/2.1.6xx\ngit reset --hard upstream/release/2.1.6xx\ngit merge upstream/release/2.1.5xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.5xx-to-release/2.1.6xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/10923","RelatedDescription":"Closed or merged PR \"Merge release/2.1.5xx to release/2.1.6xx\" (#10923)"},{"Id":"417287248","IsPullRequest":true,"CreatedAt":"2019-03-05T13:36:56","Actor":"dotnet-maestro[bot]","Number":"10927","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19154.14\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10927","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#10927)"},{"Id":"417093428","IsPullRequest":true,"CreatedAt":"2019-03-05T04:29:18","Actor":"peterhuene","Number":"10922","RawContent":null,"Title":"Prevent stage0 bundled versions from interfering with the build.","State":"closed","Body":"A change to enable the parameterization of the latest known patch numbers for\r\nMicrosoft.NETCore.App reused the same property names as those in the generated\r\nbundled versions props file.\r\n\r\nWhen building locally, the stage0 dotnet install was setting the properties\r\nfirst, resulting in older versions as the fallbacks then what is currently\r\nbeing used in the repo.\r\n\r\nHowever, when building from an orchestrated build where the properties were\r\nbeing set globally, those properties get respected and the values are\r\nthe expected ones.\r\n\r\nThis commit fixes this by renaming the properties to those that aren't used in\r\nthe bundled versions props file.  The names chosen match those we're using for\r\nthe 2.2 builds for consistency.\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/10922","RelatedDescription":"Closed or merged PR \"Prevent stage0 bundled versions from interfering with the build.\" (#10922)"}],"ResultType":"GitHubIssue"},"Standard-Issues":{"Issues":[{"Id":"418474274","IsPullRequest":false,"CreatedAt":"2019-03-07T22:27:38","Actor":"MgSam","Number":"1097","RawContent":null,"Title":"Change .NET Standard 2.1 version number","State":"closed","Body":"It was just [announced ](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-preview-3/#) that the next version of .NET Standard will be 2.1, which will be implemented by .NET Core 3.0 and incompatible with .NET Core 2.1 and incompatible with any version of .NET Framework. Got all that?\r\n\r\nI implore you to please change the version number of Standard 2.1 before it's too late. It is extremely confusing to have it be Standard 2.1 which is incompatible with Core 2.1. I strongly feel that Standard should version alongside of Core (given that Core is the lead implementation of .NET) and should be Standard 3.0\r\n\r\nIn lieu of that, at the very least it should get a version number which doesn't actively lead to confusion by aligning with the version number of an incompatible version of Core. Standard 2.5?\r\n\r\nI know Microsoft has a reputation to uphold at being horrible at naming things, but this is a bridge too far :)","Url":"https://github.com/dotnet/standard/issues/1097","RelatedDescription":"Closed issue \"Change .NET Standard 2.1 version number\" (#1097)"},{"Id":"417603266","IsPullRequest":true,"CreatedAt":"2019-03-06T03:17:38","Actor":"terrajobst","Number":"1096","RawContent":null,"Title":"Update information for .NET Standard 2.1","State":"closed","Body":"This updates the version table for .NET Standard 2.1 as well as the API diff.\r\n\r\n/cc @mairaw ","Url":"https://github.com/dotnet/standard/pull/1096","RelatedDescription":"Closed or merged PR \"Update information for .NET Standard 2.1\" (#1096)"},{"Id":"417601953","IsPullRequest":true,"CreatedAt":"2019-03-06T03:11:36","Actor":"terrajobst","Number":"1095","RawContent":null,"Title":"Add footnote regarding .NET Framework 4.6.1 support","State":"closed","Body":"This mirrors what's already in the docs","Url":"https://github.com/dotnet/standard/pull/1095","RelatedDescription":"Closed or merged PR \"Add footnote regarding .NET Framework 4.6.1 support\" (#1095)"},{"Id":"416990675","IsPullRequest":false,"CreatedAt":"2019-03-04T21:01:09","Actor":"tannergooding","Number":"1094","RawContent":null,"Title":"Consider the HWIntrinsic APIs for NS2.1","State":"open","Body":"### Summary\r\n\r\nWe should consider including the Harware Intrinsic APIs as part of `netstandard2.1` given that they are trivial to \"support\" (you just expose the APIs and return `false` for all the `IsSupported` checks, as the shared framework code is already doing), were designed in a way that the feature can be incrementally enabled by a given runtime, are already finding use in the shared framework code, and will allow users to more readily write cross-runtime libraries.\r\n\r\n### Rationale\r\n\r\n`netcoreapp3.0` is adding ~1500 APIs in order to support the new \"Hardware Intrinsics\" feature. These APIs provide support for writing more efficient algorithms that can take advantage of hardware specific functionality.\r\n\r\nWhile the number of APIs exposed may seem daunting, the APIs are hardware specific and were designed such that you must perform the appropriate checks before attempting to use a given API or they will result in a `PlatformNotSupportedException` at runtime. For example, `System.Runtime.Intrinsics.X86.Sse` is a class that exposes the SSE ISA for the x86 and x64 architectures. Before using any of the methods on that class, you must emit an `if (Sse.IsSupported)` check to validate that both the current hardware and the current runtime support this ISA.\r\n\r\nThese API declarations are also part of the existing shared framework code and have a default implementation of returning `false` for the `IsSupported` checks and throwing `PlatformNotSupportedException` from any of the other exposed hardware-specific APIs. This has allowed us to already take a cross-runtime dependency on these intrinsics in places like `SpanHelpers`, `Decimal`, `BitOperations`, `BitArray`, and more.\r\n\r\nGiven the above, I propose that these APIs be included as part of `netstandard2.1` as it will allow general library and application developers to share in the same benefits we have already seen. That is, it will light-up on .NET Core 3.0 and will do nothing on other runtimes. This will avoid the need for them to cross-compile their code in a number of cases.\r\n\r\nFor the runtimes that don't support this functionality yet, they should require somewhere between no and minimal changes. For the most part, they should already be internally compiling these APIs and hitting the `IsSupported=false` paths. So they will ultimately just be exposing these APIs to the end-user and would require no changes. The work that may be required is to ensure that the `Vector64<T>`, `Vector128<T>`, and `Vector256<T>` types have the appropriate ABI dependent type layouts. That is, these types should have the appropriate packing (e.g. `16` for `Vector128<T>` on x86/x64 since it maps to the `__m128` ABI primitive defined by the Windows and System V calling convention specifications).\r\n\r\nExposing this will also allow the various runtimes to have incremental \"light-up\" of these APIs. That is, rather than waiting for the next release to both expose and implement the APIs, they can expose the the APIs as part of `netstandard2.1` and the corresponding version of their runtime (e.g `x.0`). They can then light up individual ISAs and make them available to their users as they see fit (e.g. They could enable just `SSE` in `x.1` and could enable SSE2/SSE3 in `x.2`, etc).\r\n\r\n","Url":"https://github.com/dotnet/standard/issues/1094","RelatedDescription":"Open issue \"Consider the HWIntrinsic APIs for NS2.1\" (#1094)"},{"Id":"416499863","IsPullRequest":false,"CreatedAt":"2019-03-03T18:13:53","Actor":"proof85","Number":"1093","RawContent":null,"Title":"HashCode to standard","State":"closed","Body":"Hi,\r\n\r\nis it possible to add the HashCode-\"Helper\" struct to the .net standard? Including the Combine method? it is covered by the .net corefx since v2.1 and it looks like there is no os or platform specific usecase","Url":"https://github.com/dotnet/standard/issues/1093","RelatedDescription":"Closed issue \"HashCode to standard\" (#1093)"},{"Id":"414920447","IsPullRequest":false,"CreatedAt":"2019-02-27T02:53:49","Actor":"divega","Number":"1092","RawContent":null,"Title":"Add string overloads to DbDataReader.Get*() to .NET Standard 2.1","State":"open","Body":"This is mainly about adding the API from https://github.com/dotnet/corefx/issues/31595 (commit https://github.com/dotnet/corefx/commit/b30fc2b4ee302e449e3580ae39cb083a76b813c9), plus possibly two additional async method possibly coming from https://github.com/dotnet/corefx/issues/35611, to .NET Standard 2.1.\r\n\r\ncc @roji @ajcvickers @terrajobst ","Url":"https://github.com/dotnet/standard/issues/1092","RelatedDescription":"Open issue \"Add string overloads to DbDataReader.Get*() to .NET Standard 2.1\" (#1092)"},{"Id":"414887877","IsPullRequest":false,"CreatedAt":"2019-02-27T00:35:13","Actor":"ChaseFlorell","Number":"1091","RawContent":null,"Title":"Collection<T> and ObservableCollection<T> do not support ranges","State":"open","Body":"This is taken directly from https://github.com/dotnet/corefx/issues/10752 [by @robertmclaws]\r\n\r\nThis API change is already approved in .netcore (tentatively scheduled for 3.0), and I think it's equally as important to be available in .netstandard\r\n\r\n```csharp\r\n    // Adds a range to the end of the collection.\r\n    // Raises CollectionChanged (NotifyCollectionChangedAction.Add)\r\n    public void AddRange(IEnumerable<T> collection) => InsertItemsRange(0, collection);\r\n\r\n    // Inserts a range\r\n    // Raises CollectionChanged (NotifyCollectionChangedAction.Add)\r\n    public void InsertRange(int index, IEnumerable<T> collection) => InsertItemsRange(index, collection);\r\n\r\n    // Removes a range.\r\n    // Raises CollectionChanged (NotifyCollectionChangedAction.Remove)\r\n    public void RemoveRange(int index, int count) => RemoveItemsRange(index, count);\r\n\r\n    // Will allow to replace a range with fewer, equal, or more items.\r\n    // Raises CollectionChanged (NotifyCollectionChangedAction.Replace)\r\n    public void ReplaceRange(int index, int count, IEnumerable<T> collection)\r\n    {\r\n         RemoveItemsRange(index, count);\r\n         InsertItemsRange(index, collection);\r\n    }\r\n\r\n    #region virtual methods\r\n    protected virtual void InsertItemsRange(int index, IEnumerable<T> collection);\r\n    protected virtual void RemoveItemsRange(int index, int count);\r\n    #endregion\r\n```\r\n\r\nPlease see the linked issue for the full discussion.\r\n\r\nI'm assuming it would land [here](https://github.com/dotnet/standard/blob/master/src/netstandard/ref/System.Collections.ObjectModel.cs) and the appropriate shims would be created, however I don't know enough about netstandard to actually draw up the PR.\r\n","Url":"https://github.com/dotnet/standard/issues/1091","RelatedDescription":"Open issue \"Collection<T> and ObservableCollection<T> do not support ranges\" (#1091)"},{"Id":"414879247","IsPullRequest":false,"CreatedAt":"2019-02-27T00:01:34","Actor":"wtgodbe","Number":"1090","RawContent":null,"Title":"Sort out baseline between netstandard & netcoreapp","State":"open","Body":"We should sit down & go over the diff between netstandard & netcoreapp, and decide what we need to fix/how we need to fix it.\r\n\r\nCC @terrajobst ","Url":"https://github.com/dotnet/standard/issues/1090","RelatedDescription":"Open issue \"Sort out baseline between netstandard & netcoreapp\" (#1090)"},{"Id":"414599564","IsPullRequest":true,"CreatedAt":"2019-02-26T13:10:54","Actor":"dotnet-maestro[bot]","Number":"1089","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.19125.2\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19125.2\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.19125.2\r\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.19125.2\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.19125.2\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1089","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1089)"},{"Id":"414366560","IsPullRequest":true,"CreatedAt":"2019-02-26T02:10:06","Actor":"terrajobst","Number":"1087","RawContent":null,"Title":"Remove windows row","State":"closed","Body":"After talking to @ptorr-msft it seems we can update this table and simplify the confusing Windows rows by combining *Windows* with *UWP* and removing *Windows Phone* and *Windows Phone Silverlight* entirely.\r\n\r\n/cc @mairaw @richlander ","Url":"https://github.com/dotnet/standard/pull/1087","RelatedDescription":"Closed or merged PR \"Remove windows row\" (#1087)"},{"Id":"414395637","IsPullRequest":true,"CreatedAt":"2019-02-26T02:09:06","Actor":"terrajobst","Number":"1088","RawContent":null,"Title":"Update .NET Standard 2.1 API delta","State":"closed","Body":"","Url":"https://github.com/dotnet/standard/pull/1088","RelatedDescription":"Closed or merged PR \"Update .NET Standard 2.1 API delta\" (#1088)"},{"Id":"414093373","IsPullRequest":true,"CreatedAt":"2019-02-25T13:10:50","Actor":"dotnet-maestro[bot]","Number":"1086","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.19124.1\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19124.1\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.19124.1\r\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.19124.1\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.19124.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1086","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1086)"},{"Id":"413818940","IsPullRequest":true,"CreatedAt":"2019-02-24T13:10:46","Actor":"dotnet-maestro[bot]","Number":"1085","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.19123.1\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19123.1\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.19123.1\r\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.19123.1\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.19123.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1085","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1085)"},{"Id":"413693365","IsPullRequest":true,"CreatedAt":"2019-02-23T13:10:47","Actor":"dotnet-maestro[bot]","Number":"1084","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.19122.3\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19122.3\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.19122.3\r\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.19122.3\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.19122.3\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1084","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1084)"},{"Id":"413628435","IsPullRequest":true,"CreatedAt":"2019-02-23T00:53:44","Actor":"terrajobst","Number":"1083","RawContent":null,"Title":"Add \"generated by a tool\"-header","State":"closed","Body":"This adds a header to all the Markdown files provided in the docs folder that\r\nshow the API set of .NET Standard. The header indicates that these are\r\ngenerated by a tool and PRs are generally not accepted.\r\n\r\nFixes #1053.","Url":"https://github.com/dotnet/standard/pull/1083","RelatedDescription":"Closed or merged PR \"Add \"generated by a tool\"-header\" (#1083)"},{"Id":"413393938","IsPullRequest":true,"CreatedAt":"2019-02-22T13:10:47","Actor":"dotnet-maestro[bot]","Number":"1082","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.19121.5\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19121.5\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.19121.5\r\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.19121.5\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.19121.5\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1082","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1082)"},{"Id":"413086694","IsPullRequest":true,"CreatedAt":"2019-02-22T07:09:05","Actor":"terrajobst","Number":"1080","RawContent":null,"Title":"Add SwitchExpressionException","State":"closed","Body":"Fixes #1077\r\n\r\nThis adds `SwitchExpressionException` that was added for supporting C#'s [`switch` expression construct](https://github.com/dotnet/csharplang/blob/master/proposals/patterns.md#switch-expression). The exception type was discussed in CoreFX in [this API request](https://github.com/dotnet/corefx/issues/33284).","Url":"https://github.com/dotnet/standard/pull/1080","RelatedDescription":"Closed or merged PR \"Add SwitchExpressionException\" (#1080)"},{"Id":"412707494","IsPullRequest":false,"CreatedAt":"2019-02-22T07:09:05","Actor":"terrajobst","Number":"1077","RawContent":null,"Title":"Include SwitchExpression added for C# 8","State":"closed","Body":"","Url":"https://github.com/dotnet/standard/issues/1077","RelatedDescription":"Closed issue \"Include SwitchExpression added for C# 8\" (#1077)"},{"Id":"413148623","IsPullRequest":false,"CreatedAt":"2019-02-21T22:14:20","Actor":"wtgodbe","Number":"1081","RawContent":null,"Title":"Use Arcade defaults for DebugType, etc","State":"open","Body":"https://github.com/dotnet/standard/blob/4a006e962fc5c5651b7712028e0e352b1e011a58/Directory.Build.props#L86-L104\r\n\r\nCC @tmat ","Url":"https://github.com/dotnet/standard/issues/1081","RelatedDescription":"Open issue \"Use Arcade defaults for DebugType, etc\" (#1081)"},{"Id":"412718646","IsPullRequest":true,"CreatedAt":"2019-02-21T22:12:16","Actor":"tmat","Number":"1078","RawContent":null,"Title":"Set copyright and package license","State":"closed","Body":"Prepares repo for change https://github.com/dotnet/arcade/pull/2003 by setting `Copyright` and `PackageLicenseExpression` properties. These values will be required to be set by each repository once https://github.com/dotnet/arcade/pull/2003 is merged.\r\n\r\nIn order to not break the current builds this change sets the properties conditionally. This condition can be removed once all repos switch to Arcade that has https://github.com/dotnet/arcade/pull/2003.\r\n\r\n@markwilkie\r\n","Url":"https://github.com/dotnet/standard/pull/1078","RelatedDescription":"Closed or merged PR \"Set copyright and package license\" (#1078)"},{"Id":"411583193","IsPullRequest":true,"CreatedAt":"2019-02-21T19:39:58","Actor":"akoeplinger","Number":"1074","RawContent":null,"Title":"Fix link to build logs in build status badge","State":"closed","Body":"The PR which added the build status badges used the status from the public project but linked to the internal project: https://github.com/dotnet/standard/pull/1062\r\nUpdated to link to point to the public project.\r\n\r\nFixes https://github.com/dotnet/standard/issues/1065\r\n\r\n/cc @wtgodbe ","Url":"https://github.com/dotnet/standard/pull/1074","RelatedDescription":"Closed or merged PR \"Fix link to build logs in build status badge\" (#1074)"},{"Id":"412912955","IsPullRequest":true,"CreatedAt":"2019-02-21T13:10:49","Actor":"dotnet-maestro[bot]","Number":"1079","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.19121.1\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19121.1\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.19121.1\r\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.19121.1\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.19121.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1079","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1079)"},{"Id":"410901729","IsPullRequest":false,"CreatedAt":"2019-02-20T21:32:22","Actor":"mpetrinidev","Number":"1071","RawContent":null,"Title":"Cannot use linq in MatchCollection regex with .NET Standard 2.0","State":"closed","Body":"Hi everyone,\r\n\r\nI have the following problem with a .NET Standard 2.0 class library\r\n\r\n'MatchCollection' does not contain a definition for 'Select' and no accessible extension method 'Select' accepting a first argument of type 'MatchCollection' could be found (are you missing a using directive or an assembly reference?)\r\n\r\n**Code**\r\n\r\n`IEnumerable<string> words = Regex.Matches(text, @\"([\\w]+\\.)+[\\w]+(?=[\\s]|$)\").Select(p => p.Value);`\r\n\r\nI had to move this code from a project that is develope with .NET Core 2.1.\r\n\r\nHow do I solve this problem? I read [https://docs.microsoft.com/en-us/dotnet/api/system.text.regularexpressions.matchcollection?view=netstandard-2.0](url) but I cannot find what the problem is\r\n\r\nThanks in advance","Url":"https://github.com/dotnet/standard/issues/1071","RelatedDescription":"Closed issue \"Cannot use linq in MatchCollection regex with .NET Standard 2.0\" (#1071)"},{"Id":"412413302","IsPullRequest":true,"CreatedAt":"2019-02-20T13:10:57","Actor":"dotnet-maestro[bot]","Number":"1076","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.19119.2\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19119.2\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.19119.2\r\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.19119.2\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.19119.2\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1076","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1076)"},{"Id":"412032685","IsPullRequest":false,"CreatedAt":"2019-02-19T17:11:56","Actor":"YairHalberstadt","Number":"1075","RawContent":null,"Title":"A number of APIs still exist in both .NetCore and .NetFramework, but are missing in the .NetStandard 2.0 version of System.Reflection.Emit","State":"closed","Body":"I'm currently looking into targeting .Net Standard for Iron Python: https://github.com/IronLanguages/dlr/issues/175\r\n\r\nSome of the required Reflection.Emit APIs are missing from the System.Reflection.Emit nuget package when targeting .Net Standard 2.0, such as `DynamicMethod` and `TypeBuilder.CreateType()`. However they exist in both .Net Core and .Net Framework, and I believe it was decided in https://github.com/dotnet/corefx/issues/29365 (specifically from https://github.com/dotnet/corefx/issues/29365#issuecomment-398256162  and onwards) that such APIs should be included in the Nuget Package, and should throw when used from an AOT runtime.\r\n\r\nThe work to do that was completed in https://github.com/dotnet/corefx/pull/30741.\r\n\r\nIs there any reason why the Nuget package doesn't seem to reflect this?\r\n\r\nThanks","Url":"https://github.com/dotnet/standard/issues/1075","RelatedDescription":"Closed issue \"A number of APIs still exist in both .NetCore and .NetFramework, but are missing in the .NetStandard 2.0 version of System.Reflection.Emit\" (#1075)"},{"Id":"411518831","IsPullRequest":false,"CreatedAt":"2019-02-18T15:04:17","Actor":"kjpou1","Number":"1073","RawContent":null,"Title":".NET Standard for WebAssembly","State":"open","Body":"### Rationale and Usage\r\n\r\nAs WebAssembly support in Mono is being worked on there is a need to consider it as a platform for NS2.1.  `PlatformID.WebAssembly`\r\n \r\n### Proposed API\r\n\r\n#### PlatformID\r\n\r\nThis adds WebAssembly enum to `PlatformID`\r\n\r\n```\r\n    public enum PlatformID\r\n    {\r\n        [EditorBrowsable(EditorBrowsableState.Never)] Win32S = 0,\r\n        [EditorBrowsable(EditorBrowsableState.Never)] Win32Windows = 1,\r\n        Win32NT = 2,\r\n        [EditorBrowsable(EditorBrowsableState.Never)] WinCE = 3,\r\n        Unix = 4,\r\n        [EditorBrowsable(EditorBrowsableState.Never)] Xbox = 5,\r\n        [EditorBrowsable(EditorBrowsableState.Never)] MacOSX = 6\r\n        [EditorBrowsable(EditorBrowsableState.Never)] WebAssembly = 7\r\n    }\r\n```\r\n\r\n#### OSPlatform\r\n\r\nThis adds `OSPlatform.WebAssembly`.\r\n\r\n```\r\nnamespace System.Runtime.InteropServices\r\n{\r\n    public readonly struct OSPlatform : IEquatable<OSPlatform>\r\n    {\r\n        private readonly string _osPlatform;\r\n\r\n        public static OSPlatform WebAssembly { get; } = new OSPlatform(\"WEBASSEMBLY\");\r\n\r\n        public static OSPlatform FreeBSD { get; } = new OSPlatform(\"FREEBSD\");\r\n\r\n        public static OSPlatform Linux { get; } = new OSPlatform(\"LINUX\");\r\n\r\n        public static OSPlatform OSX { get; } = new OSPlatform(\"OSX\");\r\n\r\n        public static OSPlatform Windows { get; } = new OSPlatform(\"WINDOWS\");\r\n\r\n```\r\n\r\nIssue from Blazor: https://github.com/mono/mono/issues/13002\r\n\r\n@terrajobst @marek-safar @lewing\r\n","Url":"https://github.com/dotnet/standard/issues/1073","RelatedDescription":"Open issue \".NET Standard for WebAssembly\" (#1073)"},{"Id":"411070793","IsPullRequest":true,"CreatedAt":"2019-02-16T13:10:47","Actor":"dotnet-maestro[bot]","Number":"1072","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.19115.1\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19115.1\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.19115.1\r\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.19115.1\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.19115.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1072","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1072)"},{"Id":"410533703","IsPullRequest":true,"CreatedAt":"2019-02-15T20:32:52","Actor":"wtgodbe","Number":"1069","RawContent":null,"Title":"Label package as 'preview3'","State":"closed","Body":"Change label from `preview1` to `preview3` for upcoming release\r\n\r\nCC @danmosemsft @terrajobst","Url":"https://github.com/dotnet/standard/pull/1069","RelatedDescription":"Closed or merged PR \"Label package as 'preview3'\" (#1069)"},{"Id":"410759394","IsPullRequest":true,"CreatedAt":"2019-02-15T13:10:55","Actor":"dotnet-maestro[bot]","Number":"1070","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.19114.4\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19114.4\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.19114.4\r\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.19114.4\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.19114.4\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1070","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1070)"},{"Id":"410528981","IsPullRequest":true,"CreatedAt":"2019-02-14T23:12:42","Actor":"dotnet-maestro[bot]","Number":"1068","RawContent":null,"Title":"Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.19113.4\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19113.4\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.19113.4\r\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.19113.4\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.19113.4\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1068","RelatedDescription":"Closed or merged PR \"Update dependencies from dotnet/arcade\" (#1068)"}],"ResultType":"GitHubIssue"},"CoreFx-Issues":{"Issues":[{"Id":"418557539","IsPullRequest":true,"CreatedAt":"2019-03-08T05:19:17","Actor":"safern","Number":"35872","RawContent":null,"Title":"Fix ReflectPropertyDescriptor.IsReadOnly","State":"closed","Body":"When this code was ported from Desktop, the implementation was changed to use `PropertyInfo.GetMethod/SetMethod` which gets private properties as well. This breaks `ReflectPropertyDescriptor.IsReadOnly` when the set method is marked as private, because we're always able to find it via reflection, so we `return false` even though it is indeed read only.\r\n\r\nFixes: https://github.com/dotnet/corefx/issues/33629\r\n\r\ncc: @jkotas ","Url":"https://github.com/dotnet/corefx/pull/35872","RelatedDescription":"Closed or merged PR \"Fix ReflectPropertyDescriptor.IsReadOnly\" (#35872)"},{"Id":"418300428","IsPullRequest":true,"CreatedAt":"2019-03-08T05:15:22","Actor":"dotnet-maestro[bot]","Number":"35854","RawContent":null,"Title":"[master] Update dependencies from dotnet/coreclr","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/coreclr\r\n\r\n- Microsoft.NET.Sdk.IL - 3.0.0-preview4-27506-73\r\n- Microsoft.NETCore.ILAsm - 3.0.0-preview4-27506-73\r\n- Microsoft.NETCore.Runtime.CoreCLR - 3.0.0-preview4-27506-73\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/35854","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/coreclr\" (#35854)"},{"Id":"418275790","IsPullRequest":true,"CreatedAt":"2019-03-08T05:14:43","Actor":"MarcoRossignoli","Number":"35853","RawContent":null,"Title":"Improve process test fail output","State":"closed","Body":"contributes to https://github.com/dotnet/corefx/issues/35783\r\n\r\nOutput sample\r\n```\r\n  ...\r\n  Pid: 15388 Name: MSBuild' Main module: 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Preview\\MSBuild\\Current\\Bin\\MSBuild.exe'\r\n  Pid: 18128 Name: conhost' Main module: 'C:\\WINDOWS\\system32\\conhost.exe'\r\n  Pid: 3172 Name: Microsoft.Alm.Shared.Remoting.RemoteContainer.dll' Main module: 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Preview\\common7\\ide\\PrivateAssemblies\\Microsoft.Alm.Shared.Remoting.RemoteContainer.dll'\r\n  Pid: 10644 Name: smartscreen' Main module: 'C:\\Windows\\System32\\smartscreen.exe'\r\n  Pid: 5764 Name: ConEmu64' Main module: 'C:\\tools\\cmder\\vendor\\conemu-maximus5\\ConEmu64.exe'\r\n  Pid: 15132 Name: ConEmuC64' Main module: 'C:\\tools\\cmder\\vendor\\conemu-maximus5\\ConEmu\\ConEmuC64.exe'\r\n  Pid: 9324 Name: conhost' Main module: 'C:\\WINDOWS\\system32\\conhost.exe'\r\n  Pid: 7312 Name: cmd' Main module: 'C:\\WINDOWS\\SYSTEM32\\cmd.exe'\r\n  Pid: 6216 Name: VBCSCompiler' Main module: 'C:\\Users\\Marco\\.nuget\\packages\\microsoft.net.compilers\\3.0.0-beta4-final\\tools\\VBCSCompiler.exe'\r\n  Pid: 17984 Name: conhost' Main module: 'C:\\WINDOWS\\system32\\conhost.exe'\r\n  Pid: 13024 Name: svchost' Main module: 'C:\\WINDOWS\\system32\\svchost.exe'\r\n  Pid: 17384 Name: MSBuild' Main module: 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\15.0\\bin\\MSBuild.exe'\r\n  Pid: 8004 Name: cmd' Main module: 'C:\\WINDOWS\\SysWOW64\\cmd.exe'\r\n  Pid: 16692 Name: conhost' Main module: 'C:\\WINDOWS\\system32\\conhost.exe'\r\n  Pid: 16116 Name: dotnet' Main module: 'C:\\git\\corefx\\artifacts\\bin\\testhost\\netcoreapp-Windows_NT-Debug-x64\\dotnet.exe'\r\n  Current process id: 16116\r\n      System.Diagnostics.Tests.ProcessTests.GetProcessesByName_ProcessName_ReturnsExpected [FAIL]\r\n        Assert.False() Failure\r\n        Expected: False\r\n        Actual:   True\r\n        Stack Trace:\r\n          C:\\git\\corefx\\src\\System.Diagnostics.Process\\tests\\ProcessTests.cs(1079,0): at System.Diagnostics.Tests.ProcessTests.GetProcessesByName_ProcessName_ReturnsExpected()\r\n   ...\r\n```\r\n\r\n/cc @danmosemsft @ahsonkhan ","Url":"https://github.com/dotnet/corefx/pull/35853","RelatedDescription":"Closed or merged PR \"Improve process test fail output\" (#35853)"},{"Id":"418629858","IsPullRequest":true,"CreatedAt":"2019-03-08T04:44:12","Actor":"lmolkova","Number":"35882","RawContent":null,"Title":"Inject W3C headers in HTTP diagnostics handler","State":"open","Body":"Depending on the Activity.IdFormat we want to inject [W3C distributed tracing](https://github.com/w3c/trace-context) headers or Request-Id headers.","Url":"https://github.com/dotnet/corefx/pull/35882","RelatedDescription":"Open PR \"Inject W3C headers in HTTP diagnostics handler\" (#35882)"},{"Id":"418615085","IsPullRequest":true,"CreatedAt":"2019-03-08T03:24:12","Actor":"lmolkova","Number":"35880","RawContent":null,"Title":"Inject W3C  headers in netfx HTTP diagnostics hook","State":"open","Body":"Depending on the Activity.IdFormat we want to inject [W3C distributed tracing](https://github.com/w3c/trace-context) headers or Request-Id headers.\r\n\r\nThis change implements this and also prevents injection of any of the correlation headers if it was injected before e.g. by tracing system or explicitly in the app code.","Url":"https://github.com/dotnet/corefx/pull/35880","RelatedDescription":"Open PR \"Inject W3C  headers in netfx HTTP diagnostics hook\" (#35880)"},{"Id":"418602955","IsPullRequest":true,"CreatedAt":"2019-03-08T02:25:10","Actor":"davidfowl","Number":"35879","RawContent":null,"Title":"Throw an exception if examined < consumed","State":"open","Body":"Added some extra validation","Url":"https://github.com/dotnet/corefx/pull/35879","RelatedDescription":"Open PR \"Throw an exception if examined < consumed\" (#35879)"},{"Id":"418601567","IsPullRequest":false,"CreatedAt":"2019-03-08T02:18:35","Actor":"davidsh","Number":"35878","RawContent":null,"Title":"TargetsLinux doesn't work anymore in CSPROJ test projects","State":"open","Body":"I was trying to debug some test failures on Linux tests.  I noticed though when building and running tests on Linux (i.e. Ubuntu), the `$(TargetsUnix)` is true but `$(TargetsLinux)` is undefined.  So, we have various test code files that aren't compiling anymore into the test projects.\r\n\r\nFor example this block of files won't be included in the build for the test project:\r\nhttps://github.com/dotnet/corefx/blob/fd88c5df4bde4ef56522a1cd81da1ff69c92edc4/src/System.Net.Security/tests/FunctionalTests/System.Net.Security.Tests.csproj#L113-L147\r\n\r\nI first discovered this problem while building on Debian on WSL (Windows Subsystem for Linux).  I thought it might be a WSL specific problem.  But the same problem happens with a real Linux VM.\r\n\r\nIs  `$(TargetsLinux)` broken now?  There are several places in CoreFx tests that use it in the CSPROJ file.\r\n\r\n```\r\n$ grep -r TargetsLinux .\r\n./System.Data.Odbc/src/System.Data.Odbc.csproj:  <ItemGroup Condition=\"'$(TargetsLinux)' == 'true' OR '$(TargetsFreeBSD)' == 'true' OR '$(TargetsWebAssembly)'=='true'\">\r\n./System.Data.Odbc/tests/System.Data.Odbc.Tests.csproj:  <ItemGroup Condition=\"'$(TargetsLinux)' == 'true'\">\r\n./System.Diagnostics.Process/src/System.Diagnostics.Process.csproj:  <ItemGroup Condition=\" '$(TargetsLinux)' == 'true'\">\r\n./System.IO.FileSystem.Watcher/src/System.IO.FileSystem.Watcher.csproj:  <ItemGroup Condition=\" '$(TargetsLinux)' == 'true'\">\r\n./System.IO.Ports/src/System.IO.Ports.csproj:    <GeneratePlatformNotSupportedAssemblyMessage Condition=\"'$(TargetGroup)' == 'netstandard' AND '$(TargetsWindows)' != 'true' AND '$(TargetsLinux)' != 'true' AND '$(TargetsOSX)' != 'true'\">SR.PlatformNotSupported_IOPorts</GeneratePlatformNotSupportedAssemblyMessage>\r\n./System.IO.Ports/src/System.IO.Ports.csproj:  <ItemGroup Condition=\"'$(TargetsNetFx)' != 'true' AND ('$(TargetsWindows)' == 'true' OR '$(TargetsLinux)' == 'true' OR '$(TargetsOSX)' == 'true')\">\r\n./System.IO.Ports/src/System.IO.Ports.csproj:  <ItemGroup Condition=\" '$(TargetsLinux)' == 'true' \">\r\n./System.IO.Ports/src/System.IO.Ports.csproj:  <ItemGroup Condition=\" '$(TargetsLinux)' == 'true'  OR '$(TargetsOSX)' == 'true'\">\r\n./System.IO.Ports/src/System.IO.Ports.csproj:  <ItemGroup Condition=\"'$(TargetsLinux)' == 'true' OR '$(TargetsOSX)' == 'true'\">\r\n./System.IO.Ports/tests/System.IO.Ports.Tests.csproj:  <ItemGroup Condition=\"'$(TargetsLinux)' != 'true' AND '$(TargetsOSX)' != 'true'\">\r\n./System.Net.NetworkInformation/src/System.Net.NetworkInformation.csproj:  <ItemGroup Condition=\" '$(TargetsLinux)' == 'true' \">\r\n./System.Net.NetworkInformation/src/System.Net.NetworkInformation.csproj:  <ItemGroup Condition=\"'$(TargetsLinux)' == 'true'\">\r\n./System.Net.Security/tests/FunctionalTests/System.Net.Security.Tests.csproj:  <ItemGroup Condition=\" '$(TargetsLinux)' == 'true' \">\r\n```\r\n\r\n","Url":"https://github.com/dotnet/corefx/issues/35878","RelatedDescription":"Open issue \"TargetsLinux doesn't work anymore in CSPROJ test projects\" (#35878)"},{"Id":"418600872","IsPullRequest":false,"CreatedAt":"2019-03-08T02:15:39","Actor":"gbieging","Number":"35877","RawContent":null,"Title":"decimal forgotten by Span<T> APIs","State":"open","Body":"I was recently toying  with making a serialization library and found out that there are no `Span<T>` APIs for serializing and deserializing decimals.\r\n\r\nI searched for the issues related to the `Span<T>` APIs and found #12672 and #12673 for decimal, but when they where closed for tracking in #13892 decimal was forgotten.\r\n\r\nI know 3.0 is near but it would be nice to have it in 2.x too.","Url":"https://github.com/dotnet/corefx/issues/35877","RelatedDescription":"Open issue \"decimal forgotten by Span<T> APIs\" (#35877)"},{"Id":"418437576","IsPullRequest":true,"CreatedAt":"2019-03-08T02:06:49","Actor":"benaadams","Number":"35860","RawContent":null,"Title":"Shrink ReadOnlySequence by 8 bytes","State":"closed","Body":"Reduce from 32 bytes to 24 bytes.\r\n\r\nDeconstruct the two `SequencePosition`s that make up `ReadOnlySequence` into their composite parts internally so `ReadOnlySequence` is reduced in size by 8 bytes which was previously used in packing and alignment for using the two structs individually.\r\n\r\n/cc @stephentoub @ahsonkhan @davidfowl @pakrym ","Url":"https://github.com/dotnet/corefx/pull/35860","RelatedDescription":"Closed or merged PR \"Shrink ReadOnlySequence by 8 bytes\" (#35860)"},{"Id":"418588147","IsPullRequest":true,"CreatedAt":"2019-03-08T01:15:52","Actor":"ViktorHofer","Number":"35876","RawContent":null,"Title":"Upgrade Test Sdk to 16.0.1","State":"open","Body":"Also the props file was renamed from lower-case Microsoft.Net.Test.Sdk to upper-case Microsoft.NET.Test.Sdk.","Url":"https://github.com/dotnet/corefx/pull/35876","RelatedDescription":"Open PR \"Upgrade Test Sdk to 16.0.1\" (#35876)"},{"Id":"418582654","IsPullRequest":true,"CreatedAt":"2019-03-08T00:52:27","Actor":"dotnet-maestro-bot","Number":"35875","RawContent":null,"Title":"[automated] Merge branch 'master' => 'release/3.0'","State":"open","Body":"I detected changes in the master branch which have not been merged yet to release/3.0. I'm a robot and am configured to help you automatically keep release/3.0 up to date, so I've opened this PR.\r\n\r\nThis PR merges commits made on master by the following committers:\n\n* @jkotas\n* @bartonjs\n* @maryamariyan\r\n\r\n## Instructions for merging from UI\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, complete this PR by creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nIf this repo does not allow creating merge commits from the GitHub UI, use command line instructions.\r\n\r\n## Instructions for merging via command line\r\n\r\nRun these commands to merge this pull request from the command line.\r\n\r\n``` sh\r\ngit fetch\r\ngit checkout master\r\ngit pull --ff-only\r\ngit checkout release/3.0\r\ngit pull --ff-only\r\ngit merge --no-ff master\r\n\r\n# If there are merge conflicts, resolve them and then run git merge --continue to complete the merge\r\n# Pushing the changes to the PR branch will re-trigger PR validation.\r\ngit push https://github.com/dotnet-maestro-bot/corefx HEAD:merge/master-to-release/3.0\r\n```\r\n\r\n<details>\r\n<summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit push git@github.com:dotnet-maestro-bot/corefx HEAD:merge/master-to-release/3.0\r\n```\r\n\r\n</details>\r\n\r\n\r\nAfter PR checks are complete push the branch\r\n```\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging. You can do this [using GitHub][resolve-github] or using the [command line][resolve-cli].\r\n\r\n[resolve-github]: https://help.github.com/articles/resolving-a-merge-conflict-on-github/\r\n[resolve-cli]: https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/\r\n\r\n## Instructions for updating this pull request\r\n\r\nContributors to this repo have permission update this pull request by pushing to the branch 'merge/master-to-release/3.0'. This can be done to resolve conflicts or make other changes to this pull request before it is merged.\r\n\r\n```\r\ngit checkout -b merge/master-to-release/3.0 release/3.0\r\ngit pull https://github.com/dotnet-maestro-bot/corefx merge/master-to-release/3.0\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push https://github.com/dotnet-maestro-bot/corefx merge/master-to-release/3.0\r\n```\r\n\r\n<details>\r\n    <summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit checkout -b merge/master-to-release/3.0 release/3.0\r\ngit pull git@github.com:dotnet-maestro-bot/corefx merge/master-to-release/3.0\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push git@github.com:dotnet-maestro-bot/corefx merge/master-to-release/3.0\r\n```\r\n\r\n</details>\r\n\r\nContact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.\r\n","Url":"https://github.com/dotnet/corefx/pull/35875","RelatedDescription":"Open PR \"[automated] Merge branch 'master' => 'release/3.0'\" (#35875)"},{"Id":"418545013","IsPullRequest":true,"CreatedAt":"2019-03-08T00:49:09","Actor":"Dotnet-GitSync-Bot","Number":"35871","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corefx/pull/35871","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#35871)"},{"Id":"418580849","IsPullRequest":true,"CreatedAt":"2019-03-08T00:43:56","Actor":"stephentoub","Number":"35874","RawContent":null,"Title":"Improve performance of Pipe.Reader.AsStream()","State":"open","Body":"The Stream returned from the base PipeReader uses public APIs on PipeReader because it needs to work with any PipeReader implementation.  But the vast majority case is a PipeReader returned from Pipe, and the Stream returned from its AsStream can make use of internals on Pipe.  This change does so, reducing the overheads involved in accessing a reader as a stream.\r\n\r\nOne thing I don't love about this is that it moves a little more work under the lock, which can increase contention, but in doing so avoids the need to take the lock a second time for synchronous completion, which can reduce contention.\r\n\r\ncc: @benaadams, @davidfowl, @ahsonkhan \r\n\r\nBefore:\r\n```\r\n      Method |        Mean |     Error |    StdDev | Allocated |\r\n------------ |------------:|----------:|----------:|----------:|\r\n   ReadByte1 | 27,698.7 ns | 201.84 ns | 157.58 ns |       0 B |\r\n ReadByte128 |    804.0 ns |  16.04 ns |  38.44 ns |       0 B |\r\n```\r\n\r\nAfter:\r\n```\r\n      Method |        Mean |     Error |    StdDev | Allocated |\r\n------------ |------------:|----------:|----------:|----------:|\r\n   ReadByte1 | 19,197.3 ns | 381.99 ns | 439.90 ns |       0 B |\r\n ReadByte128 |    600.2 ns |  11.34 ns |  11.13 ns |       0 B |\r\n```\r\n\r\nBenchmark:\r\n```C#\r\nusing BenchmarkDotNet.Attributes;\r\nusing BenchmarkDotNet.Attributes.Jobs;\r\nusing BenchmarkDotNet.Running;\r\nusing System;\r\nusing System.IO;\r\nusing System.IO.Pipelines;\r\nusing System.Threading.Tasks;\r\n\r\n[MemoryDiagnoser]\r\n[InProcess]\r\npublic class Benchmark\r\n{\r\n    private static void Main() => BenchmarkRunner.Run<Benchmark>();\r\n\r\n    private readonly byte[] _data = new byte[128];\r\n    private readonly byte[] _buffer1 = new byte[1];\r\n    private readonly byte[] _buffer128 = new byte[128];\r\n    private readonly Pipe _pipe = new Pipe();\r\n\r\n    [Benchmark]\r\n    public async Task ReadByte1()\r\n    {\r\n        await _pipe.Writer.WriteAsync(_data);\r\n        _pipe.Writer.Complete();\r\n        Stream s = _pipe.Reader.AsStream();\r\n\r\n        while (await s.ReadAsync(_buffer1) != 0) ;\r\n\r\n        _pipe.Reader.Complete();\r\n        _pipe.Reset();\r\n    }\r\n\r\n    [Benchmark]\r\n    public async Task ReadByte128()\r\n    {\r\n        await _pipe.Writer.WriteAsync(_data);\r\n        _pipe.Writer.Complete();\r\n        Stream s = _pipe.Reader.AsStream();\r\n\r\n        while (await s.ReadAsync(_buffer128) != 0) ;\r\n\r\n        _pipe.Reader.Complete();\r\n        _pipe.Reset();\r\n    }\r\n}\r\n```","Url":"https://github.com/dotnet/corefx/pull/35874","RelatedDescription":"Open PR \"Improve performance of Pipe.Reader.AsStream()\" (#35874)"},{"Id":"418577628","IsPullRequest":false,"CreatedAt":"2019-03-08T00:29:40","Actor":"jcouv","Number":"35873","RawContent":null,"Title":"System.TypedReference should have a dummy object field in reference assemblies","State":"open","Body":"The compiler allows any unmanaged type to be stackalloc'ed, and `TypedReference` is recognized as unmanaged, but that creates a GC hole.\r\n\r\nThe solution is similar to what was done for `Span`, namely adding a dummy `object` field to its representation in ref assemblies.","Url":"https://github.com/dotnet/corefx/issues/35873","RelatedDescription":"Open issue \"System.TypedReference should have a dummy object field in reference assemblies\" (#35873)"},{"Id":"418518297","IsPullRequest":true,"CreatedAt":"2019-03-07T23:37:13","Actor":"dotnet-maestro-bot","Number":"35868","RawContent":null,"Title":"[automated] Merge branch 'release/2.1' => 'release/2.2'","State":"closed","Body":"I detected changes in the release/2.1 branch which have not been merged yet to release/2.2. I'm a robot and am configured to help you automatically keep release/2.2 up to date, so I've opened this PR.\r\n\r\nThis PR merges commits made on release/2.1 by the following committers:\n\n* @bartonjs\r\n\r\n## Instructions for merging from UI\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, complete this PR by creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nIf this repo does not allow creating merge commits from the GitHub UI, use command line instructions.\r\n\r\n## Instructions for merging via command line\r\n\r\nRun these commands to merge this pull request from the command line.\r\n\r\n``` sh\r\ngit fetch\r\ngit checkout release/2.1\r\ngit pull --ff-only\r\ngit checkout release/2.2\r\ngit pull --ff-only\r\ngit merge --no-ff release/2.1\r\n\r\n# If there are merge conflicts, resolve them and then run git merge --continue to complete the merge\r\n# Pushing the changes to the PR branch will re-trigger PR validation.\r\ngit push https://github.com/dotnet-maestro-bot/corefx HEAD:merge/release/2.1-to-release/2.2\r\n```\r\n\r\n<details>\r\n<summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit push git@github.com:dotnet-maestro-bot/corefx HEAD:merge/release/2.1-to-release/2.2\r\n```\r\n\r\n</details>\r\n\r\n\r\nAfter PR checks are complete push the branch\r\n```\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging. You can do this [using GitHub][resolve-github] or using the [command line][resolve-cli].\r\n\r\n[resolve-github]: https://help.github.com/articles/resolving-a-merge-conflict-on-github/\r\n[resolve-cli]: https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/\r\n\r\n## Instructions for updating this pull request\r\n\r\nContributors to this repo have permission update this pull request by pushing to the branch 'merge/release/2.1-to-release/2.2'. This can be done to resolve conflicts or make other changes to this pull request before it is merged.\r\n\r\n```\r\ngit checkout -b merge/release/2.1-to-release/2.2 release/2.2\r\ngit pull https://github.com/dotnet-maestro-bot/corefx merge/release/2.1-to-release/2.2\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push https://github.com/dotnet-maestro-bot/corefx merge/release/2.1-to-release/2.2\r\n```\r\n\r\n<details>\r\n    <summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit checkout -b merge/release/2.1-to-release/2.2 release/2.2\r\ngit pull git@github.com:dotnet-maestro-bot/corefx merge/release/2.1-to-release/2.2\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push git@github.com:dotnet-maestro-bot/corefx merge/release/2.1-to-release/2.2\r\n```\r\n\r\n</details>\r\n\r\nContact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.\r\n","Url":"https://github.com/dotnet/corefx/pull/35868","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'release/2.1' => 'release/2.2'\" (#35868)"},{"Id":"418517627","IsPullRequest":true,"CreatedAt":"2019-03-07T23:01:26","Actor":"dotnet-maestro-bot","Number":"35867","RawContent":null,"Title":"[automated] Merge branch 'master' => 'release/3.0'","State":"closed","Body":"I detected changes in the master branch which have not been merged yet to release/3.0. I'm a robot and am configured to help you automatically keep release/3.0 up to date, so I've opened this PR.\r\n\r\nThis PR merges commits made on master by the following committers:\n\n* @stephentoub\n* @vancem\n* @bartonjs\n* @wfurt\n* @danmosemsft\n* @dotnet-maestro[bot]\n* @adamsitnik\n* @safern\n* @14067510+yujayee\n* @ahsonkhan\n* @davidfowl\n* @ericstj\n* @AaronRobinsonMSFT\n* @ViktorHofer\n* @ajcvickers\n* @tarekgh\n* @tannergooding\n* @jkotas\n* @steveharter\n* @maryamariyan\n* @josalem\n* @geoffkizer\n* @MarcoRossignoli\n* @GrabYourPitchforks\n* @JeremyKuhne\n* @krwq\n* @wtgodbe\n* @Anipik\n* @MattGal\n* @tmat\r\n\r\n## Instructions for merging from UI\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, complete this PR by creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nIf this repo does not allow creating merge commits from the GitHub UI, use command line instructions.\r\n\r\n## Instructions for merging via command line\r\n\r\nRun these commands to merge this pull request from the command line.\r\n\r\n``` sh\r\ngit fetch\r\ngit checkout master\r\ngit pull --ff-only\r\ngit checkout release/3.0\r\ngit pull --ff-only\r\ngit merge --no-ff master\r\n\r\n# If there are merge conflicts, resolve them and then run git merge --continue to complete the merge\r\n# Pushing the changes to the PR branch will re-trigger PR validation.\r\ngit push https://github.com/dotnet-maestro-bot/corefx HEAD:merge/master-to-release/3.0\r\n```\r\n\r\n<details>\r\n<summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit push git@github.com:dotnet-maestro-bot/corefx HEAD:merge/master-to-release/3.0\r\n```\r\n\r\n</details>\r\n\r\n\r\nAfter PR checks are complete push the branch\r\n```\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging. You can do this [using GitHub][resolve-github] or using the [command line][resolve-cli].\r\n\r\n[resolve-github]: https://help.github.com/articles/resolving-a-merge-conflict-on-github/\r\n[resolve-cli]: https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/\r\n\r\n## Instructions for updating this pull request\r\n\r\nContributors to this repo have permission update this pull request by pushing to the branch 'merge/master-to-release/3.0'. This can be done to resolve conflicts or make other changes to this pull request before it is merged.\r\n\r\n```\r\ngit checkout -b merge/master-to-release/3.0 release/3.0\r\ngit pull https://github.com/dotnet-maestro-bot/corefx merge/master-to-release/3.0\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push https://github.com/dotnet-maestro-bot/corefx merge/master-to-release/3.0\r\n```\r\n\r\n<details>\r\n    <summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit checkout -b merge/master-to-release/3.0 release/3.0\r\ngit pull git@github.com:dotnet-maestro-bot/corefx merge/master-to-release/3.0\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push git@github.com:dotnet-maestro-bot/corefx merge/master-to-release/3.0\r\n```\r\n\r\n</details>\r\n\r\nContact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.\r\n","Url":"https://github.com/dotnet/corefx/pull/35867","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'master' => 'release/3.0'\" (#35867)"},{"Id":"418202449","IsPullRequest":true,"CreatedAt":"2019-03-07T22:48:32","Actor":"filipnavara","Number":"35852","RawContent":null,"Title":"Replace AsnReader/AsnWriter with updated versions, remove unused AsnSerializer","State":"closed","Body":"Follow-up to https://github.com/dotnet/corefx/pull/35840 and https://github.com/dotnet/corefx/pull/35817.\r\n\r\nNotes:\r\n- The serializer can be brought back if necessary. However, it is not external API and there are no uses of it, so it didn't seem worth the effort to update it for new API names.\r\n- Few uses of `AsnWriter.WriteEncodedValue` ended up converting `ReadOnlyMemory` to `ReadOnlySpan` which is in turn converted back to `ReadOnlyMemory` inside `AsnWriter`. This is not a big deal performance-wise, but it looks like something that should be brought to attention in API review eventually.\r\n- <strike>Two places now use `ArrayPool<byte>.Shared.Return(decrypted.Array, clearArray: true);` instead of explict calls to `CryptographicOperations.ZeroMemory`. This doesn't change the actual behavior, but it uses a new pattern, so I thought I should bring it to attention.</strike>\r\n\r\n/cc @bartonjs ","Url":"https://github.com/dotnet/corefx/pull/35852","RelatedDescription":"Closed or merged PR \"Replace AsnReader/AsnWriter with updated versions, remove unused AsnSerializer\" (#35852)"},{"Id":"418543300","IsPullRequest":true,"CreatedAt":"2019-03-07T22:27:34","Actor":"dotnet-maestro[bot]","Number":"35870","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.ApiCompat - 1.0.0-beta.19157.4\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19157.4\r\n- Microsoft.DotNet.Build.Tasks.Configuration - 1.0.0-beta.19157.4\r\n- Microsoft.DotNet.Build.Tasks.Feed - 2.2.0-beta.19157.4\r\n- Microsoft.DotNet.Build.Tasks.Packaging - 1.0.0-beta.19157.4\r\n- Microsoft.DotNet.CodeAnalysis - 1.0.0-beta.19157.4\r\n- Microsoft.DotNet.CoreFxTesting - 1.0.0-beta.19157.4\r\n- Microsoft.DotNet.XUnitExtensions - 2.4.0-beta.19157.4\r\n- Microsoft.DotNet.GenAPI - 1.0.0-beta.19157.4\r\n- Microsoft.DotNet.Helix.Sdk - 2.0.0-beta.19157.4\r\n- Microsoft.DotNet.SourceRewriter - 1.0.0-beta.19157.4\r\n- Microsoft.DotNet.GenFacades - 1.0.0-beta.19157.4\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/35870","RelatedDescription":"Open PR \"[release/3.0] Update dependencies from dotnet/arcade\" (#35870)"},{"Id":"418519507","IsPullRequest":false,"CreatedAt":"2019-03-07T21:24:05","Actor":"TravisEz13","Number":"35869","RawContent":null,"Title":"System.IO.DriveInfo on macOS reports the wrong about of FreeSpace","State":"open","Body":"# Repro\r\n\r\nCall the GetDrives() method of `System.IO.DriveInfo`\r\n\r\n# Actual\r\n\r\nFrom PowerShell, which uses the `2.1.8` runtime\r\n```PowerShell\r\n> [System.IO.DriveInfo]::GetDrives() | ?{ $_.Name -like '/'} | %{[int32]($_.TotalFreeSpace / 1GB)}\r\n76\r\n```\r\n\r\nOr (comma added for readability)\r\n```PowerShell\r\n> [System.IO.DriveInfo]::GetDrives() | ?{ $_.Name -like '/'} | % TotalFreeSpace\r\n81869557760\r\n```\r\n\r\n> 81,869,557,760\r\n\r\n# Expected\r\n\r\n\r\n![image](https://user-images.githubusercontent.com/10873629/53989630-40c24600-40db-11e9-9bcb-e0f51fae6ff9.png)\r\n\r\n","Url":"https://github.com/dotnet/corefx/issues/35869","RelatedDescription":"Open issue \"System.IO.DriveInfo on macOS reports the wrong about of FreeSpace\" (#35869)"},{"Id":"418405587","IsPullRequest":true,"CreatedAt":"2019-03-07T21:17:40","Actor":"bartonjs","Number":"35859","RawContent":null,"Title":"[release/2.1] Port Improve X509Chain handling of NotSignatureValid on Linux","State":"closed","Body":"Port #35801 to release/2.1\r\nFixes #35654.\r\n\r\n#### Description\r\n\r\nBuilding an X509Chain with the same inputs on a given machine is supposed to always produce the same outputs, but in some cases on Linux with OpenSSL 1.0.x errors can not appear when building a chain over the same certificate object (or a distinct CLR object over the same native resource) a second time.\r\n\r\n#### Customer Impact\r\n\r\nCustomers who build an X509Chain multiple times over the same certificate on Linux may not get all the errors on a successive chainwalk, which could result in considering an invalid chain valid.\r\n\r\n#### Regression?\r\n\r\nNo\r\n\r\n#### Packaging reviewed? \r\n\r\n* System.Security.Cryptography.X509Certificates only ships in Microsoft.NETCore.App\r\n\r\n#### Risk\r\n\r\nLow.  The \"single build\", vast majority, cases are covered by the existing tests; and new tests verify the multi-build case as now uniform across the OSes.","Url":"https://github.com/dotnet/corefx/pull/35859","RelatedDescription":"Closed or merged PR \"[release/2.1] Port Improve X509Chain handling of NotSignatureValid on Linux\" (#35859)"},{"Id":"418468072","IsPullRequest":true,"CreatedAt":"2019-03-07T21:15:36","Actor":"Dotnet-GitSync-Bot","Number":"35865","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @hughbe","Url":"https://github.com/dotnet/corefx/pull/35865","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#35865)"},{"Id":"418497469","IsPullRequest":false,"CreatedAt":"2019-03-07T20:25:38","Actor":"blumu","Number":"35866","RawContent":null,"Title":"System.Diagnostics.TextWriterTraceListener(string fileName) not implemented: does not write anything to the file","State":"open","Body":"The constructor `System.Diagnostics.TextWriterTraceListener(string fileName)` is not properly implemented. The filename gets stored in a class field (`_fileName`) but nothing gets ever written to the file.\r\n\r\n## Repro (F#)\r\n```fs\r\nuse fileTracer = new System.Diagnostics.TextWriterTraceListener(@\"C:\\temp\\test.log\", Name = \"foo\")\r\nfileTracer.WriteLine(\"test1\")\r\nSystem.Diagnostics.Trace.Listeners.Add(fileTracer)\r\nSystem.Diagnostics.Trace.WriteLine(\"test2\")\r\nfileTracer.Flush()\r\n```\r\n   \r\n### Observed\r\n File `C:\\temp\\test.log` is not present on disk.\r\n### Expected File\r\nFile `C:\\temp\\test.log` should be created on disk and contain two lines: \"test1\" and \"test2\".\r\nOr at least the method should throw an exception, or at the very least the source code and documention should indicate that this API is not fully supported on dotnet core.\r\n\r\nSee source at: https://github.com/dotnet/corefx/blob/43760cebc9b2773c0959629a443a28111d8b7de8/src/System.Diagnostics.TextWriterTraceListener/src/System/Diagnostics/TextWriterTraceListener.cs#L77\r\n\r\n### Known work around\r\nFirst create a `FileStream` and instantiate the TraceListener using the constructor that takes a Stream instead of a filename:\r\n```fs\r\nuse logStream = new System.IO.FileStream(@\"C:\\tempt\\test.log\", System.IO.FileMode.Append, System.IO.FileAccess.Write, System.IO.FileShare.ReadWrite)\r\nuse fileTracer = new System.Diagnostics.TextWriterTraceListener(logStream, Name = \"foo\", TraceOutputOptions = System.Diagnostics.TraceOptions.DateTime)\r\nfileTracer.WriteLine(\"test 1\")\r\nSystem.Diagnostics.Trace.Listeners.Add(fileTracer)\r\nSystem.Diagnostics.Trace.WriteLine(\"test2\")\r\nfileTracer.Flush()\r\n```","Url":"https://github.com/dotnet/corefx/issues/35866","RelatedDescription":"Open issue \"System.Diagnostics.TextWriterTraceListener(string fileName) not implemented: does not write anything to the file\" (#35866)"},{"Id":"418453699","IsPullRequest":false,"CreatedAt":"2019-03-07T18:32:53","Actor":"tannergooding","Number":"35864","RawContent":null,"Title":"Utf8Parser.TryParseNumber handles 0e999 differently than the Utf16Parser in the constructed NumberBuffer","State":"open","Body":"This can lead to downstream differences in how floating-point numbers are parsed.\r\n\r\nSee https://github.com/dotnet/corefx/pull/35854#issuecomment-470605095 for more details.","Url":"https://github.com/dotnet/corefx/issues/35864","RelatedDescription":"Open issue \"Utf8Parser.TryParseNumber handles 0e999 differently than the Utf16Parser in the constructed NumberBuffer\" (#35864)"},{"Id":"418450548","IsPullRequest":true,"CreatedAt":"2019-03-07T18:24:30","Actor":"vancem","Number":"35863","RawContent":null,"Title":"Update System.Activity API to be more readonly","State":"open","Body":"Two new classes ActivityTraceId and ActivitySpanId are better as read-only classes.  These classes have a cache in them so they are not strictly read-only but they are semantically read-only.   \r\n\r\nWe can treat them as read-only if we use Unsafe APIs to update the cache.  However there were issues with using the Unsafe APIs that blocked that until recently.  This update adds the read-only-ness \r\n\r\nSee ttps://github.com/dotnet/corefx/issues/34828  for the new APIs (they have the read-only-ness)\r\n \r\nAnd https://github.com/dotnet/corefx/pull/35848 for the original non-read-only version.","Url":"https://github.com/dotnet/corefx/pull/35863","RelatedDescription":"Open PR \"Update System.Activity API to be more readonly\" (#35863)"},{"Id":"418445366","IsPullRequest":false,"CreatedAt":"2019-03-07T18:10:37","Actor":"Pede23","Number":"35862","RawContent":null,"Title":"Allow Disabling ClientWebSocketOptions Authorization Header Validations","State":"open","Body":"Hello,\r\n\r\nI'm running into some issues with the Authorization header that I'm attaching to the WebsocketConfiguration that I'm using.  I'm essentially getting an error back that the header is malformed.  Amazon SigV4 headers are not compliant with IETF standards, so there's a need to disable any sort of validation.  It appears that in .NET, you can disable header validation for an HTTP Request [2].  I can't seem to find the same for the WebsocketConfiguration headers.\r\n\r\nHere's an example of the header which I am trying to attach:\r\n\r\n```\r\nvar webSocketConfiguration = new Action<ClientWebSocketOptions>(options => {\r\n                    options.SetRequestHeader(\"Authorization\",\"AWS4-HMAC-SHA256 Credential= AKIAXXXXXXXXXXXYSZA /20190301/us-east-2/neptune-db/aws4_request, SignedHeaders=host;x-amz-date, Signature=b8155de54d9faab00000000000000000000000000a07e0d7dda49902e4d9202\");\r\n                    });\r\n```\r\n\r\nAttempting to initiate a websocket connection with the ClientWebSocketOptions shown above results in this error:\r\n\r\n```\r\nUnhandled Exception: System.Net.WebSockets.WebSocketException: Unable to connect to the remote server ---> System.FormatException: The format of value 'AWS4-HMAC-SHA256%20Credential=AKIAXXXXXXXXXXXYSZA/20190301/us-east-2/neptune-db/aws4_request,%20SignedHeaders=host;x-amz-date,%20Signature=b8155de54d9faab00000000000000000000000000a07e0d7dda49902e4d9202' is invalid.\r\n\r\n   at System.Net.Http.Headers.HttpHeaderParser.ParseValue(String value, Object storeValue, Int32& index)\r\n\r\n   at System.Net.Http.Headers.HttpHeaders.ParseAndAddValue(HeaderDescriptor descriptor, HeaderStoreItemInfo info, String value)\r\n\r\n   at System.Net.Http.Headers.HttpHeaders.Add(HeaderDescriptor descriptor, String value)\r\n\r\n   at System.Net.Http.Headers.HttpHeaders.Add(String name, String value)\r\n\r\n   at System.Net.WebSockets.WebSocketHandle.ConnectAsyncCore(Uri uri, CancellationToken cancellationToken, ClientWebSocketOptions options)\r\n```\r\n\r\nIs there any way a new ClientWebSocketOptions function could be exposed which does not enforce validating Authorization headers? I'm hoping for something akin to the HttpHeaders.TryAddWithoutValidation() function, but for websockets.","Url":"https://github.com/dotnet/corefx/issues/35862","RelatedDescription":"Open issue \"Allow Disabling ClientWebSocketOptions Authorization Header Validations\" (#35862)"},{"Id":"418444945","IsPullRequest":false,"CreatedAt":"2019-03-07T18:09:33","Actor":"wfurt","Number":"35861","RawContent":null,"Title":"add Span overloads for Socket datagram functions","State":"open","Body":"``` c#\r\n public partial class Socket : IDisposable\r\n {\r\n    ...\r\n    public int SendTo(ReadOnlySpan<byte> buffer, EndPoint remoteEP);\r\n    public int SendTo(ReadOnlySpan<byte> buffer, SocketFlags socketFlags, EndPoint remoteEP);\r\n    public int ReceiveFrom(Span<byte> buffer, ref EndPoint remoteEP);\r\n    public int ReceiveFrom(Span<byte> buffer, SocketFlags socketFlags, ref EndPoint remoteEP);\r\n    ...\r\n}\r\n```\r\nThere are already Span overloads in Send() and Receive() functions for connection oriented sockets (TCP) and this is complement for UDP. \r\nMost of the underlying code is already ready, this is about exposing it as public API.\r\n\r\ncc: @stephentoub \r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/corefx/issues/35861","RelatedDescription":"Open issue \"add Span overloads for Socket datagram functions\" (#35861)"},{"Id":"418369512","IsPullRequest":true,"CreatedAt":"2019-03-07T15:27:56","Actor":"hughbe","Number":"35858","RawContent":null,"Title":"Cleanup and enhance misc reflection/attribute tests","State":"open","Body":"","Url":"https://github.com/dotnet/corefx/pull/35858","RelatedDescription":"Open PR \"Cleanup and enhance misc reflection/attribute tests\" (#35858)"},{"Id":"418361104","IsPullRequest":false,"CreatedAt":"2019-03-07T15:11:29","Actor":"non-conformances-research","Number":"35857","RawContent":null,"Title":"Assembly.CreateInstance returning null instead of throwing an ArgumentException","State":"open","Body":"According to the specification, Assembly.CreateInstance method should throw an ArgumentException to the above program.\r\n\r\n```\r\nusing System;\r\nusing System.Reflection;\r\n\r\npublic class A {\r\n  public static void Main() {\r\n    Assembly assem = typeof(A).Assembly;\r\n    A a = (A)assem.CreateInstance(\" \");\r\n    if (a == null) {\r\n      Console.WriteLine(\"Null\");\r\n    } else {\r\n      Console.WriteLine(a);\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n## Steps to Reproduce\r\n\r\n1. Compile above program.\r\n2. Run it.\r\n\r\n### Current Behavior\r\n\r\nNull\r\n\r\n### Expected Behavior\r\n\r\nArgumentException thrown.\r\n\r\n## On which platforms did you notice this\r\n\r\n[ ] macOS\r\n[X] Linux\r\n[ ] Windows\r\n\r\n**Version Used**:\r\n\r\n.NET Core SDK 2.1.401","Url":"https://github.com/dotnet/corefx/issues/35857","RelatedDescription":"Open issue \"Assembly.CreateInstance returning null instead of throwing an ArgumentException\" (#35857)"},{"Id":"418342346","IsPullRequest":true,"CreatedAt":"2019-03-07T14:35:15","Actor":"hughbe","Number":"35856","RawContent":null,"Title":"Cleanup StrongNameKeyPair tests and increase coverage","State":"open","Body":"Looks like the whole class is basically not implemented in .NET Core\r\n\r\n- Use `FileCleanupTestBase`\r\n- Add more coverage surrounding PNSEs and ANEs","Url":"https://github.com/dotnet/corefx/pull/35856","RelatedDescription":"Open PR \"Cleanup StrongNameKeyPair tests and increase coverage\" (#35856)"},{"Id":"418333384","IsPullRequest":false,"CreatedAt":"2019-03-07T14:17:33","Actor":"simonferquel","Number":"35855","RawContent":null,"Title":"Introduce streaming interfaces, make Stream an implementation of those","State":"open","Body":"# Context\r\nThe Stream class is a very old component of the .Net world, which initially was all synchronous, and has been complimented with async-ness (begin/end style), then Task compatible.\r\n\r\nIt is an abstract class that is kind of tricky to implement: this synchronous methods are abstracts, and the asynchronous ones are virtual, with a default implementation that does an infamous Async over Sync trick. It also mix and match many different concerns (like read vs write streams, seekability etc.) in a way that makes most implementation have some of the properties/method throw infamous NotImplementedException.\r\n\r\nIf one want to expose a read-only async only, non-seekable stream to the .net ecosystem, she must inherit from this multi-purpose Stream class which completely hides the fact that Seek, Write etc. will throw.\r\n\r\n# Proposed solution\r\n\r\nIntroduce finer grained interfaces, make Stream implement them all. Use this opportunity to do embrace Memory/Span support, and to generalize the notion of stream:\r\n\r\n```csharp\r\n// this is WIP, only a subset of the required interfaces here, as an example\r\npublic interface IReadableSynchronousStream<T> where T:struct{\r\n  int Read(Span<T> buffer);\r\n} \r\npublic interface IReadableAsynchronousStream<T> where T:struct{\r\n  Task<int> ReadAsync(Memory<T> buffer);\r\n}\r\npublic interface IWriteableSynchronousStream<T> where T:struct{\r\n  int Write(ReadonlySpan<T> buffer);\r\n}\r\npublic interface IWriteableAsynchronousStream<T> where T:struct{\r\n  Task<int> WriteAsync(ReadonlyMemory<T> buffer);\r\n}\r\n```\r\n\r\nAll components in the framework referencing streams should be patched to consume those interfaces.\r\n\r\n## Sync over Async, Async over Sync\r\n\r\nIn some cases, we will need to pass a synchronous stream to a method using an asynchronous stream or vice-versa. This should not be done without explicit consent from the developer though. So the CoreFX should have facilities like:\r\n```csharp\r\npublic static class SynchronousStream{\r\n   public static IReadableSynchronousStream<T> where T:struct FromAsync(IReadableAsynchronousStream<T>);\r\n   public static IWriteableSynchronousStream<T> where T:struct FromAsync(IWriteableAsynchronousStream<T>); \r\n// ...\r\n}\r\n```\r\n\r\n## Retro-compatibility\r\n\r\nAs with async over sync and sync over async, some 3rd party libraries will still need to manipulate legacy Streams. The Stream class should provide factories of wrappers handling all the common scenarios:\r\n\r\n```csharp\r\npublic abstract class Stream{\r\n// …\r\n  public static Stream From<T> where T:struct (IReadableAsynchronousStream<T>);\r\n}\r\n```\r\n","Url":"https://github.com/dotnet/corefx/issues/35855","RelatedDescription":"Open issue \"Introduce streaming interfaces, make Stream an implementation of those\" (#35855)"}],"ResultType":"GitHubIssue"},"Roslyn-Issues":{"Issues":[{"Id":"418637195","IsPullRequest":false,"CreatedAt":"2019-03-08T05:26:10","Actor":"jcouv","Number":"33965","RawContent":null,"Title":"`System.TypedReference` should be treated as managed","State":"open","Body":"Even once the [corefx issue](https://github.com/dotnet/corefx/issues/35873) (adding a dummy `object` field to the ref assembly for `TypedReference`) is fixed, we're not sure that the compiler will honor it properly. We may have to add a special case to recognize `TypedReference`.\r\n\r\nThe goal is that `var x = stackalloc TypedReference[10];` should be an error (because `TypedReference` is managed).\r\n\r\nMore [context](https://github.com/dotnet/roslyn/pull/33951#issuecomment-470778517).","Url":"https://github.com/dotnet/roslyn/issues/33965","RelatedDescription":"Open issue \"`System.TypedReference` should be treated as managed\" (#33965)"},{"Id":"418602328","IsPullRequest":true,"CreatedAt":"2019-03-08T02:22:05","Actor":"heejaechang","Number":"33964","RawContent":null,"Title":"support feature flag service in IExperimentationService","State":"open","Body":"this will let us to create private ring of specific groups for new features until it is ready for bigger group.\r\n\r\nonce feature is ready for bigger group, this service can support VS experiment flight service which will let us to enable new features for bigger group.\r\n\r\nonce we are confident on the feature, we will enable it for general public","Url":"https://github.com/dotnet/roslyn/pull/33964","RelatedDescription":"Open PR \"support feature flag service in IExperimentationService\" (#33964)"},{"Id":"418601485","IsPullRequest":false,"CreatedAt":"2019-03-08T02:18:13","Actor":"jnm2","Number":"33963","RawContent":null,"Title":"'Generate constructor' should not add null checks for nullable parameters.","State":"open","Body":"**Version Used**: Visual Studio 2019 RC.1 SVC 1\r\n\r\n'Generate constructor' with 'Add null checks' currently generates parameters which are pointlessly nullable, since the constructor throws if `null` is actually passed:\r\n\r\n```cs\r\nclass C\r\n{\r\n    public C(string foo, int? bar)\r\n    {\r\n        Foo = foo ?? throw new ArgumentNullException(nameof(foo));\r\n        Bar = bar ?? throw new ArgumentNullException(nameof(bar));\r\n    }\r\n\r\n    public string Foo { get; }\r\n    public int? Bar { get; }\r\n}\r\n```\r\n\r\nI'd expect nullable parameters to be passed over. I don't know what happens when you nullable reference types at it, but right now I really care about the experience with nullable value types.","Url":"https://github.com/dotnet/roslyn/issues/33963","RelatedDescription":"Open issue \"'Generate constructor' should not add null checks for nullable parameters.\" (#33963)"},{"Id":"418593005","IsPullRequest":true,"CreatedAt":"2019-03-08T01:38:33","Actor":"gafter","Number":"33962","RawContent":null,"Title":"Track inferred state changes in a finally block","State":"open","Body":"Fixes #33446","Url":"https://github.com/dotnet/roslyn/pull/33962","RelatedDescription":"Open PR \"Track inferred state changes in a finally block\" (#33962)"},{"Id":"418570784","IsPullRequest":true,"CreatedAt":"2019-03-08T01:30:12","Actor":"dotnet-bot","Number":"33956","RawContent":null,"Title":"Merge master to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/33956","RelatedDescription":"Closed or merged PR \"Merge master to master-vs-deps\" (#33956)"},{"Id":"418570806","IsPullRequest":true,"CreatedAt":"2019-03-08T01:30:07","Actor":"dotnet-bot","Number":"33957","RawContent":null,"Title":"Merge master to features/readonly-members","State":"closed","Body":"\nThis is an automatically generated pull request from master into features/readonly-members.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/readonly-members\ngit reset --hard upstream/features/readonly-members\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/readonly-members --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/33957","RelatedDescription":"Closed or merged PR \"Merge master to features/readonly-members\" (#33957)"},{"Id":"418590687","IsPullRequest":true,"CreatedAt":"2019-03-08T01:27:35","Actor":"ivanbasov","Number":"33961","RawContent":null,"Title":"Completion is not provided inside curly braces settings if the preceeding text contains 'is'","State":"open","Body":"Fixes https://devdiv.visualstudio.com/DevDiv/_workitems/edit/815109","Url":"https://github.com/dotnet/roslyn/pull/33961","RelatedDescription":"Open PR \"Completion is not provided inside curly braces settings if the preceeding text contains 'is'\" (#33961)"},{"Id":"418587702","IsPullRequest":true,"CreatedAt":"2019-03-08T01:13:45","Actor":"heejaechang","Number":"33960","RawContent":null,"Title":"move StreamJsonRpc to 2.x from 1.3.x","State":"open","Body":"time to move to new version. right now, 1.3 and 2.0 versions are mix used in VS and 2.x has breaking changes. so we are trying to move to 2.x so that we can drop 1.3 from VS.\r\n\r\nalso, 2.0 has some of bug fixes it had before. so removed those workarounds as well.","Url":"https://github.com/dotnet/roslyn/pull/33960","RelatedDescription":"Open PR \"move StreamJsonRpc to 2.x from 1.3.x\" (#33960)"},{"Id":"418573676","IsPullRequest":true,"CreatedAt":"2019-03-08T00:12:01","Actor":"ryzngard","Number":"33959","RawContent":null,"Title":"Issue/33287 generateconstructorfrommembers","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/33959","RelatedDescription":"Open PR \"Issue/33287 generateconstructorfrommembers\" (#33959)"},{"Id":"418570831","IsPullRequest":true,"CreatedAt":"2019-03-08T00:00:47","Actor":"dotnet-bot","Number":"33958","RawContent":null,"Title":"Merge master to demos/records","State":"open","Body":"\nThis is an automatically generated pull request from master into demos/records.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-demos/records\ngit reset --hard upstream/demos/records\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-demos/records --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/33958","RelatedDescription":"Open PR \"Merge master to demos/records\" (#33958)"},{"Id":"418570710","IsPullRequest":true,"CreatedAt":"2019-03-08T00:00:26","Actor":"dotnet-bot","Number":"33955","RawContent":null,"Title":"Merge dev16.0-vs-deps to master-vs-deps","State":"open","Body":"\nThis is an automatically generated pull request from dev16.0-vs-deps into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.0-vs-deps-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/dev16.0-vs-deps\n# Fix merge conflicts\ngit commit\ngit push upstream merges/dev16.0-vs-deps-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/33955","RelatedDescription":"Open PR \"Merge dev16.0-vs-deps to master-vs-deps\" (#33955)"},{"Id":"418570044","IsPullRequest":true,"CreatedAt":"2019-03-07T23:57:34","Actor":"RikkiGibson","Number":"33954","RawContent":null,"Title":"Readonly members emit changes","State":"open","Body":"Related to #32911\r\n\r\n- fill out implementations for MethodSymbol.IsReadOnly\r\n- create a temp receiver when calling a non-readonly method from a readonly method\r\n- share `this` without value copying when calling a readonly method from a readonly method","Url":"https://github.com/dotnet/roslyn/pull/33954","RelatedDescription":"Open PR \"Readonly members emit changes\" (#33954)"},{"Id":"418554148","IsPullRequest":false,"CreatedAt":"2019-03-07T22:59:10","Actor":"ivanbasov","Number":"33953","RawContent":null,"Title":"Complete Statement should not move semicolons through \"[\" and \"]\"","State":"open","Body":"![completestatement](https://user-images.githubusercontent.com/5455484/53995100-e16b3280-40e8-11e9-8d15-5b4a09113e5e.gif)\r\n\r\n1. Have a method with an attribute.\r\n2. Try to define a field above the method.\r\n3. Typing a semicolon moves it after the attribute which is confusing.\r\n\r\nThis happens because before the semicolon is typed, the `[Attribute]` is parsed as `ElementAccessExpression `and belongs to the field definition.\r\n\r\nSource: https://developercommunity.visualstudio.com/content/problem/481019/atrocious-typing-help.html\r\n\r\nI hope that the user used custom Roslyn bits and this is not shipped yet for 16.0 but need to verify with the user.","Url":"https://github.com/dotnet/roslyn/issues/33953","RelatedDescription":"Open issue \"Complete Statement should not move semicolons through \"[\" and \"]\"\" (#33953)"},{"Id":"418546180","IsPullRequest":false,"CreatedAt":"2019-03-07T22:35:33","Actor":"gafter","Number":"33952","RawContent":null,"Title":"Please reorder NullableAnnotation values to be in lattice order","State":"open","Body":"The values of NullableAnnotation are not in the order that they appear in the lattice.  Please reorder them so that they are in lattice order; that would permit a much simpler implementation of Meet and Join.","Url":"https://github.com/dotnet/roslyn/issues/33952","RelatedDescription":"Open issue \"Please reorder NullableAnnotation values to be in lattice order\" (#33952)"},{"Id":"418538476","IsPullRequest":true,"CreatedAt":"2019-03-07T22:14:25","Actor":"jcouv","Number":"33951","RawContent":null,"Title":"Allow stack-only types in stackalloc","State":"open","Body":"## Customer scenario\r\nIn 16.0 preview3, we accidentally disallowed stack-only types in stackalloc. This PR restores the previous behavior.\r\n\r\n## Bugs this fixes\r\nFixes https://github.com/dotnet/roslyn/issues/33945\r\n\r\n## Workarounds, if any\r\nNone\r\n\r\n## Risk, Performance impact\r\nLow. We're just skipping an unnecessary check for stackallocated arrays.\r\n\r\n## Is this a regression from a previous update?\r\nYes, this bug was introduced in 16.0 preview3.\r\n\r\n## Root cause analysis\r\nWhile fixing an issue related to arrays, we factored some code too aggressively. The check that prevents restricted types in array types started applying to stackalloc arrays too.\r\n\r\n## How was the bug found?\r\nReported by customer.\r\n\r\n----\r\n\r\nFilled https://devdiv.visualstudio.com/DevDiv/_workitems/edit/815087/ for ask-mode approval.","Url":"https://github.com/dotnet/roslyn/pull/33951","RelatedDescription":"Open PR \"Allow stack-only types in stackalloc\" (#33951)"},{"Id":"418535091","IsPullRequest":true,"CreatedAt":"2019-03-07T22:05:15","Actor":"agocke","Number":"33950","RawContent":null,"Title":"Confirm suppression for ref/out/in parameters","State":"open","Body":"Ref and out parameters with suppression should change the nullable state\r\nfor the argument being suppressed. Moreover, the changes should flow\r\nthrough type inference.\r\n\r\nCloses #27743","Url":"https://github.com/dotnet/roslyn/pull/33950","RelatedDescription":"Open PR \"Confirm suppression for ref/out/in parameters\" (#33950)"},{"Id":"418524154","IsPullRequest":false,"CreatedAt":"2019-03-07T21:36:08","Actor":"333fred","Number":"33949","RawContent":null,"Title":"Unused Assignment false positive","State":"open","Body":"https://github.com/dotnet/roslyn/blob/master/src/Compilers/CSharp/Portable/FlowAnalysis/NullableWalker.cs#L3893\r\n\r\nThis is flagged as an unused assignment, but it is used.\r\n\r\nUpdate: I got a minimal repro, which requires a conditional expression as an argument prior to the read.\r\n\r\n```csharp\r\nclass A\r\n{\r\n    public static void M(int? x)\r\n    {\r\n        A a = new A();\r\n        a = M2(x ?? 1, a);\r\n    }\r\n\r\n    private static A M2(int? x, A a)\r\n    {\r\n        return a;\r\n    }\r\n}\r\n```","Url":"https://github.com/dotnet/roslyn/issues/33949","RelatedDescription":"Open issue \"Unused Assignment false positive\" (#33949)"},{"Id":"418413682","IsPullRequest":true,"CreatedAt":"2019-03-07T21:09:37","Actor":"cston","Number":"33942","RawContent":null,"Title":"Copy nullable state from a limited set of BoundExpression types only","State":"closed","Body":"Reverts fix for #31395 for now.\r\n\r\nFixes #33908.","Url":"https://github.com/dotnet/roslyn/pull/33942","RelatedDescription":"Closed or merged PR \"Copy nullable state from a limited set of BoundExpression types only\" (#33942)"},{"Id":"418478549","IsPullRequest":true,"CreatedAt":"2019-03-07T19:37:11","Actor":"sharwell","Number":"33948","RawContent":null,"Title":"Implement Find Symbol References API for Razor","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/33948","RelatedDescription":"Open PR \"Implement Find Symbol References API for Razor\" (#33948)"},{"Id":"418474064","IsPullRequest":true,"CreatedAt":"2019-03-07T19:25:34","Actor":"jaredpar","Number":"33947","RawContent":null,"Title":"Move to BYOC pools","State":"open","Body":"This changes our pipelines to use the BYOC (Bring Your Own Cloud) pools\r\nhosed by the core engineering team. This is a dynamic queue which should\r\nscale better for our uses than the static pools we are using today.","Url":"https://github.com/dotnet/roslyn/pull/33947","RelatedDescription":"Open PR \"Move to BYOC pools\" (#33947)"},{"Id":"418436236","IsPullRequest":true,"CreatedAt":"2019-03-07T19:19:42","Actor":"jaredpar","Number":"33943","RawContent":null,"Title":"Enable roll forward in our .NET Core exes","State":"closed","Body":"This changes our build to mark all of our .NET Core applications as\r\nrolling forward on major / minor versions of the .NET framework.\r\nPresently our tools ship inside both .NET Core 2 and 3 SDKs. This\r\nsetting allows our tools to run unmodified in both settings.","Url":"https://github.com/dotnet/roslyn/pull/33943","RelatedDescription":"Closed or merged PR \"Enable roll forward in our .NET Core exes\" (#33943)"},{"Id":"418452632","IsPullRequest":true,"CreatedAt":"2019-03-07T18:29:59","Actor":"sharwell","Number":"33946","RawContent":null,"Title":"Add AssertEx.EqualOrDiff","State":"open","Body":"Based on work by @AArnott in dotnet/roslyn-sdk#240.\r\n","Url":"https://github.com/dotnet/roslyn/pull/33946","RelatedDescription":"Open PR \"Add AssertEx.EqualOrDiff\" (#33946)"},{"Id":"418441534","IsPullRequest":false,"CreatedAt":"2019-03-07T18:00:22","Actor":"dlech","Number":"33945","RawContent":null,"Title":"Regression in stackalloc array of ref struct (dotnet core 3 preview 3)","State":"open","Body":"This sample code builds successfully in dotnet core 3 preview 2 and earlier (including dotent core 2.x) but fails in dotnet core 3 preview 3\r\n\r\n### test.csproj\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netstandard2.0</TargetFramework>\r\n    <LangVersion>8.0</LangVersion>\r\n    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```\r\n\r\n### Class1.cs\r\n```C#\r\nusing System;\r\nusing System.Runtime.InteropServices;\r\n\r\nnamespace test\r\n{\r\n    ref struct S\r\n    {\r\n    }\r\n\r\n    public class Class1\r\n    {\r\n        public unsafe void M()\r\n        {\r\n            var x = stackalloc S[10];\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n### dotnet core 3 preview 2\r\n```\r\n$ dotnet build\r\nMicrosoft (R) Build Engine version 16.0.385-preview+g966cdf2ac6 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restoring packages for /home/david/tmp/test/test.csproj...\r\n  Restore completed in 115.53 ms for /home/david/tmp/test/test.csproj.\r\n/home/david/bin/dotnet2/sdk/3.0.100-preview-010184/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.RuntimeIdentifierInference.targets(151,5): message NETSDK1057: You are using a preview version of .NET Core. See: https://aka.ms/dotnet-core-preview [/home/david/tmp/test/test.csproj]\r\n  test -> /home/david/tmp/test/bin/Debug/netstandard2.0/test.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:00:01.22\r\n```\r\n\r\n### dotnet core 3 preview 3\r\n```\r\n$ dotnet build\r\nMicrosoft (R) Build Engine version 16.0.443+g5775d0d6bb for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Persisting no-op dg to /home/david/tmp/test/obj/test.csproj.nuget.dgspec.json\r\n  Restore completed in 127.26 ms for /home/david/tmp/test/test.csproj.\r\n/home/david/bin/dotnet/sdk/3.0.100-preview3-010431/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.RuntimeIdentifierInference.targets(151,5): message NETSDK1057: You are using a preview version of .NET Core. See: https://aka.ms/dotnet-core-preview [/home/david/tmp/test/test.csproj]\r\nClass1.cs(14,32): error CS0611: Array elements cannot be of type 'S' [/home/david/tmp/test/test.csproj]\r\n\r\nBuild FAILED.\r\n\r\nClass1.cs(14,32): error CS0611: Array elements cannot be of type 'S' [/home/david/tmp/test/test.csproj]\r\n    0 Warning(s)\r\n    1 Error(s)\r\n\r\nTime Elapsed 00:00:01.21\r\n```\r\n\r\nPerhaps this is an unintended side effect of https://github.com/dotnet/roslyn/commit/0bee0256433301dabf1f5f2301375f4606ccaf32#diff-ef3f78219358a0705f76762ce80bb8c8?","Url":"https://github.com/dotnet/roslyn/issues/33945","RelatedDescription":"Open issue \"Regression in stackalloc array of ref struct (dotnet core 3 preview 3)\" (#33945)"},{"Id":"418437754","IsPullRequest":false,"CreatedAt":"2019-03-07T17:51:11","Actor":"JoeRobich","Number":"33944","RawContent":null,"Title":"Build.cmd tries to build ibc training data when run locally","State":"open","Body":"Steps to reproduce\r\n- Check out master\r\n- Run git clean -xfd\r\n- Run Restore.cmd\r\n- Run Build.cmd\r\n\r\n```\r\n~\\source\\repos\\roslyn-alt [master ≡]> .\\Build.cmd\r\nRoslyn.sln:\r\n  RunTests -> C:\\Users\\jorobich\\source\\repos\\roslyn-alt\\artifacts\\bin\\RunTests\\Debug\\net472\\RunTests.exe\r\n  CompilersBoundTreeGenerator -> C:\\Users\\jorobich\\source\\repos\\roslyn-alt\\artifacts\\bin\\CompilersBoundTreeGenerator\\x6\r\n  4\\Debug\\netcoreapp2.1\\BoundTreeGenerator.dll\r\n\r\n...\r\n\r\n  Microsoft.VisualStudio.IntegrationTest.Setup -> C:\\Users\\jorobich\\source\\repos\\roslyn-alt\\artifacts\\VSSetup\\Debug\\Mic\r\n  rosoft.VisualStudio.IntegrationTest.Setup.vsix\r\n  Microsoft.VisualStudio.LanguageServices.IntegrationTests -> C:\\Users\\jorobich\\source\\repos\\roslyn-alt\\artifacts\\bin\\M\r\n  icrosoft.VisualStudio.LanguageServices.IntegrationTests\\Debug\\net472\\Microsoft.VisualStudio.LanguageServices.Integrat\r\n  ionTests.dll\r\nC:\\Users\\jorobich\\.nuget\\packages\\microsoft.dotnet.arcade.sdk\\1.0.0-beta.19127.8\\tools\\VisualStudio.BuildIbcTrainingInp\r\nuts.targets(11,5): error MSB4018: The \"GenerateTrainingInputFiles\" task failed unexpectedly. [C:\\Users\\jorobich\\.nuget\\\r\npackages\\microsoft.dotnet.arcade.sdk\\1.0.0-beta.19127.8\\tools\\AfterSigning.proj]\r\nC:\\Users\\jorobich\\.nuget\\packages\\microsoft.dotnet.arcade.sdk\\1.0.0-beta.19127.8\\tools\\VisualStudio.BuildIbcTrainingInp\r\nuts.targets(11,5): error MSB4018: System.IO.DirectoryNotFoundException: Could not find a part of the path 'C:\\Users\\jor\r\nobich\\source\\repos\\roslyn-alt\\artifacts\\OptProf\\Debug\\Data\\XamlOptProf\\Configurations\\Microsoft.Test.Performance.XamlOp\r\ntProfCreateTests.UwpCreateProject_DesignerIsolated\\csMicrosoft.VisualStudio.LanguageServices.SolutionExplorer.resources\r\n.0.IBC.json'. [C:\\Users\\jorobich\\.nuget\\packages\\microsoft.dotnet.arcade.sdk\\1.0.0-beta.19127.8\\tools\\AfterSigning.proj\r\n]\r\nC:\\Users\\jorobich\\.nuget\\packages\\microsoft.dotnet.arcade.sdk\\1.0.0-beta.19127.8\\tools\\VisualStudio.BuildIbcTrainingInp\r\nuts.targets(11,5): error MSB4018:    at System.IO.__Error.WinIOError(Int32 errorCode, String maybeFullPath) [C:\\Users\\j\r\norobich\\.nuget\\packages\\microsoft.dotnet.arcade.sdk\\1.0.0-beta.19127.8\\tools\\AfterSigning.proj]\r\nC:\\Users\\jorobich\\.nuget\\packages\\microsoft.dotnet.arcade.sdk\\1.0.0-beta.19127.8\\tools\\VisualStudio.BuildIbcTrainingInp\r\nuts.targets(11,5): error MSB4018:    at System.IO.FileStream.Init(String path, FileMode mode, FileAccess access, Int32\r\nrights, Boolean useRights, FileShare share, Int32 bufferSize, FileOptions options, SECURITY_ATTRIBUTES secAttrs, String\r\n msgPath, Boolean bFromProxy, Boolean useLongPath, Boolean checkHost) [C:\\Users\\jorobich\\.nuget\\packages\\microsoft.dotn\r\net.arcade.sdk\\1.0.0-beta.19127.8\\tools\\AfterSigning.proj]\r\nC:\\Users\\jorobich\\.nuget\\packages\\microsoft.dotnet.arcade.sdk\\1.0.0-beta.19127.8\\tools\\VisualStudio.BuildIbcTrainingInp\r\nuts.targets(11,5): error MSB4018:    at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileS\r\nhare share) [C:\\Users\\jorobich\\.nuget\\packages\\microsoft.dotnet.arcade.sdk\\1.0.0-beta.19127.8\\tools\\AfterSigning.proj]\r\nC:\\Users\\jorobich\\.nuget\\packages\\microsoft.dotnet.arcade.sdk\\1.0.0-beta.19127.8\\tools\\VisualStudio.BuildIbcTrainingInp\r\nuts.targets(11,5): error MSB4018:    at Microsoft.DotNet.Build.Tasks.VisualStudio.GenerateTrainingInputFiles.WriteEntri\r\nes(IbcEntry[] ibcEntries, String outDir) in /_/src/Microsoft.DotNet.Build.Tasks.VisualStudio/OptProf/GenerateTrainingIn\r\nputFiles.cs:line 144 [C:\\Users\\jorobich\\.nuget\\packages\\microsoft.dotnet.arcade.sdk\\1.0.0-beta.19127.8\\tools\\AfterSigni\r\nng.proj]\r\nC:\\Users\\jorobich\\.nuget\\packages\\microsoft.dotnet.arcade.sdk\\1.0.0-beta.19127.8\\tools\\VisualStudio.BuildIbcTrainingInp\r\nuts.targets(11,5): error MSB4018:    at Microsoft.DotNet.Build.Tasks.VisualStudio.GenerateTrainingInputFiles.WriteEntri\r\nes(OptProfTrainingTest[] tests, IbcEntry[] ibcEntries) in /_/src/Microsoft.DotNet.Build.Tasks.VisualStudio/OptProf/Gene\r\nrateTrainingInputFiles.cs:line 122 [C:\\Users\\jorobich\\.nuget\\packages\\microsoft.dotnet.arcade.sdk\\1.0.0-beta.19127.8\\to\r\nols\\AfterSigning.proj]\r\nC:\\Users\\jorobich\\.nuget\\packages\\microsoft.dotnet.arcade.sdk\\1.0.0-beta.19127.8\\tools\\VisualStudio.BuildIbcTrainingInp\r\nuts.targets(11,5): error MSB4018:    at Microsoft.DotNet.Build.Tasks.VisualStudio.GenerateTrainingInputFiles.ExecuteImp\r\nl() in /_/src/Microsoft.DotNet.Build.Tasks.VisualStudio/OptProf/GenerateTrainingInputFiles.cs:line 84 [C:\\Users\\jorobic\r\nh\\.nuget\\packages\\microsoft.dotnet.arcade.sdk\\1.0.0-beta.19127.8\\tools\\AfterSigning.proj]\r\nC:\\Users\\jorobich\\.nuget\\packages\\microsoft.dotnet.arcade.sdk\\1.0.0-beta.19127.8\\tools\\VisualStudio.BuildIbcTrainingInp\r\nuts.targets(11,5): error MSB4018:    at Microsoft.DotNet.Build.Tasks.VisualStudio.GenerateTrainingInputFiles.Execute()\r\nin /_/src/Microsoft.DotNet.Build.Tasks.VisualStudio/OptProf/GenerateTrainingInputFiles.cs:line 42 [C:\\Users\\jorobich\\.n\r\nuget\\packages\\microsoft.dotnet.arcade.sdk\\1.0.0-beta.19127.8\\tools\\AfterSigning.proj]\r\nC:\\Users\\jorobich\\.nuget\\packages\\microsoft.dotnet.arcade.sdk\\1.0.0-beta.19127.8\\tools\\VisualStudio.BuildIbcTrainingInp\r\nuts.targets(11,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutio\r\nnHost.Execute() [C:\\Users\\jorobich\\.nuget\\packages\\microsoft.dotnet.arcade.sdk\\1.0.0-beta.19127.8\\tools\\AfterSigning.pr\r\noj]\r\nC:\\Users\\jorobich\\.nuget\\packages\\microsoft.dotnet.arcade.sdk\\1.0.0-beta.19127.8\\tools\\VisualStudio.BuildIbcTrainingInp\r\nuts.targets(11,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskBuilder.<ExecuteInstantiatedTask>d__26.MoveNext() [\r\nC:\\Users\\jorobich\\.nuget\\packages\\microsoft.dotnet.arcade.sdk\\1.0.0-beta.19127.8\\tools\\AfterSigning.proj]\r\n\r\nBuild succeeded.\r\n```","Url":"https://github.com/dotnet/roslyn/issues/33944","RelatedDescription":"Open issue \"Build.cmd tries to build ibc training data when run locally\" (#33944)"},{"Id":"418410982","IsPullRequest":false,"CreatedAt":"2019-03-07T16:50:09","Actor":"cston","Number":"33941","RawContent":null,"Title":"Remove BoundExpressionExtensions.GetTypeAndNullability and GetNullableAnnotation","State":"open","Body":"Remove `BoundExpressionExtensions.GetTypeAndNullability` and `BoundExpressionExtensions.GetNullableAnnotation`.\r\n\r\nThe methods are only used for setting the nullability of inferred locals in initial binding, but initial binding should not infer nullability.","Url":"https://github.com/dotnet/roslyn/issues/33941","RelatedDescription":"Open issue \"Remove BoundExpressionExtensions.GetTypeAndNullability and GetNullableAnnotation\" (#33941)"},{"Id":"418390324","IsPullRequest":true,"CreatedAt":"2019-03-07T16:08:04","Actor":"v-mdriml","Number":"33940","RawContent":null,"Title":"LOC CHECKIN | dotnet/roslyn dev16.0-vs-deps | 20190307","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/33940","RelatedDescription":"Open PR \"LOC CHECKIN | dotnet/roslyn dev16.0-vs-deps | 20190307\" (#33940)"},{"Id":"418341267","IsPullRequest":false,"CreatedAt":"2019-03-07T14:33:07","Actor":"akarpov89","Number":"33939","RawContent":null,"Title":"Consider new warning for unobserved async-iterator call","State":"open","Body":"**Version Used**: \r\n3.0.19.12206 (ec366687)\r\n\r\n**Steps to Reproduce**:\r\nCompile the following code:\r\n```csharp\r\nusing System.Collections.Generic;\r\nusing System.Threading.Tasks;\r\n\r\nclass C\r\n{\r\n  async IAsyncEnumerable<int> ProduceAsync()\r\n  {\r\n    await Task.CompletedTask;\r\n    yield return 42;\r\n  }\r\n\r\n  void Consume()\r\n  {\r\n    ProduceAsync(); // currently emits WRN_UnobservedAwaitableExpression\r\n  }\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\n\r\nEmit new warning with text like \"Because result of asynchronous iterator call is not being iterated, execution of the current method continues before the call is completed. Consider using the 'await foreach' over the result of the call.\" For async-iterators returning `IAsyncEnumerator<T>` the second sentence may be omitted. Or maybe you'll come up with better wording which will work for both cases :)\r\n\r\n**Actual Behavior**:\r\n\r\nThe warning \"CS4014: Because this call is not awaited, execution of the current method continues before the call is completed. Consider applying the 'await' operator to the result of the call\" is emitted. But it's somewhat misleading.","Url":"https://github.com/dotnet/roslyn/issues/33939","RelatedDescription":"Open issue \"Consider new warning for unobserved async-iterator call\" (#33939)"},{"Id":"418336706","IsPullRequest":true,"CreatedAt":"2019-03-07T14:23:48","Actor":"sharwell","Number":"33938","RawContent":null,"Title":"Fix several outstanding small formatter bugs","State":"open","Body":"🚧 In progress.\r\n\r\n📝 I can break this pull request up on request.\r\n\r\n* `NewLineForElse` must check parent of preceding brace (fixes #33458)\r\n* Fix spacing before parameter list for conversion operators (fixes #31571, fixes #33910)","Url":"https://github.com/dotnet/roslyn/pull/33938","RelatedDescription":"Open PR \"Fix several outstanding small formatter bugs\" (#33938)"},{"Id":"418321058","IsPullRequest":false,"CreatedAt":"2019-03-07T13:54:49","Actor":"jnm2","Number":"33937","RawContent":null,"Title":"IDE0059 doesn't realize assignment before rethrow is read in finally block","State":"open","Body":"**Version Used**: VS 2019 RC.1 SVC 1\r\n\r\n```cs\r\nusing System;\r\n\r\npublic static class Program\r\n{\r\n    public static void Main()\r\n    {\r\n        try\r\n        {\r\n            Test();\r\n        }\r\n        catch (Exception)\r\n        {\r\n        }\r\n    }\r\n\r\n    public static void Test()\r\n    {\r\n        var exceptionThrown = false;\r\n        try\r\n        {\r\n            throw new Exception();\r\n        }\r\n        catch\r\n        {\r\n            // The `exceptionThrown` token is incorrectly greyed out in the IDE\r\n            // IDE0059 Value assigned to 'exceptionThrown' is never used\r\n            exceptionThrown = true;\r\n            throw;\r\n        }\r\n        finally\r\n        {\r\n            // Breakpoint on this line is hit and 'true' is printed\r\n            Console.WriteLine(exceptionThrown);\r\n        }\r\n    }\r\n}\r\n```\r\n","Url":"https://github.com/dotnet/roslyn/issues/33937","RelatedDescription":"Open issue \"IDE0059 doesn't realize assignment before rethrow is read in finally block\" (#33937)"},{"Id":"418274119","IsPullRequest":true,"CreatedAt":"2019-03-07T13:30:06","Actor":"dotnet-bot","Number":"33936","RawContent":null,"Title":"Merge master to features/readonly-members","State":"closed","Body":"\nThis is an automatically generated pull request from master into features/readonly-members.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/readonly-members\ngit reset --hard upstream/features/readonly-members\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/readonly-members --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/33936","RelatedDescription":"Closed or merged PR \"Merge master to features/readonly-members\" (#33936)"}],"ResultType":"GitHubIssue"},"CoreRT-Issues":{"Issues":[{"Id":"418103302","IsPullRequest":true,"CreatedAt":"2019-03-08T01:54:42","Actor":"sergiy-k","Number":"7127","RawContent":null,"Title":"Unify invocation of build and test scripts on all platforms","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7127","RelatedDescription":"Closed or merged PR \"Unify invocation of build and test scripts on all platforms\" (#7127)"},{"Id":"418545076","IsPullRequest":true,"CreatedAt":"2019-03-07T22:32:35","Actor":"Dotnet-GitSync-Bot","Number":"7130","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"open","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7130","RelatedDescription":"Open PR \"Mirror changes from dotnet/coreclr\" (#7130)"},{"Id":"418517828","IsPullRequest":false,"CreatedAt":"2019-03-07T21:19:46","Actor":"tonerdo","Number":"7129","RawContent":null,"Title":"[Interpreter] Implement newobj opcode","State":"open","Body":"I'm working on adding support for the `newobj` opcode and I think I might need some help.\r\n\r\nHere's what I'm doing:\r\n\r\n* Retrieve the constructor and its owning type\r\n  ```csharp\r\n  MethodDesc constructor = (MethodDesc)_methodIL.GetObject(token);\r\n  TypeDesc owningType = constructor.OwningType;\r\n  ```\r\n* Create a zero-initialized object from the owning type\r\n  ```csharp\r\n  object @this = RuntimeAugments.NewObject(owningType.GetRuntimeTypeHandle());\r\n  ```\r\n* Call the dynamic invoke method to invoke the constructor\r\n  ```csharp\r\n  object obj = RuntimeAugments.CallDynamicInvokeMethod(\r\n                thisPtr: @this,\r\n                methodToCall: constructor.FunctionPointer,\r\n                thisPtrDynamicInvokeMethod: null,\r\n                dynamicInvokeHelperMethod: IntPtr.Zero,\r\n                dynamicInvokeHelperGenericDictionary: IntPtr.Zero,\r\n                defaultParametersContext: null,\r\n                parameters: arguments,\r\n                binderBundle: null,\r\n                wrapInTargetInvocationException: true,\r\n                invokeMethodHelperIsThisCall: false,\r\n                methodToCallIsThisCall: true);\r\n  ```\r\n\r\nHere are the problems I'm having:\r\n\r\n* `constructor.FunctionPointer` always returns `IntPtr.Zero` and I've not been to figure out how to get a `RuntimeMethodHandle` from `constructor`\r\n* After taking a look at the invokers in the Reflection package, I came to the conclusion that I have to pass in non-zero pointers for  `dynamicInvokeHelperMethod` and `defaultParametersContext`. However, it's not immediately clear what these methods do and where they come from.\r\n\r\ncc @MichalStrehovsky @jkotas ","Url":"https://github.com/dotnet/corert/issues/7129","RelatedDescription":"Open issue \"[Interpreter] Implement newobj opcode\" (#7129)"},{"Id":"418468163","IsPullRequest":true,"CreatedAt":"2019-03-07T20:32:04","Actor":"Dotnet-GitSync-Bot","Number":"7128","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @hughbe","Url":"https://github.com/dotnet/corert/pull/7128","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7128)"},{"Id":"417999683","IsPullRequest":true,"CreatedAt":"2019-03-07T05:25:17","Actor":"Dotnet-GitSync-Bot","Number":"7126","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @ViktorHofer @dotnet-maestro[bot] @shadow-cs @marek-safar @maryamariyan @stephentoub @tannergooding","Url":"https://github.com/dotnet/corert/pull/7126","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7126)"},{"Id":"417589050","IsPullRequest":true,"CreatedAt":"2019-03-07T01:53:12","Actor":"sergiy-k","Number":"7125","RawContent":null,"Title":"Add scripts to set up CI with Azure Pipelines for Linux","State":"closed","Body":"This adds support for building and testing Pull Requests in Ubuntu docker containers. Note that docker images have all required dependencies preinstalled.","Url":"https://github.com/dotnet/corert/pull/7125","RelatedDescription":"Closed or merged PR \"Add scripts to set up CI with Azure Pipelines for Linux\" (#7125)"},{"Id":"416309160","IsPullRequest":true,"CreatedAt":"2019-03-06T01:46:41","Actor":"nattress","Number":"7107","RawContent":null,"Title":"Re-init tools when init-tools.cmd is updated","State":"closed","Body":"Recent Roslyn compiler version upgrades cause build breaks on existing repos because init-tools will not run if the semaphore file is present.\r\n\r\nEmit the most recent git commit hash of init-tools.cmd to the semaphore and compare the two whenever init-tools.cmd is run. This will catch updates and re-init the tools automatically.\r\n\r\nI can implement a similar change to init-tools.sh if folks don't see a problem with this direction. These build tools are nearing end of life as I understand - it would be nice to also include updates to the CLI and build tools version text files in this logic, too, but this fixes the immediate breaks we've been seeing.","Url":"https://github.com/dotnet/corert/pull/7107","RelatedDescription":"Closed or merged PR \"Re-init tools when init-tools.cmd is updated\" (#7107)"},{"Id":"417511356","IsPullRequest":true,"CreatedAt":"2019-03-06T01:46:30","Actor":"jkotas","Number":"7123","RawContent":null,"Title":"Bump init-tools semaphore name","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7123","RelatedDescription":"Closed or merged PR \"Bump init-tools semaphore name\" (#7123)"},{"Id":"417104642","IsPullRequest":true,"CreatedAt":"2019-03-06T01:03:15","Actor":"sergiy-k","Number":"7120","RawContent":null,"Title":"Add scripts to set up CI with Azure Pipelines for OSX","State":"closed","Body":"This adds support for OSX. To enable CI for Linux I still need to figure out the name of docker containers (or a machine pool) to use. \r\nThe eng/install-native-dependencies.sh file has been copied from the CoreCLR repo.","Url":"https://github.com/dotnet/corert/pull/7120","RelatedDescription":"Closed or merged PR \"Add scripts to set up CI with Azure Pipelines for OSX\" (#7120)"},{"Id":"417533540","IsPullRequest":true,"CreatedAt":"2019-03-05T22:34:25","Actor":"sergiy-k","Number":"7124","RawContent":null,"Title":"[WIP] Test performance of another CI machine pool","State":"open","Body":"This is just a test","Url":"https://github.com/dotnet/corert/pull/7124","RelatedDescription":"Open PR \"[WIP] Test performance of another CI machine pool\" (#7124)"},{"Id":"417273432","IsPullRequest":true,"CreatedAt":"2019-03-05T12:26:06","Actor":"MichalStrehovsky","Number":"7122","RawContent":null,"Title":"Merge master to nmirror","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7122","RelatedDescription":"Closed or merged PR \"Merge master to nmirror\" (#7122)"},{"Id":"416834880","IsPullRequest":true,"CreatedAt":"2019-03-05T08:22:10","Actor":"MichalStrehovsky","Number":"7116","RawContent":null,"Title":" Fix native includes ","State":"closed","Body":"Redoes #7057 in a way that doesn't break the closed source world.","Url":"https://github.com/dotnet/corert/pull/7116","RelatedDescription":"Closed or merged PR \" Fix native includes \" (#7116)"},{"Id":"417111320","IsPullRequest":false,"CreatedAt":"2019-03-05T04:28:23","Actor":"trampster","Number":"7121","RawContent":null,"Title":"linux-arm not supported yet.","State":"open","Body":"I'm building with the following command:\r\n\r\n    dotnet publish -c Release -r linux-arm --self-contained true\r\n\r\nI'm getting the follow message when trying to build for linux arm:\r\n\r\n    /.nuget/packages/microsoft.dotnet.ilcompiler/1.0.0-alpha-27505-01/build/Microsoft.NETCore.Native.Publish.targets(65,5): error : linux-arm not supported yet. https://github.com/dotnet/corert/issues/4589\r\n\r\nThat issue link is about x86....\r\n\r\nThe readme says that Linux ARM is supported w/ RyuJIT codegen\r\n\r\n\r\n","Url":"https://github.com/dotnet/corert/issues/7121","RelatedDescription":"Open issue \"linux-arm not supported yet.\" (#7121)"},{"Id":"417064429","IsPullRequest":false,"CreatedAt":"2019-03-05T01:47:28","Actor":"DoCode","Number":"7119","RawContent":null,"Title":"No assembly metadata is written in native output","State":"closed","Body":"It's no assembly metadata like file versions, languages, company names, product name etc.\r\n\r\nHow can this be included when compiling?","Url":"https://github.com/dotnet/corert/issues/7119","RelatedDescription":"Closed issue \"No assembly metadata is written in native output\" (#7119)"},{"Id":"416784344","IsPullRequest":true,"CreatedAt":"2019-03-04T17:41:37","Actor":"MichalStrehovsky","Number":"7115","RawContent":null,"Title":"Fix ProjectN build breaks","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7115","RelatedDescription":"Closed or merged PR \"Fix ProjectN build breaks\" (#7115)"},{"Id":"416849166","IsPullRequest":true,"CreatedAt":"2019-03-04T17:31:33","Actor":"MichalStrehovsky","Number":"7117","RawContent":null,"Title":"Remove TypeConverter entries in WebApi sample","State":"closed","Body":"These didn't appear to be needed last time I was playing with this.\r\n\r\nWe are basically down to one entry. This entry is especially annoying because it shows up every time someone wants to use LINQ expressions. Couple options:\r\n\r\n* Add a really dumb peephole IL scanner to `UsageBasedMetadataManager` a la mono/linker#223\r\n* Decide that we want an actual RD.XML parser. The embedded RD.XML manifest in System.Linq.Expressions has a line that covers this scenario. BUT: RD.XML has the unfortunate property of: not requiring types to be assembly-qualified, and requiring a whole program analysis for a bunch of constructs. Plus my motivation to write yet another type name parser is pretty low.","Url":"https://github.com/dotnet/corert/pull/7117","RelatedDescription":"Closed or merged PR \"Remove TypeConverter entries in WebApi sample\" (#7117)"},{"Id":"416882637","IsPullRequest":false,"CreatedAt":"2019-03-04T16:25:13","Actor":"filipnavara","Number":"7118","RawContent":null,"Title":"Abort trap: 6 on CoreFX / macOS","State":"open","Body":"There is recurring problem with macOS / CoreFX test builds on the CI:\r\n\r\n```\r\n07:35:02 Discovering: System.Collections.Tests\r\n07:35:03 Discovered:  System.Collections.Tests\r\n07:35:08 Starting:    System.Collections.Tests\r\n07:35:09    System.Collections.Tests.Dictionary_IDictionary_NonGeneric_Tests.ICollection_NonGeneric_CopyTo_NonZeroLowerBound [SKIP]\r\n07:35:09       Condition(s) not met: \\\"IsNonZeroLowerBoundArraySupported\\\"\r\n07:35:13    System.Collections.Tests.SortedList_Generic_Tests_Keys_AsICollection.ICollection_NonGeneric_CopyTo_NonZeroLowerBound [SKIP]\r\n07:35:13       Condition(s) not met: \\\"IsNonZeroLowerBoundArraySupported\\\"\r\n07:35:21    System.Collections.Tests.Queue_ICollection_NonGeneric_Tests.ICollection_NonGeneric_CopyTo_NonZeroLowerBound [SKIP]\r\n07:35:21       Condition(s) not met: \\\"IsNonZeroLowerBoundArraySupported\\\"\r\n07:35:30    System.Collections.Tests.SortedDictionary_Generic_Tests_Keys_AsICollection.ICollection_NonGeneric_CopyTo_NonZeroLowerBound [SKIP]\r\n07:35:30       Condition(s) not met: \\\"IsNonZeroLowerBoundArraySupported\\\"\r\n07:37:36 /Users/dotnet-bot/j/workspace/dotnet_corert/master/debug_osx10.12_corefx_prtest/tests/CoreFX/corerun: line 75: 88337 Abort trap: 6           ${TestFolderName}/native/${TestExecutable} ${TestFolderName}/${TestFileName}.dll @${TestFolderName}/${TestFileName}.rsp -xml ${LogDir}/${TestFileName}/testResults.xml -notrait category=nonnetcoreapptests -notrait category=${OSCategory} -notrait category=failing\r\n```\r\n\r\nPRs: \r\n#7115 (https://ci.dot.net/job/dotnet_corert/job/master/job/debug_osx10.12_corefx_prtest/1578/consoleFull#-8536224876a086b3e-df04-41d2-bc4d-43e8f9406d07)\r\n#7116 (https://ci.dot.net/job/dotnet_corert/job/master/job/debug_osx10.12_corefx_prtest/1576/consoleFull#-8536224876a086b3e-df04-41d2-bc4d-43e8f9406d07)\r\n#7089\r\n(https://ci.dot.net/job/dotnet_corert/job/master/job/debug_osx10.12_corefx_prtest/1539/consoleFull#-8536224876a086b3e-df04-41d2-bc4d-43e8f9406d07)\r\n","Url":"https://github.com/dotnet/corert/issues/7118","RelatedDescription":"Open issue \"Abort trap: 6 on CoreFX / macOS\" (#7118)"},{"Id":"416440240","IsPullRequest":true,"CreatedAt":"2019-03-03T14:27:45","Actor":"marek-safar","Number":"7111","RawContent":null,"Title":"Move fully managed TimerQueue implementation to shared partition","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7111","RelatedDescription":"Closed or merged PR \"Move fully managed TimerQueue implementation to shared partition\" (#7111)"},{"Id":"416503419","IsPullRequest":true,"CreatedAt":"2019-03-03T14:25:19","Actor":"Dotnet-GitSync-Bot","Number":"7114","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas","Url":"https://github.com/dotnet/corert/pull/7114","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7114)"},{"Id":"416462154","IsPullRequest":true,"CreatedAt":"2019-03-03T05:39:41","Actor":"Dotnet-GitSync-Bot","Number":"7113","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @marek-safar","Url":"https://github.com/dotnet/corert/pull/7113","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#7113)"},{"Id":"416446656","IsPullRequest":true,"CreatedAt":"2019-03-02T23:48:21","Actor":"Dotnet-GitSync-Bot","Number":"7112","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @grant-d","Url":"https://github.com/dotnet/corert/pull/7112","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7112)"},{"Id":"416433266","IsPullRequest":true,"CreatedAt":"2019-03-02T21:09:54","Actor":"Dotnet-GitSync-Bot","Number":"7110","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @marek-safar","Url":"https://github.com/dotnet/corert/pull/7110","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7110)"},{"Id":"416378646","IsPullRequest":true,"CreatedAt":"2019-03-02T13:24:42","Actor":"Dotnet-GitSync-Bot","Number":"7109","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas","Url":"https://github.com/dotnet/corert/pull/7109","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7109)"},{"Id":"416322845","IsPullRequest":true,"CreatedAt":"2019-03-02T03:30:03","Actor":"Dotnet-GitSync-Bot","Number":"7108","RawContent":null,"Title":"Mirror changes from dotnet/corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas","Url":"https://github.com/dotnet/corert/pull/7108","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx\" (#7108)"},{"Id":"416306984","IsPullRequest":true,"CreatedAt":"2019-03-01T23:19:54","Actor":"Dotnet-GitSync-Bot","Number":"7106","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @Foxtrek64 @marek-safar","Url":"https://github.com/dotnet/corert/pull/7106","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7106)"},{"Id":"416188816","IsPullRequest":true,"CreatedAt":"2019-03-01T19:13:09","Actor":"Dotnet-GitSync-Bot","Number":"7105","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @morganbr","Url":"https://github.com/dotnet/corert/pull/7105","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7105)"},{"Id":"415951984","IsPullRequest":true,"CreatedAt":"2019-03-01T06:57:37","Actor":"Dotnet-GitSync-Bot","Number":"7104","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @GrabYourPitchforks","Url":"https://github.com/dotnet/corert/pull/7104","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7104)"},{"Id":"415926456","IsPullRequest":true,"CreatedAt":"2019-03-01T03:40:12","Actor":"Dotnet-GitSync-Bot","Number":"7103","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @AaronRobinsonMSFT","Url":"https://github.com/dotnet/corert/pull/7103","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7103)"},{"Id":"415886006","IsPullRequest":true,"CreatedAt":"2019-03-01T03:31:00","Actor":"Dotnet-GitSync-Bot","Number":"7102","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @tannergooding","Url":"https://github.com/dotnet/corert/pull/7102","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7102)"},{"Id":"415870437","IsPullRequest":true,"CreatedAt":"2019-02-28T23:29:29","Actor":"Dotnet-GitSync-Bot","Number":"7101","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @AaronRobinsonMSFT","Url":"https://github.com/dotnet/corert/pull/7101","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7101)"}],"ResultType":"GitHubIssue"},"SDK-Issues":{"Issues":[{"Id":"418571115","IsPullRequest":true,"CreatedAt":"2019-03-08T00:01:52","Actor":"dotnet-bot","Number":"3013","RawContent":null,"Title":"Merge release/3.0.1xx to master","State":"open","Body":"\nThis is an automatically generated pull request from release/3.0.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3013","RelatedDescription":"Open PR \"Merge release/3.0.1xx to master\" (#3013)"},{"Id":"418539657","IsPullRequest":true,"CreatedAt":"2019-03-07T23:28:08","Actor":"dotnet-maestro[bot]","Number":"3012","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19157.4\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19157.4\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3012","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/arcade\" (#3012)"},{"Id":"418538996","IsPullRequest":false,"CreatedAt":"2019-03-07T22:15:49","Actor":"nkolev92","Number":"3011","RawContent":null,"Title":"The SDK should error if a FrameworkReference is not supported for a certain TFM","State":"open","Body":"Came up during the design discussion for FrameworkReference + NuGet. \r\nhttps://github.com/NuGet/Home/issues/7342\r\n\r\nThe SDK should error if a FrameworkReference is not supported for a certain TFM. \r\n\r\n* In the project author case, clearly call out that this is an authoring mistake. \r\n* In the transitive (project/package) case, clearly blame the package/project. \r\n\r\nIt's worth considering how we handle bad framework assemblies. \r\n\r\n//cc @nguerrera","Url":"https://github.com/dotnet/sdk/issues/3011","RelatedDescription":"Open issue \"The SDK should error if a FrameworkReference is not supported for a certain TFM\" (#3011)"},{"Id":"417443376","IsPullRequest":false,"CreatedAt":"2019-03-06T16:38:50","Actor":"nguerrera","Number":"3009","RawContent":null,"Title":"Trouble moving bin/ and obj/ to .bin/ and .obj/","State":"closed","Body":"*Moved from https://github.com/dotnet/project-system/issues/1437#issuecomment-469568035*\r\n\r\n@dzmitry-lahoda wrote:\r\n\r\nNot sure if right thread - but some tooling is wrong...\r\n\r\nSee the line with `ProjectAssetsFile`? If I remove it - my `csproj` fails to build. \r\nWhy I ever need it? My task for to build from VS 2017 and VS Code and from `dotnet` command line into `.bin` and `.obj` because of Unity:(. So I did it. But when VS 2017 opens solution - it generates `obj`. So I did fix which kinda should work.  But got issues - I followed the path, and got into `C:\\Program Files\\dotnet\\sdk\\2.2.102\\Sdks\\Microsoft.NET.Sdk\\targets\\` folder and into `ProjectAssetsFile`. So here is fix:\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <!-- fixing VS 2017 bug which makes it output directory which is not requested -->\r\n  <PropertyGroup>\r\n    <ProjectAssetsFile>$(MSBuildProjectDirectory)\\.obj\\project.assets.json</ProjectAssetsFile>\r\n  </PropertyGroup>\r\n  <PropertyGroup>\r\n      <PreBuildEvent>\r\n       IF EXIST \"$(MSBuildProjectDirectory)\\.obj\\obj\" (\r\n         rmdir \"$(MSBuildProjectDirectory)\\.obj\\obj\" /s /q\r\n       )\r\n       IF EXIST \"$(MSBuildProjectDirectory)\\obj\" (\r\n         move  \"$(MSBuildProjectDirectory)\\obj\" \"$(MSBuildProjectDirectory)\\.obj\"\r\n       )\r\n      </PreBuildEvent>\r\n      \r\n      <PostBuildEvent>\r\n       IF EXIST \"$(MSBuildProjectDirectory)\\.obj\\obj\" (\r\n         rmdir \"$(MSBuildProjectDirectory)\\.obj\\obj\" /s /q\r\n       )\r\n       IF EXIST \"$(MSBuildProjectDirectory)\\obj\" (\r\n         move  \"$(MSBuildProjectDirectory)\\obj\" \"$(MSBuildProjectDirectory)\\.obj\"\r\n       )\r\n      </PostBuildEvent>      \r\n  </PropertyGroup>\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.2</TargetFramework>\r\n    <LangVersion>latest</LangVersion>\r\n    <IsPackable>false</IsPackable>\r\n  </PropertyGroup>\r\n\r\n  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|AnyCPU'\">\r\n    <OutputPath>.bin\\Debug\\</OutputPath>\r\n    <BaseIntermediateOutputPath>.obj\\Debug\\</BaseIntermediateOutputPath>\r\n    <IntermediateOutputPath>.obj\\Debug\\</IntermediateOutputPath>\r\n    <BaseOutputPath>.bin\\Debug\\</BaseOutputPath>\r\n    <UseCommonOutputDirectory>true</UseCommonOutputDirectory>\r\n  </PropertyGroup>\r\n  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|AnyCPU'\">\r\n    <OutputPath>.bin\\Release\\</OutputPath>\r\n    <BaseIntermediateOutputPath>.obj\\Release\\</BaseIntermediateOutputPath>\r\n    <IntermediateOutputPath>.obj\\Release\\</IntermediateOutputPath>\r\n    <BaseOutputPath>.bin\\Release\\</BaseOutputPath>\r\n    <UseCommonOutputDirectory>true</UseCommonOutputDirectory>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"15.9.0\" />\r\n    <PackageReference Include=\"xunit\" Version=\"$(xUnitVersion)\" />\r\n    <PackageReference Include=\"xunit.runner.visualstudio\" Version=\"$(xUnitVersion)\" />\r\n  </ItemGroup>\r\n  </ItemGroup>  \r\n</Project>\r\n````\r\n\r\n\r\nThere is other workaround. Very weird - depends on order of and some hacky `Import` declarations, but it breaks `xunit` runner and VS Code. Ssee lines with `Microsoft.NET.Sdk`:\r\n```xml\r\n<Project>\r\n  <PropertyGroup>\r\n    <TargetFramework>netstandard2.0</TargetFramework>\r\n    <LangVersion>latest</LangVersion>\r\n  </PropertyGroup>\r\n  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|AnyCPU'\">\r\n    <OutputPath>.bin\\Debug\\</OutputPath>\r\n    <BaseIntermediateOutputPath>.obj\\Debug\\</BaseIntermediateOutputPath>\r\n    <IntermediateOutputPath>.obj\\Debug\\</IntermediateOutputPath>\r\n  </PropertyGroup>\r\n  <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|AnyCPU'\">\r\n    <OutputPath>.bin\\Release\\</OutputPath>\r\n    <BaseIntermediateOutputPath>.obj\\Release\\</BaseIntermediateOutputPath>\r\n    <IntermediateOutputPath>.obj\\Release\\</IntermediateOutputPath>\r\n  </PropertyGroup>\r\n  <Import Project=\"Sdk.props\" Sdk=\"Microsoft.NET.Sdk\" />\r\n  <ItemGroup>\r\n    <None Remove=\".gitignore\" />\r\n\r\n    <None Remove=\"**/*.meta\" />\r\n  </ItemGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Buffers\" Version=\"4.5.0\" />\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.3\" />\r\n    <PackageReference Include=\"System.Memory\" Version=\"4.5.1\" />\r\n    <PackageReference Include=\"System.Runtime.CompilerServices.Unsafe\" Version=\"4.5.2\" />\r\n  </ItemGroup>\r\n\r\n  <Import Project=\"Sdk.targets\" Sdk=\"Microsoft.NET.Sdk\" />\r\n</Project>\r\n```\r\nDoes next relates dotnet/project-system#1438? \r\n\r\nI was not able to find solution on SO. \r\n\r\nShould I create separate issue with that with steps:\r\n1. Build into `.bin` and `.obj`\r\n2. Ensure there are no `bin` and `obj` created.\r\n3. Check VS Code, VS 2017, dotnet.exe\r\n\r\nOr my case is relevant for `respecting`?","Url":"https://github.com/dotnet/sdk/issues/3009","RelatedDescription":"Closed issue \"Trouble moving bin/ and obj/ to .bin/ and .obj/\" (#3009)"},{"Id":"416305439","IsPullRequest":false,"CreatedAt":"2019-03-06T16:13:21","Actor":"JoeRobich","Number":"3001","RawContent":null,"Title":"error NETSDK1085 during Roslyn builds with 3.0.100 preview 4 sdk","State":"closed","Body":"When building Roslyn with 3.0.100-preview4-010381 installed, I get the following error on every solution build.\r\n\r\n```\r\n8>------ Build started: Project: VS.Tools.Roslyn.Package, Configuration: Debug Any CPU ------\r\n2>C:\\Program Files\\dotnet\\sdk\\3.0.100-preview4-010381\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets(112,5): error NETSDK1085: The 'NoBuild' property was set to true but the 'Build' target was invoked.\r\n2>Done building project \"IlAsmDeploy.csproj\" -- FAILED.\r\n```","Url":"https://github.com/dotnet/sdk/issues/3001","RelatedDescription":"Closed issue \"error NETSDK1085 during Roslyn builds with 3.0.100 preview 4 sdk\" (#3001)"},{"Id":"417548547","IsPullRequest":false,"CreatedAt":"2019-03-05T23:22:40","Actor":"sbomer","Number":"3010","RawContent":null,"Title":"GenerateDepsFile no longer respects FilesToSkip from runtime packs","State":"open","Body":"- Runtime pack dependencies in deps.json and in the DependencyContext model have a \"runtimepack.\" prefix prependend to the nuget package id (see https://github.com/dotnet/sdk/commit/16eddf3d635133c35f42974dcd491c8263066b37#diff-0723634e548f98293eebe3970b71e0ddR328).\r\n- The heuristic in `GetPackageParts` gets the package id from the name of a nuspec in a parent directory:\r\n https://github.com/dotnet/sdk/blob/ab2176b3447e3e7820b5a340408110b6d498f907/src/Tasks/Common/NuGetUtils.cs#L48-L52\r\n\r\n`GenerateDepsFile` uses `GetPackageParts` to build the list of packages with dependencies to remove. When it looks for files to trim from the dependency model, it doesn't match any of the dependencies that have the \"runtimepack.\" prefix, so those files don't get skipped.\r\n\r\n","Url":"https://github.com/dotnet/sdk/issues/3010","RelatedDescription":"Open issue \"GenerateDepsFile no longer respects FilesToSkip from runtime packs\" (#3010)"},{"Id":"413780813","IsPullRequest":true,"CreatedAt":"2019-03-05T23:09:40","Actor":"dsplaisted","Number":"2984","RawContent":null,"Title":"Add CI legs to run tests as tools","State":"closed","Body":"Eventually I'd like to use the tests from this repo in other repos such as dotnet/core-sdk.  This PR adds CI legs which runs the tests as tools, in order to make sure they run correctly as tools.","Url":"https://github.com/dotnet/sdk/pull/2984","RelatedDescription":"Closed or merged PR \"Add CI legs to run tests as tools\" (#2984)"},{"Id":"416947669","IsPullRequest":true,"CreatedAt":"2019-03-05T20:41:11","Actor":"nugetlurker","Number":"3006","RawContent":null,"Title":"Insert NuGet Build 5.0.0-rtm.5867 into sdk","State":"closed","Body":"Insert NuGet Build 5.0.0-rtm.5867 into sdk release/2.1.6xx branch","Url":"https://github.com/dotnet/sdk/pull/3006","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 5.0.0-rtm.5867 into sdk\" (#3006)"},{"Id":"417286822","IsPullRequest":true,"CreatedAt":"2019-03-05T13:00:40","Actor":"dotnet-maestro[bot]","Number":"3008","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19154.14\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19154.14\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19155.29\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19155.29\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19156.20\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19156.20\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3008","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/arcade\" (#3008)"},{"Id":"416947647","IsPullRequest":true,"CreatedAt":"2019-03-05T00:27:04","Actor":"nugetlurker","Number":"3005","RawContent":null,"Title":"Insert NuGet Build 5.0.0-rtm.5867 into sdk","State":"closed","Body":"Insert NuGet Build 5.0.0-rtm.5867 into sdk release/2.2.2xx branch","Url":"https://github.com/dotnet/sdk/pull/3005","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 5.0.0-rtm.5867 into sdk\" (#3005)"},{"Id":"417040414","IsPullRequest":false,"CreatedAt":"2019-03-04T23:24:46","Actor":"sbomer","Number":"3007","RawContent":null,"Title":"Duplicate items in _ResolvedCopyLocalPublishAssets","State":"open","Body":"- When `ResolveCopyLocalAssets` runs during self-contained publish (`_UseBuildDependencyFile` is false), it outputs `_ResolvedCopyLocalPublishAssets`.\r\n- When `_ComputeResolvedCopyLocalPublishAssets` runs, it adds to `_ResolvedCopyLocalPublishAssets` the contents of (`ReferenceCopyLocalPaths` \\ `_ResolvedCopyLocalBuildAssets`):\r\nhttps://github.com/dotnet/sdk/blob/c60af5f303fa67d25550ecfa54975caef0f5c828/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.Publish.targets#L398-L399\r\n\r\n`_ResolvedCopyLocalBuildAssets` is empty, so it gets a duplicate copy of items in `ReferenceCopyLocalPaths` (which comes from `RuntimePackAsset`), for example `System.Private.CoreLib.dll`.\r\n\r\nBefore https://github.com/dotnet/sdk/pull/2646, `ResolvedAssembliesToPublish` only had one Item for System.Private.CoreLib.dll. I noticed this while trying to update https://github.com/mono/linker/blob/master/src/ILLink.Tasks/ILLink.Tasks.targets#L451 to work with the newest SDK. `_ManagedAssembliesToLink` was computed from `ResolvedAssembliesToPublish`, but that line breaks when there are multiple files with the same Filename in the input:\r\n```\r\nC:\\Users\\svbomer\\.nuget\\packages\\illink.tasks\\0.1.6\\build\\ILLink.Tasks.targets(451,34): error MSB4094: \"C:\\Users\\svbomer\\.nuget\\packages\\runtime.win-x64.microsoft.netcore.app\\3.0.0-preview-27324-5\\runtimes\\win-x64\\native\\System.Private.CoreLib.dll;C:\\Users\\svbomer\\.nuget\\packages\\runtime.win-x64.microsoft.netcore.app\\3.0.0-preview-27324-5\\runtimes\\win-x64\\native\\System.Private.CoreLib.dll\" is an invalid value for the \"AssemblyPath\" parameter of the \"CheckEmbeddedRootDescriptor\" task. Multiple items cannot be passed into a parameter of type \"Microsoft.Build.Framework.ITaskItem\". [D:\\linker\\test\\ILLink.Tasks.Tests\\bin\\debug\\netcoreapp3.0\\helloworld\\helloworld.csproj]\r\n```\r\n\r\nhttps://github.com/dotnet/sdk/pull/2666 may be relevant.\r\n\r\n/cc @peterhuene @nguerrera ","Url":"https://github.com/dotnet/sdk/issues/3007","RelatedDescription":"Open issue \"Duplicate items in _ResolvedCopyLocalPublishAssets\" (#3007)"},{"Id":"416793797","IsPullRequest":false,"CreatedAt":"2019-03-04T13:09:35","Actor":"SomeAnon42","Number":"3004","RawContent":null,"Title":"ResolvePackageAssets fails when targeting Core 3.0","State":"open","Body":"```\r\nError\tMSB4018\tThe \"ResolvePackageAssets\" task failed unexpectedly.\r\nSystem.Collections.Generic.KeyNotFoundException: The given key was not present in the dictionary.\r\n   at System.Collections.Generic.Dictionary`2.get_Item(TKey key)\r\n   at Microsoft.NET.Build.Tasks.LockFileExtensions.CollectDependencies(IDictionary`2 libraryLookup, IEnumerable`1 dependencies, HashSet`1 exclusionList) in /_/src/Tasks/Microsoft.NET.Build.Tasks/LockFileExtensions.cs:line 193\r\n   at Microsoft.NET.Build.Tasks.LockFileExtensions.CollectDependencies(IDictionary`2 libraryLookup, IEnumerable`1 dependencies, HashSet`1 exclusionList) in /_/src/Tasks/Microsoft.NET.Build.Tasks/LockFileExtensions.cs:line 180\r\n   at Microsoft.NET.Build.Tasks.LockFileExtensions.GetPlatformExclusionList(LockFileTarget lockFileTarget, LockFileTargetLibrary platformLibrary, IDictionary`2 libraryLookup) in /_/src/Tasks/Microsoft.NET.Build.Tasks/LockFileExtensions.cs:line 153\r\n   at Microsoft.NET.Build.Tasks.ResolvePackageAssets.CacheWriter.GetPlatformPackageExclusions() in /_/src/Tasks/Microsoft.NET.Build.Tasks/ResolvePackageAssets.cs:line 1191\r\n   at Microsoft.NET.Build.Tasks.ResolvePackageAssets.CacheWriter..ctor(ResolvePackageAssets task, Stream stream) in /_/src/Tasks/Microsoft.NET.Build.Tasks/ResolvePackageAssets.cs:line 610\r\n   at Microsoft.NET.Build.Tasks.ResolvePackageAssets.CacheReader.CreateReaderFromDisk(ResolvePackageAssets task, Byte[] settingsHash) in /_/src/Tasks/Microsoft.NET.Build.Tasks/ResolvePackageAssets.cs:line 483\r\n   at Microsoft.NET.Build.Tasks.ResolvePackageAssets.CacheReader..ctor(ResolvePackageAssets task) in /_/src/Tasks/Microsoft.NET.Build.Tasks/ResolvePackageAssets.cs:line 434\r\n   at Microsoft.NET.Build.Tasks.ResolvePackageAssets.ReadItemGroups() in /_/src/Tasks/Microsoft.NET.Build.Tasks/ResolvePackageAssets.cs:line 279\r\n   at Microsoft.NET.Build.Tasks.ResolvePackageAssets.ExecuteCore() in /_/src/Tasks/Microsoft.NET.Build.Tasks/ResolvePackageAssets.cs:line 271\r\n   at Microsoft.NET.Build.Tasks.TaskBase.Execute() in /_/src/Tasks/Common/TaskBase.cs:line 35\r\n   at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute()\r\n   at Microsoft.Build.BackEnd.TaskBuilder.<ExecuteInstantiatedTask>d__26.MoveNext()\tNitroSharpDbg\tC:\\Program Files\\dotnet\\sdk\\3.0.100-preview4-010582\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets\t228\t\r\n```\r\n\r\nSteps to reproduce:\r\n1. Create a new console netcoreapp3.0 project\r\n2. Clone https://github.com/mellinoe/veldrid.git\r\n3. Add a reference Veldrid.ImGui.csproj\r\n```xml\r\n<ItemGroup>\r\n  <ProjectReference Include=\"..\\veldrid\\src\\Veldrid.ImGui\\Veldrid.ImGui.csproj\" />\r\n</ItemGroup>\r\n```\r\n4. Build the project. \r\n\r\nThe build should fail. However, there's no issues when targeting netcoreapp2.2 or when using [the NuGet package](https://www.nuget.org/packages/ImGui.NET) instead of referencing the project.\r\n\r\n``dotnet --info`` output:\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview4-010582\r\n Commit:    a643588b29\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview4-010582\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview4-27502-7\r\n  Commit:  12aa3da961\r\n\r\n.NET Core SDKs installed:\r\n  2.2.104 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview4-010582 [C:\\Program Files\\dotnet\\sdk]\r\n```\r\n","Url":"https://github.com/dotnet/sdk/issues/3004","RelatedDescription":"Open issue \"ResolvePackageAssets fails when targeting Core 3.0\" (#3004)"},{"Id":"416329826","IsPullRequest":true,"CreatedAt":"2019-03-03T18:14:52","Actor":"dsplaisted","Number":"3002","RawContent":null,"Title":"Fix publishing self-contained ASP.NET apps","State":"closed","Body":"- Ignore .json files in runtime packs.  Fixes self-contained ASP.NET apps failing to launch with new runtime packs. @pakrym \r\n- Remove UseRefTargetingPacks property.  Fixes #2962","Url":"https://github.com/dotnet/sdk/pull/3002","RelatedDescription":"Closed or merged PR \"Fix publishing self-contained ASP.NET apps\" (#3002)"},{"Id":"416394963","IsPullRequest":true,"CreatedAt":"2019-03-02T14:26:05","Actor":"dotnet-maestro[bot]","Number":"3003","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19151.5\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19151.5\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3003","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3003)"},{"Id":"416214091","IsPullRequest":true,"CreatedAt":"2019-03-01T17:55:17","Actor":"JoeRobich","Number":"3000","RawContent":null,"Title":"Update the json manifest for the Dotfuscator Vsix","State":"closed","Body":"@livarcocc This is to update the dotfuscator manifest for a new build (in dotfuscator branch, which unfortunately still exists in this repo...)","Url":"https://github.com/dotnet/sdk/pull/3000","RelatedDescription":"Closed or merged PR \"Update the json manifest for the Dotfuscator Vsix\" (#3000)"},{"Id":"416092757","IsPullRequest":true,"CreatedAt":"2019-03-01T14:21:16","Actor":"dotnet-maestro[bot]","Number":"2999","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19128.3\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19128.3\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2999","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#2999)"},{"Id":"415919082","IsPullRequest":false,"CreatedAt":"2019-03-01T03:00:55","Actor":"sayedihashimi","Number":"2998","RawContent":null,"Title":"Unable to run global tools in PowerShell running on macOS","State":"open","Body":"I tried to execute a global tool from PowerShell running on macOS and the tool was not located. When I run `dotnet tool list --global` it does show up. When I exit out of PowerShell, and get back into a normal bash prompt, the global tool works fine.\r\n\r\nmacOS version = 10.14.2\r\n\r\n![global-tool](https://user-images.githubusercontent.com/1283154/53613386-f3f2e280-3ba3-11e9-90de-4669536bc35e.jpg)\r\n\r\nHere are the runtime/sdks that I have installed.\r\n![image](https://user-images.githubusercontent.com/1283154/53613512-2e5c7f80-3ba4-11e9-9073-9f4d0a32e6c1.png)\r\n","Url":"https://github.com/dotnet/sdk/issues/2998","RelatedDescription":"Open issue \"Unable to run global tools in PowerShell running on macOS\" (#2998)"},{"Id":"415882721","IsPullRequest":true,"CreatedAt":"2019-03-01T00:15:02","Actor":"fadimounir","Number":"2997","RawContent":null,"Title":"Crossgen Task","State":"open","Body":"Intitial implementation of the crossgen task, and plumbing in the SDK targets to invoke the task. The crossgen task invokes crossgen from the runtime pack.\r\n\r\n- Task triggered when <ReadyToRun> is set to true in the main app's project file (opt-in feature)\r\n- Added new condition to download runtime packs: when the ReadyToRun property is set.\r\n- Adding R2R exclusion list capability\r\n- Symbol emission is optional (opt-in, when ReadyToRunEmitSymbols is set to true)","Url":"https://github.com/dotnet/sdk/pull/2997","RelatedDescription":"Open PR \"Crossgen Task\" (#2997)"},{"Id":"415838644","IsPullRequest":false,"CreatedAt":"2019-02-28T21:47:43","Actor":"nguerrera","Number":"2996","RawContent":null,"Title":"ReferenceManagerAssemblies is hidden from .NETCoreApp but not .NETStandard","State":"open","Body":"See https://github.com/dotnet/sdk/pull/2994#discussion_r261372831\r\n\r\nIs this by design? ","Url":"https://github.com/dotnet/sdk/issues/2996","RelatedDescription":"Open issue \"ReferenceManagerAssemblies is hidden from .NETCoreApp but not .NETStandard\" (#2996)"},{"Id":"415612168","IsPullRequest":true,"CreatedAt":"2019-02-28T14:26:25","Actor":"dotnet-maestro[bot]","Number":"2995","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19127.8\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19127.8\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2995","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#2995)"},{"Id":"415365956","IsPullRequest":true,"CreatedAt":"2019-02-27T22:56:37","Actor":"etbyrd","Number":"2994","RawContent":null,"Title":"Remove opt-out of COM Reference Manager Tab","State":"open","Body":"This is a fix for: https://github.com/dotnet/project-system/issues/4355\r\nI tested this locally and ensured that projects built with COM references but I am not sure if anything is blocking this on the SDK side. ","Url":"https://github.com/dotnet/sdk/pull/2994","RelatedDescription":"Open PR \"Remove opt-out of COM Reference Manager Tab\" (#2994)"},{"Id":"415112893","IsPullRequest":true,"CreatedAt":"2019-02-27T14:21:22","Actor":"dotnet-maestro[bot]","Number":"2993","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19126.6\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19126.6\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2993","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#2993)"},{"Id":"415027102","IsPullRequest":false,"CreatedAt":"2019-02-27T09:35:47","Actor":"Lily721","Number":"2992","RawContent":null,"Title":"issues occurred when .Net core console project reference .net framework class library","State":"closed","Body":"I got a .NET Core console project which use .NET Core 3.0 preview, and other class library with .NET Framework 4 Client Profile, and this framework class library got a reference from System.Security which using PermissionSet like following:\r\n\r\n`using System.Security;`\r\n`......................................`\r\n`new PermissionSet(PermissionState.Unrestricted).Demand();`\r\n\r\nWhen I add this class library to NetCore console project, everything is fine when build, but got an issue during debug:\r\n`System.TypeLoadException: 'Could not load type 'System.Security.PermissionSet' from assembly 'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.'`\r\n\r\nThen I checked the mscorlib.dll in local folder:(C:\\Users\\*****\\.nuget\\packages\\microsoft.netcore.app\\3.0.0-preview-27117-01\\ref\\netcoreapp3.0)\r\nand reflector it but without any system.Security namespace in it.\r\n\r\nSwitch to net core 2.0, got same issue.\r\n\r\nAnyone can help? thanks a lot.","Url":"https://github.com/dotnet/sdk/issues/2992","RelatedDescription":"Closed issue \"issues occurred when .Net core console project reference .net framework class library\" (#2992)"},{"Id":"414342537","IsPullRequest":true,"CreatedAt":"2019-02-27T01:24:23","Actor":"nguerrera","Number":"2990","RawContent":null,"Title":"Add hook to redirect common props, only ref m.nc.platforms when necessary","State":"closed","Body":"1. Introduce $(AlternateCommonProps) to redirect the Sdk common props import to a user-defined location. This is morally equivalent to $(LanguageTargets) being customizable on the targets side. Having full control over both of these imports makes it much easier to integrate the SDK into existing heavily-customized builds. The current use case is to get some internal builds over to netcoreapp3.0\r\n\r\n2. Getting an intermittent error about 'vs' not being found from dogfood script. Removing unnecessary setting of msbuildEngine seems to have fixed it.\r\n\r\n3. With https://github.com/dotnet/core-sdk/pull/698, microsoft.netcore.platforms becomes the only package that cannot be resolved from packs. Make it so that we only pull it in when there are other package references. Otherwise, nuget doesn't need to see it as a package reference. This is just moving the temporary solution around, but means that we can get a working offline experience before we figure out how to adress the runtime graph going into to nuget (or sdk taking over for nuget).","Url":"https://github.com/dotnet/sdk/pull/2990","RelatedDescription":"Closed or merged PR \"Add hook to redirect common props, only ref m.nc.platforms when necessary\" (#2990)"},{"Id":"414599677","IsPullRequest":true,"CreatedAt":"2019-02-26T14:21:42","Actor":"dotnet-maestro[bot]","Number":"2991","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19125.2\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19125.2\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2991","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#2991)"},{"Id":"414093522","IsPullRequest":true,"CreatedAt":"2019-02-25T14:21:40","Actor":"dotnet-maestro[bot]","Number":"2988","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19124.1\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19124.1\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2988","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#2988)"},{"Id":"414119637","IsPullRequest":false,"CreatedAt":"2019-02-25T14:02:53","Actor":"loop-evgeny","Number":"2989","RawContent":null,"Title":"Error running self-contained Linux EXE: \"This executable is not bound to a managed DLL to execute. The binding value is: 'c3ab8ff13720e8ad9047dd39466b3c8974e592c2fa383d4a3960714caef0c4f2'\"","State":"open","Body":"I created a new console application in VS 2017 using .NET Core 2.1. Published it as a self-contained linux-x64 app without any changes and tried to run it on an Ubuntu 18.04 VM. Got this error:\r\n\r\n```\r\n ./LinuxTest \r\nThis executable is not bound to a managed DLL to execute. The binding value is: 'c3ab8ff13720e8ad9047dd39466b3c8974e592c2fa383d4a3960714caef0c4f2'\r\nA fatal error was encountered. This executable was not bound to load a managed DLL.\r\n```\r\n\r\nc3ab8ff13720e8ad9047dd39466b3c8974e592c2fa383d4a3960714caef0c4f2 is apparently the SHA256 hash of \"foobar\", so whatever the real problem is, this is a very weird error message, too!\r\n\r\nLinuxTest.csproj:\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```\r\n\r\nProgram.cs:\r\n```\r\nusing System;\r\n\r\nnamespace LinuxTest\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            Console.WriteLine(\"Hello World!\");\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nResulting self-contained binary: [LinuxTest.zip](https://github.com/dotnet/sdk/files/2900841/LinuxTest.zip)\r\n\r\nIf I install dotnet-runtime-2.1 on the Linux VM and run `dotnet LinuxTest.dll` it works.","Url":"https://github.com/dotnet/sdk/issues/2989","RelatedDescription":"Open issue \"Error running self-contained Linux EXE: \"This executable is not bound to a managed DLL to execute. The binding value is: 'c3ab8ff13720e8ad9047dd39466b3c8974e592c2fa383d4a3960714caef0c4f2'\"\" (#2989)"},{"Id":"413818973","IsPullRequest":true,"CreatedAt":"2019-02-25T13:00:49","Actor":"dotnet-maestro[bot]","Number":"2985","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.19123.1\r\n- Microsoft.DotNet.SignTool - 1.0.0-beta.19123.1\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/2985","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#2985)"},{"Id":"413886149","IsPullRequest":true,"CreatedAt":"2019-02-25T02:30:21","Actor":"dotnet-bot","Number":"2987","RawContent":null,"Title":"Merge release/3.0.1xx to master","State":"closed","Body":"\nThis is an automatically generated pull request from release/3.0.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/2987","RelatedDescription":"Closed or merged PR \"Merge release/3.0.1xx to master\" (#2987)"},{"Id":"413843026","IsPullRequest":true,"CreatedAt":"2019-02-24T21:53:25","Actor":"dsplaisted","Number":"2986","RawContent":null,"Title":"Mark implicit platforms package reference as PrivateAssets","State":"closed","Body":"Fixes #2976","Url":"https://github.com/dotnet/sdk/pull/2986","RelatedDescription":"Closed or merged PR \"Mark implicit platforms package reference as PrivateAssets\" (#2986)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"415363751","IsPullRequest":false,"CreatedAt":"2019-02-27T22:49:51","Actor":"leecow","Number":"102","RawContent":null,"Title":"SDK Installers will remove previous patch versions","State":"open","Body":"The SDK Installers for Windows will upgrade patch versions in place within the same feature band. This will reduce the number of SDKs that are installed on programmer machines.\r\n\r\nFeature bands of the SDK are defined like 3.0.1nn. [Find out more about SDK version numbers](https://docs.microsoft.com/dotnet/core/versions/#versioning-details).\r\n\r\nThis means when .NET Core SDK 3.0.101 becomes available and is installed, .NET Core SDK 3.0.100 will be removed from the machine if it exists. When .NET Core SDK 3.0.200 becomes available and is installed on the same machine, .NET Core SDK versions like 3.0.101 will not be removed but stay side by side with 3.0.200.\r\n\r\nThis approach supports use of `global.json` which will roll forward across patch versions, but not feature bands of the SDK. Thus, upgrading via the SDK installer will not result in errors due to a missing SDK. Feature bands also align with side by side Visual Studio installations for those users that install SDKs for Visual Studio use. For example, Visual Studio 15.9 uses .NET Core SDK 2.2.500 but does not support .NET Core SDK 2.2.600.\r\n\r\nFind out how to [remove other .NET Core SDK versions here.](https://docs.microsoft.com/dotnet/core/versions/remove-runtime-sdk-versions).","Url":"https://github.com/dotnet/announcements/issues/102","RelatedDescription":"Open issue \"SDK Installers will remove previous patch versions\" (#102)"},{"Id":"410971363","IsPullRequest":false,"CreatedAt":"2019-02-15T22:24:40","Actor":"richlander","Number":"101","RawContent":null,"Title":"Publishing .NET Core images to Microsoft Container Registry (MCR)","State":"open","Body":"# Publishing .NET Core images to Microsoft Container Registry (MCR)\r\n\r\nMicrosoft teams are now publishing container images to the [Microsoft Container Registry](https://azure.microsoft.com/en-us/blog/microsoft-syndicates-container-catalog/). There are two primary reasons for this change:\r\n\r\n* Syndicate Microsoft-provided container images to multiple registries, like Docker Hub and Red Hat.\r\n* Use Microsoft Azure as a global CDN for delivering Microsoft-provided container images.\r\n\r\nYou will use and see MCR as a storage back-end for Microsoft images. The primary way you learn about Microsoft container images and tags will be through a registry, which for most users will continue to be Docker Hub. Most of the experience you've had browsing for .NET Core container images will continue unchanged with this new model. The Docker Hub URLs you've used for Microsoft repos will continue to work, and forward to updated locations on Docker Hub. Existing Docker Hub will images will be maintained as-is.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #935](https://github.com/dotnet/dotnet-docker/issues/935)\r\n\r\n## Starting with .NET Core nightly repo\r\n\r\nOn the .NET team, we started our [transition to MCR](https://github.com/dotnet/dotnet-docker/issues/745) with the .NET Core \"nightly\" repo. [dotnet-nightly](dockerhub.com/r/microsoft/dotnet-nightly) is now hosted on MCR and syndicated to Docker Hub. We started with the nightly repo in order to discover and fix any challenges we found with this new model before we move our higher-traffic primary container repository.\r\n\r\nWe will start publishing [dotnet](dockerhub.com/r/microsoft/dotnet) to MCR a bit later, in either February or March. This issue will be updated when that happens.\r\n\r\n## Repo Split\r\n\r\nThe [.NET Core repo](https://hub.docker.com/r/microsoft/dotnet) currently includes 4 major categories of tags: \r\n\r\n* `sdk`\r\n* `aspnetcore-runtime`\r\n* `runtime` \r\n* `runtime-deps`\r\n\r\nProviding all of the tags in one place has helped with discoverability but made for a repo with an enormous README that can be challenging to navigate and consume. It is large enough that we exceeded Docker Hub README limits and had to artificially make it smaller.\r\n\r\nGoing forward, we will provide a repo for each of the tag categories listed above. We'll also provide a \"product repo\" that will hierarchicaly group all of our repos together. This will satisfy discoverability needs so that it will be easy to find the tags you want.\r\n\r\nYou can already see this experience with [microsoft-dotnet-core-nightly](https://hub.docker.com/_/microsoft-dotnet-core-nightly). There are now multiple repos for our nightly builds:\r\n\r\n* [.NET Core Nightly product repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly)\r\n* [.NET Core SDK Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-sdk/)\r\n* [.NET Core ASP.NET Core Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-aspnet/)\r\n* [.NET Core Runtime Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime/)\r\n* [.NET Core Runtime-deps Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime-deps/)\r\n\r\nThe same split will exist for the non-nightly stable repo (currently hosted at  [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet)) when we start publishing it to MCR and syndicating it back to DockerHub.\r\n\r\n## Changes to registry URL\r\n\r\nThe biggest change is that your Dockerfiles need to be updated to point to the MCR registry in order get access to new .NET Core container tags. The same change is required for scripts or human operations that pull images via `docker pull`.\r\n\r\nThe following example shows the registry path, repo and tag for the .NET Core 2.2 \"Nightly\" SDK on MCR:\r\n\r\n```console\r\nmcr.microsoft.com/dotnet/core-nightly/sdk:2.2\r\n```\r\n\r\nAs comparison, the following repo and tag have been used to date for the .NET Core 2.2 \"Nightly\" SDK on Docker Hub:\r\n\r\n```console\r\nmicrosoft/dotnet-nightly:2.2-sdk\r\n```\r\n\r\nThe new repo URL is provided at each of the news repos. For example, the new .NET Core SDK \"nightly\" repo provides a box on the right where you can copy and paste the correct MCR-based repo syntax that you can use for `docker pull` or in `FROM` statements in your Dockerfiles.\r\n\r\n![image](https://user-images.githubusercontent.com/2608468/52811702-95c5eb80-304a-11e9-8de8-e6ea1f4b4d75.png)\r\n\r\n## Servicing existing Docker Hub tags\r\n\r\nWe will continue to service existing non-version-specific or floating tags on Docker Hub while the associated .NET Core version is supported. For example the `microsoft/dotnet:2.1-sdk` tag is a floating tag that will continue to be serviced for the lifetime of .NET Core 2.1. You can continue using floating tags without issue.\r\n\r\nIf you use non-floating tags, like `microsoft/dotnet:2.1.504-sdk-alpine`, then you will need to update your Dockerfile to use a new non-floating tag. No new non-floating tags will be published to `microsoft/dotnet` and `microsoft/dotnet-nightly` after we fully transition to MCR.\r\n\r\n.NET Core 3.0 Preview 3 and later will only be made available on MCR.\r\n\r\n## Microsoft is a Verified Publisher\r\n\r\nUntil now, Microsoft-provided container images were considered \"community images\". As part of this change, we are re-classifying Microsoft as a \"verified publisher\" on Docker Hub. This designation should make it clearer that .NET and other Microsoft-provided images are coming from a verified source. There clearly was that expectation previously, but Docker is now making that clearer in the Docker Hub pages they host for Microsoft.\r\n\r\nWe will provide official vulnerability scanning Microsoft-provided images as a second phase of this transition.","Url":"https://github.com/dotnet/announcements/issues/101","RelatedDescription":"Open issue \"Publishing .NET Core images to Microsoft Container Registry (MCR)\" (#101)"},{"Id":"410784442","IsPullRequest":false,"CreatedAt":"2019-02-15T14:06:29","Actor":"TaraOverfield","Number":"100","RawContent":null,"Title":"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809","State":"open","Body":"<strong><em>Final Update 2/19/19 @1:30 PM (PST)</em></strong><em>: This </em><em>advisory is now resolved with no action needed from Microsoft Customers. The issue was not applicable to any valid or supported configuration. There is no consequence for .NET 4.8 Preview customers. </em>\r\n\r\n<em>We strive to share timely information to protect our customer’s productivity, in this case, our finding was thankfully of no consequence for customers on supported configurations.</em>\r\n\r\n<del><em><strong>Update 2/15/19 @3:35 PM (PST)</strong></em><em>: As we continue our investigation, we are finding the issue to be restricted to a limited and isolated set of test-only systems that are using non-official versions of the .NET 4.8 Preview. As of 2/15/19 around 12:00 pm (PST) we further tightened our delivery mechanisms to ensure that the February .NET security updates are only deployed to their expected target systems.</em></del>\r\n\r\n<del><span>The </span><a href=\"https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/\" rel=\"nofollow\">February 2019 Security and Quality Rollup for Windows 10 update 1809</a><span> was released earlier this week. We have received multiple customer reports of issues when a customer has installed .NET Framework 4.8 Preview then installed the February security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>.</span> These reports are specific to only to the scenario when a customer has installed both .NET Framework 4.8 Preview and the February security update.</del>\r\n\r\n<del>We are actively working on investigating and addressing this issue. If you installed the February 2019 security update and have not seen any negative behavior, we recommend that you leave your system as-is but closely monitor it and ensure that you apply upcoming .NET Framework updates.</del>\r\n\r\n<del>We will continue to update this <a href=\"https://github.com/dotnet/announcements/issues/100\" rel=\"nofollow\">post</a> as we have new information.</del>\r\n<h2><del>Guidance</del></h2>\r\n<del>We are working on guidance and will update this post and as we have new information.</del>\r\n<h2><del>Workaround</del></h2>\r\n<del>There are no known workarounds at this time.</del>\r\n<h2><del>Symptoms</del></h2>\r\n<del>After installing .NET Framework 4.8 Preview then the February 2019 security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>, Visual Studios will crash with this error message:</del>\r\n<p class=\"xxxxxmsonormal\"><del><b><span style=\"font-size: 10.5pt;font-family: 'Segoe UI',sans-serif;color: black\">\"Exception has been thrown by the target of an invocation.\"</span></b></del></p>","Url":"https://github.com/dotnet/announcements/issues/100","RelatedDescription":"Open issue \"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809\" (#100)"},{"Id":"410455095","IsPullRequest":false,"CreatedAt":"2019-02-14T19:28:25","Actor":"richlander","Number":"99","RawContent":null,"Title":"Supporting new Alpine versions (for containers)","State":"open","Body":"# Supporting new Alpine versions (for containers)\r\n\r\n[Alpine 3.9](https://twitter.com/alpinelinux/status/1090416212822110214) was recently announced. Congratulations, Alpine team! On the .NET team, we are committed to supporting new Alpine versions quickly, and also need to define a policy for older versions. This policy only applies for the container images that we publish.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #933](https://github.com/dotnet/dotnet-docker/issues/933)\r\n\r\n## Policy\r\n\r\nWe intend to establish the following policy for supporting Alpine with .NET Core container images:\r\n\r\n* Support new Alpine versions within 60 days of release (hopefully much less).\r\n* Support n-1 Alpine versions for 3 months after we support a new Alpine version.\r\n\r\nNote: The [.NET Core support policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md) may be broader. This policy is specific to the container images we produce.\r\n\r\n## Plans\r\n\r\nWe're in the process of [fixing issues required to support Alpine 3.9](https://github.com/dotnet/dotnet-docker/issues/921). We expect that these issues will be resolved in February and that we'll be able to provide support for Alpine 3.9 in March.\r\n\r\nWe will produce Alpine 3.9 images for .NET Core 2.1, 2.2 and 3.0. Assuming we publish 3.9 images in March, we'll stop producing and supporting Alpine 3.7 and 3.8 images after June (2019).\r\n\r\n## Using Alpine-based .NET Core images\r\n\r\nWe produce a variety of Alpine-based images. You can either depend on a specific Alpine version, like with `microsoft/dotnet:2.2-sdk-alpine3.8` or opt to use the latest Alpine image we have to offer, like with `microsoft/dotnet:2.2-sdk-alpine`. Either are good choices. It is just a question of whether you want to make a conscious decision to move to later Alpine releases.\r\n\r\n## Support for ARM32?\r\n\r\nWe produce Alpine images for x64 (and ARM64, shortly). The [Alpine 3.9 announcement](https://twitter.com/alpinelinux/status/1090416212822110214) made mention of support for ARM32v7. We would like to enable .NET Core [Alpine-based images on ARM32](https://github.com/gliderlabs/docker-alpine/issues/463#issuecomment-460530395). We are patiently waiting for that to happen. If that's important to you, you should comment on that thread.","Url":"https://github.com/dotnet/announcements/issues/99","RelatedDescription":"Open issue \"Supporting new Alpine versions (for containers)\" (#99)"},{"Id":"409840927","IsPullRequest":false,"CreatedAt":"2019-02-13T14:48:21","Actor":"TaraOverfield","Number":"98","RawContent":null,"Title":"February 2019 .NET Updates","State":"open","Body":"# February 2019 .NET Updates\r\nThe following .NET updates were released in February 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework February 2019 Security and Quality Rollup - February 12, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/)\r\n* [.NET Framework February 2019 Preview of Quality Rollup - February 19, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/19/net-framework-february-2019-preview-of-quality-rollup/)\r\n\r\n## .NET Support Policies\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/98","RelatedDescription":"Open issue \"February 2019 .NET Updates\" (#98)"},{"Id":"409436643","IsPullRequest":false,"CreatedAt":"2019-02-12T18:21:22","Actor":"leecow","Number":"97","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability","State":"open","Body":"## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a domain spoofing vulnerability in .NET Framework and .NET Core which causes the meaning of a URI to change when International Domain Name encoding is applied. An attacker who successfully exploited the vulnerability could redirect a URI.\r\n\r\nThe security update addresses the vulnerability by disallowing certain Unicode characters from the URI.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/35265\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core 1.0 or 1.1 based application that uses the [System.Private.Uri](https://www.nuget.org/packages/System.Private.Uri/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0 | 4.3.1\r\n\r\nAny .NET Core 2.1 or 2.2 based application that uses the [Microsoft.NETCore.App](https://www.nuget.org/packages/Microsoft.NETCore.App) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6, 2.1.7, 2.2.0, 2.2.1 | 2.1.8, 2.2.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Private.Uri` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.2.1, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Private.Uri/4.3.0` is a reference to version 4.3.0 of `System.Private.Uri`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.8 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.2 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Private.Uri` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.Private.Uri` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0657](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0657)\r\n\r\n### Revisions\r\n\r\nV1.0 (February 12, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-02-08_\r\n","Url":"https://github.com/dotnet/announcements/issues/97","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability\" (#97)"},{"Id":"397026248","IsPullRequest":false,"CreatedAt":"2019-01-08T18:17:45","Actor":"leecow","Number":"96","RawContent":null,"Title":"January 2019 .NET Updates","State":"open","Body":"# January 2019 .NET Updates\r\n\r\nThe following .NET updates were released in January 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework January 2019 Preview of Quality Rollup - January 15, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/15/net-framework-january-2019-preview-of-quality-rollup/)\r\n* [.NET Framework January 2019 Security and Quality Rollup - January 8, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/08/net-framework-january-2019-security-and-quality-rollup/)\r\n* [.NET Framework January 22, 2018 Preview of Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - January 22, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/22/net-framework-january-22-2018-preview-of-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.7 and .NET Core SDK 2.1.503 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.7/2.1.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.1 and .NET Core SDK 2.2.102 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.1/2.2.1.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2210](https://github.com/dotnet/core/issues/2210)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/96","RelatedDescription":"Open issue \"January 2019 .NET Updates\" (#96)"},{"Id":"397020176","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:27","Actor":"blowdart","Number":"95","RawContent":null,"Title":" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a tampering vulnerability exists when .NET Core improperly handles specially crafted files. An attacker who successfully exploited this vulnerability could write arbitrary files and directories to certain locations on a vulnerable system. However, an attacker would have limited control over the destination of the files and directories.\r\n\r\nTo exploit the vulnerability, an attacker must send a specially crafted file to a vulnerable system\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core handles these files.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34427\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nIf your application does not extract ZIP compressed files it is unaffected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.IO.Compression.ZipFile](https://www.nuget.org/packages/System.IO.Compression.ZipFile/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.IO.Compression.ZipFile) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n`System.IO.Compression.ZipFile` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\nFinally, you must restart your applications once an updated runtime or SDK is installed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Danny Grander](https://twitter.com/grander) of [Snyk](https://snyk.io/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-8416](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8416)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected pacakge table.\r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/95","RelatedDescription":"Open issue \" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\" (#95)"},{"Id":"397020142","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:23","Actor":"blowdart","Number":"94","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of an information disclosure vulnerability exists in .NET Framework and .NET Core which allows bypassing Cross-origin Resource Sharing (CORS) configurations. An attacker who successfully exploited the vulnerability could retrieve content, that is normally restricted, from a web application.\r\n\r\nThe security update addresses the vulnerability by enforcing CORS configuration to prevent its bypass.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34428\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.2.0 | 2.2.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Net.Http` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `SSystem.Net.Http/4.3.0` is a reference to version 4.3.0 of `System.Net.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Net.Http` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0545](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0545)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected package table. \r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n","Url":"https://github.com/dotnet/announcements/issues/94","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\" (#94)"},{"Id":"390948658","IsPullRequest":false,"CreatedAt":"2018-12-14T03:22:58","Actor":"1015450578","Number":"93","RawContent":null,"Title":"Docker image with tag '2.2-aspnetcore-runtime' is not compatible","State":"closed","Body":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]","Url":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Closed issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93)"},{"Id":"390193072","IsPullRequest":false,"CreatedAt":"2018-12-12T12:56:53","Actor":"bilalmalik777","Number":"92","RawContent":null,"Title":".net core Console","State":"closed","Body":"I am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n    networks:\r\n     - app-network\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\nIf the detail is not enough or you do not get my point, you can share your confusion in comment","Url":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Closed issue \".net core Console\" (#92)"},{"Id":"380346599","IsPullRequest":false,"CreatedAt":"2018-11-13T17:44:44","Actor":"leecow","Number":"91","RawContent":null,"Title":"November 2018 .NET Updates","State":"open","Body":"# November 2018 .NET Updates\r\n\r\nThe following .NET updates were released in November 2018. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core November 2018 (2.1.6 and SDK 2.1.500) Update release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.6/2.1.6.md)\r\n\r\nA [discussion issue](https://github.com/dotnet/core/issues/2053) is available for questions or feedback about this release.\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [October 2018](https://github.com/dotnet/announcements/issues/89)\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/91","RelatedDescription":"Open issue \"November 2018 .NET Updates\" (#91)"},{"Id":"375230004","IsPullRequest":false,"CreatedAt":"2018-10-29T21:45:27","Actor":"terrajobst","Number":"90","RawContent":null,"Title":"The future of JSON in .NET Core 3.0","State":"open","Body":"JSON has become an essential part of virtually all modern .NET applications and in many cases even surpassed the usage of XML. However, .NET hasn't had a (great) built-in way to deal with JSON. Instead we've relied on [Json.NET] which continues to serve the .NET ecosystem well.\r\n\r\n[Json.NET]: https://www.newtonsoft.com/json\r\n\r\nMoving forward, we plan on making some changes to our JSON support:\r\n\r\n* **We need high-performance JSON APIs**. We need a new set of JSON APIs that are highly tuned for performance by using `Span<T>` and allows for processing UTF-8 directly without having to transcode to UTF-16 `string` instances. Both aspects are critical for our web server Kestrel, where throughput is a key requirement.\r\n\r\n* **Remove dependency from ASP.NET Core to Json.NET**. Today, ASP.NET Core has a dependency on Json.NET. While this provides a tight integration between ASP.NET Core and Json.NET, it also means that application developers cannot freely choose which JSON library they are using. This is also problematic for customers of Json.NET as the version is dictated by the underlying platform. However, Json.NET is frequently updated and application developers often want to -- or even have to -- use a specific version. Thus, we want to remove the dependency from ASP.NET Core 3.0 to Json.NET so that customers can choose which version to use, without fearing they might accidentally break the underlying platform. In addition, this makes it also possible to plug-in an entirely different JSON library.\r\n\r\n* **Provide an ASP.NET Core integration package for Json.NET**. Json.NET has basically become the Swiss Army knife of JSON processing in .NET. It provides many options and facilities that allow customers to handle their JSON needs with ease. We don't want to compromise on the Json.NET support customers are getting today, for example, the ability to configure the JSON serialization via the `AddJsonOptions` extension method. Thus, we want to provide the Json.NET integration as a NuGet package that developers can optionally install so they get all the bells and whistles they get from Json.NET today. The other part of this work item is to ensure we have the right extension points so that other parties can provide similar integration packages for their JSON library of choice.\r\n\r\nBelow are more details around this plan.\r\n\r\n## The need for high-performance JSON APIs\r\n\r\nThe requirements for the .NET stack have changed a bit since the arrival of .NET Core. Historically, .NET has valued usability and convenience. With .NET Core, we've added a focus on performance, and we've made significant investments to serve high performance needs. And the [improvements we made][techempower] in the popular TechEmpower benchmark are a testament to that.\r\n\r\n[techempower]: https://www.techempower.com/blog/2016/11/16/framework-benchmarks-round-13/\r\n\r\nWith .NET Core 2.1, we've added a brand new primitive called [Span\\<T>][span-msdn] that allows us to represent native memory and arrays in a uniform way. With this type, we've also added a set of parsing and encoding APIs that are much more memory efficient without having to resort to unsafe code.\r\n\r\n[span-msdn]: https://msdn.microsoft.com/en-us/magazine/mt814808.aspx\r\n\r\nPart of the work of minimizing allocations is to avoid having to transcode UTF-8 payloads into UTF-16 strings, purely for parsing reasons. Currently, Json.NET is implemented by reading UTF-16. We need the ability to read (and write) JSON documents directly in UTF-8 because most network protocols (including HTTP) use UTF-8.\r\n\r\nDuring .NET Core 2.1 we've learned that updating our existing APIs to leverage `Span<T>` has limits. While we did add a bunch of overloads that accept spans, we also had to produce brand new APIs that are designed around minimizing allocations and dealing with buffers, which we exposed in `System.Buffers` namespaces. And with `System.IO.Pipelines` we've also added a programming model that enables developers to share buffers without having to deal with lifetime issues.\r\n\r\nBased on these experiences we believe in order to support JSON parsing, we'll need to expose a new set of JSON APIs that are specifically geared for high-performance scenarios.\r\n\r\nYou might wonder why we can't just update Json.NET to include support for parsing JSON using `Span<T>`? Well, James Newton-King -- the author of Json.NET -- has the following to say about that:\r\n\r\n> Json.NET was created over 10 years ago, and since then it has added a wide range of features aimed to help developers work with JSON in .NET. In that time Json.NET has also become far and away NuGet's most depended on and downloaded package, and is the go-to library for JSON support in .NET. Unfortunately, Json.NET's wealth of features and popularity works against making major changes to it. Supporting new technologies like `Span<T>` would require fundamental breaking changes to the library and would disrupt existing applications and libraries that depend on it.\r\n>\r\n> Going forward Json.NET will continue to be worked on and invested in, both addressing known issues today and supporting new platforms in the future. Json.NET has always existed alongside other JSON libraries for .NET, and there will be nothing to prevent you using one or more together, depending on whether you need the performance of the new JSON APIs or the large feature set of Json.NET.\r\n\r\n## Move Json.NET integration into a separate NuGet package\r\n\r\nToday, you cannot use ASP.NET Core without Json.NET because it is a dependency of ASP.NET Core itself. Over the years, we've received feedback that the dependency can conflict with other libraries that have their own dependency on a different version of Json.NET. In the past, we've considered addressing this issue by using a private copy of Json.NET in ASP.NET. However, this would create problems when developers want to configure Json.NET (for instance, in order to control how the serializer behaves when formatting JSON objects).\r\n\r\nMoving forward we'd like to:\r\n\r\n1. Replace the internal usage of Json.NET in ASP.NET Core by the new platform-provided JSON APIs.\r\n\r\n2. Factor the public facing usage of Json.NET into an optional integration package that can be acquired from NuGet.\r\n\r\nSo the existing integration between ASP.NET Core and Json.NET will continue to be supported, but will be moving out of the platform and into a separate package. However, since the integration is then designed to sit on top of the platform, it will also allow customers to update Json.NET to later versions.\r\n\r\nFurthermore, customers who need more performance can also choose to use the new JSON APIs, at the expense of the rich feature set that Json.NET offers.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/33115.","Url":"https://github.com/dotnet/announcements/issues/90","RelatedDescription":"Open issue \"The future of JSON in .NET Core 3.0\" (#90)"},{"Id":"368440353","IsPullRequest":false,"CreatedAt":"2018-10-09T23:44:06","Actor":"vivmishra","Number":"89","RawContent":null,"Title":"October 2018 .NET Updates","State":"open","Body":"# October 2018 .NET Updates\r\n\r\nThe following .NET updates were released in October 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core October 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/10/09/net-core-october-2018-update-net-core-1-0-and-1-1/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/89","RelatedDescription":"Open issue \"October 2018 .NET Updates\" (#89)"},{"Id":"368429033","IsPullRequest":false,"CreatedAt":"2018-10-09T22:51:18","Actor":"leecow","Number":"88","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core when HTTP authentication information is inadvertently exposed in an outbound request that encounters an HTTP redirect. An attacker who successfully exploited this vulnerability could use the information to further compromise the web application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handles HTTP redirects.\r\n\r\nSystem administrators running .NET Core 1.0 or .NET Core 1.1 applications must update their .NET Core runtimes to versions 1.0.13 and 1.1.10 then restart their applications. If installed applications target .NET Core 2.0, the applications must be migrated to 2.1 or newer and redeployed.\r\n\r\nDevelopers must update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core 2.0](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 then redeploy.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at <https://github.com/dotnet/corefx/issues/32730>\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nNone\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nAdditionally package authors should check their dependencies to ensure they aren't depending on a vulnerable version of the following package:\r\n\r\n<a name=\"package-list\"></a>Package name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Net.Http| 2.0.20126.16343, 2.0.20505, 2.0.20710, 4.0.0, 4.1.0, 4.1.1, 4.1.2, 4.3.0, 4.3.1, 4.3.2, 4.3.3 |  4.3.4 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nTo check the currently installed runtimes and SDKs with version 2.1 or later of .NET Core, open a command prompt and run the `dotnet --info` command. You should see an output similar to the following:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.403\r\n Commit:    04e15494b6\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.403\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.5\r\n  Commit:  290303f510\r\n\r\n.NET Core SDKs installed:\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.10 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf you don't see a runtime entry for 1.0.13 or 1.1.10, any .NET Core 1.x applications run on that computer are vulnerable.\r\n\r\nIf you don't have a 2.1 version of the runtime or SDK installed, you can produce the complete list of runtimes by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows | `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS | `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms | `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.13, 1.1.10 then any application targeting versions 1.0 or 1.1 are vulnerable.\r\n\r\nAdditionally, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n### <a name=\"fix-runtime\">How do I fix the vulnerability?\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.13, 1.1.10 and install the latest 2.1 runtime, ensuring that any 2.0 applications are migrated to 2.1 as soon as possible.\r\n\r\n Developers are advised to update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at <https://github.com/dotnet/> and <https://github.com/aspnet/>, respectively. The Announcements repo for each product (<https://github.com/dotnet/Announcements> and <https://github.com/aspnet/Announcements>) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8292](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8292)\r\n\r\n### Revisions\r\n\r\nV1.0 (October 10, 2018): Advisory published.\r\n_Version 1.0_\r\n_Last Updated 2018-10-10_\r\n","Url":"https://github.com/dotnet/announcements/issues/88","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\" (#88)"},{"Id":"367393517","IsPullRequest":false,"CreatedAt":"2018-10-05T22:58:51","Actor":"leecow","Number":"87","RawContent":null,"Title":".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan","State":"open","Body":"# .NET Core Release Data (releases.json) Redesign and Deprecation\r\n\r\nThe releases.json and releases.csv files began life as helper tools for some of our internal release work, some experimentation and to possibly be useful to the community. It has been great to learn the files are indeed in use and many folks depend on them as a trigger for a number of activities.\r\n\r\n* [release-notes/releases.json](https://github.com/dotnet/core/blob/master/release-notes/releases.json)\r\n* [release-notes/releases.csv](https://github.com/dotnet/core/blob/master/release-notes/releases.csv)\r\n\r\nA discussion topic is available to share thoughts and see what others are thinking at https://github.com/dotnet/core/issues/1986\r\n\r\nBetween the usages which we have become aware and in considering further activities that could be enabled to reason about things such as checking .NET Core version availability and support status, it became clear the current format is inadequate.\r\n\r\nAn updated format has been designed and tested which will replace the current files. The timeline below describes the path to obsoleting the current files.\r\n\r\n## The Plan\r\n\r\n| Date | Action |\r\n| :--- | :----- |\r\n| Oct 2018 | Notify the community of the coming change |\r\n| Oct 2018 | Release the new json format into dotnet/core |\r\n| Oct 2018 - Feb 2019 | Maintain the old json and csv files |\r\n| Feb 2019 | Reminder announcement that old format file is coming soon |\r\n| Mar 2019 | Old json and csv files are obsoleted and removed from dotnet/core |\r\n\r\n## Breaking change\r\n\r\nIf you are currently utilizing the old version json or csv, you will need to update the relevant code to work with the new format. If you are just getting started with consuming this data, use the new version.\r\n\r\n## The Format\r\n\r\nBelow are fragments of the files from our most recent .NET Core release.\r\n\r\n### release-index.json\r\n\r\nThis file consists of a top level array with data on the latest release versions and a property for locating the more detailed channel-specific releases.json. This file is found in [dotnet/core/release-notes](https://github.com/dotnet/core/tree/new-json/release-notes/)\r\n\r\n[releases-index.json](https://github.com/dotnet/core/blob/new-json/release-notes/releases-index.json)\r\n\r\n```\r\n{\r\n    \"releases-index\": [\r\n        {\r\n            \"channel-version\": \"2.1\",\r\n            \"latest-release\": \"2.1.5\",\r\n            \"latest-release-date\":\"2018-10-02\",\r\n            \"product\": \".NET Core\",\r\n            \"support-phase\": \"lts\",\r\n            \"eol-date\": \"\",\r\n            \"releases.json\": \"https://github.com/dotnet/core/blob/master/release-notes/2.1/releases.json\",\r\n        },\r\n        ...\r\n}\r\n```\r\n\r\n### releases.json\r\n\r\nThis file provides detailed data for each release. A copy of this file will be found in each versioned directories under [dotnet/core/release-notes](https://github.com/dotnet/core/release-notes). For example [dotnet/core/release-notes/2.1](https://github.com/dotnet/core/tree/new-json/release-notes/2.1)\r\n\r\n\r\n[releases.json](https://github.com/dotnet/core/tree/new-json/release-notes/2.1/releases.json)\r\n\r\n```\r\n{\r\n    \"channel-version\": \"2.1\",\r\n    \"latest-release\": \"2.1.5\",\r\n    \"latest-release-date\":\"2018-10-12\",\r\n    \"support-phase\": \"lts\",\r\n    \"eol-date\": \"\",\r\n    \"lifecycle-policy\": \"https://www.microsoft.com/net/support/policy\",\r\n    \"releases\":\r\n    [\r\n        {\r\n            \"release-date\":  \"2018-10-02\",\r\n            \"release-version\":  \"2.1.5\",\r\n            \"security\":  false,\r\n            \"release-notes\":  \"https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.5/2.1.5.md\",\r\n            \"runtime\":  \r\n            {\r\n                \"version\":  \"2.1.5\",\r\n                \"version-display\":  \"2.1.5\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"files\":  \r\n                [\r\n                    {\r\n                        \"name\": \"dotnet-runtime-linux-arm.tar.gz\",\r\n                        \"url\": \"https://download.visualstudio.microsoft.com/download/pr/4d555219-1f04-47c6-90e5-8b3ff8989b9c/0798763e6e4b98a62846116f997d046e/dotnet-runtime-2.1.5-linux-arm.tar.gz\",\r\n                        \"hash\": \"89a77a07065ea24e7198c77a233b9ce5c6cf51b1deb2ef55c88f0adbb2ecd9db1ba4e7d55eec2ef7139c47f91346fed360161a5bb6e3a7ccfc4559bcde286364\"\r\n                    },\r\n                    ...\r\n                ]\r\n            }\r\n            \"sdk\":  \r\n            {\r\n                \"version\":  \"2.1.403\",\r\n                \"version-display\":  \"2.1.403\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"csharp-language\":  \"7.3\",\r\n                \"fsharp-language\":  \"4.5\",\r\n                \"files\":  \r\n                [...]\r\n            }\r\n        }\r\n    ]\r\n}\r\n```","Url":"https://github.com/dotnet/announcements/issues/87","RelatedDescription":"Open issue \".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan\" (#87)"},{"Id":"366416503","IsPullRequest":false,"CreatedAt":"2018-10-03T16:11:18","Actor":"leecow","Number":"86","RawContent":null,"Title":".NET Core 2.0 has reached end of life","State":"open","Body":"[.NET Core 2.0 reached end of life](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) on October 1, 2018. This means [.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) is no longer supported and updates will no longer be provided. We recommend moving to [.NET Core 2.1](https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-net-core-2-1/), our long term support (LTS) release.\r\n\r\n- [Download .NET Core 2.1](https://www.microsoft.com/net/download/dotnet-core/2.1)\r\n- [.NET Core 2.1 LTS statement](https://blogs.msdn.microsoft.com/dotnet/2018/08/21/net-core-august-2018-update/)\r\n- [.NET Core 2.0 end-of-life statement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n\r\n## Discussion\r\n\r\nPlease share you thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/core#1983](https://github.com/dotnet/core/issues/1983)\r\n\r\n## Lifecycle Context\r\n\r\n.NET Core releases belong to one of two [support lifecycles](https://www.microsoft.com/net/platform/support-policy): long term support (LTS) and Current. LTS releases are stable release which receive critical updates and are supported for at least three years. Current releases can include new features that may undergo future change based on feedback. Current releases are supported for three months after the subsequent .NET Core major or minor release. Both LTS and Current releases receive critical fixes throughout their lifecycle, for security, reliability, or to add support for new operating system versions. You must stay up-to-date with the latest patches to qualify for support. \r\n\r\n## .NET Core 2.0 Lifecycle\r\n\r\n[.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) was released in August 2017 as a Current release. Per the lifecycle policy, Current releases reach end of life 3 months after a subsequent release (Current or LTS). .NET Core 2.1 released May 2018 and began the end of life countdown for .NET Core 2.0. The 3 month maintenance period for .NET Core 2.0 was scheduled to end August 2018 but was [extended to October](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) to allow time to address an issue some customers were experiencing while migrating to .NET Core 2.1.\r\n\r\n## .NET Core 2.0 Downloads\r\n\r\n.NET Core 2.0 installers, zips and tar.gzs will remain available, but unsupported. This includes existing releases available on Linux package feeds. Previous versions, including 2.0, will be accessible through the [Download Archives](https://www.microsoft.com/net/download/archives). \r\n\r\n## .NET Core 2.0 Docker Images\r\n\r\n.NET Core 2.0 will be removed from the .NET and ASP.NET Docker repo READMEs, however the existing images remain available in those repos.\r\n\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/)\r\n* [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/)\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)\r\n\r\n## Policy Information\r\n\r\nAdditional lifecycle and support details  and background can be seen in the following:\r\n\r\n* [.NET Core Support Lifecycle](https://www.microsoft.com/net/platform/support-policy)\r\n* [Support and Versioning](https://blogs.msdn.microsoft.com/dotnet/2016/07/26/net-support-and-versioning/)\r\n* [2.0 end of life early announcement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n","Url":"https://github.com/dotnet/announcements/issues/86","RelatedDescription":"Open issue \".NET Core 2.0 has reached end of life\" (#86)"},{"Id":"361098704","IsPullRequest":false,"CreatedAt":"2018-09-18T01:10:23","Actor":"spshant","Number":"85","RawContent":null,"Title":"NET Framework 4.8 Early Access build 3646 is available!","State":"open","Body":"Today, we are happy to share an Early Access build for the .NET Framework 4.8. This includes an updated .NET 4.8 runtime as well as the .NET 4.8 Developer Pack (a a single package that bundles the .NET Framework 4.8 runtime, the .NET 4.8 Targeting Pack, and the .NET Framework 4.8 SDK). \r\n\r\nPlease help us ensure this is a high quality and compatible release by trying out this build and exploring the new features. \r\n\r\n**Next steps:**\r\nTo explore the new features, download the [.NET 4.8 Developer Pack build 3646](https://go.microsoft.com/fwlink/?LinkId=2018486).  Instead, if you want to try just the .NET 4.8 runtime, you can download either of these:\r\n•\t[.NET 4.8 Web Installer](https://go.microsoft.com/fwlink/?LinkId=2018525) - requires an internet connection during installation \r\n•\t[.NET 4.8 Offline installer](https://go.microsoft.com/fwlink/?LinkId=2018531) - can be downloaded and installed later in a disconnected state\r\n\r\nPlease provide your feedback by [reporting an issue at the .NET Framework Early Access GitHub repository](https://github.com/Microsoft/dotnet-framework-early-access/issues/new).\r\n\r\n**Note**: this release is still under development, you can expect to see more features and fixes in future preview builds. Also, a reminder that this build is not supported for production use.\r\n\r\nThis preview build 3646 includes improvements/fixes in the following areas:\r\n•\t**[Runtime]** JIT and NGEN improvements\r\n•\t**[Windows Forms]** Accessibility enhancements\r\n•\t**[WPF]** SelectionTextBrush Property\r\n•\t**[BCL]** Updated ZLib\r\n\r\nYou can see the complete list of improvements in this build [here](https://github.com/Microsoft/dotnet-framework-early-access/blob/master/release-notes/NET48/build-3646/changes.md).\r\n\r\n.NET Framework build 3646 is also included in the next update for Windows 10. You can sign up for [Windows Insiders](https://insider.windows.com/en-us/) to validate that your applications work great on the latest .NET Framework included in the latest Windows 10 releases.\r\n","Url":"https://github.com/dotnet/announcements/issues/85","RelatedDescription":"Open issue \"NET Framework 4.8 Early Access build 3646 is available!\" (#85)"},{"Id":"359151445","IsPullRequest":false,"CreatedAt":"2018-09-11T17:44:50","Actor":"leecow","Number":"84","RawContent":null,"Title":"September 2018 .NET Updates","State":"open","Body":"# September 2018 .NET Updates\r\n\r\nThe following .NET updates were released in September 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework September 2018 Security and Quality Rollup - September 11, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/09/11/net-framework-september-2018-security-and-quality-rollup/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core September 2018 Update - September 11, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.4/2.1.4.md)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/84","RelatedDescription":"Open issue \"September 2018 .NET Updates\" (#84)"},{"Id":"359136325","IsPullRequest":false,"CreatedAt":"2018-09-11T17:00:55","Actor":"blowdart","Number":"83","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability in .NET Core when System.IO.Pipelines improperly handles requests. An attacker who successfully exploited this vulnerability could cause a denial of service against an application that is leveraging System.IO.Pipelines. The vulnerability can be exploited remotely, without authentication. A remote unauthenticated attacker could exploit this vulnerability by providing specially crafted requests to the application.\r\n\r\nThe update addresses the vulnerability by correcting how System.IO.Pipelines handles requests.\r\n\r\nIf you are using ASP.NET Core 2.1 you will also need to update your ASP.NET version this by following the instructions in the [ASP.NET Core bulletin](https://github.com/aspnet/Announcements/issues/316).\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/32228\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.IO.Pipelines package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.IO.Pipelines | 4.5.0 | 4.5.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications which use System.IO.Pipelines\r\n\r\nSystem.IO.Pipelines is distributed both in ASP.NET Core 2.1 and separately as a NuGet package. If you are not using Microsoft.AspNetCore.App or .All, you may still be affected if you are referencing the System.IO.Pipelines package.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.IO.Pipelines/4.5.0` is a reference to version 4.5.0 of `System.IO.Pipelines`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.IO.Pipelines` version 4.5.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8409](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8409)\r\n\r\n### Revisions\r\n\r\nV1.0 (September 11, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-09-11_\r\n","Url":"https://github.com/dotnet/announcements/issues/83","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability\" (#83)"},{"Id":"357399856","IsPullRequest":false,"CreatedAt":"2018-09-05T20:56:25","Actor":"richlander","Number":"82","RawContent":null,"Title":".NET Core Runtime ARM64 Status","State":"open","Body":"# .NET Core Runtime ARM64 Status\r\n\r\nThe .NET Core team is in the process of adding support for ARM64, as part of the .NET Core 3.0 project. This issue will be updated as ARM64 support progresses.\r\n\r\n[.NET Core 3.0 Preview 1](https://github.com/dotnet/core/issues/2099) includes support for Linux ARM64. Please try this build and provide support.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/coreclr #19843](https://github.com/dotnet/coreclr/issues/19843)\r\n\r\n## Current Status\r\n\r\nARM64 builds are functional, for console and ASP.NET Core apps.\r\n\r\n## Details\r\n\r\nInitial support for ARM64 was added in the .NET Core 2.1 release. The team is not maintaining .NET Core 2.x branches with respect to ARM64. All ARM64 improvements will be made in the .NET Core 3.0 branch (currently [master](https://github.com/dotnet/coreclr)).\r\n\r\nSee [Installing .NET Core 3.0 on Linux ARM64](https://gist.github.com/richlander/467813274cea8abc624553ee72b28213) to install .NET Core on your ARM64 machine. Builds are available from the [daily builds page](https://github.com/dotnet/core/blob/master/daily-builds.md).\r\n\r\n## Bug Queries\r\n\r\nthe following bugs queries are available for ARM64:\r\n\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues?q=is%3Aopen+is%3Aissue+label%3Aarch-arm64)\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues?q=is%3Aopen+is%3Aissue+label%3Aarch-arm64)\r\n\r\n## Operating Systems\r\n\r\n.NET Core 3.0 ARM64 builds are tested on the following operating systems:\r\n\r\n* Ubuntu 16.04 and 18.04\r\n* Debian 9\r\n\r\n## Test Hardware\r\n\r\n.NET Core 3.0 ARM64 builds have been tested on the following hardware:\r\n\r\n* [NVIDIA Jetson TX2 Module](https://developer.nvidia.com/embedded/buy/jetson-tx2)\r\n* [Pine A64](https://www.pine64.org/?page_id=46823)\r\n* [Qualcomm Centriq 2400](https://www.qualcomm.com/products/qualcomm-centriq-2400-processor)\r\n* [Qualcomm Snapdragon](https://www.qualcomm.com/snapdragon/always-connected-pc)\r\n* [Raspberry Pi3](https://www.raspberrypi.org/products/raspberry-pi-3-model-b-plus/)","Url":"https://github.com/dotnet/announcements/issues/82","RelatedDescription":"Open issue \".NET Core Runtime ARM64 Status\" (#82)"},{"Id":"349693735","IsPullRequest":false,"CreatedAt":"2018-08-22T18:23:01","Actor":"richlander","Number":"80","RawContent":null,"Title":"Improving Performance of ARM32 Docker Images with .NET Core Package Cache","State":"closed","Body":"# Improving Performance of ARM32 Docker Images with .NET Core Package Cache\r\n\r\n.NET Core SDK distributions include a compressed copy of NuGet packages for .NET Core, ASP.NET Core and EF Core. These packages are decompressed upon installation of the .NET Core SDK. The packages are not currently included in ARM32 distributions due to the time and space cost to decompress the packages. Instead, they will be added to [.NET Core ARM32 Docker images](https://hub.docker.com/r/microsoft/dotnet/), where these costs can be paid as part of image creation.\r\n\r\nThese NuGet packages include content for two purposes:\r\n\r\n- Reference assemblies for .NET Core, for code compilation.\r\n- Pre-compiled assemblies (compiled with [crossgen](https://github.com/dotnet/coreclr/blob/master/Documentation/building/crossgen.md)) for .NET Core, for use in self-contained applications.\r\n\r\nIn both cases, the presence of these packages avoid the need to access remote NuGet feeds for .NET Core assemblies as part of package restore.\r\n\r\nThis change only affects [.NET Core 2.1 SDK ARM32 Docker images](https://hub.docker.com/r/microsoft/dotnet/). This change will be made in August 2018.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #653](https://github.com/dotnet/dotnet-docker/issues/653)\r\n\r\n## .NET Core SDK NugetFallbackFolder\r\n\r\nThe .NET Core SDK includes a compressed copy of all NuGet package, in LZMA format. It exists at the following version-specific location:\r\n\r\n```\r\nroot@3778032bc43d:/# ls -l /usr/share/dotnet/sdk/2.1.302/*.lzma\r\n-rw-r--r-- 1 1004 sudo 35995936 Jul  2 22:51 /usr/share/dotnet/sdk/2.1.302/nuGetPackagesArchive.lzma\r\n```\r\n\r\nThis file is decompressed to the following location: `/usr/share/dotnet/sdk/NuGetFallbackFolder/`\r\n\r\nA package restore for a .NET Core assembly will restore the assembly from the NuGetFallbackFolder location and copy it to the user NuGet cache. At that point, regular NuGet behavior is used.\r\n\r\n## Impact of this change\r\n\r\nThere should be no functional difference in behavior after this change. .NET SDK commands should complete faster and require fewer package restore network requests.\r\n\r\nThe following examples demonstrates the benefit of this change. The improvement can be observed with package restore. Build times (assuming no restore) are not affected.\r\n\r\n### .NET Core 2.1 SDK image after this change\r\n\r\n> The change has already been made in the `microsoft/dotnet-nightly` repo, as you can see in the example below. In August, this same change will be made available in the `microsoft/dotnet` repo.\r\n\r\n```console\r\npi@raspberrypi:~ $ docker run -it --rm microsoft/dotnet-nightly:2.1-sdk\r\nroot@416731f24915:/# time dotnet new mvc -o mvcapp\r\nGetting ready...\r\nThe template \"ASP.NET Core Web App (Model-View-Controller)\" was created successfully.\r\nThis template contains technologies from parties other than Microsoft, see https://aka.ms/aspnetcore-template-3pn-210 for details.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on mvcapp/mvcapp.csproj...\r\n  Restoring packages for /mvcapp/mvcapp.csproj...\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.props.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.targets.\r\n  Restore completed in 6.68 sec for /mvcapp/mvcapp.csproj.\r\n\r\nRestore succeeded.\r\n\r\n\r\nreal    0m32.496s\r\nuser    0m35.820s\r\nsys     0m4.280s\r\nroot@416731f24915:/# cd mvcapp/\r\nroot@416731f24915:/mvcapp# time dotnet build\r\nMicrosoft (R) Build Engine version 15.8.138-preview+ge0cd4f1c1f for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 524.78 ms for /mvcapp/mvcapp.csproj.\r\n/usr/share/dotnet/sdk/2.1.401-preview-009081/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.RuntimeIdentifierInference.targets(143,5): message NETSDK1057: You are working with a preview version of the .NET Core SDK. You can define the SDK version via a global.json file in the current project. More at https://go.microsoft.com/fwlink/?linkid=869452 [/mvcapp/mvcapp.csproj]\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.dll\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.Views.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:02:09.15\r\n\r\nreal    2m13.377s\r\nuser    1m25.260s\r\nsys     0m9.420s\r\nroot@416731f24915:/mvcapp#\r\n```\r\n\r\n### .NET Core 2.1 SDK image before this change\r\n\r\n```console\r\npi@raspberrypi:~ $ docker run -it --rm microsoft/dotnet:2.1-sdk\r\nroot@9d1d5e45df6a:/# time dotnet new mvc -o mvcapp\r\nGetting ready...\r\nThe template \"ASP.NET Core Web App (Model-View-Controller)\" was created successfully.\r\nThis template contains technologies from parties other than Microsoft, see https://aka.ms/aspnetcore-template-3pn-210 for details.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on mvcapp/mvcapp.csproj...\r\n  Restoring packages for /mvcapp/mvcapp.csproj...\r\n  Installing System.Xml.XmlSerializer 4.3.0.\r\n  Installing System.Threading.Tasks.Extensions 4.0.0.\r\n  Installing System.Globalization.Extensions 4.0.1.\r\n  Installing runtime.native.System.Security.Cryptography 4.0.0.\r\n  Installing System.Security.Cryptography.OpenSsl 4.0.0.\r\n  Installing System.Security.Cryptography.Cng 4.2.0.\r\n  Installing System.Security.Cryptography.Csp 4.0.0.\r\n  Installing runtime.native.System.Net.Http 4.0.1.\r\n  Installing runtime.native.System 4.0.0.\r\n  Installing runtime.native.System.IO.Compression 4.1.0.\r\n  Installing System.Buffers 4.0.0.\r\n  Installing System.Private.DataContractSerialization 4.3.0.\r\n  Installing System.Security.Principal 4.3.0.\r\n  Installing runtime.osx.10.10-x64.runtime.native.System.Security.Cryptography.Apple 4.3.0.\r\n  Installing runtime.rhel.7-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.ubuntu.14.04-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.opensuse.42.1-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.NETCore.App 2.1.0.\r\n  Installing runtime.ubuntu.16.10-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.App 2.1.1.\r\n  Installing runtime.ubuntu.16.04-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.NETCore.Platforms 2.1.0.\r\n  Installing Microsoft.NETCore.Targets 2.1.0.\r\n  Installing NETStandard.Library 2.0.3.\r\n  Installing Microsoft.NETCore.DotNetHostPolicy 2.1.0.\r\n  Installing Microsoft.AspNetCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Antiforgery 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Session 2.1.1.\r\n  Installing Microsoft.AspNetCore.SpaServices 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.KeyPerFile 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Hosting 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Embedded 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Physical 2.1.1.\r\n  Installing Microsoft.Extensions.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Cookies 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Core 2.1.1.\r\n  Installing runtime.osx.10.10-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.Authentication.Google 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Facebook 2.1.1.\r\n  Installing Microsoft.Extensions.Hosting.Abstractions 2.1.1.\r\n  Installing runtime.opensuse.13.2-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.HttpsPolicy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.MicrosoftAccount 2.1.1.\r\n  Installing Microsoft.Extensions.Http 2.1.1.\r\n  Installing Microsoft.AspNetCore.MiddlewareAnalysis 2.1.1.\r\n  Installing Microsoft.Extensions.FileSystemGlobbing 2.1.1.\r\n  Installing Microsoft.Extensions.DiagnosticAdapter 2.1.0.\r\n  Installing Microsoft.Extensions.Identity.Core 2.1.1.\r\n  Installing Microsoft.Extensions.Identity.Stores 2.1.1.\r\n  Installing Microsoft.Extensions.Options.ConfigurationExtensions 2.1.1.\r\n  Installing Microsoft.Extensions.Localization.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Abstractions 2.1.1.\r\n  Installing runtime.fedora.24-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.Options 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Composite 2.1.1.\r\n  Installing Microsoft.Extensions.Logging 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Configuration 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.TraceSource 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.UserSecrets 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Debug 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Console 2.1.1.\r\n  Installing Microsoft.Extensions.DependencyInjection 2.1.1.\r\n  Installing Microsoft.Extensions.ObjectPool 2.1.1.\r\n  Installing runtime.debian.8-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.DependencyInjection.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Binder 2.1.1.\r\n  Installing runtime.fedora.23-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.Configuration.EnvironmentVariables 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.FileExtensions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.Memory 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.CommandLine 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.Abstractions 2.1.1.\r\n  Installing Microsoft.Net.Http.Headers 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.InMemory 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Ini 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Analyzers 2.1.1.\r\n  Installing Microsoft.AspNetCore.StaticFiles 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Relational 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Https 2.1.1.\r\n  Installing Microsoft.Extensions.Primitives 2.1.1.\r\n  Installing Microsoft.AspNetCore.SpaServices.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel 2.1.1.\r\n  Installing Microsoft.Extensions.WebEncoders 2.1.1.\r\n  Installing Microsoft.AspNetCore.WebUtilities 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR 1.0.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets 2.1.1.\r\n  Installing Microsoft.AspNetCore.Routing 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Tools 2.1.1.\r\n  Installing Microsoft.AspNetCore.Routing.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Rewrite 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCaching.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Transport.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCaching 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCompression 2.1.1.\r\n  Installing System.Globalization.Extensions 4.3.0.\r\n  Installing Microsoft.AspNetCore.Razor.Language 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.TagHelpers 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor.Runtime 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.RazorPages 2.1.1.\r\n  Installing Microsoft.AspNetCore.Owin 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor.ViewCompilation 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Analyzers 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Formatters.Json 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Design 2.1.1.\r\n  Installing Microsoft.AspNetCore.WebSockets 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Cors 2.1.1.\r\n  Installing System.Diagnostics.DiagnosticSource 4.3.0.\r\n  Installing Microsoft.AspNetCore.Mvc.DataAnnotations 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.ApiExplorer 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Formatters.Xml 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.EventSource 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.OAuth 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Json 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR.Protocols.Json 1.0.1.\r\n  Installing Microsoft.AspNetCore.NodeServices 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR.Common 1.0.1.\r\n  Installing Microsoft.AspNetCore.JsonPatch 2.1.1.\r\n  Installing Microsoft.AspNetCore.Localization.Routing 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.IISIntegration 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity.UI 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor.Design 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity.EntityFrameworkCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.HttpOverrides 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Features 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Connections 1.0.1.\r\n  Installing Microsoft.AspNetCore.Http.Connections.Common 1.0.1.\r\n  Installing Microsoft.AspNetCore.Http 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cors 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting.Server.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cryptography.Internal 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cryptography.KeyDerivation 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.HostFiltering 2.1.1.\r\n  Installing Microsoft.CSharp 4.0.1.\r\n  Installing Microsoft.AspNetCore.CookiePolicy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Core 2.1.1.\r\n  Installing Microsoft.AspNetCore.Html.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Twitter 2.1.1.\r\n  Installing Microsoft.AspNetCore.Connections.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authorization.Policy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authorization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.HttpSys 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Xml 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.SqlServer 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.SqlServer 2.1.1.\r\n  Installing Microsoft.AspNet.WebApi.Client 5.2.6.\r\n  Installing Microsoft.AspNetCore.SignalR.Core 1.0.1.\r\n  Installing Microsoft.AspNetCore.Mvc.ViewFeatures 2.1.1.\r\n  Installing Microsoft.CodeAnalysis.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.JwtBearer 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.OpenIdConnect 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.WsFederation 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore 2.1.1.\r\n  Installing System.Runtime.Serialization.Primitives 4.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Core 2.1.1.\r\n  Installing System.Xml.ReaderWriter 4.0.11.\r\n  Installing Microsoft.NETCore.DotNetHostResolver 2.1.0.\r\n  Installing System.Diagnostics.DiagnosticSource 4.5.0.\r\n  Installing System.ComponentModel.Annotations 4.5.0.\r\n  Installing System.Buffers 4.5.0.\r\n  Installing System.Memory 4.5.1.\r\n  Installing System.Runtime.CompilerServices.Unsafe 4.5.1.\r\n  Installing System.Text.Encodings.Web 4.5.0.\r\n  Installing Microsoft.CSharp 4.5.0.\r\n  Installing System.Net.WebSockets.WebSocketProtocol 4.5.1.\r\n  Installing Newtonsoft.Json 11.0.2.\r\n  Installing System.IO.Pipelines 4.5.0.\r\n  Installing System.Numerics.Vectors 4.5.0.\r\n  Installing System.Security.Principal.Windows 4.5.0.\r\n  Installing System.Threading.Tasks.Extensions 4.5.1.\r\n  Installing System.Security.Cryptography.Cng 4.5.0.\r\n  Installing System.Net.Http 4.1.0.\r\n  Installing System.Security.Cryptography.Xml 4.5.0.\r\n  Installing Microsoft.Win32.Registry 4.5.0.\r\n  Installing System.Reflection.Metadata 1.6.0.\r\n  Installing System.Data.SqlClient 4.5.1.\r\n  Installing Newtonsoft.Json.Bson 1.0.1.\r\n  Installing Newtonsoft.Json 10.0.1.\r\n  Installing System.Threading.Channels 4.5.0.\r\n  Installing System.Reflection.Emit 4.3.0.\r\n  Installing Microsoft.CodeAnalysis.CSharp 2.8.0.\r\n  Installing Microsoft.CodeAnalysis.Common 2.8.0.\r\n  Installing System.Security.Cryptography.Algorithms 4.2.0.\r\n  Installing Microsoft.IdentityModel.Protocols.OpenIdConnect 5.2.0.\r\n  Installing System.IdentityModel.Tokens.Jwt 5.2.0.\r\n  Installing Microsoft.IdentityModel.Protocols.WsFederation 5.2.0.\r\n  Installing System.Collections.Immutable 1.5.0.\r\n  Installing Remotion.Linq 2.2.0.\r\n  Installing System.Interactive.Async 3.1.1.\r\n  Installing Microsoft.Extensions.DependencyModel 2.1.0.\r\n  Installing Microsoft.NETCore.DotNetAppHost 2.1.0.\r\n  Installing Microsoft.NETCore.Platforms 2.0.0.\r\n  Installing System.Security.Cryptography.Pkcs 4.5.0.\r\n  Installing System.Security.Permissions 4.5.0.\r\n  Installing System.Security.AccessControl 4.5.0.\r\n  Installing NETStandard.Library 1.6.1.\r\n  Installing System.Text.Encoding.CodePages 4.5.0.\r\n  Installing System.Linq 4.3.0.\r\n  Installing runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing System.Diagnostics.Debug 4.3.0.\r\n  Installing System.Globalization 4.3.0.\r\n  Installing System.IO 4.3.0.\r\n  Installing System.Collections 4.3.0.\r\n  Installing System.Runtime.Serialization.Primitives 4.3.0.\r\n  Installing System.Runtime.Serialization.Formatters 4.3.0.\r\n  Installing System.Xml.XmlDocument 4.3.0.\r\n  Installing System.Threading 4.3.0.\r\n  Installing System.Resources.ResourceManager 4.3.0.\r\n  Installing System.Text.Encoding.Extensions 4.3.0.\r\n  Installing System.Xml.XDocument 4.3.0.\r\n  Installing System.Threading.Tasks 4.3.0.\r\n  Installing System.Linq.Expressions 4.3.0.\r\n  Installing System.Runtime.Numerics 4.3.0.\r\n  Installing System.Text.Encoding 4.3.0.\r\n  Installing System.Reflection.Extensions 4.3.0.\r\n  Installing System.Text.RegularExpressions 4.3.0.\r\n  Installing System.Runtime.Extensions 4.3.0.\r\n  Installing System.Reflection 4.3.0.\r\n  Installing System.ObjectModel 4.3.0.\r\n  Installing System.Dynamic.Runtime 4.3.0.\r\n  Installing System.Xml.ReaderWriter 4.3.0.\r\n  Installing Microsoft.CSharp 4.3.0.\r\n  Installing System.ComponentModel.TypeConverter 4.3.0.\r\n  Installing System.Runtime 4.3.0.\r\n  Installing System.Reflection.Emit.ILGeneration 4.3.0.\r\n  Installing System.Reflection.Primitives 4.3.0.\r\n  Installing System.AppContext 4.3.0.\r\n  Installing System.Console 4.3.0.\r\n  Installing System.Collections.Concurrent 4.3.0.\r\n  Installing System.Diagnostics.Tools 4.3.0.\r\n  Installing System.Security.Cryptography.Encoding 4.0.0.\r\n  Installing System.IO.Compression 4.3.0.\r\n  Installing System.IO.FileSystem 4.3.0.\r\n  Installing System.IO.FileSystem.Primitives 4.3.0.\r\n  Installing System.Security.Cryptography.Encoding 4.3.0.\r\n  Installing System.Collections.Immutable 1.3.1.\r\n  Installing System.Runtime.InteropServices 4.3.0.\r\n  Installing System.Security.Cryptography.X509Certificates 4.1.0.\r\n  Installing System.Diagnostics.StackTrace 4.3.0.\r\n  Installing System.Reflection.Metadata 1.4.2.\r\n  Installing System.Threading.Thread 4.3.0.\r\n  Installing Microsoft.CodeAnalysis.Analyzers 1.1.0.\r\n  Installing System.Security.Cryptography.X509Certificates 4.3.0.\r\n  Installing System.ValueTuple 4.3.0.\r\n  Installing System.Diagnostics.FileVersionInfo 4.3.0.\r\n  Installing System.Threading.Tasks.Parallel 4.3.0.\r\n  Installing System.Security.Cryptography.Algorithms 4.3.0.\r\n  Installing System.Xml.XPath.XDocument 4.3.0.\r\n  Installing System.Text.Encoding.CodePages 4.3.0.\r\n  Installing System.Runtime.InteropServices 4.1.0.\r\n  Installing Microsoft.IdentityModel.Protocols 5.2.0.\r\n  Installing Microsoft.IdentityModel.Tokens 5.2.0.\r\n  Installing Microsoft.IdentityModel.Xml 5.2.0.\r\n  Installing System.Diagnostics.Debug 4.0.11.\r\n  Installing System.Reflection.Extensions 4.0.1.\r\n  Installing Microsoft.IdentityModel.Tokens.Saml 5.2.0.\r\n  Installing System.Runtime.Extensions 4.1.0.\r\n  Installing System.Threading 4.0.11.\r\n  Installing System.Collections 4.0.11.\r\n  Installing System.Reflection 4.1.0.\r\n  Installing System.ObjectModel 4.0.12.\r\n  Installing System.Linq 4.1.0.\r\n  Installing System.Linq.Queryable 4.0.1.\r\n  Installing System.Linq.Expressions 4.1.0.\r\n  Installing System.Runtime 4.1.0.\r\n  Installing NETStandard.Library 1.6.0.\r\n  Installing System.Dynamic.Runtime 4.0.11.\r\n  Installing Newtonsoft.Json 9.0.1.\r\n  Installing Microsoft.DotNet.PlatformAbstractions 2.1.0.\r\n  Installing System.Runtime.CompilerServices.Unsafe 4.5.0.\r\n  Installing runtime.win-x64.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing runtime.win-x86.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing runtime.win-arm64.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing Microsoft.NETCore.Platforms 1.1.0.\r\n  Installing Microsoft.Win32.Primitives 4.3.0.\r\n  Installing System.Net.Sockets 4.3.0.\r\n  Installing System.Diagnostics.Tracing 4.3.0.\r\n  Installing System.IO.Compression.ZipFile 4.3.0.\r\n  Installing System.Globalization.Calendars 4.3.0.\r\n  Installing System.Threading.Timer 4.3.0.\r\n  Installing System.Security.Cryptography.Primitives 4.3.0.\r\n  Installing System.Runtime.InteropServices.RuntimeInformation 4.0.0.\r\n  Installing System.Runtime.Handles 4.3.0.\r\n  Installing System.Runtime.InteropServices.RuntimeInformation 4.3.0.\r\n  Installing System.Net.Http 4.3.0.\r\n  Installing Microsoft.NETCore.Targets 1.1.0.\r\n  Installing System.Net.Primitives 4.3.0.\r\n  Installing System.Reflection.Emit.Lightweight 4.3.0.\r\n  Installing System.Reflection.TypeExtensions 4.3.0.\r\n  Installing System.Threading.Tasks.Extensions 4.3.0.\r\n  Installing System.ComponentModel 4.3.0.\r\n  Installing System.ComponentModel.Primitives 4.3.0.\r\n  Installing System.Collections.NonGeneric 4.3.0.\r\n  Installing System.Collections.Specialized 4.3.0.\r\n  Installing runtime.native.System 4.3.0.\r\n  Installing runtime.native.System.IO.Compression 4.3.0.\r\n  Installing System.Buffers 4.3.0.\r\n  Installing runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.native.System.Net.Http 4.3.0.\r\n  Installing System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing System.Security.Cryptography.Cng 4.3.0.\r\n  Installing System.Security.Cryptography.Csp 4.3.0.\r\n  Installing runtime.native.System.Security.Cryptography.Apple 4.3.0.\r\n  Installing System.Xml.XPath 4.3.0.\r\n  Installing Microsoft.IdentityModel.Logging 5.2.0.\r\n  Installing System.Diagnostics.Contracts 4.3.0.\r\n  Installing System.Runtime.Serialization.Xml 4.3.0.\r\n  Installing Microsoft.NETCore.Platforms 1.0.1.\r\n  Installing Microsoft.NETCore.Targets 1.0.1.\r\n  Installing System.Security.Claims 4.3.0.\r\n  Installing System.Reflection.Primitives 4.0.1.\r\n  Installing System.IO 4.1.0.\r\n  Installing System.Globalization 4.0.11.\r\n  Installing System.Threading.Tasks 4.0.11.\r\n  Installing System.Resources.ResourceManager 4.0.1.\r\n  Installing System.Reflection.Emit 4.0.1.\r\n  Installing System.Reflection.TypeExtensions 4.1.0.\r\n  Installing System.Reflection.Emit.ILGeneration 4.0.1.\r\n  Installing System.Reflection.Emit.Lightweight 4.0.1.\r\n  Installing System.AppContext 4.1.0.\r\n  Installing System.Collections.Concurrent 4.0.12.\r\n  Installing System.IO.FileSystem.Primitives 4.0.1.\r\n  Installing System.Runtime.Numerics 4.0.1.\r\n  Installing System.Security.Cryptography.Primitives 4.0.0.\r\n  Installing System.Xml.XDocument 4.0.11.\r\n  Installing System.Text.RegularExpressions 4.1.0.\r\n  Installing Microsoft.Win32.Primitives 4.0.1.\r\n  Installing System.Console 4.0.0.\r\n  Installing System.Diagnostics.Tools 4.0.1.\r\n  Installing System.Diagnostics.Tracing 4.1.0.\r\n  Installing System.Globalization.Calendars 4.0.1.\r\n  Installing System.IO.FileSystem 4.0.1.\r\n  Installing System.Net.Sockets 4.1.0.\r\n  Installing System.Text.Encoding 4.0.11.\r\n  Installing System.Threading.Timer 4.0.1.\r\n  Installing System.Net.Primitives 4.0.11.\r\n  Installing System.Runtime.Handles 4.0.1.\r\n  Installing System.Text.Encoding.Extensions 4.0.11.\r\n  Installing System.IO.Compression.ZipFile 4.0.1.\r\n  Installing System.IO.Compression 4.1.0.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.props.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.targets.\r\n  Restore completed in 44.04 sec for /mvcapp/mvcapp.csproj.\r\n\r\nRestore succeeded.\r\n\r\n\r\nreal    1m8.386s\r\nuser    1m8.010s\r\nsys     0m18.190s\r\nroot@9d1d5e45df6a:/# cd mvcapp/\r\nroot@9d1d5e45df6a:/mvcapp# time dotnet build\r\nMicrosoft (R) Build Engine version 15.7.179.6572 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 557.76 ms for /mvcapp/mvcapp.csproj.\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.dll\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.Views.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:02:07.34\r\n\r\nreal    2m11.716s\r\nuser    1m22.990s\r\nsys     0m8.880s\r\nroot@9d1d5e45df6a:/mvcapp#\r\n```\r\n","Url":"https://github.com/dotnet/announcements/issues/80","RelatedDescription":"Closed issue \"Improving Performance of ARM32 Docker Images with .NET Core Package Cache\" (#80)"},{"Id":"350233220","IsPullRequest":false,"CreatedAt":"2018-08-13T23:50:57","Actor":"richlander","Number":"81","RawContent":null,"Title":"Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+","State":"open","Body":"# Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+\r\n\r\nAn [issue with serializing/deserializing a CultureAwareComparer](https://github.com/Microsoft/dotnet/blob/master/releases/net471/KnownIssues/521954%20-%20BCL%20CultureAwareComparer%20with%20ignore%20casing%20on%20serialized%20on%20previous%20versions%20of%20.NET%20do%20not%20correctly%20deserialize%20on%20.NET%204.7.1.md) was discovered with [.NET Framework 4.7.1](https://blogs.msdn.microsoft.com/dotnet/2017/10/17/announcing-the-net-framework-4-7-1/). This issue was resolved earlier this year, with the [May 2018 Preview of Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/15/net-framework-may-2018-preview-of-quality-rollup/). We recently learned that some applications, including Johnson Controls’ C-CURE 9000 Software, were negatively impacted by this change as this update requires all client and server workstations to be updated simultaneously with the appropriate Microsoft updates. The changes made to .NET Framework 4.7.1 were also integrated into .NET Framework 4.6 and later servicing releases. As a result, this advisory applies to .NET Framework 4.6 and later versions.\r\n\r\nThis advisory is provided so that developers can correctly diagnose this issue and be aware of our guidance. We will continue to update this issue as we have new information to share.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [microsoft/dotnet #832](https://github.com/Microsoft/dotnet/issues/832)\r\n\r\n## Guidance\r\n\r\nThis guidance only applies to customers that have experienced this issue.\r\n\r\nWe have released [an update for .NET Framework 4.6](https://blogs.msdn.microsoft.com/dotnet/2018/08/30/net-framework-august-2018-preview-of-quality-rollup/) and later that resolves the issue. **You must deploy the .NET Framework update for this issue to all .NET Framework 4.6+ machines that communicate via serialized objects**. After doing that, cross-machine serialization will work as expected. \r\n \r\nPlease consult your software vendor to understand if this impacts the software you are using.\r\n\r\n## Technical Context\r\n\r\nIn the [May 2018 Preview of Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/15/net-framework-may-2018-preview-of-quality-rollup/), we made a change to the internal type CultureAwareComparer to implement ISerializable. We made the change in order to address [issue with serializing/deserializing a CultureAwareComparer](https://github.com/Microsoft/dotnet/blob/master/releases/net471/KnownIssues/521954%20-%20BCL%20CultureAwareComparer%20with%20ignore%20casing%20on%20serialized%20on%20previous%20versions%20of%20.NET%20do%20not%20correctly%20deserialize%20on%20.NET%204.7.1.md).\r\n\r\nThe issue reported was that a type that contains an instance of CultureAwareComparer was not able to correctly serialize and deserialize across different versions of the .NET Framework. There are a few types in .NET Framework that do this, the most commonly impacted one being the Dictionary<TKey, TValue> type.\r\n \r\nThe change to implement the ISerializable interface had unintended side effects when exchanging this type across different machines. We have had a small number of reports from customers who have been affected.\r\n\r\nA common, but not unique way, of exchanging objects across machines is to use WCF in conjunction with a serializer. One of the common serializers being DataContractSerializer. The side-effect of the change prevented data serialized on systems where the type implements ISerializable to correctly deserialize of systems where the type does NOT implement ISerializable. The same is true of the opposite case, that systems where the type does not implement ISerializable will not correctly deserialize data from systems where the type does implement ISerializable.\r\n\r\nWe have an updated fix that we intend to release within the next month that will remove the implementation of the ISerializable interface on the type and use a different internal mechanism for ensuring the cross-version serialization continues to work as expected. This change addresses the break experienced with WCF.\r\n\r\nThe upcoming fix will remove the implementation of the ISerializable interface on the type and use a different mechanism for ensuring the cross-version serialization of that type continues to work. This change addresses the break experienced with WCF.\r\n\r\n## Symptoms\r\n\r\nAn application that is affected by this issue will most likely crash when trying to deserialize an object. It may print or log an error message similar to the following one:\r\n\r\n```\r\nThe formatter threw an exception while trying to deserialize the message: \r\nThere was an error while trying to deserialize parameter . The InnerException message was ''EndElement' 'Comparer' from namespace '' is not expected. Expecting element '_compareInfo'.'.  Please see InnerException for more details.\r\n```\r\n","Url":"https://github.com/dotnet/announcements/issues/81","RelatedDescription":"Open issue \"Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+\" (#81)"},{"Id":"348162872","IsPullRequest":false,"CreatedAt":"2018-08-07T04:26:40","Actor":"richlander","Number":"79","RawContent":null,"Title":"August 2018 .NET Updates","State":"open","Body":"# August 2018 .NET Updates\r\n\r\nThe following .NET updates were released in August 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework \r\n\r\n* [August 2018 .NET Framework Security and Quality Rollup - August 14, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/08/14/august-2018-security-and-quality-rollup/)\r\n* [Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+](https://github.com/dotnet/announcements/issues/81)\r\n* [Advisory on July 2018 .NET Framework Updates](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/)\r\n* [August 2018 Preview of Quality Rollup - August 30, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/08/30/net-framework-august-2018-preview-of-quality-rollup/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core August 2018 Update - August 21, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.3/2.1.3.md)\r\n* [.NET Core 2.1.400 SDK Update - August 14, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.400-SDK/2.1.400-sdk.md)\r\n\r\n## End of Support for Operating System Versions\r\n\r\n.NET Core does not support systems that are out of support. The following operating systems are now out of support. To stay supported, move to a [later version of the given operating system](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md).\r\n\r\n* [Debian 8 -- Jessie](https://lists.debian.org/debian-security-announce/2018/msg00132.html)\r\n* [Ubuntu 17.10 -- Artful Aardvark](https://lists.ubuntu.com/archives/ubuntu-announce/2018-July/000232.html)\r\n\r\nSee [Debian Jessie End of Life -- Impact on .NET Core Docker Images](https://github.com/dotnet/announcements/issues/78)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/79","RelatedDescription":"Open issue \"August 2018 .NET Updates\" (#79)"},{"Id":"348161534","IsPullRequest":false,"CreatedAt":"2018-08-07T04:18:01","Actor":"richlander","Number":"78","RawContent":null,"Title":"Debian Jessie End of Life -- Impact on .NET Core Docker Images","State":"open","Body":"# Debian Jessie End of Life -- Impact on .NET Core Docker Images\r\n\r\nDebian Jessie (AKA Debian 8) is now [out of support](https://lists.debian.org/debian-security-announce/2018/msg00132.html). Debian Jessie is no longer a supported operating system for .NET Core. Docker users need to switch to Debian Stretch-based (AKA Debian 9) images to stay in support.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #647](https://github.com/dotnet/dotnet-docker/issues/647)\r\n\r\n## Context\r\n\r\nJessie-based images are currently provided for .NET Core 1.0, 1.1 and 2.0. .NET Core 1.0 and 1.1 expose multi-arch tags, such as `1.0-runtime` and `1.1-sdk`, that support Debian Jessie. When pulled for a Linux Docker daemon (on Linux or Windows), these tags pull Jessie-based images. .NET Core 2.0 supports Jessie, but it is not the default. .NET Core 2.0 multi-arch tags, such as `2.0-runtime` and `2.0-sdk`, pull Debian Stretch-based images, when pulled for a Linux Docker daemon. We made a conscious decision with .NET Core 2.0 to move off of Jessie as the default to avoid this problem, based the Jessie 2018 EOL date. .NET Core 2.1 does not support Jessie, only Stretch.\r\n\r\nWe recently posted about our policy for underlying operating system dependencies with Docker:\r\n\r\n> For each major and minor .NET version, we may take a new major operating system version dependency. As I mentioned earlier, we adopted Debian 9 as the base image for .NET Core 2.0. We stayed with Debian 9 for .NET Core 2.1, since Debian 10 (AKA “Buster”) has not been released. Debian 9 will remain the default base image for .NET Core 2.1 for the life of .NET Core 2.1. **Once we adopt an underlying operating system major version, we will not change it for the life of that given .NET release.**\r\n\r\nSource: https://blogs.msdn.microsoft.com/dotnet/2018/06/18/staying-up-to-date-with-net-container-images/\r\n\r\n## Plan\r\n\r\nWe will continue to re-build .NET Core 1.0 and 1.1 multi-arch tags on top of Jessie for the remaining [supported lifetime of .NET Core 1.0 and 1.1](https://github.com/dotnet/core/blob/master/microsoft-support.md). We will also provide a Stretch-based image for .NET Core 1.1. This tag will look like the following: `1.1-runtime-stretch` or `1.1.9-sdk-stretch`. This is same format that Jessie has used.\r\n\r\nWe will produce Jessie-based images for NET Core 2.0 until October 2018, which is when [.NET Core 2.0 support ends](https://github.com/dotnet/core/blob/master/microsoft-support.md). .NET Core 2.0 multi-arch tags support Debian Stretch, not Jessie, as described above.\r\n\r\nIn summary, .NET Core is no longer supported on Debian Jessie, with Docker or otherwise. We will produce Docker images for Jessie until .NET Core 1.0, 1.1 and 2.0 support ends, respectively, to avoid breaking applications. This aligns with the policy defined above, per [Staying up-to-date with .NET Container Images](https://blogs.msdn.microsoft.com/dotnet/2018/06/18/staying-up-to-date-with-net-container-images/).\r\n\r\n## Affected Repos\r\n\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/)\r\n* [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/)\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)","Url":"https://github.com/dotnet/announcements/issues/78","RelatedDescription":"Open issue \"Debian Jessie End of Life -- Impact on .NET Core Docker Images\" (#78)"},{"Id":"345028102","IsPullRequest":false,"CreatedAt":"2018-07-26T22:31:32","Actor":"leecow","Number":"77","RawContent":null,"Title":"https://dot.net now using TLS 1.2-only","State":"open","Body":"Earlier today, https://dot.net switched to using TLS 1.2-only. Most Windows Powershell instances default to TLS 1.1 and will thus fail with `wget : The underlying connection was closed: An unexpected error occurred on a send. trying to run the previous command.`\r\n\r\nAn example of a PowerShell script fix can be seen in https://github.com/dotnet/docs/pull/6689","Url":"https://github.com/dotnet/announcements/issues/77","RelatedDescription":"Open issue \"https://dot.net now using TLS 1.2-only\" (#77)"},{"Id":"343360319","IsPullRequest":false,"CreatedAt":"2018-07-21T22:29:05","Actor":"richlander","Number":"76","RawContent":null,"Title":"July 2018 .NET Updates","State":"open","Body":"# July 2018 .NET Updates\r\n\r\nThe following .NET updates were released in June 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework \r\n\r\n* [.NET Framework 4.7.2 is available on Windows Update, WSUS and MU Catalog](https://blogs.msdn.microsoft.com/dotnet/2018/07/10/net-framework-4-7-2-is-available-on-windows-update-wsus-and-mu-catalog/)\r\n* [Announcing .NET Framework 4.8 Early Access build 3632](https://blogs.msdn.microsoft.com/dotnet/2018/07/18/announcing-net-framework-4-8-early-access-build-3632/)\r\n* [Advisory on July 2018 .NET Framework Updates](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/)\r\n* [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/10/net-core-july-2018-update/)\r\n\r\n## .NET Core Support Policies\r\n\r\n* [Microsoft Support for .NET Core](https://github.com/dotnet/core/blob/master/microsoft-support.md)\r\n* [.NET Core Supported OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)\r\n* [April 2018](https://github.com/dotnet/announcements/issues/64)\r\n","Url":"https://github.com/dotnet/announcements/issues/76","RelatedDescription":"Open issue \"July 2018 .NET Updates\" (#76)"},{"Id":"343360017","IsPullRequest":false,"CreatedAt":"2018-07-21T22:22:25","Actor":"richlander","Number":"75","RawContent":null,"Title":"June 2018 .NET Updates","State":"open","Body":"# June 2018 .NET Updates\r\n\r\nThe following .NET updates were released in June 2018.\r\n\r\n## .NET Framework \r\n\r\n* [.NET Framework June 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/06/13/net-framework-june-2018-security-and-quality-rollup/)\r\n* [Announcing .NET Framework 4.8 Early Access build 3621!](https://blogs.msdn.microsoft.com/dotnet/2018/06/06/announcing-net-framework-4-8-early-access-build-3621/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core 2.1 June Update](https://blogs.msdn.microsoft.com/dotnet/2018/06/22/net-core-2-1-june-update/)\r\n* [.NET Core 2.0 will reach End of Life on October 1, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n* [.NET Core 1.0 and 1.1 EOL Dates Documented](https://github.com/dotnet/core/blob/master/microsoft-support.md)\r\n\r\n## Previous Updates\r\n\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)\r\n* [April 2018](https://github.com/dotnet/announcements/issues/64)\r\n* [February 2018](https://github.com/dotnet/announcements/issues/59)","Url":"https://github.com/dotnet/announcements/issues/75","RelatedDescription":"Open issue \"June 2018 .NET Updates\" (#75)"},{"Id":"343283437","IsPullRequest":false,"CreatedAt":"2018-07-21T00:56:48","Actor":"richlander","Number":"74","RawContent":null,"Title":"Advisory on July 2018 .NET Framework Updates","State":"open","Body":"# Advisory on July 2018 .NET Framework Updates\r\n\r\nUpdated: 08/14/2018\r\n\r\n> A new [.NET Framework August 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/08/14/august-2018-security-and-quality-rollup/) has been released that **resolves this advisory for all supported Windows versions**.\r\n\r\n~~A new [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/) has been released that resolves this advisory. See Guidance section.~~\r\n\r\n~~Guidance has changed for Windows 7, Windows Server 2008 and Windows Server 2008 R2. See Guidance section.~~\r\n\r\nThe [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356) was released earlier this month. We have received multiple customer reports of [applications that fail to start or don't run correctly](https://support.microsoft.com/en-us/help/4345913) after installing the July 2018 update. These reports are specific to applications that initialize a COM component and run with restricted permissions.\r\n\r\nWe have stopped distributing the .NET Framework July 2018 updates on Windows Update and are actively working on fixing and re-shipping this month's updates. If you installed the July 2018 update and have not yet seen any negative behavior, we recommend that you leave your systems as-is but closely monitor them and ensure that you apply upcoming .NET Framework updates.\r\n\r\nAs a team, we regret that this release was shipped with this flaw. This release was tested using our regular and extensive testing process. We discovered while investigating this issue that we have a test hole for the specific combination of COM activation and restricted permissions, including impersonation. We will be mitigating that gap going forward. Again, we are sorry for any inconvenience that this product flaw has caused.\r\n\r\nWe will continue to update this issue and [post](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/) as we have new information.\r\n\r\n## Discussion\r\nPlease share your thoughts/experience on this advisory and see what others are saying at:\r\n\r\n* [microsoft/dotnet #811](https://github.com/Microsoft/dotnet/issues/811)\r\n\r\n## Guidance\r\n\r\nWe strongly recommend that you install [.NET Framework August 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/08/14/august-2018-security-and-quality-rollup/).\r\n\r\n~~We recommend that you install [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/) on your systems if you experienced the symptoms described in this advisory. If you did not experience these symptoms, we recommend you wait to update your machines until the next regular update, in August.~~\r\n\r\n~~On Windows 7, Windows Server 2008, and Windows Server 2008 R2, we have found that the combination of [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356) and  [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/) do not resolve all symptoms. On these Windows versions, if you are experiencing these symptoms after installing this combination of patches, we recommend that you uninstall (only) the Monthly Rollup patch and then install the appropriate Security Only patch listed at [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356).~~\r\n\r\n## Technical Context\r\n\r\nThe .NET Framework runtime uses the process token to determine whether the process is being run within an elevated context. These system calls can fail if the required process inspection permissions are not present. This causes an “access denied\" error.\r\n\r\n## Symptoms\r\n\r\nA COM component fails to load because of “access denied,” “class not registered,” or “internal failure occurred for unknown reasons” errors. \r\n\r\nThe most commonly reported failure results in the following error message:\r\n\r\n```console\r\nException type: System.UnauthorizedAccessException\r\nMessage: Access is denied. (Exception from HRESULT: 0x80070005 (E_ACCESSDENIED))\r\n```\r\n\r\n### Sharepoint\r\n\r\nWhen users browse to a SharePoint site they may see the following HTTP 403 message:\r\n\r\n```console\r\n\"The Web Site declined to show this webpage\"\r\n```\r\n\r\nThe SharePoint ULS Logs will contain a message like the following:  \r\n\r\n```console\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General 0000       High                UnauthorizedAccessException for the request. 403 Forbidden will be returned. Error=An error occurred creating the configuration section handler for system.serviceModel/extensions: Could not load file or assembly <AssemblySignature>  or one of its dependencies. Access is denied. (C:\\Windows\\Microsoft.NET\\Framework64\\v2.0.50727\\Config\\machine.config line 180)    \r\n\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General b6p2      VerboseEx                Sending HTTP response 403:403 FORBIDDEN.      \r\n\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General 8nca       Verbose                Application error when access /, Error=Access is denied. (Exception from HRESULT: 0x80070005 (E_ACCESSDENIED))\r\n```\r\n\r\nWhen crawling a people content source, the request may fail with the following entry logged to the SharePoint ULS Log: \r\n\r\n```console\r\nmssearch.exe (0x118C) 0x203C SharePoint Server Search Crawler:Gatherer Plugin cd11 Warning The start address sps3s://<URLtoSite> cannot be crawled.  Context: Application 'Search_Service_Application', Catalog 'Portal_Content'  Details:  Class not registered   (0x80040154)  \r\n\r\nIIS Hosted Classic ASP calling CreateObject for .NET COM objects may receive error \"ActiveX component can't create object\" \r\n\r\n.NET Application creates instance of .NET COM application within an Impersonation Context may receive error \"0x80040154 (REGDB_E_CLASSNOTREG)\"\r\n```\r\n\r\n### BizTalk Server Administration Console\r\n\r\nBizTalk Server Administration Console fails to launch properly with the following errors: \r\n\r\n```console\r\nAn internal failure occurred for unknown reasons. (WinMgmt) \r\n\r\nProgram Location:  \r\n\r\n   at System.Runtime.InteropServices.Marshal.ThrowExceptionForHRInternal(Int32 errorCode, IntPtr errorInfo) \r\n\r\n   at System.Management.ManagementObject.Get() \r\n\r\n   at Microsoft.BizTalk.SnapIn.Framework.WmiProvider.SelectInstance\r\n```\r\n\r\n> Warning: The following workarounds may make a computer or a network more vulnerable to attack by malicious users or by malicious software such as viruses. We do not recommend these workarounds but are providing this information so that you can implement the workarounds at your own discretion. Use these workarounds at your own risk.\r\n\r\nUse the following guidance as a workaround:\r\n\r\n* Add “NETWORK SERVICE” to the local Administrators group. \r\n\r\n### IIS with Classic ASP\r\n\r\nIIS Hosted Classic ASP calling CreateObject for .NET COM objects may receive the following error: \"ActiveX component can't create object\". Use the following guidance as a workaround.\r\n\r\n* If your web site uses Anonymous Authentication, change the Web Site Anonymous Authentication credentials to use the \"Application pool identity\"\r\n* If your site uses Basic Authentication, log into the application once as the application pool identity and then create an instance of the .NET COM component. All subsequent activations for that .NET COM component should succeed, for any user.\r\n\r\n### .NET applications using COM and impersonation\r\n\r\n.NET Applications that creates instances of .NET COM application within an Impersonation Context may receive the following error: \"0x80040154 (REGDB_E_CLASSNOTREG)\". Use the following guidance as a workaround.\r\n\r\n* Create an instance of the .NET COM component prior to the impersonation context call. Later impersonated create instance calls should work as expected.\r\n* Run the .NET Application in the context of the impersonated user\r\n* Avoid using Impersonation when creating the .NET COM object","Url":"https://github.com/dotnet/announcements/issues/74","RelatedDescription":"Open issue \"Advisory on July 2018 .NET Framework Updates\" (#74)"},{"Id":"339929129","IsPullRequest":false,"CreatedAt":"2018-07-10T17:00:37","Actor":"blowdart","Number":"73","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core does not correctly validate certificates. An attacker who successfully exploited this vulnerability could present an expired certificate when challenged.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handle certificate validation.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/wcf/issues/3009\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\n* If an application does not use Windows Communication Foundation you are not affected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core, or ASP.NET Core based application that uses System.Private.ServiceModel with a version of 4.5.1 or earlier.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Private.ServiceModel | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 |  4.1.3 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Duplex | 4.0.0, 4.0.1, 4.0.2 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.0.4 or later <br /> 4.3.3 or later <br /> 4.443 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Http | 4.0.0, 4.0.10, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.3 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.NetTcp | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.3 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Primitives | 4.0.0, 4.1.0, 4.1.1 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.1.2 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\nSystem.ServiceModel.Security | 4.0.0, 4.0.1, 4.0.2 <br /> 4.3.0, 4.3.1 <br /> 4.4.0, 4.4.1, 4.4.2 <br /> 4.5.0, 4.5.1 | 4.0.4 or later <br /> 4.3.3 or later <br /> 4.4.4 or later <br /> 4.5.3 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n### <a name=\"project-format\"></a>.NET Core Project formats\r\n\r\n.NET Core has two different project file formats, depending on what software created the project.\r\n\r\n1. `project.json` is the format used in .NET Core 1.0 and Microsoft Visual Studio 2015.\r\n2. `csproj` is the format used in .NET Core 1.1, .NET Core 2.0 and Microsoft Visual Studio 2017.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file or your `project.json` file. They can be fixed by [editing the project file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n The `System.Private.ServiceModel` package is not meant to be directly depended on and will not appear in your direct dependency list.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in three ways, depending on your [project format](#project-format):\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects *OR*.\r\n* By examining the `project.lock.json` file contained in the root directory of your project for `project.json` based projects.\r\n\r\nThe `project.assets.json` and `project.lock.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies-vs2017\"></a>Fixing direct dependencies in a csproj based project / Visual Studio 2017\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.4.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.ServiceModel.Http` version 4.4.0.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.ServiceModel.Http` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.4.3\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"direct-dependencies-vs2015\"></a> Fixing Direct Dependencies in project.json based project / Visual Studio 2015\r\n\r\nOpen your `project.json` file in your editor. Look for the dependencies section. Below is an example dependencies section:\r\n\r\n``` json\r\n    \"dependencies\": {\r\n      \"Microsoft.NETCore.App\": {\r\n        \"version\": \"1.0.1\",\r\n        \"type\": \"platform\"\r\n      },\r\n     \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",\r\n     \"System.ServiceModel.Http\" : \"4.0.0\"\r\n    }\r\n```\r\n\r\nThis example has three direct dependencies: `Microsoft.NETCore.App`, `Microsoft.AspNetCore.Mvc.Core` and `System.ServiceModel.Http`.\r\n\r\n`Microsoft.NetCore.App` is the platform the application targets, you should ignore this. The other packages expose their version to the right of the package name. In our example, our non-platform packages are version 1.0.1.\r\n\r\nReview your direct dependencies for any instance of the packages and versions listed above. In the example above, there is a direct dependency on a vulnerable package, `System.ServiceModel.Http` version 4.4.0.\r\n\r\nTo update to the fixed package, change the version number to be the appropriate package for your release. In the example, this would be updating `System.ServiceModel.Http` to 4.4.3.\r\n\r\nAfter updating the vulnerable package versions, save your `project.json` file.\r\n\r\nThe dependencies section in our example `project.json` would now look as follows:\r\n\r\n```json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc.Core\": \"1.0.6\",\r\n    \"System.ServiceModel.Http \": \"4.4.3\"\r\n  }\r\n```\r\n\r\nIf you are using Visual Studio and save your updated `project.json` file, Visual Studio will restore the new package version. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependency.\r\n\r\nAfter you have addressed all of your direct dependencies, you must also review your transitive dependencies.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json) or the [the `project.lock.json` file](#project-lock-json).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json (csproj/VS2017)\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.ServiceModel.Http/4.3.0` is a reference to version 4.3.0 of `System.ServiceModel.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.ServiceModel.Http\" Version=\"4.3.2\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### <a name=\"project-lock-json\"></a> Manually reviewing project.lock.json (project.json/VS2015)\r\n\r\nOpen the `project.lock.json` file in your editor. We suggest you use an editor that understands json and allows you to collapse and expand nodes to review this file; both Visual Studio and Visual Studio Code provide this functionality.\r\n\r\nIf you are using Visual Studio the `project.lock.json` file is “under” the `project.json` file. Click the right pointing triangle, ▷, to the left of the `project.json` file to expand the solution tree to expose the `project.lock.json` file. The following image shows a project with the `project.json` file expanded to show the `project.lock.json` file.\r\n\r\n![project lock json](https://cloud.githubusercontent.com/assets/796298/25858179/f6e01200-348f-11e7-8a77-7176d8dd3f03.png)\r\n\r\nSearch the `project.lock.json` file for the vulnerable packages, using the format `packagename/`, using each of the package names from the table above. If you find any vulnerable assembly name in your search examine the line on which they are found, the version number is after the `/` and compare to the vulnerable versions table above. For example a search result that shows `System.ServiceModel.Http/4.0.1` is a reference to v4.0.1 of `System.ServiceModel.Http`.   If your `project.lock.json` file includes references to any of the package versions shown above then you will need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to a vulnerable version of `System.ServiceModel.Http` this means none of your direct dependencies depend on any vulnerable packages or you have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to any of the vulnerable packages you must add a direct dependency to the updated package to your `project.json` file to override the transitive dependency. Open your `project.json` and find the dependencies section. For example:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nFor each of the vulnerable packages your search returned you must add a direct dependency to the updated version by adding it to the `project.json` file. You do this by adding a new line to the dependencies section, referring the fixed version. For example, if your search showed a transitive reference to the vulnerable `System.ServiceModel.Http` version 1.0.0 you would add a reference to the appropriate fixed version, 1.0.6. Edit the `project.json` file as follows:\r\n\r\n``` json\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.1\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"System.ServiceModel.Http\": \"4.1.2\",\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\"\r\n  }\r\n```\r\n\r\nAfter you have added direct dependencies to the fixed packages, save your `project.json` file.\r\n\r\nIf you are using Visual Studio save your updated `project.json` file and Visual Studio will restore the new package versions. You can see the restore results by opening the Output Window (Ctrl+Alt+O) and changing the Show output from drop-down list to Package Manager.\r\n\r\nIf you are not using Visual Studio open a command line and change to your project directory. Execute the `dotnet restore` command to restore your new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8356](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8356)\r\n\r\n### Revisions\r\n\r\nV1.1 (July 23, 2018): Updated package versions, as some assemblies were released unsigned.\r\nV1.0 (July 10, 2018): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2018-07-23_\r\n","Url":"https://github.com/dotnet/announcements/issues/73","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8356: .NET Core Security Feature Bypass Vulnerability\" (#73)"}],"ResultType":"GitHubIssue"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1103473660508160001","CreatedAt":"2019-03-07T01:53:16+00:00","UserScreenname":"dotnet","Text":"Announcing .NET Core 3 Preview 3 https://t.co/sXYAjLR9Wb","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":340,"FavoriteCount":197,"RawContent":null},{"Id":"1103058093301149696","CreatedAt":"2019-03-05T22:21:57+00:00","UserScreenname":"dotnet","Text":"Floating-Point Parsing and Formatting improvements in .NET Core 3.0 https://t.co/oYZK5AK8h6","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":79,"FavoriteCount":48,"RawContent":null},{"Id":"1103021890837262337","CreatedAt":"2019-03-05T19:58:06+00:00","UserScreenname":"dotnet","Text":"Collecting .NET Core Linux Container CPU Traces from a Sidecar Container https://t.co/XH05KR4HVv","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":61,"FavoriteCount":21,"RawContent":null},{"Id":"1102725890788667394","CreatedAt":"2019-03-05T00:21:54+00:00","UserScreenname":"dotnet","Text":".NET Framework March 1, 2019 Cumulative Update for Windows 10 version 1809 and Windows Server 2019\n\nhttps://t.co/QdpE4oYqOM","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":27,"FavoriteCount":11,"RawContent":null},{"Id":"1101095169120747523","CreatedAt":"2019-02-28T12:22:00+00:00","UserScreenname":"dotnet","Text":"Subscribe to the On .NET on @ch9 to keep up with the latest episodes as we explore the world of .NET… https://t.co/1IClAyi1yE","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":24,"FavoriteCount":8,"RawContent":null}]}},"RunOn":"2019-03-08T05:30:29.9105983Z","RunDurationInMilliseconds":9129}