{"Data":{"Blog":{"FeedItems":[{"Title":"Explore CosmosDB with .NET Core and MongoDB","PublishedOn":"2018-04-09T16:00:47+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Have you had to design general purpose &#8220;metadata&#8221; tables in your SQL database that basically store column names and values? Do you often serialize/de-serialize XML or JSON from your SQL...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/09/explore-cosmosdb-with-net-core-and-mongodb/","RawContent":null},{"Title":"Calling all Desktop Developers: how should UI development be improved?","PublishedOn":"2018-03-23T18:01:31+00:00","CommentsCount":29,"FacebookCount":0,"Summary":"The user interface (UI) of any application is critical in making your app convenient and efficient for the folks using it. When developing applications for Enterprise use, a good UI can shave time off...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/03/23/calling-all-desktop-developers-how-should-ui-development-be-improved/","RawContent":null},{"Title":".NET Framework 4.7.2 Developer Pack Early Access build 3056 is available!","PublishedOn":"2018-03-08T23:22:13+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are happy to share an Early Access build with the .NET Framework 4.7.2 Developer Pack. The .NET Framework 4.7.2 Developer Pack lets developers build applications that target the .NET...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/03/08/net-framework-4-7-2-developer-pack-early-access-build-3056-is-available/","RawContent":null},{"Title":"F# language and tools update for Visual Studio 2017 version 15.6","PublishedOn":"2018-03-06T18:28:06+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"With the release of Visual Studio 2017 version 15.6, we’re excited to share updates to the F# language and core library, F# tooling in Visual Studio, and infrastructure updates that concern OSS...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/03/06/f-language-and-tools-update-for-visual-studio-2017-version-15-6/","RawContent":null},{"Title":"Announcing Entity Framework Core 2.1 Preview 1","PublishedOn":"2018-02-27T18:11:29+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Today we are releasing the first preview of EF Core 2.1, alongside .NET Core 2.1 Preview 1 and ASP.NET Core 2.1 Preview 1. The new bits are available in NuGet as part of the individual packages, and...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/27/announcing-entity-framework-core-2-1-preview-1/","RawContent":null},{"Title":"Announcing .NET Core 2.1 Preview 1","PublishedOn":"2018-02-27T18:08:23+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 2.1 Preview 1. It is the first public release of .NET Core 2.1. We have great improvements that we want to share and that we would love to get your feedback on,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/27/announcing-net-core-2-1-preview-1/","RawContent":null},{"Title":"Calling All Desktop Developers: How do you interact with data?","PublishedOn":"2018-02-27T17:00:36+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Connecting to databases and services is an important part of desktop application development for many of our customers. Visual Studio provides a variety of tools and technologies that can help you...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/27/calling-all-desktop-developers-how-do-you-interact-with-data/","RawContent":null},{"Title":"Azure Blob Storage as a Network Drive","PublishedOn":"2018-02-26T16:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Many applications make use of a network drive to backup and store files. When I was in university I found myself constantly coding for fun, and one example took the form of a network share for my...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/26/azure-blob-storage-as-a-network-drive/","RawContent":null},{"Title":".NET Framework February 2018 Security and Quality Rollup","PublishedOn":"2018-02-14T04:27:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the February 2018 Security and Quality Rollup. Security No new security fixes. See .NET Framework January 2018 Security and Quality Rollup for the latest security updates....","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/13/net-framework-february-2018-security-and-quality-rollup/","RawContent":null},{"Title":"Machine Learning in .NET – Help us build the right experience!","PublishedOn":"2018-02-13T17:17:58+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In the past few years, Machine Learning (ML) and Artificial Intelligence (AI) have paved the road for building smarter applications through advancements in speech recognition, computer vision,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/13/machine-learning-in-net-help-us-build-the-right-experience/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7452103949","Type":"PullRequestEvent","CreatedAt":"2018-03-29T07:03:03","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/97","RelatedDescription":"Merged pull request \"update CLA PDF link\" (#97) at dotnet/home","RelatedBody":""},{"Id":"7419410563","Type":"IssuesEvent","CreatedAt":"2018-03-22T14:02:36","Actor":"vvavrychuk","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/99","RelatedDescription":"Opened issue \"not working \"Linux Distribution\" dropdown on http://www.microsoft.com/net/learn/get-started/linux \" (#99) at dotnet/home","RelatedBody":"On the page http://www.microsoft.com/net/learn/get-started/linux dropdown \"Linux Distribution\" has no effect on the installation instruction next to him (they are always displayed for RedHat).\r\n\r\n![screenshot from 2018-03-22 16-02-19](https://user-images.githubusercontent.com/152563/37775020-6ec5778e-2dea-11e8-9ea3-b33e26c1c4e1.png)\r\n"},{"Id":"7192252734","Type":"PullRequestEvent","CreatedAt":"2018-02-03T01:30:47","Actor":"karann-msft","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/98","RelatedDescription":"Opened pull request \"Updates to reflect the latest information\" (#98) at dotnet/home","RelatedBody":""},{"Id":"7187459205","Type":"PullRequestEvent","CreatedAt":"2018-02-02T05:26:03","Actor":"mairaw","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/97","RelatedDescription":"Opened pull request \"update CLA PDF link\" (#97) at dotnet/home","RelatedBody":""},{"Id":"7102763357","Type":"PullRequestEvent","CreatedAt":"2018-01-16T00:17:04","Actor":"galatrash-at-dnn","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/96","RelatedDescription":"Opened pull request \"Adding DNN Platform.\" (#96) at dotnet/home","RelatedBody":""},{"Id":"7097053889","Type":"PullRequestEvent","CreatedAt":"2018-01-14T15:15:00","Actor":"bfistein","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/95","RelatedDescription":"Opened pull request \"Fix broken logo URL\" (#95) at dotnet/home","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7387413694","Type":"IssuesEvent","CreatedAt":"2018-03-15T21:18:32","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/announcements/issues/63","RelatedDescription":"Reopened issue \"Transport Layer Security (TLS) best practices with the .NET Framework article published\" (#63) at dotnet/announcements","RelatedBody":"# Transport Layer Security (TLS) best practices with the .NET Framework article published\r\n\r\nA new article was published that discusses the Transport Layer Security (TLS) best practices at https://docs.microsoft.com/dotnet/framework/network-programming/tls.\r\n\r\nTo ensure .NET Framework applications remain secure, the TLS version should **not** be hardcoded. .NET Framework applications should use the TLS version the operating system (OS) supports.\r\n\r\nThe (TLS) best practices article targets developers who are:\r\n* Directly using the System.Net APIs (for example, `System.Net.Http.HttpClient` and `System.Net.Security.SslStream`).\r\n* Directly using WCF clients and services using the `System.ServiceModel` namespace.\r\n* Using [Azure Cloud Services](https://azure.microsoft.com/services/cloud-services/) Web and Worker roles to host and run your application. See the [Azure Cloud Services](https://docs.microsoft.com/dotnet/framework/network-programming/tls#azure-cloud-services) section.\r\n\r\nThe article explains how to enable the strongest security available for the version of the .NET Framework that your app targets and runs on.\r\n\r\nThe section [Audit your code and make code changes](https://docs.microsoft.com/dotnet/framework/network-programming/tls#audit-your-code-and-make-code-changes) covers auditing and updating your code.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\ndotnet/docs#4675"},{"Id":"7387391842","Type":"IssuesEvent","CreatedAt":"2018-03-15T21:13:45","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/63","RelatedDescription":"Closed issue \"Transport Layer Security (TLS) best practices with the .NET Framework article published\" (#63) at dotnet/announcements","RelatedBody":"# Transport Layer Security (TLS) best practices with the .NET Framework article published\r\n\r\nA new article was published that discussed the Transport Layer Security (TLS) best practices at https://docs.microsoft.com/dotnet/framework/network-programming/tls.\r\n\r\nTo ensure .NET Framework applications remain secure, the TLS version should **not** be hardcoded. .NET Framework applications should use the TLS version the operating system (OS) supports.\r\n\r\nThe (TLS) best practices article targets developers who are:\r\n* Directly using the System.Net APIs (for example, `System.Net.Http.HttpClient` and `System.Net.Security.SslStream`).\r\n* Directly using WCF clients and services using the `System.ServiceModel` namespace.\r\n* Using [Azure Cloud Services](https://azure.microsoft.com/services/cloud-services/) Web and Worker roles to host and run your application. See the [Azure Cloud Services](https://docs.microsoft.com/dotnet/framework/network-programming/tls#azure-cloud-services) section.\r\n\r\nThe article explains how to enable the strongest security available for the version of the .NET Framework that your app targets and runs on.\r\n\r\nThe section [Audit your code and make code changes](https://docs.microsoft.com/dotnet/framework/network-programming/tls#audit-your-code-and-make-code-changes) covers auditing and updating your code.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\ndotnet/docs#4675"},{"Id":"7373349220","Type":"IssuesEvent","CreatedAt":"2018-03-13T17:01:53","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/62","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0875: Hash Collison can cause Denial of Service\" (#62) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0875: Hash Collison can cause Denial of Service\r\n## Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 2.0 (including other minor and patch releases).\r\nThis advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability in the public versions of .NET Core where a malicious file or web request could cause a denial of service (DoS) attack.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.10, 1.1.7 or 2.0.6. Developers are advised to update their .NET Core SDK to versions 1.1.8 or 2.1.101.\r\n\r\n## Discussion\r\n\r\nUse *TBD* for discussion of this advisory.\r\n\r\n### Mitigation Factors\r\nNone\r\n\r\n### Affected Software\r\n\r\nAny application running against .NET Core 1.0.9 or lower versions, 1.1.6 or lower minor versions or 2.0.5 or lower minor versions is affected. \r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\nAny application running against .NET Core 1.0.9 or lower versions, 1.1.6 or lower minor versions or 2.0.5 or lower minor versions is affected. \r\n\r\nA complete list of runtimes can be discovered by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows\t| `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS\t| `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms\t| `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.10, 1.1.7 and 2.0.6, then any applications targeting the respective major/minor versions, 1.0 or 1.1 or 2.0 of .NET Core are vulnerable.\r\n\r\nAdditionally, if you've deployed self-contained applications targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n#### How do I fix my affected application?\r\n\r\nApplications can be fixed by installing the latest .NET Core runtimes or SDKs. Typically, application servers only have runtime packages installed and developer machines have the SDKs installed. \r\nInstallers for the runtimes can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). \r\n.NET Core 1.1.8 SDK installs both versions 1.0.10 and 1.1.7 of the .NET Core runtime.\r\n\r\nIf you've built a self-contained application, you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n#### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the `application.runtime.config` file for that application. Set the framework version to the desired version and the `rollForward` property to false. These settings should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nSince the `application.runtime.config` file is an optional file, you may need to create one for each application and add it alongside the executable.\r\n\r\n### Acknowledgments\r\n[Ben Adams](https://twitter.com/ben_a_adams) of [Illyriad Games](https://www.illyriad.co.uk/)\r\n\r\n### External Links\r\n[CVE-2018-0875](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0875)\r\n\r\n### Revisions\r\n\r\nV1.0 (Mar 13, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-03-13_\r\n"},{"Id":"7301596554","Type":"IssuesEvent","CreatedAt":"2018-02-27T06:10:33","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/61","RelatedDescription":"Opened issue \"New offline books released for Visual Studio 2017\" (#61) at dotnet/announcements","RelatedBody":"# New offline books released for Visual Studio 2017\r\n\r\nEarlier this month, we released an update to Offline Books for the Visual Studio 2017 Help Viewer.\r\n\r\nThis release includes new .NET books, including .NET Core Guide, .NET Guide, .NET Framework Guide and the .NET API Reference. It also includes the latest content for Visual Studio 2017 version 15.5, the latest updates to Visual Basic, C# (7.1 and 7.2), F#, ASP.NET Core, NuGet, SQL Server, and the Universal Windows Platform.\r\n\r\nThe .NET Guide, .NET Framework Guide and .NET API Reference books together are a replacement for the .NET Framework 4.6 and 4.5 book, which can be removed. Just be aware that the new .NET API Reference book currently displays the API syntax block for C# only, but examples are shown in other languages, just like the experience you currently have on docs.microsoft.com.If you need to see the API syntax for Visual Basic, C++/CLI or F#, then you should keep the old book until the new reference book is updated again in a few weeks. Once you remove the .NET Framework 4.6 and 4.5 book, you cannot reinstall it.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\n- https://github.com/dotnet/docs/issues/4502\r\n\r\n## Add new content\r\n\r\nYou will see these new books when you have Help Viewer installed and choose **Help** > **Add and Remove Content** from the Visual Studio 2017 main menu. If you don't see this menu item, then [open the Visual Studio Installer](https://docs.microsoft.com/visualstudio/install/modify-visual-studio), click the **More** dropdown and choose **Modify**. When the component list appears, choose **Individual Components** at the top, then check **Help Viewer**.\r\n\r\n![help_viewer_component](https://user-images.githubusercontent.com/12971179/36713111-c9d49a7c-1b40-11e8-918a-e7e3619669a2.png)\r\n\r\n## Help Viewer Installation\r\n\r\nTo start the installation, select the **Modify** button in the lower right corner of the Installer window.\r\n\r\nTo update individual books whose status is \"Updates available\", remove the book and then click **Add** to get the new version. To update all your books at once, select the link in the lower right corner of the **Add and Remove Content** window:\r\n\r\n![offline-books](https://user-images.githubusercontent.com/12971179/36713028-75b944f6-1b40-11e8-91c4-4830355f815e.png)"},{"Id":"7300537622","Type":"IssuesEvent","CreatedAt":"2018-02-27T00:12:10","Actor":"eerhardt","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/60","RelatedDescription":"Opened issue \"System.Runtime.Intrinsics in .NET Core 2.1\" (#60) at dotnet/announcements","RelatedBody":"# System.Runtime.Intrinsics in .NET Core 2.1\r\n\r\n.NET Core 2.1 has been adding platform intrinsic APIs to support directly calling processor specific instructions, such as Intel’s x86 SIMD instructions.  See the [initial platform intrinsics design](https://github.com/dotnet/designs/blob/master/accepted/platform-intrinsics.md) for more information.\r\n\r\nWe have decided that it makes the most sense for this intrinsics feature to ship in a “preview” status in the .NET Core 2.1 RTM timeframe.  This means that the runtime support we are implementing will be included, but the assembly exposing the intrinsics will only be available to projects via explicit reference to a “preview-only” package.  These APIs won’t be included in the official .NET Core 2.1 packages.\r\n\r\nGiven our limited time and resources, recent changes in the approach we take to expose the intrinsics, and API changes prompted by design feedback from the community, we don’t believe there is enough time to settle these APIs for 2.1. We plan to follow the pattern of other recent features like Span<T> and Memory<T> that first shipped in preview before formally joining the supported API surface.  Not only would we expect the next version of .NET Core to support more intrinsics than could be supported in 2.1, but we expect to have real usage examples in CoreFX and higher level components as well.  These real world examples, as well as feedback from customers who opt in to the preview, should give us the confidence we need to officially support the APIs going forward.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\nhttps://github.com/dotnet/corefx/issues/27486\r\n\r\n## Details\r\n\r\nIn the coming days, we plan on removing System.Runtime.Intrinsics.dll from the Microsoft.NETCore.App package.  This means any libraries/applications that are using these APIs will no longer compile by default, and will not run on new builds of .NET Core 2.1.\r\n\r\nAt the same time, we will start producing a new System.Runtime.Intrinsics.Experimental NuGet package.  In order to continue using these APIs on .NET Core 2.1, a project will need to add a reference to this new package.\r\n\r\nAs its name implies, this package is experimental and should only be used for preview purposes.  It isn’t expected to be used in production scenarios.  Future version of .NET Core (after 2.1) will be allowed to break this package. This enables us respond to future feedback that requires the APIs to be modified.\r\n\r\nIn the future, when we are confident we have the intrinsic APIs right, we will stop producing the System.Runtime.Intrinsics.Experimental package. The platform intrinsics APIs will then be added back to Microsoft.NETCore.App and will be officially supported."}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7511218238","Type":"PullRequestEvent","CreatedAt":"2018-04-11T05:25:51","Actor":"JeremyKuhne","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17078","RelatedDescription":"Merged pull request \"Simple trim of ArrayPool buffers\" (#17078) at dotnet/coreclr","RelatedBody":"Trim ArrayPool buffers on Gen2 GC if the buffer stack hasn't been emptied for awhile. If you haven't pulled all of the buffers in the past 10 seconds, let loose the top buffer on the stack and give the stack another 2 seconds of potential life. When the stack gets it's bottom buffer returned the clock resets.\r\n\r\nThis is taking clues from PinnableBufferCache, which has been split into separate files and tweaked for coding standards. Trying to introduce as little overhead/complexity as possible...\r\n\r\nIf this is a reasonable approach we may want to consider unifying on the Tls pool. I can potentially make a similar change to the other pool implementation.\r\n\r\ncc: @danmosemsft"},{"Id":"7511184534","Type":"PullRequestEvent","CreatedAt":"2018-04-11T05:13:09","Actor":"dotnet-maestro-bot","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17509","RelatedDescription":"Opened pull request \"Update CoreClr to preview3-26411-02 (master)\" (#17509) at dotnet/coreclr","RelatedBody":"/cc @dotnet/coreclr-auto-update-notify"},{"Id":"7510987824","Type":"PullRequestEvent","CreatedAt":"2018-04-11T03:55:28","Actor":"ahsonkhan","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17507","RelatedDescription":"Merged pull request \"Update CoreClr, CoreFx to preview3-26411-01, preview3-26411-01, respectively (master)\" (#17507) at dotnet/coreclr","RelatedBody":"/cc @dotnet/coreclr-auto-update-notify"},{"Id":"7510933078","Type":"PullRequestEvent","CreatedAt":"2018-04-11T03:35:34","Actor":"noahfalk","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17476","RelatedDescription":"Merged pull request \"Fix x86 steady state tiered compilation performance\" (#17476) at dotnet/coreclr","RelatedBody":"Fixes #17475\r\n\r\nAlso included - a few tiered compilation only test hooks + small logging fix for JitBench\r\n\r\nTiered compilation wasn't correctly implementing the MayHavePrecode and RequiresStableEntryPoint policy functions. On x64 this was a non-issue, but due to compact entrypoints on x86 it lead to methods allocating both FuncPtrStubs and Precodes. The FuncPtrStubs would never get backpatched which caused never ending invocations of the Prestub for some methods. Although such code still runs correctly, it is much slower than it needs to be. On MusicStore x86 I am seeing a 20% improvement in steady state RPS after this fix, bringing us inline with what I've seen on x64.\r\n\r\nAs of now - without tiered compilation:\r\n\r\n```\r\n============= Startup Performance ============\r\n\r\nServer start (ms):   739\r\n1st Request (ms):    688\r\nTotal (ms):         1427\r\n\r\n\r\n\r\n========== Steady State Performance ==========\r\n\r\n  Requests    Aggregate Time(ms)    Req/s   Req Min(ms)   Req Mean(ms)   Req Median(ms)   Req Max(ms)   SEM(%)\r\n-----------   ------------------   ------   -----------   ------------   --------------   -----------   ------\r\n    2-  100                 1820   251.48          3.33           3.98             3.79         16.42     3.31\r\n  101-  250                 2406   256.26          3.16           3.90             3.82         12.43     1.69\r\n  251-  500                 3352   264.10          3.20           3.79             3.72          8.88     0.76\r\n  501-  750                 4293   265.60          3.16           3.77             3.69          7.70     0.70\r\n  751- 1000                 5235   265.42          2.80           3.77             3.71          7.73     0.77\r\n 1001- 1500                 7148   261.38          2.73           3.83             3.70         11.37     0.76\r\n 1501- 2000                 9016   267.76          3.04           3.73             3.69          6.14     0.40\r\n 2001- 3000                12753   267.57          3.08           3.74             3.69          6.68     0.27\r\n 3001- 5000                20281   265.68          3.05           3.76             3.71          6.81     0.20\r\n 5001-10000                39027   266.71          2.88           3.75             3.70          6.40     0.13\r\n```\r\n\r\nWith tiered compilation:\r\n\r\n```\r\n============= Startup Performance ============\r\n\r\nServer start (ms):   671\r\n1st Request (ms):    540\r\nTotal (ms):         1211\r\n\r\n\r\n\r\n========== Steady State Performance ==========\r\n\r\n  Requests    Aggregate Time(ms)    Req/s   Req Min(ms)   Req Mean(ms)   Req Median(ms)   Req Max(ms)   SEM(%)\r\n-----------   ------------------   ------   -----------   ------------   --------------   -----------   ------\r\n    2-  100                 1732   189.77          3.37           5.27             4.33         18.23     4.70\r\n  101-  250                 2345   244.66          3.20           4.09             3.98         13.00     1.81\r\n  251-  500                 3202   291.77          2.43           3.43             3.42          6.07     0.94\r\n  501-  750                 3984   319.69          2.45           3.13             3.02         20.45     2.33\r\n  751- 1000                 4746   328.26          2.48           3.05             2.97          6.79     0.87\r\n 1001- 1500                 6277   326.59          2.42           3.06             3.01          5.17     0.46\r\n 1501- 2000                 7776   333.43          2.42           3.00             2.96          4.93     0.46\r\n 2001- 3000                10759   335.22          2.14           2.98             2.95          5.97     0.31\r\n 3001- 5000                16845   328.62          2.11           3.04             2.99          5.51     0.24\r\n 5001-10000                31859   333.03          2.13           3.00             2.96          5.55     0.14\r\n```\r\n"},{"Id":"7510933071","Type":"IssuesEvent","CreatedAt":"2018-04-11T03:35:34","Actor":"noahfalk","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/17475","RelatedDescription":"Closed issue \"[Tiered Compilation] MusicStore Windows x86 steady state performance doesn't have the win we see on x64\" (#17475) at dotnet/coreclr","RelatedBody":"On Windows X64 MusicStore we typically see a 20% improvement from TC in the perf lab but x86 shows very little improvement. The difference is unexpected and likely a bug."},{"Id":"7510931520","Type":"PullRequestEvent","CreatedAt":"2018-04-11T03:35:01","Actor":"ahsonkhan","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17500","RelatedDescription":"Merged pull request \"Add CreateFromPinnedArray to MemoryMarshal\" (#17500) at dotnet/coreclr","RelatedBody":"Part of https://github.com/dotnet/corefx/issues/28954\r\n\r\nUpdate to ref and tests in corefx: https://github.com/dotnet/corefx/pull/28992\r\n\r\ncc @KrzysztofCwalina, @stephentoub, @GrabYourPitchforks, @davidfowl, @pakrym  "},{"Id":"7510865049","Type":"PullRequestEvent","CreatedAt":"2018-04-11T03:11:20","Actor":"sdmaclea","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17508","RelatedDescription":"Opened pull request \"WIP [Arm64] Conservative ThreadPool\" (#17508) at dotnet/coreclr","RelatedBody":""}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7510987903","Type":"PullRequestEvent","CreatedAt":"2018-04-11T03:55:30","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/9049","RelatedDescription":"Opened pull request \"Terminate the 'StartsWith' string in the badge existence check.\" (#9049) at dotnet/cli","RelatedBody":"The badge existence check was always returning false because the pattern match was not deterministic. \r\n\r\n**Paraphrased badge existence check logic:**\r\nStartsWith(\"linux_arm\") && EndsWith(\".svg\")\r\n\r\n**Conflicting badge file names:**\r\n\"linux_arm64_Release_version_badge.svg\"\r\n\"linux_arm_Release_version_badge.svg\"\r\n\r\nThe check was double verifying the linux_arm badge and always returning 'false' for the  linux_arm64 badge.\r\n\r\n**Other:**\r\nFinishBuild.targets\r\n'CheckIfAllBuildsHavePublished' target depends on the 'SetBadgeProps' target [VersionBadgeMoniker]\r\n\r\nFinishBuild.targets \r\nformatting..."},{"Id":"7510257920","Type":"IssuesEvent","CreatedAt":"2018-04-10T23:38:09","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/9048","RelatedDescription":"Closed issue \"***[ URGENT ]*** Missing Package Dependencies \" (#9048) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n```bash\r\n$ sudo sh -c 'echo \"deb [arch=amd64] http://apt-mo.trafficmanager.net/repos/dotnet/ xenial main\" > /etc/apt/sources.list.d/dotnetdev.list'\r\n$ sudo sh -c 'echo \"deb [arch=amd64] http://apt-mo.trafficmanager.net/repos/dotnet/ xenial main\" > /etc/apt/sources.list.d/dotnetdev.list'\r\n$ sudo apt update\r\n$ sudo apt -f install dotnet-sdk-2.2.0-preview1-007890\r\n```\r\nor\r\n```bash\r\n$ sudo sh -c 'echo \"deb [arch=amd64] https://packages.microsoft.com/repos/microsoft-ubuntu-xenial-prod xenial main\" > /etc/apt/sources.list.d/dotnetdev.list'\r\n$ sudo apt-get update\r\n$ sudo apt -f install dotnet-sdk-2.1.4\r\n```\r\n\r\n## Expected  behavior\r\nInstalls dotnet sdk and relevant deps\r\n\r\n## Actual behavior\r\nLinux rejects installation of packages due to missing dependencies:\r\n\r\n First Method ( from  http://apt-mo.trafficmanager.net/repos/dotnet/ xenial main )\r\n```bash\r\n$ sudo apt -f install dotnet-sdk-2.2.0-preview1-007890\r\n\r\nReading package lists... Done\r\nBuilding dependency tree       \r\nReading state information... Done\r\nSome packages could not be installed. This may mean that you have\r\nrequested an impossible situation or if you are using the unstable\r\ndistribution that some required packages have not yet been created\r\nor been moved out of Incoming.\r\nThe following information may help to resolve the situation:\r\n\r\nThe following packages have unmet dependencies:\r\n dotnet-sdk-2.2.0-preview1-007890 : Depends: aspnetcore-store-2.1.0-preview1-26623 but it is not installable\r\n                                    Depends: dotnet-runtime-2.1.0-preview1-26109-01 but it is not installable\r\nE: Unable to correct problems, you have held broken packages.\r\n```\r\n\r\n Second Method ( from  https://packages.microsoft.com/repos/microsoft-ubuntu-xenial-prod xenial main )\r\n```bash\r\n$ sudo apt -f  install dotnet-sdk-2.1.4 dotnet-runtime-2.0.5 dotnet-hostfxr-2.0.5 dotnet-host\r\n\r\nReading package lists... Done\r\nBuilding dependency tree       \r\nReading state information... Done\r\nSome packages could not be installed. This may mean that you have\r\nrequested an impossible situation or if you are using the unstable\r\ndistribution that some required packages have not yet been created\r\nor been moved out of Incoming.\r\nThe following information may help to resolve the situation:\r\n\r\nThe following packages have unmet dependencies:\r\n dotnet-host : Depends: dotnet-runtime-deps-2.1.0-preview1-26216-03 (>= 2.1.0-preview1-26216-03) but it is not installable\r\nE: Unable to correct problems, you have held broken packages.\r\n\r\n```\r\n\r\n## Environment data\r\nDotnet not installed.\r\n\r\nOperating system:\r\nNo LSB modules are available.\r\nDistributor ID:\tUbuntu\r\nDescription:\tUbuntu 16.04.4 LTS\r\nRelease:\t16.04\r\nCodename:\txenial\r\n\r\n\r\n\r\nPlease Assist ASAP !\r\n\r\n\r\n\r\n"},{"Id":"7510248759","Type":"PullRequestEvent","CreatedAt":"2018-04-10T23:35:09","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/9040","RelatedDescription":"Merged pull request \"Insert NuGet Build 4.7.0-rtm.5081 into cli\" (#9040) at dotnet/cli","RelatedBody":"Insert NuGet Build 4.7.0-rtm.5081 into cli release/2.1.2xx branch"},{"Id":"7510246838","Type":"IssuesEvent","CreatedAt":"2018-04-10T23:34:32","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/9041","RelatedDescription":"Closed issue \"dotnet new --help display usage message twice\" (#9041) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n\r\n1. dotnet new --help\r\n2. Look at the help message\r\n\r\n## Expected  behavior\r\n\r\nUsage message only shown once\r\n\r\n## Actual behavior\r\n\r\n```\r\nUsage: new [options]\r\n\r\nOptions:\r\n  -h, --help          Displays help for this command.\r\n  -l, --list          Lists templates containing the specified name. If no name is specified, lists all templates.\r\n  -n, --name          The name for the output being created. If no name is specified, the name of the current directory is used.\r\n  -o, --output        Location to place the generated output.\r\n  -i, --install       Installs a source or a template pack.\r\n  -u, --uninstall     Uninstalls a source or a template pack.\r\n  --type              Filters templates based on available types. Predefined values are \"project\", \"item\" or \"other\".\r\n  --force             Forces content to be generated even if it would change existing files.\r\n  -lang, --language   Specifies the language of the template to create.\r\n\r\n\r\nUsage: new [options]\r\n\r\nOptions:\r\n  -h, --help          Displays help for this command.\r\n  -l, --list          Lists templates containing the specified name. If no name is specified, lists all templates.\r\n  -n, --name          The name for the output being created. If no name is specified, the name of the current directory is used.\r\n  -o, --output        Location to place the generated output.\r\n  -i, --install       Installs a source or a template pack.\r\n  -u, --uninstall     Uninstalls a source or a template pack.\r\n  --type              Filters templates based on available types. Predefined values are \"project\", \"item\" or \"other\".\r\n  --force             Forces content to be generated even if it would change existing files.\r\n  -lang, --language   Specifies the language of the template to create.\r\n```\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n.NET Command Line Tools (2.1.103)\r\n\r\nProduct Information:\r\n Version:            2.1.103\r\n Commit SHA-1 hash:  60218cecb5\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.14393\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.103\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.6\r\n  Build    : 74b1c703813c8910df5b96f304b0f2b78cdf194d\r\n\r\n\r\n\r\n\r\n"},{"Id":"7510166619","Type":"IssuesEvent","CreatedAt":"2018-04-10T23:09:24","Actor":"D3m0nKingx","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/9048","RelatedDescription":"Opened issue \"***[ URGENT ]*** Missing Package Dependencies \" (#9048) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n```bash\r\n$ sudo sh -c 'echo \"deb [arch=amd64] http://apt-mo.trafficmanager.net/repos/dotnet/ xenial main\" > /etc/apt/sources.list.d/dotnetdev.list'\r\n$ sudo sh -c 'echo \"deb [arch=amd64] http://apt-mo.trafficmanager.net/repos/dotnet/ xenial main\" > /etc/apt/sources.list.d/dotnetdev.list'\r\n$ sudo apt update\r\n$ sudo apt -f install dotnet-sdk-2.2.0-preview1-007890\r\n```\r\nor\r\n```bash\r\n$ sudo sh -c 'echo \"deb [arch=amd64] https://packages.microsoft.com/repos/microsoft-ubuntu-xenial-prod xenial main\" > /etc/apt/sources.list.d/dotnetdev.list'\r\n$ sudo apt-get update\r\n$ sudo apt -f install dotnet-sdk-2.1.4\r\n```\r\n\r\n## Expected  behavior\r\nInstalls dotnet sdk and relevant deps\r\n\r\n## Actual behavior\r\nLinux rejects installation of packages due to missing dependencies:\r\n\r\n First Method ( from  http://apt-mo.trafficmanager.net/repos/dotnet/ xenial main )\r\n```bash\r\n$ sudo apt -f install dotnet-sdk-2.2.0-preview1-007890\r\n\r\nReading package lists... Done\r\nBuilding dependency tree       \r\nReading state information... Done\r\nSome packages could not be installed. This may mean that you have\r\nrequested an impossible situation or if you are using the unstable\r\ndistribution that some required packages have not yet been created\r\nor been moved out of Incoming.\r\nThe following information may help to resolve the situation:\r\n\r\nThe following packages have unmet dependencies:\r\n dotnet-sdk-2.2.0-preview1-007890 : Depends: aspnetcore-store-2.1.0-preview1-26623 but it is not installable\r\n                                    Depends: dotnet-runtime-2.1.0-preview1-26109-01 but it is not installable\r\nE: Unable to correct problems, you have held broken packages.\r\n```\r\n\r\n Second Method ( from  https://packages.microsoft.com/repos/microsoft-ubuntu-xenial-prod xenial main )\r\n```bash\r\n$ sudo apt -f  install dotnet-sdk-2.1.4 dotnet-runtime-2.0.5 dotnet-hostfxr-2.0.5 dotnet-host\r\n\r\nReading package lists... Done\r\nBuilding dependency tree       \r\nReading state information... Done\r\nSome packages could not be installed. This may mean that you have\r\nrequested an impossible situation or if you are using the unstable\r\ndistribution that some required packages have not yet been created\r\nor been moved out of Incoming.\r\nThe following information may help to resolve the situation:\r\n\r\nThe following packages have unmet dependencies:\r\n dotnet-host : Depends: dotnet-runtime-deps-2.1.0-preview1-26216-03 (>= 2.1.0-preview1-26216-03) but it is not installable\r\nE: Unable to correct problems, you have held broken packages.\r\n\r\n```\r\n\r\n## Environment data\r\nDotnet not installed.\r\n\r\nOperating system:\r\nNo LSB modules are available.\r\nDistributor ID:\tUbuntu\r\nDescription:\tUbuntu 16.04.4 LTS\r\nRelease:\t16.04\r\nCodename:\txenial\r\n\r\n\r\n\r\nPlease Assist ASAP !\r\n\r\n\r\n\r\n"},{"Id":"7510101061","Type":"PullRequestEvent","CreatedAt":"2018-04-10T22:50:31","Actor":"dotnet-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/9047","RelatedDescription":"Opened pull request \"Merge release/2.1.3xx to master\" (#9047) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.1.3xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.3xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/2.1.3xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1.3xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7507355727","Type":"IssuesEvent","CreatedAt":"2018-04-10T14:19:36","Actor":"lmagyar","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/706","RelatedDescription":"Opened issue \"Failed assembly resolution in XAML workflow projects\" (#706) at dotnet/standard","RelatedBody":"**Situation:**\r\n* using VS 15.6.5\r\n* a net461 project uses old project format but the new PackageReference tag\r\n* the net461 project contains XAML Workflow Activity definitions\r\n* the net461 project refers directly to a netstandard2.0 NuGet package or refers to a net461 NuGet package that has references to netstandard projects, ie. it's a mixed environment\r\n  * indirect: Microsoft.Orleans.Core v1.5.3 (net461 project)\r\n  * direct: Orleans.Activities v0.4.0, Abp v3.4.0 (netstandard2.0 projects)\r\n\r\n**Problem:**\r\n* build warnings, that some (quite random) .dll-s has an incorrect format\r\n* it's only a warning, but the application really fails with `System.NotSupportedException: Expression Activity type 'CSharpValue'1' requires compilation in order to run.  Please ensure that the workflow has been compiled.`\r\n\r\nIn case of referring to Orleans.Activities NuGet pkg the build warnings:\r\n* `Could not compile workflow expressions because file 'file:///C:\\Users\\xxx\\.nuget\\packages\\system.reflection.typeextensions\\4.4.0\\ref\\net461\\System.Reflection.TypeExtensions.dll' has an incorrect format. Workflows in this project may still run, if they do not require expression compilation. If the file is a platform-specific library or executable, consider building the project using MSBuild.exe from a command prompt of the targeted platform.`\r\n* `Could not run workflow validation because file 'System.Reflection.TypeExtensions, PublicKeyToken=b03f5f7f11d50a3a' has an incorrect format. This will not prevent workflows from running; but any workflow that has a validation error will fail at runtime. If the file is a platform-specific library or executable, consider building the project using MSBuild.exe from a command prompt of the targeted platform.`\r\n\r\nIn case of referring to Microsoft.Orleans.Core NuGet pkg the build warnings:\r\n* `Could not compile workflow expressions because file 'file:///C:\\Users\\xxx\\.nuget\\packages\\system.net.http\\4.3.0\\ref\\net46\\System.Net.Http.dll' has an incorrect format. Workflows in this project may still run, if they do not require expression compilation. If the file is a platform-specific library or executable, consider building the project using MSBuild.exe from a command prompt of the targeted platform.`\r\n* `Could not run workflow validation because file 'System.Net.Http, PublicKeyToken=b03f5f7f11d50a3a' has an incorrect format. This will not prevent workflows from running; but any workflow that has a validation error will fail at runtime. If the file is a platform-specific library or executable, consider building the project using MSBuild.exe from a command prompt of the targeted platform.`\r\n\r\nIn case of referring to Abp NuGet pkg the build warnings:\r\n* `Could not compile workflow expressions because file 'file:///C:\\Users\\xxx\\.nuget\\packages\\system.runtime.compilerservices.unsafe\\4.4.0\\ref\\netstandard2.0\\System.Runtime.CompilerServices.Unsafe.dll' has an incorrect format. Workflows in this project may still run, if they do not require expression compilation. If the file is a platform-specific library or executable, consider building the project using MSBuild.exe from a command prompt of the targeted platform.`\r\n* `Could not run workflow validation because file 'System.Runtime.CompilerServices.Unsafe, PublicKeyToken=b03f5f7f11d50a3a' has an incorrect format. This will not prevent workflows from running; but any workflow that has a validation error will fail at runtime. If the file is a platform-specific library or executable, consider building the project using MSBuild.exe from a command prompt of the targeted platform.`\r\n\r\n**Repros:**\r\n* see [developer community problem](https://developercommunity.visualstudio.com/content/problem/202765/failed-assembly-resolution-in-xaml-workflow-projec.html) though nobody cares about these reports...\r\n* [lmagyar/Orleans.Activities/tree/samples-xaml](https://github.com/lmagyar/Orleans.Activities/tree/samples-xaml) or [lmagyar/Orleans.Activities/tree/samples-xaml \"permalink\"](https://github.com/lmagyar/Orleans.Activities/tree/75f54b293bd06a1a71d4ce490e864117b7d5571d)\r\n  * **NOTE:** If you want to run the solution,\r\n    * there is another error #704, before running it, copy a netfx.force.conflicts.dll to the `Arithmetical.DevSiloHost` output dir\r\n    * first start manually `Arithmetical.DevSiloHost` wait 5s to start up, then start manually `Arithmetical.DevClusterClient`!\r\n\r\nreferring #704 #481 dotnet/sdk#1930\r\n\r\nI don't know whether dotnet/project-system is a better place for this issue?"},{"Id":"7506696885","Type":"IssuesEvent","CreatedAt":"2018-04-10T12:32:41","Actor":"Tachionstrahl","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/705","RelatedDescription":"Opened issue \"System.Web.HttpUtility.HtmlDecode can't decode &hairsp;\" (#705) at dotnet/standard","RelatedBody":"Hello,\r\ni have a problem with the HtmlDecode Method of System.Web.HttpUtility:\r\nIt can't decode the \"&hairsp;\" Entity. I was wondering if there is a reason for it, because it's defined by the w3.org ([](https://www.w3.org/TR/WD-math-970710/fnewtable05.html))\r\n\r\nGreetings from Germany,\r\nTachionstrahl"},{"Id":"7506611689","Type":"IssuesEvent","CreatedAt":"2018-04-10T12:16:29","Actor":"lmagyar","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/704","RelatedDescription":"Opened issue \"Missing netfx.force.conflicts.dll problem, again\" (#704) at dotnet/standard","RelatedBody":"**Situation:**\r\n* a net461 project refers to a netstandard2.0 NuGet package\r\n* the net461 project uses old project format but the new PackageReference tag\r\n* the net461 project contains XAML Workflow Activity definitions\r\n* using VS 15.6.5\r\n\r\n**Problem:**\r\n* the XAML codegen adds a reference to netfx.force.conflicts: `assemblyList.Add(Load(\"netfx.force.conflicts, Version=0.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51\"));`\r\n* but this .dll is not copied to the output directory\r\n* it causes exception: `System.IO.FileNotFoundException: Could not load file or assembly 'netfx.force.conflicts, PublicKeyToken=cc7b13ffcd2ddd51' or one of its dependencies. The system cannot find the file specified.`\r\n\r\n**Workaround:**\r\n* manually copying a netfx.force.conflicts.dll to the output solves the problem, the app runs\r\n* I don't know whether this .dll necessary at runtime at all, maybe generating `assemblyList.Add(Load(\"netfx.force.conflicts...` is unnecessary\r\n\r\n**Repro:**\r\n* [lmagyar/Orleans.Activities/tree/samples-xaml](https://github.com/lmagyar/Orleans.Activities/tree/samples-xaml)\r\n* [lmagyar/Orleans.Activities/tree/samples-xaml \"permalink\"](https://github.com/lmagyar/Orleans.Activities/tree/75f54b293bd06a1a71d4ce490e864117b7d5571d)\r\n* **NOTE:** If you want to run the solution, first start manually `HelloWorld.DevSiloHost` wait 5s to start up, then start manually `HelloWorld.DevClusterClient`!\r\n\r\nreferring #481 dotnet/sdk#1930\r\n\r\nI don't know whether dotnet/project-system is a better place for this issue?"},{"Id":"7494259493","Type":"IssuesEvent","CreatedAt":"2018-04-07T07:16:24","Actor":"voltagex","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/703","RelatedDescription":"Opened issue \"Dependency trees, or: why is System.Drawing.Primitives being deployed in a console app?\" (#703) at dotnet/standard","RelatedBody":"I've got a console app that I've turned on linking and trimming for. A complete standalone version targetting win-x64 is about 40MB, which isn't too bad I guess.\r\n\r\nWhat I can't work out is *why* some of the runtime is being included in a simple app, e.g.\r\n\r\n* System.Security.Claims.dll (unused)\r\n\r\n* System.IO.Compression.dll (unused)\r\n\r\n* System.Drawing.Primitives.dll (System.Drawing is removed by linking/trimming but this one isn't)\r\n\r\nI'd like to be able to see *why* certain assemblies are being pulled in, and if they're not needed, get rid of them completely."},{"Id":"7493163502","Type":"PullRequestEvent","CreatedAt":"2018-04-06T21:02:10","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/701","RelatedDescription":"Merged pull request \"Stabalize 2.0.2 NETStandard.Library package\" (#701) at dotnet/standard","RelatedBody":"cc @ericstj @joperezr \r\n\r\nRelease notes for 2.0.2:\r\n - Issue https://github.com/dotnet/standard/issues/442 Adding .NET Standard/.NET Framework facades assemblies is consuming 11% of build time - fixed in https://github.com/dotnet/standard/pull/510"},{"Id":"7489176150","Type":"IssuesEvent","CreatedAt":"2018-04-06T06:21:59","Actor":"RajeshBalakrishnan","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/702","RelatedDescription":"Opened issue \".Net Standard - Directory Services\" (#702) at dotnet/standard","RelatedBody":"Greetings,\r\n\r\nWe are migrating ,net code to ,net standard 2.0. We see \"PrincipalContext\", \"ConnectionOptions\", \"ManagementPath\", \"ObjectQuery\", \"ManagementObjectSearcher\", and \"ManagementObject\" classes are mssing in .Net standard 2.0.\r\n\r\n1. We have used \"PrincipalContext\" class to authenciate Windows user credentials. Can you let us know how to authenciate the user credentials in .Net standard??? Is there any API available???\r\n\r\n2. We have used \"WMI\" query to read the \"Manufacturer\" and \"Model\" details. Can you let us know how to read the same in .Net standard??? Is there any API available???\r\n\r\nThank you"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7511219465","Type":"IssuesEvent","CreatedAt":"2018-04-11T05:26:18","Actor":"EmmaZhu","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/29014","RelatedDescription":"Opened issue \"Value of Environment.CommandLine is different with the actual input\" (#29014) at dotnet/corefx","RelatedBody":"Hi,\r\nWe are porting a .Net application to .Net Core. The application will run on Windows and we'd want it to have the same behavior with the origin one. In the application, we implemented a command line parser which reads command line from `Environment.CommandLine`. We'd want to reuse the code, while found `Environment.CommandLine` returns different value with .Net. In .Net, it can return exactly the same string I input on console. In .Net Core, it uses `\\` to escape double quote marks, which is different from the string I input from console. \r\nFor example:\r\nWhen the input is `\"\"\" 1234`, `Environment.CommandLine` returns `\"\\\" 1234\"`, when input is `\"\\\" 1234 \"`, it also returns `\"\\\" 1234\"`.  \r\nIn this condition, I have no way to know what the actual input is.\r\n\r\nCould you please help to take a look?\r\n\r\nEmma\r\n"},{"Id":"7511178250","Type":"PullRequestEvent","CreatedAt":"2018-04-11T05:10:48","Actor":"dotnet-maestro-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/29013","RelatedDescription":"Opened pull request \"Update CoreClr, ProjectNTfs, ProjectNTfsTestILC to preview3-26411-02, beta-26411-00, beta-26411-00, respectively (master)\" (#29013) at dotnet/corefx","RelatedBody":""},{"Id":"7510987599","Type":"PullRequestEvent","CreatedAt":"2018-04-11T03:55:23","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/29008","RelatedDescription":"Merged pull request \"Update CoreClr, CoreFx, CoreSetup to preview3-26411-01, preview3-26411-01, preview3-26410-06, respectively (master)\" (#29008) at dotnet/corefx","RelatedBody":""},{"Id":"7510976969","Type":"IssuesEvent","CreatedAt":"2018-04-11T03:51:36","Actor":"EmmaZhu","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/28713","RelatedDescription":"Closed issue \"Directory.Exists returns false with drive's device path name\" (#28713) at dotnet/corefx","RelatedBody":"Hi,\r\n\r\nCode like `Directory.Exists(\"\\\\\\\\?\\\\C:\\\\\")` always returns false, even the drive does exist. `Directory.Exists(\"\\\\\\\\?\\\\C:\\\\Folder\\\\\")` can get directory's existence correct.  This behavior is different with the one in .Net Framework. Could anyone help to take a look?\r\n\r\n[EDIT] Add proper code formatting by @karelz"},{"Id":"7510938203","Type":"PullRequestEvent","CreatedAt":"2018-04-11T03:37:30","Actor":"dotnet-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/29012","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#29012) at dotnet/corefx","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7510792440","Type":"PullRequestEvent","CreatedAt":"2018-04-11T02:45:46","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/28999","RelatedDescription":"Merged pull request \"Regenerate System.Threading ref with latest buildtools changes\" (#28999) at dotnet/corefx","RelatedBody":"cc @kouvel, @tarekgh, @weshaggard, @danmosemsft, @ericstj, @joshfree  \r\n\r\nMost of it is just formatting, sorting order."},{"Id":"7510784928","Type":"PullRequestEvent","CreatedAt":"2018-04-11T02:43:10","Actor":"Anipik","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/28952","RelatedDescription":"Merged pull request \"Fixing Process tests for spanish\" (#28952) at dotnet/corefx","RelatedBody":"Related to https://github.com/dotnet/corefx/issues/28953"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7510803061","Type":"IssuesEvent","CreatedAt":"2018-04-11T02:49:25","Actor":"SergeyTeplyakov","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/26091","RelatedDescription":"Closed issue \"Impossible NullReferenceException\" (#26091) at dotnet/roslyn","RelatedBody":"**Version Used**: Visual Studio 15.6.2\r\n\r\n**Steps to Reproduce**:\r\nThe following code throws `NullReferenceException` but not `IndexOutOfRangeException`:\r\n\r\n```csharp\r\npublic unsafe struct FixedBytes\r\n{\r\n    public const int MaxLength = 33;\r\n    private fixed byte _bytes[MaxLength];\r\n\r\n    public FixedBytes(BinaryReader reader, int length = MaxLength)\r\n    {\r\n        if (reader == null) throw new ArgumentNullException();\r\n\r\n        var buffer = reader.ReadBytes(length);\r\n\r\n        fixed (byte* p = _bytes, s = buffer)\r\n        {\r\n            for (var i = 0; i < length; i++)\r\n            {\r\n                p[i] = s[i];\r\n            }\r\n        }\r\n    }\r\n}\r\nclass Program\r\n{\r\n    static void Main(string[] args)\r\n    {\r\n        var ms = new MemoryStream(new byte[0]);\r\n        var dr = new BinaryReader(ms);\r\n        FixedBytes fb = new FixedBytes(dr);\r\n    }\r\n}\r\n```\r\n**Expected Behavior**:\r\nThe code should throw `IndexOutOfRangeException`.\r\n\r\n**Actual Behavior**:\r\nThe code throws `NullReferenceException`.\r\n\r\nHere how the decompiled version of this code looks like:\r\n\r\n```csharp\r\npublic unsafe FixedBytes(BinaryReader reader, int length = 33)\r\n{\r\n\tif (reader == null)\r\n\t{\r\n\t\tthrow new ArgumentNullException();\r\n\t}\r\n\tbyte[] arg_1F_0 = reader.ReadBytes(length);\r\n\tfixed (byte** ptr = (byte**)(&this._bytes.FixedElementField))\r\n\t{\r\n\t\tbyte* p = (byte*)ptr;\r\n\t\tfixed (byte[] array = arg_1F_0)\r\n\t\t{\r\n\t\t\tbyte* s;\r\n\t\t\tif (arg_1F_0 == null || array.Length == 0)\r\n\t\t\t{\r\n\t\t\t\ts = null;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\ts = &array[0];\r\n\t\t\t}\r\n\t\t\tfor (int i = 0; i < length; i++)\r\n\t\t\t{\r\n\t\t\t\tp[i] = s[i]; // <- This will throw NRE if arg_1F_0 is null or empty\r\n\t\t\t}\r\n\t\t\tptr = null;\r\n\t\t}\r\n\t\treturn;\r\n\t}\r\n}\r\n```\r\nIt means that if a reader returns an empty array, the `s` local is `null` and NRE is thrown."},{"Id":"7510746422","Type":"PullRequestEvent","CreatedAt":"2018-04-11T02:30:06","Actor":"jmarolf","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/26075","RelatedDescription":"Merged pull request \"Allow an embedded language to participate in document highlighting.\" (#26075) at dotnet/roslyn","RelatedBody":"This wasn't part of the previous embedded-language-services PR because that PR just contained the features necessary for embedded-json.  Embedded-json doesn't have a need (afaict) for 'document highlights', whereas embedded-regex does.  \r\n\r\nNote: this should be reviewed after https://github.com/dotnet/roslyn/pull/26074 goes in."},{"Id":"7510512807","Type":"PullRequestEvent","CreatedAt":"2018-04-11T01:08:55","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/25963","RelatedDescription":"Merged pull request \"recursive-patterns(17) Improvements when switching on a tuple\" (#25963) at dotnet/roslyn","RelatedBody":"This PR is a set of changes intended to improve things for pattern-matching operations on tuples:\r\n\r\n- https://github.com/dotnet/roslyn/commit/2f117a4defc3328fa040f194a257c646bbcf8250 Adds a code quality test for switching on a tuple literal. The test exposed some parsing precedence issues for the switch expression which are fixed here. The `=>` following the when clause was being consumed as part of the when expression (as a lambda). Changed the precedence of the when expression to a coalescing expression to forbid a lambda there.\r\n- https://github.com/dotnet/roslyn/commit/ab7a2446cc81bec755fe347d998536690fb8c29f Fixes a bug in the semantic model for switch expressions.\r\n- https://github.com/dotnet/roslyn/commit/cec28aa3bb430ea71cca348fb13129d5faf3ab54 Refactoring some code in preparation for subsequent changes.\r\n- https://github.com/dotnet/roslyn/commit/c15d849a43794a36da5f8af1b4e20bccb05e6896 Introduce BoundPatternBinding rather than using a tuple. Also move the implementation of the is-pattern operator to its own source file.\r\n- https://github.com/dotnet/roslyn/commit/c0953a4ea0387dcc12a7d035fc124858ff919dc9 Refactor the decision dag rewriter so we can reuse it for handling tuples in a subsequent iteration.\r\n- https://github.com/dotnet/roslyn/commit/4fbf77ebb2dabf1e686d9384fd68c21af3c0fa1b Add instrumentation for the switch statement's when clause. This was dropped in a previous PR when we dropped the old lowering code.\r\n- https://github.com/dotnet/roslyn/commit/662deba9748ff71469cb2d960a4a9c4a7a4ed04e Fix the diagnostic argument for \"wrong number of subpatterns\". This fixes a crash during LDM demo.\r\n- https://github.com/dotnet/roslyn/commit/8b8bc93abc3759cdea5cbe051341701a0e6fe895 Optimizes switch on a tuple literal by saving the elements of the tuple literal and not constructing a tuple object. Fixes #20641\r\n- https://github.com/dotnet/roslyn/commit/170b511b6a147efa1da16dcd4dbfdbb993149914 Permit switching on a tuple literal without redundant parentheses. Fixes dotnet/csharplang#1395 . The syntax change is currently under compat council review.\r\n- https://github.com/dotnet/roslyn/commit/95a9bd8dabdd9580f84ce83eaecde915c3321208 Bind and check the optional \"named argument\" style names in positional (tuple) patterns. Fixes #25934\r\n\r\n@agocke @cston Please review these pattern-matching changes. You might find it easier to do iteration by iteration. I will be happy to do a co-review by Skype or over-the-shoulder if it is easier for you.\r\n@dotnet/roslyn-compiler Additional review most welcome\r\n@dotnet/roslyn-ide Can you suggest additional IDE tests for the changes in https://github.com/dotnet/roslyn/commit/170b511b6a147efa1da16dcd4dbfdbb993149914 ?\r\n\r\nQuestion for reviewers: would you have preferred that I submit a separate PR for each of these changes?\r\n"},{"Id":"7510498346","Type":"PullRequestEvent","CreatedAt":"2018-04-11T01:03:26","Actor":"VSadov","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/26092","RelatedDescription":"Opened pull request \"[WIP] Use 7.3 feature in Roslyn codebase.\" (#26092) at dotnet/roslyn","RelatedBody":""},{"Id":"7510404541","Type":"IssuesEvent","CreatedAt":"2018-04-11T00:28:52","Actor":"SergeyTeplyakov","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/26091","RelatedDescription":"Opened issue \"Impossible NullReferenceException\" (#26091) at dotnet/roslyn","RelatedBody":"**Version Used**: Visual Studio 15.6.2\r\n\r\n**Steps to Reproduce**:\r\nThe following code throws `NullReferenceException` but not `IndexOutOfRangeException`:\r\n\r\n```csharp\r\npublic unsafe struct FixedBytes\r\n{\r\n    public const int MaxLength = 33;\r\n    private fixed byte _bytes[MaxLength];\r\n\r\n    public FixedBytes(BinaryReader reader, int length = MaxLength)\r\n    {\r\n        if (reader == null) throw new ArgumentNullException();\r\n\r\n        var buffer = reader.ReadBytes(length);\r\n\r\n        fixed (byte* p = _bytes, s = buffer)\r\n        {\r\n            for (var i = 0; i < length; i++)\r\n            {\r\n                p[i] = s[i];\r\n            }\r\n        }\r\n    }\r\n}\r\nclass Program\r\n{\r\n    static void Main(string[] args)\r\n    {\r\n        var ms = new MemoryStream(new byte[0]);\r\n        var dr = new BinaryReader(ms);\r\n        FixedBytes fb = new FixedBytes(dr);\r\n    }\r\n}\r\n```\r\n**Expected Behavior**:\r\nThe code should throw `IndexOutOfRangeException`.\r\n\r\n**Actual Behavior**:\r\nThe code throws `NullReferenceException`.\r\n\r\nHere how the decompiled version of this code looks like:\r\n\r\n```csharp\r\npublic unsafe FixedBytes(BinaryReader reader, int length = 33)\r\n{\r\n\tif (reader == null)\r\n\t{\r\n\t\tthrow new ArgumentNullException();\r\n\t}\r\n\tbyte[] arg_1F_0 = reader.ReadBytes(length);\r\n\tfixed (byte** ptr = (byte**)(&this._bytes.FixedElementField))\r\n\t{\r\n\t\tbyte* p = (byte*)ptr;\r\n\t\tfixed (byte[] array = arg_1F_0)\r\n\t\t{\r\n\t\t\tbyte* s;\r\n\t\t\tif (arg_1F_0 == null || array.Length == 0)\r\n\t\t\t{\r\n\t\t\t\ts = null;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\ts = &array[0];\r\n\t\t\t}\r\n\t\t\tfor (int i = 0; i < length; i++)\r\n\t\t\t{\r\n\t\t\t\tp[i] = s[i]; // <- This will throw NRE if arg_1F_0 is null or empty\r\n\t\t\t}\r\n\t\t\tptr = null;\r\n\t\t}\r\n\t\treturn;\r\n\t}\r\n}\r\n```\r\nIt means that if a reader returns an empty array, the `s` local is `null` and NRE is thrown."},{"Id":"7510396364","Type":"IssuesEvent","CreatedAt":"2018-04-11T00:25:52","Actor":"FizzerWL","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/26029","RelatedDescription":"Closed issue \"MSBuildWorkspace: \"No assembly containing System.Object was found\" when using Roslyn to build a class library loaded from csproj\" (#26029) at dotnet/roslyn","RelatedBody":"Hello,\r\n\r\nSince updating my version of VS, I can no longer use Roslyn to build class libraries.  Using MSBuildWorkspace.Create().OpenSolution doesn't seem to load the project references, resulting in the error \"No value for RuntimeMetadataVersion found. No assembly containing System.Object was found\".\r\n\r\nI have created a [repro sample](https://github.com/FizzerWL/ErrorRepro) that demonstrates the problem.  This has two solutions: A simple class library solution with two projects, one that references the other.  The second solution is a roslyn app that loads the first solution with MSBuildWorkspace.Create().OpenSolution and tries to build it.\r\n\r\n**Version Used**: Visual Studio Community 15.6.5 \r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Clone minimal repro solution at https://github.com/FizzerWL/ErrorRepro\r\n2. Open Builder/Builder.sln\r\n3. Build+Run\r\n\r\n**Expected Behavior**:  Program runs without errors.\r\n\r\n**Actual Behavior**:  Program fails and outputs tons of errors, caused by references not being loaded:\r\n> Unhandled Exception: System.Exception: Build failed. 47 errors:\r\n> warning CS8021: No value for RuntimeMetadataVersion found. No assembly containing System.Object was found nor was a value for RuntimeMetadataVersion specified through options.\r\n> Class1.cs(1,7):  error CS0246: The type or namespace name 'System' could not be found\r\n\r\n[Full output](https://pastebin.com/UF8C8dyH)\r\n\r\nOther references to this error message on Stackoverflow and such suggest manually adding a reference to mscorlib to fix the error.  However, this should not be necessary since all references should be automatically loaded out of the csproj file.\r\n\r\nThank you!"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7510937681","Type":"PullRequestEvent","CreatedAt":"2018-04-11T03:37:20","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5676","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5676) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7510473675","Type":"PullRequestEvent","CreatedAt":"2018-04-11T00:54:11","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5675","RelatedDescription":"Merged pull request \"Merge changes from TFS\" (#5675) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"7510458533","Type":"PullRequestEvent","CreatedAt":"2018-04-11T00:48:32","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5675","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#5675) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"7510130011","Type":"IssuesEvent","CreatedAt":"2018-04-10T22:58:53","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/5674","RelatedDescription":"Opened issue \"HttpClient GetAsync with https (on windows) does not work\" (#5674) at dotnet/corert","RelatedBody":"Reported by @abydal on gitter. From https://gist.github.com/abydal/e235558bad6f73ed96964697dc0eaec3:\r\n\r\n```\r\nusing System;\r\nusing System.Net.Http;\r\nusing System.Threading.Tasks;\r\n\r\nnamespace TestCoreRt\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            Run().Wait();\r\n        }\r\n\r\n        static async Task Run(){\r\n\r\n            using (var client = new HttpClient())\r\n            {\r\n                try\r\n                {\r\n                    var url = $\"https://www.google.no/search?q=test\";\r\n\r\n                    using (var request = await client.GetAsync(new Uri(url)))\r\n                    {\r\n                        if(!request.IsSuccessStatusCode){\r\n                            Console.WriteLine(\"Url call to: \" + url +\" failed with \"+request.ReasonPhrase);\r\n                        }\r\n\r\n                        Console.WriteLine(await request.Content.ReadAsStringAsync());\r\n                    }\r\n                }\r\n                catch (Exception e)\r\n                {\r\n                    if(e is AggregateException ae)\r\n                        Console.WriteLine(ae.Flatten().ToString());\r\n                    else\r\n                        Console.WriteLine(e.ToString());\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n```"},{"Id":"7510112267","Type":"PullRequestEvent","CreatedAt":"2018-04-10T22:53:45","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5671","RelatedDescription":"Merged pull request \"Make ObjWriter build work on Windows\" (#5671) at dotnet/corert","RelatedBody":""},{"Id":"7509236864","Type":"PullRequestEvent","CreatedAt":"2018-04-10T19:42:14","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5673","RelatedDescription":"Merged pull request \"Port Avoid Unsafe.As usage in ValueTask that can break type safety to nmirror\" (#5673) at dotnet/corert","RelatedBody":"git cherry-pick 7b588675b581f90bba8b6bbdbf7db4ca40e12780"},{"Id":"7509235782","Type":"PullRequestEvent","CreatedAt":"2018-04-10T19:42:02","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5673","RelatedDescription":"Opened pull request \"Port Avoid Unsafe.As usage in ValueTask that can break type safety to nmirror\" (#5673) at dotnet/corert","RelatedBody":"git cherry-pick 7b588675b581f90bba8b6bbdbf7db4ca40e12780"},{"Id":"7508347794","Type":"IssuesEvent","CreatedAt":"2018-04-10T16:53:32","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/5672","RelatedDescription":"Opened issue \"[x86] RyuJIT jitting crash\" (#5672) at dotnet/corert","RelatedBody":"_From @BredPet on April 10, 2018 16:12_\n\nI try to compile some sample by ILC(CoreRT) compiler for ARM in cross mode. In debug mode there is no problem, but in release with -O3 there is an issue in dllimport.\r\nBacktrace:\r\n```\r\n#0  LoadLibErrorTracker::LoadLibErrorTracker (this=<optimized out>) at /coreclr/src/vm/dllimport.cpp:5720\r\n#1  NDirect::NDirectLink (pMD=0xeea15880) at /coreclr/src/vm/dllimport.cpp:6331\r\n#2  0xf76295e0 in NDirectImportWorker (pMD=0xeea15880) at /coreclr/src/vm/dllimport.cpp:6469\r\n#3  0xf75bb67e in NDirectImportThunk () at /coreclr/src/inc/ex.h:1459\r\n#4  0xeea15880 in ?? ()\r\n#5  0xefcdeb86 in ?? ()\r\n#6  0xefcde0ff in ?? ()\r\n#7  0xf61112d2 in ?? ()\r\n#8  0xf6b43911 in ?? ()\r\n#9  0xf75bb5da in CallDescrWorkerInternal () at /coreclr/src/inc/ex.h:1459\r\n#10 0xf74e8303 in CallDescrWorkerWithHandler (fCriticalCall=0, pCallDescrData=<optimized out>) at /coreclr/src/vm/callhelpers.cpp:78\r\n#11 MethodDescCallSite::CallTargetWorker (this=0xffffc278, pArguments=0xffffc240, pReturnValue=0xffffc270, cbReturnValue=8) at /coreclr/src/vm/callhelpers.cpp:620\r\n#12 0xf75e0195 in MethodDescCallSite::Call_RetArgSlot (this=0xf7f97884, pArguments=0xf3607710) at /coreclr/src/vm/callhelpers.h:433\r\n#13 RunMain(MethodDesc*, short, int*, PtrArray**)::$_0::operator()(RunMain(MethodDesc*, short, int*, PtrArray**)::Param*) const::{lambda(RunMain(MethodDesc*, short, int*, PtrArray**)::Param*)#1}::operator()(RunMain(MethodDesc*, short, int*, PtrArray**)::Param*) const (pParam=0xffffc208, this=<optimized out>) at /coreclr/src/vm/assembly.cpp:1709\r\n#14 RunMain(MethodDesc*, short, int*, PtrArray**)::$_0::operator()(RunMain(MethodDesc*, short, int*, PtrArray**)::Param*) const (__EXparam=0xffffc208, this=<optimized out>)\r\n    at /coreclr/src/vm/assembly.cpp:1720\r\n#15 RunMain (pFD=0xf7f97884, numSkipArgs=1, piRetVal=0xffffc334, stringArgs=0xffffc620) at /coreclr/src/vm/assembly.cpp:1720\r\n#16 0xf75e0433 in Assembly::ExecuteMainMethod (this=0x80a0ef0, stringArgs=0xffffc620, waitForOtherThreads=1) at /coreclr/src/vm/assembly.cpp:1817\r\n#17 0xf741d960 in CorHost2::ExecuteAssembly (this=0x805cc18, dwAppDomainId=1, pwzAssemblyPath=0x809f488 u\"/arm_target_dir_x86_release/ilc.dll\", argc=4, argv=0x80a37f0, \r\n    pReturnValue=0xffffc6e4) at /coreclr/src/vm/corhost.cpp:491\r\n#18 0xf73f73c8 in coreclr_execute_assembly (hostHandle=0x805cc18, domainId=1, argc=4, argv=0xffffc93c, managedAssemblyPath=0x8052a48 \"/arm_target_dir_x86_release/ilc.dll\", \r\n    exitCode=0xffffc6e4) at /coreclr/src/dlls/mscoree/unixinterface.cpp:407\r\n#19 0x0804aae4 in ExecuteManagedAssembly (currentExeAbsolutePath=0x8052a10 \"/arm_target_dir_x86_release/corerun\", \r\n    clrFilesAbsolutePath=0x8052a80 \"/arm_target_dir_x86_release\", managedAssemblyAbsolutePath=0x8052a48 \"/arm_target_dir_x86_release/ilc.dll\", \r\n    managedAssemblyArgc=4, managedAssemblyArgv=0xffffc93c) at /coreclr/src/coreclr/hosts/unixcoreruncommon/coreruncommon.cpp:429\r\n#20 0x080499a9 in corerun (argc=6, argv=0xffffc934) at /coreclr/src/coreclr/hosts/unixcorerun/corerun.cpp:149\r\n#21 0x08049b5f in main (argc=6, argv=0xffffc934) at /coreclr/src/coreclr/hosts/unixcorerun/corerun.cpp:161\r\n```\r\nasm:\r\n```\r\n   0xf7627a00 <+128>:   call   0xf74689c0 <MethodDesc::EnsureActive()>\r\n   0xf7627a05 <+133>:   add    $0x10,%esp\r\n   0xf7627a08 <+136>:   mov    -0x15c4(%ebx),%eax\r\n   0xf7627a0e <+142>:   movaps -0x1a69f0(%ebx),%xmm0\r\n   0xf7627a15 <+149>:   movl   $0x10,-0x298(%ebp)\r\n   0xf7627a1f <+159>:   mov    %eax,-0x294(%ebp)\r\n=> 0xf7627a25 <+165>:   movaps %xmm0,-0x2a8(%ebp)\r\n```\r\nit's strange bug, if I allocate LoadLibErrorTracker by \"new\" instead just on stack, issue is disappeared.\r\nIn other working places esp value like 0xffffbc30, aligned 8.\r\nIn this case: 0xffffbc44\r\n\r\nC# code in CoreRT part in CorInfoImpl:\r\n```\r\njitStartup(GetJitHost(_jitConfig.UnmanagedInstance));                                                                                                                             \r\n_jit = getJit();\r\n```\r\nIf i change it as:\r\n```\r\n_jit = getJit();\r\njitStartup(GetJitHost(_jitConfig.UnmanagedInstance));       \r\n```                                                                                                                      \r\nissue also disappeared ;-)\r\nI guess it's maybe wrong stack padding somewhere.\r\n\r\n@jkotas please take a look\n\n_Copied from original issue: dotnet/coreclr#17495_"},{"Id":"7507678083","Type":"PullRequestEvent","CreatedAt":"2018-04-10T15:05:38","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5671","RelatedDescription":"Opened pull request \"Make ObjWriter build work on Windows\" (#5671) at dotnet/corert","RelatedBody":""},{"Id":"7507269325","Type":"PullRequestEvent","CreatedAt":"2018-04-10T14:06:55","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5670","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5670) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7506527625","Type":"PullRequestEvent","CreatedAt":"2018-04-10T11:59:22","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5670","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5670) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7510181665","Type":"PullRequestEvent","CreatedAt":"2018-04-10T23:14:01","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2133","RelatedDescription":"Opened pull request \"Add back NuGetSourceType=Package metadata in package resolution\" (#2133) at dotnet/sdk","RelatedBody":"This was used in a few places to distinguish between refs coming from NuGet from others.\r\n\r\nIn particular, it caused all nuget refs to be copied to refs/folder on Build with PreserverCompilationContext=true.\r\n\r\nFix #2121"},{"Id":"7509845121","Type":"IssuesEvent","CreatedAt":"2018-04-10T21:44:19","Actor":"KirillOsenkov","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/2132","RelatedDescription":"Opened issue \"Microsoft.PackageDependencyResolution.targets(5,5): Error MSB4018: The \"JoinItems\" task failed unexpectedly.\" (#2132) at dotnet/sdk","RelatedBody":"This is `2.1.300-preview1-008174`.\r\n\r\nWe're on the VSMac team and we have a bug:\r\n\r\n1. Create a new ASP.NET Core Web App that uses .NET Core 2.1 (the version above)\r\n2. The created web project fails to build with:\r\n\r\n```\r\nC:\\Program Files\\dotnet\\sdk\\2.1.300-preview1-008174\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.PackageDependencyResolution.targets\r\nline 456\r\nC:\\Program Files\\dotnet\\sdk\\2.1.300-preview1-008174\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.PackageDependencyResolution.targets(5,5): Error MSB4018: The \"JoinItems\" task failed unexpectedly.\r\nSystem.InvalidOperationException: The item metadata \"%(FileName)\" cannot be applied to the path \"C:\\Program Files\\dotnet\\sdk\\2.1.300-preview1-008174\\Sdks\\Microsoft.NET.Sdk\\build\\..\\..\\..\\..\\NuGetFallbackFolder\\microsoft.aspnetcore.authentication.microsoftaccount\\2.1.0-preview1-final\\lib\\netstandard2.0\\Microsoft.AspNetCore.Authentication.MicrosoftAccount.dll\". The specified path, file name, or both are too long. The fully qualified file name must be less than 260 characters, and the directory name must be less than 248 characters.\r\n  at Microsoft.Build.Shared.ErrorUtilities.ThrowInvalidOperation(String resourceName, Object[] args)\r\n  at Microsoft.Build.Shared.FileUtilities.ItemSpecModifiers.GetItemSpecModifier(String currentDirectory, String itemSpec, String definingProjectEscaped, String modifier, String& fullPath)\r\n  at Microsoft.Build.Evaluation.BuiltInMetadata.GetMetadataValueEscaped(String currentDirectory, String evaluatedIncludeBeforeWildcardExpansionEscaped, String evaluatedIncludeEscaped, String definingProjectEscaped, String name, String& fullPath)\r\n  at Microsoft.Build.Execution.ProjectItemInstance.TaskItem.GetBuiltInMetadataEscaped(String name)\r\n  at Microsoft.Build.Execution.ProjectItemInstance.TaskItem.GetMetadataEscaped(String metadataName)\r\n  at Microsoft.Build.Execution.ProjectItemInstance.TaskItem.GetMetadata(String metadataName)\r\n  at Microsoft.NET.Build.Tasks.JoinItems.<>c__DisplayClass28_0.<ExecuteCore>b__0(ITaskItem item)\r\n  at System.Linq.Enumerable.<JoinIterator>d__38`4.MoveNext()\r\n  at System.Linq.Buffer`1..ctor(IEnumerable`1 source)\r\n  at System.Linq.Enumerable.ToArray[TSource](IEnumerable`1 source)\r\n  at Microsoft.NET.Build.Tasks.JoinItems.ExecuteCore()\r\n  at Microsoft.NET.Build.Tasks.TaskBase.Execute()\r\n  at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute()\r\n  at Microsoft.Build.BackEnd.TaskBuilder.<ExecuteInstantiatedTask>d__26.MoveNext() (MSB4018) (mvc21test)\r\n```\r\n\r\nThe path `C:\\Program Files\\dotnet\\sdk\\2.1.300-preview1-008174\\Sdks\\Microsoft.NET.Sdk\\build\\..\\..\\..\\..\\NuGetFallbackFolder\\microsoft.aspnetcore.authentication.microsoftaccount\\2.1.0-preview1-final\\lib\\netstandard2.0\\Microsoft.AspNetCore.Authentication.MicrosoftAccount.dll` is too long.\r\n\r\nThis seems to be a recent regression since this error is not present in .NET Core 2.0. \r\n\r\nI'm guessing that a carefully placed `Path.GetFullPath` should shorten this path significantly by removing all those `..\\..\\..\\..`.\r\n\r\n@dsplaisted would be super nice to understand what's going on here.\r\n\r\ncc @toddgrun"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"983818840961269761","CreatedAt":"2018-04-10T21:27:44+00:00","UserScreenname":"dotnet","Text":"Explore CosmosDB with .NET Core and MongoDB https://t.co/9VeWPHkIKo","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":55,"FavoriteCount":16,"RawContent":null},{"Id":"983697698778841088","CreatedAt":"2018-04-10T13:26:22+00:00","UserScreenname":"dotnet","Text":"Join our @csharpfritz with guest @jonskeet for some live coding this morning as they discuss managing DateTime valu… https://t.co/c6k5MACy5Z","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":19,"FavoriteCount":9,"RawContent":null},{"Id":"983487812107304960","CreatedAt":"2018-04-09T23:32:21+00:00","UserScreenname":"dotnet","Text":"Curious which analyzers/fixers (“Quick Actions”) @roslyn provides? @kuhlenhuth has the answer. https://t.co/nawR22r6jz","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":19,"FavoriteCount":7,"RawContent":null},{"Id":"981533325767606273","CreatedAt":"2018-04-04T14:05:55+00:00","UserScreenname":"dotnet","Text":"Jeff (@csharpfritz) is working with @Azure Q &amp; A Maker today to improve his chat-bot for Twitch and Mixer.  Tune in… https://t.co/MLdDPdKPTL","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":13,"FavoriteCount":1,"RawContent":null}]}},"RunOn":"2018-04-11T05:30:19.4536248Z","RunDurationInMilliseconds":7739}