{"Data":{"Blog":{"FeedItems":[{"Title":"Xamarin and .NET Developer Events in September","PublishedOn":"2018-08-31T16:42:53+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Xamarin and .NET developer events this September: September 10: Los Angeles, CA. USA &#124; Los Angeles .NET Developers Group: LADOTNET &#8211; The Architectural Mindset by Jeremy Cameron September...","Href":"https://blog.xamarin.com/xamarin-and-net-developer-events-in-september/","RawContent":null},{"Title":"Using the New Xamarin.Forms Controls Toolbox","PublishedOn":"2018-08-24T14:03:29+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Xamarin.Forms empowers you to deliver the same experience to multiple platforms. Using a set of UI elements abstracted from common mobile app controls, like text inputs and buttons, you can quickly...","Href":"https://blog.xamarin.com/using-new-xamarin-forms-controls-toolbox/","RawContent":null},{"Title":"Getting Started with Android Pie","PublishedOn":"2018-08-21T20:19:21+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Google recently released Android Pie for developers to enhance their apps and build new experiences with. Previously, Microsoft released an Android 9.0 Preview for Xamarin.Android and as of today, you...","Href":"https://blog.xamarin.com/android-pie-preview-getting-started/","RawContent":null},{"Title":"Exploring New iOS 12 ARKit Capabilities With Xamarin","PublishedOn":"2018-08-20T20:04:07+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"It&#8217;s summertime, which for Xamarin developers means new iOS betas to explore and learn. ARKit, which debuted last year in iOS 11, has matured over the past year and in iOS 12 is much more...","Href":"https://blog.xamarin.com/exploring-new-ios-12-arkit-capabilities-with-xamarin/","RawContent":null},{"Title":"Attend A .NET Conf Event Near You!","PublishedOn":"2018-08-15T20:29:28+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"If you have not yet heard of the .NET Conf, it is a FREE, 3-day virtual developer event co-organized by the .NET community and Microsoft. There is a wide selection of live sessions with feature...","Href":"https://blog.xamarin.com/attend-a-net-conf-event-near-you/","RawContent":null},{"Title":"Preview: iOS 12 development with Xamarin","PublishedOn":"2018-08-10T16:30:10+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The latest Xamarin preview release supports Xcode 10 beta 5, which includes beta SDKs for iOS 12, macOS Mojave (10.14), watchOS 5, and tvOS 12. Get Started With New iOS 12 APIs Today: iOS 12 includes...","Href":"https://blog.xamarin.com/preview-ios-12-development-with-xamarin/","RawContent":null},{"Title":"Securing network traffic with TLS 1.2","PublishedOn":"2018-08-07T15:58:03+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Secure and encrypted network communications are a crucial part of mobile application development. Without some kind of security around the communication layer, it is trivial for a third party to...","Href":"https://blog.xamarin.com/securing-network-traffic-with-tls-1-2/","RawContent":null},{"Title":"Adaptive Mobile Designs with FlexLayout","PublishedOn":"2018-08-03T17:33:49+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Xamarin.Forms is fantastic for quickly shipping a single code base to multiple platforms and devices. As soon as you are present on all those different screens, you need to make sure your UI looks as...","Href":"https://blog.xamarin.com/adaptive-mobile-designs-with-flexlayout/","RawContent":null},{"Title":"Xamarin and .NET Developer Events in August!","PublishedOn":"2018-08-01T19:46:13+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This year&#8217;s .NET Conf is coming to you September 12 &#8211; 14, 2018! Over the course of the three days, you have a wide selection of live sessions that feature speakers from the community and...","Href":"https://blog.xamarin.com/xamarin-dotnet-developer-events-august/","RawContent":null},{"Title":"Guest Post: Visual UI tests on iOS simulator using Xamarin and Appium","PublishedOn":"2018-07-30T19:07:52+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This is a guest post from Sophie Tagar, a customer support engineer at Applitools. Previously, Sophie was a software developer at Matrix Israel where, among other things, she did full stack...","Href":"https://blog.xamarin.com/visual-ui-tests-ios-simulator-using-xamarin-appium/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"8220707432","Type":"PullRequestEvent","CreatedAt":"2018-09-05T21:59:00","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2149","RelatedDescription":"Opened pull request \"[Mono.Android] build and reference non-PCL Java.Interop (#2105)\" (#2149) at xamarin/xamarin-android","RelatedBody":"Fixes: http://work.devdiv.io/667174\r\n\r\nContext: https://github.com/xamarin/java.interop/commit/893562cb6b02031c5991ec94769db5fd1a88b53e\r\nContext: https://github.com/xamarin/java.interop/commit/659711c77407c95a27b58ff6f2c84c9fe6db0691\r\nContext: https://github.com/xamarin/java.interop/compare/b873e81...a09932d\r\n\r\nBumped to java.interop/d15-9/a09932d\r\n\r\nBuild `lib\\xamarin.android\\xbuild-frameworks\\MonoAndroid\\v1.0\\Java.Interop.dll`\r\nas a `MonoAndroid`-profile assembly instead of as a PCL assembly.\r\nThis decreases the assemblies referenced in a \"Hello World\"\r\nXamarin.Android project dramatically; this:\r\n\r\n\tAdding assembly reference for Java.Interop, Version=0.1.0.0, Culture=neutral, PublicKeyToken=84e04ff9cfb79065, recursively...\r\n\t    Adding assembly reference for System.Runtime, Version=4.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, recursively...\r\n\t    Adding assembly reference for System.ComponentModel.Composition, Version=2.0.5.0, Culture=neutral, PublicKeyToken=b77a5c561934e089, recursively...\r\n\t    Adding assembly reference for System.Diagnostics.Debug, Version=4.0.10.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, recursively...\r\n\t    Adding assembly reference for System.Threading, Version=4.0.10.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, recursively...\r\n\t    Adding assembly reference for System.Collections, Version=4.0.10.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, recursively...\r\n\t    Adding assembly reference for System.Collections.Concurrent, Version=4.0.10.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, recursively...\r\n\t    Adding assembly reference for System.Reflection, Version=4.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, recursively...\r\n\t    Adding assembly reference for System.Linq.Expressions, Version=4.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, recursively...\r\n\t    Adding assembly reference for System.Reflection.Primitives, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, recursively...\r\n\t    Adding assembly reference for System.Dynamic.Runtime, Version=4.0.10.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, recursively...\r\n\t    Adding assembly reference for System.ObjectModel, Version=4.0.10.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, recursively...\r\n\t    Adding assembly reference for System.Linq, Version=4.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, recursively...\r\n\t    Adding assembly reference for System.Runtime.InteropServices, Version=4.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, recursively...\r\n\t    Adding assembly reference for System.Runtime.Extensions, Version=4.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, recursively...\r\n\t    Adding assembly reference for System.Reflection.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a, recursively...\r\n\tAdding assembly reference for Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=84e04ff9cfb79065, recursively...\r\n\r\nnow becomes:\r\n\r\n\tAdding assembly reference for Java.Interop, Version=0.1.0.0, Culture=neutral, PublicKeyToken=84e04ff9cfb79065, recursively...\r\n\tAdding assembly reference for Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=84e04ff9cfb79065, recursively...\r\n\r\nBecause fewer assemblies need to be resolved, the `Rebuild` target\r\ntimes improve by 30%-50% for the \"Hello World\" app:\r\n\r\n  - `Debug` + PCL:            8.424s\r\n  - `Debug` + *not* PCL:      4.258s (~50% faster!)\r\n  - `Release` + PCL:         13.651s\r\n  - `Release` + *not* PCL:    9.487s (~30% faster!)\r\n\r\nThe `lib\\xamarin.android\\xbuild\\Xamarin\\Android\\Java.Interop.dll`\r\ncopy used by `Xamarin.Android.Build.Tasks.dll` remains unchanged, as\r\nit is referenced by `Xamarin.Android.Build.Tasks.csproj`."},{"Id":"8220599979","Type":"PullRequestEvent","CreatedAt":"2018-09-05T21:33:49","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2148","RelatedDescription":"Opened pull request \"[Xamarin.Android.Build.Tasks] should Dispose AssemblyDefinition\" (#2148) at xamarin/xamarin-android","RelatedBody":"Reviewing our codebase, we found a place where the `BuildApk` task was\r\ncalling an overload for `MonoAndroidHelper.IsReferenceAssembly`.\r\n\r\nThis presented two problems:\r\n1. It was using the `InMemory` option\r\n2. We were not calling `Dispose()`!\r\n\r\nCase No.1 was bad, since we basically load every assembly into memory!\r\n\r\n    foreach (ITaskItem assembly in ResolvedUserAssemblies) {\r\n        if (MonoAndroidHelper.IsReferenceAssembly (assembly.ItemSpec)) {\r\n    //...\r\n    foreach (ITaskItem assembly in ResolvedFrameworkAssemblies) {\r\n        if (MonoAndroidHelper.IsReferenceAssembly (assembly.ItemSpec)) {\r\n\r\nLikewise, we need to call `Dispose` here, since a lock could be held\r\non the file here on Windows.\r\n\r\nThe changes here made `BuildApk` slower (and more correct!), but the\r\noverall build time better.\r\n\r\nBefore:\r\n\r\n    5890 ms  BuildApk                                   1 calls\r\n    Time Elapsed 00:01:02.59\r\n\r\nAfter:\r\n\r\n    6377 ms  BuildApk                                   1 calls\r\n    Time Elapsed 00:00:59.37\r\n\r\nI think the `AssemblyDefinition` instances must have been getting\r\ncleaned up later in the build by the GC (if we were lucky), and also\r\nused *a lot* more memory. This would contribute to overall build time."},{"Id":"8220245973","Type":"PullRequestEvent","CreatedAt":"2018-09-05T20:24:08","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2147","RelatedDescription":"Opened pull request \"[Mono.Android] Use package fallback in GetJavaToManagedType on desktop\" (#2147) at xamarin/xamarin-android","RelatedBody":"This partially reverts commit 6418edce\r\n\r\nContext: http://work.devdiv.io/675738\r\n\r\nCommit 6418edce breaks the Android Designer, because the\r\nAndroid Designer doesn't generate `typemap.jm` and `typemap.mj` files,\r\nwhich `monodroid_typemap_java_to_managed()` uses in order to perform\r\nthe Java->managed type mapping.  Without an appropriate `typemap.jm`\r\nfile, and with the removal of the Reflection (-ish)-based fallback\r\ncode in commit 6418edce, there is no way within the Android Designer\r\nto associate a Java type with a corresponding C# type, for e.g. custom\r\n(\"new\") `View` subclasses written in C# or outside of `android.jar`.\r\n\r\nThe d15-9 branch hit the same problem, and likewise reverted this\r\nchange in commit 91a3fe52.\r\n\r\nInstead of *fully* reverting 6418edce, \"revert\" it *on Desktop*.\r\nWhen running on an Android Device, the fallback codepath won't be\r\nused, allowing for faster runtime execution (less work is done), while\r\nwithin the Android Designer (Desktop execution), the fallback code\r\npath will once again be available."},{"Id":"8220169093","Type":"PullRequestEvent","CreatedAt":"2018-09-05T20:08:43","Actor":"luhenry","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2146","RelatedDescription":"Opened pull request \"[mono-2018-06] Fix MXE + LLVM 6.0 build\" (#2146) at xamarin/xamarin-android","RelatedBody":""},{"Id":"8220161855","Type":"PullRequestEvent","CreatedAt":"2018-09-05T20:07:18","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2124","RelatedDescription":"Merged pull request \"[Xamarin.Android.Build.Tasks] `_CreateAapt2VersionCache` slow due to wildcard usage\" (#2124) at xamarin/xamarin-android","RelatedBody":"Fixes #2121\r\n\r\nThere were a number of performace issues with `_CreateAapt2VersionCache`.\r\nFirst the wildcards were processing the ENTIRE `$(IntermediateOutputPath)`!\r\nWhat they should have been doing was targeting specific\r\ndirectories. I.e the root of `$(IntermediateOutputPath)` and\r\nthe directories under `$(IntermediateOutputPath)\\lp`.\r\n\r\nSecond the target did not have a Condition to stop it running if\r\nthe versions matched, so that has been added.\r\n\r\nHowever, even if a target is NOT run. MSbuild will still evaluate\r\nthe `PropertyGroups` and `ItemGroups` within the targets. So we\r\nneed to add `Conditon` on the `_CompiledFlataArchive` and\r\n`_CompiledFlataStamp` items as well.\r\n\r\nWith these in place the time when this target is skipped is down\r\nto 1ms."},{"Id":"8220161841","Type":"IssuesEvent","CreatedAt":"2018-09-05T20:07:18","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2121","RelatedDescription":"Closed issue \"[Aapt2] `_CreateAapt2VersionCache` slow due to wildcard usage\" (#2121) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. I built the `tests/Xamarin.Forms-Performance-Integration` app\r\n2. Modify a XAML file, build the app again\r\n3. `_CreateAapt2VersionCache` took 181ms, but the values were cached!\r\n\r\nI think the problem is due to wildcard usage:\r\n```xml\r\n<ItemGroup>\r\n\t<_CompiledFlataArchive Include=\"$(IntermediateOutputPath)\\**\\*.flata\"/>\r\n\t<_CompiledFlataStamp Include=\"$(IntermediateOutputPath)\\**\\compiled.stamp\"/>\r\n</ItemGroup>\r\n```\r\n\r\nMaybe these could be done without using `**`? we have a lot of files in here.\r\n\r\n### Expected Behavior\r\n\r\n`_CreateAapt2VersionCache` should take near 1ms when things are cached.\r\n\r\n### Actual Behavior\r\n\r\n`_CreateAapt2VersionCache` is taking ~181ms even when cached.\r\n\r\n### Version Information\r\n\r\nWas using master as of: https://github.com/xamarin/xamarin-android/commit/0a46788a93e10b6fb68afb12ba350635da2e642c\r\n\r\n### Log File\r\n\r\n[msbuild.zip](https://github.com/xamarin/xamarin-android/files/2337025/msbuild.zip)\r\n"},{"Id":"8220138065","Type":"PullRequestEvent","CreatedAt":"2018-09-05T20:02:29","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2129","RelatedDescription":"Merged pull request \"[Xamarin.Android.Build.Tasks] Add ConvertCustomView Task\" (#2129) at xamarin/xamarin-android","RelatedBody":"Fixed #2100\r\n\r\nCurrently `ConvertResourcesCases` is called twice on ALL\r\nresources referenced by the project. This is terribly inefficient.\r\nHowever it is required. The first pass is done before a `Compile`,\r\nthis fixes up the casing for things like drawables etc ready to\r\nbe processed by aapt. The second is done after `GenerateJavaStubs`\r\nwhich happens AFTER the `Compile` step. This is to replace any\r\ncustom view references with the correct `{md5}.View` style references.\r\nThis is because we replace the normal readable namespace with an md5 hash.\r\n\r\nThe problem was that `ConvertResourcesCases` is doing a TON of\r\nwork it doesn't really need to do the second time around. For example\r\nchecking if it needs to lower case names of items. The second pass\r\nreally only needs to worry about custom views. In addition to that\r\nit was also re-scanning ALL the files again.\r\n\r\nThis commit introduces a new Task `ConvertCustomView`. The sole\r\npurpose of this task is to fix up the layout files which contain\r\ncustom views. It does nothing else. To make this even quicker we\r\nmodify `ConvertResourcesCases` to emit a mapping file (class-map.txt). This file\r\ncontains items like\r\n\r\n\tMonoDroid.Example.MyLayout;/fullpath/to/file.xml\r\n\tandroid.support.v7.widget.ActionBarOverlayLayout;/fullpath/to/some/other/file.xml\r\n\r\nThis allows us to know were the files are which contain ANY layout.\r\n\r\nWith this information in conjuction with the `acw_map.txt` file will\r\nallow us to do a targeted update. So we go through the `acw_map.txt`\r\nvalues and fix up those files where we have entires in the `class-map.txt`.\r\n\r\nThis reduces the amount of time spent processing files quite a bit.\r\nFor a Blank Xamarin Forms app from a clean build.\r\n\r\n\t2639 ms  ConvertResourcesCases                      1 calls\r\n\t   3 ms  ConvertCustomView                          1 calls\r\n\r\nNormally the `ConvertResourcesCases` would be called twice and would\r\ntake a total of 5-6 seconds.\r\n\r\n- [x] Fix up Paths in Error Message\r\n- [X] Write a decent Commit Message\r\n- [x] General Clean up."},{"Id":"8220138054","Type":"IssuesEvent","CreatedAt":"2018-09-05T20:02:29","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2100","RelatedDescription":"Closed issue \"Rework Layout CustomView replacement.\" (#2100) at xamarin/xamarin-android","RelatedBody":"Currently `ConvertResourcesCases` is called twice on ALL resources referenced by the project. \r\nThis is terribly inefficient. However it is required. The first pass is done before a Compile, this fixes up the casing for things like drawables etc  ready to be processed by `aapt`. The second is done after `GenerateJavaStubs` which happens AFTER the Compile step. This is to replace any custom view references with the correct `md5.View` style references. This is because we replace the normal readable  namespace with an md5 hash.\r\n\r\nThe problem is we use `ConvertResourcesCases` and it does all the processing it did in the first pass again (or tries too).\r\n\r\nSo here is an idea.\r\n\r\nOn the first pass, we create a map file which contains a list of ALL the views we find in a layout file and the file it was found in. For Example\r\n\r\n```\r\nMonoDroid.ApiDemo.Spinner1=res/layouts/custom_view.xml\r\nandroid.support.v7.FancyLayout=lp/11/res/fancylayout.xml\r\n```\r\n\r\nWe then write a new Task which will using this map file in conjunction with the `act_map.txt` (or better the typemap.jm/mj files).\r\n\r\nSample output of `act_map.txt`\r\n```\r\nMonoDroid.ApiDemo.LogTextBox;md5c5caeb16a99a36adf764572343f76a16.LogTextBox\r\nMonoDroid.ApiDemo.Spinner1;md5c5caeb16a99a36adf764572343f76a16.Spinner1\r\n```\r\n\r\n\r\nThis will allow us to speficially target the exact file(s) which contain the views we need to replace. It should save us having to parse every xml layout file and instead use dictionary lookups to quickly find the file we need to process and possibly just do a string replace.. \r\n\r\n "},{"Id":"8220056213","Type":"PullRequestEvent","CreatedAt":"2018-09-05T19:46:46","Actor":"JonDouglas","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2145","RelatedDescription":"Opened pull request \"Add 15.8, 15.9, and update master version number to downloads section.\" (#2145) at xamarin/xamarin-android","RelatedBody":"Updates the https://github.com/xamarin/xamarin-android#downloads section to include our most recent released OSS builds and updates the version on the current master builds."},{"Id":"8218860429","Type":"PullRequestEvent","CreatedAt":"2018-09-05T16:02:02","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2144","RelatedDescription":"Opened pull request \"[Xamarin.Android.Build.Tasks] ignore aapt/AndroidManifest.xml\" (#2144) at xamarin/xamarin-android","RelatedBody":"Context: https://stackoverflow.com/questions/41592744/function-of-aapt-androidmanifest-xml-in-aar\r\nFixes: https://github.com/xamarin/xamarin-android/issues/2141\r\n\r\nApparently Android Studio is now shipping a duplicate, pre-formatted\r\n`AndroidManifest.xml` file, inside of AAR files. Its purpose is to be\r\nused with `aapt` invocations, since errors may be thrown related to\r\n`{` or `}` characters.\r\n\r\nSince this file may exist in AAR files used by Xamarin.Android, we\r\nshould ignore `aapt/AndroidManifest.xml` files the same way we ignore\r\nthem inside `manifest` or `bin` directories.\r\n\r\nChanges:\r\n- Added a `IgnoredManifestDirectories` list, since we are getting to a\r\n  point where `!= && != && !=` would be a lot of noise.\r\n- Switched the LINQ expression to simple `foreach` loop, which should\r\n  also give a slight performance benefit."},{"Id":"8218553636","Type":"PullRequestEvent","CreatedAt":"2018-09-05T15:15:40","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2130","RelatedDescription":"Merged pull request \"[Xamarin.Android.Build.Tasks] precompile SetVsMonoAndroidRegistryKey\" (#2130) at xamarin/xamarin-android","RelatedBody":"In `Xamarin.Android.Sdk.props` we have some inline C# code for a\r\nMSBuild task named `SetVsMonoAndroidRegistryKey`. Which is\r\nunderstandable, since the code needed is so simple. But thinking about\r\nit, MSBuild has to *compile* this code to run it. Which seems\r\ninherently slower than if we compiled the code during our build.\r\n\r\nCurrently its entire parent target, `RedirectMonoAndroidSdkPaths`,\r\ntakes:\r\n\r\n    157 ms  RedirectMonoAndroidSdkPaths                1 calls\r\n\r\nI moved this task inside `Xamarin.Android.Build.Tasks.dll`, and we\r\nappear to get some improvements \"for free\":\r\n\r\n    76 ms  RedirectMonoAndroidSdkPaths                1 calls\r\n\r\nI looked at some past logs, and there are some times where the\r\n`RedirectMonoAndroidSdkPaths` target was taking over 200ms. I suspect\r\nMSBuild might also have some caching functionality for inlined C#\r\ncode. There might be a cached assembly somewhere? Not sure.\r\n\r\nWhat makes this a better fix is that this target runs for all\r\nbuilds--even builds with no changes.\r\n\r\nGeneral changes:\r\n- The `<UsingTask />` doesn't need a condition, since it will be\r\n  lazily evaluated anyways.\r\n- Used string interpolation where it looked nicer.\r\n- Used `LogDebugMessage` and improved the log message."}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"8220746238","Type":"PullRequestEvent","CreatedAt":"2018-09-05T22:08:31","Actor":"jassmith","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/3701","RelatedDescription":"Merged pull request \"[Android] Fixed TimePicker to support 24H mode\" (#3701) at xamarin/Xamarin.Forms","RelatedBody":"The 24h mode for the pickerdialog was not working.\r\n\r\nVersion 3.1 was working fine. \r\n\r\nHere is an updated file.\r\n\r\n### Platforms Affected ### \r\n- Android\r\n"},{"Id":"8220745385","Type":"PullRequestEvent","CreatedAt":"2018-09-05T22:08:17","Actor":"jassmith","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/3701","RelatedDescription":null,"RelatedBody":"The 24h mode for the pickerdialog was not working.\r\n\r\nVersion 3.1 was working fine. \r\n\r\nHere is an updated file.\r\n\r\n### Platforms Affected ### \r\n- Android\r\n"},{"Id":"8220745106","Type":"PullRequestEvent","CreatedAt":"2018-09-05T22:08:13","Actor":"jassmith","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/3701","RelatedDescription":"Closed pull request \"[Android] Fixed TimePicker to support 24H mode\" (#3701) at xamarin/Xamarin.Forms","RelatedBody":"The 24h mode for the pickerdialog was not working.\r\n\r\nVersion 3.1 was working fine. \r\n\r\nHere is an updated file.\r\n\r\n### Platforms Affected ### \r\n- Android\r\n"},{"Id":"8220728925","Type":"PullRequestEvent","CreatedAt":"2018-09-05T22:04:04","Actor":"jassmith","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/3518","RelatedDescription":"Merged pull request \" [iOS] Unsubscribe CellPropertyChanged when SwitchCellRenderer is disposed\" (#3518) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nSwitchCellRenderer wasn't unsubscribing when disposed. \r\nThe best way would be to just use the event exposed by our `CellTableViewCell` \r\n\r\nWe should use this in other cell renderers, this will allow to control the unsubscribing  when cell's are dispose and reused. \r\n\r\n### Issues Resolved ###\r\n\r\n- fixes #3408 \r\n\r\n### API Changes ###\r\n\r\nChanges to `CellTableViewCell`\r\n\r\nAdd:\r\n\r\n`public void HandleCellPropertyChanged(object sender, PropertyChangedEventArgs e)`\r\n\r\n`public Action<object, PropertyChangedEventArgs> CellPropertyChanged`\r\n\r\nRemove: \r\n\r\n`public Action<object, PropertyChangedEventArgs> PropertyChanged`\r\n\r\n### Platforms Affected ###\r\n\r\n- iOS\r\n\r\n### Behavioral/Visual Changes ###\r\n\r\nDoesn't crash when SwitchCells go away (are disposed) \r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [ ] Rebased on top of the target branch at time of PR\r\n- [ ] Changes adhere to coding standard"},{"Id":"8220726373","Type":"IssuesEvent","CreatedAt":"2018-09-05T22:03:27","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/3711","RelatedDescription":"Closed issue \"InvalidCastException is being unexpectedly thrown from Forms\" (#3711) at xamarin/Xamarin.Forms","RelatedBody":"\\r\\n\\r\\n<b>Stacktrace:</b><div><b><br></b><div style=\"\"><b>System.InvalidCastException: Specified cast is not valid.</b></div><div style=\"\"><b>&lt;unknown method&gt;</b></div><div style=\"\"><b>Xamarin.Forms.NameScopeExtensions.FindByName[T] (Xamarin.Forms.Internals.INameScope namescope, System.String name) in D:\\a\\1\\s\\Xamarin.Forms.Core\\NameScopeExtensions.cs:14</b></div><div style=\"\"><b>Xamarin.Forms.NameScopeExtensions.FindByName[T] (Xamarin.Forms.Element element, System.String name) in D:\\a\\1\\s\\Xamarin.Forms.Core\\NameScopeExtensions.cs:9</b></div><div style=\"\"><b>ProjectSky.Pages.LogInPage.__InitComponentRuntime ()</b></div><div style=\"\"><b>ProjectSky.Pages.LogInPage.InitializeComponent () in C:\\Users\\bruno\\OneDrive\\Projects\\ProjectSky\\client\\ProjectSky\\obj\\Debug\\netstandard2.0\\Pages\\LogInPage.xaml.g.cs:38</b></div><div style=\"\"><b>ProjectSky.Pages.LogInPage..ctor () in C:\\Users\\bruno\\OneDrive\\Projects\\ProjectSky\\client\\ProjectSky\\Pages\\LogInPage.xaml.cs:17</b></div><div style=\"\"><b>&lt;unknown method&gt;</b></div><div style=\"\"><b>System.Reflection.MonoCMethod.InternalInvoke (System.Object obj, System.Object[] parameters) in /Library/Frameworks/Xamarin.iOS.framework/Versions/11.12.0.4/src/Xamarin.iOS/mcs/class/corlib/System.Reflection/MonoMethod.cs:661</b></div><div style=\"font-weight:bold;\"><br></div></div><div style=\"\">Is there a way we can provide more information? Also, what kind of scenario would trigger this and can we robustify ourselves against this kind of scenario?</div>"},{"Id":"8220632555","Type":"IssuesEvent","CreatedAt":"2018-09-05T21:41:14","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/3720","RelatedDescription":"Closed issue \"InvalidCastException is being unexpectedly thrown from Forms\" (#3720) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\n\r\n\\r\\n\\r\\n<b>Stacktrace:</b><div><b><br></b><div style=\"\"><b>System.InvalidCastException: Specified cast is not valid.</b></div><div style=\"\"><b>&lt;unknown method&gt;</b></div><div style=\"\"><b>Xamarin.Forms.NameScopeExtensions.FindByName[T] (Xamarin.Forms.Internals.INameScope namescope, System.String name) in D:\\a\\1\\s\\Xamarin.Forms.Core\\NameScopeExtensions.cs:14</b></div><div style=\"\"><b>Xamarin.Forms.NameScopeExtensions.FindByName[T] (Xamarin.Forms.Element element, System.String name) in D:\\a\\1\\s\\Xamarin.Forms.Core\\NameScopeExtensions.cs:9</b></div><div style=\"\"><b>ProjectSky.Pages.LogInPage.__InitComponentRuntime ()</b></div><div style=\"\"><b>ProjectSky.Pages.LogInPage.InitializeComponent () in C:\\Users\\bruno\\OneDrive\\Projects\\ProjectSky\\client\\ProjectSky\\obj\\Debug\\netstandard2.0\\Pages\\LogInPage.xaml.g.cs:38</b></div><div style=\"\"><b>ProjectSky.Pages.LogInPage..ctor () in C:\\Users\\bruno\\OneDrive\\Projects\\ProjectSky\\client\\ProjectSky\\Pages\\LogInPage.xaml.cs:17</b></div><div style=\"\"><b>&lt;unknown method&gt;</b></div><div style=\"\"><b>System.Reflection.MonoCMethod.InternalInvoke (System.Object obj, System.Object[] parameters) in /Library/Frameworks/Xamarin.iOS.framework/Versions/11.12.0.4/src/Xamarin.iOS/mcs/class/corlib/System.Reflection/MonoMethod.cs:661</b></div><div style=\"font-weight:bold;\"><br></div></div><div style=\"\">Is there a way we can provide more information? Also, what kind of scenario would trigger this and can we robustify ourselves against this kind of scenario?</div>\r\n\r\n### Source\r\n\r\n[636575](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/636575)"},{"Id":"8220597960","Type":"IssuesEvent","CreatedAt":"2018-09-05T21:33:22","Actor":"PureWeen","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/3725","RelatedDescription":"Opened issue \"[GTK] TableView doesn't appear to be updating when you remove and add new Table Sections\" (#3725) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\nWhen running the Xamarin Forms Control Gallery for GTK the test cases screen doesn't appear to update it's view as you try to filter down issues\r\n\r\nThe list of issues is updated by removing and adding a new Section\r\n```C#\r\n\t_section = new TableSection(\"Bug Repro\");\r\n\r\n\t\t\t\tforeach (var issueCell in issueCells) {\r\n\t\t\t\t\t_section.Add (issueCell);\r\n\t\t\t\t} \r\n\r\n\t\t\t\tRoot.Add(_section);\r\n```\r\nBut those changes don't seem to propagate visually\r\n\r\n### Steps to Reproduce\r\n\r\n1.  Run Xamarin.Forms.ControlGallery.GTK\r\n2. Click go to test cases\r\n3. type things into the SearchBar\r\n4. you'll notice that the list of issues doesn't update like it does on the other platforms\r\n\r\n### Expected Behavior\r\nthe list of issues should filter down based on the input\r\n\r\n### Actual Behavior\r\nThey don't filter down\r\n\r\n### Basic Information\r\n\r\n- Version with issue: 3.2\r\n- Last known good version: not sure\r\n\r\n\r\n### Screenshots\r\n\r\n<!-- If the issue is a visual issue, please include screenshots showing the problem if possible -->\r\n![image](https://user-images.githubusercontent.com/5375137/45122405-f27abd00-b120-11e8-867f-a243de1c6d87.png)\r\n\r\nvs\r\n\r\n![image](https://user-images.githubusercontent.com/5375137/45122419-fc9cbb80-b120-11e8-922e-96614d40bddc.png)\r\n\r\n\r\n"},{"Id":"8220485035","Type":"IssuesEvent","CreatedAt":"2018-09-05T21:09:49","Actor":"PureWeen","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/3724","RelatedDescription":"Opened issue \"[iOS] Make the 5 click reset control gallery feature of iOS more explicit\" (#3724) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\n\r\nCurrently on the control gallery in ios if you tap 5 times quick enough it causes the control gallery to reset. This feature is extremely helpful but can also be very confusing when testing things like gestures or just clicking buttons in general.\r\n\r\nIt would be useful to slightly modify this feature to lower the probability of the action matching up with testing procedures\r\n\r\nAdding a way to disable this feature, pop open a dialog instead of auto restart, or  possibly isolate the clicking to a specific region.\r\n\r\n"},{"Id":"8220065637","Type":"PullRequestEvent","CreatedAt":"2018-09-05T19:48:36","Actor":"PureWeen","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/3723","RelatedDescription":"Opened pull request \"[UWP] uncomment tests that are now passing for 3188\" (#3723) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nRemove if defs for UWP that are no longer valid because of https://github.com/xamarin/Xamarin.Forms/pull/3514\r\n\r\n\r\n### Platforms Affected ### \r\n\r\n- UWP\r\n\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [ ] Rebased on top of the target branch at time of PR\r\n- [ ] Changes adhere to coding standard\r\n"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"8220307363","Type":"PullRequestEvent","CreatedAt":"2018-09-05T20:36:12","Actor":"VincentDondain","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4759","RelatedDescription":"Opened pull request \"[metal] Fix 'indirectRenderCommandAtIndex' binding\" (#4759) at xamarin/xamarin-macios","RelatedBody":"`CreateIndirectRenderCommand` implies we're creating the command while this API \"returns the CPU-based indirect render command at the given index of the indirect command buffer\". Moving to `GetCommand` which is more accurate."},{"Id":"8219645651","Type":"PullRequestEvent","CreatedAt":"2018-09-05T18:27:28","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4755","RelatedDescription":"Merged pull request \"[coregraphics] Rename enum value to 'Xyz' like other members, e.g. 'CreateGenericXyz', are already named.\" (#4755) at xamarin/xamarin-macios","RelatedBody":""}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1035572899996987397","CreatedAt":"2018-08-31T16:59:54+00:00","UserScreenname":"xamarinhq","Text":"Xamarin and .NET Developer Events in September\nHere are all the links you'll need to get involved.… https://t.co/YJAa83E61y","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":49,"FavoriteCount":36,"RawContent":null},{"Id":"1032375788375498753","CreatedAt":"2018-08-22T21:15:43+00:00","UserScreenname":"xamarinhq","Text":"Getting Started with Android Pie. Now you can download the support for #AndroidPie inside https://t.co/7TMjXUsU4u 9… https://t.co/sNrOIuI741","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":53,"FavoriteCount":40,"RawContent":null},{"Id":"1031653104394096640","CreatedAt":"2018-08-20T21:24:01+00:00","UserScreenname":"xamarinhq","Text":"Hey, Xamarin developers. It's time to explore and learn about the latest and greatest iOS 12 ARKit Capabilities w/… https://t.co/6x3vq5IuEb","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":120,"FavoriteCount":78,"RawContent":null},{"Id":"1029840138099220487","CreatedAt":"2018-08-15T21:19:57+00:00","UserScreenname":"xamarinhq","Text":"Attend A #dotNETConf Event Near You - https://t.co/VrHYwnCS69\n\nIt's a FREE, 3-day virtual dev event co-organized by… https://t.co/tqMWcB8mJz","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":53,"FavoriteCount":35,"RawContent":null},{"Id":"1026898128509825024","CreatedAt":"2018-08-07T18:29:27+00:00","UserScreenname":"xamarinhq","Text":"- Authentication   - Encryption   - Integrity\n3 important requirements to securing network communications &amp; absolut… https://t.co/hDPkHLZsLA","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":95,"FavoriteCount":50,"RawContent":null},{"Id":"1025442837813518336","CreatedAt":"2018-08-03T18:06:38+00:00","UserScreenname":"xamarinhq","Text":"Want to use a single code base for multiple platforms and devices? Of course you do. ...just posted to our Xamarin… https://t.co/qJBV4vvEir","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":177,"FavoriteCount":86,"RawContent":null},{"Id":"1024752638599028736","CreatedAt":"2018-08-01T20:24:02+00:00","UserScreenname":"xamarinhq","Text":"This year’s #dotNETConf is coming 9/12-14. Live sessions w/ speakers from the community &amp; it's your chance to learn… https://t.co/Nujb04dGd4","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":74,"FavoriteCount":47,"RawContent":null},{"Id":"1024013376295452672","CreatedAt":"2018-07-30T19:26:28+00:00","UserScreenname":"xamarinhq","Text":"Here's everything you need to know to integrate automated visual UI tests into a dev toolchain that includes an… https://t.co/12Ihjj4bSN","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":121,"FavoriteCount":58,"RawContent":null},{"Id":"1022882059763830784","CreatedAt":"2018-07-27T16:31:01+00:00","UserScreenname":"xamarinhq","Text":"https://t.co/RGpgfHMoPZ -- Announcing Xamarin .Android support for Android 9.0 (P) now available for both #VS2017 &amp;… https://t.co/9clAy4LHZp","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":84,"FavoriteCount":54,"RawContent":null},{"Id":"1022866229143461888","CreatedAt":"2018-07-27T15:28:07+00:00","UserScreenname":"xamarinhq","Text":"Previewing files from inside your Xamarin .iOS app is a great way to enhance user experience. ...and adding this fe… https://t.co/tF7v5at9xo","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":62,"FavoriteCount":31,"RawContent":null},{"Id":"1019670557011243008","CreatedAt":"2018-07-18T19:49:40+00:00","UserScreenname":"xamarinhq","Text":"Xamarin.Forms 3.1 delivers the latest in quality improvements. We're excited to introduce Xamarin.Forms 3.1, now wi… https://t.co/qW6S2P7Hi0","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":262,"FavoriteCount":163,"RawContent":null},{"Id":"1016758939877117952","CreatedAt":"2018-07-10T18:59:56+00:00","UserScreenname":"xamarinhq","Text":"Understanding your app, it's users, &amp; their interactions helps you build a 5-star app. Application Insights w/ AppC… https://t.co/Smw5tVHZ1X","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":43,"FavoriteCount":26,"RawContent":null},{"Id":"1014949294737186816","CreatedAt":"2018-07-05T19:09:03+00:00","UserScreenname":"xamarinhq","Text":"Cool intros to new goodies in &lt;10 minutes! Explore some of the “Snack Pack” episodes that @JamesMontemagno bundled… https://t.co/80gmo35fb6","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":89,"FavoriteCount":43,"RawContent":null},{"Id":"1014903254034141190","CreatedAt":"2018-07-05T16:06:06+00:00","UserScreenname":"xamarinhq","Text":"Using #TensorFlow and #Azure to add image classification to your Android apps: https://t.co/45lGqihW7e https://t.co/3RaJk3O0xb","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":43,"FavoriteCount":34,"RawContent":null},{"Id":"1014521211970379776","CreatedAt":"2018-07-04T14:48:00+00:00","UserScreenname":"xamarinhq","Text":"Check out this handy curated list of awesome #Xamarin books written by other developers in the #Xamarin community: https://t.co/Yu7V3tVSRq","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":63,"FavoriteCount":34,"RawContent":null},{"Id":"1014159326645313537","CreatedAt":"2018-07-03T14:50:00+00:00","UserScreenname":"xamarinhq","Text":"A brief history of #dotNET Standard (and where it's going): https://t.co/AfiPETlRiv","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":40,"FavoriteCount":25,"RawContent":null}]}},"RunOn":"2018-09-06T05:30:53.8097461Z","RunDurationInMilliseconds":3899}