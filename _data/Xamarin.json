{"Data":{"Blog":{"FeedItems":[{"Title":"Debugging Xamarin Open Source Frameworks: Part 2, Xamarin.iOS","PublishedOn":"2018-03-28T19:17:32+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This is the second part in a four-part series. In the first post, we covered building Xamarin.Forms from the source and then stepping into and debugging that code. In this post, we&#8217;ll explore...","Href":"https://blog.xamarin.com/debugging-xamarin-ios/","RawContent":null},{"Title":"New Xamarin.Android and Xamarin.iOS Project Templates Now Available","PublishedOn":"2018-03-26T18:31:40+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Whether you&#8217;re new or a seasoned Xamarin developer, project templates are an important part of the app building journey. They should be easy to find and set you up for success from the start. As...","Href":"https://blog.xamarin.com/new-xamarin-android-ios-templates/","RawContent":null},{"Title":"Performing Geospatial Calculations with Azure CosmosDB","PublishedOn":"2018-03-23T15:56:41+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Azure CosmosDB is a multi-model, globally distributed database, as well as a geospatial calculation powerhouse. It can calculate the distance between two points, determine whether a road runs through...","Href":"https://blog.xamarin.com/performing-geospatial-calculations-azure-cosmosdb/","RawContent":null},{"Title":"Debugging Xamarin Open Source Frameworks: Part 1, Xamarin.Forms","PublishedOn":"2018-03-21T18:59:02+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"At some point, while working with Xamarin to build awesome mobile apps, you may have received an exception or error notification from the Xamarin framework code, Mono runtime, or Base Class Library...","Href":"https://blog.xamarin.com/debugging-xamarin-forms/","RawContent":null},{"Title":"Creating Cloud-Connected Mobile Apps with Xamarin + Azure","PublishedOn":"2018-03-19T17:56:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In Case You Missed It A few weeks ago, we announced “Your Guide to Azure Services for Apps Built with Xamarin” on the Visual Studio blog to help you identify which cloud-connected services in Azure...","Href":"https://blog.xamarin.com/cloud-connected-apps-xamarin-azure/","RawContent":null},{"Title":"Add Cloud Storage to Xamarin Apps with Azure Blob Storage","PublishedOn":"2018-03-16T18:17:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Cloud Storage has become a must-have feature for mobile apps. It gives developers the ability to store large files in the cloud and securely distribute them to all mobile app users. Moving these large...","Href":"https://blog.xamarin.com/xamarin-plus-azure-blob-cloud-storage/","RawContent":null},{"Title":"Xamarin Joins docs.microsoft.com","PublishedOn":"2018-03-14T17:22:39+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today we&#8217;re beginning a new chapter in mobile developer documentation: Xamarin docs are now live on docs.microsoft.com/xamarin! Here are a few highlights of the new documentation experience:...","Href":"https://blog.xamarin.com/xamarin-joins-docs-microsoft-com/","RawContent":null},{"Title":"Podcast: Visual Studio 2017 version 15.6, AR with UrhoSharp, and ML with CoreML","PublishedOn":"2018-03-12T18:43:27+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In this episode of the Xamarin Podcast, James Montemagno and I discuss the fun new features in the Visual Studio 2017 version 15.6 stable release, including macOS environment setup and iOS WiFi...","Href":"https://blog.xamarin.com/podcast-visual-studio-2017-version-15-6-ar-urhosharp-ml-coreml/","RawContent":null},{"Title":"Contributing to Xamarin.iOS and Xamarin.Mac","PublishedOn":"2018-03-08T19:41:29+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Two years ago this month, we made some exciting announcements about the future of Xamarin. One of those announcements detailed the open sourcing of the Xamarin.iOS and Xamarin.Mac SDK. Open source is...","Href":"https://blog.xamarin.com/contributing-to-xamarin-ios-xamarin-mac/","RawContent":null},{"Title":"Visual Studio 2017 Version 15.6 Now Available!","PublishedOn":"2018-03-06T20:17:52+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Our last release, Visual Studio 2017 version 15.5, featured awesome new updates, such as the iOS Remoted Simulator becoming available to all developers, live XAML previewing in Android emulators with...","Href":"https://blog.xamarin.com/visual-studio-2017-version-15-6-now-available/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"7456053448","Type":"IssuesEvent","CreatedAt":"2018-03-29T20:35:35","Actor":"wouterst79","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1494","RelatedDescription":"Opened issue \"SI_TKILL Abort message: '* Assertion at /Users/builder/jenkins/workspace/xamarin-android-d15-6/xamarin-android/external/mono/mono/mini/mini-trampolines.c:1020, condition `plt_entry' not met\" (#1494) at xamarin/xamarin-android","RelatedBody":"Android Crash in Google Pre-Launch, on 1 of 10 devices.\r\nStarted happening after updating all packages, visual studio, and target framework.\r\n\r\n### Steps to Reproduce\r\n\r\n1. This appears to only happen on the Galaxy S7 Edge Android 6.0 / pre launch on Google Play (IE, no crash on other devices)\r\n2. This started happening after I updated all nugets in my Android build to latest version a week or two ago, old and new package config below.\r\n3. The app sill start, and crash after about 3 seconds.\r\n\r\nModel Name: Galaxy S7 Edge\r\nAndroid Version: Android 6.0\r\nNative Platform: armeabi-v7a\r\nCPU Model: Exynos 8890\r\n\r\n### Log File\r\n\r\n\r\n```\r\n03-23 15:30:46.768: A/DEBUG(3010): *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***\r\n03-23 15:30:46.768: A/DEBUG(3010): Build fingerprint: 'samsung/hero2ltexx/hero2lte:6.0.1/MMB29K/G935FXXU1APB6:user/release-keys'\r\n03-23 15:30:46.768: A/DEBUG(3010): Revision: '9'\r\n03-23 15:30:46.768: A/DEBUG(3010): ABI: 'arm'\r\n03-23 15:30:46.768: A/DEBUG(3010): pid: 18473, tid: 18553, name: Threadpool work  >>> com.dailybits.foodjournal <<<\r\n03-23 15:30:46.768: A/DEBUG(3010): signal 6 (SIGABRT), code -6 (SI_TKILL), fault addr --------\r\n03-23 15:30:46.768: D/VolumeInfo(5100): VolumeInfo from Parcel: id private ,type 1 ,disk null\r\n03-23 15:30:46.768: D/VolumeInfo(5100): VolumeInfo from Parcel: id emulated ,type 2 ,disk null\r\n03-23 15:30:46.768: D/VolumeInfo(5100): VolumeInfo from Parcel: id privatemode ,type 0 ,disk null\r\n03-23 15:30:46.768: V/MediaPlayerService(3017): Create new media retriever from pid 5100\r\n03-23 15:30:46.778: A/DEBUG(3010): Abort message: '* Assertion at /Users/builder/jenkins/workspace/xamarin-android-d15-6/xamarin-android/external/mono/mono/mini/mini-trampolines.c:1020, condition `plt_entry' not met\r\n03-23 15:30:46.778: A/DEBUG(3010): '\r\n03-23 15:30:46.778: A/DEBUG(3010):     r0 00000000  r1 00004879  r2 00000006  r3 d9afd978\r\n03-23 15:30:46.778: A/DEBUG(3010):     r4 d9afd980  r5 d9afd930  r6 00000000  r7 0000010c\r\n03-23 15:30:46.778: A/DEBUG(3010):     r8 d9afd320  r9 da929620  sl 00000084  fp d9afd1b8\r\n03-23 15:30:46.778: A/DEBUG(3010):     ip 00000006  sp d9afd168  lr f7132355  pc f7134744  cpsr 400e0010\r\n03-23 15:30:46.778: I/OggExtractor(3017): ~OggExtractor ++\r\n03-23 15:30:46.778: I/OggExtractor(3017): ~MyOggExtractor ++ \r\n03-23 15:30:46.778: I/OggExtractor(3017): ~MyOggExtractor --\r\n03-23 15:30:46.778: I/OggExtractor(3017): ~OggExtractor --\r\n03-23 15:30:46.778: W/CMHServiceInterface(5100): CMH Enabled?:true\r\n03-23 15:30:46.788: A/DEBUG(3010): backtrace:\r\n03-23 15:30:46.788: A/DEBUG(3010):     #00 pc 00042744  /system/lib/libc.so (tgkill+12)\r\n03-23 15:30:46.788: A/DEBUG(3010):     #01 pc 00040351  /system/lib/libc.so (pthread_kill+32)\r\n03-23 15:30:46.788: A/DEBUG(3010):     #02 pc 0001ca8b  /system/lib/libc.so (raise+10)\r\n03-23 15:30:46.788: A/DEBUG(3010):     #03 pc 00019d09  /system/lib/libc.so (__libc_android_abort+34)\r\n03-23 15:30:46.788: A/DEBUG(3010):     #04 pc 0001754c  /system/lib/libc.so (abort+4)\r\n03-23 15:30:46.788: A/DEBUG(3010):     #05 pc 002a3354  /data/app/com.dailybits.foodjournal-1/lib/arm/libmonosgen-2.0.so\r\n```\r\n\r\n\r\n[package config and logcat.zip](https://github.com/xamarin/xamarin-android/files/1861793/no-crash.package.config.zip)\r\n\r\n\r\nI'm not sure where I need to go to find relevant information for this crash - package information & logcat attached.\r\n\r\n\r\n\r\n"},{"Id":"7455933861","Type":"IssuesEvent","CreatedAt":"2018-03-29T20:09:17","Actor":"jgold6","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1493","RelatedDescription":"Opened issue \"\"make prepare\" failing on building xamarin-android from source.\" (#1493) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n(not reproducible in all environments, but I can reproduce on both of my Macs)\r\n\r\n1. Do a new checkout of xamarin-android d15-6 branch (issue affect master also, but output is different) \r\n2. Run **make prepare**\r\n\r\n### Expected Behavior\r\nmake prepare step will succeed\r\n\r\n### Actual Behavior\r\nmake prepare step fails with \r\n```\r\nbuild-tools/scripts/jdk.mk:130: *** missing separator.  Stop.\r\nmake: *** [prepare-external] Error 2\r\n```\r\n\r\n## Notes\r\n\r\nAfter much discussion and testing, it was determined that the command: \r\n```\r\n_DARWIN_JDK_FALLBACK_DIRS := $(wildcard /Library/Java/JavaVirtualMachines/jdk*)\r\n_DARWIN_JDK_ROOT := $(shell ls -dtr $(_DARWIN_JDK_FALLBACK_DIRS) | sort | tail -1)\r\n```\r\nin the jdk.mk file was causing some erroneous characters in the path that was later used in `JI_JVM_PATH`, which is evaluated on line 130 and caused the **make prepare** step to fail with the \"missing separator\" error. \r\n\r\nAfter `_DARWIN_JDK_ROOT` was assigned as above, outputting it with:\r\n```\r\necho _DARWIN_JDK_ROOT=$(_DARWIN_JDK_ROOT)\r\n```\r\n\r\nresulted in very odd output:\r\n```\r\necho _DARWIN_JDK_ROOT=/Library/Java/JavaVirtualMachines/jdk1.8.0_161.jdk\r\n_DARWIN_JDK_ROOT=/Library/Java/JavaVirtualMachines/jdk1.8.0_161.jdk\r\nkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkin/sh: 49m: command not found\r\nmake: *** [jonp] Error 127\r\n```\r\n\r\nThis strange output causes the jdk.mk file to stop on line 130 (using the d15-6 branch of xamarin-android) as the path was obviously not correct in the `JI_JVM_PATH` and apparently was deemed as \"missing a separator.\" \r\n\r\nThat strange output can be reproduced more simply with the following in a makefile: \r\n```\r\n_DARWIN_JDK_ROOT := $(shell ls -d /path/to/any/folder)\r\njonp:\r\n        echo _DARWIN_JDK_ROOT=$(_DARWIN_JDK_ROOT)\r\n```\r\n\r\nI have attached a zipped folder that should serve as a complete repro called testmakefile.zip\r\n[testmakefile.zip](https://github.com/xamarin/xamarin-android/files/1861712/testmakefile.zip)\r\n\r\nNeither Jon P nor Alex K were able to reproduce this issue on their systems.\r\n\r\nI found an SO post that seems to indicate that using `$(shell ls ... )` in a makefile is unreliable and should be avoided, so perhaps we need to modify jdk.mk to avoid using `$(shell ls ...)` and instead use `$(shell find ...)` or `$(wildcard ...)` both of which worked to resolve this issue in the jdk.mk file.\r\n\r\nSO post: https://stackoverflow.com/a/10024479/2913599\r\n\r\nRelevant paragraph: \r\n> Finally, as a general rule (not really applicable to this example): as esperanto notes in comments, using the output from ls is not completely reliable (some details depend on file names and sometimes even the version of ls; some versions of ls attempt to sanitize output in some cases). Thus, as l0b0 and idelic note, if you're using GNU make you can use $(wildcard) and $(subst ...) to accomplish everything inside make itself (avoiding any \"weird characters in file name\" issues). (In sh scripts, including the recipe portion of makefiles, another method is to use find ... -print0 | xargs -0 to avoid tripping over blanks, newlines, control characters, and so on.)\r\n\r\n### Version Information\r\nmacOS 10.13.3\r\n\r\n### Log File\r\n\r\n[XAd15-6MakePrepareOutput.txt](https://github.com/xamarin/xamarin-android/files/1861667/XAd15-6MakePrepareOutput.txt)"},{"Id":"7455354262","Type":"PullRequestEvent","CreatedAt":"2018-03-29T17:52:13","Actor":"luhenry","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1492","RelatedDescription":"Opened pull request \"[mono-sdks] Fix Linux build\" (#1492) at xamarin/xamarin-android","RelatedBody":""},{"Id":"7454775193","Type":"PullRequestEvent","CreatedAt":"2018-03-29T15:57:52","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1491","RelatedDescription":"Opened pull request \"[libzip-windows] Fix building with `msbuild`\" (#1491) at xamarin/xamarin-android","RelatedBody":"Whenever `external/mono` is bumped, the\r\n[`xamarin-android-msbuild` job breaks][0]:\r\n\r\n[0]: https://jenkins.mono-project.com/view/Xamarin.Android/job/xamarin-android-msbuild/838/\r\n\r\n\tBuilding target \"_Make\" completely.\r\n\t...\r\n\tTask \"Touch\" (TaskId:1642)\r\n\t  Task Parameter:\r\n\t    Files=\r\n\t      …/bin/Debug/lib/xamarin.android/xbuild/Xamarin/Android/x64/libzip.dll\r\n\t        CMake=/Users/builder/android-toolchain/mxe-b9cbb53/bin/x86_64-w64-mingw32.static-cmake\r\n\t        CMakeFlags=\r\n\t        CopyToOutputDirectory=Always\r\n\t        OutputLibrary=x64/libzip.dll\r\n\t        OutputLibraryPath=lib/libzip.dll\r\n\t      …/bin/Debug/lib/xamarin.android/xbuild/Xamarin/Android/libzip.dll\r\n\t        CMake=/Users/builder/android-toolchain/mxe-b9cbb53/bin/i686-w64-mingw32.static-cmake\r\n\t        CMakeFlags=\r\n\t        CopyToOutputDirectory=Always\r\n\t        OutputLibrary=libzip.dll\r\n\t        OutputLibraryPath=lib/libzip.dll (TaskId:1642)\r\n\t  Touching \"…/bin/Debug/lib/xamarin.android/xbuild/Xamarin/Android/x64/libzip.dll\". (TaskId:1642)\r\n\t…/build-tools/libzip/libzip.targets(52,5): error MSB3375: The file \"…/bin/Debug/lib/xamarin.android/xbuild/Xamarin/Android/libzip.dll\" does not exist. […/build-tools/libzip-windows/libzip-windows.csproj]\r\n\tDone executing task \"Touch\" -- FAILED. (TaskId:1642)\r\n\r\nThis is due to an \"`xbuild`-ism\" we were inadvertently using which\r\n`msbuild` doesn't like: when item metadata is used in\r\n`//Target/@Inputs`, [MSBuild Target Batching][1] is *not* used.\r\n\r\n[1]: https://msdn.microsoft.com/en-us/library/ms171473.aspx\r\n\r\nCase in point, the `_Make` target:\r\n\r\n\t<!-- BAD! -->\r\n\t<Target Name=\"_Make\"\r\n\t    Condition=\" '@(_LibZipTarget)' != '' \"\r\n\t    Inputs=\"$(IntermediateOutputPath)\\%(_LibZipTarget.Identity)\\Makefile\"\r\n\t    Outputs=\"@(Content)\">\r\n\r\nBecause this used \"inline\" item metadata, the target wasn't being\r\nbatched as intended (and as `xbuild` does). Consequently,\r\n`@(_LibZipTarget)` was only being built for mxe-Win64, *not*\r\nmxe-Win32, which is why the `<Touch/>` use within the `_Make` target\r\nfailed.\r\n\r\nThe fix? Don't Do That™. Instead, use a new `@(_LibZipTargetMakefile)`\r\nitem group for the `//Target/@Inputs`, which allows `msbuild` to\r\nproperly batch the `_Make` target contents:\r\n\r\n\t<ItemGroup>\r\n\t  <_LibZipTargetMakefile Include=\"$(IntermediateOutputPath)\\%(_LibZipTarget.Identity)\\Makefile\" />\r\n\t</ItemGroup>\r\n\t<Target Name=\"_Make\"\r\n\t    Condition=\" '@(_LibZipTarget)' != '' \"\r\n\t    Inputs=\"@(_LibZipTargetMakefile)\"\r\n\t    Outputs=\"@(Content)\">\r\n\r\nReview other files matching `git grep 'Inputs=.*%'` and fix them too."},{"Id":"7453708476","Type":"PullRequestEvent","CreatedAt":"2018-03-29T12:56:12","Actor":"dellis1972","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1490","RelatedDescription":"Opened pull request \"[Xamarin.Android.Build.Tasks]  error \"resource directory obj\\debug\\res does not exist\"\" (#1490) at xamarin/xamarin-android","RelatedBody":"Fixes https://devdiv.visualstudio.com/DevDiv/_workitems/edit/588716\r\n\r\nAlso relates to errors such as\r\n\r\n\t\"obj\\Debug-Automatic\\android\\bin\\packaged_resources\" does not exist.\r\n\terror \"resource directory obj\\debug\\res does not exist\"\r\n\r\nWe have a serious problem with our Async Task system. The fact that\r\nthe background thread is executing in a certain directory cannot be\r\nrelied upon. So we need to provide full paths to the various file\r\nitems we are using in `Aapt` as well as ensure that the Working\r\nDirectory is set for the tools we are launching on the background\r\nthreads.\r\n\r\nIn this PR we are adding a `WorkingDirectory` property to `AsyncTask`.\r\nThis will allow us to always know where the task was started. We\r\ncan then use this information to build a full path for those files\r\nwhich are not rooted.\r\n\r\nAlso on advice from the msbuild team the use of `Yield` and `Reaquire`\r\nhas been reworked. Rather than yielding the MSBuild Node just before\r\nwe enter the message loop, we should yield BEFORE we start the\r\nthreads. This should in theory help reduce the directory changes, but\r\nit did not eliminate them completely. We a result we had to also\r\nmake the changes regarding using full paths."},{"Id":"7452896508","Type":"PullRequestEvent","CreatedAt":"2018-03-29T09:56:03","Actor":"atsushieno","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1489","RelatedDescription":"Opened pull request \"R8 integration\" (#1489) at xamarin/xamarin-android","RelatedBody":"(testing CI builds; needs more work)"},{"Id":"7450939818","Type":"IssuesEvent","CreatedAt":"2018-03-28T23:52:28","Actor":"atsushieno","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1485","RelatedDescription":"Closed issue \"Contents of the attached PDF are not rendered using PdfRenderer in Android versions below 8.0\" (#1485) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Run the attached replication sample in Android versions 6 or 7. The sample uses Android.Graphics.PDF.PdfRenderer to convert the first page of the PDF to image and display it on an ImageView. \r\n\r\n2. Compare the rendering of the contents with the PDF as viewed in Adobe Reader or the same sample in Android 8.\r\n\r\n[SimplePdfRenderer1.zip](https://github.com/xamarin/xamarin-android/files/1855105/SimplePdfRenderer1.zip)\r\n\r\n### Expected Behavior\r\n\r\nThe contents of the first page fully rendered. Please refer the below image. \r\n\r\n<img width=\"720\" alt=\"expectedoutput\" src=\"https://user-images.githubusercontent.com/37859978/38019086-4c817692-3294-11e8-917f-dbf95a870895.png\">\r\n\r\n\r\n### Actual Behavior\r\n\r\nThe contents of the first page not fully rendered. Please refer the below image. \r\n\r\n<img width=\"540\" alt=\"actualoutput\" src=\"https://user-images.githubusercontent.com/37859978/38019114-5be70610-3294-11e8-954a-d7c400503f07.png\">\r\n\r\n\r\n### Version Information\r\n\r\n<!--\r\n1. On macOS and within Visual Studio, select Visual Studio > About Visual Studio, then click the Show Details button, then click the Copy Information button.\r\n\r\n2. Paste below this comment block.\r\n-->\r\n\r\nCorrect behavior: Android 8 \r\nIncorrect behavior: Android 6 and Android 7\r\nDevices tested in: Samsung Galaxy Tab A (Android 6), Moto G5S(Android 7) and Google Pixel XL(Android 8)\r\n\r\n### Log File\r\n\r\n<!--\r\n1. On macOS and within Visual Studio:\r\n    a. Click **Tools** > **SDK Command Prompt**.\r\n    b. Within the launched `Terminal.app` window, run:\r\n\r\n            adb logcat -d | pbcopy\r\n\r\n2. Paste below this comment block\r\n-->\r\n\r\n\r\n\r\n<!--\r\nSwitch to the \"Preview\" tab to ensure your issue renders correctly.\r\n\r\nPlease add an appropriate \"Area:\" label in the Labels section.\r\n-->"}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"7456514471","Type":"IssuesEvent","CreatedAt":"2018-03-29T22:06:16","Actor":"PureWeen","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/2203","RelatedDescription":"Closed issue \"NavigationPage default icon inconsistency between Android & iOS\" (#2203) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\n\r\nUsing a NavigationPage in an Android&iOS app which has a default icon for both platforms, and without calling `SetTitleIcon` method, makes the default app icon appear on Android, but not on iOS.\r\n\r\n### Steps to Reproduce\r\n1. Create a blank XamarinForms app, with Android & iOS projects.\r\n2. Set a default app icon on the Android project. (If you run the app on the emulator you now see the app icon in the background before being opened.)\r\n3. Set a default app icon on the iOS project. (If you run the app on the emulator you now see the app icon in the background before being opened.)\r\n4. Use a NavigationPage instead of a Page.\r\n5. Launch the app in the iOS emulator (result: the first root page of the app doesn't have any icon at the top of the root page). See screenshot #1.\r\n6. Launch the app in Android emulator.\r\n\r\n### Expected Behavior\r\nFor consistency, you should not see any icon at the top of the page, like in iOS. Because `SetTitleIcon` has not been called in this code.\r\n\r\n### Actual Behavior\r\nYou can see the app icon also at the top of the root page. See screenshot #2.\r\n\r\n### Basic Information\r\n\r\n- Version with issue: 3.0 preview\r\n- IDE: VS4Mac 7.4.1 (build 48)\r\n- Xamarin iOS&Android&Mac versions: the current ones in the stable channel.\r\n\r\n### Screenshots\r\n<img width=\"441\" alt=\"screen shot 2018-03-28 at 8 03 09 pm\" src=\"https://user-images.githubusercontent.com/331303/38047589-4c7d6e74-32c3-11e8-9d9d-1fbf136c6c2d.png\">\r\n\r\n<img width=\"398\" alt=\"screen shot 2018-03-28 at 8 03 59 pm\" src=\"https://user-images.githubusercontent.com/331303/38047577-4387f032-32c3-11e8-96af-7c6df930b150.png\">\r\n\r\n\r\n### Reproduction Link\r\n\r\nClone [this project](https://github.com/knocte/gwallet/tree/frontend) (and checkout commit dcc6c0c493abf0c7c5d83993fb0c9233dd19f046 ), and run the Droid and/or iOS app.\r\n"},{"Id":"7456434117","Type":"IssuesEvent","CreatedAt":"2018-03-29T21:51:24","Actor":"jsiemens","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/2212","RelatedDescription":"Opened issue \"UWP NativeForms - Can't add FrameworkElement to Frame\" (#2212) at xamarin/Xamarin.Forms","RelatedBody":"Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues\r\n\r\n### Description\r\n\r\nWhen I try to navigate to a Xamarin Forms page in a UWP frame, it does not work.\r\n\r\nI tried using Xamarin Forms 2.5.0.280555 initially. Also tried 2.5.1..392594-pre3 and 3.0.0.296286-pre2. None of them worked.\r\n\r\nExample:\r\n\r\n`                MainFrame.Navigate(new XamarinFormsPage());`\r\n\r\nIf I try creating a FrameworkElement and setting that as the content of a ContentControl, it also fails. \r\n\r\n`                Placeholder.Content = new XamarinFormsPage().CreateFrameworkElement();`\r\n\r\nIt appears to work if you navigate to Xamarin Forms page on the root frame of the Windows (as shown in Xamarin examples). It also seems to work if you set the Content property on your main page (as shown in docs). But it's not very useful to me if I can only use Xamarin Forms pages as full screen (in which case it's not much different than just using Xamarin Forms without Native Forms).\r\n\r\nThe MainPage.Xaml looks like this:\r\n```\r\n<forms:WindowsPage\r\n    x:Class=\"NativeFormsTest.UWP.MainPage\"\r\n    xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\r\n    xmlns:forms=\"using:Xamarin.Forms.Platform.UWP\"\r\n    xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\r\n    xmlns:local=\"using:NativeFormsTest.UWP\"\r\n    xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\r\n    xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\r\n    mc:Ignorable=\"d\"\r\n    Background=\"{ThemeResource ApplicationPageBackgroundThemeBrush}\">\r\n\r\n    <Page.BottomAppBar>\r\n        <CommandBar>\r\n            <AppBarButton x:Name=\"back\" HorizontalAlignment=\"Left\" Icon=\"Back\" Label=\"back\" VerticalAlignment=\"Top\" Click=\"Back_Click\"/>\r\n            <AppBarButton x:Name=\"next\" HorizontalAlignment=\"Left\" Icon=\"Forward\" Label=\"forward\" VerticalAlignment=\"Top\" Click=\"Next_Click\"/>\r\n        </CommandBar>\r\n    </Page.BottomAppBar>\r\n\r\n    <Grid Background=\"{ThemeResource ApplicationPageBackgroundThemeBrush}\">\r\n        <StackPanel Orientation=\"Vertical\">\r\n            <TextBlock Text=\"Header\"></TextBlock>\r\n            <Frame x:Name=\"MainFrame\">\r\n                <Frame.ContentTransitions>\r\n                    <TransitionCollection>\r\n                        <NavigationThemeTransition/>\r\n                    </TransitionCollection>\r\n                </Frame.ContentTransitions>\r\n            </Frame>\r\n            <ContentControl x:Name=\"Placeholder\"></ContentControl>\r\n            <TextBlock Text=\"Footer\"></TextBlock>\r\n        </StackPanel>\r\n    </Grid>\r\n</forms:WindowsPage>\r\n```\r\n\r\nMainPage.xaml.cs:\r\n```\r\n    public sealed partial class MainPage\r\n    {\r\n        public MainPage()\r\n        {\r\n            this.InitializeComponent();\r\n\r\n            MainFrame.Navigate(typeof(Frame1)); // This works\r\n            Placeholder.Content = new Frame1(); // This works too\r\n\r\n            //LoadApplication(new NativeFormsTest.App());\r\n        }\r\n\r\n        private void Back_Click(object sender, RoutedEventArgs e)\r\n        {\r\n            if (MainFrame.CanGoBack)\r\n            {\r\n                MainFrame.GoBack();\r\n            }\r\n        }\r\n\r\n        private void Next_Click(object sender, RoutedEventArgs e)\r\n        {\r\n            Type current = MainFrame.SourcePageType;\r\n\r\n            if (current.Name == \"Frame1\")\r\n            {\r\n                MainFrame.Navigate(typeof(Frame2)); // This works\r\n                Placeholder.Content = new Frame2(); // This works too\r\n            }\r\n\r\n            if (current.Name == \"Frame2\")\r\n            {\r\n                // *** This fails ***\r\n                MainFrame.Navigate(new XamarinFormsPage());\r\n\r\n                // *** This also fails ***\r\n                Placeholder.Content = new XamarinFormsPage().CreateFrameworkElement();\r\n            }\r\n        }\r\n    }\r\n```\r\nFrame1.xaml:\r\n```\r\n<Page\r\n    x:Class=\"NativeFormsTest.UWP.Frame1\"\r\n    xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\r\n    xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\r\n    xmlns:local=\"using:NativeFormsTest.UWP\"\r\n    xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\r\n    xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\r\n    mc:Ignorable=\"d\">\r\n\r\n    <Grid Background=\"{ThemeResource ApplicationPageBackgroundThemeBrush}\">\r\n        <TextBlock Text=\"Frame1\"></TextBlock>\r\n    </Grid>\r\n</Page>\r\n```\r\n\r\nFrame1.xaml.cs:\r\n\r\n\r\n```\r\nnamespace NativeFormsTest.UWP\r\n{\r\n    /// <summary>\r\n    /// An empty page that can be used on its own or navigated to within a Frame.\r\n    /// </summary>\r\n    public sealed partial class Frame1 : Page\r\n    {\r\n        public Frame1()\r\n        {\r\n            this.InitializeComponent();\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nFrame2.xaml:\r\n```\r\n<Page\r\n    x:Class=\"NativeFormsTest.UWP.Frame2\"\r\n    xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\r\n    xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\r\n    xmlns:local=\"using:NativeFormsTest.UWP\"\r\n    xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\r\n    xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\r\n    mc:Ignorable=\"d\">\r\n\r\n    <Grid Background=\"{ThemeResource ApplicationPageBackgroundThemeBrush}\">\r\n        <TextBlock Text=\"Frame 2\"></TextBlock>\r\n    </Grid>\r\n</Page>\r\n```\r\n\r\nFrame2.xaml.cs:\r\n```\r\nnamespace NativeFormsTest.UWP\r\n{\r\n    /// <summary>\r\n    /// An empty page that can be used on its own or navigated to within a Frame.\r\n    /// </summary>\r\n    public sealed partial class Frame2 : Page\r\n    {\r\n        public Frame2()\r\n        {\r\n            this.InitializeComponent();\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n### Steps to Reproduce\r\n\r\nI have attached a sample app that demonstrates the problem. The app attempts to load 3 frames. The first two are using standard UWP, and the third frame is trying to load a Xamarin Forms page. The first 2 work, the third one doesn't.\r\n\r\n1. Load the attached solution.\r\n2. Run the application.\r\n3. Press the forward arrow button to go to \"Frame 2\". Press it again to attempt to go to the 3rd frame which is the Xamarin Forms page. \r\n\r\n### Expected Behavior\r\n\r\nThird frame loads.\r\n\r\n### Actual Behavior\r\n\r\nThird frame doesn't load.\r\n\r\n### Basic Information\r\n\r\n- Version with issue: Xamarin Forms 2.5.0.280555\r\n- Last known good version: None, to my knowledge.\r\n- IDE: VS 2017 15.6\r\n- Platform Target Frameworks: \r\n  - UWP:  16299 \r\n- Nuget Packages: None, other than default.\r\n- Affected Devices: Windows 10 Fall Creators Update\r\n\r\n### Reproduction Link\r\n\r\n[NativeFormsTest.zip](https://github.com/xamarin/Xamarin.Forms/files/1862030/NativeFormsTest.zip)\r\n"},{"Id":"7455407117","Type":"PullRequestEvent","CreatedAt":"2018-03-29T18:05:10","Actor":"jsuarezruiz","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/2211","RelatedDescription":"Opened pull request \"[WPF] Entry Placeholder property\" (#2211) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nChanges in **FormsTextBox** from WPF backend to allow using **Placeholder** and **PlaceholderColor**.\r\n\r\n![entry-placeholder-wpf](https://user-images.githubusercontent.com/6755973/38104817-b4c54890-338a-11e8-86c7-4f9a3f4695df.gif)\r\n\r\n### Bugs Fixed ###\r\n\r\n- [[WPF] Placeholder property doesn't work](https://github.com/xamarin/Xamarin.Forms/issues/2189)\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has tests (if omitted, state reason in description)\r\n- [ ] Rebased on top of master at time of PR\r\n- [ ] Changes adhere to coding standard\r\n- [ ] Consolidate commits as makes sense\r\n"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"7456918252","Type":"IssuesEvent","CreatedAt":"2018-03-30T00:29:48","Actor":"wjk","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/3836","RelatedDescription":"Opened issue \"Question: License of Jenkins artifacts\" (#3836) at xamarin/xamarin-macios","RelatedBody":"Following the technique outlined in https://github.com/xamarin/xamarin-android/issues/1484#issuecomment-377393450, I tried digging through the Jenkins build history for xamarin-macios. I found the following link:\r\n\r\n<https://bosstoragemirror.azureedge.net/wrench/macios-mac-master/b8/b8287d0b33e6fbef0bc18967b9b6284cfa6e8c12/xamarin.mac-4.5.0.102.pkg>\r\n\r\nThis file points to an installer containing the prebuilt Xamarin.Mac framework, which is really all I need. (See #3820 for why I can't just build from a source snapshot.) However, the license included in the installer file is the standard VSMac EULA, not the MIT license like the source code. I am trying to write an IDE similar to VSMac, except that it uses a native Cocoa UI instead of GTK#. (This is a long-standing pet peeve of mine with regards to VSMac.) I need a copy of the Xamarin.Mac and Xamarin.iOS frameworks I can either redistribute with my installer, or download from the Jenkins URLs at runtime, but I am uncertain if the EULA allows for this.\r\n\r\nIt seems kind of strange that the binaries built by this MIT-licensed repository are not licensed similarly (modulo any proprietary parts such as `mlaunch`, of course; while I can delete those if I need to, they do not appear to be contained in this installer). Could someone please clarify this? Of course, it would be better if the EULA on these packages be changed to the MIT license, but I don't know how easy/possible this is. Thanks so much!"},{"Id":"7456840826","Type":"PullRequestEvent","CreatedAt":"2018-03-29T23:57:37","Actor":"VincentDondain","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3835","RelatedDescription":"Opened pull request \"Merge xcode 9.3 into d15-7\" (#3835) at xamarin/xamarin-macios","RelatedBody":""},{"Id":"7456382962","Type":"PullRequestEvent","CreatedAt":"2018-03-29T21:42:28","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3834","RelatedDescription":"Opened pull request \"[mtouch] Use full path to mono-symbolicate instead of UseShellExecute (#3825)\" (#3834) at xamarin/xamarin-macios","RelatedBody":"Fix https://github.com/xamarin/xamarin-macios/issues/3653 differently as\n`UseShellExecute` cannot be used when redirecting output so the original\nfix [1] caused an exception which affected it from both macOS and windows\n(thru XMA) instead of being an issue only with the later.\n\nIt's not clear how the original [1] fix was validated successfully, it's\npossible than an older version of mono did not throw (since that\nlimitation seems windows specific).\n\n[1] https://github.com/xamarin/xamarin-macios/pull/3781"},{"Id":"7455434108","Type":"PullRequestEvent","CreatedAt":"2018-03-29T18:10:10","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3833","RelatedDescription":"Opened pull request \"Bump Xcode 9.3 to the final/released version\" (#3833) at xamarin/xamarin-macios","RelatedBody":null}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"979078173127331841","CreatedAt":"2018-03-28T19:30:01+00:00","UserScreenname":"xamarinhq","Text":"Learn how to build #XamariniOS from the source code in the second part of our four-part series on debugging… https://t.co/2os3iP5NYD","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":64,"FavoriteCount":23,"RawContent":null},{"Id":"979020041961328647","CreatedAt":"2018-03-28T15:39:01+00:00","UserScreenname":"xamarinhq","Text":"Add @TizenProject to your #XamarinForms apps: https://t.co/pom9Nki4vo https://t.co/ytWxQJabcG","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":19,"FavoriteCount":10,"RawContent":null},{"Id":"978661722415337472","CreatedAt":"2018-03-27T15:55:11+00:00","UserScreenname":"xamarinhq","Text":"Learn how to create simple Xamarin.iOS apps with #CoreML and Microsoft #Azure: https://t.co/poP0TGynlP https://t.co/VUSk4VabEQ","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":43,"FavoriteCount":17,"RawContent":null},{"Id":"978342321241710592","CreatedAt":"2018-03-26T18:46:00+00:00","UserScreenname":"xamarinhq","Text":"We’ve updated the #XamarinForms project templates in #VS2017 to include #dotNET Standard support and customization… https://t.co/kUritX48ob","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":80,"FavoriteCount":42,"RawContent":null},{"Id":"978300318671917056","CreatedAt":"2018-03-26T15:59:06+00:00","UserScreenname":"xamarinhq","Text":"Extending #XamarinForms controls functionality with Behaviors: https://t.co/8arBeS4lBP https://t.co/XR9lZrk3w5","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":27,"FavoriteCount":9,"RawContent":null},{"Id":"978013910426095616","CreatedAt":"2018-03-25T21:01:01+00:00","UserScreenname":"xamarinhq","Text":"Check out the what, why, and how of Mobile #DevOps with #VSAppCenter in this special guest series from @gshackles:… https://t.co/dfcNpP11MG","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":51,"FavoriteCount":26,"RawContent":null},{"Id":"977681217578561536","CreatedAt":"2018-03-24T22:59:01+00:00","UserScreenname":"xamarinhq","Text":"Running #Xamarin.iOS unit tests in #VSTS: https://t.co/20PDCJZkbJ https://t.co/MDSraESKAq","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":62,"FavoriteCount":19,"RawContent":null},{"Id":"977215672307650561","CreatedAt":"2018-03-23T16:09:06+00:00","UserScreenname":"xamarinhq","Text":"Adding geospatial calculations to your #Xamarin apps with #Azure #CosmosDB: https://t.co/acrN8gdJdS https://t.co/N0vbBblqBW","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":41,"FavoriteCount":20,"RawContent":null},{"Id":"977200551246131200","CreatedAt":"2018-03-23T15:09:01+00:00","UserScreenname":"xamarinhq","Text":"Just push play—using Google Play on an Android Emulator: https://t.co/wl37sjNIjv https://t.co/int1dSs7We","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":31,"FavoriteCount":11,"RawContent":null},{"Id":"976840931130400768","CreatedAt":"2018-03-22T15:20:01+00:00","UserScreenname":"xamarinhq","Text":"Add a search bar to your iOS 11 #Xamarin apps: https://t.co/T9OdiJFhmH https://t.co/eRGOmvMMmR","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":34,"FavoriteCount":8,"RawContent":null},{"Id":"976537324434706432","CreatedAt":"2018-03-21T19:13:35+00:00","UserScreenname":"xamarinhq","Text":"In the first of our four-part series on debugging #Xamarin open source frameworks, learn how to build #XamarinForms… https://t.co/OLQs53P4vY","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":71,"FavoriteCount":34,"RawContent":null},{"Id":"976489364602617859","CreatedAt":"2018-03-21T16:03:01+00:00","UserScreenname":"xamarinhq","Text":"Extend your #Xamarin app's reach by adding language support with the Multilingual App Toolkit:… https://t.co/lu400TXBl2","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":51,"FavoriteCount":14,"RawContent":null},{"Id":"976110617575780353","CreatedAt":"2018-03-20T14:58:01+00:00","UserScreenname":"xamarinhq","Text":"Sketch out your next great app idea with Ink to Code, and see your ideas immediately converted into recognized comp… https://t.co/FllQaROslT","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":100,"FavoriteCount":45,"RawContent":null},{"Id":"975795670622892032","CreatedAt":"2018-03-19T18:06:31+00:00","UserScreenname":"xamarinhq","Text":"Learn how to create cloud-connected mobile apps with #Xamarin and Microsoft #Azure: https://t.co/NK0m1MG9yM","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":44,"FavoriteCount":14,"RawContent":null},{"Id":"975467903750426626","CreatedAt":"2018-03-18T20:24:06+00:00","UserScreenname":"xamarinhq","Text":"Check out Android Emulator version 27.0.2, now featuring \"Quick Boot\" to launch the emulator in just a few seconds:… https://t.co/oyG6oJ6UN2","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":217,"FavoriteCount":90,"RawContent":null},{"Id":"975154821358608384","CreatedAt":"2018-03-17T23:40:01+00:00","UserScreenname":"xamarinhq","Text":"Learn how to deliver rich media experiences with the #XamarinForms Video Player: https://t.co/ndy3yvDDNk https://t.co/jHWAbLK0zw","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":78,"FavoriteCount":25,"RawContent":null},{"Id":"974742352538558464","CreatedAt":"2018-03-16T20:21:01+00:00","UserScreenname":"xamarinhq","Text":"Add cloud storage to your #Xamarin apps with #Azure Blob Storage: https://t.co/g1O7qUdDb7 https://t.co/KYZ5XlPeGr","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":44,"FavoriteCount":20,"RawContent":null},{"Id":"974673649277001729","CreatedAt":"2018-03-16T15:48:01+00:00","UserScreenname":"xamarinhq","Text":"Add sound to your #XamarinForms app with the open-source SimpleAudioPlayer #NuGet plugin: https://t.co/r8NSFRpl33 https://t.co/dtAlgRSysQ","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":63,"FavoriteCount":17,"RawContent":null},{"Id":"974310000062533632","CreatedAt":"2018-03-15T15:43:00+00:00","UserScreenname":"xamarinhq","Text":"Learn how to make your #XamarinForms apps adaptive based on screen size, device type, and orientation: https://t.co/XZYix2Cv0j","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":56,"FavoriteCount":14,"RawContent":null}]}},"RunOn":"2018-03-30T05:30:39.5010205Z","RunDurationInMilliseconds":4191}