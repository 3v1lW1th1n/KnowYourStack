{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing the .NET Framework 4.7.1","PublishedOn":"2017-10-17T21:26:30+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"Today, we are announcing the release of the .NET Framework 4.7.1. It’s included in the Windows 10 Fall Creators Update. .NET Framework 4.7.1 is also available on Windows 7+ and Windows Server 2008 R2+.  We’ve added support for targeting the .NET Framework 4.7.1 in Visual Studio 2017 15.5. The .NET Framework 4.7.1 includes improvements in several areas: Accessibility improvements... <a aria-label=\"read more about Announcing the .NET Framework 4.7.1\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/17/announcing-the-net-framework-4-7-1/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/17/announcing-the-net-framework-4-7-1/","RawContent":null},{"Title":".NET Framework October 2017 Preview of Quality Rollup","PublishedOn":"2017-10-17T20:56:56+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are releasing the October 2017 Preview of Quality Rollup. This type of rollup is intended for businesses that want to the preview or use quality improvements as soon as they are available. Quality and Reliability This release contains the following quality and reliability improvements. CLR Code optimization bug for x64 C# code targeting... <a aria-label=\"read more about .NET Framework October 2017 Preview of Quality Rollup\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/17/net-framework-october-2017-preview-of-quality-rollup/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/17/net-framework-october-2017-preview-of-quality-rollup/","RawContent":null},{"Title":"RyuJIT Just-in-Time Compiler Optimization Enhancements","PublishedOn":"2017-10-17T05:16:50+00:00","CommentsCount":9,"FacebookCount":0,"Summary":"I&#8217;d like to tell you about some of the recent changes we&#8217;ve made as part of our ongoing work to extend the optimization capabilities of RyuJIT, the MSIL-to-native code generator used by .NET Core and .NET Framework. I hope it will make for an interesting read, and offer some insight into the sorts of optimization opportunities we have... <a aria-label=\"read more about RyuJIT Just-in-Time Compiler Optimization Enhancements\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/16/ryujit-just-in-time-compiler-optimization-enhancements/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/16/ryujit-just-in-time-compiler-optimization-enhancements/","RawContent":null},{"Title":".NET Framework October 2017 Security and Quality Rollup","PublishedOn":"2017-10-11T06:02:21+00:00","CommentsCount":16,"FacebookCount":0,"Summary":"Today, we are releasing the October 2017 Security and Quality Rollup. The update applies to all supported Windows versions. It includes a known issue for Windows 10 1507 (see below). Security This release contains no new security updates. Quality and Reliability This release contains the following quality and reliability improvements. WPF WPF fails to load... <a aria-label=\"read more about .NET Framework October 2017 Security and Quality Rollup\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/10/net-framework-october-2017-security-and-quality-rollup/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/10/net-framework-october-2017-security-and-quality-rollup/","RawContent":null},{"Title":"Announcing UWP Support for .NET Standard 2.0","PublishedOn":"2017-10-10T22:57:46+00:00","CommentsCount":96,"FacebookCount":0,"Summary":"This post was mostly written by Rich Lander with contributions from Immo Landwerth. Today, we are releasing huge updates to UWP for .NET developers. The really big improvement is adding support for .NET Standard 2.0. UWP developers now have access to ~ 20k more APIs. This release brings UWP to partity with the other .NET implementations... <a aria-label=\"read more about Announcing UWP Support for .NET Standard 2.0\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/10/10/announcing-uwp-support-for-net-standard-2-0/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/10/10/announcing-uwp-support-for-net-standard-2-0/","RawContent":null},{"Title":".NET Framework 4.7.1 Runtime and Compiler Features","PublishedOn":"2017-09-28T23:56:59+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"This post describes the new Runtime, Compiler and Base Class Library (BCL) improvements in the .NET Framework 4.7.1. You can try out these features by downloading the Developer Pack, described in the Welcome to the .NET Framework 4.7.1 Early Access blog post.  BCL &#8211; .NET Standard 2.0 Support .NET Framework 4.7.1 has built-in support for .NET Standard 2.0. .NET Framework 4.7.1... <a aria-label=\"read more about .NET Framework 4.7.1 Runtime and Compiler Features\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/28/net-framework-4-7-1-runtime-and-compiler-features/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/28/net-framework-4-7-1-runtime-and-compiler-features/","RawContent":null},{"Title":"Build a web service with F# and .NET Core 2.0","PublishedOn":"2017-09-26T16:39:23+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"Earlier this year, I wrote about an update to the roadmap for F# and .NET Core. I had mentioned that there were a number of things you could build with F# and .NET Core today, such as web services. In this post, I&#8217;ll walk through building a web service with F# and .NET Core 2.0... <a aria-label=\"read more about Build a web service with F# and .NET Core 2.0\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/26/build-a-web-service-with-f-and-net-core-2-0/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/26/build-a-web-service-with-f-and-net-core-2-0/","RawContent":null},{"Title":".NET Framework September 2017 Preview of Quality Rollup","PublishedOn":"2017-09-25T19:57:18+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are releasing the September 2017 Preview of Quality Rollup. This type of rollup is intended for businesses that want to the preview or use quality improvements as soon as they are available. This update applies to Windows 10 Update 1607 (Anniversary Update) and to Windows Server 2016. FYI: The KBs for Windows Server 2016... <a aria-label=\"read more about .NET Framework September 2017 Preview of Quality Rollup\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/25/net-framework-september-2017-preview-of-quality-rollup/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/25/net-framework-september-2017-preview-of-quality-rollup/","RawContent":null},{"Title":".NET Core September 2017 Update — macOS High Sierra Support","PublishedOn":"2017-09-22T22:29:09+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"We released .NET Core updates for macOS High Sierra Support and additional quality fixes. You can download and install the update for Windows, macOS and Linux. This update is for .NET Core 1.0 and 1.1. The initial .NET Core 2.0 release includes similar improvements, so is not being updated with this release. Downloads .NET Core 1.0.7 .NET... <a aria-label=\"read more about .NET Core September 2017 Update &#8212; macOS High Sierra Support\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/22/net-core-september-2017-update-macos-high-sierra-support/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/22/net-core-september-2017-update-macos-high-sierra-support/","RawContent":null},{"Title":".NET Framework 4.7.1 Accessibility and WPF Improvements","PublishedOn":"2017-09-21T22:00:20+00:00","CommentsCount":19,"FacebookCount":0,"Summary":"This post describes the new WPF and accessibility features and improvements in .NET Framework 4.7.1. You can try out these features by downloading the Developer Pack, described in the Welcome to the .NET Framework 4.7.1 Early Access blog post. Accessibility improvements .NET Framework 4.7.1 brings in a lot of accessibility improvements across different libraries to align with the... <a aria-label=\"read more about .NET Framework 4.7.1 Accessibility and WPF Improvements\" href=\"https://blogs.msdn.microsoft.com/dotnet/2017/09/21/net-framework-4-7-1-accessibility-and-wpf-improvements/\" class=\"read-more\">Read more</a>","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/09/21/net-framework-4-7-1-accessibility-and-wpf-improvements/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"6650451504","Type":"IssuesEvent","CreatedAt":"2017-09-28T16:22:10","Actor":"hughbe","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/87","RelatedDescription":"Opened issue \"PRs to repos outside of dotnet/* pattern should not always thank for signing the CLA\" (#87) at dotnet/home","RelatedBody":"For example: https://github.com/mono/libgdiplus/pull/109\r\n\r\nI have already signed the CLI. On the dotnet/corefx etc. projects, I don't get the extra message:\r\n\r\n```\r\n@hughbe,\r\nThanks for having already signed the Contribution License Agreement. Your agreement was validated by .NET Foundation. We will now review your pull request.\r\nThanks,\r\n.NET Foundation Pull Request Bot\r\n```\r\n\r\nJust a small gripe, as I get an email each time I do this. I've seen this in Mono and Xunit.\r\n\r\n/cc @karelz I know this is unrelated to corefx but maybe you know the right person/repo to route this to :D\r\n"},{"Id":"6515896963","Type":"PullRequestEvent","CreatedAt":"2017-08-26T22:20:18","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/85","RelatedDescription":"Merged pull request \"Create telerik-ui-for-uwp.md\" (#85) at dotnet/home","RelatedBody":"Submission of Telerik UI for UWP"},{"Id":"6515896506","Type":"PullRequestEvent","CreatedAt":"2017-08-26T22:19:49","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/86","RelatedDescription":"Merged pull request \"Corrected list of maintainers\" (#86) at dotnet/home","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"6729762964","Type":"IssuesEvent","CreatedAt":"2017-10-17T21:21:15","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/34","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2017-8585 : Malformed Culture can cause application crash\" (#34) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2017-8585 \r\n## Malformed Culture can cause application to crash\r\n### Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 1.1. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability in the public version of .NET Core where a malformed string request could cause an application to crash and lead to a denial of service.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.7 and 1.1.4. Developers are advised to update their .NET Core SDK to version 1.1.4.\r\n\r\n### Discussion\r\n\r\nUse https://github.com/dotnet/corefx/issues/24703 for discussion of this advisory.\r\n\r\n### Mitigation Factors\r\n\r\n.NET Core 2.0 is not affected by this issue.\r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\n\r\nAny application running against .NET Core 1.0.6 or lower versions, or 1.1.2 or lower versions is affected. The latest version of the .NET core runtime you have installed in your computer can be listed by running `dotnet --info`. Running that command produces an output similar to the following:\r\n\r\n```\r\n.NET Command Line Tools (2.0.2)\r\n\r\nProduct Information:\r\n Version:            2.0.2\r\n Commit SHA-1 hash:  a04b4bf512\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.2\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n```\r\n\r\nAs this command only displays the latest version of the runtime installed (or the version set in the *global.json* file), it may hide the fact that you have a vulnerable runtime. A complete list of runtimes can be discovered by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location          |\r\n|------------------|-------------------|\r\n| Windows          | C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\ |\r\n| macOS            | /usr/local/share/dotnet/shared/Microsoft.NETCore.App/ |\r\n| [Supported Linux platforms](https://docs.microsoft.com/dotnet/core/linux-prerequisites#supported-linux-versions) | /usr/share/dotnet/shared/Microsoft.NETCore.App/ |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.7 and 1.1.4, then any applications targeting 1.0 or 1.1 of .NET Core are vulnerable.\r\n\r\nAlso, even if you have a directory for 1.0.7 and 1.1.4 present in your system, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting the impacted versions, these applications are also vulnerable.\r\n\r\n#### How do I fix my affected application?\r\nApplications can be fixed by installing the latest .NET Core runtimes or SDKs. Typically, application servers only have runtime packages installed and developer machines have the SDKs installed. Installers for the runtimes can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). .NET Core 1.1.4 SDK installs both versions 1.0.7 and 1.1.4 of the .NET Core runtime.\r\n\r\nIf you've built a [self-contained application](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd), you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n#### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the [*application.runtime.config*](https://github.com/dotnet/cli/blob/ede74b6be1406ba0c086b6d5fc1a5d4eacff1f01/Documentation/specs/runtime-configuration-file.md#appnameruntimeconfigjson) file for that application. Set the framework version to the desired version and the `rollForward` property to `false`. These settings should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nSince the *application.runtime.config* file is an optional file, you may need to create one for each application and add it alongside the executable."},{"Id":"6725652001","Type":"IssuesEvent","CreatedAt":"2017-10-17T06:48:14","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/33","RelatedDescription":"Opened issue \".NET Framework Docker Performance Issue Resolved\" (#33) at dotnet/announcements","RelatedBody":"# .NET Framework Docker Performance Issue Resolved\r\n\r\nMultiple people have [reported](https://github.com/Microsoft/dotnet-framework-docker/issues/25) that [.NET Framework performance in Docker images is poor](https://github.com/moby/moby/issues/33096). In the cases reported, performance was an order of magnitude slower than expected.\r\n\r\nThis issue has now been resolved for [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) images. It was due to incorrectly generated NGEN images. They are now correctly generated and expected performance has been restored.\r\n\r\n## Discussion \r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-framework-docker #29](https://github.com/Microsoft/dotnet-framework-docker/pull/29)\r\n\r\n## Details\r\n\r\n* [dotnet-framework-docker #27](https://github.com/Microsoft/dotnet-framework-docker/pull/27)\r\n\r\nThe .NET Framework uses [NGEN](https://docs.microsoft.com/dotnet/framework/tools/ngen-exe-native-image-generator) as a primary mechanism for startup performance. .NET Framework assemblies are compiled to native code with the NGEN tool as part of the .NET Framework setup process. The benefit of these files is that they can be loaded and executed without any additional significant extra work required by the Common Language Runtime (CLR). The lack of  additional work means that performance is very good.\r\n\r\nNGEN image generation interacts with a Windows subsystem that is not correctly supported in Windows containers. NGEN images are generated in Windows containers, but they are not valid. Fortunately, the CLR can still run in the presence of invalid images, but code execution is much slower.\r\n\r\nWe are in the process of fixing Windows containers so that NGEN will work correctly. In the interim, we have updated the [dotnet-framework/](https://hub.docker.com/r/microsoft/dotnet-framework/) images to correctly generate NGEN images. The [microsoft/windowsservercore/](https://hub.docker.com/r/microsoft/windowsservercore/) images still have the performance problem that was initially reported. We are working on updating Windows containers so that NGEN works as expected. You are recommended to use the [dotnet-framework/](https://hub.docker.com/r/microsoft/dotnet-framework/) base image if you can, so that you can get better performance.\r\n\r\nOne of the developers that reported the performance issue shared basic performance results. The first two rows are the before state. The last row is the dotnet-framework image after the fix. The improvement is quite significant.\r\n\r\n> Runing `powershell -command (measure-command { powershell -command exit }).TotalSeconds` in various images on our CI server produced this table of timings:\r\n \r\n| time (s) | image |\r\n|----------|--------|\r\n|10.7212372| microsoft/windowsservercore |\r\n|8.3278793  | microsoft/dotnet-framework:4.7|\r\n|0.6426073  | microsoft/dotnet-framework:4.7 (after fix)|\r\n"},{"Id":"6645912196","Type":"IssuesEvent","CreatedAt":"2017-09-27T19:47:08","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/32","RelatedDescription":"Opened issue \".NET Framework 4.7.1 provides built-in support for .NET Standard 2.0\" (#32) at dotnet/announcements","RelatedBody":"## Summary\r\n\r\n.NET Framework 4.7.1 will have built-in support for .NET Standard 2.0. This means that you don't have to deploy any additional files or use binding redirects to use .NET Standard 2.0 libraries.\r\n\r\nFor a demo, check out [this video][video].\r\n\r\n## Details\r\n\r\nWhile libraries targeting [.NET Standard 2.0][ns20post] are can be consumed by applications and libraries [targeting .NET Framework 4.6.1][nstable] and higher, not all files that are required for .NET Standard libraries were part of .NET Framework 4.6.1. In fact, .NET Framework 4.6.1 was shipped before .NET Standard 2.0 was even designed. That's why building an application targeting .NET Framework 4.6.1 (as well as 4.6.2 and 4.7) will have to deploy additional files.\r\n\r\n* If you use **Visual Studio 2017 15.3** or higher, these files are automatically copied to the application's output folder.\r\n\r\n* If you use **Visual Studio 2015 and [use NuGet 3.6][nuget36]**, we'll prompt you to install a [support package][vs2015support] which will handle copying the files to the output directory.\r\n\r\nStarting with .NET Framework 4.7.1 these files no longer have to be deployed with the application -- they are built right into the .NET Framework itself.\r\n\r\n.NET Framework 4.7.1 also adds[about 200 missing APIs][missingapis] that were part of .NET Standard 2.0 but not actually implemented by .NET Framework 4.6.1, 4.6.2 or 4.7.\r\n\r\nThis also removes the need for [binding redirects][netfx-issues] when using .NET Standard libraries on .NET Framework because the CLR automatically unifies version numbers of assemblies that are part of the platform.\r\n\r\nLearn more [by reading the .NET Standard FAQ](http://aka.ms/netstandardfaq).\r\n\r\n## Discussion\r\n\r\nDiscussion\r\n\r\nFor a discussion, please go to dotnet/standard#514.\r\n\r\n[ns20post]: https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-standard-2-0/\r\n[nstable]: https://docs.microsoft.com/en-us/dotnet/standard/net-standard\r\n[nuget36]: https://dist.nuget.org/visualstudio-2015-vsix/v3.6.0/NuGet.Tools.vsix\r\n[vs2015support]: https://aka.ms/netstandard-build-support-netfx\r\n[missingapis]: https://github.com/dotnet/standard/blob/master/netstandard/src/ApiCompatBaseline.net461.txt\r\n[netfx-issues]: https://github.com/dotnet/standard/issues/481\r\n[video]: https://www.youtube.com/watch?v=u67Eu_IgEMs\r\n\r\nhttps://github.com/dotnet/standard/issues/514"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"6736562566","Type":"PullRequestEvent","CreatedAt":"2017-10-19T05:03:28","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14584","RelatedDescription":"Merged pull request \"Use ascii * instead of Chinese * character.\" (#14584) at dotnet/coreclr","RelatedBody":"Currently we have Chinese `*` characters at `src\\classlibnative\\bcltype\\number.cpp` L289-294. That would cause a `C4819: Non-ASCII character in source` warning when building on Windows via Visual Studio (version: 15.4.0 (msvc 19.11.25547)).\r\n\r\nThis PR replaces the Chinese * characters with ascii *.\r\n\r\nFix #14556"},{"Id":"6736562562","Type":"IssuesEvent","CreatedAt":"2017-10-19T05:03:28","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/14556","RelatedDescription":"Closed issue \"[Win][Build]C4819: Non-ASCII character in source\" (#14556) at dotnet/coreclr","RelatedBody":"Position: `src\\classlibnative\\bcltype\\number.cpp` L289-294\r\nCharacter: `∗`\r\nWindows Version: 16299.19\r\nCode Page: 936(Simplified Chinese)\r\nVisual Studio Version: 15.4.0 (msvc 19.11.25547)\r\n\r\nThe characters are in comment, so can be safely removed anyway.\r\nQuite strange about this issue, because the same issue was reported and fixed 2 years ago, and no longer reported. Doubting about VS2017/vc141.\r\n\r\n_a better solution could be making msvc work with UTF8 without BOM_"},{"Id":"6736469946","Type":"PullRequestEvent","CreatedAt":"2017-10-19T04:17:45","Actor":"CarolEidt","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14534","RelatedDescription":"Merged pull request \"Refactor register selection heuristics\" (#14534) at dotnet/coreclr","RelatedBody":"This is in preparation for tuning these for both throughput and code quality."},{"Id":"6736457764","Type":"IssuesEvent","CreatedAt":"2017-10-19T04:11:41","Actor":"CarolEidt","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/14200","RelatedDescription":"Closed issue \"[RyuJIT/arm32][JitStressRegs=4] Assertion failed 'isDoubleReg(reg1)'\" (#14200) at dotnet/coreclr","RelatedBody":"Seen in a Windows x86_arm_altjit test run with `COMPlus_JitStressRegs=4`.\r\n\r\nTests:\r\n```\r\nJIT\\Regression\\JitBlue\\GitHub_13056\\GitHub_13056\\GitHub_13056.cmd\r\nJIT\\Performance\\CodeQuality\\BenchmarksGame\\n-body\\n-body-3\\n-body-3.cmd\r\n```\r\n\r\nExample:\r\n```\r\nRunning: E:\\gh\\coreclr2\\bin\\tests\\Windows_NT.x86.Release\\JIT\\Regression\\JitBlue\\GitHub_13056\\GitHub_13056\\GitHub_13056.cmd -coreroot E:\\gh\\coreclr2\\bin\\tests\\Windows_NT.x86.Checked\\Tests\\Core_Root\r\nBEGIN EXECUTION\r\n \"E:\\gh\\coreclr2\\bin\\tests\\Windows_NT.x86.Checked\\Tests\\Core_Root\\corerun.exe\" GitHub_13056.exe\r\n\r\nAssert failure(PID 20804 [0x00005144], Thread: 11832 [0x2e38]): Assertion failed 'isDoubleReg(reg1)' in 'Regression13056:Clamp(double,double,double):double' (IL size 25)\r\n\r\n    File: e:\\gh\\coreclr2\\src\\jit\\emitarm.cpp Line: 2096\r\n    Image: E:\\gh\\coreclr2\\bin\\tests\\Windows_NT.x86.Checked\\Tests\\Core_Root\\CoreRun.exe\r\n\r\nExpected: 100\r\nActual: 123456789\r\nEND EXECUTION - FAILED\r\nFAILED\r\n```\r\n"},{"Id":"6736415026","Type":"PullRequestEvent","CreatedAt":"2017-10-19T03:51:32","Actor":"kouvel","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14505","RelatedDescription":"Merged pull request \"Fix hill climbing float overflow\" (#14505) at dotnet/coreclr","RelatedBody":"- When hill climbing finds that it wants to decrease the thread count but can't because the thread count is already the minimum, it instead tries to increase the sampling interval by a factor of up to 10 depending on how much it wanted to decrease the thread count\r\n- The ratio was being used incorrectly (used max instead of min), and sometimes the ratio can be so large that the conversion to int after the float math overflows\r\n- If something in the process enabled floating point exceptions, it may also crash\r\n  - There doesn't appear to be a clean way to disable hill climbing, added a config variable that disables it in case a workaround is necessary for some other reason in the future\r\n- Fixed to avoid overflow in the math to what was probably intended\r\n- There may be another bug in GetWaveComponent() that causes values of such high magnitude to be generated, I'll leave that investigation for when that in particular becomes a real issue"},{"Id":"6736411762","Type":"PullRequestEvent","CreatedAt":"2017-10-19T03:49:58","Actor":"CarolEidt","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/14573","RelatedDescription":"Merged pull request \"Fix multiple issues in LSRA for TYP_DOUBLE:\" (#14573) at dotnet/coreclr","RelatedBody":"- updateAssignedInterval() needs to handle the case where the previously assigned interval was TYP_DOUBLE.\r\n- Similarly, at block boundaries, if we are setting the register for a double interval, and the assigned interval is either null or is TYP_FLOAT ,we also need to unassign the other half of the register.\r\n- LSRA only considers the valid double registers when allocating. When setting the candidates for the source of a return, it should only set the bit for the valid double register.\r\n\r\nFix #13751"},{"Id":"6736411755","Type":"IssuesEvent","CreatedAt":"2017-10-19T03:49:58","Actor":"CarolEidt","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/13751","RelatedDescription":"Closed issue \"[RyuJIT/arm32][JitStressRegs=1] Assertion failed 'genIsValidDoubleReg(reg)'\" (#13751) at dotnet/coreclr","RelatedBody":"In Windows RyuJIT/arm32 run with `COMPlus_JitStressRegs=1`:\r\n```\r\nAssert failure(PID 5328 [0x000014d0], Thread: 9196 [0x23ec]): Assertion failed 'genIsValidDoubleReg(reg)' in 'testout1:Func_0_5_5_3():struct' (IL size 765)\r\n\r\n    File: e:\\gh\\coreclr2\\src\\jit\\lsra.cpp Line: 7443\r\n    Image: c:\\brucefo\\core_root\\Windows_NT.arm.Checked.2017-08-23\\CoreRun.exe\r\n```\r\n\r\nTests:\r\n```\r\nJIT\\Methodical\\fp\\exgen\\10w5d_cs_do\\10w5d_cs_do.cmd (TEST_IDENTIFIER = Tests.lst=10w5d_cs_do.cmd_7784)\r\n```\r\n"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"6735807182","Type":"PullRequestEvent","CreatedAt":"2017-10-18T23:42:24","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/7862","RelatedDescription":"Merged pull request \"Merge release/15.5 to master\" (#7862) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/15.5 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/15.5-to-master-20171018-070036\ngit reset --hard upstream/master\ngit merge upstream/release/15.5\n# Fix merge conflicts\ngit commit\ngit push merges/release/15.5-to-master-20171018-070036 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"6735390518","Type":"IssuesEvent","CreatedAt":"2017-10-18T21:35:47","Actor":"jainaashish","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/7867","RelatedDescription":"Opened issue \"Configure.PS1 fails installing .NET CLI\" (#7867) at dotnet/cli","RelatedBody":"Copied from https://github.com/NuGet/Home/issues/6049 \r\n\r\nAfter cloning the NuGet.Client repo and following the instructions to configure for a build. Configure.PS1 fails when attempting to download the .NET CLI. The output from the Powershell console is below:\r\n\r\n`PS D:\\Reference Source\\Microsoft\\nuget\\nuget.client> .\\configure.ps1\r\n[17:10:09 +0] Configuring NuGet.Client build environment\r\n[17:10:09 +0] [BEGIN] Configuring git repo\r\n[17:10:09 +0] [DONE +00:00:00] Configuring git repo\r\n[17:10:09 +0] [BEGIN] Installing NuGet.exe\r\nNuGet Version: 4.0.0.2283\r\nhttp-cache: C:\\Users\\spmys\\AppData\\Local\\NuGet\\v3-cache\r\nglobal-packages: C:\\Users\\spmys.nuget\\packages\r\ntemp: C:\\Users\\spmys\\AppData\\Local\\Temp\\NuGetScratch\r\n[17:10:09 +0] [DONE +00:00:00] Installing NuGet.exe\r\n[17:10:09 +0] [BEGIN] Installing .NET CLI\r\n.NET Command Line Tools (1.0.1)\r\n\r\nProduct Information:\r\nVersion: 1.0.1\r\nCommit SHA-1 hash: 005db40cd1\r\n\r\nRuntime Environment:\r\nOS Name: Windows\r\nOS Version: 6.1.7601\r\nOS Platform: Windows\r\nRID: win7-x64\r\nBase Path: D:\\Reference Source\\Microsoft\\nuget\\nuget.client\\cli1.0.4\\sdk\\1.0.1\r\n[17:10:10 +0] Downloading .NET CLI\r\nError-Log : [17:10:13 +3] [FAILED +00:00:03] Installing .NET CLI\r\nAt D:\\Reference Source\\Microsoft\\nuget\\nuget.client\\build\\common.ps1:142 char:17\r\n\r\n... Error-Log \"[FAILED +$(Format-ElapsedTime $sw.Elapsed)] $B ...\r\n            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\nCategoryInfo : NotSpecified: (:) [Write-Error], WriteErrorException\r\nFullyQualifiedErrorId : Microsoft.PowerShell.Commands.WriteErrorException,Error-Log\r\nException calling \"Invoke\" with \"0\" argument(s): \"Failed to download\r\nhttps://dotnetcli.blob.core.windows.net/dotnet/Sdk/2.0/latest.version.\"\r\nAt D:\\Reference Source\\Microsoft\\nuget\\nuget.client\\cli\\dotnet-install.ps1:106 char:20\r\n\r\n        return $ScriptBlock.Invoke()\r\n               ~~~~~~~~~~~~~~~~~~~~~\r\nCategoryInfo : NotSpecified: (:) [], ParentContainsErrorRecordException\r\nFullyQualifiedErrorId : RuntimeException\r\nPS D:\\Reference Source\\Microsoft\\nuget\\nuget.client>`\r\n\r\nAny thoughts on what the issue is and how to resolve it?"},{"Id":"6735388850","Type":"PullRequestEvent","CreatedAt":"2017-10-18T21:35:23","Actor":"dotnet-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/7866","RelatedDescription":"Opened pull request \"Update CoreSetup to preview1-25818-02 (master)\" (#7866) at dotnet/cli","RelatedBody":"/cc @dotnet/dotnet-cli"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"6734582431","Type":"IssuesEvent","CreatedAt":"2017-10-18T18:33:29","Actor":"ericstj","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/518","RelatedDescription":"Closed issue \"Microsoft.Packaging.Tools.Trimming package can't be found\" (#518) at dotnet/standard","RelatedBody":"VS2017, .NET Core 2.0.\r\n\r\nThe instructions in https://github.com/dotnet/standard/blob/release/2.0.0/Microsoft.Packaging.Tools.Trimming/docs/trimming.md say to install `Microsoft.Packaging.Tools.Trimming` however I can't locacte that package.\r\n\r\n```\r\nPM> Install-Package Microsoft.Packaging.Tools.Trimming\r\nInstall-Package : Unable to find package 'Microsoft.Packaging.Tools.Trimming'\r\nAt line:1 char:1\r\n+ Install-Package Microsoft.Packaging.Tools.Trimming\r\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    + CategoryInfo          : NotSpecified: (:) [Install-Package], Exception\r\n    + FullyQualifiedErrorId : NuGetCmdletUnhandledException,NuGet.PackageManagement.PowerShellCmdlets.InstallPackageCommand\r\n \r\nTime Elapsed: 00:00:01.2276512\r\nPM> \r\n```"},{"Id":"6734568810","Type":"IssuesEvent","CreatedAt":"2017-10-18T18:30:34","Actor":"ericstj","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/519","RelatedDescription":"Closed issue \"error MSB4018: The \"TrimFiles\" task failed unexpectedly.\" (#519) at dotnet/standard","RelatedBody":"I have done the following:\r\n* Installed Microsoft.Packaging.Tools.Trimming version 1.1.0-preview1-25729-01\r\n* Set up my .csproj to include `<TrimUnusedDependencies>true</TrimUnusedDependencies>` as per https://github.com/dotnet/standard/blob/release/2.0.0/Microsoft.Packaging.Tools.Trimming/docs/trimming.md\r\n\r\n\r\n```\r\n>------ Rebuild All started: Project: Music, Configuration: Debug Any CPU ------\r\n1>C:\\Users\\Adam\\.nuget\\packages\\microsoft.packaging.tools.trimming\\1.1.0-preview1-25729-01\\build\\Microsoft.Packaging.Tools.Trimming.targets(55,5): error MSB4018: The \"TrimFiles\" task failed unexpectedly.\r\n1>C:\\Users\\Adam\\.nuget\\packages\\microsoft.packaging.tools.trimming\\1.1.0-preview1-25729-01\\build\\Microsoft.Packaging.Tools.Trimming.targets(55,5): error MSB4018: System.ArgumentNullException: Value cannot be null.\r\n1>C:\\Users\\Adam\\.nuget\\packages\\microsoft.packaging.tools.trimming\\1.1.0-preview1-25729-01\\build\\Microsoft.Packaging.Tools.Trimming.targets(55,5): error MSB4018: Parameter name: source\r\n1>C:\\Users\\Adam\\.nuget\\packages\\microsoft.packaging.tools.trimming\\1.1.0-preview1-25729-01\\build\\Microsoft.Packaging.Tools.Trimming.targets(55,5): error MSB4018:    at System.Linq.Enumerable.Where[TSource](IEnumerable`1 source, Func`2 predicate)\r\n1>C:\\Users\\Adam\\.nuget\\packages\\microsoft.packaging.tools.trimming\\1.1.0-preview1-25729-01\\build\\Microsoft.Packaging.Tools.Trimming.targets(55,5): error MSB4018:    at Microsoft.DotNet.Build.Tasks.TrimFiles.Execute()\r\n1>C:\\Users\\Adam\\.nuget\\packages\\microsoft.packaging.tools.trimming\\1.1.0-preview1-25729-01\\build\\Microsoft.Packaging.Tools.Trimming.targets(55,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute()\r\n1>C:\\Users\\Adam\\.nuget\\packages\\microsoft.packaging.tools.trimming\\1.1.0-preview1-25729-01\\build\\Microsoft.Packaging.Tools.Trimming.targets(55,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskBuilder.<ExecuteInstantiatedTask>d__26.MoveNext()\r\n1>Done building project \"Music.csproj\" -- FAILED.\r\n```\r\n\r\nAny clues? This is pretty much the MVC template from the 2.0.0 SDK.\r\n\r\nNote that using `1.0.0-preview2-25401-01` from nuget.org fails due to it missing the patch in #461, so I've used the latest from myget.org.\r\n\r\nA quick example that exhibits the problem:\r\n[TestWebApplication.zip](https://github.com/dotnet/standard/files/1346194/TestWebApplication.zip)\r\n"},{"Id":"6729608940","Type":"PullRequestEvent","CreatedAt":"2017-10-17T20:46:21","Actor":"ericstj","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/541","RelatedDescription":"Merged pull request \"Handle duplicate files when trimming\" (#541) at dotnet/standard","RelatedBody":"Duplicate file names can exist when publishing RID-less and packages contain RID-specific\r\nruntime targets.\r\n\r\nWe didn't support this previously because trimming was primarily focusing on standalone\r\nscenarios.\r\n\r\nHandle duplicates by inserting an aggregate node in the file graph that references all the\r\nduplicate nodes as dependencies.  Only the aggregate node will be referenced by other\r\nnodes, but it will include all implementations via dependencies.\r\n\r\nFixes #378 #519 \r\n\r\n/cc @michael-lang @voltagex "},{"Id":"6729608920","Type":"IssuesEvent","CreatedAt":"2017-10-17T20:46:21","Actor":"ericstj","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/378","RelatedDescription":"Closed issue \"Trimming fails if a conflict hits it\" (#378) at dotnet/standard","RelatedBody":"If conflict resolution doesn't resolve a conflict trimming will fail with an error like:\r\n```\r\nC:\\Users\\ericstj\\.nuget\\packages\\microsoft.packaging.tools.trimming\\1.0.0-preview2-25401-01\\build\\Microsoft.Packaging.Tools.Trimming.targets(55,5): error MSB4018: The \"TrimFiles\" task failed unexpectedly.\\r [F:\\testNetfx\\sdkProj\\sdkProj.csproj]\r\nC:\\Users\\ericstj\\.nuget\\packages\\microsoft.packaging.tools.trimming\\1.0.0-preview2-25401-01\\build\\Microsoft.Packaging.Tools.Trimming.targets(55,5): error MSB4018: System.ArgumentException: An item with the same key has already been added. Key: System.Security.Cryptography.Encoding.dll\\r [F:\\testNetfx\\sdkProj\\sdkProj.csproj]\r\nC:\\Users\\ericstj\\.nuget\\packages\\microsoft.packaging.tools.trimming\\1.0.0-preview2-25401-01\\build\\Microsoft.Packaging.Tools.Trimming.targets(55,5): error MSB4018:    at System.ThrowHelper.ThrowAddingDuplicateWithKeyArgumentException(Object key)\\r [F:\\testNetfx\\sdkProj\\sdkProj.csproj]\r\nC:\\Users\\ericstj\\.nuget\\packages\\microsoft.packaging.tools.trimming\\1.0.0-preview2-25401-01\\build\\Microsoft.Packaging.Tools.Trimming.targets(55,5): error MSB4018:    at System.Collections.Generic.Dictionary`2.TryInsert(TKey key, TValue value, InsertionBehavior behavior)\\r [F:\\testNetfx\\sdkProj\\sdkProj.csproj]\r\nC:\\Users\\ericstj\\.nuget\\packages\\microsoft.packaging.tools.trimming\\1.0.0-preview2-25401-01\\build\\Microsoft.Packaging.Tools.Trimming.targets(55,5): error MSB4018:    at System.Collections.Generic.Dictionary`2.Add(TKey key, TValue value)\\r [F:\\testNetfx\\sdkProj\\sdkProj.csproj]\r\nC:\\Users\\ericstj\\.nuget\\packages\\microsoft.packaging.tools.trimming\\1.0.0-preview2-25401-01\\build\\Microsoft.Packaging.Tools.Trimming.targets(55,5): error MSB4018:    at Microsoft.DotNet.Build.Tasks.TrimFiles.GetFiles(IDictionary`2 packages)\\r [F:\\testNetfx\\sdkProj\\sdkProj.csproj]\r\n```\r\n\r\nWe shouldn't fail here, instead we should just tolerate the duplicate and use one of them.\r\nhttps://github.com/dotnet/standard/blob/eacea174a2ea58c0dc8576cbec321e0cd44640a5/Microsoft.Packaging.Tools.Trimming/tasks/TrimFiles.cs#L310\r\n\r\n"},{"Id":"6728329212","Type":"PullRequestEvent","CreatedAt":"2017-10-17T16:18:54","Actor":"ericstj","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/541","RelatedDescription":"Opened pull request \"Handle duplicate files when trimming\" (#541) at dotnet/standard","RelatedBody":"Duplicate file names can exist when publishing RID-less and packages contain RID-specific\r\nruntime targets.\r\n\r\nWe didn't support this previously because trimming was primarily focusing on standalone\r\nscenarios.\r\n\r\nHandle duplicates by inserting an aggregate node in the file graph that references all the\r\nduplicate nodes as dependencies.  Only the aggregate node will be referenced by other\r\nnodes, but it will include all implementations via dependencies.\r\n\r\nFixes #378 #519 \r\n\r\n/cc @michael-lang @voltagex "},{"Id":"6727384905","Type":"IssuesEvent","CreatedAt":"2017-10-17T13:27:57","Actor":"jogibear9988","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/540","RelatedDescription":"Opened issue \"Error when Librarys are used where some reference NetStandart2.0.1 and others in a 4.6.2 Project\" (#540) at dotnet/standard","RelatedBody":"I've a WPF App wich References a Library (RoslynPad) wich uses NetStandart2.0.1\r\n\r\nMy Application also References other Librarys wich Reference to System.Runtime 4.3 Nuget Package.\r\n\r\nNow I've the Problem. When I build, System.Runtim ein Version 4.1.2.0 is copied to my Application Directory (the one from Netstandart2.0.1 package), but in the App.config a redirect to 4.1.1 is created (wich is in the 4.3 nuget)\r\n\r\nhow can I fix this, without manually changeing the app.config every time? "},{"Id":"6723583231","Type":"IssuesEvent","CreatedAt":"2017-10-16T19:07:35","Actor":"Petermarcu","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/537","RelatedDescription":"Closed issue \"[Question] Clean up milestones\" (#537) at dotnet/standard","RelatedBody":"Is it possible to close out [.NET Standard 2.0 milestone](https://github.com/dotnet/standard/milestone/2) now it is released?  I'm assuming a new milestone for v2.1 will be created once roadmap is announced.  Thx"},{"Id":"6722723626","Type":"IssuesEvent","CreatedAt":"2017-10-16T16:00:49","Actor":"ericstj","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/538","RelatedDescription":"Closed issue \"No netstandard.dll reference when targeting netstandard2.0\" (#538) at dotnet/standard","RelatedBody":"@alexeyzimarev reported this here: https://github.com/dotnet/core/issues/831#issuecomment-336706155\r\n\r\nThis is even worse. I converted RestSharp to be on netstandard2.0. It builds fine on my machine. But on my other machine and on anyone else's it is throwing errors on everything - `CultureInfo`, `List`, etc.\r\n\r\nSo I looked how it shows and compared it with a completely new .NET Standard class library. Here is how they look:\r\n\r\n![image](https://user-images.githubusercontent.com/2821205/31584452-365ae620-b1af-11e7-8340-a92e0a5fc552.png)\r\n\r\nThe csproj files are completely identical:\r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netstandard2.0</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```\r\n\r\nI tried using `<NetStandardImplicitPackageVersion>2.0.0</NetStandardImplicitPackageVersion>` and it has no effect. But hence that the RestSharp project does not even have a reference to `netstandard.dll`. How this is even possible???"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"6736594387","Type":"PullRequestEvent","CreatedAt":"2017-10-19T05:19:02","Actor":"dotnet-maestro-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/24733","RelatedDescription":"Opened pull request \"Update ProjectNTfs, ProjectNTfsTestILC to beta-25819-00, beta-25819-00, respectively (master)\" (#24733) at dotnet/corefx","RelatedBody":""},{"Id":"6736437584","Type":"PullRequestEvent","CreatedAt":"2017-10-19T04:01:36","Actor":"danmosemsft","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/24731","RelatedDescription":"Merged pull request \"Update CoreFx to preview1-25819-01 (master)\" (#24731) at dotnet/corefx","RelatedBody":""},{"Id":"6736285020","Type":"IssuesEvent","CreatedAt":"2017-10-19T02:56:45","Actor":"jkotas","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/24721","RelatedDescription":"Closed issue \"Try catch finally - proper behaviour\" (#24721) at dotnet/corefx","RelatedBody":"Hey I'm not sure if it's proper behaviour.\r\nShould finnaly be called even if catch throws error ?\r\n\r\nSample code and result\r\nusing System;\r\n\r\n```\r\nnamespace ConsoleApplication\r\n{\r\n    class Program\r\n    {\r\n       static void Main(string[] args)\r\n        {\r\n            \r\n            AppDomain currentDomain = AppDomain.CurrentDomain;\r\n            currentDomain.UnhandledException += ExampleHandler;\r\n            \r\n                Console.WriteLine(\"Example 1: re-throw inside of another try block:\");\r\n        \r\n                try\r\n                {\r\n                    Console.WriteLine(\"--outer try\");\r\n                    try\r\n                    {\r\n                        Console.WriteLine(\"----inner try\");\r\n                        throw new Exception();\r\n                    }\r\n                    catch\r\n                    {\r\n                        Console.WriteLine(\"----inner catch\");\r\n                        throw;\r\n                    }\r\n                    finally\r\n                    {\r\n                        Console.WriteLine(\"----inner finally\");\r\n                    }\r\n                }\r\n                catch\r\n                {\r\n                    Console.WriteLine(\"--outer catch\");\r\n                    // swallow\r\n                }\r\n                finally\r\n                {\r\n                    Console.WriteLine(\"--outer finally\");\r\n                }\r\n                Console.WriteLine(\"Huzzah!\");\r\n        \r\n                Console.WriteLine();\r\n                Console.WriteLine(\"Example 2: re-throw outside of another try block:\");\r\n                try\r\n                {\r\n                    Console.WriteLine(\"--try\");\r\n                    throw new Exception();\r\n                }\r\n                catch\r\n                {\r\n                    Console.WriteLine(\"--catch\");\r\n                    throw;\r\n                }\r\n                finally\r\n                {\r\n                    Console.WriteLine(\"--finally\");\r\n                }\r\n        \r\n                Console.ReadLine();\r\n            }\r\n\r\n        private static void ExampleHandler(object sender, UnhandledExceptionEventArgs args)\r\n        {\r\n            Exception e = (Exception) args.ExceptionObject;\r\n            Console.WriteLine(\"MyHandler caught : \" + e.Message);\r\n            Console.WriteLine(\"Runtime terminating: {0}\", args.IsTerminating);\r\n        }\r\n    }\r\n}\r\n```\r\nDoes not finally block should be called ?\r\n\r\n![image](https://user-images.githubusercontent.com/6282239/31732878-429a46fa-b43a-11e7-92ab-15cfb5b33012.png)\r\n\r\n"},{"Id":"6736213922","Type":"PullRequestEvent","CreatedAt":"2017-10-19T02:28:33","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/24732","RelatedDescription":"Merged pull request \"Replace 'enlistment' with 'repo' in a few places\" (#24732) at dotnet/corefx","RelatedBody":"\"Enlistment\" is a MS-internal term from Source Depot days for what in today's git world is now commonly called a \"repo\".\r\n\r\nUpdating this in a few places to avoid confusing compiler errors.\r\n\r\n"},{"Id":"6736088002","Type":"PullRequestEvent","CreatedAt":"2017-10-19T01:37:13","Actor":"MaxHorstmann","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/24732","RelatedDescription":"Opened pull request \"Replace 'enlistment' with 'repo' in a few places\" (#24732) at dotnet/corefx","RelatedBody":"\"Enlistment\" is a MS-internal term from Source Depot days for what in today's git world is now commonly called a \"repo\".\r\n\r\nUpdating this in a few places to avoid confusing compiler errors.\r\n\r\n"},{"Id":"6736080012","Type":"PullRequestEvent","CreatedAt":"2017-10-19T01:33:51","Actor":"dotnet-maestro-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/24731","RelatedDescription":"Opened pull request \"Update CoreFx to preview1-25819-01 (master)\" (#24731) at dotnet/corefx","RelatedBody":""},{"Id":"6736035825","Type":"PullRequestEvent","CreatedAt":"2017-10-19T01:14:56","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/24729","RelatedDescription":"Merged pull request \"Update CoreClr, CoreSetup to preview1-25818-04, preview1-25818-02, respectively (master)\" (#24729) at dotnet/corefx","RelatedBody":""}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"6736428953","Type":"IssuesEvent","CreatedAt":"2017-10-19T03:57:47","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22762","RelatedDescription":"Closed issue \"Feature Request: adding \"when\" clause to \"yield return\"\" (#22762) at dotnet/roslyn","RelatedBody":"Instead of writing this:\r\n \r\n```\r\n     IEnumerable<string> foo()\r\n     {\r\n           var stringValue = myVariable.GetOtherValue();\r\n           if (stringValue != null)\r\n                yield return stringValue;\r\n     }\r\n\r\n``` \r\nI would like to be able to write this:\r\n \r\n     IEnumerable<string> foo()\r\n     {\r\n           yield return myVariable.GetOtherValue() when v => v != null;\r\n     }\r\n \r\nThis seems like a natural extension to the way 'when' is used by exceptions.  Alternatively, given the way a property setter has a fixed value 'value', it could be done that way as well, like this:\r\n\r\n```\r\n     IEnumerable<string> foo()\r\n     {\r\n           yield return myVariable.GetOtherValue() when value != null;\r\n     }\r\n\r\n```\r\n\r\nSince a property setter would never need a yield return, this may be a cleaner way to proceed.\r\n\r\n"},{"Id":"6736274899","Type":"IssuesEvent","CreatedAt":"2017-10-19T02:52:38","Actor":"mspost","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22762","RelatedDescription":"Opened issue \"Feature Request: adding \"when\" clause to \"yield return\"\" (#22762) at dotnet/roslyn","RelatedBody":"Instead of writing this:\r\n \r\n```\r\n     IEnumerable<string> foo()\r\n     {\r\n           var stringValue = myVariable.GetOtherValue();\r\n           if (stringValue != null)\r\n                yield return stringValue;\r\n     }\r\n\r\n``` \r\nI would like to be able to write this:\r\n \r\n     IEnumerable<string> foo()\r\n     {\r\n           yield return myVariable.GetOtherValue() when v => v != null;\r\n     }\r\n \r\nThis seems like a natural extension to the way 'when' is used by exceptions.  Alternatively, given the way a property setter has a fixed value 'value', it could be done that way as well, like this:\r\n\r\n```\r\n     IEnumerable<string> foo()\r\n     {\r\n           yield return myVariable.GetOtherValue() when value != null;\r\n     }\r\n\r\n```\r\n\r\nSince a property setter would never need a yield return, this may be a cleaner way to proceed.\r\n\r\n"},{"Id":"6736058537","Type":"IssuesEvent","CreatedAt":"2017-10-19T01:24:45","Actor":"benaadams","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22761","RelatedDescription":"Closed issue \"Only add d__x to Async StateMachine when name collisions\" (#22761) at dotnet/roslyn","RelatedBody":"Currently statemachines created in the same namespace (or perhaps assembly?) have an ever increasing sequence of `d__N` append to their names\r\n\r\n![StateMachine Names](https://aoa.blob.core.windows.net/aspnet/statemachine-names.png)\r\n\r\ne.g.\r\n```\r\n<Main>d__0\r\n<AsyncMethod>d__1\r\n<DelayedAsync>d__2\r\n<IntermediateAsync>d__3\r\n```\r\nIs there any need to do this except when there are name collisions?\r\n\r\n/cc @JamesNK "},{"Id":"6735986871","Type":"IssuesEvent","CreatedAt":"2017-10-19T00:53:55","Actor":"benaadams","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22761","RelatedDescription":"Opened issue \"Only add d__x to Async StateMachine when name collisions\" (#22761) at dotnet/roslyn","RelatedBody":"Currently statemachines created in the same namespace (or perhaps assembly?) have an ever increasing sequence of `d__N` append to their names\r\n\r\n![StateMachine Names](https://aoa.blob.core.windows.net/aspnet/statemachine-names.png)\r\n\r\ne.g.\r\n```\r\n<Main>d__0\r\n<AsyncMethod>d__1\r\n<DelayedAsync>d__2\r\n<IntermediateAsync>d__3\r\n```\r\nIs there any need to do this except when there are name collisions?\r\n\r\n/cc @JamesNK "},{"Id":"6735971727","Type":"IssuesEvent","CreatedAt":"2017-10-19T00:47:16","Actor":"DustinCampbell","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22760","RelatedDescription":"Opened issue \"Replace Property with Method doesn't insert 'this' when necessary.\" (#22760) at dotnet/roslyn","RelatedBody":"**Version Used**: 15.5 preview 1\r\n\r\nNote: this should be easy to fix by generating the field assignment with `this.` but marking it with a `Simplifier.Annotation`.\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Start with the following code:\r\n\r\n    ```C#\r\n    class C\r\n    {\r\n        public int Value { get; }\r\n\r\n        public C(int value)\r\n        {\r\n            Value = value;\r\n        }\r\n    }\r\n    ```\r\n\r\n2. Invoke Replace Property with Method on `Value`\r\n\r\n**Expected Behavior**:\r\n\r\n```C#\r\nclass C\r\n{\r\n    private readonly int value;\r\n\r\n    public int GetValue()\r\n    {\r\n        return value;\r\n    }\r\n\r\n    public C(int value)\r\n    {\r\n        this.value = value;\r\n    }\r\n}\r\n```\r\n\r\n**Actual Behavior**:\r\n\r\n```C#\r\nclass C\r\n{\r\n    private readonly int value;\r\n\r\n    public int GetValue()\r\n    {\r\n        return value;\r\n    }\r\n\r\n    public C(int value)\r\n    {\r\n        value = value;\r\n    }\r\n}\r\n```"},{"Id":"6735912137","Type":"PullRequestEvent","CreatedAt":"2017-10-19T00:22:53","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/22667","RelatedDescription":"Merged pull request \"Adjust diagnostic location for lambda that cannot convert (15.later)\" (#22667) at dotnet/roslyn","RelatedBody":"When working with nested lambdas, it is very easy to end up with the inner lambda entirely squiggled, which gets in the way of identifying and fixing the problem. In such cases, the fix is to use the lambda variables and the arrow as the span to report on (instead of the entire lambda).\r\n\r\nBefore:\r\n![image](https://user-images.githubusercontent.com/12466233/31466758-321d3790-ae8d-11e7-9394-0844a3374d88.png)\r\n\r\nAfter:\r\n![image](https://user-images.githubusercontent.com/12466233/31476658-6be88252-aebc-11e7-9665-72c8fa316ab2.png)\r\n\r\nFixes https://github.com/dotnet/roslyn/issues/22662"},{"Id":"6735881198","Type":"IssuesEvent","CreatedAt":"2017-10-19T00:10:10","Actor":"elachlan","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/22759","RelatedDescription":"Opened issue \"InvalidOperationException in ExtractMethodCodeRefactoringProvider\" (#22759) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\nVisual Studio Community 2017 v 15.4.0\r\nVisual Basic 2017 - 00369-60000-00001-AA072 \r\n\r\n**Steps to Reproduce**:\r\nI am unsure how I produced the error. But I was working with a foreach loop.\r\n\r\n**Expected Behavior**:\r\nNo Exception.\r\n\r\n**Actual Behavior**:\r\nException:\r\n\r\n> System.InvalidOperationException : Sequence contains no elements\r\n>    at System.Linq.Enumerable.First[TSource](IEnumerable`1 source)\r\n>    at Microsoft.CodeAnalysis.VisualBasic.ExtractMethod.VisualBasicSelectionResult.GetLastStatementUnderContainer()\r\n>    at Microsoft.CodeAnalysis.VisualBasic.ExtractMethod.VisualBasicMethodExtractor.VisualBasicAnalyzer.GetFlowAnalysisNodeRange()\r\n>    at Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.Analyzer.GetDataFlowAnalysisData(SemanticModel model)\r\n>    at async Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.Analyzer.AnalyzeAsync(<Unknown Parameters>)\r\n>    at async Microsoft.CodeAnalysis.ExtractMethod.MethodExtractor.ExtractMethodAsync(<Unknown Parameters>)\r\n>    at async Microsoft.CodeAnalysis.ExtractMethod.AbstractExtractMethodService`3.ExtractMethodAsync[TValidator,TExtractor,TResult](<Unknown Parameters>)\r\n>    at async Microsoft.CodeAnalysis.CodeRefactorings.ExtractMethod.ExtractMethodCodeRefactoringProvider.GetCodeActionAsync(<Unknown Parameters>)\r\n>    at async Microsoft.CodeAnalysis.CodeRefactorings.ExtractMethod.ExtractMethodCodeRefactoringProvider.ComputeRefactoringsAsync(<Unknown Parameters>)\r\n>    at async Microsoft.CodeAnalysis.CodeRefactorings.CodeRefactoringService.GetRefactoringFromProviderAsync(<Unknown Parameters>)\r\n>    at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)\r\n"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"6736291369","Type":"PullRequestEvent","CreatedAt":"2017-10-19T02:59:17","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4761","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#4761) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"6735994452","Type":"PullRequestEvent","CreatedAt":"2017-10-19T00:57:17","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4761","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#4761) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"6735990049","Type":"PullRequestEvent","CreatedAt":"2017-10-19T00:55:19","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4759","RelatedDescription":"Merged pull request \"Fix BinaryWriter/Reader span parameter names\" (#4759) at dotnet/corert","RelatedBody":"Port of non-shared parts of https://github.com/dotnet/coreclr/pull/14577"},{"Id":"6735883036","Type":"IssuesEvent","CreatedAt":"2017-10-19T00:10:52","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/4595","RelatedDescription":"Closed issue \"Use relative pointers in AssociatedMethodDataNodes instead of absolute pointers\" (#4595) at dotnet/corert","RelatedBody":"See #1285 "},{"Id":"6735882750","Type":"PullRequestEvent","CreatedAt":"2017-10-19T00:10:46","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4760","RelatedDescription":"Merged pull request \"Changing reloc types in method associated data nodes to be more compatible with unix envirtonments.\" (#4760) at dotnet/corert","RelatedBody":"Fix for issue reported in https://github.com/dotnet/corert/issues/1285#issuecomment-331301808 (issue: https://github.com/dotnet/corert/issues/4595)\r\n"},{"Id":"6735759278","Type":"PullRequestEvent","CreatedAt":"2017-10-18T23:24:48","Actor":"fadimounir","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4760","RelatedDescription":"Opened pull request \"Changing reloc types in method associated data nodes to be more compatible with unix envirtonments.\" (#4760) at dotnet/corert","RelatedBody":"Fix for issue reported in https://github.com/dotnet/corert/issues/1285#issuecomment-331301808\r\n"},{"Id":"6735607518","Type":"PullRequestEvent","CreatedAt":"2017-10-18T22:34:50","Actor":"stephentoub","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4759","RelatedDescription":"Opened pull request \"Fix BinaryWriter/Reader span parameter names\" (#4759) at dotnet/corert","RelatedBody":"Port of non-shared parts of https://github.com/dotnet/coreclr/pull/14577"},{"Id":"6734266499","Type":"PullRequestEvent","CreatedAt":"2017-10-18T17:26:42","Actor":"ArztSamuel","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4758","RelatedDescription":"Opened pull request \"[ILVerify] Instantiate generic constraints on initialization\" (#4758) at dotnet/corert","RelatedBody":"When instantiating a type with a generic parameter, the constraints of this generic parameter stay uninstantiated. This leads to the casting helper failing to cast the generic parameter to types, even when the generic paremeter's constraints would allow him to do so (as it is happening in the sample code of #4752).\r\n\r\nI have implemented a helper class `InstantiatedGenericParameter`, which encapsulates a normal `GenericParameterDesc`, but also accepts a type / method instantiation and instantiates the TypeConstraints before returning them.\r\n\r\nThis makes passing an InstantiationContext to the `CheckConstraints` method obsolete, since the CastingHelper should be able to deal with the constraints now.\r\nThe InstantiationContext is however still needed when passing types with uninstantiated generic parameters to the check (as it is done in the TypeSystem tests).\r\n\r\nThis fixes #4752."},{"Id":"6734183945","Type":"PullRequestEvent","CreatedAt":"2017-10-18T17:08:37","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/4757","RelatedDescription":"Merged pull request \"Merge changes from TFS\" (#4757) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"6734177126","Type":"PullRequestEvent","CreatedAt":"2017-10-18T17:07:08","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/4757","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#4757) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"920400974321147904","CreatedAt":"2017-10-17T21:27:47+00:00","UserScreenname":"dotnet","Text":"Announcing the .NET Framework 4.7.1 https://t.co/Vu3bilF8bZ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":357,"FavoriteCount":323,"RawContent":null},{"Id":"920393493557555205","CreatedAt":"2017-10-17T20:58:03+00:00","UserScreenname":"dotnet","Text":".NET Framework October 2017 Preview of Quality Rollup https://t.co/oVqxMXye74","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":16,"FavoriteCount":16,"RawContent":null},{"Id":"920179824576028673","CreatedAt":"2017-10-17T06:49:00+00:00","UserScreenname":"dotnet","Text":".NET Framework Docker Performance Issue Resolved https://t.co/FST3EfcLtS","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":52,"FavoriteCount":29,"RawContent":null},{"Id":"920157146309730305","CreatedAt":"2017-10-17T05:18:54+00:00","UserScreenname":"dotnet","Text":"RyuJIT Just-in-Time Compiler Optimization Enhancements https://t.co/dhO8rAqiSI","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":130,"FavoriteCount":75,"RawContent":null},{"Id":"918494723425406976","CreatedAt":"2017-10-12T15:13:01+00:00","UserScreenname":"dotnet","Text":"So many fantastic #dotnetconf sessions this year! Check them out on-demand on @ch9 https://t.co/aFDC9i36Lu https://t.co/diQ3nfOU5p","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":107,"FavoriteCount":70,"RawContent":null},{"Id":"917994173541777409","CreatedAt":"2017-10-11T06:04:01+00:00","UserScreenname":"dotnet","Text":".NET Framework October 2017 Security and Quality Rollup https://t.co/MRrH6YjXGy","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":29,"FavoriteCount":21,"RawContent":null},{"Id":"916703209548214272","CreatedAt":"2017-10-07T16:34:11+00:00","UserScreenname":"dotnet","Text":"Join @terrajobst at his fire place for a story about .NET Standard versioning. https://t.co/8JAOGpk0Pm","Source":"<a href=\"http://twitter.com/#!/download/ipad\" rel=\"nofollow\">Twitter for iPad</a>","RetweetCount":49,"FavoriteCount":27,"RawContent":null}]}},"RunOn":"2017-10-19T05:30:19.3905739Z","RunDurationInMilliseconds":6512}