{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing .NET Framework 4.7.2 Early Access build 3052!","PublishedOn":"2018-02-05T21:55:13+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are happy to share the .NET Framework 4.7.2 Early Access build 3052 for your feedback. .NET Framework 4.7.2 is the next version of the .NET Framework. It is currently feature-complete and in...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/05/announcing-net-framework-4-7-2-early-access-build-3052/","RawContent":null},{"Title":"Entity Framework Core 2.1 Roadmap","PublishedOn":"2018-02-02T18:39:25+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"As mentioned in the announcement of the .NET Core 2.1 roadmap earlier today, at this point we know the overall shape of our next release and we have decided on a general schedule for it. As we...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/02/entity-framework-core-2-1-roadmap/","RawContent":null},{"Title":".NET Core 2.1 Roadmap","PublishedOn":"2018-02-02T18:22:30+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"The .NET team has been working on the .NET Core 2.1 release for the last several months on GitHub. We know that many of you have been using .NET Core 2.0 since it shipped in August of last year and...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/02/net-core-2-1-roadmap/","RawContent":null},{"Title":"January 2018 Preview of Quality Rollup","PublishedOn":"2018-01-27T00:52:41+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We recently released the January 2018 Preview of Quality Rollup. Quality and Reliability This release contains the following quality and reliability improvements. ASP.NET Behavior change of...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/26/january-2018-preview-of-quality-rollup/","RawContent":null},{"Title":".NET Framework January 2018 Security and Quality Rollup","PublishedOn":"2018-01-10T06:39:31+00:00","CommentsCount":31,"FacebookCount":0,"Summary":"Updated: January 25, 2018 Today, we are releasing the January 2018 Security and Quality Rollup. An issue with the January 2018 Monthly Rollup was found on Windows 7 and Windows Server 2008 R2 if .NET...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-january-2018-security-and-quality-rollup/","RawContent":null},{"Title":".NET for UWP January 2018 Update","PublishedOn":"2018-01-10T04:17:28+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the .NET for UWP January 2018 Update. This post includes the fix included and instructions on how to update your applications. Security CVE-2018-0786 – Security Feature Bypass...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-for-uwp-january-2018-update/","RawContent":null},{"Title":".NET Framework 4.7.1 is available on Windows Update, WSUS and MU Catalog!","PublishedOn":"2018-01-09T21:39:54+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"Today, we are happy to announce the Microsoft .NET Framework 4.7.1 is available on Windows Update, Windows Server Update Services (WSUS) and Microsoft Update (MU) Catalog. This includes reliability...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-4-7-1-is-available-on-windows-update-wsus-and-mu-catalog/","RawContent":null},{"Title":".NET Core January 2018 Update","PublishedOn":"2018-01-09T21:08:03+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core January 2018 Update. This includes .NET Core  1.0.9, 1.1.6 and 2.0.5. Please leave feedback on the release in the comments below or at dotnet/core #1199. Security...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-core-january-2018-update/","RawContent":null},{"Title":"Migrating your existing .NET application to the cloud? Tell us about it!","PublishedOn":"2017-12-05T18:14:46+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Hi everyone! The .NET team is conducting a survey to learn more about your approach for moving existing .NET applications to the cloud.  The survey should take less than 5 minutes to complete. Take...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/12/05/migrating-your-existing-net-application-to-the-cloud-tell-us-about-it/","RawContent":null},{"Title":"Announcing the Windows Compatibility Pack for .NET Core","PublishedOn":"2017-11-17T04:59:32+00:00","CommentsCount":76,"FacebookCount":0,"Summary":"Porting existing code to .NET Core used to be quite hard because the available API set was very small. In .NET Core 2.0, we already made this much easier, thanks to .NET Standard 2.0. Today,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/announcing-the-windows-compatibility-pack-for-net-core/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7192252734","Type":"PullRequestEvent","CreatedAt":"2018-02-03T01:30:47","Actor":"karann-msft","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/98","RelatedDescription":"Opened pull request \"Updates to reflect the latest information\" (#98) at dotnet/home","RelatedBody":""},{"Id":"7187459205","Type":"PullRequestEvent","CreatedAt":"2018-02-02T05:26:03","Actor":"mairaw","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/97","RelatedDescription":"Opened pull request \"update CLA PDF link\" (#97) at dotnet/home","RelatedBody":""},{"Id":"7102763357","Type":"PullRequestEvent","CreatedAt":"2018-01-16T00:17:04","Actor":"galatrash-at-dnn","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/96","RelatedDescription":"Opened pull request \"Adding DNN Platform.\" (#96) at dotnet/home","RelatedBody":""},{"Id":"7097053889","Type":"PullRequestEvent","CreatedAt":"2018-01-14T15:15:00","Actor":"bfistein","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/95","RelatedDescription":"Opened pull request \"Fix broken logo URL\" (#95) at dotnet/home","RelatedBody":""},{"Id":"7065382954","Type":"PullRequestEvent","CreatedAt":"2018-01-06T19:21:47","Actor":"ctaggart","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/94","RelatedDescription":"Opened pull request \"add SourceLink\" (#94) at dotnet/home","RelatedBody":"Adding SourceLink to the project list as per the checklist https://github.com/ctaggart/SourceLink/issues/138"},{"Id":"7044237283","Type":"PullRequestEvent","CreatedAt":"2017-12-31T20:25:44","Actor":"onovotny","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/93","RelatedDescription":"Opened pull request \"Add Humanizer\" (#93) at dotnet/home","RelatedBody":"Onboarding Humanizer: https://github.com/Humanizr/Humanizer/issues/682"},{"Id":"6946829856","Type":"PullRequestEvent","CreatedAt":"2017-12-05T18:08:42","Actor":"heiligerdankgesang","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/92","RelatedDescription":"Opened pull request \"Remove contact email from system.drawing.md\" (#92) at dotnet/home","RelatedBody":"Contact email is outdated. Mono-project site's community section has better, more up-to-date information."},{"Id":"6934052963","Type":"PullRequestEvent","CreatedAt":"2017-12-02T15:19:09","Actor":"rprouse","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/91","RelatedDescription":"Opened pull request \"Add NUnit to the .NET Foundation Projects\" (#91) at dotnet/home","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7148376542","Type":"IssuesEvent","CreatedAt":"2018-01-25T06:31:53","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/54","RelatedDescription":"Opened issue \"January 2018 Security and Quality Updates\" (#54) at dotnet/announcements","RelatedBody":"# January 2018 Security and Quality Updates\r\n\r\nThe following Security and Quality Updates were released this month. Known issues and resolved CVEs are also listed.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework January 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-january-2018-security-and-quality-rollup/)\r\n* [.NET Framework January 2018 Monthly Rollup Known Issue KB4074906 - \"TypeInitializationException\" or \"FileFormatException\" error in WPF applications](https://github.com/dotnet/announcements/issues/53)\r\n* [CVE-2018-0786](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-0786) – Security Feature Bypass in X509 Certificate Validation\r\n* [CVE-2018-0764](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-0764) – Denial of Service when parsing XML documents\r\n\r\n## .NET Core\r\n\r\n* [.NET Core January 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-core-january-2018-update/)\r\n* [CVE-2018-0786](https://github.com/dotnet/announcements/issues/51) – Security Feature Bypass in X509 Certificate Validation\r\n* [CVE-2018-0764](https://github.com/dotnet/announcements/issues/52) – Denial of Service when parsing XML documents\r\n\r\n## .NET for UWP\r\n\r\n* [.NET for UWP January 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-for-uwp-january-2018-update/)\r\n* [CVE-2018-0786](https://github.com/dotnet/announcements/issues/51) – Security Feature Bypass in X509 Certificate Validation"},{"Id":"7089727012","Type":"IssuesEvent","CreatedAt":"2018-01-12T04:51:18","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/53","RelatedDescription":"Opened issue \".NET Framework January 2018 Rollup Known Issue KB4074906 - \"TypeInitializationException\" or \"FileFormatException\" error in WPF applications\" (#53) at dotnet/announcements","RelatedBody":"# .NET Framework January 2018 Rollup Known Issue KB4074906 - \"TypeInitializationException\" or \"FileFormatException\" error in WPF applications\r\n\r\nAn issue has been found in the [.NET Framework January 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-january-2018-security-and-quality-rollup/). The .NET team is in the process of fixing the issue. This document describes the symptom and workarounds to resolve the issue while you are waiting for a fix.\r\n\r\nThis document will be updated when a fix is made available.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [microsoft/dotnet #599](https://github.com/Microsoft/dotnet/issues/599)\r\n\r\n## Symptoms\r\n\r\nWindows Presentation Foundation (WPF) applications that request a fallback font or a character that is not included in the currently selected font return the following error messages: \r\n\r\n```\r\nSystem.TypeInitializationException\r\n \r\n“FileFormatException: No FontFamily element found in FontFamilyCollection \r\nthat matches current OS or greater: Win7SP1”.\r\n\r\nInner exception originates from: CompositeFontParser\r\n```\r\n\r\n## Workarounds\r\n\r\nTo work around this problem, use one of the following methods.\r\n\r\n### Workaround 1 - Uninstall the January 2018 Update\r\n\r\nTo keep .NET 4.7.1 installed and maintain protection against vulnerabilities that are addressed by the January security updates, uninstall the January .NET Framework Security and Quality Rollup ([KB4055002](https://support.microsoft.com/en-us/help/4055002)), and then install the January .NET Framework Security-Only Update ([KB4054183](https://support.microsoft.com/en-us/help/4054183)). To do this, follow these steps:\r\n\r\n1. In Control Panel, open the Windows Update item, and then select View update history.\r\n1. In the Review your update history list, locate and select Security Update for Microsoft .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, 4.7.1 ([KB4055002](https://support.microsoft.com/en-us/help/4055002)). Then, select Uninstall.\r\n1. When you are prompted for confirmation to uninstall, select Yes.\r\n1. Restart your computer if you are prompted to do this.\r\n1. Download and install the Security Only update for .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, and 4.7.1 for Windows 7 SP1 and Windows Server 2008 R2 SP1 and .NET Framework 4.6 for Windows Server 2008 SP2 ([KB4054183](https://support.microsoft.com/en-us/help/4054183)) for your operating system configuration from the following links:\r\n   * [Security Only update for .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, and 4.7.1 for Windows 7 SP1 and Windows Server 2008 R2 SP1 for x86 systems (KB4054183)](http://download.windowsupdate.com/d/msdownload/update/software/secu/2018/01/ndp47-kb4054183-x86_301cb3d6591b572786c8349c12a28e5ec5d2d334.exe)\r\n   * [Security Only update for .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, and 4.7.1 on Windows 7 SP1 and Windows Server 2008 R2 SP1 for x64 systems (KB4055269)](http://download.windowsupdate.com/d/msdownload/update/software/secu/2018/01/ndp47-kb4054183-x64_a022ad5109b1208dff502d1be4477668b4fa258d.exe)\r\n1. Follow the installation prompts, and then restart your computer if your are prompted to do this.\r\n\r\n### Workaround 2 - Uninstall the .NET Framework 4.7.1, Install .NET Framework 4.7\r\n\r\nRoll back to the previous version of .NET Framework. To do this, follow these steps:\r\n\r\n1. In Control Panel, open the Programs and Features item.\r\n1. In the Uninstall or change a program list, locate and then select Microsoft .NET Framework 4.7.1, and then select Uninstall/Change.\r\n![image](https://user-images.githubusercontent.com/2608468/34859496-5a3f11e6-f70b-11e7-82cb-5a12a4f9a633.png)\r\n1. Select Remove .NET Framework 4.7.1 from this computer, and then select Next.\r\n![image](https://user-images.githubusercontent.com/2608468/34859585-f5d50f3e-f70b-11e7-8fb9-a75e35c08767.png)\r\n1. Select Continue to confirm uninstallation.\r\n1. Select Finish after the uninstallation is finished.\r\n![image](https://user-images.githubusercontent.com/2608468/34859595-07877226-f70c-11e7-9d66-908a37ef0ded.png)\r\n1. Restart your computer if you are prompted to do this.\r\n1. Install [.NET Framework 4.7](https://www.microsoft.com/en-us/download/details.aspx?id=55170).\r\n\r\n## Issue Reports\r\n\r\n* [KB4074906 (Microsoft)](https://support.microsoft.com/en-us/help/4074906)\r\n* [0xd4d/dnSpy #692](https://github.com/0xd4d/dnSpy/issues/692)\r\n* [Wox-launcher/Wox #1823](https://github.com/Wox-launcher/Wox/issues/1823)\r\n"},{"Id":"7076404590","Type":"IssuesEvent","CreatedAt":"2018-01-09T18:02:02","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/52","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0764: Denial of Service when parsing XML documents\" (#52) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0764\r\n## Denial of Service when parsing XML documents\r\n### Executive Summary \r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 1.1, and 2.0. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a Denial of Service vulnerability in all public versions of .NET core due to improper processing of XML documents. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET application. A remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET core handles XML document processing.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.9, 1.1.6 and 2.0.5. Developers are advised to update their .NET Core SDK to version 2.1.4 or 1.1.7. These runtime and SDK versions will also address CVE-2018-0786,  https://github.com/dotnet/announcements/issues/51\r\n\r\n### Discussion\r\n\r\nPlease use **** TODO: FILL IN ISSUE LINK *** for discussion of this advisory.\r\n\r\n## Affected Software\r\nThe vulnerability affects any Microsoft .NET Core project if it uses any of affected runtime versions listed below\r\n\r\n Runtime Version | Fixed runtime version\r\n----------------| -------------------------\r\n1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5, 1.0.7, 1.0.8 | 1.0.9\r\n1.1.0, 1.1.1, 1.1.2, 1.1.4, 1.1.5 | 1.1.6\r\n2.0.0, 2.0.3, 2.0.4 |  2.0.5\r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\n\r\nTo check the runtimes installed on a computer you must view the contents of the runtime folder. By default these are\r\n\r\n| Operating System          | Location          |\r\n|---------------------------|-------------------|\r\n| Windows | C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\ |\r\n| macOS | /usr/local/share/dotnet/shared/Microsoft.NETCore.App/    |\r\n| Supported Linux platforms | /usr/share/dotnet/shared/Microsoft.NETCore.App/   |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you do not have a directory for 1.0.9, 1.1.6 or 2.0.2 then any applications targeting .NET Core will be vulnerable. Downloads for all supported platforms can be acquired from https://www.microsoft.com/net/download/\r\n\r\n#### How do I fix my affected application?\r\nApplications can be fixed by installing the latest runtimes or SDKs. Typically application servers only install a runtime package, developer machines install SDKs. Installers can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). Runtime version 1.1.6 will also install runtime version 1.0.9.\r\n\r\nIf you have built a [self-contained application](https://docs.microsoft.com/en-us/dotnet/core/deploying/#self-contained-deployments-scd) you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\r\n### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the [application.runtime.config](https://github.com/dotnet/cli/blob/ede74b6be1406ba0c086b6d5fc1a5d4eacff1f01/Documentation/specs/runtime-configuration-file.md#appnameruntimeconfigjson) file for that application and editing the framework version and setting `rollForward` to `false`. This should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nNote that this file is optional, you may need to create it for each application alongside the executable.\r\n\r\n### External Links\r\n\r\n[CVE-2018-0764](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0764)\r\n\r\n### Revisions\r\n\r\nV1.0 (Jan 9, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-01-09_\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  "},{"Id":"7076401836","Type":"IssuesEvent","CreatedAt":"2018-01-09T18:01:26","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/51","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0786: Security Feature Bypass in X509 Certificate Validation\" (#51) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0786\r\n## Security Feature Bypass in X509 Certificate Validation\r\n### Executive Summary \r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 1.1, and 2.0. This advisory also provides guidance on what developers can do to update their applications correctly. \r\n\r\nMicrosoft is aware of a security vulnerability in the public versions of .NET Core where an attacker could present a certificate that is marked invalid for a specific use, but a component uses it for that purpose. This action disregards the Enhanced Key Usage tagging.\r\n\r\nThe security update addresses the vulnerability by ensuring that .NET Core components completely validate certificates.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.9, 1.1.6 and 2.0.5. Developers are advised to update their .NET Core SDK to version 2.1.4 or 1.1.7. These runtime and SDK versions will also address CVE-2018-0764 ***** TODO: ADD LINK TO OTHER ISSUE *****\r\n\r\n### Discussion\r\n\r\nPlease use **** TODO: FILL IN ISSUE LINK *** for discussion of this advisory.\r\n\r\n## Affected Software\r\nThe vulnerability affects any Microsoft .NET Core project if it uses any of affected runtime versions listed below\r\n\r\n Runtime Version | Fixed runtime version\r\n----------------| -------------------------\r\n1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5, 1.0.7, 1.0.8 | 1.0.9\r\n1.1.0, 1.1.1, 1.1.2, 1.1.4, 1.1.5 | 1.1.6\r\n2.0.0, 2.0.3, 2.0.4 |  2.0.5\r\n\r\nThis vulnerability also affects any .NET native applications using the following NuGet packages.\r\n\r\nNuGet Packages | Fixed NuGet Packages\r\n-- | --\r\nMicrosoft.NETCore.UniversalWindowsPlatform 5.2.* (contains   .NET native 1.4.*) | Microsoft.NETCore.UniversalWindowsPlatform 5.2.4\r\nMicrosoft.NETCore.UniversalWindowsPlatform 5.3.* (contains   .NET native 1.6.*) | Microsoft.NETCore.UniversalWindowsPlatform 5.3.5\r\nMicrosoft.NETCore.UniversalWindowsPlatform 5.4.* (contains   .NET native 1.7.*) | Microsoft.NETCore.UniversalWindowsPlatform 5.4.2\r\nMicrosoft.NETCore.UniversalWindowsPlatform 6.0.* (contains   .NET native 2.0.*) | Microsoft.NETCore.UniversalWindowsPlatform 6.0.6\r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\n\r\nTo check the runtimes installed on a computer you must view the contents of the runtime folder. By default these are\r\n\r\n| Operating System          | Location          |\r\n|---------------------------|-------------------|\r\n| Windows | C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\ |\r\n| macOS | /usr/local/share/dotnet/shared/Microsoft.NETCore.App/    |\r\n| Supported Linux platforms | /usr/share/dotnet/shared/Microsoft.NETCore.App/   |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you do not have a directory for 1.0.9, 1.1.6 or 2.0.2 then any applications targeting .NET Core will be vulnerable. Downloads for all supported platforms can be acquired from https://www.microsoft.com/net/download/\r\n\r\n#### How do I fix my affected application?\r\nApplications can be fixed by installing the latest runtimes or SDKs. Typically application servers only install a runtime package, developer machines install SDKs. Installers can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). Runtime version 1.1.6 will also install runtime version 1.0.9.\r\n\r\nIf you have built a [self-contained application](https://docs.microsoft.com/en-us/dotnet/core/deploying/#self-contained-deployments-scd) you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n#### How do I fix my .NET native application? \r\n\r\n.NET native requires that applications be re-processed by the .NET native compiler to incorporate the fixes and the re-processed version needs to be distributed via the Windows Store.\r\n\r\nWe recommend that you update your .NET UWP apps to use the latest minor version of the `Microsoft.NETCore.UniversalWindowsPlatform` NuGet package so that you can build and verify that your app works as expected when updated. If you are using version 6.0.x, you should update to 6.0.6 and if you’re using 5.2.x, you can update to 5.2.4. Of course, you can update to a higher major version too, but we are distributing security updates for all impacted major versions (currently 5.2.x, 5.3.x, 5.4.x and 6.0.x). Additionally, whether or not you update your NuGet packages, all applications submitted to the store after today will be automatically fixed during submission processing.\r\n\r\nIf you do not update your app in the Store, it will automatically be reprocessed and distributed via an application update in the next few weeks. Users who have automatic app updates enabled will get the fix with no intervention on your or their parts. Because updated apps are distributed through the Windows Store, sideloaded apps will not be automatically updated. We recommend that developers who distribute sideloaded apps update the affected NuGet packages, rebuild their applications and distribute them to their users.\r\n\r\nMicrosoft is committed to keeping UWP applications secure and to supporting developers. If you have feedback on the fix distribution process, please let us know at dotnetnative@microsoft.com. \r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\r\n### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the [application.runtime.config](https://github.com/dotnet/cli/blob/ede74b6be1406ba0c086b6d5fc1a5d4eacff1f01/Documentation/specs/runtime-configuration-file.md#appnameruntimeconfigjson) file for that application and editing the framework version and setting `rollForward` to `false`. This should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nNote that this file is optional, you may need to create it for each application alongside the executable.\r\n\r\n### External Links\r\n\r\n[CVE-2018-0786](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0786)\r\n\r\n### Revisions\r\n\r\nV1.0 (Jan 9, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-01-09_"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7214784416","Type":"PullRequestEvent","CreatedAt":"2018-02-08T04:25:10","Actor":"github-john-doe","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16273","RelatedDescription":"Opened pull request \"Agruments -> Arguments\" (#16273) at dotnet/coreclr","RelatedBody":""},{"Id":"7214706953","Type":"PullRequestEvent","CreatedAt":"2018-02-08T03:54:16","Actor":"noahfalk","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16271","RelatedDescription":"Opened pull request \"Updating runtime version for tests\" (#16271) at dotnet/coreclr","RelatedBody":"Change 93ec62347a4e97b920513296eefb27bdacbecfe9 removed Span.NonPortableCast from System.Private.CoreLib.dll requiring tests to use an updated version of System.Memory.dll that no longer refers to it.\r\n\r\nThis should fix the recent break that occured in JitBench CI. I'm hoping we just got unlucky that CoreCLR took a breaking change last week just as JitBench work finished up, but we'll see how often it continues to occur. Thankfully after changing the perf CI run to record logs in the failure case diagnosing the version mismatch was fairly straightforward.\r\n\r\nPTAL @jorive "},{"Id":"7214376117","Type":"IssuesEvent","CreatedAt":"2018-02-08T01:55:13","Actor":"tannergooding","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/16270","RelatedDescription":"Opened issue \"Implement the HWIntrinsics for SSE4.1/SSE4.2\" (#16270) at dotnet/coreclr","RelatedBody":""},{"Id":"7214331200","Type":"PullRequestEvent","CreatedAt":"2018-02-08T01:40:05","Actor":"dotnet-maestro-bot","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16269","RelatedDescription":"Opened pull request \"Update CoreClr to preview2-26207-13 (master)\" (#16269) at dotnet/coreclr","RelatedBody":"/cc @dotnet/coreclr-auto-update-notify"},{"Id":"7214309849","Type":"PullRequestEvent","CreatedAt":"2018-02-08T01:32:43","Actor":"CarolEidt","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16268","RelatedDescription":"Opened pull request \"Check mismatched types for SIMD copy\" (#16268) at dotnet/coreclr","RelatedBody":"If we have a block copy from an enregisterable struct (today, that's just SIMD) to a different type target, it needs to be marked as address-taken, because the destination type is what's used for the copy, and all non-enregisterable destination types expect their source in memory.\r\n\r\nFix #16254"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7214883184","Type":"PullRequestEvent","CreatedAt":"2018-02-08T05:06:34","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8560","RelatedDescription":"Merged pull request \"Merge release/2.1.1xx into release/2.1.3xx\" (#8560) at dotnet/cli","RelatedBody":""},{"Id":"7214850609","Type":"PullRequestEvent","CreatedAt":"2018-02-08T04:53:01","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8515","RelatedDescription":"Merged pull request \"Update CoreSetup, CoreSetup, CoreSetup, Roslyn to preview2-26131-06, preview2-26131-06, preview2-26131-06, beta1-62608-01, respectively (master)\" (#8515) at dotnet/cli","RelatedBody":"/cc @dotnet/dotnet-cli"},{"Id":"7214847643","Type":"IssuesEvent","CreatedAt":"2018-02-08T04:51:45","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/8532","RelatedDescription":"Closed issue \"NuGet tag convention for dotnet cli tools\" (#8532) at dotnet/cli","RelatedBody":"Hi, first I wanted to say nice job on the extensibility model for the dotnet cli. Being able to install and use small focused tools for project management is awesome. I apologize if this is not the right place for this, but I would like to open up a discussion on defining a standard NuGet tag for dotnet cli tools.\r\n\r\nIn the JavaScript world, it is common for tools to use a common tag that the community can use when publishing plugins to npm. For example, [Karma](https://karma-runner.github.io/2.0/index.html) plugins use the tag [karma-plugin](https://www.npmjs.com/browse/keyword/karma-plugin) and gulp plugins use the tag [gulp-plugin](https://www.npmjs.com/browse/keyword/gulp-plugin). This makes it easy for people to find existing tools to their problems.\r\n\r\nThere is a [repository that lists many dotnet cli tools](https://github.com/natemcmaster/dotnet-tools), but I imagine it will eventually become out of date because that type of work can become tedious. When looking at the NuGet pages for many of those tools, their isn't much commonality in the tags that were used. [NuGet supports browsing by tag](https://www.nuget.org/packages?q=Tags%3A%22dotnet%22), so I think this would be very useful.\r\n\r\nIf the dotnet team and the community can come to an agreement on a tag to use for tools, I think it would be nice to have it mentioned in the [.NET Core CLI tools extensibility model documentation](https://docs.microsoft.com/en-us/dotnet/core/tools/extensibility) so others that are looking to build a new tool can see what tag(s) to use for visibility. If this is something others are interested, then I would like to suggest the tag `dotnet-tool`, but I would like to hear what others think.\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"7214641966","Type":"PullRequestEvent","CreatedAt":"2018-02-08T03:29:15","Actor":"AndyGerlicher","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8565","RelatedDescription":"Opened pull request \"MSBuild 15.6.80\" (#8565) at dotnet/cli","RelatedBody":"Shiproom approved. Will complete the PR in the morning:\r\nhttps://devdiv.visualstudio.com/DefaultCollection/DevDiv/_git/VS/pullrequest/105518\r\n\r\nContains:\r\nhttps://github.com/Microsoft/msbuild/pull/2969 - Drop preview tag for 15.6\r\nhttps://github.com/Microsoft/msbuild/pull/2959 - Localization hand-back\r\nhttps://github.com/Microsoft/msbuild/pull/2964 - Build hangs when SDK not found\r\n"},{"Id":"7214165094","Type":"IssuesEvent","CreatedAt":"2018-02-08T00:45:50","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/8550","RelatedDescription":"Closed issue \"--force, dotnet install tool -g with override existing command\" (#8550) at dotnet/cli","RelatedBody":"`--force` should override existing package regardless the version\r\n\r\n(need discuss) `--force` should uninstall existing package with the same command name and install new package regardless the **package id**\r\n\r\nexample:\r\ndotnet install tool -g normal.vim\r\ndotnet install tool -g --force bob.vim\r\n\r\nthe result will be normal.vim is uninstalled and bob.vim installed. Type `vim` will invoke Bob's vim"},{"Id":"7214158243","Type":"IssuesEvent","CreatedAt":"2018-02-08T00:43:38","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8564","RelatedDescription":"Opened issue \"update, for dotnet tool\" (#8564) at dotnet/cli","RelatedBody":"Check the packageId is the same, check version number is increasing\r\n\r\ndo an uninstall the old and install the new tool in order to make sure shims are consistent."},{"Id":"7214122137","Type":"IssuesEvent","CreatedAt":"2018-02-08T00:32:02","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/8340","RelatedDescription":"Closed issue \"dotnet publish doesn't copy references with privateassets=all to publish directory\" (#8340) at dotnet/cli","RelatedBody":"Repro steps:\r\n\r\n1) Create a new netcoreapp or netstandard library and add net46 as framework as well\r\n2) add a package dependency like newtonsoft.json and set privateassets=all\r\n3) run dotnet publish --self-contained for both frameworks\r\n\r\nnewtonsoft.json is copied to publish dir for net46 while it is not copied to publish dir for netstandard/netcoreapp frameworks.\r\n\r\nCC: @livarcocc @rrelyea \r\n  "},{"Id":"7214108935","Type":"IssuesEvent","CreatedAt":"2018-02-08T00:27:41","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/8479","RelatedDescription":"Closed issue \"Dotnet install doesn't fail when installing two tools with different package ids but the same Command Name\" (#8479) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\nCreate 2 projects to be used with different names\r\n```\r\ndotnet new console -n proj1\r\ndotnet new console -n proj2\r\n```\r\nEdit the project file for each and add the following\r\n```\r\n<PackAsTool>True</PackAsTool>\r\n<ToolCommandName>mytool1</ToolCommandName>\r\n```\r\nShould be the same command name for each.\r\nRun dotnet pack in each project file folder\r\nCopy the package to your local NuGet feed (or run the next commands with --source tags)\r\nAttempt to install both\r\n```\r\ndotnet install tool -g proj1\r\ndotnet install tool -g proj2\r\n```\r\n\r\n## Expected  behavior\r\nThe second install should fail as it has the same tool name as proj1.\r\n\r\n## Actual behavior\r\nBoth install.\r\n![image](https://user-images.githubusercontent.com/10537189/35416084-bf348000-01dc-11e8-9660-eb1cd6539280.png)\r\n\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n.NET Command Line Tools (2.1.300-preview2-008017)\r\n\r\nProduct Information:\r\n Version:            2.1.300-preview2-008017\r\n Commit SHA-1 hash:  f4a0d2db0e\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.300-preview2-008017\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.1.0-preview2-26123-02\r\n  Build    : b64cb46124df1f7e64d7b7cde1034f693b270ceb\r\n\r\n\r\n"},{"Id":"7214096416","Type":"IssuesEvent","CreatedAt":"2018-02-08T00:23:41","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/8562","RelatedDescription":"Closed issue \"dotnet vstest: how to remotely debug of test runs in Docker?\" (#8562) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\nI need to remotely debug mstest unit-tests inside a Linux Docker container.\r\nI publish my mstest project, build and run a container with that output and then run [dotnet vstest](https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-vstest) in the container which I expect to debug from my Windows host in VS/VSCode. But it turned out to be not very easy, if not possible.\r\n\r\nPlease see full story in https://github.com/OmniSharp/omnisharp-vscode/issues/2015 (there I provided my full setup to debug in Docker). It seems that the problem is that VSCode cannot attach to an actual process executing tests. So step-by-step debugging doesn't work.\r\n\r\nInitially I thought it's a vsdbg or VSCode issue, but it seems to be more related to how `dotnet vstest` works.\r\n\r\nActually it'd nice to debug from VS as well but remote debugging of Docker in VS is just a riddle for me. So let's stick to VSCode.\r\n\r\n## Expected  behavior\r\nRun unit tests inside Docker and attach debugger, do step-by-step debugging.\r\n\r\n## Actual behavior\r\nTest run (via dotnet vstest) but debugger isn't attached.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"7213883097","Type":"IssuesEvent","CreatedAt":"2018-02-07T23:20:37","Actor":"evil-shrike","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8562","RelatedDescription":"Opened issue \"dotnet vstest: how to remotely debug of test runs in Docker?\" (#8562) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\nI need to remotely debug mstest unit-tests inside a Linux Docker container.\r\nI publish my mstest project, build and run a container with that output and then run [dotnet vstest](https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-vstest) in the container which I expect to debug from my Windows host in VS/VSCode. But it turned out to be not very easy, if not possible.\r\n\r\nPlease see full story in https://github.com/OmniSharp/omnisharp-vscode/issues/2015 (there I provided my full setup to debug in Docker). It seems that the problem is that VSCode cannot attach to an actual process executing tests. So step-by-step debugging doesn't work.\r\n\r\nInitially I thought it's a vsdbg or VSCode issue, but it seems to be more related to how `dotnet vstest` works.\r\n\r\nActually it'd nice to debug from VS as well but remote debugging of Docker in VS is just a riddle for me. So let's stick to VSCode.\r\n\r\n## Expected  behavior\r\nRun unit tests inside Docker and attach debugger, do step-by-step debugging.\r\n\r\n## Actual behavior\r\nTest run (via dotnet vstest) but debugger isn't attached.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7213878144","Type":"PullRequestEvent","CreatedAt":"2018-02-07T23:19:15","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/636","RelatedDescription":"Merged pull request \"Update BuildTools to preview2-02507-02 (master)\" (#636) at dotnet/standard","RelatedBody":""},{"Id":"7213870359","Type":"IssuesEvent","CreatedAt":"2018-02-07T23:17:10","Actor":"davidfowl","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/68","RelatedDescription":"Closed issue \"Change link in the faq.md about the \"developer analogy\" from David Fowler\" (#68) at dotnet/standard","RelatedBody":"> I still don't get it. Can you provide an analogy that makes sense for a dev?\n> David Fowler provided a developer analogy that explains .NET Standard in terms of interfaces and classes.\n\nRefer to this page: https://github.com/davidfowl/NetStandard, instead of that gist ?\n"},{"Id":"7199153839","Type":"IssuesEvent","CreatedAt":"2018-02-05T15:09:33","Actor":"Sergio0694","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/641","RelatedDescription":"Opened issue \"API to check memory usage on UWP (the Process class is not supported)\" (#641) at dotnet/standard","RelatedBody":"Hello, this is related to #327 and you can see my original question on StackOverflow [here](https://stackoverflow.com/questions/48622947/how-to-get-process-memory-from-both-net-standard-2-0-and-uwp/48623215?noredirect=1#comment84245854_48623215).\r\n\r\nBasically, the issue is that using:\r\n\r\n   ```var memory = System.Diagnostics.Process.GetCurrentProcess().PrivateMemorySize64;```\r\n\r\nCrashes on UWP. In DEBUG mode, I get a `PlatformNotSupportedException`, while in RELEASE mode (possibly due to the .NET Native compiler) I get a `TypeLoadException` followed by a series of low-level exceptions, and apparently I can't catch any of these exceptions.\r\n\r\nEven placing the above line into a general `try/catch` block doesn't work, the app just crashes anyways.\r\n\r\nI understand the `Process` class is locked on UWP for security reasons, but there should be an API to at least be able to check the current memory usage (and CPU usage). Some \"read only\" APIs from the `Process` class that should be allowed on UWP too I mean.\r\n\r\nFor example, the .NET Standard `System.Diagnostics.Process.GetCurrentProcess().PrivateMemorySize64` call should have an equivalent API that gets mapped to `Windows.System.MemoryManager` APIs on UWP.\r\n\r\nIs there a workaround, and/or is this something planned in the future?\r\nThanks!\r\n"},{"Id":"7190412954","Type":"IssuesEvent","CreatedAt":"2018-02-02T17:09:21","Actor":"colgreen","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/640","RelatedDescription":"Opened issue \"Support for XDocument.LoadAsync()\" (#640) at dotnet/standard","RelatedBody":"XDocument.LoadAsync() is available in dotnet core 2.0 but not .NET Standard 2.0. We have encountered a few scenarios recently where this would have been useful.\r\n\r\nThe the workarounds we have are:\r\n\r\n1) Do a synchronous Load() and have a thread blocked waiting for IO.\r\n\r\n2) An asynchronous load into memory (e.g. sourceStream.CopyToAsnc(tempMemoryStream) and then do an synchronous load from the MemoryStream (which of course has no IO), however this requires allocation of large arrays, associated garbage collection, etc. It will also be a poor choice for very large XML documents.\r\n\r\n"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7214460137","Type":"IssuesEvent","CreatedAt":"2018-02-08T02:24:04","Actor":"divega","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/23907","RelatedDescription":"Closed issue \"Break out System.Data.DataSet and DataTable from System.Data.Common\" (#23907) at dotnet/corefx","RelatedBody":"Most projects using System.Data.SqlClient have no need or use of DataSet or DataTable classes. It is to them about half a megabyte of junk they do not need and will never try to use, but it gets loaded because all this stuff references it. Most projects are better off using DataReader directly or EntityFramework which uses DataReader.\r\n\r\nThe classes along with whatever depends on them should be broken out into another dll such as System.Data.DataSet.\r\n\r\nSqlDataAdapter would also need to get broken out into its own dll or it defeats the purpose.\r\n\r\nThere is no point arguing this will break backwards compatibility. Backwards compatibility of System.Data.Common is already broken. Better to fix this soon before too much depends on it."},{"Id":"7214419275","Type":"IssuesEvent","CreatedAt":"2018-02-08T02:09:58","Actor":"divega","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/23597","RelatedDescription":"Closed issue \"[ADO.NET] Support changeUser for DbConnection\" (#23597) at dotnet/corefx","RelatedBody":"https://github.com/dotnet/corefx/blob/master/src/System.Data.Common/src/System/Data/IDbConnection.cs\r\n\r\nSince we have supported change database, why not add change user support? This will be useful when develop an EF Core provider in change into master connection scenario.\r\n\r\nThe php has already supoorted change user in mysqli: http://php.net/manual/en/mysqli.change-user.php"},{"Id":"7214412933","Type":"PullRequestEvent","CreatedAt":"2018-02-08T02:07:45","Actor":"saurabh500","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/26951","RelatedDescription":"Opened pull request \"Provide GetSchema override for DbConnectionClosed\" (#26951) at dotnet/corefx","RelatedBody":"GetSchema on a closed Sql Connection results in NRE. Providing an override in DbConnectionClosed to handle this scenario. \r\n\r\nFixes https://github.com/dotnet/corefx/issues/22882"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7214273581","Type":"PullRequestEvent","CreatedAt":"2018-02-08T01:21:00","Actor":"333fred","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/24695","RelatedDescription":"Merged pull request \"Merges/features/compiler to features/dataflow 20180207 1356\" (#24695) at dotnet/roslyn","RelatedBody":""}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7214874570","Type":"PullRequestEvent","CreatedAt":"2018-02-08T05:02:52","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5362","RelatedDescription":"Merged pull request \"Update dependencies\" (#5362) at dotnet/corert","RelatedBody":""},{"Id":"7214644662","Type":"PullRequestEvent","CreatedAt":"2018-02-08T03:30:16","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5362","RelatedDescription":"Opened pull request \"Update dependencies\" (#5362) at dotnet/corert","RelatedBody":""},{"Id":"7213834802","Type":"IssuesEvent","CreatedAt":"2018-02-07T23:07:59","Actor":"Braini01","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/5361","RelatedDescription":"Opened issue \"How to fix FileLoadErrorGeneric warnings?\" (#5361) at dotnet/corert","RelatedBody":"I want to make a .NET 4.7 console app a windows native exe and I was already successful in doing so with certain projects by adding the nuget package Microsoft.DotNet.ILCompiler and then calling _dotnet publish -r win-x64 -f net47 -c Release xxx.csproj_. But now I get a warning message like this:\r\n\r\n> EXEC : warning : Method '[MyLib]MyLib.MyType1'<System.__Canon>.MyMethod(string,bool)' will always throw because: [TEMPORARY EXCEPTION MESSAGE] FileLoadErrorGeneric: System.Private.Xml [C:\\...\\MyNet47ConsoleApp.csproj]\r\n\r\nI solved some of these errors before by just adding a reference to the missing assembly in the csproj file. But in this specific case _System.Private.Xml_ is missing, which afaik is not part of the .Net Framework 4.7 and I am not sure how I reference it exactly."},{"Id":"7213716666","Type":"PullRequestEvent","CreatedAt":"2018-02-07T22:39:57","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5360","RelatedDescription":"Merged pull request \"Merge changes from TFS\" (#5360) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"7213607032","Type":"PullRequestEvent","CreatedAt":"2018-02-07T22:15:35","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5360","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#5360) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"7212669417","Type":"PullRequestEvent","CreatedAt":"2018-02-07T19:04:09","Actor":"am11","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5359","RelatedDescription":"Opened pull request \"Pass /LIBTOOL to linker\" (#5359) at dotnet/corert","RelatedBody":"Package [Microsoft.DotNet.ILCompiler v1.0.0-alpha-26207-01](https://dotnet.myget.org/feed/dotnet-core/package/nuget/Microsoft.DotNet.ILCompiler/1.0.0-alpha-26207-01)\r\nwas failing to compile WebAPI app when using non-developer command\r\nprompt on Windows, because Kernel32.lib and friends weren't get located.\r\n\r\nCapturing those from vsvarsall environment in `findvsvarsall.bat` script\r\nand passing it to link.exe fixes the error and compiles WebAPI app\r\nsuccessfully."},{"Id":"7212051440","Type":"IssuesEvent","CreatedAt":"2018-02-07T17:04:45","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/5093","RelatedDescription":"Closed issue \"[Cross] CMake Toolchain compile flags loop\" (#5093) at dotnet/corert","RelatedBody":"Just not to forget [discussion](https://github.com/dotnet/corert/pull/5091#discussion_r156154156)"},{"Id":"7212051303","Type":"PullRequestEvent","CreatedAt":"2018-02-07T17:04:44","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5356","RelatedDescription":"Merged pull request \"Fix cmake toolchain compile flags loop\" (#5356) at dotnet/corert","RelatedBody":"\t- fix https://github.com/dotnet/corert/issues/5093\r\n"},{"Id":"7212044279","Type":"PullRequestEvent","CreatedAt":"2018-02-07T17:03:28","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5357","RelatedDescription":"Merged pull request \"[ObjWriter/Linux] Fix build breaks\" (#5357) at dotnet/corert","RelatedBody":"\t- Сompatibility checks for cross compilation\r\n\t- Removed \"flags duplicates\" workaround\r\n\r\n@dotnet/arm32-corert-contrib please review"},{"Id":"7211799207","Type":"PullRequestEvent","CreatedAt":"2018-02-07T16:22:30","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5358","RelatedDescription":"Merged pull request \"Merge changes from TFS\" (#5358) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"7211769262","Type":"PullRequestEvent","CreatedAt":"2018-02-07T16:17:38","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5358","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#5358) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7213295375","Type":"PullRequestEvent","CreatedAt":"2018-02-07T21:10:14","Actor":"natidea","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1939","RelatedDescription":"Opened pull request \"Add .NET Core 2.1 to list of supported target frameworks\" (#1939) at dotnet/sdk","RelatedBody":"This value is used to configure Visual Studio's Application Properties pages.\r\n\r\n**Customer scenario**\r\n\r\nCustomers using Application properties pages with .NET Core 2.1 are not able to select the runtime from the provided dropdown\r\n\r\n**Bugs this fixes:** \r\n\r\nFixes https://github.com/dotnet/project-system/issues/3183\r\n\r\n**Workarounds, if any**\r\n\r\nChange by editing csproj file\r\n\r\n**Risk**\r\n\r\nLow\r\n\r\n**Performance impact**\r\n\r\nLow\r\n\r\n**Is this a regression from a previous update?**\r\n\r\nNo\r\n\r\n**Root cause analysis:**\r\n\r\nNeed to update this list when moving to a new version of .NET Core\r\n\r\n**How was the bug found?**\r\n\r\nPartner testing\r\n\r\n/cc @livarcocc \r\n"},{"Id":"7212544894","Type":"PullRequestEvent","CreatedAt":"2018-02-07T18:39:28","Actor":"johnbeisner","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/1934","RelatedDescription":"Closed pull request \"Merge release/2.1 to master\" (#1934) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.1 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1-to-master-20180206-080050\ngit reset --hard upstream/master\ngit merge upstream/release/2.1\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1-to-master-20180206-080050 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7212544353","Type":"PullRequestEvent","CreatedAt":"2018-02-07T18:39:21","Actor":"johnbeisner","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/1932","RelatedDescription":"Closed pull request \"Merge release/2.1 to master\" (#1932) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.1 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1-to-master-20180205-080049\ngit reset --hard upstream/master\ngit merge upstream/release/2.1\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1-to-master-20180205-080049 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7212543973","Type":"PullRequestEvent","CreatedAt":"2018-02-07T18:39:17","Actor":"johnbeisner","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/1924","RelatedDescription":"Closed pull request \"Merge release/2.1 to master\" (#1924) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.1 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1-to-master-20180202-080048\ngit reset --hard upstream/master\ngit merge upstream/release/2.1\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1-to-master-20180202-080048 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7212543620","Type":"PullRequestEvent","CreatedAt":"2018-02-07T18:39:13","Actor":"johnbeisner","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/1922","RelatedDescription":"Closed pull request \"Merge release/2.1 to master\" (#1922) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.1 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1-to-master-20180201-080054\ngit reset --hard upstream/master\ngit merge upstream/release/2.1\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1-to-master-20180201-080054 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7212543110","Type":"PullRequestEvent","CreatedAt":"2018-02-07T18:39:07","Actor":"johnbeisner","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/1919","RelatedDescription":"Closed pull request \"Merge release/2.1 to master\" (#1919) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.1 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1-to-master-20180131-080048\ngit reset --hard upstream/master\ngit merge upstream/release/2.1\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1-to-master-20180131-080048 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7212538040","Type":"PullRequestEvent","CreatedAt":"2018-02-07T18:38:05","Actor":"johnbeisner","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1937","RelatedDescription":"Merged pull request \"Merge release/2.0.0 to release/2.1\" (#1937) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.0.0 into release/2.1.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.0.0-to-release/2.1-20180207-080056\ngit reset --hard upstream/release/2.1\ngit merge upstream/release/2.0.0\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.0.0-to-release/2.1-20180207-080056 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7212535502","Type":"PullRequestEvent","CreatedAt":"2018-02-07T18:37:34","Actor":"johnbeisner","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/1923","RelatedDescription":"Closed pull request \"Merge release/2.0.0 to release/2.1\" (#1923) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.0.0 into release/2.1.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.0.0-to-release/2.1-20180202-080047\ngit reset --hard upstream/release/2.1\ngit merge upstream/release/2.0.0\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.0.0-to-release/2.1-20180202-080047 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7212534314","Type":"PullRequestEvent","CreatedAt":"2018-02-07T18:37:20","Actor":"johnbeisner","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/1918","RelatedDescription":"Closed pull request \"Merge release/2.0.0 to release/2.1\" (#1918) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.0.0 into release/2.1.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.0.0-to-release/2.1-20180131-080046\ngit reset --hard upstream/release/2.1\ngit merge upstream/release/2.0.0\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.0.0-to-release/2.1-20180131-080046 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7212533370","Type":"PullRequestEvent","CreatedAt":"2018-02-07T18:37:08","Actor":"johnbeisner","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/1921","RelatedDescription":"Closed pull request \"Merge release/2.0.0 to release/2.1\" (#1921) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.0.0 into release/2.1.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.0.0-to-release/2.1-20180201-080053\ngit reset --hard upstream/release/2.1\ngit merge upstream/release/2.0.0\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.0.0-to-release/2.1-20180201-080053 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7212532193","Type":"PullRequestEvent","CreatedAt":"2018-02-07T18:36:53","Actor":"johnbeisner","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/1931","RelatedDescription":"Closed pull request \"Merge release/2.0.0 to release/2.1\" (#1931) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.0.0 into release/2.1.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.0.0-to-release/2.1-20180205-080048\ngit reset --hard upstream/release/2.1\ngit merge upstream/release/2.0.0\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.0.0-to-release/2.1-20180205-080048 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7212530033","Type":"PullRequestEvent","CreatedAt":"2018-02-07T18:36:26","Actor":"johnbeisner","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/1933","RelatedDescription":"Closed pull request \"Merge release/2.0.0 to release/2.1\" (#1933) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.0.0 into release/2.1.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.0.0-to-release/2.1-20180206-080049\ngit reset --hard upstream/release/2.1\ngit merge upstream/release/2.0.0\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.0.0-to-release/2.1-20180206-080049 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7209274715","Type":"PullRequestEvent","CreatedAt":"2018-02-07T08:00:59","Actor":"dotnet-bot","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1938","RelatedDescription":"Opened pull request \"Merge release/2.1 to master\" (#1938) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.1 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1-to-master-20180207-080058\ngit reset --hard upstream/master\ngit merge upstream/release/2.1\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1-to-master-20180207-080058 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"961382608914518016","CreatedAt":"2018-02-07T23:34:10+00:00","UserScreenname":"dotnet","Text":"Join our Jeff Fritz and ASPInsider Brendan Enrick for a LIVE CODING stream talking about how to write better unit t… https://t.co/dMJ5QcKEcp","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":8,"RawContent":null},{"Id":"960930092372381696","CreatedAt":"2018-02-06T17:36:01+00:00","UserScreenname":"dotnet","Text":"Register now for @DEVintersection for a workshop package and go home with an awesome piece of hardware Xbox One X,… https://t.co/PqoYqNI5Ga","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod2</a>","RetweetCount":23,"FavoriteCount":13,"RawContent":null},{"Id":"960633633370292224","CreatedAt":"2018-02-05T21:58:00+00:00","UserScreenname":"dotnet","Text":"Announcing .NET Framework 4.7.2 Early Access build 3052! https://t.co/8lGEqT6FqM","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":99,"FavoriteCount":80,"RawContent":null},{"Id":"959498964503425026","CreatedAt":"2018-02-02T18:49:14+00:00","UserScreenname":"dotnet","Text":"https://t.co/iOiV9qNspl Core 2.1 roadmap https://t.co/1QFI97S11f","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":241,"FavoriteCount":187,"RawContent":null},{"Id":"959498759733301248","CreatedAt":"2018-02-02T18:48:25+00:00","UserScreenname":"dotnet","Text":"Entity Framework Core 2.1 Roadmap https://t.co/jyrJwFiQzJ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":110,"FavoriteCount":75,"RawContent":null},{"Id":"959492955391143939","CreatedAt":"2018-02-02T18:25:21+00:00","UserScreenname":"dotnet","Text":".NET Core 2.1 Roadmap https://t.co/v7JFqyVWWb","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":215,"FavoriteCount":169,"RawContent":null},{"Id":"959125554988371969","CreatedAt":"2018-02-01T18:05:26+00:00","UserScreenname":"dotnet","Text":"#TBT: You've probably used LINQ for years, but have you ever wondered about the underlying pieces and how they fit… https://t.co/tuqqdA5nUG","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":81,"FavoriteCount":27,"RawContent":null},{"Id":"956524881096708096","CreatedAt":"2018-01-25T13:51:17+00:00","UserScreenname":"dotnet","Text":"Jeff and Maira - improving https://t.co/QxdK7Ocjtg LIVE at 10am ET / 15:00 UTC.  Check it out! https://t.co/jlSeKESN3g","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":14,"FavoriteCount":8,"RawContent":null},{"Id":"955790963024257024","CreatedAt":"2018-01-23T13:14:57+00:00","UserScreenname":"dotnet","Text":"Check out @csharpfritz and @condrong at 10am ET, 15:00 UTC talking about new @AspNet Core features and benefits for… https://t.co/BLXAg7rubK","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":12,"FavoriteCount":4,"RawContent":null}]}},"RunOn":"2018-02-08T05:30:21.7582938Z","RunDurationInMilliseconds":8655}