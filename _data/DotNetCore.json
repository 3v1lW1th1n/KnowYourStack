{"Data":{"Blog":{"FeedItems":[{"Title":".NET Core May 2018 Update","PublishedOn":"2018-05-08T22:31:30+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core May 2018 Update. This update includes .NET Core 2.1.200 SDK and ASP.NET Core 2.0.8. Security Microsoft is releasing this security advisory to provide information...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/08/net-core-may-2018-update/","RawContent":null},{"Title":".NET Framework May 2018 Security and Quality Rollup","PublishedOn":"2018-05-08T21:18:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the May 2018 Security and Quality Rollup. Security CVE-2018-1039 – Windows Security Feature Bypass Vulnerability A security feature bypass vulnerability exists in Windows which...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/08/net-framework-may-2018-security-and-quality-rollup/","RawContent":null},{"Title":"F# language and tools update for Visual Studio 2017 version 15.7","PublishedOn":"2018-05-08T18:22:06+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"We’re excited to share updates about changes to F# and F# tools which shipped with the Visual Studio 2017 version 15.7 release. Let’s dive in! Type Providers now support .NET Standard For those who...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/08/f-language-and-tools-update-for-visual-studio-2017-version-15-7/","RawContent":null},{"Title":"Introducing ML.NET: Cross-platform, Proven and Open Source Machine Learning Framework","PublishedOn":"2018-05-08T00:41:28+00:00","CommentsCount":19,"FacebookCount":0,"Summary":"Today at //Build 2018, we are excited to announce the preview of ML.NET, a cross-platform, open source machine learning framework. ML.NET will allow .NET developers to develop their own models and...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/07/introducing-ml-net-cross-platform-proven-and-open-source-machine-learning-framework/","RawContent":null},{"Title":"Announcing Entity Framework Core 2.1 RC 1","PublishedOn":"2018-05-07T18:00:05+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Today, we are excited to announce that the first release candidate of EF Core 2.1 is available, alongside .NET Core 2.1 RC 1 and ASP.NET Core 2.1 RC 1, for broad testing, and now also for production...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/07/announcing-entity-framework-core-2-1-rc-1/","RawContent":null},{"Title":".NET Core 3 and Support for Windows Desktop Applications","PublishedOn":"2018-05-07T15:40:04+00:00","CommentsCount":243,"FacebookCount":0,"Summary":"At Microsoft Build Live today, we are sharing a first look at our plans for .NET Core 3. The highlight of .NET Core 3 is support for Windows desktop applications, specifically Windows Forms, Windows...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/07/net-core-3-and-support-for-windows-desktop-applications/","RawContent":null},{"Title":"Announcing .NET Core 2.1 RC 1","PublishedOn":"2018-05-07T15:39:20+00:00","CommentsCount":26,"FacebookCount":0,"Summary":"Today, we&#8217;re announcing .NET Core 2.1 Release Candidate 1 (RC 1). The .NET Core 2.1 RC 1 is now ready for broad testing and for production use. Our quality, reliability, and performance testing...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/05/07/announcing-net-core-2-1-rc-1/","RawContent":null},{"Title":"Announcing the .NET Framework 4.7.2","PublishedOn":"2018-04-30T20:56:19+00:00","CommentsCount":54,"FacebookCount":0,"Summary":"Today, we are happy to announce the release of the .NET Framework 4.7.2. It’s included in the Windows 10 April 2018 Update. .NET Framework 4.7.2 is also available on Windows 7+ and Windows Server 2008...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/30/announcing-the-net-framework-4-7-2/","RawContent":null},{"Title":"Help us plan the future of .NET!","PublishedOn":"2018-04-20T16:55:37+00:00","CommentsCount":75,"FacebookCount":0,"Summary":"We’re currently planning our next major .NET releases and would love to hear your feedback on how you interact with .NET Framework and .NET Core today. Please fill out the survey below and help shape...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/20/help-us-plan-the-future-of-net/","RawContent":null},{"Title":"Performance Improvements in .NET Core 2.1","PublishedOn":"2018-04-18T19:29:45+00:00","CommentsCount":48,"FacebookCount":0,"Summary":"Back before .NET Core 2.0 shipped, I wrote a post highlighting various performance improvements in .NET Core 2.0 when compared with .NET Core 1.1 and the .NET Framework. As .NET Core 2.1 is in its...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/18/performance-improvements-in-net-core-2-1/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7640755266","Type":"PullRequestEvent","CreatedAt":"2018-05-08T00:32:51","Actor":"shauheen","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/102","RelatedDescription":"Opened pull request \"Update projects.json adding MLNET\" (#102) at dotnet/home","RelatedBody":""},{"Id":"7640750127","Type":"PullRequestEvent","CreatedAt":"2018-05-08T00:31:03","Actor":"shauheen","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/101","RelatedDescription":"Opened pull request \"Create mlnet.md\" (#101) at dotnet/home","RelatedBody":""},{"Id":"7559882384","Type":"PullRequestEvent","CreatedAt":"2018-04-20T06:42:59","Actor":"Cheesebaron","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/100","RelatedDescription":"Opened pull request \"Create mvvmcross.md\" (#100) at dotnet/home","RelatedBody":"Added MvvmCross as project"},{"Id":"7452103949","Type":"PullRequestEvent","CreatedAt":"2018-03-29T07:03:03","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/97","RelatedDescription":"Merged pull request \"update CLA PDF link\" (#97) at dotnet/home","RelatedBody":""},{"Id":"7419410563","Type":"IssuesEvent","CreatedAt":"2018-03-22T14:02:36","Actor":"vvavrychuk","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/99","RelatedDescription":"Opened issue \"not working \"Linux Distribution\" dropdown on http://www.microsoft.com/net/learn/get-started/linux \" (#99) at dotnet/home","RelatedBody":"On the page http://www.microsoft.com/net/learn/get-started/linux dropdown \"Linux Distribution\" has no effect on the installation instruction next to him (they are always displayed for RedHat).\r\n\r\n![screenshot from 2018-03-22 16-02-19](https://user-images.githubusercontent.com/152563/37775020-6ec5778e-2dea-11e8-9ea3-b33e26c1c4e1.png)\r\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7660843516","Type":"IssuesEvent","CreatedAt":"2018-05-11T12:12:46","Actor":"Longvimol","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/69","RelatedDescription":"Opened issue \"Dotnet / announcement \" (#69) at dotnet/announcements","RelatedBody":"This repo doesn't accept issues. Please see README.md in the root for more details.\r\n"},{"Id":"7644965785","Type":"IssuesEvent","CreatedAt":"2018-05-08T17:03:40","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/67","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0765: .NET Core Denial Of Service Vulnerability\" (#67) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0765: .NET Core Denial Of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and .NET native version 2.0. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability that exists when .NET Framework and .NET Core improperly process XML documents. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Framework, .NET Core, or .NET native application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Framework, .NET Core, and .NET native applications handle XML document processing.\r\n\r\nIf your application is an ASP.NET Core application, developers are also advised to update to ASP.NET Core 2.0.8.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/Home/ **TBD**\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\n* If an application does not process signed XML, it is not affected by this vulnerability.\r\n* If your application targets .NET Core 1.x or .NET native 1.x, it is not affected as the vulnerable package is not available for these platforms.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core, .NET native, or ASP.NET Core based application that uses System.Security.Cryptography.Xml with a version of 4.4.1 or earlier.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Security.Cryptography.Xml | ≤4.4.1 |  4.4.2 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n.NET Core has two types of dependencies: direct and transitive. Direct dependencies are dependencies where you specifically add a package to your project, transitive dependencies occur when you add a package to your project that in turn relies on another package.\r\n\r\nFor example, the `Microsoft.AspNetCore.Mvc` package depends on the `Microsoft.AspNetCore.Mvc.Core` package. When you add a dependency on `Microsoft.AspNetCore.Mvc` in your project, you're taking a transitive dependency on `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\nAny application that has a direct or transitive dependency on the [affected package](#affected-software) can be exposed to the vulnerability if it does not meet any of the [mitigation factors](#mitigation-factors).\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n---\r\n\r\nIf you're targeting ASP.NET Core 2.0 and using the `Microsoft.AspNetCore.All` metapackage:\r\n\r\n* Update its version number to 2.0.8 to pull in updated packages that update their transitive dependencies to the fixed version of `System.Security.Cryptography.Xml`.\r\n\r\n---\r\n\r\n.NET Core projects have two types of dependencies: direct and transitive. You must update your projects using the following instructions to address both types of dependency.\r\n\r\n#### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your *csproj* file. They can be fixed by [editing the csproj file](#direct-dependencies) or using NuGet to update the dependency.\r\n\r\n#### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the *project.assets.json* file contained in the obj directory of your project.\r\n\r\nThe *project.assets.json* files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\n#### <a name=\"direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Security.Cryptography.Xml\" Version=\"4.4.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Security.Cryptography.Xml` version 4.4.1.\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.Security.Cryptography.Xml` to a [fixed package number](#affected-software). Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Security.Cryptography.Xml\" Version=\"4.4.2\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\nAfter you've addressed all of your direct dependencies, you must review your transitive dependencies.\r\n\r\n#### Discovering and fixing transitive dependencies\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can [review the *project.assets.json* file](#project-assets-json).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio 2017, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a>Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Security.Cryptography.Xml/4.4.0` is a reference to version 4.4.0 of `System.Security.Cryptography.Xml`.\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\n##### Fixing transitive dependencies\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.Security.Cryptography.Xml` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Security.Cryptography.Xml\" Version=\"4.4.2\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n---\r\n\r\nIf you're targeting .NET native for a Universal Windows Platform (UWP) application, you should update your dependencies and republish your application.\r\n\r\nIf you submit an application to the Windows Store with an outdated reference, the store will update the reference automatically, which has the potential for compatibility issues. Thus, we recommend updating your application directly and testing its functionality before resubmitting.\r\n\r\n---\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-0787](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-0765)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 8, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-05-08_"},{"Id":"7619224203","Type":"IssuesEvent","CreatedAt":"2018-05-02T20:28:55","Actor":"MichaelSimons","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/65","RelatedDescription":"Opened issue \".NET Framework Runtime and Builder Docker repos have merged \" (#65) at dotnet/announcements","RelatedBody":"# .NET Framework Runtime and Builder Docker repos have merged\r\n\r\nThe [microsoft/dotnet-framework-build](https://hub.docker.com/r/microsoft/dotnet-framework-build/) Docker Hub repo has been merged into the [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) Docker Hub repo.  All new tags going forward will only be pushed to [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/).  The images in the [microsoft/dotnet-framework-build](https://hub.docker.com/r/microsoft/dotnet-framework-build/) Docker Hub repo will be retained and serviced accordingly as to not affect existing usage.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker #125](https://github.com/Microsoft/dotnet-framework-docker/issues/125)\r\n\r\n## Details\r\n\r\nThe [microsoft/dotnet-framework-build](https://hub.docker.com/r/microsoft/dotnet-framework-build/) Docker Hub repo has been merged into the [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) Docker Hub repo.\r\n\r\n* https://github.com/Microsoft/dotnet-framework-docker/pull/123\r\n* https://github.com/Microsoft/dotnet-framework-docker/issues/78\r\n\r\nIn order to differentiate the runtime and build images, `runtime` and `sdk` distinguishing identifiers have been added to the tags.  For example, `4.7.2-runtime` and `4.7.2-sdk`.\r\n\r\nAll new tags going forward will only be pushed to [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/).   For example, the build images for 4.7.2 which was released today, only exist in [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) repo.\r\n\r\nThe existing tags in [microsoft/dotnet-framework-build](https://hub.docker.com/r/microsoft/dotnet-framework-build/) will remain and be serviced accordingly.  For example, the stable tags such as `4.7.1-windowsservercore-1709` will continue to be patched on a monthly basis.\r\n\r\nWe recommend that as you create and maintain your code, you move to use the new `runtime` and `sdk` images from the [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) repo.\r\n"},{"Id":"7545995438","Type":"IssuesEvent","CreatedAt":"2018-04-18T00:20:14","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/64","RelatedDescription":"Opened issue \"April 2018 .NET Updates\" (#64) at dotnet/announcements","RelatedBody":"# April 2018 .NET Updates\r\n\r\nThe following .NET updates were released this month. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework\r\n\r\n* No new releases. See: [.NET Framework February 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/02/13/net-framework-february-2018-security-and-quality-rollup/).\r\n* [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) and related Docker images were updated for [KB4093112](https://support.microsoft.com/help/4093112) and associated updates.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core April 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/04/17/net-core-april-2018-update/)\r\n   * [2.0.7 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.0/2.0.7.md)\r\n   * [1.1.8 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.8.md)\r\n   * [1.0.11 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.11.md)\r\n* [.NET Core 2.1 Preview 2](https://blogs.msdn.microsoft.com/dotnet/2018/04/11/announcing-net-core-2-1-preview-2/)\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) and related Docker images were updated for [KB4093112](https://support.microsoft.com/help/4093112) and associated updates.\r\n* Latest .NET Core security release: [.NET Core March 2018 Update](https://github.com/dotnet/core/issues/1341)\r\n\r\n## .NET for UWP\r\n\r\n* No new releases. See: [.NET for UWP January 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-for-uwp-january-2018-update/).\r\n\r\n## Previous Updates\r\n\r\n* [February 2018 Security and Quality Updates](https://github.com/dotnet/announcements/issues/59)"},{"Id":"7387413694","Type":"IssuesEvent","CreatedAt":"2018-03-15T21:18:32","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/announcements/issues/63","RelatedDescription":"Reopened issue \"Transport Layer Security (TLS) best practices with the .NET Framework article published\" (#63) at dotnet/announcements","RelatedBody":"# Transport Layer Security (TLS) best practices with the .NET Framework article published\r\n\r\nA new article was published that discusses the Transport Layer Security (TLS) best practices at https://docs.microsoft.com/dotnet/framework/network-programming/tls.\r\n\r\nTo ensure .NET Framework applications remain secure, the TLS version should **not** be hardcoded. .NET Framework applications should use the TLS version the operating system (OS) supports.\r\n\r\nThe (TLS) best practices article targets developers who are:\r\n* Directly using the System.Net APIs (for example, `System.Net.Http.HttpClient` and `System.Net.Security.SslStream`).\r\n* Directly using WCF clients and services using the `System.ServiceModel` namespace.\r\n* Using [Azure Cloud Services](https://azure.microsoft.com/services/cloud-services/) Web and Worker roles to host and run your application. See the [Azure Cloud Services](https://docs.microsoft.com/dotnet/framework/network-programming/tls#azure-cloud-services) section.\r\n\r\nThe article explains how to enable the strongest security available for the version of the .NET Framework that your app targets and runs on.\r\n\r\nThe section [Audit your code and make code changes](https://docs.microsoft.com/dotnet/framework/network-programming/tls#audit-your-code-and-make-code-changes) covers auditing and updating your code.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\ndotnet/docs#4675"},{"Id":"7387391842","Type":"IssuesEvent","CreatedAt":"2018-03-15T21:13:45","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/63","RelatedDescription":"Closed issue \"Transport Layer Security (TLS) best practices with the .NET Framework article published\" (#63) at dotnet/announcements","RelatedBody":"# Transport Layer Security (TLS) best practices with the .NET Framework article published\r\n\r\nA new article was published that discussed the Transport Layer Security (TLS) best practices at https://docs.microsoft.com/dotnet/framework/network-programming/tls.\r\n\r\nTo ensure .NET Framework applications remain secure, the TLS version should **not** be hardcoded. .NET Framework applications should use the TLS version the operating system (OS) supports.\r\n\r\nThe (TLS) best practices article targets developers who are:\r\n* Directly using the System.Net APIs (for example, `System.Net.Http.HttpClient` and `System.Net.Security.SslStream`).\r\n* Directly using WCF clients and services using the `System.ServiceModel` namespace.\r\n* Using [Azure Cloud Services](https://azure.microsoft.com/services/cloud-services/) Web and Worker roles to host and run your application. See the [Azure Cloud Services](https://docs.microsoft.com/dotnet/framework/network-programming/tls#azure-cloud-services) section.\r\n\r\nThe article explains how to enable the strongest security available for the version of the .NET Framework that your app targets and runs on.\r\n\r\nThe section [Audit your code and make code changes](https://docs.microsoft.com/dotnet/framework/network-programming/tls#audit-your-code-and-make-code-changes) covers auditing and updating your code.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\ndotnet/docs#4675"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7665923156","Type":"PullRequestEvent","CreatedAt":"2018-05-13T01:55:38","Actor":"tdinucci","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17978","RelatedDescription":"Opened pull request \"Override Stream.CopyTo on FileStream\" (#17978) at dotnet/coreclr","RelatedBody":"Addresses #29479\r\n\r\nThis is relevant to Windows only, just as CopyToAsync is.\r\n\r\nA PR for unit tests is about to be submitted to corefx.\r\n\r\n"},{"Id":"7665762185","Type":"PullRequestEvent","CreatedAt":"2018-05-12T23:11:01","Actor":"stakx","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17977","RelatedDescription":"Opened pull request \"Reflection: Allow ParameterBuilder.SetConstant(nonNullValue) for nullable enum parameters\" (#17977) at dotnet/coreclr","RelatedBody":"This is a fix for #17893.\r\n\r\n* Makes it possible to call `ParameterBuilder.SetConstant(nonNullValue)` for a parameter of type `TEnum?`.\r\n\r\n* But does not change the behavior of `ParameterInfo.DefaultValue`, which will report a default value of the enum's underlying type for `TEnum?` parameters (unlike with `TEnum` parameters, where the reported default value has type `TEnum`). While it would be nice to change this, it might also break existing user code.\r\n\r\n/cc @AtsushiKan"},{"Id":"7665585308","Type":"IssuesEvent","CreatedAt":"2018-05-12T20:45:31","Actor":"kasper3","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/17976","RelatedDescription":"Opened issue \"Suggestion: run linters and formatters on PRs\" (#17976) at dotnet/coreclr","RelatedBody":"GitHub has a new section in PR that shows checks:\r\n\r\n![image](https://user-images.githubusercontent.com/33230602/39961331-6950b8fc-563c-11e8-98af-f44fb5adecfb.png)\r\n\r\nIn CoreCLR and CoreFX, in lieu of `Windows_NT x64 Formatting` CI job, this [Checks feature](https://help.github.com/articles/about-status-checks/#checks) can run:\r\n\r\n* C# code formatter (https://github.com/dotnet/codeformatter)\r\n* Clang-format for c/cpp/h files\r\n\r\nand highlight when output of `diff changedFileX.cs $(codeformatter codeFileX.cs)` is non-empty."},{"Id":"7664551248","Type":"PullRequestEvent","CreatedAt":"2018-05-12T09:04:17","Actor":"kasper3","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17975","RelatedDescription":"Opened pull request \"[release/2.1] Fix alternate stack for Alpine docker on SELinux (#17936)\" (#17975) at dotnet/coreclr","RelatedBody":"Port of #17936\r\nFixes #17931\r\n\r\n@janvorli @RussKeldorph "}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7665303550","Type":"IssuesEvent","CreatedAt":"2018-05-12T17:38:13","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/9270","RelatedDescription":"Closed issue \"dotnet install tool with additional feed resolution problem\" (#9270) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\nFollowing instructions from https://natemcmaster.com/blog/2018/05/12/dotnet-global-tools/\r\n1. `dotnet pack --output ./`\r\n2. ` dotnet tool install -g bwbot-cli --source-feed ./`\r\n\r\n## Expected  behavior\r\nResolution of feed path should be relative to current directory where command is executed.\r\n\r\n## Actual behavior\r\nCurrently, path `./` resolved to some temporary location where created `restore.csproj`. Something like `C:\\Users\\user\\AppData\\Local\\Temp\\y33whrud.znw\\restore.csproj`\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\nПакет SDK для .NET Core (отражающий любой global.json):\r\n Version:   2.1.300-rc1-008673\r\n Commit:    f5e3ddbe73\r\n\r\nСреда выполнения:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.300-rc1-008673\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.0-rc1\r\n  Commit:  eb9bc92051\r\n\r\n.NET Core SDKs installed:\r\n  1.1.0 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.100 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.101 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.102 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.103 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.104 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.200 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.300-rc1-008673 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0-rc1-final [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0-rc1-final [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0-rc1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"7665294802","Type":"IssuesEvent","CreatedAt":"2018-05-12T17:32:23","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/9273","RelatedDescription":"Closed issue \"Global tool not found on path after install\" (#9273) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n\r\nMy repo: https://github.com/phil-harmoniq/vInject\r\n\r\nI'm trying to use a global tool in my CI builds, but it seems that global tools do not get properly added to `$PATH`. Installing global tools locally on my Mac does work however.\r\n\r\nThis CI build passes if I use the full path to the tool: https://travis-ci.org/phil-harmoniq/vInject/builds/378115714\r\n\r\nThis CI build fails when trying to call the tool from `$PATH`: https://travis-ci.org/phil-harmoniq/vInject/builds/378116656\r\n\r\n## Expected  behavior\r\n\r\nThe tool is installed and can be called directly from `$PATH`\r\n\r\n## Actual behavior\r\n\r\n`git-status: command not found`\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.300-rc1-008673\r\n Commit:    f5e3ddbe73\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  14.04\r\n OS Platform: Linux\r\n RID:         ubuntu.14.04-x64\r\n Base Path:   /usr/share/dotnet/sdk/2.1.300-rc1-008673/\r\n\r\nHost (useful for support):\r\n  Version: 2.1.0-rc1\r\n  Commit:  eb9bc92051\r\n\r\n.NET Core SDKs installed:\r\n  2.1.300-rc1-008673 [/usr/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0-rc1-final [/usr/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0-rc1-final [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.0-rc1 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"7665280582","Type":"IssuesEvent","CreatedAt":"2018-05-12T17:23:21","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/9229","RelatedDescription":"Closed issue \"dotnet test output missing in .NET Core 2.1.300 RC1\" (#9229) at dotnet/cli","RelatedBody":"In .NET Core 2.1 RC1 SDK (`2.1.300-rc1-008673`), the reason that tests fail is not output to the console anymore. As well as being less useful to the developer, this also appears to break functionality like test output detection in TeamCity.\r\n\r\n## Steps to reproduce\r\n\r\n  1. Clone `https://github.com/martincostello/missing-test-output-repo`\r\n  1. Run `dotnet test`\r\n\r\n## Expected  behavior\r\n\r\nThe reason for the test's failure is output to the console (example below achieved by using `2.0.104` in `global.json`).\r\n\r\n```ps\r\nPS C:\\Coding\\missing-test-output-repo> dotnet test\r\nBuild started, please wait...\r\nBuild completed.\r\n\r\nTest run for C:\\Coding\\missing-test-output-repo\\XUnitTestProject1\\bin\\Debug\\netcoreapp2.0\\XUnitTestProject1.dll(.NETCoreApp,Version=v2.0)\r\nMicrosoft (R) Test Execution Command Line Tool Version 15.6.0\r\nCopyright (c) Microsoft Corporation.  All rights reserved.\r\n\r\nStarting test execution, please wait...\r\n[xUnit.net 00:00:00.4992229]   Discovering: XUnitTestProject1\r\n[xUnit.net 00:00:00.5743060]   Discovered:  XUnitTestProject1\r\n[xUnit.net 00:00:00.5810979]   Starting:    XUnitTestProject1\r\n[xUnit.net 00:00:00.7636667]     XUnitTestProject1.UnitTest1.Bad_Math [FAIL]\r\n[xUnit.net 00:00:00.7655042]       Assert.Equal() Failure\r\n[xUnit.net 00:00:00.7656693]       Expected: 2\r\n[xUnit.net 00:00:00.7657361]       Actual:   1\r\n[xUnit.net 00:00:00.7671460]       Stack Trace:\r\n[xUnit.net 00:00:00.7688282]         C:\\Coding\\missing-test-output-repo\\XUnitTestProject1\\UnitTest1.cs(17,0): at XUnitTe\r\nstProject1.UnitTest1.Bad_Math()\r\n[xUnit.net 00:00:00.7852434]   Finished:    XUnitTestProject1\r\nFailed   XUnitTestProject1.UnitTest1.Bad_Math\r\nError Message:\r\n Assert.Equal() Failure\r\nExpected: 2\r\nActual:   1\r\nStack Trace:\r\n   at XUnitTestProject1.UnitTest1.Bad_Math() in C:\\Coding\\missing-test-output-repo\\XUnitTestProject1\\UnitTest1.cs:line 1\r\n7\r\n\r\nTotal tests: 2. Passed: 1. Failed: 1. Skipped: 0.\r\nTest Run Failed.\r\nTest execution time: 1.8924 Seconds\r\nPS C:\\Coding\\missing-test-output-repo>\r\n```\r\n\r\n## Actual behavior\r\n\r\nReason for the test's failure is not output, just that the test failed.\r\n\r\n```ps\r\nPS C:\\Coding\\missing-test-output-repo> dotnet test\r\nBuild started, please wait...\r\nBuild completed.\r\n\r\nTest run for C:\\Coding\\missing-test-outputrepo\\XUnitTestProject1\\bin\\Debug\\netcoreapp2.0\\XUnitTestProject1.dll(.NETCoreApp,Version=v2.0)\r\nMicrosoft (R) Test Execution Command Line Tool Version 15.7.0-preview-20180221-13\r\nCopyright (c) Microsoft Corporation.  All rights reserved.\r\n\r\nStarting test execution, please wait...\r\n[xUnit.net 00:00:00.7648657]     XUnitTestProject1.UnitTest1.Bad_Math [FAIL]\r\n\r\nTotal tests: 2. Passed: 1. Failed: 1. Skipped: 0.\r\nTest Run Failed.\r\nTest execution time: 1.9199 Seconds\r\nPS C:\\Coding\\missing-test-output-repo>\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```ps\r\nPS C:\\Coding\\missing-test-output-repo> dotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.300-rc1-008673\r\n Commit:    f5e3ddbe73\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.300-rc1-008673\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.0-rc1\r\n  Commit:  eb9bc92051\r\n\r\n.NET Core SDKs installed:\r\n  1.0.0 [C:\\Program Files\\dotnet\\sdk]\r\n  1.0.1 [C:\\Program Files\\dotnet\\sdk]\r\n  1.0.2 [C:\\Program Files\\dotnet\\sdk]\r\n  1.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.0 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.0 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.2 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.2 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.3 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.100 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.101 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.102 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.103 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.104 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.200 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.300-preview1-008174 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.300-preview2-008530 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.300-rc1-008673 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0-preview1-final [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.0-preview2-final [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.0-rc1-final [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0-preview1-final [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.0-preview2-final [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.0-rc1-final [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0-preview1-26216-03 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0-preview2-26406-04 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0-rc1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```"},{"Id":"7665087126","Type":"IssuesEvent","CreatedAt":"2018-05-12T15:22:53","Actor":"phil-harmoniq","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/9273","RelatedDescription":"Opened issue \"Global tool not found on path after install\" (#9273) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n\r\nMy repo: https://github.com/phil-harmoniq/vInject\r\n\r\nI'm trying to use a global tool in my CI builds, but it seems that global tools do not get properly added to `$PATH`. Installing global tools locally on my Mac does work however.\r\n\r\nThis CI build passes if I use the full path to the tool: https://travis-ci.org/phil-harmoniq/vInject/builds/378115714\r\n\r\nThis CI build fails when trying to call the tool from `$PATH`: https://travis-ci.org/phil-harmoniq/vInject/builds/378116656\r\n\r\n## Expected  behavior\r\n\r\nThe tool is installed and can be called directly from `$PATH`\r\n\r\n## Actual behavior\r\n\r\n`git-status: command not found`\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.300-rc1-008673\r\n Commit:    f5e3ddbe73\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  14.04\r\n OS Platform: Linux\r\n RID:         ubuntu.14.04-x64\r\n Base Path:   /usr/share/dotnet/sdk/2.1.300-rc1-008673/\r\n\r\nHost (useful for support):\r\n  Version: 2.1.0-rc1\r\n  Commit:  eb9bc92051\r\n\r\n.NET Core SDKs installed:\r\n  2.1.300-rc1-008673 [/usr/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0-rc1-final [/usr/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0-rc1-final [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.0-rc1 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"7664977858","Type":"IssuesEvent","CreatedAt":"2018-05-12T14:13:18","Actor":"dotnet-mc-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/9272","RelatedDescription":"Opened issue \"FileSystem build failures in 'prodcon/cli/release/2.1.3xx/' - '20180512.03'\" (#9272) at dotnet/cli","RelatedBody":"There were a set of failures during this build. Here is a summary of these:\r\n* https://devdiv.visualstudio.com/DefaultCollection/DevDiv/_build?_a=summary&buildId=1682303\r\n  - **Agent:** DDVSOWINAGE015\r\n  - **Error log:** 1>E:\\A\\_work\\0\\s\\src\\dotnet\\dotnet.csproj : error NU1603: Microsoft.TemplateEngine.Orchestrator.RunnableProjects 1.0.2-beta3-20180512-1681697 depends on Microsoft.TemplateEngine.Core (>= 1.0.2-beta3-20180511-1681697) but Microsoft...\r\n\r\n* https://devdiv.visualstudio.com/DefaultCollection/DevDiv/_build?_a=summary&buildId=1682296\r\n  - **Agent:** DDVSOLINUXAGE002\r\n  - **Error log:** 1>/data/agent/_work/0/s/src/dotnet/dotnet.csproj : error NU1603: Microsoft.TemplateEngine.Orchestrator.RunnableProjects 1.0.2-beta3-20180512-1681697 depends on Microsoft.TemplateEngine.Core (>= 1.0.2-beta3-20180511-1681697) but Mi...\r\n\r\n* https://devdiv.visualstudio.com/DefaultCollection/DevDiv/_build?_a=summary&buildId=1682297\r\n  - **Agent:** DDVSOLINUXAGE003\r\n  - **Error log:** \u001b[39;49m\u001b[36m     1>\u001b[39;49m\u001b[39;49m\u001b[31m/opt/code/src/dotnet/dotnet.csproj : error NU1603: Microsoft.TemplateEngine.Orchestrator.RunnableProjects 1.0.2-beta3-20180512-1681697 depends on Microsoft.TemplateEngine.Core (>= 1.0.2-bet...\r\n\r\n* https://devdiv.visualstudio.com/DefaultCollection/DevDiv/_build?_a=summary&buildId=1682298\r\n  - **Agent:** DDVSOLINUXAGE004\r\n  - **Error log:** \u001b[39;49m\u001b[36m     1>\u001b[39;49m\u001b[39;49m\u001b[31m/opt/code/src/dotnet/dotnet.csproj : error NU1603: Microsoft.TemplateEngine.Orchestrator.RunnableProjects 1.0.2-beta3-20180512-1681697 depends on Microsoft.TemplateEngine.Core (>= 1.0.2-bet...\r\n\r\n* https://devdiv.visualstudio.com/DefaultCollection/DevDiv/_build?_a=summary&buildId=1682299\r\n  - **Agent:** DDVSOLINUXAGE005\r\n  - **Error log:** \u001b[39;49m\u001b[36m     1>\u001b[39;49m\u001b[39;49m\u001b[31m/opt/code/src/dotnet/dotnet.csproj : error NU1603: Microsoft.TemplateEngine.Orchestrator.RunnableProjects 1.0.2-beta3-20180512-1681697 depends on Microsoft.TemplateEngine.Core (>= 1.0.2-bet...\r\n\r\n* https://devdiv.visualstudio.com/DefaultCollection/DevDiv/_build?_a=summary&buildId=1682300\r\n  - **Agent:** DDVSOMACAGE006\r\n  - **Error log:** 1>/Users/buildagent/agent/_work/0/s/src/dotnet/dotnet.csproj : error NU1603: Microsoft.TemplateEngine.Orchestrator.RunnableProjects 1.0.2-beta3-20180512-1681697 depends on Microsoft.TemplateEngine.Core (>= 1.0.2-beta3-20180511-168...\r\n\r\n* https://devdiv.visualstudio.com/DefaultCollection/DevDiv/_build?_a=summary&buildId=1682302\r\n  - **Agent:** DDVSOLINUXAGE007\r\n  - **Error log:** \u001b[39;49m\u001b[36m     1>\u001b[39;49m\u001b[39;49m\u001b[31m/opt/code/src/dotnet/dotnet.csproj : error NU1603: Microsoft.TemplateEngine.Orchestrator.RunnableProjects 1.0.2-beta3-20180512-1681697 depends on Microsoft.TemplateEngine.Core (>= 1.0.2-bet...\r\n\r\n* https://devdiv.visualstudio.com/DefaultCollection/DevDiv/_build?_a=summary&buildId=1682304\r\n  - **Agent:** DDVSOWINAGE016\r\n  - **Error log:** 1>E:\\A\\_work\\0\\s\\src\\dotnet\\dotnet.csproj : error NU1603: Microsoft.TemplateEngine.Orchestrator.RunnableProjects 1.0.2-beta3-20180512-1681697 depends on Microsoft.TemplateEngine.Core (>= 1.0.2-beta3-20180511-1681697) but Microsoft...\r\n\r\n@mmitche, @livarcocc\r\n"},{"Id":"7664783329","Type":"IssuesEvent","CreatedAt":"2018-05-12T12:03:24","Actor":"dotnet-mc-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/9271","RelatedDescription":"Opened issue \"Compiler build failures in 'prodcon/cli/release/2.1.3xx/' - '20180512.02'\" (#9271) at dotnet/cli","RelatedBody":"There were a set of failures during this build. Here is a summary of these:\r\n* https://devdiv.visualstudio.com/DefaultCollection/DevDiv/_build?_a=summary&buildId=1682246\r\n  - **Agent:** DDVSOLINUXAGE031\r\n  - **Error log:** dotnet_install: Error: Could not download .NET Core SDK version 2.2.0-preview1-007799...\r\n\r\n@mmitche, @livarcocc\r\n"},{"Id":"7664679867","Type":"IssuesEvent","CreatedAt":"2018-05-12T10:44:12","Actor":"kant2002","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/9270","RelatedDescription":"Opened issue \"dotnet install tool with additional feed resolution problem\" (#9270) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\nFollowing instructions from https://natemcmaster.com/blog/2018/05/12/dotnet-global-tools/\r\n1. `dotnet pack --output ./`\r\n2. ` dotnet tool install -g bwbot-cli --source-feed ./`\r\n\r\n## Expected  behavior\r\nResolution of feed path should be relative to current directory where command is executed.\r\n\r\n## Actual behavior\r\nCurrently, path `./` resolved to some temporary location where created `restore.csproj`. Something like `C:\\Users\\user\\AppData\\Local\\Temp\\y33whrud.znw\\restore.csproj`\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\nПакет SDK для .NET Core (отражающий любой global.json):\r\n Version:   2.1.300-rc1-008673\r\n Commit:    f5e3ddbe73\r\n\r\nСреда выполнения:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.300-rc1-008673\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.0-rc1\r\n  Commit:  eb9bc92051\r\n\r\n.NET Core SDKs installed:\r\n  1.1.0 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.100 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.101 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.102 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.103 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.104 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.200 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.300-rc1-008673 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0-rc1-final [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0-rc1-final [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0-rc1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"7664666036","Type":"IssuesEvent","CreatedAt":"2018-05-12T10:32:32","Actor":"kant2002","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/9269","RelatedDescription":"Opened issue \"dotnet pack with multiple TFM not working\" (#9269) at dotnet/cli","RelatedBody":"My idea is to have both global tool, and regular application, so non developers could be targeted with app running full framework\r\n\r\n## Steps to reproduce\r\n1. Create global tool, and add support for multiple target frameworks\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <PackAsTool>true</PackAsTool>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFrameworks>netcoreapp2.1;net462</TargetFrameworks>\r\n  </PropertyGroup>\r\n</Project>\r\n```\r\n2. run `dotnet pack`\r\n\r\n## Expected  behavior\r\nGenerate pack only for `netcoreapp2.1` or provide ability to select which TFM target\r\n\r\n## Actual behavior\r\n```\r\nC:\\Program Files\\dotnet\\sdk\\2.1.300-rc1-008673\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.PackTool.targets(42,5): error : only supports .NET Core. [XXX.csproj]\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\nПакет SDK для .NET Core (отражающий любой global.json):\r\n Version:   2.1.300-rc1-008673\r\n Commit:    f5e3ddbe73\r\n\r\nHost (useful for support):\r\n  Version: 2.1.0-rc1\r\n  Commit:  eb9bc92051\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"7664353045","Type":"PullRequestEvent","CreatedAt":"2018-05-12T06:17:06","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/9267","RelatedDescription":"Merged pull request \"Fix incorrect default VSTest verbosity level.\" (#9267) at dotnet/cli","RelatedBody":"Commit 10289504a8aeb5fab7c1c9f8e0e7602e9c14250a changed the default verbosity\r\noption used for MSBuild from `-v:quiet` to `-verbosity:quiet`.  This triggered a\r\nmatch that was being done against arguments starting with `-verbosity` to\r\nforward the value to VSTest via the `VSTestVerbosity` property.  The result is\r\nthat VSTest is using a default verbosity of `quiet`, suppressing error output\r\nthat users expect to see.\r\n\r\nThe fix is to change the check to only match against user-supplied options.\r\nThe default level the command uses for MSBuild is not forwarded to VSTest.\r\n\r\nFixes #9229.\r\n"},{"Id":"7664152332","Type":"IssuesEvent","CreatedAt":"2018-05-12T03:16:04","Actor":"rasik210","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/9268","RelatedDescription":"Opened issue \".NET core sdk 2.0.0 zip archive is not downloadable\" (#9268) at dotnet/cli","RelatedBody":"I want to install .NET core SDK 2.0.0 using zip archive:\r\n## Steps to reproduce\r\n\r\n1. Go to [this](https://www.microsoft.com/net/download/dotnet-core/sdk-2.0.0) link to download the SDK.\r\n2. Go to Linux > File downloads section.\r\n3. click the link \"x64 binaries\" \r\n\r\nIt takes you to \"Thanks for downloading\" page to download the .gz zip archive. \r\n\r\n## Expected  behavior\r\n\r\nZip archive should get downloaded.\r\n\r\n## Actual behavior\r\n\r\nPage loads with file not found error. Below URL is seen in the address bar of the browser:\r\n\r\nhttps://download.microsoft.com/download/0/F/D/0FD852A4-7EA1-4E2A-983A-0484AC19B92C/dotnet-sdk-2.0.0-linux-x64.tar.gz\r\n\r\n## Environment data\r\n\r\n- I'm using Mozilla Firefox browser for the download.\r\n\r\n\r\n\r\n\r\n\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7665276275","Type":"IssuesEvent","CreatedAt":"2018-05-12T17:20:27","Actor":"TonyValenti","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/725","RelatedDescription":"Opened issue \".NET Standard and System.Net.Http\" (#725) at dotnet/standard","RelatedBody":"Hello .NET Standard Team,\r\nI'm not sure the right way/place to ask this question but I'm hoping you can help me out or point me in the right direction.\r\n\r\nMy understanding is that .NET standard is a set of APIs that, if a .NET runtime implements, we can be sure that it will run on any implementation that of that standard.\r\n\r\nI notice that System.Net.Http.dll seems to be part of the .NET standard, however, when I try to use the latest nuget package on Xamarin/Mac, I get errors because it relies on internal classes within System.dll, namely, System.Net.Logging.\r\n\r\nWhat is the best/right way to deal with an assembly such as that?  Can internals be made part of the standard so that they are guaranteed to work?\r\n\r\n"},{"Id":"7662579315","Type":"IssuesEvent","CreatedAt":"2018-05-11T18:00:51","Actor":"ericstj","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/724","RelatedDescription":"Opened issue \"Consider a more open-ended compatibilty mapping with .NET Framework\" (#724) at dotnet/standard","RelatedBody":"@Petermarcu suggested that we might desire a more open ended behavior rather than what we currently have (.NET 4.6.1).  Opening this on his behalf."},{"Id":"7656799964","Type":"PullRequestEvent","CreatedAt":"2018-05-10T17:30:13","Actor":"dotnet-maestro-bot","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/723","RelatedDescription":"Opened pull request \"Update BuildTools to preview1-02810-01 (master)\" (#723) at dotnet/standard","RelatedBody":""},{"Id":"7652677945","Type":"PullRequestEvent","CreatedAt":"2018-05-09T23:15:58","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/721","RelatedDescription":"Merged pull request \"Update BuildTools to preview1-02808-01 (master)\" (#721) at dotnet/standard","RelatedBody":""}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7666058656","Type":"PullRequestEvent","CreatedAt":"2018-05-13T04:11:13","Actor":"jkotas","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/29677","RelatedDescription":"Merged pull request \"Update CoreClr, CoreFx, CoreSetup to preview1-26513-01, preview1-26513-01, preview1-26512-04, respectively (master)\" (#29677) at dotnet/corefx","RelatedBody":""},{"Id":"7665925159","Type":"PullRequestEvent","CreatedAt":"2018-05-13T01:58:00","Actor":"tdinucci","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/29678","RelatedDescription":"Opened pull request \"Unit tests for - Override Stream.CopyTo on FileStream\" (#29678) at dotnet/corefx","RelatedBody":"Unit tests for coreclr PR https://github.com/dotnet/coreclr/pull/17978\r\n"},{"Id":"7665854304","Type":"PullRequestEvent","CreatedAt":"2018-05-13T00:42:49","Actor":"dotnet-maestro-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/29677","RelatedDescription":"Opened pull request \"Update CoreClr, CoreSetup to preview1-26513-01, preview1-26512-04, respectively (master)\" (#29677) at dotnet/corefx","RelatedBody":""},{"Id":"7665810896","Type":"PullRequestEvent","CreatedAt":"2018-05-13T00:01:06","Actor":"stakx","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/29676","RelatedDescription":"Opened pull request \"Reflection & Reflection.Emit: Add tests for nullable enum parameters\" (#29676) at dotnet/corefx","RelatedBody":"These tests accompany https://github.com/dotnet/coreclr/pull/17977. Half of these tests won't pass if that PR isn't merged. Tested methods:\r\n\r\n* `ParameterInfo.DefaultValue` on parameters of type `TSomeEnum` and `TSomeEnum?`\r\n* `ParameterBuilder.SetConstant(nonNullValue)` on parameters of type `TSomeEnum` and `TSomeEnum?`\r\n\r\n/cc @AtsushiKan"},{"Id":"7665806237","Type":"IssuesEvent","CreatedAt":"2018-05-12T23:56:35","Actor":"davidsh","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/3894","RelatedDescription":"Closed issue \"Documentation for HttpClient methods should state which exceptions can be thrown by the returned task\" (#3894) at dotnet/corefx","RelatedBody":"Not 100% sure this is the right place for it, but it looks like HttpClient is in this repository so I'm reporting this here.\n\nThe documentation for HttpClient methods (and async methods in general) should state which exceptions can be thrown by the returned task instead of just the exceptions that can be thrown by the method that returns the task.\n\nAs example of this is the documentation for [HttpClient.GetStringAsync](https://msdn.microsoft.com/en-us/library/hh551746%28v=vs.118%29.aspx).\n\nWithout this documentation you either have to catch everything ([well-documented as a bad practice](https://msdn.microsoft.com/en-us/library/ms182137.aspx?f=255&MSPPError=-2147217396)) or make educated guesses based on experimentation and [digging](https://stackoverflow.com/questions/24689263/exception-handling-for-httpclient-getstringasyncurl-async-api-call) through [various](https://social.msdn.microsoft.com/Forums/en-US/d8d87789-0ac9-4294-84a0-91c9fa27e353/bug-in-httpclientgetasync-should-throw-webexception-not-taskcanceledexception?forum=netfxnetcom) posts online, and if you go that route it's easy to miss that it throws, e.g., InvalidOperationException if the charset of the content type of the requested page can't be parsed into an encoding.\n"},{"Id":"7665776684","Type":"IssuesEvent","CreatedAt":"2018-05-12T23:25:24","Actor":"davidsh","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/6729","RelatedDescription":"Closed issue \"Http/WebSocket stacks: Support further limiting of SSL protocols\" (#6729) at dotnet/corefx","RelatedBody":"As noted in https://github.com/dotnet/corefx/issues/6668 & https://github.com/NuGet/Home/issues/390\n\nThe framwork is currently limiting SSL protocols, but customers might choose to be more restrictive, there is currently no way to specify it in code, and perhaps alternatively in an external configuration (local or machine level).\n"},{"Id":"7665741892","Type":"PullRequestEvent","CreatedAt":"2018-05-12T22:51:39","Actor":"mdonoughe","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/29675","RelatedDescription":"Opened pull request \"FromBase64Transform fixes (CryptoStreamMode.Write)\" (#29675) at dotnet/corefx","RelatedBody":"I don't know how much of this you want.\r\n\r\nI found a bug where `FromBase64Transform` would error about invalid characters when using a `CryptoStream` in write mode and ignoring whitespace characters if your input didn't actually contain whitespace characters. The code assumed `GetTempBuffer` would return an array containing exactly the bytes to convert, but when ignoring whitespace, if the selected range of the buffer did not actually contain any whitespace, the input buffer would be returned instead, and any caller-provided offset or count would be lost, resulting in either the wrong data or (more likely) an error about invalid characters.\r\n\r\nThis bug does not seem to exist in the .NET Framework implementation of `FromBase64Transform`.\r\n\r\nThe easy fix is to be more selective about when to return the input buffer from `GetTempBuffer`, as in 221b344.\r\n\r\nWhile I was looking at this I noticed `FromBase64Transform` is doing a lot of allocating and copying. In fb561dc I changed `GetTempBuffer` to return offset and count values for the new buffer (a good candidate for `Memory<byte>`?) so it could return without allocating in more cases, and I removed the allocation altogether when not ignoring whitespace.\r\n\r\nI don't see why we need the temporary byte input buffer at all if it's only used for feeding a temporary character buffer, so I tried to remove that too in 69470d5. This makes the code a bit more complicated, so I added a new test.\r\n\r\n## Remaining Issues\r\n\r\nThis should provide the expected results more often, but it's still not perfect.\r\n\r\n`Convert.FromBase64CharArray` always allocates a byte array for the output even though we normally already have the array to write to, and it also ignores whitespace as long as its buffer contains enough valid characters.\r\n\r\nBecause `Convert.FromBase64CharArray` is allocating a byte array for its result, we want to give it larger buffers so it doesn't need to allocate so many small arrays, but because `FromBase64Transform` declares its input block size to be 1 byte and claims not to support multiple blocks, `CryptoStream` feeds it one byte at a time, causing us to allocate many three-byte arrays. If `CanTransformMultipleBlocks` is changed to true it seems to work correctly for good inputs, but fails tests because now under certain conditions whitespace is ignored even when the mode is set to `DoNotIgnoreWhiteSpaces`. It turns out, if you pass a `byte[] b` where `b.Length % 4 == 0` and `b.Count(IsWhitespace) % 4 == 0` to `TransformBlock` the whitespaces are ignored, and by setting `CanTransformMultipleBlocks` we allow `CryptoStream` to see that too since it can pass more than one byte. It looks like already this is possible if there are four spaces in a row aligned to the block boundary.\r\n\r\nAdditionally, `FromBase64Transform` advertises an input block size of one byte. Maybe it's because of the whitespace handling? Anyway, `CryptoStream` needs to allocate a buffer for the result of the transformation and it allocates 3:1 instead of 3:4 because of the incorrect block size.\r\n\r\nIdeally, I think there should be a lower-level method for Base64 decoding which only accepts whole blocks of valid characters and writes into a provided array. Then `FromBase64Transform` could process block-by-block without dynamically allocating any buffers of its own except for maybe `TransformFinalBlock`, without needing its own Base64 implementation completely separate from `Convert.FromBase64*`, and hopefully the implementation of `FromBase64Transform` would be simpler.\r\n\r\nAlternatively, maybe the value of `CanTransformMultipleBlocks` should depend on whether whitespace is ignored and `FromBase64Transform` should itself throw on unexpected whitespace rather than relying on incomplete blocks being passed to `Convert.FromBase64CharArray`? This doesn't fix everything but it's easier to do."},{"Id":"7665708209","Type":"IssuesEvent","CreatedAt":"2018-05-12T22:20:51","Actor":"davidsh","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/26269","RelatedDescription":"Closed issue \"HttpResponseHeaders.Contains(\"Content-Range\") throws InvalidOperationException\" (#26269) at dotnet/corefx","RelatedBody":"The [Content-Range](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Range) HTTP header is classified as a response header and yet the type method `HttpResponseHeaders.Conatains(String name)` throws a `System.InvalidOperationException` when invoking with the string \"Content-Range'. Other header strings such as `\"Accept-Ranges\"` work as expected, so it only fails to recoginse `Content-Range` as a valid resopnse header.\r\n\r\nThe exception message is:\r\n> System.InvalidOperationException : Misused header name. Make sure request headers are used with HttpRequestMessage, response headers with HttpResponseMessage, and content headers with HttpContent objects."},{"Id":"7665681730","Type":"IssuesEvent","CreatedAt":"2018-05-12T21:58:48","Actor":"davidsh","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/27000","RelatedDescription":"Closed issue \" The handler does not support client authentication certificates with this combination of libcurl (7.54.0) and its SSL backend (\"LibreSSL/2.0.20\")\" (#27000) at dotnet/corefx","RelatedBody":"I'm having an issue when calling an endpoint with the following code, and I don't know what can solve that critical issue on mac:\r\n\r\n```\r\nvar handler = new HttpClientHandler();\r\nhandler.ClientCertificates.Add(cert);\r\nvar client = new HttpClient(handler);\r\nvar result = await client.GetAsync(url);\r\n```\r\n\r\nThe error is below:\r\n\r\n```\r\nSystem.PlatformNotSupportedException: The handler does not support client authentication certificates with this combination of libcurl (7.54.0) and its SSL backend (\"LibreSSL/2.0.20\").\r\n   at System.Net.Http.CurlHandler.SslProvider.SetSslOptions(EasyRequest easy, ClientCertificateOption clientCertOption)\r\n   at System.Net.Http.CurlHandler.EasyRequest.InitializeCurl()\r\n   at System.Net.Http.CurlHandler.MultiAgent.ActivateNewRequest(EasyRequest easy)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()\r\n   at System.Net.Http.HttpClient.<FinishSendAsyncBuffered>d__58.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()\r\n```\r\n\r\n**curl --version**\r\n```\r\ncurl 7.54.0 (x86_64-apple-darwin17.0) libcurl/7.54.0 LibreSSL/2.0.20 zlib/1.2.11 nghttp2/1.24.0\r\nProtocols: dict file ftp ftps gopher http https imap imaps ldap ldaps pop3 pop3s rtsp smb smbs smtp smtps telnet tftp\r\nFeatures: AsynchDNS IPv6 Largefile GSS-API Kerberos SPNEGO NTLM NTLM_WB SSL libz HTTP2 UnixSockets HTTPS-proxy\r\n```\r\n\r\n**dotnet info**\r\n```\r\n.NET Command Line Tools (2.1.4)\r\n\r\nProduct Information:\r\n Version:            2.1.4\r\n Commit SHA-1 hash:  5e8add2190\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.13\r\n OS Platform: Darwin\r\n RID:         osx.10.12-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/2.1.4/\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.5\r\n  Build    : 17373eb129b3b05aa18ece963f8795d65ef8ea54\r\n```"},{"Id":"7665665743","Type":"IssuesEvent","CreatedAt":"2018-05-12T21:45:50","Actor":"davidsh","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/28772","RelatedDescription":"Closed issue \"[Desktop] Test failure: PlatformHandler_HttpClientHandlerTest/ AllowAutoRedirect_True_ValidateNewMethodUsedOnRedirection\" (#28772) at dotnet/corefx","RelatedBody":"Failed on NETFX CI leg:\r\n```\r\n      System.Net.Http.Functional.Tests.PlatformHandler_HttpClientHandlerTest.AllowAutoRedirect_True_ValidateNewMethodUsedOnRedirection(statusCode: 307, oldMethod: \"GET\", newMethod: \"GET\") [FAIL]\r\n        Canceled: \r\n        Expected: False\r\n        Actual:   True\r\n        Stack Trace:\r\n             at System.Net.Http.Functional.Tests.HttpClientHandlerTest.<>c__DisplayClass50_2.<<AllowAutoRedirect_True_ValidateNewMethodUsedOnRedirection>b__1>d.MoveNext()\r\n          --- End of stack trace from previous location where exception was thrown ---\r\n             at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n             at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n             at System.Net.Test.Common.LoopbackServer.<CreateServerAsync>d__9.MoveNext()\r\n          --- End of stack trace from previous location where exception was thrown ---\r\n             at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n             at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n             at System.Net.Http.Functional.Tests.HttpClientHandlerTest.<>c__DisplayClass50_1.<<AllowAutoRedirect_True_ValidateNewMethodUsedOnRedirection>b__0>d.MoveNext()\r\n          --- End of stack trace from previous location where exception was thrown ---\r\n             at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n             at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n             at System.Net.Test.Common.LoopbackServer.<CreateServerAsync>d__9.MoveNext()\r\n          --- End of stack trace from previous location where exception was thrown ---\r\n             at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n             at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n             at System.Net.Http.Functional.Tests.HttpClientHandlerTest.<AllowAutoRedirect_True_ValidateNewMethodUsedOnRedirection>d__50.MoveNext()\r\n          --- End of stack trace from previous location where exception was thrown ---\r\n             at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n             at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n          --- End of stack trace from previous location where exception was thrown ---\r\n             at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n             at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n          --- End of stack trace from previous location where exception was thrown ---\r\n             at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n             at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n```"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7666002836","Type":"PullRequestEvent","CreatedAt":"2018-05-13T03:18:00","Actor":"mavasani","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/26763","RelatedDescription":"Merged pull request \"Handle symbol initializers (field/property/parameter) in CFG\" (#26763) at dotnet/roslyn","RelatedBody":"Also add SemanticModel.GetControlFlowGraph API overloads for these initializer operations."},{"Id":"7665900213","Type":"PullRequestEvent","CreatedAt":"2018-05-13T01:31:40","Actor":"CyrusNajmabadi","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/26826","RelatedDescription":"Opened pull request \"WIP: Simplify how we do fix all tests.\" (#26826) at dotnet/roslyn","RelatedBody":""},{"Id":"7665767010","Type":"PullRequestEvent","CreatedAt":"2018-05-12T23:15:52","Actor":"CyrusNajmabadi","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/26825","RelatedDescription":"Opened pull request \"Move to using hte SyntaxEditor for the 'simplify type name' fix-all code.\" (#26825) at dotnet/roslyn","RelatedBody":"Followup to https://github.com/dotnet/roslyn/pull/26824.  reviewers should wait on that going in before reviewing this.\r\n\r\nThis change gets rid of hte hand-rolled fix-all provider we had for this single fixer and instead moves us to the common 'fix-all' infrastructure we use everywhere else. "},{"Id":"7665723579","Type":"PullRequestEvent","CreatedAt":"2018-05-12T22:34:14","Actor":"CyrusNajmabadi","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/26824","RelatedDescription":"Opened pull request \"Share code between the VB and C# Simplify-Type-Name providers\" (#26824) at dotnet/roslyn","RelatedBody":"Followup to https://github.com/dotnet/roslyn/pull/26823.  Reviewing prior to that going in is likely to cause excessive extra work.\r\n\r\nThere is an enormous amount of duplication between these two impls.  Removing it and following the standard IDE patterns for writing features in a cross language fashion."},{"Id":"7665691611","Type":"PullRequestEvent","CreatedAt":"2018-05-12T22:06:34","Actor":"CyrusNajmabadi","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/26823","RelatedDescription":"Opened pull request \"Simplify type names should fix all dia gnostics with teh same ID.\" (#26823) at dotnet/roslyn","RelatedBody":"Fixes: https://github.com/dotnet/roslyn/issues/26532\r\n\r\nCurrent fix-all for simplify type names only fixes if the ID is the same *and* the contents of the node are the same.  This is not really that helpful, and means when a person sees a huge swath of \"simplify name to ...\" suggestions in their file (\"IDE0001\"), they can't actually fix tehm all at one.  They need to fix-all over and over again for all the different types they have.\r\n\r\nThis is basically unlike any of our fix-alls which almost always try to sensibly do their work for all the diagnostics of that same ID.\r\n\r\n"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7665694130","Type":"PullRequestEvent","CreatedAt":"2018-05-12T22:08:46","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5805","RelatedDescription":"Opened pull request \"Start building System.Private.TypeLoader.Native\" (#5805) at dotnet/corert","RelatedBody":"And remove workaround that was trying to avoid dependency on `ConstrainedCallSupport_GetStubs`."},{"Id":"7665640698","Type":"PullRequestEvent","CreatedAt":"2018-05-12T21:26:27","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5799","RelatedDescription":"Merged pull request \"Add support for setting AppContext switches \" (#5799) at dotnet/corert","RelatedBody":"Two commits:\r\n\r\n* Adds an `--appcontextswitch` argument to the compiler (and accompanying `AppContextSwitchOverrides` MSBuild `ItemGroup`) to influence class library behaviors. This is a general purpose feature that Project N has, but we didn't have it yet.\r\n* Add possibility to opt out of strict `Enum.GetValues` semantic and use it in CoreFX test runner. This fixes 39 CoreFX System.Collections tests."},{"Id":"7665639944","Type":"IssuesEvent","CreatedAt":"2018-05-12T21:25:52","Actor":"Willovent","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/5804","RelatedDescription":"Opened issue \"StackOverflowException using Configuration Builder with .net framework\" (#5804) at dotnet/corert","RelatedBody":"Hello,\r\n\r\nThis is what I get when a try to build a simple console application with a ConfigurationBuilder : \r\n```\r\n>dotnet publish -c release -r win-x64 /flp:v=diag;logfile=log.txt\r\nMicrosoft (R) Build Engine version 15.7.11.29948 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restoring packages for C:\\...\\Whatever.csproj...\r\n  Restore completed in 748.25 ms for C:\\..\\Whatever.csproj.\r\n  Whatever -> C:\\...\\Whatever\\bin\\release\\net471\\win-x64\\Whatever.exe\r\n  Generating native code\r\n\r\n  Process is terminating due to StackOverflowException.\r\n```\r\nHere is the log : [log.txt](https://github.com/dotnet/corert/files/1997939/log.txt)\r\nHere is the minimal code to reproduce : \r\n```csharp\r\nusing Microsoft.Extensions.Configuration;\r\n\r\nnamespace Whatever\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var configuration = new ConfigurationBuilder()\r\n                .AddJsonFile(\"appsettings.json\")\r\n                .Build();\r\n        }\r\n    }\r\n}\r\n\r\n```\r\nWith those two package in the csproj: \r\n```xml\r\n...\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.DotNet.ILCompiler\" Version=\"1.0.0-alpha-*\" />\r\n    <PackageReference Include=\"Microsoft.Extensions.Configuration\" Version=\"2.0.2\" />\r\n    <PackageReference Include=\"Microsoft.Extensions.Configuration.Json\" Version=\"2.0.2\" />\r\n  </ItemGroup>\r\n...\r\n```\r\nThis only happen targeting .net framework (net472). It seems to be ok with  netcoreapp2.0"},{"Id":"7665440784","Type":"PullRequestEvent","CreatedAt":"2018-05-12T19:06:56","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5803","RelatedDescription":"Merged pull request \"Merge nmirror to master\" (#5803) at dotnet/corert","RelatedBody":""},{"Id":"7665122620","Type":"PullRequestEvent","CreatedAt":"2018-05-12T15:45:37","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5803","RelatedDescription":"Opened pull request \"Merge nmirror to master\" (#5803) at dotnet/corert","RelatedBody":""},{"Id":"7665117036","Type":"PullRequestEvent","CreatedAt":"2018-05-12T15:42:14","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5802","RelatedDescription":"Merged pull request \"Merge changes from TFS\" (#5802) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"7665108653","Type":"PullRequestEvent","CreatedAt":"2018-05-12T15:36:57","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5802","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#5802) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"7663894041","Type":"IssuesEvent","CreatedAt":"2018-05-12T00:05:50","Actor":"christianscheuer","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/5682","RelatedDescription":"Closed issue \"Question: Is there a way to catch native exceptions in other threads?\" (#5682) at dotnet/corert","RelatedBody":"In our production macOS app (which has been built on corert since April 2017 !) we are sometimes experiencing bugs that come from native exceptions being thrown on other threads, or native exceptions that we somehow miss to catch in other ways.\r\n\r\nSince our logging and error handling infrastructure is in C#, it would be great if there was a way to deal with these native exceptions somehow - without them causing the process to exit.\r\nIs there already support for this in CoreRT or would it be possible for us to inject some custom logic?\r\n\r\nAnother thing we're seeing is that when our CoreRT console process is launched by another process, which is then killed, the CoreRT process hangs with CPU usage around 100%.\r\nI'm not entirely sure how to debug this - my first look at the \"Sample\" in Activity Monitor didn't reveal anything that I could see problematic, but would that be helpful for you to help find the bug?\r\n"},{"Id":"7662991714","Type":"PullRequestEvent","CreatedAt":"2018-05-11T19:33:23","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5800","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5800) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7662856614","Type":"PullRequestEvent","CreatedAt":"2018-05-11T19:01:38","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5801","RelatedDescription":"Merged pull request \"Merge master to nmirror\" (#5801) at dotnet/corert","RelatedBody":""},{"Id":"7662855227","Type":"PullRequestEvent","CreatedAt":"2018-05-11T19:01:19","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5801","RelatedDescription":"Opened pull request \"Merge master to nmirror\" (#5801) at dotnet/corert","RelatedBody":""}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7663668809","Type":"IssuesEvent","CreatedAt":"2018-05-11T22:29:30","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/2240","RelatedDescription":"Opened issue \"GenerateDeps.proj should be protected against Directory.Build.props/.targets from outside the installation folder\" (#2240) at dotnet/sdk","RelatedBody":"The SDK has a `GenerateDeps.proj` file which is used to support `DotNetCliToolReference`.  When we build this project, we should prevent Directory.Build.props or Directory.Build.targets from being imported.\r\n\r\nI encountered this now that the stage 0 SDK is installed in `<Repo root>\\.dotnet`, when I tried to use `dotnet xunit` on a project which had a `DotNetCliToolReference` to `dotnet-xunit`, it failed because it was picking up the repo's Directory.Build.props which was causing it to fail."},{"Id":"7663603680","Type":"PullRequestEvent","CreatedAt":"2018-05-11T22:07:26","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2239","RelatedDescription":"Opened pull request \"WIP Generate shim with PackAsTool\" (#2239) at dotnet/sdk","RelatedBody":""},{"Id":"7663588721","Type":"PullRequestEvent","CreatedAt":"2018-05-11T22:02:37","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/2238","RelatedDescription":"Closed pull request \"WIP Generate shim in PackAsTool\" (#2238) at dotnet/sdk","RelatedBody":""},{"Id":"7663556791","Type":"PullRequestEvent","CreatedAt":"2018-05-11T21:52:50","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/2234","RelatedDescription":"Merged pull request \"Let EmbedAppNameInHost task call the csharp class\" (#2234) at dotnet/sdk","RelatedBody":"Prerequisite for https://github.com/dotnet/sdk/pull/2230\r\n\r\nThat csharp class was extracted and copied to CLI first. Doing so can help reduce the duplication of cli and sdk work in the future https://github.com/dotnet/cli/issues/9027\r\n\r\nAlso, Shim generation on PackAsTool need to use the EmbedAppNameInHostUtil, since compared to the original task, it can embed relative path, not just a file name. https://github.com/dotnet/sdk/pull/2230/files#diff-a19564bd6fa2c5ce365c212cb5b11fb7R80\r\n"},{"Id":"7663542553","Type":"IssuesEvent","CreatedAt":"2018-05-11T21:48:32","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/2226","RelatedDescription":"Closed issue \"[2.1-rc1] dotnet clean fails when obj folder is missing\" (#2226) at dotnet/sdk","RelatedBody":"**How to reproduce**\r\n* Run `dotnet new classlib` in an empty folder\r\n* Delete the obj folder\r\n* Run `dotnet clean`\r\n\r\n**What happens**\r\n* Clean fails\r\n* obj folder is created with empty folders\r\n\r\n**What should happen**\r\n* Nothing, project is already clean\r\n\r\nThis is an issue on our CI server, where we run `dotnet clean` as the first step of every build, and then run `dotnet restore` as the second step. It now fails on the initial build, when it clones the repo and there is no obj folder."},{"Id":"7663527752","Type":"PullRequestEvent","CreatedAt":"2018-05-11T21:44:17","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/2230","RelatedDescription":"Closed pull request \"WIP Generate shim in PackAsTool\" (#2230) at dotnet/sdk","RelatedBody":"Is my approach to use task for most of the logic ok?\r\nIs the property name good?\r\n\r\npending loc\r\npending dedup EmbedAppNameInHostUtil, will create a separate PR that will make the task use util\r\npending test coverage for embedded path\r\npending doc on task"},{"Id":"7663527498","Type":"PullRequestEvent","CreatedAt":"2018-05-11T21:44:13","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2238","RelatedDescription":"Opened pull request \"WIP Generate shim in PackAsTool\" (#2238) at dotnet/sdk","RelatedBody":""}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"994438149693620225","CreatedAt":"2018-05-10T04:45:05+00:00","UserScreenname":"dotnet","Text":"Bye bye! See you next year for #MSBuild 👋 https://t.co/IwcXQwKarV","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":105,"FavoriteCount":10,"RawContent":null},{"Id":"993982168476012544","CreatedAt":"2018-05-08T22:33:10+00:00","UserScreenname":"dotnet","Text":".NET Core May 2018 Update https://t.co/OZkHLwpebZ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":57,"FavoriteCount":34,"RawContent":null},{"Id":"993982051735879680","CreatedAt":"2018-05-08T22:32:43+00:00","UserScreenname":"dotnet","Text":".NET Framework May 2018 Security and Quality Rollup https://t.co/jmOfJy1TEn","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":13,"FavoriteCount":7,"RawContent":null}]}},"RunOn":"2018-05-13T05:30:22.8945685Z","RunDurationInMilliseconds":8036}