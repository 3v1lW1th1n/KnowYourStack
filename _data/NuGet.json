{"Data":{"Blog":{"FeedItems":[{"Title":"Deprecating TLS 1.0 and 1.1 on NuGet.org","PublishedOn":"2019-11-15T18:58:33+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"At Microsoft, using the latest and secure encryption techniques is very important to us to ensure the security and privacy of our customers. TLS 1.0 and TLS 1.1, released in 1999 and 2006...","Href":"https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org/","RawContent":null},{"Title":"Deprecating packages on nuget.org","PublishedOn":"2019-09-30T18:29:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are excited to announce that nuget.org now supports package deprecation. This has been a long standing ask that will help the ecosystem use supported packages. As a package publisher on nuget.org,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-packages-on-nuget-org/","RawContent":null},{"Title":"New and improved NuGet Search is here!","PublishedOn":"2019-08-23T03:31:26+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Itâ€™s been a long time coming, and today we are excited to announce the new and improved search on NuGet.org leveraging Azure Search. We want to start this post with a huge thanks to you, the NuGet...","Href":"https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/","RawContent":null},{"Title":"Surfacing GitHub Usage for packages on NuGet.org","PublishedOn":"2019-07-17T20:00:23+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"There are several criteria you can use today to evaluate NuGet packages. We received feedback that you would like even more information to help choose the right packages. We&#8217;re excited to...","Href":"https://devblogs.microsoft.com/nuget/surfacing-github-usage-for-packages-on-nuget-org/","RawContent":null},{"Title":"NuGet Spring 2019 Roadmap","PublishedOn":"2019-04-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We published our last NuGet roadmap in June last year. Many of the features announced were major additions to NuGet and we have been hard at work to implement those over the last few months. In this...","Href":"https://devblogs.microsoft.com/nuget/nuget-spring-2019-roadmap/","RawContent":null},{"Title":"Enable repeatable package restores using a lock file","PublishedOn":"2018-12-17T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"With PackageReference, NuGet always tries to produce the same closure of package dependencies if the input package reference list has not changed. However, there are a few scenarios where it may not...","Href":"https://devblogs.microsoft.com/nuget/enable-repeatable-package-restores-using-a-lock-file/","RawContent":null},{"Title":"Lock down your dependencies using configurable trust policies","PublishedOn":"2018-12-05T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For the past several months we have focused on various features to improve package security and trust. Around a year back, we had announced our plans on various signing functionalities that we have...","Href":"https://devblogs.microsoft.com/nuget/lock-down-your-dependencies-using-configurable-trust-policies/","RawContent":null},{"Title":"Improved package debugging experience with the NuGet.org symbol server","PublishedOn":"2018-11-16T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Starting today, you can publish symbol packages to the NuGet.org symbol server. With NuGet.org as a single service provider for libraries and symbols, package authors and consumers will have a...","Href":"https://devblogs.microsoft.com/nuget/improved-package-debugging-experience-with-the-nuget-org-symbol-server/","RawContent":null},{"Title":"Introducing Source Code Link for NuGet packages","PublishedOn":"2018-08-27T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"NuGet.org now supports surfacing source code repository link for NuGet packages. This will enable package authors to surface both the project&#8217;s website and the source repository using the...","Href":"https://devblogs.microsoft.com/nuget/introducing-source-code-link-for-nuget-packages/","RawContent":null},{"Title":"NuGet.org starts repo-signing packages","PublishedOn":"2018-08-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In May, we implemented Stage 1 and enabled support for any NuGet.org user to submit signed packages to NuGet.org. Today, we are announcing Stage 2 of our NuGet package signing journey &#8211; tamper...","Href":"https://devblogs.microsoft.com/nuget/introducing-repository-signatures/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"10994715403","Type":"PullRequestEvent","CreatedAt":"2019-12-03T00:42:47","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7719","RelatedDescription":"Opened pull request \"Adding the USNC-Preview region for functional tests\" (#7719) at NuGet/NuGetGallery","RelatedBody":"Progress on https://github.com/NuGet/Engineering/issues/1912\r\n\r\nNeed to be able to run the functional tests against the app service. For that, new \"region\" is introduced, this change, extends the test parameter validation to include that new region. The main change is in the functional test configuration."},{"Id":"10994451375","Type":"IssuesEvent","CreatedAt":"2019-12-02T23:49:23","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7718","RelatedDescription":"Opened issue \"Revalidate does not fix up incorrect SHA512 metadata on blob\" (#7718) at NuGet/NuGetGallery","RelatedBody":"In DEV environment, the following package has the wrong metadata header.\r\n\r\n```\r\n(Invoke-WebRequest -Method HEAD https://nugetdevlegacy.blob.core.windows.net/packages/dotnetzip.1.9.3.nupkg).Headers\r\n```\r\n\r\n```\r\nKey               Value\r\n---               -----\r\nx-ms-meta-SHA512  E590Yhwxx1ShCON7b+zUPjt3ACR997nj850yPkbFnq3JzmhW1EsrQ8eWgaYzpzUjbOFM2eYKjKTk0AvyoS2+rw==\r\n```\r\n\r\nThe real hash of the content is:\r\n```\r\nDITHu9BEaavfaG3NSUeCd6jXXJvxh8UZl3xz41RgxtGpEEM627GTzQ55Hjn+/COVPI+A8HdkOx0q9bSsNHXE3Q==\r\n```\r\n\r\nThe root cause is that the Azure Storage SDK takes the metadata from the destination blob as includes it in the copy request:\r\n\r\n```\r\nPUT https://nugetdevlegacy.blob.core.windows.net/packages/dotnetzip.1.9.3.nupkg HTTP/1.1\r\nUser-Agent: Azure-Storage/9.3.2 (.NET CLR 4.0.30319.42000; Win32NT 6.2.9200.0)\r\nx-ms-copy-source: https://nugetdevlegacy.blob.core.windows.net/validation/validation-sets/e21a061d-652a-421a-9f4d-f9b9ce3de8f0/dotnetzip.1.9.3.nupkg\r\nIf-Match: \"0x8D777789423140F\"\r\nx-ms-source-if-match: \"0x8D7777973E60BAD\"\r\nx-ms-meta-SHA512: E590Yhwxx1ShCON7b+zUPjt3ACR997nj850yPkbFnq3JzmhW1EsrQ8eWgaYzpzUjbOFM2eYKjKTk0AvyoS2+rw==\r\n```\r\n\r\n[As documented](https://docs.microsoft.com/en-us/rest/api/storageservices/copy-blob#request-headers), this causes Azure Blob Storage to not use the source metadata."},{"Id":"10994361301","Type":"IssuesEvent","CreatedAt":"2019-12-02T23:31:43","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7717","RelatedDescription":"Opened issue \"[Deployment] Week of 2019-12-02\" (#7717) at NuGet/NuGetGallery","RelatedBody":"# Catalog2icon\n\n- [ ] DEV\n- [ ] Merge dev -> master\n- [ ] INT\n- [ ] PROD"},{"Id":"10991922035","Type":"IssuesEvent","CreatedAt":"2019-12-02T17:57:01","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7716","RelatedDescription":"Opened issue \"Reduce search load by rethinking the \"is indexed\" check\" (#7716) at NuGet/NuGetGallery","RelatedBody":"Today, the \"is indexed\" check has the following properties:\r\n\r\n- Cached (for 30 seconds)\r\n- Executed for all available package versions\r\n  - no matter the age (even if it is months or years old)\r\n  - even if it is unlisted (which is probably fine)\r\n- Executed for unauthenticated requests\r\n\r\n![a](https://user-images.githubusercontent.com/94054/69982501-7a4ca400-14e9-11ea-8523-53dd0d847f07.png)\r\n\r\nWe can re-evaluate pretty much everything here. For example:\r\n\r\n1. Only show it to the owner of the package\r\n   - This is a bit of a take-back but since indexing times are a minority of the package's lifetime it's probably not interesting for consumers\r\n1. Only check for the first day of the package's \"life\" (probably since last edited)\r\n1. Increase cache duration"},{"Id":"10986269762","Type":"PullRequestEvent","CreatedAt":"2019-12-02T06:03:27","Actor":"zhhyu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7715","RelatedDescription":"Opened pull request \"[Token scanning-Phase 1-4] Audit at Gallery\" (#7715) at NuGet/NuGetGallery","RelatedBody":"Audit the API key revocation at Gallery. Test locally against Blob storage and Local files.\r\nIfx PR will be out soon.\r\n\r\nHandle: https://github.com/nuget/engineering/issues/2776"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"10994406923","Type":"IssuesEvent","CreatedAt":"2019-12-02T23:40:33","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8869","RelatedDescription":"Opened issue \"DedicatedAsynchronousProcessingThread should use synchronization for task scheduling rather than polling\" (#8869) at NuGet/Home","RelatedBody":"See https://github.com/NuGet/NuGet.Client/pull/3141#discussion_r352866237\r\n\r\n//cc @zkat @dtivel "},{"Id":"10994245342","Type":"IssuesEvent","CreatedAt":"2019-12-02T23:11:10","Actor":"debonte","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8868","RelatedDescription":"Opened issue \"VisualStudio ToolBox is not populated from a NuGet package if a project is placed in a solution folder\" (#8868) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\n**NuGet product used:** VS UI\r\n\r\n**NuGet version:** 5.4.0.6292\r\n\r\n**VS version:** 16.4\r\n\r\n**OS version:** 10.0.18362.0\r\n\r\n**Worked before?:** No\r\n\r\nVisual Studio doesnâ€™t add toolbox items from a NuGet package if a project is placed into a solution folder. A VS customer created a small sample (WPF, .NET Core3) to demonstrate the issue: https://github.com/pavelovcharov/netcore3_toolbox_solutionfolders.\r\n\r\nThis is a bug in VsPathContextProvider.CreateNuGetProjectAsync. DTE.Solution.Projects doesn't include projects within solution folders. See https://www.wwwlicious.com/envdte-getting-all-projects-html/ for an explanation.\r\n\r\n## Repro steps\r\n\r\n1. git clone git://github.com/pavelovcharov/netcore3_toolbox_solutionfolders.git\r\n2. open and build TestControl.sln. The TestControl.1.0.0.nupkg package will be created\r\n3. open and build TestApp.sln, then open MainWindow.xaml. The TestControl item will be added to VisualStudio Toolbox\r\n4. open and build TestApp.With.Solution.Folders.sln. This solution contains the same project, but it is placed into a solution folder. Open MainWindow.xaml. The TestControl item is not shown in the Toolbox."},{"Id":"10994213888","Type":"IssuesEvent","CreatedAt":"2019-12-02T23:05:48","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8855","RelatedDescription":"Closed issue \"RestoreSettingsUtils needs overload to use new SettingsLoadingContext\" (#8855) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nThe new `SettingsLoadingContext` needs to be added as an overload to `RestoreSettingsUtils` so that it can be used when reading the settings initially.\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe):\r\n\r\nNuGet version (x.x.x.xxx):\r\n\r\ndotnet.exe --version (if appropriate):\r\n\r\nVS version (if appropriate):\r\n\r\nOS version (i.e. win10 v1607 (14393.321)):\r\n\r\nWorked before? If so, with which NuGet version:\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1.\r\n\r\n2.\r\n\r\n...\r\n\r\n## Other suggested things\r\n\r\n### Verbose Logs\r\n\r\nPlease include verbose logs (NuGet.exe <COMMAND> -verbosity detailed | dotnet.exe <COMMAND> --verbosity diag | etc...)\r\n\r\n### Sample Project\r\n\r\nVery helpful if you can zip a project and paste into this issue!\r\n\r\n"},{"Id":"10993672294","Type":"IssuesEvent","CreatedAt":"2019-12-02T21:46:15","Actor":"sungam3r","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8867","RelatedDescription":"Opened issue \"How to suppress contentfiles flow?\" (#8867) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe): VS 2019 \r\n\r\nNuGet version (x.x.x.xxx):\r\n\r\ndotnet.exe --version (if appropriate): 3.0.100\r\n\r\nVS version (if appropriate): 16.3.8\r\n\r\nOS version (i.e. win10 v1607 (14393.321)): Windows 10.0.14393 x64\r\n\r\nWorked before? If so, with which NuGet version: -\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\nI have been using the `PrivateAssets=\"all\"` option for a long time. It works great for `PackageReference`. Now I needed to use some content file in my project and I could not achieve the desired behavior with `PrivateAssets=\"all\"`. I want to build \"base\" package with one file `data.json` which should be consumed in \"top\" package but should not be exposed further to consumers of the \"top\" package.\r\n\r\nMy \"base\" package:\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netstandard2.0</TargetFramework>\r\n    <IncludeBuildOutput>false</IncludeBuildOutput>\r\n    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <Content Include=\"data.json\">\r\n      <PackagePath>contentFiles/any/any/data.json</PackagePath>\r\n    </Content>\r\n  </ItemGroup>\r\n</Project>\r\n```\r\nThe result seems to be good for me:\r\n![image](https://user-images.githubusercontent.com/21261007/69996708-a573d980-1563-11ea-8069-bb275803e1fb.png)\r\n\r\nMy \"top\" package:\r\n```xml\r\n<Project>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"BasePackage\" Version=\"1.0.0\">\r\n      <PrivateAssets>all</PrivateAssets>\r\n    </PackageReference>\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe Result is unexpected for me:\r\n![image](https://user-images.githubusercontent.com/21261007/69997235-bc66fb80-1564-11ea-8c80-23e46bfa7cdb.png)\r\n\r\nWhy is the file again in the content section? This file is a development dependency, some sort of settings file. The \"base\" package is a package with Roslyn analyzers and the settings file - `data.json`. I do not present the analyzers used for clarity. For them, `PrivateAssets` works as it should - they do not fall into the dependencies of the \"base\" package. But for the settings file - `data.json`, I canâ€™t get the same behavior.\r\n\r\nI spent a lot of time resolving this issue and it seems to me that I do not see any obvious solution, which is somewhere nearby. I will be very grateful for the advice.\r\n\r\n"},{"Id":"10992708404","Type":"IssuesEvent","CreatedAt":"2019-12-02T19:37:57","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/7542","RelatedDescription":"Closed issue \"Generate NuGet package on build does not use the correct package version\" (#7542) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe): VS UI\r\n\r\nNuGet version (4.9.0):\r\ndotnet.exe --version: 2.1.4\r\nVS version: 2017.9.2\r\n\r\nWorked before? If so, with which NuGet version: No\r\n\r\n## Detailed repro steps so we can see the same problem\r\n1.  Clone: https://github.com/jbe2277/waf/tree/6a973162d5256afc908e0c36b8d24ec2ffdd7e55 (Commit: 6a973162d5256afc908e0c36b8d24ec2ffdd7e55)\r\n2. Build in Release configuration\r\n3. All .nupkg are created with Version 1.0.0 (Packages are generated on build)\r\n\r\n**Expected:** \r\nThey should be created with Package Version 5.0.0-alpha1. Visual Studio shows this version in the \"Package\" UI. See `System.Waf.Core` project. \r\n\r\n**Note:**\r\nThe package version is defined by the `AssemblyInformationVersionAttribute` instead of the `PackageVersion` MSBuild property."},{"Id":"10977693124","Type":"IssuesEvent","CreatedAt":"2019-11-29T17:29:42","Actor":"mohamedmamdoh21","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8866","RelatedDescription":"Opened issue \"Ù…Ø­Ù…Ø¯ Ù…Ù…Ø¯ÙˆØ­ \" (#8866) at NuGet/Home","RelatedBody":"Please read the following information before posting the issue.\r\n\r\n## Before posting the issue...\r\n\r\n* If you're having trouble with the NuGet.org Website, please post in [NuGetGallery issues](http://github.com/nuget/nugetgallery/issues)\r\n* If you're having trouble with the NuGet client tools (the Visual Studio extension, NuGet.exe command line tool, etc.), you are in the right place.\r\n\r\nRemove the content above here and fill out details below.\r\n\r\n## Details about Problem\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe):\r\n\r\nNuGet version (x.x.x.xxx):\r\n\r\ndotnet.exe --version (if appropriate):\r\n\r\nVS version (if appropriate):\r\n\r\nOS version (i.e. win10 v1607 (14393.321)):\r\n\r\nWorked before? If so, with which NuGet version:\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1.\r\n\r\n2.\r\n\r\n...\r\n\r\n## Other suggested things\r\n\r\n### Verbose Logs\r\n\r\nPlease include verbose logs (NuGet.exe <COMMAND> -verbosity detailed | dotnet.exe <COMMAND> --verbosity diag | etc...)\r\n\r\n### Sample Project\r\n\r\nVery helpful if you can zip a project and paste into this issue!\r\n\r\n"},{"Id":"10977663355","Type":"IssuesEvent","CreatedAt":"2019-11-29T17:22:53","Actor":"rrelyea","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/1822","RelatedDescription":"Closed issue \"Feature Request: Package source git\" (#1822) at NuGet/Home","RelatedBody":"To ease the process of publishing new packages, it would be good to be able to reference git repos as source for NuGet packages. With npm you can target a published tag/version (https://docs.npmjs.com/files/package.json#git-urls-as-dependencies). This could then also be used to in a CI process to build referenced packages.\n"},{"Id":"10977558045","Type":"IssuesEvent","CreatedAt":"2019-11-29T17:00:55","Actor":"rrelyea","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/6504","RelatedDescription":"Closed issue \"Nuget tries internet even though only local package repository\" (#6504) at NuGet/Home","RelatedBody":"## Details about Problem\r\nComputer is on a network that cannot be connected to the internet.  When browsing for local package sources, VS hangs until internet timeout even though nuget.org package source not enabled.\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe):\r\n\r\nNuGet version (x.x.x.xxx): v3.6.0\r\n\r\ndotnet.exe --version (if appropriate): \r\n\r\nVS version (if appropriate): VS2015 SP3  (14.0.25420.01)\r\n\r\nOS version (i.e. win10 v1607 (14393.321)): Windows 7 SP1 - not up to date - classified computer\r\nPowerShell: 2.0\r\n\r\nWorked before? If so, with which NuGet version: \r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1.  Set up local package source and verify that it works, and uncheck 'https://www.nuget.org/api/...' source\r\n\r\n2. Disconnect your computer from the network\r\n\r\n3. Open NuGet Package Manager, click on Browse.  \r\n\r\n4.  Observe that VS2015 not responding for about 40 seconds.  Presumably until internet timeout.\r\n...\r\n\r\n## Other suggested things\r\n\r\n### Verbose Logs\r\n\r\nPlease include verbose logs (NuGet.exe <COMMAND> -verbosity detailed | dotnet.exe <COMMAND> --verbosity diag | etc...)\r\n\r\n### Sample Project\r\n\r\nVery helpful if you can zip a project and paste into this issue!\r\n\r\n"},{"Id":"10972147681","Type":"IssuesEvent","CreatedAt":"2019-11-28T22:28:43","Actor":"rrelyea","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/7533","RelatedDescription":"Closed issue \"Support specifying path to Nuget.Config for NuGet settings on VS\" (#7533) at NuGet/Home","RelatedBody":"<p>In a large, multi-solution environment, managing Nuget sources can be a problem, especially when repeated change is required in those sources.  By default, when no solution is open, you edit your machine's nuget.config and when you edit your local folder's nuget.config.  This can lead to dozens of nuget.config files existing that need to be found and updated when a change occurs. <br><br>it would be great to be able to specify a file path for the nuget.config to use for a solution.</p><p>It would be<em> better</em> if we could specify a source control path to use for nuget.config for the solution.</p>\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/idea/384979/support-specifying-path-for-nugetconfig.html\nVSTS ticketId: 731466_\n_These are the original issue comments:_\n\nFiona Niu[MSFT] on 11/18/2018, 08:22 PM (44 hours ago): <p>Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&nbsp;You will hear from us in about a week on our next steps. </p>"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"10740159942","Type":"IssuesEvent","CreatedAt":"2019-10-29T17:39:29","Actor":"anangaur","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/39","RelatedDescription":"Opened issue \"Flag vulnerable packages\" (#39) at NuGet/Announcements","RelatedBody":"The spec for 'Flagging vulnerable packages' is ready for **review**:\r\n\r\n|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Flag vulnerable packages](https://github.com/NuGet/Home/wiki/Flag-vulnerable-packages) | https://github.com/nuget/home/issues/8087|"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1190360390980395008","CreatedAt":"2019-11-01T20:10:07+00:00","UserScreenname":"nuget","Text":"The issue with the publishing pipeline has been resolved and packages are now being published normally. https://t.co/NdK8mVk7UF","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":3,"FavoriteCount":0,"RawContent":null},{"Id":"1190331936293572608","CreatedAt":"2019-11-01T18:17:03+00:00","UserScreenname":"nuget","Text":"We are experiencing an issue with our publishing pipeline causing a delay in the publishing of new packages. We areâ€¦ https://t.co/gM91QcE1Zc","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":5,"FavoriteCount":3,"RawContent":null}]}},"RunOn":"2019-12-03T05:30:46.7106913Z","RunDurationInMilliseconds":2087}