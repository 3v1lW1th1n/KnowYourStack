{"Data":{"GitHub":{"Issues":[{"Id":"418034986","IsPullRequest":true,"CreatedAt":"2019-03-07T05:06:35","Actor":"Ivanidzo4ka","Number":"2872","RawContent":null,"Title":"ImageModels in tensorflow are 4 dimensional.","State":"closed","Body":"Fixes https://github.com/dotnet/machinelearning/issues/2778\r\nWell, not exactly fixes, it's more like a hack.\r\nProper solution would be to implement Reshape transform https://github.com/dotnet/machinelearning/issues/765","Url":"https://github.com/dotnet/machinelearning/pull/2872","RelatedDescription":"Closed or merged PR \"ImageModels in tensorflow are 4 dimensional.\" (#2872)"},{"Id":"418128219","IsPullRequest":true,"CreatedAt":"2019-03-07T04:51:47","Actor":"artidoro","Number":"2876","RawContent":null,"Title":"Scrubbing task: rest of transforms","State":"open","Body":"Fixes: #2835.\r\n\r\nThis PR does the scrubbing for the following transforms:\r\n\r\n- ReplaceMissingValues\r\n- IndicateMissingValues\r\n- CustomMapping\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2876","RelatedDescription":"Open PR \"Scrubbing task: rest of transforms\" (#2876)"},{"Id":"418092547","IsPullRequest":true,"CreatedAt":"2019-03-07T01:57:59","Actor":"najeeb-kazmi","Number":"2875","RawContent":null,"Title":"Scrubbing image transforms","State":"open","Body":"Fixes #2833 ","Url":"https://github.com/dotnet/machinelearning/pull/2875","RelatedDescription":"Open PR \"Scrubbing image transforms\" (#2875)"},{"Id":"418053060","IsPullRequest":true,"CreatedAt":"2019-03-06T23:13:35","Actor":"singlis","Number":"2874","RawContent":null,"Title":"mlnetmkldeps nuget package updates","State":"open","Body":"Related to changes for updating mlnetmkldeps nuget package, issue #2211.\r\n - Updates to the nuspec file\r\n - Updates to the instructions for creating the nuget","Url":"https://github.com/dotnet/machinelearning/pull/2874","RelatedDescription":"Open PR \"mlnetmkldeps nuget package updates\" (#2874)"},{"Id":"417445315","IsPullRequest":true,"CreatedAt":"2019-03-06T22:24:41","Actor":"wschin","Number":"2851","RawContent":null,"Title":"Polish early stop rules in fast tree","State":"closed","Body":"Fix #2520. The pattern implemented in this PR is\r\n```csharp\r\n        [BestFriend]\r\n        [Argument(ArgumentType.Multiple, HelpText = \"Early stopping rule. (Validation set (/valid) is required.)\", ShortName = \"esr\", NullName = \"<Disable>\")]\r\n        [TGUI(Label = \"Early Stopping Rule\", Description = \"Early stopping rule. (Validation set (/valid) is required.)\")]\r\n        internal IEarlyStoppingCriterionFactory EarlyStoppingRuleFactory;\r\n\r\n        /// <summary>\r\n        /// The underlying state of <see cref=\"EarlyStoppingRuleFactory\"/> and <see cref=\"EarlyStoppingRule\"/>.\r\n        /// </summary>\r\n        private EarlyStoppingRuleBase _earlyStoppingRuleBase;\r\n\r\n        /// <summary>\r\n        /// Early stopping rule used to terminate training process once meeting a specified criterion. Possible choices are\r\n        /// <see cref=\"EarlyStoppingRuleBase\"/>'s implementations such as <see cref=\"TolerantEarlyStoppingRule\"/> and <see cref=\"GeneralityLossRule\"/>.\r\n        /// </summary>\r\n        public EarlyStoppingRuleBase EarlyStoppingRule\r\n        {\r\n            get { return _earlyStoppingRuleBase;  }\r\n            set\r\n            {\r\n                _earlyStoppingRuleBase = value;\r\n                EarlyStoppingRuleFactory = _earlyStoppingRuleBase.BuildFactory();\r\n            }\r\n        }\r\n```\r\nYou can see that `EarlyStoppingRuleFactory` (used in old infra) is exposed to users by adding `EarlyStoppingRule`.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2851","RelatedDescription":"Closed or merged PR \"Polish early stop rules in fast tree\" (#2851)"},{"Id":"418035994","IsPullRequest":false,"CreatedAt":"2019-03-06T22:19:37","Actor":"wschin","Number":"2873","RawContent":null,"Title":"exampleWeightColumnName v.s. weightColumnName","State":"open","Body":"In trainers like\r\n```csharp\r\n        internal RandomizedPcaTrainer(IHostEnvironment env,\r\n            string features,\r\n            string weights = null,\r\n            string featureColumnName,\r\n            string exampleWeightColumnName = null,\r\n            int rank = Options.Defaults.NumComponents,\r\n            int oversampling = Options.Defaults.OversamplingParameters,\r\n            bool center = Options.Defaults.IsCenteredZeroMean,\r\n            bool ensureZeroMean = Options.Defaults.EnsureZeroMean,\r\n            int? seed = null)\r\n```\r\nwe have `exampleWeightColumnName` but it seems `weightColumnName` is clear enough under this context. Can we switch to `weightColumnName`?","Url":"https://github.com/dotnet/machinelearning/issues/2873","RelatedDescription":"Open issue \"exampleWeightColumnName v.s. weightColumnName\" (#2873)"},{"Id":"417946748","IsPullRequest":true,"CreatedAt":"2019-03-06T22:14:40","Actor":"TomFinley","Number":"2869","RawContent":null,"Title":"PFI statistics polish","State":"closed","Body":"Fixes 2868. Also contributes minorly towards #2445, by making the statistics classes (not the context extension methods) in the `Microsoft.ML.Data` namespace.","Url":"https://github.com/dotnet/machinelearning/pull/2869","RelatedDescription":"Closed or merged PR \"PFI statistics polish\" (#2869)"},{"Id":"417534131","IsPullRequest":true,"CreatedAt":"2019-03-06T21:10:39","Actor":"Ivanidzo4ka","Number":"2863","RawContent":null,"Title":"Scrubbing schema related transforms","State":"closed","Body":"Should fix https://github.com/dotnet/machinelearning/issues/2828","Url":"https://github.com/dotnet/machinelearning/pull/2863","RelatedDescription":"Closed or merged PR \"Scrubbing schema related transforms\" (#2863)"},{"Id":"417998372","IsPullRequest":false,"CreatedAt":"2019-03-06T20:38:28","Actor":"rogancarr","Number":"2871","RawContent":null,"Title":"NumberOfIterations vs. MaxIterations","State":"open","Body":"The recent naming changes to K-Means and SDCA (and perhaps others?) resulted in `MaxIterations` being renamed to `NumberOfIterations`. Since this parameter specifies the worst-case bound and not the actual number of iterations taken in most cases, I think we should keep it named `MaxIterations`. \r\n\r\nWhatever we call it, `NumberOfIterations` is not what this parameter specifies &mdash; this is a stopping criterion, not a guaranteed execution parameter.","Url":"https://github.com/dotnet/machinelearning/issues/2871","RelatedDescription":"Open issue \"NumberOfIterations vs. MaxIterations\" (#2871)"},{"Id":"417980422","IsPullRequest":false,"CreatedAt":"2019-03-06T19:52:36","Actor":"daholste","Number":"2870","RawContent":null,"Title":"Update default n-gram length for Text Transform to match default text recipe","State":"open","Body":"@justinormont and the text team tuned default n-gram lengths for the default text recipe in the internal repo\r\n\r\nThese defaults are:\r\nWord -- bigrams (w/ unigrams)\r\nCharacter -- trigrams (w/o unigrams and bigrams)\r\n\r\nOne chart from his findings:\r\n![image](https://user-images.githubusercontent.com/4080826/51941076-8c8d1b80-23c8-11e9-89d5-e30b42db39d0.png)\r\n\r\nThe line w/ the light blue call-out represents current ML.NET defaults (Unigram + Trichar)\r\nThe line w/ the light green call-out is the requested change (Bigram + Trichar)\r\nThe line w/ the pink call-out shows the Trigram+Trichar is better in terms of accuracy, but with a time hit, and accuracy has a cross over at NumIterations > 8 for Averaged Perceptron learner.","Url":"https://github.com/dotnet/machinelearning/issues/2870","RelatedDescription":"Open issue \"Update default n-gram length for Text Transform to match default text recipe\" (#2870)"},{"Id":"417946257","IsPullRequest":false,"CreatedAt":"2019-03-06T18:25:30","Actor":"TomFinley","Number":"2868","RawContent":null,"Title":"Further polishing of PFI statistics structures","State":"open","Body":"There are a couple problems with PFI public surface that should be resolved.\r\n\r\nThe statistics classes did not have their property names updated when the underlying metrics were themselves updated, for example, as seen here.\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/adb53c41fd8c612df30f8d0213b7f459ef113724/src/Microsoft.ML.Transforms/PermutationFeatureImportanceExtensions.cs#L459-L463\r\n\r\nAlso, these statistics objects themselves exposed more of their infrastructure and workings than is necessary or helpful at this moment, for the purpose for which they are intended. (That is, exposing an abstract base class that is only necessary for internal usage, some protected members visible, being publicly instantiable, and all the usual problems.)","Url":"https://github.com/dotnet/machinelearning/issues/2868","RelatedDescription":"Open issue \"Further polishing of PFI statistics structures\" (#2868)"},{"Id":"417626434","IsPullRequest":true,"CreatedAt":"2019-03-06T05:14:21","Actor":"singlis","Number":"2867","RawContent":null,"Title":"Updating MKL","State":"open","Body":"- Updating ml.net to use mlnetDep nuget 0.0.0.9. This does a couple of things:\r\n1) Updates ML.Net to use MKL version 2008.3.10\r\n2) Enables OpenMP for MKL\r\n3) Project changes for handling the OpenMP library, note that we only copy this library on windows builds. Both Mac and Linux require this library to be installed.\r\n- Enables OpenMP for SymSGDNative\r\n- NumberOfThreads parameter now set the number of threads to use for SymSGDNative.\r\n\r\nThis related to issue #2211 ","Url":"https://github.com/dotnet/machinelearning/pull/2867","RelatedDescription":"Open PR \"Updating MKL\" (#2867)"},{"Id":"417582208","IsPullRequest":false,"CreatedAt":"2019-03-06T01:40:05","Actor":"yaeldekel","Number":"2866","RawContent":null,"Title":"Different behavior when calling Fit() on a transformer chain and on an IDataLoaderEstimator","State":"open","Body":"The following code runs without errors:\r\n\r\n```\r\n            var loader = ml.Data.CreateTextLoader<InputData>(hasHeader: true, dataSample: file);\r\n            var data = loader.Load(file);\r\n\r\n            // Pipeline.\r\n            var pipeline = ml.BinaryClassification.Trainers.GeneralizedAdditiveModels();\r\n\r\n            // Train.\r\n            var model = pipeline.Fit(data);\r\n```\r\nHowever, the following code fails with schema mismatch exception:\r\n```\r\n            var loader = ml.Data.CreateTextLoader<InputData>(hasHeader: true, dataSample: file);\r\n\r\n            // Define the same pipeline starting with the loader.\r\n            var pipeline = loader.Append(ml.BinaryClassification.Trainers.GeneralizedAdditiveModels());\r\n\r\n           // Train\r\n            var model = pipeline.Fit(file);\r\n```\r\n\r\nThis may also be related to issue #1969 .","Url":"https://github.com/dotnet/machinelearning/issues/2866","RelatedDescription":"Open issue \"Different behavior when calling Fit() on a transformer chain and on an IDataLoaderEstimator\" (#2866)"},{"Id":"417581237","IsPullRequest":true,"CreatedAt":"2019-03-06T01:35:49","Actor":"wschin","Number":"2865","RawContent":null,"Title":"Scrub projection transforms","State":"open","Body":"Fix #2831. \r\n\r\n- Iterations 1-4 only contain renaming.\r\n- Iteration 5 removes `ProjectionCatalog`, extend `NormalizationCatalog` to cover all kinds of normalizers, and create `KernelCatalog` for RFF transform.\r\n- Iteration 6 syncs the parameters in PCA and VectorWhiten.\r\n\r\nTransforms touched:\r\nRFF, LpNorm, GcNorm, PCA, Whiten, Normalize.","Url":"https://github.com/dotnet/machinelearning/pull/2865","RelatedDescription":"Open PR \"Scrub projection transforms\" (#2865)"},{"Id":"417553476","IsPullRequest":false,"CreatedAt":"2019-03-05T23:39:49","Actor":"Ivanidzo4ka","Number":"2864","RawContent":null,"Title":"Different behavior for TokenizeChar and TokenizeWords","State":"open","Body":"TokenizeChar produce vector of keys.\r\nTokenizeWords produce vector of strings.\r\nI have to add MapValueToKey to TokenizeWords in order to apply ProduceNgrams to it.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2864","RelatedDescription":"Open issue \"Different behavior for TokenizeChar and TokenizeWords\" (#2864)"},{"Id":"417526216","IsPullRequest":true,"CreatedAt":"2019-03-05T22:45:52","Actor":"shauheen","Number":"2861","RawContent":null,"Title":"Update release for 0.11","State":"closed","Body":"Updating the 0.11 release","Url":"https://github.com/dotnet/machinelearning/pull/2861","RelatedDescription":"Closed or merged PR \"Update release for 0.11\" (#2861)"},{"Id":"417531477","IsPullRequest":true,"CreatedAt":"2019-03-05T22:28:31","Actor":"artidoro","Number":"2862","RawContent":null,"Title":"Scrubbing of the key related transforms","State":"open","Body":"Fixes #2829.\r\n\r\nRelated to the scrubbing tasks. I focus on the key related transforms in this PR.\r\n\r\nNote: in most places the following method is used by the estimator to get the the columns. I kept it but made it internal, despite Ivan suggested deleting it.\r\n\r\n```charp\r\ninternal IReadOnlyCollection<KeyToVectorMappingEstimator.ColumnOptions> Columns => _columns.AsReadOnly();\r\n```\r\n\r\nList of transforms:\r\n\r\n- MapKeyToBinaryVector\r\n- MapKeyToBinaryVector\r\n- MapKeyToVector\r\n- MapKeyToValue\r\n- MapValueToKey\r\n- ValueMap\r\n- OneHotEncoding\r\n- Hash\r\n- OneHotHash\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2862","RelatedDescription":"Open PR \"Scrubbing of the key related transforms\" (#2862)"},{"Id":"417486587","IsPullRequest":false,"CreatedAt":"2019-03-05T22:18:14","Actor":"rogancarr","Number":"2857","RawContent":null,"Title":"GAM parameter names are non-standard","State":"closed","Body":"The trained `Generalized Additive Models` (aka `GAMs`) methods for obtaining trained model parameters have non-standard names and various inconsistencies.\r\n\r\nThese are the properties:\r\n```cs\r\nvar shapeFunctionsBins = gamModel.GetBinUpperBounds();\r\nvar shapeFunctionsValues = gamModel.GetBinEffects();\r\nvar numShapeFunctions = gamModel.NumShapeFunctions;\r\nvar intercept = gamModel.Intercept;\r\n```\r\n\r\nThere are a few issues here:\r\n1. Nonstandard names\r\nI propose `BinUpperBounds` and `BinEffects` be renamed `ShapeFunctionsBins` and `ShapeFunctionsBinValues`.\r\n2. Inconsistent names\r\nSometimes we say `ShapeFunctions`, sometimes we done. Same solution proposed as No. 1.\r\n3. Inconsistency in `Get` methods vs. properties\r\ne.g. `Intercept` vs. `GetBinUpperBounds`.\r\nI propose we move all the methods to be properties.\r\ne.g. `model.ShapeFunctionsBins`.\r\n4. Names leak implementation\r\n`BinUpperBounds` vs. `Bins`.\r\nQuestion: should we just say `Bins` rather than `BinUpperBounds` and say that they are the upper bounds for the bin in the documentation? `BinUpperBounds` is very verbose, and speaks to how we bin.","Url":"https://github.com/dotnet/machinelearning/issues/2857","RelatedDescription":"Closed issue \"GAM parameter names are non-standard\" (#2857)"},{"Id":"417501324","IsPullRequest":true,"CreatedAt":"2019-03-05T21:21:01","Actor":"shauheen","Number":"2860","RawContent":null,"Title":"Adding release notes for v0.11","State":"closed","Body":"Adding release notes","Url":"https://github.com/dotnet/machinelearning/pull/2860","RelatedDescription":"Closed or merged PR \"Adding release notes for v0.11\" (#2860)"},{"Id":"417460349","IsPullRequest":true,"CreatedAt":"2019-03-05T21:19:36","Actor":"Ivanidzo4ka","Number":"2852","RawContent":null,"Title":"Scrubbing feature selection","State":"closed","Body":"fixes https://github.com/dotnet/machinelearning/issues/2830","Url":"https://github.com/dotnet/machinelearning/pull/2852","RelatedDescription":"Closed or merged PR \"Scrubbing feature selection\" (#2852)"},{"Id":"417496864","IsPullRequest":true,"CreatedAt":"2019-03-05T20:54:32","Actor":"rogancarr","Number":"2859","RawContent":null,"Title":"Add V1 Introspective Training Tests","State":"open","Body":"This PR adds tests to cover the Introspective Training scenarios we want fully supported in V1.\r\n\r\nI can take an existing model file and inspect what transformers were included in the pipeline\t \t \r\nI can inspect the coefficients (weights and bias) of a linear model without much work. Easy to find via auto-complete.\t \t \r\nI can inspect the normalization coefficients of a normalizer in my pipeline without much work. Easy to find via auto-complete.\t \t \t \r\nI can inspect the trees of a boosted decision tree model without much work. Easy to find via auto-complete.\t \t \t \r\nI can inspect the topics after training an LDA transform. Easy to find via auto-complete.\t \t \t \r\nI can inspect a categorical transform and see which feature values map to which key values. Easy to find via auto-complete.\t \t \t \r\nP1: I can access the GAM feature histograms through APIs\r\n\r\nFixes: #2498 ","Url":"https://github.com/dotnet/machinelearning/pull/2859","RelatedDescription":"Open PR \"Add V1 Introspective Training Tests\" (#2859)"},{"Id":"417444223","IsPullRequest":true,"CreatedAt":"2019-03-05T20:34:39","Actor":"yaeldekel","Number":"2850","RawContent":null,"Title":"Add API to save/load models with their input schema","State":"closed","Body":"Fixes #2735. \r\n\r\nCurrently, this PR adds a public API that saves and load an IDataLoader. Later iterations will add APIs to save/load the schema directly.","Url":"https://github.com/dotnet/machinelearning/pull/2850","RelatedDescription":"Closed or merged PR \"Add API to save/load models with their input schema\" (#2850)"},{"Id":"417488244","IsPullRequest":true,"CreatedAt":"2019-03-05T20:31:23","Actor":"yaeldekel","Number":"2858","RawContent":null,"Title":"Add save/load APIs for IDataLoader","State":"open","Body":"Fixes #2735.","Url":"https://github.com/dotnet/machinelearning/pull/2858","RelatedDescription":"Open PR \"Add save/load APIs for IDataLoader\" (#2858)"},{"Id":"417478741","IsPullRequest":true,"CreatedAt":"2019-03-05T20:05:29","Actor":"ganik","Number":"2856","RawContent":null,"Title":"Fixing inconsistency in usage of LossFunction","State":"open","Body":"fixes #2174\r\nfixes #2594","Url":"https://github.com/dotnet/machinelearning/pull/2856","RelatedDescription":"Open PR \"Fixing inconsistency in usage of LossFunction\" (#2856)"},{"Id":"417414374","IsPullRequest":true,"CreatedAt":"2019-03-05T20:00:16","Actor":"TomFinley","Number":"2849","RawContent":null,"Title":"Remove random trainer and model parameters from the public surface.","State":"closed","Body":"Fix #2848.","Url":"https://github.com/dotnet/machinelearning/pull/2849","RelatedDescription":"Closed or merged PR \"Remove random trainer and model parameters from the public surface.\" (#2849)"},{"Id":"417413540","IsPullRequest":false,"CreatedAt":"2019-03-05T20:00:16","Actor":"TomFinley","Number":"2848","RawContent":null,"Title":"Internalize random model parameters and trainer","State":"closed","Body":"In #2846 it came out that we still somehow had the random predictor lying around -- I was unaware of this. This structure, being inherently stateful, will introduce subtle bugs and problems when used as part of a transformer. (E.g., what happens when you construct multiple prediction engines over the resulting transform.) These bugs are subtle, but still there and points to a deep problem with this structure. It claims to be a value mapper, so it is even claiming to be a function, which it definitely is not. Perhaps its presence was viewed as merely harmless which is why we did not remove it in prior years, but now that we're trying to finalize the API we must make a stronger case here.\r\n\r\nWe have in other places introduced other mechanisms to deal with inherently stateful predictors (e.g., what we had to do with time series). So, I think that in time we can address the need for this thing, *if there is a need*. (I have been unaware of any scenario where this thing is useful beyond a mere comparison point for evaluation, which can be done far better in a variety of ways.)\r\n\r\nThe work is fairly simple: internalize this architecturally troublesome trainer and model. (This is similar to how we are still keeping the generate number transform internal, though, that one has actual real application.) We can decide what to do with it later.","Url":"https://github.com/dotnet/machinelearning/issues/2848","RelatedDescription":"Closed issue \"Internalize random model parameters and trainer\" (#2848)"},{"Id":"417475996","IsPullRequest":true,"CreatedAt":"2019-03-05T19:58:14","Actor":"zeahmed","Number":"2855","RawContent":null,"Title":"Fixed a tensorflow test which was marked as skipped.","State":"open","Body":"This PR fixes a TensorFlow test which was marked skipped. The test got obsolete because it was creating loader from string.\r\n\r\nAlso, fixes reloading of model again in the TensorFlowModel class.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2855","RelatedDescription":"Open PR \"Fixed a tensorflow test which was marked as skipped.\" (#2855)"},{"Id":"417475922","IsPullRequest":false,"CreatedAt":"2019-03-05T19:58:03","Actor":"rogancarr","Number":"2854","RawContent":null,"Title":"Normalizer parameters are not publicly available","State":"open","Body":"A trained normalizer does not have public methods or properties that allows access to the normalization parameters. For example, a minmax normalizer doesn't have the min, max, or zero-level available.\r\n\r\nI would expect that the trained transformer would have a `.Model` property, similar to a trained learner.\r\n\r\nThis is required V1 Scenario (#2498):\r\n- I can inspect the normalization coefficients of a normalizer in my pipeline without much work. Easy to find via auto-complete.\r\n\r\n@shauheen @eerhardt @TomFinley I marked this as P13, but it could be a V1.1 as it does not change APIs, but needs new APIs. This is similar to LDA (#2197), and I think we have a more global problem where trained transforms don't expose a `.Model` property similar to our learners.","Url":"https://github.com/dotnet/machinelearning/issues/2854","RelatedDescription":"Open issue \"Normalizer parameters are not publicly available\" (#2854)"},{"Id":"417463711","IsPullRequest":false,"CreatedAt":"2019-03-05T19:43:42","Actor":"artidoro","Number":"2853","RawContent":null,"Title":"Estimators and their catalog extensions should have matching names","State":"closed","Body":"In #2827, one of the items is to make sure the estimators and their catalog extensions have matching names. Like in trainers, we should keep the suffix estimator only in the estimator name, and remove it from the catalog extension, something like the following:\r\n\r\n`NameEstimator Name(...)`\r\n\r\n***The question now is: How do we reconcile the names and which convention should we follow?***\r\n\r\nMost estimator names follow the convention: `ActionPerformingEstimator`, while in the catalog usually we use the convetion: `PerformAction`.\r\n\r\nSome examples are:\r\n\r\nEstimator Name | Catalog Name\r\n------------ | -------------\r\n`KeyToBinaryVectorMappingEstimator` | `MapKeyToBinaryVector`\r\n`MutualInformationFeatureSelectingEstimator` | `SelectFeaturesBasedOnMutualInformation`\r\n`CountFeatureSelectingEstimator` | `SelectFeaturesBasedOnCount`\r\n... | ...\r\n\r\ncc/ @sfilipi @TomFinley @glebuk @eerhardt @rogancarr @ivanbasov","Url":"https://github.com/dotnet/machinelearning/issues/2853","RelatedDescription":"Closed issue \"Estimators and their catalog extensions should have matching names\" (#2853)"},{"Id":"417283565","IsPullRequest":true,"CreatedAt":"2019-03-05T12:52:22","Actor":"jwood803","Number":"2847","RawContent":null,"Title":"Add XML doc to the ITrainerEstimator interface","State":"open","Body":"Just a quick draft for the XML docs to help fix #2629 ","Url":"https://github.com/dotnet/machinelearning/pull/2847","RelatedDescription":"Open PR \"Add XML doc to the ITrainerEstimator interface\" (#2847)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-03-07T05:30:32.662302Z","RunDurationInMilliseconds":724}