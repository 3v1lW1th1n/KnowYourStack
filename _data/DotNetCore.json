{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing ML.NET 1.2 and Model Builder updates (Machine Learning for .NET)","PublishedOn":"2019-07-17T19:25:46+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are excited to announce ML.NET 1.2 and updates to Model Builder and the CLI. ML.NET is an open-source and cross-platform machine learning framework for .NET developers. ML.NET also includes Model...","Href":"https://devblogs.microsoft.com/dotnet/announcing-ml-net-1-2-and-model-builder-updates-machine-learning-for-net/","RawContent":null},{"Title":"Write Better Code Faster with Roslyn Analyzers","PublishedOn":"2019-07-10T16:40:11+00:00","CommentsCount":9,"FacebookCount":0,"Summary":"Roslyn, the .NET compiler platform, helps you catch bugs even before you run your code. One example is Roslynâ€™s spellcheck analyzer that is built into Visual Studio. Letâ€™s say you are creating a...","Href":"https://devblogs.microsoft.com/dotnet/write-better-code-faster-with-roslyn-analyzers/","RawContent":null},{"Title":".NET Core July 2019 Updates â€“ 2.1.12 and 2.2.6","PublishedOn":"2019-07-09T17:50:51+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core July 2019 Update. These updates contain security and reliability fixes. See the individual release notes for details on updated packages.\nNOTE: If you are a...","Href":"https://devblogs.microsoft.com/dotnet/net-core-july-2019/","RawContent":null},{"Title":".NET Framework July 2019 Security and Quality Rollup","PublishedOn":"2019-07-09T17:22:13+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are releasing the July 2019 Cumulative Update, Security and Quality Rollup, and Security Only Update for .NET Framework.\nSecurity\nCVE-2019-1006 â€“Â WCF/WIF SAML Token Authentication Bypass...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-july-2019-security-and-quality-rollup/","RawContent":null},{"Title":".NET Framework June 27, 2019 Cumulative Update for Windows 10 version 1903","PublishedOn":"2019-06-27T18:01:46+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Today, we released the June 2019 Cumulative Update for .NET Framework 3.5 and 4.8 on Windows 10 version 1903.\nQuality and Reliability\nThis release contains the following quality and reliability...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-june-27-2019-cumulative-update-for-windows-10-version-1903/","RawContent":null},{"Title":"Help us shape the future of .NET for Apache Spark","PublishedOn":"2019-06-20T17:58:41+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"Apache Sparkâ„¢ is a general-purpose distributed processing engine for analytics over large data set typically terabytes or petabytes of data. Apache Spark can be used for processing batches of data,...","Href":"https://devblogs.microsoft.com/dotnet/help-us-shape-the-future-of-net-for-apache-spark/","RawContent":null},{"Title":"Create interactive documentation with the new Try .NET template","PublishedOn":"2019-06-20T16:05:37+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"In our previous post, we announced dotnet tryÂ a global tool which allows developers to create interactive workshops and documentation. Tutorials created with dotnet try let users start learning...","Href":"https://devblogs.microsoft.com/dotnet/create-interactive-documentation-with-the-new-try-net-template/","RawContent":null},{"Title":".NET Framework June 2019 Preview of Quality Rollup","PublishedOn":"2019-06-19T00:12:52+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"Today, we are releasing the June 2019 Preview of Quality Rollup.\nQuality and Reliability\nThis release contains the following quality and reliability improvements.\nWPF1\nAddresses an issue in which...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-june-2019-preview-of-quality-rollup/","RawContent":null},{"Title":"The Evolving Infrastructure of .NET Core","PublishedOn":"2019-06-18T18:11:59+00:00","CommentsCount":40,"FacebookCount":0,"Summary":"WithÂ .NET Core 3.0 Preview 6Â out the door, we thought it would be useful to take a brief look at the history of our infrastructure systems and the significant improvements that have been made in the...","Href":"https://devblogs.microsoft.com/dotnet/the-evolving-infrastructure-of-net-core/","RawContent":null},{"Title":"Announcing Entity Framework Core 3.0 Preview 6 and Entity Framework 6.3 Preview 6","PublishedOn":"2019-06-13T20:35:52+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"New previews of the next versions of EF Core and EF 6 are now available on NuGet.Org.\nWhat is new in EF Core 3.0 Preview 6\nIn recent months, a lot of our efforts have been focused on a new LINQ...","Href":"https://devblogs.microsoft.com/dotnet/announcing-entity-framework-core-3-0-preview-6-and-entity-framework-6-3-preview-6/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"9814702366","Type":"PullRequestEvent","CreatedAt":"2019-06-13T10:49:31","Actor":"gep13","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/147","RelatedDescription":"Opened pull request \"(GH-111) Update SourceLink location\" (#147) at dotnet/foundation","RelatedBody":""},{"Id":"9812903344","Type":"PullRequestEvent","CreatedAt":"2019-06-13T06:28:59","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/146","RelatedDescription":"Merged pull request \"Update Cake Project Contacts\" (#146) at dotnet/foundation","RelatedBody":"@jongalloway just noticed that this wasn't up to date."},{"Id":"9812878014","Type":"PullRequestEvent","CreatedAt":"2019-06-13T06:23:52","Actor":"gep13","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/146","RelatedDescription":"Opened pull request \"Update Cake Project Contacts\" (#146) at dotnet/foundation","RelatedBody":"@jongalloway just noticed that this wasn't up to date."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"9971220766","Type":"IssuesEvent","CreatedAt":"2019-07-08T23:25:31","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/117","RelatedDescription":"Opened issue \"System.Text.Json usability study results\" (#117) at dotnet/announcements","RelatedBody":"We've performed a usability study on the new `System.Text.Json` APIs which will replace JSON.NET as the default JSON experience in .NET Core 3.0:\r\n\r\n* We focused on the primary \"getting started\" scenarios to validate that we picked the right type- and method names.\r\n* We simulated what we believe to be common error cases to validate that our exception messages are understandable and actionable.\r\n* Since we were short on time, we couldn't use the recruiting provided by the UX lab but instead brought in our own developers, which we recruited from the .NET engineering team\r\n\r\nThis has worked out well for us as we were able to get short term feedback which resulted in significant improvements to the overall API shape and usability. In the future, we should do more API focused UX studies ðŸ˜Š\r\n\r\n## Tasks\r\n\r\n| # | Description                            | Code\r\n|:--|:---------------------------------------|:-----\r\n| 1 | Serialize and pretty print             | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario1/Program.cs#L19-L31)\r\n| 2 | Deserialize with trailing comma        | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario2/Program.cs#L19-L25)\r\n| 3 | Deserialize with custom property names | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario3/Program.cs#L30-L45)\r\n| 4 | Read with DOM                          | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario4/Program.cs#L20-L35)\r\n| 5 | Pretty print an existing JSON file     | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario5/Program.cs#L26-L34)\r\n\r\n## Hypotheses\r\n\r\nWe expect developers to...\r\n\r\n| # | Description                                            | Result\r\n|:--|:-------------------------------------------------------|:---------------\r\n| 1 | ...assume the APIs are similar/identical to JSON.NET   |  Validated\r\n| 2 | ...complete tasks 1-4 successfully                     |  Validated\r\n| 3 | ...struggle/unable to complete the task 5, because it requires working with two different components which is very different from JSON.NET |  Invalidated\r\n| 4 | ...not look at documentation for most of their coding as IntelliSense is good enough |  Invalidated\r\n| 5 | ...be happy with the experience of using the API                                     |  Validated\r\n| 6 | ...plan on using `System.Text.Json` for their next JSON task                         |  Partially Validated\r\n\r\n##  Key Observations\r\n\r\n* Everyone completed scenarios #1-#3, 2 didn't complete #4, 6 didn't complete #5\r\n    - The reason was always \"out of time\". Every person who started a scenario successfully finished it.\r\n    - We feel this validates that we picked the right scope for a 60 minute study of people from various backgrounds\r\n* Overall people liked the new API\r\n    - Key value prop for most people was the fact that \"it's now built in\"\r\n    - Very few mentioned perf and the ones that did thought that it probably wouldn't make a difference in their scenarios.\r\n    - Most people said they would prefer `System.Text.Json` for new APIs, but would stick to JSON.NET in code that already uses it.\r\n    - **[Action]** None, this is in line with what we expected.\r\n* Virtually everyone tried to google for sample code in the documentation\r\n    - Everyone found our blog post and online documentation\r\n    - People new to .NET were confused that JSON.NET and `System.Text.Json` weren't the same thing\r\n    - Everyone complained that the current docs are lacking, especially sample code.\r\n    - **[Action]** Docs are work in progress. We plan on shipping with a fully documented API surface and sample code.\r\n* Virtually everyone found the key type relatively quickly\r\n    - Some people were confused when types were static, rather than something that one can new up\r\n    - **[Action]** None. This is by-design as we try to reduce the number of allocations.\r\n* Virtually everyone had trouble selecting the correct method on\r\n  `JsonSerializer`\r\n    - We chose a very complicated naming convention\r\n    - **[Action]** We simplified it by using names that people in the study told us were looking for.\r\n* Most of our error messages were well received because they told people what\r\n  the problem is & how they can fix them.\r\n    - One error message was unclear because we reported an unexpected character when we could have reported that we didn't expect a comment.\r\n    - **[Action]** We've reworded the error message.\r\n    - We had one error message that was generated by a lower layer and provided an action item that doesn't make sense when people receive it when using the higher layer component.\r\n    - **[Action]** We've reworded the error message to be more generic so it makes sense for both kind of consumers.\r\n* Virtually everyone used the new Roslyn completion feature which will also show\r\n  types from namespaces not imported yet.\r\n    - However, virtually nobody realized that they were doing it.\r\n    - This caused confusion when people found other APIs that happen to include Json in them, specifically the old data contract serialization.\r\n    - **[Action]** Talk to the Roslyn IDE team to see if this something more people will run into. This could prove to be especially problematic for technologies that share type names (e.g. `UserControl` in WinForms and WPF) and both are referenced by the project.\r\n* Optional parameters and `async`/`await` are usability cliffs\r\n    - Many were confused by optional parameters and tried to pass them in, even though they didn't have to.\r\n    - **[Action]** Talk to the Roslyn IDE team to see if we can visualize them better in VS.\r\n    - **[Action]** Try to avoid heavy use of optional parameters for mainline APIs.\r\n    - Async is a very steep cliff. People have no idea what to do in their code to make async work. While IntelliSense shows the usage by prefixing it with await, people didn't notice that.\r\n    - **[Action]** Unclear; this is a broader issue.\r\n* Virtually nobody used F1 to get help for APIs\r\n    - *Surprise*. I expected more people to use <kbd>F1</kbd>.\r\n* Virtually everyone used F12 to explore the API (\"metadata view\")\r\n    - *Surprise*. I expected most people to explore the type via the\r\n      IntelliSense completion\r\n* Nobody used Object Browser to explorer the APIs\r\n    - *Surprise*. I expected at least some people to.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/39304."},{"Id":"9963969636","Type":"IssuesEvent","CreatedAt":"2019-07-08T03:13:39","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/116","RelatedDescription":"Opened issue \"Updates to releases.json (.NET Core release metadata)\" (#116) at dotnet/announcements","RelatedBody":"**The changes described in this issue will be live with the .NET Core July update on 7/9/2019.**\r\n\r\nThe releases.json files (e.g. [2.2 releases.json](https://raw.githubusercontent.com/dotnet/core/master/release-notes/2.2/releases.json)) are comprehensive metadata files which capture details of each .NET Core release. These files, along with the top level [releases-index.json](https://raw.githubusercontent.com/dotnet/core/master/release-notes/releases-index.json), are becoming increasingly important .NET Core release assets. These files, one for each major.minor channel, are relied upon by many to detect when updates for .NET Core are available, discover security update details and other uses.\r\n\r\nChanges are sometimes necessary, and the growing dependencies require that we treat compatibility of the schema with the utmost care. This announcement describes an addition to the releases.json schema.\r\n\r\n## SDK Versions and Visual Studio\r\n\r\nBecause of current .NET Core SDK product construction dependencies, there is a hard link between the Runtime, SDK, toolset (compilers, msbuild, nuget, and other components), and Visual Studio. Simplistically, this means that when anything updates, everything updates. The unfortunate result of this linking is that multiple versions of the SDK are released with each monthly update for each supported versions of Visual Studio. For example, the May Update for .NET Core 2.2 included the 2.2.5 runtime, 2.2.107 SDK for Visual Studio 2017 and 2.2.204 for Visual Studio 2019 and yet another pair of SDK versions for .NET Core 2.1. An example of this is the [2.2.5 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.5/2.2.5.md). \r\n\r\nThis is a confusing situation and we are working to mitigate the need to release multiple SDKs with .NET Core 3.0. The need for multiple SDK versions will persist for 2.1 LTS.\r\n\r\n## Adding the SDKS array\r\n\r\nTo appropriately model multiple SDKs per release, we are adding an SDKs array to releases.json, which will contain SDK objects. The top-level SDK object will represent the highest versioned SDK for a given update. Using the previous 2.2.5 update example, SDK 2.2.204 is in the top SDK object as well as duplicated in the SDKS array. All other applicable 2.2* SDK objects are included in the SDKS array. The SDK objects within the array will carry specific Visual Studio compatibility and version inclusion information to provide appropriate context.\r\n\r\nHere is a partial example of the new array based on the upcoming July update. \r\nAgain, this will be additive and the previous SDK object will include the highest SDK version for the release.\r\n\r\n```json\r\n{\r\n  \"sdks\": [\r\n    {\r\n        \"version\": \"2.2.301\",\r\n        \"version-display\": \"2.2.301\",\r\n        \"runtime-version\": \"2.2.6\",\r\n        \"vs-version\": \"16.1.3\",\r\n        \"vs-support\": \"Visual Studio 2019 (v16.1)\",\r\n        \"csharp-version\": \"7.3\",\r\n        \"fsharp-version\": \"4.5\",\r\n        \"vb-version\": null,\r\n        \"files\": [\r\n            {\r\n            \"name\": \"\",\r\n            \"rid\": \"\",\r\n            \"url\": \"\",\r\n            \"hash\": \"\"\r\n            }\r\n        ]\r\n    }\r\n    ]\r\n}\r\n```\r\n\r\n## vs-version and the Runtime\r\n\r\nThe same version of the runtime is included in multiple versions of Visual Studio. To account for this, the vs-version field is being updated to a comma-delimited string. The string will represent all versions of Visual Studio which first include the particular .NET Core update. Again, an example from the upcoming July Update.\r\n\r\n```json\r\n\"runtime\": {\r\n        \"version\": \"2.2.6\",\r\n        \"version-display\": \"2.2.6\",\r\n        \"vs-version\": \"15.9.13, 16.1.3, 16.2.0\",\r\n```\r\n\r\nThe same `vs-versions` changes will be seen in the `aspnetcore-runtime` object.\r\n\r\n## Future Enhancements\r\n\r\nThere are other improvements to the schema which have been suggested by the communitiy which we are evaluating. Generally, theses enhancements are additive and should not represent compatibility comprimises for existing parsers and similar announcements will be published ahead of any changes.\r\n\r\n"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"10042689225","Type":"PullRequestEvent","CreatedAt":"2019-07-19T04:30:10","Actor":"sdmaclea","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/25775","RelatedDescription":"Merged pull request \"Arm32 support VFP registers context to/from native context\" (#25775) at dotnet/coreclr","RelatedBody":""},{"Id":"10042616751","Type":"PullRequestEvent","CreatedAt":"2019-07-19T04:07:09","Actor":"jashook","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/25032","RelatedDescription":"Merged pull request \"Fail to explicitly tail call on x86 unix.\" (#25032) at dotnet/coreclr","RelatedBody":"Fixes #25020 "},{"Id":"10042616738","Type":"IssuesEvent","CreatedAt":"2019-07-19T04:07:09","Actor":"jashook","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/25020","RelatedDescription":"Closed issue \"[RyuJIT/Linux/x86] Tail-call optimization leads to assert on Linux/x86 \" (#25020) at dotnet/coreclr","RelatedBody":"Following example crashes due to assert in `morph.cpp` on Linux/x86:\r\n```cs\r\nusing System;\r\nusing System.Reflection;\r\nusing System.Reflection.Emit;\r\n\r\nnamespace jitx86\r\n{\r\n    class Program\r\n    {    \r\n        static void Main(string[] args)\r\n        {\r\n            DynamicMethod dm = new DynamicMethod(\"MyMethod\", typeof(string), new Type[] { typeof(string), typeof(string) });\r\n            \r\n            ILGenerator generator = dm.GetILGenerator();\r\n            generator.Emit(OpCodes.Ldarg_0);\r\n            generator.Emit(OpCodes.Ldarg_1);\r\n            generator.Emit(OpCodes.Tailcall);\r\n            generator.EmitCall(OpCodes.Call, typeof(String).GetMethod(\"Concat\", new Type[] { typeof(string), typeof(string) }), null);\r\n            generator.Emit(OpCodes.Ret);\r\n\r\n            string a = \"1234\";\r\n            string b = \"abcd\";\r\n            \r\n            Console.WriteLine(dm.Invoke(null, BindingFlags.Default, null, new object[] {a, b}, null));\r\n        }\r\n    }\r\n}\r\n```\r\n```\r\n$ ./corerun jitx86.dll\r\n...\r\nMorphing BB01 of 'DynamicClass:MyMethod(ref,ref):ref'\r\n\r\nfgMorphTree BB01, stmt 1 (before)\r\n               [000006] --C-G-------              *  RETURN    ref   \r\n               [000003] --C-G-------              \\--*  CALL      ref    System.String.Concat\r\n               [000001] ------------ arg0            +--*  LCL_VAR   ref    V00 arg0         \r\n               [000002] ------------ arg1            \\--*  LCL_VAR   ref    V01 arg1         \r\nfgMorphTailCall (before):\r\n               [000003] --CXG-------              *  CALL      ref    System.String.Concat\r\n               [000001] ------------ arg0         +--*  LCL_VAR   ref    V00 arg0         \r\n               [000002] ------------ arg1         \\--*  LCL_VAR   ref    V01 arg1         \r\nfgMorphTailCall (after):\r\n               [000003] --CXG-------              *  CALL      ref    System.String.Concat\r\n               [000001] ------------ arg0         +--*  LCL_VAR   ref    V00 arg0         \r\n               [000002] ------------ arg1         +--*  LCL_VAR   ref    V01 arg1         \r\n               [000008] ------------ arg2         +--*  CNS_INT   int    0\r\n               [000010] ------------ arg3         +--*  CNS_INT   int    9\r\n               [000012] ------------ arg4         +--*  CNS_INT   int    8\r\n               [000014] ------------ arg5         \\--*  CNS_INT   int    7\r\n\r\nGTF_CALL_M_TAILCALL bit set for call [000003]\r\nNew Basic Block BB02 [0002] created.\r\nNew Basic Block BB03 [0003] created.\r\n\r\nRemoving statement [000007] in BB01 as useless:\r\n               [000007] ------------              *  STMT      void  (IL 0x000...0x004)\r\n               [000003] --CXG-------              \\--*  CALL      void   System.String.Concat\r\n               [000001] ------------ arg0            +--*  LCL_VAR   ref    V00 arg0         \r\n               [000002] ------------ arg1            +--*  LCL_VAR   ref    V01 arg1         \r\n               [000008] ------------ arg2            +--*  CNS_INT   int    0\r\n               [000010] ------------ arg3            +--*  CNS_INT   int    9\r\n               [000012] ------------ arg4            +--*  CNS_INT   int    8\r\n               [000014] ------------ arg5            \\--*  CNS_INT   int    7\r\n\r\nBB01 becomes empty\r\n*** creating inlined GC Poll in top block BB01\r\n               [000023] ------------              *  STMT      void  (IL   ???...  ???)\r\n               [000022] ------------              \\--*  JTRUE     void  \r\n               [000020] ------------                 |  /--*  CNS_INT   int    0\r\n               [000021] J------N----                 \\--*  EQ        int   \r\n               [000019] V-----------                    \\--*  IND       int   \r\n               [000018] ------------                       \\--*  CNS_INT(h) int    0xF7AE7098 ptr\r\n\r\n poll block is BB02\r\n               [000017] ------------              *  STMT      void  (IL   ???...  ???)\r\n               [000016] --C-G-------              \\--*  CALL help void   HELPER.CORINFO_HELP_POLL_GC\r\n\r\n bottom block is BB03\r\n               [000007] ------------              *  STMT      void  (IL 0x000...0x004)\r\n               [000003] --CXG-------              \\--*  CALL      void   System.String.Concat\r\n               [000001] ------------ arg0            +--*  LCL_VAR   ref    V00 arg0         \r\n               [000002] ------------ arg1            +--*  LCL_VAR   ref    V01 arg1         \r\n               [000008] ------------ arg2            +--*  CNS_INT   int    0\r\n               [000010] ------------ arg3            +--*  CNS_INT   int    9\r\n               [000012] ------------ arg4            +--*  CNS_INT   int    8\r\n               [000014] ------------ arg5            \\--*  CNS_INT   int    7\r\n\r\n\r\nfgMorphTree BB01, stmt 1 (after)\r\n               [000003] --CXG-------              *  CALL      void   System.String.Concat\r\n               [000001] ------------ arg0         +--*  LCL_VAR   ref    V00 arg0         \r\n               [000002] ------------ arg1         +--*  LCL_VAR   ref    V01 arg1         \r\n               [000008] ------------ arg2         +--*  CNS_INT   int    0\r\n               [000010] ------------ arg3         +--*  CNS_INT   int    9\r\n               [000012] ------------ arg4         +--*  CNS_INT   int    8\r\n               [000014] ------------ arg5         \\--*  CNS_INT   int    7\r\n\r\nMorphing BB02 of 'DynamicClass:MyMethod(ref,ref):ref'\r\n\r\nfgMorphTree BB02, stmt 2 (before)\r\n               [000016] --C-G-------              *  CALL help void   HELPER.CORINFO_HELP_POLL_GC\r\nInitializing arg info for 16.CALL:\r\n\r\nMorphing args for 16.CALL:\r\n\r\n\r\nMorphing BB03 of 'DynamicClass:MyMethod(ref,ref):ref'\r\n\r\nfgMorphTree BB03, stmt 3 (before)\r\n               [000003] --CXG-------              *  CALL      void   System.String.Concat\r\n               [000001] ------------ arg0         +--*  LCL_VAR   ref    V00 arg0         \r\n               [000002] ------------ arg1         +--*  LCL_VAR   ref    V01 arg1         \r\n               [000008] ------------ arg2         +--*  CNS_INT   int    0\r\n               [000010] ------------ arg3         +--*  CNS_INT   int    9\r\n               [000012] ------------ arg4         +--*  CNS_INT   int    8\r\n               [000014] ------------ arg5         \\--*  CNS_INT   int    7\r\nInitializing arg info for 3.CALL:\r\n\r\nAssert failure(PID 20524 [0x0000502c], Thread: 20524 [0x502c]): Assertion failed 'NYI: Morphing Vararg call not yet implemented on non Windows targets.' in 'DynamicClass:MyMethod(ref,ref):ref' (IL size 10)\r\n\r\n    File: /media/kbaladurin/data/dotnet/forked/coreclr-sec/src/jit/morph.cpp Line: 2629\r\n    Image: /media/kbaladurin/data/dotnet/clr_overlay_x86/corerun\r\n\r\nAborted (core dumped)\r\n```\r\n\r\n`fgMorphTailCall` marks `3.CALL` as varargs on x86 and amd64 and compilation fails due to NYI in `fgInitArgInfo` (on amd64 `fgMorphTailCall` isn't called as fast tail-call optimization is used). I think we can temporary disable tail-call optimization for Linux/x86:\r\n```diff\r\ndiff --git a/src/jit/morph.cpp b/src/jit/morph.cpp\r\nindex 5f675dd76b..ddd5288ca6 100644\r\n--- a/src/jit/morph.cpp\r\n+++ b/src/jit/morph.cpp\r\n@@ -8227,6 +8227,11 @@ GenTree* Compiler::fgMorphCall(GenTreeCall* call)\r\n                 }\r\n             }\r\n         }\r\n+#elif defined(_TARGET_UNIX_)\r\n+        if (!canFastTailCall && szFailReason == nullptr)\r\n+        {\r\n+            szFailReason = \"Morphing Vararg call that needed for tailcall optimization on non Windows targets is not yet implemented.\";\r\n+        }\r\n #endif // !_TARGET_X86_\r\n \r\n         if (szFailReason != nullptr)\r\n```\r\n\r\nThank you!"},{"Id":"10042493614","Type":"IssuesEvent","CreatedAt":"2019-07-19T03:30:31","Actor":"iskiselev","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/25789","RelatedDescription":"Opened issue \"ProfilerAPI: Is it safe to cache IMetaDataImport\" (#25789) at dotnet/coreclr","RelatedBody":"Is it safe for profiler to cache IMetaDataImport for a module for a module lifetime?\r\nI'm asking this question, as ICorProfilerInfo::GetModuleMetaData will fail if it is called from P/Invoke  callback, but looks like calls for cached IMetaDataImport methods works fine even from P/Invoke. \r\nMSDN documentation does not give any hints about IMetaDataImport lifetime and any problems that may be introduced by preserving IMetaDataImport non-released."},{"Id":"10042398899","Type":"IssuesEvent","CreatedAt":"2019-07-19T03:03:25","Actor":"AaronRobinsonMSFT","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/25733","RelatedDescription":"Closed issue \"Calling function from native code from multiple threads doesn't work\" (#25733) at dotnet/coreclr","RelatedBody":"I have been trying to call managed methods from native code. I do so getting the function pointer with `RuntimeMethodHandle.GetFunctionPointer`, then hardcoding the function address on the native code (it is generated at runtime with LLVM).\r\n\r\nIt seems to work fine when the method is called from a single thread. However as soon as I have multiple threads calling the managed method concurrently, it quickly breaks. I get random exceptions on each run, usually caused by an access violation on some GC function, from what I know this indicates managed heap corruption.\r\n\r\nI managed to create a very simple sample program that exhibits the issue, at least on Windows 10, I still need to test it on linux. The code can be found [here](https://gist.github.com/gdkchan/5898d573f41431722e99907be4612407).\r\n\r\nRunning the above code here shows the issue very quickly. It usually shows the following exception with the latest .NET Core 3.0 Preview:\r\n```\r\nInternal CLR error. (0x80131506)\r\n   at System.GC.Collect()\r\n   at gccrash.Program.GCStress()\r\n   at gccrash.Program+<>c__DisplayClass0_0.<Main>g__Work|0()\r\n   at System.Threading.ThreadHelper.ThreadStart_Context(System.Object)\r\n   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)\r\n   at System.Threading.ThreadHelper.ThreadStart()\r\n```\r\nA few observations that I was able to make about this issue:\r\n- It only happens when the managed code is called from native code on multiple threads. On a single threaded environment it seems to work. Puting a lock on the managed method also seems to fix the issue. Seems to be some sort of race condition.\r\n- Passing a delegate to the native method rather than the pointer directly also seems to fix it for the miltithreaded scenario, but that's not really suitable for what I do.\r\n\r\nSo, I'm not sure about what is causing this issue. Are we not supposed to pass the pointer from `GetFunctionPointer` to native functions? I don't see anything indicating that on the documentation."},{"Id":"10042309860","Type":"PullRequestEvent","CreatedAt":"2019-07-19T02:38:47","Actor":"andy-ms","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/25788","RelatedDescription":"Opened pull request \"Fix typo: `_TARGET_X86` -> `_TARGET_X86_`\" (#25788) at dotnet/coreclr","RelatedBody":"This typo was in #24989 so would be a new regression in 3.0.\r\nIn an x86 build, it causes us to not get the cache size correct,\r\nleading us to use a smaller default cache size and do more GCs.\r\n\r\nTested with GCPerfSim and this PR reduces TotalNumberGCs by 33% using an x86 build.\r\n\r\nI believe this is an \"Unacceptable performance regression from 2.2 that is not a corner case\" so meets the bar for 3.0."},{"Id":"10042296732","Type":"PullRequestEvent","CreatedAt":"2019-07-19T02:35:23","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/25772","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/core-setup\" (#25772) at dotnet/coreclr","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d21e78e6-fa30-42ea-2807-08d690bc5860)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190717.09\r\n- **Date Produced**: 7/17/2019 11:25 PM\r\n- **Commit**: 39e9f208652c221c2e6ccf833e6fe4a99420c943\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.27917.9\r\n\r\n[marker]: <> (End:d21e78e6-fa30-42ea-2807-08d690bc5860)\r\n\r\n"},{"Id":"10042290434","Type":"PullRequestEvent","CreatedAt":"2019-07-19T02:33:43","Actor":"cshung","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/25780","RelatedDescription":"Merged pull request \"A simple disassembler fix\" (#25780) at dotnet/coreclr","RelatedBody":"Check out the Figure 2-9 of Intel's manual if you do not trust the comments."},{"Id":"10042287199","Type":"PullRequestEvent","CreatedAt":"2019-07-19T02:32:54","Actor":"tannergooding","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/25763","RelatedDescription":null,"RelatedBody":"This resolves #25505 for release/3.0 and is a backport of https://github.com/dotnet/coreclr/pull/25750.\r\n\r\nBased on the original issue where JIT_MemCpy was changed to use rep movsb (see #7198), there was:\r\n\r\nminor improvement (~5%) for arrays of length 0 to 120\r\ngood improvement (~40%) for arrays of length 130 to 510\r\n~47% for arrays of length 130 to 310\r\n~39% for arrays of length 320 to 440\r\n~27% for arrays of length 450 to 510\r\nlittle improvement (~1%) for arrays above 510 in length\r\nThis was only tested for 520 and 1000 bytes\r\nHowever, on AMD processors, there are additional limitations around rep movsb and when it is beneficial to use. The common conditions under which it is being used in the JIT_MemCpy method today actually cause a 2x perf decrease for arrays larger than 512 bytes.\r\n\r\nHaving a custom memcpy routine adds additional maintenance burden, can be error prone, is generally not as widely tested, and does not get many of the optimizations that the CRT implementations receives. This, coupled with the overall minor improvements for small arrays on Intel processors and the 2x regression for arrays over 512 bytes on AMD processors is resulting in the custom memcpy routine being removed.\r\n\r\nIt would be beneficial for any future improvements to memcpy to be made directly against glibc and crt instead."},{"Id":"10042287034","Type":"PullRequestEvent","CreatedAt":"2019-07-19T02:32:52","Actor":"tannergooding","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/pull/25763","RelatedDescription":"Closed pull request \"Fixing Buffer::BlockCopy, JIT_MemCpy, and JIT_MemSet to just call the appropriate CRT functions for x64 Windows, as is already done for all other platforms/targets\" (#25763) at dotnet/coreclr","RelatedBody":"This resolves #25505 for release/3.0 and is a backport of https://github.com/dotnet/coreclr/pull/25750.\r\n\r\nBased on the original issue where JIT_MemCpy was changed to use rep movsb (see #7198), there was:\r\n\r\nminor improvement (~5%) for arrays of length 0 to 120\r\ngood improvement (~40%) for arrays of length 130 to 510\r\n~47% for arrays of length 130 to 310\r\n~39% for arrays of length 320 to 440\r\n~27% for arrays of length 450 to 510\r\nlittle improvement (~1%) for arrays above 510 in length\r\nThis was only tested for 520 and 1000 bytes\r\nHowever, on AMD processors, there are additional limitations around rep movsb and when it is beneficial to use. The common conditions under which it is being used in the JIT_MemCpy method today actually cause a 2x perf decrease for arrays larger than 512 bytes.\r\n\r\nHaving a custom memcpy routine adds additional maintenance burden, can be error prone, is generally not as widely tested, and does not get many of the optimizations that the CRT implementations receives. This, coupled with the overall minor improvements for small arrays on Intel processors and the 2x regression for arrays over 512 bytes on AMD processors is resulting in the custom memcpy routine being removed.\r\n\r\nIt would be beneficial for any future improvements to memcpy to be made directly against glibc and crt instead."},{"Id":"10042228271","Type":"IssuesEvent","CreatedAt":"2019-07-19T02:17:43","Actor":"swift-kim","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/25787","RelatedDescription":"Opened issue \"[Question] IBC training and partial crossgen on Linux\" (#25787) at dotnet/coreclr","RelatedBody":"I'm trying to generate optimized (partial-ngened) assemblies against user applications using IBC data on Linux system (armel Tizen). The system is running the latest coreclr runtime and crossgen built from source. However, I have no other tools like `ibcmerge.exe` (is it even available for use?)\r\n\r\nI have created instrumented images of some target assemblies (including system assemblies), and obtained training data (.ibc files) by running different applications several times. Here is a [sample](https://github.com/dotnet/coreclr/files/3408987/ibc-files.zip). As far as I see in HexViewer (I found no other ways to read the files), the files have similar structures to those of _optimization.linux-x64.ibc.corefx_ components therefore they look quite valid.\r\n\r\nI have run crossgen again with the IBC data as input and passing `PartialNGen`/`UseIBCFile` as true, and in fact it could generate some kind of optimized images for the assemblies. However, the profiling result shows they are optimized for only the first application I have run for training, but not exactly for other applications.\r\n\r\n**TL;DR** - Is it able to train partial-ngened assemlibes with mutiple scenarios/runs based purely on crossgen?\r\n\r\nAny comments will help a lot. Thank you."},{"Id":"10042219026","Type":"IssuesEvent","CreatedAt":"2019-07-19T02:15:13","Actor":"sdmaclea","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/25758","RelatedDescription":"Closed issue \"Debugger refuses to attach to 5.0 builds\" (#25758) at dotnet/coreclr","RelatedBody":"Apparently rebranding to 5.0 has caused the debugger to assert\r\n```\r\n Assertion Failed\r\n Unsupported version of mscorlib\r\n    at Ilrun.DefaultHost.GetClrVersionFromSystemAssembly()\r\n    at Ilrun.DefaultHost.get_ClrVersionImpl()\r\n    at Ilrun.ClrVersionUtility.GetClrVersion(IHost host)\r\n    at Ilrun.DefaultSlotFactory.get_ClrVersion()\r\n    at Ilrun.DefaultSlotFactory.GetSlotForPrimitive(PrimitiveValue pv)\r\n    at Ilrun.DefaultSlotFactory.GetSlotForHostObject(Object value)\r\n    at Ilrun.Utility.GetSlotForObject(ISlotFactory factory, Object value)\r\n    at Ilrun.Utility.GetSlotForInteger(ISlotFactory factory, Int32 value)\r\n    at Ilrun.CommonSlotConst..ctor(IHost host)\r\n    at Ilrun.DefaultHost.get_CommonConst()\r\n    at Ilrun.VirtualMachine2..ctor(IHost host, Int32 maxStackDepth)\r\n    at Ilrun.VirtualMachine2..ctor(IHost host)\r\n    at Ilrun.DefaultHost.CreateVM()\r\n    at Microsoft.VisualStudio.VIL.DebuggerHost.LocalContext.CreateVM()\r\n    at Microsoft.VisualStudio.VIL.VisualStudioHost.LocalContextWrapper.CreateVM()\r\n    at Microsoft.VisualStudio.VIL.DebuggerHost.LocalContext.get_VM()\r\n    at Microsoft.VisualStudio.VIL.VisualStudioHost.VilEvaluationServices.InterpretInspectionQuery(DkmInspectionSession inspectionSession, DkmWorkList workList, DkmEvaluationFlags evalFlags, DkmFuncEvalFlags funcEvalFlags, UInt32 timeout, DkmStackWalkFrame frame, Assembly queryAssembly, String expression, String queryClassName, String queryMethodName, DkmClrCompilationResultFlags queryCompilationFlags, DkmEvaluationResultCategory resultCategory, DkmEvaluationResultAccessType accessType, DkmEvaluationResultStorageType storageType, DkmEvaluationResultTypeModifierFlags typeModifierFlags, VilEvaluationResult targetValue, Type targetType, InspectionQueryUserContext inspectionQueryUserContext, String& error, MethodInfo& queryMethod)\r\n    at VSDebugEngine.ClrInspector.VilHelper.ExecuteQueryInternal(Assembly queryAssembly, String queryTypeName, String queryMethodName, DkmClrCompilationResultFlags queryCompilationFlags, DkmEvaluationResultCategory resultCategory, DkmEvaluationResultAccessType accessType, DkmEvaluationResultStorageType storageType, DkmEvaluationResultTypeModifierFlags typeModifierFlags, DkmClrCustomTypeInfo customTypeInfo, DkmInspectionContext inspectionContext, DkmStackWalkFrame frame, String resultName, String resultFullName, ReadOnlyCollection`1 additionalFormatSpecifiers, DkmWorkList workList, EvaluationResultContinuation continuation)\r\n    at VSDebugEngine.ClrInspector.VilHelper.ExecuteInspectionQuery(DkmCompiledClrInspectionQuery query, DkmInspectionContext inspectionContext, DkmStackWalkFrame frame, String expressionName, DkmWorkList workList, EvaluationResultContinuation continuation)\r\n    at VSDebugEngine.ClrInspector.EntryPoint.Microsoft.VisualStudio.Debugger.ComponentInterfaces.IDkmClrInspectionQueryProcessor.Execute(DkmCompiledClrInspectionQuery query, DkmWorkList workList, DkmInspectionContext inspectionContext, DkmILContext iLContext, String expressionName, DkmCompletionRoutine`1 completionRoutine)\r\n    at Microsoft.VisualStudio.Debugger.EntryPoint.IDkmClrInspectionQueryProcessor_Execute(IntPtr pvClassInfo, IntPtr CompiledClrInspectionQuery, IntPtr WorkList, IntPtr InspectionContext, IntPtr ILContext, IntPtr ExpressionName, IntPtr CompletionRoutine)\r\n```"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"10042600808","Type":"PullRequestEvent","CreatedAt":"2019-07-19T04:02:08","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/11947","RelatedDescription":"Merged pull request \"[master] Update dependencies from aspnet/AspNetCore\" (#11947) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190718.6\r\n- **Date Produced**: 7/19/2019 3:31 AM\r\n- **Commit**: 22a959a503bd5e0a4506d2683449943761aa8781\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview8.19368.6\r\n\r\n[marker]: <> (End:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n\r\n"},{"Id":"10042517480","Type":"PullRequestEvent","CreatedAt":"2019-07-19T03:37:08","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/11939","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/core-setup\" (#11939) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190717.12\r\n- **Date Produced**: 7/18/2019 1:25 AM\r\n- **Commit**: 02e6fc2ff8d962383f538241c899decc0d655a60\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview8-27917-12\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-preview8-27917-12\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.0.0-preview8-27917-12\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-preview8-27917-12\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n\r\n\r\n"},{"Id":"10042498501","Type":"PullRequestEvent","CreatedAt":"2019-07-19T03:31:53","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/11947","RelatedDescription":"Opened pull request \"[master] Update dependencies from aspnet/AspNetCore\" (#11947) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190718.6\r\n- **Date Produced**: 7/19/2019 3:31 AM\r\n- **Commit**: 22a959a503bd5e0a4506d2683449943761aa8781\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview8.19368.6\r\n\r\n[marker]: <> (End:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n\r\n"},{"Id":"10042085137","Type":"PullRequestEvent","CreatedAt":"2019-07-19T01:37:46","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/11941","RelatedDescription":"Merged pull request \"[master] Update dependencies from aspnet/AspNetCore\" (#11941) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190718.5\r\n- **Date Produced**: 7/19/2019 1:06 AM\r\n- **Commit**: 3039748ccfde18e2cca40259257c27f56ee7e025\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview8.19368.5\r\n\r\n[marker]: <> (End:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"10042014614","Type":"PullRequestEvent","CreatedAt":"2019-07-19T01:18:47","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1356","RelatedDescription":"Opened pull request \"Adds attribution for APIs previously special-cased by the compiler\" (#1356) at dotnet/standard","RelatedBody":"This applies some of the nullable attributes for APIs that were previously special-cased by the compiler. The attribution is very basic only includes cases where we'e a 100% certain that these are never going to change.\r\n\r\nI've arrived here by diffing CoreFX and .NET Standard using the following approach:\r\n\r\n**Included**\r\n\r\n* `DoesNotReturn`\r\n* `DoesNotReturnIf`\r\n\r\n**Considered**\r\n\r\n* `NotNullWhen`\r\n\r\n**Excluded**\r\n\r\n* `MaybeNullWhenAttribute`\r\n* `MaybeNullAttribute`\r\n* `AllowNullAttribute`\r\n* `DisallowNullAttribute`\r\n* `NotNullAttribute`\r\n* `NotNullIfNotNullAttribute`\r\n\r\n@stephentoub @jcouv @dotnet/nullablefc: Please double check my work here."},{"Id":"10041149967","Type":"PullRequestEvent","CreatedAt":"2019-07-18T21:52:21","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1355","RelatedDescription":"Merged pull request \"Add attributes for expressing nullability\" (#1355) at dotnet/standard","RelatedBody":"Discussed in #1349.\r\n\r\n@danmosemsft, any objections taking this? \r\n\r\n/cc @wtgodbe "},{"Id":"10040704417","Type":"PullRequestEvent","CreatedAt":"2019-07-18T20:38:18","Actor":"wtgodbe","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1354","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/corefx\" (#1354) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190717.11\r\n- **Date Produced**: 7/18/2019 5:04 AM\r\n- **Commit**: ba2d62a24ea8574f40c43cd27cc384f079958a0c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19367.11\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19367.11\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19367.11\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"},{"Id":"10040608911","Type":"PullRequestEvent","CreatedAt":"2019-07-18T20:23:26","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1355","RelatedDescription":"Opened pull request \"Add attributes for expressing nullability\" (#1355) at dotnet/standard","RelatedBody":"Discussed in #1349.\r\n\r\n@danmosemsft, any objections taking this? \r\n\r\n/cc @wtgodbe "},{"Id":"10040561110","Type":"PullRequestEvent","CreatedAt":"2019-07-18T20:15:45","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1349","RelatedDescription":"Merged pull request \"Add attributes for expressing nullability\" (#1349) at dotnet/standard","RelatedBody":"This issue was brought up as part of a conversation with @divega from the EF team. While .NET Standard 2.1 itself won't have nullable annotations (see #1118), the idea is that code building for .NET Standard 2.1 should be able to express its own nullable state. This PR adds the attribute that are needed by library authors to tweak how their APIs are treated by C#'s flow analysis.\r\n\r\nThese APIs were reviewed in https://github.com/dotnet/corefx/issues/37826."},{"Id":"10039750315","Type":"IssuesEvent","CreatedAt":"2019-07-18T18:12:46","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/1352","RelatedDescription":"Closed issue \"Interesting BadImageFormatException involving generics, deferred functions, and closures.\" (#1352) at dotnet/standard","RelatedBody":"I stumbled over an edge case in which it is possible to write code that compiles but generates a BadImageFormatException with HResult: 0x8007000B during runtime. I originally found it in a C# 7.3 dotnet core 2.2 API application, but have reproduced it with a simple example in LINQPad 5, which uses C#7 and I believe dotnet standard 2.  The below contains both the exception generating code as well as similar counter-examples.\r\n\r\n\t/// <summary>\r\n\t/// Demonstrate how a generic function passing a closure to of a deferred function\r\n\t/// can create a BadImageFormatException. This includes an example of the exception,\r\n\t/// and similar examples that do not create the exception.\r\n\t/// </summary>\r\n\tstatic void Main()\r\n\t{\r\n\t\t// The data type and value is not important to this example.\r\n\t\t// Only the context in which this variable is used is important.\r\n\t\tvar myClosure = 0;\r\n\t\t\r\n\t\tHereComesTheException(new object[0]);\r\n\t\t//NonGenericNoException(new object[0]);\r\n\t\t//GenericWorkAroundA(new object[0]);\r\n\t\t//GenericWorkAroundB(new object[0]);\r\n\t\r\n\t\t// This fucntion creates a BadImageFormatException. Note the\r\n\t\t// use of myClosure within a deferred function that is\r\n\t\t// inline to a foreach. As far as I could read the IL, there is no\r\n\t\t// reference to myClosure in the scope of this function.\r\n\t\tvoid HereComesTheException<T>(IEnumerable<T> things)\r\n\t\t{\r\n\t\t\tforeach (var thing in things.Where(tt => myClosure == 0)) {}\r\n\t\t}\r\n\t\r\n\t\t// This function doesn't create a BadImageFormatException...\r\n\t\t// The only difference from HereComesTheException is that\r\n\t\t// this function is not generic.\r\n\t\tvoid NonGenericNoException(IEnumerable<object> things)\r\n\t\t{\r\n\t\t\tforeach (var thing in things.Where(tt => myClosure == 0)) {}\r\n\t\t}\r\n\t\r\n\t\t// This function doesn't create a BadImageFormatException because the\r\n\t\t// outer closure is stored in a local variable that is clearly in scope \r\n\t\t// when the deferred function is executed.\r\n\t\tvoid GenericWorkAroundA<T>(IEnumerable<T> things)\r\n\t\t{\r\n\t\t\tvar inner = myClosure;\r\n\t\t\tforeach (var thing in things.Where(tt => inner == 0)) {}\r\n\t\t}\r\n\t\t\r\n\t\t// This function doesn't create a BadImageFormatException... \r\n\t\t// Is this because declaring the Enumerator as a local variable forces\r\n\t\t// local context to be given to myClosure?\r\n\t\tvoid GenericWorkAroundB<T>(IEnumerable<T> things)\r\n\t\t{\r\n\t\t\tvar filtered = things.Where(tt => myClosure == 0);\r\n\t\t\tforeach (var thing in filtered) {}\r\n\t\t}\r\n\t}"},{"Id":"10039529514","Type":"PullRequestEvent","CreatedAt":"2019-07-18T17:36:33","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1353","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/arcade\" (#1353) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190717.8\r\n- **Date Produced**: 7/17/2019 10:06 PM\r\n- **Commit**: 2359dc4184133defa27c8f3072622270b71b4ecf\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19367.8\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19367.8\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19367.8\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19367.8\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19367.8\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19367.8\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n"},{"Id":"10039214220","Type":"PullRequestEvent","CreatedAt":"2019-07-18T16:48:52","Actor":"wtgodbe","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/standard/pull/1353","RelatedDescription":null,"RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190717.8\r\n- **Date Produced**: 7/17/2019 10:06 PM\r\n- **Commit**: 2359dc4184133defa27c8f3072622270b71b4ecf\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19367.8\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19367.8\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19367.8\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19367.8\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19367.8\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19367.8\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n"},{"Id":"10039214047","Type":"PullRequestEvent","CreatedAt":"2019-07-18T16:48:51","Actor":"wtgodbe","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/pull/1353","RelatedDescription":"Closed pull request \"[master] Update dependencies from dotnet/arcade\" (#1353) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190717.8\r\n- **Date Produced**: 7/17/2019 10:06 PM\r\n- **Commit**: 2359dc4184133defa27c8f3072622270b71b4ecf\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19367.8\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19367.8\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19367.8\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19367.8\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19367.8\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19367.8\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n"},{"Id":"10039210662","Type":"PullRequestEvent","CreatedAt":"2019-07-18T16:48:21","Actor":"wtgodbe","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/standard/pull/1354","RelatedDescription":null,"RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190717.11\r\n- **Date Produced**: 7/18/2019 5:04 AM\r\n- **Commit**: ba2d62a24ea8574f40c43cd27cc384f079958a0c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19367.11\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19367.11\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19367.11\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"},{"Id":"10039210316","Type":"PullRequestEvent","CreatedAt":"2019-07-18T16:48:18","Actor":"wtgodbe","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/pull/1354","RelatedDescription":"Closed pull request \"[master] Update dependencies from dotnet/corefx\" (#1354) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190717.11\r\n- **Date Produced**: 7/18/2019 5:04 AM\r\n- **Commit**: ba2d62a24ea8574f40c43cd27cc384f079958a0c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19367.11\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19367.11\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19367.11\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"},{"Id":"10037281259","Type":"PullRequestEvent","CreatedAt":"2019-07-18T12:49:51","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1354","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/corefx\" (#1354) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190717.11\r\n- **Date Produced**: 7/18/2019 5:04 AM\r\n- **Commit**: ba2d62a24ea8574f40c43cd27cc384f079958a0c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19367.11\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19367.11\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19367.11\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"10042703546","Type":"PullRequestEvent","CreatedAt":"2019-07-19T04:34:38","Actor":"jkotalik","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/corefx/pull/39610","RelatedDescription":null,"RelatedBody":"Hit this in ASP.NET Core. If you call FlushAsync and then CompleteAsync, you'll hit an ODE in CompleteAsync. Previous tests didn't call FlushAsync and then CompleteAsync.\r\n\r\n"},{"Id":"10042703284","Type":"PullRequestEvent","CreatedAt":"2019-07-19T04:34:33","Actor":"jkotalik","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/pull/39610","RelatedDescription":"Closed pull request \"[release/3.0] Don't dispose StreamPipeWriter CancellationToken until after Flush\" (#39610) at dotnet/corefx","RelatedBody":"Hit this in ASP.NET Core. If you call FlushAsync and then CompleteAsync, you'll hit an ODE in CompleteAsync. Previous tests didn't call FlushAsync and then CompleteAsync.\r\n\r\n"},{"Id":"10042179894","Type":"PullRequestEvent","CreatedAt":"2019-07-19T02:04:38","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/39613","RelatedDescription":"Opened pull request \"Avoid \"async void\" tests\" (#39613) at dotnet/corefx","RelatedBody":"Most of these are just because \"async void\" tests are rare and require special handling in xunit we needn't use.  But a few of these are plain wrong and were resulting in our not actually testing what we hoped to test."}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"10042660962","Type":"PullRequestEvent","CreatedAt":"2019-07-19T04:21:23","Actor":"cston","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/37353","RelatedDescription":"Merged pull request \"Fix typo in CSharpTestBase\" (#37353) at dotnet/roslyn","RelatedBody":""},{"Id":"10042538308","Type":"PullRequestEvent","CreatedAt":"2019-07-19T03:43:02","Actor":"petrroll","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/37272","RelatedDescription":"Merged pull request \"Move refa to helpers4\" (#37272) at dotnet/roslyn","RelatedBody":"Work for: #35525 and #35180\r\n\r\nBased on (previous) PRs: #37236 (and thus subsequently on #37196)"},{"Id":"10042488736","Type":"IssuesEvent","CreatedAt":"2019-07-19T03:29:05","Actor":"yhvicey","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/37362","RelatedDescription":"Opened issue \"Warning CS8653 didn't show up neither in Visual Studio nor in VSCode\" (#37362) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\n.NetCore SDK 3.0.100-preview6-012264\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Create a project containing below code snippet:\r\n\r\n    ```cs\r\n    public T GetT<T>()\r\n    {\r\n        throw new NotImplementedException();\r\n    }\r\n\r\n    public T? GetOrDefault<T>()\r\n    {\r\n        bool condition = false;\r\n        T value = GetT<T>();\r\n        return condition ? value : default; // warning CS8653: A default expression introduces a null value when 'T' is a non-nullable reference type.\r\n    }\r\n\r\n1. Open this project in Visual Studio or VSCode \r\n\r\n**Expected Behavior**:\r\n\r\nA warning (CS8653) at the return statement;\r\n\r\n**Actual Behavior**:\r\n\r\nNo warning there, it won't break build in Visual Studio even if `TreatWarningAsError` is set to true, but it will show up while building the project using the CLI."},{"Id":"10042179915","Type":"IssuesEvent","CreatedAt":"2019-07-19T02:04:38","Actor":"diryboy","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/37361","RelatedDescription":"Opened issue \"SpeculativeT completion does not support tupples.\" (#37361) at dotnet/roslyn","RelatedBody":"This is found during review of #37323\r\n\r\n**Version Used**:\r\nVS16.2 \r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Inside a C# class, type `(T `\r\n\r\n**Expected Behavior**:\r\n\r\n`(T )`\r\n\r\n**Actual Behavior**:\r\n\r\n`(ThreadStaticAttribute )`"},{"Id":"10042058162","Type":"PullRequestEvent","CreatedAt":"2019-07-19T01:30:27","Actor":"dotnet-automerge-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/37355","RelatedDescription":"Merged pull request \"Merge master to master-vs-deps\" (#37355) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"10042057300","Type":"PullRequestEvent","CreatedAt":"2019-07-19T01:30:17","Actor":"dotnet-automerge-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/37356","RelatedDescription":"Merged pull request \"Merge master to features/compilerNext\" (#37356) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from master into features/compilerNext.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/compilerNext\ngit reset --hard upstream/features/compilerNext\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/compilerNext --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"10042226482","Type":"PullRequestEvent","CreatedAt":"2019-07-19T02:17:14","Actor":"cshung","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7635","RelatedDescription":"Merged pull request \"Fix string import for CppCodeGen\" (#7635) at dotnet/corert","RelatedBody":"The capital `X` is not a standard [escape sequence](https://en.cppreference.com/w/cpp/language/escape), we should use lower case `x`."},{"Id":"10041889422","Type":"PullRequestEvent","CreatedAt":"2019-07-19T00:43:32","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/corert/pull/7635","RelatedDescription":null,"RelatedBody":"The capital `X` is not a standard [escape sequence](https://en.cppreference.com/w/cpp/language/escape), we should use lower case `x`."},{"Id":"10041889304","Type":"PullRequestEvent","CreatedAt":"2019-07-19T00:43:30","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/7635","RelatedDescription":"Closed pull request \"Fix string import for CppCodeGen\" (#7635) at dotnet/corert","RelatedBody":"The capital `X` is not a standard [escape sequence](https://en.cppreference.com/w/cpp/language/escape), we should use lower case `x`."},{"Id":"10041739061","Type":"PullRequestEvent","CreatedAt":"2019-07-19T00:03:42","Actor":"cshung","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7635","RelatedDescription":"Opened pull request \"Fix string import for C++\" (#7635) at dotnet/corert","RelatedBody":"The capital `X` is not a standard [escape sequence](https://en.cppreference.com/w/cpp/language/escape), we should use lower case `x`."},{"Id":"10041713595","Type":"PullRequestEvent","CreatedAt":"2019-07-18T23:57:40","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7632","RelatedDescription":"Merged pull request \"Port GC changes from CoreCLR\" (#7632) at dotnet/corert","RelatedBody":""},{"Id":"10041254652","Type":"PullRequestEvent","CreatedAt":"2019-07-18T22:12:09","Actor":"trylek","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7634","RelatedDescription":"Opened pull request \"WIP [no-merge] IsManagedSequential CPAOT instrumentation\" (#7634) at dotnet/corert","RelatedBody":"This instrumentation change (I don't intend to merge in) adds logging\r\nof IsManagedSequential results. I have sent out a separate PR\r\nfor the corresponding SuperIlc change (I believe the SuperIlc change\r\nis worth merging in) and I'll send out another instrumentation change\r\nfor Crossgen.\r\n\r\nThanks\r\n\r\nTomas\r\n\r\nP.S. Once I figure out how to fix the remaining inconsistencies in\r\nIsManagedSequential, I'm going to merge in a smaller change just\r\nmoving the [fixed] IsManagedSequentialMethod to the R2R field\r\nlayout algorithm source file per JanK's suggestion."},{"Id":"10041177058","Type":"PullRequestEvent","CreatedAt":"2019-07-18T21:57:05","Actor":"trylek","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7633","RelatedDescription":"Opened pull request \"Initial support for IsManagedSequential diffing in SuperIlc\" (#7633) at dotnet/corert","RelatedBody":"This change searches compiler logs for specially formatted sections\r\nproduced by my private CPAOT and Crossgen instrumentation changes\r\nand outputs their lists and diffs between CPAOT and Crossgen.\r\n\r\nI have finally reached almost 100% parity between CPAOT and Crossgen\r\nqueries for the IsManagedSequential type characteristics and I have\r\nalready identified a type with mismatching results. Based on JanK's\r\nsuggestion I assume we should run this through anything we can find\r\nto maximize our confidence in the R2R compiler.\r\n\r\nThanks\r\n\r\nTomas\r\n\r\nP.S. I'm going to send out separate not-for-checkin PR's for the\r\nappropriate CPAOT and Crossgen instrumentations. For SuperIlc,\r\nI believe there's no harm in actually merging the change in."},{"Id":"10041140913","Type":"PullRequestEvent","CreatedAt":"2019-07-18T21:50:43","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7632","RelatedDescription":"Opened pull request \"Port GC changes from CoreCLR\" (#7632) at dotnet/corert","RelatedBody":""},{"Id":"10039793430","Type":"PullRequestEvent","CreatedAt":"2019-07-18T18:19:29","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7622","RelatedDescription":"Merged pull request \"[CppCodeGen] Avoid generating typedef redefinition for delegates with vtable\" (#7622) at dotnet/corert","RelatedBody":"This change fixes the compilation error for issue #6415, this does not fix the issue itself yet.\r\nIn case the vtable of the delegate type is generated, [`GetCodeForVirtualMethod()`](https://github.com/dotnet/corert/blob/c3751121a3e96e750933c159d732f52a70c09857/src/ILCompiler.CppCodeGen/src/CppCodeGen/CppWriter.cs#L974) will generate a typedef for the Invoke function, and we will generate another in `GetCodeForDelegate()` as the code change shows, leading to redefinition error.\r\n\r\nThis fix detects that case and avoids generating the redefinition."},{"Id":"10039791632","Type":"PullRequestEvent","CreatedAt":"2019-07-18T18:19:12","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7630","RelatedDescription":"Merged pull request \"Delete stale cache size detection code on Windows\" (#7630) at dotnet/corert","RelatedBody":"Fill cache size detection on Unix with CoreCLR PAL implementation"},{"Id":"10039189932","Type":"PullRequestEvent","CreatedAt":"2019-07-18T16:45:16","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/corert/pull/7622","RelatedDescription":null,"RelatedBody":"This change fixes the compilation error for issue #6415, this does not fix the issue itself yet.\r\nIn case the vtable of the delegate type is generated, [`GetCodeForVirtualMethod()`](https://github.com/dotnet/corert/blob/c3751121a3e96e750933c159d732f52a70c09857/src/ILCompiler.CppCodeGen/src/CppCodeGen/CppWriter.cs#L974) will generate a typedef for the Invoke function, and we will generate another in `GetCodeForDelegate()` as the code change shows, leading to redefinition error.\r\n\r\nThis fix detects that case and avoids generating the redefinition."},{"Id":"10039189704","Type":"PullRequestEvent","CreatedAt":"2019-07-18T16:45:14","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/7622","RelatedDescription":"Closed pull request \"[CppCodeGen] Avoid generating typedef redefinition for delegates with vtable\" (#7622) at dotnet/corert","RelatedBody":"This change fixes the compilation error for issue #6415, this does not fix the issue itself yet.\r\nIn case the vtable of the delegate type is generated, [`GetCodeForVirtualMethod()`](https://github.com/dotnet/corert/blob/c3751121a3e96e750933c159d732f52a70c09857/src/ILCompiler.CppCodeGen/src/CppCodeGen/CppWriter.cs#L974) will generate a typedef for the Invoke function, and we will generate another in `GetCodeForDelegate()` as the code change shows, leading to redefinition error.\r\n\r\nThis fix detects that case and avoids generating the redefinition."},{"Id":"10039186207","Type":"PullRequestEvent","CreatedAt":"2019-07-18T16:44:42","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/corert/pull/7630","RelatedDescription":null,"RelatedBody":"Fill cache size detection on Unix with CoreCLR PAL implementation"},{"Id":"10039186030","Type":"PullRequestEvent","CreatedAt":"2019-07-18T16:44:40","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/7630","RelatedDescription":"Closed pull request \"Delete stale cache size detection code on Windows\" (#7630) at dotnet/corert","RelatedBody":"Fill cache size detection on Unix with CoreCLR PAL implementation"},{"Id":"10033687690","Type":"IssuesEvent","CreatedAt":"2019-07-18T01:29:27","Actor":"forestbat","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/7631","RelatedDescription":"Opened issue \"Future of AOT\" (#7631) at dotnet/corert","RelatedBody":"#https://github.com/dotnet/coreclr/commit/0cc81b60eb184c92b8526348d4bb056ed563e9d6\r\n#https://github.com/dotnet/corefx/commit/1acaa2017cfc64ef1aabcf3b19d0e097af692616\r\nAs we all knowï¼Œdevelopment for .NET5 has started and this project is like a forgotten cornerï¼Œso in the next yearï¼ˆuntil November 2020ï¼‰will MS invest more to thisï¼Ÿ\r\nAnd will AOT of C#ï¼ˆeither corert or mono aotï¼‰support more processor structure such as MIPS or RISCVï¼Ÿ\r\nHope your reply."}],"ResultType":"GitHubEvent"},"SDK":{"Events":[],"ResultType":"GitHubEvent"},"Home-Issues":{"Issues":[{"Id":"455670422","IsPullRequest":true,"CreatedAt":"2019-06-13T10:49:30","Actor":"gep13","Number":"147","RawContent":null,"Title":"(GH-111) Update Source Link location","State":"open","Body":"","Url":"https://github.com/dotnet/foundation/pull/147","RelatedDescription":"Open PR \"(GH-111) Update Source Link location\" (#147)"},{"Id":"455555823","IsPullRequest":true,"CreatedAt":"2019-06-13T06:28:59","Actor":"gep13","Number":"146","RawContent":null,"Title":"Update Cake Project Contacts","State":"closed","Body":"@jongalloway just noticed that this wasn't up to date.","Url":"https://github.com/dotnet/foundation/pull/146","RelatedDescription":"Closed or merged PR \"Update Cake Project Contacts\" (#146)"},{"Id":"441542047","IsPullRequest":true,"CreatedAt":"2019-05-09T18:35:22","Actor":"mitchelsellers","Number":"145","RawContent":null,"Title":"Edits to DNN Platform Information","State":"closed","Body":"Edits to reflect changes in repository structure with recent modifications to the overall project structure.","Url":"https://github.com/dotnet/foundation/pull/145","RelatedDescription":"Closed or merged PR \"Edits to DNN Platform Information\" (#145)"},{"Id":"437980746","IsPullRequest":true,"CreatedAt":"2019-05-03T20:10:38","Actor":"FlorianRappl","Number":"143","RawContent":null,"Title":"Add AngleSharp","State":"closed","Body":"cc @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/143","RelatedDescription":"Closed or merged PR \"Add AngleSharp\" (#143)"},{"Id":"426787230","IsPullRequest":true,"CreatedAt":"2019-05-03T20:08:40","Actor":"mairaw","Number":"141","RawContent":null,"Title":"add links to ML.NET docs","State":"closed","Body":"/cc @JRAlexander @shauheen \r\n\r\nTo match the info we have added for other projects","Url":"https://github.com/dotnet/foundation/pull/141","RelatedDescription":"Closed or merged PR \"add links to ML.NET docs\" (#141)"},{"Id":"440030132","IsPullRequest":true,"CreatedAt":"2019-05-03T20:08:15","Actor":"tomasherceg","Number":"144","RawContent":null,"Title":"Add DotVVM","State":"closed","Body":"cc @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/144","RelatedDescription":"Closed or merged PR \"Add DotVVM\" (#144)"},{"Id":"426787542","IsPullRequest":true,"CreatedAt":"2019-03-29T14:44:24","Actor":"mairaw","Number":"142","RawContent":null,"Title":"add docs samples link","State":"closed","Body":"@BillWagner should we add the samples project too?","Url":"https://github.com/dotnet/foundation/pull/142","RelatedDescription":"Closed or merged PR \"add docs samples link\" (#142)"},{"Id":"426658581","IsPullRequest":true,"CreatedAt":"2019-03-29T02:16:07","Actor":"scottaddie","Number":"139","RawContent":null,"Title":"Add link to ASP.NET Core docs","State":"closed","Body":"Provide a link to the docs site for ASP.NET Core.","Url":"https://github.com/dotnet/foundation/pull/139","RelatedDescription":"Closed or merged PR \"Add link to ASP.NET Core docs\" (#139)"},{"Id":"426666928","IsPullRequest":true,"CreatedAt":"2019-03-29T02:15:48","Actor":"BillWagner","Number":"140","RawContent":null,"Title":"add links to .NET docs","State":"closed","Body":"/cc @mairaw @scottaddie\r\n\r\nMaira, did I miss any project repos to tag?","Url":"https://github.com/dotnet/foundation/pull/140","RelatedDescription":"Closed or merged PR \"add links to .NET docs\" (#140)"},{"Id":"419205679","IsPullRequest":true,"CreatedAt":"2019-03-18T21:04:01","Actor":"MikeWilliams-UK","Number":"137","RawContent":null,"Title":"Add V3.1 repo and change documentation link","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/137","RelatedDescription":"Closed or merged PR \"Add V3.1 repo and change documentation link\" (#137)"},{"Id":"419897914","IsPullRequest":true,"CreatedAt":"2019-03-18T21:03:34","Actor":"devlead","Number":"138","RawContent":null,"Title":"Add Dave to cake.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/138","RelatedDescription":"Closed or merged PR \"Add Dave to cake.md\" (#138)"},{"Id":"391459677","IsPullRequest":false,"CreatedAt":"2019-03-08T19:00:06","Actor":"manne","Number":"123","RawContent":null,"Title":"Missing logo for Steeltoe","State":"closed","Body":"`https://brandfolder.com/pivotal-assets/attachments/ohxttd-7yxa60-clvf50/pivotal-assets-pivotal-genericfile.png` redirects to a sign in page\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L128-L130","Url":"https://github.com/dotnet/foundation/issues/123","RelatedDescription":"Closed issue \"Missing logo for Steeltoe\" (#123)"},{"Id":"417018694","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:32","Actor":"jkonicki","Number":"136","RawContent":null,"Title":"Fix logo and update team contributors","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/136","RelatedDescription":"Closed or merged PR \"Fix logo and update team contributors\" (#136)"},{"Id":"416428925","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"135","RawContent":null,"Title":"adds Umbraco logo","State":"closed","Body":"fixes #124 ","Url":"https://github.com/dotnet/foundation/pull/135","RelatedDescription":"Closed or merged PR \"adds Umbraco logo\" (#135)"},{"Id":"391459812","IsPullRequest":false,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"124","RawContent":null,"Title":"Missing logo for Umbraco","State":"closed","Body":"`https://fbcdn-profile-a.akamaihd.net/hprofile-ak-xap1/v/t1.0-1/p160x160/971596_519168901464439_566592989_n.png?oh=ce61e5b4cbd60c0d99c4164cbb05a434&oe=54F091C9&__gda__=1424472439_c9f76213a915bc2af88246f464f29e8b` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L149-L151","Url":"https://github.com/dotnet/foundation/issues/124","RelatedDescription":"Closed issue \"Missing logo for Umbraco\" (#124)"},{"Id":"416427614","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:45","Actor":"manne","Number":"134","RawContent":null,"Title":"adds the prism logo","State":"closed","Body":"fixes #126 ","Url":"https://github.com/dotnet/foundation/pull/134","RelatedDescription":"Closed or merged PR \"adds the prism logo\" (#134)"},{"Id":"391460225","IsPullRequest":false,"CreatedAt":"2019-03-08T18:58:44","Actor":"manne","Number":"126","RawContent":null,"Title":"No logo provided for Prism","State":"closed","Body":"Can/should this [image](http://prismlibrary.github.io/images/logo-prism-symbol@2x.png) be used?\r\n\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L155-L157","Url":"https://github.com/dotnet/foundation/issues/126","RelatedDescription":"Closed issue \"No logo provided for Prism\" (#126)"},{"Id":"416157860","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:26","Actor":"glennawatson","Number":"133","RawContent":null,"Title":"Add additional ReactiveUI organization projects.","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/133","RelatedDescription":"Closed or merged PR \"Add additional ReactiveUI organization projects.\" (#133)"},{"Id":"407251900","IsPullRequest":true,"CreatedAt":"2019-02-18T17:45:44","Actor":"Potapy4","Number":"132","RawContent":null,"Title":"Update MVVM project logo","State":"closed","Body":"Fixes dotnet/dotnetfoundation-website#72\r\nFixes #125","Url":"https://github.com/dotnet/foundation/pull/132","RelatedDescription":"Closed or merged PR \"Update MVVM project logo\" (#132)"},{"Id":"391459919","IsPullRequest":false,"CreatedAt":"2019-02-18T17:45:44","Actor":"manne","Number":"125","RawContent":null,"Title":"Missing logo for MVVM Light Toolkit","State":"closed","Body":"`https://raw.githubusercontent.com/paulcbetts/mvvmlight/master/Installer/InstallItems/html/MVVM_BlackText_190x147.png` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L137-L139","Url":"https://github.com/dotnet/foundation/issues/125","RelatedDescription":"Closed issue \"Missing logo for MVVM Light Toolkit\" (#125)"},{"Id":"406210463","IsPullRequest":true,"CreatedAt":"2019-02-18T17:44:39","Actor":"NextTurn","Number":"131","RawContent":null,"Title":"Replace http links with https links","State":"closed","Body":"Replace http links with https where possible - both returned 200 OK.","Url":"https://github.com/dotnet/foundation/pull/131","RelatedDescription":"Closed or merged PR \"Replace http links with https links\" (#131)"},{"Id":"399191617","IsPullRequest":true,"CreatedAt":"2019-02-02T11:04:15","Actor":"NextTurn","Number":"130","RawContent":null,"Title":"Update Open XML links","State":"closed","Body":"OpenXmlDeveloper.org was shut down long ago.\r\n\r\nThe content has been moved to EricWhite.com.","Url":"https://github.com/dotnet/foundation/pull/130","RelatedDescription":"Closed or merged PR \"Update Open XML links\" (#130)"},{"Id":"395863354","IsPullRequest":true,"CreatedAt":"2019-01-09T22:28:14","Actor":"ErikEJ","Number":"128","RawContent":null,"Title":"Update of EF description","State":"closed","Body":"@divega !","Url":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Closed or merged PR \"Update of EF description\" (#128)"},{"Id":"395901602","IsPullRequest":true,"CreatedAt":"2019-01-05T03:23:39","Actor":"MarcBruins","Number":"129","RawContent":null,"Title":"Update to absolute path","State":"closed","Body":"Update to absolute path so that when this list is copied the link will actually work","Url":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Closed or merged PR \"Update to absolute path\" (#129)"},{"Id":"395705579","IsPullRequest":true,"CreatedAt":"2019-01-04T00:22:42","Actor":"carloscds","Number":"127","RawContent":null,"Title":"Update documentation information","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/127","RelatedDescription":"Closed or merged PR \"Update documentation information\" (#127)"},{"Id":"391459057","IsPullRequest":true,"CreatedAt":"2019-01-03T04:47:09","Actor":"manne","Number":"122","RawContent":null,"Title":"targets the existing document","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/122","RelatedDescription":"Closed or merged PR \"targets the existing document\" (#122)"},{"Id":"384569679","IsPullRequest":true,"CreatedAt":"2019-01-03T04:46:31","Actor":"JamesNK","Number":"121","RawContent":null,"Title":"Add Newtonsoft.Json","State":"closed","Body":"// @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/121","RelatedDescription":"Closed or merged PR \"Add Newtonsoft.Json\" (#121)"},{"Id":"384212839","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:50","Actor":"stefanov-stefan","Number":"120","RawContent":null,"Title":"Added Telerik info","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/120","RelatedDescription":"Closed or merged PR \"Added Telerik info\" (#120)"},{"Id":"384212448","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:22","Actor":"stefanov-stefan","Number":"119","RawContent":null,"Title":"Added Telerik UWP proj","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/119","RelatedDescription":"Closed or merged PR \"Added Telerik UWP proj\" (#119)"},{"Id":"382378851","IsPullRequest":true,"CreatedAt":"2018-11-23T10:32:15","Actor":"pkgw","Number":"118","RawContent":null,"Title":"Update WorldWide Telescope","State":"closed","Body":"Some layout fixes, but the main change is that @pkgw is now the project director.","Url":"https://github.com/dotnet/foundation/pull/118","RelatedDescription":"Closed or merged PR \"Update WorldWide Telescope\" (#118)"}],"ResultType":"GitHubIssue"},"CoreCLR-Issues":{"Issues":[{"Id":"469864974","IsPullRequest":true,"CreatedAt":"2019-07-19T04:30:10","Actor":"sdmaclea","Number":"25775","RawContent":null,"Title":"Arm32 support VFP registers context to/from native context","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/25775","RelatedDescription":"Closed or merged PR \"Arm32 support VFP registers context to/from native context\" (#25775)"},{"Id":"470120356","IsPullRequest":false,"CreatedAt":"2019-07-19T03:30:31","Actor":"iskiselev","Number":"25789","RawContent":null,"Title":"ProfilerAPI: Is it safe to cache IMetaDataImport","State":"open","Body":"Is it safe for profiler to cache IMetaDataImport for a module for a module lifetime?\r\nI'm asking this question, as ICorProfilerInfo::GetModuleMetaData will fail if it is called from P/Invoke  callback, but looks like calls for cached IMetaDataImport methods works fine even from P/Invoke. \r\nMSDN documentation does not give any hints about IMetaDataImport lifetime and any problems that may be introduced by preserving IMetaDataImport non-released.","Url":"https://github.com/dotnet/coreclr/issues/25789","RelatedDescription":"Open issue \"ProfilerAPI: Is it safe to cache IMetaDataImport\" (#25789)"},{"Id":"470109534","IsPullRequest":true,"CreatedAt":"2019-07-19T02:38:46","Actor":"andy-ms","Number":"25788","RawContent":null,"Title":"Fix typo: `_TARGET_X86` -> `_TARGET_X86_`","State":"open","Body":"This typo was in #24989 so would be a new regression in 3.0.\r\nIn an x86 build, it causes us to not get the cache size correct,\r\nleading us to use a smaller default cache size and do more GCs.\r\n\r\nTested with GCPerfSim and this PR reduces TotalNumberGCs by 33% using an x86 build.\r\n\r\nI believe this is an \"Unacceptable performance regression from 2.2 that is not a corner case\" so meets the bar for 3.0.\r\n\r\nThanks @jkotas for discovering this in https://github.com/dotnet/coreclr/pull/25781#discussion_r305127079","Url":"https://github.com/dotnet/coreclr/pull/25788","RelatedDescription":"Open PR \"Fix typo: `_TARGET_X86` -> `_TARGET_X86_`\" (#25788)"},{"Id":"469747414","IsPullRequest":true,"CreatedAt":"2019-07-19T02:35:22","Actor":"dotnet-maestro[bot]","Number":"25772","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d21e78e6-fa30-42ea-2807-08d690bc5860)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190717.09\r\n- **Date Produced**: 7/17/2019 11:25 PM\r\n- **Commit**: 39e9f208652c221c2e6ccf833e6fe4a99420c943\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.27917.9\r\n\r\n[marker]: <> (End:d21e78e6-fa30-42ea-2807-08d690bc5860)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/25772","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#25772)"},{"Id":"469992288","IsPullRequest":true,"CreatedAt":"2019-07-19T02:33:43","Actor":"cshung","Number":"25780","RawContent":null,"Title":"A simple disassembler fix","State":"closed","Body":"Check out the Figure 2-9 of Intel's manual if you do not trust the comments.","Url":"https://github.com/dotnet/coreclr/pull/25780","RelatedDescription":"Closed or merged PR \"A simple disassembler fix\" (#25780)"},{"Id":"470104617","IsPullRequest":false,"CreatedAt":"2019-07-19T02:17:43","Actor":"swift-kim","Number":"25787","RawContent":null,"Title":"[Question] IBC training and partial crossgen on Linux","State":"open","Body":"I'm trying to generate optimized (partial-ngened) assemblies against user applications using IBC data on Linux system (armel Tizen). The system is running the latest coreclr runtime and crossgen built from source. However, I have no other tools like `ibcmerge.exe` (is it even available for use?)\r\n\r\nI have created instrumented images of some target assemblies (including system assemblies), and obtained training data (.ibc files) by running different applications several times. Here is a [sample](https://github.com/dotnet/coreclr/files/3408987/ibc-files.zip). As far as I see in HexViewer (I found no other ways to read the files), the files have similar structures to those in _optimization.linux-x64.ibc.corefx_ therefore they look quite valid.\r\n\r\nI have run crossgen again with the IBC data as input and passing `PartialNGen`/`UseIBCFile` as true, and in fact it could generate some kind of optimized images for the assemblies. However, the profiling result shows they are optimized for only the first application I have run for training, but not exactly for other applications.\r\n\r\n**TL;DR** - Is it able to train partial-ngened assemlibes for mutiple scenarios/runs based purely on crossgen?\r\n\r\nAny comments will help a lot. Thank you.","Url":"https://github.com/dotnet/coreclr/issues/25787","RelatedDescription":"Open issue \"[Question] IBC training and partial crossgen on Linux\" (#25787)"},{"Id":"469745322","IsPullRequest":true,"CreatedAt":"2019-07-19T00:51:44","Actor":"dotnet-maestro[bot]","Number":"25771","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:16d3c6aa-851a-4668-94d4-08d690bc143a)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190717.11\r\n- **Date Produced**: 7/18/2019 5:04 AM\r\n- **Commit**: ba2d62a24ea8574f40c43cd27cc384f079958a0c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.Platforms** -> 5.0.0-alpha1.19367.11\r\n  - **Microsoft.Private.CoreFx.NETCoreApp** -> 5.0.0-alpha1.19367.11\r\n\r\n[marker]: <> (End:16d3c6aa-851a-4668-94d4-08d690bc143a)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/25771","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#25771)"},{"Id":"470053560","IsPullRequest":true,"CreatedAt":"2019-07-18T23:54:55","Actor":"jorive","Number":"25786","RawContent":null,"Title":"Remove assertion from Shutdown path","State":"open","Body":"The diagnostics server is doing nothing to handle potential errors in this path.\r\nFixes #25755 ","Url":"https://github.com/dotnet/coreclr/pull/25786","RelatedDescription":"Open PR \"Remove assertion from Shutdown path\" (#25786)"},{"Id":"470033791","IsPullRequest":false,"CreatedAt":"2019-07-18T23:05:40","Actor":"aggieben","Number":"25785","RawContent":null,"Title":"CMake Error: Could not create named generator Visual Studio 16 2019","State":"open","Body":"I cloned the repository and tried running `build.cmd`, but experienced this failure:\r\n\r\n![image](https://user-images.githubusercontent.com/1321/61497811-7844d700-a986-11e9-9f2d-5cf4508f9eca.png).\r\n\r\nThere aren't any instructions specific to VS 2019, so I'm a bit unsure where to go from here.","Url":"https://github.com/dotnet/coreclr/issues/25785","RelatedDescription":"Open issue \"CMake Error: Could not create named generator Visual Studio 16 2019\" (#25785)"},{"Id":"470030085","IsPullRequest":true,"CreatedAt":"2019-07-18T22:55:11","Actor":"jkoritzinsky","Number":"25784","RawContent":null,"Title":"Rewrite SafeHandle interop tests","State":"open","Body":"Completely rewrite the SafeHandle tests to not only be readable but easily understandable with nicer naming. Additionally, design tests to specifically target the various code-paths in the SafeHandle code.\r\n\r\nThe old tests used to just do a splattering of tests that, while more exhaustive from the perspective of reading the test, had less useful coverage than the new tests.\r\n\r\nThe old tests were also Windows-only since they used the `CreateFileW` API to create real handles (which you don't actually need for testing SafeHandle interop functionality).","Url":"https://github.com/dotnet/coreclr/pull/25784","RelatedDescription":"Open PR \"Rewrite SafeHandle interop tests\" (#25784)"},{"Id":"470022419","IsPullRequest":true,"CreatedAt":"2019-07-18T22:34:36","Actor":"trylek","Number":"25783","RawContent":null,"Title":"WIP [no-merge] IsManagedSequential Crossgen instrumentation","State":"open","Body":"This change (not to be merged in) adds IsManagedSequential logging\r\nto Crossgen. I have sent out a separate PR for the counterpart\r\nSuperIlc and CPAOT changes. I'll welcome any suggestions you might\r\nhave as to improving the instrumentation. I'll analyze and summarize\r\nactual comparison results next week.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/coreclr/pull/25783","RelatedDescription":"Open PR \"WIP [no-merge] IsManagedSequential Crossgen instrumentation\" (#25783)"},{"Id":"470016841","IsPullRequest":true,"CreatedAt":"2019-07-18T22:18:38","Actor":"jorive","Number":"25782","RawContent":null,"Title":"Fix: Diagnostics Server IPC thread causes 20-40ms shutdown delays on â€¦","State":"open","Body":"â€¦Windows (#25602)\r\n\r\nNow, the diagnostics server attempts to do appropriate cleanup of its resources during shutdown.\r\n\r\n```log\r\n1. Closes the IPC channel\r\n2. if Windows:\r\n  - Cancel sync IO operations on the running server thread\r\n3. Closes the running server thread handle\r\n```\r\n\r\nThis change alleviates the issue because it manually cancel the blocking `ConnectNamedPipe` sync call in order to allow the server thread exit gracefully (instead of waiting for the OS to tear it down).\r\n\r\nFixes: https://github.com/dotnet/coreclr/issues/25463\r\n(cherry picked from commit dedef281de99a2c2c4777f27166c166b08024b6f)","Url":"https://github.com/dotnet/coreclr/pull/25782","RelatedDescription":"Open PR \"Fix: Diagnostics Server IPC thread causes 20-40ms shutdown delays on â€¦\" (#25782)"},{"Id":"470001825","IsPullRequest":true,"CreatedAt":"2019-07-18T21:37:24","Actor":"jkotas","Number":"25781","RawContent":null,"Title":"Cleanup processor cache size computation","State":"open","Body":"- Make standalone GC PAL to be in sync with the built-in PAL\r\n- Delete dead/unreachable code","Url":"https://github.com/dotnet/coreclr/pull/25781","RelatedDescription":"Open PR \"Cleanup processor cache size computation\" (#25781)"},{"Id":"469926941","IsPullRequest":true,"CreatedAt":"2019-07-18T20:12:07","Actor":"sdmaclea","Number":"25777","RawContent":null,"Title":"Arm32 restore d8-d15 in ThrowExceptionFromContextInternal","State":"closed","Body":"Revised patch which was reverted since it didn't assemble.  Added the 'v' prefix to the `Dn` loads.","Url":"https://github.com/dotnet/coreclr/pull/25777","RelatedDescription":"Closed or merged PR \"Arm32 restore d8-d15 in ThrowExceptionFromContextInternal\" (#25777)"},{"Id":"469941591","IsPullRequest":true,"CreatedAt":"2019-07-18T19:11:11","Actor":"sdmaclea","Number":"25779","RawContent":null,"Title":"WIP Pull arm/arm64 critical 5.0 PAL/diagnostic changes into 3.0","State":"open","Body":"\r\n","Url":"https://github.com/dotnet/coreclr/pull/25779","RelatedDescription":"Open PR \"WIP Pull arm/arm64 critical 5.0 PAL/diagnostic changes into 3.0\" (#25779)"},{"Id":"469935420","IsPullRequest":false,"CreatedAt":"2019-07-18T18:56:32","Actor":"VSadov","Number":"25778","RawContent":null,"Title":"Make array types always represented as method tables.","State":"open","Body":"Currently array types can be represented by either a method table or by a TypeDesc. \r\n\r\nIt could be confusing since otherwise TypeDescs are only used for types that do not have method tables (method pointers, byref types, etc). Having arrays in that mix adds special cases.\r\n\r\nScenarios where we start from an instance, get a method table and then need to transition to TypeDesc seem unnatural as well. \r\nAnother problem is that dual representation enables cases where representations may not match (i.e. in terms of element type), which could be a source of bugs. \r\n\r\nThe reason for all this is mostly historical - from times when array method tables could be shared between arrays of different element types while storing element type info in instances.\r\nThat approach is no longer in use (although there are still comments referring to that).\r\n\r\nIt feels like making array types always represented as unique method tables would be more consistent.\r\n","Url":"https://github.com/dotnet/coreclr/issues/25778","RelatedDescription":"Open issue \"Make array types always represented as method tables.\" (#25778)"},{"Id":"469882839","IsPullRequest":true,"CreatedAt":"2019-07-18T16:59:01","Actor":"sdmaclea","Number":"25776","RawContent":null,"Title":"Revert \"Arm32 restore d8-d15 in ThrowExceptionFromContextInternal\"","State":"closed","Body":"Reverts dotnet/coreclr#25766","Url":"https://github.com/dotnet/coreclr/pull/25776","RelatedDescription":"Closed or merged PR \"Revert \"Arm32 restore d8-d15 in ThrowExceptionFromContextInternal\"\" (#25776)"},{"Id":"469860092","IsPullRequest":false,"CreatedAt":"2019-07-18T16:10:17","Actor":"Symbai","Number":"25774","RawContent":null,"Title":"Perf regression on StringBuilder.Append","State":"open","Body":"There is a small performance regression comparing 2.2 vs 3.0 (10%), but a bigger regression comparing .NET Framework vs 3.0 (18%).\r\n\r\n```\r\nBenchmarkDotNet=v0.11.5, OS=Windows 10.0.18362\r\nIntel Core i7-4960X CPU 3.60GHz (Haswell), 1 CPU, 12 logical and 6 physical cores\r\n.NET Core SDK=3.0.100-preview8-013015\r\n  [Host]     : .NET Core 3.0.0-preview8-27911-03 (CoreCLR 4.700.19.36002, CoreFX 4.700.19.36101), 64bit RyuJIT\r\n  Job-EGUGMC : .NET Core 2.2.3 (CoreCLR 4.6.27414.05, CoreFX 4.6.27414.05), 64bit RyuJIT\r\n  Clr        : .NET Framework 4.7.2 (CLR 4.0.30319.42000), 64bit RyuJIT-v4.8.3815.0\r\n  Core       : .NET Core 3.0.0-preview8-27911-03 (CoreCLR 4.700.19.36002, CoreFX 4.700.19.36101), 64bit RyuJIT\r\n```\r\n\r\n| Method | Runtime |     Toolchain |         Mean |         Error |        StdDev |\r\n|------- |-------- |-------------- |-------------:|--------------:|--------------:|\r\n|  Small |    Core | .NET Core 2.2 |     179.1 ns |     0.7665 ns |     0.5984 ns |\r\n| Medium |    Core | .NET Core 2.2 |   8,932.6 ns |    25.0438 ns |    22.2007 ns |\r\n|  Large |    Core | .NET Core 2.2 | 876,877.0 ns | 4,255.3692 ns | 3,553.4260 ns |\r\n|  Small |     Clr |       Default |     171.3 ns |     0.3084 ns |     0.2734 ns |\r\n| Medium |     Clr |       Default |   8,121.2 ns |    17.6129 ns |    14.7076 ns |\r\n|  Large |     **Clr** |       Default | **805,701.2 ns** | 2,628.9582 ns | 2,459.1291 ns |\r\n|  Small |    Core |       Default |     188.3 ns |     1.1118 ns |     0.9284 ns |\r\n| Medium |    Core |       Default |  10,112.1 ns |    40.8397 ns |    38.2015 ns |\r\n|  Large |    **Core** |       Default | **982,194.7 ns** | 3,529.5412 ns | 3,128.8463 ns |\r\n\r\n\r\n```\r\n[ClrJob]\r\n[CoreJob]\r\n[RPlotExporter]\r\npublic  class ObjectTest\r\n{\r\n    const string testString = \"blablabla\";\r\n      \r\n    [Benchmark]\r\n    public bool Small()\r\n    {\r\n        var sb = new StringBuilder();\r\n        for (int i = 0; i < 10; i++)\r\n        {\r\n            sb.Append(testString);\r\n        }\r\n        return sb.Length > 0;\r\n    }\r\n    [Benchmark]\r\n    public bool Medium()\r\n    {\r\n        var sb = new StringBuilder();\r\n        for (int i = 0; i < 1000; i++)\r\n        {\r\n            sb.Append(testString);\r\n        }\r\n        return sb.Length > 0;\r\n    }\r\n    [Benchmark]\r\n    public bool Large()\r\n    {\r\n        var sb = new StringBuilder();\r\n        for (int i = 0; i < 100000; i++)\r\n        {\r\n            sb.Append(testString);\r\n        }\r\n        return sb.Length > 0;\r\n    }\r\n}\r\n```","Url":"https://github.com/dotnet/coreclr/issues/25774","RelatedDescription":"Open issue \"Perf regression on StringBuilder.Append\" (#25774)"},{"Id":"469770039","IsPullRequest":true,"CreatedAt":"2019-07-18T13:28:38","Actor":"vitek-karas","Number":"25773","RawContent":null,"Title":"Code cleanup in binder","State":"open","Body":"I was reading through the binder and related code and fixed mostly formatting issues. There are some simple changes which remove unnecessary variables, stale comments and so on.","Url":"https://github.com/dotnet/coreclr/pull/25773","RelatedDescription":"Open PR \"Code cleanup in binder\" (#25773)"},{"Id":"469677881","IsPullRequest":true,"CreatedAt":"2019-07-18T09:56:31","Actor":"kouvel","Number":"25770","RawContent":null,"Title":"Use native code slot for default interface methods","State":"open","Body":"- So that `MethodDesc::GetNativeCode()` can retrieve the current native code entry point (instead of returning null as before), and code versioning can find a matching code version from the code start address\r\n- Interface methods currently require having a precode, so the \"method entry point\" can't be used to directly store the native code entry point\r\n- Reenabled a couple of default interface method tests under GCStress\r\n- Other small cleanup\r\n\r\nFixes https://github.com/dotnet/coreclr/issues/25690","Url":"https://github.com/dotnet/coreclr/pull/25770","RelatedDescription":"Open PR \"Use native code slot for default interface methods\" (#25770)"},{"Id":"469661029","IsPullRequest":false,"CreatedAt":"2019-07-18T09:21:15","Actor":"AriNuer","Number":"25769","RawContent":null,"Title":"Test failure: JIT_IL_Conformance._Old_Base_cgt_cgt_/_Old_Base_cgt_cgt_cmd","State":"open","Body":"Opened on behalf of @AriNuer\r\n\r\nThe test `JIT_IL_Conformance._Old_Base_cgt_cgt_/_Old_Base_cgt_cgt_cmd` has failed.\r\n\r\nFailure Message:\r\n```\r\n\\r\r\ncmdLine:C:\\\\dotnetbuild\\\\work\\\\4edb03de-7e26-49b1-8d0f-1bbe3f333be1\\\\Work\\\\fb50d468-3e00-47a7-9741-fc3bce594ca9\\\\Exec\\\\JIT\\\\IL_Conformance\\\\Old\\\\Base\\\\cgt\\\\cgt.cmd Timed Out\\r\r\n\\r\r\nReturn code:      -100\\r\r\nRaw output file:      C:\\\\dotnetbuild\\\\work\\\\4edb03de-7e26-49b1-8d0f-1bbe3f333be1\\\\Work\\\\fb50d468-3e00-47a7-9741-fc3bce594ca9\\\\Exec\\\\JIT\\\\IL_Conformance\\\\Reports\\\\JIT.IL_Conformance\\\\Old\\\\Base\\\\cgt\\\\cgt.output.txt\\r\r\nRaw output:\\r\r\nBEGIN EXECUTION\\r\r\n \\\"C:\\\\dotnetbuild\\\\work\\\\4edb03de-7e26-49b1-8d0f-1bbe3f333be1\\\\Payload\\\\corerun.exe\\\" cgt.exe \\r\r\n\\r\r\ncmdLine:C:\\\\dotnetbuild\\\\work\\\\4edb03de-7e26-49b1-8d0f-1bbe3f333be1\\\\Work\\\\fb50d468-3e00-47a7-9741-fc3bce594ca9\\\\Exec\\\\JIT\\\\IL_Conformance\\\\Old\\\\Base\\\\cgt\\\\cgt.cmd Timed Out\\r\r\nTest Harness Exitcode is : -100\\r\r\nTo run the test:\\r\r\n> set CORE_ROOT=C:\\\\dotnetbuild\\\\work\\\\4edb03de-7e26-49b1-8d0f-1bbe3f333be1\\\\Payload\\r\r\n> C:\\\\dotnetbuild\\\\work\\\\4edb03de-7e26-49b1-8d0f-1bbe3f333be1\\\\Work\\\\fb50d468-3e00-47a7-9741-fc3bce594ca9\\\\Exec\\\\JIT\\\\IL_Conformance\\\\Old\\\\Base\\\\cgt\\\\cgt.cmd\\r\r\nExpected: True\\r\r\nActual:   False\r\n```\r\n\r\nStack Trace:\r\n```\r\n   at JIT_IL_Conformance._Old_Base_cgt_cgt_._Old_Base_cgt_cgt_cmd() in F:\\workspace.5\\_work\\1\\s\\bin\\tests\\Windows_NT.x64.Release\\TestWrappers\\JIT.IL_Conformance\\JIT.IL_Conformance.XUnitWrapper.cs:line 2132\r\n```\r\n\r\nBuild : Master - 20190717.3 (Core Tests)\r\nFailing configurations:\r\n- Windows.10.Amd64.Core-x64\r\n  - \r\n\r\nDetails:\r\nhttps://mc.dot.net/#/product/netcore/master/source/official~2Fdotnet~2Fcoreclr~2Frefs~2Fheads~2Fmaster/type/test~2Ffunctional~2Fcli~2F/build/20190717.3/workItem/JIT.IL_Conformance/analysis/xunit/JIT_IL_Conformance._Old_Base_cgt_cgt_~2F_Old_Base_cgt_cgt_cmd","Url":"https://github.com/dotnet/coreclr/issues/25769","RelatedDescription":"Open issue \"Test failure: JIT_IL_Conformance._Old_Base_cgt_cgt_/_Old_Base_cgt_cgt_cmd\" (#25769)"},{"Id":"469518685","IsPullRequest":true,"CreatedAt":"2019-07-18T08:15:54","Actor":"sdmaclea","Number":"25766","RawContent":null,"Title":"Arm32 restore d8-d15 in ThrowExceptionFromContextInternal","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/25766","RelatedDescription":"Closed or merged PR \"Arm32 restore d8-d15 in ThrowExceptionFromContextInternal\" (#25766)"},{"Id":"469591930","IsPullRequest":true,"CreatedAt":"2019-07-18T06:28:29","Actor":"clamp03","Number":"25768","RawContent":null,"Title":"Remove a redundant #ifdef directive","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/25768","RelatedDescription":"Open PR \"Remove a redundant #ifdef directive\" (#25768)"},{"Id":"469550449","IsPullRequest":false,"CreatedAt":"2019-07-18T03:13:52","Actor":"SilentCC","Number":"25767","RawContent":null,"Title":"Out Of Memory Exception in .NET Core 3.0 preview 5","State":"open","Body":"Since I update my application to .NET Core 3.0 preview 5 in container scenario, the OutOfMemory exceptions come out sometimes.\r\n\r\nProduction Environments:\r\n\r\n*   **production cluster**:  docker swarm\r\n*   **docker container cpu limit** :1.5\r\n*   **docker container memory limit**: 2G\r\n*   **docker container duplicates** : 2\r\n*   **PV** : about  60000 per day\r\n*   **Application** : .NET Core MVC Web\r\n*   **GC type** : Server GC\r\n*   **.Net version** : .NET Core 3.0 preview 5\r\n\r\nPrevious version is .NET Core 2.2 , and it worked fine all the time until it was updated to .NET Core 3.0 a few days ago.\r\n\r\nLast night, It threw lots of OutOfMemory exceptions and restarted by docker finally.I think its memory exceeded docker memory limit. \r\n\r\nHere is error logs, note that OutOfMemory exception may occurs on many different places .\r\n\r\n```\r\nSystem.OutOfMemoryException: Exception of type 'System.OutOfMemoryException' was thrown.\r\n   at System.Data.SqlClient.SqlCommand.<>c.<ExecuteDbDataReaderAsync>b__126_0(Task`1 result)\r\n   at System.Threading.Tasks.ContinuationResultTaskFromResultTask`2.InnerInvoke()\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot, Thread threadPoolThread)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n```\r\n\r\n```\r\n \"Message\": \"Exception of type 'System.OutOfMemoryException' was thrown.\",\r\n  \"Source\": \"System.Private.CoreLib\",\r\n  \"StackTraceString\": \"   \r\n     at System.Collections.Generic.Dictionary`2.Initialize(Int32 capacity)\\n   at System.Collections.Generic.Dictionary`2..ctor(Int32 capacity, IEqualityComparer`1 comparer)\\n \r\n     at System.Linq.Expressions.Compiler.CompilerScope..ctor(Object node, Boolean isMethod)\\n   at System.Linq.Expressions.Compiler.VariableBinder.VisitLambda[T](Expression`1 node)\\n   \r\n     at System.Linq.Expressions.Compiler.LambdaCompiler.Compile(LambdaExpression lambda)\\n   at System.Linq.Expressions.Expression`1.Compile(Boolean preferInterpretation)\\n  \r\n```\r\n\r\n```\r\n \"Message\": \"Exception of type 'System.OutOfMemoryException' was thrown.\",\r\n  \"Source\": \"System.Private.CoreLib\",\r\n  \"StackTraceString\": \"   \r\n       at System.GC.AllocateNewArray(IntPtr typeHandle, Int32 length, Boolean zeroingOptional)\\n   at System.GC.AllocateUninitializedArray[T](Int32 length)\\n   \r\n       at System.Buffers.TlsOverPerCoreLockedStacksArrayPool`1.Rent(Int3  2 minimumLength)\\n  \r\n       at Microsoft.AspNetCore.Http.Extensions.StreamCopyOperation.CopyToAsync(Stream source, Stream destination, Nullable`1 count, Int32 bufferSize, CancellationToken cancel)\\n   at Microsoft.AspNetCore.StaticFiles.StaticFileContext.SendAsync()\\n   \r\n       at Microsoft.AspNetCore.StaticFiles.StaticFileContext.ServeStaticFile(HttpContext context, RequestDelegate next)\\n   \r\n       at Microsoft.AspNetCore.Diagnostics.StatusCodePagesMiddleware.Invoke(HttpContext context)\\n   at Microsoft.AspNetCore.Diagnostics.ExceptionHandlerMiddleware.<Invoke>g__Awaited|6_0(ExceptionHandlerMiddleware middleware, HttpContext context, Task task)\",\r\n```\r\n\r\n```\r\nMicrosoft.AspNetCore.Diagnostics.ExceptionHandlerMiddleware\r\nSystem.OutOfMemoryException: Exception of type 'System.OutOfMemoryException' was thrown.\r\n   at System.Linq.Expressions.Compiler.CompilerScope.SetParent(LambdaCompiler lc, CompilerScope parent)\r\n   at System.Linq.Expressions.Compiler.CompilerScope.Enter(LambdaCompiler lc, CompilerScope parent)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.EmitLambdaBody(CompilerScope parent, Boolean inlined, CompilationFlags flags)\r\n   at System.Linq.Expressions.Compiler.LambdaCompiler.Compile(LambdaExpression lambda)\r\n   at System.Linq.Expressions.Expression`1.Compile(Boolean preferInterpretation)\r\n   at Microsoft.Extensions.DependencyInjection.ActivatorUtilities.CreateFactory(Type instanceType, Type[] argumentTypes)\r\n   at System.Threading.LazyInitializer.EnsureInitializedCore[T](T& target, Boolean& initialized, Object& syncLock, Func`1 valueFactory)\r\n   at Microsoft.Extensions.Http.DefaultTypedHttpClientFactory`1.CreateClient(HttpClient httpClient)\r\n   at Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.<>c__DisplayClass10_0`2.<AddTypedClient>b__0(IServiceProvider s)\r\n   at ResolveService(ILEmitResolverBuilderRuntimeContext , ServiceProviderEngineScope )\r\n   at Microsoft.Extensions.DependencyInjection.ActivatorUtilities.GetService(IServiceProvider sp, Type type, Type requiredBy, Boolean isDefaultParameterRequired)\r\n   at lambda_method(Closure , IServiceProvider , Object[] )\r\n   at Microsoft.AspNetCore.Mvc.Controllers.ControllerFactoryProvider.<>c__DisplayClass5_0.<CreateControllerFactory>g__CreateController|0(ControllerContext controllerContext)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeInnerFilterAsync()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextResourceFilter>g__Awaited|24_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResourceExecutedContextSealed context)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.InvokeFilterPipelineAsync()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Awaited|17_0(ResourceInvoker invoker, Task task, IDisposable scope)\r\n   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)\r\n   at Microsoft.AspNetCore.Diagnostics.StatusCodePagesMiddleware.Invoke(HttpContext context)\r\n   at Microsoft.AspNetCore.Diagnostics.ExceptionHandlerMiddleware.<Invoke>g__Awaited|6_0(ExceptionHandlerMiddleware \r\n```\r\n\r\nI suppose that  GC may be affected by GCHeapHardLimit in .NET Core 3.0.\r\nAny one can help me? Thank you very much!\r\n","Url":"https://github.com/dotnet/coreclr/issues/25767","RelatedDescription":"Open issue \"Out Of Memory Exception in .NET Core 3.0 preview 5\" (#25767)"},{"Id":"469494790","IsPullRequest":true,"CreatedAt":"2019-07-17T23:20:41","Actor":"mjsabby","Number":"25765","RawContent":null,"Title":"Move GetRawData & GetRawSzArrayData to RuntimeHelpers instead of JitHelpers","State":"open","Body":"RuntimeHelpers is a better location for this than JitHelpers.\r\n\r\nWe can then have this be in the same Type in CoreRT as well.\r\n\r\nhttps://github.com/dotnet/corefx/issues/33706#issuecomment-512156540","Url":"https://github.com/dotnet/coreclr/pull/25765","RelatedDescription":"Open PR \"Move GetRawData & GetRawSzArrayData to RuntimeHelpers instead of JitHelpers\" (#25765)"},{"Id":"469493786","IsPullRequest":true,"CreatedAt":"2019-07-17T23:16:34","Actor":"briansull","Number":"25764","RawContent":null,"Title":"Stop forcing jumpstamp nops in ngen images","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/25764","RelatedDescription":"Open PR \"Stop forcing jumpstamp nops in ngen images\" (#25764)"},{"Id":"469486763","IsPullRequest":true,"CreatedAt":"2019-07-17T22:54:07","Actor":"tannergooding","Number":"25763","RawContent":null,"Title":"Fixing Buffer::BlockCopy, JIT_MemCpy, and JIT_MemSet to just call the appropriate CRT functions for x64 Windows, as is already done for all other platforms/targets","State":"open","Body":"This resolves #25505 for release/3.0 and is a backport of https://github.com/dotnet/coreclr/pull/25750.\r\n\r\nBased on the original issue where JIT_MemCpy was changed to use rep movsb (see #7198), there was:\r\n\r\nminor improvement (~5%) for arrays of length 0 to 120\r\ngood improvement (~40%) for arrays of length 130 to 510\r\n~47% for arrays of length 130 to 310\r\n~39% for arrays of length 320 to 440\r\n~27% for arrays of length 450 to 510\r\nlittle improvement (~1%) for arrays above 510 in length\r\nThis was only tested for 520 and 1000 bytes\r\nHowever, on AMD processors, there are additional limitations around rep movsb and when it is beneficial to use. The common conditions under which it is being used in the JIT_MemCpy method today actually cause a 2x perf decrease for arrays larger than 512 bytes.\r\n\r\nHaving a custom memcpy routine adds additional maintenance burden, can be error prone, is generally not as widely tested, and does not get many of the optimizations that the CRT implementations receives. This, coupled with the overall minor improvements for small arrays on Intel processors and the 2x regression for arrays over 512 bytes on AMD processors is resulting in the custom memcpy routine being removed.\r\n\r\nIt would be beneficial for any future improvements to memcpy to be made directly against glibc and crt instead.","Url":"https://github.com/dotnet/coreclr/pull/25763","RelatedDescription":"Open PR \"Fixing Buffer::BlockCopy, JIT_MemCpy, and JIT_MemSet to just call the appropriate CRT functions for x64 Windows, as is already done for all other platforms/targets\" (#25763)"},{"Id":"469475486","IsPullRequest":false,"CreatedAt":"2019-07-17T22:22:01","Actor":"Anipik","Number":"25762","RawContent":null,"Title":"EventSource.Write corrupts nullable values in Release builds using .NET Native (UWP)","State":"closed","Body":"When using a nullable value in EventSource.Write, it appears the ETW event gets corrupted.\r\n\r\nRepro steps (Visual Studio 2019)\r\n\r\n1. Create a new \"Blank App (Universal Windows)\" project in Visual Studio\r\nThis should give you a Universal Windows project depending on Microsoft.NETCore.UniversalWindowsPlatform 6.2.8\r\n2. Paste this snippet into the ``App`` class constructor\r\n````csharp\r\n            var eventSource = new EventSource(\"ETWBugRepro\");\r\n            uint? nullableValue = 0xAABBCCDD;\r\n            eventSource.Write(\"EventWithNullableValue\", new { nullableValue });\r\n````\r\n3. Start a trace\r\n(for instance ``xperf -start ETWBugTrace -on *ETWBugRepro -f trace.etl``)\r\n4. Build the Release configuration and run\r\n5. Build the Debug configuration (alternatively just disable .NET Native compilation) and run\r\n6. Inspect the trace file\r\n(for instance ``xperf -stop ETWBugTrace && wpa trace.etl``)\r\n\r\nWithout .NET Native compilation, the event payload is\r\n``nullableValue: { HasValue: 1; Value: 0xAABBCCDD; }``\r\n\r\nWith .NET Native compilation enabled, the event payload is\r\n``nullableValue: { HasValue: 0xDD; Value: 0;}``\r\n","Url":"https://github.com/dotnet/coreclr/issues/25762","RelatedDescription":"Closed issue \"EventSource.Write corrupts nullable values in Release builds using .NET Native (UWP)\" (#25762)"},{"Id":"469474942","IsPullRequest":true,"CreatedAt":"2019-07-17T22:20:20","Actor":"echesakovMSFT","Number":"25761","RawContent":null,"Title":"[NO MERGE] SDK Style Projects","State":"open","Body":"**NO MERGE**","Url":"https://github.com/dotnet/coreclr/pull/25761","RelatedDescription":"Open PR \"[NO MERGE] SDK Style Projects\" (#25761)"},{"Id":"469470930","IsPullRequest":true,"CreatedAt":"2019-07-17T22:10:03","Actor":"josalem","Number":"25760","RawContent":null,"Title":"Delay Diagnostics IPC response till after EventPipe::Enable has completed","State":"open","Body":"This change refactors all unbuffered pipe writing (calls to `IpcStream::Write`) into their own functions, allowing `EventPipe::Enable` to run to completion without writing anything to the pipe.  This makes it possible to send the IPC response _after_ all the provider callbacks have been called.  This is a non-breaking change and should fix the reason for `SentinelEventSource` in `tests/src/eventpipe/common/IpcTraceTest.cs`.\r\n\r\nresolves #25738","Url":"https://github.com/dotnet/coreclr/pull/25760","RelatedDescription":"Open PR \"Delay Diagnostics IPC response till after EventPipe::Enable has completed\" (#25760)"}],"ResultType":"GitHubIssue"},"CLI-Issues":{"Issues":[{"Id":"470120652","IsPullRequest":true,"CreatedAt":"2019-07-19T04:02:08","Actor":"dotnet-maestro[bot]","Number":"11947","RawContent":null,"Title":"[master] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190718.6\r\n- **Date Produced**: 7/19/2019 3:31 AM\r\n- **Commit**: 22a959a503bd5e0a4506d2683449943761aa8781\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview8.19368.6\r\n\r\n[marker]: <> (End:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11947","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from aspnet/AspNetCore\" (#11947)"},{"Id":"469504540","IsPullRequest":true,"CreatedAt":"2019-07-19T03:37:08","Actor":"dotnet-maestro[bot]","Number":"11939","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190717.12\r\n- **Date Produced**: 7/18/2019 1:25 AM\r\n- **Commit**: 02e6fc2ff8d962383f538241c899decc0d655a60\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview8-27917-12\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-preview8-27917-12\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.0.0-preview8-27917-12\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-preview8-27917-12\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11939","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#11939)"},{"Id":"469538615","IsPullRequest":true,"CreatedAt":"2019-07-19T01:37:45","Actor":"dotnet-maestro[bot]","Number":"11941","RawContent":null,"Title":"[master] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190718.5\r\n- **Date Produced**: 7/19/2019 1:06 AM\r\n- **Commit**: 3039748ccfde18e2cca40259257c27f56ee7e025\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview8.19368.5\r\n\r\n[marker]: <> (End:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11941","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from aspnet/AspNetCore\" (#11941)"},{"Id":"469478670","IsPullRequest":true,"CreatedAt":"2019-07-18T21:52:30","Actor":"nguerrera","Number":"11937","RawContent":null,"Title":"Unpin DependencyModel","State":"closed","Body":"dotnet/core-setup#7137 is fixed and so we can now unpin DependencyModel\r\n\r\nAlso, it turns out that we were running msbuild on the stage0 runtime during tests, instead of the incoming runtime from core-setup, which is now fixed. This showed up as a missing method exception during local testing of this change.","Url":"https://github.com/dotnet/cli/pull/11937","RelatedDescription":"Closed or merged PR \"Unpin DependencyModel\" (#11937)"},{"Id":"469975655","IsPullRequest":true,"CreatedAt":"2019-07-18T20:32:10","Actor":"nugetlurker","Number":"11946","RawContent":null,"Title":"Insert NuGet Build 5.3.0-preview.2.6103 into cli","State":"open","Body":"Insert NuGet Build 5.3.0-preview.2.6103 into cli master branch","Url":"https://github.com/dotnet/cli/pull/11946","RelatedDescription":"Open PR \"Insert NuGet Build 5.3.0-preview.2.6103 into cli\" (#11946)"},{"Id":"469765219","IsPullRequest":false,"CreatedAt":"2019-07-18T13:18:54","Actor":"kev24uk","Number":"11945","RawContent":null,"Title":"Add Ability to specify nuget.config file for dotnet test","State":"open","Body":"## Steps to reproduce\r\nRun dotnet test against a project or solution which uses nuget packages from a private repository.\r\n\r\n## Expected  behavior\r\nShould be able to provide a --configfile parameter (as per dotnet build, restore and publish) and the packages will be restored correctly.\r\n\r\n## Actual behavior\r\nThere is no parameter to provide a nuget.config file so you have to run a dotnet build or restore as a separate step first.","Url":"https://github.com/dotnet/cli/issues/11945","RelatedDescription":"Open issue \"Add Ability to specify nuget.config file for dotnet test\" (#11945)"},{"Id":"469735299","IsPullRequest":true,"CreatedAt":"2019-07-18T12:13:07","Actor":"dotnet-maestro[bot]","Number":"11944","RawContent":null,"Title":"[master] Update dependencies from dotnet/templating","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190717.2\r\n- **Date Produced**: 7/18/2019 2:31 AM\r\n- **Commit**: d38ea0e932aab2a5447e663986eb0f4068926e21\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 2.0.0-preview8.19367.2\r\n\r\n[marker]: <> (End:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11944","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/templating\" (#11944)"},{"Id":"469732464","IsPullRequest":true,"CreatedAt":"2019-07-18T12:06:30","Actor":"dotnet-maestro[bot]","Number":"11943","RawContent":null,"Title":"[master] Update dependencies from dotnet/sdk","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:145b81c3-fdcc-4cb6-70fa-08d645e3a44f)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190717.2\r\n- **Date Produced**: 7/17/2019 4:11 PM\r\n- **Commit**: bd8cce7843a5b3f431e1011b1ca061d378197d41\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview8.19367.2\r\n\r\n[marker]: <> (End:145b81c3-fdcc-4cb6-70fa-08d645e3a44f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11943","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/sdk\" (#11943)"},{"Id":"469732268","IsPullRequest":true,"CreatedAt":"2019-07-18T12:06:02","Actor":"dotnet-maestro[bot]","Number":"11942","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:433865d5-f754-408e-06ed-08d645e2db8e)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190717.8\r\n- **Date Produced**: 7/17/2019 10:06 PM\r\n- **Commit**: 2359dc4184133defa27c8f3072622270b71b4ecf\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19367.8\r\n\r\n[marker]: <> (End:433865d5-f754-408e-06ed-08d645e2db8e)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11942","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/arcade\" (#11942)"},{"Id":"469531653","IsPullRequest":false,"CreatedAt":"2019-07-18T01:48:25","Actor":"winnieryl","Number":"11940","RawContent":null,"Title":" dotnet-install.sh does not download correct version on RHEL 6 workstation","State":"open","Body":"https://dot.net/v1/dotnet-install.sh\r\nthis script, at line 151, it does not consider RHEL 6 Workstation, when I run this on rhel6 workstation, it downloads the wrong version fo dotnet runtime.\r\n\r\n## Steps to reproduce\r\nprepare a rhel 6 workstation, run dotnet-install.sh to install dotnet runtime\r\n\r\n## Expected  behavior\r\ndownload dotnet runtime rhel6 version\r\n\r\n## Actual behavior\r\ndoes not download the correct version\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11940","RelatedDescription":"Open issue \" dotnet-install.sh does not download correct version on RHEL 6 workstation\" (#11940)"},{"Id":"469500632","IsPullRequest":true,"CreatedAt":"2019-07-17T23:43:22","Actor":"wli3","Number":"11938","RawContent":null,"Title":"AllowTrailingCommas and JsonCommentHandling.Skip for RuntimeConfig","State":"open","Body":"Fix https://github.com/dotnet/cli/issues/11918","Url":"https://github.com/dotnet/cli/pull/11938","RelatedDescription":"Open PR \"AllowTrailingCommas and JsonCommentHandling.Skip for RuntimeConfig\" (#11938)"},{"Id":"469461723","IsPullRequest":true,"CreatedAt":"2019-07-17T22:15:39","Actor":"dotnet-maestro[bot]","Number":"11936","RawContent":null,"Title":"[master] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190717.6\r\n- **Date Produced**: 7/17/2019 9:44 PM\r\n- **Commit**: fedf03bd47ca1c69de497f28349e4782e26874e9\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview8.19367.6\r\n\r\n[marker]: <> (End:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11936","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from aspnet/AspNetCore\" (#11936)"},{"Id":"468983080","IsPullRequest":true,"CreatedAt":"2019-07-17T22:10:56","Actor":"wli3","Number":"11926","RawContent":null,"Title":"Give specific instruction for zsh on macOS for global tools PATH","State":"closed","Body":"fix https://github.com/dotnet/cli/issues/9321\r\nexample:\r\n\r\n```\r\n% dotnet tool install -g dotnetsay --add-source https://api.nuget.org/v3/index.json\r\nTools directory '/Users/williamli/.dotnet/tools' is not currently on the PATH environment variable.\r\nIf you are using zsh, you can add it to your profile by running the following command:\r\n\r\ncat << \\EOF >> ~/.zprofile\r\n# Add .NET Core SDK tools\r\nexport PATH=\"$PATH:/Users/williamli/.dotnet/tools\"\r\nEOF\r\n\r\nAnd run `zsh -l` to make it available for current session.\r\n\r\nYou can only add it to the current session by running the following command:\r\n\r\nexport PATH=\"$PATH:/Users/williamli/.dotnet/tools\"\r\n\r\nYou can invoke the tool using the following command: dotnetsay\r\nTool 'dotnetsay' (version '2.1.4') was successfully installed.\r\n```\r\n","Url":"https://github.com/dotnet/cli/pull/11926","RelatedDescription":"Closed or merged PR \"Give specific instruction for zsh on macOS for global tools PATH\" (#11926)"},{"Id":"469455756","IsPullRequest":true,"CreatedAt":"2019-07-17T21:59:35","Actor":"dotnet-maestro[bot]","Number":"11935","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190717.07\r\n- **Date Produced**: 7/17/2019 9:28 PM\r\n- **Commit**: fbe24089c59a9f330dfb7c4db4ae97a293685510\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview8-27917-07\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-preview8-27917-07\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-preview8-27917-07\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11935","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#11935)"},{"Id":"469403519","IsPullRequest":true,"CreatedAt":"2019-07-17T20:35:38","Actor":"dotnet-maestro[bot]","Number":"11933","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190717.05\r\n- **Date Produced**: 7/17/2019 7:29 PM\r\n- **Commit**: 6616692a7281748c11e3d6873988d85a1e79fc50\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview8-27917-05\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-preview8-27917-05\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-preview8-27917-05\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11933","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#11933)"},{"Id":"469407582","IsPullRequest":true,"CreatedAt":"2019-07-17T20:15:22","Actor":"dotnet-maestro[bot]","Number":"11934","RawContent":null,"Title":"[master] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190717.4\r\n- **Date Produced**: 7/17/2019 7:39 PM\r\n- **Commit**: 4f638f8e11f827ce81c95f92a2723954826ee953\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview8.19367.4\r\n\r\n[marker]: <> (End:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11934","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from aspnet/AspNetCore\" (#11934)"},{"Id":"469163552","IsPullRequest":true,"CreatedAt":"2019-07-17T13:02:12","Actor":"dotnet-maestro[bot]","Number":"11932","RawContent":null,"Title":"[master] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190717.2\r\n- **Date Produced**: 7/17/2019 12:26 PM\r\n- **Commit**: f4f5b16e9305d54d27aefe0076cf153efab7e119\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview8.19367.2\r\n\r\n[marker]: <> (End:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11932","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from aspnet/AspNetCore\" (#11932)"},{"Id":"469154754","IsPullRequest":true,"CreatedAt":"2019-07-17T12:37:09","Actor":"dotnet-maestro[bot]","Number":"11931","RawContent":null,"Title":"[master] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:145b81c3-fdcc-4cb6-70fa-08d645e3a44f)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190716.4\r\n- **Date Produced**: 7/16/2019 10:20 PM\r\n- **Commit**: 74b343a9f4db2924a37e78de817b2d314f812c16\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview8.19366.4\r\n\r\n[marker]: <> (End:145b81c3-fdcc-4cb6-70fa-08d645e3a44f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11931","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/sdk\" (#11931)"},{"Id":"469064924","IsPullRequest":true,"CreatedAt":"2019-07-17T09:16:55","Actor":"dotnet-maestro[bot]","Number":"11929","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190717.01\r\n- **Date Produced**: 7/17/2019 8:46 AM\r\n- **Commit**: 7cf49f78deaae14948ce59fc6d9266365888f7b6\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview8-27917-01\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-preview8-27917-01\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-preview8-27917-01\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11929","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#11929)"},{"Id":"469079348","IsPullRequest":false,"CreatedAt":"2019-07-17T09:16:47","Actor":"Jepson109","Number":"11930","RawContent":null,"Title":"Restore  with waning NETSDK1080 after target the project(mvc/web/webapi) framework from 2.1 to 3.0","State":"open","Body":"## Steps to reproduce\r\n1.Install .NET Core 3.0 Preview 7 build 3.0.100-preview7-012821\r\n2.Open an existing 2.1 (mvc/web/webapi) project\r\n3.Target the project(mvc/web/webapi) framework from 2.1 to 3.0\r\n\r\n## Expected  behavior\r\nDotnet restore & dotnet build successfully\r\n\r\n## Actual behavior\r\n**Dotnet restore  with warning NETSDK1080.** Details as below :\r\n![image](https://user-images.githubusercontent.com/38854445/61362997-cb028e00-a8b5-11e9-8a59-f614eb5228cf.png)\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview7-012821\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.DefaultItems.targets(154,5): warning NETSDK1080: A PackageReference to Microsoft.AspNetCore.App is not necessary when targeting .NET Core 3.0 or higher. If Microsoft.NET.Sdk.Web is used, the shared framework will be referenced automatically. Otherwise, the PackageReference should be replaced with a FrameworkReference. [C:\\Users\\v-zhuqin\\Desktop\\mvc23\\mvc23.csproj]\r\n  Restore completed in 158.55 ms for C:\\Users\\v-zhuqin\\Desktop\\mvc23\\mvc23.csproj.\r\n\r\n**Dotnet build failed with warning and error.** Details as below :\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview7-012821\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.DefaultItems.targets(154,5): warning NETSDK1080: A PackageReference to Microsoft.AspNetCore.App is not necessary when targeting .NET Core 3.0 or higher. If Microsoft.NET.Sdk.Web is used, the shared framework will be referenced automatically. Otherwise, the PackageReference should be replaced with a FrameworkReference. [C:\\Users\\v-zhuqin\\Desktop\\mvc23\\mvc23.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview7-012821\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.DefaultItems.targets(154,5): warning NETSDK1080: A PackageReference to Microsoft.AspNetCore.App is not necessary when targeting .NET Core 3.0 or higher. If Microsoft.NET.Sdk.Web is used, the shared framework will be referenced automatically. Otherwise, the PackageReference should be replaced with a FrameworkReference. [C:\\Users\\v-zhuqin\\Desktop\\mvc23\\mvc23.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview7-012821\\Sdks\\Microsoft.NET.Sdk.Razor\\build\\netstandard2.0\\Sdk.Razor.CurrentVersion.targets(404,5): warning RAZORSDK1006: Detected Razor language version downgrade. This is typically caused by a reference to the Microsoft.AspNetCore.Razor.Design package. Consider removing this package reference. [C:\\Users\\v-zhuqin\\Desktop\\mvc23\\mvc23.csproj]\r\nStartup.cs(39,56): warning CS0618: 'IHostingEnvironment' is obsolete: 'This type is obsolete and will be removed in a future version. The recommended alternative is Microsoft.AspNetCore.Hosting.IWebHostEnvironment.' [C:\\Users\\v-zhuqin\\Desktop\\mvc23\\mvc23.csproj]\r\nStartup.cs(35,55): warning CS0618: 'CompatibilityVersion.Version_2_1' is obsolete: 'This CompatibilityVersion value is obsolete. The recommended alternatives are Version_3_0 or later.' [C:\\Users\\v-zhuqin\\Desktop\\mvc23\\mvc23.csproj]\r\nStartup.cs(55,13): warning MVC1005: Using 'UseMvc' to configure MVC is not supported while using Endpoint Routing. To continue using 'UseMvc', please set 'MvcOptions.EnableEndpointRouting = false' inside 'ConfigureServices'. [C:\\Users\\v-zhuqin\\Desktop\\mvc23\\mvc23.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.razor.design\\2.1.2\\build\\netstandard2.0\\Microsoft.AspNetCore.Razor.Design.CodeGeneration.targets(69,5): error : The project C:\\Users\\v-zhuqin\\Desktop\\mvc23 must provide a value for Configuration. [C:\\Users\\v-zhuqin\\Desktop\\mvc23\\mvc23.csproj]\r\n    6 Warning(s)\r\n    1 Error(s)\r\n\r\n![image](https://user-images.githubusercontent.com/38854445/61363429-9216e900-a8b6-11e9-8a50-1a516eab7c2a.png)\r\n\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview7-012821\r\n Commit:    6348f1068a\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview7-012821\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview7-27912-14\r\n  Commit:  4da6ee6450\r\n\r\n.NET Core SDKs installed:\r\n  2.1.701 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview7-012821 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview7.19365.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview7-27912-14 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview7-27912-14 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11930","RelatedDescription":"Open issue \"Restore  with waning NETSDK1080 after target the project(mvc/web/webapi) framework from 2.1 to 3.0\" (#11930)"},{"Id":"469008498","IsPullRequest":true,"CreatedAt":"2019-07-17T06:57:55","Actor":"dotnet-maestro[bot]","Number":"11928","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190716.14\r\n- **Date Produced**: 7/17/2019 6:22 AM\r\n- **Commit**: f7a00f0aa4a0dcf878a9345d260c8f4cf495b65e\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview8-27916-14\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-preview8-27916-14\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-preview8-27916-14\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11928","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#11928)"},{"Id":"468992296","IsPullRequest":true,"CreatedAt":"2019-07-17T05:55:39","Actor":"dotnet-maestro[bot]","Number":"11927","RawContent":null,"Title":"[master] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190716.10\r\n- **Date Produced**: 7/17/2019 5:24 AM\r\n- **Commit**: 4ba66f05bf2ff20e38ae00d3ab27256df778a652\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview8.19366.10\r\n\r\n[marker]: <> (End:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11927","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from aspnet/AspNetCore\" (#11927)"},{"Id":"468964664","IsPullRequest":true,"CreatedAt":"2019-07-17T05:38:25","Actor":"dotnet-maestro[bot]","Number":"11924","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190716.13\r\n- **Date Produced**: 7/17/2019 5:04 AM\r\n- **Commit**: 5257c8c2bf8b492a8df9aaae89ebdc3b26356936\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview8-27916-13\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-preview8-27916-13\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-preview8-27916-13\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11924","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#11924)"},{"Id":"468965211","IsPullRequest":true,"CreatedAt":"2019-07-17T03:50:16","Actor":"dotnet-maestro[bot]","Number":"11925","RawContent":null,"Title":"[master] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190716.8\r\n- **Date Produced**: 7/17/2019 3:19 AM\r\n- **Commit**: 892ea7e57464984fa530ad2b3e4b6a66e157392e\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview8.19366.8\r\n\r\n[marker]: <> (End:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11925","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from aspnet/AspNetCore\" (#11925)"},{"Id":"468907112","IsPullRequest":true,"CreatedAt":"2019-07-17T00:04:51","Actor":"dotnet-maestro[bot]","Number":"11923","RawContent":null,"Title":"[master] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190716.5\r\n- **Date Produced**: 7/16/2019 10:58 PM\r\n- **Commit**: 9f82b7be7523e4057cc610bc9aaadf28887952c3\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview8.19366.5\r\n\r\n[marker]: <> (End:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11923","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from aspnet/AspNetCore\" (#11923)"},{"Id":"468774418","IsPullRequest":true,"CreatedAt":"2019-07-16T23:09:17","Actor":"dotnet-maestro[bot]","Number":"11921","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190716.06\r\n- **Date Produced**: 7/16/2019 10:38 PM\r\n- **Commit**: c6aac9cbaa2aafd387b8df1b78022f08c3d61aef\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview8-27916-06\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-preview8-27916-06\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-preview8-27916-06\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11921","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#11921)"},{"Id":"468814452","IsPullRequest":true,"CreatedAt":"2019-07-16T19:37:31","Actor":"dotnet-maestro[bot]","Number":"11922","RawContent":null,"Title":"[master] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190716.3\r\n- **Date Produced**: 7/16/2019 7:01 PM\r\n- **Commit**: 632823618751bfb299382740386b6b49953b1798\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview8.19366.3\r\n\r\n[marker]: <> (End:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11922","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from aspnet/AspNetCore\" (#11922)"},{"Id":"468768989","IsPullRequest":true,"CreatedAt":"2019-07-16T17:46:18","Actor":"dotnet-maestro[bot]","Number":"11920","RawContent":null,"Title":"[master] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190716.1\r\n- **Date Produced**: 7/16/2019 5:10 PM\r\n- **Commit**: 7f2a97a603b0a83a55a654f49d0290e5eae530a4\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview8.19366.1\r\n\r\n[marker]: <> (End:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11920","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from aspnet/AspNetCore\" (#11920)"},{"Id":"468751864","IsPullRequest":true,"CreatedAt":"2019-07-16T17:23:13","Actor":"dotnet-maestro[bot]","Number":"11919","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190716.04\r\n- **Date Produced**: 7/16/2019 4:28 PM\r\n- **Commit**: 828432edc47ad23dfdd045351d1939b1e4f0cb27\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview8-27916-04\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-preview8-27916-04\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-preview8-27916-04\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11919","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#11919)"},{"Id":"468746663","IsPullRequest":false,"CreatedAt":"2019-07-16T16:17:51","Actor":"wli3","Number":"11918","RawContent":null,"Title":"enable all s.t.json options for .runtimeconfig.json","State":"open","Body":"Per https://github.com/dotnet/cli/issues/11756#issuecomment-511145296\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11918","RelatedDescription":"Open issue \"enable all s.t.json options for .runtimeconfig.json\" (#11918)"}],"ResultType":"GitHubIssue"},"Standard-Issues":{"Issues":[{"Id":"470089821","IsPullRequest":true,"CreatedAt":"2019-07-19T01:18:46","Actor":"terrajobst","Number":"1356","RawContent":null,"Title":"Adds attribution for APIs previously special-cased by the compiler","State":"open","Body":"This applies some of the nullable attributes for APIs that were previously special-cased by the compiler. The attribution is very basic only includes cases where we'e a 100% certain that these are never going to change.\r\n\r\nI've arrived here by diffing CoreFX and .NET Standard using the following approach:\r\n\r\n**Included**\r\n\r\n* `DoesNotReturn`\r\n* `DoesNotReturnIf`\r\n\r\n**Considered**\r\n\r\n* `NotNullWhen`\r\n\r\n**Excluded**\r\n\r\n* `MaybeNullWhenAttribute`\r\n* `MaybeNullAttribute`\r\n* `AllowNullAttribute`\r\n* `DisallowNullAttribute`\r\n* `NotNullAttribute`\r\n* `NotNullIfNotNullAttribute`\r\n\r\n@stephentoub @jcouv @dotnet/nullablefc: Please double check my work here.","Url":"https://github.com/dotnet/standard/pull/1356","RelatedDescription":"Open PR \"Adds attribution for APIs previously special-cased by the compiler\" (#1356)"},{"Id":"469972263","IsPullRequest":true,"CreatedAt":"2019-07-18T21:52:21","Actor":"terrajobst","Number":"1355","RawContent":null,"Title":"Add attributes for expressing nullability","State":"closed","Body":"Discussed in #1349.\r\n\r\n@danmosemsft, any objections taking this? \r\n\r\n/cc @wtgodbe ","Url":"https://github.com/dotnet/standard/pull/1355","RelatedDescription":"Closed or merged PR \"Add attributes for expressing nullability\" (#1355)"},{"Id":"469751295","IsPullRequest":true,"CreatedAt":"2019-07-18T20:38:18","Actor":"dotnet-maestro[bot]","Number":"1354","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190717.11\r\n- **Date Produced**: 7/18/2019 5:04 AM\r\n- **Commit**: ba2d62a24ea8574f40c43cd27cc384f079958a0c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19367.11\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19367.11\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19367.11\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1354","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1354)"},{"Id":"468943337","IsPullRequest":true,"CreatedAt":"2019-07-18T20:15:44","Actor":"terrajobst","Number":"1349","RawContent":null,"Title":"Add attributes for expressing nullability","State":"closed","Body":"This issue was brought up as part of a conversation with @divega from the EF team. While .NET Standard 2.1 itself won't have nullable annotations (see #1118), the idea is that code building for .NET Standard 2.1 should be able to express its own nullable state. This PR adds the attribute that are needed by library authors to tweak how their APIs are treated by C#'s flow analysis.\r\n\r\nThese APIs were reviewed in https://github.com/dotnet/corefx/issues/37826.","Url":"https://github.com/dotnet/standard/pull/1349","RelatedDescription":"Closed or merged PR \"Add attributes for expressing nullability\" (#1349)"},{"Id":"469365862","IsPullRequest":false,"CreatedAt":"2019-07-18T18:12:45","Actor":"codernator","Number":"1352","RawContent":null,"Title":"Interesting BadImageFormatException involving generics, deferred functions, and closures.","State":"closed","Body":"I stumbled over an edge case in which it is possible to write code that compiles but generates a BadImageFormatException with HResult: 0x8007000B during runtime. I originally found it in a C# 7.3 dotnet core 2.2 API application, but have reproduced it with a simple example in LINQPad 5, which uses C#7 and I believe dotnet standard 2.  The below contains both the exception generating code as well as similar counter-examples.\r\n\r\n\t/// <summary>\r\n\t/// Demonstrate how a generic function passing a closure to of a deferred function\r\n\t/// can create a BadImageFormatException. This includes an example of the exception,\r\n\t/// and similar examples that do not create the exception.\r\n\t/// </summary>\r\n\tstatic void Main()\r\n\t{\r\n\t\t// The data type and value is not important to this example.\r\n\t\t// Only the context in which this variable is used is important.\r\n\t\tvar myClosure = 0;\r\n\t\t\r\n\t\tHereComesTheException(new object[0]);\r\n\t\t//NonGenericNoException(new object[0]);\r\n\t\t//GenericWorkAroundA(new object[0]);\r\n\t\t//GenericWorkAroundB(new object[0]);\r\n\t\r\n\t\t// This fucntion creates a BadImageFormatException. Note the\r\n\t\t// use of myClosure within a deferred function that is\r\n\t\t// inline to a foreach. As far as I could read the IL, there is no\r\n\t\t// reference to myClosure in the scope of this function.\r\n\t\tvoid HereComesTheException<T>(IEnumerable<T> things)\r\n\t\t{\r\n\t\t\tforeach (var thing in things.Where(tt => myClosure == 0)) {}\r\n\t\t}\r\n\t\r\n\t\t// This function doesn't create a BadImageFormatException...\r\n\t\t// The only difference from HereComesTheException is that\r\n\t\t// this function is not generic.\r\n\t\tvoid NonGenericNoException(IEnumerable<object> things)\r\n\t\t{\r\n\t\t\tforeach (var thing in things.Where(tt => myClosure == 0)) {}\r\n\t\t}\r\n\t\r\n\t\t// This function doesn't create a BadImageFormatException because the\r\n\t\t// outer closure is stored in a local variable that is clearly in scope \r\n\t\t// when the deferred function is executed.\r\n\t\tvoid GenericWorkAroundA<T>(IEnumerable<T> things)\r\n\t\t{\r\n\t\t\tvar inner = myClosure;\r\n\t\t\tforeach (var thing in things.Where(tt => inner == 0)) {}\r\n\t\t}\r\n\t\t\r\n\t\t// This function doesn't create a BadImageFormatException... \r\n\t\t// Is this because declaring the Enumerator as a local variable forces\r\n\t\t// local context to be given to myClosure?\r\n\t\tvoid GenericWorkAroundB<T>(IEnumerable<T> things)\r\n\t\t{\r\n\t\t\tvar filtered = things.Where(tt => myClosure == 0);\r\n\t\t\tforeach (var thing in filtered) {}\r\n\t\t}\r\n\t}","Url":"https://github.com/dotnet/standard/issues/1352","RelatedDescription":"Closed issue \"Interesting BadImageFormatException involving generics, deferred functions, and closures.\" (#1352)"},{"Id":"469731560","IsPullRequest":true,"CreatedAt":"2019-07-18T17:36:33","Actor":"dotnet-maestro[bot]","Number":"1353","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190717.8\r\n- **Date Produced**: 7/17/2019 10:06 PM\r\n- **Commit**: 2359dc4184133defa27c8f3072622270b71b4ecf\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19367.8\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19367.8\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19367.8\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19367.8\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19367.8\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19367.8\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1353","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1353)"},{"Id":"469174631","IsPullRequest":true,"CreatedAt":"2019-07-17T13:00:53","Actor":"dotnet-maestro[bot]","Number":"1351","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190716.11\r\n- **Date Produced**: 7/17/2019 5:26 AM\r\n- **Commit**: da3d086edde315db03ff9b04c2926ab22940d50c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19366.11\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19366.11\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19366.11\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1351","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1351)"},{"Id":"469154006","IsPullRequest":true,"CreatedAt":"2019-07-17T12:15:21","Actor":"dotnet-maestro[bot]","Number":"1350","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190716.4\r\n- **Date Produced**: 7/16/2019 7:16 PM\r\n- **Commit**: 0dd5e2025f0049c133a8706f40e4463b193e5d17\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19366.4\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19366.4\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19366.4\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19366.4\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19366.4\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19366.4\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1350","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1350)"},{"Id":"468893474","IsPullRequest":true,"CreatedAt":"2019-07-17T01:56:05","Actor":"dotnet-maestro-bot","Number":"1348","RawContent":null,"Title":"[automated] Merge branch 'master' => 'release/3.0'","State":"closed","Body":"I detected changes in the master branch which have not been merged yet to release/3.0. I'm a robot and am configured to help you automatically keep release/3.0 up to date, so I've opened this PR.\r\n\r\nThis PR merges commits made on master by the following committers:\n\n* @42748379+dotnet-maestro[bot]\n* @wtgodbe\n* @terrajobst\n* @akoeplinger\n* @ericstj\n* @208120+akeeton\n* @roji\r\n\r\n## Instructions for merging from UI\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, complete this PR by creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nIf this repo does not allow creating merge commits from the GitHub UI, use command line instructions.\r\n\r\n## Instructions for merging via command line\r\n\r\nRun these commands to merge this pull request from the command line.\r\n\r\n``` sh\r\ngit fetch\r\ngit checkout master\r\ngit pull --ff-only\r\ngit checkout release/3.0\r\ngit pull --ff-only\r\ngit merge --no-ff master\r\n\r\n# If there are merge conflicts, resolve them and then run git merge --continue to complete the merge\r\n# Pushing the changes to the PR branch will re-trigger PR validation.\r\ngit push https://github.com/dotnet-maestro-bot/standard HEAD:merge/master-to-release/3.0\r\n```\r\n\r\n<details>\r\n<summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit push git@github.com:dotnet-maestro-bot/standard HEAD:merge/master-to-release/3.0\r\n```\r\n\r\n</details>\r\n\r\n\r\nAfter PR checks are complete push the branch\r\n```\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging. You can do this [using GitHub][resolve-github] or using the [command line][resolve-cli].\r\n\r\n[resolve-github]: https://help.github.com/articles/resolving-a-merge-conflict-on-github/\r\n[resolve-cli]: https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/\r\n\r\n## Instructions for updating this pull request\r\n\r\nContributors to this repo have permission update this pull request by pushing to the branch 'merge/master-to-release/3.0'. This can be done to resolve conflicts or make other changes to this pull request before it is merged.\r\n\r\n```\r\ngit checkout -b merge/master-to-release/3.0 release/3.0\r\ngit pull https://github.com/dotnet-maestro-bot/standard merge/master-to-release/3.0\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push https://github.com/dotnet-maestro-bot/standard merge/master-to-release/3.0\r\n```\r\n\r\n<details>\r\n    <summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit checkout -b merge/master-to-release/3.0 release/3.0\r\ngit pull git@github.com:dotnet-maestro-bot/standard merge/master-to-release/3.0\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push git@github.com:dotnet-maestro-bot/standard merge/master-to-release/3.0\r\n```\r\n\r\n</details>\r\n\r\nContact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.\r\n","Url":"https://github.com/dotnet/standard/pull/1348","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'master' => 'release/3.0'\" (#1348)"},{"Id":"468352094","IsPullRequest":true,"CreatedAt":"2019-07-16T22:48:08","Actor":"wtgodbe","Number":"1344","RawContent":null,"Title":"Update branding to 2.2","State":"closed","Body":"Update File/Product versions to 5.0, and package versions to 2.2. Please don't merge before noon on 7/16\r\n\r\nCC @terrajobst ","Url":"https://github.com/dotnet/standard/pull/1344","RelatedDescription":"Closed or merged PR \"Update branding to 2.2\" (#1344)"},{"Id":"468383500","IsPullRequest":true,"CreatedAt":"2019-07-16T17:19:36","Actor":"dotnet-maestro[bot]","Number":"1346","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:29f70c24-3711-40be-9246-08d6c732a216)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190715.4\r\n- **Date Produced**: 7/15/2019 7:17 PM\r\n- **Commit**: fb27fd4d8a2b67d4333e33d4b898c65171c9f3c1\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19365.4\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19365.4\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19365.4\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19365.4\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19365.4\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19365.4\r\n\r\n[marker]: <> (End:29f70c24-3711-40be-9246-08d6c732a216)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1346","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/arcade\" (#1346)"},{"Id":"468629163","IsPullRequest":true,"CreatedAt":"2019-07-16T12:46:38","Actor":"dotnet-maestro[bot]","Number":"1347","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190715.14\r\n- **Date Produced**: 7/16/2019 8:58 AM\r\n- **Commit**: 4b348cc28f0ec996322d4d1a62cfae300f77604e\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview8.19365.14\r\n  - **System.Reflection.Emit** -> 4.6.0-preview8.19365.14\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview8.19365.14\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1347","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1347)"},{"Id":"468375012","IsPullRequest":true,"CreatedAt":"2019-07-15T23:25:46","Actor":"dotnet-maestro[bot]","Number":"1345","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190715.4\r\n- **Date Produced**: 7/15/2019 7:17 PM\r\n- **Commit**: fb27fd4d8a2b67d4333e33d4b898c65171c9f3c1\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19365.4\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19365.4\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19365.4\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19365.4\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19365.4\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19365.4\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1345","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1345)"},{"Id":"468110792","IsPullRequest":true,"CreatedAt":"2019-07-15T16:09:13","Actor":"dotnet-maestro[bot]","Number":"1343","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190714.1\r\n- **Date Produced**: 7/14/2019 3:24 PM\r\n- **Commit**: c14b80faff694bae4e085bad221e2e83410e5f33\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview8.19364.1\r\n  - **System.Reflection.Emit** -> 4.6.0-preview8.19364.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview8.19364.1\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1343","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1343)"},{"Id":"468089492","IsPullRequest":true,"CreatedAt":"2019-07-15T12:15:20","Actor":"dotnet-maestro[bot]","Number":"1342","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190714.1\r\n- **Date Produced**: 7/14/2019 1:05 PM\r\n- **Commit**: 0c81c2bbdc49749e9940bc8858ebd16026d51277\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19364.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19364.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19364.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19364.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19364.1\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19364.1\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1342","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1342)"},{"Id":"467832518","IsPullRequest":true,"CreatedAt":"2019-07-14T12:59:01","Actor":"dotnet-maestro[bot]","Number":"1341","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190713.4\r\n- **Date Produced**: 7/14/2019 1:05 AM\r\n- **Commit**: 750e954f0c82accded6ca7ac5a3b0c053de647a5\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview8.19363.4\r\n  - **System.Reflection.Emit** -> 4.6.0-preview8.19363.4\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview8.19363.4\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1341","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1341)"},{"Id":"467828224","IsPullRequest":true,"CreatedAt":"2019-07-14T12:14:03","Actor":"dotnet-maestro[bot]","Number":"1340","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190713.1\r\n- **Date Produced**: 7/13/2019 12:59 PM\r\n- **Commit**: 8c94bc75d29cd84e3592e4044100d45a341653f7\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19363.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19363.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19363.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19363.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19363.1\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19363.1\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1340","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1340)"},{"Id":"467716205","IsPullRequest":true,"CreatedAt":"2019-07-13T12:54:47","Actor":"dotnet-maestro[bot]","Number":"1339","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190712.11\r\n- **Date Produced**: 7/13/2019 6:12 AM\r\n- **Commit**: 1841042b99062de13dc80098cede9413be569238\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview8.19362.11\r\n  - **System.Reflection.Emit** -> 4.6.0-preview8.19362.11\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview8.19362.11\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1339","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1339)"},{"Id":"467712007","IsPullRequest":true,"CreatedAt":"2019-07-13T12:14:07","Actor":"dotnet-maestro[bot]","Number":"1338","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190712.5\r\n- **Date Produced**: 7/12/2019 10:49 PM\r\n- **Commit**: 15f50ca6a9d0b441c9927421657fb9dc91206cc9\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19362.5\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19362.5\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19362.5\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19362.5\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19362.5\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19362.5\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1338","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1338)"},{"Id":"467460987","IsPullRequest":false,"CreatedAt":"2019-07-12T20:31:42","Actor":"jons-aura","Number":"1337","RawContent":null,"Title":"netcoreapp2.2 referencing netstandard2.0 dependency conflict","State":"closed","Body":"I have a netcoreapp2.2 project that references a netstandard2.0 project. When I try to build the solution I get the warning below in the log and the build fails completely in Azure Devops.\r\n\r\nAll NuGet packages are up to date.\r\n\r\nI did some searching to find existing issues but they all seem to reference .Net 4.6 or .Net 4.7 and .Net Standard rather than .Net Core\r\n\r\n```\r\n2>    Dependency \"System.Runtime, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\".\r\n2>        Could not resolve this reference. Could not locate the assembly \"System.Runtime, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\". Check to make sure the assembly exists on disk. If this reference is required by your code, you may get compilation errors.\r\n2>        Required by \"System.Reflection.Metadata\".\r\n2>    There was a conflict between \"System.Runtime, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" and \"System.Runtime, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\".\r\n2>        \"System.Runtime, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" was chosen because it was primary and \"System.Runtime, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" was not.\r\n2>        References which depend on \"System.Runtime, Version=4.1.2.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" [C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\netstandard.library\\2.0.3\\build\\netstandard2.0\\ref\\System.Runtime.dll].\r\n2>            C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\netstandard.library\\2.0.3\\build\\netstandard2.0\\ref\\System.Runtime.dll\r\n2>              Project file item includes which caused reference \"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\netstandard.library\\2.0.3\\build\\netstandard2.0\\ref\\System.Runtime.dll\".\r\n2>                C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\netstandard.library\\2.0.3\\build\\netstandard2.0\\ref\\System.Runtime.dll\r\n2>        References which depend on \"System.Runtime, Version=4.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\" [].\r\n2>            C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.Metadata.dll\r\n2>              Project file item includes which caused reference \"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.netcore.app\\2.1.0\\ref\\netcoreapp2.1\\System.Reflection.Metadata.dll\".\r\n2>                System.Reflection.Metadata\r\n2>    C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\MSBuild\\Current\\Bin\\Microsoft.Common.CurrentVersion.targets(2106,5): warning MSB3277: Found conflicts between different versions of \"System.Runtime\" that could not be resolved.  These reference conflicts are listed in the build log when log verbosity is set to detailed.\r\n2>  Done executing task \"ResolveAssemblyReference\".\r\n```","Url":"https://github.com/dotnet/standard/issues/1337","RelatedDescription":"Closed issue \"netcoreapp2.2 referencing netstandard2.0 dependency conflict\" (#1337)"},{"Id":"467395066","IsPullRequest":true,"CreatedAt":"2019-07-12T12:55:56","Actor":"dotnet-maestro[bot]","Number":"1336","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190711.13\r\n- **Date Produced**: 7/12/2019 8:11 AM\r\n- **Commit**: e519628accc31bd3d5f0a3bc5f937a2ec1dd55d1\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview8.19361.13\r\n  - **System.Reflection.Emit** -> 4.6.0-preview8.19361.13\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview8.19361.13\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1336","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1336)"},{"Id":"467378098","IsPullRequest":true,"CreatedAt":"2019-07-12T12:14:08","Actor":"dotnet-maestro[bot]","Number":"1335","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190711.7\r\n- **Date Produced**: 7/12/2019 2:02 AM\r\n- **Commit**: f1b09644408f45f43f5835786b3e4bdfd2e78141\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19361.7\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19361.7\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19361.7\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19361.7\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19361.7\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19361.7\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1335","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1335)"},{"Id":"466629123","IsPullRequest":false,"CreatedAt":"2019-07-11T23:32:56","Actor":"terrajobst","Number":"1330","RawContent":null,"Title":"Clarify .NET Standard 2.1 platform support","State":"closed","Body":"The current .NET Standard 2.1 platform support [is listed](https://github.com/dotnet/standard/blob/master/docs/versions.md) as follows:\r\n\r\n\r\n|<div align=\"left\">.NET Standard</div>|             2.1 |\r\n|:-------------------------------------|------------------:|\r\n|.NET Core                             | **3.0**           |\r\n|.NET Framework                        | *N/A<sup>2</sup>* |\r\n|Mono                                  | **6.2**           |\r\n|Xamarin.iOS                           | **12.12**         |\r\n|Xamarin.Mac                           | **5.12**          |\r\n|Xamarin.Android                       | **9.3**           |\r\n|Unity                                 | *TBD*             |\r\n|Universal Windows Platform            | *TBD*             |\r\n\r\n@akoeplinger Are these the correct versions for Mono/Xamarin?\r\n\r\n@joshpeterson Do you already know the version of Unity that will support .NET Standard 2.1?\r\n\r\n/cc @dotnet/nsboard @rowanmiller ","Url":"https://github.com/dotnet/standard/issues/1330","RelatedDescription":"Closed issue \"Clarify .NET Standard 2.1 platform support\" (#1330)"},{"Id":"466944957","IsPullRequest":true,"CreatedAt":"2019-07-11T23:29:25","Actor":"akoeplinger","Number":"1333","RawContent":null,"Title":"Update Xamarin versions for NS2.1 support","State":"closed","Body":"These versions will contain the .NET Standard 2.1 updates.\r\n\r\n@marek-safar @steveisok we're still tracking Mono 2019-06 for this right?","Url":"https://github.com/dotnet/standard/pull/1333","RelatedDescription":"Closed or merged PR \"Update Xamarin versions for NS2.1 support\" (#1333)"},{"Id":"466574515","IsPullRequest":true,"CreatedAt":"2019-07-11T17:42:06","Actor":"wtgodbe","Number":"1329","RawContent":null,"Title":"Add RefEmit nullability annotations to baseline","State":"closed","Body":"CC @terrajobst @safern \r\n\r\nThese pop up when building locally, due to the added annotations in the ref: https://github.com/dotnet/corefx/commit/d688b187115d70ecd6df79a9cb9a04e46b1b00e1#diff-b17852d6d680ddb1418099b32839155c","Url":"https://github.com/dotnet/standard/pull/1329","RelatedDescription":"Closed or merged PR \"Add RefEmit nullability annotations to baseline\" (#1329)"},{"Id":"466956795","IsPullRequest":false,"CreatedAt":"2019-07-11T15:18:07","Actor":"sabmah","Number":"1334","RawContent":null,"Title":"MSBuild can't package .net 4.6.1 project w/ net core refrences. missing netstandard dll ","State":"open","Body":"I have a .net 4.6.1 class library that references these packages:\r\n\r\n- Microsoft.AspNetCore.Http.Abstractions\r\n- Microsoft.AspNetCore.Http.Features\r\n- Microsoft.AspNetCore.Mvc.Abstractions\r\n- Microsoft.AspNetCore.Routing.Abstractions\r\n\r\nI also added `<Reference Include=\"netstandard\" />` in class library .csproj file because it was complaining w/ error below. \r\n`\r\n The type 'Object' is defined in an assembly that is not referenced. You must add a reference to assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'.\r\n`\r\n\r\nThat class library is then referenced in another asp.net 4.6.1 web project. I'm able to build this project on TeamCity CI server and includes netstandard.dll in bin folder.\r\n\r\nBut when I package the web project using `msbuild /t:package /p:configuration=Test`, it doesn't include netstandard.dll in bin folder which causes app to not work in IIS after deployment. I get this error message.\r\n\r\n`\r\nException message: Could not load file or assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51' or one of its dependencies. The system cannot find the file specified.\r\n`\r\n\r\nIs there any reason that why /t:package is not including the netstandard.dll?","Url":"https://github.com/dotnet/standard/issues/1334","RelatedDescription":"Open issue \"MSBuild can't package .net 4.6.1 project w/ net core refrences. missing netstandard dll \" (#1334)"},{"Id":"466870629","IsPullRequest":true,"CreatedAt":"2019-07-11T12:55:38","Actor":"dotnet-maestro[bot]","Number":"1332","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190710.10\r\n- **Date Produced**: 7/11/2019 5:40 AM\r\n- **Commit**: e75dd151c9e5aa94cf33c7c9d14a53180df747dd\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-preview8.19360.10\r\n  - **System.Reflection.Emit** -> 4.6.0-preview8.19360.10\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-preview8.19360.10\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1332","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1332)"},{"Id":"466851318","IsPullRequest":true,"CreatedAt":"2019-07-11T12:14:41","Actor":"dotnet-maestro[bot]","Number":"1331","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190710.8\r\n- **Date Produced**: 7/10/2019 11:51 PM\r\n- **Commit**: a6ae1b637ed236354529992729af875f6c8a180a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19360.8\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19360.8\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19360.8\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19360.8\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19360.8\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19360.8\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1331","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1331)"},{"Id":"466524102","IsPullRequest":true,"CreatedAt":"2019-07-11T03:12:52","Actor":"riarenas","Number":"1327","RawContent":null,"Title":"Add feeds from Versions.props to NuGet.config","State":"closed","Body":"We need all restore sources to be located in NuGet.config since internal feeds can only be restored from there. More details including next steps [here](https://github.com/dotnet/arcade/blob/master/Documentation/RestoreSourcesUpdateStatus.md)","Url":"https://github.com/dotnet/standard/pull/1327","RelatedDescription":"Closed or merged PR \"Add feeds from Versions.props to NuGet.config\" (#1327)"},{"Id":"466572937","IsPullRequest":true,"CreatedAt":"2019-07-11T03:12:43","Actor":"wtgodbe","Number":"1328","RawContent":null,"Title":" Remove myget dotnet-core feed from restore sources in Versions.props","State":"closed","Body":"It isn't needed as we can restore everything from dotnetfeed.\r\n\r\nCC @ericstj @riarenas ","Url":"https://github.com/dotnet/standard/pull/1328","RelatedDescription":"Closed or merged PR \" Remove myget dotnet-core feed from restore sources in Versions.props\" (#1328)"}],"ResultType":"GitHubIssue"},"CoreFx-Issues":{"Issues":[{"Id":"470101733","IsPullRequest":true,"CreatedAt":"2019-07-19T02:04:37","Actor":"stephentoub","Number":"39613","RawContent":null,"Title":"Avoid \"async void\" tests","State":"open","Body":"Most of these are just because \"async void\" tests are rare and require special handling in xunit we needn't use.  But a few of these are plain wrong and were resulting in our not actually testing what we hoped to test.","Url":"https://github.com/dotnet/corefx/pull/39613","RelatedDescription":"Open PR \"Avoid \"async void\" tests\" (#39613)"},{"Id":"470076012","IsPullRequest":true,"CreatedAt":"2019-07-19T00:44:12","Actor":"buyaa-n","Number":"39612","RawContent":null,"Title":"[release/3.0] Code coverage for JsonWriterHelper JsonWriter (#39407)","State":"open","Body":" Code coverage for JsonWriterHelper JsonWriter","Url":"https://github.com/dotnet/corefx/pull/39612","RelatedDescription":"Open PR \"[release/3.0] Code coverage for JsonWriterHelper JsonWriter (#39407)\" (#39612)"},{"Id":"470063529","IsPullRequest":false,"CreatedAt":"2019-07-19T00:16:45","Actor":"wtgodbe","Number":"39611","RawContent":null,"Title":"Improve protocol for Experimental packages","State":"open","Body":"Right now, we have 2 experimental packages in CoreFx - https://github.com/dotnet/corefx/tree/master/src/System.Utf8String.Experimental and https://github.com/dotnet/corefx/tree/master/src/System.Runtime.Intrinsics.Experimental. Both block themselves from shipping stable by setting `BlockStable=true`: https://github.com/dotnet/corefx/blob/182bed51dec709b3b1b56a4f435e0727e5dea110/src/System.Runtime.Intrinsics.Experimental/Directory.Build.props#L6. We also block publishing of these packages through this exclusion: https://github.com/dotnet/corefx/blob/1841042b99062de13dc80098cede9413be569238/eng/publish.proj#L18. And we exclude them from the `Microsoft.Private.CoreFx.OOB` package: https://github.com/dotnet/corefx/blob/008d21c47c22b5757e09f6c3d346998004a0f985/pkg/Microsoft.Private.CoreFx.OOB/Microsoft.Private.CoreFx.OOB.pkgproj#L28. However, we have a couple pieces of weirdness around these 2 - first, we don't automatically exclude them from the APICatalog layout drops, which lead to `System.Runtime.Intrinsics.Experimental` showing up in our official docs (e.g. https://docs.microsoft.com/en-us/dotnet/api/system.runtime.intrinsics.x86.avx2?view=netcore-3.0); and second, we manually exclude all source files from compilation for `System.Utf8String.Experimental` - https://github.com/dotnet/corefx/blob/182bed51dec709b3b1b56a4f435e0727e5dea110/src/System.Utf8String.Experimental/src/System.Utf8String.Experimental.csproj#L9 (which is why `System.Utf8String.Experimental` doesn't show up on the docs page). We should clean up these workarounds, and figure out a way to exclude the experimental types from the docs layout.\r\n\r\nCC @ahsonkhan @safern @ViktorHofer @ericstj ","Url":"https://github.com/dotnet/corefx/issues/39611","RelatedDescription":"Open issue \"Improve protocol for Experimental packages\" (#39611)"},{"Id":"470044755","IsPullRequest":true,"CreatedAt":"2019-07-18T23:34:03","Actor":"jkotalik","Number":"39610","RawContent":null,"Title":"[release/3.0] Don't dispose StreamPipeWriter CancellationToken until after Flush","State":"open","Body":"Hit this in ASP.NET Core. If you call FlushAsync and then CompleteAsync, you'll hit an ODE in CompleteAsync. Previous tests didn't call FlushAsync and then CompleteAsync.\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/39610","RelatedDescription":"Open PR \"[release/3.0] Don't dispose StreamPipeWriter CancellationToken until after Flush\" (#39610)"},{"Id":"469955427","IsPullRequest":true,"CreatedAt":"2019-07-18T23:06:57","Actor":"joperezr","Number":"39605","RawContent":null,"Title":"Fixing BaselineVersion on System.Reflection.Emit packages and adding it where missing","State":"closed","Body":"Fixes #39542 \r\n\r\ncc: @ericstj @0xd4d @danmosemsft @wtgodbe \r\n\r\nPackage index had an incorrect baseline version for two packages (both ref emit packages) which was causing other packages that depended on those libraries to have a package dependency to a lower version. These changes will fix that and they will also explicitly add a BaselineVersion to all packages that were missing one given that they were new packages on this release.","Url":"https://github.com/dotnet/corefx/pull/39605","RelatedDescription":"Closed or merged PR \"Fixing BaselineVersion on System.Reflection.Emit packages and adding it where missing\" (#39605)"},{"Id":"470030915","IsPullRequest":true,"CreatedAt":"2019-07-18T22:57:32","Actor":"hughbe","Number":"39609","RawContent":null,"Title":"Fix CompilerResults.CompiledAssembly in .NET Core","State":"open","Body":"Because Assembly.Load ignore `CodeBase` unconditionally in .NET Core (https://github.com/dotnet/coreclr/issues/10561), the following exception would always be thrown:\r\n\r\n> System.CodeDom.Compiler.Tests.CompilerResultsTests.CompiledAssembly_GetWithPathToAssembly_ReturnsExpected [FAIL]\r\nSystem.ArgumentException : String cannot have zero length.\r\nStack Trace:\r\n        at System.Reflection.RuntimeAssembly.nLoad(AssemblyName fileName, String codeBase, RuntimeAssembly assemblyContext, StackCrawlMark& stackMark, Boolean throwOnFileNotFound, AssemblyLoadContext assemblyLoadContext)\r\n    /_/src/System.Private.CoreLib/src/System/Reflection/RuntimeAssembly.cs(345,0): at System.Reflection.RuntimeAssembly.InternalLoadAssemblyName(AssemblyName assemblyRef, StackCrawlMark& stackMark, AssemblyLoadContext assemblyLoadContext)\r\n    /_/src/System.Private.CoreLib/src/System/Reflection/Assembly.CoreCLR.cs(73,0): at System.Reflection.Assembly.Load(AssemblyName assemblyRef, StackCrawlMark& stackMark, AssemblyLoadContext assemblyLoadContext)\r\n    /_/src/System.Private.CoreLib/src/System/Reflection/Assembly.CoreCLR.cs(55,0): at System.Reflection.Assembly.Load(AssemblyName assemblyRef)\r\n    /Users/hugh/Documents/GitHub/corefx/src/System.CodeDom/src/System/CodeDom/Compiler/CompilerResults.cs(27,0): at System.CodeDom.Compiler.CompilerResults.get_CompiledAssembly()\r\n    /Users/hugh/Documents/GitHub/corefx/src/System.CodeDom/tests/System/CodeDom/Compiler/CompilerResultsTests.cs(36,0): at System.CodeDom.Compiler.Tests.CompilerResultsTests.CompiledAssembly_GetWithPathToAssembly_ReturnsExpected()\r\n\r\n\r\nThis leaves us with the following options to fix this in .NET Core\r\n- Throw PlatformNotSupportedException\r\n- Don't attempt to load anything\r\n- Read PathToAssembly as Assembly.Location, not Assembly.CodeBase\r\n\r\nI opted with the second option because it is the least breaking. The first is a bit obnoxious and the third changes the documented behaviour between .NET Framework and .NET Core: CodeBase and Location have subtly different meanings.\r\n\r\nI'm flexible, so let me know what you all think.","Url":"https://github.com/dotnet/corefx/pull/39609","RelatedDescription":"Open PR \"Fix CompilerResults.CompiledAssembly in .NET Core\" (#39609)"},{"Id":"470020011","IsPullRequest":true,"CreatedAt":"2019-07-18T22:28:13","Actor":"dotnet-maestro[bot]","Number":"39608","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/standard","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c090f591-8433-4a8c-54c8-08d6c734018a)\r\n## From https://github.com/dotnet/standard\r\n- **Build**: 20190718.4\r\n- **Date Produced**: 7/18/2019 10:13 PM\r\n- **Commit**: 9b30001005c27601c8ac77c284114cf4fef22262\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **NETStandard.Library** -> 2.1.0-prerelease.19368.4\r\n\r\n[marker]: <> (End:c090f591-8433-4a8c-54c8-08d6c734018a)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/39608","RelatedDescription":"Open PR \"[release/3.0] Update dependencies from dotnet/standard\" (#39608)"},{"Id":"470003512","IsPullRequest":true,"CreatedAt":"2019-07-18T21:41:57","Actor":"stephentoub","Number":"39607","RawContent":null,"Title":"Re-enable XML theories with English-only variants","State":"open","Body":"cc: @krwq\r\nFixes https://github.com/dotnet/corefx/issues/30017","Url":"https://github.com/dotnet/corefx/pull/39607","RelatedDescription":"Open PR \"Re-enable XML theories with English-only variants\" (#39607)"},{"Id":"469992735","IsPullRequest":true,"CreatedAt":"2019-07-18T21:15:36","Actor":"stephentoub","Number":"39606","RawContent":null,"Title":"Re-enable unicode host name test","State":"open","Body":"Site appears to be back up.\r\nFixes https://github.com/dotnet/corefx/issues/37352","Url":"https://github.com/dotnet/corefx/pull/39606","RelatedDescription":"Open PR \"Re-enable unicode host name test\" (#39606)"},{"Id":"469885232","IsPullRequest":true,"CreatedAt":"2019-07-18T20:55:21","Actor":"safern","Number":"39598","RawContent":null,"Title":"[release/3.0] Port: Make all events nullable (#39578)","State":"closed","Body":"This ports ba2d62a24ea8574f40c43cd27cc384f079958a0c which changes the public nullable annotations around events exposed from corelib, based on recent design decisions on how we want to handle events and nullability. This is the corefx piece of https://github.com/dotnet/coreclr/pull/25759\r\n\r\ncc: @danmosemsft @stephentoub @terrajobst ","Url":"https://github.com/dotnet/corefx/pull/39598","RelatedDescription":"Closed or merged PR \"[release/3.0] Port: Make all events nullable (#39578)\" (#39598)"},{"Id":"469946128","IsPullRequest":true,"CreatedAt":"2019-07-18T19:22:05","Actor":"dotnet-maestro[bot]","Number":"39604","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/coreclr","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:66928e2e-bd95-4f7e-280f-08d690bc5860)\r\n## From https://github.com/dotnet/coreclr\r\n- **Build**: 20190718.2\r\n- **Date Produced**: 7/18/2019 7:18 PM\r\n- **Commit**: 10f677611992fe2a998995f4e0cafd41f610a110\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk.IL** -> 3.0.0-preview8.19368.2\r\n  - **Microsoft.NETCore.ILAsm** -> 3.0.0-preview8.19368.2\r\n  - **Microsoft.NETCore.Runtime.CoreCLR** -> 3.0.0-preview8.19368.2\r\n\r\n[marker]: <> (End:66928e2e-bd95-4f7e-280f-08d690bc5860)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/39604","RelatedDescription":"Open PR \"[release/3.0] Update dependencies from dotnet/coreclr\" (#39604)"},{"Id":"469776426","IsPullRequest":true,"CreatedAt":"2019-07-18T18:23:47","Actor":"stephentoub","Number":"39587","RawContent":null,"Title":"Remove dead ifdef'd code from Microsoft.CSharp/VisualBasic","State":"closed","Body":"Fixes https://github.com/dotnet/corefx/issues/16041\r\ncc: @cston","Url":"https://github.com/dotnet/corefx/pull/39587","RelatedDescription":"Closed or merged PR \"Remove dead ifdef'd code from Microsoft.CSharp/VisualBasic\" (#39587)"},{"Id":"469796809","IsPullRequest":true,"CreatedAt":"2019-07-18T18:21:50","Actor":"stephentoub","Number":"39589","RawContent":null,"Title":"Move ConnectAsync_AddCustomHeaders_Success ClientWebSocket test to loopback","State":"closed","Body":"Fixes https://github.com/dotnet/corefx/issues/39271\r\ncc: @davidsh","Url":"https://github.com/dotnet/corefx/pull/39589","RelatedDescription":"Closed or merged PR \"Move ConnectAsync_AddCustomHeaders_Success ClientWebSocket test to loopback\" (#39589)"},{"Id":"469802727","IsPullRequest":true,"CreatedAt":"2019-07-18T18:21:09","Actor":"stephentoub","Number":"39590","RawContent":null,"Title":"Fix ordering of visibility and abstract/virtual/override","State":"closed","Body":"To conform to expected style across corefx.","Url":"https://github.com/dotnet/corefx/pull/39590","RelatedDescription":"Closed or merged PR \"Fix ordering of visibility and abstract/virtual/override\" (#39590)"},{"Id":"469905897","IsPullRequest":false,"CreatedAt":"2019-07-18T17:46:03","Actor":"krwq","Number":"39603","RawContent":null,"Title":"Transport packages should not be signed","State":"open","Body":"Per discussion here https://github.com/dotnet/corefx/pull/36022#discussion_r265347843\r\nwe should not sign symbol and *.Private.* packages as it adds some observable amount of time to the overall signing time (few minutes?) - we currently do it in parallel with testing so overall time might be similar.\r\n\r\nRelated code:\r\nhttps://github.com/dotnet/corefx/blob/master/eng/Signing.props#L13\r\n\r\ncc: @mmitche ","Url":"https://github.com/dotnet/corefx/issues/39603","RelatedDescription":"Open issue \"Transport packages should not be signed\" (#39603)"},{"Id":"469905338","IsPullRequest":false,"CreatedAt":"2019-07-18T17:44:38","Actor":"LokiMidgard","Number":"39602","RawContent":null,"Title":"[Uri] Uri does no accept mailto protcoll with multiple recipients","State":"open","Body":"Trying to create following Uri `new Uri(\"mailto:test1@test.de,test1@test.de\")` will result in an Exception `System.UriFormatException: 'Invalid URI: The hostname could not be parsed.'`.\r\n\r\nIf I understand RFC 6068 correctly, You should be able to splitt multiple addresses with a `,`\r\n\r\n```\r\n      mailtoURI    = \"mailto:\" [ to ] [ hfields ]\r\n      to           = addr-spec *(\",\" addr-spec )\r\n      hfields      = \"?\" hfield *( \"&\" hfield )\r\n      hfield       = hfname \"=\" hfvalue\r\n      hfname       = *qchar\r\n      hfvalue      = *qchar\r\n      addr-spec    = local-part \"@\" domain\r\n      local-part   = dot-atom-text / quoted-string\r\n      domain       = dot-atom-text / \"[\" *dtext-no-obs \"]\"\r\n      dtext-no-obs = %d33-90 / ; Printable US-ASCII\r\n                     %d94-126  ; characters not including\r\n                               ; \"[\", \"]\", or \"\\\"\r\n      qchar        = unreserved / pct-encoded / some-delims\r\n      some-delims  = \"!\" / \"$\" / \"'\" / \"(\" / \")\" / \"*\"\r\n                   / \"+\" / \",\" / \";\" / \":\" / \"@\"\r\n```","Url":"https://github.com/dotnet/corefx/issues/39602","RelatedDescription":"Open issue \"[Uri] Uri does no accept mailto protcoll with multiple recipients\" (#39602)"},{"Id":"469898091","IsPullRequest":false,"CreatedAt":"2019-07-18T17:30:13","Actor":"VladimirKhvostov","Number":"39601","RawContent":null,"Title":"CryptoConfig.CreateFromName in dotnet core is about 4.5 times slower than the same method in .NET Framework","State":"open","Body":"CryptoConfig.CreateFromName in the dotnet core is about 4.5 times slower than the same method in .NET \r\n\r\nI wrote a simple app:\r\n```using System;\r\nusing System.Diagnostics;\r\nusing System.Security.Cryptography;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\n\r\nnamespace dotnet\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            Stopwatch stopwatch = Stopwatch.StartNew();\r\n            int threadCount = int.Parse(args[0]);\r\n\r\n            int workerThreads;\r\n            int completionPortThreads;\r\n            ThreadPool.GetMinThreads(out workerThreads, out completionPortThreads);\r\n\r\n            ThreadPool.SetMinThreads(workerThreads: threadCount, completionPortThreads: completionPortThreads);\r\n\r\n            Task[] tasks = new Task[threadCount];\r\n\r\n            for (int i = 0; i < threadCount; ++i)\r\n            {\r\n                tasks[i] = Task.Factory.StartNew(() =>\r\n                {\r\n                    for (int n = 0; n < 100_000; ++n)\r\n                    {\r\n                        object o = CryptoConfig.CreateFromName(\"RSA\");\r\n                        Debug.Assert(o != null);\r\n                    }\r\n                });\r\n            }\r\n\r\n            Task.WaitAll(tasks);\r\n\r\n            Console.WriteLine($\"Elapsed time in ms: {stopwatch.Elapsed.TotalMilliseconds:0.###}. Thread count: {threadCount}\");\r\n        }\r\n    }\r\n}\r\n\r\n```\r\nMy desktop machine has i7-7820X CPU.\r\nHere are results:\r\n\r\n|Number of threads |  .NET 4.8 (time in ms) |  .NET core 3.0.0-preview8-27917-01 (time in ms)|NET core 3.0.0 + fix (time in ms) PR #39600|\r\n|--|--|--|--|\r\n|1|380|81|103|\r\n|2|460|101|120|\r\n|4|490|120|130|\r\n|8|790-980|204-243|157-196|\r\n|16|3512-3792|535-717|268-270|\r\n|32|1935-2196|8255-8694|623-633|\r\n|64|4564-4608|18066-18284|1744-1843|\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/corefx/issues/39601","RelatedDescription":"Open issue \"CryptoConfig.CreateFromName in dotnet core is about 4.5 times slower than the same method in .NET Framework\" (#39601)"},{"Id":"469897846","IsPullRequest":true,"CreatedAt":"2019-07-18T17:29:47","Actor":"VladimirKhvostov","Number":"39600","RawContent":null,"Title":"Performance improvements in the CryptoConfig class. CreateFromName is about 10x faster with this change.","State":"open","Body":"CryptoConfig.CreateFromName in the dotnet core is about 4.5 times slower than the same method in .NET \r\n\r\nI wrote a simple app:\r\n```using System;\r\nusing System.Diagnostics;\r\nusing System.Security.Cryptography;\r\nusing System.Threading;\r\nusing System.Threading.Tasks;\r\n\r\nnamespace dotnet\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            Stopwatch stopwatch = Stopwatch.StartNew();\r\n            int threadCount = int.Parse(args[0]);\r\n\r\n            int workerThreads;\r\n            int completionPortThreads;\r\n            ThreadPool.GetMinThreads(out workerThreads, out completionPortThreads);\r\n\r\n            ThreadPool.SetMinThreads(workerThreads: threadCount, completionPortThreads: completionPortThreads);\r\n\r\n            Task[] tasks = new Task[threadCount];\r\n\r\n            for (int i = 0; i < threadCount; ++i)\r\n            {\r\n                tasks[i] = Task.Factory.StartNew(() =>\r\n                {\r\n                    for (int n = 0; n < 100_000; ++n)\r\n                    {\r\n                        object o = CryptoConfig.CreateFromName(\"RSA\");\r\n                        Debug.Assert(o != null);\r\n                    }\r\n                });\r\n            }\r\n\r\n            Task.WaitAll(tasks);\r\n\r\n            Console.WriteLine($\"Elapsed time in ms: {stopwatch.Elapsed.TotalMilliseconds:0.###}. Thread count: {threadCount}\");\r\n        }\r\n    }\r\n}\r\n\r\n```\r\nMy desktop machine has i7-7820X CPU.\r\nHere are results:\r\n\r\n|Number of threads |  .NET 4.8 (time in ms) |  .NET core 3.0.0-preview8-27917-01 (time in ms)|NET core 3.0.0 + fix (time in ms)|\r\n|--|--|--|--|\r\n|1|380|81|103|\r\n|2|460|101|120|\r\n|4|490|120|130|\r\n|8|790-980|204-243|157-196|\r\n|16|3512-3792|535-717|268-270|\r\n|32|1935-2196|8255-8694|623-633|\r\n|64|4564-4608|18066-18284|1744-1843|\r\n","Url":"https://github.com/dotnet/corefx/pull/39600","RelatedDescription":"Open PR \"Performance improvements in the CryptoConfig class. CreateFromName is about 10x faster with this change.\" (#39600)"},{"Id":"469894897","IsPullRequest":true,"CreatedAt":"2019-07-18T17:23:30","Actor":"gfoidl","Number":"39599","RawContent":null,"Title":"FromBase64Transform.InputBlockSize set to 4 instead of 1","State":"open","Body":"Fixes https://github.com/dotnet/corefx/issues/39583\r\n\r\nMarked as draft, as I need to investigate https://github.com/dotnet/corefx/issues/39583#issuecomment-512854180 (maybe done next week).","Url":"https://github.com/dotnet/corefx/pull/39599","RelatedDescription":"Open PR \"FromBase64Transform.InputBlockSize set to 4 instead of 1\" (#39599)"},{"Id":"469816480","IsPullRequest":false,"CreatedAt":"2019-07-18T15:53:23","Actor":"benaadams","Number":"39593","RawContent":null,"Title":"CI not running for PRs","State":"closed","Body":"CI is currently not running for PRs and don't show up in checks:\r\n\r\n![image](https://user-images.githubusercontent.com/1142958/61467434-82a9a580-a973-11e9-8bca-e164baf793bc.png)\r\n\r\nExamples https://github.com/dotnet/corefx/pull/39560 https://github.com/dotnet/corefx/pull/39574 https://github.com/dotnet/corefx/pull/39584 https://github.com/dotnet/corefx/pull/39585 https://github.com/dotnet/corefx/pull/39587 https://github.com/dotnet/corefx/pull/39588 https://github.com/dotnet/corefx/pull/39589 https://github.com/dotnet/corefx/pull/39590 https://github.com/dotnet/corefx/pull/39591 https://github.com/dotnet/corefx/pull/39455 https://github.com/dotnet/corefx/pull/39594\r\n\r\n","Url":"https://github.com/dotnet/corefx/issues/39593","RelatedDescription":"Closed issue \"CI not running for PRs\" (#39593)"},{"Id":"469846150","IsPullRequest":true,"CreatedAt":"2019-07-18T15:44:04","Actor":"MattGal","Number":"39597","RawContent":null,"Title":"Testing PRs","State":"open","Body":"","Url":"https://github.com/dotnet/corefx/pull/39597","RelatedDescription":"Open PR \"Testing PRs\" (#39597)"},{"Id":"469810522","IsPullRequest":false,"CreatedAt":"2019-07-18T15:37:01","Actor":"chrisnas","Number":"39592","RawContent":null,"Title":"weird version of downloaded runtime when building aspnet core repo","State":"closed","Body":"I've cloned the aspnetcore repo \r\n![image](https://user-images.githubusercontent.com/10163781/61466443-357d0200-a97a-11e9-9c10-a1a4c746fbe8.png)\r\nand tried to rebuild it on Windows with build.cmd\r\n\r\nDuring the .NET Core runtime installation process, I see **preview8** versions downloaded while the preview 7 is not even available yet\r\n- SDK: 3.0.100-preview6-012264\r\n- runtime: 3.0.0-preview8-27914-06\r\n\r\n```\r\nD:\\github\\AspNetCore>.\\build.cmd\r\nWARNING: No default group of projects was specified, so building the 'managed' subsets of projects. Run `build.cmd\r\n-help` for more details.\r\ndotnet-install: Downloading link: https://dotnetcli.azureedge.net/dotnet/Sdk/3.0.100-preview6-012264/dotnet-sdk-3.0.100-preview6-012264-win-x64.zip\r\ndotnet-install: Extracting zip from https://dotnetcli.azureedge.net/dotnet/Sdk/3.0.100-preview6-012264/dotnet-sdk-3.0.100-preview6-012264-win-x64.zip\r\ndotnet-install: Adding to current process PATH: \"D:\\github\\AspNetCore\\.dotnet\\\". Note: This change will not be visible if PowerShell was run as a child process.\r\ndotnet-install: Installation finished\r\nDownloading vswhere\r\nDownloading RoslynTools.MSBuild 16.0.0-alpha\r\n  Restauration effectuÃ©e dans 11.62 sec pour C:\\Users\\cnasa\\.nuget\\packages\\microsoft.dotnet.arcade.sdk\\1.0.0-beta.19365.4\\tools\\Tools.proj.\r\ndotnet-install: Downloading link: https://dotnetcli.azureedge.net/dotnet/Runtime/3.0.0-preview8-27914-06/dotnet-runtime-3.0.0-preview8-27914-06-win-x64.zip\r\ndotnet-install: Extracting zip from https://dotnetcli.azureedge.net/dotnet/Runtime/3.0.0-preview8-27914-06/dotnet-runtime-3.0.0-preview8-27914-06-win-x64.zip\r\ndotnet-install: Installation finished\r\ndotnet-install: Downloading link: https://dotnetcli.azureedge.net/dotnet/Runtime/3.0.0-preview8-27914-06/dotnet-runtime-3.0.0-preview8-27914-06-win-x86.zip\r\ndotnet-install: Extracting zip from https://dotnetcli.azureedge.net/dotnet/Runtime/3.0.0-preview8-27914-06/dotnet-runtime-3.0.0-preview8-27914-06-win-x86.zip\r\ndotnet-install: Adding to current process PATH: \"D:\\github\\AspNetCore\\.dotnet\\x86\\\". Note: This change will not be visible if PowerShell was run as a child process.\r\ndotnet-install: Installation finished\r\n\r\n```\r\n@karelz mentioned that I should create an issue in the corefx repo with the \"wtgobde\" tag\r\nI hope this helps","Url":"https://github.com/dotnet/corefx/issues/39592","RelatedDescription":"Closed issue \"weird version of downloaded runtime when building aspnet core repo\" (#39592)"},{"Id":"469838718","IsPullRequest":true,"CreatedAt":"2019-07-18T15:36:31","Actor":"ViktorHofer","Number":"39596","RawContent":null,"Title":"Update coverlet.console to fix coverage measurement","State":"closed","Body":"The updated coverlet.console version allows major version roll-forwards which fixes locally failing coverage runs.\r\n\r\nTracking issue to remove the dev feed: https://github.com/dotnet/corefx/issues/39595","Url":"https://github.com/dotnet/corefx/pull/39596","RelatedDescription":"Closed or merged PR \"Update coverlet.console to fix coverage measurement\" (#39596)"},{"Id":"469836682","IsPullRequest":false,"CreatedAt":"2019-07-18T15:26:47","Actor":"ViktorHofer","Number":"39595","RawContent":null,"Title":"Remove coverlet.console dev feed","State":"open","Body":"Tracking issue to remove the coverlet dev feed that is introduced with https://github.com/dotnet/corefx/pull/39596 as soon as a new stable version is pushed to nuget.org.","Url":"https://github.com/dotnet/corefx/issues/39595","RelatedDescription":"Open issue \"Remove coverlet.console dev feed\" (#39595)"},{"Id":"469832118","IsPullRequest":true,"CreatedAt":"2019-07-18T15:19:03","Actor":"dotnet-maestro[bot]","Number":"39594","RawContent":null,"Title":"[master] Update dependencies from dotnet/coreclr","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:be1e858a-d56c-4174-7dc0-08d6ba16a224)\r\n## From https://github.com/dotnet/coreclr\r\n- **Build**: 20190717.3\r\n- **Date Produced**: 7/18/2019 12:42 AM\r\n- **Commit**: 00faa55fdd69e9eecd25475816a67733ab77335c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk.IL** -> 5.0.0-alpha1.19367.3\r\n  - **Microsoft.NETCore.ILAsm** -> 5.0.0-alpha1.19367.3\r\n  - **Microsoft.NETCore.Runtime.CoreCLR** -> 5.0.0-alpha1.19367.3\r\n\r\n[marker]: <> (End:be1e858a-d56c-4174-7dc0-08d6ba16a224)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/39594","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/coreclr\" (#39594)"},{"Id":"469808758","IsPullRequest":true,"CreatedAt":"2019-07-18T14:39:13","Actor":"stephentoub","Number":"39591","RawContent":null,"Title":"Remove unnecessary use of volatile in PartitionerStatic","State":"open","Body":"`SharedInt`, which is just an object wrapper around a `volatile int` was being used even though a) the objects weren't actually being shared, and b) the stored `int` was sometimes being passed by `ref` and thus losing its voliatility in some cases anyway.\r\n\r\n(It's not entirely clear why an object is being used, regardless, but from the comments it appears to be due to concerns around false sharing.  Presumably cases were found where the enumerators were all allocated up-front resulting in these ints stored as part of the enumerator objects ending up on the same cache line, so they were moved to objects allocated on discrete threads during MoveNext to minimize that possibility.)\r\n\r\nFixes https://github.com/dotnet/corefx/issues/35022\r\ncc: @tarekgh, @kouvel ","Url":"https://github.com/dotnet/corefx/pull/39591","RelatedDescription":"Open PR \"Remove unnecessary use of volatile in PartitionerStatic\" (#39591)"},{"Id":"469783619","IsPullRequest":true,"CreatedAt":"2019-07-18T13:53:59","Actor":"eiriktsarpalis","Number":"39588","RawContent":null,"Title":"Http2: Fix remote server tests occassionally timing out in CI","State":"open","Body":"Increases HttpClient timeout from the default 100 seconds to 150, in order to address functional tests occasionally timing out in CI. Fixes #39545.","Url":"https://github.com/dotnet/corefx/pull/39588","RelatedDescription":"Open PR \"Http2: Fix remote server tests occassionally timing out in CI\" (#39588)"},{"Id":"469708628","IsPullRequest":false,"CreatedAt":"2019-07-18T11:08:40","Actor":"JamesNK","Number":"39586","RawContent":null,"Title":"HTTP2: Hang when sending multiple requests from a HttpClient","State":"open","Body":"I'm not sure what the cause of this hang is, it appears to happen at HttpClient.SendAsync when the client has made at least one previous call.\r\n\r\nRepro:\r\n1. `git clone https://github.com/JamesNK/grpc-dotnet.git`\r\n2. `git checkout jamesnk/hang-multiple-calls`\r\n3. `dotnet test test\\FunctionalTests --filter Name~DuplexStream_SendToUnimplementedMethodAfterResponseReceived_Hang`\r\n\r\nLogic in the test is like:\r\n1. Client makes HTTP/2 duplex call to the server\r\n2. Server immediately returns 200 and ends request.\r\n3. Client inspects headers.\r\n4. Client completes request stream.\r\n5. Go to 1.\r\n\r\nIt consistently hangs making the second or third call.\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview8-013248\r\n Commit:    135af55c46\r\n```","Url":"https://github.com/dotnet/corefx/issues/39586","RelatedDescription":"Open issue \"HTTP2: Hang when sending multiple requests from a HttpClient\" (#39586)"},{"Id":"469694310","IsPullRequest":true,"CreatedAt":"2019-07-18T10:33:36","Actor":"hughbe","Number":"39585","RawContent":null,"Title":"Add CodeDom.CodeValidator tests and fix some bugs","State":"open","Body":"","Url":"https://github.com/dotnet/corefx/pull/39585","RelatedDescription":"Open PR \"Add CodeDom.CodeValidator tests and fix some bugs\" (#39585)"},{"Id":"469689119","IsPullRequest":true,"CreatedAt":"2019-07-18T10:21:19","Actor":"hughbe","Number":"39584","RawContent":null,"Title":"Fix NullReferenceExceptions in IndentedTextWriter without writer","State":"open","Body":"Wouldn't throw NREs in the constructor but whenever *any* method was called on `IndentedTextWriter`. Fix this to validate in the constructor","Url":"https://github.com/dotnet/corefx/pull/39584","RelatedDescription":"Open PR \"Fix NullReferenceExceptions in IndentedTextWriter without writer\" (#39584)"}],"ResultType":"GitHubIssue"},"Roslyn-Issues":{"Issues":[{"Id":"470038247","IsPullRequest":true,"CreatedAt":"2019-07-19T04:21:23","Actor":"cston","Number":"37353","RawContent":null,"Title":"Fix typo in CSharpTestBase","State":"closed","Body":"","Url":"https://github.com/dotnet/roslyn/pull/37353","RelatedDescription":"Closed or merged PR \"Fix typo in CSharpTestBase\" (#37353)"},{"Id":"470120070","IsPullRequest":false,"CreatedAt":"2019-07-19T03:29:04","Actor":"yhvicey","Number":"37362","RawContent":null,"Title":"Warning CS8653 didn't show up neither in Visual Studio nor in VSCode","State":"open","Body":"**Version Used**: \r\n.NetCore SDK 3.0.100-preview6-012264\r\nVisual Studio 16.2.0-p3\r\nVisual Studio Code 1.36.1\r\nC# Extension in Visual Studio Code: 1.21.0\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Create a project containing below code snippet:\r\n\r\n    ```cs\r\n    public T GetT<T>()\r\n    {\r\n        throw new NotImplementedException();\r\n    }\r\n\r\n    public T? GetOrDefault<T>()\r\n    {\r\n        bool condition = false;\r\n        T value = GetT<T>();\r\n        return condition ? value : default; // warning CS8653: A default expression introduces a null value when 'T' is a non-nullable reference type.\r\n    }\r\n\r\n1. Open this project in Visual Studio or VSCode \r\n\r\n**Expected Behavior**:\r\n\r\nA warning (CS8653) at the return statement;\r\n\r\n**Actual Behavior**:\r\n\r\nNo warning there, it won't break build in Visual Studio even if `TreatWarningAsError` is set to true, but it will show up while building the project using the CLI.","Url":"https://github.com/dotnet/roslyn/issues/37362","RelatedDescription":"Open issue \"Warning CS8653 didn't show up neither in Visual Studio nor in VSCode\" (#37362)"},{"Id":"470101735","IsPullRequest":false,"CreatedAt":"2019-07-19T02:04:38","Actor":"diryboy","Number":"37361","RawContent":null,"Title":"SpeculativeT completion does not support tuples.","State":"open","Body":"This is found during review of #37323\r\n\r\n**Version Used**:\r\nVS16.2 \r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Inside a C# class, type `(T `\r\n\r\n**Expected Behavior**:\r\n\r\n`(T )`\r\n\r\n**Actual Behavior**:\r\n\r\n`(ThreadStaticAttribute )`","Url":"https://github.com/dotnet/roslyn/issues/37361","RelatedDescription":"Open issue \"SpeculativeT completion does not support tuples.\" (#37361)"},{"Id":"470057001","IsPullRequest":true,"CreatedAt":"2019-07-19T01:30:27","Actor":"dotnet-bot","Number":"37355","RawContent":null,"Title":"Merge master to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/37355","RelatedDescription":"Closed or merged PR \"Merge master to master-vs-deps\" (#37355)"},{"Id":"470057182","IsPullRequest":true,"CreatedAt":"2019-07-19T01:30:16","Actor":"dotnet-bot","Number":"37356","RawContent":null,"Title":"Merge master to features/compilerNext","State":"closed","Body":"\nThis is an automatically generated pull request from master into features/compilerNext.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/compilerNext\ngit reset --hard upstream/features/compilerNext\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/compilerNext --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/37356","RelatedDescription":"Closed or merged PR \"Merge master to features/compilerNext\" (#37356)"},{"Id":"470057259","IsPullRequest":true,"CreatedAt":"2019-07-19T01:30:06","Actor":"dotnet-bot","Number":"37357","RawContent":null,"Title":"Merge master to features/ide-cleanup","State":"closed","Body":"\nThis is an automatically generated pull request from master into features/ide-cleanup.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/ide-cleanup\ngit reset --hard upstream/features/ide-cleanup\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/ide-cleanup --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/37357","RelatedDescription":"Closed or merged PR \"Merge master to features/ide-cleanup\" (#37357)"},{"Id":"470081384","IsPullRequest":true,"CreatedAt":"2019-07-19T00:56:35","Actor":"dibarbet","Number":"37360","RawContent":null,"Title":"Initialize the remote workspace on the UI thread.","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/37360","RelatedDescription":"Open PR \"Initialize the remote workspace on the UI thread.\" (#37360)"},{"Id":"470077754","IsPullRequest":true,"CreatedAt":"2019-07-19T00:48:14","Actor":"gundermanc","Number":"37359","RawContent":null,"Title":"WIP: Expose Roslyn OOP as a limited LSP server supporting code search via extended LSP","State":"open","Body":"Polish for @olegtk's PR #37190... I don't have permissions to push directly to the existing PR.\r\n\r\nThis prototype exposes RoslynCodeAnalysis service hub service as a limited LSP server supporting only extended (streaming) version of LSP's workspace symbol search. This allows Roslyn to support VS search on par with GoTo.\r\n\r\nMore context: VS Search (former Quick Launch) public extensibility is LSP only, it supports both standard workspace/symbol and extended workspace/beginSymbol and workspace/publishSymbol (not yet documented). Standard LSP's workspace/symbol doesn't support streaming of results yet (expected in next version via microsoft/vs-streamjsonrpc#139), that's why until it does we need to extend LSP with workspace/beginSymbol.\r\n\r\nThis implementation is reusing AbstractNavigateToSearchServic, just like GoTo, but unlike GoTo it uses PrimaryWorkspace as LSP doesn't support workspace synchronization.\r\n\r\nInitialization of this Roslyn LSP server is left to VS LSP client for now, it will initialize it when user starts interacting with VS Search (based on \"Capability\" metadata).","Url":"https://github.com/dotnet/roslyn/pull/37359","RelatedDescription":"Open PR \"WIP: Expose Roslyn OOP as a limited LSP server supporting code search via extended LSP\" (#37359)"},{"Id":"470033738","IsPullRequest":false,"CreatedAt":"2019-07-19T00:17:09","Actor":"vsfeedback","Number":"37349","RawContent":null,"Title":"CS8019 violation in Resources.Designer.cs","State":"closed","Body":"Visual Studio 2019 Enterprise (16.1.6)\n\nI have a `Resources.resx` file in a .NET FX 4.6 C# project. IntelliSense reports &quot;Unnecessary using directive. (CS8019)&quot; in the the auto-generated `Resources.Designer.cs`, complaining `using System;` is unnecessary.\n\nAuto generated file should not have compile/CA warnings. Please either fix the code generation tool or the compiler.\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/639401/cs8019-violation-in-resourcesdesignercs.html\nVSTS ticketId: 944547_\n_These are the original issue comments:_\n\nVisual Studio Feedback System on 7/10/2019, 00:44 AM (8 days ago): <markdown><p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n</markdown>\nDrew Noakes [MSFT] on 7/17/2019, 02:31 AM (37 hours ago): <markdown><p>Thanks for the feedback. Can you please confirm whether youâ€™re seeing the CS8019 diagnostic in the build output (when you compile) or only in the IDE when the file is opened in the editor?</p>\n</markdown>\nJames Liang [MSFT] on 7/17/2019, 08:58 PM (19 hours ago): <p>The CS8019 violations are shown in IDE Error List (with IntelliSense on) only, not yet observed in build output.</p><p>By the way, I have \"Microsoft.CodeAnalysis.FxCopAnalyzers 2.9.3\" installed for the projects, configed with customzied ruleset file, and have .editconfig file above.</p>\n\nVisual Studio Feedback System on 7/17/2019, 09:10 PM (18 hours ago): <markdown><p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n</markdown>\n_These are the original issue solutions:_\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/37349","RelatedDescription":"Closed issue \"CS8019 violation in Resources.Designer.cs\" (#37349)"},{"Id":"470063337","IsPullRequest":false,"CreatedAt":"2019-07-19T00:16:22","Actor":"justcla","Number":"37358","RawContent":null,"Title":"Assign shortcut Ctrl+/ to ToggleLineComment","State":"open","Body":"ToggleLineComment is such an important editor productivity command that it deserves a single-chord shortcut. Ideally, Ctrl+/, which is commonly used by many other editors for commenting and uncommenting code.\r\n\r\nReference issue: #36351 ","Url":"https://github.com/dotnet/roslyn/issues/37358","RelatedDescription":"Open issue \"Assign shortcut Ctrl+/ to ToggleLineComment\" (#37358)"},{"Id":"469935110","IsPullRequest":false,"CreatedAt":"2019-07-18T23:31:43","Actor":"vsfeedback","Number":"37334","RawContent":null,"Title":"Closing GoToAll closes current document even if unrelated","State":"closed","Body":"1. Search for something in GoToAll\n2. Single-click to temporarily open a document from the results list as you're not sure it's what you're looking for\n3. Navigate away from that document - use Go to Definition, text search etc.\n4. Realise that you have found what you were looking for\n5. Close the GoToAll results list\n6. The document you are now in closes, even though it's not the document that GoToAll initially temporarily opened\n\nIf the document was already open, you still leave where you were working and go back to where you were originally.\n\nThere seems to be no way to close the list without losing your palce.\n\nThis has been happening since VS2015 and I belive still happens in VS2019.\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/648008/closing-gotoall-closes-current-document-even-if-un.html\nVSTS ticketId: 947791_\n_These are the original issue comments:_\n\nVisual Studio Feedback System on 7/17/2019, 01:20 AM (34 hours ago): <markdown><p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n</markdown>\n_These are the original issue solutions:_\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/37334","RelatedDescription":"Closed issue \"Closing GoToAll closes current document even if unrelated\" (#37334)"},{"Id":"469939224","IsPullRequest":false,"CreatedAt":"2019-07-18T23:27:11","Actor":"vsfeedback","Number":"37336","RawContent":null,"Title":"Static local functions cannot reference locally defined constants.","State":"closed","Body":"If a function in which a local function is defined has locally defined constants, IDE0062 will appear suggesting to make the local function static.\n\nHowever, doing so will produce CS8421: A static local function cannot contain a reference to 'LocalConstant'.\n\nSince constants are... well, constant, it should not quite matter where -- or how many times -- they are defined as long as they are in scope. Probably the compiler would have to re-generate these local constants or hoist them from the outer function to the class that receives the local functions and just fixup the references whether they appear in the local function or the function in which they are defined.\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/637299/static-local-functions-cannot-reference-locally-de.html\nVSTS ticketId: 943805_\n_These are the original issue comments:_\n\nVisual Studio Feedback System on 7/9/2019, 03:43 AM (9 days ago): <markdown><p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n</markdown>\n_These are the original issue solutions:_\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/37336","RelatedDescription":"Closed issue \"Static local functions cannot reference locally defined constants.\" (#37336)"},{"Id":"470038359","IsPullRequest":false,"CreatedAt":"2019-07-18T23:17:33","Actor":"MatthieuMEZIL","Number":"37354","RawContent":null,"Title":"Compilation failed with exit code 57005","State":"open","Body":"**Version Used**: 1.3.2\r\nI know this is an old version of Roslyn but creating the bug anyway as it might still be an existing bug.\r\n\r\nCannot repro but got an Exception from Roslyn with return code 57005 with the following callstack:\r\nat System.Reflection.Metadata.TypeDefinition.GetInterfaceImplementations() \r\nat Microsoft.CodeAnalysis.PEModule.GetInterfaceImplementationsOrThrow(TypeDefinitionHandle typeDef) \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.Metadata.PE.PENamedTypeSymbol.MakeDeclaredInterfaces() \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.Metadata.PE.PENamedTypeSymbol.GetDeclaredInterfaces(ConsList`1 basesBeingResolved) \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.Metadata.PE.PENamedTypeSymbol.MakeAcyclicInterfaces() \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.Metadata.PE.PENamedTypeSymbol.InterfacesNoUseSiteDiagnostics(ConsList`1 basesBeingResolved) \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol.GetInterfaceInfo() \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol.get_InterfacesAndTheirBaseInterfacesNoUseSiteDiagnostics() \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.SourceNamedTypeSymbol.CheckInterfaces(DiagnosticBag diagnostics) \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberContainerTypeSymbol.ForceComplete(SourceLocation locationOpt, CancellationToken cancellationToken) \r\nat Microsoft.CodeAnalysis.CSharp.Symbol.ForceCompleteMemberByLocation(SourceLocation locationOpt, Symbol member, CancellationToken cancellationToken) \r\nat Roslyn.Utilities.UICultureUtilities.<>c__DisplayClass6_0`1.<WithCurrentUICulture>b__0(T param) \r\nat System.Threading.Tasks.Parallel.<>c__DisplayClass17_0`1.<ForWorker>b__1() \r\nat System.Threading.Tasks.Task.InnerInvokeWithArg(Task childTask) \r\nat System.Threading.Tasks.Task.<>c__DisplayClass176_0.<ExecuteSelfReplicating>b__0(Object ) \r\nat System.Threading.Tasks.Task.Execute() \r\nat System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx) \r\nat System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot) \r\nat System.Threading.Tasks.Task.ExecuteEntry(Boolean bPreventDoubleExecution) \r\nat System.Threading.ThreadPoolWorkQueue.Dispatch() \r\nat System.Reflection.Metadata.TypeDefinition.GetInterfaceImplementations() \r\nat Microsoft.CodeAnalysis.PEModule.GetInterfaceImplementationsOrThrow(TypeDefinitionHandle typeDef) \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.Metadata.PE.PENamedTypeSymbol.MakeDeclaredInterfaces() \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.Metadata.PE.PENamedTypeSymbol.GetDeclaredInterfaces(ConsList`1 basesBeingResolved) \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.Metadata.PE.PENamedTypeSymbol.MakeAcyclicInterfaces() \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.Metadata.PE.PENamedTypeSymbol.InterfacesNoUseSiteDiagnostics(ConsList`1 basesBeingResolved) \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol.GetInterfaceInfo() \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol.get_InterfacesAndTheirBaseInterfacesNoUseSiteDiagnostics() \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.SourceNamedTypeSymbol.CheckInterfaces(DiagnosticBag diagnostics) \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberContainerTypeSymbol.ForceComplete(SourceLocation locationOpt, CancellationToken cancellationToken) \r\nat Microsoft.CodeAnalysis.CSharp.Symbol.ForceCompleteMemberByLocation(SourceLocation locationOpt, Symbol member, CancellationToken cancellationToken) \r\nat Roslyn.Utilities.UICultureUtilities.<>c__DisplayClass6_0`1.<WithCurrentUICulture>b__0(T param) \r\nat System.Threading.Tasks.Parallel.<>c__DisplayClass17_0`1.<ForWorker>b__1() \r\nat System.Threading.Tasks.Task.InnerInvokeWithArg(Task childTask) \r\nat System.Threading.Tasks.Task.<>c__DisplayClass176_0.<ExecuteSelfReplicating>b__0(Object ) \r\nat System.Threading.Tasks.Task.Execute() \r\nat System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx) \r\nat System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot) \r\nat System.Threading.Tasks.Task.ExecuteEntry(Boolean bPreventDoubleExecution) \r\nat System.Threading.ThreadPoolWorkQueue.Dispatch() \r\nat System.Reflection.Metadata.TypeDefinition.GetInterfaceImplementations() \r\nat Microsoft.CodeAnalysis.PEModule.GetInterfaceImplementationsOrThrow(TypeDefinitionHandle typeDef) \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.Metadata.PE.PENamedTypeSymbol.MakeDeclaredInterfaces() \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.Metadata.PE.PENamedTypeSymbol.GetDeclaredInterfaces(ConsList`1 basesBeingResolved) \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.Metadata.PE.PENamedTypeSymbol.MakeAcyclicInterfaces() \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.Metadata.PE.PENamedTypeSymbol.InterfacesNoUseSiteDiagnostics(ConsList`1 basesBeingResolved) \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol.GetInterfaceInfo() \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol.get_InterfacesAndTheirBaseInterfacesNoUseSiteDiagnostics() \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.SourceNamedTypeSymbol.CheckInterfaces(DiagnosticBag diagnostics) \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberContainerTypeSymbol.ForceComplete(SourceLocation locationOpt, CancellationToken cancellationToken) \r\nat Microsoft.CodeAnalysis.CSharp.Symbol.ForceCompleteMemberByLocation(SourceLocation locationOpt, Symbol member, CancellationToken cancellationToken) \r\nat Roslyn.Utilities.UICultureUtilities.<>c__DisplayClass6_0`1.<WithCurrentUICulture>b__0(T param) \r\nat System.Threading.Tasks.Parallel.<>c__DisplayClass17_0`1.<ForWorker>b__1() \r\nat System.Threading.Tasks.Task.InnerInvokeWithArg(Task childTask) \r\nat System.Threading.Tasks.Task.<>c__DisplayClass176_0.<ExecuteSelfReplicating>b__0(Object ) \r\nat System.Threading.Tasks.Task.Execute() \r\nat System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx) \r\nat System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot) \r\nat System.Threading.Tasks.Task.ExecuteEntry(Boolean bPreventDoubleExecution) \r\nat System.Threading.ThreadPoolWorkQueue.Dispatch() \r\nat System.Reflection.Metadata.TypeDefinition.GetInterfaceImplementations() \r\nat Microsoft.CodeAnalysis.PEModule.GetInterfaceImplementationsOrThrow(TypeDefinitionHandle typeDef) \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.Metadata.PE.PENamedTypeSymbol.MakeDeclaredInterfaces() \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.Metadata.PE.PENamedTypeSymbol.GetDeclaredInterfaces(ConsList`1 basesBeingResolved) \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.Metadata.PE.PENamedTypeSymbol.MakeAcyclicInterfaces() \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.Metadata.PE.PENamedTypeSymbol.InterfacesNoUseSiteDiagnostics(ConsList`1 basesBeingResolved) \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol.GetInterfaceInfo() \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol.get_InterfacesAndTheirBaseInterfacesNoUseSiteDiagnostics() \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.SourceNamedTypeSymbol.CheckInterfaces(DiagnosticBag diagnostics) \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberContainerTypeSymbol.ForceComplete(SourceLocation locationOpt, CancellationToken cancellationToken) \r\nat Microsoft.CodeAnalysis.CSharp.Symbol.ForceCompleteMemberByLocation(SourceLocation locationOpt, Symbol member, CancellationToken cancellationToken) \r\nat Roslyn.Utilities.UICultureUtilities.<>c__DisplayClass6_0`1.<WithCurrentUICulture>b__0(T param) \r\nat System.Threading.Tasks.Parallel.<>c__DisplayClass17_0`1.<ForWorker>b__1() \r\nat System.Threading.Tasks.Task.InnerInvokeWithArg(Task childTask) \r\nat System.Threading.Tasks.Task.<>c__DisplayClass176_0.<ExecuteSelfReplicating>b__0(Object ) \r\nat System.Threading.Tasks.Task.Execute() \r\nat System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx) \r\nat System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot) \r\nat System.Threading.Tasks.Task.ExecuteEntry(Boolean bPreventDoubleExecution) \r\nat System.Threading.ThreadPoolWorkQueue.Dispatch() \r\nat Microsoft.CodeAnalysis.PEModule.GetInterfaceImplementationsOrThrow(TypeDefinitionHandle typeDef) \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.Metadata.PE.PENamedTypeSymbol.MakeDeclaredInterfaces() \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.Metadata.PE.PENamedTypeSymbol.GetDeclaredInterfaces(ConsList`1 basesBeingResolved) \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.Metadata.PE.PENamedTypeSymbol.MakeAcyclicInterfaces() \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.Metadata.PE.PENamedTypeSymbol.InterfacesNoUseSiteDiagnostics(ConsList`1 basesBeingResolved) \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol.GetInterfaceInfo() \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol.get_InterfacesAndTheirBaseInterfacesNoUseSiteDiagnostics() \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.SourceNamedTypeSymbol.CheckInterfaces(DiagnosticBag diagnostics) \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberContainerTypeSymbol.ForceComplete(SourceLocation locationOpt, CancellationToken cancellationToken) \r\nat Microsoft.CodeAnalysis.CSharp.Symbol.ForceCompleteMemberByLocation(SourceLocation locationOpt, Symbol member, CancellationToken cancellationToken) \r\nat Roslyn.Utilities.UICultureUtilities.<>c__DisplayClass6_0`1.<WithCurrentUICulture>b__0(T param) \r\nat System.Threading.Tasks.Parallel.<>c__DisplayClass17_0`1.<ForWorker>b__1() \r\nat System.Threading.Tasks.Task.InnerInvokeWithArg(Task childTask) \r\nat System.Threading.Tasks.Task.<>c__DisplayClass176_0.<ExecuteSelfReplicating>b__0(Object ) \r\nat System.Threading.Tasks.Task.Execute() \r\nat System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx) \r\nat System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot) \r\nat System.Threading.Tasks.Task.ExecuteEntry(Boolean bPreventDoubleExecution) \r\nat System.Threading.ThreadPoolWorkQueue.Dispatch() \r\nat System.Reflection.Metadata.TypeDefinition.GetInterfaceImplementations() \r\nat Microsoft.CodeAnalysis.PEModule.GetInterfaceImplementationsOrThrow(TypeDefinitionHandle typeDef) \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.Metadata.PE.PENamedTypeSymbol.MakeDeclaredInterfaces() \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.Metadata.PE.PENamedTypeSymbol.GetDeclaredInterfaces(ConsList`1 basesBeingResolved) \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.Metadata.PE.PENamedTypeSymbol.MakeAcyclicInterfaces() \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.Metadata.PE.PENamedTypeSymbol.InterfacesNoUseSiteDiagnostics(ConsList`1 basesBeingResolved) \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol.GetInterfaceInfo() \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol.get_InterfacesAndTheirBaseInterfacesNoUseSiteDiagnostics() \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.SourceNamedTypeSymbol.CheckInterfaces(DiagnosticBag diagnostics) \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberContainerTypeSymbol.ForceComplete(SourceLocation locationOpt, CancellationToken cancellationToken) \r\nat Microsoft.CodeAnalysis.CSharp.Symbol.ForceCompleteMemberByLocation(SourceLocation locationOpt, Symbol member, CancellationToken cancellationToken) \r\nat Roslyn.Utilities.UICultureUtilities.<>c__DisplayClass6_0`1.<WithCurrentUICulture>b__0(T param) \r\nat System.Threading.Tasks.Parallel.<>c__DisplayClass17_0`1.<ForWorker>b__1() \r\nat System.Threading.Tasks.Task.InnerInvokeWithArg(Task childTask) \r\nat System.Threading.Tasks.Task.<>c__DisplayClass176_0.<ExecuteSelfReplicating>b__0(Object ) \r\nat System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx) \r\nat System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot) \r\nat System.Threading.Tasks.Task.ExecuteEntry(Boolean bPreventDoubleExecution) \r\nat System.Threading.Tasks.ThreadPoolTaskScheduler.TryExecuteTaskInline(Task task, Boolean taskWasPreviouslyQueued) \r\nat System.Threading.Tasks.TaskScheduler.TryRunInline(Task task, Boolean taskWasPreviouslyQueued) \r\nat System.Threading.Tasks.Task.InternalRunSynchronously(TaskScheduler scheduler, Boolean waitForCompletion) \r\nat System.Threading.Tasks.Parallel.ForWorker[TLocal](Int32 fromInclusive, Int32 toExclusive, ParallelOptions parallelOptions, Action`1 body, Action`2 bodyWithState, Func`4 bodyWithLocal, Func`1 localInit, Action`1 localFinally) \r\nat System.Threading.Tasks.Parallel.For(Int32 fromInclusive, Int32 toExclusive, ParallelOptions parallelOptions, Action`1 body) \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.SourceNamespaceSymbol.ForceComplete(SourceLocation locationOpt, CancellationToken cancellationToken) \r\nat Microsoft.CodeAnalysis.CSharp.Symbol.ForceCompleteMemberByLocation(SourceLocation locationOpt, Symbol member, CancellationToken cancellationToken) \r\nat Roslyn.Utilities.UICultureUtilities.<>c__DisplayClass6_0`1.<WithCurrentUICulture>b__0(T param) \r\nat System.Threading.Tasks.Parallel.<>c__DisplayClass17_0`1.<ForWorker>b__1() \r\nat System.Threading.Tasks.Task.InnerInvokeWithArg(Task childTask) \r\nat System.Threading.Tasks.Task.<>c__DisplayClass176_0.<ExecuteSelfReplicating>b__0(Object ) \r\nat System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx) \r\nat System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot) \r\nat System.Threading.Tasks.Task.ExecuteEntry(Boolean bPreventDoubleExecution) \r\nat System.Threading.Tasks.ThreadPoolTaskScheduler.TryExecuteTaskInline(Task task, Boolean taskWasPreviouslyQueued) \r\nat System.Threading.Tasks.TaskScheduler.TryRunInline(Task task, Boolean taskWasPreviouslyQueued) \r\nat System.Threading.Tasks.Task.InternalRunSynchronously(TaskScheduler scheduler, Boolean waitForCompletion) \r\nat System.Threading.Tasks.Parallel.ForWorker[TLocal](Int32 fromInclusive, Int32 toExclusive, ParallelOptions parallelOptions, Action`1 body, Action`2 bodyWithState, Func`4 bodyWithLocal, Func`1 localInit, Action`1 localFinally) \r\nat System.Threading.Tasks.Parallel.For(Int32 fromInclusive, Int32 toExclusive, ParallelOptions parallelOptions, Action`1 body) \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.SourceNamespaceSymbol.ForceComplete(SourceLocation locationOpt, CancellationToken cancellationToken) \r\nat Microsoft.CodeAnalysis.CSharp.Symbol.ForceCompleteMemberByLocation(SourceLocation locationOpt, Symbol member, CancellationToken cancellationToken) \r\nat Roslyn.Utilities.UICultureUtilities.<>c__DisplayClass6_0`1.<WithCurrentUICulture>b__0(T param) \r\nat System.Threading.Tasks.Parallel.<>c__DisplayClass17_0`1.<ForWorker>b__1() \r\nat System.Threading.Tasks.Task.InnerInvokeWithArg(Task childTask) \r\nat System.Threading.Tasks.Task.<>c__DisplayClass176_0.<ExecuteSelfReplicating>b__0(Object ) \r\nat System.Threading.Tasks.Task.Execute() \r\nat System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx) \r\nat System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot) \r\nat System.Threading.Tasks.Task.ExecuteEntry(Boolean bPreventDoubleExecution) \r\nat System.Threading.ThreadPoolWorkQueue.Dispatch() \r\nat System.Reflection.Metadata.TypeDefinition.GetInterfaceImplementations() \r\nat Microsoft.CodeAnalysis.PEModule.GetInterfaceImplementationsOrThrow(TypeDefinitionHandle typeDef) \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.Metadata.PE.PENamedTypeSymbol.MakeDeclaredInterfaces() \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.Metadata.PE.PENamedTypeSymbol.GetDeclaredInterfaces(ConsList`1 basesBeingResolved) \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.Metadata.PE.PENamedTypeSymbol.MakeAcyclicInterfaces() \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.Metadata.PE.PENamedTypeSymbol.InterfacesNoUseSiteDiagnostics(ConsList`1 basesBeingResolved) \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol.GetInterfaceInfo() \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol.get_InterfacesAndTheirBaseInterfacesNoUseSiteDiagnostics() \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.SourceNamedTypeSymbol.CheckInterfaces(DiagnosticBag diagnostics) \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberContainerTypeSymbol.ForceComplete(SourceLocation locationOpt, CancellationToken cancellationToken) \r\nat Microsoft.CodeAnalysis.CSharp.Symbol.ForceCompleteMemberByLocation(SourceLocation locationOpt, Symbol member, CancellationToken cancellationToken) \r\nat Roslyn.Utilities.UICultureUtilities.<>c__DisplayClass6_0`1.<WithCurrentUICulture>b__0(T param) \r\nat System.Threading.Tasks.Parallel.<>c__DisplayClass17_0`1.<ForWorker>b__1() \r\nat System.Threading.Tasks.Task.InnerInvokeWithArg(Task childTask) \r\nat System.Threading.Tasks.Task.<>c__DisplayClass176_0.<ExecuteSelfReplicating>b__0(Object ) \r\nat System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx) \r\nat System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot) \r\nat System.Threading.Tasks.Task.ExecuteEntry(Boolean bPreventDoubleExecution) \r\nat System.Threading.Tasks.ThreadPoolTaskScheduler.TryExecuteTaskInline(Task task, Boolean taskWasPreviouslyQueued) \r\nat System.Threading.Tasks.TaskScheduler.TryRunInline(Task task, Boolean taskWasPreviouslyQueued) \r\nat System.Threading.Tasks.Task.InternalRunSynchronously(TaskScheduler scheduler, Boolean waitForCompletion) \r\nat System.Threading.Tasks.Parallel.ForWorker[TLocal](Int32 fromInclusive, Int32 toExclusive, ParallelOptions parallelOptions, Action`1 body, Action`2 bodyWithState, Func`4 bodyWithLocal, Func`1 localInit, Action`1 localFinally) \r\nat System.Threading.Tasks.Parallel.For(Int32 fromInclusive, Int32 toExclusive, ParallelOptions parallelOptions, Action`1 body) \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.SourceNamespaceSymbol.ForceComplete(SourceLocation locationOpt, CancellationToken cancellationToken) \r\nat Microsoft.CodeAnalysis.CSharp.Symbol.ForceCompleteMemberByLocation(SourceLocation locationOpt, Symbol member, CancellationToken cancellationToken) \r\nat Roslyn.Utilities.UICultureUtilities.<>c__DisplayClass6_0`1.<WithCurrentUICulture>b__0(T param) \r\nat System.Threading.Tasks.Parallel.<>c__DisplayClass17_0`1.<ForWorker>b__1() \r\nat System.Threading.Tasks.Task.InnerInvokeWithArg(Task childTask) \r\nat System.Threading.Tasks.Task.<>c__DisplayClass176_0.<ExecuteSelfReplicating>b__0(Object ) \r\nat System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx) \r\nat System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot) \r\nat System.Threading.Tasks.Task.ExecuteEntry(Boolean bPreventDoubleExecution) \r\nat System.Threading.Tasks.ThreadPoolTaskScheduler.TryExecuteTaskInline(Task task, Boolean taskWasPreviouslyQueued) \r\nat System.Threading.Tasks.TaskScheduler.TryRunInline(Task task, Boolean taskWasPreviouslyQueued) \r\nat System.Threading.Tasks.Task.InternalRunSynchronously(TaskScheduler scheduler, Boolean waitForCompletion) \r\nat System.Threading.Tasks.Parallel.ForWorker[TLocal](Int32 fromInclusive, Int32 toExclusive, ParallelOptions parallelOptions, Action`1 body, Action`2 bodyWithState, Func`4 bodyWithLocal, Func`1 localInit, Action`1 localFinally) \r\nat System.Threading.Tasks.Parallel.For(Int32 fromInclusive, Int32 toExclusive, ParallelOptions parallelOptions, Action`1 body) \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.SourceNamespaceSymbol.ForceComplete(SourceLocation locationOpt, CancellationToken cancellationToken) \r\nat Microsoft.CodeAnalysis.CSharp.Symbol.ForceCompleteMemberByLocation(SourceLocation locationOpt, Symbol member, CancellationToken cancellationToken) \r\nat Roslyn.Utilities.UICultureUtilities.<>c__DisplayClass6_0`1.<WithCurrentUICulture>b__0(T param) \r\nat System.Threading.Tasks.Parallel.<>c__DisplayClass17_0`1.<ForWorker>b__1() \r\nat System.Threading.Tasks.Task.InnerInvokeWithArg(Task childTask) \r\nat System.Threading.Tasks.Task.<>c__DisplayClass176_0.<ExecuteSelfReplicating>b__0(Object ) \r\nat System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx) \r\nat System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot) \r\nat System.Threading.Tasks.Task.ExecuteEntry(Boolean bPreventDoubleExecution) \r\nat System.Threading.Tasks.ThreadPoolTaskScheduler.TryExecuteTaskInline(Task task, Boolean taskWasPreviouslyQueued) \r\nat System.Threading.Tasks.TaskScheduler.TryRunInline(Task task, Boolean taskWasPreviouslyQueued) \r\nat System.Threading.Tasks.Task.InternalRunSynchronously(TaskScheduler scheduler, Boolean waitForCompletion) \r\nat System.Threading.Tasks.Parallel.ForWorker[TLocal](Int32 fromInclusive, Int32 toExclusive, ParallelOptions parallelOptions, Action`1 body, Action`2 bodyWithState, Func`4 bodyWithLocal, Func`1 localInit, Action`1 localFinally) \r\nat System.Threading.Tasks.Parallel.For(Int32 fromInclusive, Int32 toExclusive, ParallelOptions parallelOptions, Action`1 body) \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.SourceNamespaceSymbol.ForceComplete(SourceLocation locationOpt, CancellationToken cancellationToken) \r\nat Microsoft.CodeAnalysis.CSharp.Symbol.ForceCompleteMemberByLocation(SourceLocation locationOpt, Symbol member, CancellationToken cancellationToken) \r\nat Roslyn.Utilities.UICultureUtilities.<>c__DisplayClass6_0`1.<WithCurrentUICulture>b__0(T param) \r\nat System.Threading.Tasks.Parallel.<>c__DisplayClass17_0`1.<ForWorker>b__1() \r\nat System.Threading.Tasks.Task.InnerInvokeWithArg(Task childTask) \r\nat System.Threading.Tasks.Task.<>c__DisplayClass176_0.<ExecuteSelfReplicating>b__0(Object ) \r\nat System.Threading.Tasks.Task.Execute() \r\nat System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx) \r\nat System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot) \r\nat System.Threading.Tasks.Task.ExecuteEntry(Boolean bPreventDoubleExecution) \r\nat System.Threading.ThreadPoolWorkQueue.Dispatch() \r\nat System.Reflection.Metadata.TypeDefinition.GetInterfaceImplementations() \r\nat Microsoft.CodeAnalysis.PEModule.GetInterfaceImplementationsOrThrow(TypeDefinitionHandle typeDef) \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.Metadata.PE.PENamedTypeSymbol.MakeDeclaredInterfaces() \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.Metadata.PE.PENamedTypeSymbol.GetDeclaredInterfaces(ConsList`1 basesBeingResolved) \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.Metadata.PE.PENamedTypeSymbol.MakeAcyclicInterfaces() \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.Metadata.PE.PENamedTypeSymbol.InterfacesNoUseSiteDiagnostics(ConsList`1 basesBeingResolved) \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol.GetInterfaceInfo() \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol.get_InterfacesAndTheirBaseInterfacesNoUseSiteDiagnostics() \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.SourceNamedTypeSymbol.CheckInterfaces(DiagnosticBag diagnostics) \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberContainerTypeSymbol.ForceComplete(SourceLocation locationOpt, CancellationToken cancellationToken) \r\nat Microsoft.CodeAnalysis.CSharp.Symbol.ForceCompleteMemberByLocation(SourceLocation locationOpt, Symbol member, CancellationToken cancellationToken) \r\nat Roslyn.Utilities.UICultureUtilities.<>c__DisplayClass6_0`1.<WithCurrentUICulture>b__0(T param) \r\nat System.Threading.Tasks.Parallel.<>c__DisplayClass17_0`1.<ForWorker>b__1() \r\nat System.Threading.Tasks.Task.InnerInvokeWithArg(Task childTask) \r\nat System.Threading.Tasks.Task.<>c__DisplayClass176_0.<ExecuteSelfReplicating>b__0(Object ) \r\nat System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx) \r\nat System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot) \r\nat System.Threading.Tasks.Task.ExecuteEntry(Boolean bPreventDoubleExecution) \r\nat System.Threading.Tasks.ThreadPoolTaskScheduler.TryExecuteTaskInline(Task task, Boolean taskWasPreviouslyQueued) \r\nat System.Threading.Tasks.TaskScheduler.TryRunInline(Task task, Boolean taskWasPreviouslyQueued) \r\nat System.Threading.Tasks.Task.InternalRunSynchronously(TaskScheduler scheduler, Boolean waitForCompletion) \r\nat System.Threading.Tasks.Parallel.ForWorker[TLocal](Int32 fromInclusive, Int32 toExclusive, ParallelOptions parallelOptions, Action`1 body, Action`2 bodyWithState, Func`4 bodyWithLocal, Func`1 localInit, Action`1 localFinally) \r\nat System.Threading.Tasks.Parallel.For(Int32 fromInclusive, Int32 toExclusive, ParallelOptions parallelOptions, Action`1 body) \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.SourceNamespaceSymbol.ForceComplete(SourceLocation locationOpt, CancellationToken cancellationToken) \r\nat Microsoft.CodeAnalysis.CSharp.Symbol.ForceCompleteMemberByLocation(SourceLocation locationOpt, Symbol member, CancellationToken cancellationToken) \r\nat Roslyn.Utilities.UICultureUtilities.<>c__DisplayClass6_0`1.<WithCurrentUICulture>b__0(T param) \r\nat System.Threading.Tasks.Parallel.<>c__DisplayClass17_0`1.<ForWorker>b__1() \r\nat System.Threading.Tasks.Task.InnerInvokeWithArg(Task childTask) \r\nat System.Threading.Tasks.Task.<>c__DisplayClass176_0.<ExecuteSelfReplicating>b__0(Object ) \r\nat System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx) \r\nat System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot) \r\nat System.Threading.Tasks.Task.ExecuteEntry(Boolean bPreventDoubleExecution) \r\nat System.Threading.Tasks.ThreadPoolTaskScheduler.TryExecuteTaskInline(Task task, Boolean taskWasPreviouslyQueued) \r\nat System.Threading.Tasks.TaskScheduler.TryRunInline(Task task, Boolean taskWasPreviouslyQueued) \r\nat System.Threading.Tasks.Task.InternalRunSynchronously(TaskScheduler scheduler, Boolean waitForCompletion) \r\nat System.Threading.Tasks.Parallel.ForWorker[TLocal](Int32 fromInclusive, Int32 toExclusive, ParallelOptions parallelOptions, Action`1 body, Action`2 bodyWithState, Func`4 bodyWithLocal, Func`1 localInit, Action`1 localFinally) \r\nat System.Threading.Tasks.Parallel.For(Int32 fromInclusive, Int32 toExclusive, ParallelOptions parallelOptions, Action`1 body) \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.SourceNamespaceSymbol.ForceComplete(SourceLocation locationOpt, CancellationToken cancellationToken) \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.SourceModuleSymbol.ForceComplete(SourceLocation locationOpt, CancellationToken cancellationToken) \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.SourceAssemblySymbol.ForceComplete(SourceLocation locationOpt, CancellationToken cancellationToken) \r\nat Microsoft.CodeAnalysis.CSharp.CSharpCompilation.GetSourceDeclarationDiagnostics(SyntaxTree syntaxTree, Nullable`1 filterSpanWithinTree, Func`4 locationFilterOpt, CancellationToken cancellationToken) \r\nat Microsoft.CodeAnalysis.CSharp.CSharpCompilation.GetDiagnosticsForSyntaxTree(CompilationStage stage, SyntaxTree syntaxTree, Nullable`1 filterSpanWithinTree, Boolean includeEarlierStages, CancellationToken cancellationToken) \r\nat Microsoft.CodeAnalysis.CSharp.SyntaxTreeSemanticModel.GetDiagnostics(Nullable`1 span, CancellationToken cancellationToken) \r\nat Microsoft.Analytics.Roslyn.CS6.RoslynSemanticModel.GetDiagnostics() \r\nat ScopeCompiler.FrontEnd.ScopeRoslynBinder.CheckScriptEnvironment(IRoslynCompilation compilation) \r\nat ScopeCompiler.FrontEnd.ScopeRoslynBinder.BuildScriptEnvironment() \r\nat System.Threading.Tasks.Task`1.InnerInvoke() \r\nat System.Threading.Tasks.Task.Execute() \r\nat System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx) \r\nat System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot) \r\nat System.Threading.Tasks.Task.ExecuteEntry(Boolean bPreventDoubleExecution) \r\nat System.Threading.ThreadPoolWorkQueue.Dispatch() \r\nat System.Reflection.Metadata.TypeDefinition.GetInterfaceImplementations() \r\nat Microsoft.CodeAnalysis.PEModule.GetInterfaceImplementationsOrThrow(TypeDefinitionHandle typeDef) \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.Metadata.PE.PENamedTypeSymbol.MakeDeclaredInterfaces() \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.Metadata.PE.PENamedTypeSymbol.GetDeclaredInterfaces(ConsList`1 basesBeingResolved) \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.Metadata.PE.PENamedTypeSymbol.MakeAcyclicInterfaces() \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.Metadata.PE.PENamedTypeSymbol.InterfacesNoUseSiteDiagnostics(ConsList`1 basesBeingResolved) \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol.GetInterfaceInfo() \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.TypeSymbol.get_InterfacesAndTheirBaseInterfacesNoUseSiteDiagnostics() \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.SourceNamedTypeSymbol.CheckInterfaces(DiagnosticBag diagnostics) \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberContainerTypeSymbol.ForceComplete(SourceLocation locationOpt, CancellationToken cancellationToken) \r\nat Microsoft.CodeAnalysis.CSharp.Symbol.ForceCompleteMemberByLocation(SourceLocation locationOpt, Symbol member, CancellationToken cancellationToken) \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberContainerTypeSymbol.ForceComplete(SourceLocation locationOpt, CancellationToken cancellationToken) \r\nat Microsoft.CodeAnalysis.CSharp.Symbol.ForceCompleteMemberByLocation(SourceLocation locationOpt, Symbol member, CancellationToken cancellationToken) \r\nat Roslyn.Utilities.UICultureUtilities.<>c__DisplayClass6_0`1.<WithCurrentUICulture>b__0(T param) \r\nat System.Threading.Tasks.Parallel.<>c__DisplayClass17_0`1.<ForWorker>b__1() \r\nat System.Threading.Tasks.Task.InnerInvokeWithArg(Task childTask) \r\nat System.Threading.Tasks.Task.<>c__DisplayClass176_0.<ExecuteSelfReplicating>b__0(Object ) \r\nat System.Threading.Tasks.Task.Execute() \r\nat System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx) \r\nat System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot) \r\nat System.Threading.Tasks.Task.ExecuteEntry(Boolean bPreventDoubleExecution) \r\nat System.Threading.ThreadPoolWorkQueue.Dispatch() ","Url":"https://github.com/dotnet/roslyn/issues/37354","RelatedDescription":"Open issue \"Compilation failed with exit code 57005\" (#37354)"},{"Id":"470037186","IsPullRequest":false,"CreatedAt":"2019-07-18T23:14:41","Actor":"MatthieuMEZIL","Number":"37352","RawContent":null,"Title":"Binder error -1073741819","State":"open","Body":"**Version Used**: 1.3.2\r\nI know this is an old version of Roslyn but creating the bug anyway as it might still be an existing bug.\r\n\r\nCannot repro but got an Exception from Roslyn with return code -1073741819 with the following callstack (which is different than the same bugs I found with the same return code):\r\n\r\nat Microsoft.CodeAnalysis.CSharp.Binder.WithUnsafeRegionIfNecessary(SyntaxTokenList modifiers) \r\nat Microsoft.CodeAnalysis.CSharp.BinderFactory.BinderFactoryVisitor.VisitTypeDeclarationCore(TypeDeclarationSyntax parent, NodeUsage extraInfo) \r\nat Microsoft.CodeAnalysis.CSharp.BinderFactory.BinderFactoryVisitor.VisitTypeDeclarationCore(TypeDeclarationSyntax parent) \r\nat Microsoft.CodeAnalysis.CSharp.BinderFactory.GetBinder(CSharpSyntaxNode node, Int32 position, CSharpSyntaxNode memberDeclarationOpt, Symbol memberOpt) \r\nat Microsoft.CodeAnalysis.CSharp.BinderFactory.GetBinder(CSharpSyntaxNode node, CSharpSyntaxNode memberDeclarationOpt, Symbol memberOpt) \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.SourceNamedTypeSymbol.MakeOneDeclaredBases(ConsList`1 newBasesBeingResolved, SingleTypeDeclaration decl, DiagnosticBag diagnostics) \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.SourceNamedTypeSymbol.MakeDeclaredBases(ConsList`1 basesBeingResolved, DiagnosticBag diagnostics) \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.SourceNamedTypeSymbol.GetDeclaredBases(ConsList`1 basesBeingResolved) \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.SourceNamedTypeSymbol.MakeAcyclicBaseType(DiagnosticBag diagnostics) \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.SourceNamedTypeSymbol.get_BaseTypeNoUseSiteDiagnostics() \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.SourceNamedTypeSymbol.CheckBase(DiagnosticBag diagnostics) \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberContainerTypeSymbol.ForceComplete(SourceLocation locationOpt, CancellationToken cancellationToken) \r\nat Microsoft.CodeAnalysis.CSharp.Symbol.ForceCompleteMemberByLocation(SourceLocation locationOpt, Symbol member, CancellationToken cancellationToken) \r\nat Roslyn.Utilities.UICultureUtilities.<>c__DisplayClass6_0`1.<WithCurrentUICulture>b__0(T param) \r\nat System.Threading.Tasks.Parallel.<>c__DisplayClass17_0`1.<ForWorker>b__1() \r\nat System.Threading.Tasks.Task.InnerInvokeWithArg(Task childTask) \r\nat System.Threading.Tasks.Task.<>c__DisplayClass176_0.<ExecuteSelfReplicating>b__0(Object ) \r\nat System.Threading.Tasks.Task.Execute() \r\nat System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx) \r\nat System.Threading.ExecutionContext.Run(ExecutionContext executionContext, ContextCallback callback, Object state, Boolean preserveSyncCtx) \r\nat System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot) \r\nat System.Threading.Tasks.Task.ExecuteEntry(Boolean bPreventDoubleExecution) \r\nat System.Threading.ThreadPoolWorkQueue.Dispatch() \r\n","Url":"https://github.com/dotnet/roslyn/issues/37352","RelatedDescription":"Open issue \"Binder error -1073741819\" (#37352)"},{"Id":"470036590","IsPullRequest":true,"CreatedAt":"2019-07-18T23:13:23","Actor":"agocke","Number":"37351","RawContent":null,"Title":"Update the LangVersion and Nullable command line text","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/37351","RelatedDescription":"Open PR \"Update the LangVersion and Nullable command line text\" (#37351)"},{"Id":"470034773","IsPullRequest":false,"CreatedAt":"2019-07-18T23:08:30","Actor":"vsfeedback","Number":"37350","RawContent":null,"Title":"immediate window is case sensitive for VB","State":"open","Body":"In Immediate Windows while debugging a VB program I type &quot;vb&quot; instead of &quot;VB&quot; as shown below where VB is defines as\n```vb\nImports VB = Microsoft.CodeAnalysis.VisualBasic\n```\n\nIn the firsrt case I get and error and in the second it works. Visual Basic is not case sensitive\n\n?ctype(VB_Modifier.LeadingTrivia(0).rawkind,**vb**.SyntaxKind).ToString\nerror BC30002: Type 'vb.SyntaxKind' is not defined.\n?ctype(VB_Modifier.LeadingTrivia(0).rawkind,**VB**.SyntaxKind).ToString\n&quot;WhitespaceTrivia&quot;\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/523669/immediate-window-is-case-sensitive-for-vb.html\nVSTS ticketId: 843194_\n_These are the original issue comments:_\n\nVisual Studio Feedback System on 4/8/2019, 08:19 PM (100 days ago): <p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n_These are the original issue solutions:_\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/37350","RelatedDescription":"Open issue \"immediate window is case sensitive for VB\" (#37350)"},{"Id":"470029928","IsPullRequest":false,"CreatedAt":"2019-07-18T22:54:41","Actor":"MatthieuMEZIL","Number":"37348","RawContent":null,"Title":"Roslyn NullReferenceException at Roslyn.Utilities.ArrayExtensions.BinarySearchUpperBound","State":"open","Body":"**Version Used**:1.3.2 \r\nI know this is an old version of Roslyn but creating the bug anyway as it might still be an existing bug.\r\n\r\nCannot repro but got a NullReferenceException with the following callstack:\r\n\r\nat Roslyn.Utilities.ArrayExtensions.BinarySearchUpperBound(Int32[] array, Int32 value) \r\nat Microsoft.CodeAnalysis.CSharp.Syntax.InternalSyntax.SyntaxList.WithLotsOfChildren.FindSlotIndexContainingOffset(Int32 offset) \r\nat Microsoft.CodeAnalysis.ChildSyntaxList.ChildThatContainsPosition(SyntaxNode node, Int32 targetPosition) \r\nat Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode.ChildThatContainsPosition(Int32 position) \r\nat Microsoft.CodeAnalysis.SyntaxNode.FindTokenInternal(Int32 position) \r\nat Microsoft.CodeAnalysis.SyntaxNode.FindTokenCore(Int32 position, Boolean findInsideTrivia) \r\nat Microsoft.CodeAnalysis.CSharp.BinderFactory.BinderFactoryVisitor.IsInUsing(CSharpSyntaxNode containingNode) \r\nat Microsoft.CodeAnalysis.CSharp.BinderFactory.BinderFactoryVisitor.VisitNamespaceDeclaration(NamespaceDeclarationSyntax parent) \r\nat Microsoft.CodeAnalysis.CSharp.BinderFactory.BinderFactoryVisitor.VisitTypeDeclarationCore(TypeDeclarationSyntax parent, NodeUsage extraInfo) \r\nat Microsoft.CodeAnalysis.CSharp.BinderFactory.BinderFactoryVisitor.VisitTypeDeclarationCore(TypeDeclarationSyntax parent) \r\nat Microsoft.CodeAnalysis.CSharp.BinderFactory.GetBinder(CSharpSyntaxNode node, Int32 position, CSharpSyntaxNode memberDeclarationOpt, Symbol memberOpt) \r\nat Microsoft.CodeAnalysis.CSharp.BinderFactory.GetBinder(CSharpSyntaxNode node, CSharpSyntaxNode memberDeclarationOpt, Symbol memberOpt) \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberContainerTypeSymbol.AddNonTypeMembers(MembersAndInitializersBuilder builder, SyntaxList`1 members, DiagnosticBag diagnostics) \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberContainerTypeSymbol.AddDeclaredNontypeMembers(MembersAndInitializersBuilder builder, DiagnosticBag diagnostics) \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberContainerTypeSymbol.BuildMembersAndInitializers(DiagnosticBag diagnostics) \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberContainerTypeSymbol.GetMembersAndInitializers() \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberContainerTypeSymbol.MakeAllMembers(DiagnosticBag diagnostics) \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberContainerTypeSymbol.GetMembersByNameSlow() \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberContainerTypeSymbol.ForceComplete(SourceLocation locationOpt, CancellationToken cancellationToken) \r\nat Microsoft.CodeAnalysis.CSharp.Symbol.ForceCompleteMemberByLocation(SourceLocation locationOpt, Symbol member, CancellationToken cancellationToken) \r\nat Roslyn.Utilities.UICultureUtilities.<>c__DisplayClass6_0`1.<WithCurrentUICulture>b__0(T param) \r\nat System.Threading.Tasks.Parallel.<>c__DisplayClass17_0`1.<ForWorker>b__1() \r\nat System.Threading.Tasks.Task.InnerInvokeWithArg(Task childTask) \r\nat System.Threading.Tasks.Task.<>c__DisplayClass176_0.<ExecuteSelfReplicating>b__0(Object ) \r\nat System.Threading.Tasks.Task.ThrowIfExceptional(Boolean includeTaskCanceledExceptions) \r\nat System.Threading.Tasks.Task.Wait(Int32 millisecondsTimeout, CancellationToken cancellationToken) \r\nat System.Threading.Tasks.Parallel.ForWorker[TLocal](Int32 fromInclusive, Int32 toExclusive, ParallelOptions parallelOptions, Action`1 body, Action`2 bodyWithState, Func`4 bodyWithLocal, Func`1 localInit, Action`1 localFinally) \r\nat System.Threading.Tasks.Parallel.For(Int32 fromInclusive, Int32 toExclusive, ParallelOptions parallelOptions, Action`1 body) \r\nat Microsoft.CodeAnalysis.CSharp.Symbols.SourceNamespaceSymbol.ForceComplete(SourceLocation locationOpt, CancellationToken cancellationToken) \r\nat Microsoft.CodeAnalysis.CSharp.Symbol.ForceCompleteMemberByLocation(SourceLocation locationOpt, Symbol member, CancellationToken cancellationToken) \r\nat Roslyn.Utilities.UICultureUtilities.<>c__DisplayClass6_0`1.<WithCurrentUICulture>b__0(T param) \r\nat System.Threading.Tasks.Parallel.<>c__DisplayClass17_0`1.<ForWorker>b__1() \r\nat System.Threading.Tasks.Task.InnerInvokeWithArg(Task childTask) \r\nat System.Threading.Tasks.Task.<>c__DisplayClass176_0.<ExecuteSelfReplicating>b__0(Object ) \r\nat System.Linq.Enumerable.WhereSelectEnumerableIterator`2.MoveNext() \r\nat ScopeCompiler.CompilationException.FromInnerException(Exception e, CompilerDependencyFactory dependencies, Nullable`1 unhandled, Token anchor, Script script, Func`2 getDiagnosticSerializableException, Func`2 args) \r\nat ScopeCompiler.CompilationException.<>c__DisplayClass15_0.<FromInnerException>b__0(Exception inner) \r\nat System.Linq.Enumerable.WhereSelectEnumerableIterator`2.MoveNext() \r\n","Url":"https://github.com/dotnet/roslyn/issues/37348","RelatedDescription":"Open issue \"Roslyn NullReferenceException at Roslyn.Utilities.ArrayExtensions.BinarySearchUpperBound\" (#37348)"},{"Id":"469935254","IsPullRequest":false,"CreatedAt":"2019-07-18T22:52:14","Actor":"vsfeedback","Number":"37335","RawContent":null,"Title":"Edit - GoTo All: Focus is lost when file is auto-opened","State":"closed","Body":"When hitting Ctrl-, or Ctrl-T and typing something, after a short delay the first search result location is opened in a (new) window. this steals the focus away from the GoToAll window, thus making it impossible to continue typing (or just type slowly) and select from the search result using the arrow keys.\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/647887/edit-goto-all-focus-is-lost-when-file-is-auto-open.html\nVSTS ticketId: 947772_\n_These are the original issue comments:_\n\nVisual Studio Feedback System on 7/17/2019, 01:17 AM (34 hours ago): <markdown><p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n</markdown>\n_These are the original issue solutions:_\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/37335","RelatedDescription":"Closed issue \"Edit - GoTo All: Focus is lost when file is auto-opened\" (#37335)"},{"Id":"469995616","IsPullRequest":false,"CreatedAt":"2019-07-18T21:23:09","Actor":"vsfeedback","Number":"37347","RawContent":null,"Title":"Improved .editorconfig intellisense","State":"open","Body":"<p>In Visual Studio 16.0.3, there is limited intellisense support for .editorconfig files. One challenge is that as new Visual Studio versions may add support for new .NET or C# options, it's hard to know what existing .editorconfig options are supported but not yet included in the .editorconfig file. The one-time export of VS settings into a .editorconfig files doesn't help with ongoing maintenance.</p> <p>It would be nice if intellisense within a .editorconfig file only suggested options that are not already included within each respective file type. For example, suppose under &quot;[*.cs]&quot; if we already have &quot;dotnet_style_qualification_for_event = true:warning&quot;. If we hit control-space, &quot;dotnet_style_qualification_for_event&quot; should not appear as an option.</p> <p>An alternate approach could be to automatically add unspecified styles to .editorconfig files as Visual Studio support is available.</p>\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/idea/557790/improved-editorconfig-intellisense.html\nVSTS ticketId: 887728_\n_These are the original issue comments:_\n\nJane Wu [MSFT] on 5/6/2019, 02:05 AM (73 days ago): <p>Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&nbsp;We'll provide an update once the issue has been triaged by the product team.</p>","Url":"https://github.com/dotnet/roslyn/issues/37347","RelatedDescription":"Open issue \"Improved .editorconfig intellisense\" (#37347)"},{"Id":"469992848","IsPullRequest":false,"CreatedAt":"2019-07-18T21:15:55","Actor":"vsfeedback","Number":"37346","RawContent":null,"Title":"Jump to reference when only one reference exists","State":"open","Body":"<p>When you are selecting a variable or function you can use the shortcut 'shift + f12' to open the 'references-window'.</p> <p>It would be great to just skip this window if only one reference exists, and jump immediately to the reference itself.</p> <p>That way it would work the same as a the default behavior of 'f12' (jump into). If there are multiple references it shows the 'references-window'. If not it goes immediately to the reference itself.</p>\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/idea/556260/jump-to-reference-when-only-one-reference-exists.html\nVSTS ticketId: 866911_\n_These are the original issue comments:_\n\nJane Wu [MSFT] on 5/5/2019, 03:09 AM (74 days ago): <p>Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&nbsp;We'll provide an update once the issue has been triaged by the product team.</p>","Url":"https://github.com/dotnet/roslyn/issues/37346","RelatedDescription":"Open issue \"Jump to reference when only one reference exists\" (#37346)"},{"Id":"469987876","IsPullRequest":false,"CreatedAt":"2019-07-18T21:02:46","Actor":"feng-yuan","Number":"37345","RawContent":null,"Title":"Temp allocations in SympolDisplay.ToDisplayString","State":"open","Body":"There are lots of temp allocations in SymbolDisplay.ToDisplayString. Specifically, there are three issues:\r\n\r\n1) ToDisplayParts allocates an ImmutableArray<SymbolDisplayPart> which is only used once.\r\n2) To generate this array, ArrayBuilder<T> is used.. But builder with larger arrays are rejected on returning, causing more allocations later.\r\n3) When generating string from the array, StringBuilder.Append(object) is used, causing boxing of SymbolDisplayPart, which is a struct.\r\n\r\nSuggestions:\r\n1) Directly read the ArrayBuilder as IReadOnlyList, no need for array allocation.\r\n2) Change comparison on returning from < 128, to <=128, accepting 128 element array.\r\n3) Change to call StringBuilder.Append(SymbolDisplayPart.ToString()), avoid boxing.","Url":"https://github.com/dotnet/roslyn/issues/37345","RelatedDescription":"Open issue \"Temp allocations in SympolDisplay.ToDisplayString\" (#37345)"},{"Id":"469977417","IsPullRequest":false,"CreatedAt":"2019-07-18T20:36:25","Actor":"mharthoorn","Number":"37344","RawContent":null,"Title":"Incorrect nullability analysis for single and-operator ","State":"open","Body":"**Version Used**: \r\nVisual Studio 16.2.0 Preview 4\r\n\r\n**Steps to Reproduce**:\r\nThe following if statement with a single **and**-operator (&), gets analysed as both values being possibly null. That is incorrect.\r\n\r\n```csharp\r\n    var monkey = CreatePossibleNullMonkey();\r\n    var business = CreatePossibleNullBusiness();\r\n    if (monkey != null & business != null)\r\n    {\r\n        monkey.Do(); // Dereference of a possibly null reference\r\n        business.AsUsual(); // Dereference of a possibly null reference\r\n    }\r\n```\r\n\r\n**Note** \r\nWith a shortcut-and-operator (double &&), the analysis _does_ evaluate both as not null, which is correct.\r\n```csharp\r\n    if (monkey != null && business != null)\r\n    {\r\n        monkey.Do(); // No warning\r\n        business.AsUsual(); // No warning\r\n    }\r\n```\r\n\r\n**Inverse**\r\nThe inverse has the same problem. Here too, the double **or** ``||`` correctly evaluates both variables as not null which is correct, While the single-or evaluates them as possibly null. Wich is incorrect.\r\n\r\n```csharp\r\n    if (!(monkey is null | business is null))\r\n    {\r\n        monkey.Do(); // Dereference of a possibly null reference\r\n        business.AsUsual(); // Dereference of a possibly null reference\r\n    }\r\n```\r\n\r\n","Url":"https://github.com/dotnet/roslyn/issues/37344","RelatedDescription":"Open issue \"Incorrect nullability analysis for single and-operator \" (#37344)"},{"Id":"469959828","IsPullRequest":false,"CreatedAt":"2019-07-18T19:54:47","Actor":"vsfeedback","Number":"37343","RawContent":null,"Title":"Incorrect `IDE0007 use 'var' instead of explicit type` for List<T>","State":"open","Body":"var result = new List&lt;CorrespondenceModel&gt;();\n...\nList&lt;CorrespondenceModel&gt; sortedresult = result.OrderByDescending(r =&gt; r.CreationDate).ToList();\n\n\nI'm getting &quot;use 'var' instead of explicit type&quot; for line &quot;List&lt;...&gt;&quot;\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/520039/incorrect-ide0007-use-var-instead-of-explicit-type.html\nVSTS ticketId: 841177_\n_These are the original issue comments:_\n\nVisual Studio Feedback System on 4/8/2019, 01:55 AM (101 days ago): <p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\nVisual Studio Feedback System on 7/18/2019, 00:54 PM (42 sec ago): <markdown><p>This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.</p>\n</markdown>\n_These are the original issue solutions:_\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/37343","RelatedDescription":"Open issue \"Incorrect `IDE0007 use 'var' instead of explicit type` for List<T>\" (#37343)"},{"Id":"469946865","IsPullRequest":false,"CreatedAt":"2019-07-18T19:35:27","Actor":"JasonBock","Number":"37342","RawContent":null,"Title":"Generalize InternalImplementationOnlyAttribute Usage","State":"closed","Body":"**Version Used**: \r\n.NET Core 3.0 preview 6\r\n\r\nThis isn't a bug per-se. I just noticed recently that I can't create a class that inherits from `ISymbol`. After digging around a bit, I finally realized that the interface (`IOperation` has this as well) has the `InternalImplementationOnlyAttribute` on it. Apparently, this lets Roslyn define public interfaces that can't be part of a class's inheritance hierarchy if it's not within its assembly.\r\n\r\nSince `InternalImplementationOnlyAttribute` is `internal`, .NET developers can't use this attribute. But the compiler already knows to create an error (RS1009 is the code) if an interface has it. I've had cases myself where I wanted a public interface that could not be a base type unless it was within the assembly. If `InternalImplementationOnlyAttribute` was made `public`, would it be possible to make this a feature for general consumption by any .NET developer?","Url":"https://github.com/dotnet/roslyn/issues/37342","RelatedDescription":"Closed issue \"Generalize InternalImplementationOnlyAttribute Usage\" (#37342)"},{"Id":"469943408","IsPullRequest":true,"CreatedAt":"2019-07-18T19:15:39","Actor":"CyrusNajmabadi","Number":"37341","RawContent":null,"Title":"More IDE suggestion cleanup.","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/37341","RelatedDescription":"Open PR \"More IDE suggestion cleanup.\" (#37341)"},{"Id":"469942725","IsPullRequest":false,"CreatedAt":"2019-07-18T19:13:55","Actor":"vsfeedback","Number":"37340","RawContent":null,"Title":"Errors in code while typing cause all regions to open.....","State":"open","Body":"While using Visual Studio 2019 and editing Visual Basic.Net code.....\nIf you have used #Region/#End Region in your code, then you edit a string prior to those regions, during the editing of the string ALL regions afterwards will open unecessarily. For example:\n\ncode\nmore code\nmore code\ndim a as string=&quot;hello&quot;\nmore code\n\n#Stuff         &lt;-----First closed region\n#MoreStuff   &lt;--------second closed region\n#EvenMore Stuff  &lt;-------------third closed region\n\nIf you go back and delete the last doublequote on the declaration of the string a=&quot;hello&quot;, the editor will, after a second or two, open every following region in your document. This should not happen.\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/589216/errors-in-code-while-typing-cause-all-regions-to-o.html\nVSTS ticketId: 902145_\n_These are the original issue comments:_\n\nVisual Studio Feedback System on 5/30/2019, 07:26 PM (48 days ago): <p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n_These are the original issue solutions:_\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/37340","RelatedDescription":"Open issue \"Errors in code while typing cause all regions to open.....\" (#37340)"},{"Id":"469942618","IsPullRequest":false,"CreatedAt":"2019-07-18T19:13:43","Actor":"vsfeedback","Number":"37339","RawContent":null,"Title":"Auto-generation of control events is not placing code correctly....","State":"open","Body":"Visual Studio 2019, editing Visual Basic.Net code.\nWhile working on a windows form with a single button control on the form. double-Clicking the button in design mode causes the &quot;Click&quot; event code to be autogenerated, presumably placed at the end of the form's Class (just before the &quot;End Class&quot; statement.\n\nThis usually works. However, if your class contains a #Region/#EndRegion at the end of the Class, AND that #Region contains a sub method, the auto-generated event code Opens the last region and inserts the event code between the EndSub and #End Regiion statements. The auto-generated code SHOULD be inserted just before the End Class statement by default, and not open any existing #Regions.\n\nPlease see my attachments for example code.\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/589218/auto-generation-of-control-events-is-not-placing-c.html\nVSTS ticketId: 902148_\n_These are the original issue comments:_\n\nVisual Studio Feedback System on 5/30/2019, 07:27 PM (48 days ago): <p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n_These are the original issue solutions:_\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/37339","RelatedDescription":"Open issue \"Auto-generation of control events is not placing code correctly....\" (#37339)"},{"Id":"469941528","IsPullRequest":false,"CreatedAt":"2019-07-18T19:11:01","Actor":"vsfeedback","Number":"37338","RawContent":null,"Title":"Lambda type inference Error","State":"open","Body":"1. I introduced the MORELINQ package, where a type inference error occurs when using the ToDataTable provided by this package.\r\n```\r\nClass Person\r\n       {\r\nSome property.\r\n\r\n}\r\nVar lis = new List<Person> (); List.\r\nTodatatable (item=>item.?????);\r\n``` \r\n\r\nThe display type is person when the mouse moves to the list in VS, but the properties of the prompt are not properties on this type at all.\r\n\r\nBut the problem will not recur in vs2015. 2. After the new project is completed (. NET core console), NuGet introduces the package and will find that there is no hint of the package, and no reference error will occur after manual using.\r\n\r\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/591568/lambdaç±»åž‹æŽ¨æ–­é”™è¯¯.html\r\nVSTS ticketId: 904077_\r\n_These are the original issue comments:_\r\n\r\nVisual Studio Feedback System on 6/3/2019, 02:13 AM (45 days ago): <p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\r\n\r\n_These are the original issue solutions:_\r\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/37338","RelatedDescription":"Open issue \"Lambda type inference Error\" (#37338)"},{"Id":"469940227","IsPullRequest":false,"CreatedAt":"2019-07-18T19:08:05","Actor":"vsfeedback","Number":"37337","RawContent":null,"Title":"Incorrect suggestion regarding incorrectly marked async void methods","State":"open","Body":"the async suggestion reads &quot;This async method lacks 'await' operators and will run synchronously&quot; however should you throw an exception from within the async void method, even if the method was in a try-catch block, the exception will be marked as Unhandled and crash the application. However, removing the &quot;redundant&quot; async tag allows the correct execution of the method.\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/598158/incorrect-suggestion-regarding-incorrectly-marked.html\nVSTS ticketId: 910876_\n_These are the original issue comments:_\n\nVisual Studio Feedback System on 6/9/2019, 11:58 PM (38 days ago): <p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n_These are the original issue solutions:_\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/37337","RelatedDescription":"Open issue \"Incorrect suggestion regarding incorrectly marked async void methods\" (#37337)"},{"Id":"469932784","IsPullRequest":false,"CreatedAt":"2019-07-18T18:50:25","Actor":"vsfeedback","Number":"37333","RawContent":null,"Title":"System.ArgumentException: Not a C# symbol.","State":"open","Body":"**VS2019 16.2.0 Preview 3.0**\n\nI have this simple method;\n\n```\npublic static T NullObjectRetry&lt;T&gt;(Func&lt;T&gt; funcToRun)\n{\n    var returnVal = funcToRun();\n\nfor (var i = 0; i &lt; 10; i++)\n    {\n        if (returnVal == null)\n        {\n            Console.WriteLine(&quot;Retrying &quot; + (i + 1) + &quot; - &quot; + (i + 1) * 1000 + &quot; seconds&quot;);\n            Thread.Sleep((i + 1) * 1000);\n        }\n        else\n        {\n            break;\n        }\n\nreturnVal = funcToRun();\n    }\n\nreturn returnVal;\n}\n```\n\nEvery time I try to use this method writing something like the below;\n\n```\nbool isValueTrue = TestUtils.NullObjectRetry(() =&gt;\n{\n    if (fakeClass.GetBool() == false) return null;\n    return true;\n});\n```\n\nThe second I begin to right a &quot;return&quot; statement within the function my VS just freezes and reboots; Looking at the event viewer there is an error saying;\n\n```\nApplication: devenv.exe\nFramework Version: v4.0.30319\nDescription: The application requested process termination through System.Environment.FailFast(string message).\nMessage: System.ArgumentException: Not a C# symbol.\nParameter name: typeArguments\n```\n\nand an application error saying;\n\n```\nFaulting application name: devenv.exe, version: 16.2.29021.104, time stamp: 0x5d0d2e76\nFaulting module name: unknown, version: 0.0.0.0, time stamp: 0x00000000\nException code: 0x80131623\nFault offset: 0x286a3212\nFaulting process id: 0x5a0c\nFaulting application start time: 0x01d53c242a0d7616\nFaulting application path: C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Preview\\Common7\\IDE\\devenv.exe\nFaulting module path: unknown\nReport Id: da99e1ae-fb52-4517-bff9-45eeab6c14e0\nFaulting package full name: \nFaulting package-relative application ID: \n```\n\nI've attached to full stack trace.\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/648587/systemargumentexception-not-a-c-symbol.html\nVSTS ticketId: 948096_\n_These are the original issue comments:_\n\nVisual Studio Feedback System on 7/17/2019, 01:46 AM (34 hours ago): <markdown><p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n</markdown>\n_These are the original issue solutions:_\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/37333","RelatedDescription":"Open issue \"System.ArgumentException: Not a C# symbol.\" (#37333)"}],"ResultType":"GitHubIssue"},"CoreRT-Issues":{"Issues":[{"Id":"470057749","IsPullRequest":true,"CreatedAt":"2019-07-19T02:17:13","Actor":"cshung","Number":"7635","RawContent":null,"Title":"Fix string import for CppCodeGen","State":"closed","Body":"The capital `X` is not a standard [escape sequence](https://en.cppreference.com/w/cpp/language/escape), we should use lower case `x`.","Url":"https://github.com/dotnet/corert/pull/7635","RelatedDescription":"Closed or merged PR \"Fix string import for CppCodeGen\" (#7635)"},{"Id":"470006900","IsPullRequest":true,"CreatedAt":"2019-07-18T23:57:40","Actor":"jkotas","Number":"7632","RawContent":null,"Title":"Port GC changes from CoreCLR","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7632","RelatedDescription":"Closed or merged PR \"Port GC changes from CoreCLR\" (#7632)"},{"Id":"470014921","IsPullRequest":true,"CreatedAt":"2019-07-18T22:12:09","Actor":"trylek","Number":"7634","RawContent":null,"Title":"WIP [no-merge] IsManagedSequential CPAOT instrumentation","State":"open","Body":"This instrumentation change (I don't intend to merge in) adds logging\r\nof IsManagedSequential results. I have sent out a separate PR\r\nfor the corresponding SuperIlc change (I believe the SuperIlc change\r\nis worth merging in) and I'll send out another instrumentation change\r\nfor Crossgen.\r\n\r\nThanks\r\n\r\nTomas\r\n\r\nP.S. Once I figure out how to fix the remaining inconsistencies in\r\nIsManagedSequential, I'm going to merge in a smaller change just\r\nmoving the [fixed] IsManagedSequentialMethod to the R2R field\r\nlayout algorithm source file per JanK's suggestion.","Url":"https://github.com/dotnet/corert/pull/7634","RelatedDescription":"Open PR \"WIP [no-merge] IsManagedSequential CPAOT instrumentation\" (#7634)"},{"Id":"470009694","IsPullRequest":true,"CreatedAt":"2019-07-18T21:57:05","Actor":"trylek","Number":"7633","RawContent":null,"Title":"Initial support for IsManagedSequential diffing in SuperIlc","State":"open","Body":"This change searches compiler logs for specially formatted sections\r\nproduced by my private CPAOT and Crossgen instrumentation changes\r\nand outputs their lists and diffs between CPAOT and Crossgen.\r\n\r\nI have finally reached almost 100% parity between CPAOT and Crossgen\r\nqueries for the IsManagedSequential type characteristics and I have\r\nalready identified a type with mismatching results. Based on JanK's\r\nsuggestion I assume we should run this through anything we can find\r\nto maximize our confidence in the R2R compiler.\r\n\r\nThanks\r\n\r\nTomas\r\n\r\nP.S. I'm going to send out separate not-for-checkin PR's for the\r\nappropriate CPAOT and Crossgen instrumentations. For SuperIlc,\r\nI believe there's no harm in actually merging the change in.","Url":"https://github.com/dotnet/corert/pull/7633","RelatedDescription":"Open PR \"Initial support for IsManagedSequential diffing in SuperIlc\" (#7633)"},{"Id":"468923074","IsPullRequest":true,"CreatedAt":"2019-07-18T18:19:28","Actor":"cshung","Number":"7622","RawContent":null,"Title":"[CppCodeGen] Avoid generating typedef redefinition for delegates with vtable","State":"closed","Body":"This change fixes the compilation error for issue #6415, this does not fix the issue itself yet.\r\nIn case the vtable of the delegate type is generated, [`GetCodeForVirtualMethod()`](https://github.com/dotnet/corert/blob/c3751121a3e96e750933c159d732f52a70c09857/src/ILCompiler.CppCodeGen/src/CppCodeGen/CppWriter.cs#L974) will generate a typedef for the Invoke function, and we will generate another in `GetCodeForDelegate()` as the code change shows, leading to redefinition error.\r\n\r\nThis fix detects that case and avoids generating the redefinition.","Url":"https://github.com/dotnet/corert/pull/7622","RelatedDescription":"Closed or merged PR \"[CppCodeGen] Avoid generating typedef redefinition for delegates with vtable\" (#7622)"},{"Id":"469455160","IsPullRequest":true,"CreatedAt":"2019-07-18T18:19:11","Actor":"jkotas","Number":"7630","RawContent":null,"Title":"Delete stale cache size detection code on Windows","State":"closed","Body":"Fill cache size detection on Unix with CoreCLR PAL implementation","Url":"https://github.com/dotnet/corert/pull/7630","RelatedDescription":"Closed or merged PR \"Delete stale cache size detection code on Windows\" (#7630)"},{"Id":"469527045","IsPullRequest":false,"CreatedAt":"2019-07-18T01:29:27","Actor":"forestbat","Number":"7631","RawContent":null,"Title":"Future of AOT","State":"open","Body":"#https://github.com/dotnet/coreclr/commit/0cc81b60eb184c92b8526348d4bb056ed563e9d6\r\n#https://github.com/dotnet/corefx/commit/1acaa2017cfc64ef1aabcf3b19d0e097af692616\r\nAs we all knowï¼Œdevelopment for .NET5 has started and this project is like a forgotten cornerï¼Œso in the next yearï¼ˆuntil November 2020ï¼‰will MS invest more to thisï¼Ÿ\r\nAnd will AOT of C#ï¼ˆeither corert or mono aotï¼‰support more processor structure such as MIPS or RISCVï¼Ÿ\r\nHope your reply.","Url":"https://github.com/dotnet/corert/issues/7631","RelatedDescription":"Open issue \"Future of AOT\" (#7631)"},{"Id":"469435131","IsPullRequest":true,"CreatedAt":"2019-07-17T21:53:43","Actor":"Dotnet-GitSync-Bot","Number":"7629","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7629","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7629)"},{"Id":"469339836","IsPullRequest":true,"CreatedAt":"2019-07-17T19:26:18","Actor":"Dotnet-GitSync-Bot","Number":"7628","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7628","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7628)"},{"Id":"469207771","IsPullRequest":true,"CreatedAt":"2019-07-17T16:47:01","Actor":"Dotnet-GitSync-Bot","Number":"7627","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @safern","Url":"https://github.com/dotnet/corert/pull/7627","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7627)"},{"Id":"469035654","IsPullRequest":true,"CreatedAt":"2019-07-17T13:33:30","Actor":"MichalStrehovsky","Number":"7623","RawContent":null,"Title":"Include Natvis in the ILCompiler package","State":"closed","Body":"This makes strings and arrays for CoreRT-compiled programs look nicer in debuggers that support Natvis.","Url":"https://github.com/dotnet/corert/pull/7623","RelatedDescription":"Closed or merged PR \"Include Natvis in the ILCompiler package\" (#7623)"},{"Id":"469068373","IsPullRequest":true,"CreatedAt":"2019-07-17T13:32:09","Actor":"Dotnet-GitSync-Bot","Number":"7624","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas","Url":"https://github.com/dotnet/corert/pull/7624","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7624)"},{"Id":"469103662","IsPullRequest":true,"CreatedAt":"2019-07-17T13:29:14","Actor":"MichalStrehovsky","Number":"7626","RawContent":null,"Title":"Capture name of failing method in CodeGenerationFailedException","State":"closed","Body":"Useful for troubleshooting.","Url":"https://github.com/dotnet/corert/pull/7626","RelatedDescription":"Closed or merged PR \"Capture name of failing method in CodeGenerationFailedException\" (#7626)"},{"Id":"469096443","IsPullRequest":false,"CreatedAt":"2019-07-17T09:51:35","Actor":"Berrysoft","Number":"7625","RawContent":null,"Title":"CodeGenerationFailedException after July 13th","State":"open","Body":"```\r\nILCompiler.CodeGenerationFailedException: Code generation failed ---> System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative and less than the size of the collection.\r\n  Parameter name: index\r\n     at Internal.JitInterface.CorInfoImpl.HandleToObject(IntPtr handle)\r\n     at Internal.JitInterface.CorInfoImpl.HandleToObject(CORINFO_CLASS_STRUCT_* type)\r\n     at Internal.JitInterface.CorInfoImpl.isMoreSpecificType(CORINFO_CLASS_STRUCT_* cls1, CORINFO_CLASS_STRUCT_* cls2)\r\n     at Internal.JitInterface.CorInfoImpl._isMoreSpecificType(IntPtr thisHandle, IntPtr* ppException, CORINFO_CLASS_STRUCT_* cls1, CORINFO_CLASS_STRUCT_* cls2)\r\n     --- End of inner exception stack trace ---\r\n     at Internal.JitInterface.CorInfoImpl.CompileMethodInternal(IMethodNode methodCodeNodeNeedingCode, MethodIL methodIL)\r\n     at ILCompiler.RyuJitCompilation.ComputeDependencyNodeDependencies(List`1 obj)\r\n     at ILCompiler.DependencyAnalysisFramework.DependencyAnalyzer`2.ComputeMarkedNodes()\r\n     at ILCompiler.RyuJitCompilation.CompileInternal(String outputFile, ObjectDumper dumper)\r\n     at ILCompiler.Compilation.ILCompiler.ICompilation.Compile(String outputFile, ObjectDumper dumper)\r\n     at ILCompiler.Program.Run(String[] args)\r\n     at ILCompiler.Program.Main(String[] args)\r\n```\r\nThe same code built successfully in July 12th, but failed after July 13th. I suspect it is because of #7612, but I don't know the reason exactly.\r\nAddition: I tried to reproduce the bug by a \"Hello world\" program, but it is built successfully, so I even don't know how to reproduce it.","Url":"https://github.com/dotnet/corert/issues/7625","RelatedDescription":"Open issue \"CodeGenerationFailedException after July 13th\" (#7625)"},{"Id":"468826889","IsPullRequest":true,"CreatedAt":"2019-07-17T08:49:41","Actor":"Dotnet-GitSync-Bot","Number":"7621","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7621","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7621)"},{"Id":"468740796","IsPullRequest":true,"CreatedAt":"2019-07-17T00:24:08","Actor":"cshung","Number":"7620","RawContent":null,"Title":"Make sure we use a 64 bit number to represent memory limit (even in 32 bit architectures)","State":"closed","Body":"Fixes #7619 \r\n\r\nAccording to @am11 in the referenced issue, Linux could tell us the memory limit is `0x7FFFFFFFFFFFFFFF` in a 32-bit architecture docker image, therefore we need to make sure when we read the number, we need to use a 64-bit number.","Url":"https://github.com/dotnet/corert/pull/7620","RelatedDescription":"Closed or merged PR \"Make sure we use a 64 bit number to represent memory limit (even in 32 bit architectures)\" (#7620)"},{"Id":"467902677","IsPullRequest":true,"CreatedAt":"2019-07-15T21:33:16","Actor":"cshung","Number":"7617","RawContent":null,"Title":"Changing assembler constant format","State":"closed","Body":"Fixes #7607 \r\n\r\nAccording to the [GNU assembler documentation](http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.32.4503&rep=rep1&type=pdf), page 15, we are supposed to use the 0x format for hexadecimal numeric constants.\r\n\r\nWriting a numeric constant as `0FFh` was supported for the older version of `as`. It is now unsupported on the latest assembler (In this particular issue, Command Line Tools for Xcode Beta 2 on MacOS Mojave 10.14.5), so we must use the standard hexadecimal format.","Url":"https://github.com/dotnet/corert/pull/7617","RelatedDescription":"Closed or merged PR \"Changing assembler constant format\" (#7617)"},{"Id":"466813265","IsPullRequest":false,"CreatedAt":"2019-07-15T21:33:16","Actor":"karanjitsingh","Number":"7607","RawContent":null,"Title":"build failing on mac os","State":"closed","Body":"Trying to build on mac os 10.14.5 (18F132)\r\n\r\n```bash\r\nNitins-MacBook-Pro-2:corert vstest$ ./build.sh release\r\nUnknown CPU i386 detected, configuring as if for x64\r\nSetting up directories for build\r\nChecking pre-requisites...\r\nCommencing build of corert native components for OSX.x64.Release\r\n~/github/corert/bin/obj/Native/OSX.x64.Release ~/github/corert\r\nInvoking cmake with arguments: \"/Users/vstest/github/corert/buildscripts/..\" Release\r\n-- Configuring done\r\n-- Generating done\r\n-- Build files have been written to: /Users/vstest/github/corert/bin/obj/Native/OSX.x64.Release\r\nExecuting make install -j 9 \r\n[  1%] Built target AsmOffsets\r\n[  2%] Built target jitinterface\r\n[  4%] Built target bootstrapperdll\r\n[  6%] Built target bootstrapper\r\n[  8%] Built target bootstrappercpp\r\n[  9%] Built target System.Private.CoreLib.Native\r\n[ 10%] Building ASM object System.Private.TypeLoader.Native/CMakeFiles/System.Private.TypeLoader.Native.dir/amd64/ConstrainedCallSupportHelpers.S.o\r\n[ 10%] Building ASM object System.Private.TypeLoader.Native/CMakeFiles/System.Private.TypeLoader.Native.dir/amd64/MethodEntrypointStubs.S.o\r\n[ 11%] Building ASM object System.Private.TypeLoader.Native/CMakeFiles/System.Private.TypeLoader.Native.dir/amd64/VTableResolver.S.o\r\n/Users/vstest/github/corert/src/Native/inc/unix/../../Runtime/unix/unixasmmacrosamd64.inc:310:34: /Users/vstest/github/corert/src/Native/inc/unix/../../Runtime/unix/unixasmmacrosamd64.inc:310:34: /Users/vstest/github/corert/src/Native/inc/unix/../../Runtime/unix/unixasmmacrosamd64.inc:310error: :34: unexpected token\r\nerror: error: DEFAULT_FRAME_SAVE_FLAGS = 000000F1h + 00008000h\r\n                                 ^\r\nunexpected token\r\nunexpected token\r\nDEFAULT_FRAME_SAVE_FLAGS = 000000F1h + 00008000h\r\nDEFAULT_FRAME_SAVE_FLAGS = 000000F1h + 00008000h\r\n                                    ^ \r\n                             ^\r\nmake[2]: *** [System.Private.TypeLoader.Native/CMakeFiles/System.Private.TypeLoader.Native.dir/amd64/MethodEntrypointStubs.S.o] Error 1\r\nmake[2]: *** Waiting for unfinished jobs....\r\nmake[2]: *** [System.Private.TypeLoader.Native/CMakeFiles/System.Private.TypeLoader.Native.dir/amd64/VTableResolver.S.o] Error 1\r\nmake[2]: *** [System.Private.TypeLoader.Native/CMakeFiles/System.Private.TypeLoader.Native.dir/amd64/ConstrainedCallSupportHelpers.S.o] Error 1\r\nmake[1]: *** [System.Private.TypeLoader.Native/CMakeFiles/System.Private.TypeLoader.Native.dir/all] Error 2\r\nmake[1]: *** Waiting for unfinished jobs....\r\n[ 12%] Building CXX object Runtime/Portable/CMakeFiles/PortableRuntime.dir/__/__/gc/unix/gcenv.unix.cpp.o\r\n[ 13%] Building CXX object Runtime/Full/CMakeFiles/Runtime.ServerGC.dir/__/__/gc/unix/gcenv.unix.cpp.o\r\n[ 14%] Building ASM object Runtime/Full/CMakeFiles/Runtime.ServerGC.dir/__/amd64/CallDescrWorker.S.o\r\n[ 14%] Building ASM object Runtime/Full/CMakeFiles/Runtime.ServerGC.dir/__/amd64/AllocFast.S.o\r\n[ 14%] Building ASM object Runtime/Full/CMakeFiles/Runtime.ServerGC.dir/__/amd64/CallingConventionConverterHelpers.S.o\r\n[ 15%] Building ASM object Runtime/Full/CMakeFiles/Runtime.ServerGC.dir/__/amd64/ExceptionHandling.S.o\r\n[ 15%] Building ASM object Runtime/Full/CMakeFiles/Runtime.ServerGC.dir/__/amd64/Interlocked.S.o\r\n[ 15%] Building ASM object Runtime/Full/CMakeFiles/Runtime.ServerGC.dir/__/amd64/PInvoke.S.o\r\n/Users/vstest/github/corert/src/Native/Runtime/unix/unixasmmacrosamd64.inc:310:34: /Users/vstest/github/corert/src/Native/Runtime/unix/unixasmmacrosamd64.inc:310:34: error: /Users/vstest/github/corert/src/Native/Runtime/unix/unixasmmacrosamd64.incerror: :310:34: unexpected token\r\nunexpected token\r\nDEFAULT_FRAME_SAVE_FLAGS = 000000F1h + 00008000h\r\nDEFAULT_FRAME_SAVE_FLAGS = 000000F1h + 00008000h\r\n                                 ^ \r\n                          error:       ^\r\nunexpected token\r\nDEFAULT_FRAME_SAVE_FLAGS = 000000F1h + 00008000h\r\n                                 ^\r\n/Users/vstest/github/corert/src/Native/Runtime/unix/unixasmmacrosamd64.inc:310:34: error: unexpected token\r\nDEFAULT_FRAME_SAVE_FLAGS = 000000F1h + 00008000h\r\n                                 ^\r\nmake[2]: *** [Runtime/Full/CMakeFiles/Runtime.ServerGC.dir/__/amd64/Interlocked.S.o] Error 1\r\nmake[2]: *** Waiting for unfinished jobs....\r\nmake[2]: *** [Runtime/Full/CMakeFiles/Runtime.ServerGC.dir/__/amd64/CallingConventionConverterHelpers.S.o] Error 1\r\nmake[2]: *** [Runtime/Full/CMakeFiles/Runtime.ServerGC.dir/__/amd64/CallDescrWorker.S.o] Error 1\r\n/Users/vstest/github/corert/src/Native/Runtime/unix/unixasmmacrosamd64.inc:310:34: error: unexpected token\r\nDEFAULT_FRAME_SAVE_FLAGS = 000000F1h + 00008000h\r\n                                 ^\r\nmake[2]: *** [Runtime/Full/CMakeFiles/Runtime.ServerGC.dir/__/amd64/ExceptionHandling.S.o] Error 1/Users/vstest/github/corert/src/Native/Runtime/amd64/PInvoke.S:31:37: \r\nerror: unknown token in expression\r\n        mov dword ptr [rbx + 0x18], 00008000h\r\n                                    ^\r\n/Users/vstest/github/corert/src/Native/Runtime/unix/unixasmmacrosamd64.inc:310:34: error: unexpected token\r\nDEFAULT_FRAME_SAVE_FLAGS = 000000F1h + 00008000h\r\n                                 ^\r\n[ 16%] Building CXX object Runtime/Full/CMakeFiles/Runtime.dir/__/__/gc/unix/gcenv.unix.cpp.o\r\n<instantiation>:3:24: error: unknown token in expression\r\n    lea rcx, [rsp + 10h]\r\n                       ^\r\n/Users/vstest/github/corert/src/Native/Runtime/amd64/AllocFast.S:73:9: note: while in macro instantiation\r\n        PUSH_COOP_PINVOKE_FRAME rcx\r\n        ^\r\nmake[2]: *** [Runtime/Full/CMakeFiles/Runtime.ServerGC.dir/__/amd64/PInvoke.S.o] Error 1\r\n/Users/vstest/github/corert/src/Native/Runtime/amd64/AllocFast.S:206:28: error: unknown token in expression\r\n        cmp rsi, 07fffffffh\r\n                           ^\r\n<instantiation>:3:24: error: unknown token in expression\r\n    lea rcx, [rsp + 10h]\r\n                       ^\r\n/Users/vstest/github/corert/src/Native/Runtime/amd64/AllocFast.S:289:9: note: while in macro instantiation\r\n        PUSH_COOP_PINVOKE_FRAME rcx\r\n        ^\r\nmake[2]: *** [Runtime/Full/CMakeFiles/Runtime.ServerGC.dir/__/amd64/AllocFast.S.o] Error 1\r\n[ 16%] Building ASM object Runtime/Full/CMakeFiles/Runtime.dir/__/amd64/AllocFast.S.o\r\n[ 16%] Building ASM object Runtime/Full/CMakeFiles/Runtime.dir/__/amd64/CallDescrWorker.S.o\r\n[ 17%] Building ASM object Runtime/Full/CMakeFiles/Runtime.dir/__/amd64/CallingConventionConverterHelpers.S.o\r\n[ 17%] Building ASM object Runtime/Full/CMakeFiles/Runtime.dir/__/amd64/ExceptionHandling.S.o\r\n[ 18%] Building ASM object Runtime/Full/CMakeFiles/Runtime.dir/__/amd64/Interlocked.S.o\r\n[ 18%] Building ASM object Runtime/Full/CMakeFiles/Runtime.dir/__/amd64/PInvoke.S.o\r\n/Users/vstest/github/corert/src/Native/Runtime/unix/unixasmmacrosamd64.inc:310:34: /Users/vstest/github/corert/src/Native/Runtime/unix/unixasmmacrosamd64.inc:310:34: error: error: unexpected token\r\nunexpected token\r\nDEFAULT_FRAME_SAVE_FLAGS = 000000F1h + 00008000h\r\n   DEFAULT_FRAME_SAVE_FLAGS = 000000F1h + 00008000h \r\n                             ^\r\n                                 ^\r\n<instantiation>:3:24: error: unknown token in expression\r\n    lea rcx, [rsp + 10h]\r\n                       ^\r\n/Users/vstest/github/corert/src/Native/Runtime/amd64/AllocFast.S:73:9: note: while in macro instantiation\r\n        PUSH_COOP_PINVOKE_FRAME rcx\r\n        ^\r\n/Users/vstest/github/corert/src/Native/Runtime/unix/unixasmmacrosamd64.inc:310:34: error: unexpected token\r\nDEFAULT_FRAME_SAVE_FLAGS = 000000F1h + 00008000h\r\n                                 ^\r\n/Users/vstest/github/corert/src/Native/Runtime/amd64/AllocFast.S:206:28: error: unknown token in expression\r\n        cmp rsi, 07fffffffh\r\n                           ^\r\nmake[2]: *** [Runtime/Full/CMakeFiles/Runtime.dir/__/amd64/CallDescrWorker.S.o] Error 1\r\nmake[2]: *** Waiting for unfinished jobs....\r\n<instantiation>:3:24: error: unknown token in expression\r\n    lea rcx, [rsp + 10h]\r\n                       ^\r\n/Users/vstest/github/corert/src/Native/Runtime/amd64/AllocFast.S:289:9: note: while in macro instantiation\r\n        PUSH_COOP_PINVOKE_FRAME rcx\r\n        ^\r\nmake[2]: *** [Runtime/Full/CMakeFiles/Runtime.dir/__/amd64/CallingConventionConverterHelpers.S.o] Error 1\r\n/Users/vstest/github/corert/src/Native/Runtime/unix/unixasmmacrosamd64.inc:310:34: /Users/vstest/github/corert/src/Native/Runtime/unix/unixasmmacrosamd64.inc:310:34: error: error: unexpected token\r\nDEFAULT_FRAME_SAVE_FLAGS = 000000F1h + 00008000h\r\nunexpected token\r\n                                 ^\r\nDEFAULT_FRAME_SAVE_FLAGS = 000000F1h + 00008000h\r\n                                 ^\r\nmake[2]: *** [Runtime/Full/CMakeFiles/Runtime.dir/__/amd64/AllocFast.S.o] Error 1\r\nmake[2]: *** [Runtime/Full/CMakeFiles/Runtime.dir/__/amd64/Interlocked.S.o] Error 1\r\nmake[2]: *** [Runtime/Full/CMakeFiles/Runtime.dir/__/amd64/ExceptionHandling.S.o] Error 1\r\n/Users/vstest/github/corert/src/Native/Runtime/unix/unixasmmacrosamd64.inc:310:34: error: unexpected token\r\nDEFAULT_FRAME_SAVE_FLAGS = 000000F1h + 00008000h\r\n                                 ^\r\n/Users/vstest/github/corert/src/Native/Runtime/amd64/PInvoke.S:31:37: error: unknown token in expression\r\n        mov dword ptr [rbx + 0x18], 00008000h\r\n                                    ^\r\nmake[2]: *** [Runtime/Full/CMakeFiles/Runtime.dir/__/amd64/PInvoke.S.o] Error 1\r\n/Users/vstest/github/corert/src/Native/gc/unix/gcenv.unix.cpp:19:10: error: \r\n      non-portable path to file '\"Volatile.h\"'; specified path differs in case\r\n      from file name on disk [-Werror,-Wnonportable-include-path]\r\n#include \"volatile.h\"\r\n         ^~~~~~~~~~~~\r\n         \"Volatile.h\"\r\n/Users/vstest/github/corert/src/Native/gc/unix/gcenv.unix.cpp:19:10: error: \r\n      non-portable path to file '\"Volatile.h\"'; specified path differs in case\r\n      from file name on disk [-Werror,-Wnonportable-include-path]\r\n#include \"volatile.h\"\r\n         ^~~~~~~~~~~~\r\n         \"Volatile.h\"\r\n/Users/vstest/github/corert/src/Native/gc/unix/gcenv.unix.cpp:19:10: error: \r\n      non-portable path to file '\"Volatile.h\"'; specified path differs in case\r\n      from file name on disk [-Werror,-Wnonportable-include-path]\r\n#include \"volatile.h\"\r\n         ^~~~~~~~~~~~\r\n         \"Volatile.h\"\r\n1 error generated.\r\nmake[2]: *** [Runtime/Portable/CMakeFiles/PortableRuntime.dir/__/__/gc/unix/gcenv.unix.cpp.o] Error 1\r\nmake[1]: *** [Runtime/Portable/CMakeFiles/PortableRuntime.dir/all] Error 2\r\n1 error generated.\r\nmake[2]: *** [Runtime/Full/CMakeFiles/Runtime.ServerGC.dir/__/__/gc/unix/gcenv.unix.cpp.o] Error 1\r\nmake[1]: *** [Runtime/Full/CMakeFiles/Runtime.ServerGC.dir/all] Error 2\r\n1 error generated.\r\nmake[2]: *** [Runtime/Full/CMakeFiles/Runtime.dir/__/__/gc/unix/gcenv.unix.cpp.o] Error 1\r\nmake[1]: *** [Runtime/Full/CMakeFiles/Runtime.dir/all] Error 2\r\nmake: *** [all] Error 2\r\nFailed to build corert native components.\r\n```","Url":"https://github.com/dotnet/corert/issues/7607","RelatedDescription":"Closed issue \"build failing on mac os\" (#7607)"},{"Id":"468264724","IsPullRequest":false,"CreatedAt":"2019-07-15T18:11:42","Actor":"cshung","Number":"7619","RawContent":null,"Title":"build failed on clang5.0","State":"open","Body":"On 32 bit architectures, `size_t` is an unsigned 32 bit integer, and therefore the condition can never be true. On `clang5.0`, this becomes a warning and blocks the build.\r\n\r\n```\r\n/corert/src/Native/gc/unix/cgroup.cpp:440:31: error: comparison of constant 9223372032559808512 with expression of type 'size_t' (aka 'unsigned int') is always false [-Werror,-Wtautological-constant-out-of-range-compare]\r\n    if (physical_memory_limit > 0x7FFFFFFF00000000)\r\n        ~~~~~~~~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~~~~~~\r\n1 error generated.\r\n```\r\n\r\nHere is the associated code:\r\n```\r\n    // If there's no memory limit specified on the container this \r\n    // actually returns 0x7FFFFFFFFFFFF000 (2^63-1 rounded down to \r\n    // 4k which is a common page size). So we know we are not\r\n    // running in a memory restricted environment.\r\n    if (physical_memory_limit > 0x7FFFFFFF00000000)\r\n    {\r\n        return 0;\r\n    }\r\n```\r\nAll we have to do is to figure out what would be returned on an unrestricted 32-bit execution environment. I have tried it on a physical arm32 device, without being inside a Docker container, it returned 0 because [`FindHierarchyMount`](https://github.com/dotnet/corert/blob/98cdb7f8ccecdc886775e28448091fa59665025e/src/Native/gc/unix/cgroup.cpp#L169) finds nothing.\r\n\r\nAccording to [this thread](https://unix.stackexchange.com/questions/420906/what-is-the-value-for-the-cgroups-limit-in-bytes-if-the-memory-is-not-restricte), it appears to me that for 32-bits architectures, we should probably check against a different constant, I haven't figured that out yet.","Url":"https://github.com/dotnet/corert/issues/7619","RelatedDescription":"Open issue \"build failed on clang5.0\" (#7619)"},{"Id":"468113200","IsPullRequest":true,"CreatedAt":"2019-07-15T15:16:07","Actor":"MichalStrehovsky","Number":"7618","RawContent":null,"Title":"Adjust IL scanner for generic inlining","State":"closed","Body":"When we turned on generic inlining in RyuJIT, we started inlining things potentially across multiple shared method bodies. There is a pathological case when we may end up inlining a shared instance method on a type that otherwise wasn't allocated in the program - RyuJIT would end up asking questions about things we didn't scan.\r\n\r\nThis is because scanning happens on canonical method bodies, and dictionary dependencies are only investigated when a specific dictionary is added to the graph. If a type wasn't allocated, there's no generic dictionary to look at.\r\n\r\nThis is a conservative fix and comes with a small size on disk regression - about 16 kB on Hello World (0 kB for the \"minimal Hello World with reflection disabled\"), and about 80 kB for ASP.NET.\r\n\r\nI investigated preventing RyuJIT from inlining these methods, but RyuJIT is rather uncooperative when it comes to generic inlining. I think this is why UTC operates on runtime determined types directly rather than `__Canon`.","Url":"https://github.com/dotnet/corert/pull/7618","RelatedDescription":"Closed or merged PR \"Adjust IL scanner for generic inlining\" (#7618)"},{"Id":"467485274","IsPullRequest":true,"CreatedAt":"2019-07-14T04:43:22","Actor":"jkotas","Number":"7613","RawContent":null,"Title":"Add workaround for missing ClearInitLocals CoreLib transform","State":"closed","Body":"Ideally, we would use the same transform as CoreCLR CoreLib. However, integrating the ILLinker package used for that into CoreRT build does not look simple. For now, add a workaround to ilc.","Url":"https://github.com/dotnet/corert/pull/7613","RelatedDescription":"Closed or merged PR \"Add workaround for missing ClearInitLocals CoreLib transform\" (#7613)"},{"Id":"467771900","IsPullRequest":true,"CreatedAt":"2019-07-14T03:05:49","Actor":"Dotnet-GitSync-Bot","Number":"7616","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas","Url":"https://github.com/dotnet/corert/pull/7616","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7616)"},{"Id":"467766531","IsPullRequest":true,"CreatedAt":"2019-07-13T23:19:58","Actor":"MichalStrehovsky","Number":"7615","RawContent":null,"Title":"Normalize instantiations in reflection method body scanner","State":"closed","Body":"Noticed we were hitting asserts compiling Draw2D. We were ending up reflection enabling a hybrid `<object, __Canon>` instantiation.","Url":"https://github.com/dotnet/corert/pull/7615","RelatedDescription":"Closed or merged PR \"Normalize instantiations in reflection method body scanner\" (#7615)"},{"Id":"467507599","IsPullRequest":true,"CreatedAt":"2019-07-13T03:13:00","Actor":"jkotas","Number":"7614","RawContent":null,"Title":"Return HardLimitBytes from GCMemoryInfo.TotalAvailableMemoryBytes (#2â€¦","State":"closed","Body":"â€¦5437)","Url":"https://github.com/dotnet/corert/pull/7614","RelatedDescription":"Closed or merged PR \"Return HardLimitBytes from GCMemoryInfo.TotalAvailableMemoryBytes (#2â€¦\" (#7614)"},{"Id":"467400415","IsPullRequest":true,"CreatedAt":"2019-07-12T17:02:00","Actor":"MichalStrehovsky","Number":"7612","RawContent":null,"Title":"Split out a couple more JitInterface methods","State":"closed","Body":"Went over CorInfoImpl.cs and kicked out a couple more methods that are CoreRT specific. Calling into them in ReadyToRun mode would either crash the compiler or produce wrong code.","Url":"https://github.com/dotnet/corert/pull/7612","RelatedDescription":"Closed or merged PR \"Split out a couple more JitInterface methods\" (#7612)"},{"Id":"467070772","IsPullRequest":true,"CreatedAt":"2019-07-12T10:05:00","Actor":"MichalStrehovsky","Number":"7610","RawContent":null,"Title":"Enable generic inlining","State":"closed","Body":"RyuJIT is capable of some limited generic inlining - we just have to make sure we're resolving tokens in the inlining context.","Url":"https://github.com/dotnet/corert/pull/7610","RelatedDescription":"Closed or merged PR \"Enable generic inlining\" (#7610)"},{"Id":"467152268","IsPullRequest":true,"CreatedAt":"2019-07-11T23:33:25","Actor":"trylek","Number":"7611","RawContent":null,"Title":"Exclude methods dependent on HW intrinsics from R2R compilation","State":"open","Body":"","Url":"https://github.com/dotnet/corert/pull/7611","RelatedDescription":"Open PR \"Exclude methods dependent on HW intrinsics from R2R compilation\" (#7611)"},{"Id":"467053308","IsPullRequest":true,"CreatedAt":"2019-07-11T21:13:03","Actor":"cshung","Number":"7609","RawContent":null,"Title":"Converge to a single copy of volatile.h","State":"closed","Body":"Fixes #7607","Url":"https://github.com/dotnet/corert/pull/7609","RelatedDescription":"Closed or merged PR \"Converge to a single copy of volatile.h\" (#7609)"},{"Id":"467020988","IsPullRequest":true,"CreatedAt":"2019-07-11T20:42:15","Actor":"Dotnet-GitSync-Bot","Number":"7608","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7608","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#7608)"},{"Id":"466031346","IsPullRequest":true,"CreatedAt":"2019-07-11T17:36:21","Actor":"Dotnet-GitSync-Bot","Number":"7606","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7606","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7606)"}],"ResultType":"GitHubIssue"},"SDK-Issues":{"Issues":[{"Id":"470016049","IsPullRequest":false,"CreatedAt":"2019-07-18T22:15:57","Actor":"etbyrd","Number":"3438","RawContent":null,"Title":"Remove .NETCore <3.0 as SupportedTargetFrameworks for WinForms and WPF","State":"open","Body":"The Project System needs a way to know the correct SupportedTargetFrameworks for WinForms and WPF projects so we can display the correct TFM's in the property pages. \r\n\r\nIs it possible that this can be done on the SDK side?\r\n\r\nhttps://github.com/dotnet/project-system/issues/5010\r\n\r\ncc @nguerrera \r\n\r\n","Url":"https://github.com/dotnet/sdk/issues/3438","RelatedDescription":"Open issue \"Remove .NETCore <3.0 as SupportedTargetFrameworks for WinForms and WPF\" (#3438)"},{"Id":"470010193","IsPullRequest":false,"CreatedAt":"2019-07-18T21:58:31","Actor":"ericstj","Number":"3437","RawContent":null,"Title":"ResolveTargetingPackAssets crashes when presented a targeting pack with no matching assets","State":"open","Body":"Build a project as follows:\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp3.0</TargetFramework>\r\n    <RuntimeFrameworkVersion>5.0.0-alpha1.27918.1</RuntimeFrameworkVersion>\r\n  </PropertyGroup>\r\n  \r\n  <ItemGroup>\r\n    <FrameworkReference Update=\"Microsoft.NETCore.App\"\r\n                        TargetingPackVersion=\"5.0.0-alpha1.27918.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\n```\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview7-012512\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.TargetingPackResolution.targets(161,5): error MSB4018: The \"ResolveTargetingPackAssets\" task failed unexpectedly. [D:\\scratch\\nca5\\nca5.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview7-012512\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.TargetingPackResolution.targets(161,5): error MSB4018: System.InvalidOperationException: Sequence contains no matching element [D:\\scratch\\nca5\\nca5.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview7-012512\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.TargetingPackResolution.targets(161,5): error MSB4018:    at System.Linq.ThrowHelper.ThrowNoMatchException() [D:\\scratch\\nca5\\nca5.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview7-012512\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.TargetingPackResolution.targets(161,5): error MSB4018:    at System.Linq.Enumerable.First[TSource](IEnumerable`1 source, Func`2 predicate) [D:\\scratch\\nca5\\nca5.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview7-012512\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.TargetingPackResolution.targets(161,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ResolveTargetingPackAssets.ExecuteCore() in /_/src/Tasks/Microsoft.NET.Build.Tasks/ResolveTargetingPackAssets.cs:line 96 [D:\\scratch\\nca5\\nca5.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview7-012512\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.TargetingPackResolution.targets(161,5): error MSB4018:    at Microsoft.NET.Build.Tasks.TaskBase.Execute() in /_/src/Tasks/Common/TaskBase.cs:line 38 [D:\\scratch\\nca5\\nca5.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview7-012512\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.TargetingPackResolution.targets(161,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute() [D:\\scratch\\nca5\\nca5.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview7-012512\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.TargetingPackResolution.targets(161,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskBuilder.ExecuteInstantiatedTask(ITaskExecutionHost taskExecutionHost, TaskLoggingContext taskLoggingContext, TaskHost taskHost, ItemBucket bucket, TaskExecutionMode howToExecuteTask) [D:\\scratch\\nca5\\nca5.csproj]\r\n```\r\n\r\nThis is happening because the refpack uses `netcoreapp5.0` instead of of `netcoreapp3.0`.  Failure is legitimate but it should be better than a stack trace.","Url":"https://github.com/dotnet/sdk/issues/3437","RelatedDescription":"Open issue \"ResolveTargetingPackAssets crashes when presented a targeting pack with no matching assets\" (#3437)"},{"Id":"469975559","IsPullRequest":true,"CreatedAt":"2019-07-18T20:31:55","Actor":"nugetlurker","Number":"3436","RawContent":null,"Title":"Insert NuGet Build 5.3.0-preview.2.6103 into sdk","State":"open","Body":"Insert NuGet Build 5.3.0-preview.2.6103 into sdk master branch","Url":"https://github.com/dotnet/sdk/pull/3436","RelatedDescription":"Open PR \"Insert NuGet Build 5.3.0-preview.2.6103 into sdk\" (#3436)"},{"Id":"469756109","IsPullRequest":true,"CreatedAt":"2019-07-18T12:59:45","Actor":"dotnet-maestro[bot]","Number":"3435","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c3e20d8c-7bed-4085-8124-08d70655e1d3)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190717.12\r\n- **Date Produced**: 7/18/2019 1:25 AM\r\n- **Commit**: 02e6fc2ff8d962383f538241c899decc0d655a60\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-preview8-27917-12\r\n\r\n[marker]: <> (End:c3e20d8c-7bed-4085-8124-08d70655e1d3)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3435","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/core-setup\" (#3435)"},{"Id":"469731724","IsPullRequest":true,"CreatedAt":"2019-07-18T12:04:38","Actor":"dotnet-maestro[bot]","Number":"3434","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190717.8\r\n- **Date Produced**: 7/17/2019 10:06 PM\r\n- **Commit**: 2359dc4184133defa27c8f3072622270b71b4ecf\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19367.8\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19367.8\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3434","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/arcade\" (#3434)"},{"Id":"469588834","IsPullRequest":false,"CreatedAt":"2019-07-18T06:18:08","Actor":"Nirmal4G","Number":"3432","RawContent":null,"Title":"Append TargetFramework to *OutputPaths only when MultiTargeting","State":"open","Body":"Rleated issues: #844 #550 #1376 (those github found out)\r\n\r\nFor single targeting projects, we don't need to appened the `*OutputPath`s properties with `TargetFramework` since, we are only targeting single framework. This is also the behavior of the old projects before sdks were introduced.\r\n\r\n1. All the large winforms and wpf projects have custom targets that rely on hard coded paths based on the defaults set by the old project files. It'll be easy to migrate those projects if those paths were the same. ðŸ˜Œ\r\n\r\n2. It'll reduce a directory overhead in the directory tree. One less dir to navigate! ðŸ˜Œ\r\n\r\nWe can update the targets to preserve the old behavior that only appends the `TargetFramework` property only when it's multi-targeting.\r\n\r\nI can do a PR if you guys are ok with this!","Url":"https://github.com/dotnet/sdk/issues/3432","RelatedDescription":"Open issue \"Append TargetFramework to *OutputPaths only when MultiTargeting\" (#3432)"},{"Id":"469180602","IsPullRequest":true,"CreatedAt":"2019-07-17T14:48:52","Actor":"dotnet-maestro[bot]","Number":"3431","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c3e20d8c-7bed-4085-8124-08d70655e1d3)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190717.01\r\n- **Date Produced**: 7/17/2019 8:46 AM\r\n- **Commit**: 7cf49f78deaae14948ce59fc6d9266365888f7b6\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-preview8-27917-01\r\n\r\n[marker]: <> (End:c3e20d8c-7bed-4085-8124-08d70655e1d3)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3431","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#3431)"},{"Id":"468375089","IsPullRequest":true,"CreatedAt":"2019-07-17T14:21:35","Actor":"dotnet-maestro[bot]","Number":"3424","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190716.4\r\n- **Date Produced**: 7/16/2019 7:16 PM\r\n- **Commit**: 0dd5e2025f0049c133a8706f40e4463b193e5d17\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19366.4\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19366.4\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3424","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3424)"},{"Id":"467616771","IsPullRequest":true,"CreatedAt":"2019-07-16T20:43:36","Actor":"nguerrera","Number":"3415","RawContent":null,"Title":"Select appropriate VB runtime by default","State":"closed","Body":"Fix #3387 \r\nFix #2793 \r\n\r\nThis comment in the code describes and documents the approach:\r\n\r\n```\r\nBy default, VBRuntime is chosen as follows:\r\n\r\n    .NET Framework:\r\n      Same as classic vbproj. $(FrameworkPathOverride) is passed  as\r\n      /sdkpath to compiler and Microsoft.VisualBasic.dll will be used\r\n      from there even if there is no explicit reference to it. This is\r\n      accomplished by leaving $(VBRuntime) unset.\r\n\r\n    .NET Core 3.0+:\r\n      Locate Microsoft.VisualBasic among references and pass it as\r\n      /vbruntime to compiler.\r\n\r\n    .NET Core < 3.0 or .NET Standard:\r\n      Use embedded VB runtime as there is no Microsoft.VisualBasic.dll\r\n      available that is complete enough to serve as /vbruntime.\r\n\r\n   These defaults can be overridden as follows:\r\n\r\n    $(UseReferencedVBRuntime) == true:\r\n      Use referenced Microsoft.VisualBasic regardless of TFM.\r\n\r\n      This is an escape hatch for a custom Microsoft.VisualBasic reference\r\n      that can work as /vbruntime on a target framework other than .NET Core 3.0+\r\n\r\n    $(VBRuntime) != '':\r\n      Pass it through to compiler unchanged.\r\n```","Url":"https://github.com/dotnet/sdk/pull/3415","RelatedDescription":"Closed or merged PR \"Select appropriate VB runtime by default\" (#3415)"},{"Id":"468791081","IsPullRequest":true,"CreatedAt":"2019-07-16T18:05:10","Actor":"sbomer","Number":"3430","RawContent":null,"Title":"Update stage0 SDK","State":"open","Body":"","Url":"https://github.com/dotnet/sdk/pull/3430","RelatedDescription":"Open PR \"Update stage0 SDK\" (#3430)"},{"Id":"468382089","IsPullRequest":false,"CreatedAt":"2019-07-16T17:49:13","Actor":"tlmii","Number":"3426","RawContent":null,"Title":"Generate runtimeconfig.json with rollForwardOnNoCandidateFx value from csproj?","State":"closed","Body":"Is it possible to specify the value of [rollForwardOnNoCandidateFx ](https://github.com/dotnet/cli/blob/master/Documentation/specs/runtime-configuration-file.md#runtimeoptions-section-runtimeconfigjson)that will be in the output `[AppName].runtimeconfig.json` from the .csproj file (or otherwise within the source code)? Or does it have to be added after the fact?","Url":"https://github.com/dotnet/sdk/issues/3426","RelatedDescription":"Closed issue \"Generate runtimeconfig.json with rollForwardOnNoCandidateFx value from csproj?\" (#3426)"},{"Id":"468379242","IsPullRequest":true,"CreatedAt":"2019-07-16T17:20:35","Actor":"dotnet-maestro[bot]","Number":"3425","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:b0dcab74-ed18-4631-280a-08d690bc5860)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190715.4\r\n- **Date Produced**: 7/15/2019 7:17 PM\r\n- **Commit**: fb27fd4d8a2b67d4333e33d4b898c65171c9f3c1\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19365.4\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19365.4\r\n\r\n[marker]: <> (End:b0dcab74-ed18-4631-280a-08d690bc5860)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3425","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/arcade\" (#3425)"},{"Id":"468632752","IsPullRequest":true,"CreatedAt":"2019-07-16T16:36:04","Actor":"dotnet-maestro[bot]","Number":"3429","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c3e20d8c-7bed-4085-8124-08d70655e1d3)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190715.11\r\n- **Date Produced**: 7/16/2019 6:39 AM\r\n- **Commit**: ad9f7e33fb1a1be7eefb57849e7d71a4f9a488b2\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-preview8-27915-11\r\n\r\n[marker]: <> (End:c3e20d8c-7bed-4085-8124-08d70655e1d3)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3429","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#3429)"},{"Id":"468116152","IsPullRequest":true,"CreatedAt":"2019-07-16T12:44:00","Actor":"dotnet-maestro[bot]","Number":"3423","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c3e20d8c-7bed-4085-8124-08d70655e1d3)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190714.06\r\n- **Date Produced**: 7/15/2019 4:19 AM\r\n- **Commit**: 2bb2dcaeffb1dfeda077354449868ddac254bc3d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-preview8-27914-06\r\n\r\n[marker]: <> (End:c3e20d8c-7bed-4085-8124-08d70655e1d3)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3423","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#3423)"},{"Id":"468408569","IsPullRequest":false,"CreatedAt":"2019-07-16T01:58:08","Actor":"AlseinX","Number":"3428","RawContent":null,"Title":"Will there be a standard way to ship native libraries with packed nuget package?","State":"open","Body":"I believe it widely needed that:\r\n\r\n+ A csproj project could contain native libraries in a proper folder structure for maybe multiple native RIDs.\r\n+ On packing, all of these libraries are included to the nuget packages with a proper folder structure.\r\n+ On publishing, native libraries are copied to the output folder and would be embedded if `PublishSingleFile` is enabled.\r\n+ Managed code could P/Invoke these libraries with the common dll name for all RIDs (like \"abc\" is resolved to \"abc.dll\" on windows and \"libabc.so\" on linux). This must be available on both development and production environment, for native libraries from the project itself, from referenced projects, from nuget packages, and from system library paths. without manually handling the file locations and naming conventions.\r\n+ Hopefully it supports customizing naming conventions with versions, like the ncurses wide-char library version 6 is named \"libncursesw.so.6\" on linux and \"libncursesw6.dll\" on mingw on windows.\r\n\r\nThis could be implemented with manually adding MSBuild configuration and codes for loading. Since it is widely need by native wrapper libraries, there should be a simple standard way provided by the SDK.","Url":"https://github.com/dotnet/sdk/issues/3428","RelatedDescription":"Open issue \"Will there be a standard way to ship native libraries with packed nuget package?\" (#3428)"},{"Id":"468382181","IsPullRequest":true,"CreatedAt":"2019-07-15T23:46:42","Actor":"peterhuene","Number":"3427","RawContent":null,"Title":"Delete output apphost upon failure of the CreateAppHost task.","State":"open","Body":"This commit deletes the output apphost when the `CreateAppHost` task fails from\r\nan exception.\r\n\r\nPartially fixes #2989.","Url":"https://github.com/dotnet/sdk/pull/3427","RelatedDescription":"Open PR \"Delete output apphost upon failure of the CreateAppHost task.\" (#3427)"},{"Id":"468089655","IsPullRequest":true,"CreatedAt":"2019-07-15T13:56:25","Actor":"dotnet-maestro[bot]","Number":"3422","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190714.1\r\n- **Date Produced**: 7/14/2019 1:05 PM\r\n- **Commit**: 0c81c2bbdc49749e9940bc8858ebd16026d51277\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19364.1\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19364.1\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3422","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3422)"},{"Id":"467893273","IsPullRequest":true,"CreatedAt":"2019-07-14T22:47:40","Actor":"drewnoakes","Number":"3421","RawContent":null,"Title":"WIP Remove CheckForDuplicateItemsContinueOnError property","State":"open","Body":"Follows #3399.\r\n\r\nThe `CheckForDuplicateItemsContinueOnError` property was used by WPF projects.\r\n\r\nhttps://github.com/dotnet/wpf/pull/1235 makes WPF use `ContinueOnError` instead, so this temporary property can be removed once things propagate.\r\n\r\nMarked as WIP as merging should be [delayed a few days](https://github.com/dotnet/sdk/pull/3399#discussion_r302977781).","Url":"https://github.com/dotnet/sdk/pull/3421","RelatedDescription":"Open PR \"WIP Remove CheckForDuplicateItemsContinueOnError property\" (#3421)"},{"Id":"467833431","IsPullRequest":true,"CreatedAt":"2019-07-14T14:39:00","Actor":"dotnet-maestro[bot]","Number":"3420","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c3e20d8c-7bed-4085-8124-08d70655e1d3)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190713.09\r\n- **Date Produced**: 7/14/2019 4:25 AM\r\n- **Commit**: 36ad04d936c4613c1b1599b899071d411fe5c9b1\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-preview8-27913-09\r\n\r\n[marker]: <> (End:c3e20d8c-7bed-4085-8124-08d70655e1d3)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3420","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#3420)"},{"Id":"467828256","IsPullRequest":true,"CreatedAt":"2019-07-14T14:20:08","Actor":"dotnet-maestro[bot]","Number":"3419","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190713.1\r\n- **Date Produced**: 7/13/2019 12:59 PM\r\n- **Commit**: 8c94bc75d29cd84e3592e4044100d45a341653f7\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19363.1\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19363.1\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3419","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3419)"},{"Id":"467717297","IsPullRequest":true,"CreatedAt":"2019-07-13T14:41:50","Actor":"dotnet-maestro[bot]","Number":"3418","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c3e20d8c-7bed-4085-8124-08d70655e1d3)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190712.15\r\n- **Date Produced**: 7/13/2019 9:17 AM\r\n- **Commit**: a7d2e0d27b2a6be92b620de7c321a29fe42fca53\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-preview8-27912-15\r\n\r\n[marker]: <> (End:c3e20d8c-7bed-4085-8124-08d70655e1d3)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3418","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#3418)"},{"Id":"467712059","IsPullRequest":true,"CreatedAt":"2019-07-13T14:00:05","Actor":"dotnet-maestro[bot]","Number":"3417","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190712.5\r\n- **Date Produced**: 7/12/2019 10:49 PM\r\n- **Commit**: 15f50ca6a9d0b441c9927421657fb9dc91206cc9\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19362.5\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19362.5\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3417","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3417)"},{"Id":"467642227","IsPullRequest":true,"CreatedAt":"2019-07-13T00:05:14","Actor":"dotnet-bot","Number":"3416","RawContent":null,"Title":"Merge release/3.0.1xx to master","State":"open","Body":"\nThis is an automatically generated pull request from release/3.0.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3416","RelatedDescription":"Open PR \"Merge release/3.0.1xx to master\" (#3416)"},{"Id":"467142910","IsPullRequest":true,"CreatedAt":"2019-07-12T19:42:10","Actor":"elinor-fung","Number":"3411","RawContent":null,"Title":"Update Microsoft.NET.HostModel version","State":"closed","Body":"This is for dotnet/core-setup#7173\r\n\r\nIt is also affecting Preview 7. This is just the change in master.","Url":"https://github.com/dotnet/sdk/pull/3411","RelatedDescription":"Closed or merged PR \"Update Microsoft.NET.HostModel version\" (#3411)"},{"Id":"467159353","IsPullRequest":true,"CreatedAt":"2019-07-12T19:40:27","Actor":"elinor-fung","Number":"3412","RawContent":null,"Title":"Update Microsoft.NET.HostModel version","State":"closed","Body":"This is for dotnet/core-setup#7173\r\n\r\nSame change as #3411, but for Preview 7","Url":"https://github.com/dotnet/sdk/pull/3412","RelatedDescription":"Closed or merged PR \"Update Microsoft.NET.HostModel version\" (#3412)"},{"Id":"467378256","IsPullRequest":true,"CreatedAt":"2019-07-12T14:15:20","Actor":"dotnet-maestro[bot]","Number":"3414","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190711.7\r\n- **Date Produced**: 7/12/2019 2:02 AM\r\n- **Commit**: f1b09644408f45f43f5835786b3e4bdfd2e78141\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19361.7\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19361.7\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3414","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3414)"},{"Id":"467217501","IsPullRequest":true,"CreatedAt":"2019-07-12T04:57:33","Actor":"drewnoakes","Number":"3413","RawContent":null,"Title":"Document testing local builds and remove VS version","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/3413","RelatedDescription":"Closed or merged PR \"Document testing local builds and remove VS version\" (#3413)"},{"Id":"467000319","IsPullRequest":true,"CreatedAt":"2019-07-12T01:34:29","Actor":"nguerrera","Number":"3410","RawContent":null,"Title":"Disable flaky test against bug","State":"closed","Body":"Good news: The test found a product bug (#3409) that it is designed to catch.\r\n\r\nBad news: It can still pass depending on what's in the nuget cache from prior tests. So the change that regressed it slipped through and now we have flaky CI.\r\n\r\nDisabling the test against the bug that it caught for now.","Url":"https://github.com/dotnet/sdk/pull/3410","RelatedDescription":"Closed or merged PR \"Disable flaky test against bug\" (#3410)"},{"Id":"466996372","IsPullRequest":false,"CreatedAt":"2019-07-11T16:36:25","Actor":"nguerrera","Number":"3409","RawContent":null,"Title":"Changing RID to one that hasn't been used before can cause design-time build failure","State":"open","Body":"I believe this regressed with #3394 \r\n\r\nIf you do not have the runtime pack in your nuget cache yet, and you change the RID of your project, the design time build will fail. Unfortunately the test that is specifically designed to test this case of changing RIDs is not reliable because dependening on state of nuget cache (say due to tests that have already run), it may pass even though the bug is present.\r\n\r\nWe need a better approach than just skipping ResolveRuntimePackAssets always in design-time builds as was done before #3394, but we can't have it fail as this will block the nomination that would restore the runtime pack.","Url":"https://github.com/dotnet/sdk/issues/3409","RelatedDescription":"Open issue \"Changing RID to one that hasn't been used before can cause design-time build failure\" (#3409)"},{"Id":"469673628","IsPullRequest":false,"CreatedAt":"2017-03-29T16:32:40","Actor":"mavasani","Number":"3433","RawContent":null,"Title":"Breaking change due to default setting of certain properties","State":"open","Body":"PR https://github.com/dotnet/sdk/pull/511/ added default values for certain build related properties to fix https://github.com/dotnet/roslyn-project-system/issues/437 - indeterminate setting of corresponding check boxes in properties page.\r\n\r\nHowever, this causes breaking issues when moving from old project system to new project system. The C# targets do not set any default for these properties, which means that if my repo on old project system had the following conditional property after importing the common targets, then this condition will evaluate to true for old targets imports, but false for the new SDK imports:\r\n\r\n`<SignAssembly Condition=\"'$(SignAssembly)' == ''\">true</SignAssembly>`\r\n\r\nFor example see [here](https://github.com/dotnet/roslyn-analyzers/blob/master/build/Targets/Analyzers.Settings.targets#L18). This led me to spend half a day investigating IVT failures after porting the analyzers repo to new project system due to the fact that this breaking change silently turned off `/keyfile` command line argument.\r\n\r\nGiven that the above SDK change was only done to satisfy the property pages, we should find a different workaround.\r\n\r\n","Url":"https://github.com/dotnet/sdk/issues/3433","RelatedDescription":"Open issue \"Breaking change due to default setting of certain properties\" (#3433)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"465501070","IsPullRequest":false,"CreatedAt":"2019-07-08T23:25:31","Actor":"terrajobst","Number":"117","RawContent":null,"Title":"System.Text.Json usability study results","State":"open","Body":"We've performed a usability study on the new `System.Text.Json` APIs which will replace JSON.NET as the default JSON experience in .NET Core 3.0:\r\n\r\n* We focused on the primary \"getting started\" scenarios to validate that we picked the right type- and method names.\r\n* We simulated what we believe to be common error cases to validate that our exception messages are understandable and actionable.\r\n* Since we were short on time, we couldn't use the recruiting provided by the UX lab but instead brought in our own developers, which we recruited from the .NET engineering team\r\n\r\nThis has worked out well for us as we were able to get short term feedback which resulted in significant improvements to the overall API shape and usability. In the future, we should do more API focused UX studies ðŸ˜Š\r\n\r\n## Tasks\r\n\r\n| # | Description                            | Code\r\n|:--|:---------------------------------------|:-----\r\n| 1 | Serialize and pretty print             | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario1/Program.cs#L19-L31)\r\n| 2 | Deserialize with trailing comma        | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario2/Program.cs#L19-L25)\r\n| 3 | Deserialize with custom property names | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario3/Program.cs#L30-L45)\r\n| 4 | Read with DOM                          | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario4/Program.cs#L20-L35)\r\n| 5 | Pretty print an existing JSON file     | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario5/Program.cs#L26-L34)\r\n\r\n## Hypotheses\r\n\r\nWe expect developers to...\r\n\r\n| # | Description                                            | Result\r\n|:--|:-------------------------------------------------------|:---------------\r\n| 1 | ...assume the APIs are similar/identical to JSON.NET   |  Validated\r\n| 2 | ...complete tasks 1-4 successfully                     |  Validated\r\n| 3 | ...struggle/unable to complete the task 5, because it requires working with two different components which is very different from JSON.NET |  Invalidated\r\n| 4 | ...not look at documentation for most of their coding as IntelliSense is good enough |  Invalidated\r\n| 5 | ...be happy with the experience of using the API                                     |  Validated\r\n| 6 | ...plan on using `System.Text.Json` for their next JSON task                         |  Partially Validated\r\n\r\n##  Key Observations\r\n\r\n* Everyone completed scenarios #1-#3, 2 didn't complete #4, 6 didn't complete #5\r\n    - The reason was always \"out of time\". Every person who started a scenario successfully finished it.\r\n    - We feel this validates that we picked the right scope for a 60 minute study of people from various backgrounds\r\n* Overall people liked the new API\r\n    - Key value prop for most people was the fact that \"it's now built in\"\r\n    - Very few mentioned perf and the ones that did thought that it probably wouldn't make a difference in their scenarios.\r\n    - Most people said they would prefer `System.Text.Json` for new APIs, but would stick to JSON.NET in code that already uses it.\r\n    - **[Action]** None, this is in line with what we expected.\r\n* Virtually everyone tried to google for sample code in the documentation\r\n    - Everyone found our blog post and online documentation\r\n    - People new to .NET were confused that JSON.NET and `System.Text.Json` weren't the same thing\r\n    - Everyone complained that the current docs are lacking, especially sample code.\r\n    - **[Action]** Docs are work in progress. We plan on shipping with a fully documented API surface and sample code.\r\n* Virtually everyone found the key type relatively quickly\r\n    - Some people were confused when types were static, rather than something that one can new up\r\n    - **[Action]** None. This is by-design as we try to reduce the number of allocations.\r\n* Virtually everyone had trouble selecting the correct method on\r\n  `JsonSerializer`\r\n    - We chose a very complicated naming convention\r\n    - **[Action]** We simplified it by using names that people in the study told us were looking for.\r\n* Most of our error messages were well received because they told people what\r\n  the problem is & how they can fix them.\r\n    - One error message was unclear because we reported an unexpected character when we could have reported that we didn't expect a comment.\r\n    - **[Action]** We've reworded the error message.\r\n    - We had one error message that was generated by a lower layer and provided an action item that doesn't make sense when people receive it when using the higher layer component.\r\n    - **[Action]** We've reworded the error message to be more generic so it makes sense for both kind of consumers.\r\n* Virtually everyone used the new Roslyn completion feature which will also show\r\n  types from namespaces not imported yet.\r\n    - However, virtually nobody realized that they were doing it.\r\n    - This caused confusion when people found other APIs that happen to include Json in them, specifically the old data contract serialization.\r\n    - **[Action]** Talk to the Roslyn IDE team to see if this something more people will run into. This could prove to be especially problematic for technologies that share type names (e.g. `UserControl` in WinForms and WPF) and both are referenced by the project.\r\n* Optional parameters and `async`/`await` are usability cliffs\r\n    - Many were confused by optional parameters and tried to pass them in, even though they didn't have to.\r\n    - **[Action]** Talk to the Roslyn IDE team to see if we can visualize them better in VS.\r\n    - **[Action]** Try to avoid heavy use of optional parameters for mainline APIs.\r\n    - Async is a very steep cliff. People have no idea what to do in their code to make async work. While IntelliSense shows the usage by prefixing it with await, people didn't notice that.\r\n    - **[Action]** Unclear; this is a broader issue.\r\n* Virtually nobody used F1 to get help for APIs\r\n    - *Surprise*. I expected more people to use <kbd>F1</kbd>.\r\n* Virtually everyone used F12 to explore the API (\"metadata view\")\r\n    - *Surprise*. I expected most people to explore the type via the\r\n      IntelliSense completion\r\n* Nobody used Object Browser to explorer the APIs\r\n    - *Surprise*. I expected at least some people to.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/39304.","Url":"https://github.com/dotnet/announcements/issues/117","RelatedDescription":"Open issue \"System.Text.Json usability study results\" (#117)"},{"Id":"465034831","IsPullRequest":false,"CreatedAt":"2019-07-08T03:13:38","Actor":"leecow","Number":"116","RawContent":null,"Title":"Updates to releases.json (.NET Core release metadata)","State":"open","Body":"**The changes described in this issue will be live with the .NET Core July update on 7/9/2019.**\r\n\r\nThe releases.json files (e.g. [2.2 releases.json](https://raw.githubusercontent.com/dotnet/core/master/release-notes/2.2/releases.json)) are comprehensive metadata files which capture details of each .NET Core release. These files, along with the top level [releases-index.json](https://raw.githubusercontent.com/dotnet/core/master/release-notes/releases-index.json), are becoming increasingly important .NET Core release assets. These files, one for each major.minor channel, are relied upon by many to detect when updates for .NET Core are available, discover security update details and other uses.\r\n\r\nChanges are sometimes necessary, and the growing dependencies require that we treat compatibility of the schema with the utmost care. This announcement describes an addition to the releases.json schema.\r\n\r\n## SDK Versions and Visual Studio\r\n\r\nBecause of current .NET Core SDK product construction dependencies, there is a hard link between the Runtime, SDK, toolset (compilers, MSBuild, NuGet, and other components), and Visual Studio. Simplistically, this means that when anything updates, everything updates. The unfortunate result of this linking is that multiple versions of the SDK are released with each monthly update for each supported versions of Visual Studio. For example, the May Update for .NET Core 2.2 included the 2.2.5 runtime, 2.2.107 SDK for Visual Studio 2017 and 2.2.204 for Visual Studio 2019 and yet another pair of SDK versions for .NET Core 2.1. An example of this is the [2.2.5 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.5/2.2.5.md). \r\n\r\nThis is a confusing situation and we are working to mitigate the need to release multiple SDKs with .NET Core 3.0. The need for multiple SDK versions will persist for 2.1 LTS.\r\n\r\n## Adding the SDKS array\r\n\r\nTo appropriately model multiple SDKs per release, we are adding an SDKs array to releases.json, which will contain SDK objects. The top-level SDK object will represent the highest versioned SDK for a given update. Using the previous 2.2.5 update example, SDK 2.2.204 is in the top SDK object as well as duplicated in the SDKS array. All other applicable 2.2* SDK objects are included in the SDKS array. The SDK objects within the array will carry specific Visual Studio compatibility and version inclusion information to provide appropriate context.\r\n\r\nHere is an example of the new array based on the upcoming July update.\r\nAgain, this will be additive and the previous SDK object will include the highest SDK version for the release.\r\n\r\n```json\r\n{\r\n    \"sdk\": {\r\n        \"version\": \"2.2.301\",\r\n        \"version-display\": \"2.2.301\",\r\n        \"runtime-version\": \"2.2.6\",\r\n        \"vs-version\": \"16.1.3\",\r\n        \"vs-support\": \"Visual Studio 2019 (v16.1)\",\r\n        \"csharp-version\": \"7.3\",\r\n        \"fsharp-version\": \"4.5\",\r\n        \"vb-version\": null,\r\n        \"files\": []\r\n    },\r\n    \"sdks\": [\r\n        {\r\n            \"version\": \"2.2.301\",\r\n            \"version-display\": \"2.2.301\",\r\n            \"runtime-version\": \"2.2.6\",\r\n            \"vs-version\": \"16.1.3\",\r\n            \"vs-support\": \"Visual Studio 2019 (v16.1)\",\r\n            \"csharp-version\": \"7.3\",\r\n            \"fsharp-version\": \"4.5\",\r\n            \"vb-version\": null,\r\n            \"files\": []\r\n        },\r\n        {\r\n          \"version\": \"2.2.205\",\r\n          \"version-display\": \"2.2.205\",\r\n          \"runtime-version\": \"2.2.6\",\r\n          \"vs-version\": \"16.0.5\",\r\n          \"vs-support\": \"Visual Studio 2019 (v16.0)\",\r\n          \"csharp-version\": \"7.3\",\r\n          \"fsharp-version\": \"4.5\",\r\n          \"vb-version\": null,\r\n          \"files\": []\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\n## vs-version and the Runtime\r\n\r\nThe same version of the runtime is included in multiple versions of Visual Studio. To account for this, the vs-version field is being updated to a comma-delimited string. The string will represent all versions of Visual Studio which first include the particular .NET Core update. Again, an example from the upcoming July Update.\r\n\r\n```json\r\n\"runtime\": {\r\n        \"version\": \"2.2.6\",\r\n        \"version-display\": \"2.2.6\",\r\n        \"vs-version\": \"15.9.13, 16.1.3, 16.2.0\",\r\n```\r\n\r\nThe same `vs-versions` changes will be seen in the `aspnetcore-runtime` object.\r\n\r\n## Future Enhancements\r\n\r\nThere are other improvements to the schema which have been suggested by the community which we are evaluating. Generally, theses enhancements are additive and should not represent compatibility compromises for existing parsers and similar announcements will be published ahead of any changes.\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/116","RelatedDescription":"Open issue \"Updates to releases.json (.NET Core release metadata)\" (#116)"},{"Id":"444065225","IsPullRequest":false,"CreatedAt":"2019-05-14T18:38:23","Actor":"TaraOverfield","Number":"114","RawContent":null,"Title":"May 2019 .NET Updates","State":"open","Body":"# May 2019 .NET Updates\r\n\r\nThe following .NET updates were released in May 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.16 and .NET Core SDK 1.1.13( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.16/1.0.16.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.13/1.1.13.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.11 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.11/2.1.11.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.5 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.5/2.2.5.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2727](https://github.com/dotnet/core/issues/2727)\r\n\r\n## .NET Framework\r\n* [.NET Framework May 2019 Security and Quality Rollup - May 14, 2019](https://devblogs.microsoft.com/dotnet/net-framework-may-2019-security-and-quality-rollup/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/114","RelatedDescription":"Open issue \"May 2019 .NET Updates\" (#114)"},{"Id":"444027703","IsPullRequest":false,"CreatedAt":"2019-05-14T17:06:24","Actor":"blowdart","Number":"113","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and ASP.NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core and ASP.NET Core improperly handle web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core and ASP.NET Core application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core and ASP.NET Core web applications handle web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37651\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Private.Uri package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0, 4.3.1 | 4.3.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Nemanja Mijailovic](https://mijailovic.net/)\r\n\r\n### External Links\r\n\r\n[CVE-2019-0981](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0981)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/113","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability\" (#113)"},{"Id":"444027025","IsPullRequest":false,"CreatedAt":"2019-05-14T17:04:45","Actor":"blowdart","Number":"112","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and ASP.NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core and ASP.NET Core improperly handle web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core and ASP.NET Core application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core and ASP.NET Core web applications handle web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37650\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Private.Uri package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0, 4.3.1 | 4.3.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Nemanja Mijailovic](https://mijailovic.net/)\r\n\r\n### External Links\r\n\r\n[CVE-2019-0980](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0980)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/112","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability\" (#112)"},{"Id":"444026277","IsPullRequest":false,"CreatedAt":"2019-05-14T17:02:57","Actor":"blowdart","Number":"111","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core improperly process RegEx strings. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET application.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handle RegEx string processing.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37649\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Text.RegularExpressions package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Text.RegularExpressions.dll | 4.3.0 | 4.3.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0820](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0820)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/111","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability\" (#111)"},{"Id":"435015242","IsPullRequest":false,"CreatedAt":"2019-04-19T01:16:10","Actor":"MichaelSimons","Number":"110","RawContent":null,"Title":"New images for .NET Framework 4.8","State":"open","Body":"# New images for .NET Framework 4.8\r\n\r\nNew images have been released with support for [.NET Framework 4.8 runtime and SDK](https://devblogs.microsoft.com/dotnet/announcing-the-net-framework-4-8/).\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#271](https://github.com/Microsoft/dotnet-framework-docker/issues/271)\r\n\r\n## Details\r\n* Pull request: #270\r\n\r\nYou can access these new images with the following tags:\r\n* `mcr.microsoft.com/dotnet/framework/runtime:4.8`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.8`\r\n\r\nIn addition, the `latest` tag has been updated to refer to these new 4.8 images.\r\n\r\nCheck out the readme files for more information on the latest tags:\r\n* [Runtime](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.runtime.md)\r\n* [SDK](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.sdk.md)\r\n\r\nThe [3.5 SDK](https://github.com/Microsoft/dotnet-framework-docker/tree/master/3.5/sdk) images are intended to always contain the latest .NET Framework SDK and have also been updated to use the 4.8 SDK.","Url":"https://github.com/dotnet/announcements/issues/110","RelatedDescription":"Open issue \"New images for .NET Framework 4.8\" (#110)"},{"Id":"433297298","IsPullRequest":false,"CreatedAt":"2019-04-15T13:57:07","Actor":"MichaelSimons","Number":"109","RawContent":null,"Title":".NET Framework SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Framework SDK container images now contain the Visual Studio 2019 toolset\r\n.NET Framework SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add additional tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Framework SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Framework SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#269](https://github.com/Microsoft/dotnet-framework-docker/issues/269)\r\n\r\n## Details\r\nVisual Studio 2019 was released on April 2, 2019. We updated the .NET Framework SDK container images, on the same day, to include a new version of the .NET Framework SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag (e.g. mcr.microsoft.com/dotnet/framework/sdk:4.7.2-20190312-windowsservercore-ltsc2019).\r\n\r\nRelated pull request: [#252](https://github.com/Microsoft/dotnet-framework-docker/pull/252)","Url":"https://github.com/dotnet/announcements/issues/109","RelatedDescription":"Open issue \".NET Framework SDK container images now contain the Visual Studio 2019 toolset\" (#109)"},{"Id":"432735158","IsPullRequest":false,"CreatedAt":"2019-04-12T20:35:55","Actor":"KathleenDollard","Number":"108","RawContent":null,"Title":".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017","State":"open","Body":"# .NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\r\n\r\n.NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017. For example, 2.2.203 and 2.1.603 cause failures in Visual Studio 2017. To work on projects in Visual Studio 2017, use .NET Core SDK 2.2.1nn and 2.1.5nn, such as 2.2.106 and 2.1.506. You can install any combination of these SDKs side by side.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3124](https://github.com/dotnet/sdk/issues/3124)\r\n\r\n## Details\r\n\r\nYou can find the SDKs on you machine using the following at a command prompt:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2. Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nIf you downloaded the .NET Core SDK 2.2 between April 2 and April 12, 2019, the main [.NET downloads page](https://dotnet.microsoft.com/download/) included only 2.2.2nn. Starting April 12th, a new button marked \"Compatible with Visual Studio 2017\" is provided to target 2.2.1nn. If you downloaded 2.2 prior to this date, and you use Visual Studio 2017, install the compatible version.\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nThis problem most often occurs because you manually uninstall the 2.1.5nn version. Simply reinstall it from the [.NET Core 2.1 downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n## More information\r\n\r\nHere is the draft of an article we are preparing for .NET Core documentation:\r\n\r\n---\r\n\r\n## Solving Problems with .NET Core SDK Selection in Visual Studio\r\n\r\nYou may have .NET Core SDKs on your machine and still have problems with Visual Studio finding an appropriate one. This article explains why this happens and how you can fix your installation.\r\n\r\nWhen Visual Studio can't find an appropriate version of the .NET Core SDK, you'll receive an error message. This may appear in the Error pane as NETSDK1045:\r\n\r\n\"The current .NET SDK does not support targeting .NET Core 2...\"\r\n\r\nYou can check what .NET Core SDKs you have on your machine with the following command:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\nUnless you have a global.json file, when you use `dotnet` from the command line, the latest .NET Core SDK is used.\r\n\r\n> [TIP!] \r\n> Open a command prompt and try to build with `dotnet build`. If the command line build works, but Visual Studio doesn't suggestions in this article may help.\r\n\r\nThe last two digits of the .NET Core SDK version numbers are in the format are a patch number, which is represented by `nn` in this article because we will continue to service them to include the latest runtimes. To find out more, vist the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\n## Fixes for Common Problems\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2â€¦ Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.2.1nn. As an example, 2.2.106 would be a valid entry.\r\n\r\nIf you downloaded the .NET Core SDK 2.2 after April 2, 2019, version 2.2.2nn (such as 2.2.203) is listed first and is the highest version available. However, Visual Studio 2017 requires 2.2.1nn (such as 2.2.106). .NET Core SDK 2.2.2nn works with Visual Studio 2019. Visual Studio 2017 and Visual Studio 2019 can be installed side by side, but this requires both .NET Core SDK 2.2.1nn and .NET Core SDK 2.2.2nn to develop .NET Core 2.2 applications.\r\n\r\nTo download .NET Core SDK 2.2.2nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.1.5nn. As an example, 2.1.505 would be a valid entry. \r\n\r\nThis problem occurs of you manually uninstall the 2.1.5nn version.\r\n\r\nThe Visual Studio 2019 installation will not remove this file and Visual Studio 2017 will continue to work side by side.\r\n\r\nTo reinstall .NET Core SDK 2.1.5nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n### Visual Studio 2019 can't target .NET Core 3.0 Preview\r\n\r\nIf you receive this error message in Visual Studio 2019:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 3.0.100-preview... As an example, SDK 3.0.100-preview3-010431 would be a valid entry.\r\n\r\nTo install .NET Core SDK 3.0.1nn preview, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/3.0).\r\n\r\nIn Visual Studio, go to `Tools\\Options\\Projects and Solutions\\.NET Core` and check the box `Use Previews of the .NET Core SDK`.\r\n\r\n> [NOTE!]\r\n> This option will be moving to `Tools\\Options\\Environment` and renamed `Preview Features` in Visual Studio 2019 version 16.1 Preview 2.\r\n\r\nIf you are targeting .NET Core 3.0 preview, the [C# language version will be C# 8.0 Preview by default](https://docs.microsoft.com/en-us/visualstudio/releases/2019/release-notes#csharp-defaults) allowing you to use new C# features.\r\n\r\n## Understand the relationship between .NET Core SDKs and Visual Studio build tools\r\n\r\nVisual Studio has its own copies of tools like MSBuild, NuGet and the compilers. If you install the .NET Core workload, it also installs the .NET Core SDK which has versions of these tools and provides tasks and targets. These two versions are built from the same repositories, but target .NET Framework and .NET Core respectively. \r\n\r\nWhen you build a .NET Core project in Visual Studio, it uses Visual Studio's copy of MSBuild, but the tasks and targets are supplied from the selected version of the .NET Core SDK. \r\n\r\nWhen you upgrade the .NET Core SDK, you get new tasks and targets. These new tasks and targets may contain features that are not supported by older versions of MSBuild. Like all of the .NET Core SDK, MSBuild is backwards compatible. It is not forwards compatible.\r\n\r\nThis generally works well, but requires a guarantee that the tasks and targets work with the MSBuild version. To ensure this, each .NET Core SDK indicates an MSBuild version range that is used by Visual Studio to determine compatibility. Versions of the .NET Core SDK that have a higher MSBuild identifier than expected are ignored by Visual Studio. In the normal case, this simply means you use the tasks and targets that were installed with your version of Visual Studio.\r\n\r\nBecause of this, you may have many versions of the .NET Core SDK on your machine and Visual Studio still fail to find one it considers appropriate. This is compounded by a poor error message, which we cannot fully correct because it is from the old version of the .NET Core SDK on your machine. Confusion is also compounded by a complex non-linear release matrix that makes it difficult to predict the right .NET Core SDK to select. We are working to improve all this. \r\n\r\n## The Visual Studio / .NET Core SDK support matrix\r\n\r\nThe last two digits of the .NET Core SDK version number are a patch number, which are represented by a `nn` in this table. You can learn more about .NET Core SDK and .NET Core Runtime versioning at the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\nThe following table shows which Visual Studio versions and .NET Core SDKs are compatible and how they are acquired if you are working with Visual Studio. \r\n\r\n| .NET Core SDK | .NET Core Runtime | Compatible Visual Studio | MSBuild | Notes                                     |\r\n|---------------|-------------------|--------------------------|---------|-------------------------------------------|\r\n| 2.1.5nn       | 2.1               | 2017                     | 15      | Installed as part of VS 2017 version 15.9 |\r\n| 2.1.6nn       | 2.1               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 2.2.1nn       | 2.2               | 2017                     | 15      | Installed manually                        |\r\n| 2.2.2nn       | 2.2               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 3.0.1nn       | 3.0 (Preview)     | 2019                     | 16      | Installed manually                        |\r\n\r\nVisual Studio 2017 cannot work with .NET Core SDK 2.1.6nn or 2.2.2nn.\r\n\r\nTo find out more about removing older versions of the .NET Core Runtime and .NET Core SDK, visit the [How to remove the .NET Core Runtime and SDK page](https://docs.microsoft.com/en-us/dotnet/core/versions/remove-runtime-sdk-versions?tabs=macos).\r\n\r\nTo download the .NET Core SDK, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core).","Url":"https://github.com/dotnet/announcements/issues/108","RelatedDescription":"Open issue \".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\" (#108)"},{"Id":"432081093","IsPullRequest":false,"CreatedAt":"2019-04-11T15:16:43","Actor":"KathleenDollard","Number":"107","RawContent":null,"Title":"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below","State":"open","Body":"# Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\r\n\r\n.NET Core 3 takes the next step in the .NET Core tool strategy with local tools. As part of this process, starting in Preview 4 DotNetCliToolReference tools will be restricted to targeting .NET Core 2.2 and below. DotNetCliToolReference tools can be used in projects targeting .NET Core 3.0, but the tools themselves should target .NET Core 2.2 or below.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3115](https://github.com/dotnet/sdk/issues/3115)\r\n\r\n## Details\r\n\r\nThe suggested approach going forward is to to use [.NET Core Local Tools](https://aka.ms/local-tools) when you want a tool that is specific to a project or repository. At the same time we are removing the need to access local tools by the verbose `dotnet tool run <toolname>` that was present in earlier previews. You can now access local tools via `dotnet <toolname>`.\r\n\r\nDotNetCliToolReference tools have a flaw in how their dependencies are restored which can create [difficult to diagnose bugs when running these tools](https://github.com/NuGet/Home/issues/5067). This issue would occur much more frequently if targeting .NET Core 3.0 was allowed. Restricting tools to target only .NET Core 2.2 and below means existing scenarios to continue to work (as well as they previously did), regardless of the framework version targeted by the project or the current .NET Core SDK. \r\n\r\nThe new .NET Core tool strategy avoids this flaw in restore strategy and offers other benefits, like the ability to author one type of tool and install it in different ways depending on project and user needs.\r\n\r\nWe look forward to your feedback on .NET Core Local Tools, and on challenges you face moving away from DotNetCliToolReference tools. \r\n\r\n[dotnet/sdk #3057](https://github.com/dotnet/sdk/pull/3057)","Url":"https://github.com/dotnet/announcements/issues/107","RelatedDescription":"Open issue \"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\" (#107)"},{"Id":"431012407","IsPullRequest":false,"CreatedAt":"2019-04-09T14:51:18","Actor":"MichaelSimons","Number":"106","RawContent":null,"Title":".NET Core SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Core SDK container images now contain the Visual Studio 2019 toolset\r\n\r\n.NET Core SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add *additional* tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Core SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Core SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1042](https://github.com/dotnet/dotnet-docker/issues/1042)\r\n\r\n## Details\r\n\r\n[Visual Studio 2019](https://devblogs.microsoft.com/visualstudio/visual-studio-2019-code-faster-work-smarter-create-the-future/) was released on April 2, 2019. We updated the .NET Core SDK container images, on the same day, to include a new version of the .NET Core SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag:\r\n\r\n* 2.1: `mcr.microsoft.com/dotnet/core/sdk:2.1.505`\r\n* 2.2: `mcr.microsoft.com/dotnet/core/sdk:2.2.105`\r\n\r\nDetails:\r\n\r\n* [dotnet/dotnet-docker #1029](https://github.com/dotnet/dotnet-docker/pull/1029)\r\n* [2.1 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.602-SDK/2.1.602-SDK.md)\r\n* [2.2 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.202-SDK/2.2.202-SDK.md)\r\n\r\n## Known Breaking Changes for SDK images (VS 2017 to VS 2019 upgrade)\r\n\r\nThe following issues and breaks have been discovered.\r\n \r\n### Test Log File Name Change\r\n\r\nA change was introduced to the `dotnet test` command when a user-defined log file name is specified.  In the previous version the resulting log file would be named exactly as specified.  In the current version, the log file is named with a timestamp suffix automatically added to the user-defined name.  \r\n\r\nDetails:\r\n* [Microsoft/vstest #1603](https://github.com/Microsoft/vstest/issues/1603) \r\n* [Microsoft/vstest#1876](https://github.com/Microsoft/vstest/issues/1876)","Url":"https://github.com/dotnet/announcements/issues/106","RelatedDescription":"Open issue \".NET Core SDK container images now contain the Visual Studio 2019 toolset\" (#106)"},{"Id":"431003701","IsPullRequest":false,"CreatedAt":"2019-04-09T14:35:39","Actor":"MichaelSimons","Number":"105","RawContent":null,"Title":"Windows Server, version 1709 no longer Supported by .NET Framework","State":"open","Body":"# Windows Server, version 1709 no longer Supported by .NET Framework\r\n\r\nWindows Server, version 1709 is no longer supported. As a result, this version of Windows is no longer supported by the .NET Team and we will no longer produce .NET Framework container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Framework Docker images](https://hub.docker.com/_/microsoft-dotnet-framework)\r\n* [.NET Framework Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-framework)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-framework-docker #259](https://github.com/Microsoft/dotnet-framework-docker/issues/259)\r\n\r\n## Details\r\n\r\nDocker tags that contain `windowsservercore-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Windows Server and .NET Framework.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA â€œmulti-arch tagsâ€œ), such as `4.7.1`, and  `4.7.2`. These are tags that are supported on multiple operating systems and versions, and do  not contain the operating system in them. As a result of no longer producing new images for Windows Server, version 1709, manifest tags no longer include entries for Windows 10, version 1709, and Windows Server,version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.17134-based image is incompatible with a 10.0.16299 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Windows Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Windows Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/framework/runtime:4.7.2-windowsservercore-1709` or `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-windowsservercore-1709`.","Url":"https://github.com/dotnet/announcements/issues/105","RelatedDescription":"Open issue \"Windows Server, version 1709 no longer Supported by .NET Framework\" (#105)"},{"Id":"430998341","IsPullRequest":false,"CreatedAt":"2019-04-09T14:25:57","Actor":"MichaelSimons","Number":"104","RawContent":null,"Title":"Nano Server 2016 and 1709 no longer Supported by .NET Core","State":"open","Body":"# Nano Server 2016 and 1709 no longer Supported by .NET Core\r\n\r\nNano Server 2016 and Nano Server, version 1709 are no longer supported. As a result, these versions of Windows are no longer supported by the .NET Team and we will no longer produce .NET Core container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Core Docker images](https://hub.docker.com/_/microsoft-dotnet-core)\r\n* [.NET Core Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-core)\r\n* [Products Reaching End of Support for 2018](https://support.microsoft.com/en-us/help/4043450/products-reaching-end-of-support-for-2018)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\nWe previously announced Nano Server 2016 going out of support in [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/). That post is still accurate.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1041](https://github.com/dotnet/dotnet-docker/issues/1041)\r\n\r\n## Details\r\n\r\nDocker tags that contain `nanoserver-sac2016` and `nanoserver-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Nano Server and .NET Core.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA â€œmulti-arch tagsâ€œ), such as `2.1`, `2.1-sdk`, `2.2.1-runtime`. These are tags that are supported on multiple operating systems, and do not contain the operating system in them. As a result of no longer producing new images for Nano Server 2016 and Nano Server, version 1709, manifest tags no longer include entries for Nano Server 2016, Windows Server 2016, Windows 10, version 1607, Windows 10, version 1709, and Windows Server, version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.16299-based image is incompatible with a 10.0.14393 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Nano Server 2016 or Nano Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Nano Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-sac2016` or `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-1709`.\r\n\r\n### Nano Server Support\r\n\r\n.NET Core is supported on Nano Server, version 1803 and later. \r\n\r\n.NET Core 2.x and 3.0 images are available for all supported versions of Nano Server, version 1803 and later. This means that 2.x and 3.0 manifest tags can be used on Windows 10, version 1803+, and Windows Server, version 1803+. You can also use non-manifest tags for those versions, too, such as `2.2-nanoserver-1809`.\r\n\r\n.NET Core 1.x images are available for Nano Server, version 1809 and later. This means that 1.x manifest tags can be used on Windows 10, version 1809+, Windows Server, version 1809+ and Windows Server 2019. You can also use non-manifest tags for those versions, too, such as `1.1-nanoserver-1809` tag.","Url":"https://github.com/dotnet/announcements/issues/104","RelatedDescription":"Open issue \"Nano Server 2016 and 1709 no longer Supported by .NET Core\" (#104)"},{"Id":"420117627","IsPullRequest":false,"CreatedAt":"2019-03-12T17:35:16","Actor":"vivmishra","Number":"103","RawContent":null,"Title":"March 2019 .NET Updates","State":"open","Body":"# March 2019 .NET Updates\r\n\r\nThe following .NET updates were released in March 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework March 2019 Update - March 19, 2019](https://devblogs.microsoft.com/dotnet/net-framework-march-2019-update/)\r\n* [.NET Framework April 2, 2019 Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - April 2, 2019](https://devblogs.microsoft.com/dotnet/net-framework-april-2-2019-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.15 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.15/1.0.15.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.12/1.1.12.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.9 and .NET Core SDK 2.1.505 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.9/2.1.9.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.3 and .NET Core SDK 2.2.105 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.3/2.2.3.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2432](https://github.com/dotnet/core/issues/2432)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/103","RelatedDescription":"Open issue \"March 2019 .NET Updates\" (#103)"},{"Id":"415363751","IsPullRequest":false,"CreatedAt":"2019-02-27T22:49:51","Actor":"leecow","Number":"102","RawContent":null,"Title":"SDK Installers will remove previous patch versions","State":"open","Body":"The SDK Installers for Windows will upgrade patch versions in place within the same feature band. This will reduce the number of SDKs that are installed on programmer machines.\r\n\r\nFeature bands of the SDK are defined like 3.0.1nn. [Find out more about SDK version numbers](https://docs.microsoft.com/dotnet/core/versions/#versioning-details).\r\n\r\nThis means when .NET Core SDK 3.0.101 becomes available and is installed, .NET Core SDK 3.0.100 will be removed from the machine if it exists. When .NET Core SDK 3.0.200 becomes available and is installed on the same machine, .NET Core SDK versions like 3.0.101 will not be removed but stay side by side with 3.0.200.\r\n\r\nThis approach supports use of `global.json` which will roll forward across patch versions, but not feature bands of the SDK. Thus, upgrading via the SDK installer will not result in errors due to a missing SDK. Feature bands also align with side by side Visual Studio installations for those users that install SDKs for Visual Studio use. For example, Visual Studio 15.9 uses .NET Core SDK 2.2.500 but does not support .NET Core SDK 2.2.600.\r\n\r\nFind out how to [remove other .NET Core SDK versions here.](https://docs.microsoft.com/dotnet/core/versions/remove-runtime-sdk-versions).","Url":"https://github.com/dotnet/announcements/issues/102","RelatedDescription":"Open issue \"SDK Installers will remove previous patch versions\" (#102)"},{"Id":"410971363","IsPullRequest":false,"CreatedAt":"2019-02-15T22:24:40","Actor":"richlander","Number":"101","RawContent":null,"Title":"Publishing .NET Core images to Microsoft Container Registry (MCR)","State":"open","Body":"# Publishing .NET Core images to Microsoft Container Registry (MCR)\r\n\r\nMicrosoft teams are now publishing container images to the [Microsoft Container Registry](https://azure.microsoft.com/en-us/blog/microsoft-syndicates-container-catalog/). There are two primary reasons for this change:\r\n\r\n* Syndicate Microsoft-provided container images to multiple registries, like Docker Hub and Red Hat.\r\n* Use Microsoft Azure as a global CDN for delivering Microsoft-provided container images.\r\n\r\nYou will use and see MCR as a storage back-end for Microsoft images. The primary way you learn about Microsoft container images and tags will be through a registry, which for most users will continue to be Docker Hub. Most of the experience you've had browsing for .NET Core container images will continue unchanged with this new model. The Docker Hub URLs you've used for Microsoft repos will continue to work, and forward to updated locations on Docker Hub. Existing Docker Hub will images will be maintained as-is.\r\n\r\nSee [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/) for the most updated information on our use of MCR.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #935](https://github.com/dotnet/dotnet-docker/issues/935)\r\n\r\n## Starting with .NET Core nightly repo\r\n\r\nOn the .NET team, we started our [transition to MCR](https://github.com/dotnet/dotnet-docker/issues/745) with the .NET Core \"nightly\" repo. [dotnet-nightly](dockerhub.com/r/microsoft/dotnet-nightly) is now hosted on MCR and syndicated to Docker Hub. We started with the nightly repo in order to discover and fix any challenges we found with this new model before we move our higher-traffic primary container repository.\r\n\r\nWe will start publishing [dotnet](dockerhub.com/r/microsoft/dotnet) to MCR a bit later, in either February or March. This issue will be updated when that happens.\r\n\r\n## Repo Split\r\n\r\nThe [.NET Core repo](https://hub.docker.com/r/microsoft/dotnet) currently includes 4 major categories of tags: \r\n\r\n* `sdk`\r\n* `aspnetcore-runtime`\r\n* `runtime` \r\n* `runtime-deps`\r\n\r\nProviding all of the tags in one place has helped with discoverability but made for a repo with an enormous README that can be challenging to navigate and consume. It is large enough that we exceeded Docker Hub README limits and had to artificially make it smaller.\r\n\r\nGoing forward, we will provide a repo for each of the tag categories listed above. We'll also provide a \"product repo\" that will hierarchicaly group all of our repos together. This will satisfy discoverability needs so that it will be easy to find the tags you want.\r\n\r\nYou can already see this experience with [microsoft-dotnet-core-nightly](https://hub.docker.com/_/microsoft-dotnet-core-nightly). There are now multiple repos for our nightly builds:\r\n\r\n* [.NET Core Nightly product repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly)\r\n* [.NET Core SDK Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-sdk/)\r\n* [.NET Core ASP.NET Core Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-aspnet/)\r\n* [.NET Core Runtime Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime/)\r\n* [.NET Core Runtime-deps Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime-deps/)\r\n\r\nThe same split will exist for the non-nightly stable repo (currently hosted at  [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet)) when we start publishing it to MCR and syndicating it back to DockerHub.\r\n\r\n## Changes to registry URL\r\n\r\nThe biggest change is that your Dockerfiles need to be updated to point to the MCR registry in order get access to new .NET Core container tags. The same change is required for scripts or human operations that pull images via `docker pull`.\r\n\r\nThe following example shows the registry path, repo and tag for the .NET Core 2.2 \"Nightly\" SDK on MCR:\r\n\r\n```console\r\nmcr.microsoft.com/dotnet/core-nightly/sdk:2.2\r\n```\r\n\r\nAs comparison, the following repo and tag have been used to date for the .NET Core 2.2 \"Nightly\" SDK on Docker Hub:\r\n\r\n```console\r\nmicrosoft/dotnet-nightly:2.2-sdk\r\n```\r\n\r\nThe new repo URL is provided at each of the news repos. For example, the new .NET Core SDK \"nightly\" repo provides a box on the right where you can copy and paste the correct MCR-based repo syntax that you can use for `docker pull` or in `FROM` statements in your Dockerfiles.\r\n\r\n![image](https://user-images.githubusercontent.com/2608468/52811702-95c5eb80-304a-11e9-8de8-e6ea1f4b4d75.png)\r\n\r\n## Servicing existing Docker Hub tags\r\n\r\nWe will continue to service existing non-version-specific or floating tags on Docker Hub while the associated .NET Core version is supported. For example the `microsoft/dotnet:2.1-sdk` tag is a floating tag that will continue to be serviced for the lifetime of .NET Core 2.1. You can continue using floating tags without issue.\r\n\r\nIf you use non-floating tags, like `microsoft/dotnet:2.1.504-sdk-alpine`, then you will need to update your Dockerfile to use a new non-floating tag. No new non-floating tags will be published to `microsoft/dotnet` and `microsoft/dotnet-nightly` after we fully transition to MCR.\r\n\r\n.NET Core 3.0 Preview 3 and later will only be made available on MCR.\r\n\r\n## Microsoft is a Verified Publisher\r\n\r\nUntil now, Microsoft-provided container images were considered \"community images\". As part of this change, we are re-classifying Microsoft as a \"verified publisher\" on Docker Hub. This designation should make it clearer that .NET and other Microsoft-provided images are coming from a verified source. There clearly was that expectation previously, but Docker is now making that clearer in the Docker Hub pages they host for Microsoft.\r\n\r\nWe will provide official vulnerability scanning Microsoft-provided images as a second phase of this transition.","Url":"https://github.com/dotnet/announcements/issues/101","RelatedDescription":"Open issue \"Publishing .NET Core images to Microsoft Container Registry (MCR)\" (#101)"},{"Id":"410784442","IsPullRequest":false,"CreatedAt":"2019-02-15T14:06:29","Actor":"TaraOverfield","Number":"100","RawContent":null,"Title":"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809","State":"open","Body":"<strong><em>Final Update 2/19/19 @1:30 PM (PST)</em></strong><em>: This </em><em>advisory is now resolved with no action needed from Microsoft Customers. The issue was not applicable to any valid or supported configuration. There is no consequence for .NET 4.8 Preview customers. </em>\r\n\r\n<em>We strive to share timely information to protect our customerâ€™s productivity, in this case, our finding was thankfully of no consequence for customers on supported configurations.</em>\r\n\r\n<del><em><strong>Update 2/15/19 @3:35 PM (PST)</strong></em><em>: As we continue our investigation, we are finding the issue to be restricted to a limited and isolated set of test-only systems that are using non-official versions of the .NET 4.8 Preview. As of 2/15/19 around 12:00 pm (PST) we further tightened our delivery mechanisms to ensure that the February .NET security updates are only deployed to their expected target systems.</em></del>\r\n\r\n<del><span>TheÂ </span><a href=\"https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/\" rel=\"nofollow\">February 2019 Security and Quality Rollup for Windows 10 update 1809</a><span>Â was released earlier this week. We have received multiple customer reports ofÂ issues when a customer has installed .NET Framework 4.8 Preview then installed the February security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>.</span> These reports are specific to only to the scenario when a customer has installed both .NET Framework 4.8 Preview and the February security update.</del>\r\n\r\n<del>We are actively working on investigating and addressing this issue. If you installed the February 2019 security update and have not seen any negative behavior, we recommend that you leave your system as-is but closely monitor it and ensure that you apply upcoming .NET Framework updates.</del>\r\n\r\n<del>We will continue to update this <a href=\"https://github.com/dotnet/announcements/issues/100\" rel=\"nofollow\">post</a> as we have new information.</del>\r\n<h2><del>Guidance</del></h2>\r\n<del>We are working on guidance and will update this post and as we have new information.</del>\r\n<h2><del>Workaround</del></h2>\r\n<del>There are no known workarounds at this time.</del>\r\n<h2><del>Symptoms</del></h2>\r\n<del>After installing .NET Framework 4.8 Preview then the February 2019 security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>, Visual Studios will crash with this error message:</del>\r\n<p class=\"xxxxxmsonormal\"><del><b><span style=\"font-size: 10.5pt;font-family: 'Segoe UI',sans-serif;color: black\">\"Exception has been thrown by the target of an invocation.\"</span></b></del></p>","Url":"https://github.com/dotnet/announcements/issues/100","RelatedDescription":"Open issue \"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809\" (#100)"},{"Id":"410455095","IsPullRequest":false,"CreatedAt":"2019-02-14T19:28:25","Actor":"richlander","Number":"99","RawContent":null,"Title":"Supporting new Alpine versions (for containers)","State":"open","Body":"# Supporting new Alpine versions (for containers)\r\n\r\n[Alpine 3.9](https://twitter.com/alpinelinux/status/1090416212822110214) was recently announced. Congratulations, Alpine team! On the .NET team, we are committed to supporting new Alpine versions quickly, and also need to define a policy for older versions. This policy only applies for the container images that we publish.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #933](https://github.com/dotnet/dotnet-docker/issues/933)\r\n\r\n## Policy\r\n\r\nWe intend to establish the following policy for supporting Alpine with .NET Core container images:\r\n\r\n* Support new Alpine versions within 60 days of release (hopefully much less).\r\n* Support n-1 Alpine versions for 3 months after we support a new Alpine version.\r\n\r\nNote: The [.NET Core support policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md) may be broader. This policy is specific to the container images we produce.\r\n\r\n## Plans\r\n\r\nWe're in the process of [fixing issues required to support Alpine 3.9](https://github.com/dotnet/dotnet-docker/issues/921). We expect that these issues will be resolved in February and that we'll be able to provide support for Alpine 3.9 in March.\r\n\r\nWe will produce Alpine 3.9 images for .NET Core 2.1, 2.2 and 3.0. Assuming we publish 3.9 images in March, we'll stop producing and supporting Alpine 3.7 and 3.8 images after June (2019).\r\n\r\n## Using Alpine-based .NET Core images\r\n\r\nWe produce a variety of Alpine-based images. You can either depend on a specific Alpine version, like with `microsoft/dotnet:2.2-sdk-alpine3.8` or opt to use the latest Alpine image we have to offer, like with `microsoft/dotnet:2.2-sdk-alpine`. Either are good choices. It is just a question of whether you want to make a conscious decision to move to later Alpine releases.\r\n\r\n## Support for ARM32?\r\n\r\nWe produce Alpine images for x64 (and ARM64, shortly). The [Alpine 3.9 announcement](https://twitter.com/alpinelinux/status/1090416212822110214) made mention of support for ARM32v7. We would like to enable .NET Core [Alpine-based images on ARM32](https://github.com/gliderlabs/docker-alpine/issues/463#issuecomment-460530395). We are patiently waiting for that to happen. If that's important to you, you should comment on that thread.","Url":"https://github.com/dotnet/announcements/issues/99","RelatedDescription":"Open issue \"Supporting new Alpine versions (for containers)\" (#99)"},{"Id":"409840927","IsPullRequest":false,"CreatedAt":"2019-02-13T14:48:21","Actor":"TaraOverfield","Number":"98","RawContent":null,"Title":"February 2019 .NET Updates","State":"open","Body":"# February 2019 .NET Updates\r\nThe following .NET updates were released in February 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework February 2019 Security and Quality Rollup - February 12, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/)\r\n* [.NET Framework February 2019 Preview of Quality Rollup - February 19, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/19/net-framework-february-2019-preview-of-quality-rollup/)\r\n\r\n## .NET Support Policies\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/98","RelatedDescription":"Open issue \"February 2019 .NET Updates\" (#98)"},{"Id":"409436643","IsPullRequest":false,"CreatedAt":"2019-02-12T18:21:22","Actor":"leecow","Number":"97","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability","State":"open","Body":"## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a domain spoofing vulnerability in .NET Framework and .NET Core which causes the meaning of a URI to change when International Domain Name encoding is applied. An attacker who successfully exploited the vulnerability could redirect a URI.\r\n\r\nThe security update addresses the vulnerability by disallowing certain Unicode characters from the URI.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/35265\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core 1.0 or 1.1 based application that uses the [System.Private.Uri](https://www.nuget.org/packages/System.Private.Uri/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0 | 4.3.1\r\n\r\nAny .NET Core 2.1 or 2.2 based application that uses the [Microsoft.NETCore.App](https://www.nuget.org/packages/Microsoft.NETCore.App) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6, 2.1.7, 2.2.0, 2.2.1 | 2.1.8, 2.2.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Private.Uri` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.2.1, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studioâ€™s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your projectâ€™s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Private.Uri/4.3.0` is a reference to version 4.3.0 of `System.Private.Uri`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.8 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.2 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Private.Uri` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.Private.Uri` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0657](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0657)\r\n\r\n### Revisions\r\n\r\nV1.0 (February 12, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-02-08_\r\n","Url":"https://github.com/dotnet/announcements/issues/97","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability\" (#97)"},{"Id":"397026248","IsPullRequest":false,"CreatedAt":"2019-01-08T18:17:45","Actor":"leecow","Number":"96","RawContent":null,"Title":"January 2019 .NET Updates","State":"open","Body":"# January 2019 .NET Updates\r\n\r\nThe following .NET updates were released in January 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework January 2019 Preview of Quality Rollup - January 15, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/15/net-framework-january-2019-preview-of-quality-rollup/)\r\n* [.NET Framework January 2019 Security and Quality Rollup - January 8, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/08/net-framework-january-2019-security-and-quality-rollup/)\r\n* [.NET Framework January 22, 2018 Preview of Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - January 22, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/22/net-framework-january-22-2018-preview-of-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.7 and .NET Core SDK 2.1.503 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.7/2.1.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.1 and .NET Core SDK 2.2.102 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.1/2.2.1.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2210](https://github.com/dotnet/core/issues/2210)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/96","RelatedDescription":"Open issue \"January 2019 .NET Updates\" (#96)"},{"Id":"397020176","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:27","Actor":"blowdart","Number":"95","RawContent":null,"Title":" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a tampering vulnerability exists when .NET Core improperly handles specially crafted files. An attacker who successfully exploited this vulnerability could write arbitrary files and directories to certain locations on a vulnerable system. However, an attacker would have limited control over the destination of the files and directories.\r\n\r\nTo exploit the vulnerability, an attacker must send a specially crafted file to a vulnerable system\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core handles these files.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34427\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nIf your application does not extract ZIP compressed files it is unaffected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.IO.Compression.ZipFile](https://www.nuget.org/packages/System.IO.Compression.ZipFile/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.IO.Compression.ZipFile) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n`System.IO.Compression.ZipFile` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\nFinally, you must restart your applications once an updated runtime or SDK is installed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Danny Grander](https://twitter.com/grander) of [Snyk](https://snyk.io/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-8416](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8416)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected pacakge table.\r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/95","RelatedDescription":"Open issue \" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\" (#95)"},{"Id":"397020142","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:23","Actor":"blowdart","Number":"94","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of an information disclosure vulnerability exists in .NET Framework and .NET Core which allows bypassing Cross-origin Resource Sharing (CORS) configurations. An attacker who successfully exploited the vulnerability could retrieve content, that is normally restricted, from a web application.\r\n\r\nThe security update addresses the vulnerability by enforcing CORS configuration to prevent its bypass.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34428\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.2.0 | 2.2.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Net.Http` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studioâ€™s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your projectâ€™s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `SSystem.Net.Http/4.3.0` is a reference to version 4.3.0 of `System.Net.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Net.Http` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0545](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0545)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected package table. \r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n","Url":"https://github.com/dotnet/announcements/issues/94","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\" (#94)"},{"Id":"390948658","IsPullRequest":false,"CreatedAt":"2018-12-14T03:22:58","Actor":"wu-yafeng","Number":"93","RawContent":null,"Title":"Docker image with tag '2.2-aspnetcore-runtime' is not compatible","State":"closed","Body":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]","Url":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Closed issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93)"},{"Id":"390193072","IsPullRequest":false,"CreatedAt":"2018-12-12T12:56:53","Actor":"bilalmalik777","Number":"92","RawContent":null,"Title":".net core Console","State":"closed","Body":"I am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n    networks:\r\n     - app-network\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\nIf the detail is not enough or you do not get my point, you can share your confusion in comment","Url":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Closed issue \".net core Console\" (#92)"},{"Id":"380346599","IsPullRequest":false,"CreatedAt":"2018-11-13T17:44:44","Actor":"leecow","Number":"91","RawContent":null,"Title":"November 2018 .NET Updates","State":"open","Body":"# November 2018 .NET Updates\r\n\r\nThe following .NET updates were released in November 2018. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core November 2018 (2.1.6 and SDK 2.1.500) Update release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.6/2.1.6.md)\r\n\r\nA [discussion issue](https://github.com/dotnet/core/issues/2053) is available for questions or feedback about this release.\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [October 2018](https://github.com/dotnet/announcements/issues/89)\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/91","RelatedDescription":"Open issue \"November 2018 .NET Updates\" (#91)"},{"Id":"375230004","IsPullRequest":false,"CreatedAt":"2018-10-29T21:45:27","Actor":"terrajobst","Number":"90","RawContent":null,"Title":"The future of JSON in .NET Core 3.0","State":"open","Body":"JSON has become an essential part of virtually all modern .NET applications and in many cases even surpassed the usage of XML. However, .NET hasn't had a (great) built-in way to deal with JSON. Instead we've relied on [Json.NET] which continues to serve the .NET ecosystem well.\r\n\r\n[Json.NET]: https://www.newtonsoft.com/json\r\n\r\nMoving forward, we plan on making some changes to our JSON support:\r\n\r\n* **We need high-performance JSON APIs**. We need a new set of JSON APIs that are highly tuned for performance by using `Span<T>` and allows for processing UTF-8 directly without having to transcode to UTF-16 `string` instances. Both aspects are critical for our web server Kestrel, where throughput is a key requirement.\r\n\r\n* **Remove dependency from ASP.NET Core to Json.NET**. Today, ASP.NET Core has a dependency on Json.NET. While this provides a tight integration between ASP.NET Core and Json.NET, it also means that application developers cannot freely choose which JSON library they are using. This is also problematic for customers of Json.NET as the version is dictated by the underlying platform. However, Json.NET is frequently updated and application developers often want to -- or even have to -- use a specific version. Thus, we want to remove the dependency from ASP.NET Core 3.0 to Json.NET so that customers can choose which version to use, without fearing they might accidentally break the underlying platform. In addition, this makes it also possible to plug-in an entirely different JSON library.\r\n\r\n* **Provide an ASP.NET Core integration package for Json.NET**. Json.NET has basically become the Swiss Army knife of JSON processing in .NET. It provides many options and facilities that allow customers to handle their JSON needs with ease. We don't want to compromise on the Json.NET support customers are getting today, for example, the ability to configure the JSON serialization via the `AddJsonOptions` extension method. Thus, we want to provide the Json.NET integration as a NuGet package that developers can optionally install so they get all the bells and whistles they get from Json.NET today. The other part of this work item is to ensure we have the right extension points so that other parties can provide similar integration packages for their JSON library of choice.\r\n\r\nBelow are more details around this plan.\r\n\r\n## The need for high-performance JSON APIs\r\n\r\nThe requirements for the .NET stack have changed a bit since the arrival of .NET Core. Historically, .NET has valued usability and convenience. With .NET Core, we've added a focus on performance, and we've made significant investments to serve high performance needs. And the [improvements we made][techempower] in the popular TechEmpower benchmark are a testament to that.\r\n\r\n[techempower]: https://www.techempower.com/blog/2016/11/16/framework-benchmarks-round-13/\r\n\r\nWith .NET Core 2.1, we've added a brand new primitive called [Span\\<T>][span-msdn] that allows us to represent native memory and arrays in a uniform way. With this type, we've also added a set of parsing and encoding APIs that are much more memory efficient without having to resort to unsafe code.\r\n\r\n[span-msdn]: https://msdn.microsoft.com/en-us/magazine/mt814808.aspx\r\n\r\nPart of the work of minimizing allocations is to avoid having to transcode UTF-8 payloads into UTF-16 strings, purely for parsing reasons. Currently, Json.NET is implemented by reading UTF-16. We need the ability to read (and write) JSON documents directly in UTF-8 because most network protocols (including HTTP) use UTF-8.\r\n\r\nDuring .NET Core 2.1 we've learned that updating our existing APIs to leverage `Span<T>` has limits. While we did add a bunch of overloads that accept spans, we also had to produce brand new APIs that are designed around minimizing allocations and dealing with buffers, which we exposed in `System.Buffers` namespaces. And with `System.IO.Pipelines` we've also added a programming model that enables developers to share buffers without having to deal with lifetime issues.\r\n\r\nBased on these experiences we believe in order to support JSON parsing, we'll need to expose a new set of JSON APIs that are specifically geared for high-performance scenarios.\r\n\r\nYou might wonder why we can't just update Json.NET to include support for parsing JSON using `Span<T>`? Well, James Newton-King -- the author of Json.NET -- has the following to say about that:\r\n\r\n> Json.NET was created over 10 years ago, and since then it has added a wide range of features aimed to help developers work with JSON in .NET. In that time Json.NET has also become far and away NuGet's most depended on and downloaded package, and is the go-to library for JSON support in .NET. Unfortunately, Json.NET's wealth of features and popularity works against making major changes to it. Supporting new technologies like `Span<T>` would require fundamental breaking changes to the library and would disrupt existing applications and libraries that depend on it.\r\n>\r\n> Going forward Json.NET will continue to be worked on and invested in, both addressing known issues today and supporting new platforms in the future. Json.NET has always existed alongside other JSON libraries for .NET, and there will be nothing to prevent you using one or more together, depending on whether you need the performance of the new JSON APIs or the large feature set of Json.NET.\r\n\r\n## Move Json.NET integration into a separate NuGet package\r\n\r\nToday, you cannot use ASP.NET Core without Json.NET because it is a dependency of ASP.NET Core itself. Over the years, we've received feedback that the dependency can conflict with other libraries that have their own dependency on a different version of Json.NET. In the past, we've considered addressing this issue by using a private copy of Json.NET in ASP.NET. However, this would create problems when developers want to configure Json.NET (for instance, in order to control how the serializer behaves when formatting JSON objects).\r\n\r\nMoving forward we'd like to:\r\n\r\n1. Replace the internal usage of Json.NET in ASP.NET Core by the new platform-provided JSON APIs.\r\n\r\n2. Factor the public facing usage of Json.NET into an optional integration package that can be acquired from NuGet.\r\n\r\nSo the existing integration between ASP.NET Core and Json.NET will continue to be supported, but will be moving out of the platform and into a separate package. However, since the integration is then designed to sit on top of the platform, it will also allow customers to update Json.NET to later versions.\r\n\r\nFurthermore, customers who need more performance can also choose to use the new JSON APIs, at the expense of the rich feature set that Json.NET offers.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/33115.","Url":"https://github.com/dotnet/announcements/issues/90","RelatedDescription":"Open issue \"The future of JSON in .NET Core 3.0\" (#90)"},{"Id":"368440353","IsPullRequest":false,"CreatedAt":"2018-10-09T23:44:06","Actor":"vivmishra","Number":"89","RawContent":null,"Title":"October 2018 .NET Updates","State":"open","Body":"# October 2018 .NET Updates\r\n\r\nThe following .NET updates were released in October 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core October 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/10/09/net-core-october-2018-update-net-core-1-0-and-1-1/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/89","RelatedDescription":"Open issue \"October 2018 .NET Updates\" (#89)"},{"Id":"368429033","IsPullRequest":false,"CreatedAt":"2018-10-09T22:51:18","Actor":"leecow","Number":"88","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core when HTTP authentication information is inadvertently exposed in an outbound request that encounters an HTTP redirect. An attacker who successfully exploited this vulnerability could use the information to further compromise the web application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handles HTTP redirects.\r\n\r\nSystem administrators running .NET Core 1.0 or .NET Core 1.1 applications must update their .NET Core runtimes to versions 1.0.13 and 1.1.10 then restart their applications. If installed applications target .NET Core 2.0, the applications must be migrated to 2.1 or newer and redeployed.\r\n\r\nDevelopers must update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core 2.0](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 then redeploy.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at <https://github.com/dotnet/corefx/issues/32730>\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nNone\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nAdditionally package authors should check their dependencies to ensure they aren't depending on a vulnerable version of the following package:\r\n\r\n<a name=\"package-list\"></a>Package name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Net.Http| 2.0.20126.16343, 2.0.20505, 2.0.20710, 4.0.0, 4.1.0, 4.1.1, 4.1.2, 4.3.0, 4.3.1, 4.3.2, 4.3.3 |  4.3.4 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nTo check the currently installed runtimes and SDKs with version 2.1 or later of .NET Core, open a command prompt and run the `dotnet --info` command. You should see an output similar to the following:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.403\r\n Commit:    04e15494b6\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.403\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.5\r\n  Commit:  290303f510\r\n\r\n.NET Core SDKs installed:\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.10 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf you don't see a runtime entry for 1.0.13 or 1.1.10, any .NET Core 1.x applications run on that computer are vulnerable.\r\n\r\nIf you don't have a 2.1 version of the runtime or SDK installed, you can produce the complete list of runtimes by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows | `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS | `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms | `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.13, 1.1.10 then any application targeting versions 1.0 or 1.1 are vulnerable.\r\n\r\nAdditionally, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n### <a name=\"fix-runtime\">How do I fix the vulnerability?\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.13, 1.1.10 and install the latest 2.1 runtime, ensuring that any 2.0 applications are migrated to 2.1 as soon as possible.\r\n\r\n Developers are advised to update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at <https://github.com/dotnet/> and <https://github.com/aspnet/>, respectively. The Announcements repo for each product (<https://github.com/dotnet/Announcements> and <https://github.com/aspnet/Announcements>) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8292](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8292)\r\n\r\n### Revisions\r\n\r\nV1.0 (October 10, 2018): Advisory published.\r\n_Version 1.0_\r\n_Last Updated 2018-10-10_\r\n","Url":"https://github.com/dotnet/announcements/issues/88","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\" (#88)"},{"Id":"367393517","IsPullRequest":false,"CreatedAt":"2018-10-05T22:58:51","Actor":"leecow","Number":"87","RawContent":null,"Title":".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan","State":"open","Body":"# .NET Core Release Data (releases.json) Redesign and Deprecation\r\n\r\nThe releases.json and releases.csv files began life as helper tools for some of our internal release work, some experimentation and to possibly be useful to the community. It has been great to learn the files are indeed in use and many folks depend on them as a trigger for a number of activities.\r\n\r\n* [release-notes/releases.json](https://github.com/dotnet/core/blob/master/release-notes/releases.json)\r\n* [release-notes/releases.csv](https://github.com/dotnet/core/blob/master/release-notes/releases.csv)\r\n\r\nA discussion topic is available to share thoughts and see what others are thinking at https://github.com/dotnet/core/issues/1986\r\n\r\nBetween the usages which we have become aware and in considering further activities that could be enabled to reason about things such as checking .NET Core version availability and support status, it became clear the current format is inadequate.\r\n\r\nAn updated format has been designed and tested which will replace the current files. The timeline below describes the path to obsoleting the current files.\r\n\r\n## The Plan\r\n\r\n| Date | Action |\r\n| :--- | :----- |\r\n| Oct 2018 | Notify the community of the coming change |\r\n| Oct 2018 | Release the new json format into dotnet/core |\r\n| Oct 2018 - Feb 2019 | Maintain the old json and csv files |\r\n| Feb 2019 | Reminder announcement that old format file is coming soon |\r\n| Mar 2019 | Old json and csv files are obsoleted and removed from dotnet/core |\r\n\r\n## Breaking change\r\n\r\nIf you are currently utilizing the old version json or csv, you will need to update the relevant code to work with the new format. If you are just getting started with consuming this data, use the new version.\r\n\r\n## The Format\r\n\r\nBelow are fragments of the files from our most recent .NET Core release.\r\n\r\n### release-index.json\r\n\r\nThis file consists of a top level array with data on the latest release versions and a property for locating the more detailed channel-specific releases.json. This file is found in [dotnet/core/release-notes](https://github.com/dotnet/core/tree/new-json/release-notes/)\r\n\r\n[releases-index.json](https://github.com/dotnet/core/blob/new-json/release-notes/releases-index.json)\r\n\r\n```\r\n{\r\n    \"releases-index\": [\r\n        {\r\n            \"channel-version\": \"2.1\",\r\n            \"latest-release\": \"2.1.5\",\r\n            \"latest-release-date\":\"2018-10-02\",\r\n            \"product\": \".NET Core\",\r\n            \"support-phase\": \"lts\",\r\n            \"eol-date\": \"\",\r\n            \"releases.json\": \"https://github.com/dotnet/core/blob/master/release-notes/2.1/releases.json\",\r\n        },\r\n        ...\r\n}\r\n```\r\n\r\n### releases.json\r\n\r\nThis file provides detailed data for each release. A copy of this file will be found in each versioned directories under [dotnet/core/release-notes](https://github.com/dotnet/core/release-notes). For example [dotnet/core/release-notes/2.1](https://github.com/dotnet/core/tree/new-json/release-notes/2.1)\r\n\r\n\r\n[releases.json](https://github.com/dotnet/core/tree/new-json/release-notes/2.1/releases.json)\r\n\r\n```\r\n{\r\n    \"channel-version\": \"2.1\",\r\n    \"latest-release\": \"2.1.5\",\r\n    \"latest-release-date\":\"2018-10-12\",\r\n    \"support-phase\": \"lts\",\r\n    \"eol-date\": \"\",\r\n    \"lifecycle-policy\": \"https://www.microsoft.com/net/support/policy\",\r\n    \"releases\":\r\n    [\r\n        {\r\n            \"release-date\":  \"2018-10-02\",\r\n            \"release-version\":  \"2.1.5\",\r\n            \"security\":  false,\r\n            \"release-notes\":  \"https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.5/2.1.5.md\",\r\n            \"runtime\":  \r\n            {\r\n                \"version\":  \"2.1.5\",\r\n                \"version-display\":  \"2.1.5\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"files\":  \r\n                [\r\n                    {\r\n                        \"name\": \"dotnet-runtime-linux-arm.tar.gz\",\r\n                        \"url\": \"https://download.visualstudio.microsoft.com/download/pr/4d555219-1f04-47c6-90e5-8b3ff8989b9c/0798763e6e4b98a62846116f997d046e/dotnet-runtime-2.1.5-linux-arm.tar.gz\",\r\n                        \"hash\": \"89a77a07065ea24e7198c77a233b9ce5c6cf51b1deb2ef55c88f0adbb2ecd9db1ba4e7d55eec2ef7139c47f91346fed360161a5bb6e3a7ccfc4559bcde286364\"\r\n                    },\r\n                    ...\r\n                ]\r\n            }\r\n            \"sdk\":  \r\n            {\r\n                \"version\":  \"2.1.403\",\r\n                \"version-display\":  \"2.1.403\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"csharp-language\":  \"7.3\",\r\n                \"fsharp-language\":  \"4.5\",\r\n                \"files\":  \r\n                [...]\r\n            }\r\n        }\r\n    ]\r\n}\r\n```","Url":"https://github.com/dotnet/announcements/issues/87","RelatedDescription":"Open issue \".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan\" (#87)"}],"ResultType":"GitHubIssue"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1151899037030764545","CreatedAt":"2019-07-18T16:58:26+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demos and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":10,"FavoriteCount":8,"RawContent":null},{"Id":"1151259798244974592","CreatedAt":"2019-07-16T22:38:19+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demos and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":11,"FavoriteCount":3,"RawContent":null},{"Id":"1149432245909905409","CreatedAt":"2019-07-11T21:36:17+00:00","UserScreenname":"dotnet","Text":"Discover the world of .NET\n\n#dotNETConf is coming September 23 â€” 25\nCome celebrate the new .NET Core 3.0 launch witâ€¦ https://t.co/gVCxErAzFJ","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":180,"FavoriteCount":96,"RawContent":null}]}},"RunOn":"2019-07-19T05:30:37.8024013Z","RunDurationInMilliseconds":15673}