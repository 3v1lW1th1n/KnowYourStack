{"Data":{"Blog":{"FeedItems":[{"Title":"Migrating your existing .NET application to the cloud? Tell us about it!","PublishedOn":"2017-12-05T18:14:46+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Hi everyone! The .NET team is conducting a survey to learn more about your approach for moving existing .NET applications to the cloud.  The survey should take less than 5 minutes to complete. Take...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/12/05/migrating-your-existing-net-application-to-the-cloud-tell-us-about-it/","RawContent":null},{"Title":"Announcing the Windows Compatibility Pack for .NET Core","PublishedOn":"2017-11-17T04:59:32+00:00","CommentsCount":73,"FacebookCount":0,"Summary":"Porting existing code to .NET Core used to be quite hard because the available API set was very small. In .NET Core 2.0, we already made this much easier, thanks to .NET Standard 2.0. Today,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/announcing-the-windows-compatibility-pack-for-net-core/","RawContent":null},{"Title":"UPDATE – Microservices and Docker containers: Architecture, Patterns and Development guidance (Updated for .NET Core 2.0)","PublishedOn":"2017-11-16T22:00:06+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Nov. 15th 2017 update Earlier this year, we published this eBook/guide and sample application offering guidance for architecting microservices and Docker containers based applications. We have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/update-microservices-and-docker-containers-architecture-patterns-and-development-guidance-updated-for-net-core-2-0/","RawContent":null},{"Title":"UPDATE – Web Applications with ASP.NET Core Architecture and Patterns guidance (Updated for ASP.NET Core 2)","PublishedOn":"2017-11-16T21:00:05+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Nov. 15th 2017 update Earlier this year, we published an eBook/Guide and sample application offering guidance named Architecting Modern Web Applications with ASP.NET Core and Microsoft Azure. We have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/update-web-applications-with-asp-net-core-architecture-and-patterns-guidance-updated-for-asp-net-core-2/","RawContent":null},{"Title":"Introducing Tensor for multi-dimensional Machine Learning and AI data","PublishedOn":"2017-11-15T22:00:18+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"Overview Tensor is an exchange type for homogenous multi-dimensional data for 1 to N dimensions. The motivation behind introducing Tensor&#60;T&#62; is to make it easy for Machine Learning library...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/introducing-tensor-for-multi-dimensional-machine-learning-and-ai-data/","RawContent":null},{"Title":"Introducing Nullable Reference Types in C#","PublishedOn":"2017-11-15T20:00:47+00:00","CommentsCount":234,"FacebookCount":0,"Summary":"Today we released a prototype of a C# feature called &#8220;nullable reference types&#8220;, which is intended to help you find and fix most of your null-related bugs before they blow up at runtime....","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/nullable-reference-types-in-csharp/","RawContent":null},{"Title":"Announcing F# support for .NET Core and .NET Standard projects in Visual Studio","PublishedOn":"2017-11-15T19:00:49+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"We&#8217;re pleased to announce that Visual Studio 2017 15.5 Preview 4 now supports F# projects targeting .NET Core, .NET Standard, and .NET Framework through the .NET Core SDK. Some of you have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/announcing-f-support-for-net-core-and-net-standard-projects-in-visual-studio/","RawContent":null},{"Title":"Welcome to C# 7.2 and Span","PublishedOn":"2017-11-15T19:00:26+00:00","CommentsCount":29,"FacebookCount":0,"Summary":"C# 7.2 is the latest point release of C#, and adds a number of small but useful features. All the features are described in wonderful detail in the docs. Start with the overview, What&#8217;s new in...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/welcome-to-c-7-2-and-span/","RawContent":null},{"Title":".NET Core November 2017 Update","PublishedOn":"2017-11-15T05:25:23+00:00","CommentsCount":12,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core November Update. This includes .NET Core 1.0.8, 1.1.5 and 2.0.1 and .NET Core SDK 1.1.5 and 2.0.3. Details regarding the security issues addressed by this release...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/14/net-core-november-2017-update/","RawContent":null},{"Title":".NET Framework November 2017 Security and Quality Rollup","PublishedOn":"2017-11-15T03:54:36+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"Today, we are releasing the November 2017 Security and Quality Rollup. Security This release contains no new security updates. The most recent .NET security updates were shipped with the September...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/14/net-framework-november-2017-security-and-quality-rollup/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7065382954","Type":"PullRequestEvent","CreatedAt":"2018-01-06T19:21:47","Actor":"ctaggart","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/94","RelatedDescription":"Opened pull request \"add SourceLink\" (#94) at dotnet/home","RelatedBody":"Adding SourceLink to the project list as per the checklist https://github.com/ctaggart/SourceLink/issues/138"},{"Id":"7044237283","Type":"PullRequestEvent","CreatedAt":"2017-12-31T20:25:44","Actor":"onovotny","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/93","RelatedDescription":"Opened pull request \"Add Humanizer\" (#93) at dotnet/home","RelatedBody":"Onboarding Humanizer: https://github.com/Humanizr/Humanizer/issues/682"},{"Id":"6946829856","Type":"PullRequestEvent","CreatedAt":"2017-12-05T18:08:42","Actor":"heiligerdankgesang","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/92","RelatedDescription":"Opened pull request \"Remove contact email from system.drawing.md\" (#92) at dotnet/home","RelatedBody":"Contact email is outdated. Mono-project site's community section has better, more up-to-date information."},{"Id":"6934052963","Type":"PullRequestEvent","CreatedAt":"2017-12-02T15:19:09","Actor":"rprouse","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/91","RelatedDescription":"Opened pull request \"Add NUnit to the .NET Foundation Projects\" (#91) at dotnet/home","RelatedBody":""},{"Id":"6872255902","Type":"PullRequestEvent","CreatedAt":"2017-11-17T22:01:26","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/90","RelatedDescription":"Merged pull request \"Add BenchmarkDotNet to README.md and project.json\" (#90) at dotnet/home","RelatedBody":""},{"Id":"6872252909","Type":"PullRequestEvent","CreatedAt":"2017-11-17T22:00:44","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/89","RelatedDescription":"Merged pull request \"New logo and SSL certificate for Peachpie\" (#89) at dotnet/home","RelatedBody":""},{"Id":"6868854916","Type":"PullRequestEvent","CreatedAt":"2017-11-17T09:04:03","Actor":"AndreyAkinshin","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/90","RelatedDescription":"Opened pull request \"Add BenchmarkDotNet to README.md and project.json\" (#90) at dotnet/home","RelatedBody":""},{"Id":"6816687850","Type":"IssuesEvent","CreatedAt":"2017-11-06T20:30:07","Actor":"Petermarcu","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/home/issues/88","RelatedDescription":"Closed issue \"File system watcher crash\" (#88) at dotnet/home","RelatedBody":"Not sure where to open this issue.\r\nI'm experiencing crashes since I migrated to .net core 2.0 while running my site.\r\nThe following is the exception and stack trace:\r\n```\r\nAn unhandled exception of type 'System.ArgumentException' occurred in System.Private.CoreLib.dll\r\nThe path is not of a legal form.\r\n\r\nSystem.Private.CoreLib.dll!System.IO.Path.GetFullPath(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.InMemoryDirectoryInfo.InMemoryDirectoryInfo(string rootDir, System.Collections.Generic.IEnumerable<string> files, bool normalized)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string rootDir, System.Collections.Generic.IEnumerable<string> files)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string file)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.ReportChangeForMatchedEntries(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnFileSystemEntryChange(string fullPath)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnRenamed(object sender, System.IO.RenamedEventArgs e)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.NotifyRenameEventArgs(System.IO.WatcherChangeTypes action, string name, string oldName)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ParseEventBufferAndNotifyForEach(byte[] buffer)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ReadDirectoryChangesCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* overlappedPointer)\tUnknown\tNo symbols loaded.\r\n \tSystem.Private.CoreLib.dll!System.Threading._IOCompletionCallback.PerformIOCompletionCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* pOVERLAP)\tUnknown\tNo symbols loaded.\r\n```\r\n\r\nI'm not sure how to fix this. I can reproduce it although it's not easy since I think it has to do with timing..."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"6948315401","Type":"IssuesEvent","CreatedAt":"2017-12-05T23:41:57","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/50","RelatedDescription":"Closed issue \".Net Core ARM32 SDK availability\" (#50) at dotnet/announcements","RelatedBody":"Referencing #29.\r\n\r\nWill it be possible to : \r\n\r\na) Provide ARM32 builds for the SDK at its current state\r\nor\r\nb) Provide links on how to build the .Net Core SDK for ARM32?\r\n\r\nThe thing is I am planning to use it in a virtual environnement, through proot + qemu-arm-static. This way I would be able to build and, more importantly, run unit tests on ARM32. Another thing I am planning to do is to setup a build environnement on i686 through virtualisation as qemu doesn't seem to be able to emulate x86_64 on i686 (but arm32 does seem to work well enough).\r\n\r\nThank you in advance.\r\n\r\nSergio\r\n\r\n"},{"Id":"6944555922","Type":"IssuesEvent","CreatedAt":"2017-12-05T10:46:06","Actor":"tioduke","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/50","RelatedDescription":"Opened issue \".Net Core ARM32 SDK availability\" (#50) at dotnet/announcements","RelatedBody":"Will it be possible to : \r\n\r\na) Provide ARM32 builds for the SDK at its current state\r\nor\r\nb) Provide links on how to build the .Net Core SDK for ARM32?\r\n\r\nThe thing is I am planning to use it in a virtual environnement, through proot + qemu-arm-static. This way I would be able to build and, more importantly, run unit tests on ARM32. Another thing I am planning to do is to setup a build environnement on i686 through virtualisation as qemu doesn't seem to be able to emulate x86_64 on i686 (but arm32 does seem to work well enough).\r\n\r\nThank you in advance.\r\n\r\nSergio\r\n\r\n"},{"Id":"6886438076","Type":"IssuesEvent","CreatedAt":"2017-11-21T19:28:57","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/49","RelatedDescription":"Opened issue \".NET Core Alpine Image Ready for Testing\" (#49) at dotnet/announcements","RelatedBody":"# .NET Core Alpine Image Ready for Testing\r\n\r\nAn [Alpine](https://hub.docker.com/_/alpine/)-based Docker image is now available for .NET Core. Alpine is much smaller than Debian, which we have used for the .NET Core base image to date. There have been many requests for an Alpine image. We are pleased to make it available. Please check out [.NET Core Docker Alpine Production Sample (Preview)](https://github.com/dotnet/dotnet-docker-samples/blob/master/dotnetapp-prod-alpine-preview/README.md) to see examples of using this image.\r\n\r\nWe have added two new images:\r\n\r\n- `2.1-runtime-alpine`\r\n- `2.1-runtime-deps-alpine`\r\n\r\nAlpine support is part of the .NET Core 2.1 release. .NET Core 2.1 images are currently provided at the [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/) repo, including the new Alpine images. .NET Core 2.1 images will be promoted to the [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) repo when .NET Core 2.1 is shipped as a Preview, expected to be early 2018.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker-nightly #500](https://github.com/dotnet/dotnet-docker-nightly/issues/500)\r\n\r\n## Details\r\n\r\n* [dotnet/dotnet-docker-nightly #480](https://github.com/dotnet/dotnet-docker-nightly/pull/480)\r\n* [dotnet/announcements #20](https://github.com/dotnet/announcements/issues/20)\r\n* [dotnet/dotnet-docker-samples #94](https://github.com/dotnet/dotnet-docker-samples/pull/94)\r\n\r\nThe primary goal of Alpine is very small deployments. We have been considering various design decisions to make .NET Core Alpine base images as small as possible to align with that. In this first iteration, we enabled [.NET Core 2.0 Globalization Invariant Mode](https://github.com/dotnet/announcements/issues/20) in order to reduce the default size of the image. This change reduced the image by ~30MB. You can see the reduction in size for .NET Core images relative to Debian in the following table.\r\n\r\n|2.1 Image|Debian|Alpine|\r\n|-----    |------|------|\r\n|`-deps`   |153MB (68MB compressed) |13.8 MB (6MB compressed)|\r\n|`-runtime`|222MB (96MB compressed) |82.5 (34MB compressed)|\r\n\r\nNote: The compressed size is what you will see in a [registry](https://hub.docker.com/r/microsoft/dotnet-nightly/tags/) and is the wire-size cost.\r\n\r\nWe are also considering saving more space by native-compiling fewer assemblies. .NET Core runtime assemblies are native-compiled with the [crossgen tool](https://github.com/dotnet/coreclr/blob/master/Documentation/building/crossgen.md) in the [Ready2Run format](https://github.com/dotnet/coreclr/blob/master/Documentation/botr/readytorun-overview.md). Native-compiled code delivers superior startup performance but at the cost of 2-3x larger files. We have the opportunity to compile less, skipping compiling assemblies in part or in whole. We believe that we can save at least another 10MB through compiling less without a material drop in performance. For scenarios that value size over startup or where wire cost is significant, it may be valuable to aggressively reduce the number/% of compilation.\r\n\r\nAlpine images are only available for .NET Core 2.1. At the current time, only Runtime images are available. We intend to offer SDK images at a later date.\r\n\r\nUse cases that cannot tolerate Globalization invariant mode can reset the `DOTNET_SYSTEM_GLOBALIZATION_INVARIANT` environment variable and install the ICU package. Please check out [.NET Core Docker Alpine Production Sample (Preview)](https://github.com/dotnet/dotnet-docker-samples/blob/master/dotnetapp-prod-alpine-preview/README.md) to see examples of using this image with and without Globalization Invariant Mode enabled.\r\n\r\n## Call to Action\r\n\r\nPlease test your workloads with the new Alpine image. In particular, we want to know if enabling .NET Core Globalization Invariant Mode is acceptable/appreciated.\r\n"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7068011633","Type":"IssuesEvent","CreatedAt":"2018-01-08T05:12:41","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/15780","RelatedDescription":"Opened issue \"The throw keyword shows the wrong thrown exception line\" (#15780) at dotnet/coreclr","RelatedBody":"_From @NicolasDorier on August 22, 2017 14:56_\n\nUsing .NETCore2.0, Win10, it seems the `throw` keywor\r\n\r\nUsing the `throw` keyword loose all the initial stacktrace information. \r\nYou can workaround with `ExceptionDispatchInfo.Capture(ex).Throw();`, but this seems like a bug to me.\r\n\r\n```\r\nusing System;\r\n\r\nnamespace ConsoleApp3\r\n{\r\n\tclass Program\r\n\t{\r\n\t\tstatic void Main(string[] args)\r\n\t\t{\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\tDoStuff();\r\n\t\t\t}\r\n\t\t\tcatch(Exception ex)\r\n\t\t\t{\r\n\t\t\t\tConsole.WriteLine(ex.StackTrace);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t}\r\n\r\n\t\tprivate static void DoStuff()\r\n\t\t{\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\tthrow new Exception(\"Boom!\");\r\n\t\t\t}\r\n\t\t\tcatch(Exception ex)\r\n\t\t\t{\r\n\t\t\t\tthrow;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n```\r\nActual output: (Exception line 28)\r\n\r\n```\r\n   at ConsoleApp3.Program.DoStuff() in c:\\users\\nicolasdorier\\documents\\visual studio 2017\\Projects\\ConsoleApp3\\ConsoleApp3\\Program.cs:line 28\r\n   at ConsoleApp3.Program.Main(String[] args) in c:\\users\\nicolasdorier\\documents\\visual studio 2017\\Projects\\ConsoleApp3\\ConsoleApp3\\Program.cs:line 11\r\n```\r\n\r\nExpected output: (Exception line 24)\r\n\r\n```\r\n   at ConsoleApp3.Program.DoStuff() in c:\\users\\nicolasdorier\\documents\\visual studio 2017\\Projects\\ConsoleApp3\\ConsoleApp3\\Program.cs:line 24\r\n   at ConsoleApp3.Program.Main(String[] args) in c:\\users\\nicolasdorier\\documents\\visual studio 2017\\Projects\\ConsoleApp3\\ConsoleApp3\\Program.cs:line 11\r\n```\r\n\r\nWorkaround using `ExceptionDispatchInfo.Capture(ex).Throw();`:\r\n\r\n```\r\nusing System;\r\nusing System.Runtime.ExceptionServices;\r\n\r\nnamespace ConsoleApp3\r\n{\r\n\tclass Program\r\n\t{\r\n\t\tstatic void Main(string[] args)\r\n\t\t{\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\tDoStuff();\r\n\t\t\t}\r\n\t\t\tcatch(Exception ex)\r\n\t\t\t{\r\n\t\t\t\tConsole.WriteLine(ex.StackTrace);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t}\r\n\r\n\t\tprivate static void DoStuff()\r\n\t\t{\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\tthrow new Exception(\"Boom!\");\r\n\t\t\t}\r\n\t\t\tcatch(Exception ex)\r\n\t\t\t{\r\n\t\t\t\tExceptionDispatchInfo.Capture(ex).Throw();\r\n\t\t\t\tthrow;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n```\n\n_Copied from original issue: dotnet/corefx#23470_"},{"Id":"7067972238","Type":"IssuesEvent","CreatedAt":"2018-01-08T04:48:12","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/12219","RelatedDescription":"Closed issue \"Memory leaks on 1.0.4\" (#12219) at dotnet/coreclr","RelatedBody":"I have detected the huge memory leaks in .net app running on Amazon Linux. \r\n\r\n```\r\n.NET Command Line Tools (1.0.4)\r\n\r\nProduct Information:\r\n Version:            1.0.4\r\n Commit SHA-1 hash:  af1e6684fd\r\n\r\nRuntime Environment:\r\n OS Name:     amzn\r\n OS Version:  2017.03\r\n OS Platform: Linux\r\n RID:         centos.7-x64\r\n Base Path:   /opt/dotnet/sdk/1.0.4\r\n```\r\n\r\nThe process info from `top`:\r\n```\r\n  PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND\r\n13866 ec2-user  20   0 24.5g 4.1g  32m S  0.0 26.5  75:00.21 dotnet\r\n```\r\n\r\nlldb + libsosplugin shows very low memory consumed by GC:\r\n\r\n```\r\n(lldb) eeheap -gc\r\nNumber of GC Heaps: 4\r\n------------------------------\r\nHeap 0 (0000000001381EE0)\r\ngeneration 0 starts at 0x00007F85AC1D54F8\r\ngeneration 1 starts at 0x00007F85AC103CD0\r\ngeneration 2 starts at 0x00007F85ABFFF000\r\nephemeral segment allocation context: none\r\n         segment             begin         allocated              size\r\n00007F85ABFFE000  00007F85ABFFF000  00007F85AC2C9510  0x2ca510(2925840)\r\nLarge object heap starts at 0x00007F89ABFFF000\r\n         segment             begin         allocated              size\r\n00007F89ABFFE000  00007F89ABFFF000  00007F89AC016D10  0x17d10(97552)\r\nHeap Size:               Size: 0x2e2220 (lu) bytes.\r\n------------------------------\r\nHeap 1 (00000000013AB0E0)\r\ngeneration 0 starts at 0x00007F86AC178F90\r\ngeneration 1 starts at 0x00007F86AC0F71B0\r\ngeneration 2 starts at 0x00007F86ABFFF000\r\nephemeral segment allocation context: none\r\n         segment             begin         allocated              size\r\n00007F86ABFFE000  00007F86ABFFF000  00007F86AC9AED78  0x9afd78(10157432)\r\nLarge object heap starts at 0x00007F89BBFFF000\r\n         segment             begin         allocated              size\r\n00007F89BBFFE000  00007F89BBFFF000  00007F89BBFFF018  0x18(24)\r\nHeap Size:               Size: 0x9afd90 (lu) bytes.\r\n------------------------------\r\nHeap 2 (00000000013B02D0)\r\ngeneration 0 starts at 0x00007F87AC094F80\r\ngeneration 1 starts at 0x00007F87AC06B510\r\ngeneration 2 starts at 0x00007F87ABFFF000\r\nephemeral segment allocation context: none\r\n         segment             begin         allocated              size\r\n00007F87ABFFE000  00007F87ABFFF000  00007F87AC16EF98  0x16ff98(1507224)\r\nLarge object heap starts at 0x00007F89CBFFF000\r\n         segment             begin         allocated              size\r\n00007F89CBFFE000  00007F89CBFFF000  00007F89CBFFF018  0x18(24)\r\nHeap Size:               Size: 0x16ffb0 (lu) bytes.\r\n------------------------------\r\nHeap 3 (00000000013B54C0)\r\ngeneration 0 starts at 0x00007F88AC155F68\r\ngeneration 1 starts at 0x00007F88AC0E5F50\r\ngeneration 2 starts at 0x00007F88ABFFF000\r\nephemeral segment allocation context: none\r\n         segment             begin         allocated              size\r\n00007F88ABFFE000  00007F88ABFFF000  00007F88AC211F80  0x212f80(2174848)\r\nLarge object heap starts at 0x00007F89DBFFF000\r\n         segment             begin         allocated              size\r\n00007F89DBFFE000  00007F89DBFFF000  00007F89DBFFF018  0x18(24)\r\nHeap Size:               Size: 0x212f98 (lu) bytes.\r\n------------------------------\r\nGC Heap Size:            Size: 0x1014ef8 (lu) bytes.\r\n```\r\n\r\n`sos VerifyHeap` shows no errors.\r\n\r\nThe app perform huge amount of http requests via HttpClient and store results in MongoDB using latest MongoDB core driver.\r\n\r\nThe app targets `.netcoreapp1.1` and `centos-7.x64`.\r\n\r\nI have no idea what can I do next to identify the memory leak source.\r\n\r\n\r\n\r\n"},{"Id":"7067968435","Type":"IssuesEvent","CreatedAt":"2018-01-08T04:45:52","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/14615","RelatedDescription":"Closed issue \"[Jit x86] Strange property inlining (Desktop CLR v4.7.2053.00)\" (#14615) at dotnet/coreclr","RelatedBody":"Moving the property `Value` below the method `RaiseValue` stops it being inlined\r\n\r\nLive example available on [sharplab.io](https://sharplab.io/#v2:C4LghgzgtgPglgO2AUwE4LAGwAQAEBM2AsssABYD2AJgELKYUDuAsAFADeb232ADqnABuYFNioUArgCNMybAH1hmCcgDcbLj1wBmYqUq16TABTjps7EoCUm7p1Y9H2cnAgA6AGpYV2ALyWsdQceAF8NYO4dMUkZOS9lZFtseyceAHNSPwA+BSUVINTuCEzfHMVvOX88tSSw1iSo3AAWbAAlMFdkeJVTGIteNABjZCQwDJsI5KTHF3duuQBqf3nsACpsYwHUYdGM7AB6bABGAAYTqwLQtjq2RBR0LDxCEnJqAEEpCkFEjiT+IREcjMsVyFSCDV0LwMHy+yF65jk1iSKUKs08FT8AUwl24N0mjRa7U683hIK2O2AY2QE0cKNSaJWS2wK3WmyGI0pe0Op3OOOweMcUWBFnmyOm6RKZWqfMcxWA2VBCUx0tq1zYQA===)\r\n\r\nProgram\r\n```csharp\r\ninternal class MethodBelow\r\n{\r\n    private double _value;\r\n\r\n    public MethodBelow(double val)\r\n    {\r\n        this.Value = val;\r\n    }\r\n\r\n    public double Value\r\n    {\r\n        get => _value;\r\n        set => _value = value;\r\n    }\r\n\r\n    public void RaiseValue(double percentage)\r\n    {\r\n        this.Value += Value * (percentage / 100);\r\n    }\r\n}\r\n\r\ninternal class MethodAbove\r\n{\r\n    private double _value;\r\n\r\n    public MethodAbove(double val)\r\n    {\r\n        this.Value = val;\r\n    }\r\n\r\n    public void RaiseValue(double percentage)\r\n    {\r\n        this.Value += Value * (percentage / 100);\r\n    }\r\n\r\n    public double Value\r\n    {\r\n        get => _value;\r\n        set => _value = value;\r\n    }\r\n}\r\n```\r\nOutput\r\n```asm\r\nMethodAbove.RaiseValue(Double)\r\n    L0000: fld qword [ecx+0x4]\r\n    L0003: fld st0\r\n    L0005: fld qword [esp+0x4]\r\n    L0009: fdiv dword [0x1b3126cc]\r\n    L000f: fmulp st1, st0\r\n    L0011: faddp st1, st0\r\n    L0013: fstp qword [ecx+0x4]\r\n    L0016: ret 0x8\r\n\r\nMethodBelow.RaiseValue(Double)\r\n    L0000: push ebp\r\n    L0001: mov ebp, esp\r\n    L0003: push esi\r\n    L0004: sub esp, 0x8\r\n    L0007: mov esi, ecx\r\n    L0009: mov ecx, esi\r\n    L000b: call MethodBelow.get_Value()\r\n    L0010: mov ecx, esi\r\n    L0012: fstp qword [ebp-0xc]\r\n    L0015: call MethodBelow.get_Value()\r\n    L001a: fld qword [ebp-0xc]\r\n    L001d: fld qword [ebp+0x8]\r\n    L0020: fdiv dword [0x1b312678]\r\n    L0026: fmulp st2, st0\r\n    L0028: faddp st1, st0\r\n    L002a: sub esp, 0x8\r\n    L002d: fstp qword [esp]\r\n    L0030: mov ecx, esi\r\n    L0032: call MethodBelow.set_Value(Double)\r\n    L0037: lea esp, [ebp-0x4]\r\n    L003a: pop esi\r\n    L003b: pop ebp\r\n    L003c: ret 0x8\r\n```\r\n\r\nNoticed by @sonnemaf in https://github.com/szehetner/InliningAnalyzer/issues/2"},{"Id":"7067963375","Type":"IssuesEvent","CreatedAt":"2018-01-08T04:42:36","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/9746","RelatedDescription":"Closed issue \"Process hang in \"coreclr!Thread::DoAppropriateWaitWorker+21b \"\" (#9746) at dotnet/coreclr","RelatedBody":"I took a dump and analyzed with Windbg.\r\nHere is the full log from Windbg:\r\n```\r\n0:000> !analyze -v -hang\r\n*******************************************************************************\r\n*                                                                             *\r\n*                        Exception Analysis                                   *\r\n*                                                                             *\r\n*******************************************************************************\r\n\r\nGetUrlPageData2 (WinHttp) failed: 12029.\r\n\r\nFAULTING_IP: \r\n+0\r\n00000000`00000000 ??              ???\r\n\r\nEXCEPTION_RECORD:  ffffffffffffffff -- (.exr 0xffffffffffffffff)\r\nExceptionAddress: 0000000000000000\r\n   ExceptionCode: 80000003 (Break instruction exception)\r\n  ExceptionFlags: 00000000\r\nNumberParameters: 0\r\n\r\nCONTEXT:  0000000000000000 -- (.cxr 0x0;r)\r\nrax=000000000000080e rbx=0000000000000001 rcx=000000000001c000\r\nrdx=0000000000000800 rsi=0000000000000001 rdi=0000000000000001\r\nrip=00007ff89ca50c6a rsp=000000c691a0dc48 rbp=000000c691a0dfa0\r\nr8=000000c691a0e268  r9=000000c691a0e390 r10=0000000000000000\r\nr11=000000c691a0e390 r12=0000000000000000 r13=000000c691b03188\r\nr14=0000000000000000 r15=0000000000000000\r\niopl=0         nv up ei pl zr na po nc\r\ncs=0033  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000246\r\nntdll!ZwWaitForMultipleObjects+0xa:\r\n00007ff8`9ca50c6a c3              ret\r\n\r\nFAULTING_THREAD:  0000000000000000\r\n\r\nBUGCHECK_STR:  HANG\r\n\r\nDEFAULT_BUCKET_ID:  APPLICATION_HANG\r\n\r\nPROCESS_NAME:  Agent.Worker.exe\r\n\r\nERROR_CODE: (NTSTATUS) 0xcfffffff - <Unable to get error code text>\r\n\r\nEXCEPTION_CODE: (NTSTATUS) 0xcfffffff - <Unable to get error code text>\r\n\r\nNTGLOBALFLAG:  0\r\n\r\nAPPLICATION_VERIFIER_FLAGS:  0\r\n\r\nAPP:  agent.worker.exe\r\n\r\nANALYSIS_VERSION: 6.13.0016.1929 (debuggers(dbg).130725-1857) amd64fre\r\n\r\nMANAGED_STACK: \r\n(TransitionMU)\r\n000000C691A0E350 00007FF890F1E879 System_Private_CoreLib_ni!System.Threading.ManualResetEventSlim.Wait(Int32, System.Threading.CancellationToken)+0x389\r\n000000C691A0E3E0 00007FF890EE6533 System_Private_CoreLib_ni!System.Threading.Tasks.Task.SpinThenBlockingWait(Int32, System.Threading.CancellationToken)+0xb3\r\n000000C691A0E450 00007FF890EE63BF System_Private_CoreLib_ni!System.Threading.Tasks.Task.InternalWait(Int32, System.Threading.CancellationToken)+0x19f\r\n000000C691A0E520 00007FF890F2FAE5 System_Private_CoreLib_ni!System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(System.Threading.Tasks.Task)+0x25\r\n000000C691A0E550 00007FF8319E04A8 Agent_Worker_c6aaf20000!Microsoft.VisualStudio.Services.Agent.Worker.Program.Main(System.String[])+0x28\r\n(TransitionUM)\r\n\r\nMANAGED_STACK_COMMAND:  _EFN_StackTrace\r\n\r\nDERIVED_WAIT_CHAIN:  \r\n\r\nDl Eid Cid     WaitType\r\n-- --- ------- --------------------------\r\n   0   2310.779c Unknown                \r\n\r\nWAIT_CHAIN_COMMAND:  ~0s;k;;\r\n\r\nBLOCKING_THREAD:  000000000000779c\r\n\r\nPRIMARY_PROBLEM_CLASS:  APPLICATION_HANG\r\n\r\nLAST_CONTROL_TRANSFER:  from 00007ff899c613ed to 00007ff89ca50c6a\r\n\r\nSTACK_TEXT:  \r\n000000c6`91a0dc48 00007ff8`99c613ed : 000000c6`91aac670 000000c6`91b02fc0 ffffffff`fffffffe 00007ff8`91443cfa : ntdll!ZwWaitForMultipleObjects+0xa\r\n000000c6`91a0dc50 00007ff8`9140e953 : 00000000`00000000 00007ff6`3d44f000 00000000`00000000 00000000`00000000 : KERNELBASE!WaitForMultipleObjectsEx+0xe1\r\n000000c6`91a0df30 00007ff8`9140e705 : 00007ff8`90b6a180 00007ff8`00000001 00000000`00000001 00000000`00000000 : coreclr!Thread::DoAppropriateWaitWorker+0x21b\r\n000000c6`91a0dfe0 00007ff8`91432bbb : 00007ff8`90b6a450 00007ff8`00000001 00000000`00000000 00007ff8`914b3a26 : coreclr!Thread::DoAppropriateWait+0x7d\r\n000000c6`91a0e060 00007ff8`914b3eba : 00000000`00000001 000000c6`91a0e159 000000c6`aa8661a8 00000000`00000000 : coreclr!CLREventBase::WaitEx+0x57\r\n000000c6`91a0e0b0 00007ff8`91689927 : 00000000`00000000 00000000`00000000 00000000`ffffffff 000000c6`923c5b20 : coreclr!SyncBlock::Wait+0x1de\r\n000000c6`91a0e1c0 00007ff8`90f1e879 : 00007ff8`31863020 00000000`ffffffff 000000c6`9245f478 000000c6`9245f450 : coreclr!ObjectNative::WaitTimeout+0xf7\r\n000000c6`91a0e350 00007ff8`90ee6533 : 000000c6`923c5af8 000000c6`ffffffff 00000000`00000000 00000000`00000000 : System_Private_CoreLib_ni!System.Threading.ManualResetEventSlim.Wait(Int32, System.Threading.CancellationToken)+0x389\r\n000000c6`91a0e3e0 00007ff8`90ee63bf : 000000c6`923c5a58 000000c6`91a0e290 000000c6`91a0e440 000000c6`91a0e658 : System_Private_CoreLib_ni!System.Threading.Tasks.Task.SpinThenBlockingWait(Int32, System.Threading.CancellationToken)+0xb3\r\n000000c6`91a0e450 00007ff8`90f2fae5 : 000000c6`923c5a58 000000c6`ffffffff 00000000`00000000 000000c6`91a0e628 : System_Private_CoreLib_ni!System.Threading.Tasks.Task.InternalWait(Int32, System.Threading.CancellationToken)+0x19f\r\n000000c6`91a0e520 00007ff8`319e04a8 : 000000c6`923c4848 000000c6`91a0e7c0 00007ff8`91442376 00007ff8`31867590 : System_Private_CoreLib_ni!System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(System.Threading.Tasks.Task)+0x25\r\n000000c6`91a0e550 000000c6`923c4848 : 000000c6`91a0e7c0 00007ff8`91442376 00007ff8`31867590 000000c6`91a0e628 : Agent_Worker_c6aaf20000!Microsoft.VisualStudio.Services.Agent.Worker.Program.Main(System.String[])+0x28\r\n000000c6`91a0e558 000000c6`91a0e7c0 : 00007ff8`91442376 00007ff8`31867590 000000c6`91a0e628 00007ff8`916e7463 : 0x000000c6`923c4848\r\n000000c6`91a0e560 00007ff8`91442376 : 00007ff8`31867590 000000c6`91a0e628 00007ff8`916e7463 000000c6`923c4848 : 0x000000c6`91a0e7c0\r\n000000c6`91a0e568 00007ff8`91442376 : 00007ff8`31867590 000000c6`91a0e650 00000000`0000001d 000000c6`91a0e8c8 : coreclr!MethodDesc::RequiresInstArg+0x12\r\n000000c6`91a0e598 000000c6`91a0e8c8 : 000000c6`91a0e8c8 000000c6`91a0e650 00000000`00000000 00000000`00000000 : coreclr!MethodDesc::RequiresInstArg+0x12\r\n000000c6`91a0e5c8 000000c6`91a0e8c8 : 000000c6`91a0e650 00000000`00000000 00000000`00000000 000000c6`91a0e6d0 : 0x000000c6`91a0e8c8\r\n000000c6`91a0e5d0 000000c6`91a0e650 : 00000000`00000000 00000000`00000000 000000c6`91a0e6d0 000000c6`91a0e6e8 : 0x000000c6`91a0e8c8\r\n000000c6`91a0e5d8 00000000`00000000 : 00000000`00000000 000000c6`91a0e6d0 000000c6`91a0e6e8 000000c6`91a0e6e8 : 0x000000c6`91a0e650\r\n\r\n\r\nFOLLOWUP_IP: \r\ncoreclr!Thread::DoAppropriateWaitWorker+21b [d:\\a\\_work\\38\\s\\src\\vm\\threads.cpp @ 4462]\r\n00007ff8`9140e953 8bd8            mov     ebx,eax\r\n\r\nFAULTING_SOURCE_LINE:  d:\\a\\_work\\38\\s\\src\\vm\\threads.cpp\r\n\r\nFAULTING_SOURCE_FILE:  d:\\a\\_work\\38\\s\\src\\vm\\threads.cpp\r\n\r\nFAULTING_SOURCE_LINE_NUMBER:  4462\r\n\r\nSYMBOL_STACK_INDEX:  2\r\n\r\nSYMBOL_NAME:  coreclr!Thread::DoAppropriateWaitWorker+21b\r\n\r\nFOLLOWUP_NAME:  wintriag\r\n\r\nMODULE_NAME: coreclr\r\n\r\nIMAGE_NAME:  coreclr.dll\r\n\r\nDEBUG_FLR_IMAGE_TIMESTAMP:  575f5c74\r\n\r\nSTACK_COMMAND:  ~0s ; kb\r\n\r\nBUCKET_ID:  HANG_coreclr!Thread::DoAppropriateWaitWorker+21b\r\n\r\nFAILURE_BUCKET_ID:  APPLICATION_HANG_cfffffff_coreclr.dll!Thread::DoAppropriateWaitWorker\r\n\r\nANALYSIS_SOURCE:  UM\r\n\r\nFAILURE_ID_HASH_STRING:  um:application_hang_cfffffff_coreclr.dll!thread::doappropriatewaitworker\r\n\r\nFAILURE_ID_HASH:  {847285e9-eb18-8e39-b0cd-1b33504dccf9}\r\n\r\nFollowup: wintriag\r\n---------\r\n\r\n0:000> !gle\r\nLastErrorValue: (Win32) 0 (0) - The operation completed successfully.\r\nLastStatusValue: (NTSTATUS) 0xc000007c - An attempt was made to reference a token that doesn't exist.  This is typically done by referencing the token associated with a thread when the thread is not impersonating a client.\r\n\r\n```\r\n\r\nIt happened few times, any suggestion on this error?\r\nI can share the .dmp file I had."},{"Id":"7067899938","Type":"IssuesEvent","CreatedAt":"2018-01-08T04:03:07","Actor":"benaadams","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/15779","RelatedDescription":"Opened issue \"Does EDI message provide benefit? \"End of stack trace from previous location...\"\" (#15779) at dotnet/coreclr","RelatedBody":"Using async (and `ExceptionDispatchInfo` in other areas) ends up outputting lots of lines that are:\r\n`--- End of stack trace from previous location where exception was thrown ---`\r\n\r\ne.g.\r\n\r\nExample 1\r\n```\r\nSystem.Exception: Exception of type 'System.Exception' was thrown.\r\n   at ExecutionContextTest.Program.<ExceptionTrace>d__2.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at ExecutionContextTest.Program.<ExceptionTrace>d__2.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at ExecutionContextTest.Program.<ExceptionTrace>d__2.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at ExecutionContextTest.Program.<ExceptionTrace>d__2.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at ExecutionContextTest.Program.<Main>d__0.MoveNext()\r\n```\r\nI'm not sure the benefit this has over: (resolving async aside https://github.com/dotnet/coreclr/pull/14655)\r\n\r\nExample 2\r\n```\r\nSystem.Exception: Exception of type 'System.Exception' was thrown.\r\n   at ExecutionContextTest.Program.<ExceptionTrace>d__2.MoveNext()\r\n   at ExecutionContextTest.Program.<ExceptionTrace>d__2.MoveNext()\r\n   at ExecutionContextTest.Program.<ExceptionTrace>d__2.MoveNext()\r\n   at ExecutionContextTest.Program.<ExceptionTrace>d__2.MoveNext()\r\n   at ExecutionContextTest.Program.<Main>d__0.MoveNext()\r\n```\r\nFor async the traces could be prefix if it is an async method (as its known while resolving the async method) for clues:\r\n\r\nExample 3\r\n```\r\nSystem.Exception: Exception of type 'System.Exception' was thrown.\r\n   at async ExecutionContextTest.Program.<ExceptionTrace>d__2.MoveNext()\r\n   at async ExecutionContextTest.Program.<ExceptionTrace>d__2.MoveNext()\r\n   at async ExecutionContextTest.Program.<ExceptionTrace>d__2.MoveNext()\r\n   at async ExecutionContextTest.Program.<ExceptionTrace>d__2.MoveNext()\r\n   at async ExecutionContextTest.Program.<Main>d__0.MoveNext()\r\n```\r\n\r\nIf it only output indicating when an async method was actual suspended and resumed it would be more of an interesting marker, but that's not what it currently does.\r\n\r\nDoes it currently provide benefits? Thoughts?\r\n\r\n**Aside:** Xunit removes its own stacks but leaves in the EDI lines so you end up with\r\n```\r\n   at System.IO.Compression.CompressionStreamUnitTestBase.<Dispose_WithUnfinishedWriteAsync>d__5.MoveNext() in D:\\j\\workspace\\windows-TGrou---f8ac6754\\src\\Common\\tests\\System\\IO\\Compression\\CompressionStreamUnitTestBase.cs:line 208\r\n--- End of stack trace from previous location where exception was thrown ---\r\n--- End of stack trace from previous location where exception was thrown ---\r\n--- End of stack trace from previous location where exception was thrown ---\r\n```"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7066006527","Type":"IssuesEvent","CreatedAt":"2018-01-07T04:23:41","Actor":"firelizzard18","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8342","RelatedDescription":"Opened issue \"Creating a local CLI took package\" (#8342) at dotnet/cli","RelatedBody":"I have a project, `dotnet-mycmd`. I want to use this as a tool in another project via `DotNetCliToolReference`. I've exported a nupkg to a folder and added that folder to the target project's `RestoreSources`. I then added the tool reference and attempted to `dotnet restore`.\r\n\r\nThis succeeds when the project is named something like `mycmd` but fails in all sorts of ways when its named `dotnet-mycmd`. And of course it doesn't work as a tool when the name isn't prefixed with `dotnet-`.\r\n\r\nIn my reproduction ([test.zip](https://github.com/dotnet/cli/files/1609495/test.zip)):\r\n  * A is a netstandard lib\r\n  * A2 is a netstandard lib dependent on A\r\n  * B/dotnet-mycmd is a netcoreapp dependent on A and A2\r\n  * C is a netstandard lib dependent on A with a tool reference to B/dotnet-mycmd\r\n\r\nCurrently, I'm getting these errors (in my reproduction attempt):\r\n```\r\n% dotnet restore C\r\n  Restoring packages for /Users/me/Source/test/C/C.csproj...\r\n  Restore completed in 10.04 ms for /Users/me/Source/test/A/A.csproj.\r\n  Restore completed in 22.78 ms for /Users/me/Source/test/C/C.csproj.\r\n/Users/me/Source/test/C/C.csproj : error NU1101: Unable to find package dotnet-mycmd. No packages exist with this id in source(s): nuget.org\r\n/usr/local/share/dotnet/sdk/2.1.3/NuGet.targets(103,5): error : Value cannot be null. [/Users/me/Source/test/C/C.csproj]\r\n/usr/local/share/dotnet/sdk/2.1.3/NuGet.targets(103,5): error : Parameter name: path [/Users/me/Source/test/C/C.csproj]\r\n```\r\n\r\nThese are the errors I was getting before I tried to reproduce the issue, translated into the projects I created for the reproduction:\r\n```\r\n/Users/me/Source/test/C/C.csproj : error NU1101: Unable to find package A. No packages exist with this id in source(s): nuget.org\r\n/Users/me/Source/test/C/C.csproj : error NU1101: Unable to find package A2. No packages exist with this id in source(s): nuget.org\r\n```\r\n"},{"Id":"7065459618","Type":"PullRequestEvent","CreatedAt":"2018-01-06T20:18:38","Actor":"natemcmaster","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8341","RelatedDescription":"Opened pull request \"Update to ASP.NET Core shared framework 2.1.0-preview1-28006\" (#8341) at dotnet/cli","RelatedBody":"In 2.1.0, ASP.NET Core is replacing the runtime package store with a shared framework, similar to Microsoft.NETCore.App. This PR updates packages and installers to pull the sharedfx instead of the runtime store.\r\n\r\nIn this PR:\r\n - updates to 2.1.0-preview1-28006\r\n - Unifies aspnetcore packages and installer downloads to one version variable\r\n - Unifies to one aspnetcore myget feed\r\n\r\nNot in this PR:\r\n - debian agnostic aspnetcore installers\r\n - orchestrated build support\r\n - because the \"trampoline\" from the 2.0 runtime store to 2.1 shared framework is not yet implemented in corehost, I'll send a second PR soon to include the 2.0 runtime store alongside the 2.1 aspnetcore shared fx. Our goal is to have the host updated so this can be removed before rtm."},{"Id":"7064116145","Type":"PullRequestEvent","CreatedAt":"2018-01-06T02:17:06","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8336","RelatedDescription":"Merged pull request \"Reacting to core-setup changes for 'DEB' distro agnostic installers\" (#8336) at dotnet/cli","RelatedBody":"Reacting to core-setup changes for 'DEB' distro agnostic installers. \r\n\r\nExample:\r\nThese installers:\r\ndotnet-runtime-2.1.0-preview1-26103-03-debian.8-x64.deb\r\ndotnet-runtime-2.1.0-preview1-26103-03-debian.9-x64.deb\r\ndotnet-runtime-2.1.0-preview1-26103-03-ubuntu.14.04-x64.deb\r\ndotnet-runtime-2.1.0-preview1-26103-03-ubuntu.16.04-x64.deb\r\ndotnet-runtime-2.1.0-preview1-26103-03-ubuntu.17.04-x64.deb\r\ndotnet-runtime-2.1.0-preview1-26103-03-ubuntu.17.10-x64.deb\r\nhave been coalesced to: \r\nruntime-2.1.0-preview1-26104-06-x64.deb\r\n\r\nContains: https://github.com/dotnet/cli/pull/8325\r\nUpdate CoreSetup to preview1-26105-01\r\n\r\n\r\n\r\n"},{"Id":"7064042382","Type":"IssuesEvent","CreatedAt":"2018-01-06T01:25:58","Actor":"rohit21agrawal","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8340","RelatedDescription":"Opened issue \"dotnet publish doesn't copy references with privateassets=all to publish directory\" (#8340) at dotnet/cli","RelatedBody":"Repro steps:\r\n\r\n1) Create a new netcoreapp or netstandard library and add net46 as framework as well\r\n2) add a package dependency like newtonsoft.json and set privateassets=all\r\n3) run dotnet publish --self-contained for both frameworks\r\n\r\nnewtonsoft.json is copied to publish dir for net46 while it is not copied to publish dir for netstandard/netcoreapp frameworks."},{"Id":"7063674803","Type":"PullRequestEvent","CreatedAt":"2018-01-05T22:45:42","Actor":"dotnet-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8339","RelatedDescription":"Opened pull request \"Update CoreSetup to preview1-26105-02 (master)\" (#8339) at dotnet/cli","RelatedBody":"/cc @dotnet/dotnet-cli"},{"Id":"7063475395","Type":"IssuesEvent","CreatedAt":"2018-01-05T21:46:14","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/8334","RelatedDescription":"Closed issue \"Install scripts likely need to be updated to support acquiring the asp.net shared framework.\" (#8334) at dotnet/cli","RelatedBody":"People are going to want to do something similar to this but get ASP.NET + the Core Shared runtime.\r\n\r\n```\r\nwget https://dot.net/v1/dotnet-install.sh\r\nchmod 700 dotnet-install.sh\r\n./dotnet-install.sh --channel 2.0 --install-dir \"$netdir\" --shared-runtime --no-path\r\n```\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7058805790","Type":"PullRequestEvent","CreatedAt":"2018-01-04T21:57:28","Actor":"dotnet-maestro-bot","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/618","RelatedDescription":"Opened pull request \"Update BuildTools to prerelease-02404-01 (master)\" (#618) at dotnet/standard","RelatedBody":""},{"Id":"7056464684","Type":"IssuesEvent","CreatedAt":"2018-01-04T12:53:29","Actor":"viswa18","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/611","RelatedDescription":"Closed issue \"System.Diagnostics.Process.Start(info) show icon in Mac\" (#611) at dotnet/standard","RelatedBody":"I am having a simple C++ command line app, which is starts from .NetStandard2.0 class library. Below is code snippet to start the process, but it show dock icon in mac. \r\n\r\n```\r\nSystem.Diagnostics.ProcessStartInfo info = new System.Diagnostics.ProcessStartInfo \r\n{\r\nFileName = helloworld\",\r\nRedirectStandardOutput = true,\r\nRedirectStandardError = true,\r\nUseShellExecute = false,\r\nCreateNoWindow = true,\r\nArguments = args,\r\nWindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden, \r\nErrorDialog = false,\r\n};\r\nSystem.Diagnostics.Process process = System.Diagnostics.Process.Start(info);\r\n```\r\nIs it possible to prevent the icon in dock for mac? "},{"Id":"7054495904","Type":"PullRequestEvent","CreatedAt":"2018-01-04T01:09:14","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/617","RelatedDescription":"Merged pull request \"Update BuildTools to prerelease-02403-01 (master)\" (#617) at dotnet/standard","RelatedBody":""},{"Id":"7054119223","Type":"PullRequestEvent","CreatedAt":"2018-01-03T22:46:21","Actor":"dotnet-maestro-bot","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/617","RelatedDescription":"Opened pull request \"Update BuildTools to prerelease-02403-01 (master)\" (#617) at dotnet/standard","RelatedBody":""},{"Id":"7053032329","Type":"IssuesEvent","CreatedAt":"2018-01-03T18:01:03","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/605","RelatedDescription":"Closed issue \"NETStandard 2.0 Project Template not working properly.\" (#605) at dotnet/standard","RelatedBody":"I've an issue when creating project template in VS 2017 15.5.1 version.\r\n\r\nWhen i create a project template and use it to create a project. There is no file existed in there regarding my project templates have many files.\r\n\r\nSteps to re-produce the bug:\r\n- Create a NETStandard2 class library in VS 2017.\r\n- Create multiple files in there.\r\n- Export Template for that projects.\r\n- Copy that template into: C:\\Users\\{Username}\\Documents\\Visual Studio 2017\\Templates\\ProjectTemplates \r\n- Create a project base on that template.\r\n\r\nAnyone have any idea for this one?"},{"Id":"7053021857","Type":"IssuesEvent","CreatedAt":"2018-01-03T17:58:34","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/613","RelatedDescription":"Closed issue \"Issue with referencing a .NET Standard 2.0 project with an classic ASP.NET project targeting .NET Framework 4.6.1\" (#613) at dotnet/standard","RelatedBody":"I refer to my original issue submitted to Autofac [here](https://github.com/autofac/Autofac.WebApi/issues/32). I originally thought it was an Autofac issue but turns out it is not as I can reproduce it without Autofac.\r\n\r\n# Summary\r\n`MissingMethodException` is thrown when resolving for a component through a delegate that returns a type defined in a .NET Standard 2.0 library, under the context of an classic ASP.NET Web API project.\r\n\r\n# Environment\r\n- Windows 10 (Version 10.0.16299)\r\n- Visual Studio 2017 15.5.2\r\n- .NET Core SDK 2.1.3 (64-bit) installed\r\n\r\n# Steps to reproduce\r\n1. Create two projects as follows\r\n    - A .NET Standard 2.0 library\r\n    - A classic ASP.NET Web API project targeting .NET Framework 4.6.1\r\n2. Define an interface and an implementing class pair in the .NET standard library as follows:\r\n```c#\r\npublic interface IFoo { void DoSomething(); }\r\n\r\npublic class Foo : IFoo\r\n{\r\n    private readonly HttpClient _httpClient;\r\n\r\n    public Foo(HttpClient httpClient) => _httpClient = httpClient;\r\n\r\n    public void DoSomething() { /* No-op */ }\r\n}\r\n```\r\n3. Reference the .NET Standard library from the ASP.NET Web API project\r\n4. Implement a dummy controller that initialises the `IFoo` private field\r\n\r\n\r\n```c#\r\npublic class DummyController : ApiController\r\n{\r\n    private readonly IFoo _foo;\r\n\r\n    public DummyController() => _foo = new Foo(new HttpClient);\r\n\r\n    [HttpGet]\r\n    public IHttpActionResult Test() => Ok(\"a\");\r\n}\r\n```\r\n\r\nNote that I have a parameterless contructor for `DummyController`.\r\n\r\n5. Run the ASP.NET Web API application and visit `/api/dummy/test`.\r\n\r\n# Expected behaviour\r\n`\"a\"` is returned.\r\n\r\n# Actual behaviour\r\n`InvalidOpeartionException` is thrown with the inner exception `MissingMethodException`.\r\n\r\nStack trace:\r\n<pre>\r\nAn error has occurred.An error occurred when trying to create a controller of type 'DummyController'. Make sure that the controller has a parameterless public constructor.System.InvalidOperationException   at System.Web.Http.Dispatcher.DefaultHttpControllerActivator.Create(HttpRequestMessage request, HttpControllerDescriptor controllerDescriptor, Type controllerType)\r\n   at System.Web.Http.Controllers.HttpControllerDescriptor.CreateController(HttpRequestMessage request)\r\n   at System.Web.Http.Dispatcher.HttpControllerDispatcher.<SendAsync>d__1.MoveNext()An error has occurred.Method not found: 'Void AutofacNetStandara.Library.Foo..ctor(System.Net.Http.HttpClient)'.System.MissingMethodException   at AutofacNetStandard.Web.Controllers.DummyController..ctor()\r\n   at lambda_method(Closure )\r\n   at System.Web.Http.Dispatcher.DefaultHttpControllerActivator.Create(HttpRequestMessage request, HttpControllerDescriptor controllerDescriptor, Type controllerType)\r\n</pre>\r\n---------\r\n# Additional things I have tried\r\n\r\n## Reference the same .NET Standard project from a .NET Framework 4.6.1 **Console** project, with the `Main` method initailizing `Foo`:\r\n```c#\r\nclass Program\r\n{\r\n    static void Main(string[] args)\r\n    {\r\n        var foo = new Foo(new HttpClient());\r\n\r\n        Console.ReadLine();\r\n    }\r\n}\r\n```\r\nNo runtime exceptions are thrown and `foo` variable is initialised correctly.\r\n\r\n## Moving the initialisation of `Foo._httpClient` to the default constructor of `Foo` and call the empty constructor from the web project instead, like:\r\n```c#\r\n// In the .NET Standard 2.0 library\r\npublic class Foo : IFoo\r\n{\r\n    private readonly HttpClient _httpClient;\r\n\r\n    public Foo() => _httpClient = new HttpClient();\r\n\r\n    public void DoSomething() { }\r\n}\r\n\r\n// In the ASP.NET project, targeting .NET 4.6.1\r\npublic class ValuesController : ApiController\r\n{\r\n    private readonly IFoo _foo;\r\n\r\n    public ValuesController() => _foo = new Foo();\r\n\r\n    [HttpGet]\r\n    public IHttpActionResult Test() => Ok(\"a\");\r\n}\r\n```\r\n`\"a\"` is returned as expected when visiting the route `/api/values/test`.\r\n"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7068011776","Type":"IssuesEvent","CreatedAt":"2018-01-08T05:12:45","Actor":"jkotas","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/23470","RelatedDescription":"Closed issue \"The throw keyword shows the wrong thrown exception line\" (#23470) at dotnet/corefx","RelatedBody":"Using .NETCore2.0, Win10, it seems the `throw` keywor\r\n\r\nUsing the `throw` keyword loose all the initial stacktrace information. \r\nYou can workaround with `ExceptionDispatchInfo.Capture(ex).Throw();`, but this seems like a bug to me.\r\n\r\n```\r\nusing System;\r\n\r\nnamespace ConsoleApp3\r\n{\r\n\tclass Program\r\n\t{\r\n\t\tstatic void Main(string[] args)\r\n\t\t{\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\tDoStuff();\r\n\t\t\t}\r\n\t\t\tcatch(Exception ex)\r\n\t\t\t{\r\n\t\t\t\tConsole.WriteLine(ex.StackTrace);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t}\r\n\r\n\t\tprivate static void DoStuff()\r\n\t\t{\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\tthrow new Exception(\"Boom!\");\r\n\t\t\t}\r\n\t\t\tcatch(Exception ex)\r\n\t\t\t{\r\n\t\t\t\tthrow;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n```\r\nActual output: (Exception line 28)\r\n\r\n```\r\n   at ConsoleApp3.Program.DoStuff() in c:\\users\\nicolasdorier\\documents\\visual studio 2017\\Projects\\ConsoleApp3\\ConsoleApp3\\Program.cs:line 28\r\n   at ConsoleApp3.Program.Main(String[] args) in c:\\users\\nicolasdorier\\documents\\visual studio 2017\\Projects\\ConsoleApp3\\ConsoleApp3\\Program.cs:line 11\r\n```\r\n\r\nExpected output: (Exception line 24)\r\n\r\n```\r\n   at ConsoleApp3.Program.DoStuff() in c:\\users\\nicolasdorier\\documents\\visual studio 2017\\Projects\\ConsoleApp3\\ConsoleApp3\\Program.cs:line 24\r\n   at ConsoleApp3.Program.Main(String[] args) in c:\\users\\nicolasdorier\\documents\\visual studio 2017\\Projects\\ConsoleApp3\\ConsoleApp3\\Program.cs:line 11\r\n```\r\n\r\nWorkaround using `ExceptionDispatchInfo.Capture(ex).Throw();`:\r\n\r\n```\r\nusing System;\r\nusing System.Runtime.ExceptionServices;\r\n\r\nnamespace ConsoleApp3\r\n{\r\n\tclass Program\r\n\t{\r\n\t\tstatic void Main(string[] args)\r\n\t\t{\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\tDoStuff();\r\n\t\t\t}\r\n\t\t\tcatch(Exception ex)\r\n\t\t\t{\r\n\t\t\t\tConsole.WriteLine(ex.StackTrace);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t}\r\n\r\n\t\tprivate static void DoStuff()\r\n\t\t{\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\tthrow new Exception(\"Boom!\");\r\n\t\t\t}\r\n\t\t\tcatch(Exception ex)\r\n\t\t\t{\r\n\t\t\t\tExceptionDispatchInfo.Capture(ex).Throw();\r\n\t\t\t\tthrow;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n```"},{"Id":"7067410785","Type":"IssuesEvent","CreatedAt":"2018-01-07T22:41:56","Actor":"Tratcher","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/26212","RelatedDescription":"Closed issue \"Session OnStart and Session OnEnd\" (#26212) at dotnet/corefx","RelatedBody":"I came here from https://github.com/aspnet/Session/issues/20\r\n\r\n@Tratcher @davidfowl @muratg\r\nIf you are not going to implement session onend; why we're setting the sessiontimeout?\r\nI read all of above, but not implementing sesion onend is really strange decision. Every application uses session events. Also @Tratcher adviced that we can store data on sql not session. This is also not acceptable...\r\n\r\nMy issue is I need session start event to recognize user from its cookie to auto login. But I cant handle session start atm...\r\n  "},{"Id":"7067259756","Type":"IssuesEvent","CreatedAt":"2018-01-07T20:59:02","Actor":"ErcinDedeoglu","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/26212","RelatedDescription":"Opened issue \"Session OnStart and Session OnEnd\" (#26212) at dotnet/corefx","RelatedBody":"I came here from https://github.com/aspnet/Session/issues/20\r\n\r\n@Tratcher @davidfowl @muratg\r\nIf you are not going to implement session onend; why we're setting the sessiontimeout?\r\nI read all of above, but not implementing sesion onend is really strange decision. Every application uses session events. Also @Tratcher adviced that we can store data on sql not session. This is also not acceptable...\r\n\r\nMy issue is I need session start to recognize user from its cookie to auto login. But I cant handle session start atm..."},{"Id":"7067210406","Type":"IssuesEvent","CreatedAt":"2018-01-07T20:24:46","Actor":"karelz","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/corefx/issues/23362","RelatedDescription":"Reopened issue \"HttpClient don't send SSL server_name extension\" (#23362) at dotnet/corefx","RelatedBody":"Hi,\r\n\r\nThe aim is to test a web farm. DNS is configured with one IP (behind there are several servers) and redirect to one web server.\r\n\r\nTo test one server in web farm, in framework 4.6.2, I use with sample code:\r\n\r\n```C#\r\n          string host = \"www.ebay.fr\";\r\n\r\n            IPHostEntry hostEntry;\r\n            hostEntry = Dns.GetHostEntry(host);\r\n\r\n            ///// HttpClient Test\r\n            HttpClientHandler httpClientHandler = new HttpClientHandler();\r\n            HttpClient client = new HttpClient(httpClientHandler);\r\n            client.BaseAddress = new Uri(\"https://\" + hostEntry.AddressList[0].ToString());\r\n            client.DefaultRequestHeaders.UserAgent.ParseAdd(\"Mozilla/5.0 (compatible;\" + DateTime.Now + \" \" + DateTime.Now.Millisecond + \")\");\r\n            client.DefaultRequestHeaders.Host = host;\r\n\r\n            HttpRequestMessage request = new HttpRequestMessage(HttpMethod.Get, client.BaseAddress);\r\n            request.Headers.Host = host;\r\n            request.Headers.UserAgent.ParseAdd(\"Mozilla/5.0 (compatible;\" + DateTime.Now + \" \" + DateTime.Now.Millisecond + \")\");\r\n\r\n            Task<HttpResponseMessage> task = client.SendAsync(request);\r\n            task.Wait();\r\n            HttpResponseMessage respones = task.Result;\r\n\r\n```\r\n\r\nWith framework 4.6.2, it is work fine.\r\n\r\n**But in .net core 2**, with a test on IIS server web server, the connexion close when web client try to negociate SSL.\r\nHere I use \"ebay\" server but it is work on it. I don't found a IIS server on web. My web farm is not access from web.\r\n\r\nI debug the connection with WireShark to see the network data:\r\n**With .net core2**\r\n![image](https://user-images.githubusercontent.com/20461115/29434016-b34561e2-83a1-11e7-81f8-2f2af5786660.png)\r\n\r\n**With Framework 4.6.2**\r\n![image](https://user-images.githubusercontent.com/20461115/29434003-aa4457ba-83a1-11e7-9d9c-04dd54f65982.png)\r\n\r\n\r\n📌  I think the issue is with .net core, **the extension server_name is not defined**. IIS server should need known the certificat to take.\r\n.net core 2 should define server_name from client.DefaultRequestHeaders.Host or request.Headers.Host (even if BaseAddress is an IP)  ?\r\n\r\n\r\n\r\n**For more information:**\r\n[https://idea.popcount.org/2012-06-16-dissecting-ssl-handshake/](url)\r\n\r\n> TLS introduces a number of extensions. Most notably the server_name / Server Name Indication (SNI) extension is used to specify a remote host name. This allows the server to choose appropriate certificate based on the requested host name. With this extension one can host many SSL-enabled vhosts on a single IP address.\r\n"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7068008031","Type":"IssuesEvent","CreatedAt":"2018-01-08T05:10:31","Actor":"Jaans","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/24095","RelatedDescription":"Opened issue \"Issue with Microsoft.CodeAnalysis.CSharp.Scripting NuGet package: Referenced component could not be found.\" (#24095) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\n\r\nVisual Studio: 2017 Enterprise v15.5.2\r\nTarget Platform: .NET Framework 4.7.1\r\nNuGet Package: Microsoft.CodeAnalysis.CSharp.Scripting v2.6.1\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Open Visual Studio 2017\r\n2. Create a new Class Library project that targets the .NET Framework 4.7.1\r\n3. Install NuGet Package (Microsoft.CodeAnalysis.CSharp.Scripting)\r\n4. Expand References and observe that all references are resolved\r\n4. Save solution\r\n5. Close Visual Studio\r\n6. Open Visual Studio\r\n7. Open solution created in step 2 above\r\n8. Expand References and observe numerous references are missing (e.g. System.AppContext, System.Console, etc.)\r\n9. Rebuilding the project and observe the missing references in the \"Error List\" window.\r\n\r\nScreenshot attached: \r\n![roslynscriptingissue-brokenreferences](https://user-images.githubusercontent.com/3510981/34659553-aaca0ce8-f485-11e7-8e72-5c7ca5c80dbe.png)\r\n\r\nShort video demonstrating issue available here: \r\n[https://1drv.ms/v/s!AgAiVv0LV97frddNn1iuxY9mpuEgnw](https://1drv.ms/v/s!AgAiVv0LV97frddNn1iuxY9mpuEgnw) \r\n\r\n**Expected Behavior**:\r\nExpect references to not be missing.\r\n\r\n**Actual Behavior**:\r\nReferences are broken and errors reported \"The referenced component 'System.AppContext' could not be found\"\r\n\r\nPlease help!"},{"Id":"7067906195","Type":"IssuesEvent","CreatedAt":"2018-01-08T04:06:41","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/15619","RelatedDescription":"Closed issue \"Extend Out Variable support to LINQ\" (#15619) at dotnet/roslyn","RelatedBody":"Consider this case for out variable use:\r\n\r\n```\r\nvar strings = new[] { \"1\", \"2\" };\r\n\r\nvar ints = from s in strings\r\n           where int.TryParse(s, out int i)\r\n           select i;\r\n```\r\n\r\nThis won't work due to how \"out int\" is transformed -- it is scoped to the delegate passed to `Where()`. Out variables should be extended for more natural LINQ integration."},{"Id":"7067902523","Type":"IssuesEvent","CreatedAt":"2018-01-08T04:04:37","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/6673","RelatedDescription":"Closed issue \"JSON-like syntax for dictionary/array initialization and operation\" (#6673) at dotnet/roslyn","RelatedBody":"Now :\n\n```\nvar dict = new Dictionary<string,object>{\n    [\"key1\"]  = 1,\n    [\"key2\"] = new Dictionary<string,object>{\n       ....\n    }\n}\n```\n\nthis syntax is very ugly\nwhile JSON based integration is very usefull for now (ElasticSearch, MongoDB, numerous REST-based services) it will be good idea provide more native way to use JSON notation in C#\nAdditionally it could be usefull provide lightweight JSON notation closer to JS / anonymous class declaration.\nWhat is my dream:\n\n```\nint z= 3;\nvar query = {\n   z,\n   x : 1,\n   \"b\" : {\n          c : [ 1, 2, 3]\n   } ,\n   a = 2\n};\n\n```\n\nwhere {...} after assign operator treats as  JSON-like ctor for Dictionary<string,object>\nwith following notation :\nJCTOR -> { PROP[, PROP]\\* }\nPROP -> NAME ASSIGN VALUE | SCOPE_NAME (as in anonymous classes)\nASSIGN  -> = | : (both assign operators should be valid)\nNAME -> STRING | LITERAL (both JSON and JS/anon class methods of name definition)\nVALUE -> ANY (nested JCTOR, ARRAYS, terminal values, expressions)\n\nExample above should internally translated to:\n\n```\nint z= 3;\nvar query = new Dictionary<string,object> {\n   [\"z\"] = z,\n   [\"x\"] = 1,\n   [\"b\"] = new Dictionary<string,object> {\n          [\"c\"] = new [] { 1, 2, 3 }\n   } ,\n   [\"a\"] = 2\n};\n```\n\nSo we can use json/js syntax without using any external classes at runtime.\n\nMore live example\n\n```\nvar id = \"xxx\";\n// we setup it even simpler that with JSON (no quotes)\nvar es_query = {\n    query : {\n        query_string : {\n            query : $\"_id:{id} AND other:true\"\n        }\n    }\n};\n//but while it's just usual Dictionary we can work with it\nif( size != -1){\n    es_query[nameof(size)] = size; \n}\n...\n\n```\n"},{"Id":"7067697636","Type":"IssuesEvent","CreatedAt":"2018-01-08T02:11:10","Actor":"vsfeedback","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/24093","RelatedDescription":"Opened issue \"GetHashCode generator doesn't take into account checked environment\" (#24093) at dotnet/roslyn","RelatedBody":"If the compiler needs to &quot;check for arithmetic overflow/underflow&quot;, the GetHashCode code generator should generate code within an &quot;unchecked&quot; scope.\n\nIt could even do this independently on the compiler setting, such that the code just keeps working when changing the compiler setting later.\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/176727/gethashcode-generator-doesnt-take-into-account-che.html\nVSTS ticketId: 546722_\n_These are the original issue comments:_\n(no comments)\n_These are the original issue solutions:_\n(no solutions)"},{"Id":"7067694309","Type":"IssuesEvent","CreatedAt":"2018-01-08T02:09:09","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/13728","RelatedDescription":"Closed issue \"Proposal: Simple code generation with textual, \"preprocessor\" macros\" (#13728) at dotnet/roslyn","RelatedBody":"First, let me preface this by saying that I am a proponent of hygienic macros to eventually come to Roslyn, as well as powerful metaprogramming capabilities. I know that this is not that. But I also am trying to come up with a small, focused idea that could still solve real-world problems. \n\nMany people think macros are only good for pseudo-obfuscating header trickery in C, etc. But this was inspired by a problem I had recently. If you disagree with the merits of this example, that's fine - I just want to show that it can be useful beyond C-level macro nightmares.\n\nLet's say that I have these two entities in a database layer of some sort.\n\n``` c#\npublic class Post {\n    [Key]\n    public Guid PostID { get; set; }\n    public string Title { get; set; }\n}\n\npublic class Comment {\n    [Key]\n    public Guid CommentID { get; set; }\n    public Guid PostID { get; set; }\n    public string Text { get; set;\n}\n```\n\nIf I want to do something similar for every such entity, the usual answers are interface/base class polymorphism and reflection.\n\nLet's say I wanted to write this method for every entity:\n\n``` c#\npublic IReadOnlyDictionary<Guid, Post> GetAllPostsByID(DbContext ctx)\n    => ctx.Posts.ToDictionary(p => p.PostID);\n```\n\nInterfaces and base classes won't let you do that - `PostID` is different from `CommentID`. Even if I invented this interface...\n\n``` c#\npublic interface IKeyed {\n    Guid ID { get; }\n}\n\npublic class Post : IKeyed {\n    public Guid ID => PostID;\n    // ...\n}\n```\n\n...it would end up doing the wrong thing - assuming Entity Framework, `ID` is not visible to the data model, and not translated to the right thing. Either the query fails, or Entity Framework ends up pulling down the whole contents and doing the `ToDictionary` locally.\n\nReflection is doable, but in this case it involves writing a method to dig through the type, find the property with the `KeyAttribute` and construct the lambda expression tree. This is many more minutes out of my time than just writing everything manually.\n\nWriting manually is what we all end up doing. But little connector/adapter things like this are a big part of many programs. The people who have powerful tools for code generation already set up will maybe use them for this. But what if a simple subset of that, maybe enough to cover 80% of what you'd need a full tool for, would be in the box with C# too? So here is my proposal:\n\n``` c#\n#macro ImplementGetAllByID(one, set, key)\n    public IReadOnlyDictionary<Guid, #{one}> GetAll#{set}ByID(DbContext ctx)\n            => ctx.#{set}.ToDictionary(_ => _.#{key});\n#endmacro\n\npublic partial class Wherever {\n#expand ImplementGetAllByID(one:Post, set:Posts, key:PostID)\n#expand ImplementGetAllByID(one:Comment, set:Comments, key:CommentID)\n}\n```\n\nThe compiler does not have any preprocessing stage, but at the stage just before `#if` and friends are evaluated, the macros are expanded too, by substituting the placeholders (`#{one}`; syntactically unambiguous with curlies stolen from string interpolation and `#` from \"preprocessor\", but if you call it a tribute to Ruby I won't correct you) with the values. Instead of paying a reflection tax for simple things like this, it is as if you just wrote the right code from the beginning - you just didn't have to do it manually.\n\nIn fact, macros could be implemented with other macros:\n\n``` c#\n#macro ImplementGetAllByIDSimple(name)\n#expand ImplementGetAllByID(one:#{name}, set:#{name}s, key:#{name}ID)\n#endmacro\n\npublic partial class Wherever {\n#expand ImplementGetAllByIDSimple(name:Post)\n#expand ImplementGetAllByIDSimple(name:Comment)\n}\n```\n\nExpansion is exactly equal to replacing each placeholder `#{foo}` with the text given for the `foo` parameter. If it is a literal, it becomes a literal; if it is part of an identifier, it becomes an identifier. The parameter values are not strings, not identifiers, not symbols - they are just \"characters in the input stream\"; text. Their meaning will only be fully resolved when macro expansion is complete. Parameter names are _mandatory_, to give good error messages when someone changes something.\n\nHaving something like this would allow many people to fall into \"the pit of success\" for this sort of problem. Here, success isn't doing reflection, which is running unnecessary code at run-time at a performance hit (reflection is the right tool where you need the dynamism); for the cases where abstractions are hard to make using the tools in C#'s playbook, success is code generation.\n\nI want code generation to be a tool you can reach for to solve smaller problems, and not just something you break out for the really big ones. Imagine typing the macros in the editor and seeing it fill out the implementation for you in a collapsed `#region`. It's not meant to be a secret to you, it's just meant to save you the labor of typing and the danger of copying and pasting (at least the danger of things going out of sync). There already is a pattern to what you're writing; macros let you document and exploit that pattern.\n\nEven if nothing else, this proposal would be a very cool thing to see built as a tool you could plug in before the compiler runs. \n"},{"Id":"7067688358","Type":"IssuesEvent","CreatedAt":"2018-01-08T02:05:27","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/13322","RelatedDescription":"Closed issue \"Make C# more modular\" (#13322) at dotnet/roslyn","RelatedBody":"I'm new to Roslyn and have so far only had a broad overview of it.  I have not at all delved into its internals.  So naturally I have a half-baked, completely naive idea that I'd like to share :stuck_out_tongue_winking_eye: .  Before you close it, please provide some feedback about how it relates to existing initiatives and capabilities.\n\nWith so much talk about making the .NET Core framework modular, I wonder about the C# language itself being more modular as well.  If this feature existed, perhaps existing language features like 'async'/'await', 'yield return', and the LINQ keywords could be repackaged as extensions in their respective assemblies, outside the core Roslyn library.  The point though of course would be to allow for new and experimental language features to be easily plugged into existing classes or projects.  It may be easier to experiment building, sharing, and trying out features this way.\n\nThe keywords would be defined in their respective assemblies: 'async'/'await' within the TPL, 'yield return' within the BCL, the LINQ keywords within System.Core.  These external assemblies would provide metadata to the compiler/IDE such that the defined keywords \"light up\" in the text editor and get properly interpreted during compilation.  The available language keywords would depend on the referenced assemblies and imported namespaces.  This means that \"standard\" keywords like those mentioned above would remain standard since they live inside commonly referenced assemblies.\n\nThe major omission from this post is of course the shape that these keyword providing assemblies would take and how they would interact with the compiler.  It would be an interesting to start by trying to externalize 'async'/'await', 'yield return', and the LINQ keywords and then see what API would be necessary to make that possible.\n"},{"Id":"7067684069","Type":"IssuesEvent","CreatedAt":"2018-01-08T02:02:58","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/13628","RelatedDescription":"Closed issue \"Proposal: add a null-coalescing-assignment operator\" (#13628) at dotnet/roslyn","RelatedBody":"It would be nice to have a null-coalescing assignment operator, like so:\n\n`buffers[i] ??= new byte[4*1024*1024];` \n\nThis would help in a case where one operation doesn't need all of the buffers, so it only initializes some of them, and a subsequent operation needs to utilize more of them - instead of re-initializing all of the buffers, it reuse previous ones and only initialize the indices that are null. Currently, the code would look like this:\n\n`for (int i; i < MAX_IO; i++)`\n`{`\n`buffers[i] = buffers[i] ?? new byte[4*1024*1024];`\n`}`\n\nwhich could be simplified using the proposed operator.\n"},{"Id":"7067682363","Type":"IssuesEvent","CreatedAt":"2018-01-08T02:01:55","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/13733","RelatedDescription":"Closed issue \"Proposal: Extending anonymous types and functions (to complement limitations of Tuples)\" (#13733) at dotnet/roslyn","RelatedBody":"Tuples and corresponding nice tuple's syntax is helpful, but also have serious flaws and limitations.\n- not suitable for public API - other languages (including earlier C# and VB) will ignore helpful metadata with names for fields\n- not suitable for use with reflection (databinding), because lack of field's names\n- misleading behaviour when trying copy values between two different tuples using the same field's names \n- locked to ValueTuple type only, no way to extend it (structures are not inheritable)\n- lack of working with reference types - different performance characteristics\n- require additional library to be shipped together with apps / libraries using tuples\n\nFor these cases where Tuples are insufficient, current features can be used, after some easy enhancements:\n\n**1.  Inferred return type for functions**\n\n```\nPublic Function f1\n        Return 2\nEnd Function\n```\n\nCurrently inferred return type is Object, what need to be corrected (narrowed) and inferred return type should be Integer (for case above). \n\nStrange, but local functions in VB already have this possibility:\n\n```\nSub s1\n        Dim lf = Function () 2\n        Dim lf2 = Function()\n                      Return 3\n                  End Function\nEnd Sub \n```\n\nWhy other (non-locall) functions don't have this possibility ? There is breaking change or other reasons ? If there is breaking change, then new compiler switch (Option Infer Return [On / Off]) should solve it.\n\n**2.  Anonymous types less anonymous** \n\nInline types with explicit type names\n\n```\nSub s2\n        Dim lat = New Class C1 With {.Color = \"Yellow\"}\nEnd Sub\n```\n\nwhich is the same as \n\n```\nClass C1\n        Public Property Color As String\nEnd Class\n\nSub s2\n        Dim lat = New C1 With {.Color = \"Yellow\"}\nEnd Sub\n```\n\nThis will enable to quickly define type and use it in public API\n\n**3.   Anonymous types as structures**\n\nInline types as structures (also with explicit type names)\n\n```\nSub s3\n        Dim s = New Structure With {.Color = \"Yellow\"} ' anonymous structure\n        Dim s2 = New Structure C2 With {.Color = \"Yellow\"} ' also with explicit name\nEnd Sub\n```\n\nThese enhancements will enable to achieve similar results as Tuples while preserving required functionality, where Tuples can't.\n"},{"Id":"7067679950","Type":"IssuesEvent","CreatedAt":"2018-01-08T02:00:35","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/13653","RelatedDescription":"Closed issue \"Auto type casting in condition experssion assignment and etc.\" (#13653) at dotnet/roslyn","RelatedBody":"by default number is integer, so when assignment to smaller types need casting.\nfor example:\n\n```\nint a = 5, b = 6;\nbyte c = (byte)(a > b ? 1 : 0);\n```\n\nbut 0,1 in byte range, Roslyn is intelligent and can auto casting.\n\n```\nbyte c = a > b ? 1 : 0;\n```\n"},{"Id":"7067675659","Type":"IssuesEvent","CreatedAt":"2018-01-08T01:58:05","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/13597","RelatedDescription":"Closed issue \"Implement interface delegation\" (#13597) at dotnet/roslyn","RelatedBody":"Delegate interface to property or field by syntax with overriding. May have syntax :\n\n```\ninterface IA \n{\n    int R();\n    int R1();\n}\n\npublic TA : IA\n{\n      int R() => 0; \n      int R1() => 1;     \n}\n\npublic class A : IA \n{\n     private _b: TA (public IA | implicit IA);\n     int IA.R1()    // override\n     {\n           // some todo\n           return _b.R1();\n     }\n}\n```\n\nAnother syntax:\n\n```\ninterface IA \n{\n    int R();\n    int R1();\n}\n\npublic TA : IA\n{\n      int R() => 0; \n      int R1() => 1;     \n}\n\npublic class A : IA by _b (public | implicit), Collection \n{\n     private _b: TA;\n\n     int IA.R1()    // override\n     {\n           // some todo\n           return _b.R1();\n     }\n}\n```\n\nSpecial behavior for event - automatic sender substitutio, when no override\n"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7067778240","Type":"PullRequestEvent","CreatedAt":"2018-01-08T02:57:14","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5225","RelatedDescription":"Opened pull request \"[WIP] Add MonoGame sample\" (#5225) at dotnet/corert","RelatedBody":""},{"Id":"7067602105","Type":"IssuesEvent","CreatedAt":"2018-01-08T01:08:35","Actor":"tim241","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/5224","RelatedDescription":"Opened issue \"DllNotFoundException: Unable to load DLL 'objwriter'\" (#5224) at dotnet/corert","RelatedBody":"Hello, when I execute `./build.sh` it gives me this error:\r\n``` Unhandled Exception: System.DllNotFoundException: Unable to load DLL 'objwriter': The specified module or one of its dependencies could not be found.```\r\nI'm using Arch Linux and applied this fix to corert to make it build ObjectWriter: https://github.com/tim241/corert/commit/f234467b1b263fd385a1614098cd4db82ee3e164\r\nfull output: [build.log](https://gist.github.com/9b0aba44d8cccd21275d985026301733)\r\nI'm using clang 5:\r\n`clang version 5.0.1 (tags/RELEASE_501/final)`\r\nand use\r\n`export CppCompilerAndLinker=clang` before executing `./build.sh`"},{"Id":"7066721110","Type":"PullRequestEvent","CreatedAt":"2018-01-07T14:50:17","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5223","RelatedDescription":"Merged pull request \"Fix build and VS warnings\" (#5223) at dotnet/corert","RelatedBody":"Fixes #1194"},{"Id":"7066721105","Type":"IssuesEvent","CreatedAt":"2018-01-07T14:50:17","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/1194","RelatedDescription":"Closed issue \"Linux build warnings\" (#1194) at dotnet/corert","RelatedBody":"When compiling the managed part you get some warnings.\n\nThis one is also present on Windows:\n\n```\nILCompiler.DependencyAnalysisFramework -> /home/manus/local/Microsoft/corert/bin/Product/Linux.x64.Debug/ILCompiler.DependencyAnalysisFramework/ILCompiler.DependencyAnalysisFramework.dll\n/home/manus/local/Microsoft/corert/Tools/Microsoft.Common.CurrentVersion.targets(1819,5): warning MSB3277: Found conflicts between different versions of the same dependent assembly that could not be resolved.  These reference conflicts are listed in the build log when log verbosity is set to detailed. [/home/manus/local/Microsoft/corert/src/ILCompiler.DependencyAnalysisFramework/tests/ILCompiler.DependencyAnalysisFramework.Tests.csproj]\n```\n\nThose are Linux specifics:\n\n```\nILCompiler.DependencyAnalysisFramework.Tests -> /home/manus/local/Microsoft/corert/bin/Product/Linux.x64.Debug/ILCompiler.DependencyAnalysisFramework.Tests/ILCompiler.DependencyAnalysisFramework.Tests.dll\n/home/manus/local/Microsoft/corert/Tools/publishtest.targets(48,5): warning : Your project.json doesn't list 'ubuntu.14.04-x64' as a targeted runtime. You should add '\"ubuntu.14.04-x64\": { }' inside your \"runtimes\" section in your project.json, and then re-run NuGet restore. [/home/manus/local/Microsoft/corert/src/ILCompiler.DependencyAnalysisFramework/tests/ILCompiler.DependencyAnalysisFramework.Tests.csproj]\n/home/manus/local/Microsoft/corert/Tools/publishtest.targets(48,5): warning : Your project.json doesn't list 'ubuntu.14.04-x64' as a targeted runtime. You should add '\"ubuntu.14.04-x64\": { }' inside your \"runtimes\" section in your project.json, and then re-run NuGet restore. [/home/manus/local/Microsoft/corert/src/ILCompiler.DependencyAnalysisFramework/tests/ILCompiler.DependencyAnalysisFramework.Tests.csproj]\n  chmod: cannot access ‘/home/manus/local/Microsoft/corert/bin/tests/Linux.x64.Debug/ILCompiler.DependencyAnalysisFramework.Tests/dnxcore50/corerun’: No such file or directory\n\nSystem.Private.Reflection -> /home/manus/local/Microsoft/corert/bin/Product/Linux.x64.Debug/System.Private.Reflection/System.Private.Reflection.dll\n/home/manus/local/Microsoft/corert/Tools/Microsoft.Common.CurrentVersion.targets(1819,5): warning MSB3277: Found conflicts between different versions of the same dependent assembly that could not be resolved.  These reference conflicts are listed in the build log when log verbosity is set to detailed. [/home/manus/local/Microsoft/corert/src/System.Private.Reflection.Metadata/tests/System.Private.Reflection.Metadata.Tests.csproj]\n\n\nSystem.Private.Reflection.Execution -> /home/manus/local/Microsoft/corert/bin/Product/Linux.x64.Debug/System.Private.Reflection.Execution/System.Private.Reflection.Execution.dll\n/home/manus/local/Microsoft/corert/Tools/Microsoft.Common.CurrentVersion.targets(1819,5): warning MSB3277: Found conflicts between different versions of the same dependent assembly that could not be resolved.  These reference conflicts are listed in the build log when log verbosity is set to detailed. [/home/manus/local/Microsoft/corert/src/ILCompiler/src/ILCompiler.csproj]\n\n\nILCompiler -> /home/manus/local/Microsoft/corert/bin/Product/Linux.x64.Debug/ILCompiler/ilc.exe\n/home/manus/local/Microsoft/corert/Tools/Microsoft.Common.CurrentVersion.targets(1819,5): warning MSB3277: Found conflicts between different versions of the same dependent assembly that could not be resolved.  These reference conflicts are listed in the build log when log verbosity is set to detailed. [/home/manus/local/Microsoft/corert/src/ILCompiler.MetadataTransform/tests/ILCompiler.MetadataTransform.Tests.csproj]\n\n\nILCompiler.MetadataTransform.Tests -> /home/manus/local/Microsoft/corert/bin/Product/Linux.x64.Debug/ILCompiler.MetadataTransform.Tests/ILCompiler.MetadataTransform.Tests.dll\n/home/manus/local/Microsoft/corert/Tools/publishtest.targets(48,5): warning : Your project.json doesn't list 'ubuntu.14.04-x64' as a targeted runtime. You should add '\"ubuntu.14.04-x64\": { }' inside your \"runtimes\" section in your project.json, and then re-run NuGet restore. [/home/manus/local/Microsoft/corert/src/ILCompiler.MetadataTransform/tests/ILCompiler.MetadataTransform.Tests.csproj]\n/home/manus/local/Microsoft/corert/Tools/publishtest.targets(48,5): warning : Your project.json doesn't list 'ubuntu.14.04-x64' as a targeted runtime. You should add '\"ubuntu.14.04-x64\": { }' inside your \"runtimes\" section in your project.json, and then re-run NuGet restore. [/home/manus/local/Microsoft/corert/src/ILCompiler.MetadataTransform/tests/ILCompiler.MetadataTransform.Tests.csproj]\n  chmod: cannot access ‘/home/manus/local/Microsoft/corert/bin/tests/Linux.x64.Debug/ILCompiler.MetadataTransform.Tests/dnxcore50/corerun’: No such file or directory\n```\n"},{"Id":"7066720649","Type":"PullRequestEvent","CreatedAt":"2018-01-07T14:50:01","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5222","RelatedDescription":"Merged pull request \"Enable Type equality optimizations\" (#5222) at dotnet/corert","RelatedBody":"Contributes to #5180"},{"Id":"7066007901","Type":"PullRequestEvent","CreatedAt":"2018-01-07T04:25:14","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5223","RelatedDescription":"Opened pull request \"Fix build and VS warnings\" (#5223) at dotnet/corert","RelatedBody":"Fixes #1194"},{"Id":"7066005185","Type":"PullRequestEvent","CreatedAt":"2018-01-07T04:22:09","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5222","RelatedDescription":"Opened pull request \"Enable Type equality optimizations\" (#5222) at dotnet/corert","RelatedBody":"Contributes to #5180"},{"Id":"7065972797","Type":"IssuesEvent","CreatedAt":"2018-01-07T03:47:55","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/1566","RelatedDescription":"Closed issue \"dotnet-compile --native should work outside x64 Native Tools Command Prompt \" (#1566) at dotnet/corert","RelatedBody":"A port of the dotnet/cli#301 issue.\n"},{"Id":"7065910732","Type":"PullRequestEvent","CreatedAt":"2018-01-07T02:42:45","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5221","RelatedDescription":"Merged pull request \"Update RyuJIT\" (#5221) at dotnet/corert","RelatedBody":""},{"Id":"7065849651","Type":"PullRequestEvent","CreatedAt":"2018-01-07T01:54:35","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5221","RelatedDescription":"Opened pull request \"Update RyuJIT\" (#5221) at dotnet/corert","RelatedBody":""}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7065986791","Type":"PullRequestEvent","CreatedAt":"2018-01-07T04:02:28","Actor":"peterhuene","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1844","RelatedDescription":"Merged pull request \"Fixing the generation of binding redirects when targeting 4.7.1\" (#1844) at dotnet/sdk","RelatedBody":"@dotnet/dotnet-cli "},{"Id":"7064146280","Type":"PullRequestEvent","CreatedAt":"2018-01-06T02:41:21","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1844","RelatedDescription":"Opened pull request \"Fixing the generation of binding redirects when targeting 4.7.1\" (#1844) at dotnet/sdk","RelatedBody":"@dotnet/dotnet-cli "},{"Id":"7063853615","Type":"PullRequestEvent","CreatedAt":"2018-01-05T23:52:20","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/1819","RelatedDescription":"Merged pull request \"Fixing the generation of binding redirects when targeting 4.7.1\" (#1819) at dotnet/sdk","RelatedBody":"cc: @livarcocc @weshaggard @AlexGhiondea\r\n\r\nInserting the new support package to the SDK that will fix the binding redirects for 4.7.1."},{"Id":"7063805566","Type":"PullRequestEvent","CreatedAt":"2018-01-05T23:32:33","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1843","RelatedDescription":"Opened pull request \"Pack for tools\" (#1843) at dotnet/sdk","RelatedBody":"Add PackAsTool in csproj, and run dotnet pack. The result will be in\r\ntool format nupkg"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"948916811034234881","CreatedAt":"2018-01-04T13:59:32+00:00","UserScreenname":"dotnet","Text":"At 10am ET, join our Jeff Fritz (@csharpfritz) for LIVE CODING and he'll answer your questions and .NET, ASPNet, an… https://t.co/CCz9Kdyzk7","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":16,"FavoriteCount":10,"RawContent":null},{"Id":"944564608391577600","CreatedAt":"2017-12-23T13:45:26+00:00","UserScreenname":"dotnet","Text":"Join our Jeff Fritz - @csharpfritz and MVP @IrisClasson in about an hour for LIVE CODING and pair programming on… https://t.co/kicrnl8tNJ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":23,"FavoriteCount":11,"RawContent":null},{"Id":"943234846079496192","CreatedAt":"2017-12-19T21:41:26+00:00","UserScreenname":"dotnet","Text":"Join our Jeff Fritz (@csharpfritz) in a little more than 2 hours for LIVE CODING. He's working on an @aspnet Core p… https://t.co/Xm2utapspg","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":34,"FavoriteCount":15,"RawContent":null}]}},"RunOn":"2018-01-08T05:30:29.8352039Z","RunDurationInMilliseconds":8068}