{"Data":{"GitHub":{"Issues":[{"Id":"480415398","IsPullRequest":true,"CreatedAt":"2019-08-13T23:32:56","Actor":"najeeb-kazmi","Number":"4110","RawContent":null,"Title":"Load TransformerChain model file in ModelFileUtils","State":"open","Body":"Fixes #4109 \r\n\r\nRelated to microsoft/NimbusML#201\r\n\r\nEnables loading TransformerChain models from entrypoints. This is needed so that models trained in ML.NET can be scored in NimbusML.\r\n\r\nNimbusML models could be loaded and scored in ML.NET, but we never tested it the other way around.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4110","RelatedDescription":"Open PR \"Load TransformerChain model file in ModelFileUtils\" (#4110)"},{"Id":"480413666","IsPullRequest":false,"CreatedAt":"2019-08-13T23:25:19","Actor":"najeeb-kazmi","Number":"4109","RawContent":null,"Title":"Enable loading TransformerChain models in EntryPoint graphs","State":"open","Body":"Related to microsoft/NimbusML#201\r\n\r\nThe new `TransformerChain` model format cannot be used to score a dataset in NimbusML. This is because this model format cannot be loaded by `TransformModelImpl`, which is a field of `PredictorModelImpl`, which in turn is used in constructing the inputs for the entry point  graph passed by NimbusML.\r\n\r\n cc: @eerhardt @ganik ","Url":"https://github.com/dotnet/machinelearning/issues/4109","RelatedDescription":"Open issue \"Enable loading TransformerChain models in EntryPoint graphs\" (#4109)"},{"Id":"480400988","IsPullRequest":true,"CreatedAt":"2019-08-13T22:38:09","Actor":"eerhardt","Number":"4108","RawContent":null,"Title":"Update official build and CI to run on macOS 10.13.","State":"open","Body":"The official build is currently broken because it uses macOS 10.12, which is not supported with .NET Core 3.0. I also updated the CI to run on macOS 10.13, since that is supported and our tests are currently running on 10.14.\r\n\r\nAlso update the building instructions to reflect the new requirement to build for .NET Core 3.0.\r\n\r\nSince we are building for .NET Core 3.0, we now require VS 2019 Update 3, which is in preview right now. It can be downloaded from https://visualstudio.microsoft.com/vs/preview/.","Url":"https://github.com/dotnet/machinelearning/pull/4108","RelatedDescription":"Open PR \"Update official build and CI to run on macOS 10.13.\" (#4108)"},{"Id":"478730295","IsPullRequest":true,"CreatedAt":"2019-08-13T21:03:16","Actor":"eerhardt","Number":"4096","RawContent":null,"Title":"Enabling building ML.NET for .NET Core 3.0 in the official builds.","State":"closed","Body":"This allows for the [C# hardware intrinsics code written last summer](https://github.com/dotnet/machinelearning/pulls?q=is%3Apr+author%3Abriancylui) to be used in official builds.\r\n\r\nIt also allows us to take advantage of other new APIs in .NET Core 3.0 in the future.","Url":"https://github.com/dotnet/machinelearning/pull/4096","RelatedDescription":"Closed or merged PR \"Enabling building ML.NET for .NET Core 3.0 in the official builds.\" (#4096)"},{"Id":"480307575","IsPullRequest":true,"CreatedAt":"2019-08-13T18:40:54","Actor":"harishsk","Number":"4107","RawContent":null,"Title":"Updated docs to include PredictedLabel member","State":"open","Body":"Fixes #4024 \r\n","Url":"https://github.com/dotnet/machinelearning/pull/4107","RelatedDescription":"Open PR \"Updated docs to include PredictedLabel member\" (#4107)"},{"Id":"480019528","IsPullRequest":false,"CreatedAt":"2019-08-13T08:13:45","Actor":"MaxAkbar","Number":"4106","RawContent":null,"Title":"Cluster Documents","State":"open","Body":"Is there a way to cluster documents\\text. Looking at the documentation [KMeansTrainer Class](https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.trainers.kmeanstrainer?view=ml-dotnet) is using single as the input type. Is there a way to extend or perhaps something in a future version?\r\n\r\nI know that I can use classification but that requires a lot of work as I have many documents.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4106","RelatedDescription":"Open issue \"Cluster Documents\" (#4106)"},{"Id":"479923367","IsPullRequest":false,"CreatedAt":"2019-08-13T01:56:12","Actor":"CESARDELATORRE","Number":"4105","RawContent":null,"Title":"[ImageClassification Transfer Learning] Support additional DNN architectures","State":"open","Body":"Just a reminder that we'll need to support more powerful architectures and specialized architectures in order to cover most customer scenarios.\r\n\r\nFor instance, NASNet (notably nasnet_large and pnasnet_large), which can provide extra precision. Or for lighter models targeting slower processors,  MobileNet V1 or V2 architectures, or  nasnet_mobile.\r\n\r\nSee:\r\nhttps://www.tensorflow.org/hub/tutorials/image_retraining#other_model_architectures\r\n\r\nI wonder if we should try to make a generic catalog based on \"needs\" or \"image types\" instead of architecture names that most .NET developers won't be familiar with such as the previous names or Inceptionv3, ResNet, etc. Those names don't mean anything to most .NET developers.\r\n\r\nOPEN PRE-TRAINED MODEL:\r\nThe other feature is to be able for the user to provide their own model, but for that, we'd probably need an API with many more details, such as tensor names?","Url":"https://github.com/dotnet/machinelearning/issues/4105","RelatedDescription":"Open issue \"[ImageClassification Transfer Learning] Support additional DNN architectures\" (#4105)"},{"Id":"479901701","IsPullRequest":true,"CreatedAt":"2019-08-13T00:04:54","Actor":"harishsk","Number":"4104","RawContent":null,"Title":"Changed code path to ensure threshold is changed","State":"open","Body":"Fixes #4076 ","Url":"https://github.com/dotnet/machinelearning/pull/4104","RelatedDescription":"Open PR \"Changed code path to ensure threshold is changed\" (#4104)"},{"Id":"478181329","IsPullRequest":true,"CreatedAt":"2019-08-12T22:52:20","Actor":"tannergooding","Number":"4091","RawContent":null,"Title":"Updating DatabaseLoader to support getting column info from a given .NET type.","State":"closed","Body":"This adds limited support for determining the column info from a .NET type in order to match what TextLoader provides.","Url":"https://github.com/dotnet/machinelearning/pull/4091","RelatedDescription":"Closed or merged PR \"Updating DatabaseLoader to support getting column info from a given .NET type.\" (#4091)"},{"Id":"479567857","IsPullRequest":false,"CreatedAt":"2019-08-12T10:16:19","Actor":"nfnpmc","Number":"4103","RawContent":null,"Title":"Load/save in  Microsoft.ML from 1.3.1","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**:\r\nMicrosoft Windows 10 Enterprise\r\n10.0.17763 Build 17763\r\n- **.NET Version (eg., dotnet --info)**: \r\nMicrosoft Windows [Version 10.0.17763.379]\r\n(c) 2018 Microsoft Corporation. All rights reserved.\r\n\r\n>dotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.508\r\n Commit:    9ba8583e91\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.508\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.12\r\n  Commit:  ccea2e606d\r\n\r\n.NET Core SDKs installed:\r\n  1.0.0-preview2-003131 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.505 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.507 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.508 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nSaved trained model\r\n context.Model.Save(model, data.Schema, modelLocation);\r\nin the same class\r\nITransformer model = context.Model.Load(modelLocation, out DataViewSchema schema);\r\nworks OK.\r\n\r\nIn a different class\r\nmodel = context.Model.Load(modelLocation, out DataViewSchema schema);\r\n- **What happened?**\r\nGot exception \r\nCould not load zip, something missing at the end of zip file, apparently.\r\n- **What did you expect?**\r\nA loaded model.\r\n### Source code / logs\r\nThen after 3 days I manually changed the csproj file as NuGet could not change the versions!\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n    <LangVersion>7.1</LangVersion>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.ML\" Version=\"1.3.1\" />\r\n    <PackageReference Include=\"Microsoft.ML.CpuMath\" Version=\"1.3.1\" />\r\n    <PackageReference Include=\"Microsoft.ML.DataView\" Version=\"1.3.1\" />\r\n    <PackageReference Include=\"Microsoft.ML.Dnn\" Version=\"0.15.1\" />\r\n    <PackageReference Include=\"Microsoft.ML.ImageAnalytics\" Version=\"1.3.1\" />\r\n    <PackageReference Include=\"Microsoft.ML.TensorFlow\" Version=\"1.3.1\" />\r\n    <PackageReference Include=\"Microsoft.ML.TensorFlow.Redist\" Version=\"0.14.0\" />\r\n    <PackageReference Include=\"OpenCvSharp4\" Version=\"4.1.0.20190416\" />\r\n    <PackageReference Include=\"OpenCvSharp4.runtime.win\" Version=\"4.1.0.20190416\" />\r\n  </ItemGroup>\r\n\r\nReplace 1.3.1 by 1.1.0\r\n\r\nRetest - all worked\r\nChanged them back to try to get the exact exception again.\r\nAll worked!\r\n\r\nIn a separate program, Loading the model originally saved before I changed the csproj file in the training program\r\nNodeDef mentions attr 'explicit_paddings' not in Op<name=Conv2D; signature=input:T, filter:T -> output:T; attr=T:type,allowed=[DT_HALF, DT_BFLOAT16, DT_FLOAT, DT_DOUBLE]; attr=strides:list(int); attr=use_cudnn_on_gpu:bool,default=true; attr=padding:string,allowed=[\"SAME\", \"VALID\"]; attr=data_format:string,default=\"NHWC\",allowed=[\"NHWC\", \"NCHW\"]; attr=dilations:list(int),default=[1, 1, 1, 1]>; NodeDef: {{node conv2d0_pre_relu/conv}}. (Check whether your GraphDef-interpreting binary is up to date with your GraphDef-generating binary.).\r\nError during class instantiation\r\nException has been thrown by the target of an invocation.\r\n\r\nLoading the new model works fine.\r\nSo I could not reproduce the issue I have been tring to solve for ages.\r\nOh, be joyful!\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4103","RelatedDescription":"Open issue \"Load/save in  Microsoft.ML from 1.3.1\" (#4103)"},{"Id":"479366523","IsPullRequest":false,"CreatedAt":"2019-08-11T12:47:46","Actor":"time888","Number":"4102","RawContent":null,"Title":" DnnEstimator.Architecture.InceptionV3  classification incorrect.","State":"open","Body":"The tensorflow_inception_graph.pb classification correct。But image size only 224.\r\nI tested. DnnEstimator.Architecture.InceptionV3\r\nDrawString \"0\" to Graphics Save to file 0.gif, and The other is the same 1.gif,2.gif,3.gif .\r\n\r\n       public static IEnumerable<ImageNetDigData> LoadImagesFromDirectory(string folder)\r\n        {\r\n\r\n            var files = Directory.GetFiles(folder, \"*.gif\",\r\n    searchOption: SearchOption.TopDirectoryOnly);\r\n            foreach (var file in files)\r\n            {\r\n                //0.gif,1.gif,2.gif.3.gif      a0.gif,a1.gif, x1.gif,x2.gif\r\n                var name = Path.GetFileName(file).Split(new char[] { '.' })[0];\r\n                var label = name.Substring(name.Length - 1, 1);\r\n\r\n                var nd = new ImageNetDigData()\r\n                {\r\n                    ImagePath = file,\r\n                    Label = label\r\n                };\r\n                yield return nd;\r\n            }\r\n        }\r\n\r\nBut classification incorrect。\r\nHow to configure parameters？\r\nGive me a sample.Thanks.","Url":"https://github.com/dotnet/machinelearning/issues/4102","RelatedDescription":"Open issue \" DnnEstimator.Architecture.InceptionV3  classification incorrect.\" (#4102)"},{"Id":"478654757","IsPullRequest":false,"CreatedAt":"2019-08-09T22:27:05","Actor":"CESARDELATORRE","Number":"4095","RawContent":null,"Title":"[ImageClassification Transfer Learning] Training crashes with no clear exception but this error code from dotnet: dotnet.exe (process 11108) exited with code -1073740791","State":"closed","Body":"When training a model with the new **'ImageClassification Transfer Learning'** component (v0.15.1) and only around **200 images**, after a couple of hours working/training, the program crashes and exist by only showing the following error (no any particular ML.NET exception to search for): \r\n\r\n`C:\\Program Files\\dotnet\\dotnet.exe (process 11108) exited with code -1073740791.`\r\n\r\n![image](https://user-images.githubusercontent.com/1712635/62732281-d3437a00-b9d8-11e9-9129-3093c39e3eb9.png)\r\n\r\nIt might be related to a low level issue such as memory leaks, not sure..\r\n\r\nHere's the code (with image dataset) I'm running:\r\n\r\nhttps://github.com/dotnet/machinelearning-samples/blob/migration/v1.3/samples/csharp/getting-started/DeepLearning_TensorFlow_TransferLearning/ImageClassification.Train/Program.cs\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4095","RelatedDescription":"Closed issue \"[ImageClassification Transfer Learning] Training crashes with no clear exception but this error code from dotnet: dotnet.exe (process 11108) exited with code -1073740791\" (#4095)"},{"Id":"478948089","IsPullRequest":false,"CreatedAt":"2019-08-09T12:24:36","Actor":"lsaintmaxent","Number":"4101","RawContent":null,"Title":"[Question] access on TrainingLabelValues to display N-Best labels","State":"closed","Body":"### System information\r\n\r\n- **Windows**:\r\n- **ML.Net version 1.3.1)**: \r\n\r\n### Issue\r\n\r\nHello,\r\n\r\nI'm trying to display N-Best Label in mulitclass text classification.\r\nSo i was trying to access to TrainingLabelValues from score column annotations by doing \r\n`var trainedClassLabels = _predictionEngine.OutputSchema.GetColumnOrNull(\"Score\").Value.Annotations.Schema.GetColumnOrNull(\"TrainingLabelValues\");`\r\n\r\nI can't figure out how am i supposed to get labels from the string vector.\r\n\r\nA little bit later, i found sfilipi's example of accessing this field in https://github.com/dotnet/machinelearning/blob/master/test/Microsoft.ML.Tests/Scenarios/Api/Estimators/PredictAndMetadata.cs\r\n\r\ni was trying to do the same but AnnotationUtils is internal, and I can't access to `AnnotationUtils.Kinds.TrainingLabelValues`\r\n\r\n\r\nShould I Do something else to get this thing done ?\r\n\r\nThans a lot fro your time,\r\n\r\nLouis","Url":"https://github.com/dotnet/machinelearning/issues/4101","RelatedDescription":"Closed issue \"[Question] access on TrainingLabelValues to display N-Best labels\" (#4101)"},{"Id":"478938095","IsPullRequest":false,"CreatedAt":"2019-08-09T11:26:00","Actor":"nfnpmc","Number":"4100","RawContent":null,"Title":"Everything is a var type","State":"open","Body":"You are trying to explain what an IDataView is, but all the variable are of type var.\nSo is\nvar dataView = new InputObjectDataView(inputArray);\nof type IDataView or what?\nGiven that VS easily converts to the correct type why is every example in the entire website filled with 'var's so we cannot determine what's going on.\n\n---\n#### Document Details\n\n⚠ *Do not edit this section. It is required for docs.microsoft.com ➟ GitHub issue linking.*\n\n* ID: cebd0074-01d3-d048-305a-cfea8b4083de\n* Version Independent ID: 7f1aaf72-e345-e334-6237-d92abd3aa6d3\n* Content: [IDataView Interface (Microsoft.ML)](https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.idataview?view=ml-dotnet)\n* Content Source: [dotnet/xml/Microsoft.ML/IDataView.xml](https://github.com/dotnet/ml-api-docs/blob/live/dotnet/xml/Microsoft.ML/IDataView.xml)\n* Product: **dotnet-ml-api**\n* GitHub Login: @sfilipi\n* Microsoft Alias: **johalex**","Url":"https://github.com/dotnet/machinelearning/issues/4100","RelatedDescription":"Open issue \"Everything is a var type\" (#4100)"},{"Id":"478927303","IsPullRequest":false,"CreatedAt":"2019-08-09T10:56:25","Actor":"jaehyok","Number":"4099","RawContent":null,"Title":"cannot extract MaximumEntropyModelParameters from pre-trained model, for using LbfgsMaximumEntropyMulticlassTrainer.Fit(IDataView, MaximumEntropyModelParameters) Method","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: windows 10 enterprise\r\n- **.NET Version (eg., dotnet --info)**:  .Net Core 2.2\r\n- **Microsoft.ML Version**:  1.3.1\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nI want to re-train multi-class (`LbfgsMaximumEntropyMulticlassTrainer`).\r\n- **What happened?**\r\nso, I train and load model, but i cannot extract `MaximumEntropyModelParameters`.\r\n- **What did you expect?**\r\nI want to extract `MaximumEntropyModelParameters` my pre-trained model.\r\nI want to sample code using `LbfgsMaximumEntropyMulticlassTrainer.Fit(IDataView, MaximumEntropyModelParameters)` method.\r\n\r\n### Source code / logs\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n**code:**\r\n```c#\r\nMLContext _mlContext = new MLContext(seed: 0);\r\nvar pipeline = _mlContext.Transforms.Conversion.MapValueToKey(inputColumnName: \"Area\", outputColumnName: \"Label\")\r\n    .Append(_mlContext.Transforms.Text.FeaturizeText(inputColumnName: \"Keyword\", outputColumnName: \"KeywordFeaturized\"))\r\n    .Append(_mlContext.Transforms.Concatenate(\"Features\", \"KeywordFeaturized\"));\r\nvar trainingPipeline_LbfgsMaximumEntropy = pipeline\r\n    .Append(_mlContext.MulticlassClassification.Trainers.LbfgsMaximumEntropy(\"Label\", \"Features\"))\r\n    .Append(_mlContext.Transforms.Conversion.MapKeyToValue(\"PredictedLabel\"));\r\nvar trainingPipeline_LbfgsMaximumEntropy = pipeline\r\n    .Append(_mlContext.MulticlassClassification.Trainers.LbfgsMaximumEntropy(\"Label\", \"Features\"))\r\n    .Append(_mlContext.Transforms.Conversion.MapKeyToValue(\"PredictedLabel\"));\r\n\r\nTrainTestData dataSplit = _mlContext.Data.TrainTestSplit(data, testFraction: 0.1);\r\nIDataView _trainingDataView = dataSplit.TrainSet;\r\nIDataView _testDataView = dataSplit.TestSet;\r\nITransformer _trainedModel2 = trainingPipeline_LbfgsMaximumEntropy.Fit(trainingDataView);\r\n_mlContext.Model.Save(_trainedModel2, _trainingDataView.Schema, _modelPath);\r\n\r\nDataViewSchema dataPrepPipelineSchema;\r\nvar dataPrepPipeline = _mlContext.Model.Load(_modelPath2, out dataPrepPipelineSchema);\r\nvar loadedModel2 = _mlContext.Model.Load(_modelPath2, out DataViewSchema modelInputSchema2);\r\nMaximumEntropyModelParameters originalModelParameters = ((IPredictionTransformer<object>)loadedModel2).Model as MaximumEntropyModelParameters;\r\n```\r\n\r\n**log:**\r\n```log\r\nSystem.InvalidCastException: Unable to cast object of type 'Microsoft.ML.Data.TransformerChain`1[Microsoft.ML.ITransformer]' to type 'Microsoft.ML.Data.TransformerChain`1[Microsoft.ML.Transforms.KeyToValueMappingTransformer]'.\r\n```","Url":"https://github.com/dotnet/machinelearning/issues/4099","RelatedDescription":"Open issue \"cannot extract MaximumEntropyModelParameters from pre-trained model, for using LbfgsMaximumEntropyMulticlassTrainer.Fit(IDataView, MaximumEntropyModelParameters) Method\" (#4099)"},{"Id":"478919172","IsPullRequest":true,"CreatedAt":"2019-08-09T10:34:54","Actor":"SnakyBeaky","Number":"4098","RawContent":null,"Title":"Fix LogLossReduction (RIG) example values","State":"open","Body":"Adjusting LogLossReduction (RIG) example values in code as well.\r\n\r\nFixes #4097","Url":"https://github.com/dotnet/machinelearning/pull/4098","RelatedDescription":"Open PR \"Fix LogLossReduction (RIG) example values\" (#4098)"},{"Id":"478914494","IsPullRequest":false,"CreatedAt":"2019-08-09T10:23:24","Actor":"SnakyBeaky","Number":"4097","RawContent":null,"Title":"Wrong example values in LogLossReduction documentation","State":"open","Body":"The RIG value given by the `LogLossReduction` would be `0.20` and not `20` in the example:\r\n\r\n`For example, if the RIG equals 20, it can be interpreted as \"the probability of a correct prediction is 20% better than random guessing\". `\r\n\r\n---\r\n#### Document Details\r\n\r\n⚠ *Do not edit this section. It is required for docs.microsoft.com ➟ GitHub issue linking.*\r\n\r\n* ID: be840507-df5f-8980-3d02-a7765eef1af3\r\n* Version Independent ID: 46c925d8-7d87-5f9c-5e3d-9d88bae26be1\r\n* Content: [MulticlassClassificationMetrics.LogLossReduction Property (Microsoft.ML.Data)](https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.data.multiclassclassificationmetrics.loglossreduction?view=ml-dotnet)\r\n* Content Source: [dotnet/xml/Microsoft.ML.Data/MulticlassClassificationMetrics.xml](https://github.com/dotnet/ml-api-docs/blob/live/dotnet/xml/Microsoft.ML.Data/MulticlassClassificationMetrics.xml)\r\n* Product: **dotnet-ml-api**\r\n* GitHub Login: @sfilipi\r\n* Microsoft Alias: **johalex**","Url":"https://github.com/dotnet/machinelearning/issues/4097","RelatedDescription":"Open issue \"Wrong example values in LogLossReduction documentation\" (#4097)"},{"Id":"478396485","IsPullRequest":false,"CreatedAt":"2019-08-08T10:54:37","Actor":"nfnpmc","Number":"4094","RawContent":null,"Title":"Sparse","State":"open","Body":"No detail or example. \nWhat happens here? \npredictions = contextML.Data.CreateEnumerable&lt;DataBlobPrediction&gt;(\n                T.Transform(contextML.Data.LoadFromEnumerable(blobsList, schemaML)), false, true);\n\n---\n#### Document Details\n\n⚠ *Do not edit this section. It is required for docs.microsoft.com ➟ GitHub issue linking.*\n\n* ID: 09dc1ab7-401c-68e7-3ab9-38f5afbc4fc6\n* Version Independent ID: c740981e-1bcd-c738-ad77-7dede76ed32b\n* Content: [ITransformer.Transform(IDataView) Method (Microsoft.ML)](https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.itransformer.transform?view=ml-dotnet)\n* Content Source: [dotnet/xml/Microsoft.ML/ITransformer.xml](https://github.com/dotnet/ml-api-docs/blob/live/dotnet/xml/Microsoft.ML/ITransformer.xml)\n* Product: **dotnet-ml-api**\n* GitHub Login: @sfilipi\n* Microsoft Alias: **johalex**","Url":"https://github.com/dotnet/machinelearning/issues/4094","RelatedDescription":"Open issue \"Sparse\" (#4094)"},{"Id":"478244778","IsPullRequest":false,"CreatedAt":"2019-08-08T04:30:48","Actor":"CESARDELATORRE","Number":"4093","RawContent":null,"Title":"[ImageClassification Transfer Learning] - API documentation should provide more meaningful descriptions","State":"open","Body":"Just to keep track of this. I understand we're in early preview and things can change, though. But since it is public preview, folks might review the reference in order to get any help.\r\n\r\nFor instance, the most \"unknown parameters\" for .NET developers have the following descriptions which don't \"tell you anything\":\r\n\r\n[dnncatalog.imageclassification reference](https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.dnncatalog.imageclassification?view=ml-dotnet-preview#Microsoft_ML_DnnCatalog_ImageClassification_Microsoft_ML_ModelOperationsCatalog_System_String_System_String_System_String_System_String_System_String_System_String_Microsoft_ML_Transforms_DnnEstimator_Architecture_Microsoft_ML_Transforms_DnnEstimator_DnnFramework_System_Int32_System_Int32_System_Single_)\r\n\r\nPARAMETER DESCRIPTIONS:\r\n```\r\nepoch\r\nInt32\r\nNumber of training epochs.\r\n\r\nbatchSize\r\nInt32\r\nThe batch size for training.\r\n\r\nlearningRate\r\nSingle\r\nThe learning rate for training.\r\n```","Url":"https://github.com/dotnet/machinelearning/issues/4093","RelatedDescription":"Open issue \"[ImageClassification Transfer Learning] - API documentation should provide more meaningful descriptions\" (#4093)"},{"Id":"478176064","IsPullRequest":true,"CreatedAt":"2019-08-08T03:14:58","Actor":"eerhardt","Number":"4088","RawContent":null,"Title":"Update the 3.0 SDK to preview7","State":"closed","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/4088","RelatedDescription":"Closed or merged PR \"Update the 3.0 SDK to preview7\" (#4088)"},{"Id":"478179523","IsPullRequest":false,"CreatedAt":"2019-08-07T23:17:50","Actor":"CESARDELATORRE","Number":"4090","RawContent":null,"Title":"[ImageClassification Transfer Learning] - Warning mesage: \"Allocation of 553190400 exceeds 10% of system memory.\"","State":"open","Body":"Why are we getting this warning message (I get it multiple times) when training with a small set of images?\r\n\r\n\"2019-08-07 09:49:52.642800: W tensorflow/core/framework/allocator.cc:107] Allocation of 553190400 exceeds 10% of system memory.\"\r\n\r\n![image](https://user-images.githubusercontent.com/1712635/62675361-9dac7b80-b95b-11e9-9afc-a6df5aedf4ca.png)\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4090","RelatedDescription":"Open issue \"[ImageClassification Transfer Learning] - Warning mesage: \"Allocation of 553190400 exceeds 10% of system memory.\"\" (#4090)"},{"Id":"478178249","IsPullRequest":false,"CreatedAt":"2019-08-07T23:12:23","Actor":"CESARDELATORRE","Number":"4089","RawContent":null,"Title":"[ImageClassification Transfer Learning] - Warning mesage: \"Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2\"","State":"open","Body":"When training with ImageClassifier/TransferLearning I get the following warning about the CPU instructions support (AVX2) from TF.NET or TensorFlow itself:\r\n\r\n`\"2019-08-07 09:49:00.996153: I tensorflow/core/platform/cpu_feature_guard.cc:142] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2\"`\r\n\r\n![image](https://user-images.githubusercontent.com/1712635/62665952-257f8f00-b936-11e9-8066-1bfe6aa70ee7.png)\r\n\t\t\r\nI get it from sample code directly written with Tensorflow.NET and code with ML.NET-Transfer-Learning (since it uses TF.NET)\r\n\r\nPossible actions to do:\r\n\r\n**1. Do not show this on the UI**\r\nIf possible, we shouldn't show this kind of warning as feedback on the UI (command line).but probably only in a log file. \r\n\r\nIt is a warning shown to the user but the user doesn't have anything actionable thing to do, so why showing it?\r\n\r\n**2. Research why and where this is happening and if we can avoid this warning with a different TensorFlow binary?**","Url":"https://github.com/dotnet/machinelearning/issues/4089","RelatedDescription":"Open issue \"[ImageClassification Transfer Learning] - Warning mesage: \"Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2\"\" (#4089)"},{"Id":"478174763","IsPullRequest":false,"CreatedAt":"2019-08-07T22:58:30","Actor":"CESARDELATORRE","Number":"4087","RawContent":null,"Title":"[ImageClassification Transfer Learning] Simplify/Hide steps and hyper-parameters in new ImageClassification - Transfer Learning ","State":"open","Body":"Since the new (early preview) 'ImageClassification - Transfer Learning' is aimed to provide a high-level API per scenario (image classifciation in this case), we should simplify the API even further.\r\n\r\nHere's an example of a current training pipeline:\r\n\r\n```\r\n var pipeline = mlContext.Transforms.Conversion.MapValueToKey(\"Label\")\r\n                    .Append(mlContext.Transforms.LoadImages(\"ImageObject\", null,\r\n                        \"ImagePath\"))\r\n                    .Append(mlContext.Transforms.ResizeImages(\"Image\",\r\n                        inputColumnName: \"ImageObject\", imageWidth: 299,\r\n                        imageHeight: 299))\r\n                    .Append(mlContext.Transforms.ExtractPixels(\"Image\",\r\n                        interleavePixelColors: true))\r\n                    .Append(mlContext.Model.ImageClassification(\"Image\",\r\n                        \"Label\", arch: DnnEstimator.Architecture.InceptionV3, \r\n                        epoch: 1, //an epoch is one learning cycle where the learner sees the whole training data set.\r\n                        batchSize: 20));  // batchSize sets then number of images to feed the model at a time\r\n```\r\n\r\nGood points to simplify are image transformations and \"technical\" hyper-paramenters:\r\n\r\n**1. Hide _image re-size_ step:** Since the image size is determined by the internal DNN model (TensorFlow model, currently) why don't we simply do it within the `ImageClassification` code?\r\n\r\n**2. Hide extract pixels step:** Same thing here. The extract pixels step should be hidden as part of the `ImageClassification` code. This is surfacing too much details. I expect the interleavePixelColors could also be determined by the info in the TF model .pb file, ot in the worst case based on the Architecture metadata that we could have per architecture (InceptionV3, etc.).\r\n \r\n**3. Hide EPOCH and BATCHSIZE:** These are also configuration details that, even when they currently have \"by default values\" (epoch=10 and batchSize=20), those values are not valid for *any* imageset and architecture and should vary depending on the specific image-set size and chosen architecture. I'd be good to have them initialized dynamically within the `ImageClassification` code depending on the context instead of \"fixed default values\" and parameters that surface to the user who might not know what is an EPOCH or BATCH.\r\n\r\nAfter simplifying the above points, the example code could look like the following, which looks a lot simpler and clean: :)\r\n\r\n```\r\n var pipeline = mlContext.Transforms.Conversion.MapValueToKey(\"Label\")\r\n                    .Append(mlContext.Transforms.LoadImages(\"ImageObject\", null, \"ImagePath\"))\r\n                    .Append(mlContext.Model.ImageClassification(\"ImageObject\", \"Label\", arch: DnnEstimator.Architecture.InceptionV3));  \r\n```\r\n\r\nEven the architecture should also be simplified and maybe letting the user select per type of images to be trained, such as: Photos vs. Numbers/Digits vs. other characteristics that make one or the other architecture advisable to be used. A regular .NET developer usually won't know if he/she should use InceptionV3 vs. ResnetV2101, etc.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4087","RelatedDescription":"Open issue \"[ImageClassification Transfer Learning] Simplify/Hide steps and hyper-parameters in new ImageClassification - Transfer Learning \" (#4087)"},{"Id":"478128798","IsPullRequest":false,"CreatedAt":"2019-08-07T20:38:58","Actor":"luisquintanilla","Number":"4085","RawContent":null,"Title":"YOLOv3 ApplyOnnxModel throws Protobuf exception","State":"open","Body":"### System information\r\n\r\n-  .NET Version: 2.2\r\n-  ML.NET Version: 1.2\r\n\r\n### Issue\r\n\r\nGiven the following pipeline for the YOLOv3 full ONNX model downloaded from the Model Zoo:\r\n\r\n```\r\nvar pipeline = _mlContext.Transforms.LoadImages(\"input_1:01\", dataPath, \"ImagePath\")\r\n                .Append(_mlContext.Transforms.ResizeImages(\"input_1:01\", 416, 416))\r\n                .Append(_mlContext.Transforms.ExtractPixels(\"input_1:01\"))\r\n                .Append(_mlContext.Transforms.ApplyOnnxModel(\"concat_2:0\", \"input_1:01\", model\r\n```\r\n\r\nThe exception below is raised:\r\n\r\n```\r\nGoogle.Protobuf.InvalidProtocolBufferException: 'Protocol message was too large.  May be malicious.  Use CodedInputStream.SetSizeLimit() to increase the size limit.'\r\n```","Url":"https://github.com/dotnet/machinelearning/issues/4085","RelatedDescription":"Open issue \"YOLOv3 ApplyOnnxModel throws Protobuf exception\" (#4085)"},{"Id":"478117994","IsPullRequest":false,"CreatedAt":"2019-08-07T20:12:17","Actor":"CESARDELATORRE","Number":"4084","RawContent":null,"Title":"[ImageClassification Transfer Learning] Higher level API supporting image predictions based on image file paths and in-memory images, alternatively","State":"open","Body":"This is probably more for the long-term API of our ImageClassification Transfer Learning once the foundational features for our 'ImageClassification Transfer Learning' are in place.\r\n\r\nHowever, this is the point:\r\n\r\nWe aim to design and implement a high level API which will provide a very straightforward way of training (transfer learning) image classification and other capabilities such as object detection, etc. That also means, and is equally important, to be able to score/predict very easily according to normal scenarios which for images are two scenarios:\r\n\r\n- A. Score based on a provided image file path.\r\n- B. Score based on an in-memory image.\r\n\r\nThe second choice (B) is even more common for many apps, even more when moving to OBJECT DETECTION and LIVE VIDEO/IMAGES coming as streaming.\r\n\r\n**CURRENT STATE IN ML.NET API**\r\n\r\nThe issue is with the current API design of ML.NET where the ML.NET model scoring API completely depends on the way you created its original pipeline and what schema you were using, meaning:\r\n\r\n- If you trained an ML.NET model with image file paths, your ML.NET model expects an image  file path for scoring.\r\n\r\n- If you trained an ML.NET model with in-memory images (not a common/straightforward approach), your ML.NET model expects an in-memory image (Bitmap) when scoring.  \r\n\r\nHowever, that's not the typical scenario for a user where the easiest way for training is using image filepaths (that's the way you usually have image sets, right?), but then when scoring/predicting the user should be able to provide either a file path or an in-memory image (in-memory is more common for end-user apps vs. filepaths for batch processes) and anything else should be transparent for him.\r\n\r\n**CURRENT WORKAROUND:**\r\n\r\nSure, you can always go deeper and deep dive in the TensorFlow .pb model that was also generated by our \"ImageClassification Transfer Learning\", find out the input and output tensor names, implement a different ML.NET pipeline that accepts in-memory images, create that ML.NET model by running that pipeline once (it is not really training, it is just creating the needed transformers for scoring later on) and finally writing a more specific and not very straightforward code for scoring with in-memory images.\r\n\r\nThat process is what I wrote in the second part of this BLOG POST and related sample app which is using an in-memory image coming through HTTP and was provided by the end-user for predicting its class:\r\n\r\nhttps://devblogs.microsoft.com/cesardelatorre/run-with-ml-net-c-code-a-tensorflow-model-exported-from-azure-cognitive-services-custom-vision/\r\n\r\nBut that code for scoring a TF model with in-memory images is not straightforward to implement.\r\n\r\n**INITIAL SOLUTION: Load images from files but convert them into in-memory image objects before loading it into the IDataView, so the schema would match for training and scoring**\r\n\r\nAn initial good solution is to Load images from files but convert them into in-memory image objects before loading it into the IDataView, so the data class for the schema would be something like the following:\r\n\r\nInstead of the following:\r\n\r\n```\r\n    public class ImageData\r\n    {\r\n        [LoadColumn(0)]\r\n        public string ImagePath;\r\n\r\n        [LoadColumn(1)]\r\n        public string Label;\r\n    }\r\n```\r\n\r\nWe want to have something like this being used by the initial IDataView:\r\n\r\n```\r\n    public class ImageInputData\r\n    {\r\n        public Bitmap Image { get; set; }\r\n        \r\n        public string Label;\r\n    }\r\n```\r\n\r\nThat way, the ML.NET model's schema that we have when training would match the schema data class needed when scoring by only having an in-memory image without the user needing to go deeper and use the TensorFlow model .pb and creating his own pipeline for scoring, that I explin in this blog post but it is too complex if we want users to use a high-level API:\r\n\r\nhttps://devblogs.microsoft.com/cesardelatorre/run-with-ml-net-c-code-a-tensorflow-model-exported-from-azure-cognitive-services-custom-vision/\r\n\r\n**POSSIBLE FUTURE HIGH LEVEL API for Image Classification, ObjectDetection and other high level SCENARIOS**\r\n\r\nThe point is that we want to create high level APIs targeting SCENARIOS (Image Classification, ObjectDetection, etc.). That means the API to use for the mentioned use cases (training and scoring) should also be very simple. It is not acceptable to have such as complexity (see BLOG POST above) if you want to score with an in-memory image.\r\n\r\nSomehow we should solve the conflict between the current ML.NET pipeline API requirements (you score with the same schema you trained) and the points I explained above.\r\nWe probably will need to create a higher level API on top of the current pipelines API which would be more oriented to SCENARIOS (ImageClassification, Object Detection). The current API in the ML.NET pipelines doesn't probably allow what I'm explaining.. \r\n\r\nAlso, that approach doesn't make our solution transparent to the underneath DNN architecture/framework (TensorFlow/Torch, etc.) since it needs the user to have specific code depending if he/she is using TensorFlow or Torch, because the user needs to take the \"under the covers\" TF .pb model and implement code for scoring which might also be specific for TensorFlow vs. Torch in the future. \r\n\r\nMoving forward, this discussion will be even more important for OBJECT DETECTION where in-memory image scoring is critical (streaming live video/images) while users might want to train based on image paths which is simpler.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4084","RelatedDescription":"Open issue \"[ImageClassification Transfer Learning] Higher level API supporting image predictions based on image file paths and in-memory images, alternatively\" (#4084)"},{"Id":"478103897","IsPullRequest":false,"CreatedAt":"2019-08-07T19:36:48","Actor":"CESARDELATORRE","Number":"4083","RawContent":null,"Title":"[ImageClassification Transfer Learning] Need simplified API for obtaining the List of predicted labels with their related scoring","State":"open","Body":"In the current implementation of ImageClassification Transfer Learning (but this also happens when scoring regular TensorFlow models) the list of predicted labels (usually categorical data of type string/text) with their related scoring (probability) is not straightforward to get. \r\n\r\nWe need a very simple and straightforward way of getting the best predicted values (such as categorical data) with their related probability.\r\n\r\nCurrently, in a typical ImagePrediction class you might have (such as in the sample link):\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/bbb6b1560dbd67640cf9c4b41640e26769ee664d/docs/samples/Microsoft.ML.Samples/Dynamic/ImageClassification/InceptionV3TransferLearning.cs#L101\r\n\r\n```\r\n    public class ImagePrediction\r\n    {\r\n        [ColumnName(\"Score\")]\r\n        public float[] Score;\r\n\r\n        [ColumnName(\"PredictedLabel\")]\r\n        public Int64 PredictedLabel;\r\n    }\r\n```\r\n\r\n1. First of all, the predicted label you get is a number (Int64) which is an **index**, not the value itself such as a categorical value. How is the user supposed to easily find out the text/categorical predicted label? - Sure, we might be able to find out through the schema API, but that is not straightforward.\r\n\r\n2. With the `PredictedLabel` field we're only getting **one** predicted label (so far, its index), but the user would  probably like to get an array with the \"best\" or even \"all\" predicted labels plus their correlated score/probability.\r\n\r\n3. The float[] array `Score` is precisely getting the probabilities for all the labels. But, how is the user supposed to easily be able to correlate those scores with their related labels (categorical values, for instance)?\r\n\r\n**ACTIONS MOVING FORWARD:**\r\n\r\n1. As initial step, the sample code above (or new sample) should show on the console output the list of all labels in their original form (categorical/text), or at least the best three predicted labels and their related score/probability. This should be done in the sample with the current API capabilities even if it is not straightforward to code for a user.\r\n\r\n2. Moving forward, since our goal is to create a simplified and high-level API for ImageClassification Transfer Learning, we should provide a way where such information is straightforward and **directly provided by the \"Prediction class\"**.  ","Url":"https://github.com/dotnet/machinelearning/issues/4083","RelatedDescription":"Open issue \"[ImageClassification Transfer Learning] Need simplified API for obtaining the List of predicted labels with their related scoring\" (#4083)"},{"Id":"478091103","IsPullRequest":false,"CreatedAt":"2019-08-07T19:04:11","Actor":"CESARDELATORRE","Number":"4082","RawContent":null,"Title":"Support stratify in TrainTestSplit() API","State":"open","Body":"Afaik, there's now way in ML.NET to split an original datasetset and create the two train/test datasets that are both balanced based on the LABEL/TARGET-CLASS or any other column (STRATIFICATION COLUMN). Am I right? \r\n\r\nI think this scenario is important so it is a lot easier to create balanced datasets that will provide a more reliable metrics when evaluating/testing a model.\r\n\r\n**Currently in Scikit-Learn:**\r\n\r\nFor instance, in  **ScitKit-Learn** you can do stratified sampling by splitting one data set so that each split are similar with respect to something. In a classification setting, it is often chosen to ensure that the train and test sets have approximately the same percentage of samples of each target class as the complete set.\r\n\r\nThis can be done in **ScitKit-Learn** with the stratify argument from **train_test_split()** where you can specify any column:\r\n\r\nhttps://scikit-learn.org/stable/modules/generated/sklearn.model_selection.train_test_split.html\r\n\t\t\t\t\r\n```\r\nstratify : array-like or None (default=None)\r\nIf not None, data is split in a stratified fashion, using this as the class labels.\r\n```\r\n\t\r\n**Currently in ML.NET:**\r\n\t\t\t\t\r\nIn ML.NET in the [TrainTestSplit() API](https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.dataoperationscatalog.traintestsplit?view=ml-dotnet) we have the **samplingKeyColumnName**, but that's kind of the opposite to 'Stratification column': \r\n\r\n_Name of a column to use for **grouping rows**. If two examples share the same value of the samplingKeyColumnName, they are guaranteed to appear in the same subset (train or test). This can be used to ensure no label leakage from the train to the test set. If null no row grouping will be performed._\r\n\r\nIt would be a good improvement for ML.NET to support a **stratify** feature in the [TrainTestSplit() API](https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.dataoperationscatalog.traintestsplit?view=ml-dotnet)\r\n\r\nRELATED ISSUES:\r\n\r\nhttps://github.com/dotnet/machinelearning/issues/2536 (In reality we didn't have stratification column, that was a wrong name. It was the current samplingKeyColumnName)\r\n\r\nhttps://github.com/dotnet/machinelearning/issues/1204 (Here Pete was wrong by calling stratification column to a sampling Key Column Name or 'GroupPreservationColumn')","Url":"https://github.com/dotnet/machinelearning/issues/4082","RelatedDescription":"Open issue \"Support stratify in TrainTestSplit() API\" (#4082)"},{"Id":"478082909","IsPullRequest":true,"CreatedAt":"2019-08-07T18:44:08","Actor":"harishsk","Number":"4081","RawContent":null,"Title":"Made RankingEvaluator  and related classes public and increased the truncation limit. ","State":"open","Body":"Fixes #3993","Url":"https://github.com/dotnet/machinelearning/pull/4081","RelatedDescription":"Open PR \"Made RankingEvaluator  and related classes public and increased the truncation limit. \" (#4081)"},{"Id":"478195262","IsPullRequest":false,"CreatedAt":"2019-08-07T16:11:27","Actor":"jaxidian","Number":"4092","RawContent":null,"Title":"How do I max out CPU cores with AutoML?","State":"open","Body":"I'm using AutoML to find and train the \"best model possible\" for my set of data. This is awesome and works really well - thanks all!\r\n\r\nMy question/problem comes to trying to max out the CPU resources when doing this resource-intensive process. I have a workstation with 12 cores (24 threads) yet when I have AutoML hammering at my system for multiple minutes, I only see ~20-25% CPU usage with most of my cores sitting idle. Given that it is training many different models at once, shouldn't it be able to make use of every single core available, complete with SMT resources as well? Is this configurable somewhere?","Url":"https://github.com/dotnet/machinelearning/issues/4092","RelatedDescription":"Open issue \"How do I max out CPU cores with AutoML?\" (#4092)"},{"Id":"478147052","IsPullRequest":false,"CreatedAt":"2019-08-06T17:07:01","Actor":"likellykang","Number":"4086","RawContent":null,"Title":"Easy way to get model parameters of AutoML's best run ","State":"open","Body":"It seems like there is no straightforward way to let users exam AutoML best run's model parameters when using AutoML API in ML.NET at this point. \r\nThis is potentially important for uses who need to re-produce AutoML's best run in other platforms. \r\n","Url":"https://github.com/dotnet/machinelearning/issues/4086","RelatedDescription":"Open issue \"Easy way to get model parameters of AutoML's best run \" (#4086)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-08-14T05:30:38.2259608Z","RunDurationInMilliseconds":607}