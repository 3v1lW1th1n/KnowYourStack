{"Data":{"GitHub":{"Issues":[{"Id":"446911675","IsPullRequest":false,"CreatedAt":"2019-05-22T03:07:43","Actor":"yaeldekel","Number":"3760","RawContent":null,"Title":"Implement Doc2vec text featurization","State":"open","Body":"This was brought up in issue #3743 .","Url":"https://github.com/dotnet/machinelearning/issues/3760","RelatedDescription":"Open issue \"Implement Doc2vec text featurization\" (#3760)"},{"Id":"446876120","IsPullRequest":false,"CreatedAt":"2019-05-22T00:07:48","Actor":"klausmh","Number":"3759","RawContent":null,"Title":"Support custom mapping without type parameters","State":"open","Body":"ML.NET supports [custom mappings](https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.custommappingcatalog.custommapping?view=ml-dotnet) if a source and destination type are specified statically.\r\n\r\nWould it also be possible to support this in a dynamic setting, i.e., doing custom mappings from IDataView to IDataView?","Url":"https://github.com/dotnet/machinelearning/issues/3759","RelatedDescription":"Open issue \"Support custom mapping without type parameters\" (#3759)"},{"Id":"446852458","IsPullRequest":true,"CreatedAt":"2019-05-21T22:27:32","Actor":"zeahmed","Number":"3758","RawContent":null,"Title":"Upgraded the TensorFlow version from 1.12.0 to 1.13.1","State":"open","Body":"Upgraded the TensorFlow version from 1.12.0 to 1.13.1. Cannot upgrade to version 2.0 as it is currently in alpha.","Url":"https://github.com/dotnet/machinelearning/pull/3758","RelatedDescription":"Open PR \"Upgraded the TensorFlow version from 1.12.0 to 1.13.1\" (#3758)"},{"Id":"446813574","IsPullRequest":false,"CreatedAt":"2019-05-21T20:36:48","Actor":"lisahua","Number":"3757","RawContent":null,"Title":"KeyToVectorMappingTransformer: Index was outside the bounds of the array.","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: 1.0.0\r\n- **.NET Version (eg., dotnet --info)**: 4.6.2\r\n\r\n### Issue\r\n\r\n- **What did you do?** Apply Normalization superviseBin and OneHot, \r\n- **What happened?** Got \"Index was outside the bounds of the array.\"\r\n- **What did you expect?** No error\r\n\r\n### Source code / logs\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n\r\n```\r\n            MLContext mlContext = new MLContext(seed: 0);\r\n            var dataPath = \"test1.csv\";\r\n            var featureName = \"Features\";\r\n            var loader = mlContext.Data.CreateTextLoader(new[] \r\n            {\r\n                new TextLoader.Column(\"int1\", DataKind.Int64, 0),\r\n                new TextLoader.Column(\"int2\", DataKind.Int64, 1),\r\n                new TextLoader.Column(\"Label\", DataKind.Boolean, 2),\r\n            }, hasHeader: true, separatorChar: ',');\r\n\r\n            var data = loader.Load(dataPath);\r\n            var learningPipeline = mlContext.Transforms.Conversion.ConvertType(\"int1\", outputKind: DataKind.Single)\r\n                    .Append(mlContext.Transforms.Conversion.ConvertType(\"int2\", outputKind: DataKind.Single))\r\n                    .Append(mlContext.Transforms.Concatenate(featureName, new string[] { \"int1\", \"int2\" }))\r\n                    .Append(mlContext.Transforms.NormalizeSupervisedBinning(featureName, fixZero: false, maximumBinCount: 5, labelColumnName: \"Label\"))\r\n                    .Append(mlContext.Transforms.Categorical.OneHotEncoding(featureName, outputKind: OneHotEncodingEstimator.OutputKind.Indicator));\r\n            learningPipeline.Fit(data).Transform(data).Preview();\r\n```\r\n\r\n```\r\nint1, int2, label\r\n301, 2000, true\r\n450, 3000, true\r\n-300, 4000, true\r\n300, 2000, false\r\n115, 2000, false\r\n115, 2000, false\r\n```\r\n\r\nI think it is related to [issue 1751](https://github.com/dotnet/machinelearning/issues/1751) And based on the discussion for this issue,  I tried \r\n- adding MapKeyToValue() but no help.\r\n- OneHotEncode cannot be easily removed, we want to treat binning as categorical feature. \r\n\r\n```\r\n            MLContext mlContext = new MLContext(seed: 0);\r\n            var dataPath = \"test1.csv\";\r\n            var featureName = \"Features\";\r\n            var loader = mlContext.Data.CreateTextLoader(new[] \r\n            {\r\n                new TextLoader.Column(\"int1\", DataKind.Int64, 0),\r\n                new TextLoader.Column(\"int2\", DataKind.Int64, 1),\r\n                new TextLoader.Column(\"Label\", DataKind.Boolean, 2),\r\n            }, hasHeader: true, separatorChar: ',');\r\n\r\n            var data = loader.Load(dataPath);\r\n            var learningPipeline = mlContext.Transforms.Conversion.ConvertType(\"int1\", outputKind: DataKind.Single)\r\n                    .Append(mlContext.Transforms.Conversion.ConvertType(\"int2\", outputKind: DataKind.Single))\r\n                    .Append(mlContext.Transforms.Conversion.MapValueToKey(\"Label\"))\r\n                    .Append(mlContext.Transforms.Concatenate(featureName, new string[] { \"int1\", \"int2\" }))\r\n                    .Append(mlContext.Transforms.NormalizeSupervisedBinning(featureName, fixZero: false, maximumBinCount: 5, labelColumnName: \"Label\"))\r\n                    .Append(mlContext.Transforms.Categorical.OneHotEncoding(featureName, outputKind: OneHotEncodingEstimator.OutputKind.Indicator))\r\n                    .Append(mlContext.Transforms.Conversion.MapKeyToValue(\"Label\"));\r\n            learningPipeline.Fit(data).Transform(data).Preview();\r\n```","Url":"https://github.com/dotnet/machinelearning/issues/3757","RelatedDescription":"Open issue \"KeyToVectorMappingTransformer: Index was outside the bounds of the array.\" (#3757)"},{"Id":"446778780","IsPullRequest":false,"CreatedAt":"2019-05-21T19:09:44","Actor":"daholste","Number":"3756","RawContent":null,"Title":"Potential memory leak when training?","State":"open","Body":"I modified a project in the samples repo to repro:\r\n\r\nhttps://github.com/daholste/machinelearning-samples/commit/577946224747959759ca1b4da9fd86f77eea81a9\r\n\r\nIf breakpoint at https://github.com/daholste/machinelearning-samples/blob/577946224747959759ca1b4da9fd86f77eea81a9/samples/csharp/getting-started/BinaryClassification_SentimentAnalysis/SentimentAnalysis/SentimentAnalysisConsoleApp/Program.cs#L52 , each model that is trained, the memory usage of the process consistently increases by about 80 MB (especially after the first few iterations of the loop).\r\n\r\nWhen the model is compressed & saved to disk, the size of the model file is only about 4.5 MB.\r\n\r\nWhen loading the saved model back into memory, memory of the process appears to jump by around 50 MB. (When loading the model several times back from disk to memory in the same process, average size of the model appears to be around 40 MB in memory. Not sure why. Perhaps string pooling? Not sure.)\r\n\r\nIs this a memory leak? \r\n80 MB of memory taken up by training model - 50 MB megabytes of same model serialized / deserialized = 30 MB of leakage?\r\nOr, does serializing / deserializing the model potentially restructure the data structures to use memory more efficiently?","Url":"https://github.com/dotnet/machinelearning/issues/3756","RelatedDescription":"Open issue \"Potential memory leak when training?\" (#3756)"},{"Id":"445120031","IsPullRequest":false,"CreatedAt":"2019-05-21T19:09:00","Actor":"knbz","Number":"3736","RawContent":null,"Title":" Source code / logs","State":"closed","Body":"### System information\r\n\r\n- **OS version/distro**:\r\n- **.NET Version (eg., dotnet --info)**: \r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\n- **What happened?**\r\n- **What did you expect?**\r\n\r\n### Source code / logs\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/3736","RelatedDescription":"Closed issue \" Source code / logs\" (#3736)"},{"Id":"446776675","IsPullRequest":false,"CreatedAt":"2019-05-21T19:04:21","Actor":"ganik","Number":"3755","RawContent":null,"Title":"Model summary to show tree details for FastTree","State":"open","Body":"Currently model summary doesnt show trees and split points for FastTree models.\r\nFastTree model needs to implement ICanGetSummaryAsIDataView that would dump this info.","Url":"https://github.com/dotnet/machinelearning/issues/3755","RelatedDescription":"Open issue \"Model summary to show tree details for FastTree\" (#3755)"},{"Id":"446765034","IsPullRequest":false,"CreatedAt":"2019-05-21T18:35:37","Actor":"prathyusha12345","Number":"3754","RawContent":null,"Title":"some Binary Classification trainers are giving excception \"Probability column not found\"","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Winows\r\n\r\n### Issue\r\n\r\nI am trying to do binary classification on dataset  at url  \"https://archive.ics.uci.edu/ml/datasets/URL+Reputation\" to classify an URL is malicious or not.\r\nI am trying to use different binary classification trainer to see which one gives better metrics. while doing that I am getting exception **Probability column  'Probability' not found\r\nParameter name: schema**  with some trainers below.\r\n-SDCANonCalibrated\r\n-SgdNonCalibrated\r\n-AveragedPerceptron\r\n-LinearSvm\r\n\r\n![image](https://user-images.githubusercontent.com/22335043/58121421-44cf1180-7bbc-11e9-98cb-bf111af73956.png)\r\n\r\n\r\n### Source code / logs\r\n\r\n```\r\n class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            string dataReltivePath = @\"Data/url_svmlight/\";\r\n            //string dataPath = GetAbsolutePath(dataReltivePath);\r\n            string dataPath = \"../../../url_svmlight/*\";\r\n            string testDataRelativePath = @\"../../../Data/test/Day21.svm\";\r\n            string testDataPath = GetAbsolutePath(testDataRelativePath);\r\n\r\n            //STEP 1: Create MLContext to be shared across the model creation workflow objects \r\n            MLContext mlContext = new MLContext();\r\n\r\n            //STEP 2: Read the trained data using TextLoader by defining the schema for reading the product co-purchase dataset\r\n            //        Do remember to replace amazon0302.txt with dataset from https://snap.stanford.edu/data/amazon0302.html\r\n            var traindata = mlContext.Data.LoadFromTextFile(path: dataPath,\r\n                                                      columns: new[]\r\n                                                                {\r\n                                                                    new TextLoader.Column(\"Label\", DataKind.Boolean, 0),\r\n                                                                    new TextLoader.Column(name:nameof(UrlData.FeatureVector), dataKind:DataKind.Single, source: new [] { new TextLoader.Range(1, 3231961) }),\r\n                                                                },\r\n                                                      hasHeader: true,\r\n                                                      separatorChar: ' ',\r\n                                                      allowSparse:true);\r\n\r\n            var testDataView = mlContext.Data.LoadFromTextFile(testDataPath,\r\n                columns: new[]\r\n                                                                {\r\n                                                                    new TextLoader.Column(\"Label\", DataKind.Boolean, 0),\r\n                                                                    new TextLoader.Column(name:nameof(UrlData.FeatureVector), dataKind:DataKind.Single, source: new [] { new TextLoader.Range(1, 3231961) }),\r\n                                                                },\r\n\r\n                hasHeader: true, separatorChar: ' ', allowSparse: true);\r\n\r\n            var est = mlContext.BinaryClassification.Trainers.SgdCalibrated(labelColumnName: \"Label\", featureColumnName: \"FeatureVector\");\r\n         \r\n            Console.WriteLine(\"====Training the model=====\");\r\n\r\n            var model = est.Fit(traindata);\r\n   }\r\n}\r\n```\r\n","Url":"https://github.com/dotnet/machinelearning/issues/3754","RelatedDescription":"Open issue \"some Binary Classification trainers are giving excception \"Probability column not found\"\" (#3754)"},{"Id":"445623406","IsPullRequest":true,"CreatedAt":"2019-05-21T17:14:59","Actor":"najeeb-kazmi","Number":"3745","RawContent":null,"Title":"Adding samples for data save and load from text and binary files","State":"closed","Body":"Fixes #3661 \r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/3745","RelatedDescription":"Closed or merged PR \"Adding samples for data save and load from text and binary files\" (#3745)"},{"Id":"446566150","IsPullRequest":true,"CreatedAt":"2019-05-21T11:29:42","Actor":"justinormont","Number":"3753","RawContent":null,"Title":"Minor typos in TextClassification.cs","State":"open","Body":"Minor typos. \r\n\r\nFeel free to merge when ready.","Url":"https://github.com/dotnet/machinelearning/pull/3753","RelatedDescription":"Open PR \"Minor typos in TextClassification.cs\" (#3753)"},{"Id":"446394095","IsPullRequest":false,"CreatedAt":"2019-05-21T02:59:39","Actor":"seabluescn","Number":"3752","RawContent":null,"Title":"How to get training progress info?","State":"open","Body":"Hi，Suppose I have 10,000 training data. When I run Fit method, it takes a long time. During this period, how can I get real-time training progress information?\r\nThank You!","Url":"https://github.com/dotnet/machinelearning/issues/3752","RelatedDescription":"Open issue \"How to get training progress info?\" (#3752)"},{"Id":"446361548","IsPullRequest":false,"CreatedAt":"2019-05-21T00:11:15","Actor":"prathyusha12345","Number":"3751","RawContent":null,"Title":"Model is predicting null when a user used CustomModel in TensorFlow Image Classification","State":"open","Body":"User has reported issue in Machine Learning samples https://github.com/dotnet/machinelearning-samples/issues/468 \r\n\r\n I have used the custom model and labels.txt provided by user in [TensorFlow image classification sample](https://github.com/dotnet/machinelearning-samples/tree/master/samples/csharp/getting-started/DeepLearning_ImageClassification_TensorFlow) and changed the model pipeLine for Tensor input and output as shown below.\r\n\r\n```\r\nvar pipeline = mlContext.Transforms.LoadImages(outputColumnName: \"Placeholder\", imageFolder: imagesFolder, inputColumnName: nameof(ImageNetData.ImagePath))\r\n                           .Append(mlContext.Transforms.ResizeImages(outputColumnName: \"Placeholder\", imageWidth: ImageNetSettings.imageWidth, imageHeight: ImageNetSettings.imageHeight, inputColumnName: \"Placeholder\"))\r\n                           .Append(mlContext.Transforms.ExtractPixels(outputColumnName: \"Placeholder\", interleavePixelColors: ImageNetSettings.channelsLast, offsetImage: ImageNetSettings.mean))\r\n                           .Append(mlContext.Model.LoadTensorFlowModel(modelLocation).\r\n                           ScoreTensorFlowModel(outputColumnNames: new[] { \"loss\" },\r\n                                               inputColumnNames: new[] { \"Placeholder\" }, addBatchDimensionInput: true));\r\n```\r\n\r\nWhile predicting an image using the prediction engine, the model is not predicting anything and its giving predictedLabels value as null.\r\n\r\n`var probs = model.Predict(sample).PredictedLabels;`\r\n\r\n![image](https://user-images.githubusercontent.com/22335043/58059536-38967600-7b22-11e9-91e2-ec6263e3ceba.png)\r\n\r\n\r\nCould any one let me know why the model is not predicting any label?","Url":"https://github.com/dotnet/machinelearning/issues/3751","RelatedDescription":"Open issue \"Model is predicting null when a user used CustomModel in TensorFlow Image Classification\" (#3751)"},{"Id":"446292589","IsPullRequest":false,"CreatedAt":"2019-05-20T20:20:42","Actor":"PeterPann23","Number":"3750","RawContent":null,"Title":"AutoML Code generation generates failing code if the CSV provided have a header named Label","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**:\r\nwindows 10\r\n- **.NET Version (eg., dotnet --info)**: \r\nAutoMl Wizard Rel 0.3.0\r\n### Issue\r\n\r\n- **What did you do?**\r\nCreated a CSV file for the wizard with a column that it needed to predict with the name Label\r\n- **What happened?**\r\nThe code generation created a KeyValue mapper with Label =>Label and PredictedLabel=>PredictedLabel \r\n\r\n\r\n```\r\npublic static IEstimator<ITransformer> BuildTrainingPipeline(MLContext mlContext)\r\n{\r\n\t// Data process configuration with pipeline data transformations \r\n\tvar dataProcessPipeline = mlContext.Transforms.Conversion.MapValueToKey(\"Label\", \"Label\")\r\n\t\t\t\t\t\t\t  .Append(mlContext.Transforms.Concatenate(\"Features\", new[] { \"F1\", \"F2\", \"F3\"}));\r\n\r\n\t// Set the training algorithm \r\n\tvar trainer = mlContext.MulticlassClassification.Trainers.LightGbm(labelColumnName: \"Label\", featureColumnName: \"Features\")\r\n\t\t\t\t\t\t\t  .Append(mlContext.Transforms.Conversion.MapKeyToValue(\"PredictedLabel\", \"PredictedLabel\"));\r\n\tvar trainingPipeline = dataProcessPipeline.Append(trainer);\r\n\r\n\treturn trainingPipeline;\r\n}\r\n```\r\nWhen executing the training the code fails here\r\n\r\n![sample fails](https://user-images.githubusercontent.com/44400822/58049408-15cd8700-7b4d-11e9-989c-5d7c430f581c.PNG)\r\n\r\n\r\n\r\n- **What did you expect?**\r\nWriting code that covers all possible issues is hard however as MapValueToKey goes to an internal field and MapKeyToValue cpmes from that internal field it might help not using the same name.\r\nWould be nice if the starter project would work, gives those that give the project a spin a positive vibe.\r\n\r\nPerhaps warn the user that he may needs to change the code, if this occurs, better would be if the issue doesn't happen.\r\n\r\n### Source code / logs\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/3750","RelatedDescription":"Open issue \"AutoML Code generation generates failing code if the CSV provided have a header named Label\" (#3750)"},{"Id":"446271599","IsPullRequest":false,"CreatedAt":"2019-05-20T19:24:18","Actor":"markusmobius","Number":"3749","RawContent":null,"Title":"maxExperimentTimeInSeconds - possible to make it deterministic across machines","State":"open","Body":"We started using AutoML to classify about 15000 daily news articles into 50 topics (our early results with AutoML are excellent). We get a training set from a different pipeline that identifies with high precision topics (a community detection algorithm which works well in identifying natural daily topics but has poor recall). We use AutoML to train a multiclass classifier using the output from the first pipeline as the training set. We found that we get best recall by running AutoML a number of times (right now we use 9 times) and only use articles which are assigned to the same topic in a majority of cases with a threshold for the max score (our training set covers about 15% of articles in the daily corpus, a single run of Automl increases to about 25% and the multiple-run hack increases it to 35%).\r\n\r\nOne thing which we don't understand is the maxExperimentTimeInSeconds parameter when calling: \r\nCreateMulticlassClassificationExperiment\r\n\r\nWe are running AutoML across different machines on Windows and Linux with different cores etc. We found that the depth of the experiment pipeline varies a lot across machines - maybe because things take longer on less powerful servers.\r\n\r\nIt would be great if one could control the depth of the AutoML search by another way than maxExperimentTimeInSeconds. \r\n\r\nPossibly related issue: we found that when running AutoML as part of process that consumes about 60GB of memory the experiment take double as long as when we run it with the same data on its own. Moreover, when calling autoML successively (even when creating a new mlContext) the runtimes becomes longer and longer and the depth of the AutoML search becomes shorter (even with maxExperimentTimeInSeconds constant).\r\n\r\nWe therefore now run the AutoML pipeline in a separate child process (one run at a time, then destroy the child process and start fresh; memory consumption is about 2G per run) which produces similar runtimes and depth across runs. But it would be nice to avoid this.","Url":"https://github.com/dotnet/machinelearning/issues/3749","RelatedDescription":"Open issue \"maxExperimentTimeInSeconds - possible to make it deterministic across machines\" (#3749)"},{"Id":"445992438","IsPullRequest":false,"CreatedAt":"2019-05-20T08:43:21","Actor":"PeterPann23","Number":"3748","RawContent":null,"Title":"Add sample for use with Binary dataset","State":"open","Body":"\r\n[Enter feedback here]\r\n\r\nWould be nice to show how a binary file can be used (and re-used) to use strong typed data\r\n---\r\n#### Document Details\r\n\r\n⚠ *Do not edit this section. It is required for docs.microsoft.com ➟ GitHub issue linking.*\r\n\r\n* ID: d77f7787-449e-9eeb-9dc8-e7ca22091538\r\n* Version Independent ID: 2dca3efe-4be8-72c3-0e71-226c2183cc89\r\n* Content: [DataOperationsCatalog.CreateEnumerable(IDataView, Boolean, Boolean, SchemaDefinition) Method (Microsoft.ML)](https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.dataoperationscatalog.createenumerable?f1url=https%3A%2F%2Fmsdn.microsoft.com%2Fquery%2Fdev15.query%3FappId%3DDev15IDEF1%26l%3DEN-US%26k%3Dk(Microsoft.ML.DataOperationsCatalog.CreateEnumerable%60%601);k(SolutionItemsProject);k(DevLang-csharp)%26rd%3Dtrue&view=ml-dotnet)\r\n* Content Source: [dotnet/xml/Microsoft.ML/DataOperationsCatalog.xml](https://github.com/dotnet/ml-api-docs/blob/live/dotnet/xml/Microsoft.ML/DataOperationsCatalog.xml)\r\n* Product: **dotnet-ml-api**\r\n* GitHub Login: @sfilipi\r\n* Microsoft Alias: **johalex**","Url":"https://github.com/dotnet/machinelearning/issues/3748","RelatedDescription":"Open issue \"Add sample for use with Binary dataset\" (#3748)"},{"Id":"445962127","IsPullRequest":false,"CreatedAt":"2019-05-20T07:28:21","Actor":"PeterPann23","Number":"3747","RawContent":null,"Title":"Feels like an endless loop","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**:\r\nWindows Server 2019, \r\nWindows Server 2012, \r\nWindows 10\r\n\r\n- **.NET Version (eg., dotnet --info)**: \r\nDot net Core 3.0\r\nML 1.0.0\r\n[Dump header.txt](https://github.com/dotnet/machinelearning/files/3196652/Dump.header.txt)\r\n\r\n\r\n\r\n### Issue\r\n- **What did you do?**\r\nApplied the following training against a binary dataset of 77.7 Gb\r\n\r\n```\r\nvar featureColumns = Mapper.GetFieldNames();\r\nvar pipeline = mlContext.Transforms.Concatenate(outputColumnName: RawFeatures, inputColumnNames: featureColumns)\r\n        .Append(mlContext.Transforms.Conversion.MapValueToKey(outputColumnName: KeyColumn, inputColumnName: Label))\r\n        .Append(mlContext.Transforms.NormalizeMinMax(outputColumnName:Features,inputColumnName: RawFeatures))\r\n        .Append(mlContext.MulticlassClassification.Trainers.LightGbm(options))\r\n        .Append(mlContext.Transforms.CopyColumns(inputColumnName: KeyColumn, outputColumnName: nameof(PredictedResult.PredictedLabelIndex)));\r\nvar model = pipeline.Fit(horizonDataset.TrainSet);\r\n```\r\nCreated the data set from a Tab Separated file size 398 GB\r\n\r\n- **What happened?**\r\n After some time the trainer seems to loop in memory and CPU performance idles at bellow 20% \r\n![Attached Debugger](https://user-images.githubusercontent.com/44400822/58003126-6955bb80-7ae0-11e9-8f5b-d572f7f86bf2.PNG)\r\n\r\n\r\n![Attached Debugger2](https://user-images.githubusercontent.com/44400822/58003354-df5a2280-7ae0-11e9-9fc6-a36030517221.PNG)\r\n\r\n\r\n- **What did you expect?**\r\nExpect the model to train in a linear manner in the same way as a smaller dataset does, where each GB takes a approximate time, multiply the GB and you get a projected finish time.\r\n\r\nI have reported this several times already, it is hard to discover if the system is \"alive\" or looping this becomes problematic after a few days of no feedback. if you need to access my process perhaps we do a live share session\r\n\r\n### Source code / logs\r\n\r\n[MLContext Log](https://github.com/dotnet/machinelearning/files/3196620/2019.05.19.102043_log.rpt.zip)","Url":"https://github.com/dotnet/machinelearning/issues/3747","RelatedDescription":"Open issue \"Feels like an endless loop\" (#3747)"},{"Id":"445816778","IsPullRequest":true,"CreatedAt":"2019-05-19T12:56:26","Actor":"jwood803","Number":"3746","RawContent":null,"Title":"WIP: Update nullable value to GetValueOrDefault","State":"open","Body":"Update for #2612. Set as WIP to start getting feedback.\r\n\r\n@TomFinley Just let me know if I missed anything.","Url":"https://github.com/dotnet/machinelearning/pull/3746","RelatedDescription":"Open PR \"WIP: Update nullable value to GetValueOrDefault\" (#3746)"},{"Id":"445201612","IsPullRequest":true,"CreatedAt":"2019-05-17T19:55:15","Actor":"PranovD","Number":"3742","RawContent":null,"Title":"These changes allow for ML.NET to be built from source by VS2019 ","State":"closed","Body":"Fixes [#3739](https://github.com/dotnet/machinelearning/issues/3739)\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/3742","RelatedDescription":"Closed or merged PR \"These changes allow for ML.NET to be built from source by VS2019 \" (#3742)"},{"Id":"445181624","IsPullRequest":false,"CreatedAt":"2019-05-17T19:55:15","Actor":"PranovD","Number":"3739","RawContent":null,"Title":"Unable to build ML.NET from source with Visual Studio 2019","State":"closed","Body":"### Issue\r\n\r\n- **What did you do?**: I tried to build ML.NET from the developer's guide using Visual Studio 2019\r\n- **What happened?**: The build failed\r\n\r\n`Error: Visual Studio 2015 or 2017 required.`\r\n\r\nIn src/Native/build.cmd at line 64:\r\n`:VS2019`\r\n`:: Setup vars for VS2019`\r\n`set __PlatformToolset=v142`\r\n`set __VSVersion=15 2017`\r\n`if NOT \"%__BuildArch%\" == \"arm64\" (`\r\n`    :: Set the environment for the native build`\r\n`    call \"%VS160COMNTOOLS%..\\..\\VC\\Auxiliary\\Build\\vcvarsall.bat\" %__VCBuildArch%`\r\n`)`\r\n\r\nNeeds to be `set __VSVersion=16 2019`\r\n\r\nAlso cmake needs to be of version 3.14 or higher as it contains the generator for Visual Studion 2019\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/3739","RelatedDescription":"Closed issue \"Unable to build ML.NET from source with Visual Studio 2019\" (#3739)"},{"Id":"445175647","IsPullRequest":true,"CreatedAt":"2019-05-17T16:59:39","Actor":"shmoradims","Number":"3738","RawContent":null,"Title":"Added sample for WithOnFitDelegate","State":"closed","Body":"Fixes #3732 ","Url":"https://github.com/dotnet/machinelearning/pull/3738","RelatedDescription":"Closed or merged PR \"Added sample for WithOnFitDelegate\" (#3738)"},{"Id":"444869499","IsPullRequest":false,"CreatedAt":"2019-05-17T16:59:39","Actor":"PeterPann23","Number":"3732","RawContent":null,"Title":"Mising code sample","State":"closed","Body":"\r\n[Enter feedback here]\r\nThere is no code sample for the use of this method. \r\n\r\n---\r\n#### Document Details\r\n\r\n⚠ *Do not edit this section. It is required for docs.microsoft.com ➟ GitHub issue linking.*\r\n\r\n* ID: 64513161-127f-5e7a-b518-9a769f318b62\r\n* Version Independent ID: ce31be65-31c5-df38-73f2-c1d5cca46396\r\n* Content: [LearningPipelineExtensions.WithOnFitDelegate(IEstimator&lt;TTransformer&gt;, Action&lt;TTransformer&gt;) Method (Microsoft.ML)](https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.learningpipelineextensions.withonfitdelegate?view=ml-dotnet)\r\n* Content Source: [dotnet/xml/Microsoft.ML/LearningPipelineExtensions.xml](https://github.com/dotnet/ml-api-docs/blob/live/dotnet/xml/Microsoft.ML/LearningPipelineExtensions.xml)\r\n* Product: **dotnet-ml-api**\r\n* GitHub Login: @sfilipi\r\n* Microsoft Alias: **johalex**","Url":"https://github.com/dotnet/machinelearning/issues/3732","RelatedDescription":"Closed issue \"Mising code sample\" (#3732)"},{"Id":"445523066","IsPullRequest":false,"CreatedAt":"2019-05-17T16:29:16","Actor":"PeterPann23","Number":"3744","RawContent":null,"Title":"Why do I need to have the Lable field in the CreatePredictionEngine<TSrc,> class","State":"open","Body":"Hi,\r\n\r\nI am wondering why shoeld TSrc in MLContext.Model.CreatePredictionEngine<TSrc, TDst> contain the Label fields as it should not need it to make a prediction. I get it why the other fields needs to be there but the one fields if's supposed to predict is the one it should be able to do without. \r\nOmitting the fields in your class however would cause an exception when calling CreatePredictionEngine().\r\n\r\nIs this intentional? ","Url":"https://github.com/dotnet/machinelearning/issues/3744","RelatedDescription":"Open issue \"Why do I need to have the Lable field in the CreatePredictionEngine<TSrc,> class\" (#3744)"},{"Id":"445363969","IsPullRequest":false,"CreatedAt":"2019-05-17T10:01:39","Actor":"larsbeck","Number":"3743","RawContent":null,"Title":"Question: Deep Learning and Doc2Vec","State":"open","Body":"Hi, \r\n\r\nI was wondering if there are any plans to allow modeling deep neural networks. I know that it is possible to consume Tensorflow models. I am interested in creating and training models directly in ml.net\r\n\r\nUnrelated to the first question: Are there any plans to implement Doc2vec as an alternative to the current FeaturizeText feature.\r\n\r\nIn case this issue tracker is the wrong place to ask questions, please point me to the site you might be using for questions.\r\n\r\nThanks, \r\n\r\nLars","Url":"https://github.com/dotnet/machinelearning/issues/3743","RelatedDescription":"Open issue \"Question: Deep Learning and Doc2Vec\" (#3743)"},{"Id":"445175244","IsPullRequest":false,"CreatedAt":"2019-05-17T07:41:47","Actor":"hugoterelle","Number":"3737","RawContent":null,"Title":"Unable to train model if the Label of the training dataset are always the same","State":"closed","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10\r\n- **.NET Version (eg., dotnet --info)**: dotnet core 2.2, ML.NET 1.0\r\n\r\n### Issue\r\n\r\nI want to train a model using this class:\r\n\r\n```\r\n    public class TagData\r\n    {\r\n        [LoadColumn(0)]\r\n        public string Label;\r\n\r\n        [LoadColumn(1)]\r\n        public string Text;\r\n\r\n        [LoadColumn(2)]\r\n        public string CustomerId;\r\n    }\r\n```\r\nAnd my pipeline is written as follow:\r\n\r\n```\r\nvar dataView = mlContext.Data.LoadFromEnumerable(tagDatas);\r\n\r\n var pipeline = mlContext.Transforms.Conversion.MapValueToKey(\"Label\", \"Label\")\r\n                            .Append(mlContext.Transforms.Text.FeaturizeText(\"TextFeaturized\", nameof(TagData.Text)))\r\n                            .Append(mlContext.Transforms.Text.FeaturizeText(\"CustomerIdFeaturized\", nameof(TagData.CustomerId)))\r\n                            .Append(mlContext.Transforms.Concatenate(\"Features\", \"TextFeaturized\", \"CustomerIdFeaturized\"))\r\n                            .Append(mlContext.MulticlassClassification.Trainers.SdcaMaximumEntropy())\r\n                            .Append(mlContext.Transforms.Conversion.MapKeyToValue(\"PredictedLabel\"));\r\n\r\nvar model = pipeline.Fit(dataView);\r\n\r\n```\r\n\r\n**My first test**\r\n\r\nTagDatas is a collection of 3 objects where:\r\n- `CustomerId` is identical in all objects\r\n- `Text` is always different\r\n- `Label` (the value I want to predict in the future) is always **different**\r\n\r\nEverything woks fine.\r\n\r\n**My second test**\r\n\r\nTagDatas is a collection of 3 objects where:\r\n- `CustomerId` is identical in all objects\r\n- `Text` is always different\r\n- `Label` (the value I want to predict in the future) is always **identical**\r\n\r\nProblem: The instruction `pipeline.Fit(dataview);` never ends (and the process keeps consuming a lot of memory & CPU)\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/3737","RelatedDescription":"Closed issue \"Unable to train model if the Label of the training dataset are always the same\" (#3737)"},{"Id":"445189971","IsPullRequest":true,"CreatedAt":"2019-05-16T22:43:34","Actor":"artidoro","Number":"3741","RawContent":null,"Title":"Added omp requirement to build on Linux on README","State":"open","Body":"Fixes #3740.\r\n\r\nAdds requirement and sample command to build on Linux.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/3741","RelatedDescription":"Open PR \"Added omp requirement to build on Linux on README\" (#3741)"},{"Id":"445189592","IsPullRequest":false,"CreatedAt":"2019-05-16T22:42:03","Actor":"artidoro","Number":"3740","RawContent":null,"Title":"Missing requirement in building guidelines for Linux","State":"open","Body":"Using the given commands I am not able to build on Ubuntu 18.04 because of missing libomp-dev.","Url":"https://github.com/dotnet/machinelearning/issues/3740","RelatedDescription":"Open issue \"Missing requirement in building guidelines for Linux\" (#3740)"},{"Id":"445003008","IsPullRequest":false,"CreatedAt":"2019-05-16T14:54:23","Actor":"Doggie52","Number":"3735","RawContent":null,"Title":"[Model Builder] Canceling training should not discard current results","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10.0.18362 x64\r\n- **.NET Version (eg., dotnet --info)**:  2.1.507\r\n- **ML.NET Model Builder version**: 16.0.1905.641\r\n- **Visual Studio 2017 version**: 15.9.12\r\n\r\n### Issue\r\n\r\n- **What did you do?** Ran Model Builder and started Training. After noticing that accuracy was not improving, I decided to cancel the training.\r\n- **What happened?** Progress was canceled and I was unable to proceed to the Evaluate stage.\r\n- **What did you expect?** I wanted to continue to the Evaluate stage to take the so far best performing model forward.\r\n\r\nPossibly related to #844 although that issue I believe is for training one particular model, whereas this is for training multiple models.\r\n\r\n### Source code / logs\r\n\r\n![image](https://user-images.githubusercontent.com/4928988/57863894-cb69a480-77f2-11e9-8644-b10ce7c2337a.png)\r\n\r\nAs you can see, no link to Evaluate was present beneath the results.","Url":"https://github.com/dotnet/machinelearning/issues/3735","RelatedDescription":"Open issue \"[Model Builder] Canceling training should not discard current results\" (#3735)"},{"Id":"444894978","IsPullRequest":false,"CreatedAt":"2019-05-16T11:10:28","Actor":"Doggie52","Number":"3734","RawContent":null,"Title":"[Model Builder] Best accuracy not found in Top 5 models","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10.0.18362 x64\r\n- **.NET Version (eg., dotnet --info)**:  2.1.507\r\n- **ML.NET Model Builder version**: 16.0.1905.641\r\n- **Visual Studio 2017 version**: 15.9.12\r\n\r\n### Issue\r\n\r\n- **What did you do?** Ran ML.NET Model Builder in Visual Studio and trained a binary classification model for 120 seconds\r\n- **What happened?** The _Best Model Accuracy_ was given as 80.65% but the best model in the Top 5 models was listed as having 75.00% accuracy. See picture below for an example\r\n- **What did you expect?** I would expect the _Best Model Accuracy_ to match the best model's  accuracy perfectly.\r\n\r\n### Source code / logs\r\n\r\n![image](https://user-images.githubusercontent.com/4928988/57849473-4a4ee500-77d3-11e9-988a-8bbcfe73b88c.png)\r\n\r\nDo let me know if you need any logs or otherwise.","Url":"https://github.com/dotnet/machinelearning/issues/3734","RelatedDescription":"Open issue \"[Model Builder] Best accuracy not found in Top 5 models\" (#3734)"},{"Id":"444873476","IsPullRequest":false,"CreatedAt":"2019-05-16T10:20:27","Actor":"PeterPann23","Number":"3733","RawContent":null,"Title":"WithOnFitDelegate test coverage and code samples","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: \r\nWindows 10\r\n- **.NET Version (eg., dotnet --info)**: \r\nRelease 1.0.0.0. \r\n\r\n### Issue\r\n- **Related**\r\n#3732  \r\n\r\n- **What did you do?**\r\nLooked for implementations of any samples or tests in regards of how to use the WithOnFitDelegate. I have found none, no unit tests, no samples and not much documentation even though it looks like all networks cal on fit in one way or another. \r\n\r\n- **What did you expect?**\r\nI expect to find some documentation on the method as it allows on looking at the progress of the model being build\r\n","Url":"https://github.com/dotnet/machinelearning/issues/3733","RelatedDescription":"Open issue \"WithOnFitDelegate test coverage and code samples\" (#3733)"},{"Id":"444760854","IsPullRequest":true,"CreatedAt":"2019-05-16T05:28:46","Actor":"srsaggam","Number":"3731","RawContent":null,"Title":"[AutoML] Fix for Column inference for R4 type column in different cultures ","State":"open","Body":"Looks like the column inference is getting wrong in some of the cultures like Deutsch and Finnish . \r\nSo making the parsing InvariantCulture","Url":"https://github.com/dotnet/machinelearning/pull/3731","RelatedDescription":"Open PR \"[AutoML] Fix for Column inference for R4 type column in different cultures \" (#3731)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-05-22T05:30:38.9202183Z","RunDurationInMilliseconds":752}