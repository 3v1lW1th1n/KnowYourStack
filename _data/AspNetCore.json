{"Data":{"Blog":{"FeedItems":[{"Title":"Get started building .NET web apps that run in the browser with Blazor","PublishedOn":"2018-03-22T17:00:26+00:00","CommentsCount":17,"FacebookCount":0,"Summary":"Today we released our first public preview of Blazor, a new experimental .NET web framework using C#/Razor and HTML that runs in the browser with WebAssembly. Blazor enables full stack web development...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/22/get-started-building-net-web-apps-in-the-browser-with-blazor/","RawContent":null},{"Title":"ASP.NET Core manageability and Application Insights improvements","PublishedOn":"2018-03-22T14:12:38+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"There are many great investments on the ASP.NET Core 2.1 roadmap. These investments make ASP.NET Core applications easier to write, host, test, and make security and standards compliant. This blog...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/22/asp-net-core-manageability-and-application-insights-improvements/","RawContent":null},{"Title":"Announcing Preview 1 of ASP.NET MVC 5.2.5, Web API 5.2.5, and Web Pages 3.2.5","PublishedOn":"2018-03-19T22:00:27+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today we released Preview 1 of ASP.NET MVC 5.2.5, Web API 5.2.5, and Web Pages 3.2.5 on NuGet. This is a patch release that contains only bug fixes. You can find the full list of bug fixes for this...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/19/announcing-preview-1-of-asp-net-mvc-5-2-5-web-api-5-2-5-and-web-pages-3-2-5/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Functional testing of MVC applications","PublishedOn":"2018-03-05T18:30:28+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For ASP.NET Core 2.1 we have created a new package, Microsoft.AspNetCore.Mvc.Testing, to help streamline in-memory end-to-end testing of MVC applications using TestServer. This package takes care of...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/05/asp-net-core-2-1-0-preview1-functional-testing-of-mvc-applications/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: GDPR enhancements","PublishedOn":"2018-03-04T19:21:40+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"2018 sees the introduction of the General Data Protection Regulation, an EU framework to allow EU citizens to control, correct and delete their data, no matter where in the word it is held. In ASP.NET...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/04/asp-net-core-2-1-0-preview1-gdpr-enhancements/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Introducing Identity UI as a library","PublishedOn":"2018-03-02T19:00:19+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"ASP.NET Core has historically provided project templates with code for setting up ASP.NET Core Identity, which enables support for identity related features like user registration, login, account...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/02/aspnetcore-2-1-identity-ui/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Razor UI in class libraries","PublishedOn":"2018-03-01T18:00:26+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"One frequently requested scenario that ASP.NET Core 2.1 improves is building UI in reusable class libraries. With ASP.NET Core 2.1 you can package your Razor views and pages (.cshtml files) along with...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/01/asp-net-core-2-1-razor-ui-in-class-libraries/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Improvements to IIS hosting","PublishedOn":"2018-03-01T01:56:02+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"The ASP.NET Core Module (ANCM) is a global IIS module that has been responsible for proxying requests over from IIS to your backend ASP.NET Core application running Kestrel. Since 2.0 we have been...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/28/asp-net-core-2-1-0-preview1-improvements-to-iis-hosting/","RawContent":null},{"Title":"ASP.NET Core 2.1-preview1: Introducing HTTPClient factory","PublishedOn":"2018-03-01T01:47:41+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"HttpClient factory is an opinionated factory for creating HttpClient instances to be used in your applications. It is designed to: Provide a central location for naming and configuring logical...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/28/asp-net-core-2-1-preview1-introducing-httpclient-factory/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Improvements for building Web APIs","PublishedOn":"2018-02-27T23:30:07+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"ASP.NET Core 2.1 adds a number of features that make it easier and more convenient to build Web APIs. These features include Web API controller specific conventions, more robust input processing and...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/27/asp-net-core-2-1-web-apis/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7474847787","Type":"IssuesEvent","CreatedAt":"2018-04-03T19:40:58","Actor":"Tratcher","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/2477","RelatedDescription":"Closed issue \"Autobahn Failure: Many failures when in non-Windows over SSL\" (#2477) at aspnet/Home","RelatedBody":"_From @anurse on Friday, July 15, 2016 10:14:56 AM_\r\n\r\nMost of the test cases fail when running on a non-Windows platform using Kestrel's built-in SSL implementation.\n\r\n\r\n_Copied from original issue: aspnet/WebSockets#102_"},{"Id":"7474834345","Type":"IssuesEvent","CreatedAt":"2018-04-03T19:38:16","Actor":"muratg","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/2978","RelatedDescription":"Closed issue \"Dependency Injection error when using options in unit test\" (#2978) at aspnet/Home","RelatedBody":"When I try to use option Inside unit test I have a dependency injection exception when I try to consume a service which requires an option to be constructed.\r\n\r\nThe configuration is built like this:\r\n\r\n```c#\r\nvar builder = new ConfigurationBuilder()\r\n            .SetBasePath(Directory.GetCurrentDirectory())\r\n            .AddUserSecrets<LemonWayPaiementTest>();\r\n            Configuration = builder.Build();\r\n            services.Configure<LemonWaySettings> (Configuration.GetSection (\"Lemonway\"));\r\n```\r\n\r\nI use user secret to store the settings. The settings are correctly read at unit test start, but when I try to access a service which require the setting I have the exception.\r\n\r\n\r\nHere is the stack:\r\n```\r\nAn exception of type 'System.InvalidOperationException' occurred in Microsoft.Extensions.DependencyInjection.dll but was not handled in user code: 'Unable to resolve service for type 'Microsoft.Extensions.Options.IOptionsSnapshot`1[LemonWayPaiement.LemonWaySettings]' while attempting to activate 'LemonWayPaiement.LemonwayPaiement'.'\r\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory.CreateArgumentCallSites(Type serviceType, Type implementationType, ISet`1 callSiteChain, ParameterInfo[] parameters, Boolean throwIfCallSiteNotFound)\r\n```\r\n"},{"Id":"7474021830","Type":"IssuesEvent","CreatedAt":"2018-04-03T17:02:16","Actor":"Eilon","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/1338","RelatedDescription":"Closed issue \"StreamSocketListener-based Server\" (#1338) at aspnet/Home","RelatedBody":"I know we have WebListener which appears to work fine on Windows IoT Core (see [DamianEdwards/PiDnx](https://github.com/DamianEdwards/PiDnx)), but would there be any value in having a server implemented over the top of WinRT's [Windows.Networking.Sockets.StreamSocketListener](https://msdn.microsoft.com/en-us/library/windows/apps/windows.networking.sockets.streamsocketlistener.aspx) API?\n\nWill WebListener work work in a [Windows IoT Core Background Application](https://visualstudiogallery.msdn.microsoft.com/55b357e1-a533-43ad-82a5-a88ac4b01dec) project?\n\ncc @DamianEdwards @Tratcher\n"}],"ResultType":"GitHubEvent"},"SignalR":{"Events":[{"Id":"7476776215","Type":"PullRequestEvent","CreatedAt":"2018-04-04T05:23:19","Actor":"BrennanConroy","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/pull/1845","RelatedDescription":"Opened pull request \"MsgPack perf\" (#1845) at aspnet/SignalR","RelatedBody":"Before\r\n```\r\n             Method |          Input | HubProtocol |        Mean |     Error |      StdDev |      Median |        Op/s |  Gen 0 | Allocated |\r\n------------------- |--------------- |------------ |------------:|----------:|------------:|------------:|------------:|-------:|----------:|\r\n WriteSingleMessage |   FewArguments |     MsgPack |  1,803.6 ns |  34.42 ns |    32.20 ns |  1,810.2 ns |   554,435.6 | 0.0038 |     568 B |\r\n WriteSingleMessage | LargeArguments |     MsgPack | 20,765.8 ns | 502.79 ns | 1,418.12 ns | 20,320.4 ns |    48,156.0 | 0.7324 |   61944 B |\r\n WriteSingleMessage |  ManyArguments |     MsgPack |  3,344.6 ns |  66.26 ns |   112.52 ns |  3,331.5 ns |   298,990.4 | 0.0076 |     840 B |\r\n WriteSingleMessage |    NoArguments |     MsgPack |    994.9 ns |  21.17 ns |    46.91 ns |    995.7 ns | 1,005,150.6 | 0.0019 |     320 B |\r\n```\r\n\r\nAfter\r\n``` \r\n             Method |          Input | HubProtocol |        Mean |     Error |    StdDev |        Op/s |  Gen 0 | Allocated |\r\n------------------- |--------------- |------------ |------------:|----------:|----------:|------------:|-------:|----------:|\r\n WriteSingleMessage |   FewArguments |     MsgPack |  1,630.4 ns |  32.49 ns |  83.86 ns |   613,359.9 | 0.0038 |     520 B |\r\n WriteSingleMessage | LargeArguments |     MsgPack | 20,307.1 ns | 405.71 ns | 721.14 ns |    49,243.9 | 0.7019 |   61896 B |\r\n WriteSingleMessage |  ManyArguments |     MsgPack |  3,013.0 ns |  59.57 ns | 102.75 ns |   331,900.1 | 0.0076 |     792 B |\r\n WriteSingleMessage |    NoArguments |     MsgPack |    687.4 ns |  13.54 ns |  25.43 ns | 1,454,798.5 | 0.0029 |     272 B |\r\n```"}],"ResultType":"GitHubEvent"},"Mvc":{"Events":[{"Id":"7475788755","Type":"IssuesEvent","CreatedAt":"2018-04-03T23:14:37","Actor":"rynowak","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7036","RelatedDescription":"Closed issue \"Allow the use of exceptions instead of IActionResult - Needed for Swagger, RAML, etc.\" (#7036) at aspnet/Mvc","RelatedBody":"Here is an example of problematic code:\r\n\r\n```csharp\r\npublic async Task<IActionResult> DoSomething(Contract contract)\r\n{\r\n    if (!ModelState.IsValid)\r\n        return BadRequest(ModelState);\r\n\r\n    var updatedContract = await _Service.SaveAsync(contract);\r\n    return Ok(updatedContract);\r\n}\r\n```\r\n\r\nBecause the return type is a generic value instead of a specific one there is no way for IDL generators such as Swagger or RAML to determine what the response format will be. \r\n\r\nFurthermore, this eliminates type checking of the return value. If updatedContract is the wrong type, the compiler won't catch the error.\r\n"},{"Id":"7475725799","Type":"IssuesEvent","CreatedAt":"2018-04-03T22:55:54","Actor":"mkArtakMSFT","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7471","RelatedDescription":"Closed issue \"Format Date issue with querystring return get, change format\" (#7471) at aspnet/Mvc","RelatedBody":"_From @shpsyte on February 2, 2018 16:6_\n\n# Date format issue for GET METHOD ON CONTROLLER\r\n\r\nI'm developing an application and I get this \"error\", I have a data model and I have datetime properties set.\r\n\r\nIn the first GET on the page, Date format is correct, eg: dd/mm/yyyy (as defined in the data model)\r\n\r\nBut after the Second GET  the date format is changed to mm/dd/yyyy (in back end) but in view is dd/mm/yyyy\r\n in post I receive mm/dd/yyy but in View I see dd/mm/yyyy \r\n\r\nIt's vary crazy\r\n\r\n# General\r\n\r\nI'm using .Net Core 2.0 + Bootstrap (No using any jquery, but i try too)...\r\n\r\nFor some issues, chek and details i put on GIT for reproduce this issue [REP ISSUE DATE](https://github.com/shpsyte/issueNetCoreDaet)\r\n\n\n_Copied from original issue: dotnet/core#1252_"},{"Id":"7475724174","Type":"IssuesEvent","CreatedAt":"2018-04-03T22:55:24","Actor":"mkArtakMSFT","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7460","RelatedDescription":"Closed issue \"MVC Core application hosted on IIS gives Cryptographic Exception\" (#7460) at aspnet/Mvc","RelatedBody":"Hi,\r\nWe are getting CryptographicException with inner exception UnauthorizedAccessException with an IIS hosted mvc core 1.1 web app. If we just serve the application with dotnet application.dll. It runs fine without the error.\r\nThe full stack trace is attached\r\n![image](https://user-images.githubusercontent.com/8023875/37187435-2f6409f0-2342-11e8-9ae6-270f9217b76b.png)\r\n\r\nThe Program.cs file\r\n![image](https://user-images.githubusercontent.com/8023875/37187556-b5812388-2342-11e8-9875-7e1b3a092707.png)\r\nStartup file\r\n![image](https://user-images.githubusercontent.com/8023875/37187611-eca71048-2342-11e8-8a54-70d764c2debf.png)\r\n![image](https://user-images.githubusercontent.com/8023875/37187650-188bc744-2343-11e8-8687-c718fc42179c.png)\r\n\r\nPlease help\r\n"},{"Id":"7475707927","Type":"IssuesEvent","CreatedAt":"2018-04-03T22:50:29","Actor":"mkArtakMSFT","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7540","RelatedDescription":"Closed issue \"Feature Request/Question: Ability to easily author/inject new directives for Razor?\" (#7540) at aspnet/Mvc","RelatedBody":"Currently, I cannot find an easy way to author/inject custom directives into Razor whilst using ASPNET Core Mvc(Kestrel). \r\n\r\nI can see that the `@Inject` directive gets registered within razor [here](https://github.com/aspnet/Razor/blob/2f79b90af5cbd9499f012c204f5bf4bb413ae61b/src/Microsoft.AspNetCore.Mvc.Razor.Extensions/RazorExtensions.cs#L20). Now if I wanted to inject a custom directive to MVC on startup how would I achieve that easily? Imagining for a second I wanted to create a '@FooInjector'. \r\n\r\nI can see you offer access to [RazorViewEngineOptions](https://github.com/aspnet/Mvc/blob/dfa085afaf4ddb0b1063eed35e070d6189acaca2/src/Microsoft.AspNetCore.Mvc.Razor/RazorViewEngineOptions.cs) is this potentially where you guys would expose something like this?"},{"Id":"7475706170","Type":"IssuesEvent","CreatedAt":"2018-04-03T22:50:00","Actor":"mkArtakMSFT","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7540","RelatedDescription":"Reopened issue \"Feature Request/Question: Ability to easily author/inject new directives for Razor?\" (#7540) at aspnet/Mvc","RelatedBody":"Currently, I cannot find an easy way to author/inject custom directives into Razor whilst using ASPNET Core Mvc(Kestrel). \r\n\r\nI can see that the `@Inject` directive gets registered within razor [here](https://github.com/aspnet/Razor/blob/2f79b90af5cbd9499f012c204f5bf4bb413ae61b/src/Microsoft.AspNetCore.Mvc.Razor.Extensions/RazorExtensions.cs#L20). Now if I wanted to inject a custom directive to MVC on startup how would I achieve that easily? Imagining for a second I wanted to create a '@FooInjector'. \r\n\r\nI can see you offer access to [RazorViewEngineOptions](https://github.com/aspnet/Mvc/blob/dfa085afaf4ddb0b1063eed35e070d6189acaca2/src/Microsoft.AspNetCore.Mvc.Razor/RazorViewEngineOptions.cs) is this potentially where you guys would expose something like this?"},{"Id":"7475705596","Type":"IssuesEvent","CreatedAt":"2018-04-03T22:49:49","Actor":"mkArtakMSFT","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7540","RelatedDescription":"Closed issue \"Feature Request/Question: Ability to easily author/inject new directives for Razor?\" (#7540) at aspnet/Mvc","RelatedBody":"Currently, I cannot find an easy way to author/inject custom directives into Razor whilst using ASPNET Core Mvc(Kestrel). \r\n\r\nI can see that the `@Inject` directive gets registered within razor [here](https://github.com/aspnet/Razor/blob/2f79b90af5cbd9499f012c204f5bf4bb413ae61b/src/Microsoft.AspNetCore.Mvc.Razor.Extensions/RazorExtensions.cs#L20). Now if I wanted to inject a custom directive to MVC on startup how would I achieve that easily? Imagining for a second I wanted to create a '@FooInjector'. \r\n\r\nI can see you offer access to [RazorViewEngineOptions](https://github.com/aspnet/Mvc/blob/dfa085afaf4ddb0b1063eed35e070d6189acaca2/src/Microsoft.AspNetCore.Mvc.Razor/RazorViewEngineOptions.cs) is this potentially where you guys would expose something like this?"},{"Id":"7475296511","Type":"PullRequestEvent","CreatedAt":"2018-04-03T21:09:09","Actor":"dougbu","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/pull/7520","RelatedDescription":"Closed pull request \"[NoMerge] React to StringValues\" (#7520) at aspnet/Mvc","RelatedBody":"https://github.com/aspnet/Common/pull/323 made a subtle change that causes `string[] myArray = new StringValues(new string[0])` to implicitly become null. \r\n\r\n/cc @Tratcher @rynowak "},{"Id":"7474678483","Type":"IssuesEvent","CreatedAt":"2018-04-03T19:06:53","Actor":"pranavkm","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7586","RelatedDescription":"Closed issue \"View precompilation during publish in 2.1-latest only works if using 2.0.0 reference\" (#7586) at aspnet/Mvc","RelatedBody":"As I understand it, if you reference the Microsoft.AspNetCore.Mvc.Razor.ViewCompilation package, then views are supposed to be pre-compiled during publish.\r\n\r\nThis only works for us if we reference version 2.0.0 of the package, as opposed to the 2.1 version matching the other packages (we're using \"2.1.0-*\" to reference the latest stable CI build)."},{"Id":"7474614048","Type":"IssuesEvent","CreatedAt":"2018-04-03T18:54:30","Actor":"dougbu","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7529","RelatedDescription":"Closed issue \"RedirectToAction with Non-English Characters in Parameters and Authentication Causes Error\" (#7529) at aspnet/Mvc","RelatedBody":"By default Asp.Net Core encodes non-english characters in view.\r\nLet's create a very simple controller:\r\n```csharp\r\npublic class HomeController : Controller\r\n{\r\n\tpublic IActionResult Index(Parameters param)\r\n\t{\r\n\t\treturn View(param);\r\n\t}\r\n\r\n\tpublic IActionResult ToIndex(Parameters param)\r\n\t{\r\n\t\treturn RedirectToAction(\"Index\", param);\r\n\t}\r\n\r\n\tpublic class Parameters\r\n\t{\r\n\t\tpublic String Name { get; set; }\r\n\t}\r\n}\r\n```\r\nand a very simple View, which greets a user:\r\n```html\r\n@model TestNonEngLetters.Controllers.HomeController.Parameters\r\n<!DOCTYPE html>\r\n<html>\r\n    <head>\r\n        <meta charset=\"utf-8\" />\r\n        <title>Test</title>\r\n    </head>\r\n    <body>\r\n        Hello, @Model.Name!\r\n    </body>\r\n</html>\r\n```\r\nIf `Name` contains non-english characters (e.g. Jörn) it gets encoded:\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n    <head>\r\n        <meta charset=\"utf-8\" />\r\n        <title>Test</title>\r\n    </head>\r\n    <body>\r\n        Hello, J&#xF6;rn!\r\n    </body>\r\n</html>\r\n```\r\nIf we don't want this kind of encoding there is a way to turn it off. We need to add this line of code to `Startup.cs`:\r\n```csharp\r\nservices.Configure<WebEncoderOptions>(options => options.TextEncoderSettings = new TextEncoderSettings(UnicodeRanges.All));\r\n```\r\nNow our html becomes pretty good:\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n    <head>\r\n        <meta charset=\"utf-8\" />\r\n        <title>Test</title>\r\n    </head>\r\n    <body>\r\n        Hello, Jörn!\r\n    </body>\r\n</html>\r\n```\r\nOur `Startup.cs` looks like this:\r\n```csharp\r\npublic class Startup\r\n{\r\n\tpublic void ConfigureServices(IServiceCollection services)\r\n\t{\r\n\t\t//services.AddAuthentication(CookieAuthenticationDefaults.AuthenticationScheme);\r\n\r\n\t\tservices.AddMvc();\r\n\t\tservices.Configure<WebEncoderOptions>(options => options.TextEncoderSettings = new TextEncoderSettings(UnicodeRanges.All));\r\n\t}\r\n\r\n\tpublic void Configure(IApplicationBuilder app, IHostingEnvironment env)\r\n\t{\r\n\t\tif (env.IsDevelopment())\r\n\t\t{\r\n\t\t\tapp.UseDeveloperExceptionPage();\r\n\t\t}\r\n\r\n\t\tapp.UseMvc(routes =>\r\n\t\t{\r\n\t\t\troutes.MapRoute(\r\n\t\t\t\tname: \"default\",\r\n\t\t\t\ttemplate: \"{controller=Home}/{action=Index}/{id?}\");\r\n\t\t});\r\n\t}\r\n}\r\n```\r\nLet's invoke our `ToIndex` action, that must redirect us back to `Index`:\r\n```csharp\r\npublic IActionResult ToIndex(Parameters param)\r\n{\r\n\treturn RedirectToAction(\"Index\", param);\r\n}\r\n```\r\nSo we invoke page `http://localhost:2616/Home/ToIndex?Name=Jörn` and receive expected 302 response with `location=/?Name=J%C3%B6rn` http header. \r\nEverything works just fine... until we add authentication to our project. See the commented line in `Startup.cs`?\r\n```csharp\r\n//services.AddAuthentication(CookieAuthenticationDefaults.AuthenticationScheme);\r\n```\r\nLet's uncomment it and invoke our `ToIndex` action again. \r\nAnd what we get? \r\n```\r\nInvalidOperationException: Invalid non-ASCII or control character in header: 0x00F6\r\n\r\n    Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.FrameHeaders.ThrowInvalidHeaderCharacter(char ch)\r\n    Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.FrameHeaders.ValidateHeaderCharacters(string headerCharacters)\r\n    Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.FrameHeaders.ValidateHeaderCharacters(StringValues headerValues)\r\n    Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.FrameResponseHeaders.SetValueFast(string key, StringValues value)\r\n    Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.FrameHeaders.Microsoft.AspNetCore.Http.IHeaderDictionary.set_Item(string key, StringValues value)\r\n    Microsoft.AspNetCore.Http.Internal.DefaultHttpResponse.Redirect(string location, bool permanent)\r\n    Microsoft.AspNetCore.Mvc.Internal.RedirectToActionResultExecutor.Execute(ActionContext context, RedirectToActionResult result)\r\n    Microsoft.AspNetCore.Mvc.RedirectToActionResult.ExecuteResult(ActionContext context)\r\n    Microsoft.AspNetCore.Mvc.ActionResult.ExecuteResultAsync(ActionContext context)\r\n    Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeResultAsync>d__19.MoveNext()\r\n    System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n    System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n    Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeNextResultFilterAsync>d__24.MoveNext()\r\n    System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n    Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResultExecutedContext context)\r\n    Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(ref State next, ref Scope scope, ref object state, ref bool isCompleted)\r\n    Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeNextResourceFilter>d__22.MoveNext()\r\n    System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n    Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResourceExecutedContext context)\r\n    Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(ref State next, ref Scope scope, ref object state, ref bool isCompleted)\r\n    Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeFilterPipelineAsync>d__17.MoveNext()\r\n    System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n    System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n    Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker+<InvokeAsync>d__15.MoveNext()\r\n    System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n    System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n    Microsoft.AspNetCore.Builder.RouterMiddleware+<Invoke>d__4.MoveNext()\r\n    System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n    System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n    Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware+<Invoke>d__7.MoveNext()\r\n```\r\nit looks like now, when authentication module is in place, asp.net core is not able to set `location` header correctly. \r\nSo, maybe we have chosen the wrong way to deal with encoding of non-english characters or is it a bug in framework itself?"}],"ResultType":"GitHubEvent"},"Identity":{"Events":[{"Id":"7476557947","Type":"IssuesEvent","CreatedAt":"2018-04-04T03:52:17","Actor":"HaoK","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/issues/1732","RelatedDescription":"Closed issue \"Make UserManager<TUser> implement IUserManager<TUser>\" (#1732) at aspnet/Identity","RelatedBody":"We have to go through an insane amount of mocking (see #344) and creating fake testing classes to get around the fact that UserManager<TUser> does not implement a service interface like just about everything else does when we want to test our code that consumes UserManager<TUser>'s services.  This is silly.  We are not testing UserManager<TUser>, we should not have to mock its dependencies, or include its functionality in our own tests.\r\n\r\nRight now, to support multiple services that use UserManager<TUser> we have to make something like this:\r\n\r\n```\r\n\tpublic class FakeUserManagerDependencies<T> where T : class\r\n\t{\r\n\t\tpublic readonly Mock<IdentityErrorDescriber> MockedIdentityErrorDescriber = new Mock<IdentityErrorDescriber>();\r\n\t\tpublic readonly Mock<IOptions<IdentityOptions>> MockedIdentityOptions = new Mock<IOptions<IdentityOptions>>();\r\n\t\tpublic readonly Mock<ILogger<UserManager<T>>> MockedLogger = new Mock<ILogger<UserManager<T>>>();\r\n\t\tpublic readonly Mock<ILookupNormalizer> MockedLookupNormalizer = new Mock<ILookupNormalizer>();\r\n\t\tpublic readonly Mock<IPasswordHasher<T>> MockedPasswordHasher = new Mock<IPasswordHasher<T>>();\r\n\r\n\t\tpublic readonly Mock<IEnumerable<IPasswordValidator<T>>>\r\n\t\t\tMockedPasswordValidators = new Mock<IEnumerable<IPasswordValidator<T>>>();\r\n\r\n\t\tpublic readonly Mock<IServiceProvider> MockedServiceProvider = new Mock<IServiceProvider>();\r\n\t\tpublic readonly Mock<IUserStore<T>> MockedUserStore = new Mock<IUserStore<T>>();\r\n\r\n\t\tpublic readonly Mock<IEnumerable<IUserValidator<T>>>\r\n\t\t\tMockedUserValidators = new Mock<IEnumerable<IUserValidator<T>>>();\r\n\t}\r\n\r\n\tpublic class FakeUserManager<T> : UserManager<T> where T : class\r\n\t{\r\n\t\tpublic FakeUserManagerDependencies<T> MockedDependencies { get; }\r\n\r\n\t\tpublic FakeUserManager() : this(new FakeUserManagerDependencies<T>())\r\n\t\t{\r\n\t\t}\r\n\r\n\t\tpublic FakeUserManager(FakeUserManagerDependencies<T> deps)\r\n\t\t\t: base(deps.MockedUserStore.Object,\r\n\t\t\t\tdeps.MockedIdentityOptions.Object,\r\n\t\t\t\tdeps.MockedPasswordHasher.Object,\r\n\t\t\t\tdeps.MockedUserValidators.Object,\r\n\t\t\t\tdeps.MockedPasswordValidators.Object,\r\n\t\t\t\tdeps.MockedLookupNormalizer.Object,\r\n\t\t\t\tdeps.MockedIdentityErrorDescriber.Object,\r\n\t\t\t\tdeps.MockedServiceProvider.Object,\r\n\t\t\t\tdeps.MockedLogger.Object\r\n\t\t\t)\r\n\t\t{\r\n\t\t\tMockedDependencies = deps;\r\n\t\t}\r\n\t}\r\n```\r\n\r\nNow let's say we want to test a method that will retrieve a user and perform some work with that user object.  In our test, we now have to build out the `IUserStore<TUser>`, figure out what `UserManager<TUser>` does \"under the hood\" to return the expected response, and mock out the requests.  Instead, all we should be doing is mocking the `IUserManager<TUser>.FindByNameAsync(string userName)` to return a specific user object.\r\n\r\nThe current way does not allow the tester to properly isolate the actual code under test; we _must_ test the `UserManager<TUser>`'s functionality along with our own.  If the test were to fail, we cannot say for certain that the problem is in our code; for all we know it could be in the inner workings of the `UserManager<TUser>` class.\r\n\r\nThe way this is set up violates many tenets and good practices of code design and unit testing, which are tenets and good practices for a reason.  The level of effort does not seem like it would be especially high either; mostly a 1:1 replacement in code where it's used as a dependency, than a little rewiring in the dependency configuration.\r\n\r\n"},{"Id":"7473962090","Type":"PullRequestEvent","CreatedAt":"2018-04-03T16:51:05","Actor":"pranavkm","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/pull/1734","RelatedDescription":"Opened pull request \"React to future Razor Sdk package breaking changes\" (#1734) at aspnet/Identity","RelatedBody":""},{"Id":"7473124420","Type":"PullRequestEvent","CreatedAt":"2018-04-03T14:34:00","Actor":"jholovacs","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/pull/1733","RelatedDescription":"Opened pull request \"#1732 Making UserManager<TUser> Implement IUserManager<TUser>, initia…\" (#1733) at aspnet/Identity","RelatedBody":"…l code changes.  I can't get the tests to run on my machine, so I'm trying to see what happens in the pull request..."},{"Id":"7468722524","Type":"IssuesEvent","CreatedAt":"2018-04-02T20:01:46","Actor":"jholovacs","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1732","RelatedDescription":"Opened issue \"Make UserManager<TUser> implement IUserManager<TUser>\" (#1732) at aspnet/Identity","RelatedBody":"We have to go through an insane amount of mocking (see #344) and creating fake testing classes to get around the fact that UserManager<TUser> does not implement a service interface like just about everything else does when we want to test our code that consumes UserManager<TUser>'s services.  This is silly.  We are not testing UserManager<TUser>, we should not have to mock its dependencies, or include its functionality in our own tests."},{"Id":"7468546859","Type":"IssuesEvent","CreatedAt":"2018-04-02T19:23:05","Actor":"kichalla","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/issues/1730","RelatedDescription":"Closed issue \"Update IdentityUI's _ValidationScripts.cshtml to have the correct CDN urls for the scripts\" (#1730) at aspnet/Identity","RelatedBody":"Found this during verification, we updated the scirpts under the lib folder to following versions:\r\njquery.validate.unobtrusive: from 3.2.6 to 3.2.9\r\njquery.validate: from 1.14.0 to 1.17.0\r\n\r\nWe should update the CDN urls in the following partial to match this.\r\nhttps://github.com/aspnet/Identity/blob/release/2.1/src/UI/Areas/Identity/Pages/_ValidationScriptsPartial.cshtml\r\n\r\ncc @mkArtakMSFT "},{"Id":"7468539077","Type":"PullRequestEvent","CreatedAt":"2018-04-02T19:21:23","Actor":"kichalla","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Identity/pull/1731","RelatedDescription":"Merged pull request \"Fix CDN urls to match the fallback source folders' versions\" (#1731) at aspnet/Identity","RelatedBody":"[Fixes #1730] Update IdentityUI's _ValidationScripts.cshtml to have the correct CDN urls for the scripts"},{"Id":"7468506551","Type":"PullRequestEvent","CreatedAt":"2018-04-02T19:14:05","Actor":"kichalla","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/pull/1731","RelatedDescription":"Opened pull request \"Fix CDN urls to match the fallback source folders' versions\" (#1731) at aspnet/Identity","RelatedBody":"[Fixes #1730] Update IdentityUI's _ValidationScripts.cshtml to have the correct CDN urls for the scripts"},{"Id":"7468106674","Type":"IssuesEvent","CreatedAt":"2018-04-02T17:47:44","Actor":"kichalla","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1730","RelatedDescription":"Opened issue \"Update IdentityUI's _ValidationScripts.cshtml to have the correct CDN urls for the scripts\" (#1730) at aspnet/Identity","RelatedBody":"Found this during verification, we updated the scirpts under the lib folder to following versions:\r\njquery.validate.unobtrusive: from 3.2.6 to 3.2.9\r\njquery.validate: from 1.14.0 to 1.17.0\r\n\r\nWe should update the CDN urls in the following partial to match this.\r\nhttps://github.com/aspnet/Identity/blob/release/2.1/src/UI/Areas/Identity/Pages/_ValidationScriptsPartial.cshtml\r\n\r\ncc @mkArtakMSFT "}],"ResultType":"GitHubEvent"},"Kestrel":{"Events":[{"Id":"7475805283","Type":"PullRequestEvent","CreatedAt":"2018-04-03T23:19:52","Actor":"Tratcher","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2432","RelatedDescription":null,"RelatedBody":"Do-Not-Merge. Running a few test builds on Travis to get more failure information."},{"Id":"7475805211","Type":"PullRequestEvent","CreatedAt":"2018-04-03T23:19:50","Actor":"Tratcher","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2432","RelatedDescription":"Closed pull request \"[WIP] Re-enable ConnectionCountingReturnsToZero #2282\" (#2432) at aspnet/KestrelHttpServer","RelatedBody":"Do-Not-Merge. Running a few test builds on Travis to get more failure information."},{"Id":"7475723795","Type":"PullRequestEvent","CreatedAt":"2018-04-03T22:55:18","Actor":"halter73","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2461","RelatedDescription":"Merged pull request \"Corrects spelling of some comments\" (#2461) at aspnet/KestrelHttpServer","RelatedBody":"Corrects spelling of some comments"},{"Id":"7475662527","Type":"IssuesEvent","CreatedAt":"2018-04-03T22:37:16","Actor":"muratg","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2128","RelatedDescription":"Reopened issue \"Specified argument was out of the range of valid values. Parameter name: count\" (#2128) at aspnet/KestrelHttpServer","RelatedBody":"I write a site with asp.net core 2.0, sometimes following error raise(rarely).\r\n\r\n> An unhandled exception has occurred: Specified argument was out of the range of valid values. Parameter name: count\r\n\r\nStackTrace:\r\n\r\n> System.ArgumentOutOfRangeException: Specified argument was out of the range of valid values. Parameter name: count at Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.PipeCompletion.ThrowFailed() at Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.Pipe.GetResult(ReadResult& result) at Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.Pipe.Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.IReadableBufferAwaiter.GetResult() at Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.ReadableBufferAwaitable.GetResult() at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.MessageBody.d__24.MoveNext() --- End of stack trace from previous location where exception was thrown --- at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.Frame1.<ProcessRequestsAsync>d__2.MoveNext()\r\n>   --- End of stack trace from previous location where exception was thrown --- at\r\n>   System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() at\r\n>   Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.Frame1.d__2.MoveNext()\r\n\r\nI`m not sure, but this error probably after I migrate to asp.net core 2.0."},{"Id":"7475662425","Type":"IssuesEvent","CreatedAt":"2018-04-03T22:37:15","Actor":"muratg","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2128","RelatedDescription":"Closed issue \"Specified argument was out of the range of valid values. Parameter name: count\" (#2128) at aspnet/KestrelHttpServer","RelatedBody":"I write a site with asp.net core 2.0, sometimes following error raise(rarely).\r\n\r\n> An unhandled exception has occurred: Specified argument was out of the range of valid values. Parameter name: count\r\n\r\nStackTrace:\r\n\r\n> System.ArgumentOutOfRangeException: Specified argument was out of the range of valid values. Parameter name: count at Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.PipeCompletion.ThrowFailed() at Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.Pipe.GetResult(ReadResult& result) at Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.Pipe.Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.IReadableBufferAwaiter.GetResult() at Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.ReadableBufferAwaitable.GetResult() at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.MessageBody.d__24.MoveNext() --- End of stack trace from previous location where exception was thrown --- at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.Frame1.<ProcessRequestsAsync>d__2.MoveNext()\r\n>   --- End of stack trace from previous location where exception was thrown --- at\r\n>   System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() at\r\n>   Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.Frame1.d__2.MoveNext()\r\n\r\nI`m not sure, but this error probably after I migrate to asp.net core 2.0."},{"Id":"7475618760","Type":"PullRequestEvent","CreatedAt":"2018-04-03T22:25:09","Actor":"muratg","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2345","RelatedDescription":"Closed pull request \"[WIP] Add request body PipeReader decorator\" (#2345) at aspnet/KestrelHttpServer","RelatedBody":"#2340\r\n\r\nI'll get some benchmark results as soon as I have a chance."}],"ResultType":"GitHubEvent"},"Razor":{"Events":[{"Id":"7475801406","Type":"IssuesEvent","CreatedAt":"2018-04-03T23:18:36","Actor":"rynowak","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/issues/2235","RelatedDescription":"Opened issue \"Add line endings on to RazorCodeGenerationOptions\" (#2235) at aspnet/Razor","RelatedBody":"We have special hooks that we use for testing to mess with line endings for Razor. There's no good reason why we shouldn't just make the line endings configurable."},{"Id":"7475779676","Type":"IssuesEvent","CreatedAt":"2018-04-03T23:11:44","Actor":"NTaylorMullen","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Razor/issues/2233","RelatedDescription":"Closed issue \"Clicking a line-mapped error in VS doesn't open a razor file\" (#2233) at aspnet/Razor","RelatedBody":"After fixing https://github.com/aspnet/Blazor/issues/453\r\n\r\nI noticed that clicking on an error in the error list doesn't open the file in VS, it just does nothing.\r\n\r\nThe output window works correctly for this. \r\n\r\n--- \r\n\r\nIt's also possible that this might be an artifact of the name-mangling that Blazor does in the editor to prevent conflicts between design-time code and the editor.\r\n\r\nWe should try this out on vanilla 2.1 Razor and see if this problem is limited to Blazor, I recall this working correctly for MVC in VS before.\r\n\r\nIt's important in this case that the error must come from the build, not from the editor."},{"Id":"7475707620","Type":"IssuesEvent","CreatedAt":"2018-04-03T22:50:24","Actor":"mkArtakMSFT","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/issues/2234","RelatedDescription":"Opened issue \"Feature Request/Question: Ability to easily author/inject new directives for Razor?\" (#2234) at aspnet/Razor","RelatedBody":"_From @fir3pho3nixx on March 24, 2018 18:58_\n\nCurrently, I cannot find an easy way to author/inject custom directives into Razor whilst using ASPNET Core Mvc(Kestrel). \r\n\r\nI can see that the `@Inject` directive gets registered within razor [here](https://github.com/aspnet/Razor/blob/2f79b90af5cbd9499f012c204f5bf4bb413ae61b/src/Microsoft.AspNetCore.Mvc.Razor.Extensions/RazorExtensions.cs#L20). Now if I wanted to inject a custom directive to MVC on startup how would I achieve that easily? Imagining for a second I wanted to create a '@FooInjector'. \r\n\r\nI can see you offer access to [RazorViewEngineOptions](https://github.com/aspnet/Mvc/blob/dfa085afaf4ddb0b1063eed35e070d6189acaca2/src/Microsoft.AspNetCore.Mvc.Razor/RazorViewEngineOptions.cs) is this potentially where you guys would expose something like this?\n\n_Copied from original issue: aspnet/Mvc#7540_"},{"Id":"7475596978","Type":"IssuesEvent","CreatedAt":"2018-04-03T22:19:11","Actor":"rynowak","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/issues/2233","RelatedDescription":"Opened issue \"Clicking a line-mapped error in VS doesn't open a razor file\" (#2233) at aspnet/Razor","RelatedBody":"After fixing https://github.com/aspnet/Blazor/issues/453\r\n\r\nI noticed that clicking on an error in the error list doesn't open the file in VS, it just does nothing.\r\n\r\nThe output window works correctly for this. \r\n\r\n--- \r\n\r\nIt's also possible that this might be an artifact of the name-mangling that Blazor does in the editor to prevent conflicts between design-time code and the editor.\r\n\r\nWe should try this out on vanilla 2.1 Razor and see if this problem is limited to Blazor, I recall this working correctly for MVC in VS before."}],"ResultType":"GitHubEvent"},"Templates":{"Events":[],"ResultType":"GitHubEvent"},"Tooling":{"Events":[{"Id":"7439234583","Type":"IssuesEvent","CreatedAt":"2018-03-27T05:23:09","Actor":"barrytang","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1069","RelatedDescription":"Closed issue \"EntityFramework migrations not available to be applied during publish\" (#1069) at aspnet/Tooling","RelatedBody":"Workaround does not work for me. Apply migration missing in any case. after rebuilt, reload, restart etc"},{"Id":"7438189808","Type":"IssuesEvent","CreatedAt":"2018-03-26T23:00:08","Actor":"dvdobrovolskiy","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1069","RelatedDescription":"Opened issue \"EntityFramework migrations not available to be applied during publish\" (#1069) at aspnet/Tooling","RelatedBody":"Workaround does not work for me. Apply migration missing in any case. after rebuilt, reload, restart etc"},{"Id":"7416019717","Type":"IssuesEvent","CreatedAt":"2018-03-21T22:57:29","Actor":"snebjorn","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/823","RelatedDescription":"Closed issue \"Make tooling support splitting asp.net and bootstrapping in different projects (onion architecture)\" (#823) at aspnet/Tooling","RelatedBody":"I'd like to see better tooling support for a more onion architecture like solution structure.\n\nFor instance\n- Solution\n  - Core (business logic, domain model, etc)\n  - Infrastructure.EntityFramework (DAL)\n  - Presentation.ASPNET (MVC or WebApi)\n  - Bootstrapper (Program.cs and Startup.cs)\n\nSo basically I just moved Program.cs and Startup.cs to another project. This is important because according to the onion architecture Presentation.ASPNET should not have references to Entity Framework.\n\nIf I do this today I loose the \"IIS Express\" run button and I cannot publish via wed deploy in the way I'm used to. Plus a ton of other issues.\n\nWould be sweet if there was better support for this setup :)\n"},{"Id":"7381313128","Type":"IssuesEvent","CreatedAt":"2018-03-14T22:19:23","Actor":"AngelosP","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/240","RelatedDescription":"Closed issue \"Support debugging of JS executed with EdgeJS in VS\" (#240) at aspnet/Tooling","RelatedBody":"We would like to do the server side HTML rendering with ReactJS in our ASP.NET application. This works with EdgeJS, but there is currently no way to debug the JS code in VS. \n\nIt would be nice if this would work and we wouldn't need node-inspector for this.\n\nhttps://github.com/tjanczuk/edge/issues/316\n"},{"Id":"7376247861","Type":"IssuesEvent","CreatedAt":"2018-03-14T05:33:19","Actor":"barrytang","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1068","RelatedDescription":"Closed issue \"Switch between Razor Page View and Code Behind\" (#1068) at aspnet/Tooling","RelatedBody":"In the old web forms you were able to quickly switch between the ASPX file and the code behind using F7/Shift F7 or going View->Code or View->Designer. It would be useful if this was possible with Razor Pages in aspnet core projects?\r\n"},{"Id":"7372052889","Type":"IssuesEvent","CreatedAt":"2018-03-13T13:46:08","Actor":"TheConservativeCoder","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1068","RelatedDescription":"Opened issue \"Switch between Razor Page View and Code Behind\" (#1068) at aspnet/Tooling","RelatedBody":"In the old web forms you were able to quickly switch between the ASPX file and the code behind using F7/Shift F7 or going View->Code or View->Designer. It would be useful if this was possible with Razor Pages in aspnet core projects?\r\n"},{"Id":"7369868082","Type":"IssuesEvent","CreatedAt":"2018-03-13T05:33:42","Actor":"barrytang","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1067","RelatedDescription":"Closed issue \"Support dotnet watch in launchSettings.json\" (#1067) at aspnet/Tooling","RelatedBody":"I used to be able to use `dotnet watch` in Visual Studio by adding the following section to `launchSettings.json` and starting the project without debugging using CTRL + F5.\r\n\r\n```\r\n    \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    },\r\n```\r\n\r\nThis used to work in ASP.NET Core 1.1 but no longer does. According to https://github.com/aspnet/DotNetTools/issues/404 the new format for ASP.NET Core 2.0 is:\r\n\r\n```\r\n   \"Kestrel (dotnet watch run)\": {\r\n      \"commandName\": \"Executable\",\r\n      \"executablePath\": \"C:\\\\Program Files\\\\dotnet\\\\dotnet.exe\",\r\n      \"commandLineArgs\": \"watch run\",\r\n      \"workingDirectory\": \"C:\\\\Users\\\\namc\\\\source\\\\repos\\\\WebApplication2\\\\WebApplication2\",\r\n      \"launchBrowser\": true,\r\n      \"launchUrl\": \"https://localhost:5001/\",\r\n      \"environmentVariables\": {\r\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\r\n      }\r\n    }\r\n```\r\n\r\nThe problem with this is the hard coded `executablePath` which is Windows specific and the `workingDirectory` which is specific to wherever I did a Git clone on my local machine."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7390961156","Type":"IssuesEvent","CreatedAt":"2018-03-16T14:09:54","Actor":"natemcmaster","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Announcements/issues/297","RelatedDescription":"Closed issue \"Model binding accesses read-only properties in post-back\" (#297) at aspnet/Announcements","RelatedBody":"I have a simple edit model, which contains a few computed/read-only properties. When posting to a controller method, the model validation engine accesses these properties, causing an exception.\r\n\r\nHowever, it does not make sense to access or attempt to validate a read-only property.\r\n\r\nAdditionally, all properties are marked with [BindNever], which seems to have no effect on this behavior.\r\n\r\nThe controller method takes a single parameter (the edit model) decorated with [FromForm].\r\n\r\nUsing 2.1.0-preview2-30355."},{"Id":"7390872316","Type":"IssuesEvent","CreatedAt":"2018-03-16T13:54:05","Actor":"mnmr","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Announcements/issues/297","RelatedDescription":"Opened issue \"Model binding accesses read-only properties in post-back\" (#297) at aspnet/Announcements","RelatedBody":"I have a simple edit model, which contains a few computed/read-only properties. When posting to a controller method, the model validation engine accesses these properties, causing an exception.\r\n\r\nHowever, it does not make sense to access or attempt to validate a read-only property.\r\n\r\nAdditionally, all properties are marked with [BindNever], which seems to have no effect on this behavior.\r\n\r\nThe controller method takes a single parameter (the edit model) decorated with [FromForm].\r\n\r\nUsing 2.1.0-preview2-30355."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"981214732198674433","CreatedAt":"2018-04-03T16:59:56+00:00","UserScreenname":"aspnet","Text":"Starting now!\n\n#ASPNET Community Standup\n\nBlazor Update with @danroth27 and @stevensanderson… https://t.co/Tukk2JSsvC","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":32,"FavoriteCount":14,"RawContent":null},{"Id":"981205689891803136","CreatedAt":"2018-04-03T16:24:01+00:00","UserScreenname":"aspnet","Text":"Join our @csharpfritz for some #ASP.NET Core coding today, and ask questions during his live coding stream at 12:30… https://t.co/PCKhYbjIMP","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":18,"FavoriteCount":8,"RawContent":null},{"Id":"980945681794809856","CreatedAt":"2018-04-02T23:10:50+00:00","UserScreenname":"aspnet","Text":"Tuesday at 10 Pacific / 18 GMT - #ASPNET Community Standup\n\nBlazor Update with @danroth27 and @stevensanderson… https://t.co/lCnzHFb8x9","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":94,"FavoriteCount":52,"RawContent":null},{"Id":"979863409561812993","CreatedAt":"2018-03-30T23:30:16+00:00","UserScreenname":"aspnet","Text":"We just released some minor bug fixes to jquery-ajax-unobtrusive and jquery-validation-unobtrusive:… https://t.co/9P5vskn1i8","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":26,"FavoriteCount":13,"RawContent":null},{"Id":"978766397814710272","CreatedAt":"2018-03-27T22:51:08+00:00","UserScreenname":"aspnet","Text":"We're live on the #ASPNET Community Standup! Join us! https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":12,"FavoriteCount":7,"RawContent":null},{"Id":"978605317293576193","CreatedAt":"2018-03-27T12:11:03+00:00","UserScreenname":"aspnet","Text":"This will be a fun show that you won't want to miss if you're starting to lean #ASP.NET Core.  Jeff and Shayne are… https://t.co/MdzhQjXGY3","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":47,"FavoriteCount":12,"RawContent":null},{"Id":"978387927041323008","CreatedAt":"2018-03-26T21:47:14+00:00","UserScreenname":"aspnet","Text":"Join us for the weekly #ASPNET Community Standup this Tuesday at 3:45 PM Pacific / 23:45 GMT at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":9,"FavoriteCount":10,"RawContent":null},{"Id":"976910278083432449","CreatedAt":"2018-03-22T19:55:35+00:00","UserScreenname":"aspnet","Text":"Get started building .NET web apps in the browser with Blazor https://t.co/NLDaIe6hpY","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":160,"FavoriteCount":100,"RawContent":null},{"Id":"976141395114082304","CreatedAt":"2018-03-20T17:00:19+00:00","UserScreenname":"aspnet","Text":"Starting now!\n\nThe #ASPNET Community Standup with @sshirhatti showing #aspnetcore 2.1 Improvements for IIS Hosting.\n\nhttps://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":21,"FavoriteCount":10,"RawContent":null},{"Id":"975923268740833280","CreatedAt":"2018-03-20T02:33:33+00:00","UserScreenname":"aspnet","Text":"This week's #ASPNET Community Standup is on Tuesday at 10 AM  Pacific / 1800 GMT. @sshirhatti will be showing… https://t.co/qlOERhEOaw","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":19,"FavoriteCount":14,"RawContent":null},{"Id":"974312682647162880","CreatedAt":"2018-03-15T15:53:40+00:00","UserScreenname":"aspnet","Text":"Watch @csharpfritz and @shanselman in this recorded video from today's LiveStream about converting an application t… https://t.co/6QP4SCXJ3S","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":20,"FavoriteCount":4,"RawContent":null},{"Id":"974274384792866817","CreatedAt":"2018-03-15T13:21:29+00:00","UserScreenname":"aspnet","Text":"Tune in to @csharpfritz and @shanselman talking through an #ASP.NET upgrade at 10am ET / 7am PT / 14:00 UTC! https://t.co/vJe8zHT12j","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":3,"FavoriteCount":3,"RawContent":null},{"Id":"973691520728510464","CreatedAt":"2018-03-13T22:45:23+00:00","UserScreenname":"aspnet","Text":"Starting now... join us for the weekly #ASPNET Community Standup at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":10,"FavoriteCount":12,"RawContent":null},{"Id":"973553523186159621","CreatedAt":"2018-03-13T13:37:02+00:00","UserScreenname":"aspnet","Text":"Today, Jeff shows you how to use dependency injection with web forms... check it out! https://t.co/viqZ28DBrV","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":23,"FavoriteCount":9,"RawContent":null},{"Id":"973350716046626816","CreatedAt":"2018-03-13T00:11:09+00:00","UserScreenname":"aspnet","Text":"Join us for the weekly #ASPNET Community Standup this Tuesday at 3:45 PM Pacific / 23:45 GMT at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":5,"FavoriteCount":3,"RawContent":null},{"Id":"972484011556818945","CreatedAt":"2018-03-10T14:47:10+00:00","UserScreenname":"aspnet","Text":"Be sure to check out Jeff's live coding stream this morning to see more about our #ASP.NET Core 2.1 preview release. https://t.co/EtKk0fMOgU","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":23,"FavoriteCount":10,"RawContent":null},{"Id":"971084152693866496","CreatedAt":"2018-03-06T18:04:38+00:00","UserScreenname":"aspnet","Text":"We are live at https://t.co/4Ioo9jNSN2 ! Join us!","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":3,"RawContent":null},{"Id":"971075755168841728","CreatedAt":"2018-03-06T17:31:16+00:00","UserScreenname":"aspnet","Text":"This week's #ASPNET Community Standup starts at 10 AM  Pacific / 1800 GMT. Ryan Nowak will be showing Web API 2.1 f… https://t.co/OW0zeYZPyq","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":22,"FavoriteCount":10,"RawContent":null}]}},"RunOn":"2018-04-04T05:30:10.7192959Z","RunDurationInMilliseconds":9484}