{"Data":{"Vue":{"Events":[{"Id":"7042955488","Type":"IssuesEvent","CreatedAt":"2017-12-30T20:42:46","Actor":"richardtallent","Repository":"vuejs/vue","Organization":"vuejs","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/vuejs/vue/issues/7346","RelatedDescription":"Opened issue \"FR: Reactive CSS variables\" (#7346) at vuejs/vue","RelatedBody":"### What problem does this feature solve?\r\nOften, it's desirable for a component to expose properties the caller can use to customize the style. But if these take arbitrary values rather than just, say, class names, the child component then must use `style` attributes to apply the values. Unfortunately, this litters the `<template>` markup with style information. Also, the `style` attribute cannot be used to assign CSS properties to pseudo-elements like `:hover` and `:before`, which significantly limits the properties a component can expose to the caller for custom styling.\r\n\r\nThe only workaround is for the parent's CSS to override the child's CSS, but that requires the parent's CSS to be coupled to the child's implementing markup. The same value (or variants based on it, such as lighter or darker shades of a color) may be used in a number of selectors, complicating this effort, and if the component uses scoped CSS or highly-specific selectors, it may be even more difficult to override.\r\n\r\nCSS variables are now fully supported by every common browser other than IE11. So, I'm proposing that Vue support mustache syntax in the `<style>` block of SFCs where CSS variables are declared, and that Vue set and react to changes to these values by using the DOM's `style.setProperty` method.\r\n\r\nThis will allow component authors to provide props for more styling decisions, in a way that is still as reactive as using the `style` attribute, but with more capabilities (for pseudo-elements) and a tidier template. Internally, components can also use this to make styling decisions, including for pseudo-elements, based on computed values, all fully reactive. \r\n\r\nHere's an example of a component that does support CSS variables as properties, but has to wire it up manually with a watcher:\r\n\r\nhttps://github.com/richardtallent/vue-stars/blob/master/src/VueStars.vue\r\n\r\nIt may be possible to support IE <= 11 by replacing variables in the style with values and replacing the generated style tag as needed.\r\n\r\n### What does the proposed API look like?\r\nThe API would simply be that the <style> block accepts mustache syntax in the declaration of CSS variables, and that behind the scenes, it reacts to changes by using the `style.setProperty()` method to update the CSS variable's value.\r\n\r\nFrom the component author's perspective:\r\n```HTML\r\n<template>\r\n  <h1>{{ title }}</h1>\r\n</template>\r\n<script>\r\nexport default {\r\n  name: \"ColorHeader\",\r\n  props: {\r\n    bg: { type: String, default: \"inherit\", required: false },\r\n    bgHover: { type: String, default: \"inherit\", required: false },\r\n    title: { type: String, default: \"(Untitled)\", required: false },\r\n  }\r\n}\r\n</script>\r\n<style>\r\n:root {\r\n   --bg-color: {{ bg }};\r\n   --bg-hover-color: {{ bgHover }};\r\n}\r\n  h1 { background-color: var(--bg-color); }\r\n  h1:hover { background-color: var(--bg-hover-color); }  \r\n</style>\r\n```\r\n\r\nOne down side I see is that this would require Vue's compiler to parse the CSS so it recognizes the variable name before the mustache, which could be a problem when using CSS that needs a pre-processor. So here's an alternative implementation:\r\n\r\n- Vue supports mustache syntax *anywhere* within the style block, but it is understood that it should *only* be used for CSS values, not the names of properties or selectors.\r\n- Vue makes no attempt to parse the CSS other than to find the mustaches.\r\n- For each discrete mustache expression, Vue replaces the mustache syntax with a CSS variable declaration at the top (auto-named) and `var(--auto-named-variable)` where the mustache syntax appeared.\r\n- Vue then just needs to update the value for the names it created reactively.\r\n- This would be compatible with any CSS variant that allows CSS variable syntax (and that doesn't replace it or the mustache syntax with something else).\r\n\r\nIf mustache syntax causes too much of a headache with linters, IDEs, etc. (since curly braces are important to CSS), a third alternative would be for the component author to use the CSS variable syntax, and require that if you want Vue to reactively set and update that variable, you simply use the kebab-case version of one of your data, prop, or computed attributes (i.e., no complex expressions or direct use of methods). Example:\r\n\r\n```HTML\r\n<template>\r\n  <h1>{{ title }}</h1>\r\n</template>\r\n<script>\r\nexport default {\r\n  name: \"ColorHeader\",\r\n  props: {\r\n    bgColor: { type: String, default: \"inherit\", required: false },\r\n    bgHover: { type: String, default: \"inherit\", required: false },\r\n    title: { type: String, default: \"(Untitled)\", required: false },\r\n  }\r\n}\r\n</script>\r\n<style>\r\n  h1 { background-color: var(--bg-color); }\r\n  h1:hover { background-color: var(--bg-hover); }  \r\n</style>\r\n```\r\n\r\nTo prevent collisions between real legacy variables and same-named component features, this could be opt-in with an attribute on the style element (like \"scoped\" operates).\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->"},{"Id":"7042864183","Type":"IssuesEvent","CreatedAt":"2017-12-30T19:19:47","Actor":"yyx990803","Repository":"vuejs/vue","Organization":"vuejs","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/vuejs/vue/issues/7345","RelatedDescription":"Closed issue \"Using existing rendered template \" (#7345) at vuejs/vue","RelatedBody":"### What problem does this feature solve?\r\nCan I mount vue on existing php rendered markup so vue can directly hook on it.\r\nexample : If direct request then server render the markup ( without using v8 ) and vue will take over once document loaded at client side  and if  vue router request then js will render the markup. I can also try that both php and js will render same markup ?\r\n\r\n\r\n### What does the proposed API look like?\r\nIf php rendered markup with data-rendered attribute is detected then vue will hook on it directly.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->"},{"Id":"7042853876","Type":"IssuesEvent","CreatedAt":"2017-12-30T19:10:19","Actor":"sagarkbhatt","Repository":"vuejs/vue","Organization":"vuejs","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/vuejs/vue/issues/7345","RelatedDescription":"Opened issue \"Using existing rendered template \" (#7345) at vuejs/vue","RelatedBody":"### What problem does this feature solve?\r\nCan I mount vue on existing php rendered markup so vue can directly hook on it.\r\nexample : If direct request then server render the markup ( without using v8 ) and vue will take over once document loaded at client side  and if  vue router request then js will render the markup. I can also try that both php and js will render same markup ?\r\n\r\n\r\n### What does the proposed API look like?\r\nIf php rendered markup with data-rendered attribute is detected then vue will hook on it directly.\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->"}],"ResultType":"GitHubEvent"},"Router":{"Events":[{"Id":"7042247422","Type":"IssuesEvent","CreatedAt":"2017-12-30T09:26:37","Actor":"vue-issue-bot","Repository":"vuejs/vue-router","Organization":"vuejs","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/vuejs/vue-router/issues/1958","RelatedDescription":"Closed issue \"Programmatic navigation adds ? to the url\" (#1958) at vuejs/vue-router","RelatedBody":"When I use ``` this.$router.push({name: 'move-here'})``` url is changed from \r\n\r\n```http://localhost:8080/#``` \r\n\r\nto \r\n\r\n```http://localhost:8080/?#/move-here``` \r\n\r\nWhy is ```?``` added to the url? I think this causes a page refresh."},{"Id":"7042247409","Type":"IssuesEvent","CreatedAt":"2017-12-30T09:26:36","Actor":"puppeteer701","Repository":"vuejs/vue-router","Organization":"vuejs","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/vuejs/vue-router/issues/1958","RelatedDescription":"Opened issue \"Programmatic navigation adds ? to the url\" (#1958) at vuejs/vue-router","RelatedBody":"When I use ``` this.$router.push({name: 'move-here'})``` url is changed from \r\n\r\n```http://localhost:8080/#``` \r\n\r\nto \r\n\r\n```http://localhost:8080/?#/move-here``` \r\n\r\nWhy is ```?``` added to the url? I think this causes a page refresh."},{"Id":"7041491350","Type":"PullRequestEvent","CreatedAt":"2017-12-29T21:26:18","Actor":"m1guelpf","Repository":"vuejs/vue-router","Organization":"vuejs","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/vuejs/vue-router/pull/1957","RelatedDescription":"Opened pull request \"Avoid updating license every year\" (#1957) at vuejs/vue-router","RelatedBody":"Uses the same template as in main repo to avoid recieving a PR every year."},{"Id":"7037948745","Type":"IssuesEvent","CreatedAt":"2017-12-28T17:40:23","Actor":"mymtw","Repository":"vuejs/vue-router","Organization":"vuejs","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/vuejs/vue-router/issues/1956","RelatedDescription":"Opened issue \"Vuejs ssr check user is authenticated for each request\" (#1956) at vuejs/vue-router","RelatedBody":"I’m using this ssr boilerplate for my app, https://github.com/vuejs/vue-hackernews-2.0\r\n\r\nI don’t know how to implement logic for checking is user authenticated for each user’s page request, I’m using cookies for storing user's token\r\n\r\nI looked that router can handle request before render component:\r\n```\r\nrouter.beforeEach((to, from, next) => {\r\n    if (to.matched.some(record => record.meta.requiresAuth)) {\r\n      // this route requires auth, check if logged in\r\n      // if not, redirect to login page.\r\n      // isLoggedIn()\r\n      //   .then(response => response.json())\r\n      //   .then(json => {\r\n      //     console.log(json[0])\r\n      //     next()\r\n      //   })\r\n      //   .catch(error => {\r\n      //     console.log(error)\r\n      //     next()\r\n      //   })\r\n\r\n      const x = true\r\n\r\n      if (!x) {\r\n        next({\r\n          path: '/signin',\r\n          query: { redirect: to.fullPath }\r\n        })\r\n      } else {\r\n        next()\r\n      }\r\n    } else {\r\n      next() // make sure to always call next()!\r\n    }\r\n  })\r\n\r\n  return router\r\n}\r\n```\r\n\r\nHere is problem, router starting to use this code in client-side and in server-side, which in my case a little bit incorrect.\r\n\r\nHow to send request for is user authenticated only once, or in client-side or in server-side?"}],"ResultType":"GitHubEvent"},"Vuex":{"Events":[{"Id":"7041502525","Type":"IssuesEvent","CreatedAt":"2017-12-29T21:32:28","Actor":"hootlex","Repository":"vuejs/vuex","Organization":"vuejs","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/vuejs/vuex/issues/1109","RelatedDescription":"Opened issue \"Update Shopping Cart Example\" (#1109) at vuejs/vuex","RelatedBody":"# What problem does this feature solve?\r\nThe goal of updating the example is to make it more friendly to newcomers and also demonstrate some best practices.\r\n\r\n# What does the proposed API look like?\r\nAfter reviewing the shopping cart example and discussing it with @chrisvfritz, I’ve started working on possible improvements.\r\n\r\n## Implemented changes https://github.com/vuejs/vuex/pull/1107\r\n- Use separate mutations to update the checkout status and the cart.\r\n- Move/create cart related getters to the `cart` module.\r\n- Remove abbreviations\r\n\r\n## Not implemented\r\n- Make the example comply with the style guide.\r\n- Make mutations responsible for updating one piece of state to make debugging easier.\r\n- Use an action (`addProductToCart`) to commit separate mutations on `cart` and `products` modules instead of using a shared mutation. \r\n\r\n\r\n## Ideas\r\n### Mutation types\r\nWhat do you think of removing the mutation types in order to make the example simpler? Mutation types might be beneficial in some cases but by not using them in the example might make it more friendly to newcomers.\r\n\r\n### Remove getters that return a piece of state as is\r\nI feel that this pattern might give the wrong impression to newcomers that they always have to use a getter in order to access the state.\r\nExample: \r\n```js\r\nconst getters = {\r\n  allProducts: state => state.all\r\n}\r\n```\r\n\r\n### Other\r\nI think that we could use more descriptive names in Vuex assets. \r\nFor instance `added` can be `cartItems` or just `items` since it’s being accessed as `cart.items`. In general, I like the `items` convention for all modules. This way I always know the property name and distinguish the content based on the module name. For example `users.items`, `products.items​`. \r\n\r\nAlso, `addToCart` could be `addProductToCart` since a cart can also contain other things.\r\n\r\nThat might be too peaky but I believe that when people go over an official example it’s very likely to use it as a reference for best practices.\r\n\r\nWhat do you think? 🙂\r\n\r\n<!-- generated by vue-issues. DO NOT REMOVE -->"},{"Id":"7041492767","Type":"PullRequestEvent","CreatedAt":"2017-12-29T21:27:08","Actor":"m1guelpf","Repository":"vuejs/vuex","Organization":"vuejs","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/vuejs/vuex/pull/1108","RelatedDescription":"Opened pull request \"Avoid updating license every year\" (#1108) at vuejs/vuex","RelatedBody":"Uses the same template as in main repo to avoid recieving a PR every year."},{"Id":"7041461267","Type":"PullRequestEvent","CreatedAt":"2017-12-29T21:10:47","Actor":"hootlex","Repository":"vuejs/vuex","Organization":"vuejs","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/vuejs/vuex/pull/1104","RelatedDescription":"Closed pull request \"[Shopping cart example] Use `product` instead of abbreviation\" (#1104) at vuejs/vuex","RelatedBody":"Replace the `p` variable name abbreviation with `product` to make the example easier to read."},{"Id":"7041460474","Type":"PullRequestEvent","CreatedAt":"2017-12-29T21:10:25","Actor":"hootlex","Repository":"vuejs/vuex","Organization":"vuejs","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/vuejs/vuex/pull/1107","RelatedDescription":"Opened pull request \"Update shopping cart example\" (#1107) at vuejs/vuex","RelatedBody":"#### Checkout related mutations\r\n- The mutations that update the `checkoutStatus` can be independent of the ones that alter the cart items.\r\n- I have added the `SET_CART_ITEMS` and `SET_CHECKOUT_STATUS` mutations and removed the `CHECKOUT_*` ones to make debugging easier.\r\n\r\n#### cart module getters\r\n- The `cartProducts` could live within cart module’s getters instead of the root getters.\r\n- The total price of the cart should be a getter instead of a computed property.\r\n\r\n#### Abbreviations\r\nReplace the `p` variable name abbreviation with `product` to make the example easier to read.\r\n\r\n"}],"ResultType":"GitHubEvent"}},"RunOn":"2017-12-31T05:30:34.2429916Z","RunDurationInMilliseconds":2142}