{"Data":{"Blog":{"FeedItems":[{"Title":".NET Framework January 2018 Security and Quality Rollup","PublishedOn":"2018-01-10T06:39:31+00:00","CommentsCount":31,"FacebookCount":0,"Summary":"Updated: January 25, 2018 Today, we are releasing the January 2018 Security and Quality Rollup. An issue with the January 2018 Monthly Rollup was found on Windows 7 and Windows Server 2008 R2 if .NET...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-january-2018-security-and-quality-rollup/","RawContent":null},{"Title":".NET for UWP January 2018 Update","PublishedOn":"2018-01-10T04:17:28+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the .NET for UWP January 2018 Update. This post includes the fix included and instructions on how to update your applications. Security CVE-2018-0786 – Security Feature Bypass...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-for-uwp-january-2018-update/","RawContent":null},{"Title":".NET Framework 4.7.1 is available on Windows Update, WSUS and MU Catalog!","PublishedOn":"2018-01-09T21:39:54+00:00","CommentsCount":9,"FacebookCount":0,"Summary":"Today, we are happy to announce the Microsoft .NET Framework 4.7.1 is available on Windows Update, Windows Server Update Services (WSUS) and Microsoft Update (MU) Catalog. This includes reliability...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-4-7-1-is-available-on-windows-update-wsus-and-mu-catalog/","RawContent":null},{"Title":".NET Core January 2018 Update","PublishedOn":"2018-01-09T21:08:03+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core January 2018 Update. This includes .NET Core  1.0.9, 1.1.6 and 2.0.5. Please leave feedback on the release in the comments below or at dotnet/core #1199. Security...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-core-january-2018-update/","RawContent":null},{"Title":"Migrating your existing .NET application to the cloud? Tell us about it!","PublishedOn":"2017-12-05T18:14:46+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Hi everyone! The .NET team is conducting a survey to learn more about your approach for moving existing .NET applications to the cloud.  The survey should take less than 5 minutes to complete. Take...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/12/05/migrating-your-existing-net-application-to-the-cloud-tell-us-about-it/","RawContent":null},{"Title":"Announcing the Windows Compatibility Pack for .NET Core","PublishedOn":"2017-11-17T04:59:32+00:00","CommentsCount":76,"FacebookCount":0,"Summary":"Porting existing code to .NET Core used to be quite hard because the available API set was very small. In .NET Core 2.0, we already made this much easier, thanks to .NET Standard 2.0. Today,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/announcing-the-windows-compatibility-pack-for-net-core/","RawContent":null},{"Title":"UPDATE – Microservices and Docker containers: Architecture, Patterns and Development guidance (Updated for .NET Core 2.0)","PublishedOn":"2017-11-16T22:00:06+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Nov. 15th 2017 update Earlier this year, we published this eBook/guide and sample application offering guidance for architecting microservices and Docker containers based applications. We have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/update-microservices-and-docker-containers-architecture-patterns-and-development-guidance-updated-for-net-core-2-0/","RawContent":null},{"Title":"UPDATE – Web Applications with ASP.NET Core Architecture and Patterns guidance (Updated for ASP.NET Core 2)","PublishedOn":"2017-11-16T21:00:05+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Nov. 15th 2017 update Earlier this year, we published an eBook/Guide and sample application offering guidance named Architecting Modern Web Applications with ASP.NET Core and Microsoft Azure. We have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/update-web-applications-with-asp-net-core-architecture-and-patterns-guidance-updated-for-asp-net-core-2/","RawContent":null},{"Title":"Introducing Tensor for multi-dimensional Machine Learning and AI data","PublishedOn":"2017-11-15T22:00:18+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"Overview Tensor is an exchange type for homogenous multi-dimensional data for 1 to N dimensions. The motivation behind introducing Tensor&#60;T&#62; is to make it easy for Machine Learning library...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/introducing-tensor-for-multi-dimensional-machine-learning-and-ai-data/","RawContent":null},{"Title":"Introducing Nullable Reference Types in C#","PublishedOn":"2017-11-15T20:00:47+00:00","CommentsCount":240,"FacebookCount":0,"Summary":"Today we released a prototype of a C# feature called &#8220;nullable reference types&#8220;, which is intended to help you find and fix most of your null-related bugs before they blow up at runtime....","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/nullable-reference-types-in-csharp/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7102763357","Type":"PullRequestEvent","CreatedAt":"2018-01-16T00:17:04","Actor":"galatrash-at-dnn","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/96","RelatedDescription":"Opened pull request \"Adding DNN Platform.\" (#96) at dotnet/home","RelatedBody":""},{"Id":"7097053889","Type":"PullRequestEvent","CreatedAt":"2018-01-14T15:15:00","Actor":"bfistein","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/95","RelatedDescription":"Opened pull request \"Fix broken logo URL\" (#95) at dotnet/home","RelatedBody":""},{"Id":"7065382954","Type":"PullRequestEvent","CreatedAt":"2018-01-06T19:21:47","Actor":"ctaggart","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/94","RelatedDescription":"Opened pull request \"add SourceLink\" (#94) at dotnet/home","RelatedBody":"Adding SourceLink to the project list as per the checklist https://github.com/ctaggart/SourceLink/issues/138"},{"Id":"7044237283","Type":"PullRequestEvent","CreatedAt":"2017-12-31T20:25:44","Actor":"onovotny","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/93","RelatedDescription":"Opened pull request \"Add Humanizer\" (#93) at dotnet/home","RelatedBody":"Onboarding Humanizer: https://github.com/Humanizr/Humanizer/issues/682"},{"Id":"6946829856","Type":"PullRequestEvent","CreatedAt":"2017-12-05T18:08:42","Actor":"heiligerdankgesang","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/92","RelatedDescription":"Opened pull request \"Remove contact email from system.drawing.md\" (#92) at dotnet/home","RelatedBody":"Contact email is outdated. Mono-project site's community section has better, more up-to-date information."},{"Id":"6934052963","Type":"PullRequestEvent","CreatedAt":"2017-12-02T15:19:09","Actor":"rprouse","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/91","RelatedDescription":"Opened pull request \"Add NUnit to the .NET Foundation Projects\" (#91) at dotnet/home","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7148376542","Type":"IssuesEvent","CreatedAt":"2018-01-25T06:31:53","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/54","RelatedDescription":"Opened issue \"January 2018 Security and Quality Updates\" (#54) at dotnet/announcements","RelatedBody":"# January 2018 Security and Quality Updates\r\n\r\nThe following Security and Quality Updates were released this month. Known issues and resolved CVEs are also listed.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework January 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-january-2018-security-and-quality-rollup/)\r\n* [.NET Framework January 2018 Monthly Rollup Known Issue KB4074906 - \"TypeInitializationException\" or \"FileFormatException\" error in WPF applications](https://github.com/dotnet/announcements/issues/53)\r\n* [CVE-2018-0786](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-0786) – Security Feature Bypass in X509 Certificate Validation\r\n* [CVE-2018-0764](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-0764) – Denial of Service when parsing XML documents\r\n\r\n## .NET Core\r\n\r\n* [.NET Core January 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-core-january-2018-update/)\r\n* [CVE-2018-0786](https://github.com/dotnet/announcements/issues/51) – Security Feature Bypass in X509 Certificate Validation\r\n* [CVE-2018-0764](https://github.com/dotnet/announcements/issues/52) – Denial of Service when parsing XML documents\r\n\r\n## .NET for UWP\r\n\r\n* [.NET for UWP January 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-for-uwp-january-2018-update/)\r\n* [CVE-2018-0786](https://github.com/dotnet/announcements/issues/51) – Security Feature Bypass in X509 Certificate Validation"},{"Id":"7089727012","Type":"IssuesEvent","CreatedAt":"2018-01-12T04:51:18","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/53","RelatedDescription":"Opened issue \".NET Framework January 2018 Rollup Known Issue KB4074906 - \"TypeInitializationException\" or \"FileFormatException\" error in WPF applications\" (#53) at dotnet/announcements","RelatedBody":"# .NET Framework January 2018 Rollup Known Issue KB4074906 - \"TypeInitializationException\" or \"FileFormatException\" error in WPF applications\r\n\r\nAn issue has been found in the [.NET Framework January 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-framework-january-2018-security-and-quality-rollup/). The .NET team is in the process of fixing the issue. This document describes the symptom and workarounds to resolve the issue while you are waiting for a fix.\r\n\r\nThis document will be updated when a fix is made available.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [microsoft/dotnet #599](https://github.com/Microsoft/dotnet/issues/599)\r\n\r\n## Symptoms\r\n\r\nWindows Presentation Foundation (WPF) applications that request a fallback font or a character that is not included in the currently selected font return the following error messages: \r\n\r\n```\r\nSystem.TypeInitializationException\r\n \r\n“FileFormatException: No FontFamily element found in FontFamilyCollection \r\nthat matches current OS or greater: Win7SP1”.\r\n\r\nInner exception originates from: CompositeFontParser\r\n```\r\n\r\n## Workarounds\r\n\r\nTo work around this problem, use one of the following methods.\r\n\r\n### Workaround 1 - Uninstall the January 2018 Update\r\n\r\nTo keep .NET 4.7.1 installed and maintain protection against vulnerabilities that are addressed by the January security updates, uninstall the January .NET Framework Security and Quality Rollup ([KB4055002](https://support.microsoft.com/en-us/help/4055002)), and then install the January .NET Framework Security-Only Update ([KB4054183](https://support.microsoft.com/en-us/help/4054183)). To do this, follow these steps:\r\n\r\n1. In Control Panel, open the Windows Update item, and then select View update history.\r\n1. In the Review your update history list, locate and select Security Update for Microsoft .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, 4.7.1 ([KB4055002](https://support.microsoft.com/en-us/help/4055002)). Then, select Uninstall.\r\n1. When you are prompted for confirmation to uninstall, select Yes.\r\n1. Restart your computer if you are prompted to do this.\r\n1. Download and install the Security Only update for .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, and 4.7.1 for Windows 7 SP1 and Windows Server 2008 R2 SP1 and .NET Framework 4.6 for Windows Server 2008 SP2 ([KB4054183](https://support.microsoft.com/en-us/help/4054183)) for your operating system configuration from the following links:\r\n   * [Security Only update for .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, and 4.7.1 for Windows 7 SP1 and Windows Server 2008 R2 SP1 for x86 systems (KB4054183)](http://download.windowsupdate.com/d/msdownload/update/software/secu/2018/01/ndp47-kb4054183-x86_301cb3d6591b572786c8349c12a28e5ec5d2d334.exe)\r\n   * [Security Only update for .NET Framework 4.6, 4.6.1, 4.6.2, 4.7, and 4.7.1 on Windows 7 SP1 and Windows Server 2008 R2 SP1 for x64 systems (KB4055269)](http://download.windowsupdate.com/d/msdownload/update/software/secu/2018/01/ndp47-kb4054183-x64_a022ad5109b1208dff502d1be4477668b4fa258d.exe)\r\n1. Follow the installation prompts, and then restart your computer if your are prompted to do this.\r\n\r\n### Workaround 2 - Uninstall the .NET Framework 4.7.1, Install .NET Framework 4.7\r\n\r\nRoll back to the previous version of .NET Framework. To do this, follow these steps:\r\n\r\n1. In Control Panel, open the Programs and Features item.\r\n1. In the Uninstall or change a program list, locate and then select Microsoft .NET Framework 4.7.1, and then select Uninstall/Change.\r\n![image](https://user-images.githubusercontent.com/2608468/34859496-5a3f11e6-f70b-11e7-82cb-5a12a4f9a633.png)\r\n1. Select Remove .NET Framework 4.7.1 from this computer, and then select Next.\r\n![image](https://user-images.githubusercontent.com/2608468/34859585-f5d50f3e-f70b-11e7-8fb9-a75e35c08767.png)\r\n1. Select Continue to confirm uninstallation.\r\n1. Select Finish after the uninstallation is finished.\r\n![image](https://user-images.githubusercontent.com/2608468/34859595-07877226-f70c-11e7-9d66-908a37ef0ded.png)\r\n1. Restart your computer if you are prompted to do this.\r\n1. Install [.NET Framework 4.7](https://www.microsoft.com/en-us/download/details.aspx?id=55170).\r\n\r\n## Issue Reports\r\n\r\n* [KB4074906 (Microsoft)](https://support.microsoft.com/en-us/help/4074906)\r\n* [0xd4d/dnSpy #692](https://github.com/0xd4d/dnSpy/issues/692)\r\n* [Wox-launcher/Wox #1823](https://github.com/Wox-launcher/Wox/issues/1823)\r\n"},{"Id":"7076404590","Type":"IssuesEvent","CreatedAt":"2018-01-09T18:02:02","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/52","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0764: Denial of Service when parsing XML documents\" (#52) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0764\r\n## Denial of Service when parsing XML documents\r\n### Executive Summary \r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 1.1, and 2.0. This advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a Denial of Service vulnerability in all public versions of .NET core due to improper processing of XML documents. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET application. A remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET core handles XML document processing.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.9, 1.1.6 and 2.0.5. Developers are advised to update their .NET Core SDK to version 2.1.4 or 1.1.7. These runtime and SDK versions will also address CVE-2018-0786,  https://github.com/dotnet/announcements/issues/51\r\n\r\n### Discussion\r\n\r\nPlease use **** TODO: FILL IN ISSUE LINK *** for discussion of this advisory.\r\n\r\n## Affected Software\r\nThe vulnerability affects any Microsoft .NET Core project if it uses any of affected runtime versions listed below\r\n\r\n Runtime Version | Fixed runtime version\r\n----------------| -------------------------\r\n1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5, 1.0.7, 1.0.8 | 1.0.9\r\n1.1.0, 1.1.1, 1.1.2, 1.1.4, 1.1.5 | 1.1.6\r\n2.0.0, 2.0.3, 2.0.4 |  2.0.5\r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\n\r\nTo check the runtimes installed on a computer you must view the contents of the runtime folder. By default these are\r\n\r\n| Operating System          | Location          |\r\n|---------------------------|-------------------|\r\n| Windows | C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\ |\r\n| macOS | /usr/local/share/dotnet/shared/Microsoft.NETCore.App/    |\r\n| Supported Linux platforms | /usr/share/dotnet/shared/Microsoft.NETCore.App/   |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you do not have a directory for 1.0.9, 1.1.6 or 2.0.2 then any applications targeting .NET Core will be vulnerable. Downloads for all supported platforms can be acquired from https://www.microsoft.com/net/download/\r\n\r\n#### How do I fix my affected application?\r\nApplications can be fixed by installing the latest runtimes or SDKs. Typically application servers only install a runtime package, developer machines install SDKs. Installers can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). Runtime version 1.1.6 will also install runtime version 1.0.9.\r\n\r\nIf you have built a [self-contained application](https://docs.microsoft.com/en-us/dotnet/core/deploying/#self-contained-deployments-scd) you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\r\n### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the [application.runtime.config](https://github.com/dotnet/cli/blob/ede74b6be1406ba0c086b6d5fc1a5d4eacff1f01/Documentation/specs/runtime-configuration-file.md#appnameruntimeconfigjson) file for that application and editing the framework version and setting `rollForward` to `false`. This should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nNote that this file is optional, you may need to create it for each application alongside the executable.\r\n\r\n### External Links\r\n\r\n[CVE-2018-0764](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0764)\r\n\r\n### Revisions\r\n\r\nV1.0 (Jan 9, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-01-09_\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  "},{"Id":"7076401836","Type":"IssuesEvent","CreatedAt":"2018-01-09T18:01:26","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/51","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0786: Security Feature Bypass in X509 Certificate Validation\" (#51) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0786\r\n## Security Feature Bypass in X509 Certificate Validation\r\n### Executive Summary \r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 1.1, and 2.0. This advisory also provides guidance on what developers can do to update their applications correctly. \r\n\r\nMicrosoft is aware of a security vulnerability in the public versions of .NET Core where an attacker could present a certificate that is marked invalid for a specific use, but a component uses it for that purpose. This action disregards the Enhanced Key Usage tagging.\r\n\r\nThe security update addresses the vulnerability by ensuring that .NET Core components completely validate certificates.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.9, 1.1.6 and 2.0.5. Developers are advised to update their .NET Core SDK to version 2.1.4 or 1.1.7. These runtime and SDK versions will also address CVE-2018-0764 ***** TODO: ADD LINK TO OTHER ISSUE *****\r\n\r\n### Discussion\r\n\r\nPlease use **** TODO: FILL IN ISSUE LINK *** for discussion of this advisory.\r\n\r\n## Affected Software\r\nThe vulnerability affects any Microsoft .NET Core project if it uses any of affected runtime versions listed below\r\n\r\n Runtime Version | Fixed runtime version\r\n----------------| -------------------------\r\n1.0.0, 1.0.1, 1.0.2, 1.0.3, 1.0.4, 1.0.5, 1.0.7, 1.0.8 | 1.0.9\r\n1.1.0, 1.1.1, 1.1.2, 1.1.4, 1.1.5 | 1.1.6\r\n2.0.0, 2.0.3, 2.0.4 |  2.0.5\r\n\r\nThis vulnerability also affects any .NET native applications using the following NuGet packages.\r\n\r\nNuGet Packages | Fixed NuGet Packages\r\n-- | --\r\nMicrosoft.NETCore.UniversalWindowsPlatform 5.2.* (contains   .NET native 1.4.*) | Microsoft.NETCore.UniversalWindowsPlatform 5.2.4\r\nMicrosoft.NETCore.UniversalWindowsPlatform 5.3.* (contains   .NET native 1.6.*) | Microsoft.NETCore.UniversalWindowsPlatform 5.3.5\r\nMicrosoft.NETCore.UniversalWindowsPlatform 5.4.* (contains   .NET native 1.7.*) | Microsoft.NETCore.UniversalWindowsPlatform 5.4.2\r\nMicrosoft.NETCore.UniversalWindowsPlatform 6.0.* (contains   .NET native 2.0.*) | Microsoft.NETCore.UniversalWindowsPlatform 6.0.6\r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\n\r\nTo check the runtimes installed on a computer you must view the contents of the runtime folder. By default these are\r\n\r\n| Operating System          | Location          |\r\n|---------------------------|-------------------|\r\n| Windows | C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\ |\r\n| macOS | /usr/local/share/dotnet/shared/Microsoft.NETCore.App/    |\r\n| Supported Linux platforms | /usr/share/dotnet/shared/Microsoft.NETCore.App/   |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you do not have a directory for 1.0.9, 1.1.6 or 2.0.2 then any applications targeting .NET Core will be vulnerable. Downloads for all supported platforms can be acquired from https://www.microsoft.com/net/download/\r\n\r\n#### How do I fix my affected application?\r\nApplications can be fixed by installing the latest runtimes or SDKs. Typically application servers only install a runtime package, developer machines install SDKs. Installers can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). Runtime version 1.1.6 will also install runtime version 1.0.9.\r\n\r\nIf you have built a [self-contained application](https://docs.microsoft.com/en-us/dotnet/core/deploying/#self-contained-deployments-scd) you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n#### How do I fix my .NET native application? \r\n\r\n.NET native requires that applications be re-processed by the .NET native compiler to incorporate the fixes and the re-processed version needs to be distributed via the Windows Store.\r\n\r\nWe recommend that you update your .NET UWP apps to use the latest minor version of the `Microsoft.NETCore.UniversalWindowsPlatform` NuGet package so that you can build and verify that your app works as expected when updated. If you are using version 6.0.x, you should update to 6.0.6 and if you’re using 5.2.x, you can update to 5.2.4. Of course, you can update to a higher major version too, but we are distributing security updates for all impacted major versions (currently 5.2.x, 5.3.x, 5.4.x and 6.0.x). Additionally, whether or not you update your NuGet packages, all applications submitted to the store after today will be automatically fixed during submission processing.\r\n\r\nIf you do not update your app in the Store, it will automatically be reprocessed and distributed via an application update in the next few weeks. Users who have automatic app updates enabled will get the fix with no intervention on your or their parts. Because updated apps are distributed through the Windows Store, sideloaded apps will not be automatically updated. We recommend that developers who distribute sideloaded apps update the affected NuGet packages, rebuild their applications and distribute them to their users.\r\n\r\nMicrosoft is committed to keeping UWP applications secure and to supporting developers. If you have feedback on the fix distribution process, please let us know at dotnetnative@microsoft.com. \r\n\r\n## Other Information\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including Terms and Conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue where you can ask questions.\r\n\r\n### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the [application.runtime.config](https://github.com/dotnet/cli/blob/ede74b6be1406ba0c086b6d5fc1a5d4eacff1f01/Documentation/specs/runtime-configuration-file.md#appnameruntimeconfigjson) file for that application and editing the framework version and setting `rollForward` to `false`. This should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nNote that this file is optional, you may need to create it for each application alongside the executable.\r\n\r\n### External Links\r\n\r\n[CVE-2018-0786](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0786)\r\n\r\n### Revisions\r\n\r\nV1.0 (Jan 9, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-01-09_"},{"Id":"6948315401","Type":"IssuesEvent","CreatedAt":"2017-12-05T23:41:57","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/50","RelatedDescription":"Closed issue \".Net Core ARM32 SDK availability\" (#50) at dotnet/announcements","RelatedBody":"Referencing #29.\r\n\r\nWill it be possible to : \r\n\r\na) Provide ARM32 builds for the SDK at its current state\r\nor\r\nb) Provide links on how to build the .Net Core SDK for ARM32?\r\n\r\nThe thing is I am planning to use it in a virtual environnement, through proot + qemu-arm-static. This way I would be able to build and, more importantly, run unit tests on ARM32. Another thing I am planning to do is to setup a build environnement on i686 through virtualisation as qemu doesn't seem to be able to emulate x86_64 on i686 (but arm32 does seem to work well enough).\r\n\r\nThank you in advance.\r\n\r\nSergio\r\n\r\n"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7169266338","Type":"PullRequestEvent","CreatedAt":"2018-01-30T05:25:23","Actor":"tannergooding","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16095","RelatedDescription":"Opened pull request \"[WIP] Updating the HWIntrinsic codegen to support marking LoadVector128 and LoadAlignedVector128 as contained.\" (#16095) at dotnet/coreclr","RelatedBody":"FYI. @fiigii, @CarolEidt, @mikedn"},{"Id":"7168983935","Type":"IssuesEvent","CreatedAt":"2018-01-30T03:32:36","Actor":"AndyAyersMS","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/11390","RelatedDescription":"Closed issue \"Jit: simplify chain of gc - nogc - gc casts from span ctor\" (#11390) at dotnet/coreclr","RelatedBody":"If a fixed pointer is used to construct a span we can see extra register shuffles as a value is cast in and out of GC.\r\n\r\n```\r\n       488B442428           mov      rax, bword ptr [rsp+28H]\r\n       488BF0               mov      rsi, rax\r\n       488BC6               mov      rax, rsi\r\n       488BF0               mov      rsi, rax\r\n```\r\n\r\nSee notes and source code in dotnet/corefxlab#1479."},{"Id":"7168939993","Type":"IssuesEvent","CreatedAt":"2018-01-30T03:16:51","Actor":"kouvel","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/15592","RelatedDescription":"Reopened issue \"Bogus SynchronizationLockException thrown in thread intensive workloads\" (#15592) at dotnet/coreclr","RelatedBody":"In x64 Windows release testing in the CI:\r\n\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/job/release_windows_nt\r\n\r\nThere are many cases of the TryEnter01, TryEnter03, and TryEnter05 tests failing:\r\n\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/job/release_windows_nt/3556/\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/job/release_windows_nt/3553/\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/job/release_windows_nt/3549/\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/job/release_windows_nt/3546/\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/job/release_windows_nt/3538/\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/job/release_windows_nt/3586\r\n"},{"Id":"7168939364","Type":"IssuesEvent","CreatedAt":"2018-01-30T03:16:38","Actor":"tannergooding","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/16094","RelatedDescription":"Opened issue \"[Test] A few SSE HWIntrinsic tests are temporarily disabled\" (#16094) at dotnet/coreclr","RelatedBody":"The following tests are temporarily disabled due to API naming changes:\r\n* ConvertToVector128SingleScalar_r\r\n* ConvertToVector128SingleScalar_ro\r\n* LoadScalar_r\r\n* LoadScalar_ro\r\n* SetScalar_r\r\n* SetScalar_ro\r\n\r\nThey can be re-enabled after https://github.com/dotnet/corefx/pull/26668 is merged and syncs back"},{"Id":"7168934156","Type":"IssuesEvent","CreatedAt":"2018-01-30T03:14:45","Actor":"kouvel","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/15592","RelatedDescription":"Closed issue \"Bogus SynchronizationLockException thrown in thread intensive workloads\" (#15592) at dotnet/coreclr","RelatedBody":"In x64 Windows release testing in the CI:\r\n\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/job/release_windows_nt\r\n\r\nThere are many cases of the TryEnter01, TryEnter03, and TryEnter05 tests failing:\r\n\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/job/release_windows_nt/3556/\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/job/release_windows_nt/3553/\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/job/release_windows_nt/3549/\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/job/release_windows_nt/3546/\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/job/release_windows_nt/3538/\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/job/release_windows_nt/3586\r\n"},{"Id":"7168914729","Type":"PullRequestEvent","CreatedAt":"2018-01-30T03:08:03","Actor":"kouvel","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16089","RelatedDescription":"Merged pull request \"Prevent compiler optimization that could cause local var values to change in multithreaded environments, in some places\" (#16089) at dotnet/coreclr","RelatedBody":""},{"Id":"7168873573","Type":"PullRequestEvent","CreatedAt":"2018-01-30T02:54:01","Actor":"CarolEidt","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16092","RelatedDescription":"Opened pull request \"Refactor RefPosition and Interval Building\" (#16092) at dotnet/coreclr","RelatedBody":"Move code for building `RefPosition`s and `Interval`s out of lsra.cpp into lsrabuild.cpp. Also, move common code from lsraarm*.cpp and lsraxarch.cpp to lsrabuild.cpp.\r\n\r\nMaintain the `ListNodePool` on the `LinearScan` object to be used by all the building methods.\r\n\r\nRename `TreeNodeInfoInit` methods to `Build`, to more accurately reflect the next round of changes where they will build the `RefPosition`s directly."}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7169257631","Type":"PullRequestEvent","CreatedAt":"2018-01-30T05:21:55","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8501","RelatedDescription":"Opened pull request \"Fixing update dependency by using the new APIs.\" (#8501) at dotnet/cli","RelatedBody":"Fixing update dependency by using the new APIs. We broke this when we updated the version of VersionTools.\r\n"},{"Id":"7167962539","Type":"PullRequestEvent","CreatedAt":"2018-01-29T22:22:38","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8489","RelatedDescription":"Merged pull request \"Updating the WebSdk DependencyVersion to support local build\" (#8489) at dotnet/cli","RelatedBody":"Package location: https://dotnet.myget.org/feed/dotnet-web/package/nuget/microsoft.net.sdk.web\r\n\r\n@mlorbetske @livarcocc @seancpeters "},{"Id":"7167959805","Type":"PullRequestEvent","CreatedAt":"2018-01-29T22:22:00","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/pull/8495","RelatedDescription":"Closed pull request \"Merge release/2.1 to master\" (#8495) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.1 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1-to-master-20180129-080048\ngit reset --hard upstream/master\ngit merge upstream/release/2.1\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1-to-master-20180129-080048 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7167958261","Type":"PullRequestEvent","CreatedAt":"2018-01-29T22:21:40","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/pull/8482","RelatedDescription":"Closed pull request \"Merge release/2.1 to master\" (#8482) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.1 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1-to-master-20180126-080047\ngit reset --hard upstream/master\ngit merge upstream/release/2.1\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1-to-master-20180126-080047 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7167956520","Type":"PullRequestEvent","CreatedAt":"2018-01-29T22:21:19","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8499","RelatedDescription":"Opened pull request \"Updating Roslyn to 2.7.0-beta3-62529-06.\" (#8499) at dotnet/cli","RelatedBody":"@jaredpar this is for .NET Core 2.1 preview1"},{"Id":"7167944597","Type":"PullRequestEvent","CreatedAt":"2018-01-29T22:18:44","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8498","RelatedDescription":"Opened pull request \"Updating Roslyn to 2.7.0-beta3-62529-05.\" (#8498) at dotnet/cli","RelatedBody":""},{"Id":"7167694813","Type":"PullRequestEvent","CreatedAt":"2018-01-29T21:26:46","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8497","RelatedDescription":"Merged pull request \"Build break on OSX; CLI:master\" (#8497) at dotnet/cli","RelatedBody":"Follow-up from PR: https://github.com/dotnet/cli/pull/8488\r\n\r\nThe \"${arg,,}\" syntax works well on dev and Jenkins OSX machines but does not work correctly on VSO OSX build machines [likely a lower version of bash on VSO machines]. Therefore, using 'awk' to transform to lower case as it is used successfully in line 69 of 'Run-Build.sh'\r\n\r\nOSX build break: https://devdiv.visualstudio.com/DevDiv/Default/_build/index?buildId=1331014\r\n\r\n\r\n\r\n\r\n"},{"Id":"7167476824","Type":"PullRequestEvent","CreatedAt":"2018-01-29T20:41:27","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8497","RelatedDescription":"Opened pull request \"Build break on OSX; CLI:master\" (#8497) at dotnet/cli","RelatedBody":"Follow-up from PR: https://github.com/dotnet/cli/pull/8488\r\n\r\nThe \"${arg,,}\" syntax works well on dev and Jenkins OSX machines but does not work correctly on VSO OSX build machines [likely a lower version of bash on VSO machines]. Therefore, using 'awk' to transform to lower case as it is used successfully in line 69 of 'Run-Build.sh'\r\n\r\nOSX build break: https://devdiv.visualstudio.com/DevDiv/Default/_build/index?buildId=1331014\r\n\r\n\r\n\r\n\r\n"},{"Id":"7167221109","Type":"PullRequestEvent","CreatedAt":"2018-01-29T19:48:27","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8488","RelatedDescription":"Merged pull request \"Repairing the first pass call to 'dotnet msbuild'; CLI:master\" (#8488) at dotnet/cli","RelatedBody":"'$ExtraParametersNoTargets', which is used on the first pass call to 'dotnet msbuild', currently is of type 'string' not 'List'1' as is '$ExtraParameters'. This results in the non-honoring of any parameter other than parameter one [after the removal of targets and pure parameters]. \r\n\r\nSolution: Make a copy of '$ExtraParameters' to '$ExtraParametersNoTargets' of type 'List'1' and remove the targets from the list.\r\n\r\n\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7168870939","Type":"PullRequestEvent","CreatedAt":"2018-01-30T02:53:08","Actor":"dotnet-maestro-bot","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/636","RelatedDescription":"Opened pull request \"Update BuildTools to prerelease-02430-02 (master)\" (#636) at dotnet/standard","RelatedBody":""},{"Id":"7167745006","Type":"IssuesEvent","CreatedAt":"2018-01-29T21:37:23","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/629","RelatedDescription":"Closed issue \"Question:Is there a common api to load unmanaged dll in .net standard 2.0 ?\" (#629) at dotnet/standard","RelatedBody":"Hi,\r\n\r\nWe're working to have .net standard 2.0 support for IBM .Net Provider. We have dependency on unmanaged\\native dll and currently we are loading it via LoadUnmanagedDllFromPath(..) from System.Runtime.Loader pkg.\r\nWe want our package to work with Full Framework as well.. Since System.Runtime.Loader pkg do not support FullFramework, we need to figure out alternate way of loading unmanaged dll.\r\nOne way we could see using  DllImport.. or Platform invoke. But in this case we have to deal with Linux and OSX. Which we are trying to avoid..  \r\nOur question are-\r\n1. Is there a way or common api across the platforms to load unmanaged dll in .Net standard 2.0\r\n2. What are the best way to Handle\\load unmanaged dll ?\r\n\r\nWarm Regards,\r\nArchana"},{"Id":"7167726243","Type":"IssuesEvent","CreatedAt":"2018-01-29T21:33:24","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/632","RelatedDescription":"Closed issue \"DataAnnotaions in .net core misbehaving\" (#632) at dotnet/standard","RelatedBody":"Hi the range for dataannotaions does not seem to work or the (0) for the display attib correctly if you put in range of 1 250 it always errors after you enter any chars. Additionally if you try to use the {0} {1} {2} the param (0) never shows the display attrib. The {0] is puling in min length and {1) max length and you cant get the display name  eg \r\n\r\n      [Required(ErrorMessage =\"{0} is required\")]\r\n\r\n        [Display(Name = \"Message\")]\r\n\r\n        [Range(1,250, ErrorMessage = \"{0) should be between {1} and {2}\")]\r\n\r\n        public string Message { get; set; }\r\n\r\nas you type in the text area and tab off it errors with \r\n\r\n1 should be between 250 and {2}:\r\n\r\nbut i would expect is 'Message should be between 1 and 250'\r\n\r\nbut only error if nothing is in the text area and or max has exceed not if the range of text is correct\r\n\r\nEdit (0)\r\n\r\nI am using .net core 2"},{"Id":"7167630380","Type":"IssuesEvent","CreatedAt":"2018-01-29T21:13:15","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/635","RelatedDescription":"Opened issue \"Fix all the interop APIs in netstandard ref\" (#635) at dotnet/standard","RelatedBody":"See https://github.com/dotnet/standard/pull/631 which fixes some of them but we should go through the rest of the ref to ensure that all of the structs and COM interfaces are corrected. \r\n\r\nSee also https://github.com/dotnet/buildtools/issues/1880 which would help find and fix these. "},{"Id":"7167620089","Type":"PullRequestEvent","CreatedAt":"2018-01-29T21:11:03","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/633","RelatedDescription":"Merged pull request \"Update BuildTools to prerelease-02427-01 (master)\" (#633) at dotnet/standard","RelatedBody":""},{"Id":"7167617695","Type":"PullRequestEvent","CreatedAt":"2018-01-29T21:10:31","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/634","RelatedDescription":"Merged pull request \"Add MarshallAs attributes to IStream\" (#634) at dotnet/standard","RelatedBody":"Upon further testing I realized that my previous IStream fix was insufficient. This adds back the required 'MarshalAs' attributes to finish the scenario."},{"Id":"7159717258","Type":"PullRequestEvent","CreatedAt":"2018-01-27T16:48:11","Actor":"gregg-miskelly","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/634","RelatedDescription":"Opened pull request \"Add MarshallAs attributes to IStream\" (#634) at dotnet/standard","RelatedBody":"Upon further testing I realized that my previous IStream fix was insufficient. This adds back the required 'MarshalAs' attributes to finish the scenario."},{"Id":"7158290796","Type":"PullRequestEvent","CreatedAt":"2018-01-26T23:43:37","Actor":"gregg-miskelly","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/631","RelatedDescription":"Merged pull request \"Fix marshalling declarations of System.Runtime.InteropServices.ComTypes.IStream in netstandard reference dll\" (#631) at dotnet/standard","RelatedBody":"The IStream definition in contract definition of System.Runtime.InteropServices.ComTypes had incorrect marshalling declarations which meant that COM marshalling generator tools would output incorrect code.\r\n\r\nThis corrects the definition.\r\n\r\nNote: There are other types in the ComTypes namespace that also have incorrect marshalling. But from what I could tell, none of them looked like they would be relevant in X-Plat scenarios, and fixing them was somewhat involved and I didn't have a good way to test them. So I left them alone."},{"Id":"7157638186","Type":"PullRequestEvent","CreatedAt":"2018-01-26T20:39:30","Actor":"dotnet-maestro-bot","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/633","RelatedDescription":"Opened pull request \"Update BuildTools to prerelease-02426-04 (master)\" (#633) at dotnet/standard","RelatedBody":""}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7169168456","Type":"IssuesEvent","CreatedAt":"2018-01-30T04:45:03","Actor":"ayende","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/26572","RelatedDescription":"Closed issue \"SslStream.Read hangs (race condition on dispose?)\" (#26572) at dotnet/corefx","RelatedBody":"My process sometimes seems to hang, and I was able to capture a stack trace, it ends with:\r\n\r\n```\r\n \tSystem.Private.CoreLib.dll!System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\tUnknown\tNon-user code. Skipped loading symbols.\r\n \tSystem.Net.Security.dll!System.Net.Security.SslState.CheckThrow(bool authSuccessCheck, bool shutdownCheck)\tUnknown\tNon-user code. Skipped loading symbols.\r\n \tSystem.Net.Security.dll!System.Net.Security.SslState.SecureStream.get()\tUnknown\tNon-user code. Skipped loading symbols.\r\n \tSystem.Net.Security.dll!System.Net.Security.SslStream.Read(byte[] buffer, int offset, int count)\tUnknown\tNon-user code. Skipped loading symbols.\r\n```\r\n\r\nNow, the specific scenario here is that I'm trying to dispose a connection, so I called the `SslStream.Dispose` from another thread, but it seems like it either didn't take or it might have corrupted some state.\r\n\r\nThe `SslStream` is wrapping a `NetworkStream`, and that one is safe to close while it is running, I'm _guessing_ that `SslStream` isn't?\r\n\r\n"},{"Id":"7169057958","Type":"PullRequestEvent","CreatedAt":"2018-01-30T03:58:41","Actor":"Anipik","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/corefx/pull/26524","RelatedDescription":null,"RelatedBody":"Fixes https://github.com/dotnet/corefx/issues/26235\r\n\r\n@pjanotti there is no timeout available in case of reading or writing asynchronously.\r\n"},{"Id":"7169057886","Type":"PullRequestEvent","CreatedAt":"2018-01-30T03:58:39","Actor":"Anipik","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/pull/26524","RelatedDescription":"Closed pull request \"ServiceBase And ServiceController Tests using NamedPipes\" (#26524) at dotnet/corefx","RelatedBody":"Fixes https://github.com/dotnet/corefx/issues/26235\r\n\r\n@pjanotti there is no timeout available in case of reading or writing asynchronously.\r\n"},{"Id":"7169008561","Type":"PullRequestEvent","CreatedAt":"2018-01-30T03:41:43","Actor":"dotnet-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/26670","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#26670) at dotnet/corefx","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7168991108","Type":"PullRequestEvent","CreatedAt":"2018-01-30T03:35:14","Actor":"jkotas","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/26658","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#26658) at dotnet/corefx","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7168841845","Type":"IssuesEvent","CreatedAt":"2018-01-30T02:42:59","Actor":"sebastienros","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/26669","RelatedDescription":"Opened issue \"Process class doesn't expose some memory usage properties on Linux/MacOs\" (#26669) at dotnet/corefx","RelatedBody":"Tried on Ubuntu in a docker image and MacOs without docker, and I get this when running a simple web app:\r\n\r\n```\r\nWorkingSet64: 70 \r\nPeakWorkingSet64:  \r\nVirtualMemorySize64: 23,789 \r\nPeakVirtualMemorySize64:  \r\nPagedSystemMemorySize64:  \r\nPeakPagedMemorySize64: \r\n```\r\n\r\nThe values on Windows however are\r\n\r\n```\r\nWorkingSet64: 121 \r\nPeakWorkingSet64: 121 \r\nVirtualMemorySize64: 2,112,855 \r\nPeakVirtualMemorySize64: 2,112,856 \r\nPagedSystemMemorySize64:  \r\nPeakPagedMemorySize64: 179 \r\n```\r\n\r\nSome __Peak__ values are not provided, and the list differs between windows and linux/mac.\r\n\r\nThe code to repro is here: https://github.com/sebastienros/memoryusage\r\n\r\nPS: If I start a new `Process` dynamically, the value of `WorkingSet64` of the returned instance doesn't change overtime even if the application is used intensively with memory allocations. The value remains very low (something like 3 MB) though the system reports more than 400 MB of used memory for the app. I'll file an issue based on your feedback, with a repro if necessary.\r\n"},{"Id":"7168790954","Type":"PullRequestEvent","CreatedAt":"2018-01-30T02:25:44","Actor":"tannergooding","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/26668","RelatedDescription":"Opened pull request \"Updating the x86 HWIntrinsic ref assembly\" (#26668) at dotnet/corefx","RelatedBody":"CoreFX side changes for https://github.com/dotnet/coreclr/pull/15923."}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7169072291","Type":"IssuesEvent","CreatedAt":"2018-01-30T04:04:11","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/24525","RelatedDescription":"Closed issue \"Allow inline variable declaration for in and ref parameter types\" (#24525) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\nI'm using C# 7.2 and version 15.5.3 of VS 2017 Enterprise.\r\n\r\n**Steps to Reproduce**:\r\n\r\n``` C#\r\nprivate static void GetValue(out string input)\r\n{\r\n    input = null;\r\n}\r\nprivate static void DoNothing(ref string input)\r\n{\r\n}\r\n\r\nprivate static void DoNothingIn(in string input)\r\n{\r\n}\r\n\r\nprivate static void Call()\r\n{\r\n    GetValue(out var x);\r\n    DoNothing(ref var y = x);\r\n    DoNothingIn(in var z = null);\r\n}\r\n```\r\n\r\n\r\n**Expected Behavior**: Compiles and y is usable after calling DoNothing and z is usable after calling DoNothingIn and all of x, y, and z are basically null;\r\n\r\n**Actual Behavior**:\r\nDoes not compile since you can't inline declare variables for ref or in keywords.  I hope that's clear.  Thanks!"},{"Id":"7168885977","Type":"PullRequestEvent","CreatedAt":"2018-01-30T02:58:10","Actor":"jaredpar","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/24528","RelatedDescription":"Opened pull request \"Update version numbers for 15.7\" (#24528) at dotnet/roslyn","RelatedBody":""},{"Id":"7168884782","Type":"PullRequestEvent","CreatedAt":"2018-01-30T02:57:47","Actor":"jaredpar","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/24527","RelatedDescription":"Opened pull request \"Update publish version for the dev15.7 branch\" (#24527) at dotnet/roslyn","RelatedBody":""},{"Id":"7168859577","Type":"IssuesEvent","CreatedAt":"2018-01-30T02:49:13","Actor":"vsfeedback","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/24526","RelatedDescription":"Opened issue \"Creating a property from a constructor arg in a constructor with an empty body puts the opening brace on the same line.\" (#24526) at dotnet/roslyn","RelatedBody":"I have my code formatting set to put opening braces on new lines rather than the same line.  When I have a constructor with an empty body and I give it an argument, I can take the &quot;create and initialize property&quot; quick action.  However, this does not respect my new line setting for braces, i.e. it leaves the opening brace on the same line as the constructor declaration.\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/189043/creating-a-property-from-a-constructor-arg-in-a-co.html\nVSTS ticketId: 558134_\n_These are the original issue comments:_\n(no comments)\n_These are the original issue solutions:_\n(no solutions)"},{"Id":"7168755699","Type":"IssuesEvent","CreatedAt":"2018-01-30T02:13:39","Actor":"jinujoseph","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/24176","RelatedDescription":"Closed issue \"Double click in editor selects too large an area\" (#24176) at dotnet/roslyn","RelatedBody":"When i double click inside an string i expect to select contents inside string not outside it. \r\n\r\nFollowing picture is taken after double click inside string.\r\n\r\nI expect text editor to only select contents inside and not parantheses or semicolon.\r\n\r\n![1515687373536745397570](https://user-images.githubusercontent.com/15255162/34834811-ea15d500-f6ea-11e7-877e-81a3575d84ee.jpg)\r\n\r\n-----\r\n\r\nIm not sure if any of this relates to roslyn. Couldnt find better repo for VS text editor.\r\n"},{"Id":"7168516352","Type":"IssuesEvent","CreatedAt":"2018-01-30T00:56:43","Actor":"Kentalot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/24525","RelatedDescription":"Opened issue \"Allow inline variable declaration for in and ref parameter types\" (#24525) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\nI'm using C# 7.2 and version 15.5.3 of VS 2017 Enterprise.\r\n\r\n**Steps to Reproduce**:\r\n\r\n``` C#\r\nprivate static void GetValue(out string input)\r\n{\r\n    input = null;\r\n}\r\nprivate static void DoNothing(ref string input)\r\n{\r\n}\r\n\r\nprivate static void DoNothingIn(in string input)\r\n{\r\n}\r\n\r\nprivate static void Call()\r\n{\r\n    GetValue(out var x);\r\n    DoNothing(ref var y = x);\r\n    DoNothingIn(in var z = null);\r\n}\r\n```\r\n\r\n\r\n**Expected Behavior**: Compiles and y is usable after calling DoNothing and z is usable after calling DoNothingIn and all of x, y, and z are basically null;\r\n\r\n**Actual Behavior**:\r\nDoes not compile since you can't inline declare variables for ref or in keywords.  I hope that's clear.  Thanks!"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7169196885","Type":"IssuesEvent","CreatedAt":"2018-01-30T04:57:02","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/3167","RelatedDescription":"Closed issue \"Use CRT float functions from MathF\" (#3167) at dotnet/corert","RelatedBody":"Right now MathF functions are just forwards to Math , but we need to change them to use lower precision but efficient f* functions.."},{"Id":"7169196855","Type":"PullRequestEvent","CreatedAt":"2018-01-30T04:57:00","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5309","RelatedDescription":"Merged pull request \"Merge nmirror to master\" (#5309) at dotnet/corert","RelatedBody":""},{"Id":"7169158209","Type":"PullRequestEvent","CreatedAt":"2018-01-30T04:40:34","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5312","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5312) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7169085799","Type":"PullRequestEvent","CreatedAt":"2018-01-30T04:09:48","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5313","RelatedDescription":"Merged pull request \"Update Unix external test instructions and add root test dir script\" (#5313) at dotnet/corert","RelatedBody":"Updating the documentation to reflect current source.\r\nAlso fixes a bug where running \r\n```sh\r\ntests/runtest.sh\r\n```\r\nfrom the repo root directory would also fail to find tests in `src/Simple`"},{"Id":"7168948150","Type":"PullRequestEvent","CreatedAt":"2018-01-30T03:19:44","Actor":"A-And","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5313","RelatedDescription":"Opened pull request \"Update Unix external test instructions and add root test dir script\" (#5313) at dotnet/corert","RelatedBody":"Updating the documentation to reflect current source.\r\nAlso fixes a bug where running \r\n```sh\r\ntests/runtest.sh\r\n```\r\nfrom the repo root directory would also fail to find tests in `src/Simple`"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7168860131","Type":"IssuesEvent","CreatedAt":"2018-01-30T02:49:24","Actor":"yyjdelete","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/1913","RelatedDescription":"Opened issue \"NU1605 by default treated as error instead of warning, breaks updating packages in solutions\" (#1913) at dotnet/sdk","RelatedBody":"See also https://github.com/NuGet/Home/issues/6141.\r\n\r\nAny attempt to try to update all PackageReference to the same version with NuGet will failed, and the any way is to edit .csproj directly."},{"Id":"7167988060","Type":"IssuesEvent","CreatedAt":"2018-01-29T22:28:27","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1001","RelatedDescription":"Closed issue \"Need to have InferredFromUsage style configuration/platform property groups defined in the SDK props \" (#1001) at dotnet/sdk","RelatedBody":"The InferredFromUsage configs need to be removed from the props once all of the insertions in VS are in place."},{"Id":"7167738285","Type":"IssuesEvent","CreatedAt":"2018-01-29T21:35:58","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1597","RelatedDescription":"Closed issue \"VS 2017 multi-targeting conditional build\" (#1597) at dotnet/sdk","RelatedBody":"VS 2017 (15.3.5) build does not work correctly with new csproj that have conditional `<TargetFrameworks>` tag. Example [ConsoleSample.zip](https://github.com/dotnet/sdk/files/1319216/ConsoleSample.zip):\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\t<PropertyGroup>\r\n\t\t<TargetFrameworks>net461</TargetFrameworks>\r\n\t\t<OutputType>Exe</OutputType>\r\n\t\t<IsPackable>false</IsPackable>\r\n\t\t<Configurations>Debug;Release;Publish</Configurations>\r\n\t</PropertyGroup>\r\n\t<PropertyGroup Condition=\"'$(Configuration)'=='Publish'\">\r\n\t\t<TargetFrameworks>net461;netcoreapp2.0;netstandard2.0;net35</TargetFrameworks>\r\n\t</PropertyGroup>\r\n</Project>\r\n```\r\n**Steps to reproduce:** build the project in VS as debug, switch the build configuration to Publish and try to build it again.\r\n\r\n**Expected behavior:** builds without errors.\r\n\r\n**Actual behavior:** build fails with following error message:\r\n```\r\nAssets file ...\\ConsoleSample\\obj\\project.assets.json' doesn't have a target for '.NETCoreApp,Version=v2.0'. Ensure that restore has run and that you have included 'netcoreapp2.0' in the TargetFrameworks for your project.\r\n```\r\n**Reason:** the `obj\\project.assets.json` contains only\r\n```\r\n  \"targets\": {\r\n    \".NETFramework,Version=v4.6.1\": {},\r\n    \".NETFramework,Version=v4.6.1/win7-x86\": {}\r\n  },\r\n```\r\nSolution clean and deletion of bin/obj folders does not help, the build keeps failing. Console build\r\n```\r\nmsbuild ConsoleSample.csproj /p:Configuration=Publish /t:Restore;Build\r\n```\r\nfails with same error.\r\n\r\nThe issue is a huge blocker for us as it prevents us from migration to the new project system. \r\nCurrently we use custom msbuild scripts for multitargeting builds and it doesn't work well, as there is no VS support.\r\n\r\nAny viable workarounds are welcome."},{"Id":"7166805759","Type":"IssuesEvent","CreatedAt":"2018-01-29T18:25:39","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/593","RelatedDescription":"Closed issue \"Support for crossgen on build/publish\" (#593) at dotnet/sdk","RelatedBody":"Feature Request:\r\nSupport crossgen-ing output assemblies for runtime-specific builds (=> e.g. self-contained apps).\r\n\r\nThis would be nice to have when publishing assemblies but may also be of (limited?) use for building.\r\n\r\nAlso, it would be great to be able to crossgen third party dlls pulled in via NuGet to further improve startup times."},{"Id":"7166729774","Type":"IssuesEvent","CreatedAt":"2018-01-29T18:10:17","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1544","RelatedDescription":"Closed issue \"GetDependsOnNETStandard emits warning for long named references\" (#1544) at dotnet/sdk","RelatedBody":"Try to build a project that contains project long-named references starting with ..\r\n\r\nE.g. this test repo: https://github.com/sunahe/TestGetDependsOnNetStandard\r\n\r\nA build warning occurs:\r\n` Resolved file has a bad image, no metadata, or is otherwise inaccessible. System.IO.DirectoryNotFoundException: The system cannot find the path specified. (Exception from HRESULT: 0x80070003) `\r\n\r\nIf the HintPath is an absolute path, there is no warning."},{"Id":"7166719659","Type":"IssuesEvent","CreatedAt":"2018-01-29T18:08:13","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1754","RelatedDescription":"Closed issue \".NET 4.7.1 app referencing fields .NET standard 2.0 can cause missing field exception from select assemblies\" (#1754) at dotnet/sdk","RelatedBody":"Found in D15Rel 27110.0\r\n1.Create a .NET 4.7.1 C# console app and a ,NET Standard 2.0 class library.\r\n2. Inside the Class Library add the following field/constructor to the class.\r\n```\r\npublic System.Net.Http.StringContent StringContent;\r\n        public Class1()\r\n        {\r\n            StringContent = new System.Net.Http.StringContent(\"asdf\");\r\n        }\r\n```\r\n3. Add a reference from the class library to the console app. \r\n4. Add some code to reference StringContent in the Main method of the console app such as:\r\n```\r\nClass1 c= new Class1();\r\nc.StringContent.GetType();\r\n```\r\n5. Start debugging\r\n\r\nExpected:\r\nApplication builds fine and runs fine.\r\n\r\nActual:\r\nApplication breaks during execution. Following is found in the output:\r\nAn unhandled exception of type 'System.MissingFieldException' occurred in Unknown Module.\r\nField not found: 'ClassLibrary1.Class1.StringContent'.\r\n\r\nThis also occurs with System.IO.Compression.ZipArchive"},{"Id":"7166565296","Type":"IssuesEvent","CreatedAt":"2018-01-29T17:37:31","Actor":"davidmatson","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/1912","RelatedDescription":"Opened issue \".NET Core shouldn't use OutputType=Exe/WinExe when it means something else\" (#1912) at dotnet/sdk","RelatedBody":"Spinning off from #1906, .NET Core, by design, currently doesn't build AnyCPU exes. However, it uses MSBuild syntax that implies otherwise, such as:\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>net47</TargetFramework>\r\n    <Platform>AnyCPU</Platform>\r\n  </PropertyGroup>\r\n\r\n</Project>```\r\n\r\nIn .NET Framework, it made sense to have an OutputType of Library (DLL), Exe (console EXE) or WinExe (non-console EXE), as that directly matched the type of Windows PE produced.\r\n\r\nIn .NET core, the output type is always a DLL on Windows (if I understand correctly), which may or may not have code designed to work as an entry point. To eliminate the confusion here, distinct MSBuild syntax could help quite a bit. For example, consider:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <EntryPointType>Console</EntryPointType>\r\n    <TargetFramework>net47</TargetFramework>\r\n    <Platform>AnyCPU</Platform>\r\n  </PropertyGroup>\r\n\r\n</Project>```\r\n\r\nWhere EntryPointType is one of: None, Console, NonConsole\r\nOr maybe:\r\nHasEntryPoint: true/false\r\nIsConsoleApplication: true/false\r\n\r\nI think this would have led to less surprise in issues like [dotnet/cli#6237](https://github.com/dotnet/cli/issues/6237). (That issue is still useful as a feature request for making .exes on Windows - this one is about the MSBuild contract when producing a .NET Core application with an entry point.)"},{"Id":"7164457989","Type":"IssuesEvent","CreatedAt":"2018-01-29T11:16:49","Actor":"GapiSla","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/1911","RelatedDescription":"Opened issue \"Inconsistancy between VS publish and dotnet CLI publish:  Could not load file or assembly 'System.IO.FileSystem, Version=4.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'. The located assembly's manifest definiti    on does not match the assembly reference. (Exception from HRESULT: 0x80131040)\" (#1911) at dotnet/sdk","RelatedBody":"Getting below exception on ubuntu 16.04 when trying to run ASP.NET Core MVC project (dotnet core 2.0 version). VS version 15.5.4. Runtime on ubuntu 2.1.3. However published package using CLI command works fine.\r\n\r\nUnhandled Exception: System.IO.FileLoadException: Could not load file or assembly 'System.IO.FileSystem, Version=4.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'. The located assembly's manifest definiti    on does not match the assembly reference. (Exception from HRESULT: 0x80131040)"},{"Id":"7163568414","Type":"PullRequestEvent","CreatedAt":"2018-01-29T08:00:52","Actor":"dotnet-bot","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1910","RelatedDescription":"Opened pull request \"Merge release/2.1 to master\" (#1910) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.1 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1-to-master-20180129-080051\ngit reset --hard upstream/master\ngit merge upstream/release/2.1\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1-to-master-20180129-080051 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7163568334","Type":"PullRequestEvent","CreatedAt":"2018-01-29T08:00:51","Actor":"dotnet-bot","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1909","RelatedDescription":"Opened pull request \"Merge release/2.0.0 to release/2.1\" (#1909) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.0.0 into release/2.1.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.0.0-to-release/2.1-20180129-080049\ngit reset --hard upstream/release/2.1\ngit merge upstream/release/2.0.0\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.0.0-to-release/2.1-20180129-080049 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"956524881096708096","CreatedAt":"2018-01-25T13:51:17+00:00","UserScreenname":"dotnet","Text":"Jeff and Maira - improving https://t.co/QxdK7Ocjtg LIVE at 10am ET / 15:00 UTC.  Check it out! https://t.co/jlSeKESN3g","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":14,"FavoriteCount":8,"RawContent":null},{"Id":"955790963024257024","CreatedAt":"2018-01-23T13:14:57+00:00","UserScreenname":"dotnet","Text":"Check out @csharpfritz and @condrong at 10am ET, 15:00 UTC talking about new @AspNet Core features and benefits for… https://t.co/BLXAg7rubK","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":12,"FavoriteCount":4,"RawContent":null},{"Id":"954763538328883201","CreatedAt":"2018-01-20T17:12:20+00:00","UserScreenname":"dotnet","Text":"Jeff is close to his first follower goal!  Follow him on Mixer or Twitch and he will host a FREE workshop live on s… https://t.co/EefnkSEqfe","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":18,"FavoriteCount":6,"RawContent":null},{"Id":"954724179533758465","CreatedAt":"2018-01-20T14:35:56+00:00","UserScreenname":"dotnet","Text":"Join Jeff at 10am ET (-5:00 UTC) for a live coding stream about .NET, .NET Core, C#, and Visual Studio.  He'll also… https://t.co/dWA8n7Ttph","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":21,"FavoriteCount":7,"RawContent":null}]}},"RunOn":"2018-01-30T05:30:22.4208867Z","RunDurationInMilliseconds":8651}