{"Data":{"Blog":{"FeedItems":[{"Title":".NET Framework 4.7.2 Developer Pack Early Access build 3056 is available!","PublishedOn":"2018-03-08T23:22:13+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are happy to share an Early Access build with the .NET Framework 4.7.2 Developer Pack. The .NET Framework 4.7.2 Developer Pack lets developers build applications that target the .NET...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/03/08/net-framework-4-7-2-developer-pack-early-access-build-3056-is-available/","RawContent":null},{"Title":"F# language and tools update for Visual Studio 2017 version 15.6","PublishedOn":"2018-03-06T18:28:06+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"With the release of Visual Studio 2017 version 15.6, we’re excited to share updates to the F# language and core library, F# tooling in Visual Studio, and infrastructure updates that concern OSS...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/03/06/f-language-and-tools-update-for-visual-studio-2017-version-15-6/","RawContent":null},{"Title":"Announcing Entity Framework Core 2.1 Preview 1","PublishedOn":"2018-02-27T18:11:29+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Today we are releasing the first preview of EF Core 2.1, alongside .NET Core 2.1 Preview 1 and ASP.NET Core 2.1 Preview 1. The new bits are available in NuGet as part of the individual packages, and...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/27/announcing-entity-framework-core-2-1-preview-1/","RawContent":null},{"Title":"Announcing .NET Core 2.1 Preview 1","PublishedOn":"2018-02-27T18:08:23+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 2.1 Preview 1. It is the first public release of .NET Core 2.1. We have great improvements that we want to share and that we would love to get your feedback on,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/27/announcing-net-core-2-1-preview-1/","RawContent":null},{"Title":"Calling All Desktop Developers: How do you interact with data?","PublishedOn":"2018-02-27T17:00:36+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Connecting to databases and services is an important part of desktop application development for many of our customers. Visual Studio provides a variety of tools and technologies that can help you...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/27/calling-all-desktop-developers-how-do-you-interact-with-data/","RawContent":null},{"Title":"Azure Blob Storage as a Network Drive","PublishedOn":"2018-02-26T16:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Many applications make use of a network drive to backup and store files. When I was in university I found myself constantly coding for fun, and one example took the form of a network share for my...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/26/azure-blob-storage-as-a-network-drive/","RawContent":null},{"Title":".NET Framework February 2018 Security and Quality Rollup","PublishedOn":"2018-02-14T04:27:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the February 2018 Security and Quality Rollup. Security No new security fixes. See .NET Framework January 2018 Security and Quality Rollup for the latest security updates....","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/13/net-framework-february-2018-security-and-quality-rollup/","RawContent":null},{"Title":"Machine Learning in .NET – Help us build the right experience!","PublishedOn":"2018-02-13T17:17:58+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In the past few years, Machine Learning (ML) and Artificial Intelligence (AI) have paved the road for building smarter applications through advancements in speech recognition, computer vision,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/13/machine-learning-in-net-help-us-build-the-right-experience/","RawContent":null},{"Title":"Announcing .NET Framework 4.7.2 Early Access build 3052!","PublishedOn":"2018-02-05T21:55:13+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Today, we are happy to share the .NET Framework 4.7.2 Early Access build 3052 for your feedback. .NET Framework 4.7.2 is the next version of the .NET Framework. It is currently feature-complete and in...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/05/announcing-net-framework-4-7-2-early-access-build-3052/","RawContent":null},{"Title":"Entity Framework Core 2.1 Roadmap","PublishedOn":"2018-02-02T18:39:25+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"As mentioned in the announcement of the .NET Core 2.1 roadmap earlier today, at this point we know the overall shape of our next release and we have decided on a general schedule for it. As we...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/02/entity-framework-core-2-1-roadmap/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7192252734","Type":"PullRequestEvent","CreatedAt":"2018-02-03T01:30:47","Actor":"karann-msft","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/98","RelatedDescription":"Opened pull request \"Updates to reflect the latest information\" (#98) at dotnet/home","RelatedBody":""},{"Id":"7187459205","Type":"PullRequestEvent","CreatedAt":"2018-02-02T05:26:03","Actor":"mairaw","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/97","RelatedDescription":"Opened pull request \"update CLA PDF link\" (#97) at dotnet/home","RelatedBody":""},{"Id":"7102763357","Type":"PullRequestEvent","CreatedAt":"2018-01-16T00:17:04","Actor":"galatrash-at-dnn","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/96","RelatedDescription":"Opened pull request \"Adding DNN Platform.\" (#96) at dotnet/home","RelatedBody":""},{"Id":"7097053889","Type":"PullRequestEvent","CreatedAt":"2018-01-14T15:15:00","Actor":"bfistein","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/95","RelatedDescription":"Opened pull request \"Fix broken logo URL\" (#95) at dotnet/home","RelatedBody":""},{"Id":"7065382954","Type":"PullRequestEvent","CreatedAt":"2018-01-06T19:21:47","Actor":"ctaggart","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/94","RelatedDescription":"Opened pull request \"add SourceLink\" (#94) at dotnet/home","RelatedBody":"Adding SourceLink to the project list as per the checklist https://github.com/ctaggart/SourceLink/issues/138"},{"Id":"7044237283","Type":"PullRequestEvent","CreatedAt":"2017-12-31T20:25:44","Actor":"onovotny","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/93","RelatedDescription":"Opened pull request \"Add Humanizer\" (#93) at dotnet/home","RelatedBody":"Onboarding Humanizer: https://github.com/Humanizr/Humanizer/issues/682"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7373349220","Type":"IssuesEvent","CreatedAt":"2018-03-13T17:01:53","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/62","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0875: Hash Collison can cause Denial of Service\" (#62) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0875: Hash Collison can cause Denial of Service\r\n## Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 2.0 (including other minor and patch releases).\r\nThis advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability in the public versions of .NET Core where a malicious file or web request could cause a denial of service (DoS) attack.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.10, 1.1.7 or 2.0.6. Developers are advised to update their .NET Core SDK to versions 1.1.8 or 2.1.101.\r\n\r\n## Discussion\r\n\r\nUse *TBD* for discussion of this advisory.\r\n\r\n### Mitigation Factors\r\nNone\r\n\r\n### Affected Software\r\n\r\nAny application running against .NET Core 1.0.9 or lower versions, 1.1.6 or lower minor versions or 2.0.5 or lower minor versions is affected. \r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\nAny application running against .NET Core 1.0.9 or lower versions, 1.1.6 or lower minor versions or 2.0.5 or lower minor versions is affected. \r\n\r\nA complete list of runtimes can be discovered by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows\t| `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS\t| `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms\t| `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.10, 1.1.7 and 2.0.6, then any applications targeting the respective major/minor versions, 1.0 or 1.1 or 2.0 of .NET Core are vulnerable.\r\n\r\nAdditionally, if you've deployed self-contained applications targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n#### How do I fix my affected application?\r\n\r\nApplications can be fixed by installing the latest .NET Core runtimes or SDKs. Typically, application servers only have runtime packages installed and developer machines have the SDKs installed. \r\nInstallers for the runtimes can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). \r\n.NET Core 1.1.8 SDK installs both versions 1.0.10 and 1.1.7 of the .NET Core runtime.\r\n\r\nIf you've built a self-contained application, you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n#### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the `application.runtime.config` file for that application. Set the framework version to the desired version and the `rollForward` property to false. These settings should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nSince the `application.runtime.config` file is an optional file, you may need to create one for each application and add it alongside the executable.\r\n\r\n### Acknowledgments\r\n[Ben Adams](https://twitter.com/ben_a_adams) of [Illyriad Games](https://www.illyriad.co.uk/)\r\n\r\n### External Links\r\n[CVE-2018-0875](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0875)\r\n\r\n### Revisions\r\n\r\nV1.0 (Mar 13, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-03-13_\r\n"},{"Id":"7301596554","Type":"IssuesEvent","CreatedAt":"2018-02-27T06:10:33","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/61","RelatedDescription":"Opened issue \"New offline books released for Visual Studio 2017\" (#61) at dotnet/announcements","RelatedBody":"# New offline books released for Visual Studio 2017\r\n\r\nEarlier this month, we released an update to Offline Books for the Visual Studio 2017 Help Viewer.\r\n\r\nThis release includes new .NET books, including .NET Core Guide, .NET Guide, .NET Framework Guide and the .NET API Reference. It also includes the latest content for Visual Studio 2017 version 15.5, the latest updates to Visual Basic, C# (7.1 and 7.2), F#, ASP.NET Core, NuGet, SQL Server, and the Universal Windows Platform.\r\n\r\nThe .NET Guide, .NET Framework Guide and .NET API Reference books together are a replacement for the .NET Framework 4.6 and 4.5 book, which can be removed. Just be aware that the new .NET API Reference book currently displays the API syntax block for C# only, but examples are shown in other languages, just like the experience you currently have on docs.microsoft.com.If you need to see the API syntax for Visual Basic, C++/CLI or F#, then you should keep the old book until the new reference book is updated again in a few weeks. Once you remove the .NET Framework 4.6 and 4.5 book, you cannot reinstall it.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\n- https://github.com/dotnet/docs/issues/4502\r\n\r\n## Add new content\r\n\r\nYou will see these new books when you have Help Viewer installed and choose **Help** > **Add and Remove Content** from the Visual Studio 2017 main menu. If you don't see this menu item, then [open the Visual Studio Installer](https://docs.microsoft.com/visualstudio/install/modify-visual-studio), click the **More** dropdown and choose **Modify**. When the component list appears, choose **Individual Components** at the top, then check **Help Viewer**.\r\n\r\n![help_viewer_component](https://user-images.githubusercontent.com/12971179/36713111-c9d49a7c-1b40-11e8-918a-e7e3619669a2.png)\r\n\r\n## Help Viewer Installation\r\n\r\nTo start the installation, select the **Modify** button in the lower right corner of the Installer window.\r\n\r\nTo update individual books whose status is \"Updates available\", remove the book and then click **Add** to get the new version. To update all your books at once, select the link in the lower right corner of the **Add and Remove Content** window:\r\n\r\n![offline-books](https://user-images.githubusercontent.com/12971179/36713028-75b944f6-1b40-11e8-91c4-4830355f815e.png)"},{"Id":"7300537622","Type":"IssuesEvent","CreatedAt":"2018-02-27T00:12:10","Actor":"eerhardt","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/60","RelatedDescription":"Opened issue \"System.Runtime.Intrinsics in .NET Core 2.1\" (#60) at dotnet/announcements","RelatedBody":"# System.Runtime.Intrinsics in .NET Core 2.1\r\n\r\n.NET Core 2.1 has been adding platform intrinsic APIs to support directly calling processor specific instructions, such as Intel’s x86 SIMD instructions.  See the [initial platform intrinsics design](https://github.com/dotnet/designs/blob/master/accepted/platform-intrinsics.md) for more information.\r\n\r\nWe have decided that it makes the most sense for this intrinsics feature to ship in a “preview” status in the .NET Core 2.1 RTM timeframe.  This means that the runtime support we are implementing will be included, but the assembly exposing the intrinsics will only be available to projects via explicit reference to a “preview-only” package.  These APIs won’t be included in the official .NET Core 2.1 packages.\r\n\r\nGiven our limited time and resources, recent changes in the approach we take to expose the intrinsics, and API changes prompted by design feedback from the community, we don’t believe there is enough time to settle these APIs for 2.1. We plan to follow the pattern of other recent features like Span<T> and Memory<T> that first shipped in preview before formally joining the supported API surface.  Not only would we expect the next version of .NET Core to support more intrinsics than could be supported in 2.1, but we expect to have real usage examples in CoreFX and higher level components as well.  These real world examples, as well as feedback from customers who opt in to the preview, should give us the confidence we need to officially support the APIs going forward.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\nhttps://github.com/dotnet/corefx/issues/27486\r\n\r\n## Details\r\n\r\nIn the coming days, we plan on removing System.Runtime.Intrinsics.dll from the Microsoft.NETCore.App package.  This means any libraries/applications that are using these APIs will no longer compile by default, and will not run on new builds of .NET Core 2.1.\r\n\r\nAt the same time, we will start producing a new System.Runtime.Intrinsics.Experimental NuGet package.  In order to continue using these APIs on .NET Core 2.1, a project will need to add a reference to this new package.\r\n\r\nAs its name implies, this package is experimental and should only be used for preview purposes.  It isn’t expected to be used in production scenarios.  Future version of .NET Core (after 2.1) will be allowed to break this package. This enables us respond to future feedback that requires the APIs to be modified.\r\n\r\nIn the future, when we are confident we have the intrinsic APIs right, we will stop producing the System.Runtime.Intrinsics.Experimental package. The platform intrinsics APIs will then be added back to Microsoft.NETCore.App and will be officially supported."},{"Id":"7273056222","Type":"IssuesEvent","CreatedAt":"2018-02-21T02:28:03","Actor":"KathleenDollard","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/57","RelatedDescription":"Opened issue \"Manually Uninstall .NET Core SDK 2.2.0-Preview Nightly Builds\" (#57) at dotnet/announcements","RelatedBody":"# Manually Uninstall .NET Core SDK 2.2.0-Preview Nightly Builds\r\n\r\n[A change in the version number strategy for .NET Core SDK](https://github.com/dotnet/designs/pull/29) resulted in some nightly builds having a higher version number. This higher version number will block the installation of the correct .NET Core SDK.\r\n\r\nIf you have installed nightly builds of the .NET Core SDK that start with version number that begin with `2.2.0-preview1`, you must manually uninstall these preview builds before later versions of the SDK with version numbers like 2.1.xxx will be available. This may have occurred by installing nightly builds of the .NET Core SDK or nightly builds of Visual Studio 15.5 Preview. \r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/cli #8652](https://github.com/dotnet/cli/issues/8652)\r\n\r\n## Details\r\n\r\n[We changed the version number strategy for .NET Core SDK](https://github.com/dotnet/designs/pull/29) as development was ongoing. Because of this, version numbers on the old scheme appeared in nightly builds. Unfortunately, these numbers are higher than the version numbers in the new scheme. All of the newer SDKs for .NET Core 2.1 will be ignored due to this higher version number; this includes newer nightly builds, public previews and eventual releases.\r\n\r\nThese older version numbers are similar to the following, with the last several different values in the last six digits:\r\n\r\n```\r\n2.2.0-preview1-008000\r\n```\r\n\r\nSince the newer versions are in the form:\r\n\r\n```\r\n2.1.300-preview1-008000\r\n```\r\n\r\n## Call to Action\r\n\r\nIf you have installed nightly builds. Please uninstall any .NET SDK versions that start with 2.2.0-preview1."},{"Id":"7253280422","Type":"IssuesEvent","CreatedAt":"2018-02-16T04:14:06","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/56","RelatedDescription":"Closed issue \"Can you help with this issue?\" (#56) at dotnet/announcements","RelatedBody":"https://stackoverflow.com/questions/48819198/weird-behavior-of-httpclienthandler-sslprotocol-property-in-net-framework-4-7-1\r\n"},{"Id":"7253090788","Type":"IssuesEvent","CreatedAt":"2018-02-16T02:41:24","Actor":"rudeGit","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/56","RelatedDescription":"Opened issue \"Can you help with this issue?\" (#56) at dotnet/announcements","RelatedBody":"https://stackoverflow.com/questions/48819198/weird-behavior-of-httpclienthandler-sslprotocol-property-in-net-framework-4-7-1\r\n"},{"Id":"7227221771","Type":"IssuesEvent","CreatedAt":"2018-02-10T18:30:42","Actor":"kasper3","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/55","RelatedDescription":"Closed issue \"Needs clarity on open / close source nature of product being announced\" (#55) at dotnet/announcements","RelatedBody":"On first page of this repository, it reads:\r\n\r\n> Subscribe to this repo to be notified of Announcements and changes in .NET Core.\r\n\r\nDoes that mean all announcements are related to .NET Core and all products being announced are are open sourced?\r\n\r\nIf there are announcements about the propitiatory or closed-source products, the products whose sources <b>in full*</b> are not accessible by public, should be marked as such either using a label (https://github.com/dotnet/announcements/labels), or clearly stated in text.\r\n\r\n#### * Source code including the build script that generates the package end user downloads from nuget or myget feeds\r\n\r\nOne example is https://github.com/dotnet/announcements/issues/30, where it is presented to user as if the product ILLink is in open, but the package https://dotnet.myget.org/feed/dotnet-core/package/nuget/Illink.Tasks is produced by script which are nowhere to b found in open. Read more at https://github.com/dotnet/core/issues/915#issuecomment-364645429"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7382494394","Type":"PullRequestEvent","CreatedAt":"2018-03-15T05:16:02","Actor":"JeremyKuhne","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16921","RelatedDescription":"Merged pull request \"Fix GetTempPath\" (#16921) at dotnet/coreclr","RelatedBody":"GetTempPath and GetTempFileName weren't updated to handle long paths.\r\nUpdate to use API properly and stop using StringBuilder. Also tweak\r\nNormalize to allow utilizing an existing Span as input.\r\n\r\ncc: @jkotas, @danmosemsft, @Anipik, @pjanotti "},{"Id":"7382240642","Type":"PullRequestEvent","CreatedAt":"2018-03-15T03:31:40","Actor":"echesakovMSFT","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16953","RelatedDescription":"Opened pull request \"Publish x86_arm/crossgen during Linux/arm build\" (#16953) at dotnet/coreclr","RelatedBody":"This PR adds compiling and publishing of x86_arm/crossgen (so called, cross-crossgen) to Linux/arm official build\r\n\r\nMerge **ONLY AFTER** dotnet/dotnet-buildtools-prereqs-docker#22 is resolved and official build images are updated\r\n"},{"Id":"7382067992","Type":"IssuesEvent","CreatedAt":"2018-03-15T02:29:34","Actor":"brianrob","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/14993","RelatedDescription":"Closed issue \"[ARM] SIGSEGV when enabling tracing on a Raspberry Pi\" (#14993) at dotnet/coreclr","RelatedBody":"Hi,\r\n\r\nI have a simple .NET Core application which I want to execute on Raspberry Pi. I'm noticing strange behaviours when using the ```HttpClient``` class, so I followed this [guide](http://blogs.microsoft.co.il/sasha/2017/03/30/tracing-runtime-events-in-net-core-on-linux/) to enable tracing events and collect them using LTTng with the purpose of filing an issue with detailed info.\r\n\r\nThe problem I'm facing now is that once I enable tracing, and then run my application, the SO tells me that a SIGSEGV has been produced. To isolate other problems, I'm reproducing this with a trivial .NET Core 2.0 \"Hello world\" app.\r\n\r\nThe steps to reproduce are these:\r\n1. Enable tracing via ```export COMPlus_EnableEventLog=1```\r\n2. Create a LTTng session that listens to all user-space events\r\n```\r\nlttng create mysession\r\nlttng enable-event -u -a\r\nlttng start\r\n```\r\n3. Run the application\r\n\r\nNotice that without having a LTTng session enabled (step 2), the problem is not reproduced.\r\n\r\nThis is the stacktrace that GDB gives me:\r\n\r\n```\r\n[Thread debugging using libthread_db enabled]\r\nUsing host libthread_db library \"/lib/arm-linux-gnueabihf/libthread_db.so.1\".\r\n[New Thread 0x7645c450 (LWP 2462)]\r\n[New Thread 0x75c5c450 (LWP 2463)]\r\n[New Thread 0x74f19450 (LWP 2464)]\r\n\r\nProgram received signal SIGSEGV, Segmentation fault.\r\n0x00000000 in ?? ()\r\n(gdb) bt\r\n#0  0x00000000 in ?? ()\r\n#1  0x7654ce1c in __event_probe__DotNETRuntime___RuntimeInformation (__tp_data=<optimized out>, length=<optimized out>, __data__=<optimized out>)\r\n    at /root/coreclr/bin/obj/Linux.arm.Release/Generated/eventprovider/lttng/./tpdotnetruntime.h:673\r\n#2  0x76998be2 in __tracepoint_cb_DotNETRuntime___RuntimeInformationStart (length=<optimized out>, __data__=<optimized out>)\r\n    at /root/coreclr/bin/obj/Linux.arm.Release/Generated/eventprovider/lttng/tpdotnetruntime.h:2673\r\n#3  FireEtXplatRuntimeInformationStart (ClrInstanceID=<optimized out>, Sku=<optimized out>, BclMajorVersion=<optimized out>, BclMinorVersion=<optimized out>,\r\n    BclBuildNumber=<optimized out>, BclQfeNumber=<optimized out>, VMMajorVersion=<optimized out>, VMMinorVersion=<optimized out>, VMBuildNumber=<optimized out>,\r\n    VMQfeNumber=<optimized out>, StartupFlags=<optimized out>, StartupMode=<optimized out>, CommandLine=<optimized out>, ComObjectGuid=<optimized out>,\r\n    RuntimeDllPath=<optimized out>) at /root/coreclr/bin/obj/Linux.arm.Release/Generated/eventprovider/lttng/eventprovdotnetruntime.cpp:4398\r\n#4  0x7679f59a in FireEtwRuntimeInformationStart (Sku=2, BclMajorVersion=4, BclMinorVersion=0, BclBuildNumber=0, BclQfeNumber=0, VMMajorVersion=4, VMMinorVersion=0,\r\n    VMBuildNumber=22220, VMQfeNumber=0, StartupFlags=0, ComObjectGuid=<optimized out>, RuntimeDllPath=0x7effe3c4 u\"/home/pi/netcore3/libcoreclr.so\",\r\n    ClrInstanceID=<optimized out>, StartupMode=<optimized out>, CommandLine=<optimized out>) at /root/coreclr/bin/obj/Linux.arm.Release/src/inc/clretwallmain.h:2741\r\n#5  ETW::InfoLog::RuntimeInformation (type=<optimized out>) at /root/coreclr/src/vm/eventtrace.cpp:4974\r\n#6  0x7671ce7a in EEStartupHelper (fFlags=<optimized out>) at /root/coreclr/src/vm/ceemain.cpp:770\r\n#7  0x7671c802 in operator() (this=<optimized out>, pfFlags=<optimized out>) at /root/coreclr/src/vm/ceemain.cpp:1236\r\n#8  EEStartup (fFlags=<optimized out>) at /root/coreclr/src/vm/ceemain.cpp:1238\r\n#9  0x7671c71e in EnsureEEStarted (flags=<optimized out>) at /root/coreclr/src/vm/ceemain.cpp:374\r\n#10 0x7669a714 in Start (this=<optimized out>) at /root/coreclr/src/vm/corhost.cpp:242\r\n#11 CorHost2::Start (this=<optimized out>) at /root/coreclr/src/vm/corhost.cpp:189\r\n#12 0x76681914 in coreclr_initialize (exePath=<optimized out>, appDomainFriendlyName=<optimized out>, propertyCount=<optimized out>, propertyKeys=<optimized out>,\r\n    propertyValues=<optimized out>, hostHandle=0x3ef20, domainId=0x7effe200) at /root/coreclr/src/dlls/mscoree/unixinterface.cpp:216\r\n#13 0x76c02b30 in coreclr::initialize(char const*, char const*, char const**, char const**, int, void**, unsigned int*) () from /home/pi/netcore3/libhostpolicy.so\r\n#14 0x76bfa700 in run(arguments_t const&) () from /home/pi/netcore3/libhostpolicy.so\r\n#15 0x76bfaf1e in corehost_main () from /home/pi/netcore3/libhostpolicy.so\r\n#16 0x76c88420 in execute_app(std::string const&, corehost_init_t*, int, char const**) () from /home/pi/netcore3/libhostfxr.so\r\n#17 0x76c8e726 in fx_muxer_t::read_config_and_execute(std::string const&, std::string const&, std::unordered_map<std::string, std::vector<std::string, std::allocator<std::string> >, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<std::string const, std::vector<std::string, std::allocator<std::string> > > > > const&, int, char const**, host_mode_t) () from /home/pi/netcore3/libhostfxr.so\r\nCannot access memory at address 0x597df800\r\n#18 0x7efff794 in ?? ()\r\nCannot access memory at address 0x597df800\r\nBacktrace stopped: previous frame identical to this frame (corrupt stack?)\r\n```\r\n\r\nContext details:\r\n- I installed the .NET Core runtime in my Pi following this [guide](https://blogs.msdn.microsoft.com/david/2017/07/20/setting_up_raspian_and_dotnet_core_2_0_on_a_raspberry_pi/)\r\n- Version of the runtime installed in Pi is ```2.0.4-servicing-25910-01``` (https://github.com/dotnet/core-setup)\r\n- I'm compiling the application from a Windows machine targeting the ```linux-arm``` platform. This machine has .NET Core SDK version 2.0.2\r\n- Device is a Raspberry Pi 3 Model B Rev 1.2\r\n- Installed OS is ```Linux raspberrypi 4.9.35-v7+ armv7l GNU/Linux```\r\n- ```LTTng``` compiled from source, in version 2.8.8\r\n- ```libunwind``` compiled from [source](https://github.com/libunwind/libunwind), in version 1.2\r\n"},{"Id":"7382067267","Type":"IssuesEvent","CreatedAt":"2018-03-15T02:29:19","Actor":"brianrob","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/15693","RelatedDescription":"Closed issue \"Dotnet 'myApp.dll' hang in lttng running on arm32\" (#15693) at dotnet/coreclr","RelatedBody":"Running a very framework dependent console application with the command 'dotnet myapp.dll' causes a hang running on a simple yocto image on an Rpi3 (arm32)\r\n\r\nRunning dotnet --info produces the expected output of \r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n\r\nbut running any application including a very basic app that simply writes to the console completely hangs with zero output to the terminal.\r\n\r\nRunning with COREHOST_TRACE=1 produces similar output to what is seen running the app on another Linux machine but it hangs before the expected line \"Property TRUSTED_PLATFORM_ASSEMBLIES = ....\"\r\n\r\nThe 'installation' has been from the binary release at [https://dotnetcli.blob.core.windows.net/dotnet/Runtime/2.0.0/dotnet-runtime-2.0.0-linux-arm.tar.gz](url)\r\n\r\nThe final few lines of output before hanging are\r\n\r\n`Considering entry [runtime.linux-arm.Microsoft.NETCore.DotNetHostPolicy/2.0.0/runtimes/linux-arm/native/libhostpolicy.so] and probe dir [/opt/dotnet/shared/Microsoft.NETCore.App/2.0.0]\r\n    Local path query exists /opt/dotnet/shared/Microsoft.NETCore.App/2.0.0/libhostpolicy.so\r\n    Probed deps json and matched '/opt/dotnet/shared/Microsoft.NETCore.App/2.0.0/libhostpolicy.so'\r\nThe resolved JIT path is '/opt/dotnet/shared/Microsoft.NETCore.App/2.0.0/libclrjit.so'\r\nCoreCLR path = '/opt/dotnet/shared/Microsoft.NETCore.App/2.0.0/libcoreclr.so', CoreCLR dir = '/opt/dotnet/shared/Microsoft.NETCore.App/2.0.0/'`\r\n\r\nAt this stage ctrl+c has no effect and the process needs to be killed to recover the terminal\r\n\r\nThe full output is attached along with the application\r\n\r\n[output.txt](https://github.com/dotnet/coreclr/files/1599325/output.txt)\r\n[testApp.zip](https://github.com/dotnet/coreclr/files/1599326/testApp.zip)\r\n"},{"Id":"7382038685","Type":"PullRequestEvent","CreatedAt":"2018-03-15T02:18:39","Actor":"brianrob","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16861","RelatedDescription":"Merged pull request \"Add EventSource TraceLogging Support for EventPipe\" (#16861) at dotnet/coreclr","RelatedBody":"Fixes #11939.\r\n\r\n - Uses the existing TypeAnalysis support and TraceLogging plumbing to determine the set of properties to write and their data serialization format.\r\n - Uses NameInfo, which is the object that stores the event identity to also store the EventPipe EventHandle.\r\n - Re-factors the EventPipe metadata creation path in EventSource into its own EventPipeMetadataGenerator class that can be used with both manifest-based and TraceLogging paths.\r\n - Adds basic tests for both manifest-based and tracelogging paths.\r\n - Does not modify the file-format version or required reader versions as the addition of struct serialization is strictly an add-on on top of primitive data-type support.  This explains why basic tests for tracelogging work without updating the version of TraceEvent used in the repo.  Previous versions of TraceEvent will fail to read nested structs with a NotSupportedException.\r\n\r\nAdding tests for Write<T> will require an update to TraceEvent to support parsing additions to the metadata format for nested structs.  Changes to TraceEvent are tracked in https://github.com/Microsoft/perfview/pull/597."},{"Id":"7382038672","Type":"IssuesEvent","CreatedAt":"2018-03-15T02:18:39","Actor":"brianrob","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/11939","RelatedDescription":"Closed issue \"EventPipe: Feature Request: Support EventSource RichPayload events\" (#11939) at dotnet/coreclr","RelatedBody":"Here is the sample code to emit richpayload events. \r\n\r\n[EventSource(Name = \"TestEventSource\", Guid = \"c68d147f-ede2-4960-af7d-aca72ae34807\")]\r\n    public class TestEventSource : EventSource\r\n    {\r\n        public class Keywords\r\n        {\r\n            public const EventKeywords Request = (EventKeywords)1;\r\n        }\r\n\r\n        public static TestEventSource Log = new TestEventSource();\r\n\r\n        private TestEventSource()\r\n        {\r\n        }\r\n        \r\n        public void RequestStart(int intArg, string strArg)\r\n        {\r\n            Console.WriteLine($\"{nameof(RequestStart)},{intArg},{strArg}\");\r\n            Write(\r\n                \"Request\", \r\n                new EventSourceOptions { Keywords = Keywords.Request, Opcode = EventOpcode.Start, Level = EventLevel.Informational },\r\n                new { IntArg = intArg, strArg = strArg }\r\n            );\r\n        }\r\n\r\n        public void RequestStop(int intArg, string strArg)\r\n        {\r\n            Console.WriteLine($\"{nameof(RequestStop)},{intArg},{strArg}\");\r\n            Write(\r\n                \"Request\", \r\n                new EventSourceOptions { Keywords = Keywords.Request, Opcode = EventOpcode.Stop, Level = EventLevel.Informational },\r\n                new { IntArg = intArg, strArg = strArg }\r\n            );\r\n        }        \r\n    } "},{"Id":"7381960429","Type":"PullRequestEvent","CreatedAt":"2018-03-15T01:51:20","Actor":"BruceForstall","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/16952","RelatedDescription":"Merged pull request \"Bump arm32 timeouts. Add arm32 test failures.\" (#16952) at dotnet/coreclr","RelatedBody":""}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7382357383","Type":"IssuesEvent","CreatedAt":"2018-03-15T04:17:54","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/8697","RelatedDescription":"Closed issue \"Resx files are not working for fsharp project\" (#8697) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n1. Create empty F# console project (.NET Core)\r\n2. Add `type Test = Test of string`\r\n3. Add Resources folder\r\n4. Add Resource `Test.en.resx` to Resources folder\r\n5. Build project\r\n\r\n## Expected  behavior\r\nVS build works\r\n`dotnet build` works\r\n\r\n## Actual behavior\r\nVS build works\r\n`dotnet build` doesn't work. \r\nresources.cs file with fsharp content is created and CS compiler errors are shown\r\n\r\n## Environment data\r\n.NET Command Line Tools (2.1.4)\r\n\r\nProduct Information:\r\n Version:            2.1.4\r\n Commit SHA-1 hash:  5e8add2190\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.4\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.5\r\n  Build    : 17373eb129b3b05aa18ece963f8795d65ef8ea54\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"7382089893","Type":"PullRequestEvent","CreatedAt":"2018-03-15T02:37:36","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8797","RelatedDescription":"Opened pull request \"Fix the badge for Linux-arm; CLI:master\" (#8797) at dotnet/cli","RelatedBody":"The badge for 'Linux-arm' should be: \"linux_arm_Release_version_badge.svg\" not \"linux_x64_Release_version_badge.svg\"\r\n\r\nFollow-up to PR: https://github.com/dotnet/cli/pull/8791\r\n"},{"Id":"7381995920","Type":"PullRequestEvent","CreatedAt":"2018-03-15T02:04:27","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8791","RelatedDescription":"Merged pull request \"Enable 'arm' builds in the CLI\" (#8791) at dotnet/cli","RelatedBody":"Enable Linux-arm builds in the CLI\r\n\r\n_BackwardsCompatibilityRuntimes.props_ \r\nDisable the backward compatible downloads for 'arm*'\r\n\r\n_BuildInfo.targets_ \r\nStraightforward logic for the 'Rid' and 'Architecture'\r\n\r\n_BundledRuntimes.props_ \r\nDisable most the runtime downloads for 'arm*'\r\n\r\n_Package.targets_ \r\nDisable 'GenerateInstallers' target for 'arm*'\r\nformatting...\r\n\r\n_Publish.targets \r\nBadge.targets \r\nRuntimeCoherence.targets_ \r\nDisable 'coherent' test and 'coherent' badge for 'arm*'\r\n\r\n_Test.targets_ \r\nDisable the tests for 'arm*'\r\n\r\n_redist.csproj_ \r\nDisable 'crossgen' for 'arm*'\r\n\r\n_CheckIfAllBuildsHavePublished.cs_ \r\nAdd the Linux-arm and Win-arm legs...\r\n\r\n_run-build.sh \r\nrun-build.ps1_\r\nEnable Architecture=arm*\r\nIf Architecture=arm*; install an x64 SDK\r\n\r\n**Testing:**\r\nFull set of 'private' VSO builds\r\nhttps://devdiv.visualstudio.com/DevDiv/Default/_build/index?_a=allDefinitions&path=%5CJBeisner%5C\r\n\r\n_On an ARM device:_\r\n\"./dotnet new\"\r\n\r\n\r\n**Follow-up:**\r\nCreate the 'arm' VSO build definitions"},{"Id":"7381890553","Type":"PullRequestEvent","CreatedAt":"2018-03-15T01:25:15","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8796","RelatedDescription":"Opened pull request \"Fix project type GUIDs when adding projects to solution files.\" (#8796) at dotnet/cli","RelatedBody":"This commit ensures the correct property (`ProjectTypeGuids`) is respected when\r\nadding a project to a solution file.\r\n\r\nAdditionally, we now error if a project type GUID cannot be determined rather\r\nthan incorrectly mapping to the C# project type.\r\n\r\nEnabled previously disabled tests that were waiting on upstream changes from\r\nMSBuild and F#.\r\n\r\nFixes #5131.\r\nFixes #7742.\r\n"},{"Id":"7381627273","Type":"PullRequestEvent","CreatedAt":"2018-03-14T23:50:36","Actor":"natemcmaster","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8795","RelatedDescription":"Opened pull request \"Upgrade to aspnetcore 2.1.0-preview2-30331 and pull aspnetcore for Alpine Linux\" (#8795) at dotnet/cli","RelatedBody":"cref https://github.com/aspnet/Universe/issues/833\r\n\r\nUpdates the SDK to bundle the Alpine version of ASP.NET Core instead of linux portable.\r\n\r\nFYI @muratg @pranavkm "}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7380383895","Type":"PullRequestEvent","CreatedAt":"2018-03-14T19:04:12","Actor":"ericstj","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/pull/499","RelatedDescription":"Closed pull request \"Use target path in FileNode for trimming logic\" (#499) at dotnet/standard","RelatedBody":"This prevents problems caused by dlls with the same name but different\r\ndestination directories, such as satellite assemblies. Previously\r\nthese would cause a crash in the trimming logic by causing different\r\nfiles with the same name to be inserted into a dictionary.\r\n\r\nThe logic to compute the target path was taken from the SDK:\r\nhttps://github.com/dotnet/sdk/blob/cd25d6bbfc2aac61cc790c511900427ac64fdaa8/src/Tasks/Common/src/ItemUtilities.cs#L117.\r\n\r\n@ericstj please review. Is there a better way to get the target path than duplicating code from the SDK?"},{"Id":"7380349165","Type":"PullRequestEvent","CreatedAt":"2018-03-14T18:57:21","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/674","RelatedDescription":"Merged pull request \"Update BuildTools to preview2-02612-03 (master)\" (#674) at dotnet/standard","RelatedBody":""},{"Id":"7380289958","Type":"IssuesEvent","CreatedAt":"2018-03-14T18:46:02","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/664","RelatedDescription":"Closed issue \".Net How to get Table alias name from GetSchemaTable() Executing query \" (#664) at dotnet/standard","RelatedBody":"Hi All,\r\nI have one task to get the table alias name from the sql Query. Im tried with GetSchemaTable().\r\nstring query = \"select A.id as ParentId,B.id as ChildId from Parent A,ChildB\";\r\nsqlCnn.Open();\r\nsqlCmd = new SqlCommand(query, sqlCnn);\r\nsqlReader = sqlCmd.ExecuteReader(CommandBehavior.KeyInfo);\r\nDataTable schemaTable = sqlReader.GetSchemaTable();\r\n\r\nIt's not returning the table alias but it return the Column alias.\r\nCan you please help me how to get the table alias name from executing query .\r\nPlease give me a solution it.\r\n\r\nThanks,\r\nEzra"},{"Id":"7380282004","Type":"IssuesEvent","CreatedAt":"2018-03-14T18:44:31","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/662","RelatedDescription":"Closed issue \"Standardizing XLIFF\" (#662) at dotnet/standard","RelatedBody":"I share @valdisiljuconoks this interest: https://github.com/Microsoft/XLIFF2-Object-Model/issues/28, and I think it's a good direction to support this standardized file format for a localization process.\r\n"},{"Id":"7380101883","Type":"IssuesEvent","CreatedAt":"2018-03-14T18:11:16","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/678","RelatedDescription":"Opened issue \"Add private fields information to netstandard ref\" (#678) at dotnet/standard","RelatedBody":"See https://github.com/dotnet/corefx/issues/6185 we need to update the netstandard ref to include some information about the private fields in structs so the compiler can do its job. "},{"Id":"7380073830","Type":"PullRequestEvent","CreatedAt":"2018-03-14T18:06:13","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/672","RelatedDescription":"Merged pull request \"Update Xamarin platform APIs to latest Dev 15.7\" (#672) at dotnet/standard","RelatedBody":"Fixes https://github.com/mono/mono/issues/7496"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7382527394","Type":"IssuesEvent","CreatedAt":"2018-03-15T05:28:14","Actor":"Anipik","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/28093","RelatedDescription":"Opened issue \"System.IO.Tests.EnumerableTests/EnumerateDirectories_NonBreakingSpace failing on OSX\" (#28093) at dotnet/corefx","RelatedBody":"```\r\nAssert.Equal() Failure\r\nExpected: String[] [\\\"/tmp/EnumerableTests_zyuc5nbu.hrc/EnumerateDirecto\\\"..., \\\"/tmp/EnumerableTests_zyuc5nbu.hrc/EnumerateDirecto\\\"...]\r\nActual:   FileSystemEnumerable<String> [\\\"/tmp/EnumerableTests_zyuc5nbu.hrc/EnumerateDirecto\\\"..., \\\"/tmp/EnumerableTests_zyuc5nbu.hrc/EnumerateDirecto\\\"...]\r\n```\r\nhttps://mc.dot.net/#/user/Anipik/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/26b967e2aab520a0da79c316024360f635dc937d/workItem/System.IO.FileSystem.Tests/analysis/xunit/System.IO.Tests.EnumerableTests~2FEnumerateDirectories_NonBreakingSpace\r\n\r\ncc @JeremyKuhne @danmosemsft "},{"Id":"7382453506","Type":"PullRequestEvent","CreatedAt":"2018-03-15T04:59:56","Actor":"jkotas","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/28092","RelatedDescription":"Opened pull request \"Keep marshalled delegate alive while it is used\" (#28092) at dotnet/corefx","RelatedBody":"Fixes #28063"},{"Id":"7382442977","Type":"IssuesEvent","CreatedAt":"2018-03-15T04:55:27","Actor":"TigerBoom","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/28091","RelatedDescription":"Opened issue \"System.DirectoryServices.DirectorySearcher LDAP_MATCHING_RULE_IN_CHAIN search term escaping is broken\" (#28091) at dotnet/corefx","RelatedBody":"When performing a LDAP_MATCHING_RULE_IN_CHAIN search using System.DirectoryServices.DirectorySearcher the standard escaping of the search term does not work.\r\nStandard LDAP search term escaping: https://tools.ietf.org/search/rfc2254\r\n\r\nFor this example, assume the DN is: CN=Rees\\, John,DC=big,DC=com\r\nNotice the string representation of the DN already contains a backslash.\r\nIf this DN is used as a search term, then the \\ should be escaped as \\5C\r\n\r\nIndeed a normal attribute search using normal search term escaping works as expected by using the filter:\r\n`(member=CN=Rees\\5C, John,DC=big,DC=com)\r\n`\r\nHowever a recursive search using LDAP_MATCHING_RULE_IN_CHAIN returns no results, but throws no exception:\r\n`(member:1.2.840.113556.1.4.1941:=CN=Rees\\5C, John,DC=big,DC=com)\r\n`\r\nStrangely, performing the same recursive search but without escaping \\ to \\5C does return results:\r\n`(member:1.2.840.113556.1.4.1941:=CN=Rees\\, John,DC=big,DC=com)\r\n`\r\nA full working PowerShell example is\r\n\r\n```\r\nfunction Find-AdObjects([string]$Filter) {\r\n    $DirectorySearcher = New-Object System.DirectoryServices.DirectorySearcher\r\n    $DirectorySearcher.SearchRoot = New-Object System.DirectoryServices.DirectoryEntry\r\n    $DirectorySearcher.SearchScope = [System.DirectoryServices.SearchScope]::Subtree\r\n    $DirectorySearcher.PropertiesToLoad.Add('distinguishedname') > $null\r\n    $DirectorySearcher.PageSize = 100\r\n    $DirectorySearcher.Filter = $Filter\r\n    $SearchResultCollection = $DirectorySearcher.FindAll()\r\n    foreach ($r in $SearchResultCollection) {\r\n        $r.Properties['distinguishedname']\r\n    }\r\n    $SearchResultCollection.Dispose()\r\n    $DirectorySearcher.Dispose()\r\n}\r\n$UserDn        = 'CN=Rees\\, John,OU=Tier3,DC=big,DC=com'\r\n$EscapedUserDn = 'CN=Rees\\5C, John,OU=Tier3,DC=big,DC=com'\r\n\r\n# Returns expected results with escaped search term\r\nFind-AdObjects \"(&(member=$EscapedUserDn))\"\r\n# Returns same results even though search term is NOT escaped correctly\r\nFind-AdObjects \"(&(member=$UserDn))\"\r\n# Returns NO results even though search term is escaped correctly\r\nFind-AdObjects \"(&(member:1.2.840.113556.1.4.1941:=$EscapedUserDn))\"\r\n# Returns recursive results even though search term is NOT escaped correctly\r\nFind-AdObjects \"(&(member:1.2.840.113556.1.4.1941:=$UserDn))\"\r\n\r\n```\r\n\r\n\r\n\r\n\r\nThe above is copied from my stackoverflow answer https://stackoverflow.com/a/47805814/37572\r\n\r\n"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7382234242","Type":"IssuesEvent","CreatedAt":"2018-03-15T03:29:21","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/25487","RelatedDescription":"Opened issue \"Tuple equality: remember which temps are never null and optimize lowering further\" (#25487) at dotnet/roslyn","RelatedBody":"\r\nIn `RewriteTupleNestedOperators`:\r\n```C#\r\n            // PROTOTYPE(tuple-equality) Consider if optimizations from TrivialLiftedComparisonOperatorOptimizations can be applied\r\n...\r\n\r\n            // Note: left and right are either temps or `null`, so we don't have detailed information to tell us a nullable always has a value\r\n            // PROTOTYPE(tuple-equality) We could save this information when the temps are created\r\n            var isLeftNullable = left.Kind != BoundKind.TupleLiteral && left.Type.IsNullableType();\r\n            if (isLeftNullable)\r\n            {\r\n\r\n```"},{"Id":"7382184754","Type":"IssuesEvent","CreatedAt":"2018-03-15T03:11:37","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/25292","RelatedDescription":"Closed issue \"Introduce Local: trigger the refactoring with a cursor position but no selection\" (#25292) at dotnet/roslyn","RelatedBody":"Currently, you have to select the whole expression that you want to introduce a local for. For example, `[|x.Field.Method()|]`.\r\nBut I think in most cases, if not all, it should be possible to trigger from just a cursor position, such as `x.Field.Meth$$od()`."},{"Id":"7382155795","Type":"IssuesEvent","CreatedAt":"2018-03-15T03:01:09","Actor":"yaakov-h","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/25485","RelatedDescription":"Opened issue \"VS2017 crashes when parsing C#  Span code\" (#25485) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\n\r\nMicrosoft Visual Studio Enterprise 2017\r\nVersion 15.6.2\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Create a new Class Library (Classic Desktop) project\r\n2. Add a NuGet package reference to System.Memory (4.5.x pre-release)\r\n3. Modify Class1.cs to contain the following:\r\n\r\n```csharp\r\nusing System;\r\n\r\nnamespace ClassLibrary1\r\n{\r\n    public class Class1\r\n    {\r\n        public void Foo(Thing[] first, Thing[] second)\r\n        {\r\n            var x = first[0];\r\n        }\r\n    }\r\n\r\n    public struct Thing { }\r\n}\r\n```\r\n\r\n4. On line 7, change the first `Thing[]` to `Span<Thing>[]`\r\n\r\n**Expected Behavior**:\r\n\r\n```error CS0611: Array elements cannot be of type 'Span<Thing>'```\r\n\r\n**Actual Behavior**:\r\n\r\nEntire Visual Studio IDE locks up and eventually crashes.\r\n\r\nException:\r\n\r\n```\r\nSystem.InvalidOperationException\r\n  HResult=0x80131509\r\n  Message=Unexpected value 'ArrayAccess expression of System.Span<ClassLibrary1.Thing> type' of type 'System.String'\r\n  Source=Microsoft.CodeAnalysis.CSharp\r\n  StackTrace:\r\n   at Microsoft.CodeAnalysis.CSharp.Binder.GetValEscape(BoundExpression expr, UInt32 scopeOfTheContainingExpression)\r\n   at Microsoft.CodeAnalysis.CSharp.Binder.BindVariableDeclaration(SourceLocalSymbol localSymbol, LocalDeclarationKind kind, Boolean isVar, VariableDeclaratorSyntax declarator, TypeSyntax typeSyntax, TypeSymbol declTypeOpt, AliasSymbol aliasOpt, DiagnosticBag diagnostics, CSharpSyntaxNode associatedSyntaxNode)\r\n   at Microsoft.CodeAnalysis.CSharp.Binder.BindDeclarationStatementParts(LocalDeclarationStatementSyntax node, DiagnosticBag diagnostics)\r\n   at Microsoft.CodeAnalysis.CSharp.Binder.BindStatement(StatementSyntax node, DiagnosticBag diagnostics)\r\n   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.IncrementalBinder.BindStatement(StatementSyntax node, DiagnosticBag diagnostics)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.Bind(Binder binder, CSharpSyntaxNode node, DiagnosticBag diagnostics)\r\n   at Microsoft.CodeAnalysis.CSharp.MethodBodySemanticModel.Bind(Binder binder, CSharpSyntaxNode node, DiagnosticBag diagnostics)\r\n   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetBoundNodes(CSharpSyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetLowerBoundNode(CSharpSyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetBoundNodes(CSharpSyntaxNode node, CSharpSyntaxNode& bindableNode, BoundNode& lowestBoundNode, BoundNode& highestBoundNode, BoundNode& boundParent)\r\n   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetSymbolInfoWorker(CSharpSyntaxNode node, SymbolInfoOptions options, CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.CSharp.SyntaxTreeSemanticModel.GetSymbolInfoWorker(CSharpSyntaxNode node, SymbolInfoOptions options, CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetSymbolInfo(ExpressionSyntax expression, CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetSymbolInfo(SemanticModel semanticModel, ExpressionSyntax expression, CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.CSharp.Classification.Classifiers.NameSyntaxClassifier.ClassifyTypeSyntax(NameSyntax name, SemanticModel semanticModel, ArrayBuilder`1 result, CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.CSharp.Classification.Classifiers.NameSyntaxClassifier.AddClassifications(SyntaxNode syntax, SemanticModel semanticModel, ArrayBuilder`1 result, CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.Classification.AbstractSyntaxClassificationService.Worker.ClassifyNode(SyntaxNode syntax)\r\n   at Microsoft.CodeAnalysis.Classification.AbstractSyntaxClassificationService.Worker.ProcessNodes()\r\n   at Microsoft.CodeAnalysis.Classification.AbstractSyntaxClassificationService.Worker.Classify(Workspace workspace, SemanticModel semanticModel, TextSpan textSpan, ArrayBuilder`1 list, Func`2 getNodeClassifiers, Func`2 getTokenClassifiers, CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.Classification.AbstractSyntaxClassificationService.<AddSemanticClassificationsAsync>d__5.MoveNext()\r\n```"},{"Id":"7382101818","Type":"PullRequestEvent","CreatedAt":"2018-03-15T02:42:03","Actor":"JieCarolHu","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/25484","RelatedDescription":"Opened pull request \"Use modern Tooltips API\" (#25484) at dotnet/roslyn","RelatedBody":"<details><summary>Ask Mode template not completed</summary>\r\n\r\n<!-- This template is not always required. If you aren't sure about whether it's needed or want help filling out the sections,\r\nsubmit the pull request and then ask us for help. :) -->\r\n\r\n### Customer scenario\r\n\r\nWhat does the customer do to get into this situation, and why do we think this\r\nis common enough to address for this release.  (Granted, sometimes this will be\r\nobvious \"Open project, VS crashes\" but in general, I need to understand how\r\ncommon a scenario is)\r\n\r\n### Bugs this fixes\r\n\r\n(either VSO or GitHub links)\r\n\r\n### Workarounds, if any\r\n\r\nAlso, why we think they are insufficient for RC vs. RC2, RC3, or RTW\r\n\r\n### Risk\r\n\r\nThis is generally a measure our how central the affected code is to adjacent\r\nscenarios and thus how likely your fix is to destabilize a broader area of code\r\n\r\n### Performance impact\r\n\r\n(with a brief justification for that assessment (e.g. \"Low perf impact because no extra allocations/no complexity changes\" vs. \"Low\")\r\n\r\n### Is this a regression from a previous update?\r\n\r\n### Root cause analysis\r\n\r\nHow did we miss it?  What tests are we adding to guard against it in the future?\r\n\r\n### How was the bug found?\r\n\r\n(E.g. customer reported it vs. ad hoc testing)\r\n\r\n### Test documentation updated?\r\n\r\nIf this is a new non-compiler feature or a significant improvement to an existing feature, update https://github.com/dotnet/roslyn/wiki/Manual-Testing once you know which release it is targeting.\r\n\r\n</details>\r\n"},{"Id":"7382029748","Type":"PullRequestEvent","CreatedAt":"2018-03-15T02:15:32","Actor":"agocke","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/25481","RelatedDescription":"Merged pull request \"Merge dev15.6.x to dev15.6.x-vs-deps\" (#25481) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from dev15.6.x into dev15.6.x-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev15.6.x-to-dev15.6.x-vs-deps\ngit reset --hard upstream/dev15.6.x-vs-deps\ngit merge upstream/dev15.6.x\n# Fix merge conflicts\ngit commit\ngit push merges/dev15.6.x-to-dev15.6.x-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7382129575","Type":"PullRequestEvent","CreatedAt":"2018-03-15T02:52:08","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5549","RelatedDescription":"Merged pull request \"Merge changes from TFS\" (#5549) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"7382107063","Type":"PullRequestEvent","CreatedAt":"2018-03-15T02:43:54","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5549","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#5549) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"7381542461","Type":"PullRequestEvent","CreatedAt":"2018-03-14T23:23:32","Actor":"Anipik","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5548","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5548) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7381191537","Type":"PullRequestEvent","CreatedAt":"2018-03-14T21:51:26","Actor":"A-And","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5329","RelatedDescription":"Merged pull request \"Enable CoreFX tests on CoreRT\" (#5329) at dotnet/corert","RelatedBody":"Dupe of #5287 - can't reopen the PR because of commit history. Adresses #5059  \r\nAddressed the comments on the last PR; Added Unix scripts.\r\n\r\nThe current blocker for is getting the CoreFX.Private.TestUtilities project published as a NuGet package.\r\nAdditionally - native assertions will cause the XUnit runner to crash - e.g. \r\n\r\nhttps://github.com/dotnet/corert/blob/3615b994ac4435bb77d865ef7ba2fd7ba8b09813/src/Native/Runtime/windows/CoffNativeCodeManager.cpp#L375-L376\r\n\r\nwill be called when executing System.Runtime.Tests and freeze the executable until the user hits Ctrl-C. Do we need a way around errors like this? \r\n\r\n"},{"Id":"7381125223","Type":"PullRequestEvent","CreatedAt":"2018-03-14T21:36:21","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5548","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5548) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7376309348","Type":"PullRequestEvent","CreatedAt":"2018-03-14T05:57:03","Actor":"sergiy-k","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5545","RelatedDescription":"Merged pull request \"Add Hello World console app sample\" (#5545) at dotnet/corert","RelatedBody":"This sample minimizes the number of steps needed to try CoreRT.\r\n\r\nAlso adding a couple pointers to the repo's README.md."},{"Id":"7375834911","Type":"PullRequestEvent","CreatedAt":"2018-03-14T02:49:31","Actor":"tarekgh","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5547","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5547) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7375681026","Type":"PullRequestEvent","CreatedAt":"2018-03-14T01:55:11","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5547","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5547) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7380794525","Type":"IssuesEvent","CreatedAt":"2018-03-14T20:28:38","Actor":"multiarc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/2045","RelatedDescription":"Opened issue \"Building and running project for net462 runtime\" (#2045) at dotnet/sdk","RelatedBody":"Issue might be related to https://github.com/dotnet/sdk/issues/1488\r\nThere are several reproductions of the issue. The test package for the issue is `cloudscribe.Web.Pagination` https://www.nuget.org/packages/cloudscribe.Web.Pagination/1.1.4, which is targeting `netstandard1.6` only; startup project `A` target is `net462` as well as referenced project `B`.\r\n\r\nThe issue might be due to screwed up package, wrong target (why if so?) but it's not clear by error messages or behavior.\r\n\r\nhttps://github.com/multiarc/SDKRepro/branches\r\n\r\n## global.json used to specify SDK version 1.1.8\r\n\r\n`build_fail` -- not able to build.\r\nError messages is not clear what to do, all packages including framework assemblies appeared with warning mark.\r\n\r\n- ```MSB4062\tThe \"NETBuildExtensionsError\" task could not be loaded from the assembly C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\MSBuild\\Microsoft\\Microsoft.NET.Build.Extensions\\\\tools\\net46\\Microsoft.NET.Build.Extensions.Tasks.dll.  Confirm that the <UsingTask> declaration is correct, that the assembly and all its dependencies are available, and that the task contains a public class that implements Microsoft.Build.Framework.ITask.\tA\tC:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\MSBuild\\Microsoft\\Microsoft.NET.Build.Extensions\\Microsoft.NET.Build.Extensions.NETFramework.targets\t65```\r\n- ```Cannot find project info for 'C:\\Docs\\Work\\SDKRepro\\src\\B\\B.csproj'. This can indicate a missing project reference.\tA\tC:\\Program Files\\dotnet\\sdk\\1.1.8\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.NET.Sdk.targets\t92```\r\n\r\n`run_fail` -- able to build using `<DependsOnNETStandard>netstandard1.6</DependsOnNETStandard>`, cannot start (System.Linq 4.1.0.0 assembly cannot load)\r\n\r\n`master` -- completely fine project, builds and starts up no problem, just an example without package reference\r\n\r\n## global.json is removed\r\n\r\n`no_global_run_fail` -- same as run_fail\r\n\r\n`no_global_another_run_fail` -- same as build_fail but magically able to build, cannot start \r\ndue to Microsoft.CSharp assembly cannot load\r\n\r\n## SDK Versions\r\n\r\n```\r\n.NET Command Line Tools (2.1.101)\r\n\r\nProduct Information:\r\n Version:            2.1.101\r\n Commit SHA-1 hash:  6c22303bf0\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.101\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.6\r\n  Build    : 74b1c703813c8910df5b96f304b0f2b78cdf194d\r\n```\r\n\r\n```\r\n.NET Command Line Tools (1.1.8)\r\n\r\nProduct Information:\r\n Version:            1.1.8\r\n Commit SHA-1 hash:  227be613d2\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\1.1.8\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.6\r\n  Build    : 74b1c703813c8910df5b96f304b0f2b78cdf194d\r\n```"},{"Id":"7380659151","Type":"IssuesEvent","CreatedAt":"2018-03-14T20:00:49","Actor":"JamesNK","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/2044","RelatedDescription":"Opened issue \"The \"ResolvePackageAssets\" task failed unexpectedly.\" (#2044) at dotnet/sdk","RelatedBody":"I am using version `2.1.300-preview2-008251` of the SDK and I am getting this failure multiple times when building inside VS. Building from the command line completes successfully.\r\n\r\n```\r\nSeverity\tCode\tDescription\tProject\tFile\tLine\tSuppression State\r\nError\tMSB4018\tThe \"ResolvePackageAssets\" task failed unexpectedly.\r\nSystem.ArgumentNullException: Value cannot be null.\r\nParameter name: path1\r\n   at System.IO.Path.Combine(String path1, String path2)\r\n   at Microsoft.NET.Build.Tasks.ResolvePackageAssets.RaisePackageAssets[T](LockFileTarget target, Func`2 getAssets, Func`2 filter, Action`2 setup)\r\n   at Microsoft.NET.Build.Tasks.ResolvePackageAssets.ExecuteCore()\r\n   at Microsoft.NET.Build.Tasks.TaskBase.Execute()\r\n   at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute()\r\n   at Microsoft.Build.BackEnd.TaskBuilder.<ExecuteInstantiatedTask>d__26.MoveNext()\tSocialWeather\tC:\\Users\\James\\.dotnet\\x64\\sdk\\2.1.300-preview2-008251\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.PackageDependencyResolution.targets\t201\t\r\n```\r\n\r\nFailing source: https://github.com/aspnet/SignalR/commit/4b666dfa856a7600205ab488a7ad4c8facbe7f6e\r\n\r\nOpen SignalR.sln in 15.6 and rebuild solution for the error.\r\n\r\n[buildlogs.zip](https://github.com/dotnet/sdk/files/1812858/buildlogs.zip)\r\n\r\n"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"971915245378715648","CreatedAt":"2018-03-09T01:07:06+00:00","UserScreenname":"dotnet","Text":".NET Framework 4.7.2 Developer Pack Early Access build 3056 is available! https://t.co/OjVLK9nv9f","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":39,"FavoriteCount":28,"RawContent":null}]}},"RunOn":"2018-03-15T05:30:21.7764667Z","RunDurationInMilliseconds":8732}