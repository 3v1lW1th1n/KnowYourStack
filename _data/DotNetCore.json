{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing Entity Framework Core 3.0 Preview 9 and Entity Framework 6.3 Preview 9","PublishedOn":"2019-09-05T00:25:11+00:00","CommentsCount":9,"FacebookCount":0,"Summary":"The Preview 9 versions of the EF Core 3.0 package and the EF 6.3 package are now available for download from nuget.org.\nThese are the last planned previews before we release the final versions later...","Href":"https://devblogs.microsoft.com/dotnet/announcing-entity-framework-core-3-0-preview-9-and-entity-framework-6-3-preview-9/","RawContent":null},{"Title":"Announcing .NET Core 3.0 Preview 9","PublishedOn":"2019-09-04T19:00:55+00:00","CommentsCount":13,"FacebookCount":0,"Summary":"Today, we&#8217;re announcing .NET Core 3.0 Preview 9. Just like with Preview 8, we&#8217;ve focused on polishing .NET Core 3.0 for a final release and aren&#8217;t adding new features. If these final...","Href":"https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0-preview-9/","RawContent":null},{"Title":"Hardware Intrinsics in .NET Core","PublishedOn":"2019-09-03T22:35:55+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"Several years ago, we decided that it was time to support SIMD code in .NET. We introduced the System.Numerics namespace with Vector2, Vector3, Vector4, Vector&#60;T&#62;, and related types. These...","Href":"https://devblogs.microsoft.com/dotnet/hardware-intrinsics-in-net-core/","RawContent":null},{"Title":"Announcing ML.NET 1.4 Preview and Model Builder updates (Machine Learning for .NET)","PublishedOn":"2019-09-03T18:00:35+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"We are excited to announce ML.NET 1.4 Preview and updates to Model Builder and CLI.\nML.NET is an open-source and cross-platform machine learning framework for .NET developers. ML.NET also includes...","Href":"https://devblogs.microsoft.com/dotnet/announcing-ml-net-1-4-preview-and-model-builder-updates-machine-learning-for-net/","RawContent":null},{"Title":"Join us for .NET Conf 2019, Sept 23-25","PublishedOn":"2019-09-03T17:51:17+00:00","CommentsCount":6,"FacebookCount":0,"Summary":".NET Conf is back again this year and will be live streaming to a device near you September 23-25 on www.dotnetconf.net! .NET Conf is a FREE, 3 day virtual developer event co-organized by the .NET...","Href":"https://devblogs.microsoft.com/dotnet/join-us-for-net-conf-2019-sept-23-25/","RawContent":null},{"Title":".NET Framework August 30, 2019 Cumulative Update for Windows 10 version 1903","PublishedOn":"2019-08-30T17:00:13+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The August 2019 Cumulative Update for .NET Framework 3.5 and 4.8 on Windows 10 version 1903 was released.\nQuality and Reliability\nThis release contains the following quality and reliability...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-august-30-2019-cumulative-update-for-windows-10-version-1903/","RawContent":null},{"Title":"How the .NET Team uses Azure Pipelines to produce Docker Images","PublishedOn":"2019-08-28T16:30:06+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Producing Docker images for .NET might not seem like that big of a deal.  Once you’ve got a Dockerfile defined, just run &#8220;docker build&#8220; and &#8220;docker push&#8220; and you’re done,...","Href":"https://devblogs.microsoft.com/dotnet/how-the-net-team-uses-azure-pipelines-to-produce-docker-images/","RawContent":null},{"Title":"Visual Studio Tips and Tricks: Increasing your Productivity for .NET","PublishedOn":"2019-08-22T17:20:27+00:00","CommentsCount":16,"FacebookCount":0,"Summary":"The .NET team is constantly thinking of new ways to make developers more productive. We&#8217;ve been working hard over the past year to take the feedback you&#8217;ve sent us and turn it into tools...","Href":"https://devblogs.microsoft.com/dotnet/visual-studio-tips-and-tricks-increasing-your-productivity-for-net/","RawContent":null},{"Title":"Messaging Practices","PublishedOn":"2019-08-22T16:00:21+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This post is a collection of content from David Boike from the Particular.net blog calling out some common problems and solutions for building message based distributed systems. They are relevant to...","Href":"https://devblogs.microsoft.com/dotnet/messaging-practices/","RawContent":null},{"Title":"Hey .NET! Have you tried ML.NET?","PublishedOn":"2019-08-21T15:00:51+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"ML.NET is an open source and cross-platform machine learning framework made for .NET developers.\nUsing ML.NET you can easily build custom machine learning models for scenarios like sentiment analysis,...","Href":"https://devblogs.microsoft.com/dotnet/hey-net-have-you-tried-ml-net/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"10123005051","Type":"IssuesEvent","CreatedAt":"2019-07-31T19:23:23","Actor":"MeikTranel","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/issues/148","RelatedDescription":"Opened issue \"Clarify guidelines in regards to Options and Requirements\" (#148) at dotnet/foundation","RelatedBody":"I'd be interested in which part of the project submission guidelines is optional and which are deal breaker requirements.\r\n\r\n- Is the Role Matrix laid out an absolute or (as can be read between the lines) just a preset, which may be subject to individual projects needs?\r\n- Is it a strong requirement that the project uses the contributor covenant CoC?"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"10348207363","Type":"IssuesEvent","CreatedAt":"2019-09-04T19:14:06","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/120","RelatedDescription":"Opened issue \".NET Core 3.0 Preview 9\" (#120) at dotnet/announcements","RelatedBody":".NET Core Preview 9 released today. https://github.com/dotnet/core/issues/3304 has been opened for discussion. \r\n\r\n[Release Notes](https://github.com/dotnet/core/blob/master/release-notes/3.0/preview/3.0.0-preview9.md)\r\n[Download](https://github.com/dotnet/core/blob/master/release-notes/3.0/preview/3.0.0-preview9-download.md)\r\n\r\n**Blog posts**\r\n\r\n[.NET Core](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0-preview-9/)\r\n[ASP.NET Core](https://devblogs.microsoft.com/aspnet/asp-net-core-and-blazor-updates-in-net-core-3-0-preview-9/)\r\n[EF Core](https://devblogs.microsoft.com/dotnet/announcing-entity-framework-core-3-0-preview-9-and-entity-framework-6-3-preview-9/)\r\n\r\nPlease report any issues you find with 3.0.0 Preview 9, either responding to this issue, creating a new issue or creating a new issue in one of the following repos:\r\n\r\n* [aspnet/Home](https://github.com/aspnet/Home) - for ASP.NET Core questions\r\n* [aspnet/EntityFrameworkCore](https://github.com/aspnet/EntityFrameworkCore) - for Entity Framework Core questions\r\n* [dotnet/cli](https://github.com/dotnet/cli/issues) - for CLI tools and questions\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues) - for API issues and questions\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues) - for runtime issues\r\n* [dotnet/core-setup](https://github.com/dotnet/core-setup/issues) - for installer issues\r\n* [dotnet/winforms](https://github.com/dotnet/winforms/issues) - for Winforms issues\r\n* [dotnet/wpf](https://github.com/dotnet/wpf/issues) - for WPF issues\r\n* [nuget/home](https://github.com/nuget/home/issues) - for NuGet questions and issues"},{"Id":"10212614045","Type":"IssuesEvent","CreatedAt":"2019-08-14T19:54:26","Actor":"stephentoub","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/119","RelatedDescription":"Opened issue \"Consolidating .NET GitHub repos\" (#119) at dotnet/announcements","RelatedBody":"Over the next few months, we plan to consolidate several of the foundational repositories of .NET Core, including dotnet/coreclr and dotnet/corefx.\r\n\r\n.NET’s repository structure on GitHub was initially created in a fairly fine-grained manner, with the aim of enabling runtime agility and increased developer productivity.  However, this separation has led to a variety of complications for contributors and maintainers alike.  For example:\r\n- **Confusion about where issues should be opened.**  It’s not always clear in which repo an issue should be reported, complicated by the fact that some implementations actually span repositories (e.g. a type might be exposed through a reference assembly and have its tests in corefx but actually be implemented in System.Private.CoreLib in coreclr).\r\n- **Difficulty sharing source.**  System.Private.CoreLib is intricately connected to the rest of the runtime, and thus has lived with the runtime code.  That, however, means that although corefx has been intended as the place to share as much core library code as possible across any underlying runtime, we’ve needed to keep a significant body of code in System.Private.CoreLib, which then has meant it’s needed to be “mirrored” to each runtime repo (coreclr, corert, mono) that needs to consume it as source; similarly, corefx has similarly required access to much of that source, for example to use the same interop DllImports that are employed elsewhere in the runtimes.  The automatic mirror that shares this source needs to be maintained, and even when it has been, it’s often led to lag.  It’s also complicated developer processes, where to validate a change in one repo generally requires manually mirroring the code to other local repos in order to validate the change and ensure merging into one repo won’t break the others.\r\n- **PRs spanning multiple repos.**  Because the runtime, CoreLib, and the core libraries are all intricately linked, changing runtime behaviors, adding new APIs, or changing various build processes (e.g. improving static analysis) often requires multiple PRs carefully staged across time and multiple repos.  For example, to add a new method to a type like Dictionary<>, a developer must first make the source changes in her local coreclr repo and the test and reference assembly changes in her local corefx repo.  When satisfied with the fix, the developer must submit a PR to coreclr as well as a PR to corefx, the latter of which will fail.  Eventually the coreclr PR will be merged, and the changes will mirror to the other runtimes that also require the update.  Eventually those mirror PRs will be merged, and builds will be created containing the fix for each runtime.  At some point later those builds will be consumed into the corefx repo, after which point the original corefx PR can be re-validated and eventually merged.  That’s the best case; things get more complicated in situations where there are bidirectional dependencies.\r\n- **Building an installable runtime.** Self-hosting a custom built .NET requires intricate knowledge of how all the repos work and interact.  A developer can’t just clone a single repo, make a desired change, and easily produce an installer.\r\n- **Consistency.**  One goal we had for more fine-grained repos was to enable isolation and independence for teams working within each repo’s confines, but this has led to non-trivial duplication of effort on things like build systems and CI, and then the resulting lack of consistency as each system ends up diverging from the others.\r\n\r\nThe issues go beyond the runtime.  For example, the ASP.NET maintainers and community did a great job in the past year or so consolidating from ~55 repos down to ~5 repos, but that’s still more repos than is desirable, leading to similar issues as cited above for the runtime.  On top of that, these ASP.NET repositories are in the aspnet GitHub org, which adds an additional set of issues, for example:\r\n- **Complications moving issues between repos.**  If a developer opens an issue in aspnet/aspnetcore and it’s determined that the cause of the issue is actually in dotnet/corefx, there is no GitHub mechanism to enable easily moving that issue across the aspnet to dotnet organizational boundary.\r\n- **Permissions.** Each organization’s permissions end up needing to be managed and maintained separately.\r\n\r\nThe issues extend into tooling as well.  For example, we currently have multiple repositories that all logically make up the dotnet CLI, but actually creating a working installer spans multiple repos.\r\n\r\n### Plan\r\n\r\nTo address these issues, we’re planning to make some changes to our repository structure:\r\n- **dotnet/platform.**  We plan to combine dotnet/coreclr, dotnet/corefx, dotnet/corert, dotnet/core-setup, and the relevant portions of mono/mono into a new dotnet/platform repo.  Everything needed to build and produce the Microsoft.NETCore.App shared framework will be in this repo.  We will no longer suffer from the complications of source mirroring.  Features like changing runtime behavior or adding an API will no longer require a complicated dance across multiple repos.  Etc.\r\n- **dotnet/aspnetcore.**  We plan to move the existing aspnet/aspnetcore repository into the dotnet organization.  Along with that, we aim to combine a variety of the other aspnet repositories into aspnetcore, such as aspnet/blazor.  Whether repos like entityframeworkcore remain separate or combined remains an open question.  A goal is that, just as dotnet/platform will be responsible for the creation of Microsoft.NETCore.App, dotnet/aspnetcore will be responsible for the creation of Microsoft.AspNETCore.App.\r\n- **dotnet/cli.**  We plan to combine dotnet/toolset and dotnet/sdk into the dotnet/cli repo.\r\n\r\n## To discuss these plans, please comment on the corresponding issue at https://github.com/dotnet/coreclr/issues/26175.\r\n\r\n### FAQ\r\n\r\n#### Why are we merging repos?\r\n\r\nWe believe we can significantly improve several aspects of .NET on GitHub by combining repos, benefiting both maintainers and contributors.  These improvements will manifest in a variety of ways, such as in better issue management, much easier models of contribution, and easier and faster ways to build and install the resulting bits.\r\n\r\n####  What will happen to the aspnet org?\r\n\r\nThe aspnet org as a separate entity is legacy and artificial.  In time we hope to absorb it into the dotnet org and sunset the aspnet org.\r\n\r\n#### Will the coreclr and corefx repos go away?\r\n\r\nWith the help of GitHub, we plan to migrate all issues from these repos to the new dotnet/platform repo, and then lock down creation of additional issues, such that the repos will no longer be used for issue management.  We will also inhibit the creation of PRs to the master branch, which will effectively become an archive for read-only review of history.  In this sense, these repos will be archived, and no active development will happen with them.  However, we plan to continue servicing previous .NET Core releases out of these repos, so the various release branches (e.g. release/2.1, release/3.0, etc.) will continue to see (limited) activity.\r\n\r\n#### Will the mono repo go away?\r\n\r\nNo. mono/mono contains the source for the full mono stack and will continue to live on happily.  We will simply be moving the managed source associated with System.Private.CoreLib and copying the relatively small amount of source that makes up the native mono runtime to dotnet/platform.  We may choose to then use some mirroring technology to keep the runtime copy in sync (this will, however, not suffer from the same mirroring issues we currently experience, as we would not be mirroring between two components required to build the same binaries), or we may choose to let them diverge and manually sync only those changes deemed relevant to both implementations.\r\n\r\n#### Will the corert repo go away?\r\n\r\nYes.  We plan to retire/archive the corert repo.  Some of the technology in the corert repo will be migrated to the master branch of dotnet/platform, where it will be productized as part of .NET.  Other portions of the corert repo will be migrated to feature branches of dotnet/platform, where the experimentation can continue.  In this way, we will use feature branches to continue experimenting with the corert technology, while making it easier to share portions with its shipping counterpart and also graduate functionality into master if/when it’s ready.\r\n\r\n#### Does this mean there will be a single repo for all of .NET?\r\n\r\nNo.  We will be reducing the number of repos that contribute to .NET, but currently we do not believe that going all the way down to one is the right answer.\r\n\r\n#### Doesn’t this mean that issue and PR tracking will now be overwhelming?\r\n\r\nIt is already the case that the vast majority of issues in a given repo are not relevant to any individual developer, and with several thousand open issues in each repo and on the order of a hundred open PRs in each, we already need systems (e.g. labels) to successfully manage issues and PRs.  As such, we don’t believe the merging will have a significant impact on this aspect of developer productivity.  If it turns out to have an unexpectedly large negative impact, we will work with the community to find ways to mitigate the problem.  However, there are already a multitude of successful open source projects on GitHub with at least an order of magnitude more issues.\r\n\r\n#### What will happen to existing issues?\r\n\r\nWith the help of GitHub functionality, we plan to migrate all issues from old repos (e.g. dotnet/coreclr, dotnet/corefx) to the new repos (e.g. dotnet/platform).  We may also use this as a forcing function to revisit stale issues and either close those that are no longer relevant or reinvigorate those that are demanding of more immediate attention.\r\n\r\n#### What about git history?\r\n\r\nIn general, we plan to keep history, such that history from each constituent repo will be a part of the new repo.  However, we have made some mistakes in the past (e.g. large binaries, multitudes of automated PRs for flowing bits and source between repos, etc.), and we plan to rewrite history to correct those mistakes wherever possible and impactful.  Some rough calculations suggest this could end up significantly reducing the size of the repos as well as the time it takes to clone, which should not only help developers approaching the project but also CI.  This will end up meaning that SHAs may be different in the new repo than they were in the old repo; as previously mentioned, however, any references to the old SHAs in the old repos will continue to work, as those repos will remain accessible.\r\n\r\n#### Will I still show up in the contributor list due to previous contributions?\r\n\r\nYes.  We plan to merge all such history.\r\n\r\n#### Will this break debugging with SourceLink?\r\n\r\nNo.  The existing repos will continue to be accessible, and commit SHAs there will remain unchanged.\r\n\r\n#### Might plans change?\r\n\r\nSure.  Part of the goal of posting this announcement is to hear from you, hear about additional benefits you're excited about, and hear about additional concerns we may not have considered.  We will include such ideas in our planning and course correct as necessary."}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"10359534193","Type":"IssuesEvent","CreatedAt":"2019-09-06T04:13:17","Actor":"VincentBu","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/26555","RelatedDescription":"Opened issue \"Test failed: JIT\\Methodical\\doublearray\\dblarray3_cs_ro\\dblarray3_cs_ro.cmd\" (#26555) at dotnet/coreclr","RelatedBody":"**Job:**\r\n[coreclr-jitstress 20190904.1](https://dev.azure.com/dnceng/public/_build/results?buildId=338039)\r\nRun Test Pri1 Windows_NT x86 checked\r\n\r\n**Detail:**\r\nconsole log: https://helix.dot.net/api/2019-06-17/jobs/4665d575-581c-4e18-bc85-a05bfe8a2925/workitems/JIT.Methodical.a-dA-D/console\r\n\r\n**OS & Arch:**\r\nWindows x86\r\n\r\n**Mode:**\r\nset COMPlus_TieredCompilation=0\r\nset COMPlus_ReadyToRun=0\r\nset COMPlus_ZapDisable=1\r\n\r\n**Failed tests:**\r\nJIT\\Methodical\\doublearray\\dblarray3_cs_ro\\dblarray3_cs_ro.cmd\r\n\r\n**Note:**\r\nThis failure **doesn't repro** on our windows x64 machine.\r\n\r\n**Log:**\r\n```\r\nJIT\\Methodical\\doublearray\\dblarray3_cs_ro\\dblarray3_cs_ro.cmd [FAIL]\r\n      \r\n      Return code:      1\r\n      Raw output file:      C:\\dotnetbuild\\work\\4665d575-581c-4e18-bc85-a05bfe8a2925\\Work\\2234b90c-22ce-42c0-92c2-9b3eef8bab05\\Exec\\JIT\\Methodical\\Reports\\JIT.Methodical\\doublearray\\dblarray3_cs_ro\\dblarray3_cs_ro.output.txt\r\n      Raw output:\r\n      BEGIN EXECUTION\r\n       \"C:\\dotnetbuild\\work\\4665d575-581c-4e18-bc85-a05bfe8a2925\\Payload\\corerun.exe\" dblarray3_cs_ro.dll \r\n      X86\r\n      Garbage collection was induced in NoGCRegion mode\r\n         at System.GC.EndNoGCRegionWorker()\r\n         at DblArray3.Run(Action f)\r\n         at DblArray3.Main()\r\n      FAILED\r\n      Expected: 100\r\n      Actual: -1\r\n      END EXECUTION - FAILED\r\n      FAILED\r\n      Test Harness Exitcode is : 1\r\n```"},{"Id":"10359110310","Type":"IssuesEvent","CreatedAt":"2019-09-06T02:17:51","Actor":"VincentBu","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/26554","RelatedDescription":"Opened issue \"Test failed: tracing/eventpipe/buffersize/buffersize/buffersize.sh\" (#26554) at dotnet/coreclr","RelatedBody":"**Job:**\r\n[coreclr-outerloop 20190905.7](https://dev.azure.com/dnceng/public/_build/results?buildId=339271)\r\nRun Test Pri1 R2R OSX x64 checked\r\n\r\n**Detail:**\r\nconsole log: https://helix.dot.net/api/2019-06-17/jobs/04af6fb9-85f4-42d7-ab4b-0d5bb40960e9/workitems/PayloadGroup0/console\r\n\r\n**OS & Arch:** \r\nOSX x64\r\n\r\n**Mode:** \r\n    RunCrossGen=1\r\n    COMPlus_TieredCompilation=0\r\n\r\n**Failed tests:**\r\ntracing/eventpipe/buffersize/buffersize/buffersize.sh\r\ntracing/eventpipe/rundownvalidation/rundownvalidation/rundownvalidation.sh\r\n\r\n**Note:**\r\nThese failures **doesn't repro** on our OSX x64 machine.\r\n\r\n**Log:**\r\n```\r\ntracing/eventpipe/buffersize/buffersize/buffersize.sh [FAIL]\r\n      \r\n      Return code:      1\r\n      Raw output file:      /private/tmp/helix/working/04af6fb9-85f4-42d7-ab4b-0d5bb40960e9/Work/557401af-9032-472a-8131-66fb6aa90e5b/Exec/tracing/eventpipe/Reports/tracing.eventpipe/buffersize/buffersize/buffersize.output.txt\r\n      Raw output:\r\n      BEGIN EXECUTION\r\n      in takeLock\r\n      /tmp/helix/working/04af6fb9-85f4-42d7-ab4b-0d5bb40960e9/Payload/crossgen /Platform_Assemblies_Paths /tmp/helix/working/04af6fb9-85f4-42d7-ab4b-0d5bb40960e9/Payload:/private/tmp/helix/working/04af6fb9-85f4-42d7-ab4b-0d5bb40960e9/Work/557401af-9032-472a-8131-66fb6aa90e5b/Exec/tracing/eventpipe/buffersize/buffersize/IL:/private/tmp/helix/working/04af6fb9-85f4-42d7-ab4b-0d5bb40960e9/Work/557401af-9032-472a-8131-66fb6aa90e5b/Exec/tracing/eventpipe/buffersize/buffersize /in buffersize.org /out buffersize.dll\r\n      Microsoft (R) CoreCLR Native Image Generator - Version 4.5.30319.0\r\n      Copyright (c) Microsoft Corporation.  All rights reserved.\r\n      \r\n      Native image buffersize.dll generated successfully.\r\n      in ReleaseLock\r\n      in takeLock\r\n      /tmp/helix/working/04af6fb9-85f4-42d7-ab4b-0d5bb40960e9/Payload/corerun buffersize.dll ''\r\n        0.0s: ==TEST STARTING==\r\n        0.0s: Connecting to EventPipe...\r\n        0.3s: System.InvalidOperationException: Sequence contains more than one matching element\r\n         at System.Linq.ThrowHelper.ThrowMoreThanOneMatchException() in /_/src/System.Linq/src/System/Linq/ThrowHelper.cs:line 22\r\n         at System.Linq.Enumerable.SingleOrDefault[TSource](IEnumerable`1 source, Func`2 predicate) in /_/src/System.Linq/src/System/Linq/Single.cs:line 150\r\n         at Microsoft.Diagnostics.Tools.RuntimeClient.DiagnosticsIpc.IpcClient.GetTransport(Int32 processId) in /_/src/Microsoft.Diagnostics.Tools.RuntimeClient/DiagnosticsIpc/IpcClient.cs:line 43\r\n         at Microsoft.Diagnostics.Tools.RuntimeClient.DiagnosticsIpc.IpcClient.SendMessage(Int32 processId, IpcMessage message, IpcMessage& response) in /_/src/Microsoft.Diagnostics.Tools.RuntimeClient/DiagnosticsIpc/IpcClient.cs:line 84\r\n         at Microsoft.Diagnostics.Tools.RuntimeClient.EventPipeClient.CollectTracing(Int32 processId, SessionConfiguration configuration, UInt64& sessionId) in /_/src/Microsoft.Diagnostics.Tools.RuntimeClient/Eventing/EventPipeClient.cs:line 51\r\n         at Tracing.Tests.Common.IpcTraceTest.Validate() in /Users/vsts/agent/2.155.1/work/1/s/tests/src/tracing/eventpipe/common/IpcTraceTest.cs:line 175\r\n         at Tracing.Tests.Common.IpcTraceTest.RunAndValidateEventCounts(Dictionary`2 expectedEventCounts, Action eventGeneratingAction, Nullable`1 sessionConfiguration, Func`2 optionalTraceValidator) in /Users/vsts/agent/2.155.1/work/1/s/tests/src/tracing/eventpipe/common/IpcTraceTest.cs:line 297\r\n        0.3s: ==TEST FINISHED: FAILED!==\r\n      in ReleaseLock\r\n      Expected: 100\r\n      Actual: 255\r\n      END EXECUTION - FAILED\r\n      Test Harness Exitcode is : 1\r\n\r\ntracing/eventpipe/rundownvalidation/rundownvalidation/rundownvalidation.sh [FAIL]\r\n      \r\n      Return code:      1\r\n      Raw output file:      /private/tmp/helix/working/04af6fb9-85f4-42d7-ab4b-0d5bb40960e9/Work/557401af-9032-472a-8131-66fb6aa90e5b/Exec/tracing/eventpipe/Reports/tracing.eventpipe/rundownvalidation/rundownvalidation/rundownvalidation.output.txt\r\n      Raw output:\r\n      BEGIN EXECUTION\r\n      in takeLock\r\n      /tmp/helix/working/04af6fb9-85f4-42d7-ab4b-0d5bb40960e9/Payload/crossgen /Platform_Assemblies_Paths /tmp/helix/working/04af6fb9-85f4-42d7-ab4b-0d5bb40960e9/Payload:/private/tmp/helix/working/04af6fb9-85f4-42d7-ab4b-0d5bb40960e9/Work/557401af-9032-472a-8131-66fb6aa90e5b/Exec/tracing/eventpipe/rundownvalidation/rundownvalidation/IL:/private/tmp/helix/working/04af6fb9-85f4-42d7-ab4b-0d5bb40960e9/Work/557401af-9032-472a-8131-66fb6aa90e5b/Exec/tracing/eventpipe/rundownvalidation/rundownvalidation /in rundownvalidation.org /out rundownvalidation.dll\r\n      Microsoft (R) CoreCLR Native Image Generator - Version 4.5.30319.0\r\n      Copyright (c) Microsoft Corporation.  All rights reserved.\r\n      \r\n      Native image rundownvalidation.dll generated successfully.\r\n      in ReleaseLock\r\n      in takeLock\r\n      /tmp/helix/working/04af6fb9-85f4-42d7-ab4b-0d5bb40960e9/Payload/corerun rundownvalidation.dll ''\r\n        0.0s: ==TEST STARTING==\r\n        0.1s: Connecting to EventPipe...\r\n        0.3s: System.InvalidOperationException: Sequence contains more than one matching element\r\n         at System.Linq.ThrowHelper.ThrowMoreThanOneMatchException() in /_/src/System.Linq/src/System/Linq/ThrowHelper.cs:line 22\r\n         at System.Linq.Enumerable.SingleOrDefault[TSource](IEnumerable`1 source, Func`2 predicate) in /_/src/System.Linq/src/System/Linq/Single.cs:line 150\r\n         at Microsoft.Diagnostics.Tools.RuntimeClient.DiagnosticsIpc.IpcClient.GetTransport(Int32 processId) in /_/src/Microsoft.Diagnostics.Tools.RuntimeClient/DiagnosticsIpc/IpcClient.cs:line 43\r\n         at Microsoft.Diagnostics.Tools.RuntimeClient.DiagnosticsIpc.IpcClient.SendMessage(Int32 processId, IpcMessage message, IpcMessage& response) in /_/src/Microsoft.Diagnostics.Tools.RuntimeClient/DiagnosticsIpc/IpcClient.cs:line 84\r\n         at Microsoft.Diagnostics.Tools.RuntimeClient.EventPipeClient.CollectTracing(Int32 processId, SessionConfiguration configuration, UInt64& sessionId) in /_/src/Microsoft.Diagnostics.Tools.RuntimeClient/Eventing/EventPipeClient.cs:line 51\r\n         at Tracing.Tests.Common.IpcTraceTest.Validate() in /Users/vsts/agent/2.155.1/work/1/s/tests/src/tracing/eventpipe/common/IpcTraceTest.cs:line 175\r\n         at Tracing.Tests.Common.IpcTraceTest.RunAndValidateEventCounts(Dictionary`2 expectedEventCounts, Action eventGeneratingAction, Nullable`1 sessionConfiguration, Func`2 optionalTraceValidator) in /Users/vsts/agent/2.155.1/work/1/s/tests/src/tracing/eventpipe/common/IpcTraceTest.cs:line 297\r\n        0.3s: ==TEST FINISHED: FAILED!==\r\n      in ReleaseLock\r\n      Expected: 100\r\n      Actual: 255\r\n      END EXECUTION - FAILED\r\n      Test Harness Exitcode is : 1\r\n```"},{"Id":"10358874234","Type":"PullRequestEvent","CreatedAt":"2019-09-06T01:12:43","Actor":"dotnet-maestro[bot]","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/26528","RelatedDescription":"Merged pull request \"[release/3.0] Update dependencies from dnceng/internal/dotnet-optimization\" (#26528) at dotnet/coreclr","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2b95475b-d147-4b39-6306-08d6bc51899c)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-optimization\r\n- **Build**: 20190905.1\r\n- **Date Produced**: 9/5/2019 11:05 AM\r\n- **Commit**: 48fd58c24cddbc6c0b0de1c00204aae1170f4864\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **optimization.IBC.CoreCLR** -> 99.99.99-master-20190905.1\r\n  - **optimization.PGO.CoreCLR** -> 99.99.99-master-20190905.1\r\n\r\n[marker]: <> (End:2b95475b-d147-4b39-6306-08d6bc51899c)\r\n\r\n"},{"Id":"10358686201","Type":"PullRequestEvent","CreatedAt":"2019-09-06T00:19:55","Actor":"sandreenko","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/26553","RelatedDescription":"Opened pull request \"Add a repro for GitHub_26311.\" (#26553) at dotnet/coreclr","RelatedBody":"Add an IL test that reproduces #26311 without using external functions or stress modes.\r\nThe test uses tail call opcode to force a tail call to VSD over generic class via a slow helper.\r\n\r\nI will push an exclude commit once I see where it is failing except windows x64."},{"Id":"10358639402","Type":"PullRequestEvent","CreatedAt":"2019-09-06T00:06:32","Actor":"dotnet-maestro[bot]","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/26532","RelatedDescription":"Merged pull request \"[release/3.1] Update dependencies from dotnet/core-setup\" (#26532) at dotnet/coreclr","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:b062bd78-6e50-43e6-cd59-08d72a4d12e0)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190904.16\r\n- **Date Produced**: 9/5/2019 1:23 AM\r\n- **Commit**: 93e1324ce55c1bbd01206eff6bd659bdf34f8fe1\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.1.0-preview1.19454.16\r\n\r\n[marker]: <> (End:b062bd78-6e50-43e6-cd59-08d72a4d12e0)\r\n\r\n"},{"Id":"10358523881","Type":"PullRequestEvent","CreatedAt":"2019-09-05T23:36:55","Actor":"Anipik","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/26548","RelatedDescription":"Merged pull request \"Update preReleaselabel to rc2\" (#26548) at dotnet/coreclr","RelatedBody":""},{"Id":"10358457414","Type":"PullRequestEvent","CreatedAt":"2019-09-05T23:20:01","Actor":"EgorBo","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/26552","RelatedDescription":"Opened pull request \"Optimize Math.Pow(x, c) in JIT\" (#26552) at dotnet/coreclr","RelatedBody":"Fixes https://github.com/dotnet/coreclr/issues/26434\r\nConvert:\r\n`Math.Pow(x, 2)` to `x*x`\r\n`Math.Pow(x, 1)` to `x`\r\n`Math.Pow(x, -1)` to `1/x`\r\n(same for MathF and floats)\r\n\r\nCan be added:\r\n`Math.Pow(1, x)` to `1`\r\n`Math.Pow(2, x)` to `exp2(x)`\r\n`Math.Pow(x, 0.5)` to `sqrt(x)`\r\n\r\n### Test\r\n```csharp\r\nstatic double Pow2(double x) => Math.Pow(x, 2);\r\n\r\nstatic double Pow1(double x) => Math.Pow(x, 1);\r\n\r\nstatic double PowN1(double x) => Math.Pow(x, -1);\r\n```\r\n### Before (tier1):\r\n```asm\r\n; Pow2(double):double\r\nG_M37400_IG01:\r\n       sub      rsp, 40\r\n       vzeroupper \r\nG_M37400_IG02:\r\n       vmovsd   xmm1, qword ptr [reloc @RWD00]\r\n       call     System.Math:Pow(double,double):double\r\n       nop      \r\nG_M37400_IG03:\r\n       add      rsp, 40\r\n       ret      \r\nRWD00  dq\t4000000000000000h\r\n; Total bytes of code: 26\r\n\r\n\r\n; Pow1(double):double\r\nG_M37403_IG01:\r\n       sub      rsp, 40\r\n       vzeroupper \r\nG_M37403_IG02:\r\n       vmovsd   xmm1, qword ptr [reloc @RWD00]\r\n       call     System.Math:Pow(double,double):double\r\n       nop      \r\nG_M37403_IG03:\r\n       add      rsp, 40\r\n       ret      \r\nRWD00  dq\t3FF0000000000000h\r\n; Total bytes of code: 26\r\n\r\n\r\n; PowN1(double):double\r\nG_M24053_IG01:\r\n       sub      rsp, 40\r\n       vzeroupper \r\nG_M24053_IG02:\r\n       vmovsd   xmm1, qword ptr [reloc @RWD00]\r\n       call     System.Math:Pow(double,double):double\r\n       nop      \r\nG_M24053_IG03:\r\n       add      rsp, 40\r\n       ret      \r\nRWD00  dq\tBFF0000000000000h\r\n; Total bytes of code: 26\r\n```\r\n### After (tier1):\r\n```asm\r\n; Pow2(double):double\r\nG_M37400_IG01:\r\n       vzeroupper \r\nG_M37400_IG02:\r\n       vmulsd   xmm0, xmm0\r\nG_M37400_IG03:\r\n       ret      \r\n; Total bytes of code: 8\r\n\r\n\r\n; Pow1(double):double\r\nG_M37403_IG01:\r\n       vzeroupper \r\nG_M37403_IG02:\r\n       ret      \r\n; Total bytes of code: 4\r\n\r\n\r\n; PowN1(double):double\r\nG_M24053_IG01:\r\n       vzeroupper \r\nG_M24053_IG02:\r\n       vmovsd   xmm1, qword ptr [reloc @RWD00]\r\n       vdivsd   xmm1, xmm0\r\n       vmovaps  xmm0, xmm1\r\nG_M24053_IG03:\r\n       ret      \r\nRWD00  dq\t3FF0000000000000h\r\n; Total bytes of code: 20\r\n```\r\n\r\nWill run the jit-diff tools but I suspect it won't find anything in the BCL. But I did see such usages in different applications."},{"Id":"10358455814","Type":"PullRequestEvent","CreatedAt":"2019-09-05T23:19:35","Actor":"briansull","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/26551","RelatedDescription":"Opened pull request \"Don't hoist constants or nodes that have been assigned a constant value.\" (#26551) at dotnet/coreclr","RelatedBody":"Fixes Issue #26417"},{"Id":"10358267767","Type":"PullRequestEvent","CreatedAt":"2019-09-05T22:35:18","Actor":"mmitche","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/26541","RelatedDescription":"Merged pull request \"[release/3.1] Update dependencies from dotnet/arcade\" (#26541) at dotnet/coreclr","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:88e1281a-0536-412d-736c-08d72a4ce44a)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190905.3\r\n- **Date Produced**: 9/5/2019 4:27 PM\r\n- **Commit**: fee4ebe849050a385a4999e4c84fa61c1dc234bb\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19455.3\r\n  - **Microsoft.DotNet.Build.Tasks.Feed** -> 2.2.0-beta.19455.3\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19455.3\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19455.3\r\n\r\n[marker]: <> (End:88e1281a-0536-412d-736c-08d72a4ce44a)\r\n\r\n"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"10359491835","Type":"PullRequestEvent","CreatedAt":"2019-09-06T04:01:02","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/12508","RelatedDescription":"Merged pull request \"[release/3.0.1xx] Update dependencies from dotnet/sdk\" (#12508) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:fa87930c-8514-45a1-0d47-08d6910cd73b)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190905.7\r\n- **Date Produced**: 9/6/2019 2:25 AM\r\n- **Commit**: b88161ed99ded0dd598779ad1afe044818422a6f\r\n- **Branch**: refs/heads/release/3.0.1xx\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-rc2.19455.7\r\n\r\n[marker]: <> (End:fa87930c-8514-45a1-0d47-08d6910cd73b)\r\n\r\n"},{"Id":"10359453876","Type":"PullRequestEvent","CreatedAt":"2019-09-06T03:50:23","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/12509","RelatedDescription":"Opened pull request \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#12509) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190905.25\r\n- **Date Produced**: 9/6/2019 2:53 AM\r\n- **Commit**: db11b05953ca56752b3da4cce203472c40fa6c3c\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.1.0-preview1.19455.25\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.1.0-preview1.19455.25\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.1.0-preview1.19455.25\r\n  - **Microsoft.NET.HostModel** -> 3.1.0-preview1.19455.25\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.1.0-preview1.19455.25\r\n\r\n[marker]: <> (End:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n\r\n"},{"Id":"10359347956","Type":"PullRequestEvent","CreatedAt":"2019-09-06T03:20:36","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/12508","RelatedDescription":"Opened pull request \"[release/3.0.1xx] Update dependencies from dotnet/sdk\" (#12508) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:fa87930c-8514-45a1-0d47-08d6910cd73b)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190905.7\r\n- **Date Produced**: 9/6/2019 2:25 AM\r\n- **Commit**: b88161ed99ded0dd598779ad1afe044818422a6f\r\n- **Branch**: refs/heads/release/3.0.1xx\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-rc2.19455.7\r\n\r\n[marker]: <> (End:fa87930c-8514-45a1-0d47-08d6910cd73b)\r\n\r\n"},{"Id":"10358970951","Type":"PullRequestEvent","CreatedAt":"2019-09-06T01:40:21","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/12507","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/core-setup\" (#12507) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190905.21\r\n- **Date Produced**: 9/5/2019 11:59 PM\r\n- **Commit**: 1beee058941a48fe3da68f151bbd84a690af6ab8\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19455.21\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19455.21\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19455.21\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19455.21\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19455.21\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n"},{"Id":"10358630454","Type":"PullRequestEvent","CreatedAt":"2019-09-06T00:04:08","Actor":"dotnet-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/12506","RelatedDescription":"Opened pull request \"Merge release/3.0.100-preview9 to release/3.0.1xx\" (#12506) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/3.0.100-preview9 into release/3.0.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.100-preview9-to-release/3.0.1xx\ngit reset --hard upstream/release/3.0.1xx\ngit merge upstream/release/3.0.100-preview9\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.100-preview9-to-release/3.0.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"10359280551","Type":"PullRequestEvent","CreatedAt":"2019-09-06T03:02:11","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1508","RelatedDescription":"Opened pull request \"Add missing readonly modifiers\" (#1508) at dotnet/standard","RelatedBody":"I've recently updated the reference assembly generation tool to the latest C# version. This exposed a bug where .NET Standard didn't include `readonly` modifiers that .NET Core added in 3.0. For the affected APIs these wouldn't cause correctness issues, but it would result in superfluous defensive copies, which, given the size of some of these structs, could result in reduced performance.\r\n\r\n/cc @stephentoub @tannergooding "},{"Id":"10358522891","Type":"PullRequestEvent","CreatedAt":"2019-09-05T23:36:38","Actor":"Anipik","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1507","RelatedDescription":"Merged pull request \"snapping release/3.0 -> release/3.0-preview9\" (#1507) at dotnet/standard","RelatedBody":""},{"Id":"10358243768","Type":"PullRequestEvent","CreatedAt":"2019-09-05T22:30:13","Actor":"Anipik","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1507","RelatedDescription":"Opened pull request \"snapping release/3.0 -> release/3.0-preview9\" (#1507) at dotnet/standard","RelatedBody":""},{"Id":"10358236759","Type":"PullRequestEvent","CreatedAt":"2019-09-05T22:28:52","Actor":"Anipik","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1504","RelatedDescription":"Merged pull request \"[release/3.0] Update dependencies from dotnet/arcade\" (#1504) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:29f70c24-3711-40be-9246-08d6c732a216)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190904.31\r\n- **Date Produced**: 9/5/2019 2:00 AM\r\n- **Commit**: 00d8aa82b488f321204a0e69a81399af9df276a1\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19454.31\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19454.31\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19454.31\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19454.31\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19454.31\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19454.31\r\n\r\n[marker]: <> (End:29f70c24-3711-40be-9246-08d6c732a216)\r\n\r\n"},{"Id":"10353936342","Type":"PullRequestEvent","CreatedAt":"2019-09-05T12:45:45","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1506","RelatedDescription":"Merged pull request \"[release/3.0] Update dependencies from dotnet/corefx\" (#1506) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:8358c059-232d-4dac-c08d-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190904.13\r\n- **Date Produced**: 9/5/2019 6:39 AM\r\n- **Commit**: 5f2c2771e077f98c097ecc1b9202bee22ef50aed\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-rc1.19454.13\r\n  - **System.Reflection.Emit** -> 4.6.0-rc1.19454.13\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-rc1.19454.13\r\n\r\n[marker]: <> (End:8358c059-232d-4dac-c08d-08d6da235811)\r\n\r\n"},{"Id":"10353934191","Type":"PullRequestEvent","CreatedAt":"2019-09-05T12:45:31","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1505","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/corefx\" (#1505) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190904.11\r\n- **Date Produced**: 9/5/2019 4:02 AM\r\n- **Commit**: 838832e2ecac9f81b5a5649bfac2fc835db76c1e\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19454.11\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19454.11\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19454.11\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"},{"Id":"10353822313","Type":"PullRequestEvent","CreatedAt":"2019-09-05T12:30:37","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1506","RelatedDescription":"Opened pull request \"[release/3.0] Update dependencies from dotnet/corefx\" (#1506) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:8358c059-232d-4dac-c08d-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190904.13\r\n- **Date Produced**: 9/5/2019 6:39 AM\r\n- **Commit**: 5f2c2771e077f98c097ecc1b9202bee22ef50aed\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-rc1.19454.13\r\n  - **System.Reflection.Emit** -> 4.6.0-rc1.19454.13\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-rc1.19454.13\r\n\r\n[marker]: <> (End:8358c059-232d-4dac-c08d-08d6da235811)\r\n\r\n"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"10359803608","Type":"IssuesEvent","CreatedAt":"2019-09-06T05:30:00","Actor":"davidfowl","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/40870","RelatedDescription":"Opened issue \"API Proposal: SequenceReader<T>.TryRead overloads to read a specified number of elements\" (#40870) at dotnet/corefx","RelatedBody":"The use case is to return a contiguous `ReadOnlySpan<byte>` or a `ReadOnlySequence<byte>` from both the specified position.\r\n\r\n```C#\r\npublic partial ref struct SequenceReader<T>\r\n{\r\n    bool TryRead(int count, out ReadOnlySpan<T> value);\r\n    bool TryRead(int count, out ReadOnlySequence<T> value);\r\n}\r\n```\r\n\r\nOne use case for this type of method is length prefixed network protocols e.g.\r\n\r\n```C#\r\nvoid Parse(ref ReadOnlySequence<byte> buffer)\r\n{\r\n    var reader = new SequenceReader<byte>(buffer);\r\n    // Read the length prefix, then read the payload\r\n    if (!reader.TryReadBigEndian(out int length) || !reader.TryRead(length, out ReadOnlySequence<byte> payload))\r\n    {\r\n        return;\r\n    }\r\n    \r\n    ProcessPayload(payload);\r\n}\r\n```"},{"Id":"10359679378","Type":"PullRequestEvent","CreatedAt":"2019-09-06T04:55:33","Actor":"dotnet-maestro[bot]","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/40869","RelatedDescription":"Opened pull request \"[release/3.0] Update dependencies from dotnet/coreclr\" (#40869) at dotnet/corefx","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:66928e2e-bd95-4f7e-280f-08d690bc5860)\r\n## From https://github.com/dotnet/coreclr\r\n- **Build**: 20190905.10\r\n- **Date Produced**: 9/6/2019 2:00 AM\r\n- **Commit**: 3e8d77b94e7ad9ad6f1d19bb7be4a6f055e0ac05\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk.IL** -> 3.0.0-rc2.19455.10\r\n  - **Microsoft.NETCore.ILAsm** -> 3.0.0-rc2.19455.10\r\n  - **Microsoft.NETCore.Runtime.CoreCLR** -> 3.0.0-rc2.19455.10\r\n\r\n[marker]: <> (End:66928e2e-bd95-4f7e-280f-08d690bc5860)\r\n\r\n"},{"Id":"10359593449","Type":"PullRequestEvent","CreatedAt":"2019-09-06T04:30:44","Actor":"Anipik","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/40861","RelatedDescription":"Merged pull request \"[release/3.0] Update dependencies from dotnet/standard\" (#40861) at dotnet/corefx","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c090f591-8433-4a8c-54c8-08d6c734018a)\r\n## From https://github.com/dotnet/standard\r\n- **Build**: 20190905.4\r\n- **Date Produced**: 9/5/2019 10:46 PM\r\n- **Commit**: c4baa9ceabeceef9d7752ed88da12c2f12c914a5\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **NETStandard.Library** -> 2.1.0-prerelease.19455.4\r\n\r\n[marker]: <> (End:c090f591-8433-4a8c-54c8-08d6c734018a)\r\n\r\n"},{"Id":"10359581166","Type":"PullRequestEvent","CreatedAt":"2019-09-06T04:27:06","Actor":"wfurt","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/40863","RelatedDescription":"Merged pull request \"use type for Http2LoopbackServer.CreateServer\" (#40863) at dotnet/corefx","RelatedBody":"follow-up on #40858\r\n\r\nuse Http2LoopbackServer instead of var to conform to style guide. "},{"Id":"10359560679","Type":"PullRequestEvent","CreatedAt":"2019-09-06T04:21:04","Actor":"dotnet-maestro[bot]","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/40868","RelatedDescription":"Merged pull request \"[release/3.1] Update dependencies from dotnet/coreclr\" (#40868) at dotnet/corefx","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:dbb830b1-8f81-460f-dd40-08d72a4caef5)\r\n## From https://github.com/dotnet/coreclr\r\n- **Build**: 20190905.8\r\n- **Date Produced**: 9/5/2019 11:31 PM\r\n- **Commit**: d6bd61111e49e7975345ccf2ef2ab6596603be3b\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk.IL** -> 3.1.0-preview1.19455.8\r\n  - **Microsoft.NETCore.ILAsm** -> 3.1.0-preview1.19455.8\r\n  - **Microsoft.NETCore.Runtime.CoreCLR** -> 3.1.0-preview1.19455.8\r\n\r\n[marker]: <> (End:dbb830b1-8f81-460f-dd40-08d72a4caef5)\r\n\r\n"},{"Id":"10359509700","Type":"PullRequestEvent","CreatedAt":"2019-09-06T04:05:58","Actor":"danmosemsft","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/40840","RelatedDescription":"Merged pull request \"[release/3.0] Allow NetworkStream.WriteAsync calls to be canceled asynchronously\" (#40840) at dotnet/corefx","RelatedBody":"Ports https://github.com/dotnet/corefx/pull/40839 to release/3.0.\r\ncc: @tmds\r\n\r\n## Description\r\n\r\nIn .NET Core 3.0 we enabled Socket Read/WriteAsync calls to be canceled, and as NetworkStream.ReadAsync just calls to Socket.ReadAsync, it's also cancelable.  But NetworkStream.WriteAsync takes a slightly different code path, due to it not returning number of bytes written (whereas Socket's write operation does), and we missed passing the CancellationToken through this path.  The net result is if enough data is written and WriteAsync pends, the provided CancellationToken won't have an effect.\r\n\r\n## Customer Impact\r\n\r\nNetworkStream.WriteAsync may not be cancelable when a customer expects it to be.\r\n\r\n## Regression?\r\n\r\nNo.\r\n\r\n## Testing\r\n\r\nAll automated tests, including a new one for this specific case. The bulk of the core code paths exercised here are already tested by existing Socket.WriteAsync functionality as well.\r\n\r\n## Risk\r\n\r\nRelatively low.  The biggest risk is probably the very thing this is fixing: cancellation will actually work, and in theory it's possible that someone wasn't expecting the resulting OperationCanceledExceptions that could now result.  However, that's very unlikely, both because a) the developer had to explicitly pass the token, and b) WriteAsync was already checking the token and thus could already throw an OCE, it just would only do so if the token had cancellation requested by the time WriteAsync was called."},{"Id":"10359365378","Type":"PullRequestEvent","CreatedAt":"2019-09-06T03:25:33","Actor":"dotnet-maestro[bot]","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/40868","RelatedDescription":"Opened pull request \"[release/3.1] Update dependencies from dotnet/coreclr\" (#40868) at dotnet/corefx","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:dbb830b1-8f81-460f-dd40-08d72a4caef5)\r\n## From https://github.com/dotnet/coreclr\r\n- **Build**: 20190905.8\r\n- **Date Produced**: 9/5/2019 11:31 PM\r\n- **Commit**: d6bd61111e49e7975345ccf2ef2ab6596603be3b\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk.IL** -> 3.1.0-preview1.19455.8\r\n  - **Microsoft.NETCore.ILAsm** -> 3.1.0-preview1.19455.8\r\n  - **Microsoft.NETCore.Runtime.CoreCLR** -> 3.1.0-preview1.19455.8\r\n\r\n[marker]: <> (End:dbb830b1-8f81-460f-dd40-08d72a4caef5)\r\n\r\n"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"10359359405","Type":"IssuesEvent","CreatedAt":"2019-09-06T03:23:50","Actor":"petrroll","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/35180","RelatedDescription":"Closed issue \"Offer codefixes on selections\" (#35180) at dotnet/roslyn","RelatedBody":"## Scenario\r\nCodefixes often don't show if code is selected as opposed to only having your cursor placed within a word.\r\n*  **5 out of the 11 users struggled with this in user studies.** \r\n* One user **only** ever double-clicked when clicking around the editor. This means he saw fewer codefixes since double clicking always selects the word and we don't show available codefixes in the context. Some users are used to double-clicking around their codebase.\r\n\r\n## Proposal\r\nEnable the same codefixes to appear if a block is selected as would appear if the cursor was placed inside a specific name. If this improves discoverability of codefixes we can enable this on a case-by-case basis per refactoring. My study observed more issues with the 'pull members up to base type' refactoring than others though general struggling was observed with many refactorings.\r\n\r\n**Example: Pull members up**\r\nCodefix offered when cursor is in the name:\r\n![image](https://user-images.githubusercontent.com/8293542/56520118-8bb3e380-64f8-11e9-94fa-b79c60ed7ddb.png)\r\n\r\nCodefix not offered if full line is selected:\r\n![image](https://user-images.githubusercontent.com/8293542/56520215-bf8f0900-64f8-11e9-9022-7a5ebd464553.png)\r\n\r\n**Example: Convert local function to method**\r\nOffered if cursor is in name\r\n![image](https://user-images.githubusercontent.com/8293542/56520344-0d0b7600-64f9-11e9-8fb9-6ac6d7b8de69.png)\r\n\r\nNot offered when entire local function is selected\r\n![image](https://user-images.githubusercontent.com/8293542/56520368-1ac0fb80-64f9-11e9-92a4-49037caea806.png)\r\n\r\n**Example: LINQ to Foreach conversions**\r\n![image](https://user-images.githubusercontent.com/8293542/56521136-1517e580-64fa-11e9-828a-a23aa22d8ce2.png)\r\n\r\nIf semi-colon is included in selection the conversion does not appear:\r\n![image](https://user-images.githubusercontent.com/8293542/56521033-00d3e880-64fa-11e9-849f-2cc7a675f3ff.png)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"10359249982","Type":"IssuesEvent","CreatedAt":"2019-09-06T02:54:14","Actor":"yyjdelete","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/38542","RelatedDescription":"Opened issue \"Consider add an diagnostic to report call to an virtual method via base from an different method?\" (#38542) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\nVS2019 16.3.0preview3.0(3.3.1-beta3-19430-03+fa8e2c9b566e4471a3509fc63d7baca0a2a6d30b)\r\n\r\n**Steps to Reproduce**:\r\n\r\n```cs\r\n    public class Class1\r\n    {\r\n        public virtual void Test1()\r\n        {\r\n        }\r\n\r\n        /*public void Test2()\r\n        {\r\n        }*/\r\n    }\r\n    public class Class2 : Class1\r\n    {\r\n        public void Test2()\r\n        {\r\n            base.Test1();\r\n        }\r\n    }\r\n    public class Class3 : Class2\r\n    {\r\n        public override void Test1()\r\n        {\r\n            Console.WriteLine(\"Do something.\");\r\n        }\r\n    }\r\n```\r\n\r\n**Expected Behavior**:\r\nIt will be better if roslyn can report an diagnostic(Info or Warn) for `base.Test1();`(call virtual method `Class1.Test1()` via `base` from another method `Test2()`), it can easily be an mistake of `base.Test2()` or `this.Test1()`(I used to use `base` when there is no `Test1()` in `Class2`, but it will also make the override in `Class3.Test1()` useless).\r\n\r\n**Actual Behavior**:\r\nNo diagnostic is reported.\r\n"},{"Id":"10359113755","Type":"IssuesEvent","CreatedAt":"2019-09-06T02:18:47","Actor":"petrroll","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/38541","RelatedDescription":"Opened issue \"Debuger can't evaluate expression ImmutableArray<'namedTuple'>\" (#38541) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\nCurrent Int Preview + Roslyn master\r\n**Steps to Reproduce**:\r\n\r\n![image](https://user-images.githubusercontent.com/1764721/64396243-dbabc680-d011-11e9-8a88-bab32d14744e.png)\r\n\r\n**Expected Behavior**:\r\nAll expressions in locals are evaluated.\r\n\r\n**Actual Behavior**:\r\nNone of them is.\r\n\r\n---\r\nI'll try to provide more info / minimal repro if I have time tomorrow."},{"Id":"10358952413","Type":"IssuesEvent","CreatedAt":"2019-09-06T01:35:03","Actor":"davkean","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/38540","RelatedDescription":"Opened issue \"\"Introduce using startment\" refactoring doesn't show up in the middle of a variable\" (#38540) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\n\r\n**Steps to Reproduce**:\r\n\r\n1.  CTRL+. at $\r\n\r\n```\r\nusing System;\r\nusing System.IO;\r\n\r\nclass Class1\r\n{\r\n    public static void Main()\r\n    {\r\n        Stream stream = G$etStream();\r\n\r\n        Console.WriteLine(stream);\r\n    }\r\n\r\n    private static Stream GetStream()\r\n    {\r\n        return null;\r\n    }\r\n}\r\n\r\n```\r\n\r\nExpected: \r\n![image](https://user-images.githubusercontent.com/1103906/64394534-fe81bd80-d099-11e9-95f6-bc57634d5b52.png)\r\n\r\nActual:\r\nNothing, the refactoring isn't available\r\n\r\nThis is particularly odd when the CA00067 complains about the type not being disposed and covers the entire span of the variable, so you can suppress the warning but not introduce the fix.\r\n\r\n"},{"Id":"10358782896","Type":"IssuesEvent","CreatedAt":"2019-09-06T00:48:13","Actor":"vsfeedback","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/38539","RelatedDescription":"Opened issue \"Using with alias in suggestions\" (#38539) at dotnet/roslyn","RelatedBody":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/711223/using-with-alias-in-suggestions.html)._\n\n---\nAdd the option to automatically add a using statement with an alias instead. I have a class that I need a using, but I don't want to include everything in that namespace so I need something like this : \n`using MyClass = Namespace.Something.MyClass`\n\nIt would be nice if it was in the suggestions instead of the more common `using Namespace.Something`\n\n---\n### Original Comments\n\n#### Jane Wu [MSFT] on 8/26/2019, 00:55 AM: \n\n<p>Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.</p>\n"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"10358729210","Type":"PullRequestEvent","CreatedAt":"2019-09-06T00:32:06","Actor":"davidwrighton","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7776","RelatedDescription":"Opened pull request \"Partial compilation and generic ibc processing\" (#7776) at dotnet/corert","RelatedBody":"- Support for partial compilation\r\n- Support for parsing generics in IBC data\r\n - Bonus feature of searching referenced and input assemblies for types if the module in the IBC data is invalid"},{"Id":"10357905651","Type":"PullRequestEvent","CreatedAt":"2019-09-05T21:27:38","Actor":"davidwrighton","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7758","RelatedDescription":"Merged pull request \"Ibc work\" (#7758) at dotnet/corert","RelatedBody":"Implement IBC tuning compilation and parsing\r\nStill tbd\r\n- method block count utilization\r\n- generics testing\r\n\r\n(Also my most recent changes introduced some sort of subtle bug, but I wanted to get this out for initial code review from the folks in Europe.)"},{"Id":"10357184969","Type":"PullRequestEvent","CreatedAt":"2019-09-05T19:38:18","Actor":"fadimounir","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7772","RelatedDescription":"Merged pull request \"Compile cross-module generics in the same version bubble.\" (#7772) at dotnet/corert","RelatedBody":"This work is related to the single-exe prototype, but after discussing with @davidwrighton, these are changes that we can have in master as well.\r\n\r\nCompiling generics from external modules in the version bubble is enabled using a command line switch.\r\n\r\nOther changes: Changing signatures in hashtable of instantiations to include owning type as a way of encoding the module override info\r\n"},{"Id":"10354877327","Type":"PullRequestEvent","CreatedAt":"2019-09-05T14:33:56","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7773","RelatedDescription":"Merged pull request \"Get jitwrapper building on x86\" (#7773) at dotnet/corert","RelatedBody":"CoreCLR repo is going to build it that way. I could exclude that outside x64, but it's just better to fix it..."},{"Id":"10354411490","Type":"PullRequestEvent","CreatedAt":"2019-09-05T13:42:33","Actor":"janvorli","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7767","RelatedDescription":"Merged pull request \"Implement SystemV AMD64 ABI struct classification\" (#7767) at dotnet/corert","RelatedBody":"This change implements SystemV AMD64 ABI struct classification necessary\r\nfor correct passing of function arguments of struct types and returning\r\nthese by value on Unix AMD64.\r\n\r\nThis change is a port of the CoreCLR version with necessary changes to reflect differences in the type system interface between CoreRT and CoreCLR. I have also added caching of the classification result as JIT calls classification for the same type many times."},{"Id":"10352674950","Type":"IssuesEvent","CreatedAt":"2019-09-05T09:45:28","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/6379","RelatedDescription":"Closed issue \"Match IL intrinsic expansion logic with CoreCLR\" (#6379) at dotnet/corert","RelatedBody":"See #6378. This will be needed to compile CoreLib."},{"Id":"10352667764","Type":"IssuesEvent","CreatedAt":"2019-09-05T09:44:35","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/6315","RelatedDescription":"Closed issue \"R2R InvalidCastException due to generating ValueType/Enum stubs\" (#6315) at dotnet/corert","RelatedBody":"The TypeSystemContext Is automatically adding Equals and GetHashCode stubs to ValueTypes and Enums when ```GetAllMethodsForValueType```, ```GetAllMethodsForEnum```, or ```TryResolveConstrainedEnumMethod``` are called. This has a couple of problems:\r\n1. The stubs trigger an InvalidCastException in ```ReadyToRunCodegenCompilation.ComputeDependencyNodeDependencies``` when it tries to cast them to ```EcmaMethod```\r\n2. It's probably incorrect to generate stubs for ValueTypes outside of the current assembly and a R2R helper call should be used instead."},{"Id":"10349769237","Type":"PullRequestEvent","CreatedAt":"2019-09-04T23:50:26","Actor":"cshung","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7775","RelatedDescription":"Opened pull request \"[WIP] Complete the filtering for MethodImpl.AggressiveOptimization\" (#7775) at dotnet/corert","RelatedBody":""}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"10358908042","Type":"PullRequestEvent","CreatedAt":"2019-09-06T01:22:27","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/3600","RelatedDescription":"Opened pull request \"Experimental cpp 3 test ci, if CI's VS has the latest C++ props\" (#3600) at dotnet/sdk","RelatedBody":""},{"Id":"10358899005","Type":"PullRequestEvent","CreatedAt":"2019-09-06T01:20:00","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/3591","RelatedDescription":"Closed pull request \"Experimental cpp 3 fix restore by skipping package dependency resolution.targets\" (#3591) at dotnet/sdk","RelatedBody":""},{"Id":"10358742562","Type":"PullRequestEvent","CreatedAt":"2019-09-06T00:36:02","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/3598","RelatedDescription":"Merged pull request \"Update branding to rc2\" (#3598) at dotnet/sdk","RelatedBody":""},{"Id":"10358741803","Type":"PullRequestEvent","CreatedAt":"2019-09-06T00:35:49","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/3597","RelatedDescription":"Merged pull request \"Merge release/3.0.1xx into release/3.0.100-preview9\" (#3597) at dotnet/sdk","RelatedBody":""}],"ResultType":"GitHubEvent"},"Home-Issues":{"Issues":[{"Id":"475315730","IsPullRequest":false,"CreatedAt":"2019-07-31T19:23:23","Actor":"MeikTranel","Number":"148","RawContent":null,"Title":"Clarify guidelines in regards to Options and Requirements","State":"open","Body":"I'd be interested in which part of the project submission guidelines is optional and which are deal breaker requirements.\r\n\r\n- Is the Role Matrix laid out an absolute or (as can be read between the lines) just a preset, which may be subject to individual projects needs?\r\n- Is it a strong requirement that the project uses the contributor covenant CoC?","Url":"https://github.com/dotnet/foundation/issues/148","RelatedDescription":"Open issue \"Clarify guidelines in regards to Options and Requirements\" (#148)"},{"Id":"455670422","IsPullRequest":true,"CreatedAt":"2019-06-13T10:49:30","Actor":"gep13","Number":"147","RawContent":null,"Title":"(GH-111) Update Source Link location","State":"open","Body":"","Url":"https://github.com/dotnet/foundation/pull/147","RelatedDescription":"Open PR \"(GH-111) Update Source Link location\" (#147)"},{"Id":"455555823","IsPullRequest":true,"CreatedAt":"2019-06-13T06:28:59","Actor":"gep13","Number":"146","RawContent":null,"Title":"Update Cake Project Contacts","State":"closed","Body":"@jongalloway just noticed that this wasn't up to date.","Url":"https://github.com/dotnet/foundation/pull/146","RelatedDescription":"Closed or merged PR \"Update Cake Project Contacts\" (#146)"},{"Id":"441542047","IsPullRequest":true,"CreatedAt":"2019-05-09T18:35:22","Actor":"mitchelsellers","Number":"145","RawContent":null,"Title":"Edits to DNN Platform Information","State":"closed","Body":"Edits to reflect changes in repository structure with recent modifications to the overall project structure.","Url":"https://github.com/dotnet/foundation/pull/145","RelatedDescription":"Closed or merged PR \"Edits to DNN Platform Information\" (#145)"},{"Id":"437980746","IsPullRequest":true,"CreatedAt":"2019-05-03T20:10:38","Actor":"FlorianRappl","Number":"143","RawContent":null,"Title":"Add AngleSharp","State":"closed","Body":"cc @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/143","RelatedDescription":"Closed or merged PR \"Add AngleSharp\" (#143)"},{"Id":"426787230","IsPullRequest":true,"CreatedAt":"2019-05-03T20:08:40","Actor":"mairaw","Number":"141","RawContent":null,"Title":"add links to ML.NET docs","State":"closed","Body":"/cc @JRAlexander @shauheen \r\n\r\nTo match the info we have added for other projects","Url":"https://github.com/dotnet/foundation/pull/141","RelatedDescription":"Closed or merged PR \"add links to ML.NET docs\" (#141)"},{"Id":"440030132","IsPullRequest":true,"CreatedAt":"2019-05-03T20:08:15","Actor":"tomasherceg","Number":"144","RawContent":null,"Title":"Add DotVVM","State":"closed","Body":"cc @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/144","RelatedDescription":"Closed or merged PR \"Add DotVVM\" (#144)"},{"Id":"426787542","IsPullRequest":true,"CreatedAt":"2019-03-29T14:44:24","Actor":"mairaw","Number":"142","RawContent":null,"Title":"add docs samples link","State":"closed","Body":"@BillWagner should we add the samples project too?","Url":"https://github.com/dotnet/foundation/pull/142","RelatedDescription":"Closed or merged PR \"add docs samples link\" (#142)"},{"Id":"426658581","IsPullRequest":true,"CreatedAt":"2019-03-29T02:16:07","Actor":"scottaddie","Number":"139","RawContent":null,"Title":"Add link to ASP.NET Core docs","State":"closed","Body":"Provide a link to the docs site for ASP.NET Core.","Url":"https://github.com/dotnet/foundation/pull/139","RelatedDescription":"Closed or merged PR \"Add link to ASP.NET Core docs\" (#139)"},{"Id":"426666928","IsPullRequest":true,"CreatedAt":"2019-03-29T02:15:48","Actor":"BillWagner","Number":"140","RawContent":null,"Title":"add links to .NET docs","State":"closed","Body":"/cc @mairaw @scottaddie\r\n\r\nMaira, did I miss any project repos to tag?","Url":"https://github.com/dotnet/foundation/pull/140","RelatedDescription":"Closed or merged PR \"add links to .NET docs\" (#140)"},{"Id":"419205679","IsPullRequest":true,"CreatedAt":"2019-03-18T21:04:01","Actor":"MikeWilliams-UK","Number":"137","RawContent":null,"Title":"Add V3.1 repo and change documentation link","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/137","RelatedDescription":"Closed or merged PR \"Add V3.1 repo and change documentation link\" (#137)"},{"Id":"419897914","IsPullRequest":true,"CreatedAt":"2019-03-18T21:03:34","Actor":"devlead","Number":"138","RawContent":null,"Title":"Add Dave to cake.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/138","RelatedDescription":"Closed or merged PR \"Add Dave to cake.md\" (#138)"},{"Id":"391459677","IsPullRequest":false,"CreatedAt":"2019-03-08T19:00:06","Actor":"manne","Number":"123","RawContent":null,"Title":"Missing logo for Steeltoe","State":"closed","Body":"`https://brandfolder.com/pivotal-assets/attachments/ohxttd-7yxa60-clvf50/pivotal-assets-pivotal-genericfile.png` redirects to a sign in page\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L128-L130","Url":"https://github.com/dotnet/foundation/issues/123","RelatedDescription":"Closed issue \"Missing logo for Steeltoe\" (#123)"},{"Id":"417018694","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:32","Actor":"jkonicki","Number":"136","RawContent":null,"Title":"Fix logo and update team contributors","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/136","RelatedDescription":"Closed or merged PR \"Fix logo and update team contributors\" (#136)"},{"Id":"416428925","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"135","RawContent":null,"Title":"adds Umbraco logo","State":"closed","Body":"fixes #124 ","Url":"https://github.com/dotnet/foundation/pull/135","RelatedDescription":"Closed or merged PR \"adds Umbraco logo\" (#135)"},{"Id":"391459812","IsPullRequest":false,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"124","RawContent":null,"Title":"Missing logo for Umbraco","State":"closed","Body":"`https://fbcdn-profile-a.akamaihd.net/hprofile-ak-xap1/v/t1.0-1/p160x160/971596_519168901464439_566592989_n.png?oh=ce61e5b4cbd60c0d99c4164cbb05a434&oe=54F091C9&__gda__=1424472439_c9f76213a915bc2af88246f464f29e8b` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L149-L151","Url":"https://github.com/dotnet/foundation/issues/124","RelatedDescription":"Closed issue \"Missing logo for Umbraco\" (#124)"},{"Id":"416427614","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:45","Actor":"manne","Number":"134","RawContent":null,"Title":"adds the prism logo","State":"closed","Body":"fixes #126 ","Url":"https://github.com/dotnet/foundation/pull/134","RelatedDescription":"Closed or merged PR \"adds the prism logo\" (#134)"},{"Id":"391460225","IsPullRequest":false,"CreatedAt":"2019-03-08T18:58:44","Actor":"manne","Number":"126","RawContent":null,"Title":"No logo provided for Prism","State":"closed","Body":"Can/should this [image](http://prismlibrary.github.io/images/logo-prism-symbol@2x.png) be used?\r\n\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L155-L157","Url":"https://github.com/dotnet/foundation/issues/126","RelatedDescription":"Closed issue \"No logo provided for Prism\" (#126)"},{"Id":"416157860","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:26","Actor":"glennawatson","Number":"133","RawContent":null,"Title":"Add additional ReactiveUI organization projects.","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/133","RelatedDescription":"Closed or merged PR \"Add additional ReactiveUI organization projects.\" (#133)"},{"Id":"407251900","IsPullRequest":true,"CreatedAt":"2019-02-18T17:45:44","Actor":"Potapy4","Number":"132","RawContent":null,"Title":"Update MVVM project logo","State":"closed","Body":"Fixes dotnet/dotnetfoundation-website#72\r\nFixes #125","Url":"https://github.com/dotnet/foundation/pull/132","RelatedDescription":"Closed or merged PR \"Update MVVM project logo\" (#132)"},{"Id":"391459919","IsPullRequest":false,"CreatedAt":"2019-02-18T17:45:44","Actor":"manne","Number":"125","RawContent":null,"Title":"Missing logo for MVVM Light Toolkit","State":"closed","Body":"`https://raw.githubusercontent.com/paulcbetts/mvvmlight/master/Installer/InstallItems/html/MVVM_BlackText_190x147.png` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L137-L139","Url":"https://github.com/dotnet/foundation/issues/125","RelatedDescription":"Closed issue \"Missing logo for MVVM Light Toolkit\" (#125)"},{"Id":"406210463","IsPullRequest":true,"CreatedAt":"2019-02-18T17:44:39","Actor":"NextTurn","Number":"131","RawContent":null,"Title":"Replace http links with https links","State":"closed","Body":"Replace http links with https where possible - both returned 200 OK.","Url":"https://github.com/dotnet/foundation/pull/131","RelatedDescription":"Closed or merged PR \"Replace http links with https links\" (#131)"},{"Id":"399191617","IsPullRequest":true,"CreatedAt":"2019-02-02T11:04:15","Actor":"NextTurn","Number":"130","RawContent":null,"Title":"Update Open XML links","State":"closed","Body":"OpenXmlDeveloper.org was shut down long ago.\r\n\r\nThe content has been moved to EricWhite.com.","Url":"https://github.com/dotnet/foundation/pull/130","RelatedDescription":"Closed or merged PR \"Update Open XML links\" (#130)"},{"Id":"395863354","IsPullRequest":true,"CreatedAt":"2019-01-09T22:28:14","Actor":"ErikEJ","Number":"128","RawContent":null,"Title":"Update of EF description","State":"closed","Body":"@divega !","Url":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Closed or merged PR \"Update of EF description\" (#128)"},{"Id":"395901602","IsPullRequest":true,"CreatedAt":"2019-01-05T03:23:39","Actor":"MarcBruins","Number":"129","RawContent":null,"Title":"Update to absolute path","State":"closed","Body":"Update to absolute path so that when this list is copied the link will actually work","Url":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Closed or merged PR \"Update to absolute path\" (#129)"},{"Id":"395705579","IsPullRequest":true,"CreatedAt":"2019-01-04T00:22:42","Actor":"carloscds","Number":"127","RawContent":null,"Title":"Update documentation information","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/127","RelatedDescription":"Closed or merged PR \"Update documentation information\" (#127)"},{"Id":"391459057","IsPullRequest":true,"CreatedAt":"2019-01-03T04:47:09","Actor":"manne","Number":"122","RawContent":null,"Title":"targets the existing document","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/122","RelatedDescription":"Closed or merged PR \"targets the existing document\" (#122)"},{"Id":"384569679","IsPullRequest":true,"CreatedAt":"2019-01-03T04:46:31","Actor":"JamesNK","Number":"121","RawContent":null,"Title":"Add Newtonsoft.Json","State":"closed","Body":"// @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/121","RelatedDescription":"Closed or merged PR \"Add Newtonsoft.Json\" (#121)"},{"Id":"384212839","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:50","Actor":"stefanov-stefan","Number":"120","RawContent":null,"Title":"Added Telerik info","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/120","RelatedDescription":"Closed or merged PR \"Added Telerik info\" (#120)"},{"Id":"384212448","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:22","Actor":"stefanov-stefan","Number":"119","RawContent":null,"Title":"Added Telerik UWP proj","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/119","RelatedDescription":"Closed or merged PR \"Added Telerik UWP proj\" (#119)"}],"ResultType":"GitHubIssue"},"CoreCLR-Issues":{"Issues":[{"Id":"490119243","IsPullRequest":false,"CreatedAt":"2019-09-06T04:13:17","Actor":"VincentBu","Number":"26555","RawContent":null,"Title":"Test failed: JIT\\Methodical\\doublearray\\dblarray3_cs_ro\\dblarray3_cs_ro.cmd","State":"open","Body":"**Job:**\r\n[coreclr-jitstress 20190904.1](https://dev.azure.com/dnceng/public/_build/results?buildId=338039)\r\nRun Test Pri1 Windows_NT x86 checked\r\n\r\n**Detail:**\r\nconsole log: https://helix.dot.net/api/2019-06-17/jobs/4665d575-581c-4e18-bc85-a05bfe8a2925/workitems/JIT.Methodical.a-dA-D/console\r\n\r\n**OS & Arch:**\r\nWindows x86\r\n\r\n**Mode:**\r\nset COMPlus_TieredCompilation=0\r\nset COMPlus_ReadyToRun=0\r\nset COMPlus_ZapDisable=1\r\n\r\n**Failed tests:**\r\nJIT\\Methodical\\doublearray\\dblarray3_cs_ro\\dblarray3_cs_ro.cmd\r\n\r\n**Note:**\r\nThis failure **doesn't repro** on our windows x64 machine.\r\n\r\n**Log:**\r\n```\r\nJIT\\Methodical\\doublearray\\dblarray3_cs_ro\\dblarray3_cs_ro.cmd [FAIL]\r\n      \r\n      Return code:      1\r\n      Raw output file:      C:\\dotnetbuild\\work\\4665d575-581c-4e18-bc85-a05bfe8a2925\\Work\\2234b90c-22ce-42c0-92c2-9b3eef8bab05\\Exec\\JIT\\Methodical\\Reports\\JIT.Methodical\\doublearray\\dblarray3_cs_ro\\dblarray3_cs_ro.output.txt\r\n      Raw output:\r\n      BEGIN EXECUTION\r\n       \"C:\\dotnetbuild\\work\\4665d575-581c-4e18-bc85-a05bfe8a2925\\Payload\\corerun.exe\" dblarray3_cs_ro.dll \r\n      X86\r\n      Garbage collection was induced in NoGCRegion mode\r\n         at System.GC.EndNoGCRegionWorker()\r\n         at DblArray3.Run(Action f)\r\n         at DblArray3.Main()\r\n      FAILED\r\n      Expected: 100\r\n      Actual: -1\r\n      END EXECUTION - FAILED\r\n      FAILED\r\n      Test Harness Exitcode is : 1\r\n```","Url":"https://github.com/dotnet/coreclr/issues/26555","RelatedDescription":"Open issue \"Test failed: JIT\\Methodical\\doublearray\\dblarray3_cs_ro\\dblarray3_cs_ro.cmd\" (#26555)"},{"Id":"490093707","IsPullRequest":false,"CreatedAt":"2019-09-06T02:17:51","Actor":"VincentBu","Number":"26554","RawContent":null,"Title":"Test failed: tracing/eventpipe/buffersize/buffersize/buffersize.sh","State":"open","Body":"**Job:**\r\n[coreclr-outerloop 20190905.7](https://dev.azure.com/dnceng/public/_build/results?buildId=339271)\r\nRun Test Pri1 R2R OSX x64 checked\r\n\r\n**Detail:**\r\nconsole log: https://helix.dot.net/api/2019-06-17/jobs/04af6fb9-85f4-42d7-ab4b-0d5bb40960e9/workitems/PayloadGroup0/console\r\n\r\n**OS & Arch:** \r\nOSX x64\r\n\r\n**Mode:** \r\n    RunCrossGen=1\r\n    COMPlus_TieredCompilation=0\r\n\r\n**Failed tests:**\r\ntracing/eventpipe/buffersize/buffersize/buffersize.sh\r\ntracing/eventpipe/rundownvalidation/rundownvalidation/rundownvalidation.sh\r\n\r\n**Note:**\r\nThese failures **don't repro** on our OSX x64 machine.\r\n\r\n**Log:**\r\n```\r\ntracing/eventpipe/buffersize/buffersize/buffersize.sh [FAIL]\r\n      \r\n      Return code:      1\r\n      Raw output file:      /private/tmp/helix/working/04af6fb9-85f4-42d7-ab4b-0d5bb40960e9/Work/557401af-9032-472a-8131-66fb6aa90e5b/Exec/tracing/eventpipe/Reports/tracing.eventpipe/buffersize/buffersize/buffersize.output.txt\r\n      Raw output:\r\n      BEGIN EXECUTION\r\n      in takeLock\r\n      /tmp/helix/working/04af6fb9-85f4-42d7-ab4b-0d5bb40960e9/Payload/crossgen /Platform_Assemblies_Paths /tmp/helix/working/04af6fb9-85f4-42d7-ab4b-0d5bb40960e9/Payload:/private/tmp/helix/working/04af6fb9-85f4-42d7-ab4b-0d5bb40960e9/Work/557401af-9032-472a-8131-66fb6aa90e5b/Exec/tracing/eventpipe/buffersize/buffersize/IL:/private/tmp/helix/working/04af6fb9-85f4-42d7-ab4b-0d5bb40960e9/Work/557401af-9032-472a-8131-66fb6aa90e5b/Exec/tracing/eventpipe/buffersize/buffersize /in buffersize.org /out buffersize.dll\r\n      Microsoft (R) CoreCLR Native Image Generator - Version 4.5.30319.0\r\n      Copyright (c) Microsoft Corporation.  All rights reserved.\r\n      \r\n      Native image buffersize.dll generated successfully.\r\n      in ReleaseLock\r\n      in takeLock\r\n      /tmp/helix/working/04af6fb9-85f4-42d7-ab4b-0d5bb40960e9/Payload/corerun buffersize.dll ''\r\n        0.0s: ==TEST STARTING==\r\n        0.0s: Connecting to EventPipe...\r\n        0.3s: System.InvalidOperationException: Sequence contains more than one matching element\r\n         at System.Linq.ThrowHelper.ThrowMoreThanOneMatchException() in /_/src/System.Linq/src/System/Linq/ThrowHelper.cs:line 22\r\n         at System.Linq.Enumerable.SingleOrDefault[TSource](IEnumerable`1 source, Func`2 predicate) in /_/src/System.Linq/src/System/Linq/Single.cs:line 150\r\n         at Microsoft.Diagnostics.Tools.RuntimeClient.DiagnosticsIpc.IpcClient.GetTransport(Int32 processId) in /_/src/Microsoft.Diagnostics.Tools.RuntimeClient/DiagnosticsIpc/IpcClient.cs:line 43\r\n         at Microsoft.Diagnostics.Tools.RuntimeClient.DiagnosticsIpc.IpcClient.SendMessage(Int32 processId, IpcMessage message, IpcMessage& response) in /_/src/Microsoft.Diagnostics.Tools.RuntimeClient/DiagnosticsIpc/IpcClient.cs:line 84\r\n         at Microsoft.Diagnostics.Tools.RuntimeClient.EventPipeClient.CollectTracing(Int32 processId, SessionConfiguration configuration, UInt64& sessionId) in /_/src/Microsoft.Diagnostics.Tools.RuntimeClient/Eventing/EventPipeClient.cs:line 51\r\n         at Tracing.Tests.Common.IpcTraceTest.Validate() in /Users/vsts/agent/2.155.1/work/1/s/tests/src/tracing/eventpipe/common/IpcTraceTest.cs:line 175\r\n         at Tracing.Tests.Common.IpcTraceTest.RunAndValidateEventCounts(Dictionary`2 expectedEventCounts, Action eventGeneratingAction, Nullable`1 sessionConfiguration, Func`2 optionalTraceValidator) in /Users/vsts/agent/2.155.1/work/1/s/tests/src/tracing/eventpipe/common/IpcTraceTest.cs:line 297\r\n        0.3s: ==TEST FINISHED: FAILED!==\r\n      in ReleaseLock\r\n      Expected: 100\r\n      Actual: 255\r\n      END EXECUTION - FAILED\r\n      Test Harness Exitcode is : 1\r\n\r\ntracing/eventpipe/rundownvalidation/rundownvalidation/rundownvalidation.sh [FAIL]\r\n      \r\n      Return code:      1\r\n      Raw output file:      /private/tmp/helix/working/04af6fb9-85f4-42d7-ab4b-0d5bb40960e9/Work/557401af-9032-472a-8131-66fb6aa90e5b/Exec/tracing/eventpipe/Reports/tracing.eventpipe/rundownvalidation/rundownvalidation/rundownvalidation.output.txt\r\n      Raw output:\r\n      BEGIN EXECUTION\r\n      in takeLock\r\n      /tmp/helix/working/04af6fb9-85f4-42d7-ab4b-0d5bb40960e9/Payload/crossgen /Platform_Assemblies_Paths /tmp/helix/working/04af6fb9-85f4-42d7-ab4b-0d5bb40960e9/Payload:/private/tmp/helix/working/04af6fb9-85f4-42d7-ab4b-0d5bb40960e9/Work/557401af-9032-472a-8131-66fb6aa90e5b/Exec/tracing/eventpipe/rundownvalidation/rundownvalidation/IL:/private/tmp/helix/working/04af6fb9-85f4-42d7-ab4b-0d5bb40960e9/Work/557401af-9032-472a-8131-66fb6aa90e5b/Exec/tracing/eventpipe/rundownvalidation/rundownvalidation /in rundownvalidation.org /out rundownvalidation.dll\r\n      Microsoft (R) CoreCLR Native Image Generator - Version 4.5.30319.0\r\n      Copyright (c) Microsoft Corporation.  All rights reserved.\r\n      \r\n      Native image rundownvalidation.dll generated successfully.\r\n      in ReleaseLock\r\n      in takeLock\r\n      /tmp/helix/working/04af6fb9-85f4-42d7-ab4b-0d5bb40960e9/Payload/corerun rundownvalidation.dll ''\r\n        0.0s: ==TEST STARTING==\r\n        0.1s: Connecting to EventPipe...\r\n        0.3s: System.InvalidOperationException: Sequence contains more than one matching element\r\n         at System.Linq.ThrowHelper.ThrowMoreThanOneMatchException() in /_/src/System.Linq/src/System/Linq/ThrowHelper.cs:line 22\r\n         at System.Linq.Enumerable.SingleOrDefault[TSource](IEnumerable`1 source, Func`2 predicate) in /_/src/System.Linq/src/System/Linq/Single.cs:line 150\r\n         at Microsoft.Diagnostics.Tools.RuntimeClient.DiagnosticsIpc.IpcClient.GetTransport(Int32 processId) in /_/src/Microsoft.Diagnostics.Tools.RuntimeClient/DiagnosticsIpc/IpcClient.cs:line 43\r\n         at Microsoft.Diagnostics.Tools.RuntimeClient.DiagnosticsIpc.IpcClient.SendMessage(Int32 processId, IpcMessage message, IpcMessage& response) in /_/src/Microsoft.Diagnostics.Tools.RuntimeClient/DiagnosticsIpc/IpcClient.cs:line 84\r\n         at Microsoft.Diagnostics.Tools.RuntimeClient.EventPipeClient.CollectTracing(Int32 processId, SessionConfiguration configuration, UInt64& sessionId) in /_/src/Microsoft.Diagnostics.Tools.RuntimeClient/Eventing/EventPipeClient.cs:line 51\r\n         at Tracing.Tests.Common.IpcTraceTest.Validate() in /Users/vsts/agent/2.155.1/work/1/s/tests/src/tracing/eventpipe/common/IpcTraceTest.cs:line 175\r\n         at Tracing.Tests.Common.IpcTraceTest.RunAndValidateEventCounts(Dictionary`2 expectedEventCounts, Action eventGeneratingAction, Nullable`1 sessionConfiguration, Func`2 optionalTraceValidator) in /Users/vsts/agent/2.155.1/work/1/s/tests/src/tracing/eventpipe/common/IpcTraceTest.cs:line 297\r\n        0.3s: ==TEST FINISHED: FAILED!==\r\n      in ReleaseLock\r\n      Expected: 100\r\n      Actual: 255\r\n      END EXECUTION - FAILED\r\n      Test Harness Exitcode is : 1\r\n```","Url":"https://github.com/dotnet/coreclr/issues/26554","RelatedDescription":"Open issue \"Test failed: tracing/eventpipe/buffersize/buffersize/buffersize.sh\" (#26554)"},{"Id":"489717971","IsPullRequest":true,"CreatedAt":"2019-09-06T01:12:41","Actor":"dotnet-maestro[bot]","Number":"26528","RawContent":null,"Title":"[release/3.0] Update dependencies from dnceng/internal/dotnet-optimization","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2b95475b-d147-4b39-6306-08d6bc51899c)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-optimization\r\n- **Build**: 20190905.1\r\n- **Date Produced**: 9/5/2019 11:05 AM\r\n- **Commit**: 48fd58c24cddbc6c0b0de1c00204aae1170f4864\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **optimization.IBC.CoreCLR** -> 99.99.99-master-20190905.1\r\n  - **optimization.PGO.CoreCLR** -> 99.99.99-master-20190905.1\r\n\r\n[marker]: <> (End:2b95475b-d147-4b39-6306-08d6bc51899c)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/26528","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dnceng/internal/dotnet-optimization\" (#26528)"},{"Id":"490069924","IsPullRequest":true,"CreatedAt":"2019-09-06T00:19:55","Actor":"sandreenko","Number":"26553","RawContent":null,"Title":"Add a repro for GitHub_26311.","State":"open","Body":"Add an IL test that reproduces #26311 without using external functions or stress modes.\r\nThe test uses tail call opcode to force a tail call to VSD over generic class via a slow helper.\r\n\r\nI will push an exclude commit once I see where it is failing except windows x64.","Url":"https://github.com/dotnet/coreclr/pull/26553","RelatedDescription":"Open PR \"Add a repro for GitHub_26311.\" (#26553)"},{"Id":"489724731","IsPullRequest":true,"CreatedAt":"2019-09-06T00:06:32","Actor":"dotnet-maestro[bot]","Number":"26532","RawContent":null,"Title":"[release/3.1] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:b062bd78-6e50-43e6-cd59-08d72a4d12e0)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190904.16\r\n- **Date Produced**: 9/5/2019 1:23 AM\r\n- **Commit**: 93e1324ce55c1bbd01206eff6bd659bdf34f8fe1\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.1.0-preview1.19454.16\r\n\r\n[marker]: <> (End:b062bd78-6e50-43e6-cd59-08d72a4d12e0)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/26532","RelatedDescription":"Closed or merged PR \"[release/3.1] Update dependencies from dotnet/core-setup\" (#26532)"},{"Id":"490020963","IsPullRequest":true,"CreatedAt":"2019-09-05T23:36:54","Actor":"Anipik","Number":"26548","RawContent":null,"Title":"Update preReleaselabel to rc2","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/26548","RelatedDescription":"Closed or merged PR \"Update preReleaselabel to rc2\" (#26548)"},{"Id":"490056424","IsPullRequest":true,"CreatedAt":"2019-09-05T23:20:00","Actor":"EgorBo","Number":"26552","RawContent":null,"Title":"Optimize Math.Pow(x, c) in JIT","State":"open","Body":"Fixes https://github.com/dotnet/coreclr/issues/26434\r\n\r\nConverts:\r\n`Math.Pow(x,  2)` to `x*x`\r\n`Math.Pow(x,  1)` to `x`\r\n`Math.Pow(x, -1)` to `1/x`\r\n(same for MathF and floats)\r\n\r\nCan be added:\r\n`Math.Pow(c1, c2)` to `calculated value`\r\n`Math.Pow(1, x)` to `1`\r\n`Math.Pow(2, x)` to `exp2(x)`\r\n`Math.Pow(x, 0.5)` to `sqrt(x)`\r\n\r\n### Test\r\n```csharp\r\nstatic double Pow2(double x) => Math.Pow(x, 2);\r\n\r\nstatic double Pow1(double x) => Math.Pow(x, 1);\r\n\r\nstatic double PowN1(double x) => Math.Pow(x, -1);\r\n```\r\n### Before (tier1):\r\n```asm\r\n; Pow2(double):double\r\nG_M37400_IG01:\r\n       sub      rsp, 40\r\n       vzeroupper \r\nG_M37400_IG02:\r\n       vmovsd   xmm1, qword ptr [reloc @RWD00]\r\n       call     System.Math:Pow(double,double):double\r\n       nop      \r\nG_M37400_IG03:\r\n       add      rsp, 40\r\n       ret      \r\nRWD00  dq\t4000000000000000h\r\n; Total bytes of code: 26\r\n\r\n\r\n; Pow1(double):double\r\nG_M37403_IG01:\r\n       sub      rsp, 40\r\n       vzeroupper \r\nG_M37403_IG02:\r\n       vmovsd   xmm1, qword ptr [reloc @RWD00]\r\n       call     System.Math:Pow(double,double):double\r\n       nop      \r\nG_M37403_IG03:\r\n       add      rsp, 40\r\n       ret      \r\nRWD00  dq\t3FF0000000000000h\r\n; Total bytes of code: 26\r\n\r\n\r\n; PowN1(double):double\r\nG_M24053_IG01:\r\n       sub      rsp, 40\r\n       vzeroupper \r\nG_M24053_IG02:\r\n       vmovsd   xmm1, qword ptr [reloc @RWD00]\r\n       call     System.Math:Pow(double,double):double\r\n       nop      \r\nG_M24053_IG03:\r\n       add      rsp, 40\r\n       ret      \r\nRWD00  dq\tBFF0000000000000h\r\n; Total bytes of code: 26\r\n```\r\n### After (tier1):\r\n```asm\r\n; Pow2(double):double\r\nG_M37400_IG01:\r\n       vzeroupper \r\nG_M37400_IG02:\r\n       vmulsd   xmm0, xmm0\r\nG_M37400_IG03:\r\n       ret      \r\n; Total bytes of code: 8\r\n\r\n\r\n; Pow1(double):double\r\nG_M37403_IG01:\r\n       vzeroupper \r\nG_M37403_IG02:\r\n       ret      \r\n; Total bytes of code: 4\r\n\r\n\r\n; PowN1(double):double\r\nG_M24053_IG01:\r\n       vzeroupper \r\nG_M24053_IG02:\r\n       vmovsd   xmm1, qword ptr [reloc @RWD00]\r\n       vdivsd   xmm1, xmm0\r\n       vmovaps  xmm0, xmm1\r\nG_M24053_IG03:\r\n       ret      \r\nRWD00  dq\t3FF0000000000000h\r\n; Total bytes of code: 20\r\n```\r\n\r\nWill run the jit-diff tools but I suspect it won't find anything in the BCL (**UPD** there are actually two cases). But I did see such usages in different applications. E.g. `Xenko` (a game engine): https://github.com/xenko3d/xenko/search?q=Math.Pow&unscoped_q=Math.Pow\r\n\r\nAlso, once some sort of ffast-math mode is implemented - we can unroll other constants (gcc unrolls up to 100, clang - 32)","Url":"https://github.com/dotnet/coreclr/pull/26552","RelatedDescription":"Open PR \"Optimize Math.Pow(x, c) in JIT\" (#26552)"},{"Id":"490056333","IsPullRequest":true,"CreatedAt":"2019-09-05T23:19:34","Actor":"briansull","Number":"26551","RawContent":null,"Title":"Don't hoist constants or nodes that have been assigned a constant value.","State":"open","Body":"Fixes Issue #26417","Url":"https://github.com/dotnet/coreclr/pull/26551","RelatedDescription":"Open PR \"Don't hoist constants or nodes that have been assigned a constant value.\" (#26551)"},{"Id":"489920869","IsPullRequest":true,"CreatedAt":"2019-09-05T22:35:17","Actor":"dotnet-maestro[bot]","Number":"26541","RawContent":null,"Title":"[release/3.1] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:88e1281a-0536-412d-736c-08d72a4ce44a)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190905.3\r\n- **Date Produced**: 9/5/2019 4:27 PM\r\n- **Commit**: fee4ebe849050a385a4999e4c84fa61c1dc234bb\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19455.3\r\n  - **Microsoft.DotNet.Build.Tasks.Feed** -> 2.2.0-beta.19455.3\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19455.3\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19455.3\r\n\r\n[marker]: <> (End:88e1281a-0536-412d-736c-08d72a4ce44a)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/26541","RelatedDescription":"Closed or merged PR \"[release/3.1] Update dependencies from dotnet/arcade\" (#26541)"},{"Id":"490028606","IsPullRequest":false,"CreatedAt":"2019-09-05T21:55:49","Actor":"CarolEidt","Number":"26550","RawContent":null,"Title":"Clean up struct allocation in `gsParamsToShadows`","State":"open","Body":"This method creates shadow copies (this is excerpted from the discussion here: https://github.com/dotnet/coreclr/pull/21705#discussion_r321414655):\r\n* first, it creates the variables, without calling `lvaSetStruct`, but copies some of the struct-related info, such as `lvVerTypeInfo`.\r\n* then it changes the IR to use the new variables (ugly because the IR will now temporarily be in an invalid state - the newly created variables may have not been fully setup without `lvaSetStruct`)\r\n* then it generates copies from the old variables to the new variables and here it calls `lvaSetStruct`\r\n\r\nIt should presumably call `lvaSetStruct` when it first creates the new locals.","Url":"https://github.com/dotnet/coreclr/issues/26550","RelatedDescription":"Open issue \"Clean up struct allocation in `gsParamsToShadows`\" (#26550)"},{"Id":"490027985","IsPullRequest":true,"CreatedAt":"2019-09-05T21:53:56","Actor":"echesakovMSFT","Number":"26549","RawContent":null,"Title":"Add STRESS_PROFILER_CALLBACKS stress mode","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/26549","RelatedDescription":"Open PR \"Add STRESS_PROFILER_CALLBACKS stress mode\" (#26549)"},{"Id":"490014851","IsPullRequest":true,"CreatedAt":"2019-09-05T21:18:55","Actor":"stephentoub","Number":"26547","RawContent":null,"Title":"More in-between meetings style cleanup","State":"open","Body":"- Use ??= to consolidate null checks in more places\r\n- Use expression-bodied members for indexers in more places","Url":"https://github.com/dotnet/coreclr/pull/26547","RelatedDescription":"Open PR \"More in-between meetings style cleanup\" (#26547)"},{"Id":"489967533","IsPullRequest":true,"CreatedAt":"2019-09-05T21:05:30","Actor":"Anipik","Number":"26543","RawContent":null,"Title":"updating 3.0 preview 9 branch to represent rc1","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/26543","RelatedDescription":"Closed or merged PR \"updating 3.0 preview 9 branch to represent rc1\" (#26543)"},{"Id":"490001825","IsPullRequest":true,"CreatedAt":"2019-09-05T21:02:43","Actor":"fadimounir","Number":"26546","RawContent":null,"Title":"Load generics R2R code from the root module","State":"open","Body":"PR includes:\r\n1) Cherry pick https://github.com/dotnet/coreclr/commit/21d651bb4613ca480cd97793fe5d854af36b765c\r\n2) Changes to prestub.cpp to lookup the root module for R2R generics code\r\n\r\nThis change can be used with the newly added switch to the cpaot compiler (--compilebubblegenerics)","Url":"https://github.com/dotnet/coreclr/pull/26546","RelatedDescription":"Open PR \"Load generics R2R code from the root module\" (#26546)"},{"Id":"489714515","IsPullRequest":true,"CreatedAt":"2019-09-05T20:38:11","Actor":"dotnet-maestro[bot]","Number":"26526","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:9d917c39-9eee-4aa5-f8e9-08d6910be5f1)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190904.31\r\n- **Date Produced**: 9/5/2019 2:00 AM\r\n- **Commit**: 00d8aa82b488f321204a0e69a81399af9df276a1\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19454.31\r\n  - **Microsoft.DotNet.Build.Tasks.Feed** -> 2.2.0-beta.19454.31\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19454.31\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19454.31\r\n\r\n[marker]: <> (End:9d917c39-9eee-4aa5-f8e9-08d6910be5f1)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/26526","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/arcade\" (#26526)"},{"Id":"489986487","IsPullRequest":true,"CreatedAt":"2019-09-05T20:31:50","Actor":"jashook","Number":"26545","RawContent":null,"Title":"Use 18.04 arm64 queue for outerloop jobs","State":"open","Body":"This will have the outerloop arm64 jobs use the ubuntu 18.04 arm64 queue.","Url":"https://github.com/dotnet/coreclr/pull/26545","RelatedDescription":"Open PR \"Use 18.04 arm64 queue for outerloop jobs\" (#26545)"},{"Id":"489982125","IsPullRequest":true,"CreatedAt":"2019-09-05T20:24:03","Actor":"mustakimali","Number":"26544","RawContent":null,"Title":"indicate apt update for containers","State":"closed","Body":"This is necessary when trying to profile apps running inside container.","Url":"https://github.com/dotnet/coreclr/pull/26544","RelatedDescription":"Closed or merged PR \"indicate apt update for containers\" (#26544)"},{"Id":"489957930","IsPullRequest":true,"CreatedAt":"2019-09-05T19:33:32","Actor":"echesakovMSFT","Number":"26542","RawContent":null,"Title":"Add JitELTHookEnabled scenarios and testGroup in CI","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/26542","RelatedDescription":"Open PR \"Add JitELTHookEnabled scenarios and testGroup in CI\" (#26542)"},{"Id":"489903574","IsPullRequest":false,"CreatedAt":"2019-09-05T19:17:32","Actor":"sharwell","Number":"26539","RawContent":null,"Title":"Is Activator.CreateInstance(Type) able to return null?","State":"closed","Body":"The method is declared as returning `object?`, but my understanding was the implementation would either throw an exception or return a non-null instance.\r\n\r\nhttps://github.com/dotnet/coreclr/blob/f821e2ac58f096bf5c5a830064345c5b16f1db27/src/System.Private.CoreLib/shared/System/Activator.cs#L36","Url":"https://github.com/dotnet/coreclr/issues/26539","RelatedDescription":"Closed issue \"Is Activator.CreateInstance(Type) able to return null?\" (#26539)"},{"Id":"489907896","IsPullRequest":false,"CreatedAt":"2019-09-05T17:44:06","Actor":"r-ramesh","Number":"26540","RawContent":null,"Title":"System.ExecutionEngineException while starting debugging with type (loader issue?)","State":"open","Body":"Repro steps:\r\n1. Start debugging the following code snippet.\r\n\r\nObserved:\r\nSystem.ExecutionEngineException\r\n\r\nExpected:\r\nIf the type can't be loaded, a TypeLoadException indicating why.\r\n\r\nWith .NET Framework:\r\nManaged Debugging Assistant 'FatalExecutionEngineError' : 'The runtime has encountered a fatal error. The address of the error was at 0x53bdf941, on thread 0xd3f0. The error code is 0xc0000005. This error may be a bug in the CLR or in the unsafe or non-verifiable portions of user code. Common sources of this bug include user marshaling errors for COM-interop or PInvoke, which may corrupt the stack.'\r\n\r\nHere is the code snippet:\r\n```\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Diagnostics;\r\nusing System.Reflection;\r\nusing System.Runtime.InteropServices;\r\nusing System.Runtime.Serialization;\r\n#pragma warning disable 649, 169\r\nnamespace ClrIssueRepro\r\n{\r\n    [StructLayout(LayoutKind.Sequential)]\r\n    public class GenBase<T>\r\n    {\r\n        public T Fld10;\r\n\r\n        public int _int0 = 0;\r\n        public double _double0 = 0;\r\n        public string _string0 = \"string0\";\r\n        public Guid _Guid0 = new Guid();\r\n\r\n        public T Fld11;\r\n\r\n        public int _int1 = int.MaxValue;\r\n        public double _double1 = double.MaxValue;\r\n        public string _string1 = \"string1\";\r\n        public Guid _Guid1 = new Guid(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11);\r\n\r\n        public T Fld12;\r\n    }\r\n\r\n    [StructLayout(LayoutKind.Explicit)]\r\n    public class GenString : GenBase<string>\r\n    {\r\n        [FieldOffset(0)] public string sFld10;\r\n\r\n        [FieldOffset(16)] public int _sint0 = 0;\r\n        [FieldOffset(24)] public double _sdouble0 = 0;\r\n        [FieldOffset(32)] public string _sstring0 = \"string0\";\r\n        [FieldOffset(40)] public Guid _sGuid0 = new Guid();\r\n\r\n        [FieldOffset(56)] public string sFld11;\r\n\r\n        [FieldOffset(72)] public int _sint1 = int.MaxValue;\r\n        [FieldOffset(80)] public double _sdouble1 = double.MaxValue;\r\n        [FieldOffset(88)] public string _sstring1 = \"string1\";\r\n        [FieldOffset(96)] public Guid _sGuid1 = new Guid(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11);\r\n\r\n        [FieldOffset(112)] public string sFld12;\r\n    }\r\n\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            GenString x = new GenString();\r\n        }\r\n    }\r\n}\r\n","Url":"https://github.com/dotnet/coreclr/issues/26540","RelatedDescription":"Open issue \"System.ExecutionEngineException while starting debugging with type (loader issue?)\" (#26540)"},{"Id":"489898201","IsPullRequest":false,"CreatedAt":"2019-09-05T17:40:33","Actor":"SWarnberg","Number":"26538","RawContent":null,"Title":"Object.ToString() returns hex E28892 instead of D2 for minus signs on Linux","State":"closed","Body":"# Issue Title\r\n\r\nInvalid unicode character is returned by Object.ToString() when running on Linux for minus.\r\n\r\n# General\r\n\r\nWhen using Object.ToString() on an object of type Int16, Int32 etc, with a negative value, for instance -32, the return value is \"-32\". However, this method behaves differently on Windows and Linux, which causes problems when forwarding this string to another environment, for instance SQL Server.\r\n\r\n- On Windows, the minus sign is of hex code 2D (Hyphen minus), see https://www.fileformat.info/info/unicode/char/2d/index.htm.\r\n- On Linux, the minus sign is of hex code E28892, see https://www.fileformat.info/info/unicode/char/2212/index.htm.\r\n\r\nThis causes problems, for instance when passing a SQL statement to another machine (on Windows) in SQL Server. E28892 is not considered as a negative number in SQL Server. When following is executed:\r\n`\r\nEXEC sp_myproc @mydata = -32\r\n`\r\nthen the following error message is returned:\r\n\r\n`Incorrect syntax near '−'.`","Url":"https://github.com/dotnet/coreclr/issues/26538","RelatedDescription":"Closed issue \"Object.ToString() returns hex E28892 instead of D2 for minus signs on Linux\" (#26538)"},{"Id":"489896582","IsPullRequest":false,"CreatedAt":"2019-09-05T17:17:27","Actor":"r-ramesh","Number":"26537","RawContent":null,"Title":"Local variable getting modified by function call","State":"open","Body":"Local variable gets modified by an unrelated function call, with .NET Core 3.0. Admittedly the type in question is a bit weird, lifted from a CoreCLR test case.\r\n\r\nIn the code snippet below, \"instance\" mutates from being an object of type `GenInt` to a `List<FieldInfo>` magically. Calling GetAllInstanceFields shouldn't modified the local of the caller.\r\n\r\nObserved output:\r\nClrIssueRepro.GenInt\r\nSystem.Object\r\n\r\nExpected output:\r\nClrIssueRepro.GenInt\r\nClrIssueRepro.GenInt\r\n\r\nHere is the code snippet:\r\n\r\n```\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Diagnostics;\r\nusing System.Reflection;\r\nusing System.Runtime.InteropServices;\r\nusing System.Runtime.Serialization;\r\n#pragma warning disable 649, 169\r\nnamespace ClrIssueRepro\r\n{\r\n    [StructLayout(LayoutKind.Sequential)]\r\n    public class GenBase<T>\r\n    {\r\n        public T Fld10;\r\n\r\n        public int _int0 = 0;\r\n        public double _double0 = 0;\r\n        public string _string0 = \"string0\";\r\n        public Guid _Guid0 = new Guid();\r\n\r\n        public T Fld11;\r\n\r\n        public int _int1 = int.MaxValue;\r\n        public double _double1 = double.MaxValue;\r\n        public string _string1 = \"string1\";\r\n        public Guid _Guid1 = new Guid(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11);\r\n\r\n        public T Fld12;\r\n    }\r\n\r\n    [StructLayout(LayoutKind.Explicit)]\r\n    public class GenInt : GenBase<int>\r\n    {\r\n        [FieldOffset(0)] public int sFld10;\r\n\r\n        [FieldOffset(16)] public int _sint0 = 0;\r\n        [FieldOffset(24)] public double _sdouble0 = 0;\r\n        [FieldOffset(32)] public string _sstring0 = \"string0\";\r\n        [FieldOffset(40)] public Guid _sGuid0 = new Guid();\r\n\r\n        [FieldOffset(56)] public int sFld11;\r\n\r\n        [FieldOffset(72)] public int _sint1 = int.MaxValue;\r\n        [FieldOffset(80)] public double _sdouble1 = double.MaxValue;\r\n        [FieldOffset(88)] public string _sstring1 = \"string1\";\r\n        [FieldOffset(96)] public Guid _sGuid1 = new Guid(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11);\r\n\r\n        [FieldOffset(112)] public int sFld12;\r\n    }\r\n\r\n    class Program\r\n    {\r\n        private static FieldInfo[] GetAllInstanceFields(Type type)\r\n        {\r\n            List<FieldInfo> result = new List<FieldInfo>();\r\n            for (Type t = type; t != null; t = t.BaseType)\r\n            {\r\n                // Stop iterating once we get to System.ValueType. There should be no fields in it\r\n                // or System.Object, it's base class. This is ok to do for desktop & ProjectN.\r\n                if (t == typeof(ValueType))\r\n                {\r\n                    break;\r\n                }\r\n\r\n                FieldInfo[] fieldsOnType = t.GetFields(\r\n                    BindingFlags.Public |\r\n                    BindingFlags.NonPublic |\r\n                    BindingFlags.Instance |\r\n                    BindingFlags.DeclaredOnly);\r\n                result.AddRange(fieldsOnType);\r\n            }\r\n\r\n            return result.ToArray();\r\n        }\r\n\r\n        private static object CreateInstance(Type t)\r\n        {\r\n            return t.IsValueType ? Activator.CreateInstance(t) : FormatterServices.GetUninitializedObject(t);\r\n        }\r\n\r\n        static void Main(string[] args)\r\n        {\r\n            Type type = typeof(GenInt);\r\n\r\n            object instance = CreateInstance(type);\r\n            // instance is of type GenInt.\r\n\r\n            Console.WriteLine(instance.GetType());\r\n\r\n            System.Reflection.FieldInfo[] fields = GetAllInstanceFields(type);\r\n            // is it still?\r\n\r\n            Console.WriteLine(instance.GetType());\r\n            Debugger.Break();\r\n        }\r\n    }\r\n}\r\n","Url":"https://github.com/dotnet/coreclr/issues/26537","RelatedDescription":"Open issue \"Local variable getting modified by function call\" (#26537)"},{"Id":"489889850","IsPullRequest":true,"CreatedAt":"2019-09-05T17:02:14","Actor":"jashook","Number":"26536","RawContent":null,"Title":"Update to the ubuntu 18.04 queue","State":"open","Body":"This updates our arm32 queue from ubuntu 16.04.arm32 queue to ubuntu 18.04.archarch","Url":"https://github.com/dotnet/coreclr/pull/26536","RelatedDescription":"Open PR \"Update to the ubuntu 18.04 queue\" (#26536)"},{"Id":"489867273","IsPullRequest":false,"CreatedAt":"2019-09-05T16:19:29","Actor":"bzd3y","Number":"26535","RawContent":null,"Title":"TextWriter.WriteLine(string? value)","State":"open","Body":"`TextWriter.WriteLine(string? value)` doesn't use `TextWriter.WriteLine()` to append the new line to the string being written like all of the other overloads do. It uses the same code as `TextWriter.WriteLine()`: `Write(CoreNewLineStr)`.\r\n\r\nThis produces (in my opinion) unexpected override behavior in derived classes. Is this intentional or just something that got overlooked and can be fixed?","Url":"https://github.com/dotnet/coreclr/issues/26535","RelatedDescription":"Open issue \"TextWriter.WriteLine(string? value)\" (#26535)"},{"Id":"489860634","IsPullRequest":false,"CreatedAt":"2019-09-05T16:09:03","Actor":"sharwell","Number":"26534","RawContent":null,"Title":"WeakReference<T> constructor should allow null","State":"open","Body":"I believe the two `WeakReference<T>` constructors should have `[AllowNull]` on the `T` parameter. This change makes it easier for clients to adopt nullable reference types, without any impact on use of `TryGetValue`.\r\n\r\nhttps://github.com/dotnet/coreclr/blob/f821e2ac58f096bf5c5a830064345c5b16f1db27/src/System.Private.CoreLib/shared/System/WeakReference.T.cs#L22\r\n\r\n","Url":"https://github.com/dotnet/coreclr/issues/26534","RelatedDescription":"Open issue \"WeakReference<T> constructor should allow null\" (#26534)"},{"Id":"489724332","IsPullRequest":true,"CreatedAt":"2019-09-05T15:19:36","Actor":"dotnet-maestro[bot]","Number":"26531","RawContent":null,"Title":"[release/3.1] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:88e1281a-0536-412d-736c-08d72a4ce44a)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190904.31\r\n- **Date Produced**: 9/5/2019 2:00 AM\r\n- **Commit**: 00d8aa82b488f321204a0e69a81399af9df276a1\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19454.31\r\n  - **Microsoft.DotNet.Build.Tasks.Feed** -> 2.2.0-beta.19454.31\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19454.31\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19454.31\r\n\r\n[marker]: <> (End:88e1281a-0536-412d-736c-08d72a4ce44a)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/26531","RelatedDescription":"Closed or merged PR \"[release/3.1] Update dependencies from dotnet/arcade\" (#26531)"},{"Id":"489720369","IsPullRequest":true,"CreatedAt":"2019-09-05T15:01:02","Actor":"dotnet-maestro[bot]","Number":"26529","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:9a4bff4b-85c2-4174-9247-08d6c732a216)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190905.02\r\n- **Date Produced**: 9/5/2019 9:33 AM\r\n- **Commit**: caa8d3b1edd7eec947f6283f8342a9249b5d7171\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-rc1-19455-02\r\n\r\n[marker]: <> (End:9a4bff4b-85c2-4174-9247-08d6c732a216)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/26529","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/core-setup\" (#26529)"},{"Id":"489714699","IsPullRequest":true,"CreatedAt":"2019-09-05T14:49:25","Actor":"dotnet-maestro[bot]","Number":"26527","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d7eb9992-d759-446e-f8f0-08d6910be5f1)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190904.13\r\n- **Date Produced**: 9/5/2019 6:39 AM\r\n- **Commit**: 5f2c2771e077f98c097ecc1b9202bee22ef50aed\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.Platforms** -> 3.0.0-rc1.19454.13\r\n  - **Microsoft.Private.CoreFx.NETCoreApp** -> 4.6.0-rc1.19454.13\r\n\r\n[marker]: <> (End:d7eb9992-d759-446e-f8f0-08d6910be5f1)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/26527","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/corefx\" (#26527)"},{"Id":"489770501","IsPullRequest":true,"CreatedAt":"2019-09-05T13:53:54","Actor":"VSadov","Number":"26533","RawContent":null,"Title":"Add a trigger for gc-longrunning pipeline for \"every day at 3AM\"","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/26533","RelatedDescription":"Open PR \"Add a trigger for gc-longrunning pipeline for \"every day at 3AM\"\" (#26533)"},{"Id":"489723051","IsPullRequest":true,"CreatedAt":"2019-09-05T12:35:06","Actor":"vitek-karas","Number":"26530","RawContent":null,"Title":"Remove unnecessary file handle parameter in PEImageLayout methods","State":"open","Body":"The handle is always the owner's PEImage->GetFileHandle, and so the PEImageLayout can call that instead of passing it around through parameters.","Url":"https://github.com/dotnet/coreclr/pull/26530","RelatedDescription":"Open PR \"Remove unnecessary file handle parameter in PEImageLayout methods\" (#26530)"}],"ResultType":"GitHubIssue"},"CLI-Issues":{"Issues":[{"Id":"490106898","IsPullRequest":true,"CreatedAt":"2019-09-06T04:01:02","Actor":"dotnet-maestro[bot]","Number":"12508","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:fa87930c-8514-45a1-0d47-08d6910cd73b)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190905.7\r\n- **Date Produced**: 9/6/2019 2:25 AM\r\n- **Commit**: b88161ed99ded0dd598779ad1afe044818422a6f\r\n- **Branch**: refs/heads/release/3.0.1xx\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-rc2.19455.7\r\n\r\n[marker]: <> (End:fa87930c-8514-45a1-0d47-08d6910cd73b)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12508","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/sdk\" (#12508)"},{"Id":"490114622","IsPullRequest":true,"CreatedAt":"2019-09-06T03:50:21","Actor":"dotnet-maestro[bot]","Number":"12509","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/core-setup","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190905.25\r\n- **Date Produced**: 9/6/2019 2:53 AM\r\n- **Commit**: db11b05953ca56752b3da4cce203472c40fa6c3c\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.1.0-preview1.19455.25\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.1.0-preview1.19455.25\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.1.0-preview1.19455.25\r\n  - **Microsoft.NET.HostModel** -> 3.1.0-preview1.19455.25\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.1.0-preview1.19455.25\r\n\r\n[marker]: <> (End:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12509","RelatedDescription":"Open PR \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#12509)"},{"Id":"490085831","IsPullRequest":true,"CreatedAt":"2019-09-06T01:40:21","Actor":"dotnet-maestro[bot]","Number":"12507","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190905.21\r\n- **Date Produced**: 9/5/2019 11:59 PM\r\n- **Commit**: 1beee058941a48fe3da68f151bbd84a690af6ab8\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19455.21\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19455.21\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19455.21\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19455.21\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19455.21\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12507","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/core-setup\" (#12507)"},{"Id":"490066650","IsPullRequest":true,"CreatedAt":"2019-09-06T00:04:07","Actor":"dotnet-bot","Number":"12506","RawContent":null,"Title":"Merge release/3.0.100-preview9 to release/3.0.1xx","State":"open","Body":"\nThis is an automatically generated pull request from release/3.0.100-preview9 into release/3.0.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.100-preview9-to-release/3.0.1xx\ngit reset --hard upstream/release/3.0.1xx\ngit merge upstream/release/3.0.100-preview9\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.100-preview9-to-release/3.0.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/12506","RelatedDescription":"Open PR \"Merge release/3.0.100-preview9 to release/3.0.1xx\" (#12506)"},{"Id":"489971923","IsPullRequest":true,"CreatedAt":"2019-09-05T23:48:06","Actor":"dotnet-maestro[bot]","Number":"12500","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190905.17\r\n- **Date Produced**: 9/5/2019 9:26 PM\r\n- **Commit**: e8f7aaf617218ee21f0d15fb79e339662fea14a7\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19455.17\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19455.17\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19455.17\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19455.17\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19455.17\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12500","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12500)"},{"Id":"490040956","IsPullRequest":true,"CreatedAt":"2019-09-05T23:41:01","Actor":"dotnet-maestro[bot]","Number":"12504","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:fa87930c-8514-45a1-0d47-08d6910cd73b)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190905.5\r\n- **Date Produced**: 9/5/2019 10:05 PM\r\n- **Commit**: 021e6140f09b28f15a048db6709c7be8f74eda3d\r\n- **Branch**: refs/heads/release/3.0.1xx\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-rc1.19455.5\r\n\r\n[marker]: <> (End:fa87930c-8514-45a1-0d47-08d6910cd73b)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12504","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/sdk\" (#12504)"},{"Id":"490036597","IsPullRequest":true,"CreatedAt":"2019-09-05T23:26:47","Actor":"dotnet-maestro[bot]","Number":"12503","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190905.16\r\n- **Date Produced**: 9/5/2019 8:38 PM\r\n- **Commit**: 8cdffdc87fb6c1d63adb575df18645e5e45c0d94\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.1.0-preview1.19455.16\r\n  - **Microsoft.NET.HostModel** -> 3.1.0-preview1.19455.16\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.1.0-preview1.19455.16\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.1.0-preview1.19455.16\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.1.0-preview1.19455.16\r\n\r\n[marker]: <> (End:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12503","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#12503)"},{"Id":"490055998","IsPullRequest":true,"CreatedAt":"2019-09-05T23:18:03","Actor":"nguerrera","Number":"12505","RawContent":null,"Title":"Remove unused files","State":"open","Body":"Some files got added to the packaging/ directory that came from 2.2 -> master merges. These files are not needed as this repo does not build the installer packages anymore.\r\n\r\nMore importantly, the eula.rtf file is tripping a wire for source build, which is why I've targeted this cleanup at 3.0.","Url":"https://github.com/dotnet/cli/pull/12505","RelatedDescription":"Open PR \"Remove unused files\" (#12505)"},{"Id":"490034860","IsPullRequest":true,"CreatedAt":"2019-09-05T23:15:58","Actor":"dotnet-maestro[bot]","Number":"12502","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190905.18\r\n- **Date Produced**: 9/5/2019 9:07 PM\r\n- **Commit**: 1d5906d7734a0998ffaed65845590d7189947296\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-rc1-19455-18\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-rc1-19455-18\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.0.0-rc1-19455-18\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-rc1-19455-18\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-rc1-19455-18\r\n\r\n[marker]: <> (End:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12502","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/core-setup\" (#12502)"},{"Id":"489955217","IsPullRequest":true,"CreatedAt":"2019-09-05T22:38:00","Actor":"livarcocc","Number":"12499","RawContent":null,"Title":"Updating branding to rc2","State":"closed","Body":"Marking draft because we need release/3.0.1xx to be merged into release/3.0.100-preview9 before merging this PR.","Url":"https://github.com/dotnet/cli/pull/12499","RelatedDescription":"Closed or merged PR \"Updating branding to rc2\" (#12499)"},{"Id":"489992647","IsPullRequest":true,"CreatedAt":"2019-09-05T22:37:41","Actor":"livarcocc","Number":"12501","RawContent":null,"Title":"Merge release/3.0.1xx into release/3.0.100 preview9","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/12501","RelatedDescription":"Closed or merged PR \"Merge release/3.0.1xx into release/3.0.100 preview9\" (#12501)"},{"Id":"489451696","IsPullRequest":true,"CreatedAt":"2019-09-05T22:20:51","Actor":"dotnet-maestro[bot]","Number":"12486","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190905.15\r\n- **Date Produced**: 9/5/2019 8:30 PM\r\n- **Commit**: 8cdffdc87fb6c1d63adb575df18645e5e45c0d94\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.1.0-preview1.19455.15\r\n  - **Microsoft.NET.HostModel** -> 3.1.0-preview1.19455.15\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.1.0-preview1.19455.15\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.1.0-preview1.19455.15\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.1.0-preview1.19455.15\r\n\r\n[marker]: <> (End:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12486","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#12486)"},{"Id":"489908424","IsPullRequest":true,"CreatedAt":"2019-09-05T21:07:22","Actor":"dotnet-maestro[bot]","Number":"12495","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190905.13\r\n- **Date Produced**: 9/5/2019 7:02 PM\r\n- **Commit**: 21376af6d67961f9fa656034197778ebaef45930\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-rc1-19455-13\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-rc1-19455-13\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.0.0-rc1-19455-13\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-rc1-19455-13\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-rc1-19455-13\r\n\r\n[marker]: <> (End:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12495","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/core-setup\" (#12495)"},{"Id":"489948294","IsPullRequest":true,"CreatedAt":"2019-09-05T20:47:40","Actor":"peterhuene","Number":"12497","RawContent":null,"Title":"Add missing host options to dotnet help.","State":"closed","Body":"This commit adds help text for the `--depsfile` and `--runtimeconfig` host\r\noptions to `dotnet help` and `dotnet --help`.\r\n\r\nFixes #12444.\r\n","Url":"https://github.com/dotnet/cli/pull/12497","RelatedDescription":"Closed or merged PR \"Add missing host options to dotnet help.\" (#12497)"},{"Id":"489953691","IsPullRequest":true,"CreatedAt":"2019-09-05T20:33:13","Actor":"livarcocc","Number":"12498","RawContent":null,"Title":"Merge release/3.0.100-preview9 into release/3.0.1xx","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/12498","RelatedDescription":"Closed or merged PR \"Merge release/3.0.100-preview9 into release/3.0.1xx\" (#12498)"},{"Id":"489921288","IsPullRequest":true,"CreatedAt":"2019-09-05T18:13:26","Actor":"dotnet-maestro[bot]","Number":"12496","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:15385bb3-00bd-44e3-5c73-08d72a4d3f20)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190905.3\r\n- **Date Produced**: 9/5/2019 4:27 PM\r\n- **Commit**: fee4ebe849050a385a4999e4c84fa61c1dc234bb\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19455.3\r\n\r\n[marker]: <> (End:15385bb3-00bd-44e3-5c73-08d72a4d3f20)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12496","RelatedDescription":"Open PR \"[release/3.1.1xx] Update dependencies from dotnet/arcade\" (#12496)"},{"Id":"489552352","IsPullRequest":false,"CreatedAt":"2019-09-05T17:12:19","Actor":"YunWeiaa","Number":"12488","RawContent":null,"Title":"Preview version message should not appear when build project with .Net Core 3.0 GA","State":"closed","Body":"## Steps to reproduce\r\n1. Install .NET core SDK 3.0.100-rc1-014183(Use release/3.0.1XX branch from https://github.com/dotnet/core-sdk)\r\n2. Run `dotnet new console -o csapp02` via CLI\r\n3. Run `dotnet build` to observe the result\r\n\r\n## Expected  behavior\r\nDotnet build works fine, the preview version message does not appear.\r\n\r\n## Actual behavior\r\nIt shows that: _`You are using a preview version of .NET Core. See: https://aka.ms/dotnet-core-preview`_\r\n![image](https://user-images.githubusercontent.com/33921754/64316620-eea9a100-cfe7-11e9-8bee-7e5a53598896.png)\r\n\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-rc1-014183\r\n Commit:    298e4dcf34\r\n\r\n \r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-rc1-014183\\\r\n\r\n \r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-rc1-19454-17\r\n  Commit:  b2d71fc324\r\n\r\n \r\n\r\n.NET Core SDKs installed:\r\n  3.0.100-rc1-014183 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n \r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.App 3.0.0-rc1.19453.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.0.0-rc1-19454-17 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-rc1-19454-17 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\n \r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/12488","RelatedDescription":"Closed issue \"Preview version message should not appear when build project with .Net Core 3.0 GA\" (#12488)"},{"Id":"489793954","IsPullRequest":true,"CreatedAt":"2019-09-05T17:03:02","Actor":"dotnet-maestro[bot]","Number":"12492","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190905.3\r\n- **Date Produced**: 9/5/2019 2:23 PM\r\n- **Commit**: f0f1ee60e3b3dd1f1f7faddfbd0a319a5a4e299a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19455.3\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19455.3\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19455.3\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19455.3\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19455.3\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12492","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12492)"},{"Id":"489425046","IsPullRequest":true,"CreatedAt":"2019-09-05T16:58:05","Actor":"johnbeisner","Number":"12485","RawContent":null,"Title":"Better error message for \"windowsdesktop\" usage","State":"closed","Body":"If the string \"windowsdesktop\" is used with \"-runtime\"; then and only then give the windowsdesktop error message.\r\n","Url":"https://github.com/dotnet/cli/pull/12485","RelatedDescription":"Closed or merged PR \"Better error message for \"windowsdesktop\" usage\" (#12485)"},{"Id":"489868833","IsPullRequest":true,"CreatedAt":"2019-09-05T16:22:50","Actor":"singhsarab","Number":"12494","RawContent":null,"Title":"Converging test and vstest verb","State":"open","Body":"Adding the code to make sure we are able to run dll/exe using the dotnet test command.\r\nConvert the given args to vstest parsable args and invoke vstest.\r\n\r\nFixes: microsoft/vstest#1453","Url":"https://github.com/dotnet/cli/pull/12494","RelatedDescription":"Open PR \"Converging test and vstest verb\" (#12494)"},{"Id":"489815890","IsPullRequest":false,"CreatedAt":"2019-09-05T14:50:12","Actor":"OlegYanushkevich","Number":"12493","RawContent":null,"Title":"How to pass parametrized tests into filter for dotnet test?","State":"open","Body":"How I can pass parameterized tests into filter for dotnet test command?\r\n\r\nI tried something like:\r\n\r\n```dotnet test --filter 'FullyQualifiedName=QAutomation.Tests.NUnit.Fixture.Test2(\"first\",3,4)'```\r\n\r\nand\r\n\r\n```dotnet test --filter 'FullyQualifiedName=QAutomation.Tests.NUnit.Fixture.Test2\\(\"first\",3,4\\)'```\r\n\r\nbut it doesn't work.\r\n\r\nI have parameterized tests:\r\n\r\n```csharp\r\n [Test]\r\n [TestCase(\"first\", 3, 4)]\r\n [TestCase(\"second\", 1, 5)]\r\n public void Test(string s, int a, int b)\r\n {\r\n     Assert.Fail(\"Fail\");\r\n }\r\n```\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/12493","RelatedDescription":"Open issue \"How to pass parametrized tests into filter for dotnet test?\" (#12493)"},{"Id":"489725806","IsPullRequest":true,"CreatedAt":"2019-09-05T13:51:22","Actor":"dotnet-maestro[bot]","Number":"12491","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:15385bb3-00bd-44e3-5c73-08d72a4d3f20)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190904.31\r\n- **Date Produced**: 9/5/2019 2:00 AM\r\n- **Commit**: 00d8aa82b488f321204a0e69a81399af9df276a1\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19454.31\r\n\r\n[marker]: <> (End:15385bb3-00bd-44e3-5c73-08d72a4d3f20)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12491","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/arcade\" (#12491)"},{"Id":"489707993","IsPullRequest":true,"CreatedAt":"2019-09-05T12:58:49","Actor":"dotnet-maestro[bot]","Number":"12490","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:433865d5-f754-408e-06ed-08d645e2db8e)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190904.31\r\n- **Date Produced**: 9/5/2019 2:00 AM\r\n- **Commit**: 00d8aa82b488f321204a0e69a81399af9df276a1\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19454.31\r\n\r\n[marker]: <> (End:433865d5-f754-408e-06ed-08d645e2db8e)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12490","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#12490)"},{"Id":"489665244","IsPullRequest":true,"CreatedAt":"2019-09-05T11:05:46","Actor":"dotnet-maestro[bot]","Number":"12489","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190905.02\r\n- **Date Produced**: 9/5/2019 9:33 AM\r\n- **Commit**: caa8d3b1edd7eec947f6283f8342a9249b5d7171\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-rc1-19455-02\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-rc1-19455-02\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.0.0-rc1-19455-02\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-rc1-19455-02\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-rc1-19455-02\r\n\r\n[marker]: <> (End:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12489","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/core-setup\" (#12489)"},{"Id":"489497260","IsPullRequest":true,"CreatedAt":"2019-09-05T03:45:55","Actor":"dotnet-maestro[bot]","Number":"12487","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190904.17\r\n- **Date Produced**: 9/5/2019 1:46 AM\r\n- **Commit**: b2d71fc324f5b67fdde93d0bb3cc374bd6e2c7b8\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-rc1-19454-17\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-rc1-19454-17\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.0.0-rc1-19454-17\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-rc1-19454-17\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-rc1-19454-17\r\n\r\n[marker]: <> (End:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12487","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/core-setup\" (#12487)"},{"Id":"489383314","IsPullRequest":true,"CreatedAt":"2019-09-05T01:18:16","Actor":"dotnet-maestro[bot]","Number":"12484","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190904.15\r\n- **Date Produced**: 9/4/2019 11:33 PM\r\n- **Commit**: caee21f49e3995139cf72c77fd05e10b5c67ee1e\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-rc1-19454-15\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-rc1-19454-15\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.0.0-rc1-19454-15\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-rc1-19454-15\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-rc1-19454-15\r\n\r\n[marker]: <> (End:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12484","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/core-setup\" (#12484)"},{"Id":"489328266","IsPullRequest":true,"CreatedAt":"2019-09-04T19:30:54","Actor":"dotnet-maestro[bot]","Number":"12483","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190904.06\r\n- **Date Produced**: 9/4/2019 5:42 PM\r\n- **Commit**: f5fc5825c26c61986f721f0249f3e66bcc934bb9\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-rc1-19454-06\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-rc1-19454-06\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.0.0-rc1-19454-06\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.0.0-rc1-19454-06\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.0.0-rc1-19454-06\r\n\r\n[marker]: <> (End:1a2c0403-dbb9-4253-1c2d-08d6fb3704ce)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12483","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/core-setup\" (#12483)"},{"Id":"489303836","IsPullRequest":false,"CreatedAt":"2019-09-04T17:54:07","Actor":"jewinkle","Number":"12482","RawContent":null,"Title":"MicrosoftNETPlatformLibrary property for Microsoft.AspNetCore.App fails with NRE for .NET Core 3.0","State":"open","Body":"## Steps to reproduce\r\n 1. \r\n```\r\ncat .\\error.csproj\r\n\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n      <MicrosoftNETPlatformLibrary>Microsoft.AspNetCore.App</MicrosoftNETPlatformLibrary> \r\n  </PropertyGroup>\r\n</Project>\r\n```\r\n\r\n2.\r\n```\r\n dotnet store -f netcoreapp3.0 --manifest .\\error.csproj -r win7-x64 --skip-optimization --output .\\output --skip-symbols\r\nMicrosoft (R) Build Engine version 16.3.0-preview-19426-01+faf5e5d75 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 121.52 ms for C:\\Users\\jewinkle\\3.0error\\error.csproj.\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview9-014004\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.ComposeStore.targets(420,5): error MSB4018: The \"FilterResolvedFiles\" task failed unexpectedly. [C:\\Users\\jewinkle\\3.0error\\error.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview9-014004\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.ComposeStore.targets(420,5): error MSB4018: System.NullReferenceException: Object reference not set to an instance of an object. [C:\\Users\\jewinkle\\3.0error\\error.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview9-014004\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.ComposeStore.targets(420,5): error MSB4018:    at Microsoft.NET.Build.Tasks.LockFileExtensions.GetTransitivePackagesList(LockFileTarget lockFileTarget, LockFileTargetLibrary package, IDictionary`2 libraryLookup) in /_/src/Tasks/Microsoft.NET.Build.Tasks/LockFileExtensions.cs:line 168 [C:\\Users\\jewinkle\\3.0error\\error.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview9-014004\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.ComposeStore.targets(420,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ProjectContext.GetTransitiveList(String package) in /_/src/Tasks/Microsoft.NET.Build.Tasks/ProjectContext.cs:line 155 [C:\\Users\\jewinkle\\3.0error\\error.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview9-014004\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.ComposeStore.targets(420,5): error MSB4018:    at Microsoft.NET.Build.Tasks.FilterResolvedFiles.ExecuteCore() in /_/src/Tasks/Microsoft.NET.Build.Tasks/FilterResolvedFiles.cs:line 69 [C:\\Users\\jewinkle\\3.0error\\error.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview9-014004\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.ComposeStore.targets(420,5): error MSB4018:    at Microsoft.NET.Build.Tasks.TaskBase.Execute() in /_/src/Tasks/Common/TaskBase.cs:line 38 [C:\\Users\\jewinkle\\3.0error\\error.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview9-014004\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.ComposeStore.targets(420,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute() [C:\\Users\\jewinkle\\3.0error\\error.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview9-014004\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.ComposeStore.targets(420,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskBuilder.ExecuteInstantiatedTask(ITaskExecutionHost taskExecutionHost, TaskLoggingContext taskLoggingContext, TaskHost taskHost, ItemBucket bucket, TaskExecutionMode howToExecuteTask) [C:\\Users\\jewinkle\\3.0error\\error.csproj]\r\n```\r\n\r\n## Expected  behavior\r\nStore is generated that excludes assets that exist in Microsoft.AspNetCore.App\r\n\r\n## Actual behavior\r\nCrashes with NRE\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview9-014004\r\n Commit:    8e7ef240a5\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview9-014004\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview9-19423-09\r\n  Commit:  2be172345a\r\n\r\n.NET Core SDKs installed:\r\n  2.1.801 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.401 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview7-012802 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview8-013656 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview9-014004 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview8.19405.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview9.19424.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview8-28405-07 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview9-19423-09 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview8-28405-07 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview9-19423-09 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n```\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/12482","RelatedDescription":"Open issue \"MicrosoftNETPlatformLibrary property for Microsoft.AspNetCore.App fails with NRE for .NET Core 3.0\" (#12482)"},{"Id":"489294768","IsPullRequest":true,"CreatedAt":"2019-09-04T17:32:50","Actor":"dotnet-maestro[bot]","Number":"12481","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190904.1\r\n- **Date Produced**: 9/4/2019 5:32 PM\r\n- **Commit**: 834e316f7a51971b87880a0b148c2f54f11f9706\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-rc1.19454.1\r\n\r\n[marker]: <> (End:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12481","RelatedDescription":"Open PR \"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore\" (#12481)"},{"Id":"489224359","IsPullRequest":false,"CreatedAt":"2019-09-04T15:14:03","Actor":"ldubrois","Number":"12480","RawContent":null,"Title":"'dotnet pack' is not restoring right package dependencies when condition is used","State":"open","Body":"## Steps to reproduce\r\nI have a project in which I have created additional Configuration (Release_v3).\r\n\r\nIn the csproj of my project, I have added the following lines : \r\n\r\n```\r\n  <PropertyGroup Condition=\"'$(Configuration)'=='Release_v3'\">\r\n    <PackageId>MyProject_v3</PackageId>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup Condition=\"''$(Configuration)'=='Release_v3'\">\r\n    <PackageReference Include=\"MyPackage\" Version=\"3.0.19140.1527\" />\r\n  </ItemGroup>\r\n  <ItemGroup Condition=\"'$(Configuration)'=='Release'\">\r\n    <PackageReference Include=\"MyPackage\" Version=\"4.0.19157.2035\" />\r\n  </ItemGroup>\r\n```\r\n\r\n## Expected  behavior\r\nWhen I run the ```dotnet pack``` command with the argument ```-c Release_v3``` the resulting package should include a dependency to MyPackage version 3\r\n\r\n## Actual behavior\r\nThe package produced has the right name (which should indicate a right interpretation of the first condition) but the package has the version 4 of MyPackage as dependency.\r\n\r\nVisual Studio, from the UI, produce the right packages dependencies\r\n\r\n## Environment data\r\n```\r\ndotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.401\r\n Commit:    729b316c13\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.401\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview6-27804-01\r\n  Commit:  fdf81c6faf\r\n\r\n.NET Core SDKs installed:\r\n  2.1.700 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.701 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.800-preview-009696 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.801 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.300 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.301 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.400-preview-010219 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.401 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview6-012264 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview6.19307.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview6-27804-01 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview6-27804-01 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/12480","RelatedDescription":"Open issue \"'dotnet pack' is not restoring right package dependencies when condition is used\" (#12480)"}],"ResultType":"GitHubIssue"},"Standard-Issues":{"Issues":[{"Id":"490103212","IsPullRequest":true,"CreatedAt":"2019-09-06T03:02:10","Actor":"terrajobst","Number":"1508","RawContent":null,"Title":"Add missing readonly modifiers","State":"open","Body":"I've recently updated the reference assembly generation tool to the latest C# version. This exposed a bug where .NET Standard didn't include `readonly` modifiers that .NET Core added in 3.0. For the affected APIs these wouldn't cause correctness issues, but it would result in superfluous defensive copies, which, given the size of some of these structs, could result in reduced performance.\r\n\r\n/cc @stephentoub @tannergooding ","Url":"https://github.com/dotnet/standard/pull/1508","RelatedDescription":"Open PR \"Add missing readonly modifiers\" (#1508)"},{"Id":"490039576","IsPullRequest":true,"CreatedAt":"2019-09-05T23:36:38","Actor":"Anipik","Number":"1507","RawContent":null,"Title":"snapping release/3.0 -> release/3.0-preview9","State":"closed","Body":"","Url":"https://github.com/dotnet/standard/pull/1507","RelatedDescription":"Closed or merged PR \"snapping release/3.0 -> release/3.0-preview9\" (#1507)"},{"Id":"489720165","IsPullRequest":true,"CreatedAt":"2019-09-05T22:28:52","Actor":"dotnet-maestro[bot]","Number":"1504","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:29f70c24-3711-40be-9246-08d6c732a216)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190904.31\r\n- **Date Produced**: 9/5/2019 2:00 AM\r\n- **Commit**: 00d8aa82b488f321204a0e69a81399af9df276a1\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19454.31\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19454.31\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19454.31\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19454.31\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19454.31\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19454.31\r\n\r\n[marker]: <> (End:29f70c24-3711-40be-9246-08d6c732a216)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1504","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/arcade\" (#1504)"},{"Id":"489720957","IsPullRequest":true,"CreatedAt":"2019-09-05T12:45:45","Actor":"dotnet-maestro[bot]","Number":"1506","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:8358c059-232d-4dac-c08d-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190904.13\r\n- **Date Produced**: 9/5/2019 6:39 AM\r\n- **Commit**: 5f2c2771e077f98c097ecc1b9202bee22ef50aed\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-rc1.19454.13\r\n  - **System.Reflection.Emit** -> 4.6.0-rc1.19454.13\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-rc1.19454.13\r\n\r\n[marker]: <> (End:8358c059-232d-4dac-c08d-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1506","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/corefx\" (#1506)"},{"Id":"489720839","IsPullRequest":true,"CreatedAt":"2019-09-05T12:45:30","Actor":"dotnet-maestro[bot]","Number":"1505","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190904.11\r\n- **Date Produced**: 9/5/2019 4:02 AM\r\n- **Commit**: 838832e2ecac9f81b5a5649bfac2fc835db76c1e\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19454.11\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19454.11\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19454.11\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1505","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1505)"},{"Id":"489707331","IsPullRequest":true,"CreatedAt":"2019-09-05T12:11:48","Actor":"dotnet-maestro[bot]","Number":"1503","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190904.31\r\n- **Date Produced**: 9/5/2019 2:00 AM\r\n- **Commit**: 00d8aa82b488f321204a0e69a81399af9df276a1\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19454.31\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19454.31\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19454.31\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19454.31\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19454.31\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19454.31\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1503","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1503)"},{"Id":"489700481","IsPullRequest":false,"CreatedAt":"2019-09-05T11:45:40","Actor":"CShepartd","Number":"1502","RawContent":null,"Title":"Add System.Text.Json","State":"open","Body":"[`System.Text.Json`](https://docs.microsoft.com/en-us/dotnet/api/system.text.json?view=netcore-3.0) should be added to .Net Standard 2.1 or next release","Url":"https://github.com/dotnet/standard/issues/1502","RelatedDescription":"Open issue \"Add System.Text.Json\" (#1502)"},{"Id":"489648306","IsPullRequest":false,"CreatedAt":"2019-09-05T09:51:10","Actor":"MRebati","Number":"1501","RawContent":null,"Title":"adding Netstandard nuget package to another Netstandard project cause \"Unable to find metadata of Microsoft.NETCore.Targets.1.1.0\" error","State":"open","Body":"hello, I've been working on this for a few days.\r\nI created a net standard project. packed it as nuget package. added to a local nuget server. tried to add it as a reference to another project and got this error on adding.\r\n\r\n\"Unable to find metadata of Microsoft.NETCore.Targets.1.1.0\"\r\n\r\nchecked the nuget.org for the new version of \"Microsoft.NETCore.Targets\" and downloaded it.\r\nit did not solve any problem. tried to add the 1.1.0 version. and it did not help either.\r\n\r\ntried to add net core platform on both projects. also did not help.\r\nwhy is net standard even dependent on net core platform?","Url":"https://github.com/dotnet/standard/issues/1501","RelatedDescription":"Open issue \"adding Netstandard nuget package to another Netstandard project cause \"Unable to find metadata of Microsoft.NETCore.Targets.1.1.0\" error\" (#1501)"},{"Id":"489500906","IsPullRequest":true,"CreatedAt":"2019-09-05T02:57:27","Actor":"terrajobst","Number":"1500","RawContent":null,"Title":"Expose SequenceReader<T> and friends","State":"open","Body":"Fixes #1493, #1497\r\n\r\n/cc @chris579","Url":"https://github.com/dotnet/standard/pull/1500","RelatedDescription":"Open PR \"Expose SequenceReader<T> and friends\" (#1500)"},{"Id":"487457614","IsPullRequest":true,"CreatedAt":"2019-09-04T16:54:58","Actor":"dotnet-maestro[bot]","Number":"1487","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:29f70c24-3711-40be-9246-08d6c732a216)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190903.5\r\n- **Date Produced**: 9/3/2019 10:25 PM\r\n- **Commit**: 6e94f0da0f12c7663ab39ce5bd6a67c4ab58b5ee\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19453.5\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19453.5\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19453.5\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19453.5\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19453.5\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19453.5\r\n\r\n[marker]: <> (End:29f70c24-3711-40be-9246-08d6c732a216)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1487","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/arcade\" (#1487)"},{"Id":"489129967","IsPullRequest":true,"CreatedAt":"2019-09-04T12:39:41","Actor":"dotnet-maestro[bot]","Number":"1499","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190903.12\r\n- **Date Produced**: 9/4/2019 8:04 AM\r\n- **Commit**: 1511f723f7adfe82cef72460df45dc4422d303c6\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19453.12\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19453.12\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19453.12\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1499","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1499)"},{"Id":"489117219","IsPullRequest":true,"CreatedAt":"2019-09-04T12:11:56","Actor":"dotnet-maestro[bot]","Number":"1498","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190903.5\r\n- **Date Produced**: 9/3/2019 10:25 PM\r\n- **Commit**: 6e94f0da0f12c7663ab39ce5bd6a67c4ab58b5ee\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19453.5\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19453.5\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19453.5\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19453.5\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19453.5\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19453.5\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1498","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1498)"},{"Id":"488805881","IsPullRequest":false,"CreatedAt":"2019-09-03T20:25:59","Actor":"terrajobst","Number":"1497","RawContent":null,"Title":"Expose ReadOnlySequence<T>.GetFirstSpan()","State":"open","Body":"_Originally posted by @davidfowl in https://github.com/dotnet/corefx/issues/33029#issuecomment-526800999_","Url":"https://github.com/dotnet/standard/issues/1497","RelatedDescription":"Open issue \"Expose ReadOnlySequence<T>.GetFirstSpan()\" (#1497)"},{"Id":"488570303","IsPullRequest":true,"CreatedAt":"2019-09-03T12:27:46","Actor":"dotnet-maestro[bot]","Number":"1496","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190902.6\r\n- **Date Produced**: 9/3/2019 5:38 AM\r\n- **Commit**: b2412774416fc177cf5daa025bb4644a0a91c2df\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19452.6\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19452.6\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19452.6\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1496","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1496)"},{"Id":"488161716","IsPullRequest":true,"CreatedAt":"2019-09-02T12:28:26","Actor":"dotnet-maestro[bot]","Number":"1495","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190901.2\r\n- **Date Produced**: 9/1/2019 5:40 PM\r\n- **Commit**: 130d8582e4973bbdb55ae737b942d214ad3c6570\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19451.2\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19451.2\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19451.2\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1495","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1495)"},{"Id":"487879063","IsPullRequest":true,"CreatedAt":"2019-09-01T12:27:14","Actor":"dotnet-maestro[bot]","Number":"1494","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190831.3\r\n- **Date Produced**: 8/31/2019 5:22 PM\r\n- **Commit**: c4b450ba5d9898be09fe589ba2583772c70a4712\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19431.3\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19431.3\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19431.3\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1494","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1494)"},{"Id":"487768943","IsPullRequest":false,"CreatedAt":"2019-08-31T13:10:35","Actor":"chris579","Number":"1493","RawContent":null,"Title":"Make SequenceReader available","State":"open","Body":"Reading from a `ReadOnlySequence<T>` requires to keep track of position and consumed data. In core you can use the type [SequenceReader](https://docs.microsoft.com/en-us/dotnet/api/system.buffers.sequencereader-1?view=netcore-3.0) that does that for you. In standard you don't have it which leads to three possibilities:\r\n- Write your own implementation which does similar things like `SequenceReader`\r\n- Copy the implementation of `SequenceReader`\r\n- Converting the `ReadOnlySequence<t>` to `T[]` which defeats the purpose\r\n\r\nAll options are not convenient. Making `SequenceReader` available in standard would allow libraries to use the performance benefits of `SequenceReader` without the need to rely on third party implementations or crushing performance because of allocations.","Url":"https://github.com/dotnet/standard/issues/1493","RelatedDescription":"Open issue \"Make SequenceReader available\" (#1493)"},{"Id":"487765426","IsPullRequest":true,"CreatedAt":"2019-08-31T12:39:19","Actor":"dotnet-maestro[bot]","Number":"1492","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190831.1\r\n- **Date Produced**: 8/31/2019 8:30 AM\r\n- **Commit**: 2c974d484209ab46815ec9abd35936ca66f2444e\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19431.1\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19431.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19431.1\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1492","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1492)"},{"Id":"487763042","IsPullRequest":true,"CreatedAt":"2019-08-31T12:11:55","Actor":"dotnet-maestro[bot]","Number":"1491","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190830.3\r\n- **Date Produced**: 8/30/2019 6:51 PM\r\n- **Commit**: 316c80d0c373be63f991cc4d586db85273c1c553\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19430.3\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19430.3\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19430.3\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19430.3\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19430.3\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19430.3\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1491","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1491)"},{"Id":"487637930","IsPullRequest":true,"CreatedAt":"2019-08-30T23:35:03","Actor":"jonpryor","Number":"1490","RawContent":null,"Title":".NET Standard 2.1 needs Xamarin.Android 10.0","State":"closed","Body":"Xamarin.Android 9.5.0 was a preview release for Visual Studio 16.3\r\nPreview 1.  It has since become Xamarin.Android 10.0.0, as of\r\nVisual Studio 16.3 Preview 2.","Url":"https://github.com/dotnet/standard/pull/1490","RelatedDescription":"Closed or merged PR \".NET Standard 2.1 needs Xamarin.Android 10.0\" (#1490)"},{"Id":"487534078","IsPullRequest":false,"CreatedAt":"2019-08-30T15:44:35","Actor":"masterwok","Number":"1489","RawContent":null,"Title":"Make BigInteger Big Endian friendly like CoreFX ","State":"closed","Body":"It would be nice to expose the same big endian friendly interface for BigInteger that CoreFX does as outlined in this issue: https://github.com/dotnet/corefx/issues/24575\r\n\r\nIs this a possibility? Thank you.","Url":"https://github.com/dotnet/standard/issues/1489","RelatedDescription":"Closed issue \"Make BigInteger Big Endian friendly like CoreFX \" (#1489)"},{"Id":"487458245","IsPullRequest":true,"CreatedAt":"2019-08-30T12:40:45","Actor":"dotnet-maestro[bot]","Number":"1488","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190829.10\r\n- **Date Produced**: 8/30/2019 3:58 AM\r\n- **Commit**: ae0d0cb852a6186ca5ef8130b0bf862314485017\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19429.10\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19429.10\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19429.10\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1488","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1488)"},{"Id":"487446462","IsPullRequest":true,"CreatedAt":"2019-08-30T12:11:56","Actor":"dotnet-maestro[bot]","Number":"1486","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190829.16\r\n- **Date Produced**: 8/30/2019 1:19 AM\r\n- **Commit**: e5aaea7fcfc46449b035d5b220032bfb933e98a4\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19429.16\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19429.16\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19429.16\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19429.16\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19429.16\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19429.16\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1486","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1486)"},{"Id":"486948512","IsPullRequest":true,"CreatedAt":"2019-08-29T20:54:50","Actor":"ViktorHofer","Number":"1485","RawContent":null,"Title":"[release/3.0] fix syntax for the publishUsingPipelines variable","State":"closed","Body":"Same fix as in https://github.com/dotnet/corefx/commit/a596356bcd8c1a66f9401b28d7f00837a99ca788\r\n\r\ncc @Anipik ","Url":"https://github.com/dotnet/standard/pull/1485","RelatedDescription":"Closed or merged PR \"[release/3.0] fix syntax for the publishUsingPipelines variable\" (#1485)"},{"Id":"486946828","IsPullRequest":true,"CreatedAt":"2019-08-29T20:54:40","Actor":"ViktorHofer","Number":"1484","RawContent":null,"Title":"fix syntax for the publishUsingPipelines variable","State":"closed","Body":"Same fix as in https://github.com/dotnet/corefx/commit/a596356bcd8c1a66f9401b28d7f00837a99ca788\r\n\r\ncc @Anipik ","Url":"https://github.com/dotnet/standard/pull/1484","RelatedDescription":"Closed or merged PR \"fix syntax for the publishUsingPipelines variable\" (#1484)"},{"Id":"486928653","IsPullRequest":true,"CreatedAt":"2019-08-29T17:38:22","Actor":"dotnet-maestro[bot]","Number":"1482","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:29f70c24-3711-40be-9246-08d6c732a216)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190828.9\r\n- **Date Produced**: 8/28/2019 11:24 PM\r\n- **Commit**: dc55bd4b7353be8e36b2f71b9557e84f743dd6f6\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19428.9\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19428.9\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19428.9\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19428.9\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19428.9\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19428.9\r\n\r\n[marker]: <> (End:29f70c24-3711-40be-9246-08d6c732a216)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1482","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/arcade\" (#1482)"},{"Id":"486929373","IsPullRequest":true,"CreatedAt":"2019-08-29T12:41:39","Actor":"dotnet-maestro[bot]","Number":"1483","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190828.9\r\n- **Date Produced**: 8/29/2019 12:53 AM\r\n- **Commit**: 546fdc4198bdfd89504c8895c1bd608b4e92d80d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19428.9\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19428.9\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19428.9\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1483","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1483)"},{"Id":"486915660","IsPullRequest":true,"CreatedAt":"2019-08-29T12:11:56","Actor":"dotnet-maestro[bot]","Number":"1481","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190828.9\r\n- **Date Produced**: 8/28/2019 11:24 PM\r\n- **Commit**: dc55bd4b7353be8e36b2f71b9557e84f743dd6f6\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19428.9\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19428.9\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19428.9\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19428.9\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19428.9\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19428.9\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1481","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1481)"},{"Id":"486351442","IsPullRequest":true,"CreatedAt":"2019-08-28T16:04:44","Actor":"dotnet-maestro[bot]","Number":"1479","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:29f70c24-3711-40be-9246-08d6c732a216)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190827.8\r\n- **Date Produced**: 8/27/2019 7:27 PM\r\n- **Commit**: c02ca5d078b5b54bef8043d972082f41fd912190\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19427.8\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19427.8\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19427.8\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19427.8\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19427.8\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19427.8\r\n\r\n[marker]: <> (End:29f70c24-3711-40be-9246-08d6c732a216)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1479","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/arcade\" (#1479)"},{"Id":"486352176","IsPullRequest":true,"CreatedAt":"2019-08-28T12:40:05","Actor":"dotnet-maestro[bot]","Number":"1480","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190827.13\r\n- **Date Produced**: 8/28/2019 5:24 AM\r\n- **Commit**: 5d1a8a834df0a7b48a24f27e1ce49c4ad763f648\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19427.13\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19427.13\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19427.13\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1480","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1480)"}],"ResultType":"GitHubIssue"},"CoreFx-Issues":{"Issues":[{"Id":"490137060","IsPullRequest":false,"CreatedAt":"2019-09-06T05:30:00","Actor":"davidfowl","Number":"40870","RawContent":null,"Title":"API Proposal: SequenceReader<T>.TryRead overloads to read a specified number of elements","State":"open","Body":"The use case is to return a contiguous `ReadOnlySpan<byte>` or a `ReadOnlySequence<byte>` from both the specified position.\r\n\r\n```C#\r\npublic partial ref struct SequenceReader<T>\r\n{\r\n    bool TryRead(int count, out ReadOnlySpan<T> value);\r\n    bool TryRead(int count, out ReadOnlySequence<T> value);\r\n}\r\n```\r\n\r\nOne use case for this type of method is length prefixed network protocols e.g.\r\n\r\n```C#\r\nvoid Parse(ref ReadOnlySequence<byte> buffer)\r\n{\r\n    var reader = new SequenceReader<byte>(buffer);\r\n    // Read the length prefix, then read the payload\r\n    if (!reader.TryReadBigEndian(out int length) || !reader.TryRead(length, out ReadOnlySequence<byte> payload))\r\n    {\r\n        return;\r\n    }\r\n    \r\n    ProcessPayload(payload);\r\n}\r\n```","Url":"https://github.com/dotnet/corefx/issues/40870","RelatedDescription":"Open issue \"API Proposal: SequenceReader<T>.TryRead overloads to read a specified number of elements\" (#40870)"},{"Id":"490129271","IsPullRequest":true,"CreatedAt":"2019-09-06T04:55:33","Actor":"dotnet-maestro[bot]","Number":"40869","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/coreclr","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:66928e2e-bd95-4f7e-280f-08d690bc5860)\r\n## From https://github.com/dotnet/coreclr\r\n- **Build**: 20190905.10\r\n- **Date Produced**: 9/6/2019 2:00 AM\r\n- **Commit**: 3e8d77b94e7ad9ad6f1d19bb7be4a6f055e0ac05\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk.IL** -> 3.0.0-rc2.19455.10\r\n  - **Microsoft.NETCore.ILAsm** -> 3.0.0-rc2.19455.10\r\n  - **Microsoft.NETCore.Runtime.CoreCLR** -> 3.0.0-rc2.19455.10\r\n\r\n[marker]: <> (End:66928e2e-bd95-4f7e-280f-08d690bc5860)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/40869","RelatedDescription":"Open PR \"[release/3.0] Update dependencies from dotnet/coreclr\" (#40869)"},{"Id":"490056561","IsPullRequest":true,"CreatedAt":"2019-09-06T04:30:43","Actor":"dotnet-maestro[bot]","Number":"40861","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/standard","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c090f591-8433-4a8c-54c8-08d6c734018a)\r\n## From https://github.com/dotnet/standard\r\n- **Build**: 20190905.4\r\n- **Date Produced**: 9/5/2019 10:46 PM\r\n- **Commit**: c4baa9ceabeceef9d7752ed88da12c2f12c914a5\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **NETStandard.Library** -> 2.1.0-prerelease.19455.4\r\n\r\n[marker]: <> (End:c090f591-8433-4a8c-54c8-08d6c734018a)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/40861","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/standard\" (#40861)"},{"Id":"490067065","IsPullRequest":true,"CreatedAt":"2019-09-06T04:27:05","Actor":"wfurt","Number":"40863","RawContent":null,"Title":"use type for Http2LoopbackServer.CreateServer","State":"closed","Body":"follow-up on #40858\r\n\r\nuse Http2LoopbackServer instead of var to conform to style guide. ","Url":"https://github.com/dotnet/corefx/pull/40863","RelatedDescription":"Closed or merged PR \"use type for Http2LoopbackServer.CreateServer\" (#40863)"},{"Id":"490107938","IsPullRequest":true,"CreatedAt":"2019-09-06T04:21:04","Actor":"dotnet-maestro[bot]","Number":"40868","RawContent":null,"Title":"[release/3.1] Update dependencies from dotnet/coreclr","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:dbb830b1-8f81-460f-dd40-08d72a4caef5)\r\n## From https://github.com/dotnet/coreclr\r\n- **Build**: 20190905.8\r\n- **Date Produced**: 9/5/2019 11:31 PM\r\n- **Commit**: d6bd61111e49e7975345ccf2ef2ab6596603be3b\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk.IL** -> 3.1.0-preview1.19455.8\r\n  - **Microsoft.NETCore.ILAsm** -> 3.1.0-preview1.19455.8\r\n  - **Microsoft.NETCore.Runtime.CoreCLR** -> 3.1.0-preview1.19455.8\r\n\r\n[marker]: <> (End:dbb830b1-8f81-460f-dd40-08d72a4caef5)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/40868","RelatedDescription":"Closed or merged PR \"[release/3.1] Update dependencies from dotnet/coreclr\" (#40868)"},{"Id":"490084927","IsPullRequest":true,"CreatedAt":"2019-09-06T03:11:28","Actor":"dotnet-maestro[bot]","Number":"40866","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/coreclr","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:66928e2e-bd95-4f7e-280f-08d690bc5860)\r\n## From https://github.com/dotnet/coreclr\r\n- **Build**: 20190905.7\r\n- **Date Produced**: 9/5/2019 10:25 PM\r\n- **Commit**: e15e94b85877101822f7756d9aa2c5c744eaa14e\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk.IL** -> 3.0.0-rc1.19455.7\r\n  - **Microsoft.NETCore.ILAsm** -> 3.0.0-rc1.19455.7\r\n  - **Microsoft.NETCore.Runtime.CoreCLR** -> 3.0.0-rc1.19455.7\r\n\r\n[marker]: <> (End:66928e2e-bd95-4f7e-280f-08d690bc5860)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/40866","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/coreclr\" (#40866)"},{"Id":"490097390","IsPullRequest":true,"CreatedAt":"2019-09-06T02:34:30","Actor":"stephentoub","Number":"40867","RawContent":null,"Title":"Fix some low-hanging fruit boxing in JsonSerializer","State":"open","Body":"It's boxing lots of dictionary enumerators and KeyValuePairs.  Stop doing that.\r\ncc: @steveharter, @ahsonkhan, @layomia \r\n\r\nBefore:\r\n![image](https://user-images.githubusercontent.com/2642209/64396893-31da3300-d02d-11e9-8007-ac0a20d4ad33.png)\r\n\r\nAfter:\r\n![image](https://user-images.githubusercontent.com/2642209/64396896-356dba00-d02d-11e9-8199-7b3fa87e7da9.png)\r\n\r\nRepro:\r\n```C#\r\nusing System.IO;\r\nusing System.Text.Json;\r\nusing System.Threading.Tasks;\r\n\r\nclass Program\r\n{\r\n    static async Task Main()\r\n    {\r\n        var ms = new MemoryStream();\r\n        var f = new Foo() { Value1 = 42, Value2 = 84.0 };\r\n        for (int i = 0; i < 100_000; i++)\r\n        {\r\n            ms.Position = 0;\r\n            await JsonSerializer.SerializeAsync(ms, f);\r\n            ms.Position = 0;\r\n            await JsonSerializer.DeserializeAsync<Foo>(ms);\r\n        }\r\n    }\r\n}\r\n\r\npublic struct Foo\r\n{\r\n    public int Value1 { get; set; }\r\n    public double Value2 { get; set; }\r\n}\r\n```\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/40867","RelatedDescription":"Open PR \"Fix some low-hanging fruit boxing in JsonSerializer\" (#40867)"},{"Id":"490032227","IsPullRequest":false,"CreatedAt":"2019-09-06T01:43:31","Actor":"findyoucef","Number":"40857","RawContent":null,"Title":"System.Text.Json doesn't deserialize ASP.NET JSON date","State":"closed","Body":"System.Text.Json fails to deserialize ASP.NET JSON dates such as \"/Date(1530144000000+0530)/\" which seems silly as there are still microsoft apis using this date format. specifically the O365 Service Health Api.","Url":"https://github.com/dotnet/corefx/issues/40857","RelatedDescription":"Closed issue \"System.Text.Json doesn't deserialize ASP.NET JSON date\" (#40857)"},{"Id":"490073354","IsPullRequest":false,"CreatedAt":"2019-09-06T00:37:01","Actor":"jasonpugsley","Number":"40865","RawContent":null,"Title":"Add Runtime ID for FreeBSD 12","State":"open","Body":"I have successfully built dotnet 3.0 preview6, 8 and just now 9 from source (preview8 was released before I got around to 7) on FreeBSD 12 and I would like to see it added to the source along with the existing 11.x RIDs. I'm just not sure how to do this correctly.\r\n\r\nI don't know if FreeBSD 11 and 12 are ABI compatible so I don't know what the RID-graph should look like. Any help would be appreciated.\r\n\r\nKudos to everyone who has helped get the FreeBSD runtime working. It seems like it's ready to be added to the automated build system. I know there are gaps that still need to be filled to get a fully useful FreeBSD runtime, but automated builds would be a great incentive to get people working on all the PlatformNotSupportedException's\r\n\r\nAlso, I understand it can't be in the 3.0 release but I would love to hear something at .NET Conf about FreeBSD in 3.1 or 5.","Url":"https://github.com/dotnet/corefx/issues/40865","RelatedDescription":"Open issue \"Add Runtime ID for FreeBSD 12\" (#40865)"},{"Id":"490072274","IsPullRequest":true,"CreatedAt":"2019-09-06T00:32:11","Actor":"dotnet-maestro[bot]","Number":"40864","RawContent":null,"Title":"[release/3.0-preview9] Update dependencies from dotnet/coreclr","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:fb9107a0-b3ab-40eb-a0f8-08d721cca946)\r\n## From https://github.com/dotnet/coreclr\r\n- **Build**: 20190905.6\r\n- **Date Produced**: 9/5/2019 9:46 PM\r\n- **Commit**: aed84886b8d777168f53fae4da15c7af5f7572da\r\n- **Branch**: refs/heads/release/3.0-preview9\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk.IL** -> 3.0.0-rc1.19455.6\r\n  - **Microsoft.NETCore.ILAsm** -> 3.0.0-rc1.19455.6\r\n  - **Microsoft.NETCore.Runtime.CoreCLR** -> 3.0.0-rc1.19455.6\r\n\r\n[marker]: <> (End:fb9107a0-b3ab-40eb-a0f8-08d721cca946)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/40864","RelatedDescription":"Closed or merged PR \"[release/3.0-preview9] Update dependencies from dotnet/coreclr\" (#40864)"},{"Id":"490056567","IsPullRequest":true,"CreatedAt":"2019-09-06T00:16:09","Actor":"dotnet-maestro[bot]","Number":"40862","RawContent":null,"Title":"[release/3.1] Update dependencies from dotnet/standard","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:0098719e-62fd-45c8-cd5b-08d72a4d12e0)\r\n## From https://github.com/dotnet/standard\r\n- **Build**: 20190905.4\r\n- **Date Produced**: 9/5/2019 10:46 PM\r\n- **Commit**: c4baa9ceabeceef9d7752ed88da12c2f12c914a5\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **NETStandard.Library** -> 2.1.0-prerelease.19455.4\r\n\r\n[marker]: <> (End:0098719e-62fd-45c8-cd5b-08d72a4d12e0)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/40862","RelatedDescription":"Closed or merged PR \"[release/3.1] Update dependencies from dotnet/standard\" (#40862)"},{"Id":"490034016","IsPullRequest":true,"CreatedAt":"2019-09-05T23:49:17","Actor":"wfurt","Number":"40858","RawContent":null,"Title":"update SendAsync_ConcurentSendReceive_Ok to use DuplexContent","State":"closed","Body":"I updated this test to use DuplexContent instead of SlowStream. It takes less than .5s to run all 4 variants. It uses synchronization instead of delays to cover duplex and non-duplex processing. \r\nI also added more comments. \r\n\r\n```\r\n  ~/github/wfurt-corefx-new/artifacts/bin/System.Net.Http.Functional.Tests/netcoreapp-Unix-Debug ~/github/wfurt-corefx-new/src/System.Net.Http/tests/FunctionalTests\r\n    Discovering: System.Net.Http.Functional.Tests (method display = ClassAndMethod, method display options = None)\r\n    Discovered:  System.Net.Http.Functional.Tests (found 1 of 1136 test case)\r\n    Starting:    System.Net.Http.Functional.Tests (parallel test collections = on, max threads = 8)\r\n      System.Net.Http.Functional.Tests.SocketsHttpHandlerTest_Http2.SendAsync_ConcurentSendReceive_Ok(shouldWaitForRequestBody: True, responseCode: Forbidden) [STARTING]\r\n      System.Net.Http.Functional.Tests.SocketsHttpHandlerTest_Http2.SendAsync_ConcurentSendReceive_Ok(shouldWaitForRequestBody: True, responseCode: Forbidden) [FINISHED] Time: 0.3171338s\r\n      System.Net.Http.Functional.Tests.SocketsHttpHandlerTest_Http2.SendAsync_ConcurentSendReceive_Ok(shouldWaitForRequestBody: False, responseCode: Forbidden) [STARTING]\r\n      System.Net.Http.Functional.Tests.SocketsHttpHandlerTest_Http2.SendAsync_ConcurentSendReceive_Ok(shouldWaitForRequestBody: False, responseCode: Forbidden) [FINISHED] Time: 0.0098563s\r\n      System.Net.Http.Functional.Tests.SocketsHttpHandlerTest_Http2.SendAsync_ConcurentSendReceive_Ok(shouldWaitForRequestBody: True, responseCode: OK) [STARTING]\r\n      System.Net.Http.Functional.Tests.SocketsHttpHandlerTest_Http2.SendAsync_ConcurentSendReceive_Ok(shouldWaitForRequestBody: True, responseCode: OK) [FINISHED] Time: 0.0082169s\r\n      System.Net.Http.Functional.Tests.SocketsHttpHandlerTest_Http2.SendAsync_ConcurentSendReceive_Ok(shouldWaitForRequestBody: False, responseCode: OK) [STARTING]\r\n      System.Net.Http.Functional.Tests.SocketsHttpHandlerTest_Http2.SendAsync_ConcurentSendReceive_Ok(shouldWaitForRequestBody: False, responseCode: OK) [FINISHED] Time: 0.0064049s\r\n    Finished:    System.Net.Http.Functional.Tests\r\n  === TEST EXECUTION SUMMARY ===\r\n     System.Net.Http.Functional.Tests  Total: 4, Errors: 0, Failed: 0, Skipped: 0, Time: 0.511s\r\n```\r\n\r\nfixes #39046\r\n","Url":"https://github.com/dotnet/corefx/pull/40858","RelatedDescription":"Closed or merged PR \"update SendAsync_ConcurentSendReceive_Ok to use DuplexContent\" (#40858)"},{"Id":"489940889","IsPullRequest":true,"CreatedAt":"2019-09-05T23:27:05","Actor":"Anipik","Number":"40849","RawContent":null,"Title":"update branding of rc1 to rc2 for release 3.0 branch","State":"closed","Body":"","Url":"https://github.com/dotnet/corefx/pull/40849","RelatedDescription":"Closed or merged PR \"update branding of rc1 to rc2 for release 3.0 branch\" (#40849)"},{"Id":"489971803","IsPullRequest":true,"CreatedAt":"2019-09-05T23:20:34","Actor":"dotnet-maestro[bot]","Number":"40852","RawContent":null,"Title":"[release/3.1] Update dependencies from dotnet/coreclr","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:dbb830b1-8f81-460f-dd40-08d72a4caef5)\r\n## From https://github.com/dotnet/coreclr\r\n- **Build**: 20190905.4\r\n- **Date Produced**: 9/5/2019 4:27 PM\r\n- **Commit**: 3db91a804248d3ac0056bd8826fc8511a1a0dd30\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk.IL** -> 3.1.0-preview1.19455.4\r\n  - **Microsoft.NETCore.ILAsm** -> 3.1.0-preview1.19455.4\r\n  - **Microsoft.NETCore.Runtime.CoreCLR** -> 3.1.0-preview1.19455.4\r\n\r\n[marker]: <> (End:dbb830b1-8f81-460f-dd40-08d72a4caef5)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/40852","RelatedDescription":"Closed or merged PR \"[release/3.1] Update dependencies from dotnet/coreclr\" (#40852)"},{"Id":"490053764","IsPullRequest":true,"CreatedAt":"2019-09-05T23:09:09","Actor":"dotnet-maestro-bot","Number":"40860","RawContent":null,"Title":"[automated] Merge branch 'release/3.0' => 'release/3.1'","State":"open","Body":"I detected changes in the release/3.0 branch which have not been merged yet to release/3.1. I'm a robot and am configured to help you automatically keep release/3.1 up to date, so I've opened this PR.\r\n\r\nThis PR merges commits made on release/3.0 by the following committers:\n\n* @dotnet-maestro[bot]\n* @danmosemsft\r\n\r\n## Instructions for merging from UI\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, complete this PR by creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nIf this repo does not allow creating merge commits from the GitHub UI, use command line instructions.\r\n\r\n## Instructions for merging via command line\r\n\r\nRun these commands to merge this pull request from the command line.\r\n\r\n``` sh\r\ngit fetch\r\ngit checkout release/3.0\r\ngit pull --ff-only\r\ngit checkout release/3.1\r\ngit pull --ff-only\r\ngit merge --no-ff release/3.0\r\n\r\n# If there are merge conflicts, resolve them and then run git merge --continue to complete the merge\r\n# Pushing the changes to the PR branch will re-trigger PR validation.\r\ngit push https://github.com/dotnet-maestro-bot/corefx HEAD:merge/release/3.0-to-release/3.1\r\n```\r\n\r\n<details>\r\n<summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit push git@github.com:dotnet-maestro-bot/corefx HEAD:merge/release/3.0-to-release/3.1\r\n```\r\n\r\n</details>\r\n\r\n\r\nAfter PR checks are complete push the branch\r\n```\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging. You can do this [using GitHub][resolve-github] or using the [command line][resolve-cli].\r\n\r\n[resolve-github]: https://help.github.com/articles/resolving-a-merge-conflict-on-github/\r\n[resolve-cli]: https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/\r\n\r\n## Instructions for updating this pull request\r\n\r\nContributors to this repo have permission update this pull request by pushing to the branch 'merge/release/3.0-to-release/3.1'. This can be done to resolve conflicts or make other changes to this pull request before it is merged.\r\n\r\n```\r\ngit checkout -b merge/release/3.0-to-release/3.1 release/3.1\r\ngit pull https://github.com/dotnet-maestro-bot/corefx merge/release/3.0-to-release/3.1\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push https://github.com/dotnet-maestro-bot/corefx HEAD:merge/release/3.0-to-release/3.1\r\n```\r\n\r\n<details>\r\n    <summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit checkout -b merge/release/3.0-to-release/3.1 release/3.1\r\ngit pull git@github.com:dotnet-maestro-bot/corefx merge/release/3.0-to-release/3.1\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push git@github.com:dotnet-maestro-bot/corefx HEAD:merge/release/3.0-to-release/3.1\r\n```\r\n\r\n</details>\r\n\r\nContact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.\r\n","Url":"https://github.com/dotnet/corefx/pull/40860","RelatedDescription":"Open PR \"[automated] Merge branch 'release/3.0' => 'release/3.1'\" (#40860)"},{"Id":"490031875","IsPullRequest":true,"CreatedAt":"2019-09-05T23:06:14","Actor":"dotnet-maestro[bot]","Number":"40856","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/coreclr","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:66928e2e-bd95-4f7e-280f-08d690bc5860)\r\n## From https://github.com/dotnet/coreclr\r\n- **Build**: 20190905.5\r\n- **Date Produced**: 9/5/2019 6:59 PM\r\n- **Commit**: 37fa8ea7a22966bd6b57ac3488d852f63dfae551\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk.IL** -> 3.0.0-rc1.19455.5\r\n  - **Microsoft.NETCore.ILAsm** -> 3.0.0-rc1.19455.5\r\n  - **Microsoft.NETCore.Runtime.CoreCLR** -> 3.0.0-rc1.19455.5\r\n\r\n[marker]: <> (End:66928e2e-bd95-4f7e-280f-08d690bc5860)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/40856","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/coreclr\" (#40856)"},{"Id":"490013219","IsPullRequest":true,"CreatedAt":"2019-09-05T22:45:42","Actor":"steveharter","Number":"40854","RawContent":null,"Title":"Address misc non-functional nits in MetadataLoadContext","State":"closed","Body":"","Url":"https://github.com/dotnet/corefx/pull/40854","RelatedDescription":"Closed or merged PR \"Address misc non-functional nits in MetadataLoadContext\" (#40854)"},{"Id":"490036804","IsPullRequest":true,"CreatedAt":"2019-09-05T22:21:43","Actor":"dotnet-maestro-bot","Number":"40859","RawContent":null,"Title":"[automated] Merge branch 'release/3.0-preview9' => 'release/3.1'","State":"open","Body":"I detected changes in the release/3.0-preview9 branch which have not been merged yet to release/3.1. I'm a robot and am configured to help you automatically keep release/3.1 up to date, so I've opened this PR.\r\n\r\nThis PR merges commits made on release/3.0-preview9 by the following committers:\n\n* @Anipik\n* @danmosemsft\n* @stephentoub\n* @ahsonkhan\n* @mmitche\n* @dotnet-maestro[bot]\r\n\r\n## Instructions for merging from UI\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, complete this PR by creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nIf this repo does not allow creating merge commits from the GitHub UI, use command line instructions.\r\n\r\n## Instructions for merging via command line\r\n\r\nRun these commands to merge this pull request from the command line.\r\n\r\n``` sh\r\ngit fetch\r\ngit checkout release/3.0-preview9\r\ngit pull --ff-only\r\ngit checkout release/3.1\r\ngit pull --ff-only\r\ngit merge --no-ff release/3.0-preview9\r\n\r\n# If there are merge conflicts, resolve them and then run git merge --continue to complete the merge\r\n# Pushing the changes to the PR branch will re-trigger PR validation.\r\ngit push https://github.com/dotnet-maestro-bot/corefx HEAD:merge/release/3.0-preview9-to-release/3.1\r\n```\r\n\r\n<details>\r\n<summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit push git@github.com:dotnet-maestro-bot/corefx HEAD:merge/release/3.0-preview9-to-release/3.1\r\n```\r\n\r\n</details>\r\n\r\n\r\nAfter PR checks are complete push the branch\r\n```\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging. You can do this [using GitHub][resolve-github] or using the [command line][resolve-cli].\r\n\r\n[resolve-github]: https://help.github.com/articles/resolving-a-merge-conflict-on-github/\r\n[resolve-cli]: https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/\r\n\r\n## Instructions for updating this pull request\r\n\r\nContributors to this repo have permission update this pull request by pushing to the branch 'merge/release/3.0-preview9-to-release/3.1'. This can be done to resolve conflicts or make other changes to this pull request before it is merged.\r\n\r\n```\r\ngit checkout -b merge/release/3.0-preview9-to-release/3.1 release/3.1\r\ngit pull https://github.com/dotnet-maestro-bot/corefx merge/release/3.0-preview9-to-release/3.1\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push https://github.com/dotnet-maestro-bot/corefx HEAD:merge/release/3.0-preview9-to-release/3.1\r\n```\r\n\r\n<details>\r\n    <summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit checkout -b merge/release/3.0-preview9-to-release/3.1 release/3.1\r\ngit pull git@github.com:dotnet-maestro-bot/corefx merge/release/3.0-preview9-to-release/3.1\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push git@github.com:dotnet-maestro-bot/corefx HEAD:merge/release/3.0-preview9-to-release/3.1\r\n```\r\n\r\n</details>\r\n\r\nContact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.\r\n","Url":"https://github.com/dotnet/corefx/pull/40859","RelatedDescription":"Open PR \"[automated] Merge branch 'release/3.0-preview9' => 'release/3.1'\" (#40859)"},{"Id":"489963747","IsPullRequest":true,"CreatedAt":"2019-09-05T22:18:31","Actor":"Anipik","Number":"40851","RawContent":null,"Title":"updating 3.0 preview 9 branch to represent rc1","State":"closed","Body":"","Url":"https://github.com/dotnet/corefx/pull/40851","RelatedDescription":"Closed or merged PR \"updating 3.0 preview 9 branch to represent rc1\" (#40851)"},{"Id":"490022108","IsPullRequest":true,"CreatedAt":"2019-09-05T21:37:32","Actor":"Buildstarted","Number":"40855","RawContent":null,"Title":"Short circuit Clamp when value = min","State":"open","Body":"When `value == min` we can return immediately and not execute the next if statement.\r\n\r\nBenchmarks\r\n============\r\n```\r\n|                 Method | value | min | max |      Mean |     Error |    StdDev |\r\n|----------------------- |------ |---- |---- |----------:|----------:|----------:|\r\n|              MathClamp |     0 |   0 |  10 | 0.5672 ns | 0.0073 ns | 0.0068 ns |\r\n|  ShortCircuitMathClamp |     0 |   0 |  10 | 0.2581 ns | 0.0090 ns | 0.0084 ns |\r\n```\r\n\r\nSeems to be approximately twice as fast when `value == min`.\r\n\r\nI did not alter double, decimal, or float.","Url":"https://github.com/dotnet/corefx/pull/40855","RelatedDescription":"Open PR \"Short circuit Clamp when value = min\" (#40855)"},{"Id":"489981561","IsPullRequest":false,"CreatedAt":"2019-09-05T20:21:27","Actor":"TomChalkerApption","Number":"40853","RawContent":null,"Title":"AuthorizeView markup missing in dotnet Preview 9","State":"open","Body":"After installing the Preview9 runtime and sdk, updating my Blazor app to used the Prevew9 libraries, my existing &lt;AuthorizeView&gt; markup is generating errors:\r\n\r\n\"Found markup element with unexpected name 'AuthorizeView'. If this is meant to be component, and a using directive for its namespace\"\r\n\r\nThis applies to related tags such as &lt;Authorized&gt;, &lt;NotAuthorized&gt; and the special Authorize parameter 'context'\r\n","Url":"https://github.com/dotnet/corefx/issues/40853","RelatedDescription":"Open issue \"AuthorizeView markup missing in dotnet Preview 9\" (#40853)"},{"Id":"489931225","IsPullRequest":true,"CreatedAt":"2019-09-05T19:34:48","Actor":"dotnet-maestro[bot]","Number":"40847","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/coreclr","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:66928e2e-bd95-4f7e-280f-08d690bc5860)\r\n## From https://github.com/dotnet/coreclr\r\n- **Build**: 20190905.3\r\n- **Date Produced**: 9/5/2019 3:49 PM\r\n- **Commit**: 668f053e1ad0c4261ec71abc6905e0d48f4c39ca\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk.IL** -> 3.0.0-rc1.19455.3\r\n  - **Microsoft.NETCore.ILAsm** -> 3.0.0-rc1.19455.3\r\n  - **Microsoft.NETCore.Runtime.CoreCLR** -> 3.0.0-rc1.19455.3\r\n\r\n[marker]: <> (End:66928e2e-bd95-4f7e-280f-08d690bc5860)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/40847","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/coreclr\" (#40847)"},{"Id":"489922748","IsPullRequest":true,"CreatedAt":"2019-09-05T19:12:25","Actor":"dotnet-maestro[bot]","Number":"40844","RawContent":null,"Title":"[release/3.1] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:8e91fa34-ea12-4ebd-d4c2-08d7315d8bc7)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190905.3\r\n- **Date Produced**: 9/5/2019 4:27 PM\r\n- **Commit**: fee4ebe849050a385a4999e4c84fa61c1dc234bb\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions** -> 2.4.1-beta.19455.3\r\n  - **Microsoft.DotNet.XUnitConsoleRunner** -> 2.5.1-beta.19455.3\r\n  - **Microsoft.DotNet.VersionTools.Tasks** -> 1.0.0-beta.19455.3\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19455.3\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19455.3\r\n  - **Microsoft.DotNet.Build.Tasks.Configuration** -> 1.0.0-beta.19455.3\r\n  - **Microsoft.DotNet.Build.Tasks.Feed** -> 2.2.0-beta.19455.3\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19455.3\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19455.3\r\n  - **Microsoft.DotNet.CoreFxTesting** -> 1.0.0-beta.19455.3\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19455.3\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19455.3\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19455.3\r\n  - **Microsoft.DotNet.RemoteExecutor** -> 1.0.0-beta.19455.3\r\n\r\n[marker]: <> (End:8e91fa34-ea12-4ebd-d4c2-08d7315d8bc7)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/40844","RelatedDescription":"Closed or merged PR \"[release/3.1] Update dependencies from dotnet/arcade\" (#40844)"},{"Id":"489941728","IsPullRequest":false,"CreatedAt":"2019-09-05T19:00:14","Actor":"qmfrederik","Number":"40850","RawContent":null,"Title":"Process.MainModule.FileName incorrect with kernel 5.0.0-27-generic (causing MSBuild to be broken)","State":"open","Body":"See https://github.com/dotnet/core/issues/3312 and https://github.com/dotnet/core/issues/3309 .\r\n\r\nThere are various reports of `Process.GetCurrentProcess().MainModule.FileName` returning an incorrect value when running .NET Core inside a container on Ubuntu 19.04 using kernel 5.0.0-27-generic. Reverting back to kernel 5.0.0-25-generic fixes this issue.\r\n\r\nThe same issue also reproduces on the Azure variant of Ubuntu, with kernel version 5.0.0-1018.\r\n\r\nThe simplest steps to repro that I know of are in https://github.com/dotnet/core/issues/3309 .","Url":"https://github.com/dotnet/corefx/issues/40850","RelatedDescription":"Open issue \"Process.MainModule.FileName incorrect with kernel 5.0.0-27-generic (causing MSBuild to be broken)\" (#40850)"},{"Id":"489936188","IsPullRequest":false,"CreatedAt":"2019-09-05T18:47:13","Actor":"snappyfoo","Number":"40848","RawContent":null,"Title":"IsolationLevel is missing the FlagsAttribute","State":"open","Body":"The [documentation ](https://docs.microsoft.com/en-us/dotnet/api/system.data.isolationlevel?view=netcore-2.2)for IsolationLevel states that it has the FlagsAttribute, meaning that values can be combined. But trying to do so gives the error \"Bitwise operation on enum which is not marked by [Flags] attribute\"\r\n\r\nLooking at the [source code](https://github.com/dotnet/corefx/blob/master/src/System.Data.Common/src/System/Data/IsolationLevel.cs) shows that it doesn't have the attribute.\r\n\r\nAm I missing something? Please help me out here, I was hoping to be able to combine ReadCommitted and Snapshot as there is a READ_COMMITTED_SNAPSHOT isolation level in SQL Server and I assumed combining those two IsolationLevels would be a way to achieve that? If not, how?","Url":"https://github.com/dotnet/corefx/issues/40848","RelatedDescription":"Open issue \"IsolationLevel is missing the FlagsAttribute\" (#40848)"},{"Id":"489928141","IsPullRequest":false,"CreatedAt":"2019-09-05T18:28:27","Actor":"Anipik","Number":"40846","RawContent":null,"Title":"Future of System.Data.SqlClient for 5.0","State":"open","Body":"This issue is mainly to discuss the future of System.Data.SqlClient package.\r\nCurrently it is shipped as an out of box package and public surface area of this freezed.\r\n\r\nDo we want to keep shipping this package in 5.0.0 or should we just want to remove this from 5.0 onward ?\r\n\r\ncc @cheenamalhotra, @Gary-Zh , @david-engel, @safern @ericstj ","Url":"https://github.com/dotnet/corefx/issues/40846","RelatedDescription":"Open issue \"Future of System.Data.SqlClient for 5.0\" (#40846)"},{"Id":"489924980","IsPullRequest":false,"CreatedAt":"2019-09-05T18:21:54","Actor":"davidfowl","Number":"40845","RawContent":null,"Title":"API Proposal: SequenceReader<T>.TryPeek overloads for look ahead","State":"open","Body":"Today it isn't easy to get the value at a specific position from the `ReadOnlySequence<T>` making it hard to write parsers that look ahead at data without moving the reader.\r\n\r\n```C#\r\npublic partial ref struct SequenceReader<T>\r\n{\r\n    bool TryPeek(SequencePosition position, out T value);\r\n    bool TryPeek(int count, out T value);\r\n}\r\n```\r\n\r\ncc @softworkz","Url":"https://github.com/dotnet/corefx/issues/40845","RelatedDescription":"Open issue \"API Proposal: SequenceReader<T>.TryPeek overloads for look ahead\" (#40845)"},{"Id":"489889054","IsPullRequest":true,"CreatedAt":"2019-09-05T18:17:28","Actor":"Anipik","Number":"40841","RawContent":null,"Title":"Update package branding","State":"closed","Body":"Fixes https://github.com/dotnet/corefx/pull/40823/files/f30f32497670355f5b3b130e909b0b859bfa7318#diff-8b8f08ffbf7b863fb3700c1718eeb4cb\r\n\r\nThe other pr might take some time to get merged. So in order to unblock the tfm upstack stuff, I am fixing it here.","Url":"https://github.com/dotnet/corefx/pull/40841","RelatedDescription":"Closed or merged PR \"Update package branding\" (#40841)"},{"Id":"489922705","IsPullRequest":false,"CreatedAt":"2019-09-05T18:16:46","Actor":"davidfowl","Number":"40843","RawContent":null,"Title":"API Proposal: SequenceReader<T>.AdvanceTo(SequencePosition)","State":"open","Body":"Today it isn't possible to Advance to a specific `SequencePosition` within the `ReadOnlySequence<T>`. The scenario is a scan using another method (like `PositionOf`) that returns a `SequencePosition` then using it to further parse the Reader. To achieve the same thing today you need to create a new `SequenceReader<T>` with the sliced `ReadOnlySequence<T>`.\r\n\r\n\r\n```C#\r\npublic partial ref struct SequenceReader\r\n{\r\n    void AdvanceTo(SequencePosition position);\r\n}\r\n```\r\n\r\nUsage:\r\n\r\n```C#\r\nvoid Parse(in ReadOnlySequence<byte>data, byte startByte)\r\n{\r\n    var reader = new SequenceReader<byte>(data);\r\n\r\n    SequencePosition? position = data.PositionOf(startByte);\r\n    if (position == null) return;\r\n\r\n    reader.AdvanceTo(position);\r\n\r\n    ParseReader(ref reader);\r\n}\r\n```","Url":"https://github.com/dotnet/corefx/issues/40843","RelatedDescription":"Open issue \"API Proposal: SequenceReader<T>.AdvanceTo(SequencePosition)\" (#40843)"},{"Id":"489919128","IsPullRequest":false,"CreatedAt":"2019-09-05T18:08:16","Actor":"filipnavara","Number":"40842","RawContent":null,"Title":"VB tests not running correctly on Linux/macOS","State":"open","Body":"PR #40365 added couple of new test for Microsoft.VisualBasic.Core assembly. The following tests access registry and work on Windows only:\r\n\r\n- Microsoft.VisualBasic.Tests.InteractionTests.SaveSetting\r\n- Microsoft.VisualBasic.Tests.InteractionTests.DeleteSetting\r\n- Microsoft.VisualBasic.Tests.InteractionTests.GetAllSettings\r\n- Microsoft.VisualBasic.Tests.InteractionTests.GetSetting\r\n\r\nThe tests are guarded by the following condition:\r\n\r\nhttps://github.com/dotnet/corefx/blob/063568705557b469606eef1069946484d78034ae/src/Microsoft.VisualBasic.Core/tests/InteractionTests.cs#L14\r\n\r\nUnfortunately the condition is incorrect for non-Windows platforms.\r\n\r\nIt should be fixed. Also, it should be investigated why it doesn't trigger an error on the CI. We initially discovered it on Mono on macOS which consumes the CoreFX test assemblies through a feed.","Url":"https://github.com/dotnet/corefx/issues/40842","RelatedDescription":"Open issue \"VB tests not running correctly on Linux/macOS\" (#40842)"}],"ResultType":"GitHubIssue"},"Roslyn-Issues":{"Issues":[{"Id":"490101556","IsPullRequest":false,"CreatedAt":"2019-09-06T02:54:14","Actor":"yyjdelete","Number":"38542","RawContent":null,"Title":"Consider add an diagnostic to report call to an virtual method via base from an different method?","State":"open","Body":"**Version Used**: \r\nVS2019 16.3.0preview3.0(3.3.1-beta3-19430-03+fa8e2c9b566e4471a3509fc63d7baca0a2a6d30b)\r\nwith `Microsoft.CodeAnalysis.FxCopAnalyzers` 2.9.4\r\n\r\n**Steps to Reproduce**:\r\n\r\n```cs\r\n    public class Class1\r\n    {\r\n        public virtual void Test1()\r\n        {\r\n        }\r\n\r\n        /*public void Test2()\r\n        {\r\n        }*/\r\n    }\r\n    public class Class2 : Class1\r\n    {\r\n        public void Test2()\r\n        {\r\n            base.Test1();\r\n        }\r\n    }\r\n    public class Class3 : Class2\r\n    {\r\n        public override void Test1()\r\n        {\r\n            Console.WriteLine(\"Do something.\");\r\n        }\r\n    }\r\n```\r\n\r\n**Expected Behavior**:\r\nIt will be better if roslyn can report an diagnostic(Info or Warn) for `base.Test1();`(call virtual method `Class1.Test1()` via `base` from another method `Test2()`), it can easily be an mistake of `base.Test2()` or `this.Test1()`(I used to use `base` when there is no `Test1()` in `Class2`, but it will also make the override in `Class3.Test1()` useless).\r\n\r\n**Actual Behavior**:\r\nNo diagnostic is reported.\r\n","Url":"https://github.com/dotnet/roslyn/issues/38542","RelatedDescription":"Open issue \"Consider add an diagnostic to report call to an virtual method via base from an different method?\" (#38542)"},{"Id":"490093934","IsPullRequest":false,"CreatedAt":"2019-09-06T02:18:46","Actor":"petrroll","Number":"38541","RawContent":null,"Title":"Debuger can't evaluate expression ImmutableArray<'namedTuple'>","State":"open","Body":"**Version Used**: \r\nCurrent Int Preview + Roslyn ~master\r\n**Steps to Reproduce**:\r\n\r\n![image](https://user-images.githubusercontent.com/1764721/64396243-dbabc680-d011-11e9-8a88-bab32d14744e.png)\r\n\r\n**Expected Behavior**:\r\nAll expressions in locals are evaluated.\r\n\r\n**Actual Behavior**:\r\nNone of them is.\r\n\r\n---\r\nI'll try to provide more info / minimal repro if I have time tomorrow.","Url":"https://github.com/dotnet/roslyn/issues/38541","RelatedDescription":"Open issue \"Debuger can't evaluate expression ImmutableArray<'namedTuple'>\" (#38541)"},{"Id":"490084827","IsPullRequest":false,"CreatedAt":"2019-09-06T01:35:03","Actor":"davkean","Number":"38540","RawContent":null,"Title":"\"Introduce using startment\" refactoring doesn't show up in the middle of a variable","State":"open","Body":"**Version Used**: \r\n\r\n**Steps to Reproduce**:\r\n\r\nThis occurs for both C# and VB.\r\n\r\n1.  CTRL+. at $\r\n\r\n``` C#\r\nusing System;\r\nusing System.IO;\r\n\r\nclass Class1\r\n{\r\n    public static void Main()\r\n    {\r\n        Stream stream = G$etStream();\r\n\r\n        Console.WriteLine(stream);\r\n    }\r\n\r\n    private static Stream GetStream()\r\n    {\r\n        return null;\r\n    }\r\n}\r\n\r\n```\r\n\r\nExpected: \r\n![image](https://user-images.githubusercontent.com/1103906/64394534-fe81bd80-d099-11e9-95f6-bc57634d5b52.png)\r\n\r\nActual:\r\nNothing, the refactoring isn't available\r\n\r\nThis is particularly odd when the CA00067 complains about the type not being disposed and covers the entire span of the variable, so you can suppress the warning but not introduce the fix.\r\n\r\n","Url":"https://github.com/dotnet/roslyn/issues/38540","RelatedDescription":"Open issue \"\"Introduce using startment\" refactoring doesn't show up in the middle of a variable\" (#38540)"},{"Id":"490075448","IsPullRequest":false,"CreatedAt":"2019-09-06T00:48:13","Actor":"vsfeedback","Number":"38539","RawContent":null,"Title":"Using with alias in suggestions","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/711223/using-with-alias-in-suggestions.html)._\n\n---\nAdd the option to automatically add a using statement with an alias instead. I have a class that I need a using, but I don't want to include everything in that namespace so I need something like this : \n`using MyClass = Namespace.Something.MyClass`\n\nIt would be nice if it was in the suggestions instead of the more common `using Namespace.Something`\n\n---\n### Original Comments\n\n#### Jane Wu [MSFT] on 8/26/2019, 00:55 AM: \n\n<p>Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.</p>\n","Url":"https://github.com/dotnet/roslyn/issues/38539","RelatedDescription":"Open issue \"Using with alias in suggestions\" (#38539)"},{"Id":"490072705","IsPullRequest":false,"CreatedAt":"2019-09-06T00:33:45","Actor":"kendrahavens","Number":"38538","RawContent":null,"Title":"Choose patterns and paradigms while developing code","State":"open","Body":"[Original devcomm feedback](https://developercommunity.visualstudio.com/content/idea/710883/choose-patterns-and-paradigms-while-developing-cod.html)\r\n\r\n* Ability to choose a coding paradigm: TDD, DDD, etc.\r\n* Provide Quick Actions/notifications to lead user towards paradigm\r\n\r\nCustomer Quote:\r\n> It would be great that while creating a new project I could select what type of design or paradigm I would like to keep such as DDD or TDD and then during development some scafolding of the main concepts may happens. On DDD Entity, Event AgregateRoot classes for example. On DDD for example when creating some class the Visual studio could show some hints. if the developer was writing logic methods referencing many times some class a suggestion could pop up saying : “ it looks like this is domain logic to this entity.. if so consider moving this to the class” . Or in another use case. Regarding if a developer choose TDD when any new public or internal method of some class was created... a pop up would say:” you have chosen TDD in this project! You should start with the unit tests! “\r\n\r\n(I'm leaving the devcomm feedback open to see if it accumulates votes there.)\r\n\r\n","Url":"https://github.com/dotnet/roslyn/issues/38538","RelatedDescription":"Open issue \"Choose patterns and paradigms while developing code\" (#38538)"},{"Id":"490070721","IsPullRequest":false,"CreatedAt":"2019-09-06T00:23:46","Actor":"vsfeedback","Number":"38537","RawContent":null,"Title":"Allow deleting entries in FindXXX dialogs. ","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/701847/allow-deleting-entries-in-findxxx-dialogs.html)._\n\n---\nAllow deleting entries in FindXXX dialogs such as Find all references / Find callsites, ... \nUsecase: Want to investigate all callsites of some function\n- Find all references on method declaration\n- Go one by one (from top bottom) checking them (not changing)\n- Some of them might require more investigation, get skipped -&gt; no way to mark them / preserve info that one should return to them.\n\n---\n### Original Comments\n\n#### Jane Wu [MSFT] on 8/21/2019, 04:10 AM: \n\n<p>Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.</p>\n\n#### Petr Houska [MSFT] on 8/26/2019, 05:14 PM: \n\nE.g. Call hierarchy allow deleting items.","Url":"https://github.com/dotnet/roslyn/issues/38537","RelatedDescription":"Open issue \"Allow deleting entries in FindXXX dialogs. \" (#38537)"},{"Id":"490069995","IsPullRequest":false,"CreatedAt":"2019-09-06T00:20:13","Actor":"vsfeedback","Number":"38536","RawContent":null,"Title":"Code generated automatically by VS 16.2.3 should conform to good practice rules","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/703149/code-generated-automatically-by-vs-1623-should-con.html)._\n\n---\nI generated a new c# project under Visual Studio 16.2.3 and build it, FxCop being loaded.\nThe build succeeded but the number of warnings was impressive.\nOf course I can suppress the warnnings, but it would be like driving without brakes.\nCould a new release of VS generate code that conforms to the rules \nList:\nCA5368\n CA1056\n CA1052\n CA1707\n CA1716\n CA1305\n CA1303\n CA1062\n CA1055\n CA1054\n CA1822\n CA2000\n CA1806\n\n---\n### Original Comments\n\n#### Jane Wu [MSFT] on 8/21/2019, 04:17 AM: \n\n<p>Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.</p>\n","Url":"https://github.com/dotnet/roslyn/issues/38536","RelatedDescription":"Open issue \"Code generated automatically by VS 16.2.3 should conform to good practice rules\" (#38536)"},{"Id":"490067646","IsPullRequest":false,"CreatedAt":"2019-09-06T00:08:59","Actor":"vsfeedback","Number":"38535","RawContent":null,"Title":"Considerer using async method instead of sync","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/662304/considerer-using-async-method-instead-of-sync.html)._\n\n---\n<p>I would like to suggest a warning or message when a sync method is being used instead of its async version. For example, supposing we have this interface:</p><pre><code>public interface IFoo  {      int DoSomething();      Task&lt;int&gt; DoSomethingAsync(); } </code></pre><p>and in the code we are using the sync version:</p><pre><code>var result = foo. DoSomething(); </code></pre><p>I would like to see a warning/message saying that <code>DoSomething</code> has an async version.<br> This idea came to my mind when I noticed that a service in my company was suffering from thread starvation. <br>After some hours we figured out that a few methods were being called with the sync version instead of async, which was blocking the thread and causing a lot of timeouts.</p>\n\n---\n### Original Comments\n\n#### Jane Wu [MSFT] on 7/25/2019, 09:48 PM: \n\n<p>Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.</p>\n","Url":"https://github.com/dotnet/roslyn/issues/38535","RelatedDescription":"Open issue \"Considerer using async method instead of sync\" (#38535)"},{"Id":"490066177","IsPullRequest":true,"CreatedAt":"2019-09-06T00:02:03","Actor":"dotnet-bot","Number":"38534","RawContent":null,"Title":"Merge master to master-vs-deps","State":"open","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/38534","RelatedDescription":"Open PR \"Merge master to master-vs-deps\" (#38534)"},{"Id":"490065994","IsPullRequest":true,"CreatedAt":"2019-09-06T00:01:16","Actor":"dotnet-bot","Number":"38533","RawContent":null,"Title":"Merge release/dev16.3-vs-deps to master-vs-deps","State":"open","Body":"\nThis is an automatically generated pull request from release/dev16.3-vs-deps into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.3-vs-deps-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/release/dev16.3-vs-deps\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.3-vs-deps-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/38533","RelatedDescription":"Open PR \"Merge release/dev16.3-vs-deps to master-vs-deps\" (#38533)"},{"Id":"490065780","IsPullRequest":true,"CreatedAt":"2019-09-06T00:00:18","Actor":"333fred","Number":"38532","RawContent":null,"Title":"Support reinferring collection element initializer symbols","State":"open","Body":"@dotnet/roslyn-compiler for review. /cc @jasonmalinowski @ryzngard ","Url":"https://github.com/dotnet/roslyn/pull/38532","RelatedDescription":"Open PR \"Support reinferring collection element initializer symbols\" (#38532)"},{"Id":"490065262","IsPullRequest":false,"CreatedAt":"2019-09-05T23:57:59","Actor":"kendrahavens","Number":"38531","RawContent":null,"Title":"Codestyle: disallow same variable name with different casing","State":"open","Body":"[Original devcomm ticket](https://developercommunity.visualstudio.com/content/idea/697873/have-a-setting-to-allowdisallow-veriables-with-sam.html)\r\n\r\n> Have a setting to allow/disallow variables with same name but different letter cases\r\n\r\n*Example*\r\n> I accidentally had two namespaces, GpsData and GPSData, and it allowed them both and I couldn't find the classes of the one in the other, thinking there was only one namespace. Same with variables.\r\n","Url":"https://github.com/dotnet/roslyn/issues/38531","RelatedDescription":"Open issue \"Codestyle: disallow same variable name with different casing\" (#38531)"},{"Id":"490060222","IsPullRequest":false,"CreatedAt":"2019-09-05T23:36:08","Actor":"vsfeedback","Number":"38530","RawContent":null,"Title":"Why you can not wrap a select case?","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/692463/why-you-can-not-wrap-a-select-case.html)._\n\n---\nHello,\n\nin vs 2019 you can wrap a if, while etc block but not a select case block. \n\nCan you please implement these? So you can wrap each case block inside a select case?\n\nThanks and best regards\n\n---\n### Original Comments\n\n#### Jane Wu [MSFT] on 8/15/2019, 00:31 AM: \n\n<p>Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.</p>\n","Url":"https://github.com/dotnet/roslyn/issues/38530","RelatedDescription":"Open issue \"Why you can not wrap a select case?\" (#38530)"},{"Id":"490057282","IsPullRequest":false,"CreatedAt":"2019-09-05T23:23:30","Actor":"vsfeedback","Number":"38529","RawContent":null,"Title":"Automatically add . ConfigureAwait(false) when extracting an async method","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/705733/automatically-add-configureawaitfalse-when-extract.html)._\n\n---\nWhen using the c# Extract Method feature, if the method created is an async method, Visual Studio should automatically add . ConfigureAwait(false) to the end of the call to the new method it replaces the original code with, if the final await statement in the extracted code (on any branch of execution) has . ConfigureAwait(false)\n\n---\n### Original Comments\n\n#### Jane Wu [MSFT] on 8/23/2019, 00:08 AM: \n\n<p>Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.</p>\n","Url":"https://github.com/dotnet/roslyn/issues/38529","RelatedDescription":"Open issue \"Automatically add . ConfigureAwait(false) when extracting an async method\" (#38529)"},{"Id":"489919936","IsPullRequest":true,"CreatedAt":"2019-09-05T23:05:18","Actor":"petrroll","Number":"38521","RawContent":null,"Title":"Added comments here and there.","State":"closed","Body":"When investigating approach for #38271 I've stumbled upon some code that I didn't seem to be clear to me. Tried adding a few documents & changing some parameter names to make it more obvious. \r\n\r\nNot sure if we want this level of comments in code, however. ","Url":"https://github.com/dotnet/roslyn/pull/38521","RelatedDescription":"Closed or merged PR \"Added comments here and there.\" (#38521)"},{"Id":"490042114","IsPullRequest":false,"CreatedAt":"2019-09-05T22:39:20","Actor":"chborl","Number":"38528","RawContent":null,"Title":"Move AdditionalProperty to `Microsoft.VisualStudio.LanguageServices.FindUsages` namespace as this is specific to FAR columns.","State":"open","Body":"This should be moved to `Microsoft.VisualStudio.LanguageServices.FindUsages` namespace as this is specific to FAR columns.\r\n\r\n_Originally posted by @mavasani in https://github.com/_render_node/MDExOlB1bGxSZXF1ZXN0MzA1MzA5NTEy/timeline/more_items_","Url":"https://github.com/dotnet/roslyn/issues/38528","RelatedDescription":"Open issue \"Move AdditionalProperty to `Microsoft.VisualStudio.LanguageServices.FindUsages` namespace as this is specific to FAR columns.\" (#38528)"},{"Id":"490028003","IsPullRequest":true,"CreatedAt":"2019-09-05T21:53:58","Actor":"RikkiGibson","Number":"38527","RawContent":null,"Title":"Add FIPS AppContextSwitchOverrides to some executable projects","State":"open","Body":"I added to csc, vbc, and VBCSCompiler because I assume those are the ones that use crypto (to strong name assemblies, etc). I tried out a csc built with these settings and used `/keyfile` to strong name an assembly. It just worked for me, but I don't know if there are more changes or testing needed. /cc @jaredpar.","Url":"https://github.com/dotnet/roslyn/pull/38527","RelatedDescription":"Open PR \"Add FIPS AppContextSwitchOverrides to some executable projects\" (#38527)"},{"Id":"490005010","IsPullRequest":true,"CreatedAt":"2019-09-05T21:04:57","Actor":"ivanbasov","Number":"38526","RawContent":null,"Title":"completion leaking cancellation exception","State":"open","Body":"Fixes https://github.com/dotnet/roslyn/issues/38455","Url":"https://github.com/dotnet/roslyn/pull/38526","RelatedDescription":"Open PR \"completion leaking cancellation exception\" (#38526)"},{"Id":"490001831","IsPullRequest":false,"CreatedAt":"2019-09-05T21:02:43","Actor":"mavasani","Number":"38525","RawContent":null,"Title":"Inline rename with file rename fails in a shared project","State":"open","Body":"**Version Used**: \r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Create a C# shared project\r\n2. Add a new class named Class1 and file Class1.cs\r\n3. Try to rename the class to something else. Make sure that \"Rename file\" is checked, otherwise the issue does not repro.\r\n\r\n**Expected Behavior**:\r\nRename succeeds\r\n\r\n**Actual Behavior**:\r\nRename fails with the following exception:\r\n\r\n```\r\nSystem.NotSupportedException: Changing document properties is not supported   at Microsoft.CodeAnalysis.Workspace.CheckAllowedProjectChanges(ProjectChanges projectChanges)\r\n   at Microsoft.CodeAnalysis.Workspace.CheckAllowedSolutionChanges(SolutionChanges solutionChanges)\r\n   at Microsoft.CodeAnalysis.Workspace.TryApplyChanges(Solution newSolution, IProgressTracker progressTracker)\r\n   at Microsoft.CodeAnalysis.Workspace.TryApplyChanges(Solution newSolution)\r\n   at Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.InlineRenameSession.ApplyRename(Solution newSolution, IWaitContext waitContext)\r\n   at Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.InlineRenameSession.CommitCore(IWaitContext waitContext, Boolean previewChanges)\r\n   at Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.InlineRenameSession.<>c__DisplayClass76_0.<Commit>b__0(IWaitContext waitContext)\r\n   at Microsoft.VisualStudio.LanguageServices.Implementation.Utilities.VisualStudioWaitIndicator.Wait(String title, String message, Boolean allowCancel, Boolean showProgress, Action`1 action)\r\n   at Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.InlineRenameSession.Commit(Boolean previewChanges)\r\n   at Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.RenameCommandHandler.ExecuteCommand(ReturnKeyCommandArgs args, CommandExecutionContext context)\r\n   at Microsoft.VisualStudio.Commanding.CommandHandlerExtensions.ExecuteCommand[T](ICommandHandler commandHandler, T args, Action nextCommandHandler, CommandExecutionContext executionContext)\r\n   at Microsoft.VisualStudio.UI.Text.Commanding.Implementation.EditorCommandHandlerService.<>c__DisplayClass13_1`1.<Execute>b__1()\r\n   at Microsoft.VisualStudio.Text.Utilities.GuardedOperations.CallExtensionPoint(Object errorSource, Action call, Predicate`1 exceptionFilter) --- End of stack trace from previous location where exception was thrown ---\r\n    at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)\r\n--\r\n```","Url":"https://github.com/dotnet/roslyn/issues/38525","RelatedDescription":"Open issue \"Inline rename with file rename fails in a shared project\" (#38525)"},{"Id":"489982388","IsPullRequest":true,"CreatedAt":"2019-09-05T20:23:23","Actor":"ivanbasov","Number":"38524","RawContent":null,"Title":"Updatiing TPN to the current MSFT format and adding Humanizer","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/38524","RelatedDescription":"Open PR \"Updatiing TPN to the current MSFT format and adding Humanizer\" (#38524)"},{"Id":"489979467","IsPullRequest":false,"CreatedAt":"2019-09-05T20:16:16","Actor":"IEvangelist","Number":"38523","RawContent":null,"Title":"Proposing two new refactoring options for tuple assignments in constructors","State":"open","Body":"**Version Used**: \r\n3.3.0-beta3-19407-03+d961190a1b4b2a81ac178b567840dfeff048b037\r\n\r\n**Steps to Reproduce**:\r\n\r\nThere are certain language features that could use a bit more tooling support, this is one of those situations. I would like to see a styling option for refactoring that enabled code that looks like this:\r\n\r\n```csharp\r\nclass Program\r\n{\r\n    class FooBar \r\n    {\r\n        readonly IServer _server;\r\n        readonly IActor _actor;\r\n\r\n        public FooBar(IServer server, IActor actor) \r\n        {\r\n            _server = server;\r\n            _actor = actor;\r\n        }\r\n    }\r\n    \r\n    interface IServer { }\r\n    interface IActor { }\r\n}\r\n```\r\nTo be converted to this:\r\n\r\n```csharp\r\nclass Program\r\n{\r\n    class FooBar \r\n    {\r\n        readonly IServer _server;\r\n        readonly IActor _actor;\r\n\r\n        public FooBar(IServer server, IActor actor) \r\n        {\r\n            (_server, _actor) = (server, actor);\r\n        }\r\n    }\r\n    \r\n    interface IServer { }\r\n    interface IActor { }\r\n}\r\n```\r\n\r\nTaking it a step further, if the user has already defined that their styling preference is to prefer constructor expressions when possible -- the result of the refactoring would be as follows:\r\n\r\n```csharp\r\n```csharp\r\nclass Program\r\n{\r\n    class FooBar \r\n    {\r\n        readonly IServer _server;\r\n        readonly IActor _actor;\r\n\r\n        public FooBar(IServer server, IActor actor) \r\n            => (_server, _actor) = (server, actor);\r\n    }\r\n    \r\n    interface IServer { }\r\n    interface IActor { }\r\n}\r\n```\r\n\r\nThese refactoring would need to work in the opposite manner too, going from tuple to separate statements. This proposal comes from a conversation with @BillWagner, @mikadumont and I were having in the [twitter verse](https://twitter.com/davidpine7/status/1169418926217973760?s=20).\r\n\r\n- From statements to tuple expression.\r\n- From tuple to separate statements.\r\n\r\nI'm assuming this should be labeled as \"Area-IDE\" and \"IDE-CodeStyle\"","Url":"https://github.com/dotnet/roslyn/issues/38523","RelatedDescription":"Open issue \"Proposing two new refactoring options for tuple assignments in constructors\" (#38523)"},{"Id":"489966952","IsPullRequest":false,"CreatedAt":"2019-09-05T19:49:32","Actor":"sharwell","Number":"38522","RawContent":null,"Title":"Null check with 'as' does not update nullable state","State":"open","Body":"**Version Used**: 16.3 Preview 2\r\n\r\n**Steps to Reproduce**:\r\n\r\n```csharp\r\nSomeType? value = null;\r\nif (value?.Property as AnotherType != null)\r\n{\r\n  _ = value.Property;\r\n}\r\n\r\nSomeType? value2 = null;\r\nif (value2?.Property is AnotherType)\r\n{\r\n  _ = value2.Property;\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\n\r\nNo warning is reported on the access of `value.Property` or `value2.Property`.\r\n\r\n**Actual Behavior**:\r\n\r\nA warning is reported on the access of `value.Property`, but no warning is reported on the access of 'value2.Property`.","Url":"https://github.com/dotnet/roslyn/issues/38522","RelatedDescription":"Open issue \"Null check with 'as' does not update nullable state\" (#38522)"},{"Id":"489915740","IsPullRequest":false,"CreatedAt":"2019-09-05T18:00:25","Actor":"vsfeedback","Number":"38518","RawContent":null,"Title":"Intellisense does not list members for 3th parameter in GroupJoin","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/705206/intellisense-does-not-list-members-for-3th-paramet.html)._\n\n---\n<p>What steps will reproduce the problem?</p><ol><li>Create a linq query and add a GroupJoin in it</li><li>Start typing the content of the 3th parameter</li><li>After typing the “.” the auto complete list appears, but it does not contain the members of the class</li></ol><p>What is the expected output? What do you see instead?<br>\nVisual Studio editor should display the list of member for the specified class.</p><p>PS the members of the class ARE listed in the 2nd parameter!</p><p><a href=\"https://developercommunity.visualstudio.com/storage/attachments/89512-vsproblem.png\">vsproblem.png</a></p>\n\n---\n### Original Comments\n\n#### Visual Studio Feedback System on 8/22/2019, 04:27 AM: \n\n<p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n\n---\n### Original Solutions\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/38518","RelatedDescription":"Open issue \"Intellisense does not list members for 3th parameter in GroupJoin\" (#38518)"},{"Id":"489915122","IsPullRequest":false,"CreatedAt":"2019-09-05T17:59:03","Actor":"vsfeedback","Number":"38517","RawContent":null,"Title":"#region Auto-Indenting Misbehaving","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/703701/region-auto-indenting-misbehaving.html)._\n\n---\nC#/Tabs/Indenting: Block\nC#/Tabs/Tab/Tab_size: 4\nC#/Tabs/Tab/Indent_size: 4\nC#/Tabs/Tab/Keep_tabs (true)\n\nI have to stipulate that I am somewhat old-school, and have tried to disable _most-if-not-all_ auto-formatting.  All I want is the _guarantee_ that when I press [ENTER], the editor Inserts a newline plus indentation to place the cursor at (R+1, C).\n\n**EXAMPLE 1**:  Start with the following code:\n```\nnamespace Minimum\n{\n\tpublic class Foo\n\t{\n\t}\n}\n```\nPress [ENTER], [TAB], create a property, then press [ENTER].  As expected, the cursor will be indented correctly.\n\n```\n\tpublic class Foo\n\t{\n\t\tpublic bool Bar { get; set; }\n\t\t// cursor is here\n\t}\n\n```\nDo the same with #region Methods[ENTER] and you get\n```\n\tpublic class Foo\n\t{\n\t\t#region Methods\n\t// cursor is here but should be 1 indentation right\n\t}\n\n```\n**EXAMPLE  2**: Start with the following code:\n```\n\tpublic class Foo\n\t{\n\t\t#region Properties\n\n// cursor is here\n\npublic bool Bar { get; set; }\n\n#endregion Properties\n\t}\n```\nType #region [SPACE] and you get\n```\n\tpublic class Foo\n\t{\n\t\t#region Properties\n\n#region // code has been shifted left\n\npublic bool Bar { get; set; } // code has been shifted left\n\n#endregion Properties\n\t}\n```\nthis behavior even skips regions, e.g.,\n```\n\tpublic class Foo\n\t{\n\t\t#region Properties\n\n// cursor is here\n\n#endregion Properties\n\n#region Methods\n\npublic void Bat()\n\t\t\t{\n\t\t\t\t// NOOP\n\t\t\t}\n\n#endregion Methods\n\t}\n```\nType #region[SPACE] and you get:\n```\n\tpublic class Foo\n\t{\n\t\t#region Properties\n\n#region // code has been shifted left\n\n#endregion Properties\n\n#region Methods\n\npublic void Bat() // code has been shifted left\n\t\t\t{\n\t\t\t\t// NOOP\n\t\t\t}\n\n#endregion Methods\n\t}\n```\nNot observing the Block is frustrating enough without the &quot;spooky action at a distance.&quot;\n\n---\n### Original Comments\n\n#### Visual Studio Feedback System on 8/22/2019, 04:05 AM: \n\n<p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n\n---\n### Original Solutions\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/38517","RelatedDescription":"Open issue \"#region Auto-Indenting Misbehaving\" (#38517)"},{"Id":"489914914","IsPullRequest":false,"CreatedAt":"2019-09-05T17:58:37","Actor":"vsfeedback","Number":"38516","RawContent":null,"Title":"Automatically comment out a new line when enter is pressed","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/703623/automatically-comment-out-a-new-line-when-enter-is.html)._\n\n---\nWith the code `string test = &quot;this is a test&quot;;` if the cursor is put after &quot;is&quot; and the enter key is pressed, VS maintains the string (ie it changes the code to `string test = &quot;this is&quot; + &quot; a test&quot;;` split across both lines). The same should be done with comments. If the comment `//This is a test` exists and the cursor is put after &quot;is&quot; with the enter key pressed, the resulting 2 lines should be\n\n```\n//This is\n// a test\n```\nCurrently what happens is the comment is broken with the resulting two lines being:\n\n```\n//This is\n a test\n```\n\n---\n### Original Comments\n\n#### Jane Wu [MSFT] on 8/22/2019, 02:19 AM: \n\n<p>Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.</p>\n","Url":"https://github.com/dotnet/roslyn/issues/38516","RelatedDescription":"Open issue \"Automatically comment out a new line when enter is pressed\" (#38516)"},{"Id":"489909217","IsPullRequest":false,"CreatedAt":"2019-09-05T17:47:06","Actor":"vsfeedback","Number":"38515","RawContent":null,"Title":"Wrap parameters style should be configurable from code style","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/699244/wrap-parameters-style-should-be-configurable-from.html)._\n\n---\nWhen you right click on a method name you get options on the context menu to wrap and align parameters.\n\nRather than picking the style of wrapping each time it is used, I would like to be able to configure which style of wrapping is to be used for the whole solution in the code style options and save them to .editorConfig rather than having each developer choose on a case-by-ca se basis.\n\nI would also like code cleanup to automatically wrap parameters using my chosen style when the line length is over a configured length.\n\n---\n### Original Comments\n\n#### Jane Wu [MSFT] on 8/20/2019, 03:54 AM: \n\n<p>Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.</p>\n","Url":"https://github.com/dotnet/roslyn/issues/38515","RelatedDescription":"Open issue \"Wrap parameters style should be configurable from code style\" (#38515)"},{"Id":"489908304","IsPullRequest":false,"CreatedAt":"2019-09-05T17:45:05","Actor":"vsfeedback","Number":"38514","RawContent":null,"Title":"Add an option for c# override generation (ignoring expression bodied members)","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/696199/add-an-option-for-c-override-generation-ignoring-e.html)._\n\n---\nwhen `override SomeVirtualOrAbstractMethod` is expanded, and \nOptions-&gt;Text Editor-&gt;C#-&gt;Code Style-&gt;Use expression body for methods is set to &quot;When on single line&quot;, the generated piece of code looks like this:\n```cs\nprotected override SomeVirtualOrAbstractMethod() =&gt; base. SomeVirtualOrAbstractMethod();\n```\n\nthis is (in most cases) not wanted, since the reason to override a method is to add custom behaviour (and usually also call the base class)\n\nThus the suggestion should be that an option is added to explicitely have the override expansion generated normal member bodies, generating this code:\n```cs\nprotected override SomeVirtualOrAbstractMethod()\n{\n    base. SomeVirtualOrAbstractMethod();\n}\n```\n\n---\n### Original Comments\n\n#### Jane Wu [MSFT] on 8/16/2019, 00:30 AM: \n\n<p>Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.</p>\n","Url":"https://github.com/dotnet/roslyn/issues/38514","RelatedDescription":"Open issue \"Add an option for c# override generation (ignoring expression bodied members)\" (#38514)"},{"Id":"489902910","IsPullRequest":false,"CreatedAt":"2019-09-05T17:32:39","Actor":"AdamDotNet","Number":"38513","RawContent":null,"Title":"EditorConfig applicable_kinds 'type_parameter' and 'interface' stopped working","State":"open","Body":"**Version Used**: Visual Studio 16.3.0 Preview 3\r\n\r\n**Steps to Reproduce**:\r\nWith the given .editorconfig:\r\n```\r\nroot = true\r\n\r\n# DotNet style\r\n[*.{cs,vb,cshtml,vbhtml}]\r\n\r\n### Naming Conventions\r\n\r\n## Styles\r\n\r\n# The basics\r\ndotnet_naming_style.camel_case_style.capitalization = camel_case\r\ndotnet_naming_style.pascal_case_style.capitalization = pascal_case\r\n\r\n# Underscore camel style\r\ndotnet_naming_style.camel_case_and_prefix_with_underscore_style.required_prefix = _\r\ndotnet_naming_style.camel_case_and_prefix_with_underscore_style.capitalization = camel_case\r\n\r\n# Pascal I prefix\r\ndotnet_naming_style.pascal_case_and_prefix_with_I_style.required_prefix = I\r\ndotnet_naming_style.pascal_case_and_prefix_with_I_style.capitalization = pascal_case\r\n\r\n# Pascal T prefix\r\ndotnet_naming_style.pascal_case_and_prefix_with_T_style.required_prefix = T\r\ndotnet_naming_style.pascal_case_and_prefix_with_T_style.capitalization = pascal_case\r\n\r\n## Symbols\r\n\r\n# Interfaces\r\ndotnet_naming_symbols.interface_symbols.applicable_kinds = interface\r\ndotnet_naming_symbols.interface_symbols.applicable_accessibilities = *\r\n\r\n# Type parameters\r\ndotnet_naming_symbols.type_parameter_symbols.applicable_kinds = type_parameter\r\ndotnet_naming_symbols.type_parameter_symbols.applicable_accessibilities = *\r\n\r\n# Pascal most of the things\r\ndotnet_naming_symbols.pascal_symbols.applicable_kinds = class, struct, enum, property, method, event, namespace, delegate, local_function\r\ndotnet_naming_symbols.pascal_symbols.applicable_accessibilities = *\r\n\r\n# Parameters, locals\r\ndotnet_naming_symbols.locals_and_parameters_symbols.applicable_kinds = parameter, local\r\ndotnet_naming_symbols.locals_and_parameters_symbols.applicable_accessibilities = *\r\n\r\n# Constants\r\ndotnet_naming_symbols.constant_symbols.applicable_kinds = field\r\ndotnet_naming_symbols.constant_symbols.required_modifiers = const\r\ndotnet_naming_symbols.constant_symbols.applicable_accessibilities = *\r\n\r\n# Public fields\r\ndotnet_naming_symbols.public_field_symbols.applicable_kinds = field\r\ndotnet_naming_symbols.public_field_symbols.applicable_accessibilities = public, internal, friend, protected, protected_internal, protected_friend, private_protected\r\n\r\n# Private fields\r\ndotnet_naming_symbols.private_field_symbols.applicable_kinds = field\r\ndotnet_naming_symbols.private_field_symbols.applicable_accessibilities = private\r\n\r\n## Naming Rules\r\n\r\n# Interfaces\r\ndotnet_naming_rule.interfaces_must_be_pascal_cased_and_prefixed_with_I.symbols = interface_symbols\r\ndotnet_naming_rule.interfaces_must_be_pascal_cased_and_prefixed_with_I.style = pascal_case_and_prefix_with_I_style\r\ndotnet_naming_rule.interfaces_must_be_pascal_cased_and_prefixed_with_I.severity = warning\r\n\r\n# Type parameters\r\ndotnet_naming_rule.type_parameters_must_be_pascal_cased_and_prefixed_with_T.symbols = type_parameter_symbols\r\ndotnet_naming_rule.type_parameters_must_be_pascal_cased_and_prefixed_with_T.style = pascal_case_and_prefix_with_T_style\r\ndotnet_naming_rule.type_parameters_must_be_pascal_cased_and_prefixed_with_T.severity = warning\r\n\r\n# Pascal most of the things\r\ndotnet_naming_rule.externally_visible_members_must_be_pascal_cased.symbols = pascal_symbols\r\ndotnet_naming_rule.externally_visible_members_must_be_pascal_cased.style = pascal_case_style\r\ndotnet_naming_rule.externally_visible_members_must_be_pascal_cased.severity = warning\r\n\r\n# Parameters, locals\r\ndotnet_naming_rule.parameters_must_be_camel_cased.symbols = locals_and_parameters_symbols\r\ndotnet_naming_rule.parameters_must_be_camel_cased.style = camel_case_style\r\ndotnet_naming_rule.parameters_must_be_camel_cased.severity = warning\r\n\r\n# Constants\r\ndotnet_naming_rule.constants_must_be_pascal_cased.symbols = constant_symbols\r\ndotnet_naming_rule.constants_must_be_pascal_cased.style = pascal_case_style\r\ndotnet_naming_rule.constants_must_be_pascal_cased.severity = warning\r\n\r\n# Public fields\r\ndotnet_naming_rule.public_instance_fields_must_be_camel_cased_and_prefixed_with_underscore.symbols = public_field_symbols\r\ndotnet_naming_rule.public_instance_fields_must_be_camel_cased_and_prefixed_with_underscore.style = pascal_case_style\r\ndotnet_naming_rule.public_instance_fields_must_be_camel_cased_and_prefixed_with_underscore.severity = warning\r\n\r\n# Private fields\r\ndotnet_naming_rule.private_instance_fields_must_be_camel_cased_and_prefixed_with_underscore.symbols = private_field_symbols\r\ndotnet_naming_rule.private_instance_fields_must_be_camel_cased_and_prefixed_with_underscore.style = camel_case_and_prefix_with_underscore_style\r\ndotnet_naming_rule.private_instance_fields_must_be_camel_cased_and_prefixed_with_underscore.severity = warning\r\n```\r\n\r\nAnd the given file in an SDK style class library project:\r\n``` csharp\r\nusing System;\r\n\r\nnamespace classLibrary1\r\n{\r\n    public interface fooInterface\r\n    {\r\n        \r\n    }\r\n\r\n    public class class1\r\n    {\r\n        public delegate void delegateFoo();\r\n\r\n        public event EventHandler<class1> eventFoo;\r\n\r\n        public static readonly string pubFoo = \"PubBar\";\r\n\r\n        public const string conFoo = \"ConBar\";\r\n        private const string foo = \"Bar\";\r\n\r\n        private readonly string name;\r\n\r\n        public class1(string Name)\r\n        {\r\n            string Local = \"\";\r\n\r\n            name = Name ?? foo + Local;\r\n        }\r\n\r\n        public string getName()\r\n        {\r\n            doThing();\r\n            DoOtherThing<object>();\r\n\r\n            return name;\r\n\r\n            void doThing()\r\n            {\r\n\r\n            }\r\n\r\n            void DoOtherThing<arg>()\r\n            {\r\n\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nOpen the file. Nearly every symbol was written to trigger naming rule breaks.\r\n\r\n**Expected Behavior**:\r\nVirtually every symbol should have a rule break warning. This works in 16.2.3.\r\n\r\n**Actual Behavior**:\r\nThe interface `fooInterface` and the type arg in `DoOtherThing<arg>()` do not have warnings for breaking naming conventions.\r\n\r\nAttaching an image depicting the differences visually:\r\n![image](https://user-images.githubusercontent.com/8978001/64364591-6c61b280-cfd0-11e9-9460-9c51ca239b76.png)\r\n","Url":"https://github.com/dotnet/roslyn/issues/38513","RelatedDescription":"Open issue \"EditorConfig applicable_kinds 'type_parameter' and 'interface' stopped working\" (#38513)"},{"Id":"489896536","IsPullRequest":false,"CreatedAt":"2019-09-05T17:30:32","Actor":"vsfeedback","Number":"38512","RawContent":null,"Title":"Ctrl+. on a long // comment (or on on of a number of // comment lines) distibutes the comment over multiple lines","State":"closed","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/689733/ctrl-on-a-long-comment-or-on-on-of-a-number-of-com.html)._\n\n---\nLet's say you have:\n\n```\n// Lorem ipsum dolor sit amet, consectetur adipiscing elit. In fermentum semper orci. Fusce non diam magna. Vestibulum quis est eget massa suscipit commodo. Integer lacinia ultrices aliquam. Cras tempor lacus malesuada, volutpat sem at, blandit ligula.\n```\nor\n````\n// Lorem ipsum dolor sit amet,\n// consectetur adipiscing elit. In fermentum semper orci. Fusce non diam magna.\n// Vestibulum quis est eget massa suscipit commodo. Integer lacinia ultrices aliquam. Cras tempor lacus malesuada, volutpat sem at, blandit ligula.\n````\n... and you press Ctrl+.\n\nTwo options should be available: &quot;Tidy using //&quot; and &quot;Tidy using /**/&quot;\n\nBoth options distribute the comment using .editorconfig to determine the maximum characters per line, resulting in (for example):\n\n````\n// Lorem ipsum dolor sit amet, consectetur adipiscing elit. In\n// fermentum semper orci. Fusce non diam magna. Vestibulum quis\n// est eget massa suscipit commodo. Integer lacinia ultrices\n// aliquam. Cras tempor lacus malesuada, volutpat sem at,\n// blandit ligula.\n````\n\n---\n### Original Comments\n(no comments)","Url":"https://github.com/dotnet/roslyn/issues/38512","RelatedDescription":"Closed issue \"Ctrl+. on a long // comment (or on on of a number of // comment lines) distibutes the comment over multiple lines\" (#38512)"},{"Id":"489892925","IsPullRequest":false,"CreatedAt":"2019-09-05T17:09:14","Actor":"vsfeedback","Number":"38511","RawContent":null,"Title":"Generate Local variable outside of current block","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/683584/generate-local-variable-outside-of-current-block.html)._\n\n---\nWhen Quick Actions suggest to create a local variable, when we are in a code block (if, using, etc.) The local variable could be created outside of the block (just before)\n\nThis should be a new quick action or replacing the Create Local variable.\n\nExample:\n\n```\nusing (var db = CreateContext())\n{\n    blogs = db. Blogs.ToList()\n}\n\n```\n\nThe quick action is called on blogs\n\n---\n### Original Comments\n(no comments)","Url":"https://github.com/dotnet/roslyn/issues/38511","RelatedDescription":"Open issue \"Generate Local variable outside of current block\" (#38511)"}],"ResultType":"GitHubIssue"},"CoreRT-Issues":{"Issues":[{"Id":"490072419","IsPullRequest":true,"CreatedAt":"2019-09-06T00:32:05","Actor":"davidwrighton","Number":"7776","RawContent":null,"Title":"Partial compilation and generic ibc processing","State":"open","Body":"- Support for partial compilation\r\n- Support for parsing generics in IBC data\r\n - Bonus feature of searching referenced and input assemblies for types if the module in the IBC data is invalid","Url":"https://github.com/dotnet/corert/pull/7776","RelatedDescription":"Open PR \"Partial compilation and generic ibc processing\" (#7776)"},{"Id":"487718255","IsPullRequest":true,"CreatedAt":"2019-09-05T21:27:38","Actor":"davidwrighton","Number":"7758","RawContent":null,"Title":"Ibc work","State":"closed","Body":"Implement IBC tuning compilation and parsing\r\nStill tbd\r\n- method block count utilization\r\n- generics testing\r\n\r\n(Also my most recent changes introduced some sort of subtle bug, but I wanted to get this out for initial code review from the folks in Europe.)","Url":"https://github.com/dotnet/corert/pull/7758","RelatedDescription":"Closed or merged PR \"Ibc work\" (#7758)"},{"Id":"489360143","IsPullRequest":true,"CreatedAt":"2019-09-05T19:38:18","Actor":"fadimounir","Number":"7772","RawContent":null,"Title":"Compile cross-module generics in the same version bubble.","State":"closed","Body":"This work is related to the single-exe prototype, but after discussing with @davidwrighton, these are changes that we can have in master as well.\r\n\r\nCompiling generics from external modules in the version bubble is enabled using a command line switch.\r\n\r\nOther changes: Changing signatures in hashtable of instantiations to include owning type as a way of encoding the module override info\r\n","Url":"https://github.com/dotnet/corert/pull/7772","RelatedDescription":"Closed or merged PR \"Compile cross-module generics in the same version bubble.\" (#7772)"},{"Id":"489380977","IsPullRequest":true,"CreatedAt":"2019-09-05T14:33:56","Actor":"MichalStrehovsky","Number":"7773","RawContent":null,"Title":"Get jitwrapper building on x86","State":"closed","Body":"CoreCLR repo is going to build it that way. I could exclude that outside x64, but it's just better to fix it...","Url":"https://github.com/dotnet/corert/pull/7773","RelatedDescription":"Closed or merged PR \"Get jitwrapper building on x86\" (#7773)"},{"Id":"488748576","IsPullRequest":true,"CreatedAt":"2019-09-05T13:42:32","Actor":"janvorli","Number":"7767","RawContent":null,"Title":"Implement SystemV AMD64 ABI struct classification","State":"closed","Body":"This change implements SystemV AMD64 ABI struct classification necessary\r\nfor correct passing of function arguments of struct types and returning\r\nthese by value on Unix AMD64.\r\n\r\nThis change is a port of the CoreCLR version with necessary changes to reflect differences in the type system interface between CoreRT and CoreCLR. I have also added caching of the classification result as JIT calls classification for the same type many times.","Url":"https://github.com/dotnet/corert/pull/7767","RelatedDescription":"Closed or merged PR \"Implement SystemV AMD64 ABI struct classification\" (#7767)"},{"Id":"489459547","IsPullRequest":true,"CreatedAt":"2019-09-04T23:50:25","Actor":"cshung","Number":"7775","RawContent":null,"Title":"[WIP] Complete the filtering for MethodImpl.AggressiveOptimization","State":"open","Body":"","Url":"https://github.com/dotnet/corert/pull/7775","RelatedDescription":"Open PR \"[WIP] Complete the filtering for MethodImpl.AggressiveOptimization\" (#7775)"},{"Id":"489406467","IsPullRequest":true,"CreatedAt":"2019-09-04T23:16:31","Actor":"Dotnet-GitSync-Bot","Number":"7774","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub @NextTurn","Url":"https://github.com/dotnet/corert/pull/7774","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7774)"},{"Id":"488925681","IsPullRequest":true,"CreatedAt":"2019-09-04T16:39:39","Actor":"Dotnet-GitSync-Bot","Number":"7771","RawContent":null,"Title":"Mirror changes from dotnet/corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7771","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx\" (#7771)"},{"Id":"488893657","IsPullRequest":true,"CreatedAt":"2019-09-04T02:16:33","Actor":"Dotnet-GitSync-Bot","Number":"7770","RawContent":null,"Title":"Mirror changes from dotnet/corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7770","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx\" (#7770)"},{"Id":"488826953","IsPullRequest":true,"CreatedAt":"2019-09-04T01:18:56","Actor":"Dotnet-GitSync-Bot","Number":"7769","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas @stephentoub","Url":"https://github.com/dotnet/corert/pull/7769","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7769)"},{"Id":"488782037","IsPullRequest":true,"CreatedAt":"2019-09-03T21:33:47","Actor":"trylek","Number":"7768","RawContent":null,"Title":"Minor triage improvement in SuperIlc","State":"closed","Body":"For tests with unhandled runtime exceptions, we can improve SuperIlc\r\ntriage by using the exception as the triage string instead of just\r\nreporting a non-zero exit code. Part of the logic already existed\r\nbut it apparently had a typo in the exception message check due to\r\nwhich it failed to kick in.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7768","RelatedDescription":"Closed or merged PR \"Minor triage improvement in SuperIlc\" (#7768)"},{"Id":"488681079","IsPullRequest":true,"CreatedAt":"2019-09-03T20:23:38","Actor":"MichalStrehovsky","Number":"7765","RawContent":null,"Title":"Delete unused file","State":"closed","Body":"Noticed when auditing the CPAOT copy scripts.","Url":"https://github.com/dotnet/corert/pull/7765","RelatedDescription":"Closed or merged PR \"Delete unused file\" (#7765)"},{"Id":"488732123","IsPullRequest":true,"CreatedAt":"2019-09-03T19:16:49","Actor":"trylek","Number":"7766","RawContent":null,"Title":"Update RyuJIT","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7766","RelatedDescription":"Closed or merged PR \"Update RyuJIT\" (#7766)"},{"Id":"488341349","IsPullRequest":true,"CreatedAt":"2019-09-03T00:07:22","Actor":"yowl","Number":"7764","RawContent":null,"Title":"[WIP]: Wasm: fix more occurrences of loading Sbytes into int32 without sign extending.","State":"open","Body":"While #7763 was fine as far as it went, it didn't actually catch all problems with loading sbyte on to the stack, namely binary operations, shifting and branching.   This add a few more tests for those and fixes the sign extending","Url":"https://github.com/dotnet/corert/pull/7764","RelatedDescription":"Open PR \"[WIP]: Wasm: fix more occurrences of loading Sbytes into int32 without sign extending.\" (#7764)"},{"Id":"487641478","IsPullRequest":true,"CreatedAt":"2019-09-02T20:20:50","Actor":"trylek","Number":"7755","RawContent":null,"Title":"Preparatory change to fix JIT tokenScope during devirtualization","State":"closed","Body":"Based on Andy's advice I investigated fixing tokenScope in JIT\r\nto work correctly even in the presence of devirtualization by\r\nbasically calling getMethodModule for the resolved virtual method\r\nto update the token scope. To make that work end to end, I had\r\nto actually implement the [previously unused] helper in CoreRT.\r\n\r\nThanks\r\n\r\nTomas\r\n\r\nP.S. Based on Michal's offline advice I have locally verified that\r\nthe Generics CoreRT test works in release mode with the updated\r\nJIT.\r\n","Url":"https://github.com/dotnet/corert/pull/7755","RelatedDescription":"Closed or merged PR \"Preparatory change to fix JIT tokenScope during devirtualization\" (#7755)"},{"Id":"487654553","IsPullRequest":false,"CreatedAt":"2019-09-02T15:10:29","Actor":"OshoNot","Number":"7756","RawContent":null,"Title":"System.ArgumentNullException while running basic Suave web server","State":"closed","Body":"Hi guys,\r\n\r\nI've been trying to come up with a basic web server using Suave + CoreRT. Check this [repo](https://github.com/OshoNot/suave-corert) for source code and error analysis. When I start the generated executable, it yields the following exception:\r\n\r\n```bash\r\nUnhandled Exception: System.ArgumentNullException: Value cannot be null. Parameter name: path1\r\n   at System.IO.Path.Combine(String, String) + 0x53\r\n   at Suave.Web.startWebServerAsync(SuaveConfig, FSharpFunc\\`2) + 0x46\r\n   at Suave.Web.startWebServer(SuaveConfig, FSharpFunc\\`2) + 0x17\r\n   at Program.main(String[]) + 0x28\r\n   at Simple-Web!<BaseAddress>+0x7d639d\r\nAborted\r\n```","Url":"https://github.com/dotnet/corert/issues/7756","RelatedDescription":"Closed issue \"System.ArgumentNullException while running basic Suave web server\" (#7756)"},{"Id":"488211989","IsPullRequest":true,"CreatedAt":"2019-09-02T15:07:10","Actor":"yowl","Number":"7763","RawContent":null,"Title":"Wasm: fixes loading int16 and SBytes from the stack where they were previously not sign extended","State":"closed","Body":"Previously loading SBytes from the stack did not sign extend causing problems in the NativeFormatReader.  This adds a test and fixes that scenario.","Url":"https://github.com/dotnet/corert/pull/7763","RelatedDescription":"Closed or merged PR \"Wasm: fixes loading int16 and SBytes from the stack where they were previously not sign extended\" (#7763)"},{"Id":"487908157","IsPullRequest":true,"CreatedAt":"2019-09-02T07:56:48","Actor":"MichalStrehovsky","Number":"7762","RawContent":null,"Title":"Remove MetadataManager.SupportsReflection","State":"closed","Body":"The property was added when we started compiling ProjectN mrt100_app.dll. It was problematic because it didn't actually mean reflection - it meant \"is this something non-essential that we can skip\". We actually need what it was doing at a finer graunlarity. This commit starts with that.\r\n\r\nWith this, generic virtual methods work in the reflection disabled mode.\r\n\r\nA couple notes:\r\n* Some of the SupportsReflection calls were redundant (they were in a code path that is already related to reflection). Those disappeared without replacement.\r\n* CodeBaseDependencyAlgorithm references moved to the metadata manager. Hopefully we can get better control of generated templates in the future. (Not all types/generic methods need templates.)\r\n* DictionaryLayoutNode references were redundant with the references from code/EETypes. Removed without replacement.\r\n* Method template table emission needs to check whether the template was marked. This mirrors what we do for type templates. Eventually, we should make this for loop to go over all generated method templates instead of all methods (just keep track of the templates themselves).\r\n* GVMs were implicitly relying on getting templates because we make templates for everything. Added explicit template generation.","Url":"https://github.com/dotnet/corert/pull/7762","RelatedDescription":"Closed or merged PR \"Remove MetadataManager.SupportsReflection\" (#7762)"},{"Id":"487859012","IsPullRequest":false,"CreatedAt":"2019-09-01T09:35:37","Actor":"xoofx","Number":"7761","RawContent":null,"Title":"The type or namespace name 'System' could not be found","State":"closed","Body":"Hey,\r\n\r\nI'm trying to open `ILCompiler.sln` but I'm unable to compile any projects there, I tried both with Visual Studio 2017 and 2019\r\n\r\n![image](https://user-images.githubusercontent.com/715038/64073842-c9ddc280-cca3-11e9-807a-e74edbc1b17b.png)\r\n\r\nI tried to reclone entirely corert, `init-tools.cmd` but it still doesn't work.\r\n\r\nFrom the screenshot above I tried to compile repro.csproj and the command line from msbuild is like this:\r\n\r\n```\r\nC:\\code\\dotnet\\corert\\packages\\microsoft.net.compilers.toolset\\3.3.0-beta2-19367-02\\tasks\\net472\\csc.exe /noconfig /unsafe+ /nowarn:169,414,1701,1702,2008 /nostdlib+ /warn:4 /define:X86;BIT32;PLATFORM_WINDOWS;CORERT;DEBUG;TRACE;DEBUGRESOURCES /errorendlocation /preferreduilang:en-US /debug+ /debug:portable /optimize- /out:C:\\code\\dotnet\\corert\\bin/obj/Windows_NT.x86.Debug/repro\\repro.exe /ruleset:\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Professional\\Team Tools\\Static Analysis Tools\\\\Rule Sets\\MinimumRecommendedRules.ruleset\" /target:exe /warnaserror+ /utf8output /checksumalgorithm:SHA256 /langversion:preview /analyzerconfig:C:\\code\\dotnet\\corert\\.editorconfig Program.cs\r\n```\r\n\r\nSo it is passing `/nostdlib+` but I don't see any netstandard library passed to it for example, so not sure how this can work.\r\n\r\nAny clues?\r\n","Url":"https://github.com/dotnet/corert/issues/7761","RelatedDescription":"Closed issue \"The type or namespace name 'System' could not be found\" (#7761)"},{"Id":"487763609","IsPullRequest":true,"CreatedAt":"2019-08-31T18:14:47","Actor":"MichalStrehovsky","Number":"7759","RawContent":null,"Title":"Consider method referenced with LDTOKEN called","State":"closed","Body":"When usage based metadata manager is enabled, we'll consider methods referenced with LDTOKEN as called. They pretty much have to be to make LINQ expressions work.","Url":"https://github.com/dotnet/corert/pull/7759","RelatedDescription":"Closed or merged PR \"Consider method referenced with LDTOKEN called\" (#7759)"},{"Id":"487765387","IsPullRequest":true,"CreatedAt":"2019-08-31T18:13:54","Actor":"MichalStrehovsky","Number":"7760","RawContent":null,"Title":"Do not root module metadata for modules not generating metadata","State":"closed","Body":"Fixes the multimodule compiler crash in DynamicGenerics.","Url":"https://github.com/dotnet/corert/pull/7760","RelatedDescription":"Closed or merged PR \"Do not root module metadata for modules not generating metadata\" (#7760)"},{"Id":"487702491","IsPullRequest":true,"CreatedAt":"2019-08-31T00:52:18","Actor":"Dotnet-GitSync-Bot","Number":"7757","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @NextTurn","Url":"https://github.com/dotnet/corert/pull/7757","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7757)"},{"Id":"487178311","IsPullRequest":true,"CreatedAt":"2019-08-30T20:03:57","Actor":"trylek","Number":"7752","RawContent":null,"Title":"Fix subtle bug in token context module resolution","State":"closed","Body":"I found out that my recent relaxation of DevirtualizationManager\r\nto allow devirtualization across modules within the large version\r\nbubble uncovered a pre-existing bug in token module context\r\nresolution causing about 10% execution failure rate in Pri#1 tests\r\nin release large-bubble mode.\r\n\r\nMy original implementation (that Michal later expanded to also\r\ncover generated IL thunks) used \"pResolvedToken.tokenScope\" to\r\ndetermine the token context. This is however incorrect in the\r\npresence of devirtualization - in such case, JIT only updates\r\nthe tokenContext in pResolvedToken to refer to the devirtualized\r\nmethod, not tokenScope (which continues pointing at the original\r\nmethod in which we devirtualized a method call). Due to this the\r\nreference module and token value went out of sync, causing a\r\nwrong function to be called.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7752","RelatedDescription":"Closed or merged PR \"Fix subtle bug in token context module resolution\" (#7752)"},{"Id":"487608901","IsPullRequest":true,"CreatedAt":"2019-08-30T19:41:35","Actor":"davidwrighton","Number":"7754","RawContent":null,"Title":"Fix calls to non-virtual Object methods on generic type parameters","State":"closed","Body":"- Calls to non-virtual Object methods are translated by the jit into\r\ndirect calls that should not be resolved via a constrained resolver\r\n- Add testcase covering behavior","Url":"https://github.com/dotnet/corert/pull/7754","RelatedDescription":"Closed or merged PR \"Fix calls to non-virtual Object methods on generic type parameters\" (#7754)"},{"Id":"487533247","IsPullRequest":true,"CreatedAt":"2019-08-30T18:56:00","Actor":"MichalStrehovsky","Number":"7753","RawContent":null,"Title":"Separate out ReadyToRun specific type system","State":"closed","Body":"This was pretty clean thanks to the existing dot-file structure.","Url":"https://github.com/dotnet/corert/pull/7753","RelatedDescription":"Closed or merged PR \"Separate out ReadyToRun specific type system\" (#7753)"},{"Id":"487108586","IsPullRequest":true,"CreatedAt":"2019-08-29T21:48:18","Actor":"trylek","Number":"7751","RawContent":null,"Title":"Fix path separator on Linux","State":"closed","Body":"As Jan Vorlicek found out in his local testing, SuperIlc always\r\nused semicolon as path separator when emitting the list of reference\r\npaths for Crossgen. This is incorrect on Linux - colon should be\r\nuse as the path separator instead.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7751","RelatedDescription":"Closed or merged PR \"Fix path separator on Linux\" (#7751)"},{"Id":"486646291","IsPullRequest":true,"CreatedAt":"2019-08-29T20:56:35","Actor":"nattress","Number":"7750","RawContent":null,"Title":"Remove SectionStartNode mechanism","State":"closed","Body":"Symbols for the beginning of each PE section were added as part of https://github.com/dotnet/corert/commit/b34583dc66abb2a74e0d6dd4ec937294cadc0e76#diff-2559cd80eabcbd275c059bd09c5cc961. This is no longer needed as RVA field references now just use standard relocations to `CopiedFieldRvaNode` objects and don't need any special case logic.","Url":"https://github.com/dotnet/corert/pull/7750","RelatedDescription":"Closed or merged PR \"Remove SectionStartNode mechanism\" (#7750)"},{"Id":"486639383","IsPullRequest":false,"CreatedAt":"2019-08-28T22:28:17","Actor":"cshung","Number":"7749","RawContent":null,"Title":"[CPAOT] Make sure any methods marked as MethodImpl.AggressiveOptimization is not compiled even if it is a dependency of some other methods.","State":"open","Body":"@trylek pointed out offline that #7748 might be incomplete. In particular, a method marked as MethodImpl.AggressiveOptimization might not initially be rooted, but it could be added to the graph as the dependency of another method (e.g. it is being called), so we still end up compiling them.","Url":"https://github.com/dotnet/corert/issues/7749","RelatedDescription":"Open issue \"[CPAOT] Make sure any methods marked as MethodImpl.AggressiveOptimization is not compiled even if it is a dependency of some other methods.\" (#7749)"},{"Id":"486589868","IsPullRequest":true,"CreatedAt":"2019-08-28T21:46:24","Actor":"cshung","Number":"7748","RawContent":null,"Title":"[CPAOT] SkipAggressiveMethod - Avoid compiling code marked with MethodImplOptions.AggressiveOptimization","State":"closed","Body":"Crossgen is currently skipping these methods [here](https://github.com/dotnet/coreclr/blob/f07c13cadc378649f10d024bb8a40a3878fa661f/src/zap/zapinfo.cpp#L448), perhaps we should do the same.\r\n","Url":"https://github.com/dotnet/corert/pull/7748","RelatedDescription":"Closed or merged PR \"[CPAOT] SkipAggressiveMethod - Avoid compiling code marked with MethodImplOptions.AggressiveOptimization\" (#7748)"},{"Id":"486564549","IsPullRequest":true,"CreatedAt":"2019-08-28T20:56:23","Actor":"MichalStrehovsky","Number":"7747","RawContent":null,"Title":"Update RyuJIT","State":"closed","Body":"We'll have to take another update once dotnet/coreclr#26395 merges, but I suspect some more people are going to hit this JitInterface change.","Url":"https://github.com/dotnet/corert/pull/7747","RelatedDescription":"Closed or merged PR \"Update RyuJIT\" (#7747)"}],"ResultType":"GitHubIssue"},"SDK-Issues":{"Issues":[{"Id":"490082274","IsPullRequest":true,"CreatedAt":"2019-09-06T01:22:27","Actor":"wli3","Number":"3600","RawContent":null,"Title":"Experimental cpp 3 test ci, if CI's VS has the latest C++ props","State":"open","Body":"","Url":"https://github.com/dotnet/sdk/pull/3600","RelatedDescription":"Open PR \"Experimental cpp 3 test ci, if CI's VS has the latest C++ props\" (#3600)"},{"Id":"488843649","IsPullRequest":true,"CreatedAt":"2019-09-06T01:19:58","Actor":"wli3","Number":"3591","RawContent":null,"Title":"Experimental cpp 3 fix restore by skipping package dependency resolution.targets","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/3591","RelatedDescription":"Closed or merged PR \"Experimental cpp 3 fix restore by skipping package dependency resolution.targets\" (#3591)"},{"Id":"489953405","IsPullRequest":true,"CreatedAt":"2019-09-06T00:36:02","Actor":"livarcocc","Number":"3598","RawContent":null,"Title":"Update branding to rc2","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/3598","RelatedDescription":"Closed or merged PR \"Update branding to rc2\" (#3598)"},{"Id":"489951769","IsPullRequest":true,"CreatedAt":"2019-09-06T00:35:49","Actor":"livarcocc","Number":"3597","RawContent":null,"Title":"Merge release/3.0.1xx into release/3.0.100-preview9","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/3597","RelatedDescription":"Closed or merged PR \"Merge release/3.0.1xx into release/3.0.100-preview9\" (#3597)"},{"Id":"490022605","IsPullRequest":false,"CreatedAt":"2019-09-05T21:38:52","Actor":"sebastienros","Number":"3599","RawContent":null,"Title":"Latest SDK contains a netcoreapp3.0 ref pack for ASP.NET","State":"open","Body":"https://dotnetcli.azureedge.net/dotnet/Sdk/5.0.100-alpha1-014061/dotnet-sdk-5.0.100-alpha1-014061-win-x64.zip\r\n\r\n![image](https://user-images.githubusercontent.com/1165805/64383979-c5d6db00-cfea-11e9-93a9-2477dac23095.png)\r\n","Url":"https://github.com/dotnet/sdk/issues/3599","RelatedDescription":"Open issue \"Latest SDK contains a netcoreapp3.0 ref pack for ASP.NET\" (#3599)"},{"Id":"486583658","IsPullRequest":true,"CreatedAt":"2019-09-05T20:56:54","Actor":"dsplaisted","Number":"3584","RawContent":null,"Title":"Fix symbols for tasks","State":"closed","Body":"Create PDBs for tasks and put them in the directory where Arcade will upload them\r\n\r\nFixes #3581","Url":"https://github.com/dotnet/sdk/pull/3584","RelatedDescription":"Closed or merged PR \"Fix symbols for tasks\" (#3584)"},{"Id":"489923150","IsPullRequest":true,"CreatedAt":"2019-09-05T20:18:57","Actor":"dotnet-maestro[bot]","Number":"3596","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:e76888f5-e4f1-4c3d-d4c4-08d7315d8bc7)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190905.3\r\n- **Date Produced**: 9/5/2019 4:27 PM\r\n- **Commit**: fee4ebe849050a385a4999e4c84fa61c1dc234bb\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19455.3\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19455.3\r\n\r\n[marker]: <> (End:e76888f5-e4f1-4c3d-d4c4-08d7315d8bc7)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3596","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/arcade\" (#3596)"},{"Id":"489727977","IsPullRequest":true,"CreatedAt":"2019-09-05T14:41:09","Actor":"dotnet-maestro[bot]","Number":"3595","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:e76888f5-e4f1-4c3d-d4c4-08d7315d8bc7)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190904.31\r\n- **Date Produced**: 9/5/2019 2:00 AM\r\n- **Commit**: 00d8aa82b488f321204a0e69a81399af9df276a1\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19454.31\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19454.31\r\n\r\n[marker]: <> (End:e76888f5-e4f1-4c3d-d4c4-08d7315d8bc7)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3595","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/arcade\" (#3595)"},{"Id":"488505457","IsPullRequest":true,"CreatedAt":"2019-09-05T14:20:59","Actor":"dotnet-maestro[bot]","Number":"3590","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190904.31\r\n- **Date Produced**: 9/5/2019 2:00 AM\r\n- **Commit**: 00d8aa82b488f321204a0e69a81399af9df276a1\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19454.31\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19454.31\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3590","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3590)"},{"Id":"489451698","IsPullRequest":true,"CreatedAt":"2019-09-04T23:29:14","Actor":"dotnet-maestro[bot]","Number":"3594","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/core-setup","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190905.25\r\n- **Date Produced**: 9/6/2019 2:53 AM\r\n- **Commit**: db11b05953ca56752b3da4cce203472c40fa6c3c\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.1.0-preview1.19455.25\r\n\r\n[marker]: <> (End:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3594","RelatedDescription":"Open PR \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#3594)"},{"Id":"489143174","IsPullRequest":false,"CreatedAt":"2019-09-04T18:33:31","Actor":"AArnott","Number":"3593","RawContent":null,"Title":"`dotnet test --blame` does not ","State":"closed","Body":"dotnet SDK version: 2.2.401\r\n\r\n`dotnet test -f netcoreapp2.1 --no-build --blame`  should produce a `Sequence.xml` file while running tests so we can know what test was running at the time of a crash or hang. But it doesn't create this file.\r\n\r\n```\r\n  --blame                                  Run the tests in blame mode. This option is helpful in isolating a problematic test causing the test host to crash.\r\n                                           Outputs a 'Sequence.xml' file in the current directory that captures the order of execution of test before the crash.\r\n```\r\n\r\nWithout this file, for async tests on linux it's impossible to know which test was running when the test runner hung.","Url":"https://github.com/dotnet/sdk/issues/3593","RelatedDescription":"Closed issue \"`dotnet test --blame` does not \" (#3593)"},{"Id":"488881838","IsPullRequest":false,"CreatedAt":"2019-09-04T00:28:05","Actor":"AArnott","Number":"3592","RawContent":null,"Title":"NETSDK1100 blocks building on Linux","State":"open","Body":"I have a test project which multi-targets between net472;netcoreapp2.1;netcoreapp3.0.\r\nOnly when targeting net472 or netcoreapp3.0 does it reference or use any WPF/WinForms types. Nevertheless, I have to set the SDK attribute to `Microsoft.NET.Sdk.WindowsDesktop` for this to work with netcoreapp3.0 at all, AFAIK.\r\n\r\nThis blocks the test project from building the `netcoreapp2.1` target on linux, which blocks me testing my library on Linux.\r\n\r\nHow should I proceed?","Url":"https://github.com/dotnet/sdk/issues/3592","RelatedDescription":"Open issue \"NETSDK1100 blocks building on Linux\" (#3592)"},{"Id":"486353347","IsPullRequest":true,"CreatedAt":"2019-09-03T18:55:57","Actor":"v-zbsail","Number":"3583","RawContent":null,"Title":"LOC CHECKIN | dotnet/sdk release/3.0.1xx | 20190828","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/3583","RelatedDescription":"Closed or merged PR \"LOC CHECKIN | dotnet/sdk release/3.0.1xx | 20190828\" (#3583)"},{"Id":"487548540","IsPullRequest":true,"CreatedAt":"2019-09-01T17:55:41","Actor":"johnbeisner","Number":"3589","RawContent":null,"Title":"Remove duplicate FolderPublish capability for SDK projects","State":"closed","Body":"Addresses: https://github.com/dotnet/sdk/issues/2769\r\n\r\nThe 'FolderPublish' capability is now being delivered to Visual Studio via. 'Microsoft.Managed.DesignTime.targets' [ https://github.com/dotnet/project-system/pull/4400 ] and is not required on the SDK command-line; removing 'FolderPublish' from 'Microsoft.NET.Sdk.targets'\r\n\r\nManually tested with Visual Studio 16.3 Preview 2","Url":"https://github.com/dotnet/sdk/pull/3589","RelatedDescription":"Closed or merged PR \"Remove duplicate FolderPublish capability for SDK projects\" (#3589)"},{"Id":"487516926","IsPullRequest":false,"CreatedAt":"2019-08-30T17:22:23","Actor":"Const-me","Number":"3588","RawContent":null,"Title":"MSBuild doesn’t define variables for .NET core?","State":"closed","Body":"Using VS2017 15.9.5, building a class library for .NET core 2.2. Here’s the relevant XML from my .csproj file:\r\n\r\n\t<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\t\t<PropertyGroup>\r\n\t\t\t<TargetFramework>netcoreapp2.2</TargetFramework>\r\n\t\t\t<!-- Skipped -->\r\n\t\t</PropertyGroup>\r\n\t\t<PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|AnyCPU'\">\r\n\t\t\t<DocumentationFile>$(OutputPath)doc.xml</DocumentationFile>\r\n\t\t</PropertyGroup>\r\n\t\t<ItemGroup>\r\n\t\t\t<Reference Include=\"System\">\r\n\t\t\t\t<HintPath>System</HintPath>\r\n\t\t\t</Reference>\r\n\t\t</ItemGroup>\r\n\t</Project>\r\n\r\nThe setting is used, but the doc.xml is produced in the root of the project instead of $(OutputPath).\r\n\r\nSame XML expression for `<DocumentationFile>` works OK for desktop .NET, i.e. the problem is specific to .NET Core projects.\r\n\r\nTried `$(OutDir)` and `$(qwer123)` got same result. Why $(OutputPath) is not defined? Maybe it has different name?","Url":"https://github.com/dotnet/sdk/issues/3588","RelatedDescription":"Closed issue \"MSBuild doesn’t define variables for .NET core?\" (#3588)"},{"Id":"486766608","IsPullRequest":false,"CreatedAt":"2019-08-29T17:05:04","Actor":"AkosLukacs","Number":"3586","RawContent":null,"Title":"FSharp - Compiler crashes if an anonymous record passed as obj argument","State":"closed","Body":"The FSharp compiler's issue was reported FSharp repo: https://github.com/dotnet/fsharp/issues/6434, and is fixed, and does work with 3.0.100-preview8-013656.\r\nBut doesn't work with SDK 2.2.401, I guess the compiler fix isn't in 2.2.401. Do you plan on releasing new version for 2.2?\r\n\r\nRepro: \r\n> dotnet new console -lang F#\r\n\r\n```fsharp\r\n// Program.fs, stolen from Vasily\r\nlet foo (_: obj) = ()\r\n\r\nlet bar() = foo {| F = 1 |}\r\n\r\n[<EntryPoint>]\r\nlet main argv =\r\n    bar()\r\n    0\r\n```\r\n\r\n> dotnet run\r\n\r\n# 2.2.401\r\nFails `error FS0192 : internal error : the anonymous record <>f__AnonymousType951611317`1' has not been generated in the pre-phase of generating this module`\r\n - Failed before I installed v3 preview\r\n - Did work after installing v3 preview\r\n - Failed to compile again after creating global.json and setting sdk version to 2.2.401\r\n\r\n# 3.0.100-preview8-013656\r\nWorks as expected\r\n","Url":"https://github.com/dotnet/sdk/issues/3586","RelatedDescription":"Closed issue \"FSharp - Compiler crashes if an anonymous record passed as obj argument\" (#3586)"},{"Id":"486811709","IsPullRequest":false,"CreatedAt":"2019-08-29T08:24:33","Actor":"PDostalek","Number":"3587","RawContent":null,"Title":"[loc][Query][sdk] Localizability of \"0; \"FailedToDeleteApphost\"","State":"open","Body":"Hi,\r\nplease help localization team to answer question from translator.\r\nIn case translator is not sure about context/meaning/localizability of string we raise a question.\r\n\r\nSource:\r\nNETSDK1111: Failed to delete output apphost: {0}\r\n\r\nFile Name:\r\nTasks\\Common\\Resources\\xlf\\Strings.xlf\r\n\r\n==========================================\r\nQuery:\r\nWould you please confirm if \"apphost\" can be translated? \r\nWhat does the placeholder {0} in this string imply?","Url":"https://github.com/dotnet/sdk/issues/3587","RelatedDescription":"Open issue \"[loc][Query][sdk] Localizability of \"0; \"FailedToDeleteApphost\"\" (#3587)"},{"Id":"486639844","IsPullRequest":false,"CreatedAt":"2019-08-28T22:29:49","Actor":"olgaark","Number":"3585","RawContent":null,"Title":"Microsoft.NET.Build.Extensions.Tasks.dll\tshould not be loaded in devenv projecc during reference resolution for native vc projects","State":"open","Body":"The problem is found while investigating \r\nVS Bug 973252: Perf: CPlusPlus_DDRIT.0900.Close Solution regressed VM_AdjustedImagesInMemory_Total_devenv by 2.000 Count (0.5%). Baseline 29226.70\r\n\r\nMicrosoft.NET.Build.Extensions.Tasks.dll is loaded by _HandlePackageFileConflicts target during\r\n\r\nTarget Name=ResolveAssemblyReferences Project=ConsoleApplication1.vcxproj  note that there is no assembly references in the native vc project\r\n            …\r\n            Target Name=_HandlePackageFileConflicts Project=ConsoleApplication1.vcxproj\r\n\r\nThe target is implemented here:\r\n\r\nf:\\Visual Studio 16 Master\\MSBuild\\Microsoft\\Microsoft.NET.Build.Extensions\\Microsoft.NET.Build.Extensions.ConflictResolution.targets\r\n============================================================================================================================================\r\n-->\r\n  <UsingTask TaskName=\"ResolvePackageFileConflicts\" AssemblyFile=\"$(MicrosoftNETBuildExtensionsTasksAssembly)\" />\r\n  <Target Name=\"_HandlePackageFileConflicts\" BeforeTargets=\"$(_HandlePackageFileConflictsBefore)\" AfterTargets=\"$(_HandlePackageFileConflictsAfter)\"  \r\nDependsOnTargets=\"GetReferenceAssemblyPaths\">\r\n    <ResolvePackageFileConflicts References=\"@(Reference)\" ReferenceCopyLocalPaths=\"@(ReferenceCopyLocalPaths)\" PlatformManifests=\"@(PackageConflictPlatformManifests)\" TargetFrameworkDirectories=\"$(TargetFrameworkDirectory)\" PackageOverrides=\"@(PackageConflictOverrides)\" PreferredPackages=\"$(PackageConflictPreferredPackages)\">\r\n      <Output TaskParameter=\"ReferencesWithoutConflicts\" ItemName=\"_ReferencesWithoutConflicts\" />\r\n      <Output TaskParameter=\"ReferenceCopyLocalPathsWithoutConflicts\" ItemName=\"_ReferenceCopyLocalPathsWithoutConflicts\" />\r\n      <Output TaskParameter=\"Conflicts\" ItemName=\"_ConflictPackageFiles\" />\r\n    </ResolvePackageFileConflicts>\r\n\r\nIs this target doing something applicable to vc projects? If not, please either disable it for vcxproj or add a condition so cpp targets can disable it.\r\nAt least, please add a condition there for empty @(Reference) so the task dll is not loaded in this case.\r\n\r\n","Url":"https://github.com/dotnet/sdk/issues/3585","RelatedDescription":"Open issue \"Microsoft.NET.Build.Extensions.Tasks.dll\tshould not be loaded in devenv projecc during reference resolution for native vc projects\" (#3585)"},{"Id":"486095529","IsPullRequest":false,"CreatedAt":"2019-08-28T00:12:21","Actor":"dsplaisted","Number":"3582","RawContent":null,"Title":"RID-specific self-contained .NET Core 3 app with dependency on Microsoft.NETCore.App 2.0.0 fails to run","State":"open","Body":"# Repro\r\n\r\nBuild and run the following project:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp3.0</TargetFramework>\r\n    <RuntimeIdentifier>win10-x64</RuntimeIdentifier>\r\n    <SelfContained>false</SelfContained>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.NETCore.App\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\n# Expected\r\n\r\nProject runs successfully\r\n\r\n# Actual\r\n\r\nProject fails to run with error messages such as the following:\r\n\r\n- > A fatal error was encountered. The library 'hostpolicy.dll' required to execute the application was not found in 'C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App\\3.0.0-preview9.19416.11'.\r\n- > The specified framework 'Microsoft.NETCore.App', version '3.0.0-preview9-19409-16' was not found.\r\n\r\nThe output folder also includes the following files, which come from the Microsoft.NETCore.App 2.0.0 package closure:\r\n\r\n- apphost.exe\r\n- hostfxr.dll\r\n- hostpolicy.dll\r\n- System.Private.CoreLib.dll\r\n\r\n# Details\r\n\r\nNuGet/Home#7344 would fix this.  Alternatively, we could try to use conflict resolution to exclude these extra assets.  That would probably require updating the platform manifest in the targeting pack.","Url":"https://github.com/dotnet/sdk/issues/3582","RelatedDescription":"Open issue \"RID-specific self-contained .NET Core 3 app with dependency on Microsoft.NETCore.App 2.0.0 fails to run\" (#3582)"},{"Id":"485985392","IsPullRequest":false,"CreatedAt":"2019-08-27T19:14:13","Actor":"livarcocc","Number":"3581","RawContent":null,"Title":"symbols packages being generated empty","State":"open","Body":"We have turned off symbols package generation for now on this repo.\r\n\r\nThey were generating empty nupkgs and conflicting with the actual nupkgs when the sign tool was repackaging signing assemblies.\r\n\r\nThe fact that symbols are empty here are causing symbol checks to fail on VS insertions.","Url":"https://github.com/dotnet/sdk/issues/3581","RelatedDescription":"Open issue \"symbols packages being generated empty\" (#3581)"},{"Id":"485513070","IsPullRequest":true,"CreatedAt":"2019-08-27T00:17:39","Actor":"JohnTortugo","Number":"3580","RawContent":null,"Title":"Disable symbol creation for now","State":"closed","Body":"The symbol packages getting created were causing conflicts in SignToolTask. Disabling the symbol creation until the proper adjustments are made to prevent inadvertently signing symbol packages.\r\n\r\n/cc @riarenas ","Url":"https://github.com/dotnet/sdk/pull/3580","RelatedDescription":"Closed or merged PR \"Disable symbol creation for now\" (#3580)"},{"Id":"485478158","IsPullRequest":true,"CreatedAt":"2019-08-26T23:35:07","Actor":"JohnTortugo","Number":"3579","RawContent":null,"Title":"Use SignTool with more logging","State":"closed","Body":"This new SignTool will show more information about what's repacking\r\n\r\nRelates to: https://github.com/dotnet/core-eng/issues/7569","Url":"https://github.com/dotnet/sdk/pull/3579","RelatedDescription":"Closed or merged PR \"Use SignTool with more logging\" (#3579)"},{"Id":"485304558","IsPullRequest":true,"CreatedAt":"2019-08-26T15:47:11","Actor":"mmitche","Number":"3578","RawContent":null,"Title":"[release/3.0.100-preview9] add PublishUsingPipelines parameter to publish-build-assets template …","State":"closed","Body":"…(#3569)","Url":"https://github.com/dotnet/sdk/pull/3578","RelatedDescription":"Closed or merged PR \"[release/3.0.100-preview9] add PublishUsingPipelines parameter to publish-build-assets template …\" (#3578)"},{"Id":"485211681","IsPullRequest":true,"CreatedAt":"2019-08-26T12:30:48","Actor":"dotnet-maestro[bot]","Number":"3577","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/core-setup","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee7760b1-2875-4869-d002-08d7114cdbad)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190905.02\r\n- **Date Produced**: 9/5/2019 9:33 AM\r\n- **Commit**: caa8d3b1edd7eec947f6283f8342a9249b5d7171\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-rc1-19455-02\r\n\r\n[marker]: <> (End:ee7760b1-2875-4869-d002-08d7114cdbad)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3577","RelatedDescription":"Open PR \"[release/3.0.1xx] Update dependencies from dotnet/core-setup\" (#3577)"},{"Id":"484749883","IsPullRequest":true,"CreatedAt":"2019-08-24T01:01:14","Actor":"dotnet-maestro[bot]","Number":"3576","RawContent":null,"Title":"[release/3.0.100-preview9] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:99181a82-e62d-4080-a0f9-08d721cca946)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190823.09\r\n- **Date Produced**: 8/23/2019 8:02 PM\r\n- **Commit**: 2be172345a420387413bab7ce9053a52624c4461\r\n- **Branch**: refs/heads/release/3.0-preview9\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-preview9-19423-09\r\n\r\n[marker]: <> (End:99181a82-e62d-4080-a0f9-08d721cca946)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3576","RelatedDescription":"Closed or merged PR \"[release/3.0.100-preview9] Update dependencies from dotnet/core-setup\" (#3576)"},{"Id":"484701489","IsPullRequest":true,"CreatedAt":"2019-08-23T23:20:56","Actor":"wli3","Number":"3572","RawContent":null,"Title":"Correct branding","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/3572","RelatedDescription":"Closed or merged PR \"Correct branding\" (#3572)"},{"Id":"484742881","IsPullRequest":true,"CreatedAt":"2019-08-23T23:03:41","Actor":"livarcocc","Number":"3575","RawContent":null,"Title":"Skip tests in official builds. We have no reason to run them again si…","State":"open","Body":"…nce they already ran on CI. This should speed up builds out of the sdk repo.","Url":"https://github.com/dotnet/sdk/pull/3575","RelatedDescription":"Open PR \"Skip tests in official builds. We have no reason to run them again si…\" (#3575)"},{"Id":"484739215","IsPullRequest":true,"CreatedAt":"2019-08-23T22:45:47","Actor":"dsplaisted","Number":"3574","RawContent":null,"Title":"Update a test to skip running for target frameworks not supported by current OS","State":"open","Body":"","Url":"https://github.com/dotnet/sdk/pull/3574","RelatedDescription":"Open PR \"Update a test to skip running for target frameworks not supported by current OS\" (#3574)"},{"Id":"484721294","IsPullRequest":true,"CreatedAt":"2019-08-23T22:01:01","Actor":"dsplaisted","Number":"3573","RawContent":null,"Title":"Always gather logs","State":"closed","Body":"Even if build succeeded, so we can debug things like signing failures.","Url":"https://github.com/dotnet/sdk/pull/3573","RelatedDescription":"Closed or merged PR \"Always gather logs\" (#3573)"},{"Id":"484693602","IsPullRequest":true,"CreatedAt":"2019-08-23T21:54:37","Actor":"dotnet-maestro[bot]","Number":"3571","RawContent":null,"Title":"[release/3.0.100-preview9] Update dependencies from nuget/nuget.client","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:67c23412-2e21-4d69-a886-08d7219800a1)\r\n## From https://github.com/NuGet/NuGet.Client\r\n- **Build**: 5.3.0.6192\r\n- **Date Produced**: 8/23/2019 7:15 PM\r\n- **Commit**: bb60d6720d24890b8f3e071e70d27ea0f2bef57e\r\n- **Branch**: refs/heads/dev\r\n- **Updates**:\r\n  - **NuGet.Build.Tasks** -> 5.3.0-rtm.6192\r\n\r\n[marker]: <> (End:67c23412-2e21-4d69-a886-08d7219800a1)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3571","RelatedDescription":"Closed or merged PR \"[release/3.0.100-preview9] Update dependencies from nuget/nuget.client\" (#3571)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"489344106","IsPullRequest":false,"CreatedAt":"2019-09-04T19:14:05","Actor":"leecow","Number":"120","RawContent":null,"Title":".NET Core 3.0 Preview 9","State":"open","Body":".NET Core Preview 9 released today. https://github.com/dotnet/core/issues/3304 has been opened for discussion. \r\n\r\n[Release Notes](https://github.com/dotnet/core/blob/master/release-notes/3.0/preview/3.0.0-preview9.md)\r\n[Download](https://github.com/dotnet/core/blob/master/release-notes/3.0/preview/3.0.0-preview9-download.md)\r\n\r\n**Blog posts**\r\n\r\n[.NET Core](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0-preview-9/)\r\n[ASP.NET Core](https://devblogs.microsoft.com/aspnet/asp-net-core-and-blazor-updates-in-net-core-3-0-preview-9/)\r\n\r\nPlease report any issues you find with 3.0.0 Preview 9, either responding to this issue, creating a new issue or creating a new issue in one of the following repos:\r\n\r\n* [aspnet/AspNetCore](https://github.com/aspnet/AspNetCore) - for ASP.NET Core questions\r\n* [aspnet/EntityFrameworkCore](https://github.com/aspnet/EntityFrameworkCore) - for Entity Framework Core questions\r\n* [dotnet/cli](https://github.com/dotnet/cli/issues) - for CLI tools and questions\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues) - for API issues and questions\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues) - for runtime issues\r\n* [dotnet/core-setup](https://github.com/dotnet/core-setup/issues) - for installer issues\r\n* [dotnet/winforms](https://github.com/dotnet/winforms/issues) - for Winforms issues\r\n* [dotnet/wpf](https://github.com/dotnet/wpf/issues) - for WPF issues\r\n* [nuget/home](https://github.com/nuget/home/issues) - for NuGet questions and issues","Url":"https://github.com/dotnet/announcements/issues/120","RelatedDescription":"Open issue \".NET Core 3.0 Preview 9\" (#120)"},{"Id":"480859726","IsPullRequest":false,"CreatedAt":"2019-08-14T19:54:26","Actor":"stephentoub","Number":"119","RawContent":null,"Title":"Consolidating .NET GitHub repos","State":"open","Body":"*To discuss these plans, please comment on the corresponding issue at https://github.com/dotnet/coreclr/issues/26175.*\r\n\r\nOver the next few months, we plan to consolidate several of the foundational repositories of .NET Core, including dotnet/coreclr and dotnet/corefx.\r\n\r\n.NET’s repository structure on GitHub was initially created in a fairly fine-grained manner, with the aim of enabling runtime agility and increased developer productivity.  However, this separation has led to a variety of complications for contributors and maintainers alike.  For example:\r\n- **Confusion about where issues should be opened.**  It’s not always clear in which repo an issue should be reported, complicated by the fact that some implementations actually span repositories (e.g. a type might be exposed through a reference assembly and have its tests in corefx but actually be implemented in System.Private.CoreLib in coreclr).\r\n- **Difficulty sharing source.**  System.Private.CoreLib is intricately connected to the rest of the runtime, and thus has lived with the runtime code.  That, however, means that although corefx has been intended as the place to share as much core library code as possible across any underlying runtime, we’ve needed to keep a significant body of code in System.Private.CoreLib, which then has meant it’s needed to be “mirrored” to each runtime repo (coreclr, corert, mono) that needs to consume it as source; similarly, corefx has similarly required access to much of that source, for example to use the same interop DllImports that are employed elsewhere in the runtimes.  The automatic mirror that shares this source needs to be maintained, and even when it has been, it’s often led to lag.  It’s also complicated developer processes, where to validate a change in one repo generally requires manually mirroring the code to other local repos in order to validate the change and ensure merging into one repo won’t break the others.\r\n- **PRs spanning multiple repos.**  Because the runtime, CoreLib, and the core libraries are all intricately linked, changing runtime behaviors, adding new APIs, or changing various build processes (e.g. improving static analysis) often requires multiple PRs carefully staged across time and multiple repos.  For example, to add a new method to a type like Dictionary<>, a developer must first make the source changes in her local coreclr repo and the test and reference assembly changes in her local corefx repo.  When satisfied with the fix, the developer must submit a PR to coreclr as well as a PR to corefx, the latter of which will fail.  Eventually the coreclr PR will be merged, and the changes will mirror to the other runtimes that also require the update.  Eventually those mirror PRs will be merged, and builds will be created containing the fix for each runtime.  At some point later those builds will be consumed into the corefx repo, after which point the original corefx PR can be re-validated and eventually merged.  That’s the best case; things get more complicated in situations where there are bidirectional dependencies.\r\n- **Building an installable runtime.** Self-hosting a custom built .NET requires intricate knowledge of how all the repos work and interact.  A developer can’t just clone a single repo, make a desired change, and easily produce an installer.\r\n- **Consistency.**  One goal we had for more fine-grained repos was to enable isolation and independence for teams working within each repo’s confines, but this has led to non-trivial duplication of effort on things like build systems and CI, and then the resulting lack of consistency as each system ends up diverging from the others.\r\n\r\nThe issues go beyond the runtime.  For example, the ASP.NET maintainers and community did a great job in the past year or so consolidating from ~55 repos down to ~5 repos, but that’s still more repos than is desirable, leading to similar issues as cited above for the runtime.  On top of that, these ASP.NET repositories are in the aspnet GitHub org, which adds an additional set of issues, for example:\r\n- **Complications moving issues between repos.**  If a developer opens an issue in aspnet/aspnetcore and it’s determined that the cause of the issue is actually in dotnet/corefx, there is no GitHub mechanism to enable easily moving that issue across the aspnet to dotnet organizational boundary.\r\n- **Permissions.** Each organization’s permissions end up needing to be managed and maintained separately.\r\n\r\nThe issues extend into tooling as well.  For example, we currently have multiple repositories that all logically make up the dotnet CLI, but actually creating a working installer spans multiple repos.\r\n\r\n### Plan\r\n\r\nTo address these issues, we’re planning to make some changes to our repository structure:\r\n- **dotnet/platform.**  We plan to combine dotnet/coreclr, dotnet/corefx, dotnet/corert, dotnet/core-setup, and the relevant portions of mono/mono into a new dotnet/platform repo.  Everything needed to build and produce the Microsoft.NETCore.App shared framework will be in this repo.  We will no longer suffer from the complications of source mirroring.  Features like changing runtime behavior or adding an API will no longer require a complicated dance across multiple repos.  Etc.\r\n- **dotnet/aspnetcore.**  We plan to move the existing aspnet/aspnetcore repository into the dotnet organization.  Along with that, we aim to combine a variety of the other aspnet repositories into aspnetcore, such as aspnet/blazor.  Whether repos like entityframeworkcore remain separate or combined remains an open question.  A goal is that, just as dotnet/platform will be responsible for the creation of Microsoft.NETCore.App, dotnet/aspnetcore will be responsible for the creation of Microsoft.AspNETCore.App.\r\n- **dotnet/cli.**  We plan to combine dotnet/toolset and dotnet/sdk into the dotnet/cli repo.\r\n\r\n### FAQ\r\n\r\n#### Why are we merging repos?\r\n\r\nWe believe we can significantly improve several aspects of .NET on GitHub by combining repos, benefiting both maintainers and contributors.  These improvements will manifest in a variety of ways, such as in better issue management, much easier models of contribution, and easier and faster ways to build and install the resulting bits.\r\n\r\n####  What will happen to the aspnet org?\r\n\r\nThe aspnet org as a separate entity is legacy and artificial.  In time we hope to absorb it into the dotnet org and sunset the aspnet org.\r\n\r\n#### Will the coreclr and corefx repos go away?\r\n\r\nWith the help of GitHub, we plan to migrate all issues from these repos to the new dotnet/platform repo, and then lock down creation of additional issues, such that the repos will no longer be used for issue management.  We will also inhibit the creation of PRs to the master branch, which will effectively become an archive for read-only review of history.  In this sense, these repos will be archived, and no active development will happen with them.  However, we plan to continue servicing previous .NET Core releases out of these repos, so the various release branches (e.g. release/2.1, release/3.0, etc.) will continue to see (limited) activity.\r\n\r\n#### Will the mono repo go away?\r\n\r\nNo. mono/mono contains the source for the full mono stack and will continue to live on happily.  We will simply be moving the managed source associated with System.Private.CoreLib and copying the relatively small amount of source that makes up the native mono runtime to dotnet/platform.  We may choose to then use some mirroring technology to keep the runtime copy in sync (this will, however, not suffer from the same mirroring issues we currently experience, as we would not be mirroring between two components required to build the same binaries), or we may choose to let them diverge and manually sync only those changes deemed relevant to both implementations.\r\n\r\n#### Will the corert repo go away?\r\n\r\nYes.  We plan to retire/archive the corert repo.  Some of the technology in the corert repo will be migrated to the master branch of dotnet/platform, where it will be productized as part of .NET.  Other portions of the corert repo will be migrated to feature branches of dotnet/platform, where the experimentation can continue.  In this way, we will use feature branches to continue experimenting with the corert technology, while making it easier to share portions with its shipping counterpart and also graduate functionality into master if/when it’s ready.\r\n\r\n#### Does this mean there will be a single repo for all of .NET?\r\n\r\nNo.  We will be reducing the number of repos that contribute to .NET, but currently we do not believe that going all the way down to one is the right answer.\r\n\r\n#### Doesn’t this mean that issue and PR tracking will now be overwhelming?\r\n\r\nIt is already the case that the vast majority of issues in a given repo are not relevant to any individual developer, and with several thousand open issues in each repo and on the order of a hundred open PRs in each, we already need systems (e.g. labels) to successfully manage issues and PRs.  As such, we don’t believe the merging will have a significant impact on this aspect of developer productivity.  If it turns out to have an unexpectedly large negative impact, we will work with the community to find ways to mitigate the problem.  However, there are already a multitude of successful open source projects on GitHub with at least an order of magnitude more issues.\r\n\r\n#### What will happen to existing issues?\r\n\r\nWith the help of GitHub functionality, we plan to migrate all issues from old repos (e.g. dotnet/coreclr, dotnet/corefx) to the new repos (e.g. dotnet/platform).  We may also use this as a forcing function to revisit stale issues and either close those that are no longer relevant or reinvigorate those that are demanding of more immediate attention.\r\n\r\n#### What about git history?\r\n\r\nIn general, we plan to keep history, such that history from each constituent repo will be a part of the new repo.  However, we have made some mistakes in the past (e.g. large binaries, multitudes of automated PRs for flowing bits and source between repos, etc.), and we plan to rewrite history to correct those mistakes wherever possible and impactful.  Some rough calculations suggest this could end up significantly reducing the size of the repos as well as the time it takes to clone, which should not only help developers approaching the project but also CI.  This will end up meaning that SHAs may be different in the new repo than they were in the old repo; as previously mentioned, however, any references to the old SHAs in the old repos will continue to work, as those repos will remain accessible.\r\n\r\n#### Will I still show up in the contributor list due to previous contributions?\r\n\r\nYes.  We plan to merge all such history.\r\n\r\n#### Will this break debugging with SourceLink?\r\n\r\nNo.  The existing repos will continue to be accessible, and commit SHAs there will remain unchanged.\r\n\r\n#### Might plans change?\r\n\r\nSure.  Part of the goal of posting this announcement is to hear from you, hear about additional benefits you're excited about, and hear about additional concerns we may not have considered.  We will include such ideas in our planning and course correct as necessary.\r\n\r\n## Discussion\r\n\r\nTo discuss these plans, please comment on the corresponding issue at https://github.com/dotnet/coreclr/issues/26175.\r\n","Url":"https://github.com/dotnet/announcements/issues/119","RelatedDescription":"Open issue \"Consolidating .NET GitHub repos\" (#119)"},{"Id":"470434872","IsPullRequest":false,"CreatedAt":"2019-07-19T16:54:02","Actor":"richlander","Number":"118","RawContent":null,"Title":".NET Core master branches have switched to \"5.0\"","State":"open","Body":"# .NET Core master branches have switched to \"5.0\"\r\n\r\nVarious .NET Core repos have switched their `master` branches to \"5.0\", and will use 3.x branches for 3.0 and 3.1 projects. This is very similar to how we approached 2.x and 3.0 projects. As context, `master` branches produced 3.0 builds for the entire period of the 2.2 project.\r\n\r\nAt present, this change is only relevant if you contribute to .NET Core repositories. Otherwise, we recommend that you wait for the 5.0 Preview releases before installing this new version.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/core #3059](https://github.com/dotnet/core/issues/3059)\r\n\r\n## Details\r\n\r\nThe following repos have moved their master branches to \"5.0\":\r\n\r\n- [dotnet/coreclr](https://github.com/dotnet/coreclr)\r\n- [dotnet/corefx](https://github.com/dotnet/corefx)\r\n- [dotnet/core-setup](https://github.com/dotnet/core-setup)\r\n\r\nYou can see that [5.0 .NET Core Runtime builds](https://github.com/dotnet/core-setup#daily-builds) are now being built and published at dotnet/core-setup.\r\n\r\nIn large part, we switched `master` to 5.0 to enable to the community to contribute changes. As the .NET Core 3.0 released has progressed, we've had to increase scrutiny on the changes we will accept. Now that we've permanently branched for 3.0, we can accept a much broader set of changes. Please consider that to be an open invitation!\r\n\r\nNotably, [dotnet/core-sdk](https://github.com/dotnet/core-sdk) is not yet producing 5.0 builds. We expect that the dotnet/core-sdk master branch will continue as a 3.0 branch for 2-3 months while we finish up the .NET Core 3.0 project.\r\n\r\nAt present, there is no developer experience for 5.0. We are waiting on the dotnet/core-sdk repo to switch to 5.0. Switching your project file to target `netcoreapp5.0` won't do anything useful. We'll update this issue when a 5.0 SDK comes available.","Url":"https://github.com/dotnet/announcements/issues/118","RelatedDescription":"Open issue \".NET Core master branches have switched to \"5.0\"\" (#118)"},{"Id":"465501070","IsPullRequest":false,"CreatedAt":"2019-07-08T23:25:31","Actor":"terrajobst","Number":"117","RawContent":null,"Title":"System.Text.Json usability study results","State":"open","Body":"We've performed a usability study on the new `System.Text.Json` APIs which will replace JSON.NET as the default JSON experience in .NET Core 3.0:\r\n\r\n* We focused on the primary \"getting started\" scenarios to validate that we picked the right type- and method names.\r\n* We simulated what we believe to be common error cases to validate that our exception messages are understandable and actionable.\r\n* Since we were short on time, we couldn't use the recruiting provided by the UX lab but instead brought in our own developers, which we recruited from the .NET engineering team\r\n\r\nThis has worked out well for us as we were able to get short term feedback which resulted in significant improvements to the overall API shape and usability. In the future, we should do more API focused UX studies 😊\r\n\r\n## Tasks\r\n\r\n| # | Description                            | Code\r\n|:--|:---------------------------------------|:-----\r\n| 1 | Serialize and pretty print             | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario1/Program.cs#L19-L31)\r\n| 2 | Deserialize with trailing comma        | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario2/Program.cs#L19-L25)\r\n| 3 | Deserialize with custom property names | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario3/Program.cs#L30-L45)\r\n| 4 | Read with DOM                          | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario4/Program.cs#L20-L35)\r\n| 5 | Pretty print an existing JSON file     | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario5/Program.cs#L26-L34)\r\n\r\n## Hypotheses\r\n\r\nWe expect developers to...\r\n\r\n| # | Description                                            | Result\r\n|:--|:-------------------------------------------------------|:---------------\r\n| 1 | ...assume the APIs are similar/identical to JSON.NET   |  Validated\r\n| 2 | ...complete tasks 1-4 successfully                     |  Validated\r\n| 3 | ...struggle/unable to complete the task 5, because it requires working with two different components which is very different from JSON.NET |  Invalidated\r\n| 4 | ...not look at documentation for most of their coding as IntelliSense is good enough |  Invalidated\r\n| 5 | ...be happy with the experience of using the API                                     |  Validated\r\n| 6 | ...plan on using `System.Text.Json` for their next JSON task                         |  Partially Validated\r\n\r\n##  Key Observations\r\n\r\n* Everyone completed scenarios #1-#3, 2 didn't complete #4, 6 didn't complete #5\r\n    - The reason was always \"out of time\". Every person who started a scenario successfully finished it.\r\n    - We feel this validates that we picked the right scope for a 60 minute study of people from various backgrounds\r\n* Overall people liked the new API\r\n    - Key value prop for most people was the fact that \"it's now built in\"\r\n    - Very few mentioned perf and the ones that did thought that it probably wouldn't make a difference in their scenarios.\r\n    - Most people said they would prefer `System.Text.Json` for new APIs, but would stick to JSON.NET in code that already uses it.\r\n    - **[Action]** None, this is in line with what we expected.\r\n* Virtually everyone tried to google for sample code in the documentation\r\n    - Everyone found our blog post and online documentation\r\n    - People new to .NET were confused that JSON.NET and `System.Text.Json` weren't the same thing\r\n    - Everyone complained that the current docs are lacking, especially sample code.\r\n    - **[Action]** Docs are work in progress. We plan on shipping with a fully documented API surface and sample code.\r\n* Virtually everyone found the key type relatively quickly\r\n    - Some people were confused when types were static, rather than something that one can new up\r\n    - **[Action]** None. This is by-design as we try to reduce the number of allocations.\r\n* Virtually everyone had trouble selecting the correct method on\r\n  `JsonSerializer`\r\n    - We chose a very complicated naming convention\r\n    - **[Action]** We simplified it by using names that people in the study told us were looking for.\r\n* Most of our error messages were well received because they told people what\r\n  the problem is & how they can fix them.\r\n    - One error message was unclear because we reported an unexpected character when we could have reported that we didn't expect a comment.\r\n    - **[Action]** We've reworded the error message.\r\n    - We had one error message that was generated by a lower layer and provided an action item that doesn't make sense when people receive it when using the higher layer component.\r\n    - **[Action]** We've reworded the error message to be more generic so it makes sense for both kind of consumers.\r\n* Virtually everyone used the new Roslyn completion feature which will also show\r\n  types from namespaces not imported yet.\r\n    - However, virtually nobody realized that they were doing it.\r\n    - This caused confusion when people found other APIs that happen to include Json in them, specifically the old data contract serialization.\r\n    - **[Action]** Talk to the Roslyn IDE team to see if this something more people will run into. This could prove to be especially problematic for technologies that share type names (e.g. `UserControl` in WinForms and WPF) and both are referenced by the project.\r\n* Optional parameters and `async`/`await` are usability cliffs\r\n    - Many were confused by optional parameters and tried to pass them in, even though they didn't have to.\r\n    - **[Action]** Talk to the Roslyn IDE team to see if we can visualize them better in VS.\r\n    - **[Action]** Try to avoid heavy use of optional parameters for mainline APIs.\r\n    - Async is a very steep cliff. People have no idea what to do in their code to make async work. While IntelliSense shows the usage by prefixing it with await, people didn't notice that.\r\n    - **[Action]** Unclear; this is a broader issue.\r\n* Virtually nobody used F1 to get help for APIs\r\n    - *Surprise*. I expected more people to use <kbd>F1</kbd>.\r\n* Virtually everyone used F12 to explore the API (\"metadata view\")\r\n    - *Surprise*. I expected most people to explore the type via the\r\n      IntelliSense completion\r\n* Nobody used Object Browser to explorer the APIs\r\n    - *Surprise*. I expected at least some people to.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/39304.","Url":"https://github.com/dotnet/announcements/issues/117","RelatedDescription":"Open issue \"System.Text.Json usability study results\" (#117)"},{"Id":"465034831","IsPullRequest":false,"CreatedAt":"2019-07-08T03:13:38","Actor":"leecow","Number":"116","RawContent":null,"Title":"Updates to releases.json (.NET Core release metadata)","State":"open","Body":"**The changes described in this issue will be live with the .NET Core July update on 7/9/2019.**\r\n\r\nThe releases.json files (e.g. [2.2 releases.json](https://raw.githubusercontent.com/dotnet/core/master/release-notes/2.2/releases.json)) are comprehensive metadata files which capture details of each .NET Core release. These files, along with the top level [releases-index.json](https://raw.githubusercontent.com/dotnet/core/master/release-notes/releases-index.json), are becoming increasingly important .NET Core release assets. These files, one for each major.minor channel, are relied upon by many to detect when updates for .NET Core are available, discover security update details and other uses.\r\n\r\nChanges are sometimes necessary, and the growing dependencies require that we treat compatibility of the schema with the utmost care. This announcement describes an addition to the releases.json schema.\r\n\r\n## SDK Versions and Visual Studio\r\n\r\nBecause of current .NET Core SDK product construction dependencies, there is a hard link between the Runtime, SDK, toolset (compilers, MSBuild, NuGet, and other components), and Visual Studio. Simplistically, this means that when anything updates, everything updates. The unfortunate result of this linking is that multiple versions of the SDK are released with each monthly update for each supported versions of Visual Studio. For example, the May Update for .NET Core 2.2 included the 2.2.5 runtime, 2.2.107 SDK for Visual Studio 2017 and 2.2.204 for Visual Studio 2019 and yet another pair of SDK versions for .NET Core 2.1. An example of this is the [2.2.5 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.5/2.2.5.md). \r\n\r\nThis is a confusing situation and we are working to mitigate the need to release multiple SDKs with .NET Core 3.0. The need for multiple SDK versions will persist for 2.1 LTS.\r\n\r\n## Adding the SDKS array\r\n\r\nTo appropriately model multiple SDKs per release, we are adding an SDKs array to releases.json, which will contain SDK objects. The top-level SDK object will represent the highest versioned SDK for a given update. Using the previous 2.2.5 update example, SDK 2.2.204 is in the top SDK object as well as duplicated in the SDKS array. All other applicable 2.2* SDK objects are included in the SDKS array. The SDK objects within the array will carry specific Visual Studio compatibility and version inclusion information to provide appropriate context.\r\n\r\nHere is an example of the new array based on the upcoming July update.\r\nAgain, this will be additive and the previous SDK object will include the highest SDK version for the release.\r\n\r\n```json\r\n{\r\n    \"sdk\": {\r\n        \"version\": \"2.2.301\",\r\n        \"version-display\": \"2.2.301\",\r\n        \"runtime-version\": \"2.2.6\",\r\n        \"vs-version\": \"16.1.3\",\r\n        \"vs-support\": \"Visual Studio 2019 (v16.1)\",\r\n        \"csharp-version\": \"7.3\",\r\n        \"fsharp-version\": \"4.5\",\r\n        \"vb-version\": null,\r\n        \"files\": []\r\n    },\r\n    \"sdks\": [\r\n        {\r\n            \"version\": \"2.2.301\",\r\n            \"version-display\": \"2.2.301\",\r\n            \"runtime-version\": \"2.2.6\",\r\n            \"vs-version\": \"16.1.3\",\r\n            \"vs-support\": \"Visual Studio 2019 (v16.1)\",\r\n            \"csharp-version\": \"7.3\",\r\n            \"fsharp-version\": \"4.5\",\r\n            \"vb-version\": null,\r\n            \"files\": []\r\n        },\r\n        {\r\n          \"version\": \"2.2.205\",\r\n          \"version-display\": \"2.2.205\",\r\n          \"runtime-version\": \"2.2.6\",\r\n          \"vs-version\": \"16.0.5\",\r\n          \"vs-support\": \"Visual Studio 2019 (v16.0)\",\r\n          \"csharp-version\": \"7.3\",\r\n          \"fsharp-version\": \"4.5\",\r\n          \"vb-version\": null,\r\n          \"files\": []\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\n## vs-version and the Runtime\r\n\r\nThe same version of the runtime is included in multiple versions of Visual Studio. To account for this, the vs-version field is being updated to a comma-delimited string. The string will represent all versions of Visual Studio which first include the particular .NET Core update. Again, an example from the upcoming July Update.\r\n\r\n```json\r\n\"runtime\": {\r\n        \"version\": \"2.2.6\",\r\n        \"version-display\": \"2.2.6\",\r\n        \"vs-version\": \"15.9.13, 16.1.3, 16.2.0\",\r\n```\r\n\r\nThe same `vs-versions` changes will be seen in the `aspnetcore-runtime` object.\r\n\r\n## Future Enhancements\r\n\r\nThere are other improvements to the schema which have been suggested by the community which we are evaluating. Generally, theses enhancements are additive and should not represent compatibility compromises for existing parsers and similar announcements will be published ahead of any changes.\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/116","RelatedDescription":"Open issue \"Updates to releases.json (.NET Core release metadata)\" (#116)"},{"Id":"444065225","IsPullRequest":false,"CreatedAt":"2019-05-14T18:38:23","Actor":"TaraOverfield","Number":"114","RawContent":null,"Title":"May 2019 .NET Updates","State":"open","Body":"# May 2019 .NET Updates\r\n\r\nThe following .NET updates were released in May 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.16 and .NET Core SDK 1.1.13( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.16/1.0.16.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.13/1.1.13.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.11 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.11/2.1.11.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.5 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.5/2.2.5.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2727](https://github.com/dotnet/core/issues/2727)\r\n\r\n## .NET Framework\r\n* [.NET Framework May 2019 Security and Quality Rollup - May 14, 2019](https://devblogs.microsoft.com/dotnet/net-framework-may-2019-security-and-quality-rollup/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/114","RelatedDescription":"Open issue \"May 2019 .NET Updates\" (#114)"},{"Id":"444027703","IsPullRequest":false,"CreatedAt":"2019-05-14T17:06:24","Actor":"blowdart","Number":"113","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and ASP.NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core and ASP.NET Core improperly handle web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core and ASP.NET Core application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core and ASP.NET Core web applications handle web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37651\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Private.Uri package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0, 4.3.1 | 4.3.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Nemanja Mijailovic](https://mijailovic.net/)\r\n\r\n### External Links\r\n\r\n[CVE-2019-0981](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0981)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/113","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability\" (#113)"},{"Id":"444027025","IsPullRequest":false,"CreatedAt":"2019-05-14T17:04:45","Actor":"blowdart","Number":"112","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and ASP.NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core and ASP.NET Core improperly handle web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core and ASP.NET Core application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core and ASP.NET Core web applications handle web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37650\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Private.Uri package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0, 4.3.1 | 4.3.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Nemanja Mijailovic](https://mijailovic.net/)\r\n\r\n### External Links\r\n\r\n[CVE-2019-0980](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0980)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/112","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability\" (#112)"},{"Id":"444026277","IsPullRequest":false,"CreatedAt":"2019-05-14T17:02:57","Actor":"blowdart","Number":"111","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core improperly process RegEx strings. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET application.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handle RegEx string processing.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37649\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Text.RegularExpressions package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Text.RegularExpressions.dll | 4.3.0 | 4.3.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0820](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0820)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/111","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability\" (#111)"},{"Id":"435015242","IsPullRequest":false,"CreatedAt":"2019-04-19T01:16:10","Actor":"MichaelSimons","Number":"110","RawContent":null,"Title":"New images for .NET Framework 4.8","State":"open","Body":"# New images for .NET Framework 4.8\r\n\r\nNew images have been released with support for [.NET Framework 4.8 runtime and SDK](https://devblogs.microsoft.com/dotnet/announcing-the-net-framework-4-8/).\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#271](https://github.com/Microsoft/dotnet-framework-docker/issues/271)\r\n\r\n## Details\r\n* Pull request: #270\r\n\r\nYou can access these new images with the following tags:\r\n* `mcr.microsoft.com/dotnet/framework/runtime:4.8`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.8`\r\n\r\nIn addition, the `latest` tag has been updated to refer to these new 4.8 images.\r\n\r\nCheck out the readme files for more information on the latest tags:\r\n* [Runtime](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.runtime.md)\r\n* [SDK](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.sdk.md)\r\n\r\nThe [3.5 SDK](https://github.com/Microsoft/dotnet-framework-docker/tree/master/3.5/sdk) images are intended to always contain the latest .NET Framework SDK and have also been updated to use the 4.8 SDK.","Url":"https://github.com/dotnet/announcements/issues/110","RelatedDescription":"Open issue \"New images for .NET Framework 4.8\" (#110)"},{"Id":"433297298","IsPullRequest":false,"CreatedAt":"2019-04-15T13:57:07","Actor":"MichaelSimons","Number":"109","RawContent":null,"Title":".NET Framework SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Framework SDK container images now contain the Visual Studio 2019 toolset\r\n.NET Framework SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add additional tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Framework SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Framework SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#269](https://github.com/Microsoft/dotnet-framework-docker/issues/269)\r\n\r\n## Details\r\nVisual Studio 2019 was released on April 2, 2019. We updated the .NET Framework SDK container images, on the same day, to include a new version of the .NET Framework SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag (e.g. mcr.microsoft.com/dotnet/framework/sdk:4.7.2-20190312-windowsservercore-ltsc2019).\r\n\r\nRelated pull request: [#252](https://github.com/Microsoft/dotnet-framework-docker/pull/252)","Url":"https://github.com/dotnet/announcements/issues/109","RelatedDescription":"Open issue \".NET Framework SDK container images now contain the Visual Studio 2019 toolset\" (#109)"},{"Id":"432735158","IsPullRequest":false,"CreatedAt":"2019-04-12T20:35:55","Actor":"KathleenDollard","Number":"108","RawContent":null,"Title":".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017","State":"open","Body":"# .NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\r\n\r\n.NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017. For example, 2.2.203 and 2.1.603 cause failures in Visual Studio 2017. To work on projects in Visual Studio 2017, use .NET Core SDK 2.2.1nn and 2.1.5nn, such as 2.2.106 and 2.1.506. You can install any combination of these SDKs side by side.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3124](https://github.com/dotnet/sdk/issues/3124)\r\n\r\n## Details\r\n\r\nYou can find the SDKs on you machine using the following at a command prompt:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2. Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nIf you downloaded the .NET Core SDK 2.2 between April 2 and April 12, 2019, the main [.NET downloads page](https://dotnet.microsoft.com/download/) included only 2.2.2nn. Starting April 12th, a new button marked \"Compatible with Visual Studio 2017\" is provided to target 2.2.1nn. If you downloaded 2.2 prior to this date, and you use Visual Studio 2017, install the compatible version.\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nThis problem most often occurs because you manually uninstall the 2.1.5nn version. Simply reinstall it from the [.NET Core 2.1 downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n## More information\r\n\r\nHere is the draft of an article we are preparing for .NET Core documentation:\r\n\r\n---\r\n\r\n## Solving Problems with .NET Core SDK Selection in Visual Studio\r\n\r\nYou may have .NET Core SDKs on your machine and still have problems with Visual Studio finding an appropriate one. This article explains why this happens and how you can fix your installation.\r\n\r\nWhen Visual Studio can't find an appropriate version of the .NET Core SDK, you'll receive an error message. This may appear in the Error pane as NETSDK1045:\r\n\r\n\"The current .NET SDK does not support targeting .NET Core 2...\"\r\n\r\nYou can check what .NET Core SDKs you have on your machine with the following command:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\nUnless you have a global.json file, when you use `dotnet` from the command line, the latest .NET Core SDK is used.\r\n\r\n> [TIP!] \r\n> Open a command prompt and try to build with `dotnet build`. If the command line build works, but Visual Studio doesn't suggestions in this article may help.\r\n\r\nThe last two digits of the .NET Core SDK version numbers are in the format are a patch number, which is represented by `nn` in this article because we will continue to service them to include the latest runtimes. To find out more, vist the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\n## Fixes for Common Problems\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2… Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.2.1nn. As an example, 2.2.106 would be a valid entry.\r\n\r\nIf you downloaded the .NET Core SDK 2.2 after April 2, 2019, version 2.2.2nn (such as 2.2.203) is listed first and is the highest version available. However, Visual Studio 2017 requires 2.2.1nn (such as 2.2.106). .NET Core SDK 2.2.2nn works with Visual Studio 2019. Visual Studio 2017 and Visual Studio 2019 can be installed side by side, but this requires both .NET Core SDK 2.2.1nn and .NET Core SDK 2.2.2nn to develop .NET Core 2.2 applications.\r\n\r\nTo download .NET Core SDK 2.2.2nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.1.5nn. As an example, 2.1.505 would be a valid entry. \r\n\r\nThis problem occurs of you manually uninstall the 2.1.5nn version.\r\n\r\nThe Visual Studio 2019 installation will not remove this file and Visual Studio 2017 will continue to work side by side.\r\n\r\nTo reinstall .NET Core SDK 2.1.5nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n### Visual Studio 2019 can't target .NET Core 3.0 Preview\r\n\r\nIf you receive this error message in Visual Studio 2019:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 3.0.100-preview... As an example, SDK 3.0.100-preview3-010431 would be a valid entry.\r\n\r\nTo install .NET Core SDK 3.0.1nn preview, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/3.0).\r\n\r\nIn Visual Studio, go to `Tools\\Options\\Projects and Solutions\\.NET Core` and check the box `Use Previews of the .NET Core SDK`.\r\n\r\n> [NOTE!]\r\n> This option will be moving to `Tools\\Options\\Environment` and renamed `Preview Features` in Visual Studio 2019 version 16.1 Preview 2.\r\n\r\nIf you are targeting .NET Core 3.0 preview, the [C# language version will be C# 8.0 Preview by default](https://docs.microsoft.com/en-us/visualstudio/releases/2019/release-notes#csharp-defaults) allowing you to use new C# features.\r\n\r\n## Understand the relationship between .NET Core SDKs and Visual Studio build tools\r\n\r\nVisual Studio has its own copies of tools like MSBuild, NuGet and the compilers. If you install the .NET Core workload, it also installs the .NET Core SDK which has versions of these tools and provides tasks and targets. These two versions are built from the same repositories, but target .NET Framework and .NET Core respectively. \r\n\r\nWhen you build a .NET Core project in Visual Studio, it uses Visual Studio's copy of MSBuild, but the tasks and targets are supplied from the selected version of the .NET Core SDK. \r\n\r\nWhen you upgrade the .NET Core SDK, you get new tasks and targets. These new tasks and targets may contain features that are not supported by older versions of MSBuild. Like all of the .NET Core SDK, MSBuild is backwards compatible. It is not forwards compatible.\r\n\r\nThis generally works well, but requires a guarantee that the tasks and targets work with the MSBuild version. To ensure this, each .NET Core SDK indicates an MSBuild version range that is used by Visual Studio to determine compatibility. Versions of the .NET Core SDK that have a higher MSBuild identifier than expected are ignored by Visual Studio. In the normal case, this simply means you use the tasks and targets that were installed with your version of Visual Studio.\r\n\r\nBecause of this, you may have many versions of the .NET Core SDK on your machine and Visual Studio still fail to find one it considers appropriate. This is compounded by a poor error message, which we cannot fully correct because it is from the old version of the .NET Core SDK on your machine. Confusion is also compounded by a complex non-linear release matrix that makes it difficult to predict the right .NET Core SDK to select. We are working to improve all this. \r\n\r\n## The Visual Studio / .NET Core SDK support matrix\r\n\r\nThe last two digits of the .NET Core SDK version number are a patch number, which are represented by a `nn` in this table. You can learn more about .NET Core SDK and .NET Core Runtime versioning at the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\nThe following table shows which Visual Studio versions and .NET Core SDKs are compatible and how they are acquired if you are working with Visual Studio. \r\n\r\n| .NET Core SDK | .NET Core Runtime | Compatible Visual Studio | MSBuild | Notes                                     |\r\n|---------------|-------------------|--------------------------|---------|-------------------------------------------|\r\n| 2.1.5nn       | 2.1               | 2017                     | 15      | Installed as part of VS 2017 version 15.9 |\r\n| 2.1.6nn       | 2.1               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 2.2.1nn       | 2.2               | 2017                     | 15      | Installed manually                        |\r\n| 2.2.2nn       | 2.2               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 3.0.1nn       | 3.0 (Preview)     | 2019                     | 16      | Installed manually                        |\r\n\r\nVisual Studio 2017 cannot work with .NET Core SDK 2.1.6nn or 2.2.2nn.\r\n\r\nTo find out more about removing older versions of the .NET Core Runtime and .NET Core SDK, visit the [How to remove the .NET Core Runtime and SDK page](https://docs.microsoft.com/en-us/dotnet/core/versions/remove-runtime-sdk-versions?tabs=macos).\r\n\r\nTo download the .NET Core SDK, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core).","Url":"https://github.com/dotnet/announcements/issues/108","RelatedDescription":"Open issue \".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\" (#108)"},{"Id":"432081093","IsPullRequest":false,"CreatedAt":"2019-04-11T15:16:43","Actor":"KathleenDollard","Number":"107","RawContent":null,"Title":"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below","State":"open","Body":"# Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\r\n\r\n.NET Core 3 takes the next step in the .NET Core tool strategy with local tools. As part of this process, starting in Preview 4 DotNetCliToolReference tools will be restricted to targeting .NET Core 2.2 and below. DotNetCliToolReference tools can be used in projects targeting .NET Core 3.0, but the tools themselves should target .NET Core 2.2 or below.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3115](https://github.com/dotnet/sdk/issues/3115)\r\n\r\n## Details\r\n\r\nThe suggested approach going forward is to to use [.NET Core Local Tools](https://aka.ms/local-tools) when you want a tool that is specific to a project or repository. At the same time we are removing the need to access local tools by the verbose `dotnet tool run <toolname>` that was present in earlier previews. You can now access local tools via `dotnet <toolname>`.\r\n\r\nDotNetCliToolReference tools have a flaw in how their dependencies are restored which can create [difficult to diagnose bugs when running these tools](https://github.com/NuGet/Home/issues/5067). This issue would occur much more frequently if targeting .NET Core 3.0 was allowed. Restricting tools to target only .NET Core 2.2 and below means existing scenarios to continue to work (as well as they previously did), regardless of the framework version targeted by the project or the current .NET Core SDK. \r\n\r\nThe new .NET Core tool strategy avoids this flaw in restore strategy and offers other benefits, like the ability to author one type of tool and install it in different ways depending on project and user needs.\r\n\r\nWe look forward to your feedback on .NET Core Local Tools, and on challenges you face moving away from DotNetCliToolReference tools. \r\n\r\n[dotnet/sdk #3057](https://github.com/dotnet/sdk/pull/3057)","Url":"https://github.com/dotnet/announcements/issues/107","RelatedDescription":"Open issue \"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\" (#107)"},{"Id":"431012407","IsPullRequest":false,"CreatedAt":"2019-04-09T14:51:18","Actor":"MichaelSimons","Number":"106","RawContent":null,"Title":".NET Core SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Core SDK container images now contain the Visual Studio 2019 toolset\r\n\r\n.NET Core SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add *additional* tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Core SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Core SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1042](https://github.com/dotnet/dotnet-docker/issues/1042)\r\n\r\n## Details\r\n\r\n[Visual Studio 2019](https://devblogs.microsoft.com/visualstudio/visual-studio-2019-code-faster-work-smarter-create-the-future/) was released on April 2, 2019. We updated the .NET Core SDK container images, on the same day, to include a new version of the .NET Core SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag:\r\n\r\n* 2.1: `mcr.microsoft.com/dotnet/core/sdk:2.1.505`\r\n* 2.2: `mcr.microsoft.com/dotnet/core/sdk:2.2.105`\r\n\r\nDetails:\r\n\r\n* [dotnet/dotnet-docker #1029](https://github.com/dotnet/dotnet-docker/pull/1029)\r\n* [2.1 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.602-SDK/2.1.602-SDK.md)\r\n* [2.2 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.202-SDK/2.2.202-SDK.md)\r\n\r\n## Known Breaking Changes for SDK images (VS 2017 to VS 2019 upgrade)\r\n\r\nThe following issues and breaks have been discovered.\r\n \r\n### Test Log File Name Change\r\n\r\nA change was introduced to the `dotnet test` command when a user-defined log file name is specified.  In the previous version the resulting log file would be named exactly as specified.  In the current version, the log file is named with a timestamp suffix automatically added to the user-defined name.  \r\n\r\nDetails:\r\n* [Microsoft/vstest #1603](https://github.com/Microsoft/vstest/issues/1603) \r\n* [Microsoft/vstest#1876](https://github.com/Microsoft/vstest/issues/1876)","Url":"https://github.com/dotnet/announcements/issues/106","RelatedDescription":"Open issue \".NET Core SDK container images now contain the Visual Studio 2019 toolset\" (#106)"},{"Id":"431003701","IsPullRequest":false,"CreatedAt":"2019-04-09T14:35:39","Actor":"MichaelSimons","Number":"105","RawContent":null,"Title":"Windows Server, version 1709 no longer Supported by .NET Framework","State":"open","Body":"# Windows Server, version 1709 no longer Supported by .NET Framework\r\n\r\nWindows Server, version 1709 is no longer supported. As a result, this version of Windows is no longer supported by the .NET Team and we will no longer produce .NET Framework container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Framework Docker images](https://hub.docker.com/_/microsoft-dotnet-framework)\r\n* [.NET Framework Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-framework)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-framework-docker #259](https://github.com/Microsoft/dotnet-framework-docker/issues/259)\r\n\r\n## Details\r\n\r\nDocker tags that contain `windowsservercore-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Windows Server and .NET Framework.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `4.7.1`, and  `4.7.2`. These are tags that are supported on multiple operating systems and versions, and do  not contain the operating system in them. As a result of no longer producing new images for Windows Server, version 1709, manifest tags no longer include entries for Windows 10, version 1709, and Windows Server,version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.17134-based image is incompatible with a 10.0.16299 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Windows Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Windows Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/framework/runtime:4.7.2-windowsservercore-1709` or `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-windowsservercore-1709`.","Url":"https://github.com/dotnet/announcements/issues/105","RelatedDescription":"Open issue \"Windows Server, version 1709 no longer Supported by .NET Framework\" (#105)"},{"Id":"430998341","IsPullRequest":false,"CreatedAt":"2019-04-09T14:25:57","Actor":"MichaelSimons","Number":"104","RawContent":null,"Title":"Nano Server 2016 and 1709 no longer Supported by .NET Core","State":"open","Body":"# Nano Server 2016 and 1709 no longer Supported by .NET Core\r\n\r\nNano Server 2016 and Nano Server, version 1709 are no longer supported. As a result, these versions of Windows are no longer supported by the .NET Team and we will no longer produce .NET Core container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Core Docker images](https://hub.docker.com/_/microsoft-dotnet-core)\r\n* [.NET Core Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-core)\r\n* [Products Reaching End of Support for 2018](https://support.microsoft.com/en-us/help/4043450/products-reaching-end-of-support-for-2018)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\nWe previously announced Nano Server 2016 going out of support in [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/). That post is still accurate.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1041](https://github.com/dotnet/dotnet-docker/issues/1041)\r\n\r\n## Details\r\n\r\nDocker tags that contain `nanoserver-sac2016` and `nanoserver-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Nano Server and .NET Core.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `2.1`, `2.1-sdk`, `2.2.1-runtime`. These are tags that are supported on multiple operating systems, and do not contain the operating system in them. As a result of no longer producing new images for Nano Server 2016 and Nano Server, version 1709, manifest tags no longer include entries for Nano Server 2016, Windows Server 2016, Windows 10, version 1607, Windows 10, version 1709, and Windows Server, version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.16299-based image is incompatible with a 10.0.14393 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Nano Server 2016 or Nano Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Nano Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-sac2016` or `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-1709`.\r\n\r\n### Nano Server Support\r\n\r\n.NET Core is supported on Nano Server, version 1803 and later. \r\n\r\n.NET Core 2.x and 3.0 images are available for all supported versions of Nano Server, version 1803 and later. This means that 2.x and 3.0 manifest tags can be used on Windows 10, version 1803+, and Windows Server, version 1803+. You can also use non-manifest tags for those versions, too, such as `2.2-nanoserver-1809`.\r\n\r\n.NET Core 1.x images are available for Nano Server, version 1809 and later. This means that 1.x manifest tags can be used on Windows 10, version 1809+, Windows Server, version 1809+ and Windows Server 2019. You can also use non-manifest tags for those versions, too, such as `1.1-nanoserver-1809` tag.","Url":"https://github.com/dotnet/announcements/issues/104","RelatedDescription":"Open issue \"Nano Server 2016 and 1709 no longer Supported by .NET Core\" (#104)"},{"Id":"420117627","IsPullRequest":false,"CreatedAt":"2019-03-12T17:35:16","Actor":"vivmishra","Number":"103","RawContent":null,"Title":"March 2019 .NET Updates","State":"open","Body":"# March 2019 .NET Updates\r\n\r\nThe following .NET updates were released in March 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework March 2019 Update - March 19, 2019](https://devblogs.microsoft.com/dotnet/net-framework-march-2019-update/)\r\n* [.NET Framework April 2, 2019 Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - April 2, 2019](https://devblogs.microsoft.com/dotnet/net-framework-april-2-2019-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.15 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.15/1.0.15.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.12/1.1.12.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.9 and .NET Core SDK 2.1.505 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.9/2.1.9.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.3 and .NET Core SDK 2.2.105 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.3/2.2.3.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2432](https://github.com/dotnet/core/issues/2432)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/103","RelatedDescription":"Open issue \"March 2019 .NET Updates\" (#103)"},{"Id":"415363751","IsPullRequest":false,"CreatedAt":"2019-02-27T22:49:51","Actor":"leecow","Number":"102","RawContent":null,"Title":"SDK Installers will remove previous patch versions","State":"open","Body":"The SDK Installers for Windows will upgrade patch versions in place within the same feature band. This will reduce the number of SDKs that are installed on programmer machines.\r\n\r\nFeature bands of the SDK are defined like 3.0.1nn. [Find out more about SDK version numbers](https://docs.microsoft.com/dotnet/core/versions/#versioning-details).\r\n\r\nThis means when .NET Core SDK 3.0.101 becomes available and is installed, .NET Core SDK 3.0.100 will be removed from the machine if it exists. When .NET Core SDK 3.0.200 becomes available and is installed on the same machine, .NET Core SDK versions like 3.0.101 will not be removed but stay side by side with 3.0.200.\r\n\r\nThis approach supports use of `global.json` which will roll forward across patch versions, but not feature bands of the SDK. Thus, upgrading via the SDK installer will not result in errors due to a missing SDK. Feature bands also align with side by side Visual Studio installations for those users that install SDKs for Visual Studio use. For example, Visual Studio 15.9 uses .NET Core SDK 2.2.500 but does not support .NET Core SDK 2.2.600.\r\n\r\nFind out how to [remove other .NET Core SDK versions here.](https://docs.microsoft.com/dotnet/core/versions/remove-runtime-sdk-versions).","Url":"https://github.com/dotnet/announcements/issues/102","RelatedDescription":"Open issue \"SDK Installers will remove previous patch versions\" (#102)"},{"Id":"410971363","IsPullRequest":false,"CreatedAt":"2019-02-15T22:24:40","Actor":"richlander","Number":"101","RawContent":null,"Title":"Publishing .NET Core images to Microsoft Container Registry (MCR)","State":"open","Body":"# Publishing .NET Core images to Microsoft Container Registry (MCR)\r\n\r\nMicrosoft teams are now publishing container images to the [Microsoft Container Registry](https://azure.microsoft.com/en-us/blog/microsoft-syndicates-container-catalog/). There are two primary reasons for this change:\r\n\r\n* Syndicate Microsoft-provided container images to multiple registries, like Docker Hub and Red Hat.\r\n* Use Microsoft Azure as a global CDN for delivering Microsoft-provided container images.\r\n\r\nYou will use and see MCR as a storage back-end for Microsoft images. The primary way you learn about Microsoft container images and tags will be through a registry, which for most users will continue to be Docker Hub. Most of the experience you've had browsing for .NET Core container images will continue unchanged with this new model. The Docker Hub URLs you've used for Microsoft repos will continue to work, and forward to updated locations on Docker Hub. Existing Docker Hub will images will be maintained as-is.\r\n\r\nSee [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/) for the most updated information on our use of MCR.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #935](https://github.com/dotnet/dotnet-docker/issues/935)\r\n\r\n## Starting with .NET Core nightly repo\r\n\r\nOn the .NET team, we started our [transition to MCR](https://github.com/dotnet/dotnet-docker/issues/745) with the .NET Core \"nightly\" repo. [dotnet-nightly](dockerhub.com/r/microsoft/dotnet-nightly) is now hosted on MCR and syndicated to Docker Hub. We started with the nightly repo in order to discover and fix any challenges we found with this new model before we move our higher-traffic primary container repository.\r\n\r\nWe will start publishing [dotnet](dockerhub.com/r/microsoft/dotnet) to MCR a bit later, in either February or March. This issue will be updated when that happens.\r\n\r\n## Repo Split\r\n\r\nThe [.NET Core repo](https://hub.docker.com/r/microsoft/dotnet) currently includes 4 major categories of tags: \r\n\r\n* `sdk`\r\n* `aspnetcore-runtime`\r\n* `runtime` \r\n* `runtime-deps`\r\n\r\nProviding all of the tags in one place has helped with discoverability but made for a repo with an enormous README that can be challenging to navigate and consume. It is large enough that we exceeded Docker Hub README limits and had to artificially make it smaller.\r\n\r\nGoing forward, we will provide a repo for each of the tag categories listed above. We'll also provide a \"product repo\" that will hierarchicaly group all of our repos together. This will satisfy discoverability needs so that it will be easy to find the tags you want.\r\n\r\nYou can already see this experience with [microsoft-dotnet-core-nightly](https://hub.docker.com/_/microsoft-dotnet-core-nightly). There are now multiple repos for our nightly builds:\r\n\r\n* [.NET Core Nightly product repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly)\r\n* [.NET Core SDK Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-sdk/)\r\n* [.NET Core ASP.NET Core Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-aspnet/)\r\n* [.NET Core Runtime Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime/)\r\n* [.NET Core Runtime-deps Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime-deps/)\r\n\r\nThe same split will exist for the non-nightly stable repo (currently hosted at  [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet)) when we start publishing it to MCR and syndicating it back to DockerHub.\r\n\r\n## Changes to registry URL\r\n\r\nThe biggest change is that your Dockerfiles need to be updated to point to the MCR registry in order get access to new .NET Core container tags. The same change is required for scripts or human operations that pull images via `docker pull`.\r\n\r\nThe following example shows the registry path, repo and tag for the .NET Core 2.2 \"Nightly\" SDK on MCR:\r\n\r\n```console\r\nmcr.microsoft.com/dotnet/core-nightly/sdk:2.2\r\n```\r\n\r\nAs comparison, the following repo and tag have been used to date for the .NET Core 2.2 \"Nightly\" SDK on Docker Hub:\r\n\r\n```console\r\nmicrosoft/dotnet-nightly:2.2-sdk\r\n```\r\n\r\nThe new repo URL is provided at each of the news repos. For example, the new .NET Core SDK \"nightly\" repo provides a box on the right where you can copy and paste the correct MCR-based repo syntax that you can use for `docker pull` or in `FROM` statements in your Dockerfiles.\r\n\r\n![image](https://user-images.githubusercontent.com/2608468/52811702-95c5eb80-304a-11e9-8de8-e6ea1f4b4d75.png)\r\n\r\n## Servicing existing Docker Hub tags\r\n\r\nWe will continue to service existing non-version-specific or floating tags on Docker Hub while the associated .NET Core version is supported. For example the `microsoft/dotnet:2.1-sdk` tag is a floating tag that will continue to be serviced for the lifetime of .NET Core 2.1. You can continue using floating tags without issue.\r\n\r\nIf you use non-floating tags, like `microsoft/dotnet:2.1.504-sdk-alpine`, then you will need to update your Dockerfile to use a new non-floating tag. No new non-floating tags will be published to `microsoft/dotnet` and `microsoft/dotnet-nightly` after we fully transition to MCR.\r\n\r\n.NET Core 3.0 Preview 3 and later will only be made available on MCR.\r\n\r\n## Microsoft is a Verified Publisher\r\n\r\nUntil now, Microsoft-provided container images were considered \"community images\". As part of this change, we are re-classifying Microsoft as a \"verified publisher\" on Docker Hub. This designation should make it clearer that .NET and other Microsoft-provided images are coming from a verified source. There clearly was that expectation previously, but Docker is now making that clearer in the Docker Hub pages they host for Microsoft.\r\n\r\nWe will provide official vulnerability scanning Microsoft-provided images as a second phase of this transition.","Url":"https://github.com/dotnet/announcements/issues/101","RelatedDescription":"Open issue \"Publishing .NET Core images to Microsoft Container Registry (MCR)\" (#101)"},{"Id":"410784442","IsPullRequest":false,"CreatedAt":"2019-02-15T14:06:29","Actor":"TaraOverfield","Number":"100","RawContent":null,"Title":"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809","State":"open","Body":"<strong><em>Final Update 2/19/19 @1:30 PM (PST)</em></strong><em>: This </em><em>advisory is now resolved with no action needed from Microsoft Customers. The issue was not applicable to any valid or supported configuration. There is no consequence for .NET 4.8 Preview customers. </em>\r\n\r\n<em>We strive to share timely information to protect our customer’s productivity, in this case, our finding was thankfully of no consequence for customers on supported configurations.</em>\r\n\r\n<del><em><strong>Update 2/15/19 @3:35 PM (PST)</strong></em><em>: As we continue our investigation, we are finding the issue to be restricted to a limited and isolated set of test-only systems that are using non-official versions of the .NET 4.8 Preview. As of 2/15/19 around 12:00 pm (PST) we further tightened our delivery mechanisms to ensure that the February .NET security updates are only deployed to their expected target systems.</em></del>\r\n\r\n<del><span>The </span><a href=\"https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/\" rel=\"nofollow\">February 2019 Security and Quality Rollup for Windows 10 update 1809</a><span> was released earlier this week. We have received multiple customer reports of issues when a customer has installed .NET Framework 4.8 Preview then installed the February security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>.</span> These reports are specific to only to the scenario when a customer has installed both .NET Framework 4.8 Preview and the February security update.</del>\r\n\r\n<del>We are actively working on investigating and addressing this issue. If you installed the February 2019 security update and have not seen any negative behavior, we recommend that you leave your system as-is but closely monitor it and ensure that you apply upcoming .NET Framework updates.</del>\r\n\r\n<del>We will continue to update this <a href=\"https://github.com/dotnet/announcements/issues/100\" rel=\"nofollow\">post</a> as we have new information.</del>\r\n<h2><del>Guidance</del></h2>\r\n<del>We are working on guidance and will update this post and as we have new information.</del>\r\n<h2><del>Workaround</del></h2>\r\n<del>There are no known workarounds at this time.</del>\r\n<h2><del>Symptoms</del></h2>\r\n<del>After installing .NET Framework 4.8 Preview then the February 2019 security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>, Visual Studios will crash with this error message:</del>\r\n<p class=\"xxxxxmsonormal\"><del><b><span style=\"font-size: 10.5pt;font-family: 'Segoe UI',sans-serif;color: black\">\"Exception has been thrown by the target of an invocation.\"</span></b></del></p>","Url":"https://github.com/dotnet/announcements/issues/100","RelatedDescription":"Open issue \"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809\" (#100)"},{"Id":"410455095","IsPullRequest":false,"CreatedAt":"2019-02-14T19:28:25","Actor":"richlander","Number":"99","RawContent":null,"Title":"Supporting new Alpine versions (for containers)","State":"open","Body":"# Supporting new Alpine versions (for containers)\r\n\r\n[Alpine 3.9](https://twitter.com/alpinelinux/status/1090416212822110214) was recently announced. Congratulations, Alpine team! On the .NET team, we are committed to supporting new Alpine versions quickly, and also need to define a policy for older versions. This policy only applies for the container images that we publish.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #933](https://github.com/dotnet/dotnet-docker/issues/933)\r\n\r\n## Policy\r\n\r\nWe intend to establish the following policy for supporting Alpine with .NET Core container images:\r\n\r\n* Support new Alpine versions within 60 days of release (hopefully much less).\r\n* Support n-1 Alpine versions for 3 months after we support a new Alpine version.\r\n\r\nNote: The [.NET Core support policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md) may be broader. This policy is specific to the container images we produce.\r\n\r\n## Plans\r\n\r\nWe're in the process of [fixing issues required to support Alpine 3.9](https://github.com/dotnet/dotnet-docker/issues/921). We expect that these issues will be resolved in February and that we'll be able to provide support for Alpine 3.9 in March.\r\n\r\nWe will produce Alpine 3.9 images for .NET Core 2.1, 2.2 and 3.0. Assuming we publish 3.9 images in March, we'll stop producing and supporting Alpine 3.7 and 3.8 images after June (2019).\r\n\r\n## Using Alpine-based .NET Core images\r\n\r\nWe produce a variety of Alpine-based images. You can either depend on a specific Alpine version, like with `microsoft/dotnet:2.2-sdk-alpine3.8` or opt to use the latest Alpine image we have to offer, like with `microsoft/dotnet:2.2-sdk-alpine`. Either are good choices. It is just a question of whether you want to make a conscious decision to move to later Alpine releases.\r\n\r\n## Support for ARM32?\r\n\r\nWe produce Alpine images for x64 (and ARM64, shortly). The [Alpine 3.9 announcement](https://twitter.com/alpinelinux/status/1090416212822110214) made mention of support for ARM32v7. We would like to enable .NET Core [Alpine-based images on ARM32](https://github.com/gliderlabs/docker-alpine/issues/463#issuecomment-460530395). We are patiently waiting for that to happen. If that's important to you, you should comment on that thread.","Url":"https://github.com/dotnet/announcements/issues/99","RelatedDescription":"Open issue \"Supporting new Alpine versions (for containers)\" (#99)"},{"Id":"409840927","IsPullRequest":false,"CreatedAt":"2019-02-13T14:48:21","Actor":"TaraOverfield","Number":"98","RawContent":null,"Title":"February 2019 .NET Updates","State":"open","Body":"# February 2019 .NET Updates\r\nThe following .NET updates were released in February 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework February 2019 Security and Quality Rollup - February 12, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/)\r\n* [.NET Framework February 2019 Preview of Quality Rollup - February 19, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/19/net-framework-february-2019-preview-of-quality-rollup/)\r\n\r\n## .NET Support Policies\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/98","RelatedDescription":"Open issue \"February 2019 .NET Updates\" (#98)"},{"Id":"409436643","IsPullRequest":false,"CreatedAt":"2019-02-12T18:21:22","Actor":"leecow","Number":"97","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability","State":"open","Body":"## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a domain spoofing vulnerability in .NET Framework and .NET Core which causes the meaning of a URI to change when International Domain Name encoding is applied. An attacker who successfully exploited the vulnerability could redirect a URI.\r\n\r\nThe security update addresses the vulnerability by disallowing certain Unicode characters from the URI.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/35265\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core 1.0 or 1.1 based application that uses the [System.Private.Uri](https://www.nuget.org/packages/System.Private.Uri/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0 | 4.3.1\r\n\r\nAny .NET Core 2.1 or 2.2 based application that uses the [Microsoft.NETCore.App](https://www.nuget.org/packages/Microsoft.NETCore.App) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6, 2.1.7, 2.2.0, 2.2.1 | 2.1.8, 2.2.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Private.Uri` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.2.1, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Private.Uri/4.3.0` is a reference to version 4.3.0 of `System.Private.Uri`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.8 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.2 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Private.Uri` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.Private.Uri` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0657](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0657)\r\n\r\n### Revisions\r\n\r\nV1.0 (February 12, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-02-08_\r\n","Url":"https://github.com/dotnet/announcements/issues/97","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability\" (#97)"},{"Id":"397026248","IsPullRequest":false,"CreatedAt":"2019-01-08T18:17:45","Actor":"leecow","Number":"96","RawContent":null,"Title":"January 2019 .NET Updates","State":"open","Body":"# January 2019 .NET Updates\r\n\r\nThe following .NET updates were released in January 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework January 2019 Preview of Quality Rollup - January 15, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/15/net-framework-january-2019-preview-of-quality-rollup/)\r\n* [.NET Framework January 2019 Security and Quality Rollup - January 8, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/08/net-framework-january-2019-security-and-quality-rollup/)\r\n* [.NET Framework January 22, 2018 Preview of Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - January 22, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/22/net-framework-january-22-2018-preview-of-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.7 and .NET Core SDK 2.1.503 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.7/2.1.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.1 and .NET Core SDK 2.2.102 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.1/2.2.1.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2210](https://github.com/dotnet/core/issues/2210)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/96","RelatedDescription":"Open issue \"January 2019 .NET Updates\" (#96)"},{"Id":"397020176","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:27","Actor":"blowdart","Number":"95","RawContent":null,"Title":" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a tampering vulnerability exists when .NET Core improperly handles specially crafted files. An attacker who successfully exploited this vulnerability could write arbitrary files and directories to certain locations on a vulnerable system. However, an attacker would have limited control over the destination of the files and directories.\r\n\r\nTo exploit the vulnerability, an attacker must send a specially crafted file to a vulnerable system\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core handles these files.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34427\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nIf your application does not extract ZIP compressed files it is unaffected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.IO.Compression.ZipFile](https://www.nuget.org/packages/System.IO.Compression.ZipFile/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.IO.Compression.ZipFile) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n`System.IO.Compression.ZipFile` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\nFinally, you must restart your applications once an updated runtime or SDK is installed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Danny Grander](https://twitter.com/grander) of [Snyk](https://snyk.io/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-8416](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8416)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected pacakge table.\r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/95","RelatedDescription":"Open issue \" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\" (#95)"},{"Id":"397020142","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:23","Actor":"blowdart","Number":"94","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of an information disclosure vulnerability exists in .NET Framework and .NET Core which allows bypassing Cross-origin Resource Sharing (CORS) configurations. An attacker who successfully exploited the vulnerability could retrieve content, that is normally restricted, from a web application.\r\n\r\nThe security update addresses the vulnerability by enforcing CORS configuration to prevent its bypass.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34428\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.2.0 | 2.2.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Net.Http` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `SSystem.Net.Http/4.3.0` is a reference to version 4.3.0 of `System.Net.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Net.Http` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0545](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0545)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected package table. \r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n","Url":"https://github.com/dotnet/announcements/issues/94","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\" (#94)"},{"Id":"390948658","IsPullRequest":false,"CreatedAt":"2018-12-14T03:22:58","Actor":"wu-yafeng","Number":"93","RawContent":null,"Title":"Docker image with tag '2.2-aspnetcore-runtime' is not compatible","State":"closed","Body":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]","Url":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Closed issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93)"},{"Id":"390193072","IsPullRequest":false,"CreatedAt":"2018-12-12T12:56:53","Actor":"bilalmalik777","Number":"92","RawContent":null,"Title":".net core Console","State":"closed","Body":"I am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n    networks:\r\n     - app-network\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\nIf the detail is not enough or you do not get my point, you can share your confusion in comment","Url":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Closed issue \".net core Console\" (#92)"},{"Id":"380346599","IsPullRequest":false,"CreatedAt":"2018-11-13T17:44:44","Actor":"leecow","Number":"91","RawContent":null,"Title":"November 2018 .NET Updates","State":"open","Body":"# November 2018 .NET Updates\r\n\r\nThe following .NET updates were released in November 2018. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core November 2018 (2.1.6 and SDK 2.1.500) Update release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.6/2.1.6.md)\r\n\r\nA [discussion issue](https://github.com/dotnet/core/issues/2053) is available for questions or feedback about this release.\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [October 2018](https://github.com/dotnet/announcements/issues/89)\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/91","RelatedDescription":"Open issue \"November 2018 .NET Updates\" (#91)"},{"Id":"375230004","IsPullRequest":false,"CreatedAt":"2018-10-29T21:45:27","Actor":"terrajobst","Number":"90","RawContent":null,"Title":"The future of JSON in .NET Core 3.0","State":"open","Body":"JSON has become an essential part of virtually all modern .NET applications and in many cases even surpassed the usage of XML. However, .NET hasn't had a (great) built-in way to deal with JSON. Instead we've relied on [Json.NET] which continues to serve the .NET ecosystem well.\r\n\r\n[Json.NET]: https://www.newtonsoft.com/json\r\n\r\nMoving forward, we plan on making some changes to our JSON support:\r\n\r\n* **We need high-performance JSON APIs**. We need a new set of JSON APIs that are highly tuned for performance by using `Span<T>` and allows for processing UTF-8 directly without having to transcode to UTF-16 `string` instances. Both aspects are critical for our web server Kestrel, where throughput is a key requirement.\r\n\r\n* **Remove dependency from ASP.NET Core to Json.NET**. Today, ASP.NET Core has a dependency on Json.NET. While this provides a tight integration between ASP.NET Core and Json.NET, it also means that application developers cannot freely choose which JSON library they are using. This is also problematic for customers of Json.NET as the version is dictated by the underlying platform. However, Json.NET is frequently updated and application developers often want to -- or even have to -- use a specific version. Thus, we want to remove the dependency from ASP.NET Core 3.0 to Json.NET so that customers can choose which version to use, without fearing they might accidentally break the underlying platform. In addition, this makes it also possible to plug-in an entirely different JSON library.\r\n\r\n* **Provide an ASP.NET Core integration package for Json.NET**. Json.NET has basically become the Swiss Army knife of JSON processing in .NET. It provides many options and facilities that allow customers to handle their JSON needs with ease. We don't want to compromise on the Json.NET support customers are getting today, for example, the ability to configure the JSON serialization via the `AddJsonOptions` extension method. Thus, we want to provide the Json.NET integration as a NuGet package that developers can optionally install so they get all the bells and whistles they get from Json.NET today. The other part of this work item is to ensure we have the right extension points so that other parties can provide similar integration packages for their JSON library of choice.\r\n\r\nBelow are more details around this plan.\r\n\r\n## The need for high-performance JSON APIs\r\n\r\nThe requirements for the .NET stack have changed a bit since the arrival of .NET Core. Historically, .NET has valued usability and convenience. With .NET Core, we've added a focus on performance, and we've made significant investments to serve high performance needs. And the [improvements we made][techempower] in the popular TechEmpower benchmark are a testament to that.\r\n\r\n[techempower]: https://www.techempower.com/blog/2016/11/16/framework-benchmarks-round-13/\r\n\r\nWith .NET Core 2.1, we've added a brand new primitive called [Span\\<T>][span-msdn] that allows us to represent native memory and arrays in a uniform way. With this type, we've also added a set of parsing and encoding APIs that are much more memory efficient without having to resort to unsafe code.\r\n\r\n[span-msdn]: https://msdn.microsoft.com/en-us/magazine/mt814808.aspx\r\n\r\nPart of the work of minimizing allocations is to avoid having to transcode UTF-8 payloads into UTF-16 strings, purely for parsing reasons. Currently, Json.NET is implemented by reading UTF-16. We need the ability to read (and write) JSON documents directly in UTF-8 because most network protocols (including HTTP) use UTF-8.\r\n\r\nDuring .NET Core 2.1 we've learned that updating our existing APIs to leverage `Span<T>` has limits. While we did add a bunch of overloads that accept spans, we also had to produce brand new APIs that are designed around minimizing allocations and dealing with buffers, which we exposed in `System.Buffers` namespaces. And with `System.IO.Pipelines` we've also added a programming model that enables developers to share buffers without having to deal with lifetime issues.\r\n\r\nBased on these experiences we believe in order to support JSON parsing, we'll need to expose a new set of JSON APIs that are specifically geared for high-performance scenarios.\r\n\r\nYou might wonder why we can't just update Json.NET to include support for parsing JSON using `Span<T>`? Well, James Newton-King -- the author of Json.NET -- has the following to say about that:\r\n\r\n> Json.NET was created over 10 years ago, and since then it has added a wide range of features aimed to help developers work with JSON in .NET. In that time Json.NET has also become far and away NuGet's most depended on and downloaded package, and is the go-to library for JSON support in .NET. Unfortunately, Json.NET's wealth of features and popularity works against making major changes to it. Supporting new technologies like `Span<T>` would require fundamental breaking changes to the library and would disrupt existing applications and libraries that depend on it.\r\n>\r\n> Going forward Json.NET will continue to be worked on and invested in, both addressing known issues today and supporting new platforms in the future. Json.NET has always existed alongside other JSON libraries for .NET, and there will be nothing to prevent you using one or more together, depending on whether you need the performance of the new JSON APIs or the large feature set of Json.NET.\r\n\r\n## Move Json.NET integration into a separate NuGet package\r\n\r\nToday, you cannot use ASP.NET Core without Json.NET because it is a dependency of ASP.NET Core itself. Over the years, we've received feedback that the dependency can conflict with other libraries that have their own dependency on a different version of Json.NET. In the past, we've considered addressing this issue by using a private copy of Json.NET in ASP.NET. However, this would create problems when developers want to configure Json.NET (for instance, in order to control how the serializer behaves when formatting JSON objects).\r\n\r\nMoving forward we'd like to:\r\n\r\n1. Replace the internal usage of Json.NET in ASP.NET Core by the new platform-provided JSON APIs.\r\n\r\n2. Factor the public facing usage of Json.NET into an optional integration package that can be acquired from NuGet.\r\n\r\nSo the existing integration between ASP.NET Core and Json.NET will continue to be supported, but will be moving out of the platform and into a separate package. However, since the integration is then designed to sit on top of the platform, it will also allow customers to update Json.NET to later versions.\r\n\r\nFurthermore, customers who need more performance can also choose to use the new JSON APIs, at the expense of the rich feature set that Json.NET offers.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/33115.","Url":"https://github.com/dotnet/announcements/issues/90","RelatedDescription":"Open issue \"The future of JSON in .NET Core 3.0\" (#90)"}],"ResultType":"GitHubIssue"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1169655923788242945","CreatedAt":"2019-09-05T16:57:58+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demos and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":20,"FavoriteCount":3,"RawContent":null},{"Id":"1169325641541357568","CreatedAt":"2019-09-04T19:05:32+00:00","UserScreenname":"dotnet","Text":"Announcing .NET Core 3.0 Preview 9 https://t.co/eOTg9Nc4Su","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":392,"FavoriteCount":207,"RawContent":null},{"Id":"1169325512033878016","CreatedAt":"2019-09-04T19:05:01+00:00","UserScreenname":"dotnet","Text":"https://t.co/iOiV9qNspl Core and Blazor updates in .NET Core 3.0 Preview 9 https://t.co/esDON00GK9","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":144,"FavoriteCount":81,"RawContent":null},{"Id":"1169016977245032449","CreatedAt":"2019-09-03T22:39:01+00:00","UserScreenname":"dotnet","Text":"Do you care about performance or low-level stuff like SIMD and popcnt? Then this post is for you. https://t.co/rIpKfNwSeu","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":62,"FavoriteCount":24,"RawContent":null},{"Id":"1168996825828855810","CreatedAt":"2019-09-03T21:18:56+00:00","UserScreenname":"dotnet","Text":".@BethMassi get's us revved up and raring to go in the latest .NET Blog post that gives us a #dotNETConf conference… https://t.co/78ndo1xgQJ","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":28,"FavoriteCount":10,"RawContent":null},{"Id":"1168980895031812096","CreatedAt":"2019-09-03T20:15:38+00:00","UserScreenname":"dotnet","Text":"#dotNETConf is coming to a town near you...\n\nWe're not only streaming live, but we're partnering with organizers ar… https://t.co/iON1XQF7Oo","Source":"<a href=\"https://ads-api.twitter.com\" rel=\"nofollow\">Twitter Ads Composer</a>","RetweetCount":993,"FavoriteCount":152,"RawContent":null},{"Id":"1167169777414168576","CreatedAt":"2019-08-29T20:18:54+00:00","UserScreenname":"dotnet","Text":".NET Conference 2019\nDiscover The World Of .NET\nSeptember 23-25\nhttps://t.co/FkW2WpZcMn https://t.co/6bQPcWJFdj","Source":"<a href=\"https://ads-api.twitter.com\" rel=\"nofollow\">Twitter Ads Composer</a>","RetweetCount":1531,"FavoriteCount":252,"RawContent":null},{"Id":"1166751382612787201","CreatedAt":"2019-08-28T16:36:21+00:00","UserScreenname":"dotnet","Text":"How the .NET Team uses @AzureDevOps Pipelines to produce @docker Images https://t.co/SXvj2qewdE","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":127,"FavoriteCount":58,"RawContent":null},{"Id":"1166709015444959233","CreatedAt":"2019-08-28T13:48:00+00:00","UserScreenname":"dotnet","Text":"With the release of .NET Core 3 on the way, we've been putting together tons of great content to get you ready.\n\nCh… https://t.co/SkVCaSDA1b","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":325,"FavoriteCount":147,"RawContent":null},{"Id":"1166481079546478592","CreatedAt":"2019-08-27T22:42:16+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demos and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":16,"FavoriteCount":0,"RawContent":null}]}},"RunOn":"2019-09-06T05:30:34.2879711Z","RunDurationInMilliseconds":14072}