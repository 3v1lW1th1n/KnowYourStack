{"Data":{"Blog":{"FeedItems":[{"Title":"Upcoming Updates for .NET Framework 4.8","PublishedOn":"2019-04-19T21:40:16+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Upcoming Updates for .NET Framework 4.8\nThe .NET Framework 4.8 product release is now available. The .NET Framework 4.8 product will receive updates on the same cadence and the usual channels (Windows...","Href":"https://devblogs.microsoft.com/dotnet/upcoming-updates-for-net-framework-4-8/","RawContent":null},{"Title":"Announcing Entity Framework Core 3.0 Preview 4","PublishedOn":"2019-04-18T22:15:51+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"Today, we are making the fourth preview of Entity Framework Core 3.0 available on NuGet, alongside .NET Core 3.0 Preview 4 and ASP.NET Core 3.0 Preview 4. We encourage you to install this preview to...","Href":"https://devblogs.microsoft.com/dotnet/announcing-entity-framework-core-3-0-preview-4/","RawContent":null},{"Title":"Announcing .NET Core 3 Preview 4","PublishedOn":"2019-04-18T22:13:01+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 3.0 Preview 4. It includes a chart control for Windows Forms, HTTP/2 support, GC updates to use less memory, support for CPU limits with Docker, the addition of...","Href":"https://devblogs.microsoft.com/dotnet/announcing-net-core-3-preview-4/","RawContent":null},{"Title":"Announcing the .NET Framework 4.8","PublishedOn":"2019-04-18T20:12:27+00:00","CommentsCount":9,"FacebookCount":0,"Summary":"We are thrilled to announce the release of the .NET Framework 4.8 today. It’s included in the Windows 10 May 2019 Update. .NET Framework 4.8 is also available on Windows 7+ and Windows Server 2008...","Href":"https://devblogs.microsoft.com/dotnet/announcing-the-net-framework-4-8/","RawContent":null},{"Title":".NET Core April 2019 Updates – 2.1.10 and 2.2.4","PublishedOn":"2019-04-09T20:35:28+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core April 2019 Update. These updates contain security and reliability fixes. See the individual release notes for details on included fixes.\n.NET Core 2.2.4 and .NET...","Href":"https://devblogs.microsoft.com/dotnet/net-core-april-2019-updates-2-1-10-and-2-2-4/","RawContent":null},{"Title":"Announcing ML.NET 1.0 RC – Machine Learning for .NET","PublishedOn":"2019-04-05T23:36:08+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"ML.NET is an open-source and cross-platform machine learning framework (Windows, Linux, macOS) for .NET developers. Using ML.NET, developers can leverage their existing tools and skillsets to develop...","Href":"https://devblogs.microsoft.com/dotnet/announcing-ml-net-1-0-rc-machine-learning-for-net/","RawContent":null},{"Title":".NET Framework April 2, 2019 Cumulative Update for Windows 10 version 1809 and Windows Server 2019","PublishedOn":"2019-04-02T21:47:22+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we released the March 2019 Update for Windows 10 version 1809 and Windows Server 2019.\nQuality and Reliability\nThis release contains the following quality and reliability...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-april-2-2019-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/","RawContent":null},{"Title":"Visual Studio 2019 .NET productivity","PublishedOn":"2019-04-02T19:00:17+00:00","CommentsCount":12,"FacebookCount":0,"Summary":"Your friendly neighborhood .NET productivity team (aka. Roslyn) focuses a lot on improving the .NET coding experience. Sometimes it’s the little refactorings and code fixes that really improve your...","Href":"https://devblogs.microsoft.com/dotnet/visual-studio-2019-net-productivity-2/","RawContent":null},{"Title":"Handling a new era in the Japanese calendar in .NET","PublishedOn":"2019-04-02T10:40:13+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Typically, calendar eras represent long time periods. In the Gregorian calendar, for example, the current era spans (as of this year) 2,019 years. In the Japanese calendar, however, a new era begins...","Href":"https://devblogs.microsoft.com/dotnet/handling-a-new-era-in-the-japanese-calendar-in-net/","RawContent":null},{"Title":"Announcing F# 4.6","PublishedOn":"2019-03-29T21:40:28+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"We&#8217;re excited to announce general availability of F# 4.6 and the F# tools for Visual Studio 2019! In this post, I&#8217;ll show you how to get started, explain the F# 4.6 feature set, give you...","Href":"https://devblogs.microsoft.com/dotnet/announcing-f-4-6/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"9341532248","Type":"PullRequestEvent","CreatedAt":"2019-03-29T14:44:24","Actor":"BillWagner","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/142","RelatedDescription":"Merged pull request \"add docs samples link\" (#142) at dotnet/foundation","RelatedBody":"@BillWagner should we add the samples project too?"},{"Id":"9337730849","Type":"PullRequestEvent","CreatedAt":"2019-03-29T02:29:48","Actor":"mairaw","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/142","RelatedDescription":"Opened pull request \"add docs samples link\" (#142) at dotnet/foundation","RelatedBody":"@BillWagner should we add the samples project too?"},{"Id":"9337725308","Type":"PullRequestEvent","CreatedAt":"2019-03-29T02:28:20","Actor":"mairaw","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/141","RelatedDescription":"Opened pull request \"add links to ML.NET docs\" (#141) at dotnet/foundation","RelatedBody":"/cc @JRAlexander @shauheen \r\n\r\nTo match the info we have added for other projects"},{"Id":"9337679090","Type":"PullRequestEvent","CreatedAt":"2019-03-29T02:16:08","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/139","RelatedDescription":"Merged pull request \"Add link to ASP.NET Core docs\" (#139) at dotnet/foundation","RelatedBody":"Provide a link to the docs site for ASP.NET Core."},{"Id":"9337677839","Type":"PullRequestEvent","CreatedAt":"2019-03-29T02:15:48","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/140","RelatedDescription":"Merged pull request \"add links to .NET docs\" (#140) at dotnet/foundation","RelatedBody":"/cc @mairaw @scottaddie\r\n\r\nMaira, did I miss any project repos to tag?"},{"Id":"9335742237","Type":"PullRequestEvent","CreatedAt":"2019-03-28T19:21:55","Actor":"BillWagner","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/140","RelatedDescription":"Opened pull request \"add links to .NET docs\" (#140) at dotnet/foundation","RelatedBody":"/cc @mairaw @scottaddie\r\n\r\nMaira, did I miss any project repos to tag?"},{"Id":"9335605309","Type":"PullRequestEvent","CreatedAt":"2019-03-28T19:00:02","Actor":"scottaddie","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/139","RelatedDescription":"Opened pull request \"Add link to ASP.NET Core docs\" (#139) at dotnet/foundation","RelatedBody":"Provide a link to the docs site for ASP.NET Core."},{"Id":"9266562420","Type":"PullRequestEvent","CreatedAt":"2019-03-18T21:04:01","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/137","RelatedDescription":"Merged pull request \"Add V3.1 repo and change documentation link\" (#137) at dotnet/foundation","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"9473320861","Type":"IssuesEvent","CreatedAt":"2019-04-19T01:16:11","Actor":"MichaelSimons","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/110","RelatedDescription":"Opened issue \"# New images for .NET Framework 4.8\" (#110) at dotnet/announcements","RelatedBody":"# New images for .NET Framework 4.8\r\n\r\nNew images have been released with support for [.NET Framework 4.8 runtime and SDK](https://devblogs.microsoft.com/dotnet/announcing-the-net-framework-4-8/).\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#271](https://github.com/Microsoft/dotnet-framework-docker/issues/271)\r\n\r\n## Details\r\n* Pull request: #270\r\n\r\nYou can access these new images with the following tags:\r\n* `mcr.microsoft.com/dotnet/framework/runtime:4.8`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.8`\r\n\r\nIn addition, the `latest` tag has been updated to refer to these new 4.8 images.\r\n\r\nCheck out the readme files for more information on the latest tags:\r\n* [Runtime](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.runtime.md)\r\n* [SDK](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.sdk.md)\r\n\r\nThe [3.5 SDK](https://github.com/Microsoft/dotnet-framework-docker/tree/master/3.5/sdk) images are intended to always contain the latest .NET Framework SDK and have also been updated to use the 4.8 SDK."},{"Id":"9445263990","Type":"IssuesEvent","CreatedAt":"2019-04-15T13:57:07","Actor":"MichaelSimons","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/109","RelatedDescription":"Opened issue \".NET Framework SDK container images now contain the Visual Studio 2019 toolset\" (#109) at dotnet/announcements","RelatedBody":"# .NET Framework SDK container images now contain the Visual Studio 2019 toolset\r\n.NET Framework SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add additional tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Framework SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Framework SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#269](https://github.com/Microsoft/dotnet-framework-docker/issues/269)\r\n\r\n## Details\r\nVisual Studio 2019 was released on April 2, 2019. We updated the .NET Framework SDK container images, on the same day, to include a new version of the .NET Framework SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag (e.g. mcr.microsoft.com/dotnet/framework/sdk:4.7.2-20190312-windowsservercore-ltsc2019).\r\n\r\nRelated pull request: #252"},{"Id":"9434908530","Type":"IssuesEvent","CreatedAt":"2019-04-12T20:35:55","Actor":"KathleenDollard","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/108","RelatedDescription":"Opened issue \".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\" (#108) at dotnet/announcements","RelatedBody":"# .NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\r\n\r\n.NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017. For example, 2.2.203 and 2.1.603 cause failures in Visual Studio 2017. To work on projects in Visual Studio 2017, use .NET Core SDK 2.2.1nn and 2.1.5nn, such as 2.2.106 and 2.1.506. You can install any combination of these SDKs side by side.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3124](https://github.com/dotnet/sdk/issues/3124)\r\n\r\n## Details\r\n\r\nYou can find the SDKs on you machine using the following at a command prompt:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2. Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nIf you downloaded the .NET Core SDK 2.2 between April 2 and April 12, 2019, the main [.NET downloads page](https://dotnet.microsoft.com/download/) included only 2.2.2nn. Starting April 12th, a new button marked \"Compatible with Visual Studio 2017\" is provided to target 2.2.1nn.\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nThis problem most often occurs because you manually uninstall the 2.1.5nn version. Simply reinstall it from the [.NET Core 2.1 downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n## More information\r\n\r\nHere is the draft of an article we are preparing for .NET Core documentation:\r\n\r\n---\r\n\r\n## Solving Problems with .NET Core SDK Selection in Visual Studio\r\n\r\nYou may have .NET Core SDKs on your machine and still have problems with Visual Studio finding an appropriate one. This article explains why this happens and how you can fix your installation.\r\n\r\nWhen Visual Studio can't find an appropriate version of the .NET Core SDK, you'll receive an error message. This may appear in the Error pane as NETSDK1045:\r\n\r\n\"The current .NET SDK does not support targeting .NET Core 2...\"\r\n\r\nYou can check what .NET Core SDKs you have on your machine with the following command:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\nUnless you have a global.json file, when you use `dotnet` from the command line, the latest .NET Core SDK is used.\r\n\r\n> [TIP!] \r\n> Open a command prompt and try to build with `dotnet build`. If the command line build works, but Visual Studio doesn't suggestions in this article may help.\r\n\r\nThe last two digits of the .NET Core SDK version numbers are in the format are a patch number, which is represented by `nn` in this article because we will continue to service them to include the latest runtimes. To find out more, vist the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\n## Fixes for Common Problems\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2… Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.2.1nn. As an example, 2.2.106 would be a valid entry.\r\n\r\nIf you downloaded the .NET Core SDK 2.2 after April 2, 2019, version 2.2.2nn (such as 2.2.203) is listed first and is the highest version available. However, Visual Studio 2017 requires 2.2.1nn (such as 2.2.106). .NET Core SDK 2.2.2nn works with Visual Studio 2019. Visual Studio 2017 and Visual Studio 2019 can be installed side by side, but this requires both .NET Core SDK 2.2.1nn and .NET Core SDK 2.2.2nn to develop .NET Core 2.2 applications.\r\n\r\nTo download .NET Core SDK 2.2.2nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.1.5nn. As an example, 2.1.505 would be a valid entry. \r\n\r\nThis problem occurs of you manually uninstall the 2.1.5nn version.\r\n\r\nThe Visual Studio 2019 installation will not remove this file and Visual Studio 2017 will continue to work side by side.\r\n\r\nTo reinstall .NET Core SDK 2.1.5nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n### Visual Studio 2019 can't target .NET Core 3.0 Preview\r\n\r\nIf you receive this error message in Visual Studio 2019:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 3.0.100-preview... As an example, SDK 3.0.100-preview3-010431 would be a valid entry.\r\n\r\nTo install .NET Core SDK 3.0.1nn preview, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/3.0).\r\n\r\nIn Visual Studio, go to `Tools\\Options\\Projects and Solutions\\.NET Core` and check the box `Use Previews of the .NET Core SDK`.\r\n\r\n> [NOTE!]\r\n> This option will be moving to `Tools\\Options\\Environment` and renamed `Preview Features` in Visual Studio 2019 version 16.1 Preview 2.\r\n\r\nIf you are targeting .NET Core 3.0 preview, the [C# language version will be C# 8.0 Preview by default](https://docs.microsoft.com/en-us/visualstudio/releases/2019/release-notes#csharp-defaults) allowing you to use new C# features.\r\n\r\n## Understand the relationship between .NET Core SDKs and Visual Studio build tools\r\n\r\nVisual Studio has its own copies of tools like MSBuild, NuGet and the compilers. If you install the .NET Core workload, it also installs the .NET Core SDK which has versions of these tools and provides tasks and targets. These two versions are built from the same repositories, but target .NET Framework and .NET Core respectively. \r\n\r\nWhen you build a .NET Core project in Visual Studio, it uses Visual Studio's copy of MSBuild, but the tasks and targets are supplied from the selected version of the .NET Core SDK. \r\n\r\nWhen you upgrade the .NET Core SDK, you get new tasks and targets. These new tasks and targets may contain features that are not supported by older versions of MSBuild. Like all of the .NET Core SDK, MSBuild is backwards compatible. It is not forwards compatible.\r\n\r\nThis generally works well, but requires a guarantee that the tasks and targets work with the MSBuild version. To ensure this, each .NET Core SDK indicates an MSBuild version range that is used by Visual Studio to determine compatibility. Versions of the .NET Core SDK that have a higher MSBuild identifier than expected are ignored by Visual Studio. In the normal case, this simply means you use the tasks and targets that were installed with your version of Visual Studio.\r\n\r\nBecause of this, you may have many versions of the .NET Core SDK on your machine and Visual Studio still fail to find one it considers appropriate. This is compounded by a poor error message, which we cannot fully correct because it is from the old version of the .NET Core SDK on your machine. Confusion is also compounded by a complex non-linear release matrix that makes it difficult to predict the right .NET Core SDK to select. We are working to improve all this. \r\n\r\n## The Visual Studio / .NET Core SDK support matrix\r\n\r\nThe last two digits of the .NET Core SDK version number are a patch number, which are represented by a `nn` in this table. You can learn more about .NET Core SDK and .NET Core Runtime versioning at the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\nThe following table shows which Visual Studio versions and .NET Core SDKs are compatible and how they are acquired if you are working with Visual Studio. \r\n\r\n| .NET Core SDK | .NET Core Runtime | Compatible Visual Studio | MSBuild | Notes                                     |\r\n|---------------|-------------------|--------------------------|---------|-------------------------------------------|\r\n| 2.1.5nn       | 2.1               | 2017                     | 15      | Installed as part of VS 2017 version 15.9 |\r\n| 2.1.6nn       | 2.1               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 2.2.1nn       | 2.2               | 2017                     | 15      | Installed manually                        |\r\n| 2.2.2nn       | 2.2               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 3.0.1nn       | 3.0 (Preview)     | 2019                     | 16      | Installed manually                        |\r\n\r\nVisual Studio 2017 cannot work with .NET Core SDK 2.1.6nn or 2.2.2nn.\r\n\r\nTo find out more about removing older versions of the .NET Core Runtime and .NET Core SDK, visit the [How to remove the .NET Core Runtime and SDK page](https://docs.microsoft.com/en-us/dotnet/core/versions/remove-runtime-sdk-versions?tabs=macos).\r\n\r\nTo download the .NET Core SDK, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core)."},{"Id":"9425046734","Type":"IssuesEvent","CreatedAt":"2019-04-11T15:16:44","Actor":"KathleenDollard","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/107","RelatedDescription":"Opened issue \"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\" (#107) at dotnet/announcements","RelatedBody":".NET Core 3 takes the next step in the .NET Core tool strategy with local tools. As part of this process, starting in Preview 4 DotNetCliToolReference tools will be restricted to targeting .NET Core 2.2 and below. DotNetCliToolReference tools can be used in projects targeting .NET Core 3.0, but the tools themselves should target .NET Core 2.2 or below.\r\n\r\nThe suggested approach going forward is to to use [.NET Core Local Tools](need link) when you want a tool that is specific to a project or repository. At the same time we are removing the need to access local tools by the verbose `dotnet tool run <toolname>` that was present in earlier previews. You can now access local tools via `dotnet <toolname>`.\r\n\r\nDotNetCliToolReference tools have a flaw in how their dependencies are restored which can create [difficult to diagnose bugs when running these tools](https://github.com/NuGet/Home/issues/5067). This issue would occur much more frequently if targeting .NET Core 3.0 was allowed. Restricting tools to target only .NET Core 2.2 and below means existing scenarios to continue to work (as well as they previously did), regardless of the framework version targeted by the project or the current .NET Core SDK. \r\n\r\nThe new .NET Core tool strategy avoids this flaw in restore strategy and offers other benefits, like the ability to author one type of tool and install it in different ways depending on project and user needs.\r\n\r\nWe look forward to your feedback on .NET Core Local Tools, and on challenges you face moving away from DotNetCliToolReference tools. "}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"9481439429","Type":"IssuesEvent","CreatedAt":"2019-04-21T04:56:57","Actor":"tn-5","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/24146","RelatedDescription":"Opened issue \"macOS Startup System.ComponentModel.Win32Exception (13): Permission denied \" (#24146) at dotnet/coreclr","RelatedBody":"With the latest nightly build of netcore 3 (3.0.100-preview5-011505) it is not possible to run a net core application on macos, it give an exception on startup:\r\nSystem.ComponentModel.Win32Exception (13): Permission denied\r\n   at System.Diagnostics.Process.ForkAndExecProcess(String filename, String[] argv, String[] envp, String cwd, Boolean redirectStdin, Boolean redirectStdout, Boolean redirectStderr, Boolean setCredentials, UInt32 userId, UInt32 groupId, UInt32[] groups, Int32& stdinFd, Int32& stdoutFd, Int32& stderrFd, Boolean usesTerminal, Boolean throwOnNoExec)\r\n   at System.Diagnostics.Process.StartCore(ProcessStartInfo startInfo)\r\n   at System.Diagnostics.Process.Start()\r\n   at Microsoft.DotNet.Cli.Utils.Command.Execute()\r\n   at Microsoft.DotNet.Tools.Run.RunCommand.Execute()\r\n   at Microsoft.DotNet.Tools.Run.RunCommand.Run(String[] args)\r\n   at Microsoft.DotNet.Cli.Program.ProcessArgs(String[] args, ITelemetry telemetryClient)\r\n   at Microsoft.DotNet.Cli.Program.Main(String[] args)"},{"Id":"9481432786","Type":"PullRequestEvent","CreatedAt":"2019-04-21T04:51:57","Actor":"sdmaclea","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/24145","RelatedDescription":"Opened pull request \"Missing ARM64 bits\" (#24145) at dotnet/coreclr","RelatedBody":"Stumble across some missing arm64 code in the runtime...."},{"Id":"9481340449","Type":"IssuesEvent","CreatedAt":"2019-04-21T03:42:01","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/24130","RelatedDescription":"Closed issue \"Question：Are there any experimental projects about reference counting instead of GC?\" (#24130) at dotnet/coreclr","RelatedBody":"There's Snowflake project about manual memory management, but are there any experimental projects about reference counting instead of GC?"},{"Id":"9481334437","Type":"PullRequestEvent","CreatedAt":"2019-04-21T03:37:22","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/24060","RelatedDescription":"Merged pull request \"Update BuildTools, CoreClr to preview4-03917-01, preview5-27618-71, respectively (master)\" (#24060) at dotnet/coreclr","RelatedBody":"/cc @dotnet/maestro-reviewers-core"},{"Id":"9481327249","Type":"PullRequestEvent","CreatedAt":"2019-04-21T03:31:55","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/24120","RelatedDescription":"Merged pull request \"[master] Update dependencies from dnceng/internal/dotnet-optimization\" (#24120) at dotnet/coreclr","RelatedBody":"This pull request updates the following dependencies\r\n\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-optimization\r\n- **Build**: 20190419.4\r\n- **Date Produced**: 4/19/2019 5:59 PM\r\n- **Commit**: 262f4c4cfae446577e19e7c79b43ad46ba456e56\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **optimization.IBC.CoreCLR** -> 99.99.99-master-20190419.4\r\n  - **optimization.PGO.CoreCLR** -> 99.99.99-master-20190419.4\r\n\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-optimization\r\n- **Build**: 20190420.1\r\n- **Date Produced**: 4/20/2019 10:53 AM\r\n- **Commit**: 262f4c4cfae446577e19e7c79b43ad46ba456e56\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **optimization.IBC.CoreCLR** -> 99.99.99-master-20190420.1\r\n  - **optimization.PGO.CoreCLR** -> 99.99.99-master-20190420.1\r\n\r\n"},{"Id":"9481324007","Type":"IssuesEvent","CreatedAt":"2019-04-21T03:29:33","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/24144","RelatedDescription":"Closed issue \"What's the status of .Net Native project?\" (#24144) at dotnet/coreclr","RelatedBody":"Has it been stopped? I have not heard of it for a long time."},{"Id":"9481086549","Type":"IssuesEvent","CreatedAt":"2019-04-21T00:34:16","Actor":"ygc369","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/24144","RelatedDescription":"Opened issue \"What's the status of .Net Native project?\" (#24144) at dotnet/coreclr","RelatedBody":"Has it been stopped? I have not heard of it for a long time."},{"Id":"9481002869","Type":"PullRequestEvent","CreatedAt":"2019-04-20T23:31:21","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/24141","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/corefx\" (#24141) at dotnet/coreclr","RelatedBody":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190419.11\r\n- **Date Produced**: 4/20/2019 8:19 AM\r\n- **Commit**: c608ddaa2a024dde2510f3c1122c89ba07b4325d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.Platforms** -> 3.0.0-preview5.19219.11\r\n  - **Microsoft.Private.CoreFx.NETCoreApp** -> 4.6.0-preview5.19219.11\r\n\r\n"},{"Id":"9480955675","Type":"PullRequestEvent","CreatedAt":"2019-04-20T22:56:20","Actor":"sywhang","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/24101","RelatedDescription":"Merged pull request \"Eventpipe Crst ordering fix\" (#24101) at dotnet/coreclr","RelatedBody":"Addresses https://github.com/dotnet/coreclr/issues/23412"},{"Id":"9480705592","Type":"PullRequestEvent","CreatedAt":"2019-04-20T20:18:56","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/24124","RelatedDescription":"Merged pull request \"Tighten GC mode assertion for EventPipe::Enable()\" (#24124) at dotnet/coreclr","RelatedBody":"According to the [documentation](https://github.com/dotnet/coreclr/blob/0c88c2e67260ddcb1d400eb6adda19de627998f5/Documentation/mscorlib.md#calling-from-managed-to-native-code), QCALL involves a proper PInvoke transition frame, which means unless explicitly switched, the native code paths are in preemptive mode. That gives us an opportunity to tighten the asserts. Tightening the assert allows us to catch current bugs, prevent future regressions and better (live) document what the mode is supposed to be.\r\n\r\nAs far as I understand, `EventPipe::Enable()` could happen only if it is triggered in managed code through QCALL or from IPC (which is purely native code), therefore we can assert native code that is used only for `EventPipe::Enable()` has to be in preemptive mode. This analysis forms the basis of this PR, so if this is incorrect, feel free to comment on this analysis.\r\n\r\nI proved (though tedious manual static code analysis) that the functions I changed are called only in the `EventPipe::Enable()`. Feel free to comment if you found the code I changed could be called by other code-path, because if that's the case, my assumption might be wrong. It might not capture all calls that are involved only in `EventPipe::Enable()`, so feel free to point those out as well.\r\n\r\nFor calls that are used in `EventPipe::Write()` cannot be tightened because we knew it might be called directly (through the code generator) in random places in the runtime where it might already be in cooperative mode (I was able to prove in some case `EventPipe::Write()` is indeed called by thread in cooperative mode. (Those calls should be scrutinized for their potential to block GC). "}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"9480444585","Type":"IssuesEvent","CreatedAt":"2019-04-20T17:52:00","Actor":"hamzahamidi","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/11219","RelatedDescription":"Opened issue \"Dotnet run orkds only as root\" (#11219) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\nI was following the official dotnet tutorial https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/create . When I try to run the application ( dotnet run) I get this error:\r\n```\r\nprojects/dotnet-core-starter/dotnet-core-starter.csproj : error MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.\r\n\r\n```\r\nsudo dotnet run works as expected!\r\n\r\n## Expected  behavior\r\n\r\n\r\n## Actual behavior\r\n```\r\nprojects/dotnet-core-starter/dotnet-core-starter.csproj : error MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.\r\n\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.203\r\n Commit:    e5bab63eca\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  18.04\r\n OS Platform: Linux\r\n RID:         ubuntu.18.04-x64\r\n Base Path:   /usr/share/dotnet/sdk/2.2.203/\r\n\r\nHost (useful for support):\r\n  Version: 2.2.4\r\n  Commit:  f95848e524\r\n\r\n.NET Core SDKs installed:\r\n  2.2.203 [/usr/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.2.4 [/usr/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.4 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.2.4 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"9479864654","Type":"PullRequestEvent","CreatedAt":"2019-04-20T12:49:04","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/11218","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/templating\" (#11218) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190419.1\r\n- **Date Produced**: 4/19/2019 12:47 PM\r\n- **Commit**: c01de3fd223affb9f861260f41ebcc12e473a9ad\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 1.0.2-beta5.19219.1\r\n\r\n"},{"Id":"9479853329","Type":"PullRequestEvent","CreatedAt":"2019-04-20T12:42:17","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/11216","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/arcade\" (#11216) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190418.7\r\n- **Date Produced**: 4/19/2019 12:41 AM\r\n- **Commit**: 5e7ce5b394f3477bb0a485a4b761b7742e95be37\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19218.7\r\n\r\n"},{"Id":"9479796887","Type":"PullRequestEvent","CreatedAt":"2019-04-20T12:08:50","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/11218","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/templating\" (#11218) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190419.1\r\n- **Date Produced**: 4/19/2019 12:47 PM\r\n- **Commit**: c01de3fd223affb9f861260f41ebcc12e473a9ad\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 1.0.2-beta5.19219.1\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"9481023699","Type":"PullRequestEvent","CreatedAt":"2019-04-20T23:47:11","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1161","RelatedDescription":"Merged pull request \"Add tool to automate generation of .NET Core baseline\" (#1161) at dotnet/standard","RelatedBody":"This adds a batch file that generates the API surface of .NET Core that matters to .NET Standard. This script updates the contents of `src\\platforms\\netcoreapp`, stripped down to just the contents that matter for .NET Standard. It's meant to be manually diff'ed against the .NET Standard reference assemblies to propose API changes.\r\n\r\nWe should move the `GenNetStandard` tool to our engineering tools (Arcade) so that they are available to people that don't have access to the internal share. However, since the process is currently manual and only done by me, that seems acceptable. At least this this makes it reproducable by other people, which is better to what we have today.\r\n\r\nThe script assume that the caller has an enlistment for dotnet/corefx in a folder that is parallel to dotnet/standard and that is named corefx. In practice, this should hold for most people that work on this.\r\n\r\n/cc @stephentoub @wtgodbe "},{"Id":"9481012193","Type":"PullRequestEvent","CreatedAt":"2019-04-20T23:38:33","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1161","RelatedDescription":"Opened pull request \"Add tool to automatic comparing .NET Core and .NET Standard\" (#1161) at dotnet/standard","RelatedBody":"This adds a batch file that generates the API surface of .NET Core that matters to .NET Standard. This script updates the contents of `src\\platforms\\netcoreapp`, stripped down to just the contents that matter for .NET Standard. It's meant to be manually diff'ed against the .NET Standard reference assemblies to propose API changes.\r\n\r\nWe should move the `GenNetStandard` tool to our engineering tools (Arcade) so that they are available to people that don't have access to the internal share. However, since the process is currently manual and only done by me, that seems acceptable. At least this this makes it reproducable by other people, which is better to what we have today.\r\n\r\nThe script assume that the caller has an enlistment for dotnet/corefx in a folder that is parallel to dotnet/standard and that is named corefx. In practice, this should hold for most people that work on this.\r\n\r\n/cc @stephentoub @wtgodbe "},{"Id":"9480960713","Type":"PullRequestEvent","CreatedAt":"2019-04-20T22:59:53","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1160","RelatedDescription":"Opened pull request \"Add EnumeratorCancellationAttribute\" (#1160) at dotnet/standard","RelatedBody":"This aligns .NET Standard with the [PR made in CoreFx](https://github.com/dotnet/corefx/pull/37064). For more details, see the [API discussion](https://github.com/dotnet/corefx/issues/37012).\r\n\r\nThis is a last minute firedrill for preview 5 (which will be used for demoing functionality during Build). If there are any concerns, please let me know and we'll back it out the change later."},{"Id":"9479791845","Type":"PullRequestEvent","CreatedAt":"2019-04-20T12:05:46","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1157","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/arcade\" (#1157) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190418.1\r\n- **Date Produced**: 4/18/2019 8:10 AM\r\n- **Commit**: 46718d98c0fd03690a6a8c83da692a4a85a17902\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19218.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19218.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19218.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19218.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19218.1\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190418.4\r\n- **Date Produced**: 4/18/2019 10:50 PM\r\n- **Commit**: 1d4c87ff798d7de521128e6c3d890055c2401e80\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19218.4\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19218.4\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19218.4\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19218.4\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19218.4\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190418.7\r\n- **Date Produced**: 4/19/2019 12:41 AM\r\n- **Commit**: 5e7ce5b394f3477bb0a485a4b761b7742e95be37\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19218.7\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19218.7\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19218.7\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19218.7\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19218.7\r\n\r\n"},{"Id":"9478628775","Type":"IssuesEvent","CreatedAt":"2019-04-20T00:05:56","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/1113","RelatedDescription":"Closed issue \"System.TypeInitializationException: 'The type initializer for 'Microsoft.ServiceBus.Messaging.Constants' threw an exception.'\" (#1113) at dotnet/standard","RelatedBody":"I have a .Net Core Project that requires `System.UriTemplate` which doesn't seem implemented.\r\n\r\n`System.TypeInitializationException: 'The type initializer for 'Microsoft.ServiceBus.Messaging.Constants' threw an exception.'`\r\n\r\n`TypeLoadException: Could not load type 'System.UriTemplate' from assembly 'System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.`\r\n\r\n.Net Core 2.1 Console Project\r\n\r\n![image](https://user-images.githubusercontent.com/5593825/55173581-3c3dfa00-517c-11e9-95d0-7380e4ce654a.png)\r\n\r\n\r\n```\r\nusing Microsoft.ServiceBus.Messaging;\r\nusing System;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleApp1\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            string connectionString = \"\";\r\n            var q = QueueClient.CreateFromConnectionString(connectionString, \"myqueue\");\r\n\r\n            var sessions = q.GetMessageSessions();\r\n\r\n            var names = sessions.Select(e => e.SessionId);\r\n\r\n            foreach (var name in names)\r\n            {\r\n                Console.WriteLine(name);\r\n            }\r\n        }\r\n    }\r\n}\r\n```"},{"Id":"9478609052","Type":"IssuesEvent","CreatedAt":"2019-04-19T23:57:31","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/1122","RelatedDescription":"Closed issue \"The end of .NET Framework support?\" (#1122) at dotnet/standard","RelatedBody":"Hi,\r\n\r\nOn [this ](https://github.com/dotnet/standard/blob/master/docs/versions.md)page we see this footnote under the chart:\r\n\r\n> 2 .NET Framework will not support .NET Standard 2.1 or any other later version. For more details, see this blog post.\r\n\r\nI can understand how some specific version like .NET Framework 4.6.1 (for example) will not support .NET Standard 2.1 but _all_ **future** versions of the .NET Framework too?\r\n\r\nThis statements amounts to a phasing out of .NET Framework, it tells us that we should begin to stop targeting it - well that's what seems to be a logical conclusion anyway.\r\n\r\nI don't understand why some future version of .NET Framework (e.g. 4.8) could not include support for .NET Core 2.1?\r\n\r\nWe read [here ](https://docs.microsoft.com/en-us/dotnet/standard/net-standard)the following Microsoft statement:\r\n\r\n> The .NET Standard is a formal specification of .NET APIs that are intended to be available on **_all_** .NET implementations.\r\n\r\nBut now you're retracting this and instead should be saying:\r\n\r\n> The .NET Standard 2.0 and below, is a formal specification of .NET APIs that are intended to be available on all .NET implementations.\r\n\r\nCan Microsoft please be clearer about this? Companies and their staff are under a huge burden to keep up with all sorts of developments in the technology world and if we are being advised to phase out our own support for the .NET Framework then please say so very clearly and definitively, mentioning this kind of thing as small footnote isn't helpful.\r\n\r\nThanks\r\n\r\n"},{"Id":"9478530061","Type":"IssuesEvent","CreatedAt":"2019-04-19T23:24:03","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/1156","RelatedDescription":"Closed issue \"NETStandard 2.0 GZipStream write date error in .Net Framework 4.6.1\" (#1156) at dotnet/standard","RelatedBody":"code\r\n``` csharp\r\n public class GzipTest\r\n    {\r\n        public static byte[] Create()\r\n        {\r\n            using (System.IO.MemoryStream memory = new MemoryStream())\r\n            {\r\n                using (GZipStream gstream = new GZipStream(memory, CompressionMode.Compress))\r\n                {\r\n                    for (int i = 0; i < 100; i++)\r\n                    {\r\n                        byte[] data = System.Text.Encoding.UTF8.GetBytes(\"abcdefghkoksdsafsdfasdfksajfskdjfskdfjslfasdfsdfsdfalsdfsd\");\r\n                        gstream.Write(data, 0, data.Length);\r\n                    }\r\n                    gstream.Flush();\r\n                    return memory.ToArray();\r\n                }\r\n            }\r\n        }\r\n    }\r\n```\r\nusing .Net Framework 4.61 invoke this function ，debugging output information:\r\n```\r\nmemory.Length\r\n10\r\nmemory.ToArray()\r\n{byte[10]}\r\n    [0]: 31\r\n    [1]: 139\r\n    [2]: 8\r\n    [3]: 0\r\n    [4]: 0\r\n    [5]: 0\r\n    [6]: 0\r\n    [7]: 0\r\n    [8]: 4\r\n    [9]: 0\r\n```"},{"Id":"9478527489","Type":"IssuesEvent","CreatedAt":"2019-04-19T23:23:03","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/1123","RelatedDescription":"Closed issue \"phantom connection when mixing async & blocking calls on TcpClient \" (#1123) at dotnet/standard","RelatedBody":"apologies if this is the wrong place to report this!\r\n\r\non .net 4.6.1, win10\r\n\r\n1. create a TCPClient object\r\n2. attempt to connect synchronously to an endpoint with no bound service, get a `SocketException: Connection actively refused\"\r\n3. attempt to `connectAsync` to that same endpoint \r\n\r\nexpected: Asynchronously get a `SocketException: Connection Actively Refused`\r\nactual: connection is established, `tcpClient.Connected` returns true, `tcpClient.GetStream()` returns non-null, `tcpClient.GetStream().write(...)` throws `NotConnectedException`.\r\n\r\n```C#\r\n        \r\n[Test] //baseline, good behaviour\r\npublic async Task when_only_using_async_calls_should_get_consistent_behaviour()\r\n{\r\n    //setup\r\n    var localhost = \"127.0.0.1\";\r\n    var port = 27041; \r\n    \r\n    var tcpClient = new TcpClient();\r\n\r\n    //act\r\n    try\r\n    {\r\n        await tcpClient.ConnectAsync(localhost, port);\r\n        Assert.Fail(\"connection was actually established!\");\r\n    }\r\n    catch (SocketException ex)\r\n    {\r\n        //continue\r\n    }\r\n\r\n    Func<Task> act = (async () => await tcpClient.ConnectAsync(localhost, port));\r\n\r\n    //assert\r\n    act.Should().Throw<SocketException>();\r\n}        \r\n\r\n\r\n[Test]\r\npublic async Task when_mixing_sync_and_async_tcpclient_calls_should_get_hideous_behaviour()\r\n{\r\n    //setup\r\n    var localhost = \"127.0.0.1\";\r\n    var port = 27041; \r\n    \r\n    var tcpClient = new TcpClient();\r\n\r\n    //act\r\n    try\r\n    {\r\n        tcpClient.Connect(localhost, port);\r\n        Assert.Fail(\"connection was actually established!\");\r\n    }\r\n    catch (SocketException ex)\r\n    {\r\n        //continue\r\n    }\r\n\r\n    await tcpClient.ConnectAsync(localhost, port);\r\n\r\n    //assert\r\n    tcpClient.Connected.Should().BeTrue();\r\n    tcpClient.GetStream().Should().NotBeNull();\r\n\r\n    //seems very strange\r\n    //subsequent interactions with tcpClient throw \"not connected\" exceptions\r\n    //I would've expected the `ConnectAsync` method to throw the same `SocketException`,\r\n}\r\n```"},{"Id":"9478502732","Type":"IssuesEvent","CreatedAt":"2019-04-19T23:13:15","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/1120","RelatedDescription":"Closed issue \"Please please please don't call it .NET Standard 2.1 when it aligns with .NET Core 3.0\" (#1120) at dotnet/standard","RelatedBody":"This is exactly the sort of version number weirdness that .NET takes flak for.\r\n\r\nIn the commit explaining the 2.1 decision, the 3.0 section is:\r\n\r\n- **3.0**\r\n  - Aligns with .NET Core, which will be released at the same time as .NET\r\n    Standard vNext\r\n  - Pros\r\n    + Leaves room for another .NET Standard that is smaller\r\n    + Simpler messaging when we ship .NET Core and .NET Standard and aligns with\r\n      what we did for .NET Core 2.0.\r\n  - Cons\r\n    + A 3.0 isn't really warranted for .NET Standard\r\n    + Perpetuates the problem of aligning .NET Core & .NET Standard versions and\r\n      requires arbitrary skipping of version numbers\r\n\r\n*Simpler messaging* should be a top priority here. I'm going to spend as much time explaining to clients why they can't use .NET Standard 2.1 with the .NET Core 2.1 LTS as my niece Allyce does explaining how to spell her name.\r\n\r\nIf a 3.0 is warranted for .NET Core, with it's `IAsyncEnumerable`, `IAsyncDisposable`, `Range` and `Index` and all the new overloads of existing APIs, then why isn't it warranted for .NET Standard?\r\n\r\nBetter yet, why not publish a .NET Standard 2.1 which aligns with .NET Core 2.1, with all the `Span<T>` goodness, and a .NET Standard 3.0 which aligns with .NET Core 3.0?\r\n\r\nDeliberately versioning .NET Standard independently of .NET Core, especially on the major version numbers, just seems perverse and unnecessary."},{"Id":"9477740197","Type":"PullRequestEvent","CreatedAt":"2019-04-19T19:46:09","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1158","RelatedDescription":"Merged pull request \"Add Overrides\" (#1158) at dotnet/standard","RelatedBody":"This doesn't change API surface but simply records the overrides made in .NET Core to minimize the diff."}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"9481301617","Type":"IssuesEvent","CreatedAt":"2019-04-21T03:13:04","Actor":"divega","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/36243","RelatedDescription":"Closed issue \"Due diligence on new DbDataReader extension method class on System.Data.Common\" (#36243) at dotnet/corefx","RelatedBody":"This issue to make sure we follow up with @terrajobst to make sure we do the right thing for the new extension method sponsor class to be created in https://github.com/dotnet/corefx/pull/36123. \r\n\r\nPossible concerns are:\r\n\r\n1. Should the class be included in .NET Standard 2.1?\r\n2. ~~Understand in which of the TFMs targeted by the System.Data.Common package the methods will be available~~ \r\n\r\ncc @roji @ajcvickers "},{"Id":"9481243461","Type":"PullRequestEvent","CreatedAt":"2019-04-21T02:32:23","Actor":"steveharter","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/37070","RelatedDescription":"Opened pull request \"Add Dictionary support to JsonSerializer\" (#37070) at dotnet/corefx","RelatedBody":"Re-creating the PR from https://github.com/dotnet/corefx/pull/37033\r\n\r\nThis partially addresses #36024.\r\nFor the intial version, only Dictionary<string, [some concrete type]>\r\nis supported.\r\n\r\n"},{"Id":"9481196002","Type":"PullRequestEvent","CreatedAt":"2019-04-21T01:58:57","Actor":"steveharter","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/pull/37033","RelatedDescription":"Closed pull request \"Add Dictionary support to JsonSerializer\" (#37033) at dotnet/corefx","RelatedBody":"This partially addresses https://github.com/dotnet/corefx/issues/36024.\r\nFor the intial version, only `Dictionary<string, [some concrete type]>`\r\nis supported."},{"Id":"9481115254","Type":"PullRequestEvent","CreatedAt":"2019-04-21T00:57:18","Actor":"wfurt","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/37069","RelatedDescription":"Opened pull request \"reject invalid pseudo-headers\" (#37069) at dotnet/corefx","RelatedBody":"add few tests and improve detection of invalid pseudo-headers based on rfc7540 section 8.1.2.3.\r\n\r\nfixes #35643"},{"Id":"9481101489","Type":"PullRequestEvent","CreatedAt":"2019-04-21T00:46:10","Actor":"Wraith2","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/37068","RelatedDescription":"Opened pull request \"SqlClient handle socket network error gracefully\" (#37068) at dotnet/corefx","RelatedBody":"Fixes https://github.com/dotnet/corefx/issues/33930\r\n\r\nThen a running the SqlClient test suite in managed mode (Linux, osx, uap) and Debug build, an assert fires indicating that an invalid state has been reached. The assertion indicates that a packet has reached the processing stage and has no contents or that the packet has been received in a state where none was expected. The test failure was caused by an assertion but could lead to silent unexpected non-crashing behaviour in release builds leading to unreliability. \r\n\r\nAfter investigation and debugging I've arrived at three related changes.\r\n* plumb the error message from the packet read function all the way through the handler chain so that the recipients can identify what the error was\r\n* change the read function so that socket disconnections use an existing but unused error code to identify that the connection has been reset and add specific error catching for disconnections.\r\n* detect disconnections and disposed errors using the above changes and close the connection gracefully, and change a check\r\n\r\nThe functional and manual tests pass over multiple repeated runs correctly with the affected tests re-enabled.\r\n/cc @afsanehr, @tarikulsabbir, @Gary-Zh , @david-engel @saurabh500 "},{"Id":"9480962658","Type":"IssuesEvent","CreatedAt":"2019-04-20T23:01:01","Actor":"davidsh","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/30858","RelatedDescription":"Closed issue \".Net Core SocketsHttpHandler with Client Certificates hangs on windows\" (#30858) at dotnet/corefx","RelatedBody":"We're using certs from azure key vault. I'm not sure what it does to the certs, but it seems to cause the httpclient to hang and not send the request. I created a self signed cert below and uploaded/downloaded from AKV to repro.\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n\r\n```\r\n\r\n\r\n```c#\r\nusing System;\r\nusing System.Net;\r\nusing System.Net.Http;\r\nusing System.Net.Http.Headers;\r\nusing System.Net.Security;\r\nusing System.Security.Cryptography.X509Certificates;\r\nusing System.Threading.Tasks;\r\n\r\nnamespace SocketsHttpHandlerTest\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            try\r\n            {\r\n                DoIt().Wait();\r\n            }\r\n            catch (Exception e)\r\n            {\r\n                Console.WriteLine(e.ToString());\r\n            }\r\n            return;\r\n        }\r\n\r\n        private async static Task DoIt()\r\n        {\r\n            var cert = GetCert();\r\n            var sslOptions = new SslClientAuthenticationOptions();\r\n            var shHandler = new SocketsHttpHandler\r\n            {\r\n                MaxConnectionsPerServer = 100,\r\n                AutomaticDecompression = DecompressionMethods.GZip | DecompressionMethods.Deflate,\r\n                PooledConnectionLifetime = TimeSpan.FromMinutes(1),\r\n                ConnectTimeout = TimeSpan.FromSeconds(10),\r\n                PooledConnectionIdleTimeout = TimeSpan.FromSeconds(10),\r\n                ResponseDrainTimeout = TimeSpan.FromSeconds(10),\r\n            };\r\n\r\n            if (cert != null)\r\n            {\r\n                shHandler.SslOptions = new SslClientAuthenticationOptions()\r\n                {\r\n                    ClientCertificates = new X509CertificateCollection(),\r\n                };\r\n\r\n                shHandler.SslOptions.ClientCertificates.Add(cert);\r\n                shHandler.SslOptions.LocalCertificateSelectionCallback = (object sender, string targetHost, X509CertificateCollection localCertificates, X509Certificate remoteCertificate, string[] acceptableIssuers) => cert;\r\n            }\r\n\r\n            var client = new HttpClient(shHandler);\r\n            client.Timeout = TimeSpan.FromSeconds(10);\r\n            var request = new HttpRequestMessage(HttpMethod.Post, \"https://login.live.com/pksecure/oauth20_clientcredentials.srf\");\r\n            request.Content = new StringContent(\"blah\", System.Text.Encoding.UTF8, new MediaTypeHeaderValue(\"application/x-www-form-urlencoded\").ToString());\r\n            var response = await client.SendAsync(request);\r\n            throw new Exception(\"code doesn't make it this far\");\r\n        }\r\n\r\n        private static X509Certificate2 GetCert()\r\n        {\r\n            var fabrikam = \"MIIKNgIBAzCCCfYGCSqGSIb3DQEHAaCCCecEggnjMIIJ3zCCBgAGCSqGSIb3DQEHAaCCBfEEggXtMIIF6TCCBeUGCyqGSIb3DQEMCgECoIIE/jCCBPowHAYKKoZIhvcNAQwBAzAOBAjM+a2pAGllLwICB9AEggTYaSpqMmNTo3QDS/Rrq+RzUFJiIKOFMId/Q/SpkElK6nX5LshOJQPBwp3XppKDmXocleVp73jJl/Ov41qXeVfELPJVe+VHuL6866KdhzrXKYfuq8RuYh8f6cSC4VuytYTn76NGsvVQhVinJ4Gh0PwYhDUAqBJrZAFOYD1m+GCIUiobroM8miXgMu480wkLlwr9ecsZvQFmS+6I4/qFEAPV1dmCu2pgq+TXBbjTZZH3WLPXKeOVmCBvI+gE9rRSx2AYn/ufCsmLQ6xonVtqvE4IB/tutKltNL5MRtkqGdkcGCKUrLrleUS0OfNdU6O5sPuqOK53tFmGQupWI+r1gyU9JEGxW0cpwxCgCrwV1F9JC9aBCyyCZgaUHd/9Sz06M7+5ARjvIcFSmxQQ7nUzxJotUmUtquh3muHfRaNBZI3iwyPwzUAiFz2IpMUsR0IJmmCmO6uF4rKUTB9/+jAyiF+35SfgwnYFKilTNI7YFJ0Ky16NBeGnXJ5jqsiprIVHk+ufQkVLzC6CS1wUyRA355Tnfy13lRZuSN7uZ/94kOqLTkC7F4wIFJ1Q6j5IFb9Tk8+AZi5wyn/gj/lRhEhVTgn2YK1BLGTRs851fxSvvgfFPcbw1NNirx2Gphs+HZzE1jSEzH0TymxdBhgMdYSmiuI/AF9EgMWW7r5g1NP9PFGmbT9Nj9IgLI3X1WoOCRZYyeZb1GGC0pwt7loXxcBa6RZkYoPvBcdYY7Kyh1yVauQhb3EyHh1YMU/ESLW6hgKtU+dr2XqLzydsg/Sw6yTLDMgMtHjwbs8Ia9t644+UzK9YsgEaOLZ0usO3zOns2Mgyht33BWeODZTzWDsrJadAunzqSlMTyAIUeCsdI8F+LEK1PGOdUallSDvIJK85l0BSInvo/ZEkz2Doa7Nb+urcbQ4Wy+mqb6cAhr2LBqkrbfFv5jZ9ILDh4lPXOUWYcF8LQTBnxyxy4u0C66TUv9pWINtwW259QgPcSAVNzagZzM9GOA098jWWUhIMIAS46OxaxNQC2fzra+dgrk6/91/RuxKvNcqF6XExsuDxnDcDBGUENnpVtwZU1zuNaAUXC9hUOryPeSpyOKVQP3Y8cc3LRuQeQr3i5wHqF/yhS2s+O611FzJ5pokfZZvdSNGs51EwpO77xjJEn/uQ92MNqhTVz0pRs491Za3GzUfMPQsRNcNITgpSVaFbiptnXQdtV9BDXUxuKkjAFjdbeGmeXL2nqiZi6bIsnC/TAcNjmIKKVgB2/5WLiEUGTo9BBEyvxKHIGSyiki0okF+fh9H09olc9tkIh3LO8SeNvTcXE5/rubLqMR/m2u60+anH/lslLQVk6mpOmqwPYeg9CWx33ZjVo0cfcPzyCB/00X2EHExg/UT4BMuaMstG9UiWjswFkBX4WAOV2HHSYokDnouaiKesr4H6NAReqGre3Ux3mTJDHj7GWjTZviGGZZMRjeWt9T3zN/peZfMNWmu7mKRujIEtsoqEuSQYPrALu5wHW/Z+1A8owQ5gIWIhwoON8dTx8mvDArzIf4yYKIcmex4MoBRDLRQ579+SqXfEOkn8bB24NmodmPUBwi0OvmK8LINzFCWekYEigQkmJI76uGs4p9joS2tso6oi7eyWbZh1E46TtI11CDB7Xz2DzN666zGB0zATBgkqhkiG9w0BCRUxBgQEAQAAADBdBgkqhkiG9w0BCRQxUB5OAHQAZQAtADYAOQBlAGYANgA0ADcANQAtAGUAOABlADkALQA0ADEAMwBjAC0AOAA0ADUANgAtADQAMwAxAGUAMABjADMAZABiADQANwBhMF0GCSsGAQQBgjcRATFQHk4ATQBpAGMAcgBvAHMAbwBmAHQAIABTAG8AZgB0AHcAYQByAGUAIABLAGUAeQAgAFMAdABvAHIAYQBnAGUAIABQAHIAbwB2AGkAZABlAHIwggPXBgkqhkiG9w0BBwagggPIMIIDxAIBADCCA70GCSqGSIb3DQEHATAcBgoqhkiG9w0BDAEGMA4ECBczS2R1fsdKAgIH0ICCA5CMLm2Fo4dxB6GDBi0rIsPzbKvuVa2ICAhNE+W3IzGMtFwwmKG9NY8eChj8auyYfhAGHdq2BcsZ7SANDduD6tibG3u+9yjbTmoj2Dbj3Ci+gnKkibvBiUYZrTiFrJIOxxdi2zRyneDk9lijd2LONgwtH8w/6iXUhV6UgcF37eRjPnPptZsMnzhVXh//j7oS37sOC/iDQPLf7XiuKpqpu7Binj6EaqqzDLthDCiwuGmAb1ogMs39KrZgfQLmIC0fATnOnZ5zaAU86+hJVnmfRDuRC0cXV8Yu/JXQmXnnYCOS3Apyjd9yZ1lOEeuJ4GPrbJM8/S8CqDRKd/BxnoDFSLH0tQX+UytcJ4HYvf18DG07vcwe3PBCuLuaFYNNWSweQ1WAHatAg+t33YHA3I8QVLuzFm172Uhe/AHd9aV+br3QNmKcaHYZb2EN2/IC0880usLh0OKrXMukskonl9BmI0PFT427RbK3VG/hKLVzTd7PJeUfm70FPJza8eM7AvRiwvH31NlR9CViGkQ+o9Ij/8ko7MR8+MtI3y/4HHleg1ayYsWOof6zxRzx8bd8ceYX4S+Kb7RYH8IMxcgEkd2jl8OPOQSKB4zTod7kDVxQe4/BsKGQofWiib05dQ6kCaMRyHQrfrh6QCcYTf0aWSXC+UBEqDpnoPNgJtA/Mt7asWcgfGKud+DNBO702yyw2Pm17dZAWuwuQonCwp6dJipGeXqrAqaBRzsTBJOVnDVsVMM8TzFyw/3aitBUq+3eO1BmbcsaWw4XE/jOKboJznaWj1tE4opVFu05PfGcDiKCTn3yCGjO9b3dcyHSHKM/zsx3ADxYMdHWvEJT3sktWF5x+kRpL5HX9d2pfg/gNWZg+4FCOomif+6If+NBRdMFbjZ7ozk/mZQJRx/Zzs0LNM2wp2GLxtjZTOIpa7a1fZfbT4/Cw68WXpTEZ74SbA6ok7xkA8Qs4/baxBwRZZHB011mgbJxH0QV0wFvuq3AU+8dsCOETtSt0sBeYmhRfZo5WP1tpG0IsP3qXG7mFyrh0DY6A7NwvTPAyBrD8oheABEBdAlKYZ2Qci5hovf7Hsr3XXe5++GthiR8e4ofd0MygFclM2sBsF2g7fcxl/I/oO2dwGcziCoEE5T8fBVC84RoqMweSzh/JtxmOiLuR92GmGxmwvhBcXu1HLXmSjzGCTceptWhg2vhZzCF/e3MWZtwlBlIQjcwNzAfMAcGBSsOAwIaBBTjakFm0psnqQsS91uTgNrTKkNMnQQUHKyz3QAfN6WpVoSb0ETEkAR9Vh4=\";\r\n            var certBytes = Convert.FromBase64String(fabrikam);\r\n            return new X509Certificate2(certBytes, string.Empty, X509KeyStorageFlags.UserKeySet | X509KeyStorageFlags.EphemeralKeySet);\r\n        }\r\n    }\r\n}\r\n\r\n```"},{"Id":"9480772277","Type":"IssuesEvent","CreatedAt":"2019-04-20T20:58:16","Actor":"davidsh","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/34499","RelatedDescription":"Closed issue \"System.Net.Http.PerformanceTests failing with \"The system cannot find the file specified.\"\" (#34499) at dotnet/corefx","RelatedBody":"failed again: https://ci2.dot.net/job/dotnet_corefx/job/perf/job/master/job/perf_windows_nt_release/7660/\r\n\r\nfailed log:\r\n```\r\nC:\\j\\w\\perf_windows_---356c2fc4\\.packages\\microsoft.dotnet.corefxtesting\\1.0.0-beta.19054.13\\build\\core\\Core.targets(198,5): warning MSB3073: The command \"C:\\j\\w\\perf_windows_---356c2fc4\\artifacts\\bin\\tests\\System.Net.Http.PerformanceTests\\netcoreapp-Windows_NT-Release-x64\\RunTests.cmd C:\\j\\w\\perf_windows_---356c2fc4\\artifacts\\bin\\testhost/netcoreapp-Windows_NT-Release-x64/\" exited with code 1. [C:\\j\\w\\perf_windows_---356c2fc4\\src\\System.Net.Http\\tests\\Performance\\System.Net.Http.PerformanceTests.csproj]\r\nC:\\j\\w\\perf_windows_---356c2fc4\\.packages\\microsoft.dotnet.corefxtesting\\1.0.0-beta.19054.13\\build\\core\\Core.targets(209,5): error : One or more tests failed while running tests from 'System.Net.Http.PerformanceTests'. [C:\\j\\w\\perf_windows_---356c2fc4\\src\\System.Net.Http\\tests\\Performance\\System.Net.Http.PerformanceTests.csproj]\r\nC:\\j\\w\\perf_windows_---356c2fc4\\dir.traversal.targets(76,5): error : (No message specified) [C:\\j\\w\\perf_windows_---356c2fc4\\src\\tests.builds]\r\n```\r\n\r\n_Originally posted by @v-haren in https://github.com/dotnet/corefx/issues/33622#issuecomment-452986425_\r\n\r\nFull stack trace:\r\n\r\n```\r\n----- start 21:01:18.27 ===============  To repro directly: ===================================================== \r\n21:01:10   pushd C:\\j\\w\\perf_windows_---356c2fc4\\artifacts\\bin\\tests\\System.Net.Http.PerformanceTests\\netcoreapp-Windows_NT-Release-x64\\\r\n21:01:10   C:\\j\\w\\perf_windows_---356c2fc4\\artifacts\\bin\\testhost\\netcoreapp-Windows_NT-Release-x64\\dotnet.exe PerfRunner.exe --perf:runid Perf-Profile --perf:collect stopwatch \r\n21:01:10   if exist \"Perf-Profile-System.Net.Http.PerformanceTests.xml\" (\r\n21:01:10   C:\\Python35\\python.exe \"C:\\j\\w\\perf_windows_---356c2fc4\\artifacts\\Microsoft.BenchView.JSONFormat\\tools\\measurement.py\" xunit \"Perf-Profile-System.Net.Http.PerformanceTests.xml\" --better desc --drop-first-value --append -o \"C:\\j\\w\\perf_windows_---356c2fc4\\measurement.json\" \r\n21:01:10   )\r\n21:01:10   popd\r\n21:01:10   ===========================================================================================================\r\n21:01:10   [1/9/2019 9:01:18 PM][INF] Running 8 [Benchmark]s\r\n21:01:10   [1/9/2019 9:01:18 PM][INF]   System.Net.Http.Tests.SocketsHttpHandlerPerfTest.Get(ssl: True, chunkedResponse: True, responseLength: 100000)\r\n21:01:11   [1/9/2019 9:01:19 PM][ERR] System.Net.Http.Tests.SocketsHttpHandlerPerfTest.Get(ssl: True, chunkedResponse: True, responseLength: 100000): The system cannot find the file specified.\r\n21:01:11   [1/9/2019 9:01:19 PM][ERR]    at Internal.Cryptography.Pal.CertificatePal.FilterPFXStore(Byte[] rawData, SafePasswordHandle password, PfxCertStoreFlags pfxCertStoreFlags) in C:\\j\\w\\perf_windows_---356c2fc4\\src\\System.Security.Cryptography.X509Certificates\\src\\Internal\\Cryptography\\Pal.Windows\\CertificatePal.Import.cs:line 152\r\n21:01:11      at Internal.Cryptography.Pal.CertificatePal.FromBlobOrFile(Byte[] rawData, String fileName, SafePasswordHandle password, X509KeyStorageFlags keyStorageFlags) in C:\\j\\w\\perf_windows_---356c2fc4\\src\\System.Security.Cryptography.X509Certificates\\src\\Internal\\Cryptography\\Pal.Windows\\CertificatePal.Import.cs:line 88\r\n21:01:11      at Internal.Cryptography.Pal.CertificatePal.FromBlob(Byte[] rawData, SafePasswordHandle password, X509KeyStorageFlags keyStorageFlags) in C:\\j\\w\\perf_windows_---356c2fc4\\src\\System.Security.Cryptography.X509Certificates\\src\\Internal\\Cryptography\\Pal.Windows\\CertificatePal.Import.cs:line 21\r\n21:01:11      at System.Security.Cryptography.X509Certificates.X509Certificate..ctor(Byte[] rawData, String password, X509KeyStorageFlags keyStorageFlags) in C:\\j\\w\\perf_windows_---356c2fc4\\src\\System.Security.Cryptography.X509Certificates\\src\\System\\Security\\Cryptography\\X509Certificates\\X509Certificate.cs:line 81\r\n21:01:11      at System.Security.Cryptography.X509Certificates.X509Certificate2..ctor(Byte[] rawData, String password, X509KeyStorageFlags keyStorageFlags) in C:\\j\\w\\perf_windows_---356c2fc4\\src\\System.Security.Cryptography.X509Certificates\\src\\System\\Security\\Cryptography\\X509Certificates\\X509Certificate2.cs:line 64\r\n21:01:11      at System.Net.Test.Common.Configuration.Certificates.GetCertificate(String certificateFileName) in C:\\j\\w\\perf_windows_---356c2fc4\\src\\Common\\tests\\System\\Net\\Configuration.Certificates.cs:line 75\r\n21:01:11      at System.Net.Test.Common.Configuration.Certificates.GetServerCertificate() in C:\\j\\w\\perf_windows_---356c2fc4\\src\\Common\\tests\\System\\Net\\Configuration.Certificates.cs:line 38\r\n21:01:11      at System.Net.Http.Tests.SocketsHttpHandlerPerfTest.Get(Boolean ssl, Boolean chunkedResponse, Int32 responseLength) in C:\\j\\w\\perf_windows_---356c2fc4\\src\\System.Net.Http\\tests\\Performance\\Perf.SocketsHttpHandler.cs:line 33\r\n21:01:11      at Microsoft.Xunit.Performance.BenchmarkTestInvoker.<>c__DisplayClass1_0.<<CallTestMethod>b__0>d.MoveNext()\r\n21:01:11   --- End of stack trace from previous location where exception was thrown ---\r\n21:01:11      at Microsoft.Xunit.Performance.Internal.BenchmarkIterator.RunAsync(Func`1 testMethod)\r\n21:01:11      at Xunit.Sdk.TestInvoker`1.<>c__DisplayClass48_1.<<InvokeTestMethodAsync>b__1>d.MoveNext() in C:\\projects\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\TestInvoker.cs:line 264\r\n21:01:11   --- End of stack trace from previous location where exception was thrown ---\r\n21:01:11      at Xunit.Sdk.ExecutionTimer.AggregateAsync(Func`1 asyncAction) in C:\\projects\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\ExecutionTimer.cs:line 48\r\n21:01:11      at Xunit.Sdk.ExceptionAggregator.RunAsync(Func`1 code) in C:\\projects\\xunit\\src\\xunit.core\\Sdk\\ExceptionAggregator.cs:line 90\r\n21:01:11   [1/9/2019 9:01:19 PM][INF]   System.Net.Http.Tests.SocketsHttpHandlerPerfTest.Get(ssl: False, chunkedResponse: False, responseLength: 1)\r\n21:01:11   [1/9/2019 9:01:19 PM][ERR] System.Net.Http.Tests.SocketsHttpHandlerPerfTest.Get(ssl: False, chunkedResponse: False, responseLength: 1): The system cannot find the file specified.\r\n21:01:11   [1/9/2019 9:01:19 PM][ERR]    at Internal.Cryptography.Pal.CertificatePal.FilterPFXStore(Byte[] rawData, SafePasswordHandle password, PfxCertStoreFlags pfxCertStoreFlags) in C:\\j\\w\\perf_windows_---356c2fc4\\src\\System.Security.Cryptography.X509Certificates\\src\\Internal\\Cryptography\\Pal.Windows\\CertificatePal.Import.cs:line 152\r\n21:01:11      at Internal.Cryptography.Pal.CertificatePal.FromBlobOrFile(Byte[] rawData, String fileName, SafePasswordHandle password, X509KeyStorageFlags keyStorageFlags) in C:\\j\\w\\perf_windows_---356c2fc4\\src\\System.Security.Cryptography.X509Certificates\\src\\Internal\\Cryptography\\Pal.Windows\\CertificatePal.Import.cs:line 88\r\n21:01:11      at Internal.Cryptography.Pal.CertificatePal.FromBlob(Byte[] rawData, SafePasswordHandle password, X509KeyStorageFlags keyStorageFlags) in C:\\j\\w\\perf_windows_---356c2fc4\\src\\System.Security.Cryptography.X509Certificates\\src\\Internal\\Cryptography\\Pal.Windows\\CertificatePal.Import.cs:line 21\r\n21:01:11      at System.Security.Cryptography.X509Certificates.X509Certificate..ctor(Byte[] rawData, String password, X509KeyStorageFlags keyStorageFlags) in C:\\j\\w\\perf_windows_---356c2fc4\\src\\System.Security.Cryptography.X509Certificates\\src\\System\\Security\\Cryptography\\X509Certificates\\X509Certificate.cs:line 81\r\n21:01:11      at System.Security.Cryptography.X509Certificates.X509Certificate2..ctor(Byte[] rawData, String password, X509KeyStorageFlags keyStorageFlags) in C:\\j\\w\\perf_windows_---356c2fc4\\src\\System.Security.Cryptography.X509Certificates\\src\\System\\Security\\Cryptography\\X509Certificates\\X509Certificate2.cs:line 64\r\n21:01:11      at System.Net.Test.Common.Configuration.Certificates.GetCertificate(String certificateFileName) in C:\\j\\w\\perf_windows_---356c2fc4\\src\\Common\\tests\\System\\Net\\Configuration.Certificates.cs:line 75\r\n21:01:11      at System.Net.Test.Common.Configuration.Certificates.GetServerCertificate() in C:\\j\\w\\perf_windows_---356c2fc4\\src\\Common\\tests\\System\\Net\\Configuration.Certificates.cs:line 38\r\n21:01:11      at System.Net.Http.Tests.SocketsHttpHandlerPerfTest.Get(Boolean ssl, Boolean chunkedResponse, Int32 responseLength) in C:\\j\\w\\perf_windows_---356c2fc4\\src\\System.Net.Http\\tests\\Performance\\Perf.SocketsHttpHandler.cs:line 33\r\n21:01:11      at Microsoft.Xunit.Performance.BenchmarkTestInvoker.<>c__DisplayClass1_0.<<CallTestMethod>b__0>d.MoveNext()\r\n21:01:11   --- End of stack trace from previous location where exception was thrown ---\r\n21:01:11      at Microsoft.Xunit.Performance.Internal.BenchmarkIterator.RunAsync(Func`1 testMethod)\r\n21:01:11      at Xunit.Sdk.TestInvoker`1.<>c__DisplayClass48_1.<<InvokeTestMethodAsync>b__1>d.MoveNext() in C:\\projects\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\TestInvoker.cs:line 264\r\n21:01:11   --- End of stack trace from previous location where exception was thrown ---\r\n21:01:11      at Xunit.Sdk.ExecutionTimer.AggregateAsync(Func`1 asyncAction) in C:\\projects\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\ExecutionTimer.cs:line 48\r\n21:01:11      at Xunit.Sdk.ExceptionAggregator.RunAsync(Func`1 code) in C:\\projects\\xunit\\src\\xunit.core\\Sdk\\ExceptionAggregator.cs:line 90\r\n21:01:11   [1/9/2019 9:01:19 PM][INF]   System.Net.Http.Tests.SocketsHttpHandlerPerfTest.Get(ssl: True, chunkedResponse: False, responseLength: 1)\r\n21:01:11   [1/9/2019 9:01:19 PM][ERR] System.Net.Http.Tests.SocketsHttpHandlerPerfTest.Get(ssl: True, chunkedResponse: False, responseLength: 1): The system cannot find the file specified.\r\n21:01:11   [1/9/2019 9:01:19 PM][ERR]    at Internal.Cryptography.Pal.CertificatePal.FilterPFXStore(Byte[] rawData, SafePasswordHandle password, PfxCertStoreFlags pfxCertStoreFlags) in C:\\j\\w\\perf_windows_---356c2fc4\\src\\System.Security.Cryptography.X509Certificates\\src\\Internal\\Cryptography\\Pal.Windows\\CertificatePal.Import.cs:line 152\r\n21:01:11      at Internal.Cryptography.Pal.CertificatePal.FromBlobOrFile(Byte[] rawData, String fileName, SafePasswordHandle password, X509KeyStorageFlags keyStorageFlags) in C:\\j\\w\\perf_windows_---356c2fc4\\src\\System.Security.Cryptography.X509Certificates\\src\\Internal\\Cryptography\\Pal.Windows\\CertificatePal.Import.cs:line 88\r\n21:01:11      at Internal.Cryptography.Pal.CertificatePal.FromBlob(Byte[] rawData, SafePasswordHandle password, X509KeyStorageFlags keyStorageFlags) in C:\\j\\w\\perf_windows_---356c2fc4\\src\\System.Security.Cryptography.X509Certificates\\src\\Internal\\Cryptography\\Pal.Windows\\CertificatePal.Import.cs:line 21\r\n21:01:11      at System.Security.Cryptography.X509Certificates.X509Certificate..ctor(Byte[] rawData, String password, X509KeyStorageFlags keyStorageFlags) in C:\\j\\w\\perf_windows_---356c2fc4\\src\\System.Security.Cryptography.X509Certificates\\src\\System\\Security\\Cryptography\\X509Certificates\\X509Certificate.cs:line 81\r\n21:01:11      at System.Security.Cryptography.X509Certificates.X509Certificate2..ctor(Byte[] rawData, String password, X509KeyStorageFlags keyStorageFlags) in C:\\j\\w\\perf_windows_---356c2fc4\\src\\System.Security.Cryptography.X509Certificates\\src\\System\\Security\\Cryptography\\X509Certificates\\X509Certificate2.cs:line 64\r\n21:01:11      at System.Net.Test.Common.Configuration.Certificates.GetCertificate(String certificateFileName) in C:\\j\\w\\perf_windows_---356c2fc4\\src\\Common\\tests\\System\\Net\\Configuration.Certificates.cs:line 75\r\n21:01:11      at System.Net.Test.Common.Configuration.Certificates.GetServerCertificate() in C:\\j\\w\\perf_windows_---356c2fc4\\src\\Common\\tests\\System\\Net\\Configuration.Certificates.cs:line 38\r\n21:01:11      at System.Net.Http.Tests.SocketsHttpHandlerPerfTest.Get(Boolean ssl, Boolean chunkedResponse, Int32 responseLength) in C:\\j\\w\\perf_windows_---356c2fc4\\src\\System.Net.Http\\tests\\Performance\\Perf.SocketsHttpHandler.cs:line 33\r\n21:01:11      at Microsoft.Xunit.Performance.BenchmarkTestInvoker.<>c__DisplayClass1_0.<<CallTestMethod>b__0>d.MoveNext()\r\n21:01:11   --- End of stack trace from previous location where exception was thrown ---\r\n21:01:11      at Microsoft.Xunit.Performance.Internal.BenchmarkIterator.RunAsync(Func`1 testMethod)\r\n21:01:11      at Xunit.Sdk.TestInvoker`1.<>c__DisplayClass48_1.<<InvokeTestMethodAsync>b__1>d.MoveNext() in C:\\projects\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\TestInvoker.cs:line 264\r\n21:01:11   --- End of stack trace from previous location where exception was thrown ---\r\n21:01:11      at Xunit.Sdk.ExecutionTimer.AggregateAsync(Func`1 asyncAction) in C:\\projects\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\ExecutionTimer.cs:line 48\r\n21:01:11      at Xunit.Sdk.ExceptionAggregator.RunAsync(Func`1 code) in C:\\projects\\xunit\\src\\xunit.core\\Sdk\\ExceptionAggregator.cs:line 90\r\n21:01:11   [1/9/2019 9:01:19 PM][INF]   System.Net.Http.Tests.SocketsHttpHandlerPerfTest.Get(ssl: False, chunkedResponse: True, responseLength: 1)\r\n21:01:11   [1/9/2019 9:01:19 PM][ERR] System.Net.Http.Tests.SocketsHttpHandlerPerfTest.Get(ssl: False, chunkedResponse: True, responseLength: 1): The system cannot find the file specified.\r\n21:01:11   [1/9/2019 9:01:19 PM][ERR]    at Internal.Cryptography.Pal.CertificatePal.FilterPFXStore(Byte[] rawData, SafePasswordHandle password, PfxCertStoreFlags pfxCertStoreFlags) in C:\\j\\w\\perf_windows_---356c2fc4\\src\\System.Security.Cryptography.X509Certificates\\src\\Internal\\Cryptography\\Pal.Windows\\CertificatePal.Import.cs:line 152\r\n21:01:11      at Internal.Cryptography.Pal.CertificatePal.FromBlobOrFile(Byte[] rawData, String fileName, SafePasswordHandle password, X509KeyStorageFlags keyStorageFlags) in C:\\j\\w\\perf_windows_---356c2fc4\\src\\System.Security.Cryptography.X509Certificates\\src\\Internal\\Cryptography\\Pal.Windows\\CertificatePal.Import.cs:line 88\r\n21:01:11      at Internal.Cryptography.Pal.CertificatePal.FromBlob(Byte[] rawData, SafePasswordHandle password, X509KeyStorageFlags keyStorageFlags) in C:\\j\\w\\perf_windows_---356c2fc4\\src\\System.Security.Cryptography.X509Certificates\\src\\Internal\\Cryptography\\Pal.Windows\\CertificatePal.Import.cs:line 21\r\n21:01:11      at System.Security.Cryptography.X509Certificates.X509Certificate..ctor(Byte[] rawData, String password, X509KeyStorageFlags keyStorageFlags) in C:\\j\\w\\perf_windows_---356c2fc4\\src\\System.Security.Cryptography.X509Certificates\\src\\System\\Security\\Cryptography\\X509Certificates\\X509Certificate.cs:line 81\r\n21:01:11      at System.Security.Cryptography.X509Certificates.X509Certificate2..ctor(Byte[] rawData, String password, X509KeyStorageFlags keyStorageFlags) in C:\\j\\w\\perf_windows_---356c2fc4\\src\\System.Security.Cryptography.X509Certificates\\src\\System\\Security\\Cryptography\\X509Certificates\\X509Certificate2.cs:line 64\r\n21:01:11      at System.Net.Test.Common.Configuration.Certificates.GetCertificate(String certificateFileName) in C:\\j\\w\\perf_windows_---356c2fc4\\src\\Common\\tests\\System\\Net\\Configuration.Certificates.cs:line 75\r\n21:01:11      at System.Net.Test.Common.Configuration.Certificates.GetServerCertificate() in C:\\j\\w\\perf_windows_---356c2fc4\\src\\Common\\tests\\System\\Net\\Configuration.Certificates.cs:line 38\r\n21:01:11      at System.Net.Http.Tests.SocketsHttpHandlerPerfTest.Get(Boolean ssl, Boolean chunkedResponse, Int32 responseLength) in C:\\j\\w\\perf_windows_---356c2fc4\\src\\System.Net.Http\\tests\\Performance\\Perf.SocketsHttpHandler.cs:line 33\r\n21:01:11      at Microsoft.Xunit.Performance.BenchmarkTestInvoker.<>c__DisplayClass1_0.<<CallTestMethod>b__0>d.MoveNext()\r\n21:01:11   --- End of stack trace from previous location where exception was thrown ---\r\n21:01:11      at Microsoft.Xunit.Performance.Internal.BenchmarkIterator.RunAsync(Func`1 testMethod)\r\n21:01:11      at Xunit.Sdk.TestInvoker`1.<>c__DisplayClass48_1.<<InvokeTestMethodAsync>b__1>d.MoveNext() in C:\\projects\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\TestInvoker.cs:line 264\r\n21:01:11   --- End of stack trace from previous location where exception was thrown ---\r\n21:01:11      at Xunit.Sdk.ExecutionTimer.AggregateAsync(Func`1 asyncAction) in C:\\projects\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\ExecutionTimer.cs:line 48\r\n21:01:11      at Xunit.Sdk.ExceptionAggregator.RunAsync(Func`1 code) in C:\\projects\\xunit\\src\\xunit.core\\Sdk\\ExceptionAggregator.cs:line 90\r\n21:01:11   [1/9/2019 9:01:19 PM][INF]   System.Net.Http.Tests.SocketsHttpHandlerPerfTest.Get(ssl: True, chunkedResponse: True, responseLength: 1)\r\n21:01:11   [1/9/2019 9:01:19 PM][ERR] System.Net.Http.Tests.SocketsHttpHandlerPerfTest.Get(ssl: True, chunkedResponse: True, responseLength: 1): The system cannot find the file specified.\r\n21:01:11   [1/9/2019 9:01:19 PM][ERR]    at Internal.Cryptography.Pal.CertificatePal.FilterPFXStore(Byte[] rawData, SafePasswordHandle password, PfxCertStoreFlags pfxCertStoreFlags) in C:\\j\\w\\perf_windows_---356c2fc4\\src\\System.Security.Cryptography.X509Certificates\\src\\Internal\\Cryptography\\Pal.Windows\\CertificatePal.Import.cs:line 152\r\n21:01:11      at Internal.Cryptography.Pal.CertificatePal.FromBlobOrFile(Byte[] rawData, String fileName, SafePasswordHandle password, X509KeyStorageFlags keyStorageFlags) in C:\\j\\w\\perf_windows_---356c2fc4\\src\\System.Security.Cryptography.X509Certificates\\src\\Internal\\Cryptography\\Pal.Windows\\CertificatePal.Import.cs:line 88\r\n21:01:11      at Internal.Cryptography.Pal.CertificatePal.FromBlob(Byte[] rawData, SafePasswordHandle password, X509KeyStorageFlags keyStorageFlags) in C:\\j\\w\\perf_windows_---356c2fc4\\src\\System.Security.Cryptography.X509Certificates\\src\\Internal\\Cryptography\\Pal.Windows\\CertificatePal.Import.cs:line 21\r\n21:01:11      at System.Security.Cryptography.X509Certificates.X509Certificate..ctor(Byte[] rawData, String password, X509KeyStorageFlags keyStorageFlags) in C:\\j\\w\\perf_windows_---356c2fc4\\src\\System.Security.Cryptography.X509Certificates\\src\\System\\Security\\Cryptography\\X509Certificates\\X509Certificate.cs:line 81\r\n21:01:11      at System.Security.Cryptography.X509Certificates.X509Certificate2..ctor(Byte[] rawData, String password, X509KeyStorageFlags keyStorageFlags) in C:\\j\\w\\perf_windows_---356c2fc4\\src\\System.Security.Cryptography.X509Certificates\\src\\System\\Security\\Cryptography\\X509Certificates\\X509Certificate2.cs:line 64\r\n21:01:11      at System.Net.Test.Common.Configuration.Certificates.GetCertificate(String certificateFileName) in C:\\j\\w\\perf_windows_---356c2fc4\\src\\Common\\tests\\System\\Net\\Configuration.Certificates.cs:line 75\r\n21:01:11      at System.Net.Test.Common.Configuration.Certificates.GetServerCertificate() in C:\\j\\w\\perf_windows_---356c2fc4\\src\\Common\\tests\\System\\Net\\Configuration.Certificates.cs:line 38\r\n21:01:11      at System.Net.Http.Tests.SocketsHttpHandlerPerfTest.Get(Boolean ssl, Boolean chunkedResponse, Int32 responseLength) in C:\\j\\w\\perf_windows_---356c2fc4\\src\\System.Net.Http\\tests\\Performance\\Perf.SocketsHttpHandler.cs:line 33\r\n21:01:11      at Microsoft.Xunit.Performance.BenchmarkTestInvoker.<>c__DisplayClass1_0.<<CallTestMethod>b__0>d.MoveNext()\r\n21:01:11   --- End of stack trace from previous location where exception was thrown ---\r\n21:01:11      at Microsoft.Xunit.Performance.Internal.BenchmarkIterator.RunAsync(Func`1 testMethod)\r\n21:01:11      at Xunit.Sdk.TestInvoker`1.<>c__DisplayClass48_1.<<InvokeTestMethodAsync>b__1>d.MoveNext() in C:\\projects\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\TestInvoker.cs:line 264\r\n21:01:11   --- End of stack trace from previous location where exception was thrown ---\r\n21:01:11      at Xunit.Sdk.ExecutionTimer.AggregateAsync(Func`1 asyncAction) in C:\\projects\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\ExecutionTimer.cs:line 48\r\n21:01:11      at Xunit.Sdk.ExceptionAggregator.RunAsync(Func`1 code) in C:\\projects\\xunit\\src\\xunit.core\\Sdk\\ExceptionAggregator.cs:line 90\r\n21:01:11   [1/9/2019 9:01:19 PM][INF]   System.Net.Http.Tests.SocketsHttpHandlerPerfTest.Get(ssl: True, chunkedResponse: False, responseLength: 100000)\r\n21:01:11   [1/9/2019 9:01:19 PM][ERR] System.Net.Http.Tests.SocketsHttpHandlerPerfTest.Get(ssl: True, chunkedResponse: False, responseLength: 100000): The system cannot find the file specified.\r\n21:01:11   [1/9/2019 9:01:19 PM][ERR]    at Internal.Cryptography.Pal.CertificatePal.FilterPFXStore(Byte[] rawData, SafePasswordHandle password, PfxCertStoreFlags pfxCertStoreFlags) in C:\\j\\w\\perf_windows_---356c2fc4\\src\\System.Security.Cryptography.X509Certificates\\src\\Internal\\Cryptography\\Pal.Windows\\CertificatePal.Import.cs:line 152\r\n21:01:11      at Internal.Cryptography.Pal.CertificatePal.FromBlobOrFile(Byte[] rawData, String fileName, SafePasswordHandle password, X509KeyStorageFlags keyStorageFlags) in C:\\j\\w\\perf_windows_---356c2fc4\\src\\System.Security.Cryptography.X509Certificates\\src\\Internal\\Cryptography\\Pal.Windows\\CertificatePal.Import.cs:line 88\r\n21:01:11      at Internal.Cryptography.Pal.CertificatePal.FromBlob(Byte[] rawData, SafePasswordHandle password, X509KeyStorageFlags keyStorageFlags) in C:\\j\\w\\perf_windows_---356c2fc4\\src\\System.Security.Cryptography.X509Certificates\\src\\Internal\\Cryptography\\Pal.Windows\\CertificatePal.Import.cs:line 21\r\n21:01:11      at System.Security.Cryptography.X509Certificates.X509Certificate..ctor(Byte[] rawData, String password, X509KeyStorageFlags keyStorageFlags) in C:\\j\\w\\perf_windows_---356c2fc4\\src\\System.Security.Cryptography.X509Certificates\\src\\System\\Security\\Cryptography\\X509Certificates\\X509Certificate.cs:line 81\r\n21:01:11      at System.Security.Cryptography.X509Certificates.X509Certificate2..ctor(Byte[] rawData, String password, X509KeyStorageFlags keyStorageFlags) in C:\\j\\w\\perf_windows_---356c2fc4\\src\\System.Security.Cryptography.X509Certificates\\src\\System\\Security\\Cryptography\\X509Certificates\\X509Certificate2.cs:line 64\r\n21:01:11      at System.Net.Test.Common.Configuration.Certificates.GetCertificate(String certificateFileName) in C:\\j\\w\\perf_windows_---356c2fc4\\src\\Common\\tests\\System\\Net\\Configuration.Certificates.cs:line 75\r\n21:01:11      at System.Net.Test.Common.Configuration.Certificates.GetServerCertificate() in C:\\j\\w\\perf_windows_---356c2fc4\\src\\Common\\tests\\System\\Net\\Configuration.Certificates.cs:line 38\r\n21:01:11      at System.Net.Http.Tests.SocketsHttpHandlerPerfTest.Get(Boolean ssl, Boolean chunkedResponse, Int32 responseLength) in C:\\j\\w\\perf_windows_---356c2fc4\\src\\System.Net.Http\\tests\\Performance\\Perf.SocketsHttpHandler.cs:line 33\r\n21:01:11      at Microsoft.Xunit.Performance.BenchmarkTestInvoker.<>c__DisplayClass1_0.<<CallTestMethod>b__0>d.MoveNext()\r\n21:01:11   --- End of stack trace from previous location where exception was thrown ---\r\n21:01:11      at Microsoft.Xunit.Performance.Internal.BenchmarkIterator.RunAsync(Func`1 testMethod)\r\n21:01:11      at Xunit.Sdk.TestInvoker`1.<>c__DisplayClass48_1.<<InvokeTestMethodAsync>b__1>d.MoveNext() in C:\\projects\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\TestInvoker.cs:line 264\r\n21:01:11   --- End of stack trace from previous location where exception was thrown ---\r\n21:01:11      at Xunit.Sdk.ExecutionTimer.AggregateAsync(Func`1 asyncAction) in C:\\projects\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\ExecutionTimer.cs:line 48\r\n21:01:11      at Xunit.Sdk.ExceptionAggregator.RunAsync(Func`1 code) in C:\\projects\\xunit\\src\\xunit.core\\Sdk\\ExceptionAggregator.cs:line 90\r\n21:01:11   [1/9/2019 9:01:19 PM][INF]   System.Net.Http.Tests.SocketsHttpHandlerPerfTest.Get(ssl: False, chunkedResponse: False, responseLength: 100000)\r\n21:01:11   [1/9/2019 9:01:19 PM][ERR] System.Net.Http.Tests.SocketsHttpHandlerPerfTest.Get(ssl: False, chunkedResponse: False, responseLength: 100000): The system cannot find the file specified.\r\n21:01:11   [1/9/2019 9:01:19 PM][ERR]    at Internal.Cryptography.Pal.CertificatePal.FilterPFXStore(Byte[] rawData, SafePasswordHandle password, PfxCertStoreFlags pfxCertStoreFlags) in C:\\j\\w\\perf_windows_---356c2fc4\\src\\System.Security.Cryptography.X509Certificates\\src\\Internal\\Cryptography\\Pal.Windows\\CertificatePal.Import.cs:line 152\r\n21:01:11      at Internal.Cryptography.Pal.CertificatePal.FromBlobOrFile(Byte[] rawData, String fileName, SafePasswordHandle password, X509KeyStorageFlags keyStorageFlags) in C:\\j\\w\\perf_windows_---356c2fc4\\src\\System.Security.Cryptography.X509Certificates\\src\\Internal\\Cryptography\\Pal.Windows\\CertificatePal.Import.cs:line 88\r\n21:01:11      at Internal.Cryptography.Pal.CertificatePal.FromBlob(Byte[] rawData, SafePasswordHandle password, X509KeyStorageFlags keyStorageFlags) in C:\\j\\w\\perf_windows_---356c2fc4\\src\\System.Security.Cryptography.X509Certificates\\src\\Internal\\Cryptography\\Pal.Windows\\CertificatePal.Import.cs:line 21\r\n21:01:11      at System.Security.Cryptography.X509Certificates.X509Certificate..ctor(Byte[] rawData, String password, X509KeyStorageFlags keyStorageFlags) in C:\\j\\w\\perf_windows_---356c2fc4\\src\\System.Security.Cryptography.X509Certificates\\src\\System\\Security\\Cryptography\\X509Certificates\\X509Certificate.cs:line 81\r\n21:01:11      at System.Security.Cryptography.X509Certificates.X509Certificate2..ctor(Byte[] rawData, String password, X509KeyStorageFlags keyStorageFlags) in C:\\j\\w\\perf_windows_---356c2fc4\\src\\System.Security.Cryptography.X509Certificates\\src\\System\\Security\\Cryptography\\X509Certificates\\X509Certificate2.cs:line 64\r\n21:01:11      at System.Net.Test.Common.Configuration.Certificates.GetCertificate(String certificateFileName) in C:\\j\\w\\perf_windows_---356c2fc4\\src\\Common\\tests\\System\\Net\\Configuration.Certificates.cs:line 75\r\n21:01:11      at System.Net.Test.Common.Configuration.Certificates.GetServerCertificate() in C:\\j\\w\\perf_windows_---356c2fc4\\src\\Common\\tests\\System\\Net\\Configuration.Certificates.cs:line 38\r\n21:01:11      at System.Net.Http.Tests.SocketsHttpHandlerPerfTest.Get(Boolean ssl, Boolean chunkedResponse, Int32 responseLength) in C:\\j\\w\\perf_windows_---356c2fc4\\src\\System.Net.Http\\tests\\Performance\\Perf.SocketsHttpHandler.cs:line 33\r\n21:01:11      at Microsoft.Xunit.Performance.BenchmarkTestInvoker.<>c__DisplayClass1_0.<<CallTestMethod>b__0>d.MoveNext()\r\n21:01:11   --- End of stack trace from previous location where exception was thrown ---\r\n21:01:11      at Microsoft.Xunit.Performance.Internal.BenchmarkIterator.RunAsync(Func`1 testMethod)\r\n21:01:11      at Xunit.Sdk.TestInvoker`1.<>c__DisplayClass48_1.<<InvokeTestMethodAsync>b__1>d.MoveNext() in C:\\projects\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\TestInvoker.cs:line 264\r\n21:01:11   --- End of stack trace from previous location where exception was thrown ---\r\n21:01:11      at Xunit.Sdk.ExecutionTimer.AggregateAsync(Func`1 asyncAction) in C:\\projects\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\ExecutionTimer.cs:line 48\r\n21:01:11      at Xunit.Sdk.ExceptionAggregator.RunAsync(Func`1 code) in C:\\projects\\xunit\\src\\xunit.core\\Sdk\\ExceptionAggregator.cs:line 90\r\n```"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"9480056514","Type":"PullRequestEvent","CreatedAt":"2019-04-20T14:34:45","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7331","RelatedDescription":"Opened pull request \"Implement NativeLibrary API on CoreRT\" (#7331) at dotnet/corert","RelatedBody":"The only thing that's missing is the DllImportResolver. It's easy, but I don't want to bloat this code review any more than is necessary. This is a lot of code."},{"Id":"9478923587","Type":"IssuesEvent","CreatedAt":"2019-04-20T02:54:24","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/7187","RelatedDescription":"Closed issue \"System.IO.IOException while building CoreRT samples in vagrant box\" (#7187) at dotnet/corert","RelatedBody":"The Documentation folder has a README that links to \"Prerequisites for building\" here:\r\nhttps://github.com/dotnet/corert/blob/master/Documentation/prerequisites-for-building.md\r\n\r\nHowever, the samples (e.g. HellowWorld and WebApi) instead link to:\r\nhttps://github.com/dotnet/corert/blob/master/samples/prerequisites.md\r\n\r\nI suspect the former doc is more up to date, so perhaps the samples should just link to that.\r\n\r\nHowever even the non-sample prereqs doc appears to be out of date.  I have ubuntu 18.04 (running in virtualbox) and it did not find the dependency \"libicu55\" when I attempted to apt-get it.\r\n\r\nAdditionally, possibly because of the missing dependency (or perhaps because of the virtualbox, tho I doubt it?), I was unable to build HelloWorld in linux.  I got this exception:\r\n```\r\n.../2.2.103/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.targets(308,5): error MSB4018: The \"EmbedAppNameInHost\" task failed unexpectedly. [/vagran\r\nt/dotnet/HelloWorld/HelloWorld.csproj]\r\n.../2.2.103/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.targets(308,5): error MSB4018: System.IO.IOException: Invalid argument [/vagrant/dotnet/He\r\nlloWorld/HelloWorld.csproj]\r\n.../2.2.103/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Sdk.targets(308,5): error MSB4018:    at System.IO.MemoryMappedFiles.MemoryMappedView.CreateVi\r\new(SafeMemoryMappedFileHandle memMappedFileHandle, MemoryMappedFileAccess access, Int64 requestedOffset, Int64 requestedSize) [/vagrant/dotnet/HelloWorld/HelloWorld.csproj]\r\n...(call stack continues for a few more lines)\r\n```\r\n\r\nI followed the directions from:\r\nhttps://github.com/dotnet/corert/tree/master/samples/HelloWorld\r\n\r\nIt does work in windows for me.\r\n\r\nThese are the versions that were restored in my initial linux run of this app:\r\n```\r\n  Restoring packages for /vagrant/dotnet/HelloWorld/HelloWorld.csproj...\r\n  Installing runtime.linux-x64.Microsoft.NETCore.DotNetAppHost 2.2.1.\r\n  Installing runtime.linux-x64.Microsoft.NETCore.DotNetHostResolver 2.2.1.\r\n  Installing runtime.linux-x64.Microsoft.NETCore.DotNetHostPolicy 2.2.1.\r\n  Installing runtime.linux-x64.Microsoft.DotNet.ILCompiler 1.0.0-alpha-27516-01.\r\n  Installing runtime.linux-x64.Microsoft.NETCore.App 2.2.1.\r\n  Restore completed in 49.34 sec for /vagrant/dotnet/HelloWorld/HelloWorld.csproj.\r\n```"},{"Id":"9478920413","Type":"IssuesEvent","CreatedAt":"2019-04-20T02:52:16","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/7278","RelatedDescription":"Closed issue \"Unable to load shared library 'objwriter' or one of its dependencies\" (#7278) at dotnet/corert","RelatedBody":"This problems occured again.\r\n\r\nLast time, I restalled the operation system.\r\n\r\nI run unbantu on Oracle VM VirtualBox\r\n\r\n\r\nubuntu-18.10-desktop-amd64.iso\r\n\r\n\r\n\r\n![crt_error1](https://user-images.githubusercontent.com/7885929/55873976-9c448f80-5bc3-11e9-8092-0743a27fa0fd.png)\r\n"},{"Id":"9478917587","Type":"IssuesEvent","CreatedAt":"2019-04-20T02:50:31","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/7265","RelatedDescription":"Closed issue \"Build shared library with F# fails on macOS\" (#7265) at dotnet/corert","RelatedBody":"I followed the NativeLibrary sample to build a shared library in F#. [Here's my code.](https://gist.github.com/akbcode/fecb98b56cbbfeffd05bdf85ccb83788)\r\n\r\nIt fails with \r\n```\r\nld: illegal text-relocation to '___typemanager_indirection' in obj/Debug/netcoreapp2.2/osx-x64/native/FSNativeLibrary.o from '___RMHSignature_System_Linq_System_Linq_Enumerable__Empty' in obj/Debug/netcoreapp2.2/osx-x64/native/FSNativeLibrary.o for architecture x86_64\r\n```\r\nBuilding as a static library works. I have only tested on macOS 10.13.6"},{"Id":"9478631289","Type":"PullRequestEvent","CreatedAt":"2019-04-20T00:07:07","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7320","RelatedDescription":"Merged pull request \"Update objwriter version\" (#7320) at dotnet/corert","RelatedBody":""},{"Id":"9477353865","Type":"PullRequestEvent","CreatedAt":"2019-04-19T18:19:33","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7330","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr,corefx\" (#7330) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub @krwq @safern"},{"Id":"9476856135","Type":"IssuesEvent","CreatedAt":"2019-04-19T16:30:18","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/7307","RelatedDescription":"Closed issue \"Compile Gui.cs example win-x64\" (#7307) at dotnet/corert","RelatedBody":"I am trying to compile an executable that includes https://github.com/migueldeicaza/gui.cs\r\nWhen I compile in Linux all is sucessfully, but when I try to compile in Windows I get the following error:\r\n`\r\nTerminal.obj : error LNK2001: unresolved external symbol dlopen [C:\\GitHub\\gui.cs\\Example\\Example.csproj]\r\nTerminal.obj : error LNK2001: unresolved external symbol dlsym [C:\\GitHub\\gui.cs\\Example\\Example.csproj]\r\nbin\\Debug\\netcoreapp2.2\\win-x64\\native\\Terminal.exe : fatal error LNK1120: 2 unresolved externals [C:\\GitHub\\gui.cs\\Example\\Example.csproj]`\r\nThe problem is related to a `[DllImport (\"__Internal\")]` for compatibility with Mono. \r\nI'm using IlCompiler version 1.0.0-alpha-27615-01\r\n"},{"Id":"9476854374","Type":"IssuesEvent","CreatedAt":"2019-04-19T16:29:56","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/7327","RelatedDescription":"Closed issue \"Question：how cli judge whether to compile native or managed code?\" (#7327) at dotnet/corert","RelatedBody":"To example \"Hello World\".we just call command like that \"dotnet publish -r win-x64 -c release\"\r\nso dotnet  how to judge compile native or managed code?"},{"Id":"9476752948","Type":"PullRequestEvent","CreatedAt":"2019-04-19T16:07:37","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7330","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr,corefx\" (#7330) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**"},{"Id":"9476740039","Type":"PullRequestEvent","CreatedAt":"2019-04-19T16:04:45","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7326","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#7326) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub @Anipik @tannergooding @krwq @safern @buyaa-n @bbartels"},{"Id":"9475877651","Type":"IssuesEvent","CreatedAt":"2019-04-19T13:10:23","Actor":"MarcoRossignoli","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/7329","RelatedDescription":"Closed issue \"Cannot compile repo with VS2019\" (#7329) at dotnet/corert","RelatedBody":"I've installed VS 2017/2019/2019 preview I cannot compile the repo:\r\n```\r\nF:\\git\\corert (master -> origin)\r\nλ build\r\nChecking pre-requisites...\r\n\r\nCommencing CoreRT Repo build\r\n\r\nCommencing build of native components for Windows_NT.x64.Debug\r\n\r\n**********************************************************************\r\n** Visual Studio 2019 Developer Command Prompt v16.0.2\r\n** Copyright (c) 2019 Microsoft Corporation\r\n**********************************************************************\r\n[vcvarsall.bat] Environment initialized for: 'x86_x64'\r\nCMake Error: Could not create named generator Visual Studio 16 2019\r\n\r\nGenerators\r\n  Visual Studio 15 2017 [arch] = Generates Visual Studio 2017 project files.\r\n                                 Optional [arch] can be \"Win64\" or \"ARM\".\r\n  Visual Studio 14 2015 [arch] = Generates Visual Studio 2015 project files.\r\n                                 Optional [arch] can be \"Win64\" or \"ARM\".\r\n  Visual Studio 12 2013 [arch] = Generates Visual Studio 2013 project files.\r\n                                 Optional [arch] can be \"Win64\" or \"ARM\".\r\n  Visual Studio 11 2012 [arch] = Generates Visual Studio 2012 project files.\r\n                                 Optional [arch] can be \"Win64\" or \"ARM\".\r\n  Visual Studio 10 2010 [arch] = Generates Visual Studio 2010 project files.\r\n                                 Optional [arch] can be \"Win64\" or \"IA64\".\r\n  Visual Studio 9 2008 [arch]  = Generates Visual Studio 2008 project files.\r\n                                 Optional [arch] can be \"Win64\" or \"IA64\".\r\n  Visual Studio 8 2005 [arch]  = Deprecated.  Generates Visual Studio 2005\r\n                                 project files.  Optional [arch] can be\r\n                                 \"Win64\".\r\n  Borland Makefiles            = Generates Borland makefiles.\r\n  NMake Makefiles              = Generates NMake makefiles.\r\n  NMake Makefiles JOM          = Generates JOM makefiles.\r\n  Green Hills MULTI            = Generates Green Hills MULTI files\r\n                                 (experimental, work-in-progress).\r\n  MSYS Makefiles               = Generates MSYS makefiles.\r\n  MinGW Makefiles              = Generates a make file for use with\r\n                                 mingw32-make.\r\n  Unix Makefiles               = Generates standard UNIX makefiles.\r\n  Ninja                        = Generates build.ninja files.\r\n  Watcom WMake                 = Generates Watcom WMake makefiles.\r\n  CodeBlocks - MinGW Makefiles = Generates CodeBlocks project files.\r\n  CodeBlocks - NMake Makefiles = Generates CodeBlocks project files.\r\n  CodeBlocks - NMake Makefiles JOM\r\n                               = Generates CodeBlocks project files.\r\n  CodeBlocks - Ninja           = Generates CodeBlocks project files.\r\n  CodeBlocks - Unix Makefiles  = Generates CodeBlocks project files.\r\n  CodeLite - MinGW Makefiles   = Generates CodeLite project files.\r\n  CodeLite - NMake Makefiles   = Generates CodeLite project files.\r\n  CodeLite - Ninja             = Generates CodeLite project files.\r\n  CodeLite - Unix Makefiles    = Generates CodeLite project files.\r\n  Sublime Text 2 - MinGW Makefiles\r\n                               = Generates Sublime Text 2 project files.\r\n  Sublime Text 2 - NMake Makefiles\r\n                               = Generates Sublime Text 2 project files.\r\n  Sublime Text 2 - Ninja       = Generates Sublime Text 2 project files.\r\n  Sublime Text 2 - Unix Makefiles\r\n                               = Generates Sublime Text 2 project files.\r\n  Kate - MinGW Makefiles       = Generates Kate project files.\r\n  Kate - NMake Makefiles       = Generates Kate project files.\r\n  Kate - Ninja                 = Generates Kate project files.\r\n  Kate - Unix Makefiles        = Generates Kate project files.\r\n  Eclipse CDT4 - NMake Makefiles\r\n                               = Generates Eclipse CDT 4.0 project files.\r\n  Eclipse CDT4 - MinGW Makefiles\r\n                               = Generates Eclipse CDT 4.0 project files.\r\n  Eclipse CDT4 - Ninja         = Generates Eclipse CDT 4.0 project files.\r\n  Eclipse CDT4 - Unix Makefiles= Generates Eclipse CDT 4.0 project files.\r\n\r\nFailed to generate native component build project\r\nNative component build failed. Refer F:\\git\\corert\\buildscripts\\..\\bin\\Logs\\Native_Windows_NT__x64__Debug.log for details.\r\n```\r\nThere is no file in `Log` directory.\r\nSure I'm missing something, maybe some vs component."}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"9479929712","Type":"PullRequestEvent","CreatedAt":"2019-04-20T13:26:36","Actor":"dotnet-maestro[bot]","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/3160","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/arcade\" (#3160) at dotnet/sdk","RelatedBody":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190418.7\r\n- **Date Produced**: 4/19/2019 12:41 AM\r\n- **Commit**: 5e7ce5b394f3477bb0a485a4b761b7742e95be37\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19218.7\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19218.7\r\n\r\n"}],"ResultType":"GitHubEvent"},"Home-Issues":{"Issues":[{"Id":"426787542","IsPullRequest":true,"CreatedAt":"2019-03-29T14:44:24","Actor":"mairaw","Number":"142","RawContent":null,"Title":"add docs samples link","State":"closed","Body":"@BillWagner should we add the samples project too?","Url":"https://github.com/dotnet/foundation/pull/142","RelatedDescription":"Closed or merged PR \"add docs samples link\" (#142)"},{"Id":"426787230","IsPullRequest":true,"CreatedAt":"2019-03-29T02:28:20","Actor":"mairaw","Number":"141","RawContent":null,"Title":"add links to ML.NET docs","State":"open","Body":"/cc @JRAlexander @shauheen \r\n\r\nTo match the info we have added for other projects","Url":"https://github.com/dotnet/foundation/pull/141","RelatedDescription":"Open PR \"add links to ML.NET docs\" (#141)"},{"Id":"426658581","IsPullRequest":true,"CreatedAt":"2019-03-29T02:16:07","Actor":"scottaddie","Number":"139","RawContent":null,"Title":"Add link to ASP.NET Core docs","State":"closed","Body":"Provide a link to the docs site for ASP.NET Core.","Url":"https://github.com/dotnet/foundation/pull/139","RelatedDescription":"Closed or merged PR \"Add link to ASP.NET Core docs\" (#139)"},{"Id":"426666928","IsPullRequest":true,"CreatedAt":"2019-03-29T02:15:48","Actor":"BillWagner","Number":"140","RawContent":null,"Title":"add links to .NET docs","State":"closed","Body":"/cc @mairaw @scottaddie\r\n\r\nMaira, did I miss any project repos to tag?","Url":"https://github.com/dotnet/foundation/pull/140","RelatedDescription":"Closed or merged PR \"add links to .NET docs\" (#140)"},{"Id":"419205679","IsPullRequest":true,"CreatedAt":"2019-03-18T21:04:01","Actor":"MikeWilliams-UK","Number":"137","RawContent":null,"Title":"Add V3.1 repo and change documentation link","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/137","RelatedDescription":"Closed or merged PR \"Add V3.1 repo and change documentation link\" (#137)"},{"Id":"419897914","IsPullRequest":true,"CreatedAt":"2019-03-18T21:03:34","Actor":"devlead","Number":"138","RawContent":null,"Title":"Add Dave to cake.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/138","RelatedDescription":"Closed or merged PR \"Add Dave to cake.md\" (#138)"},{"Id":"391459677","IsPullRequest":false,"CreatedAt":"2019-03-08T19:00:06","Actor":"manne","Number":"123","RawContent":null,"Title":"Missing logo for Steeltoe","State":"closed","Body":"`https://brandfolder.com/pivotal-assets/attachments/ohxttd-7yxa60-clvf50/pivotal-assets-pivotal-genericfile.png` redirects to a sign in page\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L128-L130","Url":"https://github.com/dotnet/foundation/issues/123","RelatedDescription":"Closed issue \"Missing logo for Steeltoe\" (#123)"},{"Id":"417018694","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:32","Actor":"jkonicki","Number":"136","RawContent":null,"Title":"Fix logo and update team contributors","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/136","RelatedDescription":"Closed or merged PR \"Fix logo and update team contributors\" (#136)"},{"Id":"416428925","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"135","RawContent":null,"Title":"adds Umbraco logo","State":"closed","Body":"fixes #124 ","Url":"https://github.com/dotnet/foundation/pull/135","RelatedDescription":"Closed or merged PR \"adds Umbraco logo\" (#135)"},{"Id":"391459812","IsPullRequest":false,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"124","RawContent":null,"Title":"Missing logo for Umbraco","State":"closed","Body":"`https://fbcdn-profile-a.akamaihd.net/hprofile-ak-xap1/v/t1.0-1/p160x160/971596_519168901464439_566592989_n.png?oh=ce61e5b4cbd60c0d99c4164cbb05a434&oe=54F091C9&__gda__=1424472439_c9f76213a915bc2af88246f464f29e8b` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L149-L151","Url":"https://github.com/dotnet/foundation/issues/124","RelatedDescription":"Closed issue \"Missing logo for Umbraco\" (#124)"},{"Id":"416427614","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:45","Actor":"manne","Number":"134","RawContent":null,"Title":"adds the prism logo","State":"closed","Body":"fixes #126 ","Url":"https://github.com/dotnet/foundation/pull/134","RelatedDescription":"Closed or merged PR \"adds the prism logo\" (#134)"},{"Id":"391460225","IsPullRequest":false,"CreatedAt":"2019-03-08T18:58:44","Actor":"manne","Number":"126","RawContent":null,"Title":"No logo provided for Prism","State":"closed","Body":"Can/should this [image](http://prismlibrary.github.io/images/logo-prism-symbol@2x.png) be used?\r\n\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L155-L157","Url":"https://github.com/dotnet/foundation/issues/126","RelatedDescription":"Closed issue \"No logo provided for Prism\" (#126)"},{"Id":"416157860","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:26","Actor":"glennawatson","Number":"133","RawContent":null,"Title":"Add additional ReactiveUI organization projects.","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/133","RelatedDescription":"Closed or merged PR \"Add additional ReactiveUI organization projects.\" (#133)"},{"Id":"407251900","IsPullRequest":true,"CreatedAt":"2019-02-18T17:45:44","Actor":"Potapy4","Number":"132","RawContent":null,"Title":"Update MVVM project logo","State":"closed","Body":"Fixes dotnet/dotnetfoundation-website#72\r\nFixes #125","Url":"https://github.com/dotnet/foundation/pull/132","RelatedDescription":"Closed or merged PR \"Update MVVM project logo\" (#132)"},{"Id":"391459919","IsPullRequest":false,"CreatedAt":"2019-02-18T17:45:44","Actor":"manne","Number":"125","RawContent":null,"Title":"Missing logo for MVVM Light Toolkit","State":"closed","Body":"`https://raw.githubusercontent.com/paulcbetts/mvvmlight/master/Installer/InstallItems/html/MVVM_BlackText_190x147.png` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L137-L139","Url":"https://github.com/dotnet/foundation/issues/125","RelatedDescription":"Closed issue \"Missing logo for MVVM Light Toolkit\" (#125)"},{"Id":"406210463","IsPullRequest":true,"CreatedAt":"2019-02-18T17:44:39","Actor":"NextTurn","Number":"131","RawContent":null,"Title":"Replace http links with https links","State":"closed","Body":"Replace http links with https where possible - both returned 200 OK.","Url":"https://github.com/dotnet/foundation/pull/131","RelatedDescription":"Closed or merged PR \"Replace http links with https links\" (#131)"},{"Id":"399191617","IsPullRequest":true,"CreatedAt":"2019-02-02T11:04:15","Actor":"NextTurn","Number":"130","RawContent":null,"Title":"Update Open XML links","State":"closed","Body":"OpenXmlDeveloper.org was shut down long ago.\r\n\r\nThe content has been moved to EricWhite.com.","Url":"https://github.com/dotnet/foundation/pull/130","RelatedDescription":"Closed or merged PR \"Update Open XML links\" (#130)"},{"Id":"395863354","IsPullRequest":true,"CreatedAt":"2019-01-09T22:28:14","Actor":"ErikEJ","Number":"128","RawContent":null,"Title":"Update of EF description","State":"closed","Body":"@divega !","Url":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Closed or merged PR \"Update of EF description\" (#128)"},{"Id":"395901602","IsPullRequest":true,"CreatedAt":"2019-01-05T03:23:39","Actor":"MarcBruins","Number":"129","RawContent":null,"Title":"Update to absolute path","State":"closed","Body":"Update to absolute path so that when this list is copied the link will actually work","Url":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Closed or merged PR \"Update to absolute path\" (#129)"},{"Id":"395705579","IsPullRequest":true,"CreatedAt":"2019-01-04T00:22:42","Actor":"carloscds","Number":"127","RawContent":null,"Title":"Update documentation information","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/127","RelatedDescription":"Closed or merged PR \"Update documentation information\" (#127)"},{"Id":"391459057","IsPullRequest":true,"CreatedAt":"2019-01-03T04:47:09","Actor":"manne","Number":"122","RawContent":null,"Title":"targets the existing document","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/122","RelatedDescription":"Closed or merged PR \"targets the existing document\" (#122)"},{"Id":"384569679","IsPullRequest":true,"CreatedAt":"2019-01-03T04:46:31","Actor":"JamesNK","Number":"121","RawContent":null,"Title":"Add Newtonsoft.Json","State":"closed","Body":"// @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/121","RelatedDescription":"Closed or merged PR \"Add Newtonsoft.Json\" (#121)"},{"Id":"384212839","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:50","Actor":"stefanov-stefan","Number":"120","RawContent":null,"Title":"Added Telerik info","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/120","RelatedDescription":"Closed or merged PR \"Added Telerik info\" (#120)"},{"Id":"384212448","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:22","Actor":"stefanov-stefan","Number":"119","RawContent":null,"Title":"Added Telerik UWP proj","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/119","RelatedDescription":"Closed or merged PR \"Added Telerik UWP proj\" (#119)"},{"Id":"382378851","IsPullRequest":true,"CreatedAt":"2018-11-23T10:32:15","Actor":"pkgw","Number":"118","RawContent":null,"Title":"Update WorldWide Telescope","State":"closed","Body":"Some layout fixes, but the main change is that @pkgw is now the project director.","Url":"https://github.com/dotnet/foundation/pull/118","RelatedDescription":"Closed or merged PR \"Update WorldWide Telescope\" (#118)"},{"Id":"380070557","IsPullRequest":true,"CreatedAt":"2018-11-23T10:31:49","Actor":"leastprivilege","Number":"117","RawContent":null,"Title":"Update identityserver.md","State":"closed","Body":"significant whitespace","Url":"https://github.com/dotnet/foundation/pull/117","RelatedDescription":"Closed or merged PR \"Update identityserver.md\" (#117)"},{"Id":"379731798","IsPullRequest":true,"CreatedAt":"2018-11-13T04:22:32","Actor":"leastprivilege","Number":"114","RawContent":null,"Title":"Update identityserver.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/114","RelatedDescription":"Closed or merged PR \"Update identityserver.md\" (#114)"},{"Id":"379777451","IsPullRequest":true,"CreatedAt":"2018-11-13T04:21:35","Actor":"scottbrady91","Number":"116","RawContent":null,"Title":"Update to IdentityManager project","State":"closed","Body":"My employer and I have recently taken over the IdentityManager project from Dom & Brock. I've updated the IdentityManager page to reflect this and the newer version of the core repo.","Url":"https://github.com/dotnet/foundation/pull/116","RelatedDescription":"Closed or merged PR \"Update to IdentityManager project\" (#116)"},{"Id":"379733880","IsPullRequest":true,"CreatedAt":"2018-11-13T04:20:23","Actor":"leastprivilege","Number":"115","RawContent":null,"Title":"Create identitymodel.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/115","RelatedDescription":"Closed or merged PR \"Create identitymodel.md\" (#115)"},{"Id":"371941750","IsPullRequest":true,"CreatedAt":"2018-11-01T16:20:07","Actor":"SeanKilleen","Number":"113","RawContent":null,"Title":"Update logo for couchbase-lite in projects.json","State":"closed","Body":"Uses a working link to the logo.\r\n\r\nResolves https://github.com/dotnet/dotnetfoundation-website/issues/65\r\n\r\nFix can be verified by copying/pasting the URL into a browser.","Url":"https://github.com/dotnet/foundation/pull/113","RelatedDescription":"Closed or merged PR \"Update logo for couchbase-lite in projects.json\" (#113)"}],"ResultType":"GitHubIssue"},"CoreCLR-Issues":{"Issues":[{"Id":"435475689","IsPullRequest":false,"CreatedAt":"2019-04-21T04:56:57","Actor":"tn-5","Number":"24146","RawContent":null,"Title":"macOS Startup System.ComponentModel.Win32Exception (13): Permission denied ","State":"open","Body":"With the latest nightly build of netcore 3 (3.0.100-preview5-011505) it is not possible to run a net core application on macos, it give an exception on startup:\r\nSystem.ComponentModel.Win32Exception (13): Permission denied\r\n   at System.Diagnostics.Process.ForkAndExecProcess(String filename, String[] argv, String[] envp, String cwd, Boolean redirectStdin, Boolean redirectStdout, Boolean redirectStderr, Boolean setCredentials, UInt32 userId, UInt32 groupId, UInt32[] groups, Int32& stdinFd, Int32& stdoutFd, Int32& stderrFd, Boolean usesTerminal, Boolean throwOnNoExec)\r\n   at System.Diagnostics.Process.StartCore(ProcessStartInfo startInfo)\r\n   at System.Diagnostics.Process.Start()\r\n   at Microsoft.DotNet.Cli.Utils.Command.Execute()\r\n   at Microsoft.DotNet.Tools.Run.RunCommand.Execute()\r\n   at Microsoft.DotNet.Tools.Run.RunCommand.Run(String[] args)\r\n   at Microsoft.DotNet.Cli.Program.ProcessArgs(String[] args, ITelemetry telemetryClient)\r\n   at Microsoft.DotNet.Cli.Program.Main(String[] args)","Url":"https://github.com/dotnet/coreclr/issues/24146","RelatedDescription":"Open issue \"macOS Startup System.ComponentModel.Win32Exception (13): Permission denied \" (#24146)"},{"Id":"435475444","IsPullRequest":true,"CreatedAt":"2019-04-21T04:51:56","Actor":"sdmaclea","Number":"24145","RawContent":null,"Title":"Missing ARM64 bits","State":"open","Body":"Stumble across some missing arm64 code in the runtime....","Url":"https://github.com/dotnet/coreclr/pull/24145","RelatedDescription":"Open PR \"Missing ARM64 bits\" (#24145)"},{"Id":"435337741","IsPullRequest":false,"CreatedAt":"2019-04-21T03:41:59","Actor":"ygc369","Number":"24130","RawContent":null,"Title":"Question：Are there any experimental projects about reference counting instead of GC?","State":"closed","Body":"There's Snowflake project about manual memory management, but are there any experimental projects about reference counting instead of GC?","Url":"https://github.com/dotnet/coreclr/issues/24130","RelatedDescription":"Closed issue \"Question：Are there any experimental projects about reference counting instead of GC?\" (#24130)"},{"Id":"435264032","IsPullRequest":true,"CreatedAt":"2019-04-21T03:31:53","Actor":"dotnet-maestro[bot]","Number":"24120","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-optimization","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-optimization\r\n- **Build**: 20190419.4\r\n- **Date Produced**: 4/19/2019 5:59 PM\r\n- **Commit**: 262f4c4cfae446577e19e7c79b43ad46ba456e56\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **optimization.IBC.CoreCLR** -> 99.99.99-master-20190419.4\r\n  - **optimization.PGO.CoreCLR** -> 99.99.99-master-20190419.4\r\n\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-optimization\r\n- **Build**: 20190420.1\r\n- **Date Produced**: 4/20/2019 10:53 AM\r\n- **Commit**: 262f4c4cfae446577e19e7c79b43ad46ba456e56\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **optimization.IBC.CoreCLR** -> 99.99.99-master-20190420.1\r\n  - **optimization.PGO.CoreCLR** -> 99.99.99-master-20190420.1\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/24120","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dnceng/internal/dotnet-optimization\" (#24120)"},{"Id":"435459370","IsPullRequest":false,"CreatedAt":"2019-04-21T03:29:31","Actor":"ygc369","Number":"24144","RawContent":null,"Title":"What's the status of .Net Native project?","State":"closed","Body":"Has it been stopped? I have not heard of it for a long time.","Url":"https://github.com/dotnet/coreclr/issues/24144","RelatedDescription":"Closed issue \"What's the status of .Net Native project?\" (#24144)"},{"Id":"435393690","IsPullRequest":true,"CreatedAt":"2019-04-20T23:31:20","Actor":"dotnet-maestro[bot]","Number":"24141","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190419.11\r\n- **Date Produced**: 4/20/2019 8:19 AM\r\n- **Commit**: c608ddaa2a024dde2510f3c1122c89ba07b4325d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.Platforms** -> 3.0.0-preview5.19219.11\r\n  - **Microsoft.Private.CoreFx.NETCoreApp** -> 4.6.0-preview5.19219.11\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/24141","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#24141)"},{"Id":"435321239","IsPullRequest":true,"CreatedAt":"2019-04-20T20:18:55","Actor":"cshung","Number":"24124","RawContent":null,"Title":"Tighten GC mode assertion for EventPipe::Enable()","State":"closed","Body":"According to the [documentation](https://github.com/dotnet/coreclr/blob/0c88c2e67260ddcb1d400eb6adda19de627998f5/Documentation/mscorlib.md#calling-from-managed-to-native-code), QCALL involves a proper PInvoke transition frame, which means unless explicitly switched, the native code paths are in preemptive mode. That gives us an opportunity to tighten the asserts. Tightening the assert allows us to catch current bugs, prevent future regressions and better (live) document what the mode is supposed to be.\r\n\r\nAs far as I understand, `EventPipe::Enable()` could happen only if it is triggered in managed code through QCALL or from IPC (which is purely native code), therefore we can assert native code that is used only for `EventPipe::Enable()` has to be in preemptive mode. This analysis forms the basis of this PR, so if this is incorrect, feel free to comment on this analysis.\r\n\r\nI proved (though tedious manual static code analysis) that the functions I changed are called only in the `EventPipe::Enable()`. Feel free to comment if you found the code I changed could be called by other code-path, because if that's the case, my assumption might be wrong. It might not capture all calls that are involved only in `EventPipe::Enable()`, so feel free to point those out as well.\r\n\r\nFor calls that are used in `EventPipe::Write()` cannot be tightened because we knew it might be called directly (through the code generator) in random places in the runtime where it might already be in cooperative mode (I was able to prove in some case `EventPipe::Write()` is indeed called by thread in cooperative mode. (Those calls should be scrutinized for their potential to block GC). ","Url":"https://github.com/dotnet/coreclr/pull/24124","RelatedDescription":"Closed or merged PR \"Tighten GC mode assertion for EventPipe::Enable()\" (#24124)"},{"Id":"435394115","IsPullRequest":true,"CreatedAt":"2019-04-20T20:15:50","Actor":"dotnet-maestro[bot]","Number":"24142","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190420.01\r\n- **Date Produced**: 4/20/2019 10:12 AM\r\n- **Commit**: b9a720984fa4d6454d1c66ae765bc1e34cb1d206\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview5-27620-01\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/24142","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#24142)"},{"Id":"435405842","IsPullRequest":true,"CreatedAt":"2019-04-20T14:34:13","Actor":"MichalStrehovsky","Number":"24143","RawContent":null,"Title":"Move NativeLibrary to the shared partition","State":"open","Body":"I'm taking the LibraryNameVariation helper from System.Runtime.Loader for the ride as well because it's a general purpose probing logic that is useful in a managed implementation of NativeLibrary.","Url":"https://github.com/dotnet/coreclr/pull/24143","RelatedDescription":"Open PR \"Move NativeLibrary to the shared partition\" (#24143)"},{"Id":"435379123","IsPullRequest":false,"CreatedAt":"2019-04-20T09:53:52","Actor":"AndreasTruetschel","Number":"24140","RawContent":null,"Title":"CLR crashes when unloading assembly","State":"open","Body":"Trying to unload an assembly loaded via a custom AssemblyLoadContext crashes the CLR with an error message print: `Internal CLR error (0x80131506)`\r\nThis is since the upgrade to the latest .Net Core SDK (3 preview 4).  \r\n\r\nA sample project where this occurs can be found [here](https://github.com/AI4E/AI4E.AspNetCore.Components.Extensions/tree/master/samples/Routing.ModularRouterSample/Routing.ModularRouterSample).\r\n\r\nThe console output looks like this:  \r\n![grafik](https://user-images.githubusercontent.com/12112026/56455766-df8cc400-6362-11e9-83c6-6076215f00c9.png)\r\n","Url":"https://github.com/dotnet/coreclr/issues/24140","RelatedDescription":"Open issue \"CLR crashes when unloading assembly\" (#24140)"},{"Id":"435341218","IsPullRequest":true,"CreatedAt":"2019-04-20T08:49:31","Actor":"sandreenko","Number":"24131","RawContent":null,"Title":"Add a repro test for #24114.","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/24131","RelatedDescription":"Closed or merged PR \"Add a repro test for #24114.\" (#24131)"},{"Id":"435366588","IsPullRequest":true,"CreatedAt":"2019-04-20T07:28:15","Actor":"mjsabby","Number":"24139","RawContent":null,"Title":"[WIP] Track debug info for DynamicMethods in Profiler API","State":"open","Body":"Looking to fix https://github.com/dotnet/coreclr/issues/21731.\r\n\r\nThis Draft PR is incomplete. I'm submitting it so I can see any build/test errors. Debugging locally it gets the desired behavior of generating & storing debug info for dynamic methods.\r\n\r\nIL Stubs were not having debug info generated by the JIT, but LCG Methods were. However, in both cases the debug info was not being stored and tracked in the DebugInfoStore.\r\n\r\nI'm not sure how much time this will add, but doesn't seem like a lot. In any case if that becomes an issue we can put this behind `BEGIN_PIN_PROFILER(CORProfilerTrackJITInfo());`","Url":"https://github.com/dotnet/coreclr/pull/24139","RelatedDescription":"Open PR \"[WIP] Track debug info for DynamicMethods in Profiler API\" (#24139)"},{"Id":"435361648","IsPullRequest":true,"CreatedAt":"2019-04-20T06:12:46","Actor":"sdmaclea","Number":"24138","RawContent":null,"Title":"WIP Remove RuntimeAssembly.CreateAssemblyName","State":"open","Body":"Fixes #24135\r\n\r\nCreateAssemblyName was not compatible with AssemblyLoadContext isolation.\r\n\r\nAssembly.Load(string)\r\nAssembly.LoadWithPartialName(string)\r\nActivator.CreateInstance(...)","Url":"https://github.com/dotnet/coreclr/pull/24138","RelatedDescription":"Open PR \"WIP Remove RuntimeAssembly.CreateAssemblyName\" (#24138)"},{"Id":"435361314","IsPullRequest":true,"CreatedAt":"2019-04-20T06:07:43","Actor":"sdmaclea","Number":"24137","RawContent":null,"Title":"Fix Timezone whitespace","State":"closed","Body":"Fixes #24136 ","Url":"https://github.com/dotnet/coreclr/pull/24137","RelatedDescription":"Closed or merged PR \"Fix Timezone whitespace\" (#24137)"},{"Id":"435361092","IsPullRequest":false,"CreatedAt":"2019-04-20T06:07:43","Actor":"sdmaclea","Number":"24136","RawContent":null,"Title":"Malformed line endings src/System.Private.CoreLib/shared/System/TimeZoneInfo*","State":"closed","Body":"@stephentoub @safern Looks like #23878 & `f221445` introduced mixed line endings into \r\n\r\nsrc/System.Private.CoreLib/shared/System/TimeZoneInfo.Win32.cs\r\nsrc/System.Private.CoreLib/shared/System/TimeZoneInfo.cs\r\n","Url":"https://github.com/dotnet/coreclr/issues/24136","RelatedDescription":"Closed issue \"Malformed line endings src/System.Private.CoreLib/shared/System/TimeZoneInfo*\" (#24136)"},{"Id":"435347572","IsPullRequest":true,"CreatedAt":"2019-04-20T05:11:40","Actor":"AaronRobinsonMSFT","Number":"24133","RawContent":null,"Title":"The thread triggering finalizer shutdown events should be in an alert…","State":"closed","Body":"…able state.\r\n\r\nFixes #24125\r\n\r\ncc @jeffschwMSFT @elinor-fung","Url":"https://github.com/dotnet/coreclr/pull/24133","RelatedDescription":"Closed or merged PR \"The thread triggering finalizer shutdown events should be in an alert…\" (#24133)"},{"Id":"435324021","IsPullRequest":false,"CreatedAt":"2019-04-20T05:11:40","Actor":"miguep","Number":"24125","RawContent":null,"Title":"Deadlock in process shutdown during RCW cleanup","State":"closed","Body":"We have just recently started to run into this deadlock in coreclr_t::shutdown.\r\n\r\nthis is what the main thread looks like:\r\n>\tntdll.dll!_KiFastSystemCallRet@0()\tUnknown\r\n \tntdll.dll!_ZwWaitForSingleObject@12()\tUnknown\r\n \tKernelBase.dll!WaitForSingleObjectEx(hHandle, dwMilliseconds, bAlertable)\tC\r\n \thostpolicy.dll!coreclr_t::shutdown()\tC++\r\n \thostpolicy.dll!run_as_app()\tC++\r\n \thostpolicy.dll!_corehost_main()\tC++\r\n \thostfxr.dll!fx_muxer_t::read_config_and_execute()\tC++\r\n \thostfxr.dll!fx_muxer_t::handle_exec_host_command()\tC++\r\n \thostfxr.dll!fx_muxer_t::execute()\tC++\r\n \thostfxr.dll!_hostfxr_main_startupinfo()\tC++\r\n \tQualityVaultFrontEnd.exe!exe_start()\tC++\r\n \tQualityVaultFrontEnd.exe!_wmain()\tC++\r\n \t[Inline Frame] QualityVaultFrontEnd.exe!invoke_main()\tC++\r\n \tQualityVaultFrontEnd.exe!__scrt_common_main_seh()\tC++\r\n \tkernel32.dll!BaseThreadInitThunk(RunProcessInit, StartAddress, Argument)\tC\r\n \tntdll.dll!__RtlUserThreadStart(StartAddress, Argument)\tC\r\n \tntdll.dll!_RtlUserThreadStart(StartAddress, Argument)\tC\r\n\r\n\r\nThis only seems to happen when running the master (3.0.100-preview5-011487) bits, the latest release ( 3.0.100-preview4-011228) bits do not repro this issue.","Url":"https://github.com/dotnet/coreclr/issues/24125","RelatedDescription":"Closed issue \"Deadlock in process shutdown during RCW cleanup\" (#24125)"},{"Id":"435356825","IsPullRequest":false,"CreatedAt":"2019-04-20T04:50:09","Actor":"sdmaclea","Number":"24135","RawContent":null,"Title":"Assembly.Load(string assemblyName) not using StackMark in all cases","State":"open","Body":"`Assembly.Load(string assemblyName)` not using StackMark in all cases\r\n\r\nRoot cause seems to be `CreateAssemblyName` returns an assembly w/o using the callers context.\r\nhttps://github.com/dotnet/coreclr/blob/58d9cf157f54e8fd61eaaf56b3f8045075d171cd/src/System.Private.CoreLib/src/System/Reflection/RuntimeAssembly.cs#L321-L323\r\n\r\n`Assembly.LoadWithPartialName(string partialName)` not using StackMark ever.","Url":"https://github.com/dotnet/coreclr/issues/24135","RelatedDescription":"Open issue \"Assembly.Load(string assemblyName) not using StackMark in all cases\" (#24135)"},{"Id":"435298103","IsPullRequest":true,"CreatedAt":"2019-04-20T03:33:47","Actor":"tannergooding","Number":"24123","RawContent":null,"Title":"Pulling in CoreFX changes and fixing up Sse2.StoreLow to be Sse2.StoreScalar","State":"closed","Body":"This resolves dotnet/corefx#36746.\r\n\r\nThis is blocked on https://github.com/dotnet/coreclr/pull/24058 being merged first, but I'm getting it up so it can be reviewed/approved for merging once it is unblocked.","Url":"https://github.com/dotnet/coreclr/pull/24123","RelatedDescription":"Closed or merged PR \"Pulling in CoreFX changes and fixing up Sse2.StoreLow to be Sse2.StoreScalar\" (#24123)"},{"Id":"435350048","IsPullRequest":false,"CreatedAt":"2019-04-20T03:08:49","Actor":"ygc369","Number":"24134","RawContent":null,"Title":"Proposal: inlined arrays (need CLR support)","State":"open","Body":"see this: https://github.com/dotnet/csharplang/issues/2455\r\nBut this feature need CLR support, how does CLR team consider it?","Url":"https://github.com/dotnet/coreclr/issues/24134","RelatedDescription":"Open issue \"Proposal: inlined arrays (need CLR support)\" (#24134)"},{"Id":"435346083","IsPullRequest":false,"CreatedAt":"2019-04-20T02:15:13","Actor":"mjsabby","Number":"24132","RawContent":null,"Title":"Medium-weight GC profiling option in Profiler API","State":"open","Body":"Creating an issue based on the discussion in https://github.com/dotnet/coreclr/pull/22866\r\n\r\nThere are currently two profiling modes checked in to .NET Core:\r\n\r\n(1) Full GC Profiling - Expensive but exhaustive\r\n(2) Basic GC Profiling - Very efficient but somewhat lacking for some types of analysis\r\n\r\nThis issue is there to introduce a third mode which is somewhere in between the Full and Basic.\r\n\r\nThe goal of this middle ground mode is to provide everything basic profiling provides and the most important aspect of the full profiling capability which is the ability to track objects after a GC moves them.\r\n\r\nIn fact, coupled with an additional Profiler API (that is not yet proposed), the Full GC profiling capability can be emulated by the profiler if it is so chooses at the cost of additional complexity on the profiler side.\r\n\r\nSummarily, this mode will enable the `MovedReferences2` profiler callback to be called for compacting garbage collections, but skip `SurvivedReferences2` for non-compatcing garbage collections.","Url":"https://github.com/dotnet/coreclr/issues/24132","RelatedDescription":"Open issue \"Medium-weight GC profiling option in Profiler API\" (#24132)"},{"Id":"435325203","IsPullRequest":true,"CreatedAt":"2019-04-20T01:05:59","Actor":"sandreenko","Number":"24126","RawContent":null,"Title":"Fix bug in impGetStructAddr.","State":"closed","Body":"Fixes https://github.com/dotnet/coreclr/issues/24114.\r\n\r\nThanks @Kaliumhexacyanoferrat and @jkotas for reporting/analyzing this.\r\n\r\nThe bug was introduced by my change https://github.com/dotnet/coreclr/pull/22963/commits/b2f03010df8aad0e0197b5436d8c29615e993ab8. I have not found any similar places where we can hit it.\r\n\r\nWhen I merge this PR I will drop the repro test, wait for several hours and merge it as a separate PR to avoid breaks in other active PRs due to bug in ADO testing that use different head commits for \"build\" and \"test\" jobs.","Url":"https://github.com/dotnet/coreclr/pull/24126","RelatedDescription":"Closed or merged PR \"Fix bug in impGetStructAddr.\" (#24126)"},{"Id":"435328928","IsPullRequest":true,"CreatedAt":"2019-04-20T00:15:03","Actor":"sandreenko","Number":"24127","RawContent":null,"Title":"Fix Arm32 Ubuntu CoreFX script.","State":"closed","Body":"The script was changed in https://github.com/dotnet/corefx/pull/36926.","Url":"https://github.com/dotnet/coreclr/pull/24127","RelatedDescription":"Closed or merged PR \"Fix Arm32 Ubuntu CoreFX script.\" (#24127)"},{"Id":"435335485","IsPullRequest":true,"CreatedAt":"2019-04-20T00:07:55","Actor":"RussKeldorph","Number":"24129","RawContent":null,"Title":"Helix telemetry fixes","State":"open","Body":"- Enable telemetry unconditionally\r\n- Set the `_BuildConfig` variable in `xplat-job.yml` so it is available to\r\n  both product and test builds.\r\n- Set the Helix `Type` parameter explicitly to distinguish product and test builds\r\n- Set the Helix `Source` parameter for builds as well as test jobs","Url":"https://github.com/dotnet/coreclr/pull/24129","RelatedDescription":"Open PR \"Helix telemetry fixes\" (#24129)"},{"Id":"435333804","IsPullRequest":false,"CreatedAt":"2019-04-19T23:54:34","Actor":"tommcdon","Number":"24128","RawContent":null,"Title":"Create ICorDebugDelegateObjectValue implementation for delegates","State":"open","Body":"Create and implement the following:\r\n\r\n```C++\r\nuuid(3AF70CC7-6047-47F6-A5C5-090A1A622638)\r\ninterface ICorDebugDelegateObjectValue : IUnknown\r\n{\r\n    HRESULT GetTarget([out] ICorDebugReferenceValue **ppObject);\r\n    HRESULT GetFunction([out] ICorDebugFunction **ppFunction);\r\n}\r\n```","Url":"https://github.com/dotnet/coreclr/issues/24128","RelatedDescription":"Open issue \"Create ICorDebugDelegateObjectValue implementation for delegates\" (#24128)"},{"Id":"435243076","IsPullRequest":true,"CreatedAt":"2019-04-19T23:13:58","Actor":"dotnet-maestro-bot","Number":"24118","RawContent":null,"Title":"[automated] Merge branch 'master' => 'release/3.0'","State":"closed","Body":"I detected changes in the master branch which have not been merged yet to release/3.0. I'm a robot and am configured to help you automatically keep release/3.0 up to date, so I've opened this PR.\r\n\r\nThis PR merges commits made on master by the following committers:\n\n* @RussKeldorph\n* @jkotas\n* @AaronRobinsonMSFT\n* @MichalStrehovsky\n* @stephentoub\n* @tannergooding\n* @BruceForstall\n* @CarolEidt\n* @fadimounir\n* @jkoritzinsky\n* @jorive\n* @mikem8361\n* @janvorli\n* @safern\n* @AndyAyersMS\n* @cshung\n* @briansull\n* @sywhang\n* @erozenfeld\n* @sandreenko\n* @tarekgh\n* @echesakovMSFT\n* @sdmaclea\n* @franksinankaya\n* @GrabYourPitchforks\n* @sergiy-k\n* @VSadov\n* @danmosemsft\n* @buyaa-n\n* @hoyosjs\n* @krwq\n* @luhenry\n* @noahfalk\n* @adityamandaleeka\n* @wtgodbe\n* @mjsabby\r\n\r\n## Instructions for merging from UI\r\n\r\nThis PR will not be auto-merged. When pull request checks pass, complete this PR by creating a merge commit, *not* a squash or rebase commit.\r\n\r\n<img alt=\"merge button instructions\" src=\"https://i.imgur.com/GepcNJV.png\" width=\"300\" />\r\n\r\nIf this repo does not allow creating merge commits from the GitHub UI, use command line instructions.\r\n\r\n## Instructions for merging via command line\r\n\r\nRun these commands to merge this pull request from the command line.\r\n\r\n``` sh\r\ngit fetch\r\ngit checkout master\r\ngit pull --ff-only\r\ngit checkout release/3.0\r\ngit pull --ff-only\r\ngit merge --no-ff master\r\n\r\n# If there are merge conflicts, resolve them and then run git merge --continue to complete the merge\r\n# Pushing the changes to the PR branch will re-trigger PR validation.\r\ngit push https://github.com/dotnet-maestro-bot/coreclr HEAD:merge/master-to-release/3.0\r\n```\r\n\r\n<details>\r\n<summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit push git@github.com:dotnet-maestro-bot/coreclr HEAD:merge/master-to-release/3.0\r\n```\r\n\r\n</details>\r\n\r\n\r\nAfter PR checks are complete push the branch\r\n```\r\ngit push\r\n```\r\n\r\n## Instructions for resolving conflicts\r\n\r\n:warning: If there are merge conflicts, you will need to resolve them manually before merging. You can do this [using GitHub][resolve-github] or using the [command line][resolve-cli].\r\n\r\n[resolve-github]: https://help.github.com/articles/resolving-a-merge-conflict-on-github/\r\n[resolve-cli]: https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/\r\n\r\n## Instructions for updating this pull request\r\n\r\nContributors to this repo have permission update this pull request by pushing to the branch 'merge/master-to-release/3.0'. This can be done to resolve conflicts or make other changes to this pull request before it is merged.\r\n\r\n```\r\ngit checkout -b merge/master-to-release/3.0 release/3.0\r\ngit pull https://github.com/dotnet-maestro-bot/coreclr merge/master-to-release/3.0\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push https://github.com/dotnet-maestro-bot/coreclr merge/master-to-release/3.0\r\n```\r\n\r\n<details>\r\n    <summary>or if you are using SSH</summary>\r\n\r\n```\r\ngit checkout -b merge/master-to-release/3.0 release/3.0\r\ngit pull git@github.com:dotnet-maestro-bot/coreclr merge/master-to-release/3.0\r\n(make changes)\r\ngit commit -m \"Updated PR with my changes\"\r\ngit push git@github.com:dotnet-maestro-bot/coreclr merge/master-to-release/3.0\r\n```\r\n\r\n</details>\r\n\r\nContact .NET Core Engineering if you have questions or issues.\r\nAlso, if this PR was generated incorrectly, help us fix it. See https://github.com/dotnet/arcade/blob/master/scripts/GitHubMergeBranches.ps1.\r\n","Url":"https://github.com/dotnet/coreclr/pull/24118","RelatedDescription":"Closed or merged PR \"[automated] Merge branch 'master' => 'release/3.0'\" (#24118)"},{"Id":"435265487","IsPullRequest":true,"CreatedAt":"2019-04-19T21:17:19","Actor":"fadimounir","Number":"24121","RawContent":null,"Title":"Exclude failing tests on all platforms/architectures","State":"closed","Body":"#23941","Url":"https://github.com/dotnet/coreclr/pull/24121","RelatedDescription":"Closed or merged PR \"Exclude failing tests on all platforms/architectures\" (#24121)"},{"Id":"435255657","IsPullRequest":true,"CreatedAt":"2019-04-19T21:10:10","Actor":"fadimounir","Number":"24119","RawContent":null,"Title":"Fix project metadata in test","State":"closed","Body":"I copied the metadata from the ilproj file of a neighboring test (rvastatics1.ilproj).\r\nFixes #24106","Url":"https://github.com/dotnet/coreclr/pull/24119","RelatedDescription":"Closed or merged PR \"Fix project metadata in test\" (#24119)"},{"Id":"435267998","IsPullRequest":false,"CreatedAt":"2019-04-19T18:40:36","Actor":"fadimounir","Number":"24122","RawContent":null,"Title":"Update crossgen documentation with /r command","State":"open","Body":"Doc path: https://github.com/dotnet/coreclr/blob/master/Documentation/building/crossgen.md","Url":"https://github.com/dotnet/coreclr/issues/24122","RelatedDescription":"Open issue \"Update crossgen documentation with /r command\" (#24122)"},{"Id":"435180884","IsPullRequest":true,"CreatedAt":"2019-04-19T16:49:13","Actor":"RussKeldorph","Number":"24116","RawContent":null,"Title":"Remove commit triggered linux-arm ReadyToRun jobs","State":"closed","Body":"We don't have the capacity to run these on every commit.  We'll attempt to retain win-arm R2R jobs and IL-only linux-arm jobs.","Url":"https://github.com/dotnet/coreclr/pull/24116","RelatedDescription":"Closed or merged PR \"Remove commit triggered linux-arm ReadyToRun jobs\" (#24116)"}],"ResultType":"GitHubIssue"},"CLI-Issues":{"Issues":[{"Id":"435423340","IsPullRequest":false,"CreatedAt":"2019-04-20T17:52:00","Actor":"hamzahamidi","Number":"11219","RawContent":null,"Title":"Dotnet run works only as root","State":"open","Body":"## Steps to reproduce\r\nI was following the official dotnet tutorial https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/create . When I try to run the application ( dotnet run) I get this error:\r\n```\r\nprojects/dotnet-core-starter/dotnet-core-starter.csproj : error MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.\r\n\r\n```\r\nsudo dotnet run works as expected!\r\n\r\n## Expected  behavior\r\n\r\n\r\n## Actual behavior\r\n```\r\nprojects/dotnet-core-starter/dotnet-core-starter.csproj : error MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.\r\n\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.203\r\n Commit:    e5bab63eca\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  18.04\r\n OS Platform: Linux\r\n RID:         ubuntu.18.04-x64\r\n Base Path:   /usr/share/dotnet/sdk/2.2.203/\r\n\r\nHost (useful for support):\r\n  Version: 2.2.4\r\n  Commit:  f95848e524\r\n\r\n.NET Core SDKs installed:\r\n  2.2.203 [/usr/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.2.4 [/usr/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.4 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.2.4 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11219","RelatedDescription":"Open issue \"Dotnet run works only as root\" (#11219)"},{"Id":"435391479","IsPullRequest":true,"CreatedAt":"2019-04-20T12:49:04","Actor":"dotnet-maestro[bot]","Number":"11218","RawContent":null,"Title":"[master] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190419.1\r\n- **Date Produced**: 4/19/2019 12:47 PM\r\n- **Commit**: c01de3fd223affb9f861260f41ebcc12e473a9ad\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 1.0.2-beta5.19219.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11218","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/templating\" (#11218)"},{"Id":"435390837","IsPullRequest":true,"CreatedAt":"2019-04-20T12:42:16","Actor":"dotnet-maestro[bot]","Number":"11216","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190418.7\r\n- **Date Produced**: 4/19/2019 12:41 AM\r\n- **Commit**: 5e7ce5b394f3477bb0a485a4b761b7742e95be37\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19218.7\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11216","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#11216)"},{"Id":"435390877","IsPullRequest":true,"CreatedAt":"2019-04-20T12:02:25","Actor":"dotnet-maestro[bot]","Number":"11217","RawContent":null,"Title":"[master] Update dependencies from dotnet/sdk","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190419.11\r\n- **Date Produced**: 4/20/2019 3:55 AM\r\n- **Commit**: e00479998c70a01e9e4a11d3e2aed5e0f5187c86\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview5.19219.11\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11217","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/sdk\" (#11217)"},{"Id":"435154160","IsPullRequest":true,"CreatedAt":"2019-04-20T02:31:34","Actor":"dotnet-bot","Number":"11200","RawContent":null,"Title":"Merge release/3.0.1xx to master","State":"closed","Body":"\nThis is an automatically generated pull request from release/3.0.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/11200","RelatedDescription":"Closed or merged PR \"Merge release/3.0.1xx to master\" (#11200)"},{"Id":"435327403","IsPullRequest":true,"CreatedAt":"2019-04-20T02:31:30","Actor":"wli3","Number":"11215","RawContent":null,"Title":"Merge release/3.0.1xx to master 0419","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/11215","RelatedDescription":"Closed or merged PR \"Merge release/3.0.1xx to master 0419\" (#11215)"},{"Id":"435320623","IsPullRequest":false,"CreatedAt":"2019-04-19T22:24:07","Actor":"dagood","Number":"11214","RawContent":null,"Title":"Sentinel and cache files not removed when uninstalling .NET Core SDK","State":"open","Body":"@scottaddie commented on [Fri Apr 19 2019](https://github.com/dotnet/core-setup/issues/5946)\n\n## Steps to reproduce\r\n1. Uninstall the .NET Core SDK via Win10's Control Panel:\r\n\r\n![image](https://user-images.githubusercontent.com/10702007/56444142-2a540080-62bd-11e9-8cf6-d151044d78b8.png)\r\n\r\n2. Navigate to the _%USERPROFILE%/.dotnet_ directory. Notice that _sentinel_ and _*.dotnetUserLevelCache_ files are left behind. The following screenshot shows the files are left behind after uninstalling .NET Core SDK 2.2.104:\r\n\r\n![image](https://user-images.githubusercontent.com/10702007/56444039-b3b70300-62bc-11e9-937b-727badeaf062.png)\r\n\r\n## Expected  behavior\r\nThe version-specific files depicted in the screenshot above should be deleted.\r\n\r\n## Actual behavior\r\nThe version-specific files depicted in the screenshot above aren't deleted.\r\n\r\n## Environment data\r\nWin10 v1809\n\n---\n\n@dagood commented on [Fri Apr 19 2019](https://github.com/dotnet/core-setup/issues/5946#issuecomment-485028320)\n\nThe SDK installer is created in https://github.com/dotnet/core-sdk, but these files look to me like they're created during SDK usage (or first run) rather than placed directly by the installer. Moving to https://github.com/dotnet/cli with that in mind.\n\n","Url":"https://github.com/dotnet/cli/issues/11214","RelatedDescription":"Open issue \"Sentinel and cache files not removed when uninstalling .NET Core SDK\" (#11214)"},{"Id":"435261169","IsPullRequest":false,"CreatedAt":"2019-04-19T21:49:25","Actor":"spboyer","Number":"11211","RawContent":null,"Title":"Cross platform issue : dotnet pack fails to add item when parent folder name equals file name","State":"closed","Body":"## Steps to reproduce\r\nAdd a folder called `xpath.js` containing a file called `xpath.js` \r\n\r\ni.e - `npm_modules\\xpath.js\\xpath.js`\r\n\r\nrun `dotnet pack -c Release`\r\n\r\n** csproj file snippet **\r\n\r\n```xml\r\n  <ItemGroup>\r\n    <None Include=\"node_modules\\*\\**\" CopyToOutputDirectory=\"PreserveNewest\" CopyToPublishDirectory=\"PreserveNewest\"/>\r\n    <None Include=\"scripts\\**\\*\" CopyToOutputDirectory=\"PreserveNewest\" CopyToPublishDirectory=\"PreserveNewest\" />\r\n  </ItemGroup>\r\n```\r\n\r\n## Expected  behavior\r\n\r\nSuccessfully created package '/.../mypackage.nupkg'.\r\n\r\n## Actual behavior\r\n\r\n```console\r\n   \r\ndotnet pack --configuration Release    \r\n\r\nMicrosoft (R) Build Engine version 15.9.20+g88f5fadfbe for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n/usr/local/share/dotnet/sdk/2.2.100/Sdks/NuGet.Build.Tasks.Pack/build/NuGet.Build.Tasks.Pack.targets(202,5): \r\nerror NU5118: File '/.../netcoreapp2.2/publish/node_modules/xpath.js/xpath.js'\r\nis not added because the package already contains file 'tools/netcoreapp2.2/any/node_modules/xpath.js' \r\n[/Users/shayneboyer/github/spboyer/dotnet-azure/azure.csproj]\r\n\r\n```\r\n\r\n\r\n## Environment data\r\n\r\n```console\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    51868761f2\r\n\r\nRuntime Environment:\r\n OS Name:     Mac OS X\r\n OS Version:  10.14\r\n OS Platform: Darwin\r\n RID:         osx.10.14-x64\r\n Base Path:   /usr/local/share/dotnet/sdk/2.2.100/\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11211","RelatedDescription":"Closed issue \"Cross platform issue : dotnet pack fails to add item when parent folder name equals file name\" (#11211)"},{"Id":"435304826","IsPullRequest":false,"CreatedAt":"2019-04-19T21:06:41","Actor":"vitek-karas","Number":"11213","RawContent":null,"Title":"Add command line usage help for the new --roll-forward option","State":"open","Body":"The new roll forward feature introduces a new command line option `--roll-forward`. It's implemented by the host, but the command line help is sometimes shown from the code in CLI repo.\r\n\r\nThe feature is added in dotnet/core-setup#5891\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11213","RelatedDescription":"Open issue \"Add command line usage help for the new --roll-forward option\" (#11213)"},{"Id":"435272925","IsPullRequest":true,"CreatedAt":"2019-04-19T18:58:53","Actor":"dotnet-maestro[bot]","Number":"11212","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/sdk","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190419.3\r\n- **Date Produced**: 4/19/2019 6:58 PM\r\n- **Commit**: ffc244d4c158d20fff5fe562255e3061d8be4b82\r\n- **Branch**: refs/heads/release/3.0.1xx\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview4.19219.3\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11212","RelatedDescription":"Open PR \"[release/3.0.1xx] Update dependencies from dotnet/sdk\" (#11212)"},{"Id":"435177081","IsPullRequest":false,"CreatedAt":"2019-04-19T18:54:29","Actor":"tonycoelho","Number":"11205","RawContent":null,"Title":"dotnet Release Metadata index doesn't have the correct latest version for 3.0","State":"closed","Body":"The latest 3.0 release listed in the release metadata index json file located at the link below, 3.0.0-preview3-27503-5 (3/6), is not the latest release available, which is 3.0.0-preview4-27615-11 (4/18). Please update the index file to point to the correct latest release.\r\n\r\nhttps://dotnetcli.blob.core.windows.net/dotnet/release-metadata/releases-index.json\r\n```json\r\n{\r\n  \"releases-index\": [\r\n    {\r\n      \"channel-version\": \"3.0\",\r\n      \"latest-release\": \"3.0.0-preview3\",\r\n      \"latest-release-date\": \"2019-03-06\",\r\n      \"security\": false,\r\n      \"latest-runtime\": \"3.0.0-preview3-27503-5\",\r\n      \"latest-sdk\": \"3.0.100-preview3-010431\",\r\n      \"product\": \".NET Core\",\r\n      \"support-phase\": \"preview\",\r\n      \"eol-date\": null,\r\n      \"releases.json\": \"https://dotnetcli.blob.core.windows.net/dotnet/release-metadata/3.0/releases.json\"\r\n    }\r\n  ]\r\n}\r\n```\r\nhttps://dotnetcli.blob.core.windows.net/dotnet/release-metadata/3.0/releases.json\r\n```json\r\n{\r\n  \"channel-version\": \"3.0\",\r\n  \"latest-release\": \"3.0.0-preview4\",\r\n  \"latest-release-date\": \"2019-04-18\",\r\n  \"latest-runtime\": \"3.0.0-preview4-27615-11\",\r\n  \"latest-sdk\": \"3.0.100-preview4-011223\",\r\n  \"support-phase\": \"preview\",\r\n  \"eol-date\": null,\r\n  \"lifecycle-policy\": \"https://www.microsoft.com/net/support/policy\",\r\n  \"releases\": []\r\n}\r\n```\r\n@leecow @vivmishra ","Url":"https://github.com/dotnet/cli/issues/11205","RelatedDescription":"Closed issue \"dotnet Release Metadata index doesn't have the correct latest version for 3.0\" (#11205)"},{"Id":"435244411","IsPullRequest":true,"CreatedAt":"2019-04-19T17:11:59","Actor":"dotnet-maestro[bot]","Number":"11210","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/templating","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190419.2\r\n- **Date Produced**: 4/19/2019 5:11 PM\r\n- **Commit**: e854a58b469c2b4a660fc6e448657d1dd8e40ab9\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 1.0.2-beta5.19219.2\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11210","RelatedDescription":"Open PR \"[release/3.0.1xx] Update dependencies from dotnet/templating\" (#11210)"},{"Id":"435237584","IsPullRequest":false,"CreatedAt":"2019-04-19T16:47:48","Actor":"wli3","Number":"11209","RawContent":null,"Title":"Cannot find dotnet/clicommandlineparser in the feed","State":"open","Body":"https://github.com/dotnet/cli/pull/11204\r\n","Url":"https://github.com/dotnet/cli/issues/11209","RelatedDescription":"Open issue \"Cannot find dotnet/clicommandlineparser in the feed\" (#11209)"},{"Id":"435233542","IsPullRequest":true,"CreatedAt":"2019-04-19T16:32:25","Actor":"brettfo","Number":"11208","RawContent":null,"Title":"[WIP] update F# (2.2.3xx)","State":"open","Body":"Pending VS insertion","Url":"https://github.com/dotnet/cli/pull/11208","RelatedDescription":"Open PR \"[WIP] update F# (2.2.3xx)\" (#11208)"},{"Id":"435028507","IsPullRequest":true,"CreatedAt":"2019-04-19T16:31:02","Actor":"wli3","Number":"11193","RawContent":null,"Title":"Update stage 0 and adjust to s.t.json api","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/11193","RelatedDescription":"Closed or merged PR \"Update stage 0 and adjust to s.t.json api\" (#11193)"},{"Id":"435232834","IsPullRequest":true,"CreatedAt":"2019-04-19T16:29:50","Actor":"brettfo","Number":"11207","RawContent":null,"Title":"[WIP] update F# (2.1.7xx)","State":"open","Body":"Pending VS insertion","Url":"https://github.com/dotnet/cli/pull/11207","RelatedDescription":"Open PR \"[WIP] update F# (2.1.7xx)\" (#11207)"},{"Id":"435228468","IsPullRequest":false,"CreatedAt":"2019-04-19T16:14:41","Actor":"IgorXq","Number":"11206","RawContent":null,"Title":"Weird error MSB4236: The SDK 'Microsoft.NET.Sdk.Web' specified could not be found","State":"open","Body":"Cannot get rid of weird error\r\n\r\nerror MSB4236: The SDK 'Microsoft.NET.Sdk.Web' specified could not be found.\r\n\r\nWhen I build the project with CLI **dotnet build** whatever project I try to build (_all .csproj files refer to Sdk=\"Microsoft.NET.Sdk\" or Sdk=\"Microsoft.NET.Sdk.Web\" and it causes error as I understand_) it fails with error\r\n\r\nThough I was able to build and run these projects with Visual Studio 2017.\r\n\r\nHad to uninstall all related .Net stuff (all SDKs, .Net runtimes and VS2017 ) then reinstalled VS2019 Community from scratch. The issue is still the same - I am able to build and run the application with VS but can not build or run any of existing proejcts from CLI.\r\nIt still fails with mentioned error.\r\n\r\nIt is not obvious what version of SDK it complains for, I try to install consecutively all SDKs from Microsoft \"downloads\" page but nothing helped.\r\n\r\nCurrently\r\ndotnet --list-sdks\r\n\r\nproduces the output:\r\n\r\n> 2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n> 2.1.401 [C:\\Program Files\\dotnet\\sdk]\r\n> 2.1.402 [C:\\Program Files\\dotnet\\sdk]\r\n> 2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n> 2.1.503 [C:\\Program Files\\dotnet\\sdk]\r\n> 2.1.505 [C:\\Program Files\\dotnet\\sdk]\r\n> 2.2.100-preview2-009404 [C:\\Program Files\\dotnet\\sdk]\r\n> 2.2.100-preview3-009430 [C:\\Program Files\\dotnet\\sdk]\r\n> 2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n> 2.2.101 [C:\\Program Files\\dotnet\\sdk]\r\n> 2.2.102 [C:\\Program Files\\dotnet\\sdk]\r\n> 2.2.103 [C:\\Program Files\\dotnet\\sdk]\r\n> 2.2.104 [C:\\Program Files\\dotnet\\sdk]\r\n> 2.2.105 [C:\\Program Files\\dotnet\\sdk]\r\n> 2.2.106 [C:\\Program Files\\dotnet\\sdk]\r\n> 2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n> 2.2.203 [C:\\Program Files\\dotnet\\sdk]\r\n\r\nI have checked several related issues here but all of them have been closed and none of them proposes relevant solution.","Url":"https://github.com/dotnet/cli/issues/11206","RelatedDescription":"Open issue \"Weird error MSB4236: The SDK 'Microsoft.NET.Sdk.Web' specified could not be found\" (#11206)"},{"Id":"435156806","IsPullRequest":true,"CreatedAt":"2019-04-19T12:56:59","Actor":"dotnet-maestro[bot]","Number":"11203","RawContent":null,"Title":"[master] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190418.1\r\n- **Date Produced**: 4/18/2019 12:53 PM\r\n- **Commit**: c25748ad974957739a8ea6696087903bdb5f104b\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 1.0.2-beta5.19218.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11203","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/templating\" (#11203)"},{"Id":"435155165","IsPullRequest":true,"CreatedAt":"2019-04-19T12:45:34","Actor":"dotnet-maestro[bot]","Number":"11202","RawContent":null,"Title":"[master] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190418.15\r\n- **Date Produced**: 4/19/2019 1:10 AM\r\n- **Commit**: 7c52b29cb26c6d90439070dc8840d257306123d6\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview5.19218.15\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11202","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/sdk\" (#11202)"},{"Id":"435155059","IsPullRequest":true,"CreatedAt":"2019-04-19T12:45:11","Actor":"dotnet-maestro[bot]","Number":"11201","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190418.4\r\n- **Date Produced**: 4/18/2019 10:50 PM\r\n- **Commit**: 1d4c87ff798d7de521128e6c3d890055c2401e80\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19218.4\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11201","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#11201)"},{"Id":"435160454","IsPullRequest":true,"CreatedAt":"2019-04-19T12:25:01","Actor":"dotnet-maestro[bot]","Number":"11204","RawContent":null,"Title":"[master] Update dependencies from dotnet/clicommandlineparser","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/cliCommandLineParser\r\n- **Build**: 20190416.1\r\n- **Date Produced**: 4/17/2019 2:50 AM\r\n- **Commit**: f6ae8481aada66afabb3aa8006b86bbc310b10f1\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Cli.CommandLine** -> 1.0.0-preview.19216.1\r\n\r\n## From https://github.com/dotnet/cliCommandLineParser\r\n- **Build**: 20190416.1\r\n- **Date Produced**: 4/17/2019 2:50 AM\r\n- **Commit**: f6ae8481aada66afabb3aa8006b86bbc310b10f1\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Cli.CommandLine** -> 1.0.0-preview.19216.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11204","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/clicommandlineparser\" (#11204)"},{"Id":"435154146","IsPullRequest":true,"CreatedAt":"2019-04-19T12:01:07","Actor":"dotnet-bot","Number":"11199","RawContent":null,"Title":"Merge release/2.2.2xx to release/3.0.1xx","State":"open","Body":"\nThis is an automatically generated pull request from release/2.2.2xx into release/3.0.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.2xx-to-release/3.0.1xx\ngit reset --hard upstream/release/3.0.1xx\ngit merge upstream/release/2.2.2xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.2xx-to-release/3.0.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/11199","RelatedDescription":"Open PR \"Merge release/2.2.2xx to release/3.0.1xx\" (#11199)"},{"Id":"435154126","IsPullRequest":true,"CreatedAt":"2019-04-19T12:01:02","Actor":"dotnet-bot","Number":"11198","RawContent":null,"Title":"Merge release/2.1.6xx to release/2.2.2xx","State":"open","Body":"\nThis is an automatically generated pull request from release/2.1.6xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.6xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.1.6xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.6xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/11198","RelatedDescription":"Open PR \"Merge release/2.1.6xx to release/2.2.2xx\" (#11198)"},{"Id":"435036410","IsPullRequest":true,"CreatedAt":"2019-04-19T03:27:46","Actor":"heng-liu","Number":"11197","RawContent":null,"Title":"Insert NuGet Build 5.1.0-preview2.5965 into CLI master ","State":"open","Body":"Insert NuGet Build 5.1.0-rtm.5965 into master","Url":"https://github.com/dotnet/cli/pull/11197","RelatedDescription":"Open PR \"Insert NuGet Build 5.1.0-preview2.5965 into CLI master \" (#11197)"},{"Id":"435033064","IsPullRequest":true,"CreatedAt":"2019-04-19T03:06:28","Actor":"nugetlurker","Number":"11196","RawContent":null,"Title":"Insert NuGet Build 5.1.0-preview2.5965 into cli","State":"open","Body":"Insert NuGet Build 5.1.0-preview2.5965 into cli release/2.1.7xx branch","Url":"https://github.com/dotnet/cli/pull/11196","RelatedDescription":"Open PR \"Insert NuGet Build 5.1.0-preview2.5965 into cli\" (#11196)"},{"Id":"435033051","IsPullRequest":true,"CreatedAt":"2019-04-19T03:06:24","Actor":"nugetlurker","Number":"11195","RawContent":null,"Title":"Insert NuGet Build 5.1.0-preview2.5965 into cli","State":"open","Body":"Insert NuGet Build 5.1.0-preview2.5965 into cli release/2.2.3xx branch","Url":"https://github.com/dotnet/cli/pull/11195","RelatedDescription":"Open PR \"Insert NuGet Build 5.1.0-preview2.5965 into cli\" (#11195)"},{"Id":"435003468","IsPullRequest":true,"CreatedAt":"2019-04-19T02:46:41","Actor":"dotnet-bot","Number":"11192","RawContent":null,"Title":"Merge release/2.2.1xx to release/2.2.2xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.2.1xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.1xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.2.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.1xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/11192","RelatedDescription":"Closed or merged PR \"Merge release/2.2.1xx to release/2.2.2xx\" (#11192)"},{"Id":"435029130","IsPullRequest":false,"CreatedAt":"2019-04-19T02:41:47","Actor":"wli3","Number":"11194","RawContent":null,"Title":"DotnetCommand created in test should run on stage2","State":"open","Body":"not stage0. Or it should caught SDK + dotnet tools bug much earlier during insertion to CLI\r\n\r\nThis was the case before arcade ","Url":"https://github.com/dotnet/cli/issues/11194","RelatedDescription":"Open issue \"DotnetCommand created in test should run on stage2\" (#11194)"},{"Id":"434739767","IsPullRequest":true,"CreatedAt":"2019-04-18T12:45:45","Actor":"dotnet-maestro[bot]","Number":"11191","RawContent":null,"Title":"[master] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190417.1\r\n- **Date Produced**: 4/17/2019 1:05 PM\r\n- **Commit**: b415d1449b526338fba996d87c92a9de7f5286b8\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 1.0.2-beta5.19217.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11191","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/templating\" (#11191)"},{"Id":"434635336","IsPullRequest":false,"CreatedAt":"2019-04-18T07:48:45","Actor":"YunWeiaa","Number":"11190","RawContent":null,"Title":"Install global tool failed with error NETSDK1084: There is no application host available for the specified RuntimeIdentifier 'any'.","State":"open","Body":"## Steps to reproduce\r\nRequire: machine also install netcoreapp2.1 runtime since \"dotnetsay\" is targeting 2.1. This should not be required when netcoreapp3.0 is released and dotnetsay is updated\r\n1. Create empty directory\r\n2. not yet implemented Run dotnet new tool-manifest\r\n\ta. In the meantime copy the following and create file called dotnet-tools.json\r\n \r\n{\r\n\"version\": 1,\r\n\"isRoot\": true,\r\n\"tools\": {}\r\n}\r\n3. cd to the directory with manifest file\r\n4. run dotnet tool install dotnetsay\r\n## Expected  behavior\r\nRun dotnet tool install dotnetsay succeeded.\r\n\r\n## Actual behavior\r\nRun failed with error NETSDK1084: There is no application host available for the specified RuntimeIdentifier 'any'.\r\n![image](https://user-images.githubusercontent.com/33921754/56344804-e72c5b80-61f0-11e9-9813-28f48c941a6d.png)\r\n\r\n\r\n\r\n## Environment data\r\nD16.0/28803.202(16.0.2) + CLI/SDK: 3.0.100-preview5-011354\r\n`dotnet --info` output:\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview5-011354\r\n Commit:    3796a49205\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview5-011354\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview5-27617-04\r\n  Commit:  f28abecf15\r\n\r\n.NET Core SDKs installed:\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview5-011354 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview5-19217-04 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview5-27617-04 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview5-27617-04 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n```\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11190","RelatedDescription":"Open issue \"Install global tool failed with error NETSDK1084: There is no application host available for the specified RuntimeIdentifier 'any'.\" (#11190)"}],"ResultType":"GitHubIssue"},"Standard-Issues":{"Issues":[{"Id":"435454723","IsPullRequest":true,"CreatedAt":"2019-04-20T23:47:10","Actor":"terrajobst","Number":"1161","RawContent":null,"Title":"Add tool to automate generation of .NET Core baseline","State":"closed","Body":"This adds a batch file that generates the API surface of .NET Core that matters to .NET Standard. This script updates the contents of `src\\platforms\\netcoreapp`, stripped down to just the contents that matter for .NET Standard. It's meant to be manually diff'ed against the .NET Standard reference assemblies to propose API changes.\r\n\r\nWe should move the `GenNetStandard` tool to our engineering tools (Arcade) so that they are available to people that don't have access to the internal share. However, since the process is currently manual and only done by me, that seems acceptable. At least this this makes it reproducable by other people, which is better to what we have today.\r\n\r\nThe script assume that the caller has an enlistment for dotnet/corefx in a folder that is parallel to dotnet/standard and that is named corefx. In practice, this should hold for most people that work on this.\r\n\r\n/cc @stephentoub @wtgodbe ","Url":"https://github.com/dotnet/standard/pull/1161","RelatedDescription":"Closed or merged PR \"Add tool to automate generation of .NET Core baseline\" (#1161)"},{"Id":"435451508","IsPullRequest":true,"CreatedAt":"2019-04-20T22:59:52","Actor":"terrajobst","Number":"1160","RawContent":null,"Title":"Add EnumeratorCancellationAttribute","State":"open","Body":"This aligns .NET Standard with the [PR made in CoreFx](https://github.com/dotnet/corefx/pull/37064). For more details, see the [API discussion](https://github.com/dotnet/corefx/issues/37012).\r\n\r\nThis is a last minute firedrill for preview 5 (which will be used for demoing functionality during Build), which means I'll have to merge this by tomorrow morning. If there are any concerns, please let me know ASAP or we'll simply back it out after preview 5.","Url":"https://github.com/dotnet/standard/pull/1160","RelatedDescription":"Open PR \"Add EnumeratorCancellationAttribute\" (#1160)"},{"Id":"434735356","IsPullRequest":true,"CreatedAt":"2019-04-20T12:05:46","Actor":"dotnet-maestro[bot]","Number":"1157","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190418.1\r\n- **Date Produced**: 4/18/2019 8:10 AM\r\n- **Commit**: 46718d98c0fd03690a6a8c83da692a4a85a17902\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19218.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19218.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19218.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19218.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19218.1\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190418.4\r\n- **Date Produced**: 4/18/2019 10:50 PM\r\n- **Commit**: 1d4c87ff798d7de521128e6c3d890055c2401e80\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19218.4\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19218.4\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19218.4\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19218.4\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19218.4\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190418.7\r\n- **Date Produced**: 4/19/2019 12:41 AM\r\n- **Commit**: 5e7ce5b394f3477bb0a485a4b761b7742e95be37\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19218.7\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19218.7\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19218.7\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19218.7\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19218.7\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1157","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1157)"},{"Id":"434706475","IsPullRequest":false,"CreatedAt":"2019-04-19T23:24:03","Actor":"IKende","Number":"1156","RawContent":null,"Title":"NETStandard 2.0 GZipStream write date error in .Net Framework 4.6.1","State":"closed","Body":"code\r\n``` csharp\r\n public class GzipTest\r\n    {\r\n        public static byte[] Create()\r\n        {\r\n            using (System.IO.MemoryStream memory = new MemoryStream())\r\n            {\r\n                using (GZipStream gstream = new GZipStream(memory, CompressionMode.Compress))\r\n                {\r\n                    for (int i = 0; i < 100; i++)\r\n                    {\r\n                        byte[] data = System.Text.Encoding.UTF8.GetBytes(\"abcdefghkoksdsafsdfasdfksajfskdjfskdfjslfasdfsdfsdfalsdfsd\");\r\n                        gstream.Write(data, 0, data.Length);\r\n                    }\r\n                    gstream.Flush();\r\n                    return memory.ToArray();\r\n                }\r\n            }\r\n        }\r\n    }\r\n```\r\nusing .Net Framework 4.61 invoke this function ，debugging output information:\r\n```\r\nmemory.Length\r\n10\r\nmemory.ToArray()\r\n{byte[10]}\r\n    [0]: 31\r\n    [1]: 139\r\n    [2]: 8\r\n    [3]: 0\r\n    [4]: 0\r\n    [5]: 0\r\n    [6]: 0\r\n    [7]: 0\r\n    [8]: 4\r\n    [9]: 0\r\n```","Url":"https://github.com/dotnet/standard/issues/1156","RelatedDescription":"Closed issue \"NETStandard 2.0 GZipStream write date error in .Net Framework 4.6.1\" (#1156)"},{"Id":"434958748","IsPullRequest":true,"CreatedAt":"2019-04-19T19:46:08","Actor":"terrajobst","Number":"1158","RawContent":null,"Title":"Add Overrides","State":"closed","Body":"This doesn't change API surface but simply records the overrides made in .NET Core to minimize the diff.","Url":"https://github.com/dotnet/standard/pull/1158","RelatedDescription":"Closed or merged PR \"Add Overrides\" (#1158)"},{"Id":"432819882","IsPullRequest":false,"CreatedAt":"2019-04-19T19:00:10","Actor":"nimisha84","Number":"1142","RawContent":null,"Title":"Migration issues for a project moved from 4.7.2 Framework to .Net Standard 2.0","State":"closed","Body":"Hi Team,\r\nhttps://github.com/intuit/QuickBooks-V3-DotNET-SDK/\r\nWe have this class lib project which was on 4.6.1 and needed migration to .Net Standard so that it can support .Net Core too.\r\nSo, we migrated it to 4.7.2 first and then changed all .csproj files to support both 4.7.2 and Net Standard 2.0.\r\nWe are facing a really weird issue here. We have about 16 projects in this solution and using the new .csproj with targetframeworks 4.7.2 and Net Standard2.0, I see that release and debug dlls are generated for majority of projects in the .Net Standard but for some reason for about 4 of these projects, the target version of these dlls is always 4.7.2.  I have tried to compare the .csproj across all projects which build successfully to generate .Net Standard dlls vs those which do not generate. There isn't any diff at all. \r\n**Intuit.Ipp.Core for example builds successfully to generate .Net Standard dlls but Intuit.Ipp.Exception, Intuit.Ipp.Retry, Intuit.Ipp.Utility, Intuit.Ipp.OAuth2PlatformClient always build to generate 4.7.2 dlls.**\r\n\r\n**Another issue is that even though there are no circular ref, the project build order is not honored and you will see a lot of xcopy failures.**\r\n\r\nPlease help.!\r\n\r\n","Url":"https://github.com/dotnet/standard/issues/1142","RelatedDescription":"Closed issue \"Migration issues for a project moved from 4.7.2 Framework to .Net Standard 2.0\" (#1142)"},{"Id":"434539992","IsPullRequest":true,"CreatedAt":"2019-04-19T17:24:44","Actor":"terrajobst","Number":"1152","RawContent":null,"Title":"Implement IEquatable on Memory<T>","State":"closed","Body":"Based [on feedback](https://github.com/dotnet/standard/pull/909#discussion_r226390377) from @marek-safar.\r\n\r\nAlso see:\r\n* https://github.com/dotnet/corefx/issues/32905\r\n* https://github.com/dotnet/coreclr/pull/23586","Url":"https://github.com/dotnet/standard/pull/1152","RelatedDescription":"Closed or merged PR \"Implement IEquatable on Memory<T>\" (#1152)"},{"Id":"434545210","IsPullRequest":true,"CreatedAt":"2019-04-19T17:24:31","Actor":"terrajobst","Number":"1154","RawContent":null,"Title":"Fix Range.GetOffsetAndLength()","State":"closed","Body":"We ended up [agreeing](https://github.com/dotnet/corefx/issues/35508) that it's best to use tuples in cases like this.\r\n\r\n***Note**: This isn't a breaking change in .NET Standard, as `Range` hasn't shipped yet.*","Url":"https://github.com/dotnet/standard/pull/1154","RelatedDescription":"Closed or merged PR \"Fix Range.GetOffsetAndLength()\" (#1154)"},{"Id":"434544916","IsPullRequest":true,"CreatedAt":"2019-04-19T17:24:17","Actor":"terrajobst","Number":"1153","RawContent":null,"Title":"Respond to change in .NET Core to simplify Index and Range","State":"closed","Body":"We had recent [design change](https://github.com/dotnet/corefx/issues/35972) that simplifies `Index` and `Range`: instead of having to provide indexers that take `Index` and `Range`, the compiler [can lower](https://github.com/dotnet/csharplang/blob/master/proposals/index-range-changes.md) `Index` automatically and allows indexing via `Range` to be expressed via a method called `Slice`. Both make the feature more useful for interfaces where adding members isn't easily possible.\r\n\r\n***Note**: This isn't a breaking change in .NET Standard, as `Index` and `Range` haven't shipped yet.*","Url":"https://github.com/dotnet/standard/pull/1153","RelatedDescription":"Closed or merged PR \"Respond to change in .NET Core to simplify Index and Range\" (#1153)"},{"Id":"433533107","IsPullRequest":false,"CreatedAt":"2019-04-19T01:28:32","Actor":"rashadrivera","Number":"1147","RawContent":null,"Title":"SUGGESTION: Please Make AsnReader And AnsWriter Public","State":"closed","Body":"All,\r\n\r\nI have a real need for the internl classes that are being used in .NET Core 2.x.  I need a Asn reader and writer and I've recently discovered the [AsnReader and AsnWriter](https://github.com/dotnet/corefx/tree/master/src/Common/src/System/Security/Cryptography/Asn1Reader) as internal classes.  **Can these classes become public within .NET Standard?**  My products are built upon .NET Standard exclusively and not .NET Core or .NET.\r\n\r\nIn my case, I need them to create certificate revocation lists (CRL) and translate online certificate status protocol (OCSP) requests and responses.  I've used BouncyCastle as part of my solution, but I feel it is a poor implementation because of its cryptic design and the fact that I **must** give it unadulterated access to my private keys (which is a serious FIPS security concern).  \r\n\r\nMy goal is to use out-of-process signing like Azure.  But in order to do that, I need a solution that allows me to generate Asn data without third party tools like BouncyCastle.  ","Url":"https://github.com/dotnet/standard/issues/1147","RelatedDescription":"Closed issue \"SUGGESTION: Please Make AsnReader And AnsWriter Public\" (#1147)"},{"Id":"434963712","IsPullRequest":true,"CreatedAt":"2019-04-18T22:03:07","Actor":"terrajobst","Number":"1159","RawContent":null,"Title":"Remove finalizers","State":"closed","Body":"My understanding from earlier discussions with @jkotas and @marek-safar was that we should treat finalizers as an implementation detail of the platform that implements .NET Standard. Thus, I've changed my diffing to generally exclude all finalizers. This PR updates the reference assembly to match it.\r\n\r\n@jkotas / @marek-safar: I assume you're OK with that?","Url":"https://github.com/dotnet/standard/pull/1159","RelatedDescription":"Closed or merged PR \"Remove finalizers\" (#1159)"},{"Id":"434538136","IsPullRequest":true,"CreatedAt":"2019-04-18T01:38:21","Actor":"terrajobst","Number":"1151","RawContent":null,"Title":"Reorder members","State":"closed","Body":"***No API change***\r\n\r\nThis doesn't change the API surface but only reorders some members to make diffing between .NET Core and .NET Standard easier. For some reason, when we created .NET Standard, the members weren't consistently sorted. Since I don't trust myself, I've diffed the produced binary against the build produced by master to ensure no API surface changes were introduced.","Url":"https://github.com/dotnet/standard/pull/1151","RelatedDescription":"Closed or merged PR \"Reorder members\" (#1151)"},{"Id":"434245360","IsPullRequest":true,"CreatedAt":"2019-04-17T12:23:55","Actor":"dotnet-maestro[bot]","Number":"1150","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190417.1\r\n- **Date Produced**: 4/17/2019 7:32 AM\r\n- **Commit**: 4e21d52dabbb9f5705a90f097acb1465a0354c0d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19217.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19217.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19217.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19217.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19217.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1150","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1150)"},{"Id":"434067891","IsPullRequest":false,"CreatedAt":"2019-04-17T02:50:12","Actor":"yyjdelete","Number":"1149","RawContent":null,"Title":"Transitive dependency(PackageReference/ProjectReference)not working when app and libs has different targetFramework","State":"open","Body":"Also report as dotnet/sdk#3103, dotnet/core#2571.\r\n\r\nReference transitive not working when app and lib has different targetFramework, and the lib use an transitive dependency from special targetFramework of an multi-targetFramework PackageReference/ProjectReference\r\n\r\nThat mainly affect reference any libraries which target single `netstandard2.0` and reference other multi-targetFramework libraries , as it give no warn/error at build time.\r\n\r\n### Step:\r\n\r\nTested with dotnet-sdk : 3.0.100-preview3-010431, 2.1.504 and some other version\r\n\r\nRun ConsoleApp5 in https://github.com/yyjdelete/test_dotnet_indirect_dependency\r\nAnd see an FileNotFoundException for `System.Data.SqlClient, Version=4.5.0.0`(Ignore the MissingMethodException, as it's expected https://github.com/dotnet/standard/issues/1052#issuecomment-457399181). The same if replace `ClassLibrary1` and `ClassLibrary2` with packed `.nupkg`\r\n\r\nProject struct:\r\n```\r\nConsoleApp5(net472)\r\n|--ClassLibrary1(netstandard2.0)->use `System.Data.SqlClient` directly or exported as public api of `ClassLibrary2`\r\n---|--ClassLibrary2(netstandard2.0;net472)\r\n------|--System.Data.SqlClient(when netstandard2.0)\r\n```\r\n\r\n### Expected:\r\n```\r\nConsoleApp5(net472)\r\n|--ClassLibrary1(netstandard2.0)\r\n---|--System.Data.SqlClient(net472)\r\n---|--ClassLibrary2(net472)\r\n```\r\n1. The `System.Data.SqlClient` should be include in the output bins of `ConsoleApp5`, if used by `ClassLibrary1(netstandard2.0)`.\r\nOr at least give an warning, to make people know which Reference must be added explicitly. It's almost impossibe to find all of them by hand in an project with deep reference transitive(can also be something in nupkg).\r\n\r\n2. VisualStudio should show the same result of project struct as the output does, and `System.Data.SqlClient` should be include again with `ClassLibrary1(netstandard2.0)` if it's removed with `ClassLibrary2(net472)`\r\nI already know it's reasonable to reference `ClassLibrary2` with `net472`(runtime) instead of `netstandard2.0`, so ignore the `MissingMethodException`.\r\n\r\n### Actual:\r\n```\r\nConsoleApp5(net472)\r\n|--ClassLibrary1(netstandard2.0)\r\n---|--ClassLibrary2(net472)\r\n\r\n***System.Data.SqlClient is missing\r\n```\r\n1. The `System.Data.SqlClient` is missing from the output, even it's used by `ClassLibrary1(netstandard2.0)`, and get an `FileNotFoundException` when execute.\r\n2. VisualStudio show that ConsoleApp5(net472) use ClassLibrary2(net472), while the output use ClassLibrary2(netstandard2.0).\r\n![image](https://user-images.githubusercontent.com/1819074/55792414-24a72f80-5af3-11e9-9a58-e7bd08696b90.png)","Url":"https://github.com/dotnet/standard/issues/1149","RelatedDescription":"Open issue \"Transitive dependency(PackageReference/ProjectReference)not working when app and libs has different targetFramework\" (#1149)"},{"Id":"433742428","IsPullRequest":true,"CreatedAt":"2019-04-16T12:14:06","Actor":"dotnet-maestro[bot]","Number":"1148","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190415.12\r\n- **Date Produced**: 4/16/2019 12:12 AM\r\n- **Commit**: 517bf671ea342965d007aa48f5bfd4926e58d582\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19215.12\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19215.12\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19215.12\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19215.12\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19215.12\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1148","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1148)"},{"Id":"433244267","IsPullRequest":true,"CreatedAt":"2019-04-15T12:13:52","Actor":"dotnet-maestro[bot]","Number":"1146","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190414.2\r\n- **Date Produced**: 4/14/2019 4:07 PM\r\n- **Commit**: bcf1186cb0db792906fd319ae49bdbc41f44f8ec\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19214.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19214.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19214.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19214.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19214.2\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1146","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1146)"},{"Id":"432966330","IsPullRequest":true,"CreatedAt":"2019-04-14T12:13:32","Actor":"dotnet-maestro[bot]","Number":"1145","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190413.2\r\n- **Date Produced**: 4/13/2019 9:02 PM\r\n- **Commit**: 10655eec2ab92accc1487d077979935127f16b4e\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19213.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19213.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19213.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19213.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19213.2\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1145","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1145)"},{"Id":"432889036","IsPullRequest":false,"CreatedAt":"2019-04-13T19:21:08","Actor":"JamesNK","Number":"1144","RawContent":null,"Title":"Add HttpResponseMessage.TrailingHeaders to netstandard","State":"open","Body":"https://github.com/dotnet/corefx/blob/4fa6319fb590b046ba4c962088b960a31749f245/src/System.Net.Http/src/System/Net/Http/HttpResponseMessage.cs#L119-L130\r\n\r\nDiscussion: https://github.com/dotnet/corefx/issues/34912#issuecomment-482777355","Url":"https://github.com/dotnet/standard/issues/1144","RelatedDescription":"Open issue \"Add HttpResponseMessage.TrailingHeaders to netstandard\" (#1144)"},{"Id":"432840145","IsPullRequest":true,"CreatedAt":"2019-04-13T12:08:31","Actor":"dotnet-maestro[bot]","Number":"1143","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190412.2\r\n- **Date Produced**: 4/12/2019 4:37 PM\r\n- **Commit**: 9d0fd805448082c8d55e2434607b481bca70a146\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19212.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19212.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19212.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19212.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19212.2\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1143","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1143)"},{"Id":"432775994","IsPullRequest":false,"CreatedAt":"2019-04-12T23:24:57","Actor":"danny-may","Number":"1141","RawContent":null,"Title":"Linq extensions for IAsyncEnumerable","State":"closed","Body":"With `IAsyncEnumerable<T>` being added to .net standard 2,1, I feel it would make sense to also add all the Linq extensions on `IEnumerable<T>` to `IAsyncEnumerable<T>`, be that in a new extension class (e.g. `AsyncEnumerable.cs`) or as additional methods in the existing `Enumerable.cs` class.\r\n\r\n```csharp\r\npublic static class AsyncEnumerable\r\n{\r\n    ....\r\n    public static IAsyncEnumerable<T> Where<T>(this IAsyncEnumerable<T>, Func<T, bool> predicate) { ... }\r\n    public static IAsyncEnumerable<T> Where<T>(this IAsyncEnumerable<T>, Func<T, Task<bool>> predicate) { ... }\r\n     // Maybe this Func<T, ValueTask<bool>> overload?\r\n    public static IAsyncEnumerable<T> Where<T>(this IAsyncEnumerable<T>, Func<T, ValueTask<bool>> predicate) { ... }\r\n    ....\r\n    public static Task<T[]> ToArrayAsync<T>(this IAsyncEnumerable<T>) { ... }\r\n    ....\r\n    public static Task<T> FirstOrDefaultAsync<T>(this IAsyncEnumerable<T>) { ... }\r\n    public static Task<T> FirstOrDefaultAsync<T>(this IAsyncEnumerable<T>, Func<T, bool> predicate) { ... }\r\n    public static Task<T> FirstOrDefaultAsync<T>(this IAsyncEnumerable<T>, Func<T, Task<bool>> predicate) { ... }\r\n     // Maybe this Func<T, ValueTask<bool>> overload?\r\n    public static Task<T> FirstOrDefaultAsync<T>(this IAsyncEnumerable<T>, Func<T, ValueTask<bool>> predicate) { ... }\r\n    ....\r\n}\r\n```\r\n\r\n```csharp\r\nvar allItems = MyAsyncEnumerableMethod();\r\nvar evens = await allItems.Where(item => item.id % 2 == 0).ToArrayAsync();\r\nvar firstOdd = await allItems.FirstOrDefaultAsync(item => item.id % 2 == 1);\r\n```\r\n\r\nI understand this would need to be implemented into the .net core and .net framework releases too, I figured it would make sense to raise it here first as its an API proposal?","Url":"https://github.com/dotnet/standard/issues/1141","RelatedDescription":"Closed issue \"Linq extensions for IAsyncEnumerable\" (#1141)"},{"Id":"432616368","IsPullRequest":false,"CreatedAt":"2019-04-12T15:17:58","Actor":"hinteadan","Number":"1140","RawContent":null,"Title":"string.Join unexpected behavior when calling Join(String separator, params object[] values);","State":"closed","Body":"When calling the `String Join(String separator, params object[] values)` signature and pass a **null** value as the first parameter, followed by a type other than string, then any number and type of other parameters, the method **returns an empty string**.\r\n\r\nCode samples:\r\n`string.Join(\",\", null, 0) //returns \"\"`\r\n`string.Join(\",\", null, 0, null, null, \"\", null, 0, \"\", null, new Exception(), DateTime.Now) //returns \"\"`","Url":"https://github.com/dotnet/standard/issues/1140","RelatedDescription":"Closed issue \"string.Join unexpected behavior when calling Join(String separator, params object[] values);\" (#1140)"},{"Id":"432532476","IsPullRequest":true,"CreatedAt":"2019-04-12T12:13:53","Actor":"dotnet-maestro[bot]","Number":"1139","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190411.2\r\n- **Date Produced**: 4/11/2019 10:43 PM\r\n- **Commit**: e7b5230799a6db9121d90cf548d5a2313bd682dd\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19211.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19211.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19211.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19211.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19211.2\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1139","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1139)"},{"Id":"432357589","IsPullRequest":false,"CreatedAt":"2019-04-12T02:20:57","Actor":"DSBRBrasil","Number":"1138","RawContent":null,"Title":"Xml validate [ type is not declared ]","State":"open","Body":"Hi,\r\nWhy, I don't  validate a document using .net standard 2.0? I get that's message: Type not declared\r\nThat's my code:\r\n```\r\n var xDoc = XDocument.Parse(\"<consStatServ versao=\\\"4.00\\\" xmlns=\\\"http://www.portalfiscal.inf.br/nfe\\\"><tpAmb>2</tpAmb><cUF>29</cUF><xServ>STATUS</xServ></consStatServ>\");\r\n   var xss = new XmlSchemaSet();\r\n   xss.Add(\"http://www.portalfiscal.inf.br/nfe\", @\"D:\\Schemas\\consStatServ_v4.00.xsd\");\r\n   //Validar Xml\r\n   xDoc.Validate(xss, (sender, args) =>\r\n            {\r\n                throw new FalhaValidacaoSchemaException(args.Message);\r\n\r\n            });\r\n```","Url":"https://github.com/dotnet/standard/issues/1138","RelatedDescription":"Open issue \"Xml validate [ type is not declared ]\" (#1138)"},{"Id":"431985706","IsPullRequest":true,"CreatedAt":"2019-04-11T12:13:49","Actor":"dotnet-maestro[bot]","Number":"1137","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190410.7\r\n- **Date Produced**: 4/11/2019 3:17 AM\r\n- **Commit**: 4f645e4a5385eb96cad3f72f5ded239761c7d075\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19210.7\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19210.7\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19210.7\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19210.7\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19210.7\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1137","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1137)"},{"Id":"431464888","IsPullRequest":true,"CreatedAt":"2019-04-10T12:13:44","Actor":"dotnet-maestro[bot]","Number":"1136","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190409.2\r\n- **Date Produced**: 4/9/2019 12:54 PM\r\n- **Commit**: 63b76f3f952f821d0a7996427a9f3534f1c25ab7\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19209.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19209.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19209.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19209.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19209.2\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1136","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1136)"},{"Id":"430928858","IsPullRequest":true,"CreatedAt":"2019-04-09T12:13:46","Actor":"dotnet-maestro[bot]","Number":"1135","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190409.1\r\n- **Date Produced**: 4/9/2019 8:35 AM\r\n- **Commit**: 9d7e665ecf2606094677524ecd5af0fc39c7bb49\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19209.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19209.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19209.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19209.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19209.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1135","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1135)"},{"Id":"430724535","IsPullRequest":true,"CreatedAt":"2019-04-09T01:31:16","Actor":"wtgodbe","Number":"1133","RawContent":null,"Title":"Add triggers for release/3.0","State":"closed","Body":"CC @mmitche ","Url":"https://github.com/dotnet/standard/pull/1133","RelatedDescription":"Closed or merged PR \"Add triggers for release/3.0\" (#1133)"},{"Id":"430724563","IsPullRequest":true,"CreatedAt":"2019-04-09T01:31:07","Actor":"wtgodbe","Number":"1134","RawContent":null,"Title":"Add triggers for release/3.0","State":"closed","Body":"CC @mmitche ","Url":"https://github.com/dotnet/standard/pull/1134","RelatedDescription":"Closed or merged PR \"Add triggers for release/3.0\" (#1134)"},{"Id":"430719996","IsPullRequest":true,"CreatedAt":"2019-04-09T01:25:47","Actor":"wtgodbe","Number":"1132","RawContent":null,"Title":"Update branding to preview5","State":"closed","Body":"CC @mmitche","Url":"https://github.com/dotnet/standard/pull/1132","RelatedDescription":"Closed or merged PR \"Update branding to preview5\" (#1132)"},{"Id":"430670575","IsPullRequest":false,"CreatedAt":"2019-04-08T21:50:37","Actor":"tom-corwin","Number":"1131","RawContent":null,"Title":"Support for System.Reflection.Emit.ILGenerator.EmitCalli overload for unmanaged calling conventions","State":"closed","Body":"I noticed that when targeting a .NET Standard library, there is no overload for System.Reflection.Emit.ILGenerator.EmitCalli() that allows for use of the System.Runtime.InteropServices.CallingConvention enum as a parameter.\r\n\r\nAre there any plans to add the overload, or is this going to be on implementation-only?","Url":"https://github.com/dotnet/standard/issues/1131","RelatedDescription":"Closed issue \"Support for System.Reflection.Emit.ILGenerator.EmitCalli overload for unmanaged calling conventions\" (#1131)"}],"ResultType":"GitHubIssue"},"CoreFx-Issues":{"Issues":[{"Id":"435468189","IsPullRequest":true,"CreatedAt":"2019-04-21T02:32:22","Actor":"steveharter","Number":"37070","RawContent":null,"Title":"Add Dictionary support to JsonSerializer","State":"open","Body":"Re-creating the PR from https://github.com/dotnet/corefx/pull/37033\r\n\r\nThis partially addresses #36024.\r\nFor the intial version, only Dictionary<string, [some concrete type]>\r\nis supported.\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/37070","RelatedDescription":"Open PR \"Add Dictionary support to JsonSerializer\" (#37070)"},{"Id":"435461204","IsPullRequest":true,"CreatedAt":"2019-04-21T00:57:18","Actor":"wfurt","Number":"37069","RawContent":null,"Title":"reject invalid pseudo-headers","State":"open","Body":"add few tests and improve detection of invalid pseudo-headers based on rfc7540 section 8.1.2.3.\r\n\r\nfixes #35643","Url":"https://github.com/dotnet/corefx/pull/37069","RelatedDescription":"Open PR \"reject invalid pseudo-headers\" (#37069)"},{"Id":"435460334","IsPullRequest":true,"CreatedAt":"2019-04-21T00:46:10","Actor":"Wraith2","Number":"37068","RawContent":null,"Title":"SqlClient handle socket network error gracefully","State":"open","Body":"Fixes https://github.com/dotnet/corefx/issues/33930\r\n\r\nThen a running the SqlClient test suite in managed mode (Linux, osx, uap) and Debug build, an assert fires indicating that an invalid state has been reached. The assertion indicates that a packet has reached the processing stage and has no contents or that the packet has been received in a state where none was expected. The test failure was caused by an assertion but could lead to silent unexpected non-crashing behaviour in release builds leading to unreliability. \r\n\r\nAfter investigation and debugging I've arrived at three related changes.\r\n* plumb the error message from the packet read function all the way through the handler chain so that the recipients can identify what the error was\r\n* change the read function so that socket disconnections use an existing but unused error code to identify that the connection has been reset and add specific error catching for disconnections.\r\n* detect disconnections and disposed errors using the above changes and close the connection gracefully, and change a check\r\n\r\nThe functional and manual tests pass over multiple repeated runs correctly with the affected tests re-enabled.\r\n/cc @afsanehr, @tarikulsabbir, @Gary-Zh , @david-engel @saurabh500 ","Url":"https://github.com/dotnet/corefx/pull/37068","RelatedDescription":"Open PR \"SqlClient handle socket network error gracefully\" (#37068)"},{"Id":"435402578","IsPullRequest":true,"CreatedAt":"2019-04-20T20:07:53","Actor":"stephentoub","Number":"37064","RawContent":null,"Title":"Add EnumeratorCancellationAttribute","State":"closed","Body":"Adds the new EnumeratorCancellationAttribute to System.Runtime.  Eventually we may want to push the implementation down to corelib if/when it's needed for APIs in corelib, but for now we can just have it in corefx.\r\n\r\nAlso updates the new ChannelReader.ReadAllAsync method to use the attribute and revised pattern.\r\n\r\nI'd like to get this merged asap.\r\n\r\ncc: @terrajobst, @jcouv, @tarekgh, @bartonjs \r\nFixes https://github.com/dotnet/corefx/issues/37012","Url":"https://github.com/dotnet/corefx/pull/37064","RelatedDescription":"Closed or merged PR \"Add EnumeratorCancellationAttribute\" (#37064)"},{"Id":"435426374","IsPullRequest":true,"CreatedAt":"2019-04-20T18:31:24","Actor":"vdailly","Number":"37067","RawContent":null,"Title":"avoid usage of Delegate.BeginInvoke","State":"open","Body":"A small push that attempt to solve #34730 . More investigation should probably be done (especially running the tests). All the information is described in the issue.\r\n","Url":"https://github.com/dotnet/corefx/pull/37067","RelatedDescription":"Open PR \"avoid usage of Delegate.BeginInvoke\" (#37067)"},{"Id":"435418869","IsPullRequest":false,"CreatedAt":"2019-04-20T16:57:24","Actor":"NMSAzulX","Number":"37066","RawContent":null,"Title":"Suggestion：Add generic interface, SQL protocol directly mapped to entity classes.","State":"open","Body":"I'm a new guy.\r\n\r\nI've envisioned a SQL processing process, It is roughly as follows: \r\n`\r\nSQL Request -> Get Reponse -> Store Buffer -> ConvertTo  TClass -> Return TClass\r\n`\r\n\r\n```C#\r\n\r\nSqlCommand cmd = new SqlCommand(sql, conn, typeMappings);//typeMappings:SqlType->EntityType\r\nTClass entity = cmd.EntityReader<TClass>();\r\n\r\n```\r\n```C#\r\n\r\npublic interface  IDbCommand<T> {\r\n    T EntityReader<T>();\r\n}\r\n\r\n```\r\nIs this proposal feasible?\r\n","Url":"https://github.com/dotnet/corefx/issues/37066","RelatedDescription":"Open issue \"Suggestion：Add generic interface, SQL protocol directly mapped to entity classes.\" (#37066)"},{"Id":"435417055","IsPullRequest":true,"CreatedAt":"2019-04-20T16:38:14","Actor":"am11","Number":"37065","RawContent":null,"Title":"Add SleepAppNative for long process name test","State":"open","Body":"Addresses #37053","Url":"https://github.com/dotnet/corefx/pull/37065","RelatedDescription":"Open PR \"Add SleepAppNative for long process name test\" (#37065)"},{"Id":"435395975","IsPullRequest":true,"CreatedAt":"2019-04-20T14:00:10","Actor":"dotnet-maestro[bot]","Number":"37062","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-optimization","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-optimization\r\n- **Build**: 20190420.1\r\n- **Date Produced**: 4/20/2019 10:53 AM\r\n- **Commit**: 262f4c4cfae446577e19e7c79b43ad46ba456e56\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **optimization.windows_nt-x64.IBC.CoreFx** -> 99.99.99-master-20190420.1\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/37062","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dnceng/internal/dotnet-optimization\" (#37062)"},{"Id":"435395594","IsPullRequest":true,"CreatedAt":"2019-04-20T13:50:38","Actor":"dotnet-maestro[bot]","Number":"37061","RawContent":null,"Title":"[master] Update dependencies from dotnet/coreclr","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/coreclr\r\n- **Build**: 20190419.73\r\n- **Date Produced**: 4/20/2019 1:02 AM\r\n- **Commit**: 6a7bf9c3af1d3d6e78d7247eef07c48c89a57112\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk.IL** -> 3.0.0-preview5-27619-73\r\n  - **Microsoft.NETCore.ILAsm** -> 3.0.0-preview5-27619-73\r\n  - **Microsoft.NETCore.Runtime.CoreCLR** -> 3.0.0-preview5-27619-73\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/37061","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/coreclr\" (#37061)"},{"Id":"435356123","IsPullRequest":true,"CreatedAt":"2019-04-20T13:36:44","Actor":"wfurt","Number":"37051","RawContent":null,"Title":"skip GetAsync_IPv6LinkLocalAddressUri_Success if address is not available","State":"closed","Body":"add guard agains NRE.\r\n\r\nfixes #36802","Url":"https://github.com/dotnet/corefx/pull/37051","RelatedDescription":"Closed or merged PR \"skip GetAsync_IPv6LinkLocalAddressUri_Success if address is not available\" (#37051)"},{"Id":"435393271","IsPullRequest":true,"CreatedAt":"2019-04-20T13:27:51","Actor":"dotnet-maestro[bot]","Number":"37058","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190419.11\r\n- **Date Produced**: 4/20/2019 8:19 AM\r\n- **Commit**: c608ddaa2a024dde2510f3c1122c89ba07b4325d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.Platforms** -> 3.0.0-preview5.19219.11\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/37058","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#37058)"},{"Id":"435392774","IsPullRequest":true,"CreatedAt":"2019-04-20T13:17:16","Actor":"dotnet-maestro[bot]","Number":"37057","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190420.01\r\n- **Date Produced**: 4/20/2019 10:12 AM\r\n- **Commit**: b9a720984fa4d6454d1c66ae765bc1e34cb1d206\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview5-27620-01\r\n  - **Microsoft.NETCore.DotNetHost** -> 3.0.0-preview5-27620-01\r\n  - **Microsoft.NETCore.DotNetHostPolicy** -> 3.0.0-preview5-27620-01\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/37057","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#37057)"},{"Id":"435396798","IsPullRequest":false,"CreatedAt":"2019-04-20T13:03:08","Actor":"filipnavara","Number":"37063","RawContent":null,"Title":"Meta: Azure Pipelines on mobile","State":"open","Body":"I figured there's no tracking issue for the Azure Pipelines UI problems on mobile devices. It is listed under [known issues](https://github.com/dotnet/corefx/blob/master/Documentation/project-docs/pullrequest-builds.md#known-issues) but that doesn't allow people to track if there's any progress with resolving it.\r\n\r\nThe experience with Azure Pipelines UI on mobile devices is abysmal. CoreFX has the \"Sending tests to Helix\" step that prints the mc.dot.net URLs in the log output. On Desktop you can click on them, but it requires CMD+Click (on macOS) or CTRL+Click (on Windows) to go through. On mobile there's no CMD or CTRL key so it doesn't work. To add insult to the injury it doesn't allow normal text selection and copying, so it's not possible to manually copy the URL either.\r\n\r\nOn Desktop there's an option to download log from individual build step as a .zip file. However it is hidden under icon one has to hover over with mouse. Naturally that's also not possible on mobile. It is however possible to long press on the while space where the icon would normally be and it starts the download.\r\n\r\nEffectively the only way to get to the Helix test results is to long press on a white spot on the Azure Pipelines page, download the .zip file with the logs, extract it, open it in a text editor and copy the URL from there back to the browser.\r\n\r\nIt's 2019 and making a link clickable in a browser sounds like a problem that should have been solved already. \r\n\r\n/cc @safern @karelz @MarcoRossignoli","Url":"https://github.com/dotnet/corefx/issues/37063","RelatedDescription":"Open issue \"Meta: Azure Pipelines on mobile\" (#37063)"},{"Id":"435395346","IsPullRequest":false,"CreatedAt":"2019-04-20T12:47:28","Actor":"westfin","Number":"37060","RawContent":null,"Title":"Get Kerberos ticket from Linux kdc server","State":"open","Body":"I use Linux Debian 9 with kdc server for Kerberos authentification.\r\nIs it possible on windows machine get ticket from linux kdc server?\r\nSimply I need create service like `kinit`.\r\n\r\nI see a lot of issues about Kerberos and Ntlm and I think class `NegotiateStream` can help me.\r\nBut to be sure I create this issue.","Url":"https://github.com/dotnet/corefx/issues/37060","RelatedDescription":"Open issue \"Get Kerberos ticket from Linux kdc server\" (#37060)"},{"Id":"435394425","IsPullRequest":true,"CreatedAt":"2019-04-20T12:39:11","Actor":"dotnet-maestro[bot]","Number":"37059","RawContent":null,"Title":"[master] Update dependencies from dotnet/standard","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/standard\r\n- **Build**: 20190419.2\r\n- **Date Produced**: 4/19/2019 8:04 PM\r\n- **Commit**: ab24a5de1bf2d8b71eff678798b65bd562630ae2\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **NETStandard.Library** -> 2.1.0-prerelease.19219.2\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/37059","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/standard\" (#37059)"},{"Id":"435374864","IsPullRequest":false,"CreatedAt":"2019-04-20T09:12:12","Actor":"laceous","Number":"37056","RawContent":null,"Title":"Console.ReadLine backspace issue on Linux","State":"open","Body":".Net Core 2.2\r\n\r\nCode:\r\n```\r\nConsole.WriteLine(\"Enter some text.\");\r\nstring text = Console.ReadLine();\r\nConsole.WriteLine(text);\r\n```\r\n\r\nUsing Konsole, I typed until the text dropped down to a 2nd line (e.g. wordwrap). Then I hit backspace which erased the text on the 2nd line, but then it got stuck at the first column of the 2nd line and never visually erased anything from the 1st line. From the output, it was clearly internally keeping up with my backspace presses, but it wasn't showing it visually which is confusing.\r\n\r\nOutput:\r\n```\r\n$ dotnet Test.dll \r\nEnter some text.\r\njjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjj\r\n\r\njjjjjjjjjjjjjjjjjjjj\r\n```\r\n\r\n* The Linux terminal doesn't seem to have this issue outside of dotnet\r\n* Running the code via Windows cmd doesn't exhibit this behavior","Url":"https://github.com/dotnet/corefx/issues/37056","RelatedDescription":"Open issue \"Console.ReadLine backspace issue on Linux\" (#37056)"},{"Id":"435367172","IsPullRequest":false,"CreatedAt":"2019-04-20T07:35:39","Actor":"davidfowl","Number":"37055","RawContent":null,"Title":"DiagnosticSource.StartActivity and DiagnosticSource.StopActivity allocate a string per call","State":"open","Body":"StartActivity\r\n\r\nhttps://github.com/dotnet/corefx/blob/43ca5e2aee8c4ada93ab30fc3fd34bb8f4c6224d/src/System.Diagnostics.DiagnosticSource/src/System/Diagnostics/DiagnosticSourceActivity.cs#L31\r\n\r\nStopActivity\r\n\r\nhttps://github.com/dotnet/corefx/blob/43ca5e2aee8c4ada93ab30fc3fd34bb8f4c6224d/src/System.Diagnostics.DiagnosticSource/src/System/Diagnostics/DiagnosticSourceActivity.cs#L51\r\n\r\nDoing some profiling with acitivities on it turns out we end up allocating per call to Stop and Start (a needless allocation as well). The caller can simply pass in a string that has \".Start\" and \".Stop\" appeneded to avoid the string concatenation:\r\n\r\nHere's a profile memory profile of 100K requests and it shows the backtraces from StopActivity (StartActivity isn't being called here).\r\n\r\n![image](https://user-images.githubusercontent.com/95136/56454356-2ac3ba00-6304-11e9-81ae-5a651f55454d.png)\r\n","Url":"https://github.com/dotnet/corefx/issues/37055","RelatedDescription":"Open issue \"DiagnosticSource.StartActivity and DiagnosticSource.StopActivity allocate a string per call\" (#37055)"},{"Id":"435367049","IsPullRequest":false,"CreatedAt":"2019-04-20T07:33:46","Actor":"MarcoRossignoli","Number":"37054","RawContent":null,"Title":"Process.GetProcesses returns truncated 15 char string on OSX","State":"open","Body":"Follow up issue https://github.com/dotnet/corefx/issues/34437 fixed on linux([except missing test for Alpine at the moment](https://github.com/dotnet/corefx/issues/37053)) but doesn't work on OSX.\r\nWe should investigate another way.\r\nExtra: mono bugfix https://bugzilla.xamarin.com/show_bug.cgi?id=32539\r\n\r\n/cc @danmosemsft @krwq ","Url":"https://github.com/dotnet/corefx/issues/37054","RelatedDescription":"Open issue \"Process.GetProcesses returns truncated 15 char string on OSX\" (#37054)"},{"Id":"435366765","IsPullRequest":false,"CreatedAt":"2019-04-20T07:29:42","Actor":"MarcoRossignoli","Number":"37053","RawContent":null,"Title":"Update test GetProcesses_LongProcessName() for Alpine distro","State":"open","Body":"Test `System.Diagnostics.Tests.ProcessTests.GetProcesses_LongProcessName` makes a copy and rename `sleep` command to test fix for https://github.com/dotnet/corefx/issues/34437\r\n\r\nUnfortunately on Alpine distro `sleep` is implemented as a symlink to [`busybox`](https://busybox.net/downloads/BusyBox.html)\r\n```\r\nreadlink $(command -v sleep) -> /bin/busybox\r\n```\r\nWe should try to find a way to test also on this distro. \r\nAt the moment the best idea could be create a custom library like `NativeLibrary` test that will work on all platform.\r\n\r\n/cc @danmosemsft @am11 ","Url":"https://github.com/dotnet/corefx/issues/37053","RelatedDescription":"Open issue \"Update test GetProcesses_LongProcessName() for Alpine distro\" (#37053)"},{"Id":"435364894","IsPullRequest":true,"CreatedAt":"2019-04-20T07:04:16","Actor":"sdmaclea","Number":"37052","RawContent":null,"Title":"Add ContextualReflection tests","State":"open","Body":"Adds tests for #36845 and the context sensitive reflection APIs","Url":"https://github.com/dotnet/corefx/pull/37052","RelatedDescription":"Open PR \"Add ContextualReflection tests\" (#37052)"},{"Id":"435331077","IsPullRequest":true,"CreatedAt":"2019-04-20T06:31:01","Actor":"cston","Number":"37047","RawContent":null,"Title":"Port Microsoft.VisualBasic.Conversion class","State":"closed","Body":"Port `Microsoft.VisualBasic.Conversion` class from https://github.com/Microsoft/referencesource/tree/master/Microsoft.VisualBasic/runtime/msvbalib.\r\n\r\nThe implementation is unchanged. The changes were limited to cosmetic changes such as comments.","Url":"https://github.com/dotnet/corefx/pull/37047","RelatedDescription":"Closed or merged PR \"Port Microsoft.VisualBasic.Conversion class\" (#37047)"},{"Id":"435345372","IsPullRequest":true,"CreatedAt":"2019-04-20T02:04:18","Actor":"wfurt","Number":"37050","RawContent":null,"Title":"improve error handling on failed Http/2 handshake","State":"open","Body":"The issue described in #36665 was misconfiguration. However getting ObjectDisposedException on internal objects is not very helpful. \r\n\r\nThe RFC says:\r\n> The server connection preface consists of a potentially empty  SETTINGS frame (Section 6.5) that MUST be the first frame the server  sends in the HTTP/2 connection.\r\n\r\nThis change modifies SetupAsync() to check for server preface and throw error immediately instead of aborting connection in background task. It will also log few bytes from response if tracing is enable so it is easier to diagnose this in field. \r\n\r\nwith this called would get following exception instead of ObjectDisposedException:\r\n```\r\nSystem.Net.Http.HttpRequestException: The server returned an invalid or unrecognized response.\r\n   at System.Net.Http.Http2Connection.SetupAsync()\r\n   at System.Net.Http.HttpConnectionPool.GetHttp2ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at System.Threading.Tasks.ValueTask`1.get_Result()\r\n   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)\r\n   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)\r\n   at proxy_test.Program.fetch2(String uri) in /home/furt/proxy-test/Program.cs:line 58\r\n```\r\ncloses #36665 ","Url":"https://github.com/dotnet/corefx/pull/37050","RelatedDescription":"Open PR \"improve error handling on failed Http/2 handshake\" (#37050)"},{"Id":"435334536","IsPullRequest":true,"CreatedAt":"2019-04-20T00:00:28","Actor":"dotnet-maestro[bot]","Number":"37049","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/coreclr","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/coreclr\r\n- **Build**: 20190419.72\r\n- **Date Produced**: 4/19/2019 11:57 PM\r\n- **Commit**: cc29bc4004f9e15959e9cc8fbd8b740088672ca3\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk.IL** -> 3.0.0-preview4-27619-72\r\n  - **Microsoft.NETCore.ILAsm** -> 3.0.0-preview4-27619-72\r\n  - **Microsoft.NETCore.Runtime.CoreCLR** -> 3.0.0-preview4-27619-72\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/37049","RelatedDescription":"Open PR \"[release/3.0] Update dependencies from dotnet/coreclr\" (#37049)"},{"Id":"435333698","IsPullRequest":true,"CreatedAt":"2019-04-19T23:53:35","Actor":"dreddy-work","Number":"37048","RawContent":null,"Title":"Embedded resources may not have extension in the name","State":"open","Body":"Winforms run-time is replacing the embedded bitmap resources to Icons that match with VisualStudio styles. Winforms also made change to logical names ( earlier they contain file name with extension \".bmp\". now that the files are changed ti .ICO files, we are removing the extension from logical names for future proof)","Url":"https://github.com/dotnet/corefx/pull/37048","RelatedDescription":"Open PR \"Embedded resources may not have extension in the name\" (#37048)"},{"Id":"435324204","IsPullRequest":true,"CreatedAt":"2019-04-19T22:45:17","Actor":"tannergooding","Number":"37045","RawContent":null,"Title":"Regenerating reference sources in order to reorder enum fields","State":"open","Body":"CC. @ericstj, @safern, @stephentoub, @danmosemsft \r\n\r\nThis picks up the GenAPI change to make enum fields ordered numerically, rather than alphabetically. This should make it easier to diff against most implementations given that this is how they are typically ordered there.","Url":"https://github.com/dotnet/corefx/pull/37045","RelatedDescription":"Open PR \"Regenerating reference sources in order to reorder enum fields\" (#37045)"},{"Id":"435306651","IsPullRequest":false,"CreatedAt":"2019-04-19T21:14:24","Actor":"stevenbrix","Number":"37043","RawContent":null,"Title":"no System.Text.Json package produced like other corefx libraries","State":"open","Body":"There is no System.Text.Json package produced, which makes it impossible to add a dependency to it via darc and consume it in a dotnet repo.","Url":"https://github.com/dotnet/corefx/issues/37043","RelatedDescription":"Open issue \"no System.Text.Json package produced like other corefx libraries\" (#37043)"},{"Id":"435302098","IsPullRequest":false,"CreatedAt":"2019-04-19T20:55:32","Actor":"vcsjones","Number":"37042","RawContent":null,"Title":"RSAES_OAEP certificates do not work with EnvelopedCms","State":"open","Body":"While working on #34366 I found a few code paths that seem to imply certificates with a SPKI of RSAES_OAEP are supposed to work but there are a couple of things preventing that when I actually tried it.\r\n\r\nThe first is that this switch statement for the managed PAL does not handle the RsaOaep OID:\r\n\r\nhttps://github.com/dotnet/corefx/blob/432a34fed6f0db6d76d5b3f8bbc8297fb0aa5f6b/src/System.Security.Cryptography.Pkcs/src/Internal/Cryptography/Pal/AnyOS/ManagedPal.Encrypt.cs#L110-L115\r\n\r\nOver in the Windows PAL, RSAES_OAEP certificates are not correctly handled here:\r\n\r\nhttps://github.com/dotnet/corefx/blob/eb63183901fbe6afc2be4e1ff0f365fe20cefbf5/src/System.Security.Cryptography.Pkcs/src/Internal/Cryptography/Pal/Windows/PkcsPalWindows.Encrypt.cs#L213\r\n\r\nI think it's doable to handle RSAES_OAEP certificates, though the Windows PAL might get weird, so we should either fix the places that are stopping it from working correctly (with tests) or we should remove the partial handling of it that we have today. \r\n\r\n/cc @bartonjs ","Url":"https://github.com/dotnet/corefx/issues/37042","RelatedDescription":"Open issue \"RSAES_OAEP certificates do not work with EnvelopedCms\" (#37042)"},{"Id":"435302096","IsPullRequest":false,"CreatedAt":"2019-04-19T20:55:32","Actor":"ericstj","Number":"37041","RawContent":null,"Title":"[Draft] System.Resources API additions for non-primitive objects","State":"open","Body":"Problem: Need to avoid creating live objects when building resources for non-primitive types. This can be done by passing through pre-serialized data from resx to resources file.\r\n![image](https://user-images.githubusercontent.com/8918108/56462633-706f9980-637b-11e9-8a09-6993e62f3472.png)\r\n\r\nDraft Implementation : https://github.com/dotnet/corefx/pull/36906\r\n\r\nAssembly / Namespace : System.Resources.Extensions\r\n - options: 1 vs 2 assemblies?  I've tried both.  1 is easier for maintenance and testing.  Dependencies of the reader are the same as writer.  Size of writer is 23KB, reader is 46KB.\r\n - naming: \r\n   - System.ComponentModel.Resources\r\n   - System.Resources.Serialization\r\n   - System.Resources.PassThrough\r\n   - System.Resources.Extensions\r\n   - System.Resources.Data\r\n   - System.Resources.Binary\r\n\r\nTypes:\r\n- Nouns: ResourceReader, ResourceSet, and ResourceWriter\r\n- Prefixes:\r\n   - Serializing\r\n   - PassThrough\r\n   - Data\r\n   - Object\r\n   - Component\r\n   - Converting\r\n   - Preserialized\r\n   - Deserializing\r\n\r\n\r\n```c#\r\n// optionally sealed if we don't want extensibility\r\npublic partial class DeserializingResourceReader : System.Resources.IResourceReader\r\n{\r\n    // all of these are present on ResourceReader\r\n    public BinaryResourceReader(System.IO.Stream stream) { }\r\n    public BinaryResourceReader(string fileName) { }\r\n    public void Close() { }\r\n    public void Dispose() { }\r\n    public System.Collections.IDictionaryEnumerator GetEnumerator() { throw null; }\r\n    public void GetResourceData(string resourceName, out string resourceType, out byte[] resourceData) { throw null; }\r\n    System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { throw null; }\r\n\r\n    // Optional additions if we want to support extensibility\r\n    protected virtual int Version { get { throw null; } }\r\n    protected virtual object DeserializeObject(System.IO.BinaryReader reader, Type type) { throw null; }\r\n}\r\n\r\n// optionally public, referenced by .resources file, fixes the extensibility problem with ResourceSet / RuntimeResourceSet\r\npublic sealed partial class LazyResourceSet : ResourceSet\r\n{\r\n    // Throws for readers that aren't BinaryResourceReader\r\n    internal RuntimeResourceSet(IResourceReader reader) { }\r\n}\r\n\r\n// optionally sealed if we don't want extensibility\r\npublic partial class PreserializedResourceWriter : System.Resources.IResourceWriter\r\n{\r\n    // all of these are present on ResourceWriter\r\n    public BinaryResourceWriter(System.IO.Stream stream) { }\r\n    public BinaryResourceWriter(string fileName) { }\r\n    public System.Func<System.Type, string> TypeNameConverter { get { throw null; } set { } }\r\n    public void AddResource(string name, byte[] value) { }\r\n    public void AddResource(string name, System.IO.Stream value) { }\r\n    public void AddResource(string name, System.IO.Stream value, bool closeAfterWrite) { }\r\n    public void AddResource(string name, object value) { }\r\n    public void AddResource(string name, string value) { }\r\n    public void AddResourceData(string name, string typeName, byte[] serializedData) { }\r\n    public void Close() { }\r\n    public void Dispose() { }\r\n    public void Generate() { }\r\n\r\n    // Optional additions if we want to support extensibility\r\n    protected virtual string ResourceReaderTypeName { get { throw null; } }\r\n    protected virtual string ResourceSetTypeName { get { throw null; } }\r\n    protected void AddResourceData(string name, string typeName, object dataContext) { }\r\n    protected virtual void WriteData(System.IO.BinaryWriter writer, object dataContext) { }\r\n\r\n    // New methods that behave similarly to AddResourceData but imply a different form \r\n    // of pre-serialized data.\r\n    public void AddBinaryFormattedResource(string name, string typeName, byte[] value) { }\r\n    public void AddStreamResource(string name, string typeName, byte[] value) { }\r\n    public void AddStreamResource(string name, string typeName, System.IO.Stream value, bool closeAfterWrite) { }\r\n    public void AddTypeConverterResource(string name, string typeName, byte[] value) { }\r\n    public void AddTypeConverterResource(string name, string typeName, string value) { }\t\r\n}\r\n```\r\n\r\n### Alternatives\r\n\r\n<details><summary>expand</summary>\r\n<p>\r\n\r\n1. Extend ResourceReader/Writer\r\n   1. Types are frozen in existing frameworks - won't work for MSBuild which needs to run on desktop.\r\n   1. Doesn't solve the problem for existing frameworks, which MSBuild needs to support\r\n   1. See [details](#details)\r\n\r\n1. Build into ResourceReader/Writer\r\n   1. Essentially imagine the API in this proposal on the existing types instead of new types.\r\n   1. Same issues as option 1.\r\n   1. Requires a revision to resources format or some convention for defining serialization methods.\r\n\r\n1. Wrap ResourceReader/Writer and .resources format\r\n   1. Requires same API as this proposal, but doesn't copy as much code.\r\n   1. Implementation & payload size will be less efficient due to wrapping\r\n\r\n1. Extend only ResourceSet\r\n   1. Still requires Writer API, though one could imagine building this only using ResourceWriter.AddResourceData if you were able to change the ResourceSet name in the generated resources or get the designer to pass it in.\r\n   1. Without a matching Reader is much less efficient than RuntimeResourceSet due to lookup methods being internal.  Once you add a ResourceReader it's effectively the same as the proposal, but places deserialization in ResourceSet instead of the Reader.\r\n   1. This really exposes a gap in the IResourceReader / ResourceReader abstraction.  If lookup strategy must be implemented for reasonable perf, then we should update the abstractions.  One could consider this as our opportunity to do that, using the unsealed virtual Reader as the new abstraction.\r\n\r\n\r\n### Details\r\n\r\n\r\nIf we change inbox types and can constrain runtime to only .NETCoreApp 3.0 we would do the following.  \r\nhttps://github.com/dotnet/corefx/pull/36906/commits/bbb08de505e6e891403a4f50b5b646dc0ec530a7#diff-9a2d6c26f251ad72e355afb8bcb72ca2L18\r\n```c#\r\n// previously sealed\r\npublic class ResourceWriter : System.Resources.IResourceWriter\r\n{\r\n    // new \r\n    protected virtual string ResourceReaderTypeName { get { throw null; } }\r\n    protected virtual string ResourceSetTypeName { get { throw null; } }\r\n    protected void AddResourceData(string name, string typeName, object dataContext) { }\r\n    protected virtual void WriteData(System.IO.BinaryWriter writer, object dataContext) { }\r\n}\r\n```\r\n\r\nhttps://github.com/dotnet/corefx/pull/36906/commits/bbb08de505e6e891403a4f50b5b646dc0ec530a7#diff-147dad3b8d1fabfe7d53faa577442011L69\r\n```c#\r\n// previously sealed\r\npublic class ResourceReader : System.Resources.IResourceReader\r\n{\r\n    // new \r\n    protected virtual int Version { get { throw null; } }\r\n    protected virtual object DeserializeObject(System.IO.BinaryReader reader, Type type) { throw null; }\r\n}\r\n```\r\n\r\nIn addition to these API additions, we need to make [RuntimeResourceSet](https://github.com/dotnet/corefx/blob/eb63183901fbe6afc2be4e1ff0f365fe20cefbf5/src/Common/src/CoreLib/System/Resources/RuntimeResourceSet.cs#L195-L208) usable for derived ResourceReaders by adding a IResourceReader constructor that can upcast to a ResourceReader to give lookup-behavior.  For the current scenarios we don't need it to be made public / unsealed, but it could be.\r\n\r\n```c#\r\ninternal class RuntimeResourceSet\r\n{\r\n    // new \r\n   internal RuntimeResourceSet(IResourceReader reader) { } // if reader is ResourceReader, will do lazy loading.\r\n}\r\n```\r\n</p>\r\n</details>\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/corefx/issues/37041","RelatedDescription":"Open issue \"[Draft] System.Resources API additions for non-primitive objects\" (#37041)"},{"Id":"435330035","IsPullRequest":false,"CreatedAt":"2019-04-18T08:32:08","Actor":"FrankyBoy","Number":"37046","RawContent":null,"Title":"Replace System.IO.File / System.IO.Directory with interfaces","State":"open","Body":"Sorry if this already exists but I couldn't find anything. The only thing remotely similar is [IFileProvider](https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.fileproviders.ifileprovider?view=aspnetcore-2.2) which does not offer write support in any way and read support only through streams.\r\n\r\nI think it would be really helpful to have replacements for the static methods in [System.IO.File](https://docs.microsoft.com/en-us/dotnet/api/system.io.file?view=netcore-2.2) and System.IO.Directory (and potentially others) with an interface that can be injected via DI. Right now I find that on each project that somehow touches files I have some IFileHandler or similar which allows for basic file handling (read/write) without making my code untestable by unit tests. I think this would make much more sense to be included in the standard itself.\r\n\r\nAlso, including such an interface would allow libraries that may need file access to not do so directly. I.e. library can just depend on `IFileHandler` and the library user can implement their own functionality on top of that (maybe they actually want their \"files\" to go to a centralized DB instead of the filesystem?). ","Url":"https://github.com/dotnet/corefx/issues/37046","RelatedDescription":"Open issue \"Replace System.IO.File / System.IO.Directory with interfaces\" (#37046)"},{"Id":"435316404","IsPullRequest":false,"CreatedAt":"2019-01-25T20:20:23","Actor":"yuezengms","Number":"37044","RawContent":null,"Title":"[2.1] Port: \"System.Net.Sockets.SocketException: Address already in use\" on Linux - #32027","State":"open","Body":"Assumption: Duplicate of #32027 which was fixed by #32046 - goal: Port it (once confirmed it is truly duplicate).\r\n\r\n# Issue Title\r\n\r\n\"System.Net.Sockets.SocketException: Address already in use\" on Linux\r\n\r\n# General\r\n\r\nOur .net core(v 2.2.0) services are running on Azure Kubernettes Linux environment. Recently we experimenced a lot of error \"System.Net.Http.HttpRequestException: Address already in use\" while calling dependencies, e.g. Active Directory, CosmosDB and other services. Once the issue started, we kept getting the same errors and had to restart the service to get rid of it. Our http clients are using DNS address, not specific ip and port. The following is the call stack on one example. What can cause such issues and how to fix it?\r\n\r\n```\r\nSystem.Net.Http.HttpRequestException: Address already in use ---> \r\nSystem.Net.Sockets.SocketException: Address already in use#N#   \r\nat System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)#N#   --- \r\nEnd of inner exception stack trace ---#N#   \r\n\r\nat System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)#N#   \r\nat System.Net.Http.HttpConnectionPool.CreateConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)#N#   \r\nat System.Net.Http.HttpConnectionPool.WaitForCreatedConnectionAsync(ValueTask`1 creationTask)#N#   \r\nat System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)#N#   \r\nat System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)#N#   \r\nat System.Net.Http.DiagnosticsHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)#N#   \r\nat System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)#N#   \r\nat Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Http.HttpClientWrapper.GetResponseAsync()#N#   \r\nat Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Http.AdalHttpClient.GetResponseAsync[T](Boolean respondToDeviceAuthChallenge)#N#   \r\nat Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Http.AdalHttpClient.GetResponseAsync[T]()#N#   \r\nat Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Flows.AcquireTokenHandlerBase.SendHttpMessageAsync(IRequestParameters requestParameters)#N#   \r\nat Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Flows.AcquireTokenHandlerBase.SendTokenRequestAsync()#N#   \r\nat Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Flows.AcquireTokenHandlerBase.CheckAndAcquireTokenUsingBrokerAsync()#N#   \r\nat Microsoft.IdentityModel.Clients.ActiveDirectory.Internal.Flows.AcquireTokenHandlerBase.RunAsync()#N#   \r\nat Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext.AcquireTokenForClientCommonAsync(String resource, ClientKey clientKey)#N#   \r\nat Microsoft.IdentityModel.Clients.ActiveDirectory.AuthenticationContext.AcquireTokenAsync(String resource, ClientCredential clientCredential)#N#   \r\n```\r\n","Url":"https://github.com/dotnet/corefx/issues/37044","RelatedDescription":"Open issue \"[2.1] Port: \"System.Net.Sockets.SocketException: Address already in use\" on Linux - #32027\" (#37044)"}],"ResultType":"GitHubIssue"},"Roslyn-Issues":{"Issues":[{"Id":"435334545","IsPullRequest":true,"CreatedAt":"2019-04-20T23:30:06","Actor":"dotnet-bot","Number":"35162","RawContent":null,"Title":"Merge master to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/35162","RelatedDescription":"Closed or merged PR \"Merge master to master-vs-deps\" (#35162)"},{"Id":"435289021","IsPullRequest":true,"CreatedAt":"2019-04-20T22:21:06","Actor":"agocke","Number":"35148","RawContent":null,"Title":"Add version check to enable the pattern-based Index & Range indexers","State":"closed","Body":"This is a \"forward compatibility\" bug, where a user could write code in an older language version that works when it should have failed, thus causing them to accidentally break users on older compiler versions.","Url":"https://github.com/dotnet/roslyn/pull/35148","RelatedDescription":"Closed or merged PR \"Add version check to enable the pattern-based Index & Range indexers\" (#35148)"},{"Id":"435444060","IsPullRequest":false,"CreatedAt":"2019-04-20T21:38:21","Actor":"maca88","Number":"35167","RawContent":null,"Title":"SymbolFinder.FindReferencesAsync returns incorrect result in certain scenarios","State":"open","Body":"By having the following projects:\r\n- `NHibernate.Caches.Common`\r\n\tPackageReferences: `NHibernate`\r\n- `NHibernate.Caches.StackExchangeRedis`\r\n\tPackageReferences: `StackExchange.Redis`, `NHibernate`\r\n\tProjectReferences: `NHibernate.Caches.Common`\r\n\r\n`SymbolFinder.FindReferencesAsync` will return partial results for types that are defined in `NHibernate` package and also for their derived types located in `NHibernate` or `NHibernate.Caches.StackExchangeRedis` assembly.\r\nBy removing `StackExchange.Redis` or `NHibernate.Caches.Common` reference from the project `NHibernate.Caches.StackExchangeRedis`, `SymbolFinder.FindReferencesAsync` starts working as expected.\r\n\r\n\r\n**Version Used**: `3.0.0`, `2.10.0`, `2.7.0`\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Clone https://github.com/maca88/RoslynTest\r\n2. Run `RoslynTest` project\r\n\r\n**Expected Behavior**:\r\n`SymbolFinder.FindReferencesAsync` should return the same result for `ICache`, `CacheBase`, `FakeCache`, `HashtableCache`, `RedisCache`:\r\n```\r\nFindReferencesAsync for method: NHibernate.Cache.ICache.Get(object) from assembly: NHibernate\r\nReference definition: NHibernate.Cache.CacheBase.Get(object)\r\nReference definition: NHibernate.Cache.FakeCache.Get(object)\r\nReference definition: NHibernate.Cache.HashtableCache.Get(object)\r\nReference definition: NHibernate.Cache.ICache.Get(object)\r\nReference definition: NHibernate.Caches.StackExchangeRedis.RedisCache.Get(object)\r\n---------------------------------------------------------------------------------------------\r\nFindReferencesAsync for method: NHibernate.Cache.CacheBase.Get(object) from assembly: NHibernate\r\nReference definition: NHibernate.Cache.CacheBase.Get(object)\r\nReference definition: NHibernate.Cache.FakeCache.Get(object)\r\nReference definition: NHibernate.Cache.HashtableCache.Get(object)\r\nReference definition: NHibernate.Cache.ICache.Get(object)\r\nReference definition: NHibernate.Caches.StackExchangeRedis.RedisCache.Get(object)\r\n---------------------------------------------------------------------------------------------\r\nFindReferencesAsync for method: NHibernate.Cache.FakeCache.Get(object) from assembly: NHibernate\r\nReference definition: NHibernate.Cache.CacheBase.Get(object)\r\nReference definition: NHibernate.Cache.FakeCache.Get(object)\r\nReference definition: NHibernate.Cache.HashtableCache.Get(object)\r\nReference definition: NHibernate.Cache.ICache.Get(object)\r\nReference definition: NHibernate.Caches.StackExchangeRedis.RedisCache.Get(object)\r\n---------------------------------------------------------------------------------------------\r\nFindReferencesAsync for method: NHibernate.Cache.HashtableCache.Get(object) from assembly: NHibernate\r\nReference definition: NHibernate.Cache.CacheBase.Get(object)\r\nReference definition: NHibernate.Cache.FakeCache.Get(object)\r\nReference definition: NHibernate.Cache.HashtableCache.Get(object)\r\nReference definition: NHibernate.Cache.ICache.Get(object)\r\nReference definition: NHibernate.Caches.StackExchangeRedis.RedisCache.Get(object)\r\n---------------------------------------------------------------------------------------------\r\nFindReferencesAsync for method: NHibernate.Caches.StackExchangeRedis.RedisCache.Get(object) from assembly: NHibernate.Caches.StackExchangeRedis\r\nReference definition: NHibernate.Cache.CacheBase.Get(object)\r\nReference definition: NHibernate.Cache.FakeCache.Get(object)\r\nReference definition: NHibernate.Cache.HashtableCache.Get(object)\r\nReference definition: NHibernate.Cache.ICache.Get(object)\r\nReference definition: NHibernate.Caches.StackExchangeRedis.RedisCache.Get(object)\r\n---------------------------------------------------------------------------------------------\r\n```\r\n\r\n**Actual Behavior**:\r\n`SymbolFinder.FindReferencesAsync` returns different results for `ICache`, `CacheBase`, `FakeCache`, `HashtableCache` and `RedisCache`, where none of them contain all the references:\r\n```\r\nFindReferencesAsync for method: NHibernate.Cache.ICache.Get(object) from assembly: NHibernate\r\nReference definition: NHibernate.Cache.CacheBase.Get(object)\r\nReference definition: NHibernate.Cache.FakeCache.Get(object)\r\nReference definition: NHibernate.Cache.HashtableCache.Get(object)\r\nReference definition: NHibernate.Cache.ICache.Get(object)\r\n---------------------------------------------------------------------------------------------\r\nFindReferencesAsync for method: NHibernate.Cache.CacheBase.Get(object) from assembly: NHibernate\r\nReference definition: NHibernate.Cache.CacheBase.Get(object)\r\nReference definition: NHibernate.Cache.ICache.Get(object)\r\nReference definition: NHibernate.Caches.StackExchangeRedis.RedisCache.Get(object)\r\n---------------------------------------------------------------------------------------------\r\nFindReferencesAsync for method: NHibernate.Cache.FakeCache.Get(object) from assembly: NHibernate\r\nReference definition: NHibernate.Cache.CacheBase.Get(object)\r\nReference definition: NHibernate.Cache.FakeCache.Get(object)\r\nReference definition: NHibernate.Cache.ICache.Get(object)\r\nReference definition: NHibernate.Caches.StackExchangeRedis.RedisCache.Get(object)\r\n---------------------------------------------------------------------------------------------\r\nFindReferencesAsync for method: NHibernate.Cache.HashtableCache.Get(object) from assembly: NHibernate\r\nReference definition: NHibernate.Cache.CacheBase.Get(object)\r\nReference definition: NHibernate.Cache.HashtableCache.Get(object)\r\nReference definition: NHibernate.Cache.ICache.Get(object)\r\nReference definition: NHibernate.Caches.StackExchangeRedis.RedisCache.Get(object)\r\n---------------------------------------------------------------------------------------------\r\nFindReferencesAsync for method: NHibernate.Caches.StackExchangeRedis.RedisCache.Get(object) from assembly: NHibernate.Caches.StackExchangeRedis\r\nReference definition: NHibernate.Cache.CacheBase.Get(object)\r\nReference definition: NHibernate.Cache.ICache.Get(object)\r\nReference definition: NHibernate.Caches.StackExchangeRedis.RedisCache.Get(object)\r\n---------------------------------------------------------------------------------------------\r\n```\r\n","Url":"https://github.com/dotnet/roslyn/issues/35167","RelatedDescription":"Open issue \"SymbolFinder.FindReferencesAsync returns incorrect result in certain scenarios\" (#35167)"},{"Id":"435427623","IsPullRequest":false,"CreatedAt":"2019-04-20T18:48:23","Actor":"jcouv","Number":"35166","RawContent":null,"Title":"Warn if `CancellationToken` parameter of async-iterator lacks `[EnumeratorCancellation]`?","State":"open","Body":"\r\nRelates to https://github.com/dotnet/roslyn/issues/24037 (umbrella for async-streams)","Url":"https://github.com/dotnet/roslyn/issues/35166","RelatedDescription":"Open issue \"Warn if `CancellationToken` parameter of async-iterator lacks `[EnumeratorCancellation]`?\" (#35166)"},{"Id":"435427523","IsPullRequest":false,"CreatedAt":"2019-04-20T18:47:13","Actor":"jcouv","Number":"35165","RawContent":null,"Title":"Confirm/clarify rules for `[EnumeratorCancellation]` in OHI scenarios","State":"open","Body":"What are the implications with OHI and the cancellation token decision? Consider the case where I use the attribute on an abstract member or interface. Does that …\r\n- Require the implementor to have the attribute?\r\n- Does the compiler consult the definition or implementation when deciding how to handle the parameter?\r\n\r\nRelates to https://github.com/dotnet/roslyn/issues/24037 (umbrella for async-streams)","Url":"https://github.com/dotnet/roslyn/issues/35165","RelatedDescription":"Open issue \"Confirm/clarify rules for `[EnumeratorCancellation]` in OHI scenarios\" (#35165)"},{"Id":"435327313","IsPullRequest":true,"CreatedAt":"2019-04-20T05:22:27","Actor":"333fred","Number":"35158","RawContent":null,"Title":"Cleanup missed prototype comments.","State":"closed","Body":"@jcouv @dotnet/roslyn-compiler for review.","Url":"https://github.com/dotnet/roslyn/pull/35158","RelatedDescription":"Closed or merged PR \"Cleanup missed prototype comments.\" (#35158)"},{"Id":"435363922","IsPullRequest":false,"CreatedAt":"2019-04-20T04:18:42","Actor":"JamesNK","Number":"35164","RawContent":null,"Title":"Turning off all rules and then enabling desired rules","State":"open","Body":"#### Analyzer package\r\n\r\n[Microsoft.CodeAnalysis.FxCopAnalyzers](https://www.nuget.org/packages/Microsoft.CodeAnalysis.FxCopAnalyzers)\r\n\r\n#### Package Version\r\n\r\nExample: v2.9.2\r\n\r\n#### Repro steps\r\n\r\n1. Add package reference\r\n1. Copy contents of `AllRulesDisabled.ruleset` to local file and reference from csproj\r\n1. Compile\r\n\r\n#### Expected behavior\r\n\r\nNo code analysis warnings because they're all disabled\r\n\r\n#### Actual behavior\r\n\r\nCode analysis warnings, e.g. warning CA2208: Call the ArgumentOutOfRangeException constructor that contains a message and/or paramName parameter.","Url":"https://github.com/dotnet/roslyn/issues/35164","RelatedDescription":"Open issue \"Turning off all rules and then enabling desired rules\" (#35164)"},{"Id":"435252354","IsPullRequest":true,"CreatedAt":"2019-04-20T02:06:47","Actor":"jasonmalinowski","Number":"35141","RawContent":null,"Title":"Merge features/editorconfig-in-compiler back into master","State":"closed","Body":"Merging the feature branch back into master.","Url":"https://github.com/dotnet/roslyn/pull/35141","RelatedDescription":"Closed or merged PR \"Merge features/editorconfig-in-compiler back into master\" (#35141)"},{"Id":"435339636","IsPullRequest":false,"CreatedAt":"2019-04-20T00:49:33","Actor":"genlu","Number":"35163","RawContent":null,"Title":"pre-selection should favor in-scope symbols","State":"open","Body":"From [feedback](https://github.com/dotnet/roslyn/issues/7053#issuecomment-484907098)\r\n\r\n> For some reason it tends to pre-select import completions over regular ones.\r\n>\r\n>![image](https://user-images.githubusercontent.com/788783/56449194-262edf80-62cb-11e9-9115-7fd6026db92c.png)\r\n\r\nIt seems the reason unimport one is favored in this case is because it's considered a better match based on current algorithm (which takes suffix \"<>\" in to account as well)\r\n\r\n","Url":"https://github.com/dotnet/roslyn/issues/35163","RelatedDescription":"Open issue \"pre-selection should favor in-scope symbols\" (#35163)"},{"Id":"435334513","IsPullRequest":true,"CreatedAt":"2019-04-20T00:00:17","Actor":"dotnet-bot","Number":"35161","RawContent":null,"Title":"Merge dev16.1-preview2-vs-deps to master-vs-deps","State":"open","Body":"\nThis is an automatically generated pull request from dev16.1-preview2-vs-deps into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.1-preview2-vs-deps-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/dev16.1-preview2-vs-deps\n# Fix merge conflicts\ngit commit\ngit push upstream merges/dev16.1-preview2-vs-deps-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/35161","RelatedDescription":"Open PR \"Merge dev16.1-preview2-vs-deps to master-vs-deps\" (#35161)"},{"Id":"435331871","IsPullRequest":false,"CreatedAt":"2019-04-19T23:38:04","Actor":"genlu","Number":"35160","RawContent":null,"Title":"Need a long term solution for caching VS completion items","State":"open","Body":"Right now, import completion uses CWT to cache VS completion items to avoid repeated allocations. But we will need to better understand how effective this approach is and decide if there's a better alternative.","Url":"https://github.com/dotnet/roslyn/issues/35160","RelatedDescription":"Open issue \"Need a long term solution for caching VS completion items\" (#35160)"},{"Id":"435331229","IsPullRequest":false,"CreatedAt":"2019-04-19T23:32:58","Actor":"jcouv","Number":"35159","RawContent":null,"Title":"Warn if `[EnumeratorCancellation]` is specified on two parameters?","State":"open","Body":"`static async System.Collections.Generic.IAsyncEnumerable<int> Iter(int value, [DefaultCancellation] CancellationToken token1, [DefaultCancellation] CancellationToken token2)`\r\n\r\nRelates to https://github.com/dotnet/roslyn/pull/35121 (PR implementing the attribute)\r\n\r\nRelates to https://github.com/dotnet/roslyn/issues/24037 (umbrella for async-streams)","Url":"https://github.com/dotnet/roslyn/issues/35159","RelatedDescription":"Open issue \"Warn if `[EnumeratorCancellation]` is specified on two parameters?\" (#35159)"},{"Id":"435326805","IsPullRequest":false,"CreatedAt":"2019-04-19T23:01:41","Actor":"333fred","Number":"35157","RawContent":null,"Title":"Typeless tuples hit debug assert in nullable walker","State":"open","Body":"```C#\r\nclass C\r\n{\r\n    void M()\r\n    {\r\n        _ = (null, 2);\r\n    }\r\n}\r\n```\r\n\r\nHits this:\r\n<details>\r\n\r\n```\r\n[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]       System.InvalidOperationException : \r\n[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]       \r\n[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]       Stack Trace:\r\n[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\\Users\\frsilb\\Documents\\git\\roslyn\\src\\Test\\Utilities\\Portable\\ThrowingTraceListener.cs(24,0): at Microsoft.CodeAnalysis.ThrowingTraceListener.Fail(String message, String detailMessage)\r\n[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]            at System.Diagnostics.TraceListener.Fail(String message)\r\n[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]            at System.Diagnostics.TraceInternal.Fail(String message)\r\n[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]            at System.Diagnostics.Debug.Assert(Boolean condition)\r\n[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\\Users\\frsilb\\Documents\\git\\roslyn\\src\\Compilers\\CSharp\\Portable\\Binder\\Semantics\\Conversions\\ConversionsBase.cs(1898,0): at Microsoft.CodeAnalysis.CSharp.ConversionsBase.GetImplicitTupleLiteralConversion(BoundTupleLiteral source, TypeSymbol destination, HashSet`1& useSiteDiagnostics)\r\n[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\\Users\\frsilb\\Documents\\git\\roslyn\\src\\Compilers\\CSharp\\Portable\\Binder\\Semantics\\Conversions\\ConversionsBase.cs(958,0): at Microsoft.CodeAnalysis.CSharp.ConversionsBase.ClassifyImplicitTupleLiteralConversion(BoundTupleLiteral source, TypeSymbol destination, HashSet`1& useSiteDiagnostics)\r\n[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\\Users\\frsilb\\Documents\\git\\roslyn\\src\\Compilers\\CSharp\\Portable\\Binder\\Semantics\\Conversions\\ConversionsBase.cs(848,0): at Microsoft.CodeAnalysis.CSharp.ConversionsBase.ClassifyImplicitBuiltInConversionFromExpression(BoundExpression sourceExpression, TypeSymbol source, TypeSymbol destination, HashSet`1& useSiteDiagnostics)\r\n[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\\Users\\frsilb\\Documents\\git\\roslyn\\src\\Compilers\\CSharp\\Portable\\Binder\\Semantics\\Conversions\\ConversionsBase.cs(89,0): at Microsoft.CodeAnalysis.CSharp.ConversionsBase.ClassifyImplicitConversionFromExpression(BoundExpression sourceExpression, TypeSymbol destination, HashSet`1& useSiteDiagnostics)\r\n[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\\Users\\frsilb\\Documents\\git\\roslyn\\src\\Compilers\\CSharp\\Portable\\FlowAnalysis\\NullableWalker.cs(3592,0): at Microsoft.CodeAnalysis.CSharp.NullableWalker.GenerateConversion(Conversions conversions, BoundExpression sourceExpression, TypeSymbol sourceType, TypeSymbol destinationType, Boolean fromExplicitCast, Boolean extensionMethodThisArgument)\r\n[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\\Users\\frsilb\\Documents\\git\\roslyn\\src\\Compilers\\CSharp\\Portable\\FlowAnalysis\\NullableWalker.cs(4303,0): at Microsoft.CodeAnalysis.CSharp.NullableWalker.ApplyConversion(BoundExpression node, BoundExpression operandOpt, Conversion conversion, TypeWithAnnotations targetTypeWithNullability, TypeWithState operandType, Boolean checkConversion, Boolean fromExplicitCast, Boolean useLegacyWarnings, AssignmentKind assignmentKind, ParameterSymbol target, Boolean reportTopLevelWarnings, Boolean reportRemainingWarnings, Boolean extensionMethodThisArgument, Optional`1 stateForLambda, Boolean trackMembers, Location location)\r\n[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\\Users\\frsilb\\Documents\\git\\roslyn\\src\\Compilers\\CSharp\\Portable\\FlowAnalysis\\NullableWalker.cs(3814,0): at Microsoft.CodeAnalysis.CSharp.NullableWalker.VisitOptionalImplicitConversion(BoundExpression expr, TypeWithAnnotations targetTypeOpt, Boolean useLegacyWarnings, Boolean trackMembers, AssignmentKind assignmentKind)\r\n[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\\Users\\frsilb\\Documents\\git\\roslyn\\src\\Compilers\\CSharp\\Portable\\FlowAnalysis\\NullableWalker.cs(4744,0): at Microsoft.CodeAnalysis.CSharp.NullableWalker.VisitAssignmentOperator(BoundAssignmentOperator node)\r\n[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\\Users\\frsilb\\Documents\\git\\roslyn\\src\\Compilers\\CSharp\\Portable\\Generated\\BoundNodes.xml.Generated.cs(1506,0): at Microsoft.CodeAnalysis.CSharp.BoundAssignmentOperator.Accept(BoundTreeVisitor visitor)\r\n[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\\Users\\frsilb\\Documents\\git\\roslyn\\src\\Compilers\\CSharp\\Portable\\BoundTree\\BoundTreeVisitors.cs(145,0): at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.Visit(BoundNode node)\r\n[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\\Users\\frsilb\\Documents\\git\\roslyn\\src\\Compilers\\CSharp\\Portable\\FlowAnalysis\\AbstractFlowPass.cs(329,0): at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.VisitExpressionWithoutStackGuard(BoundExpression node)\r\n[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\\Users\\frsilb\\Documents\\git\\roslyn\\src\\Compilers\\CSharp\\Portable\\FlowAnalysis\\NullableWalker.cs(1483,0): at Microsoft.CodeAnalysis.CSharp.NullableWalker.VisitExpressionWithoutStackGuard(BoundExpression node)\r\n[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\\Users\\frsilb\\Documents\\git\\roslyn\\src\\Compilers\\CSharp\\Portable\\BoundTree\\BoundTreeVisitors.cs(223,0): at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(BoundExpression node)\r\n[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\\Users\\frsilb\\Documents\\git\\roslyn\\src\\Compilers\\CSharp\\Portable\\BoundTree\\BoundTreeVisitors.cs(204,0): at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.VisitExpressionWithStackGuard(Int32& recursionDepth, BoundExpression node)\r\n[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\\Users\\frsilb\\Documents\\git\\roslyn\\src\\Compilers\\CSharp\\Portable\\FlowAnalysis\\AbstractFlowPass.cs(321,0): at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.VisitWithStackGuard(BoundNode node)\r\n[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\\Users\\frsilb\\Documents\\git\\roslyn\\src\\Compilers\\CSharp\\Portable\\FlowAnalysis\\AbstractFlowPass.cs(309,0): at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.VisitAlways(BoundNode node)\r\n[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\\Users\\frsilb\\Documents\\git\\roslyn\\src\\Compilers\\CSharp\\Portable\\FlowAnalysis\\AbstractFlowPass.cs(284,0): at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.Visit(BoundNode node)\r\n[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\\Users\\frsilb\\Documents\\git\\roslyn\\src\\Compilers\\CSharp\\Portable\\FlowAnalysis\\NullableWalker.cs(784,0): at Microsoft.CodeAnalysis.CSharp.NullableWalker.VisitRvalue(BoundExpression node)\r\n[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\\Users\\frsilb\\Documents\\git\\roslyn\\src\\Compilers\\CSharp\\Portable\\FlowAnalysis\\AbstractFlowPass.cs(1101,0): at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.VisitExpressionStatement(BoundExpressionStatement node)\r\n[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\\Users\\frsilb\\Documents\\git\\roslyn\\src\\Compilers\\CSharp\\Portable\\Generated\\BoundNodes.xml.Generated.cs(2986,0): at Microsoft.CodeAnalysis.CSharp.BoundExpressionStatement.Accept(BoundTreeVisitor visitor)\r\n[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\\Users\\frsilb\\Documents\\git\\roslyn\\src\\Compilers\\CSharp\\Portable\\BoundTree\\BoundTreeVisitors.cs(145,0): at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.Visit(BoundNode node)\r\n[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\\Users\\frsilb\\Documents\\git\\roslyn\\src\\Compilers\\CSharp\\Portable\\FlowAnalysis\\AbstractFlowPass.cs(324,0): at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.VisitWithStackGuard(BoundNode node)\r\n[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\\Users\\frsilb\\Documents\\git\\roslyn\\src\\Compilers\\CSharp\\Portable\\FlowAnalysis\\AbstractFlowPass.cs(309,0): at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.VisitAlways(BoundNode node)\r\n[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\\Users\\frsilb\\Documents\\git\\roslyn\\src\\Compilers\\CSharp\\Portable\\FlowAnalysis\\AbstractFlowPass.cs(284,0): at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.Visit(BoundNode node)\r\n[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\\Users\\frsilb\\Documents\\git\\roslyn\\src\\Compilers\\CSharp\\Portable\\FlowAnalysis\\AbstractFlowPass.cs(613,0): at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.VisitStatement(BoundStatement statement)\r\n[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\\Users\\frsilb\\Documents\\git\\roslyn\\src\\Compilers\\CSharp\\Portable\\FlowAnalysis\\NullableWalker.cs(1536,0): at Microsoft.CodeAnalysis.CSharp.NullableWalker.VisitStatement(BoundStatement statement)\r\n[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\\Users\\frsilb\\Documents\\git\\roslyn\\src\\Compilers\\CSharp\\Portable\\FlowAnalysis\\AbstractFlowPass.cs(1089,0): at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.VisitStatements(ImmutableArray`1 statements)\r\n[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\\Users\\frsilb\\Documents\\git\\roslyn\\src\\Compilers\\CSharp\\Portable\\FlowAnalysis\\AbstractFlowPass.cs(1081,0): at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.VisitBlock(BoundBlock node)\r\n[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\\Users\\frsilb\\Documents\\git\\roslyn\\src\\Compilers\\CSharp\\Portable\\Generated\\BoundNodes.xml.Generated.cs(2636,0): at Microsoft.CodeAnalysis.CSharp.BoundBlock.Accept(BoundTreeVisitor visitor)\r\n[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\\Users\\frsilb\\Documents\\git\\roslyn\\src\\Compilers\\CSharp\\Portable\\BoundTree\\BoundTreeVisitors.cs(145,0): at Microsoft.CodeAnalysis.CSharp.BoundTreeVisitor.Visit(BoundNode node)\r\n[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\\Users\\frsilb\\Documents\\git\\roslyn\\src\\Compilers\\CSharp\\Portable\\FlowAnalysis\\AbstractFlowPass.cs(324,0): at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.VisitWithStackGuard(BoundNode node)\r\n[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\\Users\\frsilb\\Documents\\git\\roslyn\\src\\Compilers\\CSharp\\Portable\\FlowAnalysis\\AbstractFlowPass.cs(309,0): at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.VisitAlways(BoundNode node)\r\n[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\\Users\\frsilb\\Documents\\git\\roslyn\\src\\Compilers\\CSharp\\Portable\\FlowAnalysis\\AbstractFlowPass.cs(284,0): at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.Visit(BoundNode node)\r\n[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\\Users\\frsilb\\Documents\\git\\roslyn\\src\\Compilers\\CSharp\\Portable\\FlowAnalysis\\AbstractFlowPass.cs(367,0): at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.Scan(Boolean& badRegion)\r\n[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\\Users\\frsilb\\Documents\\git\\roslyn\\src\\Compilers\\CSharp\\Portable\\FlowAnalysis\\NullableWalker.cs(370,0): at Microsoft.CodeAnalysis.CSharp.NullableWalker.Scan(Boolean& badRegion)\r\n[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\\Users\\frsilb\\Documents\\git\\roslyn\\src\\Compilers\\CSharp\\Portable\\FlowAnalysis\\AbstractFlowPass.cs(390,0): at Microsoft.CodeAnalysis.CSharp.AbstractFlowPass`1.Analyze(Boolean& badRegion, Optional`1 initialState)\r\n[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.81]         C:\\Users\\frsilb\\Documents\\git\\roslyn\\src\\Compilers\\CSharp\\Portable\\FlowAnalysis\\NullableWalker.cs(495,0): at Microsoft.CodeAnalysis.CSharp.NullableWalker.Analyze(CSharpCompilation compilation, Symbol symbol, BoundNode node, Conversions conversions, DiagnosticBag diagnostics, Boolean useMethodSignatureParameterTypes, MethodSymbol methodSignatureOpt, ArrayBuilder`1 returnTypes, VariableState initialState, Dictionary`2 analyzedNullabilityMapOpt)\r\n[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.82]         C:\\Users\\frsilb\\Documents\\git\\roslyn\\src\\Compilers\\CSharp\\Portable\\FlowAnalysis\\NullableWalker.cs(385,0): at Microsoft.CodeAnalysis.CSharp.NullableWalker.Analyze(CSharpCompilation compilation, MethodSymbol method, BoundNode node, DiagnosticBag diagnostics)\r\n[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.82]         C:\\Users\\frsilb\\Documents\\git\\roslyn\\src\\Compilers\\CSharp\\Portable\\FlowAnalysis\\DefiniteAssignment.cs(381,0): at Microsoft.CodeAnalysis.CSharp.DefiniteAssignmentPass.Analyze(CSharpCompilation compilation, MethodSymbol member, BoundNode node, DiagnosticBag diagnostics, Boolean requireOutParamsAssigned)\r\n[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.82]         C:\\Users\\frsilb\\Documents\\git\\roslyn\\src\\Compilers\\CSharp\\Portable\\FlowAnalysis\\FlowAnalysisPass.cs(133,0): at Microsoft.CodeAnalysis.CSharp.FlowAnalysisPass.Analyze(CSharpCompilation compilation, MethodSymbol method, BoundBlock block, DiagnosticBag diagnostics)\r\n[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.82]         C:\\Users\\frsilb\\Documents\\git\\roslyn\\src\\Compilers\\CSharp\\Portable\\FlowAnalysis\\FlowAnalysisPass.cs(42,0): at Microsoft.CodeAnalysis.CSharp.FlowAnalysisPass.Rewrite(MethodSymbol method, BoundBlock block, DiagnosticBag diagnostics, Boolean hasTrailingExpression, Boolean originalBodyNested)\r\n[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.82]         C:\\Users\\frsilb\\Documents\\git\\roslyn\\src\\Compilers\\CSharp\\Portable\\Compiler\\MethodCompiler.cs(1015,0): at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileMethod(MethodSymbol methodSymbol, Int32 methodOrdinal, ProcessedFieldInitializers& processedInitializers, SynthesizedSubmissionFields previousSubmissionFields, TypeCompilationState compilationState)\r\n[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.82]         C:\\Users\\frsilb\\Documents\\git\\roslyn\\src\\Compilers\\CSharp\\Portable\\Compiler\\MethodCompiler.cs(498,0): at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileNamedType(NamedTypeSymbol containingType)\r\n[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.82]         C:\\Users\\frsilb\\Documents\\git\\roslyn\\src\\Compilers\\CSharp\\Portable\\Compiler\\MethodCompiler.cs(388,0): at Microsoft.CodeAnalysis.CSharp.MethodCompiler.<>c__DisplayClass21_0.<CompileNamedTypeAsTask>b__0()\r\n[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.82]         C:\\Users\\frsilb\\Documents\\git\\roslyn\\src\\Compilers\\Core\\Portable\\InternalUtilities\\UICultureUtilities.cs(136,0): at Roslyn.Utilities.UICultureUtilities.<>c__DisplayClass5_0.<WithCurrentUICulture>b__0()\r\n[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.82]            at System.Threading.Tasks.Task.InnerInvoke()\r\n[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.82]            at System.Threading.Tasks.Task.Execute()\r\n[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.82]         --- End of stack trace from previous location where exception was thrown ---\r\n[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.82]            at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.82]            at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.82]            at System.Runtime.CompilerServices.TaskAwaiter.GetResult()\r\n[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.82]         C:\\Users\\frsilb\\Documents\\git\\roslyn\\src\\Compilers\\CSharp\\Portable\\Compiler\\MethodCompiler.cs(303,0): at Microsoft.CodeAnalysis.CSharp.MethodCompiler.WaitForWorkers()\r\n[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.82]         C:\\Users\\frsilb\\Documents\\git\\roslyn\\src\\Compilers\\CSharp\\Portable\\Compiler\\MethodCompiler.cs(144,0): at Microsoft.CodeAnalysis.CSharp.MethodCompiler.CompileMethodBodies(CSharpCompilation compilation, PEModuleBuilder moduleBeingBuiltOpt, Boolean emittingPdb, Boolean emitTestCoverageData, Boolean hasDeclarationErrors, DiagnosticBag diagnostics, Predicate`1 filterOpt, CancellationToken cancellationToken)\r\n[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.82]         C:\\Users\\frsilb\\Documents\\git\\roslyn\\src\\Compilers\\CSharp\\Portable\\Compilation\\CSharpCompilation.cs(2334,0): at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.GetDiagnosticsForAllMethodBodies(DiagnosticBag diagnostics, CancellationToken cancellationToken)\r\n[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.82]         C:\\Users\\frsilb\\Documents\\git\\roslyn\\src\\Compilers\\CSharp\\Portable\\Compilation\\CSharpCompilation.cs(2303,0): at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.GetDiagnostics(CompilationStage stage, Boolean includeEarlierStages, DiagnosticBag diagnostics, CancellationToken cancellationToken)\r\n[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.82]         C:\\Users\\frsilb\\Documents\\git\\roslyn\\src\\Compilers\\CSharp\\Portable\\Compilation\\CSharpCompilation.cs(2218,0): at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.GetDiagnostics(CompilationStage stage, Boolean includeEarlierStages, CancellationToken cancellationToken)\r\n[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.82]         C:\\Users\\frsilb\\Documents\\git\\roslyn\\src\\Compilers\\CSharp\\Portable\\Compilation\\CSharpCompilation.cs(2212,0): at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.GetDiagnostics(CancellationToken cancellationToken)\r\n[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.82]         C:\\Users\\frsilb\\Documents\\git\\roslyn\\src\\Test\\Utilities\\Portable\\Diagnostics\\DiagnosticExtensions.cs(99,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.VerifyDiagnostics[TCompilation](TCompilation c, DiagnosticDescription[] expected)\r\n[4/19/2019 15:58:37 Informational] [xUnit.net 00:00:09.82]         C:\\Users\\frsilb\\Documents\\git\\roslyn\\src\\Compilers\\CSharp\\Test\\Semantic\\Semantics\\NullableReferenceTypesTests.cs(46349,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.Semantics.NullableReferenceTypesTests.TupleTypeInference_08()\r\n```\r\n\r\n</details>","Url":"https://github.com/dotnet/roslyn/issues/35157","RelatedDescription":"Open issue \"Typeless tuples hit debug assert in nullable walker\" (#35157)"},{"Id":"435325820","IsPullRequest":false,"CreatedAt":"2019-04-19T22:55:07","Actor":"chborl","Number":"35156","RawContent":null,"Title":"📝Convert method in Complete Statement to recursive","State":"open","Body":"📝 File a follow-up issue to convert this method from recursive to iterative. We don't want to trigger a stack overflow when semicolon is typed within very very very very deeply nested parentheses.\r\n\r\n_Originally posted by @sharwell in https://github.com/dotnet/roslyn/pull/35024_","Url":"https://github.com/dotnet/roslyn/issues/35156","RelatedDescription":"Open issue \"📝Convert method in Complete Statement to recursive\" (#35156)"},{"Id":"435324008","IsPullRequest":true,"CreatedAt":"2019-04-19T22:43:56","Actor":"ivanbasov","Number":"35155","RawContent":null,"Title":"VisualBasic semantic model does not recognize overloads at chained queries","State":"open","Body":"Fix https://github.com/dotnet/roslyn/issues/35096","Url":"https://github.com/dotnet/roslyn/pull/35155","RelatedDescription":"Open PR \"VisualBasic semantic model does not recognize overloads at chained queries\" (#35155)"},{"Id":"435321901","IsPullRequest":true,"CreatedAt":"2019-04-19T22:31:17","Actor":"genlu","Number":"35154","RawContent":null,"Title":"Avoid caching VS completion items for non-import items","State":"open","Body":"This should get us pass RPS.\r\n\r\n@heejaechang @jinujoseph @jasonmalinowski @ivanbasov \r\n\r\nI have kicked off a signed build for test insertion here (based on 16.1-preview2-vs-deps):\r\nhttps://devdiv.visualstudio.com/DefaultCollection/DevDiv/_build/results?buildId=2606459","Url":"https://github.com/dotnet/roslyn/pull/35154","RelatedDescription":"Open PR \"Avoid caching VS completion items for non-import items\" (#35154)"},{"Id":"435321697","IsPullRequest":true,"CreatedAt":"2019-04-19T22:30:06","Actor":"dibarbet","Number":"35153","RawContent":null,"Title":"Add telemetry to toggle line comment.","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/35153","RelatedDescription":"Open PR \"Add telemetry to toggle line comment.\" (#35153)"},{"Id":"435317521","IsPullRequest":false,"CreatedAt":"2019-04-19T22:06:55","Actor":"JoeRobich","Number":"35152","RawContent":null,"Title":"StackAllocSpanExpressionsTests.ConversionFromPointerStackAlloc_UserDefined_Explicit Failed","State":"open","Body":"Linux coreclr - [Test Logs](https://dev.azure.com/dnceng/public/_build/results?buildId=161907&view=ms.vss-test-web.build-test-results-tab) - attempt 1\r\n\r\n```\r\nMicrosoft.CodeAnalysis.CSharp.UnitTests.StackAllocSpanExpressionsTests.ConversionFromPointerStackAlloc_UserDefined_Explicit [FAIL]\r\n\r\nSystem.AggregateException : One or more errors occurred. (One or more errors occurred. (Object reference not set to an instance of an object.))\r\n---- System.AggregateException : One or more errors occurred. (Object reference not set to an instance of an object.)\r\n-------- System.NullReferenceException : Object reference not set to an instance of an object.\r\n  Stack Trace:\r\n     at System.Threading.Tasks.TaskReplicator.Run[TState](ReplicatableUserAction`1 action, ParallelOptions options, Boolean stopOnFirstFailure)\r\n     at System.Threading.Tasks.Parallel.ForWorker[TLocal](Int32 fromInclusive, Int32 toExclusive, ParallelOptions parallelOptions, Action`1 body, Action`2 bodyWithState, Func`4 bodyWithLocal, Func`1 localInit, Action`1 localFinally)\r\n  --- End of stack trace from previous location where exception was thrown ---\r\n     at System.Threading.Tasks.Parallel.ThrowSingleCancellationExceptionOrOtherException(ICollection exceptions, CancellationToken cancelToken, Exception otherException)\r\n     at System.Threading.Tasks.Parallel.ForWorker[TLocal](Int32 fromInclusive, Int32 toExclusive, ParallelOptions parallelOptions, Action`1 body, Action`2 bodyWithState, Func`4 bodyWithLocal, Func`1 localInit, Action`1 localFinally)\r\n     at System.Threading.Tasks.Parallel.For(Int32 fromInclusive, Int32 toExclusive, ParallelOptions parallelOptions, Action`1 body)\r\n  /_/src/Compilers/CSharp/Portable/Symbols/Source/SourceNamespaceSymbol_Completion.cs(53,0): at Microsoft.CodeAnalysis.CSharp.Symbols.SourceNamespaceSymbol.ForceComplete(SourceLocation locationOpt, CancellationToken cancellationToken)\r\n  /_/src/Compilers/CSharp/Portable/Symbols/Source/SourceModuleSymbol.cs(259,0): at Microsoft.CodeAnalysis.CSharp.Symbols.SourceModuleSymbol.ForceComplete(SourceLocation locationOpt, CancellationToken cancellationToken)\r\n  /_/src/Compilers/CSharp/Portable/Symbols/Source/SourceAssemblySymbol.cs(908,0): at Microsoft.CodeAnalysis.CSharp.Symbols.SourceAssemblySymbol.ForceComplete(SourceLocation locationOpt, CancellationToken cancellationToken)\r\n  /_/src/Compilers/CSharp/Portable/Compilation/CSharpCompilation.cs(2350,0): at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.GetSourceDeclarationDiagnostics(SyntaxTree syntaxTree, Nullable`1 filterSpanWithinTree, Func`4 locationFilterOpt, CancellationToken cancellationToken)\r\n  /_/src/Compilers/CSharp/Portable/Compilation/CSharpCompilation.cs(2237,0): at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.GetDiagnostics(CompilationStage stage, Boolean includeEarlierStages, DiagnosticBag diagnostics, CancellationToken cancellationToken)\r\n  /_/src/Compilers/CSharp/Portable/Compilation/CSharpCompilation.cs(2165,0): at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.GetDiagnostics(CompilationStage stage, Boolean includeEarlierStages, CancellationToken cancellationToken)\r\n  /_/src/Compilers/CSharp/Portable/Compilation/CSharpCompilation.cs(2159,0): at Microsoft.CodeAnalysis.CSharp.CSharpCompilation.GetDiagnostics(CancellationToken cancellationToken)\r\n  /_/src/Test/Utilities/Portable/Diagnostics/DiagnosticExtensions.cs(99,0): at Microsoft.CodeAnalysis.DiagnosticExtensions.VerifyDiagnostics[TCompilation](TCompilation c, DiagnosticDescription[] expected)\r\n  /_/src/Compilers/Test/Utilities/CSharp/CSharpTestBase.cs(1790,0): at Microsoft.CodeAnalysis.CSharp.Test.Utilities.CSharpTestBase.CreateCompilationWithMscorlibAndSpan(String text, CSharpCompilationOptions options, CSharpParseOptions parseOptions)\r\n  /_/src/Compilers/CSharp/Test/Semantic/Semantics/StackAllocSpanExpressionsTests.cs(96,0): at Microsoft.CodeAnalysis.CSharp.UnitTests.StackAllocSpanExpressionsTests.ConversionFromPointerStackAlloc_UserDefined_Explicit()\r\n  ----- Inner Stack Trace -----\r\n     at System.Threading.Tasks.TaskReplicator.Run[TState](ReplicatableUserAction`1 action, ParallelOptions options, Boolean stopOnFirstFailure)\r\n     at System.Threading.Tasks.Parallel.ForWorker[TLocal](Int32 fromInclusive, Int32 toExclusive, ParallelOptions parallelOptions, Action`1 body, Action`2 bodyWithState, Func`4 bodyWithLocal, Func`1 localInit, Action`1 localFinally)\r\n  --- End of stack trace from previous location where exception was thrown ---\r\n     at System.Threading.Tasks.Parallel.ThrowSingleCancellationExceptionOrOtherException(ICollection exceptions, CancellationToken cancelToken, Exception otherException)\r\n     at System.Threading.Tasks.Parallel.ForWorker[TLocal](Int32 fromInclusive, Int32 toExclusive, ParallelOptions parallelOptions, Action`1 body, Action`2 bodyWithState, Func`4 bodyWithLocal, Func`1 localInit, Action`1 localFinally)\r\n     at System.Threading.Tasks.Parallel.For(Int32 fromInclusive, Int32 toExclusive, ParallelOptions parallelOptions, Action`1 body)\r\n  /_/src/Compilers/CSharp/Portable/Symbols/Source/SourceNamespaceSymbol_Completion.cs(53,0): at Microsoft.CodeAnalysis.CSharp.Symbols.SourceNamespaceSymbol.ForceComplete(SourceLocation locationOpt, CancellationToken cancellationToken)\r\n  /_/src/Compilers/CSharp/Portable/Symbols/Symbol.cs(727,0): at Microsoft.CodeAnalysis.CSharp.Symbol.ForceCompleteMemberByLocation(SourceLocation locationOpt, Symbol member, CancellationToken cancellationToken)\r\n  /_/src/Compilers/CSharp/Portable/Symbols/Source/SourceNamespaceSymbol_Completion.cs(56,0): at Microsoft.CodeAnalysis.CSharp.Symbols.SourceNamespaceSymbol.<>c__DisplayClass49_1.<ForceComplete>b__0(Int32 i)\r\n  /_/src/Compilers/Core/Portable/InternalUtilities/UICultureUtilities.cs(166,0): at Roslyn.Utilities.UICultureUtilities.<>c__DisplayClass6_0`1.<WithCurrentUICulture>b__0(T param)\r\n     at System.Threading.Tasks.Parallel.<>c__DisplayClass19_0`1.<ForWorker>b__1(RangeWorker& currentWorker, Int32 timeout, Boolean& replicationDelegateYieldedBeforeCompletion)\r\n  --- End of stack trace from previous location where exception was thrown ---\r\n     at System.Threading.Tasks.Parallel.<>c__DisplayClass19_0`1.<ForWorker>b__1(RangeWorker& currentWorker, Int32 timeout, Boolean& replicationDelegateYieldedBeforeCompletion)\r\n     at System.Threading.Tasks.TaskReplicator.Replica`1.ExecuteAction(Boolean& yieldedBeforeCompletion)\r\n     at System.Threading.Tasks.TaskReplicator.Replica.Execute()\r\n  ----- Inner Stack Trace -----\r\n  /_/src/Compilers/CSharp/Portable/Symbols/Source/SourcePropertyAccessorSymbol.cs(376,0): at Microsoft.CodeAnalysis.CSharp.Symbols.SourcePropertyAccessorSymbol.ComputeReturnType(DiagnosticBag diagnostics)\r\n  /_/src/Compilers/CSharp/Portable/Symbols/Source/SourcePropertyAccessorSymbol.cs(275,0): at Microsoft.CodeAnalysis.CSharp.Symbols.SourcePropertyAccessorSymbol.MethodChecks(DiagnosticBag diagnostics)\r\n  /_/src/Compilers/CSharp/Portable/Symbols/Source/SourceMemberMethodSymbol.cs(293,0): at Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberMethodSymbol.LazyMethodChecks()\r\n  /_/src/Compilers/CSharp/Portable/Symbols/Source/SourceMemberMethodSymbol.cs(749,0): at Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberMethodSymbol.get_OverriddenOrHiddenMembers()\r\n  /_/src/Compilers/CSharp/Portable/Symbols/Source/SourceMemberContainerSymbol_ImplementationChecks.cs(564,0): at Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberContainerTypeSymbol.CheckMembersAgainstBaseType(DiagnosticBag diagnostics, CancellationToken cancellationToken)\r\n  /_/src/Compilers/CSharp/Portable/Symbols/Source/SourceMemberContainerSymbol_ImplementationChecks.cs(31,0): at Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberContainerTypeSymbol.GetSynthesizedExplicitImplementations(CancellationToken cancellationToken)\r\n  /_/src/Compilers/CSharp/Portable/Symbols/Source/SourceMemberContainerSymbol.cs(503,0): at Microsoft.CodeAnalysis.CSharp.Symbols.SourceMemberContainerTypeSymbol.ForceComplete(SourceLocation locationOpt, CancellationToken cancellationToken)\r\n  /_/src/Compilers/CSharp/Portable/Symbols/Symbol.cs(727,0): at Microsoft.CodeAnalysis.CSharp.Symbol.ForceCompleteMemberByLocation(SourceLocation locationOpt, Symbol member, CancellationToken cancellationToken)\r\n  /_/src/Compilers/CSharp/Portable/Symbols/Source/SourceNamespaceSymbol_Completion.cs(56,0): at Microsoft.CodeAnalysis.CSharp.Symbols.SourceNamespaceSymbol.<>c__DisplayClass49_1.<ForceComplete>b__0(Int32 i)\r\n  /_/src/Compilers/Core/Portable/InternalUtilities/UICultureUtilities.cs(166,0): at Roslyn.Utilities.UICultureUtilities.<>c__DisplayClass6_0`1.<WithCurrentUICulture>b__0(T param)\r\n     at System.Threading.Tasks.Parallel.<>c__DisplayClass19_0`1.<ForWorker>b__1(RangeWorker& currentWorker, Int32 timeout, Boolean& replicationDelegateYieldedBeforeCompletion)\r\n  --- End of stack trace from previous location where exception was thrown ---\r\n     at System.Threading.Tasks.Parallel.<>c__DisplayClass19_0`1.<ForWorker>b__1(RangeWorker& currentWorker, Int32 timeout, Boolean& replicationDelegateYieldedBeforeCompletion)\r\n     at System.Threading.Tasks.TaskReplicator.Replica`1.ExecuteAction(Boolean& yieldedBeforeCompletion)\r\n     at System.Threading.Tasks.TaskReplicator.Replica.Execute()\r\n```","Url":"https://github.com/dotnet/roslyn/issues/35152","RelatedDescription":"Open issue \"StackAllocSpanExpressionsTests.ConversionFromPointerStackAlloc_UserDefined_Explicit Failed\" (#35152)"},{"Id":"435309658","IsPullRequest":false,"CreatedAt":"2019-04-19T21:27:42","Actor":"333fred","Number":"35151","RawContent":null,"Title":"Reinfer GetEnumerator type based on input type.","State":"open","Body":"```C#\r\nusing System.Collections;\r\nclass C\r\n{\r\n    void M1(IEnumerator e)\r\n    {\r\n        var enumerable1 = Create(e);\r\n        foreach (var i in enumerable1)\r\n        {\r\n        }\r\n\r\n        e = null; // 1\r\n        var enumerable2 = Create(e);\r\n        foreach (var i in enumerable2) // 2\r\n        {\r\n        }\r\n    }\r\n\r\n    void M2(IEnumerator? e)\r\n    {\r\n        var enumerable1 = Create(e);\r\n        foreach (var i in enumerable1) // 3\r\n        {\r\n        }\r\n\r\n        if (e == null) return;\r\n        var enumerable2 = Create(e);\r\n        foreach (var i in enumerable2)\r\n        {\r\n        }\r\n    }\r\n    static Enumerable<T> Create<T>(T t) where T : IEnumerator? => throw null!;\r\n}\r\n\r\nclass Enumerable<T> where T : IEnumerator?\r\n{\r\n    public T GetEnumerator() => throw null!;\r\n}\r\n```\r\n\r\nThis test should have warnings on the `foreach`s indicated. In addition to the `GetEnumerator` reinference, this also exposes that when we do the visit of the `foreach` expression, we need to explicitly remove implicit conversions from the expression and call `ApplyConversion` ourselves.","Url":"https://github.com/dotnet/roslyn/issues/35151","RelatedDescription":"Open issue \"Reinfer GetEnumerator type based on input type.\" (#35151)"},{"Id":"435279863","IsPullRequest":false,"CreatedAt":"2019-04-19T21:20:09","Actor":"safern","Number":"35147","RawContent":null,"Title":"Generic constraints doesn't respect nullable annotations when contraint is a base type constraint","State":"closed","Body":"**Version Used**: \r\nlatest from master in sharplab.\r\n\r\n**Steps to Reproduce**:\r\n```cs\r\npublic class C {\r\n    public void M<T>(T a) where T : class? {\r\n    }\r\n}\r\n```\r\n\r\nThis correctly emmits a `NullableAttribute(2)` in the generic parameter.\r\n\r\nHowever if I do:\r\n```cs\r\npublic class C {\r\n    public void M<T>(T a) where T : Attribute? {\r\n    }\r\n}\r\n```\r\n\r\nThis will not even generate a `NullableAttribute` into the generic param.\r\n\r\nhttps://sharplab.io/#v2:EYLgtghgzgLgpgJwDQBMQGoA+BiAdgVwBtCJhC4ACOXU8gWACgABABgqYEYBuR19jgCw8GvAMzsATBQDCFAN6MKS9uKYCKAWQA8AFQB8ACh0UIASgoB3ABaJKxkBQCCMGAgCWwfPAD88xcoBfRgCgA==\r\n\r\ncc: @dotnet/nullablefc @chsienki @jaredpar @cston \r\n","Url":"https://github.com/dotnet/roslyn/issues/35147","RelatedDescription":"Closed issue \"Generic constraints doesn't respect nullable annotations when contraint is a base type constraint\" (#35147)"},{"Id":"435303620","IsPullRequest":true,"CreatedAt":"2019-04-19T21:01:30","Actor":"jasonmalinowski","Number":"35150","RawContent":null,"Title":"Synchronize AnalyzerConfig documents when creating OOP solutions","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/35150","RelatedDescription":"Open PR \"Synchronize AnalyzerConfig documents when creating OOP solutions\" (#35150)"},{"Id":"435255195","IsPullRequest":true,"CreatedAt":"2019-04-19T20:13:17","Actor":"333fred","Number":"35143","RawContent":null,"Title":"Merge features/nullable api","State":"closed","Body":"Merges features/nullable-api into master. All commits have been reviewed in the branch.","Url":"https://github.com/dotnet/roslyn/pull/35143","RelatedDescription":"Closed or merged PR \"Merge features/nullable api\" (#35143)"},{"Id":"435291011","IsPullRequest":false,"CreatedAt":"2019-04-19T20:11:03","Actor":"dotpaul","Number":"35149","RawContent":null,"Title":"Analyzer driver invokes compilation end action twice when calling Compilation.GetAnalyzerDiagnosticsAsync() and .GetAllDiagnosticsAsync()","State":"open","Body":"**Version Used**: Microsoft.CodeAnalysis.dll 2.9.0\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Create an analyzer that registers a compilation end action callback.\r\n2. Run that analyzer via CompilationWithAnalyzers.GetAnalyzerDiagnosticsAsync() and CompilationWithAnalyzers.GetAllDiagnosticsAsync().\r\n\r\nFor an example, see DoNotUseInsecureDeserializerJavaScriptSerializerWithSimpleTypeResolver.cs and DiagnosticExtensions.cs and run unit tests in DoNotUseInsecureDeserializerJavascriptSerializerWithSimpleTypeResolverTests.cs, in https://github.com/dotnet/roslyn-analyzers/tree/63cae7f3fb0fc575b18ca637fdff9427b57ef176  Note the debug output.\r\n\r\n**Expected Behavior**:\r\nCompilation start action invoked with Compilation object #A.\r\nCompilation end action invoked with Compilation object #A.\r\n\r\n_Or_\r\n\r\nCompilation start action invoked with Compilation object #A.\r\nCompilation end action invoked with Compilation object #A.\r\nCompilation start action invoked with Compilation object #B.\r\nCompilation end action invoked with Compilation object #B.\r\n\r\n**Actual Behavior**:\r\nCompilation start action invoked with Compilation object #A.\r\nCompilation end action invoked with Compilation object #A.\r\nCompilation end action invoked with Compilation object #B.","Url":"https://github.com/dotnet/roslyn/issues/35149","RelatedDescription":"Open issue \"Analyzer driver invokes compilation end action twice when calling Compilation.GetAnalyzerDiagnosticsAsync() and .GetAllDiagnosticsAsync()\" (#35149)"},{"Id":"435276758","IsPullRequest":false,"CreatedAt":"2019-04-19T19:13:40","Actor":"tannergooding","Number":"35146","RawContent":null,"Title":"Compiler doesn't take readonly members into account for span safety rules","State":"open","Body":"The language currently disallows you from passing a `Span<T>` to an instance method of a ref struct, unless that ref struct is also `readonly` or an `in` extension method.\r\n\r\nThe compiler should presumably also take into consideration whether a given member is itself `readonly` on a mutable instance struct and allow that as well.\r\n\r\nFor reference: https://sharplab.io/#v2:EYLgtghgzgLgpgJwDQxASwDYB8ACAGAAhwEYBuAWACgcBmAhOCAEwHsA7DAT3rgDMDYCAK4BjGAQDKAHgAqAPgIBvKgVVE6OACwEAsgAoJABwhtZCgB4BKFWuWU1BAL5VnlKrR79Bo8RIBMZko2qh4MzOxcRNr6RiaBVsFB9mquru4axABsRH4EAMJUdg4eQmxQELxwRFlRBAByBlLAnPAKwNbJqkUOarGmAEItcBYEALwCMBAiANYQGBgsIgTN8ADaAKwAuhSdPcAAdPpWOw6uDoklZRVVJNla9QYBK8PLHQ7dPZLGA0Mj47BTWbzRbLIYbbaJBwAeihBAAouZDHAxHAmAQYCwCAB3FgIaZIARoNgiKr6SwENBQAgmNgsSbwNEYgi08RgIT0qowAAWVSJAOJcCQkLUMOpbEZPIYvFxVREJgA5OJYDKCOZhaoDkdLCcUi4gA","Url":"https://github.com/dotnet/roslyn/issues/35146","RelatedDescription":"Open issue \"Compiler doesn't take readonly members into account for span safety rules\" (#35146)"},{"Id":"435267697","IsPullRequest":true,"CreatedAt":"2019-04-19T18:39:26","Actor":"AlekseyTs","Number":"35145","RawContent":null,"Title":"Implement an alternative way to break cycles while calculating IsValueType/IsReferenceType for a type parameter.","State":"open","Body":"Fixes #30081.","Url":"https://github.com/dotnet/roslyn/pull/35145","RelatedDescription":"Open PR \"Implement an alternative way to break cycles while calculating IsValueType/IsReferenceType for a type parameter.\" (#35145)"},{"Id":"435255700","IsPullRequest":true,"CreatedAt":"2019-04-19T17:54:33","Actor":"ryzngard","Number":"35144","RawContent":null,"Title":"More Pull Members Up MAS Fixes","State":"open","Body":"* Use `Button` instead of `vs:Button` to handle high contrast better\r\n* Dynamically set the help text so screen readers don't always read that something is invalid for an interface","Url":"https://github.com/dotnet/roslyn/pull/35144","RelatedDescription":"Open PR \"More Pull Members Up MAS Fixes\" (#35144)"},{"Id":"435235034","IsPullRequest":false,"CreatedAt":"2019-04-19T16:38:08","Actor":"jcouv","Number":"35140","RawContent":null,"Title":"`#error version` should display product version","State":"open","Body":"The compiler version in Core 3 preview 4 shows as '3.100.19.20907 (01f3eb10)' when I include `#error version` in the code of a simple console app.\r\n\r\nBut when I look at the Roslyn commit 01f3eb10\r\nhttps://github.com/dotnet/roslyn/blob/01f3eb103049e2c93e0516c7d50908031deaca74/eng/Versions.props\r\nI see that the version number should be 3.1.0 beta2 or something.\r\n\r\n\r\nWhen I look at the binary \"C:\\Program Files\\dotnet\\sdk\\3.0.100-preview4-011223\\Roslyn\\bincore\\Microsoft.CodeAnalysis.dll\" I see both 3.100 and 3.1:\r\n ![file-version](https://user-images.githubusercontent.com/12466233/56433714-ada62f80-6286-11e9-99ae-1e8df20af9ca.png)\r\n\r\nExpected:\r\n`#error version` should display `3.1.0-beta2-...`\r\n\r\nProposal: \r\n`#error version` should pull the version number from `AssemblyInformationalVersionAttribute` instead:\r\n`[assembly: AssemblyInformationalVersion(\"3.1.0-beta1-19162-08+b02e2c50a2f2aeabb5b4e5d850c65ad8686848e3\")]`","Url":"https://github.com/dotnet/roslyn/issues/35140","RelatedDescription":"Open issue \"`#error version` should display product version\" (#35140)"},{"Id":"435193758","IsPullRequest":false,"CreatedAt":"2019-04-19T14:21:42","Actor":"sharwell","Number":"35139","RawContent":null,"Title":"Find References results should distinguish direct and indirect references","State":"open","Body":"See discussion in #34617.\r\n\r\nCurrently Find All References on a named type returns references to both the type itself and references to the constructor(s). In this and similar cases, the `FinderLocation` should indicate whether the location is a direct reference to the symbol passed to Find All References, or to a related symbol.\r\n\r\nThe Find All References presenter should be updated to not show references to a related symbol on the searched symbol whenever the related symbol will also be shown in the results. For example the following image shows a reference location that should not have been presented because it is a duplicate:\r\n\r\n![image](https://user-images.githubusercontent.com/1408396/56428465-0c6aa980-6285-11e9-8ee0-ef35a4189040.png)\r\n\r\nRelated to #32738","Url":"https://github.com/dotnet/roslyn/issues/35139","RelatedDescription":"Open issue \"Find References results should distinguish direct and indirect references\" (#35139)"},{"Id":"435179266","IsPullRequest":false,"CreatedAt":"2019-04-19T13:33:57","Actor":"sharwell","Number":"35138","RawContent":null,"Title":"VisualStudioWorkspaceDiagnosticAnalyzerProviderService should fail gracefully","State":"open","Body":"**Version Used**: 7d1eef24fc5139c359986120b2660eb9d474e3d8\r\n\r\nCurrently a failure in the constructor causes Visual Studio to crash. #34454 reduces but does not eliminate the chances of this occurring. This implementation should be updated to throw an exception from `GetHostDiagnosticAnalyzerPackages()` rather than crash the process in the constructor.\r\n\r\n:link: Identified during review of #34454\r\n:link: This is related to #35137 and should probably be fixed at the same time","Url":"https://github.com/dotnet/roslyn/issues/35138","RelatedDescription":"Open issue \"VisualStudioWorkspaceDiagnosticAnalyzerProviderService should fail gracefully\" (#35138)"},{"Id":"435252472","IsPullRequest":false,"CreatedAt":"2019-04-19T05:48:12","Actor":"vinaychandra","Number":"35142","RawContent":null,"Title":"Using range operator causes InvalidProgramException","State":"open","Body":"# Issue Title\r\n\r\nUsing range operator causes InvalidProgramException in the latest dotnet core preview\r\n\r\n# General\r\n\r\nDonet Core Version: 3 Preview 4\r\nVisual Studio: 16.0.2\r\n\r\nRunning an MsTest v2 that targets netcore3.0 which tests another netcore3.0 library that uses the new range operator causes an `InvalidProgramException`\r\n\r\nExample code used in the library:\r\n`var index = query[0..^1] + (char)(query[^1] + 1);`\r\n\r\nExample that worked\r\n`var index = query.Substring(0, query.Length - 1) + query[query.Length - 1];`\r\n\r\nException:\r\n```\r\nException Message: Common Language Runtime detected an invalid program.\r\n```","Url":"https://github.com/dotnet/roslyn/issues/35142","RelatedDescription":"Open issue \"Using range operator causes InvalidProgramException\" (#35142)"}],"ResultType":"GitHubIssue"},"CoreRT-Issues":{"Issues":[{"Id":"435405893","IsPullRequest":true,"CreatedAt":"2019-04-20T14:34:44","Actor":"MichalStrehovsky","Number":"7331","RawContent":null,"Title":"Implement NativeLibrary API on CoreRT","State":"open","Body":"The only thing that's missing is the DllImportResolver. It's easy, but I don't want to bloat this code review any more than is necessary. This is a lot of code.","Url":"https://github.com/dotnet/corert/pull/7331","RelatedDescription":"Open PR \"Implement NativeLibrary API on CoreRT\" (#7331)"},{"Id":"434505045","IsPullRequest":true,"CreatedAt":"2019-04-20T00:07:07","Actor":"jkotas","Number":"7320","RawContent":null,"Title":"Update objwriter version","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7320","RelatedDescription":"Closed or merged PR \"Update objwriter version\" (#7320)"},{"Id":"435226482","IsPullRequest":true,"CreatedAt":"2019-04-19T18:19:33","Actor":"Dotnet-GitSync-Bot","Number":"7330","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub @krwq @safern","Url":"https://github.com/dotnet/corert/pull/7330","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#7330)"},{"Id":"433456685","IsPullRequest":false,"CreatedAt":"2019-04-19T16:30:18","Actor":"josephmoresena","Number":"7307","RawContent":null,"Title":"Compile Gui.cs example win-x64","State":"closed","Body":"I am trying to compile an executable that includes https://github.com/migueldeicaza/gui.cs\r\nWhen I compile in Linux all is sucessfully, but when I try to compile in Windows I get the following error:\r\n`\r\nTerminal.obj : error LNK2001: unresolved external symbol dlopen [C:\\GitHub\\gui.cs\\Example\\Example.csproj]\r\nTerminal.obj : error LNK2001: unresolved external symbol dlsym [C:\\GitHub\\gui.cs\\Example\\Example.csproj]\r\nbin\\Debug\\netcoreapp2.2\\win-x64\\native\\Terminal.exe : fatal error LNK1120: 2 unresolved externals [C:\\GitHub\\gui.cs\\Example\\Example.csproj]`\r\nThe problem is related to a `[DllImport (\"__Internal\")]` for compatibility with Mono. \r\nI'm using IlCompiler version 1.0.0-alpha-27615-01\r\n","Url":"https://github.com/dotnet/corert/issues/7307","RelatedDescription":"Closed issue \"Compile Gui.cs example win-x64\" (#7307)"},{"Id":"435034664","IsPullRequest":false,"CreatedAt":"2019-04-19T16:29:55","Actor":"drearyrainDeng","Number":"7327","RawContent":null,"Title":"Question：how cli judge whether to compile native or managed code?","State":"closed","Body":"To example \"Hello World\".we just call command like that \"dotnet publish -r win-x64 -c release\"\r\nso dotnet  how to judge compile native or managed code?","Url":"https://github.com/dotnet/corert/issues/7327","RelatedDescription":"Closed issue \"Question：how cli judge whether to compile native or managed code?\" (#7327)"},{"Id":"435010848","IsPullRequest":true,"CreatedAt":"2019-04-19T16:04:45","Actor":"Dotnet-GitSync-Bot","Number":"7326","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub @Anipik @tannergooding @krwq @safern @buyaa-n @bbartels","Url":"https://github.com/dotnet/corert/pull/7326","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7326)"},{"Id":"435162096","IsPullRequest":false,"CreatedAt":"2019-04-19T13:10:23","Actor":"MarcoRossignoli","Number":"7329","RawContent":null,"Title":"Cannot compile repo with VS2019","State":"closed","Body":"I've installed VS 2017/2019/2019 preview I cannot compile the repo:\r\n```\r\nF:\\git\\corert (master -> origin)\r\nλ build\r\nChecking pre-requisites...\r\n\r\nCommencing CoreRT Repo build\r\n\r\nCommencing build of native components for Windows_NT.x64.Debug\r\n\r\n**********************************************************************\r\n** Visual Studio 2019 Developer Command Prompt v16.0.2\r\n** Copyright (c) 2019 Microsoft Corporation\r\n**********************************************************************\r\n[vcvarsall.bat] Environment initialized for: 'x86_x64'\r\nCMake Error: Could not create named generator Visual Studio 16 2019\r\n\r\nGenerators\r\n  Visual Studio 15 2017 [arch] = Generates Visual Studio 2017 project files.\r\n                                 Optional [arch] can be \"Win64\" or \"ARM\".\r\n  Visual Studio 14 2015 [arch] = Generates Visual Studio 2015 project files.\r\n                                 Optional [arch] can be \"Win64\" or \"ARM\".\r\n  Visual Studio 12 2013 [arch] = Generates Visual Studio 2013 project files.\r\n                                 Optional [arch] can be \"Win64\" or \"ARM\".\r\n  Visual Studio 11 2012 [arch] = Generates Visual Studio 2012 project files.\r\n                                 Optional [arch] can be \"Win64\" or \"ARM\".\r\n  Visual Studio 10 2010 [arch] = Generates Visual Studio 2010 project files.\r\n                                 Optional [arch] can be \"Win64\" or \"IA64\".\r\n  Visual Studio 9 2008 [arch]  = Generates Visual Studio 2008 project files.\r\n                                 Optional [arch] can be \"Win64\" or \"IA64\".\r\n  Visual Studio 8 2005 [arch]  = Deprecated.  Generates Visual Studio 2005\r\n                                 project files.  Optional [arch] can be\r\n                                 \"Win64\".\r\n  Borland Makefiles            = Generates Borland makefiles.\r\n  NMake Makefiles              = Generates NMake makefiles.\r\n  NMake Makefiles JOM          = Generates JOM makefiles.\r\n  Green Hills MULTI            = Generates Green Hills MULTI files\r\n                                 (experimental, work-in-progress).\r\n  MSYS Makefiles               = Generates MSYS makefiles.\r\n  MinGW Makefiles              = Generates a make file for use with\r\n                                 mingw32-make.\r\n  Unix Makefiles               = Generates standard UNIX makefiles.\r\n  Ninja                        = Generates build.ninja files.\r\n  Watcom WMake                 = Generates Watcom WMake makefiles.\r\n  CodeBlocks - MinGW Makefiles = Generates CodeBlocks project files.\r\n  CodeBlocks - NMake Makefiles = Generates CodeBlocks project files.\r\n  CodeBlocks - NMake Makefiles JOM\r\n                               = Generates CodeBlocks project files.\r\n  CodeBlocks - Ninja           = Generates CodeBlocks project files.\r\n  CodeBlocks - Unix Makefiles  = Generates CodeBlocks project files.\r\n  CodeLite - MinGW Makefiles   = Generates CodeLite project files.\r\n  CodeLite - NMake Makefiles   = Generates CodeLite project files.\r\n  CodeLite - Ninja             = Generates CodeLite project files.\r\n  CodeLite - Unix Makefiles    = Generates CodeLite project files.\r\n  Sublime Text 2 - MinGW Makefiles\r\n                               = Generates Sublime Text 2 project files.\r\n  Sublime Text 2 - NMake Makefiles\r\n                               = Generates Sublime Text 2 project files.\r\n  Sublime Text 2 - Ninja       = Generates Sublime Text 2 project files.\r\n  Sublime Text 2 - Unix Makefiles\r\n                               = Generates Sublime Text 2 project files.\r\n  Kate - MinGW Makefiles       = Generates Kate project files.\r\n  Kate - NMake Makefiles       = Generates Kate project files.\r\n  Kate - Ninja                 = Generates Kate project files.\r\n  Kate - Unix Makefiles        = Generates Kate project files.\r\n  Eclipse CDT4 - NMake Makefiles\r\n                               = Generates Eclipse CDT 4.0 project files.\r\n  Eclipse CDT4 - MinGW Makefiles\r\n                               = Generates Eclipse CDT 4.0 project files.\r\n  Eclipse CDT4 - Ninja         = Generates Eclipse CDT 4.0 project files.\r\n  Eclipse CDT4 - Unix Makefiles= Generates Eclipse CDT 4.0 project files.\r\n\r\nFailed to generate native component build project\r\nNative component build failed. Refer F:\\git\\corert\\buildscripts\\..\\bin\\Logs\\Native_Windows_NT__x64__Debug.log for details.\r\n```\r\nThere is no file in `Log` directory.\r\nSure I'm missing something, maybe some vs component.","Url":"https://github.com/dotnet/corert/issues/7329","RelatedDescription":"Closed issue \"Cannot compile repo with VS2019\" (#7329)"},{"Id":"435054675","IsPullRequest":true,"CreatedAt":"2019-04-19T06:32:55","Actor":"jkotas","Number":"7328","RawContent":null,"Title":"Fix objwriter for OSX","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7328","RelatedDescription":"Closed or merged PR \"Fix objwriter for OSX\" (#7328)"},{"Id":"434280838","IsPullRequest":true,"CreatedAt":"2019-04-19T06:02:57","Actor":"tannergooding","Number":"7316","RawContent":null,"Title":"Updating the roslyn toolset to 3.1.0-beta3-19213-02","State":"closed","Body":"CC. @jkotas \r\n\r\nThis brings in the latest nullability changes and the new `readonly members` feature, which will be needed for changes like https://github.com/dotnet/coreclr/pull/23827\r\n\r\nThe compiler version matches that in arcade and buildtools right now.","Url":"https://github.com/dotnet/corert/pull/7316","RelatedDescription":"Closed or merged PR \"Updating the roslyn toolset to 3.1.0-beta3-19213-02\" (#7316)"},{"Id":"434891687","IsPullRequest":true,"CreatedAt":"2019-04-19T00:06:12","Actor":"Dotnet-GitSync-Bot","Number":"7324","RawContent":null,"Title":"Mirror changes from dotnet/coreclr [Donot Merge]","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub @Anipik @tannergooding @krwq @safern @bbartels","Url":"https://github.com/dotnet/corert/pull/7324","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr [Donot Merge]\" (#7324)"},{"Id":"434950698","IsPullRequest":true,"CreatedAt":"2019-04-18T20:40:43","Actor":"MichalStrehovsky","Number":"7325","RawContent":null,"Title":"Merge master to nmirror","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7325","RelatedDescription":"Closed or merged PR \"Merge master to nmirror\" (#7325)"},{"Id":"434667998","IsPullRequest":true,"CreatedAt":"2019-04-18T14:12:28","Actor":"MichalStrehovsky","Number":"7322","RawContent":null,"Title":"Fix Windows issues with the new object writer","State":"closed","Body":"See individual commits.","Url":"https://github.com/dotnet/corert/pull/7322","RelatedDescription":"Closed or merged PR \"Fix Windows issues with the new object writer\" (#7322)"},{"Id":"434732785","IsPullRequest":true,"CreatedAt":"2019-04-18T14:09:33","Actor":"hc4","Number":"7323","RawContent":null,"Title":"Make __modules section writeable on linux to prevent TEXTREL section","State":"closed","Body":"fixes #7321","Url":"https://github.com/dotnet/corert/pull/7323","RelatedDescription":"Closed or merged PR \"Make __modules section writeable on linux to prevent TEXTREL section\" (#7323)"},{"Id":"434617611","IsPullRequest":false,"CreatedAt":"2019-04-18T14:09:33","Actor":"hc4","Number":"7321","RawContent":null,"Title":"Linux shared library contains TEXTREL section","State":"closed","Body":"This section makes shared library non-shareable between processes.\r\nAlso it prevents packing with UPX.\r\n\r\nThe problem is caused by `__modules` section, which is marked ReadOnly and accessed with relocation type `IMAGE_REL_BASED_DIR64`\r\n\r\nI will try to investigate further. It is possible that another libobjwriter modification will be required.\r\n\r\nrelated to #4988","Url":"https://github.com/dotnet/corert/issues/7321","RelatedDescription":"Closed issue \"Linux shared library contains TEXTREL section\" (#7321)"},{"Id":"434453402","IsPullRequest":true,"CreatedAt":"2019-04-17T19:42:09","Actor":"MichalStrehovsky","Number":"7319","RawContent":null,"Title":"Increase official build Linux job timeout","State":"closed","Body":"We need more time when building the object writer package. 120 is probably overboard (we timed out while copying artifacts around), but it matches the Windows job timeout.","Url":"https://github.com/dotnet/corert/pull/7319","RelatedDescription":"Closed or merged PR \"Increase official build Linux job timeout\" (#7319)"},{"Id":"434396249","IsPullRequest":true,"CreatedAt":"2019-04-17T18:29:23","Actor":"Dotnet-GitSync-Bot","Number":"7318","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @tannergooding @tarekgh","Url":"https://github.com/dotnet/corert/pull/7318","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7318)"},{"Id":"434362500","IsPullRequest":false,"CreatedAt":"2019-04-17T16:01:32","Actor":"NextTurn","Number":"7317","RawContent":null,"Title":"Unable to load DLL 'clrcompression.dll'","State":"closed","Body":"## Stack trace\r\n\r\n```\r\nUnhandled Exception: System.IO.Compression.ZLibException: The underlying compression routine could not be loaded correctly. ---> System.DllNotFoundException: Unable to load DLL 'clrcompression.dll': The specified module could not be found.\r\n   at Internal.Runtime.CompilerHelpers.InteropHelpers.FixupModuleCell(InteropHelpers.ModuleFixupCell*) + 0xef\r\n   at Internal.Runtime.CompilerHelpers.InteropHelpers.ResolvePInvokeSlow(InteropHelpers.MethodFixupCell*) + 0x4f\r\n   at Internal.Runtime.CompilerHelpers.InteropHelpers.ResolvePInvoke(InteropHelpers.MethodFixupCell*) + 0x3e\r\n   at Interop.zlib.InflateInit2_(ZLibNative.ZStream&, Int32) + 0x41\r\n   at System.IO.Compression.ZLibNative.ZLibStreamHandle.InflateInit2_(Int32) + 0x40\r\n   at System.IO.Compression.ZLibNative.CreateZLibStreamForInflate(ZLibNative.ZLibStreamHandle&, Int32) + 0x4e\r\n   at System.IO.Compression.Inflater.InflateInit(Int32) + 0x45\r\n```\r\n\r\n## Command\r\n\r\n```\r\ndotnet publish -r win-x64\r\n```\r\n\r\n## Environment\r\n\r\n.NET Core 3.0 or 2.2\r\nWindows 10 1809 x64\r\n\r\nRuns fine with CoreCLR.","Url":"https://github.com/dotnet/corert/issues/7317","RelatedDescription":"Closed issue \"Unable to load DLL 'clrcompression.dll'\" (#7317)"},{"Id":"433999560","IsPullRequest":true,"CreatedAt":"2019-04-16T22:34:23","Actor":"jkotas","Number":"7315","RawContent":null,"Title":"ObjWriter build fixes","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7315","RelatedDescription":"Closed or merged PR \"ObjWriter build fixes\" (#7315)"},{"Id":"433323004","IsPullRequest":true,"CreatedAt":"2019-04-16T21:11:30","Actor":"trylek","Number":"7306","RawContent":null,"Title":"Smaller SuperIlc fixes for bugs I hit in local testing","State":"closed","Body":"1) One of the interesting features of the new command-line interface\r\nis the fact that it tries to match the option names to identifiers\r\nof fields and method parameters. Due to this the option --crossgen\r\ndidn't get bound because the counterpart field was called UseCrossgen.\r\nI have renamed the field to just Crossgen.\r\n\r\n2) Don't schedule executions for apps that failed to compile as\r\nthe executions are certain to fail due to the absence of the compiled\r\nartifacts.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7306","RelatedDescription":"Closed or merged PR \"Smaller SuperIlc fixes for bugs I hit in local testing\" (#7306)"},{"Id":"433505434","IsPullRequest":true,"CreatedAt":"2019-04-16T17:40:15","Actor":"trylek","Number":"7308","RawContent":null,"Title":"Fixes for some of the remaining Pri#1 CPAOT compilation buckets","State":"closed","Body":"1) Handling for ByRef in the signature emitter;\r\n\r\n2) Expanding instantiated type signatures;\r\n\r\n3) Not trying to emit instantiations when asked to emit the\r\nuninstantiated generic methods in signatures.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7308","RelatedDescription":"Closed or merged PR \"Fixes for some of the remaining Pri#1 CPAOT compilation buckets\" (#7308)"},{"Id":"433850919","IsPullRequest":true,"CreatedAt":"2019-04-16T17:05:26","Actor":"jkotas","Number":"7314","RawContent":null,"Title":"Use CentOS docker image for official builds","State":"closed","Body":"The same one is used for CoreCLR official builds","Url":"https://github.com/dotnet/corert/pull/7314","RelatedDescription":"Closed or merged PR \"Use CentOS docker image for official builds\" (#7314)"},{"Id":"433794769","IsPullRequest":true,"CreatedAt":"2019-04-16T15:28:46","Actor":"Dotnet-GitSync-Bot","Number":"7313","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @filipnavara","Url":"https://github.com/dotnet/corert/pull/7313","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7313)"},{"Id":"433552374","IsPullRequest":true,"CreatedAt":"2019-04-16T08:06:54","Actor":"Dotnet-GitSync-Bot","Number":"7310","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @EgorBo @jkotas @GrabYourPitchforks","Url":"https://github.com/dotnet/corert/pull/7310","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7310)"},{"Id":"433571783","IsPullRequest":true,"CreatedAt":"2019-04-16T07:09:59","Actor":"jkotas","Number":"7312","RawContent":null,"Title":"Add AdditionalBuildArgs option for the official build pipeline","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7312","RelatedDescription":"Closed or merged PR \"Add AdditionalBuildArgs option for the official build pipeline\" (#7312)"},{"Id":"433568931","IsPullRequest":true,"CreatedAt":"2019-04-16T07:08:27","Actor":"jkotas","Number":"7311","RawContent":null,"Title":"Add musl targets in packages","State":"closed","Body":"Contribute to #4552","Url":"https://github.com/dotnet/corert/pull/7311","RelatedDescription":"Closed or merged PR \"Add musl targets in packages\" (#7311)"},{"Id":"433521193","IsPullRequest":true,"CreatedAt":"2019-04-16T02:12:54","Actor":"Dotnet-GitSync-Bot","Number":"7309","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas","Url":"https://github.com/dotnet/corert/pull/7309","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7309)"},{"Id":"433259360","IsPullRequest":true,"CreatedAt":"2019-04-15T12:39:46","Actor":"MichalStrehovsky","Number":"7305","RawContent":null,"Title":"Merge master to nmirror","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7305","RelatedDescription":"Closed or merged PR \"Merge master to nmirror\" (#7305)"},{"Id":"433156142","IsPullRequest":true,"CreatedAt":"2019-04-15T11:44:52","Actor":"MichalStrehovsky","Number":"7303","RawContent":null,"Title":"Remove problematic characters in eventtrace.cpp","State":"closed","Body":"The C++ compiler finds the typographic apostrophe disturbing.\r\n\r\n`warning C4828: The file contains a character starting at offset 0x103e5 that is illegal in the current source character set (codepage 65001).`","Url":"https://github.com/dotnet/corert/pull/7303","RelatedDescription":"Closed or merged PR \"Remove problematic characters in eventtrace.cpp\" (#7303)"},{"Id":"433157869","IsPullRequest":true,"CreatedAt":"2019-04-15T08:32:26","Actor":"MichalStrehovsky","Number":"7304","RawContent":null,"Title":"Add normalized equivalent of YieldProcessor","State":"open","Body":"Ports dotnet/coreclr#13670 to CoreRT.\r\n\r\nMarked as draft because I don't have good perf numbers yet (and this is not an area that I'm comfortable making changes in).","Url":"https://github.com/dotnet/corert/pull/7304","RelatedDescription":"Open PR \"Add normalized equivalent of YieldProcessor\" (#7304)"},{"Id":"433075833","IsPullRequest":true,"CreatedAt":"2019-04-15T04:09:51","Actor":"Dotnet-GitSync-Bot","Number":"7302","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @MarcoRossignoli","Url":"https://github.com/dotnet/corert/pull/7302","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7302)"}],"ResultType":"GitHubIssue"},"SDK-Issues":{"Issues":[{"Id":"435390745","IsPullRequest":true,"CreatedAt":"2019-04-20T13:26:35","Actor":"dotnet-maestro[bot]","Number":"3160","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190418.7\r\n- **Date Produced**: 4/19/2019 12:41 AM\r\n- **Commit**: 5e7ce5b394f3477bb0a485a4b761b7742e95be37\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19218.7\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19218.7\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3160","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3160)"},{"Id":"435366474","IsPullRequest":false,"CreatedAt":"2019-04-20T07:27:03","Actor":"nguyenquyhy","Number":"3159","RawContent":null,"Title":"Getting \"GenerateDepsFile\" task failed unexpectedly with KeyNotFoundException when publishing project","State":"open","Body":"I am getting `\"GenerateDepsFile\" task failed unexpectedly` with `KeyNotFoundException` when publishing my projects.\r\n\r\nBelow are the conditions that trigger the issue:\r\n- .NET Core 3.0 Preview 4\r\n- WindowsAzure.Storage 9.3.3 is in a .NET Standard library\r\n\r\nThis can be fixed by either going back to Preview 3 or add WindowsAzure.Storage directly into the .NET Core project.\r\n\r\nError in build log:\r\n```\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview4-011223\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Publish.targets(801,5): Error MSB4018: The \"GenerateDepsFile\" task failed unexpectedly.\r\nSystem.Collections.Generic.KeyNotFoundException: The given key was not present in the dictionary.\r\n   at System.Collections.Generic.Dictionary`2.get_Item(TKey key)\r\n   at Microsoft.NET.Build.Tasks.DependencyContextBuilder2.CalculateExcludedLibraries() in /_/src/Tasks/Microsoft.NET.Build.Tasks/DependencyContextBuilder2.cs:line 769\r\n   at Microsoft.NET.Build.Tasks.DependencyContextBuilder2.Build() in /_/src/Tasks/Microsoft.NET.Build.Tasks/DependencyContextBuilder2.cs:line 215\r\n   at Microsoft.NET.Build.Tasks.GenerateDepsFile.WriteDepsFileNew(String depsFilePath) in /_/src/Tasks/Microsoft.NET.Build.Tasks/GenerateDepsFile.cs:line 248\r\n   at Microsoft.NET.Build.Tasks.GenerateDepsFile.ExecuteCore() in /_/src/Tasks/Microsoft.NET.Build.Tasks/GenerateDepsFile.cs:line 284\r\n   at Microsoft.NET.Build.Tasks.TaskBase.Execute() in /_/src/Tasks/Common/TaskBase.cs:line 35\r\n   at Microsoft.NET.Build.Tasks.GenerateDepsFile.Execute() in /_/src/Tasks/Microsoft.NET.Build.Tasks/GenerateDepsFile.cs:line 262\r\n   at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute()\r\n   at Microsoft.Build.BackEnd.TaskBuilder.<ExecuteInstantiatedTask>d__26.MoveNext()\r\n```\r\n\r\nSample repository: https://github.com/nguyenquyhy/IssueWindowsAzureStoragePublish","Url":"https://github.com/dotnet/sdk/issues/3159","RelatedDescription":"Open issue \"Getting \"GenerateDepsFile\" task failed unexpectedly with KeyNotFoundException when publishing project\" (#3159)"},{"Id":"435348681","IsPullRequest":true,"CreatedAt":"2019-04-20T02:51:47","Actor":"swaroop-sridhar","Number":"3158","RawContent":null,"Title":"Mark PDB files generated by R2R as ExcludeFromSingleFile","State":"open","Body":"When published with `PublishReadyToRun=true` and `PublishReadyToRunEmitSymbols=true` certain additional symbol files are generated:\r\nOn Windows: `<app>.ni.pdb`\r\nOn Linux: `<app>.<guid>.map`\r\n\r\nWhen additionally publishing with `PublishSingleFile=true` exclude the above files from being bundled into the single-file output.","Url":"https://github.com/dotnet/sdk/pull/3158","RelatedDescription":"Open PR \"Mark PDB files generated by R2R as ExcludeFromSingleFile\" (#3158)"},{"Id":"435334688","IsPullRequest":true,"CreatedAt":"2019-04-20T02:31:13","Actor":"dotnet-bot","Number":"3155","RawContent":null,"Title":"Merge release/3.0.1xx to master","State":"closed","Body":"\nThis is an automatically generated pull request from release/3.0.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3155","RelatedDescription":"Closed or merged PR \"Merge release/3.0.1xx to master\" (#3155)"},{"Id":"435326772","IsPullRequest":true,"CreatedAt":"2019-04-20T02:31:10","Actor":"wli3","Number":"3154","RawContent":null,"Title":"Merge release/3.0.1xx to master 0419","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/3154","RelatedDescription":"Closed or merged PR \"Merge release/3.0.1xx to master 0419\" (#3154)"},{"Id":"435341558","IsPullRequest":true,"CreatedAt":"2019-04-20T01:12:25","Actor":"sbomer","Number":"3157","RawContent":null,"Title":"Enable native asset filtering","State":"open","Body":"This enables ILLink.Tasks to trim native assets that are no longer necessary after linking managed code. The behavior kicks in whenever the linker runs, but can be disabled by setting `TrimmerKeepNativeAssets`.","Url":"https://github.com/dotnet/sdk/pull/3157","RelatedDescription":"Open PR \"Enable native asset filtering\" (#3157)"},{"Id":"435339950","IsPullRequest":true,"CreatedAt":"2019-04-20T00:53:31","Actor":"sbomer","Number":"3156","RawContent":null,"Title":"ILLink cleanup","State":"open","Body":"Respond to remaining feedback from https://github.com/dotnet/sdk/pull/3125:\r\n- Use default deps generation mode\r\n- Use `TrimmerRootDescriptor` (singular) itemgroup, without a corresponding property\r\n\r\n@swaroop-sridhar The second two commits set the proper linker defaults. I made them part of the same PR to avoid having to fix merge conflicts between these changes.","Url":"https://github.com/dotnet/sdk/pull/3156","RelatedDescription":"Open PR \"ILLink cleanup\" (#3156)"},{"Id":"435265510","IsPullRequest":true,"CreatedAt":"2019-04-19T23:35:53","Actor":"dsplaisted","Number":"3152","RawContent":null,"Title":"Switch to new deps file generation mode by default","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/3152","RelatedDescription":"Closed or merged PR \"Switch to new deps file generation mode by default\" (#3152)"},{"Id":"434529197","IsPullRequest":true,"CreatedAt":"2019-04-19T21:53:41","Actor":"sbomer","Number":"3133","RawContent":null,"Title":"Update sdk","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/3133","RelatedDescription":"Closed or merged PR \"Update sdk\" (#3133)"},{"Id":"435292738","IsPullRequest":true,"CreatedAt":"2019-04-19T21:52:29","Actor":"wli3","Number":"3153","RawContent":null,"Title":"update stage 0 to 3.0.100-preview5-011481","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/3153","RelatedDescription":"Closed or merged PR \"update stage 0 to 3.0.100-preview5-011481\" (#3153)"},{"Id":"435058150","IsPullRequest":true,"CreatedAt":"2019-04-19T19:22:32","Actor":"wli3","Number":"3147","RawContent":null,"Title":"Update stage 0","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/3147","RelatedDescription":"Closed or merged PR \"Update stage 0\" (#3147)"},{"Id":"435254481","IsPullRequest":false,"CreatedAt":"2019-04-19T17:49:58","Actor":"Tratcher","Number":"3151","RawContent":null,"Title":"ResolvePackageAssets InvalidDataException Found invalid data while decoding","State":"open","Body":"```\r\nResolution.targets(233,5): message NETSDK1062: Unable to use package assets cache due to I/O error. This can occur when\r\n the same project is built more than once in parallel. Performance may be degraded, but the build result will not be im\r\npacted. [D:\\github\\AspNetCore\\artifacts\\obj\\LoggingBranch\\Debug\\net461\\se\\rs.csproj]\r\n\r\nd:\\github\\AspNetCore\\.dotnet\\x64\\sdk\\3.0.100-preview4-011136\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependency\r\nResolution.targets(233,5): error MSB4018: The \"ResolvePackageAssets\" task failed unexpectedly. [D:\\github\\AspNetCore\\ar\r\ntifacts\\obj\\LoggingBranch\\Debug\\net461\\se\\rs.csproj]\r\nd:\\github\\AspNetCore\\.dotnet\\x64\\sdk\\3.0.100-preview4-011136\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependency\r\nResolution.targets(233,5): error MSB4018: System.IO.InvalidDataException: Found invalid data while decoding. [D:\\github\r\n\\AspNetCore\\artifacts\\obj\\LoggingBranch\\Debug\\net461\\se\\rs.csproj]\r\n\r\nd:\\github\\AspNetCore\\.dotnet\\x64\\sdk\\3.0.100-preview4-011136\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependency\r\nResolution.targets(233,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ResolvePackageAssets.CacheReader.ValidateHead\r\ner(BinaryReader reader, Byte[] settingsHash) in /_/src/Tasks/Microsoft.NET.Build.Tasks/ResolvePackageAssets.cs:line 529\r\n [D:\\github\\AspNetCore\\artifacts\\obj\\LoggingBranch\\Debug\\net461\\se\\rs.csproj]\r\nd:\\github\\AspNetCore\\.dotnet\\x64\\sdk\\3.0.100-preview4-011136\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependency\r\nResolution.targets(233,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ResolvePackageAssets.CacheReader.OpenCacheStr\r\neam(Stream stream, Byte[] settingsHash) in /_/src/Tasks/Microsoft.NET.Build.Tasks/ResolvePackageAssets.cs:line 511 [D:\\\r\ngithub\\AspNetCore\\artifacts\\obj\\LoggingBranch\\Debug\\net461\\se\\rs.csproj]\r\nd:\\github\\AspNetCore\\.dotnet\\x64\\sdk\\3.0.100-preview4-011136\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependency\r\nResolution.targets(233,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ResolvePackageAssets.CacheReader.CreateReader\r\nFromDisk(ResolvePackageAssets task, Byte[] settingsHash) in /_/src/Tasks/Microsoft.NET.Build.Tasks/ResolvePackageAssets\r\n.cs:line 492 [D:\\github\\AspNetCore\\artifacts\\obj\\LoggingBranch\\Debug\\net461\\se\\rs.csproj]\r\nd:\\github\\AspNetCore\\.dotnet\\x64\\sdk\\3.0.100-preview4-011136\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependency\r\nResolution.targets(233,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ResolvePackageAssets.CacheReader..ctor(Resolv\r\nePackageAssets task) in /_/src/Tasks/Microsoft.NET.Build.Tasks/ResolvePackageAssets.cs:line 440 [D:\\github\\AspNetCore\\a\r\nrtifacts\\obj\\LoggingBranch\\Debug\\net461\\se\\rs.csproj]\r\nd:\\github\\AspNetCore\\.dotnet\\x64\\sdk\\3.0.100-preview4-011136\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependency\r\nResolution.targets(233,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ResolvePackageAssets.ReadItemGroups() in /_/s\r\nrc/Tasks/Microsoft.NET.Build.Tasks/ResolvePackageAssets.cs:line 284 [D:\\github\\AspNetCore\\artifacts\\obj\\LoggingBranch\\D\r\nebug\\net461\\se\\rs.csproj]\r\nd:\\github\\AspNetCore\\.dotnet\\x64\\sdk\\3.0.100-preview4-011136\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependency\r\nResolution.targets(233,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ResolvePackageAssets.ExecuteCore() in /_/src/\r\nTasks/Microsoft.NET.Build.Tasks/ResolvePackageAssets.cs:line 276 [D:\\github\\AspNetCore\\artifacts\\obj\\LoggingBranch\\Debu\r\ng\\net461\\se\\rs.csproj]\r\nd:\\github\\AspNetCore\\.dotnet\\x64\\sdk\\3.0.100-preview4-011136\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependency\r\nResolution.targets(233,5): error MSB4018:    at Microsoft.NET.Build.Tasks.TaskBase.Execute() in /_/src/Tasks/Common/Tas\r\nkBase.cs:line 35 [D:\\github\\AspNetCore\\artifacts\\obj\\LoggingBranch\\Debug\\net461\\se\\rs.csproj]\r\nd:\\github\\AspNetCore\\.dotnet\\x64\\sdk\\3.0.100-preview4-011136\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependency\r\nResolution.targets(233,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITask\r\nExecutionHost.Execute() [D:\\github\\AspNetCore\\artifacts\\obj\\LoggingBranch\\Debug\\net461\\se\\rs.csproj]\r\nd:\\github\\AspNetCore\\.dotnet\\x64\\sdk\\3.0.100-preview4-011136\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependency\r\nResolution.targets(233,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskBuilder.<ExecuteInstantiatedTask>d__26.Move\r\nNext() [D:\\github\\AspNetCore\\artifacts\\obj\\LoggingBranch\\Debug\\net461\\se\\rs.csproj]\r\n```\r\n\r\nRepo: https://github.com/aspnet/aspnetcore\r\nBranch: master\r\nCommand: `build.cmd -all -pack`\r\nTracking: https://github.com/aspnet/AspNetCore-Internal/issues/2009\r\n\r\nHow does one go about debugging this?","Url":"https://github.com/dotnet/sdk/issues/3151","RelatedDescription":"Open issue \"ResolvePackageAssets InvalidDataException Found invalid data while decoding\" (#3151)"},{"Id":"435059918","IsPullRequest":true,"CreatedAt":"2019-04-19T17:31:27","Actor":"wli3","Number":"3148","RawContent":null,"Title":"Merges/release/2.2.2xx to release/3.0.1xx 2","State":"closed","Body":"Send https://github.com/dotnet/sdk/pull/3139 again. CI is stuck","Url":"https://github.com/dotnet/sdk/pull/3148","RelatedDescription":"Closed or merged PR \"Merges/release/2.2.2xx to release/3.0.1xx 2\" (#3148)"},{"Id":"434176500","IsPullRequest":true,"CreatedAt":"2019-04-19T17:29:19","Actor":"swaroop-sridhar","Number":"3132","RawContent":null,"Title":"Publish to Single-File","State":"closed","Body":"This change implements support for publishing apps to a [single file](https://github.com/dotnet/designs/blob/master/accepted/single-file/design.md).\r\n\r\n* ``dotnet publish /p:PublishSingleFile=true`` causes the contents of the \"original\" publish directory to a single file in the actual publish directory\r\n* Files marked with the meta-data ``<ExcludeFromSingleFile>false<ExcludeFromSingleFile>`` are left in the publish directory unbundled. This includes PDB files by default\r\n* PDB files can be bundled into the single file by setting ``/p:IncludeSymbolsInSingleFile=true``\r\n\r\nPublishing to a single file requires publishing wrt a RID using an apphost, because the generated file is the platform-specific AppHost executable with embedded dependencies.","Url":"https://github.com/dotnet/sdk/pull/3132","RelatedDescription":"Closed or merged PR \"Publish to Single-File\" (#3132)"},{"Id":"435154799","IsPullRequest":true,"CreatedAt":"2019-04-19T14:14:42","Actor":"dotnet-maestro[bot]","Number":"3150","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190418.4\r\n- **Date Produced**: 4/18/2019 10:50 PM\r\n- **Commit**: 1d4c87ff798d7de521128e6c3d890055c2401e80\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19218.4\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19218.4\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3150","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3150)"},{"Id":"435154253","IsPullRequest":true,"CreatedAt":"2019-04-19T12:01:36","Actor":"dotnet-bot","Number":"3149","RawContent":null,"Title":"Merge release/2.2.2xx to release/3.0.1xx","State":"open","Body":"\nThis is an automatically generated pull request from release/2.2.2xx into release/3.0.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.2xx-to-release/3.0.1xx\ngit reset --hard upstream/release/3.0.1xx\ngit merge upstream/release/2.2.2xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.2xx-to-release/3.0.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3149","RelatedDescription":"Open PR \"Merge release/2.2.2xx to release/3.0.1xx\" (#3149)"},{"Id":"434734538","IsPullRequest":true,"CreatedAt":"2019-04-19T05:59:36","Actor":"dotnet-bot","Number":"3139","RawContent":null,"Title":"Merge release/2.2.2xx to release/3.0.1xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.2.2xx into release/3.0.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.2xx-to-release/3.0.1xx\ngit reset --hard upstream/release/3.0.1xx\ngit merge upstream/release/2.2.2xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.2xx-to-release/3.0.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3139","RelatedDescription":"Closed or merged PR \"Merge release/2.2.2xx to release/3.0.1xx\" (#3139)"},{"Id":"435021289","IsPullRequest":false,"CreatedAt":"2019-04-19T01:55:09","Actor":"ajaybhargavb","Number":"3146","RawContent":null,"Title":"Internal error: new deps file generation logic did not produce the same result as the old logic","State":"open","Body":"I've included both the old and new deps files here.\r\n\r\n[Microsoft.AspNetCore.Razor.Test.MvcShim.deps.zip](https://github.com/dotnet/sdk/files/3096744/Microsoft.AspNetCore.Razor.Test.MvcShim.deps.zip)\r\n\r\n\r\nOriginal error:\r\n```\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview4-011216\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets(145,5): error : Internal error: new deps file generation logic did not produce the same result as the old logic. [C:\\Github\\aspnet\\AspNetCore-Tooling\\src\\Razor\\test\\Microsoft.AspNetCore.Razor.Test.MvcShim\\Microsoft.AspNetCore.Razor.Test.MvcShim.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview4-011216\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets(145,5): error :     Please file an issue for this at https://github.com/dotnet/sdk and include the following two files:  [C:\\Github\\aspnet\\AspNetCore-Tooling\\src\\Razor\\test\\Microsoft.AspNetCore.Razor.Test.MvcShim\\Microsoft.AspNetCore.Razor.Test.MvcShim.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview4-011216\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets(145,5): error :     Deps file from old logic: C:\\Github\\aspnet\\AspNetCore-Tooling\\artifacts\\bin\\Microsoft.AspNetCore.Razor.Test.MvcShim\\Debug\\netcoreapp3.0\\Microsoft.AspNetCore.Razor.Test.MvcShim.deps.json [C:\\Github\\aspnet\\AspNetCore-Tooling\\src\\Razor\\test\\Microsoft.AspNetCore.Razor.Test.MvcShim\\Microsoft.AspNetCore.Razor.Test.MvcShim.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview4-011216\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets(145,5): error :     Deps file from new logic: C:\\Github\\aspnet\\AspNetCore-Tooling\\artifacts\\bin\\Microsoft.AspNetCore.Razor.Test.MvcShim\\Debug\\netcoreapp3.0\\Microsoft.AspNetCore.Razor.Test.MvcShim.deps.new.json [C:\\Github\\aspnet\\AspNetCore-Tooling\\src\\Razor\\test\\Microsoft.AspNetCore.Razor.Test.MvcShim\\Microsoft.AspNetCore.Razor.Test.MvcShim.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview4-011216\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.targets(145,5): error :     You can work around this by setting the DepsFileGenerationMode MSBuild property to 'old' [C:\\Github\\aspnet\\AspNetCore-Tooling\\src\\Razor\\test\\Microsoft.AspNetCore.Razor.Test.MvcShim\\Microsoft.AspNetCore.Razor.Test.MvcShim.csproj]\r\n```\r\n\r\n```\r\ndotnet --info:\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview4-011216\r\n Commit:    19c844a865\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview4-011216\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview4-27613-07\r\n  Commit:  5c329c85ae\r\n```","Url":"https://github.com/dotnet/sdk/issues/3146","RelatedDescription":"Open issue \"Internal error: new deps file generation logic did not produce the same result as the old logic\" (#3146)"},{"Id":"435008587","IsPullRequest":false,"CreatedAt":"2019-04-19T00:31:59","Actor":"sbomer","Number":"3145","RawContent":null,"Title":"TestAsTools job fails with latest SDK","State":"open","Body":"See the failures in https://github.com/dotnet/sdk/pull/3133:\r\n```\r\nF:\\workspace\\_work\\1\\s\\src\\Tests\\Directory.Build.targets(56,5): error MSB3073: The command \"dotnet tool install --local testSdkRestore --version 3.0.100-ci --add-source F:\\workspace\\_work\\1\\s\\artifacts\\packages\\Debug\\NonShipping\\\" exited with code 1. [F:\\workspace\\_work\\1\\s\\src\\Tests\\Microsoft.NET.Restore.Tests\\Microsoft.NET.Restore.Tests.csproj]\r\n```","Url":"https://github.com/dotnet/sdk/issues/3145","RelatedDescription":"Open issue \"TestAsTools job fails with latest SDK\" (#3145)"},{"Id":"434990963","IsPullRequest":true,"CreatedAt":"2019-04-18T23:00:24","Actor":"heng-liu","Number":"3144","RawContent":null,"Title":"Insert NuGet Build 5.1.0-preview2.5965 into SDK master","State":"open","Body":"Insert NuGet Build 5.1.0-preview2.5965 into master branch.","Url":"https://github.com/dotnet/sdk/pull/3144","RelatedDescription":"Open PR \"Insert NuGet Build 5.1.0-preview2.5965 into SDK master\" (#3144)"},{"Id":"434977794","IsPullRequest":true,"CreatedAt":"2019-04-18T22:05:38","Actor":"nugetlurker","Number":"3143","RawContent":null,"Title":"Insert NuGet Build 5.1.0-preview2.5965 into sdk","State":"open","Body":"Insert NuGet Build 5.1.0-preview2.5965 into sdk release/2.1.7xx branch","Url":"https://github.com/dotnet/sdk/pull/3143","RelatedDescription":"Open PR \"Insert NuGet Build 5.1.0-preview2.5965 into sdk\" (#3143)"},{"Id":"434977774","IsPullRequest":true,"CreatedAt":"2019-04-18T22:05:34","Actor":"nugetlurker","Number":"3142","RawContent":null,"Title":"Insert NuGet Build 5.1.0-preview2.5965 into sdk","State":"open","Body":"Insert NuGet Build 5.1.0-preview2.5965 into sdk release/2.2.3xx branch","Url":"https://github.com/dotnet/sdk/pull/3142","RelatedDescription":"Open PR \"Insert NuGet Build 5.1.0-preview2.5965 into sdk\" (#3142)"},{"Id":"434558015","IsPullRequest":true,"CreatedAt":"2019-04-18T21:29:21","Actor":"dsplaisted","Number":"3137","RawContent":null,"Title":"Update NuGet","State":"closed","Body":"Insert NuGet 5.1.0-rtm.5921\r\n\r\nSyncs with the version inserted to dotnet/toolset here: https://github.com/dotnet/toolset/pull/593","Url":"https://github.com/dotnet/sdk/pull/3137","RelatedDescription":"Closed or merged PR \"Update NuGet\" (#3137)"},{"Id":"434734518","IsPullRequest":true,"CreatedAt":"2019-04-18T21:21:18","Actor":"dotnet-bot","Number":"3138","RawContent":null,"Title":"Merge release/2.1.6xx to release/2.2.2xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.1.6xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.6xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.1.6xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.6xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3138","RelatedDescription":"Closed or merged PR \"Merge release/2.1.6xx to release/2.2.2xx\" (#3138)"},{"Id":"434735459","IsPullRequest":true,"CreatedAt":"2019-04-18T21:20:58","Actor":"dotnet-maestro[bot]","Number":"3140","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190418.1\r\n- **Date Produced**: 4/18/2019 8:10 AM\r\n- **Commit**: 46718d98c0fd03690a6a8c83da692a4a85a17902\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19218.1\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19218.1\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3140","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3140)"},{"Id":"434948895","IsPullRequest":true,"CreatedAt":"2019-04-18T20:35:08","Actor":"MSLukeWest","Number":"3141","RawContent":null,"Title":"Adding deps.json file to PublishItemsOutputGroup","State":"open","Body":"The PublishItemsOutputGroup needs to also contain the app's deps.json file or there will be a runtime failure","Url":"https://github.com/dotnet/sdk/pull/3141","RelatedDescription":"Open PR \"Adding deps.json file to PublishItemsOutputGroup\" (#3141)"},{"Id":"434531654","IsPullRequest":true,"CreatedAt":"2019-04-18T19:36:49","Actor":"fadimounir","Number":"3134","RawContent":null,"Title":"Rename properties and simplify R2R targets","State":"closed","Body":"Rename properties as agreed (PublishReadyToRun, PublishReadyToRunEmitSymbols, PublishReadyToRunExclude)\r\n\r\nSimplify R2R creation logic: No need to split ResolvedFilesToPublish into PublishAlways and PreserveNewest lists.","Url":"https://github.com/dotnet/sdk/pull/3134","RelatedDescription":"Closed or merged PR \"Rename properties and simplify R2R targets\" (#3134)"},{"Id":"434557343","IsPullRequest":true,"CreatedAt":"2019-04-18T16:40:11","Actor":"dsplaisted","Number":"3136","RawContent":null,"Title":"Allow disabling apphost","State":"closed","Body":"Don't try to find apphost packs if UseAppHost is not true.\r\n\r\nThere was a regression in global tool installation caught by the GivenDotnetInstallTool.ItRunsWithTheSpecifiedVerbosity test in the cli repo.  This is a targeted change to enable fixing that (the dummy restore.proj will need to set UseAppHost to false too), in order to unblock https://github.com/dotnet/cli/pull/11166.\r\n\r\nThis is related to #3135, but this PR is a more surgical fix than the broader questions in that bug.","Url":"https://github.com/dotnet/sdk/pull/3136","RelatedDescription":"Closed or merged PR \"Allow disabling apphost\" (#3136)"},{"Id":"434534365","IsPullRequest":false,"CreatedAt":"2019-04-18T00:00:31","Actor":"dsplaisted","Number":"3135","RawContent":null,"Title":"AppHost selection doesn't work well with DisableImplicitFrameworkReferences or RuntimeFrameworkVersion","State":"open","Body":"There are a couple of issues with app host selection:\r\n\r\n- Some projects use `DisableImplicitFrameworkReferences` to disable any package references, downloads, etc. that aren't explicitly specified.  In some cases this is used for a \"restore-only\" project that simply downloads a package.  It would be expected that the `DisableImplicitFrameworkReferences` property would stop an AppHost pack from being downloaded, but currently it doesn't.  This can lead to problems with package downgrades, or where an app host can't be found for the specified RID.\r\n- `RuntimeFrameworkVersion` can be specified as metadata on a `FrameworkReference`.  However, there's no way to do the same thing for the AppHost pack (besides specifying the `RuntimeFrameworkVersion` property which applies to all shared frameworks.  This makes it difficult to consume a specific build of .NET Core.","Url":"https://github.com/dotnet/sdk/issues/3135","RelatedDescription":"Open issue \"AppHost selection doesn't work well with DisableImplicitFrameworkReferences or RuntimeFrameworkVersion\" (#3135)"},{"Id":"433940775","IsPullRequest":false,"CreatedAt":"2019-04-16T19:10:12","Actor":"KirillOsenkov","Number":"3131","RawContent":null,"Title":"_WriteAppConfigWithSupportedRuntime target shouldn't depend on RAR $(ResolveAssemblyReferencesStateFile) as an input","State":"open","Body":"See https://github.com/Microsoft/msbuild/issues/4313\r\n\r\nhttps://github.com/dotnet/sdk/blob/8cb31b0fd0bb5d36b9781442865f2e26cf6fbedc/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.GenerateSupportedRuntime.targets#L44\r\n\r\nWe should find another way to invalidate. I'm seeing RAR cache written to every time even during rebuilds where nothing has changed. This in turn triggers rebuild of WriteAppConfig, even though the app config is the same.","Url":"https://github.com/dotnet/sdk/issues/3131","RelatedDescription":"Open issue \"_WriteAppConfigWithSupportedRuntime target shouldn't depend on RAR $(ResolveAssemblyReferencesStateFile) as an input\" (#3131)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"435015242","IsPullRequest":false,"CreatedAt":"2019-04-19T01:16:10","Actor":"MichaelSimons","Number":"110","RawContent":null,"Title":"# New images for .NET Framework 4.8","State":"open","Body":"# New images for .NET Framework 4.8\r\n\r\nNew images have been released with support for [.NET Framework 4.8 runtime and SDK](https://devblogs.microsoft.com/dotnet/announcing-the-net-framework-4-8/).\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#271](https://github.com/Microsoft/dotnet-framework-docker/issues/271)\r\n\r\n## Details\r\n* Pull request: #270\r\n\r\nYou can access these new images with the following tags:\r\n* `mcr.microsoft.com/dotnet/framework/runtime:4.8`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.8`\r\n\r\nIn addition, the `latest` tag has been updated to refer to these new 4.8 images.\r\n\r\nCheck out the readme files for more information on the latest tags:\r\n* [Runtime](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.runtime.md)\r\n* [SDK](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.sdk.md)\r\n\r\nThe [3.5 SDK](https://github.com/Microsoft/dotnet-framework-docker/tree/master/3.5/sdk) images are intended to always contain the latest .NET Framework SDK and have also been updated to use the 4.8 SDK.","Url":"https://github.com/dotnet/announcements/issues/110","RelatedDescription":"Open issue \"# New images for .NET Framework 4.8\" (#110)"},{"Id":"433297298","IsPullRequest":false,"CreatedAt":"2019-04-15T13:57:07","Actor":"MichaelSimons","Number":"109","RawContent":null,"Title":".NET Framework SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Framework SDK container images now contain the Visual Studio 2019 toolset\r\n.NET Framework SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add additional tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Framework SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Framework SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#269](https://github.com/Microsoft/dotnet-framework-docker/issues/269)\r\n\r\n## Details\r\nVisual Studio 2019 was released on April 2, 2019. We updated the .NET Framework SDK container images, on the same day, to include a new version of the .NET Framework SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag (e.g. mcr.microsoft.com/dotnet/framework/sdk:4.7.2-20190312-windowsservercore-ltsc2019).\r\n\r\nRelated pull request: [#252](https://github.com/Microsoft/dotnet-framework-docker/pull/252)","Url":"https://github.com/dotnet/announcements/issues/109","RelatedDescription":"Open issue \".NET Framework SDK container images now contain the Visual Studio 2019 toolset\" (#109)"},{"Id":"432735158","IsPullRequest":false,"CreatedAt":"2019-04-12T20:35:55","Actor":"KathleenDollard","Number":"108","RawContent":null,"Title":".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017","State":"open","Body":"# .NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\r\n\r\n.NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017. For example, 2.2.203 and 2.1.603 cause failures in Visual Studio 2017. To work on projects in Visual Studio 2017, use .NET Core SDK 2.2.1nn and 2.1.5nn, such as 2.2.106 and 2.1.506. You can install any combination of these SDKs side by side.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3124](https://github.com/dotnet/sdk/issues/3124)\r\n\r\n## Details\r\n\r\nYou can find the SDKs on you machine using the following at a command prompt:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2. Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nIf you downloaded the .NET Core SDK 2.2 between April 2 and April 12, 2019, the main [.NET downloads page](https://dotnet.microsoft.com/download/) included only 2.2.2nn. Starting April 12th, a new button marked \"Compatible with Visual Studio 2017\" is provided to target 2.2.1nn. If you downloaded 2.2 prior to this date, and you use Visual Studio 2017, install the compatible version.\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nThis problem most often occurs because you manually uninstall the 2.1.5nn version. Simply reinstall it from the [.NET Core 2.1 downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n## More information\r\n\r\nHere is the draft of an article we are preparing for .NET Core documentation:\r\n\r\n---\r\n\r\n## Solving Problems with .NET Core SDK Selection in Visual Studio\r\n\r\nYou may have .NET Core SDKs on your machine and still have problems with Visual Studio finding an appropriate one. This article explains why this happens and how you can fix your installation.\r\n\r\nWhen Visual Studio can't find an appropriate version of the .NET Core SDK, you'll receive an error message. This may appear in the Error pane as NETSDK1045:\r\n\r\n\"The current .NET SDK does not support targeting .NET Core 2...\"\r\n\r\nYou can check what .NET Core SDKs you have on your machine with the following command:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\nUnless you have a global.json file, when you use `dotnet` from the command line, the latest .NET Core SDK is used.\r\n\r\n> [TIP!] \r\n> Open a command prompt and try to build with `dotnet build`. If the command line build works, but Visual Studio doesn't suggestions in this article may help.\r\n\r\nThe last two digits of the .NET Core SDK version numbers are in the format are a patch number, which is represented by `nn` in this article because we will continue to service them to include the latest runtimes. To find out more, vist the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\n## Fixes for Common Problems\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2… Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.2.1nn. As an example, 2.2.106 would be a valid entry.\r\n\r\nIf you downloaded the .NET Core SDK 2.2 after April 2, 2019, version 2.2.2nn (such as 2.2.203) is listed first and is the highest version available. However, Visual Studio 2017 requires 2.2.1nn (such as 2.2.106). .NET Core SDK 2.2.2nn works with Visual Studio 2019. Visual Studio 2017 and Visual Studio 2019 can be installed side by side, but this requires both .NET Core SDK 2.2.1nn and .NET Core SDK 2.2.2nn to develop .NET Core 2.2 applications.\r\n\r\nTo download .NET Core SDK 2.2.2nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.1.5nn. As an example, 2.1.505 would be a valid entry. \r\n\r\nThis problem occurs of you manually uninstall the 2.1.5nn version.\r\n\r\nThe Visual Studio 2019 installation will not remove this file and Visual Studio 2017 will continue to work side by side.\r\n\r\nTo reinstall .NET Core SDK 2.1.5nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n### Visual Studio 2019 can't target .NET Core 3.0 Preview\r\n\r\nIf you receive this error message in Visual Studio 2019:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 3.0.100-preview... As an example, SDK 3.0.100-preview3-010431 would be a valid entry.\r\n\r\nTo install .NET Core SDK 3.0.1nn preview, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/3.0).\r\n\r\nIn Visual Studio, go to `Tools\\Options\\Projects and Solutions\\.NET Core` and check the box `Use Previews of the .NET Core SDK`.\r\n\r\n> [NOTE!]\r\n> This option will be moving to `Tools\\Options\\Environment` and renamed `Preview Features` in Visual Studio 2019 version 16.1 Preview 2.\r\n\r\nIf you are targeting .NET Core 3.0 preview, the [C# language version will be C# 8.0 Preview by default](https://docs.microsoft.com/en-us/visualstudio/releases/2019/release-notes#csharp-defaults) allowing you to use new C# features.\r\n\r\n## Understand the relationship between .NET Core SDKs and Visual Studio build tools\r\n\r\nVisual Studio has its own copies of tools like MSBuild, NuGet and the compilers. If you install the .NET Core workload, it also installs the .NET Core SDK which has versions of these tools and provides tasks and targets. These two versions are built from the same repositories, but target .NET Framework and .NET Core respectively. \r\n\r\nWhen you build a .NET Core project in Visual Studio, it uses Visual Studio's copy of MSBuild, but the tasks and targets are supplied from the selected version of the .NET Core SDK. \r\n\r\nWhen you upgrade the .NET Core SDK, you get new tasks and targets. These new tasks and targets may contain features that are not supported by older versions of MSBuild. Like all of the .NET Core SDK, MSBuild is backwards compatible. It is not forwards compatible.\r\n\r\nThis generally works well, but requires a guarantee that the tasks and targets work with the MSBuild version. To ensure this, each .NET Core SDK indicates an MSBuild version range that is used by Visual Studio to determine compatibility. Versions of the .NET Core SDK that have a higher MSBuild identifier than expected are ignored by Visual Studio. In the normal case, this simply means you use the tasks and targets that were installed with your version of Visual Studio.\r\n\r\nBecause of this, you may have many versions of the .NET Core SDK on your machine and Visual Studio still fail to find one it considers appropriate. This is compounded by a poor error message, which we cannot fully correct because it is from the old version of the .NET Core SDK on your machine. Confusion is also compounded by a complex non-linear release matrix that makes it difficult to predict the right .NET Core SDK to select. We are working to improve all this. \r\n\r\n## The Visual Studio / .NET Core SDK support matrix\r\n\r\nThe last two digits of the .NET Core SDK version number are a patch number, which are represented by a `nn` in this table. You can learn more about .NET Core SDK and .NET Core Runtime versioning at the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\nThe following table shows which Visual Studio versions and .NET Core SDKs are compatible and how they are acquired if you are working with Visual Studio. \r\n\r\n| .NET Core SDK | .NET Core Runtime | Compatible Visual Studio | MSBuild | Notes                                     |\r\n|---------------|-------------------|--------------------------|---------|-------------------------------------------|\r\n| 2.1.5nn       | 2.1               | 2017                     | 15      | Installed as part of VS 2017 version 15.9 |\r\n| 2.1.6nn       | 2.1               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 2.2.1nn       | 2.2               | 2017                     | 15      | Installed manually                        |\r\n| 2.2.2nn       | 2.2               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 3.0.1nn       | 3.0 (Preview)     | 2019                     | 16      | Installed manually                        |\r\n\r\nVisual Studio 2017 cannot work with .NET Core SDK 2.1.6nn or 2.2.2nn.\r\n\r\nTo find out more about removing older versions of the .NET Core Runtime and .NET Core SDK, visit the [How to remove the .NET Core Runtime and SDK page](https://docs.microsoft.com/en-us/dotnet/core/versions/remove-runtime-sdk-versions?tabs=macos).\r\n\r\nTo download the .NET Core SDK, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core).","Url":"https://github.com/dotnet/announcements/issues/108","RelatedDescription":"Open issue \".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\" (#108)"},{"Id":"432081093","IsPullRequest":false,"CreatedAt":"2019-04-11T15:16:43","Actor":"KathleenDollard","Number":"107","RawContent":null,"Title":"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below","State":"open","Body":"# Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\r\n\r\n.NET Core 3 takes the next step in the .NET Core tool strategy with local tools. As part of this process, starting in Preview 4 DotNetCliToolReference tools will be restricted to targeting .NET Core 2.2 and below. DotNetCliToolReference tools can be used in projects targeting .NET Core 3.0, but the tools themselves should target .NET Core 2.2 or below.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3115](https://github.com/dotnet/sdk/issues/3115)\r\n\r\n## Details\r\n\r\nThe suggested approach going forward is to to use [.NET Core Local Tools](https://aka.ms/local-tools) when you want a tool that is specific to a project or repository. At the same time we are removing the need to access local tools by the verbose `dotnet tool run <toolname>` that was present in earlier previews. You can now access local tools via `dotnet <toolname>`.\r\n\r\nDotNetCliToolReference tools have a flaw in how their dependencies are restored which can create [difficult to diagnose bugs when running these tools](https://github.com/NuGet/Home/issues/5067). This issue would occur much more frequently if targeting .NET Core 3.0 was allowed. Restricting tools to target only .NET Core 2.2 and below means existing scenarios to continue to work (as well as they previously did), regardless of the framework version targeted by the project or the current .NET Core SDK. \r\n\r\nThe new .NET Core tool strategy avoids this flaw in restore strategy and offers other benefits, like the ability to author one type of tool and install it in different ways depending on project and user needs.\r\n\r\nWe look forward to your feedback on .NET Core Local Tools, and on challenges you face moving away from DotNetCliToolReference tools. \r\n\r\n[dotnet/sdk #3057](https://github.com/dotnet/sdk/pull/3057)","Url":"https://github.com/dotnet/announcements/issues/107","RelatedDescription":"Open issue \"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\" (#107)"},{"Id":"431012407","IsPullRequest":false,"CreatedAt":"2019-04-09T14:51:18","Actor":"MichaelSimons","Number":"106","RawContent":null,"Title":".NET Core SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Core SDK container images now contain the Visual Studio 2019 toolset\r\n\r\n.NET Core SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add *additional* tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Core SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Core SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1042](https://github.com/dotnet/dotnet-docker/issues/1042)\r\n\r\n## Details\r\n\r\n[Visual Studio 2019](https://devblogs.microsoft.com/visualstudio/visual-studio-2019-code-faster-work-smarter-create-the-future/) was released on April 2, 2019. We updated the .NET Core SDK container images, on the same day, to include a new version of the .NET Core SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag:\r\n\r\n* 2.1: `mcr.microsoft.com/dotnet/core/sdk:2.1.505`\r\n* 2.2: `mcr.microsoft.com/dotnet/core/sdk:2.2.105`\r\n\r\nDetails:\r\n\r\n* [dotnet/dotnet-docker #1029](https://github.com/dotnet/dotnet-docker/pull/1029)\r\n* [2.1 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.602-SDK/2.1.602-SDK.md)\r\n* [2.2 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.202-SDK/2.2.202-SDK.md)\r\n\r\n## Known Breaking Changes for SDK images (VS 2017 to VS 2019 upgrade)\r\n\r\nThe following issues and breaks have been discovered.\r\n \r\n### Test Log File Name Change\r\n\r\nA change was introduced to the `dotnet test` command when a user-defined log file name is specified.  In the previous version the resulting log file would be named exactly as specified.  In the current version, the log file is named with a timestamp suffix automatically added to the user-defined name.  \r\n\r\nDetails:\r\n* [Microsoft/vstest #1603](https://github.com/Microsoft/vstest/issues/1603) \r\n* [Microsoft/vstest#1876](https://github.com/Microsoft/vstest/issues/1876)","Url":"https://github.com/dotnet/announcements/issues/106","RelatedDescription":"Open issue \".NET Core SDK container images now contain the Visual Studio 2019 toolset\" (#106)"},{"Id":"431003701","IsPullRequest":false,"CreatedAt":"2019-04-09T14:35:39","Actor":"MichaelSimons","Number":"105","RawContent":null,"Title":"Windows Server, version 1709 no longer Supported by .NET Framework","State":"open","Body":"# Windows Server, version 1709 no longer Supported by .NET Framework\r\n\r\nWindows Server, version 1709 is no longer supported. As a result, this version of Windows is no longer supported by the .NET Team and we will no longer produce .NET Framework container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Framework Docker images](https://hub.docker.com/_/microsoft-dotnet-framework)\r\n* [.NET Framework Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-framework)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-framework-docker #259](https://github.com/Microsoft/dotnet-framework-docker/issues/259)\r\n\r\n## Details\r\n\r\nDocker tags that contain `windowsservercore-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Windows Server and .NET Framework.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `4.7.1`, and  `4.7.2`. These are tags that are supported on multiple operating systems and versions, and do  not contain the operating system in them. As a result of no longer producing new images for Windows Server, version 1709, manifest tags no longer include entries for Windows 10, version 1709, and Windows Server,version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.17134-based image is incompatible with a 10.0.16299 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Windows Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Windows Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/framework/runtime:4.7.2-windowsservercore-1709` or `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-windowsservercore-1709`.","Url":"https://github.com/dotnet/announcements/issues/105","RelatedDescription":"Open issue \"Windows Server, version 1709 no longer Supported by .NET Framework\" (#105)"},{"Id":"430998341","IsPullRequest":false,"CreatedAt":"2019-04-09T14:25:57","Actor":"MichaelSimons","Number":"104","RawContent":null,"Title":"Nano Server 2016 and 1709 no longer Supported by .NET Core","State":"open","Body":"# Nano Server 2016 and 1709 no longer Supported by .NET Core\r\n\r\nNano Server 2016 and Nano Server, version 1709 are no longer supported. As a result, these versions of Windows are no longer supported by the .NET Team and we will no longer produce .NET Core container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Core Docker images](https://hub.docker.com/_/microsoft-dotnet-core)\r\n* [.NET Core Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-core)\r\n* [Products Reaching End of Support for 2018](https://support.microsoft.com/en-us/help/4043450/products-reaching-end-of-support-for-2018)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\nWe previously announced Nano Server 2016 going out of support in [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/). That post is still accurate.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1041](https://github.com/dotnet/dotnet-docker/issues/1041)\r\n\r\n## Details\r\n\r\nDocker tags that contain `nanoserver-sac2016` and `nanoserver-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Nano Server and .NET Core.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `2.1`, `2.1-sdk`, `2.2.1-runtime`. These are tags that are supported on multiple operating systems, and do not contain the operating system in them. As a result of no longer producing new images for Nano Server 2016 and Nano Server, version 1709, manifest tags no longer include entries for Nano Server 2016, Windows Server 2016, Windows 10, version 1607, Windows 10, version 1709, and Windows Server, version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.16299-based image is incompatible with a 10.0.14393 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Nano Server 2016 or Nano Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Nano Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-sac2016` or `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-1709`.\r\n\r\n### Nano Server Support\r\n\r\n.NET Core is supported on Nano Server, version 1803 and later. \r\n\r\n.NET Core 2.x and 3.0 images are available for all supported versions of Nano Server, version 1803 and later. This means that 2.x and 3.0 manifest tags can be used on Windows 10, version 1803+, and Windows Server, version 1803+. You can also use non-manifest tags for those versions, too, such as `2.2-nanoserver-1809`.\r\n\r\n.NET Core 1.x images are available for Nano Server, version 1809 and later. This means that 1.x manifest tags can be used on Windows 10, version 1809+, Windows Server, version 1809+ and Windows Server 2019. You can also use non-manifest tags for those versions, too, such as `1.1-nanoserver-1809` tag.","Url":"https://github.com/dotnet/announcements/issues/104","RelatedDescription":"Open issue \"Nano Server 2016 and 1709 no longer Supported by .NET Core\" (#104)"},{"Id":"420117627","IsPullRequest":false,"CreatedAt":"2019-03-12T17:35:16","Actor":"vivmishra","Number":"103","RawContent":null,"Title":"March 2019 .NET Updates","State":"open","Body":"# March 2019 .NET Updates\r\n\r\nThe following .NET updates were released in March 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework March 2019 Update - March 19, 2019](https://devblogs.microsoft.com/dotnet/net-framework-march-2019-update/)\r\n* [.NET Framework April 2, 2019 Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - April 2, 2019](https://devblogs.microsoft.com/dotnet/net-framework-april-2-2019-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.15 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.15/1.0.15.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.12/1.1.12.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.9 and .NET Core SDK 2.1.505 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.9/2.1.9.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.3 and .NET Core SDK 2.2.105 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.3/2.2.3.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2432](https://github.com/dotnet/core/issues/2432)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/103","RelatedDescription":"Open issue \"March 2019 .NET Updates\" (#103)"},{"Id":"415363751","IsPullRequest":false,"CreatedAt":"2019-02-27T22:49:51","Actor":"leecow","Number":"102","RawContent":null,"Title":"SDK Installers will remove previous patch versions","State":"open","Body":"The SDK Installers for Windows will upgrade patch versions in place within the same feature band. This will reduce the number of SDKs that are installed on programmer machines.\r\n\r\nFeature bands of the SDK are defined like 3.0.1nn. [Find out more about SDK version numbers](https://docs.microsoft.com/dotnet/core/versions/#versioning-details).\r\n\r\nThis means when .NET Core SDK 3.0.101 becomes available and is installed, .NET Core SDK 3.0.100 will be removed from the machine if it exists. When .NET Core SDK 3.0.200 becomes available and is installed on the same machine, .NET Core SDK versions like 3.0.101 will not be removed but stay side by side with 3.0.200.\r\n\r\nThis approach supports use of `global.json` which will roll forward across patch versions, but not feature bands of the SDK. Thus, upgrading via the SDK installer will not result in errors due to a missing SDK. Feature bands also align with side by side Visual Studio installations for those users that install SDKs for Visual Studio use. For example, Visual Studio 15.9 uses .NET Core SDK 2.2.500 but does not support .NET Core SDK 2.2.600.\r\n\r\nFind out how to [remove other .NET Core SDK versions here.](https://docs.microsoft.com/dotnet/core/versions/remove-runtime-sdk-versions).","Url":"https://github.com/dotnet/announcements/issues/102","RelatedDescription":"Open issue \"SDK Installers will remove previous patch versions\" (#102)"},{"Id":"410971363","IsPullRequest":false,"CreatedAt":"2019-02-15T22:24:40","Actor":"richlander","Number":"101","RawContent":null,"Title":"Publishing .NET Core images to Microsoft Container Registry (MCR)","State":"open","Body":"# Publishing .NET Core images to Microsoft Container Registry (MCR)\r\n\r\nMicrosoft teams are now publishing container images to the [Microsoft Container Registry](https://azure.microsoft.com/en-us/blog/microsoft-syndicates-container-catalog/). There are two primary reasons for this change:\r\n\r\n* Syndicate Microsoft-provided container images to multiple registries, like Docker Hub and Red Hat.\r\n* Use Microsoft Azure as a global CDN for delivering Microsoft-provided container images.\r\n\r\nYou will use and see MCR as a storage back-end for Microsoft images. The primary way you learn about Microsoft container images and tags will be through a registry, which for most users will continue to be Docker Hub. Most of the experience you've had browsing for .NET Core container images will continue unchanged with this new model. The Docker Hub URLs you've used for Microsoft repos will continue to work, and forward to updated locations on Docker Hub. Existing Docker Hub will images will be maintained as-is.\r\n\r\nSee [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/) for the most updated information on our use of MCR.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #935](https://github.com/dotnet/dotnet-docker/issues/935)\r\n\r\n## Starting with .NET Core nightly repo\r\n\r\nOn the .NET team, we started our [transition to MCR](https://github.com/dotnet/dotnet-docker/issues/745) with the .NET Core \"nightly\" repo. [dotnet-nightly](dockerhub.com/r/microsoft/dotnet-nightly) is now hosted on MCR and syndicated to Docker Hub. We started with the nightly repo in order to discover and fix any challenges we found with this new model before we move our higher-traffic primary container repository.\r\n\r\nWe will start publishing [dotnet](dockerhub.com/r/microsoft/dotnet) to MCR a bit later, in either February or March. This issue will be updated when that happens.\r\n\r\n## Repo Split\r\n\r\nThe [.NET Core repo](https://hub.docker.com/r/microsoft/dotnet) currently includes 4 major categories of tags: \r\n\r\n* `sdk`\r\n* `aspnetcore-runtime`\r\n* `runtime` \r\n* `runtime-deps`\r\n\r\nProviding all of the tags in one place has helped with discoverability but made for a repo with an enormous README that can be challenging to navigate and consume. It is large enough that we exceeded Docker Hub README limits and had to artificially make it smaller.\r\n\r\nGoing forward, we will provide a repo for each of the tag categories listed above. We'll also provide a \"product repo\" that will hierarchicaly group all of our repos together. This will satisfy discoverability needs so that it will be easy to find the tags you want.\r\n\r\nYou can already see this experience with [microsoft-dotnet-core-nightly](https://hub.docker.com/_/microsoft-dotnet-core-nightly). There are now multiple repos for our nightly builds:\r\n\r\n* [.NET Core Nightly product repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly)\r\n* [.NET Core SDK Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-sdk/)\r\n* [.NET Core ASP.NET Core Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-aspnet/)\r\n* [.NET Core Runtime Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime/)\r\n* [.NET Core Runtime-deps Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime-deps/)\r\n\r\nThe same split will exist for the non-nightly stable repo (currently hosted at  [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet)) when we start publishing it to MCR and syndicating it back to DockerHub.\r\n\r\n## Changes to registry URL\r\n\r\nThe biggest change is that your Dockerfiles need to be updated to point to the MCR registry in order get access to new .NET Core container tags. The same change is required for scripts or human operations that pull images via `docker pull`.\r\n\r\nThe following example shows the registry path, repo and tag for the .NET Core 2.2 \"Nightly\" SDK on MCR:\r\n\r\n```console\r\nmcr.microsoft.com/dotnet/core-nightly/sdk:2.2\r\n```\r\n\r\nAs comparison, the following repo and tag have been used to date for the .NET Core 2.2 \"Nightly\" SDK on Docker Hub:\r\n\r\n```console\r\nmicrosoft/dotnet-nightly:2.2-sdk\r\n```\r\n\r\nThe new repo URL is provided at each of the news repos. For example, the new .NET Core SDK \"nightly\" repo provides a box on the right where you can copy and paste the correct MCR-based repo syntax that you can use for `docker pull` or in `FROM` statements in your Dockerfiles.\r\n\r\n![image](https://user-images.githubusercontent.com/2608468/52811702-95c5eb80-304a-11e9-8de8-e6ea1f4b4d75.png)\r\n\r\n## Servicing existing Docker Hub tags\r\n\r\nWe will continue to service existing non-version-specific or floating tags on Docker Hub while the associated .NET Core version is supported. For example the `microsoft/dotnet:2.1-sdk` tag is a floating tag that will continue to be serviced for the lifetime of .NET Core 2.1. You can continue using floating tags without issue.\r\n\r\nIf you use non-floating tags, like `microsoft/dotnet:2.1.504-sdk-alpine`, then you will need to update your Dockerfile to use a new non-floating tag. No new non-floating tags will be published to `microsoft/dotnet` and `microsoft/dotnet-nightly` after we fully transition to MCR.\r\n\r\n.NET Core 3.0 Preview 3 and later will only be made available on MCR.\r\n\r\n## Microsoft is a Verified Publisher\r\n\r\nUntil now, Microsoft-provided container images were considered \"community images\". As part of this change, we are re-classifying Microsoft as a \"verified publisher\" on Docker Hub. This designation should make it clearer that .NET and other Microsoft-provided images are coming from a verified source. There clearly was that expectation previously, but Docker is now making that clearer in the Docker Hub pages they host for Microsoft.\r\n\r\nWe will provide official vulnerability scanning Microsoft-provided images as a second phase of this transition.","Url":"https://github.com/dotnet/announcements/issues/101","RelatedDescription":"Open issue \"Publishing .NET Core images to Microsoft Container Registry (MCR)\" (#101)"},{"Id":"410784442","IsPullRequest":false,"CreatedAt":"2019-02-15T14:06:29","Actor":"TaraOverfield","Number":"100","RawContent":null,"Title":"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809","State":"open","Body":"<strong><em>Final Update 2/19/19 @1:30 PM (PST)</em></strong><em>: This </em><em>advisory is now resolved with no action needed from Microsoft Customers. The issue was not applicable to any valid or supported configuration. There is no consequence for .NET 4.8 Preview customers. </em>\r\n\r\n<em>We strive to share timely information to protect our customer’s productivity, in this case, our finding was thankfully of no consequence for customers on supported configurations.</em>\r\n\r\n<del><em><strong>Update 2/15/19 @3:35 PM (PST)</strong></em><em>: As we continue our investigation, we are finding the issue to be restricted to a limited and isolated set of test-only systems that are using non-official versions of the .NET 4.8 Preview. As of 2/15/19 around 12:00 pm (PST) we further tightened our delivery mechanisms to ensure that the February .NET security updates are only deployed to their expected target systems.</em></del>\r\n\r\n<del><span>The </span><a href=\"https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/\" rel=\"nofollow\">February 2019 Security and Quality Rollup for Windows 10 update 1809</a><span> was released earlier this week. We have received multiple customer reports of issues when a customer has installed .NET Framework 4.8 Preview then installed the February security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>.</span> These reports are specific to only to the scenario when a customer has installed both .NET Framework 4.8 Preview and the February security update.</del>\r\n\r\n<del>We are actively working on investigating and addressing this issue. If you installed the February 2019 security update and have not seen any negative behavior, we recommend that you leave your system as-is but closely monitor it and ensure that you apply upcoming .NET Framework updates.</del>\r\n\r\n<del>We will continue to update this <a href=\"https://github.com/dotnet/announcements/issues/100\" rel=\"nofollow\">post</a> as we have new information.</del>\r\n<h2><del>Guidance</del></h2>\r\n<del>We are working on guidance and will update this post and as we have new information.</del>\r\n<h2><del>Workaround</del></h2>\r\n<del>There are no known workarounds at this time.</del>\r\n<h2><del>Symptoms</del></h2>\r\n<del>After installing .NET Framework 4.8 Preview then the February 2019 security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>, Visual Studios will crash with this error message:</del>\r\n<p class=\"xxxxxmsonormal\"><del><b><span style=\"font-size: 10.5pt;font-family: 'Segoe UI',sans-serif;color: black\">\"Exception has been thrown by the target of an invocation.\"</span></b></del></p>","Url":"https://github.com/dotnet/announcements/issues/100","RelatedDescription":"Open issue \"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809\" (#100)"},{"Id":"410455095","IsPullRequest":false,"CreatedAt":"2019-02-14T19:28:25","Actor":"richlander","Number":"99","RawContent":null,"Title":"Supporting new Alpine versions (for containers)","State":"open","Body":"# Supporting new Alpine versions (for containers)\r\n\r\n[Alpine 3.9](https://twitter.com/alpinelinux/status/1090416212822110214) was recently announced. Congratulations, Alpine team! On the .NET team, we are committed to supporting new Alpine versions quickly, and also need to define a policy for older versions. This policy only applies for the container images that we publish.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #933](https://github.com/dotnet/dotnet-docker/issues/933)\r\n\r\n## Policy\r\n\r\nWe intend to establish the following policy for supporting Alpine with .NET Core container images:\r\n\r\n* Support new Alpine versions within 60 days of release (hopefully much less).\r\n* Support n-1 Alpine versions for 3 months after we support a new Alpine version.\r\n\r\nNote: The [.NET Core support policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md) may be broader. This policy is specific to the container images we produce.\r\n\r\n## Plans\r\n\r\nWe're in the process of [fixing issues required to support Alpine 3.9](https://github.com/dotnet/dotnet-docker/issues/921). We expect that these issues will be resolved in February and that we'll be able to provide support for Alpine 3.9 in March.\r\n\r\nWe will produce Alpine 3.9 images for .NET Core 2.1, 2.2 and 3.0. Assuming we publish 3.9 images in March, we'll stop producing and supporting Alpine 3.7 and 3.8 images after June (2019).\r\n\r\n## Using Alpine-based .NET Core images\r\n\r\nWe produce a variety of Alpine-based images. You can either depend on a specific Alpine version, like with `microsoft/dotnet:2.2-sdk-alpine3.8` or opt to use the latest Alpine image we have to offer, like with `microsoft/dotnet:2.2-sdk-alpine`. Either are good choices. It is just a question of whether you want to make a conscious decision to move to later Alpine releases.\r\n\r\n## Support for ARM32?\r\n\r\nWe produce Alpine images for x64 (and ARM64, shortly). The [Alpine 3.9 announcement](https://twitter.com/alpinelinux/status/1090416212822110214) made mention of support for ARM32v7. We would like to enable .NET Core [Alpine-based images on ARM32](https://github.com/gliderlabs/docker-alpine/issues/463#issuecomment-460530395). We are patiently waiting for that to happen. If that's important to you, you should comment on that thread.","Url":"https://github.com/dotnet/announcements/issues/99","RelatedDescription":"Open issue \"Supporting new Alpine versions (for containers)\" (#99)"},{"Id":"409840927","IsPullRequest":false,"CreatedAt":"2019-02-13T14:48:21","Actor":"TaraOverfield","Number":"98","RawContent":null,"Title":"February 2019 .NET Updates","State":"open","Body":"# February 2019 .NET Updates\r\nThe following .NET updates were released in February 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework February 2019 Security and Quality Rollup - February 12, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/)\r\n* [.NET Framework February 2019 Preview of Quality Rollup - February 19, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/19/net-framework-february-2019-preview-of-quality-rollup/)\r\n\r\n## .NET Support Policies\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/98","RelatedDescription":"Open issue \"February 2019 .NET Updates\" (#98)"},{"Id":"409436643","IsPullRequest":false,"CreatedAt":"2019-02-12T18:21:22","Actor":"leecow","Number":"97","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability","State":"open","Body":"## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a domain spoofing vulnerability in .NET Framework and .NET Core which causes the meaning of a URI to change when International Domain Name encoding is applied. An attacker who successfully exploited the vulnerability could redirect a URI.\r\n\r\nThe security update addresses the vulnerability by disallowing certain Unicode characters from the URI.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/35265\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core 1.0 or 1.1 based application that uses the [System.Private.Uri](https://www.nuget.org/packages/System.Private.Uri/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0 | 4.3.1\r\n\r\nAny .NET Core 2.1 or 2.2 based application that uses the [Microsoft.NETCore.App](https://www.nuget.org/packages/Microsoft.NETCore.App) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6, 2.1.7, 2.2.0, 2.2.1 | 2.1.8, 2.2.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Private.Uri` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.2.1, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Private.Uri/4.3.0` is a reference to version 4.3.0 of `System.Private.Uri`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.8 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.2 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Private.Uri` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.Private.Uri` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0657](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0657)\r\n\r\n### Revisions\r\n\r\nV1.0 (February 12, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-02-08_\r\n","Url":"https://github.com/dotnet/announcements/issues/97","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability\" (#97)"},{"Id":"397026248","IsPullRequest":false,"CreatedAt":"2019-01-08T18:17:45","Actor":"leecow","Number":"96","RawContent":null,"Title":"January 2019 .NET Updates","State":"open","Body":"# January 2019 .NET Updates\r\n\r\nThe following .NET updates were released in January 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework January 2019 Preview of Quality Rollup - January 15, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/15/net-framework-january-2019-preview-of-quality-rollup/)\r\n* [.NET Framework January 2019 Security and Quality Rollup - January 8, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/08/net-framework-january-2019-security-and-quality-rollup/)\r\n* [.NET Framework January 22, 2018 Preview of Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - January 22, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/22/net-framework-january-22-2018-preview-of-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.7 and .NET Core SDK 2.1.503 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.7/2.1.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.1 and .NET Core SDK 2.2.102 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.1/2.2.1.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2210](https://github.com/dotnet/core/issues/2210)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/96","RelatedDescription":"Open issue \"January 2019 .NET Updates\" (#96)"},{"Id":"397020176","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:27","Actor":"blowdart","Number":"95","RawContent":null,"Title":" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a tampering vulnerability exists when .NET Core improperly handles specially crafted files. An attacker who successfully exploited this vulnerability could write arbitrary files and directories to certain locations on a vulnerable system. However, an attacker would have limited control over the destination of the files and directories.\r\n\r\nTo exploit the vulnerability, an attacker must send a specially crafted file to a vulnerable system\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core handles these files.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34427\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nIf your application does not extract ZIP compressed files it is unaffected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.IO.Compression.ZipFile](https://www.nuget.org/packages/System.IO.Compression.ZipFile/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.IO.Compression.ZipFile) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n`System.IO.Compression.ZipFile` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\nFinally, you must restart your applications once an updated runtime or SDK is installed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Danny Grander](https://twitter.com/grander) of [Snyk](https://snyk.io/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-8416](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8416)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected pacakge table.\r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/95","RelatedDescription":"Open issue \" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\" (#95)"},{"Id":"397020142","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:23","Actor":"blowdart","Number":"94","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of an information disclosure vulnerability exists in .NET Framework and .NET Core which allows bypassing Cross-origin Resource Sharing (CORS) configurations. An attacker who successfully exploited the vulnerability could retrieve content, that is normally restricted, from a web application.\r\n\r\nThe security update addresses the vulnerability by enforcing CORS configuration to prevent its bypass.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34428\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.2.0 | 2.2.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Net.Http` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `SSystem.Net.Http/4.3.0` is a reference to version 4.3.0 of `System.Net.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Net.Http` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0545](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0545)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected package table. \r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n","Url":"https://github.com/dotnet/announcements/issues/94","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\" (#94)"},{"Id":"390948658","IsPullRequest":false,"CreatedAt":"2018-12-14T03:22:58","Actor":"wu-yafeng","Number":"93","RawContent":null,"Title":"Docker image with tag '2.2-aspnetcore-runtime' is not compatible","State":"closed","Body":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]","Url":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Closed issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93)"},{"Id":"390193072","IsPullRequest":false,"CreatedAt":"2018-12-12T12:56:53","Actor":"bilalmalik777","Number":"92","RawContent":null,"Title":".net core Console","State":"closed","Body":"I am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n    networks:\r\n     - app-network\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\nIf the detail is not enough or you do not get my point, you can share your confusion in comment","Url":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Closed issue \".net core Console\" (#92)"},{"Id":"380346599","IsPullRequest":false,"CreatedAt":"2018-11-13T17:44:44","Actor":"leecow","Number":"91","RawContent":null,"Title":"November 2018 .NET Updates","State":"open","Body":"# November 2018 .NET Updates\r\n\r\nThe following .NET updates were released in November 2018. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core November 2018 (2.1.6 and SDK 2.1.500) Update release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.6/2.1.6.md)\r\n\r\nA [discussion issue](https://github.com/dotnet/core/issues/2053) is available for questions or feedback about this release.\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [October 2018](https://github.com/dotnet/announcements/issues/89)\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/91","RelatedDescription":"Open issue \"November 2018 .NET Updates\" (#91)"},{"Id":"375230004","IsPullRequest":false,"CreatedAt":"2018-10-29T21:45:27","Actor":"terrajobst","Number":"90","RawContent":null,"Title":"The future of JSON in .NET Core 3.0","State":"open","Body":"JSON has become an essential part of virtually all modern .NET applications and in many cases even surpassed the usage of XML. However, .NET hasn't had a (great) built-in way to deal with JSON. Instead we've relied on [Json.NET] which continues to serve the .NET ecosystem well.\r\n\r\n[Json.NET]: https://www.newtonsoft.com/json\r\n\r\nMoving forward, we plan on making some changes to our JSON support:\r\n\r\n* **We need high-performance JSON APIs**. We need a new set of JSON APIs that are highly tuned for performance by using `Span<T>` and allows for processing UTF-8 directly without having to transcode to UTF-16 `string` instances. Both aspects are critical for our web server Kestrel, where throughput is a key requirement.\r\n\r\n* **Remove dependency from ASP.NET Core to Json.NET**. Today, ASP.NET Core has a dependency on Json.NET. While this provides a tight integration between ASP.NET Core and Json.NET, it also means that application developers cannot freely choose which JSON library they are using. This is also problematic for customers of Json.NET as the version is dictated by the underlying platform. However, Json.NET is frequently updated and application developers often want to -- or even have to -- use a specific version. Thus, we want to remove the dependency from ASP.NET Core 3.0 to Json.NET so that customers can choose which version to use, without fearing they might accidentally break the underlying platform. In addition, this makes it also possible to plug-in an entirely different JSON library.\r\n\r\n* **Provide an ASP.NET Core integration package for Json.NET**. Json.NET has basically become the Swiss Army knife of JSON processing in .NET. It provides many options and facilities that allow customers to handle their JSON needs with ease. We don't want to compromise on the Json.NET support customers are getting today, for example, the ability to configure the JSON serialization via the `AddJsonOptions` extension method. Thus, we want to provide the Json.NET integration as a NuGet package that developers can optionally install so they get all the bells and whistles they get from Json.NET today. The other part of this work item is to ensure we have the right extension points so that other parties can provide similar integration packages for their JSON library of choice.\r\n\r\nBelow are more details around this plan.\r\n\r\n## The need for high-performance JSON APIs\r\n\r\nThe requirements for the .NET stack have changed a bit since the arrival of .NET Core. Historically, .NET has valued usability and convenience. With .NET Core, we've added a focus on performance, and we've made significant investments to serve high performance needs. And the [improvements we made][techempower] in the popular TechEmpower benchmark are a testament to that.\r\n\r\n[techempower]: https://www.techempower.com/blog/2016/11/16/framework-benchmarks-round-13/\r\n\r\nWith .NET Core 2.1, we've added a brand new primitive called [Span\\<T>][span-msdn] that allows us to represent native memory and arrays in a uniform way. With this type, we've also added a set of parsing and encoding APIs that are much more memory efficient without having to resort to unsafe code.\r\n\r\n[span-msdn]: https://msdn.microsoft.com/en-us/magazine/mt814808.aspx\r\n\r\nPart of the work of minimizing allocations is to avoid having to transcode UTF-8 payloads into UTF-16 strings, purely for parsing reasons. Currently, Json.NET is implemented by reading UTF-16. We need the ability to read (and write) JSON documents directly in UTF-8 because most network protocols (including HTTP) use UTF-8.\r\n\r\nDuring .NET Core 2.1 we've learned that updating our existing APIs to leverage `Span<T>` has limits. While we did add a bunch of overloads that accept spans, we also had to produce brand new APIs that are designed around minimizing allocations and dealing with buffers, which we exposed in `System.Buffers` namespaces. And with `System.IO.Pipelines` we've also added a programming model that enables developers to share buffers without having to deal with lifetime issues.\r\n\r\nBased on these experiences we believe in order to support JSON parsing, we'll need to expose a new set of JSON APIs that are specifically geared for high-performance scenarios.\r\n\r\nYou might wonder why we can't just update Json.NET to include support for parsing JSON using `Span<T>`? Well, James Newton-King -- the author of Json.NET -- has the following to say about that:\r\n\r\n> Json.NET was created over 10 years ago, and since then it has added a wide range of features aimed to help developers work with JSON in .NET. In that time Json.NET has also become far and away NuGet's most depended on and downloaded package, and is the go-to library for JSON support in .NET. Unfortunately, Json.NET's wealth of features and popularity works against making major changes to it. Supporting new technologies like `Span<T>` would require fundamental breaking changes to the library and would disrupt existing applications and libraries that depend on it.\r\n>\r\n> Going forward Json.NET will continue to be worked on and invested in, both addressing known issues today and supporting new platforms in the future. Json.NET has always existed alongside other JSON libraries for .NET, and there will be nothing to prevent you using one or more together, depending on whether you need the performance of the new JSON APIs or the large feature set of Json.NET.\r\n\r\n## Move Json.NET integration into a separate NuGet package\r\n\r\nToday, you cannot use ASP.NET Core without Json.NET because it is a dependency of ASP.NET Core itself. Over the years, we've received feedback that the dependency can conflict with other libraries that have their own dependency on a different version of Json.NET. In the past, we've considered addressing this issue by using a private copy of Json.NET in ASP.NET. However, this would create problems when developers want to configure Json.NET (for instance, in order to control how the serializer behaves when formatting JSON objects).\r\n\r\nMoving forward we'd like to:\r\n\r\n1. Replace the internal usage of Json.NET in ASP.NET Core by the new platform-provided JSON APIs.\r\n\r\n2. Factor the public facing usage of Json.NET into an optional integration package that can be acquired from NuGet.\r\n\r\nSo the existing integration between ASP.NET Core and Json.NET will continue to be supported, but will be moving out of the platform and into a separate package. However, since the integration is then designed to sit on top of the platform, it will also allow customers to update Json.NET to later versions.\r\n\r\nFurthermore, customers who need more performance can also choose to use the new JSON APIs, at the expense of the rich feature set that Json.NET offers.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/33115.","Url":"https://github.com/dotnet/announcements/issues/90","RelatedDescription":"Open issue \"The future of JSON in .NET Core 3.0\" (#90)"},{"Id":"368440353","IsPullRequest":false,"CreatedAt":"2018-10-09T23:44:06","Actor":"vivmishra","Number":"89","RawContent":null,"Title":"October 2018 .NET Updates","State":"open","Body":"# October 2018 .NET Updates\r\n\r\nThe following .NET updates were released in October 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core October 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/10/09/net-core-october-2018-update-net-core-1-0-and-1-1/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/89","RelatedDescription":"Open issue \"October 2018 .NET Updates\" (#89)"},{"Id":"368429033","IsPullRequest":false,"CreatedAt":"2018-10-09T22:51:18","Actor":"leecow","Number":"88","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core when HTTP authentication information is inadvertently exposed in an outbound request that encounters an HTTP redirect. An attacker who successfully exploited this vulnerability could use the information to further compromise the web application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handles HTTP redirects.\r\n\r\nSystem administrators running .NET Core 1.0 or .NET Core 1.1 applications must update their .NET Core runtimes to versions 1.0.13 and 1.1.10 then restart their applications. If installed applications target .NET Core 2.0, the applications must be migrated to 2.1 or newer and redeployed.\r\n\r\nDevelopers must update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core 2.0](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 then redeploy.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at <https://github.com/dotnet/corefx/issues/32730>\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nNone\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nAdditionally package authors should check their dependencies to ensure they aren't depending on a vulnerable version of the following package:\r\n\r\n<a name=\"package-list\"></a>Package name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Net.Http| 2.0.20126.16343, 2.0.20505, 2.0.20710, 4.0.0, 4.1.0, 4.1.1, 4.1.2, 4.3.0, 4.3.1, 4.3.2, 4.3.3 |  4.3.4 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nTo check the currently installed runtimes and SDKs with version 2.1 or later of .NET Core, open a command prompt and run the `dotnet --info` command. You should see an output similar to the following:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.403\r\n Commit:    04e15494b6\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.403\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.5\r\n  Commit:  290303f510\r\n\r\n.NET Core SDKs installed:\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.10 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf you don't see a runtime entry for 1.0.13 or 1.1.10, any .NET Core 1.x applications run on that computer are vulnerable.\r\n\r\nIf you don't have a 2.1 version of the runtime or SDK installed, you can produce the complete list of runtimes by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows | `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS | `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms | `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.13, 1.1.10 then any application targeting versions 1.0 or 1.1 are vulnerable.\r\n\r\nAdditionally, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n### <a name=\"fix-runtime\">How do I fix the vulnerability?\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.13, 1.1.10 and install the latest 2.1 runtime, ensuring that any 2.0 applications are migrated to 2.1 as soon as possible.\r\n\r\n Developers are advised to update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at <https://github.com/dotnet/> and <https://github.com/aspnet/>, respectively. The Announcements repo for each product (<https://github.com/dotnet/Announcements> and <https://github.com/aspnet/Announcements>) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8292](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8292)\r\n\r\n### Revisions\r\n\r\nV1.0 (October 10, 2018): Advisory published.\r\n_Version 1.0_\r\n_Last Updated 2018-10-10_\r\n","Url":"https://github.com/dotnet/announcements/issues/88","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\" (#88)"},{"Id":"367393517","IsPullRequest":false,"CreatedAt":"2018-10-05T22:58:51","Actor":"leecow","Number":"87","RawContent":null,"Title":".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan","State":"open","Body":"# .NET Core Release Data (releases.json) Redesign and Deprecation\r\n\r\nThe releases.json and releases.csv files began life as helper tools for some of our internal release work, some experimentation and to possibly be useful to the community. It has been great to learn the files are indeed in use and many folks depend on them as a trigger for a number of activities.\r\n\r\n* [release-notes/releases.json](https://github.com/dotnet/core/blob/master/release-notes/releases.json)\r\n* [release-notes/releases.csv](https://github.com/dotnet/core/blob/master/release-notes/releases.csv)\r\n\r\nA discussion topic is available to share thoughts and see what others are thinking at https://github.com/dotnet/core/issues/1986\r\n\r\nBetween the usages which we have become aware and in considering further activities that could be enabled to reason about things such as checking .NET Core version availability and support status, it became clear the current format is inadequate.\r\n\r\nAn updated format has been designed and tested which will replace the current files. The timeline below describes the path to obsoleting the current files.\r\n\r\n## The Plan\r\n\r\n| Date | Action |\r\n| :--- | :----- |\r\n| Oct 2018 | Notify the community of the coming change |\r\n| Oct 2018 | Release the new json format into dotnet/core |\r\n| Oct 2018 - Feb 2019 | Maintain the old json and csv files |\r\n| Feb 2019 | Reminder announcement that old format file is coming soon |\r\n| Mar 2019 | Old json and csv files are obsoleted and removed from dotnet/core |\r\n\r\n## Breaking change\r\n\r\nIf you are currently utilizing the old version json or csv, you will need to update the relevant code to work with the new format. If you are just getting started with consuming this data, use the new version.\r\n\r\n## The Format\r\n\r\nBelow are fragments of the files from our most recent .NET Core release.\r\n\r\n### release-index.json\r\n\r\nThis file consists of a top level array with data on the latest release versions and a property for locating the more detailed channel-specific releases.json. This file is found in [dotnet/core/release-notes](https://github.com/dotnet/core/tree/new-json/release-notes/)\r\n\r\n[releases-index.json](https://github.com/dotnet/core/blob/new-json/release-notes/releases-index.json)\r\n\r\n```\r\n{\r\n    \"releases-index\": [\r\n        {\r\n            \"channel-version\": \"2.1\",\r\n            \"latest-release\": \"2.1.5\",\r\n            \"latest-release-date\":\"2018-10-02\",\r\n            \"product\": \".NET Core\",\r\n            \"support-phase\": \"lts\",\r\n            \"eol-date\": \"\",\r\n            \"releases.json\": \"https://github.com/dotnet/core/blob/master/release-notes/2.1/releases.json\",\r\n        },\r\n        ...\r\n}\r\n```\r\n\r\n### releases.json\r\n\r\nThis file provides detailed data for each release. A copy of this file will be found in each versioned directories under [dotnet/core/release-notes](https://github.com/dotnet/core/release-notes). For example [dotnet/core/release-notes/2.1](https://github.com/dotnet/core/tree/new-json/release-notes/2.1)\r\n\r\n\r\n[releases.json](https://github.com/dotnet/core/tree/new-json/release-notes/2.1/releases.json)\r\n\r\n```\r\n{\r\n    \"channel-version\": \"2.1\",\r\n    \"latest-release\": \"2.1.5\",\r\n    \"latest-release-date\":\"2018-10-12\",\r\n    \"support-phase\": \"lts\",\r\n    \"eol-date\": \"\",\r\n    \"lifecycle-policy\": \"https://www.microsoft.com/net/support/policy\",\r\n    \"releases\":\r\n    [\r\n        {\r\n            \"release-date\":  \"2018-10-02\",\r\n            \"release-version\":  \"2.1.5\",\r\n            \"security\":  false,\r\n            \"release-notes\":  \"https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.5/2.1.5.md\",\r\n            \"runtime\":  \r\n            {\r\n                \"version\":  \"2.1.5\",\r\n                \"version-display\":  \"2.1.5\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"files\":  \r\n                [\r\n                    {\r\n                        \"name\": \"dotnet-runtime-linux-arm.tar.gz\",\r\n                        \"url\": \"https://download.visualstudio.microsoft.com/download/pr/4d555219-1f04-47c6-90e5-8b3ff8989b9c/0798763e6e4b98a62846116f997d046e/dotnet-runtime-2.1.5-linux-arm.tar.gz\",\r\n                        \"hash\": \"89a77a07065ea24e7198c77a233b9ce5c6cf51b1deb2ef55c88f0adbb2ecd9db1ba4e7d55eec2ef7139c47f91346fed360161a5bb6e3a7ccfc4559bcde286364\"\r\n                    },\r\n                    ...\r\n                ]\r\n            }\r\n            \"sdk\":  \r\n            {\r\n                \"version\":  \"2.1.403\",\r\n                \"version-display\":  \"2.1.403\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"csharp-language\":  \"7.3\",\r\n                \"fsharp-language\":  \"4.5\",\r\n                \"files\":  \r\n                [...]\r\n            }\r\n        }\r\n    ]\r\n}\r\n```","Url":"https://github.com/dotnet/announcements/issues/87","RelatedDescription":"Open issue \".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan\" (#87)"},{"Id":"366416503","IsPullRequest":false,"CreatedAt":"2018-10-03T16:11:18","Actor":"leecow","Number":"86","RawContent":null,"Title":".NET Core 2.0 has reached end of life","State":"open","Body":"[.NET Core 2.0 reached end of life](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) on October 1, 2018. This means [.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) is no longer supported and updates will no longer be provided. We recommend moving to [.NET Core 2.1](https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-net-core-2-1/), our long term support (LTS) release.\r\n\r\n- [Download .NET Core 2.1](https://www.microsoft.com/net/download/dotnet-core/2.1)\r\n- [.NET Core 2.1 LTS statement](https://blogs.msdn.microsoft.com/dotnet/2018/08/21/net-core-august-2018-update/)\r\n- [.NET Core 2.0 end-of-life statement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n\r\n## Discussion\r\n\r\nPlease share you thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/core#1983](https://github.com/dotnet/core/issues/1983)\r\n\r\n## Lifecycle Context\r\n\r\n.NET Core releases belong to one of two [support lifecycles](https://www.microsoft.com/net/platform/support-policy): long term support (LTS) and Current. LTS releases are stable release which receive critical updates and are supported for at least three years. Current releases can include new features that may undergo future change based on feedback. Current releases are supported for three months after the subsequent .NET Core major or minor release. Both LTS and Current releases receive critical fixes throughout their lifecycle, for security, reliability, or to add support for new operating system versions. You must stay up-to-date with the latest patches to qualify for support. \r\n\r\n## .NET Core 2.0 Lifecycle\r\n\r\n[.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) was released in August 2017 as a Current release. Per the lifecycle policy, Current releases reach end of life 3 months after a subsequent release (Current or LTS). .NET Core 2.1 released May 2018 and began the end of life countdown for .NET Core 2.0. The 3 month maintenance period for .NET Core 2.0 was scheduled to end August 2018 but was [extended to October](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) to allow time to address an issue some customers were experiencing while migrating to .NET Core 2.1.\r\n\r\n## .NET Core 2.0 Downloads\r\n\r\n.NET Core 2.0 installers, zips and tar.gzs will remain available, but unsupported. This includes existing releases available on Linux package feeds. Previous versions, including 2.0, will be accessible through the [Download Archives](https://www.microsoft.com/net/download/archives). \r\n\r\n## .NET Core 2.0 Docker Images\r\n\r\n.NET Core 2.0 will be removed from the .NET and ASP.NET Docker repo READMEs, however the existing images remain available in those repos.\r\n\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/)\r\n* [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/)\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)\r\n\r\n## Policy Information\r\n\r\nAdditional lifecycle and support details  and background can be seen in the following:\r\n\r\n* [.NET Core Support Lifecycle](https://www.microsoft.com/net/platform/support-policy)\r\n* [Support and Versioning](https://blogs.msdn.microsoft.com/dotnet/2016/07/26/net-support-and-versioning/)\r\n* [2.0 end of life early announcement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n","Url":"https://github.com/dotnet/announcements/issues/86","RelatedDescription":"Open issue \".NET Core 2.0 has reached end of life\" (#86)"},{"Id":"361098704","IsPullRequest":false,"CreatedAt":"2018-09-18T01:10:23","Actor":"spshant","Number":"85","RawContent":null,"Title":"NET Framework 4.8 Early Access build 3646 is available!","State":"open","Body":"Today, we are happy to share an Early Access build for the .NET Framework 4.8. This includes an updated .NET 4.8 runtime as well as the .NET 4.8 Developer Pack (a a single package that bundles the .NET Framework 4.8 runtime, the .NET 4.8 Targeting Pack, and the .NET Framework 4.8 SDK). \r\n\r\nPlease help us ensure this is a high quality and compatible release by trying out this build and exploring the new features. \r\n\r\n**Next steps:**\r\nTo explore the new features, download the [.NET 4.8 Developer Pack build 3646](https://go.microsoft.com/fwlink/?LinkId=2018486).  Instead, if you want to try just the .NET 4.8 runtime, you can download either of these:\r\n•\t[.NET 4.8 Web Installer](https://go.microsoft.com/fwlink/?LinkId=2018525) - requires an internet connection during installation \r\n•\t[.NET 4.8 Offline installer](https://go.microsoft.com/fwlink/?LinkId=2018531) - can be downloaded and installed later in a disconnected state\r\n\r\nPlease provide your feedback by [reporting an issue at the .NET Framework Early Access GitHub repository](https://github.com/Microsoft/dotnet-framework-early-access/issues/new).\r\n\r\n**Note**: this release is still under development, you can expect to see more features and fixes in future preview builds. Also, a reminder that this build is not supported for production use.\r\n\r\nThis preview build 3646 includes improvements/fixes in the following areas:\r\n•\t**[Runtime]** JIT and NGEN improvements\r\n•\t**[Windows Forms]** Accessibility enhancements\r\n•\t**[WPF]** SelectionTextBrush Property\r\n•\t**[BCL]** Updated ZLib\r\n\r\nYou can see the complete list of improvements in this build [here](https://github.com/Microsoft/dotnet-framework-early-access/blob/master/release-notes/NET48/build-3646/changes.md).\r\n\r\n.NET Framework build 3646 is also included in the next update for Windows 10. You can sign up for [Windows Insiders](https://insider.windows.com/en-us/) to validate that your applications work great on the latest .NET Framework included in the latest Windows 10 releases.\r\n","Url":"https://github.com/dotnet/announcements/issues/85","RelatedDescription":"Open issue \"NET Framework 4.8 Early Access build 3646 is available!\" (#85)"},{"Id":"359151445","IsPullRequest":false,"CreatedAt":"2018-09-11T17:44:50","Actor":"leecow","Number":"84","RawContent":null,"Title":"September 2018 .NET Updates","State":"open","Body":"# September 2018 .NET Updates\r\n\r\nThe following .NET updates were released in September 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework September 2018 Security and Quality Rollup - September 11, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/09/11/net-framework-september-2018-security-and-quality-rollup/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core September 2018 Update - September 11, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.4/2.1.4.md)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/84","RelatedDescription":"Open issue \"September 2018 .NET Updates\" (#84)"},{"Id":"359136325","IsPullRequest":false,"CreatedAt":"2018-09-11T17:00:55","Actor":"blowdart","Number":"83","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability in .NET Core when System.IO.Pipelines improperly handles requests. An attacker who successfully exploited this vulnerability could cause a denial of service against an application that is leveraging System.IO.Pipelines. The vulnerability can be exploited remotely, without authentication. A remote unauthenticated attacker could exploit this vulnerability by providing specially crafted requests to the application.\r\n\r\nThe update addresses the vulnerability by correcting how System.IO.Pipelines handles requests.\r\n\r\nIf you are using ASP.NET Core 2.1 you will also need to update your ASP.NET version this by following the instructions in the [ASP.NET Core bulletin](https://github.com/aspnet/Announcements/issues/316).\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/32228\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.IO.Pipelines package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.IO.Pipelines | 4.5.0 | 4.5.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications which use System.IO.Pipelines\r\n\r\nSystem.IO.Pipelines is distributed both in ASP.NET Core 2.1 and separately as a NuGet package. If you are not using Microsoft.AspNetCore.App or .All, you may still be affected if you are referencing the System.IO.Pipelines package.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.IO.Pipelines/4.5.0` is a reference to version 4.5.0 of `System.IO.Pipelines`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.IO.Pipelines` version 4.5.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8409](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8409)\r\n\r\n### Revisions\r\n\r\nV1.0 (September 11, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-09-11_\r\n","Url":"https://github.com/dotnet/announcements/issues/83","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability\" (#83)"},{"Id":"357399856","IsPullRequest":false,"CreatedAt":"2018-09-05T20:56:25","Actor":"richlander","Number":"82","RawContent":null,"Title":".NET Core Runtime ARM64 Status","State":"open","Body":"# .NET Core Runtime ARM64 Status\r\n\r\nThe .NET Core team is in the process of adding support for ARM64, as part of the .NET Core 3.0 project. This issue will be updated as ARM64 support progresses.\r\n\r\n[.NET Core 3.0 Preview 1](https://github.com/dotnet/core/issues/2099) includes support for Linux ARM64. Please try this build and provide support.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/coreclr #19843](https://github.com/dotnet/coreclr/issues/19843)\r\n\r\n## Current Status\r\n\r\nARM64 builds are functional, for console and ASP.NET Core apps.\r\n\r\n## Details\r\n\r\nInitial support for ARM64 was added in the .NET Core 2.1 release. The team is not maintaining .NET Core 2.x branches with respect to ARM64. All ARM64 improvements will be made in the .NET Core 3.0 branch (currently [master](https://github.com/dotnet/coreclr)).\r\n\r\nSee [Installing .NET Core 3.0 on Linux ARM64](https://gist.github.com/richlander/467813274cea8abc624553ee72b28213) to install .NET Core on your ARM64 machine. Builds are available from the [daily builds page](https://github.com/dotnet/core/blob/master/daily-builds.md).\r\n\r\n## Bug Queries\r\n\r\nthe following bugs queries are available for ARM64:\r\n\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues?q=is%3Aopen+is%3Aissue+label%3Aarch-arm64)\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues?q=is%3Aopen+is%3Aissue+label%3Aarch-arm64)\r\n\r\n## Operating Systems\r\n\r\n.NET Core 3.0 ARM64 builds are tested on the following operating systems:\r\n\r\n* Ubuntu 16.04 and 18.04\r\n* Debian 9\r\n\r\n## Test Hardware\r\n\r\n.NET Core 3.0 ARM64 builds have been tested on the following hardware:\r\n\r\n* [NVIDIA Jetson TX2 Module](https://developer.nvidia.com/embedded/buy/jetson-tx2)\r\n* [Pine A64](https://www.pine64.org/?page_id=46823)\r\n* [Qualcomm Centriq 2400](https://www.qualcomm.com/products/qualcomm-centriq-2400-processor)\r\n* [Qualcomm Snapdragon](https://www.qualcomm.com/snapdragon/always-connected-pc)\r\n* [Raspberry Pi3](https://www.raspberrypi.org/products/raspberry-pi-3-model-b-plus/)","Url":"https://github.com/dotnet/announcements/issues/82","RelatedDescription":"Open issue \".NET Core Runtime ARM64 Status\" (#82)"},{"Id":"350233220","IsPullRequest":false,"CreatedAt":"2018-08-13T23:50:57","Actor":"richlander","Number":"81","RawContent":null,"Title":"Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+","State":"open","Body":"# Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+\r\n\r\nAn [issue with serializing/deserializing a CultureAwareComparer](https://github.com/Microsoft/dotnet/blob/master/releases/net471/KnownIssues/521954%20-%20BCL%20CultureAwareComparer%20with%20ignore%20casing%20on%20serialized%20on%20previous%20versions%20of%20.NET%20do%20not%20correctly%20deserialize%20on%20.NET%204.7.1.md) was discovered with [.NET Framework 4.7.1](https://blogs.msdn.microsoft.com/dotnet/2017/10/17/announcing-the-net-framework-4-7-1/). This issue was resolved earlier this year, with the [May 2018 Preview of Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/15/net-framework-may-2018-preview-of-quality-rollup/). We recently learned that some applications, including Johnson Controls’ C-CURE 9000 Software, were negatively impacted by this change as this update requires all client and server workstations to be updated simultaneously with the appropriate Microsoft updates. The changes made to .NET Framework 4.7.1 were also integrated into .NET Framework 4.6 and later servicing releases. As a result, this advisory applies to .NET Framework 4.6 and later versions.\r\n\r\nThis advisory is provided so that developers can correctly diagnose this issue and be aware of our guidance. We will continue to update this issue as we have new information to share.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [microsoft/dotnet #832](https://github.com/Microsoft/dotnet/issues/832)\r\n\r\n## Guidance\r\n\r\nThis guidance only applies to customers that have experienced this issue.\r\n\r\nWe have released [an update for .NET Framework 4.6](https://blogs.msdn.microsoft.com/dotnet/2018/08/30/net-framework-august-2018-preview-of-quality-rollup/) and later that resolves the issue. **You must deploy the .NET Framework update for this issue to all .NET Framework 4.6+ machines that communicate via serialized objects**. After doing that, cross-machine serialization will work as expected. \r\n \r\nPlease consult your software vendor to understand if this impacts the software you are using.\r\n\r\n## Technical Context\r\n\r\nIn the [May 2018 Preview of Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/15/net-framework-may-2018-preview-of-quality-rollup/), we made a change to the internal type CultureAwareComparer to implement ISerializable. We made the change in order to address [issue with serializing/deserializing a CultureAwareComparer](https://github.com/Microsoft/dotnet/blob/master/releases/net471/KnownIssues/521954%20-%20BCL%20CultureAwareComparer%20with%20ignore%20casing%20on%20serialized%20on%20previous%20versions%20of%20.NET%20do%20not%20correctly%20deserialize%20on%20.NET%204.7.1.md).\r\n\r\nThe issue reported was that a type that contains an instance of CultureAwareComparer was not able to correctly serialize and deserialize across different versions of the .NET Framework. There are a few types in .NET Framework that do this, the most commonly impacted one being the Dictionary<TKey, TValue> type.\r\n \r\nThe change to implement the ISerializable interface had unintended side effects when exchanging this type across different machines. We have had a small number of reports from customers who have been affected.\r\n\r\nA common, but not unique way, of exchanging objects across machines is to use WCF in conjunction with a serializer. One of the common serializers being DataContractSerializer. The side-effect of the change prevented data serialized on systems where the type implements ISerializable to correctly deserialize of systems where the type does NOT implement ISerializable. The same is true of the opposite case, that systems where the type does not implement ISerializable will not correctly deserialize data from systems where the type does implement ISerializable.\r\n\r\nWe have an updated fix that we intend to release within the next month that will remove the implementation of the ISerializable interface on the type and use a different internal mechanism for ensuring the cross-version serialization continues to work as expected. This change addresses the break experienced with WCF.\r\n\r\nThe upcoming fix will remove the implementation of the ISerializable interface on the type and use a different mechanism for ensuring the cross-version serialization of that type continues to work. This change addresses the break experienced with WCF.\r\n\r\n## Symptoms\r\n\r\nAn application that is affected by this issue will most likely crash when trying to deserialize an object. It may print or log an error message similar to the following one:\r\n\r\n```\r\nThe formatter threw an exception while trying to deserialize the message: \r\nThere was an error while trying to deserialize parameter . The InnerException message was ''EndElement' 'Comparer' from namespace '' is not expected. Expecting element '_compareInfo'.'.  Please see InnerException for more details.\r\n```\r\n","Url":"https://github.com/dotnet/announcements/issues/81","RelatedDescription":"Open issue \"Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+\" (#81)"}],"ResultType":"GitHubIssue"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1119356060135907328","CreatedAt":"2019-04-19T21:44:16+00:00","UserScreenname":"dotnet","Text":"Upcoming Updates for .NET Framework 4.8 https://t.co/MYATh2Zg6u","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":78,"FavoriteCount":29,"RawContent":null},{"Id":"1119087634003841025","CreatedAt":"2019-04-19T03:57:38+00:00","UserScreenname":"dotnet","Text":".NET Framework 4.8 is now available. https://t.co/emspxTsaEX","Source":"<a href=\"http://twitter.com/#!/download/ipad\" rel=\"nofollow\">Twitter for iPad</a>","RetweetCount":372,"FavoriteCount":218,"RawContent":null},{"Id":"1119030394605588480","CreatedAt":"2019-04-19T00:10:11+00:00","UserScreenname":"dotnet","Text":"Announcing .NET Core 3 Preview 4 https://t.co/7QaZC5qmx6","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":360,"FavoriteCount":207,"RawContent":null},{"Id":"1118906461180973059","CreatedAt":"2019-04-18T15:57:43+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demoes and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":12,"FavoriteCount":5,"RawContent":null},{"Id":"1118551190927622144","CreatedAt":"2019-04-17T16:26:00+00:00","UserScreenname":"dotnet","Text":"If you're enjoying the DevOps for https://t.co/iOiV9qNspl Developers series on @ch9 check out this FREE ebook from… https://t.co/IlN3xK8cpo","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":32,"FavoriteCount":22,"RawContent":null},{"Id":"1118529550902865924","CreatedAt":"2019-04-17T15:00:00+00:00","UserScreenname":"dotnet","Text":"In part 3 of DevOps For https://t.co/iOiV9r53NV Developers @AbelSquidHead\n&amp; @jeremylikness show us how to create a… https://t.co/s7eQpdTakW","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":14,"FavoriteCount":6,"RawContent":null},{"Id":"1118196772604530688","CreatedAt":"2019-04-16T16:57:40+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demoes and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":20,"FavoriteCount":5,"RawContent":null},{"Id":"1116672310809903105","CreatedAt":"2019-04-12T12:00:00+00:00","UserScreenname":"dotnet","Text":"The #OnDotNet show joined forces with @azureadvocates to bring you DevOps for https://t.co/iOiV9r53NV Developers!… https://t.co/eP7EZV54nW","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":56,"FavoriteCount":27,"RawContent":null},{"Id":"1116372533907902465","CreatedAt":"2019-04-11T16:08:47+00:00","UserScreenname":"dotnet","Text":"We're now live! https://t.co/XI2YUBZA88","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":32,"FavoriteCount":11,"RawContent":null},{"Id":"1115751220235231232","CreatedAt":"2019-04-09T22:59:55+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demoes and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":13,"FavoriteCount":1,"RawContent":null}]}},"RunOn":"2019-04-21T05:30:29.1545233Z","RunDurationInMilliseconds":8525}