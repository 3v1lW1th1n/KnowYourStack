{"Data":{"GitHub":{"Issues":[{"Id":"388061225","IsPullRequest":false,"CreatedAt":"2018-12-06T05:23:57","Actor":"lextm","Number":"177","RawContent":null,"Title":"System.ComponentModel.Design.CollectionEditor is missing in preview 1","State":"open","Body":"It is a commonly used type when WinForms PropertyGrid control is in use, as custom collection editor is needed to edit custom collection types.\r\n\r\nIt is not yet available in .NET Core 3.0 Preview 1.","Url":"https://github.com/dotnet/winforms/issues/177","RelatedDescription":"Open issue \"System.ComponentModel.Design.CollectionEditor is missing in preview 1\" (#177)"},{"Id":"388020169","IsPullRequest":true,"CreatedAt":"2018-12-06T02:15:14","Actor":"vatsan-madhavan","Number":"176","RawContent":null,"Title":"Adding an Sdk section to global.json","State":"closed","Body":"Adding an Sdk section to global.json. This is needed to ensure that CI servers deterministically use the version of .NET Core 3.0 Sdk specified here to build the projects in the repo.","Url":"https://github.com/dotnet/winforms/pull/176","RelatedDescription":"Closed or merged PR \"Adding an Sdk section to global.json\" (#176)"},{"Id":"388020154","IsPullRequest":false,"CreatedAt":"2018-12-06T01:40:34","Actor":"Shyam-Gupta","Number":"175","RawContent":null,"Title":"Use -refout to auto generate ref assemblies","State":"open","Body":"Instead of having separate 'ref' projects in the solution, use -refout to generate ref assemblies automatically from src assemblies.\r\n\r\nDetails: https://github.com/dotnet/roslyn/blob/233957b90f555c731f8e22b5319bb7e869567580/docs/features/refout.md","Url":"https://github.com/dotnet/winforms/issues/175","RelatedDescription":"Open issue \"Use -refout to auto generate ref assemblies\" (#175)"},{"Id":"388014079","IsPullRequest":true,"CreatedAt":"2018-12-06T01:32:55","Actor":"AdamYoblick","Number":"174","RawContent":null,"Title":"Revert \"added helix token env vars for later use (#132)\"","State":"closed","Body":"This reverts commit 9e892c8d1ad423233870d24711da13efa3f97856.","Url":"https://github.com/dotnet/winforms/pull/174","RelatedDescription":"Closed or merged PR \"Revert \"added helix token env vars for later use (#132)\"\" (#174)"},{"Id":"388006483","IsPullRequest":true,"CreatedAt":"2018-12-06T00:35:59","Actor":"Shyam-Gupta","Number":"173","RawContent":null,"Title":"Dev/shgu/testing","State":"open","Body":"Added guidance for:\r\n1. Unit tests for Public and Internal methods\r\n2. Code Coverage","Url":"https://github.com/dotnet/winforms/pull/173","RelatedDescription":"Open PR \"Dev/shgu/testing\" (#173)"},{"Id":"387949671","IsPullRequest":true,"CreatedAt":"2018-12-06T00:26:12","Actor":"zsd4yr","Number":"166","RawContent":null,"Title":"change Microsoft.Private.Winforms.csproj to use single Ref or Facade check","State":"closed","Body":"Just making changes requested in https://github.com/dotnet/winforms/pull/153 ","Url":"https://github.com/dotnet/winforms/pull/166","RelatedDescription":"Closed or merged PR \"change Microsoft.Private.Winforms.csproj to use single Ref or Facade check\" (#166)"},{"Id":"388001781","IsPullRequest":true,"CreatedAt":"2018-12-06T00:14:49","Actor":"sharwell","Number":"172","RawContent":null,"Title":"Add .gitattributes and normalize source files","State":"open","Body":"Normalization of text content in Git repositories is sensitive to per-user configurations, but much less sensitive when **.gitattributes** is used. This change adds a default **.gitattributes** and renormalizes all source files to match the new form.\r\n\r\nThe commit which normalizes the source files (only 2 affected files) is assigned to @dotnet-bot to avoid history confusion or unrealistic contributor statistics.\r\n\r\nBoth files which were normalized previously used CRLF line endings, so a diff of the content on a Windows machine is likely to show that the files are binary equal. The change was more about updating the Git metadata of the files.","Url":"https://github.com/dotnet/winforms/pull/172","RelatedDescription":"Open PR \"Add .gitattributes and normalize source files\" (#172)"},{"Id":"387995644","IsPullRequest":true,"CreatedAt":"2018-12-05T23:51:31","Actor":"AdamYoblick","Number":"171","RawContent":null,"Title":"Removed finalizer that is causing xunit to throw exceptions when the …","State":"closed","Body":"…test runner exits","Url":"https://github.com/dotnet/winforms/pull/171","RelatedDescription":"Closed or merged PR \"Removed finalizer that is causing xunit to throw exceptions when the …\" (#171)"},{"Id":"387993945","IsPullRequest":true,"CreatedAt":"2018-12-05T23:40:19","Actor":"willibrandon","Number":"170","RawContent":null,"Title":"Remove ` /// <include file='` an `///<internalonly/>` comments","State":"open","Body":"Fixes #167","Url":"https://github.com/dotnet/winforms/pull/170","RelatedDescription":"Open PR \"Remove ` /// <include file='` an `///<internalonly/>` comments\" (#170)"},{"Id":"387964991","IsPullRequest":false,"CreatedAt":"2018-12-05T22:00:42","Actor":"Tanya-Solyanik","Number":"169","RawContent":null,"Title":"Add documentation on running WInformsControlsTest when validating changes","State":"open","Body":"This will be a temporary measure for basic validation of changes until functional test are incorporated in the process. Consider covering the following points:\r\n1. how to build the app\r\n2. how to run it against the newly updated System.Windows.Forms.dll and how to put breakpoint in the newly changed code\r\n3. what actions to perform in the app besides clicking all the buttons (move across the screens, once the sample is dpi aware)\r\n4. how to add missing controls, and edit the SP script ","Url":"https://github.com/dotnet/winforms/issues/169","RelatedDescription":"Open issue \"Add documentation on running WInformsControlsTest when validating changes\" (#169)"},{"Id":"387959876","IsPullRequest":true,"CreatedAt":"2018-12-05T21:46:36","Actor":"sharwell","Number":"168","RawContent":null,"Title":"Use ValueTuple instead of Tuple for internal cache","State":"open","Body":"","Url":"https://github.com/dotnet/winforms/pull/168","RelatedDescription":"Open PR \"Use ValueTuple instead of Tuple for internal cache\" (#168)"},{"Id":"387956525","IsPullRequest":false,"CreatedAt":"2018-12-05T21:37:13","Actor":"Tanya-Solyanik","Number":"167","RawContent":null,"Title":"remove ` /// <include file='` an `///<internalonly/>` comments","State":"open","Body":"Comments like the following are no longer used:\r\n\r\n `  /// <internalonly />`\r\n\r\n`/// <include file='doc\\SystemInformation.uex' path='docs/doc[@for=\"SystemInformation.TerminalServerSession\"]/*' />`","Url":"https://github.com/dotnet/winforms/issues/167","RelatedDescription":"Open issue \"remove ` /// <include file='` an `///<internalonly/>` comments\" (#167)"},{"Id":"387937587","IsPullRequest":false,"CreatedAt":"2018-12-05T21:28:46","Actor":"tewarid","Number":"163","RawContent":null,"Title":"InvalidCastException when icon is set in autogenerated form designer code","State":"closed","Body":"* .NET Core Version: 3.0 Preview1\r\n* Have you experienced this same bug with .NET Framework?: No\r\n\r\n<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n**Problem description:**\r\n\r\nCrash at runtime where icon is set as follows in autogenerated form designer code\r\n\r\n```c#\r\n            this.Icon = ((System.Drawing.Icon)(resources.GetObject(\"$this.Icon\")));\r\n```\r\n\r\n**Actual behavior:** <!-- callstack for crashes / exceptions -->\r\n\r\nFollowing exception is thrown when running using dotnet CLI or vscode\r\n\r\n```text\r\nException has occurred: CLR/System.InvalidCastException\r\nAn unhandled exception of type 'System.InvalidCastException' occurred in...\r\n```\r\n\r\n**Expected behavior:**\r\n\r\nNo crash, form icon is set. Crash does not happen and icon is set when debugging via Visual Studio 2019 preview.\r\n\r\n**Minimal repro:**\r\n","Url":"https://github.com/dotnet/winforms/issues/163","RelatedDescription":"Closed issue \"InvalidCastException when icon is set in autogenerated form designer code\" (#163)"},{"Id":"387938043","IsPullRequest":true,"CreatedAt":"2018-12-05T21:11:01","Actor":"mairaw","Number":"164","RawContent":null,"Title":"update link to docs + minor fixes","State":"closed","Body":"","Url":"https://github.com/dotnet/winforms/pull/164","RelatedDescription":"Closed or merged PR \"update link to docs + minor fixes\" (#164)"},{"Id":"387943211","IsPullRequest":false,"CreatedAt":"2018-12-05T20:59:29","Actor":"DmitryGaravsky","Number":"165","RawContent":null,"Title":"Control can't be properly GC-collected after disposing because of it referenced via the System.Windows.Forms.Control.cachedLayoutEventArgs field","State":"open","Body":"The same bug is reproducible with .NET Framework but it seems it have no chance to be ever fixed.\r\nBut the .NET Core looks like a a good place for introducing some improvements in this area.\r\n\r\n### Problem description\r\nEach instance of the `System.Windows.Forms.Control` type contains a private member variable of the  `LayoutEventArgs` type - **cachedLayoutEventArgs** . And, the `LayoutEventArgs` instance typically contains a reference to some specific control. \r\nSometimes, the `cachedLayoutEventArgs` field is not cleared when the child control disposing does not affect the layout process of the parent control due to some reasons.\r\n\r\n### Reproduction\r\nHere are the minimal reproduction-steps:\r\n1. Create a form with two buttons.\r\n2. Add the following code for the corresponding Button.Click handlers:\r\n```c#\r\nvoid btnOpenView_Click(object sender, System.EventArgs e) {\r\n    var view = new Panel() { BackColor = Color.Red };\r\n    view.Name = \"View\";\r\n    view.Bounds = new Rectangle(100, 100, 100, 100);\r\n    view.Parent = this;\r\n}\r\nvoid btnCloseView_Click(object sender, System.EventArgs e) {\r\n    SuspendLayout();\r\n    var view = this.Controls.Find(\"View\", false)[0];\r\n    if(view != null)\r\n        view.Dispose();\r\n    ResumeLayout(false);\r\n}\r\n```\r\n3. Press the \"Open View\" button - red panel appears.\r\n4. Press the \"Close View\" button - red panel disappears.\r\n\r\n**Actual behavior:**\r\nThe panel is still references via the `System.Windows.Forms.Control.cachedLayoutEventArgs` field at the form level. As result it can't be GC-collected properly and still in memory.\r\n\r\n**Expected behavior:**\r\nThe panel should not be referenced.\r\n\r\n### Proposal for Fix\r\nIt looks like we should use the `WeakReference` when caching the `LayoutEventArgs`.","Url":"https://github.com/dotnet/winforms/issues/165","RelatedDescription":"Open issue \"Control can't be properly GC-collected after disposing because of it referenced via the System.Windows.Forms.Control.cachedLayoutEventArgs field\" (#165)"},{"Id":"387928034","IsPullRequest":false,"CreatedAt":"2018-12-05T20:17:41","Actor":"DmitryGaravsky","Number":"162","RawContent":null,"Title":"Add the capability to automatically close the MessageBox after the specific timeout.","State":"open","Body":"This request is based on popular SO question: [Close a MessageBox after several seconds](https://stackoverflow.com/questions/14522540/close-a-messagebox-after-several-seconds/14522952#14522952) (100+ votes).\r\n<a href=\"https://stackoverflow.com/a/14522952/1010363\"><img alt=\"StackOverflow Answer\" src=\"https://img.shields.io/badge/StackOverflow-QnA-green.svg\"></a>\r\n\r\n### Rationale\r\n\r\nWhen developing LOB application it is quite often needed to interact with the user via the MessageBox which automatically closes after the specific timeout. The standard `MessageBox.Show` API does not provide this capability. \r\nThe new API should be based on standard Win32 MessageBox and should be compatible with corresponding .Net implementation (`System.Windows.Forms.MessageBox`).\r\n\r\nThe [AutoClosingMessageBox](https://github.com/DmitryGaravsky/AutoClosingMessageBox) repository contains a good example of WinAPI-based wrapper on standard Win32 MessageBox compatible with the .Net `System.Windows.Forms.MessageBox`. \r\n<a href=\"https://www.nuget.org/packages/AutoClosingMessageBox/\"><img alt=\"Nuget Version\" src=\"https://img.shields.io/nuget/v/AutoClosingMessageBox.svg\" data-canonical-src=\"https://img.shields.io/nuget/v/AutoClosingMessageBox.svg\" style=\"max-width:100%;\" /></a>\r\n\r\n### Usage\r\nHere how you can use the new API:\r\n\r\nScenario 1: Fire and forget - it about to be closed after default timeout(1000ms)\r\n```c#\r\nAutoClosingMessageBox.Show(\"Hello, you are using the AutoClosingMessageBox first time!\");\r\n```\r\n\r\nScenario 2: Wait for some result or make the default decision\r\n```c#\r\nvar result = AutoClosingMessageBox.Show(\r\n            text: \"To be or not to be?\", \r\n            caption: \"The question\",\r\n            timeout: 2500,\r\n            buttons: MessageBoxButtons.YesNo,\r\n            defaultResult: DialogResult.Yes);\r\nif(result == DialogResult.Yes) {\r\n    // to be\r\n}\r\nelse { \r\n    // or not\r\n}\r\n```\r\nAdditionaly you can use the `AutoClosingMessageBox.Factory` method to wrap the specific MessageBox showing. This way allows us do not provide all the `AutoClosingMessageBox.Show` method overloads which associated with the corresponting `System.Windows.Forms.MessageBox.Show` methods.\r\n```c#\r\nvar toBeOrNotToBeQuestion = AutoClosingMessageBox.Factory(\r\n        showMethod: (caption, buttons) =>\r\n            MessageBox.Show(this, \"To be or not to be?\", caption, buttons, MessageBoxIcon.Question),\r\n        caption: \"The question\"\r\n    );\r\nif(DialogResult.Yes == toBeOrNotToBeQuestion.Show(\r\n                            timeout: 2500,\r\n                            buttons: MessageBoxButtons.YesNo,\r\n                            defaultResult: DialogResult.Yes)) {\r\n    // to be\r\n}\r\nelse {\r\n    // or not\r\n}\r\n```\r\n### Proposed API:\r\n\r\n```c#\r\npublic static class AutoClosingMessageBox {\r\n    public static DialogResult Show(string text, string caption = null, int timeout = 1000, MessageBoxButtons buttons = MessageBoxButtons.OK, DialogResult defaultResult = DialogResult.None);\r\n    public static DialogResult Show(IWin32Window owner, string text, string caption = null, int timeout = 1000, MessageBoxButtons buttons = MessageBoxButtons.OK, DialogResult defaultResult = DialogResult.None);\r\n}\r\n```\r\n\r\nThe `AutoClosingMessageBox.Factory` method (optional, but suggested):\r\n```c#\r\npublic static class AutoClosingMessageBox {\r\n    public static IAutoClosingMessageBox Factory(Func<string, MessageBoxButtons, DialogResult> showMethod, string caption = null);\r\n    //\r\n    public interface IAutoClosingMessageBox {\r\n        DialogResult Show(int timeout = 1000, MessageBoxButtons buttons = MessageBoxButtons.OK, DialogResult defaultResult = DialogResult.None);\r\n    }\r\n}\r\n```","Url":"https://github.com/dotnet/winforms/issues/162","RelatedDescription":"Open issue \"Add the capability to automatically close the MessageBox after the specific timeout.\" (#162)"},{"Id":"387490236","IsPullRequest":true,"CreatedAt":"2018-12-05T19:29:49","Actor":"raffaeler","Number":"151","RawContent":null,"Title":"Using NameOf when throwing exceptions","State":"closed","Body":"Created a new pull request as [requested here](https://github.com/dotnet/winforms/pull/115#issuecomment-444223408)\r\n\r\nThis pull request is a refactoring on all the argument exceptions specifying the name of the argument as hardcoded strings. All of them have been replaced with nameof(argumentname).\r\nSome argument name were wrong, now they are fixed.","Url":"https://github.com/dotnet/winforms/pull/151","RelatedDescription":"Closed or merged PR \"Using NameOf when throwing exceptions\" (#151)"},{"Id":"387747108","IsPullRequest":true,"CreatedAt":"2018-12-05T19:08:48","Actor":"dotnet-maestro[bot]","Number":"161","RawContent":null,"Title":"Update dependency files","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\nUpdates from https://github.com/dotnet/arcade\r\n\r\n- Microsoft.DotNet.Arcade.Sdk - 1.0.0-beta.18604.15\r\n\r\n","Url":"https://github.com/dotnet/winforms/pull/161","RelatedDescription":"Closed or merged PR \"Update dependency files\" (#161)"},{"Id":"387520502","IsPullRequest":true,"CreatedAt":"2018-12-05T19:07:09","Actor":"zsd4yr","Number":"153","RawContent":null,"Title":"pkg consumes facades and other binaries","State":"closed","Body":"","Url":"https://github.com/dotnet/winforms/pull/153","RelatedDescription":"Closed or merged PR \"pkg consumes facades and other binaries\" (#153)"},{"Id":"387487066","IsPullRequest":true,"CreatedAt":"2018-12-05T19:05:39","Actor":"zsd4yr","Number":"150","RawContent":null,"Title":"Update .gitignore to ignore vscode","State":"closed","Body":"","Url":"https://github.com/dotnet/winforms/pull/150","RelatedDescription":"Closed or merged PR \"Update .gitignore to ignore vscode\" (#150)"},{"Id":"387650870","IsPullRequest":true,"CreatedAt":"2018-12-05T18:51:55","Actor":"Tanya-Solyanik","Number":"158","RawContent":null,"Title":"minor edits to docs","State":"closed","Body":"","Url":"https://github.com/dotnet/winforms/pull/158","RelatedDescription":"Closed or merged PR \"minor edits to docs\" (#158)"},{"Id":"387677230","IsPullRequest":true,"CreatedAt":"2018-12-05T18:49:22","Actor":"samneirinck","Number":"160","RawContent":null,"Title":"Fix unicode issues in comments","State":"closed","Body":"Fixes unicode issues introduced by #144 ","Url":"https://github.com/dotnet/winforms/pull/160","RelatedDescription":"Closed or merged PR \"Fix unicode issues in comments\" (#160)"},{"Id":"387471833","IsPullRequest":true,"CreatedAt":"2018-12-05T18:48:00","Actor":"zsd4yr","Number":"149","RawContent":null,"Title":"Update README.md to link to designer support issue","State":"closed","Body":"","Url":"https://github.com/dotnet/winforms/pull/149","RelatedDescription":"Closed or merged PR \"Update README.md to link to designer support issue\" (#149)"},{"Id":"387662504","IsPullRequest":false,"CreatedAt":"2018-12-05T09:50:56","Actor":"navneetccna","Number":"159","RawContent":null,"Title":"Linux 3.0 issue","State":"closed","Body":"* .NET Core Version: 3.0 Preview1\r\n* Have you experienced this same bug with .NET Framework?: Yes/No\r\nNo\r\n<!-- Read https://github.com/dotnet/winforms/blob/master/Documentation/issue-guide.md -->\r\n\r\n**Problem description:**\r\nI am running 3.0 winform application on linux with following command\r\ndotnet run\r\nBut getting error\r\n\r\n/home/owner/dotnet/sdk/3.0.100-preview-009812/Sdks/Microsoft.NET.Sdk.WindowsDesktop/targets/Microsoft.NET.Sdk.WindowsDesktop.targets(14,2): error MSB4019: The imported project \"/home/owner/dotnet/sdk/3.0.100-preview-009812/Sdks/Microsoft.NET.Sdk.WindowsDesktop/targets/Microsoft.WinFX.targets\" was not found. Confirm that the path in the <Import> declaration is correct, and that the file exists on disk. [/home/owner/projects/dotnet3/dotnet3.csproj]\r\n\r\nThe build failed. Please fix the build errors and run again.\r\n\r\n\r\nI checked my path variable as well as the Microsoft.WinFX.targets exist in the path\r\n","Url":"https://github.com/dotnet/winforms/issues/159","RelatedDescription":"Closed issue \"Linux 3.0 issue\" (#159)"},{"Id":"387630965","IsPullRequest":true,"CreatedAt":"2018-12-05T08:13:15","Actor":"Tanya-Solyanik","Number":"157","RawContent":null,"Title":"minor edits to docs","State":"closed","Body":"Winforms->WinForms\r\ngit->Git\r\nadded a note that API changes will require docs updates","Url":"https://github.com/dotnet/winforms/pull/157","RelatedDescription":"Closed or merged PR \"minor edits to docs\" (#157)"},{"Id":"387619977","IsPullRequest":true,"CreatedAt":"2018-12-05T07:42:41","Actor":"Tanya-Solyanik","Number":"156","RawContent":null,"Title":"minor edits to docs","State":"closed","Body":" Winforms->WinForm\r\ngit->Git\r\nadded a note that doc updates are expected for new APIs\r\nremoved extra spaces","Url":"https://github.com/dotnet/winforms/pull/156","RelatedDescription":"Closed or merged PR \"minor edits to docs\" (#156)"},{"Id":"387591410","IsPullRequest":true,"CreatedAt":"2018-12-05T04:45:45","Actor":"carlowahlstedt","Number":"155","RawContent":null,"Title":"Removed any comment that had any form of \"To be supplied\"","State":"open","Body":"Fixes #50.\r\n\r\nSimply removed all of the comments that had any form of \"To be supplied\" in them.","Url":"https://github.com/dotnet/winforms/pull/155","RelatedDescription":"Open PR \"Removed any comment that had any form of \"To be supplied\"\" (#155)"},{"Id":"387538641","IsPullRequest":true,"CreatedAt":"2018-12-05T00:22:26","Actor":"JeremyKuhne","Number":"154","RawContent":null,"Title":"Clean out Windows 9x code","State":"open","Body":"As much as I fondly remember Windows 95/98 I don't think we need the code to support it any more. :)\r\n\r\nThis removes a large chunk of 9x specific code as well as some other dead/unused code in interop.\r\n\r\nI have some other interop correctness and performance fixes that I'll follow this with.","Url":"https://github.com/dotnet/winforms/pull/154","RelatedDescription":"Open PR \"Clean out Windows 9x code\" (#154)"},{"Id":"387503937","IsPullRequest":true,"CreatedAt":"2018-12-04T22:26:43","Actor":"JuditRose","Number":"152","RawContent":null,"Title":"Fixed developer guide link","State":"closed","Body":"","Url":"https://github.com/dotnet/winforms/pull/152","RelatedDescription":"Closed or merged PR \"Fixed developer guide link\" (#152)"},{"Id":"387469421","IsPullRequest":true,"CreatedAt":"2018-12-04T20:37:24","Actor":"raffaeler","Number":"148","RawContent":null,"Title":"Enhance code to use Span<byte>","State":"open","Body":"Reopening [by request](https://github.com/dotnet/winforms/pull/114). It has been closed accidentally and could not been reopened.\r\n\r\nThis pull request includes a couple of overloads taking Span in addition to byte[], and a couple of optimizations to avoid copying memory (thanks to Span).","Url":"https://github.com/dotnet/winforms/pull/148","RelatedDescription":"Open PR \"Enhance code to use Span<byte>\" (#148)"}],"ResultType":"GitHubIssue"}},"RunOn":"2018-12-06T05:31:18.3197888Z","RunDurationInMilliseconds":946}