{"Data":{"Blog":{"FeedItems":[{"Title":"Publish Improvements in Visual Studio 2017 15.7","PublishedOn":"2018-04-18T19:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today we released Visual Studio 2017 15.7 Preview 4. Our 15.7 update brings some exciting updates for publishing applications from Visual Studio that we’re excited to tell you about, including:...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/04/18/visual-studio-2017-15-7-p4-publish/","RawContent":null},{"Title":"What Happened to Bower?","PublishedOn":"2018-04-18T18:04:55+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Bower is a popular package management system for managing static content used by client-side web applications. Visual Studio provides rich support for Bower, including templates and package management...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/04/18/what-happened-to-bower/","RawContent":null},{"Title":"Library Manager: Client-side content manager for web apps","PublishedOn":"2018-04-17T21:48:24+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"If you’re developing a modern web app, chances are your app will reference client-side JavaScript and CSS files like jQuery or bootstrap. Maybe you copy these from a previous project, download them,...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/04/17/library-manager-client-side-content-manager-for-web-apps/","RawContent":null},{"Title":"Blazor 0.2.0 release now available","PublishedOn":"2018-04-17T17:59:55+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Just a few weeks ago we announced the first preview release of an experimental web UI framework called Blazor. Blazor enables full-stack web development using C# and WebAssembly. So far thousands of...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/04/17/blazor-0-2-0-release-now-available/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview2: Improvements to the Kestrel HTTP server","PublishedOn":"2018-04-13T00:42:44+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Change default transport to Sockets Building off the improvements to the managed sockets implementation in .NET Core we have changed the default transport in Kestrel from libuv to sockets. As a...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/04/12/asp-net-core-2-1-0-preview2-improvements-to-the-kestrel-http-server/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview2 now available","PublishedOn":"2018-04-12T17:24:30+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"Today we&#8217;re very happy to announce that the second preview of the next minor release of ASP.NET Core and .NET Core is now available for you to try out. This second preview includes many...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/04/12/asp-net-core-2-1-0-preview2-now-available/","RawContent":null},{"Title":"Get started building .NET web apps that run in the browser with Blazor","PublishedOn":"2018-03-22T17:00:26+00:00","CommentsCount":42,"FacebookCount":0,"Summary":"Today we released our first public preview of Blazor, a new experimental .NET web framework using C#/Razor and HTML that runs in the browser with WebAssembly. Blazor enables full stack web development...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/22/get-started-building-net-web-apps-in-the-browser-with-blazor/","RawContent":null},{"Title":"ASP.NET Core manageability and Application Insights improvements","PublishedOn":"2018-03-22T14:12:38+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"There are many great investments on the ASP.NET Core 2.1 roadmap. These investments make ASP.NET Core applications easier to write, host, test, and make security and standards compliant. This blog...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/22/asp-net-core-manageability-and-application-insights-improvements/","RawContent":null},{"Title":"Announcing Preview 1 of ASP.NET MVC 5.2.5, Web API 5.2.5, and Web Pages 3.2.5","PublishedOn":"2018-03-19T22:00:27+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today we released Preview 1 of ASP.NET MVC 5.2.5, Web API 5.2.5, and Web Pages 3.2.5 on NuGet. This is a patch release that contains only bug fixes. You can find the full list of bug fixes for this...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/19/announcing-preview-1-of-asp-net-mvc-5-2-5-web-api-5-2-5-and-web-pages-3-2-5/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Functional testing of MVC applications","PublishedOn":"2018-03-05T18:30:28+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"For ASP.NET Core 2.1 we have created a new package, Microsoft.AspNetCore.Mvc.Testing, to help streamline in-memory end-to-end testing of MVC applications using TestServer. This package takes care of...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/05/asp-net-core-2-1-0-preview1-functional-testing-of-mvc-applications/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7564899951","Type":"IssuesEvent","CreatedAt":"2018-04-21T02:57:11","Actor":"mrlife","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/3035","RelatedDescription":"Closed issue \"macOS support for 2.1.0-preview1-final?\" (#3035) at aspnet/Home","RelatedBody":"Using the latest beta release of Visual Studio for Mac, [which should have support for 2.1](https://blogs.msdn.microsoft.com/visualstudio/2018/03/21/visual-studio-for-mac-version-7-5-preview-1/).\r\n\r\n<img width=\"230\" alt=\"screen shot 2018-04-06 at 7 48 38 pm\" src=\"https://user-images.githubusercontent.com/213164/38448646-c63860c2-39d3-11e8-8827-0dc7399e6469.png\">\r\n\r\nI installed 2.1 preview using the link on the [announcement blog post](https://blogs.msdn.microsoft.com/webdev/2018/02/27/asp-net-core-2-1-0-preview1-now-available/).\r\n\r\n> $ dotnet --version\r\n> 2.1.300-preview1-008174\r\n\r\nFollowed the steps from the announcement blog post linked above and restarted my computer.\r\n\r\nI'm seeing this in the project options:\r\n\r\n<img width=\"524\" alt=\"screen shot 2018-04-06 at 7 37 13 pm\" src=\"https://user-images.githubusercontent.com/213164/38448661-f3056b86-39d3-11e8-9bbc-f1cd44277e79.png\">\r\n\r\nFor step 9 in the announcement blog post, is this checkbox in another location in Visual Studio for Mac?\r\n> 9: Open the “Debug” tab and in the IIS Express profile, check the “Enable SSL” checkbox and save the changes\r\n\r\nI attempted to run the project from CLI and it says it's running, but going to localhost:5000 shows it's not really running.\r\n\r\nPlease let me know if I am missing something or if this should be posted somewhere else."},{"Id":"7564211105","Type":"IssuesEvent","CreatedAt":"2018-04-20T21:32:36","Actor":"BrennanConroy","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/3083","RelatedDescription":"Closed issue \"Xamarin Forms app is using AspNetCore.Signal.Client but it doesnot connect with AspNetCore.Signal Server \" (#3083) at aspnet/Home","RelatedBody":"I am trying to develop a project with Angular5, AspNetCore 2 and Xamarin and I need to use AspNetCore.Signalr to make a chat app ( the app isnot chat app, chat will be a modul ) so First , I downloaded **Microsoft.AspNetCore.SignalR -Version 1.0.0-preview1-final** for Signalr Server Second I downloaded **Microsoft.AspNetCore.SignalR.Client -Version 1.0.0-preview1-final** for Xamarin.Forms application to build a client app. I could connected to Signalr Server with Angular app but I couldnot connect with Xamarin Client app . I am using ngrok to access my localhost in Xamarin app and I always got **101 switching protocol**  error  however, when I use same ngrok link in Angular app there is no problem I could access to Signalr  server. Also I watched Visual Studio Output section it seems try to connect to Server because I am seeing same connectionid in Server and Client app at VS output section  anyway I am using this code to connect to server from Xamarin app\r\n               \r\n                              _hub = new HubConnectionBuilder()\r\n                                          .WithUrl(\"http://.../getchat\")                 \r\n                                          .WithConsoleLogger(LogLevel.Debug)\r\n                                          .Build();\r\n\r\n                                await _hub.StartAsync();\r\n\r\nI havenot listened any method in SignalR server because when app connect to server, I want to see accessing **OnConnectedAsync** method at my hub class\r\n\r\nWhat should I do? \r\n\r\n"},{"Id":"7564194488","Type":"IssuesEvent","CreatedAt":"2018-04-20T21:28:12","Actor":"fatihyenidunya","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/3083","RelatedDescription":"Opened issue \"Xamarin Forms app is using AspNetCore.Signal.Client but it doesnot connect with AspNetCore.Signal Server \" (#3083) at aspnet/Home","RelatedBody":"I am trying to develop a project with Angular5, AspNetCore 2 and Xamarin and I need to use AspNetCore.Signalr to make a chat app ( the app isnot chat app, chat will be a modul ) so First , I downloaded **Microsoft.AspNetCore.SignalR -Version 1.0.0-preview1-final** for Signalr Server Second I downloaded **Microsoft.AspNetCore.SignalR.Client -Version 1.0.0-preview1-final** for Xamarin.Forms application to build a client app. I could connected to Signalr Server with Angular app but I couldnot connect with Xamarin Client app . I am using ngrok to access my localhost in Xamarin app and I always got **101 switching protocol**  error  however, when I use same ngrok link in Angular app there is no problem I could access to Signalr  server. Also I watched Visual Studio Output section it seems try to connect to Server anyway I am using this code to connect to server from Xamarin app\r\n               \r\n                              _hub = new HubConnectionBuilder()\r\n                                          .WithUrl(\"http://.../getchat\")                 \r\n                                          .WithConsoleLogger(LogLevel.Debug)\r\n                                          .Build();\r\n\r\n                                await _hub.StartAsync();\r\n\r\nI havenot listened any method in SignalR server because when app connect to server, I want to see accessing **OnConnectedAsync** method at my hub class\r\n\r\nWhat should I do? \r\n\r\n"},{"Id":"7563819593","Type":"IssuesEvent","CreatedAt":"2018-04-20T19:59:10","Actor":"ygoe","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/3082","RelatedDescription":"Opened issue \"Websocket fails\" (#3082) at aspnet/Home","RelatedBody":"I've followed the instructions in the [documentation](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/websockets?view=aspnetcore-2.1) and created a simple echo websocket application to begin with.\r\n\r\nSince I have no client yet, I used the one from [websocket.org](http://websocket.org/echo.html). On connecting, this exception is thrown:\r\n\r\n**The remote party closed the WebSocket connection without completing the close handshake.**\r\n\r\nI'm not closing anything. I'm just connecting and then want to send something through the connection to have it echoed by my application. but it doesn't get that far and already believes the client has misbehaved and closed the connection. Which I cannot believe because the demo works nicely with the websocket.org echo server.\r\n\r\n```\r\n   at System.Net.WebSockets.ManagedWebSocket.<ReceiveAsyncPrivate>d__61.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()\r\n   at DemoServer.Controllers.RmpController.<Echo>d__1.MoveNext() in C:\\Source\\Komprenu\\RoutedMessagingProtocol\\DemoServer\\Controllers\\RmpController.cs:line 37\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at DemoServer.Controllers.RmpController.<Index>d__0.MoveNext() in C:\\Source\\Komprenu\\RoutedMessagingProtocol\\DemoServer\\Controllers\\RmpController.cs:line 22\r\n```\r\n\r\nI'm using the latest versions of VS 2017 and .NET Core. Testing with Firefox. There was an older issue somewhere here that was resolved. I'm not sure where this error comes from but it means that I cannot use Websockets right now, which is very unfortunate (I'd say critical)."},{"Id":"7563815086","Type":"IssuesEvent","CreatedAt":"2018-04-20T19:58:06","Actor":"Tratcher","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/3081","RelatedDescription":"Closed issue \"s\" (#3081) at aspnet/Home","RelatedBody":"To address your issues more quickly, please open the issue in the most appropriate repository. These are some of the most common repos:\r\n\r\nCommon ASP.NET and Entity Framework repos and projects:\r\n\r\n - Documentation: https://github.com/aspnet/Docs\r\n - MVC: https://github.com/aspnet/Mvc\r\n - Entity Framework Core: https://github.com/aspnet/EntityFrameworkCore\r\n - Entity Framework 6: https://github.com/aspnet/EntityFramework6\r\n - SignalR: https://github.com/aspnet/SignalR\r\n - Docker with ASP.NET Core: https://github.com/aspnet/aspnet-docker\r\n - Microsoft.NET.Sdk.Web: https://github.com/aspnet/websdk\r\n - Kestrel HTTP Server: https://github.com/aspnet/KestrelHttpServer\r\n - ASP.NET Katana: https://github.com/aspnet/AspNetKatana\r\n - and more! See a full list here: https://github.com/aspnet\r\n - note: several repositories have migrated their issues tracker to this repo here\r\n\r\nOther common projects:\r\n\r\n - .NET Core CLI and SDK: https://github.com/dotnet/core\r\n - .NET Core runtime: https://github.com/dotnet/coreclr\r\n - .NET Core libraries: https://github.com/dotnet/corefx\r\n - NuGet: https://github.com/NuGet/home\r\n - Visual Studio: https://developercommunity.visualstudio.com\r\n - Visual Studio Code: https://github.com/microsoft/vscode\r\n - Omnisharp (C# support for VS Code): https://github.com/omnisharp/omnisharp-vscode\r\n"},{"Id":"7563762283","Type":"IssuesEvent","CreatedAt":"2018-04-20T19:46:19","Actor":"etesson","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/3081","RelatedDescription":"Opened issue \"s\" (#3081) at aspnet/Home","RelatedBody":"To address your issues more quickly, please open the issue in the most appropriate repository. These are some of the most common repos:\r\n\r\nCommon ASP.NET and Entity Framework repos and projects:\r\n\r\n - Documentation: https://github.com/aspnet/Docs\r\n - MVC: https://github.com/aspnet/Mvc\r\n - Entity Framework Core: https://github.com/aspnet/EntityFrameworkCore\r\n - Entity Framework 6: https://github.com/aspnet/EntityFramework6\r\n - SignalR: https://github.com/aspnet/SignalR\r\n - Docker with ASP.NET Core: https://github.com/aspnet/aspnet-docker\r\n - Microsoft.NET.Sdk.Web: https://github.com/aspnet/websdk\r\n - Kestrel HTTP Server: https://github.com/aspnet/KestrelHttpServer\r\n - ASP.NET Katana: https://github.com/aspnet/AspNetKatana\r\n - and more! See a full list here: https://github.com/aspnet\r\n - note: several repositories have migrated their issues tracker to this repo here\r\n\r\nOther common projects:\r\n\r\n - .NET Core CLI and SDK: https://github.com/dotnet/core\r\n - .NET Core runtime: https://github.com/dotnet/coreclr\r\n - .NET Core libraries: https://github.com/dotnet/corefx\r\n - NuGet: https://github.com/NuGet/home\r\n - Visual Studio: https://developercommunity.visualstudio.com\r\n - Visual Studio Code: https://github.com/microsoft/vscode\r\n - Omnisharp (C# support for VS Code): https://github.com/omnisharp/omnisharp-vscode\r\n"},{"Id":"7563078901","Type":"IssuesEvent","CreatedAt":"2018-04-20T17:17:28","Actor":"mkArtakMSFT","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/3080","RelatedDescription":"Opened issue \"Create a sample to showcase a EF based locatization\" (#3080) at aspnet/Home","RelatedBody":""},{"Id":"7562900461","Type":"IssuesEvent","CreatedAt":"2018-04-20T16:39:00","Actor":"markrendle","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/3079","RelatedDescription":"Opened issue \"Can the ILEmit backend for dependency injection be made optional?\" (#3079) at aspnet/Home","RelatedBody":"I know the new ILEmit engine for Dependency Injection is totally awesome and 25% faster, but it breaks AoT compilation with CoreRT because of the dependency on `System.Reflection.Emit`: https://github.com/dotnet/corert/issues/5720\r\n\r\nI also know that AoT compilation of ASP.NET Core apps with CoreRT sounds very edge-casey and \"why-would-you-do-that\"-ish, and that for 99% of use cases, you probably wouldn't, but there are valid reasons to.\r\n\r\nSee, we're not just talking about ASP.NET Core here, we're talking about Kestrel and Hosting, and those are things you might want to use in very small console applications that you want to distribute as self-contained binary executables for use as services, for example.\r\n\r\nOr you might want to compile a little reusable microservice to native code and drop it in a minimal Alpine-based Docker image.\r\n\r\nI don't know what making this dependency \"soft\" would entail, whether it would be possible to drop it into a separate `Microsoft.Extensions.DependencyInjection.ILEmit` package and then include that in `Microsoft.AspNetCore.App` for convenience but allow people to skip it if they really want to? I don't know if controlling it via a Feature Flag would stop ILCompiler from choking on it.\r\n\r\nI don't know anything, do I?\r\n\r\nDiscuss."},{"Id":"7562254986","Type":"IssuesEvent","CreatedAt":"2018-04-20T14:43:11","Actor":"cilerler","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/3078","RelatedDescription":"Opened issue \"in IOptionsSnapshot<T>, T must have a public parameterless contstructor\" (#3078) at aspnet/Home","RelatedBody":"I would like to be able to log errors in my option/setting file. If I use DI in it, caller says `in IOptionsSnapshot<GracePeriodManagerServiceSetting>, GracePeriodManagerServiceSetting must have a public parameterless contstructor` how can I make this work?\r\n\r\n## GracePeriodManagerService.cs\r\n\r\n```csharp\r\npublic GracePeriodManagerService(IOptionsSnapshot<GracePeriodManagerServiceSetting> options)\r\n...\r\n```\r\n\r\n## GracePeriodManagerServiceSetting.cs\r\n```csharp\r\n    public class GracePeriodManagerServiceSetting\r\n    {\r\n        private readonly ILogger _logger;\r\n        public GracePeriodManagerServiceSetting(ILogger<GracePeriodManagerServiceSetting> logger)\r\n        {\r\n            _logger = logger;\r\n        }\r\n    ...\r\n    }\r\n```"},{"Id":"7560818495","Type":"IssuesEvent","CreatedAt":"2018-04-20T10:02:30","Actor":"chucklu","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/3077","RelatedDescription":"Opened issue \"Microsoft.Web.Xdt\" (#3077) at aspnet/Home","RelatedBody":"Hi team,\r\n   I find a library on nuget https://www.nuget.org/packages/Microsoft.Web.Xdt/2.1.2\r\n   The project site is https://xdt.codeplex.com.\r\n\r\n> Source Code\r\n> You can browse the source code via the web or use git to clone the source repository.\r\n> git clone https://git01.codeplex.com/xdt\r\n\r\n   when I try to clone it, but failed with following info:\r\nfatal: unable to update url base from redirection:\r\n  asked for: https://git01.codeplex.com/xdt/info/refs?service=git-upload-pack\r\n   redirect: https://archive.codeplex.com/?p=git01\r\n\r\n   Could you tell me the correct url?\r\n\r\n    I find a fork on github https://github.com/davidalpert/xdt. but it's not the latest version released two months ago. Is it possible for you to publish this project on github https://github.com/aspnet\r\n"}],"ResultType":"GitHubEvent"},"SignalR":{"Events":[{"Id":"7564624547","Type":"IssuesEvent","CreatedAt":"2018-04-20T23:59:04","Actor":"KPixel","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/SignalR/issues/1691","RelatedDescription":"Closed issue \"SocialWeather sample over TCP Sockets\" (#1691) at aspnet/SignalR","RelatedBody":"In order to rewrite my [peer-to-peer sample](https://github.com/KPixel/Prototypes), I've been playing around with the Kestrel and SignalR codebases, and my observation is that neither is a good fit right now because they both focus on HTTP.\r\n\r\nI know that the Sockets layer of SignalR is designed to support TCP (and maybe UDP) one day, so I'm working on a `Microsoft.AspNetCore.Sockets.InternetProtocol` project as proof-of-concept.\r\n\r\nMy goal for now is to get the SocialWeather sample running over TCP Sockets.\r\n\r\nBy the way, an unfortunate annoyance that I'm hitting right away is that there are naming clashes between classes meant for the Sockets layer, and classes meant to encapsulate System.Net.Sockets stuff. So, I will probably use the names \"InternetProtocol\" or \"NetSocket\" (like \"WebSocket\") for that.\r\n\r\nAnd I don't mind that the EndPoint class will be refactored as part of aspnet/KestrelHttpServer#1980. It shouldn't change anything fundamentally."},{"Id":"7564569851","Type":"IssuesEvent","CreatedAt":"2018-04-20T23:34:29","Actor":"anurse","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/SignalR/issues/1963","RelatedDescription":"Closed issue \"API review TS client\" (#1963) at aspnet/SignalR","RelatedBody":"Should review what the TS client makes public."},{"Id":"7564569492","Type":"PullRequestEvent","CreatedAt":"2018-04-20T23:34:20","Actor":"anurse","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/SignalR/pull/2123","RelatedDescription":"Merged pull request \"Final TS tidyup (#2120)\" (#2123) at aspnet/SignalR","RelatedBody":""},{"Id":"7564569026","Type":"PullRequestEvent","CreatedAt":"2018-04-20T23:34:09","Actor":"anurse","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/pull/2123","RelatedDescription":"Opened pull request \"Final TS tidyup (#2120)\" (#2123) at aspnet/SignalR","RelatedBody":""},{"Id":"7564568138","Type":"PullRequestEvent","CreatedAt":"2018-04-20T23:33:46","Actor":"anurse","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/SignalR/pull/2120","RelatedDescription":"Merged pull request \"Final TS tidyup\" (#2120) at aspnet/SignalR","RelatedBody":"Just some last TSLint passes. Also I did the \"manual remove-and-sort\" process on the imports (i.e.: remove them all and Ctrl-. until the errors stop ;))"},{"Id":"7564540142","Type":"PullRequestEvent","CreatedAt":"2018-04-20T23:22:17","Actor":"anurse","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/SignalR/pull/2122","RelatedDescription":"Merged pull request \"CancellationToken EVERYWHERE (#2101)\" (#2122) at aspnet/SignalR","RelatedBody":""},{"Id":"7564539707","Type":"PullRequestEvent","CreatedAt":"2018-04-20T23:22:07","Actor":"anurse","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/pull/2122","RelatedDescription":"Opened pull request \"CancellationToken EVERYWHERE (#2101)\" (#2122) at aspnet/SignalR","RelatedBody":""},{"Id":"7564539185","Type":"PullRequestEvent","CreatedAt":"2018-04-20T23:21:51","Actor":"anurse","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/SignalR/pull/2101","RelatedDescription":"Merged pull request \"CancellationToken EVERYWHERE\" (#2101) at aspnet/SignalR","RelatedBody":"* Add CancellationToken to all the public APIs that might be cancelable in the future.\r\n* Also cleaned up some extra usings as I was scanning through files\r\n* Removed unnecessary parameter from `HubConnection+ConnectionState.StopAsync`"},{"Id":"7564386936","Type":"IssuesEvent","CreatedAt":"2018-04-20T22:25:06","Actor":"BrennanConroy","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/issues/2121","RelatedDescription":"Opened issue \"C# client Stop can take a while if it spams Sends then tries to Stop\" (#2121) at aspnet/SignalR","RelatedBody":"```\r\nwhile (someCondition == false)\r\n{\r\n    _ = hubConnection.SendAsync(\"Ping\");\r\n}\r\n\r\n// Takes a long time to complete\r\nhubConnection.StopAsync();\r\n// or\r\nhubConnection.DisposeAsync();\r\n```\r\n\r\nThe `SendAsync`'s are all waiting on a lock and when `StopAsync/DisposeAsync` tries to run it waits on the same lock. And I've observed it taking over a minute for the Stop/Dispose to finish"}],"ResultType":"GitHubEvent"},"Mvc":{"Events":[{"Id":"7564574649","Type":"IssuesEvent","CreatedAt":"2018-04-20T23:36:44","Actor":"pranavkm","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7695","RelatedDescription":"Opened issue \"Update Mvc 1.1.x to reference Microsoft.Extensions.DependencyModel with fix\" (#7695) at aspnet/Mvc","RelatedBody":"Running a 1.1 Mvc app with project references breaks when using the 2.0 SDK - https://github.com/dotnet/sdk/issues/1488. The fix involves a change to Microsoft.Extensions.DependencyModel. https://github.com/dotnet/core-setup/issues/3081 tracks creating a 1.1 patch version of Microsoft.Extensions.DependencyModel. We should consider patching Mvc to reference this version when the package becomes available."},{"Id":"7564297417","Type":"PullRequestEvent","CreatedAt":"2018-04-20T21:56:59","Actor":"ajaybhargavb","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Mvc/pull/7690","RelatedDescription":"Merged pull request \"Added nuspec file to Mvc.Analyzers assembly\" (#7690) at aspnet/Mvc","RelatedBody":"Part of aspnet/Universe#1083"},{"Id":"7564280205","Type":"IssuesEvent","CreatedAt":"2018-04-20T21:51:55","Actor":"Tratcher","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7694","RelatedDescription":"Opened issue \"Write an analyzer that flags async void actions\" (#7694) at aspnet/Mvc","RelatedBody":"e.g. https://github.com/aspnet/Home/issues/3082\r\n\r\n`async void` actions break the request processing flow. These methods should be using `async Task`.\r\n\r\nProposal: Write an analyzer to flag these as warnings / errors in controllers."},{"Id":"7564277453","Type":"IssuesEvent","CreatedAt":"2018-04-20T21:51:08","Actor":"pranavkm","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7686","RelatedDescription":"Closed issue \"Add a BindPropertiesAttributes to support binding on controller and page model types\" (#7686) at aspnet/Mvc","RelatedBody":"For 2.1.0-preview1, we added support for `BIndPropertyAttribute` to be declared on page models. Later in rc1, we expanded this to controllers. However, `BindPropertyAttribute` has properties such as `Name` and `BinderType` that do not make much sense in the context of a type (See https://github.com/aspnet/Mvc/issues/7355). In addition, the implementation for Razor Pages allows for other model binding properties to be applied to the model type which is well beyond the intent of the initial issue. The suggestion here is\r\n\r\n1. Introduce a new `BindPropertiesAttribute` that can be applied to controller and page model types. `BindPropertiesAttribute` has a single property `SupportsGet` which has the same semantic as `BindProperty.SupportsGet`\r\n2. Replace support for declaring `BindPropertyAttribute` on types, and replace the current implementations to look at `BindPropertiesAttribute`.\r\n3. Limit DefaultRazorPageApplicationModelProvider to only look for `BindPropertiesAttribute` on model types.\r\n\r\n---------------\r\n\r\n### Original issue text\r\n\r\nWe recently added support for BindPropertyAttribute on controller types as part of https://github.com/aspnet/Mvc/issues/7350. The current implementation always enables binding on properties that do not already have any binding info without applying constraints by `SupportsGet`. The other two settable properties on `BindPropertyAttribute` viz `Name` and `BinderType` make less sense here.\r\n\r\nHere's the \"broken\" scenarios:\r\n\r\n```C#\r\n[BindProperty(SupportsGet = false)]\r\npublic class MyController : Controller\r\n{\r\n    public int Id { get; set; } // This will get bound in Get requests even though the property expects it not to.\r\n}\r\n```"},{"Id":"7564209839","Type":"PullRequestEvent","CreatedAt":"2018-04-20T21:32:16","Actor":"pranavkm","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Mvc/pull/7689","RelatedDescription":"Merged pull request \"Introduce BindPropertiesAttribute\" (#7689) at aspnet/Mvc","RelatedBody":"* Allow controller and Razor Page models to be annotated with BindPropertiesAttribute\r\n* Disallow BindPropertyAttribute from being declared on types.\r\n* Do not allow arbitrary binding attributes to be applied to Razor Page models.\r\n\r\nFixes #7686"}],"ResultType":"GitHubEvent"},"Identity":{"Events":[{"Id":"7558288911","Type":"IssuesEvent","CreatedAt":"2018-04-19T21:37:36","Actor":"benrhere","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/issues/1757","RelatedDescription":"Closed issue \"ASP.NET Identity Core 2.0: Custom usermanager causing problems with security stamp?\" (#1757) at aspnet/Identity","RelatedBody":"Hi,\r\n\r\nI'm generating custom claims with the following method:\r\n\r\n        protected override async Task<ClaimsIdentity> GenerateClaimsAsync(TUser user)\r\n        {\r\n            var id = await base.GenerateClaimsAsync(user);\r\n            var myOrgs = user.OrganizationMemberships;\r\n            var myAdminOrgs = myOrgs?.Where(om => om.Role == Data.Enums.OrganizationMembershipRole.Admin || om.Role == Data.Enums.OrganizationMembershipRole.SecondaryAdmin).Select(org=>org.Id).ToList();\r\n            var myPlayerOrgs = myOrgs?.Where(om => om.Role == Data.Enums.OrganizationMembershipRole.Athlete || om.Role == Data.Enums.OrganizationMembershipRole.Admin || om.Role == Data.Enums.OrganizationMembershipRole.SecondaryAdmin).Select(org=>org.Id).ToList();\r\n            if (myAdminOrgs!= null && myAdminOrgs.Count > 0)\r\n            {\r\n                var adminOrgStrings = String.Join(\",\", myAdminOrgs);\r\n                id.AddClaim(new Claim(MyDotNetCoreAppClaimTypes.MyDotNetCoreAppOrgAdmin, adminOrgStrings));\r\n            }\r\n            if (myPlayerOrgs != null && myPlayerOrgs.Count > 0)\r\n            {\r\n                var playerOrgStrings = String.Join(\",\", myPlayerOrgs);\r\n                id.AddClaim(new Claim(MyDotNetCoreAppClaimTypes.MyDotNetCoreAppOrgMember, playerOrgStrings));\r\n            }\r\n            return id;\r\n        }\r\n\r\nThe important thing to note is that I'm referencing a table related to the users table, so I need to explicitly load it. To achieve that, I've created a custom UserManager which pulls the additional needed data:\r\n\r\npublic class MyDotNetCoreAppUserManager : UserManager<MyDotNetCoreAppUser>\r\n    {\r\n\r\n        public MyDotNetCoreAppUserManager(IUserStore<MyDotNetCoreAppUser> store, IOptions<IdentityOptions> optionsAccessor,\r\n        IPasswordHasher<MyDotNetCoreAppUser> passwordHasher, IEnumerable<IUserValidator<MyDotNetCoreAppUser>> userValidators,\r\n        IEnumerable<IPasswordValidator<MyDotNetCoreAppUser>> passwordValidators, ILookupNormalizer keyNormalizer,\r\n        IdentityErrorDescriber errors, IServiceProvider services, ILogger<UserManager<MyDotNetCoreAppUser>> logger)\r\n        : base(store,optionsAccessor,passwordHasher,userValidators,passwordValidators,keyNormalizer,errors,services,logger)\r\n        {\r\n        }\r\n\r\n        /// <summary>\r\n        /// Gets all users\r\n        /// </summary>\r\n        /// <param name=\"includes\">Optional parameter for eager loading related entities</param>\r\n        /// <returns>An list of users</returns>\r\n        public async Task<MyDotNetCoreAppUser> GetAll(string userName, params string[] includes)\r\n        {\r\n\r\n            // Get our User DbSet\r\n            var users = base.Users.Where(u=>u.UserName == userName);\r\n\r\n            // For each include, include in the query\r\n            foreach (var include in includes)\r\n                users = users.Include(include);\r\n\r\n            // Return our result\r\n            return await users.FirstOrDefaultAsync();\r\n        }\r\n\r\n\r\n        //This is called on initial login and is necessary to pull additional related user data\r\n        //used in claim generation. But overriding this causes sescurity stamp validation to fail!\r\n        public override Task<MyDotNetCoreAppUser> FindByNameAsync(string userName)\r\n        {\r\n            var fetchTask = GetAll(userName, \"OrganizationMemberships\");\r\n            return fetchTask;\r\n        }\r\n\r\n        //When it's time to validate the security stamp, a call is made into here for some reason.\r\n        //If I comment this override out, it successfully regenerates claims, and\r\n        //regenerates a login cookie (and I stay logged in)\r\n        //but the claims generation misses the needed related data.\r\n        //But if I enable this override, it just logs the user out after calling into here. (Doesn't\r\n        //fire GenerateClaimsAsync)\r\n        public override Task<MyDotNetCoreAppUser> FindByIdAsync(string userId)\r\n        {\r\n            return GetAll(userId, \"OrganizationMemberships\");\r\n        }\r\n    }\r\n\r\nBut please see above comments in this code. The problem is that after 30 minutes, when it's time to revalidate the security stamp and the user refreshes, one of two things happens:\r\n\r\n-If I do NOT override FindByIdAsync, it somewhat works, meaning the user stays logged in and claims are generated - however, the user object passed ot GenerateClaimsAsync does NOT contain the required OrganizationMemberships property populated.\r\n-If I DO override FindByIdAsync, I hit that breakpoint when I refresh the page after the security stamp timeout expires. However, after I continue, I don't hit the ClaimsGeneration method. Instead, I'm logged out and redirected to the login page.\r\n\r\nAlso maybe relevant:\r\n\r\n           services.AddIdentity<MyDotNetCoreAppUser, MyDotNetCoreAppRole>(opt =>\r\n            {\r\n                opt.Password.RequireNonAlphanumeric = false;\r\n                opt.Password.RequireUppercase = false;\r\n            })\r\n                .AddEntityFrameworkStores<MyDotNetCoreAppDbContext>()\r\n                .AddUserManager<MyDotNetCoreAppUserManager>()\r\n                .AddSignInManager<MyDotNetCoreAppSignInManager>()\r\n                .AddDefaultTokenProviders();\r\n\r\n            services.AddAuthorization(opt =>\r\n            {\r\n                opt.AddPolicy(\"OrgAdmin\", policy => policy.RequireClaim(MyDotNetCoreAppClaimTypes.MyDotNetCoreAppOrgAdmin));\r\n                opt.AddPolicy(\"OrgMember\", policy => policy.RequireClaim(MyDotNetCoreAppClaimTypes.MyDotNetCoreAppOrgMember));\r\n            });\r\n            services.Configure<SecurityStampValidatorOptions>(options =>\r\n            {\r\n                // enables immediate logout, after updating the user's stat.\r\n                options.ValidationInterval = TimeSpan.FromSeconds(6);\r\n            });\r\n\r\n(I set the validation interval to 6 seconds to be able to debug the security stamp validation more easily.)\r\n\r\nAppreciative of any thoughts on this. Thanks..."},{"Id":"7557466990","Type":"IssuesEvent","CreatedAt":"2018-04-19T18:51:22","Actor":"ngohungphuc","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1764","RelatedDescription":"Opened issue \"LockoutEnabled not enable after fail login attempt\" (#1764) at aspnet/Identity","RelatedBody":"I have turn on user login attempt in controller\r\n```cs\r\n  var result = await _signInManager.PasswordSignInAsync(model.Username, model.Password,model.RememberMe, true);\r\n```\r\n\r\nStartup\r\n```cs\r\n services\r\n                .AddIdentity<User, ApplicationRole>(options =>\r\n                {\r\n                    options.Password.RequireDigit = false;\r\n                    options.Password.RequiredLength = 4;\r\n                    options.Password.RequireLowercase = false;\r\n                    options.Password.RequireNonAlphanumeric = false;\r\n                    options.Password.RequireUppercase = false;\r\n\r\n                    //lock out attempt\r\n                    options.Lockout.AllowedForNewUsers = true;\r\n                    options.Lockout.DefaultLockoutTimeSpan = TimeSpan.FromMinutes(30);\r\n                    options.Lockout.MaxFailedAccessAttempts = 2;\r\n                 })\r\n                .AddEntityFrameworkStores<ApplicationDbContext>()\r\n                .AddDefaultTokenProviders();\r\n```\r\n\r\nBut when user login fail only the LockoutEnd have data. The LockoutEnabled column is always false so user can keep login back again. Any idea about this. Thank you"},{"Id":"7556975739","Type":"PullRequestEvent","CreatedAt":"2018-04-19T17:17:29","Actor":"pranavkm","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Identity/pull/1761","RelatedDescription":"Merged pull request \"Fix build break\" (#1761) at aspnet/Identity","RelatedBody":"* Use Razor.Sdk package to not perform runtime compilation\r\n* Use Mvc with PageResult fix (https://github.com/aspnet/Mvc/issues/7665)"},{"Id":"7553229172","Type":"IssuesEvent","CreatedAt":"2018-04-19T05:07:07","Actor":"p2atran","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1763","RelatedDescription":"Opened issue \"UserManager.FindByNameAsync doesn't get roles [QUESTION]\" (#1763) at aspnet/Identity","RelatedBody":"I recently just migrated my .NET Core 1.1.4 app over to .NET Core 2. Everything builds and compiles, but my identity stuff are all messed up. When I do a call to `UserManage.FindByNameAsync(email)`, The correct user is found. However, his role count is 0.\r\n\r\nI read somewhere that Net Core 2 no longer eager/lazy loads. I'm still new to .NET Core environment and have been put in the deep end. How would I work around this to get the UserManager to work again? It used to work fine in .NET Core 1.1"},{"Id":"7551065521","Type":"IssuesEvent","CreatedAt":"2018-04-18T18:53:55","Actor":"jbagga","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1762","RelatedDescription":"Opened issue \"External login provider is not accessible when using global authorize filter\" (#1762) at aspnet/Identity","RelatedBody":"When an external login provider is configured, and a global authorize filter is applied, clicking the button to navigate to the provider (say Twitter sign in) redirects back to the current Login page.\r\n\r\nTo allow anonymous users to log in to an external provider while using a global authorize filter, the user can scaffold the `ExternalLogin.cshtml.cs` page and add the `AllowAnonymous` attribute to the `ExternalLoginModel`.\r\n\r\nPlease note, a corresponding change must also be made in aspnet/Scaffolding repo."},{"Id":"7550341310","Type":"IssuesEvent","CreatedAt":"2018-04-18T16:36:14","Actor":"blowdart","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/issues/1746","RelatedDescription":"Closed issue \"loop to change user\" (#1746) at aspnet/Identity","RelatedBody":"foreach (var item in list)\r\n            {\r\n                var model = new {headimgurl = \"\", nickname = \"\"};\r\n                item.WxAvatar = model.headimgurl;\r\n                item.WxName = model.nickname;\r\n                await userManager.UpdateAsync(item);\r\n            }\r\n\r\nSystem.InvalidOperationException: Invalid operation. The connection is closed.\r\n"},{"Id":"7545824261","Type":"IssuesEvent","CreatedAt":"2018-04-17T23:22:03","Actor":"mkArtakMSFT","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/issues/1737","RelatedDescription":"Closed issue \"[Preview2-Validation] Pages under Account/Manage loose the 'Title' information from ViewData\" (#1737) at aspnet/Identity","RelatedBody":"For example, when we go to `Manage` page, we should see the title of the html page to be like `Profile - <application-name>` but we only get ` - <application-name>`.\r\n\r\n@pranavkm and I debugged through this and think that the cause of this issue could be with how Identity UI uses a model type(abstract) on the view versus the actual type(implementation). Following line of code is a suspect:\r\nhttps://github.com/aspnet/Mvc/commit/7127bb5dbbb07eb325a2852ac9a91be0cf443205#diff-0901f55a5e636aeef89b9663dafcb625R171"},{"Id":"7545562789","Type":"PullRequestEvent","CreatedAt":"2018-04-17T22:07:24","Actor":"pranavkm","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/pull/1761","RelatedDescription":"Opened pull request \"Fix build break\" (#1761) at aspnet/Identity","RelatedBody":"* Use Razor.Sdk package to not perform runtime compilation\r\n* Use Mvc with PageResult fix (https://github.com/aspnet/Mvc/issues/7665)"}],"ResultType":"GitHubEvent"},"Kestrel":{"Events":[{"Id":"7564477636","Type":"PullRequestEvent","CreatedAt":"2018-04-20T22:57:49","Actor":"Tratcher","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2511","RelatedDescription":"Opened pull request \"Fix Sending100ContinueDoesNotStartResponse\" (#2511) at aspnet/KestrelHttpServer","RelatedBody":" #2507 There's a race where the client may disconnect before the server drains the request body and logs the expected error. I've changed the test to wait for the error log before disconnecting.\r\n\r\nI've also updated the test name to reflect how the expected behavior here has changed since 2.0."},{"Id":"7564069005","Type":"IssuesEvent","CreatedAt":"2018-04-20T20:56:52","Actor":"mikeharder","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2401","RelatedDescription":"Closed issue \"Flaky test: Sending100ContinueDoesNotStartResponse\" (#2401) at aspnet/KestrelHttpServer","RelatedBody":"This test failed [on the ci](http://aspnetci/viewLog.html?buildId=423210&buildTypeId=Lite_KestrelHttpServer).\r\n\r\n```\r\nSystem.NullReferenceException : Object reference not set to an instance of an object.\r\n   at Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.ResponseTests.<>c.<Sending100ContinueDoesNotStartResponse>b__47_0(WriteContext w)\r\n   at Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.ResponseTests.<Sending100ContinueDoesNotStartResponse>d__47.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n```\r\n\r\nFuture instances of this failure will appear in [this](http://aspnetci/httpAuth/app/rest/builds?locator=tag:KestrelNullRef,sinceDate:201710010T000000-0001&fields=build(startDate,buildTypeId,status,branchName,webUrl,tags)) list."},{"Id":"7564066892","Type":"IssuesEvent","CreatedAt":"2018-04-20T20:56:21","Actor":"mikeharder","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2405","RelatedDescription":"Closed issue \"Flaky test: Sending100ContinueDoesNotStartResponse\" (#2405) at aspnet/KestrelHttpServer","RelatedBody":"This test [fails](http://aspnetci/viewLog.html?buildId=423029&buildTypeId=Lite_KestrelStressTest) with the following error some times:\r\n```\r\nSystem.IndexOutOfRangeException : Index was outside the bounds of the array.\r\n   at System.Collections.Generic.List`1.Enumerator.MoveNext()\r\n   at Microsoft.AspNetCore.Server.Kestrel.FunctionalTests.ResponseTests.<Sending100ContinueDoesNotStartResponse>d__47.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n```\r\n\r\nFuture instances of this failure can be found [here](http://aspnetci/httpAuth/app/rest/builds?locator=tag:KestrelIndexOutOfRange,sinceDate:201710010T000000-0001&fields=build(startDate,buildTypeId,status,branchName,webUrl,tags))."},{"Id":"7563720738","Type":"PullRequestEvent","CreatedAt":"2018-04-20T19:36:55","Actor":"Tratcher","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2501","RelatedDescription":"Closed pull request \"[WIP] Re-enable ConnectionCountingReturnsToZero #2282\" (#2501) at aspnet/KestrelHttpServer","RelatedBody":"Checking for MacOS High Sierra failures"},{"Id":"7563618974","Type":"IssuesEvent","CreatedAt":"2018-04-20T19:13:29","Actor":"GrabYourPitchforks","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2510","RelatedDescription":"Reopened issue \"Buffers are being pinned/unpinned in socket IO calls\" (#2510) at aspnet/KestrelHttpServer","RelatedBody":"I'm looking at traces of TechEmpower JSON.  We're spending about 1.0% of time in Memory.Pin and about 1.3% in MemoryHandle.Dispose.  We seem to actually be doing the pin/unpin on underlying byte array.\r\n\r\nIt looks like the recent Memory changes lost the optimization to avoid pinning here.  I believe this is *supposed* to work, but it's not."},{"Id":"7563617101","Type":"IssuesEvent","CreatedAt":"2018-04-20T19:13:05","Actor":"GrabYourPitchforks","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2510","RelatedDescription":"Closed issue \"Buffers are being pinned/unpinned in socket IO calls\" (#2510) at aspnet/KestrelHttpServer","RelatedBody":"I'm looking at traces of TechEmpower JSON.  We're spending about 1.0% of time in Memory.Pin and about 1.3% in MemoryHandle.Dispose.  We seem to actually be doing the pin/unpin on underlying byte array.\r\n\r\nIt looks like the recent Memory changes lost the optimization to avoid pinning here.  I believe this is *supposed* to work, but it's not."},{"Id":"7563560350","Type":"PullRequestEvent","CreatedAt":"2018-04-20T19:00:08","Actor":"Tratcher","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2501","RelatedDescription":null,"RelatedBody":"Checking for MacOS High Sierra failures"}],"ResultType":"GitHubEvent"},"Razor":{"Events":[{"Id":"7563427444","Type":"PullRequestEvent","CreatedAt":"2018-04-20T18:31:30","Actor":"ajaybhargavb","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/pull/2291","RelatedDescription":"Opened pull request \"Make newline comparison work crossplat\" (#2291) at aspnet/Razor","RelatedBody":"Fixes issue [585150](https://devdiv.visualstudio.com/DevDiv/Xamarin%20VS%20for%20Mac/_workitems/edit/585150)"},{"Id":"7562975974","Type":"IssuesEvent","CreatedAt":"2018-04-20T16:55:11","Actor":"mkArtakMSFT","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Razor/issues/2288","RelatedDescription":"Closed issue \"Render TagHelper to String\" (#2288) at aspnet/Razor","RelatedBody":"It could be useful to be to get the rendered html from a TagHelper, optionally passing a ViewContext. Maybe an extension method.\r\n\r\n```\r\nHtmlString str = MyTagHelperClass.ToHtml();\r\nHtmlString str = MyTagHelperClass.ToHtml(attributes); \r\nHtmlString str = MyTagHelperClass.ToHtml(attributes, viewContext);\r\n``` \r\nSimilar to Rendering views into strings #2274.\r\n"},{"Id":"7558867355","Type":"IssuesEvent","CreatedAt":"2018-04-20T00:30:59","Actor":"ajaybhargavb","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/issues/2290","RelatedDescription":"Opened issue \"Build server pid files should be properly cleaned up when the process is killed on Unix\" (#2290) at aspnet/Razor","RelatedBody":"More context here https://github.com/aspnet/Razor/pull/2285#discussion_r182893605"},{"Id":"7558124074","Type":"IssuesEvent","CreatedAt":"2018-04-19T21:02:08","Actor":"pranavkm","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/aspnet/Razor/issues/2280","RelatedDescription":"Reopened issue \".Net Core 2.0 mvc.razor.viewcompilation.rsp build exception MSB3073 exited with code -2147450751\" (#2280) at aspnet/Razor","RelatedBody":"_From @DenisKot on April 15, 2018 17:46_\n\nBuild solution fails with strange error:\r\n\r\n> Error\tMSB3073\tThe command \"\"dotnet\" exec --runtimeconfig \"F:\\TrackTubeNew\\Src\\TreckTube\\bin\\Debug\\netcoreapp2.0\\TreckTube.Web.runtimeconfig.json\" --depsfile \"F:\\TrackTubeNew\\Src\\TreckTube\\bin\\Debug\\netcoreapp2.0\\TreckTube.Web.deps.json\" \"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.razor.viewcompilation\\2.0.0\\build\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Razor.ViewCompilation.dll\" @\"obj\\Debug\\netcoreapp2.0\\microsoft.aspnetcore.mvc.razor.viewcompilation.rsp\"\" exited with code -2147450751.\tTreckTube.Web\tC:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.razor.viewcompilation\\2.0.0\\build\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Razor.ViewCompilation.targets\t60\t\r\n\r\nIf double click on error VS opens up file:\r\n\r\n> C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.mvc.razor.viewcompilation\\2.0.0\\build\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Razor.ViewCompilation.targets\r\n\r\nAt line:\r\n`<Exec Command=\"$(ExecArgs)\" WorkingDirectory=\"$(MSBuildProjectDirectory)\" />`\r\n\r\nTo fix it I've tried to update .net core libraries from version 2.0.0. to 2.0.6, have been update visual studio 2017 to 17.6.6, even revret my changes but nothing is helping.\r\n\r\nHow to fix it?\n\n_Copied from original issue: dotnet/corefx#29125_"}],"ResultType":"GitHubEvent"},"Templates":{"Events":[],"ResultType":"GitHubEvent"},"Tooling":{"Events":[{"Id":"7439234583","Type":"IssuesEvent","CreatedAt":"2018-03-27T05:23:09","Actor":"barrytang","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1069","RelatedDescription":"Closed issue \"EntityFramework migrations not available to be applied during publish\" (#1069) at aspnet/Tooling","RelatedBody":"Workaround does not work for me. Apply migration missing in any case. after rebuilt, reload, restart etc"},{"Id":"7438189808","Type":"IssuesEvent","CreatedAt":"2018-03-26T23:00:08","Actor":"dvdobrovolskiy","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1069","RelatedDescription":"Opened issue \"EntityFramework migrations not available to be applied during publish\" (#1069) at aspnet/Tooling","RelatedBody":"Workaround does not work for me. Apply migration missing in any case. after rebuilt, reload, restart etc"},{"Id":"7416019717","Type":"IssuesEvent","CreatedAt":"2018-03-21T22:57:29","Actor":"snebjorn","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/823","RelatedDescription":"Closed issue \"Make tooling support splitting asp.net and bootstrapping in different projects (onion architecture)\" (#823) at aspnet/Tooling","RelatedBody":"I'd like to see better tooling support for a more onion architecture like solution structure.\n\nFor instance\n- Solution\n  - Core (business logic, domain model, etc)\n  - Infrastructure.EntityFramework (DAL)\n  - Presentation.ASPNET (MVC or WebApi)\n  - Bootstrapper (Program.cs and Startup.cs)\n\nSo basically I just moved Program.cs and Startup.cs to another project. This is important because according to the onion architecture Presentation.ASPNET should not have references to Entity Framework.\n\nIf I do this today I loose the \"IIS Express\" run button and I cannot publish via wed deploy in the way I'm used to. Plus a ton of other issues.\n\nWould be sweet if there was better support for this setup :)\n"},{"Id":"7381313128","Type":"IssuesEvent","CreatedAt":"2018-03-14T22:19:23","Actor":"AngelosP","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/240","RelatedDescription":"Closed issue \"Support debugging of JS executed with EdgeJS in VS\" (#240) at aspnet/Tooling","RelatedBody":"We would like to do the server side HTML rendering with ReactJS in our ASP.NET application. This works with EdgeJS, but there is currently no way to debug the JS code in VS. \n\nIt would be nice if this would work and we wouldn't need node-inspector for this.\n\nhttps://github.com/tjanczuk/edge/issues/316\n"},{"Id":"7376247861","Type":"IssuesEvent","CreatedAt":"2018-03-14T05:33:19","Actor":"barrytang","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1068","RelatedDescription":"Closed issue \"Switch between Razor Page View and Code Behind\" (#1068) at aspnet/Tooling","RelatedBody":"In the old web forms you were able to quickly switch between the ASPX file and the code behind using F7/Shift F7 or going View->Code or View->Designer. It would be useful if this was possible with Razor Pages in aspnet core projects?\r\n"},{"Id":"7372052889","Type":"IssuesEvent","CreatedAt":"2018-03-13T13:46:08","Actor":"TheConservativeCoder","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1068","RelatedDescription":"Opened issue \"Switch between Razor Page View and Code Behind\" (#1068) at aspnet/Tooling","RelatedBody":"In the old web forms you were able to quickly switch between the ASPX file and the code behind using F7/Shift F7 or going View->Code or View->Designer. It would be useful if this was possible with Razor Pages in aspnet core projects?\r\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"986683993180590080","CreatedAt":"2018-04-18T19:12:50+00:00","UserScreenname":"aspnet","Text":"Tune in to the @PhillyDotNet user group today at 6pm ET / 3pm PT to learn more about Blazor from our MVP Chris Gome… https://t.co/D6svQPb95X","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":8,"FavoriteCount":2,"RawContent":null},{"Id":"986310111256858624","CreatedAt":"2018-04-17T18:27:09+00:00","UserScreenname":"aspnet","Text":"Blazor 0.2.0 release now available https://t.co/rFE8xvlvM3","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":241,"FavoriteCount":144,"RawContent":null},{"Id":"983838325457829890","CreatedAt":"2018-04-10T22:45:10+00:00","UserScreenname":"aspnet","Text":"We're live on the #ASPNET Community Standup! Join us! https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":20,"FavoriteCount":6,"RawContent":null},{"Id":"983802600398049285","CreatedAt":"2018-04-10T20:23:12+00:00","UserScreenname":"aspnet","Text":"Join us for the weekly #ASPNET Community Standup today at 3:45 PM Pacific / 23:45 GMT at https://t.co/4Ioo9jNSN2 https://t.co/441EI8rRQL","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":11,"FavoriteCount":10,"RawContent":null},{"Id":"981890668095332353","CreatedAt":"2018-04-05T13:45:52+00:00","UserScreenname":"aspnet","Text":"Tune in to @csharpfritz live stream today to learn more about getting started with #ASP.NET Core. https://t.co/mkwxUOObrd","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":14,"FavoriteCount":7,"RawContent":null},{"Id":"981214732198674433","CreatedAt":"2018-04-03T16:59:56+00:00","UserScreenname":"aspnet","Text":"Starting now!\n\n#ASPNET Community Standup\n\nBlazor Update with @danroth27 and @stevensanderson… https://t.co/Tukk2JSsvC","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":43,"FavoriteCount":16,"RawContent":null},{"Id":"981205689891803136","CreatedAt":"2018-04-03T16:24:01+00:00","UserScreenname":"aspnet","Text":"Join our @csharpfritz for some #ASP.NET Core coding today, and ask questions during his live coding stream at 12:30… https://t.co/PCKhYbjIMP","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":17,"FavoriteCount":9,"RawContent":null},{"Id":"980945681794809856","CreatedAt":"2018-04-02T23:10:50+00:00","UserScreenname":"aspnet","Text":"Tuesday at 10 Pacific / 18 GMT - #ASPNET Community Standup\n\nBlazor Update with @danroth27 and @stevensanderson… https://t.co/lCnzHFb8x9","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":99,"FavoriteCount":56,"RawContent":null},{"Id":"979863409561812993","CreatedAt":"2018-03-30T23:30:16+00:00","UserScreenname":"aspnet","Text":"We just released some minor bug fixes to jquery-ajax-unobtrusive and jquery-validation-unobtrusive:… https://t.co/9P5vskn1i8","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":26,"FavoriteCount":13,"RawContent":null},{"Id":"978766397814710272","CreatedAt":"2018-03-27T22:51:08+00:00","UserScreenname":"aspnet","Text":"We're live on the #ASPNET Community Standup! Join us! https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":12,"FavoriteCount":7,"RawContent":null},{"Id":"978605317293576193","CreatedAt":"2018-03-27T12:11:03+00:00","UserScreenname":"aspnet","Text":"This will be a fun show that you won't want to miss if you're starting to lean #ASP.NET Core.  Jeff and Shayne are… https://t.co/MdzhQjXGY3","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":47,"FavoriteCount":12,"RawContent":null},{"Id":"978387927041323008","CreatedAt":"2018-03-26T21:47:14+00:00","UserScreenname":"aspnet","Text":"Join us for the weekly #ASPNET Community Standup this Tuesday at 3:45 PM Pacific / 23:45 GMT at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":9,"FavoriteCount":10,"RawContent":null},{"Id":"976910278083432449","CreatedAt":"2018-03-22T19:55:35+00:00","UserScreenname":"aspnet","Text":"Get started building .NET web apps in the browser with Blazor https://t.co/NLDaIe6hpY","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":159,"FavoriteCount":100,"RawContent":null},{"Id":"976141395114082304","CreatedAt":"2018-03-20T17:00:19+00:00","UserScreenname":"aspnet","Text":"Starting now!\n\nThe #ASPNET Community Standup with @sshirhatti showing #aspnetcore 2.1 Improvements for IIS Hosting.\n\nhttps://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":21,"FavoriteCount":10,"RawContent":null},{"Id":"975923268740833280","CreatedAt":"2018-03-20T02:33:33+00:00","UserScreenname":"aspnet","Text":"This week's #ASPNET Community Standup is on Tuesday at 10 AM  Pacific / 1800 GMT. @sshirhatti will be showing… https://t.co/qlOERhEOaw","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":19,"FavoriteCount":14,"RawContent":null},{"Id":"974312682647162880","CreatedAt":"2018-03-15T15:53:40+00:00","UserScreenname":"aspnet","Text":"Watch @csharpfritz and @shanselman in this recorded video from today's LiveStream about converting an application t… https://t.co/6QP4SCXJ3S","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":19,"FavoriteCount":4,"RawContent":null}]}},"RunOn":"2018-04-21T05:30:11.9047411Z","RunDurationInMilliseconds":7284}