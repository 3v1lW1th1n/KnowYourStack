{"Data":{"GitHub":{"Issues":[{"Id":"385063930","IsPullRequest":true,"CreatedAt":"2018-11-28T01:46:06","Actor":"wschin","Number":"1747","RawContent":null,"Title":"Extend a test for adding string-array output example","State":"open","Body":"Fixes #1746.","Url":"https://github.com/dotnet/machinelearning/pull/1747","RelatedDescription":"Open PR \"Extend a test for adding string-array output example\" (#1747)"},{"Id":"384563260","IsPullRequest":true,"CreatedAt":"2018-11-28T01:21:00","Actor":"rogancarr","Number":"1728","RawContent":null,"Title":"Add a sample for Permutation Feature Importance","State":"closed","Body":"This PR adds a sample for using `PermutationFeatureImportance`.\r\n\r\nThe sample looks at the feature importances for a linear model predicting housing prices with the `HousingRegression` dataset and shows how to interpret the output of `PermutationFeatureImportance` as a measure of global feature importance.\r\n\r\nFixes #1723 ","Url":"https://github.com/dotnet/machinelearning/pull/1728","RelatedDescription":"Closed or merged PR \"Add a sample for Permutation Feature Importance\" (#1728)"},{"Id":"384531809","IsPullRequest":false,"CreatedAt":"2018-11-28T01:21:00","Actor":"rogancarr","Number":"1723","RawContent":null,"Title":"Create a sample for Permutation Feature Importance","State":"closed","Body":"We recently added 'PermutationFeatureImportance` for `Regression`. It would be great to have a sample on how to use it.","Url":"https://github.com/dotnet/machinelearning/issues/1723","RelatedDescription":"Closed issue \"Create a sample for Permutation Feature Importance\" (#1723)"},{"Id":"384557880","IsPullRequest":true,"CreatedAt":"2018-11-28T00:02:56","Actor":"codemzs","Number":"1727","RawContent":null,"Title":"Stateful Prediction engine for time series.","State":"closed","Body":"Stateful prediction engine for time series that updates the time series model with new observations at the prediction (anomaly detection) phase and allows for checkpointing the updated model to file stream.\r\n\r\nfixes #1219\r\nReplaces #1618.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1727","RelatedDescription":"Closed or merged PR \"Stateful Prediction engine for time series.\" (#1727)"},{"Id":"385040896","IsPullRequest":false,"CreatedAt":"2018-11-28T00:00:28","Actor":"wschin","Number":"1746","RawContent":null,"Title":"Need more C# end-to-end tests and examples","State":"open","Body":"I am looking for examples for using `WordTokenizingTransformer`. The only resources I found is [its test](https://github.com/dotnet/machinelearning/blob/18d7ea306c480013f54674d92431386abccce64f/test/Microsoft.ML.Tests/Transformers/WordTokenizeTests.cs#L67), but after reading that, I still don't know how to print out its output using `Console.WriteLine`. As a C# library, we need more end-to-end examples which **feed C#** data structures and get the produced results **as native C#** objects.","Url":"https://github.com/dotnet/machinelearning/issues/1746","RelatedDescription":"Open issue \"Need more C# end-to-end tests and examples\" (#1746)"},{"Id":"385036151","IsPullRequest":true,"CreatedAt":"2018-11-27T23:41:13","Actor":"shmoradims","Number":"1745","RawContent":null,"Title":" Added VarVector static extension for OneHotHashEncoding","State":"open","Body":"Fixes #1225","Url":"https://github.com/dotnet/machinelearning/pull/1745","RelatedDescription":"Open PR \" Added VarVector static extension for OneHotHashEncoding\" (#1745)"},{"Id":"384614961","IsPullRequest":true,"CreatedAt":"2018-11-27T23:33:48","Actor":"rogancarr","Number":"1731","RawContent":null,"Title":"Adding XML Documentation for Generalized Additive Models","State":"closed","Body":"This PR updates the XML Docs for GAMs with more information about the learner and points to the new samples being added to the repository.\r\n\r\nThis also fixes the name of the binary classification trainer.\r\n\r\nFixes #1730 ","Url":"https://github.com/dotnet/machinelearning/pull/1731","RelatedDescription":"Closed or merged PR \"Adding XML Documentation for Generalized Additive Models\" (#1731)"},{"Id":"384607502","IsPullRequest":false,"CreatedAt":"2018-11-27T23:33:48","Actor":"rogancarr","Number":"1730","RawContent":null,"Title":"Add detailed XMLDocs for Generalized Additive Models","State":"closed","Body":"The XML docs for Generalized Additive Models are not very detailed and sometimes incorrect (e.g. in the tree trainer catalog). I would like to see detailed descriptions in the XML docs that link to samples.","Url":"https://github.com/dotnet/machinelearning/issues/1730","RelatedDescription":"Closed issue \"Add detailed XMLDocs for Generalized Additive Models\" (#1730)"},{"Id":"384620024","IsPullRequest":true,"CreatedAt":"2018-11-27T23:27:13","Actor":"rogancarr","Number":"1733","RawContent":null,"Title":"Updating the XML Docs for Permutation Feature Importance","State":"closed","Body":"This PR updates the XML docs of `PermutationFeatureImportance` to include more details, a reference to the original Breiman paper, and a link to the new sample.\r\n\r\nFixes #1732 ","Url":"https://github.com/dotnet/machinelearning/pull/1733","RelatedDescription":"Closed or merged PR \"Updating the XML Docs for Permutation Feature Importance\" (#1733)"},{"Id":"384615623","IsPullRequest":false,"CreatedAt":"2018-11-27T23:27:12","Actor":"rogancarr","Number":"1732","RawContent":null,"Title":"Add detailed XML Docs for Permutation Feature Importance","State":"closed","Body":"The XML Docs for `Permutation Feature Importance`, aka `PFI`, can be extended a bit to discuss the technique and the derivation.","Url":"https://github.com/dotnet/machinelearning/issues/1732","RelatedDescription":"Closed issue \"Add detailed XML Docs for Permutation Feature Importance\" (#1732)"},{"Id":"384639013","IsPullRequest":true,"CreatedAt":"2018-11-27T23:03:44","Actor":"rogancarr","Number":"1735","RawContent":null,"Title":"Add Permutation Feature Importance for Binary Classification","State":"closed","Body":"This PR adds support for `PermutationFeatureImportance` for binary classifiers, and tests to verify that PFI for binary classification works.\r\n\r\nFixes #1734 ","Url":"https://github.com/dotnet/machinelearning/pull/1735","RelatedDescription":"Closed or merged PR \"Add Permutation Feature Importance for Binary Classification\" (#1735)"},{"Id":"384638106","IsPullRequest":false,"CreatedAt":"2018-11-27T23:03:44","Actor":"rogancarr","Number":"1734","RawContent":null,"Title":"Add Permutation Feature Importance for Binary Classification Tasks","State":"closed","Body":"The `PermutationFeatureImportance` currently only supports Regression. We also need to add support for Binary Classification.","Url":"https://github.com/dotnet/machinelearning/issues/1734","RelatedDescription":"Closed issue \"Add Permutation Feature Importance for Binary Classification Tasks\" (#1734)"},{"Id":"385004741","IsPullRequest":true,"CreatedAt":"2018-11-27T22:18:45","Actor":"vaeksare","Number":"1744","RawContent":null,"Title":"Fix for DNN Image Featurizer copying models on incremental builds","State":"closed","Body":"Fixes #1743 \r\n","Url":"https://github.com/dotnet/machinelearning/pull/1744","RelatedDescription":"Closed or merged PR \"Fix for DNN Image Featurizer copying models on incremental builds\" (#1744)"},{"Id":"385003505","IsPullRequest":false,"CreatedAt":"2018-11-27T22:18:45","Actor":"vaeksare","Number":"1743","RawContent":null,"Title":"DnnImageFeaturizer copies models on incremental builds","State":"closed","Body":"","Url":"https://github.com/dotnet/machinelearning/issues/1743","RelatedDescription":"Closed issue \"DnnImageFeaturizer copies models on incremental builds\" (#1743)"},{"Id":"384967060","IsPullRequest":true,"CreatedAt":"2018-11-27T20:47:30","Actor":"vaeksare","Number":"1742","RawContent":null,"Title":"Fixes the build break introduced by the DNNImageFeaturizer PR","State":"closed","Body":"Corrects the location of the package assets download to fix the build break. Fixes #1741 \r\n","Url":"https://github.com/dotnet/machinelearning/pull/1742","RelatedDescription":"Closed or merged PR \"Fixes the build break introduced by the DNNImageFeaturizer PR\" (#1742)"},{"Id":"384966647","IsPullRequest":false,"CreatedAt":"2018-11-27T20:47:30","Actor":"vaeksare","Number":"1741","RawContent":null,"Title":"Build break caused by DnnImageFeaturizer PR (#1447)","State":"closed","Body":"","Url":"https://github.com/dotnet/machinelearning/issues/1741","RelatedDescription":"Closed issue \"Build break caused by DnnImageFeaturizer PR (#1447)\" (#1741)"},{"Id":"384539633","IsPullRequest":true,"CreatedAt":"2018-11-27T20:25:19","Actor":"wschin","Number":"1724","RawContent":null,"Title":"Make CpuMath not depending on ML.Core again","State":"closed","Body":"Fixes #1688.\r\n\r\n`CpuMath` project now includes `Contract.cs` in `ML.Core`. The file `Contract.cs` contains some if-else macros for distinguishing the part for general ML.NET (namespace: `Microsoft.ML`) from the part for `CpuMath`(namespace: `Microsoft.ML.Runtime.Internal.CpuMath.Core`). The `BestFriendAttribute` in `ML.Core` (namespace: Microsoft.ML) and `CpuMath` (namespace: `Microsoft.ML.Runtime.Internal.CpuMath.Core`) follow the same pattern for the same reason. `BestFriendAnalyzer` is also modified to support the two variants of `BestFriend` attributes.\r\n\r\nBesides, we move `PublicKey` into another file, `PublicKey.cs,` to avoid including `AssemblyInfo.cs` twice in CpuMath project.","Url":"https://github.com/dotnet/machinelearning/pull/1724","RelatedDescription":"Closed or merged PR \"Make CpuMath not depending on ML.Core again\" (#1724)"},{"Id":"384959984","IsPullRequest":true,"CreatedAt":"2018-11-27T19:54:38","Actor":"Thomas-S-B","Number":"1740","RawContent":null,"Title":"Simplified null check","State":"open","Body":"Simplified null check to leaner code.","Url":"https://github.com/dotnet/machinelearning/pull/1740","RelatedDescription":"Open PR \"Simplified null check\" (#1740)"},{"Id":"384953118","IsPullRequest":true,"CreatedAt":"2018-11-27T19:35:48","Actor":"najeeb-kazmi","Number":"1739","RawContent":null,"Title":"Public API for KMeansPredictor","State":"open","Body":"Fixes #1699 ","Url":"https://github.com/dotnet/machinelearning/pull/1739","RelatedDescription":"Open PR \"Public API for KMeansPredictor\" (#1739)"},{"Id":"384923074","IsPullRequest":false,"CreatedAt":"2018-11-27T18:13:22","Actor":"yaeldekel","Number":"1738","RawContent":null,"Title":"GenerateCodeCommand generates scoring code that uses old APIs","State":"open","Body":"The command should be updated to use the new API.","Url":"https://github.com/dotnet/machinelearning/issues/1738","RelatedDescription":"Open issue \"GenerateCodeCommand generates scoring code that uses old APIs\" (#1738)"},{"Id":"384846639","IsPullRequest":false,"CreatedAt":"2018-11-27T15:21:39","Actor":"Lanayx","Number":"1737","RawContent":null,"Title":"F# api issues","State":"open","Body":"Hi, wanted to point out the generic problems of \"new\" api from fsharp perspective.\r\nFirst of all, what is really missing is the Pipeline itself, instead we see is context, set of objects and extensions.\r\n\r\nExpected to see:\r\n```\r\ndata\r\n|> Clean Cleaners.RemoveRow\r\n|> Normalize Normalizers.Median\r\n|> Split Splitters.Random\r\n|> Train Learners.BoostedDecisionTree\r\n|> CrossValidate\r\n|> Evaluate\r\n```\r\n\r\nSecondly, as most of logic is implemented as extension methods on interfaces, in fsharp we need to to unsafe double cast sometimes:\r\n```\r\nlet dynamicPipeline =\r\n        mlContext.Transforms.Categorical.OneHotEncoding(\"CategoricalFeatures\", \"CategoricalOneHot\")\r\n        :> IEstimator<CategoricalTransform>\r\n        :?> IEstimator<ITransformer>\r\n```\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/1737","RelatedDescription":"Open issue \"F# api issues\" (#1737)"},{"Id":"384698416","IsPullRequest":false,"CreatedAt":"2018-11-27T09:27:35","Actor":"MichalStrehovsky","Number":"1736","RawContent":null,"Title":"Use of Reflection.Emit in ML.NET","State":"open","Body":"Can ML.NET be used on platforms that don't support Reflection.Emit, such as Windows UWP or Xamarin iOS?\r\n\r\nI'm helping a customer get ML.NET running on UWP, but seeing there are code paths that might end up using Reflection.Emit worry me that I'm just wasting time.","Url":"https://github.com/dotnet/machinelearning/issues/1736","RelatedDescription":"Open issue \"Use of Reflection.Emit in ML.NET\" (#1736)"},{"Id":"384574100","IsPullRequest":false,"CreatedAt":"2018-11-27T00:57:11","Actor":"gilnahmias","Number":"1729","RawContent":null,"Title":"Add Random Forest support","State":"open","Body":"To ease the transition from Azure ML Studio to ML.NET, please add an equivalent of https://docs.microsoft.com/en-us/azure/machine-learning/studio-module-reference/multiclass-decision-forest to ML.NET","Url":"https://github.com/dotnet/machinelearning/issues/1729","RelatedDescription":"Open issue \"Add Random Forest support\" (#1729)"},{"Id":"384456255","IsPullRequest":true,"CreatedAt":"2018-11-26T23:24:28","Actor":"sfilipi","Number":"1722","RawContent":null,"Title":"Remove math net numeric","State":"closed","Body":"Fixes #1720 by removing the std calcs that make use of Math.Net numeric. \r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1722","RelatedDescription":"Closed or merged PR \"Remove math net numeric\" (#1722)"},{"Id":"384446595","IsPullRequest":false,"CreatedAt":"2018-11-26T23:24:28","Actor":"sfilipi","Number":"1720","RawContent":null,"Title":"Remove the dependency on Math.Net numeric","State":"closed","Body":"For the training statistics of Logistic regression, and specifically the (STD calculation)https://github.com/dotnet/machinelearning/blob/master/src/Microsoft.ML.StandardLearners/Standard/LogisticRegression/LogisticRegression.cs#L440] we have two implementations: one in the Hal Learners project, that gets packaged in the HalLearners nuget, and the other on the StandardLearners project, that gets packaged in the main Microsoft.ML package. \r\n\r\nRemove the implementation in the StandartLearners package, we will go ahead with just the MKL implementation offer. ","Url":"https://github.com/dotnet/machinelearning/issues/1720","RelatedDescription":"Closed issue \"Remove the dependency on Math.Net numeric\" (#1720)"},{"Id":"384548223","IsPullRequest":false,"CreatedAt":"2018-11-26T23:03:01","Actor":"sfilipi","Number":"1726","RawContent":null,"Title":"Improve test failure message for EntryPointSDCARegression","State":"open","Body":"Related to #1471\r\nSome of the tests, like: Microsoft.ML.Runtime.RunTests.TestEntryPoints.EntryPointSDCARegression\r\nfail intermittnely in the Mac builds, and the failure message is not helpful at all, it looks like this:\r\n\r\nAssert failed: longIdx=449, invariants.Length=449\r\nExpected: True\r\nActual: False\r\n\r\n\r\nImprove the error message of those types of tests. \r\n\r\nStack trace: \r\n\r\n   at Microsoft.ML.Runtime.Internal.Internallearn.Test.GlobalBase.AssertHandler(String msg, IExceptionContext ectx) in /Users/vsts/agent/2.142.1/work/1/s/test/Microsoft.ML.TestFramework/GlobalBase.cs:line 70\r\n   at Microsoft.ML.Runtime.Contracts.DbgFailCore(String msg, IExceptionContext ctx) in /Users/vsts/agent/2.142.1/work/1/s/src/Microsoft.ML.Core/Utilities/Contracts.cs:line 754\r\n   at Microsoft.ML.Runtime.Contracts.DbgFail(String msg) in /Users/vsts/agent/2.142.1/work/1/s/src/Microsoft.ML.Core/Utilities/Contracts.cs:line 767\r\n   at Microsoft.ML.Runtime.Contracts.Assert(Boolean f, String msg) in /Users/vsts/agent/2.142.1/work/1/s/src/Microsoft.ML.Core/Utilities/Contracts.cs:line 825\r\n   at Microsoft.ML.Trainers.SdcaTrainerBase`3.TrainCore(IChannel ch, RoleMappedData data, LinearPredictor predictor, Int32 weightSetCount) in /Users/vsts/agent/2.142.1/work/1/s/src/Microsoft.ML.StandardLearners/Standard/SdcaBinary.cs:line 541\r\n   at Microsoft.ML.Runtime.Learners.StochasticTrainerBase`2.TrainModelCore(TrainContext context) in /Users/vsts/agent/2.142.1/work/1/s/src/Microsoft.ML.StandardLearners/Standard/StochasticTrainerBase.cs:line 42\r\n   at Microsoft.ML.Runtime.Training.TrainerEstimatorBase`2.Microsoft.ML.Runtime.ITrainer<TModel>.Train(TrainContext context) in /Users/vsts/agent/2.142.1/work/1/s/src/Microsoft.ML.Data/Training/TrainerEstimatorBase.cs:line 94\r\n   at Microsoft.ML.Runtime.Training.TrainerEstimatorBase`2.Microsoft.ML.Runtime.ITrainer.Train(TrainContext context) in /Users/vsts/agent/2.142.1/work/1/s/src/Microsoft.ML.Data/Training/TrainerEstimatorBase.cs:line 161\r\n   at Microsoft.ML.Runtime.Data.TrainUtils.TrainCore(IHostEnvironment env, IChannel ch, RoleMappedData data, ITrainer trainer, RoleMappedData validData, IComponentFactory`1 calibrator, Int32 maxCalibrationExamples, Nullable`1 cacheData, IPredictor inputPredictor, RoleMappedData testData) in /Users/vsts/agent/2.142.1/work/1/s/src/Microsoft.ML.Data/Commands/TrainCommand.cs:line 278\r\n   at Microsoft.ML.Runtime.Data.TrainUtils.Train(IHostEnvironment env, IChannel ch, RoleMappedData data, ITrainer trainer, IComponentFactory`1 calibrator, Int32 maxCalibrationExamples) in /Users/vsts/agent/2.142.1/work/1/s/src/Microsoft.ML.Data/Commands/TrainCommand.cs:line 247\r\n   at Microsoft.ML.Runtime.EntryPoints.LearnerEntryPointsUtils.Train[TArg,TOut](IHost host, TArg input, Func`1 createTrainer, Func`1 getLabel, Func`1 getWeight, Func`1 getGroup, Func`1 getName, Func`1 getCustom, ICalibratorTrainerFactory calibrator, Int32 maxCalibrationExamples) in /Users/vsts/agent/2.142.1/work/1/s/src/Microsoft.ML.Data/EntryPoints/InputBase.cs:line 190\r\n   at Microsoft.ML.Trainers.Sdca.TrainRegression(IHostEnvironment env, Arguments input) in /Users/vsts/agent/2.142.1/work/1/s/src/Microsoft.ML.StandardLearners/Standard/SdcaRegression.cs:line 189","Url":"https://github.com/dotnet/machinelearning/issues/1726","RelatedDescription":"Open issue \"Improve test failure message for EntryPointSDCARegression\" (#1726)"},{"Id":"384543195","IsPullRequest":false,"CreatedAt":"2018-11-26T22:45:01","Actor":"shmoradims","Number":"1725","RawContent":null,"Title":"Docs rendered incorrectly","State":"open","Body":"These pages don't have correct docs rendered:\r\nhttps://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.transforms.selectfeatures.countselect?view=ml-dotnet\r\nhttps://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.transforms.selectfeatures.mutualinformationselect?view=ml-dotnet\r\n\r\nIt's rendering like this:\r\n![image](https://user-images.githubusercontent.com/15950225/49046677-c3a53d80-f189-11e8-8218-d42580a46da7.png)\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/1725","RelatedDescription":"Open issue \"Docs rendered incorrectly\" (#1725)"},{"Id":"384450093","IsPullRequest":false,"CreatedAt":"2018-11-26T18:11:46","Actor":"DevLob-zz","Number":"1721","RawContent":null,"Title":"StochasticDualCoordinateAscentClassifier issue when x86 (32 bits)","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**:\r\nWindows 10\r\n- **.NET Version (eg., dotnet --info)**: \r\n4.6.1\r\n### Issue\r\n\r\n- **What did you do?**\r\ntry to use StochasticDualCoordinateAscentClassifier as classifier on My ML application\r\n- **What happened?**\r\ni ran it through 86x and through the following exception\r\n\r\n> Managed Debugging Assistant 'PInvokeStackImbalance' \r\n  Message=Managed Debugging Assistant 'PInvokeStackImbalance' : 'A call to PInvoke function 'Microsoft.ML.CpuMath!Microsoft.ML.Runtime.Internal.CpuMath.Thunk::SumSqU' has unbalanced the stack. This is likely because the managed PInvoke signature does not match the unmanaged target signature. Check that the calling convention and parameters of the PInvoke signature match the target unmanaged signature.'\r\n\r\n\r\n- **What did you expect?**\r\nit should work normally in 86x as it work fine with 64 and this exception occur only with 86x and i need to run it with 86 \r\n\r\n### Source code / logs\r\n`pipeline.Add(CollectionDataSource.Create(noramalTagsTrainingData));\r\n\r\n            pipeline.Add(new Dictionarizer(\"Label\"));\r\n            // Transform any text feature to numeric values\r\n            pipeline.Add(new CategoricalOneHotVectorizer(\r\n               \"fontColor\",\r\n               \"tagText\",\r\n               \"firstWord\"\r\n               ));\r\n\r\npipeline.Add(new ColumnConcatenator(\r\n\"Features\",\r\n\"fontSize\",\r\n\"isBold\",\r\n\"isItalic\",\r\n\"isUnderLine\",\r\n\"containsDot\",\r\n\"containsQuestionMark\",\r\n\"isAllCaps\",\r\n\"tagText\",\r\n\"firstWord\"\r\n));\r\npipeline.Add(new StochasticDualCoordinateAscentClassifier\r\n            {\r\n                MaxIterations = 100,\r\n                NumThreads = 7,\r\n                LossFunction = new SmoothedHingeLossSDCAClassificationLossFunction()\r\n            });\r\npipeline.Add(new PredictedLabelColumnOriginalValueConverter() { PredictedLabelColumn = \"PredictedLabel\" });\r\n\r\n // The pipeline is trained on the dataset that has been loaded and transformed.\r\n            var model = pipeline.Train<NormalTagsModelFeatures, NormalTagsPrediction>();`\r\n`\r\n\r\nit through the exception at last line within only 86x\r\n\r\nany help please\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/1721","RelatedDescription":"Open issue \"StochasticDualCoordinateAscentClassifier issue when x86 (32 bits)\" (#1721)"},{"Id":"384150863","IsPullRequest":false,"CreatedAt":"2018-11-26T02:25:50","Actor":"CESARDELATORRE","Number":"1718","RawContent":null,"Title":"Need PredictionFunction to provide object-pooling or to be thread-safe","State":"open","Body":"This issue is suggesting an enhancement since the current approaches/workarounds have both drawbacks, meaning we're not getting the scalability and performace as good as it could be in multithreaded scenarios like ASP.NET Core web apps or Web API services.\r\n\r\n**Context:**\r\nIn multiple scenarios, but especially in ASP.NET Core web apps, the **model-object (ITransformer)** and the **prediction function (PredictionFunction) object** should be re-used because they are \"expensive\" objects when initializing and will impact when having many concurrent users. \r\n\r\nIn the case of the model-object (ITransformer), it is a thread-safe object, so the model-object loaded from the .ZIP file can be registered as singleton. That way it'll be re-used by any thread or Http request in the ASP.NET Core app. See this code as an example: https://github.com/dotnet/machinelearning-samples/blob/master/samples/csharp/end-to-end-apps/Regression-SalesForecast/src/eShopDashboard/Startup.cs#L53\r\n\r\n**Main issue with the Prediction Function:**\r\nThe Prediction function is also \"expensive\" as it takes significant milliseconds when creating the prediction-function object from the model-object with the `model.MakePredictionFunction()` method. \r\nIdeally, because it is \"expensive\", it should be re-used across executions in the same app. But since it is not thread-safe, the current options in an ASP.NET Core web app are the following:\r\n\r\n**- OPTION 1:** Register the PredictionFunction object as **Scoped** (`AddScoped()`) for its DI/IoC object lifetime, as in this code:\r\nhttps://github.com/dotnet/machinelearning-samples/blob/master/samples/csharp/end-to-end-apps/Regression-SalesForecast/src/eShopDashboard/Startup.cs#L61\r\n\r\nBut, the problem with this approach is that in many of the cases you don't get much benefit unless within the same Http request you make multiple calls to the .Predict() method. The point is that since the Scope lifetime is only re-used within a single Http request, for most of the Http requests it'll need to call the model.MakePredictionFunction() method.\r\n\r\nThe only way to share an object across Http requests in .NET Core DI/IoC is with singleton, but that requires the object to be thread-safe.\r\n\r\nThe possible service/object lifetimes in .NET Core IoC/DI are:\r\n- Singleton (shared across all threads)\r\n- Transient (per object call/new)\r\n- Scoped (Per Http request of object scope)\r\n\r\nSee the available object lifetimes here:\r\nhttps://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection?view=aspnetcore-2.1#service-lifetimes\r\nhttps://blogs.msdn.microsoft.com/cesardelatorre/2017/01/26/comparing-asp-net-core-ioc-service-life-times-and-autofac-ioc-instance-scopes/ (Autofac does support Thread Scope, though..)\r\n\r\n**- OPTION 2:** Register the PredictionFunction object as **Singleton** (`AddSingleton()`) for its DI/IoC object lifetime, as in this code (Commented line):\r\nhttps://github.com/dotnet/machinelearning-samples/blob/master/samples/csharp/end-to-end-apps/Regression-SalesForecast/src/eShopDashboard/Startup.cs#L60\r\n\r\n**Benefits:** If you register the prediction-function object as Singleton for its ASP.NET Core DI/IoC object lifetime, since it is Singleton, any new Http request (except the first Http request since the app started) will just use the prediction function by calling the `Predict()` method. Therefore the performance of a single Http request would be significantly better. \r\n\r\n**Problem:** However, the issue with this approach is that since the prediction function is not thread-safe, you need to use mechanisms like a critical section to lock the prediction function object to be used by a single thread when executing the `Predict()` method, like in this code (Commented line):\r\nhttps://github.com/dotnet/machinelearning-samples/blob/master/samples/csharp/end-to-end-apps/Regression-SalesForecast/src/eShopDashboard/Controllers/CountrySalesForecastController.cs#L57 \r\n\r\nThe issue with this approach is that since you are limiting the use of \"Predict()\" to a single thread, that will be a bottleneck when scaling. In the cases when you could have many concurrent Http requests and many of them trying to run the Predict() method, the scalability won't be as good as it could be because we're limiting that code execution to a single thread able to run the Predict() method. \r\n\r\nBasically, with this approach you might significantly limiting the scalability of the app (in regards the model execution/scoring) across threads when having many Http requests.\r\n\r\n**Workarounds:** Currently, use any of the two mentioned methods, being aware of the handicaps from each:\r\n- PredictionFunction as Scoped object\r\n- Predictionfunction as Singleton but using critical section when running \"Predict()\"\r\n\r\n**Long term solutions:**\r\nI see two possible solutions:\r\n\r\n1. Create an object pooling of \"prediction function objects\". That way, most Http requests won't need to call the \"expensive\" `.CreatePredictionFunction()` method while it would be scalable since many threads could be using the multiple objects available in the object pooling.\r\n\r\n2. Make the prediction Function thread-safe. If the prediction-function was thread-safe while scalable enough, it could be simply registered as Singleton in the DI/IoC system in ASP.NET Core without needing to use a critical section or comparable approaches.\r\n\r\nIs there any other possible approach available?\r\n\r\nOnce these scenarios are further discussed in this thread or in our API reviews, I'll document the current possible approaches when consuming/running an ML.NET morel in an ASP.NET Core web app or Web API service.\r\n\r\nRelated issues:\r\nhttps://github.com/dotnet/machinelearning/issues/421 ","Url":"https://github.com/dotnet/machinelearning/issues/1718","RelatedDescription":"Open issue \"Need PredictionFunction to provide object-pooling or to be thread-safe\" (#1718)"},{"Id":"384069162","IsPullRequest":true,"CreatedAt":"2018-11-25T11:10:45","Actor":"jignparm","Number":"1717","RawContent":null,"Title":"Update to use OnnxRuntime library instead of Sonoma","State":"open","Body":"Fixes #1272.\r\nFixes #1228.\r\nFixes #1514\r\n\r\nReplaces the Microsoft.ML.Scoring library with the new Microsoft.ML.OnnxRuntime library.\r\n\r\nUpgraded runtime to Onnx 1.3, with isNan operator.\r\n\r\nDescriptive error messages instead of SEH exception.\r\n\r\nXML documentation for important classes and methods.\r\n\r\nAdds a full end-to-end example for users to start with.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1717","RelatedDescription":"Open PR \"Update to use OnnxRuntime library instead of Sonoma\" (#1717)"}],"ResultType":"GitHubIssue"}},"RunOn":"2018-11-28T05:31:13.105508Z","RunDurationInMilliseconds":1285}