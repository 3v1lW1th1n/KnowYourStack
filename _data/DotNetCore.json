{"Data":{"Blog":{"FeedItems":[{"Title":".NET Framework October 2019 Security and Quality Rollup","PublishedOn":"2019-10-08T19:10:44+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"Today, we are releasing the October 2019 Security and Quality Rollup and Cumulative Updates for .NET Framework.\nSecurity\nNo new security fixes. See September 2019 Security and Quality Rollup for the...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-october-2019-security-and-quality-rollup/","RawContent":null},{"Title":"Introducing .NET Core Windows Forms Designer Preview 1","PublishedOn":"2019-09-30T21:00:10+00:00","CommentsCount":71,"FacebookCount":0,"Summary":"Introducing .NET Core Windows Forms Designer Preview 1\nWe just released a GA version of .NET Core 3.0 that includes support for Windows Forms and WPF. And along with that release we&#8217;re happy to...","Href":"https://devblogs.microsoft.com/dotnet/introducing-net-core-windows-forms-designer-preview-1/","RawContent":null},{"Title":".NET Framework September 2019 Preview of Quality Rollup","PublishedOn":"2019-09-26T19:36:06+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We have released the September 2019 Preview of Quality Rollup and Cumulative Updates for .NET Framework for Windows 10\nQuality and Reliability\nThis release contains the following quality and...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-september-2019-preview-of-quality-rollup/","RawContent":null},{"Title":"ML.NET and Model Builder at .NET Conf 2019 (Machine Learning for .NET)","PublishedOn":"2019-09-24T19:48:06+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are excited today to announce updates to Model Builder and improvements in ML.NET. You can learn more in the “What’s new in ML.NET?.” session at .NET Conf.\nML.NET is an open-source and...","Href":"https://devblogs.microsoft.com/dotnet/ml-net-and-model-builder-at-net-conf-2019-machine-learning-for-net/","RawContent":null},{"Title":"Joining the .NET Foundation Maturity Model Pilot","PublishedOn":"2019-09-23T16:59:08+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Joining the .NET Foundation Maturity Model Pilot\nThe .NET Foundation is starting a new pilot program to increase quality and user confidence in open source projects, using a new project maturity...","Href":"https://devblogs.microsoft.com/dotnet/joining-the-net-foundation-maturity-model-pilot/","RawContent":null},{"Title":"Announcing Entity Framework Core 3.0 and Entity Framework 6.3 General Availability","PublishedOn":"2019-09-23T16:20:13+00:00","CommentsCount":43,"FacebookCount":0,"Summary":"We are extremely excited to announce the general availability of EF Core 3.0and EF 6.3 on nuget.org.\nThe final versions of .NET Core 3.0 and ASP.NET Core 3.0 are also available now.\nHow to get EF Core...","Href":"https://devblogs.microsoft.com/dotnet/announcing-ef-core-3-0-and-ef-6-3-general-availability/","RawContent":null},{"Title":"Announcing F# 4.7","PublishedOn":"2019-09-23T16:06:23+00:00","CommentsCount":13,"FacebookCount":0,"Summary":"We’re excited to announce general availability of F# 4.7 in conjunction with the .NET Core 3.0 release! In this post, I’ll show you how to get started, explain everything in F# 4.7 and give you a...","Href":"https://devblogs.microsoft.com/dotnet/announcing-f-4-7/","RawContent":null},{"Title":"Announcing .NET Core 3.0","PublishedOn":"2019-09-23T16:00:29+00:00","CommentsCount":115,"FacebookCount":0,"Summary":"Announcing .NET Core 3.0\nWe’re excited to announce the release of .NET Core 3.0. It includes many improvements, including adding Windows Forms and WPF, adding new JSON APIs, support for ARM64 and...","Href":"https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0/","RawContent":null},{"Title":"Release Candidate builds of Entity Framework Core 3.0 and Entity Framework 6.3 are now available","PublishedOn":"2019-09-16T21:47:32+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"We previously said that preview 9 would be your last chance to test EF Core 3.0 and EF 6.3 before general availability. But it turns out that we made enough improvements to our libraries and across...","Href":"https://devblogs.microsoft.com/dotnet/release-candidate-builds-of-entity-framework-core-3-0-and-entity-framework-6-3-are-now-available/","RawContent":null},{"Title":"Announcing .NET Core 3.0 Release Candidate 1","PublishedOn":"2019-09-16T18:45:09+00:00","CommentsCount":29,"FacebookCount":0,"Summary":"Today, we&#8217;re announcing .NET Core 3.0 Release Candidate 1. Just like with Preview 9, we&#8217;ve focused on polishing .NET Core 3.0 for a final release. We are now getting very, very close. We...","Href":"https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0-release-candidate-1/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"10537155256","Type":"PullRequestEvent","CreatedAt":"2019-10-01T20:30:21","Actor":"gep13","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/150","RelatedDescription":"Opened pull request \"Add new Cake Maintainer\" (#150) at dotnet/foundation","RelatedBody":""},{"Id":"10530380699","Type":"PullRequestEvent","CreatedAt":"2019-10-01T05:27:58","Actor":"JimBobSquarePants","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/149","RelatedDescription":"Opened pull request \"Add ImageSharp\" (#149) at dotnet/foundation","RelatedBody":""},{"Id":"10123005051","Type":"IssuesEvent","CreatedAt":"2019-07-31T19:23:23","Actor":"MeikTranel","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/issues/148","RelatedDescription":"Opened issue \"Clarify guidelines in regards to Options and Requirements\" (#148) at dotnet/foundation","RelatedBody":"I'd be interested in which part of the project submission guidelines is optional and which are deal breaker requirements.\r\n\r\n- Is the Role Matrix laid out an absolute or (as can be read between the lines) just a preset, which may be subject to individual projects needs?\r\n- Is it a strong requirement that the project uses the contributor covenant CoC?"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"10604698685","Type":"IssuesEvent","CreatedAt":"2019-10-10T18:45:56","Actor":"TaraOverfield","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/129","RelatedDescription":"Opened issue \"October 2019 .NET Updates\" (#129) at dotnet/announcements","RelatedBody":"The following .NET updates were released on October 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework October 2019 Security and Quality Rollup](https://devblogs.microsoft.com/dotnet/net-framework-october-2019-security-and-quality-rollup/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)"},{"Id":"10603083871","Type":"IssuesEvent","CreatedAt":"2019-10-10T15:19:56","Actor":"MichaelSimons","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/128","RelatedDescription":"Closed issue \"Docker Stop return status Exited \"(3221225786)\"\" (#128) at dotnet/announcements","RelatedBody":"Hi\r\nI'm investigating a issue regarding official MCR images on a Win2019 server with Docker EE engine 19.03.2.\r\n\r\nThe images that I'm unsing are:\r\nmcr.microsoft.com/windows/servercore:1809\r\nmcr.microsoft.com/dotnet/framework/aspnet:4.8\r\n\r\nStopping containers based on these images (\"docker stop\" command) I'm getting: \r\n\"Exited (3221225786)\"\r\n\r\nOn linux a stop command normally return: \"Exited (137)\"\r\n\r\nIs it a normal behaviour? What's means 3221225786?\r\n\r\nThanks for any support\r\n\r\nCarlo"},{"Id":"10602877059","Type":"IssuesEvent","CreatedAt":"2019-10-10T14:58:26","Actor":"carloreggiani","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/128","RelatedDescription":"Opened issue \"Docker Stop return status Exited \"(3221225786)\"\" (#128) at dotnet/announcements","RelatedBody":"Hi\r\nI'm investigating a issue regarding official MCR images on a Win2019 server with Docker EE engine 19.03.2.\r\n\r\nThe images that I'm unsing are:\r\nmcr.microsoft.com/windows/servercore:1809\r\nmcr.microsoft.com/dotnet/framework/aspnet:4.8\r\n\r\nStopping containers based on these images (\"docker stop\" command) I'm getting: \r\n\"Exited (3221225786)\"\r\n\r\nOn linux a stop command normally return: \"Exited (137)\"\r\n\r\nIs it a normal behaviour? What's means 3221225786?\r\n\r\nThanks for any support\r\n\r\nCarlo"},{"Id":"10587763637","Type":"IssuesEvent","CreatedAt":"2019-10-08T23:14:12","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/127","RelatedDescription":"Opened issue \"Consolidated repo names\" (#127) at dotnet/announcements","RelatedBody":"[ann]: https://github.com/dotnet/announcements/issues/119\r\n\r\nAs we announced earlier, we're [planning on consolidating][ann] some of the repositories in the dotnet org. While this is still work in progress, we'd like to give you an update on where we are.\r\n\r\nSo far, we've identified the following repos:\r\n\r\n* dotnet/**runtime**\r\n\t- Will contain [coreclr](https://github.com/dotnet/coreclr), [corefx](https://github.com/dotnet/corefx), [core-setup](https://github.com/dotnet/core-setup), [aspnet/Extensions](https://github.com/aspnet/Extensions),\r\n\tand some of [mono/mono](https://github.com/mono/mono)\r\n* [dotnet/**sdk**](https://github.com/dotnet/sdk)\r\n\t- Will contain [toolset](https://github.com/dotnet/toolset), [sdk](https://github.com/dotnet/sdk), [cli](https://github.com/dotnet/cli)\r\n* dotnet/**installer**\r\n\t- Renamed from [core-sdk](https://github.com/dotnet/core-sdk)\r\n* dotnet/**aspnetcore**\r\n\t- Moved from [aspnet/AspNetCore](https://github.com/aspnet/AspNetCore) and will also contain [aspnet/AspNetCore-Tooling](https://github.com/aspnet/AspNetCore-Tooling)\r\n* dotnet/**efcore**\r\n\t- Moved from [aspnet/EntityFrameworkCore](https://github.com/aspnet/EntityFrameworkCore)\r\n* [dotnet/**winforms**](https://github.com/dotnet/winforms)\r\n\t- Unchanged, but listed for clarify\r\n* [dotnet/**wpf**](https://github.com/dotnet/wpf)\r\n\t- Unchanged, but listed for clarify\r\n\r\n### Name changes\r\n\r\nYou might notice that we changed our mind on naming from our [earlier announcement][ann]. Based on your feedback, we decided to go with **dotnet/runtime** instead of **dotnet/platform** and **dotnet/sdk** instead of **dotnet/cli**.\r\n\r\nSeveral people pointed out that the previous names weren't relatable to how we talk about the product, for example on download pages. So, we decided to match the product distributions as the primary design point for the new names. We generally refer to the bits you need to run your app as *the runtime* and the bits you need to build apps as *the SDK*. This also matches the naming chosen by other platforms.\r\n\r\n### New repos can't be used for .NET Core 3.x or earlier\r\n\r\nThe consolidated repositories are going to be about .NET 5 and going forward. It will not be possible to build .NET Core 3.1 or earlier from these repositories. As such, only the master branch from each of the repositories will be brought forward. There will be no porting of the individual release branches in the source repositories.\r\n\r\n### Personal names and email addresses\r\n\r\nSince we're planning on rebasing the history in the merged repositories, we can map your name and email address to new values as well. We primarily do this to support our friends in the LGBTQ+ community who have changed their names to reflect their identities. However, anybody is welcome to use this to change their email and name.\r\n\r\nWhatever your reason might be: we value your contributions and we hope this small gesture makes your life a little bit better. So if you changed your name/email – or simply prefer us to use different values – please [submit a request](mailto:dotnet@microsoft.com&subject=.NET%20repo%20consolidation%3A%20request%20for%20name%20change&body=Hey%2C%20%0A%0AI%E2%80%99d%20like%20to%20change%20my%20email%2Fdisplay%20name%20in%20the%20consolidated%20repo%20from%20%0A%0A%20%20%20%20%20%20%20%20My%20Old%20Name%20%3Cold.me%40example.org%3E%20%0A%0Ato%20%0A%0A%20%20%20%20%20%20%20%20My%20New%20Name%20%3Cnew.me%40example.org%3E%20%0A%0AThanks%21%20%0A).\r\n\r\n### More is coming\r\n\r\nWe'll share more updates in the upcoming months. Please let us know of any concerns that we haven't addressed yet!\r\n\r\n### Discussion\r\n\r\nTo discuss these plans, please comment on the corresponding issue at https://github.com/dotnet/coreclr/issues/27096."},{"Id":"10587423911","Type":"IssuesEvent","CreatedAt":"2019-10-08T22:06:08","Actor":"MichaelSimons","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/126","RelatedDescription":"Opened issue \"4.7.x .NET Framework SDK Docker images no longer published\" (#126) at dotnet/announcements","RelatedBody":"# 4.7.x .NET Framework SDK Docker images no longer published\r\n\r\nThe [4.7.x .NET Framework SDK Docker images](https://hub.docker.com/_/microsoft-dotnet-framework-sdk) will no longer be published after Oct. 8, 2019.  The 4.8 image tags should be used as a replacement.\r\n\r\n## Discussion\r\n \r\nYou can share your thoughts on this change or see what others are saying at:\r\n \r\n* [microsoft/dotnet-framework-docker#428](https://github.com/microsoft/dotnet-framework-docker/issues/428)\r\n\r\n## Details\r\n\r\nAny references to the following SDK tags should be updated to reference `4.8` instead:\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.1`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.1-windowsservercore-ltsc2016`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.1-<yyyymmdd>-windowsservercore-ltsc2016`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.2`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-windowsservercore-ltsc2016`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-<yyyymmdd>-windowsservercore-ltsc2016`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-windowsservercore-1803`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-<yyyymmdd>-windowsservercore-1803`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-windowsservercore-ltsc2019`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-<yyyymmdd>-windowsservercore-ltsc2019`\r\n\r\nIf you haven't migrated to using images from [MCR](https://github.com/dotnet/announcements/issues/101) and are still using the .NET Framework repos on Docker Hub, you will need to update your tag references to MCR.  This is because the 4.8 images only exist on MCR.  These are the following Docker Hub tags that are affected and should be updated to reference the [4.8 tags at the MCR location](https://hub.docker.com/_/microsoft-dotnet-framework-sdk):\r\n* `microsoft/dotnet-framework:4.7.1-sdk`\r\n* `microsoft/dotnet-framework:4.7.1-sdk-windowsservercore-ltsc2016`\r\n* `microsoft/dotnet-framework:4.7.2-sdk`\r\n* `microsoft/dotnet-framework:4.7.2-sdk-windowsservercore-ltsc2016`\r\n* `microsoft/dotnet-framework:4.7.2-sdk-windowsservercore-1803`\r\n* `microsoft/dotnet-framework:4.7.2-sdk-windowsservercore-ltsc2019`"},{"Id":"10552065128","Type":"IssuesEvent","CreatedAt":"2019-10-03T14:30:16","Actor":"MichaelSimons","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/125","RelatedDescription":"Opened issue \"Alpine Docker images no longer include the tzdata package in 3.0\" (#125) at dotnet/announcements","RelatedBody":"# Alpine Docker images no longer include the tzdata package in 3.0\r\nBeginning with the 3.0 release, the `tzdata` package has been removed from all Alpine Docker images.\r\n\r\n## Discussion\r\nYou can share your thoughts on this change or see what others are saying at:\r\n\r\ndotnet/dotnet-docker#1366\r\n\r\n## Details\r\n* https://github.com/dotnet/dotnet-docker/pull/1312\r\n\r\n\r\nThis package was removed because it wasn't required for the main set of scenarios and to have consistency between the runtime-deps images across all Linux distros.  This package is still installed in the 2.x images for Alpine so this will be something to be aware of when migrating from 2.x to 3.0.\r\n\r\n\r\nYou may be impacted by this if you use any of the Alpine images and your code has a dependency on the `tzdata` package, such as using the `System.TimeZoneInfo` API.  In that case, you'll need to update your Dockerfile to explicitly install the package:\r\n```\r\nRUN apk add --no-cache tzdata\r\n```\r\n"},{"Id":"10486020433","Type":"IssuesEvent","CreatedAt":"2019-09-24T19:01:32","Actor":"MichaelSimons","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/124","RelatedDescription":"Opened issue \".NET Core `latest` Docker tags updated to 3.0\" (#124) at dotnet/announcements","RelatedBody":"# .NET Core `latest` Docker tags updated to 3.0\r\n \r\nThe `latest` tags for the [dotnet/core](https://hub.docker.com/_/microsoft-dotnet-core) repos have been updated to reference [.NET Core 3.0](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0/).\r\n \r\n## Discussion\r\n \r\nYou can share your thoughts on this change or see what others are saying at:\r\n \r\n* [dotnet/dotnet-docker#1337](https://github.com/dotnet/dotnet-docker/issues/1337)\r\n \r\n## Details\r\n \r\n* [dotnet-docker#1334](https://github.com/dotnet/dotnet-docker/pull/1334)\r\n \r\nThe `latest` tags for the [dotnet/core](https://hub.docker.com/_/microsoft-dotnet-core) repos are always intended to reference the latest supported version of .NET Core. At this time, the latest supported version is .NET Core 3.0.\r\n \r\nThe following Docker repos have been updated:\r\n \r\n* [dotnet/core/sdk](https://hub.docker.com/_/microsoft-dotnet-core-sdk)\r\n* [dotnet/core/aspnet](https://hub.docker.com/_/microsoft-dotnet-core-aspnet)\r\n* [dotnet/core/runtime](https://hub.docker.com/_/microsoft-dotnet-core-runtime)\r\n* [dotnet/core/runtime-deps](https://hub.docker.com/_/microsoft-dotnet-core-runtime-deps)\r\n* [dotnet/core/samples](https://hub.docker.com/_/microsoft-dotnet-core-samples)\r\n \r\nIt is recommended to use a more-specific tag than `latest` for anything other than casual development. Once you have an application that you believe will eventually go to production, you are recommended to use a tag like `3.0`. The [.NET Core Docker Samples](https://github.com/dotnet/dotnet-docker/tree/master/samples) contain examples of more specific usage such as the [.NET Core console sample](https://github.com/dotnet/dotnet-docker/blob/master/samples/dotnetapp/Dockerfile).\r\n"},{"Id":"10427072993","Type":"IssuesEvent","CreatedAt":"2019-09-16T19:03:54","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/123","RelatedDescription":"Opened issue \".NET Core 3.0 RC 1\" (#123) at dotnet/announcements","RelatedBody":".NET Core RC 1 released today. https://github.com/dotnet/core/issues/3380 has been opened for discussion. \r\n\r\n[Release Notes](https://github.com/dotnet/core/blob/master/release-notes/3.0/preview/3.0.0-rc1.md)\r\n[Download](https://github.com/dotnet/core/blob/master/release-notes/3.0/preview/3.0.0-rc1-download.md)\r\n\r\n**Blog posts**\r\n\r\n[.NET Core](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0-release-candidate-1/)\r\n[ASP.NET Core](https://devblogs.microsoft.com/aspnet/asp-net-core-and-blazor-updates-in-net-core-3-0-release-candidate-1/)\r\n\r\nPlease report any issues you find with 3.0.0 RC 1, either responding to this issue, creating a new issue or creating a new issue in one of the following repos:\r\n\r\n* [aspnet/AspNetCore](https://github.com/aspnet/AspNetCore) - for ASP.NET Core questions\r\n* [aspnet/EntityFrameworkCore](https://github.com/aspnet/EntityFrameworkCore) - for Entity Framework Core questions\r\n* [dotnet/cli](https://github.com/dotnet/cli/issues) - for CLI tools and questions\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues) - for API issues and questions\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues) - for runtime issues\r\n* [dotnet/core-setup](https://github.com/dotnet/core-setup/issues) - for installer issues\r\n* [dotnet/winforms](https://github.com/dotnet/winforms/issues) - for Winforms issues\r\n* [dotnet/wpf](https://github.com/dotnet/wpf/issues) - for WPF issues\r\n* [nuget/home](https://github.com/nuget/home/issues) - for NuGet questions and issues"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"10607462926","Type":"PullRequestEvent","CreatedAt":"2019-10-11T03:53:46","Actor":"sywhang","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/27140","RelatedDescription":"Opened pull request \"Do not create diagnostics server thread and pipe if EnableDiagnostics is set to 0\" (#27140) at dotnet/coreclr","RelatedBody":"*Description*\r\n\r\nThis fixes https://github.com/dotnet/coreclr/issues/27134. \r\n\r\nThe diagnostics server is a new runtime component that creates a dedicated thread and a socket/pipe for EventPipe and other various diagnostics runtime components to communicate with an external process (i.e. dotnet-trace, dotnet-dump, dotnet-counters, profiler attach, etc.). However, this cannot be turned off if a user does not want diagnostics and having a separate thread that sits idle at all times that cannot be disabled is not a desired behavior. The debugger already does this via `COMPlus_EnableDiagnostics` environment variable which is set to 1 by default, and gets turned off when it is set to 0. This change allows the same environment variable to be used for disabling the diagnostics server thread and pipe/socket creation. \r\n\r\n*Customer Impact*\r\n\r\nA customer who doesn't want/need diagnostics server thread can now turn it off via the `COMPlus_EnableDiagnostics` environment variable, just like how they can turn off the debugger with the same environment variable.\r\n\r\n*Regression?*\r\nYes from Core 2.2 -> 3.0 since diagnostics server was only introduced from 3.0.\r\n\r\n*Risk*\r\nLow. The change is very minimal."},{"Id":"10607429641","Type":"PullRequestEvent","CreatedAt":"2019-10-11T03:44:48","Actor":"tannergooding","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/25508","RelatedDescription":"Merged pull request \"Refactoring the ARM intrinsics to match API review and share code with x86\" (#25508) at dotnet/coreclr","RelatedBody":"This updates the ARM64 intrinsics to match the proposed layout from: https://github.com/dotnet/corefx/issues/37199.\r\n\r\nThis also updates the ARM64 intrinsics to share much of the importation logic and various data structures that were already created for x86.\r\n\r\nCurrently, this also removes many of the APIs that were exposed as part of the `Arm.AdvSimd` class, but I am working on updating those to match the above proposal as well.\r\n-- I don't think merging this should be blocked on that, but since this can't be merged until after master starts targeting .NET 5, I will try to get it completed before then."},{"Id":"10607423242","Type":"IssuesEvent","CreatedAt":"2019-10-11T03:42:57","Actor":"sywhang","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/27134","RelatedDescription":"Reopened issue \"Add a runtime configuration to disable diagnostics server\" (#27134) at dotnet/coreclr","RelatedBody":"Currently the diagnostics server is always created and there is no way of configuring the runtime to not do this. We should add an optional config switch that allows users to disable creation of the diagnostics server thread entirely. \r\n\r\ncc @noahfalk @josalem "},{"Id":"10607420433","Type":"PullRequestEvent","CreatedAt":"2019-10-11T03:42:12","Actor":"sywhang","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/27137","RelatedDescription":"Merged pull request \"Do not create diagnostics server thread and pipe if EnableDiagnostics is set to 0\" (#27137) at dotnet/coreclr","RelatedBody":"We already have the environment variable `COMPlus_EnableDiagnostics` that disables the debugger when it is set to 0. We should disable diagnostics server as well if this environment variable is set to 0. \r\n\r\nThis fixes https://github.com/dotnet/coreclr/issues/27134. \r\n"},{"Id":"10607420391","Type":"IssuesEvent","CreatedAt":"2019-10-11T03:42:12","Actor":"sywhang","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/27134","RelatedDescription":"Closed issue \"Add a runtime configuration to disable diagnostics server\" (#27134) at dotnet/coreclr","RelatedBody":"Currently the diagnostics server is always created and there is no way of configuring the runtime to not do this. We should add an optional config switch that allows users to disable creation of the diagnostics server thread entirely. \r\n\r\ncc @noahfalk @josalem "},{"Id":"10607409623","Type":"PullRequestEvent","CreatedAt":"2019-10-11T03:39:18","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/27136","RelatedDescription":"Merged pull request \"Remove unnecessary cleanup on diagnostics server thread during shutdown\" (#27136) at dotnet/coreclr","RelatedBody":"During shutdown, we are doing unnecessary cleanup of the process by cleaning up threads, etc when this could be done by the OS with the process exit. \r\n\r\nThis should fix https://github.com/dotnet/coreclr/issues/27128. \r\n\r\ncc @jkotas \r\n"},{"Id":"10607409590","Type":"IssuesEvent","CreatedAt":"2019-10-11T03:39:18","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/27128","RelatedDescription":"Closed issue \"Environment.Exit hanging in RemoteExecutor\" (#27128) at dotnet/coreclr","RelatedBody":"https://dev.azure.com/dnceng/public/_build/results?buildId=380511&view=ms.vss-test-web.build-test-results-tab&runId=11763518&paneView=debug&resultId=147963\r\n\r\nConfiguration: `netcoreapp-Windows_NT-Debug-x64-Windows.81.Amd64.Open`\r\n\r\n```\r\nSystem.Net.Tests.AuthenticationManagerTest.CustomTargetNameDictionary_ValidCollection\r\n\r\nTimed out at 10/7/2019 8:39:55 PM after 60000ms waiting for remote process.\\r\\n\\tProcess ID: 5404\\r\\n\\tHandle: 1096\\r\\n\\tName: dotnet\\r\\n\\tMainModule: C:\\\\dotnetbuild\\\\work\\\\ddad0c4a-3d2b-409b-b8b2-09e253a66230\\\\Payload\\\\dotnet.exe\\r\\n\\tStartTime: 10/7/2019 8:38:55 PM\\r\\n\\tTotalProcessorTime: 00:00:00.1875000\\r\\n\\tThreads:\\r\\n\\t\\tThread dotnet/corefx#1 (OS 0x152C) \\r\\n\\t\\t\\t[InlinedCallFrame] (System.Environment._Exit)\\r\\n\\t\\t\\t[InlinedCallFrame] (System.Environment._Exit)\\r\\n\\t\\t\\tSystem.Environment.Exit(Int32)\\r\\n\\t\\t\\tMicrosoft.DotNet.RemoteExecutor.Program.Main(System.String[])\\r\\n\\t\\t\\t[GCFrame]\\r\\n\\t\\t\\t[GCFrame]\\r\\n\\t\\tThread dotnet/corefx#2 (OS 0x1538) [Finalizer]\\r\\n\\t\\t\\t[DebuggerU2MCatchHandlerFrame]\\r\\n\\t\\tThread dotnet/corefx#3 (OS 0x1528) [Thread pool worker]\\r\\n\r\n   at Microsoft.DotNet.RemoteExecutor.RemoteInvokeHandle.Dispose(Boolean disposing) in /_/src/Microsoft.DotNet.RemoteExecutor/src/RemoteInvokeHandle.cs:line 131\r\n   at Microsoft.DotNet.RemoteExecutor.RemoteInvokeHandle.Dispose() in /_/src/Microsoft.DotNet.RemoteExecutor/src/RemoteInvokeHandle.cs:line 55\r\n   at System.Net.Tests.AuthenticationManagerTest.CustomTargetNameDictionary_ValidCollection() in /_/src/System.Net.Requests/tests/AuthenticationManagerTest.cs:line 93\r\n```\r\n\r\ncc @davidsh, @wfurt, @scalablecory, @eiriktsarpalis, @karelz\r\ncc @stephentoub for another hang"},{"Id":"10606929541","Type":"IssuesEvent","CreatedAt":"2019-10-11T01:33:08","Actor":"tannergooding","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/27139","RelatedDescription":"Opened issue \"Add tests for remaining ARM intrinsics\" (#27139) at dotnet/coreclr","RelatedBody":"https://github.com/dotnet/coreclr/pull/25508 did a large refactoring of the ARM intrinsic infrastructure.\r\n\r\nThere were a few APIs that are no longer exposed that should be and there were a few APIs (namely ArmBase) that didn't have tests added.\r\n\r\nThe PR was merged to unblock other work going on and this is just tracking tests being added for the APIs exposed that don't have them yet."},{"Id":"10606917110","Type":"PullRequestEvent","CreatedAt":"2019-10-11T01:29:43","Actor":"AustinWise","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/27138","RelatedDescription":"Opened pull request \"Fix assert when CORECLR_PROFILER is set but CORECLR_PROFILER_PATH is not\" (#27138) at dotnet/coreclr","RelatedBody":"The null DLL name is eventually passed to FakeCoCallDllGetClassObject which\r\nknowns how to look up the DLL name based on the CLSID specified by\r\nCORECLR_PROFILER."},{"Id":"10606837715","Type":"PullRequestEvent","CreatedAt":"2019-10-11T01:07:59","Actor":"sywhang","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/27137","RelatedDescription":"Opened pull request \"Do not create diagnostics server thread and pipe if EnableDiagnostics is set to 0\" (#27137) at dotnet/coreclr","RelatedBody":"We already have the environment variable `COMPlus_EnableDiagnostics` that disables the debugger when it is set to 0. We should disable EventPipe/DiagnosticsServer if this environment variable is set. \r\n\r\nThis fixes https://github.com/dotnet/coreclr/issues/27134. \r\n"},{"Id":"10606654742","Type":"PullRequestEvent","CreatedAt":"2019-10-11T00:17:33","Actor":"sywhang","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/27136","RelatedDescription":"Opened pull request \"Remove unnecessary cleanup on diagnostics server thread during shutdown\" (#27136) at dotnet/coreclr","RelatedBody":"During shutdown, we are doing unnecessary cleanup of the process by cleaning up threads, etc when this could be done by the OS with the process exit. \r\n\r\nThis should fix https://github.com/dotnet/coreclr/issues/27128. \r\n\r\ncc @jkotas \r\n"},{"Id":"10606627275","Type":"IssuesEvent","CreatedAt":"2019-10-11T00:10:05","Actor":"sywhang","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/27135","RelatedDescription":"Opened issue \"Consider cleaning up the diagnostics server handles immediately after creation\" (#27135) at dotnet/coreclr","RelatedBody":"From https://github.com/dotnet/coreclr/issues/27128#issuecomment-540829268:\r\n\r\n> Since the server thread handle is not really needed for anything, you may consider closing it immediately after CreateThread returns it and not keeping it around at all - but that is orthogonal to the shutdown fix.\r\n\r\n"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"10607557617","Type":"PullRequestEvent","CreatedAt":"2019-10-11T04:20:13","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/12871","RelatedDescription":"Opened pull request \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#12871) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191010.20\r\n- **Date Produced**: 10/11/2019 3:11 AM\r\n- **Commit**: 966989290a99db7e31867dabb1aa6dac6d045813\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.1.0-preview2.19510.20\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.1.0-preview2.19510.20\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.1.0-preview2.19510.20\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.1.0-preview2.19510.20\r\n  - **Microsoft.NETCore.App.Runtime.win-x64** -> 3.1.0-preview2.19510.20\r\n\r\n[marker]: <> (End:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n\r\n[marker]: <> (Begin:Coherency Updates)\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n- **System.Text.Json** -> 4.7.0-preview2.19510.10 (parent: Microsoft.NETCore.App.Runtime.win-x64)\r\n\r\n[marker]: <> (End:Coherency Updates)\r\n\r\n"},{"Id":"10607445370","Type":"PullRequestEvent","CreatedAt":"2019-10-11T03:48:59","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/pull/12866","RelatedDescription":"Closed pull request \"Merge release/2.1.8xx to release/2.2.2xx\" (#12866) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.1.8xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.8xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.1.8xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.8xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"10607286813","Type":"IssuesEvent","CreatedAt":"2019-10-11T03:07:17","Actor":"khteh","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/12870","RelatedDescription":"Opened issue \"error MSB6006: \"csc.dll\" exited with code 137\" (#12870) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n\r\n![Screenshot from 2019-10-11 10-54-24](https://user-images.githubusercontent.com/3871483/66621543-3e970b80-ec17-11e9-925d-7a2ac8db224f.png)\r\n\r\n## Expected  behavior\r\n\r\n\r\n## Actual behavior\r\n\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\n$ dn --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100\r\n Commit:    04339c3a26\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  19.04\r\n OS Platform: Linux\r\n RID:         ubuntu.19.04-x64\r\n Base Path:   /usr/share/dotnet-3.0.100/sdk/3.0.100/\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0\r\n  Commit:  7d57652f33\r\n\r\n.NET Core SDKs installed:\r\n  3.0.100 [/usr/share/dotnet-3.0.100/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.App 3.0.0 [/usr/share/dotnet-3.0.100/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.0.0 [/usr/share/dotnet-3.0.100/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n\r\n"},{"Id":"10606605901","Type":"PullRequestEvent","CreatedAt":"2019-10-11T00:04:34","Actor":"dotnet-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/12869","RelatedDescription":"Opened pull request \"Merge release/3.1.1xx to master\" (#12869) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/3.1.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.1.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.1.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.1.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"10606605431","Type":"PullRequestEvent","CreatedAt":"2019-10-11T00:04:26","Actor":"dotnet-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/12868","RelatedDescription":"Opened pull request \"Merge release/3.0.1xx to release/3.1.1xx\" (#12868) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/3.0.1xx into release/3.1.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-release/3.1.1xx\ngit reset --hard upstream/release/3.1.1xx\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-release/3.1.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"10606605050","Type":"PullRequestEvent","CreatedAt":"2019-10-11T00:04:20","Actor":"dotnet-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/12867","RelatedDescription":"Opened pull request \"Merge release/2.2.4xx to release/3.0.1xx\" (#12867) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.2.4xx into release/3.0.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.4xx-to-release/3.0.1xx\ngit reset --hard upstream/release/3.0.1xx\ngit merge upstream/release/2.2.4xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.4xx-to-release/3.0.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"10606603693","Type":"PullRequestEvent","CreatedAt":"2019-10-11T00:04:00","Actor":"dotnet-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/12866","RelatedDescription":"Opened pull request \"Merge release/2.1.8xx to release/2.2.2xx\" (#12866) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.1.8xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.8xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.1.8xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.8xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"10606602917","Type":"PullRequestEvent","CreatedAt":"2019-10-11T00:03:48","Actor":"dotnet-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/12865","RelatedDescription":"Opened pull request \"Merge release/2.1.5xx to release/2.2.1xx\" (#12865) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.1.5xx into release/2.2.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.5xx-to-release/2.2.1xx\ngit reset --hard upstream/release/2.2.1xx\ngit merge upstream/release/2.1.5xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.5xx-to-release/2.2.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"10602509036","Type":"IssuesEvent","CreatedAt":"2019-10-10T14:21:00","Actor":"Sumeetkumawat","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/1603","RelatedDescription":"Opened issue \"Issue while Referencing iOS native library to .net standard library\" (#1603) at dotnet/standard","RelatedBody":"I have three projects in my solution. I have added .net standard library say 'A'. I have some code there. Then i added ios library 'B' and added project reference of 'A' here.\r\nNow I have another .net standard library 'C' and here I would like to add reference of 'A' & 'B' projects not dll's. Reference of 'A' is added successfully but while adding reference of 'B', I \r\nsee 'Incompatible Target Framework' message.\r\n\r\n"},{"Id":"10601538594","Type":"PullRequestEvent","CreatedAt":"2019-10-10T12:33:43","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1602","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/corefx\" (#1602) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191009.26\r\n- **Date Produced**: 10/10/2019 3:16 AM\r\n- **Commit**: 30280e07adc3c1f0776ef9531b47a769e2b45420\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19509.26\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19509.26\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19509.26\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"},{"Id":"10601458579","Type":"PullRequestEvent","CreatedAt":"2019-10-10T12:23:36","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1602","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/corefx\" (#1602) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191009.26\r\n- **Date Produced**: 10/10/2019 3:16 AM\r\n- **Commit**: 30280e07adc3c1f0776ef9531b47a769e2b45420\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19509.26\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19509.26\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19509.26\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"},{"Id":"10601368647","Type":"PullRequestEvent","CreatedAt":"2019-10-10T12:11:43","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1601","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/arcade\" (#1601) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191009.5\r\n- **Date Produced**: 10/9/2019 10:22 PM\r\n- **Commit**: 1acb4c3ce4c6497388752adad31825ae7cdb7e2a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 5.0.0-beta.19509.5\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19509.5\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 5.0.0-beta.19509.5\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 5.0.0-beta.19509.5\r\n  - **Microsoft.DotNet.GenAPI** -> 5.0.0-beta.19509.5\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.19509.5\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n"},{"Id":"10601295294","Type":"PullRequestEvent","CreatedAt":"2019-10-10T12:01:43","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1601","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/arcade\" (#1601) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191009.5\r\n- **Date Produced**: 10/9/2019 10:22 PM\r\n- **Commit**: 1acb4c3ce4c6497388752adad31825ae7cdb7e2a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 5.0.0-beta.19509.5\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19509.5\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 5.0.0-beta.19509.5\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 5.0.0-beta.19509.5\r\n  - **Microsoft.DotNet.GenAPI** -> 5.0.0-beta.19509.5\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.19509.5\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n"},{"Id":"10601028934","Type":"IssuesEvent","CreatedAt":"2019-10-10T11:24:42","Actor":"manijak","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/1600","RelatedDescription":"Opened issue \"The state of X509Certificate management with netstandard, xamarin, win & macOS\" (#1600) at dotnet/standard","RelatedBody":"First, my apologies if this is the wrong channel to post this. I've been digging and trying to understand for weeks where the issue/limitation is to our problem, figured this would be the most suitable place to ask. We are not sure if this is a limitation with the frameworks, or the platform, or due to our limited knowledge, or a combination of all. But things are very confusing right now, and we just need proper guidance on what direction to take.\r\n\r\n### **Background** 💡 \r\nWe are creating a small, cross-platform (win & macos), desktop application that will act as a websocket server running only on localhost (https). This application is a bridge between our web applications and the local machine hardware (e.g. printers). In order to provide a secure connection, `SslStream` requires a `X509Certificate2` class with a `PrivateKey`.\r\n\r\nThe idea is to let the app itself generate a self-signed certificate with private key and use that to start the secure websocket service. After the certificate has been generated for the first time, we store it in the local certificate store and reuse it when the app restarts. \r\n\r\n### **Project structure & frameworks** 📦 \r\nThis is how our solution is defined. `SharedProject` is a shared lib referenced by both `AppWin` & `AppMac`. The Win & Mac projects are startup-projects for their respective platform. \r\n```\r\nOurApp.sln\r\n  |---- SharedProject (netstandard2.1)\r\n        Creates & runs the websocket service, generates certificate (win), communicates with local hardware, ect\r\n\r\n  |---- AppWin (netcore3.0)\r\n        Startup project for Windows platform. Contains platform-specific code, if any.\r\n\r\n  |---- AppMac (Xamarin.Mac)\r\n        Startup project for macOS platform. Contains platform-specific code (generates certificate).\r\n```\r\n\r\n### **How it runs** 🏃 \r\nIn our `SharedProject` we have a class taking care of certificate generation and storing. The idea was that both the Win & Mac platforms could use this to manage the certificates. It uses the `X509Certificate2` & `CertificateRequest` provided by the framework. Plus the `X509Store` to save and retrieve the certificate.\r\n\r\n**Windows** ✔️ \r\nOn Windows there are no issues. With minimum amount of code we are able to generate a self-signed certificate with private-key, store it, and run the service with it. Also re-using the certificate when the app restarts by retrieving the certificate works very well. The `X509Store` returns the certificate with the _private key_, and we can easily use it with our `SslStream`. \r\n\r\n**macOS** ❌ \r\nThings are not so clear here... We could not use the above mentioned shared class to manage certificates (that works just fine on Windows):\r\n* First issue was that we got a `PlatformNotSupportedException` when the application was trying to use the `CertificateRequest`. \r\n* Second \"issue\" was that the `X509Store` did not store or retrieve certificates from the macOS keychain, but instead it uses some local mono certificate-store that the browsers do not see (at least in our tests). And it only stored the certificate (.cer) not the private-key that was included in the `X509Certificate2` object. Plus it seemed difficult to \"Trust\" the stored certificate.\r\n\r\nSo we created a separate class to take care of certificate management for macOS inside the `AppMac (Xamarin.Mac)` project. By using `BouncyCastle` we generated an identical self-signed certificate with private-key and used that to run our secure websocket service:\r\n\r\n* When launching our Secure Websocket service on macOS, the certificate used here is automatically added to the local macOS login keychain. For us this is great, since we could not use `X509Store` to add it there in the first place.\r\n* The only way we could retrieve the certificate from the keychain was to use the `SecKeyChain` class and query for it. Thankfully the `SecCertificate` object has a `ToX509Certificate2()` function. But that still left us without the `PrivateKey` that is needed by `SslStream`. \r\n* We also tried using `SecKeyChain.FindIdentity` to retrieve both, but even tho it is easy to convert `SecCertificate` to `X509Certificate2`, there seems to be no way to convert a `SecKey` to something useful like `RSA` or `RSACryptoServiceProvider` or something that can be embedded to the `X509Certificate2`\r\n\r\n### What to do? 😭 \r\nWe are pretty much stuck when it comes to the macOS platform. There seems to be no way for us to retrieve our own X509Certificate2 with the private-key embedded. Not sure if this is because we are using Xamarin.Mac & netstandard2.1, perhaps things are easier on netcore3? But still, Xamarin & mono have been around for a long time, there should be a way for us to do this today. Must be something we are missing here and would appreciate if someone could guide us. "},{"Id":"10592240440","Type":"IssuesEvent","CreatedAt":"2019-10-09T12:43:06","Actor":"2300070","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/1598","RelatedDescription":"Closed issue \"FiledInfo.SetValue Not Working For Static ReadOnly Fileds.\" (#1598) at dotnet/standard","RelatedBody":"    private class TestReadOnly\r\n    {\r\n        public static readonly int Field;\r\n    }\r\n    [TestMethod]\r\n    public void TestReadOnlyField()\r\n    {\r\n        FieldInfo field = typeof(TestReadOnly).GetField(nameof(TestReadOnly.Field));\r\n\r\n        Console.WriteLine(field.GetValue(null));\r\n\r\n        field.SetValue(null, 0xFF);\r\n\r\n        Console.WriteLine(field.GetValue(null));\r\n\r\n        Console.WriteLine(TestReadOnly.Field);\r\n    }\r\n\r\nOutput:\r\n\r\n0\r\n255\r\n255\r\n0\r\n"},{"Id":"10592073480","Type":"PullRequestEvent","CreatedAt":"2019-10-09T12:21:49","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1599","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/corefx\" (#1599) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191009.1\r\n- **Date Produced**: 10/9/2019 9:11 AM\r\n- **Commit**: a7ee8cdccce7d2607d58f9b93ce319209a238f7a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19509.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19509.1\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19509.1\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"},{"Id":"10591995521","Type":"PullRequestEvent","CreatedAt":"2019-10-09T12:11:45","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1599","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/corefx\" (#1599) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191009.1\r\n- **Date Produced**: 10/9/2019 9:11 AM\r\n- **Commit**: a7ee8cdccce7d2607d58f9b93ce319209a238f7a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19509.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19509.1\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19509.1\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"10607786796","Type":"PullRequestEvent","CreatedAt":"2019-10-11T05:23:34","Actor":"wfurt","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/41726","RelatedDescription":"Opened pull request \"update DualModeConnect_BeginAccept_Helper to be more liberal and consistent with DualModeConnect_AcceptAsync_Helper\" (#41726) at dotnet/corefx","RelatedBody":"We have seen BeginAcceptV4BoundToAnyV6_Success and DualModeBeginAccept.BeginAcceptV4BoundToAnyV4_Success failing occasionally in CI with:\r\n\r\n```\r\n18:18:24       Assert.Equal() Failure\r\n18:18:24       Expected: ::ffff:127.0.0.1\r\n18:18:24       Actual:   ::127.0.0.1\r\n```\r\n\r\nI could not reproduce it on my system. However when looking at the tests, I notices that when connecting on v4 loopback ( like two tests above), there is also ready code to accept variations from ValidIPv6Loopbacks: \r\n\r\n\r\nhttps://github.com/dotnet/corefx/blob/901c370c2379ad0885bcc5a1921c4164104586aa/src/System.Net.Sockets/tests/FunctionalTests/DualModeSocketTest.cs#L856-L864\r\n\r\nand \r\n\r\n```c# \r\n       protected static IPAddress[] ValidIPv6Loopbacks = new IPAddress[] {\r\n            new IPAddress(new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 0, 0, 1 }, 0),  // ::127.0.0.1\r\n            IPAddress.Loopback.MapToIPv6(),                                                     // ::ffff:127.0.0.1\r\n            IPAddress.IPv6Loopback                                                              // ::1\r\n        };\r\n```\r\n\r\nBut it seems like the 864 line is there extra by mistake, invalidating previous statement. I also look at DualModeConnect_AcceptAsync_Helper and it validates result same way as we will now with this change.\r\n\r\nfixes #6681\r\nfixes #41685\r\n"},{"Id":"10607720368","Type":"PullRequestEvent","CreatedAt":"2019-10-11T05:05:29","Actor":"jkotas","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/41716","RelatedDescription":"Merged pull request \"Fix branch distance calculation\" (#41716) at dotnet/corefx","RelatedBody":"Port  #26621 to master"},{"Id":"10607462554","Type":"IssuesEvent","CreatedAt":"2019-10-11T03:53:40","Actor":"davidsh","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/41720","RelatedDescription":"Closed issue \"Cannot connect when IPv6 is specified in .NET Core 2.2 FtpWebRequest\" (#41720) at dotnet/corefx","RelatedBody":"# Issue Title\r\n\r\nCannot connect when IPv6 is specified in .NET Core 2.2 FtpWebRequest\r\n\r\n# General\r\nAn exception occurred when Ipv6 was specified in FtpWebRequest in .NET Core 2.2 as shown below.\r\nIf it was confirmed with the same code in .NET Core 3.0, it was successful, so is it a problem before .NET Core 3.0?\r\n\r\n```\r\nprivate static async void CreateDirectory()\r\n{\r\n    try\r\n    {\r\n\tUriBuilder uriBuilder = new UriBuilder(\"ftp\", \"fe80::1439:5ee0:f81b:93bf\");\r\n\tUri reqUri = new Uri(uriBuilder.Uri, \"TestDir\");\r\n\tFtpWebRequest ftpWebRequest = (FtpWebRequest)WebRequest.CreateDefault(reqUri);\r\n\tftpWebRequest.Credentials = new NetworkCredential(\"User1\", \"Password1\");\r\n\tftpWebRequest.Method = WebRequestMethods.Ftp.MakeDirectory;\r\n\r\n        FtpWebResponse response = (FtpWebResponse) await ftpWebRequest.GetResponseAsync().ConfigureAwait(false);\r\n    }\r\n    catch (Exception ex)\r\n    {\r\n        Console.WriteLine(\"Message : \" + ex.Message);\r\n        Console.WriteLine(\"Exception :\\n\" + ex.ToString());\r\n    }\r\n}\r\n```\r\nMessage : This protocol version is not supported.\r\nException :\r\nSystem.Net.WebException: This protocol version is not supported. ---> System.NotSupportedException: This protocol version is not supported.\r\nat System.Net.Sockets.Socket.BeginConnect(IPAddress address, Int32 port, AsyncCallback requestCallback, Object state)\r\nat System.Net.Sockets.Socket.BeginConnect(String host, Int32 port, AsyncCallback requestCallback, Object state)\r\nat System.Net.Sockets.TcpClient.BeginConnect(String host, Int32 port, AsyncCallback requestCallback, `Object` state)\r\nat System.Net.Sockets.TcpClient.<>c.b__28_0(String targetHost, Int32 targetPort, AsyncCallback callback, Object state)\r\nat System.Threading.Tasks.TaskFactory1.FromAsyncImpl[TArg1,TArg2](Func5 beginMethod, Func2 endFunction, Action1 endAction, TArg1 arg1, TArg2 arg2, Object state, TaskCreationOptions creationOptions)\r\nat System.Threading.Tasks.TaskFactory.FromAsync[TArg1,TArg2](Func5 beginMethod, Action1 endMethod, TArg1 arg1, TArg2 arg2, Object state)\r\nat System.Net.Sockets.TcpClient.ConnectAsync(String host, Int32 port)\r\nat System.Net.FtpWebRequest.CreateConnectionAsync()\r\n--- End of inner exception stack trace ---\r\nat System.Net.FtpWebRequest.EndGetResponse(IAsyncResult asyncResult)\r\nat System.Net.WebRequest.<>c.b__68_2(IAsyncResult iar)\r\nat System.Threading.Tasks.TaskFactory1.FromAsyncCoreLogic(IAsyncResult iar, Func2 endFunction, Action1 endAction, Task1 promise, Boolean requiresSynchronization)\r\n--- End of stack trace from previous location where exception was thrown ---"},{"Id":"10607447339","Type":"PullRequestEvent","CreatedAt":"2019-10-11T03:49:34","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/41725","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#41725) at dotnet/corefx","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"10607201771","Type":"PullRequestEvent","CreatedAt":"2019-10-11T02:45:54","Actor":"dotnet-maestro[bot]","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/41724","RelatedDescription":"Merged pull request \"[release/3.1] Update dependencies from dotnet/coreclr\" (#41724) at dotnet/corefx","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:dbb830b1-8f81-460f-dd40-08d72a4caef5)\r\n## From https://github.com/dotnet/coreclr\r\n- **Build**: 20191010.7\r\n- **Date Produced**: 10/10/2019 9:48 PM\r\n- **Commit**: e38f3722a98ea66b805f388cd613ac587a44d7d2\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk.IL** -> 3.1.0-preview2.19510.7\r\n  - **Microsoft.NETCore.ILAsm** -> 3.1.0-preview2.19510.7\r\n  - **Microsoft.NETCore.Runtime.CoreCLR** -> 3.1.0-preview2.19510.7\r\n\r\n[marker]: <> (End:dbb830b1-8f81-460f-dd40-08d72a4caef5)\r\n\r\n"},{"Id":"10606919911","Type":"PullRequestEvent","CreatedAt":"2019-10-11T01:30:27","Actor":"dotnet-maestro[bot]","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/41724","RelatedDescription":"Opened pull request \"[release/3.1] Update dependencies from dotnet/coreclr\" (#41724) at dotnet/corefx","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:dbb830b1-8f81-460f-dd40-08d72a4caef5)\r\n## From https://github.com/dotnet/coreclr\r\n- **Build**: 20191010.7\r\n- **Date Produced**: 10/10/2019 9:48 PM\r\n- **Commit**: e38f3722a98ea66b805f388cd613ac587a44d7d2\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk.IL** -> 3.1.0-preview2.19510.7\r\n  - **Microsoft.NETCore.ILAsm** -> 3.1.0-preview2.19510.7\r\n  - **Microsoft.NETCore.Runtime.CoreCLR** -> 3.1.0-preview2.19510.7\r\n\r\n[marker]: <> (End:dbb830b1-8f81-460f-dd40-08d72a4caef5)\r\n\r\n"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"10607727048","Type":"IssuesEvent","CreatedAt":"2019-10-11T05:07:25","Actor":"yyjdelete","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/39234","RelatedDescription":"Opened issue \"MoveToNamespaceCodeActionProvider crashed with ArgumentOutOfRangeException in multi-targetFrameworks projects\" (#39234) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\nVS2019 16.4.0Preview1\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Create an csproj and modify to multi targetFrameworks;\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFrameworks>netstandard2.0;net472</TargetFrameworks>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n\r\n```\r\n2. Create an cs file with 2 classes;\r\n```cs\r\nusing System;\r\n\r\nnamespace ClassLibrary1.A\r\n{\r\n    public class Class1\r\n    {\r\n    }\r\n\r\n    public class Class2\r\n    {\r\n    }\r\n}\r\n```\r\n3. call `Quick Actions/Move to Namespace` on the last class `Class2`\r\n\r\n**Expected Behavior**:\r\nIt should work as it does with single-targetFramework projects\r\n\r\n**Actual Behavior**:\r\n```cs\r\nSystem.ArgumentOutOfRangeException : Specified argument was out of the range of valid values.\r\nParameter name: span\r\n   at Microsoft.CodeAnalysis.SyntaxNode.FindNode(TextSpan span,Boolean findInsideTrivia,Boolean getInnermostNodeForTie)\r\n   at async Microsoft.CodeAnalysis.CSharp.ChangeNamespace.CSharpChangeNamespaceService.TryGetApplicableContainerFromSpanAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.ChangeNamespace.AbstractChangeNamespaceService`3.TryGetApplicableContainersFromAllDocumentsAsync[TNamespaceDeclarationSyntax,TCompilationUnitSyntax,TMemberDeclarationSyntax](<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.CSharp.ChangeNamespace.CSharpChangeNamespaceService.GetValidContainersFromAllLinkedDocumentsAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.ChangeNamespace.AbstractChangeNamespaceService`3.ChangeNamespaceAsync[TNamespaceDeclarationSyntax,TCompilationUnitSyntax,TMemberDeclarationSyntax](<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.MoveToNamespace.AbstractMoveToNamespaceService`2.MoveItemsInNamespaceAsync[TNamespaceDeclarationSyntax,TNamedTypeDeclarationSyntax](<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.MoveToNamespace.AbstractMoveToNamespaceService`2.MoveTypeToNamespaceAsync[TNamespaceDeclarationSyntax,TNamedTypeDeclarationSyntax](<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.MoveToNamespace.AbstractMoveToNamespaceCodeAction.ComputeOperationsAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.CodeActions.CodeActionWithOptions.GetOperationsAsync(<Unknown Parameters>)\r\n   at Roslyn.Utilities.TaskExtensions.WaitAndGetResult_CanCallOnBackground[T](Task`1 task,CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.InvokeWorker(Func`1 getFromDocument,IProgressTracker progressTracker,CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.<>c__DisplayClass20_0.<InvokeCore>b__0()\r\n   at Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformAction(IExtensionManager extensionManager,Object extension,Action action)\r\n```"},{"Id":"10607705994","Type":"PullRequestEvent","CreatedAt":"2019-10-11T05:01:37","Actor":"dibarbet","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/39231","RelatedDescription":"Merged pull request \"Merge master to features/local-function-attributes\" (#39231) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from master into features/local-function-attributes.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/local-function-attributes\ngit reset --hard upstream/features/local-function-attributes\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/local-function-attributes --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"10607705561","Type":"PullRequestEvent","CreatedAt":"2019-10-11T05:01:31","Actor":"dibarbet","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/39230","RelatedDescription":"Merged pull request \"Merge master to master-vs-deps\" (#39230) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"10607704963","Type":"PullRequestEvent","CreatedAt":"2019-10-11T05:01:25","Actor":"dibarbet","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/39229","RelatedDescription":"Merged pull request \"Merge master to release/dev16.5-preview1\" (#39229) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from master into release/dev16.5-preview1.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-release/dev16.5-preview1\ngit reset --hard upstream/release/dev16.5-preview1\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-release/dev16.5-preview1 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"10606940024","Type":"PullRequestEvent","CreatedAt":"2019-10-11T01:36:08","Actor":"RikkiGibson","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/39233","RelatedDescription":"Opened pull request \"Fix 'ref' parsing crash\" (#39233) at dotnet/roslyn","RelatedBody":"Closes #39072"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"10607447761","Type":"PullRequestEvent","CreatedAt":"2019-10-11T03:49:41","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7822","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#7822) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"10592232499","Type":"PullRequestEvent","CreatedAt":"2019-10-09T12:42:08","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7821","RelatedDescription":"Merged pull request \"Delete unused method\" (#7821) at dotnet/corert","RelatedBody":"Supplements #7819."},{"Id":"10590790043","Type":"PullRequestEvent","CreatedAt":"2019-10-09T09:29:22","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7821","RelatedDescription":"Opened pull request \"Delete unused method\" (#7821) at dotnet/corert","RelatedBody":"Supplements #7819."},{"Id":"10590779874","Type":"PullRequestEvent","CreatedAt":"2019-10-09T09:28:11","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7820","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#7820) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @EgorBo"},{"Id":"10590775020","Type":"PullRequestEvent","CreatedAt":"2019-10-09T09:27:35","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7818","RelatedDescription":"Merged pull request \"Fix exit code of build-native.sh\" (#7818) at dotnet/corert","RelatedBody":"I noticed it in the docker container, that the failed build was successfully committing the container (false positive)."},{"Id":"10588290498","Type":"PullRequestEvent","CreatedAt":"2019-10-09T01:22:40","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7820","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#7820) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"10588267846","Type":"PullRequestEvent","CreatedAt":"2019-10-09T01:16:45","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7819","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#7819) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @CoffeeFlux"},{"Id":"10587844333","Type":"PullRequestEvent","CreatedAt":"2019-10-08T23:32:55","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7819","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#7819) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"10585123655","Type":"PullRequestEvent","CreatedAt":"2019-10-08T16:48:09","Actor":"am11","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7818","RelatedDescription":"Opened pull request \"Fix exit code of build-native.sh\" (#7818) at dotnet/corert","RelatedBody":"I noticed it in the docker container, that the failed build was successfully committing the container (false positive)."}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"10607598929","Type":"PullRequestEvent","CreatedAt":"2019-10-11T04:31:40","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/3736","RelatedDescription":"Merged pull request \"Merge release/2.2.2xx to release/2.2.4xx\" (#3736) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.2.2xx into release/2.2.4xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.2xx-to-release/2.2.4xx\ngit reset --hard upstream/release/2.2.4xx\ngit merge upstream/release/2.2.2xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.2xx-to-release/2.2.4xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"10607557518","Type":"PullRequestEvent","CreatedAt":"2019-10-11T04:20:11","Actor":"dotnet-maestro[bot]","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/3740","RelatedDescription":"Opened pull request \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#3740) at dotnet/sdk","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191010.20\r\n- **Date Produced**: 10/11/2019 3:11 AM\r\n- **Commit**: 966989290a99db7e31867dabb1aa6dac6d045813\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.1.0-preview2.19510.20\r\n\r\n[marker]: <> (End:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n\r\n"},{"Id":"10607443118","Type":"PullRequestEvent","CreatedAt":"2019-10-11T03:48:27","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/3735","RelatedDescription":"Closed pull request \"Merge release/2.1.8xx to release/2.2.2xx\" (#3735) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.1.8xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.8xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.1.8xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.8xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"10607377118","Type":"PullRequestEvent","CreatedAt":"2019-10-11T03:30:41","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/3738","RelatedDescription":"Closed pull request \"Merge release/3.0.1xx to release/3.1.1xx\" (#3738) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/3.0.1xx into release/3.1.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-release/3.1.1xx\ngit reset --hard upstream/release/3.1.1xx\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-release/3.1.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"10607375871","Type":"PullRequestEvent","CreatedAt":"2019-10-11T03:30:25","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/3733","RelatedDescription":"Merged pull request \"Merge 3.0.1xx to 3.1.1xx\" (#3733) at dotnet/sdk","RelatedBody":""},{"Id":"10606850393","Type":"PullRequestEvent","CreatedAt":"2019-10-11T01:11:26","Actor":"dotnet-maestro[bot]","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/3734","RelatedDescription":"Merged pull request \"[release/3.0.1xx] Update dependencies from dotnet/core-setup\" (#3734) at dotnet/sdk","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee7760b1-2875-4869-d002-08d7114cdbad)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191010.13\r\n- **Date Produced**: 10/10/2019 9:15 PM\r\n- **Commit**: ee7dbc9e064bf59f822c5310b89e0e996ccc0d58\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.0.1\r\n\r\n[marker]: <> (End:ee7760b1-2875-4869-d002-08d7114cdbad)\r\n\r\n"},{"Id":"10606609633","Type":"PullRequestEvent","CreatedAt":"2019-10-11T00:05:30","Actor":"dotnet-bot","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/3739","RelatedDescription":"Opened pull request \"Merge release/3.1.1xx to master\" (#3739) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/3.1.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.1.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.1.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.1.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"10606609246","Type":"PullRequestEvent","CreatedAt":"2019-10-11T00:05:24","Actor":"dotnet-bot","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/3738","RelatedDescription":"Opened pull request \"Merge release/3.0.1xx to release/3.1.1xx\" (#3738) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/3.0.1xx into release/3.1.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-release/3.1.1xx\ngit reset --hard upstream/release/3.1.1xx\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-release/3.1.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"10606608864","Type":"PullRequestEvent","CreatedAt":"2019-10-11T00:05:18","Actor":"dotnet-bot","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/3737","RelatedDescription":"Opened pull request \"Merge release/2.2.4xx to release/3.0.1xx\" (#3737) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.2.4xx into release/3.0.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.4xx-to-release/3.0.1xx\ngit reset --hard upstream/release/3.0.1xx\ngit merge upstream/release/2.2.4xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.4xx-to-release/3.0.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"10606608376","Type":"PullRequestEvent","CreatedAt":"2019-10-11T00:05:11","Actor":"dotnet-bot","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/3736","RelatedDescription":"Opened pull request \"Merge release/2.2.2xx to release/2.2.4xx\" (#3736) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.2.2xx into release/2.2.4xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.2xx-to-release/2.2.4xx\ngit reset --hard upstream/release/2.2.4xx\ngit merge upstream/release/2.2.2xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.2xx-to-release/2.2.4xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"10606607456","Type":"PullRequestEvent","CreatedAt":"2019-10-11T00:04:58","Actor":"dotnet-bot","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/3735","RelatedDescription":"Opened pull request \"Merge release/2.1.8xx to release/2.2.2xx\" (#3735) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.1.8xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.8xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.1.8xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.8xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."}],"ResultType":"GitHubEvent"},"Home-Issues":{"Issues":[{"Id":"501128777","IsPullRequest":true,"CreatedAt":"2019-10-01T20:30:20","Actor":"gep13","Number":"150","RawContent":null,"Title":"Add new Cake Maintainer","State":"open","Body":"","Url":"https://github.com/dotnet/foundation/pull/150","RelatedDescription":"Open PR \"Add new Cake Maintainer\" (#150)"},{"Id":"500670461","IsPullRequest":true,"CreatedAt":"2019-10-01T05:27:58","Actor":"JimBobSquarePants","Number":"149","RawContent":null,"Title":"Add ImageSharp","State":"open","Body":"","Url":"https://github.com/dotnet/foundation/pull/149","RelatedDescription":"Open PR \"Add ImageSharp\" (#149)"},{"Id":"475315730","IsPullRequest":false,"CreatedAt":"2019-07-31T19:23:23","Actor":"MeikTranel","Number":"148","RawContent":null,"Title":"Clarify guidelines in regards to Options and Requirements","State":"open","Body":"I'd be interested in which part of the project submission guidelines is optional and which are deal breaker requirements.\r\n\r\n- Is the Role Matrix laid out an absolute or (as can be read between the lines) just a preset, which may be subject to individual projects needs?\r\n- Is it a strong requirement that the project uses the contributor covenant CoC?","Url":"https://github.com/dotnet/foundation/issues/148","RelatedDescription":"Open issue \"Clarify guidelines in regards to Options and Requirements\" (#148)"},{"Id":"455670422","IsPullRequest":true,"CreatedAt":"2019-06-13T10:49:30","Actor":"gep13","Number":"147","RawContent":null,"Title":"(GH-111) Update Source Link location","State":"open","Body":"","Url":"https://github.com/dotnet/foundation/pull/147","RelatedDescription":"Open PR \"(GH-111) Update Source Link location\" (#147)"},{"Id":"455555823","IsPullRequest":true,"CreatedAt":"2019-06-13T06:28:59","Actor":"gep13","Number":"146","RawContent":null,"Title":"Update Cake Project Contacts","State":"closed","Body":"@jongalloway just noticed that this wasn't up to date.","Url":"https://github.com/dotnet/foundation/pull/146","RelatedDescription":"Closed or merged PR \"Update Cake Project Contacts\" (#146)"},{"Id":"441542047","IsPullRequest":true,"CreatedAt":"2019-05-09T18:35:22","Actor":"mitchelsellers","Number":"145","RawContent":null,"Title":"Edits to DNN Platform Information","State":"closed","Body":"Edits to reflect changes in repository structure with recent modifications to the overall project structure.","Url":"https://github.com/dotnet/foundation/pull/145","RelatedDescription":"Closed or merged PR \"Edits to DNN Platform Information\" (#145)"},{"Id":"437980746","IsPullRequest":true,"CreatedAt":"2019-05-03T20:10:38","Actor":"FlorianRappl","Number":"143","RawContent":null,"Title":"Add AngleSharp","State":"closed","Body":"cc @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/143","RelatedDescription":"Closed or merged PR \"Add AngleSharp\" (#143)"},{"Id":"426787230","IsPullRequest":true,"CreatedAt":"2019-05-03T20:08:40","Actor":"mairaw","Number":"141","RawContent":null,"Title":"add links to ML.NET docs","State":"closed","Body":"/cc @JRAlexander @shauheen \r\n\r\nTo match the info we have added for other projects","Url":"https://github.com/dotnet/foundation/pull/141","RelatedDescription":"Closed or merged PR \"add links to ML.NET docs\" (#141)"},{"Id":"440030132","IsPullRequest":true,"CreatedAt":"2019-05-03T20:08:15","Actor":"tomasherceg","Number":"144","RawContent":null,"Title":"Add DotVVM","State":"closed","Body":"cc @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/144","RelatedDescription":"Closed or merged PR \"Add DotVVM\" (#144)"},{"Id":"426787542","IsPullRequest":true,"CreatedAt":"2019-03-29T14:44:24","Actor":"mairaw","Number":"142","RawContent":null,"Title":"add docs samples link","State":"closed","Body":"@BillWagner should we add the samples project too?","Url":"https://github.com/dotnet/foundation/pull/142","RelatedDescription":"Closed or merged PR \"add docs samples link\" (#142)"},{"Id":"426658581","IsPullRequest":true,"CreatedAt":"2019-03-29T02:16:07","Actor":"scottaddie","Number":"139","RawContent":null,"Title":"Add link to ASP.NET Core docs","State":"closed","Body":"Provide a link to the docs site for ASP.NET Core.","Url":"https://github.com/dotnet/foundation/pull/139","RelatedDescription":"Closed or merged PR \"Add link to ASP.NET Core docs\" (#139)"},{"Id":"426666928","IsPullRequest":true,"CreatedAt":"2019-03-29T02:15:48","Actor":"BillWagner","Number":"140","RawContent":null,"Title":"add links to .NET docs","State":"closed","Body":"/cc @mairaw @scottaddie\r\n\r\nMaira, did I miss any project repos to tag?","Url":"https://github.com/dotnet/foundation/pull/140","RelatedDescription":"Closed or merged PR \"add links to .NET docs\" (#140)"},{"Id":"419205679","IsPullRequest":true,"CreatedAt":"2019-03-18T21:04:01","Actor":"MikeWilliams-UK","Number":"137","RawContent":null,"Title":"Add V3.1 repo and change documentation link","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/137","RelatedDescription":"Closed or merged PR \"Add V3.1 repo and change documentation link\" (#137)"},{"Id":"419897914","IsPullRequest":true,"CreatedAt":"2019-03-18T21:03:34","Actor":"devlead","Number":"138","RawContent":null,"Title":"Add Dave to cake.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/138","RelatedDescription":"Closed or merged PR \"Add Dave to cake.md\" (#138)"},{"Id":"391459677","IsPullRequest":false,"CreatedAt":"2019-03-08T19:00:06","Actor":"manne","Number":"123","RawContent":null,"Title":"Missing logo for Steeltoe","State":"closed","Body":"`https://brandfolder.com/pivotal-assets/attachments/ohxttd-7yxa60-clvf50/pivotal-assets-pivotal-genericfile.png` redirects to a sign in page\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L128-L130","Url":"https://github.com/dotnet/foundation/issues/123","RelatedDescription":"Closed issue \"Missing logo for Steeltoe\" (#123)"},{"Id":"417018694","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:32","Actor":"jkonicki","Number":"136","RawContent":null,"Title":"Fix logo and update team contributors","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/136","RelatedDescription":"Closed or merged PR \"Fix logo and update team contributors\" (#136)"},{"Id":"416428925","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"135","RawContent":null,"Title":"adds Umbraco logo","State":"closed","Body":"fixes #124 ","Url":"https://github.com/dotnet/foundation/pull/135","RelatedDescription":"Closed or merged PR \"adds Umbraco logo\" (#135)"},{"Id":"391459812","IsPullRequest":false,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"124","RawContent":null,"Title":"Missing logo for Umbraco","State":"closed","Body":"`https://fbcdn-profile-a.akamaihd.net/hprofile-ak-xap1/v/t1.0-1/p160x160/971596_519168901464439_566592989_n.png?oh=ce61e5b4cbd60c0d99c4164cbb05a434&oe=54F091C9&__gda__=1424472439_c9f76213a915bc2af88246f464f29e8b` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L149-L151","Url":"https://github.com/dotnet/foundation/issues/124","RelatedDescription":"Closed issue \"Missing logo for Umbraco\" (#124)"},{"Id":"416427614","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:45","Actor":"manne","Number":"134","RawContent":null,"Title":"adds the prism logo","State":"closed","Body":"fixes #126 ","Url":"https://github.com/dotnet/foundation/pull/134","RelatedDescription":"Closed or merged PR \"adds the prism logo\" (#134)"},{"Id":"391460225","IsPullRequest":false,"CreatedAt":"2019-03-08T18:58:44","Actor":"manne","Number":"126","RawContent":null,"Title":"No logo provided for Prism","State":"closed","Body":"Can/should this [image](http://prismlibrary.github.io/images/logo-prism-symbol@2x.png) be used?\r\n\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L155-L157","Url":"https://github.com/dotnet/foundation/issues/126","RelatedDescription":"Closed issue \"No logo provided for Prism\" (#126)"},{"Id":"416157860","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:26","Actor":"glennawatson","Number":"133","RawContent":null,"Title":"Add additional ReactiveUI organization projects.","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/133","RelatedDescription":"Closed or merged PR \"Add additional ReactiveUI organization projects.\" (#133)"},{"Id":"407251900","IsPullRequest":true,"CreatedAt":"2019-02-18T17:45:44","Actor":"Potapy4","Number":"132","RawContent":null,"Title":"Update MVVM project logo","State":"closed","Body":"Fixes dotnet/dotnetfoundation-website#72\r\nFixes #125","Url":"https://github.com/dotnet/foundation/pull/132","RelatedDescription":"Closed or merged PR \"Update MVVM project logo\" (#132)"},{"Id":"391459919","IsPullRequest":false,"CreatedAt":"2019-02-18T17:45:44","Actor":"manne","Number":"125","RawContent":null,"Title":"Missing logo for MVVM Light Toolkit","State":"closed","Body":"`https://raw.githubusercontent.com/paulcbetts/mvvmlight/master/Installer/InstallItems/html/MVVM_BlackText_190x147.png` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L137-L139","Url":"https://github.com/dotnet/foundation/issues/125","RelatedDescription":"Closed issue \"Missing logo for MVVM Light Toolkit\" (#125)"},{"Id":"406210463","IsPullRequest":true,"CreatedAt":"2019-02-18T17:44:39","Actor":"NextTurn","Number":"131","RawContent":null,"Title":"Replace http links with https links","State":"closed","Body":"Replace http links with https where possible - both returned 200 OK.","Url":"https://github.com/dotnet/foundation/pull/131","RelatedDescription":"Closed or merged PR \"Replace http links with https links\" (#131)"},{"Id":"399191617","IsPullRequest":true,"CreatedAt":"2019-02-02T11:04:15","Actor":"NextTurn","Number":"130","RawContent":null,"Title":"Update Open XML links","State":"closed","Body":"OpenXmlDeveloper.org was shut down long ago.\r\n\r\nThe content has been moved to EricWhite.com.","Url":"https://github.com/dotnet/foundation/pull/130","RelatedDescription":"Closed or merged PR \"Update Open XML links\" (#130)"},{"Id":"395863354","IsPullRequest":true,"CreatedAt":"2019-01-09T22:28:14","Actor":"ErikEJ","Number":"128","RawContent":null,"Title":"Update of EF description","State":"closed","Body":"@divega !","Url":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Closed or merged PR \"Update of EF description\" (#128)"},{"Id":"395901602","IsPullRequest":true,"CreatedAt":"2019-01-05T03:23:39","Actor":"MarcBruins","Number":"129","RawContent":null,"Title":"Update to absolute path","State":"closed","Body":"Update to absolute path so that when this list is copied the link will actually work","Url":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Closed or merged PR \"Update to absolute path\" (#129)"},{"Id":"395705579","IsPullRequest":true,"CreatedAt":"2019-01-04T00:22:42","Actor":"carloscds","Number":"127","RawContent":null,"Title":"Update documentation information","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/127","RelatedDescription":"Closed or merged PR \"Update documentation information\" (#127)"},{"Id":"391459057","IsPullRequest":true,"CreatedAt":"2019-01-03T04:47:09","Actor":"manne","Number":"122","RawContent":null,"Title":"targets the existing document","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/122","RelatedDescription":"Closed or merged PR \"targets the existing document\" (#122)"},{"Id":"384569679","IsPullRequest":true,"CreatedAt":"2019-01-03T04:46:31","Actor":"JamesNK","Number":"121","RawContent":null,"Title":"Add Newtonsoft.Json","State":"closed","Body":"// @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/121","RelatedDescription":"Closed or merged PR \"Add Newtonsoft.Json\" (#121)"}],"ResultType":"GitHubIssue"},"CoreCLR-Issues":{"Issues":[{"Id":"505622180","IsPullRequest":true,"CreatedAt":"2019-10-11T03:53:45","Actor":"sywhang","Number":"27140","RawContent":null,"Title":"[3.1 port] Do not create diagnostics server thread and pipe if EnableDiagnostics is set to 0","State":"open","Body":"*Description*\r\n\r\nThis fixes https://github.com/dotnet/coreclr/issues/27134. \r\n\r\nThe diagnostics server is a new runtime component that creates a dedicated thread and a socket/pipe for EventPipe and other various diagnostics runtime components to communicate with an external process (i.e. dotnet-trace, dotnet-dump, dotnet-counters, profiler attach, etc.). However, this cannot be turned off if a user does not want diagnostics and having a separate thread that sits idle at all times that cannot be disabled is not a desired behavior. The debugger already does this via `COMPlus_EnableDiagnostics` environment variable which is set to 1 by default, and gets turned off when it is set to 0. This change allows the same environment variable to be used for disabling the diagnostics server thread and pipe/socket creation. \r\n\r\n*Customer Impact*\r\n\r\nA customer who doesn't want/need diagnostics server thread can now turn it off via the `COMPlus_EnableDiagnostics` environment variable, just like how they can turn off the debugger with the same environment variable.\r\n\r\n*Regression?*\r\nYes from Core 2.2 -> 3.0 since diagnostics server was only introduced from 3.0.\r\n\r\n*Risk*\r\nLow. The change is very minimal.","Url":"https://github.com/dotnet/coreclr/pull/27140","RelatedDescription":"Open PR \"[3.1 port] Do not create diagnostics server thread and pipe if EnableDiagnostics is set to 0\" (#27140)"},{"Id":"505584428","IsPullRequest":true,"CreatedAt":"2019-10-11T03:42:08","Actor":"sywhang","Number":"27137","RawContent":null,"Title":"Do not create diagnostics server thread and pipe if EnableDiagnostics is set to 0","State":"closed","Body":"We already have the environment variable `COMPlus_EnableDiagnostics` that disables the debugger when it is set to 0. We should disable diagnostics server as well if this environment variable is set to 0. \r\n\r\nThis fixes https://github.com/dotnet/coreclr/issues/27134. \r\n","Url":"https://github.com/dotnet/coreclr/pull/27137","RelatedDescription":"Closed or merged PR \"Do not create diagnostics server thread and pipe if EnableDiagnostics is set to 0\" (#27137)"},{"Id":"505572340","IsPullRequest":true,"CreatedAt":"2019-10-11T03:39:15","Actor":"sywhang","Number":"27136","RawContent":null,"Title":"Remove unnecessary cleanup on diagnostics server thread during shutdown","State":"closed","Body":"During shutdown, we are doing unnecessary cleanup of the process by cleaning up threads, etc when this could be done by the OS with the process exit. \r\n\r\nThis should fix https://github.com/dotnet/coreclr/issues/27128. \r\n\r\ncc @jkotas \r\n","Url":"https://github.com/dotnet/coreclr/pull/27136","RelatedDescription":"Closed or merged PR \"Remove unnecessary cleanup on diagnostics server thread during shutdown\" (#27136)"},{"Id":"505429338","IsPullRequest":false,"CreatedAt":"2019-10-11T03:39:15","Actor":"ViktorHofer","Number":"27128","RawContent":null,"Title":"Environment.Exit hanging in RemoteExecutor","State":"closed","Body":"https://dev.azure.com/dnceng/public/_build/results?buildId=380511&view=ms.vss-test-web.build-test-results-tab&runId=11763518&paneView=debug&resultId=147963\r\n\r\nConfiguration: `netcoreapp-Windows_NT-Debug-x64-Windows.81.Amd64.Open`\r\n\r\n```\r\nSystem.Net.Tests.AuthenticationManagerTest.CustomTargetNameDictionary_ValidCollection\r\n\r\nTimed out at 10/7/2019 8:39:55 PM after 60000ms waiting for remote process.\\r\\n\\tProcess ID: 5404\\r\\n\\tHandle: 1096\\r\\n\\tName: dotnet\\r\\n\\tMainModule: C:\\\\dotnetbuild\\\\work\\\\ddad0c4a-3d2b-409b-b8b2-09e253a66230\\\\Payload\\\\dotnet.exe\\r\\n\\tStartTime: 10/7/2019 8:38:55 PM\\r\\n\\tTotalProcessorTime: 00:00:00.1875000\\r\\n\\tThreads:\\r\\n\\t\\tThread dotnet/corefx#1 (OS 0x152C) \\r\\n\\t\\t\\t[InlinedCallFrame] (System.Environment._Exit)\\r\\n\\t\\t\\t[InlinedCallFrame] (System.Environment._Exit)\\r\\n\\t\\t\\tSystem.Environment.Exit(Int32)\\r\\n\\t\\t\\tMicrosoft.DotNet.RemoteExecutor.Program.Main(System.String[])\\r\\n\\t\\t\\t[GCFrame]\\r\\n\\t\\t\\t[GCFrame]\\r\\n\\t\\tThread dotnet/corefx#2 (OS 0x1538) [Finalizer]\\r\\n\\t\\t\\t[DebuggerU2MCatchHandlerFrame]\\r\\n\\t\\tThread dotnet/corefx#3 (OS 0x1528) [Thread pool worker]\\r\\n\r\n   at Microsoft.DotNet.RemoteExecutor.RemoteInvokeHandle.Dispose(Boolean disposing) in /_/src/Microsoft.DotNet.RemoteExecutor/src/RemoteInvokeHandle.cs:line 131\r\n   at Microsoft.DotNet.RemoteExecutor.RemoteInvokeHandle.Dispose() in /_/src/Microsoft.DotNet.RemoteExecutor/src/RemoteInvokeHandle.cs:line 55\r\n   at System.Net.Tests.AuthenticationManagerTest.CustomTargetNameDictionary_ValidCollection() in /_/src/System.Net.Requests/tests/AuthenticationManagerTest.cs:line 93\r\n```\r\n\r\ncc @davidsh, @wfurt, @scalablecory, @eiriktsarpalis, @karelz\r\ncc @stephentoub for another hang","Url":"https://github.com/dotnet/coreclr/issues/27128","RelatedDescription":"Closed issue \"Environment.Exit hanging in RemoteExecutor\" (#27128)"},{"Id":"505589768","IsPullRequest":false,"CreatedAt":"2019-10-11T01:33:08","Actor":"tannergooding","Number":"27139","RawContent":null,"Title":"Add tests for remaining ARM intrinsics","State":"open","Body":"https://github.com/dotnet/coreclr/pull/25508 did a large refactoring of the ARM intrinsic infrastructure.\r\n\r\nThere were a few APIs that are no longer exposed that should be and there were a few APIs (namely ArmBase) that didn't have tests added.\r\n\r\nThe PR was merged to unblock other work going on and this is just tracking tests being added for the APIs exposed that don't have them yet.","Url":"https://github.com/dotnet/coreclr/issues/27139","RelatedDescription":"Open issue \"Add tests for remaining ARM intrinsics\" (#27139)"},{"Id":"505589031","IsPullRequest":true,"CreatedAt":"2019-10-11T01:29:43","Actor":"AustinWise","Number":"27138","RawContent":null,"Title":"Fix assert when CORECLR_PROFILER is set but CORECLR_PROFILER_PATH is not","State":"open","Body":"The null DLL name is eventually passed to FakeCoCallDllGetClassObject which\r\nknowns how to look up the DLL name based on the CLSID specified by\r\nCORECLR_PROFILER.","Url":"https://github.com/dotnet/coreclr/pull/27138","RelatedDescription":"Open PR \"Fix assert when CORECLR_PROFILER is set but CORECLR_PROFILER_PATH is not\" (#27138)"},{"Id":"505570558","IsPullRequest":false,"CreatedAt":"2019-10-11T00:10:04","Actor":"sywhang","Number":"27135","RawContent":null,"Title":"Consider cleaning up the diagnostics server handles immediately after creation","State":"open","Body":"From https://github.com/dotnet/coreclr/issues/27128#issuecomment-540829268:\r\n\r\n> Since the server thread handle is not really needed for anything, you may consider closing it immediately after CreateThread returns it and not keeping it around at all - but that is orthogonal to the shutdown fix.\r\n\r\n","Url":"https://github.com/dotnet/coreclr/issues/27135","RelatedDescription":"Open issue \"Consider cleaning up the diagnostics server handles immediately after creation\" (#27135)"},{"Id":"505570211","IsPullRequest":false,"CreatedAt":"2019-10-11T00:08:39","Actor":"sywhang","Number":"27134","RawContent":null,"Title":"Add a runtime configuration to disable diagnostics server","State":"open","Body":"Currently the diagnostics server is always created and there is no way of configuring the runtime to not do this. We should add an optional config switch that allows users to disable creation of the diagnostics server thread entirely. \r\n\r\ncc @noahfalk @josalem ","Url":"https://github.com/dotnet/coreclr/issues/27134","RelatedDescription":"Open issue \"Add a runtime configuration to disable diagnostics server\" (#27134)"},{"Id":"505548235","IsPullRequest":false,"CreatedAt":"2019-10-10T22:48:42","Actor":"maryamariyan","Number":"27133","RawContent":null,"Title":"Would the repository benefit from a .vsconfig file for required workloads","State":"closed","Body":"As listed in the build instructions - and updated regularly according to version - several workloads are required to build CoreCLR (at least on Windows).\r\n\r\nWith the [addition of `.vsconfig`](https://devblogs.microsoft.com/setup/configure-visual-studio-across-your-organization-with-vsconfig/) and the ability to determine workloads based on this configuration, there might be value in adding this to the repo.\r\n\r\nI'd be happy to contribute if people thought this was something that would improve the developer experience. ","Url":"https://github.com/dotnet/coreclr/issues/27133","RelatedDescription":"Closed issue \"Would the repository benefit from a .vsconfig file for required workloads\" (#27133)"},{"Id":"505543273","IsPullRequest":false,"CreatedAt":"2019-10-10T22:46:58","Actor":"maryamariyan","Number":"27132","RawContent":null,"Title":"Would the repository benefit from a .vsconfig file for required workloads","State":"closed","Body":"As listed in the build instructions - and updated regularly according to version - several workloads are required to build CoreCLR (at least on Windows).\r\n\r\nWith the [addition of `.vsconfig`](https://devblogs.microsoft.com/setup/configure-visual-studio-across-your-organization-with-vsconfig/) and the ability to determine workloads based on this configuration, there might be value in adding this to the repo.\r\n\r\nI'd be happy to contribute if people thought this was something that would improve the developer experience. ","Url":"https://github.com/dotnet/coreclr/issues/27132","RelatedDescription":"Closed issue \"Would the repository benefit from a .vsconfig file for required workloads\" (#27132)"},{"Id":"505538974","IsPullRequest":false,"CreatedAt":"2019-10-10T22:23:29","Actor":"maryamariyan","Number":"27131","RawContent":null,"Title":"Runtime hangs on exit on a spinlock","State":"closed","Body":"From time to time the jit diff tool hangs on exit:\r\n```\r\nntdll.dll!NtDelayExecution()\r\nKernelBase.dll!SleepEx()\r\ncoreclr.dll!SpinLock::SpinToAcquire() Line 270\r\ncoreclr.dll!CallCounter::IsCallCountingEnabled(MethodDesc * pMethodDesc) Line 56\r\ncoreclr.dll!TieredCompilationManager::GetInitialOptimizationTier(MethodDesc * pMethodDesc) Line 115\r\ncoreclr.dll!PrepareCodeConfig::GetJitOptimizationTier(PrepareCodeConfig * config, MethodDesc * methodDesc) Line 1215\r\ncoreclr.dll!ETW::MethodLog::SendMethodEvent(MethodDesc * pMethodDesc, unsigned long dwEventOptions, int bIsJit, SString * namespaceOrClassName, SString * methodName, SString * methodSignature, unsigned __int64 pNativeCodeStartAddress, PrepareCodeConfig * pConfig) Line 6402\r\ncoreclr.dll!ETW::MethodLog::SendEventsForJitMethodsHelper(LoaderAllocator * pLoaderAllocatorFilter, unsigned long dwEventOptions, int fLoadOrDCStart, int fUnloadOrDCEnd, int fSendMethodEvent, int fSendILToNativeMapEvent, int fGetCodeIds) Line 6889\r\ncoreclr.dll!ETW::MethodLog::SendEventsForJitMethods(BaseDomain * pDomainFilter, LoaderAllocator * pLoaderAllocatorFilter, unsigned long dwEventOptions) Line 7046\r\ncoreclr.dll!ETW::EnumerationLog::IterateDomain(BaseDomain * pDomain, unsigned long enumerationOptions) Line 7139\r\ncoreclr.dll!ETW::EnumerationLog::IterateAppDomain(AppDomain * pAppDomain, unsigned long enumerationOptions) Line 7096\r\ncoreclr.dll!ETW::EnumerationLog::EnumerationHelper(Module * moduleFilter, BaseDomain * enumerationOptions, unsigned long) Line 7412\r\ncoreclr.dll!ETW::EnumerationLog::ProcessShutdown() Line 5674\r\ncoreclr.dll!EEShutDownHelper(int fIsDllUnloading) Line 1327\r\ncoreclr.dll!EEShutDown(int fIsDllUnloading) Line 1803\r\ncoreclr.dll!EEDllMain(HINSTANCE__ * hInst, unsigned long dwReason, void * lpReserved) Line 1973\r\ncoreclr.dll!DllMain(void * hInstance, unsigned long dwReason, void * lpReserved) Line 156\r\ncoreclr.dll!CoreDllMain(void * hInstance, unsigned long dwReason, void * lpReserved) Line 107\r\nntdll.dll!LdrpCallInitRoutine()\r\n```\r\nThis is the only remaining thread in the process and all it does it to spin there. Presumably the spinlock was abandoned by a terminated thread.\r\n\r\nKnown issue? Perhaps already fixed? The jit utils are using the released 3.0, not the current coreclr build.","Url":"https://github.com/dotnet/coreclr/issues/27131","RelatedDescription":"Closed issue \"Runtime hangs on exit on a spinlock\" (#27131)"},{"Id":"505519189","IsPullRequest":true,"CreatedAt":"2019-10-10T21:24:26","Actor":"andy-ms","Number":"27130","RawContent":null,"Title":"For large allocation tests, check for available memory on Windows too","State":"open","Body":"Previously, we had logic to get the physical memory on non-Windows,\r\nbut nothing on Windows.\r\nThis means that on windows machines with low memory, we would allocate\r\ntoo much and the test would fail.\r\nThis PR logic to get physical memory on Windows too.\r\n\r\nOn Windows, it invokes the `systeminfo` command.\r\nIt shares parsing logic with the non-windows case, since they both need\r\nto look for a line with a particular start and end.\r\n\r\nTested this change by manually increasing the allocation size in\r\n`largeexceptiontest.cmd` and seeing that it allocated 300MB instead.\r\nAlso did the same test on Ubuntu since non-Windows code was affected too.\r\n\r\nFix #27098","Url":"https://github.com/dotnet/coreclr/pull/27130","RelatedDescription":"Open PR \"For large allocation tests, check for available memory on Windows too\" (#27130)"},{"Id":"505422546","IsPullRequest":true,"CreatedAt":"2019-10-10T21:07:17","Actor":"Anipik","Number":"27127","RawContent":null,"Title":"Update branding to preview2","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/27127","RelatedDescription":"Closed or merged PR \"Update branding to preview2\" (#27127)"},{"Id":"504930074","IsPullRequest":true,"CreatedAt":"2019-10-10T19:57:52","Actor":"AndyAyersMS","Number":"27113","RawContent":null,"Title":"JIT: add pass to merge common throw helper calls","State":"closed","Body":"Look for blocks with single statement noreturn calls, and try to reroute\r\nflow so there's just one block call that all predecessors target.\r\n\r\nResolves #14770.\r\n\r\nNote this impairs debuggability of optimized code a bit, as it can change which\r\nline of code apparently invokes a throw helper in a backtrace. But since we're\r\nalready commoning jit-inserted throw helpers (like array index OOB) this is not\r\nbreaking any new ground.\r\n\r\nWe could also handle commoning BBJ_THROW blocks, with some extra effort,\r\nbut prototyping indicates duplicate throws are pretty rare.","Url":"https://github.com/dotnet/coreclr/pull/27113","RelatedDescription":"Closed or merged PR \"JIT: add pass to merge common throw helper calls\" (#27113)"},{"Id":"505450954","IsPullRequest":false,"CreatedAt":"2019-10-10T18:56:40","Actor":"mikedn","Number":"27129","RawContent":null,"Title":"Runtime hangs on exit on a spinlock","State":"open","Body":"From time to time the jit diff tool hangs on exit:\r\n```\r\nntdll.dll!NtDelayExecution()\r\nKernelBase.dll!SleepEx()\r\ncoreclr.dll!SpinLock::SpinToAcquire() Line 270\r\ncoreclr.dll!CallCounter::IsCallCountingEnabled(MethodDesc * pMethodDesc) Line 56\r\ncoreclr.dll!TieredCompilationManager::GetInitialOptimizationTier(MethodDesc * pMethodDesc) Line 115\r\ncoreclr.dll!PrepareCodeConfig::GetJitOptimizationTier(PrepareCodeConfig * config, MethodDesc * methodDesc) Line 1215\r\ncoreclr.dll!ETW::MethodLog::SendMethodEvent(MethodDesc * pMethodDesc, unsigned long dwEventOptions, int bIsJit, SString * namespaceOrClassName, SString * methodName, SString * methodSignature, unsigned __int64 pNativeCodeStartAddress, PrepareCodeConfig * pConfig) Line 6402\r\ncoreclr.dll!ETW::MethodLog::SendEventsForJitMethodsHelper(LoaderAllocator * pLoaderAllocatorFilter, unsigned long dwEventOptions, int fLoadOrDCStart, int fUnloadOrDCEnd, int fSendMethodEvent, int fSendILToNativeMapEvent, int fGetCodeIds) Line 6889\r\ncoreclr.dll!ETW::MethodLog::SendEventsForJitMethods(BaseDomain * pDomainFilter, LoaderAllocator * pLoaderAllocatorFilter, unsigned long dwEventOptions) Line 7046\r\ncoreclr.dll!ETW::EnumerationLog::IterateDomain(BaseDomain * pDomain, unsigned long enumerationOptions) Line 7139\r\ncoreclr.dll!ETW::EnumerationLog::IterateAppDomain(AppDomain * pAppDomain, unsigned long enumerationOptions) Line 7096\r\ncoreclr.dll!ETW::EnumerationLog::EnumerationHelper(Module * moduleFilter, BaseDomain * enumerationOptions, unsigned long) Line 7412\r\ncoreclr.dll!ETW::EnumerationLog::ProcessShutdown() Line 5674\r\ncoreclr.dll!EEShutDownHelper(int fIsDllUnloading) Line 1327\r\ncoreclr.dll!EEShutDown(int fIsDllUnloading) Line 1803\r\ncoreclr.dll!EEDllMain(HINSTANCE__ * hInst, unsigned long dwReason, void * lpReserved) Line 1973\r\ncoreclr.dll!DllMain(void * hInstance, unsigned long dwReason, void * lpReserved) Line 156\r\ncoreclr.dll!CoreDllMain(void * hInstance, unsigned long dwReason, void * lpReserved) Line 107\r\nntdll.dll!LdrpCallInitRoutine()\r\n```\r\nThis is the only remaining thread in the process and all it does it to spin there. Presumably the spinlock was abandoned by a terminated thread.\r\n\r\nKnown issue? Perhaps already fixed? The jit utils are using the released 3.0, not the current coreclr build.","Url":"https://github.com/dotnet/coreclr/issues/27129","RelatedDescription":"Open issue \"Runtime hangs on exit on a spinlock\" (#27129)"},{"Id":"504886591","IsPullRequest":false,"CreatedAt":"2019-10-10T18:23:52","Actor":"maryamariyan","Number":"27111","RawContent":null,"Title":"Looking for a reference page in coreclr listing area owners per area-label","State":"closed","Body":"Since we are looking to consolidate corefx and coreclr repos together, it is worth understanding who the area owners are for each area label in coreclr. This might be implicitly known by the coreclr members but if we can identify that, then the labeler can reliably set owners as reviewers to issues/PR at the time of assigning labels.\r\n\r\nThe existing list of area owners maintained for corefx can be found here:\r\nhttps://github.com/dotnet/corefx/blob/master/Documentation/project-docs/issue-guide.md\r\nThe goal of this issue is to compile something similar to the issue-guide above (as a single source of truth), but for coreclr instead.\r\n\r\nRelated to https://github.com/dotnet/coreclr/issues/26175\r\n","Url":"https://github.com/dotnet/coreclr/issues/27111","RelatedDescription":"Closed issue \"Looking for a reference page in coreclr listing area owners per area-label\" (#27111)"},{"Id":"505383811","IsPullRequest":false,"CreatedAt":"2019-10-10T16:35:16","Actor":"jashook","Number":"27126","RawContent":null,"Title":"Clang failing with stack trace on linux arm64 builds","State":"open","Body":"Strangely this does not always happen. @jkoritzinsky could this be fallout from the cmake changes?\r\n\r\nhttps://dev.azure.com/dnceng/public/_build/results?buildId=383735\r\n\r\n```\r\n[  2%] Building CXX object src/coreclr/hosts/unixcoreruncommon/CMakeFiles/unixcoreruncommon.dir/coreruncommon.cpp.o\r\n[  2%] Building C object src/pal/src/libunwind/src/CMakeFiles/libunwind.dir/mi/Lset_caching_policy.c.o\r\n[  2%] Building C object src/pal/src/libunwind/src/CMakeFiles/libunwind.dir/mi/Lset_cache_size.c.o\r\n[  2%] Building ASM object src/pal/src/libunwind/src/CMakeFiles/libunwind.dir/arm/getcontext.S.o\r\n[  2%] Building C object src/pal/src/libunwind/src/CMakeFiles/libunwind.dir/arm/Lapply_reg_state.c.o\r\n[  2%] Building C object src/pal/src/libunwind/src/CMakeFiles/libunwind.dir/arm/Lreg_states_iterate.c.o\r\n[  2%] Building C object src/pal/src/libunwind/src/CMakeFiles/libunwind.dir/arm/Lcreate_addr_space.c.o\r\n[  2%] Building C object src/pal/src/libunwind/src/CMakeFiles/libunwind.dir/arm/Lget_proc_info.c.o\r\n#0 0x00007f1dc58b154a llvm::sys::PrintStackTrace(llvm::raw_ostream&) (/usr/lib/x86_64-linux-gnu/libLLVM-5.0.so.1+0x7fd54a)\r\n#1 0x00007f1dc58af6ce llvm::sys::RunSignalHandlers() (/usr/lib/x86_64-linux-gnu/libLLVM-5.0.so.1+0x7fb6ce)\r\n#2 0x00007f1dc58af81c (/usr/lib/x86_64-linux-gnu/libLLVM-5.0.so.1+0x7fb81c)\r\n#3 0x00007f1dc868d390 __restore_rt (/lib/x86_64-linux-gnu/libpthread.so.0+0x11390)\r\n#4 0x0000000001a25167 clang::Lexer::LexTokenInternal(clang::Token&, bool) (/usr/lib/llvm-5.0/bin/clang+0x1a25167)\r\n#5 0x0000000001a911e8 clang::Preprocessor::Lex(clang::Token&) (/usr/lib/llvm-5.0/bin/clang+0x1a911e8)\r\n#6 0x0000000001a525f2 clang::Preprocessor::ReadOptionalMacroParameterListAndBody(clang::Token const&, bool) (/usr/lib/llvm-5.0/bin/clang+0x1a525f2)\r\n#7 0x0000000001a5b17d clang::Preprocessor::HandleDefineDirective(clang::Token&, bool) (/usr/lib/llvm-5.0/bin/clang+0x1a5b17d)\r\n#8 0x0000000001a5c2c8 clang::Preprocessor::HandleDirective(clang::Token&) (/usr/lib/llvm-5.0/bin/clang+0x1a5c2c8)\r\n#9 0x0000000001a2567f clang::Lexer::LexTokenInternal(clang::Token&, bool) (/usr/lib/llvm-5.0/bin/clang+0x1a2567f)\r\n#10 0x0000000001a911e8 clang::Preprocessor::Lex(clang::Token&) (/usr/lib/llvm-5.0/bin/clang+0x1a911e8)\r\n#11 0x0000000000e2d270 clang::Parser::ParseDeclOrFunctionDefInternal(clang::Parser::ParsedAttributesWithRange&, clang::ParsingDeclSpec&, clang::AccessSpecifier) (/usr/lib/llvm-5.0/bin/clang+0xe2d270)\r\n#12 0x0000000000e2d961 (/usr/lib/llvm-5.0/bin/clang+0xe2d961)\r\n#13 0x0000000000e2d99f clang::Parser::ParseDeclarationOrFunctionDefinition(clang::Parser::ParsedAttributesWithRange&, clang::ParsingDeclSpec*, clang::AccessSpecifier) (/usr/lib/llvm-5.0/bin/clang+0xe2d99f)\r\n#14 0x0000000000e33eb8 clang::Parser::ParseExternalDeclaration(clang::Parser::ParsedAttributesWithRange&, clang::ParsingDeclSpec*) (/usr/lib/llvm-5.0/bin/clang+0xe33eb8)\r\n#15 0x0000000000e34a25 clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&) (/usr/lib/llvm-5.0/bin/clang+0xe34a25)\r\n#16 0x0000000000e297eb clang::ParseAST(clang::Sema&, bool, bool) (/usr/lib/llvm-5.0/bin/clang+0xe297eb)\r\n#17 0x0000000000d057a7 clang::CodeGenAction::ExecuteAction() (/usr/lib/llvm-5.0/bin/clang+0xd057a7)\r\n#18 0x0000000000ba247e clang::FrontendAction::Execute() (/usr/lib/llvm-5.0/bin/clang+0xba247e)\r\n#19 0x0000000000b6f476 clang::CompilerInstance::ExecuteAction(clang::FrontendAction&) (/usr/lib/llvm-5.0/bin/clang+0xb6f476)\r\n#20 0x0000000000c290b2 clang::ExecuteCompilerInvocation(clang::CompilerInstance*) (/usr/lib/llvm-5.0/bin/clang+0xc290b2)\r\n#21 0x00000000007fb498 cc1_main(llvm::ArrayRef<char const*>, char const*, void*) (/usr/lib/llvm-5.0/bin/clang+0x7fb498)\r\n#22 0x00000000007e95e7 main (/usr/lib/llvm-5.0/bin/clang+0x7e95e7)\r\n#23 0x00007f1dc4238830 __libc_start_main /build/glibc-LK5gWL/glibc-2.23/csu/../csu/libc-start.c:325:0\r\n#24 0x00000000007f9359 _start (/usr/lib/llvm-5.0/bin/clang+0x7f9359)\r\n\r\n```","Url":"https://github.com/dotnet/coreclr/issues/27126","RelatedDescription":"Open issue \"Clang failing with stack trace on linux arm64 builds\" (#27126)"},{"Id":"505233402","IsPullRequest":false,"CreatedAt":"2019-10-10T15:11:51","Actor":"makxenov","Number":"27125","RawContent":null,"Title":"[Linux/armel] Crash in System.GC.GetGCMemoryInfo()","State":"closed","Body":"Following program crashes on Linux/armel with SIGSEGV (release 3.0)\r\n```\r\nusing System;\r\n\r\nnamespace getmemoryinfo\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n\t    GCMemoryInfo meminfo = System.GC.GetGCMemoryInfo();\r\n            Console.WriteLine(meminfo.HeapSizeBytes);\r\n        }\r\n    }\r\n}\r\n\r\n```\r\n```\r\nsh-3.2# gdb --args ./corerun /home/owner/getmemoryinfo.dll \r\nThread 1 \"corerun\" received signal SIGSEGV, Segmentation fault.\r\n0xb674315c in WKS::GCHeap::GetMemoryInfo (this=0x55250, highMemLoadThresholdBytes=0xbeffea70, totalAvailableMemoryBytes=0xbeffea68, lastRecordedMemLoadBytes=0xbeffea64, lastRecordedMemLoadPct=0xbeffea60, \r\n    lastRecordedHeapSizeBytes=0xbeffea5c, lastRecordedFragmentationBytes=0xb6c1265c <vtable for Frame+8>) at /usr/src/debug/coreclr-3.0.0/src/gc/gc.cpp:36829\r\n36829\t    *lastRecordedFragmentationBytes = gc_heap::last_gc_fragmentation;\r\n(gdb) bt\r\n#0  0xb674315c in WKS::GCHeap::GetMemoryInfo (this=0x55250, highMemLoadThresholdBytes=0xbeffea70, totalAvailableMemoryBytes=0xbeffea68, lastRecordedMemLoadBytes=0xbeffea64, lastRecordedMemLoadPct=0xbeffea60, \r\n    lastRecordedHeapSizeBytes=0xbeffea5c, lastRecordedFragmentationBytes=0xb6c1265c <vtable for Frame+8>) at /usr/src/debug/coreclr-3.0.0/src/gc/gc.cpp:36829\r\n#1  0xb647f086 in GCInterface::GetMemoryInfo (highMemLoadThreshold=0xbeffea70, totalAvailableMemoryBytes=0xbeffea68, lastRecordedMemLoadBytes=0xbeffea64, lastRecordedMemLoadPct=0xbeffea60, lastRecordedHeapSizeBytes=0xbeffea5c, \r\n    lastRecordedFragmentationBytes=0xb6c1265c <vtable for Frame+8>) at /usr/src/debug/coreclr-3.0.0/src/vm/comutilnative.cpp:882\r\n#2  0xaff8ea56 in ?? ()\r\nBacktrace stopped: previous frame identical to this frame (corrupt stack?)\r\n(gdb) f 2\r\n#2  0xaff8ea56 in ?? ()\r\n(gdb) disassemble $pc-50, $pc\r\nDump of assembler code from 0xaff8ea24 to 0xaff8ea56:\r\n   0xaff8ea24:\tmovs\tr6, r4\r\n   0xaff8ea26:\tasrs\tr0, r6, #32\r\n   0xaff8ea28:\tadd\tr4, sp, #56\t; 0x38\r\n   0xaff8ea2a:\tvqshl.u16\t<illegal reg q4.5>, <illegal reg q0.5>, q8\r\n   0xaff8ea2e:\tlsls\tr1, r4, #25\r\n   0xaff8ea30:\tb.n\t0xaff8e66c\r\n   0xaff8ea32:\tadd\tr7, sp, #976\t; 0x3d0\r\n   0xaff8ea34:\tstmdb\tsp!, {r4, r10, r11, lr}\r\n   0xaff8ea38:\tsub\tsp, #152\t; 0x98\r\n   0xaff8ea3a:\tadd.w\tr11, sp, #160\t; 0xa0\r\n   0xaff8ea3e:\tstr\tr0, [sp, #148]\t; 0x94\r\n   0xaff8ea40:\tadd\tr0, sp, #124\t; 0x7c\r\n   0xaff8ea42:\tstr\tr0, [sp, #0]\r\n   0xaff8ea44:\tadd\tr0, sp, #144\t; 0x90\r\n   0xaff8ea46:\tadd\tr1, sp, #136\t; 0x88\r\n   0xaff8ea48:\tadd\tr2, sp, #132\t; 0x84\r\n   0xaff8ea4a:\tadd\tr3, sp, #128\t; 0x80\r\n   0xaff8ea4c:\tmovw\tlr, #61469\t; 0xf01d\r\n   0xaff8ea50:\tmovt\tlr, #46663\t; 0xb647\r\n   0xaff8ea54:\tblx\tlr\r\nEnd of assembler dump.\r\n```\r\nReverting https://github.com/dotnet/coreclr/commit/11137fbe46f524dfd6c2f7bb2a77035aa225524c solves the problem.\r\nCC @alpencolt","Url":"https://github.com/dotnet/coreclr/issues/27125","RelatedDescription":"Closed issue \"[Linux/armel] Crash in System.GC.GetGCMemoryInfo()\" (#27125)"},{"Id":"505131965","IsPullRequest":false,"CreatedAt":"2019-10-10T08:58:04","Actor":"geoffrey-vl","Number":"27124","RawContent":null,"Title":".net core 3.0 self-contained hello world app not working on yocto rocko","State":"open","Body":"We have .net core 3.0 self-contained hello world app.\r\n\r\n- Its working on one device which has an i.mx6Q SOM and yocto 2.2 morty based distro\r\n- Its **not** working on another device which also has an i.mx6Q SOM and yocto 2.4 rocko based distro\r\n\r\nIn the end I made it work doing the following:\r\n\r\n- remove `libcoreclrtraceptprovider.so`\r\n- remove from `ConsoleApp1.deps.json:` \r\n```\r\n     \"libcoreclrtraceptprovider.so\": {\r\n            \"fileVersion\": \"0.0.0.0\"\r\n     },\r\n```\r\n\r\nI've reported all debug traces and so forth in following GH issue: [#3575](https://github.com/dotnet/core/issues/3575). \r\nPS: I only released now that it should have been reported over here instead, so I'll close the other one and link it.\r\n\r\nI guess it may be related to [#24038](https://github.com/dotnet/coreclr/issues/24038) and [#19025](https://github.com/dotnet/coreclr/issues/19025). Though both are labelled as fixed, which is not the case over here.","Url":"https://github.com/dotnet/coreclr/issues/27124","RelatedDescription":"Open issue \".net core 3.0 self-contained hello world app not working on yocto rocko\" (#27124)"},{"Id":"505059781","IsPullRequest":true,"CreatedAt":"2019-10-10T06:17:33","Actor":"jkotas","Number":"27123","RawContent":null,"Title":"Replace primitive Array fcalls with managed implementations","State":"open","Body":"Prep-work for #27106","Url":"https://github.com/dotnet/coreclr/pull/27123","RelatedDescription":"Open PR \"Replace primitive Array fcalls with managed implementations\" (#27123)"},{"Id":"505042847","IsPullRequest":true,"CreatedAt":"2019-10-10T05:48:56","Actor":"a235689741023","Number":"27121","RawContent":null,"Title":"try to pull","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/27121","RelatedDescription":"Closed or merged PR \"try to pull\" (#27121)"},{"Id":"505047281","IsPullRequest":true,"CreatedAt":"2019-10-10T05:40:40","Actor":"franksinankaya","Number":"27122","RawContent":null,"Title":"Replace gt## with As##","State":"open","Body":"@am11 @jkotas @janvorli @sandreenko ","Url":"https://github.com/dotnet/coreclr/pull/27122","RelatedDescription":"Open PR \"Replace gt## with As##\" (#27122)"},{"Id":"504944389","IsPullRequest":true,"CreatedAt":"2019-10-10T05:27:51","Actor":"erozenfeld","Number":"27117","RawContent":null,"Title":"Rename tests for issue 27107.","State":"closed","Body":"#27108 fixed #27107 but the tests had an incorrect placeholder name.\r\n\r\nRename the test directory and files.","Url":"https://github.com/dotnet/coreclr/pull/27117","RelatedDescription":"Closed or merged PR \"Rename tests for issue 27107.\" (#27117)"},{"Id":"505042263","IsPullRequest":true,"CreatedAt":"2019-10-10T05:24:52","Actor":"franksinankaya","Number":"27120","RawContent":null,"Title":"Replace regNum with GetRegNum()","State":"open","Body":"@am11  @jkotas @janvorli @sandreenko ","Url":"https://github.com/dotnet/coreclr/pull/27120","RelatedDescription":"Open PR \"Replace regNum with GetRegNum()\" (#27120)"},{"Id":"504958989","IsPullRequest":true,"CreatedAt":"2019-10-10T00:13:12","Actor":"GrabYourPitchforks","Number":"27119","RawContent":null,"Title":"[WIP] Add SIMD-optimized \"is this well-formed UTF-8?\" logic","State":"open","Body":"__WIP__ because I'm still tracking down some performance nits and working on tests. This uses the newly-added SSE2 and BMI1 intrinsics to optimize the implementation of `UTF8Encoding.GetCharCount` (which is also used as the internal workhorse for `Utf8String.IsWellFormed`).\r\n\r\nFor texts which are primarily a mixture of ASCII and 2-byte subsequences (Greek, Cyrillic, Western European languages with accented characters, etc.), this provides a marked performance improvement in the validation APIs. See in particular the last two rows of the below table.\r\n\r\nThere's some noise while running the tests. I'm not quite sure what's causing this, but it seems my earlier concerns about this regressing 3-byte processing may not have been warranted.\r\n\r\n|        Method | Toolchain |      Corpus |       Mean |     Error |    StdDev | Ratio |\r\n|-------------- |---------- |------------ |-----------:|----------:|----------:|------:|\r\n| **Utf8_Is_Valid** |    **master** |    **11-0.txt** |  **42.041 us** | **0.3183 us** | **0.2977 us** |  **1.00** |\r\n| Utf8_Is_Valid |     proto |    11-0.txt |  42.612 us | 0.4118 us | 0.3852 us |  1.01 |\r\n| Utf8_Is_Valid |    proto2 |    11-0.txt |  40.538 us | 0.5063 us | 0.4228 us |  0.96 |\r\n|               |           |             |            |           |           |       |\r\n| **Utf8_Is_Valid** |    **master** |      **11.txt** |   **3.462 us** | **0.0172 us** | **0.0144 us** |  **1.00** |\r\n| Utf8_Is_Valid |     proto |      11.txt |   3.376 us | 0.0440 us | 0.0390 us |  0.98 |\r\n| Utf8_Is_Valid |    proto2 |      11.txt |   3.412 us | 0.0152 us | 0.0143 us |  0.98 |\r\n|               |           |             |            |           |           |       |\r\n| **Utf8_Is_Valid** |    **master** | **25249-0.txt** |  **72.546 us** | **0.3310 us** | **0.2764 us** |  **1.00** |\r\n| Utf8_Is_Valid |     proto | 25249-0.txt |  66.819 us | 0.3117 us | 0.2434 us |  0.92 |\r\n| Utf8_Is_Valid |    proto2 | 25249-0.txt |  69.873 us | 0.3105 us | 0.2593 us |  0.96 |\r\n|               |           |             |            |           |           |       |\r\n| **Utf8_Is_Valid** |    **master** | **30774-0.txt** |  **76.668 us** | **0.9464 us** | **0.8390 us** |  **1.00** |\r\n| Utf8_Is_Valid |     proto | 30774-0.txt |  36.461 us | 0.3560 us | 0.3330 us |  0.48 |\r\n| Utf8_Is_Valid |    proto2 | 30774-0.txt |  30.343 us | 0.5120 us | 0.4276 us |  0.40 |\r\n|               |           |             |            |           |           |       |\r\n| **Utf8_Is_Valid** |    **master** | **39251-0.txt** | **133.060 us** | **2.5572 us** | **2.3920 us** |  **1.00** |\r\n| Utf8_Is_Valid |     proto | 39251-0.txt |  51.215 us | 1.0158 us | 0.9502 us |  0.39 |\r\n| Utf8_Is_Valid |    proto2 | 39251-0.txt |  42.564 us | 0.4976 us | 0.4156 us |  0.32 |","Url":"https://github.com/dotnet/coreclr/pull/27119","RelatedDescription":"Open PR \"[WIP] Add SIMD-optimized \"is this well-formed UTF-8?\" logic\" (#27119)"},{"Id":"504952007","IsPullRequest":false,"CreatedAt":"2019-10-09T23:47:32","Actor":"cshung","Number":"27118","RawContent":null,"Title":"[crossgen2] Handle MethodRef in AttributePresenceFilterNode.ReadCustomAttributeTypeNameWithoutResolving","State":"open","Body":"Handle the TODO comment on [this](https://github.com/dotnet/coreclr/blob/c50db1a85928e97a13af7450e4b9c58c6f56a002/src/tools/crossgen2/ILCompiler.ReadyToRun/Compiler/DependencyAnalysis/ReadyToRun/AttributePresenceFilterNode.cs#L115) line.\r\n\r\nAs of the time of writing, it is not a problem because `AttributePresenceFilterNode` handles `System.Private.CoreLib.dll` only. If we reuse the filter for some other module, this will potentially be a problem.\r\n","Url":"https://github.com/dotnet/coreclr/issues/27118","RelatedDescription":"Open issue \"[crossgen2] Handle MethodRef in AttributePresenceFilterNode.ReadCustomAttributeTypeNameWithoutResolving\" (#27118)"},{"Id":"504939797","IsPullRequest":false,"CreatedAt":"2019-10-09T23:00:36","Actor":"cshung","Number":"27116","RawContent":null,"Title":"[crossgen2] Avoid calling GetData() twice ","State":"open","Body":"As of now, we are calling `GetData()` with `relocsOnly == false` twice for some nodes. This situation is found and discussed [here](https://github.com/dotnet/coreclr/pull/27084#discussion_r333190008). \r\n\r\nWe should figure out a solution that does not call `GetData()` twice.\r\n\r\nWhen fixing this issue, make sure we also eliminate the cache defined [here](https://github.com/dotnet/coreclr/blob/c50db1a85928e97a13af7450e4b9c58c6f56a002/src/tools/crossgen2/ILCompiler.ReadyToRun/Compiler/DependencyAnalysis/ReadyToRun/AttributePresenceFilterNode.cs#L21).","Url":"https://github.com/dotnet/coreclr/issues/27116","RelatedDescription":"Open issue \"[crossgen2] Avoid calling GetData() twice \" (#27116)"},{"Id":"504936679","IsPullRequest":true,"CreatedAt":"2019-10-09T22:50:36","Actor":"delmyers","Number":"27115","RawContent":null,"Title":"Wrap MoveNext Action for TPL event tracing","State":"open","Body":"Wraps the MoveNext action of the AsyncStateMachineBox in a\r\ncontinuation wrapper when async causality tracing is on so that the\r\nTPL event source can find the task that is associated with a\r\ncontinuation. Does not wrap otherwise.","Url":"https://github.com/dotnet/coreclr/pull/27115","RelatedDescription":"Open PR \"Wrap MoveNext Action for TPL event tracing\" (#27115)"},{"Id":"504930141","IsPullRequest":true,"CreatedAt":"2019-10-09T22:31:13","Actor":"erozenfeld","Number":"27114","RawContent":null,"Title":"Jit: Fix SetIndirExceptionFlags.","State":"open","Body":"SetIndirExceptionFlags should not set `GTF_IND_NONFAULTING` flag if the\r\naddress has `GTF_EXCEPT` flag.\r\n\r\nThe failing scenario was:\r\n\r\nWe were setting `GTF_IND_NONFAULTING` on this indirection (since `ADDR` Node\r\ncan't be null)\r\n\r\n```\r\n               [000003] *--XG-------              *  IND       int\r\n               [000002] ---XG-------              \\--*  ADDR      byref  Zero Fseq[i]\r\n               [000001] ---XG-------                 \\--*  FIELD     struct s\r\n               [000000] ------------                    \\--*  LCL_VAR   ref    V00 arg0\r\n```\r\nthis was then transformed to\r\n\r\n```\r\n               [000003] *---G-------              *  IND       int\r\n               [000013] -----+------              \\--*  ADD       byref\r\n               [000000] -----+------                 +--*  LCL_VAR   ref    V00 arg0\r\n               [000012] -----+------                 \\--*  CNS_INT   long   8 field offset Fseq[s, i]\r\n```\r\nThe `GTF_EXCEPT` flag was cleared on `IND` because it had `GTF_IND_NONFAULTING`set\r\nand the address no longer had  `GTF_EXCEPT` flag.\r\n\r\nFixes #27027.","Url":"https://github.com/dotnet/coreclr/pull/27114","RelatedDescription":"Open PR \"Jit: Fix SetIndirExceptionFlags.\" (#27114)"},{"Id":"504888481","IsPullRequest":false,"CreatedAt":"2019-10-09T20:52:24","Actor":"richlander","Number":"27112","RawContent":null,"Title":"Crossgen not supported on Alpine","State":"open","Body":"I tried to compile an app on Alpine. This is the command:\r\n\r\n```console\r\ndotnet publish -c release -o /app -r linux-musl-x64 --self-contained false /p:PublishReadyToRun=true\r\n```\r\n\r\nThis is what I see:\r\n\r\n```console\r\n/usr/share/dotnet/sdk/3.0.100/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.Publish.targets(252,5): error NETSDK1095: Optimizing assemblies for performance is not supported for the selected target platform or architecture. Please verify you are using a supported runtime identifier, or set the PublishReadyToRun property to false. [/source/dotnetapp.csproj]\r\n```\r\n\r\nWe should fix this for 5.0.","Url":"https://github.com/dotnet/coreclr/issues/27112","RelatedDescription":"Open issue \"Crossgen not supported on Alpine\" (#27112)"}],"ResultType":"GitHubIssue"},"CLI-Issues":{"Issues":[{"Id":"505628357","IsPullRequest":true,"CreatedAt":"2019-10-11T04:20:12","Actor":"dotnet-maestro[bot]","Number":"12871","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/core-setup","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191010.20\r\n- **Date Produced**: 10/11/2019 3:11 AM\r\n- **Commit**: 966989290a99db7e31867dabb1aa6dac6d045813\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.1.0-preview2.19510.20\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.1.0-preview2.19510.20\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.1.0-preview2.19510.20\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.1.0-preview2.19510.20\r\n  - **Microsoft.NETCore.App.Runtime.win-x64** -> 3.1.0-preview2.19510.20\r\n\r\n[marker]: <> (End:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n\r\n[marker]: <> (Begin:Coherency Updates)\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n- **System.Text.Json** -> 4.7.0-preview2.19510.10 (parent: Microsoft.NETCore.App.Runtime.win-x64)\r\n\r\n[marker]: <> (End:Coherency Updates)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12871","RelatedDescription":"Open PR \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#12871)"},{"Id":"505568929","IsPullRequest":true,"CreatedAt":"2019-10-11T03:48:59","Actor":"dotnet-bot","Number":"12866","RawContent":null,"Title":"Merge release/2.1.8xx to release/2.2.2xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.1.8xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.8xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.1.8xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.8xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/12866","RelatedDescription":"Closed or merged PR \"Merge release/2.1.8xx to release/2.2.2xx\" (#12866)"},{"Id":"505611218","IsPullRequest":false,"CreatedAt":"2019-10-11T03:07:16","Actor":"khteh","Number":"12870","RawContent":null,"Title":"error MSB6006: \"csc.dll\" exited with code 137","State":"open","Body":"## Steps to reproduce\r\n\r\n![Screenshot from 2019-10-11 10-54-24](https://user-images.githubusercontent.com/3871483/66621543-3e970b80-ec17-11e9-925d-7a2ac8db224f.png)\r\n\r\n## Expected  behavior\r\n\r\n\r\n## Actual behavior\r\n\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\n$ dn --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100\r\n Commit:    04339c3a26\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  19.04\r\n OS Platform: Linux\r\n RID:         ubuntu.19.04-x64\r\n Base Path:   /usr/share/dotnet-3.0.100/sdk/3.0.100/\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0\r\n  Commit:  7d57652f33\r\n\r\n.NET Core SDKs installed:\r\n  3.0.100 [/usr/share/dotnet-3.0.100/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.App 3.0.0 [/usr/share/dotnet-3.0.100/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.0.0 [/usr/share/dotnet-3.0.100/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/12870","RelatedDescription":"Open issue \"error MSB6006: \"csc.dll\" exited with code 137\" (#12870)"},{"Id":"505569074","IsPullRequest":true,"CreatedAt":"2019-10-11T00:04:33","Actor":"dotnet-bot","Number":"12869","RawContent":null,"Title":"Merge release/3.1.1xx to master","State":"open","Body":"\nThis is an automatically generated pull request from release/3.1.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.1.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.1.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.1.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/12869","RelatedDescription":"Open PR \"Merge release/3.1.1xx to master\" (#12869)"},{"Id":"505569044","IsPullRequest":true,"CreatedAt":"2019-10-11T00:04:26","Actor":"dotnet-bot","Number":"12868","RawContent":null,"Title":"Merge release/3.0.1xx to release/3.1.1xx","State":"open","Body":"\nThis is an automatically generated pull request from release/3.0.1xx into release/3.1.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-release/3.1.1xx\ngit reset --hard upstream/release/3.1.1xx\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-release/3.1.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/12868","RelatedDescription":"Open PR \"Merge release/3.0.1xx to release/3.1.1xx\" (#12868)"},{"Id":"505569015","IsPullRequest":true,"CreatedAt":"2019-10-11T00:04:19","Actor":"dotnet-bot","Number":"12867","RawContent":null,"Title":"Merge release/2.2.4xx to release/3.0.1xx","State":"open","Body":"\nThis is an automatically generated pull request from release/2.2.4xx into release/3.0.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.4xx-to-release/3.0.1xx\ngit reset --hard upstream/release/3.0.1xx\ngit merge upstream/release/2.2.4xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.4xx-to-release/3.0.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/12867","RelatedDescription":"Open PR \"Merge release/2.2.4xx to release/3.0.1xx\" (#12867)"},{"Id":"505568881","IsPullRequest":true,"CreatedAt":"2019-10-11T00:03:47","Actor":"dotnet-bot","Number":"12865","RawContent":null,"Title":"Merge release/2.1.5xx to release/2.2.1xx","State":"open","Body":"\nThis is an automatically generated pull request from release/2.1.5xx into release/2.2.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.5xx-to-release/2.2.1xx\ngit reset --hard upstream/release/2.2.1xx\ngit merge upstream/release/2.1.5xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.5xx-to-release/2.2.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/cli/pull/12865","RelatedDescription":"Open PR \"Merge release/2.1.5xx to release/2.2.1xx\" (#12865)"},{"Id":"505529212","IsPullRequest":true,"CreatedAt":"2019-10-10T22:30:52","Actor":"mmitche","Number":"12864","RawContent":null,"Title":"[release/2.2.4xx] Merge from release/2.2.2xx","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/12864","RelatedDescription":"Closed or merged PR \"[release/2.2.4xx] Merge from release/2.2.2xx\" (#12864)"},{"Id":"505512064","IsPullRequest":true,"CreatedAt":"2019-10-10T22:30:23","Actor":"mmitche","Number":"12863","RawContent":null,"Title":"[release/2.1.8xx] Merge from 2.1.6xx","State":"closed","Body":"\r\n","Url":"https://github.com/dotnet/cli/pull/12863","RelatedDescription":"Closed or merged PR \"[release/2.1.8xx] Merge from 2.1.6xx\" (#12863)"},{"Id":"505493503","IsPullRequest":true,"CreatedAt":"2019-10-10T21:47:30","Actor":"nguerrera","Number":"12862","RawContent":null,"Title":"Merge 2.2.1xx to 2.2.2xx","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/12862","RelatedDescription":"Closed or merged PR \"Merge 2.2.1xx to 2.2.2xx\" (#12862)"},{"Id":"505398217","IsPullRequest":true,"CreatedAt":"2019-10-10T17:45:30","Actor":"dotnet-maestro[bot]","Number":"12861","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191010.2\r\n- **Date Produced**: 10/10/2019 3:56 PM\r\n- **Commit**: 54dcbe32cfe5db393e1e6cc6a52593e98e96e94a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19510.2\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19510.2\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19510.2\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19510.2\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19510.2\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12861","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12861)"},{"Id":"505370205","IsPullRequest":false,"CreatedAt":"2019-10-10T16:08:16","Actor":"stuartd","Number":"12860","RawContent":null,"Title":"Calling dotnet test from a shell script fails on Ubuntu server with net core 3","State":"open","Body":"We have a shell script that runs our .net core 3 integration tests on a Ubuntu server: it was running just fine, but since upgrading to .net core 3 it has stopped working.\r\n\r\nIt still works on OSX and in WSL using net core 3 (and the equivalent .bat file works on Windows). \r\n\r\nI have reinstalled .net core 3 on the server but to no effect.\r\n\r\nThere are two problems, which are detailed below:\r\n\r\n1. Calling `dotnet test` from a shell script fails with a permissions error in net core 3, but when calling it from the command line it will run - however..\r\n2. Parameters to `dotnet test` are somehow mangled when running from the command line.\r\n\r\n## Permissions error\r\n\r\nThe shell script is just this:\r\n\r\n```bash\r\n# this works just fine\r\ngit pull\r\n\r\n# run the project which gets the repo path, CDs to the test project folder, \r\n# and runs the tests, passing along any parameters as a test filter\r\ndotnet run --project TestRunner/TestRunner.csproj $@ \r\n\r\n# run the project which analyzes the test results and generates a results page\r\ndotnet run --project TestResultAnalyzer/TestResultAnalyzer/TestResultAnalyzer.csproj \r\n```\r\n\r\nThe first issue is a permissions error calling `dotnet test` from the script: this is the diagnostic output of the TestRunner project:\r\n\r\n```\r\nCurrent directory: /home/username/code/codename/src/API/App/App.Tests\r\nTest command:\r\ndotnet test --filter skeleton -l:trx;LogFileName=App_Test_Run_2019-10-10-11-40.trx -r /home/username/code/codename/src/API/TestRuns/App\r\nStarting process\r\n```\r\nAnd this is the error which occurs when starting the process:\r\n\r\n> Unhandled exception. System.ComponentModel.Win32Exception (13): Permission denied\r\n   at System.Diagnostics.Process.ForkAndExecProcess(String filename, String[] argv, String[] envp, String cwd, Boolean redirectStdin, Boolean redirectStdout, Boolean redirectStderr, Boolean setCredentials, UInt32 userId, UInt32 groupId, UInt32[] groups, Int32& stdinFd, Int32& stdoutFd, Int32& stderrFd, Boolean usesTerminal, Boolean throwOnNoExec)\r\n   at System.Diagnostics.Process.StartCore(ProcessStartInfo startInfo)\r\n   at System.Diagnostics.Process.Start()\r\n   at TestRunner.Program.Main(String[] args) in /home/username/code/codename/src/Misc/TestRunner/Program.cs:line 77\r\n   \r\nAnd this is the code:\r\n\r\n```cs\r\nprocess = new Process {\r\n\tStartInfo = {\r\n\t\tArguments = $\"test {arguments} -l:trx;LogFileName={testRunName}.trx -r {testResultFolder}\",\r\n\t\tFileName = \"dotnet\",\r\n\t\tUseShellExecute = false\r\n\t}\r\n};\r\n                      \r\nvar commandDebug = $\"{process.StartInfo.FileName} {process.StartInfo.Arguments}\";\r\n\r\nConsole.WriteLine(\"Test command\");\r\nConsole.WriteLine(commandDebug);\r\nConsole.WriteLine(\"Starting process\");\r\nprocess.Start(); // boom\r\n```\r\n   \r\nSo, my first issue is:\r\n\r\nWhy is calling `dotnet test` from a shell script resulting in a permissions error, when calling it from the command line does not?\r\n\r\n## Test parameter mangling\r\n\r\nAnd that leads to my second issue.\r\n\r\nIf I run the above from the command line (note we are using NUnit as the test runner)\r\n\r\n`dotnet test --filter skeleton -l:trx;LogFileName=App_Test_Run_2019-10-10-11-40.trx -r /home/username/code/codename/src/API/TestRuns/App`\r\n\r\nThen the tests run, but I get this error message:\r\n\r\n> -r: command not found\r\n\r\nAs per [the documentation](https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-test), `-r` specifies the location of the test output file:\r\n \r\n> Directory in which to find the binaries to run.\r\n> -r|--results-directory <PATH>\r\n\r\nAnd indeed the file is not put in the right place, it ends out here, instead of in the `TestRuns/App` folder as specified:\r\n\r\n> /home/username/code/codename/src/API/App/App.Tests/TestResults/_servername_2019-10-10_11_46_36.trx\r\n\r\nAnd thus the analyzer can't find it, as it's not in the right place.\r\n\r\nNow as I said above, this exact same code works in Windows, OSX and WSL and worked on Ubuntu with net core 2.2 - but on the Ubuntu server it Just. Will. Not. Work. with net core 3.\r\n\r\nSo the second issue is:\r\n\r\nWhy is this test syntax not working on Ubuntu under net core 3?\r\n\r\nSupplementary info:\r\n\r\n#### Output of `dotnet --info`\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100\r\n Commit:    04339c3a26\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  18.04\r\n OS Platform: Linux\r\n RID:         ubuntu.18.04-x64\r\n Base Path:   /snap/dotnet-sdk/49/sdk/3.0.100/\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0\r\n  Commit:  7d57652f33\r\n\r\n.NET Core SDKs installed:\r\n  3.0.100 [/snap/dotnet-sdk/49/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.App 3.0.0 [/snap/dotnet-sdk/49/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.0.0 [/snap/dotnet-sdk/49/shared/Microsoft.NETCore.App]\r\n```\r\n  \r\n#### Package references in the test project\r\n\r\n```xml\r\n<ItemGroup>\r\n  <PackageReference Include=\"FluentAssertions\" Version=\"5.9.0\" />\r\n  <PackageReference Include=\"JetBrains.DotMemoryUnit\" Version=\"3.0.20171219.105559\" />\r\n  <PackageReference Include=\"nunit\" Version=\"3.12.0\" />\r\n  <PackageReference Include=\"NUnit.ConsoleRunner\" Version=\"3.10.0\" />\r\n  <PackageReference Include=\"NUnit3TestAdapter\" Version=\"3.15.1\" />\r\n  <PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"16.3.0\" />\r\n</ItemGroup>\r\n```  \r\n\r\n### Server culture\r\n\r\nThe server culture is en-US-POSIX (which hates humans and their puny case-sensitivity, but I digress..)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n \r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/12860","RelatedDescription":"Open issue \"Calling dotnet test from a shell script fails on Ubuntu server with net core 3\" (#12860)"},{"Id":"505334552","IsPullRequest":true,"CreatedAt":"2019-10-10T15:13:36","Actor":"mmitche","Number":"12859","RawContent":null,"Title":"Switch to correct SHA2 cert (#12855)","State":"closed","Body":"SHA1 certs were deprecated and removed from ESRP. Move to the correct cert for external assemblies\r\n\r\nPort from 2.2.1xx\r\n","Url":"https://github.com/dotnet/cli/pull/12859","RelatedDescription":"Closed or merged PR \"Switch to correct SHA2 cert (#12855)\" (#12859)"},{"Id":"505324915","IsPullRequest":false,"CreatedAt":"2019-10-10T14:52:07","Actor":"aolszowka","Number":"12858","RawContent":null,"Title":"Consdering Adding dotnet sln sort","State":"open","Body":"## Steps to reproduce\r\nHave The following:\r\n\r\n1.  One Solution File (`Common.sln`)\r\n2.  Two Branches (`FeatureA` / `FeatureB`)\r\n3.  Two Projects (`A.csproj` / `B.csproj` )\r\n\r\nOn `FeatureA` Branch Developer X realizes that they need to add components `A.csproj` and `B.csproj` to `Common.sln` to support a feature they are working on. They perform an `dotnet sln add` in the order `A.csproj` and `B.csproj`\r\n\r\nOn `FeatureB` Branch Developer Y realizes that they also need to add components `A.csproj` and `B.csproj` to `Common.sln` to support their feature. They perform an `dotnet sln add` in the order `B.csproj` and `A.csproj`.\r\n\r\nWhen they go to merge this change they now have a conflict that needs to be resolved, whereas if there had been some deterministic sort order you'd give your merging tool a better chance to resolve this (and at very least allow the human using the tool a clearer picture of what happened).\r\n\r\nOur scenarios are obviously much more complex (due to the deep dependency tree) but the above is a simple illustration.\r\n\r\nThe below commands will simulate this:\r\n\r\n```\r\ndotnet new sln -n Common\r\ndotnet new sln -n Common2\r\ndotnet new console -n A\r\ndotnet new console -n B\r\ndotnet sln Common.sln add A\\A.csproj\r\ndotnet sln Common.sln add B\\B.csproj\r\ndotnet sln Common2.sln add B\\B.csproj\r\ndotnet sln Common2.sln add A\\A.csproj\r\n```\r\n\r\nTry comparing `Common2.sln` to `Common.sln` (simulating a branch merge).\r\n\r\n## Expected  behavior\r\nA deterministic sort to Solution files. The sort really doesn't matter so long as it is deterministic across files (you sort both sides before committing/comparing).\r\n\r\n## Actual behavior\r\n`dotnet sln add` will perform appending operations (this is the same behavior in Visual Studio). A long time ago there was a UserVoice (and before that a Connect) issue to ask for this feature as well within Visual Studio.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.507\r\n Commit:    e8520940d7\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.507\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.11\r\n  Commit:  d6a5616240\r\n\r\n.NET Core SDKs installed:\r\n  2.0.2 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.400 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.505 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.507 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n```\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/12858","RelatedDescription":"Open issue \"Consdering Adding dotnet sln sort\" (#12858)"},{"Id":"505284649","IsPullRequest":false,"CreatedAt":"2019-10-10T14:46:32","Actor":"benmccallum","Number":"12857","RawContent":null,"Title":"dotnet publish can't find resource files","State":"closed","Body":"In a docker container I'm trying to do a `dotnet publish` on one of my projects, but the build says a resource file that needs to be embedded can't be found. I've confirmed it exists (docker COPY commanding my whole source root and `ls -alR` says it's there too. \r\n\r\n    CSC : error CS1566: Error reading resource 'AutoGuru.GraphQL.Queries.ArticleTileQuery.ArticleTileQuery.graphql' -- 'Could not find a part of the path '/src/AutoGuru.GraphQL.Queries/src/ArticleTileQuery/ArticleTileQuery.graphql'.' [/src/AutoGuru.GraphQL.Queries/src/AutoGuru.GraphQL.Queries.csproj\r\n\r\nWorks with a VS 2019 build, so seems to be an issue with `dotnet publish` / MSBuild used by `dotnet publish` in this context. \r\n\r\nI've taken a look at #6561 but not sure if it's 100% related. \r\n* [This comment](https://github.com/dotnet/cli/issues/6561#issuecomment-328258311) in the thread could be exactly what I'm experiencing, but there doesn't appear to be a solution/workaround. \r\n* I am on Linux, so any foldering using backslashes could be an issue, but surely I don't have to changed the .csproj EmbeddedResource references to use fwd slashes? The error seems to report the correct path too, so it'd seem that's handled.\r\n\r\n## Steps to reproduce\r\nI may need to work up an isolated repro, but basically:\r\n\r\n1. Create a library with an embedded resource targeting netstandard2.0\r\n2. Create an app that consumes it\r\n3. Create a docker file based on `mcr.microsoft.com/dotnet/core/sdk:2.2` that should publish the app \r\n\r\n## Expected  behavior\r\nPublish would complete.\r\n\r\n## Actual behavior\r\nPublish fails.\r\n\r\n## Environment data\r\nI'm inside a docker container based on the image:\r\n`mcr.microsoft.com/dotnet/core/sdk:2.2`\r\n\r\n`dotnet --info` output:\r\n\r\n```\r\n1>.NET Core SDK (reflecting any global.json):\r\n1> Version:   2.2.300\r\n1> Commit:    73efd5bd87\r\n1>Runtime Environment:\r\n1> OS Name:     debian\r\n1> OS Version:  9\r\n1> OS Platform: Linux\r\n1> RID:         debian.9-x64\r\n1> Base Path:   /usr/share/dotnet/sdk/2.2.300/\r\n1>Host (useful for support):\r\n1>  Version: 2.2.5\r\n1>  Commit:  0a3c9209c0\r\n1>.NET Core SDKs installed:\r\n1>  2.2.300 [/usr/share/dotnet/sdk]\r\n1>.NET Core runtimes installed:\r\n1>  Microsoft.AspNetCore.All 2.2.5 [/usr/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n1>  Microsoft.AspNetCore.App 2.2.5 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n1>  Microsoft.NETCore.App 2.2.5 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n```\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/12857","RelatedDescription":"Closed issue \"dotnet publish can't find resource files\" (#12857)"},{"Id":"504924996","IsPullRequest":true,"CreatedAt":"2019-10-10T13:27:27","Actor":"mmitche","Number":"12855","RawContent":null,"Title":"[release/2.2.1xx] Switch to correct SHA2 cert","State":"closed","Body":"SHA1 certs were deprecated and removed from ESRP. Move to the correct cert for external assemblies","Url":"https://github.com/dotnet/cli/pull/12855","RelatedDescription":"Closed or merged PR \"[release/2.2.1xx] Switch to correct SHA2 cert\" (#12855)"},{"Id":"505168099","IsPullRequest":false,"CreatedAt":"2019-10-10T10:05:02","Actor":"Jepson109","Number":"12856","RawContent":null,"Title":"Button \"Uninstall\" is truncated on the SDK uninstallation wizard with Japanese","State":"open","Body":"## Steps to reproduce\r\n1.Open the sdk installation file (.NET core SDK 3.1.100-preview1-014459) and install it.\r\n2.Open control panel and uninstall the SDK(3.1.100-preview1-014459)\r\n2.Observe the button \"アンインストール\" .\r\n\r\n## Expected  behavior\r\nButton content isn't truncated\r\n\r\n## Actual behavior\r\nButton content is truncated\r\n![image](https://user-images.githubusercontent.com/38854445/66559124-6a6ab080-eb87-11e9-897d-0104c0ee3b5a.png)\r\n![image](https://user-images.githubusercontent.com/38854445/66559579-317f0b80-eb88-11e9-9414-19598bd10c80.png)\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n.NET Core SDK (global.json を反映):\r\n Version:   3.1.100-preview1-014459\r\n Commit:    ac3b59712d\r\n\r\nランタイム環境:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.1.100-preview1-014459\\\r\n\r\nHost (useful for support):\r\n  Version: 3.1.0-preview1.19506.1\r\n  Commit:  bbf5542781\r\n\r\n.NET Core SDKs installed:\r\n  3.1.100-preview1-014394 [C:\\Program Files\\dotnet\\sdk]\r\n  3.1.100-preview1-014459 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.0-preview1.19475.24 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.1.0-preview1.19508.20 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.0-preview1.19480.27 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.1.0-preview1.19506.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.1.0-preview1.19480.27 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 3.1.0-preview1.19506.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/12856","RelatedDescription":"Open issue \"Button \"Uninstall\" is truncated on the SDK uninstallation wizard with Japanese\" (#12856)"},{"Id":"504269437","IsPullRequest":false,"CreatedAt":"2019-10-09T14:22:44","Actor":"robborden","Number":"12850","RawContent":null,"Title":"Compatibility errors between netcoreapp3.0 app and netstandard2.1 library when using MSBuild","State":"closed","Body":"We have a dotnet codebase that contains a 4-5 dotnet core applications as well as around 20 dotnet standard libraries.  These are all separate projects in the same solution. The dotnet core apps reference several of the dotnet standard libraries. We recently migrated everything to netcoreapp3.0 and netstandard2.1.  The other devs working on the project (one in windows, one on macos) are not having any issues.   I am trying to use MSBuild to build the application because that is what Rider uses when debugging.\r\n\r\nI have installed the sdks and `dotnet build` works.  I cannot run `msbuild`, because it produces errors.  I also cannot run `dotnet msbuild`, it also has the same errors.  These are an example of the errors:\r\n```\r\n\"error NU1201: Project MyDotnetStandard21Lib is not compatible with netcoreapp3.0 (.NETCoreApp,Version=v3.0). Project MyDotnetStandard21Lib supports: netstandard2.1 (.NETStandard,Version=v2.1)\"\r\n```\r\n\r\nWhen I run `msbuild`, I believe it is doing \r\n```\r\nexec /Library/Frameworks/Mono.framework/Versions/6.4.0/bin/mono $MONO_OPTIONS /Library/Frameworks/Mono.framework/Versions/6.4.0/lib/mono/msbuild/Current/bin/MSBuild.dll\r\n```\r\n\r\nI'm not sure what `dotnet msbuild` runs.\r\n\r\n\r\nI also tried to use the MSBuild from the dotnet core sdk like this:\r\n```\r\nexec /Library/Frameworks/Mono.framework/Versions/6.4.0/bin/mono $MONO_OPTIONS /usr/local/share/dotnet/sdk/3.0.100/MSBuild.dll\r\n```\r\n\r\nbut I got a bunch of exceptions like these:\r\n```\r\n$msbuild\r\nMicrosoft (R) Build Engine version 16.3.0+0f4c62fea for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\nBuilding the projects in this solution one at a time. To enable parallel build, please add the \"-m\" switch.\r\n\r\nUnhandled Exception:\r\nSystem.BadImageFormatException: Could not resolve field token 0x0400036b, due to: Could not load type of field 'Microsoft.Build.Execution.BuildManager:_workQueue' (33) due to: Could not load file or assembly 'System.Threading.Tasks.Dataflow, Version=4.6.3.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. assembly:/usr/local/share/dotnet/sdk/3.0.100/Microsoft.Build.dll type:BuildManager member:(null)\r\nFile name: 'Microsoft.Build'\r\n  at Microsoft.Build.CommandLine.MSBuildApp.BuildProject (System.String projectFile, System.String[] targets, System.String toolsVersion, System.Collections.Generic.Dictionary`2[TKey,TValue] globalProperties, System.Collections.Generic.Dictionary`2[TKey,TValue] restoreProperties, Microsoft.Build.Framework.ILogger[] loggers, Microsoft.Build.Framework.LoggerVerbosity verbosity, Microsoft.Build.CommandLine.DistributedLoggerRecord[] distributedLoggerRecords, System.Int32 cpuCount, System.Boolean enableNodeReuse, System.IO.TextWriter preprocessWriter, System.Boolean detailedSummary, System.Collections.Generic.ISet`1[T] warningsAsErrors, System.Collections.Generic.ISet`1[T] warningsAsMessages, System.Boolean enableRestore, Microsoft.Build.Logging.ProfilerLogger profilerLogger, System.Boolean enableProfiler, System.Boolean interactive, System.Boolean isolateProjects, System.Boolean graphBuild, System.String[] inputResultsCaches, System.String outputResultsCache) [0x005a0] in <faa2ef9cf63940199fa55bdf037faaa3>:0 \r\n  at Microsoft.Build.CommandLine.MSBuildApp.Execute (System.String[] commandLine) [0x00415] in <faa2ef9cf63940199fa55bdf037faaa3>:0 \r\n  at Microsoft.Build.CommandLine.MSBuildApp.Main (System.String[] args) [0x00029] in <faa2ef9cf63940199fa55bdf037faaa3>:0 \r\n```\r\n\r\nI'm trying to figure out what I'm doing wrong or how I should be running MSBuild for dotnetcore3.0 projects on MacOS. I suspect I have some wires crossed somewhere. Any help would be greatly appreciated!","Url":"https://github.com/dotnet/cli/issues/12850","RelatedDescription":"Closed issue \"Compatibility errors between netcoreapp3.0 app and netstandard2.1 library when using MSBuild\" (#12850)"},{"Id":"504640639","IsPullRequest":false,"CreatedAt":"2019-10-09T13:06:38","Actor":"ewest305","Number":"12854","RawContent":null,"Title":"PackageReference element format leads to GIT merge conflicts","State":"open","Body":"DOTNET Add Package results in a xml format that GIT reports as a merge conflict when using command line for the first time, even though the package has not technically changed. \r\n\r\n## Steps to reproduce\r\nThis is just one of many ways to reproduce issue:\r\n1. Use Nuget Package Manager to add any reference to a project\r\n2. GIT Commit/Merge \r\n3. Use DOTNET Remove to remove the same package\r\n4. Use DOTNET Add to add the same package\r\n5. GIT Commit/Merge\r\n\r\n## Expected  behavior\r\nA successful merge since the package has never been changed and the typical approach is to use nodes to indicate version detail, not attributes. \r\nHow about a flag to indicate format? \r\n\r\n## Actual behavior\r\nMerge conflicts because DOTNET uses attributes instead of separate nodes to decorate PackageReference element: \r\nDOTNET: \r\n`<PackageReference Include=\"mydll\" version=\"1.0.0.0\" /> `\r\n\r\nNPM: \r\n`<PackageReference Include=\"mydll\"><version>1.0.0.0</version></PackageReference>`\r\n\r\nGIT merge conflict\r\n```\r\n+<<<<<<< destination:336d91c28efdb058a9bbf9a3ce535e256ad5f42d\r\n     <PackageReference Include=\"mydll\" Version=\"1.0.0.0\" />\r\n+=======\r\n+    <PackageReference Include=\"mydll\">\r\n+      <Version>1.0.0.0</Version>\r\n+    </PackageReference>\r\n+>>>>>>> source:70a3add2212c1d22ac6a09023e76c76f5016d99b\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview8-013656\r\n Commit:    8bf06ffc8d\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview8-013656\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview8-28405-07\r\n  Commit:  d01b2fb7bc\r\n\r\n.NET Core SDKs installed:\r\n  2.1.200 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.402 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.508 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.509 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.700-preview-009618 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.108 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview5-011568 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview8-013656 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview5-19227-01 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview8.19405.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview5-27626-15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview8-28405-07 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview5-27626-15 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview8-28405-07 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/12854","RelatedDescription":"Open issue \"PackageReference element format leads to GIT merge conflicts\" (#12854)"},{"Id":"504608645","IsPullRequest":false,"CreatedAt":"2019-10-09T12:08:26","Actor":"sourcetonuts","Number":"12853","RawContent":null,"Title":"new Ping(); fails on .NET Core 3.0 Trimmed Build ","State":"open","Body":"## Steps to reproduce\r\n\r\nBuilding in >.NET and trimming causes new Ping() to throw an exception\r\n\r\nUnhandled exception. System.TypeLoadException: Could not load type 'System.Net.NetworkInformation.Ping' from assembly 'System.IO.FileSystem, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.\r\n\r\n## Expected  behavior\r\n\r\nIt shouldn't throw an exception when built with .NET and trimmed.\r\n\r\n## Actual behavior\r\n\r\nException thrown.\r\nUnhandled exception. System.TypeLoadException: Could not load type 'System.Net.NetworkInformation.Ping' from assembly 'System.IO.FileSystem, Version=4.1.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.\r\n\r\n## Environment data\r\n\r\n%1 is win-x64 \r\n%2 is project\r\n\r\n::FAILS dotnet publish %1 -r %2 -c Release /p:PublishSingleFile=true /p:PublishTrimmed=true -o .\\publish\\%2\\%1\r\n\r\n:: THIS works\r\ndotnet publish %1 -r %2 -c Release /p:PublishSingleFile=true  -o .\\publish\\%2\\%1\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/12853","RelatedDescription":"Open issue \"new Ping(); fails on .NET Core 3.0 Trimmed Build \" (#12853)"},{"Id":"504436874","IsPullRequest":true,"CreatedAt":"2019-10-09T06:45:32","Actor":"dotnet-maestro[bot]","Number":"12852","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191008.9\r\n- **Date Produced**: 10/9/2019 5:01 AM\r\n- **Commit**: 5491acd84b92034d5d53e226682f053a7b376ad9\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19508.9\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19508.9\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19508.9\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19508.9\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19508.9\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12852","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12852)"},{"Id":"504416224","IsPullRequest":true,"CreatedAt":"2019-10-09T05:34:33","Actor":"dotnet-maestro[bot]","Number":"12851","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c7c33a9e-18af-4618-5026-08d727dabd66)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20191008.20\r\n- **Date Produced**: 10/9/2019 4:10 AM\r\n- **Commit**: 84be18b1048236ad163d737b442a4ccf3b10d997\r\n- **Branch**: refs/heads/release/3.1-preview1\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.1.0-preview1.19508.20\r\n\r\n[marker]: <> (End:c7c33a9e-18af-4618-5026-08d727dabd66)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12851","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from aspnet/AspNetCore\" (#12851)"},{"Id":"504216696","IsPullRequest":false,"CreatedAt":"2019-10-08T18:52:51","Actor":"voroninp","Number":"12849","RawContent":null,"Title":"'dotnet publish' ignores file name casing.","State":"open","Body":"## Steps to reproduce\r\nCreate a project named with Pascal casing style and DO NOT set `<AssemblyName>` element explicitly.\r\nIn my case project's name is  `Luscii.Identity.Service.csproj`.\r\n\r\nThen call `dotnet publish Luscii.Identity.Service.csproj`\r\nYou'll end up with published application containing `Luscii.Identity.Service.dll` file.\r\n\r\nDelete `publish` folder !\r\n\r\nNow call `dotnet publish luscii.identity.service.csproj`\r\n\r\nYou'll end up with published application containing `luscii.identity.service.dll` file. lowercased!\r\n\r\nOn Linux you are going to have great fun because of that.\r\n\r\n\r\n## Expected  behavior\r\nI expect CLI to use the casing of the file, not the argument.\r\n\r\n## Actual behavior\r\nIt looks like CLI uses casing of the argument.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100\r\n Commit:    04339c3a26\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0\r\n  Commit:  7d57652f33","Url":"https://github.com/dotnet/cli/issues/12849","RelatedDescription":"Open issue \"'dotnet publish' ignores file name casing.\" (#12849)"},{"Id":"504171096","IsPullRequest":true,"CreatedAt":"2019-10-08T17:50:29","Actor":"dotnet-maestro[bot]","Number":"12848","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191008.3\r\n- **Date Produced**: 10/8/2019 4:07 PM\r\n- **Commit**: 8d6a25d50e795a5425d0652f3e3031067a79516f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19508.3\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19508.3\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19508.3\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19508.3\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19508.3\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12848","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12848)"},{"Id":"504094664","IsPullRequest":false,"CreatedAt":"2019-10-08T17:02:35","Actor":"naricc","Number":"12846","RawContent":null,"Title":"dotnet-sdk-5.0 depends on dotnet-apphost-pack-5.0, dotnet-targeting-pack-5.0. Do those packages exist?","State":"closed","Body":"I am trying to install the latest build on unbutu, using dpkg, but there are some packages I can't find any where linked on the github page. Specifically otnet-apphost-pack-5.0, dotnet-targeting-pack-5.0.  Are these packages available somewhere?\r\n\r\nFor reference, here is the command I am using, and the output:\r\n\r\n$ sudo dpkg -i dotnet-sdk-latest-x64.deb \r\n(Reading database ... 115796 files and directories currently installed.)\r\nPreparing to unpack dotnet-sdk-latest-x64.deb ...\r\nUnpacking dotnet-sdk-5.0 (5.0.100-alpha1-014854-1) over (5.0.100-alpha1-014854-1) ...\r\ndpkg: dependency problems prevent configuration of dotnet-sdk-5.0:\r\n dotnet-sdk-5.0 depends on dotnet-targeting-pack-5.0 (>= 5.0.0~alpha1.19507.3); however:\r\n  Package dotnet-targeting-pack-5.0 is not installed.\r\n dotnet-sdk-5.0 depends on dotnet-apphost-pack-5.0 (>= 5.0.0~alpha1.19507.3); however:\r\n  Package dotnet-apphost-pack-5.0 is not installed.\r\n\r\ndpkg: error processing package dotnet-sdk-5.0 (--install):\r\n dependency problems - leaving unconfigured\r\nErrors were encountered while processing:\r\n dotnet-sdk-5.0\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/12846","RelatedDescription":"Closed issue \"dotnet-sdk-5.0 depends on dotnet-apphost-pack-5.0, dotnet-targeting-pack-5.0. Do those packages exist?\" (#12846)"},{"Id":"504128729","IsPullRequest":true,"CreatedAt":"2019-10-08T16:25:31","Actor":"dotnet-maestro[bot]","Number":"12847","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191008.2\r\n- **Date Produced**: 10/8/2019 2:45 PM\r\n- **Commit**: 8d6a25d50e795a5425d0652f3e3031067a79516f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19508.2\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19508.2\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19508.2\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19508.2\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19508.2\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12847","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12847)"},{"Id":"503863517","IsPullRequest":true,"CreatedAt":"2019-10-08T07:30:39","Actor":"dotnet-maestro[bot]","Number":"12845","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191007.10\r\n- **Date Produced**: 10/8/2019 5:40 AM\r\n- **Commit**: 57ba280ee32511c6f5c2ebcd2bfaaf4a1db74648\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19507.10\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19507.10\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19507.10\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19507.10\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19507.10\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12845","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12845)"},{"Id":"503851576","IsPullRequest":true,"CreatedAt":"2019-10-08T06:55:07","Actor":"dotnet-maestro[bot]","Number":"12844","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191007.9\r\n- **Date Produced**: 10/8/2019 5:13 AM\r\n- **Commit**: 5f54f888def819117b8c29f57918369e2c4e05cc\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19507.9\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19507.9\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19507.9\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19507.9\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19507.9\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12844","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12844)"},{"Id":"503676522","IsPullRequest":true,"CreatedAt":"2019-10-08T01:27:23","Actor":"dotnet-maestro[bot]","Number":"12843","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191007.7\r\n- **Date Produced**: 10/7/2019 11:48 PM\r\n- **Commit**: 5f54f888def819117b8c29f57918369e2c4e05cc\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19507.7\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19507.7\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19507.7\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19507.7\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19507.7\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12843","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12843)"},{"Id":"503631892","IsPullRequest":false,"CreatedAt":"2019-10-07T21:12:39","Actor":"bender2k14","Number":"12842","RawContent":null,"Title":"dotnet test has exit code 0 despite BadImageFormatException","State":"closed","Body":"## Steps to reproduce and Environment data\r\nWhen using the [pool](https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema?view=azure-devops&tabs=schema#pool) with VM image label [`windows-2019`](https://docs.microsoft.com/en-us/azure/devops/pipelines/agents/hosted?view=azure-devops#use-a-microsoft-hosted-agent), the relevant part of the `dotnet --info` output is\r\n```\r\nRID: win10-x64\r\n```\r\n\r\nTherefore, it is no surprise that executing\r\n```\r\ndotnet test Tests\\Tests.fsproj --runtime win-x86\r\n```\r\ndoesn't work since the [RID](https://docs.microsoft.com/en-us/dotnet/core/rid-catalog)s are incompatible.  Specifically, the relevant part of the logs when \"Enable system diagnostics\" is checked is\r\n```\r\nTest run for D:\\a\\1\\s\\src\\Tests\\bin\\Debug\\netcoreapp3.0\\win-x86\\Tests.dll(.NETCoreApp,Version=v3.0)\r\nMicrosoft (R) Test Execution Command Line Tool Version 16.3.0\r\nCopyright (c) Microsoft Corporation.  All rights reserved.\r\n\r\nStarting test execution, please wait...\r\n\r\nA total of 1 test files matched the specified pattern.\r\n[xUnit.net 00:00:02.06] Exception discovering tests from Tests: System.BadImageFormatException: Could not load file or assembly 'Tests, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null'. An attempt was made to load a program with an incorrect format.\r\nFile name: 'Tests, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null'\r\n   at // ... stack trace omitted\r\n\r\nNo test is available in D:\\a\\1\\s\\src\\Tests\\bin\\Debug\\netcoreapp3.0\\win-x86\\Tests.dll. Make sure that test discoverer & executors are registered and platform & framework version settings are appropriate and try again.\r\nResults File: D:\\a\\_temp\\VssAdministrator_fv-az604_2019-10-07_18_48_39.trx\r\n\r\n##[debug]Exit code 0 received from tool 'C:\\Program Files\\dotnet\\dotnet.exe'\r\n```\r\n\r\n## Expected  behavior\r\nI expected `dotnet test` to return a nonzero exit code since it encountered a `BadImageFormatException`.\r\n\r\n## Actual behavior\r\n`dotnet test` to returned an exit code of 0 despite encountering a `BadImageFormatException`. ","Url":"https://github.com/dotnet/cli/issues/12842","RelatedDescription":"Closed issue \"dotnet test has exit code 0 despite BadImageFormatException\" (#12842)"}],"ResultType":"GitHubIssue"},"Standard-Issues":{"Issues":[{"Id":"505304835","IsPullRequest":false,"CreatedAt":"2019-10-10T14:21:00","Actor":"Sumeetkumawat","Number":"1603","RawContent":null,"Title":"Issue while Referencing iOS native library to .net standard library","State":"open","Body":"I have three projects in my solution. I have added .net standard library say 'A'. I have some code there. Then i added ios library 'B' and added project reference of 'A' here.\r\nNow I have another .net standard library 'C' and here I would like to add reference of 'A' & 'B' projects not dll's. Reference of 'A' is added successfully but while adding reference of 'B', I \r\nsee 'Incompatible Target Framework' message.\r\n\r\n","Url":"https://github.com/dotnet/standard/issues/1603","RelatedDescription":"Open issue \"Issue while Referencing iOS native library to .net standard library\" (#1603)"},{"Id":"505235113","IsPullRequest":true,"CreatedAt":"2019-10-10T12:33:39","Actor":"dotnet-maestro[bot]","Number":"1602","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191009.26\r\n- **Date Produced**: 10/10/2019 3:16 AM\r\n- **Commit**: 30280e07adc3c1f0776ef9531b47a769e2b45420\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19509.26\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19509.26\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19509.26\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1602","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1602)"},{"Id":"505224197","IsPullRequest":true,"CreatedAt":"2019-10-10T12:11:42","Actor":"dotnet-maestro[bot]","Number":"1601","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191009.5\r\n- **Date Produced**: 10/9/2019 10:22 PM\r\n- **Commit**: 1acb4c3ce4c6497388752adad31825ae7cdb7e2a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 5.0.0-beta.19509.5\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19509.5\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 5.0.0-beta.19509.5\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 5.0.0-beta.19509.5\r\n  - **Microsoft.DotNet.GenAPI** -> 5.0.0-beta.19509.5\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.19509.5\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1601","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1601)"},{"Id":"505206761","IsPullRequest":false,"CreatedAt":"2019-10-10T11:24:37","Actor":"manijak","Number":"1600","RawContent":null,"Title":"The state of X509Certificate management with netstandard, xamarin, win & macOS","State":"open","Body":"First, my apologies if this is the wrong channel to post this. I've been digging and trying to understand for weeks where the issue/limitation is to our problem, figured this would be the most suitable place to ask. We are not sure if this is a limitation with the frameworks, or the platform, or due to our limited knowledge, or a combination of all. But things are very confusing right now, and we just need proper guidance on what direction to take.\r\n\r\n### **Background** 💡 \r\nWe are creating a small, cross-platform (win & macos), desktop application that will act as a websocket server running only on localhost (https). This application is a bridge between our web applications and the local machine hardware (e.g. printers). In order to provide a secure connection, `SslStream` requires a `X509Certificate2` class with a `PrivateKey`.\r\n\r\nThe idea is to let the app itself generate a self-signed certificate with private key and use that to start the secure websocket service. After the certificate has been generated for the first time, we store it in the local certificate store and reuse it when the app restarts. \r\n\r\n### **Project structure & frameworks** 📦 \r\nThis is how our solution is defined. `SharedProject` is a shared lib referenced by both `AppWin` & `AppMac`. The Win & Mac projects are startup-projects for their respective platform. \r\n```\r\nOurApp.sln\r\n  |---- SharedProject (netstandard2.1)\r\n        Creates & runs the websocket service, generates certificate (win), communicates with local hardware, ect\r\n\r\n  |---- AppWin (netcore3.0)\r\n        Startup project for Windows platform. Contains platform-specific code, if any.\r\n\r\n  |---- AppMac (Xamarin.Mac)\r\n        Startup project for macOS platform. Contains platform-specific code (generates certificate).\r\n```\r\n\r\n### **How it runs** 🏃 \r\nIn our `SharedProject` we have a class taking care of certificate generation and storing. The idea was that both the Win & Mac platforms could use this to manage the certificates. It uses the `X509Certificate2` & `CertificateRequest` provided by the framework. Plus the `X509Store` to save and retrieve the certificate.\r\n\r\n**Windows** ✔️ \r\nOn Windows there are no issues. With minimum amount of code we are able to generate a self-signed certificate with private-key, store it, and run the service with it. Also re-using the certificate when the app restarts by retrieving the certificate works very well. The `X509Store` returns the certificate with the _private key_, and we can easily use it with our `SslStream`. \r\n\r\n**macOS** ❌ \r\nThings are not so clear here... We could not use the above mentioned shared class to manage certificates (that works just fine on Windows):\r\n* First issue was that we got a `PlatformNotSupportedException` when the application was trying to use the `CertificateRequest`. \r\n* Second \"issue\" was that the `X509Store` did not store or retrieve certificates from the macOS keychain, but instead it uses some local mono certificate-store that the browsers do not see (at least in our tests). And it only stored the certificate (.cer) not the private-key that was included in the `X509Certificate2` object. Plus it seemed difficult to \"Trust\" the stored certificate.\r\n\r\nSo we created a separate class to take care of certificate management for macOS inside the `AppMac (Xamarin.Mac)` project. By using `BouncyCastle` we generated an identical self-signed certificate with private-key and used that to run our secure websocket service:\r\n\r\n* When launching our Secure Websocket service on macOS, the certificate used here is automatically added to the local macOS login keychain. For us this is great, since we could not use `X509Store` to add it there in the first place.\r\n* The only way we could retrieve the certificate from the keychain was to use the `SecKeyChain` class and query for it. Thankfully the `SecCertificate` object has a `ToX509Certificate2()` function. But that still left us without the `PrivateKey` that is needed by `SslStream`. \r\n* We also tried using `SecKeyChain.FindIdentity` to retrieve both, but even tho it is easy to convert `SecCertificate` to `X509Certificate2`, there seems to be no way to convert a `SecKey` to something useful like `RSA` or `RSACryptoServiceProvider` or something that can be embedded to the `X509Certificate2`\r\n\r\n### What to do? 😭 \r\nWe are pretty much stuck when it comes to the macOS platform. There seems to be no way for us to retrieve our own X509Certificate2 with the private-key embedded. Not sure if this is because we are using Xamarin.Mac & netstandard2.1, perhaps things are easier on netcore3? But still, Xamarin & mono have been around for a long time, there should be a way for us to do this today. Must be something we are missing here and would appreciate if someone could guide us. ","Url":"https://github.com/dotnet/standard/issues/1600","RelatedDescription":"Open issue \"The state of X509Certificate management with netstandard, xamarin, win & macOS\" (#1600)"},{"Id":"504399207","IsPullRequest":false,"CreatedAt":"2019-10-09T12:43:05","Actor":"2300070","Number":"1598","RawContent":null,"Title":"FiledInfo.SetValue Not Working For Static ReadOnly Fileds.","State":"closed","Body":"    private class TestReadOnly\r\n    {\r\n        public static readonly int Field;\r\n    }\r\n    [TestMethod]\r\n    public void TestReadOnlyField()\r\n    {\r\n        FieldInfo field = typeof(TestReadOnly).GetField(nameof(TestReadOnly.Field));\r\n\r\n        Console.WriteLine(field.GetValue(null));\r\n\r\n        field.SetValue(null, 0xFF);\r\n\r\n        Console.WriteLine(field.GetValue(null));\r\n\r\n        Console.WriteLine(TestReadOnly.Field);\r\n    }\r\n\r\nOutput:\r\n\r\n0\r\n255\r\n255\r\n0\r\n","Url":"https://github.com/dotnet/standard/issues/1598","RelatedDescription":"Closed issue \"FiledInfo.SetValue Not Working For Static ReadOnly Fileds.\" (#1598)"},{"Id":"504610278","IsPullRequest":true,"CreatedAt":"2019-10-09T12:21:49","Actor":"dotnet-maestro[bot]","Number":"1599","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191009.1\r\n- **Date Produced**: 10/9/2019 9:11 AM\r\n- **Commit**: a7ee8cdccce7d2607d58f9b93ce319209a238f7a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19509.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19509.1\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19509.1\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1599","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1599)"},{"Id":"504006427","IsPullRequest":true,"CreatedAt":"2019-10-08T12:28:23","Actor":"dotnet-maestro[bot]","Number":"1597","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191008.1\r\n- **Date Produced**: 10/8/2019 8:59 AM\r\n- **Commit**: c1092870c306b8da256e455cec0814486255d0c1\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19508.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19508.1\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19508.1\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1597","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1597)"},{"Id":"503415647","IsPullRequest":true,"CreatedAt":"2019-10-07T12:29:27","Actor":"dotnet-maestro[bot]","Number":"1596","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191006.4\r\n- **Date Produced**: 10/7/2019 1:07 AM\r\n- **Commit**: 38aa9151607cb63bb569beb42880057ba2cd3da0\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19506.4\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19506.4\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19506.4\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1596","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1596)"},{"Id":"503407217","IsPullRequest":true,"CreatedAt":"2019-10-07T12:11:40","Actor":"dotnet-maestro[bot]","Number":"1595","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191006.1\r\n- **Date Produced**: 10/6/2019 12:59 PM\r\n- **Commit**: 7acc732c615d2c2326cd347c8c1841a300a632cb\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 5.0.0-beta.19506.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19506.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 5.0.0-beta.19506.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 5.0.0-beta.19506.1\r\n  - **Microsoft.DotNet.GenAPI** -> 5.0.0-beta.19506.1\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.19506.1\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1595","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1595)"},{"Id":"503093090","IsPullRequest":true,"CreatedAt":"2019-10-06T12:23:42","Actor":"dotnet-maestro[bot]","Number":"1594","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191005.5\r\n- **Date Produced**: 10/6/2019 3:54 AM\r\n- **Commit**: 6de42378223c6cb138d28f812c440092718c7a19\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19505.5\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19505.5\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19505.5\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1594","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1594)"},{"Id":"503091277","IsPullRequest":true,"CreatedAt":"2019-10-06T12:11:40","Actor":"dotnet-maestro[bot]","Number":"1593","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191005.1\r\n- **Date Produced**: 10/5/2019 12:53 PM\r\n- **Commit**: 13e1dbd86223eaa797655bf14070ea28ce6461e3\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 5.0.0-beta.19505.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19505.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 5.0.0-beta.19505.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 5.0.0-beta.19505.1\r\n  - **Microsoft.DotNet.GenAPI** -> 5.0.0-beta.19505.1\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.19505.1\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1593","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1593)"},{"Id":"502956371","IsPullRequest":true,"CreatedAt":"2019-10-05T12:29:24","Actor":"dotnet-maestro[bot]","Number":"1592","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191004.9\r\n- **Date Produced**: 10/5/2019 3:05 AM\r\n- **Commit**: 99ea2b5aebf7361a5baa638c978cb6214fca5217\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19504.9\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19504.9\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19504.9\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1592","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1592)"},{"Id":"502954708","IsPullRequest":true,"CreatedAt":"2019-10-05T12:06:58","Actor":"dotnet-maestro[bot]","Number":"1591","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191004.2\r\n- **Date Produced**: 10/5/2019 1:24 AM\r\n- **Commit**: 380eaaf663b425943754a15b29e814df0bb1b078\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 5.0.0-beta.19504.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19504.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 5.0.0-beta.19504.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 5.0.0-beta.19504.2\r\n  - **Microsoft.DotNet.GenAPI** -> 5.0.0-beta.19504.2\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.19504.2\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1591","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1591)"},{"Id":"502952894","IsPullRequest":false,"CreatedAt":"2019-10-05T11:42:25","Actor":"axanth","Number":"1590","RawContent":null,"Title":"Any specific date about support of Universal Windows Platform in .net Standard 2.1?","State":"open","Body":"","Url":"https://github.com/dotnet/standard/issues/1590","RelatedDescription":"Open issue \"Any specific date about support of Universal Windows Platform in .net Standard 2.1?\" (#1590)"},{"Id":"502601357","IsPullRequest":true,"CreatedAt":"2019-10-04T12:26:51","Actor":"dotnet-maestro[bot]","Number":"1589","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191003.5\r\n- **Date Produced**: 10/4/2019 1:12 AM\r\n- **Commit**: eff9fbf446468ca411bf5e0475916f316eea7223\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19503.5\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19503.5\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19503.5\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1589","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1589)"},{"Id":"502231307","IsPullRequest":false,"CreatedAt":"2019-10-03T18:40:35","Actor":"lucbueno54","Number":"1588","RawContent":null,"Title":"When referring to a net462 project in NETStandard of ProjectReference, it is supplied with AssemblyName in nuget generation","State":"open","Body":"Create references to two net462 projects in NETStandard and enable automatic nuget generation (GeneratePackageOnBuild = true). \r\n\r\nAn important detail that is AssemblyName is different from the csproj file. \r\n\r\nExample: \r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<package xmlns=\"http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd\">\r\n  <metadata>\r\n    <id>Nuget.NetStandardClassLibrary</id>\r\n    <version>19.9.0</version>\r\n    <authors>Nuget.NetStandardClassLibrary</authors>\r\n    <owners>Nuget.NetStandardClassLibrary</owners>\r\n    <requireLicenseAcceptance>false</requireLicenseAcceptance>\r\n    <description>Package Description</description>\r\n    <dependencies>\r\n      <group targetFramework=\".NETStandard2.0\">\r\n        <dependency id=\"nuget.AnotherStandardClassLibrary\" version=\"198.0.0\" exclude=\"Build,Analyzers\" />    <= NETStandard\r\n        <dependency id=\"FrameworkClassLibrary\" version=\"1.0.0\" exclude=\"Build,Analyzers\" /> <= net462 \r\n      </group>\r\n    </dependencies>\r\n  </metadata>\r\n</package>\r\n```\r\n\r\n\r\n\r\nhttps://github.com/lucbueno54/dotnetStandardReferencesTest ","Url":"https://github.com/dotnet/standard/issues/1588","RelatedDescription":"Open issue \"When referring to a net462 project in NETStandard of ProjectReference, it is supplied with AssemblyName in nuget generation\" (#1588)"},{"Id":"502031073","IsPullRequest":true,"CreatedAt":"2019-10-03T12:29:49","Actor":"dotnet-maestro[bot]","Number":"1587","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191002.6\r\n- **Date Produced**: 10/3/2019 2:33 AM\r\n- **Commit**: c8c2917540a568869ba761afa6e4dba6edeb433b\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19502.6\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19502.6\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19502.6\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1587","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1587)"},{"Id":"502022842","IsPullRequest":true,"CreatedAt":"2019-10-03T12:11:49","Actor":"dotnet-maestro[bot]","Number":"1586","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191002.11\r\n- **Date Produced**: 10/2/2019 11:34 PM\r\n- **Commit**: da75c6547c64a91eb8a9cecf8c503331c2cc394a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 5.0.0-beta.19502.11\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19502.11\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 5.0.0-beta.19502.11\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 5.0.0-beta.19502.11\r\n  - **Microsoft.DotNet.GenAPI** -> 5.0.0-beta.19502.11\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.19502.11\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1586","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1586)"},{"Id":"501454733","IsPullRequest":true,"CreatedAt":"2019-10-02T12:30:46","Actor":"dotnet-maestro[bot]","Number":"1585","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191001.13\r\n- **Date Produced**: 10/2/2019 4:05 AM\r\n- **Commit**: dcc9f626eeb0751d4ba4499f623aac42d2e95c10\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19501.13\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19501.13\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19501.13\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1585","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1585)"},{"Id":"501445824","IsPullRequest":true,"CreatedAt":"2019-10-02T12:11:47","Actor":"dotnet-maestro[bot]","Number":"1584","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191001.4\r\n- **Date Produced**: 10/1/2019 10:24 PM\r\n- **Commit**: c21a409f11386d22c6083198176868d3974de832\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 5.0.0-beta.19501.4\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19501.4\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 5.0.0-beta.19501.4\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 5.0.0-beta.19501.4\r\n  - **Microsoft.DotNet.GenAPI** -> 5.0.0-beta.19501.4\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.19501.4\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1584","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1584)"},{"Id":"500858343","IsPullRequest":true,"CreatedAt":"2019-10-01T12:30:06","Actor":"dotnet-maestro[bot]","Number":"1583","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190930.12\r\n- **Date Produced**: 10/1/2019 3:39 AM\r\n- **Commit**: 969ce665afee70b2d591e5c271525c927a8834d0\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19480.12\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19480.12\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19480.12\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1583","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1583)"},{"Id":"500849552","IsPullRequest":true,"CreatedAt":"2019-10-01T12:11:41","Actor":"dotnet-maestro[bot]","Number":"1582","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190930.3\r\n- **Date Produced**: 9/30/2019 8:25 PM\r\n- **Commit**: 238f1bbb23ba67616818d0b242c5b55a18edec55\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 5.0.0-beta.19480.3\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19480.3\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 5.0.0-beta.19480.3\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 5.0.0-beta.19480.3\r\n  - **Microsoft.DotNet.GenAPI** -> 5.0.0-beta.19480.3\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.19480.3\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1582","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1582)"},{"Id":"499857194","IsPullRequest":false,"CreatedAt":"2019-09-29T04:57:44","Actor":"B16180339","Number":"1581","RawContent":null,"Title":"Dotnet","State":"closed","Body":"","Url":"https://github.com/dotnet/standard/issues/1581","RelatedDescription":"Closed issue \"Dotnet\" (#1581)"},{"Id":"499764886","IsPullRequest":true,"CreatedAt":"2019-09-28T12:28:37","Actor":"dotnet-maestro[bot]","Number":"1580","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190927.7\r\n- **Date Produced**: 9/28/2019 1:48 AM\r\n- **Commit**: 7e9a177824cbefaee8985a9b517ebb0ea2e17a81\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19477.7\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19477.7\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19477.7\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1580","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1580)"},{"Id":"499762811","IsPullRequest":true,"CreatedAt":"2019-09-28T12:11:24","Actor":"dotnet-maestro[bot]","Number":"1579","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190927.2\r\n- **Date Produced**: 9/27/2019 6:33 PM\r\n- **Commit**: 14abaee3dba41fbe608431fb6a4f4b2435dcac33\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 5.0.0-beta.19477.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19477.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 5.0.0-beta.19477.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 5.0.0-beta.19477.2\r\n  - **Microsoft.DotNet.GenAPI** -> 5.0.0-beta.19477.2\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.19477.2\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1579","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1579)"},{"Id":"499412533","IsPullRequest":true,"CreatedAt":"2019-09-27T12:28:38","Actor":"dotnet-maestro[bot]","Number":"1578","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190926.10\r\n- **Date Produced**: 9/27/2019 5:59 AM\r\n- **Commit**: 296c0e71ddcc4885d30af18dea829c1923cfdc5c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19476.10\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19476.10\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19476.10\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1578","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1578)"},{"Id":"499405308","IsPullRequest":true,"CreatedAt":"2019-09-27T12:11:32","Actor":"dotnet-maestro[bot]","Number":"1577","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190926.6\r\n- **Date Produced**: 9/27/2019 1:21 AM\r\n- **Commit**: b449f372df1a3374ebdc85f42ff137dcda08776b\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 5.0.0-beta.19476.6\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19476.6\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 5.0.0-beta.19476.6\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 5.0.0-beta.19476.6\r\n  - **Microsoft.DotNet.GenAPI** -> 5.0.0-beta.19476.6\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.19476.6\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1577","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1577)"},{"Id":"498397654","IsPullRequest":true,"CreatedAt":"2019-09-26T15:09:19","Actor":"dotnet-maestro[bot]","Number":"1574","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:29f70c24-3711-40be-9246-08d6c732a216)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190924.3\r\n- **Date Produced**: 9/24/2019 6:16 PM\r\n- **Commit**: 0e9ffd6464aff37aef2dc41dc2162d258f266e32\r\n- **Branch**: refs/heads/release/3.x\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19474.3\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19474.3\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19474.3\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19474.3\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19474.3\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19474.3\r\n\r\n[marker]: <> (End:29f70c24-3711-40be-9246-08d6c732a216)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1574","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/arcade\" (#1574)"},{"Id":"498433598","IsPullRequest":true,"CreatedAt":"2019-09-26T15:08:53","Actor":"mmitche","Number":"1575","RawContent":null,"Title":"Update to non prerelease","State":"closed","Body":"","Url":"https://github.com/dotnet/standard/pull/1575","RelatedDescription":"Closed or merged PR \"Update to non prerelease\" (#1575)"},{"Id":"498844948","IsPullRequest":true,"CreatedAt":"2019-09-26T12:22:45","Actor":"dotnet-maestro[bot]","Number":"1576","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190926.1\r\n- **Date Produced**: 9/26/2019 9:11 AM\r\n- **Commit**: 0a1850cc370986c7348e09bcd1c1adcf522d6db3\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19476.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19476.1\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19476.1\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1576","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1576)"}],"ResultType":"GitHubIssue"},"CoreFx-Issues":{"Issues":[{"Id":"505644277","IsPullRequest":true,"CreatedAt":"2019-10-11T05:23:33","Actor":"wfurt","Number":"41726","RawContent":null,"Title":"update DualModeConnect_BeginAccept_Helper to be more liberal and consistent with DualModeConnect_AcceptAsync_Helper","State":"open","Body":"We have seen BeginAcceptV4BoundToAnyV6_Success and DualModeBeginAccept.BeginAcceptV4BoundToAnyV4_Success failing occasionally in CI with:\r\n\r\n```\r\n18:18:24       Assert.Equal() Failure\r\n18:18:24       Expected: ::ffff:127.0.0.1\r\n18:18:24       Actual:   ::127.0.0.1\r\n```\r\n\r\nI could not reproduce it on my system. However when looking at the tests, I notices that when connecting on v4 loopback ( like two tests above), there is also ready code to accept variations from ValidIPv6Loopbacks: \r\n\r\n\r\nhttps://github.com/dotnet/corefx/blob/901c370c2379ad0885bcc5a1921c4164104586aa/src/System.Net.Sockets/tests/FunctionalTests/DualModeSocketTest.cs#L856-L864\r\n\r\nand \r\n\r\n```c# \r\n       protected static IPAddress[] ValidIPv6Loopbacks = new IPAddress[] {\r\n            new IPAddress(new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 0, 0, 1 }, 0),  // ::127.0.0.1\r\n            IPAddress.Loopback.MapToIPv6(),                                                     // ::ffff:127.0.0.1\r\n            IPAddress.IPv6Loopback                                                              // ::1\r\n        };\r\n```\r\n\r\nBut it seems like the 864 line is there extra by mistake, invalidating previous statement. I also look at DualModeConnect_AcceptAsync_Helper and it validates result same way as we will now with this change.\r\n\r\nfixes #6681\r\nfixes #41685\r\n","Url":"https://github.com/dotnet/corefx/pull/41726","RelatedDescription":"Open PR \"update DualModeConnect_BeginAccept_Helper to be more liberal and consistent with DualModeConnect_AcceptAsync_Helper\" (#41726)"},{"Id":"505413840","IsPullRequest":true,"CreatedAt":"2019-10-11T05:05:29","Actor":"tmat","Number":"41716","RawContent":null,"Title":"Fix branch distance calculation","State":"closed","Body":"Port  #26621 to master","Url":"https://github.com/dotnet/corefx/pull/41716","RelatedDescription":"Closed or merged PR \"Fix branch distance calculation\" (#41716)"},{"Id":"505526980","IsPullRequest":false,"CreatedAt":"2019-10-11T03:53:39","Actor":"acty-toshiko","Number":"41720","RawContent":null,"Title":"Cannot connect when IPv6 is specified in .NET Core 2.2 FtpWebRequest","State":"closed","Body":"# Issue Title\r\n\r\nCannot connect when IPv6 is specified in .NET Core 2.2 FtpWebRequest\r\n\r\n# General\r\nAn exception occurred when Ipv6 was specified in FtpWebRequest in .NET Core 2.2 as shown below.\r\nIf it was confirmed with the same code in .NET Core 3.0, it was successful, so is it a problem before .NET Core 3.0?\r\n\r\n```\r\nprivate static async void CreateDirectory()\r\n{\r\n    try\r\n    {\r\n\tUriBuilder uriBuilder = new UriBuilder(\"ftp\", \"fe80::1439:5ee0:f81b:93bf\");\r\n\tUri reqUri = new Uri(uriBuilder.Uri, \"TestDir\");\r\n\tFtpWebRequest ftpWebRequest = (FtpWebRequest)WebRequest.CreateDefault(reqUri);\r\n\tftpWebRequest.Credentials = new NetworkCredential(\"User1\", \"Password1\");\r\n\tftpWebRequest.Method = WebRequestMethods.Ftp.MakeDirectory;\r\n\r\n        FtpWebResponse response = (FtpWebResponse) await ftpWebRequest.GetResponseAsync().ConfigureAwait(false);\r\n    }\r\n    catch (Exception ex)\r\n    {\r\n        Console.WriteLine(\"Message : \" + ex.Message);\r\n        Console.WriteLine(\"Exception :\\n\" + ex.ToString());\r\n    }\r\n}\r\n```\r\nMessage : This protocol version is not supported.\r\nException :\r\nSystem.Net.WebException: This protocol version is not supported. ---> System.NotSupportedException: This protocol version is not supported.\r\nat System.Net.Sockets.Socket.BeginConnect(IPAddress address, Int32 port, AsyncCallback requestCallback, Object state)\r\nat System.Net.Sockets.Socket.BeginConnect(String host, Int32 port, AsyncCallback requestCallback, Object state)\r\nat System.Net.Sockets.TcpClient.BeginConnect(String host, Int32 port, AsyncCallback requestCallback, `Object` state)\r\nat System.Net.Sockets.TcpClient.<>c.b__28_0(String targetHost, Int32 targetPort, AsyncCallback callback, Object state)\r\nat System.Threading.Tasks.TaskFactory1.FromAsyncImpl[TArg1,TArg2](Func5 beginMethod, Func2 endFunction, Action1 endAction, TArg1 arg1, TArg2 arg2, Object state, TaskCreationOptions creationOptions)\r\nat System.Threading.Tasks.TaskFactory.FromAsync[TArg1,TArg2](Func5 beginMethod, Action1 endMethod, TArg1 arg1, TArg2 arg2, Object state)\r\nat System.Net.Sockets.TcpClient.ConnectAsync(String host, Int32 port)\r\nat System.Net.FtpWebRequest.CreateConnectionAsync()\r\n--- End of inner exception stack trace ---\r\nat System.Net.FtpWebRequest.EndGetResponse(IAsyncResult asyncResult)\r\nat System.Net.WebRequest.<>c.b__68_2(IAsyncResult iar)\r\nat System.Threading.Tasks.TaskFactory1.FromAsyncCoreLogic(IAsyncResult iar, Func2 endFunction, Action1 endAction, Task1 promise, Boolean requiresSynchronization)\r\n--- End of stack trace from previous location where exception was thrown ---","Url":"https://github.com/dotnet/corefx/issues/41720","RelatedDescription":"Closed issue \"Cannot connect when IPv6 is specified in .NET Core 2.2 FtpWebRequest\" (#41720)"},{"Id":"505621217","IsPullRequest":true,"CreatedAt":"2019-10-11T03:49:34","Actor":"Dotnet-GitSync-Bot","Number":"41725","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"open","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @tannergooding","Url":"https://github.com/dotnet/corefx/pull/41725","RelatedDescription":"Open PR \"Mirror changes from dotnet/coreclr\" (#41725)"},{"Id":"505589188","IsPullRequest":true,"CreatedAt":"2019-10-11T02:45:54","Actor":"dotnet-maestro[bot]","Number":"41724","RawContent":null,"Title":"[release/3.1] Update dependencies from dotnet/coreclr","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:dbb830b1-8f81-460f-dd40-08d72a4caef5)\r\n## From https://github.com/dotnet/coreclr\r\n- **Build**: 20191010.7\r\n- **Date Produced**: 10/10/2019 9:48 PM\r\n- **Commit**: e38f3722a98ea66b805f388cd613ac587a44d7d2\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk.IL** -> 3.1.0-preview2.19510.7\r\n  - **Microsoft.NETCore.ILAsm** -> 3.1.0-preview2.19510.7\r\n  - **Microsoft.NETCore.Runtime.CoreCLR** -> 3.1.0-preview2.19510.7\r\n\r\n[marker]: <> (End:dbb830b1-8f81-460f-dd40-08d72a4caef5)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/41724","RelatedDescription":"Closed or merged PR \"[release/3.1] Update dependencies from dotnet/coreclr\" (#41724)"},{"Id":"505469406","IsPullRequest":true,"CreatedAt":"2019-10-10T23:52:31","Actor":"davidsh","Number":"41718","RawContent":null,"Title":"Re-enable NoCallback_RevokedCertificate_NoRevocationChecking_Succeeds","State":"closed","Body":"The third-party server we use for this test, revoked.badssl.com, now has a new\r\ncertificate that is good for another two years and is also revoked. So, we can\r\nre-enable this test.\r\n\r\nFixes #41108","Url":"https://github.com/dotnet/corefx/pull/41718","RelatedDescription":"Closed or merged PR \"Re-enable NoCallback_RevokedCertificate_NoRevocationChecking_Succeeds\" (#41718)"},{"Id":"505560973","IsPullRequest":true,"CreatedAt":"2019-10-10T23:33:03","Actor":"Anipik","Number":"41723","RawContent":null,"Title":"Bumping the assembly version to 5.0.0.0","State":"open","Body":"","Url":"https://github.com/dotnet/corefx/pull/41723","RelatedDescription":"Open PR \"Bumping the assembly version to 5.0.0.0\" (#41723)"},{"Id":"505559846","IsPullRequest":false,"CreatedAt":"2019-10-10T23:28:39","Actor":"guperrot","Number":"41722","RawContent":null,"Title":"UWP: System.Reflection.MissingRuntimeArtifactException caused by Encoding.GetString(Byte*,Int32) reflection.","State":"open","Body":"Microsoft AppCenter is trying to use System.Reflection.Metadata v1.7.0.\r\n\r\nWe are trying to extract some information about the native image from a stack trace frame for our crash reporting tool for apps compiled in .NET Native but not distributed in Windows Store.\r\n\r\nOne part of the code is using `System.Reflection.PortableExecutable.PEReader` and in particular the `ReadCodeViewDebugDirectoryData` that at some point calls `Encoding.GetString(System.Byte*, System.Int32)` via reflection: https://github.com/dotnet/corefx/blob/d3911035f2ba3eb5c44310342cc1d654e42aa316/src/System.Reflection.Metadata/src/System/Reflection/Internal/Utilities/EncodingHelper.cs#L122-L123\r\n\r\nWhen .NET native is enabled on a release x86 app build, we get:\r\n\r\n```\r\nSystem.Reflection.MissingRuntimeArtifactException\r\n  HResult=0x8013151A\r\n  Message=Object_NotInvokable, System.Text.Encoding.GetString(System.Byte*,System.Int32)\r\n  Source=<Cannot evaluate the exception source>\r\n  StackTrace:\r\n<Cannot evaluate the exception stack trace>\r\n```\r\n\r\nWe tried adding various rules in the `Default.rd.xml` of our test application but without luck so far.\r\n\r\nI isolated the problem here to reproduce the problem with an app that builds very fast because very small: https://github.com/guperrot/uwp-rd-test/blob/master/UwpRdTest/App.xaml.cs#L37\r\n\r\nAnd the rules: https://github.com/guperrot/uwp-rd-test/blob/master/UwpRdTest/Properties/Default.rd.xml we tried a lot of combinations of Type, Assembly, Namespace etc... but we are unable to find the rule that would solve this reflection issue.","Url":"https://github.com/dotnet/corefx/issues/41722","RelatedDescription":"Open issue \"UWP: System.Reflection.MissingRuntimeArtifactException caused by Encoding.GetString(Byte*,Int32) reflection.\" (#41722)"},{"Id":"505544590","IsPullRequest":true,"CreatedAt":"2019-10-10T22:35:01","Actor":"eiriktsarpalis","Number":"41721","RawContent":null,"Title":"HttpStress: Add scripts for loading the corefx testhost in the environment","State":"open","Body":"Adds a pair of bash & powershell scripts intended for loading the `testhost` sdk in the current environment. Effectively it can be used to run httpstress against the current corefx in three commands:\r\n```powershell\r\n# Build corefx from source\r\nPS> .\\build.sh -c Release\r\n# Load the testhost sdk in the current environment, must match build configuration\r\nPS> . .\\src\\System.Net.Http\\tests\\StressTests\\HttpStress\\load-corefx-testhost.ps1 -c Release\r\n# run the stress suite with the new bits\r\nPS> cd .\\src\\System.Net.Http\\tests\\StressTests\\HttpStress ; dotnet run -r win10-x64 \r\n```\r\nEquivalently using bash\r\n```bash\r\n# Build corefx from source\r\n$ ./build.sh -c Release\r\n# Load the testhost sdk in the current environment, must match build configuration\r\n$ source src/System.Net.Http/tests/StressTests/HttpStress/load-corefx-testhost.sh -c Release\r\n# run the stress suite with the new bits\r\n$ cd src/System.Net.Http/tests/StressTests/HttpStress && dotnet run -r linux-x64 \r\n```\r\n\r\nThe powershell script has been tested with powershell core on linux and the bash script works with mingw on Windows. I've placed the scripts in the stress folder for now, but I think there's value in moving these more centrally in the repo.\r\n\r\nMotivation is simplifying steps required for running HttpStress in CI.","Url":"https://github.com/dotnet/corefx/pull/41721","RelatedDescription":"Open PR \"HttpStress: Add scripts for loading the corefx testhost in the environment\" (#41721)"},{"Id":"505523501","IsPullRequest":false,"CreatedAt":"2019-10-10T21:34:52","Actor":"carlossanlop","Number":"41719","RawContent":null,"Title":"Ensure FileStatus' Unix exception throwing behavior matches Windows","State":"open","Body":"Initially reported by @davidfowl and discussed via email with @JeremyKuhne : we need to make sure Unix matches Windows when it comes to capturing and throwing exceptions.\r\n\r\nDavid got this callstack when the Docker container got disconnected:\r\n\r\n```\r\nUnhandled exception. Unhandled exception. System.IO.IOException: Input/output error\r\n   at System.IO.FileStatus.EnsureStatInitialized(ReadOnlySpan`1 path, Boolean continueOnError)\r\n   at System.IO.FileStatus.GetLastWriteTime(ReadOnlySpan`1 path, Boolean continueOnError)\r\n   at Microsoft.Extensions.FileProviders.Physical.PollingFileChangeToken.GetLastWriteTimeUtc()\r\n   at Microsoft.Extensions.FileProviders.Physical.PollingFileChangeToken.get_HasChanged()\r\n   at Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.RaiseChangeEvents(Object state)\r\n   at System.Threading.TimerQueueTimer.CallCallback(Boolean isThreadPool)\r\n   at System.Threading.TimerQueueTimer.Fire(Boolean isThreadPool)\r\n   at System.Threading.TimerQueue.FireNextTimers()System.IO.IOException: Input/output error\r\n   at System.IO.FileStatus.EnsureStatInitialized(ReadOnlySpan`1 path, Boolean continueOnError)\r\n   at System.IO.FileStatus.GetLastWriteTime(ReadOnlySpan`1 path, Boolean continueOnError)\r\n   at Microsoft.Extensions.FileProviders.Physical.PollingFileChangeToken.GetLastWriteTimeUtc()\r\n   at Microsoft.Extensions.FileProviders.Physical.PollingFileChangeToken.get_HasChanged()\r\n   at Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.RaiseChangeEvents(Object state)\r\n   at System.Threading.TimerQueueTimer.CallCallback(Boolean isThreadPool)\r\n   at System.Threading.TimerQueueTimer.Fire(Boolean isThreadPool)\r\n   at System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n\r\n```","Url":"https://github.com/dotnet/corefx/issues/41719","RelatedDescription":"Open issue \"Ensure FileStatus' Unix exception throwing behavior matches Windows\" (#41719)"},{"Id":"505231667","IsPullRequest":true,"CreatedAt":"2019-10-10T20:56:06","Actor":"dotnet-maestro[bot]","Number":"41705","RawContent":null,"Title":"[master] Update dependencies from dotnet/coreclr","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:be1e858a-d56c-4174-7dc0-08d6ba16a224)\r\n## From https://github.com/dotnet/coreclr\r\n- **Build**: 20191009.1\r\n- **Date Produced**: 10/9/2019 1:01 PM\r\n- **Commit**: 9e6f164a41cfe6af6a7de2765eb4a6cc695032cd\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk.IL** -> 5.0.0-alpha1.19509.1\r\n  - **Microsoft.NETCore.ILAsm** -> 5.0.0-alpha1.19509.1\r\n  - **Microsoft.NETCore.Runtime.CoreCLR** -> 5.0.0-alpha1.19509.1\r\n\r\n[marker]: <> (End:be1e858a-d56c-4174-7dc0-08d6ba16a224)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/41705","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/coreclr\" (#41705)"},{"Id":"505403041","IsPullRequest":false,"CreatedAt":"2019-10-10T20:25:38","Actor":"AmarMovva","Number":"41714","RawContent":null,"Title":"Encoding UTF8 GetString behaving differently in .net core 3.0","State":"closed","Body":"```\r\nvar encoding = new System.Text.UTF8Encoding();\r\nvar bytes = new Byte[] { 240, 142 };\r\n```\r\n//Outputs two null (?) UTF8 characters in .net core 3.0 but in .net core 2.2, .net 4.7.2 framework \r\n//returns only one null character\r\n`encoding.GetString(bytes);`\r\n\r\nDid something got changed with .net core 3.0.","Url":"https://github.com/dotnet/corefx/issues/41714","RelatedDescription":"Closed issue \"Encoding UTF8 GetString behaving differently in .net core 3.0\" (#41714)"},{"Id":"505419314","IsPullRequest":true,"CreatedAt":"2019-10-10T19:21:11","Actor":"Anipik","Number":"41717","RawContent":null,"Title":"update branding for preview2","State":"closed","Body":"","Url":"https://github.com/dotnet/corefx/pull/41717","RelatedDescription":"Closed or merged PR \"update branding for preview2\" (#41717)"},{"Id":"505409442","IsPullRequest":true,"CreatedAt":"2019-10-10T17:30:10","Actor":"tmat","Number":"41715","RawContent":null,"Title":"Fix branch distance calculation","State":"open","Body":"Port fix https://github.com/dotnet/corefx/pull/28493 of https://github.com/dotnet/corefx/issues/26621 from release/2.1 to release/3.1.\r\n\r\nFixes https://github.com/dotnet/corefx/issues/41710\r\n\r\nThe original fix was merged to release/2.1, but not to master at that time and did not flow to 3.0.\r\n3.0 thus regressed because it didn't contain the fix. This change is bringing the fix back in 3.1.","Url":"https://github.com/dotnet/corefx/pull/41715","RelatedDescription":"Open PR \"Fix branch distance calculation\" (#41715)"},{"Id":"505371141","IsPullRequest":false,"CreatedAt":"2019-10-10T16:10:02","Actor":"adaviding","Number":"41713","RawContent":null,"Title":".NET standard needs a monotonic clock that only increases when the debugger is paused.","State":"open","Body":"Consider that you need to implement a timeout for some asynchronous thread running inside your .NET program.  You might choose to rely on [Environment.TickCount64](https://docs.microsoft.com/en-us/dotnet/api/system.environment.tickcount64?view=netcore-3.0) as a monotonic clock (to mark the passage of time).\r\n\r\nUnfortunately, if you were to use a debugger to pause your program, you might discover that all of your timeouts had expired when the program was resumed.  Thus, you are prevented from debugging the \"normal\" behavior of your program.\r\n\r\nIt might be nice if there was perhaps an `Environment.DebuggerPausedTickCount64` property which increased monotonically, but only while the debugger had paused the program.  Thus a developer would be able to implement a special kind of monotonic clock using a trivial expression:\r\n\r\n```cs\r\nEnvironment.TickCount64 - Environment.DebuggerPausedTickCount64\r\n```\r\n\r\nThe expression above would be a kind of monotonic clock that is robust against the usage of the debugger.  It would be useful for implementing timeouts for anything occurring asynchronously within the current process.  (Obviously anything running out of process is not stopped by the debugger so there are some cases where the clock would be inappropriate.)","Url":"https://github.com/dotnet/corefx/issues/41713","RelatedDescription":"Open issue \".NET standard needs a monotonic clock that only increases when the debugger is paused.\" (#41713)"},{"Id":"505352635","IsPullRequest":true,"CreatedAt":"2019-10-10T15:37:43","Actor":"bartonjs","Number":"41712","RawContent":null,"Title":"Only pass the needed sub-struct in WriteUncompressedPublicKey.","State":"open","Body":"Just some general tidiness that was in a prototyping branch that seemed worth keeping.","Url":"https://github.com/dotnet/corefx/pull/41712","RelatedDescription":"Open PR \"Only pass the needed sub-struct in WriteUncompressedPublicKey.\" (#41712)"},{"Id":"505347748","IsPullRequest":false,"CreatedAt":"2019-10-10T15:29:31","Actor":"msmolka","Number":"41711","RawContent":null,"Title":"System.Text.Json Datetimeoffset should support +0000 offset","State":"open","Body":"Currently only offset presented by +00:00 is supported, but +0000 or +00 is also allowed in ISO standard so these should be supported as well.\r\n\r\n`\r\nAn offset of zero, in addition to having the special representation \"Z\", can also be stated numerically as \"+00:00\", \"+0000\", or \"+00\". \r\n`","Url":"https://github.com/dotnet/corefx/issues/41711","RelatedDescription":"Open issue \"System.Text.Json Datetimeoffset should support +0000 offset\" (#41711)"},{"Id":"505232387","IsPullRequest":false,"CreatedAt":"2019-10-10T15:22:22","Actor":"msmolka","Number":"41706","RawContent":null,"Title":"System.Text.Json DateTimeOffset serialization and deserialization work wrongly","State":"closed","Body":"in System.Text.Json serializing and deserializing datetimeoffset looses precision and most important part the offset part.\r\n\r\nThere is no different between datetime and datetimeoffset after serialization. In multi time environments it cases serious issues since all times are treated as UTC,\r\n\r\nJsonString uses \"s\" format\r\n\r\n```c#\r\n public JsonString(DateTimeOffset value) => Value = value.ToString(\"s\", CultureInfo.InvariantCulture);\r\n```\r\n\r\nWhich is not producing right value. It totally ignores offset.","Url":"https://github.com/dotnet/corefx/issues/41706","RelatedDescription":"Closed issue \"System.Text.Json DateTimeOffset serialization and deserialization work wrongly\" (#41706)"},{"Id":"505296191","IsPullRequest":false,"CreatedAt":"2019-10-10T14:07:07","Actor":"IntelOrca","Number":"41710","RawContent":null,"Title":"Incorrect branch distance calculation present in .NET core 3.0+","State":"open","Body":"Issue #26621 is still present in .NET core 3.0 onwards as the fix #28493 was not merged into the 3.0 source stream.","Url":"https://github.com/dotnet/corefx/issues/41710","RelatedDescription":"Open issue \"Incorrect branch distance calculation present in .NET core 3.0+\" (#41710)"},{"Id":"505295425","IsPullRequest":false,"CreatedAt":"2019-10-10T14:05:54","Actor":"joseangelmt","Number":"41709","RawContent":null,"Title":"Could not load file or assembly 'System.IO.Ports, Version 4.0.1.0, Culture...' after upgrade to System.IO.Ports 4.6.0.","State":"open","Body":"After upgrade my .NETStandard v2.0 projects to System.IO.Ports Nuget package 4.6.0. I'm having the next error: \r\n\r\n> Could not load file or assembly 'System.IO.Ports, Version 4.0.1.0, Culture...'. The located assembly's manifest definition does not match the assembly reference.\r\n\r\nThe project's metadata shows references to `System.IO.Ports` version **4.0.1.0**, but the deployed version is **4.0.2.0**.\r\n\r\nAnalyzing the assemblies in the NuGet package, I can see the assembly in the `ref\\netstandard2.0` folder has version **4.0.1.0** but the other assemblies (folder `lib\\netstandard2.0, runtimes\\osx\\lib\\netstandard2.0, runtimes\\linux\\lib\\netstandard2.0, runtimes\\win\\lib\\netstandard2.0`) has version **4.0.2.0**.\r\n","Url":"https://github.com/dotnet/corefx/issues/41709","RelatedDescription":"Open issue \"Could not load file or assembly 'System.IO.Ports, Version 4.0.1.0, Culture...' after upgrade to System.IO.Ports 4.6.0.\" (#41709)"},{"Id":"505278370","IsPullRequest":true,"CreatedAt":"2019-10-10T13:38:34","Actor":"dotnet-maestro[bot]","Number":"41708","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx dotnet/standard","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:368e60b9-57f7-48bd-020d-08d6874ba0bd)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20191009.26\r\n- **Date Produced**: 10/10/2019 3:16 AM\r\n- **Commit**: 30280e07adc3c1f0776ef9531b47a769e2b45420\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **runtime.native.System.IO.Ports** -> 5.0.0-alpha1.19509.26\r\n  - **Microsoft.NETCore.Platforms** -> 5.0.0-alpha1.19509.26\r\n\r\n[marker]: <> (End:368e60b9-57f7-48bd-020d-08d6874ba0bd)\r\n\r\n[marker]: <> (Begin:a2867060-7cad-40ad-7917-08d6937ac7c4)\r\n## From https://github.com/dotnet/standard\r\n- **Build**: 20191009.1\r\n- **Date Produced**: 10/9/2019 12:35 PM\r\n- **Commit**: 1e2d0bc743db548ffde0beaf732b4fdd1348bdba\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **NETStandard.Library** -> 2.2.0-prerelease.19509.1\r\n\r\n[marker]: <> (End:a2867060-7cad-40ad-7917-08d6937ac7c4)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/41708","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/corefx dotnet/standard\" (#41708)"},{"Id":"505223980","IsPullRequest":true,"CreatedAt":"2019-10-10T13:36:50","Actor":"dotnet-maestro[bot]","Number":"41703","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c297d885-0692-40f8-6b97-08d61f281b4c)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20191009.5\r\n- **Date Produced**: 10/9/2019 10:22 PM\r\n- **Commit**: 1acb4c3ce4c6497388752adad31825ae7cdb7e2a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions** -> 5.0.0-beta.19509.5\r\n  - **Microsoft.DotNet.XUnitConsoleRunner** -> 2.5.1-beta.19509.5\r\n  - **Microsoft.DotNet.VersionTools.Tasks** -> 5.0.0-beta.19509.5\r\n  - **Microsoft.DotNet.ApiCompat** -> 5.0.0-beta.19509.5\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 5.0.0-beta.19509.5\r\n  - **Microsoft.DotNet.Build.Tasks.Configuration** -> 5.0.0-beta.19509.5\r\n  - **Microsoft.DotNet.Build.Tasks.Feed** -> 5.0.0-beta.19509.5\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 5.0.0-beta.19509.5\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 5.0.0-beta.19509.5\r\n  - **Microsoft.DotNet.CoreFxTesting** -> 5.0.0-beta.19509.5\r\n  - **Microsoft.DotNet.GenAPI** -> 5.0.0-beta.19509.5\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 5.0.0-beta.19509.5\r\n  - **Microsoft.DotNet.RemoteExecutor** -> 5.0.0-beta.19509.5\r\n  - **Microsoft.DotNet.GenFacades** -> 5.0.0-beta.19509.5\r\n\r\n[marker]: <> (End:c297d885-0692-40f8-6b97-08d61f281b4c)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/41703","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#41703)"},{"Id":"505258592","IsPullRequest":true,"CreatedAt":"2019-10-10T13:05:16","Actor":"qmfrederik","Number":"41707","RawContent":null,"Title":"System.Drawing.Common: Require at least libgdiplus 6.0.1 on Unix","State":"open","Body":"As discussed in #24525, make sure that a recent version of libgdiplus is installed on Unix.\r\n\r\n- I chose 6.0.1. as the baseline:\r\n  * It contains a couple of access violation fixes.\r\n  * IIRC I could get all System.Drawing.Common tests to run on that version without the test process crashing. Lots of tests would still fail on Unix, though.\r\n  * By the time .NET 5 is released, that version will be 1 year old, so hopefully Homebrew & the Linux distros have picked it up\r\n- A PNSE will be thrown from within the GdiplusNative constructor. That's early. On the other hand, System.Drawing.Common really isn't that useful if you don't have a stable version of libgdiplus.","Url":"https://github.com/dotnet/corefx/pull/41707","RelatedDescription":"Open PR \"System.Drawing.Common: Require at least libgdiplus 6.0.1 on Unix\" (#41707)"},{"Id":"505230198","IsPullRequest":false,"CreatedAt":"2019-10-10T12:14:01","Actor":"martin-frydl","Number":"41704","RawContent":null,"Title":"XmlSchemaAnyAttribute.Namespace throws NRE when not set before","State":"open","Body":"When I have \"empty\" instance of XmlSchemaAnyAttribute and access Namespace property, it throws NullReferenceException. This is caused by commit 2c22af8903522e54f71225c40ddd383b15632ae0 which now calls NamespaceList.ToString().\r\n\r\nAccording to XML schema specification, namespace attribute is optional so it is valid to have it set to null. For example when I read XML schema with <xs:anyAttribute/>, .NET XML reader will create exactly the same instance - with null _ns field and also null NamespaceList. Later when I try to access the field, I get NRE. I get it also when I try to save schema back to serialized form. This time the exception is thrown from serialization due to optimization - the line of code in XmlSchemaAnyAttribute is not visible in exception stack trace.\r\n\r\nHow to reproduce:\r\nvar x = new XmlSchemaAnyAttribute().Namespace;","Url":"https://github.com/dotnet/corefx/issues/41704","RelatedDescription":"Open issue \"XmlSchemaAnyAttribute.Namespace throws NRE when not set before\" (#41704)"},{"Id":"505215850","IsPullRequest":false,"CreatedAt":"2019-10-10T11:44:30","Actor":"Rookian","Number":"41702","RawContent":null,"Title":"HttpClient .NET Core 2.1/3.0 Different behaviour to Fullframework when uploading files using Windows Authentication (NTLM): An existing connection was forcibly closed by the remote host","State":"open","Body":"We try to upload a file to a windows hosted web server. \r\nUsing the Fullframework everything works fine. \r\nWe use the follwing code:\r\n\r\n```\r\nusing (var httpClient = new HttpClient(new HttpClientHandler {UseDefaultCredentials = true}) {BaseAddress = new Uri($\"{Host}/rest-ws/service/\")})\r\n{\r\n    var requestUri = $\"dms/{itemId}/content?filename={fileName}.{fileExtension}\";\r\n\r\n    var requestContent = new MultipartFormDataContent();\r\n\r\n    var byteArrayContent = new ByteArrayContent(fileData);\r\n    byteArrayContent.Headers.ContentType = MediaTypeHeaderValue.Parse(\"text/plain\");\r\n    requestContent.Add(byteArrayContent, fileName, \"{fileName}.{fileExtension}\");\r\n\r\n    var responseMessage = await httpClient.PostAsync(requestUri, requestContent);\r\n}\r\n```\r\n\r\nWhen we use the exact code in .NET Core we receive an error.\r\n\r\n> System.Net.Http.HttpRequestException\r\n>   HResult=0x80131620\r\n>   Message=An error occurred while sending the request.\r\n>   Source=System.Net.Http\r\n>   StackTrace:\r\n>    at System.Net.Http.HttpConnection.<SendAsyncCore>d__53.MoveNext()\r\n>    at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n>    at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n>    at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n>    at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()\r\n>    at System.Net.Http.AuthenticationHelper.<SendWithNtAuthAsync>d__47.MoveNext()\r\n>    at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n>    at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n>    at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n>    at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()\r\n>    at System.Net.Http.HttpConnectionPool.<SendWithNtConnectionAuthAsync>d__48.MoveNext()\r\n>    at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n>    at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n>    at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n>    at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()\r\n>    at System.Net.Http.HttpConnectionPool.<SendWithRetryAsync>d__47.MoveNext()\r\n>    at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n>    at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n>    at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n>    at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()\r\n>    at System.Net.Http.AuthenticationHelper.<SendWithAuthAsync>d__17.MoveNext()\r\n>    at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n>    at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n>    at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n>    at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()\r\n>    at System.Net.Http.RedirectHandler.<SendAsync>d__4.MoveNext()\r\n>    at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n>    at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n>    at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n>    at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()\r\n>    at System.Net.Http.DiagnosticsHandler.<SendAsync>d__2.MoveNext()\r\n>    at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n>    at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n>    at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n>    at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()\r\n>    at System.Net.Http.HttpClient.<FinishSendAsyncBuffered>d__70.MoveNext()\r\n>    at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n>    at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n>    at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n>    at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()\r\n>    at Core.Console.Program.<UploadDocument>d__2.MoveNext() in C:\\git\\econ-main\\src\\PoC\\ReproHttpClient\\ReproHttpClient\\Core.Console\\Program.cs:line 49\r\n>    at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n>    at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n>    at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n>    at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()\r\n>    at Core.Console.Program.<Main>d__1.MoveNext() in C:\\git\\econ-main\\src\\PoC\\ReproHttpClient\\ReproHttpClient\\Core.Console\\Program.cs:line 18\r\n> \r\n> Inner Exception 1:\r\n> IOException: Unable to read data from the transport connection: An existing connection was forcibly closed by the remote host..\r\n> \r\n> Inner Exception 2:\r\n> SocketException: An existing connection was forcibly closed by the remote host.\r\n> \r\n\r\n**HTTP/TCP Stream for full framework:**\r\n\r\n> POST /rest-ws/service/dms/42863508DFF541C49B0C298C7C4A3EA3/content?filename=test.txt HTTP/1.1\r\n> Content-Type: multipart/form-data; boundary=\"af9cb1b0-4999-47f6-95ac-b91ec572edf3\"\r\n> **Authorization: NTLM** TlRMTVNTUAABAAAAB7IIogMAAwA2AAAADgAOACgAAAAKAO5CAAAAD0RFRTRFNzQ5M0I2NUNFUENX\r\n> Host: enaio-web-dev.pcw.local\r\n> Content-Length: 0\r\n> \r\n> HTTP/1.1 401 Unauthorized\r\n> WWW-Authenticate: NTLM TlRMTVNTUAACAAAABgAGADgAAAAFgomiuIB1rGBkz1kAAAAAAAAAAIYAhgA+AAAABgOAJQAAAA9QAEMAVwACAAYAUABDAFcAAQASAEQARQBMAEUASQA0ADQANgAxAAQAEgBwAGMAdwAuAGwAbwBjAGEAbAADACYARABFAEwARQBJADQANAA2ADEALgBwAGMAdwAuAGwAbwBjAGEAbAAFABIAcABjAHcALgBsAG8AYwBhAGwABwAIAEb+j2i6ftUBAAAAAA==\r\n> Connection: keep-alive\r\n> Transfer-Encoding: chunked\r\n> \r\n> POST /rest-ws/service/dms/42863508DFF541C49B0C298C7C4A3EA3/content?filename=test.txt HTTP/1.1\r\n> Content-Type: multipart/form-data; boundary=\"af9cb1b0-4999-47f6-95ac-b91ec572edf3\"\r\n> **Authorization: NTLM** TlRMTVNTUAADAAAAGAAYAJYAAABGAUYBrgAAAAYABgBYAAAAHAAcAF4AAAAcABwAegAAAAAAAAD0AQAABYKIogoA7kIAAAAPEbCaOQL9OyvKrDhOAwzVmVAAQwBXAEEAbABlAHgAYQBuAGQAZQByAC4AVABhAG4AawBEAEUARQA0AEUANwA0ADkAMwBCADYANQBDAEUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZCUzvh3aE3JHGgoP/w5ihQEBAAAAAAAARv6PaLp+1QH1umYM8m/M/wAAAAACAAYAUABDAFcAAQASAEQARQBMAEUASQA0ADQANgAxAAQAEgBwAGMAdwAuAGwAbwBjAGEAbAADACYARABFAEwARQBJADQANAA2ADEALgBwAGMAdwAuAGwAbwBjAGEAbAAFABIAcABjAHcALgBsAG8AYwBhAGwABwAIAEb+j2i6ftUBBgAEAAIAAAAIADAAMAAAAAAAAAAAAAAAADAAAA3oSg1RakvSibPBI+7YwrVkmqjdyu0lOsOQM14VA0j1CgAQAAAAAAAAAAAAAAAAAAAAAAAJADgASABUAFQAUAAvAGUAbgBhAGkAbwAtAHcAZQBiAC0AZABlAHYALgBwAGMAdwAuAGwAbwBjAGEAbAAAAAAAAAAAAAAAAAA=\r\n> Host: enaio-web-dev.pcw.local\r\n> Content-Length: 116336\r\n> **Expect: 100-continue**\r\n> \r\n> --af9cb1b0-4999-47f6-95ac-b91ec572edf3\r\n> Content-Type: text/plain\r\n> Content-Disposition: form-data; name=test; filename=\"{fileName}.{fileExtension}\"; filename*=utf-8''%7BfileName%7D.%7BfileExtension%7D\r\n> \r\n> ...UPLOADED FILE CONTENT\r\n> --af9cb1b0-4999-47f6-95ac-b91ec572edf3--\r\n> \r\n> HTTP/1.1 201 Created\r\n> Set-Cookie: GWSESSIONID=node015onigrgvwlxy1sylpb0trlbwk182.node0;Path=/\r\n> Expires: Thu, 01 Jan 1970 00:00:00 GMT\r\n> X-Application-Context: gateway:prodsso,cloud,red:80\r\n> X-Powered-By: Undertow/1\r\n> Set-Cookie: JSESSIONID_10.49.3.203_8080=jVf77qn98PARc89FAEeX4ciuRCqd3xVu1tN_xD3j.delei4461; path=/rest-ws\r\n> Server: WildFly/9\r\n> Location: http://***/rest-ws/service/dms/42863508DFF541C49B0C298C7C4A3EA3/content?index=0&type=contractdocument\r\n> Date: Wed, 09 Oct 2019 15:58:36 GMT\r\n> Connection: keep-alive\r\n> X-Os-Id: 42863508DFF541C49B0C298C7C4A3EA3\r\n> Content-Type: application/json;charset=utf-8\r\n> Transfer-Encoding: chunked\r\n> \r\n> {\"id\":\"42863508DFF541C49B0C298C7C4A3EA3\",\"uri\":\"http://***/rest-ws/service/dms/42863508DFF541C49B0C298C7C4A3EA3/content?index=0&type=contractdocument\"}\r\n> \r\n\r\n**HTTP/TCP Stream for .NET Core 3.0:**\r\n\r\n> POST /rest-ws/service/dms/42863508DFF541C49B0C298C7C4A3EA3/content?filename=test.txt HTTP/1.1\r\n> Host: enaio-web-dev.pcw.local\r\n> Content-Type: multipart/form-data; boundary=\"0145d6df-9419-4027-9095-629778dbbd72\"\r\n> Content-Length: 116336\r\n> \r\n> --0145d6df-9419-4027-9095-629778dbbd72\r\n> Content-Type: text/plain\r\n> Content-Disposition: form-data; name=test; filename=\"{fileName}.{fileExtension}\"; filename*=utf-8''%7BfileName%7D.%7BfileExtension%7D\r\n> \r\n> ...FILE CONTENT\r\n> \r\n> HTTP/1.1 401 Unauthorized\r\n> WWW-Authenticate: NTLM\r\n> Connection: keep-alive\r\n> Content-Language: en-US\r\n> Content-Type: text/html;charset=utf-8\r\n> Transfer-Encoding: chunked\r\n> \r\n> <!DOCTYPE html>\r\n> ...\r\n\r\n\r\nAs you can see the full framework is sending 2 additional headers:\r\n\r\n- Authorization: NTLM\r\n\r\n- Expect: 100-continue\r\n\r\nWe also noticed that when we send a very small file or an empty byte array the authentication is working for .NET Core 3.0\r\n\r\nOur workaround right now is to first send a small Get request to authenticate against the server and receive an authentication cookie and then upload the file. So all following requests just use the authentication cookie and no NTLM. ","Url":"https://github.com/dotnet/corefx/issues/41702","RelatedDescription":"Open issue \"HttpClient .NET Core 2.1/3.0 Different behaviour to Fullframework when uploading files using Windows Authentication (NTLM): An existing connection was forcibly closed by the remote host\" (#41702)"},{"Id":"505118000","IsPullRequest":false,"CreatedAt":"2019-10-10T10:17:10","Actor":"AriNuer","Number":"41699","RawContent":null,"Title":"Test failure: System.Tests.StringTests.ToUpper_TurkishI_EnglishUSCulture","State":"closed","Body":"Test `System.Tests.StringTests.ToUpper_TurkishI_EnglishUSCulture` has failed.\r\n\r\n```\r\n System.Tests.StringTests.ToUpper_TurkishI_EnglishUSCulture(s: \"I\", expected: \"I\") [FAIL]\r\n      Timed out at 10/10/2019 12:49:19 AM after 60000ms waiting for remote process.\r\n      \tProcess ID: 6716\r\n      \tHandle: 1244\r\n      \tName: dotnet\r\n      \tMainModule: C:\\dotnetbuild\\work\\5f1b1b2e-29d1-4e69-9a86-dd1963109f53\\Payload\\dotnet.exe\r\n      \tStartTime: 10/10/2019 12:48:19 AM\r\n      \tTotalProcessorTime: 00:00:00.1562500\r\n      \tThreads:\r\n      \t\tThread #1 (OS 0x1A48) \r\n      \t\t\t[InlinedCallFrame]\r\n      \t\t\tSystem.Environment.Exit(Int32)\r\n      \t\t\tMicrosoft.DotNet.RemoteExecutor.Program.Main(System.String[])\r\n      \t\t\t[GCFrame]\r\n      \t\t\t[GCFrame]\r\n      \t\tThread #2 (OS 0x1A0C) [Finalizer]\r\n      \t\t\t[DebuggerU2MCatchHandlerFrame]\r\n      \t\tThread #3 (OS 0x1970) [Thread pool worker]\r\n      \r\n      Stack Trace:\r\n        /_/src/Microsoft.DotNet.RemoteExecutor/src/RemoteInvokeHandle.cs(131,0): at Microsoft.DotNet.RemoteExecutor.RemoteInvokeHandle.Dispose(Boolean disposing)\r\n        /_/src/Microsoft.DotNet.RemoteExecutor/src/RemoteInvokeHandle.cs(55,0): at Microsoft.DotNet.RemoteExecutor.RemoteInvokeHandle.Dispose()\r\n        /_/src/Common/tests/Tests/System/StringTests.cs(5647,0): at System.Tests.StringTests.ToUpper_TurkishI_EnglishUSCulture(String s, String expected)\r\n  Finished:    System.Runtime.Tests\r\n=== TEST EXECUTION SUMMARY ===\r\n   System.Runtime.Tests  Total: 34299, Errors: 0, Failed: 1, Skipped: 19, Time: 78.532s\r\n----- end Thu 10/10/2019  0:49:21.82 ----- exit code 1 ----------------------------------------------------------\r\n```\r\n\r\nBuild:[20191009.59](https://dnceng.visualstudio.com/public/_build/results?buildId=383488)(Master)\r\n\r\nDetails:\r\nhttps://helix.dot.net/api/2019-06-17/jobs/5f1b1b2e-29d1-4e69-9a86-dd1963109f53/workitems/System.Runtime.Tests/console","Url":"https://github.com/dotnet/corefx/issues/41699","RelatedDescription":"Closed issue \"Test failure: System.Tests.StringTests.ToUpper_TurkishI_EnglishUSCulture\" (#41699)"},{"Id":"505064311","IsPullRequest":false,"CreatedAt":"2019-10-10T10:12:40","Actor":"Alex493049469","Number":"41697","RawContent":null,"Title":"Incorrect output double when formatting using format specifier G","State":"closed","Body":"\r\n```\r\ndouble d1 = (0.60000000000000009);\r\nConsole.WriteLine(d1.ToString(\"G\"));\r\n\r\ndouble d2 = (0.20000000000000001);\r\nConsole.WriteLine(d2.ToString(\"G\"));\r\n\t\t\t\t\r\n//.net 4.6.2\r\n//0,6\r\n//0,2\r\n\r\n//.net Core 3.0\r\n//0,6000000000000001\r\n//0,2\r\n```","Url":"https://github.com/dotnet/corefx/issues/41697","RelatedDescription":"Closed issue \"Incorrect output double when formatting using format specifier G\" (#41697)"},{"Id":"505151002","IsPullRequest":false,"CreatedAt":"2019-10-10T09:33:19","Actor":"JamesNK","Number":"41701","RawContent":null,"Title":"HttpClient: Improve logging and error messages when mismatch between client and server protocol/TLS","State":"open","Body":"My experience with gRPC is that it is very common to run into trouble establishing a connection between the client and the server because of incorrect protocol/TLS.\r\n\r\nThe logging and error messages in HttpClient should do as much as possible to to help developers fix their own mistakes.\r\n\r\nCommon problem situations:\r\n1. Client (HTTP/2 with and without TLS) calling HTTP/1 only port\r\n2. Client (HTTP/1 with and without TLS) calling HTTP/2 only port\r\n3. Client (HTTP/2 without TLS) calling HTTP/1 and HTTP/2 port (will fail because no negotiation and default to 1.1)\r\n4. Client (no TLS) calling TLS port\r\n5. Client (TLS) calling no TLS port\r\n\r\nPrevious issue: https://github.com/dotnet/corefx/issues/37431 (note: now considering making HTTP/2 without TLS a more first-class experience - https://github.com/dotnet/corefx/issues/41621)","Url":"https://github.com/dotnet/corefx/issues/41701","RelatedDescription":"Open issue \"HttpClient: Improve logging and error messages when mismatch between client and server protocol/TLS\" (#41701)"},{"Id":"505136317","IsPullRequest":false,"CreatedAt":"2019-10-10T09:28:38","Actor":"benmccallum","Number":"41700","RawContent":null,"Title":"Directory.GetFiles works on Win but not *nix","State":"closed","Body":"Hi team,\r\n\r\nI'm trying to use a dotnet core global tool in a docker build process but getting caught up on the fact that this line of code works on Windows and finds the files, but in a Linux environment it doesn't seem to. \r\n\r\n    Directory.GetFiles(currentWorkingDirectory, \"*.csproj\", SearchOption.AllDirectories)\r\n\r\nFor the Windows docker image, I'm using `microsoft/dotnet:2.2-sdk-nanoserver-sac2016` and for the Linux one I'm trying to migrate to I'm using `mcr.microsoft.com/dotnet/core/sdk:2.2`.\r\n\r\nI've done some searching online and can't find anything (official or otherwise) that would indicate what I'm trying to do is not supported on Linux, so I'm a bit stumped. Any help would be greatly appreciated.\r\n\r\nCheers,\r\nBen","Url":"https://github.com/dotnet/corefx/issues/41700","RelatedDescription":"Closed issue \"Directory.GetFiles works on Win but not *nix\" (#41700)"},{"Id":"505090410","IsPullRequest":false,"CreatedAt":"2019-10-10T07:36:07","Actor":"0giso","Number":"41698","RawContent":null,"Title":"https://apisof.net/ is having certificate error again","State":"closed","Body":"The certificate seems to have expired on October 7, 2019.","Url":"https://github.com/dotnet/corefx/issues/41698","RelatedDescription":"Closed issue \"https://apisof.net/ is having certificate error again\" (#41698)"}],"ResultType":"GitHubIssue"},"Roslyn-Issues":{"Issues":[{"Id":"505640459","IsPullRequest":false,"CreatedAt":"2019-10-11T05:07:23","Actor":"yyjdelete","Number":"39234","RawContent":null,"Title":"MoveToNamespaceCodeActionProvider crashed with ArgumentOutOfRangeException in multi-targetFrameworks projects","State":"open","Body":"**Version Used**: \r\nVS2019 16.4.0Preview1\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Create an csproj and modify to multi targetFrameworks;\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFrameworks>netstandard2.0;net472</TargetFrameworks>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n\r\n```\r\n2. Create an cs file with 2 classes;\r\n```cs\r\nusing System;\r\n\r\nnamespace ClassLibrary1.A\r\n{\r\n    public class Class1\r\n    {\r\n    }\r\n\r\n    public class Class2\r\n    {\r\n    }\r\n}\r\n```\r\n3. call `Quick Actions/Move to Namespace` on the last class `Class2`, type any namespace and click `OK`;\r\n\r\n**Expected Behavior**:\r\nIt should work as it does with single-targetFramework projects\r\n\r\n**Actual Behavior**:\r\n```cs\r\nSystem.ArgumentOutOfRangeException : Specified argument was out of the range of valid values.\r\nParameter name: span\r\n   at Microsoft.CodeAnalysis.SyntaxNode.FindNode(TextSpan span,Boolean findInsideTrivia,Boolean getInnermostNodeForTie)\r\n   at async Microsoft.CodeAnalysis.CSharp.ChangeNamespace.CSharpChangeNamespaceService.TryGetApplicableContainerFromSpanAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.ChangeNamespace.AbstractChangeNamespaceService`3.TryGetApplicableContainersFromAllDocumentsAsync[TNamespaceDeclarationSyntax,TCompilationUnitSyntax,TMemberDeclarationSyntax](<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.CSharp.ChangeNamespace.CSharpChangeNamespaceService.GetValidContainersFromAllLinkedDocumentsAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.ChangeNamespace.AbstractChangeNamespaceService`3.ChangeNamespaceAsync[TNamespaceDeclarationSyntax,TCompilationUnitSyntax,TMemberDeclarationSyntax](<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.MoveToNamespace.AbstractMoveToNamespaceService`2.MoveItemsInNamespaceAsync[TNamespaceDeclarationSyntax,TNamedTypeDeclarationSyntax](<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.MoveToNamespace.AbstractMoveToNamespaceService`2.MoveTypeToNamespaceAsync[TNamespaceDeclarationSyntax,TNamedTypeDeclarationSyntax](<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.MoveToNamespace.AbstractMoveToNamespaceCodeAction.ComputeOperationsAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.CodeActions.CodeActionWithOptions.GetOperationsAsync(<Unknown Parameters>)\r\n   at Roslyn.Utilities.TaskExtensions.WaitAndGetResult_CanCallOnBackground[T](Task`1 task,CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.InvokeWorker(Func`1 getFromDocument,IProgressTracker progressTracker,CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.<>c__DisplayClass20_0.<InvokeCore>b__0()\r\n   at Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformAction(IExtensionManager extensionManager,Object extension,Action action)\r\n```","Url":"https://github.com/dotnet/roslyn/issues/39234","RelatedDescription":"Open issue \"MoveToNamespaceCodeActionProvider crashed with ArgumentOutOfRangeException in multi-targetFrameworks projects\" (#39234)"},{"Id":"505568570","IsPullRequest":true,"CreatedAt":"2019-10-11T05:01:36","Actor":"dotnet-bot","Number":"39231","RawContent":null,"Title":"Merge master to features/local-function-attributes","State":"closed","Body":"\nThis is an automatically generated pull request from master into features/local-function-attributes.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/local-function-attributes\ngit reset --hard upstream/features/local-function-attributes\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/local-function-attributes --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/39231","RelatedDescription":"Closed or merged PR \"Merge master to features/local-function-attributes\" (#39231)"},{"Id":"505568532","IsPullRequest":true,"CreatedAt":"2019-10-11T05:01:30","Actor":"dotnet-bot","Number":"39230","RawContent":null,"Title":"Merge master to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/39230","RelatedDescription":"Closed or merged PR \"Merge master to master-vs-deps\" (#39230)"},{"Id":"505568048","IsPullRequest":true,"CreatedAt":"2019-10-11T05:01:24","Actor":"dotnet-bot","Number":"39229","RawContent":null,"Title":"Merge master to release/dev16.5-preview1","State":"closed","Body":"\nThis is an automatically generated pull request from master into release/dev16.5-preview1.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-release/dev16.5-preview1\ngit reset --hard upstream/release/dev16.5-preview1\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-release/dev16.5-preview1 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/39229","RelatedDescription":"Closed or merged PR \"Merge master to release/dev16.5-preview1\" (#39229)"},{"Id":"505590356","IsPullRequest":true,"CreatedAt":"2019-10-11T01:36:08","Actor":"RikkiGibson","Number":"39233","RawContent":null,"Title":"Fix 'ref' parsing crash","State":"open","Body":"Closes #39072","Url":"https://github.com/dotnet/roslyn/pull/39233","RelatedDescription":"Open PR \"Fix 'ref' parsing crash\" (#39233)"},{"Id":"505568610","IsPullRequest":true,"CreatedAt":"2019-10-11T00:02:46","Actor":"dotnet-bot","Number":"39232","RawContent":null,"Title":"Merge master to features/static-lambdas","State":"open","Body":"\nThis is an automatically generated pull request from master into features/static-lambdas.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/static-lambdas\ngit reset --hard upstream/features/static-lambdas\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/static-lambdas --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/39232","RelatedDescription":"Open PR \"Merge master to features/static-lambdas\" (#39232)"},{"Id":"505555744","IsPullRequest":true,"CreatedAt":"2019-10-10T23:12:59","Actor":"allisonchou","Number":"39228","RawContent":null,"Title":"Fix IDE0009 false positive on local functions","State":"open","Body":"Fixes #38043 and adds relevant test.","Url":"https://github.com/dotnet/roslyn/pull/39228","RelatedDescription":"Open PR \"Fix IDE0009 false positive on local functions\" (#39228)"},{"Id":"505542543","IsPullRequest":true,"CreatedAt":"2019-10-10T22:28:21","Actor":"333fred","Number":"39227","RawContent":null,"Title":"Adjust syntax equivalence to account for nullable directives","State":"open","Body":"Fixes https://github.com/dotnet/roslyn/issues/38694. @dotnet/roslyn-compiler @CyrusNajmabadi for review.","Url":"https://github.com/dotnet/roslyn/pull/39227","RelatedDescription":"Open PR \"Adjust syntax equivalence to account for nullable directives\" (#39227)"},{"Id":"505538815","IsPullRequest":true,"CreatedAt":"2019-10-10T22:16:34","Actor":"RikkiGibson","Number":"39226","RawContent":null,"Title":"Local function attributes emit","State":"open","Body":"Related to #38801\r\n\r\ncurrently includes changes from #39135, opening to see how CI runs go","Url":"https://github.com/dotnet/roslyn/pull/39226","RelatedDescription":"Open PR \"Local function attributes emit\" (#39226)"},{"Id":"505536532","IsPullRequest":true,"CreatedAt":"2019-10-10T22:09:38","Actor":"ryzngard","Number":"39225","RawContent":null,"Title":"Remove CPS restriction for applying rename during code fix","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/39225","RelatedDescription":"Open PR \"Remove CPS restriction for applying rename during code fix\" (#39225)"},{"Id":"505522409","IsPullRequest":true,"CreatedAt":"2019-10-10T21:32:00","Actor":"AdamYoblick","Number":"39224","RawContent":null,"Title":"Show code instead of designer, but only after trying to create the designer loader","State":"open","Body":"Related to https://github.com/dotnet/winforms-designer/issues/942\r\n\r\nThis is needed because the winforms designer would like to show a gold bar in VS if the user tries to load the new .NET Core designer without the VSIX installed. The existing logic goes to the \"code\" view immediately if the VSIX is not installed. \r\n\r\nI've removed the detection of the VSIX from this code, and will move that into `DesignerActivationService.CreateDesignerLoader()` in the Visual Studio source, which will allow us to show the error message before going to code view.","Url":"https://github.com/dotnet/roslyn/pull/39224","RelatedDescription":"Open PR \"Show code instead of designer, but only after trying to create the designer loader\" (#39224)"},{"Id":"505515296","IsPullRequest":true,"CreatedAt":"2019-10-10T21:15:23","Actor":"tmat","Number":"39223","RawContent":null,"Title":"EnC: Recover from unexpected exceptions in Emit, ReadChecksum","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/39223","RelatedDescription":"Open PR \"EnC: Recover from unexpected exceptions in Emit, ReadChecksum\" (#39223)"},{"Id":"505498332","IsPullRequest":false,"CreatedAt":"2019-10-10T20:38:59","Actor":"tmat","Number":"39222","RawContent":null,"Title":"Revisit TaskFactoryExtensions.SafeStartNew* methods","State":"open","Body":"The current implementation wraps the given action into try-catch with fail fast crash.\r\nThis is not the best approach in most cases (we should recover from the exception and report NFW if possible) and where it is it should be explicit.","Url":"https://github.com/dotnet/roslyn/issues/39222","RelatedDescription":"Open issue \"Revisit TaskFactoryExtensions.SafeStartNew* methods\" (#39222)"},{"Id":"505466908","IsPullRequest":false,"CreatedAt":"2019-10-10T19:30:54","Actor":"vsfeedback","Number":"39221","RawContent":null,"Title":"Rename Crash","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/765196/重命名崩溃.html)._\n\n---\nCrash as soon as you rename\n\n---\n### Original Comments\n\n#### Fiona Niu[MSFT] on 10/9/2019, 01:36 AM: \n\n<p>Thank you for taking the time to log this issue!<br>\nI’ve tried to reproduce and investigate using the description, and attachments already provided. Unfortunately those aren’t enough and more information is needed in order to investigate it further.<br>\nThe easiest way to provide all the information is to use the Visual Studio Feedback Tool. This will ensure that we collect the needed information for you without worrying about what to provide (recording, dump file or ETL trace).<br>\nSince this issue is now marked as Need More Info, that workflow is enabled in the Feedback Tool:</p>\n<pre><code>• Open Visual Studio Feedback tool.\n• Click the banner letting you know that you have problems requesting your attention.\n• Click this problem from the list\n• Click &quot;View their request and respond&quot; from the problem details banner\n• Add a comment, in the Attachments/Record: click Start Recording\n• When the Steps Recorder tool appears, perform the steps that reproduce the problem.\n• When you're done, choose the Stop Record button.\n• Wait a few minutes for Visual Studio to collect and package the information that you recorded.\n• Submit. You will be able to see the comment on Developer Community. For security reasons, your files come directly to us and don't appear on Developer Community.\n</code></pre>\n<p>For the full instructions, please see: <a target='_blank' href=\"https://docs.microsoft.com/en-us/visualstudio/ide/how-to-report-a-problem-with-visual-studio-2017?view=vs-2017#when-further-information-is-needed-need-more-info\">https://docs.microsoft.com/en-us/visualstudio/ide/how-to-report-a-problem-with-visual-studio-2017?view=vs-2017#when-further-information-is-needed-need-more-info</a> . For information about what data is collected, see <a target='_blank' href=\"https://docs.microsoft.com/en-us/visualstudio/ide/developer-community-privacy?view=vs-2017#data-we-collect\">https://docs.microsoft.com/en-us/visualstudio/ide/developer-community-privacy?view=vs-2017#data-we-collect</a></p>\n<p>We look forward to hearing from you!</p>\n\n#### Fiona Niu[MSFT] on 10/10/2019, 00:25 AM: \n\n<p>Thanks a lot for providing the information. We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps. We’ll close the new ticket with the requested information.</p>\n\n\n---\n### Original Solutions\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/39221","RelatedDescription":"Open issue \"Rename Crash\" (#39221)"},{"Id":"505461392","IsPullRequest":false,"CreatedAt":"2019-10-10T19:19:18","Actor":"TessenR","Number":"39220","RawContent":null,"Title":"Roslyn doesn't handle inferred nullability in pattern matching","State":"open","Body":"**Version Used**: \r\n```\r\nBranch master (23 Sep 2019)\r\nLatest commit 89b4f60 by Charles Stoner:\r\nAllow conversion of collection initializer Add extension method this arg (#38732)\r\n```\r\n\r\n**Steps to Reproduce**:\r\n\r\nCompile and run the following code:\r\n```cs\r\n#nullable enable\r\nclass C<T>\r\n{\r\n  public C(T t) => Property = t;\r\n  public T Property { get; }\r\n}\r\n\r\nclass Program\r\n{\r\n  static void Main()\r\n  {\r\n    Test(\"\");\r\n  }\r\n  \r\n  static void Test(string? s)\r\n  {\r\n    if (s == null) return;\r\n    \r\n    hell:\r\n    var c = GetC(s);\r\n    switch (c)\r\n    {\r\n      case { Property: var prop }:\r\n        prop.ToString();\r\n        break;\r\n    }\r\n    \r\n    s = null;\r\n    goto hell;\r\n  }\r\n  \r\n  public static C<T> GetC<T>(T t) => new C<T>(t);\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\n`warning CS8602: Dereference of a possibly null reference.` reported for `prop.ToString()`\r\n\r\n**Actual Behavior**:\r\nNo warnings are reported for the program above. The program crashes at runtime with a `NullReferenceException`\r\n\r\n**Notes**\r\nIf you specify the type of `c` explicitly i.e. `C<string?> c = GetC(s);` you'll get the correct warning.","Url":"https://github.com/dotnet/roslyn/issues/39220","RelatedDescription":"Open issue \"Roslyn doesn't handle inferred nullability in pattern matching\" (#39220)"},{"Id":"505425884","IsPullRequest":false,"CreatedAt":"2019-10-10T18:05:00","Actor":"LtLi0n","Number":"39219","RawContent":null,"Title":"Default Interface Methods fail with generic constraints. Throws VerificationException.","State":"open","Body":"**Version Used**: net core 3.0.100\r\n\r\n**Steps to Reproduce**:\r\n\r\n```csharp\r\nclass Program\r\n{\r\n    interface IApiControllerCRUD<IEntity>\r\n    {\r\n        async Task<IEnumerable<T>> GetAsync<T>() where T : IEntity\r\n        {\r\n            return new List<T>();\r\n        }\r\n    }\r\n\r\n    class MyApiController : IApiControllerCRUD<IMyEntity> { }\r\n        \r\n    interface IMyEntity { }\r\n    class MyEntity : IMyEntity { }\r\n    class MyEntityViewModel : IMyEntity { }\r\n\r\n    static async Task Main(string[] args)\r\n    {\r\n        IApiControllerCRUD<IMyEntity> api = new MyApiController();\r\n        IEnumerable<MyEntityViewModel> sadFace = await api.GetAsync<MyEntityViewModel>();\r\n    }\r\n}\r\n```\r\n\r\nThe exception I get: \r\n##\r\n`System.Security.VerificationException`:\r\n**Method DefaultInterfaceMethodsExceptionRepro.Program+IApiControllerCRUD`1[DefaultInterfaceMethodsExceptionRepro.Program+IMyEntity].GetAsync: type argument 'T' violates the constraint of type parameter 'T'.**","Url":"https://github.com/dotnet/roslyn/issues/39219","RelatedDescription":"Open issue \"Default Interface Methods fail with generic constraints. Throws VerificationException.\" (#39219)"},{"Id":"505423870","IsPullRequest":false,"CreatedAt":"2019-10-10T18:00:42","Actor":"vsfeedback","Number":"39218","RawContent":null,"Title":"C#, Simplify init refactoring also for arrays","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/768513/c-simplify-init-refactoring-also-for-arrays.html)._\n\n---\n```\nclass RFE_SimplifyInit\n{\n  struct S { public int a, b; }\n  void working()\n  {\n    S s = new S();\n    s.a = 1;\n    s.b = 2;\n  }\n  void rfe()\n  {\n    int[] rg = new int[2];\n    rg[0] = 1;\n    rg[1] = 2;\n  }\n}\n```\nWorking example:\n- Place cursor on line `S s =`.\n- Invoke QuickActions.\n\nResult: You get the option `Object initialization can be simplified`, and when executed you get the expected\n```\nS s = new S\n{\n  a = 1,\n  b = 2\n};\n```\n\nRFE:\n- Place cursor on line `int[] rg =`.\n- Invoke QuickActions.\n\nResult: No option to simplify.\n\nExpected: Option to simplify, with result\n```\nint[] rg = new int[2]\n{\n  1,\n  2\n};\n```\n\nConsiderations, expected limitations:\nFor implementation simplicity, and to retain sematical correctness and sequence points in case init expressions are more complex, only consider the refactoring when array-elements assignments index-order is both sequential and starting from zero.\n\n---\n### Original Comments\n\n#### Jane Wu [MSFT] on 10/10/2019, 00:14 AM: \n\n<p>Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We’ll provide an update once the issue has been triaged by the product team.</p>\n","Url":"https://github.com/dotnet/roslyn/issues/39218","RelatedDescription":"Open issue \"C#, Simplify init refactoring also for arrays\" (#39218)"},{"Id":"505224752","IsPullRequest":true,"CreatedAt":"2019-10-10T17:59:05","Actor":"dotnet-bot","Number":"39214","RawContent":null,"Title":"Merge master to features/static-lambdas","State":"closed","Body":"\nThis is an automatically generated pull request from master into features/static-lambdas.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/static-lambdas\ngit reset --hard upstream/features/static-lambdas\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/static-lambdas --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/39214","RelatedDescription":"Closed or merged PR \"Merge master to features/static-lambdas\" (#39214)"},{"Id":"505224687","IsPullRequest":true,"CreatedAt":"2019-10-10T17:58:58","Actor":"dotnet-bot","Number":"39213","RawContent":null,"Title":"Merge master to features/local-function-attributes","State":"closed","Body":"\nThis is an automatically generated pull request from master into features/local-function-attributes.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/local-function-attributes\ngit reset --hard upstream/features/local-function-attributes\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/local-function-attributes --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/39213","RelatedDescription":"Closed or merged PR \"Merge master to features/local-function-attributes\" (#39213)"},{"Id":"505224637","IsPullRequest":true,"CreatedAt":"2019-10-10T17:58:52","Actor":"dotnet-bot","Number":"39212","RawContent":null,"Title":"Merge master to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/39212","RelatedDescription":"Closed or merged PR \"Merge master to master-vs-deps\" (#39212)"},{"Id":"505223838","IsPullRequest":true,"CreatedAt":"2019-10-10T17:58:45","Actor":"dotnet-bot","Number":"39211","RawContent":null,"Title":"Merge master to release/dev16.5-preview1","State":"closed","Body":"\nThis is an automatically generated pull request from master into release/dev16.5-preview1.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-release/dev16.5-preview1\ngit reset --hard upstream/release/dev16.5-preview1\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-release/dev16.5-preview1 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/39211","RelatedDescription":"Closed or merged PR \"Merge master to release/dev16.5-preview1\" (#39211)"},{"Id":"505419549","IsPullRequest":false,"CreatedAt":"2019-10-10T17:51:24","Actor":"vsfeedback","Number":"39217","RawContent":null,"Title":"Xml commit Support xml:lang","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/357090/xml-commit-support-xmllang.html)._\n\n---\n<p>I write some lib to release to nuget, But XML commit doc is one language only, I Need Localization it so Friendly to Non-native users.</p><p>Some like:</p><pre>       /// &lt;summary&gt;\n        /// Check a variable is defined\n        /// &lt;/summary&gt;\n        /// &lt;summary xml:lang=&quot;zh-CN&quot;&gt;\n        /// 获取指定命名的变量是否存在\n        /// &lt;/summary&gt;\n        /// &lt;param name=&quot;name&quot;&gt;Variable name&lt;/param&gt;\n        /// &lt;param name=&quot;name&quot; xml:lang=&quot;zh-CN&quot;&gt;变量名&lt;/param&gt;\n        /// &lt;returns&gt;Return True if variable has already been defined &lt;/returns&gt;\n        /// &lt;returns xml:lang=&quot;zh-CN&quot;&gt;如果变量已经定义返回 True, 否则返回 false&lt;/returns&gt;\n        public bool IsDefined(string name)\n        {\n            return mVariables.ContainsKey(name);\n        }\n</pre>\n\n---\n### Original Comments\n\n#### jock li on 10/14/2018, 01:07 AM: \n\n<p>I readed about https://docs.microsoft.com/en-us/nuget/create-packages/creating-localized-packages</p><p>But Maybe IDE auto split is better Experience.</p>\n\n#### Fiona Niu[MSFT] on 10/15/2018, 00:31 AM: \n\n<p>Thank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.&nbsp;You will hear from us in about five business days on our next steps. </p>\n#### Dinakar Nethi [MSFT] on 11/13/2018, 05:51 PM: \n\n<p>Your suggestion has been queued up for prioritization.  Feature suggestions are prioritized based on the value to our broader developer community and the product roadmap. We may not be able to pursue this one immediately, but we will continue to monitor it up to 90 days for community input</p>\n","Url":"https://github.com/dotnet/roslyn/issues/39217","RelatedDescription":"Open issue \"Xml commit Support xml:lang\" (#39217)"},{"Id":"505416110","IsPullRequest":true,"CreatedAt":"2019-10-10T17:44:04","Actor":"dibarbet","Number":"39216","RawContent":null,"Title":"Disable optimization for flow analysis utilities.","State":"open","Body":"Disable optimization for flow analysis package","Url":"https://github.com/dotnet/roslyn/pull/39216","RelatedDescription":"Open PR \"Disable optimization for flow analysis utilities.\" (#39216)"},{"Id":"505287378","IsPullRequest":true,"CreatedAt":"2019-10-10T13:53:12","Actor":"huoyaoyuan","Number":"39215","RawContent":null,"Title":"Fix AddImports codefix on implicit extension methods","State":"open","Body":"See #39155. If that's by-design and cannot be changed any more, please close that issue.\r\nFixes #25861, but missing unit test.","Url":"https://github.com/dotnet/roslyn/pull/39215","RelatedDescription":"Open PR \"Fix AddImports codefix on implicit extension methods\" (#39215)"},{"Id":"505122643","IsPullRequest":false,"CreatedAt":"2019-10-10T08:40:07","Actor":"Ramonet72","Number":"39210","RawContent":null,"Title":"error CS0029: Cannot implicitly convert type 'STCADPro.Model.SCFrequency [STCADPro.Model, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]' to 'STCADPro.Model.SCFrequency'","State":"open","Body":"Hi,\r\n\r\nWhen running script using **CodeAnalysis**  I receive an exception saying I cannot convert to a type, but **the types are exactly the same!**   Please help! I'm stuck on this for a few days.\r\n\r\nThe code is something like:\r\n```\r\nvar mscorlib = typeof(System.Object).Assembly;\r\nvar systemCore = typeof(System.Linq.Enumerable).Assembly;\r\nvar stcad = typeof(SCProjects).Assembly;\r\nscriptOptions = ScriptOptions.Default.AddReferences(mscorlib, systemCore, stcad);\r\nscriptOptions = scriptOptions.AddImports(\"System\", \"System.IO\", \"System.Threading.Tasks\", \"System.Linq\",\"STCADPro.Model\", \"STCADPro.Physics\");\r\n\r\nvar state_ = CSharpScript.RunAsync(@\"\", scriptOptions).Result;\r\nstate_ = state_.ContinueWithAsync(\"SCFrequency P3 = new SCFrequency();\", scriptOptions).Result;\r\nstate_ = state_.ContinueWithAsync(\"SCFrequency P4 = P3; \", scriptOptions).Result;\r\n````\r\n\r\nThat's basically initializing the script engine running first code (RunAsync) and then using the previous result as new state using ContinueWithAsync.  I think this is classic schema. I would put this into a loop as this has to be an interpreter (command line), a  REPL.\r\n\r\nI added the assembly STCAD Pro using typeof(SCProjects).Assembly,  SCProjects is a class of that assembly. \r\n\r\nThe problem comes in the last line with: SCFrequency P4 = P3  , the system does not understand P4 is the same type as P3.   \r\nInterestingly if I parse all the code at once, it works. So I have the impression that between calls some reference to the assembly are lost and perhaps duplicated, and even it's the same assembly (and DLL file), it complains.\r\n\r\n**Version Used**: \r\nCodeAnalysis:\r\n2.4, but I tried also\r\n3.4.0-beta1-final (latest available)\r\n\r\nVisual Studio 2019 Community. 16.3.3.\r\n\r\n**Steps to Reproduce**:\r\n\r\n1.   Run the code above. It requires the STCAD Model library, I'm sorry I can't deliver this library. But I think is not related to the library but any other external library may have the same problem.\r\n2.  Last line of script (SCFrequency P3 = P4;)  shall be executed without problem.  \r\n3.  However there is an exception thrown, see below.\r\n\r\nIn this example the class used is SCFrequency, but I tried with other classes in the assembly STCAD Pro Model  and the problem also exists.\r\n\r\nSTCAD Pro Model is a Project which is in the same solution! It is added as a project reference and its DLL copied to the output folder. Except for this issue, everything works well in this app.\r\nActually this code is executed from a class **in the same assembly!**\r\n\r\n**Exception received**\r\n\r\n{\"(1,18): error CS0029: Cannot implicitly convert type 'STCADPro.Model.SCFrequency [STCADPro.Model, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]' to 'STCADPro.Model.SCFrequency [C:\\\\Projects\\\\STCAD Pro 2018\\\\trunk\\\\STCAD Pro GUI\\\\bin\\\\Debug\\\\STCADPro.Model.dll]'\"}\r\n\r\nTHANKS!\r\nRay","Url":"https://github.com/dotnet/roslyn/issues/39210","RelatedDescription":"Open issue \"error CS0029: Cannot implicitly convert type 'STCADPro.Model.SCFrequency [STCADPro.Model, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]' to 'STCADPro.Model.SCFrequency'\" (#39210)"},{"Id":"505094702","IsPullRequest":true,"CreatedAt":"2019-10-10T07:41:53","Actor":"sharwell","Number":"39209","RawContent":null,"Title":"Annotate NamespaceOrTypeSymbol","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/39209","RelatedDescription":"Open PR \"Annotate NamespaceOrTypeSymbol\" (#39209)"},{"Id":"505093689","IsPullRequest":true,"CreatedAt":"2019-10-10T07:39:36","Actor":"sharwell","Number":"39208","RawContent":null,"Title":"Annotate TypeSymbol","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/39208","RelatedDescription":"Open PR \"Annotate TypeSymbol\" (#39208)"},{"Id":"505090591","IsPullRequest":true,"CreatedAt":"2019-10-10T07:32:34","Actor":"sharwell","Number":"39207","RawContent":null,"Title":"Annotate implementations of ITypeParameterSymbol","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/39207","RelatedDescription":"Open PR \"Annotate implementations of ITypeParameterSymbol\" (#39207)"},{"Id":"505087966","IsPullRequest":true,"CreatedAt":"2019-10-10T07:26:53","Actor":"sharwell","Number":"39206","RawContent":null,"Title":"Annotate implementations of IAnonymousTypeTemplateSymbolInternal","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/39206","RelatedDescription":"Open PR \"Annotate implementations of IAnonymousTypeTemplateSymbolInternal\" (#39206)"},{"Id":"505086805","IsPullRequest":true,"CreatedAt":"2019-10-10T07:24:13","Actor":"sharwell","Number":"39205","RawContent":null,"Title":"Annotate implementations of IPropertySymbol","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/39205","RelatedDescription":"Open PR \"Annotate implementations of IPropertySymbol\" (#39205)"}],"ResultType":"GitHubIssue"},"CoreRT-Issues":{"Issues":[{"Id":"505621245","IsPullRequest":true,"CreatedAt":"2019-10-11T03:49:41","Actor":"Dotnet-GitSync-Bot","Number":"7822","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"open","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @tannergooding","Url":"https://github.com/dotnet/corert/pull/7822","RelatedDescription":"Open PR \"Mirror changes from dotnet/coreclr\" (#7822)"},{"Id":"504527034","IsPullRequest":true,"CreatedAt":"2019-10-09T12:42:07","Actor":"MichalStrehovsky","Number":"7821","RawContent":null,"Title":"Delete unused method","State":"closed","Body":"Supplements #7819.","Url":"https://github.com/dotnet/corert/pull/7821","RelatedDescription":"Closed or merged PR \"Delete unused method\" (#7821)"},{"Id":"504357120","IsPullRequest":true,"CreatedAt":"2019-10-09T09:28:10","Actor":"Dotnet-GitSync-Bot","Number":"7820","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @EgorBo","Url":"https://github.com/dotnet/corert/pull/7820","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7820)"},{"Id":"504158790","IsPullRequest":true,"CreatedAt":"2019-10-09T09:27:34","Actor":"am11","Number":"7818","RawContent":null,"Title":"Fix exit code of build-native.sh","State":"closed","Body":"I noticed it in the docker container, that the failed build was successfully committing the container (false positive).","Url":"https://github.com/dotnet/corert/pull/7818","RelatedDescription":"Closed or merged PR \"Fix exit code of build-native.sh\" (#7818)"},{"Id":"504330608","IsPullRequest":true,"CreatedAt":"2019-10-09T01:16:45","Actor":"Dotnet-GitSync-Bot","Number":"7819","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @CoffeeFlux","Url":"https://github.com/dotnet/corert/pull/7819","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7819)"},{"Id":"503784732","IsPullRequest":false,"CreatedAt":"2019-10-08T02:17:07","Actor":"ZacharyJia","Number":"7817","RawContent":null,"Title":"Call generated dll from cpp crash","State":"open","Body":"I use a dll generated by corert in a cpp program, but it crashed when any statement runs.\r\nI'm using the `.net core 3.0` and the ilcompiler version is `1.0.0-alpha-28207-01`\r\n\r\nThe call stack is:\r\n```\r\ngenet.net.exe!S_P_CoreLib_System_Threading_LockHolder__Hold()\r\ngenet.net.exe!S_P_CoreLib_System_Runtime_CompilerServices_ClassConstructorRunner_Cctor__GetCctor()\r\ngenet.net.exe!S_P_CoreLib_System_Runtime_CompilerServices_ClassConstructorRunner__EnsureClassConstructorRun()\r\ngenet.net.exe!S_P_CoreLib_System_Runtime_CompilerServices_ClassConstructorRunner__CheckStaticClassConstructionReturnGCStaticBase()\r\ngenet.net.exe!S_P_CoreLib_System_Text_Encoding__get_UTF8()\r\ngenet.net.exe!S_P_CoreLib_Internal_Runtime_CompilerHelpers_InteropHelpers__GetModuleName()genet.net.exe!S_P_CoreLib_Internal_Runtime_CompilerHelpers_InteropHelpers__FixupModuleCell()\r\ngenet.net.exe!S_P_CoreLib_Internal_Runtime_CompilerHelpers_InteropHelpers__ResolvePInvokeSlow()\r\ngenet.net.exe!S_P_CoreLib_Internal_Runtime_CompilerHelpers_InteropHelpers__ResolvePInvoke()\r\ngenet.net.exe!genet_net_genet_net_Program__LoadLibrary()\r\ngenet.net.exe!genet_net_genet_net_Program__show()\r\ndlldemo-cpp.exe!main()  line 17\tC++\r\n```\r\n\r\nThe crash message is:\r\n```\r\n0x00007FF9C9416408 (genet.net.exe)处(位于 dlldemo-cpp.exe 中)引发的异常: 0xC0000005: 读取位置 0x0000000000000000 时发生访问冲突。\r\n```","Url":"https://github.com/dotnet/corert/issues/7817","RelatedDescription":"Open issue \"Call generated dll from cpp crash\" (#7817)"},{"Id":"503304688","IsPullRequest":false,"CreatedAt":"2019-10-07T08:30:51","Actor":"yunekit","Number":"7816","RawContent":null,"Title":"sched_yield infinite loop","State":"open","Body":"The sched_yield()==0 infinite loop occurred during the running of the application, causing the process to block and fail to work.","Url":"https://github.com/dotnet/corert/issues/7816","RelatedDescription":"Open issue \"sched_yield infinite loop\" (#7816)"},{"Id":"503145779","IsPullRequest":true,"CreatedAt":"2019-10-06T21:09:25","Actor":"Dotnet-GitSync-Bot","Number":"7815","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas","Url":"https://github.com/dotnet/corert/pull/7815","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7815)"},{"Id":"503134823","IsPullRequest":true,"CreatedAt":"2019-10-06T19:30:50","Actor":"MichalStrehovsky","Number":"7814","RawContent":null,"Title":"Add support for multithreaded compilation to ILC","State":"closed","Body":"Improves native compilation throughput by about 33%.\r\n\r\nValidated that the output with multithreading enabled (the new default) is byte-by-byte identical with the output produced by `--singlethreaded` (new command line option to ILC that disables multithreading).\r\n\r\nWe still can do a lot more in terms of compilation throughput (virtual method resolution is really slow and runs in one of the single threaded phases, and the object writing phase is pretty slow too and is fully single threaded too).\r\n\r\nContributes to #3925 (what's left is the extra-credit stuff).","Url":"https://github.com/dotnet/corert/pull/7814","RelatedDescription":"Closed or merged PR \"Add support for multithreaded compilation to ILC\" (#7814)"},{"Id":"502963591","IsPullRequest":true,"CreatedAt":"2019-10-06T04:53:29","Actor":"MichalStrehovsky","Number":"7811","RawContent":null,"Title":"Port fixes from CoreCLR","State":"closed","Body":"Skipping dotnet/coreclr#26792 and dotnet/coreclr#26793.","Url":"https://github.com/dotnet/corert/pull/7811","RelatedDescription":"Closed or merged PR \"Port fixes from CoreCLR\" (#7811)"},{"Id":"502974204","IsPullRequest":true,"CreatedAt":"2019-10-05T16:06:41","Actor":"MichalStrehovsky","Number":"7812","RawContent":null,"Title":"Remove global state tracking in DynamicInvokeTemplateDataNode","State":"closed","Body":"DynamicInvokeTemplateDataNode populated _methodToTemplateIndex in `GetIdForMethod` which is pretty bad from multithreading perspective (non-concurrent dictionary + ID that depends on ordering).\r\n\r\nI've moved this tracking into a separate node so that this is more explicit and properly sortable.","Url":"https://github.com/dotnet/corert/pull/7812","RelatedDescription":"Closed or merged PR \"Remove global state tracking in DynamicInvokeTemplateDataNode\" (#7812)"},{"Id":"502974267","IsPullRequest":true,"CreatedAt":"2019-10-05T16:04:50","Actor":"MichalStrehovsky","Number":"7813","RawContent":null,"Title":"Cache helpers used in IL scanner","State":"closed","Body":"We have a cache for these in CorInfoImpl (when compiling), but there's no cache in the scanner. This means we're re-resolving various named helpers in CoreLib. It's a bit of a waste of CPU time. Noticed this when running the compiler under a profiler.","Url":"https://github.com/dotnet/corert/pull/7813","RelatedDescription":"Closed or merged PR \"Cache helpers used in IL scanner\" (#7813)"},{"Id":"502935521","IsPullRequest":true,"CreatedAt":"2019-10-05T12:47:51","Actor":"MichalStrehovsky","Number":"7810","RawContent":null,"Title":"Update ObjWriter","State":"closed","Body":"Picks up #7802.","Url":"https://github.com/dotnet/corert/pull/7810","RelatedDescription":"Closed or merged PR \"Update ObjWriter\" (#7810)"},{"Id":"502780858","IsPullRequest":true,"CreatedAt":"2019-10-05T06:01:27","Actor":"Dotnet-GitSync-Bot","Number":"7809","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @idlerboris @stephentoub","Url":"https://github.com/dotnet/corert/pull/7809","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7809)"},{"Id":"502527358","IsPullRequest":false,"CreatedAt":"2019-10-04T12:27:49","Actor":"kstreichergb","Number":"7808","RawContent":null,"Title":"dotnet.exe hangs during shutdown","State":"closed","Body":"A hosted application using `BackgroundService` is hanging infinetly on shutdown, in particular when the console application is killed with ctrl+z.\r\n\r\nThe \"finish\" log in the finally in Main will be seen, but the dotnet.exe process keeps running\r\n\r\n```\r\npublic class BaseBackgroundService: BackgroundService{\r\n  private readonly IHostLifetime _hostLifetime;\r\n  private readonly IHostApplicationLifetime _iHostApplicationLifetime;\r\n  \r\n  public BaseBackgroundService(IHostLifetime hostLifetime,\r\n\t\t                             IHostApplicationLifetime iHostApplicationLifetime){\r\n    _hostLifetime = hostLifetime;\r\n    _iHostApplicationLifetime = iHostApplicationLifetime;\r\n }\r\n\r\n  protected override async Task ExecuteAsync(CancellationToken ct)\r\n  {\r\n  try{\r\n        await DoSomething();\r\n  }catch(OperationCanceledException ex)\r\n{\r\n /** ... Reached on CTRL+Z .... **/\r\n}\r\nfinally{\r\n       _iHostApplicationLifetime.StopApplication();\r\n        await _hostLifetime.StopAsync(ct); // clean exit\r\n  \tConsole.WriteLine(\"Completes as expected\");    \r\n  }\r\n/*...*/\r\n}\r\n\r\n```\r\n\tProgram.cs \r\n\tpublic static async Task Main(string[] args){\r\n\ttry\r\n\t{\r\n\t\tIHostBuilder hostBuilder = CreateHostBuilder(args);\r\n\r\n\t\tusing (IHost host = hostBuilder.UseConsoleLifetime().Build())\r\n\t\t{\r\n\t\t\tawait host.RunAsync();\r\n\t\t}\r\n\t}\r\n\t}finally{\r\n\t\tConsole.WriteLine(\"Finished - will be seen. Therefore main exits, but dotnet.exe keeps running\");\r\n\t}\r\n\t}\r\n```\r\n\r\nThe hosted BackgroundService will finish (OperationCanceledException) but the host.RunAsync() will never finish.\r\n\r\nUsing visual and break all\r\n\r\n![image](https://user-images.githubusercontent.com/50991928/66196903-9ecb0200-e699-11e9-812f-d3773be75aa4.png)\r\n\r\nAnd repeating it shows the Task ID changes, but the structure remains the same\r\n\r\n![image](https://user-images.githubusercontent.com/50991928/66197013-cf12a080-e699-11e9-8529-6ee9df7266ee.png)","Url":"https://github.com/dotnet/corert/issues/7808","RelatedDescription":"Closed issue \"dotnet.exe hangs during shutdown\" (#7808)"},{"Id":"501662946","IsPullRequest":false,"CreatedAt":"2019-10-02T18:48:52","Actor":"RalfKornmannEnvision","Number":"7807","RawContent":null,"Title":"GC thread suspension","State":"open","Body":"Maybe I just got something wrong here and I am looking at the wrong place.\r\n\r\nMy somewhat bigger test code finally runs stable for hours on my ARM64 system without trashing the heap or consuming all the physical memory. But so far it was only a single thread console application. For my use case I would need some threads.\r\n\r\nAs expected the GC need to suspend all managed threads to do a collection. For Windows there is some hijack code but the function for unix only contains a todo. I assume the reason for this is that the necessary os functions are missing. My target system has the same issue as I cannot suspend and resume threads there. As .net core should have the same issue on other posix systems I checked there and noticed that the jit engine has an option to inject gc probes. I assume that this is the only way to get the GC working in a multi thread environment were hijacking is not possible. Or did I missed something?\r\n\r\nIn the case I am right a short check showed me that the ilcompiler doesn't support the flags and callbacks for this yet?\r\n\r\nDo I need to add this to get the GC working with multiple threads or have I looked at the wrong place?\r\n\r\nIf this the right place does it make any sense to aim for the inline version of the gc probe or can this never work with corert and the call variant is the only solution? I already checked the code and noticed that even if the inline variant can work the call needs still be implemented as it is used in more complicated cases.","Url":"https://github.com/dotnet/corert/issues/7807","RelatedDescription":"Open issue \"GC thread suspension\" (#7807)"},{"Id":"501011867","IsPullRequest":true,"CreatedAt":"2019-10-01T18:56:37","Actor":"Dotnet-GitSync-Bot","Number":"7806","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @tannergooding","Url":"https://github.com/dotnet/corert/pull/7806","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7806)"},{"Id":"500653866","IsPullRequest":true,"CreatedAt":"2019-10-01T15:25:51","Actor":"Dotnet-GitSync-Bot","Number":"7805","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @adamsitnik","Url":"https://github.com/dotnet/corert/pull/7805","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7805)"},{"Id":"500408911","IsPullRequest":true,"CreatedAt":"2019-10-01T04:22:31","Actor":"Dotnet-GitSync-Bot","Number":"7804","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @tannergooding @Youssef1313 @safern","Url":"https://github.com/dotnet/corert/pull/7804","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#7804)"},{"Id":"499907137","IsPullRequest":true,"CreatedAt":"2019-09-29T14:16:14","Actor":"MichalStrehovsky","Number":"7803","RawContent":null,"Title":"Delete ReadyToRun portions of the compiler and test tree","State":"closed","Body":"The development of the ReadyToRun compiler moved to the CoreCLR repo. Keeping the sources here is just making it harder to keep the repos in sync.\r\n\r\nDeleting the testing speeds up the CI considerably.","Url":"https://github.com/dotnet/corert/pull/7803","RelatedDescription":"Closed or merged PR \"Delete ReadyToRun portions of the compiler and test tree\" (#7803)"},{"Id":"499773007","IsPullRequest":true,"CreatedAt":"2019-09-29T11:58:37","Actor":"MichalStrehovsky","Number":"7802","RawContent":null,"Title":"Fix Windows debug information for classes","State":"closed","Body":"Fixes a longstanding issue where we were emitting erroneous vfptr debug entries and incorrectly mangling class names. One could only inspect things as they were statically typed in the source (so if a variable was typed as `object` in the sources, you wouldn't see any fields in the native debugger, no matter what was assigned to it).\r\n\r\nIt wasn't too terrible, so I sort of just lived with it, but this should work.\r\n\r\nWith this, casting to base classes in the debugger works.\r\n\r\n## Before\r\n\r\n![before](https://user-images.githubusercontent.com/13110571/65817093-98550a00-e203-11e9-88ce-efd8109ae303.gif)\r\n\r\n\r\n## After\r\n\r\n![after](https://user-images.githubusercontent.com/13110571/65817095-9d19be00-e203-11e9-9ec7-73ffe4587b62.gif)\r\n","Url":"https://github.com/dotnet/corert/pull/7802","RelatedDescription":"Closed or merged PR \"Fix Windows debug information for classes\" (#7802)"},{"Id":"499146410","IsPullRequest":true,"CreatedAt":"2019-09-27T23:17:06","Actor":"Dotnet-GitSync-Bot","Number":"7800","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @GrabYourPitchforks @benaadams","Url":"https://github.com/dotnet/corert/pull/7800","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#7800)"},{"Id":"499434828","IsPullRequest":true,"CreatedAt":"2019-09-27T15:09:03","Actor":"am11","Number":"7801","RawContent":null,"Title":"Remove duplicate enum SystemVClassificationType","State":"closed","Body":"Found the duplicate definition at: https://github.com/dotnet/corert/blob/a7ce92678876ba55a1c7a65c464363b51d777b4f/src/JitInterface/src/CorInfoTypes.cs#L1170","Url":"https://github.com/dotnet/corert/pull/7801","RelatedDescription":"Closed or merged PR \"Remove duplicate enum SystemVClassificationType\" (#7801)"},{"Id":"498529328","IsPullRequest":true,"CreatedAt":"2019-09-26T22:29:33","Actor":"Dotnet-GitSync-Bot","Number":"7798","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @GrabYourPitchforks @benaadams @stephentoub","Url":"https://github.com/dotnet/corert/pull/7798","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#7798)"},{"Id":"499086023","IsPullRequest":false,"CreatedAt":"2019-09-26T19:57:16","Actor":"jkotas","Number":"7799","RawContent":null,"Title":"CppCodeGen: Implement RVA-backed static fields","State":"open","Body":"E.g. `private static ReadOnlySpan<byte> CategoryForLatin1 => new byte[] { 1, 2, 3, ... };`. CppCodeGen allocates space for these, but does not initialize it.","Url":"https://github.com/dotnet/corert/issues/7799","RelatedDescription":"Open issue \"CppCodeGen: Implement RVA-backed static fields\" (#7799)"},{"Id":"497810701","IsPullRequest":true,"CreatedAt":"2019-09-25T21:17:24","Actor":"Dotnet-GitSync-Bot","Number":"7797","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas @stephentoub","Url":"https://github.com/dotnet/corert/pull/7797","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7797)"},{"Id":"496108391","IsPullRequest":false,"CreatedAt":"2019-09-24T00:16:58","Actor":"Unreal-System","Number":"7795","RawContent":null,"Title":".NET Core 3 ILCompiler.CodeGenerationFailedException: Code generation failed ---> ILCompiler.ScannerFailedException: VTable of type 'System.Net.HttpWebRequest' not computed by the IL scanner.","State":"closed","Body":"[Demo.zip](https://github.com/dotnet/corert/files/3633903/Demo.zip)\r\ndotnet --version\r\n3.0.100-rc1-014190\r\n\r\n用于 .NET Core 的 Microsoft (R) 生成引擎版本 16.3.0-preview-19455-02+4a2d77107\r\n版权所有(C) Microsoft Corporation。保留所有权利。\r\n\r\n  C:\\Users\\Admin\\Desktop\\Fix\\LoginNet\\LoginNet.csproj 的还原在 101.78 ms 内完成。\r\n  你正在使用 .NET Core 的预览版。请查看 https://aka.ms/dotnet-core-preview\r\n  LoginNet -> C:\\Users\\Admin\\Desktop\\Fix\\LoginNet\\bin\\Release\\netcoreapp3.0\\win-x64\\LoginNet.dll\r\n  Generating compatible native code. To optimize for size or speed, visit https://aka.ms/OptimizeCoreRT\r\nEXEC : error : Code generation failed [C:\\Users\\Admin\\Desktop\\Fix\\LoginNet\\LoginNet.csproj]\r\n  ILCompiler.CodeGenerationFailedException: Code generation failed ---> ILCompiler.ScannerFailedException: VTable of type 'System.Net.HttpWebRequest' not computed by the IL scanner. You can work around by running the compilation with scanner disabled.\r\n     at ILCompiler.ILScanResults.ScannedVTableProvider.GetSlice(TypeDesc type)\r\n     at System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(TKey key, Func`2 valueFactory)\r\n     at ILCompiler.Compilation.HasFixedSlotVTable(TypeDesc type)\r\n     at Internal.JitInterface.CorInfoImpl.getCallInfo(CORINFO_RESOLVED_TOKEN& pResolvedToken, CORINFO_RESOLVED_TOKEN* pConstrainedResolvedToken, CORINFO_METHOD_STRUCT_* callerHandle, CORINFO_CALLINFO_FLAGS flags, CORINFO_CALL_INFO* pResult)\r\n     at Internal.JitInterface.CorInfoImpl._getCallInfo(IntPtr thisHandle, IntPtr* ppException, CORINFO_RESOLVED_TOKEN& pResolvedToken, CORINFO_RESOLVED_TOKEN* pConstrainedResolvedToken, CORINFO_METHOD_STRUCT_* callerHandle, CORINFO_CALLINFO_FLAGS flags, CORINFO_CALL_INFO* pResult)\r\n     --- End of inner exception stack trace ---\r\n     at Internal.JitInterface.CorInfoImpl.CompileMethodInternal(IMethodNode methodCodeNodeNeedingCode, MethodIL methodIL)\r\n     at ILCompiler.RyuJitCompilation.ComputeDependencyNodeDependencies(List`1 obj)\r\n     at ILCompiler.DependencyAnalysisFramework.DependencyAnalyzer`2.ComputeMarkedNodes()\r\n     at ILCompiler.RyuJitCompilation.CompileInternal(String outputFile, ObjectDumper dumper)\r\n     at ILCompiler.Compilation.ILCompiler.ICompilation.Compile(String outputFile, ObjectDumper dumper)\r\n     at ILCompiler.Program.Run(String[] args)\r\n     at ILCompiler.Program.Main(String[] args)\r\nC:\\Users\\Admin\\.nuget\\packages\\microsoft.dotnet.ilcompiler\\1.0.0-alpha-27527-01\\build\\Microsoft.NETCore.Native.targets(239,5): error MSB3073: The command \"\"C:\\Users\\Admin\\.nuget\\packages\\runtime.win-x64.microsoft.dotnet.ilcompiler\\1.0.0-alpha-27527-01\\tools\\ilc\" @\"obj\\Release\\netcoreapp3.0\\win-x64\\native\\LoginNet.ilc.rsp\"”exited with code 1. [C:\\Users\\Admin\\Desktop\\Fix\\LoginNet\\LoginNet.csproj]\r\n\r\nCan be compiled on earlier .NET Core 3 previews and CoreRT daily builds.","Url":"https://github.com/dotnet/corert/issues/7795","RelatedDescription":"Closed issue \".NET Core 3 ILCompiler.CodeGenerationFailedException: Code generation failed ---> ILCompiler.ScannerFailedException: VTable of type 'System.Net.HttpWebRequest' not computed by the IL scanner.\" (#7795)"},{"Id":"496830692","IsPullRequest":false,"CreatedAt":"2019-09-22T20:46:12","Actor":"genifycom","Number":"7796","RawContent":null,"Title":"[TEMPORARY EXCEPTION MESSAGE] FileLoadErrorGeneric: Microsoft.Management.Infrastructure","State":"open","Body":"Now getting this strange error:\r\n\r\n  Generating compatible native code. To optimize for size or speed, visit https://aka.ms/OptimizeCoreRT\r\nEXEC : error : [TEMPORARY EXCEPTION MESSAGE] FileLoadErrorGeneric: Microsoft.Management.Infrastructure [C:\\xxx.csproj]\r\n  Internal.TypeSystem.TypeSystemException+FileNotFoundException: [TEMPORARY EXCEPTION MESSAGE] FileLoadErrorGeneric: Microsoft.Management.Infrastructure\r\n     at Internal.TypeSystem.ThrowHelper.ThrowFileNotFoundException(ExceptionStringID id, String fileName)\r\n     at ILCompiler.CompilerTypeSystemContext.GetModuleForSimpleName(String simpleName, Boolean throwIfNotFound)\r\n     at Internal.TypeSystem.Ecma.EcmaModule.ResolveAssemblyReference(AssemblyReferenceHandle handle)\r\n     at Internal.TypeSystem.Ecma.EcmaModule.EcmaObjectLookupHashtable.CreateValueFromKey(EntityHandle handle)\r\n     at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey key)\r\n     at Internal.TypeSystem.Ecma.EcmaModule.GetObject(EntityHandle handle)\r\n     at Internal.TypeSystem.Ecma.EcmaModule.ResolveTypeReference(TypeReferenceHandle handle)\r\n     at Internal.TypeSystem.Ecma.EcmaModule.EcmaObjectLookupHashtable.CreateValueFromKey(EntityHandle handle)\r\n     at Internal.TypeSystem.LockFreeReaderHashtable`2.CreateValueAndEnsureValueIsInTable(TKey key)\r\n     at Internal.TypeSystem.Ecma.EcmaModule.GetObject(EntityHandle handle)\r\n     at Internal.TypeSystem.Ecma.EcmaModule.GetType(EntityHandle handle)\r\n     at Internal.TypeSystem.Ecma.EcmaSignatureParser.ParseType(SignatureTypeCode typeCode)\r\n     at Internal.TypeSystem.Ecma.EcmaSignatureParser.ParseMethodSignature()\r\n     at Internal.TypeSystem.Ecma.EcmaMethod.InitializeSignature()\r\n     at ILCompiler.DependencyAnalysis.MethodMetadataNode.GetStaticDependencies(NodeFactory factory)\r\n     at ILCompiler.DependencyAnalysisFramework.DependencyAnalyzer`2.GetStaticDependenciesImpl(DependencyNodeCore`1 node)\r\n     at ILCompiler.DependencyAnalysisFramework.DependencyAnalyzer`2.ProcessMarkStack()\r\n     at ILCompiler.DependencyAnalysisFramework.DependencyAnalyzer`2.ComputeMarkedNodes()\r\n     at ILCompiler.RyuJitCompilation.CompileInternal(String outputFile, ObjectDumper dumper)\r\n     at ILCompiler.Compilation.ILCompiler.ICompilation.Compile(String outputFile, ObjectDumper dumper)\r\n     at ILCompiler.Program.Run(String[] args)\r\n     at ILCompiler.Program.Main(String[] args)\r\nC:\\Users\\DAnderson\\.nuget\\packages\\microsoft.dotnet.ilcompiler\\1.0.0-alpha-28121-01\\build\\Microsoft.NETCore.Native.targets(253,5): error MSB3073: The command \"\"C:\\...\\runtime.win-x64.microsoft.dotnet.ilcompiler\\1.0.0-alpha-28121-01\\tools\\ilc\" @\"obj\\Debug\\netcoreapp2.1\\win-x64\\native\\xxx.ilc.rsp\"\" exited with code 1. [C:\\xxx.csproj]","Url":"https://github.com/dotnet/corert/issues/7796","RelatedDescription":"Open issue \"[TEMPORARY EXCEPTION MESSAGE] FileLoadErrorGeneric: Microsoft.Management.Infrastructure\" (#7796)"},{"Id":"494589847","IsPullRequest":true,"CreatedAt":"2019-09-17T14:13:36","Actor":"Dotnet-GitSync-Bot","Number":"7794","RawContent":null,"Title":"Mirror changes from dotnet/corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7794","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx\" (#7794)"},{"Id":"494273259","IsPullRequest":true,"CreatedAt":"2019-09-16T23:13:23","Actor":"Dotnet-GitSync-Bot","Number":"7793","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @tarekgh @stephentoub","Url":"https://github.com/dotnet/corert/pull/7793","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7793)"}],"ResultType":"GitHubIssue"},"SDK-Issues":{"Issues":[{"Id":"505569243","IsPullRequest":true,"CreatedAt":"2019-10-11T04:31:39","Actor":"dotnet-bot","Number":"3736","RawContent":null,"Title":"Merge release/2.2.2xx to release/2.2.4xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.2.2xx into release/2.2.4xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.2xx-to-release/2.2.4xx\ngit reset --hard upstream/release/2.2.4xx\ngit merge upstream/release/2.2.2xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.2xx-to-release/2.2.4xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3736","RelatedDescription":"Closed or merged PR \"Merge release/2.2.2xx to release/2.2.4xx\" (#3736)"},{"Id":"505628347","IsPullRequest":true,"CreatedAt":"2019-10-11T04:20:10","Actor":"dotnet-maestro[bot]","Number":"3740","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/core-setup","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191010.20\r\n- **Date Produced**: 10/11/2019 3:11 AM\r\n- **Commit**: 966989290a99db7e31867dabb1aa6dac6d045813\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.1.0-preview2.19510.20\r\n\r\n[marker]: <> (End:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3740","RelatedDescription":"Open PR \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#3740)"},{"Id":"505569183","IsPullRequest":true,"CreatedAt":"2019-10-11T03:48:26","Actor":"dotnet-bot","Number":"3735","RawContent":null,"Title":"Merge release/2.1.8xx to release/2.2.2xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.1.8xx into release/2.2.2xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.8xx-to-release/2.2.2xx\ngit reset --hard upstream/release/2.2.2xx\ngit merge upstream/release/2.1.8xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.1.8xx-to-release/2.2.2xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3735","RelatedDescription":"Closed or merged PR \"Merge release/2.1.8xx to release/2.2.2xx\" (#3735)"},{"Id":"505569308","IsPullRequest":true,"CreatedAt":"2019-10-11T03:30:40","Actor":"dotnet-bot","Number":"3738","RawContent":null,"Title":"Merge release/3.0.1xx to release/3.1.1xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/3.0.1xx into release/3.1.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-release/3.1.1xx\ngit reset --hard upstream/release/3.1.1xx\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-release/3.1.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3738","RelatedDescription":"Closed or merged PR \"Merge release/3.0.1xx to release/3.1.1xx\" (#3738)"},{"Id":"505532879","IsPullRequest":true,"CreatedAt":"2019-10-11T03:30:23","Actor":"nguerrera","Number":"3733","RawContent":null,"Title":"Merge 3.0.1xx to 3.1.1xx","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/3733","RelatedDescription":"Closed or merged PR \"Merge 3.0.1xx to 3.1.1xx\" (#3733)"},{"Id":"505536771","IsPullRequest":true,"CreatedAt":"2019-10-11T01:11:26","Actor":"dotnet-maestro[bot]","Number":"3734","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee7760b1-2875-4869-d002-08d7114cdbad)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191010.13\r\n- **Date Produced**: 10/10/2019 9:15 PM\r\n- **Commit**: ee7dbc9e064bf59f822c5310b89e0e996ccc0d58\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.0.1\r\n\r\n[marker]: <> (End:ee7760b1-2875-4869-d002-08d7114cdbad)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3734","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/core-setup\" (#3734)"},{"Id":"505569333","IsPullRequest":true,"CreatedAt":"2019-10-11T00:05:30","Actor":"dotnet-bot","Number":"3739","RawContent":null,"Title":"Merge release/3.1.1xx to master","State":"open","Body":"\nThis is an automatically generated pull request from release/3.1.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.1.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.1.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.1.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3739","RelatedDescription":"Open PR \"Merge release/3.1.1xx to master\" (#3739)"},{"Id":"505569280","IsPullRequest":true,"CreatedAt":"2019-10-11T00:05:17","Actor":"dotnet-bot","Number":"3737","RawContent":null,"Title":"Merge release/2.2.4xx to release/3.0.1xx","State":"open","Body":"\nThis is an automatically generated pull request from release/2.2.4xx into release/3.0.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.4xx-to-release/3.0.1xx\ngit reset --hard upstream/release/3.0.1xx\ngit merge upstream/release/2.2.4xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.4xx-to-release/3.0.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3737","RelatedDescription":"Open PR \"Merge release/2.2.4xx to release/3.0.1xx\" (#3737)"},{"Id":"505491895","IsPullRequest":true,"CreatedAt":"2019-10-10T21:55:54","Actor":"dotnet-maestro[bot]","Number":"3732","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee7760b1-2875-4869-d002-08d7114cdbad)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191010.08\r\n- **Date Produced**: 10/10/2019 7:27 PM\r\n- **Commit**: 903ca49e3ffddc551e12d2f94d7cca95f9a340bf\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.0.1\r\n\r\n[marker]: <> (End:ee7760b1-2875-4869-d002-08d7114cdbad)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3732","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/core-setup\" (#3732)"},{"Id":"505082701","IsPullRequest":false,"CreatedAt":"2019-10-10T07:14:25","Actor":"hanslai","Number":"3731","RawContent":null,"Title":"dotnet cli: dotnet new failed when there is a private nuget package","State":"open","Body":"I have a private nuget package setup in Visual Studio.\r\n\r\n![AIS Internal nuget](https://user-images.githubusercontent.com/20576491/66546180-0b00a680-eb6f-11e9-9ab5-43dcae189c23.png)\r\n\r\nWhen I run the following CLI command `dotnet new -i \"Amazon.Lambda.Templates::*\"` in Powershell , `dotnet new `will failed with Status Code 401.   Please see error message below.\r\n\r\n![Dotnet new failed with private nuget](https://user-images.githubusercontent.com/20576491/66546448-a0039f80-eb6f-11e9-8847-8edc5ed3c94b.png)\r\n\r\nBut if I unchecked my private nuget in Nuget Package Manager from Visual Studio.  Then the above `dotnet new` command will successfully restore the Templates.\r\n\r\nSince having a private nuget package or not should not have anything to do with `dotnet new`. This CLI command should not failed.\r\n\r\nThanks\r\n","Url":"https://github.com/dotnet/sdk/issues/3731","RelatedDescription":"Open issue \"dotnet cli: dotnet new failed when there is a private nuget package\" (#3731)"},{"Id":"503817875","IsPullRequest":false,"CreatedAt":"2019-10-08T21:16:17","Actor":"Codex-","Number":"3725","RawContent":null,"Title":"Can only build 2.2 Tests with 3.0 installed with RuntimeIdentifier specified","State":"closed","Body":"I came across this issue today when Visual Studio updated to 16.3 and forced the installation of .NetCore 3.0\r\n\r\nWhen 3.0 is installed I found I was unable to build 2.2 apps/test projects as they resulted in the error `System.BadImageFormatException : Bad IL format.`. Removing 3.0 'resolved' this. \r\n\r\nWith 3.0 being forcibly installed now I've managed to find that adding `<RuntimeIdentifier>win-x64</RuntimeIdentifier>` to the project configuration I was then able to build again, but this seems wrong too.\r\n\r\nthe config is:\r\n```\r\n<PropertyGroup>\r\n\t<TargetFramework>netcoreapp2.2</TargetFramework>\r\n\t<CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>\r\n\t<IsPackable>false</IsPackable>\r\n\t<RuntimeIdentifier>win-x64</RuntimeIdentifier>\r\n</PropertyGroup>\r\n```\r\n\r\nI suspect that this framework target with the use of `CopyLocalLockFileAssemblies` results in the problem, but in my case I can't build without it (and historically this has worked until now).\r\n\r\nRemoving `RuntimeIdentifier` brings back the original error, rolling back to VS 16.2 without 3.0 installed works as expected.\r\n\r\nI feel like I'm missing something, unless this is a bug. \r\n\r\nAny ideas/thoughts are appreciated","Url":"https://github.com/dotnet/sdk/issues/3725","RelatedDescription":"Closed issue \"Can only build 2.2 Tests with 3.0 installed with RuntimeIdentifier specified\" (#3725)"},{"Id":"504289407","IsPullRequest":false,"CreatedAt":"2019-10-08T17:33:19","Actor":"davidmatson","Number":"3729","RawContent":null,"Title":"Process.Start on exe via ProjectReference no longer works in .NET Core","State":"open","Body":"**Visual Studio Version**:\r\n16.2.5\r\n\r\n**Summary**:\r\nHaving a ProjectReference to an .exe was sufficient to have Process.Start work in .NET Framework (both old- and new-style csprojs). With .NET Core, it fails (with both SelfContained=true and false and with or without running Publish first).\r\n\r\n**Steps to Reproduce**:\r\n1. Create an exe project in a new solution.\r\n2. Create a second exe project in the same solution.\r\n3. Add a ProjectReference from the first project to the second project.\r\n4. Have the first project call Process.Start on the second project's exe.\r\n\r\n**Expected Behavior**:\r\nThe process runs successfully.\r\n\r\n**Actual Behavior**:\r\nProcess.Start fails with:\r\n```\r\nA fatal error was encountered. The library 'hostpolicy.dll' required to execute the application was not found in 'C:\\Program Files\\dotnet'.\r\n```\r\n\r\nor (if SelfContained=true):\r\n```\r\nCould not resolve CoreCLR path. For more details, enable tracing by setting COREHOST_TRACE environment variable to 1\r\n```\r\n\r\nor (after Publish):\r\n```\r\nUnhandled Exception: System.ComponentModel.Win32Exception: The system cannot find the file specified\r\n```\r\n\r\n**User Impact**:\r\nWe heavily use the pattern of a long-running exe (for a container service) calling short-lived exes to do work. Ctrl+F5 used to work in .NET Framework; it doesn't in .NET Core.\r\n\r\nNote also some odd behavior with SelfContained=false - NuGet package dependencies of the child project do not get placed in the bin directory of the referencing project (prior to Publish; they do after).\r\n\r\nSee the attached zip for repro projects for full .NET Framework with a traditional csproj, full .NET Framework with a new-style (Common Project System) csproj, and .NET Core.\r\n[repro.zip](https://github.com/dotnet/project-system/files/3703783/repro.zip)","Url":"https://github.com/dotnet/sdk/issues/3729","RelatedDescription":"Open issue \"Process.Start on exe via ProjectReference no longer works in .NET Core\" (#3729)"},{"Id":"504072077","IsPullRequest":true,"CreatedAt":"2019-10-08T14:25:49","Actor":"nguerrera","Number":"3727","RawContent":null,"Title":" Pinned host model 3.0.0 for 3.0.x servicing","State":"closed","Body":"@mmitche  @livarcocc ","Url":"https://github.com/dotnet/sdk/pull/3727","RelatedDescription":"Closed or merged PR \" Pinned host model 3.0.0 for 3.0.x servicing\" (#3727)"},{"Id":"504301070","IsPullRequest":false,"CreatedAt":"2019-10-08T14:23:27","Actor":"ds1709","Number":"3730","RawContent":null,"Title":"Use ResXFileCodeGenerator as default custom tool fo resx files if Designer.cs file exists","State":"open","Body":"**Summary**:\r\nWe need to specify `CustomTool` attribute for resx files. Generally it's `ResXFileCodeGenerator`. If `CustomTool` not specified, then code generator is not working. Offer to make `ResXFileCodeGenerator` as default custom tool for resx files, whict has paired Designer.cs file (e.g. the most common Propertiest\\Resources.resx and Properties\\Resources.Designer.cs).","Url":"https://github.com/dotnet/sdk/issues/3730","RelatedDescription":"Open issue \"Use ResXFileCodeGenerator as default custom tool fo resx files if Designer.cs file exists\" (#3730)"},{"Id":"503850577","IsPullRequest":false,"CreatedAt":"2019-10-08T06:17:11","Actor":"davidwengier","Number":"3726","RawContent":null,"Title":"Review translation of \"Assets file\" for portuguese","State":"open","Body":"tag @tmeschter\r\n\r\nThis is just one person, but they speak portuguese better than me, so thought I'd report it. Not sure if there is some way to get the LOC team to verify that translations make sense? It looks like in this case the translation is technically correct, but perhaps not helpful.\r\n\r\nFrom the C# discord today:\r\n\r\n\r\n-----\r\n\r\n@marcussacana : \r\nI got a error\r\nit's in portuguese, a sec to me translate\r\n\"The file of active '....' don't have the same destination to '.netcoreapp,ver=v3/win-x86' verify if the restoration has executed and if you included the 'netcoreapp3.0' in the TargetFrameworks of the project, Maybe you will need include the 'win-x86' in the RuntimeIdentifiers of the project.\"\r\nI don't get this 'actives' anyway\r\n \r\n@davidwengier : \r\nit would be \"file of assets\" i guess? the english version of the message just says \"Assets file\"\r\n \r\n@marcussacana : \r\nthen the portuguese message is wrong, because don't make much sense to me...\r\nas far I know 'ativos' can be translated only to 'active/enabled'... the english version said assets, right?\r\n \r\n@davidwengier : \r\nyes\r\nand in this case \"assets\" is a technical term, so i think the translation should be reviewed\r\nlike its literally \"project.assets.json\"\r\n \r\n@marcussacana : \r\nwell, I never see a translation to assets before, usually here we speak 'assets' too, but isn't a word recognized in our dictionary\r\n\r\nthe google translate said it's rigth\r\n![image](https://user-images.githubusercontent.com/754264/66371253-6fe0c300-e9ee-11e9-8854-ccfdaeb5ce7e.png)\r\n\r\nbut well\r\n![image](https://user-images.githubusercontent.com/754264/66371266-7707d100-e9ee-11e9-909d-91b86725586d.png)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/issues/3726","RelatedDescription":"Open issue \"Review translation of \"Assets file\" for portuguese\" (#3726)"},{"Id":"503747398","IsPullRequest":false,"CreatedAt":"2019-10-07T23:43:25","Actor":"wli3","Number":"3724","RawContent":null,"Title":"BuildWebLarge and similar perf test have wrong snapshot folder","State":"open","Body":"https://github.com/dotnet/sdk/blob/260f37383a4974b478cba2ba67ac7908578f5b07/src/Tests/Microsoft.NET.PerformanceTests/BuildPerf.cs#L68\r\n\r\nAnd possibly other similar tests. We use the same folder to find the csproj (which is correct), and to do snapshot (not correct). As a result, in BuildWebLarge, only the mvc folder is under snapshot/restore while there are many other projects in the solution are not properly cleaned between test runs. \r\n\r\nHowever, the perf lab has different infra to do this. So once we moved to perf lab, this will no longer be a problem.\r\n\r\nI think this is a low priority issue.","Url":"https://github.com/dotnet/sdk/issues/3724","RelatedDescription":"Open issue \"BuildWebLarge and similar perf test have wrong snapshot folder\" (#3724)"},{"Id":"502980437","IsPullRequest":false,"CreatedAt":"2019-10-07T21:49:49","Actor":"smoothdeveloper","Number":"3718","RawContent":null,"Title":"dotnet build --help failing due to sdk version","State":"closed","Body":"When I attempt a command with the `--help` argument, it fails due to mismatch of SDK version \r\n\r\nWould making it work disregarding potential mismatch be more user friendly / sensible?\r\n\r\nCurrently:\r\n\r\n```console\r\nC:\\tmp\\testdotnetnew>dotnet build --help\r\nA compatible installed .NET Core SDK for global.json version [4.2.100] from [C:\\tmp\\testdotnetnew\\global.json] was not found\r\nInstall the [4.2.100] .NET Core SDK or update [C:\\tmp\\testdotnetnew\\global.json] with an installed .NET Core SDK:\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.300 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.604 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.700 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.801 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.402 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100 [C:\\Program Files\\dotnet\\sdk]\r\n```\r\n\r\nAlso, is there a way to force the sdk to \"go ahead\"? if so, it would be good to be pointed at that in the mismatch error message (with a bit of caution).","Url":"https://github.com/dotnet/sdk/issues/3718","RelatedDescription":"Closed issue \"dotnet build --help failing due to sdk version\" (#3718)"},{"Id":"503665613","IsPullRequest":true,"CreatedAt":"2019-10-07T20:12:15","Actor":"sfoslund","Number":"3723","RawContent":null,"Title":"Confirm DisableImplicitNamespaceImports solves inferred type variable name issue","State":"open","Body":"Add test for #3615 to ensure the DisableImplicitNamespaceImports property solves inferred type variable name issue","Url":"https://github.com/dotnet/sdk/pull/3723","RelatedDescription":"Open PR \"Confirm DisableImplicitNamespaceImports solves inferred type variable name issue\" (#3723)"},{"Id":"503097561","IsPullRequest":true,"CreatedAt":"2019-10-06T14:55:57","Actor":"dotnet-maestro[bot]","Number":"3722","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191006.1\r\n- **Date Produced**: 10/6/2019 11:53 AM\r\n- **Commit**: bbf5542781136f9f3a1f30b010cb782e775d54c7\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.1.0-preview1.19506.1\r\n\r\n[marker]: <> (End:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3722","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#3722)"},{"Id":"503047091","IsPullRequest":true,"CreatedAt":"2019-10-06T06:46:26","Actor":"dotnet-maestro[bot]","Number":"3721","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191005.5\r\n- **Date Produced**: 10/6/2019 2:24 AM\r\n- **Commit**: 994c4d01e6970e7110e2f0ecf95cc184dfa7569c\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.1.0-preview1.19505.5\r\n\r\n[marker]: <> (End:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3721","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#3721)"},{"Id":"503038463","IsPullRequest":true,"CreatedAt":"2019-10-06T02:50:44","Actor":"dotnet-maestro[bot]","Number":"3720","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191005.4\r\n- **Date Produced**: 10/6/2019 12:21 AM\r\n- **Commit**: f046fe0e33340def6bf72f939126012f740ea5b5\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.1.0-preview1.19505.4\r\n\r\n[marker]: <> (End:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3720","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#3720)"},{"Id":"502982974","IsPullRequest":false,"CreatedAt":"2019-10-05T16:18:41","Actor":"megakid","Number":"3719","RawContent":null,"Title":"*.pp contentFiles not copied to output directory in 3.0 SDK","State":"open","Body":"I've been digging into this issue whereby a `.pp` file inside a package `contentFiles` (with `copyToOutput=\"true\"`) via `PackageReference` is not copied into the output directory during a `dotnet publish` / `dotnet build`.  This works fine with .NET Core SDK `2.2.*` but is broken in `3.0.100`.  Non-`.pp` files work fine.\r\n\r\nI have debugged the MSBuild process and can see that the files are transformed successfully but they do not get copied to the output unlike non-`.pp` files.\r\n\r\nMy test project/package structure is basic and looks like this:\r\n\r\n`[Library A (TestAbc)] <== (PackageReference) == [Exe B]`\r\n\r\nLibrary A's `.nuspec`:\r\n\r\n```\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<package xmlns=\"http://schemas.microsoft.com/packaging/2013/05/nuspec.xsd\">\r\n  <metadata>\r\n    <id>TestAbc</id>\r\n    <version>160.0.0</version>\r\n    <authors>TestAbc</authors>\r\n    <owners>TestAbc</owners>\r\n    <requireLicenseAcceptance>false</requireLicenseAcceptance>\r\n    <description>Package Description</description>\r\n    <dependencies>\r\n      <group targetFramework=\".NETFramework4.7.1\" />\r\n    </dependencies>\r\n    <contentFiles>\r\n      <files include=\"any/any/Test.ps1.pp\" buildAction=\"Content\" copyToOutput=\"true\" />\r\n      <files include=\"any/any/NonTransformed.ps1\" buildAction=\"Content\" copyToOutput=\"true\" />\r\n    </contentFiles>\r\n  </metadata>\r\n</package>\r\n```\r\n\r\nExe B's `csproj` (I've also tried targeting `netcoreapp3.0`)\r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFrameworks>net472</TargetFrameworks>\r\n    <OutputType>Exe</OutputType>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"TestAbc\" Version=\"163.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nMy dotnet version:\r\n\r\n```\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Professional>dotnet --version\r\n3.0.100\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Professional>dotnet --list-sdks\r\n3.0.100 [C:\\Program Files\\dotnet\\sdk]\r\n```\r\n\r\nMy build command - I couldn't figure out how to get binlogs from msbuild via the dotnet publish command so I used the `CopyLocalLockFileAssemblies` property workaround although I'm not sure this is required with 3.0 SDK (see [here](https://github.com/dotnet/sdk/pull/2646)):\r\n\r\n`C:/Program Files/dotnet/dotnet.exe --diagnostics msbuild /target:Build /property:PackageOutputPath=C:/Projects/test/bin/packages /property:IncludeSymbols=true /property:IncludeSource=true /property:CopyLocalLockFileAssemblies=true /property:Version=1.0.0 /property:configuration=Release \"C:/Projects/squid2/src/ExeA/ExeA.csproj\" -restore /bl:build.binlog -v:diag`\r\n\r\nAfter this command I see `NonTransformed.ps1` in the output folder but not `Test.ps1` (or `Test.ps1.pp`).\r\nI would expect to see both `.ps1`s in my output folder at that point.\r\n\r\nHere's my debugging so far:\r\n\r\nI see the .pp file getting picked up:\r\n\r\n![image](https://user-images.githubusercontent.com/1478003/66257599-1d579a80-e793-11e9-9f82-74730dc52175.png)\r\n\r\nIt gets copied to a temp directory without the .pp extension (`obj\\Release\\net472\\NuGet\\9374D6CD1CF741AA241FA0906DC657D57C8CB116\\TestAbc\\165.0.0\\Test.ps1` in this case).\r\n\r\nThen I see the preprocessor task running and see that the file has now been overwritten/updated with the template tokens replaced.\r\n \r\n![image](https://user-images.githubusercontent.com/1478003/66257582-f600cd80-e792-11e9-8a0b-9a481c9bab8a.png)\r\n\r\nI notice later in the process that the 2 files are listed side by side but the `TargetPath` looks wrong (to my untrained eye) under the `Test.ps1` element - first difference is the content path is an absolute path for the `NonTransformed.ps1` but a relative path for `Test.ps1`.  The task `AssignTargetPath` is used to generate a `TargetPath` (see [here](https://github.com/microsoft/msbuild/blob/vs16.3/src/Tasks/AssignTargetPath.cs)) which generates the correct one on `NonTransformed.ps1` but not `Test.ps1`.  **UPDATE** From tracing the 2.2 build, I can see it is the same in 2.2 so this is fine.\r\n\r\n![image](https://user-images.githubusercontent.com/1478003/66257667-fd74a680-e793-11e9-9b07-28edda0a4a23.png)\r\n\r\nI can't figure out where `Test.ps1` is being dropped but later on I clearly see `NonTransformed.ps1` alone in the copy task:\r\n\r\n![image](https://user-images.githubusercontent.com/1478003/66257561-c94cb600-e792-11e9-8f5d-f8bd7aed22e6.png)\r\n\r\nMy output dir afterwards:\r\n\r\n![image](https://user-images.githubusercontent.com/1478003/66258015-0e271b80-e798-11e9-919b-c90d8b39c2bf.png)\r\n\r\nExact same build but with `SDK 2.2.402`:\r\n\r\n![image](https://user-images.githubusercontent.com/1478003/66258002-e46df480-e797-11e9-9d34-cdae57598bac.png)\r\n\r\nI've included my 2.2 and 3.0 binlogs here for comparison:\r\n\r\n[msbuild-binlogs.zip](https://github.com/dotnet/sdk/files/3693524/msbuild-binlogs.zip)\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/issues/3719","RelatedDescription":"Open issue \"*.pp contentFiles not copied to output directory in 3.0 SDK\" (#3719)"},{"Id":"502925465","IsPullRequest":true,"CreatedAt":"2019-10-05T13:52:03","Actor":"dotnet-maestro[bot]","Number":"3717","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191004.20\r\n- **Date Produced**: 10/5/2019 7:26 AM\r\n- **Commit**: 45f675b1acc38eaea182bf6ef284d1b13141d134\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.1.0-preview1.19504.20\r\n\r\n[marker]: <> (End:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3717","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#3717)"},{"Id":"502911797","IsPullRequest":true,"CreatedAt":"2019-10-05T06:45:22","Actor":"dotnet-maestro[bot]","Number":"3716","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191004.15\r\n- **Date Produced**: 10/5/2019 2:41 AM\r\n- **Commit**: ea8a25eb0679dc4d940623688189885086286adc\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.1.0-preview1.19504.15\r\n\r\n[marker]: <> (End:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3716","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#3716)"},{"Id":"502901854","IsPullRequest":true,"CreatedAt":"2019-10-05T03:46:00","Actor":"dotnet-maestro[bot]","Number":"3715","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191004.13\r\n- **Date Produced**: 10/5/2019 12:20 AM\r\n- **Commit**: fd1162d3db7db9c79bf01d32604862f4bee25b96\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.1.0-preview1.19504.13\r\n\r\n[marker]: <> (End:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3715","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#3715)"},{"Id":"502887934","IsPullRequest":true,"CreatedAt":"2019-10-04T23:56:34","Actor":"wli3","Number":"3714","RawContent":null,"Title":"Update stage0","State":"open","Body":"","Url":"https://github.com/dotnet/sdk/pull/3714","RelatedDescription":"Open PR \"Update stage0\" (#3714)"},{"Id":"502887592","IsPullRequest":true,"CreatedAt":"2019-10-04T23:55:16","Actor":"wli3","Number":"3713","RawContent":null,"Title":"Update stage0","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/3713","RelatedDescription":"Closed or merged PR \"Update stage0\" (#3713)"},{"Id":"502640875","IsPullRequest":true,"CreatedAt":"2019-10-04T17:16:48","Actor":"dotnet-maestro[bot]","Number":"3712","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191004.2\r\n- **Date Produced**: 10/4/2019 12:23 PM\r\n- **Commit**: 50de4c0d1f33599adc6d71ae6d5b8783140c0b83\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.1.0-preview1.19504.2\r\n\r\n[marker]: <> (End:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3712","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#3712)"},{"Id":"502523605","IsPullRequest":true,"CreatedAt":"2019-10-04T11:16:08","Actor":"dotnet-maestro[bot]","Number":"3711","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20191003.14\r\n- **Date Produced**: 10/4/2019 8:06 AM\r\n- **Commit**: 36e40e331b31d9c220fd2553a0a8784d59985c47\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.1.0-preview1.19503.14\r\n\r\n[marker]: <> (End:e0b7e874-2dc6-462b-dd42-08d72a4caef5)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3711","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#3711)"},{"Id":"504235087","IsPullRequest":false,"CreatedAt":"2019-09-30T15:55:55","Actor":"genifycom","Number":"3728","RawContent":null,"Title":"How to debug \"GenerateBundle\" task failed unexpectedly","State":"open","Body":"# Issue Title\r\n\r\ndotnet publish xxx.csproj -r win-x64 -c Release /p:PublishSingleFile=true\r\n\r\ngives me the following:\r\n\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Publish.targets(809,5): error MSB4018: The \"GenerateBundle\" task failed unexpectedly. [C:\\xxx.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Publish.targets(809,5): error MSB4018: Microsoft.NET.HostModel.AppHost.PlaceHolderNotFoundInAppHostException: Exception of type 'Microsoft.NET.HostModel.AppHost.PlaceHolderNotFoundInAppHostException' was thrown. [C:\\xxx.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Publish.targets(809,5): error MSB4018:    at Microsoft.NET.HostModel.AppHost.BinaryUtils.SearchAndReplace(MemoryMappedViewAccessor accessor, Byte[] searchPattern, Byte[] patternToReplace, Boolean pad0s) [C:\\xxx.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Publish.targets(809,5): error MSB4018:    at Microsoft.NET.HostModel.AppHost.BinaryUtils.SearchAndReplace(String filePath, Byte[] searchPattern, Byte[] patternToReplace, Boolean pad0s) [C:\\xxx.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Publish.targets(809,5): error MSB4018:    at Microsoft.NET.HostModel.AppHost.HostWriter.<>c__DisplayClass3_0.<SetAsBundle>b__0() [C:\\xxx.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Publish.targets(809,5): error MSB4018:    at Microsoft.NET.HostModel.RetryUtil.RetryOnIOError(Action func) [C:\\xxx.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Publish.targets(809,5): error MSB4018:    at Microsoft.NET.HostModel.AppHost.HostWriter.SetAsBundle(String appHostPath, Int64 bundleHeaderOffset) [C:\\xxx.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Publish.targets(809,5): error MSB4018:    at Microsoft.NET.HostModel.Bundle.Bundler.GenerateBundle(IReadOnlyList`1 fileSpecs) [C:\\xxx.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Publish.targets(809,5): error MSB4018:    at Microsoft.NET.Build.Tasks.GenerateBundle.ExecuteCore() [C:\\xxx.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Publish.targets(809,5): error MSB4018:    at Microsoft.NET.Build.Tasks.TaskBase.Execute() [C:\\xxx.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Publish.targets(809,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute() [C:\\xxx.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Publish.targets(809,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskBuilder.ExecuteInstantiatedTask(ITaskExecutionHost taskExecutionHost, TaskLoggingContext taskLoggingContext, TaskHost taskHost, ItemBucket bucket, TaskExecutionMode howToExecuteTask) [C:\\xxx.csproj]\r\n\r\n# General\r\n\r\nWould love to be able to provide more info, but how?\r\n\r\nIs there a debug publish switch?\r\n","Url":"https://github.com/dotnet/sdk/issues/3728","RelatedDescription":"Open issue \"How to debug \"GenerateBundle\" task failed unexpectedly\" (#3728)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"505445666","IsPullRequest":false,"CreatedAt":"2019-10-10T18:45:56","Actor":"TaraOverfield","Number":"129","RawContent":null,"Title":"October 2019 .NET Updates","State":"open","Body":"The following .NET updates were released on October 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework October 2019 Security and Quality Rollup](https://devblogs.microsoft.com/dotnet/net-framework-october-2019-security-and-quality-rollup/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/129","RelatedDescription":"Open issue \"October 2019 .NET Updates\" (#129)"},{"Id":"505328689","IsPullRequest":false,"CreatedAt":"2019-10-10T15:19:53","Actor":"carloreggiani","Number":"128","RawContent":null,"Title":"Docker Stop return status Exited \"(3221225786)\"","State":"closed","Body":"Hi\r\nI'm investigating a issue regarding official MCR images on a Win2019 server with Docker EE engine 19.03.2.\r\n\r\nThe images that I'm unsing are:\r\nmcr.microsoft.com/windows/servercore:1809\r\nmcr.microsoft.com/dotnet/framework/aspnet:4.8\r\n\r\nStopping containers based on these images (\"docker stop\" command) I'm getting: \r\n\"Exited (3221225786)\"\r\n\r\nOn linux a stop command normally return: \"Exited (137)\"\r\n\r\nIs it a normal behaviour? What's means 3221225786?\r\n\r\nThanks for any support\r\n\r\nCarlo","Url":"https://github.com/dotnet/announcements/issues/128","RelatedDescription":"Closed issue \"Docker Stop return status Exited \"(3221225786)\"\" (#128)"},{"Id":"504325600","IsPullRequest":false,"CreatedAt":"2019-10-08T23:14:11","Actor":"terrajobst","Number":"127","RawContent":null,"Title":"Consolidated repo names","State":"open","Body":"[ann]: https://github.com/dotnet/announcements/issues/119\r\n\r\nAs we announced earlier, we're [planning on consolidating][ann] some of the repositories in the dotnet org. While this is still work in progress, we'd like to give you an update on where we are.\r\n\r\nSo far, we've identified the following repos:\r\n\r\n* dotnet/**runtime**\r\n\t- Will contain [coreclr](https://github.com/dotnet/coreclr), [corefx](https://github.com/dotnet/corefx), [core-setup](https://github.com/dotnet/core-setup), [aspnet/Extensions](https://github.com/aspnet/Extensions), and some of [mono/mono](https://github.com/mono/mono)\r\n* [dotnet/**sdk**](https://github.com/dotnet/sdk)\r\n\t- Will contain [toolset](https://github.com/dotnet/toolset), [sdk](https://github.com/dotnet/sdk), [cli](https://github.com/dotnet/cli)\r\n* dotnet/**installer**\r\n\t- Renamed from [core-sdk](https://github.com/dotnet/core-sdk)\r\n* dotnet/**aspnetcore**\r\n\t- Moved from [aspnet/AspNetCore](https://github.com/aspnet/AspNetCore) and will also contain [aspnet/AspNetCore-Tooling](https://github.com/aspnet/AspNetCore-Tooling)\r\n* dotnet/**efcore**\r\n\t- Moved from [aspnet/EntityFrameworkCore](https://github.com/aspnet/EntityFrameworkCore)\r\n* [dotnet/**winforms**](https://github.com/dotnet/winforms)\r\n\t- Unchanged, but listed for clarity \r\n* [dotnet/**wpf**](https://github.com/dotnet/wpf)\r\n\t- Unchanged, but listed for clarity\r\n\r\n### Name changes\r\n\r\nYou might notice that we changed our mind on naming from our [earlier announcement][ann]. Based on your feedback, we decided to go with **dotnet/runtime** instead of **dotnet/platform** and **dotnet/sdk** instead of **dotnet/cli**.\r\n\r\nSeveral people pointed out that the previous names weren't relatable to how we talk about the product, for example on download pages. So, we decided to match the product distributions as the primary design point for the new names. We generally refer to the bits you need to run your app as *the runtime* and the bits you need to build apps as *the SDK*. This also matches the naming chosen by other platforms.\r\n\r\n### New repos can't be used for .NET Core 3.x or earlier\r\n\r\nThe consolidated repositories are going to be about .NET 5 and going forward. It will not be possible to build .NET Core 3.1 or earlier from these repositories. As such, only the master branch from each of the repositories will be brought forward. There will be no porting of the individual release branches in the source repositories.\r\n\r\n### Personal names and email addresses\r\n\r\nSince we're planning on rebasing the history in the merged repositories, we can map your name and email address to new values as well. We primarily do this to support our friends in the LGBTQ+ community who have changed their names to reflect their identities. However, anybody is welcome to use this to change their email and name.\r\n\r\nWhatever your reason might be: we value your contributions and we hope this small gesture makes your life a little bit better. So if you changed your name/email – or simply prefer us to use different values – please [submit a request](mailto:dotnet@microsoft.com&subject=.NET%20repo%20consolidation%3A%20request%20for%20name%20change&body=Hey%2C%20%0A%0AI%E2%80%99d%20like%20to%20change%20my%20email%2Fdisplay%20name%20in%20the%20consolidated%20repo%20from%20%0A%0A%20%20%20%20%20%20%20%20My%20Old%20Name%20%3Cold.me%40example.org%3E%20%0A%0Ato%20%0A%0A%20%20%20%20%20%20%20%20My%20New%20Name%20%3Cnew.me%40example.org%3E%20%0A%0AThanks%21%20%0A).\r\n\r\n### More is coming\r\n\r\nWe'll share more updates in the upcoming months. Please let us know of any concerns that we haven't addressed yet!\r\n\r\n### Discussion\r\n\r\nTo discuss these plans, please comment on the corresponding issue at https://github.com/dotnet/coreclr/issues/27096.","Url":"https://github.com/dotnet/announcements/issues/127","RelatedDescription":"Open issue \"Consolidated repo names\" (#127)"},{"Id":"504304108","IsPullRequest":false,"CreatedAt":"2019-10-08T22:06:07","Actor":"MichaelSimons","Number":"126","RawContent":null,"Title":"4.7.x .NET Framework SDK Docker images no longer published","State":"open","Body":"# 4.7.x .NET Framework SDK Docker images no longer published\r\n\r\nThe [4.7.x .NET Framework SDK Docker images](https://hub.docker.com/_/microsoft-dotnet-framework-sdk) will no longer be published after Oct. 8, 2019.  The 4.8 image tags should be used as a replacement.\r\n\r\n## Discussion\r\n \r\nYou can share your thoughts on this change or see what others are saying at:\r\n \r\n* [microsoft/dotnet-framework-docker#428](https://github.com/microsoft/dotnet-framework-docker/issues/428)\r\n\r\n## Details\r\n\r\nAny references to the following SDK tags should be updated to reference `4.8` instead:\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.1`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.1-windowsservercore-ltsc2016`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.1-<yyyymmdd>-windowsservercore-ltsc2016`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.2`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-windowsservercore-ltsc2016`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-<yyyymmdd>-windowsservercore-ltsc2016`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-windowsservercore-1803`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-<yyyymmdd>-windowsservercore-1803`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-windowsservercore-ltsc2019`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-<yyyymmdd>-windowsservercore-ltsc2019`\r\n\r\nIf you haven't migrated to using images from [MCR](https://github.com/dotnet/announcements/issues/101) and are still using the .NET Framework repos on Docker Hub, you will need to update your tag references to MCR.  This is because the 4.8 images only exist on MCR.  These are the following Docker Hub tags that are affected and should be updated to reference the [4.8 tags at the MCR location](https://hub.docker.com/_/microsoft-dotnet-framework-sdk):\r\n* `microsoft/dotnet-framework:4.7.1-sdk`\r\n* `microsoft/dotnet-framework:4.7.1-sdk-windowsservercore-ltsc2016`\r\n* `microsoft/dotnet-framework:4.7.2-sdk`\r\n* `microsoft/dotnet-framework:4.7.2-sdk-windowsservercore-ltsc2016`\r\n* `microsoft/dotnet-framework:4.7.2-sdk-windowsservercore-1803`\r\n* `microsoft/dotnet-framework:4.7.2-sdk-windowsservercore-ltsc2019`","Url":"https://github.com/dotnet/announcements/issues/126","RelatedDescription":"Open issue \"4.7.x .NET Framework SDK Docker images no longer published\" (#126)"},{"Id":"502102886","IsPullRequest":false,"CreatedAt":"2019-10-03T14:30:16","Actor":"MichaelSimons","Number":"125","RawContent":null,"Title":"Alpine Docker images no longer include the tzdata package in 3.0","State":"open","Body":"# Alpine Docker images no longer include the tzdata package in 3.0\r\nBeginning with the 3.0 release, the `tzdata` package has been removed from all Alpine Docker images.\r\n\r\n## Discussion\r\nYou can share your thoughts on this change or see what others are saying at:\r\n\r\ndotnet/dotnet-docker#1366\r\n\r\n## Details\r\n* https://github.com/dotnet/dotnet-docker/pull/1312\r\n\r\n\r\nThis package was removed because it wasn't required for the main set of scenarios and to have consistency between the runtime-deps images across all Linux distros.  This package is still installed in the 2.x images for Alpine so this will be something to be aware of when migrating from 2.x to 3.0.\r\n\r\n\r\nYou may be impacted by this if you use any of the Alpine images and your code has a dependency on the `tzdata` package, such as using the `System.TimeZoneInfo` API.  In that case, you'll need to update your Dockerfile to explicitly install the package:\r\n```\r\nRUN apk add --no-cache tzdata\r\n```\r\n","Url":"https://github.com/dotnet/announcements/issues/125","RelatedDescription":"Open issue \"Alpine Docker images no longer include the tzdata package in 3.0\" (#125)"},{"Id":"497868605","IsPullRequest":false,"CreatedAt":"2019-09-24T19:01:32","Actor":"MichaelSimons","Number":"124","RawContent":null,"Title":".NET Core `latest` Docker tags updated to 3.0","State":"open","Body":"# .NET Core `latest` Docker tags updated to 3.0\r\n \r\nThe `latest` tags for the [dotnet/core](https://hub.docker.com/_/microsoft-dotnet-core) repos have been updated to reference [.NET Core 3.0](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0/).\r\n \r\n## Discussion\r\n \r\nYou can share your thoughts on this change or see what others are saying at:\r\n \r\n* [dotnet/dotnet-docker#1337](https://github.com/dotnet/dotnet-docker/issues/1337)\r\n \r\n## Details\r\n \r\n* [dotnet-docker#1334](https://github.com/dotnet/dotnet-docker/pull/1334)\r\n \r\nThe `latest` tags for the [dotnet/core](https://hub.docker.com/_/microsoft-dotnet-core) repos are always intended to reference the latest supported version of .NET Core. At this time, the latest supported version is .NET Core 3.0.\r\n \r\nThe following Docker repos have been updated:\r\n \r\n* [dotnet/core/sdk](https://hub.docker.com/_/microsoft-dotnet-core-sdk)\r\n* [dotnet/core/aspnet](https://hub.docker.com/_/microsoft-dotnet-core-aspnet)\r\n* [dotnet/core/runtime](https://hub.docker.com/_/microsoft-dotnet-core-runtime)\r\n* [dotnet/core/runtime-deps](https://hub.docker.com/_/microsoft-dotnet-core-runtime-deps)\r\n* [dotnet/core/samples](https://hub.docker.com/_/microsoft-dotnet-core-samples)\r\n \r\nIt is recommended to use a more-specific tag than `latest` for anything other than casual development. Once you have an application that you believe will eventually go to production, you are recommended to use a tag like `3.0`. The [.NET Core Docker Samples](https://github.com/dotnet/dotnet-docker/tree/master/samples) contain examples of more specific usage such as the [.NET Core console sample](https://github.com/dotnet/dotnet-docker/blob/master/samples/dotnetapp/Dockerfile).\r\n","Url":"https://github.com/dotnet/announcements/issues/124","RelatedDescription":"Open issue \".NET Core `latest` Docker tags updated to 3.0\" (#124)"},{"Id":"494223006","IsPullRequest":false,"CreatedAt":"2019-09-16T19:03:54","Actor":"leecow","Number":"123","RawContent":null,"Title":".NET Core 3.0 RC 1","State":"open","Body":".NET Core RC 1 released today. https://github.com/dotnet/core/issues/3380 has been opened for discussion. \r\n\r\n[Release Notes](https://github.com/dotnet/core/blob/master/release-notes/3.0/preview/3.0.0-rc1.md)\r\n[Download](https://github.com/dotnet/core/blob/master/release-notes/3.0/preview/3.0.0-rc1-download.md)\r\n\r\n**Blog posts**\r\n\r\n[.NET Core](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0-release-candidate-1/)\r\n[ASP.NET Core](https://devblogs.microsoft.com/aspnet/asp-net-core-and-blazor-updates-in-net-core-3-0-release-candidate-1/)\r\n\r\nPlease report any issues you find with 3.0.0 RC 1, either responding to this issue, creating a new issue or creating a new issue in one of the following repos:\r\n\r\n* [aspnet/AspNetCore](https://github.com/aspnet/AspNetCore) - for ASP.NET Core questions\r\n* [aspnet/EntityFrameworkCore](https://github.com/aspnet/EntityFrameworkCore) - for Entity Framework Core questions\r\n* [dotnet/cli](https://github.com/dotnet/cli/issues) - for CLI tools and questions\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues) - for API issues and questions\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues) - for runtime issues\r\n* [dotnet/core-setup](https://github.com/dotnet/core-setup/issues) - for installer issues\r\n* [dotnet/winforms](https://github.com/dotnet/winforms/issues) - for Winforms issues\r\n* [dotnet/wpf](https://github.com/dotnet/wpf/issues) - for WPF issues\r\n* [nuget/home](https://github.com/nuget/home/issues) - for NuGet questions and issues","Url":"https://github.com/dotnet/announcements/issues/123","RelatedDescription":"Open issue \".NET Core 3.0 RC 1\" (#123)"},{"Id":"491801748","IsPullRequest":false,"CreatedAt":"2019-09-10T17:23:20","Actor":"leecow","Number":"122","RawContent":null,"Title":"September 2019 .NET Updates","State":"open","Body":"The following .NET updates were released on September 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework September 2019 Security and Quality Rollup](https://devblogs.microsoft.com/dotnet/net-framework-september-2019-security-and-quality-rollup/)\r\n* [.NET Framework September 2019 Preview of Quality Rollup](https://devblogs.microsoft.com/dotnet/net-framework-september-2019-preview-of-quality-rollup/)\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.13 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.13/2.1.13.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.7 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.7/2.2.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/3345](https://github.com/dotnet/core/issues/3345)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/122","RelatedDescription":"Open issue \"September 2019 .NET Updates\" (#122)"},{"Id":"491794046","IsPullRequest":false,"CreatedAt":"2019-09-10T17:04:46","Actor":"blowdart","Number":"121","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-1301: Denial of Service Vulnerability in .NET Core","State":"open","Body":"# Microsoft Security Advisory CVE-2019-1301: Denial of Service Vulnerability in .NET Core\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability when .NET Core improperly handles web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core web application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nThe update addresses the vulnerability by correcting how the .NET Core web application handles web requests.\r\n\r\n## Announcement\r\n\r\nThe original announcement for this issue can be found at https://github.com/dotnet/announcements/issues/121\r\n\r\n## <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nNone\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application running on .NET Core 2.1.0-2.1.12, or .NET Core 2.2.0-2.2.6\r\n\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nYou can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  2.1.604 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf you have a version of .NET Core less than 2.1.13 or less than 2.2.7, you're vulnerable.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\n* For machines running .NET Core 2.1, you should download Runtime 2.1.13 or SDK 2.1.509 for Visual Studio 2017 or SDK 2.1.606 for Visual Studio 2019 (v16.0) or SDK 2.1.802 for Visual Studio 2019 (v16.2) from https://dotnet.microsoft.com/download/dotnet-core/2.1.\r\n* For machines running .NET Core 2.2, you should download Runtime 2.2.7 or SDK 2.2.109 for Visual Studio 2017 or SDK 2.2.206 for Visual Studio 2019 (v16.0) or SDK 2.2.402 for Visual Studio 2019 (v16.2) from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nIf you have both 2.1 and 2.2, you need to install updates for both versions.\r\n\r\nOnce you have installed the updated runtime or SDK, restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/dotnet/core/versions/selection) to a specific version of the runtime, you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n# Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/, respectively. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\nPaul Ryman of VMware Sydney Engineering Team\r\n\r\n### External Links\r\n\r\n[CVE-2019-1301](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-1301)\r\n\r\n### Revisions\r\n\r\nV1.0 (September 10, 2019): Advisory published.\r\nV1.1 (September 10, 2019): Fix version numbers\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-09-10_\r\n","Url":"https://github.com/dotnet/announcements/issues/121","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-1301: Denial of Service Vulnerability in .NET Core\" (#121)"},{"Id":"489344106","IsPullRequest":false,"CreatedAt":"2019-09-04T19:14:05","Actor":"leecow","Number":"120","RawContent":null,"Title":".NET Core 3.0 Preview 9","State":"open","Body":".NET Core Preview 9 released today. https://github.com/dotnet/core/issues/3304 has been opened for discussion. \r\n\r\n[Release Notes](https://github.com/dotnet/core/blob/master/release-notes/3.0/preview/3.0.0-preview9.md)\r\n[Download](https://github.com/dotnet/core/blob/master/release-notes/3.0/preview/3.0.0-preview9-download.md)\r\n\r\n**Blog posts**\r\n\r\n[.NET Core](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0-preview-9/)\r\n[ASP.NET Core](https://devblogs.microsoft.com/aspnet/asp-net-core-and-blazor-updates-in-net-core-3-0-preview-9/)\r\n\r\nPlease report any issues you find with 3.0.0 Preview 9, either responding to this issue, creating a new issue or creating a new issue in one of the following repos:\r\n\r\n* [aspnet/AspNetCore](https://github.com/aspnet/AspNetCore) - for ASP.NET Core questions\r\n* [aspnet/EntityFrameworkCore](https://github.com/aspnet/EntityFrameworkCore) - for Entity Framework Core questions\r\n* [dotnet/cli](https://github.com/dotnet/cli/issues) - for CLI tools and questions\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues) - for API issues and questions\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues) - for runtime issues\r\n* [dotnet/core-setup](https://github.com/dotnet/core-setup/issues) - for installer issues\r\n* [dotnet/winforms](https://github.com/dotnet/winforms/issues) - for Winforms issues\r\n* [dotnet/wpf](https://github.com/dotnet/wpf/issues) - for WPF issues\r\n* [nuget/home](https://github.com/nuget/home/issues) - for NuGet questions and issues","Url":"https://github.com/dotnet/announcements/issues/120","RelatedDescription":"Open issue \".NET Core 3.0 Preview 9\" (#120)"},{"Id":"480859726","IsPullRequest":false,"CreatedAt":"2019-08-14T19:54:26","Actor":"stephentoub","Number":"119","RawContent":null,"Title":"Consolidating .NET GitHub repos","State":"open","Body":"*To discuss these plans, please comment on the corresponding issue at https://github.com/dotnet/coreclr/issues/26175.*\r\n\r\nOver the next few months, we plan to consolidate several of the foundational repositories of .NET Core, including dotnet/coreclr and dotnet/corefx.\r\n\r\n.NET’s repository structure on GitHub was initially created in a fairly fine-grained manner, with the aim of enabling runtime agility and increased developer productivity.  However, this separation has led to a variety of complications for contributors and maintainers alike.  For example:\r\n- **Confusion about where issues should be opened.**  It’s not always clear in which repo an issue should be reported, complicated by the fact that some implementations actually span repositories (e.g. a type might be exposed through a reference assembly and have its tests in corefx but actually be implemented in System.Private.CoreLib in coreclr).\r\n- **Difficulty sharing source.**  System.Private.CoreLib is intricately connected to the rest of the runtime, and thus has lived with the runtime code.  That, however, means that although corefx has been intended as the place to share as much core library code as possible across any underlying runtime, we’ve needed to keep a significant body of code in System.Private.CoreLib, which then has meant it’s needed to be “mirrored” to each runtime repo (coreclr, corert, mono) that needs to consume it as source; similarly, corefx has similarly required access to much of that source, for example to use the same interop DllImports that are employed elsewhere in the runtimes.  The automatic mirror that shares this source needs to be maintained, and even when it has been, it’s often led to lag.  It’s also complicated developer processes, where to validate a change in one repo generally requires manually mirroring the code to other local repos in order to validate the change and ensure merging into one repo won’t break the others.\r\n- **PRs spanning multiple repos.**  Because the runtime, CoreLib, and the core libraries are all intricately linked, changing runtime behaviors, adding new APIs, or changing various build processes (e.g. improving static analysis) often requires multiple PRs carefully staged across time and multiple repos.  For example, to add a new method to a type like Dictionary<>, a developer must first make the source changes in her local coreclr repo and the test and reference assembly changes in her local corefx repo.  When satisfied with the fix, the developer must submit a PR to coreclr as well as a PR to corefx, the latter of which will fail.  Eventually the coreclr PR will be merged, and the changes will mirror to the other runtimes that also require the update.  Eventually those mirror PRs will be merged, and builds will be created containing the fix for each runtime.  At some point later those builds will be consumed into the corefx repo, after which point the original corefx PR can be re-validated and eventually merged.  That’s the best case; things get more complicated in situations where there are bidirectional dependencies.\r\n- **Building an installable runtime.** Self-hosting a custom built .NET requires intricate knowledge of how all the repos work and interact.  A developer can’t just clone a single repo, make a desired change, and easily produce an installer.\r\n- **Consistency.**  One goal we had for more fine-grained repos was to enable isolation and independence for teams working within each repo’s confines, but this has led to non-trivial duplication of effort on things like build systems and CI, and then the resulting lack of consistency as each system ends up diverging from the others.\r\n\r\nThe issues go beyond the runtime.  For example, the ASP.NET maintainers and community did a great job in the past year or so consolidating from ~55 repos down to ~5 repos, but that’s still more repos than is desirable, leading to similar issues as cited above for the runtime.  On top of that, these ASP.NET repositories are in the aspnet GitHub org, which adds an additional set of issues, for example:\r\n- **Complications moving issues between repos.**  If a developer opens an issue in aspnet/aspnetcore and it’s determined that the cause of the issue is actually in dotnet/corefx, there is no GitHub mechanism to enable easily moving that issue across the aspnet to dotnet organizational boundary.\r\n- **Permissions.** Each organization’s permissions end up needing to be managed and maintained separately.\r\n\r\nThe issues extend into tooling as well.  For example, we currently have multiple repositories that all logically make up the dotnet CLI, but actually creating a working installer spans multiple repos.\r\n\r\n### Plan\r\n\r\nTo address these issues, we’re planning to make some changes to our repository structure:\r\n- **dotnet/platform.**  We plan to combine dotnet/coreclr, dotnet/corefx, dotnet/corert, dotnet/core-setup, and the relevant portions of mono/mono into a new dotnet/platform repo.  Everything needed to build and produce the Microsoft.NETCore.App shared framework will be in this repo.  We will no longer suffer from the complications of source mirroring.  Features like changing runtime behavior or adding an API will no longer require a complicated dance across multiple repos.  Etc.\r\n- **dotnet/aspnetcore.**  We plan to move the existing aspnet/aspnetcore repository into the dotnet organization.  Along with that, we aim to combine a variety of the other aspnet repositories into aspnetcore, such as aspnet/blazor.  Whether repos like entityframeworkcore remain separate or combined remains an open question.  A goal is that, just as dotnet/platform will be responsible for the creation of Microsoft.NETCore.App, dotnet/aspnetcore will be responsible for the creation of Microsoft.AspNETCore.App.\r\n- **dotnet/cli.**  We plan to combine dotnet/toolset and dotnet/sdk into the dotnet/cli repo.\r\n\r\n### FAQ\r\n\r\n#### Why are we merging repos?\r\n\r\nWe believe we can significantly improve several aspects of .NET on GitHub by combining repos, benefiting both maintainers and contributors.  These improvements will manifest in a variety of ways, such as in better issue management, much easier models of contribution, and easier and faster ways to build and install the resulting bits.\r\n\r\n####  What will happen to the aspnet org?\r\n\r\nThe aspnet org as a separate entity is legacy and artificial.  In time we hope to absorb it into the dotnet org and sunset the aspnet org.\r\n\r\n#### Will the coreclr and corefx repos go away?\r\n\r\nWith the help of GitHub, we plan to migrate all issues from these repos to the new dotnet/platform repo, and then lock down creation of additional issues, such that the repos will no longer be used for issue management.  We will also inhibit the creation of PRs to the master branch, which will effectively become an archive for read-only review of history.  In this sense, these repos will be archived, and no active development will happen with them.  However, we plan to continue servicing previous .NET Core releases out of these repos, so the various release branches (e.g. release/2.1, release/3.0, etc.) will continue to see (limited) activity.\r\n\r\n#### Will the mono repo go away?\r\n\r\nNo. mono/mono contains the source for the full mono stack and will continue to live on happily.  We will simply be moving the managed source associated with System.Private.CoreLib and copying the relatively small amount of source that makes up the native mono runtime to dotnet/platform.  We may choose to then use some mirroring technology to keep the runtime copy in sync (this will, however, not suffer from the same mirroring issues we currently experience, as we would not be mirroring between two components required to build the same binaries), or we may choose to let them diverge and manually sync only those changes deemed relevant to both implementations.\r\n\r\n#### Will the corert repo go away?\r\n\r\nYes.  We plan to retire/archive the corert repo.  Some of the technology in the corert repo will be migrated to the master branch of dotnet/platform, where it will be productized as part of .NET.  Other portions of the corert repo will be migrated to feature branches of dotnet/platform, where the experimentation can continue.  In this way, we will use feature branches to continue experimenting with the corert technology, while making it easier to share portions with its shipping counterpart and also graduate functionality into master if/when it’s ready.\r\n\r\n#### Does this mean there will be a single repo for all of .NET?\r\n\r\nNo.  We will be reducing the number of repos that contribute to .NET, but currently we do not believe that going all the way down to one is the right answer.\r\n\r\n#### Doesn’t this mean that issue and PR tracking will now be overwhelming?\r\n\r\nIt is already the case that the vast majority of issues in a given repo are not relevant to any individual developer, and with several thousand open issues in each repo and on the order of a hundred open PRs in each, we already need systems (e.g. labels) to successfully manage issues and PRs.  As such, we don’t believe the merging will have a significant impact on this aspect of developer productivity.  If it turns out to have an unexpectedly large negative impact, we will work with the community to find ways to mitigate the problem.  However, there are already a multitude of successful open source projects on GitHub with at least an order of magnitude more issues.\r\n\r\n#### What will happen to existing issues?\r\n\r\nWith the help of GitHub functionality, we plan to migrate all issues from old repos (e.g. dotnet/coreclr, dotnet/corefx) to the new repos (e.g. dotnet/platform).  We may also use this as a forcing function to revisit stale issues and either close those that are no longer relevant or reinvigorate those that are demanding of more immediate attention.\r\n\r\n#### What about git history?\r\n\r\nIn general, we plan to keep history, such that history from each constituent repo will be a part of the new repo.  However, we have made some mistakes in the past (e.g. large binaries, multitudes of automated PRs for flowing bits and source between repos, etc.), and we plan to rewrite history to correct those mistakes wherever possible and impactful.  Some rough calculations suggest this could end up significantly reducing the size of the repos as well as the time it takes to clone, which should not only help developers approaching the project but also CI.  This will end up meaning that SHAs may be different in the new repo than they were in the old repo; as previously mentioned, however, any references to the old SHAs in the old repos will continue to work, as those repos will remain accessible.\r\n\r\n#### Will I still show up in the contributor list due to previous contributions?\r\n\r\nYes.  We plan to merge all such history.\r\n\r\n#### Will this break debugging with SourceLink?\r\n\r\nNo.  The existing repos will continue to be accessible, and commit SHAs there will remain unchanged.\r\n\r\n#### Might plans change?\r\n\r\nSure.  Part of the goal of posting this announcement is to hear from you, hear about additional benefits you're excited about, and hear about additional concerns we may not have considered.  We will include such ideas in our planning and course correct as necessary.\r\n\r\n## Discussion\r\n\r\nTo discuss these plans, please comment on the corresponding issue at https://github.com/dotnet/coreclr/issues/26175.\r\n","Url":"https://github.com/dotnet/announcements/issues/119","RelatedDescription":"Open issue \"Consolidating .NET GitHub repos\" (#119)"},{"Id":"470434872","IsPullRequest":false,"CreatedAt":"2019-07-19T16:54:02","Actor":"richlander","Number":"118","RawContent":null,"Title":".NET Core master branches have switched to \"5.0\"","State":"open","Body":"# .NET Core master branches have switched to \"5.0\"\r\n\r\nVarious .NET Core repos have switched their `master` branches to \"5.0\", and will use 3.x branches for 3.0 and 3.1 projects. This is very similar to how we approached 2.x and 3.0 projects. As context, `master` branches produced 3.0 builds for the entire period of the 2.2 project.\r\n\r\nAt present, this change is only relevant if you contribute to .NET Core repositories. Otherwise, we recommend that you wait for the 5.0 Preview releases before installing this new version.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/core #3059](https://github.com/dotnet/core/issues/3059)\r\n\r\n## Details\r\n\r\nThe following repos have moved their master branches to \"5.0\":\r\n\r\n- [dotnet/coreclr](https://github.com/dotnet/coreclr)\r\n- [dotnet/corefx](https://github.com/dotnet/corefx)\r\n- [dotnet/core-setup](https://github.com/dotnet/core-setup)\r\n\r\nYou can see that [5.0 .NET Core Runtime builds](https://github.com/dotnet/core-setup#daily-builds) are now being built and published at dotnet/core-setup.\r\n\r\nIn large part, we switched `master` to 5.0 to enable to the community to contribute changes. As the .NET Core 3.0 released has progressed, we've had to increase scrutiny on the changes we will accept. Now that we've permanently branched for 3.0, we can accept a much broader set of changes. Please consider that to be an open invitation!\r\n\r\nNotably, [dotnet/core-sdk](https://github.com/dotnet/core-sdk) is not yet producing 5.0 builds. We expect that the dotnet/core-sdk master branch will continue as a 3.0 branch for 2-3 months while we finish up the .NET Core 3.0 project.\r\n\r\nAt present, there is no developer experience for 5.0. We are waiting on the dotnet/core-sdk repo to switch to 5.0. Switching your project file to target `netcoreapp5.0` won't do anything useful. We'll update this issue when a 5.0 SDK comes available.","Url":"https://github.com/dotnet/announcements/issues/118","RelatedDescription":"Open issue \".NET Core master branches have switched to \"5.0\"\" (#118)"},{"Id":"465501070","IsPullRequest":false,"CreatedAt":"2019-07-08T23:25:31","Actor":"terrajobst","Number":"117","RawContent":null,"Title":"System.Text.Json usability study results","State":"open","Body":"We've performed a usability study on the new `System.Text.Json` APIs which will replace JSON.NET as the default JSON experience in .NET Core 3.0:\r\n\r\n* We focused on the primary \"getting started\" scenarios to validate that we picked the right type- and method names.\r\n* We simulated what we believe to be common error cases to validate that our exception messages are understandable and actionable.\r\n* Since we were short on time, we couldn't use the recruiting provided by the UX lab but instead brought in our own developers, which we recruited from the .NET engineering team\r\n\r\nThis has worked out well for us as we were able to get short term feedback which resulted in significant improvements to the overall API shape and usability. In the future, we should do more API focused UX studies 😊\r\n\r\n## Tasks\r\n\r\n| # | Description                            | Code\r\n|:--|:---------------------------------------|:-----\r\n| 1 | Serialize and pretty print             | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario1/Program.cs#L19-L31)\r\n| 2 | Deserialize with trailing comma        | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario2/Program.cs#L19-L25)\r\n| 3 | Deserialize with custom property names | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario3/Program.cs#L30-L45)\r\n| 4 | Read with DOM                          | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario4/Program.cs#L20-L35)\r\n| 5 | Pretty print an existing JSON file     | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario5/Program.cs#L26-L34)\r\n\r\n## Hypotheses\r\n\r\nWe expect developers to...\r\n\r\n| # | Description                                            | Result\r\n|:--|:-------------------------------------------------------|:---------------\r\n| 1 | ...assume the APIs are similar/identical to JSON.NET   |  Validated\r\n| 2 | ...complete tasks 1-4 successfully                     |  Validated\r\n| 3 | ...struggle/unable to complete the task 5, because it requires working with two different components which is very different from JSON.NET |  Invalidated\r\n| 4 | ...not look at documentation for most of their coding as IntelliSense is good enough |  Invalidated\r\n| 5 | ...be happy with the experience of using the API                                     |  Validated\r\n| 6 | ...plan on using `System.Text.Json` for their next JSON task                         |  Partially Validated\r\n\r\n##  Key Observations\r\n\r\n* Everyone completed scenarios #1-#3, 2 didn't complete #4, 6 didn't complete #5\r\n    - The reason was always \"out of time\". Every person who started a scenario successfully finished it.\r\n    - We feel this validates that we picked the right scope for a 60 minute study of people from various backgrounds\r\n* Overall people liked the new API\r\n    - Key value prop for most people was the fact that \"it's now built in\"\r\n    - Very few mentioned perf and the ones that did thought that it probably wouldn't make a difference in their scenarios.\r\n    - Most people said they would prefer `System.Text.Json` for new APIs, but would stick to JSON.NET in code that already uses it.\r\n    - **[Action]** None, this is in line with what we expected.\r\n* Virtually everyone tried to google for sample code in the documentation\r\n    - Everyone found our blog post and online documentation\r\n    - People new to .NET were confused that JSON.NET and `System.Text.Json` weren't the same thing\r\n    - Everyone complained that the current docs are lacking, especially sample code.\r\n    - **[Action]** Docs are work in progress. We plan on shipping with a fully documented API surface and sample code.\r\n* Virtually everyone found the key type relatively quickly\r\n    - Some people were confused when types were static, rather than something that one can new up\r\n    - **[Action]** None. This is by-design as we try to reduce the number of allocations.\r\n* Virtually everyone had trouble selecting the correct method on\r\n  `JsonSerializer`\r\n    - We chose a very complicated naming convention\r\n    - **[Action]** We simplified it by using names that people in the study told us were looking for.\r\n* Most of our error messages were well received because they told people what\r\n  the problem is & how they can fix them.\r\n    - One error message was unclear because we reported an unexpected character when we could have reported that we didn't expect a comment.\r\n    - **[Action]** We've reworded the error message.\r\n    - We had one error message that was generated by a lower layer and provided an action item that doesn't make sense when people receive it when using the higher layer component.\r\n    - **[Action]** We've reworded the error message to be more generic so it makes sense for both kind of consumers.\r\n* Virtually everyone used the new Roslyn completion feature which will also show\r\n  types from namespaces not imported yet.\r\n    - However, virtually nobody realized that they were doing it.\r\n    - This caused confusion when people found other APIs that happen to include Json in them, specifically the old data contract serialization.\r\n    - **[Action]** Talk to the Roslyn IDE team to see if this something more people will run into. This could prove to be especially problematic for technologies that share type names (e.g. `UserControl` in WinForms and WPF) and both are referenced by the project.\r\n* Optional parameters and `async`/`await` are usability cliffs\r\n    - Many were confused by optional parameters and tried to pass them in, even though they didn't have to.\r\n    - **[Action]** Talk to the Roslyn IDE team to see if we can visualize them better in VS.\r\n    - **[Action]** Try to avoid heavy use of optional parameters for mainline APIs.\r\n    - Async is a very steep cliff. People have no idea what to do in their code to make async work. While IntelliSense shows the usage by prefixing it with await, people didn't notice that.\r\n    - **[Action]** Unclear; this is a broader issue.\r\n* Virtually nobody used F1 to get help for APIs\r\n    - *Surprise*. I expected more people to use <kbd>F1</kbd>.\r\n* Virtually everyone used F12 to explore the API (\"metadata view\")\r\n    - *Surprise*. I expected most people to explore the type via the\r\n      IntelliSense completion\r\n* Nobody used Object Browser to explorer the APIs\r\n    - *Surprise*. I expected at least some people to.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/39304.","Url":"https://github.com/dotnet/announcements/issues/117","RelatedDescription":"Open issue \"System.Text.Json usability study results\" (#117)"},{"Id":"465034831","IsPullRequest":false,"CreatedAt":"2019-07-08T03:13:38","Actor":"leecow","Number":"116","RawContent":null,"Title":"Updates to releases.json (.NET Core release metadata)","State":"open","Body":"**The changes described in this issue will be live with the .NET Core July update on 7/9/2019.**\r\n\r\nThe releases.json files (e.g. [2.2 releases.json](https://raw.githubusercontent.com/dotnet/core/master/release-notes/2.2/releases.json)) are comprehensive metadata files which capture details of each .NET Core release. These files, along with the top level [releases-index.json](https://raw.githubusercontent.com/dotnet/core/master/release-notes/releases-index.json), are becoming increasingly important .NET Core release assets. These files, one for each major.minor channel, are relied upon by many to detect when updates for .NET Core are available, discover security update details and other uses.\r\n\r\nChanges are sometimes necessary, and the growing dependencies require that we treat compatibility of the schema with the utmost care. This announcement describes an addition to the releases.json schema.\r\n\r\n## SDK Versions and Visual Studio\r\n\r\nBecause of current .NET Core SDK product construction dependencies, there is a hard link between the Runtime, SDK, toolset (compilers, MSBuild, NuGet, and other components), and Visual Studio. Simplistically, this means that when anything updates, everything updates. The unfortunate result of this linking is that multiple versions of the SDK are released with each monthly update for each supported versions of Visual Studio. For example, the May Update for .NET Core 2.2 included the 2.2.5 runtime, 2.2.107 SDK for Visual Studio 2017 and 2.2.204 for Visual Studio 2019 and yet another pair of SDK versions for .NET Core 2.1. An example of this is the [2.2.5 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.5/2.2.5.md). \r\n\r\nThis is a confusing situation and we are working to mitigate the need to release multiple SDKs with .NET Core 3.0. The need for multiple SDK versions will persist for 2.1 LTS.\r\n\r\n## Adding the SDKS array\r\n\r\nTo appropriately model multiple SDKs per release, we are adding an SDKs array to releases.json, which will contain SDK objects. The top-level SDK object will represent the highest versioned SDK for a given update. Using the previous 2.2.5 update example, SDK 2.2.204 is in the top SDK object as well as duplicated in the SDKS array. All other applicable 2.2* SDK objects are included in the SDKS array. The SDK objects within the array will carry specific Visual Studio compatibility and version inclusion information to provide appropriate context.\r\n\r\nHere is an example of the new array based on the upcoming July update.\r\nAgain, this will be additive and the previous SDK object will include the highest SDK version for the release.\r\n\r\n```json\r\n{\r\n    \"sdk\": {\r\n        \"version\": \"2.2.301\",\r\n        \"version-display\": \"2.2.301\",\r\n        \"runtime-version\": \"2.2.6\",\r\n        \"vs-version\": \"16.1.3\",\r\n        \"vs-support\": \"Visual Studio 2019 (v16.1)\",\r\n        \"csharp-version\": \"7.3\",\r\n        \"fsharp-version\": \"4.5\",\r\n        \"vb-version\": null,\r\n        \"files\": []\r\n    },\r\n    \"sdks\": [\r\n        {\r\n            \"version\": \"2.2.301\",\r\n            \"version-display\": \"2.2.301\",\r\n            \"runtime-version\": \"2.2.6\",\r\n            \"vs-version\": \"16.1.3\",\r\n            \"vs-support\": \"Visual Studio 2019 (v16.1)\",\r\n            \"csharp-version\": \"7.3\",\r\n            \"fsharp-version\": \"4.5\",\r\n            \"vb-version\": null,\r\n            \"files\": []\r\n        },\r\n        {\r\n          \"version\": \"2.2.205\",\r\n          \"version-display\": \"2.2.205\",\r\n          \"runtime-version\": \"2.2.6\",\r\n          \"vs-version\": \"16.0.5\",\r\n          \"vs-support\": \"Visual Studio 2019 (v16.0)\",\r\n          \"csharp-version\": \"7.3\",\r\n          \"fsharp-version\": \"4.5\",\r\n          \"vb-version\": null,\r\n          \"files\": []\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\n## vs-version and the Runtime\r\n\r\nThe same version of the runtime is included in multiple versions of Visual Studio. To account for this, the vs-version field is being updated to a comma-delimited string. The string will represent all versions of Visual Studio which first include the particular .NET Core update. Again, an example from the upcoming July Update.\r\n\r\n```json\r\n\"runtime\": {\r\n        \"version\": \"2.2.6\",\r\n        \"version-display\": \"2.2.6\",\r\n        \"vs-version\": \"15.9.13, 16.1.3, 16.2.0\",\r\n```\r\n\r\nThe same `vs-versions` changes will be seen in the `aspnetcore-runtime` object.\r\n\r\n## Future Enhancements\r\n\r\nThere are other improvements to the schema which have been suggested by the community which we are evaluating. Generally, theses enhancements are additive and should not represent compatibility compromises for existing parsers and similar announcements will be published ahead of any changes.\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/116","RelatedDescription":"Open issue \"Updates to releases.json (.NET Core release metadata)\" (#116)"},{"Id":"444065225","IsPullRequest":false,"CreatedAt":"2019-05-14T18:38:23","Actor":"TaraOverfield","Number":"114","RawContent":null,"Title":"May 2019 .NET Updates","State":"open","Body":"# May 2019 .NET Updates\r\n\r\nThe following .NET updates were released in May 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.16 and .NET Core SDK 1.1.13( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.16/1.0.16.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.13/1.1.13.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.11 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.11/2.1.11.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.5 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.5/2.2.5.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2727](https://github.com/dotnet/core/issues/2727)\r\n\r\n## .NET Framework\r\n* [.NET Framework May 2019 Security and Quality Rollup - May 14, 2019](https://devblogs.microsoft.com/dotnet/net-framework-may-2019-security-and-quality-rollup/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/114","RelatedDescription":"Open issue \"May 2019 .NET Updates\" (#114)"},{"Id":"444027703","IsPullRequest":false,"CreatedAt":"2019-05-14T17:06:24","Actor":"blowdart","Number":"113","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and ASP.NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core and ASP.NET Core improperly handle web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core and ASP.NET Core application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core and ASP.NET Core web applications handle web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37651\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Private.Uri package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0, 4.3.1 | 4.3.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Nemanja Mijailovic](https://mijailovic.net/)\r\n\r\n### External Links\r\n\r\n[CVE-2019-0981](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0981)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/113","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability\" (#113)"},{"Id":"444027025","IsPullRequest":false,"CreatedAt":"2019-05-14T17:04:45","Actor":"blowdart","Number":"112","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and ASP.NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core and ASP.NET Core improperly handle web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core and ASP.NET Core application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core and ASP.NET Core web applications handle web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37650\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Private.Uri package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0, 4.3.1 | 4.3.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Nemanja Mijailovic](https://mijailovic.net/)\r\n\r\n### External Links\r\n\r\n[CVE-2019-0980](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0980)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/112","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability\" (#112)"},{"Id":"444026277","IsPullRequest":false,"CreatedAt":"2019-05-14T17:02:57","Actor":"blowdart","Number":"111","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core improperly process RegEx strings. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET application.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handle RegEx string processing.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37649\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Text.RegularExpressions package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Text.RegularExpressions.dll | 4.3.0 | 4.3.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0820](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0820)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/111","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability\" (#111)"},{"Id":"435015242","IsPullRequest":false,"CreatedAt":"2019-04-19T01:16:10","Actor":"MichaelSimons","Number":"110","RawContent":null,"Title":"New images for .NET Framework 4.8","State":"open","Body":"# New images for .NET Framework 4.8\r\n\r\nNew images have been released with support for [.NET Framework 4.8 runtime and SDK](https://devblogs.microsoft.com/dotnet/announcing-the-net-framework-4-8/).\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#271](https://github.com/Microsoft/dotnet-framework-docker/issues/271)\r\n\r\n## Details\r\n* Pull request: #270\r\n\r\nYou can access these new images with the following tags:\r\n* `mcr.microsoft.com/dotnet/framework/runtime:4.8`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.8`\r\n\r\nIn addition, the `latest` tag has been updated to refer to these new 4.8 images.\r\n\r\nCheck out the readme files for more information on the latest tags:\r\n* [Runtime](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.runtime.md)\r\n* [SDK](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.sdk.md)\r\n\r\nThe [3.5 SDK](https://github.com/Microsoft/dotnet-framework-docker/tree/master/3.5/sdk) images are intended to always contain the latest .NET Framework SDK and have also been updated to use the 4.8 SDK.","Url":"https://github.com/dotnet/announcements/issues/110","RelatedDescription":"Open issue \"New images for .NET Framework 4.8\" (#110)"},{"Id":"433297298","IsPullRequest":false,"CreatedAt":"2019-04-15T13:57:07","Actor":"MichaelSimons","Number":"109","RawContent":null,"Title":".NET Framework SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Framework SDK container images now contain the Visual Studio 2019 toolset\r\n.NET Framework SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add additional tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Framework SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Framework SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#269](https://github.com/Microsoft/dotnet-framework-docker/issues/269)\r\n\r\n## Details\r\nVisual Studio 2019 was released on April 2, 2019. We updated the .NET Framework SDK container images, on the same day, to include a new version of the .NET Framework SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag (e.g. mcr.microsoft.com/dotnet/framework/sdk:4.7.2-20190312-windowsservercore-ltsc2019).\r\n\r\nRelated pull request: [#252](https://github.com/Microsoft/dotnet-framework-docker/pull/252)","Url":"https://github.com/dotnet/announcements/issues/109","RelatedDescription":"Open issue \".NET Framework SDK container images now contain the Visual Studio 2019 toolset\" (#109)"},{"Id":"432735158","IsPullRequest":false,"CreatedAt":"2019-04-12T20:35:55","Actor":"KathleenDollard","Number":"108","RawContent":null,"Title":".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017","State":"open","Body":"# .NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\r\n\r\n.NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017. For example, 2.2.203 and 2.1.603 cause failures in Visual Studio 2017. To work on projects in Visual Studio 2017, use .NET Core SDK 2.2.1nn and 2.1.5nn, such as 2.2.106 and 2.1.506. You can install any combination of these SDKs side by side.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3124](https://github.com/dotnet/sdk/issues/3124)\r\n\r\n## Details\r\n\r\nYou can find the SDKs on you machine using the following at a command prompt:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2. Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nIf you downloaded the .NET Core SDK 2.2 between April 2 and April 12, 2019, the main [.NET downloads page](https://dotnet.microsoft.com/download/) included only 2.2.2nn. Starting April 12th, a new button marked \"Compatible with Visual Studio 2017\" is provided to target 2.2.1nn. If you downloaded 2.2 prior to this date, and you use Visual Studio 2017, install the compatible version.\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nThis problem most often occurs because you manually uninstall the 2.1.5nn version. Simply reinstall it from the [.NET Core 2.1 downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n## More information\r\n\r\nHere is the draft of an article we are preparing for .NET Core documentation:\r\n\r\n---\r\n\r\n## Solving Problems with .NET Core SDK Selection in Visual Studio\r\n\r\nYou may have .NET Core SDKs on your machine and still have problems with Visual Studio finding an appropriate one. This article explains why this happens and how you can fix your installation.\r\n\r\nWhen Visual Studio can't find an appropriate version of the .NET Core SDK, you'll receive an error message. This may appear in the Error pane as NETSDK1045:\r\n\r\n\"The current .NET SDK does not support targeting .NET Core 2...\"\r\n\r\nYou can check what .NET Core SDKs you have on your machine with the following command:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\nUnless you have a global.json file, when you use `dotnet` from the command line, the latest .NET Core SDK is used.\r\n\r\n> [TIP!] \r\n> Open a command prompt and try to build with `dotnet build`. If the command line build works, but Visual Studio doesn't suggestions in this article may help.\r\n\r\nThe last two digits of the .NET Core SDK version numbers are in the format are a patch number, which is represented by `nn` in this article because we will continue to service them to include the latest runtimes. To find out more, vist the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\n## Fixes for Common Problems\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2… Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.2.1nn. As an example, 2.2.106 would be a valid entry.\r\n\r\nIf you downloaded the .NET Core SDK 2.2 after April 2, 2019, version 2.2.2nn (such as 2.2.203) is listed first and is the highest version available. However, Visual Studio 2017 requires 2.2.1nn (such as 2.2.106). .NET Core SDK 2.2.2nn works with Visual Studio 2019. Visual Studio 2017 and Visual Studio 2019 can be installed side by side, but this requires both .NET Core SDK 2.2.1nn and .NET Core SDK 2.2.2nn to develop .NET Core 2.2 applications.\r\n\r\nTo download .NET Core SDK 2.2.2nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.1.5nn. As an example, 2.1.505 would be a valid entry. \r\n\r\nThis problem occurs of you manually uninstall the 2.1.5nn version.\r\n\r\nThe Visual Studio 2019 installation will not remove this file and Visual Studio 2017 will continue to work side by side.\r\n\r\nTo reinstall .NET Core SDK 2.1.5nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n### Visual Studio 2019 can't target .NET Core 3.0 Preview\r\n\r\nIf you receive this error message in Visual Studio 2019:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 3.0.100-preview... As an example, SDK 3.0.100-preview3-010431 would be a valid entry.\r\n\r\nTo install .NET Core SDK 3.0.1nn preview, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/3.0).\r\n\r\nIn Visual Studio, go to `Tools\\Options\\Projects and Solutions\\.NET Core` and check the box `Use Previews of the .NET Core SDK`.\r\n\r\n> [NOTE!]\r\n> This option will be moving to `Tools\\Options\\Environment` and renamed `Preview Features` in Visual Studio 2019 version 16.1 Preview 2.\r\n\r\nIf you are targeting .NET Core 3.0 preview, the [C# language version will be C# 8.0 Preview by default](https://docs.microsoft.com/en-us/visualstudio/releases/2019/release-notes#csharp-defaults) allowing you to use new C# features.\r\n\r\n## Understand the relationship between .NET Core SDKs and Visual Studio build tools\r\n\r\nVisual Studio has its own copies of tools like MSBuild, NuGet and the compilers. If you install the .NET Core workload, it also installs the .NET Core SDK which has versions of these tools and provides tasks and targets. These two versions are built from the same repositories, but target .NET Framework and .NET Core respectively. \r\n\r\nWhen you build a .NET Core project in Visual Studio, it uses Visual Studio's copy of MSBuild, but the tasks and targets are supplied from the selected version of the .NET Core SDK. \r\n\r\nWhen you upgrade the .NET Core SDK, you get new tasks and targets. These new tasks and targets may contain features that are not supported by older versions of MSBuild. Like all of the .NET Core SDK, MSBuild is backwards compatible. It is not forwards compatible.\r\n\r\nThis generally works well, but requires a guarantee that the tasks and targets work with the MSBuild version. To ensure this, each .NET Core SDK indicates an MSBuild version range that is used by Visual Studio to determine compatibility. Versions of the .NET Core SDK that have a higher MSBuild identifier than expected are ignored by Visual Studio. In the normal case, this simply means you use the tasks and targets that were installed with your version of Visual Studio.\r\n\r\nBecause of this, you may have many versions of the .NET Core SDK on your machine and Visual Studio still fail to find one it considers appropriate. This is compounded by a poor error message, which we cannot fully correct because it is from the old version of the .NET Core SDK on your machine. Confusion is also compounded by a complex non-linear release matrix that makes it difficult to predict the right .NET Core SDK to select. We are working to improve all this. \r\n\r\n## The Visual Studio / .NET Core SDK support matrix\r\n\r\nThe last two digits of the .NET Core SDK version number are a patch number, which are represented by a `nn` in this table. You can learn more about .NET Core SDK and .NET Core Runtime versioning at the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\nThe following table shows which Visual Studio versions and .NET Core SDKs are compatible and how they are acquired if you are working with Visual Studio. \r\n\r\n| .NET Core SDK | .NET Core Runtime | Compatible Visual Studio | MSBuild | Notes                                     |\r\n|---------------|-------------------|--------------------------|---------|-------------------------------------------|\r\n| 2.1.5nn       | 2.1               | 2017                     | 15      | Installed as part of VS 2017 version 15.9 |\r\n| 2.1.6nn       | 2.1               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 2.2.1nn       | 2.2               | 2017                     | 15      | Installed manually                        |\r\n| 2.2.2nn       | 2.2               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 3.0.1nn       | 3.0 (Preview)     | 2019                     | 16      | Installed manually                        |\r\n\r\nVisual Studio 2017 cannot work with .NET Core SDK 2.1.6nn or 2.2.2nn.\r\n\r\nTo find out more about removing older versions of the .NET Core Runtime and .NET Core SDK, visit the [How to remove the .NET Core Runtime and SDK page](https://docs.microsoft.com/en-us/dotnet/core/versions/remove-runtime-sdk-versions?tabs=macos).\r\n\r\nTo download the .NET Core SDK, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core).","Url":"https://github.com/dotnet/announcements/issues/108","RelatedDescription":"Open issue \".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\" (#108)"},{"Id":"432081093","IsPullRequest":false,"CreatedAt":"2019-04-11T15:16:43","Actor":"KathleenDollard","Number":"107","RawContent":null,"Title":"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below","State":"open","Body":"# Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\r\n\r\n.NET Core 3 takes the next step in the .NET Core tool strategy with local tools. As part of this process, starting in Preview 4 DotNetCliToolReference tools will be restricted to targeting .NET Core 2.2 and below. DotNetCliToolReference tools can be used in projects targeting .NET Core 3.0, but the tools themselves should target .NET Core 2.2 or below.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3115](https://github.com/dotnet/sdk/issues/3115)\r\n\r\n## Details\r\n\r\nThe suggested approach going forward is to to use [.NET Core Local Tools](https://aka.ms/local-tools) when you want a tool that is specific to a project or repository. At the same time we are removing the need to access local tools by the verbose `dotnet tool run <toolname>` that was present in earlier previews. You can now access local tools via `dotnet <toolname>`.\r\n\r\nDotNetCliToolReference tools have a flaw in how their dependencies are restored which can create [difficult to diagnose bugs when running these tools](https://github.com/NuGet/Home/issues/5067). This issue would occur much more frequently if targeting .NET Core 3.0 was allowed. Restricting tools to target only .NET Core 2.2 and below means existing scenarios to continue to work (as well as they previously did), regardless of the framework version targeted by the project or the current .NET Core SDK. \r\n\r\nThe new .NET Core tool strategy avoids this flaw in restore strategy and offers other benefits, like the ability to author one type of tool and install it in different ways depending on project and user needs.\r\n\r\nWe look forward to your feedback on .NET Core Local Tools, and on challenges you face moving away from DotNetCliToolReference tools. \r\n\r\n[dotnet/sdk #3057](https://github.com/dotnet/sdk/pull/3057)","Url":"https://github.com/dotnet/announcements/issues/107","RelatedDescription":"Open issue \"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\" (#107)"},{"Id":"431012407","IsPullRequest":false,"CreatedAt":"2019-04-09T14:51:18","Actor":"MichaelSimons","Number":"106","RawContent":null,"Title":".NET Core SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Core SDK container images now contain the Visual Studio 2019 toolset\r\n\r\n.NET Core SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add *additional* tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Core SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Core SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1042](https://github.com/dotnet/dotnet-docker/issues/1042)\r\n\r\n## Details\r\n\r\n[Visual Studio 2019](https://devblogs.microsoft.com/visualstudio/visual-studio-2019-code-faster-work-smarter-create-the-future/) was released on April 2, 2019. We updated the .NET Core SDK container images, on the same day, to include a new version of the .NET Core SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag:\r\n\r\n* 2.1: `mcr.microsoft.com/dotnet/core/sdk:2.1.505`\r\n* 2.2: `mcr.microsoft.com/dotnet/core/sdk:2.2.105`\r\n\r\nDetails:\r\n\r\n* [dotnet/dotnet-docker #1029](https://github.com/dotnet/dotnet-docker/pull/1029)\r\n* [2.1 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.602-SDK/2.1.602-SDK.md)\r\n* [2.2 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.202-SDK/2.2.202-SDK.md)\r\n\r\n## Known Breaking Changes for SDK images (VS 2017 to VS 2019 upgrade)\r\n\r\nThe following issues and breaks have been discovered.\r\n \r\n### Test Log File Name Change\r\n\r\nA change was introduced to the `dotnet test` command when a user-defined log file name is specified.  In the previous version the resulting log file would be named exactly as specified.  In the current version, the log file is named with a timestamp suffix automatically added to the user-defined name.  \r\n\r\nDetails:\r\n* [Microsoft/vstest #1603](https://github.com/Microsoft/vstest/issues/1603) \r\n* [Microsoft/vstest#1876](https://github.com/Microsoft/vstest/issues/1876)","Url":"https://github.com/dotnet/announcements/issues/106","RelatedDescription":"Open issue \".NET Core SDK container images now contain the Visual Studio 2019 toolset\" (#106)"},{"Id":"431003701","IsPullRequest":false,"CreatedAt":"2019-04-09T14:35:39","Actor":"MichaelSimons","Number":"105","RawContent":null,"Title":"Windows Server, version 1709 no longer Supported by .NET Framework","State":"open","Body":"# Windows Server, version 1709 no longer Supported by .NET Framework\r\n\r\nWindows Server, version 1709 is no longer supported. As a result, this version of Windows is no longer supported by the .NET Team and we will no longer produce .NET Framework container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Framework Docker images](https://hub.docker.com/_/microsoft-dotnet-framework)\r\n* [.NET Framework Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-framework)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-framework-docker #259](https://github.com/Microsoft/dotnet-framework-docker/issues/259)\r\n\r\n## Details\r\n\r\nDocker tags that contain `windowsservercore-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Windows Server and .NET Framework.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `4.7.1`, and  `4.7.2`. These are tags that are supported on multiple operating systems and versions, and do  not contain the operating system in them. As a result of no longer producing new images for Windows Server, version 1709, manifest tags no longer include entries for Windows 10, version 1709, and Windows Server,version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.17134-based image is incompatible with a 10.0.16299 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Windows Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Windows Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/framework/runtime:4.7.2-windowsservercore-1709` or `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-windowsservercore-1709`.","Url":"https://github.com/dotnet/announcements/issues/105","RelatedDescription":"Open issue \"Windows Server, version 1709 no longer Supported by .NET Framework\" (#105)"},{"Id":"430998341","IsPullRequest":false,"CreatedAt":"2019-04-09T14:25:57","Actor":"MichaelSimons","Number":"104","RawContent":null,"Title":"Nano Server 2016 and 1709 no longer Supported by .NET Core","State":"open","Body":"# Nano Server 2016 and 1709 no longer Supported by .NET Core\r\n\r\nNano Server 2016 and Nano Server, version 1709 are no longer supported. As a result, these versions of Windows are no longer supported by the .NET Team and we will no longer produce .NET Core container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Core Docker images](https://hub.docker.com/_/microsoft-dotnet-core)\r\n* [.NET Core Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-core)\r\n* [Products Reaching End of Support for 2018](https://support.microsoft.com/en-us/help/4043450/products-reaching-end-of-support-for-2018)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\nWe previously announced Nano Server 2016 going out of support in [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/). That post is still accurate.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1041](https://github.com/dotnet/dotnet-docker/issues/1041)\r\n\r\n## Details\r\n\r\nDocker tags that contain `nanoserver-sac2016` and `nanoserver-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Nano Server and .NET Core.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `2.1`, `2.1-sdk`, `2.2.1-runtime`. These are tags that are supported on multiple operating systems, and do not contain the operating system in them. As a result of no longer producing new images for Nano Server 2016 and Nano Server, version 1709, manifest tags no longer include entries for Nano Server 2016, Windows Server 2016, Windows 10, version 1607, Windows 10, version 1709, and Windows Server, version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.16299-based image is incompatible with a 10.0.14393 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Nano Server 2016 or Nano Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Nano Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-sac2016` or `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-1709`.\r\n\r\n### Nano Server Support\r\n\r\n.NET Core is supported on Nano Server, version 1803 and later. \r\n\r\n.NET Core 2.x and 3.0 images are available for all supported versions of Nano Server, version 1803 and later. This means that 2.x and 3.0 manifest tags can be used on Windows 10, version 1803+, and Windows Server, version 1803+. You can also use non-manifest tags for those versions, too, such as `2.2-nanoserver-1809`.\r\n\r\n.NET Core 1.x images are available for Nano Server, version 1809 and later. This means that 1.x manifest tags can be used on Windows 10, version 1809+, Windows Server, version 1809+ and Windows Server 2019. You can also use non-manifest tags for those versions, too, such as `1.1-nanoserver-1809` tag.","Url":"https://github.com/dotnet/announcements/issues/104","RelatedDescription":"Open issue \"Nano Server 2016 and 1709 no longer Supported by .NET Core\" (#104)"},{"Id":"420117627","IsPullRequest":false,"CreatedAt":"2019-03-12T17:35:16","Actor":"vivmishra","Number":"103","RawContent":null,"Title":"March 2019 .NET Updates","State":"open","Body":"# March 2019 .NET Updates\r\n\r\nThe following .NET updates were released in March 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework March 2019 Update - March 19, 2019](https://devblogs.microsoft.com/dotnet/net-framework-march-2019-update/)\r\n* [.NET Framework April 2, 2019 Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - April 2, 2019](https://devblogs.microsoft.com/dotnet/net-framework-april-2-2019-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.15 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.15/1.0.15.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.12/1.1.12.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.9 and .NET Core SDK 2.1.505 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.9/2.1.9.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.3 and .NET Core SDK 2.2.105 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.3/2.2.3.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2432](https://github.com/dotnet/core/issues/2432)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/103","RelatedDescription":"Open issue \"March 2019 .NET Updates\" (#103)"},{"Id":"415363751","IsPullRequest":false,"CreatedAt":"2019-02-27T22:49:51","Actor":"leecow","Number":"102","RawContent":null,"Title":"SDK Installers will remove previous patch versions","State":"open","Body":"The SDK Installers for Windows will upgrade patch versions in place within the same feature band. This will reduce the number of SDKs that are installed on programmer machines.\r\n\r\nFeature bands of the SDK are defined like 3.0.1nn. [Find out more about SDK version numbers](https://docs.microsoft.com/dotnet/core/versions/#versioning-details).\r\n\r\nThis means when .NET Core SDK 3.0.101 becomes available and is installed, .NET Core SDK 3.0.100 will be removed from the machine if it exists. When .NET Core SDK 3.0.200 becomes available and is installed on the same machine, .NET Core SDK versions like 3.0.101 will not be removed but stay side by side with 3.0.200.\r\n\r\nThis approach supports use of `global.json` which will roll forward across patch versions, but not feature bands of the SDK. Thus, upgrading via the SDK installer will not result in errors due to a missing SDK. Feature bands also align with side by side Visual Studio installations for those users that install SDKs for Visual Studio use. For example, Visual Studio 15.9 uses .NET Core SDK 2.2.500 but does not support .NET Core SDK 2.2.600.\r\n\r\nFind out how to [remove other .NET Core SDK versions here.](https://docs.microsoft.com/dotnet/core/versions/remove-runtime-sdk-versions).","Url":"https://github.com/dotnet/announcements/issues/102","RelatedDescription":"Open issue \"SDK Installers will remove previous patch versions\" (#102)"},{"Id":"410971363","IsPullRequest":false,"CreatedAt":"2019-02-15T22:24:40","Actor":"richlander","Number":"101","RawContent":null,"Title":"Publishing .NET Core images to Microsoft Container Registry (MCR)","State":"open","Body":"# Publishing .NET Core images to Microsoft Container Registry (MCR)\r\n\r\nMicrosoft teams are now publishing container images to the [Microsoft Container Registry](https://azure.microsoft.com/en-us/blog/microsoft-syndicates-container-catalog/). There are two primary reasons for this change:\r\n\r\n* Syndicate Microsoft-provided container images to multiple registries, like Docker Hub and Red Hat.\r\n* Use Microsoft Azure as a global CDN for delivering Microsoft-provided container images.\r\n\r\nYou will use and see MCR as a storage back-end for Microsoft images. The primary way you learn about Microsoft container images and tags will be through a registry, which for most users will continue to be Docker Hub. Most of the experience you've had browsing for .NET Core container images will continue unchanged with this new model. The Docker Hub URLs you've used for Microsoft repos will continue to work, and forward to updated locations on Docker Hub. Existing Docker Hub will images will be maintained as-is.\r\n\r\nSee [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/) for the most updated information on our use of MCR.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #935](https://github.com/dotnet/dotnet-docker/issues/935)\r\n\r\n## Starting with .NET Core nightly repo\r\n\r\nOn the .NET team, we started our [transition to MCR](https://github.com/dotnet/dotnet-docker/issues/745) with the .NET Core \"nightly\" repo. [dotnet-nightly](dockerhub.com/r/microsoft/dotnet-nightly) is now hosted on MCR and syndicated to Docker Hub. We started with the nightly repo in order to discover and fix any challenges we found with this new model before we move our higher-traffic primary container repository.\r\n\r\nWe will start publishing [dotnet](dockerhub.com/r/microsoft/dotnet) to MCR a bit later, in either February or March. This issue will be updated when that happens.\r\n\r\n## Repo Split\r\n\r\nThe [.NET Core repo](https://hub.docker.com/r/microsoft/dotnet) currently includes 4 major categories of tags: \r\n\r\n* `sdk`\r\n* `aspnetcore-runtime`\r\n* `runtime` \r\n* `runtime-deps`\r\n\r\nProviding all of the tags in one place has helped with discoverability but made for a repo with an enormous README that can be challenging to navigate and consume. It is large enough that we exceeded Docker Hub README limits and had to artificially make it smaller.\r\n\r\nGoing forward, we will provide a repo for each of the tag categories listed above. We'll also provide a \"product repo\" that will hierarchicaly group all of our repos together. This will satisfy discoverability needs so that it will be easy to find the tags you want.\r\n\r\nYou can already see this experience with [microsoft-dotnet-core-nightly](https://hub.docker.com/_/microsoft-dotnet-core-nightly). There are now multiple repos for our nightly builds:\r\n\r\n* [.NET Core Nightly product repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly)\r\n* [.NET Core SDK Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-sdk/)\r\n* [.NET Core ASP.NET Core Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-aspnet/)\r\n* [.NET Core Runtime Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime/)\r\n* [.NET Core Runtime-deps Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime-deps/)\r\n\r\nThe same split will exist for the non-nightly stable repo (currently hosted at  [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet)) when we start publishing it to MCR and syndicating it back to DockerHub.\r\n\r\n## Changes to registry URL\r\n\r\nThe biggest change is that your Dockerfiles need to be updated to point to the MCR registry in order get access to new .NET Core container tags. The same change is required for scripts or human operations that pull images via `docker pull`.\r\n\r\nThe following example shows the registry path, repo and tag for the .NET Core 2.2 \"Nightly\" SDK on MCR:\r\n\r\n```console\r\nmcr.microsoft.com/dotnet/core-nightly/sdk:2.2\r\n```\r\n\r\nAs comparison, the following repo and tag have been used to date for the .NET Core 2.2 \"Nightly\" SDK on Docker Hub:\r\n\r\n```console\r\nmicrosoft/dotnet-nightly:2.2-sdk\r\n```\r\n\r\nThe new repo URL is provided at each of the news repos. For example, the new .NET Core SDK \"nightly\" repo provides a box on the right where you can copy and paste the correct MCR-based repo syntax that you can use for `docker pull` or in `FROM` statements in your Dockerfiles.\r\n\r\n![image](https://user-images.githubusercontent.com/2608468/52811702-95c5eb80-304a-11e9-8de8-e6ea1f4b4d75.png)\r\n\r\n## Servicing existing Docker Hub tags\r\n\r\nWe will continue to service existing non-version-specific or floating tags on Docker Hub while the associated .NET Core version is supported. For example the `microsoft/dotnet:2.1-sdk` tag is a floating tag that will continue to be serviced for the lifetime of .NET Core 2.1. You can continue using floating tags without issue.\r\n\r\nIf you use non-floating tags, like `microsoft/dotnet:2.1.504-sdk-alpine`, then you will need to update your Dockerfile to use a new non-floating tag. No new non-floating tags will be published to `microsoft/dotnet` and `microsoft/dotnet-nightly` after we fully transition to MCR.\r\n\r\n.NET Core 3.0 Preview 3 and later will only be made available on MCR.\r\n\r\n## Microsoft is a Verified Publisher\r\n\r\nUntil now, Microsoft-provided container images were considered \"community images\". As part of this change, we are re-classifying Microsoft as a \"verified publisher\" on Docker Hub. This designation should make it clearer that .NET and other Microsoft-provided images are coming from a verified source. There clearly was that expectation previously, but Docker is now making that clearer in the Docker Hub pages they host for Microsoft.\r\n\r\nWe will provide official vulnerability scanning Microsoft-provided images as a second phase of this transition.","Url":"https://github.com/dotnet/announcements/issues/101","RelatedDescription":"Open issue \"Publishing .NET Core images to Microsoft Container Registry (MCR)\" (#101)"},{"Id":"410784442","IsPullRequest":false,"CreatedAt":"2019-02-15T14:06:29","Actor":"TaraOverfield","Number":"100","RawContent":null,"Title":"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809","State":"open","Body":"<strong><em>Final Update 2/19/19 @1:30 PM (PST)</em></strong><em>: This </em><em>advisory is now resolved with no action needed from Microsoft Customers. The issue was not applicable to any valid or supported configuration. There is no consequence for .NET 4.8 Preview customers. </em>\r\n\r\n<em>We strive to share timely information to protect our customer’s productivity, in this case, our finding was thankfully of no consequence for customers on supported configurations.</em>\r\n\r\n<del><em><strong>Update 2/15/19 @3:35 PM (PST)</strong></em><em>: As we continue our investigation, we are finding the issue to be restricted to a limited and isolated set of test-only systems that are using non-official versions of the .NET 4.8 Preview. As of 2/15/19 around 12:00 pm (PST) we further tightened our delivery mechanisms to ensure that the February .NET security updates are only deployed to their expected target systems.</em></del>\r\n\r\n<del><span>The </span><a href=\"https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/\" rel=\"nofollow\">February 2019 Security and Quality Rollup for Windows 10 update 1809</a><span> was released earlier this week. We have received multiple customer reports of issues when a customer has installed .NET Framework 4.8 Preview then installed the February security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>.</span> These reports are specific to only to the scenario when a customer has installed both .NET Framework 4.8 Preview and the February security update.</del>\r\n\r\n<del>We are actively working on investigating and addressing this issue. If you installed the February 2019 security update and have not seen any negative behavior, we recommend that you leave your system as-is but closely monitor it and ensure that you apply upcoming .NET Framework updates.</del>\r\n\r\n<del>We will continue to update this <a href=\"https://github.com/dotnet/announcements/issues/100\" rel=\"nofollow\">post</a> as we have new information.</del>\r\n<h2><del>Guidance</del></h2>\r\n<del>We are working on guidance and will update this post and as we have new information.</del>\r\n<h2><del>Workaround</del></h2>\r\n<del>There are no known workarounds at this time.</del>\r\n<h2><del>Symptoms</del></h2>\r\n<del>After installing .NET Framework 4.8 Preview then the February 2019 security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>, Visual Studios will crash with this error message:</del>\r\n<p class=\"xxxxxmsonormal\"><del><b><span style=\"font-size: 10.5pt;font-family: 'Segoe UI',sans-serif;color: black\">\"Exception has been thrown by the target of an invocation.\"</span></b></del></p>","Url":"https://github.com/dotnet/announcements/issues/100","RelatedDescription":"Open issue \"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809\" (#100)"},{"Id":"410455095","IsPullRequest":false,"CreatedAt":"2019-02-14T19:28:25","Actor":"richlander","Number":"99","RawContent":null,"Title":"Supporting new Alpine versions (for containers)","State":"open","Body":"# Supporting new Alpine versions (for containers)\r\n\r\n[Alpine 3.9](https://twitter.com/alpinelinux/status/1090416212822110214) was recently announced. Congratulations, Alpine team! On the .NET team, we are committed to supporting new Alpine versions quickly, and also need to define a policy for older versions. This policy only applies for the container images that we publish.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #933](https://github.com/dotnet/dotnet-docker/issues/933)\r\n\r\n## Policy\r\n\r\nWe intend to establish the following policy for supporting Alpine with .NET Core container images:\r\n\r\n* Support new Alpine versions within 60 days of release (hopefully much less).\r\n* Support n-1 Alpine versions for 3 months after we support a new Alpine version.\r\n\r\nNote: The [.NET Core support policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md) may be broader. This policy is specific to the container images we produce.\r\n\r\n## Plans\r\n\r\nWe're in the process of [fixing issues required to support Alpine 3.9](https://github.com/dotnet/dotnet-docker/issues/921). We expect that these issues will be resolved in February and that we'll be able to provide support for Alpine 3.9 in March.\r\n\r\nWe will produce Alpine 3.9 images for .NET Core 2.1, 2.2 and 3.0. Assuming we publish 3.9 images in March, we'll stop producing and supporting Alpine 3.7 and 3.8 images after June (2019).\r\n\r\n## Using Alpine-based .NET Core images\r\n\r\nWe produce a variety of Alpine-based images. You can either depend on a specific Alpine version, like with `microsoft/dotnet:2.2-sdk-alpine3.8` or opt to use the latest Alpine image we have to offer, like with `microsoft/dotnet:2.2-sdk-alpine`. Either are good choices. It is just a question of whether you want to make a conscious decision to move to later Alpine releases.\r\n\r\n## Support for ARM32?\r\n\r\nWe produce Alpine images for x64 (and ARM64, shortly). The [Alpine 3.9 announcement](https://twitter.com/alpinelinux/status/1090416212822110214) made mention of support for ARM32v7. We would like to enable .NET Core [Alpine-based images on ARM32](https://github.com/gliderlabs/docker-alpine/issues/463#issuecomment-460530395). We are patiently waiting for that to happen. If that's important to you, you should comment on that thread.","Url":"https://github.com/dotnet/announcements/issues/99","RelatedDescription":"Open issue \"Supporting new Alpine versions (for containers)\" (#99)"}],"ResultType":"GitHubIssue"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1181935602410897408","CreatedAt":"2019-10-09T14:13:01+00:00","UserScreenname":"dotnet","Text":"Hey folks. We'll be building out the WeatherApp from #dotNETConf; from the API and configuration, all the way to bu… https://t.co/zd90XbTV5c","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":38,"FavoriteCount":9,"RawContent":null},{"Id":"1181701006347735040","CreatedAt":"2019-10-08T22:40:49+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demos and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":12,"FavoriteCount":3,"RawContent":null},{"Id":"1181691179663949824","CreatedAt":"2019-10-08T22:01:46+00:00","UserScreenname":"dotnet","Text":"We're developing documentation for the new System.Text.Json serializer. See the first installment at… https://t.co/aHX6GMXqSz","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":80,"FavoriteCount":39,"RawContent":null},{"Id":"1181036647447580672","CreatedAt":"2019-10-07T02:40:54+00:00","UserScreenname":"dotnet","Text":"Nice! 😀 https://t.co/EzPOxi6RQM","Source":"<a href=\"http://twitter.com/#!/download/ipad\" rel=\"nofollow\">Twitter for iPad</a>","RetweetCount":30,"FavoriteCount":2,"RawContent":null},{"Id":"1179886895251148801","CreatedAt":"2019-10-03T22:32:11+00:00","UserScreenname":"dotnet","Text":"Thank you to all who participated in #dotNETConf! Please help us improve the event next year by providing your feed… https://t.co/pik2pOve9t","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":48,"FavoriteCount":22,"RawContent":null},{"Id":"1179802961238585344","CreatedAt":"2019-10-03T16:58:40+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demos and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":8,"FavoriteCount":2,"RawContent":null},{"Id":"1179116521290960902","CreatedAt":"2019-10-01T19:31:00+00:00","UserScreenname":"dotnet","Text":"ICYMI: @nopCommerce published a step-by-step guide on migrating to https://t.co/iOiV9r53NV Core. Check it out: https://t.co/oAy68vNBJw","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":45,"FavoriteCount":25,"RawContent":null}]}},"RunOn":"2019-10-11T05:30:35.893866Z","RunDurationInMilliseconds":14662}