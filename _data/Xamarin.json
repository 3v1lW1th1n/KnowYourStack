{"Data":{"Blog":{"FeedItems":[{"Title":"Xamarin.Forms 3.1: Improving the Little Things","PublishedOn":"2018-07-18T19:27:37+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Earlier this year, we surveyed Xamarin.Forms developers about the kinds of custom controls and extra platform code being written repeatedly that should be considered for support “in the box”. From...","Href":"https://blog.xamarin.com/xamarin-forms-3-1-improvments/","RawContent":null},{"Title":"Export To Application Insights With AppCenter Continuous Export","PublishedOn":"2018-07-10T03:35:38+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Five-star mobile apps have one special feature: they don’t let go of their users. This can be achieved by understanding your app, the app’s users, and how these users interact with your app. The deep...","Href":"https://blog.xamarin.com/appcenter-continuous-export-application-insights/","RawContent":null},{"Title":"The Xamarin Show: Exploring Awesome Xamarin & Visual Studio Features","PublishedOn":"2018-07-05T18:50:37+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Each week on The Xamarin Show we explore the latest and greatest in Xamarin development by looking at new features built into Visual Studio, build native cross-platform user interfaces with...","Href":"https://blog.xamarin.com/xamarin-show-ux-xamarinforms-apis-xamarin-essentials/","RawContent":null},{"Title":"Xamarin Podcast: What’s New in Visual Studio 2017, Xamarin.Forms, and the Android designer","PublishedOn":"2018-07-02T19:36:48+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In this episode of the Xamarin Podcast, Pierce Boggan and James Montemagno discuss the latest &#038; greatest in mobile .NET development, including Xamarin.Forms 3.0 and 3.1, Visual Studio 2017...","Href":"https://blog.xamarin.com/xamarin-podcast-vs2017-xamarinforms-android-designer/","RawContent":null},{"Title":"Use MSBuild to Define Advanced Android VersionCode","PublishedOn":"2018-06-28T16:20:34+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"With the introduction of Xamarin.Android v7.2, two new MSBuild properties were also introduced in order to make maintaining Android VersionCode for Android apps even easier: AndroidVersionCodePattern...","Href":"https://blog.xamarin.com/advanced-android-versioncode/","RawContent":null},{"Title":"What’s New In the Xamarin Android Designer","PublishedOn":"2018-06-25T20:10:38+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Backed by your feedback, our team has been able to improve the Xamarin Android Designer significantly since it&#8217;s initial release a few years back. Now, we have a ton of new and exciting work...","Href":"https://blog.xamarin.com/future-xamarin-android-designer/","RawContent":null},{"Title":"Getting Android Apps Ready for Google Play’s Target API Level Requirements","PublishedOn":"2018-06-21T18:46:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Developing Android applications is a unique experience, as it often involves taking advantage of the latest capabilities of Android while still providing backward compatibility to older Android...","Href":"https://blog.xamarin.com/android-apps-google-play-target-api-level-requirements/","RawContent":null},{"Title":"Supporting iOS 11 and iPhone X in Xamarin.iOS Apps","PublishedOn":"2018-06-18T19:18:01+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Apple has indicated that starting in July 2018 all new apps and app updates submitted to the App Store must be built with the iOS 11 SDK and support the iPhone X Super Retina display. The following...","Href":"https://blog.xamarin.com/supporting-ios-11-iphone-x-xamarin-apps/","RawContent":null},{"Title":"More Cross-Platform APIs with Xamarin.Essentials Latest Preview","PublishedOn":"2018-06-14T19:11:55+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We announced Xamarin.Essentials, a core set of cross-platform APIs to help developers build native apps, at Microsoft Build 2018. Xamarin.Essentials gives developers access to over thirty...","Href":"https://blog.xamarin.com/cross-platform-apis-xamarin-essentials-latest-preview/","RawContent":null},{"Title":"Use MongoDB With Your Xamarin Apps","PublishedOn":"2018-06-12T20:01:43+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"One of the most important decisions that you&#8217;ll make when designing an app is what type of database to use. Not too long ago, the choice was limited to relational databases like SQL server....","Href":"https://blog.xamarin.com/write-apps-using-mongodb-xamarin/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"8013645366","Type":"PullRequestEvent","CreatedAt":"2018-07-25T01:35:11","Actor":"atsushieno","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1997","RelatedDescription":"Opened pull request \"[experimental] dim+remove armeabi\" (#1997) at xamarin/xamarin-android","RelatedBody":"Since https://github.com/xamarin/xamarin-android/pull/1939 fails JVM tests but now with this branch they pass (locally) ..."},{"Id":"8012149784","Type":"IssuesEvent","CreatedAt":"2018-07-24T19:01:10","Actor":"Fergroening","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1996","RelatedDescription":"Opened issue \"Xamarin.Android Configuration\" (#1996) at xamarin/xamarin-android","RelatedBody":"Hi Everyone \r\n\r\nI have a Issue with my Xamarin, I'm New in this type of project, \r\n\r\nI create a new blank project, and open AXML to edit, my editor open in red and shows the following Photo \r\n\r\nCan you Help me \r\n\r\nSorry form myu bad english \r\n\r\n\r\n\r\n\r\n\r\n![image](https://user-images.githubusercontent.com/41643166/43160143-9bf994b6-8f41-11e8-83da-3c52d749fd99.png)\r\n"},{"Id":"8011249741","Type":"PullRequestEvent","CreatedAt":"2018-07-24T16:12:35","Actor":"atsushieno","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1995","RelatedDescription":"Opened pull request \"Remove armeabi from build.\" (#1995) at xamarin/xamarin-android","RelatedBody":"Starting with Android NDK r17, armeabi is *removed*, meaning that we\r\ncannot build anything with armeabi anymore.\r\n\r\nseealso: https://github.com/xamarin/java.interop/pull/346"},{"Id":"8009337376","Type":"IssuesEvent","CreatedAt":"2018-07-24T10:44:16","Actor":"amoscatelli","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1994","RelatedDescription":"Opened issue \"Deserialization error when integrating soap services with polymorphism\" (#1994) at xamarin/xamarin-android","RelatedBody":"I am integrating a SOAP Service in Xamarin Forms.\r\n**Switching to REST services is not an answer/option (just to be clear in advance, sorry).**\r\n\r\nI created the client from wsdl using svcutil.exe, most of services works correctly on every platform but something strange happens when I deserialize a collection of entities with different types.\r\n\r\nLet type B extends type A.\r\nLet the service returns a Collection of A.\r\n\r\nBoth attributes from B or A are received correctly in Android at message level (a IClientMessageInspector can print the whole correct soap body returned by the backend).\r\nAfter the body is deserialized and returned from the client, the object has only attributes deserialized for the 'base' A class.\r\n\r\nThe same happens if the service declare as return type a Collection of B.\r\nOnly A attributes are deserialized.\r\nB attributes are null and Specified attributes are false.\r\n\r\nIn both cases the types are inferred correctly, this is not an issue of type, it is an issue related to attributes only. Items returned can indeed be of B type.\r\n\r\nIs this a Mono issue ?\r\nPlease help."},{"Id":"8007220502","Type":"PullRequestEvent","CreatedAt":"2018-07-24T01:05:19","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1993","RelatedDescription":"Merged pull request \"[build] `make dist`-compatible log packages\" (#1993) at xamarin/xamarin-android","RelatedBody":"The \"log pakages\" produced by `make package-build-status` (a2a970f5)\r\nand `make package-test-errors` (0435a91f) have one usability problem:\r\nthey aren't compatible with [`make dist`][make-dist].\r\n\r\nSpecifically, `make dist`-style packages are packages which have a\r\nroot directory that is the same as the basename of the package name.\r\nFor example, if a package is named `foo.zip`, then the contents of\r\n`foo.zip` would all be within a `foo` directory.\r\n\r\nAddiotionally, `make dist`-style files usually have a \"version number\"\r\nof some form encoded in the filename, with `foo-1.zip` having all\r\nfiles within it nested under the `foo-1` directory.\r\n\r\nThis has two wonderful benefits:\r\n\r\n 1. When downloading such files, they won't \"collide\" with each other,\r\n    because they have unique values within the filename.\r\n\r\n 2. When extracting such files, the extracted contents won't collide\r\n    with each other, as they're extracted into unique \"toplevel\" dirs.\r\n\r\nCompare to e.g. `make package-build-status`, which creates a\r\n`build-status-$(GIT_COMMIT).zip` file (thus fulfilling benefit (1)),\r\nbut when you *extract* `build-status-$(GIT_COMMIT).zip`, it extracts\r\n\"on top of\" a previous extraction:\r\n\r\n\t$ unzip build-status-0636fcc.zip\r\n\tArchive:  build-status-0636fcc.zip\r\n\t  inflating: Configuration.OperatingSystem.props\r\n\t  inflating: bin/BuildDebug/msbuild-20180716T144550-prepare-deps.binlog\r\n\t...\r\n\r\n\t$ unzip build-status-0d81a6b7.zip\r\n\tArchive:  build-status-0d81a6b7.zip\r\n\treplace Configuration.OperatingSystem.props? [y]es, [n]o, [A]ll, [N]one, [r]ename:\r\n\t# ARGH!\r\n\r\nThis Is Madness™!\r\n\r\nUpdate the `make package-build-status` and `make package-test-errors`\r\ntargets so that the files they produce are consistent with\r\n`make dist` convention, e.g. `make package-build-status` will create a\r\nfile named `xa-build-status-vVERSION_OS-OS_ARCH_BRANCH_HASH.zip` --\r\nwhich is consistent with the `make package-oss` filename -- and the\r\n*contents* of `xa-build-status-vVERSION_OS-OS_ARCH_BRANCH_HASH.zip`\r\nare within a `xa-build-status-vVERSION_OS-OS_ARCH_BRANCH_HASH` path.\r\nThis allows these files to be extracted without overwriting previous\r\nextractions.\r\n\r\nSimilarly, `make package-test-errors` will now create a file named\r\n`xa-test-errors-vVERSION_OS-OS_ARCH_BRANCH_HASH.zip`.\r\n\r\n[make-dist]: https://www.gnu.org/prep/standards/html_node/Standard-Targets.html"},{"Id":"8005854855","Type":"PullRequestEvent","CreatedAt":"2018-07-23T19:10:05","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1993","RelatedDescription":"Opened pull request \"[build] `make dist`-compatible log packages\" (#1993) at xamarin/xamarin-android","RelatedBody":"The \"log pakages\" produced by `make package-build-status` (a2a970f5)\r\nand `make package-test-errors` (0435a91f) have one usability problem:\r\nthey aren't compatible with [`make dist`][make-dist].\r\n\r\nSpecifically, `make dist`-style packages are packages which have a\r\nroot directory that is the same as the basename of the package name.\r\nFor example, if a package is named `foo.zip`, then the contents of\r\n`foo.zip` would all be within a `foo` directory.\r\n\r\nAddiotionally, `make dist`-style files usually have a \"version number\"\r\nof some form encoded in the filename, with `foo-1.zip` having all\r\nfiles within it nested under the `foo-1` directory.\r\n\r\nThis has two wonderful benefits:\r\n\r\n 1. When downloading such files, they won't \"collide\" with each other,\r\n    because they have unique values within the filename.\r\n\r\n 2. When extracting such files, the extracted contents won't collide\r\n    with each other, as they're extracted into unique \"toplevel\" dirs.\r\n\r\nCompare to e.g. `make package-build-status`, which creates a\r\n`build-status-$(GIT_COMMIT).zip` file (thus fulfilling benefit (1)),\r\nbut when you *extract* `build-status-$(GIT_COMMIT).zip`, it extracts\r\n\"on top of\" a previous extraction:\r\n\r\n\t$ unzip build-status-0636fcc.zip\r\n\tArchive:  build-status-0636fcc.zip\r\n\t  inflating: Configuration.OperatingSystem.props\r\n\t  inflating: bin/BuildDebug/msbuild-20180716T144550-prepare-deps.binlog\r\n\t...\r\n\r\n\t$ unzip build-status-0d81a6b7.zip\r\n\tArchive:  build-status-0d81a6b7.zip\r\n\treplace Configuration.OperatingSystem.props? [y]es, [n]o, [A]ll, [N]one, [r]ename:\r\n\t# ARGH!\r\n\r\nThis Is Madness™!\r\n\r\nUpdate the `make package-build-status` and `make package-test-errors`\r\ntargets so that the files they produce are consistent with\r\n`make dist` convention, e.g. `make package-build-status` will create a\r\nfile named `xa-build-status-vVERSION_OS-OS_ARCH_BRANCH_HASH.zip` --\r\nwhich is consistent with the `make package-oss` filename -- and the\r\n*contents* of `xa-build-status-vVERSION_OS-OS_ARCH_BRANCH_HASH.zip`\r\nare within a `xa-build-status-vVERSION_OS-OS_ARCH_BRANCH_HASH` path.\r\nThis allows these files to be extracted without overwriting previous\r\nextractions.\r\n\r\nSimilarly, `make package-test-errors` will now create a file named\r\n`xa-test-errors-vVERSION_OS-OS_ARCH_BRANCH_HASH.zip`.\r\n\r\n[make-dist]: https://www.gnu.org/prep/standards/html_node/Standard-Targets.html"},{"Id":"8005216356","Type":"PullRequestEvent","CreatedAt":"2018-07-23T17:04:29","Actor":"atsushieno","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1992","RelatedDescription":"Opened pull request \"[msbuild/tests] add test for custom framework setup via NuGet package.\" (#1992) at xamarin/xamarin-android","RelatedBody":"It proves incomplete but kind of working solution for https://github.com/xamarin/xamarin-android/issues/1880 .\r\n\r\nThe original idea (and what once worked) was to only extend an MSBuild\r\nproperty for ResolveSdks task. But after a couple of changes it does not\r\nwork anymore, as there had been a handful of SDK resolution changes.\r\n\r\nSince it's not really safe to depend on those properties, we should rather\r\nprovide a complete set of framework assemblies (which means, packages\r\ncontaining both v1.0 and latest) to get app still build."},{"Id":"8002743128","Type":"PullRequestEvent","CreatedAt":"2018-07-23T09:30:48","Actor":"dellis1972","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1991","RelatedDescription":"Opened pull request \"[Xamarin.Android.Build.Tasks] Set the timestamps on the `resources.cache` files.\" (#1991) at xamarin/xamarin-android","RelatedBody":"We currently do not force the setting of the write and access\r\ntimestamps when saving the resource.caches files. We have\r\nrecently (90e31550) been reviewing and adding this in other\r\nparts of the build system. This is to ensure that when we do\r\nmodify a file it has the latest timestamp.\r\n\r\nThis commit adds support for calling\r\n\r\n\tMonoAndroidHelper.SetLastAccessAndWriteTimeUtc ()\r\n\r\nwhen we save the XDocument cache files."},{"Id":"8001497949","Type":"IssuesEvent","CreatedAt":"2018-07-23T03:27:11","Actor":"divega","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1990","RelatedDescription":"Opened issue \"Application using EF Core 2.1.1 with SdkOnly linking crashes due to duplicate values returned by GetMethod\" (#1990) at xamarin/xamarin-android","RelatedBody":"This was previously mentioned in https://github.com/xamarin/xamarin-android/issues/1813#issuecomment-400888600 and reported by multiple customers in the EF Core repo at https://github.com/aspnet/EntityFrameworkCore/issues/12460. I am copying some details in this issue but feel free to find more details and reach out to customers hitting it in those links.\r\n\r\nI am forwarding the issue to Xamarin because the only possible root cause seems to be that reflection is returning the same MethodInfo for different overloads of a method (which doesn't seem to make much sense) and given we don't have the Xamarin expertise we need someone to investigate if this is a bug or otherwise give us advice if we are doing something wrong. \r\n\r\nIn summary, the code that causes the exception is doing something like this:\r\n\r\n``` c#\r\n    var supportedMethods = new Dictionary<MethodInfo, string>\r\n        {\r\n            { typeof(Math).GetMethod(nameof(Math.Abs), new[] { typeof(double) }), \"abs\" },\r\n            { typeof(Math).GetMethod(nameof(Math.Abs), new[] { typeof(float) }), \"abs\" },\r\n            { typeof(Math).GetMethod(nameof(Math.Abs), new[] { typeof(int) }), \"abs\" },\r\n            { typeof(Math).GetMethod(nameof(Math.Abs), new[] { typeof(long) }), \"abs\" },\r\n            { typeof(Math).GetMethod(nameof(Math.Abs), new[] { typeof(sbyte) }), \"abs\" },\r\n            { typeof(Math).GetMethod(nameof(Math.Abs), new[] { typeof(short) }), \"abs\" },...\r\n```\r\n\r\nThat causes `System.ArgumentException: An item with the same key has already been added. Key: Int32 Abs(Int32)`, which seems to indicate that the MethodInfo returned for Math.Abs(int32) is the same as either Math.Abs(double) or Math.Abs(float), which doesn't make much sense.\r\n\r\nWe already suggested adding Math.Abs to LinkDescription.xml (in case GetMethod is just returning null because the actual code was removed by the linker) but customers report that this workaround does not help.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Create a project that uses Microsoft.EntityFrameworkCore.SqlLite. A repro project was provided at https://github.com/aspnet/EntityFrameworkCore/issues/12460#issuecomment-403451697. \r\n2. Build the project and link it with <AndroidLinkMode>SdkOnly</AndroidLinkMode>\r\n3. Run the application\r\n\r\n### Expected Behavior\r\nApplication runs.\r\n\r\n### Actual Behavior\r\nApplication crashes with:\r\n\r\n```\r\nException message:\r\nStack trace:\r\n06-25 16:48:31.244  9279  9279 I MonoDroid: UNHANDLED EXCEPTION:\r\n06-25 16:48:31.257  9279  9279 I MonoDroid: System.TypeInitializationException: The type initializer for 'Microsoft.EntityFrameworkCore.Sqlite.Query.ExpressionTranslators.Internal.SqliteMathTranslator' threw an exception. ---> System.ArgumentException: An item with the same key has already been added. Key: Int32 Abs(Int32)\r\n06-25 16:48:31.257  9279  9279 I MonoDroid:   at System.Collections.Generic.Dictionary`2[TKey,TValue].TryInsert (TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior) <0xceeb8b14 + 0x0045c> in <c099d544051e40b89a67a87a43581f01>:0\r\n06-25 16:48:31.257  9279  9279 I MonoDroid:   at System.Collections.Generic.Dictionary`2[TKey,TValue].Add (TKey key, TValue value) <0xceeb7fd0 + 0x00013> in <c099d544051e40b89a67a87a43581f01>:0\r\n06-25 16:48:31.257  9279  9279 I MonoDroid:   at Microsoft.EntityFrameworkCore.Sqlite.Query.ExpressionTranslators.Internal.SqliteMathTranslator..cctor () <0xcd753afc + 0x00207> in <135a24207446461281bfc2c90f71e590>:0\r\n06-25 16:48:31.257  9279  9279 I MonoDroid:    --- End of inner exception stack trace ---\r\n06-25 16:48:31.257  9279  9279 I MonoDroid:   at Microsoft.EntityFrameworkCore.Query.ExpressionTranslators.RelationalCompositeMethodCallTranslator+<>c__DisplayClass5_0.<Translate>b__0 (Microsoft.EntityFrameworkCore.Query.ExpressionTranslators.IMethodCallTranslator translator) <0xcd61f2dc + 0x00044> in <b4c4c93ef655443999d2211e0c2e61cd>:0\r\n06-25 16:48:31.257  9279  9279 I MonoDroid:   at System.Linq.Enumerable+SelectListIterator`2[TSource,TResult].MoveNext () <0xce42d194 + 0x000ff> in <dd44b4af145c4bd6a0a60da9e4b5131f>:0\r\n06-25 16:48:31.257  9279  9279 I MonoDroid:   at System.Linq.Enumerable.TryGetFirst[TSource] (System.Collections.Generic.IEnumerable`1[T] source, System.Func`2[T,TResult] predicate, System.Boolean& found) <0xce415f5c + 0x000f3> in <dd44b4af145c4bd6a0a60da9e4b5131f>:0\r\n06-25 16:48:31.257  9279  9279 I MonoDroid:   at System.Linq.Enumerable.FirstOrDefault[TSource] (System.Collections.Generic.IEnumerable`1[T] source, System.Func`2[T,TResult] predicate) <0xce415c6c + 0x0003f> in <dd44b4af145c4bd6a0a60da9e4b5131f>:0\r\n06-25 16:48:31.257  9279  9279 I MonoDroid:   at Microsoft.EntityFrameworkCore.Query.ExpressionTranslators.RelationalCompositeMethodCallTranslator.Translate (System.Linq.Expressions.MethodCallExpression methodCallExpression, Microsoft.EntityFrameworkCore.Metadata.IModel model) <0xcd61ef6c + 0x002bf> in <b4c4c93ef655443999d2211e0c2e61cd>:0\r\n06-25 16:48:31.257  9279  9279 I MonoDroid:   at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor.VisitMethodCall (System.Linq.Expressions.MethodCallExpression methodCallExpression) <0xcd614aac + 0x00393> in <b4c4c93ef655443999d2211e0c2e61cd>:0\r\n06-25 16:48:31.257  9279  9279 I MonoDroid:   at System.Linq.Expressions.MethodCallExpression.Accept (System.Linq.Expressions.ExpressionVisitor visitor) <0xce4a5000 + 0x0001b> in <dd44b4af145c4bd6a0a60da9e4b5131f>:0\r\n06-25 16:48:31.257  9279  9279 I MonoDroid:   at System.Linq.Expressions.ExpressionVisitor.Visit (System.Linq.Expressions.Expression node) <0xce49f890 + 0x00027> in <dd44b4af145c4bd6a0a60da9e4b5131f>:0\r\n06-25 16:48:31.257  9279  9279 I MonoDroid:   at Remotion.Linq.Parsing.ThrowingExpressionVisitor.Visit (System.Linq.Expressions.Expression expression) <0xce62b070 + 0x0006b> in <1081ac98085b4c0b96c42f3872e13655>:0\r\n06-25 16:48:31.257  9279  9279 I MonoDroid:   at Microsoft.EntityFrameworkCore.Query.ExpressionVisitors.SqlTranslatingExpressionVisitor.Visit (System.Linq.Expressions.Expression expression) <0xcd613b00 + 0x0010f> in <b4c4c93ef655443999d2211e0c2e61cd>:0\r\n06-25 16:48:31.257  9279  9279 I MonoDroid:   at Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.VisitWhereClause (Remotion.Linq.Clauses.WhereClause whereClause, Remotion.Linq.QueryModel queryModel, System.Int32 index) <0xcd5f7064 + 0x000ef> in <b4c4c93ef655443999d2211e0c2e61cd>:0\r\n06-25 16:48:31.257  9279  9279 I MonoDroid:   at Remotion.Linq.Clauses.WhereClause.Accept (Remotion.Linq.IQueryModelVisitor visitor, Remotion.Linq.QueryModel queryModel, System.Int32 index) <0xce63c7cc + 0x00093> in <1081ac98085b4c0b96c42f3872e13655>:0\r\n06-25 16:48:31.257  9279  9279 I MonoDroid:   at Remotion.Linq.QueryModelVisitorBase.VisitBodyClauses (System.Collections.ObjectModel.ObservableCollection`1[T] bodyClauses, Remotion.Linq.QueryModel queryModel) <0xce62e964 + 0x00167> in <1081ac98085b4c0b96c42f3872e13655>:0\r\n06-25 16:48:31.257  9279  9279 I MonoDroid:   at Remotion.Linq.QueryModelVisitorBase.VisitQueryModel (Remotion.Linq.QueryModel queryModel) <0xce62e468 + 0x0006b> in <1081ac98085b4c0b96c42f3872e13655>:0\r\n06-25 16:48:31.257  9279  9279 I MonoDroid:   at Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.VisitQueryModel (Remotion.Linq.QueryModel queryModel) <0xce6e2e08 + 0x00047> in <1a963d6bdb8d435e8dcdc28935e050ad>:0\r\n06-25 16:48:31.257  9279  9279 I MonoDroid:   at Microsoft.EntityFrameworkCore.Query.RelationalQueryModelVisitor.VisitQueryModel (Remotion.Linq.QueryModel queryModel) <0xcd5f5da0 + 0x0005f> in <b4c4c93ef655443999d2211e0c2e61cd>:0\r\n06-25 16:48:31.257  9279  9279 I MonoDroid:   at Microsoft.EntityFrameworkCore.Query.EntityQueryModelVisitor.CreateQueryExecutor[TResult] (Remotion.Linq.QueryModel queryModel) <0xce6e0fcc + 0x00177> in <1a963d6bdb8d435e8dcdc28935e050ad>:0\r\n06-25 16:48:31.257  9279  9279 I MonoDroid:   at Microsoft.EntityFrameworkCore.Storage.Database.CompileQuery[TResult] (Remotion.Linq.QueryModel queryModel) <0xce6c8964 + 0x000bb> in <1a963d6bdb8d435e8dcdc28935e050ad>:0\r\n06-25 16:48:31.257  9279  9279 I MonoDroid:   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.CompileQueryCore[TResult] (System.Linq.Expressions.Expression query, Microsoft.EntityFrameworkCore.Query.Internal.IQueryModelGenerator queryModelGenerator, Microsoft.EntityFrameworkCore.Storage.IDatabase database, Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1[TLoggerCategory] logger, System.Type contextType) <0xce70f75c + 0x0028f> in <1a963d6bdb8d435e8dcdc28935e050ad>:0\r\n06-25 16:48:31.257  9279  9279 I MonoDroid:   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler+<>c__DisplayClass13_0`1[TResult].<Execute>b__0 () <0xce71037c + 0x0005b> in <1a963d6bdb8d435e8dcdc28935e050ad>:0\r\n06-25 16:48:31.257  9279  9279 I MonoDroid:   at Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryCache.GetOrAddQueryCore[TFunc] (System.Object cacheKey, System.Func`1[TResult] compiler) <0xce6f70ac + 0x000c3> in <1a963d6bdb8d435e8dcdc28935e050ad>:0\r\n06-25 16:48:31.257  9279  9279 I MonoDroid:   at Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryCache.GetOrAddQuery[TResult] (System.Object cacheKey, System.Func`1[TResult] compiler) <0xce6f7024 + 0x0003b> in <1a963d6bdb8d435e8dcdc28935e050ad>:0\r\n06-25 16:48:31.257  9279  9279 I MonoDroid:   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.Execute[TResult] (System.Linq.Expressions.Expression query) <0xce70f47c + 0x001a7> in <1a963d6bdb8d435e8dcdc28935e050ad>:0\r\n06-25 16:48:31.257  9279  9279 I MonoDroid:   at Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider.Execute[TResult] (System.Linq.Expressions.Expression expression) <0xce6f7b58 + 0x00047> in <1a963d6bdb8d435e8dcdc28935e050ad>:0\r\n06-25 16:48:31.257  9279  9279 I MonoDroid:   at System.Linq.Queryable.FirstOrDefault[TSource] (System.Linq.IQueryable`1[T] source) <0xce4096f4 + 0x000cb> in <dd44b4af145c4bd6a0a60da9e4b5131f>:0\r\n```\r\n\r\n### Version Information\r\nEF Core version: 2.1.1\r\nXamarin Andriod version not specified in original report\r\n"}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"8012404654","Type":"PullRequestEvent","CreatedAt":"2018-07-24T19:53:37","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/3392","RelatedDescription":"Opened pull request \"[Android] BoxView should fall back to BackgroundColor\" (#3392) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\n#1998 added CornerRadius to the BoxView, but when the UpdateBackground method was updated to use a GradientDrawable, the fallback to BackgroundColor was missed. This restores it.\r\n\r\n### Issues Resolved ###\r\n\r\n<!-- Please use the format \"fixes #xxxx\" for each issue this PR addresses -->\r\n\r\n- fixes #3342\r\n\r\n### API Changes ###\r\n\r\nNone\r\n\r\n### Platforms Affected ###\r\n\r\n- Android\r\n\r\n### Behavioral/Visual Changes ###\r\n\r\nNone\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [ ] Rebased on top of the target branch at time of PR\r\n- [ ] Changes adhere to coding standard\r\n"},{"Id":"8012107260","Type":"IssuesEvent","CreatedAt":"2018-07-24T18:53:20","Actor":"ChrisMacLeanRQI","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/3391","RelatedDescription":"Opened issue \"iOS Share Extension code does not execute in Visual Studio or Visual Studio for Mac\" (#3391) at xamarin/Xamarin.Forms","RelatedBody":"<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\n### Description\r\nWhen trying to integrate an iOS Share Extension into a Xamarin Forms Cross-Platform .NET Standard 2.0 project, the code for the default ShareViewController does not execute.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Create a new Cross-Platform project and add an iOS Share Extension project\r\n2. When trying to share a photo from the Photo app on either the iOS Simulator or Device, the extension shows up in the Activity list, but code does not execute\r\n\r\n### Expected Behavior\r\nClicking on the Share Extension activity should fire code for ViewDidLoad(), IsContentValid() and DidSelectPost()\r\n\r\n### Actual Behavior\r\nNo breakpoints are hit on the ShareViewController class and a Debug.WriteLine test does not get executed.\r\n\r\n### Basic Information\r\n\r\n- Version with issue: Xamarin.Forms v3.1.0.637273\r\n- Last known good version:\r\n- IDE: Visual Studio Professional 2017 v17.7.5 and Visual Studio for Mac v7.5.3\r\n- Platform Target Frameworks: <!-- All that apply -->\r\n  - iOS:  8.0 up to 11.4\r\n - Nuget Packages:\r\nMicrosoft.NETCore.UniversalWindowsPlatform v6.1.5\r\nNETStandard.Library v2.0.3\r\nXamarin.Android.Support.v4\r\nXamarin.Android.Support.Design\r\nXamarin.Android.Support.v7.AppCompat\r\nXamarin.Android.Support.v7.CardView\r\nXamarin.Android.Support.v7.MediaRouter\r\nXamarin.Forms v3.1.0.637273\r\n\r\n- Affected Devices: iOS Simulator - ALL, iPod Touch 5 iOS v9.3\r\n\r\n### Reproduction Link\r\n\r\n<!-- Please upload or provide a link to a reproduction case -->\r\n\r\n"},{"Id":"8011995505","Type":"IssuesEvent","CreatedAt":"2018-07-24T18:32:54","Actor":"jkastner","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/3390","RelatedDescription":"Opened issue \"Crash with Certain Values of Corner Radius on Uwp\" (#3390) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\nOn Uwp, setting certain bound valid values for CornerRadius can cause the button to crash.\r\nThis occurs on the latest pre-release as well as current Xamarin.Forms\r\n\r\n### Steps to Reproduce\r\n\r\n1. Create a button with a 'WidthRequest' and 'HeightRequest' of 50.\r\n2. Bind the CornerRadius to some property. Set the initial value to '25'.\r\n3. While the app is running, change the bound value for CornerRadius to '5'.\r\n\r\n### Expected Behavior\r\nThe radius changes.\r\n\r\n### Actual Behavior\r\nAn exception is thrown claiming an invalid value for TopLeft. The exception is below:\r\n\r\n\r\n\r\n> {System.ArgumentException: Invalid value for TopLeft property on CornerRadius.\r\n>    at Windows.UI.Xaml.CornerRadius.Validate(Double topLeft, Double topRight, Double bottomRight, Double bottomLeft)\r\n>    at Xamarin.Forms.Platform.UWP.FormsButton.UpdateBorderRadius()\r\n>    at Xamarin.Forms.Platform.UWP.FormsButton.OnBorderRadiusChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)\r\n>    at Xamarin.Forms.Platform.UWP.TaskExtensions.<>c.<WatchForError>b__2_1(Object e)\r\n>    at System.Threading.WinRTSynchronizationContextBase.Invoker.InvokeCore()}\r\n\r\n\r\n### Basic Information\r\nThis occurs only on Uwp and is confirmed as non-reproducible on Android.\r\nHard-coding the CornerRadius to 5 does not trigger the issue.\r\nA CornerRadius  of both 4 and 6 work in the above scenario\r\nIf the HeightRequest and WidthRequest change, the exact value that triggers the crash changes as well.\r\n\r\nFound while trying to make a rounded button.\r\n\r\n- Version with issue:\r\n\tXamarin.Forms Version 3.1.0.637273\r\n\tXamarin.Forms Version 3.2.0.637442-pre1\r\n\t\r\n- Last known good version: Unknown\r\n- IDE: Visual Studio 2017 15.7.5\r\n- Platform Target Frameworks: <!-- All that apply -->\r\n  - UWP: 16299\r\n- Nuget Packages:\r\n    Both the current version and the pre-release have been tested and confirmed with this issue.\r\n\r\n    Xamarin.Forms Version 3.1.0.637273\r\n    Microsoft.NETCore.UniversalWindowsPlatform 6.1.5\r\n\r\n    and\r\n    \r\n    Xamarin.Forms Version 3.2.0.637442-pre1\r\n    Microsoft.NETCore.UniversalWindowsPlatform 6.2.0-Preview1-26502-02\r\n    \r\n  \r\n- Affected Devices:\r\n  Dell Latitude 7270\r\n  \r\n### Reproduction Link\r\nhttps://github.com/jkastner/Xamarin.FormsCornerRadiusBug"},{"Id":"8011992521","Type":"IssuesEvent","CreatedAt":"2018-07-24T18:32:20","Actor":"borbmizzet","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/3389","RelatedDescription":"Opened issue \"NavigationPage.HasBackButton binding doesn't work on iOS\" (#3389) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\nNavigationPage.HasBackButton binding doesn't work on iOS (works on android)\r\n### Steps to Reproduce\r\n\r\n1. Bind NavigationPage.HasBackButton in xaml to a bool (initialize to false) in the view model\r\n2.  Wait a bit after the page loads, and change the bool to true\r\n\r\n### Expected Behavior\r\nBack button should appear when the bool is set to true\r\n### Actual Behavior\r\nThe PropertyChanged notification of the bool does not cause the back button to appear.\r\n### Basic Information\r\n\r\n- Version with issue: 3.1.0.637273\r\n- Last known good version: Unknown\r\n- IDE: Vs 15.7.5\r\n- Platform Target Frameworks: .NetStandard 2.0\r\n  - iOS:  11.4\r\n- Nuget Packages:\r\n- Affected Devices: iPhone\r\n\r\n### Reproduction Link\r\n[HasBackButtonFailure.zip](https://github.com/xamarin/Xamarin.Forms/files/2224907/HasBackButtonFailure.zip)\r\n\r\nDownload the zip, deploy the ios project, click one of the list items, click the EnableBackButton Button.  IT doesnt work.  Deploy it on android, and it works properly.\r\n"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"8013795715","Type":"PullRequestEvent","CreatedAt":"2018-07-25T02:30:20","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4426","RelatedDescription":"Merged pull request \"Pass features not available on iOS to linker\" (#4426) at xamarin/xamarin-macios","RelatedBody":" Fixes #4174"},{"Id":"8013795712","Type":"IssuesEvent","CreatedAt":"2018-07-25T02:30:20","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/4174","RelatedDescription":"Closed issue \"\"Your mono runtime and class libraries are out of sync message\" on building unit test projects with XI master\" (#4174) at xamarin/xamarin-macios","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Update System with Xamarin.iOS project, XI version: 11.11.0.331 (master: 238eb94c) \r\n2. Build and Run any unit test on device.\r\n\r\n### Expected Behavior\r\nBuild Log should not contain any out of sync messages.\r\n\r\n### Actual Behavior\r\n\"Your mono runtime and class libraries are out of sync\" message is  present in build logs.\r\n\r\n### Environment\r\n\r\n```\r\nOperating System: Mac OS X 10.13.4\r\nBot Name: XQA-XI-Sierra-6\r\nMono version: 5.14.0.106 (820bff26b3b)  (2018-05-25 17:29:19 -04:00)\r\nXA version: 8.3.99.19 (HEAD/09df99bdc) \r\nXI version: 11.11.0.331 (master: 238eb94c) \r\nXM version: 4.5.0.331 (master: 238eb94c)  (2018-05-25 07:47:00 -04:00)\r\nXVS version: \r\nXS version: 7.6.0.971 (e936c76)  (2018-05-28 12:49:41 -04:00)\r\n```\r\n\r\n### Build Logs\r\n\r\nhttp://xqa.blob.core.windows.net/gist/report-c8b3a0e9db67473ebe1ff9df22e7c44d.txt, with mono 5.14\r\nhttp://xqa.blob.core.windows.net/gist/report-641ce6bd5c0545618ad5b7f981fcbbdf.txt with mono 5.12\r\n\r\n### Example Project (If Possible)\r\n\r\nAny unit test project in xamarin-macios/tests/ folder. \r\n\r\n## Additional Info:\r\nThis is not a new issue in master. It was happening for quite sometime. I confirmed that QA tests are checking out the correct external/mono and build logs are not giving false results, also checked manually. This issue is occurring in bots with either mono 5.14 or 5.12 installed.\r\n"},{"Id":"8013772967","Type":"PullRequestEvent","CreatedAt":"2018-07-25T02:22:03","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4498","RelatedDescription":"Merged pull request \"[msbuild] Don't put gcc/linker flags in the response file, since Mono.Options doesn't support escaping quotes. Fixes vsts#649776. (#4495)\" (#4498) at xamarin/xamarin-macios","RelatedBody":"Mono.Options doesn't (yet) support escaped quotes when parsing response files,\nwhich becomes a problem because escaped quotes are necessary when passing\npaths with spaces as gcc/linker flags.\n\nSo don't write gcc/linker flags in the response file, and instead pass them as\nnormal command line arguments, and to be on the safe side, do the same thing\nfor all extra arguments passed to mmp/mtouch.\n\nAlso add tests.\n\nFixes https://devdiv.visualstudio.com/DevDiv/_workitems/edit/649776."},{"Id":"8013504056","Type":"PullRequestEvent","CreatedAt":"2018-07-25T00:40:16","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4496","RelatedDescription":"Merged pull request \"[arkit] Update for Xcode 10 beta 4\" (#4496) at xamarin/xamarin-macios","RelatedBody":"Inlined protocol member. No constructor in interfaces in C#."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1019670557011243008","CreatedAt":"2018-07-18T19:49:40+00:00","UserScreenname":"xamarinhq","Text":"Xamarin.Forms 3.1 delivers the latest in quality improvements. We're excited to introduce Xamarin.Forms 3.1, now wi… https://t.co/qW6S2P7Hi0","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":257,"FavoriteCount":162,"RawContent":null},{"Id":"1016758939877117952","CreatedAt":"2018-07-10T18:59:56+00:00","UserScreenname":"xamarinhq","Text":"Understanding your app, it's users, &amp; their interactions helps you build a 5-star app. Application Insights w/ AppC… https://t.co/Smw5tVHZ1X","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":43,"FavoriteCount":25,"RawContent":null},{"Id":"1014949294737186816","CreatedAt":"2018-07-05T19:09:03+00:00","UserScreenname":"xamarinhq","Text":"Cool intros to new goodies in &lt;10 minutes! Explore some of the “Snack Pack” episodes that @JamesMontemagno bundled… https://t.co/80gmo35fb6","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":90,"FavoriteCount":43,"RawContent":null},{"Id":"1014903254034141190","CreatedAt":"2018-07-05T16:06:06+00:00","UserScreenname":"xamarinhq","Text":"Using #TensorFlow and #Azure to add image classification to your Android apps: https://t.co/45lGqihW7e https://t.co/3RaJk3O0xb","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":43,"FavoriteCount":33,"RawContent":null},{"Id":"1014521211970379776","CreatedAt":"2018-07-04T14:48:00+00:00","UserScreenname":"xamarinhq","Text":"Check out this handy curated list of awesome #Xamarin books written by other developers in the #Xamarin community: https://t.co/Yu7V3tVSRq","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":63,"FavoriteCount":34,"RawContent":null},{"Id":"1014159326645313537","CreatedAt":"2018-07-03T14:50:00+00:00","UserScreenname":"xamarinhq","Text":"A brief history of #dotNET Standard (and where it's going): https://t.co/AfiPETlRiv","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":40,"FavoriteCount":25,"RawContent":null},{"Id":"1013873320834445313","CreatedAt":"2018-07-02T19:53:31+00:00","UserScreenname":"xamarinhq","Text":"In today's Xamarin Podcast, @PierceBoggan &amp; @JamesMontemagno talk up latest &amp; greatest in mobile #dotNET dev; Xamar… https://t.co/chy5AhHt86","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":63,"FavoriteCount":43,"RawContent":null},{"Id":"1013805063209455616","CreatedAt":"2018-07-02T15:22:17+00:00","UserScreenname":"xamarinhq","Text":"Learn how to use the iOS 11 drag and drop APIs in your #Xamarin iOS apps: https://t.co/bWru3lL6he https://t.co/kdzv9U4084","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":34,"FavoriteCount":21,"RawContent":null},{"Id":"1013547297437835264","CreatedAt":"2018-07-01T22:18:01+00:00","UserScreenname":"xamarinhq","Text":"Localize your #XamarinForms apps for right-to-left languages with the help of the new FlowDirection property:… https://t.co/JL1SW3MFro","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":53,"FavoriteCount":27,"RawContent":null},{"Id":"1012399525338595328","CreatedAt":"2018-06-28T18:17:10+00:00","UserScreenname":"xamarinhq","Text":"https://t.co/3QxhuBcUiC v7.2 introduces two new MSBuild properties to make maintaining Android VersionCode for Andr… https://t.co/j469e1DU24","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":84,"FavoriteCount":58,"RawContent":null},{"Id":"1011343460811583489","CreatedAt":"2018-06-25T20:20:45+00:00","UserScreenname":"xamarinhq","Text":"What’s new in the #XamarinAndroid designer: https://t.co/OOHH6tXhia https://t.co/lCAsZQzwls","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":89,"FavoriteCount":39,"RawContent":null},{"Id":"1009871245574332422","CreatedAt":"2018-06-21T18:50:42+00:00","UserScreenname":"xamarinhq","Text":"Get your #Xamarin Android apps ready for Google Play’s target API level requirements: https://t.co/2iFf5ijjj9 https://t.co/iQmylzyQ7o","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":62,"FavoriteCount":34,"RawContent":null},{"Id":"1008802730993967104","CreatedAt":"2018-06-18T20:04:48+00:00","UserScreenname":"xamarinhq","Text":"Get ready for the July 2018 deadline by ensuring your  #Xamarin apps support iOS 11 and iPhone X: https://t.co/1Wx6Bo4TSQ","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":43,"FavoriteCount":18,"RawContent":null},{"Id":"1007343670775963649","CreatedAt":"2018-06-14T19:27:01+00:00","UserScreenname":"xamarinhq","Text":"Get access to more cross-platform APIs with the latest Xamarin.Essentials Preview: https://t.co/WqtCV8OneC https://t.co/FgdScqkpPt","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":116,"FavoriteCount":66,"RawContent":null},{"Id":"1007280505820254209","CreatedAt":"2018-06-14T15:16:01+00:00","UserScreenname":"xamarinhq","Text":"Implement drawer and split UI with the #XamarinForms MasterDetailPage: https://t.co/77WkBtKGpx https://t.co/zLa3RTUgaL","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":45,"FavoriteCount":21,"RawContent":null},{"Id":"1006915501405167616","CreatedAt":"2018-06-13T15:05:37+00:00","UserScreenname":"xamarinhq","Text":"Using #TensorFlow and #Azure to add image classification to your Android apps: https://t.co/45lGqihW7e https://t.co/U9huu5DdJW","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":61,"FavoriteCount":22,"RawContent":null},{"Id":"1006682387743461376","CreatedAt":"2018-06-12T23:39:19+00:00","UserScreenname":"xamarinhq","Text":"Create your first #Xamarin app using #MongoDB: https://t.co/Nu6lZzYwYX","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":60,"FavoriteCount":25,"RawContent":null}]}},"RunOn":"2018-07-25T05:30:58.4158429Z","RunDurationInMilliseconds":4055}