{"Data":{"GitHub":{"Issues":[{"Id":"561957436","IsPullRequest":true,"CreatedAt":"2020-02-08T02:32:40","Actor":"harishsk","Number":"4817","RawContent":null,"Title":"Make sure Done() is called in cleanup if it hasn't been called","State":"open","Body":"This makes sure call stack is collected for intermediate failures.","Url":"https://github.com/dotnet/machinelearning/pull/4817","RelatedDescription":"Open PR \"Make sure Done() is called in cleanup if it hasn't been called\" (#4817)"},{"Id":"561957117","IsPullRequest":true,"CreatedAt":"2020-02-08T02:29:39","Actor":"harishsk","Number":"4816","RawContent":null,"Title":"Fixed bug in tensorflow tests due to long paths for working folders","State":"open","Body":"TF tests are relying on IClassFixture to carry forward state from test to test. This by default creates excessively long paths that result in file system errors when there is a longer prefix for the source code. I have fixed it to take temp paths with shorter path lengths.","Url":"https://github.com/dotnet/machinelearning/pull/4816","RelatedDescription":"Open PR \"Fixed bug in tensorflow tests due to long paths for working folders\" (#4816)"},{"Id":"561956326","IsPullRequest":true,"CreatedAt":"2020-02-08T02:22:49","Actor":"harishsk","Number":"4815","RawContent":null,"Title":"Fixed bugs in OptionalColumnTransform and added bool support","State":"open","Body":"OptionalColumnTransform didn't have support for boolean initializers. When I went to add that I saw that the TensorProto data was being set incorrectly for a few other data types. I tried to fix that and I had to redo the AddInitializer functionality in OnnxContext and related plumbing in OnnxUtils.cs.\r\nThen when I went to add tests for all the data types that are now supported in OptionalColumnTransform, I realized I needed to simplify the column comparison in OnnxConversionTest. In the process I also added support SByte and Byte in OnnxUtils - CreateNamedValue and fixed up the corresponding tests.\r\n\r\nIn summary:\r\n- Cleaned up OnnxContext's initializer interface\r\n- Cleaned up column comparison functionality on OnnxConversionTest\r\n- Fixed bugs in OptionalColumnTransform's onnx export and added support for boolean initializers\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4815","RelatedDescription":"Open PR \"Fixed bugs in OptionalColumnTransform and added bool support\" (#4815)"},{"Id":"561922933","IsPullRequest":true,"CreatedAt":"2020-02-08T01:20:40","Actor":"frank-dong-ms","Number":"4814","RawContent":null,"Title":"improve logging for Functional Tests","State":"closed","Body":"Better logging for FT:\r\n1. add test output logging handler and MessageKindToLog in FT base class\r\n2. move TestLogger to TestFrameworkCommon project as this is more common test project and we might need to use TestLogger in future for FT\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4814","RelatedDescription":"Closed or merged PR \"improve logging for Functional Tests\" (#4814)"},{"Id":"561848195","IsPullRequest":true,"CreatedAt":"2020-02-07T23:44:24","Actor":"frank-dong-ms","Number":"4811","RawContent":null,"Title":"remove build timeout as perf bump","State":"closed","Body":"seeing build perf bump like below few builds:\r\nhttps://dev.azure.com/dnceng/public/_build/results?buildId=510766&view=logs&j=4a5328fc-3628-53de-aa0c-9ba4571cae61&t=d953246d-9492-5686-12cd-f07513b595b7\r\nhttps://dev.azure.com/dnceng/public/_build/results?buildId=510972&view=logs&j=11c3dbcc-a5f4-5edd-335b-a8af5aa47d46&s=d654deb9-056d-50a2-1717-90c08683d50a\r\nhttps://dev.azure.com/dnceng/public/_build/results?buildId=510945&view=logs&j=4a5328fc-3628-53de-aa0c-9ba4571cae61&t=d953246d-9492-5686-12cd-f07513b595b7\r\n\r\nthis PR remove build timeout as perf bump\r\n\r\nCan't use hosted agent pool for netcore3.0 due to space limitation:\r\nhttps://dev.azure.com/dnceng/public/_build/results?buildId=512080&view=logs&jobId=4a5328fc-3628-53de-aa0c-9ba4571cae61&j=4a5328fc-3628-53de-aa0c-9ba4571cae61&t=d953246d-9492-5686-12cd-f07513b595b7\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4811","RelatedDescription":"Closed or merged PR \"remove build timeout as perf bump\" (#4811)"},{"Id":"561899846","IsPullRequest":true,"CreatedAt":"2020-02-07T23:13:48","Actor":"Lynx1820","Number":"4813","RawContent":null,"Title":"Fix for NgramTransform","State":"closed","Body":"- Casting UInt16 -> Int64  inside NgramTransform, since it may now receive UInt16 keys from TokeningByCharacters\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4813","RelatedDescription":"Closed or merged PR \"Fix for NgramTransform\" (#4813)"},{"Id":"561898450","IsPullRequest":true,"CreatedAt":"2020-02-07T22:12:16","Actor":"michaelgsharp","Number":"4812","RawContent":null,"Title":"Added in DateTime type support for TimeSeriesImputer","State":"open","Body":"Added in System.DateTime support for the Date column in TimeSeriesImputer.\r\n\r\nInternally it converts it to POSIX time before it sends it to the native implementation, and then converts it back to System.DateTime for the IDataView.\r\n\r\nAlso added more comments and comments for the Enums.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4812","RelatedDescription":"Open PR \"Added in DateTime type support for TimeSeriesImputer\" (#4812)"},{"Id":"561840191","IsPullRequest":true,"CreatedAt":"2020-02-07T21:49:33","Actor":"frank-dong-ms","Number":"4810","RawContent":null,"Title":"modify base test class analyzer, allow to extend from ft base test class","State":"closed","Body":"We have separate base test class for all functional tests: FunctionalTestBaseClass\r\nThe reason for that is FT is also runned on NightlyBuild pipeline which not take project dependency directly but take ML.NET related Nuget package as dependency and we don't want FT to take dependency from TestFramework.","Url":"https://github.com/dotnet/machinelearning/pull/4810","RelatedDescription":"Closed or merged PR \"modify base test class analyzer, allow to extend from ft base test class\" (#4810)"},{"Id":"561830375","IsPullRequest":true,"CreatedAt":"2020-02-07T19:35:37","Actor":"sharwell","Number":"4809","RawContent":null,"Title":"Experiment: Switch to multitargeting for tests","State":"open","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/4809","RelatedDescription":"Open PR \"Experiment: Switch to multitargeting for tests\" (#4809)"},{"Id":"561822256","IsPullRequest":true,"CreatedAt":"2020-02-07T19:18:03","Actor":"mstfbl","Number":"4808","RawContent":null,"Title":"Removed extraSettings param in unit test datasets file","State":"open","Body":"Fixes #4742 , quick change to remove the `extraSettings` parameter from unit test datasets in `Datasets.cs`.","Url":"https://github.com/dotnet/machinelearning/pull/4808","RelatedDescription":"Open PR \"Removed extraSettings param in unit test datasets file\" (#4808)"},{"Id":"561360837","IsPullRequest":true,"CreatedAt":"2020-02-07T18:06:53","Actor":"gvashishtha","Number":"4806","RawContent":null,"Title":"Add link to February survey","State":"closed","Body":"Adds a link to ML.NET survey for February\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4806","RelatedDescription":"Closed or merged PR \"Add link to February survey\" (#4806)"},{"Id":"561572565","IsPullRequest":false,"CreatedAt":"2020-02-07T11:10:00","Actor":"gartangh","Number":"4807","RawContent":null,"Title":"ImageClassifier with ExponentialLRDecay: metrics not updated/calculated during validation","State":"open","Body":"### System information\r\n\r\n- **OS version**: Windows 10 Pro 18363\r\n- **.NET Version**:  Core 2.1\r\n- **Platform**: x64\r\n- **ML.NET version**: 0.15-preview\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\n  I am trying to train an image classifier that makes use of `ExponentialLRDecay`.\r\n  I would like to see the metrics for training and validation for each epoch.\r\n\r\n  ```csharp\r\n  var options = new ImageClassificationTrainer.Options()\r\n  {\r\n    LearningRateScheduler = new ExponentialLRDecay(),\r\n    ValidationSetFraction = 0.1f,\r\n    MetricsCallback = (metrics) => Console.WriteLine(metrics  + $\"   CrossEntropy: {metrics.Train.CrossEntropy}, LearningRate: {metrics.Train.LearningRate})\r\n  };\r\n  var model = mlContext.MulticlassClassification.Trainers.ImageClassification(options);\r\n  ```\r\n\r\n  (I added `  + $\"   CrossEntropy: {metrics.Train.CrossEntropy}, LearningRate: {metrics.Train.LearningRate}\"`, because the crossentropy and learning rate are not printed by default for the validation set.)\r\n\r\n- **What happened?**\r\n  * The learning rate is not updated for the validation set (seen on every even row in the image).\r\n  * The cross-entropy is not calculated for the validation set (seen on every even row in the image).\r\n  * The learning rate is not updated after the second epoch like the default value of `2` for `numEpochsPerDecay ` in `ExponentialLRDecay()`, but after the first instead (seen on the third row in the image). After that, the learning rate is correctly updated every 2 epochs. I'm not sure if this is the expected behavior.\r\n\r\n  ![image](https://user-images.githubusercontent.com/20618666/74023199-60bf5100-499f-11ea-8511-c003965b1c90.png)\r\n\r\n- **What did you expect?**\r\n  * I expected a decaying learning rate in the validation step, equal to the one in the training step.\r\n  * I expected the cross-entropy to be calculated in the validation step. The model with the highest `Accuracy` and lowest `CrossEntropy` are the best, so if 2 models perform equally well in terms of accuracy, the one with the lowest cross-entropy on the validation set should be picked.\r\n  * Further, I expected the learning rate to start decaying after the 2nd epoch.","Url":"https://github.com/dotnet/machinelearning/issues/4807","RelatedDescription":"Open issue \"ImageClassifier with ExponentialLRDecay: metrics not updated/calculated during validation\" (#4807)"},{"Id":"561008224","IsPullRequest":false,"CreatedAt":"2020-02-07T08:21:05","Actor":"mstfbl","Number":"4789","RawContent":null,"Title":"BaseTestPredictorsMaml.Run_Test() is broken","State":"closed","Body":"I am trying to test a previously saved LightGBM model to see if it outputs expected baseline figures. However, the baseline that `Run_Test()` generates is as follows:\r\n\r\n> ***** Unexpected failure. Please refer to https://aka.ms/MLNetIssue to file an issue with details *****\r\n> \r\n> ***** Error log has been saved to 'C:\\Users\\mubal\\AppData\\Local\\Temp\\TLC\\Error_20200206_193056_51208d31-0f5c-4ff9-b7a8-7f853d81fc14.log', please refer to https://aka.ms/MLNetIssue to file an issue with details *****\r\n> \r\n> ===== Begin detailed dump =====\r\n> \r\n> (1) Unexpected exception: Assert failed: Assertion Failed\r\n> \r\n> Expected: True\r\n> \r\n> Actual:   False, 'Xunit.Sdk.TrueException'\r\n> \r\n>    at Xunit.Assert.True(Nullable`1 condition, String userMessage) in C:\\Dev\\xunit\\xunit\\src\\xunit.assert\\Asserts\\BooleanAsserts.cs:line 95\r\n> \r\n>    at Microsoft.ML.Internal.Internallearn.Test.GlobalBase.AssertHandler(String msg, IExceptionContext ectx) in C:\\Users\\mubal\\Documents\\GitHub\\machinelearning\\test\\Microsoft.ML.TestFramework\\GlobalBase.cs:line 71\r\n> \r\n>    at Microsoft.ML.Runtime.Contracts.DbgFailCore(String msg, IExceptionContext ctx) in C:\\Users\\mubal\\Documents\\GitHub\\machinelearning\\src\\Microsoft.ML.Core\\Utilities\\Contracts.cs:line 781\r\n> \r\n>    at Microsoft.ML.Runtime.Contracts.DbgFail(IExceptionContext ctx) in C:\\Users\\mubal\\Documents\\GitHub\\machinelearning\\src\\Microsoft.ML.Core\\Utilities\\Contracts.cs:line 790\r\n> \r\n>    at Microsoft.ML.Runtime.Contracts.Assert(Boolean f) in C:\\Users\\mubal\\Documents\\GitHub\\machinelearning\\src\\Microsoft.ML.Core\\Utilities\\Contracts.cs:line 839\r\n> \r\n>    at Microsoft.ML.Runtime.ComponentCatalog.ParseArguments(IHostEnvironment env, Object args, String settings, String name) in C:\\Users\\mubal\\Documents\\GitHub\\machinelearning\\src\\Microsoft.ML.Core\\ComponentModel\\ComponentCatalog.cs:line 1067\r\n> \r\n>    at Microsoft.ML.Runtime.ComponentCatalog.TryCreateInstance[TRes](IHostEnvironment env, Type signatureType, TRes& result, String name, String options, Object[] extra) in C:\\Users\\mubal\\Documents\\GitHub\\machinelearning\\src\\Microsoft.ML.Core\\ComponentModel\\ComponentCatalog.cs:line 1036\r\n> \r\n>    at Microsoft.ML.Runtime.ComponentCatalog.TryCreateInstance[TRes,TSig](IHostEnvironment env, TRes& result, String name, String options, Object[] extra) in C:\\Users\\mubal\\Documents\\GitHub\\machinelearning\\src\\Microsoft.ML.Core\\ComponentModel\\ComponentCatalog.cs:line 993\r\n> \r\n>    at Microsoft.ML.Tools.Maml.MainCore(IHostEnvironment env, String args, Boolean alwaysPrintStacktrace) in C:\\Users\\mubal\\Documents\\GitHub\\machinelearning\\src\\Microsoft.ML.Maml\\MAML.cs:line 129\r\n> \r\n> ====== End detailed dump =====\r\n\r\n\r\nMy code where this happens is:\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/0ea84a6f3fb2cde29f70ec638c3f06317028225e/test/Microsoft.ML.Predictor.Tests/TestPredictors.cs#L489-L511\r\n\r\nI've confirmed that my model and and baseline files exist, and that my model is valid.\r\n\r\nPerhaps this issue was known to previous ML.NET developers as Run_Test() and its dependent Run_TrainSaveTest() are not used anywhere in the codebase. However, this is the only way (as far as I know) i n which one can test the baseline output of a model with `TestDatasets` and `TestLearners`.\r\n\r\nBecause Run_Test() is broken, Run_TrainSaveTest() is also broken.\r\n\r\nPS: I discovered this while trying to add a unit test in my PR #4695  to check the run-time behavior of LightGBM does not change by modifying the flags used by LightGBM with CursOpt.AllFeatures, and that this change does not affect the features extracted during validation. ","Url":"https://github.com/dotnet/machinelearning/issues/4789","RelatedDescription":"Closed issue \"BaseTestPredictorsMaml.Run_Test() is broken\" (#4789)"},{"Id":"561328863","IsPullRequest":true,"CreatedAt":"2020-02-07T04:56:30","Actor":"Lynx1820","Number":"4805","RawContent":null,"Title":"TokenizingByCharacters export to Onnx","State":"closed","Body":"- Transformer that tokenizes by character and returns the characters (as uint16)\r\n- Since there's not a comparable onnx operator, a label encoder is used to map a string token to it's corresponding character value.  This will unfortunately make the model much larger, since 65535 values have to be saved as a mapping guide for label encoder. ","Url":"https://github.com/dotnet/machinelearning/pull/4805","RelatedDescription":"Closed or merged PR \"TokenizingByCharacters export to Onnx\" (#4805)"},{"Id":"561023816","IsPullRequest":true,"CreatedAt":"2020-02-06T23:03:41","Actor":"sharwell","Number":"4793","RawContent":null,"Title":"Enable VSTHRD105 (Avoid method overloads that assume TaskScheduler.Current)","State":"closed","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/4793","RelatedDescription":"Closed or merged PR \"Enable VSTHRD105 (Avoid method overloads that assume TaskScheduler.Current)\" (#4793)"},{"Id":"561022883","IsPullRequest":true,"CreatedAt":"2020-02-06T23:03:27","Actor":"sharwell","Number":"4791","RawContent":null,"Title":"Enable VSTHRD100 (Avoid async void methods)","State":"closed","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/4791","RelatedDescription":"Closed or merged PR \"Enable VSTHRD100 (Avoid async void methods)\" (#4791)"},{"Id":"561281068","IsPullRequest":true,"CreatedAt":"2020-02-06T23:03:02","Actor":"sharwell","Number":"4802","RawContent":null,"Title":"Extract IsTestMethod to a shared analyzer helper","State":"closed","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/4802","RelatedDescription":"Closed or merged PR \"Extract IsTestMethod to a shared analyzer helper\" (#4802)"},{"Id":"561320990","IsPullRequest":true,"CreatedAt":"2020-02-06T23:01:47","Actor":"pieths","Number":"4804","RawContent":null,"Title":"Fix issue with the onnx export string initializer in OptionalColumnTransform","State":"open","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/4804","RelatedDescription":"Open PR \"Fix issue with the onnx export string initializer in OptionalColumnTransform\" (#4804)"},{"Id":"561235457","IsPullRequest":true,"CreatedAt":"2020-02-06T21:57:59","Actor":"Lynx1820","Number":"4797","RawContent":null,"Title":"Fix for KeyToValue Onnx export ","State":"closed","Body":"- Like for ValueToKey,  mapping int64 -> int64 needs casting\r\n- Cast float values back to doubles, when the valuetype is expected to be a double \r\n\r\nThe current KeyToValue test makes it hard to test different value types, so I added KeyToValue to the ValueToKey pipeline, which is more flexible. Comparing the keys checks ValueToKey and comparing the value output checks KeyToValue. If this test is ok, I can remove the current KeyToValue test. Otherwise, I can modify the KeyToValue test to follow a similar format.   ","Url":"https://github.com/dotnet/machinelearning/pull/4797","RelatedDescription":"Closed or merged PR \"Fix for KeyToValue Onnx export \" (#4797)"},{"Id":"561282487","IsPullRequest":true,"CreatedAt":"2020-02-06T21:32:51","Actor":"sharwell","Number":"4803","RawContent":null,"Title":"Implement MSML_RelaxTestNaming suppressor for VSTHRD200","State":"open","Body":"🚧 Builds on #4801 and #4802.\r\n\r\nAllow asynchronous test methods to omit the 'Async' suffix.","Url":"https://github.com/dotnet/machinelearning/pull/4803","RelatedDescription":"Open PR \"Implement MSML_RelaxTestNaming suppressor for VSTHRD200\" (#4803)"},{"Id":"561279039","IsPullRequest":true,"CreatedAt":"2020-02-06T21:26:02","Actor":"sharwell","Number":"4801","RawContent":null,"Title":"Enable RS1026 (Enable concurrent execution)","State":"open","Body":"🚧 Builds on #4800","Url":"https://github.com/dotnet/machinelearning/pull/4801","RelatedDescription":"Open PR \"Enable RS1026 (Enable concurrent execution)\" (#4801)"},{"Id":"561278295","IsPullRequest":true,"CreatedAt":"2020-02-06T21:24:27","Actor":"sharwell","Number":"4800","RawContent":null,"Title":"Enable RS1025 (Configure generated code analysis)","State":"open","Body":"🚧 Builds on #4799","Url":"https://github.com/dotnet/machinelearning/pull/4800","RelatedDescription":"Open PR \"Enable RS1025 (Configure generated code analysis)\" (#4800)"},{"Id":"561277741","IsPullRequest":true,"CreatedAt":"2020-02-06T21:23:16","Actor":"sharwell","Number":"4799","RawContent":null,"Title":"Enable RS1024 (Compare symbols correctly)","State":"open","Body":"🚧 Builds on #4798","Url":"https://github.com/dotnet/machinelearning/pull/4799","RelatedDescription":"Open PR \"Enable RS1024 (Compare symbols correctly)\" (#4799)"},{"Id":"561277395","IsPullRequest":true,"CreatedAt":"2020-02-06T21:22:35","Actor":"sharwell","Number":"4798","RawContent":null,"Title":"Update to Microsoft.CodeAnalysis 3.3.1","State":"open","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/4798","RelatedDescription":"Open PR \"Update to Microsoft.CodeAnalysis 3.3.1\" (#4798)"},{"Id":"561010856","IsPullRequest":true,"CreatedAt":"2020-02-06T20:24:17","Actor":"sharwell","Number":"4790","RawContent":null,"Title":"Install threading analyzers","State":"closed","Body":"Rules with existing violations have been disabled.","Url":"https://github.com/dotnet/machinelearning/pull/4790","RelatedDescription":"Closed or merged PR \"Install threading analyzers\" (#4790)"},{"Id":"561209093","IsPullRequest":false,"CreatedAt":"2020-02-06T19:04:07","Actor":"gvashishtha","Number":"4796","RawContent":null,"Title":"See also xref  is broken","State":"open","Body":"The xref under \"See also\" appears as plaintext, incorrectly\n\n---\n#### Document Details\n\n⚠ *Do not edit this section. It is required for docs.microsoft.com ➟ GitHub issue linking.*\n\n* ID: 16bcaa45-114e-32f9-c72c-61339bf5aa65\n* Version Independent ID: 28a14833-c964-a8ef-aabe-7118e0ffe48c\n* Content: [ApproximatedKernelMappingEstimator Class (Microsoft.ML.Transforms)](https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.transforms.approximatedkernelmappingestimator?view=ml-dotnet)\n* Content Source: [dotnet/xml/Microsoft.ML.Transforms/ApproximatedKernelMappingEstimator.xml](https://github.com/dotnet/ml-api-docs/blob/live/dotnet/xml/Microsoft.ML.Transforms/ApproximatedKernelMappingEstimator.xml)\n* Product: **dotnet-ml-api**\n* GitHub Login: @natke\n* Microsoft Alias: **nakersha**","Url":"https://github.com/dotnet/machinelearning/issues/4796","RelatedDescription":"Open issue \"See also xref  is broken\" (#4796)"},{"Id":"561109542","IsPullRequest":false,"CreatedAt":"2020-02-06T16:02:45","Actor":"patmaasridharan","Number":"4795","RawContent":null,"Title":"Microsoft.ML.OnnxRuntime.OnnxRuntimeException: 1 : FAIL : Failed to find kernel for Neg","State":"open","Body":"### System information\r\nWindows 10\r\nMicrosoft.ML v.15.0/preview\r\nMicrosoft.Ml.OnnxRuntime v1.1.1\r\n.NET Framework 4.8\r\n\r\n### Issue\r\nI amtrying to run prediction engine using a pretrained .onnx model in ML.net.  The Onnx model is Unet architecture and I used latest master build of ONNX and ONNXRUNTIME for creating .onnx file.\r\n\r\nOn calling \"mlContext.Transforms.ApplyOnnxModel\" i get RuntimeException (refer to figure attached)\r\n\r\n![mlerror](https://user-images.githubusercontent.com/54295010/73954140-b1806c80-4901-11ea-95b3-8fd3a19143ed.PNG)\r\n\r\nI had the same error in Onnxrumtime beacuse of int64 support unavailability. Now they have added this support. Refer to these links \r\nhttps://github.com/microsoft/onnxruntime/issues/2875\r\nhttps://github.com/microsoft/onnxruntime/pull/2945\r\n\r\n\r\nI am not sure if its same problem. Any leads on this will be appreciable :)\r\n\r\nThank you.","Url":"https://github.com/dotnet/machinelearning/issues/4795","RelatedDescription":"Open issue \"Microsoft.ML.OnnxRuntime.OnnxRuntimeException: 1 : FAIL : Failed to find kernel for Neg\" (#4795)"},{"Id":"561024392","IsPullRequest":true,"CreatedAt":"2020-02-06T13:48:34","Actor":"sharwell","Number":"4794","RawContent":null,"Title":"Enable VSTHRD200 (Use \"Async\" suffix for async methods)","State":"open","Body":"This rule remains disabled in test code to avoid requiring test methods to be renamed.\r\n\r\n🚧 Builds on #4793\r\n\r\nBlocked on #4803","Url":"https://github.com/dotnet/machinelearning/pull/4794","RelatedDescription":"Open PR \"Enable VSTHRD200 (Use \"Async\" suffix for async methods)\" (#4794)"},{"Id":"561023379","IsPullRequest":true,"CreatedAt":"2020-02-06T13:46:47","Actor":"sharwell","Number":"4792","RawContent":null,"Title":"Enable VSTHRD103 (Call async methods when in an async method)","State":"open","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/4792","RelatedDescription":"Open PR \"Enable VSTHRD103 (Call async methods when in an async method)\" (#4792)"},{"Id":"560786071","IsPullRequest":false,"CreatedAt":"2020-02-06T05:19:48","Actor":"frank-dong-ms","Number":"4788","RawContent":null,"Title":"Enable parallelism in Windows test agent if parallelism not causing network issue","State":"open","Body":"Related to this PR: https://github.com/dotnet/machinelearning/pull/4776 \r\n\r\nWe met download/restore timeout issue on some build agent, one possible reason cause this is restore consuming too much connections and affected the network performance.\r\n\r\nIn this PR we are trying to disable parallelism in all test agents to see if we mitigate the issue, otherwise we should enable parallelism again in windows test agent as according to @sharwell 's experience parallelism should not cause problem.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4788","RelatedDescription":"Open issue \"Enable parallelism in Windows test agent if parallelism not causing network issue\" (#4788)"}],"ResultType":"GitHubIssue"}},"RunOn":"2020-02-08T05:30:41.9031461Z","RunDurationInMilliseconds":765}