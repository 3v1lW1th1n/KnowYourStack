{"Data":{"GitHub":{"Issues":[{"Id":"506936790","IsPullRequest":true,"CreatedAt":"2019-10-16T05:19:03","Actor":"harshithapv","Number":"4336","RawContent":null,"Title":"Added learning rate scheduling for cifar and options for using resnet_v2_50 model","State":"closed","Body":"The following has been added:\r\n1. Added learning rate scheduling for CIFAR-10.\r\n2. Added a custom class called GradientDescentOptimizerTensor that takes learning rate as a tensor. A temporary fix until TF .Net updates their function to take learning rate as tensor.\r\n3. Modied code to take resnet_v2_50 model.\r\n4. Addressed most of Yael's comments from PR #4242.","Url":"https://github.com/dotnet/machinelearning/pull/4336","RelatedDescription":"Closed or merged PR \"Added learning rate scheduling for cifar and options for using resnet_v2_50 model\" (#4336)"},{"Id":"507501005","IsPullRequest":true,"CreatedAt":"2019-10-15T21:49:35","Actor":"eerhardt","Number":"4338","RawContent":null,"Title":"Remove TensorFlow.Redist since we no longer use it.","State":"open","Body":"\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4338","RelatedDescription":"Open PR \"Remove TensorFlow.Redist since we no longer use it.\" (#4338)"},{"Id":"507278615","IsPullRequest":true,"CreatedAt":"2019-10-15T14:21:21","Actor":"eerhardt","Number":"4337","RawContent":null,"Title":"Update OnnxRuntime to latest version.","State":"open","Body":"OnnxRuntime supports win-x86, so start running tests on the win-x86 leg.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4337","RelatedDescription":"Open PR \"Update OnnxRuntime to latest version.\" (#4337)"},{"Id":"506853848","IsPullRequest":false,"CreatedAt":"2019-10-14T21:58:41","Actor":"NeoXtreem","Number":"4333","RawContent":null,"Title":"Appending to an empty estimator results in ArgumentOutOfRangeException during Evaluate","State":"closed","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10.0.18362\r\n- **.NET Version (eg., dotnet --info)**: 3.0.100\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\n```\r\nvar mlContext = new MLContext(0);\r\nvar trainTestData = mlContext.Data.TrainTestSplit(mlContext.Data.LoadFromEnumerable(data));\r\nvar pipeline = new EstimatorChain<TransformerChain<RegressionPredictionTransformer<FastTreeRegressionModelParameters>>>();\r\n\r\npipeline.Append(mlContext.Transforms.CopyColumns(\"Label\", \"Foo\")\r\n    .Append(mlContext.Transforms.Concatenate(\"Features\", \"Bar\", \"Baz\"))\r\n    .Append(mlContext.Regression.Trainers.FastTree()));\r\n\r\nvar model = pipeline.Fit(trainTestData.TrainSet);\r\nmlContext.Regression.Evaluate(model.Transform(trainTestData.TestSet));\r\n```\r\n\r\n- **What happened?**\r\n`Evaluate` throws `ArgumentOutOfRangeException`:\r\n> Label column 'Label' not found (Parameter 'schema')\r\n\r\n- **What did you expect?**\r\nTo behave the same as this code:\r\n```\r\nvar mlContext = new MLContext(0);\r\nvar trainTestData = mlContext.Data.TrainTestSplit(mlContext.Data.LoadFromEnumerable(data));\r\n\r\nvar pipeline = mlContext.Transforms.CopyColumns(\"Label\", \"Foo\")\r\n    .Append(mlContext.Transforms.Concatenate(\"Features\", \"Bar\", \"Baz\"))\r\n    .Append(mlContext.Regression.Trainers.FastTree());\r\n\r\nvar model = pipeline.Fit(trainTestData.TrainSet);\r\nmlContext.Regression.Evaluate(model.Transform(trainTestData.TestSet));\r\n```\r\n...which indeed of course doesn't throw an exception.  Instantiating a new `EstimatorChain` object should create an empty estimator chain as indicated by the summary for the default constructor.  I would then expect to just be able to append estimators to it as if I had started with creating one from a concrete estimator that I then appended further estimators to.","Url":"https://github.com/dotnet/machinelearning/issues/4333","RelatedDescription":"Closed issue \"Appending to an empty estimator results in ArgumentOutOfRangeException during Evaluate\" (#4333)"},{"Id":"506894336","IsPullRequest":false,"CreatedAt":"2019-10-14T21:56:58","Actor":"Dmitry-A","Number":"4335","RawContent":null,"Title":"API for loading ONNX model lacks access to input schema and is not consistent with regular model loading API","State":"open","Body":"Current API for loading models is as follows:\r\n            ITransformer mlModel = mlContext.Model.Load(path, out DataViewSchema inputSchema);\r\n\r\nNote you have a transformer back and the input schema, plus transformer gives access to output schema as well.\r\nFor ONNX the same functionality will look something like this:\r\n            var estimator = mlContext.Transforms.ApplyOnnxModel(path);\r\n            var dataView = mlContext.Data.LoadFromEnumerable<ModelInput>(new ModelInput[] { });\r\n            // Fit() will check the input schema of the model against the input dataview you're passing in\r\n            var transformer = estimator.Fit(dataView);\r\n\r\nNote there's no way to get the input schema, you have to know it before you can do anything with the model.  Also Fit() call is confusing and inconsistent with the much cleaner API above, it doesn't actually do anything other than verify the [unavailable from public interface] input schema against the schema that got loaded with the model.\r\n\r\nThe fix is to bring ONNX model loading API in line with what we have for regular ML.NET models.","Url":"https://github.com/dotnet/machinelearning/issues/4335","RelatedDescription":"Open issue \"API for loading ONNX model lacks access to input schema and is not consistent with regular model loading API\" (#4335)"},{"Id":"506877053","IsPullRequest":true,"CreatedAt":"2019-10-14T21:13:00","Actor":"NeoXtreem","Number":"4334","RawContent":null,"Title":"Add non-generic IEstimator interface to be more SOLID","State":"open","Body":"This is a fairly trivial change, but makes the `IEstimator` interface comply with SOLID more, particularly interface segregation.  It is useful in that code need only declare a variable of `IEstimator` type (instead of `IEstimator<ITransformer>`) if they wish only to access `GetOutputSchema` which does not require the generic type parameter `TTransformer`.  Or where they only need to cast to an `IEstimator` where the generic is unimportant such as the usage of the null-coalescing operator in the following example: \r\n```\r\nIEstimator<ITransformer> pipeline = null;\r\n\r\nforeach (var label in new[] {\"Foo1\", \"Foo2\"})\r\n{\r\n    var estimator = mlContext.Transforms.CopyColumns(\"Label\", label)\r\n        .Append(mlContext.Transforms.Concatenate(\"Features\", \"Baz\", \"Bar\"))\r\n        .Append(mlContext.Regression.Trainers.FastTree());\r\n\r\n    pipeline = pipeline?.Append(estimator) ?? (IEstimator)estimator;\r\n}\r\n```\r\n\r\nAlso fixed a couple of typos in `EstimatorChain` that I noticed.","Url":"https://github.com/dotnet/machinelearning/pull/4334","RelatedDescription":"Open PR \"Add non-generic IEstimator interface to be more SOLID\" (#4334)"},{"Id":"506060969","IsPullRequest":false,"CreatedAt":"2019-10-14T18:45:48","Actor":"CESARDELATORRE","Number":"4325","RawContent":null,"Title":"[Image Classification DNN based] Cannot use GPU with NuGet 0.16.0-preview2","State":"closed","Body":"The NuGet package 'Microsoft.ML.Dnn 0.16.0-preview2' is including a dependency on the CPU-based `SciSharp.TensorFlow.Redist` package: \r\n\r\n![image](https://user-images.githubusercontent.com/1712635/66684962-1a93f400-ec30-11e9-96a2-fdb675fa9e20.png)\r\n\r\nTherefore the user cannot reference and use the `SciSharp.TensorFlow.Redist-Windows-GPU` package because the CPU version has preference, afaik.  \r\n\r\nThe NuGet package `Microsoft.ML.Dnn 0.16.0-preview2` must not reference any of those, so depending on what SciSharp TensorFlow redist (CPU vs. GPU) the user is referencing from his code, it'll use CPU or GPU.\r\n\r\nI know this is being fixed in the ML.NET source code repo with this PR after my heads-up:\r\nhttps://github.com/dotnet/machinelearning/pull/4324\r\n\r\n**But users mostly use the NuGet packages so we probably need to publish a new fix-patch-release for that package like the following?**:\r\n\r\n`Microsoft.ML.Dnn 0.16.1-preview2` ?\r\n\r\nAny other solution so users can try Image Classification with GPU when using the NuGet packages?","Url":"https://github.com/dotnet/machinelearning/issues/4325","RelatedDescription":"Closed issue \"[Image Classification DNN based] Cannot use GPU with NuGet 0.16.0-preview2\" (#4325)"},{"Id":"506717531","IsPullRequest":false,"CreatedAt":"2019-10-14T16:57:17","Actor":"gagoole","Number":"4332","RawContent":null,"Title":"How to update model in ml .net every day?","State":"closed","Body":"Hi every body.\r\nHow to update model in ml .net every day to increase accuracy?","Url":"https://github.com/dotnet/machinelearning/issues/4332","RelatedDescription":"Closed issue \"How to update model in ml .net every day?\" (#4332)"},{"Id":"506652457","IsPullRequest":false,"CreatedAt":"2019-10-14T13:25:57","Actor":"PeterPann23","Number":"4331","RawContent":null,"Title":"Not sample how to call this, also fit normaly takes only 1 argument...","State":"open","Body":"The following code does not allow to call fit using the pipeline\n            var dataProcessPipeline = GeneratePipelin(data, out var trainingDataView, out var testDataView );\n\n            var options = new LightGbmBinaryTrainer.Options\n            {\n                NumberOfIterations=100\n                , LearningRate=0.2281511\n                , NumberOfLeaves=46\n                , MinimumExampleCountPerLeaf=10\n                , UseCategoricalSplit=false\n                , HandleMissingValue=true\n                , MinimumExampleCountPerGroup=200\n                , MaximumCategoricalSplitPointCount=8\n                , CategoricalSmoothing=10\n                , L2CategoricalRegularization=0.5                \n                , EvaluationMetric = LightGbmBinaryTrainer.Options.EvaluateMetricType.Error\n                , LabelColumnName=nameof(BinaryModelInput.Trend)\n            };\n\n            var trainer = mlContext.BinaryClassification.Trainers.LightGbm(options);\n            //.Append(mlContext.Transforms.Conversion.MapKeyToValue(\"PredictedLabel\", \"PredictedLabel\"));\n\n            var trainingPipeline =dataProcessPipeline.Append(trainer);\n            var model = trainingPipeline.Fit(trainingDataView,testDataView);\nthe training pipeline is of type \n EstimatorChain&lt;BinaryPredictionTransformer&lt;Microsoft.ML.Calibrators.CalibratedModelParametersBase&lt;LightGbmBinaryModelParameters, Microsoft.ML.Calibrators.PlattCalibrator&gt;&gt;&gt;\n\n---\n#### Document Details\n\n⚠ *Do not edit this section. It is required for docs.microsoft.com ➟ GitHub issue linking.*\n\n* ID: fb3687e4-d6ed-52df-b362-de76c9c302c5\n* Version Independent ID: cba9caf7-2b90-28c3-5cfe-ad1b34c3c5eb\n* Content: [LightGbmBinaryTrainer.Fit(IDataView, IDataView) Method (Microsoft.ML.Trainers.LightGbm)](https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.trainers.lightgbm.lightgbmbinarytrainer.fit?view=ml-dotnet#Microsoft_ML_Trainers_LightGbm_LightGbmBinaryTrainer_Fit_Microsoft_ML_IDataView_Microsoft_ML_IDataView_)\n* Content Source: [dotnet/xml/Microsoft.ML.Trainers.LightGbm/LightGbmBinaryTrainer.xml](https://github.com/dotnet/ml-api-docs/blob/live/dotnet/xml/Microsoft.ML.Trainers.LightGbm/LightGbmBinaryTrainer.xml)\n* Product: **dotnet-ml-api**\n* GitHub Login: @sfilipi\n* Microsoft Alias: **johalex**","Url":"https://github.com/dotnet/machinelearning/issues/4331","RelatedDescription":"Open issue \"Not sample how to call this, also fit normaly takes only 1 argument...\" (#4331)"},{"Id":"506484258","IsPullRequest":false,"CreatedAt":"2019-10-14T07:16:22","Actor":"PeterPann23","Number":"4330","RawContent":null,"Title":"Would be nice to know the defaults","State":"open","Body":"When tuning it's important to know something about the defaults as the number of possible combinations is rather large and not knowing where one starts is rather a poor first step trying to optimize a model\n\n---\n#### Document Details\n\n⚠ *Do not edit this section. It is required for docs.microsoft.com ➟ GitHub issue linking.*\n\n* ID: c16a2948-f15c-1e3a-d6c0-1cfaae544d57\n* Version Independent ID: 0447cd1a-a1a3-76da-2ea3-c9f9efc051c1\n* Content: [LightGbmMulticlassTrainer.Options Class (Microsoft.ML.Trainers.LightGbm)](https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.trainers.lightgbm.lightgbmmulticlasstrainer.options?view=ml-dotnet)\n* Content Source: [dotnet/xml/Microsoft.ML.Trainers.LightGbm/LightGbmMulticlassTrainer+Options.xml](https://github.com/dotnet/ml-api-docs/blob/live/dotnet/xml/Microsoft.ML.Trainers.LightGbm/LightGbmMulticlassTrainer+Options.xml)\n* Product: **dotnet-ml-api**\n* GitHub Login: @sfilipi\n* Microsoft Alias: **johalex**","Url":"https://github.com/dotnet/machinelearning/issues/4330","RelatedDescription":"Open issue \"Would be nice to know the defaults\" (#4330)"},{"Id":"506463281","IsPullRequest":false,"CreatedAt":"2019-10-14T06:05:53","Actor":"PeterPann23","Number":"4329","RawContent":null,"Title":"If normalisation is required why does the sample not do this","State":"open","Body":"The trainer is stated to be needing normalisation, the sample does not show this in the pipeline, how is normalisation done?\n\n---\n#### Document Details\n\n⚠ *Do not edit this section. It is required for docs.microsoft.com ➟ GitHub issue linking.*\n\n* ID: 98e5fc20-effa-58e7-0271-2380fdb73bd9\n* Version Independent ID: 71cdb61f-ae25-9a4d-3c19-16d17ab81694\n* Content: [StandardTrainersCatalog.LinearSvm Method (Microsoft.ML)](https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.standardtrainerscatalog.linearsvm?view=ml-dotnet#Microsoft_ML_StandardTrainersCatalog_LinearSvm_Microsoft_ML_BinaryClassificationCatalog_BinaryClassificationTrainers_Microsoft_ML_Trainers_LinearSvmTrainer_Options_)\n* Content Source: [dotnet/xml/Microsoft.ML/StandardTrainersCatalog.xml](https://github.com/dotnet/ml-api-docs/blob/live/dotnet/xml/Microsoft.ML/StandardTrainersCatalog.xml)\n* Product: **dotnet-ml-api**\n* GitHub Login: @sfilipi\n* Microsoft Alias: **johalex**","Url":"https://github.com/dotnet/machinelearning/issues/4329","RelatedDescription":"Open issue \"If normalisation is required why does the sample not do this\" (#4329)"},{"Id":"505984007","IsPullRequest":true,"CreatedAt":"2019-10-13T23:39:16","Actor":"bpstark","Number":"4324","RawContent":null,"Title":"Fix nuget dependency for Dnn","State":"closed","Body":"With change to allow users to support GPU, need to remove the dependency\r\non TF redist from nuget. It will now be up to the user to add a\r\ndependency on the correct nuget, such that they can choose to use either\r\nthe GPU or the CPU.\r\n\r\nfixes #4325","Url":"https://github.com/dotnet/machinelearning/pull/4324","RelatedDescription":"Closed or merged PR \"Fix nuget dependency for Dnn\" (#4324)"},{"Id":"506334961","IsPullRequest":false,"CreatedAt":"2019-10-13T14:48:15","Actor":"PaulDMendoza","Number":"4328","RawContent":null,"Title":"How do I convert topics to words?","State":"open","Body":"The example is missing the step where the topics identified are converted to a high level word that describes the topics for each document. Can you add that bit to the example?\n\n---\n#### Document Details\n\n⚠ *Do not edit this section. It is required for docs.microsoft.com ➟ GitHub issue linking.*\n\n* ID: 87b08415-641d-4246-280f-b19e3baa8857\n* Version Independent ID: 30d278f5-27f7-eee4-141f-d05dc1d34bfa\n* Content: [TextCatalog.LatentDirichletAllocation(TransformsCatalog+TextTransforms, String, String, Int32, Single, Single, Int32, Int32, Int32, Int32, Int32, Int32, Int32, Boolean) Method (Microsoft.ML)](https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.textcatalog.latentdirichletallocation?view=ml-dotnet#feedback)\n* Content Source: [dotnet/xml/Microsoft.ML/TextCatalog.xml](https://github.com/dotnet/ml-api-docs/blob/live/dotnet/xml/Microsoft.ML/TextCatalog.xml)\n* Product: **dotnet-ml-api**\n* GitHub Login: @sfilipi\n* Microsoft Alias: **johalex**","Url":"https://github.com/dotnet/machinelearning/issues/4328","RelatedDescription":"Open issue \"How do I convert topics to words?\" (#4328)"},{"Id":"506265611","IsPullRequest":false,"CreatedAt":"2019-10-13T02:55:23","Actor":"CBrauer","Number":"4327","RawContent":null,"Title":" ML.NET aborted with \"Training cancelled\"","State":"open","Body":"I tried to do a regression model using the latest ML.NET and Visual Studio 2019.\r\nHere is a screen shot:\r\n\r\n### Issue\r\n![image](https://user-images.githubusercontent.com/1317234/66710251-75f5dd00-ed29-11e9-8716-e715a96650bd.png)\r\n\r\nMy dataset is located at:\r\nhttps://github.com/CBrauer/CypressPoint.github.io/blob/master/rocket-train-regress.zip.\r\n\r\nI don't know where the log file is.  It's not my my Project directory.  Why not?\r\n\r\nCharles\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4327","RelatedDescription":"Open issue \" ML.NET aborted with \"Training cancelled\"\" (#4327)"},{"Id":"506062597","IsPullRequest":false,"CreatedAt":"2019-10-11T21:23:51","Actor":"CESARDELATORRE","Number":"4326","RawContent":null,"Title":"Move the Image Classification from the Experimental package (0.16) to a stable package heading to 1.4 GA","State":"closed","Body":"We want to mark the ImageClassification DNN based as a \"stable API\" when we ship 1.4 GA.\r\n\r\nHowever, it is currently in the Experimental package `Microsoft.ML.Dnn 0.16.0-preview2`, (**0.16**).\r\n\r\nWe should move the ImageClassification DNN to a stable package.\r\n\r\nOr we could also maintain the `Microsoft.ML.Dnn` package and simply change the version to 1.4. \r\n","Url":"https://github.com/dotnet/machinelearning/issues/4326","RelatedDescription":"Closed issue \"Move the Image Classification from the Experimental package (0.16) to a stable package heading to 1.4 GA\" (#4326)"},{"Id":"505538543","IsPullRequest":false,"CreatedAt":"2019-10-10T22:15:36","Actor":"eerhardt","Number":"4323","RawContent":null,"Title":"Move DatabaseLoader from the Experimental package","State":"open","Body":"We want to mark the DatabaseLoader as a \"stable API\" when we ship 1.4. However, it is currently in the Experimental package, which will never be marked as stable.\r\n\r\nWe should move the DatabaseLoader to a stable package.\r\n\r\nIf I get a vote, my vote would be to add it to the core `Microsoft.ML` package, next to TextLoader. DatabaseLoader adds no extra dependencies, so I think it is completely fine to add it to the `Microsoft.ML` package.","Url":"https://github.com/dotnet/machinelearning/issues/4323","RelatedDescription":"Open issue \"Move DatabaseLoader from the Experimental package\" (#4323)"},{"Id":"505475143","IsPullRequest":false,"CreatedAt":"2019-10-10T19:49:31","Actor":"hobbsa","Number":"4322","RawContent":null,"Title":"LDA Get Words for Topics","State":"open","Body":"### System information\r\n\r\n- **Win10\r\n- **.NET 4.7.2\r\n- **ML.NET 1.3.1\r\n\r\nI am trying to get the top N words for each topic after an LDA Transform but cannot seem to figure out how to do.  I've used Infer.Net and it returns the topics and top 20 words, is there a way to do it in ML.NET using the LDA Xform?  I've used relfection to look through almost everything in the xformer but cannot seem to find anything that would work?\r\n\r\nThe goal is to use the top N words to label a topic for display and to further determine if we need more/less topics based on repeating words.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4322","RelatedDescription":"Open issue \"LDA Get Words for Topics\" (#4322)"},{"Id":"504922836","IsPullRequest":true,"CreatedAt":"2019-10-09T22:11:08","Actor":"antoniovs1029","Number":"4321","RawContent":null,"Title":"Addresses #4226 . Fixes problem when loading NormalizerTransformer from disk.","State":"open","Body":"Addresses and actually solves issue #4226 by fixing [the problem with loading a NormalizerTransformer from disk](https://github.com/dotnet/machinelearning/issues/4226#issuecomment-532902543), where the NormalizerTransformer is supposed to work with multidimensional vectors as input.\r\n\r\nAlthough this PR actually fixes that issue, another problem [is described in one comment](https://github.com/dotnet/machinelearning/issues/4226#issuecomment-533772062) of the issue. This other problem is related to Resnet18, and is independent of the problem here fixed. Solving any of these two problems actually solve this issue, but perhaps the issue shall remain open until both problems are fixed.\r\n\r\n### The solution\r\n- I changed the way NormalizerTransformers are saved and loaded, so that it included the information of the dimensions of the vector it has as input. This changes maintain backward compatibility in that it is still possible to load models that were saved with previous binary format . But notice that the original problem described in the issue will persist for models that were saved before the changes made in this PR... it would be necessary to save the model with the updated save method in order to avoid that specific problem when working with multidimensional vectors.\r\n\r\n- I added a 3 test cases: one reproducing a very similar problem as in the original issue, another that tests a simplified version of the original problem, and another that checks that backward compatibility is still maintained.","Url":"https://github.com/dotnet/machinelearning/pull/4321","RelatedDescription":"Open PR \"Addresses #4226 . Fixes problem when loading NormalizerTransformer from disk.\" (#4321)"},{"Id":"507537183","IsPullRequest":false,"CreatedAt":"2019-10-09T21:54:38","Actor":"briacht","Number":"4339","RawContent":null,"Title":"Can't find label when file header start with #","State":"open","Body":"Using VS 2019 (16.2.5).\r\n\r\nI selected the multi-class classification scenario and used the [iris-train.txt dataset](https://github.com/dotnet/machinelearning-samples/blob/master/samples/csharp/getting-started/MulticlassClassification_Iris/IrisClassification/Data/iris-train.txt). I had to change \"#Label\" column header to \"Label\" for it to Train properly.\r\n\r\nAfter training, when I try to Predict in the Evaluate screen using the pre-filled values, I get the following message:\r\n\r\n![image](https://user-images.githubusercontent.com/10437687/66523316-82b5cf00-eaa4-11e9-8ccd-654341964ed9.png)\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4339","RelatedDescription":"Open issue \"Can't find label when file header start with #\" (#4339)"},{"Id":"504337044","IsPullRequest":true,"CreatedAt":"2019-10-09T21:07:31","Actor":"codemzs","Number":"4315","RawContent":null,"Title":"Release notes for 1.4.0-preview2 and 0.16.0-preview2.","State":"closed","Body":"We have released 1.4.0-preview2 and 0.16.0-preview2 versions of our nugets on nuget.org. These are the release notes.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4315","RelatedDescription":"Closed or merged PR \"Release notes for 1.4.0-preview2 and 0.16.0-preview2.\" (#4315)"},{"Id":"504149555","IsPullRequest":false,"CreatedAt":"2019-10-09T16:43:57","Actor":"deiruch","Number":"4311","RawContent":null,"Title":"Documentation should state the default values","State":"closed","Body":"Knowing the default value of this option would be nice.\n\n---\n#### Document Details\n\n⚠ *Do not edit this section. It is required for docs.microsoft.com ➟ GitHub issue linking.*\n\n* ID: 68ab420f-a92f-61a5-6457-4434ec28fa31\n* Version Independent ID: c03e6492-9c30-c2bd-0014-7b9ab590864f\n* Content: [MatrixFactorizationTrainer.Options.ApproximationRank Field (Microsoft.ML.Trainers)](https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.trainers.matrixfactorizationtrainer.options.approximationrank?view=ml-dotnet-preview#feedback)\n* Content Source: [dotnet/xml/Microsoft.ML.Trainers/MatrixFactorizationTrainer+Options.xml](https://github.com/dotnet/ml-api-docs/blob/live/dotnet/xml/Microsoft.ML.Trainers/MatrixFactorizationTrainer+Options.xml)\n* Product: **dotnet-ml-api**\n* GitHub Login: @sfilipi\n* Microsoft Alias: **johalex**","Url":"https://github.com/dotnet/machinelearning/issues/4311","RelatedDescription":"Closed issue \"Documentation should state the default values\" (#4311)"},{"Id":"504697947","IsPullRequest":false,"CreatedAt":"2019-10-09T16:39:31","Actor":"fradav","Number":"4318","RawContent":null,"Title":"Interop with C++ (from/to)","State":"closed","Body":"### System information\r\n\r\n- **OS version/distro**:\r\nNot relevant\r\n- **.NET Version (eg., dotnet --info)**: \r\n.core 3.0\r\n\r\n### Issue\r\n\r\nIs there a way to interop from plain C++ with ml.net ? There is a lot of very useful ideas in ml.net (like DataView) and it would make sense to use them in a C++ project for example.  I know there is P/Invoke, but perhaps could we use a more streamlined way?","Url":"https://github.com/dotnet/machinelearning/issues/4318","RelatedDescription":"Closed issue \"Interop with C++ (from/to)\" (#4318)"},{"Id":"504747488","IsPullRequest":false,"CreatedAt":"2019-10-09T16:30:28","Actor":"luisquintanilla","Number":"4319","RawContent":null,"Title":"[Image Classification API] Schema mismatch when loading images using file paths","State":"closed","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10 \r\n- **.NET Version (eg., dotnet --info)**:  .NET Core 2.2\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\n\r\nUpdated from Microsoft.ML 1.4.0-preview to 1.4.0-preview2. Using code that worked, I ran into an issue when loading images.\r\n\r\n- **What happened?**\r\n\r\nAn ArgumentOutOfRangeException was thrown due to a schema mismatch.\r\n\r\n```text\r\nSystem.ArgumentOutOfRangeException: 'Schema mismatch for input column 'ImagePath': expected Vector<Byte>, got String\r\nParameter name: inputSchema'\r\n```\r\n\r\n- **What did you expect?**\r\n\r\nThe model to train.\r\n\r\n### Source code / logs\r\n\r\n\r\nRepo with source code : https://github.com/luisquintanilla/DeppLearning_ImageClassification_API\r\n\r\nThis repo uses 1.4.0-preview and works in training a model. If the same code is used with 1.4.0-preview2, the error mentioned in this issue occurs.","Url":"https://github.com/dotnet/machinelearning/issues/4319","RelatedDescription":"Closed issue \"[Image Classification API] Schema mismatch when loading images using file paths\" (#4319)"},{"Id":"504753469","IsPullRequest":false,"CreatedAt":"2019-10-09T16:14:48","Actor":"AceHack","Number":"4320","RawContent":null,"Title":"Export to ONNX","State":"open","Body":"What is the state of exporting to ONNX, I noticed it's missing from the latest documentation and only in the 0.15 docs.  Is it still supported?\r\n\r\nThanks.","Url":"https://github.com/dotnet/machinelearning/issues/4320","RelatedDescription":"Open issue \"Export to ONNX\" (#4320)"},{"Id":"504564460","IsPullRequest":false,"CreatedAt":"2019-10-09T10:39:11","Actor":"nighotatul","Number":"4317","RawContent":null,"Title":"how we can get number of row processed on each node to calculate score each node in decision tree for fasttree trainer?","State":"open","Body":"@yaeldekel - how we can get number of row processed on each node \r\nto calculate score each node in decision tree for fasttree trainer?\r\nexample:- root node(5000 row processed) then splitting left child (3000 row processed)\r\n and right child(2000 row processed)  again splitting on left child one have leaf node and second node have decision node(1000 row processed) to split again.\r\nso that how we get how many row has been processed to each node?\r\n                                                    ","Url":"https://github.com/dotnet/machinelearning/issues/4317","RelatedDescription":"Open issue \"how we can get number of row processed on each node to calculate score each node in decision tree for fasttree trainer?\" (#4317)"},{"Id":"504360827","IsPullRequest":false,"CreatedAt":"2019-10-09T01:38:43","Actor":"AceHack","Number":"4316","RawContent":null,"Title":"AutoTrain issues on Mac","State":"open","Body":"When running auto-train I get errors like the following:\r\n\r\nI'm wondering how I can fix these errors.  Thanks.\r\n\r\n`\r\nmlnet auto-train --task binary-classification --dataset ./training_data_v2.csv --label-column-name Class --max-exploration-time 3600 --verbosity=diag --has-header true --name Model\r\n`\r\n\r\nSystem.DllNotFoundException: Unable to load shared library 'lib_lightgbm' or one of its dependencies. In order to help diagnose loading problems, consider setting the DYLD_PRINT_LIBRARIES environment variable: dlopen(liblib_lightgbm, 1): image not found\r\n   at Microsoft.ML.Trainers.LightGbm.WrappedLightGbmInterface.DatasetCreateFromSampledColumn(IntPtr sampleValuePerColumn, IntPtr sampleIndicesPerColumn, Int32 numCol, Int32[] sampleNonZeroCntPerColumn, Int32 numSampleRow, Int32 numTotalRow, String parameters, IntPtr& ret)\r\n   at Microsoft.ML.Trainers.LightGbm.Dataset..ctor(Double[][] sampleValuePerColumn, Int32[][] sampleIndicesPerColumn, Int32 numCol, Int32[] sampleNonZeroCntPerColumn, Int32 numSampleRow, Int32 numTotalRow, String param, Single[] labels, Single[] weights, Int32[] groups)\r\n   at Microsoft.ML.Trainers.LightGbm.LightGbmTrainerBase`4.CreateDatasetFromSamplingData(IChannel ch, Factory factory, Int32 numRow, String param, Single[] labels, Single[] weights, Int32[] groups, CategoricalMetaData catMetaData, Dataset& dataset)\r\n   at Microsoft.ML.Trainers.LightGbm.LightGbmTrainerBase`4.LoadTrainingData(IChannel ch, RoleMappedData trainData, CategoricalMetaData& catMetaData)\r\n   at Microsoft.ML.Trainers.LightGbm.LightGbmTrainerBase`4.TrainModelCore(TrainContext context)\r\n   at Microsoft.ML.Trainers.TrainerEstimatorBase`2.TrainTransformer(IDataView trainSet, IDataView validationSet, IPredictor initPredictor)\r\n   at Microsoft.ML.Data.EstimatorChain`1.Fit(IDataView input)\r\n   at Microsoft.ML.AutoML.RunnerUtil.TrainAndScorePipeline[TMetrics](MLContext context, SuggestedPipeline pipeline, IDataView trainData, IDataView validData, String labelColumn, IMetricsAgent`1 metricsAgent, ITransformer preprocessorTransform, FileInfo modelFileInfo, DataViewSchema modelInputSchema, AutoMLLogger logger)\r\n[Source=AutoML, Kind=Trace] Evaluating pipeline xf=TextFeaturizing{ col=Title_tf:Title} xf=ColumnCopying{ col=Features:Title_tf} xf=Normalizing{ col=Features:Features} tr=SymbolicSgdLogisticRegressionBinary{}  cache=+\r\n[Source=AutoML, Kind=Error] Pipeline crashed: xf=TextFeaturizing{ col=Title_tf:Title} xf=ColumnCopying{ col=Features:Title_tf} xf=Normalizing{ col=Features:Features} tr=SymbolicSgdLogisticRegressionBinary{}  cache=+ . Exception: System.TypeInitializationException: The type initializer for 'Native' threw an exception. ---> System.DllNotFoundException: Unable to load shared library 'MklImports' or one of its dependencies. In order to help diagnose loading problems, consider setting the DYLD_PRINT_LIBRARIES environment variable: dlopen(libMklImports, 1): image not found\r\n   at Microsoft.ML.Trainers.SymbolicSgdLogisticRegressionBinaryTrainer.Native.ErrorMessage(Int32 status)\r\n   at Microsoft.ML.Trainers.SymbolicSgdLogisticRegressionBinaryTrainer.Native..cctor()\r\n   --- End of inner exception stack trace ---\r\n   at Microsoft.ML.Trainers.SymbolicSgdLogisticRegressionBinaryTrainer.Native.LearnAll(InputDataManager inputDataManager, Boolean tuneLR, Single& lr, Single l2Const, Single piw, Span`1 weightVector, Single& bias, Int32 numFeatres, Int32 numPasses, Int32 numThreads, Boolean tuneNumLocIter, Int32& numLocIter, Single tolerance, Boolean needShuffle, Boolean shouldInitialize, GCHandle stateGCHandle, ChannelCallBack info)\r\n   at Microsoft.ML.Trainers.SymbolicSgdLogisticRegressionBinaryTrainer.TrainCore(IChannel ch, RoleMappedData data, LinearModelParameters predictor, Int32 weightSetCount)\r\n   at Microsoft.ML.Trainers.SymbolicSgdLogisticRegressionBinaryTrainer.TrainModelCore(TrainContext context)\r\n   at Microsoft.ML.Trainers.TrainerEstimatorBase`2.TrainTransformer(IDataView trainSet, IDataView validationSet, IPredictor initPredictor)\r\n   at Microsoft.ML.Data.EstimatorChain`1.Fit(IDataView input)\r\n   at Microsoft.ML.AutoML.RunnerUtil.TrainAndScorePipeline[TMetrics](MLContext context, SuggestedPipeline pipeline, IDataView trainData, IDataView validData, String labelColumn, IMetricsAgent`1 metricsAgent, ITransformer preprocessorTransform, FileInfo modelFileInfo, DataViewSchema modelInputSchema, AutoMLLogger logger)\r\n[Source=AutoML, Kind=Trace] 4\tNaN\t00:00:06.7512942\txf=TextFeaturizing{ col=Title_tf:Title} xf=ColumnCopying{ col=Features:Title_tf} xf=Normalizing{ col=Features:Features} tr=SymbolicSgdLogisticRegressionBinary{}  cache=+\r\n|4    SymbolicSgdLogisticRegressionBinary       NaN      NaN      NaN       NaN       6.8          0             |\r\nSystem.TypeInitializationException: The type initializer for 'Native' threw an exception. ---> System.DllNotFoundException: Unable to load shared library 'MklImports' or one of its dependencies. In order to help diagnose loading problems, consider setting the DYLD_PRINT_LIBRARIES environment variable: dlopen(libMklImports, 1): image not found\r\n   at Microsoft.ML.Trainers.SymbolicSgdLogisticRegressionBinaryTrainer.Native.ErrorMessage(Int32 status)\r\n   at Microsoft.ML.Trainers.SymbolicSgdLogisticRegressionBinaryTrainer.Native..cctor()\r\n   --- End of inner exception stack trace ---\r\n   at Microsoft.ML.Trainers.SymbolicSgdLogisticRegressionBinaryTrainer.Native.LearnAll(InputDataManager inputDataManager, Boolean tuneLR, Single& lr, Single l2Const, Single piw, Span`1 weightVector, Single& bias, Int32 numFeatres, Int32 numPasses, Int32 numThreads, Boolean tuneNumLocIter, Int32& numLocIter, Single tolerance, Boolean needShuffle, Boolean shouldInitialize, GCHandle stateGCHandle, ChannelCallBack info)\r\n   at Microsoft.ML.Trainers.SymbolicSgdLogisticRegressionBinaryTrainer.TrainCore(IChannel ch, RoleMappedData data, LinearModelParameters predictor, Int32 weightSetCount)\r\n   at Microsoft.ML.Trainers.SymbolicSgdLogisticRegressionBinaryTrainer.TrainModelCore(TrainContext context)\r\n   at Microsoft.ML.Trainers.TrainerEstimatorBase`2.TrainTransformer(IDataView trainSet, IDataView validationSet, IPredictor initPredictor)\r\n   at Microsoft.ML.Data.EstimatorChain`1.Fit(IDataView input)\r\n   at Microsoft.ML.AutoML.RunnerUtil.TrainAndScorePipeline[TMetrics](MLContext context, SuggestedPipeline pipeline, IDataView trainData, IDataView validData, String labelColumn, IMetricsAgent`1 metricsAgent, ITransformer preprocessorTransform, FileInfo modelFileInfo, DataViewSchema modelInputSchema, AutoMLLogger logger)\r\n[Source=AutoML, Kind=Trace] Evaluating pipeline xf=TextFeaturizing{ col=Title_tf:Title} xf=ColumnCopying{ col=Features:Title_tf} xf=Normalizing{ col=Features:Features} tr=LinearSvmBinary{}  cache=+\r\n[Source=AutoML, Kind=Trace] 5\t0.999542783117267\t00:00:10.1887405\txf=TextFeaturizing{ col=Title_tf:Title} xf=ColumnCopying{ col=Features:Title_tf} xf=Normalizing{ col=Features:Features} tr=LinearSvmBinary{}  cache=+\r\n|5    LinearSvmBinary                        0.9995   1.0000   1.0000    0.9997      10.2          0             |\r\n[Source=AutoML, Kind=Trace] Evaluating pipeline xf=TextFeaturizing{ col=Title_tf:Title} xf=ColumnCopying{ col=Features:Title_tf} tr=FastTreeBinary{}  cache=-","Url":"https://github.com/dotnet/machinelearning/issues/4316","RelatedDescription":"Open issue \"AutoTrain issues on Mac\" (#4316)"},{"Id":"504279746","IsPullRequest":true,"CreatedAt":"2019-10-08T21:06:16","Actor":"ashbhandare","Number":"4314","RawContent":null,"Title":"Add functionality for re-downloading incomplete pre-trained model files. Fixes #4234","State":"open","Body":"Previously, when the ImageClassification pipeline is run for the first time, the meta graph of the model (ResnetV2101 or InceptionV3) is downloaded, and in the subsequent runs, it is reused. If the run is interrupted while the download is in progress(eg.: by stopping), the protobuff is partially downloaded. This throws an error when this incomplete graph is attempted to be read in the subsequent runs.\r\n\r\nThis change checks if the current existing file size is the same as the size of the file to be downloaded, and re-downloads the said file if it isn't.\r\nWIP to get initial feedback and add any tests necessary.\r\n\r\nFixes #4234","Url":"https://github.com/dotnet/machinelearning/pull/4314","RelatedDescription":"Open PR \"Add functionality for re-downloading incomplete pre-trained model files. Fixes #4234\" (#4314)"},{"Id":"504207567","IsPullRequest":false,"CreatedAt":"2019-10-08T18:33:37","Actor":"CESARDELATORRE","Number":"4313","RawContent":null,"Title":"[LoadImages estimator] Set useImageType: false as by default value","State":"open","Body":"In the current preview, in the LoadImages estimator, the parameter useImageType is by default true meaning that it'd use ImageDataView type. false indicates we want the image as a VBuffer<byte>.\r\n\r\nSince the ImageClassification API needs the image as VBuffer<byte> (ImageDataView type is only used for other existing/older scenarios with transforms like resize image, extract pixels etc...) it makes sense to set the parameter useImageType to false as default (to use VBuffer<byte>). \r\n\r\nHowever, that change will be convenient for the new ImageClassification API but it would break older code using the LoadImages estimator. Right?\r\n\r\nWe might need to decide what scenarios we want to favor here for this default value...","Url":"https://github.com/dotnet/machinelearning/issues/4313","RelatedDescription":"Open issue \"[LoadImages estimator] Set useImageType: false as by default value\" (#4313)"},{"Id":"504200912","IsPullRequest":true,"CreatedAt":"2019-10-08T18:19:43","Actor":"harishsk","Number":"4312","RawContent":null,"Title":"Add Onnx export support for string processing transformers","State":"open","Body":"This draft PR adds support for exporting to Onnx, the following transformers. \r\n- NgramTransformer\r\n- ValueToKeyMappingTransformer (upgraded support)\r\n- WordTokenizingTransformer\r\n\r\nThis PR also upgrades the version of Google Protobuf library.\r\n\r\nThis work is not ready for merging because this work relies on a new version of the Onnx runtime due to be released later. I am submitting this PR for review now so that this can be merged soon after the release of the runtime. \r\n\r\nPlease review the changes so that I can iterate on the review comments now, before the public release of the ORT.","Url":"https://github.com/dotnet/machinelearning/pull/4312","RelatedDescription":"Open PR \"Add Onnx export support for string processing transformers\" (#4312)"},{"Id":"503765806","IsPullRequest":true,"CreatedAt":"2019-10-08T02:56:12","Actor":"codemzs","Number":"4310","RawContent":null,"Title":"Modify image classification sample to take in-memory image for prediction.","State":"closed","Body":"fixes #4153\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4310","RelatedDescription":"Closed or merged PR \"Modify image classification sample to take in-memory image for prediction.\" (#4310)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-10-16T05:30:40.0421585Z","RunDurationInMilliseconds":649}