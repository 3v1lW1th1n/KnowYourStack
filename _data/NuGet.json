{"Data":{"Blog":{"FeedItems":[{"Title":"Surfacing GitHub Usage for packages on NuGet.org","PublishedOn":"2019-07-17T20:00:23+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"There are several criteria you can use today to evaluate NuGet packages. We received feedback that you would like even more information to help choose the right packages. We&#8217;re excited to...","Href":"https://devblogs.microsoft.com/nuget/surfacing-github-usage-for-packages-on-nuget-org/","RawContent":null},{"Title":"NuGet Spring 2019 Roadmap","PublishedOn":"2019-04-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We published our last NuGet roadmap in June last year. Many of the features announced were major additions to NuGet and we have been hard at work to implement those over the last few months. In this...","Href":"https://devblogs.microsoft.com/nuget/nuget-spring-2019-roadmap/","RawContent":null},{"Title":"Enable repeatable package restores using a lock file","PublishedOn":"2018-12-17T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"With PackageReference, NuGet always tries to produce the same closure of package dependencies if the input package reference list has not changed. However, there are a few scenarios where it may not...","Href":"https://devblogs.microsoft.com/nuget/enable-repeatable-package-restores-using-a-lock-file/","RawContent":null},{"Title":"Lock down your dependencies using configurable trust policies","PublishedOn":"2018-12-05T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For the past several months we have focused on various features to improve package security and trust. Around a year back, we had announced our plans on various signing functionalities that we have...","Href":"https://devblogs.microsoft.com/nuget/lock-down-your-dependencies-using-configurable-trust-policies/","RawContent":null},{"Title":"Improved package debugging experience with the NuGet.org symbol server","PublishedOn":"2018-11-16T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Starting today, you can publish symbol packages to the NuGet.org symbol server. With NuGet.org as a single service provider for libraries and symbols, package authors and consumers will have a...","Href":"https://devblogs.microsoft.com/nuget/improved-package-debugging-experience-with-the-nuget-org-symbol-server/","RawContent":null},{"Title":"Introducing Source Code Link for NuGet packages","PublishedOn":"2018-08-27T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"NuGet.org now supports surfacing source code repository link for NuGet packages. This will enable package authors to surface both the project&#8217;s website and the source repository using the...","Href":"https://devblogs.microsoft.com/nuget/introducing-source-code-link-for-nuget-packages/","RawContent":null},{"Title":"NuGet.org starts repo-signing packages","PublishedOn":"2018-08-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In May, we implemented Stage 1 and enabled support for any NuGet.org user to submit signed packages to NuGet.org. Today, we are announcing Stage 2 of our NuGet package signing journey &#8211; tamper...","Href":"https://devblogs.microsoft.com/nuget/introducing-repository-signatures/","RawContent":null},{"Title":"NuGet Summer 2018 Roadmap","PublishedOn":"2018-07-02T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This blog post provides insights into the NuGet team plans for the upcoming quarter (July &#8211; Sep 2018). In the March 2018 NuGet Spring 2018 Roadmap, we had outlined Package Signing,...","Href":"https://devblogs.microsoft.com/nuget/nuget-summer-2018-roadmap/","RawContent":null},{"Title":"Introducing signed package submissions to NuGet.org","PublishedOn":"2018-05-22T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In September 2017, we announced our plans to improve the security of the NuGet ecosystem by introducing the ability for package authors to sign packages. Today, we want to announce support for any...","Href":"https://devblogs.microsoft.com/nuget/introducing-signed-package-submissions/","RawContent":null},{"Title":"NuGet.org will only support MSA/AAD starting June 1st, 2018","PublishedOn":"2018-05-15T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We had previously announced the deprecation of NuGet.org&#8217;s home-grown authentication in favor of Microsoft accounts (MSA) that will allow us to add support for additional security systems such...","Href":"https://devblogs.microsoft.com/nuget/nuget-org-will-only-support-msa-aad-starting-june/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"10242364132","Type":"IssuesEvent","CreatedAt":"2019-08-20T04:37:54","Actor":"skofman1","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/4687","RelatedDescription":"Closed issue \"Improve searchability on nuget.org\" (#4687) at NuGet/NuGetGallery","RelatedBody":"_From @ChristopherHaws on September 14, 2017 23:39_\n\nHello,\r\n\r\nI find myself using this library a lot, especially in linqpad scripts when I am testing something out. Currently, pretty much the only way to get this library to return in the nuget search results is by typing the exact name of the entire package `Microsoft.Extensions.DependencyInjection`. It would be nice to have a few more tags added to the packages to improve searchability a bit. Some suggestions I would have are:\r\n\r\n- microsoft\r\n- ms\r\n- ioc\r\n\r\nIdeally I would like to be able to type `ms ioc` or `ms di` and have it come back as the first result.\r\n\r\nThanks and keep up the great work! üëç \n\n_Copied from original issue: aspnet/DependencyInjection#582_"},{"Id":"10242311911","Type":"IssuesEvent","CreatedAt":"2019-08-20T04:23:03","Actor":"skofman1","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/4632","RelatedDescription":"Closed issue \"Blog heading is too large on mobile\" (#4632) at NuGet/NuGetGallery","RelatedBody":"![screencapture-blog-nuget-org-20170907-changes-to-nuget-dot-org-service-management-and-performance-improvements-in-china-html-1504818112633](https://user-images.githubusercontent.com/94054/30185235-7b2c3c92-93d5-11e7-93db-855cee3b0944.png)\r\n"},{"Id":"10242304315","Type":"IssuesEvent","CreatedAt":"2019-08-20T04:20:50","Actor":"skofman1","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/4485","RelatedDescription":"Closed issue \"DEV and INT service indexes should not mention vo.msecnd.net\" (#4485) at NuGet/NuGetGallery","RelatedBody":"Steps.\r\n\r\n1. Navigate to the service index for each environment:\r\n    - PROD: https://api.nuget.org/v3/index.json\r\n    - INT: http://api.int.nugettest.org/v3-index/index.json\r\n    - DEV: http://api.dev.nugettest.org/v3-index/index.json\r\n1. Search for \"vo.msecnd.net\".\r\n\r\nOn PROD, no such domains exist since all resources are behind \"nuget.org\" subdomains.\r\n\r\nON INT and PROD, this is not so. We should have consistency here. In every way possible, DEV and INT should mirror PROD, including in DNS configuration."},{"Id":"10242298537","Type":"IssuesEvent","CreatedAt":"2019-08-20T04:19:10","Actor":"skofman1","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/4319","RelatedDescription":"Closed issue \"Use AJAX to reload Edit and Delete Package pages\" (#4319) at NuGet/NuGetGallery","RelatedBody":"Currently the Edit Package and Delete Package pages reload the page each time a new version is selected. It would be better instead to reload the pages' content on the client side using AJAX."},{"Id":"10242289846","Type":"IssuesEvent","CreatedAt":"2019-08-20T04:16:39","Actor":"skofman1","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/4229","RelatedDescription":"Closed issue \"Delete Packages search does not display search result for package titles\" (#4229) at NuGet/NuGetGallery","RelatedBody":"I was trying to delete a specific package on a Support Request. But I could not get any reach result on the admin delete page with the package title.\r\n\r\nI had to figure out the package ID from the nuspec (since the gallery UI does not display it) and then get the results."},{"Id":"10242285245","Type":"IssuesEvent","CreatedAt":"2019-08-20T04:15:21","Actor":"skofman1","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/4203","RelatedDescription":"Closed issue \"V3 catalog shouldn't be created from V2 feed\" (#4203) at NuGet/NuGetGallery","RelatedBody":"Disconnecting V3 from V2 will allow us to add new features to V3 without being forced to add them to V2. \r\nThe solution we chose should prevent this: https://github.com/NuGet/NuGetGallery/issues/3991\r\n"},{"Id":"10242273519","Type":"IssuesEvent","CreatedAt":"2019-08-20T04:11:51","Actor":"skofman1","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/3883","RelatedDescription":"Closed issue \"Show confirmation email delivery failure in UI\" (#3883) at NuGet/NuGetGallery","RelatedBody":"We have been receiving a lot of support requests lately about not having received confirmation emails.\r\n\r\nIt would be useful if we implemented a feature that told users whether or not their confirmation email was successfully delivered.\r\n\r\nThis could include the following states:\r\n- successfully delivered (check your spam folders)\r\n- bounced (recipient rejected the delivery)\r\n- blocked (refused to deliver email)"},{"Id":"10242262128","Type":"IssuesEvent","CreatedAt":"2019-08-20T04:08:18","Actor":"skofman1","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/3676","RelatedDescription":"Closed issue \"NuGetGallery P1 functional test \"PackagesPageTest\" is flaky\" (#3676) at NuGet/NuGetGallery","RelatedBody":"It compares the download count on search service with download count on the gallery and assumes they match. This is not necessarily true."},{"Id":"10242226167","Type":"IssuesEvent","CreatedAt":"2019-08-20T03:57:57","Actor":"skofman1","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/2905","RelatedDescription":"Closed issue \"OData $batch appears slower than it should be \" (#2905) at NuGet/NuGetGallery","RelatedBody":"Executing an odata $batch of FindPackageById calls appears on a fast network appears to perform about the same speed as executing the discrete calls from the client sequentially.\n\nHowever, executing the calls concurrently from the client and you get a big jump in performance - up to 3 times quicker. (Note the only additional work the client is doing is building and parsing the actual batch MIME packet.)\n\nThis indicates the core gallery code and SQL database is capable of significantly better performance with the batch and the gallery is serializing the work in the batch.\n"},{"Id":"10242217991","Type":"IssuesEvent","CreatedAt":"2019-08-20T03:55:40","Actor":"skofman1","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/2854","RelatedDescription":"Closed issue \"Navigation from \"Manage My Packages\" to Edit/Delete\" (#2854) at NuGet/NuGetGallery","RelatedBody":"Current behavior:\nUnder \"Manage my package\" you have two options per package: Edit and Delete.\n\n![image](https://cloud.githubusercontent.com/assets/756703/12224118/dd84ba4c-b7e8-11e5-9899-5c65fdfd1392.png)\n\nBoth options have a Save and Cancel option:\n\n![image](https://cloud.githubusercontent.com/assets/756703/12224106/b27aae1a-b7e8-11e5-8607-f8b2336092c7.png)\n\nI doesn't matter what you click you will be redirected to the package detail page.\n\nI was a bit suprised that - at least - the cancel button didn't go back to the previous page (Manage My Package).\n\nSo, as an idea:\nOption a) When you navigate to Edit/Delete from the Manage My Package page you will be redirected back to it when the user clicks on \"Cancel\"\nOption b) ... \"Cancel\" and \"Save\" will redirect the user to the \"Manage My Package\" page (if this was the \"previous page).\n\nEnhancement to b) If the user clicks on save and he will be redirected to the \"Manage My Package\" page a small hint will be displayed like \"Package XYZ now has a pending edit...\"\n\nResult of this change:\nHopefully managing existing packages on NuGet.org will be more intuitive.\n\nWhat do you think? \n"},{"Id":"10242202428","Type":"IssuesEvent","CreatedAt":"2019-08-20T03:51:12","Actor":"skofman1","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/2836","RelatedDescription":"Closed issue \"DevelopmentDependency is missing from Package\" (#2836) at NuGet/NuGetGallery","RelatedBody":"I tried to move most of the \"features\" from this closed PR https://github.com/NuGet/NuGetGallery/pull/2242 to new PRs and I already noticed that the developmentDependency is missing as an actual property on the PackageMetadata. @maartenba already said that this is currently on your radar (https://github.com/NuGet/NuGetGallery/pull/2834#issuecomment-167067726), which is fine, because on the VerifyPackageUpload page I can at least access the data via the NuSpecReader.\n\nOn the package detail page it seems I can't access the NuSpec directly and there is no DevelopmentDependency property - not even as read only property.\n\nWhen I did the original PR I could do something like this:\nhttps://github.com/robertmuehsig/NuGetGallery/commit/1ad1f4630726055734a0a592326faef1ab851809\n\nIt's not super important IMHO, but I wanted to log it somewhere.\n\nThis would also resolve this issue:\nhttps://github.com/NuGet/NuGetGallery/issues/1874\n"},{"Id":"10242160268","Type":"IssuesEvent","CreatedAt":"2019-08-20T03:39:18","Actor":"skofman1","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/2611","RelatedDescription":"Closed issue \"Alerting when service index can not be read for a number of times\" (#2611) at NuGet/NuGetGallery","RelatedBody":"Add alerting when service index document can not be read for a number of times.\n"},{"Id":"10242153459","Type":"IssuesEvent","CreatedAt":"2019-08-20T03:37:21","Actor":"skofman1","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/2425","RelatedDescription":"Closed issue \"Monitoring needed for data missing between Catalog and Registration, Catalog and Lucene\" (#2425) at NuGet/NuGetGallery","RelatedBody":"See https://github.com/NuGet/NuGetGallery/issues/2424 (closed but should address as part of this issue)\n"},{"Id":"10242084083","Type":"IssuesEvent","CreatedAt":"2019-08-20T03:18:23","Actor":"skofman1","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/974","RelatedDescription":"Closed issue \"Some old packages are missing owners\" (#974) at NuGet/NuGetGallery","RelatedBody":"We need to determine what to do with packages that are missing owners.  Some really old packages are in this state.\n\nHere are a couple examples that have been discovered by users recently:\n1. http://nuget.org/packages/Migrator/\n2. http://nuget.org/packages/MarkdownSharp/\n\nWith the following query, I found there are 59 ownerless packages.\n\n``` sql\nSELECT  Id\nFROM    PackageRegistrations\nWHERE   NOT EXISTS(\n            SELECT  *\n            FROM    PackageRegistrationOwners\n            WHERE   PackageRegistrationKey = PackageRegistrations.[Key]\n        )\n```\n\n<!---\n@huboard:{\"order\":34.00050354003906}\n-->\n"},{"Id":"10241437075","Type":"PullRequestEvent","CreatedAt":"2019-08-20T00:21:07","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7465","RelatedDescription":"Opened pull request \"Embedded icon display on verify package page and indexing message\" (#7465) at NuGet/NuGetGallery","RelatedBody":"Moved the image type identification bits to the `ImageExtensions` to be shared between controllers and services.\r\nUpdated `PackagesController` to identify the image type from the image signature and generate data: url with proper content type."}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"10242203145","Type":"IssuesEvent","CreatedAt":"2019-08-20T03:51:25","Actor":"yanshouwang","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8470","RelatedDescription":"Opened issue \"NU5030 error when pack package with NuGet.exe\" (#8470) at NuGet/Home","RelatedBody":"Please read the following information before posting the issue.\r\n\r\n## Before posting the issue...\r\n\r\n* If you're having trouble with the NuGet.org Website, please post in [NuGetGallery issues](http://github.com/nuget/nugetgallery/issues)\r\n* If you're having trouble with the NuGet client tools (the Visual Studio extension, NuGet.exe command line tool, etc.), you are in the right place.\r\n\r\nRemove the content above here and fill out details below.\r\n\r\n## Details about Problem\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe):\r\n- NuGet.exe\r\n\r\nNuGet version (x.x.x.xxx):\r\n- 5.1.0.6013\r\n\r\ndotnet.exe --version (if appropriate):\r\n- 2.2.401\r\n\r\nVS version (if appropriate):\r\n- VS 2019 16.2.2\r\n\r\nOS version (i.e. win10 v1607 (14393.321)):\r\n- Windows 10, V18362.295\r\n\r\nWorked before? If so, with which NuGet version:\r\nNo\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. My .nuspec use embeded license like this, which the licence file is located in the parent folder\r\n```\r\n<?xml version=\"1.0\"?>\r\n<package>\r\n  <metadata>\r\n    ...\r\n    <license type=\"file\">LICENSE</license>\r\n    ...\r\n  </metadata>\r\n  <files>\r\n    <file src=\"..\\LICENSE\" target=\"\"/>\r\n    ...\r\n  </files>\r\n</package>\r\n```\r\n\r\n2. run nuget pack command, and throw the NU5030 error:\r\nError NU5030: The license file 'LICENSE' does not exist in the package.\r\n\r\n...\r\n\r\n## Other suggested things\r\n\r\n### Verbose Logs\r\n\r\nPlease include verbose logs (NuGet.exe <COMMAND> -verbosity detailed | dotnet.exe <COMMAND> --verbosity diag | etc...)\r\n\r\n### Sample Project\r\n\r\nVery helpful if you can zip a project and paste into this issue!\r\n\r\n"},{"Id":"10240603729","Type":"IssuesEvent","CreatedAt":"2019-08-19T21:15:02","Actor":"dtivel","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8469","RelatedDescription":"Opened issue \"Test:  NetCoreTransitivePackageReferenceLimitAsync is flaky\" (#8469) at NuGet/Home","RelatedBody":"Test `NetCoreTransitivePackageReferenceLimitAsync` is flaky.\r\n```\r\nExpected True because newtonsoft.json/9.0.1 should be installed in TestProject3, but found False.\r\n```\r\nCallstack:\r\n```\r\n   at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)\r\n   at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)\r\n   at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)\r\n   at FluentAssertions.Execution.AssertionScope.FailWith(String message, Object[] args)\r\n   at FluentAssertions.Primitives.BooleanAssertions.BeTrue(String because, Object[] becauseArgs)\r\n   at NuGet.Tests.Apex.CommonUtility.AssertPackageInAssetsFile(VisualStudioHost visualStudio, ProjectTestExtension project, String packageName, String packageVersion, ILogger logger) in E:\\A\\_work\\2\\s\\test\\NuGet.Tests.Apex\\NuGet.Tests.Apex\\Utility\\CommonUtility.cs:line 226\r\n   at NuGet.Tests.Apex.NuGetConsoleTestCase.<NetCoreTransitivePackageReferenceLimitAsync>d__8.MoveNext() in E:\\A\\_work\\2\\s\\test\\NuGet.Tests.Apex\\NuGet.Tests.Apex\\NuGetEndToEndTests\\NuGetConsoleTestCase.cs:line 236\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n```"},{"Id":"10239858744","Type":"IssuesEvent","CreatedAt":"2019-08-19T19:18:58","Actor":"dtivel","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8146","RelatedDescription":"Closed issue \"APEX tests: Tampered_InstallFromPMCForPC_FailAsync failing\" (#8146) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used: VS UI | Package Manager Console\r\n\r\nNuGet version: 5.2.*\r\n\r\ndotnet.exe --version (if appropriate):\r\n\r\nVS version (if appropriate): 16.2.*\r\n\r\nOS version (i.e. win10 v1607 (14393.321)):\r\n\r\nWorked before? No\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\nTrigger a CI Build\r\n\r\n\r\n### Verbose Logs\r\n\r\nhttps://devdiv.visualstudio.com/DevDiv/_build/results?buildId=2691009&view=ms.vss-test-web.test-result-details\r\n\r\nThe assertions fails on each test case:\r\n\r\n```\r\n   at NuGet.Tests.Apex.RepositorySignedPackageTestCase.<Tampered_InstallFromPMCForPC_FailAsync>d__6.MoveNext() in E:\\A\\_work\\12\\s\\test\\NuGet.Tests.Apex\\NuGet.Tests.Apex\\NuGetPackageSigningTests\\RepositorySignedPackageTestCase.cs:line 142\r\n```\r\n\r\n```\r\n   at NuGet.Tests.Apex.RepositoryCountersignedPackageTestCase.<Tampered_InstallFromPMCForPC_FailAsync>d__6.MoveNext() in E:\\A\\_work\\12\\s\\test\\NuGet.Tests.Apex\\NuGet.Tests.Apex\\NuGetPackageSigningTests\\RepositoryCountersignedPackageTestCase.cs:line 157\r\n```\r\n\r\n```\r\n   at NuGet.Tests.Apex.RepositorySignedPackageTestCase.<Tampered_InstallFromPMCForPC_FailAsync>d__6.MoveNext() in E:\\A\\_work\\12\\s\\test\\NuGet.Tests.Apex\\NuGet.Tests.Apex\\NuGetPackageSigningTests\\RepositorySignedPackageTestCase.cs:line 142\r\n```\r\n\r\n"},{"Id":"10239006873","Type":"IssuesEvent","CreatedAt":"2019-08-19T17:10:57","Actor":"dtivel","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8466","RelatedDescription":"Closed issue \"PMC:  inserts hard line breaks based on view width\" (#8466) at NuGet/Home","RelatedBody":"1.  Create a C# console app project.\r\n2.  Open Package Manager Console.\r\n3.  Resize either Visual Studio's main window or Package Manager Console's tool window such that the width of the Package Manager Console tool window would be about 40 characters wide.\r\n4.  Execute:\r\n\r\n\t`Uninstall-Package A`\r\n\r\n5.  Maximize Visual Studio's main window and resize Package Manager Console's tool window to 75% screen width.\r\n6.  Repeat step 4.\r\n\r\nExpected result:\r\n![image](https://user-images.githubusercontent.com/12734758/63211523-3c984c80-c0ad-11e9-8746-eb8effe89076.png)\r\n\r\n\r\nActual result:\r\n![image](https://user-images.githubusercontent.com/12734758/63211518-29857c80-c0ad-11e9-945e-20428948ec6e.png)\r\n\r\n\r\nNote:  The PMC window automatically and dynamically line wraps text based on view width without inserting hard line breaks."},{"Id":"10238368500","Type":"IssuesEvent","CreatedAt":"2019-08-19T15:44:05","Actor":"skir","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8468","RelatedDescription":"Opened issue \"Azure DevOps Nuget login fail on Mac\" (#8468) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet version: 5.1.0.6013\r\nVS: Visual Studio Community 2019 for Mac Version 8.2.3 (build 16)\r\nOS version: Mac OS 10.13.6\r\n\r\n## Detailed repro steps\r\n\r\nIn our company we use local Azure DevOps (TFS) with set up for automatic builds and publishing NuGet packages to our private repository. \r\nTo login we usually use TFS credentials, but this works only on WIndows machines.\r\nI use Mac and I could not login using my TFS credentials. I tried this [tutorial](https://docs.microsoft.com/en-us/azure/devops/artifacts/get-started-nuget?view=azure-devops) for generating and using personal access token. And this actually worked for a short period of time. \r\nThere were several updates installed for Visual Studio. But I don't know which one caused the problem, as I was temporarily using my Windows machine for another project.\r\nI tried to downgrade nuget.exe with no success."},{"Id":"10229827706","Type":"IssuesEvent","CreatedAt":"2019-08-17T16:01:41","Actor":"dtivel","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8467","RelatedDescription":"Opened issue \"Validation rule:  spurious NU5131 warning\" (#8467) at NuGet/Home","RelatedBody":"**Repro steps:**\r\n1.  Extract the contents of [repro.zip](https://github.com/NuGet/Home/files/3512173/repro.zip) to your disk.\r\n2.  Open a command prompt and path into the \\repro\\script directory.\r\n3.  With the latest 5.3 NuGet.exe execute:\r\n\r\n    `NuGet.exe pack repro.nuspec`\r\n\r\n**Expected result:**\r\nNo warnings.\r\n\r\n**Actual result:**\r\n`WARNING: NU5131: References were found in the nuspec, but some reference assemblies were not found in both the nuspec and ref folder. Add the following reference assemblies:`\r\n\r\nNote that no reference assembly is listed."},{"Id":"10229383376","Type":"IssuesEvent","CreatedAt":"2019-08-17T12:11:30","Actor":"dtivel","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8466","RelatedDescription":"Opened issue \"PMC:  inserts hard line breaks based on view width\" (#8466) at NuGet/Home","RelatedBody":"1.  Create a C# console app project.\r\n2.  Open Package Manager Console.\r\n3.  Resize either Visual Studio's main window or Package Manager Console's tool window such that the width of the Package Manager Console tool window would be about 40 characters wide.\r\n4.  Execute:\r\n\r\n\t`Uninstall-Package A`\r\n\r\n5.  Maximize Visual Studio's main window and resize Package Manager Console's tool window to 75% screen width.\r\n6.  Repeat step 4.\r\n\r\nExpected result:\r\n![image](https://user-images.githubusercontent.com/12734758/63211523-3c984c80-c0ad-11e9-8746-eb8effe89076.png)\r\n\r\n\r\nActual result:\r\n![image](https://user-images.githubusercontent.com/12734758/63211518-29857c80-c0ad-11e9-945e-20428948ec6e.png)\r\n\r\n\r\nNote:  The PMC window automatically and dynamically line wraps text based on view width without inserting hard line breaks."},{"Id":"10228551495","Type":"IssuesEvent","CreatedAt":"2019-08-17T03:32:32","Actor":"daniel-white","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8465","RelatedDescription":"Opened issue \"Transitive lock files result in NU1004\" (#8465) at NuGet/Home","RelatedBody":"\r\n## Details about Problem\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe): dotnet cli\r\n\r\nNuGet version (x.x.x.xxx):\r\n\r\ndotnet.exe --version (if appropriate): 2.1.801\r\n\r\nOS version (i.e. win10 v1607 (14393.321)): macOS 10.14.6 (18G87)\r\n\r\nWorked before? If so, with which NuGet version: No\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Create a .net standard project. Add a nuget reference with a wildcard.\r\n\r\n2. Enable `RestorePackagesWithLockFile`.\r\n\r\n2. Run `dotnet restore` for the first project.\r\n\r\n2. Add another .net standard project. Reference the first project via project reference.\r\n\r\n2. Run `dotnet restore`for the second project.\r\n\r\n3. Run `dotnet restore --locked-mode` for the second project.\r\n\r\n4. Observe `NU1004`\r\n\r\n...\r\n\r\n## Other suggested things\r\n\r\n### Verbose Logs\r\n\r\n[log.txt](https://github.com/NuGet/Home/files/3511626/log.txt)\r\n\r\n\r\n\r\n### Sample Project\r\n[locktest.zip](https://github.com/NuGet/Home/files/3511627/locktest.zip)\r\n\r\n\r\n"},{"Id":"10226092204","Type":"IssuesEvent","CreatedAt":"2019-08-16T16:50:19","Actor":"mhsimkin","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8464","RelatedDescription":"Opened issue \"NU1107: Version Conflict on mix framework project\" (#8464) at NuGet/Home","RelatedBody":"## Details about Problem\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe): VS UI\r\nNuGet version (x.x.x.xxx): 5.2.0\r\ndotnet.exe --version (if appropriate): N/A\r\nVS version (if appropriate): VS 2019 Enterprise 16.2.2\r\nOS version (i.e. win10 v1607 (14393.321)): Windows 10 Pro Build 1809\r\nWorked before? If so, with which NuGet version: N/A\r\n\r\n## Detailed repro steps so we can see the same problem\r\nI‚Äôm in the process of converting our internal libraries into .NET Standard 2.  As a result, I have packages that are multi-targeting .Net 4.7.2 and .Net Standard 2.0.  At the same time, I‚Äôm still developing new applications and updating older applications.\r\n\r\nIn a new application (Windows service) that targets 4.7.2 there is a conflict pulling in packages.\r\nHere is the actual error message:\r\n\r\n> NU1107: Version conflict detected for RabbitMQ.Client. Install/reference RabbitMQ.Client 5.1.0 directly to project MprProductSync to resolve this issue. \r\n>  MprProductSync -> ScribeClientAPI.MSLogging.Legacy 2019.8.13.6 -> ScribeClientAPI.Legacy 2019.8.13.6 -> Messaging.RabbitMq 2019.8.13.57 -> RabbitMQ.Client (>= 5.1.0) \r\n>  MprProductSync -> RENAPI.Standard 2019.8.16.2 -> UtilsLibrary 2019.8.15.6 -> RabbitMQ.Client (= 2.5.1).\r\n> NuGet package restore failed. Please see Error List window for detailed warnings and errors.\r\n\r\nBelow is a list of what frameworks each one of the targets/packages in the above error are using:\r\nMprProductSync :                                  4.7.2\r\nScribeClientAPI.MSLogging.Legacy:      Standard 2\r\nScribeClientAPI.Legacy:                         Standard 2\r\nMessaging.,RabbitMQ:                          Standard 2\r\nRabbitMQ.Client:                                   4.5.1/Standard 1.5/Standard 2\r\nRENAPI.Standard:                                  Standard 2\r\nUtilsLibrary:                                           4.7.2/Standard 2\r\nRabbitMQ.Client:                                  4.5.1/Standard 1.5/Standard 2\r\n\r\nI understand that NuGet will attempt to match a project targeting 4.7.2 with a library built with 4.7.2. \r\n\r\nMy expectation is that if a .NET Standard package was determined to be the best match, that all  descendant packages also resolve to .NET Standard.\r\n\r\nFor example, RENAPI.Standard is a Standard 2 package.  It has a dependency on UtilsLibrary which also has a Standard 2 version, which would use the RabbitMQ.Client that is also compiled against .NET Standard. Both the UtilsLibrary and RabbitMQ.Client are multi-targeted packages.\r\n\r\nInstead it seems that during the package resolution the full framework version of UtilsLibrary is being used, which results in the specific version locked RabbitMQ.Client is being used.\r\n\r\nHaving to always package the full framework and standard versions separately will lead to other problems.  (1) duplicate packages with just the name and framework being different, (2) unable to seamlessly update existing applications without changing the package name.\r\n\r\nThis will just make it harder to migrate from the full framework to .NET Core/Standard.\r\n\r\n### Verbose Logs\r\nPlease include verbose logs (NuGet.exe <COMMAND> -verbosity detailed | dotnet.exe <COMMAND> --verbosity diag | etc...)\r\nSee attached msbuild.log\r\n[msbuild.log](https://github.com/NuGet/Home/files/3510441/msbuild.log)\r\n\r\n**Build Environment:**\r\nWindows 10 Pro Build 1809\r\nVisual Studio 2019 Enterprise 16.2.2\r\n.NET Framework 4.7.2 and 4.8\r\n\r\n**Also Installed, but not used for this build**\r\nVisual Studio 2019 Enterprise Preview 16.3.0 Preview 2\r\n.NET Core 2.2.401 and 3.0.100-preview8-013656\r\n\r\nThanks\r\n-marc\r\n"},{"Id":"10226014892","Type":"IssuesEvent","CreatedAt":"2019-08-16T16:37:15","Actor":"zivkan","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8463","RelatedDescription":"Opened issue \"dotnet list package with multi targeting WPF project\" (#8463) at NuGet/Home","RelatedBody":"From https://github.com/dotnet/cli/issues/12267\r\n\r\n* `dotnet new wpf`\r\n* Replace TargetFramework with <TargetFrameworks>netcoreapp3.0;net45</TargetFrameworks>\r\n* `dotnet restore`\r\n* `dotnet list package`\r\n\r\nRestore succeeded, so `dotnet list package` should too."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"10168692521","Type":"IssuesEvent","CreatedAt":"2019-08-07T21:31:54","Actor":"anangaur","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/37","RelatedDescription":"Opened issue \"Using OData to query NuGet.org repository is being deprecated\" (#37) at NuGet/Announcements","RelatedBody":"We introduced `V3 APIs` in early 2016. We have made continuous investments to make it more reliable, performant and secure. Going forward, we plan to bring all new features and improvements only to the newer `V3 APIs`. As part of this strategy, we are deprecating the usage of `OData` queries. Subsequently, we plan to **disable the `OData` queries starting Feb 5th, 2020**.\r\n\r\n**Call to Action: Transition to V3 APIs**\r\n\r\nHere are some resources to help you with the migration:\r\n* [NuGet Server `V3 APIs` reference](https://devblogs.microsoft.com/nuget/switching-from-wcf-odata-to-web-api/)\r\n* [Guide to transition from NuGet `V2 API` to `V3 API`](https://docs.microsoft.com/en-us/nuget/guides/api/query-for-all-published-packages). \r\n* [Blog post: Switching from WCF OData to Web API](https://devblogs.microsoft.com/nuget/switching-from-wcf-odata-to-web-api/)\r\n\r\nIf you need further help in moving your use case to `V3 APIs`, do reach out to us at [support@nuget.org](mailto:support@nuget.org).\r\n"},{"Id":"10115721045","Type":"IssuesEvent","CreatedAt":"2019-07-30T22:44:31","Actor":"shoter","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/36","RelatedDescription":"Closed issue \"Replace reference to codeplex issue numer 3072\" (#36) at NuGet/Announcements","RelatedBody":"This is copy of codeplex issue number 3072 as it is referenced inside code. I should do a PR shortly to address this one.\r\n\r\nThe place where it is referenced is RuntimeHelper.cs:150\r\n\r\n\r\n---\r\n\r\nWe're hitting an issue with Microsoft.Bcl package where NuGet is adding a binding redirect for a binary that is considered part of the framework, this causes the application to crash because the binding redirect refers to assembly version that is not available at runtime.\r\n\r\n@Repro:\r\n\r\n1. Create a new Console Application targeting 4.5\r\n2. Create a new Portable Library targeting .NET Framework 4.5, Silverlight 4, Windows Phone 7.5 and .NET for Windows Store apps\r\n3. Add a reference to the portable library from the Console Application\r\n4. Install the Microsoft.Bcl package (1.0.16-rc) to both projects\r\n\r\n@Expected: No binding redirect for System.Runtime in the .NET Framework 4.5 project because a ___later version___ is part of the target framework (see C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.5\\RedistList\\FrameworkList.xml)\r\n@Actual: Binding redirect\r\n\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Runtime\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-1.5.11.0\" newVersion=\"1.5.11.0\" />\r\n</dependentAssembly>\r\n\r\n\r\nYou can use the IVsFrameworkMultiTargeting to determine if a given assembly version is available as part of a given target framework.\r\nMake sure when you fix this, that you only skip the binding redirect if ___a later or same version___ is available in the framework.  \r\n2013-02-22\r\n\r\n---\r\n\r\nWe'll do this in 2.4 release.  \r\n2013-02-26\r\n\r\n---\r\n\r\nIs IVsFrameworkMultiTargeting.IsReferenceableInTargetFx the method I need to call? What should I pass to pwszAssemblySpec?  \r\n2013-06-08\r\n\r\n---\r\n\r\nIt's the full name of the assembly (mscorlib, Version=[version], PublicKeyToken=[token], Culture=[culture]). It can either contain all the information (key, version, etc), or just the simple name (\"mscorlib\")  \r\n2013-06-10\r\n\r\n---\r\n\r\nSo look like I can only check for the same version of the target framework. Can't check for a later version using this method, because I don't know what future versions will be.  \r\n2013-06-12\r\n\r\n---\r\n\r\nThat's fine. That's exactly the behavior we want. For example, System.Runtime didn't ship in 4.0, but did in 4.5. We still want a binding redirect generated for it in 4.0, but not for 4.5.  \r\n2013-06-13\r\n\r\n---\r\n\r\nI followed the exact same steps above, but there's no binding redirect added to the Console Application. It's only added to the __Portable Library project__. Is that the bug?  \r\n2013-06-13\r\n\r\n---\r\n\r\nThe binding redirects added to the Portable Library project seems to come from the Microsoft.Bcl package itself (from the content folder's app.config.transform file). this looks like a non-bug.\r\n2013-06-13\r\n\r\n  \r\nI'm chasing up the repro with Eric St. John. He walked through the code and figured out where it was broken.\r\n\r\nIt's the not the app.config.tranform, notice how the net45 content is empty, and hence no transforms. We also marked our transforms with a special marker that indicates that we added the redirects . The binding redirects we were seeing were not coming from us.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAre you seeing the binding redirects added to the Console Application or the Portable Library? I don't see binding redirect added to Console Application, only the Portable Library.  \r\n2013-06-13\r\n\r\n---\r\n\r\nYes I'm talking about the ConsoleApplication. The binding redirects in the portable library project are expected, and do not affect runtime behavior (as the app.config is ignored and not copied to the app project), and hence can't cause an application to crash.\r\n\r\nI've found another repro (NuGet has really weird logic around when it decides to add binding redirects so it was hard to find a repro).\r\n\r\nThe repro is instead of using the Microsoft.Bcl package, install the Microsoft.Net.Http, 2.2.3-beta package. Make sure you are targeting __4.5__ from the ConsoleApplication and the exact platforms that I called out above for portable.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAlso, the ConsoleApplication must be referencing the portable project before installing the package.  \r\n2013-06-13\r\n\r\n---\r\n\r\nOK now I can repro  \r\n2013-06-14\r\n\r\n---\r\n\r\nOK, I've got a fix now. It no longer adds the binding redirect for System.Runtime.dll, but still adds one for System.Net.Http.Primitives. I guess it's expected, right? Please confirm.\r\n\r\n```\r\n<assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Net.Http.Primitives\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-4.2.3.0\" newVersion=\"4.2.3.0\" />\r\n</dependentAssembly>\r\n</assemblyBinding>\r\n```  \r\n2013-06-14\r\n\r\n---\r\n\r\n\r\nYes that's correct. System.Net.Http.Primitives does not exist in the framework.  \r\n2013-06-14\r\n\r\n---\r\n\r\nFixed in changeset b8d515f6341193b970d2a9d837e580e762d2eb71  \r\n2013-06-19\r\n\r\n---\r\n\r\ni get the same issue with my test project still, runtime being added... if i comment this out the tests run fine... if not i get exceptions thrown from json.net  \r\n2013-08-09\r\n\r\n---\r\n\r\n(or i can change the version up to 4.0.0.0 or something and it works)  \r\n2013-08-09"},{"Id":"10115715827","Type":"IssuesEvent","CreatedAt":"2019-07-30T22:43:23","Actor":"shoter","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/36","RelatedDescription":"Opened issue \"Replace reference to codeplex issue numer 3072\" (#36) at NuGet/Announcements","RelatedBody":"This is copy of codeplex issue number 3072 as it is referenced inside code. I should do a PR shortly to address this one.\r\n\r\nThe place where it is referenced is RuntimeHelper.cs:150\r\n\r\n\r\n---\r\n\r\nWe're hitting an issue with Microsoft.Bcl package where NuGet is adding a binding redirect for a binary that is considered part of the framework, this causes the application to crash because the binding redirect refers to assembly version that is not available at runtime.\r\n\r\n@Repro:\r\n\r\n1. Create a new Console Application targeting 4.5\r\n2. Create a new Portable Library targeting .NET Framework 4.5, Silverlight 4, Windows Phone 7.5 and .NET for Windows Store apps\r\n3. Add a reference to the portable library from the Console Application\r\n4. Install the Microsoft.Bcl package (1.0.16-rc) to both projects\r\n\r\n@Expected: No binding redirect for System.Runtime in the .NET Framework 4.5 project because a ___later version___ is part of the target framework (see C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.5\\RedistList\\FrameworkList.xml)\r\n@Actual: Binding redirect\r\n\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Runtime\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-1.5.11.0\" newVersion=\"1.5.11.0\" />\r\n</dependentAssembly>\r\n\r\n\r\nYou can use the IVsFrameworkMultiTargeting to determine if a given assembly version is available as part of a given target framework.\r\nMake sure when you fix this, that you only skip the binding redirect if ___a later or same version___ is available in the framework.  \r\n2013-02-22\r\n\r\n---\r\n\r\nWe'll do this in 2.4 release.  \r\n2013-02-26\r\n\r\n---\r\n\r\nIs IVsFrameworkMultiTargeting.IsReferenceableInTargetFx the method I need to call? What should I pass to pwszAssemblySpec?  \r\n2013-06-08\r\n\r\n---\r\n\r\nIt's the full name of the assembly (mscorlib, Version=[version], PublicKeyToken=[token], Culture=[culture]). It can either contain all the information (key, version, etc), or just the simple name (\"mscorlib\")  \r\n2013-06-10\r\n\r\n---\r\n\r\nSo look like I can only check for the same version of the target framework. Can't check for a later version using this method, because I don't know what future versions will be.  \r\n2013-06-12\r\n\r\n---\r\n\r\nThat's fine. That's exactly the behavior we want. For example, System.Runtime didn't ship in 4.0, but did in 4.5. We still want a binding redirect generated for it in 4.0, but not for 4.5.  \r\n2013-06-13\r\n\r\n---\r\n\r\nI followed the exact same steps above, but there's no binding redirect added to the Console Application. It's only added to the __Portable Library project__. Is that the bug?  \r\n2013-06-13\r\n\r\n---\r\n\r\nThe binding redirects added to the Portable Library project seems to come from the Microsoft.Bcl package itself (from the content folder's app.config.transform file). this looks like a non-bug.\r\n2013-06-13\r\n\r\n  \r\nI'm chasing up the repro with Eric St. John. He walked through the code and figured out where it was broken.\r\n\r\nIt's the not the app.config.tranform, notice how the net45 content is empty, and hence no transforms. We also marked our transforms with a special marker that indicates that we added the redirects . The binding redirects we were seeing were not coming from us.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAre you seeing the binding redirects added to the Console Application or the Portable Library? I don't see binding redirect added to Console Application, only the Portable Library.  \r\n2013-06-13\r\n\r\n---\r\n\r\nYes I'm talking about the ConsoleApplication. The binding redirects in the portable library project are expected, and do not affect runtime behavior (as the app.config is ignored and not copied to the app project), and hence can't cause an application to crash.\r\n\r\nI've found another repro (NuGet has really weird logic around when it decides to add binding redirects so it was hard to find a repro).\r\n\r\nThe repro is instead of using the Microsoft.Bcl package, install the Microsoft.Net.Http, 2.2.3-beta package. Make sure you are targeting __4.5__ from the ConsoleApplication and the exact platforms that I called out above for portable.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAlso, the ConsoleApplication must be referencing the portable project before installing the package.  \r\n2013-06-13\r\n\r\n---\r\n\r\nOK now I can repro  \r\n2013-06-14\r\n\r\n---\r\n\r\nOK, I've got a fix now. It no longer adds the binding redirect for System.Runtime.dll, but still adds one for System.Net.Http.Primitives. I guess it's expected, right? Please confirm.\r\n\r\n```\r\n<assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Net.Http.Primitives\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-4.2.3.0\" newVersion=\"4.2.3.0\" />\r\n</dependentAssembly>\r\n</assemblyBinding>\r\n```  \r\n2013-06-14\r\n\r\n---\r\n\r\n\r\nYes that's correct. System.Net.Http.Primitives does not exist in the framework.  \r\n2013-06-14\r\n\r\n---\r\n\r\nFixed in changeset b8d515f6341193b970d2a9d837e580e762d2eb71  \r\n2013-06-19\r\n\r\n---\r\n\r\ni get the same issue with my test project still, runtime being added... if i comment this out the tests run fine... if not i get exceptions thrown from json.net  \r\n2013-08-09\r\n\r\n---\r\n\r\n(or i can change the version up to 4.0.0.0 or something and it works)  \r\n2013-08-09"},{"Id":"10105705706","Type":"IssuesEvent","CreatedAt":"2019-07-29T18:41:10","Actor":"anangaur","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/35","RelatedDescription":"Opened issue \"Machine readable output for dotnet list package\" (#35) at NuGet/Announcements","RelatedBody":"The spec for 'Machine readable output for dotnet list package' is ready for **review**:\r\n\r\n|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Machine readable output for dotnet list package](https://github.com/NuGet/Home/wiki/%5BSpec%5D-Machine-readable-output-for-dotnet-list-package) | https://github.com/NuGet/Home/issues/7752 |"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1162433926578626560","CreatedAt":"2019-08-16T18:40:19+00:00","UserScreenname":"nuget","Text":"Did you check out the new docs landing page? We tried to make it better and more useful. What do you think?‚Ä¶ https://t.co/96nBP0rV5l","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":13,"FavoriteCount":3,"RawContent":null},{"Id":"1159229316351197184","CreatedAt":"2019-08-07T22:26:21+00:00","UserScreenname":"nuget","Text":"Using OData to query https://t.co/F9kiKfdOWi repository is being deprecated\n#Announcement \n\nhttps://t.co/dtelctlNOe","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":9,"FavoriteCount":3,"RawContent":null},{"Id":"1124053944269983745","CreatedAt":"2019-05-02T20:51:58+00:00","UserScreenname":"nuget","Text":"https://t.co/F9kiKfvqkS is currently degraded and some pages might take too long to load. We are investigating the‚Ä¶ https://t.co/j3saBGKARZ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":3,"FavoriteCount":2,"RawContent":null},{"Id":"1121348019914334210","CreatedAt":"2019-04-25T09:39:36+00:00","UserScreenname":"nuget","Text":"Thanks for your contribution. https://t.co/RDrP9LnHU3","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":26,"FavoriteCount":3,"RawContent":null}]}},"RunOn":"2019-08-20T05:30:46.2033012Z","RunDurationInMilliseconds":1924}