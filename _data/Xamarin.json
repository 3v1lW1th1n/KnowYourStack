{"Data":{"Blog":{"FeedItems":[{"Title":"Developer Community Events in March","PublishedOn":"2019-03-01T17:59:05+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"User groups are getting together to learn about new, exciting releases and tooling to help jumpstart their next mobile development project. Network with your local community and you too could get all...","Href":"https://blog.xamarin.com/developer-community-events-in-march/","RawContent":null},{"Title":"View PDF Files within Your Xamarin.Forms Apps Using the Syncfusion PDF Viewer","PublishedOn":"2019-02-28T17:04:29+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This post was guest authored and contributed by Suresh Mohan. Suresh is the Product Manager for PDF Viewer at Syncfusion Software where he specializes in desktop and mobile app development. &#160;...","Href":"https://blog.xamarin.com/xamarin-forms-apps-syncfusion-pdf-viewer/","RawContent":null},{"Title":"Quick Tip: Debugging Local ASP.NET Core Web APIs on Android Emulators","PublishedOn":"2019-02-25T19:36:04+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"When developing mobile applications with a web API backend there is always a need to debug locally on your development machine. If you are using Visual Studio for Mac and debugging iOS applications...","Href":"https://blog.xamarin.com/debug-local-asp-net-core-web-apis-android-emulators/","RawContent":null},{"Title":"Xamarin and Azure Office Hours Recap from December 2018 and January 2019","PublishedOn":"2019-02-21T18:11:51+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"That&#8217;s right, I ❤️ every single one of you(!) and I want to know more about your stories building mobile apps. I want to hear stories of your successes and also, the not-so-successful...","Href":"https://blog.xamarin.com/xamarin-azure-office-hours-recap-december-january/","RawContent":null},{"Title":"Persisting Settings and Preferences in Mobile Apps with Xamarin.Essentials","PublishedOn":"2019-02-19T19:56:32+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"An essential part of any mobile application is the ability to persist data. Sometimes that is a large amount of data that requires a database, but often it is smaller pieces of data such as settings...","Href":"https://blog.xamarin.com/persisting-settings-preferences-mobile-apps-xamarin-essentials/","RawContent":null},{"Title":"Xamarin Developer Blog is Getting an Update!","PublishedOn":"2019-02-15T18:56:04+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In the coming weeks, the Xamarin Developer Blog will be migrating to a new platform with a modern, clean design and powerful features that will make it easy for you to discover and share great...","Href":"https://blog.xamarin.com/xamarin-developer-blog-is-getting-an-update/","RawContent":null},{"Title":"Visual Studio Mobile Developer Podcast: Releases, Previews, and Roadmaps!","PublishedOn":"2019-02-13T19:56:28+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The Visual Studio Mobile Developer Podcast features Matt Soucoup and James Montemagno discussing the latest and greatest in mobile and cloud development. In this episode, we discuss the best of...","Href":"https://blog.xamarin.com/podcast-releases-previews-roadmaps/","RawContent":null},{"Title":"Easily Check Mobile Device Connectivity with Xamarin.Essentials","PublishedOn":"2019-02-12T19:06:36+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"One of the best parts of a mobile device is their instant access to the internet. As a mobile app developer, it&#8217;s great to be able to pull data from the server to our apps to provide users with...","Href":"https://blog.xamarin.com/easily-check-mobile-device-connectivity-with-xamarin-essentials/","RawContent":null},{"Title":"5 Things You’ll Love in Xamarin.Forms 3.5","PublishedOn":"2019-02-06T17:22:16+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Although Valentine&#8217;s Day isn&#8217;t for a few more days, we just couldn&#8217;t wait to celebrate the love by sharing a new stable release of Xamarin.Forms &#8211; 3.5. Your engagement and...","Href":"https://blog.xamarin.com/5-things-youll-love-xamarin-forms-3-5/","RawContent":null},{"Title":"Using Existing C++ Libraries in Cross-Platform Xamarin.Forms Applications","PublishedOn":"2019-02-04T18:52:08+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"There are many libraries developed using C or C++ which can be brought to bear when creating Xamarin-based mobile apps such as those leveraged by Microsoft’s Hyperlapse Mobile and Pix Camera in order...","Href":"https://blog.xamarin.com/using-c-libraries-xamarin-forms-apps/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"9171600226","Type":"PullRequestEvent","CreatedAt":"2019-03-04T02:44:02","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2753","RelatedDescription":"Closed pull request \"Initialize SystemDependencyProvider on startup.\" (#2753) at xamarin/xamarin-android","RelatedBody":"Requires https://github.com/mono/mono/pull/13106 to be backported and Mono bumped.\r\n\r\nThis will fix https://github.com/xamarin/xamarin-android/issues/2679."},{"Id":"9171598491","Type":"PullRequestEvent","CreatedAt":"2019-03-04T02:43:27","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2784","RelatedDescription":"Merged pull request \"[Mono.Android] Call SystemDependencyProvider.Initialize()\" (#2784) at xamarin/xamarin-android","RelatedBody":"Fixes: https://github.com/xamarin/xamarin-android/issues/2679\r\n\r\nContext: https://github.com/xamarin/xamarin-android/pull/2753\r\n\r\nIf `System.Security.Cryptography.X509Certificates.X509Certificate`\r\n(from `mscorlib.dll`) is used *before*\r\n`System.Security.Cryptography.X509Certificates.X509Certificate2`\r\n(from `System.dll`), then a `PlatformNotSupportedException` is thrown:\r\n\r\n\tSystem.PlatformNotSupportedException: Cannot get `ISystemDependencyProvider`.\r\n\t  at Mono.DependencyInjector.get_SystemProvider ()\r\n\t  at System.Security.Cryptography.X509Certificates.X509Helper.get_CertificateProvider ()\r\n\t  at System.Security.Cryptography.X509Certificates.X509Helper.Import (System.Byte[] rawData)\r\n\t  at System.Security.Cryptography.X509Certificates.X509Certificate..ctor (System.Byte[] data)\r\n\t  at App7.MainActivity.OnCreate (Android.OS.Bundle savedInstanceState)\r\n\t  at Android.App.Activity.n_OnCreate_Landroid_os_Bundle_ (System.IntPtr jnienv, System.IntPtr native__this, System.IntPtr native_savedInstanceState)\r\n\r\nThis happens because `X509Certificate` requires that the\r\n`Mono.DependencyInjector.SystemProvider` proeprty (in `mscorlib.dll`)\r\nreturn a valid value in order to perform the certificate import, but\r\nif `Mono.SystemDependencyProvider.Initialize()` (from `System.dll)`\r\nisn't invoked, then `Mono.DependencyInjector.SystemProvider` throws.\r\n\r\nSee also: https://github.com/mono/mono/commit/23a209198b3f\r\n\r\n(Aside: a *dependency injector*?!  For mobile use?!)\r\n\r\nThe fix is for `Android.Runtime.JNIEnv.Initialize()` to call\r\n`Mono.SystemDependencyProvider.Initialize()`, so that mono's\r\ndependency injection infrastructure is propely initialized, thus\r\navoiding the `PlatformNotSupportedException`.\r\n\r\nThat said, there are two *very* confusing points around this madness:\r\n\r\n 1. The macios fix, and\r\n 2. Why this wasn't caught before.\r\n\r\nThe call to `Mono.SystemDependencyProvider.Initialize()` was added to\r\nthe [xamarin-macios' `ObjCRuntime.Runtime` class][0] in 2018-Jul-16.\r\nWhy was the Android fix overlooked/forgotten about?\r\n\r\nMore distressing is the second point: why wasn't this problem caught\r\nby our unit tests?  The current theory -- not yet confirmed -- is that\r\nthe `X509Certificate2` unit tests were executing before the\r\n`X509Certificate` unit tests, and/or *something* was causing\r\n`Mono.SystemDependencyProvider.Initialize()` to be executed *before*\r\nthe `X509Certificate` unit tests to be executed.  Regardless, our unit\r\ntests appear to be \"leaky\" here, and we're not sure if this can be\r\nimproved. :-(\r\n\r\n[0]: https://github.com/xamarin/xamarin-macios/commit/84a815beed9e090bd67f8ebaba2013c7f89902be"},{"Id":"9171598485","Type":"IssuesEvent","CreatedAt":"2019-03-04T02:43:27","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2679","RelatedDescription":"Closed issue \"Initialize Dependency Injector on Android (X509Certificate PlatformNotSupportedException on VS2019 Preview 2 with Android)\" (#2679) at xamarin/xamarin-android","RelatedBody":"We've been testing our Xamarin projects against the new VS2019 Previews, and since Preview 2 we've noticed a bug in Xamarin.Forms on Android and Xamarin.Android when creating a X509Certificate.  For us simply calling the following causes an exception.\r\n\r\n`X509Certificate appCert = new X509Certificate(pubCertBytes); `-> exception System.PlatformNotSupportedException: Cannot get `ISystemDependencyProvider`. occurred\r\n \r\nIt appears to be a regression based on some older related issues:\r\n[https://github.com/mono/mono/issues/9623](https://github.com/mono/mono/issues/9623)\r\n[https://github.com/mono/mono/pull/9472#issuecomment-405732761](https://github.com/mono/mono/pull/9472#issuecomment-405732761)\r\nHere is the changeset fix from before:\r\n[https://github.com/mono/mono/commit/4c8d3505ed5bad8ef1c8b7e355a8cc257b3e2f1b](https://github.com/mono/mono/commit/4c8d3505ed5bad8ef1c8b7e355a8cc257b3e2f1b)\r\n \r\nThe same code/project works normally on VS2017, so it seems like it's some issue with Xamarin Android in VS2019 Preview 2 and 2.1.\n\n> VS bug [#798117](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/798117)"},{"Id":"9171124512","Type":"PullRequestEvent","CreatedAt":"2019-03-03T23:27:50","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2784","RelatedDescription":"Opened pull request \"[Mono.Android] Call SystemDependencyProvider.Initialize()\" (#2784) at xamarin/xamarin-android","RelatedBody":"Fixes: https://github.com/xamarin/xamarin-android/issues/2679\r\n\r\nContext: https://github.com/xamarin/xamarin-android/pull/2753\r\n\r\nIf `System.Security.Cryptography.X509Certificates.X509Certificate`\r\n(from `mscorlib.dll) is used *before*\r\n`System.Security.Cryptography.X509Certificates.X509Certificate2`\r\n(from `System.dll`), then a `PlatformNotSupportedException` is thrown:\r\n\r\n\tSystem.PlatformNotSupportedException: Cannot get `ISystemDependencyProvider`.\r\n\t  at Mono.DependencyInjector.get_SystemProvider ()\r\n\t  at System.Security.Cryptography.X509Certificates.X509Helper.get_CertificateProvider ()\r\n\t  at System.Security.Cryptography.X509Certificates.X509Helper.Import (System.Byte[] rawData)\r\n\t  at System.Security.Cryptography.X509Certificates.X509Certificate..ctor (System.Byte[] data)\r\n\t  at App7.MainActivity.OnCreate (Android.OS.Bundle savedInstanceState)\r\n\t  at Android.App.Activity.n_OnCreate_Landroid_os_Bundle_ (System.IntPtr jnienv, System.IntPtr native__this, System.IntPtr native_savedInstanceState)\r\n\r\nThis happens because `X509Certificate` requires that the\r\n`Mono.DependencyInjector.SystemProvider` proeprty (in `mscorlib.dll`)\r\nreturn a valid value in order to perform the certificate import, but\r\nif `Mono.SystemDependencyProvider.Initialize()` (from `System.dll)`\r\nisn't invoked, then `Mono.DependencyInjector.SystemProvider` throws.\r\n\r\nSee also: https://github.com/mono/mono/commit/23a209198b3f\r\n\r\n(Aside: a *dependency injector*?!  For mobile use?!)\r\n\r\nThe fix is for `Android.Runtime.JNIEnv.Initialize()` to call\r\n`Mono.SystemDependencyProvider.Initialize()`, so that mono's\r\ndependency injection infrastructure is propely initialized, thus\r\navoiding the `PlatformNotSupportedException`.\r\n\r\nThat said, there are two *very* confusing points around this madness:\r\n\r\n 1. The macios fix, and\r\n 2. Why this wasn't caught before.\r\n\r\nThe call to `Mono.SystemDependencyProvider.Initialize()` was added to\r\nthe [xamarin-macios' `ObjCRuntime.Runtime` class][0] in 2018-Jul-16.\r\nWhy was the Android fix overlooked/forgotten about?\r\n\r\nMore distressing is the second point: why wasn't this problem caught\r\nby our unit tests?  The current theory -- not yet confirmed -- is that\r\nthe `X509Certificate2` unit tests were executing before the\r\n`X509Certificate` unit tests, and/or *something* was causing\r\n`Mono.SystemDependencyProvider.Initialize()` to be executed *before*\r\nthe `X509Certificate` unit tests to be executed.  Regardless, our unit\r\ntests appear to be \"leaky\" here, and we're not sure if this can be\r\nimproved. :-(\r\n\r\n[0]: https://github.com/xamarin/xamarin-macios/commit/84a815beed9e090bd67f8ebaba2013c7f89902be"},{"Id":"9168856705","Type":"PullRequestEvent","CreatedAt":"2019-03-03T03:01:19","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2781","RelatedDescription":"Merged pull request \"[Xamarin.Android.Build.Tasks] support enhanced fastdev + D8\" (#2781) at xamarin/xamarin-android","RelatedBody":"A couple problems where happening when you mix:\r\n\r\n    <AndroidDexTool>d8</AndroidDexTool>\r\n    <AndroidFastDeploymentType>Assemblies:Dexes</AndroidFastDeploymentType>\r\n\r\nIt seems the D8 MSBuild targets weren't doing the right thing:\r\n\r\n* D8 targets are using `@(_JavaLibrariesToCompile)` throughout, but\r\n  should be using `@(_JavaLibrariesToCompileForAppDx)` to be \"aware\"\r\n  of enhanced fastdev.\r\n* D8/R8 are generally more strict about missing libraries, so we need\r\n  to make sure a `--lib` switch is added for all the Java libraries.\r\n  Since their dex files are fast deployed, they won't be dexed by the\r\n  calls here.\r\n\r\nSo the changes here are:\r\n\r\n* Rename `@(_JavaLibrariesToCompileForAppDx)` to just\r\n  `@(_JavaLibrariesToCompileForApp)` so it makes sense for DX and D8.\r\n* Use `@(_JavaLibrariesToCompileForApp)` throughout the D8 targets.\r\n* Add the Java libraries to `@(AndroidExternalJavaLibrary)` when\r\n  `$(_InstantRunEnabled)` is `True`. This will add the `--lib` switch\r\n  for each library during the `<D8/>` or `<R8/>` call.\r\n* I switched to using `<ItemGroup/>` over `<CreateItem/>`"},{"Id":"9168850480","Type":"PullRequestEvent","CreatedAt":"2019-03-03T02:57:02","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2779","RelatedDescription":"Merged pull request \"[Xamarin.Android.Build.Tasks] AndroidUseAapt2 defaults to False\" (#2779) at xamarin/xamarin-android","RelatedBody":"In preparation for branching for d16-1, we need `$(AndroidUseAapt2)`\r\nto be disabled by default.\r\n\r\nWe currently have aapt2 disabled on d16-0: ac1b29e8\r\n\r\nI am hoping a one-line change is all we need here, since master also\r\nhas: 61716bb3"},{"Id":"9167342608","Type":"IssuesEvent","CreatedAt":"2019-03-02T12:48:11","Actor":"vjlomocso","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2783","RelatedDescription":"Opened issue \"Allowing microphone permission in runtime has no effect the first time\" (#2783) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Request permission using API\r\n2. Allow permission\r\n3. call `AudioRecord#StartRecording`\r\n4. The AudioRecord#StartRecording method will throw an exception saying something like the AudioRecord is uninitialized. This is exactly what happens when you don't allow the permission.\r\n\r\nHere's a repro project\r\nhttps://github.com/vjlomocso/XamarinAndroidPermissionBug\r\n\r\n### Expected Behavior\r\nShould not throw exception after allowing permission\r\n\r\n### Actual Behavior\r\nThrows exception\r\n\r\n### Version Information\r\n\r\n<!--\r\n1. On macOS and within Visual Studio, select Visual Studio > About Visual Studio, then click the Show Details button, then click the Copy Information button.\r\n\r\n2. Paste below this comment block.\r\n-->\r\nhttps://github.com/vjlomocso/XamarinAndroidPermissionBug/blob/master/versioninfo.txt\r\n\r\n\r\n### Log File\r\n\r\n<!--\r\n1. On macOS and within Visual Studio:\r\n    a. Click **Tools** > **SDK Command Prompt**.\r\n    b. Within the launched `Terminal.app` window, run:\r\n\r\n            adb logcat -d | pbcopy\r\n\r\n2. Paste below this comment block\r\n-->\r\nhttps://github.com/vjlomocso/XamarinAndroidPermissionBug/blob/master/logcat.log\r\n\r\n\r\n<!--\r\nSwitch to the \"Preview\" tab to ensure your issue renders correctly.\r\n\r\nPlease add an appropriate \"Area:\" label in the Labels section.\r\n-->"},{"Id":"9166265496","Type":"PullRequestEvent","CreatedAt":"2019-03-02T01:46:02","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2782","RelatedDescription":"Merged pull request \"[build] Upload unit test results\" (#2782) at xamarin/xamarin-android","RelatedBody":"There was some unexpected and unforeseen fallout from commit 241d9416:\r\n`make package-build-status` is only run once.\r\n\r\nThis doesn't *sound* problematic -- hence the oversight -- but the\r\n`msbuild*.binlog` files that the `xa-build-status*.zip` file contained\r\nprior to commit 241d9416 contained *unit test execution logs*, e.g.\r\n`msbuild-*-Target-RunApkTests.binlog`\twhich contains on-device\r\nexecution of the `.apk` unit tests.\r\n\r\nHowever, these files don't exist until *after* the unit tests are run.\r\nMeanwhile, `make package-build-status` is executed *before* unit tests\r\nare run, and thus the resulting `xa-build-status*.zip` file no longer\r\ncontains unit test information!\r\n\r\n(This makes it rather difficult to actually review anything about unit\r\ntest execution!)\r\n\r\nThe fix?  Update the `$(MSBUILD_BINLOG)` Make `define` so that it now\r\ntakes an optional 3rd parameter: part of the directory name to place\r\nfiles into, which defaults to `Build`.  (This allows overriding things\r\nso that unit-test related `.binlog` files now go into\r\n`bin/Test$(Configuration)`, not `bin/Build$(Configuration)`.)\r\n\r\nAdditionally, *rename* the `make package-test-errors` rule to\r\n`make package-test-results`, have it produce an `xa-test-results*.zip`\r\nfile, and include the `bin/Test$(Configuration)/msbuild*.binlog` files\r\ninto `xa-test-results*.zip`.\r\n\r\n`make package-test-results` is executed after unit tests are executed,\r\nso this change allows us the uploaded `xa-test-results.zip` file to\r\ncontain unit test execution results."},{"Id":"9166113496","Type":"PullRequestEvent","CreatedAt":"2019-03-02T00:42:15","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2778","RelatedDescription":"Merged pull request \"Bump to mono/mono/2018-08@56906e23\" (#2778) at xamarin/xamarin-android","RelatedBody":"Context: https://github.com/xamarin/xamarin-android/issues/2679\r\n\r\nBumps to mono/api-snapshot@a388436d\r\n\r\nCrash reporting improvements.\r\n\r\nMake `System.dll` internals visible to `Mono.Android`."},{"Id":"9165839115","Type":"PullRequestEvent","CreatedAt":"2019-03-01T23:14:15","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2782","RelatedDescription":"Opened pull request \"[build] Upload unit test results\" (#2782) at xamarin/xamarin-android","RelatedBody":"There was some unexpected and unforeseen fallout from commit 241d9416:\r\n`make package-build-status` is only run once.\r\n\r\nThis doesn't *sound* problematic -- hence the oversight -- but the\r\n`msbuild*.binlog` files that the `xa-build-status*.zip` file contained\r\nprior to commit 241d9416 contained *unit test execution logs*, e.g.\r\n`msbuild-*-Target-RunApkTests.binlog`\twhich contains on-device\r\nexecution of the `.apk` unit tests.\r\n\r\nHowever, these files don't exist until *after* the unit tests are run.\r\nMeanwhile, `make package-build-status` executed *before* unit tests\r\nare run, and thus the resulting `xa-build-status*.zip` file no longer\r\ncontains unit test information!\r\n\r\n(This makes it rather difficult to actually review anything about unit\r\ntest execution!)\r\n\r\nThe fix?  Update the `$(MSBUILD_BINLOG)` Make `define` so that it now\r\ntakes an optional 3rd parameter: part of the directory name to place\r\nfiles into, which defaults to `Build`.  (This allows overriding things\r\nso that unit-test related `.binlog` files now go into\r\n`bin/Test$(Configuration)`, not `bin/Build$(Configuration)`.)\r\n\r\nAdditionally, *rename* the `make package-test-errors` rule to\r\n`make package-test-results`, have it produce an `xa-test-results*.zip`\r\nfile, and include the `bin/Test$(Configuration)/msbuild*.binlog` files\r\ninto `xa-test-results*.zip`.\r\n\r\n`make package-test-results` is executed after unit tests are executed,\r\nso this change allows us the uploaded `xa-test-results.zip` file to\r\ncontain unit test execution results."},{"Id":"9165655167","Type":"PullRequestEvent","CreatedAt":"2019-03-01T22:28:17","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2781","RelatedDescription":"Opened pull request \"[Xamarin.Android.Build.Tasks] support enhanced fastdev + D8\" (#2781) at xamarin/xamarin-android","RelatedBody":"A couple problems where happening when you mix:\r\n\r\n    <AndroidDexTool>d8</AndroidDexTool>\r\n    <AndroidFastDeploymentType>Assemblies:Dexes</AndroidFastDeploymentType>\r\n\r\nIt seems the D8 MSBuild targets weren't doing the right thing:\r\n\r\n* D8 targets are using `@(_JavaLibrariesToCompile)` throughout, but\r\n  should be using `@(_JavaLibrariesToCompileForAppDx)` to be \"aware\"\r\n  of enhanced fastdev.\r\n* D8/R8 are generally more strict about missing libraries, so we need\r\n  to make sure a `--lib` switch is added for all the Java libraries.\r\n  Since their dex files are fast deployed, they won't be dexed by the\r\n  calls here.\r\n\r\nSo the changes here are:\r\n\r\n* Rename `@(_JavaLibrariesToCompileForAppDx)` to just\r\n  `@(_JavaLibrariesToCompileForApp)` so it makes sense for DX and D8.\r\n* Use `@(_JavaLibrariesToCompileForApp)` throughout the D8 targets.\r\n* Add the Java libraries to `@(AndroidExternalJavaLibrary)` when\r\n  `$(_InstantRunEnabled)` is `True`. This will add the `--lib` switch\r\n  for each library during the `<D8/>` or `<R8/>` call.\r\n* I switched to using `<ItemGroup/>` over `<CreateItem/>`"},{"Id":"9165547072","Type":"IssuesEvent","CreatedAt":"2019-03-01T22:04:34","Actor":"pjcollins","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2780","RelatedDescription":"Opened issue \"[mono-2018-10] No longer able to load certain 64bit system libraries\" (#2780) at xamarin/xamarin-android","RelatedBody":"I'm encountering a new crash on startup when running certain projects on 64bit devices that appears to only occur against builds from https://github.com/xamarin/xamarin-android/tree/mono-2018-10.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Download and run https://github.com/xamarin/xamarin-forms-samples/tree/master/SkiaSharpForms/MandelAnima on device a 64bit device. If deploying in Release mode, ensure `arm64-v8a` is enabled as a supported ABI.\r\n\r\nThis results in the following crash:\r\nhttp://xqa.blob.core.windows.net/gist/report-37f88bd9516342a0b03dfc95c16ddb3d.txt\r\n\r\n#### Secondary steps to Reproduce\r\n1. Download and run https://github.com/xamarin/xamarin-forms-samples/tree/master/FormsGallery on device a 64bit device. If deploying in Release mode, ensure `arm64-v8a` is enabled as a supported ABI.\r\n2. Click on the \"OpenGLView\" page.\r\n\r\nThis results in the following crash:\r\nhttp://xqa.blob.core.windows.net/gist/report-01671efd2d8044afbb975c331373b6a5.txt\r\n<!--\r\nIf you have a repro project, you may drag & drop the .zip/etc. onto the issue editor to attach it.\r\n-->\r\n\r\n\r\n### Version Information\r\nMono version: 5.20.0.228 (5849bb2f221)  (2019-02-26 21:33:32 -05:00)\r\nXA version: 9.2.99.36 (HEAD/82e2d017) \r\n<!--\r\n1. On macOS and within Visual Studio, select Visual Studio > About Visual Studio, then click the Show Details button, then click the Copy Information button.\r\n\r\n2. Paste below this comment block.\r\n-->\r\n\r\n\r\n<!--\r\n1. On macOS and within Visual Studio:\r\n    a. Click **Tools** > **SDK Command Prompt**.\r\n    b. Within the launched `Terminal.app` window, run:\r\n\r\n            adb logcat -d | pbcopy\r\n\r\n2. Paste below this comment block\r\n-->\r\n\r\n\r\n\r\n<!--\r\nSwitch to the \"Preview\" tab to ensure your issue renders correctly.\r\n\r\nPlease add an appropriate \"Area:\" label in the Labels section.\r\n-->"},{"Id":"9165343599","Type":"PullRequestEvent","CreatedAt":"2019-03-01T21:23:38","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2779","RelatedDescription":"Opened pull request \"[Xamarin.Android.Build.Tasks] AndroidUseAapt2 defaults to False\" (#2779) at xamarin/xamarin-android","RelatedBody":"In preparation for branching for d16-1, we need `$(AndroidUseAapt2)`\r\nto be disabled by default.\r\n\r\nWe currently have aapt2 disabled on d16-0: ac1b29e8\r\n\r\nI am hoping a one-line change is all we need here, since master also\r\nhas: 61716bb3"},{"Id":"9165228388","Type":"PullRequestEvent","CreatedAt":"2019-03-01T21:01:01","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2778","RelatedDescription":"Opened pull request \"Bump to mono/mono/2018-08@56906e23\" (#2778) at xamarin/xamarin-android","RelatedBody":"Context: https://github.com/xamarin/xamarin-android/issues/2679\r\n\r\nBumps to mono/api-snapshot@a388436d\r\n\r\nCrash reporting improvements.\r\n\r\nMake `System.dll` internals visible to `Mono.Android`."}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"9172053154","Type":"IssuesEvent","CreatedAt":"2019-03-04T05:15:41","Actor":"pauldipietro","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/5437","RelatedDescription":"Closed issue \"Xamarin vs Flutter vs ASP.Net vs .net core, and 3rd party vendors\" (#5437) at xamarin/Xamarin.Forms","RelatedBody":" \r\nThis is a suggestion to MS/Google, and all 3rd party vendors.\r\nhttps://readerman1.wordpress.com/2019/03/04/xamarin-vs-flutter-3rd-party/\r\n\r\nXamarin while has a lot of nice features, it just still takes all the heavy load of the OS original UI.\r\nIts advances depend on the pace of the OS UI developers.\r\nIT still needs to have several programming models depending on each platform.\r\nAnd its very difficult to move it to other domains, e.g. Web/desktop/VR/Holo/Console/Smart IoT\r\n \r\nFlutter, and its dependency on Skia, benefits:\r\n1.\tCan mature very fast independent from the OS UI developers, in features.\r\n2.\tNormal developers, can extend it, without repeating their work for each platform.\r\n3.\tIts fast(60+ fps) is not a small feat for a UI kit.\r\n4.\tIts easily can be ported to other platforms like Web/desktop/VR/Holo/Console/Smart IoT\r\n5.\tCan easily adapt to new platforms UI, or make its own themes.\r\n6.\tUI code sharing for all platforms.\r\n7.\tEasily can have its own themes, so we can have one app, that have one look, on all platforms, which eases the learning curve on the user.\r\n8.\tAnimation/effects that need to skip the platform old UI, and go directly to hardware.\r\n9.\tmaking new UI controls/widgets is very easy, fast, powerfull, and runs on all platforms.\r\n \r\nWhat flutter needs:\r\n1.\tTo be independent from Dart, to ease its use in other languages, like c# from .net core, that google itself is using and developing, java, kotlin, and other main stream languages.\r\n2.\tInitiate the port to Web/desktop/VR/Holo/Console/Smart IoT, and the open source community will help in that.\r\n \r\nWhat Xamarin needs to do:\r\n1.\tUse either skia, or other alternative GPU portable engines, that are very fast, and easily portable to any OS.\r\n2.\tMake it the .net core UI.\r\n3.\tInitiate multiple targeted platforms from the start: Web/desktop/VR/Holo/Console/Smart IoT, and not forgetting the Phone.\r\n4.\tStop the old \"java-awt\" style, and consider the \"java-swing\" style.\r\n5.\tMaybe have a way to connect the xaml standard.\r\n \r\n \r\nWhat 3rd party companies need to address:\r\n1.\tHelp in connecting other languages to flutter, like .net.\r\n2.\tHave their own native flutter UI components/widgets, which will give flutter the fast momentum that .net 3rd party companies gave.\r\n3.\tAs they have their own javascript UI components, they should not be afraid to add to their wagon, another toolkit, that is not an MS based one.\r\n4.\tremember that this will ease their interance to new platforms: Consols/VRs/Holos/Smart IoT\r\nand thats a call to all 3rd parties:\r\nALL .NET Control Suites\r\n•\tTelerik DevCraft Ultimate\r\n•\tDevExpress Universal \r\n•\tComponentOne Studio Enterprise\r\n•\tIntersoft Premier Studio\r\n•\tKaramasoft UISuite \r\n•\tXceed Ultimate Suite\r\n•\tNevron Vision for .NET\r\n•\tAspose.Total for .NET\r\n•\tPeter Blum Data Entry Suite\r\n•\tMindscape Mega Pack\r\n•\tFusionCharts Suite XT\r\n•\tTelerik RadControls for ASP.NET AJAX\r\n•\tKendo UI Web\r\n•\tKendo UI for ASP.NET MVC\r\n•\tDevExpress ASP.NET\r\n•\tEssential Studio for ASP.NET MVC\r\n•\tInfragistics NetAdvantage for ASP.NET\r\n•\tWebUI Studio 2013 for ASP.NET\r\n•\tLiveControls - AJAX Toolkit for ASP.NET\r\n•\tGaia Ajax\r\n•\tobout Suite for ASP.NET\r\n•\tEmailVerify.NET\r\n•\tKeyoti Search for ASP.NET\r\n•\tVisual Studio 2013 Toolbox Controls\r\n•\tDevExpress WinForms\r\n•\tInfragistics NetAdvantage for Windows Forms\r\n•\tEssential Studio for Windows Forms\r\n•\tXceed Grid for .NET\r\n•\tRapidSpell for .NET\r\n•\tToolkit Pro 2013 for Visual C++ MFC\r\n \r\n\r\n"},{"Id":"9172038253","Type":"IssuesEvent","CreatedAt":"2019-03-04T05:10:36","Actor":"reader-man","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/5437","RelatedDescription":"Opened issue \"Xamarin vs Flutter vs ASP.Net vs .net core, and 3rd party vendors\" (#5437) at xamarin/Xamarin.Forms","RelatedBody":" \r\nThis is a suggestion to MS/Google, and all 3rd party vendors.\r\nhttps://readerman1.wordpress.com/2019/03/04/xamarin-vs-flutter-3rd-party/\r\n\r\nXamarin while has a lot of nice features, it just still takes all the heavy load of the OS original UI.\r\nIts advances depend on the pace of the OS UI developers.\r\nIT still needs to have several programming models depending on each platform.\r\nAnd its very difficult to move it to other domains, e.g. Web/desktop/VR/Holo/Console/Smart IoT\r\n \r\nFlutter, and its dependency on Skia, benefits:\r\n1.\tCan mature very fast independent from the OS UI developers, in features.\r\n2.\tNormal developers, can extend it, without repeating their work for each platform.\r\n3.\tIts fast(60+ fps) is not a small feat for a UI kit.\r\n4.\tIts easily can be ported to other platforms like Web/desktop/VR/Holo/Console/Smart IoT\r\n5.\tCan easily adapt to new platforms UI, or make its own themes.\r\n6.\tUI code sharing for all platforms.\r\n7.\tEasily can have its own themes, so we can have one app, that have one look, on all platforms, which eases the learning curve on the user.\r\n8.\tAnimation/effects that need to skip the platform old UI, and go directly to hardware.\r\n9.\tmaking new UI controls/widgets is very easy, fast, powerfull, and runs on all platforms.\r\n \r\nWhat flutter needs:\r\n1.\tTo be independent from Dart, to ease its use in other languages, like c# from .net core, that google itself is using and developing, java, kotlin, and other main stream languages.\r\n2.\tInitiate the port to Web/desktop/VR/Holo/Console/Smart IoT, and the open source community will help in that.\r\n \r\nWhat Xamarin needs to do:\r\n1.\tUse either skia, or other alternative GPU portable engines, that are very fast, and easily portable to any OS.\r\n2.\tMake it the .net core UI.\r\n3.\tInitiate multiple targeted platforms from the start: Web/desktop/VR/Holo/Console/Smart IoT, and not forgetting the Phone.\r\n4.\tStop the old \"java-awt\" style, and consider the \"java-swing\" style.\r\n5.\tMaybe have a way to connect the xaml standard.\r\n \r\n \r\nWhat 3rd party companies need to address:\r\n1.\tHelp in connecting other languages to flutter, like .net.\r\n2.\tHave their own native flutter UI components/widgets, which will give flutter the fast momentum that .net 3rd party companies gave.\r\n3.\tAs they have their own javascript UI components, they should not be afraid to add to their wagon, another toolkit, that is not an MS based one.\r\n4.\tremember that this will ease their interance to new platforms: Consols/VRs/Holos/Smart IoT\r\nand thats a call to all 3rd parties:\r\nALL .NET Control Suites\r\n•\tTelerik DevCraft Ultimate\r\n•\tDevExpress Universal \r\n•\tComponentOne Studio Enterprise\r\n•\tIntersoft Premier Studio\r\n•\tKaramasoft UISuite \r\n•\tXceed Ultimate Suite\r\n•\tNevron Vision for .NET\r\n•\tAspose.Total for .NET\r\n•\tPeter Blum Data Entry Suite\r\n•\tMindscape Mega Pack\r\n•\tFusionCharts Suite XT\r\n•\tTelerik RadControls for ASP.NET AJAX\r\n•\tKendo UI Web\r\n•\tKendo UI for ASP.NET MVC\r\n•\tDevExpress ASP.NET\r\n•\tEssential Studio for ASP.NET MVC\r\n•\tInfragistics NetAdvantage for ASP.NET\r\n•\tWebUI Studio 2013 for ASP.NET\r\n•\tLiveControls - AJAX Toolkit for ASP.NET\r\n•\tGaia Ajax\r\n•\tobout Suite for ASP.NET\r\n•\tEmailVerify.NET\r\n•\tKeyoti Search for ASP.NET\r\n•\tVisual Studio 2013 Toolbox Controls\r\n•\tDevExpress WinForms\r\n•\tInfragistics NetAdvantage for Windows Forms\r\n•\tEssential Studio for Windows Forms\r\n•\tXceed Grid for .NET\r\n•\tRapidSpell for .NET\r\n•\tToolkit Pro 2013 for Visual C++ MFC\r\n \r\n\r\n"},{"Id":"9171876917","Type":"IssuesEvent","CreatedAt":"2019-03-04T04:13:42","Actor":"jdluzen","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/5436","RelatedDescription":"Opened issue \"Page.IsBusy crashes\" (#5436) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\nI apologize in advance as this won't have the most concrete information. I am almost certain this is some sort of race condition, as this was working for days before now. I have attempted to debug by looking at the XF source at the lines indicated, but the NullReference doesn't make sense.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Bind `ContentPage.IsBusy` to a valid `IsBusy` property on a ViewModel\r\n2. Use `[XamlCompilation(XamlCompilationOptions.Compile)]` and `x:DataType=\"vm:AddViewModel\"`\r\n3. Load the page\r\n\r\n### Expected Behavior\r\nCrashes with:\r\n```\r\n03-03 22:30:07.258 I/MonoDroid( 6064): System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---> System.NullReferenceException: Object reference not set to an instance of an object\r\n03-03 22:30:07.258 I/MonoDroid( 6064):   at Xamarin.Forms.BindableProperty.TryConvert (System.Object& value) [0x0003d] in D:\\a\\1\\s\\Xamarin.Forms.Core\\BindableProperty.cs:319 \r\n03-03 22:30:07.258 I/MonoDroid( 6064):   at Xamarin.Forms.BindingExpression.TryConvert (System.Object& value, Xamarin.Forms.BindableProperty targetProperty, System.Type convertTo, System.Boolean toTarget) [0x00013] in D:\\a\\1\\s\\Xamarin.Forms.Core\\BindingExpression.cs:433 \r\n03-03 22:30:07.258 I/MonoDroid( 6064):   at Xamarin.Forms.Internals.TypedBinding`2[TSource,TProperty].ApplyCore (System.Object sourceObject, Xamarin.Forms.BindableObject target, Xamarin.Forms.BindableProperty property, System.Boolean fromTarget) [0x000e7] in D:\\a\\1\\s\\Xamarin.Forms.Core\\TypedBinding.cs:214 \r\n03-03 22:30:07.258 I/MonoDroid( 6064):   at Xamarin.Forms.Internals.TypedBinding`2[TSource,TProperty].Apply (System.Object context, Xamarin.Forms.BindableObject bindObj, Xamarin.Forms.BindableProperty targetProperty, System.Boolean fromBindingContextChanged) [0x00058] in D:\\a\\1\\s\\Xamarin.Forms.Core\\TypedBinding.cs:135 \r\n03-03 22:30:07.258 I/MonoDroid( 6064):   at Xamarin.Forms.BindableObject.ApplyBindings (System.Boolean skipBindingContext, System.Boolean fromBindingContextChanged) [0x00041] in D:\\a\\1\\s\\Xamarin.Forms.Core\\BindableObject.cs:453 \r\n03-03 22:30:07.258 I/MonoDroid( 6064):   at Xamarin.Forms.BindableObject.SetInheritedBindingContext (Xamarin.Forms.BindableObject bindable, System.Object value) [0x0005a] in D:\\a\\1\\s\\Xamarin.Forms.Core\\BindableObject.cs:158 \r\n03-03 22:30:07.258 I/MonoDroid( 6064):   at Xamarin.Forms.Element.SetChildInheritedBindingContext (Xamarin.Forms.Element child, System.Object context) [0x00000] in D:\\a\\1\\s\\Xamarin.Forms.Core\\Element.cs:485 \r\n03-03 22:30:07.258 I/MonoDroid( 6064):   at Xamarin.Forms.Element.<OnBindingContextChanged>b__74_0 (Xamarin.Forms.BindableObject child, System.Object bc) [0x00000] in D:\\a\\1\\s\\Xamarin.Forms.Core\\Element.cs:293 \r\n03-03 22:30:07.258 I/MonoDroid( 6064):   at Xamarin.Forms.BindableObjectExtensions.PropagateBindingContext[T] (Xamarin.Forms.BindableObject self, System.Collections.Generic.IList`1[T] children, System.Action`2[T1,T2] setChildBindingContext) [0x0002c] in D:\\a\\1\\s\\Xamarin.Forms.Core\\BindableObjectExtensions.cs:28 \r\n03-03 22:30:07.258 I/MonoDroid( 6064):   at Xamarin.Forms.Element.OnBindingContextChanged () [0x00000] in D:\\a\\1\\s\\Xamarin.Forms.Core\\Element.cs:291 \r\n03-03 22:30:07.258 I/MonoDroid( 6064):   at Xamarin.Forms.View.OnBindingContextChanged () [0x0000c] in D:\\a\\1\\s\\Xamarin.Forms.Core\\View.cs:158 \r\n03-03 22:30:07.258 I/MonoDroid( 6064):   at Xamarin.Forms.BindableObject.SetInheritedBindingContext (Xamarin.Forms.BindableObject bindable, System.Object value) [0x00062] in D:\\a\\1\\s\\Xamarin.Forms.Core\\BindableObject.cs:159 \r\n03-03 22:30:07.258 I/MonoDroid( 6064):   at Xamarin.Forms.Element.SetChildInheritedBindingContext (Xamarin.Forms.Element child, System.Object context) [0x00000] in D:\\a\\1\\s\\Xamarin.Forms.Core\\Element.cs:485 \r\n03-03 22:30:07.258 I/MonoDroid( 6064):   at Xamarin.Forms.TemplatedPage.SetChildInheritedBindingContext (Xamarin.Forms.Element child, System.Object context) [0x00008] in D:\\a\\1\\s\\Xamarin.Forms.Core\\TemplatedPage.cs:36 \r\n03-03 22:30:07.258 I/MonoDroid( 6064):   at Xamarin.Forms.Element.set_Parent (Xamarin.Forms.Element value) [0x0007d] in D:\\a\\1\\s\\Xamarin.Forms.Core\\Element.cs:186 \r\n03-03 22:30:07.258 I/MonoDroid( 6064):   at Xamarin.Forms.Element.OnChildAdded (Xamarin.Forms.Element child) [0x00000] in D:\\a\\1\\s\\Xamarin.Forms.Core\\Element.cs:307 \r\n03-03 22:30:07.258 I/MonoDroid( 6064):   at Xamarin.Forms.VisualElement.OnChildAdded (Xamarin.Forms.Element child) [0x00000] in D:\\a\\1\\s\\Xamarin.Forms.Core\\VisualElement.cs:751 \r\n03-03 22:30:07.258 I/MonoDroid( 6064):   at Xamarin.Forms.Page.OnInternalAdded (Xamarin.Forms.VisualElement view) [0x00013] in D:\\a\\1\\s\\Xamarin.Forms.Core\\Page.cs:385 \r\n03-03 22:30:07.258 I/MonoDroid( 6064):   at Xamarin.Forms.Page.InternalChildrenOnCollectionChanged (System.Object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) [0x00086] in D:\\a\\1\\s\\Xamarin.Forms.Core\\Page.cs:374 \r\n03-03 22:30:07.259 I/MonoDroid( 6064):   at System.Collections.ObjectModel.ObservableCollection`1[T].OnCollectionChanged (System.Collections.Specialized.NotifyCollectionChangedEventArgs e) [0x00018] in <3e9b3e26c4694baab3f689687ad40612>:0 \r\n03-03 22:30:07.259 I/MonoDroid( 6064):   at System.Collections.ObjectModel.ObservableCollection`1[T].OnCollectionChanged (System.Collections.Specialized.NotifyCollectionChangedAction action, System.Object item, System.Int32 index) [0x00009] in <3e9b3e26c4694baab3f689687ad40612>:0 \r\n03-03 22:30:07.259 I/MonoDroid( 6064):   at System.Collections.ObjectModel.ObservableCollection`1[T].InsertItem (System.Int32 index, T item) [0x0001a] in <3e9b3e26c4694baab3f689687ad40612>:0 \r\n03-03 22:30:07.259 I/MonoDroid( 6064):   at System.Collections.ObjectModel.Collection`1[T].Add (T item) [0x00020] in <d4a23bbd2f544c30a48c44dd622ce09f>:0 \r\n03-03 22:30:07.259 I/MonoDroid( 6064):   at Xamarin.Forms.TemplateUtilities.OnContentChanged (Xamarin.Forms.BindableObject bindable, System.Object oldValue, System.Object newValue) [0x00041] in D:\\a\\1\\s\\Xamarin.Forms.Core\\TemplateUtilities.cs:67 \r\n03-03 22:30:07.259 I/MonoDroid( 6064):   at Xamarin.Forms.BindableObject.SetValueActual (Xamarin.Forms.BindableProperty property, Xamarin.Forms.BindableObject+BindablePropertyContext context, System.Object value, System.Boolean currentlyApplying, Xamarin.Forms.Internals.SetValueFlags attributes, System.Boolean silent) [0x00120] in D:\\a\\1\\s\\Xamarin.Forms.Core\\BindableObject.cs:624 \r\n03-03 22:30:07.259 I/MonoDroid( 6064):   at Xamarin.Forms.BindableObject.SetValueCore (Xamarin.Forms.BindableProperty property, System.Object value, Xamarin.Forms.Internals.SetValueFlags attributes, Xamarin.Forms.BindableObject+SetValuePrivateFlags privateAttributes) [0x00179] in D:\\a\\1\\s\\Xamarin.Forms.Core\\BindableObject.cs:422 \r\n03-03 22:30:07.259 I/MonoDroid( 6064):   at Xamarin.Forms.BindableObject.SetValue (Xamarin.Forms.BindableProperty property, System.Object value, System.Boolean fromStyle, System.Boolean checkAccess) [0x0003d] in D:\\a\\1\\s\\Xamarin.Forms.Core\\BindableObject.cs:572 \r\n03-03 22:30:07.259 I/MonoDroid( 6064):   at Xamarin.Forms.BindableObject.SetValue (Xamarin.Forms.BindableProperty property, System.Object value) [0x00000] in D:\\a\\1\\s\\Xamarin.Forms.Core\\BindableObject.cs:122 \r\n03-03 22:30:07.259 I/MonoDroid( 6064):   at <myappname>.Views.AddView.InitializeComponent () [0x00023] in t:\\documents\\Projects\\<myappname>\\src\\<myappname>\\obj\\Debug\\netstandard2.0\\Views\\AddView.xaml.g.cs:26 \r\n03-03 22:30:07.259 I/MonoDroid( 6064):   at <myappname>.Views.AddView..ctor () [0x00028] in t:\\documents\\Projects\\<myappname>\\src\\<myappname>\\Views\\AddView.xaml.cs:13 \r\n03-03 22:30:07.259 I/MonoDroid( 6064):   at (wrapper managed-to-native) System.Reflection.MonoCMethod.InternalInvoke(System.Reflection.MonoCMethod,object,object[],System.Exception&)\r\n03-03 22:30:07.259 I/MonoDroid( 6064):   at System.Reflection.MonoCMethod.InternalInvoke (System.Object obj, System.Object[] parameters, System.Boolean wrapExceptions) [0x00005] in <d4a23bbd2f544c30a48c44dd622ce09f>:0 \r\n03-03 22:30:07.259 I/MonoDroid( 6064):    --- End of inner exception stack trace ---\r\n03-03 22:30:07.259 I/MonoDroid( 6064):   at System.Reflection.MonoCMethod.InternalInvoke (System.Object obj, System.Object[] parameters, System.Boolean wrapExceptions) [0x0001a] in <d4a23bbd2f544c30a48c44dd622ce09f>:0 \r\n03-03 22:30:07.259 I/MonoDroid( 6064):   at System.RuntimeType.CreateInstanceMono (System.Boolean nonPublic, System.Boolean wrapExceptions) [0x000a8] in <d4a23bbd2f544c30a48c44dd622ce09f>:0 \r\n03-03 22:30:07.259 I/MonoDroid( 6064):   at System.RuntimeType.CreateInstanceSlow (System.Boolean publicOnly, System.Boolean wrapExceptions, System.Boolean skipCheckThis, System.Boolean fillCache, System.Threading.StackCrawlMark& stackMark) [0x00009] in <d4a23bbd2f544c30a48c44dd622ce09f>:0 \r\n03-03 22:30:07.259 I/MonoDroid( 6064):   at System.RuntimeType.CreateInstanceDefaultCtor (System.Boolean publicOnly, System.Boolean skipCheckThis, System.Boolean fillCache, System.Boolean wrapExceptions, System.Threading.StackCrawlMark& stackMark) [0x00027] in <d4a23bbd2f544c30a48c44dd622ce09f>:0 \r\n03-03 22:30:07.259 I/MonoDroid( 6064):   at System.Activator.CreateInstance (System.Type type, System.Boolean nonPublic, System.Boolean wrapExceptions) [0x0002c] in <d4a23bbd2f544c30a48c44dd622ce09f>:0 \r\n03-03 22:30:07.259 I/MonoDroid( 6064):   at System.Activator.CreateInstance (System.Type type, System.Boolean nonPublic) [0x00000] in <d4a23bbd2f544c30a48c44dd622ce09f>:0 \r\n03-03 22:30:07.259 I/MonoDroid( 6064):   at System.Activator.CreateInstance (System.Type type) [0x00000] in <d4a23bbd2f544c30a48c44dd622ce09f>:0 \r\n03-03 22:30:07.259 I/MonoDroid( 6064):   at Xamarin.Forms.ElementTemplate+<>c__DisplayClass4_0.<.ctor>b__0 () [0x00000] in D:\\a\\1\\s\\Xamarin.Forms.Core\\ElementTemplate.cs:26 \r\n03-03 22:30:07.259 I/MonoDroid( 6064):   at Xamarin.Forms.ElementTemplate.CreateContent () [0x00026] in D:\\a\\1\\s\\Xamarin.Forms.Core\\ElementTemplate.cs:82 \r\n03-03 22:30:07.259 I/MonoDroid( 6064):   at Xamarin.Forms.Internals.DataTemplateExtensions.CreateContent (Xamarin.Forms.DataTemplate self, System.Object item, Xamarin.Forms.BindableObject container) [0x00000] in D:\\a\\1\\s\\Xamarin.Forms.Core\\DataTemplateExtensions.cs:19 \r\n03-03 22:30:07.259 I/MonoDroid( 6064):   at Xamarin.Forms.ShellContent.Xamarin.Forms.IShellContentController.GetOrCreateContent () [0x00021] in D:\\a\\1\\s\\Xamarin.Forms.Core\\Shell\\ShellContent.cs:57 \r\n03-03 22:30:07.259 I/MonoDroid( 6064):   at Xamarin.Forms.Platform.Android.ShellSectionRenderer.OnCreateView (Android.Views.LayoutInflater inflater, Android.Views.ViewGroup container, Android.OS.Bundle savedInstanceState) [0x000b9] in D:\\a\\1\\s\\Xamarin.Forms.Platform.Android\\Renderers\\ShellSectionRenderer.cs:141 \r\n03-03 22:30:07.259 I/MonoDroid( 6064):   at Android.Support.V4.App.Fragment.n_OnCreateView_Landroid_view_LayoutInflater_Landroid_view_ViewGroup_Landroid_os_Bundle_ (System.IntPtr jnienv, System.IntPtr native__this, System.IntPtr native_inflater, System.IntPtr native_container, System.IntPtr native_savedInstanceState) [0x00020] in <96541ba8a6104b52aadf4218488f978c>:0 \r\n\r\n```\r\n### Actual Behavior\r\nThe page loads, regardless of what IsBusy is.\r\n\r\n### Basic Information\r\nI am using Shell.\r\n\r\n**If I use `XamlCompilationOptions.Skip` OR remove `x:DataType=\"vm:AddViewModel\"` then it loads correctly.**\r\n\r\n- Version with issue: 4\r\n- Last known good version: Unknown\r\n- IDE: VS2017\r\n- Platform Target Frameworks:\r\n  - Android: 9\r\n- Nuget Packages: XF 4.0.0.135214-pre4\r\n"},{"Id":"9171533235","Type":"IssuesEvent","CreatedAt":"2019-03-04T02:21:57","Actor":"nickwood2009","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/5435","RelatedDescription":"Opened issue \"Xamarin form page preview in VS2019 not working when using shell\" (#5435) at xamarin/Xamarin.Forms","RelatedBody":"Using VS2019 (preview 2.0)\r\n with xamarin.forms v4.0.0.169046-pre5\r\nviewing Android and using Shell\r\nWhen using the page preview I get render errors (see screen)\r\nits hard to read and I cant copy out the error content, or extend the frame to view, but it seems to be related to the flags set for \"Shell_Experimental\" in the MainActivity.cs in the Android project:\r\n\r\nglobal::Xamarin.Forms.Forms.SetFlags(\"Shell_Experimental\", \"Visual_Experimental\", \"CollectionView_Experimental\", \"FastRenderers_Experimental\");\r\n            global::Xamarin.Forms.Forms.Init(this, savedInstanceState);\r\n\r\nIs there a solution for this because rapid dev will suffer greatly without it?\r\n![untitled](https://user-images.githubusercontent.com/1969372/53706847-060ca380-3e78-11e9-970c-b42bf7fb7e86.png)\r\n"},{"Id":"9171055515","Type":"IssuesEvent","CreatedAt":"2019-03-03T22:54:00","Actor":"VladislavAntonyuk","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/5434","RelatedDescription":"Opened issue \"MacOS navigation is broken\" (#5434) at xamarin/Xamarin.Forms","RelatedBody":"Xamarin latest myget package\r\n\r\n1. Create parent page and child page\r\n2. Navigate to child page.\r\n3. Click back button\r\n\r\nSystem.NullReferenceException: Object reference not set to an instance of an object\r\n  at Xamarin.Forms.Platform.MacOS.ViewRenderer`2[TView,TNativeView].SetNativeControl (TNativeView uiview) [0x0004a] in <733227acc73942269e4e6cb221eeb85f>:0 \r\n  at Xamarin.Forms.Platform.MacOS.ImageRenderer.OnElementChanged (Xamarin.Forms.Platform.MacOS.ElementChangedEventArgs`1[TElement] e) [0x00015] in <733227acc73942269e4e6cb221eeb85f>:0 \r\n  at Xamarin.Forms.Platform.MacOS.VisualElementRenderer`1[TElement].SetElement (TElement element) [0x0016b] in <733227acc73942269e4e6cb221eeb85f>:0 \r\n  at Xamarin.Forms.Platform.MacOS.VisualElementRenderer`1[TElement].Dispose (System.Boolean disposing) [0x000bf] in <733227acc73942269e4e6cb221eeb85f>:0 \r\n  at Xamarin.Forms.Platform.MacOS.ViewRenderer`2[TView,TNativeView].Dispose (System.Boolean disposing) [0x0006b] in <733227acc73942269e4e6cb221eeb85f>:0 \r\n  at Xamarin.Forms.Platform.MacOS.ImageRenderer.Dispose (System.Boolean disposing) [0x00048] in <733227acc73942269e4e6cb221eeb85f>:0 \r\n  at Foundation.NSObject.Dispose () [0x00001] in /Library/Frameworks/Xamarin.Mac.framework/Versions/5.2.1.15/src/Xamarin.Mac/Foundation/NSObject2.cs:147 \r\n  at Xamarin.Forms.Platform.MacOS.VisualElementPackager.Dispose (System.Boolean disposing) [0x00067] in <733227acc73942269e4e6cb221eeb85f>:0 \r\n  at Xamarin.Forms.Platform.MacOS.VisualElementPackager.Dispose () [0x00001] in <733227acc73942269e4e6cb221eeb85f>:0 \r\n  at Xamarin.Forms.Platform.MacOS.VisualElementRenderer`1[TElement].Dispose (System.Boolean disposing) [0x00080] in <733227acc73942269e4e6cb221eeb85f>:0 \r\n  at Foundation.NSObject.Dispose () [0x00001] in /Library/Frameworks/Xamarin.Mac.framework/Versions/5.2.1.15/src/Xamarin.Mac/Foundation/NSObject2.cs:147 \r\n  at Xamarin.Forms.Platform.MacOS.VisualElementPackager.Dispose (System.Boolean disposing) [0x00067] in <733227acc73942269e4e6cb221eeb85f>:0 \r\n  at Xamarin.Forms.Platform.MacOS.VisualElementPackager.Dispose () [0x00001] in <733227acc73942269e4e6cb221eeb85f>:0 \r\n  at Xamarin.Forms.Platform.MacOS.VisualElementRenderer`1[TElement].Dispose (System.Boolean disposing) [0x00080] in <733227acc73942269e4e6cb221eeb85f>:0 \r\n  at Foundation.NSObject.Dispose () [0x00001] in /Library/Frameworks/Xamarin.Mac.framework/Versions/5.2.1.15/src/Xamarin.Mac/Foundation/NSObject2.cs:147 \r\n  at Xamarin.Forms.Platform.MacOS.DisposeHelpers.DisposeModalAndChildRenderers (Xamarin.Forms.Element view) [0x00056] in <733227acc73942269e4e6cb221eeb85f>:0 \r\n  at Xamarin.Forms.Platform.MacOS.Platform.HandleChildRemoved (System.Object sender, Xamarin.Forms.ElementEventArgs e) [0x00008] in <733227acc73942269e4e6cb221eeb85f>:0 \r\n  at Xamarin.Forms.Element.OnDescendantRemoved (Xamarin.Forms.Element child) [0x00014] in <e25a74aae93144dfa5380553df0d3ae2>:0 \r\n  at Xamarin.Forms.Element.OnChildRemoved (Xamarin.Forms.Element child) [0x00022] in <e25a74aae93144dfa5380553df0d3ae2>:0 \r\n  at Xamarin.Forms.VisualElement.OnChildRemoved (Xamarin.Forms.Element child) [0x00001] in <e25a74aae93144dfa5380553df0d3ae2>:0 \r\n  at Xamarin.Forms.Page.OnInternalRemoved (Xamarin.Forms.VisualElement view) [0x00015] in <e25a74aae93144dfa5380553df0d3ae2>:0 \r\n  at Xamarin.Forms.Page.InternalChildrenOnCollectionChanged (System.Object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e) [0x0003c] in <e25a74aae93144dfa5380553df0d3ae2>:0 \r\n  at System.Collections.ObjectModel.ObservableCollection`1[T].OnCollectionChanged (System.Collections.Specialized.NotifyCollectionChangedEventArgs e) [0x00018] in /Library/Frameworks/Xamarin.Mac.framework/Versions/5.2.1.15/src/Xamarin.Mac/external/corefx/src/System.ObjectModel/src/System/Collections/ObjectModel/ObservableCollection.cs:263 \r\n  at System.Collections.ObjectModel.ObservableCollection`1[T].OnCollectionChanged (System.Collections.Specialized.NotifyCollectionChangedAction action, System.Object item, System.Int32 index) [0x00000] in /Library/Frameworks/Xamarin.Mac.framework/Versions/5.2.1.15/src/Xamarin.Mac/external/corefx/src/System.ObjectModel/src/System/Collections/ObjectModel/ObservableCollection.cs:338 \r\n  at System.Collections.ObjectModel.ObservableCollection`1[T].RemoveItem (System.Int32 index) [0x00021] in /Library/Frameworks/Xamarin.Mac.framework/Versions/5.2.1.15/src/Xamarin.Mac/external/corefx/src/System.ObjectModel/src/System/Collections/ObjectModel/ObservableCollection.cs:182 \r\n  at System.Collections.ObjectModel.Collection`1[T].Remove (T item) [0x00027] in /Library/Frameworks/Xamarin.Mac.framework/Versions/5.2.1.15/src/Xamarin.Mac/external/corefx/src/Common/src/CoreLib/System/Collections/ObjectModel/Collection.cs:130 \r\n  at Xamarin.Forms.NavigationPage+<Xamarin-Forms-INavigationPageController-RemoveAsyncInner>d__69.MoveNext () [0x00154] in <e25a74aae93144dfa5380553df0d3ae2>:0 \r\n--- End of stack trace from previous location where exception was thrown ---\r\n  at Xamarin.Forms.NavigationPage+<PopAsyncInner>d__68.MoveNext () [0x000b4] in <e25a74aae93144dfa5380553df0d3ae2>:0 \r\n--- End of stack trace from previous location where exception was thrown ---\r\n  at Xamarin.Forms.Platform.MacOS.NativeToolbarTracker+<NavigateBackFrombackButton>d__37.MoveNext () [0x00090] in <733227acc73942269e4e6cb221eeb85f>:0 \r\n--- End of stack trace from previous location where exception was thrown ---\r\n  at Xamarin.Forms.Platform.MacOS.NativeToolbarTracker+<<UpdateNavigationItems>b__33_0>d.MoveNext () [0x00068] in <733227acc73942269e4e6cb221eeb85f>:0 \r\n--- End of stack trace from previous location where exception was thrown ---\r\n  at System.Runtime.CompilerServices.AsyncMethodBuilderCore+<>c.<ThrowAsync>b__6_0 (System.Object state) [0x00000] in /Library/Frameworks/Xamarin.Mac.framework/Versions/5.2.1.15/src/Xamarin.Mac/mcs/class/referencesource/mscorlib/system/runtime/compilerservices/AsyncMethodBuilder.cs:1023 \r\n  at Foundation.NSAsyncSynchronizationContextDispatcher.Apply () [0x00002] in /Library/Frameworks/Xamarin.Mac.framework/Versions/5.2.1.15/src/Xamarin.Mac/Foundation/NSAction.cs:178 \r\n  at (wrapper managed-to-native) AppKit.NSApplication.NSApplicationMain(int,string[])\r\n  at AppKit.NSApplication.Main (System.String[] args) [0x00040] in /Library/Frameworks/Xamarin.Mac.framework/Versions/5.2.1.15/src/Xamarin.Mac/AppKit/NSApplication.cs:100 \r\n  at DrawGo.Mac.Application.Main (System.String[] args) [0x00027]\r\n\r\n2019-03-04 00:44:49.8356|FATAL|Is device: True\r\nModel: \r\nManufacturer: Apple\r\nPlatform: macOS\r\nVersion: Version 10.14.2 (Build 18C54)"},{"Id":"9169200878","Type":"IssuesEvent","CreatedAt":"2019-03-03T07:19:16","Actor":"1mohmmad4","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/5433","RelatedDescription":"Opened issue \"picker focus() not show dialog pop-up in just android 9.0 (Xamarin.forms 3.5)\" (#5433) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\npicker in xamarin.forms version 3.5 is not working in android 9.0 but in previous version of android or even all system versions of iOS  it is working good if you are tap on picker or focus on it by focus() function in code behind of from anywhere it will show you the dialog pop-up.\r\n\r\n### Expected Behavior\r\nshow dialog pop-up when click on picker or focus on it.\r\n\r\n### Actual Behavior\r\nnot showing dialog pop-up when click on picker or focus.\r\n\r\n### Basic Information\r\n- Version with issue: 3.5\r\n- Last known good version: 3.2\r\n- Platform Target Frameworks:\r\n  - Android: 9.0 "}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"9171950263","Type":"PullRequestEvent","CreatedAt":"2019-03-04T04:39:57","Actor":"dalexsoto","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5707","RelatedDescription":"Opened pull request \"[generator] Fix CMSampleBuffer usage in 3rd party bindings\" (#5707) at xamarin/xamarin-macios","RelatedBody":"Fixes xamarin/xamarin-macios#5692\r\n\r\n3rd party bindings cannot use the `.ctor(IntPtr, bool)` of\r\n`CMSampleBuffer` because it is `private`, they must use\r\n`Runtime.GetINativeObject<T> (IntPtr, bool)` instead."},{"Id":"9170389084","Type":"PullRequestEvent","CreatedAt":"2019-03-03T17:46:48","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5700","RelatedDescription":"Merged pull request \"[apidiff] Fix location for XI (when comparing), otherwise we get the full (not PR) diff\" (#5700) at xamarin/xamarin-macios","RelatedBody":""},{"Id":"9170385103","Type":"PullRequestEvent","CreatedAt":"2019-03-03T17:44:56","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5703","RelatedDescription":"Merged pull request \"[xi interpreter] bump mono\" (#5703) at xamarin/xamarin-macios","RelatedBody":"Mostly FYI for @spouliot. I backported the changes to https://github.com/mono/mono/tree/spouliot-2018-08-intr\r\n\r\nCommit list for mono/mono:\r\n\r\n* mono/mono@940791157f4 [interp] mixed mode fixes for delegates\r\n* mono/mono@a5838f331bd [2018-10] [aot] abort lookup early when a method isn\\u0027t available in AOT image (#13179)\r\n* mono/mono@a0908c2327b [2018-10] AOT fixes for interp mixed mode (#13172)\r\n\r\nDiff: https://github.com/mono/mono/compare/5df8d062938ecfa377dff031e31d7e557eef141c...940791157f41a74c40f8cfa35dadef8d2c0bf82f\r\n\r\nFixes https://github.com/xamarin/xamarin-macios/issues/5622 and https://github.com/xamarin/xamarin-macios/issues/5618"},{"Id":"9170162975","Type":"PullRequestEvent","CreatedAt":"2019-03-03T16:02:26","Actor":"msioen","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5706","RelatedDescription":"Opened pull request \"Fix build failure when dsym generation is disabled\" (#5706) at xamarin/xamarin-macios","RelatedBody":"If your iOS project has the -dsym=false modifier in the MTouchExtraArgs the build fails during the GenerateDebugSymbols step because it tries to touch a file that doesn't exist.\r\n\r\n=> added an additional Exists step to ensure the build doesn't fail on this"},{"Id":"9166882646","Type":"IssuesEvent","CreatedAt":"2019-03-02T08:02:06","Actor":"ForkBug","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/5705","RelatedDescription":"Opened issue \"[Question]What's the equivalence of CFStringTransform in Xamarin?\" (#5705) at xamarin/xamarin-macios","RelatedBody":"We want to convert some strings but couldn't find  the equivalence of CFStringTransform"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1101572485114462220","CreatedAt":"2019-03-01T19:58:41+00:00","UserScreenname":"xamarinhq","Text":"Developer Community User Groups are gathering to learn about new, exciting releases and tooling to help jumpstart t… https://t.co/GgCWj5LttS","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":39,"FavoriteCount":17,"RawContent":null},{"Id":"1101202237752258564","CreatedAt":"2019-02-28T19:27:27+00:00","UserScreenname":"xamarinhq","Text":"Want to display PDF docs w/i your #Xamarin apps? Now you can. Learn to view PDF files within your Xamarin.Forms app… https://t.co/GjuKzrvNYM","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":94,"FavoriteCount":29,"RawContent":null},{"Id":"1100455963361005570","CreatedAt":"2019-02-26T18:02:01+00:00","UserScreenname":"xamarinhq","Text":"In this episode of the #dotNETCore podcast, @jimbobbennett talks #Xamarin &amp; .NET Standard. Listen in or read the tr… https://t.co/VDFrb1excV","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":39,"FavoriteCount":14,"RawContent":null},{"Id":"1100149148282769409","CreatedAt":"2019-02-25T21:42:51+00:00","UserScreenname":"xamarinhq","Text":"Android emulators have their own networking config but now you can debug #Android apps locally regardless of whethe… https://t.co/Hbsm6gbXft","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":72,"FavoriteCount":31,"RawContent":null},{"Id":"1098996242238111745","CreatedAt":"2019-02-22T17:21:37+00:00","UserScreenname":"xamarinhq","Text":"This week on the #XamarinShow, @DavidOrtinau gives us all the reasons and features to &lt;3 in Xamarin.Forms 3.5. This… https://t.co/pVcHVX6LYJ","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":55,"FavoriteCount":26,"RawContent":null},{"Id":"1097993381496700935","CreatedAt":"2019-02-19T22:56:36+00:00","UserScreenname":"xamarinhq","Text":"With only a few lines of code, today's #Xamarin.Essentials API of the week helps you persist settings and preferenc… https://t.co/izkl5pGL6m","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":48,"FavoriteCount":20,"RawContent":null},{"Id":"1097939132532310018","CreatedAt":"2019-02-19T19:21:02+00:00","UserScreenname":"xamarinhq","Text":"On this week's #XamarinShow Essential API of the week, we take a look at Secure Storage, which enables you to easil… https://t.co/OwQSZ1QRlI","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":45,"FavoriteCount":25,"RawContent":null},{"Id":"1097603017375993857","CreatedAt":"2019-02-18T21:05:26+00:00","UserScreenname":"xamarinhq","Text":"Xamarin.Forms 101: Command Parameters: https://t.co/rwzzq9yQib\n\n.@JamesMontemagno takes us through a new mini-serie… https://t.co/ZFInvKFhSL","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":111,"FavoriteCount":48,"RawContent":null},{"Id":"1096561048562384898","CreatedAt":"2019-02-16T00:05:01+00:00","UserScreenname":"xamarinhq","Text":"The #Xamarin Developer Blog is migrating to a new platform with a modern, clean design and powerful features that m… https://t.co/nJUxXItfe8","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":98,"FavoriteCount":35,"RawContent":null},{"Id":"1095804816121581570","CreatedAt":"2019-02-13T22:00:01+00:00","UserScreenname":"xamarinhq","Text":"The #VisualStudio Mobile Dev Podcast is out. In this episode, @CodeMillMatt &amp; @JamesMontemagno discuss the latest &amp;… https://t.co/SPEvfxFuLn","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":57,"FavoriteCount":14,"RawContent":null},{"Id":"1095445655076700162","CreatedAt":"2019-02-12T22:12:51+00:00","UserScreenname":"xamarinhq","Text":"To provide the best user experience we need access to the current network state of our users’ devices.\n\n...new from… https://t.co/w2ZGMgKqli","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":42,"FavoriteCount":24,"RawContent":null},{"Id":"1093221405917937670","CreatedAt":"2019-02-06T18:54:28+00:00","UserScreenname":"xamarinhq","Text":"Every month we survey &amp; interview our Xamarin devs, listening to your firsthand stories. Why? To make #Xamarin bett… https://t.co/Gwc32YD8qG","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":94,"FavoriteCount":41,"RawContent":null},{"Id":"1093196382901547008","CreatedAt":"2019-02-06T17:15:02+00:00","UserScreenname":"xamarinhq","Text":"On a recent #XamarinShow, Mike Parker from the Microsoft Mobile Customer Advisory Team that shows us how to easily… https://t.co/jdjf2oZXwI","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":49,"FavoriteCount":17,"RawContent":null},{"Id":"1092542167078326279","CreatedAt":"2019-02-04T21:55:25+00:00","UserScreenname":"xamarinhq","Text":"Walk through some techniques for separating the concerns of dev'ing a C/C++ library, a C# wrapper, &amp; a mobile app s… https://t.co/W1RmRSHzXZ","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":72,"FavoriteCount":36,"RawContent":null},{"Id":"1091455153868296201","CreatedAt":"2019-02-01T21:56:01+00:00","UserScreenname":"xamarinhq","Text":"Announcing .NET Foundation Open Membership. We're making some big changes to expand the #dotNET Foundation. We’re i… https://t.co/iePYJUdean","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":69,"FavoriteCount":39,"RawContent":null},{"Id":"1091387761297362944","CreatedAt":"2019-02-01T17:28:13+00:00","UserScreenname":"xamarinhq","Text":"There's a new Xamarin.Essentials out. Today, @JamesMontemagno highlights API of the Week, App Information; which gi… https://t.co/WlU6hQHbNl","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":66,"FavoriteCount":22,"RawContent":null},{"Id":"1090678537491808256","CreatedAt":"2019-01-30T18:30:01+00:00","UserScreenname":"xamarinhq","Text":"Check out this super-interesting use-case for creating complex UI using FastGrid for Xamarin.Forms with many cell v… https://t.co/SNff8XhdJ3","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":99,"FavoriteCount":42,"RawContent":null},{"Id":"1089964090339049472","CreatedAt":"2019-01-28T19:11:04+00:00","UserScreenname":"xamarinhq","Text":"Finding it a bit complex packaging your Xamarin. Android application? Here's some excellent info about Android’s D8… https://t.co/1qhLDuX3m6","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":71,"FavoriteCount":28,"RawContent":null}]}},"RunOn":"2019-03-04T05:30:52.7540909Z","RunDurationInMilliseconds":2456}