{"Data":{"GitHub":{"Issues":[{"Id":"459509854","IsPullRequest":false,"CreatedAt":"2019-06-22T20:47:18","Actor":"rladuca","Number":"1062","RawContent":null,"Title":"Convert System.Printing-ref that builds on GitHub to a cycle-breaker","State":"open","Body":"On GitHub, System.Printing-ref.csproj builds an assembly that is used pre-dominantly as a cycle-breaker (for internals).  The real reference assembly is currently building in dotnet-wpf-int.\r\n\r\nWe should formally convert this to a true cycle-breaker and trim down the surface area exposed.\r\n\r\nThis is follow on work from: https://github.com/dotnet/wpf/issues/932 where, in the dotnet-wpf-int portion, we removed the internals from System.Printing's reference assembly.  When System.Printing goes open source, this need to be done since the new ref assembly will no longer contain internals needed by the build.","Url":"https://github.com/dotnet/wpf/issues/1062","RelatedDescription":"Open issue \"Convert System.Printing-ref that builds on GitHub to a cycle-breaker\" (#1062)"},{"Id":"459501207","IsPullRequest":false,"CreatedAt":"2019-06-22T18:50:22","Actor":"stevenbrix","Number":"1061","RawContent":null,"Title":"PresentationCore.dll doesn't get picked up by test apps","State":"open","Body":"When using the pattern described in the [developer guide](https://github.com/dotnet/wpf/blob/master/Documentation/developer-guide.md#testing-api-changes) most managed assemblies like `WindowsBase` and `PresentationFramework` will be copied and used, except for `PresentationCore`.\r\n\r\nThere's probably something small here that just requires investigating the MSBuild bin logs and trying to figure out where these references get picked up and why this is special.","Url":"https://github.com/dotnet/wpf/issues/1061","RelatedDescription":"Open issue \"PresentationCore.dll doesn't get picked up by test apps\" (#1061)"},{"Id":"459472201","IsPullRequest":true,"CreatedAt":"2019-06-22T13:58:04","Actor":"dotnet-maestro[bot]","Number":"1060","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:5a60b451-e3fe-4910-c0e5-08d6df169eee)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Build**: 20190621.4\r\n- **Date Produced**: 6/21/2019 1:33 PM\r\n- **Commit**: 60ea959c0348e659f63275c9cfb7898fed9c0056\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng** -> 4.8.0-preview7.19321.4\r\n\r\n[marker]: <> (End:5a60b451-e3fe-4910-c0e5-08d6df169eee)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1060","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#1060)"},{"Id":"459470462","IsPullRequest":true,"CreatedAt":"2019-06-22T12:41:49","Actor":"dotnet-maestro[bot]","Number":"1059","RawContent":null,"Title":"[master] Update dependencies from dotnet/winforms","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20190621.8\r\n- **Date Produced**: 6/22/2019 5:32 AM\r\n- **Commit**: d4675ba08f3278c051e66ee00fe31c98e00c1390\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 4.8.0-preview7.19321.8\r\n\r\n[marker]: <> (End:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n\r\n[marker]: <> (Begin:Coherency Updates)\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n- **Microsoft.NETCore.App** -> 3.0.0-preview7-27821-07 (parent: Microsoft.Private.Winforms)\r\n- **Microsoft.NETCore.App** -> 3.0.0-preview7-27821-07 (parent: Microsoft.Private.Winforms)\r\n- **Microsoft.NETCore.App** -> 3.0.0-preview7-27821-07 (parent: Microsoft.Private.Winforms)\r\n- **Microsoft.NETCore.App** -> 3.0.0-preview7-27821-07 (parent: Microsoft.Private.Winforms)\r\n- **Microsoft.NETCore.App** -> 3.0.0-preview7-27821-07 (parent: Microsoft.Private.Winforms)\r\n- **Microsoft.NETCore.App** -> 3.0.0-preview7-27821-07 (parent: Microsoft.Private.Winforms)\r\n- **Microsoft.NETCore.App** -> 3.0.0-preview7-27821-07 (parent: Microsoft.Private.Winforms)\r\n- **Microsoft.NETCore.App** -> 3.0.0-preview7-27821-07 (parent: Microsoft.Private.Winforms)\r\n- **Microsoft.NETCore.App** -> 3.0.0-preview7-27821-07 (parent: Microsoft.Private.Winforms)\r\n- **Microsoft.NETCore.App** -> 3.0.0-preview7-27821-07 (parent: Microsoft.Private.Winforms)\r\n- **Microsoft.NETCore.App** -> 3.0.0-preview7-27821-07 (parent: Microsoft.Private.Winforms)\r\n- **Microsoft.NETCore.App** -> 3.0.0-preview7-27821-07 (parent: Microsoft.Private.Winforms)\r\n- **Microsoft.NETCore.App** -> 3.0.0-preview7-27821-07 (parent: Microsoft.Private.Winforms)\r\n- **Microsoft.NETCore.App** -> 3.0.0-preview7-27821-07 (parent: Microsoft.Private.Winforms)\r\n- **Microsoft.NETCore.App** -> 3.0.0-preview7-27821-07 (parent: Microsoft.Private.Winforms)\r\n- **Microsoft.NETCore.ILDAsm** -> 3.0.0-preview7.19321.2 (parent: Microsoft.NETCore.Runtime.CoreCLR)\r\n- **Microsoft.NETCore.Runtime.CoreCLR** -> 3.0.0-preview7.19321.2 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.App** -> 3.0.0-preview7-27821-07 (parent: Microsoft.Private.Winforms)\r\n- **Microsoft.NETCore.ILAsm** -> 3.0.0-preview7.19321.2 (parent: Microsoft.NETCore.Runtime.CoreCLR)\r\n- **Microsoft.NETCore.Runtime.CoreCLR** -> 3.0.0-preview7.19321.2 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.App** -> 3.0.0-preview7-27821-07 (parent: Microsoft.Private.Winforms)\r\n\r\n[marker]: <> (End:Coherency Updates)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1059","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/winforms\" (#1059)"},{"Id":"459467698","IsPullRequest":true,"CreatedAt":"2019-06-22T12:36:17","Actor":"dotnet-maestro[bot]","Number":"1058","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:3a1d3bb6-c64d-406d-e8f4-08d648cf64cb)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190621.75\r\n- **Date Produced**: 6/22/2019 3:18 AM\r\n- **Commit**: fcee3d5c2d6180bec19c4ae50234771c436b4b52\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19321.75\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19321.75\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19321.75\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19321.75\r\n\r\n[marker]: <> (End:3a1d3bb6-c64d-406d-e8f4-08d648cf64cb)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1058","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1058)"},{"Id":"459163885","IsPullRequest":true,"CreatedAt":"2019-06-22T05:24:59","Actor":"dotnet-maestro[bot]","Number":"1040","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:3a1d3bb6-c64d-406d-e8f4-08d648cf64cb)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190620.1\r\n- **Date Produced**: 6/20/2019 9:31 AM\r\n- **Commit**: b21c24996a73aa62b7a1ee69f546b9d2eb084f29\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19320.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19320.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19320.1\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19320.1\r\n\r\n[marker]: <> (End:3a1d3bb6-c64d-406d-e8f4-08d648cf64cb)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1040","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1040)"},{"Id":"459410451","IsPullRequest":true,"CreatedAt":"2019-06-22T00:09:17","Actor":"rladuca","Number":"1057","RawContent":null,"Title":"Convert C# Reference Assembly Generation to Use GenAPI","State":"open","Body":"Fixes #932 \r\n\r\nWhat work is currently in this PR:\r\n\r\nGitHub:\r\n* For all shipping C# reference assemblies built on GitHub generate their code from GenAPI\r\n* Fixup any issues that result from GenAPI code gen (see ManualFixups.txt in this PR)\r\n* Baseline all ApiCompat issues (there is a feedback loop here with fixups for a few commits)\r\n\r\ndotnet-wpf-int:\r\n* Switch ProjectReference substitution for dotnet-wpf-int to use runtime assemblies\r\n* For all shipping C# reference assemblies built on dotnet-wpf-int generate their code from GenAPI\r\n* Fixup any issues that result from GenAPI code gen (see ManualFixups.txt in this PR)\r\n* Baseline all ApiCompat issues (there is a feedback loop here with fixups for a few commits)\r\n\r\nWhat work is in progress still:\r\n- [ ] More thorough testing of new ref assemblies\r\n- [ ] PR and test feedback\r\n\r\nWhat you should center your review around:\r\n\r\n* Engineering system changes (in WpfArcadeSdk, ignore Arcade DARC flow)\r\n* ApiCompat results and baselines\r\n* Exclusion lists for GenApi (see GlobalApiExclusions.txt and GlobalAttrExclusions.txt)\r\n\r\nThese are what eventually feed into the reference assemblies and dictate the public surface area.\r\n\r\ndotnet-wpf-int PR: https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int/pullrequest/1772?_a=overview\r\n\r\nUpstream notification issue: https://github.com/dotnet/core-setup/issues/6901","Url":"https://github.com/dotnet/wpf/pull/1057","RelatedDescription":"Open PR \"Convert C# Reference Assembly Generation to Use GenAPI\" (#1057)"},{"Id":"459379531","IsPullRequest":true,"CreatedAt":"2019-06-21T21:29:10","Actor":"ryalanms","Number":"1056","RawContent":null,"Title":"Restore PackageReferences in temporary assembly projects to import build extensions","State":"open","Body":"**The temporary project is not getting props and targets files (build extension files) from PackageReferences defined in their parent project.**  This is causing failures in referenced packages that rely on build extensions (e.g., Google Protocol Buffers) to perform pre-compile tasks, such as code generation.  \r\n\r\nSeveral options were considered, including consuming the generated props and targets that include the PackageReferences props/targets from the outer parent project, as the parent project `Restore` has already run and includes identical PackageReferences. However, we opted to run `Restore` directly on the temporary project instead, which allowed a fix without changes to external build files (other than a minor change to the Arcade SDK).  There are now two `Restore` operations: one for the parent project and one for the temporary project.  Note that `Restore` will not re-download packages but will generate the assets file, targets file, and props file.  These files include imports for build extensions in the PackageReferences.\r\n\r\nThese tasks could easily be condensed in to a single parameterized task, but breaking the steps in to three made a logs easier to read and improved debugging.  There are now three tasks: \r\n\r\n1. `CreateTemporaryTargetAssemblyProject`\r\n2. `RestoreTemporaryTargetAssemblyProject` (which calls `RunProjectBuildTarget` with `Restore`)\r\n3. `GenerateTemporaryTargetAssembly`\r\n\r\nThe first task creates a temporary project with random component in the name from the outer parent project.  `RestoreTemporaryTargetAssemblyProject` consumes the temporary project and runs `Restore`, generating assets, .props, and .targets files that include imports to any build extensions inside PackageReferences.  These files are then consumed in `GenerateTemporaryTargetAssembly` as part of the\r\nnormal build process for the temporary project.\r\n\r\nNote that there is an Arcade SDK targets file change that needs to be coordinated with this change.  Workaround.props needs to be modified to remove a temporary workaround for the lack of PackageReference support to prevent duplicate import errors.  https://github.com/dotnet/arcade/pull/3127\r\n\r\n(APICompat was re-baselined to account for the public API surface changes in PresentationBuildTasks.)","Url":"https://github.com/dotnet/wpf/pull/1056","RelatedDescription":"Open PR \"Restore PackageReferences in temporary assembly projects to import build extensions\" (#1056)"},{"Id":"459355051","IsPullRequest":false,"CreatedAt":"2019-06-21T20:10:49","Actor":"ryalanms","Number":"1055","RawContent":null,"Title":"Remove 'IsWpfTempProject' workaround after .NET Core Preview 8 is released (Arcade #3129)","State":"open","Body":"Tracking arcade issue: https://github.com/dotnet/arcade/pull/3129\r\n\r\nWPF for .NET Core is adding a restore step to temporary project compilation for PackageReferences. The existing Arcade workaround needs to be temporarily updated to prevent duplicate imports, then removed entirely after the next WPF Preview release.","Url":"https://github.com/dotnet/wpf/issues/1055","RelatedDescription":"Open issue \"Remove 'IsWpfTempProject' workaround after .NET Core Preview 8 is released (Arcade #3129)\" (#1055)"},{"Id":"459256047","IsPullRequest":false,"CreatedAt":"2019-06-21T17:48:30","Actor":"grubioe","Number":"1046","RawContent":null,"Title":"[DRT] Did not get correct Height after resizing through ResizeGrip. expected:300 -- actual:301","State":"closed","Body":"Copied from VSO 739317\r\n\r\n**Steps to reproduce:**\r\n\r\n1. cd src\\DRT\r\n2. Load DrtAppModel.sln\r\n3. Enable the test case (search for bug number 739317)\r\n4. Build DrtWindowResizeGrip… project\r\n\r\nRun its unit test.\r\n\r\nSystem.ApplicationException: Did not get correct Height after resizing through ResizeGrip. expected:300 -- actual:301\r\n   at DRT.WindowResizeGripFlowDirectionApp.VerifySizeAfterResize(Object obj) in X:\\WPF\\src\\DRT\\DrtAppModel\\Window\\WindowResizeGripFlowDirection\\DrtWindowResizeGripFlowDirection.cs:line 208\r\n\r\nComments:\r\nThis test passes on a clean TDP VM in 19H1, perhaps an environment issue?\r\n","Url":"https://github.com/dotnet/wpf/issues/1046","RelatedDescription":"Closed issue \"[DRT] Did not get correct Height after resizing through ResizeGrip. expected:300 -- actual:301\" (#1046)"},{"Id":"459267206","IsPullRequest":false,"CreatedAt":"2019-06-21T15:59:56","Actor":"grubioe","Number":"1054","RawContent":null,"Title":"[DRT] Fix DRT failures for DataServices, FlowLayout, DigitalDocuments, Printing, XAML","State":"open","Body":"Fix all failures outlined in following table:\r\n\r\n\r\nFeature | Test Case | Reproduced OS | Log | Bugs:\r\n-- | -- | -- | -- | --\r\nDataServices | DrtDataSrv() | All test OSes | DrtDataSrv() | https://github.com/dotnet/wpf/issues/756   should be going away soon\r\nFlowLayout | DrtFlow() | 2K8R2 | DrtFlow()-2K8R2 |  \r\nFlowLayout | DrtFlowLayout() | All test OSes | DrtFlowLayout() |  \r\nImaging | DrtImaging() | Failed OS: (x64 OSes)   Win2K8R2,   Win2K12,   RS1 ServerStandard,   RS3 x64,   RS5 x64 | DrtImaging()-X64   DrtImaging()-2K8R2 | https://devdiv.visualstudio.com/DevDiv/_workitems/edit/832896\r\nPrinting | DrtPrinting() | Failed OS:    Win81 x86,   Win2K12,   RS1 x86,   RS1 ServerStandard,   RS5 x64,   RS6 x86 | DrtPrinting()   DrtPrinting()-RS5&&RS6 | https://github.com/dotnet/wpf/issues/597\r\nXaml | DrtXaml() | All test OSes | DrtXaml() | https://devdiv.visualstudio.com/DevDiv/_workitems/edit/690127\r\nDigitalDocuments | DrtDigitalSignature() | All test OSes | DrtDigitalSignature() | https://devdiv.visualstudio.com/DevDiv/_workitems/edit/832895\r\nDigitalDocuments | DrtInterleavedPackage() | All test OSes | DrtInterleavedPackage() | https://devdiv.visualstudio.com/DevDiv/_workitems/edit/848772\r\nDigitalDocuments | DrtMetroTest() | All test OSes | DrtMetroTest() | https://devdiv.visualstudio.com/DevDiv/_workitems/edit/841548\r\nDigitalDocuments | DrtPackagingApis() | All test OSes | DrtPackagingApis() |  \r\nDigitalDocuments | DrtSequence() | All test OSes | DrtSequence() |  \r\nDigitalDocuments | DrtXpsApi() | All test OSes | DrtXpsApi() |  \r\nDigitalDocuments | DrtZipIO() | All test OSes | DrtZipIO() |  \r\n\r\n","Url":"https://github.com/dotnet/wpf/issues/1054","RelatedDescription":"Open issue \"[DRT] Fix DRT failures for DataServices, FlowLayout, DigitalDocuments, Printing, XAML\" (#1054)"},{"Id":"459265361","IsPullRequest":false,"CreatedAt":"2019-06-21T15:55:30","Actor":"grubioe","Number":"1053","RawContent":null,"Title":"[DRT] Microsuite Failures AppModel & Editing","State":"open","Body":"Fix following Microsuite failures:\r\n\r\n\r\nFeature | Test Case | Reproduced OS | Log | Notes:\r\n-- | -- | -- | -- | --\r\nAppModel | /Name=\"SplashScreen_Png_CS\"   /SubArea=\"SplashScreen\" | All test OSes | SplashScreen_Png_CS | SplashScreen msbuild action is not   supported in Net Core 3\r\nAppModel | /Name=\"Win7_JumpList_JumpItemsRemovedByUser\"   /SubArea=\"Win7\" | Failed OSes:   RS1 ServerStandard,   RS1 x86,   RS3 x64,   RS4 x86,   RS5 x64,   RS6 x86 | Win7_JumpList_JumpItemsRemovedByUser   On .NET Framework, it’s active bug 126798 |  \r\nEditing | /Name=\"XamlPackageBVTTest\"   /SubArea=\"Clipboard\"   /Name=\"ParagraphEditingWithMouse2\"   /SubArea=\"RichEditing\"    /Name=\"TextRangeSaveLoadTest\"   /SubArea=\"TextOM\" | All test OSes | [3Cases]XamlPackageBVTTest&ParagraphEditingWithMouse2&TextRangeSaveLoadTest |  \r\n\r\n","Url":"https://github.com/dotnet/wpf/issues/1053","RelatedDescription":"Open issue \"[DRT] Microsuite Failures AppModel & Editing\" (#1053)"},{"Id":"459262078","IsPullRequest":false,"CreatedAt":"2019-06-21T15:47:47","Actor":"grubioe","Number":"1052","RawContent":null,"Title":"[DRT] DrtInterleavedPackage fails after System.IO.Packaging refactoring","State":"open","Body":"Copied from AzDO: 848772\r\n\r\nSteps to reproduce:\r\n\r\n1. Run DrtInterleavedPackage\r\n2. Observe NullReferenceException from missing PAckage.Open method we reflect into.\r\n\r\nThe purpose of this test is to simulate the way XpsDocument calls into System.IO.Packaging to achieve package generation for printing and saving to disk. since System.IO.Packaging changed significantly in the support for certain features we need to first figure out how to achieve package generation correctly in product code, once we do that we can look into changing this test to reflect that.","Url":"https://github.com/dotnet/wpf/issues/1052","RelatedDescription":"Open issue \"[DRT] DrtInterleavedPackage fails after System.IO.Packaging refactoring\" (#1052)"},{"Id":"459261375","IsPullRequest":false,"CreatedAt":"2019-06-21T15:46:08","Actor":"grubioe","Number":"1051","RawContent":null,"Title":"[DRT] Re-Enable GetPartUri code in DRTPackagingAPIs","State":"open","Body":"Copied from AzDo: 843574\r\n\r\n Re-enable code that uses currently missing API 'GetPartUri' when the implementation is merged into CoreFX (System.IO.Packaging).\r\nCode snippet is in DRTPackagingApis.cs in the DigitalDocuments Area under a TODO comment. Search for 'GetPartUri'.\r\n","Url":"https://github.com/dotnet/wpf/issues/1051","RelatedDescription":"Open issue \"[DRT] Re-Enable GetPartUri code in DRTPackagingAPIs\" (#1051)"},{"Id":"459260460","IsPullRequest":false,"CreatedAt":"2019-06-21T15:43:54","Actor":"grubioe","Number":"1050","RawContent":null,"Title":"[DRT] DrtMetroTest System.Windows.Markup.XamlParseException","State":"open","Body":"Copied from AzDO: 841548\r\n\r\nSteps to reproduce:\r\n\r\n1. Run DigitalDocuments/...../DrtMetroTest (failure is in DRTFixedTest)\r\n2. Observe following exception:\r\n\r\nSystem.Windows.Markup.XamlParseException: ''Initialization of 'System.Windows.Documents.FixedDocument' threw an exception.' Line number '1' and line position '552'.'\r\n\r\nNotSupportedException: Specified method is not supported.","Url":"https://github.com/dotnet/wpf/issues/1050","RelatedDescription":"Open issue \"[DRT] DrtMetroTest System.Windows.Markup.XamlParseException\" (#1050)"},{"Id":"459259743","IsPullRequest":false,"CreatedAt":"2019-06-21T15:42:10","Actor":"grubioe","Number":"1049","RawContent":null,"Title":"[DRT] DrtImaging fails only in x64","State":"open","Body":"Copied from AzDo: 832996\r\n\r\n**Steps to reproduce:**\r\n\r\n1. Run DrtImaging\r\n2. Observe NRE.\r\n\r\nDrtImaging fails due to a weird timing issue, only in x64, if run inside the debugger the test passes, I suspect this is a timing issue, I've confirmed it's not related to the native component","Url":"https://github.com/dotnet/wpf/issues/1049","RelatedDescription":"Open issue \"[DRT] DrtImaging fails only in x64\" (#1049)"},{"Id":"459258566","IsPullRequest":false,"CreatedAt":"2019-06-21T15:39:27","Actor":"grubioe","Number":"1048","RawContent":null,"Title":"[DRT] DRTXaml - ReflectionOnlyLoad is not available on .NET Core - need to sanitize codebase and fix up tests that depend on it.","State":"open","Body":"Copied from AzDO ID 690127\r\n\r\nReflectionOnlyLoad API's are not available in .NET Core. WPF uses these - not extensively, but in certain critical codepaths. We have DRT's that exist to validate that these work correctly (XamlDrts - SchemaTests - ReflectionOnlyTests). \r\n\r\nToday, these tests are failing. We need to modify the codebase to use alternatives. System.Reflection.Metadata is one possibility. \r\n\r\nWe also need to get going on this right away. \r\n\r\nTreat this as a preview blocker. Likely, this affects only PBT, but we should validate that no mainstream WPF scenarios are affected. We also seem to check if an assembly is loaded as ReflectionOnly before calling into ReflectionOnly API's - this should be protection enough. We need to validate that we are doing this everywhere carefully. \r\n\r\nOnce we have validated these, we should modify XamlDrts\\SchemaTests\\ReflectionOnlyTests to an equivalent set of tests for Metadata related tests (assuming we end up converting to use S.R.MetaData). \r\n\r\n== \r\nE:\\Repos\\DotNet-Trusted\\src\\WPF\\src \r\nλ findstr /snip reflectiononlyload *.cs | wc\r\n     24     161    3664\r\n\r\nE:\\Repos\\DotNet-Trusted\\src\\WPF\\src \r\nλ findstr /snip reflectiononlyload *.cs \r\n\r\nPresentationFramework\\System\\Windows\\Documents\\Serialization\\SerializerDescriptor.cs:236:                Assembly plugIn = Assembly.ReflectionOnlyLoadFrom(sd._assemblyPath);\r\nPresentationFramework\\System\\Windows\\Markup\\XamlReaderHelper.cs:3375:                    Assembly asmPC = ReflectionHelper.GetAlreadyReflectionOnlyLoadedAssembly(\"PRESENTATIONCORE\");\r\nPresentationFramework\\System\\Windows\\Markup\\XamlReaderHelper.cs:6732:                    Assembly asmXml = ReflectionHelper.GetAlreadyReflectionOnlyLoadedAssembly(\"SYSTEM.XML\");\r\nPresentationFramework\\System\\Windows\\Markup\\XamlTypeMapper.cs:462:        // This event handler is called when a ReflectionOnlyLoad can't succeed because of\r\nPresentationFramework\\System\\Windows\\Markup\\XamlTypeMapper.cs:477:                Assembly asm = ReflectionHelper.GetAlreadyReflectionOnlyLoadedAssembly(assemblyShortName);\r\nPresentationFramework\\System\\Windows\\Markup\\XamlTypeMapper.cs:4572:                        if (!ReflectionHelper.HasAlreadyReflectionOnlyLoaded(assemblyNameLookup))\r\nPresentationFramework\\System\\Windows\\Markup\\XmlnsCache.cs:117:                assy = ReflectionHelper.GetAlreadyReflectionOnlyLoadedAssembly(assemblyName);\r\nShared\\System\\Windows\\Markup\\ReflectionHelper.cs:197:        // Given a ReflectionOnlyLoaded member, returns the value of a metadata attribute of\r\nShared\\System\\Windows\\Markup\\ReflectionHelper.cs:208:        // Given a ReflectionOnlyLoaded type, returns the value of a metadata attribute of\r\nShared\\System\\Windows\\Markup\\ReflectionHelper.cs:219:        // Helper that enumerates a list of CustomAttributeData obtained via ReflectionOnlyLoad, and\r\nShared\\System\\Windows\\Markup\\ReflectionHelper.cs:280:        // Helper that inspects a specific CustomAttributeData obtained via ReflectionOnlyLoad, and\r\nShared\\System\\Windows\\Markup\\ReflectionHelper.cs:352:            _reflectionOnlyLoadedAssembliesHash[assemblyNameLookup] = null;\r\nShared\\System\\Windows\\Markup\\ReflectionHelper.cs:361:            return ReflectionOnlyLoadAssembly(assemblyName, assemblyPath);\r\nShared\\System\\Windows\\Markup\\ReflectionHelper.cs:488:        internal static bool HasAlreadyReflectionOnlyLoaded(string assemblyNameLookup)\r\nShared\\System\\Windows\\Markup\\ReflectionHelper.cs:504:             return (_reflectionOnlyLoadedAssembliesHash.Contains(assemblyNameLookup) && _reflectionOnlyLoadedAssembliesHash[assemblyNameLookup] != null);\r\nShared\\System\\Windows\\Markup\\ReflectionHelper.cs:507:        internal static Assembly GetAlreadyReflectionOnlyLoadedAssembly(string assemblyNameLookup)\r\nShared\\System\\Windows\\Markup\\ReflectionHelper.cs:509:             return (Assembly)_reflectionOnlyLoadedAssembliesHash[assemblyNameLookup];\r\nShared\\System\\Windows\\Markup\\ReflectionHelper.cs:517:        private static Assembly ReflectionOnlyLoadAssembly(string assemblyGivenName, string fullpath)\r\nShared\\System\\Windows\\Markup\\ReflectionHelper.cs:525:            Assembly asm = (Assembly)_reflectionOnlyLoadedAssembliesHash[assemblyShortName];\r\nShared\\System\\Windows\\Markup\\ReflectionHelper.cs:573:                           asm = Assembly.ReflectionOnlyLoad(asmContents);\r\nShared\\System\\Windows\\Markup\\ReflectionHelper.cs:613:                    asm = Assembly.ReflectionOnlyLoadFrom(fullpath);\r\nShared\\System\\Windows\\Markup\\ReflectionHelper.cs:621:                         asm = Assembly.ReflectionOnlyLoad(assemblyGivenName);\r\nShared\\System\\Windows\\Markup\\ReflectionHelper.cs:634:                    _reflectionOnlyLoadedAssembliesHash[assemblyShortName] = asm;\r\nShared\\System\\Windows\\Markup\\ReflectionHelper.cs:641:        private static Hashtable _reflectionOnlyLoadedAssembliesHash = new Hashtable(8);\r\n\r\nComments from AzDO:\r\n\r\nThe work on using MetadataLoadContext in the WPF code base has been completed. \r\n\r\nThis test is meant to test the ability to load a reflection-only type and have XamlType interact correctly with it. In Framework this was done by loading the type through the ReflectionOnlyLoad APIs which provided an AppDomain-wide reflection-only load context, the new MetadataLoadContext APIs don't work in the same way, there no longer is a global context, rather the user is meant to create their own context, this causes an issue with how XamlType interacts with the resulting reflection-only types, because it needs to be able to call IsAssignableFrom on runtime types against these reflection-only types, which do not support comparison between types loaded from different contexts.\r\n\r\nI believe that in order to provide support for reflection-only types in System.Xaml we would need to add a set of APIs that expose a MetadataLoadContext within System.Xaml that can be used to load the desired types and guarantee them working with System.Xaml\r\n\r\n","Url":"https://github.com/dotnet/wpf/issues/1048","RelatedDescription":"Open issue \"[DRT] DRTXaml - ReflectionOnlyLoad is not available on .NET Core - need to sanitize codebase and fix up tests that depend on it.\" (#1048)"},{"Id":"459256960","IsPullRequest":false,"CreatedAt":"2019-06-21T15:35:47","Actor":"grubioe","Number":"1047","RawContent":null,"Title":"[DRT] DrtDigitalSignature fails due to changes in corefx","State":"open","Body":"Copied from AzDO 832895\r\n\r\n**Steps to reproduce:**\r\n\r\n1. Run DrtDigitalSignature\r\n2. Observe NRE.\r\n\r\nThis is caused by a method that no longer exists in corefx and that this test reflects into, it is related to the improved security towards sha1 signing.\r\n\r\nTest is attempting to find a method:\r\ntypeof(System.Security.Cryptography.Xml.SignedXml)\r\n                 .GetField(\"XmlDsigRSADefault\",​\r\n                System.Reflection.BindingFlags.Static | System.Reflection.BindingFlags.NonPublic);\r\n\r\nwhich no longer exists, need to find a suitable replacement","Url":"https://github.com/dotnet/wpf/issues/1047","RelatedDescription":"Open issue \"[DRT] DrtDigitalSignature fails due to changes in corefx\" (#1047)"},{"Id":"459254532","IsPullRequest":false,"CreatedAt":"2019-06-21T15:30:21","Actor":"grubioe","Number":"1045","RawContent":null,"Title":"[DRT] Evaluate need for Deployments mechanism","State":"open","Body":"Copied from AzDO: 803573\r\n\r\nDuring porting of independent tests we removed the Deployments property from the Test infos, the Deployments values are used to group tests together, so removing them has the consequence of tests being grouped incorrectly which can result in tests being ignored.  The mechanisms has been restored but then brought GAC issues, all the GAC functionality was commented, but we should evaluate how much we actually need the Deployments mechanism.","Url":"https://github.com/dotnet/wpf/issues/1045","RelatedDescription":"Open issue \"[DRT] Evaluate need for Deployments mechanism\" (#1045)"},{"Id":"459222753","IsPullRequest":false,"CreatedAt":"2019-06-21T14:21:52","Actor":"BackDoorManUC","Number":"1044","RawContent":null,"Title":"ComboBox IsEditable=True don't commit selection","State":"open","Body":"I want to have editable ComboBox but I want to navigate using up/down arrows like in case of `IsEditable=False` and commit selection with Enter.\r\n\r\nCurrently, it's not possible at all because the code that's doing it is internal: https://github.com/dotnet/wpf/blob/master/src/Microsoft.DotNet.Wpf/src/PresentationFramework/System/Windows/Controls/ComboBox.cs#L1108\r\n\r\nComboBox needs a separate boolean property like `CommitSelectionWithArrowKeys` allowing you to choose the behavior you want. ","Url":"https://github.com/dotnet/wpf/issues/1044","RelatedDescription":"Open issue \"ComboBox IsEditable=True don't commit selection\" (#1044)"},{"Id":"459187670","IsPullRequest":true,"CreatedAt":"2019-06-21T13:39:42","Actor":"dotnet-maestro[bot]","Number":"1043","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:5a60b451-e3fe-4910-c0e5-08d6df169eee)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Build**: 20190620.5\r\n- **Date Produced**: 6/20/2019 1:35 PM\r\n- **Commit**: ba91f397a2baed0b423997422af8dfde12e1915f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng** -> 4.8.0-preview7.19320.5\r\n\r\n[marker]: <> (End:5a60b451-e3fe-4910-c0e5-08d6df169eee)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1043","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#1043)"},{"Id":"459177763","IsPullRequest":true,"CreatedAt":"2019-06-21T13:06:03","Actor":"dotnet-maestro[bot]","Number":"1042","RawContent":null,"Title":"[master] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n## From https://github.com/dotnet/winforms\r\n- **Build**: 20190620.7\r\n- **Date Produced**: 6/21/2019 4:00 AM\r\n- **Commit**: ec302430e0e792ea446ec20e3406a03dc0143310\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 4.8.0-preview7.19320.7\r\n\r\n[marker]: <> (End:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n\r\n[marker]: <> (Begin:Coherency Updates)\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n- **Microsoft.Win32.Registry** -> 4.6.0-preview7.19320.1 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.App** -> 3.0.0-preview7-27820-06 (parent: Microsoft.Private.Winforms)\r\n- **System.CodeDom** -> 4.6.0-preview7.19320.1 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.App** -> 3.0.0-preview7-27820-06 (parent: Microsoft.Private.Winforms)\r\n- **System.Configuration.ConfigurationManager** -> 4.6.0-preview7.19320.1 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.App** -> 3.0.0-preview7-27820-06 (parent: Microsoft.Private.Winforms)\r\n- **System.Diagnostics.EventLog** -> 4.6.0-preview7.19320.1 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.App** -> 3.0.0-preview7-27820-06 (parent: Microsoft.Private.Winforms)\r\n- **System.DirectoryServices** -> 4.6.0-preview7.19320.1 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.App** -> 3.0.0-preview7-27820-06 (parent: Microsoft.Private.Winforms)\r\n- **System.Drawing.Common** -> 4.6.0-preview7.19320.1 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.App** -> 3.0.0-preview7-27820-06 (parent: Microsoft.Private.Winforms)\r\n- **System.Reflection.Emit** -> 4.6.0-preview7.19320.1 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.App** -> 3.0.0-preview7-27820-06 (parent: Microsoft.Private.Winforms)\r\n- **System.Reflection.MetadataLoadContext** -> 4.6.0-preview7.19320.1 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.App** -> 3.0.0-preview7-27820-06 (parent: Microsoft.Private.Winforms)\r\n- **System.Security.AccessControl** -> 4.6.0-preview7.19320.1 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.App** -> 3.0.0-preview7-27820-06 (parent: Microsoft.Private.Winforms)\r\n- **System.Security.Cryptography.Xml** -> 4.6.0-preview7.19320.1 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.App** -> 3.0.0-preview7-27820-06 (parent: Microsoft.Private.Winforms)\r\n- **System.Security.Permissions** -> 4.6.0-preview7.19320.1 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.App** -> 3.0.0-preview7-27820-06 (parent: Microsoft.Private.Winforms)\r\n- **System.Security.Principal.Windows** -> 4.6.0-preview7.19320.1 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.App** -> 3.0.0-preview7-27820-06 (parent: Microsoft.Private.Winforms)\r\n- **System.Windows.Extensions** -> 4.6.0-preview7.19320.1 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.App** -> 3.0.0-preview7-27820-06 (parent: Microsoft.Private.Winforms)\r\n- **Microsoft.NETCore.Platforms** -> 3.0.0-preview7.19320.1 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.App** -> 3.0.0-preview7-27820-06 (parent: Microsoft.Private.Winforms)\r\n- **System.IO.Packaging** -> 4.6.0-preview7.19320.1 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.App** -> 3.0.0-preview7-27820-06 (parent: Microsoft.Private.Winforms)\r\n- **Microsoft.NETCore.ILDAsm** -> 3.0.0-preview7.19320.3 (parent: Microsoft.NETCore.Runtime.CoreCLR)\r\n- **Microsoft.NETCore.Runtime.CoreCLR** -> 3.0.0-preview7.19320.3 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.App** -> 3.0.0-preview7-27820-06 (parent: Microsoft.Private.Winforms)\r\n- **Microsoft.NETCore.ILAsm** -> 3.0.0-preview7.19320.3 (parent: Microsoft.NETCore.Runtime.CoreCLR)\r\n- **Microsoft.NETCore.Runtime.CoreCLR** -> 3.0.0-preview7.19320.3 (parent: Microsoft.NETCore.App)\r\n- **Microsoft.NETCore.App** -> 3.0.0-preview7-27820-06 (parent: Microsoft.Private.Winforms)\r\n\r\n[marker]: <> (End:Coherency Updates)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/1042","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/winforms\" (#1042)"},{"Id":"459173863","IsPullRequest":false,"CreatedAt":"2019-06-21T12:30:49","Actor":"DanielPramik","Number":"1041","RawContent":null,"Title":"WPF Datagrid - Losing new row and getting set to read only after windows update","State":"open","Body":"* .NET Framework 4.7.2\r\n* Windows version: (`10`)\r\n\r\n <!-- Read https://github.com/dotnet/wpf/blob/master/Documentation/issue-guide.md -->\r\n \r\n **Problem description:**\r\nWe use a WPF Datagrid that has a blank new row for users to begin entering data. After the user enters their first line item and it is validated, we move them to the next row so that they can enter another item immediately. If the user instead clicks back into the first row of the grid to edit a value, the empty new row is lost, and the grid is put into a read only mode. This has only started happening on Windows 10 Update 1903. Any other users not on this update do not experience this behavior.\r\n\r\nHere are some screenshots showing the behavior.\r\n\r\n1. User enters screen, datagrid is empty and shows a blank row for data entry:\r\n![wpfGrid1](https://user-images.githubusercontent.com/52073354/59921695-81c93680-93fc-11e9-9884-a60b55124ce8.jpg)\r\n2. User begins to enter data:\r\n![wpfGrid2](https://user-images.githubusercontent.com/52073354/59921745-aae9c700-93fc-11e9-8f1c-6f792a810bec.jpg)\r\n3. User finishes first line item, new row is created for the user to continue data entry:\r\n![wpfGrid3](https://user-images.githubusercontent.com/52073354/59921808-e2587380-93fc-11e9-8977-f72493182f40.jpg)\r\n4. User clicks back into the first row to edit one of the fields, quantity for example, the new row is lost, and the grid is read only:\r\n![wpfGrid5](https://user-images.githubusercontent.com/52073354/59921864-10d64e80-93fd-11e9-8d93-6064c43bb30c.jpg)\r\n\r\nThe user should see the empty new row when going back to a previous line item, and they should be able to edit fields in the existing item:\r\n![wpfGrid4](https://user-images.githubusercontent.com/52073354/59921993-732f4f00-93fd-11e9-9840-8131c73d0c63.jpg)\r\n\r\nWe have many users using this application, and the only ones affected are those using Windows 10 Update 1903. These users also span many .NET Framework versions, 4.7.2 is currently our latest. We are not using .NET Core at the moment.\r\n\r\nWe initially entered an item into the developer community issues, but were told to post it here. Please let us know if we need to put this somewhere else, or if there is any other information needed.\r\n\r\nhttps://developercommunity.visualstudio.com/content/problem/614082/wpf-datagrid-with-new-row-gets-cleared.html?","Url":"https://github.com/dotnet/wpf/issues/1041","RelatedDescription":"Open issue \"WPF Datagrid - Losing new row and getting set to read only after windows update\" (#1041)"},{"Id":"459105001","IsPullRequest":false,"CreatedAt":"2019-06-21T09:31:49","Actor":"Symbai","Number":"1039","RawContent":null,"Title":"Textbox input is partly is broken in 3.0.100-preview7 ","State":"open","Body":"* .NET Core Version: 3.0.100-preview7-012537 /  Commit:    8361cb8c23\r\n* Windows version: 10\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: No\r\n\r\n **Problem description:**\r\n\r\nInstalled latest daily build today and noticed that moving the caret in textbox via the arrow keys is broken. Also removing text using the delete button doesn't work. Others keys working fine.\r\n\r\n![ezgif com-crop](https://user-images.githubusercontent.com/14368203/59913160-2badc080-9407-11e9-9fe8-0c0416272974.gif)\r\n \r\n **Actual behavior:** \r\n\r\n- Arrow keys does nothing\r\n- Delete key does nothing\r\n- Home key does nothing\r\n- End key does nothing\r\n \r\n **Minimal repro:**\r\n```\r\n <Window x:Class=\"WpfApp3.MainWindow\"\r\n        xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\r\n        xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\r\n        xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\r\n        xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\r\n        xmlns:local=\"clr-namespace:WpfApp3\"\r\n        mc:Ignorable=\"d\"\r\n        Title=\"MainWindow\" Height=\"250\" Width=\"400\">\r\n    <Grid>\r\n        <TextBox HorizontalAlignment=\"Center\" VerticalAlignment=\"Center\" MinWidth=\"200\" Text=\"aaaaaaaaaaa\"/>\r\n    </Grid>\r\n</Window>\r\n```\r\n\r\n//edit: Added note about home and end key.","Url":"https://github.com/dotnet/wpf/issues/1039","RelatedDescription":"Open issue \"Textbox input is partly is broken in 3.0.100-preview7 \" (#1039)"},{"Id":"458764842","IsPullRequest":false,"CreatedAt":"2019-06-21T07:31:46","Actor":"Symbai","Number":"1033","RawContent":null,"Title":"System.Windows.Input.ModifierKeysConverter.GetModifierKeys - NotSupportedException on Preview6","State":"closed","Body":"* .NET Core Version: 3.0 Preview6\r\n* Windows version: 10\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: No\r\n* Does the bug reproduce also in WPF for .NET Core Preview 4: No\r\n\r\n **Problem description:**\r\n\r\n`<MenuItem Command=\"ApplicationCommands.Undo\"  />` crashes with `System.NotSupportedException: Unknown ModifierKeys \"STRG\".` While STRG is the German translation of CTRL. Switching back to Preview4 and everything works fine.\r\n\r\nPlease note that ApplicationCommands.Copy and others, I assume all that uses CTRL, crashes too.\r\n\r\n \r\n **Actual behavior:** \r\n\r\n```\r\n\"   at System.Windows.Markup.XamlReader.RewrapException(Exception e, IXamlLineInfo lineInfo, Uri baseUri)\"\r\n```\r\n\r\n  **Minimal repo:** \r\nYou **may** need to run this with a German Windows version.\r\n```\r\n<Window\r\n    x:Class=\"WpfApp3.MainWindow\"\r\n    xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\r\n    xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\r\n    xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\r\n    xmlns:local=\"clr-namespace:WpfApp3\"\r\n    xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\">\r\n    <Grid>\r\n        <Menu>\r\n            <MenuItem Command=\"ApplicationCommands.Undo\" />\r\n        </Menu>\r\n    </Grid>\r\n</Window>\r\n```\r\n[WpfApp3.zip](https://github.com/dotnet/wpf/files/3311359/WpfApp3.zip)\r\n","Url":"https://github.com/dotnet/wpf/issues/1033","RelatedDescription":"Closed issue \"System.Windows.Input.ModifierKeysConverter.GetModifierKeys - NotSupportedException on Preview6\" (#1033)"},{"Id":"458881912","IsPullRequest":false,"CreatedAt":"2019-06-21T07:22:52","Actor":"debugnik","Number":"1034","RawContent":null,"Title":"Multiple culture issues with DataGrid, MenuItem","State":"closed","Body":"* .NET Core Version: 3.0 preview 6\r\n* Windows version: 10.0.17134\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: No\r\n\r\nExact same bug as in #913 but with multiple other UI cultures. Exact same repro, identical exception and stacktrace. The only difference is the `ArgumentException` message:\r\n\r\n* es-ES (and all other es-\\* locales I've tried): `Requested value 'REPÁG' was not found.`\r\n* fr-FR and fr-CA: `Requested value 'PG. PRÉC' was not found.`\r\n* it-IT: `Requested value 'PGSU' was not found.`\r\n\r\nI didn't try more, so there's probably other localizations with the same issue. The only ones I tried that did not trigger are pt-PT and pt-BR.\r\n\r\nNote the bug doesn't just trigger in DataGrid. For example, certain keyboard interactions over MenuItems also throw the same exception.","Url":"https://github.com/dotnet/wpf/issues/1034","RelatedDescription":"Closed issue \"Multiple culture issues with DataGrid, MenuItem\" (#1034)"},{"Id":"459013445","IsPullRequest":true,"CreatedAt":"2019-06-21T05:21:04","Actor":"dotMorten","Number":"1038","RawContent":null,"Title":"Added missing null check to uri in MediaPlayerState","State":"open","Body":"Adds null check for when playing streams from https (would throw NullReferenceException otherwise). \r\nFixes #722\r\n\r\nThis check matches what is already in place here:\r\nhttps://github.com/dotnet/wpf/blob/master/src/Microsoft.DotNet.Wpf/src/Shared/MS/Internal/SecurityHelper.cs#L302","Url":"https://github.com/dotnet/wpf/pull/1038","RelatedDescription":"Open PR \"Added missing null check to uri in MediaPlayerState\" (#1038)"},{"Id":"458965691","IsPullRequest":false,"CreatedAt":"2019-06-21T01:39:12","Actor":"lindexi","Number":"1037","RawContent":null,"Title":"WPF will break when an exception be throw in the StylusPlugIn","State":"open","Body":"\r\nWe can write a class that inherits the StylusPlugIn. And this class can get the touch event fast in stylus input thread in the overwrite method, such as `OnStylusDown` and the OnStylusUp method. The *Stylus Input* thread is backgroud thread. As we all know, any exception thrown in a background thread will destroy the application. We are hard to catch the background thread and recover this thread. Though we can use `AppDomain.CurrentDomain.UnhandledException` and add `<legacyUnhandledExceptionPolicy enabled=\"1\"/> ` to app.config to catch it. \r\n\r\nThe `StylusPlugIn` can be inherited and we can overwrite the method. And we can not stop our friend add his code in the method, such as OnStylusDown method. But we may not enough careful in our code that the code will throw the exception in unexpected in the OnStylusDown method. And the exception will break the stylus input thread and the WPF application will stop responding the touch. And we can not do something to recover the touch responding. Just like this code. The code will break the Stylus Input thread.\r\n\r\n```csharp\r\npublic partial class MainWindow : Window\r\n{\r\n    public MainWindow()\r\n    {\r\n        InitializeComponent();\r\n        StylusPlugIns.Add(new Foo());\r\n    }\r\n}\r\n\r\npublic class Foo : StylusPlugIn\r\n{\r\n    /// <inheritdoc />\r\n    protected override void OnStylusDown(RawStylusInput rawStylusInput)\r\n    {\r\n        throw new Exception();\r\n    }\r\n}\r\n```\r\n\r\nThe OnStylusDown running in Stylus Input thread and if some friend throws any exceptions that will break the thread. And the application will stop responding touch. \r\n\r\nOf course, the actual situation may be more complicated. Maybe some of my friends just didn't realize that the code he wrote was unstable. But add `try catch` to all the method is an evil code.\r\n\r\nBut I do not think we can throw any unintended exceptions in StylusPlugIn.\r\n\r\nSee [StylusPlugIn Class (System.Windows.Input.StylusPlugIns)](https://docs.microsoft.com/en-us/dotnet/api/system.windows.input.stylusplugins.stylusplugin?view=netframework-4.8 )\r\n\r\n> If you use a StylusPlugIn inside a control, you should test the plug-in and control extensively to make sure they do not throw any unintended exceptions.\r\n\r\nSee [Intercepting Input from the Stylus](https://msdn.microsoft.com/en-us/data/ms749105(v=vs.80) )\r\n\r\n> If a StylusPlugIn throws or causes an exception, the application will close. You should thoroughly test controls that consume a StylusPlugIn and only use a control if you are certain the StylusPlugIn will not throw an exception.\r\n\r\nJust as the document say, we should make sure the code do not throw any unintended exceptions in StylusPlugIn. But actual we are hard to do it in the complex business.\r\n\r\nI think it may be a good way that we can catch all the exceptions in the code that fire the StylusPlugIn method.\r\n\r\nWe are making a full-screen touch application and the user can only control the machine by touch input. If the WPF application stops responding touch, the user can not do something except reboot. \r\n\r\nAll the demo code in [github](https://github.com/lindexi/lindexi_gd/tree/4f1cda37f1a6eb4fc88fa404b104cbf9b29b365e/KihemjaibeaNafebahearjece)","Url":"https://github.com/dotnet/wpf/issues/1037","RelatedDescription":"Open issue \"WPF will break when an exception be throw in the StylusPlugIn\" (#1037)"},{"Id":"458940436","IsPullRequest":false,"CreatedAt":"2019-06-20T23:54:46","Actor":"jmarolf","Number":"1036","RawContent":null,"Title":"Support Control Library project templates","State":"open","Body":">*Moved from https://github.com/dotnet/project-system/issues/4715*\r\n\r\nThis is to bring us to experience parity with desktop for WPF on .NET Core 3.0.\r\n\r\nThis is available on desktop today:\r\n\r\n<img width=\"362\" alt=\"image\" src=\"https://user-images.githubusercontent.com/6309070/55912698-0c3d2080-5b98-11e9-9863-03777a858dc6.png\">\r\n\r\nthese should be available for .NET Core 3.0.\r\n\r\nThe project template should have the correct MSBuildisms (e.g., desktop sdk and `<UseWPF>true</UseWPF>` for WPF).","Url":"https://github.com/dotnet/wpf/issues/1036","RelatedDescription":"Open issue \"Support Control Library project templates\" (#1036)"},{"Id":"458896776","IsPullRequest":true,"CreatedAt":"2019-06-20T21:41:00","Actor":"ojhad","Number":"1035","RawContent":null,"Title":"Removed declarative CAS permission attributes and comments (Part 2)","State":"open","Body":"Part of issue #241 ","Url":"https://github.com/dotnet/wpf/pull/1035","RelatedDescription":"Open PR \"Removed declarative CAS permission attributes and comments (Part 2)\" (#1035)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-06-23T05:30:47.0140764Z","RunDurationInMilliseconds":984}