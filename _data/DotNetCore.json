{"Data":{"Blog":{"FeedItems":[{"Title":"Using .NET Hardware Intrinsics API to accelerate machine learning scenarios","PublishedOn":"2018-10-10T16:00:03+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"This week&#8217;s blog post is by Brian Lui, one of our summer interns on the .NET team, who&#8217;s been hard at work. Over to Brian: Hello everyone! This summer I interned in the .NET team, working...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/10/10/using-net-hardware-intrinsics-api-to-accelerate-machine-learning-scenarios/","RawContent":null},{"Title":".NET Core October 2018 Update – NET Core 1.0 and 1.1","PublishedOn":"2018-10-09T23:19:23+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core October 2018 Update for 1.0 and 1.1. This update includes .NET Core 1.0.13, 1.1.10 and .NET Core SDK 1.1.11. Security CVE-2018-8292: .NET Core Information...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/10/09/net-core-october-2018-update-net-core-1-0-and-1-1/","RawContent":null},{"Title":".NET Framework October 2018 Security and Quality Rollup","PublishedOn":"2018-10-09T23:09:44+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we released the October 2018 Security and Quality Rollup. Security No new security fixes.  See .NET Framework September 2018 Security and Quality Rollup for the latest security update. Quality...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/10/09/net-framework-october-2018-security-and-quality-rollup/","RawContent":null},{"Title":"Announcing ML.NET 0.6 (Machine Learning .NET)","PublishedOn":"2018-10-09T00:35:09+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Today we’re announcing our latest monthly release: ML.NET 0.6! ML.NET is a cross-platform, open source machine learning framework for .NET developers. We want to enable every .NET developer to train...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/10/08/announcing-ml-net-0-6-machine-learning-net/","RawContent":null},{"Title":"Update on .NET Core 3.0 and .NET Framework 4.8","PublishedOn":"2018-10-04T16:29:57+00:00","CommentsCount":104,"FacebookCount":0,"Summary":"In May, we announced .NET Core 3.0, the next major version of .NET Core that adds support for building desktop applications using WinForms, WPF, and Entity Framework 6. We also announced some exciting...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/10/04/update-on-net-core-3-0-and-net-framework-4-8/","RawContent":null},{"Title":".NET Core October 2018 Update – NET Core 2.1.5 & SDK 2.1.403","PublishedOn":"2018-10-02T15:31:06+00:00","CommentsCount":10,"FacebookCount":0,"Summary":".NET Core October 2018 Update Today, we are releasing the .NET Core October 2018 Update. This update includes .NET Core 2.1.5 and .NET Core SDK 2.1.403 and contains important reliability fixes....","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/10/02/net-core-october-2018-update/","RawContent":null},{"Title":".NET Framework September 2018 Preview of Quality Rollup","PublishedOn":"2018-09-25T19:36:58+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"Late last week we released the September 2018 Preview of Quality Rollup. Quality and Reliability This release contains the following quality and reliability improvements. CLR Updated code to prevent...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/09/25/net-framework-september-2018-preview-of-quality-rollup/","RawContent":null},{"Title":"Announcing Cumulative Updates for .NET Framework for Windows 10 October 2018 Update","PublishedOn":"2018-09-19T22:30:19+00:00","CommentsCount":13,"FacebookCount":0,"Summary":"We deliver .NET Framework updates nearly every month, through Windows Update and other distribution channels. We are making changes to the way that we deliver those updates. We’ll soon start...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/09/19/announcing-cumulative-updates-for-net-framework-for-windows-10-october-2018-update/","RawContent":null},{"Title":"Announcing .NET Framework 4.8 Early Access build 3646","PublishedOn":"2018-09-18T02:38:06+00:00","CommentsCount":15,"FacebookCount":0,"Summary":"Today, we are happy to share an Early Access build for the .NET Framework 4.8. This includes an updated .NET 4.8 runtime as well as the .NET 4.8 Developer Pack (a a single package that bundles the...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/09/17/announcing-net-framework-4-8-early-access-build-3646/","RawContent":null},{"Title":"Announcing .NET Core 2.2 Preview 2","PublishedOn":"2018-09-12T19:26:59+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 2.2 Preview 2. We have great improvements that we want to share and that we would love to get your feedback on, either in the comments or at dotnet/core #1938....","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/09/12/announcing-net-core-2-2-preview-2/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"8341294365","Type":"IssuesEvent","CreatedAt":"2018-09-29T02:45:47","Actor":"athinboy","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/issues/112","RelatedDescription":"Opened issue \"Suggest: key  F12  go to source code of dotnetcore  rather then metadata\" (#112) at dotnet/foundation","RelatedBody":"Apology for my poor english!\r\n\r\nI have change to Java due to the boss's decision .   I think dotnet  need a big change. In China, more and more dotnet project go to die,  but new java project continuously increase!\r\n\r\nI suggest:key  F12  go to source code of dotnetcore  rather then metadata(e.g.    ***.dll.source.zip \\****.exe.source.zip),   maybe there is already done,but i don't know. \r\n\r\nthanks!\r\n"},{"Id":"8203056810","Type":"IssuesEvent","CreatedAt":"2018-09-02T16:49:34","Actor":"adamralph","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/111","RelatedDescription":"Opened issue \"Sourcelink location is confusing\" (#111) at dotnet/home","RelatedBody":"The README has link under the \"Cameron Taggart\" section pointing to https://github.com/ctaggart/SourceLink but the project now seems to live under the \"dotnet\" org in https://github.com/dotnet/sourcelink/ which suggests the link should be changed to that, and moved under the \"Microsoft\" section."},{"Id":"8173033759","Type":"PullRequestEvent","CreatedAt":"2018-08-27T16:21:56","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/110","RelatedDescription":"Merged pull request \"Fix - add missing comma\" (#110) at dotnet/home","RelatedBody":"@jongalloway - Looks like I missed a comma in my previous PR. Here is the fix."},{"Id":"8163761410","Type":"PullRequestEvent","CreatedAt":"2018-08-24T15:35:46","Actor":"jkonicki","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/110","RelatedDescription":"Opened pull request \"Fix - add missing comma\" (#110) at dotnet/home","RelatedBody":"@jongalloway - Looks like I missed a comma in my previous PR. Here is the fix."},{"Id":"8160074991","Type":"PullRequestEvent","CreatedAt":"2018-08-23T23:10:08","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/108","RelatedDescription":"Merged pull request \"Fix errors in projects.json\" (#108) at dotnet/home","RelatedBody":""},{"Id":"8160071932","Type":"PullRequestEvent","CreatedAt":"2018-08-23T23:09:08","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/109","RelatedDescription":"Merged pull request \"Add Steeltoe to the project listing\" (#109) at dotnet/home","RelatedBody":"Hi @jongalloway, Here is the PR for adding Steeltoe to the projects listing.  Let me know if you need any changes. \r\nThanks."},{"Id":"8159331036","Type":"PullRequestEvent","CreatedAt":"2018-08-23T20:13:18","Actor":"jkonicki","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/109","RelatedDescription":"Opened pull request \"Add Steeltoe to the project listing\" (#109) at dotnet/home","RelatedBody":"Hi @jongalloway, Here is the PR for adding Steeltoe to the projects listing.  Let me know if you need any changes. \r\nThanks."},{"Id":"8147233541","Type":"PullRequestEvent","CreatedAt":"2018-08-21T22:39:06","Actor":"anthonychu","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/108","RelatedDescription":"Opened pull request \"Fix errors in projects.json\" (#108) at dotnet/home","RelatedBody":""},{"Id":"8131503388","Type":"PullRequestEvent","CreatedAt":"2018-08-17T23:19:54","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/105","RelatedDescription":"Merged pull request \"Add DLR/IronPython2/IronPython3\" (#105) at dotnet/home","RelatedBody":"Add DLR/IronPython2/IronPython3 to project list."},{"Id":"8075734624","Type":"IssuesEvent","CreatedAt":"2018-08-07T07:06:40","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/home/issues/104","RelatedDescription":"Closed issue \"About still mentions CodePlex\" (#104) at dotnet/home","RelatedBody":"About still mentions CodePlex which is now in archive mode.\r\n\r\n![image](https://user-images.githubusercontent.com/4345663/42086259-e0b7d008-7b92-11e8-96c9-02ee61ddc457.png)\r\n\r\nIs this something that I can PR?"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"8394268768","Type":"IssuesEvent","CreatedAt":"2018-10-09T23:44:06","Actor":"vivmishra","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/89","RelatedDescription":"Opened issue \"October 2018 .NET Updates\" (#89) at dotnet/announcements","RelatedBody":"# October 2018 .NET Updates\r\n\r\nThe following .NET updates were released in October 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core October 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/10/09/net-core-october-2018-update-net-core-1-0-and-1-1/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)"},{"Id":"8394092294","Type":"IssuesEvent","CreatedAt":"2018-10-09T22:51:19","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/88","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\" (#88) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core when HTTP authentication information is inadvertently exposed in an outbound request that encounters an HTTP redirect. An attacker who successfully exploited this vulnerability could use the information to further compromise the web application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handles HTTP redirects.\r\n\r\nSystem administrators running .NET Core 1.0 or .NET Core 1.1 applications must update their .NET Core runtimes to versions 1.0.13 and 1.1.10 then restart their applications. If installed applications target .NET Core 2.0, the applications must be migrated to 2.1 or newer and redeployed.\r\n\r\nDevelopers must update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core 2.0](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 then redeploy.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at <https://github.com/dotnet/corefx/> **TBD**\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nNone\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nAdditionally package authors should check their dependencies to ensure they aren't depending on a vulnerable version of the following package:\r\n\r\n<a name=\"package-list\"></a>Package name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Net.Http| 2.0.20126.16343, 2.0.20505, 2.0.20710, 4.0.0, 4.1.0, 4.1.1, 4.1.2, 4.3.0, 4.3.1, 4.3.2, 4.3.3 |  4.3.4 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nTo check the currently installed runtimes and SDKs with version 2.1 or later of .NET Core, open a command prompt and run the `dotnet --info` command. You should see an output similar to the following:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.403\r\n Commit:    04e15494b6\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.403\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.5\r\n  Commit:  290303f510\r\n\r\n.NET Core SDKs installed:\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.10 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf you don't see a runtime entry for 1.0.13 or 1.1.10, any .NET Core 1.x applications run on that computer are vulnerable.\r\n\r\nIf you don't have a 2.1 version of the runtime or SDK installed, you can produce the complete list of runtimes by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows | `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS | `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms | `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.13, 1.1.10 then any application targeting versions 1.0 or 1.1 are vulnerable.\r\n\r\nAdditionally, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n### <a name=\"fix-runtime\">How do I fix the vulnerability?\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.13, 1.1.10 and install the latest 2.1 runtime, ensuring that any 2.0 applications are migrated to 2.1 as soon as possible.\r\n\r\n Developers are advised to update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at <https://github.com/dotnet/> and <https://github.com/aspnet/>, respectively. The Announcements repo for each product (<https://github.com/dotnet/Announcements> and <https://github.com/aspnet/Announcements>) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8292](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8292)\r\n\r\n### Revisions\r\n\r\nV1.0 (October 10, 2018): Advisory published.\r\n_Version 1.0_\r\n_Last Updated 2018-10-10_\r\n"},{"Id":"8377166566","Type":"IssuesEvent","CreatedAt":"2018-10-05T22:58:51","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/87","RelatedDescription":"Opened issue \".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan\" (#87) at dotnet/announcements","RelatedBody":"# .NET Core Release Data (releases.json) Redesign and Deprecation\r\n\r\nThe releases.json and releases.csv files began life as helper tools for some of our internal release work, some experimentation and to possibly be useful to the community. It has been great to learn the files are indeed in use and many folks depend on them as a trigger for a number of activities.\r\n\r\n* [release-notes/releases.json](https://github.com/dotnet/core/blob/master/release-notes/releases.json)\r\n* [release-notes/releases.csv](https://github.com/dotnet/core/blob/master/release-notes/releases.csv)\r\n\r\nA discussion topic is available to share thoughts and see what others are thinking at https://github.com/dotnet/core/issues/1986\r\n\r\nBetween the usages which we have become aware and in considering further activities that could be enabled to reason about things such as checking .NET Core version availability and support status, it became clear the current format is inadequate.\r\n\r\nAn updated format has been designed and tested which will replace the current files. The timeline below describes the path to obsoleting the current files.\r\n\r\n## The Plan\r\n\r\n| Date | Action |\r\n| :--- | :----- |\r\n| Oct 2018 | Notify the community of the coming change |\r\n| Oct 2018 | Release the new json format into dotnet/core |\r\n| Oct 2018 - Feb 2019 | Maintain the old json and csv files |\r\n| Feb 2019 | Reminder announcement that old format file is coming soon |\r\n| Mar 2019 | Old json and csv files are obsoleted and removed from dotnet/core |\r\n\r\n## Breaking change\r\n\r\nIf you are currently utilizing the old version json or csv, you will need to update the relevant code to work with the new format. If you are just getting started with consuming this data, use the new version.\r\n\r\n## The Format\r\n\r\nBelow are fragments of the files from our most recent .NET Core release.\r\n\r\n### release-index.json\r\n\r\nThis file consists of a top level array with data on the latest release versions and a property for locating the more detailed channel-specific releases.json. This file is found in [dotnet/core/release-notes](https://github.com/dotnet/core/tree/new-json/release-notes/)\r\n\r\n[releases-index.json](https://github.com/dotnet/core/blob/new-json/release-notes/releases-index.json)\r\n\r\n```\r\n{\r\n    \"releases-index\": [\r\n        {\r\n            \"channel-version\": \"2.1\",\r\n            \"latest-release\": \"2.1.5\",\r\n            \"latest-release-date\":\"2018-10-02\",\r\n            \"product\": \".NET Core\",\r\n            \"support-phase\": \"lts\",\r\n            \"eol-date\": \"\",\r\n            \"releases.json\": \"https://github.com/dotnet/core/blob/master/release-notes/2.1/releases.json\",\r\n        },\r\n        ...\r\n}\r\n```\r\n\r\n### releases.json\r\n\r\nThis file provides detailed data for each release. A copy of this file will be found in each versioned directories under [dotnet/core/release-notes](https://github.com/dotnet/core/release-notes). For example [dotnet/core/release-notes/2.1](https://github.com/dotnet/core/tree/new-json/release-notes/2.1)\r\n\r\n\r\n[releases.json](https://github.com/dotnet/core/tree/new-json/release-notes/2.1/releases.json)\r\n\r\n```\r\n{\r\n    \"channel-version\": \"2.1\",\r\n    \"latest-release\": \"2.1.5\",\r\n    \"latest-release-date\":\"2018-10-12\",\r\n    \"support-phase\": \"lts\",\r\n    \"eol-date\": \"\",\r\n    \"lifecycle-policy\": \"https://www.microsoft.com/net/support/policy\",\r\n    \"releases\":\r\n    [\r\n        {\r\n            \"release-date\":  \"2018-10-02\",\r\n            \"release-version\":  \"2.1.5\",\r\n            \"security\":  false,\r\n            \"release-notes\":  \"https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.5/2.1.5.md\",\r\n            \"runtime\":  \r\n            {\r\n                \"version\":  \"2.1.5\",\r\n                \"version-display\":  \"2.1.5\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"files\":  \r\n                [\r\n                    {\r\n                        \"name\": \"dotnet-runtime-linux-arm.tar.gz\",\r\n                        \"url\": \"https://download.visualstudio.microsoft.com/download/pr/4d555219-1f04-47c6-90e5-8b3ff8989b9c/0798763e6e4b98a62846116f997d046e/dotnet-runtime-2.1.5-linux-arm.tar.gz\",\r\n                        \"hash\": \"89a77a07065ea24e7198c77a233b9ce5c6cf51b1deb2ef55c88f0adbb2ecd9db1ba4e7d55eec2ef7139c47f91346fed360161a5bb6e3a7ccfc4559bcde286364\"\r\n                    },\r\n                    ...\r\n                ]\r\n            }\r\n            \"sdk\":  \r\n            {\r\n                \"version\":  \"2.1.403\",\r\n                \"version-display\":  \"2.1.403\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"csharp-language\":  \"7.3\",\r\n                \"fsharp-language\":  \"4.5\",\r\n                \"files\":  \r\n                [...]\r\n            }\r\n        }\r\n    ]\r\n}\r\n```"},{"Id":"8362210504","Type":"IssuesEvent","CreatedAt":"2018-10-03T16:11:10","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/86","RelatedDescription":"Opened issue \".NET Core 2.0 has reached end of life\" (#86) at dotnet/announcements","RelatedBody":"On October 1, 2018 .NET Core 2.0 reached end of life. This means the version channel is no longer supported and updates will no longer be provided. We recommend moving to a supported release. See our [support policy](https://www.microsoft.com/net/platform/support-policy) for more details.\r\n\r\nWe understand there will be needs to access end of life versions so downloads and Docker images will remain available. \r\n\r\n* 2.0 downloads will still be accessible through the [Download Archives](https://www.microsoft.com/net/download/archives). You will see notifications on the site indicating the end of life status. \r\n* 2.0 links have been removed from the [microsoft/donet Docker page](https://hub.docker.com/r/microsoft/dotnet/) though images will remain on the system.\r\n\r\n"},{"Id":"8279098039","Type":"IssuesEvent","CreatedAt":"2018-09-18T01:10:24","Actor":"spshant","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/85","RelatedDescription":"Opened issue \"NET Framework 4.8 Early Access build 3646 is available!\" (#85) at dotnet/announcements","RelatedBody":"Today, we are happy to share an Early Access build for the .NET Framework 4.8. This includes an updated .NET 4.8 runtime as well as the .NET 4.8 Developer Pack (a a single package that bundles the .NET Framework 4.8 runtime, the .NET 4.8 Targeting Pack, and the .NET Framework 4.8 SDK). \r\n\r\nPlease help us ensure this is a high quality and compatible release by trying out this build and exploring the new features. \r\n\r\n**Next steps:**\r\nTo explore the new features, download the [.NET 4.8 Developer Pack build 3646](https://go.microsoft.com/fwlink/?LinkId=2018486).  Instead, if you want to try just the .NET 4.8 runtime, you can download either of these:\r\n•\t[.NET 4.8 Web Installer](https://go.microsoft.com/fwlink/?LinkId=2018525) - requires an internet connection during installation \r\n•\t[.NET 4.8 Offline installer](https://go.microsoft.com/fwlink/?LinkId=2018531) - can be downloaded and installed later in a disconnected state\r\n\r\nPlease provide your feedback by [reporting an issue at the .NET Framework Early Access GitHub repository](https://github.com/Microsoft/dotnet-framework-early-access/issues/new).\r\n\r\n**Note**: this release is still under development, you can expect to see more features and fixes in future preview builds. Also, a reminder that this build is not supported for production use.\r\n\r\nThis preview build 3646 includes improvements/fixes in the following areas:\r\n•\t**[Runtime]** JIT and NGEN improvements\r\n•\t**[Windows Forms]** Accessibility enhancements\r\n•\t**[WPF]** SelectionTextBrush Property\r\n•\t**[BCL]** Updated ZLib\r\n\r\nYou can see the complete list of improvements in this build [here](https://github.com/Microsoft/dotnet-framework-early-access/blob/master/release-notes/NET48/build-3646/changes.md).\r\n\r\n.NET Framework build 3646 is also included in the next update for Windows 10. You can sign up for [Windows Insiders](https://insider.windows.com/en-us/) to validate that your applications work great on the latest .NET Framework included in the latest Windows 10 releases.\r\n"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"8414359061","Type":"PullRequestEvent","CreatedAt":"2018-10-13T01:30:11","Actor":"AndyAyersMS","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/20395","RelatedDescription":"Merged pull request \"JIT: add some devirtualization info to the inline context\" (#20395) at dotnet/coreclr","RelatedBody":"Allows the jit to remember which calls were devirtualized and which\r\nof those were then optimized to use an unboxed entry point. This info\r\nis then dumped out as part of the inline tree.\r\n\r\nAlso remove some of the clutter from the COMPlus_JitPrintInlinedMethods\r\noutput stream -- we don't need to see both the in-stream results and\r\nthe final results, and we don't really need to know about the budget.\r\nThis information is still dumped for COMPlus_JitDump."},{"Id":"8414352627","Type":"PullRequestEvent","CreatedAt":"2018-10-13T01:25:41","Actor":"echesakovMSFT","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/20407","RelatedDescription":"Merged pull request \"[dev/unix_test_workflow] Fix paths to \"..\\Common\\common.csproj\" in *.ilproj\" (#20407) at dotnet/coreclr","RelatedBody":""},{"Id":"8414326222","Type":"PullRequestEvent","CreatedAt":"2018-10-13T01:07:43","Actor":"sbomer","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/20005","RelatedDescription":"Merged pull request \"[release/2.2] Startup hook provider\" (#20005) at dotnet/coreclr","RelatedBody":"#### Description\r\nThis adds a hook that lets an environment variable specify managed code to be run before `Main`, allowing early customization in managed code.\r\nTracking issue: https://github.com/dotnet/coreclr/issues/20004\r\n#### Customer Impact\r\nThis feature will enable Service Fabric to ship updates to their shared assemblies. They intend to use the startup hook to handle resolution for these shared assemblies.\r\n#### Regression?\r\nNot a regression.\r\n#### Risk\r\nLow. This shouldn't impact any old functionality."}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"8414116110","Type":"IssuesEvent","CreatedAt":"2018-10-12T23:20:35","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/10093","RelatedDescription":"Closed issue \"Support build logic in SDK which was previously in package closure of Microsoft.AspNetCore.App\" (#10093) at dotnet/cli","RelatedBody":"For .NET Core 3.0, there will be a targeting pack for ASP.NET Core, which will be a flattened package with reference assemblies for everything in Microsoft.AspNetCore.App.  In previous versions, some of the packages transitively referenced by Microsoft.AspNetCore.App included build logic (I believe, for example, for Razor compilation).\r\n\r\nFor .NET Core 3.0, we don't want this build logic to be part of the targeting pack.  So probably we want to include this functionality in the .NET SDK.  (This would be via inserting the necessary logic as part of the build, not by adding it to the dotnet/cli or dotnet/sdk repos)."}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"8414005707","Type":"PullRequestEvent","CreatedAt":"2018-10-12T22:39:54","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/902","RelatedDescription":"Merged pull request \"Revert \"Add Brotli compression\"\" (#902) at dotnet/standard","RelatedBody":"We need to keep master-with-span clean until the PR is approved."},{"Id":"8414005333","Type":"PullRequestEvent","CreatedAt":"2018-10-12T22:39:47","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/902","RelatedDescription":"Opened pull request \"Revert \"Add Brotli compression\"\" (#902) at dotnet/standard","RelatedBody":"We need to keep master-with-span clean until the PR is approved."},{"Id":"8414001138","Type":"PullRequestEvent","CreatedAt":"2018-10-12T22:38:20","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/822","RelatedDescription":"Merged pull request \"Add Brotli compression\" (#822) at dotnet/standard","RelatedBody":"This adds compression & decompression for [Brotli](https://blogs.msdn.microsoft.com/dotnet/2017/07/27/introducing-support-for-brotli-compression/).\r\n\r\n***Note**: These APIs depend on `System.Span`, hence they are merged into [master-with-span](https://github.com/dotnet/standard/tree/master-with-span) to make the diff more readable.*\r\n\r\n@dotnet/nsboard "},{"Id":"8413973520","Type":"PullRequestEvent","CreatedAt":"2018-10-12T22:28:45","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/816","RelatedDescription":"Merged pull request \"Miscellaneous improvements in System.Text.*\" (#816) at dotnet/standard","RelatedBody":"@dotnet/nsboard "},{"Id":"8413784448","Type":"PullRequestEvent","CreatedAt":"2018-10-12T21:33:32","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/901","RelatedDescription":"Merged pull request \"Remove WIP bot configuration\" (#901) at dotnet/standard","RelatedBody":"Turns out, it's not supported yet :-("},{"Id":"8413783497","Type":"PullRequestEvent","CreatedAt":"2018-10-12T21:33:17","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/901","RelatedDescription":"Opened pull request \"Remove WIP bot configuration\" (#901) at dotnet/standard","RelatedBody":"Turns out, it's not supported yet :-("},{"Id":"8413694911","Type":"PullRequestEvent","CreatedAt":"2018-10-12T21:10:48","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/900","RelatedDescription":"Merged pull request \"Add configuration for WIP bot\" (#900) at dotnet/standard","RelatedBody":"This will detect commits with REBASE markers (basic hygiene) and also our `* NO MERGE*` label."},{"Id":"8413693835","Type":"PullRequestEvent","CreatedAt":"2018-10-12T21:10:33","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/900","RelatedDescription":"Opened pull request \"Add configuration for WIP bot\" (#900) at dotnet/standard","RelatedBody":"This will detect commits with REBASE markers (basic hygiene) and also our `* NO MERGE*` label."},{"Id":"8413654245","Type":"PullRequestEvent","CreatedAt":"2018-10-12T21:01:11","Actor":"terrajobst","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/817","RelatedDescription":"Merged pull request \"Miscellaneous improvements in System.Threading.*\" (#817) at dotnet/standard","RelatedBody":"@dotnet/nsboard "}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"8414481948","Type":"PullRequestEvent","CreatedAt":"2018-10-13T03:00:02","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/pull/32726","RelatedDescription":"Closed pull request \"Update BuildTools, CoreClr, CoreFx, CoreSetup, ProjectNTfs, ProjectNTfsTestILC to preview1-03311-01, preview1-27011-01, preview1-27011-01, preview1-27011-01, beta-27011-00, beta-27011-00, respectively (master)\" (#32726) at dotnet/corefx","RelatedBody":""},{"Id":"8414475120","Type":"PullRequestEvent","CreatedAt":"2018-10-13T02:54:28","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/32734","RelatedDescription":"Merged pull request \"{RO}Span<char> add IndexOfAny 4,5 tests change many tests to 6+\" (#32734) at dotnet/corefx","RelatedBody":"To cover vectorizing 4 and 5 values in addition to to 1,2,3 https://github.com/dotnet/coreclr/pull/19790#issuecomment-417894761 as this is used  for example in `FileSystemName` with 5 chars\r\n```csharp\r\nprivate static readonly char[] s_wildcardChars =\r\n{\r\n    '\\\"', '<', '>', '*', '?'\r\n};\r\n```\r\n\r\n/cc @krwq @ahsonkhan @stephentoub "},{"Id":"8414463239","Type":"PullRequestEvent","CreatedAt":"2018-10-13T02:45:36","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/32784","RelatedDescription":"Merged pull request \"I deleted the duplicate code in IList.Generic.Tests\" (#32784) at dotnet/corefx","RelatedBody":""},{"Id":"8414436501","Type":"PullRequestEvent","CreatedAt":"2018-10-13T02:25:52","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/32804","RelatedDescription":"Opened pull request \"[release/2.1] Fix Timer rooting issue with SocketsHttpHandler\" (#32804) at dotnet/corefx","RelatedBody":"Port https://github.com/dotnet/corefx/pull/32793 to release/2.1.\r\n\r\n---\r\n\r\nWe have an unexpected rooted cycle that's keeping an HttpConnectionPoolManager and all of its state alive indefinitely if the HttpClient/SocketsHttpHandler isn't Disposed.\r\n\r\nHttpConnectionPoolManager creates a \"cleaning timer\" that runs every now and then in order to remove stale connection pools that are no longer needed. In order to do that, the Timer is passed the HttpConnectionManagerPool as state. That normally wouldn't be a problem, except that the HttpConnectionManagerPool then stores a strong reference to the Timer, creating a cycle: Timer -> TimerHolder -> TimerQueueTimer -> HttpConnectionPoolManager -> Timer. The TimerQueueTimer is rooted by the underlying timer implementation, with it stored in a static array. And TimerHolder has a finalizer that disposes of the Timer, but it's being kept alive as part of the cycle.\r\n\r\nTo break the cycle, we give the Timer a weak reference (rather than strong reference) to the HttpConnectionPoolManager."},{"Id":"8414417848","Type":"PullRequestEvent","CreatedAt":"2018-10-13T02:11:17","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/32803","RelatedDescription":"Opened pull request \"Ensure ConnectionCloseReadStream uses provided bufferSize\" (#32803) at dotnet/corefx","RelatedBody":"SocketHttpHandler will use a ConnectionCloseReadStream as the resulting stream it hands out if the server sent Connection: close.  If CopyToAsync is used from that stream, it falls back to just using CopyToAsync on the underlying stream (usually a NetworkStream or SslStream).  In doing so, though, if there is already some data remaining in the HttpConnection's buffer, it first has to copy the data from that buffer, and then when it goes to use CopyToAsync on the underlying stream, it neglects to pass through the caller provided bufferSize.  This fixes that.\r\n\r\nFixes https://github.com/dotnet/corefx/issues/32800\r\ncc: @geoffkizer, @davidsh"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"8414611218","Type":"PullRequestEvent","CreatedAt":"2018-10-13T04:44:02","Actor":"cston","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/30456","RelatedDescription":"Merged pull request \"Parse #nonnull directive\" (#30456) at dotnet/roslyn","RelatedBody":"`#nonnull (restore|disable)`"},{"Id":"8414468696","Type":"IssuesEvent","CreatedAt":"2018-10-13T02:49:55","Actor":"mavasani","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/28767","RelatedDescription":"Closed issue \"VB: Intellisense should NOT strip square brackets when autocompleting \"Enum\" type name.\" (#28767) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\n\r\nVisual Studio Community 2017 v15.5.6\r\n\r\n**Steps to Reproduce**:\r\n\r\nLet's say you want to write code similar to:\r\n\r\n```vb\r\n    Dim enumVal As AcceptRejectRule\r\n\r\n    Dim foo = [Enum].TryParse(Of AcceptRejectRule)(\"foo\", enumVal)\r\n```\r\n\r\nNotice that the type `System.Enum` uses a reserved keyword (`Enum`) in VB so you have to escape it by using square brackets to get `[Enum]`. The trouble is, you can't type it and use Intellisense because when you press Tab to auto-complete, the square brackets are stripped. \r\n\r\nYou start off like this by typing the square brackets:\r\n\r\n![vs_reserved_kwd_1](https://user-images.githubusercontent.com/20465797/43041995-7a1f9f76-8d79-11e8-8df1-162606178d08.png)\r\n\r\nNext you start typing the letters of the keyword `Enum` and Intellisense kicks in offering to autocomplete (note the square brackets are still there):\r\n\r\n![vs_reserved_kwd_2](https://user-images.githubusercontent.com/20465797/43042009-caee81d8-8d79-11e8-863f-c6e8e0e9fff8.png)\r\n\r\nNow if you press Tab to accept the suggestion, it does complete the letters `enu` to the keyword `Enum`, **but it also strips the square brackets**:\r\n\r\n![vs_reserved_kwd_3](https://user-images.githubusercontent.com/20465797/43042025-3d470174-8d7a-11e8-87a6-4ac97a946e9b.png)\r\n\r\nWith the square brackets gone, you now have a syntax error, and attempts to press `.` so you can type `TryParse`, don't work (the dot just appears but Intellisense is NOT activated):\r\n\r\n![vs_reserved_kwd_4](https://user-images.githubusercontent.com/20465797/43042041-ba156240-8d7a-11e8-98c0-dda32e2e78fd.png)\r\n\r\nIf you manually type `[Enum]` complete with square brackets and ignore Intellisense completely, then you can press `.` to choose members like `TryParse`:\r\n\r\n![vs_reserved_kwd_5](https://user-images.githubusercontent.com/20465797/43042055-3aebc71a-8d7b-11e8-8260-9df14f63071a.png)\r\n\r\n**Expected Behavior**:\r\n\r\nThe square brackets should NOT be removed when you press tab to autocomplete if the resulting code would be a syntax error (as is the case when dealing with `Enum`). Interestingly enough, the editor is smart enough to handle cases where you have your own type named using a reserved keyword:\r\n\r\n```vb\r\nPublic Module Module1\r\n  Public Class [CDec]\r\n    Public Shared Function DoSomething() As String\r\n    End Function\r\n  End Class\r\n\r\n  Public Sub Main()\r\n  End Sub\r\nEnd Module\r\n```\r\n\r\nIn the above code the class `CDec` uses the reserved keyword `CDec` for converting values to type `Decimal`. So if you want to call the shared method `DoSomething` which must be qualified with type name `[CDec]`, you can type the square brackets, then begin typing `cd` to bring up Intellisense:\r\n\r\n![vs_reserved_kwd_6](https://user-images.githubusercontent.com/20465797/43042096-c46722c2-8d7c-11e8-9e05-f21bb3313244.png)\r\n\r\nNote the autocomplete list above shows `CDec` as a keyword and `CDec` as a type. If you choose to autocomplete with the keyword `CDec` **it correctly strips the brackets as expected**. If you choose to autocomplete with the type name `CDec` **it correctly PRESERVES the brackets as expected**. This bracket preservation should also work for the `Enum` type which like the `CDec` class we defined above just happens to be named after a reserved keyword."},{"Id":"8414468182","Type":"PullRequestEvent","CreatedAt":"2018-10-13T02:49:27","Actor":"mavasani","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/29219","RelatedDescription":"Merged pull request \"Fixed a bug with Intellisense on Enum\" (#29219) at dotnet/roslyn","RelatedBody":"Fixed a bug where Intellisense was stripping square brackets from Enum on autocomplete. Issue: #28767"},{"Id":"8414376071","Type":"PullRequestEvent","CreatedAt":"2018-10-13T01:41:56","Actor":"CyrusNajmabadi","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/30492","RelatedDescription":"Opened pull request \"Reorder 'extract method' and 'introduce variable'\" (#30492) at dotnet/roslyn","RelatedBody":"Fixes https://github.com/dotnet/roslyn/issues/30475.\r\n\r\nTelemetry shows us that ExtractMethod is used far more than IntroVar.  It's also a nice single item versus the 2-4 you can get with IntroVar. Reordering just makes things nicer and more efficient for users."},{"Id":"8414264869","Type":"PullRequestEvent","CreatedAt":"2018-10-13T00:30:04","Actor":"dotnet-automerge-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/30491","RelatedDescription":"Merged pull request \"Merge master to master-vs-deps\" (#30491) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"8414207169","Type":"PullRequestEvent","CreatedAt":"2018-10-13T00:00:43","Actor":"dotnet-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/30491","RelatedDescription":"Opened pull request \"Merge master to master-vs-deps\" (#30491) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"8414440169","Type":"PullRequestEvent","CreatedAt":"2018-10-13T02:28:36","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6448","RelatedDescription":"Opened pull request \"Update RyuJIT\" (#6448) at dotnet/corert","RelatedBody":""},{"Id":"8409041655","Type":"PullRequestEvent","CreatedAt":"2018-10-12T05:23:52","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6443","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#6443) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @tannergooding"},{"Id":"8408942844","Type":"PullRequestEvent","CreatedAt":"2018-10-12T04:45:06","Actor":"trylek","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6447","RelatedDescription":"Opened pull request \"Unify available types; stop emitting precodes for method calls\" (#6447) at dotnet/corert","RelatedBody":"This change contains two conservative CPAOT fixes for deficiencies\r\nI discovered during debugging:\r\n\r\n1) Unify available types - as we're using GetTypeDefinition(),\r\nwe may hit the same type multiple times for generic instantiations\r\nover different arguments; we should emit such types only once\r\ninto the available type table.\r\n\r\n2) Use delayed load helpers, not precodes, for resolving method\r\ncalls as it's generally cheaper (previously we had to emit the\r\nprecode fixups into each method calling a particular method)\r\nand it's what Crossgen does.\r\n\r\nThanks\r\n\r\nTomas"},{"Id":"8408579267","Type":"IssuesEvent","CreatedAt":"2018-10-12T02:28:48","Actor":"frankzye","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/6446","RelatedDescription":"Opened issue \"Unhandled Exception: System.ArgumentNullException: Value cannot be null\" (#6446) at dotnet/corert","RelatedBody":"I don't know which part caurse these errors, and no other messages found,  please help. It works when not using corert.\r\n`Unhandled Exception: System.ArgumentNullException: Value cannot be null.\r\nParameter name: method\r\n   at System.Linq.Expressions.Expression.Call(Expression, MethodInfo, Expression, Expression, Expression) + 0x1f4\r\n   at System.Linq.Expressions.Expression.Call(Expression, MethodInfo, IEnumerable`1) + 0x146\r\n   at Microsoft.AspNetCore.Builder.UseMiddlewareExtensions.Compile[T](MethodInfo, ParameterInfo[]) + 0x1ad\r\n   at Microsoft.AspNetCore.Builder.UseMiddlewareExtensions.<>c__DisplayClass4_0.<UseMiddleware>b__0(RequestDelegate) + 0x258\r\n   at Microsoft.AspNetCore.Builder.Internal.ApplicationBuilder.Build() + 0xa5\r\n   at Microsoft.AspNetCore.Hosting.Internal.WebHost.BuildApplication() + 0x275\r\n   at Microsoft.AspNetCore.Hosting.Internal.WebHost.<StartAsync>d__26.MoveNext() + 0xa6`"},{"Id":"8408432522","Type":"PullRequestEvent","CreatedAt":"2018-10-12T01:35:50","Actor":"trylek","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/6345","RelatedDescription":"Closed pull request \"WIP: Targeted fixes for \"/CoreCLR All\" ILC errors (990 failures remain)\" (#6345) at dotnet/corert","RelatedBody":"1) Don't try to emit method signature in relocsOnly mode as we don't\r\nyet have all the necessary tokens available in this early phase.\r\n\r\n2) Fix one more case concerning constrained types (we need to pass\r\naround the original method, typically IDisposable.Dispose, not\r\nany particular specialization as that may not be representable\r\nas a R2R signature).\r\n\r\n3) Per David Wrighton's suggestion, I have explicitly suppressed\r\nemitting native code for ArrayMethod's, leaving them up to runtime\r\nJIT. I have attached a TODO-PERF code comment stating that this is\r\na potential opportunity to exceed Crossgen CQ.\r\n\r\nThanks\r\n\r\nTomas"},{"Id":"8408427698","Type":"PullRequestEvent","CreatedAt":"2018-10-12T01:34:02","Actor":"trylek","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/6387","RelatedDescription":"Closed pull request \"Gracefully handle non-compilable methods\" (#6387) at dotnet/corert","RelatedBody":"This is another part of my WIP PR. Previously, any method compilation\r\nfailure has torn down the entire compilation due to the fact that,\r\nonce a method didn't compile, its code never got published and the\r\nclause\r\n\r\n        public override bool StaticDependenciesAreComputed => _methodCode != null;\r\n\r\nhit an assertion failure in the dependency graph walker. I'm proposing\r\nto populate uncompilable methods with a dummy code object with\r\nthe potential to satisfy most compile-time checks while being\r\nunresolvable by itself which is important as we don't want to\r\nsilently tolerate calls to the uncompiled method.\r\n\r\nThanks\r\n\r\nTomas"},{"Id":"8408427119","Type":"PullRequestEvent","CreatedAt":"2018-10-12T01:33:49","Actor":"trylek","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/6313","RelatedDescription":"Closed pull request \"WIP: Latest batch of my CPAOT changes resolved against latest\" (#6313) at dotnet/corert","RelatedBody":"This is the squashed set of my remaining changes rebased against\r\nthe latest CoreRT R2R state. I believe the changes fall into the\r\nfollowing categories:\r\n\r\n1) Generalization of DelayLoadHelperThunk to also work for eager\r\nthunk - in light of this fact I renamed it to just ImportThunk.\r\n\r\n2) Scattered fixes in EH and unwind info to light up exception\r\nhandling. This includes the changes to cater for the fact that\r\nCoreCLR uses a different encoding for the EH info than CoreRT.\r\n\r\n3) Experimental refactoring to get rid of explicit token passing\r\nso that they are always synthesized based on pre-recorded\r\nresolveToken information.\r\n\r\nMy current thinking is that I'm going to send out a separate PR\r\nfor the ImportThunk first as that's a very straightforward change.\r\nAfter that I'll try to separate out the EH / unwind info fixes\r\nfrom the token refactoring and also send them out separately.\r\n\r\nThanks\r\n\r\nTomas"},{"Id":"8408392262","Type":"PullRequestEvent","CreatedAt":"2018-10-12T01:20:58","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6445","RelatedDescription":"Merged pull request \"Merge nmirror to master\" (#6445) at dotnet/corert","RelatedBody":""},{"Id":"8408325071","Type":"PullRequestEvent","CreatedAt":"2018-10-12T00:56:26","Actor":"trylek","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6428","RelatedDescription":"Merged pull request \"Cross-module signatures, non-compilable methods and instance hashtable fixes\" (#6428) at dotnet/corert","RelatedBody":"This is a combination of cleaned-up versions of changes I previously made to fix various CoreCLR tests.\r\n\r\n1) Gracefully handle non-compilable methods without crashing the compiler;\r\n\r\n2) Improvements in handling of cross-module signatures;\r\n\r\n3) Implement CoreCLR-compatible method hashing."},{"Id":"8408054109","Type":"PullRequestEvent","CreatedAt":"2018-10-11T23:21:41","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6445","RelatedDescription":"Opened pull request \"Merge nmirror to master\" (#6445) at dotnet/corert","RelatedBody":""},{"Id":"8408052430","Type":"PullRequestEvent","CreatedAt":"2018-10-11T23:21:09","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/6444","RelatedDescription":"Merged pull request \"Merge changes from TFS\" (#6444) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"8407980198","Type":"PullRequestEvent","CreatedAt":"2018-10-11T23:00:13","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6444","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#6444) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"8407601222","Type":"PullRequestEvent","CreatedAt":"2018-10-11T21:29:24","Actor":"dotnet-maestro-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/6443","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#6443) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"8414242084","Type":"IssuesEvent","CreatedAt":"2018-10-13T00:17:45","Actor":"sbomer","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/2583","RelatedDescription":"Opened issue \"SDK targets for post-build transformations\" (#2583) at dotnet/sdk","RelatedBody":"\r\nNumerous tools exist today which perform some transformation on IL or other files that are deployed with a published app. Examples include:\r\n\r\n- [ILLink](https://github.com/mono/linker), which does tree-shaking on IL assemblies.\r\n- [Native dependency trimming](https://github.com/mono/linker/blob/master/corebuild/integration/ILLink.Tasks/ILLink.Tasks.targets#L27) in ILLink.Tasks, which removes some native files from the output based on references from IL assemblies.\r\n- [Crossgen](https://github.com/mono/linker/blob/master/corebuild/integration/ILLink.Tasks/ILLink.CrossGen.targets#L4) in ILLink.Tasks, which can compile IL to Ready-To-Run images with native code.\r\n- [Fody](https://github.com/Fody/Fody), an extensible tool that has many plugins that do IL -> IL transformations.\r\n- [ILMerge](https://github.com/dotnet/ILMerge) and [ILRepack](https://github.com/gluck/il-repack), which merge multiple IL assemblies files into one.\r\n- [CoreRT](https://github.com/dotnet/corert), which compiles IL to object files and uses a native linker to produce an executable.\r\n- Single exe, currently being investigated, which may need to be able to merge the entire publish set into a single file.\r\n- Installer technology like clickonce, which probably needs to do the same.\r\n- [Runtime package store](https://docs.microsoft.com/en-us/dotnet/core/deploying/runtime-store) (I believe this is being deprecated), which filters files from being included in the publish output based on a manifest.\r\n\r\nThese tools all need to run at similar places during the build, and many of the tools can usefully be used independently. It is desirable for developers to have the final say over which tools run during a\r\nbuild, allowing them to weigh tradeoffs and make the right decision for their apps. I'll be focusing on the linker, but it's worth keeping these other tools in mind.\r\n\r\nSome of these tools only provide commandline executables, leaving the developer to write MSBuild logic or scripts to run the tool during a build. Others attempt to provide full integration with the SDK, providing tasks and targets that can be turned on or off with a simple boolean property.\r\n\r\nThis proposal is for the SDK to provide a supported, documented way for such tools to make themselves a part of the build, reducing the amount of duplicated effort it takes for tool authors to ship tools that are properly integrated with the rest of the build logic.\r\n\r\nThis may involve coordination with MSBuild, since some of the relevant targets belong to MSBuild itself. See this issue on [MSBuild transformations](https://github.com/Microsoft/msbuild/issues/3128) for details.\r\n\r\n## Problems with the existing approach\r\n\r\nSome of the existing tools ([ILLink](https://github.com/mono/linker/blob/master/corebuild/integration/ILLink.Tasks/ILLink.Tasks.targets#L91), [CoreRT](https://github.com/dotnet/corert/blob/master/src/BuildIntegration/Microsoft.NETCore.Native.Publish.targets#L28), [Crossgen](https://github.com/mono/linker/blob/master/corebuild/integration/ILLink.Tasks/ILLink.CrossGen.targets#L21)) ship with their own targets that hook into the SDK to run at the right place. They use `BeforeTargets` to run just before `ComputeFilesToPublish`, where they rewrite `ResolvedAssembliesToPublish`, `IntermediateAssembly`, and other items to point to the transformed assemblies:\r\n\r\nhttps://github.com/mono/linker/blob/7c11deffc05005b6b60eeccb80a7cf133e24c007/corebuild/integration/ILLink.Tasks/ILLink.Tasks.targets#L91-L117\r\n\r\nThe existing targets are factored in a way that makes transparently rewriting these inputs difficult. These are some of the issues that come up:\r\n\r\n### Downstream targets implicitly rely on invariants broken by the linker\r\n- `Microsoft.NET.PreserveCompilationContext.targets` adds ref assemblies to the files to publish after `ComputeFilesToPublish`. https://github.com/dotnet/sdk/blob/0eb68de1dd44834e3966cf02cafaff16b71d92d7/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.PreserveCompilationContext.targets#L69-L71\r\n- Because this only includes ref assemblies for assemblies not already in the publish set, reducing the publish set results in extra, unnecessary ref assemblies being included.\r\n- The linker works around this by saving the pre-transform publish set and making it look like they were not changed to the downstream target: https://github.com/mono/linker/blob/7c11deffc05005b6b60eeccb80a7cf133e24c007/corebuild/integration/ILLink.Tasks/ILLink.Tasks.targets#L131-L143\r\n\r\n### Upstream targets capture pre-transform values of these ItemGroups\r\n- `Microsoft.Common.CurrentVersion.targets` in a few places captures `IntermediateAssembly` (these examples are taken from https://github.com/Microsoft/msbuild/issues/3128).\r\n  - https://github.com/Microsoft/msbuild/blob/f72bd2eaa37476819ab7647f63d445df8055dab6/src/Tasks/Microsoft.Common.CurrentVersion.targets#L5472-L5479\r\n  - https://github.com/Microsoft/msbuild/blob/f72bd2eaa37476819ab7647f63d445df8055dab6/src/Tasks/Microsoft.Common.CurrentVersion.targets#L391-L393\r\n\r\n### Dependencies between the publish set and other targets are not expressed\r\n- `GeneratePublishDependencyFile` is unaware of modifications to publish set, and includes everything in the pre-transformed set in the .deps file, resulting in failures at runtime.\r\n- The linker works around this by hacking the private ItemGroup `_PublishConflictPackageFiles` to exclude removed files from the .deps file: https://github.com/mono/linker/blob/7c11deffc05005b6b60eeccb80a7cf133e24c007/corebuild/integration/ILLink.Tasks/ILLink.Tasks.targets#L510-L526\r\n\r\n### Duplicated work to understand inputs to `ComputeFilesToPublish`\r\n- Each tool that has SDK integration currently has to do a lot of the same work to understand the inputs to `ComputeFilesToPublish`, rewrite them correctly, and work around any SDK logic that breaks as a result. For example, `ResolvedAssembliesToPublish` contains resource assemblies that the linker filters out. I had to discover this experimentally. https://github.com/mono/linker/blob/7c11deffc05005b6b60eeccb80a7cf133e24c007/corebuild/integration/ILLink.Tasks/ILLink.Tasks.targets#L393-L395\r\n\r\n### SDK changes break tools that rely on this approach in subtle ways\r\n- The contents of the related ItemGroups aren't documented anywhere. In the past, subtle changes in the SDK have resulted in breaks for the linker. This makes it especially difficult for third parties to author tools that work well with the build.  For example, a change in package asset resolution broke the way we get the paths to reference assemblies: https://github.com/mono/linker/issues/286#issuecomment-375131295. We should work together to establish a contract and include a test in the SDK to ensure that it is maintained.\r\n\r\n### Duplicate work to handle common build concerns\r\n- Each tool independently has consider where the intermediate output goes for incremental builds, and how to ensure that these outputs are correctly cleaned up on clean builds. This may just be a matter of documenting conventions used by the rest of the SDK.\r\n  \r\n### Cooperative phase ordering\r\n- Some of these tools can usefully be used together. In that case, they need to be aware of each other so that they can be ordered correctly. For example, crossgen is able to respect attributes added by the linker to skip crossgening of methods with the attribute. ILLink.Tasks solves this by conditionally changing the build graph: https://github.com/mono/linker/blob/642e3d06e368d8fe0628657b413447f19420ed08/corebuild/integration/ILLink.Tasks/ILLink.CrossGen.targets#L14-L17. I'm not aware of a more general solution to this problem, but it's something to keep in mind.\r\n\r\n## Proposal\r\n\r\nWe should work together to come up with a contract that defines a single place where the linker and similar rewriting tools can hook in, without having to work around unrelated logic elsewhere in the SDK and MSBuild. As a start, here are the current behaviors I'm aware of, and some requirements for the contract to be useful to each tool. Note that there are many similarities between these tools.\r\n\r\n### ILLink\r\n#### Current behavior\r\n- Before `ComputeFilesToPublish`, picks out from `ResolvedAssembliesToPublish` the managed assemblies that aren't resources. These and the `IntermediateAssembly` are linker inputs.\r\n- Computes platform libraries from the deps.json file and the `RuntimeIdentifier` and `TargetFramework`. Includes System.Private.CoreLib.dll as a special case (because it ships in the \"native\" directory of the runtime package, while everything else comes from \"lib\").\r\n- Links, with additional inputs (root descriptors, root assemblies).\r\n- Obtains the linker output managed assemblies and debug symbols. Needs to jump through some hoops to attach original item metadata to the output files so that they can be correctly processed by the later SDK logic.\r\n- Rewrites the inputs `ResolvedAssembliesToPublish`, `IntermediateAssembly`, and `_DebugSymbolsIntermediatePath` with the linked outputs.\r\n- Hacks `_PublishConflictPackageFiles` to include managed assemblies that were removed, so that they will be kept out of the generated deps.json.\r\n- Works around the reference assembly issue described above.\r\n#### Requirements\r\n- Needs to operate on the set of IL files to be published, whether deploying standalone or self-contained.\r\n- Produces a subset of the input files, possibly with modified contents (some code may have been removed or marked with attributes).\r\n- Needs to know which assemblies are part of the platform so that it can implement different behavior for these as a heuristic.\r\n- In the future, it may need to operate on additional inputs like xaml that are relevant for reflection analysis heuristics.\r\n- Updates should be reflected in deps.json.\r\n\r\n### Native dependency trimming (part of ILLink.Tasks)\r\n#### Current behavior\r\n- After linking, gets list of native assemblies from `ResolvedAssembliesToPublish`.\r\n- Has some hard-coded native dependencies which it always keeps.\r\n - Scans linked assemblies for references to native assemblies.\r\n- These are added back when rewriting `ResolvedAssembliesToPublish`.\r\n- Hacks `_PublishConflictPackageFiles` to include native files that were removed, so that they will be kept out of the generated deps.json.\r\n#### Requirements\r\n- Should run after illink if illink was used.\r\n- Inputs include IL assemblies, and the native assemblies that will be published with the application.\r\n- It needs to be able to modify the set of native dependencies that will be published.\r\n- Updates should be reflected in deps.json.\r\n\r\n### Crossgen\r\n#### Current behavior\r\n- Before `ComputeFilesToPublish`, picks out from `ResolvedAssembliesToPublish` the managed assemblies that aren't resources. Since this is after linking, `ResolvedAssembliesToPublish` has already been rewritten. This and `IntermediateAssembly` (also rewritten by the linker) are inputs to crossgen.\r\n- Compute the \"platform\" from the deps.json (shared with linker). This is just all managed assemblies from `ResolvedAssembliesToPublish` and `IntermediateAssembly`.\r\n- Scan any inputs in case they are already crossgen'd. Don't want to re-crossgen these.\r\n- Run crossgen.\r\n- Rewrite `ResolvedAssembliesToPublish` and `IntermediateAssembly`.\r\n#### Requirements\r\n- Should run after illink if illink was used.\r\n- Inputs include all IL assemblies that will be published.\r\n- It needs to be able to rewrite the input to produce ReadyToRun images.\r\n\r\n### ILC\r\nI'm less aware of the details of this tool, but here's my understanding:\r\n#### Current behavior\r\n- Before `ComputeFilesToPublish`, processes `ResolvedAssembliesToPublish` to pick out the managed assemblies that are referenced by ilc subject to certain constraints, and also a set of assemblies to skip.\r\n- After native linking, rewrites `IntermediateAssembly` to point to the optimized binary.\r\n#### Requirements\r\n- Needs to change the publish output to be the AOT-optimized native executable.\r\n\r\n### Other tools to consider\r\nIt may be helpful to keep in mind Fody, ILMerge, ILRepack, single exe, installer technology, and any tools that filter the publish set, like the runtime store, because they could all benefit from a documented set of behavior around publish, enabling them to work well with the .NET SDK out of the box.\r\n\r\n@nguerrera @zamont @swaroop-sridhar @jeffschwMSFT"},{"Id":"8414208757","Type":"PullRequestEvent","CreatedAt":"2018-10-13T00:01:21","Actor":"dotnet-bot","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2582","RelatedDescription":"Opened pull request \"Merge release/2.1.5xx to release/2.2.1xx\" (#2582) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.1.5xx into release/2.2.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.5xx-to-release/2.2.1xx\ngit reset --hard upstream/release/2.2.1xx\ngit merge upstream/release/2.1.5xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1.5xx-to-release/2.2.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"8413751649","Type":"PullRequestEvent","CreatedAt":"2018-10-12T21:25:06","Actor":"johnbeisner","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/2525","RelatedDescription":"Closed pull request \"Merge release/2.1.5xx to release/2.2.1xx\" (#2525) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.1.5xx into release/2.2.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.5xx-to-release/2.2.1xx\ngit reset --hard upstream/release/2.2.1xx\ngit merge upstream/release/2.1.5xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1.5xx-to-release/2.2.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1049807908173574144","CreatedAt":"2018-10-09T23:44:44+00:00","UserScreenname":"dotnet","Text":"Blogged -- .NET Framework October 2018 Security and Quality Rollup https://t.co/tLgVdVbM4L","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":25,"FavoriteCount":8,"RawContent":null},{"Id":"1049702744515203072","CreatedAt":"2018-10-09T16:46:51+00:00","UserScreenname":"dotnet","Text":"Announcing the latest preview release of ML .NET 0.6 (Machine Learning .NET) https://t.co/3lXXCs30ma","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":101,"FavoriteCount":59,"RawContent":null},{"Id":"1047894749867270145","CreatedAt":"2018-10-04T17:02:31+00:00","UserScreenname":"dotnet","Text":"Blogged -- Update on .NET Core 3.0 and .NET Framework 4.8 https://t.co/tBpJg3Eoc8","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":328,"FavoriteCount":245,"RawContent":null},{"Id":"1047645317401735168","CreatedAt":"2018-10-04T00:31:22+00:00","UserScreenname":"dotnet","Text":".NET Core 2.0 has reached end of life https://t.co/FZTYietdMP","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":148,"FavoriteCount":174,"RawContent":null},{"Id":"1047579283579756544","CreatedAt":"2018-10-03T20:08:58+00:00","UserScreenname":"dotnet","Text":"https://t.co/Pt9ZGHYH8C","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":40,"FavoriteCount":27,"RawContent":null}]}},"RunOn":"2018-10-13T05:30:30.6997727Z","RunDurationInMilliseconds":8196}