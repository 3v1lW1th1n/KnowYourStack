{"Data":{"Blog":{"FeedItems":[{"Title":"New and improved NuGet Search is here!","PublishedOn":"2019-08-23T03:31:26+00:00","CommentsCount":9,"FacebookCount":0,"Summary":"It’s been a long time coming, and today we are excited to announce the new and improved search on NuGet.org leveraging Azure Search. We want to start this post with a huge thanks to you, the NuGet...","Href":"https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/","RawContent":null},{"Title":"Surfacing GitHub Usage for packages on NuGet.org","PublishedOn":"2019-07-17T20:00:23+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"There are several criteria you can use today to evaluate NuGet packages. We received feedback that you would like even more information to help choose the right packages. We&#8217;re excited to...","Href":"https://devblogs.microsoft.com/nuget/surfacing-github-usage-for-packages-on-nuget-org/","RawContent":null},{"Title":"NuGet Spring 2019 Roadmap","PublishedOn":"2019-04-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We published our last NuGet roadmap in June last year. Many of the features announced were major additions to NuGet and we have been hard at work to implement those over the last few months. In this...","Href":"https://devblogs.microsoft.com/nuget/nuget-spring-2019-roadmap/","RawContent":null},{"Title":"Enable repeatable package restores using a lock file","PublishedOn":"2018-12-17T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"With PackageReference, NuGet always tries to produce the same closure of package dependencies if the input package reference list has not changed. However, there are a few scenarios where it may not...","Href":"https://devblogs.microsoft.com/nuget/enable-repeatable-package-restores-using-a-lock-file/","RawContent":null},{"Title":"Lock down your dependencies using configurable trust policies","PublishedOn":"2018-12-05T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For the past several months we have focused on various features to improve package security and trust. Around a year back, we had announced our plans on various signing functionalities that we have...","Href":"https://devblogs.microsoft.com/nuget/lock-down-your-dependencies-using-configurable-trust-policies/","RawContent":null},{"Title":"Improved package debugging experience with the NuGet.org symbol server","PublishedOn":"2018-11-16T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Starting today, you can publish symbol packages to the NuGet.org symbol server. With NuGet.org as a single service provider for libraries and symbols, package authors and consumers will have a...","Href":"https://devblogs.microsoft.com/nuget/improved-package-debugging-experience-with-the-nuget-org-symbol-server/","RawContent":null},{"Title":"Introducing Source Code Link for NuGet packages","PublishedOn":"2018-08-27T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"NuGet.org now supports surfacing source code repository link for NuGet packages. This will enable package authors to surface both the project&#8217;s website and the source repository using the...","Href":"https://devblogs.microsoft.com/nuget/introducing-source-code-link-for-nuget-packages/","RawContent":null},{"Title":"NuGet.org starts repo-signing packages","PublishedOn":"2018-08-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In May, we implemented Stage 1 and enabled support for any NuGet.org user to submit signed packages to NuGet.org. Today, we are announcing Stage 2 of our NuGet package signing journey &#8211; tamper...","Href":"https://devblogs.microsoft.com/nuget/introducing-repository-signatures/","RawContent":null},{"Title":"NuGet Summer 2018 Roadmap","PublishedOn":"2018-07-02T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This blog post provides insights into the NuGet team plans for the upcoming quarter (July &#8211; Sep 2018). In the March 2018 NuGet Spring 2018 Roadmap, we had outlined Package Signing,...","Href":"https://devblogs.microsoft.com/nuget/nuget-summer-2018-roadmap/","RawContent":null},{"Title":"Introducing signed package submissions to NuGet.org","PublishedOn":"2018-05-22T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In September 2017, we announced our plans to improve the security of the NuGet ecosystem by introducing the ability for package authors to sign packages. Today, we want to announce support for any...","Href":"https://devblogs.microsoft.com/nuget/introducing-signed-package-submissions/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"10478792178","Type":"PullRequestEvent","CreatedAt":"2019-09-24T01:33:10","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7556","RelatedDescription":"Merged pull request \"IconUrl deprecation message.\" (#7556) at NuGet/NuGetGallery","RelatedBody":"Addresses https://github.com/NuGet/NuGetGallery/issues/7478\r\n\r\nBrowser:\r\n![iconUrlDepr](https://user-images.githubusercontent.com/102933/64835790-3dcd7400-d59c-11e9-828d-7f56aa70fc9d.PNG)\r\n\r\nCommand line:\r\n![iconUrlDeprCL](https://user-images.githubusercontent.com/102933/64835801-5178da80-d59c-11e9-8456-f2579ed49205.PNG)\r\n"},{"Id":"10478463991","Type":"IssuesEvent","CreatedAt":"2019-09-24T00:08:43","Actor":"scottbommarito","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7549","RelatedDescription":"Closed issue \"[Deployment] Week of 2019-09-16\" (#7549) at NuGet/NuGetGallery","RelatedBody":"### Regular Deployments\r\n\r\n- [x] INT\r\n  - [x] Scan and sign job ([release](https://devdiv.visualstudio.com/DevDiv/_releaseProgress?_a=release-pipeline-progress&releaseId=449756))\r\n  - [x] Gallery ([release](https://devdiv.visualstudio.com/DevDiv/_releaseProgress?_a=release-pipeline-progress&releaseId=447118))\r\n  - [x] Legacy search ([release](https://devdiv.visualstudio.com/DevDiv/_releaseProgress?_a=release-pipeline-progress&releaseId=446128))\r\n  - [x] Azure search ([release](https://devdiv.visualstudio.com/DevDiv/_releaseProgress?_a=release-pipeline-progress&releaseId=446894))\r\n  - [x] Validation.SymbolsOrchestrator: [Release](https://devdiv.visualstudio.com/DevDiv/_releaseProgress?_a=release-pipeline-progress&releaseId=448837)\r\n    - For https://github.com/NuGet/NuGetGallery/issues/7489\r\n  - [x] Validation.PackageSigning.ValidateCertificate: [Release](https://devdiv.visualstudio.com/DevDiv/_releaseProgress?_a=release-pipeline-progress&releaseId=448847)\r\n    - For https://github.com/NuGet/NuGetGallery/issues/7482\r\n  - [x] Validation.PackageSigning.ProcessSignature: [Release](https://devdiv.visualstudio.com/DevDiv/_releaseProgress?_a=release-pipeline-progress&releaseId=448848)\r\n    - For https://github.com/NuGet/NuGetGallery/issues/7482\r\n- [x] PROD\r\n  - [x] Scan and sign job ([release](https://devdiv.visualstudio.com/DevDiv/_releaseProgress?_a=release-pipeline-progress&releaseId=449756))\r\n  - [x] Gallery ([release](https://devdiv.visualstudio.com/DevDiv/_releaseProgress?_a=release-pipeline-progress&releaseId=447118))\r\n  - [x] Legacy search ([release](https://devdiv.visualstudio.com/DevDiv/_releaseProgress?_a=release-pipeline-progress&releaseId=446128))\r\n  - [x] Azure search ([release](https://devdiv.visualstudio.com/DevDiv/_releaseProgress?_a=release-pipeline-progress&releaseId=446894))\r\n  - [x] Validation.SymbolsOrchestrator: [Release](https://devdiv.visualstudio.com/DevDiv/_releaseProgress?_a=release-pipeline-progress&releaseId=448837)\r\n  - [x] Validation.PackageSigning.ValidateCertificate: [Release](https://devdiv.visualstudio.com/DevDiv/_releaseProgress?_a=release-pipeline-progress&releaseId=448847)\r\n  - [x] Validation.PackageSigning.ProcessSignature: [Release](https://devdiv.visualstudio.com/DevDiv/_releaseProgress?_a=release-pipeline-progress&releaseId=448848)\r\n\r\n### AME Deployments\r\n\r\nThe following deployments are to complete the AME migration. For each deployment, the on-call engineer should create a new release using the latest artifacts and configs. The on-call engineer should verify that the newly deployed code is able to access the database. If the deployment is **bolded**, this is considered a \"Level 1\" job for the AME migration. These deployments were originally from https://github.com/nuget/engineering/issues/2642. If you have any questions, please contact @zhhyu.\r\n\r\n- [x] INT\r\n    - [x] **Db2Catalog** ([release](https://devdiv.visualstudio.com/DevDiv/_releaseProgress?_a=release-pipeline-progress&releaseId=446176)) ⚠️ PENDING VERIFICATION ⚠️ \r\n    - [x] **NuGet.Jobs.SymbolsDeleter** ([release](https://devdiv.visualstudio.com/DevDiv/_releaseProgress?_a=release-pipeline-progress&releaseId=445020)) ⚠️ PENDING VERIFICATION ⚠️ \r\n    - [x] **Catalog2AzureSearch** ([release](https://devdiv.visualstudio.com/DevDiv/_releaseProgress?_a=release-pipeline-progress&releaseId=448976))\r\n    - [x] Validation.PackageSigning.RevalidateCertificate ([release](https://devdiv.visualstudio.com/DevDiv/_releaseProgress?_a=release-pipeline-progress&releaseId=448977))\r\n    - [x] MonitoringProcessor ([release](https://devdiv.visualstudio.com/DevDiv/_releaseProgress?_a=release-pipeline-progress&releaseId=448979))\r\n    - [x] Db2Monitoring ([release](https://devdiv.visualstudio.com/DevDiv/_releaseProgress?_a=release-pipeline-progress&releaseId=448983))\r\n    - [x] ArchivePackages ([release](https://devdiv.visualstudio.com/DevDiv/_releaseProgress?_a=release-pipeline-progress&releaseId=448990))\r\n    - [x]  Owners2AzureSearch ([release](https://devdiv.visualstudio.com/DevDiv/_releaseProgress?_a=release-pipeline-progress&releaseId=448991))\r\n    - [x] Search.GenerateAuxiliaryData ([release](https://devdiv.visualstudio.com/DevDiv/_releaseProgress?_a=release-pipeline-progress&releaseId=448992))\r\n    - [x] Stats.AggregateCdnDownloadsInGallery ([release](https://devdiv.visualstudio.com/DevDiv/_releaseProgress?_a=release-pipeline-progress&releaseId=448993))\r\n    - [x] Stats.ImportAzureCdnStatistics ([release](https://devdiv.visualstudio.com/DevDiv/_releaseProgress?_a=release-pipeline-progress&releaseId=448999))\r\n    - [x] Stats.RolUpDownloadFacts ([release](https://devdiv.visualstudio.com/DevDiv/_releaseProgress?_a=release-pipeline-progress&releaseId=449000))\r\n    - [x] Gallery.AccountDeleter ([release](https://devdiv.visualstudio.com/DevDiv/_releaseProgress?_a=release-pipeline-progress&releaseId=449001))\r\n- [x] PROD\r\n    - [x] **Db2Catalog** ([release](https://devdiv.visualstudio.com/DevDiv/_releaseProgress?_a=release-pipeline-progress&releaseId=451988))\r\n    - [x] **NuGet.Jobs.SymbolsDeleter** ([release](https://devdiv.visualstudio.com/DevDiv/_releaseProgress?_a=release-pipeline-progress&releaseId=453121))\r\n    - [x] **Catalog2AzureSearch** ([release](https://devdiv.visualstudio.com/DevDiv/_releaseProgress?_a=release-pipeline-progress&releaseId=448976))\r\n    - [x] Validation.PackageSigning.RevalidateCertificate ([release](https://devdiv.visualstudio.com/DevDiv/_releaseProgress?_a=release-pipeline-progress&releaseId=448977))\r\n    - [x] MonitoringProcessor ([release](https://devdiv.visualstudio.com/DevDiv/_releaseProgress?_a=release-pipeline-progress&releaseId=448979))\r\n    - [x] Db2Monitoring ([release](https://devdiv.visualstudio.com/DevDiv/_releaseProgress?_a=release-pipeline-progress&releaseId=448983))\r\n    - [x] ArchivePackages ([release](https://devdiv.visualstudio.com/DevDiv/_releaseProgress?_a=release-pipeline-progress&releaseId=448990))\r\n    - [x]  Owners2AzureSearch ([release](https://devdiv.visualstudio.com/DevDiv/_releaseProgress?_a=release-pipeline-progress&releaseId=448991))\r\n    - [x] Search.GenerateAuxiliaryData ([release](https://devdiv.visualstudio.com/DevDiv/_releaseProgress?_a=release-pipeline-progress&releaseId=448992))\r\n    - [x] Stats.AggregateCdnDownloadsInGallery ([release](https://devdiv.visualstudio.com/DevDiv/_releaseProgress?_a=release-pipeline-progress&releaseId=448993))\r\n    - [x] Stats.ImportAzureCdnStatistics ([release](https://devdiv.visualstudio.com/DevDiv/_releaseProgress?_a=release-pipeline-progress&releaseId=448999))\r\n    - [x] Stats.RolUpDownloadFacts ([release](https://devdiv.visualstudio.com/DevDiv/_releaseProgress?_a=release-pipeline-progress&releaseId=449000))\r\n    - [x] Gallery.AccountDeleter ([release](https://devdiv.visualstudio.com/DevDiv/_releaseProgress?_a=release-pipeline-progress&releaseId=449001))\r\n\r\n### Changes\r\n- Scan and sign\r\n    - Add queue-back to scan and sign submitter (https://github.com/NuGet/NuGetGallery/issues/7483)\r\n- Gallery\r\n    - Make the readme show more link not jump to the top of the page (https://github.com/NuGet/NuGetGallery/issues/7519)\r\n    - [SDL] Replace HttpWebRequest with HttpClient (https://github.com/NuGet/NuGetGallery/issues/7504)\r\n    - Add site admin check for tenant (https://github.com/NuGet/NuGetGallery/issues/7511)\r\n    - Make package ownership accept / reject require POST (https://github.com/NuGet/NuGetGallery/issues/7515)\r\n    - Fix timezone issues (https://github.com/NuGet/NuGetGallery/issues/7521)\r\n    - Update to latest ServerCommon to react to method rename (https://github.com/NuGet/NuGetGallery/issues/7520)\r\n    - Add organization membership and transform actions use POST (https://github.com/NuGet/NuGetGallery/issues/7522)\r\n    - Use AppInsights instead of System.Diagnostics.Tracing in DiagnosticsService (https://github.com/NuGet/NuGetGallery/issues/7513)\r\n    - Add abbr tags to hidden column headers in display package version history table (https://github.com/NuGet/NuGetGallery/issues/7510)\r\n    - [SDL] Gallery.Core uses the SHA512 for copy checks. (https://github.com/NuGet/NuGetGallery/issues/7530)\r\n    - Minor icon fixes (https://github.com/NuGet/NuGetGallery/issues/7539)\r\n    - Mitigate \"Internal Server Error\" on package uploads (https://github.com/NuGet/NuGetGallery/issues/7540)\r\n    - Build&Sign config for GalleryTools (https://github.com/NuGet/NuGetGallery/issues/7541)\r\n- Legacy search\r\n    - [SDL] Use HttpClient instead of HttpWebRequest ([#647](https://github.com/NuGet/NuGet.Services.Metadata/pull/647))\r\n- Azure Search\r\n    - Mega-boost the package with ID matching a query containing symbols ([#652](https://github.com/NuGet/NuGet.Services.Metadata/pull/652))"},{"Id":"10476518278","Type":"IssuesEvent","CreatedAt":"2019-09-23T18:46:47","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7575","RelatedDescription":"Opened issue \"[GitHub Indexer] GitHub Indexer does not clean up properly after deployment\" (#7575) at NuGet/NuGetGallery","RelatedBody":"The GitHub Indexer job does not properly clean up its state if it is is deployed while it is running. This happens b/c the job stores its state in it's working directory, and the working directory changes on each deployment. Instead, the job should use one known location to store its state."},{"Id":"10475853684","Type":"IssuesEvent","CreatedAt":"2019-09-23T17:15:46","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7185","RelatedDescription":"Closed issue \"Package validations can be made much quicker with a \"queue-back\"\" (#7185) at NuGet/NuGetGallery","RelatedBody":"Downstream validators can queue back to orchestrator when they are done. This can save minutes. From testing on DEV, it can save on average roughly 2 minutes and 30 seconds per initial package validation.\r\n\r\n\r\n1. [x] Apply Validation DB migration.\r\n1. [x] Deploy orchestrators that handle the new message type.\r\n    - https://github.com/NuGet/NuGetGallery/issues/7394\r\n1. [x] Deploy symbol validator and symbol ingester.\r\n1. [x] Turn on the feature flag.\r\n1. [x] E2E tests and manual testing of symbol validation.\r\n1. [x] Turn off the feature flag.\r\n1. [x] Deploy revalidate certificate job.\r\n1. [x] Deploy package validators.\r\n1. [x] Deploy scan and sign submitter.\r\n1. [x] Enable feature flag monitoring \r\n\r\n# Results\r\n\r\nOver the past 7 days (4 days with queue-back, 3 days without queue-back), this is the improvement of validation times at a variety of percentiles. In short, we shaved off 2 minutes of validation time!\r\n\r\njobName | p50 | p90 | p95 | p99\r\n-- | -- | -- | -- | --\r\nValidation.SymbolsOrchestrator | 43.53355 | 134.0543 | 165.6078 | 190.0541\r\nValidation.Orchestrator | 129.1221 | 158.1307 | 184.3262 | 216.7317\r\n\r\nThis is the P95 validation time, per 6 hours over the past 7 days.\r\n\r\n![image](https://user-images.githubusercontent.com/94054/65446774-ed4ee580-dde9-11e9-9496-51fc500daf64.png)\r\n\r\n## Queries\r\n\r\n```\r\nlet enabledData = todatetime('2019-09-19T23:11:46.558');\r\nlet summary = materialize (\r\n    customMetrics\r\n    | where timestamp > ago(7d)\r\n    | where name == \"Orchestrator.TotalValidationDurationSeconds\"\r\n    | extend instanceName = tostring(customDimensions.InstanceName)\r\n    | extend jobName = iff(instanceName startswith \"Validation.Orchestrator\", \"Validation.Orchestrator\", \"Validation.SymbolsOrchestrator\")\r\n    | extend hasQueueBack = timestamp > enabledData\r\n    | summarize avg(value), percentiles(value, 50, 90, 95, 99) by jobName, hasQueueBack\r\n);\r\nsummary\r\n| where hasQueueBack == false\r\n| join (\r\n   summary\r\n   | where hasQueueBack == true\r\n) on jobName\r\n| project jobName,\r\n          p50 = percentile_value_50 - percentile_value_501,\r\n          p90 = percentile_value_90 - percentile_value_901,\r\n          p95 = percentile_value_95 - percentile_value_951,\r\n          p99 = percentile_value_99 - percentile_value_991;\r\n```\r\n\r\n```\r\nlet enabledData = todatetime('2019-09-19T23:11:46.558');\r\nlet data = materialize(\r\n    customMetrics\r\n    | where timestamp > ago(7d)\r\n    | where name == \"Orchestrator.TotalValidationDurationSeconds\"\r\n    | extend instanceName = tostring(customDimensions.InstanceName)\r\n    | extend jobName = iff(instanceName startswith \"Validation.Orchestrator\", \"Validation.Orchestrator\", \"Validation.SymbolsOrchestrator\")\r\n    | extend hasQueueBack = timestamp > enabledData\r\n    | summarize value = percentile(value, 95) by bin(timestamp, 6h), jobName, hasQueueBack\r\n);\r\ndata\r\n| where jobName == \"Validation.Orchestrator\"\r\n| project timestamp, Validation_Orchestrator = value\r\n| join (\r\n    data\r\n    | where jobName == \"Validation.SymbolsOrchestrator\"\r\n    | project timestamp, Validation_SymbolsOrchestrator = value\r\n) on timestamp\r\n| project-away timestamp1\r\n| extend zero = 0\r\n| render timechart\r\n````"},{"Id":"10468942120","Type":"IssuesEvent","CreatedAt":"2019-09-22T17:12:32","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7574","RelatedDescription":"Opened issue \"Support `packageTypes` property in catalog\" (#7574) at NuGet/NuGetGallery","RelatedBody":"### Describe the bug\r\nThe [`packageTypes` nuspec property](https://docs.microsoft.com/en-us/nuget/reference/nuspec#packagetypes) is used to distinguish between regular dependency packages, .NET CLI tools, and .NET CLI templates. Today, this property is always `\"\"` on catalog leafs.\r\n\r\n### To Reproduce\r\n\r\nSee the `packageTypes` property on the following leafs:\r\n\r\n* .NET CLI tool: https://api.nuget.org/v3/catalog0/data/2018.10.17.01.01.10/dotnet-xunit.2.4.0-beta.1.build3958.json\r\n* .NET CLI template: https://api.nuget.org/v3/catalog0/data/2018.11.30.06.14.50/giraffe-template.0.1.0-alpha007.json\r\n\r\n### Expected behavior\r\nThe catalog leaf should be a JSON array of all the package type names in the nuspec. For example:\r\n\r\n```\r\n\"packageTypes\": [\r\n    \"DotnetCliTool\"\r\n]\r\n```\r\n\r\n### Additional context\r\nThis is necessary to properly support package type filtering in the search service. Today, the job mutating the search index must guess the package type from the catalog leafs' `packageEntries` property. This approach isn't perfect as the search index must be rebuilt when a new package type is introduced."},{"Id":"10464262980","Type":"IssuesEvent","CreatedAt":"2019-09-21T00:08:04","Actor":"scottbommarito","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7573","RelatedDescription":"Opened issue \"Document guidance on deprecation/unlisting best practices\" (#7573) at NuGet/NuGetGallery","RelatedBody":"@rrelyea and @nkolev92 approached me today about what the best action would be for a specific scenario: whether the author should unlist, deprecate, or do both to a package.\r\n\r\nI think it would be helpful to write some documentation on best practices for this scenario. It should answer the following questions:\r\n1. When should an author unlist a package?\r\n2. When should an author deprecate a package?\r\n3. What are the differences between unlisting and deprecating?\r\n\r\ncc: @anangaur @karann-msft @chgill-MSFT "},{"Id":"10464193901","Type":"PullRequestEvent","CreatedAt":"2019-09-20T23:44:11","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7572","RelatedDescription":"Opened pull request \"[SDL] Proxy gravatar images\" (#7572) at NuGet/NuGetGallery","RelatedBody":"⚠️ I still need to test this on DEV\r\n⚠️ I still need to run a perf test on the new gravatar endpoint\r\n\r\nAddresses https://github.com/NuGet/Engineering/issues/2734"},{"Id":"10463104142","Type":"IssuesEvent","CreatedAt":"2019-09-20T19:47:01","Actor":"joelverhagen","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7571","RelatedDescription":"Opened issue \"Not all packages are tracked by the PackageLag monitor\" (#7571) at NuGet/NuGetGallery","RelatedBody":"There are a lot of packages that don't have `PackageCreationLagInSeconds` metrics in each region region/service type pair.\r\n\r\n```\r\ncustomMetrics\r\n| where timestamp > ago(21d)\r\n| where name == \"PackageCreationLagInSeconds\"\r\n| extend instanceIndex = toint(customDimensions.InstanceIndex)\r\n| extend packageId = tostring(customDimensions.PackageId)\r\n| extend version = tostring(customDimensions.Version)\r\n| extend region = tostring(customDimensions.Region)\r\n| extend serviceType = tostring(customDimensions.ServiceType)\r\n| extend serviceType = iff(serviceType == \"\", \"LuceneSearch\", serviceType)\r\n| extend package = strcat(packageId, \" \", version)\r\n| extend serviceTypeRegion = strcat(serviceType, \" \", region)\r\n| distinct package, serviceTypeRegion\r\n| summarize serviceTypeRegionCount = count() by package\r\n| summarize packageCount = count() by serviceTypeRegionCount\r\n| order by serviceTypeRegionCount desc\r\n```\r\n\r\nI would expect nearly all packages in the past 21 days to have a metric for each package, except perhaps those published right around 21 days ago. However, this is not the case:\r\n\r\nserviceTypeRegionCount | packageCount\r\n-- | --\r\n8 | 8142\r\n7 | 120\r\n6 | 852\r\n5 | 112\r\n4 | 1905\r\n3 | 7\r\n2 | 7\r\n1 | 1\r\n\r\nFor example, the package **ICSharpCode.WpfDesigner 8.0.160** only has metrics in `LuceneSearch`, not in `AzureSearch`... but that package is certainly in Azure Search:\r\nhttps://azuresearch-usnc.nuget.org/query?q=packageid:ICSharpCode.WpfDesigner&prerelease=true&semVerLevel=2.0.0\r\n\r\nThis package was published about 1 day ago:\r\nhttps://www.nuget.org/packages/ICSharpCode.WpfDesigner/8.0.160"},{"Id":"10462146983","Type":"IssuesEvent","CreatedAt":"2019-09-20T17:12:59","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7560","RelatedDescription":"Closed issue \"Mitigate \"Internal Server Error\" on package uploads\" (#7560) at NuGet/NuGetGallery","RelatedBody":"Originally from https://github.com/nuget/nugetgallery/issues/7536\r\nFixed by https://github.com/NuGet/NuGetGallery/pull/7540\r\n\r\n> `HttpStatusCodeResult` throws if the `StatusDescription` property is longer than 512 characters (see [this documentation](https://docs.microsoft.com/en-us/dotnet/api/system.web.httpresponse.statusdescription?redirectedfrom=MSDN&view=netframework-4.8#exceptions)), which results in a HTTP 500 response. I wasn't able to determine which code path affected the user as a few suspicious paths append an exception message to the description."}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"10479708232","Type":"IssuesEvent","CreatedAt":"2019-09-24T05:20:48","Actor":"djee-ms","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8623","RelatedDescription":"Opened issue \"Guide for packaging C# library using P/Invoke to per-architecture and/or per-platform C++ native DLLs\" (#8623) at NuGet/Home","RelatedBody":"I am trying to make a NuGet package deploying a C# .NET Standard 2.0 library which does P/Invoke calls into a platform-dependent C++ library, which must therefore also be deployed, but is obviously architecture-dependent (x86, x64, ARM, ARM64), as well as platform-dependent (Desktop (Win32) vs. UWP).\r\n\r\nI read most documentations on docs.microsoft.com, issues on this GitHub and others, SO issues, etc. and it is still very unclear how to do this. Information is sparse, sometimes contradictory, and the lack of details on some concepts like TFMs makes the task nearly impossible. This whole thing could really use some detailed documenting and samples.\r\n\r\nIn no particular order:\r\n\r\n## Target frameworks\r\n\r\n- https://docs.microsoft.com/en-us/nuget/reference/target-frameworks has a long list of supported frameworks, but `native` is not included, as reported in NuGet/docs.microsoft.com-nuget#1480. However https://devblogs.microsoft.com/nuget/native-support/ clearly states that:\r\n  > When targeting native projects, a new target framework name is now recognized: **native**.\r\n\r\n- This page lists `netcore` as a framework with versions like `5.0`. But .NET Core is just releasing its 3.0 this week. So clearly there is no relation between the two, but there is not a word on it.\r\n\r\n- This page also casually mentions the TFM `win10`:\r\n  > win10 (not supported by Windows 10 Platform)\r\n\r\n  There is no explanation on what `win10` is (is this Desktop, as opposed to UWP?) nor why `win10` would not be supported on Windows 10 despite the name clearly saying otherwise.\r\n\r\n## Package structure\r\n\r\n- https://docs.microsoft.com/en-us/nuget/create-packages/creating-a-package goes into details about the NuGet package structure, but does not mention anything about native DLLs.\r\n\r\n- https://devblogs.microsoft.com/nuget/native-support/ says that the `build/` folder should be used to put the native DLLs, but https://docs.microsoft.com/en-us/nuget/create-packages/creating-a-package says it is only for `.targets` and `.props` files.\r\n\r\n- https://devblogs.microsoft.com/nuget/native-support/ says that the `build/` folder respects target frameworks, but does that mean that `build/native/x86/my.dll` vs. `build/native/x64/my.dll` works? Or should architecture-specific native DLLs be put in `runtimes/`?\r\n\r\n- Does NuGet support Desktop (Win32) and UWP inside the same package? I could not find any documentation about that. I tried using `runtimes\\win10-x86\\native\\my.dll` for the Desktop variant, and `runtimes\\win10-x86\\lib\\uap10.0\\my.dll` for the UWP variant of the native DLL, but I get an error _error APPX1101: Payload contains two or more files with the same destination path_. Why is that? Those are different frameworks, why is NuGet trying to import both files into a UWP project?\r\n\r\n## P/Invoke\r\n\r\nIt seems many people have problem with deploying architecture-specific native DLLs. A quick search on nuget.org shows that [packages like Microsoft.Net.Native.Compiler have many \"runtime\" variants](https://www.nuget.org/packages/runtime.win10-x64.Microsoft.Net.Native.Compiler/2.2.7-rel-27913-00) starting with _e.g._ a `runtime.win10-x64.` prefix, but it doesn't seem there is documentation about this approach.\r\n\r\nhttps://github.com/Mizux/dotnet-native attempts to provide an example using [the undocumented `runtime.json`](https://github.com/dotnet/corefx/blob/master/pkg/Microsoft.NETCore.Platforms/runtime.json) used by CoreFX, but looking at the example it seems that for each native DLL variant, a specific .NET Standard 2.0 wrapper assembly is needed, instead of using a single one with multiple native DLLs. This sounds very cumbersome, is that the only option?\r\n\r\nRelated to that, if it is possible to use a single .NET Standard 2.0 assembly, then how to deploy the correct native DLL? With a .NET Core 3.0 sample app, it seems that currently NuGet copies the entire `runtimes/` folder inside the `bin/` folder of the app, instead of only the appropriate native DLL. This results in multiple copies, and of course the wrong DLL path which prevents `DllImport` from finding the native DLL.\r\n\r\n## Other issues\r\n\r\nThere are many other logged issues that seem partially related:\r\n- #6645 mentions that\r\n  >  runtimes/{rid}/native does not work with netfx\r\n\r\n  but there is no context about where that comes from. And it suggests putting native DLLs in `lib/` which is reserved for assemblies, so doesn't seem to be a correct solution.\r\n- #6648 closed as duplicate, although the context is not clear (what kind of app / platform is this about?)\r\n- #3931 seems to be somewhat related, but uses `project.json` (?)\r\n- #2350 asks about the P/Invoke and packaging issue, but was closed without answer.\r\n- #6846 touches on the deploy problem when consuming the package\r\n- #8573, #8435, #1221, #5606, ... I didn't read all of them, there are too many.\r\n- Several issues mention https://stackoverflow.com/questions/49162127/how-to-include-native-assets-in-nuget-on-multiple-platforms-only-64-bit but this seems to be only a subset of the issues, it is not clear how this scales to multiple architectures AND multiple platforms at the same time. It also seems to suggest multiple assemblies are needed.\r\n- The road of the [`AssemblyLoadContext`](https://github.com/dotnet/coreclr/blob/master/Documentation/design-docs/assemblyloadcontext.md) seems to be a runtime solution to a packaging problem, and really not a path I want to get onto.\r\n"},{"Id":"10479694292","Type":"IssuesEvent","CreatedAt":"2019-09-24T05:17:27","Actor":"Falconne","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8622","RelatedDescription":"Opened issue \"\"nuget.exe list\" filtering on search terms no longer works\" (#8622) at NuGet/Home","RelatedBody":"`nuget list [search terms]` functionality allows searching for NuGet packages from the command line. This worked well upto 5.0.2, but in the version after that the list method ignores the search terms and will go on to list every single package in every package source.\r\n\r\n## Details about Problem\r\n\r\nProduct: NuGet.exe\r\n\r\nNuGet version: 5.3.0\r\n\r\nOS version: Windows 10\r\n\r\nWorked before? If so, with which NuGet version:\r\nYes, last worked in v5.0.2.\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. `nuget.exe list Microsoft.Extensions.Configuration.Json`\r\n\r\n2. With v5.0.2 that will return immediately with about a dozen hits on the given package name. With any later version, this will list every package in the public repo, ignoring the search term.\r\n\r\n"},{"Id":"10478640738","Type":"IssuesEvent","CreatedAt":"2019-09-24T00:54:34","Actor":"vsfeedback","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8621","RelatedDescription":"Opened issue \"Provide a tooltip on the Yellow Exclamation on Nuget References aka the yellow pain in the stomach\" (#8621) at NuGet/Home","RelatedBody":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/732731/provide-a-tooltip-on-the-yellow-exclamation-on-nug.html)._\n\n---\nProvide a tooltip / dialog on the Yellow Exclamation on Nuget References why this appears.\n\nProvide any/more information why this /!\\ Yellow Exclamation is shown ,\nso I can guess if I care or not - old cache information, reload solution, csproj stetting are worng, ... what ever.\nNow it'S a wild guess why this happens.\n\nThe situation with all the TargetFrameWork, RuntimeFrameworkVersion, ... differences with visual studio, msbuild core, msbuild framework, ... is IMHO not easy.\n\ntxs Flori\n\n---\n### Original Comments\n\n#### Visual Studio Feedback System on 9/16/2019, 00:32 AM: \n\n<p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n\n---\n### Original Solutions\n(no solutions)"},{"Id":"10478144965","Type":"IssuesEvent","CreatedAt":"2019-09-23T22:55:21","Actor":"cristinamanum","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8590","RelatedDescription":"Closed issue \"[Centrally managing NuGet packages and versions] Evaluate the current usage of CPVM MsBuild SDK\" (#8590) at NuGet/Home","RelatedBody":"Use the current repos to get insights about the usage of the CPVM - MsBuild SDK . The goal is to help shape the user scenarios. \r\n\r\n"},{"Id":"10477996580","Type":"IssuesEvent","CreatedAt":"2019-09-23T22:24:34","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/6965","RelatedDescription":"Closed issue \"New nuget lock files should include information about dependencies\" (#6965) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe):\r\nNuGet.exe\r\n\r\nNuGet version (x.x.x.xxx):\r\nAll\r\n\r\ndotnet.exe --version (if appropriate):\r\nN/A\r\n\r\nVS version (if appropriate):\r\nN/A\r\n\r\nOS version (i.e. win10 v1607 (14393.321)):\r\nN/A\r\n\r\nWorked before? If so, with which NuGet version:\r\nN/A\r\n\r\n## Feature Suggestion\r\n\r\nThe new spec for nuget lock files should include dependency information (both Yarn and Npm's lock files do this). This information is useful for people examining the lock file statically to report on vulnerable components and what top level components brought in a particular component. I'm creating this issue as a result of a conversation with @anangaur \r\n\r\n"},{"Id":"10477571304","Type":"IssuesEvent","CreatedAt":"2019-09-23T21:13:19","Actor":"anangaur","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8620","RelatedDescription":"Opened issue \"dotnet list package does not indicate presence of a deprecated package\" (#8620) at NuGet/Home","RelatedBody":"As part of the PR https://github.com/NuGet/NuGet.Client/pull/2928, it was supposed to put an indication on the presence of a deprecated package with the command `dotnet list package`. However it doesn't seem to work.\r\n\r\n`dotnet list package --deprecated` works however.\r\n\r\nFeature issue: https://github.com/NuGet/Home/issues/2867"},{"Id":"10477493946","Type":"IssuesEvent","CreatedAt":"2019-09-23T21:01:44","Actor":"sipsorcery","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8573","RelatedDescription":"Closed issue \"Improvement: Handle platform specific assemblies (x86, x64 etc) with msbuild conditionals\" (#8573) at NuGet/Home","RelatedBody":"Lots of us are having issues using nuget to package platform specific assemblies (#8435, #1221 etc). The crux of the problem is that while the platform specific artifacts can be packaged with nuget if the assembly reference(s) is platform specific there is no clean way to set it in the consuming project file.\r\n\r\nTo illustrate the problem my partial nuspec is:\r\n\r\n````\r\n<package xmlns=\"http://schemas.microsoft.com/packaging/2012/06/nuspec.xsd\">\r\n    <metadata>\r\n   ....\r\n    <references>\r\n    <reference file=\"SIPSorceryMedia.dll\" />\r\n      </references>\r\n    </metadata>\r\n    <files>\r\n      <file src=\"x86\\Release\\SIPSorceryMedia.dll\" target=\"lib\\net47\" />\r\n      <file src=\"SIPSorceryMedia.targets\" target=\"build\\SIPSorceryMedia.targets\" />\r\n      <file src=\"SIPSorceryMedia.props\" target=\"build\\SIPSorceryMedia.props\" />\r\n      <file src=\"x64\\Release\\*.dll\" target=\"build\\x64\" />\r\n      <file src=\"x86\\Release\\*.dll\" target=\"build\\x86\" />\r\n    </files>\r\n</package>\r\n````\r\n\r\nThe subsequent reference that ends up in a consuming project files is:\r\n\r\n````\r\n<Reference Include=\"SIPSorceryMedia, Version=1.1.7192.37613, Culture=neutral, processorArchitecture=x86\">\r\n  <HintPath>packages\\SIPSorceryMedia.1.7.2\\lib\\net47\\SIPSorceryMedia.dll</HintPath>\r\n</Reference>\r\n````\r\n\r\nI have found no way to be able to override the hint path in that reference with the use of platform specific overrides in a `.props` or `.targets` file. For example if msbuild accepted an  override on the hint path of the original reference it would be possible to use the example `SIPSorceryMedia.props` file shown below. Unfortunately it doesn't work.\r\n\r\n````\r\n<Project ToolsVersion=\"4.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\r\n  <ItemGroup>\r\n    <Reference Include=\"SIPSorceryMedia, Version=1.1.7192.37613, Culture=neutral, processorArchitecture=x64\" Condition=\"'$(Platform)' == 'x64' or '$(Platform)' == 'AnyCPU'\">\r\n      <HintPath>packages\\SIPSorceryMedia.1.7.2\\build\\x64\\SIPSorceryMedia.dll</HintPath>\r\n    </Reference>\r\n  </ItemGroup>\r\n</Project>\r\n````\r\n\r\nBut what **does work** is if the reference inserted into the project file has a platform specific condition:\r\n\r\n````\r\n<Reference Condition=\"'$(Platform)' == 'x86' Include=\"SIPSorceryMedia, Version=1.1.7192.37613, Culture=neutral, processorArchitecture=x86\">\r\n  <HintPath>packages\\SIPSorceryMedia.1.7.2\\lib\\net47\\SIPSorceryMedia.dll</HintPath>\r\n</Reference>\r\n````\r\n\r\n__Suggested Improvement__\r\n\r\nThe suggestion is if nuspec file references could be specified as:\r\n\r\n````\r\n<file src=\"x86\\Release\\SIPSorceryMedia.dll\" target=\"lib\\x86\\net47\" />\r\n<file src=\"x64\\Release\\SIPSorceryMedia.dll\" target=\"lib\\x64\\net47\" />\r\n````\r\n\r\nThen the references could be added to the consuming project as shown below and which builds correctly when the msbuild platform is specified:\r\n\r\n````\r\n<Reference Include=\"SIPSorceryMedia, Version=1.1.7192.37613, Culture=neutral, processorArchitecture=x86\" Condition=\"'$(Platform)' == 'x86'\">\r\n  <HintPath>packages\\SIPSorceryMedia.1.7.2\\build\\x86\\SIPSorceryMedia.dll</HintPath>\r\n</Reference>\r\n<Reference Include=\"SIPSorceryMedia, Version=1.1.7192.37613, Culture=neutral, processorArchitecture=x64\" Condition=\"'$(Platform)' == 'x64'\">\r\n  <HintPath>packages\\SIPSorceryMedia.1.7.2\\build\\x64\\SIPSorceryMedia.dll</HintPath>\r\n</Reference>\r\n````\r\n\r\n"},{"Id":"10476943977","Type":"IssuesEvent","CreatedAt":"2019-09-23T19:45:51","Actor":"rrelyea","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8618","RelatedDescription":"Closed issue \"The ',' character, hexadecimal value 0x2C, cannot be included in a name.\" (#8618) at NuGet/Home","RelatedBody":"NuGet Version: 4.9.2.5706\r\n\r\nThe ',' character, hexadecimal value 0x2C, cannot be included in a name. Line 21, position 124.\r\nBut the line 21 points to &lt;description>\r\n\r\nAssemblyInfo.cs\r\n[assembly: AssemblyDescription(\"Extentend System.Configuration classes. property registration (w/o attributes), IList<T>/IDctionary<string,T> support.\")]\r\nsample.nuspec\r\n<description>$description$</description>\r\n[sample.nuspec.txt](https://github.com/NuGet/Home/files/3643815/sample.nuspec.txt)\r\n"},{"Id":"10476935505","Type":"IssuesEvent","CreatedAt":"2019-09-23T19:44:45","Actor":"zkat","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8619","RelatedDescription":"Opened issue \"Insertion of NuGet 5.4.0-preview.2.6259\" (#8619) at NuGet/Home","RelatedBody":"VS Insertion\r\n\r\n* [ ] PR: https://devdiv.visualstudio.com/DevDiv/_git/VS/pullrequest/203783"},{"Id":"10476922450","Type":"IssuesEvent","CreatedAt":"2019-09-23T19:42:59","Actor":"SchreinerK","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8618","RelatedDescription":"Opened issue \"The ',' character, hexadecimal value 0x2C, cannot be included in a name.\" (#8618) at NuGet/Home","RelatedBody":"NuGet Version: 4.9.2.5706\r\n\r\nThe ',' character, hexadecimal value 0x2C, cannot be included in a name. Line 21, position 124.\r\nBut the line 21 points to <description>\r\n\r\nAssemblyInfo.cs\r\n[assembly: AssemblyDescription(\"Extentend System.Configuration classes. property registration (w/o attributes), IList<T>/IDctionary<string,T> support.\")]\r\nsample.nuspec\r\n<description>$description$</description>\r\n[sample.nuspec.txt](https://github.com/NuGet/Home/files/3643815/sample.nuspec.txt)\r\n"},{"Id":"10476721513","Type":"IssuesEvent","CreatedAt":"2019-09-23T19:14:53","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8617","RelatedDescription":"Opened issue \"PR triggering for external contributors not working. \" (#8617) at NuGet/Home","RelatedBody":"See: https://github.com/NuGet/NuGet.Client/pull/3070\r\nThe labels are being set, yet https://devdiv.visualstudio.com/DevDiv/_build?definitionId=8118 shows no builds are being triggered."},{"Id":"10476441425","Type":"IssuesEvent","CreatedAt":"2019-09-23T18:36:11","Actor":"zkat","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8597","RelatedDescription":"Closed issue \"[Test Failure] Clicking “Open Containing Folder” on Web Site project level PM UI goes to solution folder\" (#8597) at NuGet/Home","RelatedBody":"##  Details about Problem\r\nVS Version: Master 29316.39\r\nOS Version: Windows-10-Enterprise-19H1-04-05-2019.\r\nNuGet Version: Dev\\5.4.0.6246\r\n## Detailed repro steps \r\n1. Launch Visual Studio 2019.\r\n2. Create a C# ASP.NET Web Forms Site project and open PM UI for project.\r\n3. Right click the tab “NuGet: WebSite” and click “Open Containing Folder”.\r\n## Expected\r\nClicking “Open Containing Folder” on Web Site project level PM UI should goes to the project’s folder. \r\n## Actual\r\nClicking “Open Containing Folder” on Web Site project level PM UI goes to solution as below screenshot. \r\n![image](https://user-images.githubusercontent.com/40230425/65030123-940e2e80-d971-11e9-9d6a-59f0fee04db1.png)\r\n## Notes\r\n1.The issue repro on all Web Site templates. \r\n2.The issue doesn’t repro on ASP.NET Web Application (.NET Framework) templates. \r\n3. It's not a regression issue.\r\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"10286366828","Type":"IssuesEvent","CreatedAt":"2019-08-26T13:37:09","Actor":"karann-msft","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/38","RelatedDescription":"Opened issue \"New and improved NuGet Search is live!\" (#38) at NuGet/Announcements","RelatedBody":"Announcing the new and improved search on NuGet.org leveraging Azure Search.\r\n\r\n[Blogpost](https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/) | [Feedback Issue](https://github.com/NuGet/NuGetGallery/issues/4124)"},{"Id":"10168692521","Type":"IssuesEvent","CreatedAt":"2019-08-07T21:31:54","Actor":"anangaur","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/37","RelatedDescription":"Opened issue \"Using OData to query NuGet.org repository is being deprecated\" (#37) at NuGet/Announcements","RelatedBody":"We introduced `V3 APIs` in early 2016. We have made continuous investments to make it more reliable, performant and secure. Going forward, we plan to bring all new features and improvements only to the newer `V3 APIs`. As part of this strategy, we are deprecating the usage of `OData` queries. Subsequently, we plan to **disable the `OData` queries starting Feb 5th, 2020**.\r\n\r\n**Call to Action: Transition to V3 APIs**\r\n\r\nHere are some resources to help you with the migration:\r\n* [NuGet Server `V3 APIs` reference](https://devblogs.microsoft.com/nuget/switching-from-wcf-odata-to-web-api/)\r\n* [Guide to transition from NuGet `V2 API` to `V3 API`](https://docs.microsoft.com/en-us/nuget/guides/api/query-for-all-published-packages). \r\n* [Blog post: Switching from WCF OData to Web API](https://devblogs.microsoft.com/nuget/switching-from-wcf-odata-to-web-api/)\r\n\r\nIf you need further help in moving your use case to `V3 APIs`, do reach out to us at [support@nuget.org](mailto:support@nuget.org).\r\n"},{"Id":"10115721045","Type":"IssuesEvent","CreatedAt":"2019-07-30T22:44:31","Actor":"shoter","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Announcements/issues/36","RelatedDescription":"Closed issue \"Replace reference to codeplex issue numer 3072\" (#36) at NuGet/Announcements","RelatedBody":"This is copy of codeplex issue number 3072 as it is referenced inside code. I should do a PR shortly to address this one.\r\n\r\nThe place where it is referenced is RuntimeHelper.cs:150\r\n\r\n\r\n---\r\n\r\nWe're hitting an issue with Microsoft.Bcl package where NuGet is adding a binding redirect for a binary that is considered part of the framework, this causes the application to crash because the binding redirect refers to assembly version that is not available at runtime.\r\n\r\n@Repro:\r\n\r\n1. Create a new Console Application targeting 4.5\r\n2. Create a new Portable Library targeting .NET Framework 4.5, Silverlight 4, Windows Phone 7.5 and .NET for Windows Store apps\r\n3. Add a reference to the portable library from the Console Application\r\n4. Install the Microsoft.Bcl package (1.0.16-rc) to both projects\r\n\r\n@Expected: No binding redirect for System.Runtime in the .NET Framework 4.5 project because a ___later version___ is part of the target framework (see C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.5\\RedistList\\FrameworkList.xml)\r\n@Actual: Binding redirect\r\n\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Runtime\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-1.5.11.0\" newVersion=\"1.5.11.0\" />\r\n</dependentAssembly>\r\n\r\n\r\nYou can use the IVsFrameworkMultiTargeting to determine if a given assembly version is available as part of a given target framework.\r\nMake sure when you fix this, that you only skip the binding redirect if ___a later or same version___ is available in the framework.  \r\n2013-02-22\r\n\r\n---\r\n\r\nWe'll do this in 2.4 release.  \r\n2013-02-26\r\n\r\n---\r\n\r\nIs IVsFrameworkMultiTargeting.IsReferenceableInTargetFx the method I need to call? What should I pass to pwszAssemblySpec?  \r\n2013-06-08\r\n\r\n---\r\n\r\nIt's the full name of the assembly (mscorlib, Version=[version], PublicKeyToken=[token], Culture=[culture]). It can either contain all the information (key, version, etc), or just the simple name (\"mscorlib\")  \r\n2013-06-10\r\n\r\n---\r\n\r\nSo look like I can only check for the same version of the target framework. Can't check for a later version using this method, because I don't know what future versions will be.  \r\n2013-06-12\r\n\r\n---\r\n\r\nThat's fine. That's exactly the behavior we want. For example, System.Runtime didn't ship in 4.0, but did in 4.5. We still want a binding redirect generated for it in 4.0, but not for 4.5.  \r\n2013-06-13\r\n\r\n---\r\n\r\nI followed the exact same steps above, but there's no binding redirect added to the Console Application. It's only added to the __Portable Library project__. Is that the bug?  \r\n2013-06-13\r\n\r\n---\r\n\r\nThe binding redirects added to the Portable Library project seems to come from the Microsoft.Bcl package itself (from the content folder's app.config.transform file). this looks like a non-bug.\r\n2013-06-13\r\n\r\n  \r\nI'm chasing up the repro with Eric St. John. He walked through the code and figured out where it was broken.\r\n\r\nIt's the not the app.config.tranform, notice how the net45 content is empty, and hence no transforms. We also marked our transforms with a special marker that indicates that we added the redirects . The binding redirects we were seeing were not coming from us.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAre you seeing the binding redirects added to the Console Application or the Portable Library? I don't see binding redirect added to Console Application, only the Portable Library.  \r\n2013-06-13\r\n\r\n---\r\n\r\nYes I'm talking about the ConsoleApplication. The binding redirects in the portable library project are expected, and do not affect runtime behavior (as the app.config is ignored and not copied to the app project), and hence can't cause an application to crash.\r\n\r\nI've found another repro (NuGet has really weird logic around when it decides to add binding redirects so it was hard to find a repro).\r\n\r\nThe repro is instead of using the Microsoft.Bcl package, install the Microsoft.Net.Http, 2.2.3-beta package. Make sure you are targeting __4.5__ from the ConsoleApplication and the exact platforms that I called out above for portable.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAlso, the ConsoleApplication must be referencing the portable project before installing the package.  \r\n2013-06-13\r\n\r\n---\r\n\r\nOK now I can repro  \r\n2013-06-14\r\n\r\n---\r\n\r\nOK, I've got a fix now. It no longer adds the binding redirect for System.Runtime.dll, but still adds one for System.Net.Http.Primitives. I guess it's expected, right? Please confirm.\r\n\r\n```\r\n<assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Net.Http.Primitives\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-4.2.3.0\" newVersion=\"4.2.3.0\" />\r\n</dependentAssembly>\r\n</assemblyBinding>\r\n```  \r\n2013-06-14\r\n\r\n---\r\n\r\n\r\nYes that's correct. System.Net.Http.Primitives does not exist in the framework.  \r\n2013-06-14\r\n\r\n---\r\n\r\nFixed in changeset b8d515f6341193b970d2a9d837e580e762d2eb71  \r\n2013-06-19\r\n\r\n---\r\n\r\ni get the same issue with my test project still, runtime being added... if i comment this out the tests run fine... if not i get exceptions thrown from json.net  \r\n2013-08-09\r\n\r\n---\r\n\r\n(or i can change the version up to 4.0.0.0 or something and it works)  \r\n2013-08-09"},{"Id":"10115715827","Type":"IssuesEvent","CreatedAt":"2019-07-30T22:43:23","Actor":"shoter","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/36","RelatedDescription":"Opened issue \"Replace reference to codeplex issue numer 3072\" (#36) at NuGet/Announcements","RelatedBody":"This is copy of codeplex issue number 3072 as it is referenced inside code. I should do a PR shortly to address this one.\r\n\r\nThe place where it is referenced is RuntimeHelper.cs:150\r\n\r\n\r\n---\r\n\r\nWe're hitting an issue with Microsoft.Bcl package where NuGet is adding a binding redirect for a binary that is considered part of the framework, this causes the application to crash because the binding redirect refers to assembly version that is not available at runtime.\r\n\r\n@Repro:\r\n\r\n1. Create a new Console Application targeting 4.5\r\n2. Create a new Portable Library targeting .NET Framework 4.5, Silverlight 4, Windows Phone 7.5 and .NET for Windows Store apps\r\n3. Add a reference to the portable library from the Console Application\r\n4. Install the Microsoft.Bcl package (1.0.16-rc) to both projects\r\n\r\n@Expected: No binding redirect for System.Runtime in the .NET Framework 4.5 project because a ___later version___ is part of the target framework (see C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.5\\RedistList\\FrameworkList.xml)\r\n@Actual: Binding redirect\r\n\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Runtime\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-1.5.11.0\" newVersion=\"1.5.11.0\" />\r\n</dependentAssembly>\r\n\r\n\r\nYou can use the IVsFrameworkMultiTargeting to determine if a given assembly version is available as part of a given target framework.\r\nMake sure when you fix this, that you only skip the binding redirect if ___a later or same version___ is available in the framework.  \r\n2013-02-22\r\n\r\n---\r\n\r\nWe'll do this in 2.4 release.  \r\n2013-02-26\r\n\r\n---\r\n\r\nIs IVsFrameworkMultiTargeting.IsReferenceableInTargetFx the method I need to call? What should I pass to pwszAssemblySpec?  \r\n2013-06-08\r\n\r\n---\r\n\r\nIt's the full name of the assembly (mscorlib, Version=[version], PublicKeyToken=[token], Culture=[culture]). It can either contain all the information (key, version, etc), or just the simple name (\"mscorlib\")  \r\n2013-06-10\r\n\r\n---\r\n\r\nSo look like I can only check for the same version of the target framework. Can't check for a later version using this method, because I don't know what future versions will be.  \r\n2013-06-12\r\n\r\n---\r\n\r\nThat's fine. That's exactly the behavior we want. For example, System.Runtime didn't ship in 4.0, but did in 4.5. We still want a binding redirect generated for it in 4.0, but not for 4.5.  \r\n2013-06-13\r\n\r\n---\r\n\r\nI followed the exact same steps above, but there's no binding redirect added to the Console Application. It's only added to the __Portable Library project__. Is that the bug?  \r\n2013-06-13\r\n\r\n---\r\n\r\nThe binding redirects added to the Portable Library project seems to come from the Microsoft.Bcl package itself (from the content folder's app.config.transform file). this looks like a non-bug.\r\n2013-06-13\r\n\r\n  \r\nI'm chasing up the repro with Eric St. John. He walked through the code and figured out where it was broken.\r\n\r\nIt's the not the app.config.tranform, notice how the net45 content is empty, and hence no transforms. We also marked our transforms with a special marker that indicates that we added the redirects . The binding redirects we were seeing were not coming from us.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAre you seeing the binding redirects added to the Console Application or the Portable Library? I don't see binding redirect added to Console Application, only the Portable Library.  \r\n2013-06-13\r\n\r\n---\r\n\r\nYes I'm talking about the ConsoleApplication. The binding redirects in the portable library project are expected, and do not affect runtime behavior (as the app.config is ignored and not copied to the app project), and hence can't cause an application to crash.\r\n\r\nI've found another repro (NuGet has really weird logic around when it decides to add binding redirects so it was hard to find a repro).\r\n\r\nThe repro is instead of using the Microsoft.Bcl package, install the Microsoft.Net.Http, 2.2.3-beta package. Make sure you are targeting __4.5__ from the ConsoleApplication and the exact platforms that I called out above for portable.  \r\n2013-06-13\r\n\r\n---\r\n\r\nAlso, the ConsoleApplication must be referencing the portable project before installing the package.  \r\n2013-06-13\r\n\r\n---\r\n\r\nOK now I can repro  \r\n2013-06-14\r\n\r\n---\r\n\r\nOK, I've got a fix now. It no longer adds the binding redirect for System.Runtime.dll, but still adds one for System.Net.Http.Primitives. I guess it's expected, right? Please confirm.\r\n\r\n```\r\n<assemblyBinding xmlns=\"urn:schemas-microsoft-com:asm.v1\">\r\n<dependentAssembly>\r\n<assemblyIdentity name=\"System.Net.Http.Primitives\" publicKeyToken=\"b03f5f7f11d50a3a\" culture=\"neutral\" />\r\n<bindingRedirect oldVersion=\"0.0.0.0-4.2.3.0\" newVersion=\"4.2.3.0\" />\r\n</dependentAssembly>\r\n</assemblyBinding>\r\n```  \r\n2013-06-14\r\n\r\n---\r\n\r\n\r\nYes that's correct. System.Net.Http.Primitives does not exist in the framework.  \r\n2013-06-14\r\n\r\n---\r\n\r\nFixed in changeset b8d515f6341193b970d2a9d837e580e762d2eb71  \r\n2013-06-19\r\n\r\n---\r\n\r\ni get the same issue with my test project still, runtime being added... if i comment this out the tests run fine... if not i get exceptions thrown from json.net  \r\n2013-08-09\r\n\r\n---\r\n\r\n(or i can change the version up to 4.0.0.0 or something and it works)  \r\n2013-08-09"},{"Id":"10105705706","Type":"IssuesEvent","CreatedAt":"2019-07-29T18:41:10","Actor":"anangaur","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/35","RelatedDescription":"Opened issue \"Machine readable output for dotnet list package\" (#35) at NuGet/Announcements","RelatedBody":"The spec for 'Machine readable output for dotnet list package' is ready for **review**:\r\n\r\n|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Machine readable output for dotnet list package](https://github.com/NuGet/Home/wiki/%5BSpec%5D-Machine-readable-output-for-dotnet-list-package) | https://github.com/NuGet/Home/issues/7752 |"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1164220617710686209","CreatedAt":"2019-08-21T17:00:00+00:00","UserScreenname":"nuget","Text":"⚠ Restoring packages from https://t.co/KVB7werYQh might fail in some regions. We are investigating the issue. Follo… https://t.co/t69YZ9eFo1","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":4,"FavoriteCount":2,"RawContent":null},{"Id":"1162433926578626560","CreatedAt":"2019-08-16T18:40:19+00:00","UserScreenname":"nuget","Text":"Did you check out the new docs landing page? We tried to make it better and more useful. What do you think?… https://t.co/96nBP0rV5l","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":13,"FavoriteCount":3,"RawContent":null},{"Id":"1159229316351197184","CreatedAt":"2019-08-07T22:26:21+00:00","UserScreenname":"nuget","Text":"Using OData to query https://t.co/F9kiKfdOWi repository is being deprecated\n#Announcement \n\nhttps://t.co/dtelctlNOe","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":9,"FavoriteCount":3,"RawContent":null}]}},"RunOn":"2019-09-24T05:30:46.3999938Z","RunDurationInMilliseconds":3881}