{"Data":{"Blog":{"FeedItems":[{"Title":"ASP.NET Core 2.1.0-preview2: Improvements to the Kestrel HTTP server","PublishedOn":"2018-04-13T00:42:44+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Change default transport to Sockets Building off the improvements to the managed sockets implementation in .NET Core we have changed the default transport in Kestrel from libuv to sockets. As a...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/04/12/asp-net-core-2-1-0-preview2-improvements-to-the-kestrel-http-server/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview2 now available","PublishedOn":"2018-04-12T17:24:30+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"Today we&#8217;re very happy to announce that the second preview of the next minor release of ASP.NET Core and .NET Core is now available for you to try out. This second preview includes many...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/04/12/asp-net-core-2-1-0-preview2-now-available/","RawContent":null},{"Title":"Get started building .NET web apps that run in the browser with Blazor","PublishedOn":"2018-03-22T17:00:26+00:00","CommentsCount":42,"FacebookCount":0,"Summary":"Today we released our first public preview of Blazor, a new experimental .NET web framework using C#/Razor and HTML that runs in the browser with WebAssembly. Blazor enables full stack web development...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/22/get-started-building-net-web-apps-in-the-browser-with-blazor/","RawContent":null},{"Title":"ASP.NET Core manageability and Application Insights improvements","PublishedOn":"2018-03-22T14:12:38+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"There are many great investments on the ASP.NET Core 2.1 roadmap. These investments make ASP.NET Core applications easier to write, host, test, and make security and standards compliant. This blog...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/22/asp-net-core-manageability-and-application-insights-improvements/","RawContent":null},{"Title":"Announcing Preview 1 of ASP.NET MVC 5.2.5, Web API 5.2.5, and Web Pages 3.2.5","PublishedOn":"2018-03-19T22:00:27+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today we released Preview 1 of ASP.NET MVC 5.2.5, Web API 5.2.5, and Web Pages 3.2.5 on NuGet. This is a patch release that contains only bug fixes. You can find the full list of bug fixes for this...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/19/announcing-preview-1-of-asp-net-mvc-5-2-5-web-api-5-2-5-and-web-pages-3-2-5/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Functional testing of MVC applications","PublishedOn":"2018-03-05T18:30:28+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"For ASP.NET Core 2.1 we have created a new package, Microsoft.AspNetCore.Mvc.Testing, to help streamline in-memory end-to-end testing of MVC applications using TestServer. This package takes care of...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/05/asp-net-core-2-1-0-preview1-functional-testing-of-mvc-applications/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: GDPR enhancements","PublishedOn":"2018-03-04T19:21:40+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"2018 sees the introduction of the General Data Protection Regulation, an EU framework to allow EU citizens to control, correct and delete their data, no matter where in the word it is held. In ASP.NET...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/04/asp-net-core-2-1-0-preview1-gdpr-enhancements/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Introducing Identity UI as a library","PublishedOn":"2018-03-02T19:00:19+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"ASP.NET Core has historically provided project templates with code for setting up ASP.NET Core Identity, which enables support for identity related features like user registration, login, account...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/02/aspnetcore-2-1-identity-ui/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Razor UI in class libraries","PublishedOn":"2018-03-01T18:00:26+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"One frequently requested scenario that ASP.NET Core 2.1 improves is building UI in reusable class libraries. With ASP.NET Core 2.1 you can package your Razor views and pages (.cshtml files) along with...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/03/01/asp-net-core-2-1-razor-ui-in-class-libraries/","RawContent":null},{"Title":"ASP.NET Core 2.1.0-preview1: Improvements to IIS hosting","PublishedOn":"2018-03-01T01:56:02+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"The ASP.NET Core Module (ANCM) is a global IIS module that has been responsible for proxying requests over from IIS to your backend ASP.NET Core application running Kestrel. Since 2.0 we have been...","Href":"https://blogs.msdn.microsoft.com/webdev/2018/02/28/asp-net-core-2-1-0-preview1-improvements-to-iis-hosting/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7539026115","Type":"IssuesEvent","CreatedAt":"2018-04-16T22:23:03","Actor":"mikeharder","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/3063","RelatedDescription":"Opened issue \"StaticFileMiddlewareTests should use dynamic ports\" (#3063) at aspnet/Home","RelatedBody":"`StaticFileMiddlewareTests` should use dynamic ports rather than hardcoding port `12345`.  For `ServerType.Kestrel`, the app should bind to dynamic port \"0\" and query the app to find the assigned port, since this is 100% reliable.  For `ServerType.WebListener`, the app should use `GetNextPort()` which is less reliable than directly binding to \"0\", but should be more reliable than a hardcoded port.\r\n\r\nhttps://github.com/aspnet/StaticFiles/blob/5d2b1000f19dc3e892611f387b46cd519976a9f0/test/Microsoft.AspNetCore.StaticFiles.FunctionalTests/StaticFileMiddlewareTests.cs#L181"},{"Id":"7539000493","Type":"IssuesEvent","CreatedAt":"2018-04-16T22:16:14","Actor":"mikeharder","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/3062","RelatedDescription":"Opened issue \"AutobahnTester should use dynamic port \"0\" with Kestrel\" (#3062) at aspnet/Home","RelatedBody":"Changes should be made to `AutobahnTester` and/or `SelfHostDeployer` to use dynamic port \"0\" for `ServerType.Kestrel`.  Currently, it uses the less-reliable `GetNextPort()` method.\r\n\r\nThis is somewhat complicated since `AutobahnTester` requires HTTPS, which is currently only supported in `SelfHostDeployer` when `DeploymentParameters.ApplicationBaseUriHint` is set, but dynamic port \"0\" is only used when `ApplicationBaseUriHint` is **not** set.  So, there are two options (in my order of preference):\r\n\r\n1. Add an `Ssl` parameter to `DeploymentParameters`, then change `AutobahnTester` to set `DeploymentParameters.Ssl` instead of `DeploymentParameters.ApplicationBaseUriHint`.  This will use dynamic port \"0\" for ServerType.Kestrel (both HTTP and HTTPS), and `GetNextPort()` for ServerType.WebListener (since dynamic port \"0\" is not supported).\r\n\r\n2. Change `SelfHostDeployer` to use dynamic port \"0\" when `ApplicationBaseUriHint` is set to either \"127.0.0.1:0\" or \"[::1]:0\".  Dynamic port \"0\" is not supported on other hostnames which try to bind both IPv4 and IPv6, like \"localhost\".  Then change `AutobahnTester` to use \"http[s]://127.0.0.1:0\" instead of \"http[s]://localhost:0\".\r\n\r\nRelated: https://github.com/aspnet/Hosting/issues/1296"},{"Id":"7538528710","Type":"IssuesEvent","CreatedAt":"2018-04-16T20:35:29","Actor":"tidyui","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/3061","RelatedDescription":"Opened issue \"Dependency Injection performance\" (#3061) at aspnet/Home","RelatedBody":"Hi there, I'm trying to be open minded and refactor my current Api-structure to a service based structured based on Dependency Injection. When doing this I noticed something when running my tests. \r\n\r\nThe simplest way for me to test while converting was to pass in the `IServiceProvider` into the constructor of the Api and resolve the services there, thus letting the tests running exactly in the same way as they did before. The old constructor looked like this:\r\n\r\n    Archives = new Repositories.ArchiveRepository(this, db);\r\n    Categories = new Services.CategoryService(db, cacheLevel > 2 ? cache : null);\r\n    Media = new Repositories.MediaRepository(this, db, storage, cacheLevel > 2 ? cache : null, imageProcessor);\r\n    Pages = new Repositories.PageRepository(this, db, services, cacheLevel > 2 ? cache : null);\r\n    PageTypes = new Services.PageTypeService(db, cacheLevel > 1 ? cache : null);\r\n    Params = new Services.ParamService(db, cacheLevel > 0 ? cache : null);\r\n    Posts = new Repositories.PostRepository(this, db, services, cacheLevel > 2 ? cache : null);\r\n    PostTypes = new Services.PostTypeService(db, cacheLevel > 1 ? cache : null);\r\n    Sites = new Services.SiteService(db, PageTypes, cacheLevel > 0 ? cache : null);\r\n    Tags = new Services.TagService(db, cacheLevel > 2 ? cache : null);\r\n    Aliases = new Services.AliasService(db, Sites, cacheLevel > 2 ? cache : null);\r\n\r\nHere we have **seven** services being created by calling their constructor. When running the tests, which includes **466** tests creating the Api object I get the following results:\r\n\r\n<img width=\"682\" alt=\"skarmavbild 2018-04-16 kl 22 17 08\" src=\"https://user-images.githubusercontent.com/781266/38833251-4a4f90b2-41c5-11e8-844c-764f4ff3037c.png\">\r\n\r\nI then changed the code to **resolve** the seven services like so (I've removed the unchanged code for clarity):\r\n\r\n    Aliases = services.GetService<IAliasService>();\r\n    Archives = ...\r\n    Categories = services.GetService<ICategoryService>();\r\n    Media = ...\r\n    Pages = ...\r\n    PageTypes = services.GetService<IPageTypeService>();\r\n    Params = services.GetService<IParamService>();\r\n    Posts = ...\r\n    PostTypes = services.GetService<IPostTypeService>();\r\n    Sites = services.GetService<ISiteService>();\r\n    Tags = services.GetService<ITagService>();\r\n\r\nWhen running the exact same tests again I get the following results:\r\n\r\n<img width=\"682\" alt=\"skarmavbild 2018-04-16 kl 22 14 46\" src=\"https://user-images.githubusercontent.com/781266/38833421-c1179dc0-41c5-11e8-8656-00a128da9cfc.png\">\r\n\r\nAs you can see the time to construct the Api these 466 times has increased with **one minute**. Now I love dependency injection as much as the next guy (or girl), but the cost is a bit high in terms of performance.\r\n\r\nPlease note that both versions of the code actually include **adding the services** and **building the service provider** just to make sure that the only difference is the constructor code.\r\n\r\nRegards"},{"Id":"7535091867","Type":"IssuesEvent","CreatedAt":"2018-04-16T10:07:20","Actor":"generik0","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Home/issues/3059","RelatedDescription":"Closed issue \"Has BuildServiceProvider been called?\" (#3059) at aspnet/Home","RelatedBody":"Hi\r\n\r\nRegarding Microsoft.Extensions.DependencyInjection\r\n\r\nI know this might seam like a strange question, but trust me i have a reason.\r\nBut can you tell me if i can determine if\r\n`serviceCollection.BuildServiceProvider()`\r\nhas been called / built?\r\nAnd/Or if anything in the serviceCollection has been resolved/GetRequiredService?\r\n\r\nThanks :-)"},{"Id":"7534683862","Type":"IssuesEvent","CreatedAt":"2018-04-16T08:52:00","Actor":"generik0","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/3059","RelatedDescription":"Opened issue \"Has BuildServiceProvider been called?\" (#3059) at aspnet/Home","RelatedBody":"Hi\r\n\r\nI know this might seam like a strange question, but trust me i have a reason.\r\nBut can you tell me if i can determine if\r\n`serviceCollection.BuildServiceProvider()`\r\nhas been called?\r\nAnd/Or if anything in the serviceCollection has been resolved/GetRequiredService?\r\n\r\nThanks :-)"},{"Id":"7534120226","Type":"IssuesEvent","CreatedAt":"2018-04-16T06:46:38","Actor":"garymacpherson","Repository":"aspnet/Home","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Home/issues/3058","RelatedDescription":"Opened issue \"SetDoNotCacheHeaders overwrites cache headers\" (#3058) at aspnet/Home","RelatedBody":"Following on from https://github.com/aspnet/Home/issues/2414\r\n\r\nI do not believe this issue is considered closed as I have situations that require \"Cache-Control: private, no-cache, no-store, max-age = 0, must-revalidate\"  and it is being overridden by the default CSRF token implementation.\r\n\r\nIs there any desire to update this for 2.1 to allow control over this?"}],"ResultType":"GitHubEvent"},"SignalR":{"Events":[{"Id":"7539957086","Type":"PullRequestEvent","CreatedAt":"2018-04-17T03:32:02","Actor":"anurse","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/SignalR/pull/2046","RelatedDescription":"Closed pull request \"add WinForms sample\" (#2046) at aspnet/SignalR","RelatedBody":"Associated with #2008 \r\n\r\nAdds a Windows Forms Client. I don't believe this will fail to build on macOS/Linux, but if it does the CI will tell us and we can adjust. The client doesn't work right now because of #2008 but it builds\r\n\r\n![image](https://user-images.githubusercontent.com/7574/38838338-8bc810ea-418a-11e8-9c79-f10b6c7621e5.png)\r\n"},{"Id":"7539727979","Type":"IssuesEvent","CreatedAt":"2018-04-17T02:13:09","Actor":"JamesNK","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/SignalR/issues/1988","RelatedDescription":"Closed issue \"Move HubException to Common\" (#1988) at aspnet/SignalR","RelatedBody":"[From API review]\r\n\r\nLet's move `HubException` to common add the weird serialization constructor\r\n\r\n~~and have the server **not** suppress the message when it's thrown by a Hub method, even when `EnableDetailedErrors` is `false`. That way users have a way to send an exception without us suppressing the message.~~"},{"Id":"7539724621","Type":"PullRequestEvent","CreatedAt":"2018-04-17T02:12:03","Actor":"JamesNK","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/SignalR/pull/2052","RelatedDescription":"Merged pull request \"Move HubException and add serialization ctor (#2049)\" (#2052) at aspnet/SignalR","RelatedBody":""},{"Id":"7539723725","Type":"PullRequestEvent","CreatedAt":"2018-04-17T02:11:44","Actor":"JamesNK","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/SignalR/pull/2052","RelatedDescription":"Opened pull request \"Move HubException and add serialization ctor (#2049)\" (#2052) at aspnet/SignalR","RelatedBody":""},{"Id":"7539720914","Type":"PullRequestEvent","CreatedAt":"2018-04-17T02:10:43","Actor":"JamesNK","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/SignalR/pull/2049","RelatedDescription":"Merged pull request \"Move HubException and add serialization ctor\" (#2049) at aspnet/SignalR","RelatedBody":""},{"Id":"7539558177","Type":"IssuesEvent","CreatedAt":"2018-04-17T01:14:28","Actor":"anurse","Repository":"aspnet/SignalR","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/SignalR/issues/2028","RelatedDescription":"Closed issue \"Migration from 1.0.0-alpha2 to Microsoft.AspNetCore.SignalR - 1.0.0-preview2-final broken the execution of the application in IE10\" (#2028) at aspnet/SignalR","RelatedBody":"After migration of application from 1.0.0-alpha2 to Microsoft.AspNetCore.SignalR - 1.0.0-preview2-final broken the execution of the application in IE11 and IE10. And Error in the IE dev tools points to AbortController . As per Mozilla below class is not comparability for IE.   \r\n\r\nclass AbortController {\r\n    constructor() {\r\n        this.isAborted = false;\r\n    }\r\n    abort() {\r\n        if (!this.isAborted) {\r\n            this.isAborted = true;\r\n            if (this.onabort) {\r\n                this.onabort();\r\n            }\r\n        }\r\n    }\r\n    get signal() {\r\n        return this;\r\n    }\r\n    get aborted() {\r\n        return this.isAborted;\r\n    }\r\n}\r\n\r\nSCRIPT1002: Syntax error\r\nFile: vendor.bundle.js, Line: 12, Column: 1\r\n\r\n\r\n### Please include as much of the following as you can in your bug report\r\n\r\n* Versions of Server-Side NuGet Packages:\"Microsoft.AspNetCore.SignalR - 1.0.0-preview2-final\r\n* Versions of Client-Side NuGet/NPM Packages:aspnet/signalr\": \"^1.0.0-preview2-final\r\n* Are you using the C# client or the JavaScript client: JavaScript Client : Angular:5.0.0\r\n* The Server you are using (Kestrel/HttpSysServer/IIS/IIS Express/Azure Web App/etc.): Kestrel and IIS\r\n* The Operating System on the Server (Windows/Linux/macOS):Windows\r\n* The Operating System on the Client (Windows/Linux/macOS):Windows\r\n* The Browser on the client, if using the JavaScript client (IE/Chrome/Edge/Firefox/etc.):IE10\r\n* If possible, please collect Network Traces and attach them (please do not post them inline, use a service like [Gist](https://gist.github.com) to upload them and link them in the issue)\r\n   * For either client you can use a tool such as [Fiddler](https://www.telerik.com/fiddler) for this\r\n   * Many browsers allow you to capture Network Traces from their Dev Tools. See sample instructions for Chrome: https://support.zendesk.com/hc/en-us/articles/204410413-Generating-a-HAR-file-for-troubleshooting\r\n* If possible, please collect logs from the client:\r\n   * Set the `logger` option on your `HubConnection` to `LogLevel.Trace` and find the logs in the Console tab of your Browser Dev Tools\r\n   * Example: `new signalR.HubConnection(url, { logger: signalR.LogLevel.Trace })`\r\n* If possible, please collect logs from the server:\r\n   * When using Kestrel/HttpSysServer, these are available on the Console by default\r\n   * When using IIS/IIS Express, these are available in Visual Studio in the \"ASP.NET Core Web Server\" section of the Output Window\r\n   * See https://docs.microsoft.com/en-us/aspnet/core/fundamentals/logging/?tabs=aspnetcore2x for more information\r\n\r\nWhen in doubt, feel free to file the issue, we're happy to help answer questions. We also suggest using the `asp.net-core-signalr` tag on StackOverflow to ask questions."}],"ResultType":"GitHubEvent"},"Mvc":{"Events":[{"Id":"7539699438","Type":"IssuesEvent","CreatedAt":"2018-04-17T02:03:27","Actor":"rynowak","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7668","RelatedDescription":"Opened issue \"Add existing MVC applications as perf tests\" (#7668) at aspnet/Mvc","RelatedBody":"We should add our two existing (simple) test apps as workloads for the aspnet/benchmarks system\r\n\r\nhttps://github.com/aspnet/Performance/tree/dev/testapp/BasicViews\r\nhttps://github.com/aspnet/Performance/tree/dev/testapp/BasicApi\r\n\r\n\r\n/cc @sebastienros "},{"Id":"7539442918","Type":"IssuesEvent","CreatedAt":"2018-04-17T00:33:01","Actor":"pranavkm","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7667","RelatedDescription":"Opened issue \"PartialTagHelper with null model results uses the incorrect right model type\" (#7667) at aspnet/Mvc","RelatedBody":"Essentially a variant of https://github.com/aspnet/Mvc/issues/7295 but now with the `model` property. \r\n\r\nConsider \r\n\r\n```\r\n@* _StatusMessage.cshtml *@\r\n@model string\r\n<alert>@Model</alert>\r\n```\r\n\r\n```\r\n@* Page.cshtml *@\r\n@model SomeModel\r\n<partial name=\"_StatusMessage\" model=\"SomeModel.Property\" />\r\n```\r\n\r\nThe application fails with\r\n\r\n```\r\nSystem.InvalidOperationException: The model item passed into the ViewDataDictionary is of type 'SomeModel', but this ViewDataDictionary instance requires a model item of type 'System.String'.\r\n   at Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary.EnsureCompatible(Object value)\r\n   at Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary..ctor(ViewDataDictionary source, Object model, Type declaredModelType)\r\n   at lambda_method(Closure , ViewDataDictionary )\r\n   at Microsoft.AspNetCore.Mvc.Razor.Internal.RazorPagePropertyActivator.CreateViewDataDictionary(ViewContext context\r\n```"},{"Id":"7539326551","Type":"PullRequestEvent","CreatedAt":"2018-04-16T23:53:04","Actor":"kichalla","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/pull/7666","RelatedDescription":"Opened pull request \"[Fixes #7658] FileStreamResultExecutor fails to Dispose FileStream\" (#7666) at aspnet/Mvc","RelatedBody":"**Note**: This issue still requires approval"},{"Id":"7539235227","Type":"IssuesEvent","CreatedAt":"2018-04-16T23:23:57","Actor":"pranavkm","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7665","RelatedDescription":"Opened issue \"Initializing PageResult.Page as part of result execution breaks Identity UI\" (#7665) at aspnet/Mvc","RelatedBody":"I guess it's time for past @pranavkm to eat crow for this comment - https://github.com/aspnet/Mvc/pull/7639/files#r181443446. \r\n\r\nIdentity UI attempts to access ViewData that's accessible via `PageHandlerExecutingContext.Page`: https://github.com/aspnet/Identity/blob/dev/src/UI/Areas/Identity/Filters/ExternalLoginsPageFilter.cs#L23. Since this is now null, this results in a null ref. "},{"Id":"7539097649","Type":"IssuesEvent","CreatedAt":"2018-04-16T22:42:14","Actor":"pranavkm","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7655","RelatedDescription":"Closed issue \"Investigate RazorProjectPageRouteModelProvider's change in path\" (#7655) at aspnet/Mvc","RelatedBody":"See https://github.com/aspnet/Mvc/pull/7654/files#diff-a7c12aff511b5b460dee30b88b826852R16. Maybe this is related to https://github.com/aspnet/Mvc/commit/9cea47fa7d83ccb38980edf89ec34ad1f0fae292, but the change went in a couple of days ago and produced successful builds."},{"Id":"7539065888","Type":"IssuesEvent","CreatedAt":"2018-04-16T22:33:46","Actor":"pranavkm","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/issues/7664","RelatedDescription":"Opened issue \"Remove checked in msbuild.binlog from Mvc\" (#7664) at aspnet/Mvc","RelatedBody":"* [  ] Delete the file\r\n* [  ] Delete the file from existence (https://rtyley.github.io/bfg-repo-cleaner)\r\n\r\n"},{"Id":"7538940989","Type":"PullRequestEvent","CreatedAt":"2018-04-16T22:01:44","Actor":"javiercn","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/pull/7663","RelatedDescription":"Opened pull request \"[Fixes #7656] Deps file for netstandard2.0 targeting projects copied by Microsoft.AspNetCore.Mvc.Testing does not play well with Mvc\" (#7663) at aspnet/Mvc","RelatedBody":""},{"Id":"7538863227","Type":"PullRequestEvent","CreatedAt":"2018-04-16T21:43:38","Actor":"javiercn","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/pull/7662","RelatedDescription":"Opened pull request \"[Fixes #7635] Provide a way to configure HTTP Client instances\" (#7662) at aspnet/Mvc","RelatedBody":""},{"Id":"7538853522","Type":"PullRequestEvent","CreatedAt":"2018-04-16T21:41:31","Actor":"javiercn","Repository":"aspnet/Mvc","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Mvc/pull/7661","RelatedDescription":"Opened pull request \"[Fixes #7587] Default to Development environment in tests\" (#7661) at aspnet/Mvc","RelatedBody":""}],"ResultType":"GitHubEvent"},"Identity":{"Events":[{"Id":"7538131267","Type":"PullRequestEvent","CreatedAt":"2018-04-16T19:17:27","Actor":"HaoK","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/pull/1743","RelatedDescription":"Closed pull request \"Switch to abstract user factory\" (#1743) at aspnet/Identity","RelatedBody":"Part of https://github.com/aspnet/Identity/issues/1722"},{"Id":"7536117573","Type":"IssuesEvent","CreatedAt":"2018-04-16T13:28:57","Actor":"vladimirlapacek","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1758","RelatedDescription":"Opened issue \"AuthenticationMethod for 2FA\" (#1758) at aspnet/Identity","RelatedBody":"I wonder if the the `SignInManager.DoTwoFactorSignInAsync` should be adding an explicit `AuthenticationMethod` to the `SignInMAnager.SignInAsync` call to indicate that the login used 2FA.\r\n\r\nCurrently, it is difficult for an application using aspnet Identity to determine, whether 2FA was used during the sign in. The `amr` claim contains only `password`, regardless of whether the login was 1FA or 2FA."},{"Id":"7532200139","Type":"IssuesEvent","CreatedAt":"2018-04-15T14:55:17","Actor":"benrhere","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Identity/issues/1757","RelatedDescription":"Opened issue \"ASP.NET core 2.0: Custom usermanager causing problems with security stamp?\" (#1757) at aspnet/Identity","RelatedBody":"Hi,\r\n\r\nI'm generating custom claims with the following method:\r\n\r\n        protected override async Task<ClaimsIdentity> GenerateClaimsAsync(TUser user)\r\n        {\r\n            var id = await base.GenerateClaimsAsync(user);\r\n            var myOrgs = user.OrganizationMemberships;\r\n            var myAdminOrgs = myOrgs?.Where(om => om.Role == Data.Enums.OrganizationMembershipRole.Admin || om.Role == Data.Enums.OrganizationMembershipRole.SecondaryAdmin).Select(org=>org.Id).ToList();\r\n            var myPlayerOrgs = myOrgs?.Where(om => om.Role == Data.Enums.OrganizationMembershipRole.Athlete || om.Role == Data.Enums.OrganizationMembershipRole.Admin || om.Role == Data.Enums.OrganizationMembershipRole.SecondaryAdmin).Select(org=>org.Id).ToList();\r\n            if (myAdminOrgs!= null && myAdminOrgs.Count > 0)\r\n            {\r\n                var adminOrgStrings = String.Join(\",\", myAdminOrgs);\r\n                id.AddClaim(new Claim(MyDotNetCoreAppClaimTypes.MyDotNetCoreAppOrgAdmin, adminOrgStrings));\r\n            }\r\n            if (myPlayerOrgs != null && myPlayerOrgs.Count > 0)\r\n            {\r\n                var playerOrgStrings = String.Join(\",\", myPlayerOrgs);\r\n                id.AddClaim(new Claim(MyDotNetCoreAppClaimTypes.MyDotNetCoreAppOrgMember, playerOrgStrings));\r\n            }\r\n            return id;\r\n        }\r\n\r\nThe important thing to note is that I'm referencing a table related to the users table, so I need to explicitly load it. To achieve that, I've created a custom UserManager which pulls the additional needed data:\r\n\r\npublic class MyDotNetCoreAppUserManager : UserManager<MyDotNetCoreAppUser>\r\n    {\r\n\r\n        public MyDotNetCoreAppUserManager(IUserStore<MyDotNetCoreAppUser> store, IOptions<IdentityOptions> optionsAccessor,\r\n        IPasswordHasher<MyDotNetCoreAppUser> passwordHasher, IEnumerable<IUserValidator<MyDotNetCoreAppUser>> userValidators,\r\n        IEnumerable<IPasswordValidator<MyDotNetCoreAppUser>> passwordValidators, ILookupNormalizer keyNormalizer,\r\n        IdentityErrorDescriber errors, IServiceProvider services, ILogger<UserManager<MyDotNetCoreAppUser>> logger)\r\n        : base(store,optionsAccessor,passwordHasher,userValidators,passwordValidators,keyNormalizer,errors,services,logger)\r\n        {\r\n        }\r\n\r\n        /// <summary>\r\n        /// Gets all users\r\n        /// </summary>\r\n        /// <param name=\"includes\">Optional parameter for eager loading related entities</param>\r\n        /// <returns>An list of users</returns>\r\n        public async Task<MyDotNetCoreAppUser> GetAll(string userName, params string[] includes)\r\n        {\r\n\r\n            // Get our User DbSet\r\n            var users = base.Users.Where(u=>u.UserName == userName);\r\n\r\n            // For each include, include in the query\r\n            foreach (var include in includes)\r\n                users = users.Include(include);\r\n\r\n            // Return our result\r\n            return await users.FirstOrDefaultAsync();\r\n        }\r\n\r\n\r\n        //This is called on initial login and is necessary to pull additional related user data\r\n        //used in claim generation. But overriding this causes sescurity stamp validation to fail!\r\n        public override Task<MyDotNetCoreAppUser> FindByNameAsync(string userName)\r\n        {\r\n            var fetchTask = GetAll(userName, \"OrganizationMemberships\");\r\n            return fetchTask;\r\n        }\r\n\r\n        //When it's time to validate the security stamp, a call is made into here for some reason.\r\n        //If I comment this override out, it successfully regenerates claims, and\r\n        //regenerates a login cookie (and I stay logged in)\r\n        //but the claims generation misses the needed related data.\r\n        //But if I enable this override, it just logs the user out after calling into here. (Doesn't\r\n        //fire GenerateClaimsAsync)\r\n        public override Task<MyDotNetCoreAppUser> FindByIdAsync(string userId)\r\n        {\r\n            return GetAll(userId, \"OrganizationMemberships\");\r\n        }\r\n    }\r\n\r\nBut please see above comments in this code. The problem is that after 30 minutes, when it's time to revalidate the security stamp and the user refreshes, one of two things happens:\r\n\r\n-If I do NOT override FindByIdAsync, it somewhat works, meaning the user stays logged in and claims are generated - however, the user object passed ot GenerateClaimsAsync does NOT contain the required OrganizationMemberships property populated.\r\n-If I DO override FindByIdAsync, I hit that breakpoint when I refresh the page after the security stamp timeout expires. However, after I continue, I don't hit the ClaimsGeneration method. Instead, I'm logged out and redirected to the login page.\r\n\r\nAlso maybe relevant:\r\n\r\n           services.AddIdentity<MyDotNetCoreAppUser, MyDotNetCoreAppRole>(opt =>\r\n            {\r\n                opt.Password.RequireNonAlphanumeric = false;\r\n                opt.Password.RequireUppercase = false;\r\n            })\r\n                .AddEntityFrameworkStores<MyDotNetCoreAppDbContext>()\r\n                .AddUserManager<MyDotNetCoreAppUserManager>()\r\n                .AddSignInManager<MyDotNetCoreAppSignInManager>()\r\n                .AddDefaultTokenProviders();\r\n\r\n            services.AddAuthorization(opt =>\r\n            {\r\n                opt.AddPolicy(\"OrgAdmin\", policy => policy.RequireClaim(MyDotNetCoreAppClaimTypes.MyDotNetCoreAppOrgAdmin));\r\n                opt.AddPolicy(\"OrgMember\", policy => policy.RequireClaim(MyDotNetCoreAppClaimTypes.MyDotNetCoreAppOrgMember));\r\n            });\r\n            services.Configure<SecurityStampValidatorOptions>(options =>\r\n            {\r\n                // enables immediate logout, after updating the user's stat.\r\n                options.ValidationInterval = TimeSpan.FromSeconds(6);\r\n            });\r\n\r\n(I set the validation interval to 6 seconds to be able to debug the security stamp validation more easily.)\r\n\r\nAppreciative of any thoughts on this. Thanks..."},{"Id":"7529003088","Type":"IssuesEvent","CreatedAt":"2018-04-13T23:47:06","Actor":"jbagga","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/issues/1736","RelatedDescription":"Closed issue \"/Identity/Account/ResetPassword page is not reachable when auth required globally\" (#1736) at aspnet/Identity","RelatedBody":"Looks like at least one page was missed when fixing #1617 \r\n## Repro steps\r\n1. `dotnet new mvc --name netcoreIndividualAuth --auth Individual --use-local-db` (doubt `--use-local-db` is mandatory)\r\n2. `cd netcoreIndividualAuth`\r\n3. Open project in Visual Studio\r\n4. Edit `Startup.ConfigureServices(...)` to require an authenticated user globally i.e. change `services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_1);` to\r\n  ``` c#\r\n  services\r\n      .AddMvc(configuration =>\r\n      {\r\n          var policy = new AuthorizationPolicyBuilder()\r\n              .RequireAuthenticatedUser()\r\n              .Build();\r\n          configuration.Filters.Add(new AuthorizeFilter(policy));\r\n      })\r\n      .SetCompatibilityVersion(CompatibilityVersion.Version_2_1);\r\n  ```\r\n\r\n5. Start app in the debugger\r\n6. Ensure debug option \"Enable Just My Code\" is disabled and \"Microsoft Symbol Servers\" are enabled under \"Symbols\"\r\n7. Set C# function breakpoint at `Microsoft.AspNetCore.Identity.UI.Services.EmailSender.SendEmailAsync` \r\n8. In browser, register a new user\r\n9. In debugger, copy the URL in the `htmlMessage` parameter\r\n10. In browser, head to the copied URL but change `&amp;code` to `&code`\r\n11. In browser, log out, click on \"Forgot your password\", then enter the new user's email and click Submit\r\n12. In debugger, copy the URL in the `htmlMessage` parameter\r\n13. In browser, head to the copied URL\r\n\r\n### Expected\r\n- Land on /Identity/Account/ForgotPasswordConfirmation page after step 11\r\n- Land on /Identity/Account/ResetPassword page after step 13\r\n### Actual\r\nRedirected to the login page again in both cases i.e. both page models lack `[AllowAnonymous]` though the lack in /Identity/Account/ResetPassword is more troublesome.\r\n\r\n----\r\nThis is a small part of #1617 which does not work end-to-end. Found while verifying (aspnet/Release#263) with the 2.1.300-preview2-008523 SDK and Microsoft.AspNetCore.Identity.UI 2.1.0-preview2-30552."},{"Id":"7529000560","Type":"PullRequestEvent","CreatedAt":"2018-04-13T23:46:01","Actor":"jbagga","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/Identity/pull/1744","RelatedDescription":"Merged pull request \"Add AllowAnonymous for resetting password navigation flow\" (#1744) at aspnet/Identity","RelatedBody":"Addresses #1736 and aspnet/templating#448"},{"Id":"7528865077","Type":"PullRequestEvent","CreatedAt":"2018-04-13T22:50:11","Actor":"javiercn","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/pull/1749","RelatedDescription":"Closed pull request \"[Fixes #1742, #1722, #1706, #1725] Fixing multiple issues\" (#1749) at aspnet/Identity","RelatedBody":"* Add a test to validate that the Identity endpoints are not available when the default UI is not plugged in.\r\n* Remove IUserFactory<TUser> and UserFactory<TUser>\r\n* Update the testing infrastructure to newer bits from MVC.\r\n* Parameterize the testing infrastructure to support testing different user types.\r\n* Make EmailSender internal."},{"Id":"7528861679","Type":"IssuesEvent","CreatedAt":"2018-04-13T22:48:50","Actor":"javiercn","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/issues/1688","RelatedDescription":"Closed issue \"Identity mismatch between Email and Username\" (#1688) at aspnet/Identity","RelatedBody":"When using Identity it generates views and methods that confuse Email and Username.\r\n\r\nThe register view and methods ask for an Email and Password, assigns Username the value of Email.\r\n\r\nThe login view asks for Email and Password, but uses the email as a Username, via call to _signInManager.PasswordSignInAsync(...) which takes a Username and Password.\r\n\r\nThe Account/Manage view allows you to change your Email.  If I change my email I can no longer login.  If I use my previous Email I can, the Account/Manage views shows my correctly changed email and a readonly Username with my original email used at signup.\r\n\r\nThis is with a new unmodified project generated via new project in visual studio selecting individual user accounts."},{"Id":"7528860982","Type":"IssuesEvent","CreatedAt":"2018-04-13T22:48:34","Actor":"javiercn","Repository":"aspnet/Identity","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Identity/issues/1725","RelatedDescription":"Closed issue \"Add functional tests for different user types in DefaultUI\" (#1725) at aspnet/Identity","RelatedBody":"Some user types to think of:\r\n- `class IdentityUser`\r\n- `class TestUser : IdentityUser`\r\n- `class TestUser : IdentityUser<Guid>`\r\n- `class TestUser`"}],"ResultType":"GitHubEvent"},"Kestrel":{"Events":[{"Id":"7539485173","Type":"IssuesEvent","CreatedAt":"2018-04-17T00:48:33","Actor":"chuanboz","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2498","RelatedDescription":"Opened issue \"Provides extensions method for IServiceCollection similar to WebHostBuilderKestrelExtensions to better support generic host\" (#2498) at aspnet/KestrelHttpServer","RelatedBody":"currently there is a WebHostBuilderKestrelExtensions that provides UseKestrel method to inject default implementation of Kestrel.\r\n\r\nfollowed \r\nhttps://github.com/aspnet/Hosting/issues/1369\r\nand https://github.com/aspnet/Hosting/tree/dev/samples/GenericWebHost\r\n\r\nto use general web host, which does not use IWebHostBuilder anymore and so require extensions method to inject default Kestrel implementation.\r\n\r\nsomething like below\r\n\r\n`\r\npublic static IServiceCollection UseKestrel(this IServiceCollection services)\r\n\r\n        {\r\n                // Don't override an already-configured transport\r\n                services.TryAddSingleton<ITransportFactory, SocketTransportFactory>();\r\n                services.AddTransient<IConfigureOptions<KestrelServerOptions>, KestrelServerOptionsSetup>();\r\n                services.AddSingleton<IServer, KestrelServer>();\r\n            return services;\r\n        }\r\n`\r\n"},{"Id":"7539049384","Type":"PullRequestEvent","CreatedAt":"2018-04-16T22:29:19","Actor":"Tratcher","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2497","RelatedDescription":"Opened pull request \"Clean up flaky MaxRequestBufferSize tests\" (#2497) at aspnet/KestrelHttpServer","RelatedBody":"I was debugging #2225 and had a reliable repro before John's logging changes. After his changes I could only cause OOMs. This change addresses the OOMs and the test now reliably passes.\r\n\r\nI also removed the data corruption validation, there's a seperate test for that. These tests are much faster without it."},{"Id":"7538011756","Type":"IssuesEvent","CreatedAt":"2018-04-16T18:54:00","Actor":"halter73","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/issues/2353","RelatedDescription":"Closed issue \"Improve error message for drain timeout instead of \"BadHttpRequestException - Request timed out\"  With Large Requests\" (#2353) at aspnet/KestrelHttpServer","RelatedBody":"We are encountering a problem with Kestrel timeouts when making large requests to a .NET Core API. The requests are being redirected (for authentication purposes) but redirecting large requests seems to cause Kestrel to choke. It's fine with smaller requests, but anything over a couple of hundred MB seems to trigger the timeout. I think this relates to the message body draining functionality. Apparently it can sometimes abandon draining the request body and send a keep-alive response without an exception and sometimes it throws due to timeout. \r\n\r\nThe exception looks like this:\r\n\r\n<pre>\r\n2018-02-28 10:12:58.8406 [9][KestrelTrace.ConnectionStart] DEBUG: Connection id \"0HLBUQL57F3CA\" started. \r\n2018-02-28 10:12:58.8506 [19][HostingApplicationDiagnostics.LogRequestStarting] INFO: Request starting HTTP/1.1 POST http\\://localhost:5000/api/values/upload  873690784 \r\n2018-02-28 10:12:58.8506 [19][TreeRouterLoggerExtensions.MatchedRoute] DEBUG: Request successfully matched the route with name '(null)' and template 'api/Values/upload'. \r\n2018-02-28 10:12:58.8836 [19][MvcCoreLoggerExtensions.ExecutingAction] DEBUG: Executing action WebApplication1.Controllers.ValuesController.Post (WebApplication1) \r\n2018-02-28 10:12:58.9036 [19][MvcCoreLoggerExtensions.ActionMethodExecuting] INFO: Executing action method WebApplication1.Controllers.ValuesController.Post (WebApplication1) with arguments ((null)) - ModelState is Valid \r\n2018-02-28 10:12:58.9346 [19][MvcCoreLoggerExtensions.ActionMethodExecuted] DEBUG: Executed action method WebApplication1.Controllers.ValuesController.Post (WebApplication1), returned result Microsoft.AspNetCore.Mvc.EmptyResult. \r\n2018-02-28 10:12:58.9656 [19][MvcCoreLoggerExtensions.ExecutedAction] INFO: Executed action WebApplication1.Controllers.ValuesController.Post (WebApplication1) in 62.7726ms \r\n2018-02-28 10:12:58.9816 [19][KestrelTrace.RequestBodyStart] DEBUG: Connection id \"0HLBUQL57F3CA\", Request id \"0HLBUQL57F3CA:00000001\": started reading request body. \r\n2018-02-28 10:13:05.3562 [17][KestrelTrace.ConnectionBadRequest] INFO: Connection id \"0HLBUQL57F3CA\" bad request data: \"Request timed out.\" Microsoft.AspNetCore.Server.Kestrel.Core.BadHttpRequestException Request timed out.\r\n2018-02-28 10:13:05.3562 [5][KestrelTrace.RequestBodyDone] DEBUG: Connection id \"0HLBUQL57F3CA\", Request id \"0HLBUQL57F3CA:00000001\": done reading request body. \r\n2018-02-28 10:13:05.3562 [20][KestrelTrace.ConnectionBadRequest] INFO: Connection id \"0HLBUQL57F3CA\" bad request data: \"Request timed out.\" Microsoft.AspNetCore.Server.Kestrel.Core.BadHttpRequestException Request timed out. Void ThrowFailed()    at Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.PipeCompletion.ThrowFailed()\r\n   at Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.Pipe.GetResult(ReadResult& result)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.Pipe.Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.IReadableBufferAwaiter.GetResult()\r\n   at Microsoft.AspNetCore.Server.Kestrel.Internal.System.IO.Pipelines.ReadableBufferAwaitable.GetResult()\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.MessageBody.<ConsumeAsync>d__24.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.Frame`1.<ProcessRequestsAsync>d__2.MoveNext()\r\n2018-02-28 10:13:05.3872 [9][LibuvTrace.ConnectionPause] DEBUG: Connection id \"0HLBUQL57F3CA\" paused. \r\n2018-02-28 10:13:05.3872 [20][HostingApplicationDiagnostics.LogRequestFinished] INFO: Request finished in 6539.707ms 408  \r\n2018-02-28 10:13:05.3872 [20][KestrelTrace.ConnectionDisconnect] DEBUG: Connection id \"0HLBUQL57F3CA\" disconnecting. \r\n2018-02-28 10:13:05.4092 [17][KestrelTrace.ConnectionStop] DEBUG: Connection id \"0HLBUQL57F3CA\" stopped. \r\n2018-02-28 10:13:05.4092 [9][LibuvTrace.ConnectionWriteFin] DEBUG: Connection id \"0HLBUQL57F3CA\" sending FIN. \r\n</pre>\r\n\r\nThis seems to happen much more often when running behind IIS, though I can also get it to happen when running with Kestrel directly.\r\n\r\nFiddler seems to affect it. Sometimes it prevents the issue occurring, which is perhaps not surprising as Fiddler is buffering the request.\r\n\r\nI've created [an example solution](https://github.com/andrewbull99/RequestTimeOutRepro) which seems to trigger the issue quite reliably when running behind IIS. I've been using files of around 800MB. \r\n\r\nOur actual code is using a multi-part request which seems to trigger the issue even when running against Kestrel directly. For simplicity I've not implemented multi-part requests in the repro solution. I can do if you think it would be useful.\r\n\r\nWe're running this on Windows and using Core 2.05. Updating to 2.1.0-preview1-final does not seem to help."},{"Id":"7538007293","Type":"PullRequestEvent","CreatedAt":"2018-04-16T18:53:11","Actor":"halter73","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2480","RelatedDescription":"Merged pull request \"Improve logging of request drain timeout\" (#2480) at aspnet/KestrelHttpServer","RelatedBody":"#2353"},{"Id":"7537908226","Type":"PullRequestEvent","CreatedAt":"2018-04-16T18:34:08","Actor":"anurse","Repository":"aspnet/KestrelHttpServer","Organization":"aspnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/aspnet/KestrelHttpServer/pull/2496","RelatedDescription":"Merged pull request \"make IConnectionInherentKeepAliveFeature a boolean feature\" (#2496) at aspnet/KestrelHttpServer","RelatedBody":"Not used in Kestrel, but it's used by SignalR. \r\n\r\nWe don't ever use the `TimeSpan`, and instead use the presence of the feature. This means we have to actually create a class implementing this and put it in the feature collection. We want to change to implement this interface directly on the ConnectionContext. See https://github.com/aspnet/SignalR/issues/1976\r\n\r\nSignalR will treat the absence of this feature as equivalent to `HasInherentKeepAlive` being `false`."}],"ResultType":"GitHubEvent"},"Razor":{"Events":[{"Id":"7539471932","Type":"PullRequestEvent","CreatedAt":"2018-04-17T00:43:37","Actor":"ajaybhargavb","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/pull/2285","RelatedDescription":"Opened pull request \"Write process and pipe information to a pid file\" (#2285) at aspnet/Razor","RelatedBody":"#2248 \r\n\r\n"},{"Id":"7539005697","Type":"IssuesEvent","CreatedAt":"2018-04-16T22:17:37","Actor":"rynowak","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/issues/2284","RelatedDescription":"Opened issue \"Improve the experience for generated delarations\" (#2284) at aspnet/Razor","RelatedBody":"Today Razor doesn't have a good way to map lines for declarations (model type, class declaration, `@inject`'ed properties).\r\n\r\nThe effect of this is that errors in declarations (such as missing a using) won't map to a line in the original source code. Clicking on the error in the error list won't take you to the source file.\r\n\r\nWe have a pretty good experience and coverage for errors in expressions and code blocks, but we haven't needed to solve this problem before for declarations.\r\n\r\n\r\n----\r\n\r\nWe need to come up with a strategy for improving the test coverage of this area first, so we can use our existing integration tests, and know which cases where the user typed code that doesn't get line-mapped. All of these are potential errors that don't take you to the source file."},{"Id":"7538811832","Type":"IssuesEvent","CreatedAt":"2018-04-16T21:32:34","Actor":"mqudsi","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/issues/2283","RelatedDescription":"Opened issue \"Inherited razor pages model causes null reference exception when base layout is rendered\" (#2283) at aspnet/Razor","RelatedBody":"_(Tested under .NET Core 2.1 `2.1.300-preview1-008174` with `AspNetCore.All` version `2.1.0-preview1-final`)_\r\n\r\nExplicitly specifying the layout for a razor page \"A\" to point to another model-backed razor page \"B\" where `A : B : PageModel` results in a null reference exception when rendering the cshtml for razor page \"B\".\r\n\r\nTo illustrate with an example, given two razor pages `A.cshtml/A.cshtml.cs` and `B.cshtml/B.cshtml.cs` with the following contents:\r\n\r\nA.cshtml:\r\n```cshtml\r\n@page\r\n@model Foo.Pages.AModel\r\n@{\r\n    Layout = \"B\"\r\n}\r\n```\r\n\r\nA.cshtml.cs:\r\n```csharp\r\nnamespace Foo.Pages\r\n{\r\n    public class AModel : BModel\r\n    {\r\n    }\r\n}\r\n```\r\n\r\nB.cshtml:\r\n```cshtml\r\n@page\r\n@model Foo.Pages.BModel\r\n\r\n@Model.Bar\r\n```\r\n\r\nB.cshtml.cs:\r\n```csharp\r\nusing System;\r\nusing Microsoft.AspNetCore.Mvc.RazorPages;\r\n\r\nnamespace Foo.Pages\r\n{\r\n    public class BModel : PageModel\r\n    {\r\n        public string Bar { get; set; } = \"Baz\";\r\n    }\r\n}\r\n```\r\n\r\nWhen accessing `/A`, a `NullReferenceException` is thrown as `Model` is undefined. However, the constructor for `BModel` _has_ been invoked, followed by the constructor for `AModel`.\r\n\r\nAdditionally, the model _is_ passed in correctly as removing the inheritance from `AModel` causes a runtime exception to the effect of \"expecting model of class BModel, found model of class AModel.\"\r\n\r\n(This is obviously a highly contrived and stripped down example)"},{"Id":"7538761342","Type":"IssuesEvent","CreatedAt":"2018-04-16T21:22:17","Actor":"rynowak","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Razor/issues/2282","RelatedDescription":"Opened issue \"Update Razor runtime package references to Microsoft.CodeAnalysis and Microsoft.CodeAnalysis.CSharp\" (#2282) at aspnet/Razor","RelatedBody":"Right now we're referencing 2.6.1, which means that runtime compilation won't work at all with C# 7.2 or 7.3 unless the user takes steps to get newer packages."},{"Id":"7538635506","Type":"IssuesEvent","CreatedAt":"2018-04-16T20:56:22","Actor":"pranavkm","Repository":"aspnet/Razor","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Razor/issues/2281","RelatedDescription":"Closed issue \"View failing to compile with missing referece\" (#2281) at aspnet/Razor","RelatedBody":"Since this commit exactly, as the build before was working fine.\r\nhttps://github.com/aspnet/Razor/commit/95835d6c37c108ae0788f49ccc0d17f3ba20586e\r\n\r\n```\r\n[03:19:28.096]       Connection id \"0HLD2DA5SCIB4\", Request id \"0HLD2DA5SCIB4:000000D5\": An unhandled exception was thrown by the application.\r\n[03:19:28.096] System.InvalidOperationException: Cannot find reference assembly 'Dapper.dll' file for package Dapper.Reference\r\n[03:19:28.096]    at Microsoft.Extensions.DependencyModel.Resolution.ReferenceAssemblyPathResolver.TryResolveAssemblyPaths(CompilationLibrary library, List`1 assemblies)\r\n[03:19:28.096]    at Microsoft.Extensions.DependencyModel.Resolution.CompositeCompilationAssemblyResolver.TryResolveAssemblyPaths(CompilationLibrary library, List`1 assemblies)\r\n[03:19:28.096]    at Microsoft.Extensions.DependencyModel.CompilationLibrary.ResolveReferencePaths(ICompilationAssemblyResolver resolver, List`1 assemblies)\r\n[03:19:28.096]    at System.Linq.Enumerable.SelectManySingleSelectorIterator`2.MoveNext()\r\n[03:19:28.096]    at Microsoft.AspNetCore.Mvc.Razor.Compilation.MetadataReferenceFeatureProvider.PopulateFeature(IEnumerable`1 parts, MetadataReferenceFeature feature)\r\n[03:19:28.096]    at Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartManager.PopulateFeature[TFeature](TFeature feature)\r\n[03:19:28.096]    at Microsoft.AspNetCore.Mvc.Razor.Internal.DefaultRazorReferenceManager.GetCompilationReferences()\r\n[03:19:28.096]    at System.Threading.LazyInitializer.EnsureInitializedCore[T](T& target, Boolean& initialized, Object& syncLock, Func`1 valueFactory)\r\n[03:19:28.096]    at Microsoft.AspNetCore.Mvc.Razor.Internal.DefaultRazorReferenceManager.get_CompilationReferences()\r\n[03:19:28.096]    at Microsoft.CodeAnalysis.Razor.CompilationTagHelperFeature.GetDescriptors()\r\n[03:19:28.096]    at Microsoft.AspNetCore.Razor.Language.DefaultRazorTagHelperBinderPhase.ExecuteCore(RazorCodeDocument codeDocument)\r\n[03:19:28.096]    at Microsoft.AspNetCore.Razor.Language.DefaultRazorEngine.Process(RazorCodeDocument document)\r\n[03:19:28.096]    at Microsoft.AspNetCore.Razor.Language.RazorProjectEngine.Process(RazorProjectItem projectItem)\r\n[03:19:28.121]    at Microsoft.AspNetCore.Mvc.Razor.Internal.RazorViewCompiler.CompileAndEmit(String relativePath)\r\n[03:19:28.121]    at Microsoft.AspNetCore.Mvc.Razor.Internal.RazorViewCompiler.OnCacheMiss(String normalizedPath)\r\n[03:19:28.121] --- End of stack trace from previous location where exception was thrown ---\r\n[03:19:28.121]    at Microsoft.AspNetCore.Mvc.Razor.Internal.DefaultRazorPageFactoryProvider.CreateFactory(String relativePath)\r\n[03:19:28.121]    at Microsoft.AspNetCore.Mvc.Razor.RazorViewEngine.CreateCacheResult(HashSet`1 expirationTokens, String relativePath, Boolean isMainPage)\r\n[03:19:28.121]    at Microsoft.AspNetCore.Mvc.Razor.RazorViewEngine.OnCacheMiss(ViewLocationExpanderContext expanderContext, ViewLocationCacheKey cacheKey)\r\n[03:19:28.121]    at Microsoft.AspNetCore.Mvc.Razor.RazorViewEngine.LocatePageFromViewLocations(ActionContext actionContext, String pageName, Boolean isMainPage)\r\n[03:19:28.121]    at Microsoft.AspNetCore.Mvc.Razor.RazorViewEngine.FindView(ActionContext context, String viewName, Boolean isMainPage)\r\n[03:19:28.122]    at Microsoft.AspNetCore.Mvc.ViewEngines.CompositeViewEngine.FindView(ActionContext context, String viewName, Boolean isMainPage)\r\n[03:19:28.122]    at Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor.FindView(ActionContext actionContext, ViewResult viewResult)\r\n[03:19:28.122]    at Microsoft.AspNetCore.Mvc.ViewFeatures.ViewResultExecutor.ExecuteAsync(ActionContext context, ViewResult result)\r\n[03:19:28.122]    at Microsoft.AspNetCore.Mvc.ViewResult.ExecuteResultAsync(ActionContext context)\r\n[03:19:28.122]    at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeResultAsync(IActionResult result)\r\n[03:19:28.122]    at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeNextResultFilterAsync[TFilter,TFilterAsync]()\r\n[03:19:28.122]    at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResultExecutedContext context)\r\n[03:19:28.122]    at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State& next, Scope& scope, Object& state, Boolean& isCompleted)\r\n[03:19:28.122]    at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeResultFilters()\r\n[03:19:28.122]    at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeNextResourceFilter()\r\n[03:19:28.122]    at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Rethrow(ResourceExecutedContext context)\r\n[03:19:28.122]    at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\r\n[03:19:28.122]    at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeFilterPipelineAsync()\r\n[03:19:28.122]    at Microsoft.AspNetCore.Mvc.Internal.ResourceInvoker.InvokeAsync()\r\n[03:19:28.122]    at Microsoft.AspNetCore.Builder.RouterMiddleware.Invoke(HttpContext httpContext)\r\n[03:19:28.122]    at Microsoft.AspNetCore.Server.Kestrel.Core.Internal.Http.HttpProtocol.ProcessRequests[TContext](IHttpApplication`1 application)\r\n[03:19:28.122] fail: Microsoft.AspNetCore.Server.Kestrel[13]\r\n```\r\n\r\nWith this project https://github.com/aspnet/benchmarks/blob/dev/src/Benchmarks/Benchmarks.csproj with `TargetFramework == \"netcoreapp2.1\"`"}],"ResultType":"GitHubEvent"},"Templates":{"Events":[],"ResultType":"GitHubEvent"},"Tooling":{"Events":[{"Id":"7439234583","Type":"IssuesEvent","CreatedAt":"2018-03-27T05:23:09","Actor":"barrytang","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1069","RelatedDescription":"Closed issue \"EntityFramework migrations not available to be applied during publish\" (#1069) at aspnet/Tooling","RelatedBody":"Workaround does not work for me. Apply migration missing in any case. after rebuilt, reload, restart etc"},{"Id":"7438189808","Type":"IssuesEvent","CreatedAt":"2018-03-26T23:00:08","Actor":"dvdobrovolskiy","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1069","RelatedDescription":"Opened issue \"EntityFramework migrations not available to be applied during publish\" (#1069) at aspnet/Tooling","RelatedBody":"Workaround does not work for me. Apply migration missing in any case. after rebuilt, reload, restart etc"},{"Id":"7416019717","Type":"IssuesEvent","CreatedAt":"2018-03-21T22:57:29","Actor":"snebjorn","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/823","RelatedDescription":"Closed issue \"Make tooling support splitting asp.net and bootstrapping in different projects (onion architecture)\" (#823) at aspnet/Tooling","RelatedBody":"I'd like to see better tooling support for a more onion architecture like solution structure.\n\nFor instance\n- Solution\n  - Core (business logic, domain model, etc)\n  - Infrastructure.EntityFramework (DAL)\n  - Presentation.ASPNET (MVC or WebApi)\n  - Bootstrapper (Program.cs and Startup.cs)\n\nSo basically I just moved Program.cs and Startup.cs to another project. This is important because according to the onion architecture Presentation.ASPNET should not have references to Entity Framework.\n\nIf I do this today I loose the \"IIS Express\" run button and I cannot publish via wed deploy in the way I'm used to. Plus a ton of other issues.\n\nWould be sweet if there was better support for this setup :)\n"},{"Id":"7381313128","Type":"IssuesEvent","CreatedAt":"2018-03-14T22:19:23","Actor":"AngelosP","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/240","RelatedDescription":"Closed issue \"Support debugging of JS executed with EdgeJS in VS\" (#240) at aspnet/Tooling","RelatedBody":"We would like to do the server side HTML rendering with ReactJS in our ASP.NET application. This works with EdgeJS, but there is currently no way to debug the JS code in VS. \n\nIt would be nice if this would work and we wouldn't need node-inspector for this.\n\nhttps://github.com/tjanczuk/edge/issues/316\n"},{"Id":"7376247861","Type":"IssuesEvent","CreatedAt":"2018-03-14T05:33:19","Actor":"barrytang","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1068","RelatedDescription":"Closed issue \"Switch between Razor Page View and Code Behind\" (#1068) at aspnet/Tooling","RelatedBody":"In the old web forms you were able to quickly switch between the ASPX file and the code behind using F7/Shift F7 or going View->Code or View->Designer. It would be useful if this was possible with Razor Pages in aspnet core projects?\r\n"},{"Id":"7372052889","Type":"IssuesEvent","CreatedAt":"2018-03-13T13:46:08","Actor":"TheConservativeCoder","Repository":"aspnet/Tooling","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Tooling/issues/1068","RelatedDescription":"Opened issue \"Switch between Razor Page View and Code Behind\" (#1068) at aspnet/Tooling","RelatedBody":"In the old web forms you were able to quickly switch between the ASPX file and the code behind using F7/Shift F7 or going View->Code or View->Designer. It would be useful if this was possible with Razor Pages in aspnet core projects?\r\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7390961156","Type":"IssuesEvent","CreatedAt":"2018-03-16T14:09:54","Actor":"natemcmaster","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/aspnet/Announcements/issues/297","RelatedDescription":"Closed issue \"Model binding accesses read-only properties in post-back\" (#297) at aspnet/Announcements","RelatedBody":"I have a simple edit model, which contains a few computed/read-only properties. When posting to a controller method, the model validation engine accesses these properties, causing an exception.\r\n\r\nHowever, it does not make sense to access or attempt to validate a read-only property.\r\n\r\nAdditionally, all properties are marked with [BindNever], which seems to have no effect on this behavior.\r\n\r\nThe controller method takes a single parameter (the edit model) decorated with [FromForm].\r\n\r\nUsing 2.1.0-preview2-30355."},{"Id":"7390872316","Type":"IssuesEvent","CreatedAt":"2018-03-16T13:54:05","Actor":"mnmr","Repository":"aspnet/Announcements","Organization":"aspnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/aspnet/Announcements/issues/297","RelatedDescription":"Opened issue \"Model binding accesses read-only properties in post-back\" (#297) at aspnet/Announcements","RelatedBody":"I have a simple edit model, which contains a few computed/read-only properties. When posting to a controller method, the model validation engine accesses these properties, causing an exception.\r\n\r\nHowever, it does not make sense to access or attempt to validate a read-only property.\r\n\r\nAdditionally, all properties are marked with [BindNever], which seems to have no effect on this behavior.\r\n\r\nThe controller method takes a single parameter (the edit model) decorated with [FromForm].\r\n\r\nUsing 2.1.0-preview2-30355."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"983838325457829890","CreatedAt":"2018-04-10T22:45:10+00:00","UserScreenname":"aspnet","Text":"We're live on the #ASPNET Community Standup! Join us! https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":20,"FavoriteCount":6,"RawContent":null},{"Id":"983802600398049285","CreatedAt":"2018-04-10T20:23:12+00:00","UserScreenname":"aspnet","Text":"Join us for the weekly #ASPNET Community Standup today at 3:45 PM Pacific / 23:45 GMT at https://t.co/4Ioo9jNSN2 https://t.co/441EI8rRQL","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":12,"FavoriteCount":10,"RawContent":null},{"Id":"981890668095332353","CreatedAt":"2018-04-05T13:45:52+00:00","UserScreenname":"aspnet","Text":"Tune in to @csharpfritz live stream today to learn more about getting started with #ASP.NET Core. https://t.co/mkwxUOObrd","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":15,"FavoriteCount":7,"RawContent":null},{"Id":"981214732198674433","CreatedAt":"2018-04-03T16:59:56+00:00","UserScreenname":"aspnet","Text":"Starting now!\n\n#ASPNET Community Standup\n\nBlazor Update with @danroth27 and @stevensanderson… https://t.co/Tukk2JSsvC","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":43,"FavoriteCount":16,"RawContent":null},{"Id":"981205689891803136","CreatedAt":"2018-04-03T16:24:01+00:00","UserScreenname":"aspnet","Text":"Join our @csharpfritz for some #ASP.NET Core coding today, and ask questions during his live coding stream at 12:30… https://t.co/PCKhYbjIMP","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":17,"FavoriteCount":9,"RawContent":null},{"Id":"980945681794809856","CreatedAt":"2018-04-02T23:10:50+00:00","UserScreenname":"aspnet","Text":"Tuesday at 10 Pacific / 18 GMT - #ASPNET Community Standup\n\nBlazor Update with @danroth27 and @stevensanderson… https://t.co/lCnzHFb8x9","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":99,"FavoriteCount":56,"RawContent":null},{"Id":"979863409561812993","CreatedAt":"2018-03-30T23:30:16+00:00","UserScreenname":"aspnet","Text":"We just released some minor bug fixes to jquery-ajax-unobtrusive and jquery-validation-unobtrusive:… https://t.co/9P5vskn1i8","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":26,"FavoriteCount":13,"RawContent":null},{"Id":"978766397814710272","CreatedAt":"2018-03-27T22:51:08+00:00","UserScreenname":"aspnet","Text":"We're live on the #ASPNET Community Standup! Join us! https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":12,"FavoriteCount":7,"RawContent":null},{"Id":"978605317293576193","CreatedAt":"2018-03-27T12:11:03+00:00","UserScreenname":"aspnet","Text":"This will be a fun show that you won't want to miss if you're starting to lean #ASP.NET Core.  Jeff and Shayne are… https://t.co/MdzhQjXGY3","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":47,"FavoriteCount":12,"RawContent":null},{"Id":"978387927041323008","CreatedAt":"2018-03-26T21:47:14+00:00","UserScreenname":"aspnet","Text":"Join us for the weekly #ASPNET Community Standup this Tuesday at 3:45 PM Pacific / 23:45 GMT at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":9,"FavoriteCount":10,"RawContent":null},{"Id":"976910278083432449","CreatedAt":"2018-03-22T19:55:35+00:00","UserScreenname":"aspnet","Text":"Get started building .NET web apps in the browser with Blazor https://t.co/NLDaIe6hpY","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":159,"FavoriteCount":100,"RawContent":null},{"Id":"976141395114082304","CreatedAt":"2018-03-20T17:00:19+00:00","UserScreenname":"aspnet","Text":"Starting now!\n\nThe #ASPNET Community Standup with @sshirhatti showing #aspnetcore 2.1 Improvements for IIS Hosting.\n\nhttps://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":21,"FavoriteCount":10,"RawContent":null},{"Id":"975923268740833280","CreatedAt":"2018-03-20T02:33:33+00:00","UserScreenname":"aspnet","Text":"This week's #ASPNET Community Standup is on Tuesday at 10 AM  Pacific / 1800 GMT. @sshirhatti will be showing… https://t.co/qlOERhEOaw","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":19,"FavoriteCount":14,"RawContent":null},{"Id":"974312682647162880","CreatedAt":"2018-03-15T15:53:40+00:00","UserScreenname":"aspnet","Text":"Watch @csharpfritz and @shanselman in this recorded video from today's LiveStream about converting an application t… https://t.co/6QP4SCXJ3S","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":19,"FavoriteCount":4,"RawContent":null},{"Id":"974274384792866817","CreatedAt":"2018-03-15T13:21:29+00:00","UserScreenname":"aspnet","Text":"Tune in to @csharpfritz and @shanselman talking through an #ASP.NET upgrade at 10am ET / 7am PT / 14:00 UTC! https://t.co/vJe8zHT12j","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":3,"FavoriteCount":3,"RawContent":null},{"Id":"973691520728510464","CreatedAt":"2018-03-13T22:45:23+00:00","UserScreenname":"aspnet","Text":"Starting now... join us for the weekly #ASPNET Community Standup at https://t.co/4Ioo9jNSN2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":10,"FavoriteCount":12,"RawContent":null}]}},"RunOn":"2018-04-17T05:30:09.7477949Z","RunDurationInMilliseconds":8413}