{"Data":{"GitHub":{"Issues":[{"Id":"366871698","IsPullRequest":true,"CreatedAt":"2018-10-08T04:41:12","Actor":"Racing5372","Number":"1151","RawContent":null,"Title":"Update README.md","State":"closed","Body":"Minor addition to README","Url":"https://github.com/dotnet/machinelearning/pull/1151","RelatedDescription":"Closed or merged PR \"Update README.md\" (#1151)"},{"Id":"367578236","IsPullRequest":true,"CreatedAt":"2018-10-07T18:04:35","Actor":"ThePiranha","Number":"1179","RawContent":null,"Title":"General grammar fix","State":"open","Body":"General grammar fix and added the missing word\r\n\r\nWe are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [x] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [ ] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1179","RelatedDescription":"Open PR \"General grammar fix\" (#1179)"},{"Id":"367494778","IsPullRequest":true,"CreatedAt":"2018-10-06T20:51:18","Actor":"utkarsh-42","Number":"1178","RawContent":null,"Title":"Update LinearClassifierTrainer.cs ","State":"open","Body":"Fix #1069 \r\n\r\nWe are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [ ] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [ ] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1178","RelatedDescription":"Open PR \"Update LinearClassifierTrainer.cs \" (#1178)"},{"Id":"367451553","IsPullRequest":true,"CreatedAt":"2018-10-06T12:10:47","Actor":"jwood803","Number":"1177","RawContent":null,"Title":"Update loops in CpuMath to be more efficient","State":"open","Body":"Fixes issue #835 ","Url":"https://github.com/dotnet/machinelearning/pull/1177","RelatedDescription":"Open PR \"Update loops in CpuMath to be more efficient\" (#1177)"},{"Id":"367441694","IsPullRequest":true,"CreatedAt":"2018-10-06T09:48:45","Actor":"girishbaviskar","Number":"1176","RawContent":null,"Title":"renamed LinearClassificationTrainer","State":"closed","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [x] There's a descriptive title that will make sense to other developers some time from now. \r\n- [x] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [x] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [x] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1176","RelatedDescription":"Closed or merged PR \"renamed LinearClassificationTrainer\" (#1176)"},{"Id":"367434528","IsPullRequest":false,"CreatedAt":"2018-10-06T07:55:35","Actor":"HowardvanRooijen","Number":"1175","RawContent":null,"Title":"PROSE SDK","State":"open","Body":"Hi!\r\n\r\nNow with #563 we have Infer.NET integrated into ML.NET and available with a commercial license - can the same be done with PROSE?\r\n\r\nhttps://microsoft.github.io/prose/\r\n\r\nIt currently also has a non-commercial license - but over the last year I've seen dozens of use-cases within our customers who could use PROSE to improve data wrangling (and much more) used to feed ML models etc - but we can't use it because of the non-commercial license.\r\n\r\nIf it were integrated under the ML.NET umbrella - it would be another amazing tool for the .NET ecosystem.\r\n\r\nMany thanks!\r\n\r\nHoward","Url":"https://github.com/dotnet/machinelearning/issues/1175","RelatedDescription":"Open issue \"PROSE SDK\" (#1175)"},{"Id":"367432608","IsPullRequest":true,"CreatedAt":"2018-10-06T07:29:07","Actor":"forcesk","Number":"1174","RawContent":null,"Title":"Spanish Language added.","State":"open","Body":"Spanish MX translation added in readme.","Url":"https://github.com/dotnet/machinelearning/pull/1174","RelatedDescription":"Open PR \"Spanish Language added.\" (#1174)"},{"Id":"367429816","IsPullRequest":true,"CreatedAt":"2018-10-06T07:21:09","Actor":"forcesk","Number":"1173","RawContent":null,"Title":"Spanish Language added.","State":"closed","Body":"Translation to spanish MX added.\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1173","RelatedDescription":"Closed or merged PR \"Spanish Language added.\" (#1173)"},{"Id":"367405834","IsPullRequest":true,"CreatedAt":"2018-10-06T00:27:34","Actor":"vaeksare","Number":"1172","RawContent":null,"Title":"Add successful load checks to ImageLoaderTransform","State":"open","Body":"Check to make sure the loaded image Bitmap is valid, and throw an error if it's not. Fixes #1171 ","Url":"https://github.com/dotnet/machinelearning/pull/1172","RelatedDescription":"Open PR \"Add successful load checks to ImageLoaderTransform\" (#1172)"},{"Id":"367403879","IsPullRequest":false,"CreatedAt":"2018-10-06T00:10:47","Actor":"vaeksare","Number":"1171","RawContent":null,"Title":"ImageLoaderTransform can load corrupted images","State":"open","Body":"ImagerLoaderTransform can load corrupted images if the file path of an image it is attempting to load has special characters. Not finding a file also returns a null. In both of these cases, no error messages are propagated to the user until the invalid values cause further issues down the line in other transforms or training.","Url":"https://github.com/dotnet/machinelearning/issues/1171","RelatedDescription":"Open issue \"ImageLoaderTransform can load corrupted images\" (#1171)"},{"Id":"367393047","IsPullRequest":false,"CreatedAt":"2018-10-05T22:56:06","Actor":"danmosemsft","Number":"1170","RawContent":null,"Title":"Add 3.0 to CI","State":"open","Body":"We plan to ship codepaths that are specific to .NET Core 3.0, which will presumably be out in previews when we ship. We have some tests (albeit [incomplete](https://github.com/dotnet/machinelearning/issues/1156)) but they do not run unless the special build is performed locally.\r\n\r\nIt is too early to require contributors to have any build of 3.0 on their machines but it is not too early to add protection for the build and tests at the point of checkin. We should install some version of 3.0 on the CI machines, and add a leg to CI that builds and tests for 3.0. \r\n\r\ncc @eerhardt \r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/1170","RelatedDescription":"Open issue \"Add 3.0 to CI\" (#1170)"},{"Id":"367386207","IsPullRequest":true,"CreatedAt":"2018-10-05T22:20:00","Actor":"ganik","Number":"1169","RawContent":null,"Title":"Fix TensorFlowScorer duplicate parameter name Model","State":"open","Body":"* Fix TensorFlowScorer duplicate parameter name Model\r\n* Add unit test to detect duplicate parameter names in entrypoints\r\nfixes #1039 \r\n\r\nNew unit test detected duplication of parameter names in following components:\r\nData.DataViewReference\r\nModels.CrossValidator\r\nModels.CrossValidationResultsCombiner\r\nModels.PipelineSweeper\r\nModels.PipelineSweeper\r\nModels.SweepResultExtractor\r\nModels.TrainTestEvaluator\r\nTransforms.TwoHeterogeneousModelCombiner\r\nTransforms.ManyHeterogeneousModelCombiner\r\n\r\nI would like to have a separate PRs to fix these entrypoints. The new unit test will prevent further duplication from now on.","Url":"https://github.com/dotnet/machinelearning/pull/1169","RelatedDescription":"Open PR \"Fix TensorFlowScorer duplicate parameter name Model\" (#1169)"},{"Id":"367370743","IsPullRequest":false,"CreatedAt":"2018-10-05T21:13:58","Actor":"Ivanidzo4ka","Number":"1168","RawContent":null,"Title":"Solution file don't have references for all package projects","State":"open","Body":"https://github.com/dotnet/machinelearning/tree/master/pkg\r\nwe have quite a lot of packages, but solution file has reference only for 3 of them\r\nhttps://github.com/dotnet/machinelearning/blob/d5175899b604d852dab08107e583c78cbe5d6948/Microsoft.ML.sln#L52\r\n\r\nShould we update solution and have policy to add new packages into it, or should we just remove them from solution?\r\n\r\nAny thoughts?","Url":"https://github.com/dotnet/machinelearning/issues/1168","RelatedDescription":"Open issue \"Solution file don't have references for all package projects\" (#1168)"},{"Id":"367370330","IsPullRequest":true,"CreatedAt":"2018-10-05T21:12:28","Actor":"Zruty0","Number":"1167","RawContent":null,"Title":"Converted Schema to a class","State":"open","Body":"Created a Schema class for eager schema.\r\nConverted existing row mappers to use Schema.\r\n\r\nFixes #764","Url":"https://github.com/dotnet/machinelearning/pull/1167","RelatedDescription":"Open PR \"Converted Schema to a class\" (#1167)"},{"Id":"367367769","IsPullRequest":true,"CreatedAt":"2018-10-05T21:03:16","Actor":"sfilipi","Number":"1166","RawContent":null,"Title":"WIP: adding a nuget to package the datasets. ","State":"open","Body":"The samples that appear in our documentation should have code that the user can copy/pate and execute. \r\nFor that purpose packaging the datasets in a NuGet whose namespace we can reference from the samples. \r\n\r\nAddresses #1137 \r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1166","RelatedDescription":"Open PR \"WIP: adding a nuget to package the datasets. \" (#1166)"},{"Id":"367361346","IsPullRequest":true,"CreatedAt":"2018-10-05T20:40:31","Actor":"AswinPG","Number":"1165","RawContent":null,"Title":"Update README.md","State":"open","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [ ] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [ ] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1165","RelatedDescription":"Open PR \"Update README.md\" (#1165)"},{"Id":"366875198","IsPullRequest":true,"CreatedAt":"2018-10-05T17:30:42","Actor":"artidoro","Number":"1152","RawContent":null,"Title":"WIP: Conversion of ensemble trainers to estimators","State":"closed","Body":"Ongoing work on converting the trainers to estimators (#754). This PR converts ensemble trainers (RegressionEnsembleTrainer, EnsembleTrainer, and MulticlassDataPartitionEnsembleTrainer).\r\n\r\nStill requires more work on determining the right API for the ensemble trainers. ","Url":"https://github.com/dotnet/machinelearning/pull/1152","RelatedDescription":"Closed or merged PR \"WIP: Conversion of ensemble trainers to estimators\" (#1152)"},{"Id":"367199869","IsPullRequest":true,"CreatedAt":"2018-10-05T12:57:56","Actor":"theotherjay","Number":"1164","RawContent":null,"Title":"Release/preview","State":"closed","Body":"We are excited to review your PR.\r\n\r\nSo we can do the best job, please check:\r\n\r\n- [ ] There's a descriptive title that will make sense to other developers some time from now. \r\n- [ ] There's associated issues. All PR's should have issue(s) associated - unless a trivial self-evident change such as fixing a typo. You can use the format `Fixes #nnnn` in your description to cause GitHub to automatically close the issue(s) when your PR is merged.\r\n- [ ] Your change description explains what the change does, why you chose your approach, and anything else that reviewers should know.\r\n- [ ] You have included any necessary tests in the same PR.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1164","RelatedDescription":"Closed or merged PR \"Release/preview\" (#1164)"},{"Id":"367076338","IsPullRequest":true,"CreatedAt":"2018-10-05T06:27:39","Actor":"sfilipi","Number":"1163","RawContent":null,"Title":"Changing the namespace where the trainers live","State":"open","Body":"Addresses #1162 \r\n","Url":"https://github.com/dotnet/machinelearning/pull/1163","RelatedDescription":"Open PR \"Changing the namespace where the trainers live\" (#1163)"},{"Id":"367073289","IsPullRequest":false,"CreatedAt":"2018-10-05T06:12:41","Actor":"sfilipi","Number":"1162","RawContent":null,"Title":"Trainer extensions should be in the Microsoft.ML.Trainers namespace","State":"open","Body":"We moved the trainers from the Microsoft.Ml.Trainers namespace, to the Microsoft.Ml.StaticPipe namespace, so that they display on Ctrl+Space of the trainingContext object. We chose this namespace since we are suggesting the users to opt in to this namespace for Pigsty Api usage. \r\n\r\nBut the docs.microsoft.com site is hard to navigate this way; where users starts from namespaces. \r\nThat namespace is not intuitive, as a placeholder for the list of trainers, and it also contains a bunch of other unrelated utilities. Revert back and add a note to the cookbook.  ","Url":"https://github.com/dotnet/machinelearning/issues/1162","RelatedDescription":"Open issue \"Trainer extensions should be in the Microsoft.ML.Trainers namespace\" (#1162)"},{"Id":"367069490","IsPullRequest":true,"CreatedAt":"2018-10-05T05:52:54","Actor":"Ivanidzo4ka","Number":"1161","RawContent":null,"Title":"Remove Done method from IPipe","State":"open","Body":"Two donut people walk into a bar.\r\n\"Are we done?\" ask first one.\r\n\"No we are not dumb!\" answers second.\r\n\r\nFixes #803.\r\n\r\n@yaeldekel If you think this would slowdown your current project, feel free to block it until you done with it.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/1161","RelatedDescription":"Open PR \"Remove Done method from IPipe\" (#1161)"},{"Id":"367039789","IsPullRequest":true,"CreatedAt":"2018-10-05T02:42:01","Actor":"Ivanidzo4ka","Number":"1160","RawContent":null,"Title":"Provide action to set Arguments class in SDCA pigstensions","State":"open","Body":"fixes https://github.com/dotnet/machinelearning/issues/1121","Url":"https://github.com/dotnet/machinelearning/pull/1160","RelatedDescription":"Open PR \"Provide action to set Arguments class in SDCA pigstensions\" (#1160)"},{"Id":"367021142","IsPullRequest":true,"CreatedAt":"2018-10-05T02:38:42","Actor":"Ivanidzo4ka","Number":"1158","RawContent":null,"Title":"WIP enable MTA","State":"closed","Body":"I'm just curious what would happen if I turn on AppartmentState in our tests.","Url":"https://github.com/dotnet/machinelearning/pull/1158","RelatedDescription":"Closed or merged PR \"WIP enable MTA\" (#1158)"},{"Id":"367026855","IsPullRequest":false,"CreatedAt":"2018-10-05T01:28:08","Actor":"Ivanidzo4ka","Number":"1159","RawContent":null,"Title":"OVA and PKPD don't have pigsty extensions.","State":"open","Body":"Not sure was it intentional, or we just forgot to add them\r\n","Url":"https://github.com/dotnet/machinelearning/issues/1159","RelatedDescription":"Open issue \"OVA and PKPD don't have pigsty extensions.\" (#1159)"},{"Id":"367016237","IsPullRequest":false,"CreatedAt":"2018-10-05T00:20:31","Actor":"zeahmed","Number":"1157","RawContent":null,"Title":"Manage TensorFlow model loading so that it is not loaded twice; first for schema then for use in TFTransform.","State":"open","Body":"TFSession/TFGraph is loaded twice if user is interested in query the model schema first and then creating TensorFlowTransform. \r\n\r\nCurrently, there is no way to pass existing TFSession information which was loaded during schema probing to TensorFlowTransform. Furthermore, TFSession is internal to the assembly and there is no plan to expose this object.\r\n\r\nThe solution would be to create a `TensorFlowModelContext` wrapper class as follows that will carry the TFSession as internal object. A convenience constructor will created in TensorFlowTransform that will accept this object as input instead of model location.\r\n\r\n``` C#\r\npublic class TensorFlowModelContext\r\n{\r\n    internal TFSession TFSession { get; private set; }\r\n    public string ModelPath { get; private set; }\r\n    public ISchema Schema { get; private set; }\r\n\r\n    internal TensorFlowModelContext(TFSession tFSession, string modelLocation, ISchema schema)\r\n    {\r\n        TFSession = tFSession;\r\n        ModelPath = modelLocation;\r\n        Schema = schema;\r\n    }\r\n}\r\n```","Url":"https://github.com/dotnet/machinelearning/issues/1157","RelatedDescription":"Open issue \"Manage TensorFlow model loading so that it is not loaded twice; first for schema then for use in TFTransform.\" (#1157)"},{"Id":"367001971","IsPullRequest":false,"CreatedAt":"2018-10-04T23:03:22","Actor":"danmosemsft","Number":"1156","RawContent":null,"Title":"Do we have a complete testing strategy for the math code","State":"open","Body":"Seems we have 4 possible code paths in cpumath:\r\n\r\n1) sse.cpp  -- used when not on .NET Core 3.0\r\n2) avxintrinsics.cs  -- on .NET Core 3.0 with AVX available\r\n3) sseintrinsics.cs\t -- on .NET Core 3.0 with SSE but not AVX\r\n4) software fallback in cpumathutils.netcoreapp.cs -- on .NET Core 3.0 with no SIMD (eg., on ARM). There seems to be no software fallback when not on .NET Core 3.0.\r\n\r\nFor tests we have\r\nA) CpuMath.UnitTests.netcoreapp. Executes whichever of (2), (3), (4) applies at run time. Which will almost surely be (2) in all cases.\r\nB) CpuMath.UnitTests.netstandard. Same tests as above, but against (1).\r\nC) Microsoft.ML.CpuMath.PerformanceTests. Perf, not functional, tests for about 20 entry points in (1), (2), and (3) explicitly.\r\n\r\nWe need to have tests for anything we ship and support, which I think means we have a gap for (3) and (4) ie on older x86 machines and on non x86 machines.\r\n\r\n@tannergooding how commonly would the non AVX path (3) be encountered on typical customer x86 machines? Am I correct that (4) is not relevant to x86?\r\n\r\ncc @Anipik \t \r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/1156","RelatedDescription":"Open issue \"Do we have a complete testing strategy for the math code\" (#1156)"},{"Id":"366966946","IsPullRequest":true,"CreatedAt":"2018-10-04T22:04:43","Actor":"singlis","Number":"1155","RawContent":null,"Title":"TrainUtils.Train does not have consistent API usage","State":"closed","Body":"TrainUtils.Train does not have consistent API usage for the calibrator argument (#1023)\r\n\r\nUpdates the API signature for TrainUtils.Train to take in an IComponentFactory<ICalibratorTrainer>.\r\n\r\nFixes #1023","Url":"https://github.com/dotnet/machinelearning/pull/1155","RelatedDescription":"Closed or merged PR \"TrainUtils.Train does not have consistent API usage\" (#1155)"},{"Id":"366908826","IsPullRequest":false,"CreatedAt":"2018-10-04T18:11:45","Actor":"CESARDELATORRE","Number":"1154","RawContent":null,"Title":"How to create an Estimator without using a DataReader?","State":"open","Body":"### System information\r\nUsing the new API (PiGSTy/Typed) API.\r\n\r\n### Context\r\nThis is confirmed by Tom that the needed API is still not surfacing in the new PiGSTy/Typed API for this scenario. Will come soon, I'm just opening the issue to track it down.\r\n\r\n### Problem \r\nLet’s say I’m not reading/loading data from a text file (using a DataReader) but from a Database or any other channel, like the following code:\r\n \r\n```\r\nvar env = new LocalEnvironment();\r\nIEnumerable<Orders> myData = GetDataFromDatabase();\r\nvar trainData = env.CreateStreamingDataView(myData);\r\n```\r\n \r\n….\r\n \r\nFor the whole training process, I could do something like the following, with the new API:\r\n \r\n```\r\nvar dataReader = TextLoader.CreateReader(env,\r\n                c => (\r\n                    CustomerId: c.LoadText(0),\r\n                    ProductId: c.LoadText(1),\r\n                    Quantity: c.LoadFloat(2),\r\n                    Label: c.LoadBool(3)),\r\n                    separator: ',', hasHeader: true);\r\n \r\nFieldAwareFactorizationMachinePredictor pred = null;\r\nvar ctx = new BinaryClassificationContext(env);\r\n \r\nvar est = dataReader.MakeNewEstimator()\r\n    .Append(row => (CustomerId_OHE: row.CustomerId.OneHotEncoding(), ProductId_OHE: row.ProductId.OneHotEncoding(), row.Label))\r\n    .Append(row => (Features: row.CustomerId_OHE.ConcatWith(row.ProductId_OHE), row.Label))\r\n    .Append(row => (row.Label,\r\n    preds: ctx.Trainers.FieldAwareFactorizationMachine(\r\n        row.Label,\r\n        new[] { row.Features },\r\n        advancedSettings: ffmArguments => ffmArguments.Shuffle = false,\r\n        onFit: p => pred = p)));\r\n \r\n// NO NEED FOR THIS SINCE I’M NOT READING FROM A FILE\r\n//var dataSource = reader.Read(new MultiFileSource(orderItemsLocation));\r\n \r\n// Load data in IDataView from a Database\r\nIEnumerable<Orders> myData = GetDataFromDatabase();\r\nvar trainData = env.CreateStreamingDataView(myData);\r\n \r\nvar model = est.Fit(trainData);\r\n \r\n```\r\n \r\nHowever, since we’re not reading/loading from a file, I should be able to create an Estimator by using a different way instead of a “dataReader”, since in the code above that dataReader is *not* reading anything and is just being used to create the estimator.\r\n\r\nI’d like to create the “schema” provided to the DataReader and create the Estimator without anything related to a DataReader, because I’m not reading anything with it in the code above.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/1154","RelatedDescription":"Open issue \"How to create an Estimator without using a DataReader?\" (#1154)"},{"Id":"366879987","IsPullRequest":false,"CreatedAt":"2018-10-04T16:50:26","Actor":"eerhardt","Number":"1153","RawContent":null,"Title":"Rename Microsoft.ML.StaticPipe.Vector<T> type","State":"open","Body":"We currently have:\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/161b450a68a3f47eaf8abd4ce4778e417814b20f/src/Microsoft.ML.Data/StaticPipe/PipelineColumn.cs#L48-L52\r\n\r\nWhich is more of a schema type that says \"the column I represent is a vector type\". Which means this type isn't actually a \"vector\", but more of a \"vector column\".\r\n\r\nWe should rename this type (and the other XXColumn types), so we can \"make room\" for an actual `Vector<T>` type, which really does represent a \"vector\" object.\r\n\r\n/cc @TomFinley ","Url":"https://github.com/dotnet/machinelearning/issues/1153","RelatedDescription":"Open issue \"Rename Microsoft.ML.StaticPipe.Vector<T> type\" (#1153)"},{"Id":"366846455","IsPullRequest":false,"CreatedAt":"2018-10-04T15:28:36","Actor":"HowardvanRooijen","Number":"1150","RawContent":null,"Title":"Model Backwards Compatability ","State":"open","Body":"Hi\r\n\r\nFollowing up from issue #569 - when using the latest nightly builds `0.7.0-preview-27004-1` models trained using the previous ML.NET release (0.5) fail to load, with the following exception:\r\n\r\n``` csharp\r\n   at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor)\r\n   at System.Reflection.RuntimeMethodInfo.UnsafeInvokeInternal(Object obj, Object[] parameters, Object[] arguments)\r\n   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)\r\n   at Microsoft.ML.Runtime.ComponentCatalog.LoadableClassInfo.CreateInstanceCore(Object[] ctorArgs)\r\n   at Microsoft.ML.Runtime.ComponentCatalog.LoadableClassInfo.CreateInstance(IHostEnvironment env, Object args, Object[] extra)\r\n   at Microsoft.ML.Runtime.ComponentCatalog.TryCreateInstance[TRes](IHostEnvironment env, Type signatureType, TRes& result, String name, String options, Object[] extra)\r\n   at Microsoft.ML.Runtime.ComponentCatalog.TryCreateInstance[TRes,TSig](IHostEnvironment env, TRes& result, String name, String options, Object[] extra)\r\n   at Microsoft.ML.Runtime.Model.ModelLoadContext.TryLoadModelCore[TRes,TSig](IHostEnvironment env, TRes& result, Object[] extra)\r\n   at Microsoft.ML.Runtime.Model.ModelLoadContext.TryLoadModel[TRes,TSig](IHostEnvironment env, TRes& result, RepositoryReader rep, Entry ent, String dir, Object[] extra)\r\n   at Microsoft.ML.Runtime.Model.ModelLoadContext.LoadModel[TRes,TSig](IHostEnvironment env, TRes& result, RepositoryReader rep, Entry ent, String dir, Object[] extra)\r\n   at Microsoft.ML.Runtime.Model.ModelLoadContext.LoadModelOrNull[TRes,TSig](IHostEnvironment env, TRes& result, RepositoryReader rep, String dir, Object[] extra)\r\n   at Microsoft.ML.Runtime.Model.ModelLoadContext.LoadModelOrNull[TRes,TSig](IHostEnvironment env, TRes& result, String name, Object[] extra)\r\n   at Microsoft.ML.Runtime.Model.ModelLoadContext.LoadModel[TRes,TSig](IHostEnvironment env, TRes& result, String name, Object[] extra)\r\n   at Microsoft.ML.Runtime.Data.CompositeDataLoader.LoadSelectedTransforms(ModelLoadContext ctx, IDataView srcView, IHostEnvironment env, Func`2 isTransformTagAccepted)\r\n   at Microsoft.ML.Runtime.Model.ModelFileUtils.LoadTransforms(IHostEnvironment env, IDataView data, RepositoryReader rep)\r\n   at Microsoft.ML.Runtime.Model.ModelFileUtils.LoadTransforms(IHostEnvironment env, IDataView data, Stream modelStream)\r\n   at Microsoft.ML.Runtime.Api.ComponentCreation.LoadTransforms(IHostEnvironment env, Stream modelStream, IDataView data)\r\n   at Microsoft.ML.Runtime.Api.DataViewConstructionUtils.LoadPipeWithPredictor(IHostEnvironment env, Stream modelStream, IDataView view)\r\n   at Microsoft.ML.Runtime.Api.BatchPredictionEngine`2..ctor(IHostEnvironment env, Stream modelStream, Boolean ignoreMissingColumns, SchemaDefinition inputSchemaDefinition, SchemaDefinition outputSchemaDefinition)\r\n   at Microsoft.ML.Runtime.Api.ComponentCreation.CreateBatchPredictionEngine[TSrc,TDst](IHostEnvironment env, Stream modelStream, Boolean ignoreMissingColumns, SchemaDefinition inputSchemaDefinition, SchemaDefinition outputSchemaDefinition)\r\n   at Microsoft.ML.Legacy.PredictionModel.ReadAsync[TInput,TOutput](Stream stream)\r\n   at Demo.Program.<Main>d__0.MoveNext() in C:\\_Projects\\OSS\\MLNETPreviousModelLoadingError\\Demo\\Program.cs:line 25\r\n```\r\n\r\nI've attached a small demo that reproduces the above. The zip also contains a model trained on ML.NET 0.5 using the following code:\r\n\r\n``` csharp\r\nnamespace Endjin.Expenses.Demo\r\n{\r\n    #region Using Directives\r\n\r\n    using System.Collections.Generic;\r\n\r\n    using Endjin.FreeAgent.Expenses.MachineLearning.Domain;\r\n\r\n    using Microsoft.ML.Legacy;\r\n    using Microsoft.ML.Legacy.Data;\r\n    using Microsoft.ML.Legacy.Trainers;\r\n    using Microsoft.ML.Legacy.Transforms;\r\n\r\n    #endregion \r\n\r\n    public class ExpenseModelTrainer\r\n    {\r\n        public PredictionModel<TransactionModel, Prediction> Train(IEnumerable<TransactionModel> input)\r\n        {\r\n            var pipeline = new LearningPipeline\r\n            {\r\n                CollectionDataSource.Create(input),\r\n                new TextFeaturizer(\"Features\", nameof(TransactionModel.Description), nameof(TransactionModel.Reference), nameof(TransactionModel.Amount)),\r\n                new Dictionarizer(nameof(TransactionModel.Label)),\r\n                new StochasticDualCoordinateAscentClassifier(),\r\n                new PredictedLabelColumnOriginalValueConverter { PredictedLabelColumn = nameof(Prediction.PredictedLabel) }\r\n            };\r\n\r\n            return pipeline.Train<TransactionModel, Prediction>();\r\n        }\r\n    }\r\n}\r\n```\r\n(The \"legacy\" namespaces changed in the latest version, but if you change them back to the 0.5 version namespaces - nothing else changed)\r\n\r\n[MLNETPreviousModelLoadingError.zip](https://github.com/dotnet/machinelearning/files/2446874/MLNETPreviousModelLoadingError.zip)\r\n\r\nMany thanks,\r\n\r\nHoward\r\n","Url":"https://github.com/dotnet/machinelearning/issues/1150","RelatedDescription":"Open issue \"Model Backwards Compatability \" (#1150)"}],"ResultType":"GitHubIssue"}},"RunOn":"2018-10-08T05:30:34.8236759Z","RunDurationInMilliseconds":947}