{"Data":{"Blog":{"FeedItems":[{"Title":".NET Framework February 2019 Preview of Quality Rollup","PublishedOn":"2019-02-19T23:42:36+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we released the February 2019 Preview of Quality Rollup. Quality and Reliability This release contains the following quality and reliability improvements. CLR Addresses an issue in...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/02/19/net-framework-february-2019-preview-of-quality-rollup/","RawContent":null},{"Title":".NET Core 1.0 and 1.1 will reach End of Life on June 27, 2019","PublishedOn":"2019-02-19T18:22:20+00:00","CommentsCount":2,"FacebookCount":0,"Summary":".NET Core 1.0 was released on June 27, 2016 and .NET Core 1.1 was released on November 16, 2016. As an LTS release, .NET Core 1.0 is supported for three years. .NET Core 1.1 fits into the same support...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/02/19/net-core-1-0-and-1-1-will-reach-end-of-life-on-june-27-2019/","RawContent":null},{"Title":"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809","PublishedOn":"2019-02-15T14:03:53+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Final Update 2/19/19 @1:30 PM (PST): This advisory is now resolved with no action needed from Microsoft Customers. The issue was not applicable to any valid or supported configuration. There is no...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/02/15/advisory-on-february-2019-security-update-for-windows-10-update-1809/","RawContent":null},{"Title":"Microsoft’s Developer Blogs are Getting an Update","PublishedOn":"2019-02-13T19:49:42+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"In the coming days, we’ll be moving our developer blogs to a new platform with a modern, clean design and powerful features that will make it easy for you to discover and share great content. This...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/02/13/microsofts-developer-blogs-are-getting-an-update/","RawContent":null},{"Title":"Help us make the .NET Architecture guides better for you!","PublishedOn":"2019-02-13T15:47:15+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Over the last couple of years, we worked with experts to create some incredible architecture guides &#38; reference samples for .NET developers. We focused on Microservices Architecture, Modernizing...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/02/13/help-us-make-the-net-architecture-guides-better-for-you/","RawContent":null},{"Title":".NET Framework February 2019 Security and Quality Rollup","PublishedOn":"2019-02-13T14:45:47+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Updated: February 19, 2019 The advisory is now resolved with no action needed from Microsoft Customers. The issue was not applicable to any valid or supported configuration. There is no consequence...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/","RawContent":null},{"Title":".NET Core February 2019 Updates – 1.0.14, 1.1.11, 2.1.8 and 2.2.2","PublishedOn":"2019-02-12T18:30:20+00:00","CommentsCount":9,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core February 2019 Update. These updates contain security and reliability fixes. See the individual release notes for details on included reliability fixes. .NET Core...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/02/12/net-core-february-2019/","RawContent":null},{"Title":"Announcing ML.NET 0.10 – Machine Learning for .NET","PublishedOn":"2019-02-08T07:07:18+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"ML.NET is an open-source and cross-platform machine learning framework (Windows, Linux, macOS) for .NET developers. Using ML.NET, developers can leverage their existing tools and skillsets to develop...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/02/07/announcing-ml-net-0-10-machine-learning-for-net/","RawContent":null},{"Title":"Submit to the Applied F# Challenge!","PublishedOn":"2019-02-05T16:17:03+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This post was written by Lena Hall, a Senior Cloud Developer Advocate at Microsoft. F# Software Foundation has recently announced their new initiative — Applied F# Challenge! We encourage you to...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/02/05/submit-to-the-applied-f-challenge/","RawContent":null},{"Title":"Announcing .NET Core 3 Preview 2","PublishedOn":"2019-01-29T17:57:06+00:00","CommentsCount":52,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 3 Preview 2. It includes new features in .NET Core 3.0 and C# 8, in addition to the large number of new features in Preview 1. ASP.NET Core 3.0 Preview 2  is...","Href":"https://blogs.msdn.microsoft.com/dotnet/2019/01/29/announcing-net-core-3-preview-2/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"10123005051","Type":"IssuesEvent","CreatedAt":"2019-07-31T19:23:23","Actor":"MeikTranel","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/issues/148","RelatedDescription":"Opened issue \"Clarify guidelines in regards to Options and Requirements\" (#148) at dotnet/foundation","RelatedBody":"I'd be interested in which part of the project submission guidelines is optional and which are deal breaker requirements.\r\n\r\n- Is the Role Matrix laid out an absolute or (as can be read between the lines) just a preset, which may be subject to individual projects needs?\r\n- Is it a strong requirement that the project uses the contributor covenant CoC?"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"10348207363","Type":"IssuesEvent","CreatedAt":"2019-09-04T19:14:06","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/120","RelatedDescription":"Opened issue \".NET Core 3.0 Preview 9\" (#120) at dotnet/announcements","RelatedBody":".NET Core Preview 9 released today. https://github.com/dotnet/core/issues/3304 has been opened for discussion. \r\n\r\n[Release Notes](https://github.com/dotnet/core/blob/master/release-notes/3.0/preview/3.0.0-preview9.md)\r\n[Download](https://github.com/dotnet/core/blob/master/release-notes/3.0/preview/3.0.0-preview9-download.md)\r\n\r\n**Blog posts**\r\n\r\n[.NET Core](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0-preview-9/)\r\n[ASP.NET Core](https://devblogs.microsoft.com/aspnet/asp-net-core-and-blazor-updates-in-net-core-3-0-preview-9/)\r\n[EF Core](https://devblogs.microsoft.com/dotnet/announcing-entity-framework-core-3-0-preview-9-and-entity-framework-6-3-preview-9/)\r\n\r\nPlease report any issues you find with 3.0.0 Preview 9, either responding to this issue, creating a new issue or creating a new issue in one of the following repos:\r\n\r\n* [aspnet/Home](https://github.com/aspnet/Home) - for ASP.NET Core questions\r\n* [aspnet/EntityFrameworkCore](https://github.com/aspnet/EntityFrameworkCore) - for Entity Framework Core questions\r\n* [dotnet/cli](https://github.com/dotnet/cli/issues) - for CLI tools and questions\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues) - for API issues and questions\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues) - for runtime issues\r\n* [dotnet/core-setup](https://github.com/dotnet/core-setup/issues) - for installer issues\r\n* [dotnet/winforms](https://github.com/dotnet/winforms/issues) - for Winforms issues\r\n* [dotnet/wpf](https://github.com/dotnet/wpf/issues) - for WPF issues\r\n* [nuget/home](https://github.com/nuget/home/issues) - for NuGet questions and issues"},{"Id":"10212614045","Type":"IssuesEvent","CreatedAt":"2019-08-14T19:54:26","Actor":"stephentoub","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/119","RelatedDescription":"Opened issue \"Consolidating .NET GitHub repos\" (#119) at dotnet/announcements","RelatedBody":"Over the next few months, we plan to consolidate several of the foundational repositories of .NET Core, including dotnet/coreclr and dotnet/corefx.\r\n\r\n.NET’s repository structure on GitHub was initially created in a fairly fine-grained manner, with the aim of enabling runtime agility and increased developer productivity.  However, this separation has led to a variety of complications for contributors and maintainers alike.  For example:\r\n- **Confusion about where issues should be opened.**  It’s not always clear in which repo an issue should be reported, complicated by the fact that some implementations actually span repositories (e.g. a type might be exposed through a reference assembly and have its tests in corefx but actually be implemented in System.Private.CoreLib in coreclr).\r\n- **Difficulty sharing source.**  System.Private.CoreLib is intricately connected to the rest of the runtime, and thus has lived with the runtime code.  That, however, means that although corefx has been intended as the place to share as much core library code as possible across any underlying runtime, we’ve needed to keep a significant body of code in System.Private.CoreLib, which then has meant it’s needed to be “mirrored” to each runtime repo (coreclr, corert, mono) that needs to consume it as source; similarly, corefx has similarly required access to much of that source, for example to use the same interop DllImports that are employed elsewhere in the runtimes.  The automatic mirror that shares this source needs to be maintained, and even when it has been, it’s often led to lag.  It’s also complicated developer processes, where to validate a change in one repo generally requires manually mirroring the code to other local repos in order to validate the change and ensure merging into one repo won’t break the others.\r\n- **PRs spanning multiple repos.**  Because the runtime, CoreLib, and the core libraries are all intricately linked, changing runtime behaviors, adding new APIs, or changing various build processes (e.g. improving static analysis) often requires multiple PRs carefully staged across time and multiple repos.  For example, to add a new method to a type like Dictionary<>, a developer must first make the source changes in her local coreclr repo and the test and reference assembly changes in her local corefx repo.  When satisfied with the fix, the developer must submit a PR to coreclr as well as a PR to corefx, the latter of which will fail.  Eventually the coreclr PR will be merged, and the changes will mirror to the other runtimes that also require the update.  Eventually those mirror PRs will be merged, and builds will be created containing the fix for each runtime.  At some point later those builds will be consumed into the corefx repo, after which point the original corefx PR can be re-validated and eventually merged.  That’s the best case; things get more complicated in situations where there are bidirectional dependencies.\r\n- **Building an installable runtime.** Self-hosting a custom built .NET requires intricate knowledge of how all the repos work and interact.  A developer can’t just clone a single repo, make a desired change, and easily produce an installer.\r\n- **Consistency.**  One goal we had for more fine-grained repos was to enable isolation and independence for teams working within each repo’s confines, but this has led to non-trivial duplication of effort on things like build systems and CI, and then the resulting lack of consistency as each system ends up diverging from the others.\r\n\r\nThe issues go beyond the runtime.  For example, the ASP.NET maintainers and community did a great job in the past year or so consolidating from ~55 repos down to ~5 repos, but that’s still more repos than is desirable, leading to similar issues as cited above for the runtime.  On top of that, these ASP.NET repositories are in the aspnet GitHub org, which adds an additional set of issues, for example:\r\n- **Complications moving issues between repos.**  If a developer opens an issue in aspnet/aspnetcore and it’s determined that the cause of the issue is actually in dotnet/corefx, there is no GitHub mechanism to enable easily moving that issue across the aspnet to dotnet organizational boundary.\r\n- **Permissions.** Each organization’s permissions end up needing to be managed and maintained separately.\r\n\r\nThe issues extend into tooling as well.  For example, we currently have multiple repositories that all logically make up the dotnet CLI, but actually creating a working installer spans multiple repos.\r\n\r\n### Plan\r\n\r\nTo address these issues, we’re planning to make some changes to our repository structure:\r\n- **dotnet/platform.**  We plan to combine dotnet/coreclr, dotnet/corefx, dotnet/corert, dotnet/core-setup, and the relevant portions of mono/mono into a new dotnet/platform repo.  Everything needed to build and produce the Microsoft.NETCore.App shared framework will be in this repo.  We will no longer suffer from the complications of source mirroring.  Features like changing runtime behavior or adding an API will no longer require a complicated dance across multiple repos.  Etc.\r\n- **dotnet/aspnetcore.**  We plan to move the existing aspnet/aspnetcore repository into the dotnet organization.  Along with that, we aim to combine a variety of the other aspnet repositories into aspnetcore, such as aspnet/blazor.  Whether repos like entityframeworkcore remain separate or combined remains an open question.  A goal is that, just as dotnet/platform will be responsible for the creation of Microsoft.NETCore.App, dotnet/aspnetcore will be responsible for the creation of Microsoft.AspNETCore.App.\r\n- **dotnet/cli.**  We plan to combine dotnet/toolset and dotnet/sdk into the dotnet/cli repo.\r\n\r\n## To discuss these plans, please comment on the corresponding issue at https://github.com/dotnet/coreclr/issues/26175.\r\n\r\n### FAQ\r\n\r\n#### Why are we merging repos?\r\n\r\nWe believe we can significantly improve several aspects of .NET on GitHub by combining repos, benefiting both maintainers and contributors.  These improvements will manifest in a variety of ways, such as in better issue management, much easier models of contribution, and easier and faster ways to build and install the resulting bits.\r\n\r\n####  What will happen to the aspnet org?\r\n\r\nThe aspnet org as a separate entity is legacy and artificial.  In time we hope to absorb it into the dotnet org and sunset the aspnet org.\r\n\r\n#### Will the coreclr and corefx repos go away?\r\n\r\nWith the help of GitHub, we plan to migrate all issues from these repos to the new dotnet/platform repo, and then lock down creation of additional issues, such that the repos will no longer be used for issue management.  We will also inhibit the creation of PRs to the master branch, which will effectively become an archive for read-only review of history.  In this sense, these repos will be archived, and no active development will happen with them.  However, we plan to continue servicing previous .NET Core releases out of these repos, so the various release branches (e.g. release/2.1, release/3.0, etc.) will continue to see (limited) activity.\r\n\r\n#### Will the mono repo go away?\r\n\r\nNo. mono/mono contains the source for the full mono stack and will continue to live on happily.  We will simply be moving the managed source associated with System.Private.CoreLib and copying the relatively small amount of source that makes up the native mono runtime to dotnet/platform.  We may choose to then use some mirroring technology to keep the runtime copy in sync (this will, however, not suffer from the same mirroring issues we currently experience, as we would not be mirroring between two components required to build the same binaries), or we may choose to let them diverge and manually sync only those changes deemed relevant to both implementations.\r\n\r\n#### Will the corert repo go away?\r\n\r\nYes.  We plan to retire/archive the corert repo.  Some of the technology in the corert repo will be migrated to the master branch of dotnet/platform, where it will be productized as part of .NET.  Other portions of the corert repo will be migrated to feature branches of dotnet/platform, where the experimentation can continue.  In this way, we will use feature branches to continue experimenting with the corert technology, while making it easier to share portions with its shipping counterpart and also graduate functionality into master if/when it’s ready.\r\n\r\n#### Does this mean there will be a single repo for all of .NET?\r\n\r\nNo.  We will be reducing the number of repos that contribute to .NET, but currently we do not believe that going all the way down to one is the right answer.\r\n\r\n#### Doesn’t this mean that issue and PR tracking will now be overwhelming?\r\n\r\nIt is already the case that the vast majority of issues in a given repo are not relevant to any individual developer, and with several thousand open issues in each repo and on the order of a hundred open PRs in each, we already need systems (e.g. labels) to successfully manage issues and PRs.  As such, we don’t believe the merging will have a significant impact on this aspect of developer productivity.  If it turns out to have an unexpectedly large negative impact, we will work with the community to find ways to mitigate the problem.  However, there are already a multitude of successful open source projects on GitHub with at least an order of magnitude more issues.\r\n\r\n#### What will happen to existing issues?\r\n\r\nWith the help of GitHub functionality, we plan to migrate all issues from old repos (e.g. dotnet/coreclr, dotnet/corefx) to the new repos (e.g. dotnet/platform).  We may also use this as a forcing function to revisit stale issues and either close those that are no longer relevant or reinvigorate those that are demanding of more immediate attention.\r\n\r\n#### What about git history?\r\n\r\nIn general, we plan to keep history, such that history from each constituent repo will be a part of the new repo.  However, we have made some mistakes in the past (e.g. large binaries, multitudes of automated PRs for flowing bits and source between repos, etc.), and we plan to rewrite history to correct those mistakes wherever possible and impactful.  Some rough calculations suggest this could end up significantly reducing the size of the repos as well as the time it takes to clone, which should not only help developers approaching the project but also CI.  This will end up meaning that SHAs may be different in the new repo than they were in the old repo; as previously mentioned, however, any references to the old SHAs in the old repos will continue to work, as those repos will remain accessible.\r\n\r\n#### Will I still show up in the contributor list due to previous contributions?\r\n\r\nYes.  We plan to merge all such history.\r\n\r\n#### Will this break debugging with SourceLink?\r\n\r\nNo.  The existing repos will continue to be accessible, and commit SHAs there will remain unchanged.\r\n\r\n#### Might plans change?\r\n\r\nSure.  Part of the goal of posting this announcement is to hear from you, hear about additional benefits you're excited about, and hear about additional concerns we may not have considered.  We will include such ideas in our planning and course correct as necessary."}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"10381683546","Type":"PullRequestEvent","CreatedAt":"2019-09-10T04:54:59","Actor":"sandreenko","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/26610","RelatedDescription":"Opened pull request \"[WIP] test PR\" (#26610) at dotnet/coreclr","RelatedBody":""},{"Id":"10381449663","Type":"PullRequestEvent","CreatedAt":"2019-09-10T03:52:11","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/26604","RelatedDescription":"Merged pull request \"Delete dead code and fix issues found by static analysis tools\" (#26604) at dotnet/coreclr","RelatedBody":""},{"Id":"10380851351","Type":"IssuesEvent","CreatedAt":"2019-09-10T01:18:29","Actor":"GrabYourPitchforks","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/26609","RelatedDescription":"Opened issue \"string.LastIndexOf(string.Empty, ...) returns wrong index\" (#26609) at dotnet/coreclr","RelatedBody":"(Related to https://github.com/dotnet/coreclr/issues/26608.)\r\n\r\nThe definition of `string.IndexOf(string value, StringComparison comparisonType)` is such that it returns the minimum integer _index_ for which the following expression is true:\r\n\r\n```cs\r\noriginalString.Substring(index).StartsWith(value, comparisonType) == true\r\n```\r\n\r\nSimilarly, the definition of `string.LastIndexOf(string value, StringComparison comparisonType)` is such that it returns the maximum integer _index_ for which the following expression is true:\r\n\r\n```cs\r\noriginalString.Substring(index).EndsWith(value, comparisonType) == true\r\n```\r\n\r\n(If there is no value _index_ which makes this expression true, `IndexOf` and `LastIndexOf` return -1.)\r\n\r\nGiven this definition, the result of `someInputString.LastIndexOf(\"\", StringComparison.Ordinal)` should be `someInputString.Length` for all possible input strings. This is because calling `someInputString.Substring(someInputString.Length)` will result in the empty string, and any string (including the empty string) trivially ends with itself. Furthermore, there is no larger value _index_ which can be passed into the `Substring` routine, as any such value would result in an exception."},{"Id":"10380819852","Type":"PullRequestEvent","CreatedAt":"2019-09-10T01:10:08","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/26597","RelatedDescription":"Merged pull request \"Remove use of non-generic WeakReference from corelib\" (#26597) at dotnet/coreclr","RelatedBody":"Only remaining use is the one place it shows up in public API, in GC.GetGeneration(WeakReference)."},{"Id":"10380815412","Type":"PullRequestEvent","CreatedAt":"2019-09-10T01:08:54","Actor":"stephentoub","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/26570","RelatedDescription":"Merged pull request \"Make StringComparer.Create throw ArgumentNullException\" (#26570) at dotnet/coreclr","RelatedBody":"Throws proper exception.\r\n\r\n@danmosemsft"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"10381520620","Type":"PullRequestEvent","CreatedAt":"2019-09-10T04:10:53","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/12566","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/core-setup\" (#12566) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190909.31\r\n- **Date Produced**: 9/10/2019 2:07 AM\r\n- **Commit**: 2aa1111d83976a4fba3ab87aa442e12cf5ddbbfd\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19459.31\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19459.31\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19459.31\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19459.31\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19459.31\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"10381482274","Type":"PullRequestEvent","CreatedAt":"2019-09-10T04:00:50","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/12572","RelatedDescription":"Merged pull request \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#12572) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190909.32\r\n- **Date Produced**: 9/10/2019 2:12 AM\r\n- **Commit**: 009370332eff38e47bf22a1d5f9e01e7f2033675\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.1.0-preview1.19459.32\r\n  - **Microsoft.NET.HostModel** -> 3.1.0-preview1.19459.32\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.1.0-preview1.19459.32\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.1.0-preview1.19459.32\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.1.0-preview1.19459.32\r\n\r\n[marker]: <> (End:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n\r\n"},{"Id":"10381292048","Type":"PullRequestEvent","CreatedAt":"2019-09-10T03:10:21","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/12572","RelatedDescription":"Opened pull request \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#12572) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190909.32\r\n- **Date Produced**: 9/10/2019 2:12 AM\r\n- **Commit**: 009370332eff38e47bf22a1d5f9e01e7f2033675\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.1.0-preview1.19459.32\r\n  - **Microsoft.NET.HostModel** -> 3.1.0-preview1.19459.32\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.1.0-preview1.19459.32\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.1.0-preview1.19459.32\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.1.0-preview1.19459.32\r\n\r\n[marker]: <> (End:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n\r\n"},{"Id":"10380955890","Type":"PullRequestEvent","CreatedAt":"2019-09-10T01:45:41","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/12569","RelatedDescription":"Merged pull request \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#12569) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190909.29\r\n- **Date Produced**: 9/9/2019 11:59 PM\r\n- **Commit**: d4bf4a52b2cad3dc6861f1663a22cda104fade18\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.1.0-preview1.19459.29\r\n  - **Microsoft.NET.HostModel** -> 3.1.0-preview1.19459.29\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.1.0-preview1.19459.29\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.1.0-preview1.19459.29\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.1.0-preview1.19459.29\r\n\r\n[marker]: <> (End:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n\r\n"},{"Id":"10380935918","Type":"IssuesEvent","CreatedAt":"2019-09-10T01:40:32","Actor":"natenho","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/12571","RelatedDescription":"Opened issue \"dotnet-install.sh won't install the latest SDK version\" (#12571) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n\r\n```console\r\n[root@centos-181 ~]# ./dotnet-install.sh\r\ndotnet_install: Warning: Unable to locate libunwind. Probable prerequisite missing; install libunwind.\r\ndotnet_install: Warning: Unable to locate libicu. Probable prerequisite missing; install libicu.\r\ndotnet-install: Downloading link: https://dotnetcli.azureedge.net/dotnet/Sdk/2.1.701/dotnet-sdk-2.1.701-linux-x64.tar.gz\r\n```\r\n\r\n## Expected  behavior\r\nTo install the latest SDK version (2.2)\r\n\r\n## Actual behavior\r\nIt's installing 2.1.701 version\r\n\r\nOriginal issue: https://github.com/dotnet/docs/issues/10447\r\n\r\n\r\n"},{"Id":"10380845060","Type":"IssuesEvent","CreatedAt":"2019-09-10T01:16:49","Actor":"SidShetye","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/12570","RelatedDescription":"Opened issue \"dotnet help test is broken in 3.0.0-preview9 on Ubuntu 18.04 LTS\" (#12570) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n\r\nJust type `dotnet help test` in ubuntu 18.04 server \r\n\r\n```\r\ndemo@lab-ubuntu08:~$ dotnet help test\r\nSystem.ComponentModel.Win32Exception (2): No such file or directory\r\nat System.Diagnostics.Process.ForkAndExecProcess(String filename, String[] argv, String[] envp, String cwd, Boolean redirectStdin, Boolean redirectStdout, Boolean redirectStderr, Boolean setCredentials, UInt32 userId, UInt32 groupId, UInt32[] groups, Int32& stdinFd, Int32& stdoutFd, Int32& stderrFd, Boolean usesTerminal, Boolean throwOnNoExec)               \r\nat System.Diagnostics.Process.StartCore(ProcessStartInfo startInfo)                                                                                                                 \r\nat System.Diagnostics.Process.Start()                                                                                                                                               \r\nat Microsoft.DotNet.Tools.Help.HelpCommand.Execute()                                                                                                                                \r\nat Microsoft.DotNet.Tools.Help.HelpCommand.Run(String[] args)                                                                                                                       \r\nat Microsoft.DotNet.Cli.Program.ProcessArgs(String[] args, ITelemetry telemetryClient)                                                                                              \r\nat Microsoft.DotNet.Cli.Program.Main(String[] args)\r\n\r\n\r\ndemo@lab-ubuntu08:~$ uname -a\r\nLinux lab-ubuntu01 4.15.0-62-generic #69-Ubuntu SMP Wed Sep 4 20:55:53 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux\r\n```\r\n## Expected  behavior\r\n\r\nsee help\r\n\r\n## Actual behavior\r\n\r\nsee exception\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\n$ dotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview9-014004\r\n Commit:    8e7ef240a5\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  18.04\r\n OS Platform: Linux\r\n RID:         ubuntu.18.04-x64\r\n Base Path:   /home/sid/dotnet/sdk/3.0.100-preview9-014004/\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview9-19423-09\r\n  Commit:  2be172345a\r\n\r\n.NET Core SDKs installed:\r\n  3.0.100-preview9-014004 [/home/sid/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.App 3.0.0-preview9.19424.4 [/home/sid/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview9-19423-09 [/home/sid/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"10380820623","Type":"PullRequestEvent","CreatedAt":"2019-09-10T01:10:20","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/12569","RelatedDescription":"Opened pull request \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#12569) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190909.29\r\n- **Date Produced**: 9/9/2019 11:59 PM\r\n- **Commit**: d4bf4a52b2cad3dc6861f1663a22cda104fade18\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.1.0-preview1.19459.29\r\n  - **Microsoft.NET.HostModel** -> 3.1.0-preview1.19459.29\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.1.0-preview1.19459.29\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.1.0-preview1.19459.29\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.1.0-preview1.19459.29\r\n\r\n[marker]: <> (End:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n\r\n"},{"Id":"10380725723","Type":"PullRequestEvent","CreatedAt":"2019-09-10T00:45:24","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/12568","RelatedDescription":"Merged pull request \"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore\" (#12568) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190909.5\r\n- **Date Produced**: 9/9/2019 11:54 PM\r\n- **Commit**: e090a0ff33f6aa4721c0678358075515dabe08ab\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-rc2.19459.5\r\n\r\n[marker]: <> (End:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"10378820539","Type":"IssuesEvent","CreatedAt":"2019-09-09T19:01:31","Actor":"saucecontrol","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/1527","RelatedDescription":"Opened issue \"Latest NETStandard.Library 2.0 NuGet package contains malformed XML docs\" (#1527) at dotnet/standard","RelatedBody":"This was reported in https://github.com/dotnet/standard/issues/666 but the issue was closed since the underlying problem had been resolved for 2.1 dev builds.  However, the latest available 2.0 package on NuGet [(version 2.0.3)](https://www.nuget.org/packages/NETStandard.Library/2.0.3) still has a malformed netstandard.xml.  Is it possible to get an updated 2.0 package published with corrected docs?"},{"Id":"10378638192","Type":"PullRequestEvent","CreatedAt":"2019-09-09T18:36:21","Actor":"Anipik","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1516","RelatedDescription":"Merged pull request \"[release/3.0] Update dependencies from dotnet/arcade\" (#1516) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:29f70c24-3711-40be-9246-08d6c732a216)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190908.2\r\n- **Date Produced**: 9/8/2019 11:40 PM\r\n- **Commit**: 29ee79a10c58dd6863a46157e374521cac610ad8\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19458.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19458.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19458.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19458.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19458.2\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19458.2\r\n\r\n[marker]: <> (End:29f70c24-3711-40be-9246-08d6c732a216)\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"10376767143","Type":"PullRequestEvent","CreatedAt":"2019-09-09T14:40:23","Actor":"yousiftouma","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1526","RelatedDescription":"Opened pull request \"Add ImageConverter to System.Drawing\" (#1526) at dotnet/standard","RelatedBody":"Not sure exactly what is needed for this to work, but happy to help doing it. Drawing inspiration from https://github.com/dotnet/standard/pull/803\r\n\r\nDoes Image need to be added as well? It seems to be available https://apisof.net/catalog/System.Drawing.Image"},{"Id":"10375764916","Type":"PullRequestEvent","CreatedAt":"2019-09-09T12:47:20","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1525","RelatedDescription":"Merged pull request \"[release/3.0] Update dependencies from dotnet/corefx\" (#1525) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:8358c059-232d-4dac-c08d-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190908.3\r\n- **Date Produced**: 9/8/2019 5:06 PM\r\n- **Commit**: 173d70b99a5dbb3ff9298a6e2e9c7f7e7b56dd7c\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-rc2.19458.3\r\n  - **System.Reflection.Emit** -> 4.6.0-rc2.19458.3\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-rc2.19458.3\r\n\r\n[marker]: <> (End:8358c059-232d-4dac-c08d-08d6da235811)\r\n\r\n"},{"Id":"10375763051","Type":"PullRequestEvent","CreatedAt":"2019-09-09T12:47:07","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1524","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/corefx\" (#1524) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190908.6\r\n- **Date Produced**: 9/9/2019 4:54 AM\r\n- **Commit**: cc51975a897cb803f1ad76b6b93b2ebd4581bca4\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19458.6\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19458.6\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19458.6\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"},{"Id":"10375650387","Type":"PullRequestEvent","CreatedAt":"2019-09-09T12:32:11","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1525","RelatedDescription":"Opened pull request \"[release/3.0] Update dependencies from dotnet/corefx\" (#1525) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:8358c059-232d-4dac-c08d-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190908.3\r\n- **Date Produced**: 9/8/2019 5:06 PM\r\n- **Commit**: 173d70b99a5dbb3ff9298a6e2e9c7f7e7b56dd7c\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-rc2.19458.3\r\n  - **System.Reflection.Emit** -> 4.6.0-rc2.19458.3\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-rc2.19458.3\r\n\r\n[marker]: <> (End:8358c059-232d-4dac-c08d-08d6da235811)\r\n\r\n"},{"Id":"10375648500","Type":"PullRequestEvent","CreatedAt":"2019-09-09T12:31:56","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1524","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/corefx\" (#1524) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190908.6\r\n- **Date Produced**: 9/9/2019 4:54 AM\r\n- **Commit**: cc51975a897cb803f1ad76b6b93b2ebd4581bca4\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19458.6\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19458.6\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19458.6\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"},{"Id":"10375504249","Type":"PullRequestEvent","CreatedAt":"2019-09-09T12:12:03","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1523","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/arcade\" (#1523) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190908.2\r\n- **Date Produced**: 9/8/2019 11:40 PM\r\n- **Commit**: 29ee79a10c58dd6863a46157e374521cac610ad8\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19458.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19458.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19458.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19458.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19458.2\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19458.2\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n"},{"Id":"10375433155","Type":"PullRequestEvent","CreatedAt":"2019-09-09T12:01:56","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1523","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/arcade\" (#1523) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190908.2\r\n- **Date Produced**: 9/8/2019 11:40 PM\r\n- **Commit**: 29ee79a10c58dd6863a46157e374521cac610ad8\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19458.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19458.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19458.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19458.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19458.2\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19458.2\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"10381032565","Type":"IssuesEvent","CreatedAt":"2019-09-10T02:04:47","Actor":"JeremyKuhne","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/40962","RelatedDescription":"Opened issue \"Review System.Buffers proposals\" (#40962) at dotnet/corefx","RelatedBody":"This is a meta issue for #40781, #40870, #40845, #40843, and #37156 which add new APIs to [`SequenceReader<T>`](https://apisof.net/catalog/System.Buffers.SequenceReader%3CT%3E). This captures the overall change for the review. Detailed discussions are in the linked issues.\r\n\r\nProposed new surface area:\r\n\r\n``` C#\r\nnamespace System.Buffers\r\n{\r\n    public ref struct SequenceReader<T>\r\n    {\r\n        // Optimized API to position the reader at the end of the sequence (much faster than what users can write)\r\n        public void AdvanceToEnd();\r\n\r\n        // Pairs with existing Span<T> UnreadSpan;\r\n        public ReadOnlySequence<T> UnreadSequence { get; }\r\n\r\n        // Peeking out T, while skipping. This is more performant than users can write (avoids rewinding).\r\n        public bool TryPeek(int skip, out T value);\r\n\r\n        // Overloads for TryRead that allow reading out a given count rather than to some delimiter (as with existing\r\n        // API span out will slice if it can or allocate and copy if it has to).\r\n        bool TryRead(int count, out ReadOnlySpan<T> value);\r\n        bool TryRead(int count, out ReadOnlySequence<T> value);\r\n\r\n        // Equivalent \"Peek\" versions. They need a skip as peeking doesn't advance the reader and rewinding is super expensive.\r\n        public bool TryPeek(int count, out ReadOnlySpan<T> value);\r\n        public bool TryPeek(int skip, int count, out ReadOnlySpan<T> value);\r\n        public bool TryPeek(int count, out ReadOnlySequence<T> value);\r\n        public bool TryPeek(int skip, int count, out ReadOnlySequence<T> value);\r\n \r\n        // Pairs with existing TryCopyTo(Span<T> destination), which does not advance the reader (neither does this)\r\n        public bool TryCopyTo(int skip, Span<T> destination);\r\n\r\n        // Also proposed, but having this can lead to writing slow code.\r\n        public bool SetPosition(SequencePosition position);\r\n   }\r\n}\r\n```\r\n"},{"Id":"10380891218","Type":"PullRequestEvent","CreatedAt":"2019-09-10T01:28:49","Actor":"dotnet-maestro[bot]","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/40960","RelatedDescription":"Merged pull request \"[release/3.1] Update dependencies from dotnet/coreclr\" (#40960) at dotnet/corefx","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:dbb830b1-8f81-460f-dd40-08d72a4caef5)\r\n## From https://github.com/dotnet/coreclr\r\n- **Build**: 20190909.7\r\n- **Date Produced**: 9/9/2019 8:58 PM\r\n- **Commit**: d13d1b61de8a28e0d5509273a6ec3de35b1dd258\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk.IL** -> 3.1.0-preview1.19459.7\r\n  - **Microsoft.NETCore.ILAsm** -> 3.1.0-preview1.19459.7\r\n  - **Microsoft.NETCore.Runtime.CoreCLR** -> 3.1.0-preview1.19459.7\r\n\r\n[marker]: <> (End:dbb830b1-8f81-460f-dd40-08d72a4caef5)\r\n\r\n"},{"Id":"10380836529","Type":"PullRequestEvent","CreatedAt":"2019-09-10T01:14:37","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/40961","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#40961) at dotnet/corefx","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"10380896292","Type":"PullRequestEvent","CreatedAt":"2019-09-10T01:30:08","Actor":"dotnet-automerge-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/38602","RelatedDescription":"Merged pull request \"Merge master to master-vs-deps\" (#38602) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"10378325802","Type":"PullRequestEvent","CreatedAt":"2019-09-09T17:52:59","Actor":"davidwrighton","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7779","RelatedDescription":"Merged pull request \"Resource writing\" (#7779) at dotnet/corert","RelatedBody":"- Refactor the win32 resource reading code to use more natural managed data structures\r\n- Build a Win32 resource emitter on top of refactored data structures\r\n- Replace resource section copy logic with new node to generate win32 resources"},{"Id":"10378187948","Type":"IssuesEvent","CreatedAt":"2019-09-09T17:33:39","Actor":"RalfKornmannEnvision","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/7787","RelatedDescription":"Opened issue \"finally funclets brocken for ARM64!?\" (#7787) at dotnet/corert","RelatedBody":"I am not sure if this is a corert or coreclr issue but as I am working on a corert port for an custom ARM64 system I start with posting it here.\r\n\r\nAfter adding code to the objectwriter and the ilcompiler I managed to get a simple hello world app running to the main method. But it than crashed during the shutdown. After some debugging i figured out that the static constructors are never called. After some more debugging I noticed that ClassConstructorRunner.GetCctor corrupts the stack frame,\r\n\r\nIt happens at the end of the method in an assembler block that i believe is the finally funclet for the using. It looks like this\r\n\r\n  28667c: a9be7bfd stp x29, x30, [sp, #-32]!\r\n  286680: f90013f3 str x19, [sp, #32]\r\n  286684: 9103a3a0 add x0, x29, #0xe8\r\n  286688: 97fc0d42 bl 189b90 <S_P_CoreLib_System_Threading_LockHolder__Dispose>\r\n  28668c: d503201f nop\r\n  286690: d503201f nop\r\n  286694: f94013f3 ldr x19, [sp, #32]\r\n  286698: a8c27bfd ldp x29, x30, [sp], #32\r\n  28669c: d65f03c0 ret\r\n\r\nThe fact that x19 is stored with an offset of 32 looks strange for me and it overwrites the already stored data. Based on other stackframes I would expect an offset of 16 here. Or the new stackframe for the funclet needs to be 16 bytes larger.\r\n\r\nDisclaimer: As the development system for the custom ARM64 system runs on windows I although use a ARM64 jit that is build to run on X64. Very simular to the protonojit but not as alt jit to get all the data needed to write the arm64 elf file that the linker for the custom ARM64 system needs. Unfortunately I don't have an ARM64 windows or linux system to check if a non cross jit generates the same code.\r\n\r\nI assume there is no ready to use jit for my use case and I need to build it anyway. In this case I could properly fix the issue but I would need a hint how the code is expected to look like.  "},{"Id":"10377129709","Type":"PullRequestEvent","CreatedAt":"2019-09-09T15:18:32","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7786","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr,corefx\" (#7786) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**"},{"Id":"10371921157","Type":"PullRequestEvent","CreatedAt":"2019-09-08T23:57:41","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7785","RelatedDescription":"Merged pull request \"Mark unsafe intrinsics as reflection blocked\" (#7785) at dotnet/corert","RelatedBody":"Keeping these reflection enabled pulls in quite a bit of junk (generic dictionaries, standalone method bodies, bookkeeping) that adds up to 1.5% of the size of Hello World..."},{"Id":"10371577425","Type":"IssuesEvent","CreatedAt":"2019-09-08T21:11:53","Actor":"mrzaxaryan","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/7784","RelatedDescription":"Closed issue \"Non-trivial marshalling is not yet supported by this compiler.\" (#7784) at dotnet/corert","RelatedBody":"Can't save image to MemoryStream \r\n.NET Core v3.0.0-preview9\r\nVisual Studio 16.3.0 Preview 3.0\r\nException: `System.Exception: Method '[System.Drawing.Common]System.Drawing.SafeNativeMethods+Gdip.GdipSaveImageToStream(HandleRef,IStream,Guid&,HandleRef)' requires non-trivial marshalling that is not yet supported by this compiler.\r\n   at System.Drawing.SafeNativeMethods.Gdip.GdipSaveImageToStream(HandleRef, Interop.Ole32.IStream, Guid&, HandleRef) + 0x39\r\n   at System.Drawing.Image.Save(Stream, ImageCodecInfo, EncoderParameters) + 0x1af`\r\n"},{"Id":"10371442098","Type":"PullRequestEvent","CreatedAt":"2019-09-08T20:09:59","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7782","RelatedDescription":"Merged pull request \"Port GC changes from CoreCLR\" (#7782) at dotnet/corert","RelatedBody":"Ports https://github.com/dotnet/coreclr/commit/cd42ee8fe410f71026467ad2e90116115b85f68d\r\nPorts https://github.com/dotnet/coreclr/commit/740752c9d206a465e96a4d01e7dafb6adb6ded63"},{"Id":"10371439131","Type":"PullRequestEvent","CreatedAt":"2019-09-08T20:08:40","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7783","RelatedDescription":"Merged pull request \"Update CoreFX\" (#7783) at dotnet/corert","RelatedBody":""}],"ResultType":"GitHubEvent"},"SDK":{"Events":[],"ResultType":"GitHubEvent"},"Home-Issues":{"Issues":[{"Id":"475315730","IsPullRequest":false,"CreatedAt":"2019-07-31T19:23:23","Actor":"MeikTranel","Number":"148","RawContent":null,"Title":"Clarify guidelines in regards to Options and Requirements","State":"open","Body":"I'd be interested in which part of the project submission guidelines is optional and which are deal breaker requirements.\r\n\r\n- Is the Role Matrix laid out an absolute or (as can be read between the lines) just a preset, which may be subject to individual projects needs?\r\n- Is it a strong requirement that the project uses the contributor covenant CoC?","Url":"https://github.com/dotnet/foundation/issues/148","RelatedDescription":"Open issue \"Clarify guidelines in regards to Options and Requirements\" (#148)"},{"Id":"455670422","IsPullRequest":true,"CreatedAt":"2019-06-13T10:49:30","Actor":"gep13","Number":"147","RawContent":null,"Title":"(GH-111) Update Source Link location","State":"open","Body":"","Url":"https://github.com/dotnet/foundation/pull/147","RelatedDescription":"Open PR \"(GH-111) Update Source Link location\" (#147)"},{"Id":"455555823","IsPullRequest":true,"CreatedAt":"2019-06-13T06:28:59","Actor":"gep13","Number":"146","RawContent":null,"Title":"Update Cake Project Contacts","State":"closed","Body":"@jongalloway just noticed that this wasn't up to date.","Url":"https://github.com/dotnet/foundation/pull/146","RelatedDescription":"Closed or merged PR \"Update Cake Project Contacts\" (#146)"},{"Id":"441542047","IsPullRequest":true,"CreatedAt":"2019-05-09T18:35:22","Actor":"mitchelsellers","Number":"145","RawContent":null,"Title":"Edits to DNN Platform Information","State":"closed","Body":"Edits to reflect changes in repository structure with recent modifications to the overall project structure.","Url":"https://github.com/dotnet/foundation/pull/145","RelatedDescription":"Closed or merged PR \"Edits to DNN Platform Information\" (#145)"},{"Id":"437980746","IsPullRequest":true,"CreatedAt":"2019-05-03T20:10:38","Actor":"FlorianRappl","Number":"143","RawContent":null,"Title":"Add AngleSharp","State":"closed","Body":"cc @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/143","RelatedDescription":"Closed or merged PR \"Add AngleSharp\" (#143)"},{"Id":"426787230","IsPullRequest":true,"CreatedAt":"2019-05-03T20:08:40","Actor":"mairaw","Number":"141","RawContent":null,"Title":"add links to ML.NET docs","State":"closed","Body":"/cc @JRAlexander @shauheen \r\n\r\nTo match the info we have added for other projects","Url":"https://github.com/dotnet/foundation/pull/141","RelatedDescription":"Closed or merged PR \"add links to ML.NET docs\" (#141)"},{"Id":"440030132","IsPullRequest":true,"CreatedAt":"2019-05-03T20:08:15","Actor":"tomasherceg","Number":"144","RawContent":null,"Title":"Add DotVVM","State":"closed","Body":"cc @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/144","RelatedDescription":"Closed or merged PR \"Add DotVVM\" (#144)"},{"Id":"426787542","IsPullRequest":true,"CreatedAt":"2019-03-29T14:44:24","Actor":"mairaw","Number":"142","RawContent":null,"Title":"add docs samples link","State":"closed","Body":"@BillWagner should we add the samples project too?","Url":"https://github.com/dotnet/foundation/pull/142","RelatedDescription":"Closed or merged PR \"add docs samples link\" (#142)"},{"Id":"426658581","IsPullRequest":true,"CreatedAt":"2019-03-29T02:16:07","Actor":"scottaddie","Number":"139","RawContent":null,"Title":"Add link to ASP.NET Core docs","State":"closed","Body":"Provide a link to the docs site for ASP.NET Core.","Url":"https://github.com/dotnet/foundation/pull/139","RelatedDescription":"Closed or merged PR \"Add link to ASP.NET Core docs\" (#139)"},{"Id":"426666928","IsPullRequest":true,"CreatedAt":"2019-03-29T02:15:48","Actor":"BillWagner","Number":"140","RawContent":null,"Title":"add links to .NET docs","State":"closed","Body":"/cc @mairaw @scottaddie\r\n\r\nMaira, did I miss any project repos to tag?","Url":"https://github.com/dotnet/foundation/pull/140","RelatedDescription":"Closed or merged PR \"add links to .NET docs\" (#140)"},{"Id":"419205679","IsPullRequest":true,"CreatedAt":"2019-03-18T21:04:01","Actor":"MikeWilliams-UK","Number":"137","RawContent":null,"Title":"Add V3.1 repo and change documentation link","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/137","RelatedDescription":"Closed or merged PR \"Add V3.1 repo and change documentation link\" (#137)"},{"Id":"419897914","IsPullRequest":true,"CreatedAt":"2019-03-18T21:03:34","Actor":"devlead","Number":"138","RawContent":null,"Title":"Add Dave to cake.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/138","RelatedDescription":"Closed or merged PR \"Add Dave to cake.md\" (#138)"},{"Id":"391459677","IsPullRequest":false,"CreatedAt":"2019-03-08T19:00:06","Actor":"manne","Number":"123","RawContent":null,"Title":"Missing logo for Steeltoe","State":"closed","Body":"`https://brandfolder.com/pivotal-assets/attachments/ohxttd-7yxa60-clvf50/pivotal-assets-pivotal-genericfile.png` redirects to a sign in page\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L128-L130","Url":"https://github.com/dotnet/foundation/issues/123","RelatedDescription":"Closed issue \"Missing logo for Steeltoe\" (#123)"},{"Id":"417018694","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:32","Actor":"jkonicki","Number":"136","RawContent":null,"Title":"Fix logo and update team contributors","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/136","RelatedDescription":"Closed or merged PR \"Fix logo and update team contributors\" (#136)"},{"Id":"416428925","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"135","RawContent":null,"Title":"adds Umbraco logo","State":"closed","Body":"fixes #124 ","Url":"https://github.com/dotnet/foundation/pull/135","RelatedDescription":"Closed or merged PR \"adds Umbraco logo\" (#135)"},{"Id":"391459812","IsPullRequest":false,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"124","RawContent":null,"Title":"Missing logo for Umbraco","State":"closed","Body":"`https://fbcdn-profile-a.akamaihd.net/hprofile-ak-xap1/v/t1.0-1/p160x160/971596_519168901464439_566592989_n.png?oh=ce61e5b4cbd60c0d99c4164cbb05a434&oe=54F091C9&__gda__=1424472439_c9f76213a915bc2af88246f464f29e8b` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L149-L151","Url":"https://github.com/dotnet/foundation/issues/124","RelatedDescription":"Closed issue \"Missing logo for Umbraco\" (#124)"},{"Id":"416427614","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:45","Actor":"manne","Number":"134","RawContent":null,"Title":"adds the prism logo","State":"closed","Body":"fixes #126 ","Url":"https://github.com/dotnet/foundation/pull/134","RelatedDescription":"Closed or merged PR \"adds the prism logo\" (#134)"},{"Id":"391460225","IsPullRequest":false,"CreatedAt":"2019-03-08T18:58:44","Actor":"manne","Number":"126","RawContent":null,"Title":"No logo provided for Prism","State":"closed","Body":"Can/should this [image](http://prismlibrary.github.io/images/logo-prism-symbol@2x.png) be used?\r\n\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L155-L157","Url":"https://github.com/dotnet/foundation/issues/126","RelatedDescription":"Closed issue \"No logo provided for Prism\" (#126)"},{"Id":"416157860","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:26","Actor":"glennawatson","Number":"133","RawContent":null,"Title":"Add additional ReactiveUI organization projects.","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/133","RelatedDescription":"Closed or merged PR \"Add additional ReactiveUI organization projects.\" (#133)"},{"Id":"407251900","IsPullRequest":true,"CreatedAt":"2019-02-18T17:45:44","Actor":"Potapy4","Number":"132","RawContent":null,"Title":"Update MVVM project logo","State":"closed","Body":"Fixes dotnet/dotnetfoundation-website#72\r\nFixes #125","Url":"https://github.com/dotnet/foundation/pull/132","RelatedDescription":"Closed or merged PR \"Update MVVM project logo\" (#132)"},{"Id":"391459919","IsPullRequest":false,"CreatedAt":"2019-02-18T17:45:44","Actor":"manne","Number":"125","RawContent":null,"Title":"Missing logo for MVVM Light Toolkit","State":"closed","Body":"`https://raw.githubusercontent.com/paulcbetts/mvvmlight/master/Installer/InstallItems/html/MVVM_BlackText_190x147.png` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L137-L139","Url":"https://github.com/dotnet/foundation/issues/125","RelatedDescription":"Closed issue \"Missing logo for MVVM Light Toolkit\" (#125)"},{"Id":"406210463","IsPullRequest":true,"CreatedAt":"2019-02-18T17:44:39","Actor":"NextTurn","Number":"131","RawContent":null,"Title":"Replace http links with https links","State":"closed","Body":"Replace http links with https where possible - both returned 200 OK.","Url":"https://github.com/dotnet/foundation/pull/131","RelatedDescription":"Closed or merged PR \"Replace http links with https links\" (#131)"},{"Id":"399191617","IsPullRequest":true,"CreatedAt":"2019-02-02T11:04:15","Actor":"NextTurn","Number":"130","RawContent":null,"Title":"Update Open XML links","State":"closed","Body":"OpenXmlDeveloper.org was shut down long ago.\r\n\r\nThe content has been moved to EricWhite.com.","Url":"https://github.com/dotnet/foundation/pull/130","RelatedDescription":"Closed or merged PR \"Update Open XML links\" (#130)"},{"Id":"395863354","IsPullRequest":true,"CreatedAt":"2019-01-09T22:28:14","Actor":"ErikEJ","Number":"128","RawContent":null,"Title":"Update of EF description","State":"closed","Body":"@divega !","Url":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Closed or merged PR \"Update of EF description\" (#128)"},{"Id":"395901602","IsPullRequest":true,"CreatedAt":"2019-01-05T03:23:39","Actor":"MarcBruins","Number":"129","RawContent":null,"Title":"Update to absolute path","State":"closed","Body":"Update to absolute path so that when this list is copied the link will actually work","Url":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Closed or merged PR \"Update to absolute path\" (#129)"},{"Id":"395705579","IsPullRequest":true,"CreatedAt":"2019-01-04T00:22:42","Actor":"carloscds","Number":"127","RawContent":null,"Title":"Update documentation information","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/127","RelatedDescription":"Closed or merged PR \"Update documentation information\" (#127)"},{"Id":"391459057","IsPullRequest":true,"CreatedAt":"2019-01-03T04:47:09","Actor":"manne","Number":"122","RawContent":null,"Title":"targets the existing document","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/122","RelatedDescription":"Closed or merged PR \"targets the existing document\" (#122)"},{"Id":"384569679","IsPullRequest":true,"CreatedAt":"2019-01-03T04:46:31","Actor":"JamesNK","Number":"121","RawContent":null,"Title":"Add Newtonsoft.Json","State":"closed","Body":"// @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/121","RelatedDescription":"Closed or merged PR \"Add Newtonsoft.Json\" (#121)"},{"Id":"384212839","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:50","Actor":"stefanov-stefan","Number":"120","RawContent":null,"Title":"Added Telerik info","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/120","RelatedDescription":"Closed or merged PR \"Added Telerik info\" (#120)"},{"Id":"384212448","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:22","Actor":"stefanov-stefan","Number":"119","RawContent":null,"Title":"Added Telerik UWP proj","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/119","RelatedDescription":"Closed or merged PR \"Added Telerik UWP proj\" (#119)"}],"ResultType":"GitHubIssue"},"CoreCLR-Issues":{"Issues":[{"Id":"491449743","IsPullRequest":true,"CreatedAt":"2019-09-10T04:54:59","Actor":"sandreenko","Number":"26610","RawContent":null,"Title":"[WIP] test PR","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/26610","RelatedDescription":"Open PR \"[WIP] test PR\" (#26610)"},{"Id":"491372835","IsPullRequest":true,"CreatedAt":"2019-09-10T03:52:11","Actor":"jkotas","Number":"26604","RawContent":null,"Title":"Delete dead code and fix issues found by static analysis tools","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/26604","RelatedDescription":"Closed or merged PR \"Delete dead code and fix issues found by static analysis tools\" (#26604)"},{"Id":"491398842","IsPullRequest":false,"CreatedAt":"2019-09-10T01:18:29","Actor":"GrabYourPitchforks","Number":"26609","RawContent":null,"Title":"string.LastIndexOf(string.Empty, ...) returns wrong index","State":"open","Body":"(Related to https://github.com/dotnet/coreclr/issues/26608.)\r\n\r\nThe definition of `string.IndexOf(string value, StringComparison comparisonType)` is such that it returns the minimum integer _index_ for which the following expression is true:\r\n\r\n```cs\r\noriginalString.Substring(index).StartsWith(value, comparisonType) == true\r\n```\r\n\r\nSimilarly, the definition of `string.LastIndexOf(string value, StringComparison comparisonType)` is such that it returns the maximum integer _index_ for which the following expression is true:\r\n\r\n```cs\r\noriginalString.Substring(index).StartsWith(value, comparisonType) == true\r\n```\r\n\r\n(If there is no value _index_ which makes this expression true, `IndexOf` and `LastIndexOf` return -1.)\r\n\r\nGiven this definition, the result of `someInputString.LastIndexOf(\"\", StringComparison.Ordinal)` should be `someInputString.Length` for all possible input strings. This is because calling `someInputString.Substring(someInputString.Length)` will result in the empty string, and any string (including the empty string) trivially starts with itself. Furthermore, there is no larger value _index_ which can be passed into the `Substring` routine, as any such value would result in an exception.","Url":"https://github.com/dotnet/coreclr/issues/26609","RelatedDescription":"Open issue \"string.LastIndexOf(string.Empty, ...) returns wrong index\" (#26609)"},{"Id":"491126537","IsPullRequest":true,"CreatedAt":"2019-09-10T01:10:08","Actor":"stephentoub","Number":"26597","RawContent":null,"Title":"Remove use of non-generic WeakReference from corelib","State":"closed","Body":"Only remaining use is the one place it shows up in public API, in GC.GetGeneration(WeakReference).","Url":"https://github.com/dotnet/coreclr/pull/26597","RelatedDescription":"Closed or merged PR \"Remove use of non-generic WeakReference from corelib\" (#26597)"},{"Id":"491305246","IsPullRequest":true,"CreatedAt":"2019-09-10T01:07:56","Actor":"stephentoub","Number":"26602","RawContent":null,"Title":"Remove remaining String.ToLower() use from corelib","State":"closed","Body":"This should not be culture-specific.\r\n\r\nAlso happens to save a string allocation, but that's a drop in the bucket in this function.","Url":"https://github.com/dotnet/coreclr/pull/26602","RelatedDescription":"Closed or merged PR \"Remove remaining String.ToLower() use from corelib\" (#26602)"},{"Id":"491294941","IsPullRequest":true,"CreatedAt":"2019-09-10T01:07:45","Actor":"stephentoub","Number":"26601","RawContent":null,"Title":"Remove sub-array allocation from GetManifestResourceNamesList","State":"closed","Body":"Also removes dependency on System.Range and RuntimeHelpers.GetSubArray in a simple console app such that they can be trimmed away.","Url":"https://github.com/dotnet/coreclr/pull/26601","RelatedDescription":"Closed or merged PR \"Remove sub-array allocation from GetManifestResourceNamesList\" (#26601)"},{"Id":"491309455","IsPullRequest":true,"CreatedAt":"2019-09-10T01:07:33","Actor":"stephentoub","Number":"26603","RawContent":null,"Title":"Remove Lazy/LazyInitializer from mscorlib.h","State":"closed","Body":"We do not need to special-case these types for reflection invocation, and doing so is currently keeping them from being trimmed when not otherwise used.","Url":"https://github.com/dotnet/coreclr/pull/26603","RelatedDescription":"Closed or merged PR \"Remove Lazy/LazyInitializer from mscorlib.h\" (#26603)"},{"Id":"491395717","IsPullRequest":false,"CreatedAt":"2019-09-10T01:04:43","Actor":"GrabYourPitchforks","Number":"26608","RawContent":null,"Title":"ROS<T>.LastIndexOf(ROS<T> value) returns wrong index when 'value' is empty","State":"open","Body":"```cs\r\nConsole.WriteLine(\"Hello\".LastIndexOf(\"\"));\r\nConsole.WriteLine(\"Hello\".LastIndexOf(\"\", StringComparison.Ordinal));\r\nConsole.WriteLine(\"Hello\".AsSpan().LastIndexOf(\"\"));\r\nConsole.WriteLine(\"Hello\".AsSpan().LastIndexOf(\"\", StringComparison.Ordinal));\r\n\r\n// PRINTS:\r\n// 4\r\n// 4\r\n// 0\r\n// 4\r\n```\r\n\r\nThe behavior of `ROS<T>.LastIndexOf` differs based on whether the `char`-specific overload is called or whether the generic `T` overload is called, as shown above. We should make the behavior consistent.\r\n\r\n(To be fair, all of these APIs should be returning \"5\", not \"4\". I'll file a separate bug for that.)","Url":"https://github.com/dotnet/coreclr/issues/26608","RelatedDescription":"Open issue \"ROS<T>.LastIndexOf(ROS<T> value) returns wrong index when 'value' is empty\" (#26608)"},{"Id":"491381798","IsPullRequest":true,"CreatedAt":"2019-09-10T00:02:41","Actor":"sdmaclea","Number":"26607","RawContent":null,"Title":"Abort FuncEval on unaligned SP (for 3.1)","State":"open","Body":"Bug impact:\r\n  - #25753 will cause a process crash anytime we step through creation of a stack allocation with local variable view open. \r\n- This is a common scenario with the adoption of `Span<T>` and the recommendations to use `stackalloc` to improve performance.\r\n- @davidfowl has indicated this is a significant user issue.\r\n\r\nPR Risks:\r\n - Change is limited to debugger `FuncEval` code.\r\n\r\nThis is #26572 from master for 3.1\r\nFixes #25753 for 3.1","Url":"https://github.com/dotnet/coreclr/pull/26607","RelatedDescription":"Open PR \"Abort FuncEval on unaligned SP (for 3.1)\" (#26607)"},{"Id":"491378503","IsPullRequest":true,"CreatedAt":"2019-09-09T23:48:19","Actor":"josalem","Number":"26606","RawContent":null,"Title":"[test] Mark EventPipe tests JITStress Incompatible and Partially GC Stress Incompatible","State":"open","Body":"* Mark all EventPipe tests as JitOptimizationSensitive\r\n* Mark EventPipe GC tests as GCStressIncompatible\r\n* Reduce number of GCs triggered for EventPipe GC tests to make them more diagnosable in the event of failure\r\n\r\nChanges in response to #26590.  This should mitigate some recurring test failures.\r\n\r\nJIT stress would cause EventSource to write and process events much slower than usual which would cause timing issues on release builds, e.g., the test would run in <1s but it could take longer than a second for a custom EventSource to write the first event.\r\n\r\nGC Stress seems to be either changing the behavior of the GC such that it doesn't match the test's checks or is causing issues with the trace.  For now, we will disable the relevant tests under GC stress and investigate.\r\n\r\nCC - @tommcdon ","Url":"https://github.com/dotnet/coreclr/pull/26606","RelatedDescription":"Open PR \"[test] Mark EventPipe tests JITStress Incompatible and Partially GC Stress Incompatible\" (#26606)"},{"Id":"491378490","IsPullRequest":true,"CreatedAt":"2019-09-09T23:48:16","Actor":"tarekgh","Number":"26605","RawContent":null,"Title":"Fix Running .NET Core Under Windows App Compat Shim","State":"open","Body":"Fixes https://github.com/dotnet/coreclr/issues/26479\r\n\r\n.NET Core uses Windows features called sort handles for perf reason to speed up the collation operations (e.g. string comparisons). When enabling Windows app compat shim (e.g. Windows 7 compatibility mode), the calls uses sort handles will fail which cause all collation operations to fail.\r\nThe fix here is to detect if the sort handles work before using it to ensure successful run.","Url":"https://github.com/dotnet/coreclr/pull/26605","RelatedDescription":"Open PR \"Fix Running .NET Core Under Windows App Compat Shim\" (#26605)"},{"Id":"491235328","IsPullRequest":true,"CreatedAt":"2019-09-09T23:46:54","Actor":"sdmaclea","Number":"26598","RawContent":null,"Title":"Abort FuncEval on unaligned SP (for 3.0)","State":"closed","Body":"Bug impact:\r\n  - #25753 will cause a process crash anytime we step through creation of a stack allocation with local variable view open. \r\n- This is a common scenario with the adoption of `Span<T>` and the recommendations to use `stackalloc` to improve performance.\r\n- @davidfowl has indicated this is a significant user issue. He would like the fix in 3.0.\r\n\r\nPR Risks:\r\n - Change is limited to debugger `FuncEval` code.\r\n\r\nThis is #26572 from master for 3.0 (not yet merged)\r\nFixes #25753 for 3.0","Url":"https://github.com/dotnet/coreclr/pull/26598","RelatedDescription":"Closed or merged PR \"Abort FuncEval on unaligned SP (for 3.0)\" (#26598)"},{"Id":"491250208","IsPullRequest":true,"CreatedAt":"2019-09-09T23:36:07","Actor":"sandreenko","Number":"26599","RawContent":null,"Title":"Fix the loop iterator in `CheckNoTransformableIndirectCallsRemain`.","State":"closed","Body":"The error was made in my PR from 2017 https://github.com/dotnet/coreclr/commit/654fed28001085adc162de1ea3207e9a22230235 and then that function was a few times moved/renamed.","Url":"https://github.com/dotnet/coreclr/pull/26599","RelatedDescription":"Closed or merged PR \"Fix the loop iterator in `CheckNoTransformableIndirectCallsRemain`.\" (#26599)"},{"Id":"491277028","IsPullRequest":true,"CreatedAt":"2019-09-09T19:17:09","Actor":"stephentoub","Number":"26600","RawContent":null,"Title":"Remove fcall duplication with {Try}EnsureSufficientExecutionStack","State":"open","Body":"The non-try variant can be implemented easily as a managed wrapper around the try variant.  This also then means the vm no longer needs to know about InsufficientExecutionStackException.","Url":"https://github.com/dotnet/coreclr/pull/26600","RelatedDescription":"Open PR \"Remove fcall duplication with {Try}EnsureSufficientExecutionStack\" (#26600)"},{"Id":"490747026","IsPullRequest":true,"CreatedAt":"2019-09-09T17:11:02","Actor":"dotnet-maestro[bot]","Number":"26587","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:16d3c6aa-851a-4668-94d4-08d690bc143a)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190908.6\r\n- **Date Produced**: 9/9/2019 4:54 AM\r\n- **Commit**: cc51975a897cb803f1ad76b6b93b2ebd4581bca4\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.Platforms** -> 5.0.0-alpha1.19458.6\r\n  - **Microsoft.Private.CoreFx.NETCoreApp** -> 5.0.0-alpha1.19458.6\r\n\r\n[marker]: <> (End:16d3c6aa-851a-4668-94d4-08d690bc143a)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/26587","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#26587)"},{"Id":"490747937","IsPullRequest":true,"CreatedAt":"2019-09-09T17:10:33","Actor":"dotnet-maestro[bot]","Number":"26588","RawContent":null,"Title":"[release/3.0] Update dependencies from dnceng/internal/dotnet-optimization","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2b95475b-d147-4b39-6306-08d6bc51899c)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-optimization\r\n- **Build**: 20190909.1\r\n- **Date Produced**: 9/9/2019 11:22 AM\r\n- **Commit**: 48fd58c24cddbc6c0b0de1c00204aae1170f4864\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **optimization.IBC.CoreCLR** -> 99.99.99-master-20190909.1\r\n  - **optimization.PGO.CoreCLR** -> 99.99.99-master-20190909.1\r\n\r\n[marker]: <> (End:2b95475b-d147-4b39-6306-08d6bc51899c)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/26588","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dnceng/internal/dotnet-optimization\" (#26588)"},{"Id":"491045168","IsPullRequest":true,"CreatedAt":"2019-09-09T16:58:26","Actor":"marek-safar","Number":"26596","RawContent":null,"Title":"Move TypedReference::SetTypedReference exception throw to managed","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/26596","RelatedDescription":"Closed or merged PR \"Move TypedReference::SetTypedReference exception throw to managed\" (#26596)"},{"Id":"491029261","IsPullRequest":true,"CreatedAt":"2019-09-09T15:40:15","Actor":"kbaladurin","Number":"26594","RawContent":null,"Title":"Linux/x86: fix build","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/pull/26594","RelatedDescription":"Closed or merged PR \"Linux/x86: fix build\" (#26594)"},{"Id":"490884375","IsPullRequest":false,"CreatedAt":"2019-09-09T15:21:22","Actor":"VincentBu","Number":"26591","RawContent":null,"Title":"GCFinalizers","State":"closed","Body":"","Url":"https://github.com/dotnet/coreclr/issues/26591","RelatedDescription":"Closed issue \"GCFinalizers\" (#26591)"},{"Id":"490753538","IsPullRequest":true,"CreatedAt":"2019-09-09T13:50:18","Actor":"stephentoub","Number":"26589","RawContent":null,"Title":"Replace HashHelpers.Combine with HashCode.Combine","State":"closed","Body":"Fixes https://github.com/dotnet/coreclr/issues/26582\r\ncc: @jkotas","Url":"https://github.com/dotnet/coreclr/pull/26589","RelatedDescription":"Closed or merged PR \"Replace HashHelpers.Combine with HashCode.Combine\" (#26589)"},{"Id":"490681541","IsPullRequest":false,"CreatedAt":"2019-09-09T13:50:17","Actor":"stephentoub","Number":"26582","RawContent":null,"Title":"HashCode.Combine perf is worse than HashHelpers.Combine","State":"closed","Body":"We made the public HashCode.Combine method so that developers would use it any time combining is necessary in their own hash code computations.  But we use it internally in very few of our own GetHashCode methods, instead preferring to use either the internal HashHelpers.Combine:\r\nhttps://github.com/dotnet/coreclr/blob/456afea9fbe721e57986a21eb3b4bb1c9c7e4c56/src/System.Private.CoreLib/shared/System/Numerics/Hashing/HashHelpers.cs#L11-L17\r\nor using a custom combine that's generally something as simple as an xor.  HashCode.Combine is 3-4x slower than HashHelpers.Combine in today use, e.g. if used in ValueTuple.GetHashCode.\r\n\r\nWe should either determine that the extra benefits of HashCode.Combine are \"worth it\" and use it everywhere instead of HashHelpers.Combine, or we should fix HashCode.Combine's perf (likely at the expense of those \"benefits\") so that it becomes usable.  At the moment if we're not comfortable using it ourselves, it's unclear how we could promote it for others to use.","Url":"https://github.com/dotnet/coreclr/issues/26582","RelatedDescription":"Closed issue \"HashCode.Combine perf is worse than HashHelpers.Combine\" (#26582)"},{"Id":"490894953","IsPullRequest":true,"CreatedAt":"2019-09-09T12:57:40","Actor":"Dotnet-GitSync-Bot","Number":"26593","RawContent":null,"Title":"Mirror changes from dotnet/corert,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/corert,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @MichalStrehovsky","Url":"https://github.com/dotnet/coreclr/pull/26593","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corert,corefx\" (#26593)"},{"Id":"491041820","IsPullRequest":true,"CreatedAt":"2019-09-09T11:35:13","Actor":"MichalStrehovsky","Number":"26595","RawContent":null,"Title":"Add crossgen2 smoke test","State":"open","Body":"This is #26513 with an extra smoke test. If things pass, we can merge it instead of #26513. Otherwise there's more work to do.","Url":"https://github.com/dotnet/coreclr/pull/26595","RelatedDescription":"Open PR \"Add crossgen2 smoke test\" (#26595)"},{"Id":"490884381","IsPullRequest":false,"CreatedAt":"2019-09-09T05:29:21","Actor":"VincentBu","Number":"26592","RawContent":null,"Title":"Test failed: tracing\\eventpipe\\eventsvalidation\\GCFinalizers\\GCFinalizers.cmd","State":"open","Body":"**Job:**\r\n[coreclr-gcstress0x3-gcstress0xc 20190908.1](https://dev.azure.com/dnceng/public/_build/results?buildId=344088)\r\n\r\n**Detail:**\r\nhttps://helix.dot.net/api/2019-06-17/jobs/ba50dff3-c634-4875-a461-859203144e16/workitems/PayloadGroup0/console\r\n\r\n**OS & Arch:**\r\nWindows x64\r\n\r\n**Mode:**\r\nset COMPlus_TieredCompilation=0\r\nset COMPlus_GCStress=0x3\r\n\r\n**Note:**\r\nThis failure **repro** on windows x64 machine.\r\n\r\n**Log:**\r\n```\r\ntracing\\eventpipe\\eventsvalidation\\GCFinalizers\\GCFinalizers.cmd [FAIL]\r\n      \r\n      Return code:      1\r\n      Raw output file:      C:\\dotnetbuild\\work\\ba50dff3-c634-4875-a461-859203144e16\\Work\\d523834e-3139-47f7-88c9-e0839460437d\\Exec\\tracing\\eventpipe\\Reports\\tracing.eventpipe\\eventsvalidation\\GCFinalizers\\GCFinalizers.output.txt\r\n      Raw output:\r\n      BEGIN EXECUTION\r\n       \"C:\\dotnetbuild\\work\\ba50dff3-c634-4875-a461-859203144e16\\Payload\\corerun.exe\" GCFinalizers.dll \r\n        0.0s: ==TEST STARTING==\r\n        1.3s: Connecting to EventPipe...\r\n        3.1s: Connected to EventPipe with sessionID '0x22419d110a0'\r\n        4.4s: Started sending sentinel events...\r\n        8.2s: Creating EventPipeEventSource...\r\n       18.9s: EventPipeEventSource created\r\n       19.8s: Dynamic.All callback registered\r\n       19.8s: Running optional trace validator\r\n       26.4s: Finished running optional trace validator\r\n       26.4s: Starting stream processing...\r\n       49.6s: Saw new provider 'Microsoft-Windows-DotNETRuntime'\r\n       80.1s: Saw new provider 'Microsoft-DotNETCore-SampleProfiler'\r\n      438.0s: Saw sentinel event\r\n      438.1s: Starting event generating action...\r\n      438.1s: Stopped sending sentinel events\r\n      438.2s: Called GC.WaitForPendingFinalizers() 0 times...\r\n      444.0s: Called GC.WaitForPendingFinalizers() 100 times...\r\n      457.1s: Called GC.WaitForPendingFinalizers() 200 times...\r\n      461.6s: Called GC.WaitForPendingFinalizers() 300 times...\r\n      462.0s: Called GC.WaitForPendingFinalizers() 400 times...\r\n      477.1s: Called GC.WaitForPendingFinalizers() 500 times...\r\n      492.2s: Called GC.WaitForPendingFinalizers() 600 times...\r\n      500.0s: Called GC.WaitForPendingFinalizers() 700 times...\r\n      504.5s: Called GC.WaitForPendingFinalizers() 800 times...\r\n      512.7s: Called GC.WaitForPendingFinalizers() 900 times...\r\n      526.2s: Stopping event generating action\r\n      526.2s: Sending StopTracing command...\r\n      1740.1s: Saw new provider 'Microsoft-Windows-DotNETRuntimeRundown'\r\n      1743.5s: Finished StopTracing command\r\n      1745.8s: Stopping stream processing\r\n      1745.8s: Dropped 1476002 events\r\n      1746.0s: Reader task finished\r\n      1746.0s: Validating optional callback...\r\n      1746.0s: Event counts validation\r\n      1746.0s: GCFinalizersEndEvents: 735\r\n      1746.0s: GCFinalizersStartEvents: 737\r\n      1746.0s: ==TEST FINISHED: FAILED!==\r\n      Expected: 100\r\n      Actual: -1\r\n      END EXECUTION - FAILED\r\n      FAILED\r\n      Test Harness Exitcode is : 1\r\n```\r\n\r\n","Url":"https://github.com/dotnet/coreclr/issues/26592","RelatedDescription":"Open issue \"Test failed: tracing\\eventpipe\\eventsvalidation\\GCFinalizers\\GCFinalizers.cmd\" (#26592)"},{"Id":"490863533","IsPullRequest":false,"CreatedAt":"2019-09-09T03:58:03","Actor":"VincentBu","Number":"26590","RawContent":null,"Title":"Test failed: tracing/eventpipe/eventsvalidation/GCEvents/GCEvents.sh","State":"open","Body":"**Job:**\r\n[coreclr-gcstress-extra 20190907.1](https://dev.azure.com/dnceng/public/_build/results?buildId=343741)\r\n\r\n**Detail:**\r\nLinux x64: https://helix.dot.net/api/2019-06-17/jobs/95ccd71a-b8b9-444c-976e-d0058df23782/workitems/PayloadGroup0/console\r\nwindows x64: https://helix.dot.net/api/2019-06-17/jobs/71500183-fcb6-48db-9fb9-ab9083750592/workitems/PayloadGroup0/console\r\nWindows x86: https://helix.dot.net/api/2019-06-17/jobs/b6387512-4245-4192-a9e5-4a185314459d/workitems/PayloadGroup0/console\r\n\r\n**OS & Arch:**\r\nWindows x64\r\nWindows x86\r\nLinux x64\r\n\r\n**Mode:**\r\nwindows x64:\r\n    set COMPlus_TieredCompilation=0\r\n    set COMPlus_GCStress=0xC\r\n    set COMPlus_ReadyToRun=0\r\n    set COMPlus_ZapDisable=1\r\nwindows x86:\r\n    set COMPlus_TieredCompilation=0\r\n    set COMPlus_GCStress=0xC\r\n    set COMPlus_JitStress=2\r\n    set COMPlus_ReadyToRun=0\r\n    set COMPlus_ZapDisable=1\r\nLinux x64:\r\n    export COMPlus_TieredCompilation=0\r\n    export COMPlus_GCStress=0xC\r\n    export COMPlus_ReadyToRun=0\r\n    export COMPlus_ZapDisable=1\r\n\r\n**Note:**\r\nThis failure **repro on** our windows x64 and Linux x64 machines but **doesn't repro** on windows x86. \r\n\r\n**Log:**\r\n```\r\ntracing/eventpipe/eventsvalidation/GCEvents/GCEvents.sh [FAIL]\r\n      \r\n      Return code:      1\r\n      Raw output file:      /home/helixbot/work/95ccd71a-b8b9-444c-976e-d0058df23782/Work/5257efa6-45e9-4c67-969d-4fa1cf880b71/Exec/tracing/eventpipe/Reports/tracing.eventpipe/eventsvalidation/GCEvents/GCEvents.output.txt\r\n      Raw output:\r\n      BEGIN EXECUTION\r\n      /home/helixbot/work/95ccd71a-b8b9-444c-976e-d0058df23782/Payload/corerun GCEvents.dll ''\r\n        0.0s: ==TEST STARTING==\r\n        0.9s: Connecting to EventPipe...\r\n        9.5s: Connected to EventPipe with sessionID '0x7fb8c4000f60'\r\n       10.2s: Started sending sentinel events...\r\n       10.2s: Creating EventPipeEventSource...\r\n       12.1s: EventPipeEventSource created\r\n       13.0s: Dynamic.All callback registered\r\n       13.0s: Running optional trace validator\r\n       23.3s: Finished running optional trace validator\r\n       23.3s: Starting stream processing...\r\n       25.1s: Saw new provider 'Microsoft-Windows-DotNETRuntime'\r\n       25.2s: Saw new provider 'Microsoft-DotNETCore-SampleProfiler'\r\n       27.7s: Saw sentinel event\r\n       27.7s: Starting event generating action...\r\n       27.7s: Stopped sending sentinel events\r\n       27.7s: Called GC.Collect() 0 times...\r\n       27.8s: Called GC.Collect() 100 times...\r\n       27.9s: Called GC.Collect() 200 times...\r\n       28.0s: Called GC.Collect() 300 times...\r\n       28.1s: Called GC.Collect() 400 times...\r\n       28.2s: Called GC.Collect() 500 times...\r\n       28.2s: Called GC.Collect() 600 times...\r\n       28.3s: Called GC.Collect() 700 times...\r\n       28.4s: Called GC.Collect() 800 times...\r\n       28.5s: Called GC.Collect() 900 times...\r\n       28.5s: Stopping event generating action\r\n       28.5s: Sending StopTracing command...\r\n       28.9s: Saw new provider 'Microsoft-DotNETCore-EventPipe'\r\n       28.9s: Saw new provider 'Microsoft-Windows-DotNETRuntimeRundown'\r\n       29.0s: Stopping stream processing\r\n       29.0s: Dropped 0 events\r\n       29.1s: Finished StopTracing command\r\n       29.1s: Reader task finished\r\n       29.1s: Validating optional callback...\r\n       29.1s: Event counts validation\r\n       29.1s: GCStartEvents: 13635\r\n       29.1s: GCEndEvents: 13645\r\n       29.1s: GCStartStopResult check: False\r\n       29.1s: GCRestartEEStartEvents: 18510\r\n       29.1s: GCRestartEEStopEvents: 18510\r\n       29.1s: GCRestartEEStartStopResult check: True\r\n       29.1s: GCSuspendEEEvents: 18418\r\n       29.1s: GCSuspendEEEndEvents: 18417\r\n       29.1s: GCSuspendEEStartStopResult check: True\r\n       29.2s: ==TEST FINISHED: FAILED!==\r\n      Expected: 100\r\n      Actual: 255\r\n      END EXECUTION - FAILED\r\n      Test Harness Exitcode is : 1\r\n```","Url":"https://github.com/dotnet/coreclr/issues/26590","RelatedDescription":"Open issue \"Test failed: tracing/eventpipe/eventsvalidation/GCEvents/GCEvents.sh\" (#26590)"},{"Id":"490724064","IsPullRequest":false,"CreatedAt":"2019-09-08T11:26:40","Actor":"mlevinmail","Number":"26585","RawContent":null,"Title":"IFormatProvider is passed into a function but never referenced. Seems odd","State":"closed","Body":"https://github.com/dotnet/coreclr/blob/456afea9fbe721e57986a21eb3b4bb1c9c7e4c56/src/System.Private.CoreLib/shared/System/Boolean.cs#L93","Url":"https://github.com/dotnet/coreclr/issues/26585","RelatedDescription":"Closed issue \"IFormatProvider is passed into a function but never referenced. Seems odd\" (#26585)"},{"Id":"490731544","IsPullRequest":true,"CreatedAt":"2019-09-08T09:23:48","Actor":"marek-safar","Number":"26586","RawContent":null,"Title":"Remove unused Memcpy methods from shared Buffer implementation","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/26586","RelatedDescription":"Open PR \"Remove unused Memcpy methods from shared Buffer implementation\" (#26586)"},{"Id":"490701827","IsPullRequest":true,"CreatedAt":"2019-09-08T02:29:11","Actor":"stephentoub","Number":"26584","RawContent":null,"Title":"Remove some boxing from tuples with >= 8 elements","State":"open","Body":"Remove some boxing from tuples with >= 8 elements\r\n\r\nTake advantage of https://github.com/dotnet/coreclr/pull/14698 to avoid boxing the TRest argument and improve devirtualization.\r\n\r\n|     Method | Toolchain |       Mean |     Error | Ratio | Allocated |\r\n|----------- |---------- |-----------:|----------:|------:|----------:|\r\n|       GHC7 |       Old |   2.043 ns | 0.0100 ns |  1.00 |         - |\r\n|       GHC7 |       New |   2.042 ns | 0.0135 ns |  1.00 |         - |\r\n|            |           |            |           |       |           |\r\n|       GHC8 |       Old |   8.489 ns | 0.0917 ns |  1.00 |      24 B |\r\n|       GHC8 |       New |   3.230 ns | 0.0159 ns |  0.38 |         - |\r\n|            |           |            |           |       |           |\r\n|       GHC9 |       Old |   9.062 ns | 0.0459 ns |  1.00 |      24 B |\r\n|       GHC9 |       New |   3.230 ns | 0.0194 ns |  0.36 |         - |\r\n|            |           |            |           |       |           |\r\n|      GHC10 |       Old |   9.644 ns | 0.1006 ns |  1.00 |      32 B |\r\n|      GHC10 |       New |   3.479 ns | 0.0161 ns |  0.36 |         - |\r\n|            |           |            |           |       |           |\r\n|  ToString7 |       Old | 214.852 ns | 0.4342 ns |  1.00 |     208 B |\r\n|  ToString7 |       New | 209.641 ns | 0.5081 ns |  0.98 |     208 B |\r\n|            |           |            |           |       |           |\r\n|  ToString8 |       Old |   257.0 ns |  4.019 ns |  1.00 |     280 B |\r\n|  ToString8 |       New |   242.9 ns |  2.952 ns |  0.95 |     256 B |\r\n|            |           |            |           |       |           |\r\n|  ToString9 |       Old | 268.936 ns | 1.0210 ns |  1.00 |     288 B |\r\n|  ToString9 |       New | 266.940 ns | 0.9469 ns |  0.99 |     264 B |\r\n|            |           |            |           |       |           |\r\n| ToString10 |       Old | 318.626 ns | 0.9727 ns |  1.00 |     416 B |\r\n| ToString10 |       New | 307.865 ns | 1.2496 ns |  0.97 |     384 B |\r\n|            |           |            |           |       |           |\r\n|     Index7 |       Old |   4.067 ns | 0.0813 ns |  1.00 |      24 B |\r\n|     Index7 |       New |   3.988 ns | 0.0256 ns |  0.98 |      24 B |\r\n|            |           |            |           |       |           |\r\n|     Index8 |       Old |   7.906 ns | 0.0354 ns |  1.00 |      48 B |\r\n|     Index8 |       New |   5.134 ns | 0.0505 ns |  0.65 |      24 B |\r\n|            |           |            |           |       |           |\r\n|     Index9 |       Old |   7.607 ns | 0.0418 ns |  1.00 |      48 B |\r\n|     Index9 |       New |   4.996 ns | 0.0926 ns |  0.66 |      24 B |\r\n|            |           |            |           |       |           |\r\n|    Index10 |       Old |   8.989 ns | 0.0542 ns |  1.00 |      56 B |\r\n|    Index10 |       New |   5.113 ns | 0.0422 ns |  0.57 |      24 B |\r\n\r\n```C#\r\nusing BenchmarkDotNet.Attributes;\r\nusing BenchmarkDotNet.Running;\r\nusing System.Runtime.CompilerServices;\r\n\r\n[MemoryDiagnoser]\r\npublic class Program\r\n{\r\n    public static void Main(string[] args) => BenchmarkSwitcher.FromTypes(new[] { typeof(Program) }).Run(args);\r\n\r\n    private (int, int, int, int, int, int, int) _v7 = (1, 2, 3, 4, 5, 6, 7);\r\n    private (int, int, int, int, int, int, int, int) _v8 = (1, 2, 3, 4, 5, 6, 7, 8);\r\n    private (int, int, int, int, int, int, int, int, int) _v9 = (1, 2, 3, 4, 5, 6, 7, 8, 9);\r\n    private (int, int, int, int, int, int, int, int, int, int) _v10 = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\r\n\r\n    [Benchmark] public int GHC7() => _v7.GetHashCode();\r\n    [Benchmark] public int GHC8() => _v8.GetHashCode();\r\n    [Benchmark] public int GHC9() => _v9.GetHashCode();\r\n    [Benchmark] public int GHC10() => _v10.GetHashCode();\r\n\r\n    [Benchmark] public string ToString7() => _v7.ToString();\r\n    [Benchmark] public string ToString8() => _v8.ToString();\r\n    [Benchmark] public string ToString9() => _v9.ToString();\r\n    [Benchmark] public string ToString10() => _v10.ToString();\r\n\r\n    [Benchmark] public object Index7() => ((ITuple)_v7)[6];\r\n    [Benchmark] public object Index8() => ((ITuple)_v8)[7];\r\n    [Benchmark] public object Index9() => ((ITuple)_v9)[8];\r\n    [Benchmark] public object Index10() => ((ITuple)_v10)[9];\r\n}\r\n```\r\n\r\ncc: @AndyAyersMS, @jcouv","Url":"https://github.com/dotnet/coreclr/pull/26584","RelatedDescription":"Open PR \"Remove some boxing from tuples with >= 8 elements\" (#26584)"},{"Id":"490684573","IsPullRequest":true,"CreatedAt":"2019-09-07T21:59:24","Actor":"trylek","Number":"26583","RawContent":null,"Title":"Refactor osGroup / osIdentifier pairs to osGroup / osSubgroup","State":"open","Body":"Based on my experiments with the change to build managed *nix test\r\nartifacts on OSX I believe we're hitting the template expansion\r\nlimit very narrowly. For this reason I'm experimenting with reducing\r\nthe expansion tree by switching over osIdentifier to be a straight\r\nconcatenation of osGroup and osSubgroup. I believe it has the\r\npotential to reduce the expansion size and it cleans up the scripts\r\nin various places.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/coreclr/pull/26583","RelatedDescription":"Open PR \"Refactor osGroup / osIdentifier pairs to osGroup / osSubgroup\" (#26583)"},{"Id":"490673642","IsPullRequest":true,"CreatedAt":"2019-09-07T19:50:35","Actor":"trylek","Number":"26581","RawContent":null,"Title":"Reuse managed test components across all *nix flavors","State":"open","Body":"Today CoreCLR pipelines build tests on the same OS flavors they are\r\nsupposed to run on. This is wasteful as we produce identical\r\nmanaged test artifacts on OSX, Linux, Linux_musl and Linux_rhel6.\r\n\r\nWith this change, the pipeline construction analyzes the set of\r\nOS / architecture combos to run tests on and picks the \"best\"\r\nOS (or rather the OS that runs on the fastest lab HW) for build\r\nof the managed test components.\r\n\r\nNative test components are newly built as part of the product build\r\nas these do need to be built separately for each targeting OS.\r\nProduct build zips them up and publishes them to Azure as an artifact\r\nthat gets subsequently downloaded and stitched together with\r\nmanaged test components in the test run job.\r\n\r\nImplementation-wise the change basically proceeds in two steps.\r\nIn platform-matrix.yml we first identify the exact set of OS / arch\r\ncombos to run. Using this information we subsequently identify\r\nthe OS to build managed components on for each combo; this information\r\nis passed to test-job.yml which skips managed test build for those\r\nOS-es that are expecting the managed components to be built on a\r\ndifferent OS.\r\n\r\nProduct build (build-job.yml) contains the additional logic to\r\nbuild native test artifacts and publish them to Azure for perusal\r\nby the test run job that downloads and unzips both managed and native\r\nartifacts into the final test folder before publishing to Helix.\r\n\r\nThanks\r\n\r\nTomas\r\n\r\nP.S. The change is currently somewhat noisy as it includes my\r\nosGroup / osSubgroup cleanup change due to significant overlap.\r\nI assume that I'll initially merge in the cleanup and then I'll\r\npublish a rebased version of this change that should be much simpler.","Url":"https://github.com/dotnet/coreclr/pull/26581","RelatedDescription":"Open PR \"Reuse managed test components across all *nix flavors\" (#26581)"}],"ResultType":"GitHubIssue"},"CLI-Issues":{"Issues":[{"Id":"491257696","IsPullRequest":true,"CreatedAt":"2019-09-10T04:10:52","Actor":"dotnet-maestro[bot]","Number":"12566","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190909.31\r\n- **Date Produced**: 9/10/2019 2:07 AM\r\n- **Commit**: 2aa1111d83976a4fba3ab87aa442e12cf5ddbbfd\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19459.31\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19459.31\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19459.31\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19459.31\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19459.31\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12566","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12566)"},{"Id":"491425817","IsPullRequest":true,"CreatedAt":"2019-09-10T04:00:49","Actor":"dotnet-maestro[bot]","Number":"12572","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190909.32\r\n- **Date Produced**: 9/10/2019 2:12 AM\r\n- **Commit**: 009370332eff38e47bf22a1d5f9e01e7f2033675\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.1.0-preview1.19459.32\r\n  - **Microsoft.NET.HostModel** -> 3.1.0-preview1.19459.32\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.1.0-preview1.19459.32\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.1.0-preview1.19459.32\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.1.0-preview1.19459.32\r\n\r\n[marker]: <> (End:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12572","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#12572)"},{"Id":"491397048","IsPullRequest":true,"CreatedAt":"2019-09-10T01:45:41","Actor":"dotnet-maestro[bot]","Number":"12569","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190909.29\r\n- **Date Produced**: 9/9/2019 11:59 PM\r\n- **Commit**: d4bf4a52b2cad3dc6861f1663a22cda104fade18\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.1.0-preview1.19459.29\r\n  - **Microsoft.NET.HostModel** -> 3.1.0-preview1.19459.29\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.1.0-preview1.19459.29\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.1.0-preview1.19459.29\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.1.0-preview1.19459.29\r\n\r\n[marker]: <> (End:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12569","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#12569)"},{"Id":"491403940","IsPullRequest":false,"CreatedAt":"2019-09-10T01:40:31","Actor":"natenho","Number":"12571","RawContent":null,"Title":"dotnet-install.sh not installing the latest SDK version","State":"open","Body":"## Steps to reproduce\r\n\r\n```console\r\n[root@centos-181 ~]# ./dotnet-install.sh\r\ndotnet_install: Warning: Unable to locate libunwind. Probable prerequisite missing; install libunwind.\r\ndotnet_install: Warning: Unable to locate libicu. Probable prerequisite missing; install libicu.\r\ndotnet-install: Downloading link: https://dotnetcli.azureedge.net/dotnet/Sdk/2.1.701/dotnet-sdk-2.1.701-linux-x64.tar.gz\r\n```\r\n\r\n## Expected  behavior\r\nTo install the latest SDK version (2.2)\r\n\r\n## Actual behavior\r\nIt's installing 2.1.701 version\r\n\r\nOriginal issue: https://github.com/dotnet/docs/issues/10447\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/12571","RelatedDescription":"Open issue \"dotnet-install.sh not installing the latest SDK version\" (#12571)"},{"Id":"491398478","IsPullRequest":false,"CreatedAt":"2019-09-10T01:16:49","Actor":"SidShetye","Number":"12570","RawContent":null,"Title":"dotnet help test is broken in 3.0.0-preview9 on Ubuntu 18.04 LTS","State":"open","Body":"## Steps to reproduce\r\n\r\nJust type `dotnet help test` in ubuntu 18.04 server \r\n\r\n```\r\ndemo@lab-ubuntu08:~$ dotnet help test\r\nSystem.ComponentModel.Win32Exception (2): No such file or directory\r\nat System.Diagnostics.Process.ForkAndExecProcess(String filename, String[] argv, String[] envp, String cwd, Boolean redirectStdin, Boolean redirectStdout, Boolean redirectStderr, Boolean setCredentials, UInt32 userId, UInt32 groupId, UInt32[] groups, Int32& stdinFd, Int32& stdoutFd, Int32& stderrFd, Boolean usesTerminal, Boolean throwOnNoExec)               \r\nat System.Diagnostics.Process.StartCore(ProcessStartInfo startInfo)                                                                                                                 \r\nat System.Diagnostics.Process.Start()                                                                                                                                               \r\nat Microsoft.DotNet.Tools.Help.HelpCommand.Execute()                                                                                                                                \r\nat Microsoft.DotNet.Tools.Help.HelpCommand.Run(String[] args)                                                                                                                       \r\nat Microsoft.DotNet.Cli.Program.ProcessArgs(String[] args, ITelemetry telemetryClient)                                                                                              \r\nat Microsoft.DotNet.Cli.Program.Main(String[] args)\r\n\r\n\r\ndemo@lab-ubuntu08:~$ uname -a\r\nLinux lab-ubuntu01 4.15.0-62-generic #69-Ubuntu SMP Wed Sep 4 20:55:53 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux\r\n```\r\n## Expected  behavior\r\n\r\nsee help\r\n\r\n## Actual behavior\r\n\r\nsee exception\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\n$ dotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview9-014004\r\n Commit:    8e7ef240a5\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  18.04\r\n OS Platform: Linux\r\n RID:         ubuntu.18.04-x64\r\n Base Path:   /home/sid/dotnet/sdk/3.0.100-preview9-014004/\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview9-19423-09\r\n  Commit:  2be172345a\r\n\r\n.NET Core SDKs installed:\r\n  3.0.100-preview9-014004 [/home/sid/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.App 3.0.0-preview9.19424.4 [/home/sid/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview9-19423-09 [/home/sid/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/12570","RelatedDescription":"Open issue \"dotnet help test is broken in 3.0.0-preview9 on Ubuntu 18.04 LTS\" (#12570)"},{"Id":"491379981","IsPullRequest":true,"CreatedAt":"2019-09-10T00:45:24","Actor":"dotnet-maestro[bot]","Number":"12568","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190909.5\r\n- **Date Produced**: 9/9/2019 11:54 PM\r\n- **Commit**: e090a0ff33f6aa4721c0678358075515dabe08ab\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-rc2.19459.5\r\n\r\n[marker]: <> (End:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12568","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore\" (#12568)"},{"Id":"491366322","IsPullRequest":true,"CreatedAt":"2019-09-09T23:55:54","Actor":"dotnet-maestro[bot]","Number":"12567","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190909.20\r\n- **Date Produced**: 9/9/2019 9:58 PM\r\n- **Commit**: 8fc96a3753161b71bee3aa2bc0dd39b18b6825e5\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.1.0-preview1.19459.20\r\n  - **Microsoft.NET.HostModel** -> 3.1.0-preview1.19459.20\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.1.0-preview1.19459.20\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.1.0-preview1.19459.20\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.1.0-preview1.19459.20\r\n\r\n[marker]: <> (End:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12567","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#12567)"},{"Id":"491229909","IsPullRequest":true,"CreatedAt":"2019-09-09T18:10:44","Actor":"dotnet-maestro[bot]","Number":"12565","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190909.6\r\n- **Date Produced**: 9/9/2019 4:21 PM\r\n- **Commit**: 6a4c697baaec12153b79e4a4d42f617e1f6c8f73\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19459.6\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19459.6\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19459.6\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19459.6\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19459.6\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12565","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12565)"},{"Id":"491151957","IsPullRequest":true,"CreatedAt":"2019-09-09T18:09:52","Actor":"dotnet-maestro[bot]","Number":"12563","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190909.3\r\n- **Date Produced**: 9/9/2019 5:33 PM\r\n- **Commit**: e15ea5563073273ee1aaa2cd7324d3fcf4002aba\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-rc2.19459.3\r\n\r\n[marker]: <> (End:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12563","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore\" (#12563)"},{"Id":"491221096","IsPullRequest":true,"CreatedAt":"2019-09-09T17:50:46","Actor":"dotnet-maestro[bot]","Number":"12564","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190909.3\r\n- **Date Produced**: 9/9/2019 3:38 PM\r\n- **Commit**: 3e53ca8efeb4e95105d526923a25ac10d2abc191\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.1.0-preview1.19459.3\r\n  - **Microsoft.NET.HostModel** -> 3.1.0-preview1.19459.3\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.1.0-preview1.19459.3\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.1.0-preview1.19459.3\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.1.0-preview1.19459.3\r\n\r\n[marker]: <> (End:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12564","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#12564)"},{"Id":"491072785","IsPullRequest":true,"CreatedAt":"2019-09-09T13:33:36","Actor":"dotnet-maestro[bot]","Number":"12562","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:15385bb3-00bd-44e3-5c73-08d72a4d3f20)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190908.2\r\n- **Date Produced**: 9/8/2019 11:40 PM\r\n- **Commit**: 29ee79a10c58dd6863a46157e374521cac610ad8\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19458.2\r\n\r\n[marker]: <> (End:15385bb3-00bd-44e3-5c73-08d72a4d3f20)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12562","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/arcade\" (#12562)"},{"Id":"491057613","IsPullRequest":true,"CreatedAt":"2019-09-09T12:56:29","Actor":"dotnet-maestro[bot]","Number":"12561","RawContent":null,"Title":"[master] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190908.1\r\n- **Date Produced**: 9/8/2019 12:35 PM\r\n- **Commit**: 463a5afda8cadc690e0f2025017f3bb24945023a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 5.0.0-alpha1.19458.1\r\n\r\n[marker]: <> (End:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12561","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/templating\" (#12561)"},{"Id":"491054415","IsPullRequest":true,"CreatedAt":"2019-09-09T12:39:16","Actor":"dotnet-maestro[bot]","Number":"12560","RawContent":null,"Title":"[master] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:145b81c3-fdcc-4cb6-70fa-08d645e3a44f)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190908.2\r\n- **Date Produced**: 9/8/2019 3:11 PM\r\n- **Commit**: 9c41e055ac37c7ef23bf17ef0a1d581592ad2933\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 5.0.100-alpha1.19458.2\r\n\r\n[marker]: <> (End:145b81c3-fdcc-4cb6-70fa-08d645e3a44f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12560","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/sdk\" (#12560)"},{"Id":"491009849","IsPullRequest":false,"CreatedAt":"2019-09-09T10:21:43","Actor":"IanKemp","Number":"12559","RawContent":null,"Title":"Different tools have different default verbosity levels","State":"open","Body":"For example, `dotnet clean` has a default verbosity of normal, but `dotnet pack` defaults to minimal.\r\n\r\n`dotnet --info` output: \r\n.NET Core SDK (reflecting any global.json):                                                                              Version:   3.0.100-preview9-014004                                                                                      Commit:    8e7ef240a5                                                                                                                                                                                                                          Runtime Environment:                                                                                                     OS Name:     Windows                                                                                                    OS Version:  10.0.18362                                                                                                 OS Platform: Windows                                                                                                    RID:         win10-x64                                                                                                  Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview9-014004\\                                                                                                                                                                              Host (useful for support):                                                                                                Version: 3.0.0-preview9-19423-09                                                                                        Commit:  2be172345a                                                                                                                                                                                                                           .NET Core SDKs installed:                                                                                                 2.1.508 [C:\\Program Files\\dotnet\\sdk]                                                                                   2.2.108 [C:\\Program Files\\dotnet\\sdk]                                                                                   3.0.100-preview9-014004 [C:\\Program Files\\dotnet\\sdk]                                                                                                                                                                                         .NET Core runtimes installed:                                                                                             Microsoft.AspNetCore.All 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]                               Microsoft.AspNetCore.All 2.2.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]                                Microsoft.AspNetCore.App 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]                               Microsoft.AspNetCore.App 2.2.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]                                Microsoft.AspNetCore.App 3.0.0-preview9.19424.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]               Microsoft.NETCore.App 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]                                     Microsoft.NETCore.App 2.2.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]                                      Microsoft.NETCore.App 3.0.0-preview9-19423-09 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]                    Microsoft.WindowsDesktop.App 3.0.0-preview9-19423-09 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]                                                                                                                            To install additional .NET Core runtimes or SDKs:                                                                         https://aka.ms/dotnet-download","Url":"https://github.com/dotnet/cli/issues/12559","RelatedDescription":"Open issue \"Different tools have different default verbosity levels\" (#12559)"},{"Id":"491007635","IsPullRequest":false,"CreatedAt":"2019-09-09T10:16:52","Actor":"IanKemp","Number":"12558","RawContent":null,"Title":"Allow dotnet pack to emit only the generated package paths, to allow piping to other commands","State":"open","Body":"`dotnet pack` on its default verbosity setting (minimal) outputs something like the following:\r\n\r\n```cli\r\nC:\\My\\Project> dotnet pack --nologo\r\n  Restore completed in 28.32ms for C:\\My\\Project\\MyProject.csproj.\r\n  MyProject -> C:\\My\\Project\\bin\\Debug\\netstandard2.0\\MyProject.dll\r\n  Successfully created package 'C:\\My\\Project\\bin\\Debug\\My.Project.1.0.0.nupkg'.\r\n```\r\n\r\nOn quiet verbosity, it emits nothing.\r\n\r\nFor my workflow, I need to know the filename(s) of the package(s) that are generated in order to do additional processing on them. I can get them by parsing the `dotnet pack` output, but this is obviously not optimal, and of course my parsing code will break if the output changes.\r\n\r\nWould this feature be useful to others, and how would/could it be implemented? I'm assuming that it's undesirable to modify the current behaviour of the verbosity switch, so this would require a new command-line switch, but I'm not sure if that is acceptable.\r\n\r\nThis could also be applied to other command, e.g. `build` to emit only the compiled DLLs.","Url":"https://github.com/dotnet/cli/issues/12558","RelatedDescription":"Open issue \"Allow dotnet pack to emit only the generated package paths, to allow piping to other commands\" (#12558)"},{"Id":"490899774","IsPullRequest":true,"CreatedAt":"2019-09-09T10:07:41","Actor":"dotnet-maestro[bot]","Number":"12555","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190908.15\r\n- **Date Produced**: 9/9/2019 8:25 AM\r\n- **Commit**: 7a24cba982af080eeb957380be1464e446643a39\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19458.15\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19458.15\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19458.15\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19458.15\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19458.15\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12555","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12555)"},{"Id":"491000381","IsPullRequest":false,"CreatedAt":"2019-09-09T10:01:23","Actor":"IanKemp","Number":"12557","RawContent":null,"Title":"Add --no-logo as a synonym for --nologo","State":"open","Body":"We already have `--no-build` and `--no-restore`, IMO it makes sense to make all \"no\" parameters behave similarly.\r\n\r\nRef https://github.com/dotnet/docs/issues/14163","Url":"https://github.com/dotnet/cli/issues/12557","RelatedDescription":"Open issue \"Add --no-logo as a synonym for --nologo\" (#12557)"},{"Id":"490911052","IsPullRequest":true,"CreatedAt":"2019-09-09T07:32:24","Actor":"dotnet-maestro[bot]","Number":"12556","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190908.7\r\n- **Date Produced**: 9/9/2019 6:56 AM\r\n- **Commit**: 03ba5738b3184e9227cd944670fcf3dd49007f74\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-rc2.19458.7\r\n\r\n[marker]: <> (End:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12556","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore\" (#12556)"},{"Id":"490883195","IsPullRequest":true,"CreatedAt":"2019-09-09T06:00:43","Actor":"dotnet-maestro[bot]","Number":"12554","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190908.13\r\n- **Date Produced**: 9/9/2019 4:15 AM\r\n- **Commit**: b9483216b383fc846d2497334768ff9d280431e6\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19458.13\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19458.13\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19458.13\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19458.13\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19458.13\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12554","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12554)"},{"Id":"490821079","IsPullRequest":true,"CreatedAt":"2019-09-08T23:45:42","Actor":"dotnet-maestro[bot]","Number":"12553","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190908.12\r\n- **Date Produced**: 9/8/2019 9:45 PM\r\n- **Commit**: b9483216b383fc846d2497334768ff9d280431e6\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19458.12\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19458.12\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19458.12\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19458.12\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19458.12\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12553","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12553)"},{"Id":"490803699","IsPullRequest":true,"CreatedAt":"2019-09-08T21:15:41","Actor":"dotnet-maestro[bot]","Number":"12552","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190908.10\r\n- **Date Produced**: 9/8/2019 7:29 PM\r\n- **Commit**: ff6613425cc51b64a6693a62e12eec23dfb0f6e2\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19458.10\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19458.10\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19458.10\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19458.10\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19458.10\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12552","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12552)"},{"Id":"490787462","IsPullRequest":true,"CreatedAt":"2019-09-08T19:10:44","Actor":"dotnet-maestro[bot]","Number":"12551","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190908.7\r\n- **Date Produced**: 9/8/2019 5:27 PM\r\n- **Commit**: 604ef7a61aea16bc63a402dfcb2bbe5e6b7c5971\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.1.0-preview1.19458.7\r\n  - **Microsoft.NET.HostModel** -> 3.1.0-preview1.19458.7\r\n  - **Microsoft.Extensions.DependencyModel** -> 3.1.0-preview1.19458.7\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 3.1.0-preview1.19458.7\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 3.1.0-preview1.19458.7\r\n\r\n[marker]: <> (End:caa76adf-c67f-4e61-5c6d-08d72a4d3f20)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12551","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/core-setup\" (#12551)"},{"Id":"490785897","IsPullRequest":true,"CreatedAt":"2019-09-08T18:55:43","Actor":"dotnet-maestro[bot]","Number":"12550","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190908.5\r\n- **Date Produced**: 9/8/2019 5:09 PM\r\n- **Commit**: ccfcd4a0bf2331cb3c098a7f9e57cd53897da821\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19458.5\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19458.5\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19458.5\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19458.5\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19458.5\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12550","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12550)"},{"Id":"490779527","IsPullRequest":true,"CreatedAt":"2019-09-08T17:55:43","Actor":"dotnet-maestro[bot]","Number":"12549","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190908.4\r\n- **Date Produced**: 9/8/2019 4:11 PM\r\n- **Commit**: 33a0bd1d2873e14e092aaae831f6383c2f8e0213\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19458.4\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19458.4\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19458.4\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19458.4\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19458.4\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12549","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12549)"},{"Id":"490770787","IsPullRequest":true,"CreatedAt":"2019-09-08T16:30:43","Actor":"dotnet-maestro[bot]","Number":"12548","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190908.1\r\n- **Date Produced**: 9/8/2019 2:46 PM\r\n- **Commit**: 1d3323621e83ee7e810895a69267b20e816f1571\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19458.1\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19458.1\r\n  - **Microsoft.Extensions.DependencyModel** -> 5.0.0-alpha1.19458.1\r\n  - **Microsoft.DotNet.PlatformAbstractions** -> 5.0.0-alpha1.19458.1\r\n  - **Microsoft.NETCore.DotNetHostResolver** -> 5.0.0-alpha1.19458.1\r\n\r\n[marker]: <> (End:ee51af1b-9763-4b75-e67a-08d6fb36d5a8)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12548","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#12548)"},{"Id":"490768026","IsPullRequest":true,"CreatedAt":"2019-09-08T16:05:50","Actor":"dotnet-maestro[bot]","Number":"12547","RawContent":null,"Title":"[release/3.0.100-preview9] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:96481569-9086-408c-b59d-08d7219835fd)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190908.1\r\n- **Date Produced**: 9/8/2019 2:53 PM\r\n- **Commit**: b09faf073550a3bf31f3be23ad0b2b7b4d80f4d5\r\n- **Branch**: refs/heads/release/3.0.100-preview9\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-rc1.19458.1\r\n\r\n[marker]: <> (End:96481569-9086-408c-b59d-08d7219835fd)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12547","RelatedDescription":"Closed or merged PR \"[release/3.0.100-preview9] Update dependencies from dotnet/sdk\" (#12547)"},{"Id":"490749615","IsPullRequest":true,"CreatedAt":"2019-09-08T13:15:45","Actor":"dotnet-maestro[bot]","Number":"12546","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:15385bb3-00bd-44e3-5c73-08d72a4d3f20)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190907.1\r\n- **Date Produced**: 9/7/2019 12:52 PM\r\n- **Commit**: c27945fc559ee636139d9f460db71242b16483e6\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19457.1\r\n\r\n[marker]: <> (End:15385bb3-00bd-44e3-5c73-08d72a4d3f20)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12546","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/arcade\" (#12546)"},{"Id":"490746540","IsPullRequest":true,"CreatedAt":"2019-09-08T12:45:39","Actor":"dotnet-maestro[bot]","Number":"12545","RawContent":null,"Title":"[master] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190907.1\r\n- **Date Produced**: 9/7/2019 12:38 PM\r\n- **Commit**: 1f32b8f99773cae5fbb21c6634504547f498ea28\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 5.0.0-alpha1.19457.1\r\n\r\n[marker]: <> (End:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12545","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/templating\" (#12545)"},{"Id":"490745938","IsPullRequest":true,"CreatedAt":"2019-09-08T12:38:59","Actor":"dotnet-maestro[bot]","Number":"12544","RawContent":null,"Title":"[master] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:145b81c3-fdcc-4cb6-70fa-08d645e3a44f)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190907.1\r\n- **Date Produced**: 9/7/2019 4:00 PM\r\n- **Commit**: 516921bf14612d3148b6d8c6cd9691783a254e0b\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 5.0.100-alpha1.19457.1\r\n\r\n[marker]: <> (End:145b81c3-fdcc-4cb6-70fa-08d645e3a44f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12544","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/sdk\" (#12544)"},{"Id":"490723162","IsPullRequest":true,"CreatedAt":"2019-09-08T08:27:41","Actor":"dotnet-maestro[bot]","Number":"12543","RawContent":null,"Title":"[release/3.0.100-preview9] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:47f91482-fcb1-4de7-7859-08d72198640e)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190907.4\r\n- **Date Produced**: 9/8/2019 7:52 AM\r\n- **Commit**: 49e84ee5ff04b17f35cacb9c1d6ccf52d8328dad\r\n- **Branch**: refs/heads/release/3.0-preview9\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-rc1.19457.4\r\n\r\n[marker]: <> (End:47f91482-fcb1-4de7-7859-08d72198640e)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12543","RelatedDescription":"Closed or merged PR \"[release/3.0.100-preview9] Update dependencies from aspnet/AspNetCore\" (#12543)"}],"ResultType":"GitHubIssue"},"Standard-Issues":{"Issues":[{"Id":"491269859","IsPullRequest":false,"CreatedAt":"2019-09-09T19:01:31","Actor":"saucecontrol","Number":"1527","RawContent":null,"Title":"Latest NETStandard.Library 2.0 NuGet package contains malformed XML docs","State":"open","Body":"This was reported in https://github.com/dotnet/standard/issues/666 but the issue was closed since the underlying problem had been resolved for 2.1 dev builds.  However, the latest available 2.0 package on NuGet [(version 2.0.3)](https://www.nuget.org/packages/NETStandard.Library/2.0.3) still has a malformed netstandard.xml.  Is it possible to get an updated 2.0 package published with corrected docs?","Url":"https://github.com/dotnet/standard/issues/1527","RelatedDescription":"Open issue \"Latest NETStandard.Library 2.0 NuGet package contains malformed XML docs\" (#1527)"},{"Id":"490630188","IsPullRequest":true,"CreatedAt":"2019-09-09T18:36:21","Actor":"dotnet-maestro[bot]","Number":"1516","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:29f70c24-3711-40be-9246-08d6c732a216)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190908.2\r\n- **Date Produced**: 9/8/2019 11:40 PM\r\n- **Commit**: 29ee79a10c58dd6863a46157e374521cac610ad8\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19458.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19458.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19458.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19458.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19458.2\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19458.2\r\n\r\n[marker]: <> (End:29f70c24-3711-40be-9246-08d6c732a216)\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1516","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/arcade\" (#1516)"},{"Id":"491139057","IsPullRequest":true,"CreatedAt":"2019-09-09T14:40:22","Actor":"yousiftouma","Number":"1526","RawContent":null,"Title":"Add ImageConverter to System.Drawing","State":"open","Body":"Not sure exactly what is needed for this to work, but happy to help doing it. Drawing inspiration from https://github.com/dotnet/standard/pull/803\r\n\r\nDoes Image need to be added as well? It seems to be available https://apisof.net/catalog/System.Drawing.Image","Url":"https://github.com/dotnet/standard/pull/1526","RelatedDescription":"Open PR \"Add ImageConverter to System.Drawing\" (#1526)"},{"Id":"491067571","IsPullRequest":true,"CreatedAt":"2019-09-09T12:47:20","Actor":"dotnet-maestro[bot]","Number":"1525","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:8358c059-232d-4dac-c08d-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190908.3\r\n- **Date Produced**: 9/8/2019 5:06 PM\r\n- **Commit**: 173d70b99a5dbb3ff9298a6e2e9c7f7e7b56dd7c\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-rc2.19458.3\r\n  - **System.Reflection.Emit** -> 4.6.0-rc2.19458.3\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-rc2.19458.3\r\n\r\n[marker]: <> (End:8358c059-232d-4dac-c08d-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1525","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/corefx\" (#1525)"},{"Id":"491067426","IsPullRequest":true,"CreatedAt":"2019-09-09T12:47:06","Actor":"dotnet-maestro[bot]","Number":"1524","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190908.6\r\n- **Date Produced**: 9/9/2019 4:54 AM\r\n- **Commit**: cc51975a897cb803f1ad76b6b93b2ebd4581bca4\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19458.6\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19458.6\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19458.6\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1524","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1524)"},{"Id":"491053506","IsPullRequest":true,"CreatedAt":"2019-09-09T12:12:03","Actor":"dotnet-maestro[bot]","Number":"1523","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190908.2\r\n- **Date Produced**: 9/8/2019 11:40 PM\r\n- **Commit**: 29ee79a10c58dd6863a46157e374521cac610ad8\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19458.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19458.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19458.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19458.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19458.2\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19458.2\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1523","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1523)"},{"Id":"490758231","IsPullRequest":false,"CreatedAt":"2019-09-08T14:02:47","Actor":"virzak","Number":"1522","RawContent":null,"Title":"MemoryMarshal.AsRef is missing","State":"open","Body":"AsRef [exists](https://github.com/dotnet/corefx/blob/838832e2ecac9f81b5a5649bfac2fc835db76c1e/src/System.Memory/ref/System.Memory.cs#L618) in .NET Core, but not in .NET Standard.\r\n\r\nPreviously mentioned it [here](https://github.com/dotnet/standard/pull/1198#issuecomment-528371887)","Url":"https://github.com/dotnet/standard/issues/1522","RelatedDescription":"Open issue \"MemoryMarshal.AsRef is missing\" (#1522)"},{"Id":"490748507","IsPullRequest":true,"CreatedAt":"2019-09-08T12:40:24","Actor":"dotnet-maestro[bot]","Number":"1521","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:8358c059-232d-4dac-c08d-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190907.8\r\n- **Date Produced**: 9/7/2019 8:22 PM\r\n- **Commit**: 43b591a90ffff5885a6509e4bb1508f49e174af6\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-rc2.19457.8\r\n  - **System.Reflection.Emit** -> 4.6.0-rc2.19457.8\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-rc2.19457.8\r\n\r\n[marker]: <> (End:8358c059-232d-4dac-c08d-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1521","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/corefx\" (#1521)"},{"Id":"490748485","IsPullRequest":true,"CreatedAt":"2019-09-08T12:40:09","Actor":"dotnet-maestro[bot]","Number":"1520","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190907.6\r\n- **Date Produced**: 9/7/2019 5:26 PM\r\n- **Commit**: 59c6b1ab96aa2e99ed6ecb33a8bcf9283ce1ea27\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19457.6\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19457.6\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19457.6\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1520","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1520)"},{"Id":"490745778","IsPullRequest":true,"CreatedAt":"2019-09-08T12:12:00","Actor":"dotnet-maestro[bot]","Number":"1519","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190907.1\r\n- **Date Produced**: 9/7/2019 12:52 PM\r\n- **Commit**: c27945fc559ee636139d9f460db71242b16483e6\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19457.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19457.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19457.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19457.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19457.1\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19457.1\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1519","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1519)"},{"Id":"490630353","IsPullRequest":true,"CreatedAt":"2019-09-07T12:41:05","Actor":"dotnet-maestro[bot]","Number":"1518","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:8358c059-232d-4dac-c08d-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190907.2\r\n- **Date Produced**: 9/7/2019 11:01 AM\r\n- **Commit**: aabbc368fe4351c78d97d1fcaf79238a3db285bc\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-rc2.19457.2\r\n  - **System.Reflection.Emit** -> 4.6.0-rc2.19457.2\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-rc2.19457.2\r\n\r\n[marker]: <> (End:8358c059-232d-4dac-c08d-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1518","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/corefx\" (#1518)"},{"Id":"490630323","IsPullRequest":true,"CreatedAt":"2019-09-07T12:40:50","Actor":"dotnet-maestro[bot]","Number":"1517","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190906.21\r\n- **Date Produced**: 9/7/2019 4:24 AM\r\n- **Commit**: 9e8d47c6e548dcacd71cb83133bbf49f74be90ac\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19456.21\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19456.21\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19456.21\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1517","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1517)"},{"Id":"490628005","IsPullRequest":true,"CreatedAt":"2019-09-07T12:11:59","Actor":"dotnet-maestro[bot]","Number":"1515","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190906.10\r\n- **Date Produced**: 9/6/2019 9:27 PM\r\n- **Commit**: 2d393243ba4a0c95c2c18aa266df6e0f43ffe22d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19456.10\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19456.10\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19456.10\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19456.10\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19456.10\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19456.10\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1515","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1515)"},{"Id":"490561333","IsPullRequest":true,"CreatedAt":"2019-09-07T07:22:43","Actor":"terrajobst","Number":"1514","RawContent":null,"Title":"Expose SequenceReader<T> and friends","State":"closed","Body":"***Ask Mode 3.0 GA: Expose SequenceReader<T> in .NET Standard 2.1***\r\n\r\n### Description\r\n\r\nFor ASP.NET pipelines we've added a type called `SequenceReader` that allows efficient traversal of data that is stored in multiple buffers. It's a key exchange type for low-level code. Unfortunately, we missed this API when adding new .NET Core 3.0 concepts to .NET Standard 2.1. This PR addresses that.\r\n\r\n### Customer Impact\r\n\r\nFrom @davidfowl:\r\n\r\n> its damn near impossible to write efficient code that works well without the `SequenceReader`. The options today lead you to writing something very similar or converting the `ReadOnlySequence<T>` to `T[]` (which defeats the purpose).\r\n\r\n### How found\r\n\r\nReported by customer.\r\n\r\n### Regression?\r\n\r\nNo\r\n\r\n### Risk\r\n\r\nRisk is very small. .NET Standard just exposed the API that already exists in .NET Core.\r\n","Url":"https://github.com/dotnet/standard/pull/1514","RelatedDescription":"Closed or merged PR \"Expose SequenceReader<T> and friends\" (#1514)"},{"Id":"490561176","IsPullRequest":true,"CreatedAt":"2019-09-07T07:21:35","Actor":"terrajobst","Number":"1513","RawContent":null,"Title":"Add missing readonly modifiers","State":"closed","Body":"***Ask Mode 3.0 GA: Fix missing read-only modifiers***\r\n\r\n### Description\r\n\r\nC# 8 adds the ability to apply the `readonly` modifier to members. This allows the compiler to avoid defensive copies of structs when calling methods that don't change the struct's state.\r\n\r\nWhen comparing the reference assemblies between .NET Core and .NET Standard we were using an older language version to generate the C# representation of the reference assemblies. This resulted in us not marking the .NET Standard version of certain .NET Core APIs as `readonly`.\r\n\r\n### Customer Impact\r\n\r\nReduced performance.\r\n\r\n### How found\r\n\r\nReported by @stephentoub.\r\n\r\n### Regression?\r\n\r\nNo\r\n\r\n### Risk\r\n\r\nRisk is very small. .NET Standard just exposes the API that already exists in .NET Core.\r\n","Url":"https://github.com/dotnet/standard/pull/1513","RelatedDescription":"Closed or merged PR \"Add missing readonly modifiers\" (#1513)"},{"Id":"490103212","IsPullRequest":true,"CreatedAt":"2019-09-06T23:38:03","Actor":"terrajobst","Number":"1508","RawContent":null,"Title":"Add missing readonly modifiers","State":"closed","Body":"I've recently updated the reference assembly generation tool to the latest C# version. This exposed a bug where .NET Standard didn't include `readonly` modifiers that .NET Core added in 3.0. For the affected APIs these wouldn't cause correctness issues, but it would result in superfluous defensive copies, which, given the size of some of these structs, could result in reduced performance.\r\n\r\n/cc @stephentoub @tannergooding ","Url":"https://github.com/dotnet/standard/pull/1508","RelatedDescription":"Closed or merged PR \"Add missing readonly modifiers\" (#1508)"},{"Id":"489500906","IsPullRequest":true,"CreatedAt":"2019-09-06T21:34:18","Actor":"terrajobst","Number":"1500","RawContent":null,"Title":"Expose SequenceReader<T> and friends","State":"closed","Body":"Fixes #1493, #1497\r\n\r\n/cc @chris579","Url":"https://github.com/dotnet/standard/pull/1500","RelatedDescription":"Closed or merged PR \"Expose SequenceReader<T> and friends\" (#1500)"},{"Id":"490530227","IsPullRequest":false,"CreatedAt":"2019-09-06T21:28:54","Actor":"terrajobst","Number":"1512","RawContent":null,"Title":"Align private fields with structs from re-run in CoreFX","State":"open","Body":"[Looks like CoreFX](https://github.com/dotnet/standard/pull/1500#discussion_r321890968) accidentally removed some private field annotations for structs. Once CoreFX added them back, we should update .NET Standard to match.","Url":"https://github.com/dotnet/standard/issues/1512","RelatedDescription":"Open issue \"Align private fields with structs from re-run in CoreFX\" (#1512)"},{"Id":"490440451","IsPullRequest":true,"CreatedAt":"2019-09-06T17:41:59","Actor":"dotnet-maestro[bot]","Number":"1511","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190906.2\r\n- **Date Produced**: 9/6/2019 2:35 PM\r\n- **Commit**: 397060df67388da56b50de7e6f7292a5dccc2de6\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19456.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19456.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19456.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19456.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19456.2\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19456.2\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1511","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1511)"},{"Id":"490300335","IsPullRequest":true,"CreatedAt":"2019-09-06T12:48:09","Actor":"dotnet-maestro[bot]","Number":"1510","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190905.16\r\n- **Date Produced**: 9/6/2019 1:28 AM\r\n- **Commit**: 4390a665c2fe082007f6bd25be0e055307ee5573\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19455.16\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19455.16\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19455.16\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1510","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1510)"},{"Id":"490289536","IsPullRequest":true,"CreatedAt":"2019-09-06T12:11:49","Actor":"dotnet-maestro[bot]","Number":"1509","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190905.21\r\n- **Date Produced**: 9/6/2019 1:51 AM\r\n- **Commit**: e99f81b0e3289cfd851be0d927c1fcffa43af6b5\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19455.21\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19455.21\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19455.21\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19455.21\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19455.21\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19455.21\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1509","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1509)"},{"Id":"490039576","IsPullRequest":true,"CreatedAt":"2019-09-05T23:36:38","Actor":"Anipik","Number":"1507","RawContent":null,"Title":"snapping release/3.0 -> release/3.0-preview9","State":"closed","Body":"","Url":"https://github.com/dotnet/standard/pull/1507","RelatedDescription":"Closed or merged PR \"snapping release/3.0 -> release/3.0-preview9\" (#1507)"},{"Id":"489720165","IsPullRequest":true,"CreatedAt":"2019-09-05T22:28:52","Actor":"dotnet-maestro[bot]","Number":"1504","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:29f70c24-3711-40be-9246-08d6c732a216)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190904.31\r\n- **Date Produced**: 9/5/2019 2:00 AM\r\n- **Commit**: 00d8aa82b488f321204a0e69a81399af9df276a1\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19454.31\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19454.31\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19454.31\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19454.31\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19454.31\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19454.31\r\n\r\n[marker]: <> (End:29f70c24-3711-40be-9246-08d6c732a216)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1504","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/arcade\" (#1504)"},{"Id":"489720957","IsPullRequest":true,"CreatedAt":"2019-09-05T12:45:45","Actor":"dotnet-maestro[bot]","Number":"1506","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:8358c059-232d-4dac-c08d-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190904.13\r\n- **Date Produced**: 9/5/2019 6:39 AM\r\n- **Commit**: 5f2c2771e077f98c097ecc1b9202bee22ef50aed\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 4.6.0-rc1.19454.13\r\n  - **System.Reflection.Emit** -> 4.6.0-rc1.19454.13\r\n  - **System.Reflection.Emit.ILGeneration** -> 4.6.0-rc1.19454.13\r\n\r\n[marker]: <> (End:8358c059-232d-4dac-c08d-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1506","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/corefx\" (#1506)"},{"Id":"489720839","IsPullRequest":true,"CreatedAt":"2019-09-05T12:45:30","Actor":"dotnet-maestro[bot]","Number":"1505","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190904.11\r\n- **Date Produced**: 9/5/2019 4:02 AM\r\n- **Commit**: 838832e2ecac9f81b5a5649bfac2fc835db76c1e\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19454.11\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19454.11\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19454.11\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1505","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1505)"},{"Id":"489707331","IsPullRequest":true,"CreatedAt":"2019-09-05T12:11:48","Actor":"dotnet-maestro[bot]","Number":"1503","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190904.31\r\n- **Date Produced**: 9/5/2019 2:00 AM\r\n- **Commit**: 00d8aa82b488f321204a0e69a81399af9df276a1\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19454.31\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19454.31\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19454.31\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19454.31\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19454.31\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19454.31\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1503","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1503)"},{"Id":"489700481","IsPullRequest":false,"CreatedAt":"2019-09-05T11:45:40","Actor":"CShepartd","Number":"1502","RawContent":null,"Title":"Add System.Text.Json","State":"open","Body":"[`System.Text.Json`](https://docs.microsoft.com/en-us/dotnet/api/system.text.json?view=netcore-3.0) should be added to .Net Standard 2.1 or next release","Url":"https://github.com/dotnet/standard/issues/1502","RelatedDescription":"Open issue \"Add System.Text.Json\" (#1502)"},{"Id":"489648306","IsPullRequest":false,"CreatedAt":"2019-09-05T09:51:10","Actor":"MRebati","Number":"1501","RawContent":null,"Title":"adding Netstandard nuget package to another Netstandard project cause \"Unable to find metadata of Microsoft.NETCore.Targets.1.1.0\" error","State":"open","Body":"hello, I've been working on this for a few days.\r\nI created a net standard project. packed it as nuget package. added to a local nuget server. tried to add it as a reference to another project and got this error on adding.\r\n\r\n\"Unable to find metadata of Microsoft.NETCore.Targets.1.1.0\"\r\n\r\nchecked the nuget.org for the new version of \"Microsoft.NETCore.Targets\" and downloaded it.\r\nit did not solve any problem. tried to add the 1.1.0 version. and it did not help either.\r\n\r\ntried to add net core platform on both projects. also did not help.\r\nwhy is net standard even dependent on net core platform?","Url":"https://github.com/dotnet/standard/issues/1501","RelatedDescription":"Open issue \"adding Netstandard nuget package to another Netstandard project cause \"Unable to find metadata of Microsoft.NETCore.Targets.1.1.0\" error\" (#1501)"},{"Id":"489129967","IsPullRequest":true,"CreatedAt":"2019-09-04T12:39:41","Actor":"dotnet-maestro[bot]","Number":"1499","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190903.12\r\n- **Date Produced**: 9/4/2019 8:04 AM\r\n- **Commit**: 1511f723f7adfe82cef72460df45dc4422d303c6\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19453.12\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19453.12\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19453.12\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1499","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1499)"},{"Id":"489117219","IsPullRequest":true,"CreatedAt":"2019-09-04T12:11:56","Actor":"dotnet-maestro[bot]","Number":"1498","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190903.5\r\n- **Date Produced**: 9/3/2019 10:25 PM\r\n- **Commit**: 6e94f0da0f12c7663ab39ce5bd6a67c4ab58b5ee\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19453.5\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19453.5\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19453.5\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19453.5\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19453.5\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19453.5\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1498","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1498)"}],"ResultType":"GitHubIssue"},"CoreFx-Issues":{"Issues":[{"Id":"491409718","IsPullRequest":false,"CreatedAt":"2019-09-10T02:04:46","Actor":"JeremyKuhne","Number":"40962","RawContent":null,"Title":"Review System.Buffers proposals","State":"open","Body":"This is a meta issue for #40871, #40870, #40845, #40843, and #37156 which add new APIs to [`SequenceReader<T>`](https://apisof.net/catalog/System.Buffers.SequenceReader%3CT%3E). This captures the overall change for the review. Detailed discussions are in the linked issues.\r\n\r\nProposed new surface area:\r\n\r\n``` C#\r\nnamespace System.Buffers\r\n{\r\n    public ref struct SequenceReader<T>\r\n    {\r\n        // Optimized API to position the reader at the end of the sequence (much faster than what users can write)\r\n        public void AdvanceToEnd();\r\n\r\n        // Pairs with existing Span<T> UnreadSpan;\r\n        public ReadOnlySequence<T> UnreadSequence { get; }\r\n\r\n        // Peeking out T, while skipping. This is more performant than users can write (avoids rewinding).\r\n        public bool TryPeek(int skip, out T value);\r\n\r\n        // Overloads for TryRead that allow reading out a given count rather than to some delimiter (as with existing\r\n        // API span out will slice if it can or allocate and copy if it has to).\r\n        bool TryRead(int count, out ReadOnlySpan<T> value);\r\n        bool TryRead(int count, out ReadOnlySequence<T> value);\r\n\r\n        // Equivalent \"Peek\" versions. They need a skip as peeking doesn't advance the reader and rewinding is super expensive.\r\n        public bool TryPeek(int count, out ReadOnlySpan<T> value);\r\n        public bool TryPeek(int skip, int count, out ReadOnlySpan<T> value);\r\n        public bool TryPeek(int count, out ReadOnlySequence<T> value);\r\n        public bool TryPeek(int skip, int count, out ReadOnlySequence<T> value);\r\n \r\n        // Pairs with existing TryCopyTo(Span<T> destination), which does not advance the reader (neither does this)\r\n        public bool TryCopyTo(int skip, Span<T> destination);\r\n\r\n        // Also proposed, but having this can lead to writing slow code.\r\n        public bool SetPosition(SequencePosition position);\r\n   }\r\n}\r\n```\r\n","Url":"https://github.com/dotnet/corefx/issues/40962","RelatedDescription":"Open issue \"Review System.Buffers proposals\" (#40962)"},{"Id":"491385538","IsPullRequest":true,"CreatedAt":"2019-09-10T01:28:49","Actor":"dotnet-maestro[bot]","Number":"40960","RawContent":null,"Title":"[release/3.1] Update dependencies from dotnet/coreclr","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:dbb830b1-8f81-460f-dd40-08d72a4caef5)\r\n## From https://github.com/dotnet/coreclr\r\n- **Build**: 20190909.7\r\n- **Date Produced**: 9/9/2019 8:58 PM\r\n- **Commit**: d13d1b61de8a28e0d5509273a6ec3de35b1dd258\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk.IL** -> 3.1.0-preview1.19459.7\r\n  - **Microsoft.NETCore.ILAsm** -> 3.1.0-preview1.19459.7\r\n  - **Microsoft.NETCore.Runtime.CoreCLR** -> 3.1.0-preview1.19459.7\r\n\r\n[marker]: <> (End:dbb830b1-8f81-460f-dd40-08d72a4caef5)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/40960","RelatedDescription":"Closed or merged PR \"[release/3.1] Update dependencies from dotnet/coreclr\" (#40960)"},{"Id":"491398006","IsPullRequest":true,"CreatedAt":"2019-09-10T01:14:36","Actor":"Dotnet-GitSync-Bot","Number":"40961","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"open","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub @TylerBrinkley","Url":"https://github.com/dotnet/corefx/pull/40961","RelatedDescription":"Open PR \"Mirror changes from dotnet/coreclr\" (#40961)"},{"Id":"491379699","IsPullRequest":true,"CreatedAt":"2019-09-09T23:53:33","Actor":"safern","Number":"40959","RawContent":null,"Title":"Add test for IComponent typeconverter register in TypeDescriptor","State":"open","Body":"In: #40837 we added `ComponentConverter` as `IComponent`'s converter, however we missed to add a  test entry for the `TypeDescriptor`.\r\n\r\ncc: @danmosemsft @RussKie @ericstj ","Url":"https://github.com/dotnet/corefx/pull/40959","RelatedDescription":"Open PR \"Add test for IComponent typeconverter register in TypeDescriptor\" (#40959)"},{"Id":"491362193","IsPullRequest":true,"CreatedAt":"2019-09-09T22:46:03","Actor":"wfurt","Number":"40958","RawContent":null,"Title":"make sure BindDuringTcpWait_Succeeds does not run with other tests","State":"open","Body":"I check run log and the test runs at the end as @bradwilson described. This should avoid conflicts with other tests. \r\n\r\nRight now it is only one test but I put CollectionDefinition to HelperBase so it is easy to add more as we find mode cases like this.  \r\n\r\n```      \r\n      System.Net.Sockets.Tests.NoParallelTests.BindDuringTcpWait_Succeeds [STARTING]\r\n      System.Net.Sockets.Tests.NoParallelTests.BindDuringTcpWait_Succeeds [FINISHED] Time: 0.0012822s\r\n    Finished:    System.Net.Sockets.Tests\r\n  === TEST EXECUTION SUMMARY ===\r\n     System.Net.Sockets.Tests  Total: 920, Errors: 0, Failed: 0, Skipped: 7, Time: 6.013s\r\n```\r\n\r\nfixes  #40475\r\n","Url":"https://github.com/dotnet/corefx/pull/40958","RelatedDescription":"Open PR \"make sure BindDuringTcpWait_Succeeds does not run with other tests\" (#40958)"},{"Id":"491355046","IsPullRequest":true,"CreatedAt":"2019-09-09T22:22:48","Actor":"alexischr","Number":"40957","RawContent":null,"Title":"Guard against attempting to creating out-of-range spans in macOS File…","State":"open","Body":"…systemWatcher\r\n\r\nFixes https://github.com/dotnet/corefx/issues/40054","Url":"https://github.com/dotnet/corefx/pull/40957","RelatedDescription":"Open PR \"Guard against attempting to creating out-of-range spans in macOS File…\" (#40957)"},{"Id":"491324210","IsPullRequest":true,"CreatedAt":"2019-09-09T21:56:06","Actor":"dotnet-maestro[bot]","Number":"40956","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/coreclr","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:66928e2e-bd95-4f7e-280f-08d690bc5860)\r\n## From https://github.com/dotnet/coreclr\r\n- **Build**: 20190909.3\r\n- **Date Produced**: 9/9/2019 5:56 PM\r\n- **Commit**: 1533d6a5db52179c23a552878cd227fb2e7448bf\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk.IL** -> 3.0.0-rc2.19459.3\r\n  - **Microsoft.NETCore.ILAsm** -> 3.0.0-rc2.19459.3\r\n  - **Microsoft.NETCore.Runtime.CoreCLR** -> 3.0.0-rc2.19459.3\r\n\r\n[marker]: <> (End:66928e2e-bd95-4f7e-280f-08d690bc5860)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/40956","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from dotnet/coreclr\" (#40956)"},{"Id":"491142055","IsPullRequest":true,"CreatedAt":"2019-09-09T21:47:37","Actor":"stephentoub","Number":"40944","RawContent":null,"Title":"Allow more of ConsolePal to be linked away","State":"closed","Body":"If an app just uses Console.Write*, it's currently still pulling in support for stdin and stderr, because of the GetUseFileAPIs choke point.","Url":"https://github.com/dotnet/corefx/pull/40944","RelatedDescription":"Closed or merged PR \"Allow more of ConsolePal to be linked away\" (#40944)"},{"Id":"491312674","IsPullRequest":true,"CreatedAt":"2019-09-09T21:41:15","Actor":"dotnet-maestro[bot]","Number":"40954","RawContent":null,"Title":"[release/3.1] Update dependencies from dotnet/coreclr","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:dbb830b1-8f81-460f-dd40-08d72a4caef5)\r\n## From https://github.com/dotnet/coreclr\r\n- **Build**: 20190909.4\r\n- **Date Produced**: 9/9/2019 5:55 PM\r\n- **Commit**: 242b290169bf0af7f2b1f51273adbec17a180130\r\n- **Branch**: refs/heads/release/3.1\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk.IL** -> 3.1.0-preview1.19459.4\r\n  - **Microsoft.NETCore.ILAsm** -> 3.1.0-preview1.19459.4\r\n  - **Microsoft.NETCore.Runtime.CoreCLR** -> 3.1.0-preview1.19459.4\r\n\r\n[marker]: <> (End:dbb830b1-8f81-460f-dd40-08d72a4caef5)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/40954","RelatedDescription":"Closed or merged PR \"[release/3.1] Update dependencies from dotnet/coreclr\" (#40954)"},{"Id":"490924909","IsPullRequest":true,"CreatedAt":"2019-09-09T21:26:55","Actor":"ahsonkhan","Number":"40938","RawContent":null,"Title":"Use ThrowHelper in Utf8JsonReader.GetGuid so that the deserializer can catch the exception and re-throw JsonException.","State":"closed","Body":"Because we weren't using the ThrowHelper, we weren't setting the source of the exception to `\"System.Text.Json.Rethrowable\"` so that the Deserializer could catch it and re-throw it as JsonException.\r\n\r\nFixes https://github.com/aspnet/AspNetCore/issues/13811\r\n\r\ncc @layomia, @pranavkm, @steveharter ","Url":"https://github.com/dotnet/corefx/pull/40938","RelatedDescription":"Closed or merged PR \"Use ThrowHelper in Utf8JsonReader.GetGuid so that the deserializer can catch the exception and re-throw JsonException.\" (#40938)"},{"Id":"491273992","IsPullRequest":true,"CreatedAt":"2019-09-09T20:46:35","Actor":"dotnet-maestro[bot]","Number":"40950","RawContent":null,"Title":"[release/3.1] Update dependencies from dotnet/standard","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:0098719e-62fd-45c8-cd5b-08d72a4d12e0)\r\n## From https://github.com/dotnet/standard\r\n- **Build**: 20190909.4\r\n- **Date Produced**: 9/9/2019 6:54 PM\r\n- **Commit**: d11814a7310c574c171f17d9b5d26b4b0406878b\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **NETStandard.Library** -> 2.1.0-prerelease.19459.4\r\n\r\n[marker]: <> (End:0098719e-62fd-45c8-cd5b-08d72a4d12e0)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/40950","RelatedDescription":"Closed or merged PR \"[release/3.1] Update dependencies from dotnet/standard\" (#40950)"},{"Id":"490853321","IsPullRequest":true,"CreatedAt":"2019-09-09T20:44:57","Actor":"stephentoub","Number":"40935","RawContent":null,"Title":"Replace HashHelpers.Combine with HashCode.Combine in netcoreapp projects","State":"closed","Body":"Fixes https://github.com/dotnet/corefx/issues/25986","Url":"https://github.com/dotnet/corefx/pull/40935","RelatedDescription":"Closed or merged PR \"Replace HashHelpers.Combine with HashCode.Combine in netcoreapp projects\" (#40935)"},{"Id":"491301771","IsPullRequest":false,"CreatedAt":"2019-09-09T20:11:40","Actor":"mklement0","Number":"40953","RawContent":null,"Title":"Bug in CultureInfo.Clone() causes .Calendar and .DateTimeFormat.Calendar to diverge","State":"open","Body":"Courtesy of excellent sleuthing by @lpatalas:\r\n\r\nAccessing a `CultureInfo` instance's `.DateTimeFormat` property before it is cloned with `.Clone()` unexpectedly causes the clone's `.Calendar` and `.DateTimeFormat.Calendar` properties to reference _different_ objects; from https://github.com/PowerShell/PowerShell/issues/10438#issuecomment-529628273:\r\n\r\n> If I would have to guess it's caused by this line: https://github.com/dotnet/coreclr/blob/master/src/System.Private.CoreLib/shared/System/Globalization/CultureInfo.cs#L1015. The `_calendar` field is `null` so it's not cloned until it's accessed for the first time. After that it's set and each subsequent `Clone()` call will create new Calendar instance.\r\n\r\nCode to reproduce:\r\n\r\n```csharp\r\nusing System;\r\nusing System.Globalization;\r\n\r\npublic static class Program\r\n{\r\n    public static void Main()\r\n    {\r\n      var orig = CultureInfo.InvariantCulture;\r\n      \r\n      for (var i=0; i<2; ++i) {\r\n\r\n        var clone = (CultureInfo)orig.Clone();\r\n        clone.Calendar.TwoDigitYearMax = 2020;\r\n\r\n        Console.WriteLine($\"Clone {i}: Do .Calendar and .DateTimeFormat.Calendar referrence the same object? {object.ReferenceEquals(clone.Calendar, clone.DateTimeFormat.Calendar)}\");\r\n        Console.WriteLine($\"Clone {i}: .Calendar.TwoDigitYearMax vs. .DateTimeFormat.Calendar.TwoDigitYearMax: {clone.Calendar.TwoDigitYearMax} vs. {clone.DateTimeFormat.Calendar.TwoDigitYearMax}\");\r\n\r\n        // Trigger the bug: after this property access,\r\n        // cloning `orig` again makes the clones' .Calendar and .\r\n        // DateTimeFormat.Calendar references *differ*.\r\n        var dummy = orig.DateTimeFormat;\r\n      }\r\n\r\n    }\r\n}\r\n```\r\n\r\nExpected:\r\n\r\n```none\r\nClone 0: Do .Calendar and .DateTimeFormat.Calendar referrence the same object? True\r\nClone 0: .Calendar.TwoDigitYearMax vs. .DateTimeFormat.Calendar.TwoDigitYearMax: 2020 vs. 2020\r\nClone 1: Do .Calendar and .DateTimeFormat.Calendar referrence the same object? True\r\nClone 1: .Calendar.TwoDigitYearMax vs. .DateTimeFormat.Calendar.TwoDigitYearMax: 2020 vs. 2020\r\n```\r\n\r\nActual (the 2nd iteration exhibits the bug): \r\n\r\n```none\r\nClone 0: Do .Calendar and .DateTimeFormat.Calendar referrence the same object? True\r\nClone 0: .Calendar.TwoDigitYearMax vs. .DateTimeFormat.Calendar.TwoDigitYearMax: 2020 vs. 2020\r\nClone 1: Do .Calendar and .DateTimeFormat.Calendar referrence the same object? False\r\nClone 1: .Calendar.TwoDigitYearMax vs. .DateTimeFormat.Calendar.TwoDigitYearMax: 2020 vs. 2029\r\n```","Url":"https://github.com/dotnet/corefx/issues/40953","RelatedDescription":"Open issue \"Bug in CultureInfo.Clone() causes .Calendar and .DateTimeFormat.Calendar to diverge\" (#40953)"},{"Id":"491294192","IsPullRequest":false,"CreatedAt":"2019-09-09T19:55:02","Actor":"scalablecory","Number":"40952","RawContent":null,"Title":"Race in Socket.BeginSendTo","State":"open","Body":"There is a race in `Socket` when `BeginSendTo` is used on an unbound socket. You can see code for setting `_rightEndPoint`:\r\n\r\nhttps://github.com/dotnet/corefx/blob/da1f8120aeec867bbd81829358ed348d323b1d14/src/System.Net.Sockets/src/System/Net/Sockets/Socket.cs#L2700-L2737\r\n\r\n`SocketTaskExtensions.SendToAsync` wraps this and so is also affected.\r\n\r\n`_rightEndPoint` is also used in `BeginReceiveFrom` in a way that could cause a parameter check to be \"skipped\" if `BeginSendTo` resets it to null.","Url":"https://github.com/dotnet/corefx/issues/40952","RelatedDescription":"Open issue \"Race in Socket.BeginSendTo\" (#40952)"},{"Id":"491274000","IsPullRequest":true,"CreatedAt":"2019-09-09T19:10:37","Actor":"dotnet-maestro[bot]","Number":"40951","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/standard","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c090f591-8433-4a8c-54c8-08d6c734018a)\r\n## From https://github.com/dotnet/standard\r\n- **Build**: 20190909.4\r\n- **Date Produced**: 9/9/2019 6:54 PM\r\n- **Commit**: d11814a7310c574c171f17d9b5d26b4b0406878b\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **NETStandard.Library** -> 2.1.0-prerelease.19459.4\r\n\r\n[marker]: <> (End:c090f591-8433-4a8c-54c8-08d6c734018a)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/40951","RelatedDescription":"Open PR \"[release/3.0] Update dependencies from dotnet/standard\" (#40951)"},{"Id":"491261506","IsPullRequest":false,"CreatedAt":"2019-09-09T18:43:44","Actor":"xperiandri","Number":"40949","RawContent":null,"Title":"Cannot serialize F# dictionary","State":"open","Body":"``` F#\r\nlet parameters = dict <| seq { (\"Secret\", \"secret\") }\r\nlet contentJson = JsonSerializer.Serialize parameters\r\n```\r\n\r\nThrows `NotSupportedException` https://github.com/dotnet/corefx/blob/da1f8120aeec867bbd81829358ed348d323b1d14/src/System.Text.Json/src/System/Text/Json/Serialization/JsonSerializer.Write.HandleDictionary.cs#L144\r\n\r\nWhy can it happen if parameters variable is of type `IDictionary<string,string>`?","Url":"https://github.com/dotnet/corefx/issues/40949","RelatedDescription":"Open issue \"Cannot serialize F# dictionary\" (#40949)"},{"Id":"491161998","IsPullRequest":true,"CreatedAt":"2019-09-09T18:36:30","Actor":"Dotnet-GitSync-Bot","Number":"40945","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corefx/pull/40945","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#40945)"},{"Id":"491256838","IsPullRequest":false,"CreatedAt":"2019-09-09T18:33:33","Actor":"stephentoub","Number":"40948","RawContent":null,"Title":"AttributeArray_SetGetAttributesAndModify_DoesCopy failed in CI","State":"open","Body":"https://dev.azure.com/dnceng/public/_build/results?buildId=345574&view=ms.vss-test-web.build-test-results-tab&runId=10345416&resultId=120899&paneView=attachments\r\n```\r\n    System.ComponentModel.Tests.MemberDescriptorTests.AttributeArray_SetGetAttributesAndModify_DoesCopy [FAIL]\r\n      Assert.Same() Failure\r\n      Expected: MockAttribute1 { TypeId = typeof(System.ComponentModel.Tests.MemberDescriptorTests+MockAttribute1) }\r\n      Actual:   MockAttribute2 { TypeId = typeof(System.ComponentModel.Tests.MemberDescriptorTests+MockAttribute2) }\r\n      Stack Trace:\r\n        /_/src/System.ComponentModel.TypeConverter/tests/MemberDescriptorTests.cs(322,0): at System.ComponentModel.Tests.MemberDescriptorTests.AttributeArray_SetGetAttributesAndModify_DoesCopy()\r\n```\r\nhttps://github.com/dotnet/corefx/blob/f610925aee0ee4ad0586f677815dd0601209560f/src/System.ComponentModel.TypeConverter/tests/MemberDescriptorTests.cs#L310-L323","Url":"https://github.com/dotnet/corefx/issues/40948","RelatedDescription":"Open issue \"AttributeArray_SetGetAttributesAndModify_DoesCopy failed in CI\" (#40948)"},{"Id":"491184089","IsPullRequest":true,"CreatedAt":"2019-09-09T18:21:51","Actor":"jkotas","Number":"40946","RawContent":null,"Title":"Mark System.Data.SqlClient as archived component","State":"closed","Body":"","Url":"https://github.com/dotnet/corefx/pull/40946","RelatedDescription":"Closed or merged PR \"Mark System.Data.SqlClient as archived component\" (#40946)"},{"Id":"491060193","IsPullRequest":true,"CreatedAt":"2019-09-09T17:08:04","Actor":"dotnet-maestro[bot]","Number":"40940","RawContent":null,"Title":"[release/3.0] Update dependencies from 4 repositories","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:79f1e123-800e-410f-94d7-08d690bc143a)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190908.11\r\n- **Date Produced**: 9/8/2019 9:25 PM\r\n- **Commit**: 0861098706ac9854dfe5e8b8a2c95bdd07094ef6\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-rc2-19458-11\r\n  - **Microsoft.NETCore.DotNetHost** -> 3.0.0-rc2-19458-11\r\n  - **Microsoft.NETCore.DotNetHostPolicy** -> 3.0.0-rc2-19458-11\r\n\r\n[marker]: <> (End:79f1e123-800e-410f-94d7-08d690bc143a)\r\n\r\n[marker]: <> (Begin:a5bda823-89f1-4ce6-0d43-08d6910cd73b)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190908.2\r\n- **Date Produced**: 9/8/2019 11:40 PM\r\n- **Commit**: 29ee79a10c58dd6863a46157e374521cac610ad8\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions** -> 2.4.1-beta.19458.2\r\n  - **Microsoft.DotNet.XUnitConsoleRunner** -> 2.5.1-beta.19458.2\r\n  - **Microsoft.DotNet.VersionTools.Tasks** -> 1.0.0-beta.19458.2\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19458.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19458.2\r\n  - **Microsoft.DotNet.Build.Tasks.Configuration** -> 1.0.0-beta.19458.2\r\n  - **Microsoft.DotNet.Build.Tasks.Feed** -> 2.2.0-beta.19458.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19458.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19458.2\r\n  - **Microsoft.DotNet.CoreFxTesting** -> 1.0.0-beta.19458.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19458.2\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19458.2\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19458.2\r\n  - **Microsoft.DotNet.RemoteExecutor** -> 1.0.0-beta.19458.2\r\n\r\n[marker]: <> (End:a5bda823-89f1-4ce6-0d43-08d6910cd73b)\r\n\r\n[marker]: <> (Begin:fc000152-53a0-4a98-0b3e-08d6bc6f2d11)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-optimization\r\n- **Build**: 20190909.1\r\n- **Date Produced**: 9/9/2019 11:22 AM\r\n- **Commit**: 48fd58c24cddbc6c0b0de1c00204aae1170f4864\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **optimization.windows_nt-x64.IBC.CoreFx** -> 99.99.99-master-20190909.1\r\n\r\n[marker]: <> (End:fc000152-53a0-4a98-0b3e-08d6bc6f2d11)\r\n\r\n[marker]: <> (Begin:c090f591-8433-4a8c-54c8-08d6c734018a)\r\n## From https://github.com/dotnet/standard\r\n- **Build**: 20190909.3\r\n- **Date Produced**: 9/9/2019 1:06 PM\r\n- **Commit**: 7d495a23d400eb6e25779553b97e1dccf1ec6fab\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **NETStandard.Library** -> 2.1.0-prerelease.19459.3\r\n\r\n[marker]: <> (End:c090f591-8433-4a8c-54c8-08d6c734018a)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/40940","RelatedDescription":"Closed or merged PR \"[release/3.0] Update dependencies from 4 repositories\" (#40940)"},{"Id":"491089729","IsPullRequest":true,"CreatedAt":"2019-09-09T14:36:34","Actor":"dotnet-maestro[bot]","Number":"40942","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup dotnet/corefx dotnet/standard","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:08549e3e-8f8e-4201-dc38-08d6815d521b)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190908.15\r\n- **Date Produced**: 9/9/2019 8:25 AM\r\n- **Commit**: 7a24cba982af080eeb957380be1464e446643a39\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19458.15\r\n  - **Microsoft.NETCore.DotNetHost** -> 5.0.0-alpha1.19458.15\r\n  - **Microsoft.NETCore.DotNetHostPolicy** -> 5.0.0-alpha1.19458.15\r\n\r\n[marker]: <> (End:08549e3e-8f8e-4201-dc38-08d6815d521b)\r\n\r\n[marker]: <> (Begin:368e60b9-57f7-48bd-020d-08d6874ba0bd)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190908.6\r\n- **Date Produced**: 9/9/2019 4:54 AM\r\n- **Commit**: cc51975a897cb803f1ad76b6b93b2ebd4581bca4\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **runtime.native.System.IO.Ports** -> 5.0.0-alpha1.19458.6\r\n  - **Microsoft.NETCore.Platforms** -> 5.0.0-alpha1.19458.6\r\n\r\n[marker]: <> (End:368e60b9-57f7-48bd-020d-08d6874ba0bd)\r\n\r\n[marker]: <> (Begin:a2867060-7cad-40ad-7917-08d6937ac7c4)\r\n## From https://github.com/dotnet/standard\r\n- **Build**: 20190908.2\r\n- **Date Produced**: 9/8/2019 12:54 PM\r\n- **Commit**: 36a17c16c16bd7520659913382fba2b79159cb8b\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **NETStandard.Library** -> 2.2.0-prerelease.19458.2\r\n\r\n[marker]: <> (End:a2867060-7cad-40ad-7917-08d6937ac7c4)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/40942","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup dotnet/corefx dotnet/standard\" (#40942)"},{"Id":"491128609","IsPullRequest":true,"CreatedAt":"2019-09-09T14:27:44","Actor":"itrofimow","Number":"40943","RawContent":null,"Title":"fix of a minor typo in System.Threading.Channels.ChannelReader docs","State":"closed","Body":"","Url":"https://github.com/dotnet/corefx/pull/40943","RelatedDescription":"Closed or merged PR \"fix of a minor typo in System.Threading.Channels.ChannelReader docs\" (#40943)"},{"Id":"491053301","IsPullRequest":true,"CreatedAt":"2019-09-09T13:14:26","Actor":"dotnet-maestro[bot]","Number":"40939","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c297d885-0692-40f8-6b97-08d61f281b4c)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190908.2\r\n- **Date Produced**: 9/8/2019 11:40 PM\r\n- **Commit**: 29ee79a10c58dd6863a46157e374521cac610ad8\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions** -> 2.4.1-beta.19458.2\r\n  - **Microsoft.DotNet.XUnitConsoleRunner** -> 2.5.1-beta.19458.2\r\n  - **Microsoft.DotNet.VersionTools.Tasks** -> 1.0.0-beta.19458.2\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19458.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19458.2\r\n  - **Microsoft.DotNet.Build.Tasks.Configuration** -> 1.0.0-beta.19458.2\r\n  - **Microsoft.DotNet.Build.Tasks.Feed** -> 2.2.0-beta.19458.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19458.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19458.2\r\n  - **Microsoft.DotNet.CoreFxTesting** -> 1.0.0-beta.19458.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19458.2\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19458.2\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19458.2\r\n  - **Microsoft.DotNet.RemoteExecutor** -> 1.0.0-beta.19458.2\r\n\r\n[marker]: <> (End:c297d885-0692-40f8-6b97-08d61f281b4c)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/40939","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#40939)"},{"Id":"490895000","IsPullRequest":true,"CreatedAt":"2019-09-09T12:58:27","Actor":"Dotnet-GitSync-Bot","Number":"40937","RawContent":null,"Title":"Mirror changes from dotnet/corert","State":"closed","Body":"This PR contains mirrored changes from dotnet/corert\n\n\n**Please REBASE this PR when merging**\n\n cc @MichalStrehovsky","Url":"https://github.com/dotnet/corefx/pull/40937","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corert\" (#40937)"},{"Id":"491065639","IsPullRequest":false,"CreatedAt":"2019-09-09T12:28:14","Actor":"YairHalberstadt","Number":"40941","RawContent":null,"Title":"Add generic overloads for Delegate.CreateDelegate","State":"open","Body":"Currently usages of `Delegate.CreateDelegate` tend to be along these lines:\r\n\r\n`(Func<object>)Delegate.CreateDelegate(typeof(FuncObject), methodInfo)`\r\n\r\nFor complicated delegates, this can be quite annoying and error prone.\r\n\r\nit would be relatively simple to add generic overloads\r\n\r\n```csharp\r\nT CreateDelegate<T>(MethodInfo methodInfo) where T : Delegate\r\n{\r\n    return (T)CreateDelegate(typeof(T), methodInfo);\r\n}\r\n```\r\nand it would make the API much nicer to use.\r\n\r\n#### API suggestion\r\n\r\nThe API is simple. We provide a matching generic overload for every existing overload of Delegate.CreateDelegate, which takes a generic type parameter instead of its first parameter, and returns an instance of the type parameter.\r\n\r\n The implementation for them all is trivial.","Url":"https://github.com/dotnet/corefx/issues/40941","RelatedDescription":"Open issue \"Add generic overloads for Delegate.CreateDelegate\" (#40941)"},{"Id":"491315619","IsPullRequest":false,"CreatedAt":"2019-09-09T11:39:33","Actor":"fhoutr01","Number":"40955","RawContent":null,"Title":"DotNetCore 2.2.6 is slow on connecting and publish messages to AWS AMQ","State":"open","Body":"DotNetCore 2.2.6 on linux forever to make connections and publish messages to AWS AMQ\r\n\r\n# General\r\nWe run dotnetcore in containers on our OpenShift cluster. Most recently they failed on all environments because they can no longer connect to AWS AMQ. It feels like it's running against a timeout of something. This issue *only* occurs when running dotnetcore on linux.\r\n\r\nMy linux guest system is an ubuntu 18.04 ( see `dotnet --info` below ). It also occurs on RHEL 7 containers\r\n\r\nI eliminated the network as culprit:\r\n- I can connect from my windows machine, but it takes a long time from my linux guest OS in the same machine.\r\n- My linux guest OS can connect and post messages to AWS AMQ from a java program ( fast ).\r\n- I asked our network guy to allow outgoing network traffic from my machine to that specific instance.\r\n- I used wireshark to monitor the network traffic from my PC to see if it connected somewhere else ( which it didn't ).\r\n\r\nI eliminated AWS AMQ as the culprit:\r\n- The AWS logs show no sign of something wrong\r\n- The same queue works in a java\r\n- We set up a different queue from scratch and the issue still occurs.\r\n\r\nWireshark shows pauses of ~20seconds at certain intervals. It is consistently around 20seconds, so it does feel like a timeout of some sort...\r\nWireshark shows dotnetcore connecting with TLS 1.0 connection in both windows & linux using the same cipher suite ( TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA ).\r\nWhen executing the same code on windows it can connect just fine. When trying to connect to the AWS AMQ in java it is able to connect fine as well.\r\n\r\nThe only remaining \"culprit\" I can think of is something going wrong in the dotnetcore runtime itself unless I am missing something.\r\n\r\nBelow you have a C# code sample ( taken from the amazon documentation ).\r\nBuilding and running on windows - it works perfect.\r\nBuild and running on Linux - It takes forever to connect and post messages ( > 50s ).\r\n\r\n\r\nNote: I just noticed there is a slight version difference between my linux & windows regarding dotnetcore. I will update it and try that as well and add it as output.\r\n\r\n# System Information\r\nHost System: Windows 10\r\nGuest System: Linux 18.04\r\n  > Dotnet SDK was installed through https://dotnet.microsoft.com/download/linux-package-manager/ubuntu18-04/sdk-current\r\n\r\n# AWS AMQ Information\r\nInstance Type: mq.t2.micro\r\nDeployment mode: single-instance broker\r\nBroker Engine: ActiveMQ\r\nBroker engine version: 5.15.9\r\n\r\n# Build command\r\n``\r\ndotnet build --force -c Release\r\ndotnet publish -c Release -o ../publish/exploded\r\n``\r\n\r\n# Run command\r\n\r\n``\r\ndotnet AWSMQSend.dll $@\r\n``\r\n\r\n# Application output on linux: ( notice gaps in timestamps )\r\n\r\n```\r\n9/9/19 11:54:56 AM :: Creating Factory\r\n9/9/19 11:54:56 AM :: Factory Created\r\n9/9/19 11:54:56 AM :: Connection...\r\n9/9/19 11:54:56 AM :: Done\r\n9/9/19 11:54:56 AM :: Creating Session.....\r\n9/9/19 11:55:27 AM :: Done\r\n9/9/19 11:55:27 AM :: Using destination: queue://queue_filip\r\n9/9/19 11:55:57 AM :: Start the connection so that messages will be processed\r\n9/9/19 11:55:57 AM :: Sending message....\r\n9/9/19 11:56:17 AM :: Received message with ID:   ID:fluxbox-34467-637033634349736262-1:0:1:1:1\r\n9/9/19 11:56:17 AM :: Received message with text: Hello World!\r\n```\r\n\r\n# Application output on windows:\r\n```\r\n9-9-2019 12:01:39 :: Creating Factory\r\n9-9-2019 12:01:39 :: Factory Created\r\n9-9-2019 12:01:39 :: Connection...\r\n9-9-2019 12:01:40 :: Done\r\n9-9-2019 12:01:40 :: Creating Session.....\r\n9-9-2019 12:01:40 :: Done\r\n9-9-2019 12:01:40 :: Using destination: queue://queue_filip\r\n9-9-2019 12:01:40 :: Start the connection so that messages will be processed\r\n9-9-2019 12:01:40 :: Sending message....\r\n9-9-2019 12:01:40 :: Received message with ID:   ID:BEZAV1CL13911-53543-637036270142492136-1:0:1:1:1\r\n9-9-2019 12:01:40 :: Received message with text: Hello World!\r\n```\r\n\r\n# Application Code C# code\r\n```\r\n/*\r\n * Licensed to the Apache Software Foundation (ASF) under one or more\r\n * contributor license agreements.  See the NOTICE file distributed with\r\n * this work for additional information regarding copyright ownership.\r\n * The ASF licenses this file to You under the Apache License, Version 2.0\r\n * (the \"License\"); you may not use this file except in compliance with\r\n * the License.  You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nusing System;\r\nusing Apache.NMS;\r\nusing Apache.NMS.Util;\r\n\r\nnamespace Apache.NMS.ActiveMQ.Test\r\n{\r\npublic class Program\r\n{\r\n    public static void Main(string[] args)\r\n    {\r\n        string host = \"<your-host>.mq.eu-central-1.amazonaws.com\";\r\n        string port = \"61617\";\r\n        string userName = \"<queue-username>\";\r\n        string password = \"<queue-password>\";\r\n\r\n        Uri connecturi = new Uri(\"activemq:ssl://\" + host + \":\" + port);\r\n\r\n        Console.WriteLine( DateTime.Now + \" :: Creating Factory\" );\r\n\r\n        // NOTE: ensure the nmsprovider-activemq.config file exists in the executable folder.\r\n        IConnectionFactory factory = new NMSConnectionFactory(connecturi);\r\n\r\n        Console.WriteLine( DateTime.Now + \" :: Factory Created\" );\r\n\r\n\t\tConsole.WriteLine( DateTime.Now + \" :: Connection...\");\r\n\t\tIConnection connection = factory.CreateConnection( userName, password);\r\n\t\tConsole.WriteLine( DateTime.Now + \" :: Done\");\r\n\t\tConsole.WriteLine( DateTime.Now + \" :: Creating Session.....\");\r\n\t\t//The line below takes 20 seconds to complete!\r\n\t\tISession session = connection.CreateSession( AcknowledgementMode.AutoAcknowledge );\r\n\t\tConsole.WriteLine( DateTime.Now + \" :: Done\");\r\n\r\n\t\tIDestination destination = SessionUtil.GetDestination(session, \"queue://queue_filip\");\r\n\t\tConsole.WriteLine( DateTime.Now + \" :: Using destination: \" + destination);\r\n\r\n\t\t// Create a consumer and producer\r\n\t\tusing(IMessageConsumer consumer = session.CreateConsumer(destination))\r\n\t\tusing(IMessageProducer producer = session.CreateProducer(destination))\r\n\t\t{\r\n\t\t\t// Start the connection so that messages will be processed.\r\n\t\t\tConsole.WriteLine( DateTime.Now + \" :: Start the connection so that messages will be processed\" );\r\n\t\t\tconnection.Start();\r\n\t\t\tproducer.DeliveryMode = MsgDeliveryMode.Persistent;\r\n\t\t\t\t\r\n\t\t\t// Send a message\r\n\t\t\tITextMessage request = session.CreateTextMessage(\"Hello World!\");\r\n\t\t\trequest.NMSCorrelationID = \"abc\";\r\n\t\t\trequest.Properties[\"NMSXGroupID\"] = \"cheese\";\r\n\t\t\trequest.Properties[\"myHeader\"] = \"Cheddar\";\r\n\r\n\t\t\tConsole.WriteLine( DateTime.Now + \" :: Sending message....\" );\r\n\r\n\t\t\tproducer.Send(request);\r\n\r\n\t\t\t// Consume a message\r\n\t\t\tITextMessage message = consumer.Receive() as ITextMessage;\r\n\t\t\tif(message == null)\r\n\t\t\t{\r\n\t\t\t\tConsole.WriteLine( DateTime.Now + \" :: No message received!\");\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tConsole.WriteLine( DateTime.Now + \" :: Received message with ID:   \" + message.NMSMessageId);\r\n\t\t\t\tConsole.WriteLine( DateTime.Now + \" :: Received message with text: \" + message.Text);\r\n\t\t\t}\r\n\t\t}\r\n    }\r\n}\r\n}\r\n```\r\n# dotnet --info [Linux]\r\n```\r\n$ dotnet --info\r\n\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.401\r\n Commit:    729b316c13\r\n\r\nRuntime Environment:\r\n OS Name:     ubuntu\r\n OS Version:  18.04\r\n OS Platform: Linux\r\n RID:         ubuntu.18.04-x64\r\n Base Path:   /usr/share/dotnet/sdk/2.2.401/\r\n\r\nHost (useful for support):\r\n  Version: 2.2.6\r\n  Commit:  7dac9b1b51\r\n\r\n.NET Core SDKs installed:\r\n  2.2.401 [/usr/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.2.6 [/usr/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.6 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.2.6 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n# dotnet --info [Windows]\r\n```\r\n$ dotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.104\r\n Commit:    73f036d4ac\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.104\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.2\r\n  Commit:  a4fd7b2c84\r\n\r\n.NET Core SDKs installed:\r\n  2.2.104 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n# Updates\r\nUpdate: Execution on linux is fast against a local AMQ docker container, without SSL:\r\n\r\n```\r\n9/9/19 2:00:18 PM :: Creating Factory\r\n9/9/19 2:00:18 PM :: Factory Created\r\n9/9/19 2:00:18 PM :: Connection...\r\n9/9/19 2:00:19 PM :: Done\r\n9/9/19 2:00:19 PM :: Creating Session.....\r\n9/9/19 2:00:19 PM :: Done\r\n9/9/19 2:00:19 PM :: Using destination: queue://queue_filip\r\n9/9/19 2:00:19 PM :: Start the connection so that messages will be processed\r\n9/9/19 2:00:19 PM :: Sending message....\r\n9/9/19 2:00:19 PM :: Received message with ID:   ID:fluxbox-44221-637036344189323303-1:0:1:1:1\r\n9/9/19 2:00:19 PM :: Received message with text: Hello World!\r\n```\r\n","Url":"https://github.com/dotnet/corefx/issues/40955","RelatedDescription":"Open issue \"DotNetCore 2.2.6 is slow on connecting and publish messages to AWS AMQ\" (#40955)"},{"Id":"490894654","IsPullRequest":false,"CreatedAt":"2019-09-09T06:07:58","Actor":"Daniel15","Number":"40936","RawContent":null,"Title":"System.Text.Json: Serializing IDictionary with nullable value type throws \"Specified method is not supported.\"","State":"open","Body":"Repro:\r\n```\r\nIDictionary<string, float?> dict = new Dictionary<string, float?>\r\n{\r\n\t{\"Y2016\", 42.0f}\r\n};\r\n\r\nJsonSerializer.Serialize(new\r\n{\r\n\tFoo = dict\r\n});\r\n```\r\n\r\nThrows:\r\n```\r\nNotSupportedException: Specified method is not supported.\r\n\r\n    System.Text.Json.JsonSerializer.WriteDictionary<TProperty>(JsonConverter<TProperty> converter, JsonSerializerOptions options, ref WriteStackFrame current, Utf8JsonWriter writer)\r\n    System.Text.Json.JsonPropertyInfoNotNullable<TClass, TDeclaredProperty, TRuntimeProperty, TConverter>.OnWriteDictionary(ref WriteStackFrame current, Utf8JsonWriter writer)\r\n    System.Text.Json.JsonPropertyInfo.WriteDictionary(ref WriteStack state, Utf8JsonWriter writer)\r\n    System.Text.Json.JsonSerializer.HandleDictionary(JsonClassInfo elementClassInfo, JsonSerializerOptions options, Utf8JsonWriter writer, ref WriteStack state)\r\n    System.Text.Json.JsonSerializer.HandleObject(JsonPropertyInfo jsonPropertyInfo, JsonSerializerOptions options, Utf8JsonWriter writer, ref WriteStack state)\r\n    System.Text.Json.JsonSerializer.WriteObject(JsonSerializerOptions options, Utf8JsonWriter writer, ref WriteStack state)\r\n    System.Text.Json.JsonSerializer.Write(Utf8JsonWriter writer, int originalWriterDepth, int flushThreshold, JsonSerializerOptions options, ref WriteStack state)\r\n    System.Text.Json.JsonSerializer.WriteCore(Utf8JsonWriter writer, PooledByteBufferWriter output, object value, Type type, JsonSerializerOptions options)\r\n    System.Text.Json.JsonSerializer.WriteCore(PooledByteBufferWriter output, object value, Type type, JsonSerializerOptions options)\r\n    System.Text.Json.JsonSerializer.WriteCoreString(object value, Type type, JsonSerializerOptions options)\r\n    System.Text.Json.JsonSerializer.Serialize<TValue>(TValue value, JsonSerializerOptions options)\r\n\r\n```\r\n\r\nUsing `Dictionary` instead of `IDictionary` fixes it.","Url":"https://github.com/dotnet/corefx/issues/40936","RelatedDescription":"Open issue \"System.Text.Json: Serializing IDictionary with nullable value type throws \"Specified method is not supported.\"\" (#40936)"},{"Id":"490819184","IsPullRequest":false,"CreatedAt":"2019-09-08T22:46:33","Actor":"scalablecory","Number":"40933","RawContent":null,"Title":"Proposal: Zero allocation connectionless sockets","State":"open","Body":"This proposal eliminates allocations for connectionless use of `Socket`. It augments the `SocketAddress` class to allow reuse across operations, becoming a high-perf alternative to `EndPoint`.\r\n\r\n# Rationale and Usage\r\n\r\nAPIs which need to translate between `IPEndPoint` and native `sockaddr` structures are performing a large amount of defensive copying and layering workarounds.\r\n\r\nThis affects UDP performance and contributes to excessive GC. A simple example is:\r\n\r\n```c#\r\nSocket socket = ...;\r\nbyte[] buffer = ...;\r\nvar remoteEndPoint = new IPEndPoint(IPAddress.Any, 0);\r\n\r\nsocket.ReceiveFrom(buffer, 0, buffer.Length, SocketFlags.None, ref remoteEndPoint);\r\nsocket.SendTo(buffer, 0, buffer.Length, SocketFlags.None, remoteEndPoint);\r\n```\r\n\r\nThese two calls allocate 12 times:\r\n* 3x `IPEndPoint`\r\n* 3x `IPAddress`\r\n* 3x `SocketAddress`\r\n* 3x `byte[]` ...6x if IPv6\r\n\r\nSee also: #39317 \r\n\r\nNew usage has 0 allocations:\r\n\r\n```c#\r\nSocket socket = ...;\r\nbyte[] buffer = ...;\r\nvar remoteAddress = new SocketAddress(AddressFamily.InterNetwork);\r\n\r\nsocket.ReceiveFrom(buffer, 0, buffer.Length, SocketFlags.None, remoteAddress);\r\nsocket.SendTo(buffer, 0, buffer.Length, SocketFlags.None, remoteAddress);\r\n```\r\n\r\n# Proposed API\r\n\r\n```c#\r\nclass Socket\r\n{\r\n\tpublic int ReceiveFrom(Span<byte> buffer, SocketFlags socketFlags, SocketAddress socketAddress);\r\n\tpublic int SendTo(ReadOnlySpan<byte> buffer, SocketFlags socketFlags, SocketAddress socketAddress);\r\n}\r\n\r\nclass SocketTaskExtensions\r\n{\r\n\tpublic static ValueTask<int> ReceiveFromAsync(this Socket socket, Memory<byte> buffer, SocketFlags socketFlags, SocketAddress socketAddress);\r\n\tpublic static ValueTask<int> SendToAsync(this Socket socket, ReadOnlyMemory<byte> buffer, SocketFlags socketFlags, SocketAddress socketAddress);\r\n}\r\n\r\nclass SocketAsyncEventArgs\r\n{\r\n\t// Only one of RemoteEndPoint or RemoteAddress must be specified.\r\n\tpublic SocketAddress RemoteAddress { get; set; }\r\n}\r\n\r\nclass SocketAddress\r\n{\r\n\tpublic static void GetBuffer(SocketAddress address, out byte[] buffer);\r\n\tpublic static void SetSockaddrSize(SocketAddress address, int size);\r\n}\r\n\r\nclass EndPoint\r\n{\r\n\tpublic virtual void SerializeTo(SocketAddress socketAddress); // Already has \"SocketAddress Serialize()\"; default would be to call that and copy.\r\n}\r\n```\r\n\r\n# Details\r\n\r\n* It is intended that UDP servers will use `SocketAddress` as a dictionary key to lookup client state, to avoid first converting to `EndPoint`.\r\n   * It is assumed that users will only rarely care to actually get the IP/port/etc. from the `SocketAddress`. This duty continues to be delegated to `EndPoint`.\r\n   * If users ever want to deserialize a `SocketAddress` into an `EndPoint`, they can already use `EndPoint.Create`.\r\n   * Need to ensure only the actual sockaddr structure is compared/hashed, not the entire byte buffer.\r\n* `SocketAddress` is currently duplicated in System.Net.Primitives and System.Net.Sockets to avoid exposing its internal buffer. This change will allow avoiding duplication.\r\n* This relies on users not using a `SocketAddress` until the I/O is finished.\r\n   * This is a bit safer with `EndPoint` as we can take defensive copies before methods return.\r\n\r\n# Open Questions\r\n\r\n* We've put some effort into not doing something like this before. It would be great to understand why. Currently:\r\n\t* We duplicate the `SocketAddress` class in multiple assemblies to avoid exposing its buffer, and have a step to marshal (byte-by-byte) between the two implementations.\r\n\t* Tons of APIs take `EndPoint`, it's a nice abstraction that we wanted here despite performance implications.\r\n* It isn't immediately obvious from the API surface that `socketAddress` is written to by `ReceiveFrom`. Is there a better way we can indicate this?\r\n* The two new methods on `SocketAddress` exist purely because System.Net.Sockets needs access to internals in System.Net.Primitives. Any thoughts on how to avoid exposing these \"pubternal\" bits?\r\n   * One option is to merge System.Net.Primitives and System.Net.Sockets; I don't see harm in this but that is a much larger discussion :)\r\n\r\n# Related Issues\r\n\r\nThere are two additional issues to update our APIs with `ValueTask`/`Span`/`Memory` that this will need to be consistent with:\r\n* Update `Socket` class #35861 \r\n* Update `UdpClient` class #28131 ","Url":"https://github.com/dotnet/corefx/issues/40933","RelatedDescription":"Open issue \"Proposal: Zero allocation connectionless sockets\" (#40933)"},{"Id":"490830994","IsPullRequest":false,"CreatedAt":"2019-09-08T18:48:16","Actor":"M-Boukhlouf","Number":"40934","RawContent":null,"Title":"CookieContainer do not handle session cookies (when Expires is not specified)","State":"open","Body":"# CookieContainer do not handle session cookies (when Expires is not specified)\r\n\r\n\r\nAccording to this page: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie\r\n\r\n> The maximum lifetime of the cookie as an HTTP-date timestamp. If not specified, the cookie will have the lifetime of a session cookie. A session is finished when the client is shut down meaning that session cookies will get removed at that point.\r\n\r\nYet, in this case when the Expires is not specified in this Set-Cookie header:\r\n`Set-Cookie: name=value; path=/store; httponly`\r\nThe CookieContainer set the Expires property to \"1/1/0001 12:00:00 AM\"\r\nWhich is expired and the cookie is not used in the following requests.\r\n","Url":"https://github.com/dotnet/corefx/issues/40934","RelatedDescription":"Open issue \"CookieContainer do not handle session cookies (when Expires is not specified)\" (#40934)"},{"Id":"491229895","IsPullRequest":false,"CreatedAt":"2019-08-17T10:39:00","Actor":"tndata","Number":"40947","RawContent":null,"Title":"Provide the C# 8 nullable attributes as a NuGet package","State":"open","Body":"In C# 8 (.NET Core 3) you added new nullability-attributes to allow us to manually annotate types with their nullability.\r\n\r\nLocated here:\r\nroslyn/src/Workspaces/Core/Portable/Utilities/NullableHelpers/NullableAttributes.cs\r\n\r\nWhy not provide these attributes as a stand-alone NuGet package, so that legacy packages (.NET Core <2.x / .NET Standard <2.1) libraries can be annotated with these attributes as well.\r\n\r\nBenefits:\r\n* We can start annotating our legacy libraries \r\n* We would get more nullability warnings in our .NET Core 3 applications\r\n\r\nThe alternative is to manually add these attributes to my legacy libraries, but that feels a bit dirty. The nice thing is that the C# 8 compiler uses these attributes when used in legacy libraries.\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/corefx/issues/40947","RelatedDescription":"Open issue \"Provide the C# 8 nullable attributes as a NuGet package\" (#40947)"}],"ResultType":"GitHubIssue"},"Roslyn-Issues":{"Issues":[{"Id":"491381670","IsPullRequest":true,"CreatedAt":"2019-09-10T01:30:08","Actor":"dotnet-bot","Number":"38602","RawContent":null,"Title":"Merge master to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/38602","RelatedDescription":"Closed or merged PR \"Merge master to master-vs-deps\" (#38602)"},{"Id":"491381624","IsPullRequest":true,"CreatedAt":"2019-09-10T00:01:59","Actor":"dotnet-bot","Number":"38601","RawContent":null,"Title":"Merge release/dev16.3 to release/dev16.3-vs-deps","State":"open","Body":"\nThis is an automatically generated pull request from release/dev16.3 into release/dev16.3-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.3-to-release/dev16.3-vs-deps\ngit reset --hard upstream/release/dev16.3-vs-deps\ngit merge upstream/release/dev16.3\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.3-to-release/dev16.3-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/38601","RelatedDescription":"Open PR \"Merge release/dev16.3 to release/dev16.3-vs-deps\" (#38601)"},{"Id":"491381284","IsPullRequest":true,"CreatedAt":"2019-09-10T00:00:41","Actor":"dotnet-bot","Number":"38600","RawContent":null,"Title":"Merge release/dev16.3 to master","State":"open","Body":"\nThis is an automatically generated pull request from release/dev16.3 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.3-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/dev16.3\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.3-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/38600","RelatedDescription":"Open PR \"Merge release/dev16.3 to master\" (#38600)"},{"Id":"491377193","IsPullRequest":false,"CreatedAt":"2019-09-09T23:43:04","Actor":"NextTurn","Number":"38599","RawContent":null,"Title":"IDE0004 on pointer cast in return statement","State":"open","Body":"**Version Used**: Visual Studio 2019 version 16.3\r\n\r\n**Steps to Reproduce**:\r\n\r\n```cs\r\nusing System;\r\n\r\nclass Program\r\n{\r\n    public static int Value;\r\n\r\n    public static unsafe int Read(IntPtr pointer, int offset)\r\n    {\r\n        Value = ((int*)pointer)[offset]; // No warning\r\n        return ((int*)pointer)[offset];\r\n        //      ~~~~~~\r\n    }\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\n\r\nIDE0004 is not reported for the cast.\r\n\r\n**Actual Behavior**:\r\n\r\nIDE0004 is reported for the cast.","Url":"https://github.com/dotnet/roslyn/issues/38599","RelatedDescription":"Open issue \"IDE0004 on pointer cast in return statement\" (#38599)"},{"Id":"491254740","IsPullRequest":true,"CreatedAt":"2019-09-09T23:35:18","Actor":"333fred","Number":"38594","RawContent":null,"Title":"Run scripts/PublicAPI/mark-shipped.cmd","State":"closed","Body":"Fixes https://github.com/dotnet/roslyn/issues/37443. @JoeRobich fyi, this is almost certainly going to cause merge conflicts when it makes its way to master.","Url":"https://github.com/dotnet/roslyn/pull/38594","RelatedDescription":"Closed or merged PR \"Run scripts/PublicAPI/mark-shipped.cmd\" (#38594)"},{"Id":"491374332","IsPullRequest":true,"CreatedAt":"2019-09-09T23:31:37","Actor":"333fred","Number":"38598","RawContent":null,"Title":"Support reinferring indexers","State":"open","Body":"We now reinfer indexer nullability. Additionally, `GetSymbolInfo` was returning no information for range and pattern-based indexers, this has now been fixed to return the actual property or method symbol being used in those cases. @dotnet/roslyn-compiler for review. @jasonmalinowski and @ryzngard for the nullable api change, as well as for the general change for indexers and ranges. This might cause you to encounter symbols where you aren't currently.","Url":"https://github.com/dotnet/roslyn/pull/38598","RelatedDescription":"Open PR \"Support reinferring indexers\" (#38598)"},{"Id":"491236236","IsPullRequest":true,"CreatedAt":"2019-09-09T23:31:35","Actor":"agocke","Number":"38592","RawContent":null,"Title":"Fix race condition in AnalyzerConfigSet","State":"closed","Body":"When I added the dedup dictionary for diagnostic IDs in AnalyzerConfigSet\r\nit wasn't clear to me that the GetOptionsForSourcePath method was intended\r\nto be called on multiple threads. This change fixes the dedup dictionary\r\nto be thread safe.","Url":"https://github.com/dotnet/roslyn/pull/38592","RelatedDescription":"Closed or merged PR \"Fix race condition in AnalyzerConfigSet\" (#38592)"},{"Id":"491341862","IsPullRequest":true,"CreatedAt":"2019-09-09T21:43:30","Actor":"chsienki","Number":"38597","RawContent":null,"Title":"Stop caching docker on linux builds","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/38597","RelatedDescription":"Open PR \"Stop caching docker on linux builds\" (#38597)"},{"Id":"491309465","IsPullRequest":false,"CreatedAt":"2019-09-09T20:28:42","Actor":"ivanbasov","Number":"38596","RawContent":null,"Title":"Roslyn completion cannot find Blazor document on commit","State":"open","Body":"Here \r\nhttps://github.com/dotnet/roslyn/blob/master-vs-deps/src/EditorFeatures/Core/Implementation/IntelliSense/AsyncCompletion/CommitManager.cs#L139\r\nRoslyn looks for a document in Roslyn workspace but the snapshot may belong to,e.g. a Blazor buffer. Therefore, now document is found and the completion commit is cancelled.\r\n\r\nTherefore, completion not working in Blazor scenarios like this one:\r\nhttps://github.com/aspnet/AspNetCore/issues/13319#issuecomment-524089668\r\n","Url":"https://github.com/dotnet/roslyn/issues/38596","RelatedDescription":"Open issue \"Roslyn completion cannot find Blazor document on commit\" (#38596)"},{"Id":"491232797","IsPullRequest":true,"CreatedAt":"2019-09-09T20:05:11","Actor":"jasonmalinowski","Number":"38591","RawContent":null,"Title":"Random override completion cleanup","State":"closed","Body":"Was having to look at this code trying to fix a bug, and kept running into dead code. This cleans up some random bits of it.","Url":"https://github.com/dotnet/roslyn/pull/38591","RelatedDescription":"Closed or merged PR \"Random override completion cleanup\" (#38591)"},{"Id":"490782381","IsPullRequest":false,"CreatedAt":"2019-09-09T19:16:50","Actor":"CreateAndInject","Number":"38579","RawContent":null,"Title":"Why does compiler generate a br instruction?","State":"closed","Body":"```\r\n        static string GetString()\r\n        {\r\n            return \"Test\";\r\n        }\r\n```\r\n\r\nCompile it, view IL\r\n\r\n**Expected Behavior**:\r\n```\r\nldstr     \"Test\"\r\nret\r\n```\r\n\r\n**Actual Behavior**:\r\n```\r\nIL_0000: nop\r\nIL_0001: ldstr     \"Test\"\r\nIL_0006: stloc.0\r\nIL_0007: br.s      IL_0009\r\nIL_0009: ldloc.0\r\nIL_000A: ret\r\n```\r\n\r\nWhy does compiler generate so many IL instructions?  Especially, why does compiler generate a br instruction?\r\n","Url":"https://github.com/dotnet/roslyn/issues/38579","RelatedDescription":"Closed issue \"Why does compiler generate a br instruction?\" (#38579)"},{"Id":"491255136","IsPullRequest":false,"CreatedAt":"2019-09-09T18:29:52","Actor":"chborl","Number":"38595","RawContent":null,"Title":"Avoid duplicating GetAdditionalProperties by using an extension method","State":"open","Body":"\r\n_Originally posted by @chborl in https://github.com/dotnet/roslyn/pull/37802/review_comment/create_","Url":"https://github.com/dotnet/roslyn/issues/38595","RelatedDescription":"Open issue \"Avoid duplicating GetAdditionalProperties by using an extension method\" (#38595)"},{"Id":"491248208","IsPullRequest":true,"CreatedAt":"2019-09-09T18:14:57","Actor":"JoeRobich","Number":"38593","RawContent":null,"Title":"Make OrganizeImportsService public","State":"open","Body":"dotnet format would like to use this service without needing an IVT or external access project.","Url":"https://github.com/dotnet/roslyn/pull/38593","RelatedDescription":"Open PR \"Make OrganizeImportsService public\" (#38593)"},{"Id":"490965305","IsPullRequest":true,"CreatedAt":"2019-09-09T18:12:25","Actor":"alrz","Number":"38583","RawContent":null,"Title":"Remove duplicated project guid","State":"closed","Body":"I don't think this is intentional.","Url":"https://github.com/dotnet/roslyn/pull/38583","RelatedDescription":"Closed or merged PR \"Remove duplicated project guid\" (#38583)"},{"Id":"491218756","IsPullRequest":false,"CreatedAt":"2019-09-09T17:10:03","Actor":"AlekseyTs","Number":"38590","RawContent":null,"Title":"We should consider removing basesBeingResolved parameter from TypeSymbol.InterfacesNoUseSiteDiagnostics API","State":"open","Body":"```\r\ninternal abstract ImmutableArray<NamedTypeSymbol> InterfacesNoUseSiteDiagnostics(ConsList<TypeSymbol> basesBeingResolved = null);\r\n```\r\n\r\nThe parameter is actually passed only in a couple of places (they can be adjusted to use GetDeclaredInterfaces API directly as several places in the compiler already do) and passing the parameter doesn't always prevent cycles. For example, the dependency checks performed by implementation in SourceNamedTypeSymbol doesn't perform cycle detection/prevention. Developers think that the method is cycle safe when appropriate value is passed to it, but that is actually not the case. I encountered real stack-overflow situations trying to use the method.","Url":"https://github.com/dotnet/roslyn/issues/38590","RelatedDescription":"Open issue \"We should consider removing basesBeingResolved parameter from TypeSymbol.InterfacesNoUseSiteDiagnostics API\" (#38590)"},{"Id":"491203209","IsPullRequest":false,"CreatedAt":"2019-09-09T16:35:41","Actor":"AdmiralSnyder","Number":"38589","RawContent":null,"Title":"[Feature Request] Display compiler errors inline","State":"open","Body":"This is a screenshot from MonoDevelop:\r\n[Some code with a compiler error](https://cdn.discordapp.com/attachments/169726586931773440/620557050702725140/unknown.png)\r\n\r\nThere's an error in that code, which squiggles the line. Right next to the line, the error message is drawn (cannot assign void... in this case). This way, i don't need to hover over it or look at the error list.\r\n\r\nI'd like to have that feature in VS, please.\r\n ","Url":"https://github.com/dotnet/roslyn/issues/38589","RelatedDescription":"Open issue \"[Feature Request] Display compiler errors inline\" (#38589)"},{"Id":"491198911","IsPullRequest":false,"CreatedAt":"2019-09-09T16:26:52","Actor":"sharwell","Number":"38588","RawContent":null,"Title":"Determine optimal formatting for ternary arguments","State":"open","Body":"The formatter doesn't produce readable code from the following expression:\r\n\r\nhttps://github.com/dotnet/roslyn/blob/b4c94691d796151c89aa39ff5f0b5caa7f5d5564/src/Compilers/CSharp/Portable/Symbols/Source/SourceMemberContainerSymbol_ImplementationChecks.cs#L1040-L1054\r\n\r\nHowever, it's not clear how this code should be formatted such that the result _is_ readable.","Url":"https://github.com/dotnet/roslyn/issues/38588","RelatedDescription":"Open issue \"Determine optimal formatting for ternary arguments\" (#38588)"},{"Id":"491196668","IsPullRequest":false,"CreatedAt":"2019-09-09T16:22:27","Actor":"sharwell","Number":"38587","RawContent":null,"Title":"Consider suppressing the formatter when IDE0055 is suppressed","State":"open","Body":"**Version Used**: 16.3 Preview 3\r\n\r\n**Steps to Reproduce**:\r\n\r\nRun **Format Document** on a file containing the following:\r\n\r\n```csharp\r\n#pragma warning suppress IDE0055 // Fix formatting\r\nint value = new int ( );\r\n#pragma warning suppress IDE0055 // Fix formatting\r\n```\r\n\r\n**Expected Behavior**:\r\n\r\nThe code inside the IDE0055 suppression is not reformatted.\r\n\r\n**Actual Behavior**:\r\n\r\nThe **Format Document** command ignores the IDE0055 suppression, and formats the code anyway.\r\n","Url":"https://github.com/dotnet/roslyn/issues/38587","RelatedDescription":"Open issue \"Consider suppressing the formatter when IDE0055 is suppressed\" (#38587)"},{"Id":"491144908","IsPullRequest":false,"CreatedAt":"2019-09-09T14:50:01","Actor":"alrz","Number":"38586","RawContent":null,"Title":"'warning CS8655: The switch expression does not handle some null inputs' on suppressed nulls","State":"open","Body":"**Version Used**: master \r\n\r\n**Steps to Reproduce**:\r\n\r\n```cs\r\n#nullable enable\r\npublic class C {\r\n    public int M0(C a)  => a switch { C _ => 0 }; // ok\r\n    public int M1(C? a) => a switch { C _ => 0 }; // warns\r\n    public int M2(C? a) => a! switch { C _ => 0 }; // warns (none expected)\r\n}\r\n```\r\n\r\n**Expected Behavior**: no warnings in M2\r\n\r\n**Actual Behavior**: compiler warns about unhandled null in M2\r\n","Url":"https://github.com/dotnet/roslyn/issues/38586","RelatedDescription":"Open issue \"'warning CS8655: The switch expression does not handle some null inputs' on suppressed nulls\" (#38586)"},{"Id":"491057987","IsPullRequest":true,"CreatedAt":"2019-09-09T14:38:14","Actor":"dotnet-maestro[bot]","Number":"38584","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:567feadf-e495-4ebb-cee4-08d67668456c)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190908.2\r\n- **Date Produced**: 9/8/2019 11:40 PM\r\n- **Commit**: 29ee79a10c58dd6863a46157e374521cac610ad8\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19458.2\r\n\r\n[marker]: <> (End:567feadf-e495-4ebb-cee4-08d67668456c)\r\n\r\n","Url":"https://github.com/dotnet/roslyn/pull/38584","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#38584)"},{"Id":"491111933","IsPullRequest":false,"CreatedAt":"2019-09-09T13:55:45","Actor":"BhaaLseN","Number":"38585","RawContent":null,"Title":"Refactoring \"Apply implicit/explicit type preferences\" breaks working code using named tuples with explicit type specifier as out parameter","State":"open","Body":"**Version Used**:\r\nVisual Studio Enterprise 2019, Version 16.2.4\r\n\r\n**Steps to Reproduce**:\r\n1. Create a C# Project.\r\n2. Add an `.editorconfig` file with `csharp_style_var_elsewhere = true`:\r\n```\r\n[*.cs]\r\n#csharp_style_var_for_built_in_types = false : suggestion\r\n#csharp_style_var_when_type_is_apparent = true : suggestion\r\ncsharp_style_var_elsewhere = true : suggestion\r\n```\r\n(other options left commented, since I wasn't sure if they affect the outcome)\r\n3. Add a C# source file containing the following snippet:\r\n```c#\r\nvar dict = new Dictionary<string, (int, int)>();\r\n\r\nif (dict.TryGetValue(\"test\", out (int One, int Two) tuple))\r\n    Console.WriteLine(\"One={0}, Two={1}\", tuple.One, tuple.Two);\r\n```\r\n4. Invoke a Code Cleanup profile that includes \"Apply implicit/explicit type preferences\".\r\n\r\n**Expected Behavior**:\r\nCode still compiles afterwards.\r\n\r\n**Actual Behavior**:\r\nCS1061 shows for both tuple member accesses. The code has changed to the following (which doesn't compile anymore because the names `One` and `Two` are not known):\r\n```c#\r\nvar dict = new Dictionary<string, (int, int)>();\r\n\r\nif (dict.TryGetValue(\"test\", out var tuple))\r\n    Console.WriteLine(\"One={0}, Two={1}\", tuple.One, tuple.Two);\r\n```\r\n\r\n**Note**:\r\nWhile this is probably not the best style of code (and I'd rather encourage the use of `new Dictionary<string, (int One, int Two)>()` - which in fact is the fix I applied afterwards); refactorings in combination with `.editorconfig` directives should not cause code that was previously fine to fail compiling afterwards.\r\n\r\nThis does _not_ happen for direct indexer access and others; where using `var` would be fine (but deconstruction would be the better option). But as `out` parameter, deconstruction is not (yet) an option, so this is the way to go for now.","Url":"https://github.com/dotnet/roslyn/issues/38585","RelatedDescription":"Open issue \"Refactoring \"Apply implicit/explicit type preferences\" breaks working code using named tuples with explicit type specifier as out parameter\" (#38585)"},{"Id":"490938760","IsPullRequest":true,"CreatedAt":"2019-09-09T07:59:20","Actor":"YairHalberstadt","Number":"38582","RawContent":null,"Title":"Extract Method Can Call ConfigureAwait(False) if extracted method does.","State":"open","Body":"See #38529\r\n\r\nIf anywhere in the extracted method we call ConfigureAwait false, we call ConfigureAwait(false) in the invocation of the extracted method.\r\n\r\nThis preserves semantics around configure await, since if ConfigureAwait(false) is called anywhere in a method, the rest of the method will not continue on the original captured context.\r\n\r\nI also fixed a bug at the same time, namely now Extract Method does not make the extracted method async, if it only used await in a local function.","Url":"https://github.com/dotnet/roslyn/pull/38582","RelatedDescription":"Open PR \"Extract Method Can Call ConfigureAwait(False) if extracted method does.\" (#38582)"},{"Id":"490840052","IsPullRequest":false,"CreatedAt":"2019-09-09T01:48:24","Actor":"vsfeedback","Number":"38581","RawContent":null,"Title":"Cut and paste inserts extra LF after Attribute","State":"open","Body":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/719203/cut-and-paste-inserts-extra-lf-after-attribute.html)._\n\n---\nWhen C# Code Style/Formatting Automatically format on paste is set, unwelcome and unspecified changes are made around attributes.\n\nIn particular this\n```\n[Foo] void Bar() {\nvar x = 1;\n    }\n```\nbecomes this\n```\n[Foo]\nvoid Bar() {\n    var x = 1;\n}\n```\n\nNote that the assignment statement and closing brace are moved in a way that is consistent with my CodeStyle settings. However an extra line feed is added after the attribute.\n\nI realize that some people, perhaps most people, prefer the extra line. Nonetheless this convention should not be forced on all users. The default for code styling should be that if a feature/convention is not specified then leave it as-is. There is no code style option for attribute placement.\n\nDefect: Code Style operations should leave attribute placement elements as-is\n\nFeature Suggestion: Provide Code Style options for attribute placement.\n\n---\n### Original Comments\n\n#### Visual Studio Feedback System on 9/1/2019, 09:29 PM: \n\n<p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n\n---\n### Original Solutions\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/38581","RelatedDescription":"Open issue \"Cut and paste inserts extra LF after Attribute\" (#38581)"},{"Id":"490628784","IsPullRequest":true,"CreatedAt":"2019-09-08T14:14:46","Actor":"dotnet-maestro[bot]","Number":"38573","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:567feadf-e495-4ebb-cee4-08d67668456c)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190907.1\r\n- **Date Produced**: 9/7/2019 12:52 PM\r\n- **Commit**: c27945fc559ee636139d9f460db71242b16483e6\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19457.1\r\n\r\n[marker]: <> (End:567feadf-e495-4ebb-cee4-08d67668456c)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/roslyn/pull/38573","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#38573)"},{"Id":"490712299","IsPullRequest":false,"CreatedAt":"2019-09-08T05:21:29","Actor":"kcdhaker1987","Number":"38578","RawContent":null,"Title":"VBCS Compiler takes almost 70 % of cpu on every page run on first time in ASP .Net MVC project","State":"open","Body":"\r\n![vbcs complier1](https://user-images.githubusercontent.com/25609223/64483779-39186100-d226-11e9-805f-424f50efcaab.png)\r\n**Version Used**:  2.0.1\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. \r\n2. \r\n3. \r\n\r\n**Expected Behavior**: Should not use that much of CPU and it takes almost 30 seconds on each page every deployment\r\n\r\n**Actual Behavior**: Taking too much time and too much CPU\r\n","Url":"https://github.com/dotnet/roslyn/issues/38578","RelatedDescription":"Open issue \"VBCS Compiler takes almost 70 % of cpu on every page run on first time in ASP .Net MVC project\" (#38578)"},{"Id":"490669424","IsPullRequest":true,"CreatedAt":"2019-09-07T19:04:06","Actor":"DominikDitoIvosevic","Number":"38577","RawContent":null,"Title":"my bad. delete please","State":"closed","Body":"","Url":"https://github.com/dotnet/roslyn/pull/38577","RelatedDescription":"Closed or merged PR \"my bad. delete please\" (#38577)"},{"Id":"490626145","IsPullRequest":false,"CreatedAt":"2019-09-07T17:10:54","Actor":"miloush","Number":"38572","RawContent":null,"Title":"CS0103 Generate method preview shows empty line only","State":"closed","Body":"**Version Used**: VisualStudio.16.Preview/16.3.0-pre.3.0+29230.61\r\n\r\n**Steps to Reproduce**:\r\n```C#\r\nclass Program\r\n{\r\n    static void Main()\r\n    {\r\n        Test();\r\n    }\r\n\r\n    void OtherMethod()\r\n    {\r\n    }\r\n}\r\n```\r\nPreview the quick fix of generating the `Test()` method\r\n\r\n**Expected Behavior**:\r\n![image](https://user-images.githubusercontent.com/10546952/64474455-0cecd980-d16d-11e9-9c69-cd64ce8a7dd2.png)\r\n\r\n**Actual Behavior**:\r\n![image](https://user-images.githubusercontent.com/10546952/64474445-f6df1900-d16c-11e9-9b8b-a2bf8aea1559.png)\r\n","Url":"https://github.com/dotnet/roslyn/issues/38572","RelatedDescription":"Closed issue \"CS0103 Generate method preview shows empty line only\" (#38572)"},{"Id":"490648324","IsPullRequest":true,"CreatedAt":"2019-09-07T15:32:18","Actor":"huoyaoyuan","Number":"38576","RawContent":null,"Title":"Remove DesktopShim.FileNotFoundExceptionShim","State":"open","Body":"Since we have dropped .NET 4.5 for a long time, the shim should be removed now.","Url":"https://github.com/dotnet/roslyn/pull/38576","RelatedDescription":"Open PR \"Remove DesktopShim.FileNotFoundExceptionShim\" (#38576)"},{"Id":"490644796","IsPullRequest":false,"CreatedAt":"2019-09-07T14:58:51","Actor":"AbeniMatteo","Number":"38575","RawContent":null,"Title":"Code analysis throws NullReferenceException causing VS\\csc crash","State":"open","Body":"**Version Used**: \r\nVS: `VisualStudio.16.Preview/16.3.0-pre.3.0+29230.61`\r\n.NET Core SDK: `3.0.100-preview9-014004`\r\n\r\n**Steps to Reproduce**:\r\n\r\n1.  Open the following snippet in VS (you can also check [here](https://sharplab.io/#v2:EYLgZgpghgLgrgJwgZwLQAcoKgW1QOzgBsiBjACwlIGsBLfAcwBoATEAagB8BiQkqYEQgACCPgFCAsACgZ4nCkykRAJQjoEAexkBvGcIPCAAgCYAjPsOWDp4QGFh14XumG3xgCzCAsgAoAlI6u7gYuISEAbljCUURwIgC8wgDiEDAAalBxEL6+LACe8rSk/gBEpf4A3E7hwvgQAO7CACKwEAAqtAoA/L6x8VU1hgC+MkMGrTAdXSKpGVnxvkZmAAzCUwAeMIEJAHx1xETVwQaj0sNAA=)):\r\n```csharp\r\n#nullable enable\r\n\r\nnamespace Repro\r\n{\r\n    using System;\r\n    \r\n    class C \r\n    {\r\n        void M() \r\n        {\r\n            var value = GetValue((dynamic)\"\");\r\n            new DateTime?(value);\r\n        }\r\n\r\n        DateTime GetValue(string text) => null;\r\n    }\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\nNo crash.\r\n\r\n**Actual Behavior**:\r\nVS crashes when\\if the file is open, csc.exe crashes when the compilation is launched without having the file open in VS.","Url":"https://github.com/dotnet/roslyn/issues/38575","RelatedDescription":"Open issue \"Code analysis throws NullReferenceException causing VS\\csc crash\" (#38575)"},{"Id":"490640401","IsPullRequest":true,"CreatedAt":"2019-09-07T14:16:10","Actor":"huoyaoyuan","Number":"38574","RawContent":null,"Title":"Extend IDE0041 to object equality operator without cast","State":"open","Body":"Fixes #38506","Url":"https://github.com/dotnet/roslyn/pull/38574","RelatedDescription":"Open PR \"Extend IDE0041 to object equality operator without cast\" (#38574)"}],"ResultType":"GitHubIssue"},"CoreRT-Issues":{"Issues":[{"Id":"490571600","IsPullRequest":true,"CreatedAt":"2019-09-09T17:52:58","Actor":"davidwrighton","Number":"7779","RawContent":null,"Title":"Resource writing","State":"closed","Body":"- Refactor the win32 resource reading code to use more natural managed data structures\r\n- Build a Win32 resource emitter on top of refactored data structures\r\n- Replace resource section copy logic with new node to generate win32 resources","Url":"https://github.com/dotnet/corert/pull/7779","RelatedDescription":"Closed or merged PR \"Resource writing\" (#7779)"},{"Id":"491229182","IsPullRequest":false,"CreatedAt":"2019-09-09T17:33:38","Actor":"RalfKornmannEnvision","Number":"7787","RawContent":null,"Title":"finally funclets brocken for ARM64!?","State":"open","Body":"I am not sure if this is a corert or coreclr issue but as I am working on a corert port for an custom ARM64 system I start with posting it here.\r\n\r\nAfter adding code to the objectwriter and the ilcompiler I managed to get a simple hello world app running to the main method. But it than crashed during the shutdown. After some debugging i figured out that the static constructors are never called. After some more debugging I noticed that ClassConstructorRunner.GetCctor corrupts the stack frame,\r\n\r\nIt happens at the end of the method in an assembler block that i believe is the finally funclet for the using. It looks like this\r\n\r\n  28667c: a9be7bfd stp x29, x30, [sp, #-32]!\r\n  286680: f90013f3 str x19, [sp, #32]\r\n  286684: 9103a3a0 add x0, x29, #0xe8\r\n  286688: 97fc0d42 bl 189b90 <S_P_CoreLib_System_Threading_LockHolder__Dispose>\r\n  28668c: d503201f nop\r\n  286690: d503201f nop\r\n  286694: f94013f3 ldr x19, [sp, #32]\r\n  286698: a8c27bfd ldp x29, x30, [sp], #32\r\n  28669c: d65f03c0 ret\r\n\r\nThe fact that x19 is stored with an offset of 32 looks strange for me and it overwrites the already stored data. Based on other stackframes I would expect an offset of 16 here. Or the new stackframe for the funclet needs to be 16 bytes larger.\r\n\r\nDisclaimer: As the development system for the custom ARM64 system runs on windows I although use a ARM64 jit that is build to run on X64. Very simular to the protonojit but not as alt jit to get all the data needed to write the arm64 elf file that the linker for the custom ARM64 system needs. Unfortunately I don't have an ARM64 windows or linux system to check if a non cross jit generates the same code.\r\n\r\nI assume there is no ready to use jit for my use case and I need to build it anyway. In this case I could properly fix the issue but I would need a hint how the code is expected to look like.  ","Url":"https://github.com/dotnet/corert/issues/7787","RelatedDescription":"Open issue \"finally funclets brocken for ARM64!?\" (#7787)"},{"Id":"491162081","IsPullRequest":true,"CreatedAt":"2019-09-09T15:18:32","Actor":"Dotnet-GitSync-Bot","Number":"7786","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"open","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7786","RelatedDescription":"Open PR \"Mirror changes from dotnet/coreclr,corefx\" (#7786)"},{"Id":"490799316","IsPullRequest":true,"CreatedAt":"2019-09-08T23:57:41","Actor":"MichalStrehovsky","Number":"7785","RawContent":null,"Title":"Mark unsafe intrinsics as reflection blocked","State":"closed","Body":"Keeping these reflection enabled pulls in quite a bit of junk (generic dictionaries, standalone method bodies, bookkeeping) that adds up to 1.5% of the size of Hello World...","Url":"https://github.com/dotnet/corert/pull/7785","RelatedDescription":"Closed or merged PR \"Mark unsafe intrinsics as reflection blocked\" (#7785)"},{"Id":"490775070","IsPullRequest":false,"CreatedAt":"2019-09-08T21:11:53","Actor":"mrzaxaryan","Number":"7784","RawContent":null,"Title":"Non-trivial marshalling is not yet supported by this compiler.","State":"closed","Body":"Can't save image to MemoryStream \r\n.NET Core v3.0.0-preview9\r\nVisual Studio 16.3.0 Preview 3.0\r\nException: `System.Exception: Method '[System.Drawing.Common]System.Drawing.SafeNativeMethods+Gdip.GdipSaveImageToStream(HandleRef,IStream,Guid&,HandleRef)' requires non-trivial marshalling that is not yet supported by this compiler.\r\n   at System.Drawing.SafeNativeMethods.Gdip.GdipSaveImageToStream(HandleRef, Interop.Ole32.IStream, Guid&, HandleRef) + 0x39\r\n   at System.Drawing.Image.Save(Stream, ImageCodecInfo, EncoderParameters) + 0x1af`\r\n","Url":"https://github.com/dotnet/corert/issues/7784","RelatedDescription":"Closed issue \"Non-trivial marshalling is not yet supported by this compiler.\" (#7784)"},{"Id":"490757817","IsPullRequest":true,"CreatedAt":"2019-09-08T20:09:59","Actor":"MichalStrehovsky","Number":"7782","RawContent":null,"Title":"Port GC changes from CoreCLR","State":"closed","Body":"Ports https://github.com/dotnet/coreclr/commit/cd42ee8fe410f71026467ad2e90116115b85f68d\r\nPorts https://github.com/dotnet/coreclr/commit/740752c9d206a465e96a4d01e7dafb6adb6ded63","Url":"https://github.com/dotnet/corert/pull/7782","RelatedDescription":"Closed or merged PR \"Port GC changes from CoreCLR\" (#7782)"},{"Id":"490760342","IsPullRequest":true,"CreatedAt":"2019-09-08T20:08:39","Actor":"MichalStrehovsky","Number":"7783","RawContent":null,"Title":"Update CoreFX","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7783","RelatedDescription":"Closed or merged PR \"Update CoreFX\" (#7783)"},{"Id":"490704961","IsPullRequest":true,"CreatedAt":"2019-09-08T05:12:25","Actor":"Dotnet-GitSync-Bot","Number":"7781","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7781","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7781)"},{"Id":"490412146","IsPullRequest":true,"CreatedAt":"2019-09-08T00:46:12","Actor":"trylek","Number":"7777","RawContent":null,"Title":"Output raw test lists for the individual outcomes from SuperIlc","State":"closed","Body":"This change tweaks SuperIlc to emit simple line-oriented test lists\r\nfor the various compilation and execution outcomes. I found this\r\nquite useful for comparing various runs. I have also deleted a bit\r\nof dead code I noticed.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7777","RelatedDescription":"Closed or merged PR \"Output raw test lists for the individual outcomes from SuperIlc\" (#7777)"},{"Id":"490662770","IsPullRequest":false,"CreatedAt":"2019-09-07T17:55:27","Actor":"nexon33","Number":"7780","RawContent":null,"Title":"Implement GetInterfaceMap","State":"open","Body":"I want to be able to render a view in asp.net core, I need the controller inheritance to be able to call View();\r\nIs there any simple way of doing this or should I forget about it for now?","Url":"https://github.com/dotnet/corert/issues/7780","RelatedDescription":"Open issue \"Implement GetInterfaceMap\" (#7780)"},{"Id":"490072419","IsPullRequest":true,"CreatedAt":"2019-09-06T23:34:35","Actor":"davidwrighton","Number":"7776","RawContent":null,"Title":"Partial compilation and generic ibc processing","State":"closed","Body":"- Support for partial compilation\r\n- Support for parsing generics in IBC data\r\n - Bonus feature of searching referenced and input assemblies for types if the module in the IBC data is invalid","Url":"https://github.com/dotnet/corert/pull/7776","RelatedDescription":"Closed or merged PR \"Partial compilation and generic ibc processing\" (#7776)"},{"Id":"490437186","IsPullRequest":true,"CreatedAt":"2019-09-06T22:57:58","Actor":"Dotnet-GitSync-Bot","Number":"7778","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7778","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7778)"},{"Id":"487718255","IsPullRequest":true,"CreatedAt":"2019-09-05T21:27:38","Actor":"davidwrighton","Number":"7758","RawContent":null,"Title":"Ibc work","State":"closed","Body":"Implement IBC tuning compilation and parsing\r\nStill tbd\r\n- method block count utilization\r\n- generics testing\r\n\r\n(Also my most recent changes introduced some sort of subtle bug, but I wanted to get this out for initial code review from the folks in Europe.)","Url":"https://github.com/dotnet/corert/pull/7758","RelatedDescription":"Closed or merged PR \"Ibc work\" (#7758)"},{"Id":"489360143","IsPullRequest":true,"CreatedAt":"2019-09-05T19:38:18","Actor":"fadimounir","Number":"7772","RawContent":null,"Title":"Compile cross-module generics in the same version bubble.","State":"closed","Body":"This work is related to the single-exe prototype, but after discussing with @davidwrighton, these are changes that we can have in master as well.\r\n\r\nCompiling generics from external modules in the version bubble is enabled using a command line switch.\r\n\r\nOther changes: Changing signatures in hashtable of instantiations to include owning type as a way of encoding the module override info\r\n","Url":"https://github.com/dotnet/corert/pull/7772","RelatedDescription":"Closed or merged PR \"Compile cross-module generics in the same version bubble.\" (#7772)"},{"Id":"489380977","IsPullRequest":true,"CreatedAt":"2019-09-05T14:33:56","Actor":"MichalStrehovsky","Number":"7773","RawContent":null,"Title":"Get jitwrapper building on x86","State":"closed","Body":"CoreCLR repo is going to build it that way. I could exclude that outside x64, but it's just better to fix it...","Url":"https://github.com/dotnet/corert/pull/7773","RelatedDescription":"Closed or merged PR \"Get jitwrapper building on x86\" (#7773)"},{"Id":"488748576","IsPullRequest":true,"CreatedAt":"2019-09-05T13:42:32","Actor":"janvorli","Number":"7767","RawContent":null,"Title":"Implement SystemV AMD64 ABI struct classification","State":"closed","Body":"This change implements SystemV AMD64 ABI struct classification necessary\r\nfor correct passing of function arguments of struct types and returning\r\nthese by value on Unix AMD64.\r\n\r\nThis change is a port of the CoreCLR version with necessary changes to reflect differences in the type system interface between CoreRT and CoreCLR. I have also added caching of the classification result as JIT calls classification for the same type many times.","Url":"https://github.com/dotnet/corert/pull/7767","RelatedDescription":"Closed or merged PR \"Implement SystemV AMD64 ABI struct classification\" (#7767)"},{"Id":"489459547","IsPullRequest":true,"CreatedAt":"2019-09-04T23:50:25","Actor":"cshung","Number":"7775","RawContent":null,"Title":"[WIP] Complete the filtering for MethodImpl.AggressiveOptimization","State":"open","Body":"","Url":"https://github.com/dotnet/corert/pull/7775","RelatedDescription":"Open PR \"[WIP] Complete the filtering for MethodImpl.AggressiveOptimization\" (#7775)"},{"Id":"489406467","IsPullRequest":true,"CreatedAt":"2019-09-04T23:16:31","Actor":"Dotnet-GitSync-Bot","Number":"7774","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub @NextTurn","Url":"https://github.com/dotnet/corert/pull/7774","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7774)"},{"Id":"488925681","IsPullRequest":true,"CreatedAt":"2019-09-04T16:39:39","Actor":"Dotnet-GitSync-Bot","Number":"7771","RawContent":null,"Title":"Mirror changes from dotnet/corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7771","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx\" (#7771)"},{"Id":"488893657","IsPullRequest":true,"CreatedAt":"2019-09-04T02:16:33","Actor":"Dotnet-GitSync-Bot","Number":"7770","RawContent":null,"Title":"Mirror changes from dotnet/corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7770","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx\" (#7770)"},{"Id":"488826953","IsPullRequest":true,"CreatedAt":"2019-09-04T01:18:56","Actor":"Dotnet-GitSync-Bot","Number":"7769","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas @stephentoub","Url":"https://github.com/dotnet/corert/pull/7769","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7769)"},{"Id":"488782037","IsPullRequest":true,"CreatedAt":"2019-09-03T21:33:47","Actor":"trylek","Number":"7768","RawContent":null,"Title":"Minor triage improvement in SuperIlc","State":"closed","Body":"For tests with unhandled runtime exceptions, we can improve SuperIlc\r\ntriage by using the exception as the triage string instead of just\r\nreporting a non-zero exit code. Part of the logic already existed\r\nbut it apparently had a typo in the exception message check due to\r\nwhich it failed to kick in.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7768","RelatedDescription":"Closed or merged PR \"Minor triage improvement in SuperIlc\" (#7768)"},{"Id":"488681079","IsPullRequest":true,"CreatedAt":"2019-09-03T20:23:38","Actor":"MichalStrehovsky","Number":"7765","RawContent":null,"Title":"Delete unused file","State":"closed","Body":"Noticed when auditing the CPAOT copy scripts.","Url":"https://github.com/dotnet/corert/pull/7765","RelatedDescription":"Closed or merged PR \"Delete unused file\" (#7765)"},{"Id":"488732123","IsPullRequest":true,"CreatedAt":"2019-09-03T19:16:49","Actor":"trylek","Number":"7766","RawContent":null,"Title":"Update RyuJIT","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7766","RelatedDescription":"Closed or merged PR \"Update RyuJIT\" (#7766)"},{"Id":"488341349","IsPullRequest":true,"CreatedAt":"2019-09-03T00:07:22","Actor":"yowl","Number":"7764","RawContent":null,"Title":"[WIP]: Wasm: fix more occurrences of loading Sbytes into int32 without sign extending.","State":"open","Body":"While #7763 was fine as far as it went, it didn't actually catch all problems with loading sbyte on to the stack, namely binary operations, shifting and branching.   This add a few more tests for those and fixes the sign extending","Url":"https://github.com/dotnet/corert/pull/7764","RelatedDescription":"Open PR \"[WIP]: Wasm: fix more occurrences of loading Sbytes into int32 without sign extending.\" (#7764)"},{"Id":"488211989","IsPullRequest":true,"CreatedAt":"2019-09-02T15:07:10","Actor":"yowl","Number":"7763","RawContent":null,"Title":"Wasm: fixes loading int16 and SBytes from the stack where they were previously not sign extended","State":"closed","Body":"Previously loading SBytes from the stack did not sign extend causing problems in the NativeFormatReader.  This adds a test and fixes that scenario.","Url":"https://github.com/dotnet/corert/pull/7763","RelatedDescription":"Closed or merged PR \"Wasm: fixes loading int16 and SBytes from the stack where they were previously not sign extended\" (#7763)"},{"Id":"487908157","IsPullRequest":true,"CreatedAt":"2019-09-02T07:56:48","Actor":"MichalStrehovsky","Number":"7762","RawContent":null,"Title":"Remove MetadataManager.SupportsReflection","State":"closed","Body":"The property was added when we started compiling ProjectN mrt100_app.dll. It was problematic because it didn't actually mean reflection - it meant \"is this something non-essential that we can skip\". We actually need what it was doing at a finer graunlarity. This commit starts with that.\r\n\r\nWith this, generic virtual methods work in the reflection disabled mode.\r\n\r\nA couple notes:\r\n* Some of the SupportsReflection calls were redundant (they were in a code path that is already related to reflection). Those disappeared without replacement.\r\n* CodeBaseDependencyAlgorithm references moved to the metadata manager. Hopefully we can get better control of generated templates in the future. (Not all types/generic methods need templates.)\r\n* DictionaryLayoutNode references were redundant with the references from code/EETypes. Removed without replacement.\r\n* Method template table emission needs to check whether the template was marked. This mirrors what we do for type templates. Eventually, we should make this for loop to go over all generated method templates instead of all methods (just keep track of the templates themselves).\r\n* GVMs were implicitly relying on getting templates because we make templates for everything. Added explicit template generation.","Url":"https://github.com/dotnet/corert/pull/7762","RelatedDescription":"Closed or merged PR \"Remove MetadataManager.SupportsReflection\" (#7762)"},{"Id":"487859012","IsPullRequest":false,"CreatedAt":"2019-09-01T09:35:37","Actor":"xoofx","Number":"7761","RawContent":null,"Title":"The type or namespace name 'System' could not be found","State":"closed","Body":"Hey,\r\n\r\nI'm trying to open `ILCompiler.sln` but I'm unable to compile any projects there, I tried both with Visual Studio 2017 and 2019\r\n\r\n![image](https://user-images.githubusercontent.com/715038/64073842-c9ddc280-cca3-11e9-807a-e74edbc1b17b.png)\r\n\r\nI tried to reclone entirely corert, `init-tools.cmd` but it still doesn't work.\r\n\r\nFrom the screenshot above I tried to compile repro.csproj and the command line from msbuild is like this:\r\n\r\n```\r\nC:\\code\\dotnet\\corert\\packages\\microsoft.net.compilers.toolset\\3.3.0-beta2-19367-02\\tasks\\net472\\csc.exe /noconfig /unsafe+ /nowarn:169,414,1701,1702,2008 /nostdlib+ /warn:4 /define:X86;BIT32;PLATFORM_WINDOWS;CORERT;DEBUG;TRACE;DEBUGRESOURCES /errorendlocation /preferreduilang:en-US /debug+ /debug:portable /optimize- /out:C:\\code\\dotnet\\corert\\bin/obj/Windows_NT.x86.Debug/repro\\repro.exe /ruleset:\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Professional\\Team Tools\\Static Analysis Tools\\\\Rule Sets\\MinimumRecommendedRules.ruleset\" /target:exe /warnaserror+ /utf8output /checksumalgorithm:SHA256 /langversion:preview /analyzerconfig:C:\\code\\dotnet\\corert\\.editorconfig Program.cs\r\n```\r\n\r\nSo it is passing `/nostdlib+` but I don't see any netstandard library passed to it for example, so not sure how this can work.\r\n\r\nAny clues?\r\n","Url":"https://github.com/dotnet/corert/issues/7761","RelatedDescription":"Closed issue \"The type or namespace name 'System' could not be found\" (#7761)"},{"Id":"487763609","IsPullRequest":true,"CreatedAt":"2019-08-31T18:14:47","Actor":"MichalStrehovsky","Number":"7759","RawContent":null,"Title":"Consider method referenced with LDTOKEN called","State":"closed","Body":"When usage based metadata manager is enabled, we'll consider methods referenced with LDTOKEN as called. They pretty much have to be to make LINQ expressions work.","Url":"https://github.com/dotnet/corert/pull/7759","RelatedDescription":"Closed or merged PR \"Consider method referenced with LDTOKEN called\" (#7759)"},{"Id":"487765387","IsPullRequest":true,"CreatedAt":"2019-08-31T18:13:54","Actor":"MichalStrehovsky","Number":"7760","RawContent":null,"Title":"Do not root module metadata for modules not generating metadata","State":"closed","Body":"Fixes the multimodule compiler crash in DynamicGenerics.","Url":"https://github.com/dotnet/corert/pull/7760","RelatedDescription":"Closed or merged PR \"Do not root module metadata for modules not generating metadata\" (#7760)"}],"ResultType":"GitHubIssue"},"SDK-Issues":{"Issues":[{"Id":"491344969","IsPullRequest":false,"CreatedAt":"2019-09-09T21:52:15","Actor":"wli3","Number":"3626","RawContent":null,"Title":"Block build on TFM lower than netcoreapp3.1","State":"open","Body":"","Url":"https://github.com/dotnet/sdk/issues/3626","RelatedDescription":"Open issue \"Block build on TFM lower than netcoreapp3.1\" (#3626)"},{"Id":"491344771","IsPullRequest":false,"CreatedAt":"2019-09-09T21:51:41","Actor":"wli3","Number":"3625","RawContent":null,"Title":"⬇️ C++ build in VS vs msbuild command line","State":"open","Body":"Confirm the issue is in C++ targets and file a bug.","Url":"https://github.com/dotnet/sdk/issues/3625","RelatedDescription":"Open issue \"⬇️ C++ build in VS vs msbuild command line\" (#3625)"},{"Id":"491344361","IsPullRequest":false,"CreatedAt":"2019-09-09T21:50:29","Actor":"wli3","Number":"3624","RawContent":null,"Title":"⬇️Better error when run dotnet build on a C++ project or C# reference C++ project","State":"open","Body":"","Url":"https://github.com/dotnet/sdk/issues/3624","RelatedDescription":"Open issue \"⬇️Better error when run dotnet build on a C++ project or C# reference C++ project\" (#3624)"},{"Id":"491343846","IsPullRequest":false,"CreatedAt":"2019-09-09T21:49:12","Actor":"wli3","Number":"3623","RawContent":null,"Title":"Figure out build/run of c++/CLI exe","State":"closed","Body":"The following is the result of the investigation. What need to happen to enable it. Currently we don't plan to support it in 3.1.100\r\n\r\n- [exe unique task] Compile the exe entry point as usual but still give it the extension dll. Cpp props need to change https://devdiv.visualstudio.com/DevDiv/_git/VS?path=%2Fsrc%2Fvc%2Fprojbld%2FCppTargets_v150%2FMicrosoft.Cpp.Common.props&version=GBmaster&line=30&lineStyle=plain&lineEnd=31&lineStartColumn=1&lineEndColumn=1\r\n\r\n  - However, C++ prefer TargetPath to be EXE for properties UI (exe is what user actually wants to build) and debugger (exe is what it will launch). If so, sdk also need switch property on TargetPath for language ==  C++ . And we don't want to change user's existing Debugger config\r\n\r\n- Get multiple apphosts to the project when there is no nuget restore\r\n  - Make msi on core-sdk repo -- big task, however this need to be done even for c# referencing c++\r\n\r\n- [exe unique task] RuntimeIdentifiers=win;win-x32;win-x64 we should remove the “win” in the list\r\n - The \"extra\" win is set in https://github.com/dotnet/NuGet.BuildTasks/pull/25 from the issue. It is added to resolve a nuget issue. Considering in UWP is handing it, VC targets should do the similar. However, I am still not sure what to set. And pending nuget to reply more context\r\n - Or ResolveApphost should be able to take in \"win\" -- but that does it mean considering there is no generic windows apphost\r\n - We could disable import of the \"classic\" nuget target\r\n\r\n- [exe unique task] intermediateAssembly mismatches the actual output, even for classic project\r\n \r\nPotential fix\r\n```\r\n    <_OutputBase Condition=\"'$(Language)' == 'C++'\">$(TargetDir)</_OutputBase>\r\n    <_OutputBase Condition=\"'$(Language)' != 'C++'\">$(IntermediateOutputPath)</_OutputBase>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <!-- C++ does not use $(IntermediateAssembly). The output of the linker is $(TargetPath)-->\r\n    <!--TODO change to $(targetpath) when <TargetExt>.dll</TargetExt> change is in C++ targets-->\r\n    <_IntermediateAssemblyEquivalent Condition=\"'$(Language)' == 'C++'\" Include=\"$(TargetDir)$(TargetName)$(TargetExt)\" />\r\n    <_IntermediateAssemblyEquivalent Condition=\"'$(Language)' != 'C++'\" Include=\"@(IntermediateAssembly)\" />\r\n  </ItemGroup>\r\n```\r\n\r\n  - In Microsoft.Link.Common.props, the actual file is based on OutDir that is different than IntermediateAssembly when it builds a solution.\r\n\r\n- Figure out the dependency, let _CreateApphost be part of the BuildCompile\r\n\tPotential fix:\r\n```\r\n\t    <_CreateAppHostDependsOn Condition=\"'$(Language)' == 'C++'\">_GetAppHostPaths;ResolveFrameworkReferences;BuildCompile</_CreateAppHostDependsOn>\r\n\t    <_CreateAppHostDependsOn Condition=\"'$(Language)' != 'C++'\">_GetAppHostPaths;ResolveFrameworkReferences;CoreCompile</_CreateAppHostDependsOn>\r\n```\r\n\t\r\n\tAnd\r\n```\r\n\t  <PropertyGroup>\r\n\t    <CompileDependsOn>\r\n\t      $(CompileDependsOn);\r\n\t      _CreateAppHost;\r\n\t      _CreateComHost;\r\n\t      _GetIjwHostPaths;\r\n\t    </CompileDependsOn>\r\n\t  </PropertyGroup>\r\n```\t\r\n\r\n- Ensure runtimeconfig.json is correct\r\n","Url":"https://github.com/dotnet/sdk/issues/3623","RelatedDescription":"Closed issue \"Figure out build/run of c++/CLI exe\" (#3623)"},{"Id":"491336183","IsPullRequest":false,"CreatedAt":"2019-09-09T21:28:11","Actor":"wli3","Number":"3622","RawContent":null,"Title":"Block single C++ library Publish and Pack","State":"open","Body":"PR: https://github.com/dotnet/sdk/issues/3619","Url":"https://github.com/dotnet/sdk/issues/3622","RelatedDescription":"Open issue \"Block single C++ library Publish and Pack\" (#3622)"},{"Id":"491335766","IsPullRequest":false,"CreatedAt":"2019-09-09T21:27:11","Actor":"wli3","Number":"3621","RawContent":null,"Title":"Disable deps.json generation for C++ library","State":"open","Body":"PR: https://github.com/dotnet/sdk/pull/3601","Url":"https://github.com/dotnet/sdk/issues/3621","RelatedDescription":"Open issue \"Disable deps.json generation for C++ library\" (#3621)"},{"Id":"490463119","IsPullRequest":true,"CreatedAt":"2019-09-09T21:26:48","Actor":"wli3","Number":"3605","RawContent":null,"Title":"Block publishing in single C++ and building exe","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/3605","RelatedDescription":"Closed or merged PR \"Block publishing in single C++ and building exe\" (#3605)"},{"Id":"491334955","IsPullRequest":false,"CreatedAt":"2019-09-09T21:25:19","Actor":"wli3","Number":"3620","RawContent":null,"Title":"Decide which property for VC targets to set architecture","State":"open","Body":"should be RuntimeIdentifier with SelfContained to false need to verify. However, we have several places use Platform(win32 in C++) and platformtarget mismatch could cause trouble, still investigating\r\n\r\nwhen run \r\n`msbuild NETCoreCppCliTest.vcxproj /p:platformtarget=win32 /p:runtimeidentifier=win-x86`\r\n\r\nIt will fail with \r\n```\r\nC:\\work\\sdk\\artifacts\\bin\\Debug\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.RuntimeIdentifierInference.targets(149,5): error NETSDK1032: The RuntimeIdentifier pla tform 'win-x86' and the PlatformTarget 'win32' must be compatible. [C:\\work\\NETCoreCppCliTest\\NETCoreCppCliTest\\NETCoreCppCliTest.vcxproj]\r\n```","Url":"https://github.com/dotnet/sdk/issues/3620","RelatedDescription":"Open issue \"Decide which property for VC targets to set architecture\" (#3620)"},{"Id":"491333926","IsPullRequest":false,"CreatedAt":"2019-09-09T21:23:03","Actor":"wli3","Number":"3619","RawContent":null,"Title":"Test or block publish options like linker and single exe","State":"open","Body":"- /p:PublishTrimmed=true does not work\r\n- ⬇️UseComHost=true does not work(not critical scenario) Have better error message for EnableComHosting + C++/CLI project \r\n\r\nPR: https://github.com/dotnet/sdk/pull/3618","Url":"https://github.com/dotnet/sdk/issues/3619","RelatedDescription":"Open issue \"Test or block publish options like linker and single exe\" (#3619)"},{"Id":"491333446","IsPullRequest":true,"CreatedAt":"2019-09-09T21:21:58","Actor":"wli3","Number":"3618","RawContent":null,"Title":"Blocks and tests C++ project","State":"open","Body":"Block single C++ project publish, Pack\r\n\r\nBlock all C++ project using EnableComHosting=true\r\n\r\nBlock single C++ build exe project","Url":"https://github.com/dotnet/sdk/pull/3618","RelatedDescription":"Open PR \"Blocks and tests C++ project\" (#3618)"},{"Id":"491330677","IsPullRequest":false,"CreatedAt":"2019-09-09T21:15:29","Actor":"wli3","Number":"3617","RawContent":null,"Title":"Disable nuget restore (no need workaround of the empty asset.json)","State":"open","Body":"PR https://github.com/dotnet/sdk/pull/3601","Url":"https://github.com/dotnet/sdk/issues/3617","RelatedDescription":"Open issue \"Disable nuget restore (no need workaround of the empty asset.json)\" (#3617)"},{"Id":"491326240","IsPullRequest":false,"CreatedAt":"2019-09-09T21:05:15","Actor":"wli3","Number":"3616","RawContent":null,"Title":"[summery issue]Adjust .NET SDK props/targets to be consumable in vcxproj","State":"open","Body":"List of completely task so far. Rest are tracked by Epic in Zenhub or the lable \"C++/CLI support\"\r\n\r\n- Need to design/implement proper props/targets vc project will import (via  <Import Sdk=\"Microsoft.NET.Sdk\" Project=\"…\"/> in cpp props/ targets.\r\n- Provide a way to find ijwhost.lib in the SDK (required for linking)\r\n- Build sln C++ reference C# publish does not work. Publish from C# project works. Publish single C++ classlib does not work -- Now blocked\r\n- Figure out build/run of c++/CLI exe","Url":"https://github.com/dotnet/sdk/issues/3616","RelatedDescription":"Open issue \"[summery issue]Adjust .NET SDK props/targets to be consumable in vcxproj\" (#3616)"},{"Id":"491207758","IsPullRequest":false,"CreatedAt":"2019-09-09T16:45:44","Actor":"jkoritzinsky","Number":"3614","RawContent":null,"Title":"5.0.100-alpha1-01483 SDK pulls down 3.0.0 preview 7 when netcoreapp3.0 tfm specified","State":"open","Body":"When building with the nightly 5.0.100-alpha1-01483 SDK and targeting netcoreapp3.0, the SDK will pull down 3.0.0 Preview 7 bits instead of newer previews.\r\n\r\nThis was initially discovered in https://github.com/dotnet/coreclr/issues/26578\r\n\r\nThat issue also has an MSBuild binlog that shows the issue (the `KnownFrameworkReference` for `Microsoft.NETCore.App` for tfm `netcoreapp3.0` has `PackageVersion=3.0.0-preview7-27912-14`).","Url":"https://github.com/dotnet/sdk/issues/3614","RelatedDescription":"Open issue \"5.0.100-alpha1-01483 SDK pulls down 3.0.0 preview 7 when netcoreapp3.0 tfm specified\" (#3614)"},{"Id":"491116683","IsPullRequest":false,"CreatedAt":"2019-09-09T14:03:39","Actor":"lg2de","Number":"3613","RawContent":null,"Title":"SDK defined properties overwrites WarningsAsErrors on solution level","State":"open","Body":"The following statement is intended to define WarningsAsErrors for \"NU1605\" if not defined.\r\n\r\nhttps://github.com/dotnet/sdk/blob/87f00dbd00e72ca5e3e42b2e1f7b553c2e2f4f32/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.Sdk.CSharp.props#L19\r\n\r\nBut defining `<WarningsAsErrors />` at solution level (Directory.Build.props) may cause unexpected overwrite, e.g. in server (TFS) build:\r\n\r\n```\r\n2019-09-09T13:32:15.6813986Z                    Property reassignment: $(WarningsAsErrors)=\"NU1605\" (previous value: \"\") at C:\\build\\_work\\_tool\\dncs\\3.0.100-preview6-012264\\x64\\sdk\\3.0.100-preview6-012264\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.CSharp.props (19,5)\r\n```\r\n\r\nInstead of getting \"all warnings as errors\" only NU1605 will be trait as error.\r\n","Url":"https://github.com/dotnet/sdk/issues/3613","RelatedDescription":"Open issue \"SDK defined properties overwrites WarningsAsErrors on solution level\" (#3613)"},{"Id":"491053750","IsPullRequest":true,"CreatedAt":"2019-09-09T14:03:37","Actor":"dotnet-maestro[bot]","Number":"3611","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190908.2\r\n- **Date Produced**: 9/8/2019 11:40 PM\r\n- **Commit**: 29ee79a10c58dd6863a46157e374521cac610ad8\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19458.2\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19458.2\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3611","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3611)"},{"Id":"491075312","IsPullRequest":true,"CreatedAt":"2019-09-09T12:48:05","Actor":"dotnet-maestro[bot]","Number":"3612","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:e76888f5-e4f1-4c3d-d4c4-08d7315d8bc7)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190908.2\r\n- **Date Produced**: 9/8/2019 11:40 PM\r\n- **Commit**: 29ee79a10c58dd6863a46157e374521cac610ad8\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19458.2\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19458.2\r\n\r\n[marker]: <> (End:e76888f5-e4f1-4c3d-d4c4-08d7315d8bc7)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3612","RelatedDescription":"Open PR \"[release/3.1.1xx] Update dependencies from dotnet/arcade\" (#3612)"},{"Id":"490306683","IsPullRequest":true,"CreatedAt":"2019-09-08T14:51:05","Actor":"dotnet-maestro[bot]","Number":"3604","RawContent":null,"Title":"[release/3.1.1xx] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:e76888f5-e4f1-4c3d-d4c4-08d7315d8bc7)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190907.1\r\n- **Date Produced**: 9/7/2019 12:52 PM\r\n- **Commit**: c27945fc559ee636139d9f460db71242b16483e6\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19457.1\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19457.1\r\n\r\n[marker]: <> (End:e76888f5-e4f1-4c3d-d4c4-08d7315d8bc7)\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3604","RelatedDescription":"Closed or merged PR \"[release/3.1.1xx] Update dependencies from dotnet/arcade\" (#3604)"},{"Id":"490745819","IsPullRequest":true,"CreatedAt":"2019-09-08T14:03:21","Actor":"dotnet-maestro[bot]","Number":"3610","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190907.1\r\n- **Date Produced**: 9/7/2019 12:52 PM\r\n- **Commit**: c27945fc559ee636139d9f460db71242b16483e6\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19457.1\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19457.1\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3610","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3610)"},{"Id":"490628050","IsPullRequest":true,"CreatedAt":"2019-09-07T14:28:41","Actor":"dotnet-maestro[bot]","Number":"3609","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190906.10\r\n- **Date Produced**: 9/6/2019 9:27 PM\r\n- **Commit**: 2d393243ba4a0c95c2c18aa266df6e0f43ffe22d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19456.10\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19456.10\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3609","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3609)"},{"Id":"490547922","IsPullRequest":true,"CreatedAt":"2019-09-06T22:36:34","Actor":"dotnet-maestro[bot]","Number":"3608","RawContent":null,"Title":"[release/3.0.100-preview9] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:99181a82-e62d-4080-a0f9-08d721cca946)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190906.20\r\n- **Date Produced**: 9/6/2019 9:40 PM\r\n- **Commit**: 8f5d7b1ba4f744199ba006cac38dfcb9a2408880\r\n- **Branch**: refs/heads/release/3.0-preview9\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-rc1-19456-20\r\n\r\n[marker]: <> (End:99181a82-e62d-4080-a0f9-08d721cca946)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3608","RelatedDescription":"Closed or merged PR \"[release/3.0.100-preview9] Update dependencies from dotnet/core-setup\" (#3608)"},{"Id":"490484818","IsPullRequest":true,"CreatedAt":"2019-09-06T21:12:23","Actor":"dotnet-maestro[bot]","Number":"3607","RawContent":null,"Title":"[release/3.0.100-preview9] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:99181a82-e62d-4080-a0f9-08d721cca946)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190906.12\r\n- **Date Produced**: 9/6/2019 5:32 PM\r\n- **Commit**: 6de53852e89ecf403fc893c9a0286d5027b51c83\r\n- **Branch**: refs/heads/release/3.0-preview9\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-rc1-19456-12\r\n\r\n[marker]: <> (End:99181a82-e62d-4080-a0f9-08d721cca946)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3607","RelatedDescription":"Closed or merged PR \"[release/3.0.100-preview9] Update dependencies from dotnet/core-setup\" (#3607)"},{"Id":"490289736","IsPullRequest":true,"CreatedAt":"2019-09-06T19:21:00","Actor":"dotnet-maestro[bot]","Number":"3602","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190906.2\r\n- **Date Produced**: 9/6/2019 2:35 PM\r\n- **Commit**: 397060df67388da56b50de7e6f7292a5dccc2de6\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19456.2\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19456.2\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3602","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3602)"},{"Id":"490470058","IsPullRequest":false,"CreatedAt":"2019-09-06T18:42:45","Actor":"RoyalMugu","Number":"3606","RawContent":null,"Title":"In process hosting is not supported for AspNetCoreModule. Change the AspNetCoreModule to atleast AspNetCoreModuleV2.","State":"open","Body":"I have created a Asp.net core web application. I am able to rebuild successfully but when I try to publish the solution to Azure App Service, I am getting the below error,\r\n============================================================\r\nThe \"TransformWebConfig\" task failed unexpectedly.\r\nSystem.Exception: In process hosting is not supported for AspNetCoreModule. Change the AspNetCoreModule to atleast AspNetCoreModuleV2.\r\n   at Microsoft.NET.Sdk.Publish.Tasks.WebConfigTransform.TransformAspNetCore(XElement aspNetCoreElement, String appName, Boolean configureForAzure, Boolean useAppHost, String extension, String aspNetCoreModuleName, String aspNetCoreHostingModel)\r\n   at Microsoft.NET.Sdk.Publish.Tasks.WebConfigTransform.Transform(XDocument webConfig, String appName, Boolean configureForAzure, Boolean useAppHost, String extension, String aspNetCoreModuleName, String aspNetCoreHostingModel, String environmentName)\r\n   at Microsoft.NET.Sdk.Publish.Tasks.TransformWebConfig.Execute()\r\n   at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute()\r\n   at Microsoft.Build.BackEnd.TaskBuilder.<ExecuteInstantiatedTask>d__26.MoveNext()\t\r\n\r\n============================================================\r\nEnvironment:\r\n.Net Core 2.2\r\n.Net Core runtime 2.2.6 (x64)\r\nAsp.Net core 2.2.6 - Shared Framework\r\n\r\nHow do I change the AspNetCoreModule to atleast AspNetCoreModuleV2 in the appsettings.json file? \r\nAlso I dont want to change it to out of process hosting.\r\n\r\nI am not sure if I will be able to publish even after making this change. Any of your inputs will be helpful. \r\n","Url":"https://github.com/dotnet/sdk/issues/3606","RelatedDescription":"Open issue \"In process hosting is not supported for AspNetCoreModule. Change the AspNetCoreModule to atleast AspNetCoreModuleV2.\" (#3606)"},{"Id":"490291005","IsPullRequest":true,"CreatedAt":"2019-09-06T12:05:23","Actor":"dotnet-bot","Number":"3603","RawContent":null,"Title":"Merge release/3.0.100-preview9 to release/3.0.1xx","State":"open","Body":"\nThis is an automatically generated pull request from release/3.0.100-preview9 into release/3.0.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.100-preview9-to-release/3.0.1xx\ngit reset --hard upstream/release/3.0.1xx\ngit merge upstream/release/3.0.100-preview9\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.100-preview9-to-release/3.0.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3603","RelatedDescription":"Open PR \"Merge release/3.0.100-preview9 to release/3.0.1xx\" (#3603)"},{"Id":"490145747","IsPullRequest":true,"CreatedAt":"2019-09-06T06:02:09","Actor":"wli3","Number":"3601","RawContent":null,"Title":"Fix restore skip package dependency resolution.targets by using NoOp version","State":"open","Body":"","Url":"https://github.com/dotnet/sdk/pull/3601","RelatedDescription":"Open PR \"Fix restore skip package dependency resolution.targets by using NoOp version\" (#3601)"},{"Id":"490082274","IsPullRequest":true,"CreatedAt":"2019-09-06T05:45:50","Actor":"wli3","Number":"3600","RawContent":null,"Title":"Experimental cpp 3 test ci, if CI's VS has the latest C++ props","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/3600","RelatedDescription":"Closed or merged PR \"Experimental cpp 3 test ci, if CI's VS has the latest C++ props\" (#3600)"},{"Id":"489953405","IsPullRequest":true,"CreatedAt":"2019-09-06T00:36:02","Actor":"livarcocc","Number":"3598","RawContent":null,"Title":"Update branding to rc2","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/3598","RelatedDescription":"Closed or merged PR \"Update branding to rc2\" (#3598)"},{"Id":"489951769","IsPullRequest":true,"CreatedAt":"2019-09-06T00:35:49","Actor":"livarcocc","Number":"3597","RawContent":null,"Title":"Merge release/3.0.1xx into release/3.0.100-preview9","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/3597","RelatedDescription":"Closed or merged PR \"Merge release/3.0.1xx into release/3.0.100-preview9\" (#3597)"},{"Id":"490022605","IsPullRequest":false,"CreatedAt":"2019-09-05T21:38:52","Actor":"sebastienros","Number":"3599","RawContent":null,"Title":"Latest SDK contains a netcoreapp3.0 ref pack for ASP.NET","State":"open","Body":"https://dotnetcli.azureedge.net/dotnet/Sdk/5.0.100-alpha1-014061/dotnet-sdk-5.0.100-alpha1-014061-win-x64.zip\r\n\r\n![image](https://user-images.githubusercontent.com/1165805/64383979-c5d6db00-cfea-11e9-93a9-2477dac23095.png)\r\n","Url":"https://github.com/dotnet/sdk/issues/3599","RelatedDescription":"Open issue \"Latest SDK contains a netcoreapp3.0 ref pack for ASP.NET\" (#3599)"},{"Id":"491320105","IsPullRequest":false,"CreatedAt":"2019-06-19T08:37:15","Actor":"chucker","Number":"3615","RawContent":null,"Title":"Type inference may cause BC30455 when inferred-type variable name matches module method name","State":"open","Body":"**Version Used**:  \r\n\r\n```\r\nMicrosoft Visual Studio Enterprise 2019 Preview\r\nVersion 16.2.0 Preview 2.0\r\nVisualStudio.16.Preview/16.2.0-pre.2.0+29006.145\r\nMicrosoft .NET Framework\r\nVersion 4.8.03752\r\n\r\n[..]\r\n\r\nVisual Basic Tools   3.2.0-beta2-19303-01+c9689b7ad571762df662bec55472938d18705dca\r\n```\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Create a WPF app project.\r\n2. Open `MainWindow.xaml.vb`, and replace its contents with the following:\r\n\r\n```vb\r\nOption Strict On\r\nOption Infer On\r\n\r\nClass MainWindow\r\n    Sub Foo()\r\n        Dim dataObject As DataObject\r\n        For Each format In dataObject.GetFormats()\r\n\r\n        Next\r\n    End Sub\r\nEnd Class\r\n```\r\n\r\n**Expected Behavior**:\r\nThis code should compile as is. `format` should be of type `System.String`.\r\n\r\n**Actual Behavior**:\r\nThe compiler believes `format` to be an invocation of the method `Microsoft.VisualBasic.Strings.Format()`.\r\n\r\nIt gives the error:\r\n\r\n> Error | BC30455 | Argument not specified for parameter 'Expression' of 'Public Function Format(Expression As Object, [Style As String = \"\"]) As String'.\r\n\r\nIt also renames `format` to `Format` (note casing) for the same reason.\r\n\r\n**Workarounds**:\r\n* A different variable name works fine. For example, given the following, the compiler correctly recognizes the type, doesn't rename the variable, and doesn't show an error:\r\n\r\n```vb\r\nDim dataObject As DataObject\r\nFor Each formatName In dataObject.GetFormats()\r\n\r\nNext\r\n```\r\n\r\n* Likewise, an explicit type avoids this issue:\r\n\r\n```vb\r\nFor Each format As String In dataObject.GetFormats()\r\n\r\nNext\r\n```\r\n\r\n**Additional notes**:\r\n\r\nIn an existing project, this error only started occurring after I migrated the project to the Sdk style. The full runtime is used (`<VBRuntime>default</VBRuntime>`).\r\n\r\nHowever, in a fresh project, the error appears immediately, suggesting this may be a toolchain regression.","Url":"https://github.com/dotnet/sdk/issues/3615","RelatedDescription":"Open issue \"Type inference may cause BC30455 when inferred-type variable name matches module method name\" (#3615)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"489344106","IsPullRequest":false,"CreatedAt":"2019-09-04T19:14:05","Actor":"leecow","Number":"120","RawContent":null,"Title":".NET Core 3.0 Preview 9","State":"open","Body":".NET Core Preview 9 released today. https://github.com/dotnet/core/issues/3304 has been opened for discussion. \r\n\r\n[Release Notes](https://github.com/dotnet/core/blob/master/release-notes/3.0/preview/3.0.0-preview9.md)\r\n[Download](https://github.com/dotnet/core/blob/master/release-notes/3.0/preview/3.0.0-preview9-download.md)\r\n\r\n**Blog posts**\r\n\r\n[.NET Core](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0-preview-9/)\r\n[ASP.NET Core](https://devblogs.microsoft.com/aspnet/asp-net-core-and-blazor-updates-in-net-core-3-0-preview-9/)\r\n\r\nPlease report any issues you find with 3.0.0 Preview 9, either responding to this issue, creating a new issue or creating a new issue in one of the following repos:\r\n\r\n* [aspnet/AspNetCore](https://github.com/aspnet/AspNetCore) - for ASP.NET Core questions\r\n* [aspnet/EntityFrameworkCore](https://github.com/aspnet/EntityFrameworkCore) - for Entity Framework Core questions\r\n* [dotnet/cli](https://github.com/dotnet/cli/issues) - for CLI tools and questions\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues) - for API issues and questions\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues) - for runtime issues\r\n* [dotnet/core-setup](https://github.com/dotnet/core-setup/issues) - for installer issues\r\n* [dotnet/winforms](https://github.com/dotnet/winforms/issues) - for Winforms issues\r\n* [dotnet/wpf](https://github.com/dotnet/wpf/issues) - for WPF issues\r\n* [nuget/home](https://github.com/nuget/home/issues) - for NuGet questions and issues","Url":"https://github.com/dotnet/announcements/issues/120","RelatedDescription":"Open issue \".NET Core 3.0 Preview 9\" (#120)"},{"Id":"480859726","IsPullRequest":false,"CreatedAt":"2019-08-14T19:54:26","Actor":"stephentoub","Number":"119","RawContent":null,"Title":"Consolidating .NET GitHub repos","State":"open","Body":"*To discuss these plans, please comment on the corresponding issue at https://github.com/dotnet/coreclr/issues/26175.*\r\n\r\nOver the next few months, we plan to consolidate several of the foundational repositories of .NET Core, including dotnet/coreclr and dotnet/corefx.\r\n\r\n.NET’s repository structure on GitHub was initially created in a fairly fine-grained manner, with the aim of enabling runtime agility and increased developer productivity.  However, this separation has led to a variety of complications for contributors and maintainers alike.  For example:\r\n- **Confusion about where issues should be opened.**  It’s not always clear in which repo an issue should be reported, complicated by the fact that some implementations actually span repositories (e.g. a type might be exposed through a reference assembly and have its tests in corefx but actually be implemented in System.Private.CoreLib in coreclr).\r\n- **Difficulty sharing source.**  System.Private.CoreLib is intricately connected to the rest of the runtime, and thus has lived with the runtime code.  That, however, means that although corefx has been intended as the place to share as much core library code as possible across any underlying runtime, we’ve needed to keep a significant body of code in System.Private.CoreLib, which then has meant it’s needed to be “mirrored” to each runtime repo (coreclr, corert, mono) that needs to consume it as source; similarly, corefx has similarly required access to much of that source, for example to use the same interop DllImports that are employed elsewhere in the runtimes.  The automatic mirror that shares this source needs to be maintained, and even when it has been, it’s often led to lag.  It’s also complicated developer processes, where to validate a change in one repo generally requires manually mirroring the code to other local repos in order to validate the change and ensure merging into one repo won’t break the others.\r\n- **PRs spanning multiple repos.**  Because the runtime, CoreLib, and the core libraries are all intricately linked, changing runtime behaviors, adding new APIs, or changing various build processes (e.g. improving static analysis) often requires multiple PRs carefully staged across time and multiple repos.  For example, to add a new method to a type like Dictionary<>, a developer must first make the source changes in her local coreclr repo and the test and reference assembly changes in her local corefx repo.  When satisfied with the fix, the developer must submit a PR to coreclr as well as a PR to corefx, the latter of which will fail.  Eventually the coreclr PR will be merged, and the changes will mirror to the other runtimes that also require the update.  Eventually those mirror PRs will be merged, and builds will be created containing the fix for each runtime.  At some point later those builds will be consumed into the corefx repo, after which point the original corefx PR can be re-validated and eventually merged.  That’s the best case; things get more complicated in situations where there are bidirectional dependencies.\r\n- **Building an installable runtime.** Self-hosting a custom built .NET requires intricate knowledge of how all the repos work and interact.  A developer can’t just clone a single repo, make a desired change, and easily produce an installer.\r\n- **Consistency.**  One goal we had for more fine-grained repos was to enable isolation and independence for teams working within each repo’s confines, but this has led to non-trivial duplication of effort on things like build systems and CI, and then the resulting lack of consistency as each system ends up diverging from the others.\r\n\r\nThe issues go beyond the runtime.  For example, the ASP.NET maintainers and community did a great job in the past year or so consolidating from ~55 repos down to ~5 repos, but that’s still more repos than is desirable, leading to similar issues as cited above for the runtime.  On top of that, these ASP.NET repositories are in the aspnet GitHub org, which adds an additional set of issues, for example:\r\n- **Complications moving issues between repos.**  If a developer opens an issue in aspnet/aspnetcore and it’s determined that the cause of the issue is actually in dotnet/corefx, there is no GitHub mechanism to enable easily moving that issue across the aspnet to dotnet organizational boundary.\r\n- **Permissions.** Each organization’s permissions end up needing to be managed and maintained separately.\r\n\r\nThe issues extend into tooling as well.  For example, we currently have multiple repositories that all logically make up the dotnet CLI, but actually creating a working installer spans multiple repos.\r\n\r\n### Plan\r\n\r\nTo address these issues, we’re planning to make some changes to our repository structure:\r\n- **dotnet/platform.**  We plan to combine dotnet/coreclr, dotnet/corefx, dotnet/corert, dotnet/core-setup, and the relevant portions of mono/mono into a new dotnet/platform repo.  Everything needed to build and produce the Microsoft.NETCore.App shared framework will be in this repo.  We will no longer suffer from the complications of source mirroring.  Features like changing runtime behavior or adding an API will no longer require a complicated dance across multiple repos.  Etc.\r\n- **dotnet/aspnetcore.**  We plan to move the existing aspnet/aspnetcore repository into the dotnet organization.  Along with that, we aim to combine a variety of the other aspnet repositories into aspnetcore, such as aspnet/blazor.  Whether repos like entityframeworkcore remain separate or combined remains an open question.  A goal is that, just as dotnet/platform will be responsible for the creation of Microsoft.NETCore.App, dotnet/aspnetcore will be responsible for the creation of Microsoft.AspNETCore.App.\r\n- **dotnet/cli.**  We plan to combine dotnet/toolset and dotnet/sdk into the dotnet/cli repo.\r\n\r\n### FAQ\r\n\r\n#### Why are we merging repos?\r\n\r\nWe believe we can significantly improve several aspects of .NET on GitHub by combining repos, benefiting both maintainers and contributors.  These improvements will manifest in a variety of ways, such as in better issue management, much easier models of contribution, and easier and faster ways to build and install the resulting bits.\r\n\r\n####  What will happen to the aspnet org?\r\n\r\nThe aspnet org as a separate entity is legacy and artificial.  In time we hope to absorb it into the dotnet org and sunset the aspnet org.\r\n\r\n#### Will the coreclr and corefx repos go away?\r\n\r\nWith the help of GitHub, we plan to migrate all issues from these repos to the new dotnet/platform repo, and then lock down creation of additional issues, such that the repos will no longer be used for issue management.  We will also inhibit the creation of PRs to the master branch, which will effectively become an archive for read-only review of history.  In this sense, these repos will be archived, and no active development will happen with them.  However, we plan to continue servicing previous .NET Core releases out of these repos, so the various release branches (e.g. release/2.1, release/3.0, etc.) will continue to see (limited) activity.\r\n\r\n#### Will the mono repo go away?\r\n\r\nNo. mono/mono contains the source for the full mono stack and will continue to live on happily.  We will simply be moving the managed source associated with System.Private.CoreLib and copying the relatively small amount of source that makes up the native mono runtime to dotnet/platform.  We may choose to then use some mirroring technology to keep the runtime copy in sync (this will, however, not suffer from the same mirroring issues we currently experience, as we would not be mirroring between two components required to build the same binaries), or we may choose to let them diverge and manually sync only those changes deemed relevant to both implementations.\r\n\r\n#### Will the corert repo go away?\r\n\r\nYes.  We plan to retire/archive the corert repo.  Some of the technology in the corert repo will be migrated to the master branch of dotnet/platform, where it will be productized as part of .NET.  Other portions of the corert repo will be migrated to feature branches of dotnet/platform, where the experimentation can continue.  In this way, we will use feature branches to continue experimenting with the corert technology, while making it easier to share portions with its shipping counterpart and also graduate functionality into master if/when it’s ready.\r\n\r\n#### Does this mean there will be a single repo for all of .NET?\r\n\r\nNo.  We will be reducing the number of repos that contribute to .NET, but currently we do not believe that going all the way down to one is the right answer.\r\n\r\n#### Doesn’t this mean that issue and PR tracking will now be overwhelming?\r\n\r\nIt is already the case that the vast majority of issues in a given repo are not relevant to any individual developer, and with several thousand open issues in each repo and on the order of a hundred open PRs in each, we already need systems (e.g. labels) to successfully manage issues and PRs.  As such, we don’t believe the merging will have a significant impact on this aspect of developer productivity.  If it turns out to have an unexpectedly large negative impact, we will work with the community to find ways to mitigate the problem.  However, there are already a multitude of successful open source projects on GitHub with at least an order of magnitude more issues.\r\n\r\n#### What will happen to existing issues?\r\n\r\nWith the help of GitHub functionality, we plan to migrate all issues from old repos (e.g. dotnet/coreclr, dotnet/corefx) to the new repos (e.g. dotnet/platform).  We may also use this as a forcing function to revisit stale issues and either close those that are no longer relevant or reinvigorate those that are demanding of more immediate attention.\r\n\r\n#### What about git history?\r\n\r\nIn general, we plan to keep history, such that history from each constituent repo will be a part of the new repo.  However, we have made some mistakes in the past (e.g. large binaries, multitudes of automated PRs for flowing bits and source between repos, etc.), and we plan to rewrite history to correct those mistakes wherever possible and impactful.  Some rough calculations suggest this could end up significantly reducing the size of the repos as well as the time it takes to clone, which should not only help developers approaching the project but also CI.  This will end up meaning that SHAs may be different in the new repo than they were in the old repo; as previously mentioned, however, any references to the old SHAs in the old repos will continue to work, as those repos will remain accessible.\r\n\r\n#### Will I still show up in the contributor list due to previous contributions?\r\n\r\nYes.  We plan to merge all such history.\r\n\r\n#### Will this break debugging with SourceLink?\r\n\r\nNo.  The existing repos will continue to be accessible, and commit SHAs there will remain unchanged.\r\n\r\n#### Might plans change?\r\n\r\nSure.  Part of the goal of posting this announcement is to hear from you, hear about additional benefits you're excited about, and hear about additional concerns we may not have considered.  We will include such ideas in our planning and course correct as necessary.\r\n\r\n## Discussion\r\n\r\nTo discuss these plans, please comment on the corresponding issue at https://github.com/dotnet/coreclr/issues/26175.\r\n","Url":"https://github.com/dotnet/announcements/issues/119","RelatedDescription":"Open issue \"Consolidating .NET GitHub repos\" (#119)"},{"Id":"470434872","IsPullRequest":false,"CreatedAt":"2019-07-19T16:54:02","Actor":"richlander","Number":"118","RawContent":null,"Title":".NET Core master branches have switched to \"5.0\"","State":"open","Body":"# .NET Core master branches have switched to \"5.0\"\r\n\r\nVarious .NET Core repos have switched their `master` branches to \"5.0\", and will use 3.x branches for 3.0 and 3.1 projects. This is very similar to how we approached 2.x and 3.0 projects. As context, `master` branches produced 3.0 builds for the entire period of the 2.2 project.\r\n\r\nAt present, this change is only relevant if you contribute to .NET Core repositories. Otherwise, we recommend that you wait for the 5.0 Preview releases before installing this new version.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/core #3059](https://github.com/dotnet/core/issues/3059)\r\n\r\n## Details\r\n\r\nThe following repos have moved their master branches to \"5.0\":\r\n\r\n- [dotnet/coreclr](https://github.com/dotnet/coreclr)\r\n- [dotnet/corefx](https://github.com/dotnet/corefx)\r\n- [dotnet/core-setup](https://github.com/dotnet/core-setup)\r\n\r\nYou can see that [5.0 .NET Core Runtime builds](https://github.com/dotnet/core-setup#daily-builds) are now being built and published at dotnet/core-setup.\r\n\r\nIn large part, we switched `master` to 5.0 to enable to the community to contribute changes. As the .NET Core 3.0 released has progressed, we've had to increase scrutiny on the changes we will accept. Now that we've permanently branched for 3.0, we can accept a much broader set of changes. Please consider that to be an open invitation!\r\n\r\nNotably, [dotnet/core-sdk](https://github.com/dotnet/core-sdk) is not yet producing 5.0 builds. We expect that the dotnet/core-sdk master branch will continue as a 3.0 branch for 2-3 months while we finish up the .NET Core 3.0 project.\r\n\r\nAt present, there is no developer experience for 5.0. We are waiting on the dotnet/core-sdk repo to switch to 5.0. Switching your project file to target `netcoreapp5.0` won't do anything useful. We'll update this issue when a 5.0 SDK comes available.","Url":"https://github.com/dotnet/announcements/issues/118","RelatedDescription":"Open issue \".NET Core master branches have switched to \"5.0\"\" (#118)"},{"Id":"465501070","IsPullRequest":false,"CreatedAt":"2019-07-08T23:25:31","Actor":"terrajobst","Number":"117","RawContent":null,"Title":"System.Text.Json usability study results","State":"open","Body":"We've performed a usability study on the new `System.Text.Json` APIs which will replace JSON.NET as the default JSON experience in .NET Core 3.0:\r\n\r\n* We focused on the primary \"getting started\" scenarios to validate that we picked the right type- and method names.\r\n* We simulated what we believe to be common error cases to validate that our exception messages are understandable and actionable.\r\n* Since we were short on time, we couldn't use the recruiting provided by the UX lab but instead brought in our own developers, which we recruited from the .NET engineering team\r\n\r\nThis has worked out well for us as we were able to get short term feedback which resulted in significant improvements to the overall API shape and usability. In the future, we should do more API focused UX studies 😊\r\n\r\n## Tasks\r\n\r\n| # | Description                            | Code\r\n|:--|:---------------------------------------|:-----\r\n| 1 | Serialize and pretty print             | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario1/Program.cs#L19-L31)\r\n| 2 | Deserialize with trailing comma        | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario2/Program.cs#L19-L25)\r\n| 3 | Deserialize with custom property names | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario3/Program.cs#L30-L45)\r\n| 4 | Read with DOM                          | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario4/Program.cs#L20-L35)\r\n| 5 | Pretty print an existing JSON file     | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario5/Program.cs#L26-L34)\r\n\r\n## Hypotheses\r\n\r\nWe expect developers to...\r\n\r\n| # | Description                                            | Result\r\n|:--|:-------------------------------------------------------|:---------------\r\n| 1 | ...assume the APIs are similar/identical to JSON.NET   |  Validated\r\n| 2 | ...complete tasks 1-4 successfully                     |  Validated\r\n| 3 | ...struggle/unable to complete the task 5, because it requires working with two different components which is very different from JSON.NET |  Invalidated\r\n| 4 | ...not look at documentation for most of their coding as IntelliSense is good enough |  Invalidated\r\n| 5 | ...be happy with the experience of using the API                                     |  Validated\r\n| 6 | ...plan on using `System.Text.Json` for their next JSON task                         |  Partially Validated\r\n\r\n##  Key Observations\r\n\r\n* Everyone completed scenarios #1-#3, 2 didn't complete #4, 6 didn't complete #5\r\n    - The reason was always \"out of time\". Every person who started a scenario successfully finished it.\r\n    - We feel this validates that we picked the right scope for a 60 minute study of people from various backgrounds\r\n* Overall people liked the new API\r\n    - Key value prop for most people was the fact that \"it's now built in\"\r\n    - Very few mentioned perf and the ones that did thought that it probably wouldn't make a difference in their scenarios.\r\n    - Most people said they would prefer `System.Text.Json` for new APIs, but would stick to JSON.NET in code that already uses it.\r\n    - **[Action]** None, this is in line with what we expected.\r\n* Virtually everyone tried to google for sample code in the documentation\r\n    - Everyone found our blog post and online documentation\r\n    - People new to .NET were confused that JSON.NET and `System.Text.Json` weren't the same thing\r\n    - Everyone complained that the current docs are lacking, especially sample code.\r\n    - **[Action]** Docs are work in progress. We plan on shipping with a fully documented API surface and sample code.\r\n* Virtually everyone found the key type relatively quickly\r\n    - Some people were confused when types were static, rather than something that one can new up\r\n    - **[Action]** None. This is by-design as we try to reduce the number of allocations.\r\n* Virtually everyone had trouble selecting the correct method on\r\n  `JsonSerializer`\r\n    - We chose a very complicated naming convention\r\n    - **[Action]** We simplified it by using names that people in the study told us were looking for.\r\n* Most of our error messages were well received because they told people what\r\n  the problem is & how they can fix them.\r\n    - One error message was unclear because we reported an unexpected character when we could have reported that we didn't expect a comment.\r\n    - **[Action]** We've reworded the error message.\r\n    - We had one error message that was generated by a lower layer and provided an action item that doesn't make sense when people receive it when using the higher layer component.\r\n    - **[Action]** We've reworded the error message to be more generic so it makes sense for both kind of consumers.\r\n* Virtually everyone used the new Roslyn completion feature which will also show\r\n  types from namespaces not imported yet.\r\n    - However, virtually nobody realized that they were doing it.\r\n    - This caused confusion when people found other APIs that happen to include Json in them, specifically the old data contract serialization.\r\n    - **[Action]** Talk to the Roslyn IDE team to see if this something more people will run into. This could prove to be especially problematic for technologies that share type names (e.g. `UserControl` in WinForms and WPF) and both are referenced by the project.\r\n* Optional parameters and `async`/`await` are usability cliffs\r\n    - Many were confused by optional parameters and tried to pass them in, even though they didn't have to.\r\n    - **[Action]** Talk to the Roslyn IDE team to see if we can visualize them better in VS.\r\n    - **[Action]** Try to avoid heavy use of optional parameters for mainline APIs.\r\n    - Async is a very steep cliff. People have no idea what to do in their code to make async work. While IntelliSense shows the usage by prefixing it with await, people didn't notice that.\r\n    - **[Action]** Unclear; this is a broader issue.\r\n* Virtually nobody used F1 to get help for APIs\r\n    - *Surprise*. I expected more people to use <kbd>F1</kbd>.\r\n* Virtually everyone used F12 to explore the API (\"metadata view\")\r\n    - *Surprise*. I expected most people to explore the type via the\r\n      IntelliSense completion\r\n* Nobody used Object Browser to explorer the APIs\r\n    - *Surprise*. I expected at least some people to.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/39304.","Url":"https://github.com/dotnet/announcements/issues/117","RelatedDescription":"Open issue \"System.Text.Json usability study results\" (#117)"},{"Id":"465034831","IsPullRequest":false,"CreatedAt":"2019-07-08T03:13:38","Actor":"leecow","Number":"116","RawContent":null,"Title":"Updates to releases.json (.NET Core release metadata)","State":"open","Body":"**The changes described in this issue will be live with the .NET Core July update on 7/9/2019.**\r\n\r\nThe releases.json files (e.g. [2.2 releases.json](https://raw.githubusercontent.com/dotnet/core/master/release-notes/2.2/releases.json)) are comprehensive metadata files which capture details of each .NET Core release. These files, along with the top level [releases-index.json](https://raw.githubusercontent.com/dotnet/core/master/release-notes/releases-index.json), are becoming increasingly important .NET Core release assets. These files, one for each major.minor channel, are relied upon by many to detect when updates for .NET Core are available, discover security update details and other uses.\r\n\r\nChanges are sometimes necessary, and the growing dependencies require that we treat compatibility of the schema with the utmost care. This announcement describes an addition to the releases.json schema.\r\n\r\n## SDK Versions and Visual Studio\r\n\r\nBecause of current .NET Core SDK product construction dependencies, there is a hard link between the Runtime, SDK, toolset (compilers, MSBuild, NuGet, and other components), and Visual Studio. Simplistically, this means that when anything updates, everything updates. The unfortunate result of this linking is that multiple versions of the SDK are released with each monthly update for each supported versions of Visual Studio. For example, the May Update for .NET Core 2.2 included the 2.2.5 runtime, 2.2.107 SDK for Visual Studio 2017 and 2.2.204 for Visual Studio 2019 and yet another pair of SDK versions for .NET Core 2.1. An example of this is the [2.2.5 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.5/2.2.5.md). \r\n\r\nThis is a confusing situation and we are working to mitigate the need to release multiple SDKs with .NET Core 3.0. The need for multiple SDK versions will persist for 2.1 LTS.\r\n\r\n## Adding the SDKS array\r\n\r\nTo appropriately model multiple SDKs per release, we are adding an SDKs array to releases.json, which will contain SDK objects. The top-level SDK object will represent the highest versioned SDK for a given update. Using the previous 2.2.5 update example, SDK 2.2.204 is in the top SDK object as well as duplicated in the SDKS array. All other applicable 2.2* SDK objects are included in the SDKS array. The SDK objects within the array will carry specific Visual Studio compatibility and version inclusion information to provide appropriate context.\r\n\r\nHere is an example of the new array based on the upcoming July update.\r\nAgain, this will be additive and the previous SDK object will include the highest SDK version for the release.\r\n\r\n```json\r\n{\r\n    \"sdk\": {\r\n        \"version\": \"2.2.301\",\r\n        \"version-display\": \"2.2.301\",\r\n        \"runtime-version\": \"2.2.6\",\r\n        \"vs-version\": \"16.1.3\",\r\n        \"vs-support\": \"Visual Studio 2019 (v16.1)\",\r\n        \"csharp-version\": \"7.3\",\r\n        \"fsharp-version\": \"4.5\",\r\n        \"vb-version\": null,\r\n        \"files\": []\r\n    },\r\n    \"sdks\": [\r\n        {\r\n            \"version\": \"2.2.301\",\r\n            \"version-display\": \"2.2.301\",\r\n            \"runtime-version\": \"2.2.6\",\r\n            \"vs-version\": \"16.1.3\",\r\n            \"vs-support\": \"Visual Studio 2019 (v16.1)\",\r\n            \"csharp-version\": \"7.3\",\r\n            \"fsharp-version\": \"4.5\",\r\n            \"vb-version\": null,\r\n            \"files\": []\r\n        },\r\n        {\r\n          \"version\": \"2.2.205\",\r\n          \"version-display\": \"2.2.205\",\r\n          \"runtime-version\": \"2.2.6\",\r\n          \"vs-version\": \"16.0.5\",\r\n          \"vs-support\": \"Visual Studio 2019 (v16.0)\",\r\n          \"csharp-version\": \"7.3\",\r\n          \"fsharp-version\": \"4.5\",\r\n          \"vb-version\": null,\r\n          \"files\": []\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\n## vs-version and the Runtime\r\n\r\nThe same version of the runtime is included in multiple versions of Visual Studio. To account for this, the vs-version field is being updated to a comma-delimited string. The string will represent all versions of Visual Studio which first include the particular .NET Core update. Again, an example from the upcoming July Update.\r\n\r\n```json\r\n\"runtime\": {\r\n        \"version\": \"2.2.6\",\r\n        \"version-display\": \"2.2.6\",\r\n        \"vs-version\": \"15.9.13, 16.1.3, 16.2.0\",\r\n```\r\n\r\nThe same `vs-versions` changes will be seen in the `aspnetcore-runtime` object.\r\n\r\n## Future Enhancements\r\n\r\nThere are other improvements to the schema which have been suggested by the community which we are evaluating. Generally, theses enhancements are additive and should not represent compatibility compromises for existing parsers and similar announcements will be published ahead of any changes.\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/116","RelatedDescription":"Open issue \"Updates to releases.json (.NET Core release metadata)\" (#116)"},{"Id":"444065225","IsPullRequest":false,"CreatedAt":"2019-05-14T18:38:23","Actor":"TaraOverfield","Number":"114","RawContent":null,"Title":"May 2019 .NET Updates","State":"open","Body":"# May 2019 .NET Updates\r\n\r\nThe following .NET updates were released in May 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.16 and .NET Core SDK 1.1.13( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.16/1.0.16.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.13/1.1.13.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.11 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.11/2.1.11.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.5 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.5/2.2.5.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2727](https://github.com/dotnet/core/issues/2727)\r\n\r\n## .NET Framework\r\n* [.NET Framework May 2019 Security and Quality Rollup - May 14, 2019](https://devblogs.microsoft.com/dotnet/net-framework-may-2019-security-and-quality-rollup/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/114","RelatedDescription":"Open issue \"May 2019 .NET Updates\" (#114)"},{"Id":"444027703","IsPullRequest":false,"CreatedAt":"2019-05-14T17:06:24","Actor":"blowdart","Number":"113","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and ASP.NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core and ASP.NET Core improperly handle web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core and ASP.NET Core application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core and ASP.NET Core web applications handle web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37651\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Private.Uri package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0, 4.3.1 | 4.3.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Nemanja Mijailovic](https://mijailovic.net/)\r\n\r\n### External Links\r\n\r\n[CVE-2019-0981](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0981)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/113","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability\" (#113)"},{"Id":"444027025","IsPullRequest":false,"CreatedAt":"2019-05-14T17:04:45","Actor":"blowdart","Number":"112","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and ASP.NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core and ASP.NET Core improperly handle web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core and ASP.NET Core application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core and ASP.NET Core web applications handle web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37650\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Private.Uri package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0, 4.3.1 | 4.3.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Nemanja Mijailovic](https://mijailovic.net/)\r\n\r\n### External Links\r\n\r\n[CVE-2019-0980](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0980)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/112","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability\" (#112)"},{"Id":"444026277","IsPullRequest":false,"CreatedAt":"2019-05-14T17:02:57","Actor":"blowdart","Number":"111","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core improperly process RegEx strings. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET application.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handle RegEx string processing.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37649\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Text.RegularExpressions package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Text.RegularExpressions.dll | 4.3.0 | 4.3.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0820](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0820)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/111","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability\" (#111)"},{"Id":"435015242","IsPullRequest":false,"CreatedAt":"2019-04-19T01:16:10","Actor":"MichaelSimons","Number":"110","RawContent":null,"Title":"New images for .NET Framework 4.8","State":"open","Body":"# New images for .NET Framework 4.8\r\n\r\nNew images have been released with support for [.NET Framework 4.8 runtime and SDK](https://devblogs.microsoft.com/dotnet/announcing-the-net-framework-4-8/).\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#271](https://github.com/Microsoft/dotnet-framework-docker/issues/271)\r\n\r\n## Details\r\n* Pull request: #270\r\n\r\nYou can access these new images with the following tags:\r\n* `mcr.microsoft.com/dotnet/framework/runtime:4.8`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.8`\r\n\r\nIn addition, the `latest` tag has been updated to refer to these new 4.8 images.\r\n\r\nCheck out the readme files for more information on the latest tags:\r\n* [Runtime](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.runtime.md)\r\n* [SDK](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.sdk.md)\r\n\r\nThe [3.5 SDK](https://github.com/Microsoft/dotnet-framework-docker/tree/master/3.5/sdk) images are intended to always contain the latest .NET Framework SDK and have also been updated to use the 4.8 SDK.","Url":"https://github.com/dotnet/announcements/issues/110","RelatedDescription":"Open issue \"New images for .NET Framework 4.8\" (#110)"},{"Id":"433297298","IsPullRequest":false,"CreatedAt":"2019-04-15T13:57:07","Actor":"MichaelSimons","Number":"109","RawContent":null,"Title":".NET Framework SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Framework SDK container images now contain the Visual Studio 2019 toolset\r\n.NET Framework SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add additional tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Framework SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Framework SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#269](https://github.com/Microsoft/dotnet-framework-docker/issues/269)\r\n\r\n## Details\r\nVisual Studio 2019 was released on April 2, 2019. We updated the .NET Framework SDK container images, on the same day, to include a new version of the .NET Framework SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag (e.g. mcr.microsoft.com/dotnet/framework/sdk:4.7.2-20190312-windowsservercore-ltsc2019).\r\n\r\nRelated pull request: [#252](https://github.com/Microsoft/dotnet-framework-docker/pull/252)","Url":"https://github.com/dotnet/announcements/issues/109","RelatedDescription":"Open issue \".NET Framework SDK container images now contain the Visual Studio 2019 toolset\" (#109)"},{"Id":"432735158","IsPullRequest":false,"CreatedAt":"2019-04-12T20:35:55","Actor":"KathleenDollard","Number":"108","RawContent":null,"Title":".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017","State":"open","Body":"# .NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\r\n\r\n.NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017. For example, 2.2.203 and 2.1.603 cause failures in Visual Studio 2017. To work on projects in Visual Studio 2017, use .NET Core SDK 2.2.1nn and 2.1.5nn, such as 2.2.106 and 2.1.506. You can install any combination of these SDKs side by side.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3124](https://github.com/dotnet/sdk/issues/3124)\r\n\r\n## Details\r\n\r\nYou can find the SDKs on you machine using the following at a command prompt:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2. Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nIf you downloaded the .NET Core SDK 2.2 between April 2 and April 12, 2019, the main [.NET downloads page](https://dotnet.microsoft.com/download/) included only 2.2.2nn. Starting April 12th, a new button marked \"Compatible with Visual Studio 2017\" is provided to target 2.2.1nn. If you downloaded 2.2 prior to this date, and you use Visual Studio 2017, install the compatible version.\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nThis problem most often occurs because you manually uninstall the 2.1.5nn version. Simply reinstall it from the [.NET Core 2.1 downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n## More information\r\n\r\nHere is the draft of an article we are preparing for .NET Core documentation:\r\n\r\n---\r\n\r\n## Solving Problems with .NET Core SDK Selection in Visual Studio\r\n\r\nYou may have .NET Core SDKs on your machine and still have problems with Visual Studio finding an appropriate one. This article explains why this happens and how you can fix your installation.\r\n\r\nWhen Visual Studio can't find an appropriate version of the .NET Core SDK, you'll receive an error message. This may appear in the Error pane as NETSDK1045:\r\n\r\n\"The current .NET SDK does not support targeting .NET Core 2...\"\r\n\r\nYou can check what .NET Core SDKs you have on your machine with the following command:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\nUnless you have a global.json file, when you use `dotnet` from the command line, the latest .NET Core SDK is used.\r\n\r\n> [TIP!] \r\n> Open a command prompt and try to build with `dotnet build`. If the command line build works, but Visual Studio doesn't suggestions in this article may help.\r\n\r\nThe last two digits of the .NET Core SDK version numbers are in the format are a patch number, which is represented by `nn` in this article because we will continue to service them to include the latest runtimes. To find out more, vist the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\n## Fixes for Common Problems\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2… Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.2.1nn. As an example, 2.2.106 would be a valid entry.\r\n\r\nIf you downloaded the .NET Core SDK 2.2 after April 2, 2019, version 2.2.2nn (such as 2.2.203) is listed first and is the highest version available. However, Visual Studio 2017 requires 2.2.1nn (such as 2.2.106). .NET Core SDK 2.2.2nn works with Visual Studio 2019. Visual Studio 2017 and Visual Studio 2019 can be installed side by side, but this requires both .NET Core SDK 2.2.1nn and .NET Core SDK 2.2.2nn to develop .NET Core 2.2 applications.\r\n\r\nTo download .NET Core SDK 2.2.2nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.1.5nn. As an example, 2.1.505 would be a valid entry. \r\n\r\nThis problem occurs of you manually uninstall the 2.1.5nn version.\r\n\r\nThe Visual Studio 2019 installation will not remove this file and Visual Studio 2017 will continue to work side by side.\r\n\r\nTo reinstall .NET Core SDK 2.1.5nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n### Visual Studio 2019 can't target .NET Core 3.0 Preview\r\n\r\nIf you receive this error message in Visual Studio 2019:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 3.0.100-preview... As an example, SDK 3.0.100-preview3-010431 would be a valid entry.\r\n\r\nTo install .NET Core SDK 3.0.1nn preview, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/3.0).\r\n\r\nIn Visual Studio, go to `Tools\\Options\\Projects and Solutions\\.NET Core` and check the box `Use Previews of the .NET Core SDK`.\r\n\r\n> [NOTE!]\r\n> This option will be moving to `Tools\\Options\\Environment` and renamed `Preview Features` in Visual Studio 2019 version 16.1 Preview 2.\r\n\r\nIf you are targeting .NET Core 3.0 preview, the [C# language version will be C# 8.0 Preview by default](https://docs.microsoft.com/en-us/visualstudio/releases/2019/release-notes#csharp-defaults) allowing you to use new C# features.\r\n\r\n## Understand the relationship between .NET Core SDKs and Visual Studio build tools\r\n\r\nVisual Studio has its own copies of tools like MSBuild, NuGet and the compilers. If you install the .NET Core workload, it also installs the .NET Core SDK which has versions of these tools and provides tasks and targets. These two versions are built from the same repositories, but target .NET Framework and .NET Core respectively. \r\n\r\nWhen you build a .NET Core project in Visual Studio, it uses Visual Studio's copy of MSBuild, but the tasks and targets are supplied from the selected version of the .NET Core SDK. \r\n\r\nWhen you upgrade the .NET Core SDK, you get new tasks and targets. These new tasks and targets may contain features that are not supported by older versions of MSBuild. Like all of the .NET Core SDK, MSBuild is backwards compatible. It is not forwards compatible.\r\n\r\nThis generally works well, but requires a guarantee that the tasks and targets work with the MSBuild version. To ensure this, each .NET Core SDK indicates an MSBuild version range that is used by Visual Studio to determine compatibility. Versions of the .NET Core SDK that have a higher MSBuild identifier than expected are ignored by Visual Studio. In the normal case, this simply means you use the tasks and targets that were installed with your version of Visual Studio.\r\n\r\nBecause of this, you may have many versions of the .NET Core SDK on your machine and Visual Studio still fail to find one it considers appropriate. This is compounded by a poor error message, which we cannot fully correct because it is from the old version of the .NET Core SDK on your machine. Confusion is also compounded by a complex non-linear release matrix that makes it difficult to predict the right .NET Core SDK to select. We are working to improve all this. \r\n\r\n## The Visual Studio / .NET Core SDK support matrix\r\n\r\nThe last two digits of the .NET Core SDK version number are a patch number, which are represented by a `nn` in this table. You can learn more about .NET Core SDK and .NET Core Runtime versioning at the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\nThe following table shows which Visual Studio versions and .NET Core SDKs are compatible and how they are acquired if you are working with Visual Studio. \r\n\r\n| .NET Core SDK | .NET Core Runtime | Compatible Visual Studio | MSBuild | Notes                                     |\r\n|---------------|-------------------|--------------------------|---------|-------------------------------------------|\r\n| 2.1.5nn       | 2.1               | 2017                     | 15      | Installed as part of VS 2017 version 15.9 |\r\n| 2.1.6nn       | 2.1               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 2.2.1nn       | 2.2               | 2017                     | 15      | Installed manually                        |\r\n| 2.2.2nn       | 2.2               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 3.0.1nn       | 3.0 (Preview)     | 2019                     | 16      | Installed manually                        |\r\n\r\nVisual Studio 2017 cannot work with .NET Core SDK 2.1.6nn or 2.2.2nn.\r\n\r\nTo find out more about removing older versions of the .NET Core Runtime and .NET Core SDK, visit the [How to remove the .NET Core Runtime and SDK page](https://docs.microsoft.com/en-us/dotnet/core/versions/remove-runtime-sdk-versions?tabs=macos).\r\n\r\nTo download the .NET Core SDK, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core).","Url":"https://github.com/dotnet/announcements/issues/108","RelatedDescription":"Open issue \".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\" (#108)"},{"Id":"432081093","IsPullRequest":false,"CreatedAt":"2019-04-11T15:16:43","Actor":"KathleenDollard","Number":"107","RawContent":null,"Title":"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below","State":"open","Body":"# Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\r\n\r\n.NET Core 3 takes the next step in the .NET Core tool strategy with local tools. As part of this process, starting in Preview 4 DotNetCliToolReference tools will be restricted to targeting .NET Core 2.2 and below. DotNetCliToolReference tools can be used in projects targeting .NET Core 3.0, but the tools themselves should target .NET Core 2.2 or below.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3115](https://github.com/dotnet/sdk/issues/3115)\r\n\r\n## Details\r\n\r\nThe suggested approach going forward is to to use [.NET Core Local Tools](https://aka.ms/local-tools) when you want a tool that is specific to a project or repository. At the same time we are removing the need to access local tools by the verbose `dotnet tool run <toolname>` that was present in earlier previews. You can now access local tools via `dotnet <toolname>`.\r\n\r\nDotNetCliToolReference tools have a flaw in how their dependencies are restored which can create [difficult to diagnose bugs when running these tools](https://github.com/NuGet/Home/issues/5067). This issue would occur much more frequently if targeting .NET Core 3.0 was allowed. Restricting tools to target only .NET Core 2.2 and below means existing scenarios to continue to work (as well as they previously did), regardless of the framework version targeted by the project or the current .NET Core SDK. \r\n\r\nThe new .NET Core tool strategy avoids this flaw in restore strategy and offers other benefits, like the ability to author one type of tool and install it in different ways depending on project and user needs.\r\n\r\nWe look forward to your feedback on .NET Core Local Tools, and on challenges you face moving away from DotNetCliToolReference tools. \r\n\r\n[dotnet/sdk #3057](https://github.com/dotnet/sdk/pull/3057)","Url":"https://github.com/dotnet/announcements/issues/107","RelatedDescription":"Open issue \"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\" (#107)"},{"Id":"431012407","IsPullRequest":false,"CreatedAt":"2019-04-09T14:51:18","Actor":"MichaelSimons","Number":"106","RawContent":null,"Title":".NET Core SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Core SDK container images now contain the Visual Studio 2019 toolset\r\n\r\n.NET Core SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add *additional* tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Core SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Core SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1042](https://github.com/dotnet/dotnet-docker/issues/1042)\r\n\r\n## Details\r\n\r\n[Visual Studio 2019](https://devblogs.microsoft.com/visualstudio/visual-studio-2019-code-faster-work-smarter-create-the-future/) was released on April 2, 2019. We updated the .NET Core SDK container images, on the same day, to include a new version of the .NET Core SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag:\r\n\r\n* 2.1: `mcr.microsoft.com/dotnet/core/sdk:2.1.505`\r\n* 2.2: `mcr.microsoft.com/dotnet/core/sdk:2.2.105`\r\n\r\nDetails:\r\n\r\n* [dotnet/dotnet-docker #1029](https://github.com/dotnet/dotnet-docker/pull/1029)\r\n* [2.1 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.602-SDK/2.1.602-SDK.md)\r\n* [2.2 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.202-SDK/2.2.202-SDK.md)\r\n\r\n## Known Breaking Changes for SDK images (VS 2017 to VS 2019 upgrade)\r\n\r\nThe following issues and breaks have been discovered.\r\n \r\n### Test Log File Name Change\r\n\r\nA change was introduced to the `dotnet test` command when a user-defined log file name is specified.  In the previous version the resulting log file would be named exactly as specified.  In the current version, the log file is named with a timestamp suffix automatically added to the user-defined name.  \r\n\r\nDetails:\r\n* [Microsoft/vstest #1603](https://github.com/Microsoft/vstest/issues/1603) \r\n* [Microsoft/vstest#1876](https://github.com/Microsoft/vstest/issues/1876)","Url":"https://github.com/dotnet/announcements/issues/106","RelatedDescription":"Open issue \".NET Core SDK container images now contain the Visual Studio 2019 toolset\" (#106)"},{"Id":"431003701","IsPullRequest":false,"CreatedAt":"2019-04-09T14:35:39","Actor":"MichaelSimons","Number":"105","RawContent":null,"Title":"Windows Server, version 1709 no longer Supported by .NET Framework","State":"open","Body":"# Windows Server, version 1709 no longer Supported by .NET Framework\r\n\r\nWindows Server, version 1709 is no longer supported. As a result, this version of Windows is no longer supported by the .NET Team and we will no longer produce .NET Framework container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Framework Docker images](https://hub.docker.com/_/microsoft-dotnet-framework)\r\n* [.NET Framework Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-framework)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-framework-docker #259](https://github.com/Microsoft/dotnet-framework-docker/issues/259)\r\n\r\n## Details\r\n\r\nDocker tags that contain `windowsservercore-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Windows Server and .NET Framework.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `4.7.1`, and  `4.7.2`. These are tags that are supported on multiple operating systems and versions, and do  not contain the operating system in them. As a result of no longer producing new images for Windows Server, version 1709, manifest tags no longer include entries for Windows 10, version 1709, and Windows Server,version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.17134-based image is incompatible with a 10.0.16299 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Windows Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Windows Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/framework/runtime:4.7.2-windowsservercore-1709` or `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-windowsservercore-1709`.","Url":"https://github.com/dotnet/announcements/issues/105","RelatedDescription":"Open issue \"Windows Server, version 1709 no longer Supported by .NET Framework\" (#105)"},{"Id":"430998341","IsPullRequest":false,"CreatedAt":"2019-04-09T14:25:57","Actor":"MichaelSimons","Number":"104","RawContent":null,"Title":"Nano Server 2016 and 1709 no longer Supported by .NET Core","State":"open","Body":"# Nano Server 2016 and 1709 no longer Supported by .NET Core\r\n\r\nNano Server 2016 and Nano Server, version 1709 are no longer supported. As a result, these versions of Windows are no longer supported by the .NET Team and we will no longer produce .NET Core container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Core Docker images](https://hub.docker.com/_/microsoft-dotnet-core)\r\n* [.NET Core Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-core)\r\n* [Products Reaching End of Support for 2018](https://support.microsoft.com/en-us/help/4043450/products-reaching-end-of-support-for-2018)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\nWe previously announced Nano Server 2016 going out of support in [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/). That post is still accurate.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1041](https://github.com/dotnet/dotnet-docker/issues/1041)\r\n\r\n## Details\r\n\r\nDocker tags that contain `nanoserver-sac2016` and `nanoserver-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Nano Server and .NET Core.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `2.1`, `2.1-sdk`, `2.2.1-runtime`. These are tags that are supported on multiple operating systems, and do not contain the operating system in them. As a result of no longer producing new images for Nano Server 2016 and Nano Server, version 1709, manifest tags no longer include entries for Nano Server 2016, Windows Server 2016, Windows 10, version 1607, Windows 10, version 1709, and Windows Server, version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.16299-based image is incompatible with a 10.0.14393 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Nano Server 2016 or Nano Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Nano Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-sac2016` or `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-1709`.\r\n\r\n### Nano Server Support\r\n\r\n.NET Core is supported on Nano Server, version 1803 and later. \r\n\r\n.NET Core 2.x and 3.0 images are available for all supported versions of Nano Server, version 1803 and later. This means that 2.x and 3.0 manifest tags can be used on Windows 10, version 1803+, and Windows Server, version 1803+. You can also use non-manifest tags for those versions, too, such as `2.2-nanoserver-1809`.\r\n\r\n.NET Core 1.x images are available for Nano Server, version 1809 and later. This means that 1.x manifest tags can be used on Windows 10, version 1809+, Windows Server, version 1809+ and Windows Server 2019. You can also use non-manifest tags for those versions, too, such as `1.1-nanoserver-1809` tag.","Url":"https://github.com/dotnet/announcements/issues/104","RelatedDescription":"Open issue \"Nano Server 2016 and 1709 no longer Supported by .NET Core\" (#104)"},{"Id":"420117627","IsPullRequest":false,"CreatedAt":"2019-03-12T17:35:16","Actor":"vivmishra","Number":"103","RawContent":null,"Title":"March 2019 .NET Updates","State":"open","Body":"# March 2019 .NET Updates\r\n\r\nThe following .NET updates were released in March 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework March 2019 Update - March 19, 2019](https://devblogs.microsoft.com/dotnet/net-framework-march-2019-update/)\r\n* [.NET Framework April 2, 2019 Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - April 2, 2019](https://devblogs.microsoft.com/dotnet/net-framework-april-2-2019-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.15 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.15/1.0.15.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.12/1.1.12.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.9 and .NET Core SDK 2.1.505 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.9/2.1.9.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.3 and .NET Core SDK 2.2.105 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.3/2.2.3.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2432](https://github.com/dotnet/core/issues/2432)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/103","RelatedDescription":"Open issue \"March 2019 .NET Updates\" (#103)"},{"Id":"415363751","IsPullRequest":false,"CreatedAt":"2019-02-27T22:49:51","Actor":"leecow","Number":"102","RawContent":null,"Title":"SDK Installers will remove previous patch versions","State":"open","Body":"The SDK Installers for Windows will upgrade patch versions in place within the same feature band. This will reduce the number of SDKs that are installed on programmer machines.\r\n\r\nFeature bands of the SDK are defined like 3.0.1nn. [Find out more about SDK version numbers](https://docs.microsoft.com/dotnet/core/versions/#versioning-details).\r\n\r\nThis means when .NET Core SDK 3.0.101 becomes available and is installed, .NET Core SDK 3.0.100 will be removed from the machine if it exists. When .NET Core SDK 3.0.200 becomes available and is installed on the same machine, .NET Core SDK versions like 3.0.101 will not be removed but stay side by side with 3.0.200.\r\n\r\nThis approach supports use of `global.json` which will roll forward across patch versions, but not feature bands of the SDK. Thus, upgrading via the SDK installer will not result in errors due to a missing SDK. Feature bands also align with side by side Visual Studio installations for those users that install SDKs for Visual Studio use. For example, Visual Studio 15.9 uses .NET Core SDK 2.2.500 but does not support .NET Core SDK 2.2.600.\r\n\r\nFind out how to [remove other .NET Core SDK versions here.](https://docs.microsoft.com/dotnet/core/versions/remove-runtime-sdk-versions).","Url":"https://github.com/dotnet/announcements/issues/102","RelatedDescription":"Open issue \"SDK Installers will remove previous patch versions\" (#102)"},{"Id":"410971363","IsPullRequest":false,"CreatedAt":"2019-02-15T22:24:40","Actor":"richlander","Number":"101","RawContent":null,"Title":"Publishing .NET Core images to Microsoft Container Registry (MCR)","State":"open","Body":"# Publishing .NET Core images to Microsoft Container Registry (MCR)\r\n\r\nMicrosoft teams are now publishing container images to the [Microsoft Container Registry](https://azure.microsoft.com/en-us/blog/microsoft-syndicates-container-catalog/). There are two primary reasons for this change:\r\n\r\n* Syndicate Microsoft-provided container images to multiple registries, like Docker Hub and Red Hat.\r\n* Use Microsoft Azure as a global CDN for delivering Microsoft-provided container images.\r\n\r\nYou will use and see MCR as a storage back-end for Microsoft images. The primary way you learn about Microsoft container images and tags will be through a registry, which for most users will continue to be Docker Hub. Most of the experience you've had browsing for .NET Core container images will continue unchanged with this new model. The Docker Hub URLs you've used for Microsoft repos will continue to work, and forward to updated locations on Docker Hub. Existing Docker Hub will images will be maintained as-is.\r\n\r\nSee [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/) for the most updated information on our use of MCR.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #935](https://github.com/dotnet/dotnet-docker/issues/935)\r\n\r\n## Starting with .NET Core nightly repo\r\n\r\nOn the .NET team, we started our [transition to MCR](https://github.com/dotnet/dotnet-docker/issues/745) with the .NET Core \"nightly\" repo. [dotnet-nightly](dockerhub.com/r/microsoft/dotnet-nightly) is now hosted on MCR and syndicated to Docker Hub. We started with the nightly repo in order to discover and fix any challenges we found with this new model before we move our higher-traffic primary container repository.\r\n\r\nWe will start publishing [dotnet](dockerhub.com/r/microsoft/dotnet) to MCR a bit later, in either February or March. This issue will be updated when that happens.\r\n\r\n## Repo Split\r\n\r\nThe [.NET Core repo](https://hub.docker.com/r/microsoft/dotnet) currently includes 4 major categories of tags: \r\n\r\n* `sdk`\r\n* `aspnetcore-runtime`\r\n* `runtime` \r\n* `runtime-deps`\r\n\r\nProviding all of the tags in one place has helped with discoverability but made for a repo with an enormous README that can be challenging to navigate and consume. It is large enough that we exceeded Docker Hub README limits and had to artificially make it smaller.\r\n\r\nGoing forward, we will provide a repo for each of the tag categories listed above. We'll also provide a \"product repo\" that will hierarchicaly group all of our repos together. This will satisfy discoverability needs so that it will be easy to find the tags you want.\r\n\r\nYou can already see this experience with [microsoft-dotnet-core-nightly](https://hub.docker.com/_/microsoft-dotnet-core-nightly). There are now multiple repos for our nightly builds:\r\n\r\n* [.NET Core Nightly product repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly)\r\n* [.NET Core SDK Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-sdk/)\r\n* [.NET Core ASP.NET Core Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-aspnet/)\r\n* [.NET Core Runtime Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime/)\r\n* [.NET Core Runtime-deps Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime-deps/)\r\n\r\nThe same split will exist for the non-nightly stable repo (currently hosted at  [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet)) when we start publishing it to MCR and syndicating it back to DockerHub.\r\n\r\n## Changes to registry URL\r\n\r\nThe biggest change is that your Dockerfiles need to be updated to point to the MCR registry in order get access to new .NET Core container tags. The same change is required for scripts or human operations that pull images via `docker pull`.\r\n\r\nThe following example shows the registry path, repo and tag for the .NET Core 2.2 \"Nightly\" SDK on MCR:\r\n\r\n```console\r\nmcr.microsoft.com/dotnet/core-nightly/sdk:2.2\r\n```\r\n\r\nAs comparison, the following repo and tag have been used to date for the .NET Core 2.2 \"Nightly\" SDK on Docker Hub:\r\n\r\n```console\r\nmicrosoft/dotnet-nightly:2.2-sdk\r\n```\r\n\r\nThe new repo URL is provided at each of the news repos. For example, the new .NET Core SDK \"nightly\" repo provides a box on the right where you can copy and paste the correct MCR-based repo syntax that you can use for `docker pull` or in `FROM` statements in your Dockerfiles.\r\n\r\n![image](https://user-images.githubusercontent.com/2608468/52811702-95c5eb80-304a-11e9-8de8-e6ea1f4b4d75.png)\r\n\r\n## Servicing existing Docker Hub tags\r\n\r\nWe will continue to service existing non-version-specific or floating tags on Docker Hub while the associated .NET Core version is supported. For example the `microsoft/dotnet:2.1-sdk` tag is a floating tag that will continue to be serviced for the lifetime of .NET Core 2.1. You can continue using floating tags without issue.\r\n\r\nIf you use non-floating tags, like `microsoft/dotnet:2.1.504-sdk-alpine`, then you will need to update your Dockerfile to use a new non-floating tag. No new non-floating tags will be published to `microsoft/dotnet` and `microsoft/dotnet-nightly` after we fully transition to MCR.\r\n\r\n.NET Core 3.0 Preview 3 and later will only be made available on MCR.\r\n\r\n## Microsoft is a Verified Publisher\r\n\r\nUntil now, Microsoft-provided container images were considered \"community images\". As part of this change, we are re-classifying Microsoft as a \"verified publisher\" on Docker Hub. This designation should make it clearer that .NET and other Microsoft-provided images are coming from a verified source. There clearly was that expectation previously, but Docker is now making that clearer in the Docker Hub pages they host for Microsoft.\r\n\r\nWe will provide official vulnerability scanning Microsoft-provided images as a second phase of this transition.","Url":"https://github.com/dotnet/announcements/issues/101","RelatedDescription":"Open issue \"Publishing .NET Core images to Microsoft Container Registry (MCR)\" (#101)"},{"Id":"410784442","IsPullRequest":false,"CreatedAt":"2019-02-15T14:06:29","Actor":"TaraOverfield","Number":"100","RawContent":null,"Title":"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809","State":"open","Body":"<strong><em>Final Update 2/19/19 @1:30 PM (PST)</em></strong><em>: This </em><em>advisory is now resolved with no action needed from Microsoft Customers. The issue was not applicable to any valid or supported configuration. There is no consequence for .NET 4.8 Preview customers. </em>\r\n\r\n<em>We strive to share timely information to protect our customer’s productivity, in this case, our finding was thankfully of no consequence for customers on supported configurations.</em>\r\n\r\n<del><em><strong>Update 2/15/19 @3:35 PM (PST)</strong></em><em>: As we continue our investigation, we are finding the issue to be restricted to a limited and isolated set of test-only systems that are using non-official versions of the .NET 4.8 Preview. As of 2/15/19 around 12:00 pm (PST) we further tightened our delivery mechanisms to ensure that the February .NET security updates are only deployed to their expected target systems.</em></del>\r\n\r\n<del><span>The </span><a href=\"https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/\" rel=\"nofollow\">February 2019 Security and Quality Rollup for Windows 10 update 1809</a><span> was released earlier this week. We have received multiple customer reports of issues when a customer has installed .NET Framework 4.8 Preview then installed the February security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>.</span> These reports are specific to only to the scenario when a customer has installed both .NET Framework 4.8 Preview and the February security update.</del>\r\n\r\n<del>We are actively working on investigating and addressing this issue. If you installed the February 2019 security update and have not seen any negative behavior, we recommend that you leave your system as-is but closely monitor it and ensure that you apply upcoming .NET Framework updates.</del>\r\n\r\n<del>We will continue to update this <a href=\"https://github.com/dotnet/announcements/issues/100\" rel=\"nofollow\">post</a> as we have new information.</del>\r\n<h2><del>Guidance</del></h2>\r\n<del>We are working on guidance and will update this post and as we have new information.</del>\r\n<h2><del>Workaround</del></h2>\r\n<del>There are no known workarounds at this time.</del>\r\n<h2><del>Symptoms</del></h2>\r\n<del>After installing .NET Framework 4.8 Preview then the February 2019 security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>, Visual Studios will crash with this error message:</del>\r\n<p class=\"xxxxxmsonormal\"><del><b><span style=\"font-size: 10.5pt;font-family: 'Segoe UI',sans-serif;color: black\">\"Exception has been thrown by the target of an invocation.\"</span></b></del></p>","Url":"https://github.com/dotnet/announcements/issues/100","RelatedDescription":"Open issue \"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809\" (#100)"},{"Id":"410455095","IsPullRequest":false,"CreatedAt":"2019-02-14T19:28:25","Actor":"richlander","Number":"99","RawContent":null,"Title":"Supporting new Alpine versions (for containers)","State":"open","Body":"# Supporting new Alpine versions (for containers)\r\n\r\n[Alpine 3.9](https://twitter.com/alpinelinux/status/1090416212822110214) was recently announced. Congratulations, Alpine team! On the .NET team, we are committed to supporting new Alpine versions quickly, and also need to define a policy for older versions. This policy only applies for the container images that we publish.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #933](https://github.com/dotnet/dotnet-docker/issues/933)\r\n\r\n## Policy\r\n\r\nWe intend to establish the following policy for supporting Alpine with .NET Core container images:\r\n\r\n* Support new Alpine versions within 60 days of release (hopefully much less).\r\n* Support n-1 Alpine versions for 3 months after we support a new Alpine version.\r\n\r\nNote: The [.NET Core support policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md) may be broader. This policy is specific to the container images we produce.\r\n\r\n## Plans\r\n\r\nWe're in the process of [fixing issues required to support Alpine 3.9](https://github.com/dotnet/dotnet-docker/issues/921). We expect that these issues will be resolved in February and that we'll be able to provide support for Alpine 3.9 in March.\r\n\r\nWe will produce Alpine 3.9 images for .NET Core 2.1, 2.2 and 3.0. Assuming we publish 3.9 images in March, we'll stop producing and supporting Alpine 3.7 and 3.8 images after June (2019).\r\n\r\n## Using Alpine-based .NET Core images\r\n\r\nWe produce a variety of Alpine-based images. You can either depend on a specific Alpine version, like with `microsoft/dotnet:2.2-sdk-alpine3.8` or opt to use the latest Alpine image we have to offer, like with `microsoft/dotnet:2.2-sdk-alpine`. Either are good choices. It is just a question of whether you want to make a conscious decision to move to later Alpine releases.\r\n\r\n## Support for ARM32?\r\n\r\nWe produce Alpine images for x64 (and ARM64, shortly). The [Alpine 3.9 announcement](https://twitter.com/alpinelinux/status/1090416212822110214) made mention of support for ARM32v7. We would like to enable .NET Core [Alpine-based images on ARM32](https://github.com/gliderlabs/docker-alpine/issues/463#issuecomment-460530395). We are patiently waiting for that to happen. If that's important to you, you should comment on that thread.","Url":"https://github.com/dotnet/announcements/issues/99","RelatedDescription":"Open issue \"Supporting new Alpine versions (for containers)\" (#99)"},{"Id":"409840927","IsPullRequest":false,"CreatedAt":"2019-02-13T14:48:21","Actor":"TaraOverfield","Number":"98","RawContent":null,"Title":"February 2019 .NET Updates","State":"open","Body":"# February 2019 .NET Updates\r\nThe following .NET updates were released in February 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework February 2019 Security and Quality Rollup - February 12, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/)\r\n* [.NET Framework February 2019 Preview of Quality Rollup - February 19, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/19/net-framework-february-2019-preview-of-quality-rollup/)\r\n\r\n## .NET Support Policies\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/98","RelatedDescription":"Open issue \"February 2019 .NET Updates\" (#98)"},{"Id":"409436643","IsPullRequest":false,"CreatedAt":"2019-02-12T18:21:22","Actor":"leecow","Number":"97","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability","State":"open","Body":"## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a domain spoofing vulnerability in .NET Framework and .NET Core which causes the meaning of a URI to change when International Domain Name encoding is applied. An attacker who successfully exploited the vulnerability could redirect a URI.\r\n\r\nThe security update addresses the vulnerability by disallowing certain Unicode characters from the URI.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/35265\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core 1.0 or 1.1 based application that uses the [System.Private.Uri](https://www.nuget.org/packages/System.Private.Uri/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0 | 4.3.1\r\n\r\nAny .NET Core 2.1 or 2.2 based application that uses the [Microsoft.NETCore.App](https://www.nuget.org/packages/Microsoft.NETCore.App) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6, 2.1.7, 2.2.0, 2.2.1 | 2.1.8, 2.2.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Private.Uri` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.2.1, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Private.Uri/4.3.0` is a reference to version 4.3.0 of `System.Private.Uri`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.8 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.2 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Private.Uri` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.Private.Uri` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0657](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0657)\r\n\r\n### Revisions\r\n\r\nV1.0 (February 12, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-02-08_\r\n","Url":"https://github.com/dotnet/announcements/issues/97","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability\" (#97)"},{"Id":"397026248","IsPullRequest":false,"CreatedAt":"2019-01-08T18:17:45","Actor":"leecow","Number":"96","RawContent":null,"Title":"January 2019 .NET Updates","State":"open","Body":"# January 2019 .NET Updates\r\n\r\nThe following .NET updates were released in January 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework January 2019 Preview of Quality Rollup - January 15, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/15/net-framework-january-2019-preview-of-quality-rollup/)\r\n* [.NET Framework January 2019 Security and Quality Rollup - January 8, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/08/net-framework-january-2019-security-and-quality-rollup/)\r\n* [.NET Framework January 22, 2018 Preview of Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - January 22, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/22/net-framework-january-22-2018-preview-of-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.7 and .NET Core SDK 2.1.503 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.7/2.1.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.1 and .NET Core SDK 2.2.102 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.1/2.2.1.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2210](https://github.com/dotnet/core/issues/2210)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/96","RelatedDescription":"Open issue \"January 2019 .NET Updates\" (#96)"},{"Id":"397020176","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:27","Actor":"blowdart","Number":"95","RawContent":null,"Title":" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a tampering vulnerability exists when .NET Core improperly handles specially crafted files. An attacker who successfully exploited this vulnerability could write arbitrary files and directories to certain locations on a vulnerable system. However, an attacker would have limited control over the destination of the files and directories.\r\n\r\nTo exploit the vulnerability, an attacker must send a specially crafted file to a vulnerable system\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core handles these files.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34427\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nIf your application does not extract ZIP compressed files it is unaffected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.IO.Compression.ZipFile](https://www.nuget.org/packages/System.IO.Compression.ZipFile/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.IO.Compression.ZipFile) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n`System.IO.Compression.ZipFile` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\nFinally, you must restart your applications once an updated runtime or SDK is installed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Danny Grander](https://twitter.com/grander) of [Snyk](https://snyk.io/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-8416](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8416)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected pacakge table.\r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/95","RelatedDescription":"Open issue \" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\" (#95)"},{"Id":"397020142","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:23","Actor":"blowdart","Number":"94","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of an information disclosure vulnerability exists in .NET Framework and .NET Core which allows bypassing Cross-origin Resource Sharing (CORS) configurations. An attacker who successfully exploited the vulnerability could retrieve content, that is normally restricted, from a web application.\r\n\r\nThe security update addresses the vulnerability by enforcing CORS configuration to prevent its bypass.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34428\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.2.0 | 2.2.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Net.Http` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `SSystem.Net.Http/4.3.0` is a reference to version 4.3.0 of `System.Net.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Net.Http` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0545](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0545)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected package table. \r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n","Url":"https://github.com/dotnet/announcements/issues/94","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\" (#94)"},{"Id":"390948658","IsPullRequest":false,"CreatedAt":"2018-12-14T03:22:58","Actor":"wu-yafeng","Number":"93","RawContent":null,"Title":"Docker image with tag '2.2-aspnetcore-runtime' is not compatible","State":"closed","Body":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]","Url":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Closed issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93)"},{"Id":"390193072","IsPullRequest":false,"CreatedAt":"2018-12-12T12:56:53","Actor":"bilalmalik777","Number":"92","RawContent":null,"Title":".net core Console","State":"closed","Body":"I am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n    networks:\r\n     - app-network\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\nIf the detail is not enough or you do not get my point, you can share your confusion in comment","Url":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Closed issue \".net core Console\" (#92)"},{"Id":"380346599","IsPullRequest":false,"CreatedAt":"2018-11-13T17:44:44","Actor":"leecow","Number":"91","RawContent":null,"Title":"November 2018 .NET Updates","State":"open","Body":"# November 2018 .NET Updates\r\n\r\nThe following .NET updates were released in November 2018. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core November 2018 (2.1.6 and SDK 2.1.500) Update release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.6/2.1.6.md)\r\n\r\nA [discussion issue](https://github.com/dotnet/core/issues/2053) is available for questions or feedback about this release.\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [October 2018](https://github.com/dotnet/announcements/issues/89)\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/91","RelatedDescription":"Open issue \"November 2018 .NET Updates\" (#91)"},{"Id":"375230004","IsPullRequest":false,"CreatedAt":"2018-10-29T21:45:27","Actor":"terrajobst","Number":"90","RawContent":null,"Title":"The future of JSON in .NET Core 3.0","State":"open","Body":"JSON has become an essential part of virtually all modern .NET applications and in many cases even surpassed the usage of XML. However, .NET hasn't had a (great) built-in way to deal with JSON. Instead we've relied on [Json.NET] which continues to serve the .NET ecosystem well.\r\n\r\n[Json.NET]: https://www.newtonsoft.com/json\r\n\r\nMoving forward, we plan on making some changes to our JSON support:\r\n\r\n* **We need high-performance JSON APIs**. We need a new set of JSON APIs that are highly tuned for performance by using `Span<T>` and allows for processing UTF-8 directly without having to transcode to UTF-16 `string` instances. Both aspects are critical for our web server Kestrel, where throughput is a key requirement.\r\n\r\n* **Remove dependency from ASP.NET Core to Json.NET**. Today, ASP.NET Core has a dependency on Json.NET. While this provides a tight integration between ASP.NET Core and Json.NET, it also means that application developers cannot freely choose which JSON library they are using. This is also problematic for customers of Json.NET as the version is dictated by the underlying platform. However, Json.NET is frequently updated and application developers often want to -- or even have to -- use a specific version. Thus, we want to remove the dependency from ASP.NET Core 3.0 to Json.NET so that customers can choose which version to use, without fearing they might accidentally break the underlying platform. In addition, this makes it also possible to plug-in an entirely different JSON library.\r\n\r\n* **Provide an ASP.NET Core integration package for Json.NET**. Json.NET has basically become the Swiss Army knife of JSON processing in .NET. It provides many options and facilities that allow customers to handle their JSON needs with ease. We don't want to compromise on the Json.NET support customers are getting today, for example, the ability to configure the JSON serialization via the `AddJsonOptions` extension method. Thus, we want to provide the Json.NET integration as a NuGet package that developers can optionally install so they get all the bells and whistles they get from Json.NET today. The other part of this work item is to ensure we have the right extension points so that other parties can provide similar integration packages for their JSON library of choice.\r\n\r\nBelow are more details around this plan.\r\n\r\n## The need for high-performance JSON APIs\r\n\r\nThe requirements for the .NET stack have changed a bit since the arrival of .NET Core. Historically, .NET has valued usability and convenience. With .NET Core, we've added a focus on performance, and we've made significant investments to serve high performance needs. And the [improvements we made][techempower] in the popular TechEmpower benchmark are a testament to that.\r\n\r\n[techempower]: https://www.techempower.com/blog/2016/11/16/framework-benchmarks-round-13/\r\n\r\nWith .NET Core 2.1, we've added a brand new primitive called [Span\\<T>][span-msdn] that allows us to represent native memory and arrays in a uniform way. With this type, we've also added a set of parsing and encoding APIs that are much more memory efficient without having to resort to unsafe code.\r\n\r\n[span-msdn]: https://msdn.microsoft.com/en-us/magazine/mt814808.aspx\r\n\r\nPart of the work of minimizing allocations is to avoid having to transcode UTF-8 payloads into UTF-16 strings, purely for parsing reasons. Currently, Json.NET is implemented by reading UTF-16. We need the ability to read (and write) JSON documents directly in UTF-8 because most network protocols (including HTTP) use UTF-8.\r\n\r\nDuring .NET Core 2.1 we've learned that updating our existing APIs to leverage `Span<T>` has limits. While we did add a bunch of overloads that accept spans, we also had to produce brand new APIs that are designed around minimizing allocations and dealing with buffers, which we exposed in `System.Buffers` namespaces. And with `System.IO.Pipelines` we've also added a programming model that enables developers to share buffers without having to deal with lifetime issues.\r\n\r\nBased on these experiences we believe in order to support JSON parsing, we'll need to expose a new set of JSON APIs that are specifically geared for high-performance scenarios.\r\n\r\nYou might wonder why we can't just update Json.NET to include support for parsing JSON using `Span<T>`? Well, James Newton-King -- the author of Json.NET -- has the following to say about that:\r\n\r\n> Json.NET was created over 10 years ago, and since then it has added a wide range of features aimed to help developers work with JSON in .NET. In that time Json.NET has also become far and away NuGet's most depended on and downloaded package, and is the go-to library for JSON support in .NET. Unfortunately, Json.NET's wealth of features and popularity works against making major changes to it. Supporting new technologies like `Span<T>` would require fundamental breaking changes to the library and would disrupt existing applications and libraries that depend on it.\r\n>\r\n> Going forward Json.NET will continue to be worked on and invested in, both addressing known issues today and supporting new platforms in the future. Json.NET has always existed alongside other JSON libraries for .NET, and there will be nothing to prevent you using one or more together, depending on whether you need the performance of the new JSON APIs or the large feature set of Json.NET.\r\n\r\n## Move Json.NET integration into a separate NuGet package\r\n\r\nToday, you cannot use ASP.NET Core without Json.NET because it is a dependency of ASP.NET Core itself. Over the years, we've received feedback that the dependency can conflict with other libraries that have their own dependency on a different version of Json.NET. In the past, we've considered addressing this issue by using a private copy of Json.NET in ASP.NET. However, this would create problems when developers want to configure Json.NET (for instance, in order to control how the serializer behaves when formatting JSON objects).\r\n\r\nMoving forward we'd like to:\r\n\r\n1. Replace the internal usage of Json.NET in ASP.NET Core by the new platform-provided JSON APIs.\r\n\r\n2. Factor the public facing usage of Json.NET into an optional integration package that can be acquired from NuGet.\r\n\r\nSo the existing integration between ASP.NET Core and Json.NET will continue to be supported, but will be moving out of the platform and into a separate package. However, since the integration is then designed to sit on top of the platform, it will also allow customers to update Json.NET to later versions.\r\n\r\nFurthermore, customers who need more performance can also choose to use the new JSON APIs, at the expense of the rich feature set that Json.NET offers.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/33115.","Url":"https://github.com/dotnet/announcements/issues/90","RelatedDescription":"Open issue \"The future of JSON in .NET Core 3.0\" (#90)"}],"ResultType":"GitHubIssue"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1169655923788242945","CreatedAt":"2019-09-05T16:57:58+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demos and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":28,"FavoriteCount":5,"RawContent":null},{"Id":"1169325641541357568","CreatedAt":"2019-09-04T19:05:32+00:00","UserScreenname":"dotnet","Text":"Announcing .NET Core 3.0 Preview 9 https://t.co/eOTg9Nc4Su","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":418,"FavoriteCount":216,"RawContent":null},{"Id":"1169325512033878016","CreatedAt":"2019-09-04T19:05:01+00:00","UserScreenname":"dotnet","Text":"https://t.co/iOiV9qNspl Core and Blazor updates in .NET Core 3.0 Preview 9 https://t.co/esDON00GK9","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":152,"FavoriteCount":85,"RawContent":null},{"Id":"1169016977245032449","CreatedAt":"2019-09-03T22:39:01+00:00","UserScreenname":"dotnet","Text":"Do you care about performance or low-level stuff like SIMD and popcnt? Then this post is for you. https://t.co/rIpKfNwSeu","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":62,"FavoriteCount":24,"RawContent":null},{"Id":"1168996825828855810","CreatedAt":"2019-09-03T21:18:56+00:00","UserScreenname":"dotnet","Text":".@BethMassi get's us revved up and raring to go in the latest .NET Blog post that gives us a #dotNETConf conference… https://t.co/78ndo1xgQJ","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":1855,"FavoriteCount":118,"RawContent":null},{"Id":"1168980895031812096","CreatedAt":"2019-09-03T20:15:38+00:00","UserScreenname":"dotnet","Text":"#dotNETConf is coming to a town near you...\n\nWe're not only streaming live, but we're partnering with organizers ar… https://t.co/iON1XQF7Oo","Source":"<a href=\"https://ads-api.twitter.com\" rel=\"nofollow\">Twitter Ads Composer</a>","RetweetCount":3818,"FavoriteCount":377,"RawContent":null},{"Id":"1167169777414168576","CreatedAt":"2019-08-29T20:18:54+00:00","UserScreenname":"dotnet","Text":".NET Conference 2019\nDiscover The World Of .NET\nSeptember 23-25\nhttps://t.co/FkW2WpZcMn https://t.co/6bQPcWJFdj","Source":"<a href=\"https://ads-api.twitter.com\" rel=\"nofollow\">Twitter Ads Composer</a>","RetweetCount":10265,"FavoriteCount":823,"RawContent":null},{"Id":"1166751382612787201","CreatedAt":"2019-08-28T16:36:21+00:00","UserScreenname":"dotnet","Text":"How the .NET Team uses @AzureDevOps Pipelines to produce @docker Images https://t.co/SXvj2qewdE","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":127,"FavoriteCount":58,"RawContent":null},{"Id":"1166709015444959233","CreatedAt":"2019-08-28T13:48:00+00:00","UserScreenname":"dotnet","Text":"With the release of .NET Core 3 on the way, we've been putting together tons of great content to get you ready.\n\nCh… https://t.co/SkVCaSDA1b","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":328,"FavoriteCount":147,"RawContent":null},{"Id":"1166481079546478592","CreatedAt":"2019-08-27T22:42:16+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demos and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":16,"FavoriteCount":0,"RawContent":null}]}},"RunOn":"2019-09-10T05:30:36.0370535Z","RunDurationInMilliseconds":15271}