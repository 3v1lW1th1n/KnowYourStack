{"Data":{"Blog":{"FeedItems":[{"Title":".NET Framework April 2, 2019 Cumulative Update for Windows 10 version 1809 and Windows Server 2019","PublishedOn":"2019-04-02T21:47:22+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we released the March 2019 Update for Windows 10 version 1809 and Windows Server 2019.\nQuality and Reliability\nThis release contains the following quality and reliability...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-april-2-2019-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/","RawContent":null},{"Title":"Visual Studio 2019 .NET productivity","PublishedOn":"2019-04-02T19:00:17+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Your friendly neighborhood .NET productivity team (aka. Roslyn) focuses a lot on improving the .NET coding experience. Sometimes it’s the little refactorings and code fixes that really improve your...","Href":"https://devblogs.microsoft.com/dotnet/visual-studio-2019-net-productivity-2/","RawContent":null},{"Title":"Handling a new era in the Japanese calendar in .NET","PublishedOn":"2019-04-02T10:40:13+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Typically, calendar eras represent long time periods. In the Gregorian calendar, for example, the current era spans (as of this year) 2,019 years. In the Japanese calendar, however, a new era begins...","Href":"https://devblogs.microsoft.com/dotnet/handling-a-new-era-in-the-japanese-calendar-in-net/","RawContent":null},{"Title":"Announcing F# 4.6","PublishedOn":"2019-03-29T21:40:28+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"We&#8217;re excited to announce general availability of F# 4.6 and the F# tools for Visual Studio 2019! In this post, I&#8217;ll show you how to get started, explain the F# 4.6 feature set, give you...","Href":"https://devblogs.microsoft.com/dotnet/announcing-f-4-6/","RawContent":null},{"Title":"Migrating Delegate.BeginInvoke Calls for .NET Core","PublishedOn":"2019-03-28T21:29:50+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"I recently worked with a couple customers migrating applications to .NET Core that had to make code changes to workaround BeginInvoke and EndInvoke methods on delegates not being supported on .NET...","Href":"https://devblogs.microsoft.com/dotnet/migrating-delegate-begininvoke-calls-for-net-core/","RawContent":null},{"Title":".NET Framework March 2019 Update","PublishedOn":"2019-03-20T00:40:46+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we released the March 2019 Update.\nQuality and Reliability\nThis release contains the following quality and reliability improvements.\nCLR\n\nAddresses an issue in which the Framework throws an...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-march-2019-update/","RawContent":null},{"Title":".NET Core Container Images now Published to Microsoft Container Registry","PublishedOn":"2019-03-15T14:12:09+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"We are now publishing .NET Core container images to Microsoft Container Registry (MCR). We have also made other changes to the images we publish, described in this post.\nImportant: You will need to...","Href":"https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/","RawContent":null},{"Title":".NET Core March 2019 Updates – 1.0.15, 1.1.12, 2.1.9 and 2.2.3","PublishedOn":"2019-03-12T22:59:50+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core March 2019 Update. These updates contain security and reliability fixes. See the individual release notes for details on included reliability fixes.\n\n.NET Core...","Href":"https://devblogs.microsoft.com/dotnet/net-core-march-2019/","RawContent":null},{"Title":"Announcing ML.NET 0.11 – Machine Learning for .NET","PublishedOn":"2019-03-09T01:03:28+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"ML.NET is an open-source and cross-platform machine learning framework (Windows, Linux, macOS) for .NET developers. Using ML.NET, developers can leverage their existing tools and skillsets to develop...","Href":"https://devblogs.microsoft.com/dotnet/announcing-ml-net-0-11-machine-learning-for-net/","RawContent":null},{"Title":"Announcing .NET Core 3 Preview 3","PublishedOn":"2019-03-06T19:10:42+00:00","CommentsCount":36,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 3.0 Preview 3. We would like to update you on the .NET Core 3.0 schedule and introduce you to improvements in .NET Core SDK installers, Docker containers, Range, and...","Href":"https://devblogs.microsoft.com/dotnet/announcing-net-core-3-preview-3/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"9341532248","Type":"PullRequestEvent","CreatedAt":"2019-03-29T14:44:24","Actor":"BillWagner","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/142","RelatedDescription":"Merged pull request \"add docs samples link\" (#142) at dotnet/foundation","RelatedBody":"@BillWagner should we add the samples project too?"},{"Id":"9337730849","Type":"PullRequestEvent","CreatedAt":"2019-03-29T02:29:48","Actor":"mairaw","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/142","RelatedDescription":"Opened pull request \"add docs samples link\" (#142) at dotnet/foundation","RelatedBody":"@BillWagner should we add the samples project too?"},{"Id":"9337725308","Type":"PullRequestEvent","CreatedAt":"2019-03-29T02:28:20","Actor":"mairaw","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/141","RelatedDescription":"Opened pull request \"add links to ML.NET docs\" (#141) at dotnet/foundation","RelatedBody":"/cc @JRAlexander @shauheen \r\n\r\nTo match the info we have added for other projects"},{"Id":"9337679090","Type":"PullRequestEvent","CreatedAt":"2019-03-29T02:16:08","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/139","RelatedDescription":"Merged pull request \"Add link to ASP.NET Core docs\" (#139) at dotnet/foundation","RelatedBody":"Provide a link to the docs site for ASP.NET Core."},{"Id":"9337677839","Type":"PullRequestEvent","CreatedAt":"2019-03-29T02:15:48","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/140","RelatedDescription":"Merged pull request \"add links to .NET docs\" (#140) at dotnet/foundation","RelatedBody":"/cc @mairaw @scottaddie\r\n\r\nMaira, did I miss any project repos to tag?"},{"Id":"9335742237","Type":"PullRequestEvent","CreatedAt":"2019-03-28T19:21:55","Actor":"BillWagner","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/140","RelatedDescription":"Opened pull request \"add links to .NET docs\" (#140) at dotnet/foundation","RelatedBody":"/cc @mairaw @scottaddie\r\n\r\nMaira, did I miss any project repos to tag?"},{"Id":"9335605309","Type":"PullRequestEvent","CreatedAt":"2019-03-28T19:00:02","Actor":"scottaddie","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/139","RelatedDescription":"Opened pull request \"Add link to ASP.NET Core docs\" (#139) at dotnet/foundation","RelatedBody":"Provide a link to the docs site for ASP.NET Core."},{"Id":"9266562420","Type":"PullRequestEvent","CreatedAt":"2019-03-18T21:04:01","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/137","RelatedDescription":"Merged pull request \"Add V3.1 repo and change documentation link\" (#137) at dotnet/foundation","RelatedBody":""},{"Id":"9266559615","Type":"PullRequestEvent","CreatedAt":"2019-03-18T21:03:34","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/138","RelatedDescription":"Merged pull request \"Add Dave to cake.md\" (#138) at dotnet/foundation","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"9228689700","Type":"IssuesEvent","CreatedAt":"2019-03-12T17:35:17","Actor":"vivmishra","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/103","RelatedDescription":"Opened issue \"March 2019 .NET Updates\" (#103) at dotnet/announcements","RelatedBody":"# March 2019 .NET Updates\r\n\r\nThe following .NET updates were released in March 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.15 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.15/1.0.15.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0))\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.12/1.1.12.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.9 and .NET Core SDK 2.1.503 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.9/2.1.9.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.1 and .NET Core SDK 2.2.102 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.1/2.2.1.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2432](https://github.com/dotnet/core/issues/2432)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)"},{"Id":"9150531193","Type":"IssuesEvent","CreatedAt":"2019-02-27T22:49:51","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/102","RelatedDescription":"Opened issue \"SDK Installers will remove previous patch versions\" (#102) at dotnet/announcements","RelatedBody":"The SDK Installers for Windows will upgrade patch versions in place within the same feature band. This will reduce the number of SDKs that are installed on programmer machines.\r\n\r\nFeature bands of the SDK are defined like 3.0.1nn. [Find out more about SDK version numbers](https://docs.microsoft.com/dotnet/core/versions/#versioning-details).\r\n\r\nThis means when .NET Core SDK 3.0.101 becomes available and is installed, .NET Core SDK 3.0.100 will be removed from the machine if it exists. When .NET Core SDK 3.0.200 becomes available and is installed on the same machine, .NET Core SDK versions like 3.0.101 will not be removed but stay side by side with 3.0.200.\r\n\r\nThis approach supports use of `global.json` which will roll forward across patch versions, but not feature bands of the SDK. Thus, upgrading via the SDK installer will not result in errors due to a missing SDK. Feature bands also align with side by side Visual Studio installations for those users that install SDKs for Visual Studio use. For example, Visual Studio 15.9 uses .NET Core SDK 2.2.500 but does not support .NET Core SDK 2.2.600.\r\n\r\nFind out how to [remove other .NET Core SDK versions here.](https://docs.microsoft.com/dotnet/core/versions/remove-runtime-sdk-versions)."}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"9383680115","Type":"PullRequestEvent","CreatedAt":"2019-04-05T04:52:39","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/23697","RelatedDescription":"Merged pull request \"Disable a couple of S.R.InteropServices tests\" (#23697) at dotnet/coreclr","RelatedBody":"- It looks like these are running in outdated snapshots:\r\n  - https://ci.dot.net/job/dotnet_coreclr/job/master/job/x64_checked_ubuntu_corefx_innerloop_prtest/9973/\r\n  - https://ci.dot.net/job/dotnet_coreclr/job/master/job/x64_checked_ubuntu_corefx_innerloop_prtest/10012/\r\n- Disabled the two tests that were fixed in PR https://github.com/dotnet/corefx/pull/34968 to get CI clean"},{"Id":"9383665742","Type":"PullRequestEvent","CreatedAt":"2019-04-05T04:47:32","Actor":"safern","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/23633","RelatedDescription":"Merged pull request \"Nullable feature into master\" (#23633) at dotnet/coreclr","RelatedBody":"Rolling PR to check for bugs introduced in the nullable annotations work.\r\n\r\nAs new changes merge into the nullable branch, this will re-run tests automatically.\r\n\r\nWe have not yet determined when to do the merge, so this is no-merge."},{"Id":"9383459880","Type":"PullRequestEvent","CreatedAt":"2019-04-05T03:35:15","Actor":"AaronRobinsonMSFT","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/23758","RelatedDescription":"Opened pull request \"Fix invalid use of stack memory\" (#23758) at dotnet/coreclr","RelatedBody":"Fixes #23689 "},{"Id":"9383354168","Type":"IssuesEvent","CreatedAt":"2019-04-05T03:00:07","Actor":"RehanSaeed","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/23757","RelatedDescription":"Opened issue \"Dynamically Loading .NET Core Assemblies\" (#23757) at dotnet/coreclr","RelatedBody":"I've published an ASP.NET Core project to a folder and I'm trying to dynamically load the assembly containing the ASP.NET Core `Startup` class. I then want to instantiate the `Startup` class and hand it over to the `TestHost` API, so I can start the site in memory. I've written the following code:\r\n\r\n```c#\r\n    var directoryPath = @\"C:\\Dlls\";\r\n    var assemblyFilePath = Path.Combine(directoryPath, \"Foo.dll\");\r\n    var assemblyName = AssemblyLoadContext.GetAssemblyName(assemblyFilePath);\r\n    var assembly = new AssemblyLoader(directoryPath).LoadFromAssemblyName(assemblyName);\r\n    var startupType = assembly.ExportedTypes\r\n        .FirstOrDefault(x => string.Equals(x.Name, \"Startup\"));\r\n    var webHostBuilder = new WebHostBuilder()\r\n        .UseStartup(startupType)\r\n        .UseUrls(new string[] { \"http://localhost\" });\r\n    using (var testServer = new TestServer(webHostBuilder))\r\n    {\r\n        var response = testServer.CreateClient().GetAsync(\"/\");\r\n    }\r\n\r\n    public class AssemblyLoader : AssemblyLoadContext\r\n    {\r\n        private readonly string directoryPath;\r\n\r\n        public AssemblyLoader(string directoryPath) =>\r\n            this.directoryPath = directoryPath;\r\n\r\n        protected override Assembly Load(AssemblyName assemblyName)\r\n        {\r\n            var dependencyContext = DependencyContext.Default;\r\n            var compilationLibraries = dependencyContext\r\n                .CompileLibraries\r\n                .Where(x => x.Name.Contains(assemblyName.Name))\r\n                .ToList();\r\n            if (compilationLibraries.Count > 0)\r\n            {\r\n                return Assembly.Load(new AssemblyName(compilationLibraries.First().Name));\r\n            }\r\n            else\r\n            {\r\n                var file = new FileInfo($\"{this.directoryPath}{Path.DirectorySeparatorChar}{assemblyName.Name}.dll\");\r\n                if (File.Exists(file.FullName))\r\n                {\r\n                    var asemblyLoader = new AssemblyLoader(file.DirectoryName);\r\n                    return asemblyLoader.LoadFromAssemblyPath(file.FullName);\r\n                }\r\n            }\r\n\r\n            return Assembly.Load(assemblyName);\r\n        }\r\n    }\r\n```\r\n\r\nThis works when I publish the app as a self contained application, however, I'd like to avoid dealing with runtime identifiers (RID's) if possible. When I publish normally the code throws a `TypeLoadException` when `assembly.ExportedTypes` is called. The full stack trace:\r\n\r\n```\r\nSystem.TypeLoadException occurred\r\n  HResult=0x80131522\r\n  Message=Method 'ConfigureServices' in type 'Foo.Startup' from assembly 'Foo, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' does not have an implementation.\r\n  Source=<Cannot evaluate the exceptionsource>\r\n  StackTrace:    at\r\n   System.Reflection.RuntimeAssembly.GetExportedTypes(RuntimeAssembly assembly, ObjectHandleOnStack retTypes)    at\r\n    System.Reflection.RuntimeAssembly.GetExportedTypes()\r\n```\r\n\r\nHow can I dynamically load the .NET Core runtime in the `AssemblyLoader` class? [Related StackOverflow question](https://stackoverflow.com/questions/44545544/dynamically-loading-an-asp-net-core-assembly).\r\n\r\n[EDIT] @karelz changes: formatting code with c# syntax (\\`\\`\\`c#) and stack trace in \\`\\`\\` block."},{"Id":"9383353647","Type":"IssuesEvent","CreatedAt":"2019-04-05T02:59:56","Actor":"sywhang","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/23756","RelatedDescription":"Opened issue \"Diagnostics IPC might not stream Events as fast as we want\" (#23756) at dotnet/coreclr","RelatedBody":"With https://github.com/dotnet/coreclr/pull/23448 we can now stream events out of proc in \"real time\" through IPC. However, because we currently don't touch buffers that are being written to when trying to write events through the IPC channel, when buffers aren't filling up as fast as the rate at which we poll these buffers to stream events out, we may run into situations where events get written to the IPC channels at a very very slow rate. \r\n\r\nWe should instead do what EventListener is doing - get events out of the buffer before they fill up. \r\n\r\nNote that there is one more place we may need to change, which is the implementation of `EventPipeFile` where it has its own cache of `EventPipeBlock` that it tries to fill up before pushing things on the pipe. This wasn't an issue for EventListener because EventListener directly puts the payload into managed callback."}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"9383269249","Type":"PullRequestEvent","CreatedAt":"2019-04-05T02:31:58","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/pull/11075","RelatedDescription":"Closed pull request \"[release/3.0.1xx] Update dependencies from dotnet/sdk\" (#11075) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190404.3\r\n- **Date Produced**: 4/5/2019 1:27 AM\r\n- **Commit**: 4b990161372b4d720377b7ab604393fe33613f2a\r\n- **Branch**: refs/heads/release/3.0.1xx\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview3.19204.3\r\n\r\n"},{"Id":"9383080751","Type":"PullRequestEvent","CreatedAt":"2019-04-05T01:28:14","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/11075","RelatedDescription":"Opened pull request \"[release/3.0.1xx] Update dependencies from dotnet/sdk\" (#11075) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190404.3\r\n- **Date Produced**: 4/5/2019 1:27 AM\r\n- **Commit**: 4b990161372b4d720377b7ab604393fe33613f2a\r\n- **Branch**: refs/heads/release/3.0.1xx\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview3.19204.3\r\n\r\n"},{"Id":"9382805851","Type":"PullRequestEvent","CreatedAt":"2019-04-05T00:01:34","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/11071","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/sdk\" (#11071) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190403.1\r\n- **Date Produced**: 4/3/2019 4:41 PM\r\n- **Commit**: 82cca8869ca50c3bb08358e93c9d2ff40a3b6cdd\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview4.19203.1\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"9383681377","Type":"IssuesEvent","CreatedAt":"2019-04-05T04:53:06","Actor":"Groostav","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/1123","RelatedDescription":"Opened issue \"phantom connection when mixing async & blocking calls on TcpClient \" (#1123) at dotnet/standard","RelatedBody":"on .net 4.6.1, win10\r\n\r\n1. create a TCPClient object\r\n2. attempt to connect synchronously to an endpoint with no bound service, get a `SocketException: Connection actively refused\"\r\n3. attempt to `connectAsync` to that same endpoint \r\n\r\nexpected: Asynchronously get a `SocketException: Connection Actively Refused`\r\nactual: connection is established, `tcpClient.Connected` returns true, `tcpClient.GetStream()` returns non-null, `tcpClient.GetStream().write(...)` throws `NotConnectedException`.\r\n\r\n```C#\r\n        \r\n[Test] //baseline, good behaviour\r\npublic async Task when_only_using_async_calls_should_get_consistent_behaviour()\r\n{\r\n    //setup\r\n    var localhost = \"127.0.0.1\";\r\n    var port = 27041; \r\n    \r\n    var tcpClient = new TcpClient();\r\n\r\n    //act\r\n    try\r\n    {\r\n        await tcpClient.ConnectAsync(localhost, port);\r\n        Assert.Fail(\"connection was actually established!\");\r\n    }\r\n    catch (SocketException ex)\r\n    {\r\n        //continue\r\n    }\r\n\r\n    Func<Task> act = (async () => await tcpClient.ConnectAsync(localhost, port));\r\n\r\n    //assert\r\n    act.Should().Throw<SocketException>();\r\n}        \r\n\r\n\r\n[Test]\r\npublic async Task when_mixing_sync_and_async_tcpclient_calls_should_get_hideous_behaviour()\r\n{\r\n    //setup\r\n    var localhost = \"127.0.0.1\";\r\n    var port = 27041; \r\n    \r\n    var tcpClient = new TcpClient();\r\n\r\n    //act\r\n    try\r\n    {\r\n        tcpClient.Connect(localhost, port);\r\n        Assert.Fail(\"connection was actually established!\");\r\n    }\r\n    catch (SocketException ex)\r\n    {\r\n        //continue\r\n    }\r\n\r\n    await tcpClient.ConnectAsync(localhost, port);\r\n\r\n    //assert\r\n    tcpClient.Connected.Should().BeTrue();\r\n    tcpClient.GetStream().Should().NotBeNull();\r\n\r\n    //seems very strange\r\n    //subsequent interactions with tcpClient throw \"not connected\" exceptions\r\n    //I would've expected the `ConnectAsync` method to throw the same `SocketException`,\r\n}\r\n```"},{"Id":"9379541476","Type":"IssuesEvent","CreatedAt":"2019-04-04T15:07:56","Actor":"Korporal","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/1122","RelatedDescription":"Opened issue \".NET Framework support\" (#1122) at dotnet/standard","RelatedBody":"Hi,\r\n\r\nOn [this ](https://github.com/dotnet/standard/blob/master/docs/versions.md)page we see this subtext under the chart:\r\n\r\n> 2 .NET Framework will not support .NET Standard 2.1 or any other later version. For more details, see this blog post.\r\n\r\nI can understand how some specific version like .NET Framework 4.6.1 (for example) will not support .NET Standard 2.1 but _all_ **future** versions of the .NET Framework too?\r\n\r\nThis statements amounts to a phasing out of .NET Framework, it tells us that we should begin to stop targeting it - well that's what seems to be a logical conclusion anyway.\r\n\r\nI don't understand why some future version of .NET Framework (e.g. 4.8) could not include support for .NET Core 2.1?\r\n\r\nWe read [here ](https://docs.microsoft.com/en-us/dotnet/standard/net-standard)the following Microsoft statement:\r\n\r\n> The .NET Standard is a formal specification of .NET APIs that are intended to be available on all .NET implementations.\r\n\r\nBut now you're retracting this and instead should be saying:\r\n\r\n> The .NET Standard 2.0 and below, is a formal specification of .NET APIs that are intended to be available on all .NET implementations.\r\n\r\nCan Microsoft please be clearer about this? Companies and their staff are under a huge burden to keep up with all sorts of developments in the technology world and if we are being advised to phase out our own support for the .NET Framework then please say so very clearly and definitively.\r\n\r\nThanks\r\n\r\n"},{"Id":"9378158114","Type":"PullRequestEvent","CreatedAt":"2019-04-04T12:13:48","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1121","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/arcade\" (#1121) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190403.10\r\n- **Date Produced**: 4/4/2019 1:43 AM\r\n- **Commit**: 811fda44a88dcfe3e42a17bb34467f5764836c65\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19203.10\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19203.10\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19203.10\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19203.10\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19203.10\r\n\r\n"},{"Id":"9378092930","Type":"PullRequestEvent","CreatedAt":"2019-04-04T12:03:43","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1121","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/arcade\" (#1121) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190403.10\r\n- **Date Produced**: 4/4/2019 1:43 AM\r\n- **Commit**: 811fda44a88dcfe3e42a17bb34467f5764836c65\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19203.10\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19203.10\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19203.10\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19203.10\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19203.10\r\n\r\n"},{"Id":"9377967087","Type":"IssuesEvent","CreatedAt":"2019-04-04T11:43:44","Actor":"markrendle","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/1120","RelatedDescription":"Opened issue \"Please please please don't call it .NET Standard 2.1 when it aligns with .NET Core 3.0\" (#1120) at dotnet/standard","RelatedBody":"This is exactly the sort of version number weirdness that .NET takes flak for.\r\n\r\nIn the commit explaining the 2.1 decision, the 3.0 section is:\r\n\r\n- **3.0**\r\n  - Aligns with .NET Core, which will be released at the same time as .NET\r\n    Standard vNext\r\n  - Pros\r\n    + Leaves room for another .NET Standard that is smaller\r\n    + Simpler messaging when we ship .NET Core and .NET Standard and aligns with\r\n      what we did for .NET Core 2.0.\r\n  - Cons\r\n    + A 3.0 isn't really warranted for .NET Standard\r\n    + Perpetuates the problem of aligning .NET Core & .NET Standard versions and\r\n      requires arbitrary skipping of version numbers\r\n\r\n*Simpler messaging* should be a top priority here. I'm going to spend as much time explaining to clients why they can't use .NET Standard 2.1 with the .NET Core 2.1 LTS as my niece Allyce does explaining how to spell her name.\r\n\r\nIf a 3.0 is warranted for .NET Core, with it's `IAsyncEnumerable`, `IAsyncDisposable`, `Range` and `Index` and all the new overloads of existing APIs, then why isn't it warranted for .NET Standard?\r\n\r\nBetter yet, why not publish a .NET Standard 2.1 which aligns with .NET Core 2.1, with all the `Span<T>` goodness, and a .NET Standard 3.0 which aligns with .NET Core 3.0?\r\n\r\nDeliberately versioning .NET Standard independently of .NET Core, especially on the major version numbers, just seems perverse and unnecessary."},{"Id":"9369851273","Type":"PullRequestEvent","CreatedAt":"2019-04-03T12:11:01","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1119","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/arcade\" (#1119) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190402.13\r\n- **Date Produced**: 4/3/2019 12:44 AM\r\n- **Commit**: 764f362c8e92e41905fe5f6c782ab9980c86c909\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19202.13\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19202.13\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19202.13\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19202.13\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19202.13\r\n\r\n"},{"Id":"9369783112","Type":"PullRequestEvent","CreatedAt":"2019-04-03T12:00:56","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1119","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/arcade\" (#1119) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190402.13\r\n- **Date Produced**: 4/3/2019 12:44 AM\r\n- **Commit**: 764f362c8e92e41905fe5f6c782ab9980c86c909\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19202.13\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19202.13\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19202.13\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19202.13\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19202.13\r\n\r\n"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"9383736898","Type":"PullRequestEvent","CreatedAt":"2019-04-05T05:12:09","Actor":"davidfowl","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/36575","RelatedDescription":"Merged pull request \"Added PipeReader.Create(stream)\" (#36575) at dotnet/corefx","RelatedBody":"- Adds the ability to wrap an existing Stream in a PipeReader to get the buffer management benefits.\r\n- Added tests\r\n\r\nContributes to #27246"},{"Id":"9383546185","Type":"PullRequestEvent","CreatedAt":"2019-04-05T04:05:44","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/36619","RelatedDescription":"Merged pull request \"Disable Json serializer CacheTests since its failing on linux.\" (#36619) at dotnet/corefx","RelatedBody":"See https://github.com/dotnet/corefx/issues/36618\r\n\r\ncc @safern, @steveharter "}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"9383398456","Type":"PullRequestEvent","CreatedAt":"2019-04-05T03:14:38","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/34781","RelatedDescription":"Opened pull request \"Report unboxing conversion of a possibly null value.\" (#34781) at dotnet/roslyn","RelatedBody":"Fixes #33359"},{"Id":"9383118807","Type":"PullRequestEvent","CreatedAt":"2019-04-05T01:41:07","Actor":"sharwell","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/33983","RelatedDescription":"Merged pull request \"Simplify handling of 'enter' in formatting.\" (#33983) at dotnet/roslyn","RelatedBody":"We had a bunch of logic to handle processing \"enter\" after writing `using (...)`.  The purpose of this was to ensure that if you started with\r\n\r\n```c#\r\nusing (a)\r\n    using (b)$$\r\n```\r\n\r\nAnd you pressed enter, you'd get:\r\n\r\n```c#\r\nusing (a)\r\nusing (b)\r\n    $$\r\n```\r\n\r\nHowever, this code seems unnecessary and inconsistent.  First, if you type the close-paren manually, you automatically get the expected code format.  Second, we don't do this sort of fixup on enter for anything else.  For example, if you have:\r\n\r\n```c#\r\ncase x:\r\n    case y:$$\r\n```\r\n\r\nWe don't align these when you press enter.  Instead, we align when you hit `:`.  So this just makes `using` operate just like our other alignment-on-typing rules."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"9382427306","Type":"PullRequestEvent","CreatedAt":"2019-04-04T22:24:10","Actor":"EgorBo","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7260","RelatedDescription":"Opened pull request \"Move AssemblyName to shared\" (#7260) at dotnet/corert","RelatedBody":"CoreRT part of https://github.com/dotnet/coreclr/pull/23737"},{"Id":"9381917284","Type":"PullRequestEvent","CreatedAt":"2019-04-04T20:52:57","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7259","RelatedDescription":"Merged pull request \"Fix build with VS2019\" (#7259) at dotnet/corert","RelatedBody":"The environment setup scripts that come with VS2019 change current directory. It breaks places in the build that depend on current directory."},{"Id":"9380830046","Type":"PullRequestEvent","CreatedAt":"2019-04-04T18:04:33","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7259","RelatedDescription":"Opened pull request \"Fix build with VS2019\" (#7259) at dotnet/corert","RelatedBody":"The environment setup scripts that come with VS2019 change current directory. It breaks places in the build that depend on current directory."},{"Id":"9380035442","Type":"PullRequestEvent","CreatedAt":"2019-04-04T16:06:45","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7258","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/corefx,coreclr\" (#7258) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"9380015178","Type":"PullRequestEvent","CreatedAt":"2019-04-04T16:04:10","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7257","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#7257) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub"},{"Id":"9378681336","Type":"PullRequestEvent","CreatedAt":"2019-04-04T13:26:14","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7257","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#7257) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"9377437101","Type":"PullRequestEvent","CreatedAt":"2019-04-04T10:18:54","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7255","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#7255) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @sywhang"},{"Id":"9377351956","Type":"IssuesEvent","CreatedAt":"2019-04-04T10:06:18","Actor":"DenMpei","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/7256","RelatedDescription":"Opened issue \"  Generating compatible native code. To optimize for size or speed, visit https://aka.ms/OptimizeCoreRT EXEC : error : [TEMPORARY EXCEPTION MESSAGE] FileLoadErrorGeneric: System.Drawing.Common\" (#7256) at dotnet/corert","RelatedBody":"Good day! \r\n\r\nI run: dotnet publish -r win-x64 -c release \r\nConsole application\r\n.Net Core version: 2.2\r\n\r\nAnd I get such an error ... What can I do about it?\r\n\r\nGenerating native code\r\nEXEC : error : [TEMPORARY EXCEPTION MESSAGE] FileLoadErrorGeneric: System.Drawing.Common"},{"Id":"9375552699","Type":"PullRequestEvent","CreatedAt":"2019-04-04T04:39:36","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7255","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#7255) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"9375544277","Type":"PullRequestEvent","CreatedAt":"2019-04-04T04:36:54","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7254","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#7254) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @filipnavara"},{"Id":"9374927002","Type":"IssuesEvent","CreatedAt":"2019-04-04T01:37:10","Actor":"yowl","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/7090","RelatedDescription":"Closed issue \"wasm: Question about ExportedType.IsForwarder\" (#7090) at dotnet/corert","RelatedBody":"I'm trying out ilc for wasm on some larger programs, and I'm hitting \r\nhttps://github.com/dotnet/corert/blob/5056fd45b076277579c84833060447415b7b9403/src/Common/src/TypeSystem/Ecma/EcmaModule.cs#L305\r\nfor a type that has `IsForwarder == true`.  (Type is `System.Threading.PreAllocatedOverlapped` and it looks in the `implementation` for `System.Private.CoreLib`).  Am I right in thinking this is for types that are forwarded to another assemby using `System.Runtime.CompilerServices.TypeForwardedTo`?  If so I suppose what could be happening is that the module which now contains the type, is not getting this type added through the dependency analysis as the actual reference is to the type when it was in the \"older\" module.  Does that make sense?"},{"Id":"9374808139","Type":"PullRequestEvent","CreatedAt":"2019-04-04T01:02:51","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7254","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#7254) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"9383527978","Type":"PullRequestEvent","CreatedAt":"2019-04-05T04:00:11","Actor":"dotnet-automerge-bot","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/3083","RelatedDescription":"Merged pull request \"Merge release/3.0.1xx to master\" (#3083) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/3.0.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"9383263507","Type":"PullRequestEvent","CreatedAt":"2019-04-05T02:30:10","Actor":"dotnet-automerge-bot","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/3082","RelatedDescription":"Merged pull request \"Merge release/2.2.2xx to release/3.0.1xx\" (#3082) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.2.2xx into release/3.0.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.2xx-to-release/3.0.1xx\ngit reset --hard upstream/release/3.0.1xx\ngit merge upstream/release/2.2.2xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.2xx-to-release/3.0.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"9382805533","Type":"PullRequestEvent","CreatedAt":"2019-04-05T00:01:29","Actor":"dotnet-bot","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/3083","RelatedDescription":"Opened pull request \"Merge release/3.0.1xx to master\" (#3083) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/3.0.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"9382805378","Type":"PullRequestEvent","CreatedAt":"2019-04-05T00:01:26","Actor":"dotnet-bot","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/3082","RelatedDescription":"Opened pull request \"Merge release/2.2.2xx to release/3.0.1xx\" (#3082) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.2.2xx into release/3.0.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.2xx-to-release/3.0.1xx\ngit reset --hard upstream/release/3.0.1xx\ngit merge upstream/release/2.2.2xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.2xx-to-release/3.0.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."}],"ResultType":"GitHubEvent"},"Home-Issues":{"Issues":[{"Id":"426787542","IsPullRequest":true,"CreatedAt":"2019-03-29T14:44:24","Actor":"mairaw","Number":"142","RawContent":null,"Title":"add docs samples link","State":"closed","Body":"@BillWagner should we add the samples project too?","Url":"https://github.com/dotnet/foundation/pull/142","RelatedDescription":"Closed or merged PR \"add docs samples link\" (#142)"},{"Id":"426787230","IsPullRequest":true,"CreatedAt":"2019-03-29T02:28:20","Actor":"mairaw","Number":"141","RawContent":null,"Title":"add links to ML.NET docs","State":"open","Body":"/cc @JRAlexander @shauheen \r\n\r\nTo match the info we have added for other projects","Url":"https://github.com/dotnet/foundation/pull/141","RelatedDescription":"Open PR \"add links to ML.NET docs\" (#141)"},{"Id":"426658581","IsPullRequest":true,"CreatedAt":"2019-03-29T02:16:07","Actor":"scottaddie","Number":"139","RawContent":null,"Title":"Add link to ASP.NET Core docs","State":"closed","Body":"Provide a link to the docs site for ASP.NET Core.","Url":"https://github.com/dotnet/foundation/pull/139","RelatedDescription":"Closed or merged PR \"Add link to ASP.NET Core docs\" (#139)"},{"Id":"426666928","IsPullRequest":true,"CreatedAt":"2019-03-29T02:15:48","Actor":"BillWagner","Number":"140","RawContent":null,"Title":"add links to .NET docs","State":"closed","Body":"/cc @mairaw @scottaddie\r\n\r\nMaira, did I miss any project repos to tag?","Url":"https://github.com/dotnet/foundation/pull/140","RelatedDescription":"Closed or merged PR \"add links to .NET docs\" (#140)"},{"Id":"419205679","IsPullRequest":true,"CreatedAt":"2019-03-18T21:04:01","Actor":"MikeWilliams-UK","Number":"137","RawContent":null,"Title":"Add V3.1 repo and change documentation link","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/137","RelatedDescription":"Closed or merged PR \"Add V3.1 repo and change documentation link\" (#137)"},{"Id":"419897914","IsPullRequest":true,"CreatedAt":"2019-03-18T21:03:34","Actor":"devlead","Number":"138","RawContent":null,"Title":"Add Dave to cake.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/138","RelatedDescription":"Closed or merged PR \"Add Dave to cake.md\" (#138)"},{"Id":"391459677","IsPullRequest":false,"CreatedAt":"2019-03-08T19:00:06","Actor":"manne","Number":"123","RawContent":null,"Title":"Missing logo for Steeltoe","State":"closed","Body":"`https://brandfolder.com/pivotal-assets/attachments/ohxttd-7yxa60-clvf50/pivotal-assets-pivotal-genericfile.png` redirects to a sign in page\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L128-L130","Url":"https://github.com/dotnet/foundation/issues/123","RelatedDescription":"Closed issue \"Missing logo for Steeltoe\" (#123)"},{"Id":"417018694","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:32","Actor":"jkonicki","Number":"136","RawContent":null,"Title":"Fix logo and update team contributors","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/136","RelatedDescription":"Closed or merged PR \"Fix logo and update team contributors\" (#136)"},{"Id":"416428925","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"135","RawContent":null,"Title":"adds Umbraco logo","State":"closed","Body":"fixes #124 ","Url":"https://github.com/dotnet/foundation/pull/135","RelatedDescription":"Closed or merged PR \"adds Umbraco logo\" (#135)"},{"Id":"391459812","IsPullRequest":false,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"124","RawContent":null,"Title":"Missing logo for Umbraco","State":"closed","Body":"`https://fbcdn-profile-a.akamaihd.net/hprofile-ak-xap1/v/t1.0-1/p160x160/971596_519168901464439_566592989_n.png?oh=ce61e5b4cbd60c0d99c4164cbb05a434&oe=54F091C9&__gda__=1424472439_c9f76213a915bc2af88246f464f29e8b` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L149-L151","Url":"https://github.com/dotnet/foundation/issues/124","RelatedDescription":"Closed issue \"Missing logo for Umbraco\" (#124)"},{"Id":"416427614","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:45","Actor":"manne","Number":"134","RawContent":null,"Title":"adds the prism logo","State":"closed","Body":"fixes #126 ","Url":"https://github.com/dotnet/foundation/pull/134","RelatedDescription":"Closed or merged PR \"adds the prism logo\" (#134)"},{"Id":"391460225","IsPullRequest":false,"CreatedAt":"2019-03-08T18:58:44","Actor":"manne","Number":"126","RawContent":null,"Title":"No logo provided for Prism","State":"closed","Body":"Can/should this [image](http://prismlibrary.github.io/images/logo-prism-symbol@2x.png) be used?\r\n\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L155-L157","Url":"https://github.com/dotnet/foundation/issues/126","RelatedDescription":"Closed issue \"No logo provided for Prism\" (#126)"},{"Id":"416157860","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:26","Actor":"glennawatson","Number":"133","RawContent":null,"Title":"Add additional ReactiveUI organization projects.","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/133","RelatedDescription":"Closed or merged PR \"Add additional ReactiveUI organization projects.\" (#133)"},{"Id":"407251900","IsPullRequest":true,"CreatedAt":"2019-02-18T17:45:44","Actor":"Potapy4","Number":"132","RawContent":null,"Title":"Update MVVM project logo","State":"closed","Body":"Fixes dotnet/dotnetfoundation-website#72\r\nFixes #125","Url":"https://github.com/dotnet/foundation/pull/132","RelatedDescription":"Closed or merged PR \"Update MVVM project logo\" (#132)"},{"Id":"391459919","IsPullRequest":false,"CreatedAt":"2019-02-18T17:45:44","Actor":"manne","Number":"125","RawContent":null,"Title":"Missing logo for MVVM Light Toolkit","State":"closed","Body":"`https://raw.githubusercontent.com/paulcbetts/mvvmlight/master/Installer/InstallItems/html/MVVM_BlackText_190x147.png` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L137-L139","Url":"https://github.com/dotnet/foundation/issues/125","RelatedDescription":"Closed issue \"Missing logo for MVVM Light Toolkit\" (#125)"},{"Id":"406210463","IsPullRequest":true,"CreatedAt":"2019-02-18T17:44:39","Actor":"NextTurn","Number":"131","RawContent":null,"Title":"Replace http links with https links","State":"closed","Body":"Replace http links with https where possible - both returned 200 OK.","Url":"https://github.com/dotnet/foundation/pull/131","RelatedDescription":"Closed or merged PR \"Replace http links with https links\" (#131)"},{"Id":"399191617","IsPullRequest":true,"CreatedAt":"2019-02-02T11:04:15","Actor":"NextTurn","Number":"130","RawContent":null,"Title":"Update Open XML links","State":"closed","Body":"OpenXmlDeveloper.org was shut down long ago.\r\n\r\nThe content has been moved to EricWhite.com.","Url":"https://github.com/dotnet/foundation/pull/130","RelatedDescription":"Closed or merged PR \"Update Open XML links\" (#130)"},{"Id":"395863354","IsPullRequest":true,"CreatedAt":"2019-01-09T22:28:14","Actor":"ErikEJ","Number":"128","RawContent":null,"Title":"Update of EF description","State":"closed","Body":"@divega !","Url":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Closed or merged PR \"Update of EF description\" (#128)"},{"Id":"395901602","IsPullRequest":true,"CreatedAt":"2019-01-05T03:23:39","Actor":"MarcBruins","Number":"129","RawContent":null,"Title":"Update to absolute path","State":"closed","Body":"Update to absolute path so that when this list is copied the link will actually work","Url":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Closed or merged PR \"Update to absolute path\" (#129)"},{"Id":"395705579","IsPullRequest":true,"CreatedAt":"2019-01-04T00:22:42","Actor":"carloscds","Number":"127","RawContent":null,"Title":"Update documentation information","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/127","RelatedDescription":"Closed or merged PR \"Update documentation information\" (#127)"},{"Id":"391459057","IsPullRequest":true,"CreatedAt":"2019-01-03T04:47:09","Actor":"manne","Number":"122","RawContent":null,"Title":"targets the existing document","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/122","RelatedDescription":"Closed or merged PR \"targets the existing document\" (#122)"},{"Id":"384569679","IsPullRequest":true,"CreatedAt":"2019-01-03T04:46:31","Actor":"JamesNK","Number":"121","RawContent":null,"Title":"Add Newtonsoft.Json","State":"closed","Body":"// @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/121","RelatedDescription":"Closed or merged PR \"Add Newtonsoft.Json\" (#121)"},{"Id":"384212839","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:50","Actor":"stefanov-stefan","Number":"120","RawContent":null,"Title":"Added Telerik info","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/120","RelatedDescription":"Closed or merged PR \"Added Telerik info\" (#120)"},{"Id":"384212448","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:22","Actor":"stefanov-stefan","Number":"119","RawContent":null,"Title":"Added Telerik UWP proj","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/119","RelatedDescription":"Closed or merged PR \"Added Telerik UWP proj\" (#119)"},{"Id":"382378851","IsPullRequest":true,"CreatedAt":"2018-11-23T10:32:15","Actor":"pkgw","Number":"118","RawContent":null,"Title":"Update WorldWide Telescope","State":"closed","Body":"Some layout fixes, but the main change is that @pkgw is now the project director.","Url":"https://github.com/dotnet/foundation/pull/118","RelatedDescription":"Closed or merged PR \"Update WorldWide Telescope\" (#118)"},{"Id":"380070557","IsPullRequest":true,"CreatedAt":"2018-11-23T10:31:49","Actor":"leastprivilege","Number":"117","RawContent":null,"Title":"Update identityserver.md","State":"closed","Body":"significant whitespace","Url":"https://github.com/dotnet/foundation/pull/117","RelatedDescription":"Closed or merged PR \"Update identityserver.md\" (#117)"},{"Id":"379731798","IsPullRequest":true,"CreatedAt":"2018-11-13T04:22:32","Actor":"leastprivilege","Number":"114","RawContent":null,"Title":"Update identityserver.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/114","RelatedDescription":"Closed or merged PR \"Update identityserver.md\" (#114)"},{"Id":"379777451","IsPullRequest":true,"CreatedAt":"2018-11-13T04:21:35","Actor":"scottbrady91","Number":"116","RawContent":null,"Title":"Update to IdentityManager project","State":"closed","Body":"My employer and I have recently taken over the IdentityManager project from Dom & Brock. I've updated the IdentityManager page to reflect this and the newer version of the core repo.","Url":"https://github.com/dotnet/foundation/pull/116","RelatedDescription":"Closed or merged PR \"Update to IdentityManager project\" (#116)"},{"Id":"379733880","IsPullRequest":true,"CreatedAt":"2018-11-13T04:20:23","Actor":"leastprivilege","Number":"115","RawContent":null,"Title":"Create identitymodel.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/115","RelatedDescription":"Closed or merged PR \"Create identitymodel.md\" (#115)"},{"Id":"371941750","IsPullRequest":true,"CreatedAt":"2018-11-01T16:20:07","Actor":"SeanKilleen","Number":"113","RawContent":null,"Title":"Update logo for couchbase-lite in projects.json","State":"closed","Body":"Uses a working link to the logo.\r\n\r\nResolves https://github.com/dotnet/dotnetfoundation-website/issues/65\r\n\r\nFix can be verified by copying/pasting the URL into a browser.","Url":"https://github.com/dotnet/foundation/pull/113","RelatedDescription":"Closed or merged PR \"Update logo for couchbase-lite in projects.json\" (#113)"}],"ResultType":"GitHubIssue"},"CoreCLR-Issues":{"Issues":[{"Id":"429569390","IsPullRequest":true,"CreatedAt":"2019-04-05T03:35:14","Actor":"AaronRobinsonMSFT","Number":"23758","RawContent":null,"Title":"Fix invalid use of stack memory","State":"open","Body":"Fixes #23689 ","Url":"https://github.com/dotnet/coreclr/pull/23758","RelatedDescription":"Open PR \"Fix invalid use of stack memory\" (#23758)"},{"Id":"429563298","IsPullRequest":false,"CreatedAt":"2019-04-05T02:59:55","Actor":"sywhang","Number":"23756","RawContent":null,"Title":"Diagnostics IPC might not stream Events as fast as we want","State":"open","Body":"With https://github.com/dotnet/coreclr/pull/23448 we can now stream events out of proc in \"real time\" through IPC. However, because we currently don't touch buffers that are being written to when trying to write events through the IPC channel, when buffers aren't filling up as fast as the rate at which we poll these buffers to stream events out, we may run into situations where events get written to the IPC channels at a very very slow rate. \r\n\r\nThis is keeping non-verbose events like the runtime performance counters from being streamed over IPC near real-time. \r\n\r\nWe should instead do what EventListener is doing - get events out of the buffer before they fill up. \r\n\r\nNote that there is one more place we may need to change, which is the implementation of `EventPipeFile` where it has its own cache of `EventPipeBlock` that it tries to fill up before pushing things on the pipe. This wasn't an issue for EventListener because EventListener directly puts the payload into managed callback.","Url":"https://github.com/dotnet/coreclr/issues/23756","RelatedDescription":"Open issue \"Diagnostics IPC might not stream Events as fast as we want\" (#23756)"},{"Id":"429542128","IsPullRequest":false,"CreatedAt":"2019-04-05T02:57:54","Actor":"jignparm","Number":"23754","RawContent":null,"Title":"System.Numerics.Tensor, can't create with > 2G elements","State":"closed","Body":"The constructor of Tensor()  class takes an int32 value, and thus cannot create large tensor objects.\r\n\r\nhttps://github.com/dotnet/corefx/blob/master/src/System.Numerics.Tensors/src/System/Numerics/Tensors/Tensor.cs#L269\r\n\r\nOnnxRuntime depends on System.Numerics.Tensor to score machine learning models, some of which produce quite large tensors. While the native C++ API can handle large tensors produced by some models, the C# API is not able to handle them due to this 2G limitation.\r\n\r\nSee the corresponding issue below:\r\n\r\nhttps://github.com/Microsoft/onnxruntime/issues/713\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/coreclr/issues/23754","RelatedDescription":"Closed issue \"System.Numerics.Tensor, can't create with > 2G elements\" (#23754)"},{"Id":"429546504","IsPullRequest":true,"CreatedAt":"2019-04-05T01:38:03","Actor":"safern","Number":"23755","RawContent":null,"Title":"Fix Debug.Assert in GenericDelegateCache","State":"closed","Body":"The Debug.Assert is not matching what we're casting the value to, nor the generic parameters. Causing the JIT Perf tests to fail in the PR to merge to master:\r\n\r\n```\r\nAssertion Failed\r\n\r\n   at System.Threading.Tasks.GenericDelegateCache`2.<>c.<.cctor>b__4_2(Task`1 wrappedAntecedents, Object state)\r\n   at System.Threading.Tasks.ContinuationResultTaskFromResultTask`2.InnerInvoke()\r\n   at System.Threading.Tasks.Task.<>c.<.cctor>b__274_0(Object obj)\r\n   at System.Threading.ExecutionContext.RunFromThreadPoolDispatchLoop(Thread threadPoolThread, ExecutionContext executionContext, ContextCallback callback, Object state)\r\n   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot, Thread threadPoolThread)\r\n   at System.Threading.Tasks.Task.ExecuteEntryUnsafe(Thread threadPoolThread)\r\n   at System.Threading.Tasks.Task.ExecuteFromThreadPool(Thread threadPoolThread)\r\n   at System.Threading.ThreadPoolWorkQueue.Dispatch()\r\n   at System.Threading._ThreadPoolWaitCallback.PerformWaitCallback()\r\n```\r\n\r\ncc: @stephentoub @danmosemsft ","Url":"https://github.com/dotnet/coreclr/pull/23755","RelatedDescription":"Closed or merged PR \"Fix Debug.Assert in GenericDelegateCache\" (#23755)"},{"Id":"429526768","IsPullRequest":true,"CreatedAt":"2019-04-04T23:37:18","Actor":"Anipik","Number":"23753","RawContent":null,"Title":"Nullable: System.Diagnostics","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/23753","RelatedDescription":"Open PR \"Nullable: System.Diagnostics\" (#23753)"},{"Id":"429523619","IsPullRequest":true,"CreatedAt":"2019-04-04T23:23:12","Actor":"adityamandaleeka","Number":"23752","RawContent":null,"Title":"Enable CLR write watch for ARM64 Windows","State":"open","Body":"This change enables CLR write watch on Windows ARM64. We already use it for AMD64 on Windows, and ARM64 on non-Windows. The way it's implemented here matches the way we do it for ARM64 non-Windows.\r\n\r\nAddress https://github.com/dotnet/coreclr/issues/16544\r\n","Url":"https://github.com/dotnet/coreclr/pull/23752","RelatedDescription":"Open PR \"Enable CLR write watch for ARM64 Windows\" (#23752)"},{"Id":"429494953","IsPullRequest":true,"CreatedAt":"2019-04-04T23:19:16","Actor":"sandreenko","Number":"23743","RawContent":null,"Title":"Delete jitstressregs ci testing that is supported in ADO.","State":"closed","Body":"Delete JitStressRegs runs from Jenkins CI, because they are supported now by ADO https://dev.azure.com/dnceng/public/_build?definitionId=354&_a=summary.\r\n\r\nThe idea is to delete all CI jobs that supported by ADO to easily see what is left and unload Jenkins CI machines (to run more CoreFX testing #23706).\r\n\r\nWe will lose history for these runs but it is not important because we lose it anywhere every month and there are no open issues that reference an existing job from these queues.","Url":"https://github.com/dotnet/coreclr/pull/23743","RelatedDescription":"Closed or merged PR \"Delete jitstressregs ci testing that is supported in ADO.\" (#23743)"},{"Id":"429520315","IsPullRequest":true,"CreatedAt":"2019-04-04T23:09:25","Actor":"tannergooding","Number":"23751","RawContent":null,"Title":"Update the JIT to recognize the IsSupported property for all HWIntrinsics","State":"open","Body":"CC. @CarolEidt","Url":"https://github.com/dotnet/coreclr/pull/23751","RelatedDescription":"Open PR \"Update the JIT to recognize the IsSupported property for all HWIntrinsics\" (#23751)"},{"Id":"429515589","IsPullRequest":true,"CreatedAt":"2019-04-04T22:50:51","Actor":"GrabYourPitchforks","Number":"23750","RawContent":null,"Title":"Improve performance of Memory<T>.Span property getter","State":"open","Body":"This is a small optimization to the `Memory<T>.Span` and `ReadOnlyMemory<T>.Span` property getters to reduce the overall codegen size and make the method slightly more efficient.\r\n\r\n|                       Method |  Toolchain |     Mean |     Error |    StdDev |   Median | Ratio | RatioSD |\r\n|----------------------------- |----------- |---------:|----------:|----------:|---------:|------:|--------:|\r\n|  GetSpan_MemOfBytesFromArray | 3.0-master | 2.060 ms | 0.0402 ms | 0.0551 ms | 2.057 ms |  1.00 |    0.00 |\r\n|  GetSpan_MemOfBytesFromArray |   memslice | 1.880 ms | 0.0278 ms | 0.0232 ms | 1.872 ms |  0.91 |    0.03 |\r\n|                              |            |          |           |           |          |       |         |\r\n|      GetSpan_MemOfBytesEmpty | 3.0-master | 1.411 ms | 0.0281 ms | 0.0764 ms | 1.387 ms |  1.00 |    0.00 |\r\n|      GetSpan_MemOfBytesEmpty |   memslice | 1.354 ms | 0.0181 ms | 0.0160 ms | 1.355 ms |  0.98 |    0.03 |\r\n|                              |            |          |           |           |          |       |         |\r\n|  GetSpan_MemOfCharsFromArray | 3.0-master | 1.954 ms | 0.0312 ms | 0.0292 ms | 1.945 ms |  1.00 |    0.00 |\r\n|  GetSpan_MemOfCharsFromArray |   memslice | 1.813 ms | 0.0192 ms | 0.0170 ms | 1.810 ms |  0.93 |    0.02 |\r\n|                              |            |          |           |           |          |       |         |\r\n| GetSpan_MemOfCharsFromString | 3.0-master | 1.736 ms | 0.0342 ms | 0.0589 ms | 1.724 ms |  1.00 |    0.00 |\r\n| GetSpan_MemOfCharsFromString |   memslice | 1.582 ms | 0.0316 ms | 0.0483 ms | 1.574 ms |  0.91 |    0.04 |\r\n|                              |            |          |           |           |          |       |         |\r\n| GetSpan_MemOfCharsFromMemMgr | 3.0-master | 3.395 ms | 0.0392 ms | 0.0367 ms | 3.396 ms |  1.00 |    0.00 |\r\n| GetSpan_MemOfCharsFromMemMgr |   memslice | 3.357 ms | 0.0533 ms | 0.0499 ms | 3.348 ms |  0.99 |    0.02 |\r\n|                              |            |          |           |           |          |       |         |\r\n|      GetSpan_MemOfCharsEmpty | 3.0-master | 1.341 ms | 0.0174 ms | 0.0154 ms | 1.341 ms |  1.00 |    0.00 |\r\n|      GetSpan_MemOfCharsEmpty |   memslice | 1.340 ms | 0.0163 ms | 0.0153 ms | 1.344 ms |  1.00 |    0.02 |\r\n\r\nx64 codegen before:\r\n\r\n```asm\r\n; everything before 'int desiredStartIndex = ...;' omitted\r\nmov     eax,dword ptr [rsi+8]\r\nand     eax,7FFFFFFFh\r\nmov     edx,dword ptr [rsi+0Ch]\r\nmov     ecx,eax  ; this is unnecessary\r\nmov     r8d,edx\r\nadd     rcx,r8\r\nmov     r8d,r14d\r\ncmp     rcx,r8\r\nja      THROW_EXCEPTION\r\nmovsxd  rax,eax  ; this is unnecessary\r\nadd     rbp,rax\r\nmov     r14d,edx\r\n```\r\n\r\nx64 codegen after:\r\n\r\n```asm\r\n; everything before 'nuint desiredStartIndex = ...;' omitted\r\nmov     eax,dword ptr [rsi+8]\r\nand     eax,7FFFFFFFh\r\nmov     edx,dword ptr [rsi+0Ch]\r\nmov     ecx,edx\r\nadd     rcx,rax\r\nmov     r8d,r14d\r\ncmp     rcx,r8\r\nja      THROW_EXCEPTION\r\nadd     rbp,rax\r\nmov     r14d,edx\r\n```\r\n\r\nThese optimizations take advantage of the JIT optimizations committed in https://github.com/dotnet/coreclr/commit/d5f638a1cd52fc2733e769e716d5a3a1d61fc804. In particular, this takes advantage of the fact that a 32-bit `and` operation on x64 will clear the upper 32 bits of the destination register, meaning that after the `and eax, 7FFFFFFFh` instruction we can immediately use `rax` without incurring the cost of any additional extension from 32-bit to 64-bit.\r\n\r\nThe \"after\" codegen is also 6 bytes smaller than the \"before\" codegen.","Url":"https://github.com/dotnet/coreclr/pull/23750","RelatedDescription":"Open PR \"Improve performance of Memory<T>.Span property getter\" (#23750)"},{"Id":"429512525","IsPullRequest":false,"CreatedAt":"2019-04-04T22:39:02","Actor":"echesakovMSFT","Number":"23749","RawContent":null,"Title":"[Alpine.38.Arm64] Unable to load shared library 'System.Native' or one of its dependencies","State":"open","Body":"After https://github.com/dotnet/coreclr/issues/23621 had been fixed I re-ran testing in https://github.com/dotnet/coreclr/pull/23702 and there is another issue came up with running the tests on Alpine.38.Arm64\r\n```\r\n+ /root/helix/work/correlation/corerun /root/helix/work/correlation/xunit.console.dll baseservices.compilerservices.XUnitWrapper.dll -parallel collections -nocolor -noshadow -xml testResults.xml -notrait 'category=outerloop' -notrait 'category=failing'\r\n\r\nUnhandled Exception: System.DllNotFoundException: Unable to load shared library 'System.Native' or one of its dependencies. In order to help diagnose loading problems, consider setting the LD_DEBUG environment variable: Error loading shared library libSystem.Native: No such file or directory\r\n   at Interop.Sys.Stat(Byte& path, FileStatus& output)\r\n   at Interop.Sys.Stat(ReadOnlySpan`1 path, FileStatus& output)\r\n   at System.IO.FileSystem.FileExists(ReadOnlySpan`1 fullPath, Int32 fileType, ErrorInfo& errorInfo)\r\n   at System.IO.File.Exists(String path)\r\n   at Xunit.AssemblyHelper..ctor(String assemblyFileName, IMessageSink internalDiagnosticsMessageSink)\r\n   at Xunit.AssemblyHelper.SubscribeResolveForAssembly(Type typeInAssembly, IMessageSink internalDiagnosticsMessageSink)\r\n   at Xunit.ConsoleClient.Program.Main(String[] args)\r\nAborted (core dumped)\r\n```\r\n\r\nI am going to do initial investigation so assigning to myself\r\n\r\n/cc @janvorli @RussKeldorph ","Url":"https://github.com/dotnet/coreclr/issues/23749","RelatedDescription":"Open issue \"[Alpine.38.Arm64] Unable to load shared library 'System.Native' or one of its dependencies\" (#23749)"},{"Id":"429509752","IsPullRequest":true,"CreatedAt":"2019-04-04T22:28:15","Actor":"gregkalapos","Number":"23748","RawContent":null,"Title":"Fix broken links","State":"open","Body":"Just a minor thing.\r\n\r\n2 links in this post throw 404, I fixed those. \r\n\r\nOne is a cpp file called `sigparse.cpp` - which I guess should be `sigparser.cpp`. I think it'd be better to fix the file name. Let me know if you'd prefer to fix the filename instead of the link and I'll do it.","Url":"https://github.com/dotnet/coreclr/pull/23748","RelatedDescription":"Open PR \"Fix broken links\" (#23748)"},{"Id":"429509090","IsPullRequest":true,"CreatedAt":"2019-04-04T22:25:53","Actor":"luhenry","Number":"23747","RawContent":null,"Title":"Partially improve support for `--cpus` from Docker CLI","State":"open","Body":"This focuses on better supporting Docker CLI's parameter `--cpus`, which limits the amount of CPU time available to the container (ex: 1.8 means 180% CPU time, ie on 2 cores 90% for each core, on 4 cores 45% on each core, etc.) in the case of the ThreadPool and in the case of calculating the CPU limit.","Url":"https://github.com/dotnet/coreclr/pull/23747","RelatedDescription":"Open PR \"Partially improve support for `--cpus` from Docker CLI\" (#23747)"},{"Id":"429505452","IsPullRequest":true,"CreatedAt":"2019-04-04T22:13:03","Actor":"stephentoub","Number":"23746","RawContent":null,"Title":"Nullable: Array","State":"open","Body":"cc: @dotnet/nullablefc","Url":"https://github.com/dotnet/coreclr/pull/23746","RelatedDescription":"Open PR \"Nullable: Array\" (#23746)"},{"Id":"429504250","IsPullRequest":true,"CreatedAt":"2019-04-04T22:08:46","Actor":"davidwrighton","Number":"23745","RawContent":null,"Title":"Add crossgen test to verify file version is preserved","State":"open","Body":"This is a pri-0 test as messing this up led to several days of investigation in downstream repos.","Url":"https://github.com/dotnet/coreclr/pull/23745","RelatedDescription":"Open PR \"Add crossgen test to verify file version is preserved\" (#23745)"},{"Id":"429501609","IsPullRequest":true,"CreatedAt":"2019-04-04T21:59:51","Actor":"Anipik","Number":"23744","RawContent":null,"Title":"Nullable: Internal.IO(Namespace),  TraceLoggingEventHandleTable (Type)","State":"open","Body":"Adding null annotation for couple of Internal.IO (left in stephens PR) And System.Diagnostics.Eventing.\r\n\r\nKeeping it small as it is my first pr for annotations","Url":"https://github.com/dotnet/coreclr/pull/23744","RelatedDescription":"Open PR \"Nullable: Internal.IO(Namespace),  TraceLoggingEventHandleTable (Type)\" (#23744)"},{"Id":"429490806","IsPullRequest":true,"CreatedAt":"2019-04-04T21:27:17","Actor":"dotnet-bot","Number":"23742","RawContent":null,"Title":"Merge changes from TFS","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/23742","RelatedDescription":"Open PR \"Merge changes from TFS\" (#23742)"},{"Id":"429480328","IsPullRequest":false,"CreatedAt":"2019-04-04T20:58:44","Actor":"daniel-levin","Number":"23741","RawContent":null,"Title":"VS2017 does not work with CMake files, EventPipe directory config is broken","State":"open","Body":"Hi all,\r\n\r\nI am trying to generate the CMake cache with Visual Studio 2017. My CMakeSettings.json file looks like:\r\n\r\n```\r\n{\r\n  \"configurations\": [\r\n    {\r\n        \"name\": \"x64-Debug\",\r\n        \"generator\": \"Visual Studio 15 2017 Win64\",\r\n        \"configurationType\": \"Debug\",\r\n        \"inheritEnvironments\": [\r\n            \"msvc_x64_x64\"\r\n        ],\r\n        \"buildRoot\": \"${env.USERPROFILE}\\\\CMakeBuilds\\\\${workspaceHash}\\\\build\\\\${name}\",\r\n        \"installRoot\": \"${env.USERPROFILE}\\\\CMakeBuilds\\\\${workspaceHash}\\\\install\\\\${name}\",\r\n        \"cmakeCommandArgs\": \"\",\r\n        \"buildCommandArgs\": \"\",\r\n        \"ctestCommandArgs\": \"\",\r\n        \"variables\": [\r\n            {\r\n                \"name\": \"CLR_CMAKE_HOST_ARCH\",\r\n                \"value\": \"x64\"\r\n            }\r\n        ]\r\n    }\r\n  ]\r\n}\r\n\r\n```\r\n\r\nbut the following error is persistent:\r\n\r\n```\r\nCMake Error at src/vm/CMakeLists.txt:921 (add_subdirectory):\r\n  add_subdirectory given source\r\n  \"C:/Users/Daniel/CMakeBuilds/b4325264-04d4-463f-aff8-b12da732d655/build/x64-Debug/Eventing/eventpipe\"\r\n  which is not an existing directory.\t\tC:\\Users\\Daniel\\source\\repos\\coreclr\\src/vm/CMakeLists.txt\t921\r\n```\r\n\r\nThe `/build/$name/Eventing/eventpipe` directory is not being created. Please can someone help me find out where or how it should be created? If I modify the `src/vm/CMakeLists.txt:921` to create the directory (so the subdirectory failure does not occur) then it still does not work, reporting that `CMakeLists.txt` cannot be found in that directory.\r\n","Url":"https://github.com/dotnet/coreclr/issues/23741","RelatedDescription":"Open issue \"VS2017 does not work with CMake files, EventPipe directory config is broken\" (#23741)"},{"Id":"429477596","IsPullRequest":true,"CreatedAt":"2019-04-04T20:51:28","Actor":"sdmaclea","Number":"23740","RawContent":null,"Title":"Contextual reflection","State":"open","Body":"Add ContextualReflection APIs approved in dotnet/corefx#36236\r\nFix issue #22213\r\nFix  SetParentAssembly even when IsCollectible()\r\nAdd  ContextualReflection test","Url":"https://github.com/dotnet/coreclr/pull/23740","RelatedDescription":"Open PR \"Contextual reflection\" (#23740)"},{"Id":"429474735","IsPullRequest":true,"CreatedAt":"2019-04-04T20:43:52","Actor":"briansull","Number":"23739","RawContent":null,"Title":"Only allow structs whose storage can be held in a register to be CS candidates","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/23739","RelatedDescription":"Open PR \"Only allow structs whose storage can be held in a register to be CS candidates\" (#23739)"},{"Id":"429433747","IsPullRequest":true,"CreatedAt":"2019-04-04T20:19:56","Actor":"safern","Number":"23735","RawContent":null,"Title":"Pull master changes into NullableFeature","State":"closed","Body":"There where merge conflicts this time in Delegate as @danmosemsft anticipated due to it being moved into the shared partition. I fixed them under a separate commit so that it is review-able.\r\n\r\nLet's merge into master after this PR is merged to avoid fixing more conflicts like this and from talking with @joshfree he suggested that we could make preview4 cut and start exposing this annotations on the ref assemblies, have people try it out, and then have the compiler fix the initialization issue that would impact the perf and also remove the Nullable attributes from private/internal members in the ILLinker, that would put some pressure on them to fix it during next previews.","Url":"https://github.com/dotnet/coreclr/pull/23735","RelatedDescription":"Closed or merged PR \"Pull master changes into NullableFeature\" (#23735)"},{"Id":"429460248","IsPullRequest":true,"CreatedAt":"2019-04-04T20:06:36","Actor":"jkoritzinsky","Number":"23738","RawContent":null,"Title":"Disable marshalling delegates as _Delegate and enable marshalling delegates as IDispatch.","State":"open","Body":"As part of the transition to .NET Core, we dropped the concept of the mscorlib tlb interfaces. However, in the marshalling space we continued to imply that their usage was safe, particularly with delegates. In .NET Framework, it is possible to marshal a delegate as a COM object implementing the `_Delegate` interface provided by the `mscorlib.tlb` type library. Since we did not make many significant changes to the `System.Delegate` type in .NET Core, this behavior continued to work in .NET Core. However, when the `System.Delegate` type was moved to the shared partition in #23552, the change to the compiled type's surface was large enough to change how the dispid's were assigned, breaking the marshalling to the Framework `_Delegate` interface and resulting in bad runtime errors (crashes, incorrect return values depending on exactly how the interface pointer is generated).\r\n\r\nWe've decided that since the `_Delegate` COM interface is a .NET Framework type, that we are not going to try to add back support to marshalling to it. Instead, we are changing behavior as follows:\r\n\r\n- Using `[MarshalAs(UnmanagedType.Interface)]` on a delegate-typed field, parameter, or return value is illegal.\r\n- Using the default marshallling for delegates on parameters or return values in non-WinRT COM methods is illegal since it implies `[MarshalAs(UnmanagedType.Interface)]`.\r\n- Using `[MarshalAs(UnmanagedType.IDispatch)]` on a delegate-typed field, parameter or return value is now legal and is the suggested change for consumers. Additionally, these consumers will have to change their native code to take an `IDispatch` pointer and operate on the delegate's COM wrapper via the `IDispatch` interface instead of the `_Delegate` interface.\r\n\r\nFixes #23730.","Url":"https://github.com/dotnet/coreclr/pull/23738","RelatedDescription":"Open PR \"Disable marshalling delegates as _Delegate and enable marshalling delegates as IDispatch.\" (#23738)"},{"Id":"429441932","IsPullRequest":true,"CreatedAt":"2019-04-04T19:19:56","Actor":"EgorBo","Number":"23737","RawContent":null,"Title":"Move AssemblyName to shared","State":"open","Body":"I tried to reformat code in the second commit, let me know if I should roll it back (the first commit just moves few icalls to AssemblyName.CoreCLR.cs)\r\nI replaced fields with auto properties (the type doesn't support binary serialization)\r\n\r\nMain motivation is to implement https://github.com/mono/mono/blob/master/mcs/class/corlib/System.Reflection/AssemblyName.cs#L547-L550\r\n\r\n/cc: @marek-safar @jkotas ","Url":"https://github.com/dotnet/coreclr/pull/23737","RelatedDescription":"Open PR \"Move AssemblyName to shared\" (#23737)"},{"Id":"429386973","IsPullRequest":true,"CreatedAt":"2019-04-04T19:07:01","Actor":"echesakovMSFT","Number":"23729","RawContent":null,"Title":"Run on Ubuntu.1604.Arm32.Open in pull requests and scheduled builds","State":"closed","Body":"As of https://github.com/dotnet/core-eng/issues/5771#issuecomment-479695541  https://github.com/dotnet/core-eng/issues/5771 is closed - re-enabling back Linux/arm32 testing in pull requests\r\n\r\n/cc @ulisesh ","Url":"https://github.com/dotnet/coreclr/pull/23729","RelatedDescription":"Closed or merged PR \"Run on Ubuntu.1604.Arm32.Open in pull requests and scheduled builds\" (#23729)"},{"Id":"429425053","IsPullRequest":true,"CreatedAt":"2019-04-04T19:05:35","Actor":"echesakovMSFT","Number":"23733","RawContent":null,"Title":"Use BYOC pools in finalize-publish.yml","State":"closed","Body":"See https://github.com/dotnet/coreclr/pull/23501#issuecomment-479993414 \r\n\r\n@sdmaclea Since you setup a pool for `Finalize_Publish_Versions` job in https://github.com/dotnet/coreclr/commit/51d033897eb5663ea8bab53704406d9fd82af98f - is there any reason why this is `Hosted VS2017`? Should we use BYOC internal pools instead?","Url":"https://github.com/dotnet/coreclr/pull/23733","RelatedDescription":"Closed or merged PR \"Use BYOC pools in finalize-publish.yml\" (#23733)"},{"Id":"429435541","IsPullRequest":false,"CreatedAt":"2019-04-04T19:03:25","Actor":"sywhang","Number":"23736","RawContent":null,"Title":"WorkingSet runtime counter uses reflection","State":"open","Body":"Currently, the working set runtime counter is using `Environment.WorkingSet` which internally uses reflection of System.Diagnostics.Process.dll to get the working set size. This may affect perf so it would be better to do what other runtime counters are doing to avoid reflection (copying over relevant code to `RuntimeEventSourceHelper` class). Not a high priority so leaving it out of 3.0 scope for now. ","Url":"https://github.com/dotnet/coreclr/issues/23736","RelatedDescription":"Open issue \"WorkingSet runtime counter uses reflection\" (#23736)"},{"Id":"429428666","IsPullRequest":true,"CreatedAt":"2019-04-04T18:46:32","Actor":"stephentoub","Number":"23734","RawContent":null,"Title":"Nullable: Span and friends","State":"open","Body":"cc: @dotnet/nullablefc ","Url":"https://github.com/dotnet/coreclr/pull/23734","RelatedDescription":"Open PR \"Nullable: Span and friends\" (#23734)"},{"Id":"429416022","IsPullRequest":true,"CreatedAt":"2019-04-04T18:14:23","Actor":"stephentoub","Number":"23732","RawContent":null,"Title":"Nullable: System.IO","State":"open","Body":"Everything exception StreamReader, StreamWriter, BinaryReader, BinaryWriter, which are waiting for some changes in master to propagate over to the feature branch.\r\n\r\ncc: @dotnet/nullablefc ","Url":"https://github.com/dotnet/coreclr/pull/23732","RelatedDescription":"Open PR \"Nullable: System.IO\" (#23732)"},{"Id":"429414394","IsPullRequest":true,"CreatedAt":"2019-04-04T18:10:33","Actor":"jkoritzinsky","Number":"23731","RawContent":null,"Title":"Match PtrToStringUTF8 to the other PtrToString* families.","State":"open","Body":"Fixes #23723.\r\n\r\nI decided to keep `PtrToStringUTF8` throwing an `ArgumentOutOfRangeException` so that we were consistent there with prior behavior, and since an `ArgumentOutOfRangeException` inherits from `ArgumentException` it still fulfills the contract for the wrapping `PtrToStringAuto`.","Url":"https://github.com/dotnet/coreclr/pull/23731","RelatedDescription":"Open PR \"Match PtrToStringUTF8 to the other PtrToString* families.\" (#23731)"},{"Id":"429409087","IsPullRequest":false,"CreatedAt":"2019-04-04T17:56:43","Actor":"jkoritzinsky","Number":"23730","RawContent":null,"Title":"PInvoke Delegate AsInterface tests failing on master","State":"open","Body":"Looks like the PInvoke tests for marshalling a delegate as an interface just started failing on master as of build 20190404.73.\r\n\r\nSee https://mc.dot.net/#/product/netcore/30/source/official~2Fdotnet~2Fcoreclr~2Frefs~2Fheads~2Fmaster/type/test~2Ffunctional~2Fcli~2F/build/20190404.73/workItem/Interop.PInvoke/analysis/xunit/Interop_PInvoke._Delegate_MarshalDelegateAsField_AsInterface_AsInterfaceTest_AsInterfaceTest_~2F_Delegate_MarshalDelegateAsField_AsInterface_AsInterfaceTest_AsInterfaceTest_cmd\r\n\r\nI'll take a look.","Url":"https://github.com/dotnet/coreclr/issues/23730","RelatedDescription":"Open issue \"PInvoke Delegate AsInterface tests failing on master\" (#23730)"},{"Id":"429563320","IsPullRequest":false,"CreatedAt":"2017-07-07T15:38:55","Actor":"RehanSaeed","Number":"23757","RawContent":null,"Title":"Dynamically Loading .NET Core Assemblies","State":"open","Body":"I've published an ASP.NET Core project to a folder and I'm trying to dynamically load the assembly containing the ASP.NET Core `Startup` class. I then want to instantiate the `Startup` class and hand it over to the `TestHost` API, so I can start the site in memory. I've written the following code:\r\n\r\n```c#\r\n    var directoryPath = @\"C:\\Dlls\";\r\n    var assemblyFilePath = Path.Combine(directoryPath, \"Foo.dll\");\r\n    var assemblyName = AssemblyLoadContext.GetAssemblyName(assemblyFilePath);\r\n    var assembly = new AssemblyLoader(directoryPath).LoadFromAssemblyName(assemblyName);\r\n    var startupType = assembly.ExportedTypes\r\n        .FirstOrDefault(x => string.Equals(x.Name, \"Startup\"));\r\n    var webHostBuilder = new WebHostBuilder()\r\n        .UseStartup(startupType)\r\n        .UseUrls(new string[] { \"http://localhost\" });\r\n    using (var testServer = new TestServer(webHostBuilder))\r\n    {\r\n        var response = testServer.CreateClient().GetAsync(\"/\");\r\n    }\r\n\r\n    public class AssemblyLoader : AssemblyLoadContext\r\n    {\r\n        private readonly string directoryPath;\r\n\r\n        public AssemblyLoader(string directoryPath) =>\r\n            this.directoryPath = directoryPath;\r\n\r\n        protected override Assembly Load(AssemblyName assemblyName)\r\n        {\r\n            var dependencyContext = DependencyContext.Default;\r\n            var compilationLibraries = dependencyContext\r\n                .CompileLibraries\r\n                .Where(x => x.Name.Contains(assemblyName.Name))\r\n                .ToList();\r\n            if (compilationLibraries.Count > 0)\r\n            {\r\n                return Assembly.Load(new AssemblyName(compilationLibraries.First().Name));\r\n            }\r\n            else\r\n            {\r\n                var file = new FileInfo($\"{this.directoryPath}{Path.DirectorySeparatorChar}{assemblyName.Name}.dll\");\r\n                if (File.Exists(file.FullName))\r\n                {\r\n                    var asemblyLoader = new AssemblyLoader(file.DirectoryName);\r\n                    return asemblyLoader.LoadFromAssemblyPath(file.FullName);\r\n                }\r\n            }\r\n\r\n            return Assembly.Load(assemblyName);\r\n        }\r\n    }\r\n```\r\n\r\nThis works when I publish the app as a self contained application, however, I'd like to avoid dealing with runtime identifiers (RID's) if possible. When I publish normally the code throws a `TypeLoadException` when `assembly.ExportedTypes` is called. The full stack trace:\r\n\r\n```\r\nSystem.TypeLoadException occurred\r\n  HResult=0x80131522\r\n  Message=Method 'ConfigureServices' in type 'Foo.Startup' from assembly 'Foo, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' does not have an implementation.\r\n  Source=<Cannot evaluate the exceptionsource>\r\n  StackTrace:    at\r\n   System.Reflection.RuntimeAssembly.GetExportedTypes(RuntimeAssembly assembly, ObjectHandleOnStack retTypes)    at\r\n    System.Reflection.RuntimeAssembly.GetExportedTypes()\r\n```\r\n\r\nHow can I dynamically load the .NET Core runtime in the `AssemblyLoader` class? [Related StackOverflow question](https://stackoverflow.com/questions/44545544/dynamically-loading-an-asp-net-core-assembly).\r\n\r\n[EDIT] @karelz changes: formatting code with c# syntax (\\`\\`\\`c#) and stack trace in \\`\\`\\` block.","Url":"https://github.com/dotnet/coreclr/issues/23757","RelatedDescription":"Open issue \"Dynamically Loading .NET Core Assemblies\" (#23757)"}],"ResultType":"GitHubIssue"},"CLI-Issues":{"Issues":[{"Id":"429547337","IsPullRequest":true,"CreatedAt":"2019-04-05T02:31:57","Actor":"dotnet-maestro[bot]","Number":"11075","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190404.3\r\n- **Date Produced**: 4/5/2019 1:27 AM\r\n- **Commit**: 4b990161372b4d720377b7ab604393fe33613f2a\r\n- **Branch**: refs/heads/release/3.0.1xx\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview3.19204.3\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11075","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/sdk\" (#11075)"},{"Id":"429241180","IsPullRequest":true,"CreatedAt":"2019-04-05T00:01:34","Actor":"dotnet-maestro[bot]","Number":"11071","RawContent":null,"Title":"[master] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190403.1\r\n- **Date Produced**: 4/3/2019 4:41 PM\r\n- **Commit**: 82cca8869ca50c3bb08358e93c9d2ff40a3b6cdd\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview4.19203.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11071","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/sdk\" (#11071)"},{"Id":"428746032","IsPullRequest":true,"CreatedAt":"2019-04-04T23:34:35","Actor":"dotnet-maestro[bot]","Number":"11061","RawContent":null,"Title":"[master] Update dependencies from dotnet/clicommandlineparser","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/cliCommandLineParser\r\n- **Build**: 20190402.1\r\n- **Date Produced**: 4/2/2019 12:19 PM\r\n- **Commit**: 49817a7df8672436d9d23b813fdd5268d6019157\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Cli.CommandLine** -> 1.0.0-preview.19202.1\r\n\r\n## From https://github.com/dotnet/cliCommandLineParser\r\n- **Build**: 20190403.1\r\n- **Date Produced**: 4/3/2019 12:16 PM\r\n- **Commit**: 8368a94e1efbeb83c04e1ac79be88b8e5bffb7ca\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Cli.CommandLine** -> 1.0.0-preview.19203.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11061","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/clicommandlineparser\" (#11061)"},{"Id":"428188617","IsPullRequest":true,"CreatedAt":"2019-04-04T23:32:05","Actor":"dotnet-maestro[bot]","Number":"11052","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190401.12\r\n- **Date Produced**: 4/2/2019 1:18 AM\r\n- **Commit**: 505e38906e1ee2d032c41bb297de0958307db946\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19201.12\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190402.13\r\n- **Date Produced**: 4/3/2019 12:44 AM\r\n- **Commit**: 764f362c8e92e41905fe5f6c782ab9980c86c909\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19202.13\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190403.10\r\n- **Date Produced**: 4/4/2019 1:43 AM\r\n- **Commit**: 811fda44a88dcfe3e42a17bb34467f5764836c65\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19203.10\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11052","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#11052)"},{"Id":"429522206","IsPullRequest":true,"CreatedAt":"2019-04-04T23:17:03","Actor":"wli3","Number":"11074","RawContent":null,"Title":"Move to system.text.json for rest of CLI","State":"open","Body":"The only behavior change I can find is the trailing comma. Due to corefx's change will not be in time for preview 4. However RuntimeConfig is a file generate by SDK. I think this should be ok. But I need you opinion","Url":"https://github.com/dotnet/cli/pull/11074","RelatedDescription":"Open PR \"Move to system.text.json for rest of CLI\" (#11074)"},{"Id":"429088431","IsPullRequest":true,"CreatedAt":"2019-04-04T21:01:44","Actor":"peterhuene","Number":"11070","RawContent":null,"Title":"Make sure that an empty argument is preserved.","State":"closed","Body":"These changes fix issue #8892.\r\n\r\nThe net effect is that when an empty argument is detected, a pair of double quotes will be emitted.\r\n\r\nSee #10909 for the original PR.","Url":"https://github.com/dotnet/cli/pull/11070","RelatedDescription":"Closed or merged PR \"Make sure that an empty argument is preserved.\" (#11070)"},{"Id":"429477557","IsPullRequest":false,"CreatedAt":"2019-04-04T20:51:22","Actor":"kavitachana","Number":"11073","RawContent":null,"Title":"global nuget.config not being used on run","State":"open","Body":"## Steps to reproduce\r\nI created a tool path for Jenkins to use ( /opt/jenkins/tools/com.cloudbees.jenkins.plugins.customtools.CustomTool/DotNet_2.1.403/xdgDataHome) and set the environment variable XDG_DATA_HOME to that tool path.\r\n\r\n## Expected  behavior\r\nWhen I run restores without a Nuget.config in the project or workspace, I expect it to use the global nuget.config I created in xdgDataHome which contains the location I want the dependencies pulled.\r\n\r\n\r\n## Actual behavior\r\nOn run, I get multiple failures, and it does not use the nuget.config I created. Instead it tries to pull dependencies from the default location (https://api.nuget.org/v3/index.json ).\r\n\r\nShouldn't this work with a dotnet cli on a linux server?\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11073","RelatedDescription":"Open issue \"global nuget.config not being used on run\" (#11073)"},{"Id":"429080127","IsPullRequest":true,"CreatedAt":"2019-04-04T19:47:36","Actor":"wli3","Number":"11069","RawContent":null,"Title":"Create sentinel file with retry","State":"closed","Body":"Please review by commit\r\n\r\ncore-sdk start to fail occasionally in test during creating sentinel file. https://dev.azure.com/dnceng/public/_build/results?buildId=142547&view=ms.vss-test-web.build-test-results-tab\r\n\r\nIt starts to show up due to https://github.com/dotnet/cli/pull/10729 in which we stop honoring DOTNET_SKIP_FIRST_TIME_EXPERIENCE. That means CLI will always run first run experience(which no longer has expand nuget cache) and create first run sentinel. A race condition during creating first run sentinel start to happen during test. Although it is rare in real usage, I think we should still add retry for creating sentinel file to solve the problem.\r\n","Url":"https://github.com/dotnet/cli/pull/11069","RelatedDescription":"Closed or merged PR \"Create sentinel file with retry\" (#11069)"},{"Id":"429432867","IsPullRequest":false,"CreatedAt":"2019-04-04T19:37:03","Actor":"diedona","Number":"11072","RawContent":null,"Title":"Visual Studio 2017 Build error (SDK 2.2)","State":"closed","Body":"## Steps to reproduce\r\nUse Visual Studio 2017 (15.9.11) **with only the latest asp.net core SDK** (https://dotnet.microsoft.com/download/thank-you/dotnet-sdk-2.2.202-windows-x64-installer)\r\n\r\n## Expected  behavior\r\nCreate and compile projects with VS\r\n\r\n## Actual behavior\r\nYou can only create the projects, as it will ask you what to target:\r\n![erro-01](https://user-images.githubusercontent.com/3251917/55580097-28504600-56f0-11e9-8a65-1c2cb2b5f051.png)\r\n\r\nHowever, when you try to build it:\r\n![erro-02](https://user-images.githubusercontent.com/3251917/55580159-46b64180-56f0-11e9-98ba-506482463ddb.PNG)\r\n\r\nNETSDK1045\tThe current .NET SDK does not support targeting .NET Core 2.2.  Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.\r\n\r\nHowever i can build it through the CLI:\r\n![erro-03](https://user-images.githubusercontent.com/3251917/55580294-a6ace800-56f0-11e9-8bb5-71da8f83f7ca.png)\r\n\r\nAnd i can see my dotnet version pointing to 2.2.202:\r\n![erro-04](https://user-images.githubusercontent.com/3251917/55580480-086d5200-56f1-11e9-8db0-71ea8ace0478.png)\r\n\r\n## Workaround\r\nInstalling dotnet-sdk-2.2.105-win-x64.exe along with 2.2.202 solves the issue and i'm able to compile it in visual studio.\r\n\r\n## Environment data\r\nSDK do .NET Core (refletindo qualquer global.json):\r\n Version:   2.2.202\r\n Commit:    8a7ff6789d\r\n\r\nAmbiente de tempo de execuçao:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.202\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.3\r\n  Commit:  6b8ad509b6\r\n\r\n.NET Core SDKs installed:\r\n  1.0.0 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.100 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.101 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.102 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.103 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.104 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.200 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.400 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.401 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.402 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.503 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.504 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.505 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.3-servicing-26724-03 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11072","RelatedDescription":"Closed issue \"Visual Studio 2017 Build error (SDK 2.2)\" (#11072)"},{"Id":"429018493","IsPullRequest":true,"CreatedAt":"2019-04-04T19:10:54","Actor":"wli3","Number":"11067","RawContent":null,"Title":"Merge release/3.0.1xx to master 040319","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/11067","RelatedDescription":"Closed or merged PR \"Merge release/3.0.1xx to master 040319\" (#11067)"},{"Id":"429069389","IsPullRequest":false,"CreatedAt":"2019-04-04T03:43:29","Actor":"wli3","Number":"11068","RawContent":null,"Title":"Clean up setting DOTNET_SKIP_FIRST_TIME_EXPERIENCE in script","State":"open","Body":"after https://github.com/dotnet/cli/issues/10364 this flag is no longer honored. We should remove it in our build script across CLI, SDK, toolset, core-sdk\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11068","RelatedDescription":"Open issue \"Clean up setting DOTNET_SKIP_FIRST_TIME_EXPERIENCE in script\" (#11068)"},{"Id":"428838265","IsPullRequest":true,"CreatedAt":"2019-04-03T19:05:34","Actor":"nguerrera","Number":"11064","RawContent":null,"Title":"Insert roslyn for 16.1 P1 (2.1.7xx)","State":"closed","Body":"\r\n","Url":"https://github.com/dotnet/cli/pull/11064","RelatedDescription":"Closed or merged PR \"Insert roslyn for 16.1 P1 (2.1.7xx)\" (#11064)"},{"Id":"428888702","IsPullRequest":false,"CreatedAt":"2019-04-03T18:36:06","Actor":"michaelveloz","Number":"11066","RawContent":null,"Title":"Dotnet not rolling forward","State":"closed","Body":"## Steps to reproduce\r\nI created a simple app that targeted .net core 2.1.0 using Visual Studio under windows and used \"publish\" to produce a framework dependent app, which I then copied over to a unix machine which has .net core 2.1.105 installed.\r\n\r\n## Expected  behavior\r\nI expected dotnet to run my 2.1.0-targeted app against 2.1.105 as per this doc: https://docs.microsoft.com/en-us/dotnet/core/versions/selection which describes apps rolling forward\r\n\r\n## Actual behavior\r\nError message \"Microsoft.NETCore.App version 2.1.0 was not found... check depdenceies.. or install framework 2.1.0\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n.NET Command Line Tools (2.1.105)\r\n\r\nProduct Information:\r\n Version:            2.1.105\r\n Commit SHA-1 hash:  141cc8d976\r\n\r\nRuntime Environment:\r\n OS Name:     linuxmint\r\n OS Version:  19\r\n OS Platform: Linux\r\n RID:         linuxmint.19-x64\r\n Base Path:   /usr/share/dotnet/sdk/2.1.105/\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.7\r\n  Build    : 2d61d0b043915bc948ebf98836fefe9ba942be11\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11066","RelatedDescription":"Closed issue \"Dotnet not rolling forward\" (#11066)"},{"Id":"428847415","IsPullRequest":true,"CreatedAt":"2019-04-03T18:29:09","Actor":"nguerrera","Number":"11065","RawContent":null,"Title":"Insert roslyn for 16.1 P1 (2.2.3xx)","State":"closed","Body":"","Url":"https://github.com/dotnet/cli/pull/11065","RelatedDescription":"Closed or merged PR \"Insert roslyn for 16.1 P1 (2.2.3xx)\" (#11065)"},{"Id":"428657539","IsPullRequest":false,"CreatedAt":"2019-04-03T18:26:03","Actor":"Meai","Number":"11059","RawContent":null,"Title":"Comments in .runtimeconfig.dev.json dont seem to work","State":"closed","Body":"## Steps to reproduce\r\nComments in the json file make it not find assemblies in the `/home/pc/.nuget/packages/` folder.\r\nBut Visual Studio 2019 community edition does not complain about the comments in the .json file. So you can decide who here made the mistake and give somebody else this issue but at least by default print out the used probing paths if an assembly wasn't found, in my opinion that is the least that the cli should be doing. Because my suspicion is that whatever JSON parser you are using is erroring out internally and then you just use the default nuget folders and then it wont find everything it needs to run - silently...\r\n\r\n```\r\n{\r\n  \"runtimeOptions\": {\r\n    \"additionalProbingPaths\": [\r\n      //\"/home/pc/workarea/software/dotnet/sdk/NuGetFallbackFolder\",\r\n      \"/home/pc/.nuget/packages\"\r\n    ]\r\n  }\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.105\r\n Commit:    7cecb35b92\r\n\r\nRuntime Environment:\r\n OS Name:     centos\r\n OS Version:  7\r\n OS Platform: Linux\r\n RID:         centos.7-x64\r\n Base Path:   /home/pc/workarea/software/dotnet/sdk/2.2.105/\r\n\r\nHost (useful for support):\r\n  Version: 2.2.3\r\n  Commit:  6b8ad509b6\r\n\r\n.NET Core SDKs installed:\r\n  2.2.105 [/home/pc/workarea/software/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.2.3 [/home/pc/workarea/software/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.3 [/home/pc/workarea/software/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [/home/pc/workarea/software/dotnet/shared/Microsoft.NETCore.App]\r\n\r\n\r\n\r\n\r\n```\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11059","RelatedDescription":"Closed issue \"Comments in .runtimeconfig.dev.json dont seem to work\" (#11059)"},{"Id":"428818901","IsPullRequest":true,"CreatedAt":"2019-04-03T16:22:22","Actor":"rainersigwald","Number":"11063","RawContent":null,"Title":"MSBuild 16.1.27","State":"closed","Body":"This is the MSBuild version that's currently inserted in the 16.1 preview 1 branch.\r\n","Url":"https://github.com/dotnet/cli/pull/11063","RelatedDescription":"Closed or merged PR \"MSBuild 16.1.27\" (#11063)"},{"Id":"428816495","IsPullRequest":true,"CreatedAt":"2019-04-03T15:54:35","Actor":"rainersigwald","Number":"11062","RawContent":null,"Title":"Msbuild 16.1.27 (2.1.7xx)","State":"closed","Body":"This is the MSBuild version that's currently inserted in the 16.1 preview 1 branch.","Url":"https://github.com/dotnet/cli/pull/11062","RelatedDescription":"Closed or merged PR \"Msbuild 16.1.27 (2.1.7xx)\" (#11062)"},{"Id":"428682986","IsPullRequest":true,"CreatedAt":"2019-04-03T10:15:09","Actor":"singhsarab","Number":"11060","RawContent":null,"Title":"Converging dotnet test and dotnet vstest","State":"open","Body":"Fixes: https://github.com/Microsoft/vstest/issues/1453\r\n\r\n### Description\r\nAdd the ability inside the dotnet test verb to honor dll/exe as input just like dotnet vstest verb.\r\n\r\nRaising it against 2.2.2xx for now.\r\nWill cherry-pick to 2.2.3xx and 3.0.1xx if advised.\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11060","RelatedDescription":"Open PR \"Converging dotnet test and dotnet vstest\" (#11060)"},{"Id":"428388246","IsPullRequest":false,"CreatedAt":"2019-04-03T03:53:28","Actor":"dylank","Number":"11055","RawContent":null,"Title":"dotnet restore --interactive: 401 Unauthorized on Windows with Azure DevOps feed","State":"closed","Body":"## Steps to reproduce\r\n\r\ndotnet restore always fails on Windows when connecting to a private feed hosted on ADO.\r\n\r\n```\r\n>dotnet restore --interactive\r\n  Restoring packages for ....csproj...\r\n  Restoring packages for ...csproj...\r\nC:\\Program Files\\dotnet\\sdk\\2.2.104\\NuGet.targets(114,5): error : Unable to load the service index for source https://pkgs.dev.azure.com/microsoft/_packaging/something/nuget/v3/index.json. [....sln]\r\nC:\\Program Files\\dotnet\\sdk\\2.2.104\\NuGet.targets(114,5): error :   Response status code does not indicate success: 401 (Unauthorized). [....sln]\r\n```\r\n\r\n## Expected  behavior\r\nRunning `dotnet restore --interactive` should prompt for code auth, like it does on macOS. Alternatively, running `dotnet restore` should behave like `nuget restore` does, and prompt for credentials allowing you to enter a PAT.\r\n\r\n## Actual behavior\r\nOn Windows 10, running `dotnet restore --interactive` or `dotnet restore` will always fail when connecting to a private feed on ADO.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.104\r\n Commit:    73f036d4ac\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.104\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.2\r\n  Commit:  a4fd7b2c84\r\n\r\n.NET Core SDKs installed:\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.402 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.503 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.102 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.104 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11055","RelatedDescription":"Closed issue \"dotnet restore --interactive: 401 Unauthorized on Windows with Azure DevOps feed\" (#11055)"},{"Id":"428518835","IsPullRequest":false,"CreatedAt":"2019-04-03T01:28:07","Actor":"flcdrg","Number":"11058","RawContent":null,"Title":"dotnet-install.ps1 installs locally even when same version is already installed globally","State":"open","Body":"## Steps to reproduce\r\n\r\n1. On a machine that already has 2.2.101 SDK installed\r\n2. `.\\dotnet-install.ps1 -Version 2.2.101`\r\n\r\n## Expected behavior\r\n\r\nDo nothing. \r\n\r\nMaybe provide a `-Force` parameter so that only when that is given, do you still install the version\r\n\r\n## Actual behavior\r\n\r\nVersion is installed into `c:\\users\\USERNAME\\AppData\\Local\\Microsoft\\dotnet`, even if it was already installed in `C:\\Program Files\\dotnet\\sdk`\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.101\r\n Commit:    236713b0b7\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  6.3.9600\r\n OS Platform: Windows\r\n RID:         win81-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.101\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  1.0.0-preview2-003156 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.200 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.302 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.401 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.101 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11058","RelatedDescription":"Open issue \"dotnet-install.ps1 installs locally even when same version is already installed globally\" (#11058)"},{"Id":"428417045","IsPullRequest":false,"CreatedAt":"2019-04-02T22:51:53","Actor":"richlander","Number":"11056","RawContent":null,"Title":"dotnet build doesn't work when filtered to a supported framework for current SDK","State":"closed","Body":"I am wanting to build a project with the .NET Core 2.2 SDK. The project targets .NET Core 3.0 and 2.2. It should work, but instead, it makes me sad.\r\n\r\n```console\r\nC:\\git\\testapps\\cpumath>type cpumath.csproj\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFrameworks>netcoreapp3.0;net472;netcoreapp2.2</TargetFrameworks>\r\n    <RuntimeIdentifiers>win-x64;linux-x64</RuntimeIdentifiers>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.ML.CpuMath\" Version=\"0.11.0\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\nC:\\git\\testapps\\cpumath>dotnet build -f netcoreapp2.2\r\nMicrosoft (R) Build Engine version 15.9.20+g88f5fadfbe for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\nC:\\Program Files\\dotnet\\sdk\\2.2.105\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.TargetFrameworkInference.targets(137,5): error NETSDK1045: The current .NET SDK does not support targeting .NET Core 3.0.  Either target .NET Core 2.2 or lower, or use a version of the .NET SDK that supports .NET Core 3.0. [C:\\git\\testapps\\cpumath\\cpumath.csproj]\r\n\r\nC:\\git\\testapps\\cpumath>dotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.105\r\n Commit:    7cecb35b92\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.105\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview4-27529-09\r\n  Commit:  0a688d1b7e\r\n```","Url":"https://github.com/dotnet/cli/issues/11056","RelatedDescription":"Closed issue \"dotnet build doesn't work when filtered to a supported framework for current SDK\" (#11056)"},{"Id":"428419314","IsPullRequest":false,"CreatedAt":"2019-04-02T20:09:09","Actor":"richlander","Number":"11057","RawContent":null,"Title":"File in use problems","State":"open","Body":"I am using .NET Core and in a short timespan, I see the following two errors. They are intermittent (build again and the error goes away). I am using VS Code at the same time (if that matters). I have never seen this before. Any clues what might be going on? These are serious issues if at all pervasive.\r\n\r\n```console\r\nC:\\git\\testapps\\cpumath>dotnet build\r\nMicrosoft (R) Build Engine version 16.1.46-preview+ge12aa7ba78 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 971.7 ms for C:\\git\\testapps\\cpumath\\cpumath.csproj.\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview4-011022\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.RuntimeIdentifierInference.targets(151,5): message NETSDK1057: You are using a preview version of .NET Core. See: https://aka.ms/dotnet-core-preview [C:\\git\\testapps\\cpumath\\cpumath.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview4-011022\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.GenerateAssemblyInfo.targets(133,5): error MSB3713: The file \"obj\\Debug\\netcoreapp3.0\\cpumath.AssemblyInfo.cs\" could not be created. The process cannot access the file 'C:\\git\\testapps\\cpumath\\obj\\Debug\\netcoreapp3.0\\cpumath.AssemblyInfo.cs' because it is being used by another process. [C:\\git\\testapps\\cpumath\\cpumath.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview4-011022\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.RuntimeIdentifierInference.targets(151,5): message NETSDK1057: You are using a preview version of .NET Core. See: https://aka.ms/dotnet-core-preview [C:\\git\\testapps\\cpumath\\cpumath.csproj]\r\n  cpumath -> C:\\git\\testapps\\cpumath\\bin\\Debug\\net472\\cpumath.exe\r\n\r\nBuild FAILED.\r\n\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview4-011022\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.GenerateAssemblyInfo.targets(133,5): error MSB3713: The file \"obj\\Debug\\netcoreapp3.0\\cpumath.AssemblyInfo.cs\" could not be created. The process cannot access the file 'C:\\git\\testapps\\cpumath\\obj\\Debug\\netcoreapp3.0\\cpumath.AssemblyInfo.cs' because it is being used by another process. [C:\\git\\testapps\\cpumath\\cpumath.csproj]\r\n    0 Warning(s)\r\n    1 Error(s)\r\n\r\nTime Elapsed 00:00:02.25\r\n```\r\n\r\nAnd then:\r\n\r\n```console\r\nC:\\git\\testapps\\cpumath>dotnet build\r\nMicrosoft (R) Build Engine version 15.9.20+g88f5fadfbe for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restoring packages for C:\\git\\testapps\\cpumath\\cpumath.csproj...\r\n  Generating MSBuild file C:\\git\\testapps\\cpumath\\obj\\cpumath.csproj.nuget.g.props.\r\n  Generating MSBuild file C:\\git\\testapps\\cpumath\\obj\\cpumath.csproj.nuget.g.targets.\r\n  Restore completed in 345.7 ms for C:\\git\\testapps\\cpumath\\cpumath.csproj.\r\nC:\\Program Files\\dotnet\\sdk\\2.2.105\\Microsoft.Common.CurrentVersion.targets(2110,5): warning MSB3101: Could not write state file \"obj\\Debug\\netcoreapp2.2\\cpumath.csprojAssemblyReference.cache\". The process cannot access the file 'C:\\git\\testapps\\cpumath\\obj\\Debug\\netcoreapp2.2\\cpumath.csprojAssemblyReference.cache' because it is being used by another process. [C:\\git\\testapps\\cpumath\\cpumath.csproj]\r\n  cpumath -> C:\\git\\testapps\\cpumath\\bin\\Debug\\netcoreapp2.2\\cpumath.dll\r\n\r\nBuild succeeded.\r\n\r\nC:\\Program Files\\dotnet\\sdk\\2.2.105\\Microsoft.Common.CurrentVersion.targets(2110,5): warning MSB3101: Could not write state file \"obj\\Debug\\netcoreapp2.2\\cpumath.csprojAssemblyReference.cache\". The process cannot access the file 'C:\\git\\testapps\\cpumath\\obj\\Debug\\netcoreapp2.2\\cpumath.csprojAssemblyReference.cache' because it is being used by another process. [C:\\git\\testapps\\cpumath\\cpumath.csproj]\r\n    1 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:00:04.33\r\n```\r\n","Url":"https://github.com/dotnet/cli/issues/11057","RelatedDescription":"Open issue \"File in use problems\" (#11057)"},{"Id":"428383804","IsPullRequest":true,"CreatedAt":"2019-04-02T18:44:46","Actor":"nugetlurker","Number":"11054","RawContent":null,"Title":"Insert NuGet Build 5.1.0-rtm.5921 into cli","State":"open","Body":"Insert NuGet Build 5.1.0-rtm.5921 into cli release/2.1.7xx branch","Url":"https://github.com/dotnet/cli/pull/11054","RelatedDescription":"Open PR \"Insert NuGet Build 5.1.0-rtm.5921 into cli\" (#11054)"},{"Id":"428383784","IsPullRequest":true,"CreatedAt":"2019-04-02T18:44:43","Actor":"nugetlurker","Number":"11053","RawContent":null,"Title":"Insert NuGet Build 5.1.0-rtm.5921 into cli","State":"open","Body":"Insert NuGet Build 5.1.0-rtm.5921 into cli release/2.2.3xx branch","Url":"https://github.com/dotnet/cli/pull/11053","RelatedDescription":"Open PR \"Insert NuGet Build 5.1.0-rtm.5921 into cli\" (#11053)"},{"Id":"427278676","IsPullRequest":true,"CreatedAt":"2019-04-02T12:51:04","Actor":"dotnet-maestro[bot]","Number":"11047","RawContent":null,"Title":"[master] Update dependencies from dotnet/clicommandlineparser","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/cliCommandLineParser\r\n- **Build**: 20190329.1\r\n- **Date Produced**: 3/29/2019 12:17 PM\r\n- **Commit**: f626e17f5984c88a164b4683bdb6c675754c07f6\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Cli.CommandLine** -> 1.0.0-preview.19179.1\r\n\r\n## From https://github.com/dotnet/cliCommandLineParser\r\n- **Build**: 20190330.1\r\n- **Date Produced**: 3/30/2019 12:18 PM\r\n- **Commit**: 7afd8ced79c18b71b15ba2b24937a064e56c2459\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Cli.CommandLine** -> 1.0.0-preview.19180.1\r\n\r\n## From https://github.com/dotnet/cliCommandLineParser\r\n- **Build**: 20190330.1\r\n- **Date Produced**: 3/30/2019 12:18 PM\r\n- **Commit**: 7afd8ced79c18b71b15ba2b24937a064e56c2459\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Cli.CommandLine** -> 1.0.0-preview.19180.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11047","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/clicommandlineparser\" (#11047)"},{"Id":"427389125","IsPullRequest":true,"CreatedAt":"2019-04-02T12:06:28","Actor":"dotnet-maestro[bot]","Number":"11048","RawContent":null,"Title":"[master] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190330.1\r\n- **Date Produced**: 3/30/2019 3:25 PM\r\n- **Commit**: 4d6c1faa02f78347dc65a2416fadec7ecef8ea7d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview4.19180.1\r\n\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190330.1\r\n- **Date Produced**: 3/30/2019 3:25 PM\r\n- **Commit**: 4d6c1faa02f78347dc65a2416fadec7ecef8ea7d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview4.19180.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11048","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/sdk\" (#11048)"},{"Id":"427275611","IsPullRequest":true,"CreatedAt":"2019-04-02T05:50:47","Actor":"dotnet-maestro[bot]","Number":"11046","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190329.2\r\n- **Date Produced**: 3/29/2019 1:07 PM\r\n- **Commit**: 31abd61b43b115a6af83c92ce35ed4e8efd01dfd\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19179.2\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190329.2\r\n- **Date Produced**: 3/29/2019 1:07 PM\r\n- **Commit**: 31abd61b43b115a6af83c92ce35ed4e8efd01dfd\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19179.2\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190329.2\r\n- **Date Produced**: 3/29/2019 1:07 PM\r\n- **Commit**: 31abd61b43b115a6af83c92ce35ed4e8efd01dfd\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19179.2\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11046","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#11046)"},{"Id":"427767845","IsPullRequest":false,"CreatedAt":"2019-04-02T05:26:19","Actor":"dagood","Number":"11049","RawContent":null,"Title":"2.2.105.toolpath.sentinel directory missing ?","State":"closed","Body":"@DweeberlyLoom commented on [Wed Mar 20 2019](https://github.com/dotnet/core/issues/2483)\n\nProblem encountered on https://dotnet.microsoft.com/learn/web/aspnet-microservice-tutorial/create\r\nOperating System: windows\r\n\r\n```\r\nPS C:\\Users\\dweeb> dotnet new webapi -o myMicroservice --no-https\r\nSystem.UnauthorizedAccessException: Access to the path 'C:\\Users\\dweeb\\.dotnet\\2.2.105.toolpath.sentinel' is denied.\r\n   at System.IO.FileStream.ValidateFileHandle(SafeFileHandle fileHandle)\r\n   at System.IO.FileStream.CreateFileOpenHandle(FileMode mode, FileShare share, FileOptions options)\r\n   at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options)\r\n   at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize)\r\n   at System.IO.File.Create(String path)\r\n   at Microsoft.Extensions.EnvironmentAbstractions.FileWrapper.CreateEmptyFile(String path)\r\n   at Microsoft.DotNet.Configurer.FileSentinel.Create()\r\n   at Microsoft.DotNet.Configurer.DotnetFirstTimeUseConfigurer.Configure()\r\n   at Microsoft.DotNet.Cli.Program.ConfigureDotNetForFirstTimeUse(INuGetCacheSentinel nugetCacheSentinel, IFirstTimeUseNoticeSentinel firstTimeUseNoticeSentinel, IAspNetCertificateSentinel aspNetCertificateSentinel, IFileSentinel toolPathSentinel, Boolean hasSuperUserAccess, DotnetFirstRunConfiguration dotnetFirstRunConfiguration, IEnvironmentProvider environmentProvider)\r\n   at Microsoft.DotNet.Cli.Program.ProcessArgs(String[] args, ITelemetry telemetryClient)\r\n   at Microsoft.DotNet.Cli.Program.Main(String[] args)\r\nPS C:\\Users\\dweeb> dir 'C:\\Users\\dweeb\\.dotnet\\2.2.105*'\r\n\r\n\r\n    Directory: C:\\Users\\dweeb\\.dotnet\r\n\r\nMode                LastWriteTime         Length Name\r\n----                -------------         ------ ----\r\n-a----        3/20/2019   9:01 PM              5 2.2.105_IsDockerContainer.dotnetUserLevelCache\r\n-a----        3/20/2019   9:01 PM             64 2.2.105_MachineId.dotnetUserLevelCache\r\n```\r\n\r\nIt would appear that the SDK doesn't install what you think it installs ... ?\r\n\n\n---\n\n@karelz commented on [Sat Mar 30 2019](https://github.com/dotnet/core/issues/2483#issuecomment-478274906)\n\n@DweeberlyLoom how did you install the SDK?\r\nIs it maybe some weird machine setup? Can you try it on clean VM/another machine to see if it is one machine problem or general problem? Thanks!\n\n---\n\n@karelz commented on [Sat Mar 30 2019](https://github.com/dotnet/core/issues/2483#issuecomment-478274928)\n\ncc @dagood \n\n---\n\n@dagood commented on [Mon Apr 01 2019](https://github.com/dotnet/core/issues/2483#issuecomment-478623911)\n\nMoving to the dotnet/cli repo because `Microsoft.DotNet.Configurer.FileSentinel` lives there, and I think the people with the most context will see it there.\r\n\r\nSo far, this does look like an unusual permissions issue: `System.UnauthorizedAccessException: Access to the path 'C:\\Users\\dweeb\\.dotnet\\2.2.105.toolpath.sentinel' is denied.`\r\n\n\n","Url":"https://github.com/dotnet/cli/issues/11049","RelatedDescription":"Closed issue \"2.2.105.toolpath.sentinel directory missing ?\" (#11049)"},{"Id":"427800049","IsPullRequest":false,"CreatedAt":"2019-04-01T21:34:32","Actor":"Trolldemorted","Number":"11050","RawContent":null,"Title":"CTRL+Cing console apps started dotnet run doesn't wait for the target to terminate","State":"closed","Body":"# Original issue (https://github.com/dotnet/core/issues/2530):\r\n\r\nLet's consider this brief demo:\r\n\r\n```c#\r\nprivate static readonly CancellationTokenSource CancelSource = new CancellationTokenSource();\r\npublic static void Main()\r\n{\r\n    Console.WriteLine(\"Hello world!\");\r\n    Console.CancelKeyPress += (s, e) =>\r\n    {\r\n        e.Cancel = true;\r\n        CancelSource.Cancel();\r\n        Console.WriteLine(\"CancelKeyPress event handler finished\");\r\n    };\r\n    CancelSource.Token.WaitHandle.WaitOne();\r\n    Task.Delay(1000).Wait();\r\n    Console.WriteLine(\"Main finished\");\r\n}\r\n```\r\nAs you can see, the Program is waiting for the cancel event, stating that it does not want to be shut down, waiting one second, printing \"Main finished\" and exiting.\r\n\r\nI would expect the output to be:\r\n```\r\nC:\\Users\\Benni\\source\\repos\\Test\\Test>dotnet run\r\nHello world!\r\nCancelKeyPress event handler finished\r\n^C\r\nMain finished\r\nC:\\Users\\Benni\\source\\repos\\Test\\Test>\r\n```\r\nBut it is:\r\n```\r\nC:\\Users\\Benni\\source\\repos\\Test\\Test>dotnet run\r\nHello world!\r\nCancelKeyPress event handler finished\r\n^C\r\nC:\\Users\\Benni\\source\\repos\\Test\\Test>Main finished\r\n```\r\nUnfortunately the shells (I tested bash, cmd.exe and powershell) print the CWD (for the next command) before the program has actually finished running!\r\n\r\n# .NET CLI's role\r\n\r\nWe managed to narrow the problem down to the usage of `dotnet run`. If you run the produced dll directly (e.g. `dotnet .\\bin\\Debug\\netcoreapp2.2\\Test.dll` the program works as expected, if you use `dotnet run` it does not.\r\n\r\nI will be closing my original issue, and hope here is the right place to report this.\r\n\r\n## Affected systems\r\n\r\nWhen building with dotnet sdk 2.2.105 the problem is reproducible on W10 1809 and on Archlinux. A [stackoverflow user states](https://stackoverflow.com/questions/55441329/cancelkeypress-handler-confuses-shells-cmd-exe-powershell-and-bash) that on his system the shells behave differently and the problem does not occur, but he or she is using dotnet sdk v2.2.103.\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11050","RelatedDescription":"Closed issue \"CTRL+Cing console apps started dotnet run doesn't wait for the target to terminate\" (#11050)"},{"Id":"427835882","IsPullRequest":false,"CreatedAt":"2019-04-01T17:56:25","Actor":"tylerohlsen","Number":"11051","RawContent":null,"Title":"Inconsistent target path between solution build and project build when platform specified","State":"open","Body":"## Steps to reproduce\r\nThe target path / output directory are different building the solution vs building the project when the platform is specified.\r\n`dotnet build MyProject.sln /p:Platform=\"Any CPU\"`  \r\n`dotnet build MyProject.csproj /p:Platform=\"Any CPU\"`  \r\n(where MyProject.sln contains MyProject.csproj)\r\n\r\n## Expected  behavior\r\nThe TargetPath for MyProject for both commands should be the same.\r\n\r\n## Actual behavior\r\nTargetPath when building the solution: ```MyProject\\bin\\Debug\\netstandard2.0\\MyProject.dll```\r\nTargetPath when building the project: ```MyProject\\bin\\Any CPU\\Debug\\netstandard2.0\\MyProject.dll```\r\n\r\n## Environment data\r\n<details><summary>My environment data</summary>  \r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.101\r\n Commit:    236713b0b7\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.101\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  1.0.0-preview2-003131 [C:\\Program Files\\dotnet\\sdk]\r\n  1.0.0-preview4-004233 [C:\\Program Files\\dotnet\\sdk]\r\n  1.0.0-rc3-004530 [C:\\Program Files\\dotnet\\sdk]\r\n  1.0.0 [C:\\Program Files\\dotnet\\sdk]\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.0 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.503 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.504 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.505 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.101 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download```\r\n</details>","Url":"https://github.com/dotnet/cli/issues/11051","RelatedDescription":"Open issue \"Inconsistent target path between solution build and project build when platform specified\" (#11051)"}],"ResultType":"GitHubIssue"},"Standard-Issues":{"Issues":[{"Id":"429582381","IsPullRequest":false,"CreatedAt":"2019-04-05T04:53:06","Actor":"Groostav","Number":"1123","RawContent":null,"Title":"phantom connection when mixing async & blocking calls on TcpClient ","State":"open","Body":"apologies if this is the wrong place to report this!\r\n\r\non .net 4.6.1, win10\r\n\r\n1. create a TCPClient object\r\n2. attempt to connect synchronously to an endpoint with no bound service, get a `SocketException: Connection actively refused\"\r\n3. attempt to `connectAsync` to that same endpoint \r\n\r\nexpected: Asynchronously get a `SocketException: Connection Actively Refused`\r\nactual: connection is established, `tcpClient.Connected` returns true, `tcpClient.GetStream()` returns non-null, `tcpClient.GetStream().write(...)` throws `NotConnectedException`.\r\n\r\n```C#\r\n        \r\n[Test] //baseline, good behaviour\r\npublic async Task when_only_using_async_calls_should_get_consistent_behaviour()\r\n{\r\n    //setup\r\n    var localhost = \"127.0.0.1\";\r\n    var port = 27041; \r\n    \r\n    var tcpClient = new TcpClient();\r\n\r\n    //act\r\n    try\r\n    {\r\n        await tcpClient.ConnectAsync(localhost, port);\r\n        Assert.Fail(\"connection was actually established!\");\r\n    }\r\n    catch (SocketException ex)\r\n    {\r\n        //continue\r\n    }\r\n\r\n    Func<Task> act = (async () => await tcpClient.ConnectAsync(localhost, port));\r\n\r\n    //assert\r\n    act.Should().Throw<SocketException>();\r\n}        \r\n\r\n\r\n[Test]\r\npublic async Task when_mixing_sync_and_async_tcpclient_calls_should_get_hideous_behaviour()\r\n{\r\n    //setup\r\n    var localhost = \"127.0.0.1\";\r\n    var port = 27041; \r\n    \r\n    var tcpClient = new TcpClient();\r\n\r\n    //act\r\n    try\r\n    {\r\n        tcpClient.Connect(localhost, port);\r\n        Assert.Fail(\"connection was actually established!\");\r\n    }\r\n    catch (SocketException ex)\r\n    {\r\n        //continue\r\n    }\r\n\r\n    await tcpClient.ConnectAsync(localhost, port);\r\n\r\n    //assert\r\n    tcpClient.Connected.Should().BeTrue();\r\n    tcpClient.GetStream().Should().NotBeNull();\r\n\r\n    //seems very strange\r\n    //subsequent interactions with tcpClient throw \"not connected\" exceptions\r\n    //I would've expected the `ConnectAsync` method to throw the same `SocketException`,\r\n}\r\n```","Url":"https://github.com/dotnet/standard/issues/1123","RelatedDescription":"Open issue \"phantom connection when mixing async & blocking calls on TcpClient \" (#1123)"},{"Id":"429333028","IsPullRequest":false,"CreatedAt":"2019-04-04T15:07:55","Actor":"Korporal","Number":"1122","RawContent":null,"Title":".NET Framework support","State":"open","Body":"Hi,\r\n\r\nOn [this ](https://github.com/dotnet/standard/blob/master/docs/versions.md)page we see this footnote under the chart:\r\n\r\n> 2 .NET Framework will not support .NET Standard 2.1 or any other later version. For more details, see this blog post.\r\n\r\nI can understand how some specific version like .NET Framework 4.6.1 (for example) will not support .NET Standard 2.1 but _all_ **future** versions of the .NET Framework too?\r\n\r\nThis statements amounts to a phasing out of .NET Framework, it tells us that we should begin to stop targeting it - well that's what seems to be a logical conclusion anyway.\r\n\r\nI don't understand why some future version of .NET Framework (e.g. 4.8) could not include support for .NET Core 2.1?\r\n\r\nWe read [here ](https://docs.microsoft.com/en-us/dotnet/standard/net-standard)the following Microsoft statement:\r\n\r\n> The .NET Standard is a formal specification of .NET APIs that are intended to be available on **_all_** .NET implementations.\r\n\r\nBut now you're retracting this and instead should be saying:\r\n\r\n> The .NET Standard 2.0 and below, is a formal specification of .NET APIs that are intended to be available on all .NET implementations.\r\n\r\nCan Microsoft please be clearer about this? Companies and their staff are under a huge burden to keep up with all sorts of developments in the technology world and if we are being advised to phase out our own support for the .NET Framework then please say so very clearly and definitively, mentioning this kind of thing as small footnote isn't helpful.\r\n\r\nThanks\r\n\r\n","Url":"https://github.com/dotnet/standard/issues/1122","RelatedDescription":"Open issue \".NET Framework support\" (#1122)"},{"Id":"429240376","IsPullRequest":true,"CreatedAt":"2019-04-04T12:13:48","Actor":"dotnet-maestro[bot]","Number":"1121","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190403.10\r\n- **Date Produced**: 4/4/2019 1:43 AM\r\n- **Commit**: 811fda44a88dcfe3e42a17bb34467f5764836c65\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19203.10\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19203.10\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19203.10\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19203.10\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19203.10\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1121","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1121)"},{"Id":"429232379","IsPullRequest":false,"CreatedAt":"2019-04-04T11:43:44","Actor":"markrendle","Number":"1120","RawContent":null,"Title":"Please please please don't call it .NET Standard 2.1 when it aligns with .NET Core 3.0","State":"open","Body":"This is exactly the sort of version number weirdness that .NET takes flak for.\r\n\r\nIn the commit explaining the 2.1 decision, the 3.0 section is:\r\n\r\n- **3.0**\r\n  - Aligns with .NET Core, which will be released at the same time as .NET\r\n    Standard vNext\r\n  - Pros\r\n    + Leaves room for another .NET Standard that is smaller\r\n    + Simpler messaging when we ship .NET Core and .NET Standard and aligns with\r\n      what we did for .NET Core 2.0.\r\n  - Cons\r\n    + A 3.0 isn't really warranted for .NET Standard\r\n    + Perpetuates the problem of aligning .NET Core & .NET Standard versions and\r\n      requires arbitrary skipping of version numbers\r\n\r\n*Simpler messaging* should be a top priority here. I'm going to spend as much time explaining to clients why they can't use .NET Standard 2.1 with the .NET Core 2.1 LTS as my niece Allyce does explaining how to spell her name.\r\n\r\nIf a 3.0 is warranted for .NET Core, with it's `IAsyncEnumerable`, `IAsyncDisposable`, `Range` and `Index` and all the new overloads of existing APIs, then why isn't it warranted for .NET Standard?\r\n\r\nBetter yet, why not publish a .NET Standard 2.1 which aligns with .NET Core 2.1, with all the `Span<T>` goodness, and a .NET Standard 3.0 which aligns with .NET Core 3.0?\r\n\r\nDeliberately versioning .NET Standard independently of .NET Core, especially on the major version numbers, just seems perverse and unnecessary.","Url":"https://github.com/dotnet/standard/issues/1120","RelatedDescription":"Open issue \"Please please please don't call it .NET Standard 2.1 when it aligns with .NET Core 3.0\" (#1120)"},{"Id":"428727330","IsPullRequest":true,"CreatedAt":"2019-04-03T12:11:00","Actor":"dotnet-maestro[bot]","Number":"1119","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190402.13\r\n- **Date Produced**: 4/3/2019 12:44 AM\r\n- **Commit**: 764f362c8e92e41905fe5f6c782ab9980c86c909\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19202.13\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19202.13\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19202.13\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19202.13\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19202.13\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1119","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1119)"},{"Id":"428466923","IsPullRequest":false,"CreatedAt":"2019-04-02T22:06:10","Actor":"wtgodbe","Number":"1118","RawContent":null,"Title":"Consider adding Nullable annotations to .Net Standard","State":"open","Body":"https://github.com/dotnet/coreclr/tree/NullableFeature\r\n\r\nWe should consider adding the annotations from the above Feature branch to the .Net Standard for 2.1.\r\n\r\nCC @wtgodbe @terrajobst @dotnet/nullablefc ","Url":"https://github.com/dotnet/standard/issues/1118","RelatedDescription":"Open issue \"Consider adding Nullable annotations to .Net Standard\" (#1118)"},{"Id":"428187528","IsPullRequest":true,"CreatedAt":"2019-04-02T12:14:00","Actor":"dotnet-maestro[bot]","Number":"1117","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190401.12\r\n- **Date Produced**: 4/2/2019 1:18 AM\r\n- **Commit**: 505e38906e1ee2d032c41bb297de0958307db946\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19201.12\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19201.12\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19201.12\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19201.12\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19201.12\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1117","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1117)"},{"Id":"427275509","IsPullRequest":true,"CreatedAt":"2019-03-30T12:23:34","Actor":"dotnet-maestro[bot]","Number":"1116","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190329.2\r\n- **Date Produced**: 3/29/2019 1:07 PM\r\n- **Commit**: 31abd61b43b115a6af83c92ce35ed4e8efd01dfd\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19179.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19179.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19179.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19179.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19179.2\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1116","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1116)"},{"Id":"426954195","IsPullRequest":true,"CreatedAt":"2019-03-29T12:13:42","Actor":"dotnet-maestro[bot]","Number":"1115","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190329.1\r\n- **Date Produced**: 3/29/2019 10:57 AM\r\n- **Commit**: ef139c7533e2e33c5e0946b80cb1aa95d84da868\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19179.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19179.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19179.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19179.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19179.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1115","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1115)"},{"Id":"426800191","IsPullRequest":false,"CreatedAt":"2019-03-29T03:29:38","Actor":"CalvinFengDatacom","Number":"1114","RawContent":null,"Title":"Multiple assemblies with equivalent identity have been imported","State":"open","Body":"Hi Guys,\r\n\r\nI have a wired issue with my .Net project after I push my changes to remote repository in DevOps.\r\n\r\nThe situation is, we have a .Net project was in .Net framework in version 4.6, then because of other dependencies, we need to upgrade the .Net framework to 4.6.2. It built successfully locally, but it built failed in the build pipeline of DevOps.\r\n\r\nThe error message is: \r\n\r\n- CSC(0,0): Error CS1703: Multiple assemblies with equivalent identity have been imported: 'D:\\a\\1\\s\\DNZ.Mocabots.AIA\\packages\\System.Runtime.Serialization.Primitives.4.1.1\\lib\\net46\\System.Runtime.Serialization.Primitives.dll' and 'C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.2\\Facades\\System.Runtime.Serialization.Primitives.dll'. Remove one of the duplicate references.\r\n- CSC(0,0): Error CS1703: Multiple assemblies with equivalent identity have been imported: 'D:\\a\\1\\s\\DNZ.Mocabots.AIA\\packages\\System.Runtime.InteropServices.4.1.0\\lib\\net462\\System.Runtime.InteropServices.dll' and 'C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.2\\Facades\\System.Runtime.InteropServices.dll'. Remove one of the duplicate references.\r\n- CSC(0,0): Error CS1703: Multiple assemblies with equivalent identity have been imported: 'D:\\a\\1\\s\\DNZ.Mocabots.AIA\\packages\\System.Runtime.Extensions.4.1.0\\lib\\net462\\System.Runtime.Extensions.dll' and 'C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.2\\Facades\\System.Runtime.Extensions.dll'. Remove one of the duplicate references.\r\n- CSC(0,0): Error CS1703: Multiple assemblies with equivalent identity have been imported: 'D:\\a\\1\\s\\DNZ.Mocabots.AIA\\packages\\System.Runtime.4.1.0\\lib\\net462\\System.Runtime.dll' and 'C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.2\\Facades\\System.Runtime.dll'. Remove one of the duplicate references.\r\n- CSC(0,0): Error CS1703: Multiple assemblies with equivalent identity have been imported: 'D:\\a\\1\\s\\DNZ.Mocabots.AIA\\packages\\System.IO.4.1.0\\lib\\net462\\System.IO.dll' and 'C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.2\\Facades\\System.IO.dll'. Remove one of the duplicate references.\r\n- Process 'msbuild.exe' exited with code '1'.\r\n\r\nI can see there are lots of suggestions of removing one of the conflict file manually, however it doesn't work for me. \r\n\r\n_**Note again, we are using .Net Standard F/W, not .Net Core.**\r\nIt was in 4.6 and now it's in 4.6.2._\r\n\r\nLooking forward from your ideas, thanks","Url":"https://github.com/dotnet/standard/issues/1114","RelatedDescription":"Open issue \"Multiple assemblies with equivalent identity have been imported\" (#1114)"},{"Id":"420728685","IsPullRequest":false,"CreatedAt":"2019-03-28T16:46:11","Actor":"OpenSpacesAndPlaces","Number":"1100","RawContent":null,"Title":"Question....On .Net Framework 4.7 without any SDKs...","State":"closed","Body":"I'm currently running into an issue with a hosting company that only has .Net Framework 4.7 installed and no supporting SDKS for netstandard 2.0.\r\n\r\nThe netstandard 2.0. library is needed for EntityFramework Core and SignalR Core.\r\n\r\nThe problem is:\r\nCould not load file or assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51' or one of its dependencies. The system cannot find the file specified.\r\n\r\n- Simply trying to add the 4.7.1. dll results in:\r\nCould not load file or assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51' or one of its dependencies. Reference assemblies should not be loaded for execution.  They can only be loaded in the Reflection-only loader context\r\n\r\n- Pre-compiling/Publish has not helped.\r\n- Attempting to include the required base libraries (the ones .Net Standard would be used to pull in) has not helped.\r\n- Various combinations of assembly rules/config settings has not helped.\r\n\r\n---\r\n\r\nI'm totally fine with hand adding every last nuget package needed if there is a way to redirect the netstandard bindings to the base libraries.\r\n\r\nUnfortunately there is no RDP access to the server - so any fix has to be within the confines of bin folder drops or web.config values.\r\n\r\n---\r\n\r\nAny help appreciated!\r\nAny other details I can provide - let me know!","Url":"https://github.com/dotnet/standard/issues/1100","RelatedDescription":"Closed issue \"Question....On .Net Framework 4.7 without any SDKs...\" (#1100)"},{"Id":"426583515","IsPullRequest":false,"CreatedAt":"2019-03-28T16:14:20","Actor":"CoenraadS","Number":"1113","RawContent":null,"Title":"System.TypeInitializationException: 'The type initializer for 'Microsoft.ServiceBus.Messaging.Constants' threw an exception.'","State":"open","Body":"I have a .Net Core Project that requires `System.UriTemplate` which doesn't seem implemented.\r\n\r\n`System.TypeInitializationException: 'The type initializer for 'Microsoft.ServiceBus.Messaging.Constants' threw an exception.'`\r\n\r\n`TypeLoadException: Could not load type 'System.UriTemplate' from assembly 'System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.`\r\n\r\n.Net Core 2.1 Console Project\r\n\r\n![image](https://user-images.githubusercontent.com/5593825/55173581-3c3dfa00-517c-11e9-95d0-7380e4ce654a.png)\r\n\r\n\r\n```\r\nusing Microsoft.ServiceBus.Messaging;\r\nusing System;\r\nusing System.Linq;\r\n\r\nnamespace ConsoleApp1\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            string connectionString = \"\";\r\n            var q = QueueClient.CreateFromConnectionString(connectionString, \"myqueue\");\r\n\r\n            var sessions = q.GetMessageSessions();\r\n\r\n            var names = sessions.Select(e => e.SessionId);\r\n\r\n            foreach (var name in names)\r\n            {\r\n                Console.WriteLine(name);\r\n            }\r\n        }\r\n    }\r\n}\r\n```","Url":"https://github.com/dotnet/standard/issues/1113","RelatedDescription":"Open issue \"System.TypeInitializationException: 'The type initializer for 'Microsoft.ServiceBus.Messaging.Constants' threw an exception.'\" (#1113)"},{"Id":"426455070","IsPullRequest":true,"CreatedAt":"2019-03-28T12:24:04","Actor":"dotnet-maestro[bot]","Number":"1112","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190327.11\r\n- **Date Produced**: 3/28/2019 1:58 AM\r\n- **Commit**: 69f276904fdd6d8f81404b857f295537894b81d3\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19177.11\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19177.11\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19177.11\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19177.11\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19177.11\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1112","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1112)"},{"Id":"426112720","IsPullRequest":true,"CreatedAt":"2019-03-27T19:57:52","Actor":"wtgodbe","Number":"1111","RawContent":null,"Title":"Update build pools","State":"closed","Body":"@MattGal @mmitche PTAL","Url":"https://github.com/dotnet/standard/pull/1111","RelatedDescription":"Closed or merged PR \"Update build pools\" (#1111)"},{"Id":"425696215","IsPullRequest":true,"CreatedAt":"2019-03-27T13:10:47","Actor":"ericstj","Number":"1109","RawContent":null,"Title":"Make some packages optional for source build","State":"closed","Body":"","Url":"https://github.com/dotnet/standard/pull/1109","RelatedDescription":"Closed or merged PR \"Make some packages optional for source build\" (#1109)"},{"Id":"425920602","IsPullRequest":true,"CreatedAt":"2019-03-27T12:13:39","Actor":"dotnet-maestro[bot]","Number":"1110","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190326.14\r\n- **Date Produced**: 3/27/2019 12:08 AM\r\n- **Commit**: e23a3e2fd09a6222361ce47b78d23ab42867924c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19176.14\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19176.14\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19176.14\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19176.14\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19176.14\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1110","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1110)"},{"Id":"425628046","IsPullRequest":true,"CreatedAt":"2019-03-26T20:21:32","Actor":"dotnet-maestro[bot]","Number":"1108","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190325.9\r\n- **Date Produced**: 3/25/2019 10:36 PM\r\n- **Commit**: 13daa29185518ef3c6d4074fd07efbc5236a76c5\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19175.9\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19175.9\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19175.9\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19175.9\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19175.9\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1108","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1108)"},{"Id":"425140404","IsPullRequest":true,"CreatedAt":"2019-03-26T19:53:53","Actor":"wtgodbe","Number":"1107","RawContent":null,"Title":"Add transport package for NetStandard","State":"closed","Body":"This creates a transport package, `Microsoft.Private.Standard`, which contains the same netstandard2.1 binaries as `NetStandard.Library`, but not `NetStandard.Library.Targets`. The assets are in `ref\\netstandard2.1` instead of `build\\netstandard2.1\\ref`. This transport package can be consumed by Core-Setup for the purpose of creating the targeting pack, rather than publicly shipping `NetStandard.Library`, or having Core-Setup consume its Standard dependencies through `NetStandard.Library`. Eventually we can phase out NS.L in favor of this transport package.\r\n\r\n@ericstj @dagood @terrajobst PTAL\r\n\r\nResolves https://github.com/dotnet/standard/issues/1106","Url":"https://github.com/dotnet/standard/pull/1107","RelatedDescription":"Closed or merged PR \"Add transport package for NetStandard\" (#1107)"},{"Id":"425067073","IsPullRequest":false,"CreatedAt":"2019-03-26T19:53:53","Actor":"wtgodbe","Number":"1106","RawContent":null,"Title":"Create a transport package for NetStandard","State":"closed","Body":"We should create a transport package for Net Standard, and stop shipping/building stable versions of NS.Library. Instead, we can have Core-Setup consume the transport package, and release the bits through a targeting pack. The contents should be similar to what's in NS.Library today, but in the `ref\\netstandard2.1` folder instead of `build`\r\n\r\nCC @dagood @ericstj ","Url":"https://github.com/dotnet/standard/issues/1106","RelatedDescription":"Closed issue \"Create a transport package for NetStandard\" (#1106)"},{"Id":"423998952","IsPullRequest":true,"CreatedAt":"2019-03-22T17:11:38","Actor":"dotnet-maestro[bot]","Number":"1104","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190321.2\r\n- **Date Produced**: 3/21/2019 6:29 PM\r\n- **Commit**: 5f884de91b56acd5d19bf792516b646e5fad19b5\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19171.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19171.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19171.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19171.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19171.2\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190321.3\r\n- **Date Produced**: 3/22/2019 12:37 AM\r\n- **Commit**: b3bcf3034ff395bd09066114379ec64736b13633\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19171.3\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19171.3\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19171.3\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19171.3\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19171.3\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190321.6\r\n- **Date Produced**: 3/22/2019 4:35 AM\r\n- **Commit**: 2eb45ff0eed6f86f1071b16b11a447cadeeeec59\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19171.6\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19171.6\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19171.6\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19171.6\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19171.6\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1104","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1104)"},{"Id":"422563592","IsPullRequest":false,"CreatedAt":"2019-03-19T06:25:32","Actor":"githubdigo","Number":"1103","RawContent":null,"Title":"After updating to .netStandard 2.0.3 Convert.ToString(null) is throwing Null reference exception","State":"open","Body":"","Url":"https://github.com/dotnet/standard/issues/1103","RelatedDescription":"Open issue \"After updating to .netStandard 2.0.3 Convert.ToString(null) is throwing Null reference exception\" (#1103)"},{"Id":"421676181","IsPullRequest":true,"CreatedAt":"2019-03-18T19:09:34","Actor":"terrajobst","Number":"1102","RawContent":null,"Title":"Expose RandomNumberGenerator.GetInt32","State":"closed","Body":"Fixes #1101.","Url":"https://github.com/dotnet/standard/pull/1102","RelatedDescription":"Closed or merged PR \"Expose RandomNumberGenerator.GetInt32\" (#1102)"},{"Id":"420975088","IsPullRequest":false,"CreatedAt":"2019-03-18T19:09:34","Actor":"khellang","Number":"1101","RawContent":null,"Title":"Include System.Security.Cryptography.RandomNumberGenerator.GetInt32","State":"closed","Body":"I'd like to propose the inclusion of the new `System.Security.Cryptography.RandomNumberGenerator.GetInt32` APIs, added in https://github.com/dotnet/corefx/pull/31243.\r\n\r\nAs noted in https://github.com/dotnet/corefx/issues/30873, this is often incorrectly implemented, which can lead to security vulnerabilities and bias. It would be nice if it was part of the standard, to have a convenient API for this across all platforms.\r\n\r\nThe implementation doesn't have a lot of dependencies and could probably be (more or less) copied to other platforms.\r\n\r\n```diff\r\ndiff --git a/src/netstandard/ref/System.Security.Cryptography.cs b/src/netstandard/ref/System.Security.Cryptography.cs\r\nindex ec34484..2b7d68b 100644\r\n--- a/src/netstandard/ref/System.Security.Cryptography.cs\r\n+++ b/src/netstandard/ref/System.Security.Cryptography.cs\r\n@@ -810,6 +810,8 @@ namespace System.Security.Cryptography\r\n         public virtual void GetBytes(System.Span<byte> data) { }\r\n         public virtual void GetNonZeroBytes(byte[] data) { }\r\n         public virtual void GetNonZeroBytes(System.Span<byte> data) { }\r\n+        public static int GetInt32(int fromInclusive, int toExclusive) { throw null; }\r\n+        public static int GetInt32(int toExclusive) { throw null; }\r\n     }\r\n     [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]\r\n     public abstract partial class RC2 : System.Security.Cryptography.SymmetricAlgorithm\r\n\r\n```\r\n\r\n// @terrajobst ","Url":"https://github.com/dotnet/standard/issues/1101","RelatedDescription":"Closed issue \"Include System.Security.Cryptography.RandomNumberGenerator.GetInt32\" (#1101)"},{"Id":"419180568","IsPullRequest":false,"CreatedAt":"2019-03-10T17:28:29","Actor":"jinyuttt","Number":"1099","RawContent":null,"Title":"Elliptic Curve Cryptography","State":"closed","Body":"Provide elliptic curve cryptography? ","Url":"https://github.com/dotnet/standard/issues/1099","RelatedDescription":"Closed issue \"Elliptic Curve Cryptography\" (#1099)"},{"Id":"418668244","IsPullRequest":true,"CreatedAt":"2019-03-09T00:32:27","Actor":"stephentoub","Number":"1098","RawContent":null,"Title":"Add dummy field to TypedReference","State":"closed","Body":"cc: @terrajobst ","Url":"https://github.com/dotnet/standard/pull/1098","RelatedDescription":"Closed or merged PR \"Add dummy field to TypedReference\" (#1098)"},{"Id":"418474274","IsPullRequest":false,"CreatedAt":"2019-03-07T22:27:38","Actor":"MgSam","Number":"1097","RawContent":null,"Title":"Change .NET Standard 2.1 version number","State":"closed","Body":"It was just [announced ](https://devblogs.microsoft.com/dotnet/announcing-net-core-3-preview-3/#) that the next version of .NET Standard will be 2.1, which will be implemented by .NET Core 3.0 and incompatible with .NET Core 2.1 and incompatible with any version of .NET Framework. Got all that?\r\n\r\nI implore you to please change the version number of Standard 2.1 before it's too late. It is extremely confusing to have it be Standard 2.1 which is incompatible with Core 2.1. I strongly feel that Standard should version alongside of Core (given that Core is the lead implementation of .NET) and should be Standard 3.0\r\n\r\nIn lieu of that, at the very least it should get a version number which doesn't actively lead to confusion by aligning with the version number of an incompatible version of Core. Standard 2.5?\r\n\r\nI know Microsoft has a reputation to uphold at being horrible at naming things, but this is a bridge too far :)","Url":"https://github.com/dotnet/standard/issues/1097","RelatedDescription":"Closed issue \"Change .NET Standard 2.1 version number\" (#1097)"},{"Id":"417603266","IsPullRequest":true,"CreatedAt":"2019-03-06T03:17:38","Actor":"terrajobst","Number":"1096","RawContent":null,"Title":"Update information for .NET Standard 2.1","State":"closed","Body":"This updates the version table for .NET Standard 2.1 as well as the API diff.\r\n\r\n/cc @mairaw ","Url":"https://github.com/dotnet/standard/pull/1096","RelatedDescription":"Closed or merged PR \"Update information for .NET Standard 2.1\" (#1096)"},{"Id":"417601953","IsPullRequest":true,"CreatedAt":"2019-03-06T03:11:36","Actor":"terrajobst","Number":"1095","RawContent":null,"Title":"Add footnote regarding .NET Framework 4.6.1 support","State":"closed","Body":"This mirrors what's already in the docs","Url":"https://github.com/dotnet/standard/pull/1095","RelatedDescription":"Closed or merged PR \"Add footnote regarding .NET Framework 4.6.1 support\" (#1095)"},{"Id":"416990675","IsPullRequest":false,"CreatedAt":"2019-03-04T21:01:09","Actor":"tannergooding","Number":"1094","RawContent":null,"Title":"Consider the HWIntrinsic APIs for NS2.1","State":"open","Body":"### Summary\r\n\r\nWe should consider including the Harware Intrinsic APIs as part of `netstandard2.1` given that they are trivial to \"support\" (you just expose the APIs and return `false` for all the `IsSupported` checks, as the shared framework code is already doing), were designed in a way that the feature can be incrementally enabled by a given runtime, are already finding use in the shared framework code, and will allow users to more readily write cross-runtime libraries.\r\n\r\n### Rationale\r\n\r\n`netcoreapp3.0` is adding ~1500 APIs in order to support the new \"Hardware Intrinsics\" feature. These APIs provide support for writing more efficient algorithms that can take advantage of hardware specific functionality.\r\n\r\nWhile the number of APIs exposed may seem daunting, the APIs are hardware specific and were designed such that you must perform the appropriate checks before attempting to use a given API or they will result in a `PlatformNotSupportedException` at runtime. For example, `System.Runtime.Intrinsics.X86.Sse` is a class that exposes the SSE ISA for the x86 and x64 architectures. Before using any of the methods on that class, you must emit an `if (Sse.IsSupported)` check to validate that both the current hardware and the current runtime support this ISA.\r\n\r\nThese API declarations are also part of the existing shared framework code and have a default implementation of returning `false` for the `IsSupported` checks and throwing `PlatformNotSupportedException` from any of the other exposed hardware-specific APIs. This has allowed us to already take a cross-runtime dependency on these intrinsics in places like `SpanHelpers`, `Decimal`, `BitOperations`, `BitArray`, and more.\r\n\r\nGiven the above, I propose that these APIs be included as part of `netstandard2.1` as it will allow general library and application developers to share in the same benefits we have already seen. That is, it will light-up on .NET Core 3.0 and will do nothing on other runtimes. This will avoid the need for them to cross-compile their code in a number of cases.\r\n\r\nFor the runtimes that don't support this functionality yet, they should require somewhere between no and minimal changes. For the most part, they should already be internally compiling these APIs and hitting the `IsSupported=false` paths. So they will ultimately just be exposing these APIs to the end-user and would require no changes. The work that may be required is to ensure that the `Vector64<T>`, `Vector128<T>`, and `Vector256<T>` types have the appropriate ABI dependent type layouts. That is, these types should have the appropriate packing (e.g. `16` for `Vector128<T>` on x86/x64 since it maps to the `__m128` ABI primitive defined by the Windows and System V calling convention specifications).\r\n\r\nExposing this will also allow the various runtimes to have incremental \"light-up\" of these APIs. That is, rather than waiting for the next release to both expose and implement the APIs, they can expose the the APIs as part of `netstandard2.1` and the corresponding version of their runtime (e.g `x.0`). They can then light up individual ISAs and make them available to their users as they see fit (e.g. They could enable just `SSE` in `x.1` and could enable SSE2/SSE3 in `x.2`, etc).\r\n\r\n","Url":"https://github.com/dotnet/standard/issues/1094","RelatedDescription":"Open issue \"Consider the HWIntrinsic APIs for NS2.1\" (#1094)"},{"Id":"416499863","IsPullRequest":false,"CreatedAt":"2019-03-03T18:13:53","Actor":"proof85","Number":"1093","RawContent":null,"Title":"HashCode to standard","State":"closed","Body":"Hi,\r\n\r\nis it possible to add the HashCode-\"Helper\" struct to the .net standard? Including the Combine method? it is covered by the .net corefx since v2.1 and it looks like there is no os or platform specific usecase","Url":"https://github.com/dotnet/standard/issues/1093","RelatedDescription":"Closed issue \"HashCode to standard\" (#1093)"}],"ResultType":"GitHubIssue"},"CoreFx-Issues":{"Issues":[{"Id":"429564275","IsPullRequest":true,"CreatedAt":"2019-04-05T04:05:43","Actor":"ahsonkhan","Number":"36619","RawContent":null,"Title":"Disable Json serializer CacheTests since its failing on linux.","State":"closed","Body":"See https://github.com/dotnet/corefx/issues/36618\r\n\r\ncc @safern, @steveharter ","Url":"https://github.com/dotnet/corefx/pull/36619","RelatedDescription":"Closed or merged PR \"Disable Json serializer CacheTests since its failing on linux.\" (#36619)"},{"Id":"429563925","IsPullRequest":false,"CreatedAt":"2019-04-05T03:03:21","Actor":"ahsonkhan","Number":"36618","RawContent":null,"Title":"System.Text.Json.Serialization.Tests.CacheTests/MultipleThreads failing on Linux","State":"open","Body":"New test introduced in https://github.com/dotnet/corefx/pull/36549 is failing.\r\n\r\nhttps://mc.dot.net/#/product/netcore/30/source/official~2Fdotnet~2Fcorefx~2Frefs~2Fheads~2Fmaster/type/test~2Ffunctional~2Fcli~2F/build/20190404.4/workItem/System.Text.Json.Tests/analysis/xunit/System.Text.Json.Serialization.Tests.CacheTests~2FMultipleThreads\r\nFedora.28.Amd64-x64-Release\r\n```text\r\nUnhandled Exception of Type System.AggregateException\r\nMessage :\r\nSystem.AggregateException : One or more errors occurred. (Assert.Equal() Failure\r\nExpected: 1\r\nActual:   0) (Assert.Equal() Failure\r\nExpected: 1\r\nActual:   0) (Assert.Equal() Failure\r\nExpected: 1\r\nActual:   0)\r\n---- Assert.Equal() Failure\r\nExpected: 1\r\nActual:   0\r\n---- Assert.Equal() Failure\r\nExpected: 1\r\nActual:   0\r\n---- Assert.Equal() Failure\r\nExpected: 1\r\nActual:   0\r\nStack Trace :\r\n   at System.Threading.Tasks.Task.WaitAllCore(Task[] tasks, Int32 millisecondsTimeout, CancellationToken cancellationToken) in /__w/5/s/src/System.Private.CoreLib/shared/System/Threading/Tasks/Task.cs:line 4811\r\n   at System.Threading.Tasks.Task.WaitAll(Task[] tasks) in /__w/5/s/src/System.Private.CoreLib/shared/System/Threading/Tasks/Task.cs:line 4548\r\n   at System.Text.Json.Serialization.Tests.CacheTests.MultipleThreads() in /__w/1/s/src/System.Text.Json/tests/Serialization/CacheTests.cs:line 50\r\n----- Inner Stack Trace #1 (Xunit.Sdk.EqualException) -----\r\n   at System.Text.Json.Serialization.Tests.SimpleTestClass.Verify() in /__w/1/s/src/System.Text.Json/tests/Serialization/TestClasses.cs:line 147\r\n   at System.Text.Json.Serialization.Tests.CacheTests.<MultipleThreads>g__SerializeAndDeserializeObject|0_0(Boolean useEmptyJson) in /__w/1/s/src/System.Text.Json/tests/Serialization/CacheTests.cs:line 39\r\n   at System.Text.Json.Serialization.Tests.CacheTests.<>c__DisplayClass0_0.<MultipleThreads>b__1() in /__w/1/s/src/System.Text.Json/tests/Serialization/CacheTests.cs:line 45\r\n   at System.Threading.Tasks.Task.InnerInvoke() in /__w/5/s/src/System.Private.CoreLib/shared/System/Threading/Tasks/Task.cs:line 2460\r\n   at System.Threading.Tasks.Task.<>c.<.cctor>b__274_0(Object obj) in /__w/5/s/src/System.Private.CoreLib/shared/System/Threading/Tasks/Task.cs:line 2439\r\n   at System.Threading.ExecutionContext.RunFromThreadPoolDispatchLoop(Thread threadPoolThread, ExecutionContext executionContext, ContextCallback callback, Object state) in /__w/5/s/src/System.Private.CoreLib/shared/System/Threading/ExecutionContext.cs:line 288\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Threading.ExecutionContext.RunFromThreadPoolDispatchLoop(Thread threadPoolThread, ExecutionContext executionContext, ContextCallback callback, Object state) in /__w/5/s/src/System.Private.CoreLib/shared/System/Threading/ExecutionContext.cs:line 313\r\n   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot, Thread threadPoolThread) in /__w/5/s/src/System.Private.CoreLib/shared/System/Threading/Tasks/Task.cs:line 2400\r\n----- Inner Stack Trace #2 (Xunit.Sdk.EqualException) -----\r\n   at System.Text.Json.Serialization.Tests.SimpleTestClass.Verify() in /__w/1/s/src/System.Text.Json/tests/Serialization/TestClasses.cs:line 147\r\n   at System.Text.Json.Serialization.Tests.CacheTests.<MultipleThreads>g__SerializeAndDeserializeObject|0_0(Boolean useEmptyJson) in /__w/1/s/src/System.Text.Json/tests/Serialization/CacheTests.cs:line 39\r\n   at System.Text.Json.Serialization.Tests.CacheTests.<>c__DisplayClass0_0.<MultipleThreads>b__1() in /__w/1/s/src/System.Text.Json/tests/Serialization/CacheTests.cs:line 45\r\n   at System.Threading.Tasks.Task.InnerInvoke() in /__w/5/s/src/System.Private.CoreLib/shared/System/Threading/Tasks/Task.cs:line 2460\r\n   at System.Threading.Tasks.Task.<>c.<.cctor>b__274_0(Object obj) in /__w/5/s/src/System.Private.CoreLib/shared/System/Threading/Tasks/Task.cs:line 2439\r\n   at System.Threading.ExecutionContext.RunFromThreadPoolDispatchLoop(Thread threadPoolThread, ExecutionContext executionContext, ContextCallback callback, Object state) in /__w/5/s/src/System.Private.CoreLib/shared/System/Threading/ExecutionContext.cs:line 288\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Threading.ExecutionContext.RunFromThreadPoolDispatchLoop(Thread threadPoolThread, ExecutionContext executionContext, ContextCallback callback, Object state) in /__w/5/s/src/System.Private.CoreLib/shared/System/Threading/ExecutionContext.cs:line 313\r\n   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot, Thread threadPoolThread) in /__w/5/s/src/System.Private.CoreLib/shared/System/Threading/Tasks/Task.cs:line 2400\r\n----- Inner Stack Trace #3 (Xunit.Sdk.EqualException) -----\r\n   at System.Text.Json.Serialization.Tests.SimpleTestClass.Verify() in /__w/1/s/src/System.Text.Json/tests/Serialization/TestClasses.cs:line 147\r\n   at System.Text.Json.Serialization.Tests.CacheTests.<MultipleThreads>g__SerializeAndDeserializeObject|0_0(Boolean useEmptyJson) in /__w/1/s/src/System.Text.Json/tests/Serialization/CacheTests.cs:line 39\r\n   at System.Text.Json.Serialization.Tests.CacheTests.<>c__DisplayClass0_0.<MultipleThreads>b__1() in /__w/1/s/src/System.Text.Json/tests/Serialization/CacheTests.cs:line 45\r\n   at System.Threading.Tasks.Task.InnerInvoke() in /__w/5/s/src/System.Private.CoreLib/shared/System/Threading/Tasks/Task.cs:line 2460\r\n   at System.Threading.Tasks.Task.<>c.<.cctor>b__274_0(Object obj) in /__w/5/s/src/System.Private.CoreLib/shared/System/Threading/Tasks/Task.cs:line 2439\r\n   at System.Threading.ExecutionContext.RunFromThreadPoolDispatchLoop(Thread threadPoolThread, ExecutionContext executionContext, ContextCallback callback, Object state) in /__w/5/s/src/System.Private.CoreLib/shared/System/Threading/ExecutionContext.cs:line 288\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Threading.ExecutionContext.RunFromThreadPoolDispatchLoop(Thread threadPoolThread, ExecutionContext executionContext, ContextCallback callback, Object state) in /__w/5/s/src/System.Private.CoreLib/shared/System/Threading/ExecutionContext.cs:line 313\r\n   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot, Thread threadPoolThread) in /__w/5/s/src/System.Private.CoreLib/shared/System/Threading/Tasks/Task.cs:line 2400\r\n```\r\n\r\nhttps://mc.dot.net/#/user/dotnet-bot/pr~2Fdotnet~2Fcorefx~2Frefs~2Fpull~2F33520~2Fmerge/test~2Ffunctional~2Fcli~2F/20190404.42/workItem/System.Text.Json.Tests/analysis/xunit/System.Text.Json.Serialization.Tests.CacheTests~2FMultipleThreads\r\nUbuntu.1604.Arm64-arm64-Release\r\nUbuntu.1804.Amd64-x64-Release\r\n```text\r\nMessage :\r\nSystem.AggregateException : One or more errors occurred. (Assert.Equal() Failure\r\nExpected: 1\r\nActual:   0)\r\n---- Assert.Equal() Failure\r\nExpected: 1\r\nActual:   0\r\nStack Trace :\r\n   at System.Threading.Tasks.Task.WaitAllCore(Task[] tasks, Int32 millisecondsTimeout, CancellationToken cancellationToken) in /__w/8/s/src/System.Private.CoreLib/shared/System/Threading/Tasks/Task.cs:line 4811\r\n   at System.Threading.Tasks.Task.WaitAll(Task[] tasks) in /__w/8/s/src/System.Private.CoreLib/shared/System/Threading/Tasks/Task.cs:line 4543\r\n   at System.Text.Json.Serialization.Tests.CacheTests.MultipleThreads() in /__w/1/s/src/System.Text.Json/tests/Serialization/CacheTests.cs:line 49\r\n----- Inner Stack Trace -----\r\n   at System.Text.Json.Serialization.Tests.SimpleTestClass.Verify() in /__w/1/s/src/System.Text.Json/tests/Serialization/TestClasses.cs:line 146\r\n   at System.Text.Json.Serialization.Tests.CacheTests.<MultipleThreads>g__SerializeAndDeserializeObject|0_0(Boolean useEmptyJson) in /__w/1/s/src/System.Text.Json/tests/Serialization/CacheTests.cs:line 38\r\n   at System.Text.Json.Serialization.Tests.CacheTests.<>c__DisplayClass0_0.<MultipleThreads>b__1() in /__w/1/s/src/System.Text.Json/tests/Serialization/CacheTests.cs:line 45\r\n   at System.Threading.Tasks.Task.InnerInvoke() in /__w/8/s/src/System.Private.CoreLib/shared/System/Threading/Tasks/Task.cs:line 2450\r\n   at System.Threading.Tasks.Task.<>c.<.cctor>b__274_0(Object obj) in /__w/8/s/src/System.Private.CoreLib/shared/System/Threading/Tasks/Task.cs:line 2438\r\n   at System.Threading.ExecutionContext.RunFromThreadPoolDispatchLoop(Thread threadPoolThread, ExecutionContext executionContext, ContextCallback callback, Object state) in /__w/8/s/src/System.Private.CoreLib/shared/System/Threading/ExecutionContext.cs:line 288\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Threading.ExecutionContext.RunFromThreadPoolDispatchLoop(Thread threadPoolThread, ExecutionContext executionContext, ContextCallback callback, Object state) in /__w/8/s/src/System.Private.CoreLib/shared/System/Threading/ExecutionContext.cs:line 313\r\n   at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot, Thread threadPoolThread) in /__w/8/s/src/System.Private.CoreLib/shared/System/Threading/Tasks/Task.cs:line 2400\r\n```\r\n\r\nTest disabled in https://github.com/dotnet/corefx/pull/36619","Url":"https://github.com/dotnet/corefx/issues/36618","RelatedDescription":"Open issue \"System.Text.Json.Serialization.Tests.CacheTests/MultipleThreads failing on Linux\" (#36618)"},{"Id":"429541524","IsPullRequest":false,"CreatedAt":"2019-04-05T00:55:38","Actor":"echesakovMSFT","Number":"36617","RawContent":null,"Title":"[linux-musl-arm64] microsoft.private.corefx.netcoreapp restores linux-arm64 packages","State":"open","Body":"How to repro\r\n\r\n1. Create **dependencies.csproj** with the following content:\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp3.0</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.Private.CoreFx.NETCoreApp\">\r\n      <Version>4.6.0-preview4.19204.3</Version>\r\n    </PackageReference>\r\n\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\n2. Run the two commands below with the latest dotnet Sdk\r\n\r\n**linux-musl-arm64**\r\n```\r\nD:\\GitHub_23749\\dependencies>.\\dotnet-sdk-latest-win-x64\\dotnet.exe restore --packages packages-linux-musl-arm64 -r linux-musl-arm64 dependencies.csproj\r\n  Restore completed in 8.9 sec for D:\\GitHub_23749\\dependencies\\dependencies.csproj\r\n```\r\n\r\n**linux-musl-x64**\r\n```\r\nD:\\GitHub_23749\\dependencies>.\\dotnet-sdk-latest-win-x64\\dotnet.exe restore --packages packages-linux-musl-x64 -r linux-musl-x64 dependencies.csproj\r\n  Restore completed in 7.81 sec for D:\\GitHub_23749\\dependencies\\dependencies.csproj.\r\n```\r\n\r\n3. **linux-musl-x64** restores runtime.linux-musl-x64.* packages\r\n```\r\nD:\\GitHub_23749\\dependencies>dir packages-linux-musl-x64\r\n Volume in drive D is Dev\r\n Volume Serial Number is 90EE-6663\r\n\r\n Directory of D:\\GitHub_23749\\dependencies\\packages-linux-musl-x64\r\n\r\n04/04/2019  05:39 PM    <DIR>          .\r\n04/04/2019  05:39 PM    <DIR>          ..\r\n04/04/2019  05:39 PM    <DIR>          microsoft.aspnetcore.app.runtime.linux-musl-x64\r\n04/04/2019  05:39 PM    <DIR>          microsoft.netcore.dotnetapphost\r\n04/04/2019  05:39 PM    <DIR>          microsoft.netcore.dotnethostresolver\r\n04/04/2019  05:39 PM    <DIR>          microsoft.netcore.platforms\r\n04/04/2019  05:39 PM    <DIR>          microsoft.netcore.targets\r\n04/04/2019  05:39 PM    <DIR>          microsoft.private.corefx.netcoreapp\r\n04/04/2019  05:39 PM    <DIR>          runtime.linux-musl-x64.microsoft.netcore.app\r\n04/04/2019  05:39 PM    <DIR>          runtime.linux-musl-x64.microsoft.netcore.dotnetapphost\r\n04/04/2019  05:39 PM    <DIR>          runtime.linux-musl-x64.microsoft.netcore.dotnethostpolicy\r\n04/04/2019  05:39 PM    <DIR>          runtime.linux-musl-x64.microsoft.netcore.dotnethostresolver\r\n04/04/2019  05:39 PM    <DIR>          runtime.linux-musl-x64.microsoft.private.corefx.netcoreapp\r\n               0 File(s)              0 bytes\r\n              13 Dir(s)  63,330,492,416 bytes free\r\n```\r\n\r\n4. linux-musl-arm64 restores 4 runtime.linux-musl-arm64.* packages and runtime.**linux-arm64**.microsoft.private.corefx.netcoreapp and microsoft.aspnetcore.app.runtime.**linux-arm64**\r\n```\r\nD:\\GitHub_23749\\dependencies>dir packages-linux-musl-arm64\r\n Volume in drive D is Dev\r\n Volume Serial Number is 90EE-6663\r\n\r\n Directory of D:\\GitHub_23749\\dependencies\\packages-linux-musl-arm64\r\n\r\n04/04/2019  05:39 PM    <DIR>          .\r\n04/04/2019  05:39 PM    <DIR>          ..\r\n04/04/2019  05:39 PM    <DIR>          microsoft.aspnetcore.app.runtime.linux-arm64\r\n04/04/2019  05:39 PM    <DIR>          microsoft.netcore.dotnetapphost\r\n04/04/2019  05:39 PM    <DIR>          microsoft.netcore.dotnethostresolver\r\n04/04/2019  05:39 PM    <DIR>          microsoft.netcore.platforms\r\n04/04/2019  05:39 PM    <DIR>          microsoft.netcore.targets\r\n04/04/2019  05:39 PM    <DIR>          microsoft.private.corefx.netcoreapp\r\n04/04/2019  05:39 PM    <DIR>          runtime.linux-arm64.microsoft.private.corefx.netcoreapp\r\n04/04/2019  05:39 PM    <DIR>          runtime.linux-musl-arm64.microsoft.netcore.app\r\n04/04/2019  05:39 PM    <DIR>          runtime.linux-musl-arm64.microsoft.netcore.dotnetapphost\r\n04/04/2019  05:39 PM    <DIR>          runtime.linux-musl-arm64.microsoft.netcore.dotnethostpolicy\r\n04/04/2019  05:39 PM    <DIR>          runtime.linux-musl-arm64.microsoft.netcore.dotnethostresolver\r\n               0 File(s)              0 bytes\r\n              13 Dir(s)  63,330,492,416 bytes free\r\n```\r\n\r\n/cc @ViktorHofer ","Url":"https://github.com/dotnet/corefx/issues/36617","RelatedDescription":"Open issue \"[linux-musl-arm64] microsoft.private.corefx.netcoreapp restores linux-arm64 packages\" (#36617)"},{"Id":"429177427","IsPullRequest":false,"CreatedAt":"2019-04-04T22:33:28","Actor":"dotnet-mc-bot","Number":"36594","RawContent":null,"Title":"Test failure: System.Net.Tests.HttpWebRequestTest/ContentLength_Get_ExpectSameAsGetResponseStream(remoteServer: http://corefx-net-http11.azurewebsites.net/Echo.ashx)","State":"closed","Body":"Opened on behalf of @AriNuer\n\nThe test `System.Net.Tests.HttpWebRequestTest/ContentLength_Get_ExpectSameAsGetResponseStream(remoteServer: http://corefx-net-http11.azurewebsites.net/Echo.ashx)` has failed.\n\nFailure Message:\n```\nAssert.Equal() Failure\nExpected: 725\nActual:   -1\n```\n\nStack Trace:\n```\n   at System.Net.Tests.HttpWebRequestTest.ContentLength_Get_ExpectSameAsGetResponseStream(Uri remoteServer) in /__w/1/s/src/System.Net.Requests/tests/HttpWebRequestTest.cs:line 236\n--- End of stack trace from previous location where exception was thrown ---\n```\n\nBuild : 3.0 - 20190403.9 (Core Tests)\nFailing configurations:\n- Fedora.28.Amd64-x64\n  - Release\n- SLES.15.Amd64-x64\n  - Release\n- SLES.12.Amd64-x64\n  - Release\n- OpenSuse.42.Amd64-x64\n  - Release\n- Ubuntu.1810.Amd64-x64\n  - Release\n- Ubuntu.1804.Amd64-x64\n  - Release\n- Ubuntu.1604.Amd64-x64\n  - Release\n- Debian.9.Amd64-x64\n  - Release\n- Debian.8.Amd64-x64\n  - Release\n- Windows.10.Amd64.ClientRS4-x86\n  - Release\n- Windows.10.Amd64.Core-x86\n  - Release\n- Windows.81.Amd64-x86\n  - Release\n- Windows.7.Amd64-x86\n  - Release\n- Windows.10.Nano.Amd64-x64\n  - Release\n- Windows.10.Amd64.ClientRS4-x64\n  - Release\n- Windows.10.Amd64.Core-x64\n  - Release\n- Windows.81.Amd64-x64\n  - Release\n- Windows.7.Amd64-x64\n  - Release\n- RedHat.7.Amd64-x64\n  - Release\n- Centos.7.Amd64-x64\n  - Release\n- Windows.10.Arm64-arm64\n  - Release\n- Debian.9.Arm32-arm\n  - Release\n- Ubuntu.1604.Arm64-arm64\n  - Release\n- Alpine.39.Amd64-x64\n  - Release\n- RedHat.6.Amd64-x64\n  - Release\n- Alpine.38.Amd64-x64\n  - Release\n- Alpine.36.Amd64-x64\n  - Release\n- OSX.1014.Amd64-x64\n  - Release\n- OSX.1013.Amd64-x64\n  - Release\n- OSX.1012.Amd64-x64\n  - Release\n\nDetails:\nhttps://mc.dot.net/#/product/netcore/30/source/official~2Fdotnet~2Fcorefx~2Frefs~2Fheads~2Fmaster/type/test~2Ffunctional~2Fcli~2F/build/20190403.9/workItem/System.Net.Requests.Tests/analysis/xunit/System.Net.Tests.HttpWebRequestTest~2FContentLength_Get_ExpectSameAsGetResponseStream(remoteServer:%20http:~2F~2Fcorefx-net-http11.azurewebsites.net~2FEcho.ashx)","Url":"https://github.com/dotnet/corefx/issues/36594","RelatedDescription":"Closed issue \"Test failure: System.Net.Tests.HttpWebRequestTest/ContentLength_Get_ExpectSameAsGetResponseStream(remoteServer: http://corefx-net-http11.azurewebsites.net/Echo.ashx)\" (#36594)"},{"Id":"429507926","IsPullRequest":true,"CreatedAt":"2019-04-04T22:21:45","Actor":"dotnet-maestro[bot]","Number":"36616","RawContent":null,"Title":"[release/3.0] Update dependencies from dotnet/coreclr","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/coreclr\r\n- **Build**: 20190404.74\r\n- **Date Produced**: 4/4/2019 10:19 PM\r\n- **Commit**: c917c7ed7f0acf77813c65ec9425e54008ae0f28\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk.IL** -> 3.0.0-preview3-27604-74\r\n  - **Microsoft.NETCore.ILAsm** -> 3.0.0-preview3-27604-74\r\n  - **Microsoft.NETCore.Runtime.CoreCLR** -> 3.0.0-preview3-27604-74\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/36616","RelatedDescription":"Open PR \"[release/3.0] Update dependencies from dotnet/coreclr\" (#36616)"},{"Id":"429506788","IsPullRequest":true,"CreatedAt":"2019-04-04T22:17:37","Actor":"ericstj","Number":"36615","RawContent":null,"Title":"Update Compat pack version and use stable DataSetExtensions","State":"open","Body":"","Url":"https://github.com/dotnet/corefx/pull/36615","RelatedDescription":"Open PR \"Update Compat pack version and use stable DataSetExtensions\" (#36615)"},{"Id":"429502944","IsPullRequest":true,"CreatedAt":"2019-04-04T22:04:20","Actor":"eanova","Number":"36614","RawContent":null,"Title":"Moved Interop  Locations For System.IO.Compression.Brotli","State":"open","Body":"","Url":"https://github.com/dotnet/corefx/pull/36614","RelatedDescription":"Open PR \"Moved Interop  Locations For System.IO.Compression.Brotli\" (#36614)"},{"Id":"429501200","IsPullRequest":false,"CreatedAt":"2019-04-04T21:58:30","Actor":"safern","Number":"36613","RawContent":null,"Title":"ApiCatalog build infrastructure should be updated","State":"open","Body":"The ApiCatalog build should just run after the official build and use its artfacts to restore. Also, it should be shared to generate the docs layout that we use for the docs team. I already have some targets to generate the docs layout that I should tweak for this to work for both scenarios.\r\n\r\nhttps://github.com/safern/corefx/commit/099258b357d72c5582ea6b87404a51211cb3e2a6\r\n\r\ncc: @ahsonkhan @ericstj @carlossanlop ","Url":"https://github.com/dotnet/corefx/issues/36613","RelatedDescription":"Open issue \"ApiCatalog build infrastructure should be updated\" (#36613)"},{"Id":"429479224","IsPullRequest":true,"CreatedAt":"2019-04-04T20:55:49","Actor":"jkoritzinsky","Number":"36612","RawContent":null,"Title":"Updated tests for new PtrToStringUTF8 behavior","State":"open","Body":"Updated tests to match behavior from dotnet/coreclr#23731.\r\n\r\nBlocked on dotnet/coreclr#23731","Url":"https://github.com/dotnet/corefx/pull/36612","RelatedDescription":"Open PR \"Updated tests for new PtrToStringUTF8 behavior\" (#36612)"},{"Id":"429472943","IsPullRequest":false,"CreatedAt":"2019-04-04T20:39:20","Actor":"BrennanConroy","Number":"36611","RawContent":null,"Title":"NullRef in HandleNull when parsing null object","State":"open","Body":"When calling JsonSerializer.Parse with type `typeof(object)` and a null json object there is a null ref in `HandleNull`.\r\n\r\nI'm guessing it's at line https://github.com/dotnet/corefx/blob/master/src/System.Text.Json/src/System/Text/Json/Serialization/JsonSerializer.Read.HandleNull.cs#L16 because the `JsonPropertyInfo` isn't set when the object type is `Object`\r\nhttps://github.com/dotnet/corefx/blob/master/src/System.Text.Json/src/System/Text/Json/Serialization/JsonSerializer.Read.cs#L30","Url":"https://github.com/dotnet/corefx/issues/36611","RelatedDescription":"Open issue \"NullRef in HandleNull when parsing null object\" (#36611)"},{"Id":"429471800","IsPullRequest":false,"CreatedAt":"2019-04-04T20:36:13","Actor":"ericwj","Number":"36610","RawContent":null,"Title":"Add Enum.TryParse overloads that allow restricting what input is considered valid","State":"open","Body":"It would be useful to have overloads of `Enum.TryParse` with an argument that allows specifying what kind of inputs are valid.\r\n\r\nThis would help the following primary use cases:\r\n\r\n1. To get `false` for *all* numeric strings. This is useful when the numeric value of the type underlying the enumeration is meaningless. E.g. the value `\"2\"` would parse to `System.PlatformID.Win32NT` but almost nobody cares and my guess is enumerations are quite commonly used to parse some kinds of invariant input.\r\n1. To get `false` for *undefined* numeric strings, but `true` for numeric strings that correspond to (a combination of) explicitly defined enumeration members. E.g. the value `\"16\"` happily parses to `(System.ConsoleColor)16` today but again almost nobody cares and this is almost always an unintended side effect of the underlying type being numeric.\r\n\r\nSecondary use cases would be:\r\n\r\n3. To add `NumberStyles` and `IFormatProvider` so the number parsing can be generalized by the user. Today, for example, `Enum.TryParse` simply does not take hexadecimal numbers, although it does take leading and trailing whitespace.\r\n3. To parse *exactly one* enumeration value, regardless of whether the enumeration type has the `FlagsAttribute` applied to it or not. If the enumeration defines names for the values 1, 2 and 4 and does not have a `FlagsAttribute`, this is in fact the same as 2. above. If it has a `FlagsAttribute`, then the value 3 would in the case of `ConsoleModifiers` correspond to `Alt | Shift` but in this mode Tryparse would still return `false` because the result is two members OR'ed together.\r\n\r\nHaving a way in the BCL to specify what types of input are considered valid also helps performance, since to parse first and then to check whether the value is in fact a (combination of) explicitly defined enumeration members involves duplicating the lookup of enumeration members, either in the framework or in user code. See e.g. #35697.\r\n\r\nThere is closely related work currently underway as part of #15453. \r\n\r\nThe way to implement this would probably be to introduce overload(s) for `Enum.TryParse` and `Enum.TryParse<T>` either:\r\n\r\na) with at least one extra boolean, but that would not be enough to cover the cases mentioned.\r\nb) to introduce an enumeration similar to [Enums.NET's EnumFormat](TylerBrinkley/Enums.NET/blob/master/Src/Enums.NET/EnumFormat.cs) albeit vastly simplified to strip all members that have to do with number formatting and all members having to do with alternative names in attributes or descriptions.\r\n\r\nIf this is something that is considered useful, I am happy to help specifying or building this on top of #15453.","Url":"https://github.com/dotnet/corefx/issues/36610","RelatedDescription":"Open issue \"Add Enum.TryParse overloads that allow restricting what input is considered valid\" (#36610)"},{"Id":"429370912","IsPullRequest":true,"CreatedAt":"2019-04-04T20:23:27","Actor":"Dotnet-GitSync-Bot","Number":"36603","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corert","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corert\n\n\n**Please REBASE this PR when merging**\n\n cc @marek-safar","Url":"https://github.com/dotnet/corefx/pull/36603","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corert\" (#36603)"},{"Id":"429450809","IsPullRequest":false,"CreatedAt":"2019-04-04T19:43:34","Actor":"ericwj","Number":"36609","RawContent":null,"Title":"tryparse enum numeric","State":"closed","Body":"\r\n","Url":"https://github.com/dotnet/corefx/issues/36609","RelatedDescription":"Closed issue \"tryparse enum numeric\" (#36609)"},{"Id":"429432918","IsPullRequest":false,"CreatedAt":"2019-04-04T18:57:03","Actor":"MaximLipnin","Number":"36608","RawContent":null,"Title":"Azure SQL DB connection hangs with zero-connection timeout ","State":"open","Body":"From https://github.com/mono/mono/issues/13065 \r\n\r\nThere is an issue when a connection to Azure SQL DB hangs on macOS if connection string contains `Connection Timeout=0`. \r\n\r\nMy repro sample is:\r\n```\r\nusing System;\r\nusing System.Data.SqlClient;\r\n\r\nnamespace MyTest\r\n{\r\n    public class Repro\r\n    {\r\n        public static void Main()\r\n        {\r\n            OpenSqlConnection();\r\n        }\r\n\r\n        private static void OpenSqlConnection()\r\n        {\r\n            string connectionString = GetConnectionString();\r\n            using (SqlConnection connection = new SqlConnection())\r\n            {\r\n                connection.ConnectionString = connectionString;\r\n                connection.Open();\r\n                Console.WriteLine(\"State: {0}\", connection.State);\r\n                Console.WriteLine(\"ConnectionString: {0}\",  connection.ConnectionString);\r\n            }\r\n        }\r\n\r\n        static private string GetConnectionString()\r\n        {\r\n            return \"<some connection string stuff>;Connection Timeout=0;\";\r\n        }\r\n    }\r\n}\r\n```\r\nIt's reproducible with Mono version which uses `System.Data.SqlClient` namespace from CoreFX. But there is no repro with Net Core 2.2. \r\n\r\nIt looks like it makes attempts to login and fails with `System.ObjectDisposedException` exception which is not the reason correctly to break login loop.\r\n\r\nIt occurs in `non-parallel` conditional branch of `SNITCPHandle` ctor:\r\nhttps://github.com/dotnet/corefx/blob/master/src/System.Data.SqlClient/src/System/Data/SqlClient/SNI/SNITcpHandle.cs#L145\r\n\r\nFurther in case of zero timeout `Cancel` callback might be invoked (and dispose socket) before `Socket.Connect`:\r\nhttps://github.com/dotnet/corefx/blob/master/src/System.Data.SqlClient/src/System/Data/SqlClient/SNI/SNITcpHandle.cs#L200-L216\r\n\r\nPossible fix is to pass infinite timeout to `Connect` method https://github.com/dotnet/corefx/blob/master/src/System.Data.SqlClient/src/System/Data/SqlClient/SNI/SNITcpHandle.cs#L145: \r\n```\r\n_socket = Connect(serverName, port, isInfiniteTimeOut ? TimeSpan.FromMilliseconds(Int32.MaxValue) : ts);\r\n```\r\nDoes it make sense for you?\r\n\r\n/cc @AfsanehR @marek-safar ","Url":"https://github.com/dotnet/corefx/issues/36608","RelatedDescription":"Open issue \"Azure SQL DB connection hangs with zero-connection timeout \" (#36608)"},{"Id":"429397679","IsPullRequest":false,"CreatedAt":"2019-04-04T18:19:42","Actor":"Eilon","Number":"36607","RawContent":null,"Title":"I can't use the RawSecurityDescriptor class","State":"closed","Body":"_From @amei130 on Thursday, 04 April 2019 01:47:40_\r\n\r\n### Describe the bug\r\nI can't use the RawSecurityDescriptor class, but I can find the RawSecurityDescriptor class in the API document\r\n\r\nUTL: https://docs.microsoft.com/zh-cn/dotnet/api/system.security.access control.rawsecurity descriptor?View=netcore-2.1\r\n### To Reproduce\r\nSteps to reproduce the behavior:\r\n1. Using this version of ASP.NET Core '2.1'\r\n2. Run this code '\r\nusing System;\r\nusing System.Security.AccessControl;\r\nnamespace DiscUtilsNetCore\r\n{\r\n    public class Class1\r\n    {\r\n        RawSecurityDescriptor de;\r\n    }\r\n}\r\n'\r\ncannot be compiled\r\n3. erroinf 严重性\t代码\t说明\t项目\t文件\t行\t禁止显示状态\r\n错误\tCS0246\t未能找到类型或命名空间名“RawSecurityDescriptor”(是否缺少 using 指令或程序集引用?)\tDiscUtilsNetCore\tD:\\Project\\DiscutilsNetcore\\DiscUtilsNetCore\\Class1.cs\t7\t活动的\r\n\r\n\r\n_Copied from original issue: aspnet/AspNetCore#9054_","Url":"https://github.com/dotnet/corefx/issues/36607","RelatedDescription":"Closed issue \"I can't use the RawSecurityDescriptor class\" (#36607)"},{"Id":"429389822","IsPullRequest":false,"CreatedAt":"2019-04-04T17:08:59","Actor":"lil-Toady","Number":"36606","RawContent":null,"Title":"X509Chain behaviour inconsistent on Windows and Linux","State":"open","Body":"We are running into a problem where the same chain is successfully built on Windows, populating ChainElements; yet fails with `PartialChain` on Linux, only having the leaf certificate in ChainElements;\r\n\r\nWhole trust chain is loaded into `ChainPolicy.ExtraStore` prior to validating the leaf. Verification flags do not affect the resulting `ChainStatus` and `ChainElements` in any way.\r\n\r\nIt's reproducable on 2.2 runtime with the following basic code:\r\n\r\n```csharp\r\nvar collection = new[]\r\n{\r\n    \"MIIFCzCCA3OgAwIBAgIBATANBgkqhkiG9w0BAQsFADAbMRkwFwYDVQQFExBiMmVkMTMwN2RlZDM5NjNkMB4XDTE2MDUyNjE3MTUxMFoXDTI2MDUyNDE3MTUxMFowHzEdMBsGA1UEAwwUQW5kcm9pZCBLZXlzdG9yZSBLZXkwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCm60G5QQ/NpwR9CrWn2etjkb72z/haaTQzZmfMZeCp88AcWR22PyQhj7Pp4f2S5mHq9GETpiVAg4wSN72gTEjInVVHO5JYGlOXQTNLZ6tepkNeD6rTbVDYY72LCCeWl4KIMulpwWtrJruCXgxHzfTYExcz3EdZNXD/sGYySSLxtfC27SUGFmwmP0n1PYYCNUYFaVxjjlqfL6iz5ecQV2fdK4ABRPJ0XAvmoYeTwY3zoPRyl/ZmrZQYpBLinT9WgU0zKa9rX/6TMVZmCqHn43W/wmRtUG4DwP8vpU4G3Aw1nyJlGlPy7H/j89HL+6YCKpnoV31jlw/Nr7ZTgjHNIrHnAgMBAAGjggHUMIIB0DAfBgNVHSMEGDAWgBR3CcbscN4IGsrMUuNrG779rbfYDDCCAUgGCisGAQQB1nkCAREEggE4MIIBNAIBAQoBAQIBAgoBAQQgl2KD4EKLG9Kz6BuxTVj+I2HYIsOBg1qq/mB+kT67w0QEADB9v4MQCAIGAWnD/cjGv4MRCAIGAWnoCkzGv4MSCAIGAWnoCkzGv4U9CAIGAWnEopRLv4VFSQRHMEUxHzAdBBhjb20udGVjaG5vbW9zLmJldGEuZGVidWcCAQwxIgQgf/ToOLDg3XJhBUTS13LecngSw0WLr7ztrS2YV7kKFyQwgYKhDjEMAgEAAgEBAgECAgEDogMCAQGjBAICCAClBTEDAgEEpggxBgIBBAIBBb+BSAUCAwEAAb+DdwIFAL+FPgMCAQC/hUAqMCgEIDPZSE/VEuYQvPAMUCgn89VaQVCI8nbGUGZXIV5iL6dwAQH/CgEAv4VBBQIDAV+Qv4VCBQIDAxSuMDUGCysGAQQBgWwLAxcHBCYwJKAiEyCXYoPgQosb0rPoG7FNWP4jYdgiw4GDWqr+YH6RPrvDRDALBgNVHQ8EBAMCBLAwHQYDVR0OBBYEFNbGoSz+4EENSYjkbPqOdiXuN7nRMA0GCSqGSIb3DQEBCwUAA4IBgQBhi505NSW2+nMIA5EEkbrt1/U3BleAVcayDDCwWCkkWIRrTTlJ2jXaZHy4HyZxjehjdP45Q1P/WN5rzKt46uG9BzRBGwrQIbrONZEHhRAiCeFoJ8SqyhHNAjrU3fO/1qGIns0Mep94ue8ZIAo2bgmVP2Xt1LtVoKRAmBdZXR/6wW7Q27bbM2eAdeZpprsbXaKu9CRQBYsa7yVqXgdAL6lrxRUoGkq+jkN2nr+ZoRizPE4JcNo27RCHvtSUlmHFjuPB1Z5zM9B3DaSuFvfgkVAliXR8WlD4Gs+4BBlEkGrHv2nAnMgIDmDtxmZymr8aKaUIbFSl2cLvRJJOiddVws3TGGxgrKCXAjDxuSqsDiH8Wo4oN6OX3IIwyVoBZ4M3bJpNLzajbpGAqNEyUwHt5ga/NNEn4K4BXCKubLsunp0R1Zn5YKO2z+M+ZaMJyBttVndJjQbCUItBChjxprLHtpTSyMiMvWy7fpD07jGC0PIDd8f4MoAqIJIzi0La0lX9Z0o=\",\r\n    \"MIIFGDCCAwCgAwIBAgIKCFglI0cIcIAShjANBgkqhkiG9w0BAQsFADAbMRkwFwYDVQQFExA4N2Y0NTE0NDc1YmEwYTJiMB4XDTE2MDUyNjE3MTUxMFoXDTI2MDUyNDE3MTUxMFowGzEZMBcGA1UEBRMQYjJlZDEzMDdkZWQzOTYzZDCCAaIwDQYJKoZIhvcNAQEBBQADggGPADCCAYoCggGBAMsgAyP+mV/J+A3DifMWf8E6bPnkv1uba2PEroASoPvv3YVPdvBattIaoxQxPelFX7OrbvsKG9JNWxOGbNiqt2m1A0SsswDqiiGCxVuV3nMRo5QPUDbNV0L+XVD0x5MnE9Y51uohHl/5YvqBgy4pVu9FWx2gTwlxmigLAAbOetN3efEdVjPCPFLThzERlQcMohKssjoZLGx+HLRYXNpEhbYmLRwdWGZUqazTHcmabAW8gRfrD6T69Y97v05G7rlYSxr7mO0hXZNjJCeVj8PF0EsUmgGoQ+kKMzsa5CKGqxGjpOylpEzL0nMIZzbyb7f+y5Ylbnqh1GqDWchy95FHMtsqFEGmKildDmAxyWEqkIo9SIPggOEF0O/UIyUD7pBBhhl0uFwOsq+4rUpT2Miyil23inRDgzWLBUcrByB7hnAXJ5aqoyKngqq/7aruZCn4pWQ5ZwsQLZ8hK6b0/CYsVEKDRWavEJnhF/pN1J0WprlsqLVmoxVibrP8hFukQSgHwQIDAQABo4HdMIHaMB0GA1UdDgQWBBR3CcbscN4IGsrMUuNrG779rbfYDDAfBgNVHSMEGDAWgBQOVW9G9Tt3Z+G5c9xV5q7qtP0n3TAMBgNVHRMBAf8EAjAAMA4GA1UdDwEB/wQEAwIHgDAkBgNVHR4EHTAboBkwF4IVaW52YWxpZDtlbWFpbDppbnZhbGlkMFQGA1UdHwRNMEswSaBHoEWGQ2h0dHBzOi8vYW5kcm9pZC5nb29nbGVhcGlzLmNvbS9hdHRlc3RhdGlvbi9jcmwvMDg1ODI1MjM0NzA4NzA4MDEyODYwDQYJKoZIhvcNAQELBQADggIBAFcTjuJ9sU6UBiVYPWusTzxUr6PHCZBsukEW1nztUOzhlamBujzueGqbVJGmA+PnYgs+nUyTDKEhG+ryVOJMJvEih8NQFWbpzbJF2qL/Eq9c9PXXbQLJOJL5cgprTvyS5xojb6zYI3THsifXo8L62sC/xibQ4NlRDaWnisRuzdVS2ZX69jTonrnMCSM1x2eBnf/VG9ktpBPoJ22WggeHZqrcYMcXwW9T7Xw5ACSfrR858Q+pFUdF9670EmFR7IxEdphfo46rDkmdbivQgaO/AiC/dMI0jrki8dHZRz8QmkiPw1dMnZL0Q2hGbKsLGA8XnEfy+4jWF9jk3kcOF4FuyxqSbjjBY51fDKWp+8PwkUlHGGiEgLBYXUQ+6mFUXWEzklUb6WnYPtYIqNjZ+2P4x+CN4XDA4gu6cdS0izUnbaIi3ztIWwA6E410UcKjUPklpt5l2t8b4+RS8KJPO4UpE4vBocxdoIH0+g2JyquNtSosAqp0/6tOaSjZUhLEmbQ0CuWCIMbDnaqp5nhEJSBmpgtPPcQa0RNBYpAv21IHIR/HTVHNNOHL/+HO1gVwnH7Th7vovuCWkoR5cp/sbcyrJ5wSONDV8U8TBpkMpKgwHiFrjolibskWeubhwLqqf7ESkpBWfm2/EwFktjz+8scgZ5wpQASGwABj1GzQbla9PfTQ\",\r\n    \"MIIFcTCCA1mgAwIBAgIKA4gmZ2BliZaFdDANBgkqhkiG9w0BAQsFADAbMRkwFwYDVQQFExBmOTIwMDllODUzYjZiMDQ1MB4XDTE2MDUyNjE3MDEzMloXDTI2MDUyNDE3MDEzMlowGzEZMBcGA1UEBRMQODdmNDUxNDQ3NWJhMGEyYjCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIBANJg1kWF4+IjeVraRVen2FuvvZo3y/qXwGVEnTrGR/YNC6J0Esr3S7lf+7TsWivQFgHevuL+0nYNdcSxass6Zwch4NUZaMgbAaIkAv6tQNanmBYPopgup611NIRv+M+KoQ6QM0Ce0IYmV3HO/89S4fD5K35oYgPY/f0CUwMZrCge3rJ7YWIgBNKeNokKmtjMnJBm6nk6O7Vua/SOPQxx/2QHc+41qUN+Vcm+ahb08MjgUT0ytRhZJHnOu6HLd+lCJXogurVDgyheB5G5rFZmySMM+nEJvb5seMg/fNo4b+VeFxBshoLnUETo76+P755Ld2nWV7TOLMmW2fggLyl0TEYim2gRQ/T25pCivQbMNDhcmDeKrMX4n2u9elE6QjDdBhNBNIN5vcT0GdH2i278BqiaVkXw9fPohwl43XRmjeweor/991KOC/L1UhRMKt5jAacdfZ4r3HK5HBlYZJdy6gDO/y9KQB1sT332kewf4G1gyoY1jXv59noqL+41MpKikrWmvF/Sn2MPcWORyz1DMFpYJUbSEpSE5SgyejFVYIbjFBJ1kIIsPAChnrSlr3z2AFSKCyQuyJqbJUsKtBBXt6gyHyxE0JxRZ+4egBurNpiiv+K0m7ssTmrbffwaxJCkJd6phLgt3DcSflrG7sSKwOqsSB7wXuktjKnGMhh3tTibAgMBAAGjgbYwgbMwHQYDVR0OBBYEFA5Vb0b1O3dn4blz3FXmruq0/SfdMB8GA1UdIwQYMBaAFDZh4QB8iAUJUYtEbEf/GkzJ6k8SMA8GA1UdEwEB/wQFMAMBAf8wDgYDVR0PAQH/BAQDAgGGMFAGA1UdHwRJMEcwRaBDoEGGP2h0dHBzOi8vYW5kcm9pZC5nb29nbGVhcGlzLmNvbS9hdHRlc3RhdGlvbi9jcmwvRThGQTE5NjMxNEQyRkExODANBgkqhkiG9w0BAQsFAAOCAgEADg1xSogKWFO2MRR92iIxxgbW7zsiTdelwD+/xrRko/uSwsxn9GwkJUlu9ssI1qgNlAZ/jIw8sXfNwj/HXqOFbfellBPNWlzzmwoN4YJC9Mk/rfz7fKonBMwcEkUV6+ZwoGzed3dUmx8CBXYDpPxsB/TLu1n1y+1Y2DCbbjz3dsE+TDCYS0JpguFHg9v8KSPiyStdjODGxegFBpgk85suP+WlKvCbnt/XWGGeZP5yD8yw9iGKeCRIcPDWARhTYpf7522um89vXqLB0bs2iBj4a4KH+H0BIAu6pnzRDsNgqY5abpEOCHxJXgsCvhVqeE/fC+xo02HLJMFk4AUqvZ1zG6/7cDjDZDqFZmcdCuQ/+4YycR0DEQa8CsRQIZ9k4+BTvFfUgsSidyMfW8qghraMkOYNew0wDc1FGfOgdlauffbHXimykq18Ec8EGmSEtguM2wt88OtcYCG2thjNbOXws26TmLoJwGr2uKgFVfqylLExXAli4Py/Bb1GlYO4dYk5dcK0c1Tjaxp1trhBLLyGLAmJqcHICteHzFSUE6Vd3StQEw3EqCskdAwdZHSyZCCcjXAUulsNB76I//QzDIzX9M+dV4emCiwd3jFT8YTbQg2JBI+eDIfDZ3f3LUFQII6+nB0PTQrMNICgD9at+Ed5Daqb628Dxgmd6YkqNRVGIU0=\",\r\n    \"MIIFYDCCA0igAwIBAgIJAOj6GWMU0voYMA0GCSqGSIb3DQEBCwUAMBsxGTAXBgNVBAUTEGY5MjAwOWU4NTNiNmIwNDUwHhcNMTYwNTI2MTYyODUyWhcNMjYwNTI0MTYyODUyWjAbMRkwFwYDVQQFExBmOTIwMDllODUzYjZiMDQ1MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAr7bHgiuxpwHsK7Qui8xUFmOr75gvMsd/dTEDDJdSSxtf6An7xyqpRR90PL2abxM1dEqlXnf2tqw1Ne4Xwl5jlRfdnJLmN0pTy/4lj4/7tv0Sk3iiKkypnEUtR6WfMgH0QZfKHM1+di+y9TFRtv6y//0rb+T+W8a9nsNL/ggjnar86461qO0rOs2cXjp3kOG1FEJ5MVmFmBGtnrKpa73XpXyTqRxB/M0n1n/W9nGqC4FSYa04T6N5RIZGBN2z2MT5IKGbFlbC8UrW0DxW7AYImQQcHtGl/m00QLVWutHQoVJYnFPlXTcHYvASLu+RhhsbDmxMgJJ0mcDpvsC4PjvB+TxywElgS70vE0XmLD+OJtvsBslHZvPBKCOdT0MS+tgSOIfga+z1Z1g7+DVagf7quvmag8jfPioyKvxnK/EgsTUVi2ghzq8wm27ud/mIM7AY2qEORR8Go3TVB4HzWQgpZrt3i5MIlCaY504LzSRiigHCzAPlHws+W0rB5N+er5/2pJKnfBSDiCiFAVtCLOZ7gLiMm0jhO2B6tUXHI/+MRPjy02i59lINMRRev56GKtcd9qO/0kUJWdZTdA2XoS82ixPvZtXQpUpuL12ab+9EaDK8Z4RHJYYfCT3Q5vNAXaiWQ+8PTWm2QgBR/bkwSWc+NpUFgNPN9PvQi8WEg5UmAGMCAwEAAaOBpjCBozAdBgNVHQ4EFgQUNmHhAHyIBQlRi0RsR/8aTMnqTxIwHwYDVR0jBBgwFoAUNmHhAHyIBQlRi0RsR/8aTMnqTxIwDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMCAYYwQAYDVR0fBDkwNzA1oDOgMYYvaHR0cHM6Ly9hbmRyb2lkLmdvb2dsZWFwaXMuY29tL2F0dGVzdGF0aW9uL2NybC8wDQYJKoZIhvcNAQELBQADggIBACDIw41L3KlXG0aMiS//cqrG+EShHUGo8HNsw30W1kJtjn6UBwRM6jnmiwfBPb8VA91chb2vssAtX2zbTvqBJ9+LBPGCdw/E53Rbf86qhxKaiAHOjpvAy5Y3m00mqC0w/Zwvju1twb4vhLaJ5NkUJYsUS7rmJKHHBnETLi8GFqiEsqTWpG/6ibYCv7rYDBJDcR9W62BW9jfIoBQcxUCUJouMPH25lLNcDc1ssqvC2v7iUgI9LeoM1sNovqPmQUiG9rHli1vXxzCyaMTjwftkJLkf6724DFhuKug2jITV0QkXvaJWF4nUaHOTNA4uJU9WDvZLI1j83A+/xnAJUucIv/zGJ1AMH2boHqF8CY16LpsYgBt6tKxxWH00XcyDCdW2KlBCeqbQPcsFmWyWugxdcekhYsAWyoSf818NUsZdBWBaR/OukXrNLfkQ79IyZohZbvabO/X+MVT3rriAoKc8oE2Uws6DF+60PV7/WIPjNvXySdqspImSN78mflxDqwLqRBYkA3I75qppLGG9rp7UCdRjxMl8ZDBld+7yvHVgt1cVzJx9xnyGCC23UaicMDSXYrB4I4WHXPGjxhZuCuPBLTdOLU8YRvMYdEvYebWHMpvwGCF6bAx3JBpIeOQ1wDB5y0USicV3YgYGmi+NZfhA4URSh77Yd6uuJOJENRaNVTzk\"\r\n};\r\n\r\nvar certificates = new X509Certificate2[collection.Length];\r\nfor (int i = 0; i < collection.Length; ++i)\r\n{\r\n    var bytes = Convert.FromBase64String(collection[i]);\r\n\r\n    certificates[i] = new X509Certificate2(bytes);\r\n}\r\n\r\nusing (var chain = new X509Chain())\r\n{\r\n    chain.ChainPolicy.VerificationFlags = X509VerificationFlags.AllFlags;\r\n    chain.ChainPolicy.RevocationMode = X509RevocationMode.NoCheck;\r\n\r\n    for (int i = 1; i < certificates.Length; ++i)\r\n    {\r\n        chain.ChainPolicy.ExtraStore.Add(certificates[i]);\r\n    }\r\n\r\n    var success = chain.Build(certificates[0]);\r\n\r\n    Console.WriteLine(\"Success: {0}\", success);\r\n\r\n    Console.WriteLine(\"Statuses:\");\r\n    foreach (var status in chain.ChainStatus)\r\n    {\r\n        Console.WriteLine(\"\\t{0}\", status.Status);\r\n    }\r\n\r\n    Console.WriteLine(\"Elements:\");\r\n    foreach (var element in chain.ChainElements)\r\n    {\r\n        Console.WriteLine(\"\\t{0}\", element.Certificate.Subject);\r\n    }\r\n}\r\n```\r\n\r\nOn windows output is:\r\n```\r\nSuccess: True\r\nStatuses:\r\n        UntrustedRoot\r\n        NotValidForUsage\r\n        InvalidBasicConstraints\r\nElements:\r\n        CN=Android Keystore Key\r\n        SERIALNUMBER=b2ed1307ded3963d\r\n        SERIALNUMBER=87f4514475ba0a2b\r\n        SERIALNUMBER=f92009e853b6b045\r\n```\r\nAs expected, the whole chain is there.\r\n\r\nYet on Linux it fails to build:\r\n```\r\nSuccess: True\r\nStatuses:\r\n\tPartialChain\r\nElements:\r\n\tCN=Android Keystore Key\r\n```\r\nI'm also attaching the example project with Dockerfile based `dotnet:2.2-aspnetcore-runtime` (and docker launch target).\r\n\r\n[X509ChainExample.zip](https://github.com/dotnet/corefx/files/3044657/X509ChainExample.zip)\r\n","Url":"https://github.com/dotnet/corefx/issues/36606","RelatedDescription":"Open issue \"X509Chain behaviour inconsistent on Windows and Linux\" (#36606)"},{"Id":"429383876","IsPullRequest":false,"CreatedAt":"2019-04-04T16:54:02","Actor":"danmosemsft","Number":"36605","RawContent":null,"Title":"Audit [OuterLoop] tests for candidates to promote to inner loop","State":"open","Body":"We have 1083 outerloop tests. Only 19.6% are in networking (which surprised me since at one point we added most of the networking tests to outerloop). The largest parts of the rest are concurrency related - tasks/threading/linq.parallel - but there are other groups.\r\n\r\nIn many cases we have improved test stability since the tests were marked. it would be nice to audit the tests and any that are \r\n1. fast\r\n1. stable\r\n1. not dangerous/impactful\r\n\r\nshould be promoted to inner loop so they run in CI and on dev machines and we get upstream protection.\r\n\r\nIt should be possible to query for 1 and 2 by querying Kusto. Then inspect the tests briefly to check they satisfy 3. Then promote them.\r\n\r\n@wfurt @stephentoub ","Url":"https://github.com/dotnet/corefx/issues/36605","RelatedDescription":"Open issue \"Audit [OuterLoop] tests for candidates to promote to inner loop\" (#36605)"},{"Id":"429376314","IsPullRequest":true,"CreatedAt":"2019-04-04T16:35:28","Actor":"stephentoub","Number":"36604","RawContent":null,"Title":"Update StreamWriters tests for BaseStream dispose change","State":"open","Body":"Depends on https://github.com/dotnet/coreclr/pull/23725","Url":"https://github.com/dotnet/corefx/pull/36604","RelatedDescription":"Open PR \"Update StreamWriters tests for BaseStream dispose change\" (#36604)"},{"Id":"429345134","IsPullRequest":true,"CreatedAt":"2019-04-04T16:20:38","Actor":"Dotnet-GitSync-Bot","Number":"36602","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corert","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corert\n\n\n**Please REBASE this PR when merging**\n\n cc @sywhang @stephentoub","Url":"https://github.com/dotnet/corefx/pull/36602","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corert\" (#36602)"},{"Id":"429036786","IsPullRequest":true,"CreatedAt":"2019-04-04T15:28:56","Actor":"Dotnet-GitSync-Bot","Number":"36589","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @filipnavara","Url":"https://github.com/dotnet/corefx/pull/36589","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#36589)"},{"Id":"429256552","IsPullRequest":true,"CreatedAt":"2019-04-04T15:27:00","Actor":"dotnet-maestro[bot]","Number":"36599","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190403.11\r\n- **Date Produced**: 4/4/2019 8:25 AM\r\n- **Commit**: 80622592a4e993200cb5b495b802abc1ee2fe96d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview4-27603-11\r\n  - **Microsoft.NETCore.DotNetHost** -> 3.0.0-preview4-27603-11\r\n  - **Microsoft.NETCore.DotNetHostPolicy** -> 3.0.0-preview4-27603-11\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/36599","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#36599)"},{"Id":"429339665","IsPullRequest":true,"CreatedAt":"2019-04-04T15:20:10","Actor":"bartonjs","Number":"36601","RawContent":null,"Title":"Provide a temporary RSA decryption buffer when dest is too small","State":"open","Body":"Fixes #33561.","Url":"https://github.com/dotnet/corefx/pull/36601","RelatedDescription":"Open PR \"Provide a temporary RSA decryption buffer when dest is too small\" (#36601)"},{"Id":"429256501","IsPullRequest":false,"CreatedAt":"2019-04-04T15:05:52","Actor":"deokershesh","Number":"36598","RawContent":null,"Title":"ODBC .NET Bridge issue","State":"closed","Body":"I am trying to change ODBC bridge code to rename to different APIs, so that it could work with other databases natively as well. I downloaded/cloned \"corefx\", built it successfully. Now I want to change API name let say from \"OdbcConnection\" to \"AbcConnection\". I made relevant changes in the code, under folders D:\\corefx\\src\\System.Data.Odbc\\src\\System\\Data\\Odbc & D:\\corefx\\src\\Common\\src\\Interop, however I am getting below error! \r\n\r\nC:\\Users\\newuser\\.nuget\\packages\\microsoft.dotnet.apicompat\\1.0.0-beta.19128.2\\build\\Microsoft.DotNet.ApiCompat.targets(72,5): error : MembersMustExist : Member 'System.Data.Odbc.OdbcCommand..ctor(System.String, System.Data.Odbc.OdbcConnection)' does not exist in the implementation but it does exist in the contract. [D:\\corefx\\src\\System.Data.Odbc\\src\\System.Data.Odbc.csproj]\r\n\r\nSimilarly there are 8 more errors.\r\n\r\nCould someone help to answer following?\r\nWhat all other changes needed to change the name of API?\r\n\r\nThanks for your help.","Url":"https://github.com/dotnet/corefx/issues/36598","RelatedDescription":"Closed issue \"ODBC .NET Bridge issue\" (#36598)"},{"Id":"429259607","IsPullRequest":true,"CreatedAt":"2019-04-04T12:48:05","Actor":"dotnet-maestro[bot]","Number":"36600","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190404.1\r\n- **Date Produced**: 4/4/2019 11:13 AM\r\n- **Commit**: a4fe9d1599d3ba16534b19b92657cfaac80a65dd\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.Platforms** -> 3.0.0-preview4.19204.1\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/36600","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/corefx\" (#36600)"},{"Id":"429244207","IsPullRequest":true,"CreatedAt":"2019-04-04T12:13:06","Actor":"ViktorHofer","Number":"36597","RawContent":null,"Title":"Use common .tools dir for global tools","State":"open","Body":"We should move global toos out of the artifacts directory and use the arcade common .tools directory. See https://github.com/dotnet/corefx/pull/36560#discussion_r271835884.\r\n\r\nNet improvement: Faster restore and less network traffic per every root build (same as we did for dotnet cli)","Url":"https://github.com/dotnet/corefx/pull/36597","RelatedDescription":"Open PR \"Use common .tools dir for global tools\" (#36597)"},{"Id":"429243892","IsPullRequest":true,"CreatedAt":"2019-04-04T12:12:17","Actor":"dotnet-maestro[bot]","Number":"36596","RawContent":null,"Title":"[master] Update dependencies from dotnet/coreclr","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/coreclr\r\n- **Build**: 20190403.72\r\n- **Date Produced**: 4/4/2019 12:42 AM\r\n- **Commit**: a7dd6192530dec1d424c359233a1b92f559fa92a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk.IL** -> 3.0.0-preview4-27603-72\r\n  - **Microsoft.NETCore.ILAsm** -> 3.0.0-preview4-27603-72\r\n  - **Microsoft.NETCore.Runtime.CoreCLR** -> 3.0.0-preview4-27603-72\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/36596","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/coreclr\" (#36596)"},{"Id":"429240201","IsPullRequest":true,"CreatedAt":"2019-04-04T12:03:17","Actor":"dotnet-maestro[bot]","Number":"36595","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190403.10\r\n- **Date Produced**: 4/4/2019 1:43 AM\r\n- **Commit**: 811fda44a88dcfe3e42a17bb34467f5764836c65\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions** -> 2.4.0-beta.19203.10\r\n  - **Microsoft.DotNet.VersionTools.Tasks** -> 1.0.0-beta.19203.10\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19203.10\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19203.10\r\n  - **Microsoft.DotNet.Build.Tasks.Configuration** -> 1.0.0-beta.19203.10\r\n  - **Microsoft.DotNet.Build.Tasks.Feed** -> 2.2.0-beta.19203.10\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19203.10\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19203.10\r\n  - **Microsoft.DotNet.CoreFxTesting** -> 1.0.0-beta.19203.10\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19203.10\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19203.10\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19203.10\r\n  - **Microsoft.DotNet.RemoteExecutor** -> 1.0.0-beta.19203.10\r\n  - **Microsoft.DotNet.SourceRewriter** -> 1.0.0-beta.19203.10\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/36595","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/arcade\" (#36595)"},{"Id":"429144416","IsPullRequest":false,"CreatedAt":"2019-04-04T08:23:28","Actor":"westfin","Number":"36592","RawContent":null,"Title":"What kind EqualityComparer use to unknown in compile time type?","State":"open","Body":"Is it possible get `EqualityComparer<>.Default`\r\nby `Type` in runtime?\r\nIn compile time I don't know what type will be.\r\n\r\nIs it correct to use `EqualityComparer<object>.Default`?\r\nCan there be problems with this?\r\n\r\n","Url":"https://github.com/dotnet/corefx/issues/36592","RelatedDescription":"Open issue \"What kind EqualityComparer use to unknown in compile time type?\" (#36592)"},{"Id":"429120046","IsPullRequest":false,"CreatedAt":"2019-04-04T07:19:53","Actor":"amei130","Number":"36591","RawContent":null,"Title":"I can't use the RawSecurityDescriptor class","State":"open","Body":"Describe the bug\r\nI can't use the RawSecurityDescriptor class, but I can find the RawSecurityDescriptor class in the API document\r\n\r\nUTL: https://docs.microsoft.com/zh-cn/dotnet/api/system.security.access control.rawsecurity descriptor?View=netcore-2.1\r\n\r\nTo Reproduce\r\nSteps to reproduce the behavior:\r\n\r\nUsing this version of ASP.NET Core '2.1'\r\nRun this code '\r\nusing System;\r\nusing System.Security.AccessControl;\r\nnamespace DiscUtilsNetCore\r\n{\r\npublic class Class1\r\n{\r\nRawSecurityDescriptor de;\r\n}\r\n}\r\n'\r\ncannot be compiled\r\nerroinf 严重性\t代码\t说明\t项目\t文件\t行\t禁止显示状态\r\n错误\tCS0246\t未能找到类型或命名空间名“RawSecurityDescriptor”(是否缺少 using 指令或程序集引用?) DiscUtilsNetCore\tD:\\Project\\DiscutilsNetcore\\DiscUtilsNetCore\\Class1.cs\t7\t活动的","Url":"https://github.com/dotnet/corefx/issues/36591","RelatedDescription":"Open issue \"I can't use the RawSecurityDescriptor class\" (#36591)"},{"Id":"429047887","IsPullRequest":false,"CreatedAt":"2019-04-04T01:56:31","Actor":"tcostin","Number":"36590","RawContent":null,"Title":"WinForms ComboBox SelectedIndexChanged event behaves inconsistently","State":"open","Body":"If the SelectedIndex property is set programatically, the event does not fire unless {new value <> old value}. However, if the user accesses the drop-down and selects an item (via the GUI), the event always fires (even in the case where the new value is the same as the old value).\r\n\r\nLooking at the reference source, this can be traced to the fact that WmReflectCommand always calls OnSelectedIndexChanged() when processing CBN_SELCHANGE, but the SelectedIndex property setter compares old and new values before doing anything.\r\n\r\nIt's not 100% clear that this is a bug (there is some sense in working the way it does), but it is definitely misleading and should be documented if this behavior is by design.","Url":"https://github.com/dotnet/corefx/issues/36590","RelatedDescription":"Open issue \"WinForms ComboBox SelectedIndexChanged event behaves inconsistently\" (#36590)"}],"ResultType":"GitHubIssue"},"Roslyn-Issues":{"Issues":[{"Id":"429565946","IsPullRequest":true,"CreatedAt":"2019-04-05T03:14:38","Actor":"gafter","Number":"34781","RawContent":null,"Title":"Report unboxing conversion of a possibly null value.","State":"open","Body":"Fixes #33359","Url":"https://github.com/dotnet/roslyn/pull/34781","RelatedDescription":"Open PR \"Report unboxing conversion of a possibly null value.\" (#34781)"},{"Id":"429524678","IsPullRequest":true,"CreatedAt":"2019-04-05T01:00:12","Actor":"dotnet-bot","Number":"34770","RawContent":null,"Title":"Merge master to features/editorconfig-in-compiler","State":"closed","Body":"\nThis is an automatically generated pull request from master into features/editorconfig-in-compiler.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/editorconfig-in-compiler\ngit reset --hard upstream/features/editorconfig-in-compiler\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/editorconfig-in-compiler --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/34770","RelatedDescription":"Closed or merged PR \"Merge master to features/editorconfig-in-compiler\" (#34770)"},{"Id":"429524696","IsPullRequest":true,"CreatedAt":"2019-04-05T01:00:07","Actor":"dotnet-bot","Number":"34771","RawContent":null,"Title":"Merge master to features/lspSupport","State":"closed","Body":"\nThis is an automatically generated pull request from master into features/lspSupport.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/lspSupport\ngit reset --hard upstream/features/lspSupport\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/lspSupport --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/34771","RelatedDescription":"Closed or merged PR \"Merge master to features/lspSupport\" (#34771)"},{"Id":"429537961","IsPullRequest":false,"CreatedAt":"2019-04-05T00:35:05","Actor":"ivanbasov","Number":"34780","RawContent":null,"Title":"Intellisense misses internal LINQ variables available in Locals, Watch and Immediate windows","State":"open","Body":"**Version Used**: 16.0, 16.1\r\n\r\n**Steps to Reproduce**:\r\n```\r\nusing System;\r\nusing System.Linq;\r\n\r\nclass LetSample1\r\n{\r\n    static void Main(string[] args)\r\n    {\r\n        string[] strings = { \"A penny saved is a penny earned.\", \"The early bird catches the worm.\", \"The pen is mightier than the sword.\" };\r\n        // Split the sentence into an array of words            \r\n        // and select those whose first letter is a vowel.           \r\n        var earlyBirdQuery =\r\n            (from sentence in strings\r\n             let words = sentence.Split(' ')\r\n             from word in words\r\n             let w = word.ToLower()\r\n             where w[0] == 'a' || w[0] == 'e'\r\n             || w[0] == 'i' || w[0] == 'o'\r\n             || w[0] == 'u'\r\n             select new\r\n             {\r\n                 FirstWord = w.First(),\r\n                 LastWord = w.Last()\r\n             }).ToList();\r\n        Console.ReadLine();\r\n    }\r\n}\r\n```\r\n\r\nPut a breakpoint at `select new`\r\n`word` and `w` are available in the Locals window. They can be evaluated in the Watch window and in the Immediate window.\r\n\r\nType `w` in the Watch window or in the Immediate Window. \r\n**Expected**\r\nIntellisense contains `word` and `w`\r\n**Actual**\r\nIntellisense does not contain `word` and `w`","Url":"https://github.com/dotnet/roslyn/issues/34780","RelatedDescription":"Open issue \"Intellisense misses internal LINQ variables available in Locals, Watch and Immediate windows\" (#34780)"},{"Id":"429537813","IsPullRequest":false,"CreatedAt":"2019-04-05T00:34:10","Actor":"gafter","Number":"34779","RawContent":null,"Title":"Array of pointer not diagnosed","State":"open","Body":"As observed by https://github.com/dotnet/roslyn/issues/34693#issuecomment-479675820 the following program fails to report the incorrect use of a pointer type after https://github.com/dotnet/roslyn/pull/34739\r\n\r\n``` c#\r\npublic class A {\r\n    public class B {}\r\n}\r\n\r\npublic class C<T> : A {\r\n    public C<string*[]>.B field; // error: pointer to managed type\r\n}\r\n```\r\n\r\nhere is another case that isn't properly diagnosed:\r\n\r\n``` c#\r\npublic class A\r\n{\r\n    public class Inner {}\r\n}\r\n\r\npublic class B<T> : A where T : unmanaged\r\n{\r\n}\r\n\r\npublic class C\r\n{\r\n    B<string>.Inner field;\r\n}\r\n```\r\n","Url":"https://github.com/dotnet/roslyn/issues/34779","RelatedDescription":"Open issue \"Array of pointer not diagnosed\" (#34779)"},{"Id":"429537663","IsPullRequest":true,"CreatedAt":"2019-04-05T00:33:12","Actor":"RikkiGibson","Number":"34778","RawContent":null,"Title":"Readonly struct metadata as source","State":"open","Body":"Resolves #34650 ","Url":"https://github.com/dotnet/roslyn/pull/34778","RelatedDescription":"Open PR \"Readonly struct metadata as source\" (#34778)"},{"Id":"429537277","IsPullRequest":false,"CreatedAt":"2019-04-05T00:31:10","Actor":"tmat","Number":"34777","RawContent":null,"Title":"VS hangs waiting in LightBulbSession","State":"open","Body":"**Version Used**: \r\n![image](https://user-images.githubusercontent.com/41759/55596803-5d17c980-56ff-11e9-9be1-3d30fdbbec38.png)\r\n\r\nCrash dump:\r\n\r\n`%internal_share%\\public\\tomat\\Bugs\\34777`\r\n\r\nStack trace:\r\n```\r\n \tmscorlib.dll!System.Threading.Tasks.Task.Wait(int millisecondsTimeout, System.Threading.CancellationToken cancellationToken)\tUnknown\r\n>\tMicrosoft.CodeAnalysis.EditorFeatures.Wpf.dll!Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.InvokeWorker(System.Func<Microsoft.CodeAnalysis.Document> getFromDocument, Microsoft.CodeAnalysis.Shared.Utilities.IProgressTracker progressTracker, System.Threading.CancellationToken cancellationToken) Line 170\tC#\r\n \tMicrosoft.CodeAnalysis.EditorFeatures.Wpf.dll!Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.InvokeCore.AnonymousMethod__0() Line 132\tC#\r\n \tMicrosoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformAction(Microsoft.CodeAnalysis.Extensions.IExtensionManager extensionManager, object extension, System.Action action)\tUnknown\r\n \tMicrosoft.CodeAnalysis.EditorFeatures.Wpf.dll!Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.InvokeCore(System.Func<Microsoft.CodeAnalysis.Document> getFromDocument, Microsoft.CodeAnalysis.Shared.Utilities.IProgressTracker progressTracker, System.Threading.CancellationToken cancellationToken) Line 133\tC#\r\n \tMicrosoft.CodeAnalysis.EditorFeatures.Wpf.dll!Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.InnerInvoke(Microsoft.CodeAnalysis.Shared.Utilities.IProgressTracker progressTracker, System.Threading.CancellationToken cancellationToken) Line 119\tC#\r\n \tMicrosoft.CodeAnalysis.EditorFeatures.Wpf.dll!Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.Invoke.AnonymousMethod__0(Microsoft.CodeAnalysis.Editor.Host.IWaitContext waitContext) Line 102\tC#\r\n \tMicrosoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Implementation.Utilities.VisualStudioWaitIndicator.Wait(string title, string message, bool allowCancel, bool showProgress, System.Action<Microsoft.CodeAnalysis.Editor.Host.IWaitContext> action)\tUnknown\r\n \tMicrosoft.CodeAnalysis.EditorFeatures.Wpf.dll!Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.Invoke(System.Threading.CancellationToken cancellationToken) Line 97\tC#\r\n \tMicrosoft.VisualStudio.Platform.VSEditor.dll!Microsoft.VisualStudio.Language.Intellisense.Implementation.LightBulbSession.InvokeAction.AnonymousMethod__0(Microsoft.VisualStudio.Language.Intellisense.Utilities.IWaitContext c)\tUnknown\r\n \tMicrosoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.VisualStudioWaitIndicator.Wait(string title, string message, bool allowCancel, System.Action<Microsoft.VisualStudio.Language.Intellisense.Utilities.IWaitContext> action)\tUnknown\r\n \tMicrosoft.VisualStudio.Platform.VSEditor.dll!Microsoft.VisualStudio.Language.Intellisense.Implementation.LightBulbSession.InvokeAction(string categoryName, Microsoft.VisualStudio.Language.Intellisense.ISuggestedAction action, int menuIndex)\tUnknown\r\n \tMicrosoft.VisualStudio.Platform.VSEditor.dll!Microsoft.VisualStudio.Language.Intellisense.Implementation.LightBulb.GetMenuItemForAction.AnonymousMethod__3()\tUnknown\r\n\r\n```\r\n","Url":"https://github.com/dotnet/roslyn/issues/34777","RelatedDescription":"Open issue \"VS hangs waiting in LightBulbSession\" (#34777)"},{"Id":"429535813","IsPullRequest":false,"CreatedAt":"2019-04-05T00:23:06","Actor":"heejaechang","Number":"34776","RawContent":null,"Title":"Support GetServiceAsync in Roslyn","State":"open","Body":"VS is moving from GetService to GetServiceAsync but Roslyn's service is staying as synchronous API.\r\n\r\nall is good usually, but there is some case where we want to set up service based on some info from VS which we need to use GetServiceAsync to get information from BG such as \r\nthis\r\nhttp://source.roslyn.io/#Microsoft.VisualStudio.LanguageServices/Experimentation/VisualStudioExperimentationService.cs,35\r\n\r\nright now, we have options either does what the above code does or make initialization lazy.\r\n\r\nit would be nice if we also have code path that is GetServiceAsync that calls InitializeAsync after service creation.\r\n\r\nand we have something like IAsyncLanguageService and IAsyncWorkspaceService that uses the new pattern.\r\n\r\nthe point is having a supported way to get a service asynchronously whatever way that is.","Url":"https://github.com/dotnet/roslyn/issues/34776","RelatedDescription":"Open issue \"Support GetServiceAsync in Roslyn\" (#34776)"},{"Id":"429534391","IsPullRequest":true,"CreatedAt":"2019-04-05T00:15:36","Actor":"dibarbet","Number":"34775","RawContent":null,"Title":"Add telemetry to toggle block comment.","State":"open","Body":"Add some telemetry for toggle block comment.\r\n\r\nCan retrieve data like # invocations (total, per user, etc...), split it up by content type (language).  Can also look at the performance in relation to the document size.","Url":"https://github.com/dotnet/roslyn/pull/34775","RelatedDescription":"Open PR \"Add telemetry to toggle block comment.\" (#34775)"},{"Id":"429530662","IsPullRequest":false,"CreatedAt":"2019-04-04T23:56:25","Actor":"RikkiGibson","Number":"34774","RawContent":null,"Title":"'readonly event' should be suggested within struct","State":"open","Body":"When I start a member declaration with: `readonly event...`, `event` is no longer in the suggestion list and gets substituted with EventArgs.","Url":"https://github.com/dotnet/roslyn/issues/34774","RelatedDescription":"Open issue \"'readonly event' should be suggested within struct\" (#34774)"},{"Id":"429524741","IsPullRequest":true,"CreatedAt":"2019-04-04T23:27:57","Actor":"dotnet-bot","Number":"34773","RawContent":null,"Title":"Merge master to demos/records","State":"open","Body":"\nThis is an automatically generated pull request from master into demos/records.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-demos/records\ngit reset --hard upstream/demos/records\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-demos/records --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/34773","RelatedDescription":"Open PR \"Merge master to demos/records\" (#34773)"},{"Id":"429524719","IsPullRequest":true,"CreatedAt":"2019-04-04T23:27:51","Actor":"dotnet-bot","Number":"34772","RawContent":null,"Title":"Merge master to features/NullableDogfood","State":"open","Body":"\nThis is an automatically generated pull request from master into features/NullableDogfood.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/NullableDogfood\ngit reset --hard upstream/features/NullableDogfood\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/NullableDogfood --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/34772","RelatedDescription":"Open PR \"Merge master to features/NullableDogfood\" (#34772)"},{"Id":"429523991","IsPullRequest":true,"CreatedAt":"2019-04-04T23:24:53","Actor":"gafter","Number":"34769","RawContent":null,"Title":"Simplify the representation of `NullableWalker.LocalState` to a `BitVector`","State":"open","Body":"Fixes #34766\r\n\r\nPreviously, every instance of `LocalState` required allocation.  Now we use `BitVector`, which stores state information inline in the bits of a primitive.\r\n\r\nWith the previous implementation of `BitVector` (32 bits inline), only about 1.3% of our nullable tests would require allocating any memory at all for nullable states.  However, I've updated `BitVector` to have 64 bits inline, and now only three of our tests require allocating memory for states.  Those three tests heavily exercise tuple conversions.\r\n","Url":"https://github.com/dotnet/roslyn/pull/34769","RelatedDescription":"Open PR \"Simplify the representation of `NullableWalker.LocalState` to a `BitVector`\" (#34769)"},{"Id":"429493390","IsPullRequest":true,"CreatedAt":"2019-04-04T23:21:02","Actor":"agocke","Number":"34765","RawContent":null,"Title":"Add back-compat overloads to prevent breaking change","State":"closed","Body":"The changes here are just adding the back compat overloads, updating the *unshipped files, and sorting them.","Url":"https://github.com/dotnet/roslyn/pull/34765","RelatedDescription":"Closed or merged PR \"Add back-compat overloads to prevent breaking change\" (#34765)"},{"Id":"429522955","IsPullRequest":true,"CreatedAt":"2019-04-04T23:20:13","Actor":"chsienki","Number":"34768","RawContent":null,"Title":"Handle nullability in recursive deconstruction:","State":"open","Body":"- Recurse into nested deconstructions\r\n- Override visit VisitDeconstructValuePlaceholder to set the result as non null\r\n- Update tests\r\n\r\nFixes https://github.com/dotnet/roslyn/issues/33005","Url":"https://github.com/dotnet/roslyn/pull/34768","RelatedDescription":"Open PR \"Handle nullability in recursive deconstruction:\" (#34768)"},{"Id":"429519711","IsPullRequest":false,"CreatedAt":"2019-04-04T23:06:53","Actor":"JamesNK","Number":"34767","RawContent":null,"Title":".NET Compiler Platform SDK does not install in VS2019","State":"open","Body":"https://marketplace.visualstudio.com/items?itemName=VisualStudioProductTeam.NETCompilerPlatformSDK\r\n\r\nThe plugin advertises that it is compatible with VS2019 but the installer says otherwise:\r\n\r\n![image](https://user-images.githubusercontent.com/303201/55594177-1c6d8e00-579b-11e9-904f-bf416d6c84bf.png)\r\n","Url":"https://github.com/dotnet/roslyn/issues/34767","RelatedDescription":"Open issue \".NET Compiler Platform SDK does not install in VS2019\" (#34767)"},{"Id":"429466845","IsPullRequest":true,"CreatedAt":"2019-04-04T22:56:11","Actor":"tmeschter","Number":"34760","RawContent":null,"Title":"Fix version comparison","State":"closed","Body":"In Microsoft.Managed.Core.targets we import Microsoft.Managed.EditorConfig.targets, but only if we're running in a version of MSBuild greater than or equal to 16.1. The problem with this is that the `MSBuildVersion` property is a three-part version (like 16.1.27) but is being compared to a two-part version (16.1). This sort of comparison can have unexpected behavior. For example, the expression `Version.Parse(\"16.1.0\") == Version.Parse(\"16.1\")` evaluates to `false`, and `Version.Parse(\"16.1.0\") > Version.Parse(\"16.1\")` evaluates to `true`.\r\n\r\nTo avoid any such weirdness, here we make sure to compare to a three-part version number.","Url":"https://github.com/dotnet/roslyn/pull/34760","RelatedDescription":"Closed or merged PR \"Fix version comparison\" (#34760)"},{"Id":"429498430","IsPullRequest":false,"CreatedAt":"2019-04-04T21:50:12","Actor":"gafter","Number":"34766","RawContent":null,"Title":"Use BitVector for NullableWalker.LocalState","State":"open","Body":"We should use `BitVector` in the implementation of `NullableWalker.LocalState`.  That will permit us to allocate and work with states without any memory allocation in the most common cases (fewer than 32 slots, but we could increase that to 64).\r\n","Url":"https://github.com/dotnet/roslyn/issues/34766","RelatedDescription":"Open issue \"Use BitVector for NullableWalker.LocalState\" (#34766)"},{"Id":"429478338","IsPullRequest":true,"CreatedAt":"2019-04-04T20:53:32","Actor":"ryzngard","Number":"34764","RawContent":null,"Title":"Pull Members Up UI fixes","State":"open","Body":"Fix more MAS and usability issues with PullMembersUp \r\n\r\n* Fix high contrast formatting\r\n* Fix spacing of buttons \r\n* Change automation information to include class/interface instead of \"named type\"","Url":"https://github.com/dotnet/roslyn/pull/34764","RelatedDescription":"Open PR \"Pull Members Up UI fixes\" (#34764)"},{"Id":"429477569","IsPullRequest":true,"CreatedAt":"2019-04-04T20:51:24","Actor":"chsienki","Number":"34763","RawContent":null,"Title":"Update nullable attribute in docs","State":"open","Body":"Update nullable attribute in docs to show NullableFlags","Url":"https://github.com/dotnet/roslyn/pull/34763","RelatedDescription":"Open PR \"Update nullable attribute in docs\" (#34763)"},{"Id":"429473712","IsPullRequest":true,"CreatedAt":"2019-04-04T20:41:17","Actor":"Therzok","Number":"34762","RawContent":null,"Title":"Reduce allocations in DiagnosticIncrementalAnalyzer","State":"open","Body":"This PR reduces allocations in DiagnosticIncrementalAnalyzer by a good\r\nmargin, 450MB for loading a solution and a short edit session.\r\n\r\nThe total allocations in VSMac were 3GB, and these amounted for 450MB.\r\n\r\nSince the methods were private, implementations can be switched from\r\nIEnumerable and LINQ to concrete enumerator iteration and removal\r\nof lambdas with captures.\r\n\r\nFixes #34761","Url":"https://github.com/dotnet/roslyn/pull/34762","RelatedDescription":"Open PR \"Reduce allocations in DiagnosticIncrementalAnalyzer\" (#34762)"},{"Id":"429467069","IsPullRequest":false,"CreatedAt":"2019-04-04T20:24:21","Actor":"Therzok","Number":"34761","RawContent":null,"Title":"Lambda and boxed enumerator allocations in DiagnosticIncrementalAnalyzer","State":"open","Body":"**Version Used**: \r\n3.0.0-beta4-19157-04\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Open a solution in VSMac\r\n2. Observe a lot of allocations in GetActiveFileStates\r\n\r\n145MB Enumerable System.Linq.Enumerable.Where<TSource>(IEnumerable<T> source, Func<T, TResult> predicate)\r\n145MB System.Linq.Enumerable+WhereEnumerableIterator<TSource>.Select<TResult>(Func<T, TResult> selector)\r\n129MB \r\nSystem.Func<System.Collections.Generic.KeyValuePair<Microsoft.CodeAnalysis.DocumentId, Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer+ActiveFileState>, System.Boolean>\r\n48MB Microsoft.CodeAnalysis.Diagnostics.EngineV2.DiagnosticIncrementalAnalyzer+StateSet+<>c__DisplayClass28_0\r\n\r\n\r\n**Expected Behavior**:\r\nLambda captures and IEnumerable should be avoided there, it's coming in from a private method.\r\n\r\n**Actual Behavior**:\r\nAllocations.\r\n\r\nPreparing a PR, opened an issue to add PerformanceSensitive attributes.","Url":"https://github.com/dotnet/roslyn/issues/34761","RelatedDescription":"Open issue \"Lambda and boxed enumerator allocations in DiagnosticIncrementalAnalyzer\" (#34761)"},{"Id":"429394419","IsPullRequest":true,"CreatedAt":"2019-04-04T20:06:46","Actor":"JoeRobich","Number":"34756","RawContent":null,"Title":"Classify Catch variables as locals","State":"closed","Body":"As noticed by @jmarolf, catch variables were not being classified as locals in the catch declaration. The semantic classifier was already classifying them within the catch body appropriately.","Url":"https://github.com/dotnet/roslyn/pull/34756","RelatedDescription":"Closed or merged PR \"Classify Catch variables as locals\" (#34756)"},{"Id":"429457357","IsPullRequest":false,"CreatedAt":"2019-04-04T19:59:12","Actor":"cartermp","Number":"34759","RawContent":null,"Title":"Rename project file designator from NullableContextOptions to NullableReferenceTypes","State":"open","Body":"`<NullableContextOptions >` feels like we're leaking an implementation detail. Even if the valid values that can be passed in are the same, the bulk will be `enable` or `disable`, so it should probably just be called `<NullableReferenceTypes>`.","Url":"https://github.com/dotnet/roslyn/issues/34759","RelatedDescription":"Open issue \"Rename project file designator from NullableContextOptions to NullableReferenceTypes\" (#34759)"},{"Id":"429407488","IsPullRequest":true,"CreatedAt":"2019-04-04T17:53:02","Actor":"heejaechang","Number":"34758","RawContent":null,"Title":"using partial load platform API - experimental","State":"open","Body":"","Url":"https://github.com/dotnet/roslyn/pull/34758","RelatedDescription":"Open PR \"using partial load platform API - experimental\" (#34758)"},{"Id":"429405617","IsPullRequest":false,"CreatedAt":"2019-04-04T17:48:20","Actor":"stephentoub","Number":"34757","RawContent":null,"Title":"Nullable warning on `default(T) == null`","State":"open","Body":"**Version Used**: \r\n3.1.0-beta1-19172-05+edd2de88fb3e84a097fb30b4070e0f219f624e40\r\n\r\n**Repro**:\r\nThis program\r\n```C#\r\n#nullable enable\r\nusing System;\r\n\r\npublic class Program\r\n{\r\n    public static void Main() => Foo(new object());\r\n\r\n    private static void Foo<T>(T item)\r\n    {\r\n        Console.WriteLine(default(T) == null);\r\n        Console.WriteLine(item == null);\r\n        Console.WriteLine(item.GetHashCode());\r\n    }\r\n}\r\n```\r\nproduces two warnings:\r\n- `default(T)`: \"A default expression introduces a null value when 'T' is a non-nullable reference type.\t\"\r\n- `item.GetHashCode()`: \"Possible dereference of a null reference.\"\r\n\r\nSeveral questions:\r\n- Why does `default(T) == null` warn, and why is that more warn-worthy than `item == null`?  Is that a bug?\r\n- If it's by design, is the appropriate action here to just `!` away the warning?\r\n- It's confusing to me that the warning on `default(T)` says `T` is a \"non-nullable reference type\", but then trying to dereference `item`, which is of type `T`, says it's a \"possible dereference of a null reference\".  Are those messages correct?\r\n\r\ncc: @gafter, @jaredpar, @dotnet/nullablefc ","Url":"https://github.com/dotnet/roslyn/issues/34757","RelatedDescription":"Open issue \"Nullable warning on `default(T) == null`\" (#34757)"},{"Id":"429385877","IsPullRequest":false,"CreatedAt":"2019-04-04T16:58:45","Actor":"sharwell","Number":"34755","RawContent":null,"Title":"Apply code cleanup changes by document instead of all at the end","State":"open","Body":"**Version Used**: 7e7f95bd33c1ed3f0256fc69811a0845bc6c7284\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Run code cleanup in project or solution\r\n\r\n**Expected Behavior**:\r\n\r\nChanges for each document are written to disk after the document is cleaned up.\r\n\r\n**Actual Behavior**:\r\n\r\nAll changes are held in memory until the operation fully completes, and only then are written to disk.","Url":"https://github.com/dotnet/roslyn/issues/34755","RelatedDescription":"Open issue \"Apply code cleanup changes by document instead of all at the end\" (#34755)"},{"Id":"429368470","IsPullRequest":false,"CreatedAt":"2019-04-04T16:17:01","Actor":"tannergooding","Number":"34754","RawContent":null,"Title":"Compile warns for `throw <potential-null>`","State":"open","Body":"The compiler currently gives `warning CS8597: Possible null value.` for `throw null`. However, this is \"valid\" code as the language and runtime both spec this as throwing a `NullReferenceException`.\r\n\r\nGiven that an exception is being thrown and `throw null;` is considered valid; it might be worth considering not warning in this scenario.","Url":"https://github.com/dotnet/roslyn/issues/34754","RelatedDescription":"Open issue \"Compile warns for `throw <potential-null>`\" (#34754)"},{"Id":"429239038","IsPullRequest":true,"CreatedAt":"2019-04-04T13:30:06","Actor":"dotnet-bot","Number":"34752","RawContent":null,"Title":"Merge dev16.1-preview1-vs-deps to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from dev16.1-preview1-vs-deps into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/dev16.1-preview1-vs-deps-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/dev16.1-preview1-vs-deps\n# Fix merge conflicts\ngit commit\ngit push upstream merges/dev16.1-preview1-vs-deps-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/34752","RelatedDescription":"Closed or merged PR \"Merge dev16.1-preview1-vs-deps to master-vs-deps\" (#34752)"},{"Id":"429272501","IsPullRequest":false,"CreatedAt":"2019-04-04T13:14:51","Actor":"sharwell","Number":"34753","RawContent":null,"Title":"Inline temporary variable with multiple assignments","State":"open","Body":"**Version Used**: Visual Studio 2019 version 16.0\r\n\r\n**Steps to Reproduce**:\r\n\r\n```csharp\r\nvar x = 3;\r\nx = x + 2;\r\nConsole.WriteLine(x);\r\n```\r\n\r\nApply **Inline temporary variable** on the definition of `x`.\r\n\r\n**Expected Behavior**:\r\n\r\n```csharp\r\nvar x = 3 + 2;\r\nConsole.WriteLine(x);\r\n```\r\n\r\n**Actual Behavior**:\r\n\r\n```csharp\r\nvar x = 3;\r\nx = 3 + 2;\r\nConsole.WriteLine(3);\r\n```","Url":"https://github.com/dotnet/roslyn/issues/34753","RelatedDescription":"Open issue \"Inline temporary variable with multiple assignments\" (#34753)"}],"ResultType":"GitHubIssue"},"CoreRT-Issues":{"Issues":[{"Id":"429508597","IsPullRequest":true,"CreatedAt":"2019-04-04T22:24:10","Actor":"EgorBo","Number":"7260","RawContent":null,"Title":"Move AssemblyName to shared","State":"open","Body":"CoreRT part of https://github.com/dotnet/coreclr/pull/23737","Url":"https://github.com/dotnet/corert/pull/7260","RelatedDescription":"Open PR \"Move AssemblyName to shared\" (#7260)"},{"Id":"429412133","IsPullRequest":true,"CreatedAt":"2019-04-04T20:52:56","Actor":"jkotas","Number":"7259","RawContent":null,"Title":"Fix build with VS2019","State":"closed","Body":"The environment setup scripts that come with VS2019 change current directory. It breaks places in the build that depend on current directory.","Url":"https://github.com/dotnet/corert/pull/7259","RelatedDescription":"Closed or merged PR \"Fix build with VS2019\" (#7259)"},{"Id":"429363643","IsPullRequest":true,"CreatedAt":"2019-04-04T16:06:45","Actor":"Dotnet-GitSync-Bot","Number":"7258","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"open","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @marek-safar","Url":"https://github.com/dotnet/corert/pull/7258","RelatedDescription":"Open PR \"Mirror changes from dotnet/corefx,coreclr\" (#7258)"},{"Id":"429278376","IsPullRequest":true,"CreatedAt":"2019-04-04T16:04:09","Actor":"Dotnet-GitSync-Bot","Number":"7257","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7257","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7257)"},{"Id":"429080050","IsPullRequest":true,"CreatedAt":"2019-04-04T10:18:54","Actor":"Dotnet-GitSync-Bot","Number":"7255","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @sywhang","Url":"https://github.com/dotnet/corert/pull/7255","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7255)"},{"Id":"429191733","IsPullRequest":false,"CreatedAt":"2019-04-04T10:06:18","Actor":"DenMpei","Number":"7256","RawContent":null,"Title":" [TEMPORARY EXCEPTION MESSAGE] FileLoadErrorGeneric: System.Drawing.Common","State":"open","Body":"Good day! \r\n\r\nI run: dotnet publish -r win-x64 -c release \r\nConsole application\r\n.Net Core version: 2.2\r\n\r\nAnd I get such an error ... What can I do about it?\r\n\r\nGenerating native code\r\nEXEC : error : [TEMPORARY EXCEPTION MESSAGE] FileLoadErrorGeneric: System.Drawing.Common","Url":"https://github.com/dotnet/corert/issues/7256","RelatedDescription":"Open issue \" [TEMPORARY EXCEPTION MESSAGE] FileLoadErrorGeneric: System.Drawing.Common\" (#7256)"},{"Id":"429036821","IsPullRequest":true,"CreatedAt":"2019-04-04T04:36:53","Actor":"Dotnet-GitSync-Bot","Number":"7254","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @filipnavara","Url":"https://github.com/dotnet/corert/pull/7254","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7254)"},{"Id":"428980545","IsPullRequest":true,"CreatedAt":"2019-04-03T22:45:33","Actor":"Dotnet-GitSync-Bot","Number":"7252","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @jkoritzinsky","Url":"https://github.com/dotnet/corert/pull/7252","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#7252)"},{"Id":"428993042","IsPullRequest":true,"CreatedAt":"2019-04-03T21:57:51","Actor":"trylek","Number":"7253","RawContent":null,"Title":"SuperILC support for scripted test app executions","State":"open","Body":"In CoreCLR, each test app has an accompanying cmd script that executes\r\nthe app using CoreRun, possibly passing command-line arguments as\r\nrequired by the particular test case. Previously, SuperIlc used to\r\nblindly execute the native executable - the lack of proper command-line\r\narguments were causing failures in dozens of tests.\r\n\r\nThis change tweaks SuperIlc to embrace the execution scripts as a\r\npreferred alternative to directly running the executables [that option\r\nstill exists and is exercised in the CoreRT R2R testing]. I have also\r\nsimplified bits of the code by directly passing around the BuildOptions\r\nstructure rather than propagating multiple arguments representing\r\nvarious fields on the structure. This also let me better encapsulate\r\nlocating the CoreRun executable.\r\n\r\nI have replaced CrossgenDirectory with CoreRootDirectory with better\r\nserves our needs as it needs to be passed as the CORE_ROOT environment\r\nvariable to the test execution scripts. I have restored Simon's original\r\ncode treating --crossgen as a mere flag.\r\n\r\nI have modified ParallelRunner.Launch to output to the Console as this\r\nparticular message mostly serves as a visual progress indicator when\r\nrunning the tests, it's no use in the rollup log.\r\n\r\nI have slightly trimmed down the ProcessRunner reports: when the process\r\nsucceeds, we don't need to report its exit code as it's either implicit\r\nor we can look it up in the scripts. In case of failure, only dump\r\nthe hex form of the exit code if it's negative as that's where NT\r\nstatuses or HRESULT's get displayed as meaningless big negative integers.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7253","RelatedDescription":"Open PR \"SuperILC support for scripted test app executions\" (#7253)"},{"Id":"428908115","IsPullRequest":true,"CreatedAt":"2019-04-03T21:18:34","Actor":"Dotnet-GitSync-Bot","Number":"7251","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @janvorli @janvorli @janvorli","Url":"https://github.com/dotnet/corert/pull/7251","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7251)"},{"Id":"428805822","IsPullRequest":true,"CreatedAt":"2019-04-03T16:22:53","Actor":"MichalStrehovsky","Number":"7250","RawContent":null,"Title":"Fix regression in Enum.CompareTo","State":"closed","Body":"`Enum.CompareTo` is expected to return -1/0/1, but e.g. `Byte.CompareTo` does not. We can't delegate this.","Url":"https://github.com/dotnet/corert/pull/7250","RelatedDescription":"Closed or merged PR \"Fix regression in Enum.CompareTo\" (#7250)"},{"Id":"428492299","IsPullRequest":true,"CreatedAt":"2019-04-03T16:06:06","Actor":"yowl","Number":"7247","RawContent":null,"Title":"wasm: remove unneeded fpext when doing ops on 2 floats","State":"closed","Body":"previously when floats where popped off the stack they were always widened to doubles.  This change removes that and only widens floats when the operation has a double on the other side.","Url":"https://github.com/dotnet/corert/pull/7247","RelatedDescription":"Closed or merged PR \"wasm: remove unneeded fpext when doing ops on 2 floats\" (#7247)"},{"Id":"428724140","IsPullRequest":true,"CreatedAt":"2019-04-03T11:53:31","Actor":"hc4","Number":"7249","RawContent":null,"Title":"Fix building Ubuntu shared libraries","State":"open","Body":"fixes #4988.\r\nCoreRT can now produce working shared lib for linux-x64.\r\n\r\nBut I have some questions\r\n\r\n- Should we use the trick with jumping to GOTPCREL ptr for other Rh* stubs (like RhExceptionHandling_FailedAllocation)?\r\n- Is it right way to check, that symbol should be exported as global through IExportableSymbolNode.GetExportForm()?\r\n- Is it enough to pass all tests to check, that this commit nothing breaks?","Url":"https://github.com/dotnet/corert/pull/7249","RelatedDescription":"Open PR \"Fix building Ubuntu shared libraries\" (#7249)"},{"Id":"428526993","IsPullRequest":false,"CreatedAt":"2019-04-03T02:01:57","Actor":"yowl","Number":"7248","RawContent":null,"Title":"wasm: support Generic Virtual Method Calls & Shared Generics (was: some linq methods fail to compile)","State":"open","Body":"When attempting to build an Uno Platform project, it fails on a method \r\n```\r\n{[System.Linq]System.Linq.Enumerable+Iterator`1<Windows.UI.Xaml.Documents.Inline>.Select<string>(Func``2<Inline,string>)}\r\n```\r\n in the ctor for `WebAssemblyVTableSlotNode` on the assert\r\n```\r\nDebug.Assert(!targetMethod.HasInstantiation);\r\n```\r\nNot done any more investigation yet.","Url":"https://github.com/dotnet/corert/issues/7248","RelatedDescription":"Open issue \"wasm: support Generic Virtual Method Calls & Shared Generics (was: some linq methods fail to compile)\" (#7248)"},{"Id":"428458380","IsPullRequest":true,"CreatedAt":"2019-04-02T23:12:29","Actor":"Dotnet-GitSync-Bot","Number":"7246","RawContent":null,"Title":"Mirror changes from dotnet/corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas","Url":"https://github.com/dotnet/corert/pull/7246","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx\" (#7246)"},{"Id":"428022723","IsPullRequest":true,"CreatedAt":"2019-04-02T21:44:03","Actor":"jkotas","Number":"7244","RawContent":null,"Title":"Store StructMarshalingData for OffsetOf on blittable types","State":"closed","Body":"Fixes #7232","Url":"https://github.com/dotnet/corert/pull/7244","RelatedDescription":"Closed or merged PR \"Store StructMarshalingData for OffsetOf on blittable types\" (#7244)"},{"Id":"426956826","IsPullRequest":false,"CreatedAt":"2019-04-02T21:44:02","Actor":"PathogenDavid","Number":"7232","RawContent":null,"Title":"Marshal.OffsetOf<T> fails on blittable structs","State":"closed","Body":"I was going to leave this as a comment on #5374 until I realized the issue was only happening on blittable structs, so I don't feel like it's totally relevant there. (Plus that issue has been closed.)\r\n\r\nIn short, both `Marshal.OffsetOf` and `Marshal.OffsetOf<T>` do not work on blittable structs. They work as expected if the struct is not blittable.\r\n\r\nI have made a minimal demonstration of the issue available at [PathogenPlayground/CoreRtOffsetOf](https://github.com/PathogenPlayground/CoreRtOffsetOf/blob/master/CoreRtOffsetOf/Program.cs). It exercises the generic and non-generic variants of `Marshal.OffsetOf` and `Marshal.SizeOf` on both blittable and non-blittable types. Everything works except for either `OffsetOf` on the blittable type.\r\n\r\nI've tried the workaround described by @MichalStrehovsky at https://github.com/dotnet/corert/issues/5374#issuecomment-364846258, but it has no impact on any of the calls. (Whether or not it's there, the success/failure of everything remains the same.) I've also tried adding the types to the `rd.xml`, but that doesn't change anything either.\r\n\r\nI also tried using `1.0.0-alpha-26212-01` in case there was a regression since Michal made his comment, but that also had the same results.\r\n\r\nFor the sake of convenience, here's the output of the playground on my machine:\r\n\r\n```\r\nSizeOf<BlittableStruct>: 8\r\nSizeOf(BlittableStruct): 8\r\nsizeof(BlittableStruct): 8\r\nSizeOf<MarshaledStruct>: 16\r\nSizeOf(MarshaledStruct): 16\r\nOffsetOf<BlittableStruct>: FAILED\r\nEETypeRva:0x0032F1E8(System.Runtime.InteropServices.MissingInteropDataException): CoreRtOffsetOf.BlittableStruct is missing structure marshalling data. To enable structure marshalling data, add a MarshalStructure directive to the application rd.xml file. For more information, please visit http://go.microsoft.com/fwlink/?LinkID=393965\r\n   at System.Runtime.InteropServices.Marshal.OffsetOf(Type, String) + 0x1a7\r\n   at CoreRtOffsetOf.Program.<>c.<Main>b__1_5() + 0x20\r\n   at CoreRtOffsetOf.Program.Test(String, Func`1) + 0x34\r\n\r\nOffsetOf(BlittableStruct): FAILED\r\nEETypeRva:0x0032F1E8(System.Runtime.InteropServices.MissingInteropDataException): CoreRtOffsetOf.BlittableStruct is missing structure marshalling data. To enable structure marshalling data, add a MarshalStructure directive to the application rd.xml file. For more information, please visit http://go.microsoft.com/fwlink/?LinkID=393965\r\n   at System.Runtime.InteropServices.Marshal.OffsetOf(Type, String) + 0x1a7\r\n   at CoreRtOffsetOf.Program.<>c.<Main>b__1_6() + 0x2f\r\n   at CoreRtOffsetOf.Program.Test(String, Func`1) + 0x34\r\n\r\nOffsetOf<MarshaledStruct>: 4\r\nOffsetOf(MarshaledStruct): 4\r\nDone.\r\n```\r\n\r\nOn a side note, I was very impressed with CoreRT when I finally tried it with a largeish test project yesterday. This was the only real issue I ran into. Everything else was adding the right types to `rd.xml` for reflection and disabling some AOT-unfriendly runtime assembly loading.","Url":"https://github.com/dotnet/corert/issues/7232","RelatedDescription":"Closed issue \"Marshal.OffsetOf<T> fails on blittable structs\" (#7232)"},{"Id":"428224212","IsPullRequest":true,"CreatedAt":"2019-04-02T13:22:41","Actor":"MichalStrehovsky","Number":"7245","RawContent":null,"Title":"Merge master to nmirror","State":"closed","Body":"The UTC bug that was blocking the integration is now fixed.","Url":"https://github.com/dotnet/corert/pull/7245","RelatedDescription":"Closed or merged PR \"Merge master to nmirror\" (#7245)"},{"Id":"428005918","IsPullRequest":true,"CreatedAt":"2019-04-02T11:47:26","Actor":"Dotnet-GitSync-Bot","Number":"7243","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @krwq @krwq","Url":"https://github.com/dotnet/corert/pull/7243","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#7243)"},{"Id":"427930897","IsPullRequest":true,"CreatedAt":"2019-04-02T03:24:36","Actor":"Dotnet-GitSync-Bot","Number":"7242","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @GrabYourPitchforks","Url":"https://github.com/dotnet/corert/pull/7242","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#7242)"},{"Id":"427883213","IsPullRequest":true,"CreatedAt":"2019-04-01T21:55:39","Actor":"Dotnet-GitSync-Bot","Number":"7241","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @acid-chicken","Url":"https://github.com/dotnet/corert/pull/7241","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7241)"},{"Id":"427452743","IsPullRequest":true,"CreatedAt":"2019-04-01T21:26:28","Actor":"trylek","Number":"7238","RawContent":null,"Title":"SuperIlc - minor improvements and bugfixes","State":"closed","Body":"These are a couple of items I spotted in my local SuperIlc testing:\r\n\r\n1) FindCoreRun was crashing with nullref when no ReferencePaths were\r\nspecified. I used this opportunity to unify the idiom of converting\r\nthe command line argument to an IEnumerable<string>.\r\n\r\n2) The execution step was missing logging of failures similar to\r\nwhat we have for compilations. I have adapted compilation logging\r\nfor this purpose.\r\n\r\n3) I hit and fixed a typo in the DateTime formatting string for the\r\nCompileDirectory command.\r\n\r\n4) I came to the conclusion that it's more precise to have the\r\n\"outcome\" table represent individual compilations and executions\r\nrather than the complete \"apps\" (folders) so I modified the code\r\nas appropriate.\r\n\r\n5) I fixed a bug where I had incorrectly placed a try / catch block\r\nand that caused error count calculation to be slightly off.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7238","RelatedDescription":"Closed or merged PR \"SuperIlc - minor improvements and bugfixes\" (#7238)"},{"Id":"427666802","IsPullRequest":true,"CreatedAt":"2019-04-01T18:26:01","Actor":"filipnavara","Number":"7239","RawContent":null,"Title":"Add missing PreAllocatedOverlapped and ThreadPoolBoundHandle classes …","State":"closed","Body":"…on Unix builds\r\n\r\nContributes to https://github.com/dotnet/corert/issues/7090.","Url":"https://github.com/dotnet/corert/pull/7239","RelatedDescription":"Closed or merged PR \"Add missing PreAllocatedOverlapped and ThreadPoolBoundHandle classes …\" (#7239)"},{"Id":"427716069","IsPullRequest":true,"CreatedAt":"2019-04-01T15:25:10","Actor":"MichalStrehovsky","Number":"7240","RawContent":null,"Title":"Fix regression in Enum.GetValues","State":"closed","Body":"Found during Project N integration.","Url":"https://github.com/dotnet/corert/pull/7240","RelatedDescription":"Closed or merged PR \"Fix regression in Enum.GetValues\" (#7240)"},{"Id":"427311595","IsPullRequest":true,"CreatedAt":"2019-03-31T08:54:03","Actor":"MichalStrehovsky","Number":"7237","RawContent":null,"Title":"Add option to enable method body folding","State":"closed","Body":"This adds an option to specify the user would like to fold identical method bodies together. When enabled, we generate method bodies into separate COMDAT sections and when linker has `/OPT:ICF` passed to it (we already pass that), it's going to fold sections with identical content together.\r\n\r\nThis results in size savings - e.g. we save 170 kB on a Hello world because there's lots of methods with identical bodies in the image.\r\n\r\nI've also enabled folding of the `FoldableReadOnlyDataSection`. This was added for Project N but wasn't taken advantage of in the open source compiler. With this, we can fold identical interface dispatch maps and a couple other things. The size savings from that are not substatial, but we can do it without being under the optional switch, so that's nice.","Url":"https://github.com/dotnet/corert/pull/7237","RelatedDescription":"Closed or merged PR \"Add option to enable method body folding\" (#7237)"},{"Id":"427230798","IsPullRequest":true,"CreatedAt":"2019-03-30T03:19:34","Actor":"Dotnet-GitSync-Bot","Number":"7236","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @Gnbrkm41","Url":"https://github.com/dotnet/corert/pull/7236","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7236)"},{"Id":"427214057","IsPullRequest":true,"CreatedAt":"2019-03-30T02:06:05","Actor":"Dotnet-GitSync-Bot","Number":"7235","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @sdmaclea","Url":"https://github.com/dotnet/corert/pull/7235","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7235)"},{"Id":"427082113","IsPullRequest":true,"CreatedAt":"2019-03-29T20:27:53","Actor":"sergiy-k","Number":"7234","RawContent":null,"Title":"Switch to new build pools per requests from the engineering team","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7234","RelatedDescription":"Closed or merged PR \"Switch to new build pools per requests from the engineering team\" (#7234)"},{"Id":"427002209","IsPullRequest":true,"CreatedAt":"2019-03-29T15:10:42","Actor":"Dotnet-GitSync-Bot","Number":"7233","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @tannergooding","Url":"https://github.com/dotnet/corert/pull/7233","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7233)"},{"Id":"426848260","IsPullRequest":true,"CreatedAt":"2019-03-29T13:58:28","Actor":"Dotnet-GitSync-Bot","Number":"7231","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas @marek-safar @benaadams","Url":"https://github.com/dotnet/corert/pull/7231","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7231)"}],"ResultType":"GitHubIssue"},"SDK-Issues":{"Issues":[{"Id":"429531681","IsPullRequest":true,"CreatedAt":"2019-04-05T04:00:10","Actor":"dotnet-bot","Number":"3083","RawContent":null,"Title":"Merge release/3.0.1xx to master","State":"closed","Body":"\nThis is an automatically generated pull request from release/3.0.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3083","RelatedDescription":"Closed or merged PR \"Merge release/3.0.1xx to master\" (#3083)"},{"Id":"429531671","IsPullRequest":true,"CreatedAt":"2019-04-05T02:30:10","Actor":"dotnet-bot","Number":"3082","RawContent":null,"Title":"Merge release/2.2.2xx to release/3.0.1xx","State":"closed","Body":"\nThis is an automatically generated pull request from release/2.2.2xx into release/3.0.1xx.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.2.2xx-to-release/3.0.1xx\ngit reset --hard upstream/release/3.0.1xx\ngit merge upstream/release/2.2.2xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/2.2.2xx-to-release/3.0.1xx --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3082","RelatedDescription":"Closed or merged PR \"Merge release/2.2.2xx to release/3.0.1xx\" (#3082)"},{"Id":"429523372","IsPullRequest":false,"CreatedAt":"2019-04-04T23:22:03","Actor":"wli3","Number":"3081","RawContent":null,"Title":"migrate newtonsoft.json to system.text.json in RegFreeComManifest.cs and ClsidMap.cs","State":"open","Body":"https://github.com/dotnet/sdk/blob/afae0615d5cbb16c058c5ce1fd65215d07df24d9/src/Tasks/Microsoft.NET.Build.Tasks/ClsidMap.cs\r\nhttps://github.com/dotnet/sdk/blob/afae0615d5cbb16c058c5ce1fd65215d07df24d9/src/Tasks/Microsoft.NET.Build.Tasks/RegFreeComManifest.cs\r\n","Url":"https://github.com/dotnet/sdk/issues/3081","RelatedDescription":"Open issue \"migrate newtonsoft.json to system.text.json in RegFreeComManifest.cs and ClsidMap.cs\" (#3081)"},{"Id":"429522655","IsPullRequest":true,"CreatedAt":"2019-04-04T23:18:56","Actor":"dsplaisted","Number":"3080","RawContent":null,"Title":"Rewrite deps file generation","State":"open","Body":"WIP for now, sending PR to get CI coverage.","Url":"https://github.com/dotnet/sdk/pull/3080","RelatedDescription":"Open PR \"Rewrite deps file generation\" (#3080)"},{"Id":"429508363","IsPullRequest":true,"CreatedAt":"2019-04-04T22:23:18","Actor":"MSLukeWest","Number":"3079","RawContent":null,"Title":"Adding NetCorePublishItemsOutputGroup to support VS installer projects","State":"open","Body":"VS installer projects need to be able to access an output group that contains publishing outputs in order to create MSIs for self contained deployment, so I'm adding NetCorePublishItemsOutputGroup to the publishing targets.","Url":"https://github.com/dotnet/sdk/pull/3079","RelatedDescription":"Open PR \"Adding NetCorePublishItemsOutputGroup to support VS installer projects\" (#3079)"},{"Id":"427160016","IsPullRequest":true,"CreatedAt":"2019-04-04T20:52:44","Actor":"livarcocc","Number":"3062","RawContent":null,"Title":"Switching to Jobs from Phases for YAML and also switch to new pools.","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/3062","RelatedDescription":"Closed or merged PR \"Switching to Jobs from Phases for YAML and also switch to new pools.\" (#3062)"},{"Id":"429477816","IsPullRequest":true,"CreatedAt":"2019-04-04T20:52:05","Actor":"johnbeisner","Number":"3078","RawContent":null,"Title":"[WIP] Switching to Jobs from Phases for YAML","State":"open","Body":"Switching to Jobs from Phases for YAML and also switch to new pools.","Url":"https://github.com/dotnet/sdk/pull/3078","RelatedDescription":"Open PR \"[WIP] Switching to Jobs from Phases for YAML\" (#3078)"},{"Id":"427293027","IsPullRequest":true,"CreatedAt":"2019-04-04T20:11:47","Actor":"kouvel","Number":"3064","RawContent":null,"Title":"Change option that enables/disables tier 0 JIT and expose another related option","State":"closed","Body":"Depends on https://github.com/dotnet/coreclr/pull/23597\r\n\r\n- Tier 0 JIT is being referred to as quick JIT. Renamed option that was added by https://github.com/dotnet/sdk/pull/2925 to StartupTierQuickJit, which indicates whether tiered compilation may use quick JIT in its startup tier. Default will be false.\r\n- Added option QuickJitForLoops that configures whether quick JIT may be used for methods that contain loops. Default will be false, so `<StartupTierQuickJit>true</StartupTierQuickJit>` would still not use quick JIT for methods that contain loops by default.","Url":"https://github.com/dotnet/sdk/pull/3064","RelatedDescription":"Closed or merged PR \"Change option that enables/disables tier 0 JIT and expose another related option\" (#3064)"},{"Id":"429240525","IsPullRequest":true,"CreatedAt":"2019-04-04T20:10:08","Actor":"dotnet-maestro[bot]","Number":"3077","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190403.10\r\n- **Date Produced**: 4/4/2019 1:43 AM\r\n- **Commit**: 811fda44a88dcfe3e42a17bb34467f5764836c65\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19203.10\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19203.10\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3077","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3077)"},{"Id":"429036286","IsPullRequest":false,"CreatedAt":"2019-04-04T00:59:49","Actor":"jgunzy","Number":"3076","RawContent":null,"Title":"Build errors in VS2017 after installing VS2019","State":"open","Body":"I have an existing solution containing some projects targeting .Net Core 2.1 and .Net Standard 2.0.\r\n\r\nI installed VS2019, and the solution builds.  If I open VS2017 and try to build the same solution, I get errors saying:\r\nThe current .NET SDK does not support targeting .NET Core 2.1.  Either target .NET Core 1.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.\t\r\nand\r\nThe current .NET SDK does not support targeting .NET Standard 2.0.  Either target .NET Standard 1.6 or lower, or use a version of the .NET SDK that supports .NET Standard 2.0.\t\r\n\r\nThis was working before install of VS2019, and still works in VS2019, just not in VS2017.","Url":"https://github.com/dotnet/sdk/issues/3076","RelatedDescription":"Open issue \"Build errors in VS2017 after installing VS2019\" (#3076)"},{"Id":"429017416","IsPullRequest":false,"CreatedAt":"2019-04-03T23:28:40","Actor":"terrajobst","Number":"3075","RawContent":null,"Title":"Framework defines can easily break code","State":"open","Body":"With #309 we've added an implicit define based on the target framework, which is super useful for customers when using conditional compilation.\r\n\r\nUnfortunately, this makes it extremely easy to write code that breaks during retargeting. Let's say I'm in a .NET Standard project and I'd like to add a code path that uses some new feature in .NET Standard 2.1, so I multi-target for .NET Standard 2.0 and .NET Standard 2.1. The code would look as follows: \r\n\r\n\r\n```C#\r\npublic void SomeMethod()\r\n{\r\n    #if NETSTANDARD2_1\r\n        // Write some code that uses Span<T>\r\n    #else\r\n        // Write fallback logic\r\n    #endif\r\n}\r\n```\r\n\r\nFast forward a year. Now I'd like to add some logic that can light-up on .NET Standard 2.2. So in a different area in my code I'm writing this:\r\n\r\n```C#\r\npublic void SomeOtherMethod()\r\n{\r\n    #if NETSTANDARD2_2\r\n        // Write some code that uses some new feature in .NET Standard 2.2\r\n    #else\r\n        // Write fallback logic\r\n    #endif\r\n}\r\n```\r\n\r\nThe code will compile just fine and everything looks dandy until you realize that your .NET Standard 2.1 binary no longer uses `Span<T>` in `SomeMethod()` but emitted the fallback logic.\r\n\r\nIdeally, we'd want to write code like this:\r\n\r\n```C#\r\npublic void SomeMethod()\r\n{\r\n    #if NETSTANDARD >= 2.1\r\n        // Write some code that uses Span<T>\r\n    #else\r\n        // Write fallback logic\r\n    #endif\r\n}\r\n```\r\n\r\nWhich C# doesn't support (and likely never will). However, we could instead change the SDK to define more symbols, such as:\r\n\r\n```C#\r\npublic void SomeMethod()\r\n{\r\n    #if NETSTANDARD2_1_OR_HIGHER\r\n        // Write some code that uses Span<T>\r\n    #else\r\n        // Write fallback logic\r\n    #endif\r\n}\r\n```\r\n\r\nThe `_OR_HIGHER` symbols would all be defined.\r\n\r\nThoughts?","Url":"https://github.com/dotnet/sdk/issues/3075","RelatedDescription":"Open issue \"Framework defines can easily break code\" (#3075)"},{"Id":"428949719","IsPullRequest":true,"CreatedAt":"2019-04-03T20:02:50","Actor":"swaroop-sridhar","Number":"3074","RawContent":null,"Title":"Add support for Single-file publishing ","State":"open","Body":"This change implements support for publishing apps to a single file.\r\n\r\n* ``dotnet publish /p:PublishSingleFile=true`` causes the contents of the \"original\" publish directory to a single file in the actual publish directory \r\n* Files marked with the meta-data ``<IncludeInSingleFile>false<IncludeInSingleFile>`` are left in the publish directory unbundled. This includes PDB files by default\r\n* PDB files can be bundled into the single file by setting ``/p:IncludePdbInSingleFile=true``\r\n\r\nPublishing to a single file requires publishing wrt a RID using an apphost, because the generated file is the platform-specific AppHost executable with embedded dependencies.\r\n\r\nTest Pass: requires a change to the bundler, which is waiting to be updated in the toolset repo.\r\n","Url":"https://github.com/dotnet/sdk/pull/3074","RelatedDescription":"Open PR \"Add support for Single-file publishing \" (#3074)"},{"Id":"428727550","IsPullRequest":true,"CreatedAt":"2019-04-03T14:07:36","Actor":"dotnet-maestro[bot]","Number":"3073","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190402.13\r\n- **Date Produced**: 4/3/2019 12:44 AM\r\n- **Commit**: 764f362c8e92e41905fe5f6c782ab9980c86c909\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19202.13\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19202.13\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3073","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3073)"},{"Id":"428460599","IsPullRequest":true,"CreatedAt":"2019-04-02T21:48:28","Actor":"fadimounir","Number":"3072","RawContent":null,"Title":"Update version in global.json","State":"open","Body":"New version pulls the ILLink.Tasks and Microsoft.NET.Build.Bundle packages.","Url":"https://github.com/dotnet/sdk/pull/3072","RelatedDescription":"Open PR \"Update version in global.json\" (#3072)"},{"Id":"428383802","IsPullRequest":true,"CreatedAt":"2019-04-02T18:44:46","Actor":"nugetlurker","Number":"3071","RawContent":null,"Title":"Insert NuGet Build 5.1.0-rtm.5921 into sdk","State":"open","Body":"Insert NuGet Build 5.1.0-rtm.5921 into sdk release/2.1.7xx branch","Url":"https://github.com/dotnet/sdk/pull/3071","RelatedDescription":"Open PR \"Insert NuGet Build 5.1.0-rtm.5921 into sdk\" (#3071)"},{"Id":"428383786","IsPullRequest":true,"CreatedAt":"2019-04-02T18:44:43","Actor":"nugetlurker","Number":"3070","RawContent":null,"Title":"Insert NuGet Build 5.1.0-rtm.5921 into sdk","State":"open","Body":"Insert NuGet Build 5.1.0-rtm.5921 into sdk release/2.2.3xx branch","Url":"https://github.com/dotnet/sdk/pull/3070","RelatedDescription":"Open PR \"Insert NuGet Build 5.1.0-rtm.5921 into sdk\" (#3070)"},{"Id":"427940639","IsPullRequest":false,"CreatedAt":"2019-04-01T22:32:28","Actor":"nkolev92","Number":"3069","RawContent":null,"Title":"ProduceContentAssets should not \"url decode\" paths provided by NuGet","State":"open","Body":"Create the following project and run `dotnet build`.\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>net462</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ContentFilesExample\" Version=\"*\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\nMake sure that nuget.org is among the sources. \r\n\r\n```\r\n dotnet build\r\nMicrosoft (R) Build Engine version 16.0.450+ga8dc7f1d34 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 530.45 ms for C:\\Users\\nikolev.REDMOND\\Source\\Repos\\ContentFilesExampleTest\\ContentFilesExampleTest\\ContentFilesExampleTest.csproj.\r\nC:\\Program Files\\dotnet\\sdk\\2.2.202\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(350,5): error MSB4018: The \"ProduceContentAssets\" task failed unexpectedly. [C:\\Users\\nikolev.REDMOND\\Source\\Repos\\ContentFilesExampleTest\\ContentFilesExampleTest\\ContentFilesExampleTest.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\2.2.202\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(350,5): error MSB4018: System.IO.DirectoryNotFoundException: Could not find a part of the path 'C:\\Users\\nikolev.REDMOND\\Source\\Repos\\ContentFilesExampleTest\\globalPackagesFolder\\contentfilesexample\\1.0.2\\contentFiles\\cs\\portable-net45+wpa81+wp8+win8\\ExampleReader.cs.pp'. [C:\\Users\\nikolev.REDMOND\\Source\\Repos\\ContentFilesExampleTest\\ContentFilesExampleTest\\ContentFilesExampleTest.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\2.2.202\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(350,5): error MSB4018:    at System.IO.FileStream.ValidateFileHandle(SafeFileHandle fileHandle) [C:\\Users\\nikolev.REDMOND\\Source\\Repos\\ContentFilesExampleTest\\ContentFilesExampleTest\\ContentFilesExampleTest.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\2.2.202\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(350,5): error MSB4018:    at System.IO.FileStream.CreateFileOpenHandle(FileMode mode, FileShare share, FileOptions options) [C:\\Users\\nikolev.REDMOND\\Source\\Repos\\ContentFilesExampleTest\\ContentFilesExampleTest\\ContentFilesExampleTest.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\2.2.202\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(350,5): error MSB4018:    at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options) [C:\\Users\\nikolev.REDMOND\\Source\\Repos\\ContentFilesExampleTest\\ContentFilesExampleTest\\ContentFilesExampleTest.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\2.2.202\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(350,5): error MSB4018:    at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share) [C:\\Users\\nikolev.REDMOND\\Source\\Repos\\ContentFilesExampleTest\\ContentFilesExampleTest\\ContentFilesExampleTest.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\2.2.202\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(350,5): error MSB4018:    at System.IO.File.OpenRead(String path) [C:\\Users\\nikolev.REDMOND\\Source\\Repos\\ContentFilesExampleTest\\ContentFilesExampleTest\\ContentFilesExampleTest.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\2.2.202\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(350,5): error MSB4018:    at Microsoft.NET.Build.Tasks.NugetContentAssetPreprocessor.Process(String originalAssetPath, String relativeOutputPath, String& pathToFinalAsset) [C:\\Users\\nikolev.REDMOND\\Source\\Repos\\ContentFilesExampleTest\\ContentFilesExampleTest\\ContentFilesExampleTest.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\2.2.202\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(350,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ProduceContentAssets.ProduceContentAsset(ITaskItem contentFile) [C:\\Users\\nikolev.REDMOND\\Source\\Repos\\ContentFilesExampleTest\\ContentFilesExampleTest\\ContentFilesExampleTest.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\2.2.202\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(350,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ProduceContentAssets.ExecuteCore() [C:\\Users\\nikolev.REDMOND\\Source\\Repos\\ContentFilesExampleTest\\ContentFilesExampleTest\\ContentFilesExampleTest.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\2.2.202\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(350,5): error MSB4018:    at Microsoft.NET.Build.Tasks.TaskBase.Execute() [C:\\Users\\nikolev.REDMOND\\Source\\Repos\\ContentFilesExampleTest\\ContentFilesExampleTest\\ContentFilesExampleTest.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\2.2.202\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(350,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute() [C:\\Users\\nikolev.REDMOND\\Source\\Repos\\ContentFilesExampleTest\\ContentFilesExampleTest\\ContentFilesExampleTest.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\2.2.202\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(350,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskBuilder.ExecuteInstantiatedTask(ITaskExecutionHost taskExecutionHost, TaskLoggingContext taskLoggingContext, TaskHost taskHost, ItemBucket bucket, TaskExecutionMode howToExecuteTask) [C:\\Users\\nikolev.REDMOND\\Source\\Repos\\ContentFilesExampleTest\\ContentFilesExampleTest\\ContentFilesExampleTest.csproj]\r\n\r\nBuild FAILED.\r\n\r\nC:\\Program Files\\dotnet\\sdk\\2.2.202\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(350,5): error MSB4018: The \"ProduceContentAssets\" task failed unexpectedly. [C:\\Users\\nikolev.REDMOND\\Source\\Repos\\ContentFilesExampleTest\\ContentFilesExampleTest\\ContentFilesExampleTest.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\2.2.202\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(350,5): error MSB4018: System.IO.DirectoryNotFoundException: Could not find a part of the path 'C:\\Users\\nikolev.REDMOND\\Source\\Repos\\ContentFilesExampleTest\\globalPackagesFolder\\contentfilesexample\\1.0.2\\contentFiles\\cs\\portable-net45+wpa81+wp8+win8\\ExampleReader.cs.pp'. [C:\\Users\\nikolev.REDMOND\\Source\\Repos\\ContentFilesExampleTest\\ContentFilesExampleTest\\ContentFilesExampleTest.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\2.2.202\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(350,5): error MSB4018:    at System.IO.FileStream.ValidateFileHandle(SafeFileHandle fileHandle) [C:\\Users\\nikolev.REDMOND\\Source\\Repos\\ContentFilesExampleTest\\ContentFilesExampleTest\\ContentFilesExampleTest.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\2.2.202\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(350,5): error MSB4018:    at System.IO.FileStream.CreateFileOpenHandle(FileMode mode, FileShare share, FileOptions options) [C:\\Users\\nikolev.REDMOND\\Source\\Repos\\ContentFilesExampleTest\\ContentFilesExampleTest\\ContentFilesExampleTest.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\2.2.202\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(350,5): error MSB4018:    at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, FileOptions options) [C:\\Users\\nikolev.REDMOND\\Source\\Repos\\ContentFilesExampleTest\\ContentFilesExampleTest\\ContentFilesExampleTest.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\2.2.202\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(350,5): error MSB4018:    at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share) [C:\\Users\\nikolev.REDMOND\\Source\\Repos\\ContentFilesExampleTest\\ContentFilesExampleTest\\ContentFilesExampleTest.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\2.2.202\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(350,5): error MSB4018:    at System.IO.File.OpenRead(String path) [C:\\Users\\nikolev.REDMOND\\Source\\Repos\\ContentFilesExampleTest\\ContentFilesExampleTest\\ContentFilesExampleTest.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\2.2.202\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(350,5): error MSB4018:    at Microsoft.NET.Build.Tasks.NugetContentAssetPreprocessor.Process(String originalAssetPath, String relativeOutputPath, String& pathToFinalAsset) [C:\\Users\\nikolev.REDMOND\\Source\\Repos\\ContentFilesExampleTest\\ContentFilesExampleTest\\ContentFilesExampleTest.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\2.2.202\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(350,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ProduceContentAssets.ProduceContentAsset(ITaskItem contentFile) [C:\\Users\\nikolev.REDMOND\\Source\\Repos\\ContentFilesExampleTest\\ContentFilesExampleTest\\ContentFilesExampleTest.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\2.2.202\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(350,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ProduceContentAssets.ExecuteCore() [C:\\Users\\nikolev.REDMOND\\Source\\Repos\\ContentFilesExampleTest\\ContentFilesExampleTest\\ContentFilesExampleTest.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\2.2.202\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(350,5): error MSB4018:    at Microsoft.NET.Build.Tasks.TaskBase.Execute() [C:\\Users\\nikolev.REDMOND\\Source\\Repos\\ContentFilesExampleTest\\ContentFilesExampleTest\\ContentFilesExampleTest.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\2.2.202\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(350,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute() [C:\\Users\\nikolev.REDMOND\\Source\\Repos\\ContentFilesExampleTest\\ContentFilesExampleTest\\ContentFilesExampleTest.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\2.2.202\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(350,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskBuilder.ExecuteInstantiatedTask(ITaskExecutionHost taskExecutionHost, TaskLoggingContext taskLoggingContext, TaskHost taskHost, ItemBucket bucket, TaskExecutionMode howToExecuteTask) [C:\\Users\\nikolev.REDMOND\\Source\\Repos\\ContentFilesExampleTest\\ContentFilesExampleTest\\ContentFilesExampleTest.csproj]\r\n    0 Warning(s)\r\n    1 Error(s)\r\n\r\nTime Elapsed 00:00:01.67\r\n```\r\n\r\nThe issue here is that the selected framework for the contentfiles is a PCL framework and `+` in the name, encoded as `%2B`. \r\n\r\nNuGet extracts the encoded name, and writes that to the assets file, g.props as needed.\r\n\r\nPaths that the targets read from NuGet should be treated as strings and not decoded in any way. \r\n","Url":"https://github.com/dotnet/sdk/issues/3069","RelatedDescription":"Open issue \"ProduceContentAssets should not \"url decode\" paths provided by NuGet\" (#3069)"},{"Id":"427938176","IsPullRequest":false,"CreatedAt":"2019-04-01T22:24:03","Actor":"nguerrera","Number":"3068","RawContent":null,"Title":"Support framework satellite assemblies in self-contained deployment","State":"open","Body":"The runtime packs for Microsoft.WindowsDesktop.App now have satellites assemblies. However, they are not used by self-contained build or publish.\r\n\r\nThey should be deployed exactly as satellites from a NuGet package. That is:\r\n\r\n1. If `$(SatelliteResourceLanguages)` is not specified, then all satellites are deployed.\r\n\r\n2. If `$(SatelliteResourceLanguages)` is specified, then only matching satellites are deployed.\r\n\r\ncc @dsplaisted @leecow @vivmishra\r\n\r\nThis is needed for .NET Core 3.0 Preview 5","Url":"https://github.com/dotnet/sdk/issues/3068","RelatedDescription":"Open issue \"Support framework satellite assemblies in self-contained deployment\" (#3068)"},{"Id":"426276905","IsPullRequest":true,"CreatedAt":"2019-04-01T21:59:02","Actor":"peterhuene","Number":"3058","RawContent":null,"Title":"Fix apphost creation when using a publish profile.","State":"closed","Body":"When publishing an ASP.NET project using a publish profile that sets\r\n`RuntimeIdentifier`, various apphost-related properties are calculated before\r\nthe RID is set when the publish profile is imported.\r\n\r\nThis typically results in the expected file names for the restored assets not\r\nhaving the correct prefixes and suffixes for the target RID.  For example, if a\r\nWindows RID is set in the publish profile, the expected apphost asset is named\r\n`apphost` instead of the correct `apphost.exe`. This causes the apphost\r\ncustomization to be skipped because the expected apphost asset wasn't found.\r\n\r\nThe fix is to delay setting these properties until after the publish profile\r\nhas been imported by the Web SDK.  This is accomplished by moving the\r\nproperties into a target that is invoked based on every place in the SDK\r\nwhere the properties are used.\r\n\r\nFixes dotnet/cli#10647.","Url":"https://github.com/dotnet/sdk/pull/3058","RelatedDescription":"Closed or merged PR \"Fix apphost creation when using a publish profile.\" (#3058)"},{"Id":"427813834","IsPullRequest":false,"CreatedAt":"2019-04-01T16:59:31","Actor":"jzabroski","Number":"3067","RawContent":null,"Title":"Implement CleanFull target","State":"open","Body":"In my .NET Core projects, I define a \"cleanfull\" target in all my .NET Core projects that does the following:\r\n\r\n* Runs MSBuild Clean target\r\n* Runs custom task to remove all nuget packages\r\n* Runs custom task to remove MSTest results directory\r\n* Runs custom task to remove bin and obj directories\r\n\r\nThe normal MSBuild Clean is a pain in the ass to deal with when upgrading .NET framework versions and making sure metapackages resolve consistently between development environment and build server.\r\n\r\nThe only alternative way to solve this problem cleanly is to run your entire build pipeline, from local dev environment to build server, through a isolated process via docker container or similar.","Url":"https://github.com/dotnet/sdk/issues/3067","RelatedDescription":"Open issue \"Implement CleanFull target\" (#3067)"},{"Id":"427491342","IsPullRequest":false,"CreatedAt":"2019-04-01T03:08:33","Actor":"hrumhurum","Number":"3066","RawContent":null,"Title":"Intermittent file access errors to \"obj\\Release\\net45\\xxx.AssemblyInfo.cs\" file","State":"open","Body":"From time to time we get the following error on build agents:\r\n\r\nC:\\Program Files\\dotnet\\sdk\\2.1.505\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.GenerateAssemblyInfo.targets(134,5): error MSB3713: The file \"obj\\Release\\net45\\xxx.AssemblyInfo.cs\" could not be created. The process cannot access the file '...\\obj\\Release\\net45\\xxx.AssemblyInfo.cs' because it is being used by another process.\r\n\r\nSometimes it occurs on developer machines as well.\r\n\r\nThe classic MSBuild targets solved problems like that by waiting for access during 10 seconds or so. It would be nice to see a fix for that in .NET SDK as well.","Url":"https://github.com/dotnet/sdk/issues/3066","RelatedDescription":"Open issue \"Intermittent file access errors to \"obj\\Release\\net45\\xxx.AssemblyInfo.cs\" file\" (#3066)"},{"Id":"427411907","IsPullRequest":false,"CreatedAt":"2019-03-31T15:57:19","Actor":"barthamark","Number":"3065","RawContent":null,"Title":"Files generated before build (e.g. by NPM or Gulp) into the wwwroot folder might not be accessible","State":"open","Body":"I have a BeforeTargets=\"BeforeBuild\" script defined in my csproj file that executes a Gulp task which generates a bunch of js files taking more than 4 seconds to finish. These files are not accessible by the web application only after rebuilding the solution. However, if the script finishes quickly (couple milliseconds) then it will be fine after the first build.\r\n\r\n```\r\n<Target Name=\"NpmInstall\" BeforeTargets=\"BeforeBuild\">\r\n  <Exec Command=\"npm install\" />\r\n  <Exec Command=\"gulp\" />\r\n</Target>\r\n```\r\n\r\nThis might be a duplicate by one of the following issues, however, none of the workarounds fixed this scenario where the goal is to access these files locally on my development environment and not after publishing the website.\r\n\r\nhttps://github.com/aspnet/websdk/issues/114\r\nhttps://github.com/dotnet/sdk/issues/1044","Url":"https://github.com/dotnet/sdk/issues/3065","RelatedDescription":"Open issue \"Files generated before build (e.g. by NPM or Gulp) into the wwwroot folder might not be accessible\" (#3065)"},{"Id":"427275532","IsPullRequest":true,"CreatedAt":"2019-03-30T13:39:16","Actor":"dotnet-maestro[bot]","Number":"3063","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190329.2\r\n- **Date Produced**: 3/29/2019 1:07 PM\r\n- **Commit**: 31abd61b43b115a6af83c92ce35ed4e8efd01dfd\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19179.2\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19179.2\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3063","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3063)"},{"Id":"426954314","IsPullRequest":true,"CreatedAt":"2019-03-29T13:34:35","Actor":"dotnet-maestro[bot]","Number":"3061","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190329.1\r\n- **Date Produced**: 3/29/2019 10:57 AM\r\n- **Commit**: ef139c7533e2e33c5e0946b80cb1aa95d84da868\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19179.1\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19179.1\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3061","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3061)"},{"Id":"426251339","IsPullRequest":true,"CreatedAt":"2019-03-29T01:41:17","Actor":"wli3","Number":"3057","RawContent":null,"Title":"Cap project tools to netcoreapp2.2 and block creating new package","State":"closed","Body":"2 work are separate commits","Url":"https://github.com/dotnet/sdk/pull/3057","RelatedDescription":"Closed or merged PR \"Cap project tools to netcoreapp2.2 and block creating new package\" (#3057)"},{"Id":"426647712","IsPullRequest":true,"CreatedAt":"2019-03-28T21:51:11","Actor":"wli3","Number":"3060","RawContent":null,"Title":"WIP test ci","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/3060","RelatedDescription":"Closed or merged PR \"WIP test ci\" (#3060)"},{"Id":"426391209","IsPullRequest":false,"CreatedAt":"2019-03-28T16:44:48","Actor":"SravanthiDondapati","Number":"3059","RawContent":null,"Title":"NETSDK1064: Package Microsoft.VisualStudio.Web.CodeGeneration, version 2.1.1 was not found","State":"closed","Body":"Hi There,\r\n\r\nI am trying to configure Jenkins for my .Net Core Web API. We are using VS 2017 to build our code. So, when I try to build the project using command line **\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\15.0\\Bin\\MSBuild.exe\" /target:Clean,Build /property:Configuration=Release,VisualStudioVersion=15.0 \"projectName.sln\"** I get the below error: **NETSDK1064: Package Microsoft.VisualStudio.Web.CodeGeneration, version 2.1.1 was not found. It might have been deleted since NuGet restore. Otherwise, NuGet restore might have only partially completed, which might have been due to maximum path length restrictions.**\r\nCan anyone help me in resolving the issue.","Url":"https://github.com/dotnet/sdk/issues/3059","RelatedDescription":"Closed issue \"NETSDK1064: Package Microsoft.VisualStudio.Web.CodeGeneration, version 2.1.1 was not found\" (#3059)"},{"Id":"426231130","IsPullRequest":true,"CreatedAt":"2019-03-28T03:16:03","Actor":"wli3","Number":"3056","RawContent":null,"Title":"Cap project tools restore to netcoreapp2.2","State":"closed","Body":"Max project tools TFM will be netcoreapp2.2","Url":"https://github.com/dotnet/sdk/pull/3056","RelatedDescription":"Closed or merged PR \"Cap project tools restore to netcoreapp2.2\" (#3056)"},{"Id":"426221425","IsPullRequest":false,"CreatedAt":"2019-03-27T23:06:03","Actor":"aeos","Number":"3055","RawContent":null,"Title":"PackageDependencyResolution.targets error only occurring on Ubuntu 18.04.2 LTS","State":"open","Body":"We have a series of build scripts run through gulp which work flawlessly on windows, and inside a linux docker container. However, when run on a Ubuntu 18.04.2 LTS laptop, we get the following errors for various packages. If I build pack and push the project by itself the issue goes away. But if I build all of the projects through gulp the package won't build and failes with the following error:\r\n\r\n/usr/share/dotnet/sdk/2.2.105/Sdks/Microsoft.NET.Sdk/targets/Microsoft.PackageDependencyResolution.targets(208,5): error MSB4018: The \"ResolvePackageAssets\" task failed unexpectedly. [/home/carlos/workspace/stream-forms-backend/Common/Services/Services.csproj]\r\n/usr/share/dotnet/sdk/2.2.105/Sdks/Microsoft.NET.Sdk/targets/Microsoft.PackageDependencyResolution.targets(208,5): error MSB4018: System.IO.EndOfStreamException: Unable to read beyond the end of the stream. [/home/carlos/workspace/stream-forms-backend/Common/Services/Services.csproj]\r\n/usr/share/dotnet/sdk/2.2.105/Sdks/Microsoft.NET.Sdk/targets/Microsoft.PackageDependencyResolution.targets(208,5): error MSB4018:    at System.IO.BinaryReader.FillBuffer(Int32 numBytes) [/home/carlos/workspace/stream-forms-backend/Common/Services/Services.csproj]\r\n/usr/share/dotnet/sdk/2.2.105/Sdks/Microsoft.NET.Sdk/targets/Microsoft.PackageDependencyResolution.targets(208,5): error MSB4018:    at System.IO.BinaryReader.ReadInt32() [/home/carlos/workspace/stream-forms-backend/Common/Services/Services.csproj]\r\n/usr/share/dotnet/sdk/2.2.105/Sdks/Microsoft.NET.Sdk/targets/Microsoft.PackageDependencyResolution.targets(208,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ResolvePackageAssets.CacheReader.ReadItem() [/home/carlos/workspace/stream-forms-backend/Common/Services/Services.csproj]\r\n/usr/share/dotnet/sdk/2.2.105/Sdks/Microsoft.NET.Sdk/targets/Microsoft.PackageDependencyResolution.targets(208,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ResolvePackageAssets.CacheReader.ReadItemGroup() [/home/carlos/workspace/stream-forms-backend/Common/Services/Services.csproj]\r\n/usr/share/dotnet/sdk/2.2.105/Sdks/Microsoft.NET.Sdk/targets/Microsoft.PackageDependencyResolution.targets(208,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ResolvePackageAssets.ReadItemGroups() [/home/carlos/workspace/stream-forms-backend/Common/Services/Services.csproj]\r\n/usr/share/dotnet/sdk/2.2.105/Sdks/Microsoft.NET.Sdk/targets/Microsoft.PackageDependencyResolution.targets(208,5): error MSB4018:    at Microsoft.NET.Build.Tasks.ResolvePackageAssets.ExecuteCore() [/home/carlos/workspace/stream-forms-backend/Common/Services/Services.csproj]\r\n/usr/share/dotnet/sdk/2.2.105/Sdks/Microsoft.NET.Sdk/targets/Microsoft.PackageDependencyResolution.targets(208,5): error MSB4018:    at Microsoft.NET.Build.Tasks.TaskBase.Execute() [/home/carlos/workspace/stream-forms-backend/Common/Services/Services.csproj]\r\n/usr/share/dotnet/sdk/2.2.105/Sdks/Microsoft.NET.Sdk/targets/Microsoft.PackageDependencyResolution.targets(208,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute() [/home/carlos/workspace/stream-forms-backend/Common/Services/Services.csproj]\r\n/usr/share/dotnet/sdk/2.2.105/Sdks/Microsoft.NET.Sdk/targets/Microsoft.PackageDependencyResolution.targets(208,5): error MSB4018:    at Microsoft.Build.BackEnd.TaskBuilder.ExecuteInstantiatedTask(ITaskExecutionHost taskExecutionHost, TaskLoggingContext taskLoggingContext, TaskHost taskHost, ItemBucket bucket, TaskExecutionMode howToExecuteTask) [/home/carlos/workspace/stream-forms-backend/Common/Services/Services.csproj]","Url":"https://github.com/dotnet/sdk/issues/3055","RelatedDescription":"Open issue \"PackageDependencyResolution.targets error only occurring on Ubuntu 18.04.2 LTS\" (#3055)"},{"Id":"426012337","IsPullRequest":true,"CreatedAt":"2019-03-27T23:01:02","Actor":"johnbeisner","Number":"3054","RawContent":null,"Title":"Moving performance tests under CI to Azure DevOps","State":"closed","Body":"Moving performance tests under CI to Azure DevOps \r\n\r\n**.vsts-ci.yml**\r\nAdding \"Windows_Performance Build_Release\" and \"Linux_Performance Build_Release\" CI legs.\r\n\r\n**eng/build.yml**\r\nDo only 4 performance test iterations for CI\r\n\r\n\r\n@DrewScoggins\r\n@adiaaida\r\n\r\n_**Next Steps:**_\r\nCreate a daily trigger with BenchView upload\r\nCreate a commit trigger with BenchView upload\r\nMove dotnet/sdk:master from phases to jobs","Url":"https://github.com/dotnet/sdk/pull/3054","RelatedDescription":"Closed or merged PR \"Moving performance tests under CI to Azure DevOps\" (#3054)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"420117627","IsPullRequest":false,"CreatedAt":"2019-03-12T17:35:16","Actor":"vivmishra","Number":"103","RawContent":null,"Title":"March 2019 .NET Updates","State":"open","Body":"# March 2019 .NET Updates\r\n\r\nThe following .NET updates were released in March 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework March 2019 Update - March 19, 2019](https://devblogs.microsoft.com/dotnet/net-framework-march-2019-update/)\r\n* [.NET Framework April 2, 2019 Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - April 2, 2019](https://devblogs.microsoft.com/dotnet/net-framework-april-2-2019-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.15 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.15/1.0.15.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.12/1.1.12.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.9 and .NET Core SDK 2.1.505 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.9/2.1.9.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.3 and .NET Core SDK 2.2.105 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.3/2.2.3.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2432](https://github.com/dotnet/core/issues/2432)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/103","RelatedDescription":"Open issue \"March 2019 .NET Updates\" (#103)"},{"Id":"415363751","IsPullRequest":false,"CreatedAt":"2019-02-27T22:49:51","Actor":"leecow","Number":"102","RawContent":null,"Title":"SDK Installers will remove previous patch versions","State":"open","Body":"The SDK Installers for Windows will upgrade patch versions in place within the same feature band. This will reduce the number of SDKs that are installed on programmer machines.\r\n\r\nFeature bands of the SDK are defined like 3.0.1nn. [Find out more about SDK version numbers](https://docs.microsoft.com/dotnet/core/versions/#versioning-details).\r\n\r\nThis means when .NET Core SDK 3.0.101 becomes available and is installed, .NET Core SDK 3.0.100 will be removed from the machine if it exists. When .NET Core SDK 3.0.200 becomes available and is installed on the same machine, .NET Core SDK versions like 3.0.101 will not be removed but stay side by side with 3.0.200.\r\n\r\nThis approach supports use of `global.json` which will roll forward across patch versions, but not feature bands of the SDK. Thus, upgrading via the SDK installer will not result in errors due to a missing SDK. Feature bands also align with side by side Visual Studio installations for those users that install SDKs for Visual Studio use. For example, Visual Studio 15.9 uses .NET Core SDK 2.2.500 but does not support .NET Core SDK 2.2.600.\r\n\r\nFind out how to [remove other .NET Core SDK versions here.](https://docs.microsoft.com/dotnet/core/versions/remove-runtime-sdk-versions).","Url":"https://github.com/dotnet/announcements/issues/102","RelatedDescription":"Open issue \"SDK Installers will remove previous patch versions\" (#102)"},{"Id":"410971363","IsPullRequest":false,"CreatedAt":"2019-02-15T22:24:40","Actor":"richlander","Number":"101","RawContent":null,"Title":"Publishing .NET Core images to Microsoft Container Registry (MCR)","State":"open","Body":"# Publishing .NET Core images to Microsoft Container Registry (MCR)\r\n\r\nMicrosoft teams are now publishing container images to the [Microsoft Container Registry](https://azure.microsoft.com/en-us/blog/microsoft-syndicates-container-catalog/). There are two primary reasons for this change:\r\n\r\n* Syndicate Microsoft-provided container images to multiple registries, like Docker Hub and Red Hat.\r\n* Use Microsoft Azure as a global CDN for delivering Microsoft-provided container images.\r\n\r\nYou will use and see MCR as a storage back-end for Microsoft images. The primary way you learn about Microsoft container images and tags will be through a registry, which for most users will continue to be Docker Hub. Most of the experience you've had browsing for .NET Core container images will continue unchanged with this new model. The Docker Hub URLs you've used for Microsoft repos will continue to work, and forward to updated locations on Docker Hub. Existing Docker Hub will images will be maintained as-is.\r\n\r\nSee [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/) for the most updated information on our use of MCR.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #935](https://github.com/dotnet/dotnet-docker/issues/935)\r\n\r\n## Starting with .NET Core nightly repo\r\n\r\nOn the .NET team, we started our [transition to MCR](https://github.com/dotnet/dotnet-docker/issues/745) with the .NET Core \"nightly\" repo. [dotnet-nightly](dockerhub.com/r/microsoft/dotnet-nightly) is now hosted on MCR and syndicated to Docker Hub. We started with the nightly repo in order to discover and fix any challenges we found with this new model before we move our higher-traffic primary container repository.\r\n\r\nWe will start publishing [dotnet](dockerhub.com/r/microsoft/dotnet) to MCR a bit later, in either February or March. This issue will be updated when that happens.\r\n\r\n## Repo Split\r\n\r\nThe [.NET Core repo](https://hub.docker.com/r/microsoft/dotnet) currently includes 4 major categories of tags: \r\n\r\n* `sdk`\r\n* `aspnetcore-runtime`\r\n* `runtime` \r\n* `runtime-deps`\r\n\r\nProviding all of the tags in one place has helped with discoverability but made for a repo with an enormous README that can be challenging to navigate and consume. It is large enough that we exceeded Docker Hub README limits and had to artificially make it smaller.\r\n\r\nGoing forward, we will provide a repo for each of the tag categories listed above. We'll also provide a \"product repo\" that will hierarchicaly group all of our repos together. This will satisfy discoverability needs so that it will be easy to find the tags you want.\r\n\r\nYou can already see this experience with [microsoft-dotnet-core-nightly](https://hub.docker.com/_/microsoft-dotnet-core-nightly). There are now multiple repos for our nightly builds:\r\n\r\n* [.NET Core Nightly product repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly)\r\n* [.NET Core SDK Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-sdk/)\r\n* [.NET Core ASP.NET Core Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-aspnet/)\r\n* [.NET Core Runtime Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime/)\r\n* [.NET Core Runtime-deps Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime-deps/)\r\n\r\nThe same split will exist for the non-nightly stable repo (currently hosted at  [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet)) when we start publishing it to MCR and syndicating it back to DockerHub.\r\n\r\n## Changes to registry URL\r\n\r\nThe biggest change is that your Dockerfiles need to be updated to point to the MCR registry in order get access to new .NET Core container tags. The same change is required for scripts or human operations that pull images via `docker pull`.\r\n\r\nThe following example shows the registry path, repo and tag for the .NET Core 2.2 \"Nightly\" SDK on MCR:\r\n\r\n```console\r\nmcr.microsoft.com/dotnet/core-nightly/sdk:2.2\r\n```\r\n\r\nAs comparison, the following repo and tag have been used to date for the .NET Core 2.2 \"Nightly\" SDK on Docker Hub:\r\n\r\n```console\r\nmicrosoft/dotnet-nightly:2.2-sdk\r\n```\r\n\r\nThe new repo URL is provided at each of the news repos. For example, the new .NET Core SDK \"nightly\" repo provides a box on the right where you can copy and paste the correct MCR-based repo syntax that you can use for `docker pull` or in `FROM` statements in your Dockerfiles.\r\n\r\n![image](https://user-images.githubusercontent.com/2608468/52811702-95c5eb80-304a-11e9-8de8-e6ea1f4b4d75.png)\r\n\r\n## Servicing existing Docker Hub tags\r\n\r\nWe will continue to service existing non-version-specific or floating tags on Docker Hub while the associated .NET Core version is supported. For example the `microsoft/dotnet:2.1-sdk` tag is a floating tag that will continue to be serviced for the lifetime of .NET Core 2.1. You can continue using floating tags without issue.\r\n\r\nIf you use non-floating tags, like `microsoft/dotnet:2.1.504-sdk-alpine`, then you will need to update your Dockerfile to use a new non-floating tag. No new non-floating tags will be published to `microsoft/dotnet` and `microsoft/dotnet-nightly` after we fully transition to MCR.\r\n\r\n.NET Core 3.0 Preview 3 and later will only be made available on MCR.\r\n\r\n## Microsoft is a Verified Publisher\r\n\r\nUntil now, Microsoft-provided container images were considered \"community images\". As part of this change, we are re-classifying Microsoft as a \"verified publisher\" on Docker Hub. This designation should make it clearer that .NET and other Microsoft-provided images are coming from a verified source. There clearly was that expectation previously, but Docker is now making that clearer in the Docker Hub pages they host for Microsoft.\r\n\r\nWe will provide official vulnerability scanning Microsoft-provided images as a second phase of this transition.","Url":"https://github.com/dotnet/announcements/issues/101","RelatedDescription":"Open issue \"Publishing .NET Core images to Microsoft Container Registry (MCR)\" (#101)"},{"Id":"410784442","IsPullRequest":false,"CreatedAt":"2019-02-15T14:06:29","Actor":"TaraOverfield","Number":"100","RawContent":null,"Title":"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809","State":"open","Body":"<strong><em>Final Update 2/19/19 @1:30 PM (PST)</em></strong><em>: This </em><em>advisory is now resolved with no action needed from Microsoft Customers. The issue was not applicable to any valid or supported configuration. There is no consequence for .NET 4.8 Preview customers. </em>\r\n\r\n<em>We strive to share timely information to protect our customer’s productivity, in this case, our finding was thankfully of no consequence for customers on supported configurations.</em>\r\n\r\n<del><em><strong>Update 2/15/19 @3:35 PM (PST)</strong></em><em>: As we continue our investigation, we are finding the issue to be restricted to a limited and isolated set of test-only systems that are using non-official versions of the .NET 4.8 Preview. As of 2/15/19 around 12:00 pm (PST) we further tightened our delivery mechanisms to ensure that the February .NET security updates are only deployed to their expected target systems.</em></del>\r\n\r\n<del><span>The </span><a href=\"https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/\" rel=\"nofollow\">February 2019 Security and Quality Rollup for Windows 10 update 1809</a><span> was released earlier this week. We have received multiple customer reports of issues when a customer has installed .NET Framework 4.8 Preview then installed the February security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>.</span> These reports are specific to only to the scenario when a customer has installed both .NET Framework 4.8 Preview and the February security update.</del>\r\n\r\n<del>We are actively working on investigating and addressing this issue. If you installed the February 2019 security update and have not seen any negative behavior, we recommend that you leave your system as-is but closely monitor it and ensure that you apply upcoming .NET Framework updates.</del>\r\n\r\n<del>We will continue to update this <a href=\"https://github.com/dotnet/announcements/issues/100\" rel=\"nofollow\">post</a> as we have new information.</del>\r\n<h2><del>Guidance</del></h2>\r\n<del>We are working on guidance and will update this post and as we have new information.</del>\r\n<h2><del>Workaround</del></h2>\r\n<del>There are no known workarounds at this time.</del>\r\n<h2><del>Symptoms</del></h2>\r\n<del>After installing .NET Framework 4.8 Preview then the February 2019 security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>, Visual Studios will crash with this error message:</del>\r\n<p class=\"xxxxxmsonormal\"><del><b><span style=\"font-size: 10.5pt;font-family: 'Segoe UI',sans-serif;color: black\">\"Exception has been thrown by the target of an invocation.\"</span></b></del></p>","Url":"https://github.com/dotnet/announcements/issues/100","RelatedDescription":"Open issue \"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809\" (#100)"},{"Id":"410455095","IsPullRequest":false,"CreatedAt":"2019-02-14T19:28:25","Actor":"richlander","Number":"99","RawContent":null,"Title":"Supporting new Alpine versions (for containers)","State":"open","Body":"# Supporting new Alpine versions (for containers)\r\n\r\n[Alpine 3.9](https://twitter.com/alpinelinux/status/1090416212822110214) was recently announced. Congratulations, Alpine team! On the .NET team, we are committed to supporting new Alpine versions quickly, and also need to define a policy for older versions. This policy only applies for the container images that we publish.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #933](https://github.com/dotnet/dotnet-docker/issues/933)\r\n\r\n## Policy\r\n\r\nWe intend to establish the following policy for supporting Alpine with .NET Core container images:\r\n\r\n* Support new Alpine versions within 60 days of release (hopefully much less).\r\n* Support n-1 Alpine versions for 3 months after we support a new Alpine version.\r\n\r\nNote: The [.NET Core support policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md) may be broader. This policy is specific to the container images we produce.\r\n\r\n## Plans\r\n\r\nWe're in the process of [fixing issues required to support Alpine 3.9](https://github.com/dotnet/dotnet-docker/issues/921). We expect that these issues will be resolved in February and that we'll be able to provide support for Alpine 3.9 in March.\r\n\r\nWe will produce Alpine 3.9 images for .NET Core 2.1, 2.2 and 3.0. Assuming we publish 3.9 images in March, we'll stop producing and supporting Alpine 3.7 and 3.8 images after June (2019).\r\n\r\n## Using Alpine-based .NET Core images\r\n\r\nWe produce a variety of Alpine-based images. You can either depend on a specific Alpine version, like with `microsoft/dotnet:2.2-sdk-alpine3.8` or opt to use the latest Alpine image we have to offer, like with `microsoft/dotnet:2.2-sdk-alpine`. Either are good choices. It is just a question of whether you want to make a conscious decision to move to later Alpine releases.\r\n\r\n## Support for ARM32?\r\n\r\nWe produce Alpine images for x64 (and ARM64, shortly). The [Alpine 3.9 announcement](https://twitter.com/alpinelinux/status/1090416212822110214) made mention of support for ARM32v7. We would like to enable .NET Core [Alpine-based images on ARM32](https://github.com/gliderlabs/docker-alpine/issues/463#issuecomment-460530395). We are patiently waiting for that to happen. If that's important to you, you should comment on that thread.","Url":"https://github.com/dotnet/announcements/issues/99","RelatedDescription":"Open issue \"Supporting new Alpine versions (for containers)\" (#99)"},{"Id":"409840927","IsPullRequest":false,"CreatedAt":"2019-02-13T14:48:21","Actor":"TaraOverfield","Number":"98","RawContent":null,"Title":"February 2019 .NET Updates","State":"open","Body":"# February 2019 .NET Updates\r\nThe following .NET updates were released in February 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework February 2019 Security and Quality Rollup - February 12, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/)\r\n* [.NET Framework February 2019 Preview of Quality Rollup - February 19, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/19/net-framework-february-2019-preview-of-quality-rollup/)\r\n\r\n## .NET Support Policies\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/98","RelatedDescription":"Open issue \"February 2019 .NET Updates\" (#98)"},{"Id":"409436643","IsPullRequest":false,"CreatedAt":"2019-02-12T18:21:22","Actor":"leecow","Number":"97","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability","State":"open","Body":"## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a domain spoofing vulnerability in .NET Framework and .NET Core which causes the meaning of a URI to change when International Domain Name encoding is applied. An attacker who successfully exploited the vulnerability could redirect a URI.\r\n\r\nThe security update addresses the vulnerability by disallowing certain Unicode characters from the URI.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/35265\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core 1.0 or 1.1 based application that uses the [System.Private.Uri](https://www.nuget.org/packages/System.Private.Uri/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0 | 4.3.1\r\n\r\nAny .NET Core 2.1 or 2.2 based application that uses the [Microsoft.NETCore.App](https://www.nuget.org/packages/Microsoft.NETCore.App) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6, 2.1.7, 2.2.0, 2.2.1 | 2.1.8, 2.2.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Private.Uri` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.2.1, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Private.Uri/4.3.0` is a reference to version 4.3.0 of `System.Private.Uri`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.8 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.2 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Private.Uri` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.Private.Uri` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0657](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0657)\r\n\r\n### Revisions\r\n\r\nV1.0 (February 12, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-02-08_\r\n","Url":"https://github.com/dotnet/announcements/issues/97","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability\" (#97)"},{"Id":"397026248","IsPullRequest":false,"CreatedAt":"2019-01-08T18:17:45","Actor":"leecow","Number":"96","RawContent":null,"Title":"January 2019 .NET Updates","State":"open","Body":"# January 2019 .NET Updates\r\n\r\nThe following .NET updates were released in January 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework January 2019 Preview of Quality Rollup - January 15, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/15/net-framework-january-2019-preview-of-quality-rollup/)\r\n* [.NET Framework January 2019 Security and Quality Rollup - January 8, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/08/net-framework-january-2019-security-and-quality-rollup/)\r\n* [.NET Framework January 22, 2018 Preview of Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - January 22, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/22/net-framework-january-22-2018-preview-of-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.7 and .NET Core SDK 2.1.503 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.7/2.1.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.1 and .NET Core SDK 2.2.102 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.1/2.2.1.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2210](https://github.com/dotnet/core/issues/2210)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/96","RelatedDescription":"Open issue \"January 2019 .NET Updates\" (#96)"},{"Id":"397020176","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:27","Actor":"blowdart","Number":"95","RawContent":null,"Title":" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a tampering vulnerability exists when .NET Core improperly handles specially crafted files. An attacker who successfully exploited this vulnerability could write arbitrary files and directories to certain locations on a vulnerable system. However, an attacker would have limited control over the destination of the files and directories.\r\n\r\nTo exploit the vulnerability, an attacker must send a specially crafted file to a vulnerable system\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core handles these files.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34427\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nIf your application does not extract ZIP compressed files it is unaffected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.IO.Compression.ZipFile](https://www.nuget.org/packages/System.IO.Compression.ZipFile/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.IO.Compression.ZipFile) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n`System.IO.Compression.ZipFile` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\nFinally, you must restart your applications once an updated runtime or SDK is installed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Danny Grander](https://twitter.com/grander) of [Snyk](https://snyk.io/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-8416](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8416)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected pacakge table.\r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/95","RelatedDescription":"Open issue \" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\" (#95)"},{"Id":"397020142","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:23","Actor":"blowdart","Number":"94","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of an information disclosure vulnerability exists in .NET Framework and .NET Core which allows bypassing Cross-origin Resource Sharing (CORS) configurations. An attacker who successfully exploited the vulnerability could retrieve content, that is normally restricted, from a web application.\r\n\r\nThe security update addresses the vulnerability by enforcing CORS configuration to prevent its bypass.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34428\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.2.0 | 2.2.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Net.Http` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `SSystem.Net.Http/4.3.0` is a reference to version 4.3.0 of `System.Net.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Net.Http` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0545](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0545)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected package table. \r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n","Url":"https://github.com/dotnet/announcements/issues/94","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\" (#94)"},{"Id":"390948658","IsPullRequest":false,"CreatedAt":"2018-12-14T03:22:58","Actor":"wu-yafeng","Number":"93","RawContent":null,"Title":"Docker image with tag '2.2-aspnetcore-runtime' is not compatible","State":"closed","Body":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]","Url":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Closed issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93)"},{"Id":"390193072","IsPullRequest":false,"CreatedAt":"2018-12-12T12:56:53","Actor":"bilalmalik777","Number":"92","RawContent":null,"Title":".net core Console","State":"closed","Body":"I am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n    networks:\r\n     - app-network\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\nIf the detail is not enough or you do not get my point, you can share your confusion in comment","Url":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Closed issue \".net core Console\" (#92)"},{"Id":"380346599","IsPullRequest":false,"CreatedAt":"2018-11-13T17:44:44","Actor":"leecow","Number":"91","RawContent":null,"Title":"November 2018 .NET Updates","State":"open","Body":"# November 2018 .NET Updates\r\n\r\nThe following .NET updates were released in November 2018. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core November 2018 (2.1.6 and SDK 2.1.500) Update release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.6/2.1.6.md)\r\n\r\nA [discussion issue](https://github.com/dotnet/core/issues/2053) is available for questions or feedback about this release.\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [October 2018](https://github.com/dotnet/announcements/issues/89)\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/91","RelatedDescription":"Open issue \"November 2018 .NET Updates\" (#91)"},{"Id":"375230004","IsPullRequest":false,"CreatedAt":"2018-10-29T21:45:27","Actor":"terrajobst","Number":"90","RawContent":null,"Title":"The future of JSON in .NET Core 3.0","State":"open","Body":"JSON has become an essential part of virtually all modern .NET applications and in many cases even surpassed the usage of XML. However, .NET hasn't had a (great) built-in way to deal with JSON. Instead we've relied on [Json.NET] which continues to serve the .NET ecosystem well.\r\n\r\n[Json.NET]: https://www.newtonsoft.com/json\r\n\r\nMoving forward, we plan on making some changes to our JSON support:\r\n\r\n* **We need high-performance JSON APIs**. We need a new set of JSON APIs that are highly tuned for performance by using `Span<T>` and allows for processing UTF-8 directly without having to transcode to UTF-16 `string` instances. Both aspects are critical for our web server Kestrel, where throughput is a key requirement.\r\n\r\n* **Remove dependency from ASP.NET Core to Json.NET**. Today, ASP.NET Core has a dependency on Json.NET. While this provides a tight integration between ASP.NET Core and Json.NET, it also means that application developers cannot freely choose which JSON library they are using. This is also problematic for customers of Json.NET as the version is dictated by the underlying platform. However, Json.NET is frequently updated and application developers often want to -- or even have to -- use a specific version. Thus, we want to remove the dependency from ASP.NET Core 3.0 to Json.NET so that customers can choose which version to use, without fearing they might accidentally break the underlying platform. In addition, this makes it also possible to plug-in an entirely different JSON library.\r\n\r\n* **Provide an ASP.NET Core integration package for Json.NET**. Json.NET has basically become the Swiss Army knife of JSON processing in .NET. It provides many options and facilities that allow customers to handle their JSON needs with ease. We don't want to compromise on the Json.NET support customers are getting today, for example, the ability to configure the JSON serialization via the `AddJsonOptions` extension method. Thus, we want to provide the Json.NET integration as a NuGet package that developers can optionally install so they get all the bells and whistles they get from Json.NET today. The other part of this work item is to ensure we have the right extension points so that other parties can provide similar integration packages for their JSON library of choice.\r\n\r\nBelow are more details around this plan.\r\n\r\n## The need for high-performance JSON APIs\r\n\r\nThe requirements for the .NET stack have changed a bit since the arrival of .NET Core. Historically, .NET has valued usability and convenience. With .NET Core, we've added a focus on performance, and we've made significant investments to serve high performance needs. And the [improvements we made][techempower] in the popular TechEmpower benchmark are a testament to that.\r\n\r\n[techempower]: https://www.techempower.com/blog/2016/11/16/framework-benchmarks-round-13/\r\n\r\nWith .NET Core 2.1, we've added a brand new primitive called [Span\\<T>][span-msdn] that allows us to represent native memory and arrays in a uniform way. With this type, we've also added a set of parsing and encoding APIs that are much more memory efficient without having to resort to unsafe code.\r\n\r\n[span-msdn]: https://msdn.microsoft.com/en-us/magazine/mt814808.aspx\r\n\r\nPart of the work of minimizing allocations is to avoid having to transcode UTF-8 payloads into UTF-16 strings, purely for parsing reasons. Currently, Json.NET is implemented by reading UTF-16. We need the ability to read (and write) JSON documents directly in UTF-8 because most network protocols (including HTTP) use UTF-8.\r\n\r\nDuring .NET Core 2.1 we've learned that updating our existing APIs to leverage `Span<T>` has limits. While we did add a bunch of overloads that accept spans, we also had to produce brand new APIs that are designed around minimizing allocations and dealing with buffers, which we exposed in `System.Buffers` namespaces. And with `System.IO.Pipelines` we've also added a programming model that enables developers to share buffers without having to deal with lifetime issues.\r\n\r\nBased on these experiences we believe in order to support JSON parsing, we'll need to expose a new set of JSON APIs that are specifically geared for high-performance scenarios.\r\n\r\nYou might wonder why we can't just update Json.NET to include support for parsing JSON using `Span<T>`? Well, James Newton-King -- the author of Json.NET -- has the following to say about that:\r\n\r\n> Json.NET was created over 10 years ago, and since then it has added a wide range of features aimed to help developers work with JSON in .NET. In that time Json.NET has also become far and away NuGet's most depended on and downloaded package, and is the go-to library for JSON support in .NET. Unfortunately, Json.NET's wealth of features and popularity works against making major changes to it. Supporting new technologies like `Span<T>` would require fundamental breaking changes to the library and would disrupt existing applications and libraries that depend on it.\r\n>\r\n> Going forward Json.NET will continue to be worked on and invested in, both addressing known issues today and supporting new platforms in the future. Json.NET has always existed alongside other JSON libraries for .NET, and there will be nothing to prevent you using one or more together, depending on whether you need the performance of the new JSON APIs or the large feature set of Json.NET.\r\n\r\n## Move Json.NET integration into a separate NuGet package\r\n\r\nToday, you cannot use ASP.NET Core without Json.NET because it is a dependency of ASP.NET Core itself. Over the years, we've received feedback that the dependency can conflict with other libraries that have their own dependency on a different version of Json.NET. In the past, we've considered addressing this issue by using a private copy of Json.NET in ASP.NET. However, this would create problems when developers want to configure Json.NET (for instance, in order to control how the serializer behaves when formatting JSON objects).\r\n\r\nMoving forward we'd like to:\r\n\r\n1. Replace the internal usage of Json.NET in ASP.NET Core by the new platform-provided JSON APIs.\r\n\r\n2. Factor the public facing usage of Json.NET into an optional integration package that can be acquired from NuGet.\r\n\r\nSo the existing integration between ASP.NET Core and Json.NET will continue to be supported, but will be moving out of the platform and into a separate package. However, since the integration is then designed to sit on top of the platform, it will also allow customers to update Json.NET to later versions.\r\n\r\nFurthermore, customers who need more performance can also choose to use the new JSON APIs, at the expense of the rich feature set that Json.NET offers.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/33115.","Url":"https://github.com/dotnet/announcements/issues/90","RelatedDescription":"Open issue \"The future of JSON in .NET Core 3.0\" (#90)"},{"Id":"368440353","IsPullRequest":false,"CreatedAt":"2018-10-09T23:44:06","Actor":"vivmishra","Number":"89","RawContent":null,"Title":"October 2018 .NET Updates","State":"open","Body":"# October 2018 .NET Updates\r\n\r\nThe following .NET updates were released in October 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core October 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/10/09/net-core-october-2018-update-net-core-1-0-and-1-1/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/89","RelatedDescription":"Open issue \"October 2018 .NET Updates\" (#89)"},{"Id":"368429033","IsPullRequest":false,"CreatedAt":"2018-10-09T22:51:18","Actor":"leecow","Number":"88","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core when HTTP authentication information is inadvertently exposed in an outbound request that encounters an HTTP redirect. An attacker who successfully exploited this vulnerability could use the information to further compromise the web application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handles HTTP redirects.\r\n\r\nSystem administrators running .NET Core 1.0 or .NET Core 1.1 applications must update their .NET Core runtimes to versions 1.0.13 and 1.1.10 then restart their applications. If installed applications target .NET Core 2.0, the applications must be migrated to 2.1 or newer and redeployed.\r\n\r\nDevelopers must update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core 2.0](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 then redeploy.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at <https://github.com/dotnet/corefx/issues/32730>\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nNone\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nAdditionally package authors should check their dependencies to ensure they aren't depending on a vulnerable version of the following package:\r\n\r\n<a name=\"package-list\"></a>Package name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Net.Http| 2.0.20126.16343, 2.0.20505, 2.0.20710, 4.0.0, 4.1.0, 4.1.1, 4.1.2, 4.3.0, 4.3.1, 4.3.2, 4.3.3 |  4.3.4 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nTo check the currently installed runtimes and SDKs with version 2.1 or later of .NET Core, open a command prompt and run the `dotnet --info` command. You should see an output similar to the following:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.403\r\n Commit:    04e15494b6\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.403\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.5\r\n  Commit:  290303f510\r\n\r\n.NET Core SDKs installed:\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.10 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf you don't see a runtime entry for 1.0.13 or 1.1.10, any .NET Core 1.x applications run on that computer are vulnerable.\r\n\r\nIf you don't have a 2.1 version of the runtime or SDK installed, you can produce the complete list of runtimes by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows | `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS | `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms | `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.13, 1.1.10 then any application targeting versions 1.0 or 1.1 are vulnerable.\r\n\r\nAdditionally, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n### <a name=\"fix-runtime\">How do I fix the vulnerability?\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.13, 1.1.10 and install the latest 2.1 runtime, ensuring that any 2.0 applications are migrated to 2.1 as soon as possible.\r\n\r\n Developers are advised to update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at <https://github.com/dotnet/> and <https://github.com/aspnet/>, respectively. The Announcements repo for each product (<https://github.com/dotnet/Announcements> and <https://github.com/aspnet/Announcements>) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8292](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8292)\r\n\r\n### Revisions\r\n\r\nV1.0 (October 10, 2018): Advisory published.\r\n_Version 1.0_\r\n_Last Updated 2018-10-10_\r\n","Url":"https://github.com/dotnet/announcements/issues/88","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\" (#88)"},{"Id":"367393517","IsPullRequest":false,"CreatedAt":"2018-10-05T22:58:51","Actor":"leecow","Number":"87","RawContent":null,"Title":".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan","State":"open","Body":"# .NET Core Release Data (releases.json) Redesign and Deprecation\r\n\r\nThe releases.json and releases.csv files began life as helper tools for some of our internal release work, some experimentation and to possibly be useful to the community. It has been great to learn the files are indeed in use and many folks depend on them as a trigger for a number of activities.\r\n\r\n* [release-notes/releases.json](https://github.com/dotnet/core/blob/master/release-notes/releases.json)\r\n* [release-notes/releases.csv](https://github.com/dotnet/core/blob/master/release-notes/releases.csv)\r\n\r\nA discussion topic is available to share thoughts and see what others are thinking at https://github.com/dotnet/core/issues/1986\r\n\r\nBetween the usages which we have become aware and in considering further activities that could be enabled to reason about things such as checking .NET Core version availability and support status, it became clear the current format is inadequate.\r\n\r\nAn updated format has been designed and tested which will replace the current files. The timeline below describes the path to obsoleting the current files.\r\n\r\n## The Plan\r\n\r\n| Date | Action |\r\n| :--- | :----- |\r\n| Oct 2018 | Notify the community of the coming change |\r\n| Oct 2018 | Release the new json format into dotnet/core |\r\n| Oct 2018 - Feb 2019 | Maintain the old json and csv files |\r\n| Feb 2019 | Reminder announcement that old format file is coming soon |\r\n| Mar 2019 | Old json and csv files are obsoleted and removed from dotnet/core |\r\n\r\n## Breaking change\r\n\r\nIf you are currently utilizing the old version json or csv, you will need to update the relevant code to work with the new format. If you are just getting started with consuming this data, use the new version.\r\n\r\n## The Format\r\n\r\nBelow are fragments of the files from our most recent .NET Core release.\r\n\r\n### release-index.json\r\n\r\nThis file consists of a top level array with data on the latest release versions and a property for locating the more detailed channel-specific releases.json. This file is found in [dotnet/core/release-notes](https://github.com/dotnet/core/tree/new-json/release-notes/)\r\n\r\n[releases-index.json](https://github.com/dotnet/core/blob/new-json/release-notes/releases-index.json)\r\n\r\n```\r\n{\r\n    \"releases-index\": [\r\n        {\r\n            \"channel-version\": \"2.1\",\r\n            \"latest-release\": \"2.1.5\",\r\n            \"latest-release-date\":\"2018-10-02\",\r\n            \"product\": \".NET Core\",\r\n            \"support-phase\": \"lts\",\r\n            \"eol-date\": \"\",\r\n            \"releases.json\": \"https://github.com/dotnet/core/blob/master/release-notes/2.1/releases.json\",\r\n        },\r\n        ...\r\n}\r\n```\r\n\r\n### releases.json\r\n\r\nThis file provides detailed data for each release. A copy of this file will be found in each versioned directories under [dotnet/core/release-notes](https://github.com/dotnet/core/release-notes). For example [dotnet/core/release-notes/2.1](https://github.com/dotnet/core/tree/new-json/release-notes/2.1)\r\n\r\n\r\n[releases.json](https://github.com/dotnet/core/tree/new-json/release-notes/2.1/releases.json)\r\n\r\n```\r\n{\r\n    \"channel-version\": \"2.1\",\r\n    \"latest-release\": \"2.1.5\",\r\n    \"latest-release-date\":\"2018-10-12\",\r\n    \"support-phase\": \"lts\",\r\n    \"eol-date\": \"\",\r\n    \"lifecycle-policy\": \"https://www.microsoft.com/net/support/policy\",\r\n    \"releases\":\r\n    [\r\n        {\r\n            \"release-date\":  \"2018-10-02\",\r\n            \"release-version\":  \"2.1.5\",\r\n            \"security\":  false,\r\n            \"release-notes\":  \"https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.5/2.1.5.md\",\r\n            \"runtime\":  \r\n            {\r\n                \"version\":  \"2.1.5\",\r\n                \"version-display\":  \"2.1.5\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"files\":  \r\n                [\r\n                    {\r\n                        \"name\": \"dotnet-runtime-linux-arm.tar.gz\",\r\n                        \"url\": \"https://download.visualstudio.microsoft.com/download/pr/4d555219-1f04-47c6-90e5-8b3ff8989b9c/0798763e6e4b98a62846116f997d046e/dotnet-runtime-2.1.5-linux-arm.tar.gz\",\r\n                        \"hash\": \"89a77a07065ea24e7198c77a233b9ce5c6cf51b1deb2ef55c88f0adbb2ecd9db1ba4e7d55eec2ef7139c47f91346fed360161a5bb6e3a7ccfc4559bcde286364\"\r\n                    },\r\n                    ...\r\n                ]\r\n            }\r\n            \"sdk\":  \r\n            {\r\n                \"version\":  \"2.1.403\",\r\n                \"version-display\":  \"2.1.403\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"csharp-language\":  \"7.3\",\r\n                \"fsharp-language\":  \"4.5\",\r\n                \"files\":  \r\n                [...]\r\n            }\r\n        }\r\n    ]\r\n}\r\n```","Url":"https://github.com/dotnet/announcements/issues/87","RelatedDescription":"Open issue \".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan\" (#87)"},{"Id":"366416503","IsPullRequest":false,"CreatedAt":"2018-10-03T16:11:18","Actor":"leecow","Number":"86","RawContent":null,"Title":".NET Core 2.0 has reached end of life","State":"open","Body":"[.NET Core 2.0 reached end of life](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) on October 1, 2018. This means [.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) is no longer supported and updates will no longer be provided. We recommend moving to [.NET Core 2.1](https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-net-core-2-1/), our long term support (LTS) release.\r\n\r\n- [Download .NET Core 2.1](https://www.microsoft.com/net/download/dotnet-core/2.1)\r\n- [.NET Core 2.1 LTS statement](https://blogs.msdn.microsoft.com/dotnet/2018/08/21/net-core-august-2018-update/)\r\n- [.NET Core 2.0 end-of-life statement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n\r\n## Discussion\r\n\r\nPlease share you thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/core#1983](https://github.com/dotnet/core/issues/1983)\r\n\r\n## Lifecycle Context\r\n\r\n.NET Core releases belong to one of two [support lifecycles](https://www.microsoft.com/net/platform/support-policy): long term support (LTS) and Current. LTS releases are stable release which receive critical updates and are supported for at least three years. Current releases can include new features that may undergo future change based on feedback. Current releases are supported for three months after the subsequent .NET Core major or minor release. Both LTS and Current releases receive critical fixes throughout their lifecycle, for security, reliability, or to add support for new operating system versions. You must stay up-to-date with the latest patches to qualify for support. \r\n\r\n## .NET Core 2.0 Lifecycle\r\n\r\n[.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) was released in August 2017 as a Current release. Per the lifecycle policy, Current releases reach end of life 3 months after a subsequent release (Current or LTS). .NET Core 2.1 released May 2018 and began the end of life countdown for .NET Core 2.0. The 3 month maintenance period for .NET Core 2.0 was scheduled to end August 2018 but was [extended to October](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) to allow time to address an issue some customers were experiencing while migrating to .NET Core 2.1.\r\n\r\n## .NET Core 2.0 Downloads\r\n\r\n.NET Core 2.0 installers, zips and tar.gzs will remain available, but unsupported. This includes existing releases available on Linux package feeds. Previous versions, including 2.0, will be accessible through the [Download Archives](https://www.microsoft.com/net/download/archives). \r\n\r\n## .NET Core 2.0 Docker Images\r\n\r\n.NET Core 2.0 will be removed from the .NET and ASP.NET Docker repo READMEs, however the existing images remain available in those repos.\r\n\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/)\r\n* [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/)\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)\r\n\r\n## Policy Information\r\n\r\nAdditional lifecycle and support details  and background can be seen in the following:\r\n\r\n* [.NET Core Support Lifecycle](https://www.microsoft.com/net/platform/support-policy)\r\n* [Support and Versioning](https://blogs.msdn.microsoft.com/dotnet/2016/07/26/net-support-and-versioning/)\r\n* [2.0 end of life early announcement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n","Url":"https://github.com/dotnet/announcements/issues/86","RelatedDescription":"Open issue \".NET Core 2.0 has reached end of life\" (#86)"},{"Id":"361098704","IsPullRequest":false,"CreatedAt":"2018-09-18T01:10:23","Actor":"spshant","Number":"85","RawContent":null,"Title":"NET Framework 4.8 Early Access build 3646 is available!","State":"open","Body":"Today, we are happy to share an Early Access build for the .NET Framework 4.8. This includes an updated .NET 4.8 runtime as well as the .NET 4.8 Developer Pack (a a single package that bundles the .NET Framework 4.8 runtime, the .NET 4.8 Targeting Pack, and the .NET Framework 4.8 SDK). \r\n\r\nPlease help us ensure this is a high quality and compatible release by trying out this build and exploring the new features. \r\n\r\n**Next steps:**\r\nTo explore the new features, download the [.NET 4.8 Developer Pack build 3646](https://go.microsoft.com/fwlink/?LinkId=2018486).  Instead, if you want to try just the .NET 4.8 runtime, you can download either of these:\r\n•\t[.NET 4.8 Web Installer](https://go.microsoft.com/fwlink/?LinkId=2018525) - requires an internet connection during installation \r\n•\t[.NET 4.8 Offline installer](https://go.microsoft.com/fwlink/?LinkId=2018531) - can be downloaded and installed later in a disconnected state\r\n\r\nPlease provide your feedback by [reporting an issue at the .NET Framework Early Access GitHub repository](https://github.com/Microsoft/dotnet-framework-early-access/issues/new).\r\n\r\n**Note**: this release is still under development, you can expect to see more features and fixes in future preview builds. Also, a reminder that this build is not supported for production use.\r\n\r\nThis preview build 3646 includes improvements/fixes in the following areas:\r\n•\t**[Runtime]** JIT and NGEN improvements\r\n•\t**[Windows Forms]** Accessibility enhancements\r\n•\t**[WPF]** SelectionTextBrush Property\r\n•\t**[BCL]** Updated ZLib\r\n\r\nYou can see the complete list of improvements in this build [here](https://github.com/Microsoft/dotnet-framework-early-access/blob/master/release-notes/NET48/build-3646/changes.md).\r\n\r\n.NET Framework build 3646 is also included in the next update for Windows 10. You can sign up for [Windows Insiders](https://insider.windows.com/en-us/) to validate that your applications work great on the latest .NET Framework included in the latest Windows 10 releases.\r\n","Url":"https://github.com/dotnet/announcements/issues/85","RelatedDescription":"Open issue \"NET Framework 4.8 Early Access build 3646 is available!\" (#85)"},{"Id":"359151445","IsPullRequest":false,"CreatedAt":"2018-09-11T17:44:50","Actor":"leecow","Number":"84","RawContent":null,"Title":"September 2018 .NET Updates","State":"open","Body":"# September 2018 .NET Updates\r\n\r\nThe following .NET updates were released in September 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework September 2018 Security and Quality Rollup - September 11, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/09/11/net-framework-september-2018-security-and-quality-rollup/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core September 2018 Update - September 11, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.4/2.1.4.md)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/84","RelatedDescription":"Open issue \"September 2018 .NET Updates\" (#84)"},{"Id":"359136325","IsPullRequest":false,"CreatedAt":"2018-09-11T17:00:55","Actor":"blowdart","Number":"83","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability in .NET Core when System.IO.Pipelines improperly handles requests. An attacker who successfully exploited this vulnerability could cause a denial of service against an application that is leveraging System.IO.Pipelines. The vulnerability can be exploited remotely, without authentication. A remote unauthenticated attacker could exploit this vulnerability by providing specially crafted requests to the application.\r\n\r\nThe update addresses the vulnerability by correcting how System.IO.Pipelines handles requests.\r\n\r\nIf you are using ASP.NET Core 2.1 you will also need to update your ASP.NET version this by following the instructions in the [ASP.NET Core bulletin](https://github.com/aspnet/Announcements/issues/316).\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/32228\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.IO.Pipelines package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.IO.Pipelines | 4.5.0 | 4.5.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications which use System.IO.Pipelines\r\n\r\nSystem.IO.Pipelines is distributed both in ASP.NET Core 2.1 and separately as a NuGet package. If you are not using Microsoft.AspNetCore.App or .All, you may still be affected if you are referencing the System.IO.Pipelines package.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.IO.Pipelines/4.5.0` is a reference to version 4.5.0 of `System.IO.Pipelines`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.IO.Pipelines` version 4.5.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8409](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8409)\r\n\r\n### Revisions\r\n\r\nV1.0 (September 11, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-09-11_\r\n","Url":"https://github.com/dotnet/announcements/issues/83","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability\" (#83)"},{"Id":"357399856","IsPullRequest":false,"CreatedAt":"2018-09-05T20:56:25","Actor":"richlander","Number":"82","RawContent":null,"Title":".NET Core Runtime ARM64 Status","State":"open","Body":"# .NET Core Runtime ARM64 Status\r\n\r\nThe .NET Core team is in the process of adding support for ARM64, as part of the .NET Core 3.0 project. This issue will be updated as ARM64 support progresses.\r\n\r\n[.NET Core 3.0 Preview 1](https://github.com/dotnet/core/issues/2099) includes support for Linux ARM64. Please try this build and provide support.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/coreclr #19843](https://github.com/dotnet/coreclr/issues/19843)\r\n\r\n## Current Status\r\n\r\nARM64 builds are functional, for console and ASP.NET Core apps.\r\n\r\n## Details\r\n\r\nInitial support for ARM64 was added in the .NET Core 2.1 release. The team is not maintaining .NET Core 2.x branches with respect to ARM64. All ARM64 improvements will be made in the .NET Core 3.0 branch (currently [master](https://github.com/dotnet/coreclr)).\r\n\r\nSee [Installing .NET Core 3.0 on Linux ARM64](https://gist.github.com/richlander/467813274cea8abc624553ee72b28213) to install .NET Core on your ARM64 machine. Builds are available from the [daily builds page](https://github.com/dotnet/core/blob/master/daily-builds.md).\r\n\r\n## Bug Queries\r\n\r\nthe following bugs queries are available for ARM64:\r\n\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues?q=is%3Aopen+is%3Aissue+label%3Aarch-arm64)\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues?q=is%3Aopen+is%3Aissue+label%3Aarch-arm64)\r\n\r\n## Operating Systems\r\n\r\n.NET Core 3.0 ARM64 builds are tested on the following operating systems:\r\n\r\n* Ubuntu 16.04 and 18.04\r\n* Debian 9\r\n\r\n## Test Hardware\r\n\r\n.NET Core 3.0 ARM64 builds have been tested on the following hardware:\r\n\r\n* [NVIDIA Jetson TX2 Module](https://developer.nvidia.com/embedded/buy/jetson-tx2)\r\n* [Pine A64](https://www.pine64.org/?page_id=46823)\r\n* [Qualcomm Centriq 2400](https://www.qualcomm.com/products/qualcomm-centriq-2400-processor)\r\n* [Qualcomm Snapdragon](https://www.qualcomm.com/snapdragon/always-connected-pc)\r\n* [Raspberry Pi3](https://www.raspberrypi.org/products/raspberry-pi-3-model-b-plus/)","Url":"https://github.com/dotnet/announcements/issues/82","RelatedDescription":"Open issue \".NET Core Runtime ARM64 Status\" (#82)"},{"Id":"349693735","IsPullRequest":false,"CreatedAt":"2018-08-22T18:23:01","Actor":"richlander","Number":"80","RawContent":null,"Title":"Improving Performance of ARM32 Docker Images with .NET Core Package Cache","State":"closed","Body":"# Improving Performance of ARM32 Docker Images with .NET Core Package Cache\r\n\r\n.NET Core SDK distributions include a compressed copy of NuGet packages for .NET Core, ASP.NET Core and EF Core. These packages are decompressed upon installation of the .NET Core SDK. The packages are not currently included in ARM32 distributions due to the time and space cost to decompress the packages. Instead, they will be added to [.NET Core ARM32 Docker images](https://hub.docker.com/r/microsoft/dotnet/), where these costs can be paid as part of image creation.\r\n\r\nThese NuGet packages include content for two purposes:\r\n\r\n- Reference assemblies for .NET Core, for code compilation.\r\n- Pre-compiled assemblies (compiled with [crossgen](https://github.com/dotnet/coreclr/blob/master/Documentation/building/crossgen.md)) for .NET Core, for use in self-contained applications.\r\n\r\nIn both cases, the presence of these packages avoid the need to access remote NuGet feeds for .NET Core assemblies as part of package restore.\r\n\r\nThis change only affects [.NET Core 2.1 SDK ARM32 Docker images](https://hub.docker.com/r/microsoft/dotnet/). This change will be made in August 2018.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #653](https://github.com/dotnet/dotnet-docker/issues/653)\r\n\r\n## .NET Core SDK NugetFallbackFolder\r\n\r\nThe .NET Core SDK includes a compressed copy of all NuGet package, in LZMA format. It exists at the following version-specific location:\r\n\r\n```\r\nroot@3778032bc43d:/# ls -l /usr/share/dotnet/sdk/2.1.302/*.lzma\r\n-rw-r--r-- 1 1004 sudo 35995936 Jul  2 22:51 /usr/share/dotnet/sdk/2.1.302/nuGetPackagesArchive.lzma\r\n```\r\n\r\nThis file is decompressed to the following location: `/usr/share/dotnet/sdk/NuGetFallbackFolder/`\r\n\r\nA package restore for a .NET Core assembly will restore the assembly from the NuGetFallbackFolder location and copy it to the user NuGet cache. At that point, regular NuGet behavior is used.\r\n\r\n## Impact of this change\r\n\r\nThere should be no functional difference in behavior after this change. .NET SDK commands should complete faster and require fewer package restore network requests.\r\n\r\nThe following examples demonstrates the benefit of this change. The improvement can be observed with package restore. Build times (assuming no restore) are not affected.\r\n\r\n### .NET Core 2.1 SDK image after this change\r\n\r\n> The change has already been made in the `microsoft/dotnet-nightly` repo, as you can see in the example below. In August, this same change will be made available in the `microsoft/dotnet` repo.\r\n\r\n```console\r\npi@raspberrypi:~ $ docker run -it --rm microsoft/dotnet-nightly:2.1-sdk\r\nroot@416731f24915:/# time dotnet new mvc -o mvcapp\r\nGetting ready...\r\nThe template \"ASP.NET Core Web App (Model-View-Controller)\" was created successfully.\r\nThis template contains technologies from parties other than Microsoft, see https://aka.ms/aspnetcore-template-3pn-210 for details.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on mvcapp/mvcapp.csproj...\r\n  Restoring packages for /mvcapp/mvcapp.csproj...\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.props.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.targets.\r\n  Restore completed in 6.68 sec for /mvcapp/mvcapp.csproj.\r\n\r\nRestore succeeded.\r\n\r\n\r\nreal    0m32.496s\r\nuser    0m35.820s\r\nsys     0m4.280s\r\nroot@416731f24915:/# cd mvcapp/\r\nroot@416731f24915:/mvcapp# time dotnet build\r\nMicrosoft (R) Build Engine version 15.8.138-preview+ge0cd4f1c1f for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 524.78 ms for /mvcapp/mvcapp.csproj.\r\n/usr/share/dotnet/sdk/2.1.401-preview-009081/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.RuntimeIdentifierInference.targets(143,5): message NETSDK1057: You are working with a preview version of the .NET Core SDK. You can define the SDK version via a global.json file in the current project. More at https://go.microsoft.com/fwlink/?linkid=869452 [/mvcapp/mvcapp.csproj]\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.dll\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.Views.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:02:09.15\r\n\r\nreal    2m13.377s\r\nuser    1m25.260s\r\nsys     0m9.420s\r\nroot@416731f24915:/mvcapp#\r\n```\r\n\r\n### .NET Core 2.1 SDK image before this change\r\n\r\n```console\r\npi@raspberrypi:~ $ docker run -it --rm microsoft/dotnet:2.1-sdk\r\nroot@9d1d5e45df6a:/# time dotnet new mvc -o mvcapp\r\nGetting ready...\r\nThe template \"ASP.NET Core Web App (Model-View-Controller)\" was created successfully.\r\nThis template contains technologies from parties other than Microsoft, see https://aka.ms/aspnetcore-template-3pn-210 for details.\r\n\r\nProcessing post-creation actions...\r\nRunning 'dotnet restore' on mvcapp/mvcapp.csproj...\r\n  Restoring packages for /mvcapp/mvcapp.csproj...\r\n  Installing System.Xml.XmlSerializer 4.3.0.\r\n  Installing System.Threading.Tasks.Extensions 4.0.0.\r\n  Installing System.Globalization.Extensions 4.0.1.\r\n  Installing runtime.native.System.Security.Cryptography 4.0.0.\r\n  Installing System.Security.Cryptography.OpenSsl 4.0.0.\r\n  Installing System.Security.Cryptography.Cng 4.2.0.\r\n  Installing System.Security.Cryptography.Csp 4.0.0.\r\n  Installing runtime.native.System.Net.Http 4.0.1.\r\n  Installing runtime.native.System 4.0.0.\r\n  Installing runtime.native.System.IO.Compression 4.1.0.\r\n  Installing System.Buffers 4.0.0.\r\n  Installing System.Private.DataContractSerialization 4.3.0.\r\n  Installing System.Security.Principal 4.3.0.\r\n  Installing runtime.osx.10.10-x64.runtime.native.System.Security.Cryptography.Apple 4.3.0.\r\n  Installing runtime.rhel.7-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.ubuntu.14.04-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.opensuse.42.1-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.NETCore.App 2.1.0.\r\n  Installing runtime.ubuntu.16.10-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.App 2.1.1.\r\n  Installing runtime.ubuntu.16.04-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.NETCore.Platforms 2.1.0.\r\n  Installing Microsoft.NETCore.Targets 2.1.0.\r\n  Installing NETStandard.Library 2.0.3.\r\n  Installing Microsoft.NETCore.DotNetHostPolicy 2.1.0.\r\n  Installing Microsoft.AspNetCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Antiforgery 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Session 2.1.1.\r\n  Installing Microsoft.AspNetCore.SpaServices 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.KeyPerFile 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Hosting 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Embedded 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Physical 2.1.1.\r\n  Installing Microsoft.Extensions.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Cookies 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Core 2.1.1.\r\n  Installing runtime.osx.10.10-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.Authentication.Google 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Facebook 2.1.1.\r\n  Installing Microsoft.Extensions.Hosting.Abstractions 2.1.1.\r\n  Installing runtime.opensuse.13.2-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.AspNetCore.HttpsPolicy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.MicrosoftAccount 2.1.1.\r\n  Installing Microsoft.Extensions.Http 2.1.1.\r\n  Installing Microsoft.AspNetCore.MiddlewareAnalysis 2.1.1.\r\n  Installing Microsoft.Extensions.FileSystemGlobbing 2.1.1.\r\n  Installing Microsoft.Extensions.DiagnosticAdapter 2.1.0.\r\n  Installing Microsoft.Extensions.Identity.Core 2.1.1.\r\n  Installing Microsoft.Extensions.Identity.Stores 2.1.1.\r\n  Installing Microsoft.Extensions.Options.ConfigurationExtensions 2.1.1.\r\n  Installing Microsoft.Extensions.Localization.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Abstractions 2.1.1.\r\n  Installing runtime.fedora.24-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.Options 2.1.1.\r\n  Installing Microsoft.Extensions.FileProviders.Composite 2.1.1.\r\n  Installing Microsoft.Extensions.Logging 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Configuration 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.TraceSource 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.UserSecrets 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Debug 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.Console 2.1.1.\r\n  Installing Microsoft.Extensions.DependencyInjection 2.1.1.\r\n  Installing Microsoft.Extensions.ObjectPool 2.1.1.\r\n  Installing runtime.debian.8-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.DependencyInjection.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Binder 2.1.1.\r\n  Installing runtime.fedora.23-x64.runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing Microsoft.Extensions.Configuration.EnvironmentVariables 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.FileExtensions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.Memory 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.CommandLine 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.Abstractions 2.1.1.\r\n  Installing Microsoft.Net.Http.Headers 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.InMemory 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Abstractions 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Ini 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Analyzers 2.1.1.\r\n  Installing Microsoft.AspNetCore.StaticFiles 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Relational 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Https 2.1.1.\r\n  Installing Microsoft.Extensions.Primitives 2.1.1.\r\n  Installing Microsoft.AspNetCore.SpaServices.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel 2.1.1.\r\n  Installing Microsoft.Extensions.WebEncoders 2.1.1.\r\n  Installing Microsoft.AspNetCore.WebUtilities 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR 1.0.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Transport.Sockets 2.1.1.\r\n  Installing Microsoft.AspNetCore.Routing 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Tools 2.1.1.\r\n  Installing Microsoft.AspNetCore.Routing.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Rewrite 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCaching.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Transport.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCaching 2.1.1.\r\n  Installing Microsoft.AspNetCore.ResponseCompression 2.1.1.\r\n  Installing System.Globalization.Extensions 4.3.0.\r\n  Installing Microsoft.AspNetCore.Razor.Language 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.TagHelpers 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor.Runtime 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.RazorPages 2.1.1.\r\n  Installing Microsoft.AspNetCore.Owin 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor.ViewCompilation 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Analyzers 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Localization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Formatters.Json 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.Design 2.1.1.\r\n  Installing Microsoft.AspNetCore.WebSockets 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Cors 2.1.1.\r\n  Installing System.Diagnostics.DiagnosticSource 4.3.0.\r\n  Installing Microsoft.AspNetCore.Mvc.DataAnnotations 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.ApiExplorer 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Formatters.Xml 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc 2.1.1.\r\n  Installing Microsoft.Extensions.Logging.EventSource 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.OAuth 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Json 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR.Protocols.Json 1.0.1.\r\n  Installing Microsoft.AspNetCore.NodeServices 2.1.1.\r\n  Installing Microsoft.AspNetCore.SignalR.Common 1.0.1.\r\n  Installing Microsoft.AspNetCore.JsonPatch 2.1.1.\r\n  Installing Microsoft.AspNetCore.Localization.Routing 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.IISIntegration 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity.UI 2.1.1.\r\n  Installing Microsoft.AspNetCore.Razor.Design 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity.EntityFrameworkCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.HttpOverrides 2.1.1.\r\n  Installing Microsoft.AspNetCore.Identity 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Features 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Connections 1.0.1.\r\n  Installing Microsoft.AspNetCore.Http.Connections.Common 1.0.1.\r\n  Installing Microsoft.AspNetCore.Http 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cors 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting.Server.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Http.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics.EntityFrameworkCore 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cryptography.Internal 2.1.1.\r\n  Installing Microsoft.AspNetCore.Cryptography.KeyDerivation 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection.Extensions 2.1.1.\r\n  Installing Microsoft.AspNetCore.HostFiltering 2.1.1.\r\n  Installing Microsoft.CSharp 4.0.1.\r\n  Installing Microsoft.AspNetCore.CookiePolicy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.Kestrel.Core 2.1.1.\r\n  Installing Microsoft.AspNetCore.Html.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.Twitter 2.1.1.\r\n  Installing Microsoft.AspNetCore.Connections.Abstractions 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authorization.Policy 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authorization 2.1.1.\r\n  Installing Microsoft.AspNetCore.Diagnostics 2.1.1.\r\n  Installing Microsoft.AspNetCore.Server.HttpSys 2.1.1.\r\n  Installing Microsoft.Extensions.Configuration.Xml 2.1.1.\r\n  Installing Microsoft.AspNetCore.Hosting 2.1.1.\r\n  Installing Microsoft.AspNetCore.DataProtection 2.1.1.\r\n  Installing Microsoft.Extensions.Caching.SqlServer 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore.SqlServer 2.1.1.\r\n  Installing Microsoft.AspNet.WebApi.Client 5.2.6.\r\n  Installing Microsoft.AspNetCore.SignalR.Core 1.0.1.\r\n  Installing Microsoft.AspNetCore.Mvc.ViewFeatures 2.1.1.\r\n  Installing Microsoft.CodeAnalysis.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.JwtBearer 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.OpenIdConnect 2.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Razor 2.1.1.\r\n  Installing Microsoft.AspNetCore.Authentication.WsFederation 2.1.1.\r\n  Installing Microsoft.EntityFrameworkCore 2.1.1.\r\n  Installing System.Runtime.Serialization.Primitives 4.1.1.\r\n  Installing Microsoft.AspNetCore.Mvc.Core 2.1.1.\r\n  Installing System.Xml.ReaderWriter 4.0.11.\r\n  Installing Microsoft.NETCore.DotNetHostResolver 2.1.0.\r\n  Installing System.Diagnostics.DiagnosticSource 4.5.0.\r\n  Installing System.ComponentModel.Annotations 4.5.0.\r\n  Installing System.Buffers 4.5.0.\r\n  Installing System.Memory 4.5.1.\r\n  Installing System.Runtime.CompilerServices.Unsafe 4.5.1.\r\n  Installing System.Text.Encodings.Web 4.5.0.\r\n  Installing Microsoft.CSharp 4.5.0.\r\n  Installing System.Net.WebSockets.WebSocketProtocol 4.5.1.\r\n  Installing Newtonsoft.Json 11.0.2.\r\n  Installing System.IO.Pipelines 4.5.0.\r\n  Installing System.Numerics.Vectors 4.5.0.\r\n  Installing System.Security.Principal.Windows 4.5.0.\r\n  Installing System.Threading.Tasks.Extensions 4.5.1.\r\n  Installing System.Security.Cryptography.Cng 4.5.0.\r\n  Installing System.Net.Http 4.1.0.\r\n  Installing System.Security.Cryptography.Xml 4.5.0.\r\n  Installing Microsoft.Win32.Registry 4.5.0.\r\n  Installing System.Reflection.Metadata 1.6.0.\r\n  Installing System.Data.SqlClient 4.5.1.\r\n  Installing Newtonsoft.Json.Bson 1.0.1.\r\n  Installing Newtonsoft.Json 10.0.1.\r\n  Installing System.Threading.Channels 4.5.0.\r\n  Installing System.Reflection.Emit 4.3.0.\r\n  Installing Microsoft.CodeAnalysis.CSharp 2.8.0.\r\n  Installing Microsoft.CodeAnalysis.Common 2.8.0.\r\n  Installing System.Security.Cryptography.Algorithms 4.2.0.\r\n  Installing Microsoft.IdentityModel.Protocols.OpenIdConnect 5.2.0.\r\n  Installing System.IdentityModel.Tokens.Jwt 5.2.0.\r\n  Installing Microsoft.IdentityModel.Protocols.WsFederation 5.2.0.\r\n  Installing System.Collections.Immutable 1.5.0.\r\n  Installing Remotion.Linq 2.2.0.\r\n  Installing System.Interactive.Async 3.1.1.\r\n  Installing Microsoft.Extensions.DependencyModel 2.1.0.\r\n  Installing Microsoft.NETCore.DotNetAppHost 2.1.0.\r\n  Installing Microsoft.NETCore.Platforms 2.0.0.\r\n  Installing System.Security.Cryptography.Pkcs 4.5.0.\r\n  Installing System.Security.Permissions 4.5.0.\r\n  Installing System.Security.AccessControl 4.5.0.\r\n  Installing NETStandard.Library 1.6.1.\r\n  Installing System.Text.Encoding.CodePages 4.5.0.\r\n  Installing System.Linq 4.3.0.\r\n  Installing runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing System.Diagnostics.Debug 4.3.0.\r\n  Installing System.Globalization 4.3.0.\r\n  Installing System.IO 4.3.0.\r\n  Installing System.Collections 4.3.0.\r\n  Installing System.Runtime.Serialization.Primitives 4.3.0.\r\n  Installing System.Runtime.Serialization.Formatters 4.3.0.\r\n  Installing System.Xml.XmlDocument 4.3.0.\r\n  Installing System.Threading 4.3.0.\r\n  Installing System.Resources.ResourceManager 4.3.0.\r\n  Installing System.Text.Encoding.Extensions 4.3.0.\r\n  Installing System.Xml.XDocument 4.3.0.\r\n  Installing System.Threading.Tasks 4.3.0.\r\n  Installing System.Linq.Expressions 4.3.0.\r\n  Installing System.Runtime.Numerics 4.3.0.\r\n  Installing System.Text.Encoding 4.3.0.\r\n  Installing System.Reflection.Extensions 4.3.0.\r\n  Installing System.Text.RegularExpressions 4.3.0.\r\n  Installing System.Runtime.Extensions 4.3.0.\r\n  Installing System.Reflection 4.3.0.\r\n  Installing System.ObjectModel 4.3.0.\r\n  Installing System.Dynamic.Runtime 4.3.0.\r\n  Installing System.Xml.ReaderWriter 4.3.0.\r\n  Installing Microsoft.CSharp 4.3.0.\r\n  Installing System.ComponentModel.TypeConverter 4.3.0.\r\n  Installing System.Runtime 4.3.0.\r\n  Installing System.Reflection.Emit.ILGeneration 4.3.0.\r\n  Installing System.Reflection.Primitives 4.3.0.\r\n  Installing System.AppContext 4.3.0.\r\n  Installing System.Console 4.3.0.\r\n  Installing System.Collections.Concurrent 4.3.0.\r\n  Installing System.Diagnostics.Tools 4.3.0.\r\n  Installing System.Security.Cryptography.Encoding 4.0.0.\r\n  Installing System.IO.Compression 4.3.0.\r\n  Installing System.IO.FileSystem 4.3.0.\r\n  Installing System.IO.FileSystem.Primitives 4.3.0.\r\n  Installing System.Security.Cryptography.Encoding 4.3.0.\r\n  Installing System.Collections.Immutable 1.3.1.\r\n  Installing System.Runtime.InteropServices 4.3.0.\r\n  Installing System.Security.Cryptography.X509Certificates 4.1.0.\r\n  Installing System.Diagnostics.StackTrace 4.3.0.\r\n  Installing System.Reflection.Metadata 1.4.2.\r\n  Installing System.Threading.Thread 4.3.0.\r\n  Installing Microsoft.CodeAnalysis.Analyzers 1.1.0.\r\n  Installing System.Security.Cryptography.X509Certificates 4.3.0.\r\n  Installing System.ValueTuple 4.3.0.\r\n  Installing System.Diagnostics.FileVersionInfo 4.3.0.\r\n  Installing System.Threading.Tasks.Parallel 4.3.0.\r\n  Installing System.Security.Cryptography.Algorithms 4.3.0.\r\n  Installing System.Xml.XPath.XDocument 4.3.0.\r\n  Installing System.Text.Encoding.CodePages 4.3.0.\r\n  Installing System.Runtime.InteropServices 4.1.0.\r\n  Installing Microsoft.IdentityModel.Protocols 5.2.0.\r\n  Installing Microsoft.IdentityModel.Tokens 5.2.0.\r\n  Installing Microsoft.IdentityModel.Xml 5.2.0.\r\n  Installing System.Diagnostics.Debug 4.0.11.\r\n  Installing System.Reflection.Extensions 4.0.1.\r\n  Installing Microsoft.IdentityModel.Tokens.Saml 5.2.0.\r\n  Installing System.Runtime.Extensions 4.1.0.\r\n  Installing System.Threading 4.0.11.\r\n  Installing System.Collections 4.0.11.\r\n  Installing System.Reflection 4.1.0.\r\n  Installing System.ObjectModel 4.0.12.\r\n  Installing System.Linq 4.1.0.\r\n  Installing System.Linq.Queryable 4.0.1.\r\n  Installing System.Linq.Expressions 4.1.0.\r\n  Installing System.Runtime 4.1.0.\r\n  Installing NETStandard.Library 1.6.0.\r\n  Installing System.Dynamic.Runtime 4.0.11.\r\n  Installing Newtonsoft.Json 9.0.1.\r\n  Installing Microsoft.DotNet.PlatformAbstractions 2.1.0.\r\n  Installing System.Runtime.CompilerServices.Unsafe 4.5.0.\r\n  Installing runtime.win-x64.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing runtime.win-x86.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing runtime.win-arm64.runtime.native.System.Data.SqlClient.sni 4.4.0.\r\n  Installing Microsoft.NETCore.Platforms 1.1.0.\r\n  Installing Microsoft.Win32.Primitives 4.3.0.\r\n  Installing System.Net.Sockets 4.3.0.\r\n  Installing System.Diagnostics.Tracing 4.3.0.\r\n  Installing System.IO.Compression.ZipFile 4.3.0.\r\n  Installing System.Globalization.Calendars 4.3.0.\r\n  Installing System.Threading.Timer 4.3.0.\r\n  Installing System.Security.Cryptography.Primitives 4.3.0.\r\n  Installing System.Runtime.InteropServices.RuntimeInformation 4.0.0.\r\n  Installing System.Runtime.Handles 4.3.0.\r\n  Installing System.Runtime.InteropServices.RuntimeInformation 4.3.0.\r\n  Installing System.Net.Http 4.3.0.\r\n  Installing Microsoft.NETCore.Targets 1.1.0.\r\n  Installing System.Net.Primitives 4.3.0.\r\n  Installing System.Reflection.Emit.Lightweight 4.3.0.\r\n  Installing System.Reflection.TypeExtensions 4.3.0.\r\n  Installing System.Threading.Tasks.Extensions 4.3.0.\r\n  Installing System.ComponentModel 4.3.0.\r\n  Installing System.ComponentModel.Primitives 4.3.0.\r\n  Installing System.Collections.NonGeneric 4.3.0.\r\n  Installing System.Collections.Specialized 4.3.0.\r\n  Installing runtime.native.System 4.3.0.\r\n  Installing runtime.native.System.IO.Compression 4.3.0.\r\n  Installing System.Buffers 4.3.0.\r\n  Installing runtime.native.System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing runtime.native.System.Net.Http 4.3.0.\r\n  Installing System.Security.Cryptography.OpenSsl 4.3.0.\r\n  Installing System.Security.Cryptography.Cng 4.3.0.\r\n  Installing System.Security.Cryptography.Csp 4.3.0.\r\n  Installing runtime.native.System.Security.Cryptography.Apple 4.3.0.\r\n  Installing System.Xml.XPath 4.3.0.\r\n  Installing Microsoft.IdentityModel.Logging 5.2.0.\r\n  Installing System.Diagnostics.Contracts 4.3.0.\r\n  Installing System.Runtime.Serialization.Xml 4.3.0.\r\n  Installing Microsoft.NETCore.Platforms 1.0.1.\r\n  Installing Microsoft.NETCore.Targets 1.0.1.\r\n  Installing System.Security.Claims 4.3.0.\r\n  Installing System.Reflection.Primitives 4.0.1.\r\n  Installing System.IO 4.1.0.\r\n  Installing System.Globalization 4.0.11.\r\n  Installing System.Threading.Tasks 4.0.11.\r\n  Installing System.Resources.ResourceManager 4.0.1.\r\n  Installing System.Reflection.Emit 4.0.1.\r\n  Installing System.Reflection.TypeExtensions 4.1.0.\r\n  Installing System.Reflection.Emit.ILGeneration 4.0.1.\r\n  Installing System.Reflection.Emit.Lightweight 4.0.1.\r\n  Installing System.AppContext 4.1.0.\r\n  Installing System.Collections.Concurrent 4.0.12.\r\n  Installing System.IO.FileSystem.Primitives 4.0.1.\r\n  Installing System.Runtime.Numerics 4.0.1.\r\n  Installing System.Security.Cryptography.Primitives 4.0.0.\r\n  Installing System.Xml.XDocument 4.0.11.\r\n  Installing System.Text.RegularExpressions 4.1.0.\r\n  Installing Microsoft.Win32.Primitives 4.0.1.\r\n  Installing System.Console 4.0.0.\r\n  Installing System.Diagnostics.Tools 4.0.1.\r\n  Installing System.Diagnostics.Tracing 4.1.0.\r\n  Installing System.Globalization.Calendars 4.0.1.\r\n  Installing System.IO.FileSystem 4.0.1.\r\n  Installing System.Net.Sockets 4.1.0.\r\n  Installing System.Text.Encoding 4.0.11.\r\n  Installing System.Threading.Timer 4.0.1.\r\n  Installing System.Net.Primitives 4.0.11.\r\n  Installing System.Runtime.Handles 4.0.1.\r\n  Installing System.Text.Encoding.Extensions 4.0.11.\r\n  Installing System.IO.Compression.ZipFile 4.0.1.\r\n  Installing System.IO.Compression 4.1.0.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.props.\r\n  Generating MSBuild file /mvcapp/obj/mvcapp.csproj.nuget.g.targets.\r\n  Restore completed in 44.04 sec for /mvcapp/mvcapp.csproj.\r\n\r\nRestore succeeded.\r\n\r\n\r\nreal    1m8.386s\r\nuser    1m8.010s\r\nsys     0m18.190s\r\nroot@9d1d5e45df6a:/# cd mvcapp/\r\nroot@9d1d5e45df6a:/mvcapp# time dotnet build\r\nMicrosoft (R) Build Engine version 15.7.179.6572 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 557.76 ms for /mvcapp/mvcapp.csproj.\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.dll\r\n  mvcapp -> /mvcapp/bin/Debug/netcoreapp2.1/mvcapp.Views.dll\r\n\r\nBuild succeeded.\r\n    0 Warning(s)\r\n    0 Error(s)\r\n\r\nTime Elapsed 00:02:07.34\r\n\r\nreal    2m11.716s\r\nuser    1m22.990s\r\nsys     0m8.880s\r\nroot@9d1d5e45df6a:/mvcapp#\r\n```\r\n","Url":"https://github.com/dotnet/announcements/issues/80","RelatedDescription":"Closed issue \"Improving Performance of ARM32 Docker Images with .NET Core Package Cache\" (#80)"},{"Id":"350233220","IsPullRequest":false,"CreatedAt":"2018-08-13T23:50:57","Actor":"richlander","Number":"81","RawContent":null,"Title":"Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+","State":"open","Body":"# Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+\r\n\r\nAn [issue with serializing/deserializing a CultureAwareComparer](https://github.com/Microsoft/dotnet/blob/master/releases/net471/KnownIssues/521954%20-%20BCL%20CultureAwareComparer%20with%20ignore%20casing%20on%20serialized%20on%20previous%20versions%20of%20.NET%20do%20not%20correctly%20deserialize%20on%20.NET%204.7.1.md) was discovered with [.NET Framework 4.7.1](https://blogs.msdn.microsoft.com/dotnet/2017/10/17/announcing-the-net-framework-4-7-1/). This issue was resolved earlier this year, with the [May 2018 Preview of Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/15/net-framework-may-2018-preview-of-quality-rollup/). We recently learned that some applications, including Johnson Controls’ C-CURE 9000 Software, were negatively impacted by this change as this update requires all client and server workstations to be updated simultaneously with the appropriate Microsoft updates. The changes made to .NET Framework 4.7.1 were also integrated into .NET Framework 4.6 and later servicing releases. As a result, this advisory applies to .NET Framework 4.6 and later versions.\r\n\r\nThis advisory is provided so that developers can correctly diagnose this issue and be aware of our guidance. We will continue to update this issue as we have new information to share.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [microsoft/dotnet #832](https://github.com/Microsoft/dotnet/issues/832)\r\n\r\n## Guidance\r\n\r\nThis guidance only applies to customers that have experienced this issue.\r\n\r\nWe have released [an update for .NET Framework 4.6](https://blogs.msdn.microsoft.com/dotnet/2018/08/30/net-framework-august-2018-preview-of-quality-rollup/) and later that resolves the issue. **You must deploy the .NET Framework update for this issue to all .NET Framework 4.6+ machines that communicate via serialized objects**. After doing that, cross-machine serialization will work as expected. \r\n \r\nPlease consult your software vendor to understand if this impacts the software you are using.\r\n\r\n## Technical Context\r\n\r\nIn the [May 2018 Preview of Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/15/net-framework-may-2018-preview-of-quality-rollup/), we made a change to the internal type CultureAwareComparer to implement ISerializable. We made the change in order to address [issue with serializing/deserializing a CultureAwareComparer](https://github.com/Microsoft/dotnet/blob/master/releases/net471/KnownIssues/521954%20-%20BCL%20CultureAwareComparer%20with%20ignore%20casing%20on%20serialized%20on%20previous%20versions%20of%20.NET%20do%20not%20correctly%20deserialize%20on%20.NET%204.7.1.md).\r\n\r\nThe issue reported was that a type that contains an instance of CultureAwareComparer was not able to correctly serialize and deserialize across different versions of the .NET Framework. There are a few types in .NET Framework that do this, the most commonly impacted one being the Dictionary<TKey, TValue> type.\r\n \r\nThe change to implement the ISerializable interface had unintended side effects when exchanging this type across different machines. We have had a small number of reports from customers who have been affected.\r\n\r\nA common, but not unique way, of exchanging objects across machines is to use WCF in conjunction with a serializer. One of the common serializers being DataContractSerializer. The side-effect of the change prevented data serialized on systems where the type implements ISerializable to correctly deserialize of systems where the type does NOT implement ISerializable. The same is true of the opposite case, that systems where the type does not implement ISerializable will not correctly deserialize data from systems where the type does implement ISerializable.\r\n\r\nWe have an updated fix that we intend to release within the next month that will remove the implementation of the ISerializable interface on the type and use a different internal mechanism for ensuring the cross-version serialization continues to work as expected. This change addresses the break experienced with WCF.\r\n\r\nThe upcoming fix will remove the implementation of the ISerializable interface on the type and use a different mechanism for ensuring the cross-version serialization of that type continues to work. This change addresses the break experienced with WCF.\r\n\r\n## Symptoms\r\n\r\nAn application that is affected by this issue will most likely crash when trying to deserialize an object. It may print or log an error message similar to the following one:\r\n\r\n```\r\nThe formatter threw an exception while trying to deserialize the message: \r\nThere was an error while trying to deserialize parameter . The InnerException message was ''EndElement' 'Comparer' from namespace '' is not expected. Expecting element '_compareInfo'.'.  Please see InnerException for more details.\r\n```\r\n","Url":"https://github.com/dotnet/announcements/issues/81","RelatedDescription":"Open issue \"Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+\" (#81)"},{"Id":"348162872","IsPullRequest":false,"CreatedAt":"2018-08-07T04:26:40","Actor":"richlander","Number":"79","RawContent":null,"Title":"August 2018 .NET Updates","State":"open","Body":"# August 2018 .NET Updates\r\n\r\nThe following .NET updates were released in August 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework \r\n\r\n* [August 2018 .NET Framework Security and Quality Rollup - August 14, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/08/14/august-2018-security-and-quality-rollup/)\r\n* [Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+](https://github.com/dotnet/announcements/issues/81)\r\n* [Advisory on July 2018 .NET Framework Updates](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/)\r\n* [August 2018 Preview of Quality Rollup - August 30, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/08/30/net-framework-august-2018-preview-of-quality-rollup/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core August 2018 Update - August 21, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.3/2.1.3.md)\r\n* [.NET Core 2.1.400 SDK Update - August 14, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.400-SDK/2.1.400-sdk.md)\r\n\r\n## End of Support for Operating System Versions\r\n\r\n.NET Core does not support systems that are out of support. The following operating systems are now out of support. To stay supported, move to a [later version of the given operating system](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md).\r\n\r\n* [Debian 8 -- Jessie](https://lists.debian.org/debian-security-announce/2018/msg00132.html)\r\n* [Ubuntu 17.10 -- Artful Aardvark](https://lists.ubuntu.com/archives/ubuntu-announce/2018-July/000232.html)\r\n\r\nSee [Debian Jessie End of Life -- Impact on .NET Core Docker Images](https://github.com/dotnet/announcements/issues/78)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/79","RelatedDescription":"Open issue \"August 2018 .NET Updates\" (#79)"},{"Id":"348161534","IsPullRequest":false,"CreatedAt":"2018-08-07T04:18:01","Actor":"richlander","Number":"78","RawContent":null,"Title":"Debian Jessie End of Life -- Impact on .NET Core Docker Images","State":"open","Body":"# Debian Jessie End of Life -- Impact on .NET Core Docker Images\r\n\r\nDebian Jessie (AKA Debian 8) is now [out of support](https://lists.debian.org/debian-security-announce/2018/msg00132.html). Debian Jessie is no longer a supported operating system for .NET Core. Docker users need to switch to Debian Stretch-based (AKA Debian 9) images to stay in support.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker #647](https://github.com/dotnet/dotnet-docker/issues/647)\r\n\r\n## Context\r\n\r\nJessie-based images are currently provided for .NET Core 1.0, 1.1 and 2.0. .NET Core 1.0 and 1.1 expose multi-arch tags, such as `1.0-runtime` and `1.1-sdk`, that support Debian Jessie. When pulled for a Linux Docker daemon (on Linux or Windows), these tags pull Jessie-based images. .NET Core 2.0 supports Jessie, but it is not the default. .NET Core 2.0 multi-arch tags, such as `2.0-runtime` and `2.0-sdk`, pull Debian Stretch-based images, when pulled for a Linux Docker daemon. We made a conscious decision with .NET Core 2.0 to move off of Jessie as the default to avoid this problem, based the Jessie 2018 EOL date. .NET Core 2.1 does not support Jessie, only Stretch.\r\n\r\nWe recently posted about our policy for underlying operating system dependencies with Docker:\r\n\r\n> For each major and minor .NET version, we may take a new major operating system version dependency. As I mentioned earlier, we adopted Debian 9 as the base image for .NET Core 2.0. We stayed with Debian 9 for .NET Core 2.1, since Debian 10 (AKA “Buster”) has not been released. Debian 9 will remain the default base image for .NET Core 2.1 for the life of .NET Core 2.1. **Once we adopt an underlying operating system major version, we will not change it for the life of that given .NET release.**\r\n\r\nSource: https://blogs.msdn.microsoft.com/dotnet/2018/06/18/staying-up-to-date-with-net-container-images/\r\n\r\n## Plan\r\n\r\nWe will continue to re-build .NET Core 1.0 and 1.1 multi-arch tags on top of Jessie for the remaining [supported lifetime of .NET Core 1.0 and 1.1](https://github.com/dotnet/core/blob/master/microsoft-support.md). We will also provide a Stretch-based image for .NET Core 1.1. This tag will look like the following: `1.1-runtime-stretch` or `1.1.9-sdk-stretch`. This is same format that Jessie has used.\r\n\r\nWe will produce Jessie-based images for NET Core 2.0 until October 2018, which is when [.NET Core 2.0 support ends](https://github.com/dotnet/core/blob/master/microsoft-support.md). .NET Core 2.0 multi-arch tags support Debian Stretch, not Jessie, as described above.\r\n\r\nIn summary, .NET Core is no longer supported on Debian Jessie, with Docker or otherwise. We will produce Docker images for Jessie until .NET Core 1.0, 1.1 and 2.0 support ends, respectively, to avoid breaking applications. This aligns with the policy defined above, per [Staying up-to-date with .NET Container Images](https://blogs.msdn.microsoft.com/dotnet/2018/06/18/staying-up-to-date-with-net-container-images/).\r\n\r\n## Affected Repos\r\n\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/)\r\n* [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/)\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)","Url":"https://github.com/dotnet/announcements/issues/78","RelatedDescription":"Open issue \"Debian Jessie End of Life -- Impact on .NET Core Docker Images\" (#78)"},{"Id":"345028102","IsPullRequest":false,"CreatedAt":"2018-07-26T22:31:32","Actor":"leecow","Number":"77","RawContent":null,"Title":"https://dot.net now using TLS 1.2-only","State":"open","Body":"Earlier today, https://dot.net switched to using TLS 1.2-only. Most Windows Powershell instances default to TLS 1.1 and will thus fail with `wget : The underlying connection was closed: An unexpected error occurred on a send. trying to run the previous command.`\r\n\r\nAn example of a PowerShell script fix can be seen in https://github.com/dotnet/docs/pull/6689","Url":"https://github.com/dotnet/announcements/issues/77","RelatedDescription":"Open issue \"https://dot.net now using TLS 1.2-only\" (#77)"},{"Id":"343360319","IsPullRequest":false,"CreatedAt":"2018-07-21T22:29:05","Actor":"richlander","Number":"76","RawContent":null,"Title":"July 2018 .NET Updates","State":"open","Body":"# July 2018 .NET Updates\r\n\r\nThe following .NET updates were released in June 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework \r\n\r\n* [.NET Framework 4.7.2 is available on Windows Update, WSUS and MU Catalog](https://blogs.msdn.microsoft.com/dotnet/2018/07/10/net-framework-4-7-2-is-available-on-windows-update-wsus-and-mu-catalog/)\r\n* [Announcing .NET Framework 4.8 Early Access build 3632](https://blogs.msdn.microsoft.com/dotnet/2018/07/18/announcing-net-framework-4-8-early-access-build-3632/)\r\n* [Advisory on July 2018 .NET Framework Updates](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/)\r\n* [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/10/net-core-july-2018-update/)\r\n\r\n## .NET Core Support Policies\r\n\r\n* [Microsoft Support for .NET Core](https://github.com/dotnet/core/blob/master/microsoft-support.md)\r\n* [.NET Core Supported OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)\r\n* [April 2018](https://github.com/dotnet/announcements/issues/64)\r\n","Url":"https://github.com/dotnet/announcements/issues/76","RelatedDescription":"Open issue \"July 2018 .NET Updates\" (#76)"},{"Id":"343360017","IsPullRequest":false,"CreatedAt":"2018-07-21T22:22:25","Actor":"richlander","Number":"75","RawContent":null,"Title":"June 2018 .NET Updates","State":"open","Body":"# June 2018 .NET Updates\r\n\r\nThe following .NET updates were released in June 2018.\r\n\r\n## .NET Framework \r\n\r\n* [.NET Framework June 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/06/13/net-framework-june-2018-security-and-quality-rollup/)\r\n* [Announcing .NET Framework 4.8 Early Access build 3621!](https://blogs.msdn.microsoft.com/dotnet/2018/06/06/announcing-net-framework-4-8-early-access-build-3621/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core 2.1 June Update](https://blogs.msdn.microsoft.com/dotnet/2018/06/22/net-core-2-1-june-update/)\r\n* [.NET Core 2.0 will reach End of Life on October 1, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n* [.NET Core 1.0 and 1.1 EOL Dates Documented](https://github.com/dotnet/core/blob/master/microsoft-support.md)\r\n\r\n## Previous Updates\r\n\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)\r\n* [April 2018](https://github.com/dotnet/announcements/issues/64)\r\n* [February 2018](https://github.com/dotnet/announcements/issues/59)","Url":"https://github.com/dotnet/announcements/issues/75","RelatedDescription":"Open issue \"June 2018 .NET Updates\" (#75)"},{"Id":"343283437","IsPullRequest":false,"CreatedAt":"2018-07-21T00:56:48","Actor":"richlander","Number":"74","RawContent":null,"Title":"Advisory on July 2018 .NET Framework Updates","State":"open","Body":"# Advisory on July 2018 .NET Framework Updates\r\n\r\nUpdated: 08/14/2018\r\n\r\n> A new [.NET Framework August 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/08/14/august-2018-security-and-quality-rollup/) has been released that **resolves this advisory for all supported Windows versions**.\r\n\r\n~~A new [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/) has been released that resolves this advisory. See Guidance section.~~\r\n\r\n~~Guidance has changed for Windows 7, Windows Server 2008 and Windows Server 2008 R2. See Guidance section.~~\r\n\r\nThe [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356) was released earlier this month. We have received multiple customer reports of [applications that fail to start or don't run correctly](https://support.microsoft.com/en-us/help/4345913) after installing the July 2018 update. These reports are specific to applications that initialize a COM component and run with restricted permissions.\r\n\r\nWe have stopped distributing the .NET Framework July 2018 updates on Windows Update and are actively working on fixing and re-shipping this month's updates. If you installed the July 2018 update and have not yet seen any negative behavior, we recommend that you leave your systems as-is but closely monitor them and ensure that you apply upcoming .NET Framework updates.\r\n\r\nAs a team, we regret that this release was shipped with this flaw. This release was tested using our regular and extensive testing process. We discovered while investigating this issue that we have a test hole for the specific combination of COM activation and restricted permissions, including impersonation. We will be mitigating that gap going forward. Again, we are sorry for any inconvenience that this product flaw has caused.\r\n\r\nWe will continue to update this issue and [post](https://blogs.msdn.microsoft.com/dotnet/2018/07/20/advisory-on-july-2018-net-framework-updates/) as we have new information.\r\n\r\n## Discussion\r\nPlease share your thoughts/experience on this advisory and see what others are saying at:\r\n\r\n* [microsoft/dotnet #811](https://github.com/Microsoft/dotnet/issues/811)\r\n\r\n## Guidance\r\n\r\nWe strongly recommend that you install [.NET Framework August 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/08/14/august-2018-security-and-quality-rollup/).\r\n\r\n~~We recommend that you install [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/) on your systems if you experienced the symptoms described in this advisory. If you did not experience these symptoms, we recommend you wait to update your machines until the next regular update, in August.~~\r\n\r\n~~On Windows 7, Windows Server 2008, and Windows Server 2008 R2, we have found that the combination of [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356) and  [.NET Framework July 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/07/30/net-framework-july-2018-update/) do not resolve all symptoms. On these Windows versions, if you are experiencing these symptoms after installing this combination of patches, we recommend that you uninstall (only) the Monthly Rollup patch and then install the appropriate Security Only patch listed at [July 2018 Security and Quality Rollup updates for .NET Framework](https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8356).~~\r\n\r\n## Technical Context\r\n\r\nThe .NET Framework runtime uses the process token to determine whether the process is being run within an elevated context. These system calls can fail if the required process inspection permissions are not present. This causes an “access denied\" error.\r\n\r\n## Symptoms\r\n\r\nA COM component fails to load because of “access denied,” “class not registered,” or “internal failure occurred for unknown reasons” errors. \r\n\r\nThe most commonly reported failure results in the following error message:\r\n\r\n```console\r\nException type: System.UnauthorizedAccessException\r\nMessage: Access is denied. (Exception from HRESULT: 0x80070005 (E_ACCESSDENIED))\r\n```\r\n\r\n### Sharepoint\r\n\r\nWhen users browse to a SharePoint site they may see the following HTTP 403 message:\r\n\r\n```console\r\n\"The Web Site declined to show this webpage\"\r\n```\r\n\r\nThe SharePoint ULS Logs will contain a message like the following:  \r\n\r\n```console\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General 0000       High                UnauthorizedAccessException for the request. 403 Forbidden will be returned. Error=An error occurred creating the configuration section handler for system.serviceModel/extensions: Could not load file or assembly <AssemblySignature>  or one of its dependencies. Access is denied. (C:\\Windows\\Microsoft.NET\\Framework64\\v2.0.50727\\Config\\machine.config line 180)    \r\n\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General b6p2      VerboseEx                Sending HTTP response 403:403 FORBIDDEN.      \r\n\r\nw3wp.exe (0x1894)         0x0B94  SharePoint Foundation  General 8nca       Verbose                Application error when access /, Error=Access is denied. (Exception from HRESULT: 0x80070005 (E_ACCESSDENIED))\r\n```\r\n\r\nWhen crawling a people content source, the request may fail with the following entry logged to the SharePoint ULS Log: \r\n\r\n```console\r\nmssearch.exe (0x118C) 0x203C SharePoint Server Search Crawler:Gatherer Plugin cd11 Warning The start address sps3s://<URLtoSite> cannot be crawled.  Context: Application 'Search_Service_Application', Catalog 'Portal_Content'  Details:  Class not registered   (0x80040154)  \r\n\r\nIIS Hosted Classic ASP calling CreateObject for .NET COM objects may receive error \"ActiveX component can't create object\" \r\n\r\n.NET Application creates instance of .NET COM application within an Impersonation Context may receive error \"0x80040154 (REGDB_E_CLASSNOTREG)\"\r\n```\r\n\r\n### BizTalk Server Administration Console\r\n\r\nBizTalk Server Administration Console fails to launch properly with the following errors: \r\n\r\n```console\r\nAn internal failure occurred for unknown reasons. (WinMgmt) \r\n\r\nProgram Location:  \r\n\r\n   at System.Runtime.InteropServices.Marshal.ThrowExceptionForHRInternal(Int32 errorCode, IntPtr errorInfo) \r\n\r\n   at System.Management.ManagementObject.Get() \r\n\r\n   at Microsoft.BizTalk.SnapIn.Framework.WmiProvider.SelectInstance\r\n```\r\n\r\n> Warning: The following workarounds may make a computer or a network more vulnerable to attack by malicious users or by malicious software such as viruses. We do not recommend these workarounds but are providing this information so that you can implement the workarounds at your own discretion. Use these workarounds at your own risk.\r\n\r\nUse the following guidance as a workaround:\r\n\r\n* Add “NETWORK SERVICE” to the local Administrators group. \r\n\r\n### IIS with Classic ASP\r\n\r\nIIS Hosted Classic ASP calling CreateObject for .NET COM objects may receive the following error: \"ActiveX component can't create object\". Use the following guidance as a workaround.\r\n\r\n* If your web site uses Anonymous Authentication, change the Web Site Anonymous Authentication credentials to use the \"Application pool identity\"\r\n* If your site uses Basic Authentication, log into the application once as the application pool identity and then create an instance of the .NET COM component. All subsequent activations for that .NET COM component should succeed, for any user.\r\n\r\n### .NET applications using COM and impersonation\r\n\r\n.NET Applications that creates instances of .NET COM application within an Impersonation Context may receive the following error: \"0x80040154 (REGDB_E_CLASSNOTREG)\". Use the following guidance as a workaround.\r\n\r\n* Create an instance of the .NET COM component prior to the impersonation context call. Later impersonated create instance calls should work as expected.\r\n* Run the .NET Application in the context of the impersonated user\r\n* Avoid using Impersonation when creating the .NET COM object","Url":"https://github.com/dotnet/announcements/issues/74","RelatedDescription":"Open issue \"Advisory on July 2018 .NET Framework Updates\" (#74)"}],"ResultType":"GitHubIssue"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1113832934580948993","CreatedAt":"2019-04-04T15:57:20+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demoes and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":10,"FavoriteCount":4,"RawContent":null},{"Id":"1111582019157278721","CreatedAt":"2019-03-29T10:53:00+00:00","UserScreenname":"dotnet","Text":"Learn how Azure Monitor can help you debug your production applications in this episode of #OnDotNet\n\n\"Investigatin… https://t.co/vNGlulMfam","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":24,"FavoriteCount":18,"RawContent":null},{"Id":"1110673857285746688","CreatedAt":"2019-03-26T22:44:17+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demoes and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":41,"FavoriteCount":21,"RawContent":null},{"Id":"1110519813179215879","CreatedAt":"2019-03-26T12:32:10+00:00","UserScreenname":"dotnet","Text":"Learn about \"Supercharging your Web APIs with OData and https://t.co/iOiV9qNspl Core\" w/ @HassanRezkHabib &amp;… https://t.co/CJyNmohHpi","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":51,"FavoriteCount":15,"RawContent":null}]}},"RunOn":"2019-04-05T05:30:29.4671982Z","RunDurationInMilliseconds":8530}