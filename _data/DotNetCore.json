{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing Entity Framework Core 2.1 Preview 2","PublishedOn":"2018-04-11T18:02:40+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"Today we’re releasing the second preview of EF Core 2.1, alongside .NET Core 2.1 Preview 2 and ASP.NET Core 2.1 Preview 2. Thank you so much to everyone who has tried our early builds and has helped...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/11/announcing-entity-framework-core-2-1-preview-2/","RawContent":null},{"Title":"Announcing .NET Core 2.1 Preview 2","PublishedOn":"2018-04-11T17:53:44+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 2.1 Preview 2. The release is now ready for broad testing, as we get closer to a final build within the next two to three months. We&#8217;d appreciate any feedback...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/11/announcing-net-core-2-1-preview-2/","RawContent":null},{"Title":"Explore CosmosDB with .NET Core and MongoDB","PublishedOn":"2018-04-09T16:00:47+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Have you had to design general purpose &#8220;metadata&#8221; tables in your SQL database that basically store column names and values? Do you often serialize/de-serialize XML or JSON from your SQL...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/09/explore-cosmosdb-with-net-core-and-mongodb/","RawContent":null},{"Title":"Calling all Desktop Developers: how should UI development be improved?","PublishedOn":"2018-03-23T18:01:31+00:00","CommentsCount":49,"FacebookCount":0,"Summary":"The user interface (UI) of any application is critical in making your app convenient and efficient for the folks using it. When developing applications for Enterprise use, a good UI can shave time off...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/03/23/calling-all-desktop-developers-how-should-ui-development-be-improved/","RawContent":null},{"Title":".NET Framework 4.7.2 Developer Pack Early Access build 3056 is available!","PublishedOn":"2018-03-08T23:22:13+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Today, we are happy to share an Early Access build with the .NET Framework 4.7.2 Developer Pack. The .NET Framework 4.7.2 Developer Pack lets developers build applications that target the .NET...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/03/08/net-framework-4-7-2-developer-pack-early-access-build-3056-is-available/","RawContent":null},{"Title":"F# language and tools update for Visual Studio 2017 version 15.6","PublishedOn":"2018-03-06T18:28:06+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"With the release of Visual Studio 2017 version 15.6, we’re excited to share updates to the F# language and core library, F# tooling in Visual Studio, and infrastructure updates that concern OSS...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/03/06/f-language-and-tools-update-for-visual-studio-2017-version-15-6/","RawContent":null},{"Title":"Announcing Entity Framework Core 2.1 Preview 1","PublishedOn":"2018-02-27T18:11:29+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"Today we are releasing the first preview of EF Core 2.1, alongside .NET Core 2.1 Preview 1 and ASP.NET Core 2.1 Preview 1. The new bits are available in NuGet as part of the individual packages, and...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/27/announcing-entity-framework-core-2-1-preview-1/","RawContent":null},{"Title":"Announcing .NET Core 2.1 Preview 1","PublishedOn":"2018-02-27T18:08:23+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 2.1 Preview 1. It is the first public release of .NET Core 2.1. We have great improvements that we want to share and that we would love to get your feedback on,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/27/announcing-net-core-2-1-preview-1/","RawContent":null},{"Title":"Calling All Desktop Developers: How do you interact with data?","PublishedOn":"2018-02-27T17:00:36+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Connecting to databases and services is an important part of desktop application development for many of our customers. Visual Studio provides a variety of tools and technologies that can help you...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/27/calling-all-desktop-developers-how-do-you-interact-with-data/","RawContent":null},{"Title":"Azure Blob Storage as a Network Drive","PublishedOn":"2018-02-26T16:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Many applications make use of a network drive to backup and store files. When I was in university I found myself constantly coding for fun, and one example took the form of a network share for my...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/26/azure-blob-storage-as-a-network-drive/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7452103949","Type":"PullRequestEvent","CreatedAt":"2018-03-29T07:03:03","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/97","RelatedDescription":"Merged pull request \"update CLA PDF link\" (#97) at dotnet/home","RelatedBody":""},{"Id":"7419410563","Type":"IssuesEvent","CreatedAt":"2018-03-22T14:02:36","Actor":"vvavrychuk","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/99","RelatedDescription":"Opened issue \"not working \"Linux Distribution\" dropdown on http://www.microsoft.com/net/learn/get-started/linux \" (#99) at dotnet/home","RelatedBody":"On the page http://www.microsoft.com/net/learn/get-started/linux dropdown \"Linux Distribution\" has no effect on the installation instruction next to him (they are always displayed for RedHat).\r\n\r\n![screenshot from 2018-03-22 16-02-19](https://user-images.githubusercontent.com/152563/37775020-6ec5778e-2dea-11e8-9ea3-b33e26c1c4e1.png)\r\n"},{"Id":"7192252734","Type":"PullRequestEvent","CreatedAt":"2018-02-03T01:30:47","Actor":"karann-msft","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/98","RelatedDescription":"Opened pull request \"Updates to reflect the latest information\" (#98) at dotnet/home","RelatedBody":""},{"Id":"7187459205","Type":"PullRequestEvent","CreatedAt":"2018-02-02T05:26:03","Actor":"mairaw","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/97","RelatedDescription":"Opened pull request \"update CLA PDF link\" (#97) at dotnet/home","RelatedBody":""},{"Id":"7102763357","Type":"PullRequestEvent","CreatedAt":"2018-01-16T00:17:04","Actor":"galatrash-at-dnn","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/96","RelatedDescription":"Opened pull request \"Adding DNN Platform.\" (#96) at dotnet/home","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7387413694","Type":"IssuesEvent","CreatedAt":"2018-03-15T21:18:32","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/announcements/issues/63","RelatedDescription":"Reopened issue \"Transport Layer Security (TLS) best practices with the .NET Framework article published\" (#63) at dotnet/announcements","RelatedBody":"# Transport Layer Security (TLS) best practices with the .NET Framework article published\r\n\r\nA new article was published that discusses the Transport Layer Security (TLS) best practices at https://docs.microsoft.com/dotnet/framework/network-programming/tls.\r\n\r\nTo ensure .NET Framework applications remain secure, the TLS version should **not** be hardcoded. .NET Framework applications should use the TLS version the operating system (OS) supports.\r\n\r\nThe (TLS) best practices article targets developers who are:\r\n* Directly using the System.Net APIs (for example, `System.Net.Http.HttpClient` and `System.Net.Security.SslStream`).\r\n* Directly using WCF clients and services using the `System.ServiceModel` namespace.\r\n* Using [Azure Cloud Services](https://azure.microsoft.com/services/cloud-services/) Web and Worker roles to host and run your application. See the [Azure Cloud Services](https://docs.microsoft.com/dotnet/framework/network-programming/tls#azure-cloud-services) section.\r\n\r\nThe article explains how to enable the strongest security available for the version of the .NET Framework that your app targets and runs on.\r\n\r\nThe section [Audit your code and make code changes](https://docs.microsoft.com/dotnet/framework/network-programming/tls#audit-your-code-and-make-code-changes) covers auditing and updating your code.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\ndotnet/docs#4675"},{"Id":"7387391842","Type":"IssuesEvent","CreatedAt":"2018-03-15T21:13:45","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/63","RelatedDescription":"Closed issue \"Transport Layer Security (TLS) best practices with the .NET Framework article published\" (#63) at dotnet/announcements","RelatedBody":"# Transport Layer Security (TLS) best practices with the .NET Framework article published\r\n\r\nA new article was published that discussed the Transport Layer Security (TLS) best practices at https://docs.microsoft.com/dotnet/framework/network-programming/tls.\r\n\r\nTo ensure .NET Framework applications remain secure, the TLS version should **not** be hardcoded. .NET Framework applications should use the TLS version the operating system (OS) supports.\r\n\r\nThe (TLS) best practices article targets developers who are:\r\n* Directly using the System.Net APIs (for example, `System.Net.Http.HttpClient` and `System.Net.Security.SslStream`).\r\n* Directly using WCF clients and services using the `System.ServiceModel` namespace.\r\n* Using [Azure Cloud Services](https://azure.microsoft.com/services/cloud-services/) Web and Worker roles to host and run your application. See the [Azure Cloud Services](https://docs.microsoft.com/dotnet/framework/network-programming/tls#azure-cloud-services) section.\r\n\r\nThe article explains how to enable the strongest security available for the version of the .NET Framework that your app targets and runs on.\r\n\r\nThe section [Audit your code and make code changes](https://docs.microsoft.com/dotnet/framework/network-programming/tls#audit-your-code-and-make-code-changes) covers auditing and updating your code.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\ndotnet/docs#4675"},{"Id":"7373349220","Type":"IssuesEvent","CreatedAt":"2018-03-13T17:01:53","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/62","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0875: Hash Collison can cause Denial of Service\" (#62) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0875: Hash Collison can cause Denial of Service\r\n## Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 2.0 (including other minor and patch releases).\r\nThis advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability in the public versions of .NET Core where a malicious file or web request could cause a denial of service (DoS) attack.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.10, 1.1.7 or 2.0.6. Developers are advised to update their .NET Core SDK to versions 1.1.8 or 2.1.101.\r\n\r\n## Discussion\r\n\r\nUse *TBD* for discussion of this advisory.\r\n\r\n### Mitigation Factors\r\nNone\r\n\r\n### Affected Software\r\n\r\nAny application running against .NET Core 1.0.9 or lower versions, 1.1.6 or lower minor versions or 2.0.5 or lower minor versions is affected. \r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\nAny application running against .NET Core 1.0.9 or lower versions, 1.1.6 or lower minor versions or 2.0.5 or lower minor versions is affected. \r\n\r\nA complete list of runtimes can be discovered by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows\t| `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS\t| `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms\t| `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.10, 1.1.7 and 2.0.6, then any applications targeting the respective major/minor versions, 1.0 or 1.1 or 2.0 of .NET Core are vulnerable.\r\n\r\nAdditionally, if you've deployed self-contained applications targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n#### How do I fix my affected application?\r\n\r\nApplications can be fixed by installing the latest .NET Core runtimes or SDKs. Typically, application servers only have runtime packages installed and developer machines have the SDKs installed. \r\nInstallers for the runtimes can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). \r\n.NET Core 1.1.8 SDK installs both versions 1.0.10 and 1.1.7 of the .NET Core runtime.\r\n\r\nIf you've built a self-contained application, you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n#### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the `application.runtime.config` file for that application. Set the framework version to the desired version and the `rollForward` property to false. These settings should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nSince the `application.runtime.config` file is an optional file, you may need to create one for each application and add it alongside the executable.\r\n\r\n### Acknowledgments\r\n[Ben Adams](https://twitter.com/ben_a_adams) of [Illyriad Games](https://www.illyriad.co.uk/)\r\n\r\n### External Links\r\n[CVE-2018-0875](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0875)\r\n\r\n### Revisions\r\n\r\nV1.0 (Mar 13, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-03-13_\r\n"},{"Id":"7301596554","Type":"IssuesEvent","CreatedAt":"2018-02-27T06:10:33","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/61","RelatedDescription":"Opened issue \"New offline books released for Visual Studio 2017\" (#61) at dotnet/announcements","RelatedBody":"# New offline books released for Visual Studio 2017\r\n\r\nEarlier this month, we released an update to Offline Books for the Visual Studio 2017 Help Viewer.\r\n\r\nThis release includes new .NET books, including .NET Core Guide, .NET Guide, .NET Framework Guide and the .NET API Reference. It also includes the latest content for Visual Studio 2017 version 15.5, the latest updates to Visual Basic, C# (7.1 and 7.2), F#, ASP.NET Core, NuGet, SQL Server, and the Universal Windows Platform.\r\n\r\nThe .NET Guide, .NET Framework Guide and .NET API Reference books together are a replacement for the .NET Framework 4.6 and 4.5 book, which can be removed. Just be aware that the new .NET API Reference book currently displays the API syntax block for C# only, but examples are shown in other languages, just like the experience you currently have on docs.microsoft.com.If you need to see the API syntax for Visual Basic, C++/CLI or F#, then you should keep the old book until the new reference book is updated again in a few weeks. Once you remove the .NET Framework 4.6 and 4.5 book, you cannot reinstall it.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\n- https://github.com/dotnet/docs/issues/4502\r\n\r\n## Add new content\r\n\r\nYou will see these new books when you have Help Viewer installed and choose **Help** > **Add and Remove Content** from the Visual Studio 2017 main menu. If you don't see this menu item, then [open the Visual Studio Installer](https://docs.microsoft.com/visualstudio/install/modify-visual-studio), click the **More** dropdown and choose **Modify**. When the component list appears, choose **Individual Components** at the top, then check **Help Viewer**.\r\n\r\n![help_viewer_component](https://user-images.githubusercontent.com/12971179/36713111-c9d49a7c-1b40-11e8-918a-e7e3619669a2.png)\r\n\r\n## Help Viewer Installation\r\n\r\nTo start the installation, select the **Modify** button in the lower right corner of the Installer window.\r\n\r\nTo update individual books whose status is \"Updates available\", remove the book and then click **Add** to get the new version. To update all your books at once, select the link in the lower right corner of the **Add and Remove Content** window:\r\n\r\n![offline-books](https://user-images.githubusercontent.com/12971179/36713028-75b944f6-1b40-11e8-91c4-4830355f815e.png)"},{"Id":"7300537622","Type":"IssuesEvent","CreatedAt":"2018-02-27T00:12:10","Actor":"eerhardt","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/60","RelatedDescription":"Opened issue \"System.Runtime.Intrinsics in .NET Core 2.1\" (#60) at dotnet/announcements","RelatedBody":"# System.Runtime.Intrinsics in .NET Core 2.1\r\n\r\n.NET Core 2.1 has been adding platform intrinsic APIs to support directly calling processor specific instructions, such as Intel’s x86 SIMD instructions.  See the [initial platform intrinsics design](https://github.com/dotnet/designs/blob/master/accepted/platform-intrinsics.md) for more information.\r\n\r\nWe have decided that it makes the most sense for this intrinsics feature to ship in a “preview” status in the .NET Core 2.1 RTM timeframe.  This means that the runtime support we are implementing will be included, but the assembly exposing the intrinsics will only be available to projects via explicit reference to a “preview-only” package.  These APIs won’t be included in the official .NET Core 2.1 packages.\r\n\r\nGiven our limited time and resources, recent changes in the approach we take to expose the intrinsics, and API changes prompted by design feedback from the community, we don’t believe there is enough time to settle these APIs for 2.1. We plan to follow the pattern of other recent features like Span<T> and Memory<T> that first shipped in preview before formally joining the supported API surface.  Not only would we expect the next version of .NET Core to support more intrinsics than could be supported in 2.1, but we expect to have real usage examples in CoreFX and higher level components as well.  These real world examples, as well as feedback from customers who opt in to the preview, should give us the confidence we need to officially support the APIs going forward.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\nhttps://github.com/dotnet/corefx/issues/27486\r\n\r\n## Details\r\n\r\nIn the coming days, we plan on removing System.Runtime.Intrinsics.dll from the Microsoft.NETCore.App package.  This means any libraries/applications that are using these APIs will no longer compile by default, and will not run on new builds of .NET Core 2.1.\r\n\r\nAt the same time, we will start producing a new System.Runtime.Intrinsics.Experimental NuGet package.  In order to continue using these APIs on .NET Core 2.1, a project will need to add a reference to this new package.\r\n\r\nAs its name implies, this package is experimental and should only be used for preview purposes.  It isn’t expected to be used in production scenarios.  Future version of .NET Core (after 2.1) will be allowed to break this package. This enables us respond to future feedback that requires the APIs to be modified.\r\n\r\nIn the future, when we are confident we have the intrinsic APIs right, we will stop producing the System.Runtime.Intrinsics.Experimental package. The platform intrinsics APIs will then be added back to Microsoft.NETCore.App and will be officially supported."}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7533495014","Type":"PullRequestEvent","CreatedAt":"2018-04-16T02:48:47","Actor":"tgiphil","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17579","RelatedDescription":"Opened pull request \"Changed SpinLock::CompareExchange method declaration to static\" (#17579) at dotnet/coreclr","RelatedBody":"This removes the passing of the \"this\" reference, which isn't used, when calling the method.\r\nNote: The compiler inline already optimize away the calling overhead - so this just saves a few compiler cycles."},{"Id":"7533471865","Type":"PullRequestEvent","CreatedAt":"2018-04-16T02:39:29","Actor":"tgiphil","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17578","RelatedDescription":"Closed pull request \"Changed SpinLock::CompareExchange method declaration to static \" (#17578) at dotnet/coreclr","RelatedBody":"This removes the passing of the \"this\" reference, which isn't used, when calling the method.\r\n\r\nNote: The compiler inline already optimize away the calling overhead - so this just saves a few compiler cycles."},{"Id":"7533463505","Type":"PullRequestEvent","CreatedAt":"2018-04-16T02:36:01","Actor":"tgiphil","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17578","RelatedDescription":"Opened pull request \"Changed SpinLock::CompareExchange method declaration to static \" (#17578) at dotnet/coreclr","RelatedBody":"This removes the passing of the \"this\" reference, which isn't used, when calling the method.\r\n\r\nNote: The compiler inline already optimize away the calling overhead - so this just saves a few compiler cycles."},{"Id":"7533091111","Type":"PullRequestEvent","CreatedAt":"2018-04-15T23:28:31","Actor":"kouvel","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17508","RelatedDescription":"Closed pull request \"[Arm64] Fix WorkStealingQueue memory ordering\" (#17508) at dotnet/coreclr","RelatedBody":"Fixes #17178\r\n\r\nAudited and reworked WorkStealingQueue to take into account multi-threaded memory ordering issues encountered on high core count arm64 testing.\r\n\r\nThis fixes easily reproducible errors in `System.Threading.Tasks.Tests`, `System.Threading.Channel.Tests`, and `System.Threading.Tasks.Dataflow.Tests`.  The same issue was making the linux-arm64 SDK unusable.\r\n\r\nThis is very important for linux-arm64 for the 2.1 release.  I am very happy to put the patch inside a `#if ARM64` if this is deemed too risky for other platforms.  (I suspect arm32 needs a similar/identical patch).\r\n\r\n@BruceForstall FYI"},{"Id":"7532906698","Type":"PullRequestEvent","CreatedAt":"2018-04-15T21:36:06","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17567","RelatedDescription":"Merged pull request \"[Arm64] Add full barrier after locking operations\" (#17567) at dotnet/coreclr","RelatedBody":"Per discussion with @kouvel in #17508, Interlocked operations should all act as a fully ordering barrier.\r\n\r\nFixes #14346 because we will have have come to a consensus\r\n\r\n@jkotas @kouvel @stephentoub @tarekgh \r\n"},{"Id":"7532906694","Type":"IssuesEvent","CreatedAt":"2018-04-15T21:36:06","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/14346","RelatedDescription":"Closed issue \"[Arm64] CQ Evaluate removing half barriers introduced in #14329\" (#14346) at dotnet/coreclr","RelatedBody":"#14329 introduces barriers in the exclusive ld/st ops related to atomics.  Decide whether these barriers are required for these atomic nodes.  Remove if necessary.\r\n\r\n```\r\n// The following instruction includes a acquire half barrier\r\n```\r\n```\r\n// The following instruction includes a release half barrier\r\n```\r\n```\r\n// The following instruction includes a acquire half barrier\r\n```\r\n```\r\n// The following instruction includes a release half barrier\r\n```"},{"Id":"7532530825","Type":"PullRequestEvent","CreatedAt":"2018-04-15T18:03:39","Actor":"tannergooding","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17577","RelatedDescription":"Opened pull request \" Updating the HWIntrinsic APIs to use the unmanaged constraint\" (#17577) at dotnet/coreclr","RelatedBody":"FYI. @CarolEidt, @fiigii, @sdmaclea, @eerhardt, @jkotas \r\n\r\nThis is mostly just for discussion right now, since the actual change can't be merged until after the branch opens again.\r\n\r\nThis is a new (and unshipped API) so back-compat should not be a concern here. However, there are some potential other issues with this change:\r\n* The `unmanaged` constraint uses a `modreq` on the constraint, there are several known places where tools won't respect this\r\n* The `modreq` also prevents compiler versions prior to C# 7.3 from consuming these APIs.\r\n\r\nSome of the benefits are:\r\n* The constraint is more accurate (but still not perfect)\r\n* You can use unsafe operations with these types\r\n  * This includes both unsafe operations that can and cannot be done with `System.Runtime.CompilerServices.Unsafe`\r\n  * Examples of things not possible with a shim API include stackalloc and bypassing definite assignment rules"},{"Id":"7532298934","Type":"IssuesEvent","CreatedAt":"2018-04-15T15:50:13","Actor":"BruceForstall","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/17573","RelatedDescription":"Closed issue \"[arm64] Assertion failed '(candidates & allRegs(srcInterval->registerType)) != 0'\" (#17573) at dotnet/coreclr","RelatedBody":"x64_arm64_altjit job failures:\r\n\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/x64_arm64_altjit/job/jitstress/job/x64_arm64_altjit_checked_windows_nt_jitstress1/\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/x64_arm64_altjit/job/jitstress/job/x64_arm64_altjit_checked_windows_nt_jitstress2/\r\n\r\n```\r\nD:\\j\\workspace\\x64_arm64_alt---733f8d21\\bin\\tests\\Windows_NT.x64.Checked\\TestWrappers\\JIT.HardwareIntrinsics\\JIT.HardwareIntrinsics.XUnitWrapper.cs(247): error : JIT_HardwareIntrinsics._Arm64_Simd_Simd_._Arm64_Simd_Simd_cmd [FAIL] [D:\\j\\workspace\\x64_arm64_alt---733f8d21\\tests\\runtest.proj]\r\n07:29:17         \r\n07:29:17 \r\n        Assert failure(PID 6328 [0x000018b8], Thread: 1960 [0x07a8]): Assertion failed '(candidates & allRegs(srcInterval->registerType)) != 0' in '<>c:<TestAdd>b__21_40(struct,struct):struct:this' (IL size 8)\r\n07:29:17         \r\n07:29:17             File: d:\\j\\workspace\\x64_arm64_alt---733f8d21\\src\\jit\\lsrabuild.cpp Line: 1577\r\n07:29:17             Image: D:\\j\\workspace\\x64_arm64_alt---733f8d21\\bin\\tests\\Windows_NT.x64.Checked\\Tests\\Core_Root\\CoreRun.exe\r\n07:29:17         \r\n07:29:17         \r\n07:29:17   \r\n07:29:17   Return code:      1\r\n07:29:17   Raw output file:      D:\\j\\workspace\\x64_arm64_alt---733f8d21\\bin\\tests\\Windows_NT.x64.Checked\\Reports\\JIT.HardwareIntrinsics\\Arm64\\Simd\\Simd.output.txt\r\n07:29:17   Raw output:\r\n07:29:17   BEGIN EXECUTION\r\n07:29:17          \"D:\\j\\workspace\\x64_arm64_alt---733f8d21\\tests\\..\\bin\\tests\\Windows_NT.x64.Checked\\Tests\\Core_Root\\corerun.exe\" Simd.exe \r\n07:29:17         System.Runtime.Intrinsics.Arm.Arm64.Simd.IsSupported = False\r\n07:29:17         Using default data set\r\n07:29:17         TestAbs passed\r\n07:29:17         Expected: 100\r\n07:29:17         Actual: 123456789\r\n07:29:17         END EXECUTION - FAILED\r\n07:29:17         FAILED\r\n07:29:17         Test Harness Exitcode is : 1\r\n07:29:17         \r\n07:29:17   To run the test:\r\n07:29:17   > set CORE_ROOT=D:\\j\\workspace\\x64_arm64_alt---733f8d21\\bin\\tests\\Windows_NT.x64.Checked\\Tests\\Core_Root\r\n07:29:17   > D:\\j\\workspace\\x64_arm64_alt---733f8d21\\bin\\tests\\Windows_NT.x64.Checked\\JIT\\HardwareIntrinsics\\Arm64\\Simd\\Simd.cmd\r\n07:29:17   \r\n07:29:17         Expected: True\r\n07:29:17         Actual:   False\r\n07:29:17           D:\\j\\workspace\\x64_arm64_alt---733f8d21\\bin\\tests\\Windows_NT.x64.Checked\\TestWrappers\\JIT.HardwareIntrinsics\\JIT.HardwareIntrinsics.XUnitWrapper.cs(247,0): at JIT_HardwareIntrinsics._Arm64_Simd_Simd_._Arm64_Simd_Simd_cmd()\r\n```\r\n"},{"Id":"7532297459","Type":"IssuesEvent","CreatedAt":"2018-04-15T15:49:26","Actor":"BruceForstall","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/17574","RelatedDescription":"Closed issue \"[arm64] Assertion failed 'varDsc->lvOnFrame && !varDsc->lvRegister'\" (#17574) at dotnet/coreclr","RelatedBody":"x64_arm64_altjit corefx assertion:\r\n\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/x64_arm64_altjit/job/jitstress/job/x64_arm64_altjit_checked_windows_nt_corefx_baseline/157/consoleFull#-102414311f66db340-b3cd-4e23-8190-9b52cb916333\r\n\r\n```\r\n12:06:47   ===========================================================================================================\r\n12:06:47   xUnit.net console test runner (64-bit .NET Core)\r\n12:06:47   Copyright (C) 2014 Outercurve Foundation.\r\n12:06:47   \r\n12:06:48   Discovering: System.ValueTuple.Tests\r\n12:06:50   Discovered:  System.ValueTuple.Tests\r\n12:06:51   Starting:    System.ValueTuple.Tests\r\n12:06:56   \r\n12:06:56 \r\n  Assert failure(PID 5032 [0x000013a8], Thread: 13340 [0x341c]): Assertion failed 'varDsc->lvOnFrame && !varDsc->lvRegister' in 'System.Tests.ValueTupleTests:LongTuplesWithNull()' (IL size 741)\r\n12:06:56   \r\n12:06:56       File: d:\\j\\workspace\\x64_arm64_alt---734a66f6\\src\\jit\\codegenarmarch.cpp Line: 752\r\n12:06:56       Image: D:\\j\\workspace\\x64_arm64_alt---734a66f6\\_\\fx\\bin\\testhost\\netcoreapp-Windows_NT-Release-x64\\dotnet.exe\r\n12:06:56   \r\n12:06:56   ----- end 12:06:56.86 ----- exit code 123456789 ----------------------------------------------------------\r\n12:06:56 D:\\j\\workspace\\x64_arm64_alt---734a66f6\\_\\fx\\Tools\\tests.targets(492,5): warning MSB3073: The command \"D:\\j\\workspace\\x64_arm64_alt---734a66f6\\_\\fx\\bin/tests/System.ValueTuple.Tests/netcoreapp-Windows_NT-Release-x64//RunTests.cmd D:\\j\\workspace\\x64_arm64_alt---734a66f6\\_\\fx\\bin/testhost/netcoreapp-Windows_NT-Release-x64/\" exited with code 123456789. [D:\\j\\workspace\\x64_arm64_alt---734a66f6\\_\\fx\\src\\System.ValueTuple\\tests\\System.ValueTuple.Tests.csproj]\r\n12:06:56 \r\nD:\\j\\workspace\\x64_arm64_alt---734a66f6\\_\\fx\\Tools\\tests.targets(500,5): error : One or more tests failed while running tests from 'System.ValueTuple.Tests' please check D:\\j\\workspace\\x64_arm64_alt---734a66f6\\_\\fx\\bin/tests/System.ValueTuple.Tests/netcoreapp-Windows_NT-Release-x64/testResults.xml for details! [D:\\j\\workspace\\x64_arm64_alt---734a66f6\\_\\fx\\src\\System.ValueTuple\\tests\\System.ValueTuple.Tests.csproj]\r\n```\r\n\r\nalso: https://ci.dot.net/job/dotnet_coreclr/job/master/view/x64_arm64_altjit/job/jitstress/job/x64_arm64_altjit_checked_windows_nt_corefx_jitstress2/154/\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/x64_arm64_altjit/job/jitstress/job/x64_arm64_altjit_checked_windows_nt_corefx_jitstressregs3/158/\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/x64_arm64_altjit/job/jitstress/job/x64_arm64_altjit_checked_windows_nt_corefx_jitstressregs4/156/\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/x64_arm64_altjit/job/jitstress/job/x64_arm64_altjit_checked_windows_nt_corefx_jitstressregs8/155/\r\n\r\nand probably others.\r\n\r\n"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7533062615","Type":"PullRequestEvent","CreatedAt":"2018-04-15T23:10:33","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/9070","RelatedDescription":"Opened pull request \"Give a different error to guide use to install via global tools\" (#9070) at dotnet/cli","RelatedBody":"Fix https://github.com/dotnet/cli/issues/8861\r\n\r\nSo, if several bundled DotnetTools cannot finish source build on time. The user can use global tools to get it.\r\n\r\nThe original plan that adding a different resolver is hard due to resolver can only find dll that will be used to spawn a process. However, the command constructor will give an error message when resolver find null. By adding a different error when the command name is part of the list, it can achieve the same goal.\r\n\r\n"},{"Id":"7529048893","Type":"PullRequestEvent","CreatedAt":"2018-04-14T00:09:09","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/9069","RelatedDescription":"Merged pull request \"Update roslyn, sdk to beta4-62811-05, preview2-62812-07, respectively (release/2.1.3xx)\" (#9069) at dotnet/cli","RelatedBody":"/cc @dotnet/dotnet-cli"},{"Id":"7529048049","Type":"PullRequestEvent","CreatedAt":"2018-04-14T00:08:45","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/9067","RelatedDescription":"Merged pull request \"Insert NuGet Build 4.7.0-rtm.5104 into cli\" (#9067) at dotnet/cli","RelatedBody":"Insert NuGet Build 4.7.0-rtm.5104 into cli release/2.1.2xx branch"},{"Id":"7529042273","Type":"IssuesEvent","CreatedAt":"2018-04-14T00:05:47","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/9068","RelatedDescription":"Closed issue \"Unable to build apps with the latest daily build\" (#9068) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n\r\n1. Install .NET Core SDK 2.1.300-preview3-008627 from https://dotnetcli.blob.core.windows.net/dotnet/Sdk/master/dotnet-sdk-latest-win-x64.exe\r\n2. Verify version `dotnet --version`\r\n3. Create new app `dotnet new console -o helloworld`\r\n4. `cd helloworld`\r\n5. Build `dotnet build -c Release`\r\n\r\n## Expected  behavior\r\nBuild successfully completed\r\n\r\n## Actual behavior\r\n```\r\nMicrosoft (R) Build Engine version 15.7.145.53551 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restoring packages for C:\\Users\\perftest\\Desktop\\helloworld\\helloworld.csproj...\r\nC:\\Users\\perftest\\Desktop\\helloworld\\helloworld.csproj : error NU1102: Unable to find package Microsoft.NETCore.App with version (>= 2.1.0-preview3-26411-06)\r\nC:\\Users\\perftest\\Desktop\\helloworld\\helloworld.csproj : error NU1102:   - Found 28 version(s) in nuget.org [ Nearest version: 2.1.0-preview2-26406-04 ]\r\nC:\\Users\\perftest\\Desktop\\helloworld\\helloworld.csproj : error NU1102:   - Found 4 version(s) in CliFallbackFolder [ Nearest version: 2.0.0-preview2-25407-01 ]\r\n  Restore failed in 774.82 ms for C:\\Users\\perftest\\Desktop\\helloworld\\helloworld.csproj.\r\n\r\nBuild FAILED.\r\n\r\nC:\\Users\\perftest\\Desktop\\helloworld\\helloworld.csproj : error NU1102: Unable to find package Microsoft.NETCore.App with version (>= 2.1.0-preview3-26411-06)\r\nC:\\Users\\perftest\\Desktop\\helloworld\\helloworld.csproj : error NU1102:   - Found 28 version(s) in nuget.org [ Nearest version: 2.1.0-preview2-26406-04 ]\r\nC:\\Users\\perftest\\Desktop\\helloworld\\helloworld.csproj : error NU1102:   - Found 4 version(s) in CliFallbackFolder [ Nearest version: 2.0.0-preview2-25407-01 ]\r\n    0 Warning(s)\r\n    1 Error(s)\r\n\r\nTime Elapsed 00:00:01.19\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.300-preview3-008627\r\n Commit:    6f1f2b19c4\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.14393\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.300-preview3-008627\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.0-preview3-26411-06\r\n  Commit:  8faa8fcfcf\r\n\r\n.NET Core SDKs installed:\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.0-preview2-006497 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.0 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.104 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.300-preview3-008618 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.300-preview3-008627 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0-preview2-30475 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0-preview2-30475 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.0-preview2-25407-01 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0-preview3-26411-06 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"7529037166","Type":"IssuesEvent","CreatedAt":"2018-04-14T00:03:19","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/9066","RelatedDescription":"Closed issue \"dotnet.exe hangs when publishing\" (#9066) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\nExecute `dotnet publish -c Release -r win10-x64` on the `2.1.300-preview3-008433` SDK. \r\n\r\n## Expected  behavior\r\nGeneration of the .exe file in the proper publish directory.\r\n\r\n## Actual behavior\r\n\r\n```\r\nPS E:\\Src\\ravendb-4.0-git\\bench\\Micro.Benchmark> dotnet publish -c Release -r win10-x64\r\nMicrosoft (R) Build Engine version 15.7.124.19828 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restoring packages for E:\\Src\\ravendb-4.0-git\\src\\Sparrow\\Sparrow.csproj...\r\n  Restoring packages for E:\\Src\\ravendb-4.0-git\\src\\Voron\\Voron.csproj...\r\n  Restoring packages for E:\\Src\\ravendb-4.0-git\\bench\\Micro.Benchmark\\Micro.Benchmark.csproj...\r\n  Generating MSBuild file E:\\Src\\ravendb-4.0-git\\src\\Sparrow\\obj\\Sparrow.csproj.nuget.g.props.\r\n  Generating MSBuild file E:\\Src\\ravendb-4.0-git\\src\\Voron\\obj\\Voron.csproj.nuget.g.props.\r\n  Restore completed in 209.8 ms for E:\\Src\\ravendb-4.0-git\\src\\Sparrow\\Sparrow.csproj.\r\n  Restore completed in 209.8 ms for E:\\Src\\ravendb-4.0-git\\src\\Voron\\Voron.csproj.\r\n  Generating MSBuild file E:\\Src\\ravendb-4.0-git\\bench\\Micro.Benchmark\\obj\\Micro.Benchmark.csproj.nuget.g.props.\r\n  Restore completed in 1.86 sec for E:\\Src\\ravendb-4.0-git\\bench\\Micro.Benchmark\\Micro.Benchmark.csproj.\r\n  You are working with a preview version of the .NET Core SDK. You can define the SDK version via a global.json file in the current project. More at https://go.microsoft.com/fwlink/?linkid=869452\r\n```\r\nAnd hangs there. \r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.300-preview3-008433\r\n Commit:    6b240926a3\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17133\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.300-preview3-008433\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.0-preview3-26411-06\r\n  Commit:  8faa8fcfcf\r\n\r\n.NET Core SDKs installed:\r\n  1.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.2 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.0-preview1-007947 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.1-preview-007165 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.1 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.2 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.100 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.101 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.102 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.103 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.300-preview2-008019 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.300-preview2-008315 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.300-preview3-008433 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0-preview1-28042 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.0-preview1-28124 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.0-preview2-30248 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.0-preview2-30431 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0-preview2-30248 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.0-preview2-30431 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0-preview1-26112-04 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0-preview1-26115-03 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0-preview1-26116-04 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0-preview2-26124-07 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0-preview2-26125-06 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0-preview2-26130-04 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0-preview2-26306-04 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0-preview2-26308-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0-preview2-26314-01 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0-preview2-26314-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0-preview3-26319-04 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0-preview3-26403-01 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0-preview3-26411-06 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n```\r\n\r\n\r\n\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7520936673","Type":"IssuesEvent","CreatedAt":"2018-04-12T15:42:33","Actor":"akaylh","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/707","RelatedDescription":"Opened issue \"Need DbProviderFactories\" (#707) at dotnet/standard","RelatedBody":"DbProviderFactories is very  important feature,Please support in standard.\r\nBTW I know already in .net core 2.1."},{"Id":"7516946311","Type":"PullRequestEvent","CreatedAt":"2018-04-12T00:40:56","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/700","RelatedDescription":"Merged pull request \"Update BuildTools to preview3-02711-02 (master)\" (#700) at dotnet/standard","RelatedBody":""},{"Id":"7514495259","Type":"IssuesEvent","CreatedAt":"2018-04-11T15:51:18","Actor":"lmagyar","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/706","RelatedDescription":"Closed issue \"Failed assembly resolution in XAML workflow projects\" (#706) at dotnet/standard","RelatedBody":"**Situation:**\r\n* using VS 15.6.5\r\n* a net461 project uses old project format but the new PackageReference tag\r\n* the net461 project contains XAML Workflow Activity definitions\r\n* the net461 project refers directly to a netstandard2.0 NuGet package or refers to a net461 NuGet package that has references to netstandard projects, ie. it's a mixed environment\r\n  * indirect: Microsoft.Orleans.Core v1.5.3 (net461 project)\r\n  * direct: Orleans.Activities v0.4.0, Abp v3.4.0 (netstandard2.0 projects)\r\n\r\n**Problem:**\r\n* build warnings, that some (quite random) .dll-s has an incorrect format\r\n* it's only a warning, but the application really fails with `System.NotSupportedException: Expression Activity type 'CSharpValue'1' requires compilation in order to run.  Please ensure that the workflow has been compiled.`\r\n\r\nIn case of referring to Orleans.Activities NuGet pkg the build warnings:\r\n* `Could not compile workflow expressions because file 'file:///C:\\Users\\xxx\\.nuget\\packages\\system.reflection.typeextensions\\4.4.0\\ref\\net461\\System.Reflection.TypeExtensions.dll' has an incorrect format. Workflows in this project may still run, if they do not require expression compilation. If the file is a platform-specific library or executable, consider building the project using MSBuild.exe from a command prompt of the targeted platform.`\r\n* `Could not run workflow validation because file 'System.Reflection.TypeExtensions, PublicKeyToken=b03f5f7f11d50a3a' has an incorrect format. This will not prevent workflows from running; but any workflow that has a validation error will fail at runtime. If the file is a platform-specific library or executable, consider building the project using MSBuild.exe from a command prompt of the targeted platform.`\r\n\r\nIn case of referring to Microsoft.Orleans.Core NuGet pkg the build warnings:\r\n* `Could not compile workflow expressions because file 'file:///C:\\Users\\xxx\\.nuget\\packages\\system.net.http\\4.3.0\\ref\\net46\\System.Net.Http.dll' has an incorrect format. Workflows in this project may still run, if they do not require expression compilation. If the file is a platform-specific library or executable, consider building the project using MSBuild.exe from a command prompt of the targeted platform.`\r\n* `Could not run workflow validation because file 'System.Net.Http, PublicKeyToken=b03f5f7f11d50a3a' has an incorrect format. This will not prevent workflows from running; but any workflow that has a validation error will fail at runtime. If the file is a platform-specific library or executable, consider building the project using MSBuild.exe from a command prompt of the targeted platform.`\r\n\r\nIn case of referring to Abp NuGet pkg the build warnings:\r\n* `Could not compile workflow expressions because file 'file:///C:\\Users\\xxx\\.nuget\\packages\\system.runtime.compilerservices.unsafe\\4.4.0\\ref\\netstandard2.0\\System.Runtime.CompilerServices.Unsafe.dll' has an incorrect format. Workflows in this project may still run, if they do not require expression compilation. If the file is a platform-specific library or executable, consider building the project using MSBuild.exe from a command prompt of the targeted platform.`\r\n* `Could not run workflow validation because file 'System.Runtime.CompilerServices.Unsafe, PublicKeyToken=b03f5f7f11d50a3a' has an incorrect format. This will not prevent workflows from running; but any workflow that has a validation error will fail at runtime. If the file is a platform-specific library or executable, consider building the project using MSBuild.exe from a command prompt of the targeted platform.`\r\n\r\n**Repros:**\r\n* see [developer community problem](https://developercommunity.visualstudio.com/content/problem/202765/failed-assembly-resolution-in-xaml-workflow-projec.html) though nobody cares about these reports...\r\n* [lmagyar/Orleans.Activities/tree/samples-xaml \"permalink\"](https://github.com/lmagyar/Orleans.Activities/tree/75f54b293bd06a1a71d4ce490e864117b7d5571d)\r\n  * **NOTE:** If you want to run the solution,\r\n    * there is another error #704, before running it, copy a netfx.force.conflicts.dll to the `Arithmetical.DevSiloHost` output dir\r\n    * first start manually `Arithmetical.DevSiloHost` wait 5s to start up, then start manually `Arithmetical.DevClusterClient`!\r\n\r\nreferring #704 #481 dotnet/sdk#1930\r\n\r\nI don't know whether dotnet/project-system is a better place for this issue?"},{"Id":"7514317727","Type":"IssuesEvent","CreatedAt":"2018-04-11T15:23:43","Actor":"joperezr","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/704","RelatedDescription":"Closed issue \"Missing netfx.force.conflicts.dll problem, again\" (#704) at dotnet/standard","RelatedBody":"**Situation:**\r\n* a net461 project refers to a netstandard2.0 NuGet package\r\n* the net461 project uses old project format but the new PackageReference tag\r\n* the net461 project contains XAML Workflow Activity definitions\r\n* using VS 15.6.5\r\n\r\n**Problem:**\r\n* the XAML codegen adds a reference to netfx.force.conflicts: `assemblyList.Add(Load(\"netfx.force.conflicts, Version=0.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51\"));`\r\n* but this .dll is not copied to the output directory\r\n* it causes exception: `System.IO.FileNotFoundException: Could not load file or assembly 'netfx.force.conflicts, PublicKeyToken=cc7b13ffcd2ddd51' or one of its dependencies. The system cannot find the file specified.`\r\n\r\n**Workaround:**\r\n* manually copying a netfx.force.conflicts.dll to the output solves the problem, the app runs\r\n* I don't know whether this .dll necessary at runtime at all, maybe generating `assemblyList.Add(Load(\"netfx.force.conflicts...` is unnecessary\r\n\r\n**Repro:**\r\n* [lmagyar/Orleans.Activities/tree/samples-xaml \"permalink\"](https://github.com/lmagyar/Orleans.Activities/tree/75f54b293bd06a1a71d4ce490e864117b7d5571d)\r\n* **NOTE:** If you want to run the solution, first start manually `HelloWorld.DevSiloHost` wait 5s to start up, then start manually `HelloWorld.DevClusterClient`!\r\n\r\nreferring #481 dotnet/sdk#1930\r\n\r\nI don't know whether dotnet/project-system is a better place for this issue?"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7533866988","Type":"PullRequestEvent","CreatedAt":"2018-04-16T05:23:33","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/29138","RelatedDescription":"Opened pull request \"Update ApiCompatBaseline for uap and uapaot for System.Runtime\" (#29138) at dotnet/corefx","RelatedBody":"cc @jkotas, @weshaggard "},{"Id":"7533841092","Type":"PullRequestEvent","CreatedAt":"2018-04-16T05:13:08","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/29133","RelatedDescription":"Merged pull request \"Update the ReadOnlySequence Slice performance tests to only measure the Slice method\" (#29133) at dotnet/corefx","RelatedBody":"cc @pakrym, @AlexRadch "},{"Id":"7533831517","Type":"PullRequestEvent","CreatedAt":"2018-04-16T05:09:05","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/29137","RelatedDescription":"Opened pull request \"Update xml comment for {ReadOnly}Memory.Pin method\" (#29137) at dotnet/corefx","RelatedBody":"See https://github.com/dotnet/coreclr/pull/17269#discussion_r177602812 for context.\r\n\r\nThis will need to get mirrored (cc @Anipik)"},{"Id":"7533809336","Type":"PullRequestEvent","CreatedAt":"2018-04-16T04:59:36","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/29136","RelatedDescription":"Opened pull request \"Add comments clarifying the logc in ReadOnlySequence GetFirstBuffer\" (#29136) at dotnet/corefx","RelatedBody":"See https://github.com/dotnet/corefx/pull/29051#discussion_r181122012 for context\r\n"},{"Id":"7533720655","Type":"PullRequestEvent","CreatedAt":"2018-04-16T04:20:30","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/29135","RelatedDescription":"Opened pull request \"Attempt at winning back performance regression from additional checks to ReadOnlySequence.Slice\" (#29135) at dotnet/corefx","RelatedBody":"Builds on top of the changes in https://github.com/dotnet/corefx/pull/29054 (which added necessary bounds checks/input validation and tests). Focus on optimization to win back **most** of the performance regression.\r\n\r\nWe are now **actually faster** than what was in master previously in almost all cases. The ONLY major outliers which still regressed are:\r\n```C#\r\nSlice(SequencePosition start); // only for multi segment sequence\r\nSlice(SequencePosition start, SequencePosition end); // only for multi segment sequence\r\n```\r\n\r\nThis is predominantly because the bounds checks for multi-segment sequences are inherently more complex.\r\n\r\nUsing the performance tests from https://github.com/dotnet/corefx/pull/29133:\r\n![image](https://user-images.githubusercontent.com/6527137/38789869-046d5e36-40f2-11e8-99b0-dd11f1de2e23.png)\r\n\r\ncc @pakrym, @AlexRadch, @KrzysztofCwalina, @davidfowl  "},{"Id":"7533690356","Type":"IssuesEvent","CreatedAt":"2018-04-16T04:07:20","Actor":"AlexRadch","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/29134","RelatedDescription":"Opened issue \"Marchaling of Default and Empty ReadOnlySequence\" (#29134) at dotnet/corefx","RelatedBody":"Early ReadOnlySequences works incorrect with default value. Now it is fixed except marshaling methods.\r\n\r\nNow if we try to marshal Default ROS it will be converted to Default ReadOnlyMemory. But if we try to create ROS for default ReadOnlyMemory then Empty ROS will be created.\r\n\r\nSo marshaling change Default ROS to Empty ROS. Is it issue?\r\n\r\nIf we try to marshal Empty ROS it can be marshaled and ArraySegment or ReadOnlyMemory with length equal to 0. And if we create ROS for ArraySegment or ReadOnlyMemory then Empty ROS will be created. So both ways are correct."},{"Id":"7533688721","Type":"PullRequestEvent","CreatedAt":"2018-04-16T04:06:38","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/29133","RelatedDescription":"Opened pull request \"Update the Slice performance tests to only measure the Slice method\" (#29133) at dotnet/corefx","RelatedBody":"cc @pakrym, @AlexRadch "},{"Id":"7533651087","Type":"PullRequestEvent","CreatedAt":"2018-04-16T03:50:45","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/29131","RelatedDescription":"Merged pull request \"Delete faulty assert in SslStreamInternal\" (#29131) at dotnet/corefx","RelatedBody":"We're hitting an assert when a ReadAsync call is made on SslStream after the underlying stream encounters EOF.  When calling FillBufferAsync, we've already allocated the read buffer, and we may not have any data in the buffer; if we then hit EOF, we've still not got any data in the buffer and we return.  Then when ReadAsync is called again, the assert trips over the buffer being allocated and also being empty.\r\n\r\nThe fix is to call ReturnReadBufferIfEmpty when we hit EOF, so that we promptly free the buffer.  But I'm also deleting the failing assert, as it seems like we could hit this in other situations as well.\r\n\r\nFixes https://github.com/dotnet/corefx/issues/29127\r\ncc: @geoffkizer, @Drawaes, @davidsh "}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7533645260","Type":"IssuesEvent","CreatedAt":"2018-04-16T03:48:20","Actor":"msbasanth","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/26059","RelatedDescription":"Closed issue \"Unable to retrieve whether assembly is C# assembly or C++/CLI assembly\" (#26059) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\nRoslyn - v2.6.0\r\nVS2017 15.6\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. I have a C++/CLI assembly where I am exposing few APIs\r\n2. I am referring the same from a C# assembly and analyzer the MemberAccessExpressionSyntax\r\n3. I got IMethodSymbol by using semanticModel.GetSymbolInfo(memberAccessExpressionNode).Symbol\r\n\r\n**Expected Behavior**:\r\nThe property methodSymbol.Language should show C# in the IMethod Symbol and also in the methodSymbol.ContainingAssembly.Language.\r\n\r\n**Actual Behavior**:\r\nIn both methodSymbol and methodSymbol.ContainingAssembly Language property shows C# not C++/CLI.\r\n\r\nI wanted to skip analyzing C++/CLI member access in my analyzer. How can I identify whether I am analyzing C# assembly or C++/CLI assembly?\r\n\r\nRegards\r\nBasanth\r\n"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7532963287","Type":"IssuesEvent","CreatedAt":"2018-04-15T22:10:19","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/5706","RelatedDescription":"Closed issue \"Unable to establish SSL connection when using System.Net.WebClient\" (#5706) at dotnet/corert","RelatedBody":"Hey!\r\n\r\nThank you for your rapid resolution on #5704 @jkotas excellent work! \r\n\r\nGot another one straight off the bat. The following issue happens when attempting to establish an encrypted connection for a file download using `System.Net.WebClient.DownloadFile`.  According to the stack trace the issue seems to be originating from [SSPIWrapper](https://github.com/dotnet/corefx/blob/437e8823028d09ad5c62ec71e2393417e3f7130c/src/Common/src/Interop/Windows/sspicli/SSPIWrapper.cs#L423) used by [System.Net.Security.SslStreamPal](https://github.com/dotnet/corefx/blob/3cc6fda0c6abe76eea222c165ebdf816e83df564/src/System.Net.Security/src/System/Net/Security/SslStreamPal.Windows.cs#L180).\r\n\r\n```\r\nSystem.Net.WebException: The SSL connection could not be established, see inner exception. Interop+SecPkgContext_ApplicationProtocol is missing structure marshalling data. To enable structure marshalling data, add a MarshalStructure directive to the application rd.xml file. For more information, please visit http://go.microsoft.com/fwlink/?LinkID=393965 ---> System.Net.Http.HttpRequestException: The SSL connection could not be established, see inner exception. ---> EETypeRva:0x005E0680: Interop+SecPkgContext_ApplicationProtocol is missing structure marshalling data. To enable structure marshalling data, add a MarshalStructure directive to the application rd.xml file. For more information, please visit http://go.microsoft.com/fwlink/?LinkID=393965\r\n   at bootstrapper!<BaseAddress>+0x14974d\r\n   at System.Runtime.InteropServices.Marshal.SizeOf(Type) + 0x4e\r\n   at bootstrapper!<BaseAddress>+0x2edf66\r\n   at System.Net.SSPIWrapper.QueryContextAttributes(SSPIInterface, SafeDeleteContext, Interop.SspiCli.ContextAttribute,\r\nInt32&) + 0x27c\r\n   at System.Net.Security.SslStreamPal.GetNegotiatedApplicationProtocol(SafeDeleteContext) + 0x23\r\n   at System.Net.Security.SecureChannel.GenerateToken(Byte[], Int32, Int32, Byte[]&) + 0x311\r\n   at System.Net.Security.SecureChannel.NextMessage(Byte[], Int32, Int32) + 0x75\r\n   at System.Net.Security.SslState.StartSendBlob(Byte[], Int32, AsyncProtocolRequest) + 0x20\r\n   at System.Net.Security.SslState.ForceAuthentication(Boolean, Byte[], AsyncProtocolRequest) + 0xe8\r\n   at System.Net.Security.SslState.ProcessAuthentication(LazyAsyncResult) + 0x1e8\r\n   at System.Net.Security.SslStream.BeginAuthenticateAsClient(SslClientAuthenticationOptions, CancellationToken, AsyncCallback, Object) + 0xb6   at System.Net.Security.SslStream.<>c.<AuthenticateAsClientAsync>b__47_0(SslClientAuthenticationOptions, CancellationToken, AsyncCallback, Object) + 0x37\r\n   at bootstrapper!<BaseAddress>+0x30b49c\r\n   at bootstrapper!<BaseAddress>+0x3092f5\r\n   at bootstrapper!<BaseAddress>+0x30927f\r\n   at System.Net.Security.SslStream.AuthenticateAsClientAsync(SslClientAuthenticationOptions, CancellationToken) + 0x9f\r\n   at System.Net.Http.ConnectHelper.<EstablishSslConnectionAsyncCore>d__5.MoveNext() + 0x10f\r\n\r\n   --- End of inner exception stack trace ---\r\n   at System.Net.Http.ConnectHelper.<EstablishSslConnectionAsyncCore>d__5.MoveNext() + 0x360\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() + 0x1f\r\n   at bootstrapper!<BaseAddress>+0x24ba5b\r\n   at System.Threading.Tasks.ValueTask`1.get_Result() + 0x4f\r\n   at System.Net.Http.HttpConnectionPool.<CreateConnectionAsync>d__40.MoveNext() + 0x63a\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() + 0x1f\r\n   at bootstrapper!<BaseAddress>+0x24ba5b\r\n   at System.Threading.Tasks.ValueTask`1.get_Result() + 0x6b\r\n   at System.Net.Http.HttpConnectionPool.<WaitForCreatedConnectionAsync>d__45.MoveNext() + 0x188\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() + 0x1f\r\n   at bootstrapper!<BaseAddress>+0x24ba5b\r\n   at System.Threading.Tasks.ValueTask`1.get_Result() + 0x6b\r\n   at System.Net.Http.HttpConnectionPool.<SendWithRetryAsync>d__37.MoveNext() + 0x162\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() + 0x1f\r\n   at bootstrapper!<BaseAddress>+0x24ba5b\r\n   at System.Net.Http.RedirectHandler.<SendAsync>d__4.MoveNext() + 0x169\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() + 0x1f\r\n   at bootstrapper!<BaseAddress>+0x24ba5b\r\n   at System.Net.Http.HttpClient.<FinishSendAsyncUnbuffered>d__63.MoveNext() + 0x1fb\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() + 0x1f\r\n   at bootstrapper!<BaseAddress>+0x24ba5b\r\n   at System.Net.HttpWebRequest.<SendRequest>d__194.MoveNext() + 0x905\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() + 0x1f\r\n   at bootstrapper!<BaseAddress>+0x24ba5b\r\n   at System.Net.HttpWebRequest.GetResponse() + 0x5d\r\n\r\n   --- End of inner exception stack trace ---\r\n   at System.Net.HttpWebRequest.GetResponse() + 0x7e\r\n   at System.Net.WebClient.DownloadBits(WebRequest, Stream) + 0x234\r\n   at System.Net.WebClient.DownloadFile(Uri, String) + 0x19f\r\n   at Bootstrapper.Windows.Program.DownloadFile(String, String) + 0x11f\r\n```"},{"Id":"7532948883","Type":"IssuesEvent","CreatedAt":"2018-04-15T22:01:27","Actor":"ptMuta","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/5706","RelatedDescription":"Opened issue \"Unable to establish SSL connection when using System.Net.WebClient\" (#5706) at dotnet/corert","RelatedBody":"Hey!\r\n\r\nThank you for your rapid resolution on #5704 @jkotas excellent work! \r\n\r\nGot another one straight off the bat. The following issue happens when attempting to establish an encrypted connection for a file download using `System.Net.WebClient.DownloadFile`.  According to the stack trace the issue seems to be originating from [SSPIWrapper](https://github.com/dotnet/corefx/blob/437e8823028d09ad5c62ec71e2393417e3f7130c/src/Common/src/Interop/Windows/sspicli/SSPIWrapper.cs#L423) used by [System.Net.Security.SslStreamPal](https://github.com/dotnet/corefx/blob/3cc6fda0c6abe76eea222c165ebdf816e83df564/src/System.Net.Security/src/System/Net/Security/SslStreamPal.Windows.cs#L180).\r\n\r\n```\r\nSystem.Net.WebException: The SSL connection could not be established, see inner exception. Interop+SecPkgContext_ApplicationProtocol is missing structure marshalling data. To enable structure marshalling data, add a MarshalStructure directive to the application rd.xml file. For more information, please visit http://go.microsoft.com/fwlink/?LinkID=393965 ---> System.Net.Http.HttpRequestException: The SSL connection could not be established, see inner exception. ---> EETypeRva:0x005E0680: Interop+SecPkgContext_ApplicationProtocol is missing structure marshalling data. To enable structure marshalling data, add a MarshalStructure directive to the application rd.xml file. For more information, please visit http://go.microsoft.com/fwlink/?LinkID=393965\r\n   at bootstrapper!<BaseAddress>+0x14974d\r\n   at System.Runtime.InteropServices.Marshal.SizeOf(Type) + 0x4e\r\n   at bootstrapper!<BaseAddress>+0x2edf66\r\n   at System.Net.SSPIWrapper.QueryContextAttributes(SSPIInterface, SafeDeleteContext, Interop.SspiCli.ContextAttribute,\r\nInt32&) + 0x27c\r\n   at System.Net.Security.SslStreamPal.GetNegotiatedApplicationProtocol(SafeDeleteContext) + 0x23\r\n   at System.Net.Security.SecureChannel.GenerateToken(Byte[], Int32, Int32, Byte[]&) + 0x311\r\n   at System.Net.Security.SecureChannel.NextMessage(Byte[], Int32, Int32) + 0x75\r\n   at System.Net.Security.SslState.StartSendBlob(Byte[], Int32, AsyncProtocolRequest) + 0x20\r\n   at System.Net.Security.SslState.ForceAuthentication(Boolean, Byte[], AsyncProtocolRequest) + 0xe8\r\n   at System.Net.Security.SslState.ProcessAuthentication(LazyAsyncResult) + 0x1e8\r\n   at System.Net.Security.SslStream.BeginAuthenticateAsClient(SslClientAuthenticationOptions, CancellationToken, AsyncCallback, Object) + 0xb6   at System.Net.Security.SslStream.<>c.<AuthenticateAsClientAsync>b__47_0(SslClientAuthenticationOptions, CancellationToken, AsyncCallback, Object) + 0x37\r\n   at bootstrapper!<BaseAddress>+0x30b49c\r\n   at bootstrapper!<BaseAddress>+0x3092f5\r\n   at bootstrapper!<BaseAddress>+0x30927f\r\n   at System.Net.Security.SslStream.AuthenticateAsClientAsync(SslClientAuthenticationOptions, CancellationToken) + 0x9f\r\n   at System.Net.Http.ConnectHelper.<EstablishSslConnectionAsyncCore>d__5.MoveNext() + 0x10f\r\n\r\n   --- End of inner exception stack trace ---\r\n   at System.Net.Http.ConnectHelper.<EstablishSslConnectionAsyncCore>d__5.MoveNext() + 0x360\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() + 0x1f\r\n   at bootstrapper!<BaseAddress>+0x24ba5b\r\n   at System.Threading.Tasks.ValueTask`1.get_Result() + 0x4f\r\n   at System.Net.Http.HttpConnectionPool.<CreateConnectionAsync>d__40.MoveNext() + 0x63a\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() + 0x1f\r\n   at bootstrapper!<BaseAddress>+0x24ba5b\r\n   at System.Threading.Tasks.ValueTask`1.get_Result() + 0x6b\r\n   at System.Net.Http.HttpConnectionPool.<WaitForCreatedConnectionAsync>d__45.MoveNext() + 0x188\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() + 0x1f\r\n   at bootstrapper!<BaseAddress>+0x24ba5b\r\n   at System.Threading.Tasks.ValueTask`1.get_Result() + 0x6b\r\n   at System.Net.Http.HttpConnectionPool.<SendWithRetryAsync>d__37.MoveNext() + 0x162\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() + 0x1f\r\n   at bootstrapper!<BaseAddress>+0x24ba5b\r\n   at System.Net.Http.RedirectHandler.<SendAsync>d__4.MoveNext() + 0x169\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() + 0x1f\r\n   at bootstrapper!<BaseAddress>+0x24ba5b\r\n   at System.Net.Http.HttpClient.<FinishSendAsyncUnbuffered>d__63.MoveNext() + 0x1fb\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() + 0x1f\r\n   at bootstrapper!<BaseAddress>+0x24ba5b\r\n   at System.Net.HttpWebRequest.<SendRequest>d__194.MoveNext() + 0x905\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() + 0x1f\r\n   at bootstrapper!<BaseAddress>+0x24ba5b\r\n   at System.Net.HttpWebRequest.GetResponse() + 0x5d\r\n\r\n   --- End of inner exception stack trace ---\r\n   at System.Net.HttpWebRequest.GetResponse() + 0x7e\r\n   at System.Net.WebClient.DownloadBits(WebRequest, Stream) + 0x234\r\n   at System.Net.WebClient.DownloadFile(Uri, String) + 0x19f\r\n   at Bootstrapper.Windows.Program.DownloadFile(String, String) + 0x11f\r\n```"},{"Id":"7532577937","Type":"IssuesEvent","CreatedAt":"2018-04-15T18:30:33","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/5705","RelatedDescription":"Closed issue \"Checking allocated memory with GC.GetAllocatedBytesForCurrentThread()\" (#5705) at dotnet/corert","RelatedBody":"Hi!\r\n\r\nI am currently implementing CoreRT support for BenchmarkDotNet.\r\n\r\nOne of the features of BDN is a `MemoryDiagnoser` which tells the user how much memory was allocated. We have a lot of integration tests for the accuracy of the diagnoser. When I added CoreRT to the list of supported runtimes, one of the tests have failed.\r\n\r\nIt looks that it takes **72** bytes to allocate `Task.FromResult(default(int))` for .NET Core 2.1 and **88** bytes to do the same with CoreRT.\r\n\r\n**My question:** Do you have any idea what can be possibly causing the difference? There is no difference for `new object()` or `new byte [8]`\r\n\r\nRepo:\r\n\r\n```cs\r\nusing System;\r\nusing System.Diagnostics;\r\nusing System.Threading.Tasks;\r\n\r\nnamespace rttemp\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            Console.WriteLine($\"IsServerGC = {System.Runtime.GCSettings.IsServerGC}, IntPtr.Size = {IntPtr.Size}\");\r\n            \r\n            const int count = 1000;\r\n            object[] array = new object[count];\r\n            \r\n            long before = GC.GetAllocatedBytesForCurrentThread();\r\n            \r\n            for (int i = 0; i < 1000; i++)\r\n               array[i] = Task.FromResult(default(int)); //new object();\r\n            \r\n            long after = GC.GetAllocatedBytesForCurrentThread();\r\n            \r\n            Console.WriteLine($\"{after} - {before} = {after - before}\");\r\n            \r\n            GC.KeepAlive(array);\r\n        }\r\n    }\r\n}\r\n\r\n```\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.DotNet.ILCompiler\" Version=\"1.0.0-alpha-26412-02\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\nWhen I run with .NET Core 2.1:\r\n\r\n```\r\nPS C:\\rttemp> dotnet run -c Release -f netcoreapp2.1\r\nIsServerGC = False, IntPtr.Size = 8\r\n248040 - 176040 = 72000\r\n```\r\n\r\nWhen I run with CoreRT `1.0.0-alpha-26412-02`:\r\n\r\n```\r\nPS C:\\rttemp> dotnet publish -c Release -r win-x64\r\nMicrosoft (R) Build Engine version 15.7.11.29948 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 54,43 ms for C:\\rttemp\\rttemp.csproj.\r\n  rttemp -> C:\\rttemp\\bin\\Release\\netcoreapp2.1\\win-x64\\rttemp.dll\r\n  Generating native code\r\n  rttemp -> C:\\rttemp\\bin\\Release\\netcoreapp2.1\\win-x64\\publish\\\r\nPS C:\\rttemp> .\\bin\\Release\\netcoreapp2.1\\win-x64\\native\\rttemp.exe\r\nIsServerGC = False, IntPtr.Size = 8\r\n144984 - 57200 = 87784\r\n```"},{"Id":"7532450723","Type":"IssuesEvent","CreatedAt":"2018-04-15T17:16:44","Actor":"adamsitnik","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/5705","RelatedDescription":"Opened issue \"Checking allocated memory with GC.GetAllocatedBytesForCurrentThread()\" (#5705) at dotnet/corert","RelatedBody":"Hi!\r\n\r\nI am currently implementing CoreRT support for BenchmarkDotNet.\r\n\r\nOne of the features of BDN is a `MemoryDiagnoser` which tells the user how much memory was allocated. We have a lot of integration tests for the accuracy of the diagnoser. When I added CoreRT to the list of supported runtimes, one of the tests have failed.\r\n\r\nIt looks that it takes **72** bytes to allocate `Task.FromResult(default(int))` for .NET Core 2.1 and **88** bytes to do the same with CoreRT.\r\n\r\n**My question:** Do you have any idea what can be possibly causing the difference? There is no difference for `new object()` or `new byte [8]`\r\n\r\nRepo:\r\n\r\n```cs\r\nusing System;\r\nusing System.Diagnostics;\r\nusing System.Threading.Tasks;\r\n\r\nnamespace rttemp\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            Console.WriteLine($\"IsServerGC = {System.Runtime.GCSettings.IsServerGC}\");\r\n            \r\n            const int count = 1000;\r\n            object[] array = new object[count];\r\n            \r\n            long before = GC.GetAllocatedBytesForCurrentThread();\r\n            \r\n            for (int i = 0; i < 1000; i++)\r\n               array[i] = Task.FromResult(default(int)); //new object();\r\n            \r\n            long after = GC.GetAllocatedBytesForCurrentThread();\r\n            \r\n            Console.WriteLine($\"{after} - {before} = {after - before}\");\r\n            \r\n            GC.KeepAlive(array);\r\n        }\r\n    }\r\n}\r\n\r\n```\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.DotNet.ILCompiler\" Version=\"1.0.0-alpha-26412-02\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\nWhen I run with .NET Core 2.1:\r\n\r\n```\r\nPS C:\\rttemp> dotnet run -c Release -f netcoreapp2.1\r\nIsServerGC = False\r\n248040 - 176040 = 72000\r\n```\r\n\r\nWhen I run with CoreRT `1.0.0-alpha-26412-02`:\r\n\r\n```\r\nPS C:\\rttemp> dotnet publish -c Release -r win-x64\r\nMicrosoft (R) Build Engine version 15.7.11.29948 for .NET Core\r\nCopyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n  Restore completed in 54,43 ms for C:\\rttemp\\rttemp.csproj.\r\n  rttemp -> C:\\rttemp\\bin\\Release\\netcoreapp2.1\\win-x64\\rttemp.dll\r\n  Generating native code\r\n  rttemp -> C:\\rttemp\\bin\\Release\\netcoreapp2.1\\win-x64\\publish\\\r\nPS C:\\rttemp> .\\bin\\Release\\netcoreapp2.1\\win-x64\\native\\rttemp.exe\r\nIsServerGC = False\r\n144984 - 57200 = 87784\r\n```"},{"Id":"7532445440","Type":"IssuesEvent","CreatedAt":"2018-04-15T17:13:49","Actor":"ptMuta","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/5704","RelatedDescription":"Opened issue \"Unable to compile when using System.ServiceProcess.ServiceController\" (#5704) at dotnet/corert","RelatedBody":"Hey!\r\n\r\nI've been experimenting with the CoreRT for a while now and I'm attempting to compile a windows service to a native binary. The compilation goes through fine otherwise and I can run my code in non-service mode just fine, but when attempting to run it as a service I run into the following metadata marshaling issue:\r\n\r\n```\r\nFailed: EETypeRva:0x00A0F388: Interop+Advapi32+SERVICE_TABLE_ENTRY is missing structure marshalling data. To enable structure marshalling data, add a MarshalStructure directive to the application rd.xml file. For more information, please visit http://go.microsoft.com/fwlink/?LinkID=393965\r\n   at agent!<BaseAddress>+0x1bbe9d\r\n   at System.Runtime.InteropServices.Marshal.SizeOf(Type) + 0x4e\r\n   at System.ServiceProcess.ServiceBase.Run(ServiceBase[]) + 0x62\r\n   at Agent.Windows.Program.Main(String[]) + 0x154\r\n```\r\n\r\nNow since `Interop.Advapi32` is imported via static reference from the common lib ([see here](https://github.com/dotnet/corefx/blob/master/src/System.ServiceProcess.ServiceController/src/System/ServiceProcess/ServiceBase.cs#L16)), I didn't find a way to allow MarshalStructure via rd.xml.\r\n\r\nThe first crash is at [line 603](https://github.com/dotnet/corefx/blob/master/src/System.ServiceProcess.ServiceController/src/System/ServiceProcess/ServiceBase.cs#L603) of ServiceBase and probably some other calls would crash as well.\r\n\r\nI'm guessing to fix this the best approach would be to refactor the `System.ServiceProcess.ServiceController` to be more AOT friendly, but as it stands I just don't have the time at this standing moment to figure out how to do a custom build nor the time to learn the code base well enough to patch it myself :(\r\n\r\nAny suggestions?\r\n"},{"Id":"7532390561","Type":"PullRequestEvent","CreatedAt":"2018-04-15T16:42:11","Actor":"tonerdo","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5703","RelatedDescription":"Opened pull request \"WIP: Add building native libraries to documentation\" (#5703) at dotnet/corert","RelatedBody":"- [x] Add native library documentation to README\r\n- [ ] Add a real world use case to the `samples` folder (suggestions are welcome)\r\n\r\nFixes #4987"},{"Id":"7529774313","Type":"PullRequestEvent","CreatedAt":"2018-04-14T09:19:19","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5701","RelatedDescription":"Merged pull request \"Build in Windows subsystem on Windows when OutputType is WinExe\" (#5701) at dotnet/corert","RelatedBody":"Link the native exe in the Windows subsystem when the output type is `WinExe` on windows, and fallback to regular `Exe` behavior off-windows.\r\n\r\nContributes to #5662.\r\n\r\nI've manually tested this with the Platformer2D MonoGame sample."},{"Id":"7529032171","Type":"PullRequestEvent","CreatedAt":"2018-04-14T00:00:56","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5702","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5702) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7528917091","Type":"PullRequestEvent","CreatedAt":"2018-04-13T23:09:48","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5702","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5702) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7528669128","Type":"PullRequestEvent","CreatedAt":"2018-04-13T21:46:02","Actor":"jkoritzinsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5701","RelatedDescription":"Opened pull request \"Build in Windows subsystem on Windows when OutputType is WinExe\" (#5701) at dotnet/corert","RelatedBody":"Link the native exe in the Windows subsystem when the output type is `WinExe` on windows, and fallback to regular `Exe` behavior off-windows.\r\n\r\nContributes to #5662."}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7529195583","Type":"PullRequestEvent","CreatedAt":"2018-04-14T01:38:16","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/2140","RelatedDescription":"Merged pull request \"Run target according to NoBuild flag\" (#2140) at dotnet/sdk","RelatedBody":"fix https://github.com/dotnet/sdk/issues/2114"},{"Id":"7529195580","Type":"IssuesEvent","CreatedAt":"2018-04-14T01:38:16","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/2114","RelatedDescription":"Closed issue \"Cannot build project with PackAsTool=true and GeneratePackageOnBuild=true \" (#2114) at dotnet/sdk","RelatedBody":"**Repro**\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n    <PackAsTool>true</PackAsTool>\r\n    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```\r\n`dotnet build`\r\n\r\n**Expected**\r\nBuild the project *and* produce a nupkg.\r\n\r\n**Actual**\r\n`dotnet build` fails\r\n\r\n> C:\\Program Files\\dotnet\\sdk\\2.1.300-preview2-008523\\Sdks\\NuGet.Build.Tasks.Pack\\build\\NuGet.Build.Tasks.Pack.targets(326,5): error MSB4006: There is a circular dependency in the target dependency graph involving target \"_WalkEachTargetPerFramework\". [C:\\dev\\natemcmaster\\tmp\\tmp.csproj]\r\n"},{"Id":"7528793111","Type":"PullRequestEvent","CreatedAt":"2018-04-13T22:23:58","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/2141","RelatedDescription":"Merged pull request \"Support uppercase 'V' in TargetFrameworkVersion\" (#2141) at dotnet/sdk","RelatedBody":"Fixes #1884\r\n\r\nPeeling the onion on this, NuGet will also need a fix for the end-to-end to work: https://github.com/NuGet/Home/issues/6823"},{"Id":"7528793085","Type":"IssuesEvent","CreatedAt":"2018-04-13T22:23:58","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1884","RelatedDescription":"Closed issue \"TargetFrameworkVersion value now case sensitive\" (#1884) at dotnet/sdk","RelatedBody":"- Create a new .NET Framework Console App in VS\r\n- Edit project file to capitalize the `v` in the `TargetFrameworkVersion` property (ie change from `v4.6.1` to `V4.6.1`)\r\n- Reload project file\r\n\r\n**EXPECTED**: Project loads and builds successfully\r\n**ACTUAL**: Load / build failure:\r\n\r\n> A numeric comparison was attempted on \"$(_TargetFrameworkVersionWithoutV)\" that evaluates to \"V4.6.1\" instead of a number, in condition \"'$(ImplicitlyExpandNETStandardFacades)' == '' AND '$(_TargetFrameworkVersionWithoutV)' >= '4.6.1'\".  C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\MSBuild\\Microsoft\\Microsoft.NET.Build.Extensions\\Microsoft.NET.Build.Extensions.NETFramework.targets\r\n\r\n**ROOT CAUSE**: We are doing a case sensitive comparison in several places:\r\n\r\n- https://github.com/dotnet/sdk/blob/79d5e5d11c1142cdbb93d0127b82915729d4900e/src/Tasks/Microsoft.NET.Build.Extensions.Tasks/msbuildExtensions/Microsoft/Microsoft.NET.Build.Extensions/Microsoft.NET.Build.Extensions.targets#L18\r\n-  https://github.com/dotnet/sdk/blob/79d5e5d11c1142cdbb93d0127b82915729d4900e/src/Tasks/Microsoft.NET.Build.Tasks/build/Microsoft.NET.Sdk.BeforeCommon.targets#L91\r\n"},{"Id":"7528671611","Type":"PullRequestEvent","CreatedAt":"2018-04-13T21:46:46","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2145","RelatedDescription":"Opened pull request \"Add target dependency on GetFrameworkPaths everywhere GetReferenceAssemblyPaths is depended on\" (#2145) at dotnet/sdk","RelatedBody":"Fixes #1730"},{"Id":"7528066473","Type":"PullRequestEvent","CreatedAt":"2018-04-13T19:20:00","Actor":"johnbeisner","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/2143","RelatedDescription":"Merged pull request \"Insert NuGet Build 4.7.0-rtm.5096 into sdk\" (#2143) at dotnet/sdk","RelatedBody":"Insert NuGet Build 4.7.0-rtm.5096 into sdk release/2.1.2xx branch"},{"Id":"7526537167","Type":"IssuesEvent","CreatedAt":"2018-04-13T14:19:09","Actor":"rainersigwald","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/2142","RelatedDescription":"Opened issue \"Simplify content embedding in the new csproj format.\" (#2142) at dotnet/sdk","RelatedBody":"_From @sandorfr on April 13, 2018 1:38_\n\n### Steps to reproduce\r\n\r\nThe syntax to just include files files in an output package seems overly complicated for such a simple task.\r\n\r\n### Actual behavior\r\n\r\nCurrently we have to remove the files from the `<None>` and add them to `<Content>` which is not enough as we also need to add a `<CopyToOutputDirectory>`. With out the latter, Content just does nothing.\r\n\r\n```xml\r\n  <ItemGroup>\r\n    <None Remove=\"MailTemplates\\*.hbs\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <Content Include=\"MailTemplates\\*.hbs\">\r\n      <CopyToOutputDirectory>Always</CopyToOutputDirectory>\r\n    </Content>\r\n  </ItemGroup>\r\n```\r\n\r\n### Expected  behavior\r\n\r\nWe expect something as simple as that (or similar) to just work.\r\n```xml\r\n  <ItemGroup>\r\n      <Content Include=\"MailTemplates\\*.hbs\" />\r\n  </ItemGroup>\r\n```\r\n\r\n### Environment data\r\n`msbuild /version` output: 15.6.82.30579\r\n\r\nOS info: Windows 10\r\n\r\nIf applicable, version of the tool that invokes MSBuild (Visual Studio, dotnet CLI, etc):\r\ndotnet cli: 2.1.102\r\n\n\n_Copied from original issue: Microsoft/msbuild#3192_"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"984485381071450112","CreatedAt":"2018-04-12T17:36:20+00:00","UserScreenname":"dotnet","Text":"https://t.co/iOiV9qNspl Core 2.1.0-preview2 now available https://t.co/W0wBUDkqXt","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":86,"FavoriteCount":75,"RawContent":null},{"Id":"984130513383317505","CreatedAt":"2018-04-11T18:06:13+00:00","UserScreenname":"dotnet","Text":"Announcing Entity Framework Core 2.1 Preview 2 https://t.co/SS9hInyJlJ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":124,"FavoriteCount":80,"RawContent":null},{"Id":"984127988592623616","CreatedAt":"2018-04-11T17:56:11+00:00","UserScreenname":"dotnet","Text":"Announcing .NET Core 2.1 Preview 2 https://t.co/T8ah6NSIAq","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":422,"FavoriteCount":254,"RawContent":null},{"Id":"983818840961269761","CreatedAt":"2018-04-10T21:27:44+00:00","UserScreenname":"dotnet","Text":"Explore CosmosDB with .NET Core and MongoDB https://t.co/9VeWPHkIKo","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":110,"FavoriteCount":37,"RawContent":null},{"Id":"983697698778841088","CreatedAt":"2018-04-10T13:26:22+00:00","UserScreenname":"dotnet","Text":"Join our @csharpfritz with guest @jonskeet for some live coding this morning as they discuss managing DateTime valu… https://t.co/c6k5MACy5Z","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":21,"FavoriteCount":9,"RawContent":null},{"Id":"983487812107304960","CreatedAt":"2018-04-09T23:32:21+00:00","UserScreenname":"dotnet","Text":"Curious which analyzers/fixers (“Quick Actions”) @roslyn provides? @kuhlenhuth has the answer. https://t.co/nawR22r6jz","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":17,"FavoriteCount":7,"RawContent":null},{"Id":"981533325767606273","CreatedAt":"2018-04-04T14:05:55+00:00","UserScreenname":"dotnet","Text":"Jeff (@csharpfritz) is working with @Azure Q &amp; A Maker today to improve his chat-bot for Twitch and Mixer.  Tune in… https://t.co/MLdDPdKPTL","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":13,"FavoriteCount":1,"RawContent":null}]}},"RunOn":"2018-04-16T05:30:21.7545392Z","RunDurationInMilliseconds":9393}