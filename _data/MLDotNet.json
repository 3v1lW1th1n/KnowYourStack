{"Data":{"GitHub":{"Issues":[{"Id":"397207791","IsPullRequest":false,"CreatedAt":"2019-01-09T04:30:42","Actor":"Anipik","Number":"2087","RawContent":null,"Title":"KmeansOnnxConversionTest failing on NetCoreApp3.0","State":"open","Body":"KmeansOnnxConversionTest is failing on NetCoreApp3.0\r\nThis happened after we changed the version of netcoreapp sdk to 3.0 preview1\r\nAssociated PR https://github.com/dotnet/machinelearning/pull/2082\r\n\r\nThis is not caused due to any change in cpumath library as it is even reproducable by using the software implementation of the functions.\r\n\r\ncc @eerhardt @danmosemsft @tannergooding ","Url":"https://github.com/dotnet/machinelearning/issues/2087","RelatedDescription":"Open issue \"KmeansOnnxConversionTest failing on NetCoreApp3.0\" (#2087)"},{"Id":"397178799","IsPullRequest":false,"CreatedAt":"2019-01-09T02:00:00","Actor":"singlis","Number":"2086","RawContent":null,"Title":"ValueMappingEstimator KeyType metadata maps to Key data and not to the Value data","State":"open","Body":"### Issue\r\nDiscovered while fixing #2083.\r\n\r\nWhen creating a ValueMappingEstimator with KeyTypes as the values, the generated KeyType does not covert back to the original value. This is demonstrated when appending a KeyToValueTransform to retrieve the original values using the following code:\r\n\r\n```\r\n            // Creating a list of keys that are based on the Education values\r\n            // These lists are created by hand for the demonstration, but the ValueMappingEstimator can take in any IEnumerables.\r\n            var educationKeys = new List<string>()\r\n            {\r\n                \"0-5yrs\",\r\n                \"6-11yrs\",\r\n                \"12+yrs\"\r\n            };\r\n\r\n            var educationValues = new List<string>()\r\n            {\r\n                \"Cat1\",\r\n                \"Cat2\", \r\n                \"Cat3\"\r\n            };\r\n\r\n            // Generate the estimator with the key type set as true. Even though are values are strings, this will\r\n            // create a key for each value. For this example, a KeyToValue Estimator is added to the ValueMapping Estimator to demonstrate the\r\n            // reverse lookup of the KeyType\r\n            var pipeline = new ValueMappingEstimator<string, string>(ml, educationKeys, educationValues, true, (\"Education\", \"EducationKeyType\"))\r\n                              .Append(new KeyToValueMappingEstimator(ml, (\"EducationKeyType\", \"EducationCategory\")));\r\n```\r\n\r\nThe expected results should be:\r\n```\r\nAge   Education   EducationCategory\r\n26      0-5yrs          Cat1\r\n42      0-5yrs          Cat1\r\n39      12+yrs          Cat3\r\n34      0-5yrs          Cat1\r\n35      6-11yrs         Cat2\r\n```\r\nThe actual results are:\r\n```\r\nAge     Education    EducationCategory\r\n26      0-5yrs          0-5yrs\r\n42      0-5yrs          0-5yrs\r\n39      12+yrs          12+yrs\r\n34      0-5yrs          0-5yrs\r\n35      6-11yrs         6-11yrs\r\n```\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2086","RelatedDescription":"Open issue \"ValueMappingEstimator KeyType metadata maps to Key data and not to the Value data\" (#2086)"},{"Id":"397178584","IsPullRequest":true,"CreatedAt":"2019-01-09T01:58:56","Actor":"jignparm","Number":"2085","RawContent":null,"Title":"[WIP] OnnxTransform Linux x64 support","State":"open","Body":"Add Linux support for  OnnxTransform.\r\n\r\nFixes #2056\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2085","RelatedDescription":"Open PR \"[WIP] OnnxTransform Linux x64 support\" (#2085)"},{"Id":"397178583","IsPullRequest":false,"CreatedAt":"2019-01-09T01:58:56","Actor":"daholste","Number":"2084","RawContent":null,"Title":"Cannot access leaf nodes of trained trees","State":"open","Body":"### Issue\r\n\r\n- **What did you do?**\r\nIn FastTreeTrainerBase, I see that 'TrainedEnsemble' is not a public attribute.\r\n\r\n- **What did you expect?**\r\nIt would be awesome and useful for us if we could access the trained trees here. Thanks!","Url":"https://github.com/dotnet/machinelearning/issues/2084","RelatedDescription":"Open issue \"Cannot access leaf nodes of trained trees\" (#2084)"},{"Id":"397159261","IsPullRequest":false,"CreatedAt":"2019-01-09T01:00:22","Actor":"singlis","Number":"2083","RawContent":null,"Title":"ValueMappingEstimator does not produce the correct output schema with metadata","State":"open","Body":"The ValueMappingEstimator when calling GetOutputSchema and setting the treatAsKeyTypes to true does not return an output schema that contains metadata. This is can be reproduced by creating a ValueMappingEstimator and appending with a KeyToValueMappingEstimator to do a reverse lookup of the KeyType to the original value. \r\n\r\nHere is the code snippet that reproduces the error:\r\n```\r\n            var pipeline = new ValueMappingEstimator<string, string>(ml, educationKeys, educationValues, true, (\"Education\", \"EducationKeyType\"))\r\n                              .Append(new KeyToValueMappingEstimator(ml, (\"EducationKeyType\", \"EducationCategory\")));\r\n```\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2083","RelatedDescription":"Open issue \"ValueMappingEstimator does not produce the correct output schema with metadata\" (#2083)"},{"Id":"397159234","IsPullRequest":true,"CreatedAt":"2019-01-09T01:00:15","Actor":"Anipik","Number":"2082","RawContent":null,"Title":"Using the latest Numeric vector apis","State":"open","Body":"- updates the dotnet sdk version 3.0 preview\r\n- modifies the cpumath apis to use new vector256 and vector 128 apis\r\n- corrects the software implementation of MatMulTrans\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2082","RelatedDescription":"Open PR \"Using the latest Numeric vector apis\" (#2082)"},{"Id":"397148034","IsPullRequest":true,"CreatedAt":"2019-01-09T00:05:14","Actor":"wschin","Number":"2081","RawContent":null,"Title":"Add Microsoft.ML as a dependency of Microsoft.ML.MatrixFactorization and rename Nuget Microsoft.ML.MatrixFactorization to Microsoft.ML.Recommender","State":"open","Body":"Fixes #2077.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2081","RelatedDescription":"Open PR \"Add Microsoft.ML as a dependency of Microsoft.ML.MatrixFactorization and rename Nuget Microsoft.ML.MatrixFactorization to Microsoft.ML.Recommender\" (#2081)"},{"Id":"396611261","IsPullRequest":true,"CreatedAt":"2019-01-08T23:35:12","Actor":"najeeb-kazmi","Number":"2058","RawContent":null,"Title":"MLContext.Data.ReadFromBinary to accept IMultiStreamSource rather than Stream","State":"closed","Body":"Fixes #2052 ","Url":"https://github.com/dotnet/machinelearning/pull/2058","RelatedDescription":"Closed or merged PR \"MLContext.Data.ReadFromBinary to accept IMultiStreamSource rather than Stream\" (#2058)"},{"Id":"397136913","IsPullRequest":true,"CreatedAt":"2019-01-08T23:19:05","Actor":"wschin","Number":"2080","RawContent":null,"Title":"Remove NoMetadataSchema and make its relatives not ISchema","State":"open","Body":"As title. This PR belongs to #1501.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2080","RelatedDescription":"Open PR \"Remove NoMetadataSchema and make its relatives not ISchema\" (#2080)"},{"Id":"397041239","IsPullRequest":true,"CreatedAt":"2019-01-08T23:06:42","Actor":"Anipik","Number":"2073","RawContent":null,"Title":"Added AggressiveInlining attribute to hashing and updating the sdk version for netcorapp 3.0","State":"closed","Body":"Related to https://github.com/dotnet/coreclr/issues/21583\r\n\r\nThere has been a 25 percent improvement in the HashVectorString benchmark. \r\nThe Time reduced from 34.61 to 26.16 for netcoreapp2.1\r\nThe Time reduced from 34.62 to 27 for netcoreapp3.0 preview\r\n\r\nNote - Earlier this test was showing regression(14%) on netcoreapp3.0 but doesnot seem like a  regression now\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2073","RelatedDescription":"Closed or merged PR \"Added AggressiveInlining attribute to hashing and updating the sdk version for netcorapp 3.0\" (#2073)"},{"Id":"397133345","IsPullRequest":false,"CreatedAt":"2019-01-08T23:05:31","Actor":"abgoswam","Number":"2079","RawContent":null,"Title":"Making IDataView TrainingData inside LearnerInputBase internal.","State":"open","Body":"One of the fields in the  `Arguments`  class  for `FastTree`  is `public IDataView TrainingData`\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/8cf259639cc3f77feec5d87db1a4e4429b5c9936/src/Microsoft.ML.Data/EntryPoints/InputBase.cs#L35-L40\r\n\r\nThis is currently being used by the Entrypoint infrastructure. We should consider making this field `internal`\r\n\r\nHowever, this needs to be done with caution. \r\n\r\nHere is explanation by @TomFinley : \r\n\r\n\" Anything relating to entry-points specifically should be internal, but we must do so carefully, since currently entry-points and command line processing relies on processing of fields which is currently done on public fields only, whereas it should be over public or internal fields. Once that is done, any fields that are relevant to entry-points only should be internal.\r\n\r\n(This is a problem for all the settings objects, that they are exposing things that should not be in the public API in some cases. (Indeed entry-points will need a lot of work to make them work for estimators and transformers. Estimator graphs are sort of a \"lightweight\" estimator chain as they stand right now that performs absolutely no validation. But for now, anything relating to entry-points should just be hidden.)\r\n\r\n@TomFinley @artidoro \r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2079","RelatedDescription":"Open issue \"Making IDataView TrainingData inside LearnerInputBase internal.\" (#2079)"},{"Id":"397126785","IsPullRequest":false,"CreatedAt":"2019-01-08T22:41:34","Actor":"CESARDELATORRE","Number":"2078","RawContent":null,"Title":"API to identify colinearity (high-correlation between attributes/features/input-variables)","State":"open","Body":"Related to model explainability features and feature or input variable selection in general, if would be good to have any API to identify colinearity (high correlation between attributes/features/input-variables).\r\n\r\nColinearity in the input variables can make choosing the correct attributes/input-variables to use more difficult, especially in linear models.\r\n\r\nThis issue is also related to the more general issue: https://github.com/dotnet/machinelearning/issues/749\r\nBut this issue focuses on a particular feature which is \"colinearity detection\".\r\n\r\nIn short, collinearity:\r\n\r\n- Can make choosing the correct predictors to include more difficult.\r\n- Interferes in determining the precise effect of each predictor, but...\r\n- BUT, it doesn’t affect the overall fit of the model or produce bad predictions.\r\n\r\nDepending on your goals, multicollinearity isn’t always a problem. However, because of the difficulty in choosing the correct model when severe multicollinearity is present, it’s always worth exploring.\r\n\r\nThis feature is not critical for our current major release (v1.0) that we are currently stabilizing, but should be taken into account for future releases.","Url":"https://github.com/dotnet/machinelearning/issues/2078","RelatedDescription":"Open issue \"API to identify colinearity (high-correlation between attributes/features/input-variables)\" (#2078)"},{"Id":"397089290","IsPullRequest":false,"CreatedAt":"2019-01-08T21:17:00","Actor":"eerhardt","Number":"2077","RawContent":null,"Title":"MatrixFactorization nuget package should have a dependency on Microsoft.ML","State":"open","Body":"Since the `Microsoft.ML.Recommender.dll` library references types from the core NuGet package (`Microsoft.ML`), the `Microsoft.ML.MatrixFactorization` needs to have a dependency on `Microsoft.ML`.\r\n\r\nTo fix this, add a ProjectReference in \r\n\r\nhttps://github.com/dotnet/machinelearning/blob/master/pkg/Microsoft.ML.MatrixFactorization/Microsoft.ML.MatrixFactorization.nupkgproj\r\n\r\nSee this for an example:\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/8cf259639cc3f77feec5d87db1a4e4429b5c9936/pkg/Microsoft.ML.Parquet/Microsoft.ML.Parquet.nupkgproj#L9\r\n\r\nAlso, while we are in here - we should synchronize the names between the NuGet package and the assembly. It is super confusing that the assembly is named `Microsoft.ML.Recommender` and the package is named `Microsoft.ML.MatrixFactorization`.\r\n\r\n/cc @wschin ","Url":"https://github.com/dotnet/machinelearning/issues/2077","RelatedDescription":"Open issue \"MatrixFactorization nuget package should have a dependency on Microsoft.ML\" (#2077)"},{"Id":"396746235","IsPullRequest":true,"CreatedAt":"2019-01-08T20:26:09","Actor":"shauheen","Number":"2067","RawContent":null,"Title":"Update release for 0.9","State":"closed","Body":"This updates the release branch for 0.9","Url":"https://github.com/dotnet/machinelearning/pull/2067","RelatedDescription":"Closed or merged PR \"Update release for 0.9\" (#2067)"},{"Id":"397052535","IsPullRequest":true,"CreatedAt":"2019-01-08T19:51:34","Actor":"TomFinley","Number":"2076","RawContent":null,"Title":"New ML.NET statically typed pipeline Nuget.","State":"closed","Body":"Fixes #2072.","Url":"https://github.com/dotnet/machinelearning/pull/2076","RelatedDescription":"Closed or merged PR \"New ML.NET statically typed pipeline Nuget.\" (#2076)"},{"Id":"397028918","IsPullRequest":false,"CreatedAt":"2019-01-08T19:51:34","Actor":"TomFinley","Number":"2072","RawContent":null,"Title":"Add static APIs to a new nuget package","State":"closed","Body":"In #1930 we introduced new static assemblies. Yeah! But then we forgot to add the new assemblies to any nuget package. Whoops. Which means they're effectively unshipped.\r\n\r\nThe ultimate solution should be that there are separate nugets for the static API. However, until that happens and we decide what shape those nugets would take, for the sake of the v0.9 we should maintain the status quo, which was that the new projects introduced in #1930 are shipped with their old assemblies.\r\n\r\n/cc @eerhardt @shauheen ","Url":"https://github.com/dotnet/machinelearning/issues/2072","RelatedDescription":"Closed issue \"Add static APIs to a new nuget package\" (#2072)"},{"Id":"397046119","IsPullRequest":false,"CreatedAt":"2019-01-08T19:12:06","Actor":"codemzs","Number":"2075","RawContent":null,"Title":"Move public facing classes used in Samples into appropriate namespaces.","State":"open","Body":"As part of the grand rename of namespaces, let's finalize the set of namespaces of public-facing components.\r\n\r\n| Class/Interface/Enum/Delegate                           | Current Namespace      | New Namespace                                                 | Current Path                                                              |\r\n|---------------------------------------------------------|------------------------|---------------------------------------------------------------|---------------------------------------------------------------------------|\r\n| TransformerScope                                        | Microsoft.ML.Data      | Microsoft.ML                                                  | E:\\machinelearning\\src\\Microsoft.ML.Data\\DataLoadSave\\TransformerChain.cs |\r\n| ITransformerChainAccessor                               | Microsoft.ML.Data      | Microsoft.ML                                                  | E:\\machinelearning\\src\\Microsoft.ML.Data\\DataLoadSave\\TransformerChain.cs |\r\n| TransformerChain                                        | Microsoft.ML.Data      | Microsoft.ML                                                  | E:\\machinelearning\\src\\Microsoft.ML.Data\\DataLoadSave\\TransformerChain.cs |\r\n| IDataView                                               | Microsoft.ML.Data      | Microsoft.ML                                                  | E:\\machinelearning\\src\\Microsoft.ML.Core\\Data\\IDataView.cs                |\r\n| ISchema                                                 | Microsoft.ML.Data      | ?                                                             | E:\\machinelearning\\src\\Microsoft.ML.Core\\Data\\IDataView.cs                |\r\n| delegate void ValueGetter<TValue>(ref TValue value);    | Microsoft.ML.Data      | ?                                                             | E:\\machinelearning\\src\\Microsoft.ML.Core\\Data\\IDataView.cs                |\r\n| abstract class Row                                      | Microsoft.ML.Data      | ?                                                             | E:\\machinelearning\\src\\Microsoft.ML.Core\\Data\\IDataView.cs                |\r\n| CursorState                                             | Microsoft.ML.Data      | ?                                                             | E:\\machinelearning\\src\\Microsoft.ML.Core\\Data\\IDataView.cs                |\r\n| abstract class RowCursor                                | Microsoft.ML.Data      | ?                                                             | E:\\machinelearning\\src\\Microsoft.ML.Core\\Data\\IDataView.cs                |\r\n| interface IRowReadableAs<TRow>                          | Microsoft.ML.Data      | ?                                                             | E:\\machinelearning\\src\\Microsoft.ML.Data\\DataView\\TypedCursor.cs          |\r\n| class RowCursor<TRow>                                   | Microsoft.ML.Data      | ?                                                             | E:\\machinelearning\\src\\Microsoft.ML.Data\\DataView\\TypedCursor.cs          |\r\n| interface ICursorable<TRow>                             | Microsoft.ML.Data      | ?                                                             | E:\\machinelearning\\src\\Microsoft.ML.Data\\DataView\\TypedCursor.cs          |\r\n| class TypedCursorable<TRow>                             | Microsoft.ML.Data      | ?                                                             | E:\\machinelearning\\src\\Microsoft.ML.Data\\DataView\\TypedCursor.cs          |\r\n| static class CursoringUtils                             | Microsoft.ML.Data      | ?                                                             | E:\\machinelearning\\src\\Microsoft.ML.Data\\DataView\\TypedCursor.cs          |\r\n| MultiFileSource                                         | Microsoft.ML.Data      | ?                                                             | E:\\machinelearning\\src\\Microsoft.ML.Data\\DataLoadSave\\MultiFileSource.cs  |\r\n| VBuffer<T>                                              | Microsoft.ML.Data      | ?                                                             | E:\\machinelearning\\src\\Microsoft.ML.Core\\Data\\VBuffer.cs                  |\r\n| BinaryPredictionTransformer<TModel>                     | Microsoft.ML.Data      | Make a catalog entry in ML namespace? Or move to ML namespace | E:\\machinelearning\\src\\Microsoft.ML.Data\\Scorers\\PredictionTransformer.cs |\r\n| PredictionTransformerBase<TModel, TScorer>              | Microsoft.ML.Data      | Make a catalog entry in ML namespace? Or move to ML namespace | E:\\machinelearning\\src\\Microsoft.ML.Data\\Scorers\\PredictionTransformer.cs |\r\n| SingleFeaturePredictionTransformerBase<TModel, TScorer> | Microsoft.ML.Data      | Make a catalog entry in ML namespace? Or move to ML namespace | E:\\machinelearning\\src\\Microsoft.ML.Data\\Scorers\\PredictionTransformer.cs |\r\n| AnomalyPredictionTransformer<TModel>                    | Microsoft.ML.Data      | Make a catalog entry in ML namespace? Or move to ML namespace | E:\\machinelearning\\src\\Microsoft.ML.Data\\Scorers\\PredictionTransformer.cs |\r\n| MulticlassPredictionTransformer<TModel>                 | Microsoft.ML.Data      | Make a catalog entry in ML namespace? Or move to ML namespace | E:\\machinelearning\\src\\Microsoft.ML.Data\\Scorers\\PredictionTransformer.cs |\r\n| RegressionPredictionTransformer<TModel>                 | Microsoft.ML.Data      | Make a catalog entry in ML namespace? Or move to ML namespace | E:\\machinelearning\\src\\Microsoft.ML.Data\\Scorers\\PredictionTransformer.cs |\r\n| RankingPredictionTransformer<TModel>                    | Microsoft.ML.Data      | Make a catalog entry in ML namespace? Or move to ML namespace | E:\\machinelearning\\src\\Microsoft.ML.Data\\Scorers\\PredictionTransformer.cs |\r\n| interface Itransformer                                  | Microsoft.ML.Core.Data | ?                                                             | E:\\machinelearning\\src\\Microsoft.ML.Core\\Data\\IEstimator.cs               |\r\n| interface IEstimator<out TTransformer>                  | Microsoft.ML.Core.Data | ?                                                             | E:\\machinelearning\\src\\Microsoft.ML.Core\\Data\\IEstimator.cs               |\r\n| interface IDataReaderEstimator<in TSource, out TReader> | Microsoft.ML.Core.Data | ?                                                             | E:\\machinelearning\\src\\Microsoft.ML.Core\\Data\\IEstimator.cs               |\r\n| interface IDataReader<in TSource>                       | Microsoft.ML.Core.Data | ?                                                             | E:\\machinelearning\\src\\Microsoft.ML.Core\\Data\\IEstimator.cs               |\r\n| class SchemaShape                                       | Microsoft.ML.Core.Data | ?                                                             | E:\\machinelearning\\src\\Microsoft.ML.Core\\Data\\IEstimator.cs               |\r\n| RoleMappedData                                          | Microsoft.ML.Data      | ?                                                             | E:\\machinelearning\\src\\Microsoft.ML.Core\\Data\\RoleMappedSchema.cs         |\r\n| RoleMappedSchema                                        | Microsoft.ML.Data      | ?                                                             | E:\\machinelearning\\src\\Microsoft.ML.Core\\Data\\RoleMappedSchema.cs         |\r\n| ColumnCursorExtensions                                  | Microsoft.ML.Data      | ?                                                             | E:\\machinelearning\\src\\Microsoft.ML.Data\\Utilities\\ColumnCursor.cs        |\r\n\r\nCC: @TomFinley ","Url":"https://github.com/dotnet/machinelearning/issues/2075","RelatedDescription":"Open issue \"Move public facing classes used in Samples into appropriate namespaces.\" (#2075)"},{"Id":"397042782","IsPullRequest":false,"CreatedAt":"2019-01-08T19:02:38","Actor":"justinormont","Number":"2074","RawContent":null,"Title":"Roadmap needs updating","State":"open","Body":"Our [READMAP.md](https://github.com/dotnet/machinelearning/blob/master/ROADMAP.md) has gotten rather out-of-date. \r\n\r\nThe current roadmap should reflect the progress we made.\r\n\r\nIt may also be helpful to have a CHANGELOG.md at the root folder which links to each of the detailed [release notes](https://github.com/dotnet/machinelearning/tree/master/docs/release-notes), and provides a few-line summary in a unified location. Currently it would be difficult to scroll though the releases for the last few months (which is overly optimistic for how often I update packages). There is a [releases tab](https://github.com/dotnet/machinelearning/releases) for GitHub, which is very similar, though I'm uncertain if this content is under version control which would cause it (possibly) not follow forks.","Url":"https://github.com/dotnet/machinelearning/issues/2074","RelatedDescription":"Open issue \"Roadmap needs updating\" (#2074)"},{"Id":"397026726","IsPullRequest":true,"CreatedAt":"2019-01-08T18:19:13","Actor":"wschin","Number":"2071","RawContent":null,"Title":"Remove ISchema in HeaderSchema","State":"open","Body":"Another step to the end of ISchema. This PR belongs to #1501.","Url":"https://github.com/dotnet/machinelearning/pull/2071","RelatedDescription":"Open PR \"Remove ISchema in HeaderSchema\" (#2071)"},{"Id":"397020025","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:02","Actor":"Ivanidzo4ka","Number":"2070","RawContent":null,"Title":"Binary ensemble score and prediction column relationship","State":"open","Body":"So let's say I'm using WeightedAverage ensemble of two binary classification learners.\r\nEach learner will produce Score and Probability column.\r\n\r\nSince it's a weightedAvaerage we will learn weights for each learner let's say A and B. \r\nResulted Score value would be (A*ScoreA + B*ScoreB)/2.\r\nFor probability column we just take median so Resulted probability  = (ProbA+ProbB)/2.\r\nI'm not quite sure why we decide to calculate probability this way for all binary Ensembles (no matter is it average, min, max).\r\n\r\nIn all other binary learners Probability and score is related to each other via calibrator. So there is a function of score which produce probability, in case of ensemble it's not and I find it bit confusing.","Url":"https://github.com/dotnet/machinelearning/issues/2070","RelatedDescription":"Open issue \"Binary ensemble score and prediction column relationship\" (#2070)"},{"Id":"396998931","IsPullRequest":false,"CreatedAt":"2019-01-08T17:01:57","Actor":"wschin","Number":"2069","RawContent":null,"Title":"Some functions are not used in HeaderSchema.cs","State":"open","Body":"As title. In class\r\n```\r\n    [BestFriend]\r\n    internal abstract class FeatureNameCollection : IEnumerable<string>\r\n```\r\nthose functions\r\n```       \r\n        private FeatureNameCollection()\r\n        {\r\n        }\r\n\r\n        public static FeatureNameCollection Create(string[] names)\r\n        {\r\n            return Create(Utils.Size(names), names);\r\n        }\r\n\r\n        public static FeatureNameCollection Create(RoleMappedSchema schema)\r\n        {\r\n            …\r\n        }\r\n\r\n        public static void Save(ModelSaveContext ctx, in VBuffer<ReadOnlyMemory<char>> names)\r\n        {\r\n            …\r\n        }\r\n\r\n        public bool TryLookup(string name, out int index)\r\n        {\r\n            …\r\n        }     \r\n```\r\nare not used.","Url":"https://github.com/dotnet/machinelearning/issues/2069","RelatedDescription":"Open issue \"Some functions are not used in HeaderSchema.cs\" (#2069)"},{"Id":"396782168","IsPullRequest":false,"CreatedAt":"2019-01-08T07:33:46","Actor":"stunax","Number":"2068","RawContent":null,"Title":"Word embedding output dimensions","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: windows 64bit 10.0.17134\r\n- **.NET Version (eg., dotnet --info)**: 2.1.502\r\n\r\n### Issue\r\nI am having trouble understanding the output of the WordEmbeddings function. Using a model with 50 dimensionality output, I would expect the embedding dimensions to match that output in some way. It only just multiplies the expected output dimension by 3.\r\n\r\nI have checked the model files, and they have the correct output for each word for each model.\r\n\r\n- **What did you do?** \r\nCreated wordEmbedding using several different preprocessed models. Both default and downloaded elsewhere\r\n- **What happened?**\r\nFor GloVe50D the output dimensions were 150.\r\nFor FastTextWikipedia300D the output was 900\r\n- **What did you expect?**\r\nI expected the output to match the embedding size in the models.\r\nFor GloVe50D to output dimensions 50 * input size, or [inputsize][50].\r\nFor FastTextWikipedia300D to output dimensions 300 * input size, or [inputsize][300].\r\n\r\n### Source code / logs\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n\r\nThis code illustrates my issue. I would assume the output to be of variable size, but all outputs have dimensionality of 150, which I have trouble grasping. I have tried forcing the output to a variable vector output but it changes nothing.\r\n\r\nWhat worries me most, is what happens, when the input is a single word sentence, as I can not fathom or figure out what the extra 100 values are.\r\n\r\n```\r\n\r\nusing System;\r\nusing System.Linq;\r\nusing Microsoft.ML;\r\nusing Microsoft.ML.Runtime.Api;\r\nusing Microsoft.ML.Runtime.Data;\r\nusing Microsoft.ML.StaticPipe;\r\nusing Microsoft.ML.Transforms.Text;\r\n\r\nnamespace ConsoleApp1\r\n{\r\n    class DataEntry\r\n    {\r\n        public DataEntry(string message, int label)\r\n        {\r\n            Message = message;\r\n            Label = label;\r\n        }\r\n        public string Message { get; set; }\r\n        public int Label { get; set; }\r\n    }\r\n\r\n    class ModelOutput\r\n    {\r\n        public int Label;\r\n        public float[] Embedding;\r\n    }\r\n\r\n    class Program\r\n    {\r\n        private static MLContext mLContext = new MLContext();\r\n        private static PredictionFunction<DataEntry, ModelOutput> wordEmbedder;\r\n\r\n        static void Main()\r\n        {\r\n            var dataEntries = new[]\r\n            {\r\n                \"I am a horse\",\r\n                \"cow\",\r\n                \"The cat is norse\",\r\n                \"Don't ask me how\",\r\n                \"This is a sentence that is very long, and should have a different dimension than the other ones?\"\r\n            };\r\n            var labels = dataEntries.Select((_, i) => i).ToArray();\r\n\r\n            TokenizeData(dataEntries, labels, out  var data);\r\n            \r\n            Console.WriteLine($\"{data.Length} {data[0].Length}\");\r\n            foreach (var d in data)\r\n            {\r\n                Console.WriteLine($\"{d.Length}\");\r\n            }\r\n\r\n            Console.Read();\r\n        }\r\n        \r\n\r\n        private static void TokenizeData(string[] dataEntries, int[] labels, out double[][] dataVectors)\r\n        {\r\n            var dataEnum = dataEntries.Select((s, i) => new DataEntry(s, labels[i])).ToArray();\r\n            var reader = mLContext.CreateDataView(dataEnum).AssertStatic(\r\n                mLContext, c =>\r\n                (\r\n                    Message: c.Text.Scalar,\r\n                    Label: c.I4.Scalar));\r\n\r\n            // Inspect the message texts that are read from the file.\r\n            var pipeline = reader.MakeNewEstimator()\r\n                    .Append(r => (\r\n                        LabelMid: r.Label,\r\n                        Embedding: r.Message\r\n                            .NormalizeText()\r\n                            .TokenizeText()\r\n                            .RemoveStopwords()\r\n                            .WordEmbeddings(\r\n                                WordEmbeddingsExtractingTransformer\r\n                                    .PretrainedModelKind\r\n                                    .GloVe50D)\r\n                    ))\r\n                ;\r\n\r\n            var modelFit = pipeline.Fit(reader);\r\n\r\n            wordEmbedder = modelFit.AsDynamic.MakePredictionFunction<DataEntry, ModelOutput>(mLContext);\r\n\r\n            dataVectors = dataEntries.Select((s, i) => NameToTfVector(s, labels[i])).ToArray();\r\n        }\r\n        \r\n        private static double[] SentenceFromWordEmbedding(ModelOutput embedding)\r\n        {\r\n            return embedding.Embedding.Select(f => (double) f).ToArray();\r\n        }\r\n\r\n        private static double[] NameToTfVector(string inputText, int label)\r\n        {\r\n            return SentenceFromWordEmbedding(wordEmbedder.Predict(new DataEntry(inputText, label)));\r\n        }\r\n    }\r\n}\r\n```\r\nOutput:\r\n`5 150\r\n150\r\n150\r\n150\r\n150\r\n150`","Url":"https://github.com/dotnet/machinelearning/issues/2068","RelatedDescription":"Open issue \"Word embedding output dimensions\" (#2068)"},{"Id":"396682069","IsPullRequest":true,"CreatedAt":"2019-01-08T04:10:42","Actor":"shauheen","Number":"2061","RawContent":null,"Title":"Add release notes for ML.NET 0.9","State":"closed","Body":"This adds release notes for 0.9","Url":"https://github.com/dotnet/machinelearning/pull/2061","RelatedDescription":"Closed or merged PR \"Add release notes for ML.NET 0.9\" (#2061)"},{"Id":"396657997","IsPullRequest":true,"CreatedAt":"2019-01-08T02:40:15","Actor":"wschin","Number":"2060","RawContent":null,"Title":"Remove ISchema in GroupTransform","State":"closed","Body":"Another ISchema implementation is going to leave. This PR is part of #1501.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2060","RelatedDescription":"Closed or merged PR \"Remove ISchema in GroupTransform\" (#2060)"},{"Id":"396696988","IsPullRequest":true,"CreatedAt":"2019-01-08T01:31:28","Actor":"yaeldekel","Number":"2065","RawContent":null,"Title":"Change CheckSamePipeline method from private to internal","State":"closed","Body":"Related to #2036. Missed one method that is needed in the internal repo.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2065","RelatedDescription":"Closed or merged PR \"Change CheckSamePipeline method from private to internal\" (#2065)"},{"Id":"396712891","IsPullRequest":true,"CreatedAt":"2019-01-08T01:17:29","Actor":"wschin","Number":"2066","RawContent":null,"Title":"Remove ISchema in UngroupTransform","State":"open","Body":"Remove ISchema in UngroupTransform. It's a part of #1501.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2066","RelatedDescription":"Open PR \"Remove ISchema in UngroupTransform\" (#2066)"},{"Id":"396691593","IsPullRequest":false,"CreatedAt":"2019-01-07T23:33:02","Actor":"TomFinley","Number":"2064","RawContent":null,"Title":"Estimator arguments should take output column name as first parameter, any inputs as subsequent parameters","State":"open","Body":"So, a somewhat embarrassing blunder to report... not quite sure how to say this.\r\n\r\nThroughout our codebase, for years we've ***always*** specified the name of the output column of a transform first, *then* the source(s).\r\n\r\nThat's good. But when estimators were introduced, somehow, nearly all of them were introduced in the reverse order: nearly all of them specify the inputs, *then* the outputs. This was probably an unconscious mistake, but it's one with fairly wide consequences, since that mistaken pattern was copied again and again as people did the estimator conversion work, to the point where most (not all!) estimators are now inconsistent with the whole rest of the codebase!\r\n\r\nThis should be corrected: it is at least inconsistent, and even if not inconsistent actually rather obnoxious practically because specifying the name of the output first has practical benefits, and makes a lot more sense, since if you're specifying a transformation the *most* important information someone will want to know is what you're calling your output!\r\n\r\n# The Story Until a Few Months Ago\r\n\r\nSo, throughout our codebase, for years, it has been our practice that when specifying a transform, you specify the name of the output, *then* you specify the name of the input(s) (if any). The reason for this is practical: the outputs are usually the result of a well defined single calculation (the application of the transform), whereas what is taken as an \"input\" to a transform can have various meanings since it is sometimes a multivariate function in its *inputs* more often than in its *outputs*. (E.g., concatenate can have multiple inputs, text can have multiple inputs, MI feature selection takes multiple heterogeneous inputs, but all produce single output columns.)\r\n\r\nThis was our practice certainly when this code was a tool, as we see in the command line help string, specifying name *then* source.\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/bb46fdf405828134de9feebce74f21b4aacb15ed/src/Microsoft.ML.Data/Transforms/ColumnCopying.cs#L109-L110\r\n\r\nThis trend continued during our initial attempts at an API, as seen in this [early discussion in PR 405](https://github.com/dotnet/machinelearning/pull/405#discussion_r197980521), and as seen here:\r\n\r\nhttps://github.com/zeahmed/machinelearning/blob/16f7883933b56f8fd86077bf0fd262b24374e9d0/src/Microsoft.ML.Data/Transforms/ConvertTransform.cs#L116\r\n\r\nand here\r\n\r\nhttps://github.com/zeahmed/machinelearning/blob/16f7883933b56f8fd86077bf0fd262b24374e9d0/src/Microsoft.ML.Data/Transforms/DropSlotsTransform.cs#L226\r\n\r\nand numerous other places.\r\n\r\nThis is done for the practical reason that, when a transform produces an\r\noutput, what outputs it has are usually finite and well defined, whereas it can take multiple examles. The most conspicuous and widely used example of this is\r\nthe concatenation transform. Also included are things like the text featurizing transform, and other such things.\r\n\r\nSo far so good...\r\n\r\n# But Then...\r\n\r\nNow, somehow, through some mechanism that wasn't quite clear to me, as `IEstimator` implementations are being created, someone commits a fateful mistake of *reversing* inputs and outputs. Suddenly instead of being typically parameterized as `name` and a sometimes optional `source`, we instead have the required `input` and a sometimes optional `output`. What a disaster! And, I did not catch it in review. An early example:\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/c8de311476eb04dd4c8be1ad5b898487d66c9ef5/src/Microsoft.ML.Transforms/Text/TextTransform.cs#L278-L279\r\n\r\nThen, as people use this as a template for their own estimator conversion work, nearly *all* estimators copied this mistake, until practically all estimators had this problem. This includes much of the extensions.\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/d9270c9c42da70817e8a71e39a069d2339f6972d/src/Microsoft.ML.Data/Transforms/ExtensionsCatalog.cs#L30-L31\r\n\r\nNow then, the reason why I know any of this is that @stephentoub wrote and says, \"hey, how come you have your column concatenation operation specify output *then* inputs? That's different from everywhere else! I know it's less convenient, but it's better to be consistent.\"\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/d9270c9c42da70817e8a71e39a069d2339f6972d/src/Microsoft.ML.Data/Transforms/ExtensionsCatalog.cs#L39\r\n\r\nAnd, after thinking that he must be very confused, since again, the pattern of name *then* source being very, very well defined throughout the codebase, I look and find **he is absolutely correct**, and a thoroughly massive blunder had somehow made it throughout the entire codebase under our very noses, including it must be said mine. :) :)\r\n\r\nSo, this is bad, but happily this was caught before v1. But, needless to say this must be fixed immediately.","Url":"https://github.com/dotnet/machinelearning/issues/2064","RelatedDescription":"Open issue \"Estimator arguments should take output column name as first parameter, any inputs as subsequent parameters\" (#2064)"},{"Id":"396685323","IsPullRequest":false,"CreatedAt":"2019-01-07T23:05:48","Actor":"montebhoover","Number":"2063","RawContent":null,"Title":"How should EntryPoint consumers register ML.NET assemblies?","State":"open","Body":"@eerhardt,  when we made HostEnvironmentBase and ComponentCatalog internal you mentioned that EntryPoint consumers like NimbusML or the GUI should be responsible for registering their ML.NET assemblies:\r\n\r\n>[2. ...\r\n>3. Other subsystems (like the GUI, command-line, Entry Points, and model loading) will be responsible for registering the components they require in the manner they require.\r\n>4. ...](https://github.com/dotnet/machinelearning/issues/208#issuecomment-422136134)\r\n\r\nCould you give me some pointers on how to best go about that?  Currently NimbusML registers assemblies using the ComponentCatalog from when it was public and we need to update this to ML.NET 0.9:  https://github.com/Microsoft/NimbusML/blob/e1004720ec0c252ba87f02c190c33739d9c00f20/src/DotNetBridge/Bridge.cs#L314\r\n\r\ncc: @TomFinley @yaeldekel @shmoradims \r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2063","RelatedDescription":"Open issue \"How should EntryPoint consumers register ML.NET assemblies?\" (#2063)"},{"Id":"396684412","IsPullRequest":false,"CreatedAt":"2019-01-07T23:02:10","Actor":"shmoradims","Number":"2062","RawContent":null,"Title":"Fixing NimbusML GraphRunner","State":"open","Body":"ML.NET changes below are causing NimbusML GraphRunner to break. @TomFinley, @yaeldekel  could you please advise how to best fix these?\r\n\r\n1. [GraphRunner.GetPortDataKind](https://github.com/dotnet/machinelearning/blob/0c62e30b4d9eabb60322b2a3e75bc90e20007889/src/Microsoft.ML.EntryPoints/JsonUtils/GraphRunner.cs#L142) is made internal and inaccessible. [Nimbus usage](https://github.com/Microsoft/NimbusML/blob/80ce48f0505eba1564dafd2dfd249905ee7b6143/src/DotNetBridge/RunGraph.cs#L134). Also TlcModule.DataKind is made internal and inaccessible. \r\n\r\n2. Cannot load PredictorModel from file using constructor, because the class has become abstract. [Nimbus usage](https://github.com/Microsoft/NimbusML/blob/80ce48f0505eba1564dafd2dfd249905ee7b6143/src/DotNetBridge/RunGraph.cs#L170).\r\n\r\n3. PredictorModel.Save is made internal and inaccessible.  [Nimbus usage](https://github.com/Microsoft/NimbusML/blob/80ce48f0505eba1564dafd2dfd249905ee7b6143/src/DotNetBridge/RunGraph.cs#L85).\r\n\r\n4. Both 2 & 3 also apply to 2 TransformModel.\r\n\r\n5. #1958 (being discussed separately in that issue)","Url":"https://github.com/dotnet/machinelearning/issues/2062","RelatedDescription":"Open issue \"Fixing NimbusML GraphRunner\" (#2062)"},{"Id":"396631608","IsPullRequest":true,"CreatedAt":"2019-01-07T20:09:48","Actor":"mareklinka","Number":"2059","RawContent":null,"Title":"[WIP] Make TextLoader.ArgumentsCore.Separator internal","State":"open","Body":"Since `TextLoader.ArgumentsCore.Separator` is only used for the command line interface, #2041 aims to make the field internal so that it doesn't show for API users. In order to facilitate this hiding, the `CmdParser.GetArgumentInfo` had to be updated to reflect on both public and private fields of the provided type.\r\n\r\nAt the same time, the API-serving `SeparatorChars` field was renamed to simply `Separators`.\r\n\r\nWork in progress. More fields might be turned `internal`, depending on discussion in the issue.\r\n\r\nFixes #2041","Url":"https://github.com/dotnet/machinelearning/pull/2059","RelatedDescription":"Open PR \"[WIP] Make TextLoader.ArgumentsCore.Separator internal\" (#2059)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-01-09T05:30:52.1924428Z","RunDurationInMilliseconds":555}