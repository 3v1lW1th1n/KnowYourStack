{"Data":{"Blog":{"FeedItems":[{"Title":"Xamarin.Forms 3.6: Visual Has Materialized","PublishedOn":"2019-03-06T20:12:09+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We’re pleased to announce the release of Xamarin.Forms 3.6 in the usual cadence of our regular releases. In addition to the usual enhancements and bug fixes, we’re also moving our Visual feature from...","Href":"https://blog.xamarin.com/xamarin-forms-3-6-visual-has-materialized/","RawContent":null},{"Title":"Best Practices and Tips for Using Xamarin.UITest","PublishedOn":"2019-03-04T19:35:49+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We can all agree that it is very important for mobile apps to have great user interfaces, be accessible, and be extremely performant. Given the plethora of devices with different screen sizes, screen...","Href":"https://blog.xamarin.com/best-practices-tips-xamarin-uitest/","RawContent":null},{"Title":"Developer Community Events in March","PublishedOn":"2019-03-01T17:59:05+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"User groups are getting together to learn about new, exciting releases and tooling to help jumpstart their next mobile development project. Network with your local community and you too could get all...","Href":"https://blog.xamarin.com/developer-community-events-in-march/","RawContent":null},{"Title":"View PDF Files within Your Xamarin.Forms Apps Using the Syncfusion PDF Viewer","PublishedOn":"2019-02-28T17:04:29+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This post was guest authored and contributed by Suresh Mohan. Suresh is the Product Manager for PDF Viewer at Syncfusion Software where he specializes in desktop and mobile app development. &#160;...","Href":"https://blog.xamarin.com/xamarin-forms-apps-syncfusion-pdf-viewer/","RawContent":null},{"Title":"Quick Tip: Debugging Local ASP.NET Core Web APIs on Android Emulators","PublishedOn":"2019-02-25T19:36:04+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"When developing mobile applications with a web API backend there is always a need to debug locally on your development machine. If you are using Visual Studio for Mac and debugging iOS applications...","Href":"https://blog.xamarin.com/debug-local-asp-net-core-web-apis-android-emulators/","RawContent":null},{"Title":"Xamarin and Azure Office Hours Recap from December 2018 and January 2019","PublishedOn":"2019-02-21T18:11:51+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"That&#8217;s right, I ❤️ every single one of you(!) and I want to know more about your stories building mobile apps. I want to hear stories of your successes and also, the not-so-successful...","Href":"https://blog.xamarin.com/xamarin-azure-office-hours-recap-december-january/","RawContent":null},{"Title":"Persisting Settings and Preferences in Mobile Apps with Xamarin.Essentials","PublishedOn":"2019-02-19T19:56:32+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"An essential part of any mobile application is the ability to persist data. Sometimes that is a large amount of data that requires a database, but often it is smaller pieces of data such as settings...","Href":"https://blog.xamarin.com/persisting-settings-preferences-mobile-apps-xamarin-essentials/","RawContent":null},{"Title":"Xamarin Developer Blog is Getting an Update!","PublishedOn":"2019-02-15T18:56:04+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In the coming weeks, the Xamarin Developer Blog will be migrating to a new platform with a modern, clean design and powerful features that will make it easy for you to discover and share great...","Href":"https://blog.xamarin.com/xamarin-developer-blog-is-getting-an-update/","RawContent":null},{"Title":"Visual Studio Mobile Developer Podcast: Releases, Previews, and Roadmaps!","PublishedOn":"2019-02-13T19:56:28+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The Visual Studio Mobile Developer Podcast features Matt Soucoup and James Montemagno discussing the latest and greatest in mobile and cloud development. In this episode, we discuss the best of...","Href":"https://blog.xamarin.com/podcast-releases-previews-roadmaps/","RawContent":null},{"Title":"Easily Check Mobile Device Connectivity with Xamarin.Essentials","PublishedOn":"2019-02-12T19:06:36+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"One of the best parts of a mobile device is their instant access to the internet. As a mobile app developer, it&#8217;s great to be able to pull data from the server to our apps to provide users with...","Href":"https://blog.xamarin.com/easily-check-mobile-device-connectivity-with-xamarin-essentials/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"9194271357","Type":"PullRequestEvent","CreatedAt":"2019-03-06T21:58:08","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2796","RelatedDescription":"Merged pull request \"Revert \"[BootstrapTasks] use libZipSharp in <UnzipDirectoryChildren/>…\" (#2796) at xamarin/xamarin-android","RelatedBody":"… (#2750)\"\r\n\r\nThis reverts commit e84e502e32b7a88f3cfd46a0b3bd6bcbb5f8fba4.\r\n\r\nWhile LibZipSharp gives us better performance, we have a chicken-and-egg problem:\r\nin order to work LibZipSharp needs the native `libzip` library but it has to\r\nbe built by XA before we can use it. This creates a problem when bootstrapping\r\nXA either on a completely clean machine (i.e. without `~/android-toolchain`) or\r\nwhen updating one of the Android SDK/NDK components required for build. In such\r\ninstance `make prepare` will fail because `libzip` needs to be built using\r\n`cmake` which isn't yet installed and so the preparation step fails.\r\n\r\nRevert this commit in order to get the old behavior back until we can fix the\r\noriginal problem fixed by e84e502e32b7a88f3cfd46a0b3bd6bcbb5f8fba4 in a way that\r\ndoesn't create the above problems."},{"Id":"9192753930","Type":"PullRequestEvent","CreatedAt":"2019-03-06T17:58:10","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2798","RelatedDescription":"Opened pull request \"[mono-runtimes] `make` output is of Low importance\" (#2798) at xamarin/xamarin-android","RelatedBody":"Context: https://github.com/xamarin/xamarin-android/pull/2790\r\nContext: https://jenkins.mono-project.com/view/Xamarin.Android/job/xamarin-android-pr-builder-release/1001/\r\n\r\nMono bumps are expected to be time consuming.  They can also be\r\nexpected to produce *lots* of build log output.\r\n\r\nWhat's unexpected is the *vast size* of the build logs: a \"normal\" PR\r\nbuild log is usually ~20-30MB in size.  Add in a complete mono bump,\r\nand the build log becomes 1.4GB.\r\n\r\nTake a page out of commit 987a05fa8: the Console log has \"normal\"\r\nverbosity, and `.binlog` files are produced which contain \"diagnostic\"\r\nlevel output.  Why does the Console log for mono bumps need to be so\r\nginormous?\r\n\r\nThe answer is, they don't.\r\n\r\nUpdate the `<Exec/>` tasks within `mono-runtimes.targets` so that\r\n`StandardOutputImportance=\"Low\"` is specified.  This will *hide*\r\nmono's build messages from the normal Console output, while preserving\r\nthe build logs within the `.binlog` files.\r\n\r\nThis should make the default Console log significantly smaller, which\r\nin turn will allow the Jenkins **Failure Cause Management** scanning\r\nto be effective.  (If the Console log is too large, then the error\r\nindicators that Failure Cause Management aren't actually checked.)\r\n\r\nIf the full mono build log is necessary, it can still be obtained from\r\nthe `.binlog` files within the `xa-build-status*.zip` package."},{"Id":"9192621246","Type":"PullRequestEvent","CreatedAt":"2019-03-06T17:37:25","Actor":"mjbond-msft","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2797","RelatedDescription":"Opened pull request \"Mjbond build retries\" (#2797) at xamarin/xamarin-android","RelatedBody":"With the xamarin-android build being applied to PR builds, it is more critical that build is more resilient to connectivity glitches.  There is one such case where the build failed during the checkout stage due to known network issues.  There is a good chance in that that the checkout phase would have succeeded if given another chance.  \r\n\r\nAdded retry capability to the build.groovy pipeline script, which includes a wait between retries. The wait increases exponentially on each retry.  Retries have been enabled for stages that depend on connectivity for checkout and publishing of results.  These stages are good candidates for retry as they will most likely fail due to connectivity issues as opposed to an issue within the code being built.\r\n\r\nBuild failure as inspiration for this PR:\r\nhttps://jenkins.mono-project.com/job/xamarin-android-pr-pipeline-release/30\r\n"},{"Id":"9192395859","Type":"PullRequestEvent","CreatedAt":"2019-03-06T17:05:06","Actor":"grendello","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2796","RelatedDescription":"Opened pull request \"Revert \"[BootstrapTasks] use libZipSharp in <UnzipDirectoryChildren/>…\" (#2796) at xamarin/xamarin-android","RelatedBody":"… (#2750)\"\r\n\r\nThis reverts commit e84e502e32b7a88f3cfd46a0b3bd6bcbb5f8fba4.\r\n\r\nWhile LibZipSharp gives us better performance, we have a chicken-and-egg problem\r\n- in order to work LibZipSharp needs the native `libzip` library but it has to\r\nbe built by XA before we can use it. This creates a problem when bootstrapping\r\nXA either on a completely clean machine (i.e. without `~/android-toolchain`) or\r\nwhen updating one of the Android SDK/NDK components required for build. In such\r\ninstance `make prepare` will fail because `libzip` needs to be built using\r\n`cmake` which isn't yet installed and so the preparation step fails.\r\n\r\nRevert this commit in order to get the old behavior back until we can fix the\r\noriginal problem fixed by e84e502e32b7a88f3cfd46a0b3bd6bcbb5f8fba4 in a way that\r\ndoesn't create the above problems."},{"Id":"9191282057","Type":"PullRequestEvent","CreatedAt":"2019-03-06T14:49:43","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2795","RelatedDescription":"Merged pull request \"[Xamarin.Android.Build.Tasks] remove usage of Before/AfterTargets\" (#2795) at xamarin/xamarin-android","RelatedBody":"Context: https://github.com/jonathanpeppers/MSBuildIncrementalClean\r\n\r\nThrough research into MSBuild, there are two problem we generally want\r\nto fix:\r\n\r\n* We have targets we want to run *before* `IncrementalClean`. Our\r\n  current implementation uses a private MSBuild target to achieve\r\n  this.\r\n* We have use of `BeforeTargets` and `AfterTargets`, which causes some\r\n  problems.\r\n\r\nOne problem we have, is that usage of `AfterTargets` causes C#\r\ncompiler errors to produce extra (and confusing errors):\r\n\r\n    MainActivity.cs(9,7): error CS0246: The type or namespace name 'ClassLibrary1' could not be found (are you missing a using directive or an assembly reference?)\r\n\r\nWould also trigger this:\r\n\r\n    C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\MSBuild\\Xamarin\\Android\\Xamarin.Android.Common.targets(2160,5): error MSB4018: The \"LinkAssemblies\" task failed unexpectedly.\r\n    System.IO.FileNotFoundException: Could not load assembly 'App1, Version=0.0.0.0, Culture=neutral, PublicKeyToken='. Perhaps it doesn't exist in the Mono for Android profile?\r\n        File name: 'App1.dll'\r\n        at Java.Interop.Tools.Cecil.DirectoryAssemblyResolver.Resolve(AssemblyNameReference reference, ReaderParameters parameters)\r\n        at Java.Interop.Tools.Cecil.DirectoryAssemblyResolver.GetAssembly(String fileName)\r\n        at Xamarin.Android.Tasks.LinkAssemblies.Execute(DirectoryAssemblyResolver res)\r\n        at Xamarin.Android.Tasks.LinkAssemblies.Execute()\r\n        at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute()\r\n        at Microsoft.Build.BackEnd.TaskBuilder.<ExecuteInstantiatedTask>d__26.MoveNext() [C:\\Users\\joaqu\\source\\repos\\ClassLibrary21\\App1\\App1.csproj]\r\n\r\nAnd to make matters worse, the noisy/ignorable error is displayed\r\nfirst in the list in the IDE!\r\n\r\nGoing through our targets here, there was a decent bit of rework\r\nneeded. I also updated our MSBuild \"best practices\" docs.\r\n\r\n## IncrementalClean ##\r\n\r\nUsing a new technique I figured out:\r\n\r\n    <PropertyGroup>\r\n      <!--Add to this property as needed here-->\r\n      <_BeforeIncrementalClean>\r\n        _AddFilesToFileWrites;\r\n      </_BeforeIncrementalClean>\r\n      <CoreBuildDependsOn>\r\n        $([MSBuild]::Unescape($(CoreBuildDependsOn.Replace('IncrementalClean;', '$(_BeforeIncrementalClean);IncrementalClean;'))))\r\n      </CoreBuildDependsOn>\r\n    </PropertyGroup>\r\n\r\nWe can specify targets that need to run *before* `IncrementalClean`\r\nwithout using `BeforeTargets`.\r\n\r\nI then went through and fixed the following targets:\r\n\r\n* `_AddFilesToFileWrites`\r\n* `_CompileDex`\r\n* `_PrepareAssemblies`\r\n\r\n## _SetupApplicationJavaClass ##\r\n\r\nThis target had:\r\n\r\n    <Target Name=\"_SetupApplicationJavaClass\" AfterTargets=\"_ResolveMonoAndroidSdks\" DependsOnTargets=\"$(_BeforeSetupApplicationJavaClass)\">\r\n\r\nI moved the contents of this target to `_ResolveMonoAndroidSdks`.\r\n\r\nUsage of `$(_BeforeSetupApplicationJavaClass)` will need to change to\r\nuse `$(_ResolveMonoAndroidSdksDependsOn)` instead.\r\n\r\n## _ResolveMonoAndroidFramework ##\r\n\r\nThis target was empty, and I could not find anything using it.\r\n\r\n    <Target Name=\"_ResolveMonoAndroidFramework\" DependsOnTargets=\"GetReferenceAssemblyPaths\" />\r\n\r\nI removed it, and used `GetReferenceAssemblyPaths` where applicable.\r\n\r\n## _SetLatestTargetFrameworkVersion ##\r\n\r\n`_CreateAapt2VersionCache` was using\r\n`AfterTargets=\"_SetLatestTargetFrameworkVersion\"`, so this target\r\nneeded to be reworked.\r\n\r\nI renamed `_SetLatestTargetFrameworkVersion` to `_ResolveSdks`.\r\n\r\nI created a new, empty `_SetLatestTargetFrameworkVersion` target that\r\ndepends on:\r\n\r\n* `_ResolveSdks` then\r\n* `_CreateAapt2VersionCache`\r\n\r\n## Changes needed in monodroid ##\r\n\r\n* Usage of `$(_BeforeSetupApplicationJavaClass)` will need to use\r\n  `$(_ResolveMonoAndroidSdksDependsOn)`\r\n* Need to do a general audit for `BeforeTargets` & `AfterTargets`"}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"9195825672","Type":"PullRequestEvent","CreatedAt":"2019-03-07T04:14:25","Actor":"TimBarham","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/5484","RelatedDescription":"Opened pull request \"Adds a test scenario for another Previewer Markup Extension issue\" (#5484) at xamarin/Xamarin.Forms","RelatedBody":"See #5473\r\n"},{"Id":"9195013772","Type":"PullRequestEvent","CreatedAt":"2019-03-07T00:36:14","Actor":"myroot","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/5483","RelatedDescription":"Opened pull request \"[Tizen] Fix CarouselPage focus issue\" (#5483) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n * Fix bug of CarouselPage focusing\r\n    We disallow focus on page that outside of screen, So When CurrentPage was changed on MultPage, We change `AllowTreeFocus` property to false on all others page\r\n    We have mistake on this code, so can't change policy when CurrentPage was changed by scrolling\r\n    This PR is fix it\r\n\r\n### Issues Resolved ### \r\n<!-- Please use the format \"fixes #xxxx\" for each issue this PR addresses -->\r\n\r\n- fixes #\r\n\r\n### API Changes ###\r\n<!-- List all API changes here (or just put None), example:\r\n\r\nAdded:\r\n - string ListView.GroupName { get; set; } //Bindable Property\r\n - int ListView.GroupId { get; set; } // Bindable Property\r\n - void ListView.Clear ();\r\n\r\nChanged:\r\n - object ListView.SelectedItem => Cell ListView.SelectedItem\r\n \r\n Removed:\r\n - object ListView.SelectedItem => Cell ListView.SelectedItem\r\n \r\n -->\r\n \r\n None\r\n\r\n### Platforms Affected ### \r\n<!-- Please list all platforms affected by these changes -->\r\n\r\n- Core/XAML (all platforms)\r\n- iOS\r\n- Android\r\n- UWP\r\n\r\n### Behavioral/Visual Changes ###\r\n<!-- Describe any changes that may change how a user's app behaves or appears when upgrading to this version of the codebase. -->\r\n\r\nNone\r\n\r\n### Before/After Screenshots ### \r\n<!-- If possible, take a screenshot of your test case before these changes were made and another screenshot after the changes were made to show possible visual changes. -->\r\n\r\nNot applicable\r\n\r\n### Testing Procedure ###\r\n<!-- Please list the steps that should be taken to properly test these changes on each relevant platform. If you were unable to test these changes yourself on any or all platforms, please let us know. Also, if you are able to attach a video of your test run, you will be our personal hero. -->\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [x] Rebased on top of the target branch at time of PR\r\n- [x] Changes adhere to coding standard\r\n"},{"Id":"9194471659","Type":"IssuesEvent","CreatedAt":"2019-03-06T22:33:48","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/5030","RelatedDescription":"Reopened issue \" Editor cause app crash after clicking the done/next button when on landscape mode in Android\" (#5030) at xamarin/Xamarin.Forms","RelatedBody":"<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\n### Description\r\n\r\nThe app will crash after clicking the done/next button when on landscape mode.\r\nThe temp workaround is setting ImeOptions in custom renderer:  `Control.ImeOptions = Android.Views.InputMethods.ImeAction.Done;`. Or insert one-pixel Entry control under the editor.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Create blank Xamarin.Forms project.\r\n2. In MainPage.xaml put a label and an editor in stacklayout.\r\n3. Clicking the done/next button on landscape mode\r\n\r\nThe MainPage.xaml:\r\n\r\n      <ContentPage xmlns=\"http://xamarin.com/schemas/2014/forms\"\r\n                   xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\r\n                   xmlns:local=\"clr-namespace:App1\"\r\n                   x:Class=\"App1.MainPage\">\r\n          <StackLayout >\r\n              <Label Text=\"Hello\" />\r\n              <Editor ></Editor>\r\n          </StackLayout>\r\n      </ContentPage>\r\n\r\nThe error in output:\r\n\r\n    E/AndroidRuntime( 7833): java.lang.IllegalStateException: focus search returned a view that wasn't able to take focus!\r\n    E/AndroidRuntime( 7833): \tat android.widget.TextView.onKeyUp(TextView.java:7453)\r\n    E/AndroidRuntime( 7833): \tat android.view.KeyEvent.dispatch(KeyEvent.java:2715)\r\n    E/AndroidRuntime( 7833): \tat android.view.View.dispatchKeyEvent(View.java:11713)\r\n    E/AndroidRuntime( 7833): \tat android.view.ViewGroup.dispatchKeyEvent(ViewGroup.java:1834)\r\n    E/AndroidRuntime( 7833): \tat android.view.ViewGroup.dispatchKeyEvent(ViewGroup.java:1834)\r\n    E/AndroidRuntime( 7833): \tat android.view.ViewGroup.dispatchKeyEvent(ViewGroup.java:1834)\r\n    E/AndroidRuntime( 7833): \tat android.view.ViewGroup.dispatchKeyEvent(ViewGroup.java:1834)\r\n    E/AndroidRuntime( 7833): \tat android.view.ViewGroup.dispatchKeyEvent(ViewGroup.java:1834)\r\n    E/AndroidRuntime( 7833): \tat android.view.ViewGroup.dispatchKeyEvent(ViewGroup.java:1834)\r\n    E/AndroidRuntime( 7833): \tat android.view.ViewGroup.dispatchKeyEvent(ViewGroup.java:1834)\r\n    E/AndroidRuntime( 7833): \tat android.view.ViewGroup.dispatchKeyEvent(ViewGroup.java:1834)\r\n    E/AndroidRuntime( 7833): \tat android.view.ViewGroup.dispatchKeyEvent(ViewGroup.java:1834)\r\n    E/AndroidRuntime( 7833): \tat android.view.ViewGroup.dispatchKeyEvent(ViewGroup.java:1834)\r\n    E/AndroidRuntime( 7833): \tat com.android.internal.policy.DecorView.superDispatchKeyEvent(DecorView.java:440)\r\n    E/AndroidRuntime( 7833): \tat com.android.internal.policy.PhoneWindow.superDispatchKeyEvent(PhoneWindow.java:1819)\r\n    E/AndroidRuntime( 7833): \tat android.app.Activity.dispatchKeyEvent(Activity.java:3267)\r\n    E/AndroidRuntime( 7833): \tat android.support.v7.app.AppCompatActivity.dispatchKeyEvent(AppCompatActivity.java:534)\r\n    E/AndroidRuntime( 7833): \tat android.support.v7.view.WindowCallbackWrapper.dispatchKeyEvent(WindowCallbackWrapper.java:58)\r\n    E/AndroidRuntime( 7833): \tat android.support.v7.app.AppCompatDelegateImplBase$AppCompatWindowCallbackBase.dispatchKeyEvent(AppCompatDelegateImplBase.java:316)\r\n    E/AndroidRuntime( 7833): \tat android.support.v7.view.WindowCallbackWrapper.dispatchKeyEvent(WindowCallbackWrapper.java:58)\r\n    E/AndroidRuntime( 7833): \tat com.android.internal.policy.DecorView.dispatchKeyEvent(DecorView.java:354)\r\n    E/AndroidRuntime( 7833): \tat android.view.ViewRootImpl$ViewPostImeInputStage.processKeyEvent(ViewRootImpl.java:4733)\r\n    E/AndroidRuntime( 7833): \tat android.view.ViewRootImpl$ViewPostImeInputStage.onProcess(ViewRootImpl.java:4605)\r\n    E/AndroidRuntime( 7833): \tat android.view.ViewRootImpl$InputStage.deliver(ViewRootImpl.java:4147)\r\n    E/AndroidRuntime( 7833): \tat android.view.ViewRootImpl$InputStage.onDeliverToNext(ViewRootImpl.java:4200)\r\n    E/AndroidRuntime( 7833): \tat android.view.ViewRootImpl$InputStage.forward(ViewRootImpl.java:4166)\r\n    E/AndroidRuntime( 7833): \tat android.view.ViewRootImpl$AsyncInputStage.forward(ViewRootImpl.java:4293)\r\n    E/AndroidRuntime( 7833): \tat android.view.ViewRootImpl$InputStage.apply(ViewRootImpl.java:4174)\r\n    E/AndroidRuntime( 7833): \tat android.view.ViewRootImpl$AsyncInputStage.apply(ViewRootImpl.java:4350)\r\n    E/AndroidRuntime( 7833): \tat android.view.ViewRootImpl$InputStage.deliver(ViewRootImpl.java:4147)\r\n    E/AndroidRuntime( 7833): \tat android.view.ViewRootImpl$InputStage.onDeliverToNext(ViewRootImpl.java:4200)\r\n    E/AndroidRuntime( 7833): \tat android.view.ViewRootImpl$InputStage.forward(ViewRootImpl.java:4166)\r\n    E/AndroidRuntime( 7833): \tat android.view.ViewRootImpl$InputStage.apply(ViewRootImpl.java:4174)\r\n    E/AndroidRuntime( 7833): \tat android.view.ViewRootImpl$InputStage.deliver(ViewRootImpl.java:4147)\r\n    E/AndroidRuntime( 7833): \tat android.view.ViewRootImpl.deliverInputEvent(ViewRootImpl.java:6661)\r\n    E/AndroidRuntime( 7833): \tat android.view.ViewRootImpl.doProcessInputEvents(ViewRootImpl.java:6635)\r\n    E/AndroidRuntime( 7833): \tat android.view.ViewRootImpl.enqueueInputEvent(ViewRootImpl.java:6596)\r\n    E/AndroidRuntime( 7833): \tat android.view.ViewRootImpl$ViewRootHandler.handleMessage(ViewRootImpl.java:3930)\r\n    E/AndroidRuntime( 7833): \tat android.os.Handler.dispatchMessage(Handler.java:106)\r\n    E/AndroidRuntime( 7833): \tat android.os.Looper.loop(Looper.java:164)\r\n    E/AndroidRuntime( 7833): \tat android.app.ActivityThread.main(ActivityThread.java:6494)\r\n    E/AndroidRuntime( 7833): \tat java.lang.reflect.Method.invoke(Native Method)\r\n    E/AndroidRuntime( 7833): \tat com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:438)\r\n    E/AndroidRuntime( 7833): \tat com.android.internal.os.ZygoteInit.main(ZygoteInit.java:807)\r\n\r\n### Expected Behavior\r\n\r\nExit the edit mode.\r\n\r\n### Actual Behavior\r\nApp crash\r\n### Basic Information\r\n\r\n- Version with issue: 3.4.0.1008975 & 4.0.0.62955-pre2\r\n- IDE: Visual Studio Enterprise 2017 15.9.5\r\n- Platform Target Frameworks: \r\n  - Android: 8.1\r\n"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"9194571474","Type":"PullRequestEvent","CreatedAt":"2019-03-06T22:53:19","Actor":"mandel-macaque","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5733","RelatedDescription":"Opened pull request \"[Foundation] Add support to the ServerCertificateValidationCallback on the NSUrlSessionHandler\" (#5733) at xamarin/xamarin-macios","RelatedBody":"This changes allows to use the service point manager callback within the\r\nNSUrlSessionHanlder.\r\n\r\nThe logic is as follows:\r\n\r\n1. Check that the challange is about the ssl cert.\r\n2. Convert the SecTrust info to the managed objects.\r\n3. Call the users cb.\r\n4. If user returns true, continue, else, cancel and create an exception\r\nsimilar to the one used in the managed code.\r\n\r\nFixes https://github.com/xamarin/xamarin-macios/issues/4170"},{"Id":"9194449421","Type":"PullRequestEvent","CreatedAt":"2019-03-06T22:29:44","Actor":"monojenkins","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5732","RelatedDescription":"Opened pull request \"[d16-1] [apidiff] Remove the `_*` noise in XM diffs\" (#5732) at xamarin/xamarin-macios","RelatedBody":"I was, kind of, hoping using binaries from the bots would _indirectly_\nsolve it - but it did not.\n\nOnly the XM profile reports _inexistent_ changes in `_Attribute`,\n`_EventInfo` and `_Exception`. That noise makes it harder to review\nthe diffs, so we now ignore those specific cases.\n\nBackport of #5721.\n\n/cc @spouliot "},{"Id":"9194047473","Type":"PullRequestEvent","CreatedAt":"2019-03-06T21:20:59","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5730","RelatedDescription":"Merged pull request \"Bump XI and XM versions after branching for d16-1\" (#5730) at xamarin/xamarin-macios","RelatedBody":""},{"Id":"9193982877","Type":"PullRequestEvent","CreatedAt":"2019-03-06T21:10:50","Actor":"monojenkins","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5731","RelatedDescription":"Opened pull request \"[d16-1] [uikit] Simplify UIApplication.Main wrt NSString usage\" (#5731) at xamarin/xamarin-macios","RelatedBody":"The lifespan of `new NSString (x).Handle` can be shorter than expected\nand there's a better (lighter) alternative to get that handle\n\nBackport of #5729.\n\n/cc @spouliot "}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1103399934966067200","CreatedAt":"2019-03-06T21:00:19+00:00","UserScreenname":"xamarinhq","Text":"Announcing Xamarin.Forms 3.6:\n- we've made enhancements, cleaned up some bugs, AND, we've moved our Visual feature… https://t.co/fG4RqX25PH","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":146,"FavoriteCount":84,"RawContent":null},{"Id":"1102666586194931713","CreatedAt":"2019-03-04T20:26:15+00:00","UserScreenname":"xamarinhq","Text":"Sweeky Satpathy (from the Mobile Customer Advisory Team) shares some best practices &amp; tips/tricks the team uses to… https://t.co/GSrw6zLTHZ","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":57,"FavoriteCount":16,"RawContent":null},{"Id":"1101572485114462220","CreatedAt":"2019-03-01T19:58:41+00:00","UserScreenname":"xamarinhq","Text":"Developer Community User Groups are gathering to learn about new, exciting releases and tooling to help jumpstart t… https://t.co/GgCWj5LttS","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":47,"FavoriteCount":21,"RawContent":null},{"Id":"1101202237752258564","CreatedAt":"2019-02-28T19:27:27+00:00","UserScreenname":"xamarinhq","Text":"Want to display PDF docs w/i your #Xamarin apps? Now you can. Learn to view PDF files within your Xamarin.Forms app… https://t.co/GjuKzrvNYM","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":98,"FavoriteCount":30,"RawContent":null},{"Id":"1100455963361005570","CreatedAt":"2019-02-26T18:02:01+00:00","UserScreenname":"xamarinhq","Text":"In this episode of the #dotNETCore podcast, @jimbobbennett talks #Xamarin &amp; .NET Standard. Listen in or read the tr… https://t.co/VDFrb1excV","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":39,"FavoriteCount":14,"RawContent":null},{"Id":"1100149148282769409","CreatedAt":"2019-02-25T21:42:51+00:00","UserScreenname":"xamarinhq","Text":"Android emulators have their own networking config but now you can debug #Android apps locally regardless of whethe… https://t.co/Hbsm6gbXft","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":71,"FavoriteCount":31,"RawContent":null},{"Id":"1098996242238111745","CreatedAt":"2019-02-22T17:21:37+00:00","UserScreenname":"xamarinhq","Text":"This week on the #XamarinShow, @DavidOrtinau gives us all the reasons and features to &lt;3 in Xamarin.Forms 3.5. This… https://t.co/pVcHVX6LYJ","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":56,"FavoriteCount":27,"RawContent":null},{"Id":"1097993381496700935","CreatedAt":"2019-02-19T22:56:36+00:00","UserScreenname":"xamarinhq","Text":"With only a few lines of code, today's #Xamarin.Essentials API of the week helps you persist settings and preferenc… https://t.co/izkl5pGL6m","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":49,"FavoriteCount":21,"RawContent":null},{"Id":"1097939132532310018","CreatedAt":"2019-02-19T19:21:02+00:00","UserScreenname":"xamarinhq","Text":"On this week's #XamarinShow Essential API of the week, we take a look at Secure Storage, which enables you to easil… https://t.co/OwQSZ1QRlI","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":46,"FavoriteCount":26,"RawContent":null},{"Id":"1097603017375993857","CreatedAt":"2019-02-18T21:05:26+00:00","UserScreenname":"xamarinhq","Text":"Xamarin.Forms 101: Command Parameters: https://t.co/rwzzq9yQib\n\n.@JamesMontemagno takes us through a new mini-serie… https://t.co/ZFInvKFhSL","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":110,"FavoriteCount":48,"RawContent":null},{"Id":"1096561048562384898","CreatedAt":"2019-02-16T00:05:01+00:00","UserScreenname":"xamarinhq","Text":"The #Xamarin Developer Blog is migrating to a new platform with a modern, clean design and powerful features that m… https://t.co/nJUxXItfe8","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":98,"FavoriteCount":35,"RawContent":null},{"Id":"1095804816121581570","CreatedAt":"2019-02-13T22:00:01+00:00","UserScreenname":"xamarinhq","Text":"The #VisualStudio Mobile Dev Podcast is out. In this episode, @CodeMillMatt &amp; @JamesMontemagno discuss the latest &amp;… https://t.co/SPEvfxFuLn","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":55,"FavoriteCount":14,"RawContent":null},{"Id":"1095445655076700162","CreatedAt":"2019-02-12T22:12:51+00:00","UserScreenname":"xamarinhq","Text":"To provide the best user experience we need access to the current network state of our users’ devices.\n\n...new from… https://t.co/w2ZGMgKqli","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":43,"FavoriteCount":25,"RawContent":null},{"Id":"1093221405917937670","CreatedAt":"2019-02-06T18:54:28+00:00","UserScreenname":"xamarinhq","Text":"Every month we survey &amp; interview our Xamarin devs, listening to your firsthand stories. Why? To make #Xamarin bett… https://t.co/Gwc32YD8qG","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":94,"FavoriteCount":42,"RawContent":null},{"Id":"1093196382901547008","CreatedAt":"2019-02-06T17:15:02+00:00","UserScreenname":"xamarinhq","Text":"On a recent #XamarinShow, Mike Parker from the Microsoft Mobile Customer Advisory Team that shows us how to easily… https://t.co/jdjf2oZXwI","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":50,"FavoriteCount":18,"RawContent":null},{"Id":"1092542167078326279","CreatedAt":"2019-02-04T21:55:25+00:00","UserScreenname":"xamarinhq","Text":"Walk through some techniques for separating the concerns of dev'ing a C/C++ library, a C# wrapper, &amp; a mobile app s… https://t.co/W1RmRSHzXZ","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":74,"FavoriteCount":37,"RawContent":null},{"Id":"1091455153868296201","CreatedAt":"2019-02-01T21:56:01+00:00","UserScreenname":"xamarinhq","Text":"Announcing .NET Foundation Open Membership. We're making some big changes to expand the #dotNET Foundation. We’re i… https://t.co/iePYJUdean","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":69,"FavoriteCount":39,"RawContent":null},{"Id":"1091387761297362944","CreatedAt":"2019-02-01T17:28:13+00:00","UserScreenname":"xamarinhq","Text":"There's a new Xamarin.Essentials out. Today, @JamesMontemagno highlights API of the Week, App Information; which gi… https://t.co/WlU6hQHbNl","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":67,"FavoriteCount":23,"RawContent":null},{"Id":"1090678537491808256","CreatedAt":"2019-01-30T18:30:01+00:00","UserScreenname":"xamarinhq","Text":"Check out this super-interesting use-case for creating complex UI using FastGrid for Xamarin.Forms with many cell v… https://t.co/SNff8XhdJ3","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":100,"FavoriteCount":43,"RawContent":null}]}},"RunOn":"2019-03-07T05:30:52.7964834Z","RunDurationInMilliseconds":3257}