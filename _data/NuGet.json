{"Data":{"Blog":{"FeedItems":[{"Title":"Deprecating TLS 1.0 and 1.1 on NuGet.org","PublishedOn":"2019-11-15T18:58:33+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"At Microsoft, using the latest and secure encryption techniques is very important to us to ensure the security and privacy of our customers. TLS 1.0 and TLS 1.1, released in 1999 and 2006...","Href":"https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org/","RawContent":null},{"Title":"Deprecating packages on nuget.org","PublishedOn":"2019-09-30T18:29:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are excited to announce that nuget.org now supports package deprecation. This has been a long standing ask that will help the ecosystem use supported packages. As a package publisher on nuget.org,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-packages-on-nuget-org/","RawContent":null},{"Title":"New and improved NuGet Search is here!","PublishedOn":"2019-08-23T03:31:26+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"It’s been a long time coming, and today we are excited to announce the new and improved search on NuGet.org leveraging Azure Search. We want to start this post with a huge thanks to you, the NuGet...","Href":"https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/","RawContent":null},{"Title":"Surfacing GitHub Usage for packages on NuGet.org","PublishedOn":"2019-07-17T20:00:23+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"There are several criteria you can use today to evaluate NuGet packages. We received feedback that you would like even more information to help choose the right packages. We&#8217;re excited to...","Href":"https://devblogs.microsoft.com/nuget/surfacing-github-usage-for-packages-on-nuget-org/","RawContent":null},{"Title":"NuGet Spring 2019 Roadmap","PublishedOn":"2019-04-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We published our last NuGet roadmap in June last year. Many of the features announced were major additions to NuGet and we have been hard at work to implement those over the last few months. In this...","Href":"https://devblogs.microsoft.com/nuget/nuget-spring-2019-roadmap/","RawContent":null},{"Title":"Enable repeatable package restores using a lock file","PublishedOn":"2018-12-17T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"With PackageReference, NuGet always tries to produce the same closure of package dependencies if the input package reference list has not changed. However, there are a few scenarios where it may not...","Href":"https://devblogs.microsoft.com/nuget/enable-repeatable-package-restores-using-a-lock-file/","RawContent":null},{"Title":"Lock down your dependencies using configurable trust policies","PublishedOn":"2018-12-05T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For the past several months we have focused on various features to improve package security and trust. Around a year back, we had announced our plans on various signing functionalities that we have...","Href":"https://devblogs.microsoft.com/nuget/lock-down-your-dependencies-using-configurable-trust-policies/","RawContent":null},{"Title":"Improved package debugging experience with the NuGet.org symbol server","PublishedOn":"2018-11-16T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Starting today, you can publish symbol packages to the NuGet.org symbol server. With NuGet.org as a single service provider for libraries and symbols, package authors and consumers will have a...","Href":"https://devblogs.microsoft.com/nuget/improved-package-debugging-experience-with-the-nuget-org-symbol-server/","RawContent":null},{"Title":"Introducing Source Code Link for NuGet packages","PublishedOn":"2018-08-27T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"NuGet.org now supports surfacing source code repository link for NuGet packages. This will enable package authors to surface both the project&#8217;s website and the source repository using the...","Href":"https://devblogs.microsoft.com/nuget/introducing-source-code-link-for-nuget-packages/","RawContent":null},{"Title":"NuGet.org starts repo-signing packages","PublishedOn":"2018-08-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In May, we implemented Stage 1 and enabled support for any NuGet.org user to submit signed packages to NuGet.org. Today, we are announcing Stage 2 of our NuGet package signing journey &#8211; tamper...","Href":"https://devblogs.microsoft.com/nuget/introducing-repository-signatures/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"10902166349","Type":"PullRequestEvent","CreatedAt":"2019-11-20T00:57:28","Actor":"agr","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7708","RelatedDescription":"Opened pull request \"Removed the perf logging for the external search calls\" (#7708) at NuGet/NuGetGallery","RelatedBody":"Progress on https://github.com/NuGet/Engineering/issues/1912\r\n\r\nAlso, removed all the infra that was supporting it since it was the last call."},{"Id":"10902023231","Type":"IssuesEvent","CreatedAt":"2019-11-20T00:26:32","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7707","RelatedDescription":"Opened issue \"Publish NuGet.Server's symbols\" (#7707) at NuGet/NuGetGallery","RelatedBody":"### Is your feature request related to a problem? Please describe.\r\nIt is difficult to debug a NuGet.Server app as its symbols are missing.\r\n\r\n### Describe the solution you'd like\r\nWe should consider publishing NuGet.Server's symbols to NuGet.org's symbol server. \r\n"},{"Id":"10900823314","Type":"PullRequestEvent","CreatedAt":"2019-11-19T21:10:46","Actor":"scottbommarito","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7706","RelatedDescription":"Opened pull request \"Add command to compare PackageVulnerabilities to GitHub API\" (#7706) at NuGet/NuGetGallery","RelatedBody":"https://github.com/nuget/nugetgallery/issues/7685"},{"Id":"10899861185","Type":"IssuesEvent","CreatedAt":"2019-11-19T19:07:27","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7705","RelatedDescription":"Opened issue \"\"Could not create SSL/TLS secure channel\" error in Visual Studio\" (#7705) at NuGet/NuGetGallery","RelatedBody":"### Describe the bug\r\nSome Visual Studio customers are reporting the following error:\r\n\r\n```\r\nUnable to load the service index for source https://api.nuget.org/v3/index.json.\r\nAn error occurred while sending the request.\r\nThe request was aborted: Could not create SSL/TLS secure channel.\r\n```\r\n\r\nThe NuGet team is actively investigating this problem. At this time, the issue's root cause is unknown. See: https://developercommunity.visualstudio.com/content/problem/815971/unable-to-browse-nuget-packages-1.html\r\n\r\n### Workaround\r\n\r\nSome customers have reported that disabling TLS 1.3 has resolved their issues:\r\n\r\n```ps1\r\nNew-Item 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\TLS 1.3\\Server' -Force | Out-Null\r\n\t\r\nNew-ItemProperty -path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\TLS 1.3\\Server' -name 'Enabled' -value '0' -PropertyType 'DWord' -Force | Out-Null\r\n\t\r\nNew-ItemProperty -path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\TLS 1.3\\Server' -name 'DisabledByDefault' -value 1 -PropertyType 'DWord' -Force | Out-Null\r\n\t\r\nNew-Item 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\TLS 1.3\\Client' -Force | Out-Null\r\n\t\r\nNew-ItemProperty -path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\TLS 1.3\\Client' -name 'Enabled' -value '0' -PropertyType 'DWord' -Force | Out-Null\r\n\t\r\nNew-ItemProperty -path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\SCHANNEL\\Protocols\\TLS 1.3\\Client' -name 'DisabledByDefault' -value 1 -PropertyType 'DWord' -Force | Out-Null\r\nWrite-Host 'TLS 1.3 has been disabled.'\r\n```\r\n\r\nYou may also need to change your .NET Framework default TLS version:\r\n\r\n```ps1\r\nreg add HKLM\\SOFTWARE\\Microsoft\\.NETFramework\\v4.0.30319 /v SystemDefaultTlsVersions /t REG_DWORD /d 1 /f /reg:64\r\nreg add HKLM\\SOFTWARE\\Microsoft\\.NETFramework\\v4.0.30319 /v SystemDefaultTlsVersions /t REG_DWORD /d 1 /f /reg:32\r\n```"},{"Id":"10899262282","Type":"PullRequestEvent","CreatedAt":"2019-11-19T17:50:44","Actor":"zhhyu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7700","RelatedDescription":"Merged pull request \"[Token scanning-Phase 1-3] API keys profile page\" (#7700) at NuGet/NuGetGallery","RelatedBody":"- API keys profile page shows the revoked API keys info.\r\n![image](https://user-images.githubusercontent.com/41028779/69112202-8d18a080-0a34-11ea-87da-00c3d9ec7000.png)\r\nOr\r\n![image](https://user-images.githubusercontent.com/41028779/69112160-7114ff00-0a34-11ea-845d-954d2c9a1f6b.png)\r\n\r\n- The page to verify API keys shows \"Link\" rather than the original URL. \r\n![image](https://user-images.githubusercontent.com/41028779/69016750-350b6c80-0956-11ea-88d6-7705cb4ed693.png)\r\n\r\n"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"10901889583","Type":"IssuesEvent","CreatedAt":"2019-11-19T23:58:58","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8842","RelatedDescription":"Opened issue \"Deadlock in VSSettings init\" (#8842) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe): VS \r\n\r\nNuGet version (x.x.x.xxx): 5.5\r\n\r\ndotnet.exe --version (if appropriate):\r\n\r\nVS version (if appropriate):16.5 P2\r\n\r\n\r\nWorked before? If so, with which NuGet version:\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\nNuGet Side of https://github.com/dotnet/roslyn/issues/39889.\r\n\r\n**Version Used**: Latest 16.5 Preview2 dogfood build (29518.163.master)\r\n\r\n**Repro steps (pretty consistent repro)**\r\n\r\n1. Create a new C# project\r\n2. Add code so you have missing usings. For example, just type out a `Console.Write(...);`, but no `using System;` so you get compiler errors. Place the cursor on the squiggle and click save all.\r\n3. Close VS\r\n4. Restart VS, open the same project\r\n5. Hit Ctrl + Dot - if you do this before the red squiggle shows up, I invariably see this deadlock.\r\n\r\nI think there might be other ways to hit this, but I found this was a pretty consistent repro for me.\r\n\r\nDump shared at: `\\\\<%internal_share%>\\public\\mava`\r\n\r\n\r\n\r\n**Version Used**: Latest 16.5 Preview2 dogfood build (29518.163.master)\r\n\r\n**Repro steps (pretty consistent repro)**\r\n\r\n1. Create a new C# project\r\n2. Add code so you have missing usings. For example, just type out a `Console.Write(...);`, but no `using System;` so you get compiler errors. Place the cursor on the squiggle and click save all.\r\n3. Close VS\r\n4. Restart VS, open the same project\r\n5. Hit Ctrl + Dot - if you do this before the red squiggle shows up, I invariably see this deadlock.\r\n\r\nI think there might be other ways to hit this, but I found this was a pretty consistent repro for me.\r\n\r\nDump shared at: `\\\\<%internal_share%>\\public\\mavasani\\Deadlock_Ctrl_Dot\\devenv.dmp`\r\n\r\n**Main thread:**\r\n\r\n```\r\n>\tMicrosoft.CodeAnalysis.Workspaces.dll!Roslyn.Utilities.TaskExtensions.WaitAndGetResult_CanCallOnBackground<System.Collections.Immutable.ImmutableArray<System.__Canon>>(System.Threading.Tasks.Task<System.Collections.Immutable.ImmutableArray<System.__Canon>task, System.Threading.CancellationToken cancellationToken)\tUnknown\r\n \tMicrosoft.CodeAnalysis.EditorFeatures.Wpf.dll!Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedActionsSourceProvider.SuggestedActionsSource.GetCodeFixes(Microsoft.CodeAnalysis.Editor.Shared.ITextBufferSupportsFeatureService supportsFeatureService, Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategorySet requestedActionCategories, Microsoft.CodeAnalysis.Workspace workspace, Microsoft.CodeAnalysis.Document document, Microsoft.VisualStudio.Text.SnapshotSpan range, System.Threading.CancellationToken cancellationToken)\tUnknown\r\n \tMicrosoft.CodeAnalysis.EditorFeatures.Wpf.dll!Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedActionsSourceProvider.SuggestedActionsSource.GetSuggestedActions(Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategorySet requestedActionCategories, Microsoft.VisualStudio.Text.SnapshotSpan range, System.Threading.CancellationToken cancellationToken)\tUnknown\r\n \tMicrosoft.VisualStudio.Platform.VSEditor.dll!Microsoft.VisualStudio.Language.Intellisense.Implementation.LightBulbSession.TryGetSuggestedActionSets.AnonymousMethod__0(Microsoft.VisualStudio.Utilities.IUIThreadOperationContext c)\tUnknown\r\n \tMicrosoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.VSUIThreadOperationExecutor.Execute(Microsoft.VisualStudio.Utilities.UIThreadOperationExecutionOptions executionOptions, System.Action<Microsoft.VisualStudio.Utilities.IUIThreadOperationContextaction)\tUnknown\r\n \tMicrosoft.VisualStudio.Editor.Implementation.dll!Microsoft.VisualStudio.Editor.Implementation.VSUIThreadOperationExecutor.Execute(string title, string defaultDescription, bool allowCancellation, bool showProgress, System.Action<Microsoft.VisualStudio.Utilities.IUIThreadOperationContextaction)\tUnknown\r\n \tMicrosoft.VisualStudio.Platform.VSEditor.dll!Microsoft.VisualStudio.Text.Utilities.UIThreadOperationExecutor.Execute(string title, string defaultDescription, bool allowCancellation, bool showProgress, System.Action<Microsoft.VisualStudio.Utilities.IUIThreadOperationContextaction)\tUnknown\r\n \tMicrosoft.VisualStudio.Platform.VSEditor.dll!Microsoft.VisualStudio.Language.Intellisense.Implementation.LightBulbSession.TryGetSuggestedActionSets(out System.Collections.Generic.IEnumerable<Microsoft.VisualStudio.Language.Intellisense.SuggestedActionSetactionSets, Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategorySet overrideRequestedActionCategories)\tUnknown\r\n \tMicrosoft.VisualStudio.Platform.VSEditor.dll!Microsoft.VisualStudio.Language.Intellisense.Implementation.LightBulbBroker.CreateSession(Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategorySet requestedActionCategories, Microsoft.VisualStudio.Text.Editor.ITextView textView, Microsoft.VisualStudio.Text.ITrackingPoint triggerPoint, Microsoft.VisualStudio.Text.ITrackingSpan triggerSpan, System.Collections.Generic.Dictionary<Microsoft.VisualStudio.Text.SnapshotSpan, System.Collections.Generic.IEnumerable<Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionsSource>subjectSpansAndSources, Microsoft.VisualStudio.Language.Intellisense.ISuggestedActionCategorySet applicableCategories, bool preQuerySuggestedActions, bool trackMouse)\tUnknown\r\n```\r\n\r\n**Background thread:**\r\n\r\n```\r\n \tMicrosoft.VisualStudio.Threading.dll!Microsoft.VisualStudio.Threading.JoinableTaskFactory.WaitSynchronouslyCore(System.Threading.Tasks.Task task)\tUnknown\r\n \tMicrosoft.VisualStudio.Threading.dll!Microsoft.VisualStudio.Threading.JoinableTaskFactory.WaitSynchronously(System.Threading.Tasks.Task task)\tUnknown\r\n \tMicrosoft.VisualStudio.Threading.dll!Microsoft.VisualStudio.Threading.JoinableTask.CompleteOnCurrentThread()\tUnknown\r\n \tMicrosoft.VisualStudio.Threading.dll!Microsoft.VisualStudio.Threading.JoinableTask<bool>.CompleteOnCurrentThread()\tUnknown\r\n \tMicrosoft.VisualStudio.Threading.dll!Microsoft.VisualStudio.Threading.JoinableTaskFactory.Run<bool>(System.Func<System.Threading.Tasks.Task<bool>asyncMethod, Microsoft.VisualStudio.Threading.JoinableTaskCreationOptions creationOptions)\tUnknown\r\n \tNuGet.PackageManagement.VisualStudio.dll!NuGet.PackageManagement.VisualStudio.VSSolutionManager.IsSolutionOpen.get()\tUnknown\r\n \tNuGet.PackageManagement.VisualStudio.dll!NuGet.PackageManagement.VisualStudio.VSSettings.ResetSolutionSettingsIfNeeded()\tUnknown\r\n \tNuGet.PackageManagement.VisualStudio.dll!NuGet.PackageManagement.VisualStudio.VSSettings.SolutionSettings.get()\tUnknown\r\n \tNuGet.PackageManagement.VisualStudio.dll!NuGet.PackageManagement.VisualStudio.VSSettings.GetSection(string sectionName)\tUnknown\r\n \tNuGet.Configuration.dll!NuGet.Configuration.PackageSourceProvider.LoadPackageSourceLookup(bool byName, NuGet.Configuration.ISettings settings)\tUnknown\r\n \tNuGet.Configuration.dll!NuGet.Configuration.PackageSourceProvider.LoadPackageSources(NuGet.Configuration.ISettings settings, System.Collections.Generic.IEnumerable<NuGet.Configuration.PackageSourcedefaultPackageSources)\tUnknown\r\n \tNuGet.Configuration.dll!NuGet.Configuration.PackageSourceProvider.LoadPackageSources()\tUnknown\r\n \tNuGet.VisualStudio.Implementation.dll!NuGet.VisualStudio.VsPackageSourceProvider.GetSources(bool includeUnOfficial, bool includeDisabled)\tUnknown\r\n>\tMicrosoft.VisualStudio.LanguageServices.dll!Microsoft.VisualStudio.LanguageServices.Packaging.PackageInstallerService.GetPackageSources()\tUnknown\r\n \tMicrosoft.CodeAnalysis.Features.dll!Microsoft.CodeAnalysis.AddImport.AbstractAddImportCodeFixProvider.RegisterCodeFixesAsync(Microsoft.CodeAnalysis.CodeFixes.CodeFixContext context)\tUnknown\r\n \tMicrosoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.CodeFixes.CodeFixService.GetCodeFixesAsync(Microsoft.CodeAnalysis.Document document, Microsoft.CodeAnalysis.Text.TextSpan span, Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fixer, bool isBlocking, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnosticdiagnostics, System.Threading.CancellationToken cancellationToken)\tUnknown\r\n \tMicrosoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.CodeFixes.CodeFixService.AppendFixesAsync.AnonymousMethod__2(System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnosticdxs)\tUnknown\r\n \tMicrosoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.CodeFixes.CodeFixService.AppendFixesOrConfigurationsAsync.AnonymousMethod__2()\tUnknown\r\n \tMicrosoft.CodeAnalysis.Workspaces.dll!Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformFunctionAsync<System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CodeFixes.CodeFix>>(Microsoft.CodeAnalysis.Extensions.IExtensionManager extensionManager, object extension, System.Func<System.Threading.Tasks.Task<System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CodeFixes.CodeFix>>function, System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CodeFixes.CodeFixdefaultValue)\tUnknown\r\n \tMicrosoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.CodeFixes.CodeFixService.AppendFixesOrConfigurationsAsync<Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider>(Microsoft.CodeAnalysis.Document document, Microsoft.CodeAnalysis.Text.TextSpan fixesSpan, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.Diagnostics.DiagnosticDatadiagnosticsWithSameSpan, bool fixAllForInSpan, Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.CodeFixes.CodeFixCollectionresult, Microsoft.CodeAnalysis.CodeFixes.CodeFixProvider fixer, System.Func<Microsoft.CodeAnalysis.Diagnostic, boolhasFix, System.Func<System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.Diagnostic>, System.Threading.Tasks.Task<System.Collections.Immutable.ImmutableArray<Microsoft.CodeAnalysis.CodeFixes.CodeFix>>getFixes, System.Threading.CancellationToken cancellationToken)\tUnknown\r\n \tMicrosoft.CodeAnalysis.EditorFeatures.dll!Microsoft.CodeAnalysis.CodeFixes.CodeFixService.AppendFixesAsync(Microsoft.CodeAnalysis.Document document, Microsoft.CodeAnalysis.Text.TextSpan span, System.Collections.Generic.IEnumerable<Microsoft.CodeAnalysis.Diagnostics.DiagnosticDatadiagnostics, bool fixAllForInSpan, bool isBlocking, Microsoft.CodeAnalysis.PooledObjects.ArrayBuilder<Microsoft.CodeAnalysis.CodeFixes.CodeFixCollectionresult, System.Threading.CancellationToken cancellationToken)\tUnknown\r\n```\r\n"},{"Id":"10899522989","Type":"IssuesEvent","CreatedAt":"2019-11-19T18:24:08","Actor":"heng-liu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8841","RelatedDescription":"Opened issue \"Test with self-issued certificate didn't set KeyCertSign nor CrlSign \" (#8841) at NuGet/Home","RelatedBody":"From [RFC 5280, section 4.2.1.3](https://tools.ietf.org/html/rfc5280#section-4.2.1.3):\r\n```\r\n   If the keyUsage extension is present, then the subject public key\r\n   MUST NOT be used to verify signatures on certificates or CRLs unless\r\n   the corresponding keyCertSign or cRLSign bit is set.\r\n```\r\nBut SigningTestUtility.cs will generate self-issued certificate without setting IsCA=true, so X509KeyUsageFlags.CrlSign and X509KeyUsageFlags.KeyCertSign are not set. \r\n(It will generate PartialChain status when chain build on such self-issued certificate.)"},{"Id":"10899414713","Type":"IssuesEvent","CreatedAt":"2019-11-19T18:10:07","Actor":"timhermann","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8840","RelatedDescription":"Opened issue \"ExcludeRestorePackageImports=true should not exclude package path properties\" (#8840) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nVisual Studio 15.9.17 and msbuild cli\r\nNuGet version: 5.3.1.6268\r\n\r\nOS version (i.e. win10 v1607 (14393.321)):\r\nWin10 v1909 (18363.476)\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Set ExcludeRestorePackageImports=true\r\n2. Add <PackageReference Include=\"Test.PathProperty\" Version=\"x.x.x\" GeneratePathProperty=\"true\" />\r\n3. Attempt to use $(PkgTest_PathProperty) as a variable\r\n\r\nExpected behavior:\r\n\r\n$(PkgTest_PathProperty) is defined, but no targets or props are imported from it\r\n\r\nActual behavior:\r\n\r\n\r\n...\r\n\r\n## Other suggested things\r\n\r\n### Verbose Logs\r\n\r\nPlease include verbose logs (NuGet.exe <COMMAND> -verbosity detailed | dotnet.exe <COMMAND> --verbosity diag | etc...)\r\n\r\n### Sample Project\r\n\r\nVery helpful if you can zip a project and paste into this issue!\r\n\r\n"},{"Id":"10899371822","Type":"IssuesEvent","CreatedAt":"2019-11-19T18:04:27","Actor":"heng-liu","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8830","RelatedDescription":"Closed issue \"Test FrameworkDependecy_DifferentFlags_AffectCompare is broken in netcoreapp5.0\" (#8830) at NuGet/Home","RelatedBody":"Our unit test FrameworkDependecy_DifferentFlags_AffectCompare will call System.Enum.CompareTo method.\r\nAccording to the [document,](https://docs.microsoft.com/en-us/dotnet/api/system.enum.compareto?view=netframework-4.7.2) , the return value should be:\r\n```\r\nValue \t\t\tMeaning\r\nLess than zero \t\tThe value of this instance is less than the value of target. \r\nZero \t\t\tThe value of this instance is equal to the value of target. \r\nGreater than zero \tThe value of this instance is greater than the value of target. -or- target is null.\r\n``` \r\nThis method in netcoreapp5.0 acts just the same with the document, so this test is broken(return 65535 when comparing ushort.MaxValue and 0) for netcoreapp5.0. \r\nAlthough net472 and netcoreapp2.1 returns 1 when comparing ushort.MaxValue and 0, we should change this test to adapt all frameworks.\r\n\r\n\r\n\r\n"},{"Id":"10899209524","Type":"IssuesEvent","CreatedAt":"2019-11-19T17:44:13","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8821","RelatedDescription":"Closed issue \"Definition of package executable entrypoint\" (#8821) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe):\r\n\r\nNuGet.exe\r\n\r\nNuGet version (x.x.x.xxx): nuget.exe v5.3.1\r\n\r\ndotnet.exe --version (if appropriate):\r\n\r\nVS version (if appropriate):\r\n\r\nOS version (i.e. win10 v1607 (14393.321)): 19023.1\r\n\r\nWorked before? If so, with which NuGet version: Feature request\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\nAdd support for distributing a binary executable like other package managers: NPM/Pip or whatever\r\n\r\nIt's very handy to publish command line tools written in NodeJS or Python. For CSharp, I had to use Scoop which was well-known in the community but still somehow a \"third party\" paltform.\r\n\r\nWould you consider adding an official support of adding a new metadata in package definition so that nuget publish/install can be used to distribute command line tools shipped within a nuget package?"},{"Id":"10899135805","Type":"IssuesEvent","CreatedAt":"2019-11-19T17:34:59","Actor":"jeffkl","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/7654","RelatedDescription":"Closed issue \"Incorrect version restored on MSBuild sdk.proj\" (#7654) at NuGet/Home","RelatedBody":"**sdk.proj**\r\n```\r\n<Project Sdk=\"Microsoft.DotNet.Arcade.Sdk\"/>\r\n```\r\n[NuGet.config](https://github.com/dotnet/arcade-validation/blob/master/NuGet.config)\r\n[global.json](https://github.com/dotnet/arcade-validation/blob/master/global.json)\r\n\r\nIn *random* occasions when running `MSBuild sdk.proj` the incorrect version of `Microsoft.DotNet.Arcade.Sdk` is restored as it always restores `1.0.0-dev.18424.13` and not what is defined in `global.json`.\r\n\r\nAn example of this is: https://dnceng.visualstudio.com/internal/_build/results?buildId=61204. Windows_NT Debug leg did the correct thing and restored `1.0.0-beta.18619.3` while the Release leg restored `1.0.0-dev.18424.13` even though the setup code is the same. Same happened for Validate_sign Test leg vs Real.\r\n\r\nhttps://github.com/dotnet/arcade-validation is based of https://github.com/dotnet/arcade and so far this issue have not presented in arcade so probably I'm missing some setting in arcade-validation."},{"Id":"10897558470","Type":"IssuesEvent","CreatedAt":"2019-11-19T14:51:51","Actor":"jonscheiding","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8839","RelatedDescription":"Opened issue \"Different globbing behavior on different platforms\" (#8839) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe): NuGet.exe\r\n\r\nNuGet version (x.x.x.xxx): 5.3.1.6268\r\n\r\ndotnet.exe --version (if appropriate): N/A\r\n\r\nVS version (if appropriate): N/A\r\n\r\nOS version (i.e. win10 v1607 (14393.321)):\r\n- Windows 10 1809 (17763.805)\r\n- Ubuntu 18.04.1 LTS (WSL)\r\n\r\nWorked before? If so, with which NuGet version: No, reproduced with a couple of 4.x versions\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Create a Nuspec file that includes an entire directory using a globstar pattern (e.g. `<file src=\"stuff/**/*\" />`\r\n\r\n2. Execute `nuget pack` on Windows to create a Windows-built version of the package\r\n\r\n3. Execute `nuget pack` on Linux (under Mono) to create a Linux-built version of the package\r\n\r\n**Expected Result** \r\n\r\nThe two packages should have the same contents.\r\n\r\n**Actual Result**\r\n\r\nIn the Windows-built version of the package, the files are all included within the **stuff** directory:\r\n\r\n```powershell\r\nPS> .\\tools\\NuGet.exe pack -Verbosity detailed\r\nNuGet Version: 5.3.1.6268\r\nAttempting to build package from 'nuget-pack-globstar-test.nuspec'.\r\n\r\nId: nuget-pack-globstar-test\r\nVersion: 0.0.0\r\nAuthors: jonscheiding\r\nDescription: Demonstrating cross-platform issue with nuget pack\r\nDependencies: None\r\n\r\nAdded file '[Content_Types].xml'.\r\nAdded file '_rels/.rels'.\r\nAdded file 'nuget-pack-globstar-test.nuspec'.\r\nAdded file 'package/services/metadata/core-properties/a7558e8c24e84e3a94aaa1a378cff55b.psmdcp'.\r\nAdded file 'stuff/file1.txt'.\r\nAdded file 'stuff/file2.txt'.\r\n\r\nSuccessfully created package 'C:\\Users\\jscheiding\\Code\\General\\nuget-xplatform-issue\\nuget-pack-globstar-test.0.0.0.nupkg'.\r\nPS> Read-Archive .\\nuget-pack-globstar-test.0.0.0.nupkg | %{ $_.Path }\r\n_rels\\.rels\r\nnuget-pack-globstar-test.nuspec\r\nstuff\\file1.txt\r\nstuff\\file2.txt\r\n[Content_Types].xml\r\npackage\\services\\metadata\\core-properties\\3f4e84df8fd54911b7585913a3095eff.psmdcp\r\n```\r\n\r\n(This is the behavior I wanted.)\r\n\r\nIn the Linux-built version, the top-level **stuff** directory is collapsed:\r\n\r\n```bash\r\n$ mono ./tools/NuGet.exe pack -Verbosity detailed\r\nNuGet Version: 5.3.1.6268\r\nAttempting to build package from 'nuget-pack-globstar-test.nuspec'.\r\n\r\nId: nuget-pack-globstar-test\r\nVersion: 0.0.0\r\nAuthors: jonscheiding\r\nDescription: Demonstrating cross-platform issue with nuget pack\r\nDependencies: None\r\n\r\nAdded file '[Content_Types].xml'.\r\nAdded file '_rels/.rels'.\r\nAdded file 'file1.txt'.\r\nAdded file 'file2.txt'.\r\nAdded file 'nuget-pack-globstar-test.nuspec'.\r\nAdded file 'package/services/metadata/core-properties/82e666f3b8224dc687318c880d84f6b2.psmdcp'.\r\n\r\nSuccessfully created package '/mnt/c/Users/jscheiding/Code/General/nuget-xplatform-issue/nuget-pack-globstar-test.0.0.0.nupkg'.$ unzip -l nuget-pack-globstar-test.0.0.0.nupkg\r\nArchive:  nuget-pack-globstar-test.0.0.0.nupkg\r\n  Length      Date    Time    Name\r\n---------  ---------- -----   ----\r\n      514  2019-11-19 09:45   _rels/.rels\r\n      437  2019-11-19 09:45   nuget-pack-globstar-test.nuspec\r\n        0  2019-11-19 14:42   file1.txt\r\n        0  2019-11-19 14:42   file2.txt\r\n      459  2019-11-19 09:45   [Content_Types].xml\r\n      674  2019-11-19 09:45   package/services/metadata/core-properties/5aba9523ce764cf3ba0a4feae67d16b6.psmdcp\r\n---------                     -------\r\n     2084                     6 files\r\n```\r\n\r\n## Other suggested things\r\n\r\nI tried changing the `file` element to specify a target directory, as in `<file src=\"stuff/**/*\" target=\"stuff\" />`.  This produced the behavior I wanted under Mono, but created an extra top-level **stuff** directory on under Windows:\r\n\r\n```powershell\r\nPS> Read-Archive .\\nuget-pack-globstar-test.0.0.0.nupkg | %{ $_.Path }\r\n_rels\\.rels\r\nnuget-pack-globstar-test.nuspec\r\nstuff\\stuff\\file1.txt\r\nstuff\\stuff\\file2.txt\r\n[Content_Types].xml\r\npackage\\services\\metadata\\core-properties\\00081df611fd4cd68b1511a0b6717066.psmdcp\r\n```\r\n\r\n### Verbose Logs\r\n\r\nSee above.\r\n\r\n### Sample Project\r\n\r\n[nuget-pack-globstar-test.zip](https://github.com/NuGet/Home/files/3864359/nuget-pack-globstar-test.zip)\r\n\r\n"},{"Id":"10893526603","Type":"IssuesEvent","CreatedAt":"2019-11-19T06:09:53","Actor":"joelverhagen","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/8838","RelatedDescription":"Opened issue \"Should package metadata element names be case-insensitive?\" (#8838) at NuGet/Home","RelatedBody":"Consider the case of the hand-edited .nuspec file (because no one ever does that, right?) where someone mistypes the metadata name and provides and incorrect case. **Should this be supported officially?**\r\n\r\nExample. The [BlogML.Core 1,0.0](https://www.nuget.org/packages/BlogML.Core/1.0.0) package on nuget.org has `<ProjectUrl>` in the .nuspec instead of `<projectUrl>` which is the official element name.\r\n\r\n![image](https://user-images.githubusercontent.com/94054/69120813-6ae04c00-0a4f-11ea-92a2-e6eaef7ff40d.png)\r\n\r\nXML is case sensitive right? Well, yes, but the majority of cases in the official NuGet experiences accept this funky metadata element without blinking an eye:\r\n\r\n## 1st Party\r\n\r\n- ✔️ nuget.org: [link](https://www.nuget.org/packages/BlogML.Core/1.0.0)\r\n- ✔️ V2 non-hijacked: [link](https://www.nuget.org/api/v2/Packages()?$filter=Id%20eq%20%27BlogML.Core%27%20and%20NormalizedVersion%20eq%20%271.0.0%27%20and%201%20eq%201&$select=ProjectUrl)\r\n- ✔️ V2 hijacked: [link](https://www.nuget.org/api/v2/Packages(Id='BlogML.Core',Version='1.0.0'))\r\n  - This is the thing ready by VS package manager UI on the V2 feed URL\r\n- ❌ Package metadata resource, a.k.a. registration: [link](https://api.nuget.org/v3/registration4/blogml.core/index.json)\r\n  - This is the thing read by VS package manager UI on the V3 feed URL\r\n  - Note this will likely change with my Catalog2Registration rebuild due to [Newtonsoft.Json#815](https://github.com/JamesNK/Newtonsoft.Json/issues/815)\r\n- ✔️ Search: [link](https://azuresearch-usnc.nuget.org/query?q=packageid:BlogML.Core)\r\n- ✔️ Package manager UI on local feed\r\n  - ![image](https://user-images.githubusercontent.com/94054/69120227-e7722b00-0a4d-11ea-8db8-938026ee48a4.png)\r\n\r\n## 3rd Party\r\n\r\n- ❌ NuGet Package Explorer UI\r\n- ❌ NuGet Package Explorer > Edit > Edit Metadata Source (???)\r\n\r\n## This is a good idea right?\r\n\r\nMy vote is **_NO_**, **no**, **No**, **nO**! We should not support this officially.\r\n\r\nIn fact I think we should explicitly state it is not supported and any implementation that treats metadata names as case-insensitive strings is doing so at it's own peril. For example, what's the defined behavior when there are two metadata fields with the same name but different case (e.g. `<id>` and `<ID>`). Life's too short!\r\n\r\nFortunately, nuget.org rejects packages with multiple ID and version casings defined so I think we're out of scary land -- just living in crazy land. NBD.\r\n\r\n## Okay, who's guilty of this cardinal sin?\r\n\r\nNo shame, we all hack around with .nupkgs. But the ones I've found on nuget.org are:\r\n\r\n- StaticProxy.Fody 1.0.146-GenericMethods has \"Summary\" not \"summary\".\r\n  - https://api.nuget.org/v3/catalog0/data/2019.10.02.07.14.49/staticproxy.fody.1.0.146-genericmethods.json\r\n- Boolli 1.0.0 has \"licenseurl\" not \"licenseUrl\".\r\n  - https://api.nuget.org/v3/catalog0/data/2019.01.02.03.56.37/boolli.1.0.0.json\r\n- BlogML.Core 1.0.0 has \"ProjectUrl\" not \"projectUrl\".\r\n  - https://api.nuget.org/v3/catalog0/data/2019.01.02.13.49.28/blogml.core.1.0.0.json\r\n- Confuser.MSBuild 2.0.0-alpha-0191 has \"iconURL\" not \"iconUrl\".\r\n  - https://api.nuget.org/v3/catalog0/data/2019.04.18.10.29.30/confuser.msbuild.2.0.0-alpha-0191.json\r\n- SmartSeeder 0.0.1, 1.0.0-rc1-beta, 1.0.0-rc1-preview have \"Language\" not \"language\".\r\n  - https://api.nuget.org/v3/catalog0/data/2018.12.19.07.07.41/smartseeder.0.0.1.json\r\n  - https://api.nuget.org/v3/catalog0/data/2018.12.19.07.07.41/smartseeder.1.0.0-rc1-beta.json\r\n  - https://api.nuget.org/v3/catalog0/data/2018.12.19.07.07.31/smartseeder.1.0.0-rc1-preview.json\r\n\r\n🍻 "}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"10740159942","Type":"IssuesEvent","CreatedAt":"2019-10-29T17:39:29","Actor":"anangaur","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/39","RelatedDescription":"Opened issue \"Flag vulnerable packages\" (#39) at NuGet/Announcements","RelatedBody":"The spec for 'Flagging vulnerable packages' is ready for **review**:\r\n\r\n|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Flag vulnerable packages](https://github.com/NuGet/Home/wiki/Flag-vulnerable-packages) | https://github.com/nuget/home/issues/8087|"},{"Id":"10286366828","Type":"IssuesEvent","CreatedAt":"2019-08-26T13:37:09","Actor":"karann-msft","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/38","RelatedDescription":"Opened issue \"New and improved NuGet Search is live!\" (#38) at NuGet/Announcements","RelatedBody":"Announcing the new and improved search on NuGet.org leveraging Azure Search.\r\n\r\n[Blogpost](https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/) | [Feedback Issue](https://github.com/NuGet/NuGetGallery/issues/4124)"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1190360390980395008","CreatedAt":"2019-11-01T20:10:07+00:00","UserScreenname":"nuget","Text":"The issue with the publishing pipeline has been resolved and packages are now being published normally. https://t.co/NdK8mVk7UF","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":3,"FavoriteCount":0,"RawContent":null},{"Id":"1190331936293572608","CreatedAt":"2019-11-01T18:17:03+00:00","UserScreenname":"nuget","Text":"We are experiencing an issue with our publishing pipeline causing a delay in the publishing of new packages. We are… https://t.co/gM91QcE1Zc","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":5,"FavoriteCount":3,"RawContent":null}]}},"RunOn":"2019-11-20T05:30:48.7702338Z","RunDurationInMilliseconds":4612}