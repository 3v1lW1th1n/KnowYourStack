{"Data":{"Blog":{"FeedItems":[{"Title":"Migrating your existing .NET application to the cloud? Tell us about it!","PublishedOn":"2017-12-05T18:14:46+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Hi everyone! The .NET team is conducting a survey to learn more about your approach for moving existing .NET applications to the cloud.  The survey should take less than 5 minutes to complete. Take...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/12/05/migrating-your-existing-net-application-to-the-cloud-tell-us-about-it/","RawContent":null},{"Title":"Announcing the Windows Compatibility Pack for .NET Core","PublishedOn":"2017-11-17T04:59:32+00:00","CommentsCount":73,"FacebookCount":0,"Summary":"Porting existing code to .NET Core used to be quite hard because the available API set was very small. In .NET Core 2.0, we already made this much easier, thanks to .NET Standard 2.0. Today,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/announcing-the-windows-compatibility-pack-for-net-core/","RawContent":null},{"Title":"UPDATE – Microservices and Docker containers: Architecture, Patterns and Development guidance (Updated for .NET Core 2.0)","PublishedOn":"2017-11-16T22:00:06+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Nov. 15th 2017 update Earlier this year, we published this eBook/guide and sample application offering guidance for architecting microservices and Docker containers based applications. We have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/update-microservices-and-docker-containers-architecture-patterns-and-development-guidance-updated-for-net-core-2-0/","RawContent":null},{"Title":"UPDATE – Web Applications with ASP.NET Core Architecture and Patterns guidance (Updated for ASP.NET Core 2)","PublishedOn":"2017-11-16T21:00:05+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Nov. 15th 2017 update Earlier this year, we published an eBook/Guide and sample application offering guidance named Architecting Modern Web Applications with ASP.NET Core and Microsoft Azure. We have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/update-web-applications-with-asp-net-core-architecture-and-patterns-guidance-updated-for-asp-net-core-2/","RawContent":null},{"Title":"Introducing Tensor for multi-dimensional Machine Learning and AI data","PublishedOn":"2017-11-15T22:00:18+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"Overview Tensor is an exchange type for homogenous multi-dimensional data for 1 to N dimensions. The motivation behind introducing Tensor&#60;T&#62; is to make it easy for Machine Learning library...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/introducing-tensor-for-multi-dimensional-machine-learning-and-ai-data/","RawContent":null},{"Title":"Introducing Nullable Reference Types in C#","PublishedOn":"2017-11-15T20:00:47+00:00","CommentsCount":234,"FacebookCount":0,"Summary":"Today we released a prototype of a C# feature called &#8220;nullable reference types&#8220;, which is intended to help you find and fix most of your null-related bugs before they blow up at runtime....","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/nullable-reference-types-in-csharp/","RawContent":null},{"Title":"Announcing F# support for .NET Core and .NET Standard projects in Visual Studio","PublishedOn":"2017-11-15T19:00:49+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"We&#8217;re pleased to announce that Visual Studio 2017 15.5 Preview 4 now supports F# projects targeting .NET Core, .NET Standard, and .NET Framework through the .NET Core SDK. Some of you have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/announcing-f-support-for-net-core-and-net-standard-projects-in-visual-studio/","RawContent":null},{"Title":"Welcome to C# 7.2 and Span","PublishedOn":"2017-11-15T19:00:26+00:00","CommentsCount":29,"FacebookCount":0,"Summary":"C# 7.2 is the latest point release of C#, and adds a number of small but useful features. All the features are described in wonderful detail in the docs. Start with the overview, What&#8217;s new in...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/welcome-to-c-7-2-and-span/","RawContent":null},{"Title":".NET Core November 2017 Update","PublishedOn":"2017-11-15T05:25:23+00:00","CommentsCount":12,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core November Update. This includes .NET Core 1.0.8, 1.1.5 and 2.0.1 and .NET Core SDK 1.1.5 and 2.0.3. Details regarding the security issues addressed by this release...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/14/net-core-november-2017-update/","RawContent":null},{"Title":".NET Framework November 2017 Security and Quality Rollup","PublishedOn":"2017-11-15T03:54:36+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"Today, we are releasing the November 2017 Security and Quality Rollup. Security This release contains no new security updates. The most recent .NET security updates were shipped with the September...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/14/net-framework-november-2017-security-and-quality-rollup/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7044237283","Type":"PullRequestEvent","CreatedAt":"2017-12-31T20:25:44","Actor":"onovotny","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/93","RelatedDescription":"Opened pull request \"Add Humanizer\" (#93) at dotnet/home","RelatedBody":"Onboarding Humanizer: https://github.com/Humanizr/Humanizer/issues/682"},{"Id":"6946829856","Type":"PullRequestEvent","CreatedAt":"2017-12-05T18:08:42","Actor":"heiligerdankgesang","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/92","RelatedDescription":"Opened pull request \"Remove contact email from system.drawing.md\" (#92) at dotnet/home","RelatedBody":"Contact email is outdated. Mono-project site's community section has better, more up-to-date information."},{"Id":"6934052963","Type":"PullRequestEvent","CreatedAt":"2017-12-02T15:19:09","Actor":"rprouse","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/91","RelatedDescription":"Opened pull request \"Add NUnit to the .NET Foundation Projects\" (#91) at dotnet/home","RelatedBody":""},{"Id":"6872255902","Type":"PullRequestEvent","CreatedAt":"2017-11-17T22:01:26","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/90","RelatedDescription":"Merged pull request \"Add BenchmarkDotNet to README.md and project.json\" (#90) at dotnet/home","RelatedBody":""},{"Id":"6872252909","Type":"PullRequestEvent","CreatedAt":"2017-11-17T22:00:44","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/89","RelatedDescription":"Merged pull request \"New logo and SSL certificate for Peachpie\" (#89) at dotnet/home","RelatedBody":""},{"Id":"6868854916","Type":"PullRequestEvent","CreatedAt":"2017-11-17T09:04:03","Actor":"AndreyAkinshin","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/90","RelatedDescription":"Opened pull request \"Add BenchmarkDotNet to README.md and project.json\" (#90) at dotnet/home","RelatedBody":""},{"Id":"6816687850","Type":"IssuesEvent","CreatedAt":"2017-11-06T20:30:07","Actor":"Petermarcu","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/home/issues/88","RelatedDescription":"Closed issue \"File system watcher crash\" (#88) at dotnet/home","RelatedBody":"Not sure where to open this issue.\r\nI'm experiencing crashes since I migrated to .net core 2.0 while running my site.\r\nThe following is the exception and stack trace:\r\n```\r\nAn unhandled exception of type 'System.ArgumentException' occurred in System.Private.CoreLib.dll\r\nThe path is not of a legal form.\r\n\r\nSystem.Private.CoreLib.dll!System.IO.Path.GetFullPath(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.InMemoryDirectoryInfo.InMemoryDirectoryInfo(string rootDir, System.Collections.Generic.IEnumerable<string> files, bool normalized)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string rootDir, System.Collections.Generic.IEnumerable<string> files)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string file)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.ReportChangeForMatchedEntries(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnFileSystemEntryChange(string fullPath)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnRenamed(object sender, System.IO.RenamedEventArgs e)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.NotifyRenameEventArgs(System.IO.WatcherChangeTypes action, string name, string oldName)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ParseEventBufferAndNotifyForEach(byte[] buffer)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ReadDirectoryChangesCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* overlappedPointer)\tUnknown\tNo symbols loaded.\r\n \tSystem.Private.CoreLib.dll!System.Threading._IOCompletionCallback.PerformIOCompletionCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* pOVERLAP)\tUnknown\tNo symbols loaded.\r\n```\r\n\r\nI'm not sure how to fix this. I can reproduce it although it's not easy since I think it has to do with timing..."},{"Id":"6797468573","Type":"PullRequestEvent","CreatedAt":"2017-11-01T23:04:17","Actor":"bfistein","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/89","RelatedDescription":"Opened pull request \"New logo and SSL certificate for Peachpie\" (#89) at dotnet/home","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"6948315401","Type":"IssuesEvent","CreatedAt":"2017-12-05T23:41:57","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/50","RelatedDescription":"Closed issue \".Net Core ARM32 SDK availability\" (#50) at dotnet/announcements","RelatedBody":"Referencing #29.\r\n\r\nWill it be possible to : \r\n\r\na) Provide ARM32 builds for the SDK at its current state\r\nor\r\nb) Provide links on how to build the .Net Core SDK for ARM32?\r\n\r\nThe thing is I am planning to use it in a virtual environnement, through proot + qemu-arm-static. This way I would be able to build and, more importantly, run unit tests on ARM32. Another thing I am planning to do is to setup a build environnement on i686 through virtualisation as qemu doesn't seem to be able to emulate x86_64 on i686 (but arm32 does seem to work well enough).\r\n\r\nThank you in advance.\r\n\r\nSergio\r\n\r\n"},{"Id":"6944555922","Type":"IssuesEvent","CreatedAt":"2017-12-05T10:46:06","Actor":"tioduke","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/50","RelatedDescription":"Opened issue \".Net Core ARM32 SDK availability\" (#50) at dotnet/announcements","RelatedBody":"Will it be possible to : \r\n\r\na) Provide ARM32 builds for the SDK at its current state\r\nor\r\nb) Provide links on how to build the .Net Core SDK for ARM32?\r\n\r\nThe thing is I am planning to use it in a virtual environnement, through proot + qemu-arm-static. This way I would be able to build and, more importantly, run unit tests on ARM32. Another thing I am planning to do is to setup a build environnement on i686 through virtualisation as qemu doesn't seem to be able to emulate x86_64 on i686 (but arm32 does seem to work well enough).\r\n\r\nThank you in advance.\r\n\r\nSergio\r\n\r\n"},{"Id":"6886438076","Type":"IssuesEvent","CreatedAt":"2017-11-21T19:28:57","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/49","RelatedDescription":"Opened issue \".NET Core Alpine Image Ready for Testing\" (#49) at dotnet/announcements","RelatedBody":"# .NET Core Alpine Image Ready for Testing\r\n\r\nAn [Alpine](https://hub.docker.com/_/alpine/)-based Docker image is now available for .NET Core. Alpine is much smaller than Debian, which we have used for the .NET Core base image to date. There have been many requests for an Alpine image. We are pleased to make it available. Please check out [.NET Core Docker Alpine Production Sample (Preview)](https://github.com/dotnet/dotnet-docker-samples/blob/master/dotnetapp-prod-alpine-preview/README.md) to see examples of using this image.\r\n\r\nWe have added two new images:\r\n\r\n- `2.1-runtime-alpine`\r\n- `2.1-runtime-deps-alpine`\r\n\r\nAlpine support is part of the .NET Core 2.1 release. .NET Core 2.1 images are currently provided at the [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/) repo, including the new Alpine images. .NET Core 2.1 images will be promoted to the [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) repo when .NET Core 2.1 is shipped as a Preview, expected to be early 2018.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker-nightly #500](https://github.com/dotnet/dotnet-docker-nightly/issues/500)\r\n\r\n## Details\r\n\r\n* [dotnet/dotnet-docker-nightly #480](https://github.com/dotnet/dotnet-docker-nightly/pull/480)\r\n* [dotnet/announcements #20](https://github.com/dotnet/announcements/issues/20)\r\n* [dotnet/dotnet-docker-samples #94](https://github.com/dotnet/dotnet-docker-samples/pull/94)\r\n\r\nThe primary goal of Alpine is very small deployments. We have been considering various design decisions to make .NET Core Alpine base images as small as possible to align with that. In this first iteration, we enabled [.NET Core 2.0 Globalization Invariant Mode](https://github.com/dotnet/announcements/issues/20) in order to reduce the default size of the image. This change reduced the image by ~30MB. You can see the reduction in size for .NET Core images relative to Debian in the following table.\r\n\r\n|2.1 Image|Debian|Alpine|\r\n|-----    |------|------|\r\n|`-deps`   |153MB (68MB compressed) |13.8 MB (6MB compressed)|\r\n|`-runtime`|222MB (96MB compressed) |82.5 (34MB compressed)|\r\n\r\nNote: The compressed size is what you will see in a [registry](https://hub.docker.com/r/microsoft/dotnet-nightly/tags/) and is the wire-size cost.\r\n\r\nWe are also considering saving more space by native-compiling fewer assemblies. .NET Core runtime assemblies are native-compiled with the [crossgen tool](https://github.com/dotnet/coreclr/blob/master/Documentation/building/crossgen.md) in the [Ready2Run format](https://github.com/dotnet/coreclr/blob/master/Documentation/botr/readytorun-overview.md). Native-compiled code delivers superior startup performance but at the cost of 2-3x larger files. We have the opportunity to compile less, skipping compiling assemblies in part or in whole. We believe that we can save at least another 10MB through compiling less without a material drop in performance. For scenarios that value size over startup or where wire cost is significant, it may be valuable to aggressively reduce the number/% of compilation.\r\n\r\nAlpine images are only available for .NET Core 2.1. At the current time, only Runtime images are available. We intend to offer SDK images at a later date.\r\n\r\nUse cases that cannot tolerate Globalization invariant mode can reset the `DOTNET_SYSTEM_GLOBALIZATION_INVARIANT` environment variable and install the ICU package. Please check out [.NET Core Docker Alpine Production Sample (Preview)](https://github.com/dotnet/dotnet-docker-samples/blob/master/dotnetapp-prod-alpine-preview/README.md) to see examples of using this image with and without Globalization Invariant Mode enabled.\r\n\r\n## Call to Action\r\n\r\nPlease test your workloads with the new Alpine image. In particular, we want to know if enabling .NET Core Globalization Invariant Mode is acceptable/appreciated.\r\n"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7050328155","Type":"IssuesEvent","CreatedAt":"2018-01-03T05:14:06","Actor":"tannergooding","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/15694","RelatedDescription":"Opened issue \"Make Vector128<T> and Vector256<T> work with the debugger.\" (#15694) at dotnet/coreclr","RelatedBody":"### Rationale\r\nCurrently `Vector128<T>` and `Vector256<T>` in the `System.Runtime.Intrinsics` namespace are opaque types.\r\n\r\nThis is great for the hardware intrinsics API, but it provides a very poor experience in the debugger.\r\n\r\nAs such, I propose that the types be extended with the `DebuggerTypeProxy` and `DebuggerDisplay` attributes to provide a better debugging experience.\r\n\r\n### Additional Thoughts\r\nI propose the `DebuggerDisplay` attribute should display a string of T elements.\r\n\r\nEx: For `Vector128<float>`, it would display `\"{e0, e1, e2, e3}\"`, for `Vector128<ushort>` it would display `\"{e0, e1, e2, e3, e4, e5, e6, e7}\"` (where `e#` is the value of that given element).\r\n\r\nI propose `DebuggerTypeProxy` should have several properties in the form of `public <type>[] <type>View` and there should be a property for each supported value of `T` (i.e. `float`, `double`, `byte`, `short`, `int`, `long`, `sbyte`, `ushort`, `uint`, and `ulong`).\r\n\r\nEx: `Vector128DebugView` would have `public byte[] ByteView {get;}`, `public float[] SingleView {get;}`, etc...\r\n\r\n### Notes\r\nIn doing a prototype for this proposal, I found that the debugger would always see `0` as the value of the underlying struct. I initially attempted to add serialization support, but that did not resolve the issue. \r\n\r\nHowever, adding private fields to the structs allowed it to work (I'm guessing the debugger is marshalling the type, or something similar).\r\n\r\nEx: I had to change `Vector128<T>` to the following in order for `DebuggerTypeProxy` and `DebuggerDisplay` to work:\r\n```C#\r\n[Intrinsic]\r\n[StructLayout(LayoutKind.Sequential, Size = 16)]\r\n[DebuggerTypeProxy(typeof(Vector128DebugView<>))]\r\n[DebuggerDisplay(\"{DebuggerDisplay,nq}\")]\r\npublic struct Vector128<T> where T : struct\r\n{\r\n    // These fields exist purely so debug view works\r\n    private ulong _lower;\r\n    private ulong _upper;\r\n}\r\n```\r\n\r\n"},{"Id":"7050121689","Type":"IssuesEvent","CreatedAt":"2018-01-03T03:14:01","Actor":"stevehayles","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/15693","RelatedDescription":"Opened issue \"Dotnet 'myApp.dll' hang running on arm32\" (#15693) at dotnet/coreclr","RelatedBody":"Running a very framework dependent console application with the command 'dotnet myapp.dll' causes a hang running on a simple yocto image on an Rpi3 (arm32)\r\n\r\nRunning dotnet --info produces the expected output of \r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n\r\nbut running any application including a very basic app that simply writes to the console completely hangs with zero output to the terminal.\r\n\r\nRunning with COREHOST_TRACE=1 produces similar output to what is seen running the app on another Linux machine but it hangs before the expected line \"Property TRUSTED_PLATFORM_ASSEMBLIES = ....\"\r\n\r\nThe 'installation' has been from the binary release at [https://dotnetcli.blob.core.windows.net/dotnet/Runtime/2.0.0/dotnet-runtime-2.0.0-linux-arm.tar.gz](url)\r\n\r\nThe final few lines of output before hanging are\r\n\r\n`Considering entry [runtime.linux-arm.Microsoft.NETCore.DotNetHostPolicy/2.0.0/runtimes/linux-arm/native/libhostpolicy.so] and probe dir [/opt/dotnet/shared/Microsoft.NETCore.App/2.0.0]\r\n    Local path query exists /opt/dotnet/shared/Microsoft.NETCore.App/2.0.0/libhostpolicy.so\r\n    Probed deps json and matched '/opt/dotnet/shared/Microsoft.NETCore.App/2.0.0/libhostpolicy.so'\r\nThe resolved JIT path is '/opt/dotnet/shared/Microsoft.NETCore.App/2.0.0/libclrjit.so'\r\nCoreCLR path = '/opt/dotnet/shared/Microsoft.NETCore.App/2.0.0/libcoreclr.so', CoreCLR dir = '/opt/dotnet/shared/Microsoft.NETCore.App/2.0.0/'`\r\n\r\nAt this stage ctrl+c has no effect and the process needs to be killed to recover the terminal\r\n\r\nThe full output is attached along with the application\r\n\r\n[output.txt](https://github.com/dotnet/coreclr/files/1599325/output.txt)\r\n[testApp.zip](https://github.com/dotnet/coreclr/files/1599326/testApp.zip)\r\n"},{"Id":"7049685685","Type":"PullRequestEvent","CreatedAt":"2018-01-02T23:44:09","Actor":"BruceForstall","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15692","RelatedDescription":"Merged pull request \"Disable jitdiff jobs\" (#15692) at dotnet/coreclr","RelatedBody":"They are failing now. Disable them until someone puts the effort\r\nin to make them fully work."}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7049840334","Type":"PullRequestEvent","CreatedAt":"2018-01-03T00:53:10","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8315","RelatedDescription":"Merged pull request \"Update CoreSetup to preview1-26102-03 (master)\" (#8315) at dotnet/cli","RelatedBody":"/cc @dotnet/dotnet-cli"},{"Id":"7049837954","Type":"IssuesEvent","CreatedAt":"2018-01-03T00:52:04","Actor":"jeremymeng","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8317","RelatedDescription":"Opened issue \"xunit test fail to load System.Reflection.Extensions when targeting netcoreapp1.0 and not referencing xunit.runner.visualstudio package\" (#8317) at dotnet/cli","RelatedBody":"As mentioned in https://github.com/xunit/xunit/issues/1601#issuecomment-354843968\r\n\r\n1. `dotnet new xunit`\r\n2. down targeting `netcoreapp1.0`\r\n3. upgrade xunit verions to `2.4.0-*`\r\n4. remove the `xunit.runner.visualstudio` package reference\r\n5. when restoring, use the xunit myget feed too: `https://www.myget.org/F/xunit/api/v3/index.json`\r\n6. `dotnet xunit`\r\n\r\n**Actual**:\r\n```\r\nDetecting target frameworks in repro.csproj...\r\nBuilding for framework netcoreapp1.0...\r\n  repro -> C:\\temp\\repro\\bin\\Debug\\netcoreapp1.0\\repro.dll\r\nRunning .NET Core 1.0.5 tests for framework netcoreapp1.0...\r\nerror: Could not load file or assembly 'System.Reflection.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'. The system cannot find the file specified.\r\n```\r\n\r\n**Expected**:\r\nThe removal of `xunit.runner.visualstudio` package shouldn't affect command line runs.\r\n\r\nIf we don't do step 4) then the test runs fine.\r\n\r\nDifferences in csproj/deps.json/asserts.json only shows the presence/absence of `xunit.runner.visualstudio` package. Nothing additional is restored by adding this package reference. @bradwilson suggested that .NET Core team should investigate.\r\n\r\nHere's the only diff in the csproj:\r\n\r\n![image](https://user-images.githubusercontent.com/7583839/34505898-20e7206c-efdd-11e7-986e-12a27923f1bb.png)\r\n\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\n.NET Command Line Tools (2.1.3)\r\n\r\nProduct Information:\r\n Version:            2.1.3\r\n Commit SHA-1 hash:  a0ca411ca5\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.14393\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.3\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.4\r\n  Build    : 7f262f453d8c8479b9af91d34c013b3aa05bc1ff\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"7049785153","Type":"IssuesEvent","CreatedAt":"2018-01-03T00:27:14","Actor":"mmisztal1980","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8316","RelatedDescription":"Opened issue \"dotnet restore fails to install packages from a private feed inside of a docker container\" (#8316) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n\r\nIn my solution, I have the following docker-compose.ci.yml file :\r\n**docker-compose.ci.yml**\r\n```yaml\r\nversion: '3'\r\n\r\nservices:\r\n  ci-build:\r\n    image: microsoft/aspnetcore-build:1.0-2.0    \r\n    volumes:\r\n      - .:/src\r\n      - \"${AppData}/NuGet/NuGet:/root/.nuget/NuGet\"\r\n      - \"${AppData}/NuGet/packages:/root/.nuget/packages\"\r\n    working_dir: /src\r\n    command: /bin/bash -c \"dotnet restore ./OS.Smog.Api.sln && dotnet publish ./OS.Smog.Api.sln -c Release -r debian.8-x64 -o ./obj/Docker/publish\"\r\n```\r\nI'm mounting 2 helper volumes in order to have the container resolve my private nuget feeds.\r\nI'm attempting to build the project using docker-compose.\r\n\r\n## Expected  behavior\r\n\r\nI expect the `dotnet restore` step to complete successfully\r\n\r\n## Actual behavior\r\n\r\n```\r\ndocker-compose -f docker-compose.ci.build.yml up\r\nRemoving ossmogapi_ci-build_1\r\nRecreating 1831727c5368_ossmogapi_ci-build_1 ...\r\nRecreating 1831727c5368_ossmogapi_ci-build_1 ... done\r\nAttaching to ossmogapi_ci-build_1\r\nci-build_1  |   Restore completed in 115.02 ms for /src/src/OS.DAL.PgSql.Migrator/OS.DAL.PgSql.Migrator.csproj.\r\nci-build_1  |   Restore completed in 14.26 ms for /src/src/OS.DAL/OS.DAL.csproj.\r\nci-build_1  |   Restore completed in 4.74 ms for /src/src/OS.Docker.TestKit/OS.Docker.TestKit.csproj.\r\nci-build_1  |   Restore completed in 18 ms for /src/src/OS.Domain/OS.Domain.csproj.\r\nci-build_1  |   Restoring packages for /src/src/OS.Smog.Api/OS.Smog.Api.csproj...\r\nci-build_1  |   Restore completed in 73.83 ms for /src/src/OS.DAL.PgSql/OS.DAL.PgSql.csproj.\r\nci-build_1  |   Restore completed in 20.13 ms for /src/src/OS.Smog.Validation/OS.Smog.Validation.csproj.\r\nci-build_1  |   Restore completed in 126.35 ms for /src/test/OS.DAL.PgSql.IntegrationTests/OS.DAL.PgSql.IntegrationTests.csproj.\r\nci-build_1  |   Restore completed in 79.04 ms for /src/test/OS.DAL.UnitTests/OS.DAL.UnitTests.csproj.\r\nci-build_1  |   Restore completed in 71.59 ms for /src/test/OS.Domain.UnitTests/OS.Domain.UnitTests.csproj.\r\nci-build_1  |   Restore completed in 68.47 ms for /src/test/OS.Smog.Api.FunctionalTests/OS.Smog.Api.FunctionalTests.csproj.\r\nci-build_1  |   Restore completed in 127.58 ms for /src/test/OS.Smog.Validation.UnitTests/OS.Smog.Validation.UnitTests.csproj.\r\nci-build_1  |   Restore completed in 216.83 ms for /src/test/OS.DAL.UnitTests/OS.DAL.UnitTests.csproj.\r\nci-build_1  |   Restore completed in 140.52 ms for /src/src/OS.DAL.PgSql.Migrator/OS.DAL.PgSql.Migrator.csproj.\r\nci-build_1  |   Restore completed in 73.42 ms for /src/src/OS.Smog.Api/OS.Smog.Api.csproj.\r\nci-build_1  | /src/src/OS.Smog.Api/OS.Smog.Api.csproj : error NU1102: Unable to find package OS.Data with version (>= 1.0.0-pre-201711181) [/src/OS.Smog.Api.sln]\r\nci-build_1  | /src/src/OS.Smog.Api/OS.Smog.Api.csproj : error NU1102:   - Found 3 version(s) in OpenSmog [ Nearest version: 0.0.1-pre-201711262 ] [/src/OS.Smog.Api.sln]\r\nci-build_1  | /src/src/OS.Smog.Api/OS.Smog.Api.csproj : error NU1102:   - Found 0 version(s) in nuget.org [/src/OS.Smog.Api.sln]\r\nci-build_1  | /src/src/OS.Smog.Api/OS.Smog.Api.csproj : error NU1102:   - Found 0 version(s) in PyraCloud [/src/OS.Smog.Api.sln]\r\nci-build_1  | /src/src/OS.Smog.Api/OS.Smog.Api.csproj : error NU1102: Unable to find package OS.Core.Queues with version (>= 1.0.0-pre-201711173) [/src/OS.Smog.Api.sln]\r\nci-build_1  | /src/src/OS.Smog.Api/OS.Smog.Api.csproj : error NU1102:   - Found 9 version(s) in OpenSmog [ Nearest version: 0.0.1-pre-201712292 ] [/src/OS.Smog.Api.sln]\r\nci-build_1  | /src/src/OS.Smog.Api/OS.Smog.Api.csproj : error NU1102:   - Found 0 version(s) in nuget.org [/src/OS.Smog.Api.sln]\r\nci-build_1  | /src/src/OS.Smog.Api/OS.Smog.Api.csproj : error NU1102:   - Found 0 version(s) in PyraCloud [/src/OS.Smog.Api.sln]\r\nci-build_1  |   Restore failed in 8.63 sec for /src/src/OS.Smog.Api/OS.Smog.Api.csproj.\r\nossmogapi_ci-build_1 exited with code 1\r\n```\r\nThe restore cmd finds the package version(s) in one of my private feeds, however it seems to fail to resolve the pre-release package versions.\r\n\r\n**Example :**\r\n|Package name|Private?|Required version|Version in private feed|\r\n|----------------|--------|-------------------|------------------------|\r\nOS.Core.Queries|Yes|>= 1.0.0-pre-201711173|0.0.1-pre-201712292\r\n\r\n**Is this an issue with `dotnet restore` ? or should I alter my naming convention somehow?**\r\n\r\n## Environment data\r\n\r\n```\r\nλ dotnet --info\r\n.NET Command Line Tools (2.1.2)\r\n\r\nProduct Information:\r\n Version:            2.1.2\r\n Commit SHA-1 hash:  5695315371\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.2\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.3\r\n  Build    : a9190d4a75f4a982ae4b4fa8d1a24526566c69df\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"7049446257","Type":"PullRequestEvent","CreatedAt":"2018-01-02T22:20:41","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8314","RelatedDescription":"Merged pull request \"Check if tput command exists before using it\" (#8314) at dotnet/cli","RelatedBody":"Fix #8311\r\n\r\n@eerhardt\r\n"},{"Id":"7049429445","Type":"PullRequestEvent","CreatedAt":"2018-01-02T22:15:35","Actor":"dotnet-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8315","RelatedDescription":"Opened pull request \"Update CoreSetup to preview1-26102-03 (master)\" (#8315) at dotnet/cli","RelatedBody":"/cc @dotnet/dotnet-cli"},{"Id":"7049185109","Type":"PullRequestEvent","CreatedAt":"2018-01-02T21:05:08","Actor":"kasper3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8314","RelatedDescription":"Opened pull request \"Check if tput command exists before using it\" (#8314) at dotnet/cli","RelatedBody":"Fix #8311\r\n\r\n@eerhardt\r\n"},{"Id":"7049085510","Type":"PullRequestEvent","CreatedAt":"2018-01-02T20:37:01","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8313","RelatedDescription":"Merged pull request \"[infra] Update wix version\" (#8313) at dotnet/cli","RelatedBody":"Put in release/2.0.0 instead"},{"Id":"7048908830","Type":"IssuesEvent","CreatedAt":"2018-01-02T19:46:29","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/8306","RelatedDescription":"Closed issue \"dotnet-nuget doesn't support verbosity\" (#8306) at dotnet/cli","RelatedBody":"```\r\ndotnet nuget push --source {uri} path.nupkg -v q\r\n\r\n# error: Unrecognized option '-v'\r\n\r\ndotnet nuget push --source {uri} path.nupkg --verbosity quiet\r\n\r\n# error: Unrecognized option '--verbosity'\r\n```\r\n\r\nHowever, \r\n\r\n```\r\ndotnet nuget --verbosity quiet push --source {uri} path.nupkg\r\n```\r\n\r\ndoesn't throw but doesn't quiet the verbosity either.\r\n\r\nThis breaks what --help quotes:\r\n\r\n```\r\nCommon options:\r\n  -v|--verbosity        Set the verbosity level of the command. Allowed values are q[uiet], m[inimal], n[ormal], d[etailed], and diag[nostic].\r\n  -h|--help             Show help.\r\n```\r\n\r\n### `--verbosity` is NOT a common option, only `--help` is"},{"Id":"7048828520","Type":"PullRequestEvent","CreatedAt":"2018-01-02T19:24:49","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/pull/8312","RelatedDescription":"Closed pull request \"Update wix version\" (#8312) at dotnet/cli","RelatedBody":""},{"Id":"7048802491","Type":"PullRequestEvent","CreatedAt":"2018-01-02T19:17:55","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8292","RelatedDescription":"Merged pull request \"Update CoreSetup to preview1-26102-01 (master)\" (#8292) at dotnet/cli","RelatedBody":"/cc @dotnet/dotnet-cli"},{"Id":"7048795635","Type":"PullRequestEvent","CreatedAt":"2018-01-02T19:16:12","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8312","RelatedDescription":"Opened pull request \"Update wix version\" (#8312) at dotnet/cli","RelatedBody":""},{"Id":"7048541763","Type":"IssuesEvent","CreatedAt":"2018-01-02T18:07:12","Actor":"eerhardt","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8311","RelatedDescription":"Opened issue \"dotnet-install.sh shouldn't require tput\" (#8311) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\nOn the base Alpine3.6 image, run `dotnet-install.sh`.\r\n\r\n## Expected  behavior\r\nThe script should install `dotnet` as usual, just like on any other Linux distro.\r\n\r\n## Actual behavior\r\n\r\n`/opt/code/scripts/obtain/dotnet-install.sh: line 27: tput: command not found`\r\n\r\n## Environment data\r\n`dotnet --info` output: N/A\r\n\r\n\r\n## Notes\r\n\r\nFrom my inspection, we are only using `tput` to change the console color during the install.  Printing colors on the console shouldn't be required in order to install use dotnet-install.sh.\r\n\r\nThis is going to mean that anyone who either a) wants to build the dotnet/cli repo or b) wants to use dotnet-install.sh is going to have to install this utility on their machine.\r\n\r\nSee https://github.com/dotnet/cli/pull/8227#discussion_r156692376"},{"Id":"7048512207","Type":"IssuesEvent","CreatedAt":"2018-01-02T17:59:13","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/8299","RelatedDescription":"Closed issue \"dotnet publish leaves dangling dangling process with open handles\" (#8299) at dotnet/cli","RelatedBody":"Between December 19 at 7:32am and December 20 at 7:32 am the [size-on-disk benchmark job](https://ci2.dot.net/job/dotnet_coreclr/job/perf/job/master/job/sizeondisk_x64/) began to fail.\r\n\r\nAfter some investigation I found that after the main benchmark code finishes it fails to delete the temporary directory because there are open handles to files within. The open handles are held by an orphan `dotnet` process spawned from the `dotnet publish` command.\r\n\r\n## Steps to reproduce\r\n0. Confirm there are no `dotnet` processes running\r\n1. Install dotnet with the powershell script using channel 'master'\r\n2. Create a new console application with `dotnet new console`\r\n3. Publish this app with `dotnet publish`\r\n4. Check for any running dotnet processes\r\n\r\nOr download and run the [reduced version of the failing benchmark](https://git.io/vbdxI)\r\n\r\n## Expected  behavior\r\nNo `dotnet` processes should be running and the benchmark should cleanup and exit successfully\r\n\r\n## Actual behavior\r\nAn orphan `dotnet` process with open handles is running and the benchmark will fail\r\n\r\n## Environment data\r\ndotnet version is latest master\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n\r\n\r\n\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7048275369","Type":"IssuesEvent","CreatedAt":"2018-01-02T16:59:29","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/598","RelatedDescription":"Closed issue \"SslStream.ShutdownAsync available?\" (#598) at dotnet/standard","RelatedBody":"In .NET Core, we can use SslStream.ShutdownAsync to properly shut down an SSL stream. But this API is not present in .NET Standard. Will this API be added to .NET Standard? Or how can we correctly shutdown an SSL stream?"},{"Id":"7046686948","Type":"IssuesEvent","CreatedAt":"2018-01-02T09:29:25","Actor":"srungta","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/616","RelatedDescription":"Opened issue \"Different implementations for different frameworks\" (#616) at dotnet/standard","RelatedBody":"I have a .NetStandard2.0 class library that has the following setup.\r\n\r\nInterface: \r\n`IConfigProvider`\r\n\r\nImplementations:\r\n`NetCoreConfigProvider` -to be used in  .net core 2 apps\r\n`NetFrameworkConfigProvider` - intends to target .net framework 4.6.1\r\n\r\nIn my `.csproj` file i have specified \r\n`<TargetFrameworks>netstandard2.0;net461</TargetFrameworks>`\r\n\r\n`NetCoreConfigProvider` uses packages which is not `4.6.1` compatible.\r\n\r\nMy initial `.csproj` file looked like \r\n\r\n`   <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Hosting\" Version=\"2.0.1\" />\r\n    <PackageReference Include=\"Microsoft.Extensions.Configuration.AzureKeyVault\" Version=\"2.0.0\" />\r\n    <PackageReference Include=\"Microsoft.Extensions.Configuration.Binder\" Version=\"2.0.0\" />\r\n    <PackageReference Include=\"Microsoft.Extensions.Configuration.Json\" Version=\"2.0.0\" />\r\n    <PackageReference Include=\"Microsoft.Azure.KeyVault\" Version=\"2.3.2\" />\r\n    <PackageReference Include=\"Microsoft.IdentityModel.Clients.ActiveDirectory\" Version=\"3.17.3\" />\r\n    <PackageReference Include=\"System.Configuration.ConfigurationManager\" Version=\"4.4.1\" />\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.3\" />\r\n     </ItemGroup>`\r\n\r\nI changed this to \r\n`<ItemGroup Condition=\"'$(TargetFramework)' == 'netstandard2.0'\">\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Hosting\" Version=\"2.0.1\" />\r\n    <PackageReference Include=\"Microsoft.Extensions.Configuration.AzureKeyVault\" Version=\"2.0.0\" />\r\n    <PackageReference Include=\"Microsoft.Extensions.Configuration.Binder\" Version=\"2.0.0\" />\r\n    <PackageReference Include=\"Microsoft.Extensions.Configuration.Json\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.Azure.KeyVault\" Version=\"2.3.2\" />\r\n    <PackageReference Include=\"Microsoft.IdentityModel.Clients.ActiveDirectory\" Version=\"3.17.3\" />\r\n    <PackageReference Include=\"System.Configuration.ConfigurationManager\" Version=\"4.4.1\" />\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.3\" />\r\n  </ItemGroup>`\r\n\r\nand added macros like `#if NETSTANDARD2_0` in my `NetCoreConfigProvider`\r\n\r\nIs there a better way to set up the project than this?\r\n\r\n\r\n"},{"Id":"7042271379","Type":"IssuesEvent","CreatedAt":"2017-12-30T09:54:33","Actor":"Sergio0694","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/615","RelatedDescription":"Opened issue \"Missing binary/namespace from NuGet package in .NET Standard 2.0 library\" (#615) at dotnet/standard","RelatedBody":"Hello, I'm writing a .NET Standard 2.0 library and I'm having issues with a NuGet package I'd like to use (https://www.nuget.org/packages/Alea/) which I think is only supported for PCL libraries right now, and was wondering if there was a workaround available.\r\n\r\nI can install the package just fine, but its assemblies aren't visible in the drop-down list of the dependencies, and I don't have any of the namespaces in the project:\r\n\r\n![image](https://user-images.githubusercontent.com/10199417/34453242-1c63ff6e-ed4f-11e7-9bc0-dd75319bff04.png)\r\n\r\nI tried to manually link the net45 binaries by modifying the .csproj file for the library, like this:\r\n\r\n```xml\r\n<ItemGroup>\r\n    <Reference Include=\"Alea\">\r\n        <HintPath>..\\..\\..\\..\\.nugget.packages\\alea\\3.0.4\\lib\\net45\\alea.dll</HintPath>\r\n    </Reference>\r\n    <!-- Same for Alea.Parallel -->\r\n</ItemGroup>```\r\n\r\nAnd this actually **works perfectly fine** - I can use the library both from a .NET Core 2.0 application, and if I use it from a .NET Framework application (where those GPU libraries are originally supposed to work), I can also use the code from that package just fine.\r\n\r\nThe problem is that this workaround is only looking for the net45 binaries, and I'm not even sure they'd get installed in that path automatically regardless of the PC building the solution.\r\n\r\nMy question is:\r\n\r\n> Since the library itself works just fine in a .NET Standard 2.0 library, is there a way to (manually) make it so that these missing binaries are correctly linked/referenced and added to the project, so that their namespaces are available when coding in the project?\r\n\r\nSee the original Stack Overflow question here: https://stackoverflow.com/questions/48030077/alea-gpu-on-net-standard-2-0-will-this-workaround-work\r\n\r\nThank you for your help!\r\n"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7049986998","Type":"IssuesEvent","CreatedAt":"2018-01-03T02:04:39","Actor":"eschneider999","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/26121","RelatedDescription":"Opened issue \"Improve System.Data.SqlClient Error messages\" (#26121) at dotnet/corefx","RelatedBody":"I would like to improve some error message, why it has never been done \"Who knows\"\r\n\r\nexample: String or binary data would be truncated.\r\n\r\nInclude the column name or parameter name would be helpful right?\r\n\r\nThere's a few others that have been driving us devs nuts for years...\r\n\r\nCurrently I'm targeting Sql Client and I think I have a fix for it, but can't figure out how to test it. The tests in the sln are strange to me, have no idea how to run them. Can't seem to reference the built dll either.\r\n\r\nDon't they have regular unit tests?\r\n\r\nI'm look for a way to write a unit test for the change I did and test the new code.\r\n\r\nThanks,\r\nEric\r\n"},{"Id":"7049936614","Type":"IssuesEvent","CreatedAt":"2018-01-03T01:38:56","Actor":"wtgodbe","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/281","RelatedDescription":"Closed issue \"System.Diagnostics.FileVersionInfo different/incorrect behaviors compared to .NET Framework\" (#281) at dotnet/corefx","RelatedBody":"FileVersionInfo solely depends on System.IO.FileSystem (and all of its dependencies, including System.IO, System.Threading.Tasks, etc) just to do a File.Exists in GetVersionInfo. We should remove this and instead see if we can use the return value of GetFileVersionInfoSizeEx to mimic the same behavior.\n"},{"Id":"7049935944","Type":"PullRequestEvent","CreatedAt":"2018-01-03T01:38:36","Actor":"wtgodbe","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/25978","RelatedDescription":"Merged pull request \"Throw ArgumentException for non-absolute path in GetVersionInfo\" (#25978) at dotnet/corefx","RelatedBody":"For issue https://github.com/dotnet/corefx/issues/281\r\n\r\n@jkotas PTAL - is this the right fix? The added test is passing locally. \r\nAlso CC @morganbr in case there are any related security issues."},{"Id":"7049894572","Type":"PullRequestEvent","CreatedAt":"2018-01-03T01:18:31","Actor":"caesar1995","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/26119","RelatedDescription":"Merged pull request \"Fix Base64Stream encodes the last byte twice and corrupts data\" (#26119) at dotnet/corefx","RelatedBody":"When sending a mail using System.Net.Mail and when an attachment size is (3N-1)*0x4400 + 1 : \r\nwhere N = 1, 2, 3, .... (e.g. 34817, 87041, ...), the last byte of the attachment is duplicated.\r\nFor example, when an attachment contains \"AAA...Z\" (total 34817 bytes), the sent message's attachment \r\nbecomes (after decoded from Base64) \"AAA...ZZ\" (total 34818 bytes).\r\n\r\nWe use Base64Stream.EncodeBytes() for our mail attachment. This issue corrupts the data (although \r\nit seems benign for a text data, when the attachment is some binary data, duplicating the last byte \r\ncan make the entire data unusable).\r\n\r\nTo fix the issue, after finished encoding the last byte of a byte array with size (3N-1)*0x4400 + 1, the \r\npadding state is set from 2 to 1, and we finished encoding of the last byte (count = 1). The return value \r\nshould reflect how many bytes we have successfully encoded. Currently we are returning 0 \r\n(we set cur = offset, return cur - offset, which is guaranteed 0), which is not correct, because we have \r\nencode 1 byte, and we need to increment \"cur\" (current encoded position in buffer). Adding cur++ before \r\nreturn cur – offset will solve the issue.\r\n\r\nThis issue was reported in internal bug 183952 and 215982."},{"Id":"7049893506","Type":"PullRequestEvent","CreatedAt":"2018-01-03T01:18:04","Actor":"bartonjs","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/26115","RelatedDescription":"Merged pull request \"Add cert thumprint methods which accept a HashAlgorithmName\" (#26115) at dotnet/corefx","RelatedBody":"Fixes #16493."},{"Id":"7049893495","Type":"IssuesEvent","CreatedAt":"2018-01-03T01:18:03","Actor":"bartonjs","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/16493","RelatedDescription":"Closed issue \"X509Certificate GetCertHash and GetCertHashString with SHA256\" (#16493) at dotnet/corefx","RelatedBody":"As the current implementation uses SHA1 for calculating X509 hashes and SHA1 can't be considered safe anymore the hash calculation should be updated to SHA256. E.G.:\r\n\r\n```csharp\r\nX509Certificate cert = new X509Certificate(\"mycert.pxf\");\r\nbyte[] b = cert. GetCertHash256()\r\nstring s = cert. GetCertHashString256()\r\n```\r\n\r\nAlternatively, a variable hashing algorithm as function parameter would be desirable for future hashing methods.\r\nA use case is the ssl certificate validation on IoT devices to prevent man-in-the-middle attacks. Many IoTs connect to a web api  via ssl and thus, should validate the server’s certificate. With limited compute power on the device the certificate’s thumbprint can be verified much cheaper than the whole chain of certificates.\r\nFor example, the validation of a server certificate can be done with python on a Raspberry:\r\n\r\n```python\r\nimport ssl\r\nfrom cryptography import x509\r\nfrom cryptography.hazmat.backends import default_backend\r\nfrom cryptography.hazmat.primitives import hashes\r\n\r\nthumbprint = 'e959fd5c80f76df7a593aae09686e604f74be8b0'\r\npem = ssl.get_server_certificate( (host, port) )\r\ncertx509 = x509.load_pem_x509_certificate(str.encode(pem), default_backend())\r\ntp = certx509.fingerprint(hashes.SHA256())\r\ntpHex = ''.join('{:02x}'.format(x) for x in tp)\r\nif tpHex != thumbprint:\r\n\tprint(‘Validation failed’)\r\n```"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7050099740","Type":"IssuesEvent","CreatedAt":"2018-01-03T03:02:53","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23927","RelatedDescription":"Closed issue \"VB: VisualBasicAddParameterCodeFixProvider should not crash when code has semantic errors\" (#23927) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\n\r\nVisual Studio Community 2017 v15.5.1\r\n\r\n**Steps to Reproduce**:\r\n\r\nType in the following code in a VB console project:\r\n\r\n```vb\r\nPublic Module Module1\r\n  Private Class Foo\r\n    Public Sub New(Arg1 As Integer)\r\n    End Sub\r\n\r\n    Public Sub New(Arg1 As Integer, Arg2 As Integer)\r\n    End Sub\r\n  End Class\r\n\r\n  Public Sub Main()\r\n    Dim x = New Foo(, 0) '<--- this line has an error (first argument not specified)\r\n  End Sub\r\nEnd Module\r\n```\r\n\r\nThe editor will correctly put a red squiggle on `Foo` and complain than an argument has not been specified in that constructor call, but when you hover over the squiggle to see the error, the `VisualBasicAddParameterCodeFixProvider` is triggered and crashes:\r\n\r\n![vs_addparamprovider_crash](https://user-images.githubusercontent.com/20465797/34341964-d48b5a3c-e9b3-11e7-8fb2-258970770c0d.png)\r\n\r\nIf you click the Enable button in that error message near the top, then hover over the red squiggly again it crashes again. You can repeat this as many times as you want and it crashes every time. The stack trace given is:\r\n\r\n```\r\nSystem.ArgumentNullException : Value cannot be null.\r\nParameter name: node\r\n   at Microsoft.CodeAnalysis.VisualBasic.VBSemanticModel.GetTypeInfoForNode(SyntaxNode node,CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.VisualBasic.VBSemanticModel.GetTypeInfoCore(SyntaxNode node,CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.AddParameter.AbstractAddParameterCodeFixProvider`6.DetermineFirstArgumentToAdd(SemanticModel semanticModel,ISyntaxFactsService syntaxFacts,StringComparer comparer,IMethodSymbol method,SeparatedSyntaxList`1 arguments,TArgumentSyntax argumentOpt)\r\n   at async Microsoft.CodeAnalysis.AddParameter.AbstractAddParameterCodeFixProvider`6.HandleObjectCreationExpressionAsync[TArgumentSyntax,TAttributeArgumentSyntax,TArgumentListSyntax,TAttributeArgumentListSyntax,TInvocationExpressionSyntax,TObjectCreationExpressionSyntax](<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.AddParameter.AbstractAddParameterCodeFixProvider`6.RegisterCodeFixesAsync[TArgumentSyntax,TAttributeArgumentSyntax,TArgumentListSyntax,TAttributeArgumentListSyntax,TInvocationExpressionSyntax,TObjectCreationExpressionSyntax](<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformActionAsync(<Unknown Parameters>)\r\n   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)\r\n```\r\n\r\n**Expected Behavior**:\r\n\r\nIt should not crash. This seems similar to #23807 and it appears as if these code fix providers don't have the same resilience of the core compilers. In both issues, the compiler reports the syntax/semantic errors without crashing, it would be great if the code fix providers could leverage that resilience in their analysis before triggering 👍\r\n\r\nCC: @jcouv @dpoeschl \r\nPS: Merry Christmas!"},{"Id":"7050099751","Type":"PullRequestEvent","CreatedAt":"2018-01-03T03:02:52","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/23933","RelatedDescription":"Merged pull request \"AddParameter should handle and bail out on omitted argument\" (#23933) at dotnet/roslyn","RelatedBody":"### Customer scenario\r\nIn VB, invoke a constructor with an omitted argument `New C(, 0)`. The error for a missing argument triggers the GenerateConstructor/AddParameter code fixers.\r\nThat code fixer should handle this case, by bailing out (don't offer a fix).\r\n\r\n### Bugs this fixes\r\nFixes https://github.com/dotnet/roslyn/issues/23927\r\n\r\n### Risk\r\n### Performance impact\r\nLow. Adding null check.\r\n\r\n### Is this a regression from a previous update?\r\nNo.\r\n\r\n### How was the bug found?\r\nReported by customer"},{"Id":"7050069330","Type":"IssuesEvent","CreatedAt":"2018-01-03T02:47:16","Actor":"jamesqo","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/24008","RelatedDescription":"Opened issue \"[Proposal] Offer to capture a method/property that is repeatedly invoked in a local variable\" (#24008) at dotnet/roslyn","RelatedBody":"**Example scenario:**\r\n\r\n```cs\r\nvar root = await context.Document.GetSyntaxRootAsync(context.CancellationToken).ConfigureAwait(false);\r\nvar semanticModel = await context.Document.GetSemanticModelAsync(context.CancellationToken).ConfigureAwait(false);\r\n```\r\n\r\nPlacing the cursor over `context.Document` and pressing Ctrl+. should yield a code fix like\r\n\r\n```cs\r\nvar document = context.Document;\r\n// <first location where context.Document is referenced in the method>\r\n...\r\nvar root = await document.GetSyntaxRootAsync(context.CancellationToken).ConfigureAwait(false);\r\nvar semanticModel = await document.GetSemanticModelAsync(context.CancellationToken).ConfigureAwait(false);\r\n```"},{"Id":"7050053312","Type":"IssuesEvent","CreatedAt":"2018-01-03T02:38:58","Actor":"jamesqo","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/24007","RelatedDescription":"Opened issue \"[Feature Request] Offer autocompletion for members that have not been defined but have been invoked\" (#24007) at dotnet/roslyn","RelatedBody":"**Scenarios:**\r\n\r\n```cs\r\nvoid Foo()\r\n{\r\n    Foobar();\r\n}\r\n\r\nvoid F[|]\r\n```\r\n\r\n```cs\r\nint foo = new Bar().Foobar;\r\n\r\nclass Bar\r\n{\r\n    public int F[|]\r\n}\r\n```\r\n\r\nIt would be nice if `Foobar` appeared in the editor completion list for both of these cases. It's pretty common for people to write out the invocation of the method before they actually define it."},{"Id":"7049905156","Type":"IssuesEvent","CreatedAt":"2018-01-03T01:23:31","Actor":"ivanbasov","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/24006","RelatedDescription":"Opened issue \"Null reference exception on shutdown VS with Interactive window executing\" (#24006) at dotnet/roslyn","RelatedBody":"From VSO: 514822\r\n```\r\nMicrosoft.VisualStudio.InteractiveWindow!Microsoft.VisualStudio.InteractiveWindow.InteractiveWindow.UIThread[[Microsoft.VisualStudio.Text.Span,_Microsoft.VisualStudio.Text.Data]]\r\nat Microsoft.VisualStudio.InteractiveWindow!Microsoft.VisualStudio.InteractiveWindow.InteractiveWindow.Microsoft.VisualStudio.InteractiveWindow.IInteractiveWindow.WriteLine in InteractiveWindow.cs\r\nat Microsoft.VisualStudio.InteractiveWindow!Microsoft.VisualStudio.InteractiveWindow.InteractiveWindowWriter.WriteLine in OutputWriter.cs\r\nat mscorlib.ni!System.IO.TextWriter.WriteLine in textwriter.cs\r\nat Microsoft.CodeAnalysis.InteractiveFeatures!Microsoft.CodeAnalysis.Interactive.InteractiveHost.ReportProcessExited in InteractiveHost.cs\r\nat Microsoft.CodeAnalysis.InteractiveFeatures!Microsoft.CodeAnalysis.Interactive.InteractiveHost.OnProcessExited in InteractiveHost.cs\r\nat Microsoft.CodeAnalysis.InteractiveFeatures!Microsoft.CodeAnalysis.Interactive.InteractiveHost+RemoteService+__c__DisplayClass8_0 in InteractiveHost.RemoteService.cs\r\n```"},{"Id":"7049840952","Type":"IssuesEvent","CreatedAt":"2018-01-03T00:53:27","Actor":"ehasis","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/24005","RelatedDescription":"Opened issue \"VB.NET Object initialization can be simplified (IDE0017) bulb not working\" (#24005) at dotnet/roslyn","RelatedBody":"**Version Used**: Visual Studio 2017 - 15.5.2\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. In any VB.NET project, consider the following code:\r\n```vb\r\nClass Customer\r\n    Public Property Age As Integer\r\nEnd Class\r\n\r\nSub Main()\r\n    Dim c = New Customer()\r\n    c.Age = 21\r\nEnd Sub\r\n```\r\n\r\n**Expected Behavior**: Show quick action bulb for \"Object initialization can be simplified\" in the `Dim c = New Customer()` line.\r\n\r\n**Actual Behavior**: Neither suggestion (dots under `New` keyword) nor ctrl+. shows the quick action bulb.\r\n\r\n**Note 1**: I tried to turn off and on the \"Prefer object initializer\" setting in the Tools/Options/Text Editor/Basic/Code Style/General.\r\n\r\n**Note 2**: This problem does not manifest in a C# project (works as expected)."},{"Id":"7049517657","Type":"IssuesEvent","CreatedAt":"2018-01-02T22:42:37","Actor":"stakx","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/24004","RelatedDescription":"Opened issue \"C# compiler only: does not produce complete metadata for optional `DateTime` parameter with default value `default(DateTime)`\" (#24004) at dotnet/roslyn","RelatedBody":"### Version Used:\r\nVisual Studio 15.5.2\r\n\r\n### Steps to Reproduce:\r\n\r\n1. Compile and run the following C# program. Note that there will be a runtime error:\r\n\r\n   ```csharp\r\n   public class SomeType\r\n   {\r\n       public void Method(DateTime timestamp = default(DateTime)) { }\r\n   }\r\n\r\n   class Program\r\n   {\r\n       static void Main()\r\n       {\r\n           var parameter = typeof(SomeType).GetMethod(\"Method\").GetParameters()[0];\r\n           System.Diagnostics.Debug.Assert(object.Equals(parameter.DefaultValue, default(DateTime)));\r\n           // Accessing `parameter.DefaultValue` will throw:\r\n           // System.FormatException : Encountered an invalid type for a default value.\r\n       }\r\n   }\r\n   ```\r\n\r\n2.  To back up the claim that this is a problem with the C# compiler, let's do the same in VB.NET. Compile and run the following VB.NET program, which is equivalent to the above C# program. Note that there will be no runtime errors.\r\n\r\n   ```vb\r\n   Public Class SomeType\r\n       Public Sub Method(Optional timestamp As DateTime = Nothing)\r\n       End Sub\r\n   End Class\r\n\r\n   Module Program\r\n       Sub Main()\r\n           Dim parameter = GetType(SomeType).GetMethod(\"Method\").GetParameters()(0)\r\n           System.Diagnostics.Debug.Assert(parameter.DefaultValue = DirectCast(Nothing, DateTime))\r\n           ' This should work just fine.\r\n       End Sub\r\n   End Module\r\n   ```\r\n\r\nI'm providing a solution containing xUnit.NET tests demonstrating the same problem in some more detail: \r\n[DateTimeBug.zip](https://github.com/dotnet/roslyn/files/1598858/DateTimeBug.zip)\r\n\r\n### Expected Behavior:\r\n\r\nBoth the C# program and the equivalent VB.NET program should terminate without producing any error.\r\n\r\n### Actual Behavior:\r\n\r\nThe C# program throws a `System.FormatException` with message _\"Encountered an invalid type for a default value\"_.\r\n\r\n### Cause:\r\n\r\n**TL;DR:** The C# compiler does not place a `[DateTimeConstant]` attribute on the optional method parameter.\r\n\r\nDefault values get embedded in IL metadata. In the case of primitive types, the default value gets an entry in the `Constant` metadata table. All other types must have their default value encoded via custom attributes. The framework appears to support default values for two non-primitive types: `System.DateTime` and  `System.Decimal`. Default values for those are embedded in metadata using `System.Runtime.CompilerServices.DateTimeConstantAttribute` and `System.Runtime.CompilerServices.DecimalConstantAttribute`, respectively.\r\n\r\nUnlike the VB.NET compiler, the C# compiler does not produce a `DateTimeConstantAttribute`. Instead, it treats `DateTime` like it would treat any other `struct`.\r\n\r\nHere's the IL metadata output (as reported by ILDASM) for the above two programs:\r\n\r\n```\r\n// IL output produced by the C# compiler:\r\n.method public hidebysig instance void  Method([opt] valuetype [mscorlib]System.DateTime timestamp) cil managed\r\n{\r\n  .param [1] = nullref\r\n  // ...\r\n}\r\n```\r\n\r\n```\r\n// IL output produced by the VB.NET compiler:\r\n.method public instance bool  Method([opt] valuetype [mscorlib]System.DateTime timestamp) cil managed\r\n{\r\n  .param [1]\r\n  .custom instance void [mscorlib]System.Runtime.CompilerServices.DateTimeConstantAttribute::.ctor(int64) = ( 01 00 00 00 00 00 00 00 00 00 00 00 ) \r\n  // ...\r\n}\r\n```\r\n"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7050284338","Type":"PullRequestEvent","CreatedAt":"2018-01-03T04:47:31","Actor":"jcouv","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5186","RelatedDescription":"Opened pull request \"Add public API and fix some issues to allow verifying Roslyn tests\" (#5186) at dotnet/corert","RelatedBody":"@ArztSamuel @jkotas @VSadov  Here is another stab at a public API for ILVerify.\r\nThe ILVerify program, the ILVerify tests and the Roslyn tests all rely on the same API, summarized below. There are two APIs that are internal and used by the ILVerify tests.\r\n```C#\r\nnamespace ILVerify\r\n{\r\n    public delegate bool ShouldVerifyMethod(string name);\r\n\r\n    public interface IResolver\r\n    {\r\n        PEReader Resolve(AssemblyName name);\r\n    }\r\n\r\n    public class Verifier\r\n    {\r\n        public ShouldVerifyMethod ShouldVerifyMethod { set; } // Used by ILVerify program to filter which methods should be verified vs. skipped\r\n        public Verifier(IResolver resolver);\r\n        internal Verifier(SimpleTypeSystemContext context); // Used by the ILVerify tests\r\n        public void SetSystemModuleName(AssemblyName name);\r\n        public VerificationResult Verify(AssemblyName moduleToVerify);\r\n    }\r\n\r\n    public class VerificationResult\r\n    {\r\n        public int NumErrors = 0;\r\n        public string Message = string.Empty;\r\n        internal IEnumerable<VerifierError> _errors; // Note: there may be fewer errors recorded here than counted in NumErrors, which also counts exceptions. Used by the ILVerify tests\r\n    }\r\n\r\n    public class VerifierException : Exception\r\n    {\r\n        public VerifierException(string message) : base(message)\r\n        {\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nNote 1: there is auto-discovery feature for the system module. It is required for Roslyn tests which create their own core library, but the test framework doesn't know when that is the case. If this feature feels wrong, I can further explore a Roslyn-side solution.\r\n\r\nNote 2: the `SimpleTypeSystemContext` keeps a cache of `EcmaModule`s (`_modules`). That is currently keyed on simple name instead of full name. That's because I don't know how to get a full name from an `EcmaModule` or `MetadataReader` (see `CreateModule` method). Any tips?\r\n\r\nIf the API looks good, I will clean up this PR (removing strong name using Roslyn key, switch back to an exe).\r\n"},{"Id":"7049265097","Type":"PullRequestEvent","CreatedAt":"2018-01-02T21:28:08","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5154","RelatedDescription":"Merged pull request \"Automatic generation of method export file for shared libraries\" (#5154) at dotnet/corert","RelatedBody":"This PR adds automatic generation of `.def`, `.exports` and `.map` passed with linker options `/DEF`, `exported_symbols_list` and `version-script` for building shared libraries on Windows, macOS and Linux respectively.\r\n\r\nBuilding shared libraries on all platforms is now a simple:\r\n```bash\r\ndotnet build /t:LinkNative /p:NativeLib=Shared\r\n```\r\n\r\nA good side effect of this change is that on non-Windows platforms it shaves off about 2MB from the produced binary because internally used `NativeCallable` methods are no longer exported by default\r\n\r\nFixes #4986 "},{"Id":"7048387812","Type":"PullRequestEvent","CreatedAt":"2018-01-02T17:29:27","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5185","RelatedDescription":"Opened pull request \"Update the way metadata blobs get hooked up\" (#5185) at dotnet/corert","RelatedBody":"This is mostly a mechanical change: when MRT100.dll was brought up on Project X, a new property got added to metadata manager: `SupportsReflection`.\r\n\r\nAll the metadata blobs got always hooked up into the dependency graph, but `SupportsReflection` was used to skip emitting them (because MRT100.dll has a base class library that doesn't have fancy reflection or type loader anyway, so no point in emitting the blobs). Turns out this is kind of backwards: metadata managers have different needs when it comes to what blobs will be generated (as proven by the ugly `#if !CORERT` we had in MetadataManager.cs). Metadata manager should decide what blobs are needed. This commit makes the hookup behavior polymorphic.\r\n\r\nAfter I did that, this actually found places in the compiler that were still injecting blob-required dependencies into the graph that triggered generation of all sorts of garbage that we didn't need because we don't generate the blob (we probably still generated the unreferenced garbage in the obj file though).\r\n\r\nThe remaining places that call `SupportsReflection` serve as a pretty good marker for things we should probably move to metadata manager too (in the same fashion we moved the reflection dependencies)."},{"Id":"7047981764","Type":"PullRequestEvent","CreatedAt":"2018-01-02T15:51:13","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5184","RelatedDescription":"Merged pull request \"Update CoreCLR.issues.targets\" (#5184) at dotnet/corert","RelatedBody":"I \"broke\" this test in my reflection changes.\r\n\r\nThe changes in reflectability made it possible to detect that we're not doing the right thing [here](https://github.com/dotnet/coreclr/blob/0bb37fde2befd38d4a082d5c0eb269ae3e35b546/tests/src/Loader/classloader/regressions/529206/vsw529206StaticCctor.cs#L55).\r\n\r\nThe test was passing for the wrong reason."},{"Id":"7047980447","Type":"PullRequestEvent","CreatedAt":"2018-01-02T15:50:54","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5181","RelatedDescription":"Merged pull request \"Fix WASM build\" (#5181) at dotnet/corert","RelatedBody":"My last change broke WebAssembly build"},{"Id":"7047772513","Type":"PullRequestEvent","CreatedAt":"2018-01-02T15:01:30","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5184","RelatedDescription":"Opened pull request \"Update CoreCLR.issues.targets\" (#5184) at dotnet/corert","RelatedBody":"I \"broke\" this test in my reflection changes.\r\n\r\nThe changes in reflectability made it possible to detect that we're not doing the right thing [here](https://github.com/dotnet/coreclr/blob/0bb37fde2befd38d4a082d5c0eb269ae3e35b546/tests/src/Loader/classloader/regressions/529206/vsw529206StaticCctor.cs#L55).\r\n\r\nThe test was passing for the wrong reason."},{"Id":"7047745992","Type":"IssuesEvent","CreatedAt":"2018-01-02T14:55:18","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/5183","RelatedDescription":"Opened issue \"Rethrown exception need to clear stack trace\" (#5183) at dotnet/corert","RelatedBody":"```csharp\r\ninternal class Program\r\n{\r\n    public static void Two()\r\n    {\r\n        throw new Exception(\"Hello\");\r\n    }\r\n\r\n    public static Exception One()\r\n    {\r\n        try\r\n        {\r\n            Two();\r\n        }\r\n        catch (Exception ex)\r\n        {\r\n            Console.WriteLine(ex.StackTrace);\r\n            Console.WriteLine(\"----\");\r\n            return ex;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private static int Main()\r\n    {\r\n        Exception exception = One();\r\n\r\n        try\r\n        {\r\n            throw exception;\r\n        }\r\n        catch (Exception ex)\r\n        {\r\n            Console.WriteLine(ex.StackTrace);\r\n        }\r\n\r\n        return 100;\r\n    }\r\n}\r\n```\r\n\r\nOn the CLR, this will print:\r\n\r\n```\r\n   at Program.Two()\r\n   at Program.One()\r\n----\r\n   at Program.Main()\r\n```\r\n\r\nOn CoreRT this will print:\r\n\r\n```\r\n   at ReflectionTest.Two() + 0x32\r\n   at ReflectionTest.One() + 0x1e\r\n\r\n----\r\n   at ReflectionTest.Two() + 0x32\r\n   at ReflectionTest.One() + 0x1e\r\n   at ReflectionTest.Main() + 0x33\r\n\r\n```"},{"Id":"7047518369","Type":"IssuesEvent","CreatedAt":"2018-01-02T13:55:07","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/5182","RelatedDescription":"Opened issue \"Build separate runtime libraries with and without server GC\" (#5182) at dotnet/corert","RelatedBody":"Server GC costs about 100 kB in size on disk on x64 and everyone is paying the price for the option to turn it on. It might make sense to have two flavors of the runtime LIB files - one with server GC support and one without.\r\n\r\nWe would choose something reasonable as the default and have an MSBuild property that lets users choose which LIB file we should link against at compile time.\r\n\r\n#4591 is the pull request that enabled server GC - we just need to factor the build in a way that we generate two libraries (one with server GC enabled, and one without). Then update the targets files to pick the right runtime (on [Unix](https://github.com/dotnet/corert/blob/8ceb9d93892fdc5357342c37fa3c3cc255d33c0c/src/BuildIntegration/Microsoft.NETCore.Native.Unix.props#L48), on [Windows](https://github.com/dotnet/corert/blob/8ceb9d93892fdc5357342c37fa3c3cc255d33c0c/src/BuildIntegration/Microsoft.NETCore.Native.Windows.props#L39))."}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7048601904","Type":"PullRequestEvent","CreatedAt":"2018-01-02T18:23:55","Actor":"johnbeisner","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1837","RelatedDescription":"Opened pull request \"WIP: Resolving issue 1327\" (#1837) at dotnet/sdk","RelatedBody":""},{"Id":"7045821367","Type":"IssuesEvent","CreatedAt":"2018-01-02T01:23:00","Actor":"matkoch","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/1836","RelatedDescription":"Opened issue \"Value parsing\" (#1836) at dotnet/sdk","RelatedBody":"The invocation:\r\n\r\n```\r\nC:\\xxx\\dotnet.exe publish C:\\code\\xxx.csproj --configuration Debug --framework netstandard2.0 --force --no-dependencies --self-contained /p:AssemblyVersion=0.1.0.0 /p:FileVersion=0.1.436 /p:InformationalVersion=0.1.436+Branch.master.Sha.45bedb36a75756fad\r\n```\r\n\r\nFails with:\r\n\r\n> C:\\Program Files\\dotnet\\sdk\\2.1.2\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.NET.Sdk.targets(130,23): error MSB4030: \"/p:AssemblyVersion=0.1.0.0\" is an invalid value for the \"IsSelfContained\" parameter of the \"GenerateDepsFile\" task. The \"IsSelfContained\" parameter is of type \"System.Boolean\".\r\n\r\nWhen I change the framework to `net461`, everything works fine. Seems that parsing of additional msbuild properties is not working properly."},{"Id":"7045224746","Type":"IssuesEvent","CreatedAt":"2018-01-01T16:32:37","Actor":"kasper3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/1835","RelatedDescription":"Opened issue \"Allow all configProperties in csproj\" (#1835) at dotnet/sdk","RelatedBody":"runtimeOptions->configProperties are allowed in csproj: https://docs.microsoft.com/en-us/dotnet/core/tools/project-json-to-csproj#runtimeoptions\r\n\r\nThere is a new option introduced for invariant globalization:\r\nhttps://github.com/dotnet/corefx/blob/master/Documentation/architecture/globalization-invariant-mode.md#enabling-the-invariant-mode\r\n\r\nAllowing this to be set in proj files as `<InvariantGlobalization>true</InvariantGlobalization>` will make it consistent with rest of the set.\r\n\r\nFor such future properties and if it is safe, can there be an automatic key pattern mapping that will transform any `<namespace>.<type>.<feature>.<property>` in runtimeconfig.json under configProperties to `<feature><property><type>` and `<namespace>.<type>.<feature>` to `<feature><type>` in camel-casing in project files?"},{"Id":"7044197681","Type":"IssuesEvent","CreatedAt":"2017-12-31T19:37:39","Actor":"KirillOsenkov","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1833","RelatedDescription":"Closed issue \"Invalid TrimEnd function usage in Microsoft.NET.TargetFrameworkInference.targets#L51\" (#1833) at dotnet/sdk","RelatedBody":"https://github.com/dotnet/sdk/blob/7fc8f64b89f5a69bb8043bae814b314b6ce6841f/src/Tasks/Microsoft.NET.Build.Tasks/build/Microsoft.NET.TargetFrameworkInference.targets#L51\r\n\r\n`$(TargetFramework.TrimEnd('.0123456789'))`\r\n\r\nMSBuild Expander doesn't like this TrimEnd"},{"Id":"7043001406","Type":"IssuesEvent","CreatedAt":"2017-12-30T21:27:00","Actor":"darrensteadman","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/sdk/issues/1679","RelatedDescription":"Reopened issue \"Workflow designer fails to load when referencing netstandard 2.0\" (#1679) at dotnet/sdk","RelatedBody":"I previously reported issue #1522 when I was having problems getting workflows to compile when referencing netstandard 2.0. The work around documented solved that problem for me however I've now gone to modify some of the workflows in my project and when I try to load the designer I get the following.\r\n\r\nSystem.IO.FileNotFoundException: Could not load file or assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51' or one of its dependencies. The system cannot find the file specified.\r\nFile name: 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51'\r\n   at System.Signature.GetSignature(Void* pCorSig, Int32 cCorSig, RuntimeFieldHandleInternal fieldHandle, IRuntimeMethodInfo methodHandle, RuntimeType declaringType)\r\n   at System.Reflection.RuntimeMethodInfo.FetchNonReturnParameters()\r\n   at System.Reflection.RuntimeMethodInfo.GetParametersNoCopy()\r\n   at System.Reflection.RuntimePropertyInfo.GetIndexParametersNoCopy()\r\n   at System.Reflection.RuntimePropertyInfo.GetIndexParameters()\r\n   at System.Xaml.Schema.TypeReflector.GetNonIndexerProperty(String name)\r\n   at System.Xaml.Schema.TypeReflector.LookupProperty(String name)\r\n   at System.Xaml.XamlType.LookupMember(String name, Boolean skipReadOnlyCheck)\r\n   at System.Xaml.XamlType.GetMember(String name)\r\n   at MS.Internal.Xaml.XamlContext.GetDottedProperty(XamlType tagType, String tagNamespace, XamlPropertyName propName, Boolean tagIsRoot)\r\n   at MS.Internal.Xaml.Parser.XamlScanner.ReadPropertyElement(XamlPropertyName name, XamlType tagType, String tagNamespace, Boolean isEmptyTag)\r\n   at MS.Internal.Xaml.Parser.XamlScanner.ReadElement()\r\n   at MS.Internal.Xaml.Parser.XamlScanner.ProcessCurrentXmlNode()\r\n   at MS.Internal.Xaml.Parser.XamlScanner.DoXmlRead()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_NonemptyPropertyElement>d__11.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_PropertyElement>d__9.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_ElementBody>d__8.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_Element>d__5.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_ElementContent>d__12.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_ElementBody>d__8.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_Element>d__5.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_PropertyContent>d__13.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_NonemptyPropertyElement>d__11.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_PropertyElement>d__9.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_ElementBody>d__8.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_Element>d__5.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_ElementContent>d__12.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_ElementBody>d__8.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_Element>d__5.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_PropertyContent>d__13.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_NonemptyPropertyElement>d__11.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_PropertyElement>d__9.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_ElementBody>d__8.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_Element>d__5.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_ElementContent>d__12.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_ElementBody>d__8.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_Element>d__5.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_PropertyContent>d__13.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_NonemptyPropertyElement>d__11.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_PropertyElement>d__9.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_ElementBody>d__8.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_Element>d__5.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_ElementContent>d__12.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_ElementBody>d__8.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_Element>d__5.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_PropertyContent>d__13.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_NonemptyPropertyElement>d__11.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_PropertyElement>d__9.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_ElementBody>d__8.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_Element>d__5.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_ElementContent>d__12.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_ElementBody>d__8.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_Element>d__5.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_ElementContent>d__12.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_ElementBody>d__8.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<P_Element>d__5.MoveNext()\r\n   at MS.Internal.Xaml.Parser.XamlPullParser.<Parse>d__4.MoveNext()\r\n   at MS.Internal.Xaml.NodeStreamSorter.MoveNext()\r\n   at System.Xaml.XamlXmlReader.Read()\r\n   at System.Activities.Debugger.XamlDebuggerXmlReader.Read()\r\n   at System.Activities.XamlIntegration.DynamicActivityXamlReader.Read()\r\n   at Microsoft.Activities.Presentation.Xaml.ActivityTemplateFactoryBuilderReader.Read()\r\n   at Microsoft.Activities.Presentation.Xaml.ViewStateXamlHelper.StripViewStateElement(XamlReader inputReader, Dictionary`2& viewStateInfo, Dictionary`2& viewStateSourceLocationMap)\r\n   at Microsoft.Activities.Presentation.Xaml.ViewStateXamlHelper.ConvertViewStateToAttachedProperties(XamlReader inputReader, ViewStateIdManager idManager, Dictionary`2& viewStateSourceLocationMap)\r\n   at Microsoft.Activities.Presentation.Xaml.WorkflowDesignerXamlHelper.DeserializeString(String text, DeserializationMode mode, IList`1& loadErrors, Dictionary`2& sourceLocations)\r\n   at Microsoft.Activities.Presentation.Xaml.WorkflowDesignerXamlHelper.DeserializeString(String text, IList`1& loadErrors, Dictionary`2& sourceLocations)\r\n   at System.Activities.Presentation.WorkflowDesigner.Load()\r\n\r\nWRN: Assembly binding logging is turned OFF.\r\nTo enable assembly bind failure logging, set the registry value [HKLM\\Software\\Microsoft\\Fusion!EnableLog] (DWORD) to 1.\r\nNote: There is some performance penalty associated with assembly bind failure logging.\r\nTo turn this feature off, remove the registry value [HKLM\\Software\\Microsoft\\Fusion!EnableLog].\r\n\r\nHas this been fixed with the PRs to fix my original bug? Does anyone have a work around I could use for the moment to get myself going again?"},{"Id":"7042650111","Type":"IssuesEvent","CreatedAt":"2017-12-30T16:11:11","Actor":"orloffm","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/1834","RelatedDescription":"Opened issue \"Cannot publish core console app + core app library tests\" (#1834) at dotnet/sdk","RelatedBody":"The solution is here: https://github.com/orloffm/failingpublish\r\n\r\nThe first project is a `netcoreapp2.0` `exe`, the second is a test `netcoreapp2.0` project for it. The solution `dotnet build`s, but when I do\r\n\r\n    dotnet publish -c Release --self-contained -r win-x64\r\n\r\nI get the following:\r\n\r\n    Microsoft (R) Build Engine version 15.5.179.9764 for .NET Core\r\n    Copyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n      Restore completed in 43.37 ms for C:\\dev\\failing_build\\a\\a.csproj.\r\n      Restore completed in 75.49 ms for C:\\dev\\failing_build\\a.tests\\a.tests.csproj.\r\n    C:\\Program Files\\dotnet\\sdk\\2.1.3\\Sdks\\Microsoft.NET.Sdk\\build\\Microsoft.NET.RuntimeIdentifierInference.targets(116,5): error : It is not supported to build or publish a self-contained application without specifying a RuntimeIdentifier.  Please either specify a RuntimeIdentifier or set SelfContained to false. [C:\\dev\\failing_build\\a\\a.csproj]\r\n      a -> C:\\dev\\failing_build\\a\\bin\\Release\\netcoreapp2.0\\win-x64\\a.dll\r\n      a -> C:\\dev\\failing_build\\a\\bin\\Release\\netcoreapp2.0\\win-x64\\publish\\\r\n\r\nIf I remove the test project from the solution, it works fine:\r\n\r\n    Microsoft (R) Build Engine version 15.5.179.9764 for .NET Core\r\n    Copyright (C) Microsoft Corporation. All rights reserved.\r\n\r\n      Restore completed in 43.62 ms for C:\\dev\\failing_build\\a\\a.csproj.\r\n      a -> C:\\dev\\failing_build\\a\\bin\\Release\\netcoreapp2.0\\win-x64\\a.dll\r\n      a -> C:\\dev\\failing_build\\a\\bin\\Release\\netcoreapp2.0\\win-x64\\publish\\\r\n\r\nI expect it to work, as this is almost a copy of a https://github.com/dotnet/docs/tree/master/samples/core/getting-started/unit-testing-using-dotnet-test, but with the main project switched to `netcoreapp2.0`."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"944564608391577600","CreatedAt":"2017-12-23T13:45:26+00:00","UserScreenname":"dotnet","Text":"Join our Jeff Fritz - @csharpfritz and MVP @IrisClasson in about an hour for LIVE CODING and pair programming on… https://t.co/kicrnl8tNJ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":23,"FavoriteCount":11,"RawContent":null},{"Id":"943234846079496192","CreatedAt":"2017-12-19T21:41:26+00:00","UserScreenname":"dotnet","Text":"Join our Jeff Fritz (@csharpfritz) in a little more than 2 hours for LIVE CODING. He's working on an @aspnet Core p… https://t.co/Xm2utapspg","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":35,"FavoriteCount":15,"RawContent":null},{"Id":"942039735144452097","CreatedAt":"2017-12-16T14:32:29+00:00","UserScreenname":"dotnet","Text":"Join our Jeff Fritz in 30 minutes for some LIVE CODING and answering your questions about .NET and Visual Studio.  https://t.co/UjBOoFqFp5","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":23,"FavoriteCount":18,"RawContent":null},{"Id":"941295101212549121","CreatedAt":"2017-12-14T13:13:35+00:00","UserScreenname":"dotnet","Text":"Join our Jeff Fritz at 10am ET for a LIVE CODING session.  He'll answer your questions about .NET, Visual Studio, a… https://t.co/qJHWFDaUGf","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":22,"FavoriteCount":14,"RawContent":null}]}},"RunOn":"2018-01-03T05:30:20.5389237Z","RunDurationInMilliseconds":7800}