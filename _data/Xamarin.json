{"Data":{"Blog":{"FeedItems":[{"Title":"Using the Android Designer Split View","PublishedOn":"2018-09-24T05:01:52+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The ability to see the design view and layout XML at the same time, side by side, was one of our most requested features for the Android Designer. With Split View, new in Visual Studio 15.8, you can...","Href":"https://blog.xamarin.com/split-view-android-designer/","RawContent":null},{"Title":"Get Ready for iOS 12 and Xcode 10","PublishedOn":"2018-09-19T19:49:52+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Support for iOS 12 and Xcode 10 to accompany Apple’s Xcode Gold Master (GM) release has just been announced! We have also published updated documentation and samples to help you quickly get started...","Href":"https://blog.xamarin.com/ios-12-and-xcode-10/","RawContent":null},{"Title":"Handling input from Apple Pencil","PublishedOn":"2018-09-19T17:52:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"After months of contemplation before finally buying an Apple Pencil to go along with the iPad Pro, it turns out it is as magical as they say! This blog post describes how to use Xamarin.iOS and Visual...","Href":"https://blog.xamarin.com/apple-pencil-handling-input/","RawContent":null},{"Title":"Xamarin.Forms 3.2.0 Released: Going Big with Little Things","PublishedOn":"2018-09-17T18:50:43+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Xamarin.Forms 3.2.0 continues the theme of previous releases to give you big wins by making little things much easier to do. The entire version 3 series has been about reducing the friction of doing...","Href":"https://blog.xamarin.com/xamarin-forms-3-2-0-released-going-big-with-little-things/","RawContent":null},{"Title":"Watch the .NET Conf Live!","PublishedOn":"2018-09-10T19:35:48+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The 3-day virtual developer conference co-organized by the .NET community and Microsoft is finally here! Now the question is how and where to watch the .NET Conf which will be completely...","Href":"https://blog.xamarin.com/watch-the-net-conf-live/","RawContent":null},{"Title":"Using Object Detection from inside your Xamarin app","PublishedOn":"2018-09-06T18:24:44+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Microsoft Cognitive Services provide a great way to get started with AI without being a machine learning or data science expert. A common favorite of cognitive services is the Custom Vision Service....","Href":"https://blog.xamarin.com/using-object-detection-from-inside-your-xamarin-app/","RawContent":null},{"Title":"Xamarin and .NET Developer Events in September","PublishedOn":"2018-08-31T16:42:53+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Xamarin and .NET developer events this September: September 10: Los Angeles, CA. USA &#124; Los Angeles .NET Developers Group: LADOTNET &#8211; The Architectural Mindset by Jeremy Cameron September...","Href":"https://blog.xamarin.com/xamarin-and-net-developer-events-in-september/","RawContent":null},{"Title":"Using the New Xamarin.Forms Controls Toolbox","PublishedOn":"2018-08-24T14:03:29+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Xamarin.Forms empowers you to deliver the same experience to multiple platforms. Using a set of UI elements abstracted from common mobile app controls, like text inputs and buttons, you can quickly...","Href":"https://blog.xamarin.com/using-new-xamarin-forms-controls-toolbox/","RawContent":null},{"Title":"Getting Started with Android Pie","PublishedOn":"2018-08-21T20:19:21+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Google recently released Android Pie for developers to enhance their apps and build new experiences with. Previously, Microsoft released an Android 9.0 Preview for Xamarin.Android and as of today, you...","Href":"https://blog.xamarin.com/android-pie-preview-getting-started/","RawContent":null},{"Title":"Exploring New iOS 12 ARKit Capabilities With Xamarin","PublishedOn":"2018-08-20T20:04:07+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"It&#8217;s summertime, which for Xamarin developers means new iOS betas to explore and learn. ARKit, which debuted last year in iOS 11, has matured over the past year and in iOS 12 is much more...","Href":"https://blog.xamarin.com/exploring-new-ios-12-arkit-capabilities-with-xamarin/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"8315423113","Type":"IssuesEvent","CreatedAt":"2018-09-25T05:04:05","Actor":"shibutamang","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2217","RelatedDescription":"Opened issue \"any caching support libraries for http responses?\" (#2217) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. \r\n2. \r\n3. \r\n\r\n<!--\r\nIf you have a repro project, you may drag & drop the .zip/etc. onto the issue editor to attach it.\r\n-->\r\n\r\n### Expected Behavior\r\n\r\n### Actual Behavior\r\n\r\n### Version Information\r\n\r\n<!--\r\n1. On macOS and within Visual Studio, select Visual Studio > About Visual Studio, then click the Show Details button, then click the Copy Information button.\r\n\r\n2. Paste below this comment block.\r\n-->\r\n\r\n### Log File\r\n\r\n<!--\r\n1. On macOS and within Visual Studio:\r\n    a. Click **Tools** > **SDK Command Prompt**.\r\n    b. Within the launched `Terminal.app` window, run:\r\n\r\n            adb logcat -d | pbcopy\r\n\r\n2. Paste below this comment block\r\n-->\r\n\r\n\r\n\r\n<!--\r\nSwitch to the \"Preview\" tab to ensure your issue renders correctly.\r\n\r\nPlease add an appropriate \"Area:\" label in the Labels section.\r\n-->"},{"Id":"8314869987","Type":"PullRequestEvent","CreatedAt":"2018-09-25T01:40:23","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2214","RelatedDescription":"Merged pull request \"Bump mono to tip of 2018-04\" (#2214) at xamarin/xamarin-android","RelatedBody":""},{"Id":"8314281369","Type":"IssuesEvent","CreatedAt":"2018-09-24T22:26:52","Actor":"pjcollins","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2216","RelatedDescription":"Opened issue \"Fastdev no longer works for certain projects on second unchanged deployment attempt\" (#2216) at xamarin/xamarin-android","RelatedBody":"A legacy amalgamation of test cases used in a fastdev test scenario is no longer working as expected. This application is now being fully re-installed on a second unchanged installation attempt. I'm seeing this on both macOS and Windows. I've attached a similar repro using an XA template with a handful of play services / support NuGets, a wearable 1.0 project, and Android class project references.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Download the attached project: [App32.zip](https://github.com/xamarin/xamarin-android/files/2413092/App32.zip)\r\n2. Restore NuGet packages.\r\n3. `msbuild /t:Install App32\\App32\\App32.csproj`\r\n4. `msbuild /t:Install App32\\App32\\App32.csproj`\r\n\r\n<!--\r\nIf you have a repro project, you may drag & drop the .zip/etc. onto the issue editor to attach it.\r\n-->\r\n\r\n### Expected Behavior\r\nA sequential unchanged installation attempt should re-deploy almost immediately.\r\n\r\n### Actual Behavior\r\nThe `BuildApk` and `InstallPackageAssemblies` tasks execute in full, when `BuildApk` should be skipped entirely. The previous version of the apk is uninstalled and replaced with the newly built version. This is a regression as compared to d15-9 preview and d15-8 stable releases.\r\n\r\n### Version Information\r\nXamarin.Android SDK   9.1.99.26 (HEAD/225afd531)\r\n<!--\r\n1. On macOS and within Visual Studio, select Visual Studio > About Visual Studio, then click the Show Details button, then click the Copy Information button.\r\n\r\n2. Paste below this comment block.\r\n-->\r\n\r\n### Log File\r\nhttps://gist.githubusercontent.com/pjcollins/51cc04a093dd06727f2247a70ad68d67/raw/cb6b0c6ff827ffb7b1669e25ae8f5ac2511efcda/gistfile1.txt\r\nhttp://xqa.blob.core.windows.net/gist/report-735652c843e94f199972da9a9e76cc73.txt\r\n"},{"Id":"8313946732","Type":"PullRequestEvent","CreatedAt":"2018-09-24T21:10:50","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2215","RelatedDescription":"Opened pull request \"[build] DebugType=portable across all projects\" (#2215) at xamarin/xamarin-android","RelatedBody":"Context: https://github.com/mono/mono/issues/7107\r\nContext: https://github.com/dotnet/sdk/blob/e44c2520e36dc171688d8e9cadc38c65ca309add/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.Sdk.props#L78\r\n\r\nSince around the Mono 5.0 timeframe, projects built with\r\n`DebugType=full` or `DebugType=pdbonly` are generating \"portable\" PDB\r\nfiles next to the output assembly. This is when using Mono.\r\n\r\nHowever, building with full .NET framework / MSBuild on Windows,\r\n`DebugType=full` and `DebugType=pdbonly` generate MDB files. This is\r\nan older, Windows-only format that Mono does not fully support\r\nanymore.\r\n\r\nThis causes a problem for projects targeting the `MonoAndroid`\r\nprofile, since Xamarin.Android's build process will run the following\r\ntarget if it encounters MDB files on Windows:\r\n\r\n    ConvertDebuggingFiles\r\n        Parameters\r\n            Files\r\n                samples\\HelloWorld\\bin\\Debug\\HelloWorld.pdb\r\n                bin\\Debug\\lib\\xamarin.android\\xbuild-frameworks\\MonoAndroid\\v9.0\\Mono.Android.pdb\r\n        OutputItems\r\n            _ConvertedDebuggingFiles\r\n                samples\\HelloWorld\\bin\\Debug\\HelloWorld.dll\r\n                bin\\Debug\\lib\\xamarin.android\\xbuild-frameworks\\MonoAndroid\\v9.0\\Mono.Android.dll\r\n\r\nThis is *seriously* messing with me as I try to profile builds on\r\nWindows! This task runs once on `Mono.Android.dll` after building\r\n`xamarin-android` for the first time. And it takes ~4.5 seconds!\r\n\r\nWhen building `xamarin-android` on Windows, we were generating these\r\nsymbol files:\r\n- `Mono.Android.dll.mdb` and many other profile assemblies\r\n- `HelloWorld.dll.mdb` if you built the sample\r\n\r\nTo better align the outputs of our build between MacOS and Windows,\r\nI've made the following changes:\r\n- Declare `DebugType=portable` in `Configuration.props`\r\n- Import `Configuration.props` if we weren't already\r\n- Remove any instances of `<DebugType>portable</DebugType>` or\r\n  `<DebugType>pdbonly</DebugType>`\r\n- Places that were using `DebugType=none` or `<DebugType></DebugType>`\r\n  I left alone\r\n\r\nIn fact, this is the same approach taken by SDK-style projects as seen\r\nin `Microsoft.NET.Sdk.props`:\r\n\r\n    <DebugType Condition=\" '$(DebugType)' == '' \">portable</DebugType>\r\n\r\n`DebugType=portable` works for both `Debug` and `Release` builds."},{"Id":"8313780710","Type":"PullRequestEvent","CreatedAt":"2018-09-24T20:41:32","Actor":"grendello","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2214","RelatedDescription":"Opened pull request \"Bump mono to tip of 2018-04\" (#2214) at xamarin/xamarin-android","RelatedBody":""},{"Id":"8312587474","Type":"IssuesEvent","CreatedAt":"2018-09-24T16:59:51","Actor":"JonDouglas","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2203","RelatedDescription":"Closed issue \"Editing axml with \"Highlight Containers\" in Xamarin.Android project breaks designer\" (#2203) at xamarin/xamarin-android","RelatedBody":"Every time I edit my axml by typing in the axml when the option \"Highlight Containers\" is on (this option highlights the view borders), the designer throws an \"Object reference not set to an instance of an object\" exception. \r\nAlso when I drag a widget when the option \"Highlight Containers\" is on I've found this exception. \r\n\r\nThe designer is now broken and I can't work, because working without Highlight Containers option is very very annoying. \r\n### Steps to Reproduce\r\n\r\n1. File -> New Project -> Android Blank App\r\n2.  Resource --> layout --> Activity_main.axml \r\n3.  Highlight Containers --> Drag a textview or a random widget/Typing in axml --> Error\r\n\r\n### Log File\r\n\r\nSystem.NullReferenceException: Object reference not set to an instance of an object.\r\n   at Xamarin.AndroidDesigner.LayoutInfo.GetElementXml(XmlWriter writer, AndroidXmlItem elem, LayoutXmlTarget xmlTarget, Dictionary`2 acwMap, Dictionary`2 userNamespaces) in E:\\A\\_work\\122\\s\\Xamarin.Designer.Android\\Xamarin.AndroidDesigner\\Xamarin.AndroidDesigner\\LayoutInfo.cs:line 912\r\n   at Xamarin.AndroidDesigner.LayoutInfo.GetElementXml(XmlWriter writer, AndroidXmlItem elem, LayoutXmlTarget xmlTarget, Dictionary`2 acwMap, Dictionary`2 userNamespaces) in E:\\A\\_work\\122\\s\\Xamarin.Designer.Android\\Xamarin.AndroidDesigner\\Xamarin.AndroidDesigner\\LayoutInfo.cs:line 960\r\n   at Xamarin.AndroidDesigner.LayoutInfo.GetElementXml(XmlWriter writer, AndroidXmlItem elem, LayoutXmlTarget xmlTarget, Dictionary`2 acwMap, Dictionary`2 userNamespaces) in E:\\A\\_work\\122\\s\\Xamarin.Designer.Android\\Xamarin.AndroidDesigner\\Xamarin.AndroidDesigner\\LayoutInfo.cs:line 960\r\n   at Xamarin.AndroidDesigner.LayoutInfo.GetElementXml(XmlWriter writer, AndroidXmlItem elem, LayoutXmlTarget xmlTarget, Dictionary`2 acwMap, Dictionary`2 userNamespaces) in E:\\A\\_work\\122\\s\\Xamarin.Designer.Android\\Xamarin.AndroidDesigner\\Xamarin.AndroidDesigner\\LayoutInfo.cs:line 960\r\n   at Xamarin.AndroidDesigner.LayoutInfo.GetRenderXml(AndroidXmlItem root, LayoutXmlTarget xmlTarget, Dictionary`2 acwMap) in E:\\A\\_work\\122\\s\\Xamarin.Designer.Android\\Xamarin.AndroidDesigner\\Xamarin.AndroidDesigner\\LayoutInfo.cs:line 898\r\n   at Xamarin.AndroidDesigner.LayoutInfo.GetLayoutXml(LayoutXmlTarget xmlTarget, Dictionary`2 acwMap) in E:\\A\\_work\\122\\s\\Xamarin.Designer.Android\\Xamarin.AndroidDesigner\\Xamarin.AndroidDesigner\\LayoutInfo.cs:line 881\r\n   at Xamarin.AndroidDesigner.AndroidRenderSession.<InflateAsync>d__110.MoveNext() in E:\\A\\_work\\122\\s\\Xamarin.Designer.Android\\Xamarin.AndroidDesigner\\Xamarin.AndroidDesigner\\AndroidRenderSession.cs:line 745\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at Xamarin.AndroidDesigner.AndroidRenderSession.<DoRefreshAsync>d__106.MoveNext() in E:\\A\\_work\\122\\s\\Xamarin.Designer.Android\\Xamarin.AndroidDesigner\\Xamarin.AndroidDesigner\\AndroidRenderSession.cs:line 597\r\n\r\n\r\n\r\n<!--\r\nSwitch to the \"Preview\" tab to ensure your issue renders correctly.\r\n\r\nPlease add an appropriate \"Area:\" label in the Labels section.\r\n-->\n\n> VS bug [#690456](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/690456)"},{"Id":"8312324204","Type":"IssuesEvent","CreatedAt":"2018-09-24T16:14:04","Actor":"grendello","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2209","RelatedDescription":"Closed issue \"WebRequest timeout\" (#2209) at xamarin/xamarin-android","RelatedBody":"Timeout while using WebResponse many times.\r\n\r\nSystem.Net.WebException: The operation has timed out.\r\n  at System.Net.HttpWebRequest+<RunWithTimeoutWorker>d__241`1[T].MoveNext () [0x000ba] in <b78695579ed9422b8bc80218eeda782c>:0 \r\n--- End of stack trace from previous location where exception was thrown ---\r\n  at System.Net.HttpWebRequest.GetResponse () [0x00013] in <b78695579ed9422b8bc80218eeda782c>:0 \r\n\r\n### Steps to Reproduce\r\n```\r\nwhile (true)\r\n                    {\r\n                        System.Diagnostics.Debug.WriteLine(\"google.nl start\");\r\n                        var client = (HttpWebRequest) WebRequest.Create(\"http://google.nl\");\r\n                        client.Timeout = (int) TimeSpan.FromSeconds(10).TotalMilliseconds;\r\n                        client.GetResponse();\r\n                        System.Diagnostics.Debug.WriteLine(\"google.nl end\");\r\n                    }\r\n```\r\nNo issues when response is disposed or WebRequest is aborted.\r\n\r\n### Version Information\r\nVisual Studio 15.8.5. Same issue with 15.7.6."},{"Id":"8312160709","Type":"IssuesEvent","CreatedAt":"2018-09-24T15:47:39","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2195","RelatedDescription":"Closed issue \"[build] `msbuild /t:Prepare Xamarin.Android.sln` hits \"\"ResolveAndroidTooling\" task failed unexpectedly.\" with Visual Studio 2017 version 15.9 Preview if `$(AndroidToolchainDirectory)` doesn't already exist\" (#2195) at xamarin/xamarin-android","RelatedBody":"This is a new error that happens when running `msbuild /t:Prepare Xamarin.Android.sln` using Visual Studio 2017 version 15.9 Preview or higher (any version that includes https://github.com/xamarin/xamarin-android/commit/d73442ec4c661633023b88c9d058e0f2f2455aa4).\r\n\r\nThe error doesn't happen when building with Visual Studio 2017 version 15.8 because in that version `GetMaxInstalledApiLevel()` was directly part of a single large `ResolveSdkTask` where `$(AndroidSdkPath)` was [set to `MonoAndroidHelper.AndroidSdk.AndroidSdkPath`](https://github.com/xamarin/xamarin-android/blob/9e4ec787991039b9ad0d2ee43235348af739f753/src/Xamarin.Android.Build.Tasks/Tasks/ResolveSdksTask.cs#L83) (C:\\\\Program Files (x86)\\\\Android\\\\android-sdk in my test environment). Although `ResolveSdkTask` itself still uses `MonoAndroidHelper.AndroidSdk.AndroidSdkPath` in Visual Studio 2017 version 15.9 Preview, the new `ResolveAndroidTooling` task does *not* currently use `MonoAndroidHelper`, so `$(AndroidSdkPath)` stays set to `$(AndroidToolchainDirectory)` (C:\\\\src\\\\android-toolchain in my test environment). When [`GetMaxInstalledApiLevel()` calls `Directory.EnumerateDirectories()`](https://github.com/xamarin/xamarin-android/blob/9e4ec787991039b9ad0d2ee43235348af739f753/src/Xamarin.Android.Build.Tasks/Tasks/ResolveAndroidTooling.cs#L330) on the Android SDK in the program files directory, it works because that directory exists, but when it tries to enumerate C:\\\\src\\\\android-toolchain, it hits an error because that directory does not yet exist. (The next step of the build just after the NuGet packages are restored is [to set up that directory](https://github.com/xamarin/xamarin-android/blob/9e4ec787991039b9ad0d2ee43235348af739f753/build-tools/scripts/PrepareWindows.targets#L19-L24).)\r\n\r\n### Possible Fix\r\n\r\nOne possible way to resolve this issue is to have `ResolveAndroidTooling` use `MonoAndroidHelper.AndroidSdk.AndroidSdkPath`:\r\n\r\n```patch\r\ndiff --git a/src/Xamarin.Android.Build.Tasks/Tasks/ResolveAndroidTooling.cs b/src/Xamarin.Android.Build.Tasks/Tasks/ResolveAndroidTooling.cs\r\nindex a6b76204..9161bb99 100644\r\n--- a/src/Xamarin.Android.Build.Tasks/Tasks/ResolveAndroidTooling.cs\r\n+++ b/src/Xamarin.Android.Build.Tasks/Tasks/ResolveAndroidTooling.cs\r\n@@ -77,6 +77,9 @@ namespace Xamarin.Android.Tasks\r\n \r\n \t\tpublic override bool Execute ()\r\n \t\t{\r\n+\t\t\tAndroidNdkPath = MonoAndroidHelper.AndroidSdk.AndroidNdkPath;\r\n+\t\t\tAndroidSdkPath = MonoAndroidHelper.AndroidSdk.AndroidSdkPath;\r\n+\r\n \t\t\tstring toolsZipAlignPath = Path.Combine (AndroidSdkPath, \"tools\", ZipAlign);\r\n \t\t\tbool findZipAlign = (string.IsNullOrEmpty (ZipAlignPath) || !Directory.Exists (ZipAlignPath)) && !File.Exists (toolsZipAlignPath);\r\n \r\n```\r\n\r\nI tested this locally, and it worked as desired for this scenario. I believe this should be OK for end-user Xamarin.Android app builds too because it's just going back to how these paths were determined at this step in Visual Studio 2017 version 15.8.\r\n\r\n#### Other possibles approaches\r\n\r\nI initially tried moving [`<MSBuild Projects=\"$(MSBuildThisFileDirectory)..\\android-toolchain\\android-toolchain.csproj\" />`](https://github.com/xamarin/xamarin-android/blob/9e4ec787991039b9ad0d2ee43235348af739f753/build-tools/scripts/PrepareWindows.targets#L24) to happen *before* the NuGet restore commands, but that was unsuccessful due to missing dependencies. It might be possible to adjust android-toolchain.csproj and the other preparation steps so that android-toolchain.csproj can build before any `NuGet.exe restore` step (or more precisely, before any `NuGet.exe restore` on a project that imports Xamarin.Android.Common.targets), but I haven't experimented with that.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Install Visual Studio 2017 version 15.9 Preview 2 or higher with the **Mobile development with .NET** workload. Also select the following **Individual components**:\r\n\r\n    - .NET Framework 4 targeting pack\r\n    - .NET Framework 4.5 targeting pack\r\n    - .NET Framework 4.5.1 targeting pack\r\n    - .NET Framework 4.5.2 targeting pack\r\n    - .NET Framework 4.6 targeting pack\r\n    - .NET Framework 4.6.1 targeting pack\r\n    - .NET Framework 4.6.2 targeting pack\r\n\r\n2. `git clone https://github.com/xamarin/xamarin-android.git`\r\n\r\n3. Ensure that you do not yet have an android-toolchain directory from a previous `msbuild /t:Prepare Xamarin.Android.sln`. (Or rename the existing directory out of the way.)\r\n\r\n4. `msbuild Xamarin.Android.sln /t:Prepare`\r\n\r\n    If Visual Studio version 15.8 is *also* installed, then NuGet will default to using the MSBuild and Xamarin.Android.Common.targets file from that version, and the `/t:Prepare` target will *succeed*. In that case you can invoke NuGet directly instead, passing in the path to MSBuild from the Visual Studio preview version:\r\n\r\n    `.\\.nuget\\NuGet.exe restore .\\Xamarin.Android-Tests.sln -MSBuildPath \"C:\\Program Files (x86)\\Microsoft Visual Studio\\Preview\\Enterprise\\MSBuild\\15.0\\bin\"`\r\n\r\n### Expected Behavior\r\n\r\nThe NuGet restore step succeeds.\r\n\r\n### Actual Behavior\r\n\r\nThe NuGet restore step fails for Xamarin.Android-Tests.sln at the point where `_SetLatestTargetFrameworkVersion` calls the new `ResolveAndroidTooling` task.\r\n\r\n```\r\n\"C:\\Users\\Windows User\\AppData\\Local\\Temp\\NuGetScratch\\uj5oucwn.yyt.nugetinputs.targets\" (GenerateRestoreGraphFile target) (1) ->\r\n\"C:\\src\\xamarin-android\\src\\Mono.Android\\Test\\Mono.Android-Tests.csproj\r\n\" (_GenerateProjectRestoreGraph target) (2:5) ->\r\n(_SetLatestTargetFrameworkVersion target) -> \r\n  C:\\Program Files (x86)\\Microsoft Visual Studio\\Preview\\Enterprise\\MSBuild\\Xamarin\\Android\\Xamarin.Android.Common.targets(712,2): error MSB4018: The \r\n\"ResolveAndroidTooling\" task failed unexpectedly. [C:\\src\\xamarin-android\\src\\Mono.Android\\Test\\Mono.Android-Tests.csproj]\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\Preview\\Enterprise\\MSBuild\\Xamarin\\Android\\Xamarin.Android.Common.targets(712,2): error MSB4018: \r\nSystem.IO.DirectoryNotFoundException: Could not find a part of the path 'C:\\src\\android-toolchain\\sdk\\platforms'. \r\n[C:\\src\\xamarin-android\\src\\Mono.Android\\Test\\Mono.Android-Tests.csproj]\r\n```"},{"Id":"8312149895","Type":"PullRequestEvent","CreatedAt":"2018-09-24T15:45:59","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2204","RelatedDescription":"Merged pull request \"[Xamarin.Android.Build.Tasks] restore behavior for custom $(AndroidSdkDirectory)\" (#2204) at xamarin/xamarin-android","RelatedBody":"Fixes: https://github.com/xamarin/xamarin-android/issues/2200\r\n\r\nIn 93ddf96f, I split up the `ResolveSdks` MSBuild task.\r\n\r\nIn doing that I broke a situation:\r\n- `msbuild /p:AndroidUseLatestPlatformSdk=true /p:AndroidSdkDirectory=\"C:\\DoesNotExist\" MyApp.csproj`\r\n- This works in 15.8 stable, but not 15.9 or master where 93ddf96f is\r\n  applied\r\n\r\nThe error message is also rather unpleasant, due to an unhandled\r\nexception:\r\n\r\n    (_SetLatestTargetFrameworkVersion target) ->\r\n        error MSB4018: The \"ResolveAndroidTooling\" task failed unexpectedly.\r\n        error MSB4018: System.IO.DirectoryNotFoundException: Could not find a part of the path 'C:\\DoesNotExist\\platforms'.\r\n\r\nThe cause, is how `$(AndroidSdkDirectory)` is handled as an output:\r\n\r\n    <Output TaskParameter=\"AndroidSdkPath\" PropertyName=\"AndroidSdkDirectory\" Condition=\"'$(AndroidSdkDirectory)' == ''\" />\r\n\r\nWe don't modify `$(AndroidSdkDirectory)` if it was supplied somehow to\r\nthe build.\r\n\r\nThen we use `$(AndroidSdkDirectory)` directly here:\r\n\r\n    <ResolveAndroidTooling\r\n        ...\r\n        AndroidSdkPath=\"$(AndroidSdkDirectory)\"\r\n        ...\r\n    />\r\n\r\nSo the fix here is a bit of refactoring:\r\n- Let's use `$(_AndroidSdkDirectory)`, `$(_AndroidNdkDirectory)`, and\r\n  `$(_JavaSdkDirectory)` throughout our targets, and leave the\r\n  original values unchanged. We should remove the non-underscored\r\n  values everywhere else.\r\n- We can remove places we call `<CreateProperty />` to create\r\n  `$(_AndroidSdkDirectory)`, since it is set earlier now.\r\n- I saw several places we are using `<CreateProperty\r\n  Value=\"$(_JavaSdkDirectory)\\bin\">`, which uses a double slash. We\r\n  can omit a `\\` here.\r\n- We can refactor `GetJavaPlatformJar` in general, it doesn't use this\r\n  property so we can remove it. We can also remove extra log messages.\r\n\r\nThen there was one place that introduced a dilemma:\r\n\r\n    <_PropertyCacheItems Include=\"AndroidSdkPath=$(AndroidSdkDirectory)\" />\r\n    <_PropertyCacheItems Include=\"AndroidNdkPath=$(AndroidNdkDirectory)\" />\r\n    <_PropertyCacheItems Include=\"JavaSdkPath=$(JavaSdkDirectory)\" />\r\n\r\nThis happens at project evaluation time, so it's not actually using\r\nthe proper value for these properties!\r\n\r\nSo I reworked the targets using this:\r\n- `_CreatePropertiesCache` now depends on\r\n  `_SetLatestTargetFrameworkVersion`\r\n- `_CreatePropertiesCache` now uses `$(_AndroidSdkDirectory)` and\r\n  friends\r\n- We now take advantage of `<WriteLinesToFile\r\n  WriteOnlyWhenDifferent=\"True\" />`\r\n- We can completely remove the `_ReadPropertiesCache` target\r\n\r\nOverall this moves `_SetLatestTargetFrameworkVersion` to happen\r\nearlier, but I believe our build is *more correct* as a result.\r\n\r\nDownstream in `monodroid`, we will need to update two targets:\r\n- `ResolveXamarinAndroidTools`\r\n- `InstallPackageAssemblies`\r\n\r\nI will investigate if this can be done separately to bumping\r\n`xamarin-android`."},{"Id":"8312149857","Type":"IssuesEvent","CreatedAt":"2018-09-24T15:45:59","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/2200","RelatedDescription":"Closed issue \"\"\"ResolveAndroidTooling\" task failed unexpectedly.\" with Visual Studio 2017 version 15.9 Preview if `$(AndroidUseLatestPlatformSdk)` is `true` and `$(AndroidSdkDirectory)` is set to a nonexistent directory\" (#2200) at xamarin/xamarin-android","RelatedBody":"This is a different way of looking at https://github.com/xamarin/xamarin-android/issues/2195. This might be the more important scenario because it can potentially affect end-user Xamarin.Android app builds.\r\n\r\nThis is a regression in behavior between Visual Studio 2017 version 15.8.3 and Visual Studio 2017 version 15.9 Preview 2. Admittedly, it only affects a narrow scenario: when the old `$(AndroidUseLatestPlatformSdk)` property is set to `true` and `$(AndroidSdkDirectory)` is explicitly set to a nonexistent directory. This *could* affect some users who have been using a custom value for `$(AndroidSdkDirectory)` and who haven't updated their projects to remove `$(AndroidUseLatestPlatformSdk)`, but it does seem somewhat unlikely. On the other hand, maybe the simple fact that `$(AndroidUseLatestPlatformSdk)` is not currently *ignored* is enough reason to preserve the original behavior for a nonexistent `$(AndroidSdkDirectory)` for now.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Create a new **Visual C# > Android > Android App (Xamarin) > Blank App**.\r\n\r\n2. Set **Project Properties > Application > Compile using Android version** to the latest Android SDK version you have installed.\r\n\r\n3. Also set **Project Properties > Android Manifest > Target Android version** to that same version.\r\n\r\n4. Using a Developer Command Prompt (for Visual Studio 2017 version 15.9 Preview 2), attempt to build the solution from the command line. Set `/p:AndroidUseLatestPlatformSdk=true` and specify a nonexistent `$(AndroidSdkDirectory)`:\r\n\r\n        msbuild /t:Build /p:AndroidUseLatestPlatformSdk=true /p:AndroidSdkDirectory=\"C:\\DoesNotExist\" CsharpAndroidApp1.sln\r\n\r\n### Results with Visual Studio 2017 version 15.9 Preview 2\r\n\r\nThe build fails because the new `ResolveAndroidTooling` task attempts to use the `$(AndroidSdkDirectory)` unmodified.\r\n\r\nExcerpt from the MSBuild output:\r\n\r\n```\r\nBuild FAILED.\r\n\r\n\"C:\\source\\CsharpAndroidApp1\\CsharpAndroidApp1.sln\" (Build target) (1) ->\r\n\"C:\\source\\CsharpAndroidApp1\\CsharpAndroidApp1\\CsharpAndroidApp1.csproj\" (default target) (2) ->\r\n(_SetLatestTargetFrameworkVersion target) ->\r\n  C:\\Program Files (x86)\\Microsoft Visual Studio\\Preview\\Enterprise\\MSBuild\\Xamarin\\Android\\Xamarin.Android.Common.targets(712,2): error MSB4018: The \"ResolveAndroidTooling\" task failed unexpectedly.\r\nC:\\Program Files (x86)\\Microsoft Visual Studio\\Preview\\Enterprise\\MSBuild\\Xamarin\\Android\\Xamarin.Android.Common.targets(712,2): error MSB4018: System.IO.DirectoryNotFoundException: Could not find a part of the path 'C:\\DoesNotExist\\platforms'.\r\n```\r\n\r\n### Results with Visual Studio 2017 version 15.8.3\r\n\r\nThe build succeeds.\n\n> VS bug [#690371](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/690371)"}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"8315466721","Type":"PullRequestEvent","CreatedAt":"2018-09-25T05:20:28","Actor":"adrianknight89","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/3891","RelatedDescription":"Opened pull request \"Added instructions to UI test B41778\" (#3891) at xamarin/Xamarin.Forms","RelatedBody":"### Issues Resolved ### \r\n<!-- Please use the format \"fixes #xxxx\" for each issue this PR addresses -->\r\n\r\n- fixes #2361\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [x] Rebased on top of the target branch at time of PR\r\n- [x] Changes adhere to coding standard\r\n"},{"Id":"8314567713","Type":"IssuesEvent","CreatedAt":"2018-09-24T23:52:50","Actor":"EmilAlipiev","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/3890","RelatedDescription":"Opened issue \"UWP: DisplayActionSheet is not displaying if using in a void function\" (#3890) at xamarin/Xamarin.Forms","RelatedBody":"<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\n### Description\r\n\r\nCode below is not working because DisplayActionSheet  is not awaiting for a result on UWP. thats why i dont see display action. Reason cold be possible because using \"async avoid\" but this works on Android and It works also with the previous versions. It only fails with the latest version. \r\nI am not able to change this to be Task instead of Void as the tools itemtapped event is not accepting it.\r\n\r\n```\r\n private async void SfKanban_ItemTapped(object sender, Syncfusion.SfKanban.XForms.KanbanTappedEventArgs e)\r\n        {\r\n            var action = await DisplayActionSheet (\"ActionSheet: Send to?\", \"Cancel\", null, \"Email\", \"Twitter\", \"Facebook\");\r\n \r\n                    if (result ==\"Email\")\r\n                    {\r\n                        await Email();\r\n                    }\r\n        }\r\n```\r\n\r\n### Steps to Reproduce\r\n\r\n1.  Use any async void event as above\r\n2. \r\n3. \r\n\r\n### Expected Behavior\r\n\r\nthat it awaits for the result\r\n\r\n### Actual Behavior\r\n\r\nit doesnt await. thats why no popup is displayed\r\n \r\n- Version with issue: 3.2.0\r\n- Last known good version: any version lower thatn 3.2.0\r\n- IDE: VS 2017 15,8.5\r\n- Platform Target Frameworks: <!-- All that apply -->\r\n \r\n  - UWP:  \r\n```\r\n <TargetPlatformVersion>10.0.17134.0</TargetPlatformVersion>\r\n    <TargetPlatformMinVersion>10.0.16299.0</TargetPlatformMinVersion>\r\n```\r\n\r\n- Android Support Library Version: <!-- if applicable -->\r\n- Nuget Packages:\r\n- Affected Devices: UWP Local\r\n\r\n### Screenshots\r\n\r\n<!-- If the issue is a visual issue, please include screenshots showing the problem if possible -->\r\n\r\n### Reproduction Link\r\n\r\n<!-- Please upload or provide a link to a reproduction case -->\r\n"},{"Id":"8314344822","Type":"PullRequestEvent","CreatedAt":"2018-09-24T22:44:20","Actor":"Viridovics","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/3889","RelatedDescription":"Opened pull request \"Issue 2376\" (#3889) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\n* Include all platforms\r\n* Remove non-deterministic test behaviour ``` // At this point, the counter can be any value, but it's most likely not zero. ```\r\n\r\n### Issues Resolved ### \r\n\r\n- fixes #2376\r\n\r\n### API Changes ###\r\n \r\n None\r\n\r\n### Behavioral/Visual Changes ###\r\n\r\nNone\r\n\r\n### Before/After Screenshots ### \r\n\r\nNot applicable\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [ ] Rebased on top of the target branch at time of PR\r\n- [ ] Changes adhere to coding standard"},{"Id":"8314341944","Type":"IssuesEvent","CreatedAt":"2018-09-24T22:43:32","Actor":"dogancoruh","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/3888","RelatedDescription":"Opened issue \"NavigationPage modifies StatusBar text color so you cannot define NavigationBar text color and statusbar text color seperately\" (#3888) at xamarin/Xamarin.Forms","RelatedBody":"I have an enterance xaml \"WelcomePage\" to welcome end user in my xamarin forms app.\r\nBackground is a blurred image so there is no navigation bar and statusbar text color must be white because of the colors...\r\nWhen i set the statusbar color with the classical approach (View-controller based setting > NO and setStatusBarStyle blabla...) it works. But if i push the WelcomePage embedded in a NavigationPage, it makes the statusbar text color black. If i set BarTextColor to white. I solves but i ruins the next pushed page bartextcolor because next page's bar is white. So text is white, background is white... white empty bar problem... I tried to set pushed page's BarTextColor to black in OnAppearing but Statusbar changes too...\r\nThis statusbar text change behavior is not a good approach i think... can you find a way to set them seperately. Maybe extra properties to set statusbar background and text colors..."},{"Id":"8313848786","Type":"IssuesEvent","CreatedAt":"2018-09-24T20:54:04","Actor":"jalbertSyncroTech","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/3887","RelatedDescription":"Opened issue \"[UWP] PopAsync() crashes when navigating back to a page with a ListView with grouping after an item has been removed\" (#3887) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\n\r\nSimilar to Issue #3333, we're still seeing an exception from PopAsync() in v3.2.0.839982, however instead of a null reference it's now:\r\nSystem.ArgumentException: 'Value does not fall within the expected range.'\r\n\r\n### Steps to Reproduce\r\n\r\n1. Add items to a bound ListView that uses grouping\r\n   * Press the \"Add Item\" button in the attached example 3 times to add that manyitems\r\n2. Navigate to the page displaying the list and delete one of the items (The \"List View Page\"\r\n   * Select the \"List View Page\" sidebar menu item in the attached example\r\n3. Delete one of the items\r\n   * Using the \"Remove\" button in the attached example\r\n4. Navigate away from the page displaying the list\r\n   * Select the \"Add Item Page\" sidebar menu item in the attached example\r\n5. Navigate back to the page display the list\r\n   * Select the \"List View Page\" sidebar menu item in the attached example\r\n\r\n### Expected Behavior\r\n\r\nWe should be able to navigate to back a page after removing an item without causing an exception\r\n\r\n### Actual Behavior\r\n\r\nThe exception System.ArgumentException is thrown\r\n\r\n### Basic Information\r\n\r\n- Version with issue: 3.2.0.839982\r\n- Last known good version: Unknown, but it also crashes in 3.0.0.561731\r\n- IDE: Visual Studio 2017 15.7.6\r\n- Platform Target Frameworks:\r\n  - UWP:  16299\r\n- Affected Devices: UWP Windows Desktop\r\n\r\n### Screenshots\r\n\r\n1. Press the \"Add Item\" button in the attached example 3 times to add that manyitems\r\n![image](https://user-images.githubusercontent.com/10836879/45978349-22c7c400-c01a-11e8-8de9-786c72414fe7.png)\r\n\r\n3. Delete one of the items\r\n![image](https://user-images.githubusercontent.com/10836879/45978371-35da9400-c01a-11e8-9ab2-64af7fbe3e3d.png)\r\n\r\nScreenshot of the crash\r\n\r\n![image](https://user-images.githubusercontent.com/10836879/45978392-468b0a00-c01a-11e8-932d-b9cbd7c23b3b.png)\r\n\r\n### Reproduction Link\r\n\r\n[Issue3333ArgumentException.zip](https://github.com/xamarin/Xamarin.Forms/files/2412818/Issue3333ArgumentException.zip)\r\n"},{"Id":"8313696041","Type":"PullRequestEvent","CreatedAt":"2018-09-24T20:26:08","Actor":"kingces95","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/3878","RelatedDescription":"Merged pull request \"[Android] Enable MaxLines and TextDecorations on fast renderers\" (#3878) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nAdded MaxLines and TextDecorations capabilities to the fast LabelRenderer\r\n\r\n### Issues Resolved ### \r\n\r\n- fixes #3856\r\n- fixes #3857\r\n\r\n### Platforms Affected ### \r\n\r\n- Android\r\n\r\n### Testing Procedure ###\r\nTurn on TEST_EXPERIMENTAL_RENDERERS flag on the gallery app\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [x] Rebased on top of the target branch at time of PR\r\n- [x] Changes adhere to coding standard\r\n"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"8313333108","Type":"PullRequestEvent","CreatedAt":"2018-09-24T19:17:07","Actor":"cadsit","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4871","RelatedDescription":"Opened pull request \"Report updateinfo for xamarin.ios and xamarin.mac in artifacts.json\" (#4871) at xamarin/xamarin-macios","RelatedBody":"We'd like to expose the `productId` and `versionId` in artifacts.json to autofill this information in while publishing so it's less of a manual process"},{"Id":"8313206801","Type":"PullRequestEvent","CreatedAt":"2018-09-24T18:53:01","Actor":"chamons","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4870","RelatedDescription":"Closed pull request \"Update LICENSE\" (#4870) at xamarin/xamarin-macios","RelatedBody":""},{"Id":"8313000105","Type":"IssuesEvent","CreatedAt":"2018-09-24T18:15:16","Actor":"VincentDondain","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/4863","RelatedDescription":"Closed issue \"[XM]Various options of NSVisualEffectView gives a System.Exception while executing VisualEffectPlayground on Mojave\" (#4863) at xamarin/xamarin-macios","RelatedBody":"### Steps to Reproduce\r\n1.  Install Xamarin.Mac, Version: 4.99.3.741 (Visual Studio Community), Hash: eeca0b87 on Mojave\r\n2. Execute VisualEffectPlayground \r\n3. Click on  BasicSideBar+Images or Text\r\n\r\n### Expected Behavior\r\nCorrect view should display\r\n\r\n### Actual Behavior\r\nGetting an exception .\r\nException Log: https://gist.github.com/GouriKumari/7fd46c3d48b5bb37036dd59054ea421d\r\n\r\n### Environment\r\n\r\nTest Env:https://gist.github.com/GouriKumari/abed951b2b807632973a0c2ae6ad7767\r\nBoth with Xcode10 and Xcode10.1\r\nThis issue occurs with XM build with Xcode10 support and XM stable + Mojave. \r\nThis issue didn't occur with XM stable build or XM with Xcode10 support on HighSierra\r\n\r\n### Build Logs\r\n\r\nBuild Log: https://gist.github.com/GouriKumari/8d39c2c71df974e552007536ff613094\r\nApplication Output: https://gist.github.com/GouriKumari/51632b6244273d8b3871aac21b4c46e9\r\n\r\n\r\n\r\n"},{"Id":"8312486628","Type":"PullRequestEvent","CreatedAt":"2018-09-24T16:42:06","Actor":"rolfbjarne","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4851","RelatedDescription":"Merged pull request \"[msbuild] Fix SceneKit asset compilation. Fixes #3766.\" (#4851) at xamarin/xamarin-macios","RelatedBody":"It seems SceneKit assets must be compiled into a directory whose parent\ndirectory is named like the app.\n\nIn addition the `--resource-folder-path` argument is required.\n\nFixes https://github.com/xamarin/xamarin-macios/issues/3766."},{"Id":"8312486610","Type":"IssuesEvent","CreatedAt":"2018-09-24T16:42:06","Actor":"rolfbjarne","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/3766","RelatedDescription":"Closed issue \"[tvOS][SceneKit] Darker scene than other platforms\" (#3766) at xamarin/xamarin-macios","RelatedBody":"I am working on Fox2 sample and I found that a tvOS application has darker scene than the original sample and than macos/ios versions.\r\nThere is small trick. \"Exr\" isn’t supported by tvOS so I turn off this part (changed “.exr” extension to “.png”).  After that the original sample looks correctly but mine isn’t, it’s darker.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Download a ~[project](https://github.com/mykyta-bondarenko-gl/private-samples/tree/fox-2-scenekit/ios11/Fox2)~ [project](https://github.com/xamarin/mac-ios-samples/tree/master/Fox2)\r\n2. Download the original [Apple sample](https://developer.apple.com/library/content/samplecode/scenekit-2017/Introduction/Intro.html)\r\n3. Open, build and run them on a tvOS device.\r\n\r\n### Expected Behavior\r\nThey look the same.\r\n\r\n### Actual Behavior\r\nThe Xamarin version is darker than Apple. \r\n\r\nBut if you comment invocation of the `TurnOffEXR` method in the `GameController` class in both samples - they will look the same.\r\n\r\n### Environment\r\n\r\n1. VSfM\r\nhttps://gist.github.com/mykyta-bondarenko-gl/ae2d488c6f7609ec5572907c290ec0f2\r\n2. Apple TV 4K. \r\ntvOS 11.2.6 (15K600)\r\n\r\n### Screenshots\r\n\r\n- Apple\r\n![Apple](https://user-images.githubusercontent.com/32954580/37523159-c330d590-292e-11e8-9198-dc71ff394c88.png)\r\n\r\n- Xamarin\r\n![Xamarin](https://user-images.githubusercontent.com/32954580/37523165-c697c8a6-292e-11e8-9fbd-5c0c784264fc.png)\r\n\r\n### Example Project \r\n\r\n1. [Link to the Xamarin project](https://github.com/mykyta-bondarenko-gl/private-samples/tree/fox-2-scenekit/ios11/Fox2)\r\n2. [Link to the Apple project](https://developer.apple.com/library/content/samplecode/scenekit-2017/Introduction/Intro.html)"},{"Id":"8312467994","Type":"PullRequestEvent","CreatedAt":"2018-09-24T16:38:50","Actor":"rolfbjarne","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/4868","RelatedDescription":"Merged pull request \"[CoreFoundation] Remove mtouch-specific code.\" (#4868) at xamarin/xamarin-macios","RelatedBody":"Once upon a time mtouch was a MonoMac app, and at the same time needed to\nbe a 64-bit executable. This meant we needed a few hacks to make things work:\n\n* The source code for CoreFoundation was included in mtouch (instead of using them from MonoMac.dll).\n* A few changes were required to make the source code work in 64-bit.\n\nThese changes were conditionally done with a #if MTOUCH.\n\nmtouch stopped being a MonoMac app a long time ago, so these mtouch-specific\nchanges are no longer needed, so just remove them."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1041764665536196609","CreatedAt":"2018-09-17T19:03:45+00:00","UserScreenname":"xamarinhq","Text":"...released to NuGet today, Xamarin.Forms 3.2.0. We've kicked off another round of updates, and this time we tackle… https://t.co/zyFILHsEUu","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":198,"FavoriteCount":105,"RawContent":null},{"Id":"1039264258511527936","CreatedAt":"2018-09-10T21:28:02+00:00","UserScreenname":"xamarinhq","Text":"Watch #dotNETConf Live! The 3-day virtual developer conference co-organized by the .NET community and Microsoft is… https://t.co/bM5JCj7M0h","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":95,"FavoriteCount":54,"RawContent":null},{"Id":"1037778121582419970","CreatedAt":"2018-09-06T19:02:39+00:00","UserScreenname":"xamarinhq","Text":"Get started with AI without being a machine learning or data science expert... New on the Xamarin Blog: Using Objec… https://t.co/uwpu4pUWFj","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":91,"FavoriteCount":44,"RawContent":null},{"Id":"1035572899996987397","CreatedAt":"2018-08-31T16:59:54+00:00","UserScreenname":"xamarinhq","Text":"Xamarin and .NET Developer Events in September\nHere are all the links you'll need to get involved.… https://t.co/YJAa83E61y","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":51,"FavoriteCount":36,"RawContent":null},{"Id":"1032375788375498753","CreatedAt":"2018-08-22T21:15:43+00:00","UserScreenname":"xamarinhq","Text":"Getting Started with Android Pie. Now you can download the support for #AndroidPie inside https://t.co/7TMjXUsU4u 9… https://t.co/sNrOIuI741","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":53,"FavoriteCount":41,"RawContent":null},{"Id":"1031653104394096640","CreatedAt":"2018-08-20T21:24:01+00:00","UserScreenname":"xamarinhq","Text":"Hey, Xamarin developers. It's time to explore and learn about the latest and greatest iOS 12 ARKit Capabilities w/… https://t.co/6x3vq5IuEb","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":121,"FavoriteCount":78,"RawContent":null},{"Id":"1029840138099220487","CreatedAt":"2018-08-15T21:19:57+00:00","UserScreenname":"xamarinhq","Text":"Attend A #dotNETConf Event Near You - https://t.co/VrHYwnCS69\n\nIt's a FREE, 3-day virtual dev event co-organized by… https://t.co/tqMWcB8mJz","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":53,"FavoriteCount":35,"RawContent":null},{"Id":"1026898128509825024","CreatedAt":"2018-08-07T18:29:27+00:00","UserScreenname":"xamarinhq","Text":"- Authentication   - Encryption   - Integrity\n3 important requirements to securing network communications &amp; absolut… https://t.co/hDPkHLZsLA","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":95,"FavoriteCount":50,"RawContent":null},{"Id":"1025442837813518336","CreatedAt":"2018-08-03T18:06:38+00:00","UserScreenname":"xamarinhq","Text":"Want to use a single code base for multiple platforms and devices? Of course you do. ...just posted to our Xamarin… https://t.co/qJBV4vvEir","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":178,"FavoriteCount":88,"RawContent":null},{"Id":"1024752638599028736","CreatedAt":"2018-08-01T20:24:02+00:00","UserScreenname":"xamarinhq","Text":"This year’s #dotNETConf is coming 9/12-14. Live sessions w/ speakers from the community &amp; it's your chance to learn… https://t.co/Nujb04dGd4","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":74,"FavoriteCount":47,"RawContent":null},{"Id":"1024013376295452672","CreatedAt":"2018-07-30T19:26:28+00:00","UserScreenname":"xamarinhq","Text":"Here's everything you need to know to integrate automated visual UI tests into a dev toolchain that includes an… https://t.co/12Ihjj4bSN","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":123,"FavoriteCount":58,"RawContent":null},{"Id":"1022882059763830784","CreatedAt":"2018-07-27T16:31:01+00:00","UserScreenname":"xamarinhq","Text":"https://t.co/RGpgfHMoPZ -- Announcing Xamarin .Android support for Android 9.0 (P) now available for both #VS2017 &amp;… https://t.co/9clAy4LHZp","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":84,"FavoriteCount":54,"RawContent":null},{"Id":"1022866229143461888","CreatedAt":"2018-07-27T15:28:07+00:00","UserScreenname":"xamarinhq","Text":"Previewing files from inside your Xamarin .iOS app is a great way to enhance user experience. ...and adding this fe… https://t.co/tF7v5at9xo","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":62,"FavoriteCount":31,"RawContent":null}]}},"RunOn":"2018-09-25T05:30:54.0933008Z","RunDurationInMilliseconds":4051}