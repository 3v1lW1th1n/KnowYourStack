{"Data":{"GitHub":{"Issues":[{"Id":"404033647","IsPullRequest":true,"CreatedAt":"2019-01-29T05:20:08","Actor":"codemzs","Number":"2290","RawContent":null,"Title":"Exclude files not authored by ML.NET from code coverage","State":"closed","Body":"Doesn't make sense to include ONNX ML autogenerated C# to protobuf file generator and Tensorflow sharp files as part of code coverage. \r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2290","RelatedDescription":"Closed or merged PR \"Exclude files not authored by ML.NET from code coverage\" (#2290)"},{"Id":"404125830","IsPullRequest":true,"CreatedAt":"2019-01-29T05:14:54","Actor":"zeahmed","Number":"2302","RawContent":null,"Title":"Added a test showing example of text classification using TensorFlow in ML.Net","State":"open","Body":"This PR fixes #2301.\r\n\r\nAlso updated the TensorFlow runtime  from 1.10.0 -> 1.12.0","Url":"https://github.com/dotnet/machinelearning/pull/2302","RelatedDescription":"Open PR \"Added a test showing example of text classification using TensorFlow in ML.Net\" (#2302)"},{"Id":"404124516","IsPullRequest":false,"CreatedAt":"2019-01-29T05:07:33","Actor":"zeahmed","Number":"2301","RawContent":null,"Title":"Create a test for text classification in TensorFlow.","State":"open","Body":"Create an example test which takes textual features as input and output the probability of being in each class.","Url":"https://github.com/dotnet/machinelearning/issues/2301","RelatedDescription":"Open issue \"Create a test for text classification in TensorFlow.\" (#2301)"},{"Id":"404066674","IsPullRequest":true,"CreatedAt":"2019-01-29T03:37:18","Actor":"artidoro","Number":"2295","RawContent":null,"Title":"Fix TextLoader version number for KeyType backward compatibility and added new test","State":"closed","Body":"Fixes #2294.\r\n\r\nI fixed the version number that's used to recognize and load the old `TextLoader` format.\r\n\r\nI also add a test to check that the code for `TextLoader` is actually backward compatible. I created a pipeline that contains a `TextLoader` that loads a `KeyType` using a version of the code prior the changes to `KeyType` and loaded it with the new code checking for the expected behavior.\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2295","RelatedDescription":"Closed or merged PR \"Fix TextLoader version number for KeyType backward compatibility and added new test\" (#2295)"},{"Id":"404065679","IsPullRequest":false,"CreatedAt":"2019-01-29T03:37:18","Actor":"artidoro","Number":"2294","RawContent":null,"Title":"TextLoader backcompat version number is wrong ","State":"closed","Body":"The version number for backwards compatibility comparison in TextLoader is wrong. It should be updated to the correct version number 0x0001000C.\r\n\r\nWe should also add a test for backwards compatibility.\r\n\r\nThis is related to the change #2146.","Url":"https://github.com/dotnet/machinelearning/issues/2294","RelatedDescription":"Closed issue \"TextLoader backcompat version number is wrong \" (#2294)"},{"Id":"404084415","IsPullRequest":true,"CreatedAt":"2019-01-29T01:41:55","Actor":"TomFinley","Number":"2300","RawContent":null,"Title":"Hide much infrastructure in data","State":"open","Body":"Another of many steps towards #1602. Commits logically structured. No overall theme, just lots of hiding of individual components, most notably command line parsing, entry-point declarations, and other such things.","Url":"https://github.com/dotnet/machinelearning/pull/2300","RelatedDescription":"Open PR \"Hide much infrastructure in data\" (#2300)"},{"Id":"404071500","IsPullRequest":false,"CreatedAt":"2019-01-29T00:44:04","Actor":"Ivanidzo4ka","Number":"2299","RawContent":null,"Title":"FastRank MSM sparse test baselines are suspicious ","State":"open","Body":"We shouldn't have this \r\nhttps://github.com/dotnet/machinelearning/blob/master/test/BaselineOutput/Common/FastRank/FastRank-TrainTest-MSM-sparse-sample-out.txt\r\n`Could not find file '%Data%`\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/master/test/BaselineOutput/Common/FastRank/FastRank-TrainTest-MSM-sparse-sample-test-out.txt\r\n`Unexpected exception: Could not find file '%Output% 'System.IO.FileNotFoundException'`\r\n\r\nWe shouldn't have such baselines.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2299","RelatedDescription":"Open issue \"FastRank MSM sparse test baselines are suspicious \" (#2299)"},{"Id":"404069870","IsPullRequest":false,"CreatedAt":"2019-01-29T00:36:58","Actor":"Anipik","Number":"2298","RawContent":null,"Title":"AvxIntrinsics.DotSU is Slower than the native version ","State":"open","Body":"We can verify this by running the benchmark https://github.com/dotnet/machinelearning/blob/master/test/Microsoft.ML.Benchmarks/Text/MultiClassClassification.cs#L62\r\n\r\n``` ini\r\n\r\n\r\n```\r\n|      Method |     (netcoreapp2.1)Mean |    Error |   StdDev |        netcoreapp3.0 |\r\n|------------ |--------------:|---------:|---------:|--------------------:|\r\n| PredictIris | 148.84s | 28.107 s | 1.5 s | 158.3s |\r\n\r\nI verified using the perfview that the cause of regression is DotSU. The exclusive time fot DotSU on netcoreapp3.0  is 70s and on native version of cpumath is 47 s\r\n\r\n\r\ncc @danmosemsft @adamsitnik @tannergooding @eerhardt \r\n","Url":"https://github.com/dotnet/machinelearning/issues/2298","RelatedDescription":"Open issue \"AvxIntrinsics.DotSU is Slower than the native version \" (#2298)"},{"Id":"404069855","IsPullRequest":false,"CreatedAt":"2019-01-29T00:36:56","Actor":"eerhardt","Number":"2297","RawContent":null,"Title":"Naming overhaul for IDataView subsystem","State":"open","Body":"We should make sure the type names in the IDataView subsystem are the names we want to use forever.\r\n\r\nSee \r\n\r\n1. https://github.com/dotnet/machinelearning/pull/2220#discussion_r251141578\r\n\r\n> If all of these types are column types, should they include column in the name? e.g. TextColumnType?\r\n\r\n2. https://github.com/dotnet/machinelearning/pull/2254#discussion_r251259500\r\n\r\n> The idea was broached I know, but resolution never reached: should we rename? Or else perhaps make Schema a nested class of something appropriate, so as to give it definition?\r\n\r\n> We could rename the class to DataViewSchema, or ViewSchema.\r\nWe’d probably want to rename everything then. Row is a pretty generic name. So is ColumnType.","Url":"https://github.com/dotnet/machinelearning/issues/2297","RelatedDescription":"Open issue \"Naming overhaul for IDataView subsystem\" (#2297)"},{"Id":"404069354","IsPullRequest":true,"CreatedAt":"2019-01-29T00:34:34","Actor":"eerhardt","Number":"2296","RawContent":null,"Title":"Follow up from Extract IDataView feedback","State":"open","Body":"@stephentoub left some PR comments on #2220 after it was merged. Addressing those comments here.","Url":"https://github.com/dotnet/machinelearning/pull/2296","RelatedDescription":"Open PR \"Follow up from Extract IDataView feedback\" (#2296)"},{"Id":"404002654","IsPullRequest":true,"CreatedAt":"2019-01-29T00:26:20","Actor":"Ivanidzo4ka","Number":"2285","RawContent":null,"Title":"Remove slash from PackagePath","State":"closed","Body":"fixes #2255","Url":"https://github.com/dotnet/machinelearning/pull/2285","RelatedDescription":"Closed or merged PR \"Remove slash from PackagePath\" (#2285)"},{"Id":"404058095","IsPullRequest":false,"CreatedAt":"2019-01-28T23:46:22","Actor":"Anipik","Number":"2293","RawContent":null,"Title":"SequencePool.GetCore slower on netcoreapp3.0","State":"open","Body":"https://github.com/dotnet/machinelearning/blob/master/test/Microsoft.ML.Benchmarks/Text/MultiClassClassification.cs#L122 \r\n\r\nBenchmark is slower on netcoreapp3.0. On investigation, I find out the major culprit for the regression is the function below\r\n\r\n\r\n```C#\r\n// Returns the ID of the requested sequence, or -1 if it is not found.\r\nprivate int GetCore(uint[] sequence, int min, int lim, out uint hash)\r\n{\r\n    AssertValid();\r\n    Contracts.Assert(0 <= min && min <= lim && lim <= Utils.Size(sequence));\r\n\r\n    hash = Hashing.HashSequence(sequence, min, lim);\r\n\r\n    for (int idCur = GetFirstIdInBucket(hash); idCur >= 0; idCur = _next[idCur])\r\n    {\r\n        Contracts.Assert(0 <= idCur && idCur < _idLim);\r\n        if (_hash[idCur] != hash)\r\n            continue;\r\n\r\n        var ibCur = _start[idCur];\r\n        var ibLim = _start[idCur + 1];\r\n        for (int i = min; ; i++)\r\n        {\r\n            Contracts.Assert(ibCur <= ibLim);\r\n            if (i >= lim)\r\n            {\r\n                // Need to make sure that we have reached the end of the sequence in the pool at the\r\n                // same time that we reached the end of sequence.\r\n                if (ibCur == ibLim)\r\n                    return idCur;\r\n                break;\r\n            }\r\n            if (ibCur >= ibLim)\r\n                break;\r\n            uint decoded;\r\n            var success = TryDecodeOne(_bytes, ref ibCur, _start[idCur + 1], out decoded);\r\n            Contracts.Assert(success);\r\n            if (sequence[i] != decoded)\r\n                break;\r\n        }\r\n    }\r\n    return -1;\r\n}\r\n```\r\n\r\nThe exclusive time for this function on netcore2.1 is areound 689ms where as on netcoreapp3.0 it takes around 824ms\r\n\r\nThe function is defined here https://github.com/dotnet/machinelearning/blob/master/src/Microsoft.ML.Data/Utils/SequencePool.cs#L151\r\n\r\nI was not able to find any reason behind this regression. cc @eerhardt @danmosemsft @jkotas \r\n","Url":"https://github.com/dotnet/machinelearning/issues/2293","RelatedDescription":"Open issue \"SequencePool.GetCore slower on netcoreapp3.0\" (#2293)"},{"Id":"404050430","IsPullRequest":false,"CreatedAt":"2019-01-28T23:16:35","Actor":"codemzs","Number":"2292","RawContent":null,"Title":"Tensorflow sharp files need to come from a nuget ","State":"open","Body":"The files under Microsoft.ML.Tensorflow/Tensorflow should come from a nuget since ML.NET team does not maintain these files. These files are also included in code coverage when they should not be, PR #2290 removes them.","Url":"https://github.com/dotnet/machinelearning/issues/2292","RelatedDescription":"Open issue \"Tensorflow sharp files need to come from a nuget \" (#2292)"},{"Id":"404043553","IsPullRequest":false,"CreatedAt":"2019-01-28T22:53:04","Actor":"codemzs","Number":"2291","RawContent":null,"Title":"ONNXML.cs needs to be generated at BUILD","State":"open","Body":"Currently ONNXML.cs is generated manually using protobuf definition. It is also included as part of code coverage which should not happen and PR #2290 will remove it. We need to make it such that it is clear that file is not authored by ML.NET team and is coming from an external source. \r\n\r\nCC: @wschin , @shauheen , @TomFinley ","Url":"https://github.com/dotnet/machinelearning/issues/2291","RelatedDescription":"Open issue \"ONNXML.cs needs to be generated at BUILD\" (#2291)"},{"Id":"404033442","IsPullRequest":false,"CreatedAt":"2019-01-28T22:20:33","Actor":"shauheen","Number":"2289","RawContent":null,"Title":"Update NuGet Metdata for Microsoft.Data.DataView","State":"open","Body":"With the introduction of the new NuGet we need to update some of the metadata to better signify the position of DataView.\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/master/pkg/Directory.Build.props#L26\r\n\r\nshould be overridden to show the following info for this specific package only:\r\n\r\n```\r\n    <projectUrl>https://dot.net/</projectUrl>\r\n    <iconUrl>http://go.microsoft.com/fwlink/?LinkID=288859</iconUrl>\r\n```\r\n \r\n@eerhardt , @danmosemsft \r\n","Url":"https://github.com/dotnet/machinelearning/issues/2289","RelatedDescription":"Open issue \"Update NuGet Metdata for Microsoft.Data.DataView\" (#2289)"},{"Id":"404014393","IsPullRequest":true,"CreatedAt":"2019-01-28T22:17:22","Actor":"eerhardt","Number":"2287","RawContent":null,"Title":"Fix build break.","State":"closed","Body":"My latest change conflicted with @TomFinley's latest change. They both passed separately, but failed together.\r\n\r\nAdding a using statement fixes the build.","Url":"https://github.com/dotnet/machinelearning/pull/2287","RelatedDescription":"Closed or merged PR \"Fix build break.\" (#2287)"},{"Id":"404003450","IsPullRequest":false,"CreatedAt":"2019-01-28T21:30:19","Actor":"Ivanidzo4ka","Number":"2286","RawContent":null,"Title":"TensorFlow redist nuget package wants license url","State":"closed","Body":"Run:\r\nbuild -BuildPackages locally.\r\n```\r\nerror : Enabling license acceptance requires a license url. [d:\\src\\fork-machinelearning\\pkg\\Microsoft.ML.TensorFlow.Redist\\Microsoft.ML.TensorFlow.Redist.nupkgproj]\r\n```","Url":"https://github.com/dotnet/machinelearning/issues/2286","RelatedDescription":"Closed issue \"TensorFlow redist nuget package wants license url\" (#2286)"},{"Id":"404015455","IsPullRequest":false,"CreatedAt":"2019-01-28T21:29:49","Actor":"shmoradims","Number":"2288","RawContent":null,"Title":"Make entrypoints inside Microsoft.ML.Transforms project internal","State":"open","Body":"We have 20+ entrypoints classes inside Microsoft.ML.Transforms like [this](https://github.com/dotnet/machinelearning/blob/a570da14a41f2870eb8f61d84496a58422398253/src/Microsoft.ML.Transforms/NAHandling.cs#L14) one. I think they should be made internal because the end-user would use the MLContext extensions instead, not these entrypoints. Also, the entrypoints documentation doesn't get rendered properly because the TlcModule.EntryPoint annotation is not understood by docs.microsoft.com (example: #1725)\r\n\r\nThoughts?\r\n\r\n/cc @TomFinley @sfilipi @eerhardt ","Url":"https://github.com/dotnet/machinelearning/issues/2288","RelatedDescription":"Open issue \"Make entrypoints inside Microsoft.ML.Transforms project internal\" (#2288)"},{"Id":"404000785","IsPullRequest":true,"CreatedAt":"2019-01-28T20:49:10","Actor":"sfilipi","Number":"2284","RawContent":null,"Title":"Creating the MLNetCookBook_StaticApi.md. The document contains the sa…","State":"open","Body":"Creating the MLNetCookBook_StaticApi.md. The document contains the same content and the MLNetCookBook.md, but the sample code uses the static API.\r\n\r\nUpdating the official cookbook to remove the static API samples, and leave just the dynamic API ones.\r\n\r\nFixes: #2210 \r\n","Url":"https://github.com/dotnet/machinelearning/pull/2284","RelatedDescription":"Open PR \"Creating the MLNetCookBook_StaticApi.md. The document contains the sa…\" (#2284)"},{"Id":"403989510","IsPullRequest":false,"CreatedAt":"2019-01-28T20:18:18","Actor":"DevLob-zz","Number":"2283","RawContent":null,"Title":"Error load Model (Generated from 64 bit ) From 32 bit ","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: W10\r\n- **.NET Version (eg., dotnet --4.6.1)**: \r\n\r\n### Issue\r\n\r\n- **What did you do?** \r\ni generated a model From 64 bit application and saved the .zip file \r\nthen try load this Model from 32 bit application\r\n- **What happened?**\r\nit throw an exception while loading the model\r\n\"'Could not load type 'Microsoft.ML.Transforms.Categorical.CategoricalTransform' from assembly 'Microsoft.ML.Transforms, Version=1.0.0.0, Culture=neutral\"\r\n- **What did you expect?**\r\nmy believe is there is a different in transform information between 32 , 64 \r\n### Source code / logs\r\n\r\nPlease paste or attach the code or logs or traces that would be helpful to diagnose the issue you are reporting.\r\n\r\nGenerating model from 64 bit process \r\n\r\n` public void BuildNormalTrainEvaluateAndSaveModel()\r\n        {\r\n            //Set a random seed for repeatable/deterministic results across multiple trainings.\r\n            var mlContext = new MLContext(seed: 1);\r\n\r\n            #region \"STEP 1: Common data loading configuration\"\r\n            IDataView trainingDataView = GetNormalDataSet(mlContext);\r\n            #endregion\r\n            #region \"STEP 2: Common data process configuration with pipeline data transformations\"\r\n            var dataProcessPipeline1 = mlContext.Transforms.Text.FeaturizeText(new List<string> { \"tagText\", \"firstWord\", \"fontColor\" }, \"Features\");\r\n\r\n            var dataProcessPipeline = mlContext.Transforms.Concatenate(\"Features\", \"fontSize\",\r\n                                                                                       \"isBold\",\r\n                                                                                       \"isItalic\",\r\n                                                                                       \"isUnderLine\",\r\n                                                                                       \"containsDot\",\r\n                                                                                       \"containsQuestionMark\",\r\n                                                                                       \"isAllCaps\"\r\n                                                                                        );\r\n            //var dataProcessPipeline2 = mlContext.Transforms.Text.FeaturizeText(new List<string> { \"Label\" }, \"Features\");\r\n            dataProcessPipeline.Append(dataProcessPipeline1);\r\n            //mlContext.Transforms.CustomMapping()\r\n            #endregion\r\n            #region  \"STEP 3: Set the training algorithm, then create and config the modelBuilder\"                            \r\n            var modelBuilder = new ModelBuilder<NormalTagsModelFeatures, NormalTagsPrediction>(mlContext, dataProcessPipeline);\r\n            // We apply our selected Trainer \r\n            //modelBuilder.AddEstimator(dataProcessPipeline1);\r\n            //modelBuilder.AddEstimator(new Dictionarizer(\"Label\"));\r\n            //modelBuilder.AddEstimator(dataProcessPipeline2);\r\n\r\n            var pipeline = mlContext.Transforms.Conversion.MapValueToKey(\"Label\")\r\n                .Append(dataProcessPipeline1)\r\n                .Append(mlContext.MulticlassClassification.Trainers.StochasticDualCoordinateAscent(labelColumn: \"Label\", featureColumn: \"Features\"))\r\n                .Append(mlContext.Transforms.Conversion.MapKeyToValue(\"PredictedLabel\"));\r\n\r\n            //var trainer = mlContext.MulticlassClassification.Trainers.StochasticDualCoordinateAscent(labelColumn: \"Label\", featureColumn: \"Features\");\r\n            //modelBuilder.AddTrainer(trainer);\r\n            modelBuilder.AddTrainer(pipeline);\r\n            #endregion\r\n            #region \"STEP 4: Train the model fitting to the DataSet\"\r\n            //The pipeline is trained on the dataset that has been loaded and transformed.\r\n            //Console.WriteLine(\"=============== Training the model ===============\");\r\n\r\n            modelBuilder.Train(trainingDataView);\r\n            #endregion\r\n            #region \"STEP 5: Evaluate the model and show accuracy stats\"\r\n            //Console.WriteLine(\"===== Evaluating Model's accuracy with Test data =====\");\r\n            //var metrics = modelBuilder.EvaluateMultiClassClassificationModel(trainingDataView, \"Label\");\r\n            //Common.ConsoleHelper.PrintMultiClassClassificationMetrics(trainer.ToString(), metrics);\r\n            #endregion\r\n            #region \"STEP 6: Save/persist the trained model to a .ZIP file\r\n            //Console.WriteLine(\"=============== Saving the model to a file ===============\");\r\n            string fullFilePath = GetModelPath(\"Norm\");\r\n[Norm_131931638095612677_544677f3-3124-4979-aae8-0a6142ab4c67.Zip](https://github.com/dotnet/machinelearning/files/2804785/Norm_131931638095612677_544677f3-3124-4979-aae8-0a6142ab4c67.Zip)\r\n\r\n            modelBuilder.SaveModelAsFile(fullFilePath);\r\n            #endregion\r\n        }\r\n`\r\n\r\nLoad Model From 32 bit proccess\r\n\r\n```\r\npublic void LoadNormalTagsModel(string modelPath)\r\n        {\r\n            var mlContext = new MLContext(seed: 0);\r\n            ITransformer trainedModel;\r\n//Here is the Exception line\r\n            using (var stream = new FileStream(modelPath, FileMode.Open, FileAccess.Read, FileShare.Read))\r\n            {\r\n                trainedModel = mlContext.Model.Load(stream);\r\n            }\r\n            var predEngine = trainedModel.CreatePredictionEngine<NormalTagsModelFeatures, NormalTagsPrediction>(mlContext);\r\n            \r\n        }\r\n```\r\n\r\ni attached the generated model , \r\n\r\nhow can i overcome this scenario please advice\r\n\r\nHistory 👍 https://github.com/dotnet/machinelearning-samples/issues/216","Url":"https://github.com/dotnet/machinelearning/issues/2283","RelatedDescription":"Open issue \"Error load Model (Generated from 64 bit ) From 32 bit \" (#2283)"},{"Id":"403960852","IsPullRequest":false,"CreatedAt":"2019-01-28T19:03:03","Actor":"TomFinley","Number":"2282","RawContent":null,"Title":"Lockdown Microsoft.ML.Transforms public surface","State":"open","Body":"We ought to internalize as much of that assembly to those things we want to be public, and finalize its public API.","Url":"https://github.com/dotnet/machinelearning/issues/2282","RelatedDescription":"Open issue \"Lockdown Microsoft.ML.Transforms public surface\" (#2282)"},{"Id":"403960616","IsPullRequest":false,"CreatedAt":"2019-01-28T19:02:25","Actor":"TomFinley","Number":"2281","RawContent":null,"Title":"Lockdown Microsoft.ML.TimeSeries public surface","State":"open","Body":"We ought to internalize as much of that assembly to those things we want to be public, and finalize its public API.","Url":"https://github.com/dotnet/machinelearning/issues/2281","RelatedDescription":"Open issue \"Lockdown Microsoft.ML.TimeSeries public surface\" (#2281)"},{"Id":"403960467","IsPullRequest":false,"CreatedAt":"2019-01-28T19:02:00","Actor":"TomFinley","Number":"2280","RawContent":null,"Title":"Lockdown Microsoft.ML.TensorFlow public surface","State":"open","Body":"We ought to internalize as much of that assembly to those things we want to be public, and finalize its public API.","Url":"https://github.com/dotnet/machinelearning/issues/2280","RelatedDescription":"Open issue \"Lockdown Microsoft.ML.TensorFlow public surface\" (#2280)"},{"Id":"403960221","IsPullRequest":false,"CreatedAt":"2019-01-28T19:01:21","Actor":"TomFinley","Number":"2279","RawContent":null,"Title":"Separate Nuget versioning for \"final\" and \"experimental\" nugets","State":"open","Body":"Right now all our nugets have one global version. Once we ship V1, however, there will be some assemblies and nugets that are \"final,\" in that their API surface is locked and going forward we do not make breaking changes, and other assemblies doing more experimental work where we're not quite so sure what the final surface will look like.\r\n\r\nAn example of this is `Microsoft.ML.StaticPipe` and friends. The statically typed pipelines work is interesting and we want to continue working on it post v1. Similarly, `Microsoft.ML.Ensemble` seems like something we don't have time to get the API \"right\" for yet. (Though we might solve that specific one in a different way by just hiding it altogether for now.)\r\n\r\nA different example of this would be things like `Microsoft.ML.EntryPoints`, which we have to make public for \"reasons,\" but cannot reasonably be said to have a public API.\r\n\r\nAnother example would be some sort of \"smuggler's cove\" assembly/nuget (which does not yet exist) that exposes some infrastructure that some important scenario or other needs access to, but we are not comfortable making as part of our public API. (E.g., some conduit to \"get at\" the internal methods of the `ComponentCatalog`.)\r\n\r\n @eerhardt opined that if we do that, then of course there should be a separate versioning scheme for those. This would include changes to the package build infrastructure to accomodate this \"two tier\" structure we do not have yet.","Url":"https://github.com/dotnet/machinelearning/issues/2279","RelatedDescription":"Open issue \"Separate Nuget versioning for \"final\" and \"experimental\" nugets\" (#2279)"},{"Id":"403958011","IsPullRequest":false,"CreatedAt":"2019-01-28T18:55:37","Actor":"CESARDELATORRE","Number":"2278","RawContent":null,"Title":"Simplify post-prediction schema info to make user-friendly prediction's info such as list of ranked predicted labels/categories","State":"open","Body":"**CONTEXT:** \r\n\r\nIn this PR (and probably, available in 0.10), we're allowing the user to get some schema info after predicting:\r\n\r\nhttps://github.com/dotnet/machinelearning/pull/2250 \r\n\r\nThat way a user can get, for example, get the list of the predicted labels in a multi-class classification and related that to the list/array of scores. \r\n\r\nThat's very useful for business cases where you want to automatically predict/assign a product to multiple categories, for example, instead of predicting a single category/label.\r\n\r\nHowever, the current user's code needs to be like the following, using not user-friendly types such as VBuffer, etc.:\r\n\r\n```\r\n            // Slot names on top of Score column represent original labels for i-th value in Score array.\r\n            VBuffer<ReadOnlyMemory<char>> slotNames = default;\r\n            engine.OutputSchema[nameof(IrisPrediction.Score)].GetSlotNames(ref slotNames);\r\n            // Key names represent original values for PredictedLabel column.\r\n            VBuffer<ReadOnlyMemory<char>> keys = default;\r\n            engine.OutputSchema[nameof(IrisPrediction.PredictedLabel)].GetKeyValues(ref keys);\r\n\r\n            Assert.True(slotNames.GetItemOrDefault(0).ToString() == \"Iris-setosa\");\r\n            Assert.True(slotNames.GetItemOrDefault(1).ToString() == \"Iris-versicolor\");\r\n            Assert.True(slotNames.GetItemOrDefault(2).ToString() == \"Iris-virginica\");\r\n```\r\n\r\n**REQUEST:**\r\n\r\nThe ask is to simplify it and provide types and simpler API with user-friendly data-types that are familiar for regular .NET developers. \r\n\r\nAlso, a more straightforward way to relate the list of labels with their related scores. Maybe returning a single array/list with both concepts coming along (labels-scores) instead of separated arrays/lists?\r\n\r\n\r\n-------------\r\nRelated info\r\n-------------\r\n\r\nThis topic is related with this original issue, too:\r\nMulti-class classification returning ranked list of possible labels): https://github.com/dotnet/machinelearning/issues/2233\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2278","RelatedDescription":"Open issue \"Simplify post-prediction schema info to make user-friendly prediction's info such as list of ranked predicted labels/categories\" (#2278)"},{"Id":"403957934","IsPullRequest":false,"CreatedAt":"2019-01-28T18:55:25","Actor":"TomFinley","Number":"2277","RawContent":null,"Title":"Lockdown Microsoft.ML.SamplesUtils public surface","State":"open","Body":"We ought to internalize as much of that assembly to those things we want to be public, and finalize its public API.\r\n\r\nThis is an odd one. In spirit it seems similar to [similar utilites from sklearn](https://scikit-learn.org/stable/datasets/index.html), which are valuable. But, should it be part of the main nuget? Is this public API surface what we really want? It seems like maybe making it an extension on top of `DataOperationsCatalog` or somesuch might be a better choice. And should it be in a separate Nuget since its functionality is just to make some samples be self contained? (Certainly our samples could reference another nuget, since this one is so odd.)\r\n\r\nThese existential questions may be best answered by @sfilipi .","Url":"https://github.com/dotnet/machinelearning/issues/2277","RelatedDescription":"Open issue \"Lockdown Microsoft.ML.SamplesUtils public surface\" (#2277)"},{"Id":"403956157","IsPullRequest":false,"CreatedAt":"2019-01-28T18:50:38","Actor":"TomFinley","Number":"2276","RawContent":null,"Title":"Lockdown Microsoft.ML.Recommender public surface","State":"open","Body":"We ought to internalize as much of that assembly to those things we want to be public, and finalize its public API.\r\n\r\nThis particular assembly and its nuget might be one we mark as having an experimental API via its nuget. It seems valuable, but I'm not sure how confident we are that we got the shape of the API \"right.\" @wschin may know best on this front.","Url":"https://github.com/dotnet/machinelearning/issues/2276","RelatedDescription":"Open issue \"Lockdown Microsoft.ML.Recommender public surface\" (#2276)"},{"Id":"403955447","IsPullRequest":false,"CreatedAt":"2019-01-28T18:48:38","Actor":"TomFinley","Number":"2275","RawContent":null,"Title":"Lockdown Microsoft.ML.PCA public surface","State":"open","Body":"We ought to internalize as much of that assembly to those things we want to be public, and finalize its public API.","Url":"https://github.com/dotnet/machinelearning/issues/2275","RelatedDescription":"Open issue \"Lockdown Microsoft.ML.PCA public surface\" (#2275)"},{"Id":"403955169","IsPullRequest":false,"CreatedAt":"2019-01-28T18:47:52","Actor":"TomFinley","Number":"2274","RawContent":null,"Title":"Lockdown Microsoft.ML.Parquet public surface","State":"open","Body":"We ought to internalize as much of that assembly to those things we want to be public, and finalize its public API. In particular, making it resemble the other methods for creation of data views out of files (similar to text loading and binary file loading) would probably be the focus. Having it be what we call an `IDataReader` instead of the old legacy `IDataLoader` would be necessary.\r\n\r\nIf we do not have time for that, then perhaps making everything in this internal or else making the `Microsoft.ML.Parquet` nuget an experimental version is an answer.","Url":"https://github.com/dotnet/machinelearning/issues/2274","RelatedDescription":"Open issue \"Lockdown Microsoft.ML.Parquet public surface\" (#2274)"},{"Id":"403953134","IsPullRequest":false,"CreatedAt":"2019-01-28T18:42:30","Actor":"TomFinley","Number":"2273","RawContent":null,"Title":"Lockdown Microsoft.ML.Onnx public surface","State":"open","Body":"We ought to internalize as much of that assembly to those things we want to be public, and finalize its public API. This may be completed already; the public surface area I hope should just be the extension methods to export.","Url":"https://github.com/dotnet/machinelearning/issues/2273","RelatedDescription":"Open issue \"Lockdown Microsoft.ML.Onnx public surface\" (#2273)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-01-29T05:30:55.7448669Z","RunDurationInMilliseconds":861}