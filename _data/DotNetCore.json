{"Data":{"Blog":{"FeedItems":[{"Title":".NET Core is the Future of .NET ","PublishedOn":"2019-05-06T22:22:54+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"We introduced .NET Core 1.0 on November 2014. The goal with .NET Core was to take the learning from our experience building, shipping and servicing .NET Framework over the previous 12 years and build...","Href":"https://devblogs.microsoft.com/dotnet/net-core-is-the-future-of-net/","RawContent":null},{"Title":"Announcing ML.NET 1.0","PublishedOn":"2019-05-06T18:51:26+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"We are excited to announce the release of ML.NET 1.0 today.  ML.NET is a free, cross-platform and open source machine learning framework designed to bring the power of machine learning (ML) into .NET...","Href":"https://devblogs.microsoft.com/dotnet/announcing-ml-net-1-0/","RawContent":null},{"Title":"Announcing .NET Core 3.0 Preview 5","PublishedOn":"2019-05-06T16:01:05+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 3.0 Preview 5. It includes a new Json serializer, support for publishing single file executables, an update to runtime roll-forward, and changes in the BCL. If you...","Href":"https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0-preview-5/","RawContent":null},{"Title":"Introducing .NET 5","PublishedOn":"2019-05-06T16:00:50+00:00","CommentsCount":51,"FacebookCount":0,"Summary":"Today, we&#8217;re announcing that the next release after .NET Core 3.0 will be .NET 5. This will be the next big release in the .NET family.\nThere will be just one .NET going forward, and you will be...","Href":"https://devblogs.microsoft.com/dotnet/introducing-net-5/","RawContent":null},{"Title":"Using .NET and Docker Together – DockerCon 2019 Update","PublishedOn":"2019-04-30T05:19:15+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"DockerCon 2019 is being held this week, in San Francisco. We posted a DockerCon 2018 update last year, and it is time to share how we&#8217;ve improved the experience of using .NET and Docker together...","Href":"https://devblogs.microsoft.com/dotnet/using-net-and-docker-together-dockercon-2019-update/","RawContent":null},{"Title":"Introducing .NET for Apache® Spark™ Preview","PublishedOn":"2019-04-24T16:55:23+00:00","CommentsCount":9,"FacebookCount":0,"Summary":"Today at Spark + AI summit we are excited to announce .NET for Apache Spark. Spark is a popular open source distributed processing engine for analytics over large data sets. Spark can be used for...","Href":"https://devblogs.microsoft.com/dotnet/introducing-net-for-apache-spark/","RawContent":null},{"Title":"Upcoming Updates for .NET Framework 4.8","PublishedOn":"2019-04-19T21:40:16+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Upcoming Updates for .NET Framework 4.8\nThe .NET Framework 4.8 product release is now available. The .NET Framework 4.8 product will receive updates on the same cadence and the usual channels (Windows...","Href":"https://devblogs.microsoft.com/dotnet/upcoming-updates-for-net-framework-4-8/","RawContent":null},{"Title":"Announcing Entity Framework Core 3.0 Preview 4","PublishedOn":"2019-04-18T22:15:51+00:00","CommentsCount":39,"FacebookCount":0,"Summary":"Today, we are making the fourth preview of Entity Framework Core 3.0 available on NuGet, alongside .NET Core 3.0 Preview 4 and ASP.NET Core 3.0 Preview 4. We encourage you to install this preview to...","Href":"https://devblogs.microsoft.com/dotnet/announcing-entity-framework-core-3-0-preview-4/","RawContent":null},{"Title":"Announcing .NET Core 3 Preview 4","PublishedOn":"2019-04-18T22:13:01+00:00","CommentsCount":9,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 3.0 Preview 4. It includes a chart control for Windows Forms, HTTP/2 support, GC updates to use less memory, support for CPU limits with Docker, the addition of...","Href":"https://devblogs.microsoft.com/dotnet/announcing-net-core-3-preview-4/","RawContent":null},{"Title":"Announcing the .NET Framework 4.8","PublishedOn":"2019-04-18T20:12:27+00:00","CommentsCount":20,"FacebookCount":0,"Summary":"We are thrilled to announce the release of the .NET Framework 4.8 today. It’s included in the Windows 10 May 2019 Update. .NET Framework 4.8 is also available on Windows 7+ and Windows Server 2008...","Href":"https://devblogs.microsoft.com/dotnet/announcing-the-net-framework-4-8/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"9560620210","Type":"PullRequestEvent","CreatedAt":"2019-05-03T20:10:38","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/143","RelatedDescription":"Merged pull request \"Add AngleSharp\" (#143) at dotnet/foundation","RelatedBody":"cc @jongalloway "},{"Id":"9560610143","Type":"PullRequestEvent","CreatedAt":"2019-05-03T20:08:41","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/141","RelatedDescription":"Merged pull request \"add links to ML.NET docs\" (#141) at dotnet/foundation","RelatedBody":"/cc @JRAlexander @shauheen \r\n\r\nTo match the info we have added for other projects"},{"Id":"9560608015","Type":"PullRequestEvent","CreatedAt":"2019-05-03T20:08:15","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/144","RelatedDescription":"Merged pull request \"Add DotVVM\" (#144) at dotnet/foundation","RelatedBody":"cc @jongalloway "},{"Id":"9557840000","Type":"PullRequestEvent","CreatedAt":"2019-05-03T12:47:26","Actor":"tomasherceg","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/144","RelatedDescription":"Opened pull request \"Add DotVVM\" (#144) at dotnet/foundation","RelatedBody":"cc @jongalloway "},{"Id":"9523802619","Type":"PullRequestEvent","CreatedAt":"2019-04-27T20:23:58","Actor":"FlorianRappl","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/143","RelatedDescription":"Opened pull request \"Add AngleSharp\" (#143) at dotnet/foundation","RelatedBody":"cc @jongalloway "},{"Id":"9341532248","Type":"PullRequestEvent","CreatedAt":"2019-03-29T14:44:24","Actor":"BillWagner","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/142","RelatedDescription":"Merged pull request \"add docs samples link\" (#142) at dotnet/foundation","RelatedBody":"@BillWagner should we add the samples project too?"},{"Id":"9337730849","Type":"PullRequestEvent","CreatedAt":"2019-03-29T02:29:48","Actor":"mairaw","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/142","RelatedDescription":"Opened pull request \"add docs samples link\" (#142) at dotnet/foundation","RelatedBody":"@BillWagner should we add the samples project too?"},{"Id":"9337725308","Type":"PullRequestEvent","CreatedAt":"2019-03-29T02:28:20","Actor":"mairaw","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/141","RelatedDescription":"Opened pull request \"add links to ML.NET docs\" (#141) at dotnet/foundation","RelatedBody":"/cc @JRAlexander @shauheen \r\n\r\nTo match the info we have added for other projects"},{"Id":"9337679090","Type":"PullRequestEvent","CreatedAt":"2019-03-29T02:16:08","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/139","RelatedDescription":"Merged pull request \"Add link to ASP.NET Core docs\" (#139) at dotnet/foundation","RelatedBody":"Provide a link to the docs site for ASP.NET Core."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"9473320861","Type":"IssuesEvent","CreatedAt":"2019-04-19T01:16:11","Actor":"MichaelSimons","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/110","RelatedDescription":"Opened issue \"# New images for .NET Framework 4.8\" (#110) at dotnet/announcements","RelatedBody":"# New images for .NET Framework 4.8\r\n\r\nNew images have been released with support for [.NET Framework 4.8 runtime and SDK](https://devblogs.microsoft.com/dotnet/announcing-the-net-framework-4-8/).\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#271](https://github.com/Microsoft/dotnet-framework-docker/issues/271)\r\n\r\n## Details\r\n* Pull request: #270\r\n\r\nYou can access these new images with the following tags:\r\n* `mcr.microsoft.com/dotnet/framework/runtime:4.8`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.8`\r\n\r\nIn addition, the `latest` tag has been updated to refer to these new 4.8 images.\r\n\r\nCheck out the readme files for more information on the latest tags:\r\n* [Runtime](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.runtime.md)\r\n* [SDK](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.sdk.md)\r\n\r\nThe [3.5 SDK](https://github.com/Microsoft/dotnet-framework-docker/tree/master/3.5/sdk) images are intended to always contain the latest .NET Framework SDK and have also been updated to use the 4.8 SDK."},{"Id":"9445263990","Type":"IssuesEvent","CreatedAt":"2019-04-15T13:57:07","Actor":"MichaelSimons","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/109","RelatedDescription":"Opened issue \".NET Framework SDK container images now contain the Visual Studio 2019 toolset\" (#109) at dotnet/announcements","RelatedBody":"# .NET Framework SDK container images now contain the Visual Studio 2019 toolset\r\n.NET Framework SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add additional tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Framework SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Framework SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#269](https://github.com/Microsoft/dotnet-framework-docker/issues/269)\r\n\r\n## Details\r\nVisual Studio 2019 was released on April 2, 2019. We updated the .NET Framework SDK container images, on the same day, to include a new version of the .NET Framework SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag (e.g. mcr.microsoft.com/dotnet/framework/sdk:4.7.2-20190312-windowsservercore-ltsc2019).\r\n\r\nRelated pull request: #252"},{"Id":"9434908530","Type":"IssuesEvent","CreatedAt":"2019-04-12T20:35:55","Actor":"KathleenDollard","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/108","RelatedDescription":"Opened issue \".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\" (#108) at dotnet/announcements","RelatedBody":"# .NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\r\n\r\n.NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017. For example, 2.2.203 and 2.1.603 cause failures in Visual Studio 2017. To work on projects in Visual Studio 2017, use .NET Core SDK 2.2.1nn and 2.1.5nn, such as 2.2.106 and 2.1.506. You can install any combination of these SDKs side by side.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3124](https://github.com/dotnet/sdk/issues/3124)\r\n\r\n## Details\r\n\r\nYou can find the SDKs on you machine using the following at a command prompt:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2. Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nIf you downloaded the .NET Core SDK 2.2 between April 2 and April 12, 2019, the main [.NET downloads page](https://dotnet.microsoft.com/download/) included only 2.2.2nn. Starting April 12th, a new button marked \"Compatible with Visual Studio 2017\" is provided to target 2.2.1nn.\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nThis problem most often occurs because you manually uninstall the 2.1.5nn version. Simply reinstall it from the [.NET Core 2.1 downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n## More information\r\n\r\nHere is the draft of an article we are preparing for .NET Core documentation:\r\n\r\n---\r\n\r\n## Solving Problems with .NET Core SDK Selection in Visual Studio\r\n\r\nYou may have .NET Core SDKs on your machine and still have problems with Visual Studio finding an appropriate one. This article explains why this happens and how you can fix your installation.\r\n\r\nWhen Visual Studio can't find an appropriate version of the .NET Core SDK, you'll receive an error message. This may appear in the Error pane as NETSDK1045:\r\n\r\n\"The current .NET SDK does not support targeting .NET Core 2...\"\r\n\r\nYou can check what .NET Core SDKs you have on your machine with the following command:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\nUnless you have a global.json file, when you use `dotnet` from the command line, the latest .NET Core SDK is used.\r\n\r\n> [TIP!] \r\n> Open a command prompt and try to build with `dotnet build`. If the command line build works, but Visual Studio doesn't suggestions in this article may help.\r\n\r\nThe last two digits of the .NET Core SDK version numbers are in the format are a patch number, which is represented by `nn` in this article because we will continue to service them to include the latest runtimes. To find out more, vist the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\n## Fixes for Common Problems\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2… Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.2.1nn. As an example, 2.2.106 would be a valid entry.\r\n\r\nIf you downloaded the .NET Core SDK 2.2 after April 2, 2019, version 2.2.2nn (such as 2.2.203) is listed first and is the highest version available. However, Visual Studio 2017 requires 2.2.1nn (such as 2.2.106). .NET Core SDK 2.2.2nn works with Visual Studio 2019. Visual Studio 2017 and Visual Studio 2019 can be installed side by side, but this requires both .NET Core SDK 2.2.1nn and .NET Core SDK 2.2.2nn to develop .NET Core 2.2 applications.\r\n\r\nTo download .NET Core SDK 2.2.2nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.1.5nn. As an example, 2.1.505 would be a valid entry. \r\n\r\nThis problem occurs of you manually uninstall the 2.1.5nn version.\r\n\r\nThe Visual Studio 2019 installation will not remove this file and Visual Studio 2017 will continue to work side by side.\r\n\r\nTo reinstall .NET Core SDK 2.1.5nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n### Visual Studio 2019 can't target .NET Core 3.0 Preview\r\n\r\nIf you receive this error message in Visual Studio 2019:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 3.0.100-preview... As an example, SDK 3.0.100-preview3-010431 would be a valid entry.\r\n\r\nTo install .NET Core SDK 3.0.1nn preview, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/3.0).\r\n\r\nIn Visual Studio, go to `Tools\\Options\\Projects and Solutions\\.NET Core` and check the box `Use Previews of the .NET Core SDK`.\r\n\r\n> [NOTE!]\r\n> This option will be moving to `Tools\\Options\\Environment` and renamed `Preview Features` in Visual Studio 2019 version 16.1 Preview 2.\r\n\r\nIf you are targeting .NET Core 3.0 preview, the [C# language version will be C# 8.0 Preview by default](https://docs.microsoft.com/en-us/visualstudio/releases/2019/release-notes#csharp-defaults) allowing you to use new C# features.\r\n\r\n## Understand the relationship between .NET Core SDKs and Visual Studio build tools\r\n\r\nVisual Studio has its own copies of tools like MSBuild, NuGet and the compilers. If you install the .NET Core workload, it also installs the .NET Core SDK which has versions of these tools and provides tasks and targets. These two versions are built from the same repositories, but target .NET Framework and .NET Core respectively. \r\n\r\nWhen you build a .NET Core project in Visual Studio, it uses Visual Studio's copy of MSBuild, but the tasks and targets are supplied from the selected version of the .NET Core SDK. \r\n\r\nWhen you upgrade the .NET Core SDK, you get new tasks and targets. These new tasks and targets may contain features that are not supported by older versions of MSBuild. Like all of the .NET Core SDK, MSBuild is backwards compatible. It is not forwards compatible.\r\n\r\nThis generally works well, but requires a guarantee that the tasks and targets work with the MSBuild version. To ensure this, each .NET Core SDK indicates an MSBuild version range that is used by Visual Studio to determine compatibility. Versions of the .NET Core SDK that have a higher MSBuild identifier than expected are ignored by Visual Studio. In the normal case, this simply means you use the tasks and targets that were installed with your version of Visual Studio.\r\n\r\nBecause of this, you may have many versions of the .NET Core SDK on your machine and Visual Studio still fail to find one it considers appropriate. This is compounded by a poor error message, which we cannot fully correct because it is from the old version of the .NET Core SDK on your machine. Confusion is also compounded by a complex non-linear release matrix that makes it difficult to predict the right .NET Core SDK to select. We are working to improve all this. \r\n\r\n## The Visual Studio / .NET Core SDK support matrix\r\n\r\nThe last two digits of the .NET Core SDK version number are a patch number, which are represented by a `nn` in this table. You can learn more about .NET Core SDK and .NET Core Runtime versioning at the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\nThe following table shows which Visual Studio versions and .NET Core SDKs are compatible and how they are acquired if you are working with Visual Studio. \r\n\r\n| .NET Core SDK | .NET Core Runtime | Compatible Visual Studio | MSBuild | Notes                                     |\r\n|---------------|-------------------|--------------------------|---------|-------------------------------------------|\r\n| 2.1.5nn       | 2.1               | 2017                     | 15      | Installed as part of VS 2017 version 15.9 |\r\n| 2.1.6nn       | 2.1               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 2.2.1nn       | 2.2               | 2017                     | 15      | Installed manually                        |\r\n| 2.2.2nn       | 2.2               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 3.0.1nn       | 3.0 (Preview)     | 2019                     | 16      | Installed manually                        |\r\n\r\nVisual Studio 2017 cannot work with .NET Core SDK 2.1.6nn or 2.2.2nn.\r\n\r\nTo find out more about removing older versions of the .NET Core Runtime and .NET Core SDK, visit the [How to remove the .NET Core Runtime and SDK page](https://docs.microsoft.com/en-us/dotnet/core/versions/remove-runtime-sdk-versions?tabs=macos).\r\n\r\nTo download the .NET Core SDK, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core)."},{"Id":"9425046734","Type":"IssuesEvent","CreatedAt":"2019-04-11T15:16:44","Actor":"KathleenDollard","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/107","RelatedDescription":"Opened issue \"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\" (#107) at dotnet/announcements","RelatedBody":".NET Core 3 takes the next step in the .NET Core tool strategy with local tools. As part of this process, starting in Preview 4 DotNetCliToolReference tools will be restricted to targeting .NET Core 2.2 and below. DotNetCliToolReference tools can be used in projects targeting .NET Core 3.0, but the tools themselves should target .NET Core 2.2 or below.\r\n\r\nThe suggested approach going forward is to to use [.NET Core Local Tools](need link) when you want a tool that is specific to a project or repository. At the same time we are removing the need to access local tools by the verbose `dotnet tool run <toolname>` that was present in earlier previews. You can now access local tools via `dotnet <toolname>`.\r\n\r\nDotNetCliToolReference tools have a flaw in how their dependencies are restored which can create [difficult to diagnose bugs when running these tools](https://github.com/NuGet/Home/issues/5067). This issue would occur much more frequently if targeting .NET Core 3.0 was allowed. Restricting tools to target only .NET Core 2.2 and below means existing scenarios to continue to work (as well as they previously did), regardless of the framework version targeted by the project or the current .NET Core SDK. \r\n\r\nThe new .NET Core tool strategy avoids this flaw in restore strategy and offers other benefits, like the ability to author one type of tool and install it in different ways depending on project and user needs.\r\n\r\nWe look forward to your feedback on .NET Core Local Tools, and on challenges you face moving away from DotNetCliToolReference tools. "}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"9575071866","Type":"PullRequestEvent","CreatedAt":"2019-05-07T04:49:21","Actor":"sandreenko","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/24421","RelatedDescription":"Merged pull request \"Add ZapDisable  and TailCallStress ADO testing.\" (#24421) at dotnet/coreclr","RelatedBody":"4f3ad48f79: Rename ADO group outerloop-jitminopts-jitstress1-jitstress2 to outerloop-jitstress.\r\n\r\nAllows us to add more scenarios there.\r\n\r\ne1675ea520: Add zapdisable and tailcallstress testing.\r\n\r\nContributes to #24358."},{"Id":"9574887830","Type":"PullRequestEvent","CreatedAt":"2019-05-07T03:53:18","Actor":"davmason","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/24291","RelatedDescription":"Merged pull request \"Add option to only notify profiler of LOH allocations\" (#24291) at dotnet/coreclr","RelatedBody":"Fixes https://github.com/dotnet/coreclr/issues/24217."},{"Id":"9574887797","Type":"IssuesEvent","CreatedAt":"2019-05-07T03:53:17","Actor":"davmason","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/24217","RelatedDescription":"Closed issue \"Profiler API: Add COR_PRF_MONITOR_LARGEOBJECT_ALLOCATED to complement COR_PRF_MONITOR_OBJECT_ALLOCATED\" (#24217) at dotnet/coreclr","RelatedBody":"When `COR_PRF_MONITOR_OBJECT_ALLOCATED` is enabled, every object allocation is notified to the Profiler API. This can be very expensive in production monitoring.\r\n\r\nAdding a `COR_PRF_MONITOR_LARGEOBJECT_ALLOCATED` can enable this only for LOH allocations, which are considerably less in most applications. This can then be enabled in production to track LOH allocations efficiently (when profiler monitoring is enabled for all allocations the slow allocation helpers are used) without resorting to enabling monitoring for ALL object allocations."},{"Id":"9574813416","Type":"PullRequestEvent","CreatedAt":"2019-05-07T03:31:37","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/24427","RelatedDescription":"Merged pull request \"Making constructor internal for types with internal abstract members\" (#24427) at dotnet/coreclr","RelatedBody":"Related to https://github.com/dotnet/corefx/pull/37479"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"9575092430","Type":"PullRequestEvent","CreatedAt":"2019-05-07T04:55:38","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/11292","RelatedDescription":"Merged pull request \"MSBuild 16.1.73\" (#11292) at dotnet/cli","RelatedBody":"This is, optimistically, the final MSBuild for 16.1.\r\n\r\nInternal PR: https://devdiv.visualstudio.com/DevDiv/_git/VS/pullrequest/179376."},{"Id":"9575091405","Type":"PullRequestEvent","CreatedAt":"2019-05-07T04:55:18","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/11291","RelatedDescription":"Merged pull request \"MSBuild 16.1.73 (2.1.7xx)\" (#11291) at dotnet/cli","RelatedBody":"This is, optimistically, the final MSBuild for 16.1.\r\n\r\nInternal PR: https://devdiv.visualstudio.com/DevDiv/_git/VS/pullrequest/179376."},{"Id":"9574768633","Type":"IssuesEvent","CreatedAt":"2019-05-07T03:19:03","Actor":"YunWeiaa","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/11288","RelatedDescription":"Closed issue \"Run dotnet tool run t-rex -- -h, it doesn't show help from t-rex.\" (#11288) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n1. Create empty directory\r\n2. Copy the following and create file called dotnet-tools.json\r\n \r\n{\r\n    \"version\": 1,\r\n    \"isRoot\": true,\r\n    \"tools\": {\r\n        \"t-rex\": {\r\n            \"version\": \"1.0.53\",\r\n            \"commands\": [\"t-rex\"]\r\n        },\r\n        \"dotnetsay\": {\r\n            \"version\": \"2.1.4\",\r\n            \"commands\": [\"dotnetsay\"]\r\n        }\r\n    }\r\n}\r\n\r\n3. cd to the directory with manifest file\r\n4. Run  dotnet tool run t-rex -- -h\r\n5. It should show error. Follow the instruction from the error\r\n6. Run dotnet tool run t-rex -- -h again\r\n\r\n## Expected  behavior\r\nIt should show help from t-rex\r\n\r\n\r\n## Actual behavior\r\nRun dotnet tool run t-rex -- -h, it doesn't show help from t-rex.\r\n![image](https://user-images.githubusercontent.com/33921754/57220293-5f867f80-702d-11e9-8ae3-1f3e76372612.png)\r\n\r\n\r\n## Environment data\r\nD16.1/28902.138(16.1.0 preview3.0)+ CLI/SDK: 3.0.100-preview6-011765\r\n`dotnet --info` output:\r\n```\r\n.NET Core SDK（反映任何 global.json）:\r\n Version:   3.0.100-preview6-011765\r\n Commit:    fffa58a7df\r\n\r\n运行时环境:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview6-011765\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview6-27705-13\r\n  Commit:  ccea80903e\r\n\r\n.NET Core SDKs installed:\r\n  2.1.700-preview-009618 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.300-preview-010067 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview6-011765 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview6-19255-03 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview6-27705-13 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview6-27705-13 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"9561606365","Type":"IssuesEvent","CreatedAt":"2019-05-04T00:25:58","Actor":"bartonjs","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/1178","RelatedDescription":"Opened issue \"Consider asymmetric key import/export API for NS2.1\" (#1178) at dotnet/standard","RelatedBody":"https://github.com/dotnet/corefx/issues/20414 significantly helps .NET applications work with asymmetric keys \"the Linux way\", as well as other generally useful in hybrid environments scenarios.\r\n\r\nTypes to diff against corefx/3.0:\r\n* System.Security.Cryptography.AsymmetricAlgorithm\r\n* System.Security.Cryptography.RSA\r\n* System.Security.Cryptography.ECDsa\r\n* System.Security.Cryptography.ECDiffieHellman\r\n\r\n(and potentially the deriving types, for their `override`s)"},{"Id":"9559532526","Type":"PullRequestEvent","CreatedAt":"2019-05-03T16:58:36","Actor":"mmitche","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1177","RelatedDescription":"Merged pull request \"Move to Azure DevOps for public CI\" (#1177) at dotnet/standard","RelatedBody":""}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"9575184584","Type":"PullRequestEvent","CreatedAt":"2019-05-07T05:22:24","Actor":"dotnet-maestro-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/37484","RelatedDescription":"Opened pull request \"Update ProjectNTfs, ProjectNTfsTestILC to beta-27707-00, beta-27707-00, respectively (master)\" (#37484) at dotnet/corefx","RelatedBody":"/cc @dotnet/maestro-reviewers-core"},{"Id":"9575001592","Type":"PullRequestEvent","CreatedAt":"2019-05-07T04:27:08","Actor":"ericstj","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corefx/pull/37479","RelatedDescription":"Merged pull request \"Making ctors internal for types with internal abstract methods\" (#37479) at dotnet/corefx","RelatedBody":""}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"9574831203","Type":"IssuesEvent","CreatedAt":"2019-05-07T03:36:35","Actor":"cston","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/35549","RelatedDescription":"Opened issue \"Parse error reported for `F<T>!`\" (#35549) at dotnet/roslyn","RelatedBody":"```C#\r\ndelegate void D();\r\nclass Program\r\n{\r\n    static void F<T>() => throw null!;\r\n    static void G<T>()\r\n    {\r\n        _ = new D(F<T>!);\r\n    }\r\n}\r\n```\r\n```\r\n(7,24): error CS1525: Invalid expression term ')'\r\n```"},{"Id":"9574456254","Type":"PullRequestEvent","CreatedAt":"2019-05-07T01:52:17","Actor":"cston","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/35535","RelatedDescription":"Merged pull request \"Ignore annotations analyzing method calls for attributes\" (#35535) at dotnet/roslyn","RelatedBody":"Ignore annotations on method parameters when analyzing method calls within a `BoundAttribute`.\r\n\r\nThis is a simple solution to avoid cycles binding attributes at the expense of additional nullable warnings. The additional warnings should only occur in error cases.\r\n\r\nFixes #35056."},{"Id":"9574456246","Type":"IssuesEvent","CreatedAt":"2019-05-07T01:52:17","Actor":"cston","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/35056","RelatedDescription":"Closed issue \"StackOverflow in NullableWalker for circular attributes\" (#35056) at dotnet/roslyn","RelatedBody":"### Repro\r\n\r\nCompile the below code using the latest nightly and `LangVersion=preview` (this was specifically repro'd on `3.1.0-beta3-19213-02` and `3.1.0-beta3-19217-05`)\r\n\r\n```csharp\r\nusing System;\r\n\r\n[Circular(1)] \r\npublic class CircularAttribute : Attribute \r\n{ \r\n    [Circular(2)] \r\n    public CircularAttribute([Circular(3)] int x) \r\n    { \r\n    } \r\n}\r\n```\r\n\r\n### Stack Trace\r\n\r\n[StackTrace.txt](https://github.com/dotnet/roslyn/files/3089967/StackTrace.txt)\r\n"},{"Id":"9574098958","Type":"PullRequestEvent","CreatedAt":"2019-05-07T00:08:36","Actor":"heejaechang","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/35383","RelatedDescription":null,"RelatedBody":"fix https://github.com/dotnet/roslyn/issues/35360\r\n\r\n### Customer scenario\r\n\r\nUser has CPS project opened in a VS, and user unloaded the project and a while later, VS crashes.\r\n\r\n### Bugs this fixes\r\n\r\nhttps://github.com/dotnet/roslyn/issues/35360\r\n\r\n### Workarounds, if any\r\n\r\nNone.\r\n\r\n### Risk\r\n\r\nLow. since fix is simply catching the exception and ignore. risk should be low.\r\n\r\n### Performance impact\r\n\r\nNo significant impact.\r\n\r\n### Is this a regression from a previous update?\r\n\r\nYes.\r\n\r\n### Root cause analysis\r\n\r\nwe added support for the designer attribute such as \"form\" for CPS in https://github.com/dotnet/roslyn/pull/34785 but missed exception handling where the CPS project is already unloaded at the time we do the actual analysis.\r\n\r\nthis fix basically detects such case (exception) and ignore the exception.\r\n\r\n### How was the bug found?\r\n\r\ndogfooding\r\n"},{"Id":"9574098769","Type":"PullRequestEvent","CreatedAt":"2019-05-07T00:08:32","Actor":"heejaechang","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/pull/35383","RelatedDescription":"Closed pull request \"fixed issue where analyzer run after project is already removed from VS.\" (#35383) at dotnet/roslyn","RelatedBody":"fix https://github.com/dotnet/roslyn/issues/35360\r\n\r\n### Customer scenario\r\n\r\nUser has CPS project opened in a VS, and user unloaded the project and a while later, VS crashes.\r\n\r\n### Bugs this fixes\r\n\r\nhttps://github.com/dotnet/roslyn/issues/35360\r\n\r\n### Workarounds, if any\r\n\r\nNone.\r\n\r\n### Risk\r\n\r\nLow. since fix is simply catching the exception and ignore. risk should be low.\r\n\r\n### Performance impact\r\n\r\nNo significant impact.\r\n\r\n### Is this a regression from a previous update?\r\n\r\nYes.\r\n\r\n### Root cause analysis\r\n\r\nwe added support for the designer attribute such as \"form\" for CPS in https://github.com/dotnet/roslyn/pull/34785 but missed exception handling where the CPS project is already unloaded at the time we do the actual analysis.\r\n\r\nthis fix basically detects such case (exception) and ignore the exception.\r\n\r\n### How was the bug found?\r\n\r\ndogfooding\r\n"},{"Id":"9574070277","Type":"PullRequestEvent","CreatedAt":"2019-05-07T00:00:44","Actor":"dotnet-bot","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/35548","RelatedDescription":"Opened pull request \"Merge master to master-vs-deps\" (#35548) at dotnet/roslyn","RelatedBody":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"9574968661","Type":"PullRequestEvent","CreatedAt":"2019-05-07T04:17:53","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7404","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#7404) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @Anipik"},{"Id":"9574837941","Type":"PullRequestEvent","CreatedAt":"2019-05-07T03:38:36","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7389","RelatedDescription":"Merged pull request \"Port GC changes from coreclr - 7\" (#7389) at dotnet/corert","RelatedBody":"This port continues https://github.com/dotnet/corert/pull/7383\r\nPorting strategy: extracting patches via `format-patch` from coreclr, adjusting paths, then `am` them on corert.\r\n\r\n**Glossary:**\r\n- already merged: change already exists in corert\r\n- gc only port: change only affected the gc directory and patch applied with no conflicts\r\n- manual port: change applied with custom changes\r\n- omitted changes: contains changes to files that do not exists in corert and were discarded\r\n\r\n**Changes since [last commit](https://github.com/dotnet/coreclr/commit/ee454e11d0c73820dde10ab710f9d6eccd4471f1):**\r\n- https://github.com/dotnet/coreclr/commit/984f6719a3c4b0ad35cba6b9d819a33935bc0b3e (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/1a183684b1ecf63ece8a2fd80173f083c0deea52 (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/5529df988f80e7fe67ec46f9f6cbd169fdf7edd5 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/0f66b465dbe7774ff7514d4f2e160f0616b4085a (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/eb12b78102f2b54dc082caabcd1b59b42166509b (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/0834425813497593ceda8bb0ae12dcc463011d7c (manual port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/77eb339752afa774655d88121f4d8f5de05f6d0a (manual port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/0597a34b570d359d34a03c74e1007025c43ae7e8 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/bab2cc30b1516cd257aba763c7a1c06497219ede (manual port)\r\n- https://github.com/dotnet/coreclr/commit/f1d81d24932391c0f087364cd91a66ac2c758e35 (manual port)\r\n- https://github.com/dotnet/coreclr/commit/4af0f91b0f3b9a99b8cb9bc3551576494b058732 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/1e11b32ca720f886adfa0cc2a6a46829feba78d0 (gc only port, omitted changes)\r\n\r\n**Points of interest**:\r\nIn https://github.com/dotnet/coreclr/commit/0834425813497593ceda8bb0ae12dcc463011d7c methods were added to the GCToEEInterface, that were using the CLRConfig system to acquire more information.\r\nAs that doesn't seem to be available in CoreRT, i've directed them to go against `g_pConfig` where possible."},{"Id":"9574826573","Type":"PullRequestEvent","CreatedAt":"2019-05-07T03:35:17","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7404","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#7404) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"9573827784","Type":"PullRequestEvent","CreatedAt":"2019-05-06T22:56:28","Actor":"Suchiman","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/corert/pull/7389","RelatedDescription":null,"RelatedBody":"This port continues https://github.com/dotnet/corert/pull/7383\r\nPorting strategy: extracting patches via `format-patch` from coreclr, adjusting paths, then `am` them on corert.\r\n\r\n**Glossary:**\r\n- already merged: change already exists in corert\r\n- gc only port: change only affected the gc directory and patch applied with no conflicts\r\n- manual port: change applied with custom changes\r\n- omitted changes: contains changes to files that do not exists in corert and were discarded\r\n\r\n**Changes since [last commit](https://github.com/dotnet/coreclr/commit/ee454e11d0c73820dde10ab710f9d6eccd4471f1):**\r\n- https://github.com/dotnet/coreclr/commit/984f6719a3c4b0ad35cba6b9d819a33935bc0b3e (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/1a183684b1ecf63ece8a2fd80173f083c0deea52 (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/5529df988f80e7fe67ec46f9f6cbd169fdf7edd5 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/0f66b465dbe7774ff7514d4f2e160f0616b4085a (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/eb12b78102f2b54dc082caabcd1b59b42166509b (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/0834425813497593ceda8bb0ae12dcc463011d7c (manual port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/77eb339752afa774655d88121f4d8f5de05f6d0a (manual port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/0597a34b570d359d34a03c74e1007025c43ae7e8 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/bab2cc30b1516cd257aba763c7a1c06497219ede (manual port)\r\n- https://github.com/dotnet/coreclr/commit/f1d81d24932391c0f087364cd91a66ac2c758e35 (manual port)\r\n- https://github.com/dotnet/coreclr/commit/4af0f91b0f3b9a99b8cb9bc3551576494b058732 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/1e11b32ca720f886adfa0cc2a6a46829feba78d0 (gc only port, omitted changes)\r\n\r\n**Points of interest**:\r\nIn https://github.com/dotnet/coreclr/commit/0834425813497593ceda8bb0ae12dcc463011d7c methods were added to the GCToEEInterface, that were using the CLRConfig system to acquire more information.\r\nAs that doesn't seem to be available in CoreRT, i've directed them to go against `g_pConfig` where possible."},{"Id":"9573827505","Type":"PullRequestEvent","CreatedAt":"2019-05-06T22:56:24","Actor":"Suchiman","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/7389","RelatedDescription":"Closed pull request \"Port GC changes from coreclr - 7\" (#7389) at dotnet/corert","RelatedBody":"This port continues https://github.com/dotnet/corert/pull/7383\r\nPorting strategy: extracting patches via `format-patch` from coreclr, adjusting paths, then `am` them on corert.\r\n\r\n**Glossary:**\r\n- already merged: change already exists in corert\r\n- gc only port: change only affected the gc directory and patch applied with no conflicts\r\n- manual port: change applied with custom changes\r\n- omitted changes: contains changes to files that do not exists in corert and were discarded\r\n\r\n**Changes since [last commit](https://github.com/dotnet/coreclr/commit/ee454e11d0c73820dde10ab710f9d6eccd4471f1):**\r\n- https://github.com/dotnet/coreclr/commit/984f6719a3c4b0ad35cba6b9d819a33935bc0b3e (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/1a183684b1ecf63ece8a2fd80173f083c0deea52 (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/5529df988f80e7fe67ec46f9f6cbd169fdf7edd5 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/0f66b465dbe7774ff7514d4f2e160f0616b4085a (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/eb12b78102f2b54dc082caabcd1b59b42166509b (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/0834425813497593ceda8bb0ae12dcc463011d7c (manual port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/77eb339752afa774655d88121f4d8f5de05f6d0a (manual port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/0597a34b570d359d34a03c74e1007025c43ae7e8 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/bab2cc30b1516cd257aba763c7a1c06497219ede (manual port)\r\n- https://github.com/dotnet/coreclr/commit/f1d81d24932391c0f087364cd91a66ac2c758e35 (manual port)\r\n- https://github.com/dotnet/coreclr/commit/4af0f91b0f3b9a99b8cb9bc3551576494b058732 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/1e11b32ca720f886adfa0cc2a6a46829feba78d0 (gc only port, omitted changes)\r\n\r\n**Points of interest**:\r\nIn https://github.com/dotnet/coreclr/commit/0834425813497593ceda8bb0ae12dcc463011d7c methods were added to the GCToEEInterface, that were using the CLRConfig system to acquire more information.\r\nAs that doesn't seem to be available in CoreRT, i've directed them to go against `g_pConfig` where possible."},{"Id":"9573097473","Type":"PullRequestEvent","CreatedAt":"2019-05-06T20:36:58","Actor":"Suchiman","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/corert/pull/7389","RelatedDescription":null,"RelatedBody":"This port continues https://github.com/dotnet/corert/pull/7383\r\nPorting strategy: extracting patches via `format-patch` from coreclr, adjusting paths, then `am` them on corert.\r\n\r\n**Glossary:**\r\n- already merged: change already exists in corert\r\n- gc only port: change only affected the gc directory and patch applied with no conflicts\r\n- manual port: change applied with custom changes\r\n- omitted changes: contains changes to files that do not exists in corert and were discarded\r\n\r\n**Changes since [last commit](https://github.com/dotnet/coreclr/commit/ee454e11d0c73820dde10ab710f9d6eccd4471f1):**\r\n- https://github.com/dotnet/coreclr/commit/984f6719a3c4b0ad35cba6b9d819a33935bc0b3e (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/1a183684b1ecf63ece8a2fd80173f083c0deea52 (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/5529df988f80e7fe67ec46f9f6cbd169fdf7edd5 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/0f66b465dbe7774ff7514d4f2e160f0616b4085a (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/eb12b78102f2b54dc082caabcd1b59b42166509b (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/0834425813497593ceda8bb0ae12dcc463011d7c (manual port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/77eb339752afa774655d88121f4d8f5de05f6d0a (manual port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/0597a34b570d359d34a03c74e1007025c43ae7e8 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/bab2cc30b1516cd257aba763c7a1c06497219ede (manual port)\r\n- https://github.com/dotnet/coreclr/commit/f1d81d24932391c0f087364cd91a66ac2c758e35 (manual port)\r\n- https://github.com/dotnet/coreclr/commit/4af0f91b0f3b9a99b8cb9bc3551576494b058732 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/1e11b32ca720f886adfa0cc2a6a46829feba78d0 (gc only port, omitted changes)\r\n\r\n**Points of interest**:\r\nIn https://github.com/dotnet/coreclr/commit/0834425813497593ceda8bb0ae12dcc463011d7c methods were added to the GCToEEInterface, that were using the CLRConfig system to acquire more information.\r\nAs that doesn't seem to be available in CoreRT, i've directed them to go against `g_pConfig` where possible."},{"Id":"9573097196","Type":"PullRequestEvent","CreatedAt":"2019-05-06T20:36:55","Actor":"Suchiman","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/7389","RelatedDescription":"Closed pull request \"Port GC changes from coreclr - 7\" (#7389) at dotnet/corert","RelatedBody":"This port continues https://github.com/dotnet/corert/pull/7383\r\nPorting strategy: extracting patches via `format-patch` from coreclr, adjusting paths, then `am` them on corert.\r\n\r\n**Glossary:**\r\n- already merged: change already exists in corert\r\n- gc only port: change only affected the gc directory and patch applied with no conflicts\r\n- manual port: change applied with custom changes\r\n- omitted changes: contains changes to files that do not exists in corert and were discarded\r\n\r\n**Changes since [last commit](https://github.com/dotnet/coreclr/commit/ee454e11d0c73820dde10ab710f9d6eccd4471f1):**\r\n- https://github.com/dotnet/coreclr/commit/984f6719a3c4b0ad35cba6b9d819a33935bc0b3e (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/1a183684b1ecf63ece8a2fd80173f083c0deea52 (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/5529df988f80e7fe67ec46f9f6cbd169fdf7edd5 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/0f66b465dbe7774ff7514d4f2e160f0616b4085a (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/eb12b78102f2b54dc082caabcd1b59b42166509b (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/0834425813497593ceda8bb0ae12dcc463011d7c (manual port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/77eb339752afa774655d88121f4d8f5de05f6d0a (manual port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/0597a34b570d359d34a03c74e1007025c43ae7e8 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/bab2cc30b1516cd257aba763c7a1c06497219ede (manual port)\r\n- https://github.com/dotnet/coreclr/commit/f1d81d24932391c0f087364cd91a66ac2c758e35 (manual port)\r\n- https://github.com/dotnet/coreclr/commit/4af0f91b0f3b9a99b8cb9bc3551576494b058732 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/1e11b32ca720f886adfa0cc2a6a46829feba78d0 (gc only port, omitted changes)\r\n\r\n**Points of interest**:\r\nIn https://github.com/dotnet/coreclr/commit/0834425813497593ceda8bb0ae12dcc463011d7c methods were added to the GCToEEInterface, that were using the CLRConfig system to acquire more information.\r\nAs that doesn't seem to be available in CoreRT, i've directed them to go against `g_pConfig` where possible."},{"Id":"9573029587","Type":"PullRequestEvent","CreatedAt":"2019-05-06T20:26:12","Actor":"trylek","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7403","RelatedDescription":"Opened pull request \"Initial CPAOT support for large version bubble\" (#7403) at dotnet/corert","RelatedBody":"This change modifies the existing --inputbubble CPAOT option\r\nto work the same as Crossgen /largeversionbubble i.e. the main module\r\nand all reference assemblies are considered to belong to the same\r\nversion bubble.\r\n\r\nThe gist of the change deals with encoding module overrides in\r\nsignatures. I have implemented a new R2R header table\r\nManifestMetadataTableNode and added logic for composing and emitting\r\nthe extra AssemblyRef list.\r\n\r\nOne challenging bit was that we need to emit all the signatures before\r\nemitting the ManifestMetadataTableNode because only the emission\r\nof the signatures shakes out all the required AssemblyRef's. I have\r\nadded a simple loop to ImportSectionsTableNode / ImportSectionNode\r\nthat traverses and emits all registered import cell signatures.\r\n\r\nAfter I managed to make the basic signature emission work with module\r\noverride, I continued hitting issues with the two entrypoint tables.\r\nFor the (non-generic) method entrypoint table we need to filter out\r\nmethods outside of the current input module because the larger\r\ncompilation group representing the larger version bubble ends up\r\nexpanding the dependency graph to framework methods.\r\n\r\nWhile these \"external\" methods are not compiled into the output\r\nexecutable (except when they are occasionally inlined into a local\r\nmethod), we were still trying to emit them into the entrypoint\r\ntable and we were crashing compilation because we couldn't find\r\nsome of the necessary tokens.\r\n\r\nFor instance entrypoints, I didn't find any manner of encoding\r\na module override for their signatures in the native hashtable so\r\nfor now I added filtering that we're only storing those instance\r\nentrypoints that have the current input module as the reference\r\nmodule. One can theoretically imagine that a module may contain\r\narbitrary generic instantiations spanning other modules when\r\nlarger bubbles are on.\r\n\r\nWhile working on the change I also realized that the current way\r\nof basing signature contexts on input modules in CorInfoImpl.ReadyToRun\r\nwas incorrect - when a method gets inlined, we still need the original\r\nsignature context because that's what defines the ambient module\r\nused in the CoreCLR signature parser.\r\n\r\nI have deleted the field and instead I added a new method\r\nGetSignatureContext which currently returns\r\nReadyToRunCoregenNodeFactory.InputModuleContext. Once we start\r\nimplementing \"single-file\" (i.e. compiling multiple MSIL modules\r\ninto a single PE), we'll change this to something more fine-grained,\r\nmost likely based on some lookup on MethodBeingCompiled.\r\n\r\nThanks\r\n\r\nTomas"},{"Id":"9572542335","Type":"PullRequestEvent","CreatedAt":"2019-05-06T19:09:05","Actor":"nattress","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/corert/pull/7393","RelatedDescription":null,"RelatedBody":"When the JIT inlines methods outside the version bubble and those methods refer to fields, we cannot encode those field accesses. Abort the inline attempt in that case by guarding calls from `getFieldInfo` to get field import signatures.\r\n\r\nSkip emitting fixups for intrinsic field access (ie, IntPtr.Zero) that the JIT knows how to handle."},{"Id":"9572541743","Type":"PullRequestEvent","CreatedAt":"2019-05-06T19:08:59","Actor":"nattress","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/pull/7393","RelatedDescription":"Closed pull request \"Fix inlined field access outside version bubble\" (#7393) at dotnet/corert","RelatedBody":"When the JIT inlines methods outside the version bubble and those methods refer to fields, we cannot encode those field accesses. Abort the inline attempt in that case by guarding calls from `getFieldInfo` to get field import signatures.\r\n\r\nSkip emitting fixups for intrinsic field access (ie, IntPtr.Zero) that the JIT knows how to handle."},{"Id":"9572056827","Type":"PullRequestEvent","CreatedAt":"2019-05-06T17:53:34","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7402","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#7402) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @AaronRobinsonMSFT"},{"Id":"9571854041","Type":"PullRequestEvent","CreatedAt":"2019-05-06T17:21:35","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7402","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#7402) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"9571034017","Type":"PullRequestEvent","CreatedAt":"2019-05-06T15:18:45","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7400","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#7400) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @krwq"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"9573840098","Type":"PullRequestEvent","CreatedAt":"2019-05-06T22:59:33","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/3208","RelatedDescription":"Opened pull request \"Extend default AssetTargetFallback up to net48\" (#3208) at dotnet/sdk","RelatedBody":"Before:\r\n```\r\nAssetTargetFallback=net461\r\n```\r\n\r\nAfter:\r\n```\r\nAssetTargetFallback=net461;net462;net47;net471;net472;net48\r\n```\r\n\r\nThis ensures that existing projects do not get different assets, and that the \"oldest\" available assets beyond net461 (deemed most compatible) are used.\r\n\r\nFix #2425 "},{"Id":"9572220278","Type":"PullRequestEvent","CreatedAt":"2019-05-06T18:19:09","Actor":"nugetlurker","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/3207","RelatedDescription":"Opened pull request \"Insert NuGet Build 5.1.0-rtm.6003 into sdk\" (#3207) at dotnet/sdk","RelatedBody":"Insert NuGet Build 5.1.0-rtm.6003 into sdk release/2.1.7xx branch"},{"Id":"9572219738","Type":"PullRequestEvent","CreatedAt":"2019-05-06T18:19:04","Actor":"nugetlurker","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/3206","RelatedDescription":"Opened pull request \"Insert NuGet Build 5.1.0-rtm.6003 into sdk\" (#3206) at dotnet/sdk","RelatedBody":"Insert NuGet Build 5.1.0-rtm.6003 into sdk release/2.2.3xx branch"}],"ResultType":"GitHubEvent"},"Home-Issues":{"Issues":[{"Id":"437980746","IsPullRequest":true,"CreatedAt":"2019-05-03T20:10:38","Actor":"FlorianRappl","Number":"143","RawContent":null,"Title":"Add AngleSharp","State":"closed","Body":"cc @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/143","RelatedDescription":"Closed or merged PR \"Add AngleSharp\" (#143)"},{"Id":"426787230","IsPullRequest":true,"CreatedAt":"2019-05-03T20:08:40","Actor":"mairaw","Number":"141","RawContent":null,"Title":"add links to ML.NET docs","State":"closed","Body":"/cc @JRAlexander @shauheen \r\n\r\nTo match the info we have added for other projects","Url":"https://github.com/dotnet/foundation/pull/141","RelatedDescription":"Closed or merged PR \"add links to ML.NET docs\" (#141)"},{"Id":"440030132","IsPullRequest":true,"CreatedAt":"2019-05-03T20:08:15","Actor":"tomasherceg","Number":"144","RawContent":null,"Title":"Add DotVVM","State":"closed","Body":"cc @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/144","RelatedDescription":"Closed or merged PR \"Add DotVVM\" (#144)"},{"Id":"426787542","IsPullRequest":true,"CreatedAt":"2019-03-29T14:44:24","Actor":"mairaw","Number":"142","RawContent":null,"Title":"add docs samples link","State":"closed","Body":"@BillWagner should we add the samples project too?","Url":"https://github.com/dotnet/foundation/pull/142","RelatedDescription":"Closed or merged PR \"add docs samples link\" (#142)"},{"Id":"426658581","IsPullRequest":true,"CreatedAt":"2019-03-29T02:16:07","Actor":"scottaddie","Number":"139","RawContent":null,"Title":"Add link to ASP.NET Core docs","State":"closed","Body":"Provide a link to the docs site for ASP.NET Core.","Url":"https://github.com/dotnet/foundation/pull/139","RelatedDescription":"Closed or merged PR \"Add link to ASP.NET Core docs\" (#139)"},{"Id":"426666928","IsPullRequest":true,"CreatedAt":"2019-03-29T02:15:48","Actor":"BillWagner","Number":"140","RawContent":null,"Title":"add links to .NET docs","State":"closed","Body":"/cc @mairaw @scottaddie\r\n\r\nMaira, did I miss any project repos to tag?","Url":"https://github.com/dotnet/foundation/pull/140","RelatedDescription":"Closed or merged PR \"add links to .NET docs\" (#140)"},{"Id":"419205679","IsPullRequest":true,"CreatedAt":"2019-03-18T21:04:01","Actor":"MikeWilliams-UK","Number":"137","RawContent":null,"Title":"Add V3.1 repo and change documentation link","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/137","RelatedDescription":"Closed or merged PR \"Add V3.1 repo and change documentation link\" (#137)"},{"Id":"419897914","IsPullRequest":true,"CreatedAt":"2019-03-18T21:03:34","Actor":"devlead","Number":"138","RawContent":null,"Title":"Add Dave to cake.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/138","RelatedDescription":"Closed or merged PR \"Add Dave to cake.md\" (#138)"},{"Id":"391459677","IsPullRequest":false,"CreatedAt":"2019-03-08T19:00:06","Actor":"manne","Number":"123","RawContent":null,"Title":"Missing logo for Steeltoe","State":"closed","Body":"`https://brandfolder.com/pivotal-assets/attachments/ohxttd-7yxa60-clvf50/pivotal-assets-pivotal-genericfile.png` redirects to a sign in page\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L128-L130","Url":"https://github.com/dotnet/foundation/issues/123","RelatedDescription":"Closed issue \"Missing logo for Steeltoe\" (#123)"},{"Id":"417018694","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:32","Actor":"jkonicki","Number":"136","RawContent":null,"Title":"Fix logo and update team contributors","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/136","RelatedDescription":"Closed or merged PR \"Fix logo and update team contributors\" (#136)"},{"Id":"416428925","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"135","RawContent":null,"Title":"adds Umbraco logo","State":"closed","Body":"fixes #124 ","Url":"https://github.com/dotnet/foundation/pull/135","RelatedDescription":"Closed or merged PR \"adds Umbraco logo\" (#135)"},{"Id":"391459812","IsPullRequest":false,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"124","RawContent":null,"Title":"Missing logo for Umbraco","State":"closed","Body":"`https://fbcdn-profile-a.akamaihd.net/hprofile-ak-xap1/v/t1.0-1/p160x160/971596_519168901464439_566592989_n.png?oh=ce61e5b4cbd60c0d99c4164cbb05a434&oe=54F091C9&__gda__=1424472439_c9f76213a915bc2af88246f464f29e8b` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L149-L151","Url":"https://github.com/dotnet/foundation/issues/124","RelatedDescription":"Closed issue \"Missing logo for Umbraco\" (#124)"},{"Id":"416427614","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:45","Actor":"manne","Number":"134","RawContent":null,"Title":"adds the prism logo","State":"closed","Body":"fixes #126 ","Url":"https://github.com/dotnet/foundation/pull/134","RelatedDescription":"Closed or merged PR \"adds the prism logo\" (#134)"},{"Id":"391460225","IsPullRequest":false,"CreatedAt":"2019-03-08T18:58:44","Actor":"manne","Number":"126","RawContent":null,"Title":"No logo provided for Prism","State":"closed","Body":"Can/should this [image](http://prismlibrary.github.io/images/logo-prism-symbol@2x.png) be used?\r\n\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L155-L157","Url":"https://github.com/dotnet/foundation/issues/126","RelatedDescription":"Closed issue \"No logo provided for Prism\" (#126)"},{"Id":"416157860","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:26","Actor":"glennawatson","Number":"133","RawContent":null,"Title":"Add additional ReactiveUI organization projects.","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/133","RelatedDescription":"Closed or merged PR \"Add additional ReactiveUI organization projects.\" (#133)"},{"Id":"407251900","IsPullRequest":true,"CreatedAt":"2019-02-18T17:45:44","Actor":"Potapy4","Number":"132","RawContent":null,"Title":"Update MVVM project logo","State":"closed","Body":"Fixes dotnet/dotnetfoundation-website#72\r\nFixes #125","Url":"https://github.com/dotnet/foundation/pull/132","RelatedDescription":"Closed or merged PR \"Update MVVM project logo\" (#132)"},{"Id":"391459919","IsPullRequest":false,"CreatedAt":"2019-02-18T17:45:44","Actor":"manne","Number":"125","RawContent":null,"Title":"Missing logo for MVVM Light Toolkit","State":"closed","Body":"`https://raw.githubusercontent.com/paulcbetts/mvvmlight/master/Installer/InstallItems/html/MVVM_BlackText_190x147.png` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L137-L139","Url":"https://github.com/dotnet/foundation/issues/125","RelatedDescription":"Closed issue \"Missing logo for MVVM Light Toolkit\" (#125)"},{"Id":"406210463","IsPullRequest":true,"CreatedAt":"2019-02-18T17:44:39","Actor":"NextTurn","Number":"131","RawContent":null,"Title":"Replace http links with https links","State":"closed","Body":"Replace http links with https where possible - both returned 200 OK.","Url":"https://github.com/dotnet/foundation/pull/131","RelatedDescription":"Closed or merged PR \"Replace http links with https links\" (#131)"},{"Id":"399191617","IsPullRequest":true,"CreatedAt":"2019-02-02T11:04:15","Actor":"NextTurn","Number":"130","RawContent":null,"Title":"Update Open XML links","State":"closed","Body":"OpenXmlDeveloper.org was shut down long ago.\r\n\r\nThe content has been moved to EricWhite.com.","Url":"https://github.com/dotnet/foundation/pull/130","RelatedDescription":"Closed or merged PR \"Update Open XML links\" (#130)"},{"Id":"395863354","IsPullRequest":true,"CreatedAt":"2019-01-09T22:28:14","Actor":"ErikEJ","Number":"128","RawContent":null,"Title":"Update of EF description","State":"closed","Body":"@divega !","Url":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Closed or merged PR \"Update of EF description\" (#128)"},{"Id":"395901602","IsPullRequest":true,"CreatedAt":"2019-01-05T03:23:39","Actor":"MarcBruins","Number":"129","RawContent":null,"Title":"Update to absolute path","State":"closed","Body":"Update to absolute path so that when this list is copied the link will actually work","Url":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Closed or merged PR \"Update to absolute path\" (#129)"},{"Id":"395705579","IsPullRequest":true,"CreatedAt":"2019-01-04T00:22:42","Actor":"carloscds","Number":"127","RawContent":null,"Title":"Update documentation information","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/127","RelatedDescription":"Closed or merged PR \"Update documentation information\" (#127)"},{"Id":"391459057","IsPullRequest":true,"CreatedAt":"2019-01-03T04:47:09","Actor":"manne","Number":"122","RawContent":null,"Title":"targets the existing document","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/122","RelatedDescription":"Closed or merged PR \"targets the existing document\" (#122)"},{"Id":"384569679","IsPullRequest":true,"CreatedAt":"2019-01-03T04:46:31","Actor":"JamesNK","Number":"121","RawContent":null,"Title":"Add Newtonsoft.Json","State":"closed","Body":"// @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/121","RelatedDescription":"Closed or merged PR \"Add Newtonsoft.Json\" (#121)"},{"Id":"384212839","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:50","Actor":"stefanov-stefan","Number":"120","RawContent":null,"Title":"Added Telerik info","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/120","RelatedDescription":"Closed or merged PR \"Added Telerik info\" (#120)"},{"Id":"384212448","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:22","Actor":"stefanov-stefan","Number":"119","RawContent":null,"Title":"Added Telerik UWP proj","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/119","RelatedDescription":"Closed or merged PR \"Added Telerik UWP proj\" (#119)"},{"Id":"382378851","IsPullRequest":true,"CreatedAt":"2018-11-23T10:32:15","Actor":"pkgw","Number":"118","RawContent":null,"Title":"Update WorldWide Telescope","State":"closed","Body":"Some layout fixes, but the main change is that @pkgw is now the project director.","Url":"https://github.com/dotnet/foundation/pull/118","RelatedDescription":"Closed or merged PR \"Update WorldWide Telescope\" (#118)"},{"Id":"380070557","IsPullRequest":true,"CreatedAt":"2018-11-23T10:31:49","Actor":"leastprivilege","Number":"117","RawContent":null,"Title":"Update identityserver.md","State":"closed","Body":"significant whitespace","Url":"https://github.com/dotnet/foundation/pull/117","RelatedDescription":"Closed or merged PR \"Update identityserver.md\" (#117)"},{"Id":"379777451","IsPullRequest":true,"CreatedAt":"2018-11-13T04:21:35","Actor":"scottbrady91","Number":"116","RawContent":null,"Title":"Update to IdentityManager project","State":"closed","Body":"My employer and I have recently taken over the IdentityManager project from Dom & Brock. I've updated the IdentityManager page to reflect this and the newer version of the core repo.","Url":"https://github.com/dotnet/foundation/pull/116","RelatedDescription":"Closed or merged PR \"Update to IdentityManager project\" (#116)"},{"Id":"379733880","IsPullRequest":true,"CreatedAt":"2018-11-13T04:20:23","Actor":"leastprivilege","Number":"115","RawContent":null,"Title":"Create identitymodel.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/115","RelatedDescription":"Closed or merged PR \"Create identitymodel.md\" (#115)"}],"ResultType":"GitHubIssue"},"CoreCLR-Issues":{"Issues":[{"Id":"440850921","IsPullRequest":true,"CreatedAt":"2019-05-07T04:49:21","Actor":"sandreenko","Number":"24421","RawContent":null,"Title":"Add ZapDisable  and TailCallStress ADO testing.","State":"closed","Body":"4f3ad48f79: Rename ADO group outerloop-jitminopts-jitstress1-jitstress2 to outerloop-jitstress.\r\n\r\nAllows us to add more scenarios there.\r\n\r\ne1675ea520: Add zapdisable and tailcallstress testing.\r\n\r\nContributes to #24358.","Url":"https://github.com/dotnet/coreclr/pull/24421","RelatedDescription":"Closed or merged PR \"Add ZapDisable  and TailCallStress ADO testing.\" (#24421)"},{"Id":"440922350","IsPullRequest":true,"CreatedAt":"2019-05-07T03:31:36","Actor":"Anipik","Number":"24427","RawContent":null,"Title":"Making constructor internal for types with internal abstract members","State":"closed","Body":"Related to https://github.com/dotnet/corefx/pull/37479","Url":"https://github.com/dotnet/coreclr/pull/24427","RelatedDescription":"Closed or merged PR \"Making constructor internal for types with internal abstract members\" (#24427)"},{"Id":"440990550","IsPullRequest":true,"CreatedAt":"2019-05-07T02:01:08","Actor":"MattGal","Number":"24437","RawContent":null,"Title":"Move to non-docker versions of these queues until Python 3 rollout ","State":"open","Body":"@RussKeldorph  - it looks like you're using far fewer of these than I thought!  Will check rel/3.0 tomorrow. ","Url":"https://github.com/dotnet/coreclr/pull/24437","RelatedDescription":"Open PR \"Move to non-docker versions of these queues until Python 3 rollout \" (#24437)"},{"Id":"440988270","IsPullRequest":false,"CreatedAt":"2019-05-07T01:50:15","Actor":"VincentBu","Number":"24436","RawContent":null,"Title":"[arm64] System.Buffers.Text.Tests.Base64EncoderUnitTests failed","State":"open","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/arm64/job/jitstress/job/arm64_cross_checked_windows_nt_corefx_minopts_tst/34/\r\n\r\n**Failed tests:**\r\nSystem.Buffers.Text.Tests.Base64EncoderUnitTests.BasicEncoding\r\nSystem.Buffers.Text.Tests.Base64EncoderUnitTests.BasicEncodingWithFinalBlockFalse\r\nSystem.Buffers.Text.Tests.Base64DecoderUnitTests.BasicDecoding\r\n\r\n**Log:**\r\n```\r\nSystem.Buffers.Text.Tests.Base64EncoderUnitTests.BasicEncoding [FAIL]\r\n      Assert.True() Failure\r\n      Expected: True\r\n      Actual:   False\r\n      Stack Trace:\r\n        D:\\j\\workspace\\arm64_cross_c---d6aee07b\\_\\fx\\src\\System.Memory\\tests\\Base64\\Base64EncoderUnitTests.cs(59,0): at System.Buffers.Text.Tests.Base64EncoderUnitTests.BasicEncoding()\r\n    System.Buffers.Text.Tests.Base64EncoderUnitTests.BasicEncodingWithFinalBlockFalse [FAIL]\r\n      Assert.True() Failure\r\n      Expected: True\r\n      Actual:   False\r\n      Stack Trace:\r\n        D:\\j\\workspace\\arm64_cross_c---d6aee07b\\_\\fx\\src\\System.Memory\\tests\\Base64\\Base64EncoderUnitTests.cs(136,0): at System.Buffers.Text.Tests.Base64EncoderUnitTests.BasicEncodingWithFinalBlockFalse()\r\n    System.Buffers.Text.Tests.Base64DecoderUnitTests.BasicDecoding [FAIL]\r\n      Assert.True() Failure\r\n      Expected: True\r\n      Actual:   False\r\n      Stack Trace:\r\n        D:\\j\\workspace\\arm64_cross_c---d6aee07b\\_\\fx\\src\\System.Memory\\tests\\Base64\\Base64DecoderUnitTests.cs(31,0): at System.Buffers.Text.Tests.Base64DecoderUnitTests.BasicDecoding()\r\n```","Url":"https://github.com/dotnet/coreclr/issues/24436","RelatedDescription":"Open issue \"[arm64] System.Buffers.Text.Tests.Base64EncoderUnitTests failed\" (#24436)"},{"Id":"440986436","IsPullRequest":false,"CreatedAt":"2019-05-07T01:41:30","Actor":"VincentBu","Number":"24435","RawContent":null,"Title":"[arm64] Test failed: System.SpanTests.ReadOnlySpanTests.TestMatchTwo_Char","State":"open","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/arm64/job/jitstress/job/arm64_cross_checked_ubuntu16.04_corefx_minopts_tst/188/\r\n\r\n**Failed tests:**\r\nSystem.SpanTests.ReadOnlySpanTests.TestMatchTwo_Char\r\n\r\n**Log:**\r\n```\r\nSystem.SpanTests.ReadOnlySpanTests.TestMatchTwo_Char [FAIL]\r\n      Assert.Equal() Failure\r\n      Expected: 72\r\n      Actual:   64\r\n      Stack Trace:\r\n        /mnt/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_minopts/_/fx/src/System.Memory/tests/ReadOnlySpan/IndexOfAny.char.cs(121,0): at System.SpanTests.ReadOnlySpanTests.TestMatchTwo_Char()\r\n```","Url":"https://github.com/dotnet/coreclr/issues/24435","RelatedDescription":"Open issue \"[arm64] Test failed: System.SpanTests.ReadOnlySpanTests.TestMatchTwo_Char\" (#24435)"},{"Id":"440970511","IsPullRequest":true,"CreatedAt":"2019-05-07T00:24:21","Actor":"CarolEidt","Number":"24434","RawContent":null,"Title":"Fix more save/restore code for HVAs","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/24434","RelatedDescription":"Open PR \"Fix more save/restore code for HVAs\" (#24434)"},{"Id":"440960762","IsPullRequest":true,"CreatedAt":"2019-05-06T23:51:15","Actor":"cshung","Number":"24433","RawContent":null,"Title":"Log the real command line in case the process is started as a service","State":"open","Body":"","Url":"https://github.com/dotnet/coreclr/pull/24433","RelatedDescription":"Open PR \"Log the real command line in case the process is started as a service\" (#24433)"},{"Id":"440775651","IsPullRequest":true,"CreatedAt":"2019-05-06T23:39:23","Actor":"sandreenko","Number":"24415","RawContent":null,"Title":"Add new CoreFX exclusions.","State":"closed","Body":"Disable https://github.com/dotnet/coreclr/issues/24413 and https://github.com/dotnet/coreclr/issues/24414.","Url":"https://github.com/dotnet/coreclr/pull/24415","RelatedDescription":"Closed or merged PR \"Add new CoreFX exclusions.\" (#24415)"},{"Id":"440944688","IsPullRequest":true,"CreatedAt":"2019-05-06T23:25:23","Actor":"am11","Number":"24432","RawContent":null,"Title":"Use -falign-new flag for gcc 7+","State":"open","Body":"Versions of gcc lower than 7 do not have C++17's \"over-aligned new\"\r\nsupport. With gcc 7 and 8, following error is thrown:\r\n\r\n```\r\n/datadrive/projects/coreclr/src/vm/threadpoolrequest.cpp: In static member function static TPIndex PerAppDomainTPCountList::AddNewTPIndex():\r\n/datadrive/projects/coreclr/src/vm/threadpoolrequest.cpp:79:81: error: new of type ManagedPerAppDomainTPCount with extended alignment 64 [-Werror=aligned-new=]\r\n     ManagedPerAppDomainTPCount * pAdCount = new ManagedPerAppDomainTPCount(index);\r\n                                                                                 ^\r\n/datadrive/projects/coreclr/src/vm/threadpoolrequest.cpp:79:81: note: uses void* operator new(size_t), which does not have an alignment parameter\r\n/datadrive/projects/coreclr/src/vm/threadpoolrequest.cpp:79:81: note: use -faligned-new to enable C++17 over-aligned new support\r\n```\r\n\r\nThe fix is to enable `-falign-new` (without fully activating C++17\r\nfeatures), that does auto-alignment like gcc 6x and below and clang.","Url":"https://github.com/dotnet/coreclr/pull/24432","RelatedDescription":"Open PR \"Use -falign-new flag for gcc 7+\" (#24432)"},{"Id":"440932795","IsPullRequest":true,"CreatedAt":"2019-05-06T22:40:08","Actor":"benaadams","Number":"24431","RawContent":null,"Title":"Shrink AsyncValueTaskMethodBuilder","State":"open","Body":"Remove the struct wrappings over Task in the AsyncMethodBuilders by moving the implementations to static helper members on AsyncMethodBuilderCore.\r\n\r\nShrink `AsyncValueTaskMethodBuilder` to a single pointer size.\r\n\r\nRemove `bool _useBuilder` field from `AsyncValueTaskMethodBuilder<TResult>` as we can check if `m_task` is set instead.\r\n\r\n/cc @stephentoub ","Url":"https://github.com/dotnet/coreclr/pull/24431","RelatedDescription":"Open PR \"Shrink AsyncValueTaskMethodBuilder\" (#24431)"},{"Id":"440929981","IsPullRequest":true,"CreatedAt":"2019-05-06T22:29:56","Actor":"jkoritzinsky","Number":"24430","RawContent":null,"Title":"Update Microsoft.Build.Traversal SDK to v2.","State":"open","Body":"Version 2.0 of the Microsoft.Build.Traversal has some breaking changes from V1.X. We currently aren't using any of the features that were changed/removed. I think we should upgrade before we accidentally start relying on any removed features and block ourselves from being able to upgrade.","Url":"https://github.com/dotnet/coreclr/pull/24430","RelatedDescription":"Open PR \"Update Microsoft.Build.Traversal SDK to v2.\" (#24430)"},{"Id":"440929885","IsPullRequest":true,"CreatedAt":"2019-05-06T22:29:38","Actor":"trylek","Number":"24429","RawContent":null,"Title":"Further improvements for R2RDump robustness in the presence of bugs","State":"open","Body":"Based on JanV's suggestion I have added checks for token ranges\r\nto MetadataNameFormatter to make it resilient towards invalid\r\ntokens.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/coreclr/pull/24429","RelatedDescription":"Open PR \"Further improvements for R2RDump robustness in the presence of bugs\" (#24429)"},{"Id":"440929410","IsPullRequest":true,"CreatedAt":"2019-05-06T22:27:51","Actor":"tannergooding","Number":"24428","RawContent":null,"Title":"Fixing up time.cpp in the PAL","State":"open","Body":"This resolves https://github.com/dotnet/coreclr/issues/24412 by updating the PAL functions to largely match the functionality in https://github.com/dotnet/corefx/blob/master/src/Native/Unix/System.Native/pal_time.c","Url":"https://github.com/dotnet/coreclr/pull/24428","RelatedDescription":"Open PR \"Fixing up time.cpp in the PAL\" (#24428)"},{"Id":"440920012","IsPullRequest":true,"CreatedAt":"2019-05-06T22:08:52","Actor":"kouvel","Number":"24426","RawContent":null,"Title":"Disable a tail call test when using minopts","State":"open","Body":"Fixes https://github.com/dotnet/coreclr/issues/24424","Url":"https://github.com/dotnet/coreclr/pull/24426","RelatedDescription":"Open PR \"Disable a tail call test when using minopts\" (#24426)"},{"Id":"440846123","IsPullRequest":true,"CreatedAt":"2019-05-06T21:45:26","Actor":"cshung","Number":"24420","RawContent":null,"Title":"Launch DiagnosticServer after EEStartup","State":"closed","Body":"Fixed #24385 \r\n\r\nNot just the ThreadPool is not ready. The sampling profiler also chokes when it attempts to suspend the uninitialized runtime. We better not allow connection until the runtime is ready.","Url":"https://github.com/dotnet/coreclr/pull/24420","RelatedDescription":"Closed or merged PR \"Launch DiagnosticServer after EEStartup\" (#24420)"},{"Id":"440911906","IsPullRequest":false,"CreatedAt":"2019-05-06T21:43:15","Actor":"jrockwood","Number":"24425","RawContent":null,"Title":"Dotnet crashing on CentOS 7.3 (maybe a JIT bug?)","State":"open","Body":"I apologize in advance for logging this somewhat vague bug...\r\n\r\nI'm a developer at Tableau Software and I recently upgraded our custom Saltarelle compiler (used to be Script#, which compiles C# to JavaScript) to use .NET Standard/Core instead of basing it off of the .NET Framework so that we can build on Linux. Previously we were using XBuild and Mono on our Linux builds. Everything has been working for weeks with the new dotnet-based Saltarelle compiler on all of our build machines (Windows and Linux) except for one set of machines that we have, where it fails every time. All of these machines are using CentOS 7.3 and the other machines where the build works are based on CentOS 7.5. I was able to recreate a vanilla CentOS 7.3 machine and can reproduce the build failures. When I upgrade that same machine to CentOS 7.5, the errors go away.\r\n\r\nThe build fails differently every time, but it always inevitably fails. We have about 160 projects in a solution and we're using `dotnet msbuild` to do the build. It will fail in different projects every time it's run, so it's definitely not an issue with our code (since a project will build successfully one time and fail another). One other interesting thing to note... if you keep running the build as an incremental build, it will eventually succeed. Sometimes it takes 2-3 times, other times it will succeed after 10+ attempts.\r\n\r\nSince this is intermittent, I thought I'd try turning off parallel builds (passing in the `/m:1` switch) so that only one project is built at a time. But that seems to have no effect and things still fail (they just fail more slowly now :).\r\n\r\nFrom the stack traces that I've been able to look at in lldb, there seems to be a pattern of a segmentation fault in the jitter. Here are a couple of stack traces for an example:\r\n\r\n```\r\n(lldb) target create --core \"/data/core-dumps/core.dotnet.66894.tsperf-d358.perf.dev.tsi.lan.1557166562\"\r\nCore file '/data/core-dumps/core.dotnet.66894.1557166562' (x86_64) was loaded.\r\n(lldb) command source -s 0 '/home/tsi/builder/commands.txt'\r\nExecuting commands in '/home/tsi/builder/commands.txt'.\r\n(lldb) plugin load /data/<redacted-path-to-dotnet>/Microsoft.NETCore.App/2.2.2/libsosplugin.so\r\n(lldb) pe\r\nThere is no current managed exception on this thread\r\n(lldb) clrthreads\r\nThreadCount:      31\r\nUnstartedThread:  0\r\nBackgroundThread: 30\r\nPendingThread:    0\r\nDeadThread:       0\r\nHosted Runtime:   no\r\n                                                                                                        Lock\r\n       ID OSID ThreadOBJ           State GC Mode     GC Alloc Context                  Domain           Count Apt Exception\r\n  36    1 1054e 00000000021F5C20  2020020 Preemptive  00007FF4545F5490:00007FF4545F6E98 00000000021F1A50 0     Ukn\r\n   4    2 10559 0000000002272360    21220 Preemptive  0000000000000000:0000000000000000 00000000021F1A50 0     Ukn (Finalizer)\r\n  27    3 1055a 00007FF44C0009F0  1020220 Preemptive  0000000000000000:0000000000000000 00000000021F1A50 0     Ukn (Threadpool Worker)\r\n  31    4 1055b 00007FF4440009F0    20220 Preemptive  0000000000000000:0000000000000000 00000000021F1A50 0     Ukn\r\n  30    5 1055d 000000000235CA60  2021220 Preemptive  00007FF45476E598:00007FF45476F020 00000000021F1A50 0     Ukn\r\n   2    6 1055e 00007FF448004C00  1021220 Preemptive  0000000000000000:0000000000000000 00000000021F1A50 0     Ukn (Threadpool Worker)\r\n  21    7 10560 00007FF43C0012A0  1021220 Preemptive  0000000000000000:0000000000000000 00000000021F1A50 0     Ukn (Threadpool Worker)\r\n  20    8 10562 00007FF43C007CD0    21220 Preemptive  00007FF4545F0F28:00007FF4545F2E98 00000000021F1A50 0     Ukn\r\n  22    9 10563 00007FF434001340  1021220 Preemptive  0000000000000000:0000000000000000 00000000021F1A50 0     Ukn (Threadpool Worker)\r\n   8   10 10564 000000000229E1E0  1021220 Preemptive  0000000000000000:0000000000000000 00000000021F1A50 0     Ukn (Threadpool Worker)\r\n   7   11 10565 00007FF42C0012A0  1021220 Preemptive  0000000000000000:0000000000000000 00000000021F1A50 0     Ukn (Threadpool Worker)\r\n  33   12 10566 00007FF4300012A0  1021220 Preemptive  0000000000000000:0000000000000000 00000000021F1A50 0     Ukn (Threadpool Worker)\r\n   3   13 107a8 00007FF424003B50  2021220 Preemptive  00007FF45464C7A0:00007FF45464D0D8 00000000021F1A50 0     Ukn\r\n   9   14 10847 00007FF4280012F0  1021220 Preemptive  0000000000000000:0000000000000000 00000000021F1A50 0     Ukn (Threadpool Worker)\r\n  32   15 10859 00007FF4280031A0  3021220 Preemptive  00007FF4545FBD00:00007FF4545FCE98 00000000021F1A50 0     Ukn (Threadpool Worker)\r\n  17   16 1085a 00007FF434003630  1021220 Preemptive  0000000000000000:0000000000000000 00000000021F1A50 0     Ukn (Threadpool Worker)\r\n  25   17 1086c 00007FF424005A90  1021220 Preemptive  0000000000000000:0000000000000000 00000000021F1A50 0     Ukn (Threadpool Worker)\r\n  35   18 1086d 00007FF4340054F0  1021220 Preemptive  0000000000000000:0000000000000000 00000000021F1A50 0     Ukn (Threadpool Worker)\r\n   6   19 1087a 00007FF42C0037A0  1021220 Preemptive  00007FF454671458:00007FF454672098 00000000021F1A50 0     Ukn (Threadpool Worker)\r\n  23   20 10880 00007FF40C0012A0  1021220 Preemptive  0000000000000000:0000000000000000 00000000021F1A50 0     Ukn (Threadpool Worker)\r\n  11   21 1089e 00007FF40C003150  1021220 Preemptive  0000000000000000:0000000000000000 00000000021F1A50 0     Ukn (Threadpool Worker)\r\n  24   22 1089f 00007FF430003560  1021220 Preemptive  0000000000000000:0000000000000000 00000000021F1A50 0     Ukn (Threadpool Worker)\r\n  10   23 108fe 00007FF410001340  1021220 Preemptive  00007FF4545F78D0:00007FF4545F8E98 00000000021F1A50 0     Ukn (Threadpool Worker)\r\n  13   24 10900 00007FF4000012F0  1021220 Preemptive  0000000000000000:0000000000000000 00000000021F1A50 0     Ukn (Threadpool Worker)\r\n  14   25 1091a 00007FF42C005680  1021220 Preemptive  0000000000000000:0000000000000000 00000000021F1A50 0     Ukn (Threadpool Worker)\r\n   5   26 1091c 00007FF4080012F0  1021220 Preemptive  00007FF4545F9E78:00007FF4545FAE98 00000000021F1A50 0     Ukn (Threadpool Worker)\r\n  18   27 10920 00007FF4340073A0  1021220 Preemptive  0000000000000000:0000000000000000 00000000021F1A50 0     Ukn (Threadpool Worker)\r\n  12   28 10922 00007FF4180014E0  1021220 Preemptive  0000000000000000:0000000000000000 00000000021F1A50 0     Ukn (Threadpool Worker)\r\n  19   29 10923 00007FF3D80009F0  1020220 Preemptive  0000000000000000:0000000000000000 00000000021F1A50 0     Ukn (Threadpool Worker)\r\n  34   30 10b0f 00007FF448016C00    21220 Preemptive  0000000000000000:0000000000000000 00000000021F1A50 0     Ukn\r\n   1   31 10b29 00007FF41C0A3140    21220 Preemptive  00007FF454769AF8:00007FF45476B020 00000000021F1A50 0     Ukn\r\n(lldb) clrstack\r\nOS Thread Id: 0x10b29 (1)\r\n        Child SP               IP Call Site\r\n00007FF3E2FFBB10 00007ff4ef4fd688 [PrestubMethodFrame: 00007ff3e2ffbb10] DynamicClass.Go2\r\n00007FF3E2FFCC90 00007ff4ef4fd688 [GCFrame: 00007ff3e2ffcc90]\r\n00007FF3E2FFCD50 00007ff4ef4fd688 [DebuggerU2MCatchHandlerFrame: 00007ff3e2ffcd50]\r\n(lldb) thread list\r\nProcess 66894 stopped\r\n* thread #1: tid = 68393, 0x00007ff4ef4fd688 libclrjit.so`SsaBuilder::RenameVariables(JitHashTable<BasicBlock*, JitPtrKeyFuncs<BasicBlock>,\r\nJitHashTable<BasicBlock*, JitPtrKeyFuncs<BasicBlock>, bool, CompAllocator, JitHashTableBehavior>*, CompAllocator, JitHashTableBehavior>*, Ss\r\naRenameState*) + 1944, name = 'dotnet', stop reason = signal SIGSEGV\r\n  thread #2: tid = 66910, 0x00007ff4f52a7a82 libpthread.so.0`__pthread_cond_timedwait + 306, stop reason = signal SIGSEGV\r\n  thread #3: tid = 67496, 0x00007ff4f52a76d5 libpthread.so.0`__pthread_cond_wait + 197, stop reason = signal SIGSEGV\r\n  thread #4: tid = 66905, 0x00007ff4f52a7a82 libpthread.so.0`__pthread_cond_timedwait + 306, stop reason = signal SIGSEGV\r\n  thread #5: tid = 67868, 0x00007ff4f52a7a82 libpthread.so.0`__pthread_cond_timedwait + 306, stop reason = signal SIGSEGV\r\n  thread #6: tid = 67706, 0x00007ff4f52a7a82 libpthread.so.0`__pthread_cond_timedwait + 306, stop reason = signal SIGSEGV\r\n  thread #7: tid = 66917, 0x00007ff4f52a7a82 libpthread.so.0`__pthread_cond_timedwait + 306, stop reason = signal SIGSEGV\r\n  thread #8: tid = 66916, 0x00007ff4f52a7a82 libpthread.so.0`__pthread_cond_timedwait + 306, stop reason = signal SIGSEGV\r\n  thread #9: tid = 67655, 0x00007ff4f52a7a82 libpthread.so.0`__pthread_cond_timedwait + 306, stop reason = signal SIGSEGV\r\n  thread #10: tid = 67838, 0x00007ff4f52a7a82 libpthread.so.0`__pthread_cond_timedwait + 306, stop reason = signal SIGSEGV\r\n  thread #11: tid = 67742, 0x00007ff4f52a7a82 libpthread.so.0`__pthread_cond_timedwait + 306, stop reason = signal SIGSEGV\r\n  thread #12: tid = 67874, 0x00007ff4f52a7a82 libpthread.so.0`__pthread_cond_timedwait + 306, stop reason = signal SIGSEGV\r\n  thread #13: tid = 67840, 0x00007ff4f52a7a82 libpthread.so.0`__pthread_cond_timedwait + 306, stop reason = signal SIGSEGV\r\n  thread #14: tid = 67866, 0x00007ff4f52a7a82 libpthread.so.0`__pthread_cond_timedwait + 306, stop reason = signal SIGSEGV\r\n  thread #15: tid = 66902, 0x00007ff4f47a6e2d libc.so.6`__GI___poll + 45, stop reason = signal SIGSEGV\r\n  thread #16: tid = 66903, 0x00007ff4f52aac3d libpthread.so.0`__libc_open + 45, stop reason = signal SIGSEGV\r\n  thread #17: tid = 67674, 0x00007ff4f52a7a82 libpthread.so.0`__pthread_cond_timedwait + 306, stop reason = signal SIGSEGV\r\n  thread #18: tid = 67872, 0x00007ff4f52a7a82 libpthread.so.0`__pthread_cond_timedwait + 306, stop reason = signal SIGSEGV\r\n  thread #19: tid = 67875, 0x00007ff4f52a76d5 libpthread.so.0`__pthread_cond_wait + 197, stop reason = signal SIGSEGV\r\n  thread #20: tid = 66914, 0x00007ff4f47b1d43 libc.so.6`__GI_epoll_wait + 51, stop reason = signal SIGSEGV\r\n  thread #21: tid = 66912, 0x00007ff4f52a7a82 libpthread.so.0`__pthread_cond_timedwait + 306, stop reason = signal SIGSEGV\r\n  thread #22: tid = 66915, 0x00007ff4f52a7a82 libpthread.so.0`__pthread_cond_timedwait + 306, stop reason = signal SIGSEGV\r\n  thread #23: tid = 67712, 0x00007ff4f52a7a82 libpthread.so.0`__pthread_cond_timedwait + 306, stop reason = signal SIGSEGV\r\n  thread #24: tid = 67743, 0x00007ff4f52a7a82 libpthread.so.0`__pthread_cond_timedwait + 306, stop reason = signal SIGSEGV\r\n  thread #25: tid = 67692, 0x00007ff4f52a7a82 libpthread.so.0`__pthread_cond_timedwait + 306, stop reason = signal SIGSEGV\r\n  thread #26: tid = 66901, 0x00007ff4f47abc29 libc.so.6`syscall + 25, stop reason = signal SIGSEGV\r\n  thread #27: tid = 66906, 0x00007ff4f52a7a82 libpthread.so.0`__pthread_cond_timedwait + 306, stop reason = signal SIGSEGV\r\n  thread #28: tid = 66900, 0x00007ff4f47abc29 libc.so.6`syscall + 25, stop reason = signal SIGSEGV\r\n  thread #29: tid = 66904, 0x00007ff4f52a76d5 libpthread.so.0`__pthread_cond_wait + 197, stop reason = signal SIGSEGV\r\n  thread #30: tid = 66909, 0x00007ff4f52a76d5 libpthread.so.0`__pthread_cond_wait + 197, stop reason = signal SIGSEGV\r\n  thread #31: tid = 66907, 0x00007ff4f52aa49d libpthread.so.0`__libc_read + 45, stop reason = signal SIGSEGV\r\n  thread #32: tid = 67673, 0x00007ff4f52a76d5 libpthread.so.0`__pthread_cond_wait + 197, stop reason = signal SIGSEGV\r\n  thread #33: tid = 66918, 0x00007ff4f52a7a82 libpthread.so.0`__pthread_cond_timedwait + 306, stop reason = signal SIGSEGV\r\n  thread #34: tid = 68367, 0x00007ff4f52a7a82 libpthread.so.0`__pthread_cond_timedwait + 306, stop reason = signal SIGSEGV\r\n  thread #35: tid = 67693, 0x00007ff4f52a7a82 libpthread.so.0`__pthread_cond_timedwait + 306, stop reason = signal SIGSEGV\r\n  thread #36: tid = 66894, 0x00007ff4f52a76d5 libpthread.so.0`__pthread_cond_wait + 197, stop reason = signal SIGSEGV\r\n  thread #37: tid = 67486, 0x00007ff4f52a7a82 libpthread.so.0`__pthread_cond_timedwait + 306, stop reason = signal SIGSEGV\r\n```\r\n\r\nHere's another one:\r\n\r\n```\r\n(lldb) target create --core \"/data/core-dumps/core.dotnet.91043.tsperf-d358.perf.dev.tsi.lan.1557168855\"\r\nCore file '/data/core-dumps/core.dotnet.91043.tsperf-d358.perf.dev.tsi.lan.1557168855' (x86_64) was loaded.\r\n(lldb) command source -s 0 '/home/tsi/builder/commands.txt'\r\nExecuting commands in '/home/tsi/builder/commands.txt'.\r\n(lldb) plugin load /data/p4/near/workgroup/vqlweb/build/dotnet/shared/Microsoft.NETCore.App/2.2.2/libsosplugin.so\r\n(lldb) pe\r\nThere is no current managed exception on this thread\r\n(lldb) clrthreads\r\nThreadCount:      15\r\nUnstartedThread:  0\r\nBackgroundThread: 14\r\nPendingThread:    0\r\nDeadThread:       0\r\nHosted Runtime:   no\r\n                                                                                                        Lock\r\n       ID OSID ThreadOBJ           State GC Mode     GC Alloc Context                  Domain           Count Apt Exception\r\n   4    1 163a3 00000000009F7BA0    20020 Preemptive  00007F3E5039EF88:00007F3E5039EFD0 00000000009E4B20 0     Ukn\r\n  15    2 163be 0000000000A18A80    21220 Preemptive  0000000000000000:0000000000000000 00000000009E4B20 0     Ukn (Finalizer)\r\n  18    3 163c6 00007F3E480009F0  1020220 Preemptive  0000000000000000:0000000000000000 00000000009E4B20 0     Ukn (Threadpool Worker)\r\n   6    4 163cb 0000000000A342D0  1021220 Preemptive  00007F3E502832F8:00007F3E50284FD0 00000000009E4B20 0     Ukn (Threadpool Worker)\r\n  13    5 163cd 00007F3E400012A0  1021220 Preemptive  00007F3E50285418:00007F3E50286FD0 00000000009E4B20 0     Ukn (Threadpool Worker)\r\n   5    6 163ce 00007F3E40003130  1021220 Preemptive  00007F3E502872F0:00007F3E50288FD0 00000000009E4B20 0     Ukn (Threadpool Worker)\r\n  10    7 163cf 00007F3E380012A0  1021220 Preemptive  00007F3E50289428:00007F3E5028AFD0 00000000009E4B20 0     Ukn (Threadpool Worker)\r\n  14    8 163d0 00007F3E3C0012A0  1021220 Preemptive  00007F3E5028B2E8:00007F3E5028CFD0 00000000009E4B20 0     Ukn (Threadpool Worker)\r\n   2    9 163d1 00007F3E300012A0  1021220 Preemptive  00007F3E504E3F68:00007F3E504E4FD0 00000000009E4B20 0     Ukn (Threadpool Worker)\r\n  16   10 163d2 00007F3E340012A0  1021220 Preemptive  00007F3E5028F218:00007F3E50290FD0 00000000009E4B20 0     Ukn (Threadpool Worker)\r\n  21   11 163d3 00007F3E280012A0  1021220 Preemptive  00007F3E5037D510:00007F3E5037F2C0 00000000009E4B20 0     Ukn (Threadpool Worker)\r\n   9   12 166cd 00007F3E300031C0  1021220 Preemptive  0000000000000000:0000000000000000 00000000009E4B20 0     Ukn (Threadpool Worker)\r\n  20   13 166cc 00007F3E38003180  1021220 Preemptive  0000000000000000:0000000000000000 00000000009E4B20 0     Ukn (Threadpool Worker)\r\n  11   14 166ce 00007F3E34003130  1021220 Preemptive  00007F3E5038F310:00007F3E50390FD0 00000000009E4B20 0     Ukn (Threadpool Worker)\r\n   1   15 166cf 00007F3E28003180  1021220 Preemptive  00007F3E5038EB58:00007F3E5038EFD0 00000000009E4B20 0     Ukn (Threadpool Worker)\r\n(lldb) clrstack\r\nOS Thread Id: 0x166cf (1)\r\n        Child SP               IP Call Site\r\n00007F3E4D512210 00007f3eed56db69 [PrestubMethodFrame: 00007f3e4d512210] /data/p4/near/workgroup/vqlweb/build/saltarelle/Cli/Microsoft.CodeA\r\nnalysis.CSharp.dll!Unknown\r\n00007F3E4D512380 00007F3E7A150A87 /data/p4/near/workgroup/vqlweb/build/saltarelle/Cli/Microsoft.CodeAnalysis.CSharp.dll!Unknown\r\n00007F3E4D512430 00007F3E79FC7AAA /data/p4/near/workgroup/vqlweb/build/saltarelle/Cli/Microsoft.CodeAnalysis.CSharp.dll!Unknown\r\n00007F3E4D512460 00007F3E79FC7887 /data/p4/near/workgroup/vqlweb/build/saltarelle/Cli/Microsoft.CodeAnalysis.CSharp.dll!Unknown\r\n00007F3E4D512490 00007F3E79FC734A /data/p4/near/workgroup/vqlweb/build/saltarelle/Cli/Microsoft.CodeAnalysis.CSharp.dll!Unknown\r\n00007F3E4D512570 00007F3E79FC4FE9 /data/p4/near/workgroup/vqlweb/build/saltarelle/Cli/Microsoft.CodeAnalysis.CSharp.dll!Unknown\r\n00007F3E4D5125C0 00007F3E79FB099E /data/p4/near/workgroup/vqlweb/build/saltarelle/Cli/Microsoft.CodeAnalysis.CSharp.dll!Unknown\r\n00007F3E4D512690 00007F3E79FAD017 /data/p4/near/workgroup/vqlweb/build/saltarelle/Cli/Microsoft.CodeAnalysis.CSharp.dll!Unknown\r\n00007F3E4D512CB0 00007f3e79a60060 [DebuggerU2MCatchHandlerFrame: 00007f3e4d512cb0]\r\n(lldb) thread list\r\nProcess 91043 stopped\r\n* thread #1: tid = 91855, 0x00007f3eed56db69 libclrjit.so`LinearScan::processBlockStartLocations(BasicBlock*, bool) + 105, name = 'dotnet',\r\nstop reason = signal SIGSEGV\r\n  thread #2: tid = 91089, 0x00007f3ef1cbc9d0 libcoreclr.so`COMDelegate::IsDelegate(MethodTable*), stop reason = signal SIGSEGV\r\n  thread #3: tid = 91064, 0x00007f3ef2874c29 libc.so.6`syscall + 25, stop reason = signal SIGSEGV\r\n  thread #4: tid = 91043, 0x00007f3ef33706d5 libpthread.so.0`__pthread_cond_wait + 197, stop reason = signal SIGSEGV\r\n  thread #5: tid = 91086, 0x00007f3ef3370a82 libpthread.so.0`__pthread_cond_timedwait + 306, stop reason = signal SIGSEGV\r\n  thread #6: tid = 91083, 0x00007f3ef3370a82 libpthread.so.0`__pthread_cond_timedwait + 306, stop reason = signal SIGSEGV\r\n  thread #7: tid = 91065, 0x00007f3ef2874c29 libc.so.6`syscall + 25, stop reason = signal SIGSEGV\r\n  thread #8: tid = 91066, 0x00007f3ef286fe2d libc.so.6`__GI___poll + 45, stop reason = signal SIGSEGV\r\n  thread #9: tid = 91853, 0x00007f3ef3370a82 libpthread.so.0`__pthread_cond_timedwait + 306, stop reason = signal SIGSEGV\r\n  thread #10: tid = 91087, 0x00007f3ef3370a82 libpthread.so.0`__pthread_cond_timedwait + 306, stop reason = signal SIGSEGV\r\n  thread #11: tid = 91854, 0x00007f3ef3370a82 libpthread.so.0`__pthread_cond_timedwait + 306, stop reason = signal SIGSEGV\r\n  thread #12: tid = 91068, 0x00007f3ef3373c3d libpthread.so.0`__libc_open + 45, stop reason = signal SIGSEGV\r\n  thread #13: tid = 91085, 0x00007f3ef3370a82 libpthread.so.0`__pthread_cond_timedwait + 306, stop reason = signal SIGSEGV\r\n  thread #14: tid = 91088, 0x00007f3ef3370a82 libpthread.so.0`__pthread_cond_timedwait + 306, stop reason = signal SIGSEGV\r\n  thread #15: tid = 91070, 0x00007f3ef3370a82 libpthread.so.0`__pthread_cond_timedwait + 306, stop reason = signal SIGSEGV\r\n  thread #16: tid = 91090, 0x00007f3ef3370a82 libpthread.so.0`__pthread_cond_timedwait + 306, stop reason = signal SIGSEGV\r\n  thread #17: tid = 91084, 0x00007f3ef3370a82 libpthread.so.0`__pthread_cond_timedwait + 306, stop reason = signal SIGSEGV\r\n  thread #18: tid = 91078, 0x00007f3ef3370a82 libpthread.so.0`__pthread_cond_timedwait + 306, stop reason = signal SIGSEGV\r\n  thread #19: tid = 91069, 0x00007f3ef33706d5 libpthread.so.0`__pthread_cond_wait + 197, stop reason = signal SIGSEGV\r\n  thread #20: tid = 91852, 0x00007f3ef3370a82 libpthread.so.0`__pthread_cond_timedwait + 306, stop reason = signal SIGSEGV\r\n  thread #21: tid = 91091, 0x00007f3ef3370a82 libpthread.so.0`__pthread_cond_timedwait + 306, stop reason = signal SIGSEGV\r\n```\r\n\r\nMy guess: wrong version of some system library? I've verified that I have all of the prerequisites.\r\n\r\nI've attached two core dumps, both of which show different stack traces than the ones shown here. If you need more, I've got a bunch. Also, if you're interested you can just drive over to our Kirkland office from your Redmond office and I can show you repros in person. I'll even buy you lunch if you want. :)\r\n\r\n* [core.dotnet.66894.1557166562.zip](https://github.com/dotnet/coreclr/files/3149892/core.dotnet.66894.1557166562.zip)\r\n* [core.dotnet.98404.1556062980.zip](https://github.com/dotnet/coreclr/files/3149920/core.dotnet.98404.1556062980.zip)\r\n","Url":"https://github.com/dotnet/coreclr/issues/24425","RelatedDescription":"Open issue \"Dotnet crashing on CentOS 7.3 (maybe a JIT bug?)\" (#24425)"},{"Id":"440866312","IsPullRequest":false,"CreatedAt":"2019-05-06T20:11:17","Actor":"sandreenko","Number":"24424","RawContent":null,"Title":"[arm][Linux][MinOpts] ExplicitTailCallNoSO: Process is terminating due to StackOverflowException.","State":"open","Body":"The test was added in #24252.\r\n\r\n[ADO failure example](https://dev.azure.com/dnceng/public/_build/results?buildId=177785&view=ms.vss-test-web.build-test-results-tab&runId=4306320&paneView=attachments&resultId=105797):\r\n```\r\nProcess is terminating due to StackOverflowException.\r\n/root/helix/work/workitem/JIT/Directed/IL/Tailcall/ExplicitTailCallNoSO/ExplicitTailCallNoSO.sh: line 256:  1505 Aborted                 (core dumped) $LAUNCHER $ExePath \"${CLRTestExecutionArguments[@]}\"\r\n\r\nReturn code:      1\r\nRaw output file:      /root/helix/work/workitem/JIT/Directed/Reports/JIT.Directed/IL/Tailcall/ExplicitTailCallNoSO/ExplicitTailCallNoSO.output.txt\r\nRaw output:\r\nBEGIN EXECUTION\r\n/root/helix/work/correlation/corerun ExplicitTailCallNoSO.exe ''\r\nExpected: 100\r\nActual: 134\r\nEND EXECUTION - FAILED\r\nTest Harness Exitcode is : 1\r\nTo run the test:\r\n> set CORE_ROOT=/root/helix/work/correlation\r\n> /root/helix/work/workitem/JIT/Directed/IL/Tailcall/ExplicitTailCallNoSO/ExplicitTailCallNoSO.sh\r\n\r\n```\r\n\r\nThe issue is stable.\r\n\r\n@kouvel should the test be modified to fit arm32 Linux stack when tail call optimization doesn't happen (in this case because it is minopts)?","Url":"https://github.com/dotnet/coreclr/issues/24424","RelatedDescription":"Open issue \"[arm][Linux][MinOpts] ExplicitTailCallNoSO: Process is terminating due to StackOverflowException.\" (#24424)"},{"Id":"440864056","IsPullRequest":false,"CreatedAt":"2019-05-06T20:05:21","Actor":"sandreenko","Number":"24423","RawContent":null,"Title":"[x86][Windows][JitStress2] eventsourcetrace: Unhandled Exception: System.Exception: Read past end of stream.","State":"open","Body":"[ADO failure](https://dev.azure.com/dnceng/public/_build/results?buildId=180413&view=ms.vss-test-web.build-test-results-tab&runId=4355804&resultId=110452&paneView=debug):\r\n\r\n```\r\nUnhandled Exception: System.Exception: Read past end of stream.\r\n   at FastSerialization.IOStreamStreamReader.Fill(Int32 minimum)\r\n   at FastSerialization.MemoryStreamReader.ReadByte()\r\n   at FastSerialization.MemoryStreamReader.ReadString()\r\n   at FastSerialization.SerializationType.FastSerialization.IFastSerializable.FromStream(Deserializer deserializer)\r\n   at FastSerialization.Deserializer.ReadObjectDefinition(Tags tag, StreamLabel objectLabel)\r\n   at FastSerialization.Deserializer.ReadObject()\r\n   at FastSerialization.Deserializer.ReadObjectDefinition(Tags tag, StreamLabel objectLabel)\r\n   at FastSerialization.Deserializer.ReadObject()\r\n   at Microsoft.Diagnostics.Tracing.EventPipeEventSource.Process()\r\n   at Microsoft.Diagnostics.Tracing.Etlx.TraceLog.CopyRawEvents(TraceEventDispatcher rawEvents, IStreamWriter writer)\r\n   at Microsoft.Diagnostics.Tracing.Etlx.TraceLog.<>c__DisplayClass118_0.<FastSerialization.IFastSerializable.ToStream>b__0()\r\n   at FastSerialization.DeferedRegion.Write(Serializer serializer, Action toStream)\r\n   at Microsoft.Diagnostics.Tracing.Etlx.TraceLog.FastSerialization.IFastSerializable.ToStream(Serializer serializer)\r\n   at FastSerialization.Serializer.WriteObjectData(IFastSerializable obj, Tags beginTag)\r\n   at FastSerialization.Serializer.WriteObjectRef(IFastSerializable obj, Boolean defered)\r\n   at FastSerialization.Serializer..ctor(IStreamWriter writer, IFastSerializable entryObject)\r\n   at Microsoft.Diagnostics.Tracing.Etlx.TraceLog.CreateFromEventPipeEventSources(TraceEventDispatcher source, String etlxFilePath, TraceLogOptions options)\r\n   at Microsoft.Diagnostics.Tracing.Etlx.TraceLog.CreateFromEventPipeDataFile(String filePath, String etlxFilePath, TraceLogOptions options)\r\n   at Tracing.Tests.EventSourceTrace.Main(String[] args) in F:\\workspace\\_work\\1\\s\\tests\\src\\tracing\\eventsource\\eventsourcetrace\\EventSourceTrace.cs:line 84\r\n\r\nReturn code:      1\r\nRaw output file:      C:\\dotnetbuild\\work\\8146549e-4008-41b5-8cb2-1c2e799e47c4\\Work\\ccf7838b-51e2-448e-9d24-7bb0dc1e89d9\\Exec\\tracing\\eventsource\\Reports\\tracing.eventsource\\eventsourcetrace\\eventsourcetrace\\eventsourcetrace.output.txt\r\nRaw output:\r\nBEGIN EXECUTION\r\n \"C:\\dotnetbuild\\work\\8146549e-4008-41b5-8cb2-1c2e799e47c4\\Payload\\corerun.exe\" eventsourcetrace.exe \r\n\tStart: Enable tracing.\r\n\tEnd: Enable tracing.\r\n\r\n\tStart: Messaging.\r\n\tEnd: Messaging.\r\n\r\n\tStart: Disable tracing.\r\n\tEnd: Disable tracing.\r\n\r\n\tStart: Processing events from file.\r\nExpected: 100\r\nActual: -532462766\r\n```\r\nThe test was reenabled in #24365, failed yerstaday, probably an unstable one (like another failure in tracevalidation #24399).\r\n\r\n@sywhang do you know what can cause such exceptions? Are these tests compatible with minopts/jitstress?","Url":"https://github.com/dotnet/coreclr/issues/24423","RelatedDescription":"Open issue \"[x86][Windows][JitStress2] eventsourcetrace: Unhandled Exception: System.Exception: Read past end of stream.\" (#24423)"},{"Id":"440860554","IsPullRequest":true,"CreatedAt":"2019-05-06T19:56:14","Actor":"kouvel","Number":"24422","RawContent":null,"Title":"Fix ETL event rejit IDs and sending of the IL to native map event when code versioning is in use","State":"open","Body":"Fixes https://github.com/dotnet/coreclr/issues/22904\r\nFixes https://github.com/dotnet/coreclr/issues/22908\r\n- Method events now always send the native code ID for the rejit ID, and the IL to native map event continues to send the IL code ID\r\n- Took code versioning into account when sending rundown events for a method including the IL to native map","Url":"https://github.com/dotnet/coreclr/pull/24422","RelatedDescription":"Open PR \"Fix ETL event rejit IDs and sending of the IL to native map event when code versioning is in use\" (#24422)"},{"Id":"440832609","IsPullRequest":true,"CreatedAt":"2019-05-06T18:42:57","Actor":"nietras","Number":"24419","RawContent":null,"Title":"[WIP] Add Span<T>.Sort(...) by changing Array.Sort internals to be Span based","State":"open","Body":"After the exercise in futility of my previous PRs https://github.com/dotnet/coreclr/pull/16986 (and https://github.com/dotnet/corefx/pull/26859), where I tried adding `Sort(...)` in as performant a way as possible in C# code only  (using `ref`s throughout and with the intent to replace existing array sort code too), and these being declined due to security concerns, this PR tries to add `Sort(...)` for spans by doing as minimal as possible changes to existing `Array.Sort` code while trying to avoid yet another duplication of sorting code.\r\n\r\nThe PR starts with exploring whether these minimal changes are a valid path forward, hence changes are cursory (just to explore the path forward). What is missing is whether it is possible to make an overload for `TrySZSort` that works for `Span<T>`, is it?\r\n\r\nCC: @danmosemsft  @jkotas ","Url":"https://github.com/dotnet/coreclr/pull/24419","RelatedDescription":"Open PR \"[WIP] Add Span<T>.Sort(...) by changing Array.Sort internals to be Span based\" (#24419)"},{"Id":"440809210","IsPullRequest":false,"CreatedAt":"2019-05-06T17:42:31","Actor":"AaronRobinsonMSFT","Number":"24418","RawContent":null,"Title":"Add test for System.Private.CoreLib build assumptions","State":"open","Body":"During the conversion of managed product binaries to use SDK projects (#24285) some implicit assumptions about System.Private.CoreLib were uncovered. These should be covered by a test.\r\n\r\n- [ ] [Assembly level attributes](https://github.com/dotnet/coreclr/blob/099177b0899156a4e8a352083a273805240c0ccd/src/System.Private.CoreLib/src/System/Internal.cs#L29-L34)\r\n- [ ] [The public key of SPCL](https://github.com/dotnet/coreclr/blob/099177b0899156a4e8a352083a273805240c0ccd/src/System.Private.CoreLib/System.Private.CoreLib.csproj#L109-L113). An example of the run time check is in [baseassemblyspec.cpp](https://github.com/dotnet/coreclr/blob/099177b0899156a4e8a352083a273805240c0ccd/src/vm/baseassemblyspec.cpp#L151-L196)\r\n- [ ] [The name of the embedded resource file](https://github.com/dotnet/coreclr/blob/099177b0899156a4e8a352083a273805240c0ccd/src/System.Private.CoreLib/shared/System/Threading/Tasks/TplEventSource.cs#L17)\r\n\r\ncc @RussKeldorph @jeffschwMSFT @jkotas @danmosemsft ","Url":"https://github.com/dotnet/coreclr/issues/24418","RelatedDescription":"Open issue \"Add test for System.Private.CoreLib build assumptions\" (#24418)"},{"Id":"440782408","IsPullRequest":false,"CreatedAt":"2019-05-06T17:09:59","Actor":"sandreenko","Number":"24416","RawContent":null,"Title":"ADO PR testing doesn't work","State":"closed","Body":"PRs are failing with:\r\n`/eng/xplat-job.yml: Could not find /eng/common/templates/job/job.yml in repository self hosted on https://api.github.com using commit c685636c1acc35f635f1415e922795475173515f. GitHub reported the error, \"Not Found\"`\r\nbefore they start running any testing.\r\nExamples: https://github.com/dotnet/coreclr/pull/24415, https://github.com/dotnet/coreclr/pull/24411, it has begun today.\r\n\r\n\r\n\r\nPTAL @BruceForstall @RussKeldorph  @dotnet/dnceng \r\n\r\nI did not see any releted changes in our repo today/yerstaday (for example /eng/common/templates/job/job.yml still exists). Maybe it should be moved to core-eng repo.","Url":"https://github.com/dotnet/coreclr/issues/24416","RelatedDescription":"Closed issue \"ADO PR testing doesn't work\" (#24416)"},{"Id":"440790262","IsPullRequest":true,"CreatedAt":"2019-05-06T16:52:56","Actor":"jorive","Number":"24417","RawContent":null,"Title":"[WIP] Create the Concept of Multiple EventPipe Sessions","State":"open","Body":"This is the initial work to enable https://github.com/dotnet/coreclr/issues/15377\r\n\r\n## What's here?\r\n\r\n- A lot of code move/split. Some important moves:\r\n  - EventPipe has a colection of { Session, File } instead of a single session.\r\n  - EventPipeSession now owns the EventPipeBufferManager\r\n  - EventPipeThread now owns a collection of { EventPipeBufferManager, EventPipeBuffer }, and a collection of { EventPipeBufferManager, EventPipeBufferList }\r\n\r\n## What's pending?\r\n\r\n- Add a Crst to the session/buffermanager object, which was previously protected by the EventPipe Crst.\r\n- Verify functionality and testing\r\n- Review all multi-threading aspects and assertions\r\n\r\n## What's not part of this PR?\r\n\r\n- Optimizations, mainly around duplicated sessions/providers, filtering events, etc.","Url":"https://github.com/dotnet/coreclr/pull/24417","RelatedDescription":"Open PR \"[WIP] Create the Concept of Multiple EventPipe Sessions\" (#24417)"},{"Id":"440774974","IsPullRequest":false,"CreatedAt":"2019-05-06T16:11:26","Actor":"sandreenko","Number":"24414","RawContent":null,"Title":"System.Runtime.Tests: Unhandled Exception: Xunit.Sdk.InRangeException: Assert.InRange() Failure","State":"open","Body":"Output:\r\n```\r\n04:18:47 /home/robox/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_baseline_tst/_/fx/artifacts/bin/tests/System.Runtime.Tests/netcoreapp-Linux-Release-arm64 /home/robox/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_baseline_tst/_/fx/artifacts/bin/tests/System.Runtime.Tests/netcoreapp-Linux-Release-arm64\r\n04:18:47   Discovering: System.Runtime.Tests (method display = ClassAndMethod, method display options = None)\r\n04:18:47   Discovered:  System.Runtime.Tests (found 5347 of 5402 test cases)\r\n04:18:47   Starting:    System.Runtime.Tests (parallel test collections = on, max threads = 46)\r\n04:18:47 \r\n04:18:47 Unhandled Exception: Xunit.Sdk.InRangeException: Assert.InRange() Failure\r\n04:18:47 Range:  (18216268922 - 9223372036854775807)\r\n04:18:47 Actual: 17204253982\r\n04:18:47    at Xunit.Assert.InRange[T](T actual, T low, T high, IComparer`1 comparer) in C:\\projects\\xunit\\src\\xunit.assert\\Asserts\\RangeAsserts.cs:line 41\r\n04:18:47    at System.Tests.GCTests.<>c.<GetGCMemoryInfo>b__29_0() in /mnt/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_baseline/_/fx/src/System.Runtime/tests/System/GCTests.netcoreapp.cs:line 56\r\n04:18:47 --- End of stack trace from previous location where exception was thrown ---\r\n04:18:47    at Microsoft.DotNet.RemoteExecutorHost.Program.Main(String[] args) in /_/src/Microsoft.DotNet.RemoteExecutor/src/Microsoft.DotNet.RemoteExecutorHost/Program.cs:line 92\r\n04:18:47     System.Tests.ArgIteratorTests.ArgIterator_GetNextArgType [SKIP]\r\n04:18:47       Condition(s) not met: \"IsArgIteratorSupported\"\r\n04:18:47     System.Tests.ArgIteratorTests.ArgIterator_GetRemainingCount_GetNextArg [SKIP]\r\n04:18:47       Condition(s) not met: \"IsArgIteratorSupported\"\r\n04:18:47 \r\n    System.Tests.GCTests.GetGCMemoryInfo [FAIL]\r\n04:18:47       Microsoft.DotNet.RemoteExecutor.RemoteExecutionException : Remote process failed with an unhandled exception.\r\n04:18:47       Stack Trace:\r\n04:18:47         \r\n04:18:47         Child exception:\r\n04:18:47           Xunit.Sdk.InRangeException: Assert.InRange() Failure\r\n04:18:47         Range:  (18216268922 - 9223372036854775807)\r\n04:18:47         Actual: 17204253982\r\n04:18:47         /mnt/j/workspace/dotnet_coreclr/master/jitstress/arm64_cross_checked_ubuntu16.04_corefx_baseline/_/fx/src/System.Runtime/tests/System/GCTests.netcoreapp.cs(56,0): at System.Tests.GCTests.<>c.<GetGCMemoryInfo>b__29_0()\r\n04:18:47         \r\n04:18:47         Child process:\r\n04:18:47           System.Runtime.Tests, Version=4.2.1.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51 System.Tests.GCTests+<>c Void <GetGCMemoryInfo>b__29_0()\r\n04:18:47         \r\n04:18:47         \r\n04:18:47   Finished:    System.Runtime.Tests\r\n04:18:47 === TEST EXECUTION SUMMARY ===\r\n```\r\n\r\n\r\nStarted to fail in https://ci.dot.net/job/dotnet_coreclr/job/master/job/jitstress/job/arm64_cross_checked_ubuntu16.04_corefx_baseline_tst/192/","Url":"https://github.com/dotnet/coreclr/issues/24414","RelatedDescription":"Open issue \"System.Runtime.Tests: Unhandled Exception: Xunit.Sdk.InRangeException: Assert.InRange() Failure\" (#24414)"},{"Id":"440773447","IsPullRequest":false,"CreatedAt":"2019-05-06T16:07:32","Actor":"sandreenko","Number":"24413","RawContent":null,"Title":"System.Linq.Expressions.Test: Consistency check failed: AV in clr at this callstack","State":"open","Body":"Output:\r\n```\r\n05:38:00 C:\\j\\workspace\\arm_cross_che---eb7b805d\\_\\fx\\artifacts\\bin\\tests\\System.Linq.Expressions.Tests\\netcoreapp-Windows_NT-Release-arm>\"C:\\j\\workspace\\arm_cross_che---eb7b805d\\_\\fx\\artifacts\\bin\\testhost\\netcoreapp-Windows_NT-Release-arm\\dotnet.exe\" xunit.console.dll System.Linq.Expressions.Tests.dll -xml testResults.xml -nologo -nocolor -notrait category=nonnetcoreapptests -notrait category=nonwindowstests -notrait category=IgnoreForCI -notrait category=failing -notrait category=OuterLoop @C:\\j\\workspace\\arm_cross_che---eb7b805d\\tests\\scripts\\run-corefx-tests-exclusions.txt \r\n05:38:17   Discovering: System.Linq.Expressions.Tests (method display = ClassAndMethod, method display options = None)\r\n05:38:30   Discovered:  System.Linq.Expressions.Tests (found 5632 of 5642 test cases)\r\n05:38:30   Starting:    System.Linq.Expressions.Tests (parallel test collections = on, max threads = 8)\r\n05:40:11 \r\n05:40:11 \r\nAssert failure(PID 340 [0x00000154], Thread: 4264 [0x10a8]): Consistency check failed: AV in clr at this callstack:\r\n05:40:11 ------\r\n05:40:11 <no module>! <no symbol> + 0x0 (0x00000000)\r\n05:40:11 -----\r\n05:40:11 .AV on tid=0x10a8 (4264), cxr=1719F1B8, exr=1719F358\r\n05:40:11 FAILED: false\r\n05:40:11 \r\n05:40:11 <no module>! <no symbol> + 0x0 (0x00000000)\r\n05:40:11     File: d:\\j\\workspace\\arm_cross_che---99792267\\src\\vm\\excep.cpp Line: 7661\r\n05:40:11     Image: C:\\j\\workspace\\arm_cross_che---eb7b805d\\_\\fx\\artifacts\\bin\\testhost\\netcoreapp-Windows_NT-Release-arm\\dotnet.exe\r\n05:40:11 \r\n05:40:17 ----- end  5:40:18.50 ----- exit code -1073740286 ----------------------------------------------------------\r\n```\r\n\r\nStarted to fail in https://ci.dot.net/job/dotnet_coreclr/job/master/job/jitstress/job/arm_cross_checked_windows_nt_corefx_baseline_tst/89/","Url":"https://github.com/dotnet/coreclr/issues/24413","RelatedDescription":"Open issue \"System.Linq.Expressions.Test: Consistency check failed: AV in clr at this callstack\" (#24413)"},{"Id":"440730068","IsPullRequest":false,"CreatedAt":"2019-05-06T14:33:28","Actor":"tannergooding","Number":"24412","RawContent":null,"Title":"Cleanup QPF/QPC in the PAL","State":"open","Body":"The `QueryPerformanceFrequency` and `QueryPerformanceCounter` methods used by `System.Diagnostics.Stopwatch` were recently cleaned up in CoreFX.\r\n\r\nIt would likely be beneficial to make the same cleanup in the PAL of CoreCLR.\r\n\r\nNamely:\r\n* CoreFX now assumes we have either `MACH_ABSOLUTE_TIME` or `HAVE_CLOCK_MONOTONIC`\r\n  * This means we could get rid of the `HAVE_GETHRTIME`, `HAVE_READ_REAL_TIME`, and fallback paths\r\n* CoreFX now correctly calls `clock_getres` rather than assuming the resolution of the monotonic timer.\r\n  * POSIX makes no guarantee of what `clock_getres` will return here; even if the current implementations we support look to hardcode it\r\n* CoreFX for `MACH_ABSOLUTE_TIME` now multiplies the `SecondsToNanoSeconds` by the denominator, before dividing by the numerator\r\n  * This minimizes rounding error when the numerator and denominator are sufficiently close","Url":"https://github.com/dotnet/coreclr/issues/24412","RelatedDescription":"Open issue \"Cleanup QPF/QPC in the PAL\" (#24412)"},{"Id":"440689925","IsPullRequest":true,"CreatedAt":"2019-05-06T13:04:33","Actor":"dotnet-maestro[bot]","Number":"24411","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-optimization","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-optimization\r\n- **Build**: 20190506.1\r\n- **Date Produced**: 5/6/2019 11:26 AM\r\n- **Commit**: 1c49409dc0cd36d049721c39b4f4013562a9625b\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **optimization.IBC.CoreCLR** -> 99.99.99-master-20190506.1\r\n  - **optimization.PGO.CoreCLR** -> 99.99.99-master-20190506.1\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/24411","RelatedDescription":"Open PR \"[master] Update dependencies from dnceng/internal/dotnet-optimization\" (#24411)"},{"Id":"440523300","IsPullRequest":false,"CreatedAt":"2019-05-06T02:51:35","Actor":"AriNuer","Number":"24410","RawContent":null,"Title":"Test Failure: JIT_Performance._CodeQuality_Linq_Linq_Linq_/_CodeQuality_Linq_Linq_Linq_sh","State":"open","Body":"Test **JIT_Performance._CodeQuality_Linq_Linq_Linq_/_CodeQuality_Linq_Linq_Linq_sh** has failed.\r\n\r\nMessage :\r\n```\r\ncmdLine:/root/helix/work/workitem/JIT/Performance/CodeQuality/Linq/Linq/Linq.sh Timed Out\r\n\r\nReturn code:      -100\r\nRaw output file:      /root/helix/work/workitem/JIT/Performance/Reports/JIT.Performance/CodeQuality/Linq/Linq/Linq.output.txt\r\nRaw output:\r\nBEGIN EXECUTION\r\n/root/helix/work/correlation/corerun Linq.exe ''\r\n\r\ncmdLine:/root/helix/work/workitem/JIT/Performance/CodeQuality/Linq/Linq/Linq.sh Timed Out\r\nTest Harness Exitcode is : -100\r\nTo run the test:\r\n> set CORE_ROOT=/root/helix/work/correlation\r\n> /root/helix/work/workitem/JIT/Performance/CodeQuality/Linq/Linq/Linq.sh\r\nExpected: True\r\nActual:   False\r\n```\r\nStack Trace :\r\n```\r\nat JIT_Performance._CodeQuality_Linq_Linq_Linq_._CodeQuality_Linq_Linq_Linq_sh() in /__w/1/s/bin/tests/Linux.arm64.Release/TestWrappers/JIT.Performance/JIT.Performance.XUnitWrapper.cs:line 6129\r\n```\r\n\r\nDetails:\r\nhttps://mc.dot.net/#/product/netcore/master/source/official~2Fdotnet~2Fcoreclr~2Frefs~2Fheads~2Fmaster/type/test~2Ffunctional~2Fcli~2F/build/20190505.72/workItem/JIT/analysis/xunit/JIT_Performance._CodeQuality_Linq_Linq_Linq_~2F_CodeQuality_Linq_Linq_Linq_sh","Url":"https://github.com/dotnet/coreclr/issues/24410","RelatedDescription":"Open issue \"Test Failure: JIT_Performance._CodeQuality_Linq_Linq_Linq_/_CodeQuality_Linq_Linq_Linq_sh\" (#24410)"},{"Id":"440515193","IsPullRequest":false,"CreatedAt":"2019-05-06T01:43:13","Actor":"VincentBu","Number":"24409","RawContent":null,"Title":"[arm64] Test failed: readytorun\\tests\\fileversionpreservation\\fileversionpreservation\\fileversionpreservation.cmd","State":"open","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/arm/job/jitstress/job/arm_cross_checked_windows_nt_r2r_gcstress15_tst/53/\r\n\r\n**Failed tests:**\r\nreadytorun\\tests\\fileversionpreservation\\fileversionpreservation\\fileversionpreservation.cmd\r\n\r\n**Log:**\r\n```\r\nNative image fileversionpreservation.exe generated successfully.\r\n         \"C:\\j\\workspace\\arm_cross_che---27c9527e\\bin\\tests\\Windows_NT.arm.Checked\\Tests\\Core_Root\\corerun.exe\" fileversionpreservation.exe \r\n        Expected: 100\r\n        Actual: -1073740286\r\n        END EXECUTION - FAILED\r\n        FAILED\r\n        Test Harness Exitcode is : 1\r\n        To run the test:\r\n        > set CORE_ROOT=C:\\j\\workspace\\arm_cross_che---27c9527e\\bin\\tests\\Windows_NT.arm.Checked\\Tests\\Core_Root\r\n        > C:\\j\\workspace\\arm_cross_che---27c9527e\\bin\\tests\\Windows_NT.arm.Checked\\readytorun\\tests\\fileversionpreservation\\fileversionpreservation\\fileversionpreservation.cmd\r\n        Expected: True\r\n        Actual:   False\r\n        Stack Trace:\r\n          D:\\j\\workspace\\arm_cross_che---57645b35\\bin\\tests\\Windows_NT.arm.Checked\\TestWrappers\\readytorun.tests\\readytorun.tests.XUnitWrapper.cs(129,0): at readytorun_tests._fileversionpreservation_fileversionpreservation_fileversionpreservation_._fileversionpreservation_fileversionpreservation_fileversionpreservation_cmd()\r\n        Output:\r\n          \r\n          Assert failure(PID 7060 [0x00001b94], Thread: 8920 [0x22d8]): !\"About to FailFast. set ComPlus_AssertOnFailFast=0 if this is expected\"\r\n          \r\n          <no module>! <no symbol> + 0x0 (0x00000000)\r\n              File: d:\\j\\workspace\\arm_cross_che---57645b35\\src\\vm\\jithelpers.cpp Line: 5091\r\n              Image: C:\\j\\workspace\\arm_cross_che---27c9527e\\bin\\tests\\Windows_NT.arm.Checked\\Tests\\Core_Root\\CoreRun.exe\r\n          \r\n          \r\n          Return code:      1\r\n```","Url":"https://github.com/dotnet/coreclr/issues/24409","RelatedDescription":"Open issue \"[arm64] Test failed: readytorun\\tests\\fileversionpreservation\\fileversionpreservation\\fileversionpreservation.cmd\" (#24409)"},{"Id":"440513529","IsPullRequest":false,"CreatedAt":"2019-05-06T01:27:15","Actor":"VincentBu","Number":"24408","RawContent":null,"Title":"[arm64] IOError: getaddrinfo failed","State":"open","Body":"**Job:**\r\nhttps://ci.dot.net/job/dotnet_coreclr/job/master/view/arm64/job/jitstress/job/arm64_cross_checked_windows_nt_r2r_jitstress1_tst/53/\r\n\r\n**Log:**\r\n```\r\nRunning tests R2R\r\nSetting RunCrossGen=true\r\nSetting __TestTimeout=900000\r\nSetting CORE_ROOT=C:\\j\\workspace\\arm64_cross_c---9f0d91aa\\bin\\tests\\Windows_NT.arm64.Checked\\Tests\\Core_Root\r\nSetting __TestEnv=c:\\users\\helixa~1\\appdata\\local\\temp\\tmpbexshz.bat\r\nDownload and overwrite xunit.console.dll in Core_Root\r\nTraceback (most recent call last):\r\n  File \"C:\\j\\workspace\\arm64_cross_c---9f0d91aa\\tests\\runtest.py\", line 2431, in <module>\r\n    sys.exit(main(args))\r\n  File \"C:\\j\\workspace\\arm64_cross_c---9f0d91aa\\tests\\runtest.py\", line 2405, in main\r\n    lambda path: do_setup(host_os,\r\n  File \"C:\\j\\workspace\\arm64_cross_c---9f0d91aa\\tests\\runtest.py\", line 538, in create_and_use_test_env\r\n    ret_code = func(test_env.name)\r\n  File \"C:\\j\\workspace\\arm64_cross_c---9f0d91aa\\tests\\runtest.py\", line 2414, in <lambda>\r\n    path))\r\n  File \"C:\\j\\workspace\\arm64_cross_c---9f0d91aa\\tests\\runtest.py\", line 2363, in do_setup\r\n    run_in_context=unprocessed_args.run_in_context)\r\n  File \"C:\\j\\workspace\\arm64_cross_c---9f0d91aa\\tests\\runtest.py\", line 1124, in run_tests\r\n    urlretrieve(url, zipfilename)\r\n  File \"c:\\python\\lib\\urllib.py\", line 98, in urlretrieve\r\n    return opener.retrieve(url, filename, reporthook, data)\r\n  File \"c:\\python\\lib\\urllib.py\", line 245, in retrieve\r\n    fp = self.open(url, data)\r\n  File \"c:\\python\\lib\\urllib.py\", line 213, in open\r\n    return getattr(self, name)(url)\r\n  File \"c:\\python\\lib\\urllib.py\", line 443, in open_https\r\n    h.endheaders(data)\r\n  File \"c:\\python\\lib\\httplib.py\", line 1049, in endheaders\r\n    self._send_output(message_body)\r\n  File \"c:\\python\\lib\\httplib.py\", line 893, in _send_output\r\n    self.send(msg)\r\n  File \"c:\\python\\lib\\httplib.py\", line 855, in send\r\n    self.connect()\r\n  File \"c:\\python\\lib\\httplib.py\", line 1266, in connect\r\n    HTTPConnection.connect(self)\r\n  File \"c:\\python\\lib\\httplib.py\", line 832, in connect\r\n    self.timeout, self.source_address)\r\n  File \"c:\\python\\lib\\socket.py\", line 557, in create_connection\r\n    for res in getaddrinfo(host, port, 0, SOCK_STREAM):\r\nIOError: [Errno socket error] [Errno 11001] getaddrinfo failed\r\n```","Url":"https://github.com/dotnet/coreclr/issues/24408","RelatedDescription":"Open issue \"[arm64] IOError: getaddrinfo failed\" (#24408)"}],"ResultType":"GitHubIssue"},"CLI-Issues":{"Issues":[{"Id":"440812651","IsPullRequest":true,"CreatedAt":"2019-05-07T04:55:37","Actor":"rainersigwald","Number":"11292","RawContent":null,"Title":"MSBuild 16.1.73","State":"closed","Body":"This is, optimistically, the final MSBuild for 16.1.\r\n\r\nInternal PR: https://devdiv.visualstudio.com/DevDiv/_git/VS/pullrequest/179376.","Url":"https://github.com/dotnet/cli/pull/11292","RelatedDescription":"Closed or merged PR \"MSBuild 16.1.73\" (#11292)"},{"Id":"440812007","IsPullRequest":true,"CreatedAt":"2019-05-07T04:55:18","Actor":"rainersigwald","Number":"11291","RawContent":null,"Title":"MSBuild 16.1.73 (2.1.7xx)","State":"closed","Body":"This is, optimistically, the final MSBuild for 16.1.\r\n\r\nInternal PR: https://devdiv.visualstudio.com/DevDiv/_git/VS/pullrequest/179376.","Url":"https://github.com/dotnet/cli/pull/11291","RelatedDescription":"Closed or merged PR \"MSBuild 16.1.73 (2.1.7xx)\" (#11291)"},{"Id":"440637303","IsPullRequest":false,"CreatedAt":"2019-05-07T03:19:02","Actor":"YunWeiaa","Number":"11288","RawContent":null,"Title":"Run dotnet tool run t-rex -- -h, it doesn't show help from t-rex.","State":"closed","Body":"## Steps to reproduce\r\n1. Create empty directory\r\n2. Copy the following and create file called dotnet-tools.json\r\n \r\n{\r\n    \"version\": 1,\r\n    \"isRoot\": true,\r\n    \"tools\": {\r\n        \"t-rex\": {\r\n            \"version\": \"1.0.53\",\r\n            \"commands\": [\"t-rex\"]\r\n        },\r\n        \"dotnetsay\": {\r\n            \"version\": \"2.1.4\",\r\n            \"commands\": [\"dotnetsay\"]\r\n        }\r\n    }\r\n}\r\n\r\n3. cd to the directory with manifest file\r\n4. Run  dotnet tool run t-rex -- -h\r\n5. It should show error. Follow the instruction from the error\r\n6. Run dotnet tool run t-rex -- -h again\r\n\r\n## Expected  behavior\r\nIt should show help from t-rex\r\n\r\n\r\n## Actual behavior\r\nRun dotnet tool run t-rex -- -h, it doesn't show help from t-rex.\r\n![image](https://user-images.githubusercontent.com/33921754/57220293-5f867f80-702d-11e9-8ae3-1f3e76372612.png)\r\n\r\n\r\n## Environment data\r\nD16.1/28902.138(16.1.0 preview3.0)+ CLI/SDK: 3.0.100-preview6-011765\r\n`dotnet --info` output:\r\n```\r\n.NET Core SDK（反映任何 global.json）:\r\n Version:   3.0.100-preview6-011765\r\n Commit:    fffa58a7df\r\n\r\n运行时环境:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview6-011765\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview6-27705-13\r\n  Commit:  ccea80903e\r\n\r\n.NET Core SDKs installed:\r\n  2.1.700-preview-009618 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.300-preview-010067 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview6-011765 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview6-19255-03 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview6-27705-13 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview6-27705-13 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11288","RelatedDescription":"Closed issue \"Run dotnet tool run t-rex -- -h, it doesn't show help from t-rex.\" (#11288)"},{"Id":"440410064","IsPullRequest":true,"CreatedAt":"2019-05-06T20:52:31","Actor":"dsychin","Number":"11287","RawContent":null,"Title":"Update warning message for dotnet tool update and uninstall","State":"closed","Body":"Fixes #9650\r\nChanged warning message when tool is not found to include more information about package Ids and tool names.","Url":"https://github.com/dotnet/cli/pull/11287","RelatedDescription":"Closed or merged PR \"Update warning message for dotnet tool update and uninstall\" (#11287)"},{"Id":"440823219","IsPullRequest":true,"CreatedAt":"2019-05-06T18:19:09","Actor":"nugetlurker","Number":"11294","RawContent":null,"Title":"Insert NuGet Build 5.1.0-rtm.6003 into cli","State":"open","Body":"Insert NuGet Build 5.1.0-rtm.6003 into cli release/2.1.7xx branch","Url":"https://github.com/dotnet/cli/pull/11294","RelatedDescription":"Open PR \"Insert NuGet Build 5.1.0-rtm.6003 into cli\" (#11294)"},{"Id":"440823182","IsPullRequest":true,"CreatedAt":"2019-05-06T18:19:03","Actor":"nugetlurker","Number":"11293","RawContent":null,"Title":"Insert NuGet Build 5.1.0-rtm.6003 into cli","State":"open","Body":"Insert NuGet Build 5.1.0-rtm.6003 into cli release/2.2.3xx branch","Url":"https://github.com/dotnet/cli/pull/11293","RelatedDescription":"Open PR \"Insert NuGet Build 5.1.0-rtm.6003 into cli\" (#11293)"},{"Id":"440670842","IsPullRequest":true,"CreatedAt":"2019-05-06T16:16:41","Actor":"dotnet-maestro[bot]","Number":"11290","RawContent":null,"Title":"[master] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190505.1\r\n- **Date Produced**: 5/5/2019 12:46 PM\r\n- **Commit**: 588389e83475cb3d1fac5231103f5d08737cef8c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 1.0.2-beta5.19255.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11290","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/templating\" (#11290)"},{"Id":"440667634","IsPullRequest":true,"CreatedAt":"2019-05-06T12:06:46","Actor":"dotnet-maestro[bot]","Number":"11289","RawContent":null,"Title":"[master] Update dependencies from dotnet/sdk","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190505.1\r\n- **Date Produced**: 5/5/2019 3:14 PM\r\n- **Commit**: d6485643ff1ffbed005f640ccd142c549422bb01\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview6.19255.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11289","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/sdk\" (#11289)"},{"Id":"440016079","IsPullRequest":true,"CreatedAt":"2019-05-05T12:47:43","Actor":"dotnet-maestro[bot]","Number":"11283","RawContent":null,"Title":"[master] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190502.4\r\n- **Date Produced**: 5/3/2019 4:03 AM\r\n- **Commit**: 231a861bd96b5e4fbe287956be76697f5f900680\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview6.19252.4\r\n\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190503.3\r\n- **Date Produced**: 5/4/2019 12:00 AM\r\n- **Commit**: 6a8d9c303ad4eb6cfb86a467e992de8b0b4779ef\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview6.19253.3\r\n\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190504.1\r\n- **Date Produced**: 5/4/2019 3:35 PM\r\n- **Commit**: 4cbbca75493efccdb57de63597e3e4ee452471ba\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview6.19254.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11283","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/sdk\" (#11283)"},{"Id":"440171880","IsPullRequest":true,"CreatedAt":"2019-05-03T18:42:02","Actor":"brettfo","Number":"11286","RawContent":null,"Title":"[release/2.2.3xx] update F# for LOC changes","State":"open","Body":"LOC changes from Microsoft/visualfsharp#6676.  Waiting on [VS insertion](https://dev.azure.com/devdiv/DevDiv/_git/VS/pullrequest/179427?_a=overview).","Url":"https://github.com/dotnet/cli/pull/11286","RelatedDescription":"Open PR \"[release/2.2.3xx] update F# for LOC changes\" (#11286)"},{"Id":"440171576","IsPullRequest":true,"CreatedAt":"2019-05-03T18:41:11","Actor":"brettfo","Number":"11285","RawContent":null,"Title":"[release/2.1.7xx] update F# for LOC changes","State":"open","Body":"LOC changes from Microsoft/visualfsharp#6676.  Waiting on [VS insertion](https://dev.azure.com/devdiv/DevDiv/_git/VS/pullrequest/179427?_a=overview).","Url":"https://github.com/dotnet/cli/pull/11285","RelatedDescription":"Open PR \"[release/2.1.7xx] update F# for LOC changes\" (#11285)"},{"Id":"440021989","IsPullRequest":false,"CreatedAt":"2019-05-03T12:24:07","Actor":"LinchaiTheShinigami","Number":"11284","RawContent":null,"Title":"\"Dotnet New Console\" does not handle paths with \"%\" character ","State":"open","Body":"## Steps to reproduce\r\n1. Create a local folder path with the % symbol\r\n2. In the command line run \"Dotnet New Console\" under that folder path\r\n3. Once the console application has been built \"Dotnet Run\"\r\n\r\n## Expected  behavior\r\nConsole should print \"Hello World!\"\r\n\r\n## Actual behavior\r\ncs.proj path is not found (although it exists in the precise location as the mentioned by the error)\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.602\r\n Commit:    04475eb7cf\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.14393\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.602\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.9\r\n  Commit:  dcedc87d22\r\n\r\n.NET Core SDKs installed:\r\n  1.1.11 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11284","RelatedDescription":"Open issue \"\"Dotnet New Console\" does not handle paths with \"%\" character \" (#11284)"},{"Id":"439806831","IsPullRequest":true,"CreatedAt":"2019-05-02T21:59:42","Actor":"mmitche","Number":"11282","RawContent":null,"Title":"[release/2.1.5xx] Move to Azure DevOps","State":"open","Body":"Auto-generated Azure DevOps YAML from the Jenkins jobs. Slightly tweaked (e.g. job names)","Url":"https://github.com/dotnet/cli/pull/11282","RelatedDescription":"Open PR \"[release/2.1.5xx] Move to Azure DevOps\" (#11282)"},{"Id":"439805915","IsPullRequest":true,"CreatedAt":"2019-05-02T21:56:43","Actor":"mmitche","Number":"11281","RawContent":null,"Title":"[release/2.2.1xx] Move to Azure DevOps","State":"open","Body":"Auto-generated Azure DevOps YAML from the Jenkins jobs. Slightly tweaked (e.g. job names)\r\n","Url":"https://github.com/dotnet/cli/pull/11281","RelatedDescription":"Open PR \"[release/2.2.1xx] Move to Azure DevOps\" (#11281)"},{"Id":"439714846","IsPullRequest":true,"CreatedAt":"2019-05-02T21:35:47","Actor":"mmitche","Number":"11280","RawContent":null,"Title":"[NOMERGE, WIP] Test automated move to AzDO","State":"closed","Body":"- If this PR should not run tests please add text \"skip[REMOVE_THIS]ci[REMOVE_THIS]please\" (remove the marked text, no quotes).\r\n- Please add description for changes you are making.\r\n- If there is an issue related to this PR, please add the reference.\r\n","Url":"https://github.com/dotnet/cli/pull/11280","RelatedDescription":"Closed or merged PR \"[NOMERGE, WIP] Test automated move to AzDO\" (#11280)"},{"Id":"439606725","IsPullRequest":true,"CreatedAt":"2019-05-02T13:59:43","Actor":"v-mdriml","Number":"11279","RawContent":null,"Title":"LOC CHECKIN | dotnet/cli master 20190502","State":"open","Body":"- If this PR should not run tests please add text \"skip[REMOVE_THIS]ci[REMOVE_THIS]please\" (remove the marked text, no quotes).\r\n- Please add description for changes you are making.\r\n- If there is an issue related to this PR, please add the reference.\r\n","Url":"https://github.com/dotnet/cli/pull/11279","RelatedDescription":"Open PR \"LOC CHECKIN | dotnet/cli master 20190502\" (#11279)"},{"Id":"439570748","IsPullRequest":false,"CreatedAt":"2019-05-02T12:43:04","Actor":"hez2010","Number":"11278","RawContent":null,"Title":"How to disable assemblies referenced by project or nuget package?","State":"open","Body":"## Steps to reproduce\r\n```\r\ndotnet new classlib -f netstandard2.1\r\ndotnet add package SixLabors.ImageSharp --version 1.0.0-beta0006\r\n```\r\nadd a method using `Span<T>` in Class1.cs such as:\r\n```csharp\r\npublic void Test()\r\n{\r\n    Span<int> x;\r\n}\r\n```\r\n```\r\ndotnet build\r\n```\r\n\r\n## Expected  behavior\r\nSuccessfully built\r\n\r\n## Actual behavior\r\nI have no way to use `Span<T>`\r\n```\r\nerror CS0433: The type 'Span<T>' exists in both 'System.Memory, Version=4.0.1.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51' and 'netstandard, Version=2.1.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51' [C:\\Users\\hez20\\Desktop\\test\\test.csproj]\r\n```\r\nSystem.Memory (Version=2.1.0.0) was referenced by my .net standard 2.1 project, and System.Memory (Version=4.0.1.0) was referenced by SixLabors.ImageSharp which is a nuget package and I cannot modify its source code.\r\n\r\nHow can I specify the assembly I want to use in my source code? Is there any way to keep System.Memory (Version=4.0.1.0) only being used in SixLabors.ImageSharp, and not spreading to my project?\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview4-011223\r\n Commit:    118dd862c8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview4-011223\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview4-27615-11\r\n  Commit:  ee54d4cbd2\r\n\r\n.NET Core SDKs installed:\r\n  3.0.100-preview4-011223 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.App 3.0.0-preview4-19216-03 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview4-27615-11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview4-27613-28 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```","Url":"https://github.com/dotnet/cli/issues/11278","RelatedDescription":"Open issue \"How to disable assemblies referenced by project or nuget package?\" (#11278)"},{"Id":"438743990","IsPullRequest":true,"CreatedAt":"2019-05-02T12:05:48","Actor":"dotnet-maestro[bot]","Number":"11269","RawContent":null,"Title":"[master] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190429.1\r\n- **Date Produced**: 4/29/2019 9:09 PM\r\n- **Commit**: 6fa41425ff96b489f2a770191702c1a7bc592620\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview6.19229.1\r\n\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190430.1\r\n- **Date Produced**: 4/30/2019 11:56 PM\r\n- **Commit**: ea732012ed177a08d8e364ed87ca662fd83ede16\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 3.0.100-preview6.19230.1\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11269","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/sdk\" (#11269)"},{"Id":"439556477","IsPullRequest":true,"CreatedAt":"2019-05-02T12:05:44","Actor":"dotnet-maestro[bot]","Number":"11277","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190501.6\r\n- **Date Produced**: 5/2/2019 7:15 AM\r\n- **Commit**: ea9b2530a1559dd6426730aba52fca1924db2b65\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19251.6\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190502.2\r\n- **Date Produced**: 5/2/2019 7:00 PM\r\n- **Commit**: ed63a7faf2d119829dd971be91bb46b6ebaa1dd2\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19252.2\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190503.8\r\n- **Date Produced**: 5/4/2019 2:00 AM\r\n- **Commit**: 4cacf7aa7b2cd8bdd042e721e6ad73d809dd5678\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19253.8\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190504.1\r\n- **Date Produced**: 5/4/2019 12:58 PM\r\n- **Commit**: 1b8589bbf53b9a5e819460798eff59830f39a3be\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19254.1\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190505.2\r\n- **Date Produced**: 5/5/2019 2:25 PM\r\n- **Commit**: 6a34948f7bdbc3ceb2fb16441b49f7748a462646\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19255.2\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11277","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/arcade\" (#11277)"},{"Id":"439431556","IsPullRequest":false,"CreatedAt":"2019-05-02T05:26:14","Actor":"Leon99","Number":"11276","RawContent":null,"Title":"Support for appsetings.yml","State":"open","Body":"There is an increasing number of systems that adapt YAML as a configuration format. Unfortunately, .NET requires much more effort to use appsetings.yml than to use appsetings.json. One piece to it that is small but very annoying when put to scale is having to explicitly include the following code in a csproj:\r\n```xml\r\n  <ItemGroup>\r\n    <None Include=\"appsettings.*\" CopyToPublishDirectory=\"PreserveNewest\" />\r\n  </ItemGroup>\r\n```\r\nThis is a suggestion to adjust the build tool to handle appsettings.\\*.yml the same way appsettings.\\*.json are handled, which is, I guess, copying them to publish directory without having that piece in the csproj.","Url":"https://github.com/dotnet/cli/issues/11276","RelatedDescription":"Open issue \"Support for appsetings.yml\" (#11276)"},{"Id":"439293807","IsPullRequest":false,"CreatedAt":"2019-05-01T19:38:54","Actor":"mabead","Number":"11275","RawContent":null,"Title":"pre-jitting result of `dotnet publish`","State":"open","Body":"The [dotnet store](https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-store) command has the ability to optimize the assemblies for the target platform:\r\n\r\n> By default, assemblies are optimized for the target runtime and framework. For more information, see the runtime package store topic.\r\n\r\nAs said in https://github.com/dotnet/cli/issues/11270, it is not clear what is optimized. But if I read between the lines of [this post](https://aws.amazon.com/blogs/developer/aws-lambda-layers-with-net-core/), it looks like the `dotnet store` command pre-jits the assemblies for the target environment. This is something quite usefull to speed-up the startup of applications.\r\n\r\nWould it be possible to provide the same optimizations through an `--optimize` option to `dotnet publish`? This would make it easier than having to manage runtime package stores to optimize assemblies for the target platform. \r\n\r\nI would use it for sure to pre-jit assemblies of AWS lambdas thus minimizing the cold start time overhead.\r\n","Url":"https://github.com/dotnet/cli/issues/11275","RelatedDescription":"Open issue \"pre-jitting result of `dotnet publish`\" (#11275)"},{"Id":"439242909","IsPullRequest":true,"CreatedAt":"2019-05-01T17:16:06","Actor":"nugetlurker","Number":"11274","RawContent":null,"Title":"Insert NuGet Build 5.0.2-rtm.5988 into cli","State":"open","Body":"Insert NuGet Build 5.0.2-rtm.5988 into cli release/2.1.6xx branch","Url":"https://github.com/dotnet/cli/pull/11274","RelatedDescription":"Open PR \"Insert NuGet Build 5.0.2-rtm.5988 into cli\" (#11274)"},{"Id":"439242888","IsPullRequest":true,"CreatedAt":"2019-05-01T17:16:01","Actor":"nugetlurker","Number":"11273","RawContent":null,"Title":"Insert NuGet Build 5.0.2-rtm.5988 into cli","State":"open","Body":"Insert NuGet Build 5.0.2-rtm.5988 into cli release/2.2.2xx branch","Url":"https://github.com/dotnet/cli/pull/11273","RelatedDescription":"Open PR \"Insert NuGet Build 5.0.2-rtm.5988 into cli\" (#11273)"},{"Id":"438743812","IsPullRequest":true,"CreatedAt":"2019-05-01T12:45:32","Actor":"dotnet-maestro[bot]","Number":"11268","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190429.8\r\n- **Date Produced**: 4/30/2019 5:30 AM\r\n- **Commit**: a7a250e9c13147134543c35fef2fb81f19592edf\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19229.8\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190430.6\r\n- **Date Produced**: 4/30/2019 10:17 PM\r\n- **Commit**: ac8d88df02d246d3147338fcfb03b1b93dc84b53\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19230.6\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/11268","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#11268)"},{"Id":"438939671","IsPullRequest":false,"CreatedAt":"2019-04-30T21:58:51","Actor":"HizzyCO","Number":"11272","RawContent":null,"Title":"Unable to install any dotnet tool","State":"closed","Body":"## Steps to reproduce\r\nOpen Command line and run \r\ndotnet tool install --global Amazon.ECS.Tools --version 3.0.0\r\n\r\nUsing this tool as a specific value for a tool but happens with any tool.\r\n## Expected  behavior\r\nStates tool installed\r\n\r\n## Actual behavior\r\nC:\\Program Files\\dotnet\\sdk\\2.1.505\\NuGet.targets(114,5): error : Failed to retrieve information about 'amazon.ecs.tools' from remote source 'https://www.nuget.org/FindPackagesById()?id='amazon.ecs.tools'&semVerLevel=2.0.0'. [C:\\Users\\***\\restore.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\2.1.505\\NuGet.targets(114,5): error :   Response status code does not indicate success: 404 (Not Found). [C:\\Users\\**\\restore.csproj]\r\n\r\n## Environment data\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.505\r\n Commit:    b220231234\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.505\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.9\r\n  Commit:  dcedc87d22\r\n\r\n.NET Core SDKs installed:\r\n  1.1.0 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.503 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.505 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11272","RelatedDescription":"Closed issue \"Unable to install any dotnet tool\" (#11272)"},{"Id":"438859262","IsPullRequest":false,"CreatedAt":"2019-04-30T16:10:48","Actor":"tmaconko","Number":"11271","RawContent":null,"Title":"dotnet build fails to generate files for XAML","State":"open","Body":"Please confirm, whether this is a bug, or I am just having trouble after migration to .NET SDK 2.2.203 from 2.1.502. \r\n\r\n## Steps to reproduce\r\n\r\nI have updated version in global.json file, which is in root folder of my solution. There are different project types: net472, netstandard2.0 and netcoreapp2.2.\r\n\r\nMy global.json file looks like:\r\n```\r\n{\r\n  \"sdk\": {\r\n    \"version\": \"2.2.203\"\r\n  }\r\n}\r\n```\r\n\r\nBelow, there is a WPF csproj file, which runs my app:\r\n```\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net472</TargetFramework>\r\n    <LanguageTargets>$(MSBuildToolsPath)\\Microsoft.CSharp.targets</LanguageTargets>\r\n    <AssemblyName>ServiceMonitor</AssemblyName>\r\n    <RootNamespace>ServiceMonitor</RootNamespace>\r\n    <OutputType>WinExe</OutputType>\r\n    <AutoGenerateBindingRedirects>true</AutoGenerateBindingRedirects>\r\n    <GenerateBindingRedirectsOutputType>true</GenerateBindingRedirectsOutputType>\r\n    <Prefer32Bit>false</Prefer32Bit>\r\n    <WarningLevel>4</WarningLevel>\r\n    <ErrorReport>prompt</ErrorReport>\r\n    <StartupObject>ServiceMonitor.App</StartupObject>\r\n  </PropertyGroup>\r\n  <PropertyGroup Condition=\" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' \">\r\n    <PlatformTarget>AnyCPU</PlatformTarget>\r\n    <DebugSymbols>true</DebugSymbols>\r\n    <DebugType>full</DebugType>\r\n    <Optimize>false</Optimize>\r\n    <OutputPath>bin\\Debug\\</OutputPath>\r\n    <DefineConstants>DEBUG;TRACE</DefineConstants>\r\n  </PropertyGroup>\r\n  <PropertyGroup Condition=\" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' \">\r\n    <PlatformTarget>AnyCPU</PlatformTarget>\r\n    <DebugType>pdbonly</DebugType>\r\n    <Optimize>true</Optimize>\r\n    <OutputPath>bin\\Release\\</OutputPath>\r\n    <DefineConstants>TRACE</DefineConstants>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <ApplicationDefinition Include=\"App.xaml\">\r\n      <Generator>MSBuild:UpdateDesignTimeXaml</Generator>\r\n    </ApplicationDefinition>\r\n    <Compile Update=\"App.xaml.cs\">\r\n      <DependentUpon>App.xaml</DependentUpon>\r\n    </Compile>\r\n    <Page Include=\"MainWindow.xaml\">\r\n      <Generator>MSBuild:UpdateDesignTimeXaml</Generator>\r\n    </Page>\r\n    <Compile Update=\"MainWindow.xaml.cs\">\r\n      <DependentUpon>MainWindow.xaml</DependentUpon>\r\n    </Compile>\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <Compile Include=\"..\\SharedAssemblyInfo.cs\" Link=\"Properties\\SharedAssemblyInfo.cs\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <Reference Include=\"Microsoft.VisualBasic\" />\r\n    <Reference Include=\"PresentationCore\" />\r\n    <Reference Include=\"PresentationFramework\" />\r\n    <Reference Include=\"System.Configuration\" />\r\n    <Reference Include=\"System.Management\" />\r\n    <Reference Include=\"System.Net.Http\" />\r\n    <Reference Include=\"System.ServiceProcess\" />\r\n    <Reference Include=\"System.Windows\" />\r\n    <Reference Include=\"System.Windows.Forms\" />\r\n    <Reference Include=\"System.Xaml\" />\r\n    <Reference Include=\"WindowsBase\" />\r\n  </ItemGroup>\r\n  <ItemGroup>\r\n    <ProjectReference Include=\"..\\Infrastructure\\Infrastructure.csproj\" />\r\n    <ProjectReference Include=\"..\\Wpf\\Wpf.csproj\" />\r\n  </ItemGroup>\r\n  <Import Project=\"..\\shared.targets\" />\r\n  <Import Project=\"..\\..\\..\\.paket\\Paket.Restore.targets\" />\r\n</Project>\r\n```\r\n\r\n## Expected  behavior\r\nBuilding solution with dotnet build command worked fine earlier with SDK 2.1.502, *.g.cs files were being generated and everything has been being resolved, but after changing to 2.2.203, files stopped being generated and build started failing.\r\n\r\n## Actual behavior\r\nThe problem is that when I run build (dotnet build MySolution.sln) then WPF project build fails with error: \r\n```\r\n9>App.xaml.cs(64,33): Error CS0115 : 'App.OnStartup(StartupEventArgs)': no suitable method found to override\r\n9>App.xaml.cs(121,33): Error CS0115 : 'App.OnExit(ExitEventArgs)': no suitable method found to override\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\nC:\\Source\\LiveStats.AmericanFootball>dotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.203\r\n Commit:    e5bab63eca\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.203\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview4-27615-11\r\n  Commit:  ee54d4cbd2\r\n\r\n.NET Core SDKs installed:\r\n  1.0.0-preview2-003131 [C:\\Program Files\\dotnet\\sdk]\r\n  1.0.0-preview2-1-003177 [C:\\Program Files\\dotnet\\sdk]\r\n  1.0.1 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.8 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.9 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.10 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.11 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.0 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.104 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.200 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.300-rc1-008673 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.300 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.400 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.402 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.101 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.106 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.203 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview4-011223 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0-rc1-final [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0-rc1-final [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview4-19216-03 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0-rc1 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview4-27615-11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview4-27613-28 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11271","RelatedDescription":"Open issue \"dotnet build fails to generate files for XAML\" (#11271)"},{"Id":"438769923","IsPullRequest":false,"CreatedAt":"2019-04-30T13:10:18","Actor":"mabead","Number":"11270","RawContent":null,"Title":"What is optimized through `dotnet store`? Are assemblies pre-jitted?","State":"open","Body":"When we read the documentation of the [dotnet store](https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-store) command, we can read that:\r\n\r\n> By default, assemblies are optimized for the target runtime and framework. For more information, see the runtime package store topic.\r\n\r\nUnfortunately, the \"runtime package store topic\" does not provide more details on the optimizations that take place.\r\n\r\nMy question is: what are the optimizations that take place? In particular, are the assemblies pre-jitted for the target environment?\r\n","Url":"https://github.com/dotnet/cli/issues/11270","RelatedDescription":"Open issue \"What is optimized through `dotnet store`? Are assemblies pre-jitted?\" (#11270)"},{"Id":"438578983","IsPullRequest":false,"CreatedAt":"2019-04-30T02:22:59","Actor":"sillyousu","Number":"11267","RawContent":null,"Title":"The library 'hostpolicy.dll' required to execute the application was not found in","State":"closed","Body":"## Steps to reproduce\r\n\r\ncreate a hello world project:\r\n```\r\nmkdir ClassLib\r\ncd ClassLib\r\ndotnet new classlib\r\ncd ..\r\nmkdir Main \r\ncd Main\r\ndotnet new console\r\ndotnet  add reference ..\\ClassLib\\ClassLib.csproj\r\ndotnet build\r\ndotnet .\\bin\\Debug\\netcoreapp2.2\\ClassLib.dll\r\n```\r\n```\r\n.\r\n├── ClassLib\r\n│   ├── Class1.cs\r\n│   └── ClassLib.csproj\r\n└── Main\r\n    ├── Main.csproj\r\n    └── Program.cs\r\n```\r\n\r\n## Expected  behavior\r\nmeaningful error message\r\n\r\n## Actual behavior\r\n```\r\nA fatal error was encountered. The library 'hostpolicy.dll' required to execute the application was not found in 'C:\\Users\\supei\\xd\\sims\\fooo\\Main\\bin\\Debug\\netcoreapp2.2\\'.\r\nFailed to run as a self-contained app. If this should be a framework-dependent app, add the C:\\Users\\supei\\xd\\sims\\fooo\\Main\\bin\\Debug\\netcoreapp2.2\\FooA.runtimeconfig.json file specifying the appropriate framework.\r\n```\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\nPS C:\\Users\\supei\\xd\\sims\\fooo\\Main> dotnet.exe --info\r\n.NET Core SDK（反映任何 global.json）:\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\n运行时环境:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  1.1.8 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.9 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.11 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.101 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.103 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.104 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.200 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.201 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.300 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.403 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.500 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.11 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.0.13 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.8 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.10 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/11267","RelatedDescription":"Closed issue \"The library 'hostpolicy.dll' required to execute the application was not found in\" (#11267)"},{"Id":"438521775","IsPullRequest":true,"CreatedAt":"2019-04-29T22:34:25","Actor":"peterhuene","Number":"11265","RawContent":null,"Title":"Update Roslyn to `3.1.0-beta3-19223-09`.","State":"closed","Body":"This commit updates Roslyn to `3.1.0-beta3-19223-09`.","Url":"https://github.com/dotnet/cli/pull/11265","RelatedDescription":"Closed or merged PR \"Update Roslyn to `3.1.0-beta3-19223-09`.\" (#11265)"},{"Id":"438522557","IsPullRequest":true,"CreatedAt":"2019-04-29T22:29:55","Actor":"peterhuene","Number":"11266","RawContent":null,"Title":"Update Roslyn to 3.1.0-beta3-19223-09.","State":"closed","Body":"This commit updates Roslyn to `3.1.0-beta3-19223-09`.","Url":"https://github.com/dotnet/cli/pull/11266","RelatedDescription":"Closed or merged PR \"Update Roslyn to 3.1.0-beta3-19223-09.\" (#11266)"}],"ResultType":"GitHubIssue"},"Standard-Issues":{"Issues":[{"Id":"440265255","IsPullRequest":false,"CreatedAt":"2019-05-04T00:25:58","Actor":"bartonjs","Number":"1178","RawContent":null,"Title":"Consider asymmetric key import/export API for NS2.1","State":"open","Body":"https://github.com/dotnet/corefx/issues/20414 significantly helps .NET applications work with asymmetric keys \"the Linux way\", as well as other generally useful in hybrid environments scenarios.\r\n\r\nTypes to diff against corefx/3.0:\r\n* System.Security.Cryptography.AsymmetricAlgorithm\r\n* System.Security.Cryptography.RSA\r\n* System.Security.Cryptography.ECDsa\r\n* System.Security.Cryptography.ECDiffieHellman\r\n\r\n(and potentially the deriving types, for their `override`s)","Url":"https://github.com/dotnet/standard/issues/1178","RelatedDescription":"Open issue \"Consider asymmetric key import/export API for NS2.1\" (#1178)"},{"Id":"439822079","IsPullRequest":true,"CreatedAt":"2019-05-03T16:58:36","Actor":"mmitche","Number":"1177","RawContent":null,"Title":"Move to Azure DevOps for public CI","State":"closed","Body":"","Url":"https://github.com/dotnet/standard/pull/1177","RelatedDescription":"Closed or merged PR \"Move to Azure DevOps for public CI\" (#1177)"},{"Id":"439780558","IsPullRequest":false,"CreatedAt":"2019-05-02T23:09:49","Actor":"yangsong2828","Number":"1174","RawContent":null,"Title":"Support on System.Web.HttpRequest APIs","State":"closed","Body":"System.Web.HttpRequest APIs are not supported in .net standard. So I take the alternative is to use what's in Microsoft.AspNetCore.Http.Abstractions. But inside it, it doesn't have APIs such as \"Brower\", \"UserAgent\" etc. So what's the reason they are not supported?","Url":"https://github.com/dotnet/standard/issues/1174","RelatedDescription":"Closed issue \"Support on System.Web.HttpRequest APIs\" (#1174)"},{"Id":"439815886","IsPullRequest":true,"CreatedAt":"2019-05-02T22:31:53","Actor":"terrajobst","Number":"1176","RawContent":null,"Title":"Prevent non-framework code from extending BaseNumberConverter","State":"open","Body":"This fixes #1171.\r\n\r\nPlease note that this is technically an API breaking change (we shipped `BaseNumberConverter` in .NET Standard 2.0 with a protected constructor, which was mistake). But there is no way to derive and instantiate this class. An exception will get thrown if you try to instantiate the derived class. \r\n\r\nFor more details, see https://github.com/dotnet/corefx/pull/37278.\r\n\r\n/cc @ericstj ","Url":"https://github.com/dotnet/standard/pull/1176","RelatedDescription":"Open PR \"Prevent non-framework code from extending BaseNumberConverter\" (#1176)"},{"Id":"439794677","IsPullRequest":true,"CreatedAt":"2019-05-02T21:23:04","Actor":"terrajobst","Number":"1175","RawContent":null,"Title":"Add bulk operations to Collection<T>","State":"open","Body":"These APIs were [recently merged](https://github.com/dotnet/corefx/pull/35772) into CoreFx.\r\n\r\nThis fixes #1091.","Url":"https://github.com/dotnet/standard/pull/1175","RelatedDescription":"Open PR \"Add bulk operations to Collection<T>\" (#1175)"},{"Id":"439351218","IsPullRequest":true,"CreatedAt":"2019-05-01T22:24:28","Actor":"wtgodbe","Number":"1173","RawContent":null,"Title":"Update to the 3.0 SDK","State":"open","Body":"CC @ViktorHofer @ericstj ","Url":"https://github.com/dotnet/standard/pull/1173","RelatedDescription":"Open PR \"Update to the 3.0 SDK\" (#1173)"},{"Id":"439143422","IsPullRequest":true,"CreatedAt":"2019-05-01T12:03:40","Actor":"dotnet-maestro[bot]","Number":"1172","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190430.6\r\n- **Date Produced**: 4/30/2019 10:17 PM\r\n- **Commit**: ac8d88df02d246d3147338fcfb03b1b93dc84b53\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19230.6\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19230.6\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19230.6\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19230.6\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19230.6\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190501.6\r\n- **Date Produced**: 5/2/2019 7:15 AM\r\n- **Commit**: ea9b2530a1559dd6426730aba52fca1924db2b65\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19251.6\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19251.6\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19251.6\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19251.6\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19251.6\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190502.2\r\n- **Date Produced**: 5/2/2019 7:00 PM\r\n- **Commit**: ed63a7faf2d119829dd971be91bb46b6ebaa1dd2\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19252.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19252.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19252.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19252.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19252.2\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190503.8\r\n- **Date Produced**: 5/4/2019 2:00 AM\r\n- **Commit**: 4cacf7aa7b2cd8bdd042e721e6ad73d809dd5678\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19253.8\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19253.8\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19253.8\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19253.8\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19253.8\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190504.1\r\n- **Date Produced**: 5/4/2019 12:58 PM\r\n- **Commit**: 1b8589bbf53b9a5e819460798eff59830f39a3be\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19254.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19254.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19254.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19254.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19254.1\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190505.2\r\n- **Date Produced**: 5/5/2019 2:25 PM\r\n- **Commit**: 6a34948f7bdbc3ceb2fb16441b49f7748a462646\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19255.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19255.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19255.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19255.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19255.2\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190506.1\r\n- **Date Produced**: 5/6/2019 5:27 PM\r\n- **Commit**: 917ed3ac79350e4072c724deb48404ee7d76ebef\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19256.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19256.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19256.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19256.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19256.1\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190506.4\r\n- **Date Produced**: 5/6/2019 9:02 PM\r\n- **Commit**: fe003f91e82195c5657c79ffa8d2831c9f07c9dc\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19256.4\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19256.4\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19256.4\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19256.4\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19256.4\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1172","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/arcade\" (#1172)"},{"Id":"438892784","IsPullRequest":false,"CreatedAt":"2019-04-30T17:32:25","Actor":"ericstj","Number":"1171","RawContent":null,"Title":"BaseNumberConverter should be effectively sealed","State":"open","Body":"See https://github.com/dotnet/corefx/pull/37278\r\n\r\nBaseNumberConverter shouldn't be derivable.  On desktop it's a compile error.  Since netstandard.dll doesn't include internal members it permits compile, but fails at runtime for most frameworks since internal abstract members are not overridden.\r\n\r\n/cc @Anipik ","Url":"https://github.com/dotnet/standard/issues/1171","RelatedDescription":"Open issue \"BaseNumberConverter should be effectively sealed\" (#1171)"},{"Id":"438281734","IsPullRequest":true,"CreatedAt":"2019-04-30T12:14:14","Actor":"dotnet-maestro[bot]","Number":"1170","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190426.3\r\n- **Date Produced**: 4/26/2019 5:53 PM\r\n- **Commit**: 7bec23ce3da545d97f53f99abce457a2e252aa58\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19226.3\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19226.3\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19226.3\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19226.3\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19226.3\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190429.8\r\n- **Date Produced**: 4/30/2019 5:30 AM\r\n- **Commit**: a7a250e9c13147134543c35fef2fb81f19592edf\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19229.8\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19229.8\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19229.8\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19229.8\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19229.8\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1170","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1170)"},{"Id":"437640571","IsPullRequest":true,"CreatedAt":"2019-04-26T12:09:00","Actor":"dotnet-maestro[bot]","Number":"1169","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190425.5\r\n- **Date Produced**: 4/25/2019 6:25 PM\r\n- **Commit**: d37270268a65592cae630f1b979b70f74d4614dd\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19225.5\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19225.5\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19225.5\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19225.5\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19225.5\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1169","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1169)"},{"Id":"437162539","IsPullRequest":true,"CreatedAt":"2019-04-25T12:14:10","Actor":"dotnet-maestro[bot]","Number":"1168","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190424.9\r\n- **Date Produced**: 4/25/2019 12:59 AM\r\n- **Commit**: e02c88fca482f1141a9bb310c97be20b0ebd0465\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19224.9\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19224.9\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19224.9\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19224.9\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19224.9\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1168","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1168)"},{"Id":"436223894","IsPullRequest":false,"CreatedAt":"2019-04-25T05:53:17","Actor":"ststeiger","Number":"1166","RawContent":null,"Title":"Referenced NetStandard-project does not get local-copied in .NET Core application ","State":"closed","Body":"I've created a project called \r\n`System.ServiceProcess`\r\nas netstandard 2.0 library. \r\n\r\nI've referenced project `System.ServiceProcess` in project `LdapService`. \r\nThe two projects are in the same solution. \r\n\r\nLdapService references project `System.ServiceProcess`. \r\nLdapService also references project `IniParser`. \r\nIniParser is a netstandard 2.0 library. \r\n\r\nIniParser gets localcopied to LdapService. \r\nSystem.ServiceProcess does not. \r\n\r\nI added <RestoreProjectStyle>PackageReference</RestoreProjectStyle> which once helped in a .NET Framework 4.6.1 project. \r\nBut that doesn't work .\r\nI tried setting localCopy to true, also no effect. \r\n\r\nIt looks like it's wrongly identifying System.ServiceProcess as a SharedFramework-DLL, and thus ignores local-copying. \r\n\r\nBUG.\r\n\r\nVersion Information:\r\n```\r\nMicrosoft Visual Studio Community 2017 \r\nVersion 15.9.5\r\nVisualStudio.15.Release/15.9.5+28307.280\r\nNetCore 2.1\r\n```\r\n\r\nIf I rename the project to System.ServiceProcess**1**, then it works as expected.","Url":"https://github.com/dotnet/standard/issues/1166","RelatedDescription":"Closed issue \"Referenced NetStandard-project does not get local-copied in .NET Core application \" (#1166)"},{"Id":"436657831","IsPullRequest":true,"CreatedAt":"2019-04-24T12:24:23","Actor":"dotnet-maestro[bot]","Number":"1167","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190423.2\r\n- **Date Produced**: 4/24/2019 12:38 AM\r\n- **Commit**: e3919d0c158716ef4685c8e057cc58640af1af83\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19223.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19223.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19223.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19223.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19223.2\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1167","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1167)"},{"Id":"436150323","IsPullRequest":true,"CreatedAt":"2019-04-23T12:23:39","Actor":"dotnet-maestro[bot]","Number":"1165","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190422.2\r\n- **Date Produced**: 4/22/2019 10:01 PM\r\n- **Commit**: 851e36df83d3361e4bd8a70a2a8a89f762469f9a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19222.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19222.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19222.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19222.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19222.2\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1165","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1165)"},{"Id":"435956019","IsPullRequest":true,"CreatedAt":"2019-04-23T01:29:21","Actor":"mmitche","Number":"1164","RawContent":null,"Title":"Update branding on master","State":"closed","Body":"","Url":"https://github.com/dotnet/standard/pull/1164","RelatedDescription":"Closed or merged PR \"Update branding on master\" (#1164)"},{"Id":"435955846","IsPullRequest":true,"CreatedAt":"2019-04-23T01:29:14","Actor":"mmitche","Number":"1163","RawContent":null,"Title":"Merge from master","State":"closed","Body":"","Url":"https://github.com/dotnet/standard/pull/1163","RelatedDescription":"Closed or merged PR \"Merge from master\" (#1163)"},{"Id":"435913700","IsPullRequest":false,"CreatedAt":"2019-04-22T22:26:07","Actor":"CalvinFengDatacom","Number":"1162","RawContent":null,"Title":"Multiple assemblies with equivalent identity have been imported","State":"closed","Body":"Hi Guys,\r\n\r\nI have a wired issue with my .Net project after I push my changes to remote repository in DevOps.\r\n\r\nThe situation is, we have a .Net project was in .Net framework in version 4.6, then because of other dependencies, we need to upgrade the .Net framework to 4.6.2. It built successfully locally, but it built failed in the build pipeline of DevOps.\r\n\r\nThe error message is: \r\n\r\n- CSC(0,0): Error CS1703: Multiple assemblies with equivalent identity have been imported: 'D:\\a\\1\\s\\DNZ.Mocabots.AIA\\packages\\System.Runtime.Serialization.Primitives.4.1.1\\lib\\net46\\System.Runtime.Serialization.Primitives.dll' and 'C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.2\\Facades\\System.Runtime.Serialization.Primitives.dll'. Remove one of the duplicate references.\r\n- CSC(0,0): Error CS1703: Multiple assemblies with equivalent identity have been imported: 'D:\\a\\1\\s\\DNZ.Mocabots.AIA\\packages\\System.Runtime.InteropServices.4.1.0\\lib\\net462\\System.Runtime.InteropServices.dll' and 'C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.2\\Facades\\System.Runtime.InteropServices.dll'. Remove one of the duplicate references.\r\n- CSC(0,0): Error CS1703: Multiple assemblies with equivalent identity have been imported: 'D:\\a\\1\\s\\DNZ.Mocabots.AIA\\packages\\System.Runtime.Extensions.4.1.0\\lib\\net462\\System.Runtime.Extensions.dll' and 'C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.2\\Facades\\System.Runtime.Extensions.dll'. Remove one of the duplicate references.\r\n- CSC(0,0): Error CS1703: Multiple assemblies with equivalent identity have been imported: 'D:\\a\\1\\s\\DNZ.Mocabots.AIA\\packages\\System.Runtime.4.1.0\\lib\\net462\\System.Runtime.dll' and 'C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.2\\Facades\\System.Runtime.dll'. Remove one of the duplicate references.\r\n- CSC(0,0): Error CS1703: Multiple assemblies with equivalent identity have been imported: 'D:\\a\\1\\s\\DNZ.Mocabots.AIA\\packages\\System.IO.4.1.0\\lib\\net462\\System.IO.dll' and 'C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.2\\Facades\\System.IO.dll'. Remove one of the duplicate references.\r\n- Process 'msbuild.exe' exited with code '1'.\r\n\r\nI can see there are lots of suggestions of removing one of the conflict file manually, however it doesn't work for me. \r\n\r\n_**Note again, we are using .Net Standard F/W, not .Net Core.**\r\nIt was in 4.6 and now it's in 4.6.2._\r\n\r\nLooking forward from your ideas, thanks","Url":"https://github.com/dotnet/standard/issues/1162","RelatedDescription":"Closed issue \"Multiple assemblies with equivalent identity have been imported\" (#1162)"},{"Id":"435451508","IsPullRequest":true,"CreatedAt":"2019-04-21T18:54:16","Actor":"terrajobst","Number":"1160","RawContent":null,"Title":"Add EnumeratorCancellationAttribute","State":"closed","Body":"This aligns .NET Standard with the [PR made in CoreFx](https://github.com/dotnet/corefx/pull/37064). For more details, see the [API discussion](https://github.com/dotnet/corefx/issues/37012).\r\n\r\nThis is a last minute firedrill for preview 5 (which will be used for demoing functionality during Build), which means I'll have to merge this by tomorrow morning. If there are any concerns, please let me know ASAP or we'll simply back it out after preview 5.","Url":"https://github.com/dotnet/standard/pull/1160","RelatedDescription":"Closed or merged PR \"Add EnumeratorCancellationAttribute\" (#1160)"},{"Id":"435454723","IsPullRequest":true,"CreatedAt":"2019-04-20T23:47:10","Actor":"terrajobst","Number":"1161","RawContent":null,"Title":"Add tool to automate generation of .NET Core baseline","State":"closed","Body":"This adds a batch file that generates the API surface of .NET Core that matters to .NET Standard. This script updates the contents of `src\\platforms\\netcoreapp`, stripped down to just the contents that matter for .NET Standard. It's meant to be manually diff'ed against the .NET Standard reference assemblies to propose API changes.\r\n\r\nWe should move the `GenNetStandard` tool to our engineering tools (Arcade) so that they are available to people that don't have access to the internal share. However, since the process is currently manual and only done by me, that seems acceptable. At least this this makes it reproducable by other people, which is better to what we have today.\r\n\r\nThe script assume that the caller has an enlistment for dotnet/corefx in a folder that is parallel to dotnet/standard and that is named corefx. In practice, this should hold for most people that work on this.\r\n\r\n/cc @stephentoub @wtgodbe ","Url":"https://github.com/dotnet/standard/pull/1161","RelatedDescription":"Closed or merged PR \"Add tool to automate generation of .NET Core baseline\" (#1161)"},{"Id":"434735356","IsPullRequest":true,"CreatedAt":"2019-04-20T12:05:46","Actor":"dotnet-maestro[bot]","Number":"1157","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190418.1\r\n- **Date Produced**: 4/18/2019 8:10 AM\r\n- **Commit**: 46718d98c0fd03690a6a8c83da692a4a85a17902\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19218.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19218.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19218.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19218.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19218.1\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190418.4\r\n- **Date Produced**: 4/18/2019 10:50 PM\r\n- **Commit**: 1d4c87ff798d7de521128e6c3d890055c2401e80\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19218.4\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19218.4\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19218.4\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19218.4\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19218.4\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190418.7\r\n- **Date Produced**: 4/19/2019 12:41 AM\r\n- **Commit**: 5e7ce5b394f3477bb0a485a4b761b7742e95be37\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19218.7\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19218.7\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19218.7\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19218.7\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19218.7\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1157","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1157)"},{"Id":"434706475","IsPullRequest":false,"CreatedAt":"2019-04-19T23:24:03","Actor":"IKende","Number":"1156","RawContent":null,"Title":"NETStandard 2.0 GZipStream write date error in .Net Framework 4.6.1","State":"closed","Body":"code\r\n``` csharp\r\n public class GzipTest\r\n    {\r\n        public static byte[] Create()\r\n        {\r\n            using (System.IO.MemoryStream memory = new MemoryStream())\r\n            {\r\n                using (GZipStream gstream = new GZipStream(memory, CompressionMode.Compress))\r\n                {\r\n                    for (int i = 0; i < 100; i++)\r\n                    {\r\n                        byte[] data = System.Text.Encoding.UTF8.GetBytes(\"abcdefghkoksdsafsdfasdfksajfskdjfskdfjslfasdfsdfsdfalsdfsd\");\r\n                        gstream.Write(data, 0, data.Length);\r\n                    }\r\n                    gstream.Flush();\r\n                    return memory.ToArray();\r\n                }\r\n            }\r\n        }\r\n    }\r\n```\r\nusing .Net Framework 4.61 invoke this function ，debugging output information:\r\n```\r\nmemory.Length\r\n10\r\nmemory.ToArray()\r\n{byte[10]}\r\n    [0]: 31\r\n    [1]: 139\r\n    [2]: 8\r\n    [3]: 0\r\n    [4]: 0\r\n    [5]: 0\r\n    [6]: 0\r\n    [7]: 0\r\n    [8]: 4\r\n    [9]: 0\r\n```","Url":"https://github.com/dotnet/standard/issues/1156","RelatedDescription":"Closed issue \"NETStandard 2.0 GZipStream write date error in .Net Framework 4.6.1\" (#1156)"},{"Id":"434958748","IsPullRequest":true,"CreatedAt":"2019-04-19T19:46:08","Actor":"terrajobst","Number":"1158","RawContent":null,"Title":"Add Overrides","State":"closed","Body":"This doesn't change API surface but simply records the overrides made in .NET Core to minimize the diff.","Url":"https://github.com/dotnet/standard/pull/1158","RelatedDescription":"Closed or merged PR \"Add Overrides\" (#1158)"},{"Id":"434539992","IsPullRequest":true,"CreatedAt":"2019-04-19T17:24:44","Actor":"terrajobst","Number":"1152","RawContent":null,"Title":"Implement IEquatable on Memory<T>","State":"closed","Body":"Based [on feedback](https://github.com/dotnet/standard/pull/909#discussion_r226390377) from @marek-safar.\r\n\r\nAlso see:\r\n* https://github.com/dotnet/corefx/issues/32905\r\n* https://github.com/dotnet/coreclr/pull/23586","Url":"https://github.com/dotnet/standard/pull/1152","RelatedDescription":"Closed or merged PR \"Implement IEquatable on Memory<T>\" (#1152)"},{"Id":"434545210","IsPullRequest":true,"CreatedAt":"2019-04-19T17:24:31","Actor":"terrajobst","Number":"1154","RawContent":null,"Title":"Fix Range.GetOffsetAndLength()","State":"closed","Body":"We ended up [agreeing](https://github.com/dotnet/corefx/issues/35508) that it's best to use tuples in cases like this.\r\n\r\n***Note**: This isn't a breaking change in .NET Standard, as `Range` hasn't shipped yet.*","Url":"https://github.com/dotnet/standard/pull/1154","RelatedDescription":"Closed or merged PR \"Fix Range.GetOffsetAndLength()\" (#1154)"},{"Id":"434544916","IsPullRequest":true,"CreatedAt":"2019-04-19T17:24:17","Actor":"terrajobst","Number":"1153","RawContent":null,"Title":"Respond to change in .NET Core to simplify Index and Range","State":"closed","Body":"We had recent [design change](https://github.com/dotnet/corefx/issues/35972) that simplifies `Index` and `Range`: instead of having to provide indexers that take `Index` and `Range`, the compiler [can lower](https://github.com/dotnet/csharplang/blob/master/proposals/index-range-changes.md) `Index` automatically and allows indexing via `Range` to be expressed via a method called `Slice`. Both make the feature more useful for interfaces where adding members isn't easily possible.\r\n\r\n***Note**: This isn't a breaking change in .NET Standard, as `Index` and `Range` haven't shipped yet.*","Url":"https://github.com/dotnet/standard/pull/1153","RelatedDescription":"Closed or merged PR \"Respond to change in .NET Core to simplify Index and Range\" (#1153)"},{"Id":"434963712","IsPullRequest":true,"CreatedAt":"2019-04-18T22:03:07","Actor":"terrajobst","Number":"1159","RawContent":null,"Title":"Remove finalizers","State":"closed","Body":"My understanding from earlier discussions with @jkotas and @marek-safar was that we should treat finalizers as an implementation detail of the platform that implements .NET Standard. Thus, I've changed my diffing to generally exclude all finalizers. This PR updates the reference assembly to match it.\r\n\r\n@jkotas / @marek-safar: I assume you're OK with that?","Url":"https://github.com/dotnet/standard/pull/1159","RelatedDescription":"Closed or merged PR \"Remove finalizers\" (#1159)"},{"Id":"434538136","IsPullRequest":true,"CreatedAt":"2019-04-18T01:38:21","Actor":"terrajobst","Number":"1151","RawContent":null,"Title":"Reorder members","State":"closed","Body":"***No API change***\r\n\r\nThis doesn't change the API surface but only reorders some members to make diffing between .NET Core and .NET Standard easier. For some reason, when we created .NET Standard, the members weren't consistently sorted. Since I don't trust myself, I've diffed the produced binary against the build produced by master to ensure no API surface changes were introduced.","Url":"https://github.com/dotnet/standard/pull/1151","RelatedDescription":"Closed or merged PR \"Reorder members\" (#1151)"},{"Id":"434245360","IsPullRequest":true,"CreatedAt":"2019-04-17T12:23:55","Actor":"dotnet-maestro[bot]","Number":"1150","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190417.1\r\n- **Date Produced**: 4/17/2019 7:32 AM\r\n- **Commit**: 4e21d52dabbb9f5705a90f097acb1465a0354c0d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19217.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19217.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19217.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19217.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19217.1\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1150","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1150)"},{"Id":"434067891","IsPullRequest":false,"CreatedAt":"2019-04-17T02:50:12","Actor":"yyjdelete","Number":"1149","RawContent":null,"Title":"Transitive dependency(PackageReference/ProjectReference)not working when app and libs has different targetFramework","State":"open","Body":"Also report as dotnet/sdk#3103, dotnet/core#2571.\r\n\r\nReference transitive not working when app and lib has different targetFramework, and the lib use an transitive dependency from special targetFramework of an multi-targetFramework PackageReference/ProjectReference\r\n\r\nThat mainly affect reference any libraries which target single `netstandard2.0` and reference other multi-targetFramework libraries , as it give no warn/error at build time.\r\n\r\n### Step:\r\n\r\nTested with dotnet-sdk : 3.0.100-preview3-010431, 2.1.504 and some other version\r\n\r\nRun ConsoleApp5 in https://github.com/yyjdelete/test_dotnet_indirect_dependency\r\nAnd see an FileNotFoundException for `System.Data.SqlClient, Version=4.5.0.0`(Ignore the MissingMethodException, as it's expected https://github.com/dotnet/standard/issues/1052#issuecomment-457399181). The same if replace `ClassLibrary1` and `ClassLibrary2` with packed `.nupkg`\r\n\r\nProject struct:\r\n```\r\nConsoleApp5(net472)\r\n|--ClassLibrary1(netstandard2.0)->use `System.Data.SqlClient` directly or exported as public api of `ClassLibrary2`\r\n---|--ClassLibrary2(netstandard2.0;net472)\r\n------|--System.Data.SqlClient(when netstandard2.0)\r\n```\r\n\r\n### Expected:\r\n```\r\nConsoleApp5(net472)\r\n|--ClassLibrary1(netstandard2.0)\r\n---|--System.Data.SqlClient(net472)\r\n---|--ClassLibrary2(net472)\r\n```\r\n1. The `System.Data.SqlClient` should be include in the output bins of `ConsoleApp5`, if used by `ClassLibrary1(netstandard2.0)`.\r\nOr at least give an warning, to make people know which Reference must be added explicitly. It's almost impossibe to find all of them by hand in an project with deep reference transitive(can also be something in nupkg).\r\n\r\n2. VisualStudio should show the same result of project struct as the output does, and `System.Data.SqlClient` should be include again with `ClassLibrary1(netstandard2.0)` if it's removed with `ClassLibrary2(net472)`\r\nI already know it's reasonable to reference `ClassLibrary2` with `net472`(runtime) instead of `netstandard2.0`, so ignore the `MissingMethodException`.\r\n\r\n### Actual:\r\n```\r\nConsoleApp5(net472)\r\n|--ClassLibrary1(netstandard2.0)\r\n---|--ClassLibrary2(net472)\r\n\r\n***System.Data.SqlClient is missing\r\n```\r\n1. The `System.Data.SqlClient` is missing from the output, even it's used by `ClassLibrary1(netstandard2.0)`, and get an `FileNotFoundException` when execute.\r\n2. VisualStudio show that ConsoleApp5(net472) use ClassLibrary2(net472), while the output use ClassLibrary2(netstandard2.0).\r\n![image](https://user-images.githubusercontent.com/1819074/55792414-24a72f80-5af3-11e9-9a58-e7bd08696b90.png)","Url":"https://github.com/dotnet/standard/issues/1149","RelatedDescription":"Open issue \"Transitive dependency(PackageReference/ProjectReference)not working when app and libs has different targetFramework\" (#1149)"},{"Id":"433742428","IsPullRequest":true,"CreatedAt":"2019-04-16T12:14:06","Actor":"dotnet-maestro[bot]","Number":"1148","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190415.12\r\n- **Date Produced**: 4/16/2019 12:12 AM\r\n- **Commit**: 517bf671ea342965d007aa48f5bfd4926e58d582\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19215.12\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19215.12\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19215.12\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19215.12\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19215.12\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1148","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1148)"}],"ResultType":"GitHubIssue"},"CoreFx-Issues":{"Issues":[{"Id":"441032757","IsPullRequest":true,"CreatedAt":"2019-05-07T05:22:23","Actor":"dotnet-maestro-bot","Number":"37484","RawContent":null,"Title":"Update ProjectNTfs, ProjectNTfsTestILC to beta-27707-00, beta-27707-00, respectively (master)","State":"open","Body":"/cc @dotnet/maestro-reviewers-core","Url":"https://github.com/dotnet/corefx/pull/37484","RelatedDescription":"Open PR \"Update ProjectNTfs, ProjectNTfsTestILC to beta-27707-00, beta-27707-00, respectively (master)\" (#37484)"},{"Id":"440884836","IsPullRequest":true,"CreatedAt":"2019-05-07T04:27:08","Actor":"Anipik","Number":"37479","RawContent":null,"Title":"Making ctors internal for types with internal abstract methods","State":"closed","Body":"","Url":"https://github.com/dotnet/corefx/pull/37479","RelatedDescription":"Closed or merged PR \"Making ctors internal for types with internal abstract methods\" (#37479)"},{"Id":"440830664","IsPullRequest":true,"CreatedAt":"2019-05-07T02:58:04","Actor":"AfsanehR","Number":"37475","RawContent":null,"Title":"Update area owners ","State":"closed","Body":"Update area owners for System.Data.SqlClient &System.Data","Url":"https://github.com/dotnet/corefx/pull/37475","RelatedDescription":"Closed or merged PR \"Update area owners \" (#37475)"},{"Id":"440951991","IsPullRequest":false,"CreatedAt":"2019-05-06T23:46:28","Actor":"0x53A","Number":"37483","RawContent":null,"Title":"Consider changing the CodeAccessPermission.PermitOnly stub to NoOp","State":"open","Body":"``PermitOnly`` currently throws a PNSE. We use a third party WinForms Control which calls this.\r\n\r\nCould this instead be stubbed to be a NoOp?\r\n\r\nThis would help us get one step further in the .net core 3 port.","Url":"https://github.com/dotnet/corefx/issues/37483","RelatedDescription":"Open issue \"Consider changing the CodeAccessPermission.PermitOnly stub to NoOp\" (#37483)"},{"Id":"440935467","IsPullRequest":true,"CreatedAt":"2019-05-06T22:50:06","Actor":"ericstj","Number":"37482","RawContent":null,"Title":"Don't ignore AsyncMethodBuilderAttribute for GenAPI/APICompat","State":"open","Body":"Fixes #35602","Url":"https://github.com/dotnet/corefx/pull/37482","RelatedDescription":"Open PR \"Don't ignore AsyncMethodBuilderAttribute for GenAPI/APICompat\" (#37482)"},{"Id":"440933362","IsPullRequest":true,"CreatedAt":"2019-05-06T22:42:18","Actor":"ericstj","Number":"37481","RawContent":null,"Title":"Remove suppression for EventRegistrationToken now that it is no longer duplicated","State":"open","Body":"Fixes #35792","Url":"https://github.com/dotnet/corefx/pull/37481","RelatedDescription":"Open PR \"Remove suppression for EventRegistrationToken now that it is no longer duplicated\" (#37481)"},{"Id":"440914445","IsPullRequest":true,"CreatedAt":"2019-05-06T21:51:02","Actor":"buyaa-n","Number":"37480","RawContent":null,"Title":"Check uncompressed size before decompressing a zip file. Fixes 33058","State":"open","Body":"","Url":"https://github.com/dotnet/corefx/pull/37480","RelatedDescription":"Open PR \"Check uncompressed size before decompressing a zip file. Fixes 33058\" (#37480)"},{"Id":"440865982","IsPullRequest":true,"CreatedAt":"2019-05-06T21:46:11","Actor":"joperezr","Number":"37477","RawContent":null,"Title":"Fix VS Configurations for all projects in corefx","State":"closed","Body":"@ericstj @stephentoub \r\n\r\nThis is just the output of running `.dotnet\\dotnet msbuild build.proj /t:UpdateVSConfigurations` from the root of corefx. A bunch of our projects and solutions where not up-to-date with respect to their Configurations.props, so this is fixing that so projects are easily opened with VS.","Url":"https://github.com/dotnet/corefx/pull/37477","RelatedDescription":"Closed or merged PR \"Fix VS Configurations for all projects in corefx\" (#37477)"},{"Id":"440718021","IsPullRequest":true,"CreatedAt":"2019-05-06T20:56:39","Actor":"tannergooding","Number":"37473","RawContent":null,"Title":"Regenerating the System.Numerics.Vectors ref assembly to pick up the changes made in S.P.Corelib","State":"closed","Body":"This resolves https://github.com/dotnet/corefx/issues/30968\r\nCC. @GrabYourPitchforks ","Url":"https://github.com/dotnet/corefx/pull/37473","RelatedDescription":"Closed or merged PR \"Regenerating the System.Numerics.Vectors ref assembly to pick up the changes made in S.P.Corelib\" (#37473)"},{"Id":"440872793","IsPullRequest":true,"CreatedAt":"2019-05-06T20:54:04","Actor":"rabryst","Number":"37478","RawContent":null,"Title":"Update SerializerProgrammingModel.md","State":"closed","Body":"\"Supprt\" typo.","Url":"https://github.com/dotnet/corefx/pull/37478","RelatedDescription":"Closed or merged PR \"Update SerializerProgrammingModel.md\" (#37478)"},{"Id":"440837539","IsPullRequest":true,"CreatedAt":"2019-05-06T18:55:50","Actor":"jkoritzinsky","Number":"37476","RawContent":null,"Title":"Propagate System.Runtime.WindowsRuntime package build targets though transitive references.","State":"open","Body":"Fixes #35034 ","Url":"https://github.com/dotnet/corefx/pull/37476","RelatedDescription":"Open PR \"Propagate System.Runtime.WindowsRuntime package build targets though transitive references.\" (#37476)"},{"Id":"440814035","IsPullRequest":true,"CreatedAt":"2019-05-06T18:25:15","Actor":"MattGal","Number":"37474","RawContent":null,"Title":"Update Ubuntu 19.04 Docker Image","State":"closed","Body":"Addresses https://github.com/dotnet/corefx/issues/37321","Url":"https://github.com/dotnet/corefx/pull/37474","RelatedDescription":"Closed or merged PR \"Update Ubuntu 19.04 Docker Image\" (#37474)"},{"Id":"440666386","IsPullRequest":true,"CreatedAt":"2019-05-06T17:40:01","Actor":"dotnet-maestro[bot]","Number":"37463","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190505.2\r\n- **Date Produced**: 5/5/2019 2:25 PM\r\n- **Commit**: 6a34948f7bdbc3ceb2fb16441b49f7748a462646\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions** -> 2.4.0-beta.19255.2\r\n  - **Microsoft.DotNet.XUnitConsoleRunner** -> 2.5.1-beta.19255.2\r\n  - **Microsoft.DotNet.VersionTools.Tasks** -> 1.0.0-beta.19255.2\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19255.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19255.2\r\n  - **Microsoft.DotNet.Build.Tasks.Configuration** -> 1.0.0-beta.19255.2\r\n  - **Microsoft.DotNet.Build.Tasks.Feed** -> 2.2.0-beta.19255.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19255.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19255.2\r\n  - **Microsoft.DotNet.CoreFxTesting** -> 1.0.0-beta.19255.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19255.2\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19255.2\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19255.2\r\n  - **Microsoft.DotNet.RemoteExecutor** -> 1.0.0-beta.19255.2\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/37463","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#37463)"},{"Id":"440687804","IsPullRequest":true,"CreatedAt":"2019-05-06T15:46:20","Actor":"dotnet-maestro[bot]","Number":"37469","RawContent":null,"Title":"[master] Update dependencies from dotnet/coreclr","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/coreclr\r\n- **Build**: 20190505.72\r\n- **Date Produced**: 5/6/2019 12:58 AM\r\n- **Commit**: 08136a667d1a30c242f40731b3b0b299e4167220\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk.IL** -> 3.0.0-preview6-27705-72\r\n  - **Microsoft.NETCore.ILAsm** -> 3.0.0-preview6-27705-72\r\n  - **Microsoft.NETCore.Runtime.CoreCLR** -> 3.0.0-preview6-27705-72\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/37469","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/coreclr\" (#37469)"},{"Id":"440692290","IsPullRequest":true,"CreatedAt":"2019-05-06T14:31:28","Actor":"dotnet-maestro[bot]","Number":"37470","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-optimization","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-optimization\r\n- **Build**: 20190506.1\r\n- **Date Produced**: 5/6/2019 11:26 AM\r\n- **Commit**: 1c49409dc0cd36d049721c39b4f4013562a9625b\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **optimization.windows_nt-x64.IBC.CoreFx** -> 99.99.99-master-20190506.1\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/37470","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dnceng/internal/dotnet-optimization\" (#37470)"},{"Id":"440711834","IsPullRequest":true,"CreatedAt":"2019-05-06T13:54:36","Actor":"Dotnet-GitSync-Bot","Number":"37472","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"open","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @krwq","Url":"https://github.com/dotnet/corefx/pull/37472","RelatedDescription":"Open PR \"Mirror changes from dotnet/coreclr\" (#37472)"},{"Id":"440706954","IsPullRequest":false,"CreatedAt":"2019-05-06T13:44:00","Actor":"pavelovcharov","Number":"37471","RawContent":null,"Title":"Build is broken in version 3.0.100-preview6-011767","State":"open","Body":"I've a simple app that references the following packages:\r\n```\r\n    <PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"16.0.1\" />\r\n    <PackageReference Include=\"NUnit\" Version=\"3.11.0\" />\r\n    <PackageReference Include=\"NUnit3TestAdapter\" Version=\"3.13.0\" />\r\n```\r\nhttps://github.com/pavelovcharov/netcore3_buildbrokenpreview6\r\n\r\nThe project is successfully built with .NET Core 3.0.100-preview4-011223. However, after upgrading to the version 3.0.100-preview6-011767, the build fails with an error: \r\n```\r\nerror NU1102: Unable to find package Microsoft.NETCore.Platforms with version (>= 3.0.0-preview6.19255.4)\r\n```\r\n\r\n**dotnet --info:**\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview6-011767\r\n Commit:    ce3e2ee3c1\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview6-011767\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview6-27705-15\r\n  Commit:  19521cec63\r\n\r\n.NET Core SDKs installed:\r\n  2.1.202 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.505 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview6-011767 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.2 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview6-19255-03 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview6-27705-15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview6-27705-15 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n","Url":"https://github.com/dotnet/corefx/issues/37471","RelatedDescription":"Open issue \"Build is broken in version 3.0.100-preview6-011767\" (#37471)"},{"Id":"440679270","IsPullRequest":true,"CreatedAt":"2019-05-06T13:43:31","Actor":"dotnet-maestro[bot]","Number":"37466","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190506.1\r\n- **Date Produced**: 5/6/2019 9:38 AM\r\n- **Commit**: bd278630dd08914ef521e62658afb69845c5b93a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **runtime.native.System.IO.Ports** -> 4.6.0-preview6.19256.1\r\n  - **Microsoft.NETCore.Platforms** -> 3.0.0-preview6.19256.1\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/37466","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#37466)"},{"Id":"440680231","IsPullRequest":false,"CreatedAt":"2019-05-06T12:40:26","Actor":"pragmaticadam","Number":"37467","RawContent":null,"Title":"ProcessInfo Linux/Windows incompatibility","State":"open","Body":"Hi,\r\n\r\nI'm trying to run same process as a child of current process. Showed below code works just fine under windows, but fails in Linux with  error\r\n\r\nNo executable found matching command \"dotnet-MyDll.dll\"\r\n\r\n```\r\nvar processInfo = new ProcessStartInfo\r\n            {\r\n                FileName = \"dotnet\",\r\n                Arguments = \"MyDll.dll \" + id.ToString()\r\n            };\r\n\r\n            Console.WriteLine(\"Starting child process...\");\r\n            var process = Process.Start(processInfo);\r\n            return process;\r\n\r\n```\r\n\r\nIve also tried\r\n         `       FileName = \"dotnet MyDll.dll\"+ id.ToString(),`\r\nbut it ends up with different error \r\nUnhandled Exception: System.ComponentModel.Win32Exception: No such file or directory\r\n\r\nI've also tried \r\n```\r\n\r\n            var parentP = Process.GetCurrentProcess();\r\n            string fullPath = parentP.MainModule.FileName;\r\n            var command = fullPath+\" \"+Assembly.GetEntryAssembly().Location+\" \"+ id.ToString();\r\n            Console.WriteLine(\"Command = \"+command);\r\n            var processInfo = new ProcessStartInfo\r\n            {\r\n                FileName = command\r\n            };\r\n            var process = Process.Start(processInfo);\r\n```\r\nStill \r\nUnhandled Exception: System.ComponentModel.Win32Exception: No such file or directory\r\n\r\nwhat is proper way of running currently running dll again under Linux with dotnet core","Url":"https://github.com/dotnet/corefx/issues/37467","RelatedDescription":"Open issue \"ProcessInfo Linux/Windows incompatibility\" (#37467)"},{"Id":"440677562","IsPullRequest":false,"CreatedAt":"2019-05-06T12:33:09","Actor":"sergii-kryzh","Number":"37465","RawContent":null,"Title":"SqlBulkCopy throws SqlNullValueException due to special SqlDataReader type tweak which does not check for NULL.","State":"open","Body":"SqlBulkCopy throws SqlNullValueException due to special SqlDataReader type tweak which does not check for NULL.\r\n\r\nSample application: https://github.com/sergii-kryzh/netCore-SqlBulkCopy-Bug\r\nCopy is attached: [netCore-SqlBulkCopy-Bug.zip](https://github.com/dotnet/corefx/files/3147838/netCore-SqlBulkCopy-Bug.zip)\r\n\r\nWhen source cell is SqlDouble and cell is NULL then SqlDouble.Value will throw SqlNullValueException.\r\nSource code (netCore): https://github.com/dotnet/corefx/blob/master/src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopy.cs\r\n\r\nMethod: ` private object GetValueFromSourceRow(int destRowIndex, out bool isSqlType, out bool isDataFeed, out bool isNull)`\r\nLine: `value = new SqlDecimal(_SqlDataReaderRowSource.GetSqlDouble(sourceOrdinal).Value);`\r\n\r\n\r\n","Url":"https://github.com/dotnet/corefx/issues/37465","RelatedDescription":"Open issue \"SqlBulkCopy throws SqlNullValueException due to special SqlDataReader type tweak which does not check for NULL.\" (#37465)"},{"Id":"440676938","IsPullRequest":true,"CreatedAt":"2019-05-06T12:31:34","Actor":"dotnet-maestro[bot]","Number":"37464","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190506.03\r\n- **Date Produced**: 5/6/2019 11:56 AM\r\n- **Commit**: 66f7e1a107eceab2767369588e7309747a0d71f7\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 3.0.0-preview6-27706-03\r\n  - **Microsoft.NETCore.DotNetHostPolicy** -> 3.0.0-preview6-27706-03\r\n  - **Microsoft.NETCore.DotNetHost** -> 3.0.0-preview6-27706-03\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/37464","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/core-setup\" (#37464)"},{"Id":"440662204","IsPullRequest":true,"CreatedAt":"2019-05-06T11:52:56","Actor":"tmds","Number":"37462","RawContent":null,"Title":"SmtpClient: fix Timeout for low values","State":"open","Body":"The timeout is triggered from a Timer.\r\nThere were two race conditions:\r\n- The timer event could occur before there was a connection to abort.\r\n- The connection abort performs a TcpClient.Dispose, which may not\r\nwork when there is a TcpClient.Connect occuring simultaneously.\r\n\r\nCC @stephentoub @davidsh @wfurt @karelz","Url":"https://github.com/dotnet/corefx/pull/37462","RelatedDescription":"Open PR \"SmtpClient: fix Timeout for low values\" (#37462)"},{"Id":"440543934","IsPullRequest":true,"CreatedAt":"2019-05-06T11:06:21","Actor":"dotnet-maestro-bot","Number":"37459","RawContent":null,"Title":"Update ProjectNTfs, ProjectNTfsTestILC to beta-27706-00, beta-27706-00, respectively (master)","State":"closed","Body":"/cc @dotnet/maestro-reviewers-core","Url":"https://github.com/dotnet/corefx/pull/37459","RelatedDescription":"Closed or merged PR \"Update ProjectNTfs, ProjectNTfsTestILC to beta-27706-00, beta-27706-00, respectively (master)\" (#37459)"},{"Id":"440608821","IsPullRequest":false,"CreatedAt":"2019-05-06T09:14:43","Actor":"thefringeninja","Number":"37461","RawContent":null,"Title":"SQL.OperationCancelled Returns InvalidOperationException Instead of OperationCancelledException","State":"open","Body":"https://github.com/dotnet/corefx/blob/master/src/System.Data.SqlClient/src/System/Data/SqlClient/SqlUtil.cs#L391\r\n\r\nThis is making cooperative cancellation difficult.","Url":"https://github.com/dotnet/corefx/issues/37461","RelatedDescription":"Open issue \"SQL.OperationCancelled Returns InvalidOperationException Instead of OperationCancelledException\" (#37461)"},{"Id":"440502472","IsPullRequest":true,"CreatedAt":"2019-05-06T07:58:50","Actor":"roji","Number":"37456","RawContent":null,"Title":"Switch to newer, explicit atomic API","State":"closed","Body":"Starting with clang 8, the older __sync atomic functions [produce a warning](https://reviews.llvm.org/D51084) for implicit strong memory barriers. This switches to the newer __atomic API where memory ordering is explicitly specified. Note [these GCC docs](https://gcc.gnu.org/wiki/Atomic/GCCMM#From___sync_to___atomic) recommending that __sync be replaced with __atomic, with the former considered deprecated.\r\n\r\nNote that the only usage in the corefx codebase is completely non-perf-sensitive (initialization of the /dev/random file descriptor), so sequential consistency seems appropriate.\r\n\r\nFixes #37174","Url":"https://github.com/dotnet/corefx/pull/37456","RelatedDescription":"Closed or merged PR \"Switch to newer, explicit atomic API\" (#37456)"},{"Id":"440514120","IsPullRequest":true,"CreatedAt":"2019-05-06T02:28:18","Actor":"meziantou","Number":"37458","RawContent":null,"Title":"Add FlushAsync in XDocument.SaveAsync to prevent blocking calls in Dispose","State":"closed","Body":"/fix #37457 ","Url":"https://github.com/dotnet/corefx/pull/37458","RelatedDescription":"Closed or merged PR \"Add FlushAsync in XDocument.SaveAsync to prevent blocking calls in Dispose\" (#37458)"},{"Id":"440512887","IsPullRequest":false,"CreatedAt":"2019-05-06T02:28:17","Actor":"meziantou","Number":"37457","RawContent":null,"Title":"XDocument.SaveAsync has a blocking call","State":"closed","Body":"`XDocument.SaveAsync` has a blocking call. In ASP.NET Core 3 this is not allowed (by default).\r\n\r\n````\r\nSystem.Net.Http.HttpRequestException: Error while copying content to a stream. ---> System.IO.IOException:  ---> System.InvalidOperationException: Synchronous operations are disallowed. Call WriteAsync or set AllowSynchronousIO to true.\r\n\r\nat Microsoft.AspNetCore.TestHost.ResponseStream.Write(Byte[] buffer, Int32 offset, Int32 count)\r\n   at System.Xml.XmlUtf8RawTextWriter.FlushBuffer()\r\n   at System.Xml.XmlUtf8RawTextWriter.Flush()\r\n   at System.Xml.XmlWellFormedWriter.Close()\r\n   at System.Xml.XmlWriter.Dispose(Boolean disposing)\r\n   at System.Xml.XmlAsyncCheckWriter.Dispose(Boolean disposing)\r\n   at System.Xml.XmlWriter.Dispose()\r\n   at System.Xml.Linq.XDocument.SaveAsync(Stream stream, SaveOptions options, CancellationToken cancellationToken)\r\n   at MyCode(Stream stream, XDocument document, CancellationToken cancellationToken)\r\n````\r\n\r\nI think `SaveAsync` should call `FlushAsync` before calling `Dispose` (or maybe `XmlWriter` should implement `IAsyncDisposable`).\r\n\r\n```c#\r\n        public async Task SaveAsync(Stream stream, SaveOptions options, CancellationToken cancellationToken)\r\n        {\r\n            XmlWriterSettings ws = GetXmlWriterSettings(options);\r\n\r\n            ws.Async = true;\r\n\r\n            if (_declaration != null && !string.IsNullOrEmpty(_declaration.Encoding))\r\n            {\r\n                try\r\n                {\r\n                    ws.Encoding = Encoding.GetEncoding(_declaration.Encoding);\r\n                }\r\n                catch (ArgumentException)\r\n                {\r\n                }\r\n            }\r\n\r\n            using (XmlWriter w = XmlWriter.Create(stream, ws))\r\n            {\r\n                await WriteToAsync(w, cancellationToken).ConfigureAwait(false);\r\n\r\n                // I think we should add FlushAsync here\r\n                await w.FlushAsync().ConfigureAwait(false);\r\n            }\r\n        }\r\n```\r\n","Url":"https://github.com/dotnet/corefx/issues/37457","RelatedDescription":"Closed issue \"XDocument.SaveAsync has a blocking call\" (#37457)"},{"Id":"440483834","IsPullRequest":true,"CreatedAt":"2019-05-06T00:50:38","Actor":"Dotnet-GitSync-Bot","Number":"37454","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @benaadams","Url":"https://github.com/dotnet/corefx/pull/37454","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#37454)"},{"Id":"440496867","IsPullRequest":false,"CreatedAt":"2019-05-05T22:13:54","Actor":"ViktorHofer","Number":"37455","RawContent":null,"Title":"System.Net.Http.Functional.Tests crashed with Debug.Fail","State":"open","Body":"Failed in CI on `Windows.7.Amd64.Open-x64:Debug`: https://mc.dot.net/#/user/dotnet-bot/pr~2Fdotnet~2Fcorefx~2Frefs~2Fpull~2F37454~2Fmerge/test~2Ffunctional~2Fcli~2F/20190505.14/workItem/System.Net.Http.Functional.Tests/wilogs\r\n\r\n```\r\nAssertion Failed\r\n_httpStreams.Remove failed\r\n\r\n   at System.Net.Http.Http2Connection.RemoveStream(Http2Stream http2Stream) in D:\\a\\1\\s\\src\\System.Net.Http\\src\\System\\Net\\Http\\SocketsHttpHandler\\Http2Connection.cs:line 1430\r\n   at System.Net.Http.Http2Connection.SendHeadersAsync(HttpRequestMessage request, CancellationToken cancellationToken) in D:\\a\\1\\s\\src\\System.Net.Http\\src\\System\\Net\\Http\\SocketsHttpHandler\\Http2Connection.cs:line 997\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Runtime\\CompilerServices\\AsyncMethodBuilder.cs:line 1027\r\n   at System.Net.Http.Http2Connection.SendHeadersAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at System.Net.Http.Http2Connection.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken) in D:\\a\\1\\s\\src\\System.Net.Http\\src\\System\\Net\\Http\\SocketsHttpHandler\\Http2Connection.cs:line 1356\r\n   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Runtime\\CompilerServices\\AsyncMethodBuilder.cs:line 1027\r\n   at System.Net.Http.Http2Connection.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken) in D:\\a\\1\\s\\src\\System.Net.Http\\src\\System\\Net\\Http\\SocketsHttpHandler\\HttpConnectionPool.cs:line 525\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Threading\\ExecutionContext.cs:line 172\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1.MoveNext(Thread threadPoolThread) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Runtime\\CompilerServices\\AsyncMethodBuilder.cs:line 618\r\n   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(IAsyncStateMachineBox box, Boolean allowInlining) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Threading\\Tasks\\TaskContinuation.cs:line 794\r\n   at System.Threading.Tasks.Task.RunContinuations(Object continuationObject) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Threading\\Tasks\\Task.cs:line 3335\r\n   at System.Threading.Tasks.Task`1.TrySetResult(TResult result) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Threading\\Tasks\\Future.cs:line 418\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetExistingTaskResult(TResult result) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Runtime\\CompilerServices\\AsyncMethodBuilder.cs:line 728\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetResult(TResult result) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Runtime\\CompilerServices\\AsyncMethodBuilder.cs:line 718\r\n   at System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1.SetResult(TResult result) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Runtime\\CompilerServices\\AsyncValueTaskMethodBuilder.cs:line 162\r\n   at System.Net.Http.HttpConnectionPool.GetHttp2ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken) in D:\\a\\1\\s\\src\\System.Net.Http\\src\\System\\Net\\Http\\SocketsHttpHandler\\HttpConnectionPool.cs:line 500\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Threading\\ExecutionContext.cs:line 172\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1.MoveNext(Thread threadPoolThread) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Runtime\\CompilerServices\\AsyncMethodBuilder.cs:line 618\r\n   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(IAsyncStateMachineBox box, Boolean allowInlining) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Threading\\Tasks\\TaskContinuation.cs:line 794\r\n   at System.Threading.Tasks.Task.RunContinuations(Object continuationObject) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Threading\\Tasks\\Task.cs:line 3335\r\n   at System.Threading.Tasks.Task`1.TrySetResult(TResult result) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Threading\\Tasks\\Future.cs:line 418\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetExistingTaskResult(TResult result) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Runtime\\CompilerServices\\AsyncMethodBuilder.cs:line 728\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetResult(TResult result) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Runtime\\CompilerServices\\AsyncMethodBuilder.cs:line 718\r\n   at System.Runtime.CompilerServices.AsyncValueTaskMethodBuilder`1.SetResult(TResult result) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Runtime\\CompilerServices\\AsyncValueTaskMethodBuilder.cs:line 162\r\n   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken) in D:\\a\\1\\s\\src\\System.Net.Http\\src\\System\\Net\\Http\\SocketsHttpHandler\\HttpConnectionPool.cs:line 646\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Threading\\ExecutionContext.cs:line 172\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1.MoveNext(Thread threadPoolThread) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Runtime\\CompilerServices\\AsyncMethodBuilder.cs:line 618\r\n   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(IAsyncStateMachineBox box, Boolean allowInlining) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Threading\\Tasks\\TaskContinuation.cs:line 794\r\n   at System.Threading.Tasks.Task.RunContinuations(Object continuationObject) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Threading\\Tasks\\Task.cs:line 3335\r\n   at System.Threading.Tasks.Task`1.TrySetResult(TResult result) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Threading\\Tasks\\Future.cs:line 418\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetExistingTaskResult(TResult result) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Runtime\\CompilerServices\\AsyncMethodBuilder.cs:line 728\r\n   at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken) in D:\\a\\1\\s\\src\\System.Net.Http\\src\\System\\Net\\Http\\SocketsHttpHandler\\ConnectHelper.cs:line 97\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Threading\\ExecutionContext.cs:line 172\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1.MoveNext(Thread threadPoolThread) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Runtime\\CompilerServices\\AsyncMethodBuilder.cs:line 618\r\n   at System.Threading.Tasks.AwaitTaskContinuation.RunOrScheduleAction(IAsyncStateMachineBox box, Boolean allowInlining) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Threading\\Tasks\\TaskContinuation.cs:line 794\r\n   at System.Threading.Tasks.Task.RunContinuations(Object continuationObject) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Threading\\Tasks\\Task.cs:line 3335\r\n   at System.Threading.Tasks.Task`1.TrySetResult(TResult result) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Threading\\Tasks\\Future.cs:line 418\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetExistingTaskResult(TResult result) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Runtime\\CompilerServices\\AsyncMethodBuilder.cs:line 728\r\n   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder.SetResult() in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Runtime\\CompilerServices\\AsyncMethodBuilder.cs:line 273\r\n   at System.Net.Http.ConnectHelper.ConnectEventArgs.OnCompleted(SocketAsyncEventArgs _) in D:\\a\\1\\s\\src\\System.Net.Http\\src\\System\\Net\\Http\\SocketsHttpHandler\\ConnectHelper.cs:line 120\r\n   at System.Net.Sockets.SocketAsyncEventArgs.ExecutionCallback(Object state) in D:\\a\\1\\s\\src\\System.Net.Sockets\\src\\System\\Net\\Sockets\\SocketAsyncEventArgs.cs:line 423\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Threading\\ExecutionContext.cs:line 172\r\n   at System.Net.Sockets.SocketAsyncEventArgs.FinishWrapperConnectSuccess(Socket connectSocket, Int32 bytesTransferred, SocketFlags flags) in D:\\a\\1\\s\\src\\System.Net.Sockets\\src\\System\\Net\\Sockets\\SocketAsyncEventArgs.cs:line 672\r\n   at System.Net.Sockets.MultipleConnectAsync.Succeed() in D:\\a\\1\\s\\src\\System.Net.Sockets\\src\\System\\Net\\Sockets\\MultipleConnectAsync.cs:line 289\r\n   at System.Net.Sockets.MultipleConnectAsync.InternalConnectCallback(Object sender, SocketAsyncEventArgs args) in D:\\a\\1\\s\\src\\System.Net.Sockets\\src\\System\\Net\\Sockets\\MultipleConnectAsync.cs:line 219\r\n   at System.Net.Sockets.SocketAsyncEventArgs.OnCompleted(SocketAsyncEventArgs e) in D:\\a\\1\\s\\src\\System.Net.Sockets\\src\\System\\Net\\Sockets\\SocketAsyncEventArgs.cs:line 203\r\n   at System.Net.Sockets.SocketAsyncEventArgs.ExecutionCallback(Object state) in D:\\a\\1\\s\\src\\System.Net.Sockets\\src\\System\\Net\\Sockets\\SocketAsyncEventArgs.cs:line 423\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\shared\\System\\Threading\\ExecutionContext.cs:line 172\r\n   at System.Net.Sockets.SocketAsyncEventArgs.FinishOperationAsyncSuccess(Int32 bytesTransferred, SocketFlags flags) in D:\\a\\1\\s\\src\\System.Net.Sockets\\src\\System\\Net\\Sockets\\SocketAsyncEventArgs.cs:line 785\r\n   at System.Net.Sockets.SocketAsyncEventArgs.<>c.<.cctor>b__177_0(UInt32 errorCode, UInt32 numBytes, NativeOverlapped* nativeOverlapped) in D:\\a\\1\\s\\src\\System.Net.Sockets\\src\\System\\Net\\Sockets\\SocketAsyncEventArgs.Windows.cs:line 1254\r\n   at System.Threading._IOCompletionCallback.PerformIOCompletionCallback(UInt32 errorCode, UInt32 numBytes, NativeOverlapped* pNativeOverlapped) in F:\\workspace\\_work\\1\\s\\src\\System.Private.CoreLib\\src\\System\\Threading\\Overlapped.cs:line 65\r\n```\r\n\r\ncc @davidsh @wfurt ","Url":"https://github.com/dotnet/corefx/issues/37455","RelatedDescription":"Open issue \"System.Net.Http.Functional.Tests crashed with Debug.Fail\" (#37455)"},{"Id":"440473553","IsPullRequest":false,"CreatedAt":"2019-05-05T18:17:03","Actor":"ViktorHofer","Number":"37453","RawContent":null,"Title":"System.Net.Http.Functional.Tests.SocketsHttpHandlerTest_Http2.Http2_DataSentBeforeServerPreface_ProtocolError failing in CI","State":"open","Body":"https://dev.azure.com/dnceng/public/_build/results?buildId=180254&view=ms.vss-test-web.build-test-results-tab&runId=4352366&resultId=324794&paneView=debug\r\n\r\n```\r\nnetcoreapp-OSX-Debug-x64-OSX.1012.Amd64.Open\r\n\r\nSystem.Net.Http.Functional.Tests.SocketsHttpHandlerTest_Http2.Http2_DataSentBeforeServerPreface_ProtocolError\r\n\r\nAssert.Contains() Failure\\nNot found: PROTOCOL_ERROR\\nIn value: System.Net.Http.HttpRequestException: Exception of type 'System.Net.Http.HttpRequestException' was thrown.\\n at System.Net.Http.Http2Connection.AddStream(HttpRequestMessage request) in /Users/vsts/agent/2.150.3/work/1/s/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/Http2Connection.cs:line 1411\\n at System.Net.Http.Http2Connection.SendHeadersAsync(HttpRequestMessage request, CancellationToken cancellationToken) in /Users/vsts/agent/2.150.3/work/1/s/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/Http2Connection.cs:line 975\\n at System.Threading.Tasks.ValueTask`1.get_Result() in /Users/vsts/agent/2.150.3/work/1/s/src/System.Private.CoreLib/shared/System/Threading/Tasks/ValueTask.cs:line 759\\n at System.Net.Http.Http2Connection.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken) in /Users/vsts/agent/2.150.3/work/1/s/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/Http2Connection.cs:line 1356\\n at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken) in /Users/vsts/agent/2.150.3/work/1/s/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/HttpConnectionPool.cs:line 525\\n at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken) in /Users/vsts/agent/2.150.3/work/1/s/src/System.Net.Http/src/System/Net/Http/SocketsHttpHandler/RedirectHandler.cs:line 33\\n at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts) in /Users/vsts/agent/2.150.3/work/1/s/src/System.Net.Http/src/System/Net/Http/HttpClient.cs:line 496\\n at Xunit.Assert.RecordExceptionAsync(Func`1 testCode) in C:\\\\projects\\\\xunit\\\\src\\\\xunit.assert\\\\Asserts\\\\Record.cs:line 82\r\n\r\n   at System.Net.Http.Functional.Tests.HttpClientHandlerTest_Http2.AssertProtocolErrorAsync(Task task, ProtocolErrors errorCode) in /Users/vsts/agent/2.150.3/work/1/s/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.Http2.cs:line 35\r\n   at System.Net.Http.Functional.Tests.HttpClientHandlerTest_Http2.Http2_DataSentBeforeServerPreface_ProtocolError() in /Users/vsts/agent/2.150.3/work/1/s/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.Http2.cs:line 119\r\n--- End of stack trace from previous location where exception was thrown ---\r\n```\r\n\r\ncc @stephentoub @davidsh ","Url":"https://github.com/dotnet/corefx/issues/37453","RelatedDescription":"Open issue \"System.Net.Http.Functional.Tests.SocketsHttpHandlerTest_Http2.Http2_DataSentBeforeServerPreface_ProtocolError failing in CI\" (#37453)"}],"ResultType":"GitHubIssue"},"Roslyn-Issues":{"Issues":[{"Id":"441010679","IsPullRequest":false,"CreatedAt":"2019-05-07T03:36:35","Actor":"cston","Number":"35549","RawContent":null,"Title":"Parse error reported for `F<T>!`","State":"open","Body":"```C#\r\ndelegate void D();\r\nclass Program\r\n{\r\n    static void F<T>() => throw null!;\r\n    static void G<T>()\r\n    {\r\n        _ = new D(F<T>!);\r\n    }\r\n}\r\n```\r\n```\r\n(7,24): error CS1525: Invalid expression term ')'\r\n```","Url":"https://github.com/dotnet/roslyn/issues/35549","RelatedDescription":"Open issue \"Parse error reported for `F<T>!`\" (#35549)"},{"Id":"440816867","IsPullRequest":true,"CreatedAt":"2019-05-07T01:52:16","Actor":"cston","Number":"35535","RawContent":null,"Title":"Ignore annotations analyzing method calls for attributes","State":"closed","Body":"Ignore annotations on method parameters when analyzing method calls within a `BoundAttribute`.\r\n\r\nThis is a simple solution to avoid cycles binding attributes at the expense of additional nullable warnings. The additional warnings should only occur in error cases.\r\n\r\nFixes #35056.","Url":"https://github.com/dotnet/roslyn/pull/35535","RelatedDescription":"Closed or merged PR \"Ignore annotations analyzing method calls for attributes\" (#35535)"},{"Id":"440965180","IsPullRequest":true,"CreatedAt":"2019-05-07T00:00:42","Actor":"dotnet-bot","Number":"35548","RawContent":null,"Title":"Merge master to master-vs-deps","State":"open","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/35548","RelatedDescription":"Open PR \"Merge master to master-vs-deps\" (#35548)"},{"Id":"440953300","IsPullRequest":true,"CreatedAt":"2019-05-06T23:47:19","Actor":"cston","Number":"35547","RawContent":null,"Title":"Report nullability mismatches for delegate creation expressions","State":"open","Body":"Fixes #32499","Url":"https://github.com/dotnet/roslyn/pull/35547","RelatedDescription":"Open PR \"Report nullability mismatches for delegate creation expressions\" (#35547)"},{"Id":"440947984","IsPullRequest":true,"CreatedAt":"2019-05-06T23:38:17","Actor":"jasonmalinowski","Number":"35546","RawContent":null,"Title":"Ensure we set _isSubscribedToSolutionEvents","State":"open","Body":"If we don't set this, we'll subscribe to solution events multiple times which isn't great. Our event handler is idempotent so it'll still do the right thing, but we'll just be wasting extra time processing notifications that won't do anything.\r\n\r\nFixes https://github.com/dotnet/roslyn/issues/35372","Url":"https://github.com/dotnet/roslyn/pull/35546","RelatedDescription":"Open PR \"Ensure we set _isSubscribedToSolutionEvents\" (#35546)"},{"Id":"440937210","IsPullRequest":false,"CreatedAt":"2019-05-06T22:56:11","Actor":"vsfeedback","Number":"35545","RawContent":null,"Title":"Visual Studio steals focus when a breakpoint is hit","State":"open","Body":"1. Start some C# project (e.g. a console app)\n2. Set a breakpoint\n3. Minimize VS\n4. Switch to some other app such as a browser\n5. When the breakpoint is hit VS steals focus.\n\nIf you happen to be typing at the moment you will now type random text into the code editor triggering EnC.\n\nThis is extremely annoying. Please do not take focus (ever).\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/510613/visual-studio-steals-focus-when-a-breakpoint-is-hi.html\nVSTS ticketId: 832932_\n_These are the original issue comments:_\n\nVisual Studio Feedback System on 3/31/2019, 08:28 PM (35 days ago): <p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\nSteven Knox on 4/4/2019, 00:02 PM (32 days ago): <p>Such an annoying bug/issue</p>\n\n_These are the original issue solutions:_\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/35545","RelatedDescription":"Open issue \"Visual Studio steals focus when a breakpoint is hit\" (#35545)"},{"Id":"440935158","IsPullRequest":true,"CreatedAt":"2019-05-06T22:48:57","Actor":"333fred","Number":"35544","RawContent":null,"Title":"Refactor ApplyConversion into VisitConversion","State":"open","Body":"Refactors out ApplyConversion into a more aptly named VisitConversion. Adjusts the parameters to take the node being converted, and optionally the original boundconversion. When the boundconversion is passed it, the calculated nullability is now tracked through nested levels of conversions between the top-level boundconversion and the underlying converted node. Removed TrackInferredTypesThroughConversions, as this is now being handled by VisitConversion.\r\n\r\nThis PR additionally fixes a conversion issue where user-defined conversions that added nullability were not then marking the result type of that conversion as nullable.\r\n\r\nFixes https://github.com/dotnet/roslyn/issues/35334\r\nFixes https://github.com/dotnet/roslyn/issues/35039\r\n\r\n@dotnet/roslyn-compiler for review.","Url":"https://github.com/dotnet/roslyn/pull/35544","RelatedDescription":"Open PR \"Refactor ApplyConversion into VisitConversion\" (#35544)"},{"Id":"440934621","IsPullRequest":true,"CreatedAt":"2019-05-06T22:46:57","Actor":"jcouv","Number":"35543","RawContent":null,"Title":"Use AssemblyInformationalVersionAttribute value for logo and version","State":"open","Body":"As described in https://github.com/dotnet/roslyn/issues/35140, the contents of `AssemblyFileVersionAttribute` are no longer the value we should use.\r\n\r\nThis is a small regression as \r\n- the output of `csc -version` (and the logo) will now read something like `3.1.0-beta2-19209-07+b02e2c50a2f2aeabb5b4e5d850c65ad8686848e3` instead of something like `3.1.0-beta2-19209-07`,\r\n- the output of `#error version` will now read something like `3.1.0-beta2-19209-07+b02e2c50a2f2aeabb5b4e5d850c65ad8686848e3` instead of something like `3.1.0-beta2-19209-07 (b02e2c50a2f)`.\r\n\r\nFixes https://github.com/dotnet/roslyn/issues/35140","Url":"https://github.com/dotnet/roslyn/pull/35543","RelatedDescription":"Open PR \"Use AssemblyInformationalVersionAttribute value for logo and version\" (#35543)"},{"Id":"440788000","IsPullRequest":true,"CreatedAt":"2019-05-06T22:18:00","Actor":"dpoeschl","Number":"35526","RawContent":null,"Title":"Revert \"Make compilation outputs available via a workspace service","State":"closed","Body":"(Original PR #34809)\r\n\r\nThis change broke some unit tests on the VS side with a `System.Reflection.ReflectionTypeLoadException : Unable to load one or more of the requested types.` \r\n\r\nSee https://devdiv.visualstudio.com/DevDiv/_git/VS/pullrequest/179585 for details.\r\n\r\n","Url":"https://github.com/dotnet/roslyn/pull/35526","RelatedDescription":"Closed or merged PR \"Revert \"Make compilation outputs available via a workspace service\" (#35526)"},{"Id":"440915615","IsPullRequest":true,"CreatedAt":"2019-05-06T21:54:50","Actor":"AlekseyTs","Number":"35542","RawContent":null,"Title":"Move to a newer version of CoreCLR","State":"open","Body":"Microsoft.NETCore.App 3.0.0-preview6-27706-07, SDK version 3.0.100-preview6-011773","Url":"https://github.com/dotnet/roslyn/pull/35542","RelatedDescription":"Open PR \"Move to a newer version of CoreCLR\" (#35542)"},{"Id":"440834443","IsPullRequest":true,"CreatedAt":"2019-05-06T21:48:19","Actor":"jcouv","Number":"35538","RawContent":null,"Title":"Adjust nullability warning on ref argument","State":"closed","Body":"Allow:\r\n```C#\r\nstring? x = \"hello\";\r\nM(ref x); // where void M(ref string)\r\n```\r\n\r\nWhile still warning for type mismatch in nested positions:\r\n```C#\r\nList<string?> x = ...;\r\nM(ref x); // where void M(ref List<string>)\r\n```\r\n\r\nFixes https://github.com/dotnet/roslyn/issues/34874","Url":"https://github.com/dotnet/roslyn/pull/35538","RelatedDescription":"Closed or merged PR \"Adjust nullability warning on ref argument\" (#35538)"},{"Id":"440913380","IsPullRequest":true,"CreatedAt":"2019-05-06T21:47:40","Actor":"jcouv","Number":"35541","RawContent":null,"Title":"Account for nullability in array conversion to interface","State":"open","Body":"Fixes https://github.com/dotnet/roslyn/issues/34827","Url":"https://github.com/dotnet/roslyn/pull/35541","RelatedDescription":"Open PR \"Account for nullability in array conversion to interface\" (#35541)"},{"Id":"440913164","IsPullRequest":false,"CreatedAt":"2019-05-06T21:47:01","Actor":"davidwengier","Number":"35540","RawContent":null,"Title":"Completion from unimported types should strip \"Attribute\" from attributes","State":"open","Body":"When a namespace is unimported, the completion list for attributes doesn't strip the word \"Attribute\" from the end.\r\n\r\nBefore importing:\r\n![image](https://user-images.githubusercontent.com/754264/57257204-9b115180-700d-11e9-99b7-df7a460579f6.png)\r\n\r\nAfter importing:\r\n![image](https://user-images.githubusercontent.com/754264/57257233-a9f80400-700d-11e9-8ea1-18e7c160cacd.png)\r\n\r\nIt would be ideal if both experiences were the same, or at the very least the actual completion dropped the \"Attribute\" suffix so the resulting code was more idiomatic.","Url":"https://github.com/dotnet/roslyn/issues/35540","RelatedDescription":"Open issue \"Completion from unimported types should strip \"Attribute\" from attributes\" (#35540)"},{"Id":"440802144","IsPullRequest":true,"CreatedAt":"2019-05-06T21:00:09","Actor":"dotnet-bot","Number":"35528","RawContent":null,"Title":"Merge release/dev16.1 to master","State":"closed","Body":"\nThis is an automatically generated pull request from release/dev16.1 into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.1-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/dev16.1\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.1-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/35528","RelatedDescription":"Closed or merged PR \"Merge release/dev16.1 to master\" (#35528)"},{"Id":"440802262","IsPullRequest":true,"CreatedAt":"2019-05-06T19:30:21","Actor":"dotnet-bot","Number":"35529","RawContent":null,"Title":"Merge release/dev16.1-vs-deps to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from release/dev16.1-vs-deps into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.1-vs-deps-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/release/dev16.1-vs-deps\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.1-vs-deps-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/35529","RelatedDescription":"Closed or merged PR \"Merge release/dev16.1-vs-deps to master-vs-deps\" (#35529)"},{"Id":"440841056","IsPullRequest":true,"CreatedAt":"2019-05-06T19:04:43","Actor":"YairHalberstadt","Number":"35539","RawContent":null,"Title":"Add Generate Parameter Code Fix","State":"open","Body":"![image](https://user-images.githubusercontent.com/29174528/57248363-15f06180-703a-11e9-853e-55a5d590a975.png)\r\n\r\nFix to https://github.com/dotnet/roslyn/issues/35496","Url":"https://github.com/dotnet/roslyn/pull/35539","RelatedDescription":"Open PR \"Add Generate Parameter Code Fix\" (#35539)"},{"Id":"440802401","IsPullRequest":true,"CreatedAt":"2019-05-06T19:00:14","Actor":"dotnet-bot","Number":"35530","RawContent":null,"Title":"Merge master to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/35530","RelatedDescription":"Closed or merged PR \"Merge master to master-vs-deps\" (#35530)"},{"Id":"440800316","IsPullRequest":false,"CreatedAt":"2019-05-06T18:17:16","Actor":"vsfeedback","Number":"35527","RawContent":null,"Title":"Find in Files is wasting screen estate","State":"closed","Body":"VSF_TYPE_MARKDOWNIt seems you're trying to copy ReSharper's wasteful UI in Find in Files. In Visual Studio 2017 I can have a window show me 8 results in a very narrow window. In Visual Studio 2019 the extra useless UI and groupings makes it by default show *two and a half results*, if I scroll down. At first glance I get *half a result*. So you can see how this is a lot worse than previously. I either have to make the UI a lot taller and waste space, or live with very small amount of results at a time.\n\nPlease allow a setting where I can disable the &quot;Matching lines...&quot; and &quot;Find all...&quot; things, or move them to the top with the options for which files to find in and what grouping to use etc. Or some other way that will make the feature useful again. The functionality in VS2017 is enough usually.\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/519940/find-in-files-is-wasting-screen-estate.html\nVSTS ticketId: 841186_\n_These are the original issue comments:_\n\nVisual Studio Feedback System on 4/8/2019, 01:05 AM (28 days ago): <p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n_These are the original issue solutions:_\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/35527","RelatedDescription":"Closed issue \"Find in Files is wasting screen estate\" (#35527)"},{"Id":"440805224","IsPullRequest":false,"CreatedAt":"2019-05-06T18:14:40","Actor":"vsfeedback","Number":"35533","RawContent":null,"Title":"The program text fragment with the initialization of the dictionary Is not formatted properly.","State":"closed","Body":"VSF_TYPE_MARKDOWNThere is no Proper alignment when inserting the trailing parenthesis **&quot;}&quot;** or the &quot;Format Document&quot; command (**Ctrl-K, Ctrl-D**).\nThe Correct formatting can only be obtained by **manually** adding dictionary values.\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/507237/the-program-text-fragment-with-the-initialization.html\nVSTS ticketId: 829994_\n_These are the original issue comments:_\n\nVisual Studio Feedback System on 3/27/2019, 09:37 PM (39 days ago): <p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\nEnbi Zhang [MSFT] on 4/3/2019, 00:19 AM (33 days ago): <p>Thanks for your feedback.</p><p><br></p><p>Could you provide a video or gif for reproduce steps?</p><p><br></p>\n\nKonstantin 'Office 365' Dyakov on 4/3/2019, 01:33 AM (33 days ago): <p>Я могу дать вам файл с текстом, который не форматируется.</p>\n\nKonstantin 'Office 365' Dyakov on 4/3/2019, 01:55 AM (33 days ago): <p>Вот такой файл. <a target='_blank' href=\"https://developercommunity.visualstudio.com/storage/attachments/66234-ctrlkd-testcs.zip\">ctrlkd-testcs.zip</a></p>\n\nWendy Wang [MSFT] on 4/3/2019, 11:16 PM (32 days ago): <p>Translated from Bing:</p><p>Here's a file.<a target='_blank' href=\"https://developercommunity.visualstudio.com/storage/temp/66234-ctrlkd-testcs.zip\">ctrlkd-testcs.zip</a></p><p><strong></strong><u></u><sub></sub><sup></sup><strong></strong><u></u><sub></sub><sup></sup></p>\n\nWendy Wang [MSFT] on 4/3/2019, 11:16 PM (32 days ago): <p>Translated from Bing:</p><p>I can give you a file with text that is not formatted.</p><p><strong></strong><u></u><sub></sub><sup></sup></p>\n\nVisual Studio Feedback System on 4/9/2019, 10:57 PM (26 days ago): <p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\n_These are the original issue solutions:_\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/35533","RelatedDescription":"Closed issue \"The program text fragment with the initialization of the dictionary Is not formatted properly.\" (#35533)"},{"Id":"440820050","IsPullRequest":true,"CreatedAt":"2019-05-06T18:10:34","Actor":"dotnet-bot","Number":"35537","RawContent":null,"Title":"Merge master to demos/records","State":"open","Body":"\nThis is an automatically generated pull request from master into demos/records.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-demos/records\ngit reset --hard upstream/demos/records\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-demos/records --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/35537","RelatedDescription":"Open PR \"Merge master to demos/records\" (#35537)"},{"Id":"440819980","IsPullRequest":true,"CreatedAt":"2019-05-06T18:10:24","Actor":"dotnet-bot","Number":"35536","RawContent":null,"Title":"Merge master-vs-deps to features/razorSupport2","State":"open","Body":"\nThis is an automatically generated pull request from master-vs-deps into features/razorSupport2.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-vs-deps-to-features/razorSupport2\ngit reset --hard upstream/features/razorSupport2\ngit merge upstream/master-vs-deps\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-vs-deps-to-features/razorSupport2 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/35536","RelatedDescription":"Open PR \"Merge master-vs-deps to features/razorSupport2\" (#35536)"},{"Id":"440816640","IsPullRequest":false,"CreatedAt":"2019-05-06T18:01:41","Actor":"jcouv","Number":"35534","RawContent":null,"Title":"Confirm desired behavior for type inference on ref parameters","State":"open","Body":"In the scenario below, we currently infer `string?` for `y`. But, from discussion with Neal, it is conceivable that we should rather infer `string!`.\r\n\r\n```C#\r\n#nullable enable\r\n\r\npublic class C \r\n{\r\n    void M2()\r\n    {\r\n        string? x = \"hello\";\r\n        var y = M(ref x);\r\n        y.ToString(); // possible de-reference\r\n    }\r\n\r\n    T M<T>(ref T t) \r\n    {\r\n        throw null!;\r\n    }\r\n}\r\n```\r\n([sharplab](https://sharplab.io/#v2:EYLgtghgzgLgpgJwDQBMQGoA+BiAdgVwBtCJhC4ACOXU8gWAChGABAZguYCYKBhCxgN6MKIjgBYKAWU4AKAJTDRQhqNUcAjAAYA/BQAeFALwUARAAs4xAPYmA3IrUUAbhAQUAnkakyEcAGb6cvYqjh4AdAAqVgDKMAgAlrgA5vK2FAD06RQADlZQUPFklChwALS+fojUAMZwDhQAvoz1EVIAPBEAfD7+FK0wcvwhIsqhFDBmCFYA7hQExACEwapNDA1AA===))\r\n\r\nRelates to https://github.com/dotnet/roslyn/issues/34874","Url":"https://github.com/dotnet/roslyn/issues/35534","RelatedDescription":"Open issue \"Confirm desired behavior for type inference on ref parameters\" (#35534)"},{"Id":"440803513","IsPullRequest":true,"CreatedAt":"2019-05-06T17:27:21","Actor":"JoeRobich","Number":"35532","RawContent":null,"Title":"Add Sort Usings command back to the Edit > IntelliSense menu","State":"open","Body":"![sort usings](https://user-images.githubusercontent.com/611219/57242858-7c00c880-6fe9-11e9-8cc4-ef3ba658399d.gif)\r\n\r\nCloses https://github.com/dotnet/roslyn/issues/22469","Url":"https://github.com/dotnet/roslyn/pull/35532","RelatedDescription":"Open PR \"Add Sort Usings command back to the Edit > IntelliSense menu\" (#35532)"},{"Id":"440802888","IsPullRequest":false,"CreatedAt":"2019-05-06T17:25:45","Actor":"vsfeedback","Number":"35531","RawContent":null,"Title":"Extract Interface ... creates file with interface but does not navigate to it.","State":"open","Body":"VSF_TYPE_MARKDOWN## Steps to reproduce\n- Create class\n- Press Ctrl + '.'.\n- Select 'Extract interface... '\n- Press Ok in dialog\n## Result\n- File with interface is created but it is not being navigated to.\n## Expected\n- Fil with interface is created, opened and selected.\n\nThis works in VS 2017 but in VS 2019 it stopped working. Same issue in multiple PCs.\n\nI have found this issue when I was trying to implement custom refactroing by inheriting **CodeActionWithOptions** which returns **DocumentNavigationOperation** and nothing happened.\nI have checked roslyn source codes for extract interface which does the same thing I found out that it does not work for 'Extract interface' either.\n\n## Maybe useful information\nI have inherited **DocumentNavigationOperation** and debugged **Apply** method. I could see that document id I am using for navigation is different then the one which exists in workspace parameter of method.\nFor some reason it changed during **ApplyChangesOperation**. Maybe it can help you.\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/556922/extract-interface-creates-file-with-interface-but.html\nVSTS ticketId: 881201_\n_These are the original issue comments:_\n\nVisual Studio Feedback System on 5/4/2019, 08:19 PM (38 hours ago): We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.\n\n_These are the original issue solutions:_\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/35531","RelatedDescription":"Open issue \"Extract Interface ... creates file with interface but does not navigate to it.\" (#35531)"},{"Id":"440757743","IsPullRequest":false,"CreatedAt":"2019-05-06T15:31:28","Actor":"mavasani","Number":"35525","RawContent":null,"Title":"Improve discoverability of code refactorings","State":"open","Body":"A bunch of recent customer surveys done by @kendrahavens identified that quite a few customers find our refactorings to be not discoverable. The refactorings that they requested were already implemented by us, but they needed Kendra to point out where to put the cursor or how to change the selection span for these to show up in the light bulb menu. The same concern does not apply to code fixes due to visual cue from the squiggle/suggestion dots in the UI, and pressing Ctrl + dot anywhere on the line shows up the fix, ordering being based on the distance from the diagnostic span. Note that the primary reason why we don't show up all the refactorings available on a given line are to avoid overloading the light bulb menu, which is already quite noisy. We need to fine tune the experience here to find a balance between discoverability of actions and overloading the light bulb menu.\r\n\r\nWe have talked about adding 2 different discoverability enhancements to address these concerns:\r\n\r\n1. **Show additional actions in light bulb menu**\r\nImprove the discoverability of the refactorings in the light bulb, by showing additional, but likely less relevant actions, that are applicable for positions _near_ the current cursor or selection span. Most relevant refactorings would still be show at the top of the menu and these additional actions will either be shown at the bottom of the menu or nested within a separate menu towards the bottom. Internal discussions have led to bunch of different implementation suggestions on how to achieve this (discussed below), but the primary conclusion being that we need to somehow _associate a fix span/ideal span with each registered code action within a refactoring, so the engine can prioritize the ordering and/or nesting of these refactorings based on promixity of this span with current cursor position or selection span_.\r\nPossible implementation approaches that came out:\r\n   1. **Implementation 1**: Convert all the IDE refactorings that are not selection based into a pair of diagnostic analyzer reporting hidden diagnostics + code fix. The diagnostic span would be the ideal span for the code actions.\r\n\r\n      PROS:\r\n         1. All refactorings available on any position in a line show up in the light bulb, solving the discoverability concerns. \r\n         2. We get other useful analyzer/fixer features for free: fix all, ability to bump up the severity to see squiggles/error list entries across a wider scope, etc.\r\n\r\n      CONS:\r\n         1. Likely to overload the light bulb menu with lot more actions now showing up. If so, one option might be to move all the code actions registered for hidden diagnostics whose span does not intersect with current position into a nested menu near the bottom of the light bulb menu.\r\n         2. This approach adds quite a bit of implementation cost as we need to refactor code in each code refactoring into a pair of diagnostic analyzer/code fix.\r\n\r\n   2. **Implementation 2**: Currently, the refactoring service executes naively for identifying available actions for current cursor position or span. It passes in the entire line span or selection span into each refactoring, and then treats all registered refactorings to be on par with each other. This forces our refactorings to then be implemented in a restrictive manner, so they are not offered everywhere on the line and do not overload the light bulb menu. This whole setup relies on the assumption that users are already aware about where to put their cursor or what span to select to get the relevant refactorings, which does not seem to be true as mentioned at the start of this post. This proposal tries to remove this assumption by making the following changes:\r\n      1. Change the code refactoring service to perform multiple passes instead of just one. It first identifies the current token/node at the position or selection span and identifies available actions. These would be the most relevant refactorings that get offered at the top level of the light bulb menu. Then the service walks up the parent node and asks available actions for the parent and siblings of previous token/node. These actions would automatically be assigned a lower priority and will be shown under a nested menu near the bottom. These additional nearby actions would serve as a discoverability point for beginner users, while also not polluting the menu for advanced users.\r\n      2. Change all the refactorings so they only register an action if the input text span exactly matches the token/node that is most relevant to it.\r\n\r\n     PROS:\r\n         1. We do not alter the existing light bulb menu significantly for advanced/experienced users, while adding a new discoverability point for beginner users to discover new potential actions in nearby locations.\r\n         2. The implementation for each refactoring is greatly simplified and unified as they only work when input span exactly matches it's fixed span.\r\n\r\n      CONS: \r\n         1. We might end up with a perf hit due to the code refactoring service doing multiple passes. We would need perf measurements to identify if this indeed a concern as most refactorings would just bail out upfront. \r\n         2. We need to experiment/decide if a nested menu is indeed a good discoverability point as beginner users might not know that they need to dive into a nested menu at the bottom.\r\n\r\n   3. **Implementation 3**: Allow refactorings to specify a span in [RegisterRefactoring](http://source.roslyn.io/#Microsoft.CodeAnalysis.Workspaces/CodeRefactorings/CodeRefactoringContext.cs,51) callback. This would serve as the virtual diagnostic span for the code action. We would need to change all the refactorings to then operate on all the nodes/tokens of interest in the input context span and register refactorings for each node/token with their span. The code refactoring service would be changed to prioritize refactorings whose registered span is a close match to current position/span, and show the rest of refactorings in a nested menu or towards the bottom of the menu.\r\n\r\n     PROS: Get the similar user experience as prior approaches, with potentially lesser implementation cost then approach i. and avoid multiple passes that are needed in approach ii.\r\n\r\n     CONS: Adds implementation complexity in each refactoring of identifying multiple nodes/tokens of interest and then register each action with a span.\r\n\r\n   4. **Implementation 4**: Enforce common [helpers](https://github.com/dotnet/roslyn/blob/master/src/Features/Core/Portable/CodeRefactoringHelpers.cs) that each code refactoring ought to use to determine it's applicability span and bail out if that is not the case. We need to ensure we polish and/or extend the existing helpers, make them public as appropriate and audit all existing or just the problematic refactorings to ensure they are using these helpers.\r\n\r\n2. **New UI for viewing available actions in a broader scope**: Create a separate tool window to show available code actions within a given scope (document/project/solution, with document being the default). Few open questions:\r\n   1. Should the refactorings shown in this window be opt-in to avoid polluting it with common refactorings that show up everywhere?\r\n   2. Should the tool window automatically be opened and brought to focus when user invokes light bulb and/or applies a code action? If not, how would we make this UI discoverable for users?\r\n   3. Should the actions list in the window be ordered such that the actions closer to current cursor are near the top?\r\n   We would potentially start with a simple UI, that only works for document scope to start with, and iterate on improving it to work with broader scopes.\r\n","Url":"https://github.com/dotnet/roslyn/issues/35525","RelatedDescription":"Open issue \"Improve discoverability of code refactorings\" (#35525)"},{"Id":"440646235","IsPullRequest":true,"CreatedAt":"2019-05-06T11:04:36","Actor":"dotnet-maestro[bot]","Number":"35524","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190503.8\r\n- **Date Produced**: 5/4/2019 2:00 AM\r\n- **Commit**: 4cacf7aa7b2cd8bdd042e721e6ad73d809dd5678\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19253.8\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190504.1\r\n- **Date Produced**: 5/4/2019 12:58 PM\r\n- **Commit**: 1b8589bbf53b9a5e819460798eff59830f39a3be\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19254.1\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190505.2\r\n- **Date Produced**: 5/5/2019 2:25 PM\r\n- **Commit**: 6a34948f7bdbc3ceb2fb16441b49f7748a462646\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19255.2\r\n\r\n","Url":"https://github.com/dotnet/roslyn/pull/35524","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/arcade\" (#35524)"},{"Id":"440568266","IsPullRequest":false,"CreatedAt":"2019-05-06T07:14:17","Actor":"NN---","Number":"35523","RawContent":null,"Title":"Ambiguous implicit conversion in tuple literal","State":"open","Body":"**Version Used**: \r\nLatest, master from May 4, 2019.\r\n\r\n**Steps to Reproduce**:\r\n\r\n```cs\r\ninternal readonly struct Pair\r\n{\r\n    public Pair(string name, string type)\r\n    {\r\n        Name = name;\r\n        Type = type;\r\n    }\r\n\r\n    internal string Name { get; }\r\n    internal string Type { get; }\r\n\r\n    public override string ToString() => $\"{Name}: {Type}\";\r\n\r\n    public static implicit operator Pair((string, int) t) => new Pair(t.Item1, \"int\");\r\n\r\n    public static implicit operator Pair((string, uint) t) => new Pair(t.Item1, \"uint\");\r\n}\r\n\r\ninternal static class Program\r\n{\r\n    private static void Render(Pair pair)\r\n    {\r\n        System.Console.WriteLine(pair);\r\n    }\r\n\r\n    private static void Main()\r\n    {\r\n        const uint u = 23;\r\n        Render((\"u\", u)); // u: uint\r\n\r\n        const int m = -1;\r\n        Render((\"-\", m)); // -: int\r\n\r\n        const int i = 42;\r\n        Render((\"i\", i)); // Error CS0457\r\n\r\n        var t = (\"t\", i);\r\n        Render(t); // t: int\r\n    }\r\n}\r\n```\r\n\r\n**Expected Behavior**:\r\nCompiles fine.\r\n\r\n**Actual Behavior**:\r\n```\r\nerror CS0457: Ambiguous user defined conversions 'Pair.implicit operator Pair((string, int))' and 'Pair.implicit operator Pair((string, uint))' when converting from '(string, int i)' to 'Pair'\r\n```\r\n\r\n![Online compiler](https://sharplab.io/#v2:EYLgtghgzgLgpgJwDQBMQGoA+BLAdvBXCAGwAIE4IUB7XYgT1NgQFcBjGUgBQmwQFgAUAG8hpcaQACAZm68EACkkBGAAykiYOEilrSMegAc4ASjETRgiddIA5CFtIBeDQ7gBuczdIAVI3Gd9f08rCQBfIS9SPAIiMhV1e0dhUgBzOBh3UgjQ8RjEON11P2NSFPTM7MjcqVlqADdEBGwUAITfagBlGGbcVIUTZwA+UgASACJhJLgwkDKSmfGQqJldADZosENibDZsTmpjBAgYagQ5PgUlNR0YwZhBpxHcOAB3C8UYADoASXgwZQ6cYxcYmZY1VYqDbYLY7PYHI4nM4fK4JHQsO76R7PN4o75/OAAoEY/CgkI5IT5QgkdZSABMugA7EJLNZDM16ic2soNpIACykABKcFwrUUPD4pEM8jMNVZ3l0XxUAE4FNK+GCohSauzsJz4LT+aQALK8XADKLy7xsWiwUgkzgsQJ06QhBVCkViq7jFjjdEmMGkAD0Qftcwd1XdNtwdpipDAgQAtMo3QrhaLEN7E374wGsiHSIm5jFIwro7H8NFAny6anvOmvQpgTnsHng6GAKIIBDIgDCnVUfIArMzBFFrJzzpwXE2YC3NTVrA3Mw986GYMX8FqhNqhEA===)","Url":"https://github.com/dotnet/roslyn/issues/35523","RelatedDescription":"Open issue \"Ambiguous implicit conversion in tuple literal\" (#35523)"},{"Id":"440481231","IsPullRequest":false,"CreatedAt":"2019-05-05T19:35:34","Actor":"Almark20","Number":"35522","RawContent":null,"Title":"I got this massage when ever use csc","State":"open","Body":"This compiler is provided as part of the Microsoft (R) .NET Framework, but only\r\nsupports language versions up to C# 5, which is no longer the latest version. For compilers that support newer versions of the C# programming language, see HTTP\r\n://go.microsoft.com/fwlink/?LinkID=533240","Url":"https://github.com/dotnet/roslyn/issues/35522","RelatedDescription":"Open issue \"I got this massage when ever use csc\" (#35522)"},{"Id":"440478144","IsPullRequest":false,"CreatedAt":"2019-05-05T19:03:22","Actor":"vsfeedback","Number":"35521","RawContent":null,"Title":"VS hung after \"Add parameter to method\" LightBulb action","State":"open","Body":"VSF_TYPE_MARKDOWNI added a paramteter to a method call and invoked LightBulb to add it to method signature. After that VS hung, but without ghosting.\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/547480/vs-hung-after-add-parameter-to-method-lightbulb-ac.html\nVSTS ticketId: 856118_\n_These are the original issue comments:_\n\nVisual Studio Feedback System on 4/26/2019, 01:24 AM (9 days ago): <p>We have directed your feedback to the appropriate engineering team for further evaluation. The team will review the feedback and notify you about the next steps.</p>\n\nVisual Studio Feedback System on 4/28/2019, 03:27 AM (7 days ago): <p>This issue is currently being investigated. Our team will get back to you if either more information is needed, a workaround is available, or the issue is resolved.</p>\n\n_These are the original issue solutions:_\n(no solutions)","Url":"https://github.com/dotnet/roslyn/issues/35521","RelatedDescription":"Open issue \"VS hung after \"Add parameter to method\" LightBulb action\" (#35521)"},{"Id":"440462101","IsPullRequest":true,"CreatedAt":"2019-05-05T16:15:54","Actor":"jaredpar","Number":"35520","RawContent":null,"Title":"Use .NET Standard API for named pipes on Unix","State":"open","Body":"Use new pipe API for compiler server on Unix\r\n\r\nThe default behavior for the NamedPipeServerStream API is to take a pipe\r\nname and then construct a named pipe in the background using that name.\r\nIn Windows this involves creating a file in a special namespace in the\r\nfile system. On Unix, named pipes are implemented using Unix Domain\r\nSockets, which are actual files, and the CoreFX behavior is to create\r\nthem in the temporary directory. Unfortunately, Unix Domain Sockets also\r\noften have a max path length limitation and the temporary directory\r\ncould be arbitrarily long, meaning that any attempt to create a named\r\npipe may fail on Unix.\r\n\r\nTo remedy this, CoreFX introduced an API which allows you to pass a full\r\npath instead of just a pipe name. If a fully-qualifed path is passed,\r\nthe new behavior is used. We can use this functionality to improve\r\nreliability of pipe name creation by using the \"/tmp\" directory on Unix,\r\nwhich by the POSIX specification is always required to be a valid\r\ntemporary directory, and by using a fixed-length pipe name that is lower\r\nthan any known Unix Domain Socket path length restriction.","Url":"https://github.com/dotnet/roslyn/pull/35520","RelatedDescription":"Open PR \"Use .NET Standard API for named pipes on Unix\" (#35520)"}],"ResultType":"GitHubIssue"},"CoreRT-Issues":{"Issues":[{"Id":"441010437","IsPullRequest":true,"CreatedAt":"2019-05-07T04:17:53","Actor":"Dotnet-GitSync-Bot","Number":"7404","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @Anipik","Url":"https://github.com/dotnet/corert/pull/7404","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7404)"},{"Id":"439802257","IsPullRequest":true,"CreatedAt":"2019-05-07T03:38:35","Actor":"Suchiman","Number":"7389","RawContent":null,"Title":"Port GC changes from coreclr - 7","State":"closed","Body":"This port continues https://github.com/dotnet/corert/pull/7383\r\nPorting strategy: extracting patches via `format-patch` from coreclr, adjusting paths, then `am` them on corert.\r\n\r\n**Glossary:**\r\n- already merged: change already exists in corert\r\n- gc only port: change only affected the gc directory and patch applied with no conflicts\r\n- manual port: change applied with custom changes\r\n- omitted changes: contains changes to files that do not exists in corert and were discarded\r\n\r\n**Changes since [last commit](https://github.com/dotnet/coreclr/commit/ee454e11d0c73820dde10ab710f9d6eccd4471f1):**\r\n- https://github.com/dotnet/coreclr/commit/984f6719a3c4b0ad35cba6b9d819a33935bc0b3e (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/1a183684b1ecf63ece8a2fd80173f083c0deea52 (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/5529df988f80e7fe67ec46f9f6cbd169fdf7edd5 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/0f66b465dbe7774ff7514d4f2e160f0616b4085a (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/eb12b78102f2b54dc082caabcd1b59b42166509b (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/0834425813497593ceda8bb0ae12dcc463011d7c (manual port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/77eb339752afa774655d88121f4d8f5de05f6d0a (manual port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/0597a34b570d359d34a03c74e1007025c43ae7e8 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/bab2cc30b1516cd257aba763c7a1c06497219ede (manual port)\r\n- https://github.com/dotnet/coreclr/commit/f1d81d24932391c0f087364cd91a66ac2c758e35 (manual port)\r\n- https://github.com/dotnet/coreclr/commit/4af0f91b0f3b9a99b8cb9bc3551576494b058732 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/1e11b32ca720f886adfa0cc2a6a46829feba78d0 (gc only port, omitted changes)\r\n\r\n**Points of interest**:\r\nIn https://github.com/dotnet/coreclr/commit/0834425813497593ceda8bb0ae12dcc463011d7c methods were added to the GCToEEInterface, that were using the CLRConfig system to acquire more information.\r\nAs that doesn't seem to be available in CoreRT, i've directed them to go against `g_pConfig` where possible.","Url":"https://github.com/dotnet/corert/pull/7389","RelatedDescription":"Closed or merged PR \"Port GC changes from coreclr - 7\" (#7389)"},{"Id":"440872069","IsPullRequest":true,"CreatedAt":"2019-05-06T20:26:10","Actor":"trylek","Number":"7403","RawContent":null,"Title":"Initial CPAOT support for large version bubble","State":"open","Body":"This change modifies the existing --inputbubble CPAOT option\r\nto work the same as Crossgen /largeversionbubble i.e. the main module\r\nand all reference assemblies are considered to belong to the same\r\nversion bubble.\r\n\r\nThe gist of the change deals with encoding module overrides in\r\nsignatures. I have implemented a new R2R header table\r\nManifestMetadataTableNode and added logic for composing and emitting\r\nthe extra AssemblyRef list.\r\n\r\nOne challenging bit was that we need to emit all the signatures before\r\nemitting the ManifestMetadataTableNode because only the emission\r\nof the signatures shakes out all the required AssemblyRef's. I have\r\nadded a simple loop to ImportSectionsTableNode / ImportSectionNode\r\nthat traverses and emits all registered import cell signatures.\r\n\r\nAfter I managed to make the basic signature emission work with module\r\noverride, I continued hitting issues with the two entrypoint tables.\r\nFor the (non-generic) method entrypoint table we need to filter out\r\nmethods outside of the current input module because the larger\r\ncompilation group representing the larger version bubble ends up\r\nexpanding the dependency graph to framework methods.\r\n\r\nWhile these \"external\" methods are not compiled into the output\r\nexecutable (except when they are occasionally inlined into a local\r\nmethod), we were still trying to emit them into the entrypoint\r\ntable and we were crashing compilation because we couldn't find\r\nsome of the necessary tokens.\r\n\r\nFor instance entrypoints, I didn't find any manner of encoding\r\na module override for their signatures in the native hashtable so\r\nfor now I added filtering that we're only storing those instance\r\nentrypoints that have the current input module as the reference\r\nmodule. One can theoretically imagine that a module may contain\r\narbitrary generic instantiations spanning other modules when\r\nlarger bubbles are on.\r\n\r\nWhile working on the change I also realized that the current way\r\nof basing signature contexts on input modules in CorInfoImpl.ReadyToRun\r\nwas incorrect - when a method gets inlined, we still need the original\r\nsignature context because that's what defines the ambient module\r\nused in the CoreCLR signature parser.\r\n\r\nI have deleted the field and instead I added a new method\r\nGetSignatureContext which currently returns\r\nReadyToRunCoregenNodeFactory.InputModuleContext. Once we start\r\nimplementing \"single-file\" (i.e. compiling multiple MSIL modules\r\ninto a single PE), we'll change this to something more fine-grained,\r\nmost likely based on some lookup on MethodBeingCompiled.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7403","RelatedDescription":"Open PR \"Initial CPAOT support for large version bubble\" (#7403)"},{"Id":"440801223","IsPullRequest":true,"CreatedAt":"2019-05-06T17:53:33","Actor":"Dotnet-GitSync-Bot","Number":"7402","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @AaronRobinsonMSFT","Url":"https://github.com/dotnet/corert/pull/7402","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7402)"},{"Id":"440711963","IsPullRequest":true,"CreatedAt":"2019-05-06T15:18:44","Actor":"Dotnet-GitSync-Bot","Number":"7400","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @krwq","Url":"https://github.com/dotnet/corert/pull/7400","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7400)"},{"Id":"439939415","IsPullRequest":true,"CreatedAt":"2019-05-06T15:16:28","Actor":"ifew","Number":"7391","RawContent":null,"Title":"Add link to sample project working with database","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7391","RelatedDescription":"Closed or merged PR \"Add link to sample project working with database\" (#7391)"},{"Id":"440731576","IsPullRequest":false,"CreatedAt":"2019-05-06T15:15:36","Actor":"vadash","Number":"7401","RawContent":null,"Title":"Q: .managed section in PE file. Can someone extract source code from it ?","State":"closed","Body":"and what does it contain ? \r\n![die_SlSWWwH5nM](https://user-images.githubusercontent.com/1397582/57232467-52659280-7025-11e9-948e-ed7f4d55c1fe.png)\r\nThanks for amazing CoreRT\r\n","Url":"https://github.com/dotnet/corert/issues/7401","RelatedDescription":"Closed issue \"Q: .managed section in PE file. Can someone extract source code from it ?\" (#7401)"},{"Id":"440697846","IsPullRequest":true,"CreatedAt":"2019-05-06T13:24:01","Actor":"MichalStrehovsky","Number":"7399","RawContent":null,"Title":"Merge master to nmirror","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7399","RelatedDescription":"Closed or merged PR \"Merge master to nmirror\" (#7399)"},{"Id":"440666948","IsPullRequest":true,"CreatedAt":"2019-05-06T12:05:21","Actor":"MichalStrehovsky","Number":"7398","RawContent":null,"Title":"Fix nullable analysis errors in ProjectN","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7398","RelatedDescription":"Closed or merged PR \"Fix nullable analysis errors in ProjectN\" (#7398)"},{"Id":"440649625","IsPullRequest":true,"CreatedAt":"2019-05-06T11:16:11","Actor":"dotnet-bot","Number":"7397","RawContent":null,"Title":"Merge changes from TFS","State":"closed","Body":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!","Url":"https://github.com/dotnet/corert/pull/7397","RelatedDescription":"Closed or merged PR \"Merge changes from TFS\" (#7397)"},{"Id":"440644215","IsPullRequest":true,"CreatedAt":"2019-05-06T10:58:31","Actor":"MichalStrehovsky","Number":"7396","RawContent":null,"Title":"Merge master to nmirror","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7396","RelatedDescription":"Closed or merged PR \"Merge master to nmirror\" (#7396)"},{"Id":"440483855","IsPullRequest":true,"CreatedAt":"2019-05-05T22:22:44","Actor":"Dotnet-GitSync-Bot","Number":"7395","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @benaadams","Url":"https://github.com/dotnet/corert/pull/7395","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7395)"},{"Id":"440209822","IsPullRequest":true,"CreatedAt":"2019-05-04T02:03:33","Actor":"MichalStrehovsky","Number":"7392","RawContent":null,"Title":"Fix ProjectN build breaks","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7392","RelatedDescription":"Closed or merged PR \"Fix ProjectN build breaks\" (#7392)"},{"Id":"440231323","IsPullRequest":true,"CreatedAt":"2019-05-04T02:03:21","Actor":"Dotnet-GitSync-Bot","Number":"7394","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @sywhang @GrabYourPitchforks @filipnavara","Url":"https://github.com/dotnet/corert/pull/7394","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7394)"},{"Id":"440221804","IsPullRequest":true,"CreatedAt":"2019-05-03T21:05:15","Actor":"nattress","Number":"7393","RawContent":null,"Title":"Fix inlined field access outside version bubble","State":"open","Body":"When the JIT inlines methods outside the version bubble and those methods refer to fields, we cannot encode those field accesses. Abort the inline attempt in that case by guarding calls from `getFieldInfo` to get field import signatures.\r\n\r\nSkip emitting fixups for intrinsic field access (ie, IntPtr.Zero) that the JIT knows how to handle.","Url":"https://github.com/dotnet/corert/pull/7393","RelatedDescription":"Open PR \"Fix inlined field access outside version bubble\" (#7393)"},{"Id":"439110167","IsPullRequest":true,"CreatedAt":"2019-05-03T16:12:14","Actor":"MichalStrehovsky","Number":"7381","RawContent":null,"Title":"Add support for NativeLibrary.SetDllImportResolver","State":"closed","Body":"Touches a lot of files, but most of it is just piping.\r\n\r\nThis also ensures correct behavior when `DefaultDllImportSearchPaths` is specified.\r\n\r\n* In the compiler, preserve information about `DefaultDllImportSearchPathsAttribute` custom attribute applied to the assembly. Also preserve the EEType pointer to the assembly's module type. We attach this information the the module fixup cell.\r\n* When resolving the p/invoke at runtime, use `DefaultDllImportSearchPaths` that the compiled embedded. Also retrieve the assembly that the p/invoke was declared in and call the user provided callback.\r\n\r\nI'm also tweaking `Assembly.GetExecutingAssembly` so that the common pattern of registering DllImportResolved in the current assembly works when reflection is disabled.","Url":"https://github.com/dotnet/corert/pull/7381","RelatedDescription":"Closed or merged PR \"Add support for NativeLibrary.SetDllImportResolver\" (#7381)"},{"Id":"439697709","IsPullRequest":true,"CreatedAt":"2019-05-03T15:26:37","Actor":"Dotnet-GitSync-Bot","Number":"7388","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @krwq @buyaa-n @safern @stephentoub @jbhensley @danmosemsft @luhenry","Url":"https://github.com/dotnet/corert/pull/7388","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#7388)"},{"Id":"439579442","IsPullRequest":false,"CreatedAt":"2019-05-03T07:43:18","Actor":"ifew","Number":"7386","RawContent":null,"Title":"Dynamic code generation is not supported on this platform.","State":"closed","Body":"Hi\r\n\r\nI using Dapper and NPoco for connecting database, and it's work on normal compile\r\nbut when I compile to native, I got the message ```Unhandled Exception: System.PlatformNotSupportedException: Dynamic code generation is not supported on this platform.``` of both libraries\r\n\r\nBoth, I using \r\n```<TargetFramework>netcoreapp3.0</TargetFramework>```\r\n\r\n```\r\n<PackageReference Include=\"MySqlConnector\" Version=\"0.53.0\" />\r\n<PackageReference Include=\"System.Data.SqlClient\" Version=\"4.7.0-preview4.19212.13\" />\r\n```\r\n\r\nDapper\r\n```bash\r\nLog: Start Connection\r\nLog: _connection.ConnectionString: Server=localhost;User Id=root;Database=lab;Convert Zero Datetime=True\r\nLog: ServerVersion After Open: 5.5.5-10.2.15-MariaDB-log\r\nLog: State: Open\r\nUnhandled Exception: System.PlatformNotSupportedException: Dynamic code generation is not supported on this platform.\r\n   at System.Reflection.Emit.ReflectionEmitThrower.ThrowPlatformNotSupportedException() + 0x38\r\n   at Dapper.SqlMapper.GetTypeDeserializerImpl(Type, IDataReader, Int32, Int32, Boolean) + 0xb5\r\n   at Dapper.SqlMapper.TypeDeserializerCache.GetReader(IDataReader, Int32, Int32, Boolean) + 0x154\r\n   at Dapper.SqlMapper.TypeDeserializerCache.GetReader(Type, IDataReader, Int32, Int32, Boolean) + 0x16c\r\n   at Dapper.SqlMapper.GetDeserializer(Type, IDataReader, Int32, Int32, Boolean) + 0x14f\r\n   at Dapper.SqlMapper.<QueryImpl>d__138`1.MoveNext() + 0x263\r\n   at System.Collections.Generic.List`1..ctor(IEnumerable`1) + 0x10c\r\n   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1) + 0x43\r\n   at Dapper.SqlMapper.Query[T](IDbConnection, String, Object, IDbTransaction, Boolean, Nullable`1, Nullable`1) + 0x1c6\r\n   at Member.Program.Main() + 0x11c\r\n   at bootstrap!<BaseAddress>+0xa8959b\r\n\r\n```\r\n\r\nNPoco\r\n```bash\r\nLog: Start Connection\r\nLog: _connection.ConnectionString: Server=localhost;User Id=root;Database=lab;Convert Zero Datetime=True\r\nUnhandled Exception: System.PlatformNotSupportedException: Dynamic code generation is not supported on this platform.\r\n   at System.Reflection.Emit.ReflectionEmitThrower.ThrowPlatformNotSupportedException() + 0x43\r\n   at System.Reflection.Emit.DynamicMethod..ctor(String, Type, Type[], Type, Boolean) + 0x30\r\n   at NPoco.MemberAccessor.GetSetDelegate() + 0x225\r\n   at NPoco.MemberAccessor..ctor(Type, String) + 0x357\r\n   at NPoco.PocoDataBuilder.<>c.<GetMemberAccessors>b__32_0(MemberInfo) + 0x77\r\n   at System.Linq.Enumerable.SelectListIterator`2.MoveNext() + 0x141\r\n   at System.Collections.Generic.List`1..ctor(IEnumerable`1) + 0x212\r\n   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1) + 0x7c\r\n   at NPoco.PocoDataBuilder.GetMemberAccessors(IEnumerable`1) + 0xb7\r\n   at NPoco.PocoDataBuilder.<GetPocoMembers>d__28.MoveNext() + 0x708\r\n   at System.Collections.Generic.List`1..ctor(IEnumerable`1) + 0x212\r\n   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1) + 0x7c\r\n   at NPoco.PocoDataBuilder.Init() + 0xf5\r\n   at NPoco.PocoDataFactory.BaseClassFalbackPocoDataBuilder(Type) + 0x55\r\n   at NPoco.PocoDataFactory.<>c__DisplayClass3_0.<ForType>b__0() + 0x29\r\n   at NPoco.Cache`2.Get(TKey, Func`1) + 0xd6\r\n   at NPoco.PocoDataFactory.ForType(Type) + 0xc0\r\n   at NPoco.AutoSelectHelper.AddSelectClause(Database, Type, String) + 0x108\r\n   at NPoco.Database.<QueryImp>d__153`1.MoveNext() + 0x108\r\n   at System.Collections.Generic.List`1..ctor(IEnumerable`1) + 0x212\r\n   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1) + 0x7c\r\n   at NPoco.Database.Fetch[T](Sql) + 0x60\r\n   at NPoco.Database.Fetch[T](String, Object[]) + 0x67\r\n   at NPoco.Database.Fetch[T]() + 0x6d\r\n   at Member.Program.Main() + 0x16a\r\n   at corert-db-dapper!<BaseAddress>+0xfe4db9\r\n   at corert-db-dapper!<BaseAddress>+0xfe4e2c\r\n```","Url":"https://github.com/dotnet/corert/issues/7386","RelatedDescription":"Closed issue \"Dynamic code generation is not supported on this platform.\" (#7386)"},{"Id":"439814909","IsPullRequest":true,"CreatedAt":"2019-05-02T22:29:34","Actor":"Suchiman","Number":"7390","RawContent":null,"Title":"Fix AspNetCore Repo Link","State":"closed","Body":"aspnet/home now redirects aspnet/AspNetCore.\r\nPrimarily to check if CI works.","Url":"https://github.com/dotnet/corert/pull/7390","RelatedDescription":"Closed or merged PR \"Fix AspNetCore Repo Link\" (#7390)"},{"Id":"439510199","IsPullRequest":true,"CreatedAt":"2019-05-02T21:26:24","Actor":"MichalStrehovsky","Number":"7385","RawContent":null,"Title":"Assert that typical field is indeed typical","State":"closed","Body":"This assert would have saved Tomas some trouble in #7376.","Url":"https://github.com/dotnet/corert/pull/7385","RelatedDescription":"Closed or merged PR \"Assert that typical field is indeed typical\" (#7385)"},{"Id":"439245544","IsPullRequest":true,"CreatedAt":"2019-05-02T20:09:31","Actor":"Suchiman","Number":"7383","RawContent":null,"Title":"Port GC changes from coreclr - 6","State":"closed","Body":"This port continues https://github.com/dotnet/corert/pull/7362\r\nPorting strategy: extracting patches via `format-patch` from coreclr, adjusting paths, then `am` them on corert.\r\n\r\n**Glossary:**\r\n- already merged: change already exists in corert\r\n- gc only port: change only affected the gc directory and patch applied with no conflicts\r\n- manual port: change applied with custom changes\r\n- omitted changes: contains changes to files that do not exists in corert and were discarded\r\n\r\n**Changes since [last commit](https://github.com/dotnet/coreclr/commit/56776b20f5902ef60d43cb502d734193b2521fca):**\r\n- https://github.com/dotnet/coreclr/commit/c9914b7ab9dfcc7ad8003368715a182d7cbbe289 (manual port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/edd23a10bc574058a42c62dc829973dc48449837 (manual port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/13812bfd0f6eda442c944f416e8c871b18d99e3f (manual port)\r\n- https://github.com/dotnet/coreclr/commit/0bb12f6ffb876eb51a85f62f7b9967eb31e0b40c (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/80ca6807369ff9fa468099a936072a121215d3dc (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/ae75f5d540b7373743d3698d6e2c1e7be93fd821 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/48ebab8270a96e505a2be128a4875f903ef1c4b2 (gc only port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/fc5385ef9ce5303bc22638ac36e9ba04ed4a9c21 (manual port)\r\n- https://github.com/dotnet/coreclr/commit/b560ecc73d1abaec17064d5318b74b5f2bb70bd4 (manual port)\r\n- https://github.com/dotnet/coreclr/commit/02fa8ca0932d02ce369f6a7405128ab5b729fb8d (manual port)\r\n- https://github.com/dotnet/coreclr/commit/69d43a0f8cfe095336b286e7bb892fe49c702e30 (manual port, omitted changes)\r\n- https://github.com/dotnet/coreclr/commit/8b1595b74c943b33fa794e63e440e6f4c9679478 (already merged)\r\n- https://github.com/dotnet/coreclr/commit/b06509c4f35212f097345bba7404b47da86b96c5 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/363206f312a73bbf6c2093d78acad58c060ca0c7 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/35f5c097986c53050225bc590c41fa55e5776d85 (gc only port)\r\n- https://github.com/dotnet/coreclr/commit/ee454e11d0c73820dde10ab710f9d6eccd4471f1 (gc only port, omitted changes)\r\n\r\n**Points of interest**:\r\nI suppose https://github.com/dotnet/coreclr/commit/48ebab8270a96e505a2be128a4875f903ef1c4b2 is another case for https://github.com/dotnet/corert/issues/7339 ?","Url":"https://github.com/dotnet/corert/pull/7383","RelatedDescription":"Closed or merged PR \"Port GC changes from coreclr - 6\" (#7383)"},{"Id":"439692824","IsPullRequest":true,"CreatedAt":"2019-05-02T17:08:55","Actor":"Dotnet-GitSync-Bot","Number":"7387","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @krwq @buyaa-n @safern","Url":"https://github.com/dotnet/corert/pull/7387","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#7387)"},{"Id":"438554093","IsPullRequest":true,"CreatedAt":"2019-05-01T21:53:19","Actor":"trylek","Number":"7376","RawContent":null,"Title":"Fixes for deficiencies in generic method & field encoding","State":"closed","Body":"This change seems to be fixing one of the last CPAOT compilation\r\nbuckets by making the logic for emitting field signatures more\r\nrobust. I have also tried to improve the logic for choosing\r\nwhether to emit method instantiation stub to make the import cells\r\nbetter match between CPAOT and Crossgen.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7376","RelatedDescription":"Closed or merged PR \"Fixes for deficiencies in generic method & field encoding\" (#7376)"},{"Id":"439293633","IsPullRequest":true,"CreatedAt":"2019-05-01T19:38:21","Actor":"trylek","Number":"7384","RawContent":null,"Title":"Miscellaneous SuperIlc improvements","State":"open","Body":"1) Add support for release build (--release), for building\r\nand using the native framework (--framework) and just\r\nusing pre-built framework (--use-framework).\r\n\r\n2) Moved bucketing logic from CompileSubtreeCommand to a\r\nnew source file Buckets.cs and modify BuildFolderSet to\r\nautomatically create the bucketing.\r\n\r\n3) Simplified log emission logic, added new table with\r\nper folder error counts and added summary bucketing to the\r\noverall build log.\r\n\r\n4) I have added BuildOptions to CompilerRunner; this\r\nsimplified some methods that previously received various\r\nparts of the BuildOptions via separate parameters.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7384","RelatedDescription":"Open PR \"Miscellaneous SuperIlc improvements\" (#7384)"},{"Id":"439215888","IsPullRequest":true,"CreatedAt":"2019-05-01T17:06:47","Actor":"jkotas","Number":"7382","RawContent":null,"Title":"Delete unnecessary ifdef","State":"closed","Body":"This ifdef is left over from before the async implementation was unified","Url":"https://github.com/dotnet/corert/pull/7382","RelatedDescription":"Closed or merged PR \"Delete unnecessary ifdef\" (#7382)"},{"Id":"438923209","IsPullRequest":true,"CreatedAt":"2019-05-01T03:20:35","Actor":"Dotnet-GitSync-Bot","Number":"7380","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @marek-safar","Url":"https://github.com/dotnet/corert/pull/7380","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7380)"},{"Id":"438822306","IsPullRequest":true,"CreatedAt":"2019-04-30T16:47:16","Actor":"Dotnet-GitSync-Bot","Number":"7379","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @tannergooding","Url":"https://github.com/dotnet/corert/pull/7379","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7379)"},{"Id":"438614083","IsPullRequest":true,"CreatedAt":"2019-04-30T14:51:37","Actor":"Dotnet-GitSync-Bot","Number":"7378","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @EgorBo @GrabYourPitchforks","Url":"https://github.com/dotnet/corert/pull/7378","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7378)"},{"Id":"438579138","IsPullRequest":true,"CreatedAt":"2019-04-30T05:53:33","Actor":"Dotnet-GitSync-Bot","Number":"7377","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @jkotas @dschinde @MichalStrehovsky","Url":"https://github.com/dotnet/corert/pull/7377","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7377)"},{"Id":"438541485","IsPullRequest":true,"CreatedAt":"2019-04-30T02:15:22","Actor":"tannergooding","Number":"7375","RawContent":null,"Title":"Updating MicrosoftNetCompilersToolsetVersion to 3.2.0-beta1-19229-02","State":"closed","Body":"CC. @jaredpar, @agocke, @dotnet/nullablefc\r\n\r\nCoreRT side for dotnet/arcade#2640 and https://github.com/dotnet/buildtools/pull/2248","Url":"https://github.com/dotnet/corert/pull/7375","RelatedDescription":"Closed or merged PR \"Updating MicrosoftNetCompilersToolsetVersion to 3.2.0-beta1-19229-02\" (#7375)"}],"ResultType":"GitHubIssue"},"SDK-Issues":{"Issues":[{"Id":"440938051","IsPullRequest":true,"CreatedAt":"2019-05-06T22:59:32","Actor":"nguerrera","Number":"3208","RawContent":null,"Title":"Extend default AssetTargetFallback up to net48","State":"open","Body":"Before:\r\n```\r\nAssetTargetFallback=net461\r\n```\r\n\r\nAfter:\r\n```\r\nAssetTargetFallback=net461;net462;net47;net471;net472;net48\r\n```\r\n\r\nThis ensures that existing projects do not get different assets, and that the \"oldest\" available assets beyond net461 (deemed most compatible) are used.\r\n\r\nFix #2425 ","Url":"https://github.com/dotnet/sdk/pull/3208","RelatedDescription":"Open PR \"Extend default AssetTargetFallback up to net48\" (#3208)"},{"Id":"440823220","IsPullRequest":true,"CreatedAt":"2019-05-06T18:19:09","Actor":"nugetlurker","Number":"3207","RawContent":null,"Title":"Insert NuGet Build 5.1.0-rtm.6003 into sdk","State":"open","Body":"Insert NuGet Build 5.1.0-rtm.6003 into sdk release/2.1.7xx branch","Url":"https://github.com/dotnet/sdk/pull/3207","RelatedDescription":"Open PR \"Insert NuGet Build 5.1.0-rtm.6003 into sdk\" (#3207)"},{"Id":"440823183","IsPullRequest":true,"CreatedAt":"2019-05-06T18:19:03","Actor":"nugetlurker","Number":"3206","RawContent":null,"Title":"Insert NuGet Build 5.1.0-rtm.6003 into sdk","State":"open","Body":"Insert NuGet Build 5.1.0-rtm.6003 into sdk release/2.2.3xx branch","Url":"https://github.com/dotnet/sdk/pull/3206","RelatedDescription":"Open PR \"Insert NuGet Build 5.1.0-rtm.6003 into sdk\" (#3206)"},{"Id":"440666847","IsPullRequest":true,"CreatedAt":"2019-05-06T12:04:56","Actor":"dotnet-maestro[bot]","Number":"3205","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190505.2\r\n- **Date Produced**: 5/5/2019 2:25 PM\r\n- **Commit**: 6a34948f7bdbc3ceb2fb16441b49f7748a462646\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19255.2\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19255.2\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3205","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/arcade\" (#3205)"},{"Id":"440503432","IsPullRequest":false,"CreatedAt":"2019-05-05T23:35:43","Actor":"imsmart-tech","Number":"3204","RawContent":null,"Title":"Internal error: new deps file generation did not produce the same result as the old logic","State":"open","Body":"Got this error which said to file issue here. So here it goes.\r\n\r\n[ImSmart.deps.json.txt](https://github.com/dotnet/sdk/files/3146159/ImSmart.deps.json.txt)\r\n\r\n[ImSmart.deps.new.json.txt](https://github.com/dotnet/sdk/files/3146160/ImSmart.deps.new.json.txt)\r\n\r\n","Url":"https://github.com/dotnet/sdk/issues/3204","RelatedDescription":"Open issue \"Internal error: new deps file generation did not produce the same result as the old logic\" (#3204)"},{"Id":"440436970","IsPullRequest":true,"CreatedAt":"2019-05-05T13:39:55","Actor":"dotnet-maestro[bot]","Number":"3203","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190504.1\r\n- **Date Produced**: 5/4/2019 12:58 PM\r\n- **Commit**: 1b8589bbf53b9a5e819460798eff59830f39a3be\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19254.1\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19254.1\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3203","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3203)"},{"Id":"440316133","IsPullRequest":true,"CreatedAt":"2019-05-04T13:50:03","Actor":"dotnet-maestro[bot]","Number":"3202","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190503.8\r\n- **Date Produced**: 5/4/2019 2:00 AM\r\n- **Commit**: 4cacf7aa7b2cd8bdd042e721e6ad73d809dd5678\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19253.8\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19253.8\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3202","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3202)"},{"Id":"440251525","IsPullRequest":false,"CreatedAt":"2019-05-03T22:57:23","Actor":"tmat","Number":"3201","RawContent":null,"Title":"GenerateBuildDependencyFile reads incorrect AssemblyVersion","State":"open","Body":"[`GenerateBuildDependencyFile`](https://github.com/dotnet/sdk/blob/7209eb0e66bfba58714af68ddef81115552a4a0c/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.Sdk.targets#L151) target has parameter: `AssemblyVersion=\"$(Version)\"`, which is suspicious because `Version` is not necessarily the same as an `$(AssemblyVersion)`. The target should read `AssemblyVersion` property and add `GetAssemblyVersion` target to its DependsOnTargets.\r\n\r\n","Url":"https://github.com/dotnet/sdk/issues/3201","RelatedDescription":"Open issue \"GenerateBuildDependencyFile reads incorrect AssemblyVersion\" (#3201)"},{"Id":"437881849","IsPullRequest":true,"CreatedAt":"2019-05-03T22:37:23","Actor":"peterhuene","Number":"3183","RawContent":null,"Title":"Import publish profiles in the .NET Core SDK.","State":"closed","Body":"This commit implements importing publish profiles in the .NET Core SDK.\r\n\r\nPreviously, there were two ways to get the publish profile respected when\r\npublishing .NET Core applications:\r\n\r\n* Using the Web SDK, which implicitly imports the `Microsoft.NET.Sdk.Publish`\r\nSDK.\r\n* Explicitly referencing the `Microsoft.NET.Sdk.Publish` SDK in the `Project\r\nelement` (e.g. `Project=\"Microsoft.NET.Sdk;Microsoft.NET.Sdk.Publish\"`).\r\n\r\nThe problem is that the publish profile was being imported *after* many of the\r\nimportant SDK properties (such as RuntimeIdentifier, SelfContained, and\r\nUseAppHost) were defaulted by the .NET Core SDK.  Because the .NET Core SDK\r\ndoes not expect the values of these properties to change once defaulted, users\r\nare unable to set a particular property in the publish profile and get the\r\nexpected behavior in the .NET Core SDK.\r\n\r\nFor example, when setting just the `RuntimeIdentifier` in the publish profile,\r\nit would publish without a RID-subdirectory, not as self-contained, and without\r\nan apphost.  Contrast this to using the `--runtime` option for `dotnet\r\npublish`, which uses a RID-subdirectory and publishes self-contained with an\r\napphost. Up until now, users had to work around this by setting *all* of the\r\ndesired properties in the publish profile that would otherwise be defaulted by\r\nthe .NET Core SDK.\r\n\r\nThe Web SDK fixed this by importing the publish profile *before* the .NET Core\r\nSDK was imported (see aspnet/websdk#534).  However, this could not fix the\r\nproblem for users that have an existing project that directly references the\r\n`Microsoft.NET.Sdk.Publish` SDK.\r\n\r\nTo fix that, the .NET Core SDK will not attempt to import the publish profile\r\nif it hasn't already been imported by the Web SDK.  If the .NET Core SDK\r\nsuccessfully imports the publish profile, it sets a property that prevents the\r\nWeb SDK from attempting to import it.\r\n\r\nFixes #10647.","Url":"https://github.com/dotnet/sdk/pull/3183","RelatedDescription":"Closed or merged PR \"Import publish profiles in the .NET Core SDK.\" (#3183)"},{"Id":"440210201","IsPullRequest":true,"CreatedAt":"2019-05-03T22:17:04","Actor":"johnbeisner","Number":"3200","RawContent":null,"Title":"Use https://github.com/dotnet/sdk as the repository.","State":"closed","Body":"Moving the perf test to helix created a new branch for reporting because the repo is not in GitHub. If we put the GitHub repo on the command line to 'build.py' it should connect to the existing treadline.\r\n\r\n\r\n@jorive \r\n","Url":"https://github.com/dotnet/sdk/pull/3200","RelatedDescription":"Closed or merged PR \"Use https://github.com/dotnet/sdk as the repository.\" (#3200)"},{"Id":"440015542","IsPullRequest":true,"CreatedAt":"2019-05-03T13:51:01","Actor":"dotnet-maestro[bot]","Number":"3199","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190502.2\r\n- **Date Produced**: 5/2/2019 7:00 PM\r\n- **Commit**: ed63a7faf2d119829dd971be91bb46b6ebaa1dd2\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19252.2\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19252.2\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3199","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3199)"},{"Id":"439830421","IsPullRequest":true,"CreatedAt":"2019-05-03T02:51:56","Actor":"dsplaisted","Number":"3198","RawContent":null,"Title":"Use FrameworkList from targeting packs","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/3198","RelatedDescription":"Closed or merged PR \"Use FrameworkList from targeting packs\" (#3198)"},{"Id":"439397373","IsPullRequest":true,"CreatedAt":"2019-05-02T23:24:30","Actor":"dsplaisted","Number":"3195","RawContent":null,"Title":"Add reference to empty Microsoft.NETCore.App package","State":"closed","Body":"The reference to the Microsoft.NETCore.App package is specified via the PackagesToReference metadata on KnownFrameworkReference.  This metadata was added in https://github.com/dotnet/core-sdk/pull/1766, and the package was produced in https://github.com/dotnet/core-setup/pull/5893.\r\n\r\nOnce https://github.com/dotnet/core-setup/issues/6222 is done, this should fix #3044.  This PR also adds a test case for that issue, which is currently skipped.\r\n\r\nThis PR removes the implicit reference to the Microsoft.NETCore.Platforms package, as that will now come in as a dependency of the Microsoft.NETCore.App package.","Url":"https://github.com/dotnet/sdk/pull/3195","RelatedDescription":"Closed or merged PR \"Add reference to empty Microsoft.NETCore.App package\" (#3195)"},{"Id":"439817185","IsPullRequest":true,"CreatedAt":"2019-05-02T22:35:45","Actor":"mmitche","Number":"3197","RawContent":null,"Title":"[release/2*] Move to Azure DevOps","State":"open","Body":"- Autogenerated off of Jenkins configuration\r\n- Applies to release/2.1* and release/2.2* branches\r\n- Removed ubuntu 14.04 configuration","Url":"https://github.com/dotnet/sdk/pull/3197","RelatedDescription":"Open PR \"[release/2*] Move to Azure DevOps\" (#3197)"},{"Id":"439786676","IsPullRequest":false,"CreatedAt":"2019-05-02T21:01:54","Actor":"NinoFloris","Number":"3196","RawContent":null,"Title":"Better way of hooking into \"Before\" Publish","State":"open","Body":"So I was looking around to see if I could redefine some defaults to always be true iff we run a Publish action.\r\n\r\nI could only seem to get there by chaining msbuild gotchas, essentially having a project like:\r\n```proj\r\n<Project>\r\n  <Import Project=\"Sdk.props\" Sdk=\"Microsoft.NET.Sdk\"  />\r\n  <Import Project=\"Sdk.targets\" Sdk=\"Microsoft.NET.Sdk\" />\r\n\r\n  <Target Name=\"OldPublish\" DependsOnTargets=\"_PublishBuildAlternative;_PublishNoBuildAlternative\">\r\n    <!-- Ensure there is minimal verbosity output pointing to the publish directory and not just the\r\n         build step's minimal output. Otherwise there is no indication at minimal verbosity of where\r\n         the published assets were copied. -->\r\n    <Message Importance=\"High\" Text=\"$(MSBuildProjectName) -> $([System.IO.Path]::GetFullPath('$(PublishDir)'))\" />\r\n  </Target>\r\n  \r\n  <Target Name=\"NewDefaults\">\r\n    <PropertyGroup>\r\n       ... Override defaults here\r\n    </PropertyGroup>\r\n  </Target>\r\n  \r\n  <Target Name=\"Publish\"\r\n          DependsOnTargets=\"NewDefaults\"\r\n          Condition=\"$(IsPublishable) == 'true'\">\r\n    \r\n    // We actually need NewDefaults as a separate target to set the props\r\n    // due to a long standing CallTarget bug https://github.com/Microsoft/msbuild/issues/1006\r\n    <CallTarget Targets=\"NewPublish\" />\r\n  </Target>\r\n</Project>\r\n```\r\n\r\nThe pain here is mainly that you cannot get any custom evalution in before `/t: Publish` —  without doing crazy stuff — there's only the indifferent InitialTargets. \r\n\r\nProblem there obviously is if you really need a Target to only run before Publish, not always.\r\n\r\nIs there anything we can do better here?\r\n\r\nIt looks I'm not the first either https://github.com/dotnet/sdk/issues/1039, although there it seems BeforePublish was still a thing.","Url":"https://github.com/dotnet/sdk/issues/3196","RelatedDescription":"Open issue \"Better way of hooking into \"Before\" Publish\" (#3196)"},{"Id":"437465921","IsPullRequest":true,"CreatedAt":"2019-05-02T20:28:01","Actor":"swaroop-sridhar","Number":"3180","RawContent":null,"Title":"Fix ILLink teset flakiness","State":"closed","Body":"When creating the test setup for ILLink tests, do not override RestoreAdditionalProjectSources.\r\nInstead add the test reference project to the existing RestoreAdditionalProjectSources.\r\n\r\nThis fixes a non-detereministic test failure in the ILLink tests.","Url":"https://github.com/dotnet/sdk/pull/3180","RelatedDescription":"Closed or merged PR \"Fix ILLink teset flakiness\" (#3180)"},{"Id":"439378991","IsPullRequest":true,"CreatedAt":"2019-05-02T14:41:25","Actor":"swaroop-sridhar","Number":"3193","RawContent":null,"Title":"Fix ILLink teset flakiness","State":"closed","Body":"This change a non-detereministic test failure in the ILLink tests.\r\n\r\nThere are two changes:\r\n\r\n(1)\r\nWhen creating the test setup for ILLink tests, do not override RestoreAdditionalProjectSources.\r\nInstead add the test reference project to the existing RestoreAdditionalProjectSources.\r\n\r\n(2)\r\nThe tests create a test-library which is published self-contained.\r\nWhile the restore is given a rid, it was not marked as self-contained.\r\nThe SDK did not restore the platform specific NetCoreAPP likely because\r\nthe defaults are differnt for libraries vs executables.","Url":"https://github.com/dotnet/sdk/pull/3193","RelatedDescription":"Closed or merged PR \"Fix ILLink teset flakiness\" (#3193)"},{"Id":"439388061","IsPullRequest":false,"CreatedAt":"2019-05-02T00:41:00","Actor":"nguerrera","Number":"3194","RawContent":null,"Title":"net472 to netstandard1.3 -> extra diagnostics dll ","State":"open","Body":"Repro steps:\r\n\r\n* Extract [ds.zip](https://github.com/dotnet/sdk/files/3136412/ds.zip) somewhere\r\n* `dotnet build` the `app` project\r\n* Look at bin\\Debug\\net472, notice extra S.D.DiagnosticSource.dll\r\n\r\n![image](https://user-images.githubusercontent.com/75470/57051775-f622fd00-6c37-11e9-8144-d382f6a2511d.png)\r\n\r\nThis is coming transitively from the netstandard.library 1.6.1 implicit ref in lib.csproj. Recall that netstandard1.x projects don't get privateassets=\"all\" applied to that.\r\n\r\nBut, regardless, why does this assembly survive conflict resolution, etc. net472 should be able to consume netstandard1.x without app-local framework assemblies.\r\n\r\nI'm not sure if this is a regression, but I'm very surprised that I haven't heard about it before, so it may well have crept in.\r\n\r\ncc @dsplaisted @ericstj \r\n","Url":"https://github.com/dotnet/sdk/issues/3194","RelatedDescription":"Open issue \"net472 to netstandard1.3 -> extra diagnostics dll \" (#3194)"},{"Id":"439319446","IsPullRequest":true,"CreatedAt":"2019-05-01T20:50:49","Actor":"sbomer","Number":"3192","RawContent":null,"Title":"Locate dotnet host for illink on desktop","State":"open","Body":"When running on full framework MSBuild, the environment variable `DOTNET_HOST_PATH` is not set, causing the linker to fail. This was not caught by the SDK tests because they are started by a test process that uses the dotnet cli, so this includes a change to prevent `DOTNET_HOST_PATH` from propagating to the MSBuild process.\r\n\r\nFor the desktop MSBuild case, I believe the correct thing to do is to use the dotnet host that comes with the SDK that is being used to build the app, so I'm trying to explicitly pass the location of that host (rather than searching the `PATH`, for example). @dsplaisted and @nguerrera does that sound right to you, or should I be doing something else?\r\n\r\nThe current fix has a problem: the relative path from the targets file to the dotnet host is correct for an actual product SDK, but because the tests run against a different layout, the computed location is incorrect when tests are run. @dsplaisted, @nguerrera do you have any suggestions? Perhaps the SDK already has some information about the dotnet host location that I can reuse.","Url":"https://github.com/dotnet/sdk/pull/3192","RelatedDescription":"Open PR \"Locate dotnet host for illink on desktop\" (#3192)"},{"Id":"439242933","IsPullRequest":true,"CreatedAt":"2019-05-01T17:16:10","Actor":"nugetlurker","Number":"3191","RawContent":null,"Title":"Insert NuGet Build 5.0.2-rtm.5988 into sdk","State":"open","Body":"Insert NuGet Build 5.0.2-rtm.5988 into sdk release/2.1.6xx branch","Url":"https://github.com/dotnet/sdk/pull/3191","RelatedDescription":"Open PR \"Insert NuGet Build 5.0.2-rtm.5988 into sdk\" (#3191)"},{"Id":"439242915","IsPullRequest":true,"CreatedAt":"2019-05-01T17:16:07","Actor":"nugetlurker","Number":"3190","RawContent":null,"Title":"Insert NuGet Build 5.0.2-rtm.5988 into sdk","State":"open","Body":"Insert NuGet Build 5.0.2-rtm.5988 into sdk release/2.2.2xx branch","Url":"https://github.com/dotnet/sdk/pull/3190","RelatedDescription":"Open PR \"Insert NuGet Build 5.0.2-rtm.5988 into sdk\" (#3190)"},{"Id":"437847425","IsPullRequest":true,"CreatedAt":"2019-04-30T22:20:42","Actor":"dsplaisted","Number":"3182","RawContent":null,"Title":"WIP -  Reference empty packages","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/3182","RelatedDescription":"Closed or merged PR \"WIP -  Reference empty packages\" (#3182)"},{"Id":"438903776","IsPullRequest":true,"CreatedAt":"2019-04-30T22:20:39","Actor":"dsplaisted","Number":"3189","RawContent":null,"Title":"Update Stage 0, fix package feeds","State":"closed","Body":"This stage 0 removes the implicit package feeds for internal builds, so this PR corrects those for the SDK build and test.","Url":"https://github.com/dotnet/sdk/pull/3189","RelatedDescription":"Closed or merged PR \"Update Stage 0, fix package feeds\" (#3189)"},{"Id":"438516330","IsPullRequest":true,"CreatedAt":"2019-04-30T19:40:05","Actor":"sbomer","Number":"3187","RawContent":null,"Title":"Update stage0","State":"closed","Body":"To get the linker fix in https://github.com/mono/linker/pull/551\r\n/cc @swaroop-sridhar","Url":"https://github.com/dotnet/sdk/pull/3187","RelatedDescription":"Closed or merged PR \"Update stage0\" (#3187)"},{"Id":"438551516","IsPullRequest":true,"CreatedAt":"2019-04-30T19:40:02","Actor":"sbomer","Number":"3188","RawContent":null,"Title":"Fix dotnet-core feed url in Versions.props","State":"closed","Body":"This fixes some build failures I was seeing locally, where the\r\nMicrosoft.NET.HostModel package was not found.\r\n\r\nI wonder if it may be related to the restore failures we were seeing elsewhere @peterhuene.","Url":"https://github.com/dotnet/sdk/pull/3188","RelatedDescription":"Closed or merged PR \"Fix dotnet-core feed url in Versions.props\" (#3188)"},{"Id":"437957511","IsPullRequest":false,"CreatedAt":"2019-04-30T00:35:08","Actor":"sdmaclea","Number":"3185","RawContent":null,"Title":"ProjectReference to classlib does not layout satellites correctly.","State":"closed","Body":"Observed in the tip of corefx\r\n\r\nGiven a project reference to a classlib with satellite assemblies\r\nBuild of the cliant app laysout the build incorrectly. Satellites are not in the correct directories.\r\nCulture directory is absent in target layout.\r\n\r\n```bash\r\nfind /Users/stmaclea/git/corefx/artifacts/bin/tests -name ReferencedClassLib.resources.dll\r\n/Users/stmaclea/git/corefx/artifacts/bin/tests/System.Runtime.Loader.Tests/netcoreapp-OSX-Debug-x64/ReferencedClassLib.resources.dll\r\n/Users/stmaclea/git/corefx/artifacts/bin/tests/ReferencedClassLib/netcoreapp-OSX-Debug-x64/en/ReferencedClassLib.resources.dll\r\n``` \r\n```xml\r\n<ProjectReference Include=\"ReferencedClassLibNeutralIsSatellite\\ReferencedClassLibNeutralIsSatellite.csproj\" />\r\n```\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <ProjectGuid>{2CD5A44C-65B4-4C51-AC7B-B2938307848A}</ProjectGuid>\r\n    <Configurations>netcoreapp-Debug;netcoreapp-Release;uap-Debug;uap-Release</Configurations>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <Compile Include=\"ReferencedClassLib.cs\" />\r\n    <EmbeddedResource Include=\"ReferencedStrings*.resx\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThis is blocking writing proper satellite testing for classlibs in corefx.\r\n\r\nReported in dotnet/corefx#37246.  Relevant code above is from dotnet/corefx#37248\r\n","Url":"https://github.com/dotnet/sdk/issues/3185","RelatedDescription":"Closed issue \"ProjectReference to classlib does not layout satellites correctly.\" (#3185)"},{"Id":"438256811","IsPullRequest":false,"CreatedAt":"2019-04-29T10:52:35","Actor":"springy76","Number":"3186","RawContent":null,"Title":"adding to CreateSatelliteAssembliesDependsOn broken for Microsoft.NET.Sdk.WindowsDesktop?","State":"open","Body":"I converted an existing old-style `.csproj` WPF project targeting net472 to the new-style .csproj format using `Sdk=\"Microsoft.NET.Sdk.WindowsDesktop\"` + `<UseWPF>true</UseWPF>` (SDK 3.0 preview4 is installed) -- still targeting net472.\r\n\r\nLocalization was realized for many years by hooking into build process by this line (at least this is the only reference I found leading to the custom task `CreateLocBamlSatellites`):\r\n```xml\r\n<CreateSatelliteAssembliesDependsOn>$(CreateSatelliteAssembliesDependsOn);CreateLocBamlSatellites</CreateSatelliteAssembliesDependsOn>\r\n```\r\n\r\nIs this something which will come back to life in later previews or should this be done differently?\r\n\r\n**Update**: I changed build output verbosity to detailed and spotted this:\r\n```\r\n1>Property reassignment: $(CreateSatelliteAssembliesDependsOn)=\"\r\n1>      _GenerateSatelliteAssemblyInputs;\r\n1>      ComputeIntermediateSatelliteAssemblies;\r\n1>      GenerateSatelliteAssemblies\r\n1>    \" (previous value: \";CreateLocBamlSatellites\") at C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Preview\\MSBuild\\Current\\Bin\\Microsoft.Common.CurrentVersion.targets (3573,5)\r\n```\r\n\r\nMy .targets file (included by `<Import Project=`)  which includes the code above already is the last line before `</Project>`.\r\n\r\n**Update2**:\r\nOriginally the `<Include` was below this line:\r\n```xml\r\n<Import Project=\"$(MSBuildToolsPath)\\Microsoft.CSharp.targets\" />\r\n```\r\nbut inserting this line breaks the entire build:\r\n> C:\\Program Files\\dotnet\\sdk\\3.0.100-preview4-011223\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.PackageDependencyResolution.targets(233,5): error NETSDK1005: Assets file 'MyProject\\obj\\project.assets.json' doesn't have a target for '.NETFramework,Version=v4.0'. Ensure that restore has run and that you have included 'net40' in the TargetFrameworks for your project.","Url":"https://github.com/dotnet/sdk/issues/3186","RelatedDescription":"Open issue \"adding to CreateSatelliteAssembliesDependsOn broken for Microsoft.NET.Sdk.WindowsDesktop?\" (#3186)"},{"Id":"437882972","IsPullRequest":true,"CreatedAt":"2019-04-27T00:01:40","Actor":"dotnet-bot","Number":"3184","RawContent":null,"Title":"Merge release/3.0.1xx to master","State":"open","Body":"\nThis is an automatically generated pull request from release/3.0.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3184","RelatedDescription":"Open PR \"Merge release/3.0.1xx to master\" (#3184)"},{"Id":"437640705","IsPullRequest":true,"CreatedAt":"2019-04-26T12:04:17","Actor":"dotnet-maestro[bot]","Number":"3181","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190425.5\r\n- **Date Produced**: 4/25/2019 6:25 PM\r\n- **Commit**: d37270268a65592cae630f1b979b70f74d4614dd\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19225.5\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19225.5\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190425.5\r\n- **Date Produced**: 4/25/2019 6:25 PM\r\n- **Commit**: d37270268a65592cae630f1b979b70f74d4614dd\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19225.5\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19225.5\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190425.5\r\n- **Date Produced**: 4/25/2019 6:25 PM\r\n- **Commit**: d37270268a65592cae630f1b979b70f74d4614dd\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19225.5\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19225.5\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190426.3\r\n- **Date Produced**: 4/26/2019 5:53 PM\r\n- **Commit**: 7bec23ce3da545d97f53f99abce457a2e252aa58\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19226.3\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19226.3\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190429.8\r\n- **Date Produced**: 4/30/2019 5:30 AM\r\n- **Commit**: a7a250e9c13147134543c35fef2fb81f19592edf\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19229.8\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19229.8\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190430.6\r\n- **Date Produced**: 4/30/2019 10:17 PM\r\n- **Commit**: ac8d88df02d246d3147338fcfb03b1b93dc84b53\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19230.6\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19230.6\r\n\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190501.6\r\n- **Date Produced**: 5/2/2019 7:15 AM\r\n- **Commit**: ea9b2530a1559dd6426730aba52fca1924db2b65\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19251.6\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19251.6\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3181","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/arcade\" (#3181)"},{"Id":"437399381","IsPullRequest":true,"CreatedAt":"2019-04-26T01:00:46","Actor":"dsplaisted","Number":"3179","RawContent":null,"Title":"Fix KeyNotFoundException in GenerateDepsFile task","State":"closed","Body":"This would occur when there was a library in the assets file with a dependency on a library that wasn't in the assets file.\r\n\r\nFixes #3159","Url":"https://github.com/dotnet/sdk/pull/3179","RelatedDescription":"Closed or merged PR \"Fix KeyNotFoundException in GenerateDepsFile task\" (#3179)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"435015242","IsPullRequest":false,"CreatedAt":"2019-04-19T01:16:10","Actor":"MichaelSimons","Number":"110","RawContent":null,"Title":"New images for .NET Framework 4.8","State":"open","Body":"# New images for .NET Framework 4.8\r\n\r\nNew images have been released with support for [.NET Framework 4.8 runtime and SDK](https://devblogs.microsoft.com/dotnet/announcing-the-net-framework-4-8/).\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#271](https://github.com/Microsoft/dotnet-framework-docker/issues/271)\r\n\r\n## Details\r\n* Pull request: #270\r\n\r\nYou can access these new images with the following tags:\r\n* `mcr.microsoft.com/dotnet/framework/runtime:4.8`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.8`\r\n\r\nIn addition, the `latest` tag has been updated to refer to these new 4.8 images.\r\n\r\nCheck out the readme files for more information on the latest tags:\r\n* [Runtime](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.runtime.md)\r\n* [SDK](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.sdk.md)\r\n\r\nThe [3.5 SDK](https://github.com/Microsoft/dotnet-framework-docker/tree/master/3.5/sdk) images are intended to always contain the latest .NET Framework SDK and have also been updated to use the 4.8 SDK.","Url":"https://github.com/dotnet/announcements/issues/110","RelatedDescription":"Open issue \"New images for .NET Framework 4.8\" (#110)"},{"Id":"433297298","IsPullRequest":false,"CreatedAt":"2019-04-15T13:57:07","Actor":"MichaelSimons","Number":"109","RawContent":null,"Title":".NET Framework SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Framework SDK container images now contain the Visual Studio 2019 toolset\r\n.NET Framework SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add additional tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Framework SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Framework SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#269](https://github.com/Microsoft/dotnet-framework-docker/issues/269)\r\n\r\n## Details\r\nVisual Studio 2019 was released on April 2, 2019. We updated the .NET Framework SDK container images, on the same day, to include a new version of the .NET Framework SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag (e.g. mcr.microsoft.com/dotnet/framework/sdk:4.7.2-20190312-windowsservercore-ltsc2019).\r\n\r\nRelated pull request: [#252](https://github.com/Microsoft/dotnet-framework-docker/pull/252)","Url":"https://github.com/dotnet/announcements/issues/109","RelatedDescription":"Open issue \".NET Framework SDK container images now contain the Visual Studio 2019 toolset\" (#109)"},{"Id":"432735158","IsPullRequest":false,"CreatedAt":"2019-04-12T20:35:55","Actor":"KathleenDollard","Number":"108","RawContent":null,"Title":".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017","State":"open","Body":"# .NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\r\n\r\n.NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017. For example, 2.2.203 and 2.1.603 cause failures in Visual Studio 2017. To work on projects in Visual Studio 2017, use .NET Core SDK 2.2.1nn and 2.1.5nn, such as 2.2.106 and 2.1.506. You can install any combination of these SDKs side by side.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3124](https://github.com/dotnet/sdk/issues/3124)\r\n\r\n## Details\r\n\r\nYou can find the SDKs on you machine using the following at a command prompt:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2. Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nIf you downloaded the .NET Core SDK 2.2 between April 2 and April 12, 2019, the main [.NET downloads page](https://dotnet.microsoft.com/download/) included only 2.2.2nn. Starting April 12th, a new button marked \"Compatible with Visual Studio 2017\" is provided to target 2.2.1nn. If you downloaded 2.2 prior to this date, and you use Visual Studio 2017, install the compatible version.\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nThis problem most often occurs because you manually uninstall the 2.1.5nn version. Simply reinstall it from the [.NET Core 2.1 downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n## More information\r\n\r\nHere is the draft of an article we are preparing for .NET Core documentation:\r\n\r\n---\r\n\r\n## Solving Problems with .NET Core SDK Selection in Visual Studio\r\n\r\nYou may have .NET Core SDKs on your machine and still have problems with Visual Studio finding an appropriate one. This article explains why this happens and how you can fix your installation.\r\n\r\nWhen Visual Studio can't find an appropriate version of the .NET Core SDK, you'll receive an error message. This may appear in the Error pane as NETSDK1045:\r\n\r\n\"The current .NET SDK does not support targeting .NET Core 2...\"\r\n\r\nYou can check what .NET Core SDKs you have on your machine with the following command:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\nUnless you have a global.json file, when you use `dotnet` from the command line, the latest .NET Core SDK is used.\r\n\r\n> [TIP!] \r\n> Open a command prompt and try to build with `dotnet build`. If the command line build works, but Visual Studio doesn't suggestions in this article may help.\r\n\r\nThe last two digits of the .NET Core SDK version numbers are in the format are a patch number, which is represented by `nn` in this article because we will continue to service them to include the latest runtimes. To find out more, vist the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\n## Fixes for Common Problems\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2… Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.2.1nn. As an example, 2.2.106 would be a valid entry.\r\n\r\nIf you downloaded the .NET Core SDK 2.2 after April 2, 2019, version 2.2.2nn (such as 2.2.203) is listed first and is the highest version available. However, Visual Studio 2017 requires 2.2.1nn (such as 2.2.106). .NET Core SDK 2.2.2nn works with Visual Studio 2019. Visual Studio 2017 and Visual Studio 2019 can be installed side by side, but this requires both .NET Core SDK 2.2.1nn and .NET Core SDK 2.2.2nn to develop .NET Core 2.2 applications.\r\n\r\nTo download .NET Core SDK 2.2.2nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.1.5nn. As an example, 2.1.505 would be a valid entry. \r\n\r\nThis problem occurs of you manually uninstall the 2.1.5nn version.\r\n\r\nThe Visual Studio 2019 installation will not remove this file and Visual Studio 2017 will continue to work side by side.\r\n\r\nTo reinstall .NET Core SDK 2.1.5nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n### Visual Studio 2019 can't target .NET Core 3.0 Preview\r\n\r\nIf you receive this error message in Visual Studio 2019:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 3.0.100-preview... As an example, SDK 3.0.100-preview3-010431 would be a valid entry.\r\n\r\nTo install .NET Core SDK 3.0.1nn preview, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/3.0).\r\n\r\nIn Visual Studio, go to `Tools\\Options\\Projects and Solutions\\.NET Core` and check the box `Use Previews of the .NET Core SDK`.\r\n\r\n> [NOTE!]\r\n> This option will be moving to `Tools\\Options\\Environment` and renamed `Preview Features` in Visual Studio 2019 version 16.1 Preview 2.\r\n\r\nIf you are targeting .NET Core 3.0 preview, the [C# language version will be C# 8.0 Preview by default](https://docs.microsoft.com/en-us/visualstudio/releases/2019/release-notes#csharp-defaults) allowing you to use new C# features.\r\n\r\n## Understand the relationship between .NET Core SDKs and Visual Studio build tools\r\n\r\nVisual Studio has its own copies of tools like MSBuild, NuGet and the compilers. If you install the .NET Core workload, it also installs the .NET Core SDK which has versions of these tools and provides tasks and targets. These two versions are built from the same repositories, but target .NET Framework and .NET Core respectively. \r\n\r\nWhen you build a .NET Core project in Visual Studio, it uses Visual Studio's copy of MSBuild, but the tasks and targets are supplied from the selected version of the .NET Core SDK. \r\n\r\nWhen you upgrade the .NET Core SDK, you get new tasks and targets. These new tasks and targets may contain features that are not supported by older versions of MSBuild. Like all of the .NET Core SDK, MSBuild is backwards compatible. It is not forwards compatible.\r\n\r\nThis generally works well, but requires a guarantee that the tasks and targets work with the MSBuild version. To ensure this, each .NET Core SDK indicates an MSBuild version range that is used by Visual Studio to determine compatibility. Versions of the .NET Core SDK that have a higher MSBuild identifier than expected are ignored by Visual Studio. In the normal case, this simply means you use the tasks and targets that were installed with your version of Visual Studio.\r\n\r\nBecause of this, you may have many versions of the .NET Core SDK on your machine and Visual Studio still fail to find one it considers appropriate. This is compounded by a poor error message, which we cannot fully correct because it is from the old version of the .NET Core SDK on your machine. Confusion is also compounded by a complex non-linear release matrix that makes it difficult to predict the right .NET Core SDK to select. We are working to improve all this. \r\n\r\n## The Visual Studio / .NET Core SDK support matrix\r\n\r\nThe last two digits of the .NET Core SDK version number are a patch number, which are represented by a `nn` in this table. You can learn more about .NET Core SDK and .NET Core Runtime versioning at the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\nThe following table shows which Visual Studio versions and .NET Core SDKs are compatible and how they are acquired if you are working with Visual Studio. \r\n\r\n| .NET Core SDK | .NET Core Runtime | Compatible Visual Studio | MSBuild | Notes                                     |\r\n|---------------|-------------------|--------------------------|---------|-------------------------------------------|\r\n| 2.1.5nn       | 2.1               | 2017                     | 15      | Installed as part of VS 2017 version 15.9 |\r\n| 2.1.6nn       | 2.1               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 2.2.1nn       | 2.2               | 2017                     | 15      | Installed manually                        |\r\n| 2.2.2nn       | 2.2               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 3.0.1nn       | 3.0 (Preview)     | 2019                     | 16      | Installed manually                        |\r\n\r\nVisual Studio 2017 cannot work with .NET Core SDK 2.1.6nn or 2.2.2nn.\r\n\r\nTo find out more about removing older versions of the .NET Core Runtime and .NET Core SDK, visit the [How to remove the .NET Core Runtime and SDK page](https://docs.microsoft.com/en-us/dotnet/core/versions/remove-runtime-sdk-versions?tabs=macos).\r\n\r\nTo download the .NET Core SDK, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core).","Url":"https://github.com/dotnet/announcements/issues/108","RelatedDescription":"Open issue \".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\" (#108)"},{"Id":"432081093","IsPullRequest":false,"CreatedAt":"2019-04-11T15:16:43","Actor":"KathleenDollard","Number":"107","RawContent":null,"Title":"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below","State":"open","Body":"# Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\r\n\r\n.NET Core 3 takes the next step in the .NET Core tool strategy with local tools. As part of this process, starting in Preview 4 DotNetCliToolReference tools will be restricted to targeting .NET Core 2.2 and below. DotNetCliToolReference tools can be used in projects targeting .NET Core 3.0, but the tools themselves should target .NET Core 2.2 or below.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3115](https://github.com/dotnet/sdk/issues/3115)\r\n\r\n## Details\r\n\r\nThe suggested approach going forward is to to use [.NET Core Local Tools](https://aka.ms/local-tools) when you want a tool that is specific to a project or repository. At the same time we are removing the need to access local tools by the verbose `dotnet tool run <toolname>` that was present in earlier previews. You can now access local tools via `dotnet <toolname>`.\r\n\r\nDotNetCliToolReference tools have a flaw in how their dependencies are restored which can create [difficult to diagnose bugs when running these tools](https://github.com/NuGet/Home/issues/5067). This issue would occur much more frequently if targeting .NET Core 3.0 was allowed. Restricting tools to target only .NET Core 2.2 and below means existing scenarios to continue to work (as well as they previously did), regardless of the framework version targeted by the project or the current .NET Core SDK. \r\n\r\nThe new .NET Core tool strategy avoids this flaw in restore strategy and offers other benefits, like the ability to author one type of tool and install it in different ways depending on project and user needs.\r\n\r\nWe look forward to your feedback on .NET Core Local Tools, and on challenges you face moving away from DotNetCliToolReference tools. \r\n\r\n[dotnet/sdk #3057](https://github.com/dotnet/sdk/pull/3057)","Url":"https://github.com/dotnet/announcements/issues/107","RelatedDescription":"Open issue \"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\" (#107)"},{"Id":"431012407","IsPullRequest":false,"CreatedAt":"2019-04-09T14:51:18","Actor":"MichaelSimons","Number":"106","RawContent":null,"Title":".NET Core SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Core SDK container images now contain the Visual Studio 2019 toolset\r\n\r\n.NET Core SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add *additional* tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Core SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Core SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1042](https://github.com/dotnet/dotnet-docker/issues/1042)\r\n\r\n## Details\r\n\r\n[Visual Studio 2019](https://devblogs.microsoft.com/visualstudio/visual-studio-2019-code-faster-work-smarter-create-the-future/) was released on April 2, 2019. We updated the .NET Core SDK container images, on the same day, to include a new version of the .NET Core SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag:\r\n\r\n* 2.1: `mcr.microsoft.com/dotnet/core/sdk:2.1.505`\r\n* 2.2: `mcr.microsoft.com/dotnet/core/sdk:2.2.105`\r\n\r\nDetails:\r\n\r\n* [dotnet/dotnet-docker #1029](https://github.com/dotnet/dotnet-docker/pull/1029)\r\n* [2.1 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.602-SDK/2.1.602-SDK.md)\r\n* [2.2 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.202-SDK/2.2.202-SDK.md)\r\n\r\n## Known Breaking Changes for SDK images (VS 2017 to VS 2019 upgrade)\r\n\r\nThe following issues and breaks have been discovered.\r\n \r\n### Test Log File Name Change\r\n\r\nA change was introduced to the `dotnet test` command when a user-defined log file name is specified.  In the previous version the resulting log file would be named exactly as specified.  In the current version, the log file is named with a timestamp suffix automatically added to the user-defined name.  \r\n\r\nDetails:\r\n* [Microsoft/vstest #1603](https://github.com/Microsoft/vstest/issues/1603) \r\n* [Microsoft/vstest#1876](https://github.com/Microsoft/vstest/issues/1876)","Url":"https://github.com/dotnet/announcements/issues/106","RelatedDescription":"Open issue \".NET Core SDK container images now contain the Visual Studio 2019 toolset\" (#106)"},{"Id":"431003701","IsPullRequest":false,"CreatedAt":"2019-04-09T14:35:39","Actor":"MichaelSimons","Number":"105","RawContent":null,"Title":"Windows Server, version 1709 no longer Supported by .NET Framework","State":"open","Body":"# Windows Server, version 1709 no longer Supported by .NET Framework\r\n\r\nWindows Server, version 1709 is no longer supported. As a result, this version of Windows is no longer supported by the .NET Team and we will no longer produce .NET Framework container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Framework Docker images](https://hub.docker.com/_/microsoft-dotnet-framework)\r\n* [.NET Framework Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-framework)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-framework-docker #259](https://github.com/Microsoft/dotnet-framework-docker/issues/259)\r\n\r\n## Details\r\n\r\nDocker tags that contain `windowsservercore-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Windows Server and .NET Framework.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `4.7.1`, and  `4.7.2`. These are tags that are supported on multiple operating systems and versions, and do  not contain the operating system in them. As a result of no longer producing new images for Windows Server, version 1709, manifest tags no longer include entries for Windows 10, version 1709, and Windows Server,version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.17134-based image is incompatible with a 10.0.16299 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Windows Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Windows Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/framework/runtime:4.7.2-windowsservercore-1709` or `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-windowsservercore-1709`.","Url":"https://github.com/dotnet/announcements/issues/105","RelatedDescription":"Open issue \"Windows Server, version 1709 no longer Supported by .NET Framework\" (#105)"},{"Id":"430998341","IsPullRequest":false,"CreatedAt":"2019-04-09T14:25:57","Actor":"MichaelSimons","Number":"104","RawContent":null,"Title":"Nano Server 2016 and 1709 no longer Supported by .NET Core","State":"open","Body":"# Nano Server 2016 and 1709 no longer Supported by .NET Core\r\n\r\nNano Server 2016 and Nano Server, version 1709 are no longer supported. As a result, these versions of Windows are no longer supported by the .NET Team and we will no longer produce .NET Core container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Core Docker images](https://hub.docker.com/_/microsoft-dotnet-core)\r\n* [.NET Core Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-core)\r\n* [Products Reaching End of Support for 2018](https://support.microsoft.com/en-us/help/4043450/products-reaching-end-of-support-for-2018)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\nWe previously announced Nano Server 2016 going out of support in [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/). That post is still accurate.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1041](https://github.com/dotnet/dotnet-docker/issues/1041)\r\n\r\n## Details\r\n\r\nDocker tags that contain `nanoserver-sac2016` and `nanoserver-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Nano Server and .NET Core.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `2.1`, `2.1-sdk`, `2.2.1-runtime`. These are tags that are supported on multiple operating systems, and do not contain the operating system in them. As a result of no longer producing new images for Nano Server 2016 and Nano Server, version 1709, manifest tags no longer include entries for Nano Server 2016, Windows Server 2016, Windows 10, version 1607, Windows 10, version 1709, and Windows Server, version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.16299-based image is incompatible with a 10.0.14393 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Nano Server 2016 or Nano Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Nano Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-sac2016` or `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-1709`.\r\n\r\n### Nano Server Support\r\n\r\n.NET Core is supported on Nano Server, version 1803 and later. \r\n\r\n.NET Core 2.x and 3.0 images are available for all supported versions of Nano Server, version 1803 and later. This means that 2.x and 3.0 manifest tags can be used on Windows 10, version 1803+, and Windows Server, version 1803+. You can also use non-manifest tags for those versions, too, such as `2.2-nanoserver-1809`.\r\n\r\n.NET Core 1.x images are available for Nano Server, version 1809 and later. This means that 1.x manifest tags can be used on Windows 10, version 1809+, Windows Server, version 1809+ and Windows Server 2019. You can also use non-manifest tags for those versions, too, such as `1.1-nanoserver-1809` tag.","Url":"https://github.com/dotnet/announcements/issues/104","RelatedDescription":"Open issue \"Nano Server 2016 and 1709 no longer Supported by .NET Core\" (#104)"},{"Id":"420117627","IsPullRequest":false,"CreatedAt":"2019-03-12T17:35:16","Actor":"vivmishra","Number":"103","RawContent":null,"Title":"March 2019 .NET Updates","State":"open","Body":"# March 2019 .NET Updates\r\n\r\nThe following .NET updates were released in March 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework March 2019 Update - March 19, 2019](https://devblogs.microsoft.com/dotnet/net-framework-march-2019-update/)\r\n* [.NET Framework April 2, 2019 Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - April 2, 2019](https://devblogs.microsoft.com/dotnet/net-framework-april-2-2019-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.15 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.15/1.0.15.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.12/1.1.12.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.9 and .NET Core SDK 2.1.505 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.9/2.1.9.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.3 and .NET Core SDK 2.2.105 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.3/2.2.3.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2432](https://github.com/dotnet/core/issues/2432)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/103","RelatedDescription":"Open issue \"March 2019 .NET Updates\" (#103)"},{"Id":"415363751","IsPullRequest":false,"CreatedAt":"2019-02-27T22:49:51","Actor":"leecow","Number":"102","RawContent":null,"Title":"SDK Installers will remove previous patch versions","State":"open","Body":"The SDK Installers for Windows will upgrade patch versions in place within the same feature band. This will reduce the number of SDKs that are installed on programmer machines.\r\n\r\nFeature bands of the SDK are defined like 3.0.1nn. [Find out more about SDK version numbers](https://docs.microsoft.com/dotnet/core/versions/#versioning-details).\r\n\r\nThis means when .NET Core SDK 3.0.101 becomes available and is installed, .NET Core SDK 3.0.100 will be removed from the machine if it exists. When .NET Core SDK 3.0.200 becomes available and is installed on the same machine, .NET Core SDK versions like 3.0.101 will not be removed but stay side by side with 3.0.200.\r\n\r\nThis approach supports use of `global.json` which will roll forward across patch versions, but not feature bands of the SDK. Thus, upgrading via the SDK installer will not result in errors due to a missing SDK. Feature bands also align with side by side Visual Studio installations for those users that install SDKs for Visual Studio use. For example, Visual Studio 15.9 uses .NET Core SDK 2.2.500 but does not support .NET Core SDK 2.2.600.\r\n\r\nFind out how to [remove other .NET Core SDK versions here.](https://docs.microsoft.com/dotnet/core/versions/remove-runtime-sdk-versions).","Url":"https://github.com/dotnet/announcements/issues/102","RelatedDescription":"Open issue \"SDK Installers will remove previous patch versions\" (#102)"},{"Id":"410971363","IsPullRequest":false,"CreatedAt":"2019-02-15T22:24:40","Actor":"richlander","Number":"101","RawContent":null,"Title":"Publishing .NET Core images to Microsoft Container Registry (MCR)","State":"open","Body":"# Publishing .NET Core images to Microsoft Container Registry (MCR)\r\n\r\nMicrosoft teams are now publishing container images to the [Microsoft Container Registry](https://azure.microsoft.com/en-us/blog/microsoft-syndicates-container-catalog/). There are two primary reasons for this change:\r\n\r\n* Syndicate Microsoft-provided container images to multiple registries, like Docker Hub and Red Hat.\r\n* Use Microsoft Azure as a global CDN for delivering Microsoft-provided container images.\r\n\r\nYou will use and see MCR as a storage back-end for Microsoft images. The primary way you learn about Microsoft container images and tags will be through a registry, which for most users will continue to be Docker Hub. Most of the experience you've had browsing for .NET Core container images will continue unchanged with this new model. The Docker Hub URLs you've used for Microsoft repos will continue to work, and forward to updated locations on Docker Hub. Existing Docker Hub will images will be maintained as-is.\r\n\r\nSee [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/) for the most updated information on our use of MCR.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #935](https://github.com/dotnet/dotnet-docker/issues/935)\r\n\r\n## Starting with .NET Core nightly repo\r\n\r\nOn the .NET team, we started our [transition to MCR](https://github.com/dotnet/dotnet-docker/issues/745) with the .NET Core \"nightly\" repo. [dotnet-nightly](dockerhub.com/r/microsoft/dotnet-nightly) is now hosted on MCR and syndicated to Docker Hub. We started with the nightly repo in order to discover and fix any challenges we found with this new model before we move our higher-traffic primary container repository.\r\n\r\nWe will start publishing [dotnet](dockerhub.com/r/microsoft/dotnet) to MCR a bit later, in either February or March. This issue will be updated when that happens.\r\n\r\n## Repo Split\r\n\r\nThe [.NET Core repo](https://hub.docker.com/r/microsoft/dotnet) currently includes 4 major categories of tags: \r\n\r\n* `sdk`\r\n* `aspnetcore-runtime`\r\n* `runtime` \r\n* `runtime-deps`\r\n\r\nProviding all of the tags in one place has helped with discoverability but made for a repo with an enormous README that can be challenging to navigate and consume. It is large enough that we exceeded Docker Hub README limits and had to artificially make it smaller.\r\n\r\nGoing forward, we will provide a repo for each of the tag categories listed above. We'll also provide a \"product repo\" that will hierarchicaly group all of our repos together. This will satisfy discoverability needs so that it will be easy to find the tags you want.\r\n\r\nYou can already see this experience with [microsoft-dotnet-core-nightly](https://hub.docker.com/_/microsoft-dotnet-core-nightly). There are now multiple repos for our nightly builds:\r\n\r\n* [.NET Core Nightly product repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly)\r\n* [.NET Core SDK Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-sdk/)\r\n* [.NET Core ASP.NET Core Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-aspnet/)\r\n* [.NET Core Runtime Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime/)\r\n* [.NET Core Runtime-deps Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime-deps/)\r\n\r\nThe same split will exist for the non-nightly stable repo (currently hosted at  [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet)) when we start publishing it to MCR and syndicating it back to DockerHub.\r\n\r\n## Changes to registry URL\r\n\r\nThe biggest change is that your Dockerfiles need to be updated to point to the MCR registry in order get access to new .NET Core container tags. The same change is required for scripts or human operations that pull images via `docker pull`.\r\n\r\nThe following example shows the registry path, repo and tag for the .NET Core 2.2 \"Nightly\" SDK on MCR:\r\n\r\n```console\r\nmcr.microsoft.com/dotnet/core-nightly/sdk:2.2\r\n```\r\n\r\nAs comparison, the following repo and tag have been used to date for the .NET Core 2.2 \"Nightly\" SDK on Docker Hub:\r\n\r\n```console\r\nmicrosoft/dotnet-nightly:2.2-sdk\r\n```\r\n\r\nThe new repo URL is provided at each of the news repos. For example, the new .NET Core SDK \"nightly\" repo provides a box on the right where you can copy and paste the correct MCR-based repo syntax that you can use for `docker pull` or in `FROM` statements in your Dockerfiles.\r\n\r\n![image](https://user-images.githubusercontent.com/2608468/52811702-95c5eb80-304a-11e9-8de8-e6ea1f4b4d75.png)\r\n\r\n## Servicing existing Docker Hub tags\r\n\r\nWe will continue to service existing non-version-specific or floating tags on Docker Hub while the associated .NET Core version is supported. For example the `microsoft/dotnet:2.1-sdk` tag is a floating tag that will continue to be serviced for the lifetime of .NET Core 2.1. You can continue using floating tags without issue.\r\n\r\nIf you use non-floating tags, like `microsoft/dotnet:2.1.504-sdk-alpine`, then you will need to update your Dockerfile to use a new non-floating tag. No new non-floating tags will be published to `microsoft/dotnet` and `microsoft/dotnet-nightly` after we fully transition to MCR.\r\n\r\n.NET Core 3.0 Preview 3 and later will only be made available on MCR.\r\n\r\n## Microsoft is a Verified Publisher\r\n\r\nUntil now, Microsoft-provided container images were considered \"community images\". As part of this change, we are re-classifying Microsoft as a \"verified publisher\" on Docker Hub. This designation should make it clearer that .NET and other Microsoft-provided images are coming from a verified source. There clearly was that expectation previously, but Docker is now making that clearer in the Docker Hub pages they host for Microsoft.\r\n\r\nWe will provide official vulnerability scanning Microsoft-provided images as a second phase of this transition.","Url":"https://github.com/dotnet/announcements/issues/101","RelatedDescription":"Open issue \"Publishing .NET Core images to Microsoft Container Registry (MCR)\" (#101)"},{"Id":"410784442","IsPullRequest":false,"CreatedAt":"2019-02-15T14:06:29","Actor":"TaraOverfield","Number":"100","RawContent":null,"Title":"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809","State":"open","Body":"<strong><em>Final Update 2/19/19 @1:30 PM (PST)</em></strong><em>: This </em><em>advisory is now resolved with no action needed from Microsoft Customers. The issue was not applicable to any valid or supported configuration. There is no consequence for .NET 4.8 Preview customers. </em>\r\n\r\n<em>We strive to share timely information to protect our customer’s productivity, in this case, our finding was thankfully of no consequence for customers on supported configurations.</em>\r\n\r\n<del><em><strong>Update 2/15/19 @3:35 PM (PST)</strong></em><em>: As we continue our investigation, we are finding the issue to be restricted to a limited and isolated set of test-only systems that are using non-official versions of the .NET 4.8 Preview. As of 2/15/19 around 12:00 pm (PST) we further tightened our delivery mechanisms to ensure that the February .NET security updates are only deployed to their expected target systems.</em></del>\r\n\r\n<del><span>The </span><a href=\"https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/\" rel=\"nofollow\">February 2019 Security and Quality Rollup for Windows 10 update 1809</a><span> was released earlier this week. We have received multiple customer reports of issues when a customer has installed .NET Framework 4.8 Preview then installed the February security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>.</span> These reports are specific to only to the scenario when a customer has installed both .NET Framework 4.8 Preview and the February security update.</del>\r\n\r\n<del>We are actively working on investigating and addressing this issue. If you installed the February 2019 security update and have not seen any negative behavior, we recommend that you leave your system as-is but closely monitor it and ensure that you apply upcoming .NET Framework updates.</del>\r\n\r\n<del>We will continue to update this <a href=\"https://github.com/dotnet/announcements/issues/100\" rel=\"nofollow\">post</a> as we have new information.</del>\r\n<h2><del>Guidance</del></h2>\r\n<del>We are working on guidance and will update this post and as we have new information.</del>\r\n<h2><del>Workaround</del></h2>\r\n<del>There are no known workarounds at this time.</del>\r\n<h2><del>Symptoms</del></h2>\r\n<del>After installing .NET Framework 4.8 Preview then the February 2019 security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>, Visual Studios will crash with this error message:</del>\r\n<p class=\"xxxxxmsonormal\"><del><b><span style=\"font-size: 10.5pt;font-family: 'Segoe UI',sans-serif;color: black\">\"Exception has been thrown by the target of an invocation.\"</span></b></del></p>","Url":"https://github.com/dotnet/announcements/issues/100","RelatedDescription":"Open issue \"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809\" (#100)"},{"Id":"410455095","IsPullRequest":false,"CreatedAt":"2019-02-14T19:28:25","Actor":"richlander","Number":"99","RawContent":null,"Title":"Supporting new Alpine versions (for containers)","State":"open","Body":"# Supporting new Alpine versions (for containers)\r\n\r\n[Alpine 3.9](https://twitter.com/alpinelinux/status/1090416212822110214) was recently announced. Congratulations, Alpine team! On the .NET team, we are committed to supporting new Alpine versions quickly, and also need to define a policy for older versions. This policy only applies for the container images that we publish.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #933](https://github.com/dotnet/dotnet-docker/issues/933)\r\n\r\n## Policy\r\n\r\nWe intend to establish the following policy for supporting Alpine with .NET Core container images:\r\n\r\n* Support new Alpine versions within 60 days of release (hopefully much less).\r\n* Support n-1 Alpine versions for 3 months after we support a new Alpine version.\r\n\r\nNote: The [.NET Core support policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md) may be broader. This policy is specific to the container images we produce.\r\n\r\n## Plans\r\n\r\nWe're in the process of [fixing issues required to support Alpine 3.9](https://github.com/dotnet/dotnet-docker/issues/921). We expect that these issues will be resolved in February and that we'll be able to provide support for Alpine 3.9 in March.\r\n\r\nWe will produce Alpine 3.9 images for .NET Core 2.1, 2.2 and 3.0. Assuming we publish 3.9 images in March, we'll stop producing and supporting Alpine 3.7 and 3.8 images after June (2019).\r\n\r\n## Using Alpine-based .NET Core images\r\n\r\nWe produce a variety of Alpine-based images. You can either depend on a specific Alpine version, like with `microsoft/dotnet:2.2-sdk-alpine3.8` or opt to use the latest Alpine image we have to offer, like with `microsoft/dotnet:2.2-sdk-alpine`. Either are good choices. It is just a question of whether you want to make a conscious decision to move to later Alpine releases.\r\n\r\n## Support for ARM32?\r\n\r\nWe produce Alpine images for x64 (and ARM64, shortly). The [Alpine 3.9 announcement](https://twitter.com/alpinelinux/status/1090416212822110214) made mention of support for ARM32v7. We would like to enable .NET Core [Alpine-based images on ARM32](https://github.com/gliderlabs/docker-alpine/issues/463#issuecomment-460530395). We are patiently waiting for that to happen. If that's important to you, you should comment on that thread.","Url":"https://github.com/dotnet/announcements/issues/99","RelatedDescription":"Open issue \"Supporting new Alpine versions (for containers)\" (#99)"},{"Id":"409840927","IsPullRequest":false,"CreatedAt":"2019-02-13T14:48:21","Actor":"TaraOverfield","Number":"98","RawContent":null,"Title":"February 2019 .NET Updates","State":"open","Body":"# February 2019 .NET Updates\r\nThe following .NET updates were released in February 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework February 2019 Security and Quality Rollup - February 12, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/)\r\n* [.NET Framework February 2019 Preview of Quality Rollup - February 19, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/19/net-framework-february-2019-preview-of-quality-rollup/)\r\n\r\n## .NET Support Policies\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/98","RelatedDescription":"Open issue \"February 2019 .NET Updates\" (#98)"},{"Id":"409436643","IsPullRequest":false,"CreatedAt":"2019-02-12T18:21:22","Actor":"leecow","Number":"97","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability","State":"open","Body":"## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a domain spoofing vulnerability in .NET Framework and .NET Core which causes the meaning of a URI to change when International Domain Name encoding is applied. An attacker who successfully exploited the vulnerability could redirect a URI.\r\n\r\nThe security update addresses the vulnerability by disallowing certain Unicode characters from the URI.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/35265\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core 1.0 or 1.1 based application that uses the [System.Private.Uri](https://www.nuget.org/packages/System.Private.Uri/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0 | 4.3.1\r\n\r\nAny .NET Core 2.1 or 2.2 based application that uses the [Microsoft.NETCore.App](https://www.nuget.org/packages/Microsoft.NETCore.App) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6, 2.1.7, 2.2.0, 2.2.1 | 2.1.8, 2.2.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Private.Uri` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.2.1, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Private.Uri/4.3.0` is a reference to version 4.3.0 of `System.Private.Uri`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.8 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.2 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Private.Uri` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.Private.Uri` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0657](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0657)\r\n\r\n### Revisions\r\n\r\nV1.0 (February 12, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-02-08_\r\n","Url":"https://github.com/dotnet/announcements/issues/97","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability\" (#97)"},{"Id":"397026248","IsPullRequest":false,"CreatedAt":"2019-01-08T18:17:45","Actor":"leecow","Number":"96","RawContent":null,"Title":"January 2019 .NET Updates","State":"open","Body":"# January 2019 .NET Updates\r\n\r\nThe following .NET updates were released in January 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework January 2019 Preview of Quality Rollup - January 15, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/15/net-framework-january-2019-preview-of-quality-rollup/)\r\n* [.NET Framework January 2019 Security and Quality Rollup - January 8, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/08/net-framework-january-2019-security-and-quality-rollup/)\r\n* [.NET Framework January 22, 2018 Preview of Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - January 22, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/22/net-framework-january-22-2018-preview-of-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.7 and .NET Core SDK 2.1.503 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.7/2.1.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.1 and .NET Core SDK 2.2.102 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.1/2.2.1.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2210](https://github.com/dotnet/core/issues/2210)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/96","RelatedDescription":"Open issue \"January 2019 .NET Updates\" (#96)"},{"Id":"397020176","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:27","Actor":"blowdart","Number":"95","RawContent":null,"Title":" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a tampering vulnerability exists when .NET Core improperly handles specially crafted files. An attacker who successfully exploited this vulnerability could write arbitrary files and directories to certain locations on a vulnerable system. However, an attacker would have limited control over the destination of the files and directories.\r\n\r\nTo exploit the vulnerability, an attacker must send a specially crafted file to a vulnerable system\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core handles these files.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34427\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nIf your application does not extract ZIP compressed files it is unaffected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.IO.Compression.ZipFile](https://www.nuget.org/packages/System.IO.Compression.ZipFile/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.IO.Compression.ZipFile) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n`System.IO.Compression.ZipFile` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\nFinally, you must restart your applications once an updated runtime or SDK is installed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Danny Grander](https://twitter.com/grander) of [Snyk](https://snyk.io/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-8416](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8416)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected pacakge table.\r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/95","RelatedDescription":"Open issue \" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\" (#95)"},{"Id":"397020142","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:23","Actor":"blowdart","Number":"94","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of an information disclosure vulnerability exists in .NET Framework and .NET Core which allows bypassing Cross-origin Resource Sharing (CORS) configurations. An attacker who successfully exploited the vulnerability could retrieve content, that is normally restricted, from a web application.\r\n\r\nThe security update addresses the vulnerability by enforcing CORS configuration to prevent its bypass.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34428\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.2.0 | 2.2.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Net.Http` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `SSystem.Net.Http/4.3.0` is a reference to version 4.3.0 of `System.Net.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Net.Http` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0545](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0545)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected package table. \r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n","Url":"https://github.com/dotnet/announcements/issues/94","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\" (#94)"},{"Id":"390948658","IsPullRequest":false,"CreatedAt":"2018-12-14T03:22:58","Actor":"wu-yafeng","Number":"93","RawContent":null,"Title":"Docker image with tag '2.2-aspnetcore-runtime' is not compatible","State":"closed","Body":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]","Url":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Closed issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93)"},{"Id":"390193072","IsPullRequest":false,"CreatedAt":"2018-12-12T12:56:53","Actor":"bilalmalik777","Number":"92","RawContent":null,"Title":".net core Console","State":"closed","Body":"I am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n    networks:\r\n     - app-network\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\nIf the detail is not enough or you do not get my point, you can share your confusion in comment","Url":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Closed issue \".net core Console\" (#92)"},{"Id":"380346599","IsPullRequest":false,"CreatedAt":"2018-11-13T17:44:44","Actor":"leecow","Number":"91","RawContent":null,"Title":"November 2018 .NET Updates","State":"open","Body":"# November 2018 .NET Updates\r\n\r\nThe following .NET updates were released in November 2018. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core November 2018 (2.1.6 and SDK 2.1.500) Update release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.6/2.1.6.md)\r\n\r\nA [discussion issue](https://github.com/dotnet/core/issues/2053) is available for questions or feedback about this release.\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [October 2018](https://github.com/dotnet/announcements/issues/89)\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/91","RelatedDescription":"Open issue \"November 2018 .NET Updates\" (#91)"},{"Id":"375230004","IsPullRequest":false,"CreatedAt":"2018-10-29T21:45:27","Actor":"terrajobst","Number":"90","RawContent":null,"Title":"The future of JSON in .NET Core 3.0","State":"open","Body":"JSON has become an essential part of virtually all modern .NET applications and in many cases even surpassed the usage of XML. However, .NET hasn't had a (great) built-in way to deal with JSON. Instead we've relied on [Json.NET] which continues to serve the .NET ecosystem well.\r\n\r\n[Json.NET]: https://www.newtonsoft.com/json\r\n\r\nMoving forward, we plan on making some changes to our JSON support:\r\n\r\n* **We need high-performance JSON APIs**. We need a new set of JSON APIs that are highly tuned for performance by using `Span<T>` and allows for processing UTF-8 directly without having to transcode to UTF-16 `string` instances. Both aspects are critical for our web server Kestrel, where throughput is a key requirement.\r\n\r\n* **Remove dependency from ASP.NET Core to Json.NET**. Today, ASP.NET Core has a dependency on Json.NET. While this provides a tight integration between ASP.NET Core and Json.NET, it also means that application developers cannot freely choose which JSON library they are using. This is also problematic for customers of Json.NET as the version is dictated by the underlying platform. However, Json.NET is frequently updated and application developers often want to -- or even have to -- use a specific version. Thus, we want to remove the dependency from ASP.NET Core 3.0 to Json.NET so that customers can choose which version to use, without fearing they might accidentally break the underlying platform. In addition, this makes it also possible to plug-in an entirely different JSON library.\r\n\r\n* **Provide an ASP.NET Core integration package for Json.NET**. Json.NET has basically become the Swiss Army knife of JSON processing in .NET. It provides many options and facilities that allow customers to handle their JSON needs with ease. We don't want to compromise on the Json.NET support customers are getting today, for example, the ability to configure the JSON serialization via the `AddJsonOptions` extension method. Thus, we want to provide the Json.NET integration as a NuGet package that developers can optionally install so they get all the bells and whistles they get from Json.NET today. The other part of this work item is to ensure we have the right extension points so that other parties can provide similar integration packages for their JSON library of choice.\r\n\r\nBelow are more details around this plan.\r\n\r\n## The need for high-performance JSON APIs\r\n\r\nThe requirements for the .NET stack have changed a bit since the arrival of .NET Core. Historically, .NET has valued usability and convenience. With .NET Core, we've added a focus on performance, and we've made significant investments to serve high performance needs. And the [improvements we made][techempower] in the popular TechEmpower benchmark are a testament to that.\r\n\r\n[techempower]: https://www.techempower.com/blog/2016/11/16/framework-benchmarks-round-13/\r\n\r\nWith .NET Core 2.1, we've added a brand new primitive called [Span\\<T>][span-msdn] that allows us to represent native memory and arrays in a uniform way. With this type, we've also added a set of parsing and encoding APIs that are much more memory efficient without having to resort to unsafe code.\r\n\r\n[span-msdn]: https://msdn.microsoft.com/en-us/magazine/mt814808.aspx\r\n\r\nPart of the work of minimizing allocations is to avoid having to transcode UTF-8 payloads into UTF-16 strings, purely for parsing reasons. Currently, Json.NET is implemented by reading UTF-16. We need the ability to read (and write) JSON documents directly in UTF-8 because most network protocols (including HTTP) use UTF-8.\r\n\r\nDuring .NET Core 2.1 we've learned that updating our existing APIs to leverage `Span<T>` has limits. While we did add a bunch of overloads that accept spans, we also had to produce brand new APIs that are designed around minimizing allocations and dealing with buffers, which we exposed in `System.Buffers` namespaces. And with `System.IO.Pipelines` we've also added a programming model that enables developers to share buffers without having to deal with lifetime issues.\r\n\r\nBased on these experiences we believe in order to support JSON parsing, we'll need to expose a new set of JSON APIs that are specifically geared for high-performance scenarios.\r\n\r\nYou might wonder why we can't just update Json.NET to include support for parsing JSON using `Span<T>`? Well, James Newton-King -- the author of Json.NET -- has the following to say about that:\r\n\r\n> Json.NET was created over 10 years ago, and since then it has added a wide range of features aimed to help developers work with JSON in .NET. In that time Json.NET has also become far and away NuGet's most depended on and downloaded package, and is the go-to library for JSON support in .NET. Unfortunately, Json.NET's wealth of features and popularity works against making major changes to it. Supporting new technologies like `Span<T>` would require fundamental breaking changes to the library and would disrupt existing applications and libraries that depend on it.\r\n>\r\n> Going forward Json.NET will continue to be worked on and invested in, both addressing known issues today and supporting new platforms in the future. Json.NET has always existed alongside other JSON libraries for .NET, and there will be nothing to prevent you using one or more together, depending on whether you need the performance of the new JSON APIs or the large feature set of Json.NET.\r\n\r\n## Move Json.NET integration into a separate NuGet package\r\n\r\nToday, you cannot use ASP.NET Core without Json.NET because it is a dependency of ASP.NET Core itself. Over the years, we've received feedback that the dependency can conflict with other libraries that have their own dependency on a different version of Json.NET. In the past, we've considered addressing this issue by using a private copy of Json.NET in ASP.NET. However, this would create problems when developers want to configure Json.NET (for instance, in order to control how the serializer behaves when formatting JSON objects).\r\n\r\nMoving forward we'd like to:\r\n\r\n1. Replace the internal usage of Json.NET in ASP.NET Core by the new platform-provided JSON APIs.\r\n\r\n2. Factor the public facing usage of Json.NET into an optional integration package that can be acquired from NuGet.\r\n\r\nSo the existing integration between ASP.NET Core and Json.NET will continue to be supported, but will be moving out of the platform and into a separate package. However, since the integration is then designed to sit on top of the platform, it will also allow customers to update Json.NET to later versions.\r\n\r\nFurthermore, customers who need more performance can also choose to use the new JSON APIs, at the expense of the rich feature set that Json.NET offers.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/33115.","Url":"https://github.com/dotnet/announcements/issues/90","RelatedDescription":"Open issue \"The future of JSON in .NET Core 3.0\" (#90)"},{"Id":"368440353","IsPullRequest":false,"CreatedAt":"2018-10-09T23:44:06","Actor":"vivmishra","Number":"89","RawContent":null,"Title":"October 2018 .NET Updates","State":"open","Body":"# October 2018 .NET Updates\r\n\r\nThe following .NET updates were released in October 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core October 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/10/09/net-core-october-2018-update-net-core-1-0-and-1-1/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/89","RelatedDescription":"Open issue \"October 2018 .NET Updates\" (#89)"},{"Id":"368429033","IsPullRequest":false,"CreatedAt":"2018-10-09T22:51:18","Actor":"leecow","Number":"88","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core when HTTP authentication information is inadvertently exposed in an outbound request that encounters an HTTP redirect. An attacker who successfully exploited this vulnerability could use the information to further compromise the web application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handles HTTP redirects.\r\n\r\nSystem administrators running .NET Core 1.0 or .NET Core 1.1 applications must update their .NET Core runtimes to versions 1.0.13 and 1.1.10 then restart their applications. If installed applications target .NET Core 2.0, the applications must be migrated to 2.1 or newer and redeployed.\r\n\r\nDevelopers must update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core 2.0](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 then redeploy.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at <https://github.com/dotnet/corefx/issues/32730>\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nNone\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nAdditionally package authors should check their dependencies to ensure they aren't depending on a vulnerable version of the following package:\r\n\r\n<a name=\"package-list\"></a>Package name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Net.Http| 2.0.20126.16343, 2.0.20505, 2.0.20710, 4.0.0, 4.1.0, 4.1.1, 4.1.2, 4.3.0, 4.3.1, 4.3.2, 4.3.3 |  4.3.4 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nTo check the currently installed runtimes and SDKs with version 2.1 or later of .NET Core, open a command prompt and run the `dotnet --info` command. You should see an output similar to the following:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.403\r\n Commit:    04e15494b6\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.403\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.5\r\n  Commit:  290303f510\r\n\r\n.NET Core SDKs installed:\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.10 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf you don't see a runtime entry for 1.0.13 or 1.1.10, any .NET Core 1.x applications run on that computer are vulnerable.\r\n\r\nIf you don't have a 2.1 version of the runtime or SDK installed, you can produce the complete list of runtimes by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows | `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS | `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms | `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.13, 1.1.10 then any application targeting versions 1.0 or 1.1 are vulnerable.\r\n\r\nAdditionally, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n### <a name=\"fix-runtime\">How do I fix the vulnerability?\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.13, 1.1.10 and install the latest 2.1 runtime, ensuring that any 2.0 applications are migrated to 2.1 as soon as possible.\r\n\r\n Developers are advised to update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at <https://github.com/dotnet/> and <https://github.com/aspnet/>, respectively. The Announcements repo for each product (<https://github.com/dotnet/Announcements> and <https://github.com/aspnet/Announcements>) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8292](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8292)\r\n\r\n### Revisions\r\n\r\nV1.0 (October 10, 2018): Advisory published.\r\n_Version 1.0_\r\n_Last Updated 2018-10-10_\r\n","Url":"https://github.com/dotnet/announcements/issues/88","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\" (#88)"},{"Id":"367393517","IsPullRequest":false,"CreatedAt":"2018-10-05T22:58:51","Actor":"leecow","Number":"87","RawContent":null,"Title":".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan","State":"open","Body":"# .NET Core Release Data (releases.json) Redesign and Deprecation\r\n\r\nThe releases.json and releases.csv files began life as helper tools for some of our internal release work, some experimentation and to possibly be useful to the community. It has been great to learn the files are indeed in use and many folks depend on them as a trigger for a number of activities.\r\n\r\n* [release-notes/releases.json](https://github.com/dotnet/core/blob/master/release-notes/releases.json)\r\n* [release-notes/releases.csv](https://github.com/dotnet/core/blob/master/release-notes/releases.csv)\r\n\r\nA discussion topic is available to share thoughts and see what others are thinking at https://github.com/dotnet/core/issues/1986\r\n\r\nBetween the usages which we have become aware and in considering further activities that could be enabled to reason about things such as checking .NET Core version availability and support status, it became clear the current format is inadequate.\r\n\r\nAn updated format has been designed and tested which will replace the current files. The timeline below describes the path to obsoleting the current files.\r\n\r\n## The Plan\r\n\r\n| Date | Action |\r\n| :--- | :----- |\r\n| Oct 2018 | Notify the community of the coming change |\r\n| Oct 2018 | Release the new json format into dotnet/core |\r\n| Oct 2018 - Feb 2019 | Maintain the old json and csv files |\r\n| Feb 2019 | Reminder announcement that old format file is coming soon |\r\n| Mar 2019 | Old json and csv files are obsoleted and removed from dotnet/core |\r\n\r\n## Breaking change\r\n\r\nIf you are currently utilizing the old version json or csv, you will need to update the relevant code to work with the new format. If you are just getting started with consuming this data, use the new version.\r\n\r\n## The Format\r\n\r\nBelow are fragments of the files from our most recent .NET Core release.\r\n\r\n### release-index.json\r\n\r\nThis file consists of a top level array with data on the latest release versions and a property for locating the more detailed channel-specific releases.json. This file is found in [dotnet/core/release-notes](https://github.com/dotnet/core/tree/new-json/release-notes/)\r\n\r\n[releases-index.json](https://github.com/dotnet/core/blob/new-json/release-notes/releases-index.json)\r\n\r\n```\r\n{\r\n    \"releases-index\": [\r\n        {\r\n            \"channel-version\": \"2.1\",\r\n            \"latest-release\": \"2.1.5\",\r\n            \"latest-release-date\":\"2018-10-02\",\r\n            \"product\": \".NET Core\",\r\n            \"support-phase\": \"lts\",\r\n            \"eol-date\": \"\",\r\n            \"releases.json\": \"https://github.com/dotnet/core/blob/master/release-notes/2.1/releases.json\",\r\n        },\r\n        ...\r\n}\r\n```\r\n\r\n### releases.json\r\n\r\nThis file provides detailed data for each release. A copy of this file will be found in each versioned directories under [dotnet/core/release-notes](https://github.com/dotnet/core/release-notes). For example [dotnet/core/release-notes/2.1](https://github.com/dotnet/core/tree/new-json/release-notes/2.1)\r\n\r\n\r\n[releases.json](https://github.com/dotnet/core/tree/new-json/release-notes/2.1/releases.json)\r\n\r\n```\r\n{\r\n    \"channel-version\": \"2.1\",\r\n    \"latest-release\": \"2.1.5\",\r\n    \"latest-release-date\":\"2018-10-12\",\r\n    \"support-phase\": \"lts\",\r\n    \"eol-date\": \"\",\r\n    \"lifecycle-policy\": \"https://www.microsoft.com/net/support/policy\",\r\n    \"releases\":\r\n    [\r\n        {\r\n            \"release-date\":  \"2018-10-02\",\r\n            \"release-version\":  \"2.1.5\",\r\n            \"security\":  false,\r\n            \"release-notes\":  \"https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.5/2.1.5.md\",\r\n            \"runtime\":  \r\n            {\r\n                \"version\":  \"2.1.5\",\r\n                \"version-display\":  \"2.1.5\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"files\":  \r\n                [\r\n                    {\r\n                        \"name\": \"dotnet-runtime-linux-arm.tar.gz\",\r\n                        \"url\": \"https://download.visualstudio.microsoft.com/download/pr/4d555219-1f04-47c6-90e5-8b3ff8989b9c/0798763e6e4b98a62846116f997d046e/dotnet-runtime-2.1.5-linux-arm.tar.gz\",\r\n                        \"hash\": \"89a77a07065ea24e7198c77a233b9ce5c6cf51b1deb2ef55c88f0adbb2ecd9db1ba4e7d55eec2ef7139c47f91346fed360161a5bb6e3a7ccfc4559bcde286364\"\r\n                    },\r\n                    ...\r\n                ]\r\n            }\r\n            \"sdk\":  \r\n            {\r\n                \"version\":  \"2.1.403\",\r\n                \"version-display\":  \"2.1.403\",\r\n                \"vs-version\":  \"15.8.6\",\r\n                \"csharp-language\":  \"7.3\",\r\n                \"fsharp-language\":  \"4.5\",\r\n                \"files\":  \r\n                [...]\r\n            }\r\n        }\r\n    ]\r\n}\r\n```","Url":"https://github.com/dotnet/announcements/issues/87","RelatedDescription":"Open issue \".NET Core Release Data (releases.json) Redesign and v1 Deprecation Plan\" (#87)"},{"Id":"366416503","IsPullRequest":false,"CreatedAt":"2018-10-03T16:11:18","Actor":"leecow","Number":"86","RawContent":null,"Title":".NET Core 2.0 has reached end of life","State":"open","Body":"[.NET Core 2.0 reached end of life](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) on October 1, 2018. This means [.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) is no longer supported and updates will no longer be provided. We recommend moving to [.NET Core 2.1](https://blogs.msdn.microsoft.com/dotnet/2018/05/30/announcing-net-core-2-1/), our long term support (LTS) release.\r\n\r\n- [Download .NET Core 2.1](https://www.microsoft.com/net/download/dotnet-core/2.1)\r\n- [.NET Core 2.1 LTS statement](https://blogs.msdn.microsoft.com/dotnet/2018/08/21/net-core-august-2018-update/)\r\n- [.NET Core 2.0 end-of-life statement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n\r\n## Discussion\r\n\r\nPlease share you thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/core#1983](https://github.com/dotnet/core/issues/1983)\r\n\r\n## Lifecycle Context\r\n\r\n.NET Core releases belong to one of two [support lifecycles](https://www.microsoft.com/net/platform/support-policy): long term support (LTS) and Current. LTS releases are stable release which receive critical updates and are supported for at least three years. Current releases can include new features that may undergo future change based on feedback. Current releases are supported for three months after the subsequent .NET Core major or minor release. Both LTS and Current releases receive critical fixes throughout their lifecycle, for security, reliability, or to add support for new operating system versions. You must stay up-to-date with the latest patches to qualify for support. \r\n\r\n## .NET Core 2.0 Lifecycle\r\n\r\n[.NET Core 2.0](https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/) was released in August 2017 as a Current release. Per the lifecycle policy, Current releases reach end of life 3 months after a subsequent release (Current or LTS). .NET Core 2.1 released May 2018 and began the end of life countdown for .NET Core 2.0. The 3 month maintenance period for .NET Core 2.0 was scheduled to end August 2018 but was [extended to October](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/) to allow time to address an issue some customers were experiencing while migrating to .NET Core 2.1.\r\n\r\n## .NET Core 2.0 Downloads\r\n\r\n.NET Core 2.0 installers, zips and tar.gzs will remain available, but unsupported. This includes existing releases available on Linux package feeds. Previous versions, including 2.0, will be accessible through the [Download Archives](https://www.microsoft.com/net/download/archives). \r\n\r\n## .NET Core 2.0 Docker Images\r\n\r\n.NET Core 2.0 will be removed from the .NET and ASP.NET Docker repo READMEs, however the existing images remain available in those repos.\r\n\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/)\r\n* [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/)\r\n* [microsoft/aspnetcore](https://hub.docker.com/r/microsoft/aspnetcore/)\r\n* [microsoft/aspnetcore-build](https://hub.docker.com/r/microsoft/aspnetcore-build/)\r\n\r\n## Policy Information\r\n\r\nAdditional lifecycle and support details  and background can be seen in the following:\r\n\r\n* [.NET Core Support Lifecycle](https://www.microsoft.com/net/platform/support-policy)\r\n* [Support and Versioning](https://blogs.msdn.microsoft.com/dotnet/2016/07/26/net-support-and-versioning/)\r\n* [2.0 end of life early announcement](https://blogs.msdn.microsoft.com/dotnet/2018/06/20/net-core-2-0-will-reach-end-of-life-on-september-1-2018/)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n","Url":"https://github.com/dotnet/announcements/issues/86","RelatedDescription":"Open issue \".NET Core 2.0 has reached end of life\" (#86)"},{"Id":"361098704","IsPullRequest":false,"CreatedAt":"2018-09-18T01:10:23","Actor":"spshant","Number":"85","RawContent":null,"Title":"NET Framework 4.8 Early Access build 3646 is available!","State":"open","Body":"Today, we are happy to share an Early Access build for the .NET Framework 4.8. This includes an updated .NET 4.8 runtime as well as the .NET 4.8 Developer Pack (a a single package that bundles the .NET Framework 4.8 runtime, the .NET 4.8 Targeting Pack, and the .NET Framework 4.8 SDK). \r\n\r\nPlease help us ensure this is a high quality and compatible release by trying out this build and exploring the new features. \r\n\r\n**Next steps:**\r\nTo explore the new features, download the [.NET 4.8 Developer Pack build 3646](https://go.microsoft.com/fwlink/?LinkId=2018486).  Instead, if you want to try just the .NET 4.8 runtime, you can download either of these:\r\n•\t[.NET 4.8 Web Installer](https://go.microsoft.com/fwlink/?LinkId=2018525) - requires an internet connection during installation \r\n•\t[.NET 4.8 Offline installer](https://go.microsoft.com/fwlink/?LinkId=2018531) - can be downloaded and installed later in a disconnected state\r\n\r\nPlease provide your feedback by [reporting an issue at the .NET Framework Early Access GitHub repository](https://github.com/Microsoft/dotnet-framework-early-access/issues/new).\r\n\r\n**Note**: this release is still under development, you can expect to see more features and fixes in future preview builds. Also, a reminder that this build is not supported for production use.\r\n\r\nThis preview build 3646 includes improvements/fixes in the following areas:\r\n•\t**[Runtime]** JIT and NGEN improvements\r\n•\t**[Windows Forms]** Accessibility enhancements\r\n•\t**[WPF]** SelectionTextBrush Property\r\n•\t**[BCL]** Updated ZLib\r\n\r\nYou can see the complete list of improvements in this build [here](https://github.com/Microsoft/dotnet-framework-early-access/blob/master/release-notes/NET48/build-3646/changes.md).\r\n\r\n.NET Framework build 3646 is also included in the next update for Windows 10. You can sign up for [Windows Insiders](https://insider.windows.com/en-us/) to validate that your applications work great on the latest .NET Framework included in the latest Windows 10 releases.\r\n","Url":"https://github.com/dotnet/announcements/issues/85","RelatedDescription":"Open issue \"NET Framework 4.8 Early Access build 3646 is available!\" (#85)"},{"Id":"359151445","IsPullRequest":false,"CreatedAt":"2018-09-11T17:44:50","Actor":"leecow","Number":"84","RawContent":null,"Title":"September 2018 .NET Updates","State":"open","Body":"# September 2018 .NET Updates\r\n\r\nThe following .NET updates were released in September 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework September 2018 Security and Quality Rollup - September 11, 2018](https://blogs.msdn.microsoft.com/dotnet/2018/09/11/net-framework-september-2018-security-and-quality-rollup/)\r\n\r\n## .NET Core\r\n\r\n* [.NET Core September 2018 Update - September 11, 2018](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.4/2.1.4.md)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/84","RelatedDescription":"Open issue \"September 2018 .NET Updates\" (#84)"},{"Id":"359136325","IsPullRequest":false,"CreatedAt":"2018-09-11T17:00:55","Actor":"blowdart","Number":"83","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a denial of service vulnerability in .NET Core when System.IO.Pipelines improperly handles requests. An attacker who successfully exploited this vulnerability could cause a denial of service against an application that is leveraging System.IO.Pipelines. The vulnerability can be exploited remotely, without authentication. A remote unauthenticated attacker could exploit this vulnerability by providing specially crafted requests to the application.\r\n\r\nThe update addresses the vulnerability by correcting how System.IO.Pipelines handles requests.\r\n\r\nIf you are using ASP.NET Core 2.1 you will also need to update your ASP.NET version this by following the instructions in the [ASP.NET Core bulletin](https://github.com/aspnet/Announcements/issues/316).\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/32228\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.IO.Pipelines package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.IO.Pipelines | 4.5.0 | 4.5.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications which use System.IO.Pipelines\r\n\r\nSystem.IO.Pipelines is distributed both in ASP.NET Core 2.1 and separately as a NuGet package. If you are not using Microsoft.AspNetCore.App or .All, you may still be affected if you are referencing the System.IO.Pipelines package.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.IO.Pipelines/4.5.0` is a reference to version 4.5.0 of `System.IO.Pipelines`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.IO.Pipelines` version 4.5.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.IO.Pipelines\" Version=\"4.5.1\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n#### Rebuilding your application\r\n\r\nFinally you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8409](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8409)\r\n\r\n### Revisions\r\n\r\nV1.0 (September 11, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2018-09-11_\r\n","Url":"https://github.com/dotnet/announcements/issues/83","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8409: .NET Core Denial Of Service Vulnerability\" (#83)"},{"Id":"357399856","IsPullRequest":false,"CreatedAt":"2018-09-05T20:56:25","Actor":"richlander","Number":"82","RawContent":null,"Title":".NET Core Runtime ARM64 Status","State":"open","Body":"# .NET Core Runtime ARM64 Status\r\n\r\nThe .NET Core team is in the process of adding support for ARM64, as part of the .NET Core 3.0 project. This issue will be updated as ARM64 support progresses.\r\n\r\n[.NET Core 3.0 Preview 1](https://github.com/dotnet/core/issues/2099) includes support for Linux ARM64. Please try this build and provide support.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/coreclr #19843](https://github.com/dotnet/coreclr/issues/19843)\r\n\r\n## Current Status\r\n\r\nARM64 builds are functional, for console and ASP.NET Core apps.\r\n\r\n## Details\r\n\r\nInitial support for ARM64 was added in the .NET Core 2.1 release. The team is not maintaining .NET Core 2.x branches with respect to ARM64. All ARM64 improvements will be made in the .NET Core 3.0 branch (currently [master](https://github.com/dotnet/coreclr)).\r\n\r\nSee [Installing .NET Core 3.0 on Linux ARM64](https://gist.github.com/richlander/467813274cea8abc624553ee72b28213) to install .NET Core on your ARM64 machine. Builds are available from the [daily builds page](https://github.com/dotnet/core/blob/master/daily-builds.md).\r\n\r\n## Bug Queries\r\n\r\nthe following bugs queries are available for ARM64:\r\n\r\n* [dotnet/coreclr](https://github.com/dotnet/coreclr/issues?q=is%3Aopen+is%3Aissue+label%3Aarch-arm64)\r\n* [dotnet/corefx](https://github.com/dotnet/corefx/issues?q=is%3Aopen+is%3Aissue+label%3Aarch-arm64)\r\n\r\n## Operating Systems\r\n\r\n.NET Core 3.0 ARM64 builds are tested on the following operating systems:\r\n\r\n* Ubuntu 16.04 and 18.04\r\n* Debian 9\r\n\r\n## Test Hardware\r\n\r\n.NET Core 3.0 ARM64 builds have been tested on the following hardware:\r\n\r\n* [NVIDIA Jetson TX2 Module](https://developer.nvidia.com/embedded/buy/jetson-tx2)\r\n* [Pine A64](https://www.pine64.org/?page_id=46823)\r\n* [Qualcomm Centriq 2400](https://www.qualcomm.com/products/qualcomm-centriq-2400-processor)\r\n* [Qualcomm Snapdragon](https://www.qualcomm.com/snapdragon/always-connected-pc)\r\n* [Raspberry Pi3](https://www.raspberrypi.org/products/raspberry-pi-3-model-b-plus/)","Url":"https://github.com/dotnet/announcements/issues/82","RelatedDescription":"Open issue \".NET Core Runtime ARM64 Status\" (#82)"},{"Id":"350233220","IsPullRequest":false,"CreatedAt":"2018-08-13T23:50:57","Actor":"richlander","Number":"81","RawContent":null,"Title":"Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+","State":"open","Body":"# Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+\r\n\r\nAn [issue with serializing/deserializing a CultureAwareComparer](https://github.com/Microsoft/dotnet/blob/master/releases/net471/KnownIssues/521954%20-%20BCL%20CultureAwareComparer%20with%20ignore%20casing%20on%20serialized%20on%20previous%20versions%20of%20.NET%20do%20not%20correctly%20deserialize%20on%20.NET%204.7.1.md) was discovered with [.NET Framework 4.7.1](https://blogs.msdn.microsoft.com/dotnet/2017/10/17/announcing-the-net-framework-4-7-1/). This issue was resolved earlier this year, with the [May 2018 Preview of Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/15/net-framework-may-2018-preview-of-quality-rollup/). We recently learned that some applications, including Johnson Controls’ C-CURE 9000 Software, were negatively impacted by this change as this update requires all client and server workstations to be updated simultaneously with the appropriate Microsoft updates. The changes made to .NET Framework 4.7.1 were also integrated into .NET Framework 4.6 and later servicing releases. As a result, this advisory applies to .NET Framework 4.6 and later versions.\r\n\r\nThis advisory is provided so that developers can correctly diagnose this issue and be aware of our guidance. We will continue to update this issue as we have new information to share.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [microsoft/dotnet #832](https://github.com/Microsoft/dotnet/issues/832)\r\n\r\n## Guidance\r\n\r\nThis guidance only applies to customers that have experienced this issue.\r\n\r\nWe have released [an update for .NET Framework 4.6](https://blogs.msdn.microsoft.com/dotnet/2018/08/30/net-framework-august-2018-preview-of-quality-rollup/) and later that resolves the issue. **You must deploy the .NET Framework update for this issue to all .NET Framework 4.6+ machines that communicate via serialized objects**. After doing that, cross-machine serialization will work as expected. \r\n \r\nPlease consult your software vendor to understand if this impacts the software you are using.\r\n\r\n## Technical Context\r\n\r\nIn the [May 2018 Preview of Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/05/15/net-framework-may-2018-preview-of-quality-rollup/), we made a change to the internal type CultureAwareComparer to implement ISerializable. We made the change in order to address [issue with serializing/deserializing a CultureAwareComparer](https://github.com/Microsoft/dotnet/blob/master/releases/net471/KnownIssues/521954%20-%20BCL%20CultureAwareComparer%20with%20ignore%20casing%20on%20serialized%20on%20previous%20versions%20of%20.NET%20do%20not%20correctly%20deserialize%20on%20.NET%204.7.1.md).\r\n\r\nThe issue reported was that a type that contains an instance of CultureAwareComparer was not able to correctly serialize and deserialize across different versions of the .NET Framework. There are a few types in .NET Framework that do this, the most commonly impacted one being the Dictionary<TKey, TValue> type.\r\n \r\nThe change to implement the ISerializable interface had unintended side effects when exchanging this type across different machines. We have had a small number of reports from customers who have been affected.\r\n\r\nA common, but not unique way, of exchanging objects across machines is to use WCF in conjunction with a serializer. One of the common serializers being DataContractSerializer. The side-effect of the change prevented data serialized on systems where the type implements ISerializable to correctly deserialize of systems where the type does NOT implement ISerializable. The same is true of the opposite case, that systems where the type does not implement ISerializable will not correctly deserialize data from systems where the type does implement ISerializable.\r\n\r\nWe have an updated fix that we intend to release within the next month that will remove the implementation of the ISerializable interface on the type and use a different internal mechanism for ensuring the cross-version serialization continues to work as expected. This change addresses the break experienced with WCF.\r\n\r\nThe upcoming fix will remove the implementation of the ISerializable interface on the type and use a different mechanism for ensuring the cross-version serialization of that type continues to work. This change addresses the break experienced with WCF.\r\n\r\n## Symptoms\r\n\r\nAn application that is affected by this issue will most likely crash when trying to deserialize an object. It may print or log an error message similar to the following one:\r\n\r\n```\r\nThe formatter threw an exception while trying to deserialize the message: \r\nThere was an error while trying to deserialize parameter . The InnerException message was ''EndElement' 'Comparer' from namespace '' is not expected. Expecting element '_compareInfo'.'.  Please see InnerException for more details.\r\n```\r\n","Url":"https://github.com/dotnet/announcements/issues/81","RelatedDescription":"Open issue \"Advisory serializing/deserializing a CultureAwareComparer with .NET Framework 4.6+\" (#81)"}],"ResultType":"GitHubIssue"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1125533180725907458","CreatedAt":"2019-05-06T22:49:56+00:00","UserScreenname":"dotnet","Text":".NET Core is the Future of .NET #dotnetcore #build2019\nhttps://t.co/43Zpcfa4Px https://t.co/496vlRtRSJ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":133,"FavoriteCount":58,"RawContent":null},{"Id":"1125481613435949057","CreatedAt":"2019-05-06T19:25:01+00:00","UserScreenname":"dotnet","Text":"Announcing ML .NET 1.0 #machinelearning #dotnet https://t.co/bZa9t3UnNq #build2019 https://t.co/noiQ59ZcnO","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":160,"FavoriteCount":96,"RawContent":null},{"Id":"1125434436114194432","CreatedAt":"2019-05-06T16:17:33+00:00","UserScreenname":"dotnet","Text":"Introducing .NET 5, the next step in our journey that unifies the #dotnet platform https://t.co/OT6A0KkL0i… https://t.co/2ldeFp5lHB","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":588,"FavoriteCount":392,"RawContent":null},{"Id":"1125433519579119616","CreatedAt":"2019-05-06T16:13:55+00:00","UserScreenname":"dotnet","Text":"https://t.co/iOiV9qNspl Core updates in .NET Core 3.0 Preview 5! https://t.co/9DB6M3rxNn #build2019 https://t.co/zLbcHvIN5P","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":67,"FavoriteCount":46,"RawContent":null},{"Id":"1125433224316899328","CreatedAt":"2019-05-06T16:12:44+00:00","UserScreenname":"dotnet","Text":"Announcing .NET Core 3.0 Preview 5 https://t.co/1lswthCaj1","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":153,"FavoriteCount":82,"RawContent":null},{"Id":"1125433206289756160","CreatedAt":"2019-05-06T16:12:40+00:00","UserScreenname":"dotnet","Text":".NET Core 3.0 Preview 5 now available! This #dotnetcore preview release includes new features, stability and improv… https://t.co/EbXcvuDPYI","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":107,"FavoriteCount":64,"RawContent":null},{"Id":"1125433039163539456","CreatedAt":"2019-05-06T16:12:00+00:00","UserScreenname":"dotnet","Text":"Introducing .NET 5 https://t.co/OT6A0KkL0i","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":1193,"FavoriteCount":793,"RawContent":null},{"Id":"1123987822090780673","CreatedAt":"2019-05-02T16:29:14+00:00","UserScreenname":"dotnet","Text":"These are the fine folks that make all the .NET @ch9 videos with us. They are amazingly talented and fun to work wi… https://t.co/MLuwEHLR2T","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":19,"FavoriteCount":6,"RawContent":null},{"Id":"1123980073076436992","CreatedAt":"2019-05-02T15:58:26+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demos and QA https://t.co/ptNZnK9Pxg","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":9,"FavoriteCount":3,"RawContent":null},{"Id":"1123270313507053568","CreatedAt":"2019-04-30T16:58:06+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demos and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":17,"FavoriteCount":5,"RawContent":null}]}},"RunOn":"2019-05-07T05:30:35.8662412Z","RunDurationInMilliseconds":9131}