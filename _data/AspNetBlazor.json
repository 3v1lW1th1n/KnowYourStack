{"Data":{"Blog":{"FeedItems":[{"Title":"ASP.NET Core updates in .NET Core 3.0 Preview 5","PublishedOn":"2019-05-06T16:00:58+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"ASP.NET Core updates in .NET Core 3.0 Preview 5\n.NET Core 3.0 Preview 5 is now available. This iteration was brief for the team and primarily includes bug fixes and improvements to the more...","Href":"https://devblogs.microsoft.com/aspnet/asp-net-core-updates-in-net-core-3-0-preview-5/","RawContent":null},{"Title":"ASP.NET Core updates in .NET Core 3.0 Preview 4","PublishedOn":"2019-04-18T22:10:18+00:00","CommentsCount":23,"FacebookCount":0,"Summary":".NET Core 3.0 Preview 4 is now available and it includes a bunch of new updates to ASP.NET Core.\nHere&#8217;s the list of what&#8217;s new in this preview:\nRazor Components renamed back to server-side...","Href":"https://devblogs.microsoft.com/aspnet/asp-net-core-updates-in-net-core-3-0-preview-4/","RawContent":null},{"Title":"Blazor now in official preview!","PublishedOn":"2019-04-18T22:06:21+00:00","CommentsCount":48,"FacebookCount":0,"Summary":"With this newest Blazor release we&#8217;re pleased to announce that Blazor is now in official preview! Blazor is no longer experimental and we are committing to ship it as a supported web UI...","Href":"https://devblogs.microsoft.com/aspnet/blazor-now-in-official-preview/","RawContent":null},{"Title":"Updated Razor support in Visual Studio Code, now with Blazor support","PublishedOn":"2019-04-18T22:02:12+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"Today we are pleased to announce improved Razor tooling support in Visual Studio Code with the latest C# extension. This latest release includes improved Razor diagnostics and support for tag helpers...","Href":"https://devblogs.microsoft.com/aspnet/updated-razor-support-in-visual-studio-code-now-with-blazor-support/","RawContent":null},{"Title":"Blazor 0.9.0 experimental release now available","PublishedOn":"2019-03-08T00:47:04+00:00","CommentsCount":35,"FacebookCount":0,"Summary":"Blazor 0.9.0 is now available! This release updates Blazor with the Razor Components improvements in .NET Core 3.0 Preview 3.\nNew Razor Component improvements now available to Blazor apps:\nImproved...","Href":"https://devblogs.microsoft.com/aspnet/blazor-0-9-0-experimental-release-now-available/","RawContent":null}],"ResultType":"Feed"},"GitHubIssues":{"Issues":[{"Id":"444102275","IsPullRequest":true,"CreatedAt":"2019-05-14T20:10:30","Actor":"SteveSandersonMS","Number":"1807","RawContent":null,"Title":"Update Mono (early preview 6)","State":"open","Body":"","Url":"https://github.com/aspnet/Blazor/pull/1807","RelatedDescription":"Open PR \"Update Mono (early preview 6)\" (#1807)"},{"Id":"437175306","IsPullRequest":true,"CreatedAt":"2019-04-25T14:57:39","Actor":"JohnCOsborne","Number":"1803","RawContent":null,"Title":"Update README.md","State":"closed","Body":"removed experimental note\r\n\r\n\r\n--\r\n\r\nThis link is the first you get when searching Blazor via google. Figured it'd be a good idea to remove the word experimental...","Url":"https://github.com/aspnet/Blazor/pull/1803","RelatedDescription":"Closed or merged PR \"Update README.md\" (#1803)"},{"Id":"425756122","IsPullRequest":true,"CreatedAt":"2019-03-28T17:23:13","Actor":"imba-tjd","Number":"1802","RawContent":null,"Title":"Use https link","State":"closed","Body":"","Url":"https://github.com/aspnet/Blazor/pull/1802","RelatedDescription":"Closed or merged PR \"Use https link\" (#1802)"},{"Id":"424855711","IsPullRequest":true,"CreatedAt":"2019-03-25T11:44:34","Actor":"SteveSandersonMS","Number":"1801","RawContent":null,"Title":"Update Mono for Blazor 0.10.0","State":"closed","Body":"Updates to:\r\n\r\n * Mono.wasm 004314e9ddf\r\n * Mono linker 3e8f3df0b560c4296a","Url":"https://github.com/aspnet/Blazor/pull/1801","RelatedDescription":"Closed or merged PR \"Update Mono for Blazor 0.10.0\" (#1801)"},{"Id":"416274918","IsPullRequest":true,"CreatedAt":"2019-03-01T23:38:36","Actor":"danroth27","Number":"1795","RawContent":null,"Title":"Update do_not_log_issues.md to clarify that issues should be filed on aspnet/aspnetcore repo","State":"closed","Body":"","Url":"https://github.com/aspnet/Blazor/pull/1795","RelatedDescription":"Closed or merged PR \"Update do_not_log_issues.md to clarify that issues should be filed on aspnet/aspnetcore repo\" (#1795)"},{"Id":"412878339","IsPullRequest":true,"CreatedAt":"2019-02-21T11:29:30","Actor":"SteveSandersonMS","Number":"1792","RawContent":null,"Title":"Bump version to 0.9.0-*","State":"closed","Body":"","Url":"https://github.com/aspnet/Blazor/pull/1792","RelatedDescription":"Closed or merged PR \"Bump version to 0.9.0-*\" (#1792)"},{"Id":"412870727","IsPullRequest":true,"CreatedAt":"2019-02-21T11:14:32","Actor":"SteveSandersonMS","Number":"1791","RawContent":null,"Title":"Update mono and linker for blazor 0.9.0","State":"closed","Body":"Uses Mono 7f0eaf39ca2 and linker e64148","Url":"https://github.com/aspnet/Blazor/pull/1791","RelatedDescription":"Closed or merged PR \"Update mono and linker for blazor 0.9.0\" (#1791)"},{"Id":"403101806","IsPullRequest":true,"CreatedAt":"2019-01-25T10:54:39","Actor":"SteveSandersonMS","Number":"1778","RawContent":null,"Title":"Stop building jsinterop, as it's now done by aspnet/extensions instead","State":"closed","Body":"","Url":"https://github.com/aspnet/Blazor/pull/1778","RelatedDescription":"Closed or merged PR \"Stop building jsinterop, as it's now done by aspnet/extensions instead\" (#1778)"},{"Id":"403093728","IsPullRequest":true,"CreatedAt":"2019-01-25T10:28:07","Actor":"SteveSandersonMS","Number":"1777","RawContent":null,"Title":"Upgrade Mono for 0.8.0","State":"closed","Body":"Upgrades to:\r\n\r\n* Mono 80bc0069e4\r\n* Mono linker 78804e45dc\r\n\r\n... as recommended by @lewing","Url":"https://github.com/aspnet/Blazor/pull/1777","RelatedDescription":"Closed or merged PR \"Upgrade Mono for 0.8.0\" (#1777)"},{"Id":"383648613","IsPullRequest":true,"CreatedAt":"2018-12-13T12:26:03","Actor":"grahamehorner","Number":"1716","RawContent":null,"Title":"OnBeforeRender","State":"closed","Body":"Added OnBeforeRender event to component ref: https://github.com/aspnet/Blazor/issues/1709\r\n","Url":"https://github.com/aspnet/Blazor/pull/1716","RelatedDescription":"Closed or merged PR \"OnBeforeRender\" (#1716)"},{"Id":"379483660","IsPullRequest":true,"CreatedAt":"2018-12-13T11:43:40","Actor":"ebekker","Number":"1660","RawContent":null,"Title":"Add error detection when sending content","State":"closed","Body":"As it stands, if the attempt to write (PUT/POST) content fails, for example, due to authorization (401) or some other server-side issue (50x), the error gets swallowed up.  Ensuring the call was successful will cause it to throw otherwise.\r\n\r\nThis also preserves symmetry with the `GetJsonAsync` counterpart since its underlying call to `GetStringAsync` already exhibits this behavior.\r\n","Url":"https://github.com/aspnet/Blazor/pull/1660","RelatedDescription":"Closed or merged PR \"Add error detection when sending content\" (#1660)"},{"Id":"379395705","IsPullRequest":true,"CreatedAt":"2018-12-12T16:14:37","Actor":"IvanJosipovic","Number":"1658","RawContent":null,"Title":"Add support for binding decimal? double? float? long? int? bool?","State":"closed","Body":"Resolves Issue #1007","Url":"https://github.com/aspnet/Blazor/pull/1658","RelatedDescription":"Closed or merged PR \"Add support for binding decimal? double? float? long? int? bool?\" (#1658)"},{"Id":"382314625","IsPullRequest":true,"CreatedAt":"2018-12-12T13:58:05","Actor":"kswoll","Number":"1702","RawContent":null,"Title":"Ignore non-public setters in analyzer","State":"closed","Body":"Currently if you have a property like:\r\n\r\n```\r\n[Parameter] public string Foo { get; private set; }\r\n```\r\n\r\nThe analzyer emits a warning about public properties with a `[Parameter]` attribute specified.  Since the reason for this warning is about calling the setter (and mutating state at improper points in the rendering cycle) explicit non-public setters should be ignored.\r\n\r\nSee https://github.com/aspnet/Blazor/issues/1388#issuecomment-439650736 for more elaboration","Url":"https://github.com/aspnet/Blazor/pull/1702","RelatedDescription":"Closed or merged PR \"Ignore non-public setters in analyzer\" (#1702)"},{"Id":"380633576","IsPullRequest":true,"CreatedAt":"2018-12-12T13:42:55","Actor":"StevenTCramer","Number":"1678","RawContent":null,"Title":"(TS) Object is possibly 'null' fix","State":"closed","Body":"micro fix for #1670 \r\nadd the non-null assertion operator.","Url":"https://github.com/aspnet/Blazor/pull/1678","RelatedDescription":"Closed or merged PR \"(TS) Object is possibly 'null' fix\" (#1678)"},{"Id":"383427098","IsPullRequest":true,"CreatedAt":"2018-12-12T13:41:01","Actor":"aghanem","Number":"1712","RawContent":null,"Title":"linking to some existing docs","State":"closed","Body":"This is to add links to the existing Blazor docs site. In addition, we may need to convert this item\"Live reloading in the browser during development\" to a link to the debugging page but I first the debugging docs need some enhancements like adding IDE debugging and details about live reloading (maybe using dotnet command line tool ?)\r\n","Url":"https://github.com/aspnet/Blazor/pull/1712","RelatedDescription":"Closed or merged PR \"linking to some existing docs\" (#1712)"},{"Id":"378749266","IsPullRequest":true,"CreatedAt":"2018-12-12T11:19:00","Actor":"SteveSandersonMS","Number":"1651","RawContent":null,"Title":"Route events based on delegate target, not component ID","State":"closed","Body":"This fixes multiple issues and potential areas of confusion related to event routing (in effect, the scenarios where you have to call `StateHasChanged` or not).\r\n\r\nPreviously, if one component passed an event handler (e.g., an `Action`, `Func<Task>`, `MulticastDelegate`, etc.) through to another component, either as a `[Parameter]` or simply by including it in some `ChildContent`, then when the event was fired it would be routed not to the component that owns the event handler, but the one that rendered it into the tree.\r\n\r\n### Example\r\n\r\nMyButton.cshtml:\r\n\r\n```\r\n<button onclick=@OnClick>Click me<button>\r\n@functions {\r\n    [Parameter] Action OnClick { get; set; }\r\n}\r\n```\r\n\r\nConsumer:\r\n\r\n```\r\n<MyButton OnClick=@SomeMethod /> or <MyButton OnClick=@(() => { clickCount++; }) />\r\n\r\nClicks: @clickCount\r\n\r\n@functions {\r\n    int clickCount = 0;\r\n\r\n    void SomeMethod()\r\n    {\r\n        clickCount++;\r\n    }\r\n}\r\n```\r\n\r\nYou'd expect that clicking the button would update the click count, but it wouldn't. You'd have to fix it by calling `StateHasChanged` manually in the consumer's `SomeMethod` or the lambda. This was annoying and confusing.\r\n\r\n### Example 2:\r\n\r\nPassthroughComponent.cshtml:\r\n\r\n```\r\n@ChildContent\r\n\r\n@functions {\r\n    [Parameter] RenderFragment ChildContent { get; set; }\r\n}\r\n```\r\n\r\nConsumer.cshtml:\r\n\r\n```\r\n<PassthroughComponent>\r\n    <button OnClick=@(() => { clickCount++; })>Click me</button>\r\n</PassthroughComponent>\r\n\r\nClicks: @clickCount\r\n\r\n@functions {\r\n    int clickCount = 0;\r\n}\r\n```\r\n\r\nAgain, clicking the button would seem to have no effect, unless you manually put `StateHasChanged` into the lambda.\r\n\r\n### Fix\r\n\r\nWe now route events to the component matching `eventHandlerDelegate.Target`, not the component that inserted the delegate into the render tree. This fixes both of the common cases above, and works with event handlers expressed as both methods and lambdas.\r\n\r\nThis also simplifies cases around binding. Components that expose custom bindables can now trigger updates in their consumers easily.\r\n\r\n### New API\r\n\r\nIn the case where a custom component wants to trigger a supplied event handler delegate indirectly (e.g., inside one of its own methods), there's now a public static API:\r\n\r\n```\r\nComponentEvents.InvokeEventHandler(someDelegate, eventArgs)\r\n```\r\n\r\nThis works with delegates that are `Action`, `Action<T>`, `Func<Task>`, `Func<T, Task>` (the fast paths), or arbitrary `MulticastDelgate` (slower path). It automatically causes the recipient to trigger its own re-rendering logic, including responses to async tasks (i.e., if it's a `Func<Task>`, then the recipient renders once synchronously, then again asynchronously after the task, just like normal event handlers).\r\n\r\n### Breaking change\r\n\r\nThere's one scenario where this may break something people were already doing, i.e., relying on the older strange behavior. Example:\r\n\r\n```\r\n<button onclick=@SomeOtherObject.SomeMethod>Click me</button>\r\n```\r\n\r\nPreviously, this would run `SomeOtherObject.SomeMethod` and then re-render the component. That might be useful if this method updated some global state that you read back during rendering.\r\n\r\nNow it will no longer re-render the component, because `SomeMethod` isn't on that component. If you actually do want to re-render the component in this case, the solution is to ensure you're actually calling one of its methods or lambdas, e.g.:\r\n\r\n```\r\n<button onclick=@(() => SomeOtherObject.SomeMethod())>Click me</button>\r\n```\r\n\r\nAlternatively, if you're actually updating some global state container, it's better still to have the state container raise some event that triggers all the necessary UI updates on all components, not just the one that raised the action.\r\n\r\nAlthough it's a slight drawback to have this breaking change, I still think this is the right thing to do. The new rules about when events update components are much simpler and easier to reason about (i.e., we re-render the component that owns the event handler method/lambda, regardless of who passed it where).","Url":"https://github.com/aspnet/Blazor/pull/1651","RelatedDescription":"Closed or merged PR \"Route events based on delegate target, not component ID\" (#1651)"},{"Id":"389714965","IsPullRequest":true,"CreatedAt":"2018-12-11T11:23:43","Actor":"SteveSandersonMS","Number":"1760","RawContent":null,"Title":"Simplify how .Mono project depends on .BuildTools","State":"closed","Body":"","Url":"https://github.com/aspnet/Blazor/pull/1760","RelatedDescription":"Closed or merged PR \"Simplify how .Mono project depends on .BuildTools\" (#1760)"},{"Id":"385221261","IsPullRequest":true,"CreatedAt":"2018-11-29T10:25:15","Actor":"SteveSandersonMS","Number":"1734","RawContent":null,"Title":"Clean up after mondorepo migration","State":"closed","Body":"This PR removes all the migrated projects, so the Blazor repo builds only the following:\r\n\r\n * `Microsoft.AspNetCore.Blazor.Mono`, because we want to keep the Mono runtime binaries separate from the mondorepo.\r\n * `Microsoft.AspNetCore.Blazor.BuildTools`, because this is only needed when packaging the Mono runtime binaries above. It contains the `ILWipe` mechanism. This is not a shipping package.\r\n * JSInterop packages (`Microsoft.JSInterop` and `Mono.WebAssembly.Interop`), because they have to get built somewhere, and this repo is already set up to do that. Later on we might want to create a dedicated CI setup for the [JSInterop repo](https://github.com/dotnet/jsinterop).\r\n\r\nThis PR also updates the repo's `README.md` to explain this change.","Url":"https://github.com/aspnet/Blazor/pull/1734","RelatedDescription":"Closed or merged PR \"Clean up after mondorepo migration\" (#1734)"},{"Id":"384486539","IsPullRequest":true,"CreatedAt":"2018-11-26T21:47:46","Actor":"SteveSandersonMS","Number":"1727","RawContent":null,"Title":"Attempt to fix build flakiness using \"npm ci\"","State":"closed","Body":"The main complexity is that we need NPM 5.7.0+, hence having to ensure all the CI systems are using a recent-enough version of Node.","Url":"https://github.com/aspnet/Blazor/pull/1727","RelatedDescription":"Closed or merged PR \"Attempt to fix build flakiness using \"npm ci\"\" (#1727)"},{"Id":"384294149","IsPullRequest":true,"CreatedAt":"2018-11-26T18:52:10","Actor":"SteveSandersonMS","Number":"1725","RawContent":null,"Title":"Decouple migrating code from non-migrating code","State":"closed","Body":"This PR changes the code that will migrate into the mondorepo so that it only consumes the nonmigrating code (`Microsoft.AspNetCore.Blazor.Mono`, `Microsoft.AspNetCore.Blazor.BuildTools`, JSInterop) via package references and no longer assumes the presence of their source files.\r\n\r\nThe nonmigrating code will continue to be built and shipped from the Blazor repo.","Url":"https://github.com/aspnet/Blazor/pull/1725","RelatedDescription":"Closed or merged PR \"Decouple migrating code from non-migrating code\" (#1725)"},{"Id":"383785598","IsPullRequest":true,"CreatedAt":"2018-11-23T13:31:44","Actor":"SteveSandersonMS","Number":"1718","RawContent":null,"Title":"Code migration phase 3 - Move Mono binaries to their own package","State":"closed","Body":"Continuation of #1706 and #1708\r\n\r\n### Migration steps\r\n\r\n1. ~~Reorganise all the files~~ Done in #1706\r\n2. ~~Rename projects/packages/namespaces~~ Done in #1708 \r\n3. **Obtain Mono binaries from some new external package instead of hosting them here <-- this PR**\r\n4. Actually move the code into the mondo-repo\r\n5. All ongoing refactoring, e.g., to take dependencies on 3.0 packages/tooling, to separate out WASM-specific aspects (e.g., in build system and middleware), etc. This is an open-ended task.\r\n","Url":"https://github.com/aspnet/Blazor/pull/1718","RelatedDescription":"Closed or merged PR \"Code migration phase 3 - Move Mono binaries to their own package\" (#1718)"},{"Id":"383579049","IsPullRequest":true,"CreatedAt":"2018-11-22T15:42:44","Actor":"SteveSandersonMS","Number":"1713","RawContent":null,"Title":"Re-add templates to .sln","State":"closed","Body":"They had to be removed temporarily during the renames. Now they're back.","Url":"https://github.com/aspnet/Blazor/pull/1713","RelatedDescription":"Closed or merged PR \"Re-add templates to .sln\" (#1713)"},{"Id":"383180115","IsPullRequest":true,"CreatedAt":"2018-11-22T12:19:12","Actor":"SteveSandersonMS","Number":"1708","RawContent":null,"Title":"Code migration part 2: Renames","State":"closed","Body":"Continuation of #1706 \r\n\r\n### Migration steps\r\n\r\n1. ~~Reorganise all the files~~ Done in #1706\r\n2. **Rename projects/packages/namespaces <-- this PR**\r\n3. Obtain Mono binaries from some new external package instead of hosting them here\r\n4. Actually move the code into the mondo-repo\r\n5. All ongoing refactoring, e.g., to take dependencies on 3.0 packages/tooling, to separate out WASM-specific aspects (e.g., in build system and middleware), etc. This is an open-ended task.\r\n\r\n### Review notes\r\n\r\nAgain, there are no (intended) functional changes here, besides public API name changes. The PR is just a vast amount of renaming things. It also affects every single compiler baseline so the number of files updated is so large.\r\n\r\nI know nobody can realistically \"review\" this PR, which is partly why I'm doing all these non-functional updates together and keeping the functional change (step 3 above) separate so it actually can be reviewed. So, when it's finished and the build looks good, I'm going to proceed to merge. @rynowak @javiercn If you do want to check any part of this please feel free - I'm happy to make further changes later.","Url":"https://github.com/aspnet/Blazor/pull/1708","RelatedDescription":"Closed or merged PR \"Code migration part 2: Renames\" (#1708)"},{"Id":"383014887","IsPullRequest":true,"CreatedAt":"2018-11-21T15:17:33","Actor":"SteveSandersonMS","Number":"1706","RawContent":null,"Title":"Code migration, step 1","State":"closed","Body":"We're in the process of migrating code from the Blazor repo into the [central ASP.NET Core repo](https://github.com/aspnet/aspnetcore). This is because (1) we're moving most of our repos into the central one, and (2) we've committed to ship the Razor Components programming model in ASP.NET Core 3.0.\r\n\r\nFor more info about what we've announced will ship in 3.0, see [this blog post](https://blogs.msdn.microsoft.com/webdev/2018/10/02/blazor-0-6-0-experimental-release-now-available/#razor-components-to-ship-with-asp-net-core-in-net-core-3-0). TLDR: server-side Blazor ships in 3.0 and gets the name \"Razor Components\", while client-side (WebAssembly) Blazor remains experimental to give more time to make the underlying runtime truly production grade.\r\n\r\n### Migration steps\r\n\r\n1. **Reorganise all the files <-- this PR**\r\n2. Rename projects/packages/namespaces\r\n3. Obtain Mono binaries from some new external package instead of hosting them here\r\n4. Actually move the code into the mondo-repo\r\n5. All ongoing refactoring, e.g., to take dependencies on 3.0 packages/tooling, to separate out WASM-specific aspects (e.g., in build system and middleware), etc. This is an open-ended task.\r\n\r\n### Review notes\r\n\r\nThere's nothing interesting in this PR. It's just a vast amount of moving files, tracking down all their references to each other, and updating all those references. The output from the build system should be unchanged.\r\n\r\nThe reason I separated the \"reorganise files\" step from \"rename content\" (e.g., namespaces) is because it's the \"reorganise\" step that causes all the unreadable noise in the Git diffs. Also, the \"reorganise\" step is nearly impossible to reconcile with unrelated changes, so until this is merged, we can't make any other changes in the repo.\r\n\r\nSo, @rynowak @javiercn @pranavkm @danroth27 @mkArtakMSFT: **please don't commit any other changes to the Blazor repo until this PR is merged**. I don't think I could realistically rebase this PR onto any new work!","Url":"https://github.com/aspnet/Blazor/pull/1706","RelatedDescription":"Closed or merged PR \"Code migration, step 1\" (#1706)"},{"Id":"380568230","IsPullRequest":true,"CreatedAt":"2018-11-15T09:43:49","Actor":"danroth27","Number":"1677","RawContent":null,"Title":"Update survey link for 0.7.0","State":"closed","Body":"","Url":"https://github.com/aspnet/Blazor/pull/1677","RelatedDescription":"Closed or merged PR \"Update survey link for 0.7.0\" (#1677)"},{"Id":"380239889","IsPullRequest":true,"CreatedAt":"2018-11-13T14:41:56","Actor":"SteveSandersonMS","Number":"1674","RawContent":null,"Title":"Bump version to 0.8.0-preview1-*","State":"closed","Body":"","Url":"https://github.com/aspnet/Blazor/pull/1674","RelatedDescription":"Closed or merged PR \"Bump version to 0.8.0-preview1-*\" (#1674)"},{"Id":"380196737","IsPullRequest":true,"CreatedAt":"2018-11-13T13:40:14","Actor":"SteveSandersonMS","Number":"1673","RawContent":null,"Title":"Marshal oninput events as UIChangeEventArgs","State":"closed","Body":"Same as #1475","Url":"https://github.com/aspnet/Blazor/pull/1673","RelatedDescription":"Closed or merged PR \"Marshal oninput events as UIChangeEventArgs\" (#1673)"},{"Id":"380176717","IsPullRequest":true,"CreatedAt":"2018-11-13T13:04:55","Actor":"SteveSandersonMS","Number":"1672","RawContent":null,"Title":"Serialize server-side renders. Fixes #1573","State":"closed","Body":"Another case where the asynchrony of server-side rendering needed some extra work to ensure the correct behaviors. This was a simple thread safety issue inside `Renderer`.\r\n\r\nTo a first approximation, I could have fixed it just by putting a `lock(_renderer) { ... }` around `RenderHandle`'s call to `_renderer.AddToRenderQueue`. However that could lead to deadlock because rendering can be re-entrant (a child can cause its own parent to re-render, e.g., by invoking some callback passed by the parent).\r\n\r\nThe solution here is to enqueue render calls on the circuit sync context. This causes some extra allocations per-render but provides an easy-to-reason-about solution. Plus it ensures that component lifecycle methods such as `Init` (which is invoked by the renderer) get executed serially within the sync context, which better matches up with the WebAssembly execution style.","Url":"https://github.com/aspnet/Blazor/pull/1672","RelatedDescription":"Closed or merged PR \"Serialize server-side renders. Fixes #1573\" (#1672)"},{"Id":"379223093","IsPullRequest":true,"CreatedAt":"2018-11-13T12:08:08","Actor":"SteveSandersonMS","Number":"1655","RawContent":null,"Title":"Handle overlapping events","State":"closed","Body":"This is to fix the general issue with server-side Blazor that the client can trigger events more rapidly than they get processed and the results flushed back to the client. A typical scenario would be when the user is typing and triggering `input` events on each keystroke.\r\n\r\nPreviously, if the client triggered the same event multiple times in quick succession, then the server might handle the first instance by re-rendering a component and hence disposing an event handler, then it might try to process the next instance and fail because the event handler was already disposed.\r\n\r\nWith this PR, the server delays the event handler disposals until it gets confirmation from the client that it's finished updating the UI with whatever renderbatch contains the disposal.\r\n\r\nThis should eliminate the issue, because once the client has updated the UI with whatever renderbatch contains the disposal, it can no longer legitimately try to trigger new instances of the event (the client knows it has gone from the UI). Also since client/server message delivery order is guaranteed, there's no way that an earlier event triggering message could come through *after* the client's message to confirm the completion of the renderbatch in which the event is disposed.","Url":"https://github.com/aspnet/Blazor/pull/1655","RelatedDescription":"Closed or merged PR \"Handle overlapping events\" (#1655)"},{"Id":"379829513","IsPullRequest":true,"CreatedAt":"2018-11-13T11:34:03","Actor":"SteveSandersonMS","Number":"1666","RawContent":null,"Title":"Fix intermittent render omissions. Fixes #1223.","State":"closed","Body":"As per #1223, there were some timing-based cases where server-side rendering would just fail to apply certain updates to the UI.\r\n\r\nThe underlying reason turned out to be a misunderstanding about how the SignalR APIs work: I thought that `SendAsync` would at least *send* the data synchronously, and that the returned `Task` represented the network transfer. In fact I was wrong, and `SendAsync` doesn't necessarily serialize the inputs synchronously - if the network channel is currently busy, it waits until it's free before serializing. This was problematic because we reuse `RenderBatch` instances and their buffers for subsequent renders, so if multiple renders occurred sufficiently close together in time, the 2nd or later render could have its data overwritten by the 3rd or later render before its data was dispatched to the client.\r\n\r\nThe fix here is the obvious one, i.e., to snapshot the `RenderBatch` data synchronously at the time when `UpdateDisplay` is called. This has the drawback that we are now allocating an extra `byte[]` on every render. Later on, we should consider putting in some kind of object pool for this.","Url":"https://github.com/aspnet/Blazor/pull/1666","RelatedDescription":"Closed or merged PR \"Fix intermittent render omissions. Fixes #1223.\" (#1666)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-05-18T05:30:11.2974661Z","RunDurationInMilliseconds":1252}