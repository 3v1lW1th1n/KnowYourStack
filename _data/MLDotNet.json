{"Data":{"GitHub":{"Issues":[{"Id":"417626434","IsPullRequest":true,"CreatedAt":"2019-03-06T05:14:21","Actor":"singlis","Number":"2867","RawContent":null,"Title":"Updating MKL","State":"open","Body":"- Updating ml.net to use mlnetDep nuget 0.0.0.9. This does a couple of things:\r\n1) Updates ML.Net to use MKL version 2008.3.10\r\n2) Enables OpenMP for MKL\r\n3) Project changes for handling the OpenMP library, note that we only copy this library on windows builds. Both Mac and Linux require this library to be installed.\r\n- Enables OpenMP for SymSGDNative\r\n- NumberOfThreads parameter now set the number of threads to use for SymSGDNative.\r\n\r\nThis related to issue #2211 ","Url":"https://github.com/dotnet/machinelearning/pull/2867","RelatedDescription":"Open PR \"Updating MKL\" (#2867)"},{"Id":"417582208","IsPullRequest":false,"CreatedAt":"2019-03-06T01:40:05","Actor":"yaeldekel","Number":"2866","RawContent":null,"Title":"Different behavior when calling Fit() on a transformer chain and on an IDataLoaderEstimator","State":"open","Body":"The following code runs without errors:\r\n\r\n```\r\n            var loader = ml.Data.CreateTextLoader<InputData>(hasHeader: true, dataSample: file);\r\n            var data = loader.Load(file);\r\n\r\n            // Pipeline.\r\n            var pipeline = ml.BinaryClassification.Trainers.GeneralizedAdditiveModels();\r\n\r\n            // Train.\r\n            var model = pipeline.Fit(data);\r\n```\r\nHowever, the following code fails with schema mismatch exception:\r\n```\r\n            var loader = ml.Data.CreateTextLoader<InputData>(hasHeader: true, dataSample: file);\r\n\r\n            // Define the same pipeline starting with the loader.\r\n            var pipeline = loader.Append(ml.BinaryClassification.Trainers.GeneralizedAdditiveModels());\r\n\r\n           // Train\r\n            var model = pipeline.Fit(file);\r\n```\r\n\r\nThis may also be related to issue #1969 .","Url":"https://github.com/dotnet/machinelearning/issues/2866","RelatedDescription":"Open issue \"Different behavior when calling Fit() on a transformer chain and on an IDataLoaderEstimator\" (#2866)"},{"Id":"417581237","IsPullRequest":true,"CreatedAt":"2019-03-06T01:35:49","Actor":"wschin","Number":"2865","RawContent":null,"Title":"[WIP] Scrub projection transforms","State":"open","Body":"Fix #2831. This PR only contains renaming.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2865","RelatedDescription":"Open PR \"[WIP] Scrub projection transforms\" (#2865)"},{"Id":"417553476","IsPullRequest":false,"CreatedAt":"2019-03-05T23:39:49","Actor":"Ivanidzo4ka","Number":"2864","RawContent":null,"Title":"Different behavior for TokenizeChar and TokenizeWords","State":"open","Body":"TokenizeChar produce vector of keys.\r\nTokenizeWords produce vector of strings.\r\nI have to add MapValueToKey to TokenizeWords in order to apply ProduceNgrams to it.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2864","RelatedDescription":"Open issue \"Different behavior for TokenizeChar and TokenizeWords\" (#2864)"},{"Id":"417526216","IsPullRequest":true,"CreatedAt":"2019-03-05T22:45:52","Actor":"shauheen","Number":"2861","RawContent":null,"Title":"Update release for 0.11","State":"closed","Body":"Updating the 0.11 release","Url":"https://github.com/dotnet/machinelearning/pull/2861","RelatedDescription":"Closed or merged PR \"Update release for 0.11\" (#2861)"},{"Id":"417534131","IsPullRequest":true,"CreatedAt":"2019-03-05T22:36:15","Actor":"Ivanidzo4ka","Number":"2863","RawContent":null,"Title":"Scrubbing schema related transforms","State":"open","Body":"Should fix https://github.com/dotnet/machinelearning/issues/2828","Url":"https://github.com/dotnet/machinelearning/pull/2863","RelatedDescription":"Open PR \"Scrubbing schema related transforms\" (#2863)"},{"Id":"417531477","IsPullRequest":true,"CreatedAt":"2019-03-05T22:28:31","Actor":"artidoro","Number":"2862","RawContent":null,"Title":"Scrubbing of the key related transforms","State":"open","Body":"Fixes #2829.\r\n\r\nRelated to the scrubbing tasks. I focus on the key related transforms in this PR.\r\n\r\nNote: in most places the following method is used by the estimator to get the the columns. I kept it but made it internal, despite Ivan suggested deleting it.\r\n\r\n```charp\r\ninternal IReadOnlyCollection<KeyToVectorMappingEstimator.ColumnOptions> Columns => _columns.AsReadOnly();\r\n```\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2862","RelatedDescription":"Open PR \"Scrubbing of the key related transforms\" (#2862)"},{"Id":"417486587","IsPullRequest":false,"CreatedAt":"2019-03-05T22:18:14","Actor":"rogancarr","Number":"2857","RawContent":null,"Title":"GAM parameter names are non-standard","State":"closed","Body":"The trained `Generalized Additive Models` (aka `GAMs`) methods for obtaining trained model parameters have non-standard names and various inconsistencies.\r\n\r\nThese are the properties:\r\n```cs\r\nvar shapeFunctionsBins = gamModel.GetBinUpperBounds();\r\nvar shapeFunctionsValues = gamModel.GetBinEffects();\r\nvar numShapeFunctions = gamModel.NumShapeFunctions;\r\nvar intercept = gamModel.Intercept;\r\n```\r\n\r\nThere are a few issues here:\r\n1. Nonstandard names\r\nI propose `BinUpperBounds` and `BinEffects` be renamed `ShapeFunctionsBins` and `ShapeFunctionsBinValues`.\r\n2. Inconsistent names\r\nSometimes we say `ShapeFunctions`, sometimes we done. Same solution proposed as No. 1.\r\n3. Inconsistency in `Get` methods vs. properties\r\ne.g. `Intercept` vs. `GetBinUpperBounds`.\r\nI propose we move all the methods to be properties.\r\ne.g. `model.ShapeFunctionsBins`.\r\n4. Names leak implementation\r\n`BinUpperBounds` vs. `Bins`.\r\nQuestion: should we just say `Bins` rather than `BinUpperBounds` and say that they are the upper bounds for the bin in the documentation? `BinUpperBounds` is very verbose, and speaks to how we bin.","Url":"https://github.com/dotnet/machinelearning/issues/2857","RelatedDescription":"Closed issue \"GAM parameter names are non-standard\" (#2857)"},{"Id":"417501324","IsPullRequest":true,"CreatedAt":"2019-03-05T21:21:01","Actor":"shauheen","Number":"2860","RawContent":null,"Title":"Adding release notes for v0.11","State":"closed","Body":"Adding release notes","Url":"https://github.com/dotnet/machinelearning/pull/2860","RelatedDescription":"Closed or merged PR \"Adding release notes for v0.11\" (#2860)"},{"Id":"417460349","IsPullRequest":true,"CreatedAt":"2019-03-05T21:19:36","Actor":"Ivanidzo4ka","Number":"2852","RawContent":null,"Title":"Scrubbing feature selection","State":"closed","Body":"fixes https://github.com/dotnet/machinelearning/issues/2830","Url":"https://github.com/dotnet/machinelearning/pull/2852","RelatedDescription":"Closed or merged PR \"Scrubbing feature selection\" (#2852)"},{"Id":"417496864","IsPullRequest":true,"CreatedAt":"2019-03-05T20:54:32","Actor":"rogancarr","Number":"2859","RawContent":null,"Title":"Add V1 Introspective Training Tests","State":"open","Body":"This PR adds tests to cover the Introspective Training scenarios we want fully supported in V1.\r\n\r\nI can take an existing model file and inspect what transformers were included in the pipeline\t \t \r\nI can inspect the coefficients (weights and bias) of a linear model without much work. Easy to find via auto-complete.\t \t \r\nI can inspect the normalization coefficients of a normalizer in my pipeline without much work. Easy to find via auto-complete.\t \t \t \r\nI can inspect the trees of a boosted decision tree model without much work. Easy to find via auto-complete.\t \t \t \r\nI can inspect the topics after training an LDA transform. Easy to find via auto-complete.\t \t \t \r\nI can inspect a categorical transform and see which feature values map to which key values. Easy to find via auto-complete.\t \t \t \r\nP1: I can access the GAM feature histograms through APIs\r\n\r\nFixes: #2498 ","Url":"https://github.com/dotnet/machinelearning/pull/2859","RelatedDescription":"Open PR \"Add V1 Introspective Training Tests\" (#2859)"},{"Id":"417444223","IsPullRequest":true,"CreatedAt":"2019-03-05T20:34:39","Actor":"yaeldekel","Number":"2850","RawContent":null,"Title":"Add API to save/load models with their input schema","State":"closed","Body":"Fixes #2735. \r\n\r\nCurrently, this PR adds a public API that saves and load an IDataLoader. Later iterations will add APIs to save/load the schema directly.","Url":"https://github.com/dotnet/machinelearning/pull/2850","RelatedDescription":"Closed or merged PR \"Add API to save/load models with their input schema\" (#2850)"},{"Id":"417488244","IsPullRequest":true,"CreatedAt":"2019-03-05T20:31:23","Actor":"yaeldekel","Number":"2858","RawContent":null,"Title":"Add save/load APIs for IDataLoader","State":"open","Body":"Fixes #2735.","Url":"https://github.com/dotnet/machinelearning/pull/2858","RelatedDescription":"Open PR \"Add save/load APIs for IDataLoader\" (#2858)"},{"Id":"417478741","IsPullRequest":true,"CreatedAt":"2019-03-05T20:05:29","Actor":"ganik","Number":"2856","RawContent":null,"Title":"Fixing inconsistency in usage of LossFunction","State":"open","Body":"fixes #2174\r\nfixes #2594","Url":"https://github.com/dotnet/machinelearning/pull/2856","RelatedDescription":"Open PR \"Fixing inconsistency in usage of LossFunction\" (#2856)"},{"Id":"417414374","IsPullRequest":true,"CreatedAt":"2019-03-05T20:00:16","Actor":"TomFinley","Number":"2849","RawContent":null,"Title":"Remove random trainer and model parameters from the public surface.","State":"closed","Body":"Fix #2848.","Url":"https://github.com/dotnet/machinelearning/pull/2849","RelatedDescription":"Closed or merged PR \"Remove random trainer and model parameters from the public surface.\" (#2849)"},{"Id":"417413540","IsPullRequest":false,"CreatedAt":"2019-03-05T20:00:16","Actor":"TomFinley","Number":"2848","RawContent":null,"Title":"Internalize random model parameters and trainer","State":"closed","Body":"In #2846 it came out that we still somehow had the random predictor lying around -- I was unaware of this. This structure, being inherently stateful, will introduce subtle bugs and problems when used as part of a transformer. (E.g., what happens when you construct multiple prediction engines over the resulting transform.) These bugs are subtle, but still there and points to a deep problem with this structure. It claims to be a value mapper, so it is even claiming to be a function, which it definitely is not. Perhaps its presence was viewed as merely harmless which is why we did not remove it in prior years, but now that we're trying to finalize the API we must make a stronger case here.\r\n\r\nWe have in other places introduced other mechanisms to deal with inherently stateful predictors (e.g., what we had to do with time series). So, I think that in time we can address the need for this thing, *if there is a need*. (I have been unaware of any scenario where this thing is useful beyond a mere comparison point for evaluation, which can be done far better in a variety of ways.)\r\n\r\nThe work is fairly simple: internalize this architecturally troublesome trainer and model. (This is similar to how we are still keeping the generate number transform internal, though, that one has actual real application.) We can decide what to do with it later.","Url":"https://github.com/dotnet/machinelearning/issues/2848","RelatedDescription":"Closed issue \"Internalize random model parameters and trainer\" (#2848)"},{"Id":"417475996","IsPullRequest":true,"CreatedAt":"2019-03-05T19:58:14","Actor":"zeahmed","Number":"2855","RawContent":null,"Title":"Fixed a tensorflow test which was marked as skipped.","State":"open","Body":"This PR fixes a TensorFlow test which was marked skipped. The test got obsolete because it was creating loader from string.\r\n\r\nAlso, fixes reloading of model again in the TensorFlowModel class.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2855","RelatedDescription":"Open PR \"Fixed a tensorflow test which was marked as skipped.\" (#2855)"},{"Id":"417475922","IsPullRequest":false,"CreatedAt":"2019-03-05T19:58:03","Actor":"rogancarr","Number":"2854","RawContent":null,"Title":"Normalizer parameters are not publicly available","State":"open","Body":"A trained normalizer does not have public methods or properties that allows access to the normalization parameters. For example, a minmax normalizer doesn't have the min, max, or zero-level available.\r\n\r\nI would expect that the trained transformer would have a `.Model` property, similar to a trained learner.\r\n\r\nThis is required V1 Scenario (#2498):\r\n- I can inspect the normalization coefficients of a normalizer in my pipeline without much work. Easy to find via auto-complete.\r\n\r\n@shauheen @eerhardt @TomFinley I marked this as P13, but it could be a V1.1 as it does not change APIs, but needs new APIs. This is similar to LDA (#2197), and I think we have a more global problem where trained transforms don't expose a `.Model` property similar to our learners.","Url":"https://github.com/dotnet/machinelearning/issues/2854","RelatedDescription":"Open issue \"Normalizer parameters are not publicly available\" (#2854)"},{"Id":"417463711","IsPullRequest":false,"CreatedAt":"2019-03-05T19:43:42","Actor":"artidoro","Number":"2853","RawContent":null,"Title":"Estimators and their catalog extensions should have matching names","State":"closed","Body":"In #2827, one of the items is to make sure the estimators and their catalog extensions have matching names. Like in trainers, we should keep the suffix estimator only in the estimator name, and remove it from the catalog extension, something like the following:\r\n\r\n`NameEstimator Name(...)`\r\n\r\n***The question now is: How do we reconcile the names and which convention should we follow?***\r\n\r\nMost estimator names follow the convention: `ActionPerformingEstimator`, while in the catalog usually we use the convetion: `PerformAction`.\r\n\r\nSome examples are:\r\n\r\nEstimator Name | Catalog Name\r\n------------ | -------------\r\n`KeyToBinaryVectorMappingEstimator` | `MapKeyToBinaryVector`\r\n`MutualInformationFeatureSelectingEstimator` | `SelectFeaturesBasedOnMutualInformation`\r\n`CountFeatureSelectingEstimator` | `SelectFeaturesBasedOnCount`\r\n... | ...\r\n\r\ncc/ @sfilipi @TomFinley @glebuk @eerhardt @rogancarr @ivanbasov","Url":"https://github.com/dotnet/machinelearning/issues/2853","RelatedDescription":"Closed issue \"Estimators and their catalog extensions should have matching names\" (#2853)"},{"Id":"417445315","IsPullRequest":true,"CreatedAt":"2019-03-05T18:36:29","Actor":"wschin","Number":"2851","RawContent":null,"Title":"Polish early stop rules in fast tree","State":"open","Body":"Fix #2520. \r\n","Url":"https://github.com/dotnet/machinelearning/pull/2851","RelatedDescription":"Open PR \"Polish early stop rules in fast tree\" (#2851)"},{"Id":"417283565","IsPullRequest":true,"CreatedAt":"2019-03-05T12:52:22","Actor":"jwood803","Number":"2847","RawContent":null,"Title":"Add XML doc to the ITrainerEstimator interface","State":"open","Body":"Just a quick draft for the XML docs to help fix #2629 ","Url":"https://github.com/dotnet/machinelearning/pull/2847","RelatedDescription":"Open PR \"Add XML doc to the ITrainerEstimator interface\" (#2847)"},{"Id":"417052498","IsPullRequest":true,"CreatedAt":"2019-03-05T02:14:21","Actor":"TomFinley","Number":"2842","RawContent":null,"Title":"Hide more of Microsoft.ML.Data","State":"closed","Body":"Towards #1602. When performing what I hope is one of my final reviews of the public surface area of `Microsoft.ML.Data` I saw many \"small\" items, each too petty to warrant separate issues, but that we nonetheless do not want in the public surface. This is in the vein of #2300 and other similar PRs. Special emphasis was placed on making sure we don't have abstract protected members visible as part of the public surface, and other such things as this.\r\n\r\nIn my review of the assembly I did not address those types or members I knew were being taken care of through other channels. (E.g., the attribute bearing marker interfaces for `IComponentFactory`, or the calibrator.)","Url":"https://github.com/dotnet/machinelearning/pull/2842","RelatedDescription":"Closed or merged PR \"Hide more of Microsoft.ML.Data\" (#2842)"},{"Id":"417080278","IsPullRequest":true,"CreatedAt":"2019-03-05T02:11:58","Actor":"artidoro","Number":"2846","RawContent":null,"Title":"Remove ConcurrencyFactor from IHostEnvironment","State":"open","Body":"Fixes #2051.\r\n\r\nIn this PR I remove `ConcurrencyFactor` from `IHostEnvironment` and interfaces and classes deriving/implementing it. \r\n\r\nI had to skip a `RandomPredictor` as I am not sure how I can require a single threaded behavior without the `ConcurrencyFactor` for this specific trainer. \r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2846","RelatedDescription":"Open PR \"Remove ConcurrencyFactor from IHostEnvironment\" (#2846)"},{"Id":"417071060","IsPullRequest":true,"CreatedAt":"2019-03-05T01:36:31","Actor":"wschin","Number":"2844","RawContent":null,"Title":"[One line Fix] Fix a use of text featurizer","State":"closed","Body":"As title.","Url":"https://github.com/dotnet/machinelearning/pull/2844","RelatedDescription":"Closed or merged PR \"[One line Fix] Fix a use of text featurizer\" (#2844)"},{"Id":"417071346","IsPullRequest":true,"CreatedAt":"2019-03-05T01:31:01","Actor":"jwood803","Number":"2845","RawContent":null,"Title":"Update schema comprehension documentation code","State":"open","Body":"Fix for #2039","Url":"https://github.com/dotnet/machinelearning/pull/2845","RelatedDescription":"Open PR \"Update schema comprehension documentation code\" (#2845)"},{"Id":"417066229","IsPullRequest":true,"CreatedAt":"2019-03-05T01:08:33","Actor":"sharwell","Number":"2843","RawContent":null,"Title":"Update to coverlet 2.6.0","State":"open","Body":"","Url":"https://github.com/dotnet/machinelearning/pull/2843","RelatedDescription":"Open PR \"Update to coverlet 2.6.0\" (#2843)"},{"Id":"417021989","IsPullRequest":true,"CreatedAt":"2019-03-04T23:45:21","Actor":"Ivanidzo4ka","Number":"2840","RawContent":null,"Title":"Hide SaveTo/LoadFrom from TransformerChain","State":"closed","Body":"Fixes https://github.com/dotnet/machinelearning/issues/2837","Url":"https://github.com/dotnet/machinelearning/pull/2840","RelatedDescription":"Closed or merged PR \"Hide SaveTo/LoadFrom from TransformerChain\" (#2840)"},{"Id":"417044942","IsPullRequest":false,"CreatedAt":"2019-03-04T23:40:10","Actor":"TomFinley","Number":"2841","RawContent":null,"Title":"The curious case of TrainedWrapperEstimatorBase and friends","State":"open","Body":"So, while I was doing another round of internalization, one thing that I internalized was this. (Basically, something to handle the shimming from the now internal `IDataTransform` interface to the new `ITransformer` interface, during the regrettable situations -- thankfully few -- where such a thing is still necessary. So this:\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/63a7654edaddaf0eea6af98ea762b01594d083ee/src/Microsoft.ML.Data/DataLoadSave/TransformWrapper.cs#L20\r\n\r\nand this\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/63a7654edaddaf0eea6af98ea762b01594d083ee/src/Microsoft.ML.Data/DataLoadSave/TransformWrapper.cs#L151\r\n\r\nNow, that's all fine, but after doing the necessary work it seemed that I could delete the estimator wrapper entirely, but then I see this very intriguing note.\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/63a7654edaddaf0eea6af98ea762b01594d083ee/src/Microsoft.ML.Data/DataView/RowToRowMapperTransform.cs#L50-L56\r\n\r\nI do not understand what is going on here. This is not essential -- everything here is internal -- but it seems at least odd. This seems to indicate that this method and the class I wanted to delete have something to do with each other, but as far as I can tell they have nothing to do with each other whatsoever. But then why the comment?\r\n\r\nAnyway, there's clearly something odd going on. This is absolutely not critical, but I wanted to register an issue about the oddness, since the code underlying it passes my understanding.","Url":"https://github.com/dotnet/machinelearning/issues/2841","RelatedDescription":"Open issue \"The curious case of TrainedWrapperEstimatorBase and friends\" (#2841)"},{"Id":"417013694","IsPullRequest":true,"CreatedAt":"2019-03-04T23:11:41","Actor":"najeeb-kazmi","Number":"2839","RawContent":null,"Title":"Remnants from renaming of StratificationColumn","State":"closed","Body":"Fixes #2536 remnants.","Url":"https://github.com/dotnet/machinelearning/pull/2839","RelatedDescription":"Closed or merged PR \"Remnants from renaming of StratificationColumn\" (#2839)"},{"Id":"417007709","IsPullRequest":false,"CreatedAt":"2019-03-04T21:47:54","Actor":"zeahmed","Number":"2838","RawContent":null,"Title":"`UseStopRemover` parameter in TextFeaturizer does not make sense.","State":"open","Body":"https://github.com/dotnet/machinelearning/blob/5746ec9eeb5aac9dcd3c4355ccce46d17ee46cdf/src/Microsoft.ML.Transforms/Text/TextFeaturizingEstimator.cs#L157\r\n\r\nI think it should be renamed to `UseStopWordRemover`? Xml comments need to be updated to too.","Url":"https://github.com/dotnet/machinelearning/issues/2838","RelatedDescription":"Open issue \"`UseStopRemover` parameter in TextFeaturizer does not make sense.\" (#2838)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-03-06T05:30:34.7076159Z","RunDurationInMilliseconds":1263}