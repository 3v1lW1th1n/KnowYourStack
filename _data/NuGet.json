{"Data":{"Blog":{"FeedItems":[{"Title":"Deprecating TLS 1.0 and 1.1 on NuGet.org","PublishedOn":"2019-11-15T18:58:33+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"co-authored by Scott Bommarito\nAt Microsoft, using the latest and secure encryption techniques is very important to us to ensure the security and privacy of our customers. TLS 1.0 and TLS 1.1,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-tls-1-0-and-1-1-on-nuget-org/","RawContent":null},{"Title":"Deprecating packages on nuget.org","PublishedOn":"2019-09-30T18:29:23+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We are excited to announce that nuget.org now supports package deprecation. This has been a long standing ask that will help the ecosystem use supported packages. As a package publisher on nuget.org,...","Href":"https://devblogs.microsoft.com/nuget/deprecating-packages-on-nuget-org/","RawContent":null},{"Title":"New and improved NuGet Search is here!","PublishedOn":"2019-08-23T03:31:26+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"It’s been a long time coming, and today we are excited to announce the new and improved search on NuGet.org leveraging Azure Search. We want to start this post with a huge thanks to you, the NuGet...","Href":"https://devblogs.microsoft.com/nuget/new-and-improved-nuget-search/","RawContent":null},{"Title":"Surfacing GitHub Usage for packages on NuGet.org","PublishedOn":"2019-07-17T20:00:23+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"There are several criteria you can use today to evaluate NuGet packages. We received feedback that you would like even more information to help choose the right packages. We&#8217;re excited to...","Href":"https://devblogs.microsoft.com/nuget/surfacing-github-usage-for-packages-on-nuget-org/","RawContent":null},{"Title":"NuGet Spring 2019 Roadmap","PublishedOn":"2019-04-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"We published our last NuGet roadmap in June last year. Many of the features announced were major additions to NuGet and we have been hard at work to implement those over the last few months. In this...","Href":"https://devblogs.microsoft.com/nuget/nuget-spring-2019-roadmap/","RawContent":null},{"Title":"Enable repeatable package restores using a lock file","PublishedOn":"2018-12-17T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"With PackageReference, NuGet always tries to produce the same closure of package dependencies if the input package reference list has not changed. However, there are a few scenarios where it may not...","Href":"https://devblogs.microsoft.com/nuget/enable-repeatable-package-restores-using-a-lock-file/","RawContent":null},{"Title":"Lock down your dependencies using configurable trust policies","PublishedOn":"2018-12-05T08:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"For the past several months we have focused on various features to improve package security and trust. Around a year back, we had announced our plans on various signing functionalities that we have...","Href":"https://devblogs.microsoft.com/nuget/lock-down-your-dependencies-using-configurable-trust-policies/","RawContent":null},{"Title":"Improved package debugging experience with the NuGet.org symbol server","PublishedOn":"2018-11-16T08:00:00+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Starting today, you can publish symbol packages to the NuGet.org symbol server. With NuGet.org as a single service provider for libraries and symbols, package authors and consumers will have a...","Href":"https://devblogs.microsoft.com/nuget/improved-package-debugging-experience-with-the-nuget-org-symbol-server/","RawContent":null},{"Title":"Introducing Source Code Link for NuGet packages","PublishedOn":"2018-08-27T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"NuGet.org now supports surfacing source code repository link for NuGet packages. This will enable package authors to surface both the project&#8217;s website and the source repository using the...","Href":"https://devblogs.microsoft.com/nuget/introducing-source-code-link-for-nuget-packages/","RawContent":null},{"Title":"NuGet.org starts repo-signing packages","PublishedOn":"2018-08-10T07:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In May, we implemented Stage 1 and enabled support for any NuGet.org user to submit signed packages to NuGet.org. Today, we are announcing Stage 2 of our NuGet package signing journey &#8211; tamper...","Href":"https://devblogs.microsoft.com/nuget/introducing-repository-signatures/","RawContent":null}],"ResultType":"Feed"},"Gallery":{"Events":[{"Id":"11338738042","Type":"PullRequestEvent","CreatedAt":"2020-01-22T23:26:17","Actor":"ryuyu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7819","RelatedDescription":"Merged pull request \"[ReleasePrep][2020.01.21]FI master into dev\" (#7819) at NuGet/NuGetGallery","RelatedBody":"Picking up hotfix for json encode.\r\n\r\nBlocks https://github.com/NuGet/NuGetGallery/pull/7818"},{"Id":"11337363735","Type":"PullRequestEvent","CreatedAt":"2020-01-22T20:09:42","Actor":"ryuyu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7819","RelatedDescription":"Opened pull request \"[ReleasePrep][2020.01.21]FI master into dev\" (#7819) at NuGet/NuGetGallery","RelatedBody":"Picking up hotfix for json encode.\r\n\r\nBlocks https://github.com/NuGet/NuGetGallery/pull/7818"},{"Id":"11329669888","Type":"PullRequestEvent","CreatedAt":"2020-01-22T01:40:55","Actor":"ryuyu","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7818","RelatedDescription":"Opened pull request \"[ReleasePrep][2020.01.21]RI dev to master\" (#7818) at NuGet/NuGetGallery","RelatedBody":"Pulling in display package page performance improvements."},{"Id":"11329316167","Type":"PullRequestEvent","CreatedAt":"2020-01-22T00:24:54","Actor":"skofman1","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/NuGet/NuGetGallery/pull/7814","RelatedDescription":"Merged pull request \"Reject packages with duplicate dependency groups\" (#7814) at NuGet/NuGetGallery","RelatedBody":"Addresses https://github.com/NuGet/NuGetGallery/issues/7714"},{"Id":"11329031684","Type":"IssuesEvent","CreatedAt":"2020-01-21T23:31:16","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7817","RelatedDescription":"Opened issue \"Display package page semver 2 redirect does not work as expected\" (#7817) at NuGet/NuGetGallery","RelatedBody":"### Describe the bug\r\nThe display package page redirects if the version provided in the URI is not normalized. For example using version [`05.5.0-preview1.6319`](https://www.nuget.org/packages/NuGet.Packaging/05.5.0-preview.1.6319) will get redirected to [`5.5.0-preview1.6319`](https://www.nuget.org/packages/NuGet.Packaging/5.5.0-preview.1.6319). However, semver 2 version [`5.5.0-preview.1.6319+ba2a72ac9afd9e7260798a6ad14088297570b350`](https://www.nuget.org/packages/NuGet.Packaging/5.5.0-preview.1.6319+ba2a72ac9afd9e7260798a6ad14088297570b350) does not redirect as expected.\r\n\r\n### Expected behavior\r\nNavigating to a semver2 version should redirect to the normalized version.\r\n"},{"Id":"11327455118","Type":"IssuesEvent","CreatedAt":"2020-01-21T19:52:47","Actor":"loic-sharma","Repository":"NuGet/NuGetGallery","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/NuGetGallery/issues/7816","RelatedDescription":"Closed issue \"ID Prefix Reservation\" (#7816) at NuGet/NuGetGallery","RelatedBody":"I have twice now followed the instructions for reserving an ID prefix to a name that matches the prefix of all 14 of my packages. It is also a name that I hold a federal trademark on. The second time, I also sent an email to an address I had for NuGet saying that it was my second attempt and that I had heard nothing back from the first attempt.\r\n\r\nIn both cases, I never heard anything back and my ID prefix is still not reserved.\r\n\r\nIs this a process that for some reason is normal to take several months? Or is it possible that the request was silently rejected for some reason? What should be my expectations for sending such an email into the void?"}],"ResultType":"GitHubEvent"},"Home":{"Events":[{"Id":"11339422766","Type":"IssuesEvent","CreatedAt":"2020-01-23T01:55:49","Actor":"dominoFire","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9088","RelatedDescription":"Opened issue \"Investigate possible file locks in Embedded Icons PM UI\" (#9088) at NuGet/Home","RelatedBody":"From https://github.com/NuGet/NuGet.Client/pull/3153#discussion_r368098129\r\n\r\nInvestigate file open/close events in PerfView"},{"Id":"11337035412","Type":"IssuesEvent","CreatedAt":"2020-01-22T19:28:15","Actor":"tj-incycle","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9087","RelatedDescription":"Opened issue \"dotnet CLI does not correctly use --source flag\" (#9087) at NuGet/Home","RelatedBody":"## Details about Problem\r\nI have multiple internal NuGet feeds that only host internal package. using the .NET CLI, I'm trying to add a NuGet package to a project from the public feed so I'm using the `--source` flag to have the CLI only fetch from that feed. With this flag set, it still tries to scan all of the feeds I have listed. It's causing an issue because I'm not authenticated against one of the feeds at the present moment. \r\n\r\nNuGet product used (NuGet.exe | VS UI | Package Manager Console | dotnet.exe): `dotnet`\r\n\r\nNuGet version (x.x.x.xxx): 5.4.0.6292 (bundled w/ .NET CLI)\r\n\r\ndotnet.exe --version (if appropriate): 3.1.100\r\n\r\nVS version (if appropriate): N/A\r\n\r\nOS version (i.e. win10 v1607 (14393.321)): Win10 1903 (18362.592)\r\n\r\nWorked before? If so, with which NuGet version: Not certain worked before\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. Have at least one private NuGet feed.\r\n\r\n2. Install a package via `dotnet` and logs clearly show it is hitting every feed.\r\n\r\n## Other suggested things\r\nNone\r\n\r\n### Verbose Logs\r\n```\r\n:> dotnet add package --source https://api.nuget.org/v3/index.json CsvReader\r\n  Writing C:\\Users\\[user name]\\AppData\\Local\\Temp\\tmp4EE4.tmp\r\ninfo : Adding PackageReference for package 'CsvReader' into project '[Path to CS Project File]'.\r\ninfo : Restoring packages for [Path to CS Project File]...\r\ninfo :   GET https://api.nuget.org/v3-flatcontainer/csvreader/index.json\r\ninfo :   GET https://pkgs.dev.azure.com/[private Azure DevOps Org]/_packaging/3e08a4c9-3e4e-4ee1-9d26-e9c60aa15b17/nuget/v3/flat2/csvreader/index.json\r\ninfo :   GET https://[private Azure DevOps Org].pkgs.visualstudio.com/_packaging/22d706fc-3c78-40ac-9599-5fd3e9decacc/nuget/v3/flat2/csvreader/index.json\r\ninfo :   OK https://api.nuget.org/v3-flatcontainer/csvreader/index.json 388ms\r\ninfo :   Unauthorized https://pkgs.dev.azure.com/[private Azure DevOps Org]/_packaging/3e08a4c9-3e4e-4ee1-9d26-e9c60aa15b17/nuget/v3/flat2/csvreader/index.json 325ms\r\nlog  : Retrying 'FindPackagesByIdAsync' for source 'https://pkgs.dev.azure.com/[private Azure DevOps Org]/_packaging/3e08a4c9-3e4e-4ee1-9d26-e9c60aa15b17/nuget/v3/flat2/csvreader/index.json'.\r\nlog  : Response status code does not indicate success: 401 (Unauthorized).\r\ninfo :   GET https://pkgs.dev.azure.com/[private Azure DevOps Org]/_packaging/3e08a4c9-3e4e-4ee1-9d26-e9c60aa15b17/nuget/v3/flat2/csvreader/index.json\r\ninfo :   Unauthorized https://[private Azure DevOps Org].pkgs.visualstudio.com/_packaging/22d706fc-3c78-40ac-9599-5fd3e9decacc/nuget/v3/flat2/csvreader/index.json 356ms\r\nlog  : Retrying 'FindPackagesByIdAsync' for source 'https://[private Azure DevOps Org].pkgs.visualstudio.com/_packaging/22d706fc-3c78-40ac-9599-5fd3e9decacc/nuget/v3/flat2/csvreader/index.json'.\r\nlog  : Response status code does not indicate success: 401 (Unauthorized).\r\ninfo :   GET https://[private Azure DevOps Org].pkgs.visualstudio.com/_packaging/22d706fc-3c78-40ac-9599-5fd3e9decacc/nuget/v3/flat2/csvreader/index.json\r\ninfo :   Unauthorized https://pkgs.dev.azure.com/[private Azure DevOps Org]/_packaging/3e08a4c9-3e4e-4ee1-9d26-e9c60aa15b17/nuget/v3/flat2/csvreader/index.json 112ms\r\nlog  : Retrying 'FindPackagesByIdAsync' for source 'https://pkgs.dev.azure.com/[private Azure DevOps Org]/_packaging/3e08a4c9-3e4e-4ee1-9d26-e9c60aa15b17/nuget/v3/flat2/csvreader/index.json'.\r\nlog  : Response status code does not indicate success: 401 (Unauthorized).\r\ninfo :   GET https://pkgs.dev.azure.com/[private Azure DevOps Org]/_packaging/3e08a4c9-3e4e-4ee1-9d26-e9c60aa15b17/nuget/v3/flat2/csvreader/index.json\r\ninfo :   Unauthorized https://[private Azure DevOps Org].pkgs.visualstudio.com/_packaging/22d706fc-3c78-40ac-9599-5fd3e9decacc/nuget/v3/flat2/csvreader/index.json 139ms\r\nlog  : Retrying 'FindPackagesByIdAsync' for source 'https://[private Azure DevOps Org].pkgs.visualstudio.com/_packaging/22d706fc-3c78-40ac-9599-5fd3e9decacc/nuget/v3/flat2/csvreader/index.json'.\r\nlog  : Response status code does not indicate success: 401 (Unauthorized).\r\ninfo :   GET https://[private Azure DevOps Org].pkgs.visualstudio.com/_packaging/22d706fc-3c78-40ac-9599-5fd3e9decacc/nuget/v3/flat2/csvreader/index.json\r\ninfo :   Unauthorized https://pkgs.dev.azure.com/[private Azure DevOps Org]/_packaging/3e08a4c9-3e4e-4ee1-9d26-e9c60aa15b17/nuget/v3/flat2/csvreader/index.json 112ms\r\nerror: Failed to retrieve information about 'CsvReader' from remote source 'https://pkgs.dev.azure.com/[private Azure DevOps Org]/_packaging/3e08a4c9-3e4e-4ee1-9d26-e9c60aa15b17/nuget/v3/flat2/csvreader/index.json'.\r\nerror:   Response status code does not indicate success: 401 (Unauthorized).\r\n```\r\n\r\n### Sample Project\r\n\r\nNone\r\n"},{"Id":"11336466713","Type":"IssuesEvent","CreatedAt":"2020-01-22T18:16:21","Actor":"loic-sharma","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9086","RelatedDescription":"Opened issue \"NuGet.Protocol does not support getting a version's download count from search\" (#9086) at NuGet/Home","RelatedBody":"## Details about Problem\r\n\r\nNuGet product used: NuGet.Protocol\r\nNuGet version: 5.5.0-preview.1.6319\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\nThe NuGet Search API returns the download count for each individual version of a package through the `downloads` property in the `versions` array (see [this documentation](https://docs.microsoft.com/en-us/nuget/api/search-query-service-resource#search-result)). For example, see: https://azuresearch-usnc.nuget.org/query?q=packageid:newtonsoft.json&prerelease=true&semVerLevel=2.0.0\r\n\r\nThe NuGet.Protocol library has a [`PackageSearchMetadata.GetVersionsAsync()`](https://github.com/NuGet/NuGet.Client/blob/9173d9bc53b5123d5cadec6cae513149d40505b0/src/NuGet.Core/NuGet.Protocol/Model/PackageSearchMetadata.cs#L197) method that returns `VersionInfo`s, which have a [`DownloadCount`](https://github.com/NuGet/NuGet.Client/blob/9173d9bc53b5123d5cadec6cae513149d40505b0/src/NuGet.Core/NuGet.Protocol/Model/VersionInfo.cs#L34) property. Sadly, this `DownloadCount` property returns the total download count instead of the version's download count. We should expose the version specific download count as well.\r\n\r\n### Sample Project\r\n\r\nHere's an example project that reproduces this issue: https://gist.github.com/loic-sharma/107210ba996fba598b6fdb5143ed847b\r\n\r\n"},{"Id":"11336410501","Type":"IssuesEvent","CreatedAt":"2020-01-22T18:08:53","Actor":"zkat","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9085","RelatedDescription":"Opened issue \"Update changelog generator to use ZenHub API\" (#9085) at NuGet/Home","RelatedBody":"As part of https://github.com/NuGet/Home/pull/9050, we're moving to using Milestones for Sprints. That means that [the current ChangelogGenerator](https://github.com/NuGet/Entropy/tree/master/ChangelogGenerator/ChangelogGenerator) needs to be updated so that it pulls its list of completed issues from the [ZenHub Releases API](https://github.com/ZenHubIO/API#get-all-the-issues-for-a-release-report) instead."},{"Id":"11335589703","Type":"IssuesEvent","CreatedAt":"2020-01-22T16:32:32","Actor":"lg2de","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9084","RelatedDescription":"Opened issue \"NU1101, NU1102 and NU1103 should mention the dependency path\" (#9084) at NuGet/Home","RelatedBody":"When restoring packages the implicit dependencies may cause confusing error messages. Example:\r\n```\r\nd:\\> dotnet restore --configfile=nuget.config\r\n[...]\\NuGetErrorDetails.csproj : error NU1101: Unable to find package 'Microsoft.NETCore.Platforms'. No packages exist with this id in source(s): local, xUnit\r\n```\r\n\r\nThe package `Microsoft.NETCore.Platforms` **is not selected** in the csproj file. But **it is a dependency** of `NetStandard.Library`, which is a dependency of `xUnit.assert`, which is a dependency of `xUnit`, which is a selected project dependency.\r\n\r\nThe problem gets visible to me because we are **not** nuget.org as package source, but private server due to \"license based filtering\". So, common packages may not (yet) be available in source.\r\n\r\nTo identify and optimize the required packages I would like to see the dependency tree in the error messages NU1101, NU1102 and NU1103.\r\n\r\n## Details about Problem\r\n\r\nNuGet product used: dotnet.exe\r\nNuGet version: from dotnet core 3.1\r\ndotnet.exe --version: 3.1.101\r\nOS version: win10 1903\r\n\r\n## Detailed repro steps so we can see the same problem\r\n\r\n1. checkout sample repository: [lg2de/NuGetErrorDetails](https://github.com/lg2de/NuGetErrorDetails)\r\n2. `dotnet restore --configfile=nuget.config`\r\n\r\n## Actual result\r\n\r\nNU1101: Unable to find package 'Microsoft.NETCore.Platforms'. No packages exist with this id in source(s): 'sourceA'.\r\n\r\n## Expected result\r\n\r\nNU1101: Unable to find package 'Microsoft.NETCore.Platforms'. No packages exist with this id in source(s): 'sourceA'. Dependency path: xunit.2.4.2-pre.build.4151 => xunit.assert.2.4.2-pre.build.4151 => netstandard.library.2.0.3 => Microsoft.NETCore.Platforms.1.1.0\r\n\r\nSimilar extention for NU1102 and NU1103 would be nice."},{"Id":"11333303744","Type":"IssuesEvent","CreatedAt":"2020-01-22T12:21:06","Actor":"pylnik","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9083","RelatedDescription":"Closed issue \"An exception thrown on installing NuGet package (An item with the same key has already been added)\" (#9083) at NuGet/Home","RelatedBody":"I'm working in VS2017 (15.9.19) on Windows 10 Pro.\r\nFor a couple of days, I have a weird behavior on installing/restoring NuGet packages. \r\n\r\nI use VS UI. The package manager has the following version info:\r\n\r\n```\r\nName             : Package Manager Host\r\nVersion          : 4.9.3.5777\r\nInstanceId       : 8663a889-ff08-4ba4-9da1-e91dbe1d6505\r\nUI               : System.Management.Automation.Internal.Host.InternalHostUserInterface\r\nCurrentCulture   : de-DE\r\nCurrentUICulture : en-US\r\nPrivateData      : NuGetConsole.Host.PowerShell.Implementation.NuGetPSHost+Commander\r\nDebuggerEnabled  : True\r\nIsRunspacePushed : False\r\nRunspace         : System.Management.Automation.Runspaces.LocalRunspace\r\n\r\n```\r\n\r\nIn the output of Package Manager I see this log:\r\n\r\n```\r\nRestoring packages for xxxxxxxx.csproj...\r\nSystem.ArgumentException: An item with the same key has already been added.\r\n   at System.ThrowHelper.ThrowArgumentException(ExceptionResource resource)\r\n   at System.Collections.Generic.Dictionary`2.Insert(TKey key, TValue value, Boolean add)\r\n   at System.Linq.Enumerable.ToDictionary[TSource,TKey,TElement](IEnumerable`1 source, Func`2 keySelector, Func`2 elementSelector, IEqualityComparer`1 comparer)\r\n   at NuGet.Commands.LockFileBuilder.CreateLockFile(LockFile previousLockFile, PackageSpec project, IEnumerable`1 targetGraphs, IReadOnlyList`1 localRepositories, RemoteWalkContext context)\r\n   at NuGet.Commands.RestoreCommand.BuildAssetsFile(LockFile existingLockFile, PackageSpec project, IEnumerable`1 graphs, IReadOnlyList`1 localRepositories, RemoteWalkContext contextForProject)\r\n   at NuGet.Commands.RestoreCommand.<ExecuteAsync>d__32.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.Commands.RestoreRunner.<ExecuteAsync>d__7.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.Commands.RestoreRunner.<CompleteTaskAsync>d__10.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.Commands.RestoreRunner.<RunWithoutCommit>d__3.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.PackageManagement.DependencyGraphRestoreUtility.<PreviewRestoreAsync>d__2.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)\r\n   at NuGet.PackageManagement.NuGetPackageManager.<PreviewBuildIntegratedProjectActionsAsync>d__77.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)\r\n   at NuGet.PackageManagement.NuGetPackageManager.<PreviewInstallPackageAsync>d__68.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.PackageManagement.UI.UIActionEngine.<GetActionsAsync>d__19.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)\r\n   at NuGet.PackageManagement.UI.UIActionEngine.<>c__DisplayClass12_0.<<PerformActionImplAsync>b__0>d.MoveNext()\r\nTime Elapsed: 00:00:01.4556370\r\n========== Finished ==========\r\n```\r\nThe packages are employed as PackageReference in all the projects in the solution. There are neither package.config files nor packages dlls in solution.\r\n\r\nOther developers in my team do not encounter this issue. I believe this is some broken setting on my machine. I tried already uninstall VS2017 and use VS 2019 preview instead with no success."},{"Id":"11331835237","Type":"IssuesEvent","CreatedAt":"2020-01-22T09:12:50","Actor":"pylnik","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9083","RelatedDescription":"Opened issue \"An exception thrown on installing NuGet package (An item with the same key has already been added)\" (#9083) at NuGet/Home","RelatedBody":"I'm working in VS2017 (15.9.19) on Windows 10 Pro.\r\nFor a couple of days, I have a weird behavior on installing/restoring NuGet packages. \r\n\r\nI use VS UI. The package manager has the following version info:\r\n\r\n```\r\nName             : Package Manager Host\r\nVersion          : 4.9.3.5777\r\nInstanceId       : 8663a889-ff08-4ba4-9da1-e91dbe1d6505\r\nUI               : System.Management.Automation.Internal.Host.InternalHostUserInterface\r\nCurrentCulture   : de-DE\r\nCurrentUICulture : en-US\r\nPrivateData      : NuGetConsole.Host.PowerShell.Implementation.NuGetPSHost+Commander\r\nDebuggerEnabled  : True\r\nIsRunspacePushed : False\r\nRunspace         : System.Management.Automation.Runspaces.LocalRunspace\r\n\r\n```\r\n\r\nIn the output of Package Manager I see this log:\r\n\r\n```\r\nRestoring packages for xxxxxxxx.csproj...\r\nSystem.ArgumentException: An item with the same key has already been added.\r\n   at System.ThrowHelper.ThrowArgumentException(ExceptionResource resource)\r\n   at System.Collections.Generic.Dictionary`2.Insert(TKey key, TValue value, Boolean add)\r\n   at System.Linq.Enumerable.ToDictionary[TSource,TKey,TElement](IEnumerable`1 source, Func`2 keySelector, Func`2 elementSelector, IEqualityComparer`1 comparer)\r\n   at NuGet.Commands.LockFileBuilder.CreateLockFile(LockFile previousLockFile, PackageSpec project, IEnumerable`1 targetGraphs, IReadOnlyList`1 localRepositories, RemoteWalkContext context)\r\n   at NuGet.Commands.RestoreCommand.BuildAssetsFile(LockFile existingLockFile, PackageSpec project, IEnumerable`1 graphs, IReadOnlyList`1 localRepositories, RemoteWalkContext contextForProject)\r\n   at NuGet.Commands.RestoreCommand.<ExecuteAsync>d__32.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.Commands.RestoreRunner.<ExecuteAsync>d__7.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.Commands.RestoreRunner.<CompleteTaskAsync>d__10.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.Commands.RestoreRunner.<RunWithoutCommit>d__3.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.PackageManagement.DependencyGraphRestoreUtility.<PreviewRestoreAsync>d__2.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)\r\n   at NuGet.PackageManagement.NuGetPackageManager.<PreviewBuildIntegratedProjectActionsAsync>d__77.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)\r\n   at NuGet.PackageManagement.NuGetPackageManager.<PreviewInstallPackageAsync>d__68.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at NuGet.PackageManagement.UI.UIActionEngine.<GetActionsAsync>d__19.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task)\r\n   at NuGet.PackageManagement.UI.UIActionEngine.<>c__DisplayClass12_0.<<PerformActionImplAsync>b__0>d.MoveNext()\r\nTime Elapsed: 00:00:01.4556370\r\n========== Finished ==========\r\n```\r\nThe packages are employed as PackageReference in all the projects in the solution. There are neither package.config files nor packages dlls in solution.\r\n\r\nOther developers in my team do not encounter this issue. I believe this is some broken setting on my machine. I tried already uninstall VS2017 and use VS 2019 preview instead with no success."},{"Id":"11329424926","Type":"IssuesEvent","CreatedAt":"2020-01-22T00:48:31","Actor":"vsfeedback","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9082","RelatedDescription":"Opened issue \"'Manage NuGet Packages for Solution' should provide UI to limit versions for packages\" (#9082) at NuGet/Home","RelatedBody":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/idea/801970/manage-nuget-packages-for-solution-should-provide.html)._\n\n---\nIf I want to ensure that my Visual Studio solution does not update a package beyond a certain version, I can manually edit the packages.config file, but there should be a UI in 'Manage NuGet Packages for Solution' for this task.\n\nhttps://docs.microsoft.com/en-us/nuget/concepts/package-versioning#semantic-versioning-200\n\nMy common scenario is that I want to ensure that I get all of the latest updates for Umbraco and related packages, but I do not want to be offered any that require me to upgrade Umbraco from version 7 to version 8.\n\nIf I do not manually edit the packages.config with:\n`allowedVersion=(,8.0)`\n... I get a lot of \"noise\" in the UI for package updates I would not want.\n\n---\n### Original Comments\n\n#### Visual Studio Feedback System on 11/1/2019, 00:21 AM: \n\nThank you for taking the time to provide your suggestion. We will do some preliminary checks to make sure we can proceed further.  We'll provide an update once the issue has been triaged by the product team."},{"Id":"11329304157","Type":"IssuesEvent","CreatedAt":"2020-01-22T00:22:29","Actor":"nkolev92","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/8541","RelatedDescription":"Closed issue \"Deprecation info is not visible, by default, on installed tab\" (#8541) at NuGet/Home","RelatedBody":"Feature: Deprecation\r\n\r\nThe idea of the feature on VS was to show the deprecation info as warning ⚠️ on the INSTALLED tab. Clicking on this tab leads to the packages listed and are deprecated using the warning ⚠️ icon on package’s installed version. Clicking on this reveals the warning ⚠️ icon and deprecation info on the details pane. Essentially the warning ⚠️ icons leads to the issue details.\r\n\r\nThis doesn’t happen today because the installed tab shows the package details of the latest version by default and not if the one that’s installed.\r\n\r\nProposed fix, reviewed by UX:\r\n* There is no need to show both the installed  version and the latest version on the installed tab. We can show just the one installed:\r\n\r\nVersion: \\<Installed version in the drop down> UnistallButton\r\n\r\nWill update the proposed UX soon."},{"Id":"11328867047","Type":"IssuesEvent","CreatedAt":"2020-01-21T23:03:03","Actor":"vsfeedback","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Home/issues/9081","RelatedDescription":"Opened issue \"select/filter projects in nuget solution that already have the nuget installed or have same version\" (#9081) at NuGet/Home","RelatedBody":"_This issue has been moved from [a ticket on Developer Community](https://developercommunity.visualstudio.com/content/problem/892124/selectfilter-projects-in-nuget-solution-that-alrea.html)._\n\n---\nFor big solutions with a lot of projects, it is a manual and tedious process to select each individual project that has a dependency on the nuget.\n\nExample layout:\n\n[ ] Project    Version\n\n[x] Project1    3.0.1\n[x] Project2    3.0.1\n [ ] Project3\n[x] Project4    3.0.1\n [ ] Project5\n[x] Project6    3.0.1\n [ ] Project7\n[x] Project8    3.0.1\n[x] Project9    3.0.1\n\nNow in this layout, these are the only options I found::\n- press the top left for select All/Select None\n- sort by Version (which puts all the projects that have it installed together, but u still have to manually check or uncheck each one)\n\nThis becomes very tedious for big solutions (in my case 80+ projects) and only a fraction of them depend on this nuget, and only the projects that depend on it need to be updated. This requires manually checking each of these projects (or select All and unchecking, based on the fraction value), and then clicking \"install\" button to update them\n\nFeature request:\n- [minimum]\n       - a button or an easy way to select only the projects that have the nuget installed\n- [complete (recommended)]\n       - select all the projects with a given version. Maybe some sort of filter by version?\n\n---\n### Original Comments\n\n#### Visual Studio Feedback System on 1/21/2020, 03:02 PM: \n\nWe have converted this feedback item from idea to problem. This change was done to better reflect the feedback's nature.\n\n---\n### Original Solutions\n(no solutions)"},{"Id":"11328855970","Type":"IssuesEvent","CreatedAt":"2020-01-21T23:01:20","Actor":"dominoFire","Repository":"NuGet/Home","Organization":"NuGet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/NuGet/Home/issues/9079","RelatedDescription":"Closed issue \"Narrator is reading \"1 of 1\" for \"browse\",\"install\",\"update\" tabs\" (#9079) at NuGet/Home","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"10740159942","Type":"IssuesEvent","CreatedAt":"2019-10-29T17:39:29","Actor":"anangaur","Repository":"NuGet/Announcements","Organization":"NuGet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/NuGet/Announcements/issues/39","RelatedDescription":"Opened issue \"Flag vulnerable packages\" (#39) at NuGet/Announcements","RelatedBody":"The spec for 'Flagging vulnerable packages' is ready for **review**:\r\n\r\n|Spec wiki|Discussion issue|\r\n|----------|------------------|\r\n|[Flag vulnerable packages](https://github.com/NuGet/Home/wiki/Flag-vulnerable-packages) | https://github.com/nuget/home/issues/8087|"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1219766107269025792","CreatedAt":"2020-01-21T23:37:56+00:00","UserScreenname":"nuget","Text":"https://t.co/F9kiKfdOWi package publishing is currently facing technical difficulty and new packages pushed to… https://t.co/4E67LHHnbI","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":2,"FavoriteCount":2,"RawContent":null},{"Id":"1204812404573392897","CreatedAt":"2019-12-11T17:17:16+00:00","UserScreenname":"nuget","Text":"We are currently experiencing CDN issues in a few geographies.  https://t.co/F9kiKfdOWi services like package resto… https://t.co/0ZVMeF11CW","Source":"<a href=\"http://twitter.com/download/iphone\" rel=\"nofollow\">Twitter for iPhone</a>","RetweetCount":10,"FavoriteCount":8,"RawContent":null},{"Id":"1190360390980395008","CreatedAt":"2019-11-01T20:10:07+00:00","UserScreenname":"nuget","Text":"The issue with the publishing pipeline has been resolved and packages are now being published normally. https://t.co/NdK8mVk7UF","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":3,"FavoriteCount":0,"RawContent":null},{"Id":"1190331936293572608","CreatedAt":"2019-11-01T18:17:03+00:00","UserScreenname":"nuget","Text":"We are experiencing an issue with our publishing pipeline causing a delay in the publishing of new packages. We are… https://t.co/gM91QcE1Zc","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":5,"FavoriteCount":3,"RawContent":null}]}},"RunOn":"2020-01-23T05:30:49.8486508Z","RunDurationInMilliseconds":1743}