{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing Entity Framework Core 3.0 Preview 7 and Entity Framework 6.3 Preview 7","PublishedOn":"2019-07-23T17:06:53+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"Today, we are making new previews of EF Core 3.0 and EF 6.3 available on nuget.org.\n.NET Core 3.0 Preview 7 and ASP.NET Core 3.0 Preview 7 were also made available today.\nWe encourage you to install...","Href":"https://devblogs.microsoft.com/dotnet/announcing-entity-framework-core-3-0-preview-7-and-entity-framework-6-3-preview-7/","RawContent":null},{"Title":"Announcing .NET Core 3.0 Preview 7","PublishedOn":"2019-07-23T17:00:54+00:00","CommentsCount":31,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 3.0 Preview 7. We&#8217;ve transitioned from creating new features to polishing the release. Expect a singular focus on quality for the remaining preview...","Href":"https://devblogs.microsoft.com/dotnet/announcing-net-core-3-0-preview-7/","RawContent":null},{"Title":"Announcing ML.NET 1.2 and Model Builder updates (Machine Learning for .NET)","PublishedOn":"2019-07-17T19:25:46+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"We are excited to announce ML.NET 1.2 and updates to Model Builder and the CLI. ML.NET is an open-source and cross-platform machine learning framework for .NET developers. ML.NET also includes Model...","Href":"https://devblogs.microsoft.com/dotnet/announcing-ml-net-1-2-and-model-builder-updates-machine-learning-for-net/","RawContent":null},{"Title":"Write Better Code Faster with Roslyn Analyzers","PublishedOn":"2019-07-10T16:40:11+00:00","CommentsCount":12,"FacebookCount":0,"Summary":"Roslyn, the .NET compiler platform, helps you catch bugs even before you run your code. One example is Roslyn’s spellcheck analyzer that is built into Visual Studio. Let’s say you are creating a...","Href":"https://devblogs.microsoft.com/dotnet/write-better-code-faster-with-roslyn-analyzers/","RawContent":null},{"Title":".NET Core July 2019 Updates – 2.1.12 and 2.2.6","PublishedOn":"2019-07-09T17:50:51+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core July 2019 Update. These updates contain security and reliability fixes. See the individual release notes for details on updated packages.\nNOTE: If you are a...","Href":"https://devblogs.microsoft.com/dotnet/net-core-july-2019/","RawContent":null},{"Title":".NET Framework July 2019 Security and Quality Rollup","PublishedOn":"2019-07-09T17:22:13+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are releasing the July 2019 Cumulative Update, Security and Quality Rollup, and Security Only Update for .NET Framework.\nSecurity\nCVE-2019-1006 – WCF/WIF SAML Token Authentication Bypass...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-july-2019-security-and-quality-rollup/","RawContent":null},{"Title":".NET Framework June 27, 2019 Cumulative Update for Windows 10 version 1903","PublishedOn":"2019-06-27T18:01:46+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Today, we released the June 2019 Cumulative Update for .NET Framework 3.5 and 4.8 on Windows 10 version 1903.\nQuality and Reliability\nThis release contains the following quality and reliability...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-june-27-2019-cumulative-update-for-windows-10-version-1903/","RawContent":null},{"Title":"Help us shape the future of .NET for Apache Spark","PublishedOn":"2019-06-20T17:58:41+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"Apache Spark™ is a general-purpose distributed processing engine for analytics over large data set typically terabytes or petabytes of data. Apache Spark can be used for processing batches of data,...","Href":"https://devblogs.microsoft.com/dotnet/help-us-shape-the-future-of-net-for-apache-spark/","RawContent":null},{"Title":"Create interactive documentation with the new Try .NET template","PublishedOn":"2019-06-20T16:05:37+00:00","CommentsCount":6,"FacebookCount":0,"Summary":"In our previous post, we announced dotnet try a global tool which allows developers to create interactive workshops and documentation. Tutorials created with dotnet try let users start learning...","Href":"https://devblogs.microsoft.com/dotnet/create-interactive-documentation-with-the-new-try-net-template/","RawContent":null},{"Title":".NET Framework June 2019 Preview of Quality Rollup","PublishedOn":"2019-06-19T00:12:52+00:00","CommentsCount":5,"FacebookCount":0,"Summary":"Today, we are releasing the June 2019 Preview of Quality Rollup.\nQuality and Reliability\nThis release contains the following quality and reliability improvements.\nWPF1\nAddresses an issue in which...","Href":"https://devblogs.microsoft.com/dotnet/net-framework-june-2019-preview-of-quality-rollup/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"10123005051","Type":"IssuesEvent","CreatedAt":"2019-07-31T19:23:23","Actor":"MeikTranel","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/issues/148","RelatedDescription":"Opened issue \"Clarify guidelines in regards to Options and Requirements\" (#148) at dotnet/foundation","RelatedBody":"I'd be interested in which part of the project submission guidelines is optional and which are deal breaker requirements.\r\n\r\n- Is the Role Matrix laid out an absolute or (as can be read between the lines) just a preset, which may be subject to individual projects needs?\r\n- Is it a strong requirement that the project uses the contributor covenant CoC?"},{"Id":"9814702366","Type":"PullRequestEvent","CreatedAt":"2019-06-13T10:49:31","Actor":"gep13","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/147","RelatedDescription":"Opened pull request \"(GH-111) Update SourceLink location\" (#147) at dotnet/foundation","RelatedBody":""},{"Id":"9812903344","Type":"PullRequestEvent","CreatedAt":"2019-06-13T06:28:59","Actor":"jongalloway","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/foundation/pull/146","RelatedDescription":"Merged pull request \"Update Cake Project Contacts\" (#146) at dotnet/foundation","RelatedBody":"@jongalloway just noticed that this wasn't up to date."},{"Id":"9812878014","Type":"PullRequestEvent","CreatedAt":"2019-06-13T06:23:52","Actor":"gep13","Repository":"dotnet/foundation","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/foundation/pull/146","RelatedDescription":"Opened pull request \"Update Cake Project Contacts\" (#146) at dotnet/foundation","RelatedBody":"@jongalloway just noticed that this wasn't up to date."}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"10047192673","Type":"IssuesEvent","CreatedAt":"2019-07-19T16:54:03","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/118","RelatedDescription":"Opened issue \".NET Core master branches have switched to \"5.0\"\" (#118) at dotnet/announcements","RelatedBody":"# .NET Core master branches have switched to \"5.0\"\r\n\r\nVarious .NET Core repos have switched their `master` branches to \"5.0\", and will use 3.x branches for 3.0 and 3.1 projects. This is very similar to how we approached 2.x and 3.0 projects. As context, `master` branches produced 3.0 builds for the entire period of the 2.2 project.\r\n\r\nAt present, this change is only relevant if you contribute to .NET Core repositories. Otherwise, we recommend that you wait for the 5.0 Preview releases before installing this new version.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/core #3059](https://github.com/dotnet/core/issues/3059)\r\n\r\n## Details\r\n\r\nThe following repos have moved their master branches to \"5.0\":\r\n\r\n- [dotnet/coreclr](https://github.com/dotnet/coreclr)\r\n- [dotnet/corefx](https://github.com/dotnet/corefx)\r\n- [dotnet/core-setup](https://github.com/dotnet/core-setup)\r\n\r\nYou can see that [5.0 .NET Core Runtime builds](https://github.com/dotnet/core-setup#daily-builds) are now being built and published at dotnet/core-setup.\r\n\r\nIn large part, we switched `master` to 5.0 to enable to the community to contribute changes. As the .NET Core 3.0 released has progressed, we've had to increase scrutiny on the changes we will accept. Now that we've permanently branched for 3.0, we can accept a much broader set of changes. Please consider that to be an open invitation!\r\n\r\nNotably, [dotnet/core-sdk](https://github.com/dotnet/core-sdk) is not yet producing 5.0 builds. We expect that the dotnet/core-sdk master branch will continue as a 3.0 branch for 2-3 months while we finish up the .NET Core 3.0 project.\r\n\r\nAt present, there is no developer experience for 5.0. We are waiting on the dotnet/core-sdk repo to switch to 5.0. Switching your project file to target `netcoreapp5.0` won't do anything useful. We'll update this issue when a 5.0 SDK comes available."},{"Id":"9971220766","Type":"IssuesEvent","CreatedAt":"2019-07-08T23:25:31","Actor":"terrajobst","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/117","RelatedDescription":"Opened issue \"System.Text.Json usability study results\" (#117) at dotnet/announcements","RelatedBody":"We've performed a usability study on the new `System.Text.Json` APIs which will replace JSON.NET as the default JSON experience in .NET Core 3.0:\r\n\r\n* We focused on the primary \"getting started\" scenarios to validate that we picked the right type- and method names.\r\n* We simulated what we believe to be common error cases to validate that our exception messages are understandable and actionable.\r\n* Since we were short on time, we couldn't use the recruiting provided by the UX lab but instead brought in our own developers, which we recruited from the .NET engineering team\r\n\r\nThis has worked out well for us as we were able to get short term feedback which resulted in significant improvements to the overall API shape and usability. In the future, we should do more API focused UX studies 😊\r\n\r\n## Tasks\r\n\r\n| # | Description                            | Code\r\n|:--|:---------------------------------------|:-----\r\n| 1 | Serialize and pretty print             | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario1/Program.cs#L19-L31)\r\n| 2 | Deserialize with trailing comma        | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario2/Program.cs#L19-L25)\r\n| 3 | Deserialize with custom property names | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario3/Program.cs#L30-L45)\r\n| 4 | Read with DOM                          | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario4/Program.cs#L20-L35)\r\n| 5 | Pretty print an existing JSON file     | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario5/Program.cs#L26-L34)\r\n\r\n## Hypotheses\r\n\r\nWe expect developers to...\r\n\r\n| # | Description                                            | Result\r\n|:--|:-------------------------------------------------------|:---------------\r\n| 1 | ...assume the APIs are similar/identical to JSON.NET   |  Validated\r\n| 2 | ...complete tasks 1-4 successfully                     |  Validated\r\n| 3 | ...struggle/unable to complete the task 5, because it requires working with two different components which is very different from JSON.NET |  Invalidated\r\n| 4 | ...not look at documentation for most of their coding as IntelliSense is good enough |  Invalidated\r\n| 5 | ...be happy with the experience of using the API                                     |  Validated\r\n| 6 | ...plan on using `System.Text.Json` for their next JSON task                         |  Partially Validated\r\n\r\n##  Key Observations\r\n\r\n* Everyone completed scenarios #1-#3, 2 didn't complete #4, 6 didn't complete #5\r\n    - The reason was always \"out of time\". Every person who started a scenario successfully finished it.\r\n    - We feel this validates that we picked the right scope for a 60 minute study of people from various backgrounds\r\n* Overall people liked the new API\r\n    - Key value prop for most people was the fact that \"it's now built in\"\r\n    - Very few mentioned perf and the ones that did thought that it probably wouldn't make a difference in their scenarios.\r\n    - Most people said they would prefer `System.Text.Json` for new APIs, but would stick to JSON.NET in code that already uses it.\r\n    - **[Action]** None, this is in line with what we expected.\r\n* Virtually everyone tried to google for sample code in the documentation\r\n    - Everyone found our blog post and online documentation\r\n    - People new to .NET were confused that JSON.NET and `System.Text.Json` weren't the same thing\r\n    - Everyone complained that the current docs are lacking, especially sample code.\r\n    - **[Action]** Docs are work in progress. We plan on shipping with a fully documented API surface and sample code.\r\n* Virtually everyone found the key type relatively quickly\r\n    - Some people were confused when types were static, rather than something that one can new up\r\n    - **[Action]** None. This is by-design as we try to reduce the number of allocations.\r\n* Virtually everyone had trouble selecting the correct method on\r\n  `JsonSerializer`\r\n    - We chose a very complicated naming convention\r\n    - **[Action]** We simplified it by using names that people in the study told us were looking for.\r\n* Most of our error messages were well received because they told people what\r\n  the problem is & how they can fix them.\r\n    - One error message was unclear because we reported an unexpected character when we could have reported that we didn't expect a comment.\r\n    - **[Action]** We've reworded the error message.\r\n    - We had one error message that was generated by a lower layer and provided an action item that doesn't make sense when people receive it when using the higher layer component.\r\n    - **[Action]** We've reworded the error message to be more generic so it makes sense for both kind of consumers.\r\n* Virtually everyone used the new Roslyn completion feature which will also show\r\n  types from namespaces not imported yet.\r\n    - However, virtually nobody realized that they were doing it.\r\n    - This caused confusion when people found other APIs that happen to include Json in them, specifically the old data contract serialization.\r\n    - **[Action]** Talk to the Roslyn IDE team to see if this something more people will run into. This could prove to be especially problematic for technologies that share type names (e.g. `UserControl` in WinForms and WPF) and both are referenced by the project.\r\n* Optional parameters and `async`/`await` are usability cliffs\r\n    - Many were confused by optional parameters and tried to pass them in, even though they didn't have to.\r\n    - **[Action]** Talk to the Roslyn IDE team to see if we can visualize them better in VS.\r\n    - **[Action]** Try to avoid heavy use of optional parameters for mainline APIs.\r\n    - Async is a very steep cliff. People have no idea what to do in their code to make async work. While IntelliSense shows the usage by prefixing it with await, people didn't notice that.\r\n    - **[Action]** Unclear; this is a broader issue.\r\n* Virtually nobody used F1 to get help for APIs\r\n    - *Surprise*. I expected more people to use <kbd>F1</kbd>.\r\n* Virtually everyone used F12 to explore the API (\"metadata view\")\r\n    - *Surprise*. I expected most people to explore the type via the\r\n      IntelliSense completion\r\n* Nobody used Object Browser to explorer the APIs\r\n    - *Surprise*. I expected at least some people to.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/39304."},{"Id":"9963969636","Type":"IssuesEvent","CreatedAt":"2019-07-08T03:13:39","Actor":"leecow","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/116","RelatedDescription":"Opened issue \"Updates to releases.json (.NET Core release metadata)\" (#116) at dotnet/announcements","RelatedBody":"**The changes described in this issue will be live with the .NET Core July update on 7/9/2019.**\r\n\r\nThe releases.json files (e.g. [2.2 releases.json](https://raw.githubusercontent.com/dotnet/core/master/release-notes/2.2/releases.json)) are comprehensive metadata files which capture details of each .NET Core release. These files, along with the top level [releases-index.json](https://raw.githubusercontent.com/dotnet/core/master/release-notes/releases-index.json), are becoming increasingly important .NET Core release assets. These files, one for each major.minor channel, are relied upon by many to detect when updates for .NET Core are available, discover security update details and other uses.\r\n\r\nChanges are sometimes necessary, and the growing dependencies require that we treat compatibility of the schema with the utmost care. This announcement describes an addition to the releases.json schema.\r\n\r\n## SDK Versions and Visual Studio\r\n\r\nBecause of current .NET Core SDK product construction dependencies, there is a hard link between the Runtime, SDK, toolset (compilers, msbuild, nuget, and other components), and Visual Studio. Simplistically, this means that when anything updates, everything updates. The unfortunate result of this linking is that multiple versions of the SDK are released with each monthly update for each supported versions of Visual Studio. For example, the May Update for .NET Core 2.2 included the 2.2.5 runtime, 2.2.107 SDK for Visual Studio 2017 and 2.2.204 for Visual Studio 2019 and yet another pair of SDK versions for .NET Core 2.1. An example of this is the [2.2.5 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.5/2.2.5.md). \r\n\r\nThis is a confusing situation and we are working to mitigate the need to release multiple SDKs with .NET Core 3.0. The need for multiple SDK versions will persist for 2.1 LTS.\r\n\r\n## Adding the SDKS array\r\n\r\nTo appropriately model multiple SDKs per release, we are adding an SDKs array to releases.json, which will contain SDK objects. The top-level SDK object will represent the highest versioned SDK for a given update. Using the previous 2.2.5 update example, SDK 2.2.204 is in the top SDK object as well as duplicated in the SDKS array. All other applicable 2.2* SDK objects are included in the SDKS array. The SDK objects within the array will carry specific Visual Studio compatibility and version inclusion information to provide appropriate context.\r\n\r\nHere is a partial example of the new array based on the upcoming July update. \r\nAgain, this will be additive and the previous SDK object will include the highest SDK version for the release.\r\n\r\n```json\r\n{\r\n  \"sdks\": [\r\n    {\r\n        \"version\": \"2.2.301\",\r\n        \"version-display\": \"2.2.301\",\r\n        \"runtime-version\": \"2.2.6\",\r\n        \"vs-version\": \"16.1.3\",\r\n        \"vs-support\": \"Visual Studio 2019 (v16.1)\",\r\n        \"csharp-version\": \"7.3\",\r\n        \"fsharp-version\": \"4.5\",\r\n        \"vb-version\": null,\r\n        \"files\": [\r\n            {\r\n            \"name\": \"\",\r\n            \"rid\": \"\",\r\n            \"url\": \"\",\r\n            \"hash\": \"\"\r\n            }\r\n        ]\r\n    }\r\n    ]\r\n}\r\n```\r\n\r\n## vs-version and the Runtime\r\n\r\nThe same version of the runtime is included in multiple versions of Visual Studio. To account for this, the vs-version field is being updated to a comma-delimited string. The string will represent all versions of Visual Studio which first include the particular .NET Core update. Again, an example from the upcoming July Update.\r\n\r\n```json\r\n\"runtime\": {\r\n        \"version\": \"2.2.6\",\r\n        \"version-display\": \"2.2.6\",\r\n        \"vs-version\": \"15.9.13, 16.1.3, 16.2.0\",\r\n```\r\n\r\nThe same `vs-versions` changes will be seen in the `aspnetcore-runtime` object.\r\n\r\n## Future Enhancements\r\n\r\nThere are other improvements to the schema which have been suggested by the communitiy which we are evaluating. Generally, theses enhancements are additive and should not represent compatibility comprimises for existing parsers and similar announcements will be published ahead of any changes.\r\n\r\n"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"10144963717","Type":"IssuesEvent","CreatedAt":"2019-08-05T01:41:52","Actor":"VincentBu","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/26003","RelatedDescription":"Opened issue \"Test failed: JIT_Performance._CodeQuality_BenchmarksGame_regex_redux_regex_redux_1_regex_redux_1_._CodeQuality_BenchmarksGame_regex_redux_regex_redux_1_regex_redux_1_cmd\" (#26003) at dotnet/coreclr","RelatedBody":"**Job:**\r\nhttps://mc.dot.net/#/user/coreclr-jitstress/ci~2Fdotnet~2Fcoreclr~2Frefs~2Fheads~2Fmaster/test~2Ffunctional~2Fcli~2F/20190803.1/workItem/JIT/analysis/xunit/JIT_Performance._CodeQuality_BenchmarksGame_regex_redux_regex_redux_1_regex_redux_1_~2F_CodeQuality_BenchmarksGame_regex_redux_regex_redux_1_regex_redux_1_cmd\r\n\r\n**Failed tests:**\r\nJIT_Performance._CodeQuality_BenchmarksGame_regex_redux_regex_redux_1_regex_redux_1_._CodeQuality_BenchmarksGame_regex_redux_regex_redux_1_regex_redux_1_cmd\r\n\r\n**Log:**\r\n```\r\nProcess terminated. Assertion failed.\r\nCheck the arguments in the caller!\r\n   at System.Collections.Generic.ArraySortHelper`1.Sort(T[] keys, Int32 index, Int32 length, IComparer`1 comparer)\r\n   at System.Collections.Generic.List`1.Sort(Int32 index, Int32 count, IComparer`1 comparer)\r\n   at System.Text.RegularExpressions.RegexCharClass.Canonicalize() in /_/src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/RegexCharClass.cs:line 1096\r\n   at System.Text.RegularExpressions.RegexCharClass.ToStringClass() in /_/src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/RegexCharClass.cs:line 1033\r\n   at System.Text.RegularExpressions.RegexFCD.FirstChars(RegexTree t) in /_/src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/RegexFCD.cs:line 69\r\n   at System.Text.RegularExpressions.RegexWriter.RegexCodeFromRegexTree(RegexTree tree) in /_/src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/RegexWriter.cs:line 136\r\n   at System.Text.RegularExpressions.RegexWriter.Write(RegexTree tree) in /_/src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/RegexWriter.cs:line 56\r\n   at System.Text.RegularExpressions.Regex..ctor(String pattern, RegexOptions options, TimeSpan matchTimeout, Boolean addToCache) in /_/src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/Regex.cs:line 128\r\n   at BenchmarksGame.RegexRedux_1.Bench(TextReader inputReader, Boolean verbose)\r\n   at BenchmarksGame.RegexRedux_1.Main(String[] args)\r\n\r\nReturn code:      1\r\nRaw output file:      C:\\\\dotnetbuild\\\\work\\\\4a24df55-6bc0-4420-b77f-02b8a2f12bf9\\\\Work\\\\041a1baf-da71-47a6-8868-d43318676cfa\\\\Exec\\\\JIT\\\\Performance\\\\Reports\\\\JIT.Performance\\\\CodeQuality\\\\BenchmarksGame\\\\regex-redux\\\\regex-redux-1\\\\regex-redux-1.output.txt\r\nRaw output:\r\nBEGIN EXECUTION\r\n \\\"C:\\\\dotnetbuild\\\\work\\\\4a24df55-6bc0-4420-b77f-02b8a2f12bf9\\\\Payload\\\\corerun.exe\\\" regex-redux-1.exe \r\nExpected: 100\r\nActual: -2146232797\r\nEND EXECUTION - FAILED\r\nFAILED\r\nTest Harness Exitcode is : 1\r\nTo run the test:\r\n> set CORE_ROOT=C:\\\\dotnetbuild\\\\work\\\\4a24df55-6bc0-4420-b77f-02b8a2f12bf9\\\\Payload\r\n> C:\\\\dotnetbuild\\\\work\\\\4a24df55-6bc0-4420-b77f-02b8a2f12bf9\\\\Work\\\\041a1baf-da71-47a6-8868-d43318676cfa\\\\Exec\\\\JIT\\\\Performance\\\\CodeQuality\\\\BenchmarksGame\\\\regex-redux\\\\regex-redux-1\\\\regex-redux-1.cmd\r\nExpected: True\r\nActual:   False\r\n```"},{"Id":"10144951566","Type":"IssuesEvent","CreatedAt":"2019-08-05T01:37:17","Actor":"VincentBu","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/26002","RelatedDescription":"Opened issue \"Test failed: managed_Compilation._Compilation_Compilation_._Compilation_Compilation_cmd\" (#26002) at dotnet/coreclr","RelatedBody":"**Job:**\r\nhttps://mc.dot.net/#/user/coreclr-jitstress/ci~2Fdotnet~2Fcoreclr~2Frefs~2Fheads~2Fmaster/test~2Ffunctional~2Fcli~2F/20190803.1/workItem/PayloadGroup0/analysis/xunit/managed_Compilation._Compilation_Compilation_~2F_Compilation_Compilation_cmd\r\n\r\n**Failed tests:**\r\nmanaged_Compilation._Compilation_Compilation_._Compilation_Compilation_cmd\r\n\r\n**Log:**\r\n```\r\nAssert failure(PID 4968 [0x00001368], Thread: 8048 [0x1f70]): Consistency check failed: AV in clr at this callstack:\r\n------\r\nCORECLR! GetCLRRuntimeHost + 0x59B650 (0x00007fff`c738b9c0)\r\n<no module>! <no symbol> + 0x0 (0x00007fff`6a09084c)\r\n<no module>! <no symbol> + 0x0 (0x000001bd`0022c778)\r\n<no module>! <no symbol> + 0x0 (0x000001bd`0022c780)\r\n<no module>! <no symbol> + 0x0 (0x000001bd`0022c780)\r\n<no module>! <no symbol> + 0x0 (0x0000004a`d6b7cd90)\r\n<no module>! <no symbol> + 0x0 (0x000001bd`0022c780)\r\n<no module>! <no symbol> + 0x0 (0x000001bd`0022c778)\r\n<no module>! <no symbol> + 0x0 (0x000001bd`00190310)\r\nCORECLR! GetCLRRuntimeHost + 0x59BA66 (0x00007fff`c738bdd6)\r\n<no module>! <no symbol> + 0x0 (0x00007fff`6a0904b7)\r\n<no module>! <no symbol> + 0x0 (0x000001bd`00161fa0)\r\n<no module>! <no symbol> + 0x0 (0x0000004a`d6b7cdb8)\r\n<no module>! <no symbol> + 0x0 (0x00000000`00000051)\r\n<no module>! <no symbol> + 0x0 (0x00000000`00000051)\r\n-----\r\n.AV on tid=0x1f70 (8048), cxr=0000004AD6B7C580, exr=0000004AD6B7CA70\r\nFAILED: false\r\n\r\nCORECLR! coreclr_shutdown_2 + 0xEB34 (0x00007fff`c6d8dca4)\r\nCORECLR! GetCLRRuntimeHost + 0x13030A (0x00007fff`c6f2067a)\r\nCORECLR! GetCLRRuntimeHost + 0x12FD62 (0x00007fff`c6f200d2)\r\nCORECLR! GetCLRRuntimeHost + 0x12FCD6 (0x00007fff`c6f20046)\r\nCORECLR! GetCLRRuntimeHost + 0x130563 (0x00007fff`c6f208d3)\r\nNTDLL! RtlInitializeCriticalSection + 0x190 (0x00007fff`f2fa5e90)\r\nNTDLL! RtlImageNtHeaderEx + 0x17B (0x00007fff`f2f7fa1b)\r\nNTDLL! KiUserExceptionDispatcher + 0x3A (0x00007fff`f2fe96fa)\r\nCORECLR! GetCLRRuntimeHost + 0x59B650 (0x00007fff`c738b9c0)\r\n<no module>! <no symbol> + 0x0 (0x00007fff`6a09084c)\r\n    File: f:\\\\workspace\\\\_work\\\\1\\\\s\\\\src\\\\vm\\\\excep.cpp Line: 7639\r\n    Image: C:\\\\dotnetbuild\\\\work\\\\4a24df55-6bc0-4420-b77f-02b8a2f12bf9\\\\Payload\\\\CoreRun.exe\r\n\r\n\r\nReturn code:      1\r\nRaw output file:      C:\\\\dotnetbuild\\\\work\\\\4a24df55-6bc0-4420-b77f-02b8a2f12bf9\\\\Work\\\\2baf6f54-90c9-4727-8e54-e158cd568059\\\\Exec\\\\managed\\\\Compilation\\\\Reports\\\\managed.Compilation\\\\Compilation\\\\Compilation.output.txt\r\nRaw output:\r\nBEGIN EXECUTION\r\n \\\"C:\\\\dotnetbuild\\\\work\\\\4a24df55-6bc0-4420-b77f-02b8a2f12bf9\\\\Payload\\\\corerun.exe\\\" Compilation.exe \r\nStarting the test\r\nUsing reference to: C:\\\\dotnetbuild\\\\work\\\\4a24df55-6bc0-4420-b77f-02b8a2f12bf9\\\\Payload\\\\System.Private.CoreLib.dll\r\nTest compiled\r\nExpected: 100\r\nActual: -1073740286\r\nEND EXECUTION - FAILED\r\nFAILED\r\nTest Harness Exitcode is : 1\r\nTo run the test:\r\n> set CORE_ROOT=C:\\\\dotnetbuild\\\\work\\\\4a24df55-6bc0-4420-b77f-02b8a2f12bf9\\\\Payload\r\n> C:\\\\dotnetbuild\\\\work\\\\4a24df55-6bc0-4420-b77f-02b8a2f12bf9\\\\Work\\\\2baf6f54-90c9-4727-8e54-e158cd568059\\\\Exec\\\\managed\\\\Compilation\\\\Compilation\\\\Compilation.cmd\r\nExpected: True\r\nActual:   False\r\n```"},{"Id":"10144916413","Type":"IssuesEvent","CreatedAt":"2019-08-05T01:23:42","Actor":"VincentBu","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/26001","RelatedDescription":"Opened issue \"Test failed: Interop_COM._NETClients_IDispatch_NETClientIDispatch_NETClientIDispatch_._NETClients_IDispatch_NETClientIDispatch_NETClientIDispatch_cmd\" (#26001) at dotnet/coreclr","RelatedBody":"**Job:**\r\nhttps://mc.dot.net/#/user/coreclr-gcstress-extra/ci~2Fdotnet~2Fcoreclr~2Frefs~2Fheads~2Fmaster/test~2Ffunctional~2Fcli~2F/20190803.1/workItem/Interop/analysis/xunit/Interop_COM._NETClients_IDispatch_NETClientIDispatch_NETClientIDispatch_~2F_NETClients_IDispatch_NETClientIDispatch_NETClientIDispatch_cmd\r\n\r\n**Failed tests:**\r\nInterop_COM._NETClients_IDispatch_NETClientIDispatch_NETClientIDispatch_._NETClients_IDispatch_NETClientIDispatch_NETClientIDispatch_cmd\r\n\r\n**Log:**\r\n```\r\nAssert failure(PID 2784 [0x00000ae0], Thread: 648 [0x0288]): Consistency check failed: AV in clr at this callstack:\r\n------\r\nCORECLR! GetCLRRuntimeHost + 0x12503D (0x00007ffe`684c53ad)\r\nCORECLR! GetCLRRuntimeHost + 0xD3BE3 (0x00007ffe`68473f53)\r\nCORECLR! GetCLRRuntimeHost + 0xD5A0A (0x00007ffe`68475d7a)\r\nCORECLR! GetCLRRuntimeHost + 0xD867D (0x00007ffe`684789ed)\r\nCORECLR! GetCLRRuntimeHost + 0xD8488 (0x00007ffe`684787f8)\r\nCORECLR! GetCLRRuntimeHost + 0x80B35D (0x00007ffe`68bab6cd)\r\nCORECLR! GetCLRRuntimeHost + 0x809F26 (0x00007ffe`68baa296)\r\nCORECLR! GetCLRRuntimeHost + 0x79E84F (0x00007ffe`68b3ebbf)\r\nCORECLR! GetCLRRuntimeHost + 0x7969F0 (0x00007ffe`68b36d60)\r\nCORECLR! GetCLRRuntimeHost + 0x7966A0 (0x00007ffe`68b36a10)\r\nCORECLR! GetCLRRuntimeHost + 0x7828C9 (0x00007ffe`68b22c39)\r\nCORECLR! GetCLRRuntimeHost + 0x7825E6 (0x00007ffe`68b22956)\r\nCORECLR! GetCLRRuntimeHost + 0x7852B1 (0x00007ffe`68b25621)\r\nCORECLR! GetCLRRuntimeHost + 0x59BE30 (0x00007ffe`6893c1a0)\r\nCORECLR! GetCLRRuntimeHost + 0x1715B2 (0x00007ffe`68511922)\r\nCORECLR! GetCLRRuntimeHost + 0x59B4B6 (0x00007ffe`6893b826)\r\n<no module>! <no symbol> + 0x0 (0x00007ffe`091d0d12)\r\n<no module>! <no symbol> + 0x0 (0x00000000`00000004)\r\nCORECLR! GetCLRRuntimeHost + 0x32D3D6 (0x00007ffe`686cd746)\r\n-----\r\n.AV on tid=0x288 (648), cxr=0000004F089F6580, exr=0000004F089F6A70\r\nFAILED: false\r\n\r\nCORECLR! coreclr_shutdown_2 + 0xEB34 (0x00007ffe`6833dca4)\r\nCORECLR! GetCLRRuntimeHost + 0x13030A (0x00007ffe`684d067a)\r\nCORECLR! GetCLRRuntimeHost + 0x12FD62 (0x00007ffe`684d00d2)\r\nCORECLR! GetCLRRuntimeHost + 0x12FCD6 (0x00007ffe`684d0046)\r\nCORECLR! GetCLRRuntimeHost + 0x130563 (0x00007ffe`684d08d3)\r\nNTDLL! RtlInitializeCriticalSection + 0x190 (0x00007ffe`92035e90)\r\nNTDLL! RtlImageNtHeaderEx + 0x17B (0x00007ffe`9200fa1b)\r\nNTDLL! KiUserExceptionDispatcher + 0x3A (0x00007ffe`920796fa)\r\nCORECLR! GetCLRRuntimeHost + 0x12503D (0x00007ffe`684c53ad)\r\nCORECLR! GetCLRRuntimeHost + 0xD3BE3 (0x00007ffe`68473f53)\r\n    File: f:\\\\workspace.3\\\\_work\\\\1\\\\s\\\\src\\\\vm\\\\excep.cpp Line: 7639\r\n    Image: C:\\\\dotnetbuild\\\\work\\\\eee83513-d80e-4433-bee8-a2dba2bf27da\\\\Payload\\\\CoreRun.exe\r\n\r\n\r\nReturn code:      1\r\nRaw output file:      C:\\\\dotnetbuild\\\\work\\\\eee83513-d80e-4433-bee8-a2dba2bf27da\\\\Work\\\\8d7ab4df-4d32-43c4-95a2-18a1bb397e87\\\\Exec\\\\Interop\\\\COM\\\\Reports\\\\Interop.COM\\\\NETClients\\\\IDispatch\\\\NETClientIDispatch\\\\NETClientIDispatch.output.txt\r\nRaw output:\r\nBEGIN EXECUTION\r\n \\\"C:\\\\dotnetbuild\\\\work\\\\eee83513-d80e-4433-bee8-a2dba2bf27da\\\\Payload\\\\corerun.exe\\\" NETClientIDispatch.exe \r\nCalling DoubleNumeric_ReturnByRef ...\r\nCall to DoubleNumeric_ReturnByRef complete\r\nCalling Add_Float_ReturnAndUpdateByRef ...\r\nCall to Add_Float_ReturnAndUpdateByRef complete: 0.1 + 0.2 = 0.3; 0.3 == 0.3\r\nCalling Add_Double_ReturnAndUpdateByRef ...\r\nCall to Add_Double_ReturnAndUpdateByRef complete: 0.1 + 0.2 = 0.30000000000000004; 0.30000000000000004 == 0.30000000000000004\r\nCalling TriggerException with Disp 127...\r\nExpected: 100\r\nActual: -1073740286\r\nEND EXECUTION - FAILED\r\nFAILED\r\nTest Harness Exitcode is : 1\r\nTo run the test:\r\n> set CORE_ROOT=C:\\\\dotnetbuild\\\\work\\\\eee83513-d80e-4433-bee8-a2dba2bf27da\\\\Payload\r\n> C:\\\\dotnetbuild\\\\work\\\\eee83513-d80e-4433-bee8-a2dba2bf27da\\\\Work\\\\8d7ab4df-4d32-43c4-95a2-18a1bb397e87\\\\Exec\\\\Interop\\\\COM\\\\NETClients\\\\IDispatch\\\\NETClientIDispatch\\\\NETClientIDispatch.cmd\r\nExpected: True\r\nActual:   False\r\n```"},{"Id":"10144794362","Type":"PullRequestEvent","CreatedAt":"2019-08-05T00:26:28","Actor":"EgorBo","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/26000","RelatedDescription":"Opened pull request \"JIT: Optimize \"constant_string\".Length\" (#26000) at dotnet/coreclr","RelatedBody":"Replace `\"Hello\".Length` with just `5`. See https://github.com/dotnet/coreclr/issues/3633\r\n\r\nI think it's quite common pattern, e.g.\r\n```csharp\r\nint index = someString.IndexOf(STR_CONST) + STR_CONST.Length;\r\n```\r\nso this PR changes codegen for:\r\n```csharp\r\nstatic int Test()\r\n{\r\n   return \"Hello\".Length;\r\n}\r\n```\r\nfrom:\r\n```asm\r\n; Method ConsoleApp177.Program:Test():int\r\nG_M38358_IG01:\r\nG_M38358_IG02:\r\n       mov      rax, 0xD1FFAB1E\r\n       mov      rax, gword ptr [rax]\r\n       mov      eax, dword ptr [rax+8]\r\nG_M38358_IG03:\r\n       ret      \r\n; Total bytes of code: 17\r\n```\r\nto:\r\n```asm\r\n; Method ConsoleApp177.Program:Test():int\r\nG_M38358_IG01:\r\nG_M38358_IG02:\r\n       mov      eax, 5\r\nG_M38358_IG03:\r\n       ret      \r\n; Total bytes of code: 6\r\n```\r\n\r\njit-diff:\r\n```\r\nCrossgen Diffs for System.Private.CoreLib.dll, framework assemblies for  default jit\r\nSummary:\r\n(Lower is better)\r\nTotal bytes of diff: 0 (0.00% of base)\r\n0 total files with size differences (0 improved, 0 regressed), 129 unchanged.\r\n0 total methods with size differences (0 improved, 0 regressed), 182772 unchanged.\r\nCompleted analysis in 8.92s\r\n```"},{"Id":"10144789884","Type":"PullRequestEvent","CreatedAt":"2019-08-05T00:24:22","Actor":"KodrAus","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/25999","RelatedDescription":"Opened pull request \"Use a platform-agnostic name for coredistools lib\" (#25999) at dotnet/coreclr","RelatedBody":"Hi! :wave:\r\n\r\nI've been playing with `R2RDump` on OSX and ran into an issue with the expected native library name being Windows specific.\r\n\r\nThe `coredistools` library that's actually published doesn't appear to work on non-Windows platforms yet (looks like it's old), but if I build `coredistools` locally in my OSX environment then I can use it successfully with `R2RDump`."},{"Id":"10144410042","Type":"PullRequestEvent","CreatedAt":"2019-08-04T20:39:30","Actor":"DanHarltey","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/pull/25919","RelatedDescription":"Closed pull request \"perf improvement int.ToString(\"x\")\" (#25919) at dotnet/coreclr","RelatedBody":"The change affects both int and uint, and both ToString(\"x\") and ToString(\"X\"). It provides a performance improvement of around 40% for no extra memory allocation. It does this by replacing some unsafe code with a string.Create.\r\n\r\nWould this change be something that you would be interested in?\r\n\r\nThe change could be taken a little further by also providing it for long and ulong."}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"10145282312","Type":"IssuesEvent","CreatedAt":"2019-08-05T03:26:49","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/9027","RelatedDescription":"Closed issue \"Unify EmbedAppNameInHost in CLI and SDK\" (#9027) at dotnet/cli","RelatedBody":"https://github.com/dotnet/cli/blob/56c10f65c71e070116ca92f55598015a7f7713c1/src/Microsoft.DotNet.Cli.Utils/EmbedAppNameInHost.cs\r\n\r\nhttps://github.com/dotnet/sdk/blob/cd25d6bbfc2aac61cc790c511900427ac64fdaa8/src/Tasks/Microsoft.NET.Build.Tasks/EmbedAppNameInHost.cs\r\n\r\nThis logic is duplicated in both CLI and SDK. It should be unified."},{"Id":"10145274331","Type":"IssuesEvent","CreatedAt":"2019-08-05T03:24:21","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/11300","RelatedDescription":"Closed issue \"Global tools shim does not have PE bits\" (#11300) at dotnet/cli","RelatedBody":"in 2 places\r\n\r\n- [x] https://github.com/dotnet/cli/blob/master/src/dotnet/ShellShim/AppHostShimMaker.cs#L46\r\n- [x] https://github.com/dotnet/sdk/blob/ab0f40a205d29725e02db2de2b330059d1fb7272/src/Tasks/Microsoft.NET.Build.Tasks/GenerateShims.cs#L105\r\n\r\n1. https://github.com/dotnet/core-setup/issues/6338 move apphost creating logic to a central place\r\n2. remove the code in SDK and CLI\r\n3. enable allow WPF and Winfom app has app host packaged\r\n4. let these 2 places call with intermediateAssembly param"},{"Id":"10144965309","Type":"IssuesEvent","CreatedAt":"2019-08-05T01:42:26","Actor":"Jepson109","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/11930","RelatedDescription":"Closed issue \"Restore  with waning NETSDK1080 after target the project(mvc/web/webapi) framework from 2.1 to 3.0\" (#11930) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n1.Install .NET Core 3.0 Preview 7 build 3.0.100-preview7-012821\r\n2.Open an existing 2.1 (mvc/web/webapi) project\r\n3.Target the project(mvc/web/webapi) framework from 2.1 to 3.0\r\n\r\n## Expected  behavior\r\nDotnet restore & dotnet build successfully\r\n\r\n## Actual behavior\r\n**Dotnet restore  with warning NETSDK1080.** Details as below :\r\n![image](https://user-images.githubusercontent.com/38854445/61362997-cb028e00-a8b5-11e9-8a59-f614eb5228cf.png)\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview7-012821\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.DefaultItems.targets(154,5): warning NETSDK1080: A PackageReference to Microsoft.AspNetCore.App is not necessary when targeting .NET Core 3.0 or higher. If Microsoft.NET.Sdk.Web is used, the shared framework will be referenced automatically. Otherwise, the PackageReference should be replaced with a FrameworkReference. [C:\\Users\\v-zhuqin\\Desktop\\mvc23\\mvc23.csproj]\r\n  Restore completed in 158.55 ms for C:\\Users\\v-zhuqin\\Desktop\\mvc23\\mvc23.csproj.\r\n\r\n**Dotnet build failed with warning and error.** Details as below :\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview7-012821\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.DefaultItems.targets(154,5): warning NETSDK1080: A PackageReference to Microsoft.AspNetCore.App is not necessary when targeting .NET Core 3.0 or higher. If Microsoft.NET.Sdk.Web is used, the shared framework will be referenced automatically. Otherwise, the PackageReference should be replaced with a FrameworkReference. [C:\\Users\\v-zhuqin\\Desktop\\mvc23\\mvc23.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview7-012821\\Sdks\\Microsoft.NET.Sdk\\targets\\Microsoft.NET.Sdk.DefaultItems.targets(154,5): warning NETSDK1080: A PackageReference to Microsoft.AspNetCore.App is not necessary when targeting .NET Core 3.0 or higher. If Microsoft.NET.Sdk.Web is used, the shared framework will be referenced automatically. Otherwise, the PackageReference should be replaced with a FrameworkReference. [C:\\Users\\v-zhuqin\\Desktop\\mvc23\\mvc23.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\3.0.100-preview7-012821\\Sdks\\Microsoft.NET.Sdk.Razor\\build\\netstandard2.0\\Sdk.Razor.CurrentVersion.targets(404,5): warning RAZORSDK1006: Detected Razor language version downgrade. This is typically caused by a reference to the Microsoft.AspNetCore.Razor.Design package. Consider removing this package reference. [C:\\Users\\v-zhuqin\\Desktop\\mvc23\\mvc23.csproj]\r\nStartup.cs(39,56): warning CS0618: 'IHostingEnvironment' is obsolete: 'This type is obsolete and will be removed in a future version. The recommended alternative is Microsoft.AspNetCore.Hosting.IWebHostEnvironment.' [C:\\Users\\v-zhuqin\\Desktop\\mvc23\\mvc23.csproj]\r\nStartup.cs(35,55): warning CS0618: 'CompatibilityVersion.Version_2_1' is obsolete: 'This CompatibilityVersion value is obsolete. The recommended alternatives are Version_3_0 or later.' [C:\\Users\\v-zhuqin\\Desktop\\mvc23\\mvc23.csproj]\r\nStartup.cs(55,13): warning MVC1005: Using 'UseMvc' to configure MVC is not supported while using Endpoint Routing. To continue using 'UseMvc', please set 'MvcOptions.EnableEndpointRouting = false' inside 'ConfigureServices'. [C:\\Users\\v-zhuqin\\Desktop\\mvc23\\mvc23.csproj]\r\nC:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\microsoft.aspnetcore.razor.design\\2.1.2\\build\\netstandard2.0\\Microsoft.AspNetCore.Razor.Design.CodeGeneration.targets(69,5): error : The project C:\\Users\\v-zhuqin\\Desktop\\mvc23 must provide a value for Configuration. [C:\\Users\\v-zhuqin\\Desktop\\mvc23\\mvc23.csproj]\r\n    6 Warning(s)\r\n    1 Error(s)\r\n\r\n![image](https://user-images.githubusercontent.com/38854445/61363429-9216e900-a8b6-11e9-8a50-1a516eab7c2a.png)\r\n\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview7-012821\r\n Commit:    6348f1068a\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview7-012821\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview7-27912-14\r\n  Commit:  4da6ee6450\r\n\r\n.NET Core SDKs installed:\r\n  2.1.701 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview7-012821 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.All 2.2.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview7.19365.7 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview7-27912-14 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview7-27912-14 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"10144483361","Type":"IssuesEvent","CreatedAt":"2019-08-04T21:21:17","Actor":"nguerrera","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/12116","RelatedDescription":"Closed issue \"Global.Microsoft.VisualBasic.MyServices.Internal.ContextValue is not defined in VB .NET core class library projects\" (#12116) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\nOpen a command prompt with cli.\r\nCreate a new VB Class Library using .NET Core 3.0:\r\ndotnet new classlib -f netcoreapp3.0 -lang vb -n test1\r\nBuild via: dotnet build\r\n\r\n## Expected  behavior\r\nLibrary builds correctly.\r\n\r\n## Actual behavior\r\nLibrary fails to build with the following error.\r\nvbc : error BC30002: Type 'Global.Microsoft.VisualBasic.MyServices.Internal.ContextValue' is not defined.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview8-013437\r\n Commit:    37fe062a9e\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview8-013437\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview8-28373-17\r\n  Commit:  5d8d5e8661\r\n\r\n.NET Core SDKs installed:\r\n  3.0.100-preview8-013437 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.App 3.0.0-preview8.19374.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview8-28373-17 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview8-28373-17 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n\r\n"},{"Id":"10143514897","Type":"PullRequestEvent","CreatedAt":"2019-08-04T12:54:12","Actor":"dotnet-maestro[bot]","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/12138","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/templating\" (#12138) at dotnet/cli","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190803.1\r\n- **Date Produced**: 8/3/2019 12:49 PM\r\n- **Commit**: ee824bdd8d041c4eb731f000f7dadcf458274f69\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 5.0.0-alpha1.19403.1\r\n\r\n[marker]: <> (End:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"10143540663","Type":"PullRequestEvent","CreatedAt":"2019-08-04T13:07:30","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1394","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/corefx\" (#1394) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190804.1\r\n- **Date Produced**: 8/4/2019 9:19 AM\r\n- **Commit**: 4408bcb04b4e3a6174d9ec9660fadc71185af712\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19404.1\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19404.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19404.1\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"},{"Id":"10143536303","Type":"PullRequestEvent","CreatedAt":"2019-08-04T13:05:09","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1393","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/corefx\" (#1393) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190804.1\r\n- **Date Produced**: 8/4/2019 9:19 AM\r\n- **Commit**: 4408bcb04b4e3a6174d9ec9660fadc71185af712\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19404.1\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19404.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19404.1\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"},{"Id":"10143520958","Type":"PullRequestEvent","CreatedAt":"2019-08-04T12:57:23","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1394","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/corefx\" (#1394) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190804.1\r\n- **Date Produced**: 8/4/2019 9:19 AM\r\n- **Commit**: 4408bcb04b4e3a6174d9ec9660fadc71185af712\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19404.1\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19404.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19404.1\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"},{"Id":"10143516332","Type":"PullRequestEvent","CreatedAt":"2019-08-04T12:55:03","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1393","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/corefx\" (#1393) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190804.1\r\n- **Date Produced**: 8/4/2019 9:19 AM\r\n- **Commit**: 4408bcb04b4e3a6174d9ec9660fadc71185af712\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19404.1\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19404.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19404.1\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n"},{"Id":"10143439218","Type":"PullRequestEvent","CreatedAt":"2019-08-04T12:15:06","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1392","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/arcade\" (#1392) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190803.1\r\n- **Date Produced**: 8/3/2019 1:03 PM\r\n- **Commit**: 3b75ef38a33579dcd32f2912ee69e886356b0f18\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19403.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19403.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19403.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19403.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19403.1\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19403.1\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n"},{"Id":"10143438803","Type":"PullRequestEvent","CreatedAt":"2019-08-04T12:14:53","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/1391","RelatedDescription":"Merged pull request \"[master] Update dependencies from dotnet/arcade\" (#1391) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190803.1\r\n- **Date Produced**: 8/3/2019 1:03 PM\r\n- **Commit**: 3b75ef38a33579dcd32f2912ee69e886356b0f18\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19403.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19403.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19403.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19403.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19403.1\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19403.1\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n"},{"Id":"10143421170","Type":"PullRequestEvent","CreatedAt":"2019-08-04T12:04:59","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1392","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/arcade\" (#1392) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190803.1\r\n- **Date Produced**: 8/3/2019 1:03 PM\r\n- **Commit**: 3b75ef38a33579dcd32f2912ee69e886356b0f18\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19403.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19403.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19403.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19403.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19403.1\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19403.1\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n"},{"Id":"10143420807","Type":"PullRequestEvent","CreatedAt":"2019-08-04T12:04:46","Actor":"dotnet-maestro[bot]","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/1391","RelatedDescription":"Opened pull request \"[master] Update dependencies from dotnet/arcade\" (#1391) at dotnet/standard","RelatedBody":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190803.1\r\n- **Date Produced**: 8/3/2019 1:03 PM\r\n- **Commit**: 3b75ef38a33579dcd32f2912ee69e886356b0f18\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19403.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19403.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19403.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19403.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19403.1\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19403.1\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n"}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"10145628948","Type":"PullRequestEvent","CreatedAt":"2019-08-05T05:22:42","Actor":"PRIMETSS","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/corefx/pull/39943","RelatedDescription":null,"RelatedBody":"Issue:\r\nhttps://github.com/dotnet/corefx/issues/35722\r\nhttps://github.com/dotnet/corefx/issues/32847\r\n\r\nOn Windows 10 IoT device (eg Rasbery Pi 3+) with Serial USB device connected `System.IO.Ports.SerialPort .GetPortNames() `returns garbage non chars.\r\n![image](https://user-images.githubusercontent.com/11331370/62270410-29626b80-b475-11e9-857c-e0129a6bb905.png)\r\n\r\nReason:\r\n`System.IO.Ports.SerialPort .GetPortNames()' was reading registry key \r\n![image](https://user-images.githubusercontent.com/11331370/62270526-56af1980-b475-11e9-8243-f483073ba092.png)\r\nBut this appears not to be correctly initialised by Serial Function Driver (serenum.sys) when USB device is connect to a Win10IoT device.\r\n[https://docs.microsoft.com/en-us/windows-hardware/drivers/serports/external-naming-of-com-ports](https://docs.microsoft.com/en-us/windows-hardware/drivers/serports/external-naming-of-com-ports)\r\n \r\nSuggested Fix:\r\nSince there appears to be no sure fire way to enumerate both legacy Com & USB PnP COM ports on Windows OS, and Win10 IoT also seem to handle initialisation of ports differently again.\r\nSuggested returning both the Registry COM[x] port names and also the DosDevice HardwareID (?) Port Name to allow connection to previously un-able to open ports due to no valid port name to open.\r\n\r\nHardware Tests:\r\nAs testing this issue requires multiple hardware, not only different OS's but also a variety of different COM port devices, eg Legacy on board UARTS IC's and also USB PnP Serial Ports. Testing is laborious.\r\n\r\nTested: \r\nLegacy Desktop System (Intel MB, on-board Serial port UART) (Win7) [On-board Serial Port + Multiple USB PnP comm port devices]\r\nRaspberry Pi 3B+ (Win10 IoT ARM32) [Multiple USB PnP comm port devices + OnBoard SoC UART]\r\nHP Pro Desktop (Windows 10 Pro 64 bit) [Multiple USB PnP comm port devices]\r\n\r\nWindows 8 { Not tested yet }\r\n"},{"Id":"10145628789","Type":"PullRequestEvent","CreatedAt":"2019-08-05T05:22:39","Actor":"PRIMETSS","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/pull/39943","RelatedDescription":"Closed pull request \"Fix System.IO.Ports.SerialPort GetPortNames() Returns garbage chars on Win10IoT Devices with USB Serial ports\" (#39943) at dotnet/corefx","RelatedBody":"Issue:\r\nhttps://github.com/dotnet/corefx/issues/35722\r\nhttps://github.com/dotnet/corefx/issues/32847\r\n\r\nOn Windows 10 IoT device (eg Rasbery Pi 3+) with Serial USB device connected `System.IO.Ports.SerialPort .GetPortNames() `returns garbage non chars.\r\n![image](https://user-images.githubusercontent.com/11331370/62270410-29626b80-b475-11e9-857c-e0129a6bb905.png)\r\n\r\nReason:\r\n`System.IO.Ports.SerialPort .GetPortNames()' was reading registry key \r\n![image](https://user-images.githubusercontent.com/11331370/62270526-56af1980-b475-11e9-8243-f483073ba092.png)\r\nBut this appears not to be correctly initialised by Serial Function Driver (serenum.sys) when USB device is connect to a Win10IoT device.\r\n[https://docs.microsoft.com/en-us/windows-hardware/drivers/serports/external-naming-of-com-ports](https://docs.microsoft.com/en-us/windows-hardware/drivers/serports/external-naming-of-com-ports)\r\n \r\nSuggested Fix:\r\nSince there appears to be no sure fire way to enumerate both legacy Com & USB PnP COM ports on Windows OS, and Win10 IoT also seem to handle initialisation of ports differently again.\r\nSuggested returning both the Registry COM[x] port names and also the DosDevice HardwareID (?) Port Name to allow connection to previously un-able to open ports due to no valid port name to open.\r\n\r\nHardware Tests:\r\nAs testing this issue requires multiple hardware, not only different OS's but also a variety of different COM port devices, eg Legacy on board UARTS IC's and also USB PnP Serial Ports. Testing is laborious.\r\n\r\nTested: \r\nLegacy Desktop System (Intel MB, on-board Serial port UART) (Win7) [On-board Serial Port + Multiple USB PnP comm port devices]\r\nRaspberry Pi 3B+ (Win10 IoT ARM32) [Multiple USB PnP comm port devices + OnBoard SoC UART]\r\nHP Pro Desktop (Windows 10 Pro 64 bit) [Multiple USB PnP comm port devices]\r\n\r\nWindows 8 { Not tested yet }\r\n"},{"Id":"10145250250","Type":"IssuesEvent","CreatedAt":"2019-08-05T03:16:38","Actor":"timandy","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/40014","RelatedDescription":"Opened issue \"Optimize Enumerable.SkipLast()\" (#40014) at dotnet/corefx","RelatedBody":"Enumerable.SkipLast() can be cast to Enumerable.Take().\r\nEnumerable.TakeLast() did the similar operation.\r\n\r\nhttps://github.com/dotnet/corefx/blob/6d86975666ecd2e2b4f5ab808dcfeff94fd18789/src/System.Linq/src/System/Linq/Skip.cs#L116-L129\r\nhttps://github.com/dotnet/corefx/blob/6d86975666ecd2e2b4f5ab808dcfeff94fd18789/src/System.Linq/src/System/Linq/Take.SpeedOpt.cs#L17-L45"},{"Id":"10144700046","Type":"PullRequestEvent","CreatedAt":"2019-08-04T23:32:54","Actor":"buyaa-n","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/pull/39940","RelatedDescription":"Closed pull request \"Fix for Mac Catalina failure on release/2.2 and 2.1 branches\" (#39940) at dotnet/corefx","RelatedBody":""},{"Id":"10144565079","Type":"IssuesEvent","CreatedAt":"2019-08-04T22:09:13","Actor":"mklement0","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/40013","RelatedDescription":"Opened issue \"DirectoryInfo.MoveTo and Directory.Move mistakenly prevent renaming directories to case variations of themselves on Windows, macOS\" (#40013) at dotnet/corefx","RelatedBody":"The default filesystems on macOS and Windows are case-_insensitive_, yet case-_preserving_.\r\n\r\nTherefore, renaming a filesystem item to a _case variation_ of its current name - e.g., `foo` to `FOO` - should be supported.\r\n\r\n* This  _is_ properly supported for _files_.\r\n\r\n* It is _not_ supported for _directories_, due to an explicit, conceptually flawed check that tests the new path for being the same _case-insensitively_, which throws a spurious exception stating that  `Source and destination path must be different.`\r\n\r\nYou can paste following snippet directly into a `dotnet script` REPL and press <kbd>Enter</kbd> or paste it into a `*.csx` file and execute it with `dotnet script /path/to/*.csx`:\r\n\r\n```csharp\r\nusing System.IO;\r\n\r\nEnvironment.CurrentDirectory = Path.GetTempPath();\r\n\r\nDirectory.CreateDirectory(\"foo\");\r\n\r\n// This should succeed, but throws an exception.\r\n// System.DirectoryInfo.MoveTo() exhibits the same symptom.\r\nDirectory.Move(\"foo\", \"FOO\");\r\n```\r\n\r\n"},{"Id":"10144406951","Type":"IssuesEvent","CreatedAt":"2019-08-04T20:37:46","Actor":"nguerrera","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/40012","RelatedDescription":"Opened issue \"Cannot build VB .NET Core 3 library project without ContextValue\" (#40012) at dotnet/corefx","RelatedBody":"# Repro steps\r\n\r\n1. Get latest 3.0 preview 8 build of the SDK: https://dotnetcli.blob.core.windows.net/dotnet/Sdk/release/3.0.100-preview8/dotnet-sdk-latest-win-x64.exe\r\n2. `mkdir repro`\r\n3. `cd repro`\r\n4. `dotnet new classlib --language VB --framework netcoreapp3.0`\r\n5. `dotnet build`\r\n\r\n# Expected result\r\n\r\nBuilds successfully\r\n\r\n# Actual result\r\n```\r\nvbc : error BC30002: Type 'Global.Microsoft.VisualBasic.MyServices.Internal.ContextValue' is not defined. [D:\\Temp\\vbr\\vbr.vbproj]\r\n```\r\n\r\nI believe this is coming from https://github.com/dotnet/roslyn/blob/fab7134296816fc80019c60b0f5bef7400cf23ea/src/Compilers/VisualBasic/Portable/Symbols/EmbeddedSymbols/VbMyTemplateText.vb#L355\r\n\r\nI suppose there are two fixes:\r\n\r\n1. Change the code spit in the compiler to not require this type when building a library. (In which case, this could be moved to dotnet/roslyn)\r\n2. Add the type to Microsoft.VisualBasic.Core.dll\r\n\r\ncc @danmosemsft @cston @KathleenDollard I believe this should be considered blocking for 3.0. \r\n\r\nIt is possible to work around this by setting VBRuntime=Embed or MyType=Empty in the vbproj, but I believe that is effectively undoing other work that was done for VB in 3.0."},{"Id":"10144072954","Type":"IssuesEvent","CreatedAt":"2019-08-04T17:35:23","Actor":"GSPP","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/40011","RelatedDescription":"Opened issue \"Utf8JsonWriter.Flush should flush the underlying stream only optionally\" (#40011) at dotnet/corefx","RelatedBody":"`Utf8JsonWriter.Flush` flushes the underlying stream. I think this behavior should be decoupled from flushing the buffers of `Utf8JsonWriter`. I might want to flush the writer but not the stream.\r\n\r\nFor example, `FileStream.Flush` calls into the kernel which is not necessarily desired. Network-based streams (not `NetworkStream` itself) might cause packets to be sent prematurely. Compression streams might create inefficiently small chunks.\r\n\r\nOne solutions is to add a parameter:\r\n\r\n    void Flush(bool flushStream = false)\r\n\r\nAnother solution is to never flush the stream. User code can flush the stream by itself if it wants to.\r\n"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"10145474617","Type":"IssuesEvent","CreatedAt":"2019-08-05T04:32:44","Actor":"sunkin351","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/37720","RelatedDescription":"Opened issue \"XML documentation feature: Embeding <see href=\"\"/> link into VS doc hint window\" (#37720) at dotnet/roslyn","RelatedBody":"I wish to have the ability to embed a link in (what others are telling me to call) the \"parameter info box\" that shows you the summary of the XML documentation when you hover over a Type or type member. I want to embed a link to the official documentation of a class or member that's clickable from the hint window.\r\n\r\nAn example:\r\n```cs\r\n/// <summary>\r\n/// My Function. <see href=\"http://www.example.com/path/to/documentation.xml\">See this documentation</see>\r\n/// </summary>\r\npublic static void MyFunction()\r\n{\r\n}\r\n```\r\n\r\nIf this isn't possible, please explain why. ^^ It would be awesome to have this."},{"Id":"10144809617","Type":"IssuesEvent","CreatedAt":"2019-08-05T00:34:03","Actor":"Gnbrkm41","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/37719","RelatedDescription":"Closed issue \"different forms of double.MaxValue/MinValue might be recognised as out of range\" (#37719) at dotnet/roslyn","RelatedBody":"**Version Used**: \r\nUsing Microsoft.Scripting.CSharp.Scripting package, version 3.3.0-beta2-19376-02(fc001df5)\r\n**Steps to Reproduce**:\r\n\r\n1. Copy the values returned from double.MaxValue/MinValue.ToString (which by default is \"R\"), which is printed as (+/-)1.79769313486232E+308 on .NET Core 3.0 P7.\r\n2. Try to use the value as a floating point literal in codes\r\n\r\n**Expected Behavior**:\r\nShould compile fine.\r\n\r\n**Actual Behavior**:\r\nFails to compile with the error CS0594 \"Floating-point constant is outside the range of type 'double'\".\r\n\r\nThe [System.Double source](https://github.com/dotnet/coreclr/blob/86d56cee7311dcf07e4ec3149c364da40c25ba87/src/System.Private.CoreLib/shared/System/Double.cs#L35) uses (+/-)1.7976931348623157E+308 instead. Feeding the value from ToString to Parse straight away (`double.Parse(double.MaxValue.ToString())`) seems to work fine without exceptions, which makes me believe the CoreLib should be IEEE compliant.... but @tannergooding probably knows better there. :smile: "}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"10144261872","Type":"PullRequestEvent","CreatedAt":"2019-08-04T19:18:34","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7666","RelatedDescription":"Merged pull request \"Add a note about `strip` program\" (#7666) at dotnet/corert","RelatedBody":""},{"Id":"10144241977","Type":"PullRequestEvent","CreatedAt":"2019-08-04T19:07:53","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7667","RelatedDescription":"Opened pull request \"Add a doc on debugging CoreRT programs\" (#7667) at dotnet/corert","RelatedBody":"A couple useful tips."},{"Id":"10144241682","Type":"PullRequestEvent","CreatedAt":"2019-08-04T19:07:43","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7666","RelatedDescription":"Opened pull request \"Add a note about `strip` program\" (#7666) at dotnet/corert","RelatedBody":""},{"Id":"10144241361","Type":"PullRequestEvent","CreatedAt":"2019-08-04T19:07:32","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7665","RelatedDescription":"Opened pull request \"Fix stack traces when reflection is disabled\" (#7665) at dotnet/corert","RelatedBody":"This enables stack trace metadata when `IlcDisableReflection == true` and `IlcGenerateStackTraceData == true`. Enabling stack trace metadata had no effect before this change.\r\n\r\nThis also has a side effect of always generating the metadata blob. This is necessary because `ModuleList` tends to ignore modules that don't have the embedded metadata blob (https://github.com/dotnet/corert/blob/635cf21aca11265ded9d78d216424bd609c052f5/src/System.Private.TypeLoader/src/Internal/Runtime/TypeLoader/ModuleList.cs#L713-L720). Emitting an empty blob fixes the bug where delegate interop didn't work with reflection disabled."},{"Id":"10141314577","Type":"IssuesEvent","CreatedAt":"2019-08-03T13:05:03","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/7664","RelatedDescription":"Closed issue \"[Question] Clean up milestones\" (#7664) at dotnet/corert","RelatedBody":"Not a biggie, but could older milestones be closed?  See [September](https://github.com/dotnet/corert/milestone/15) and [October](https://github.com/dotnet/corert/milestone/14)."},{"Id":"10141156547","Type":"IssuesEvent","CreatedAt":"2019-08-03T11:25:32","Actor":"shaggygi","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/7664","RelatedDescription":"Opened issue \"[Question] Clean up milestones\" (#7664) at dotnet/corert","RelatedBody":"Not a biggie, but could older milestones be closed?  See [September](https://github.com/dotnet/corert/milestone/15) and [October](https://github.com/dotnet/corert/milestone/14)."},{"Id":"10140395970","Type":"IssuesEvent","CreatedAt":"2019-08-03T03:05:04","Actor":"frankzye","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/6372","RelatedDescription":"Closed issue \"Process is terminating due to StackOverflowException\" (#6372) at dotnet/corert","RelatedBody":"I came an error Unhandled Exception: System.InvalidOperationException: A suitable constructor for type 'Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlExecutionStrategyFactory' could not be located. Ensure the type is concrete and services are registered for all parameters of a public constructor. so\r\nI added the following line to RD.xml, \r\n`<Assembly Name=\"Npgsql.EntityFrameworkCore.PostgreSQL\">\r\n\t\t\t<Type Name=\"Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlExecutionStrategyFactory\" Dynamic=\"Required All\"/>\r\n\t\t</Assembly>`,  but when I  compile, it throw an error \"Process is terminating due to StackOverflowException\", microsoft.dotnet.ilcompiler\\1.0.0-alpha-26919-01\\build\\Microsoft.NETCore.Native.targets(200,5): error MSB3073 xxx runtime.win-x64.microsoft.dotnet.ilcompiler\\1.0.0-alpha-26919-01\\tools\\ilc\" @\"obj\\release\\netcoreapp2.1\\win-x64\\native\\DataExplorer.ilc.rsp exit."},{"Id":"10136687118","Type":"PullRequestEvent","CreatedAt":"2019-08-02T13:36:08","Actor":"stephentoub","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7663","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/corefx,coreclr\" (#7663) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub"},{"Id":"10136110655","Type":"PullRequestEvent","CreatedAt":"2019-08-02T12:06:54","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7663","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/corefx,coreclr\" (#7663) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"10136090769","Type":"PullRequestEvent","CreatedAt":"2019-08-02T12:03:22","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/7662","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#7662) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @josalem"},{"Id":"10133718827","Type":"PullRequestEvent","CreatedAt":"2019-08-02T04:42:52","Actor":"Dotnet-GitSync-Bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/7662","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#7662) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"10145271015","Type":"IssuesEvent","CreatedAt":"2019-08-05T03:23:18","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/3365","RelatedDescription":"Closed issue \"Dotnet publish for project with P2P references fails when GeneratePackageOnBuild is true\" (#3365) at dotnet/sdk","RelatedBody":"Based on https://github.com/aspnet/AspNetCore/issues/11636.\r\n\r\nhttps://github.com/dotnet/sdk/pull/3255 causes publish to fail when a project has project references. Treating `NoBuild` and `GeneratePackageOnBuild` as equivalent causes project references to [stop building](https://github.com/dotnet/sdk/blob/master/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.Publish.targets#L74-L78).\r\n\r\nRepro steps:\r\n\r\n* Clone https://github.com/pranavkm/repro/tree/publish-p2p/\r\n* Call `dotnet publish` on mvcapp\r\n\r\n"},{"Id":"10144370417","Type":"IssuesEvent","CreatedAt":"2019-08-04T20:17:25","Actor":"nguerrera","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/issues/3504","RelatedDescription":"Opened issue \"Defensively set DisableSdkPath=true for non .NET framework VB projects\" (#3504) at dotnet/sdk","RelatedBody":"Generally, this is benign, because we pass VBRuntime which will override the SDK path, but if there is a bug or other misconfiguration, the compiler will try to locate the SDK Path using the current runtime. This causes it to try to use Microsoft.VisualBasic.dll from the .NET framework while building against core, and leads to confounding errors such as \r\n\r\n```\r\nvbc error BC30560: 'User' is ambiguous in the namespace 'Microsoft.VisualBasic.ApplicationServices'. [C:\\Users\\nicholg\\Source\\repos\\WpfControlLibrary2\\WpfControlLibrary2\\WpfControlLibrary2.vbproj]\r\n```\r\n\r\nWithout the fix for https://github.com/dotnet/sdk/issues/3450, you get errors like above with `msbuild` instead of the \"Could not find library Microsoft.VisualBasic.dll\" that was reported for `dotnet bulild`.\r\n\r\nWe should make a defensive change to set DisableSdkPath=true so that the symptom for any failure to find the correct vb runtime is consistently cannot find Microsoft.VisualBasic.dll regardless of which compiler (.NET Core or desktop) is used.\r\n\r\nThis is not a blocking issue, though, as it changes the error symptoms only when the product has other bugs or the project has been misconfigured.\r\n\r\nRelated to https://dev.azure.com/devdiv/DevDiv/_workitems/edit/960757"}],"ResultType":"GitHubEvent"},"Home-Issues":{"Issues":[{"Id":"475315730","IsPullRequest":false,"CreatedAt":"2019-07-31T19:23:23","Actor":"MeikTranel","Number":"148","RawContent":null,"Title":"Clarify guidelines in regards to Options and Requirements","State":"open","Body":"I'd be interested in which part of the project submission guidelines is optional and which are deal breaker requirements.\r\n\r\n- Is the Role Matrix laid out an absolute or (as can be read between the lines) just a preset, which may be subject to individual projects needs?\r\n- Is it a strong requirement that the project uses the contributor covenant CoC?","Url":"https://github.com/dotnet/foundation/issues/148","RelatedDescription":"Open issue \"Clarify guidelines in regards to Options and Requirements\" (#148)"},{"Id":"455670422","IsPullRequest":true,"CreatedAt":"2019-06-13T10:49:30","Actor":"gep13","Number":"147","RawContent":null,"Title":"(GH-111) Update Source Link location","State":"open","Body":"","Url":"https://github.com/dotnet/foundation/pull/147","RelatedDescription":"Open PR \"(GH-111) Update Source Link location\" (#147)"},{"Id":"455555823","IsPullRequest":true,"CreatedAt":"2019-06-13T06:28:59","Actor":"gep13","Number":"146","RawContent":null,"Title":"Update Cake Project Contacts","State":"closed","Body":"@jongalloway just noticed that this wasn't up to date.","Url":"https://github.com/dotnet/foundation/pull/146","RelatedDescription":"Closed or merged PR \"Update Cake Project Contacts\" (#146)"},{"Id":"441542047","IsPullRequest":true,"CreatedAt":"2019-05-09T18:35:22","Actor":"mitchelsellers","Number":"145","RawContent":null,"Title":"Edits to DNN Platform Information","State":"closed","Body":"Edits to reflect changes in repository structure with recent modifications to the overall project structure.","Url":"https://github.com/dotnet/foundation/pull/145","RelatedDescription":"Closed or merged PR \"Edits to DNN Platform Information\" (#145)"},{"Id":"437980746","IsPullRequest":true,"CreatedAt":"2019-05-03T20:10:38","Actor":"FlorianRappl","Number":"143","RawContent":null,"Title":"Add AngleSharp","State":"closed","Body":"cc @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/143","RelatedDescription":"Closed or merged PR \"Add AngleSharp\" (#143)"},{"Id":"426787230","IsPullRequest":true,"CreatedAt":"2019-05-03T20:08:40","Actor":"mairaw","Number":"141","RawContent":null,"Title":"add links to ML.NET docs","State":"closed","Body":"/cc @JRAlexander @shauheen \r\n\r\nTo match the info we have added for other projects","Url":"https://github.com/dotnet/foundation/pull/141","RelatedDescription":"Closed or merged PR \"add links to ML.NET docs\" (#141)"},{"Id":"440030132","IsPullRequest":true,"CreatedAt":"2019-05-03T20:08:15","Actor":"tomasherceg","Number":"144","RawContent":null,"Title":"Add DotVVM","State":"closed","Body":"cc @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/144","RelatedDescription":"Closed or merged PR \"Add DotVVM\" (#144)"},{"Id":"426787542","IsPullRequest":true,"CreatedAt":"2019-03-29T14:44:24","Actor":"mairaw","Number":"142","RawContent":null,"Title":"add docs samples link","State":"closed","Body":"@BillWagner should we add the samples project too?","Url":"https://github.com/dotnet/foundation/pull/142","RelatedDescription":"Closed or merged PR \"add docs samples link\" (#142)"},{"Id":"426658581","IsPullRequest":true,"CreatedAt":"2019-03-29T02:16:07","Actor":"scottaddie","Number":"139","RawContent":null,"Title":"Add link to ASP.NET Core docs","State":"closed","Body":"Provide a link to the docs site for ASP.NET Core.","Url":"https://github.com/dotnet/foundation/pull/139","RelatedDescription":"Closed or merged PR \"Add link to ASP.NET Core docs\" (#139)"},{"Id":"426666928","IsPullRequest":true,"CreatedAt":"2019-03-29T02:15:48","Actor":"BillWagner","Number":"140","RawContent":null,"Title":"add links to .NET docs","State":"closed","Body":"/cc @mairaw @scottaddie\r\n\r\nMaira, did I miss any project repos to tag?","Url":"https://github.com/dotnet/foundation/pull/140","RelatedDescription":"Closed or merged PR \"add links to .NET docs\" (#140)"},{"Id":"419205679","IsPullRequest":true,"CreatedAt":"2019-03-18T21:04:01","Actor":"MikeWilliams-UK","Number":"137","RawContent":null,"Title":"Add V3.1 repo and change documentation link","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/137","RelatedDescription":"Closed or merged PR \"Add V3.1 repo and change documentation link\" (#137)"},{"Id":"419897914","IsPullRequest":true,"CreatedAt":"2019-03-18T21:03:34","Actor":"devlead","Number":"138","RawContent":null,"Title":"Add Dave to cake.md","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/138","RelatedDescription":"Closed or merged PR \"Add Dave to cake.md\" (#138)"},{"Id":"391459677","IsPullRequest":false,"CreatedAt":"2019-03-08T19:00:06","Actor":"manne","Number":"123","RawContent":null,"Title":"Missing logo for Steeltoe","State":"closed","Body":"`https://brandfolder.com/pivotal-assets/attachments/ohxttd-7yxa60-clvf50/pivotal-assets-pivotal-genericfile.png` redirects to a sign in page\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L128-L130","Url":"https://github.com/dotnet/foundation/issues/123","RelatedDescription":"Closed issue \"Missing logo for Steeltoe\" (#123)"},{"Id":"417018694","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:32","Actor":"jkonicki","Number":"136","RawContent":null,"Title":"Fix logo and update team contributors","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/136","RelatedDescription":"Closed or merged PR \"Fix logo and update team contributors\" (#136)"},{"Id":"416428925","IsPullRequest":true,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"135","RawContent":null,"Title":"adds Umbraco logo","State":"closed","Body":"fixes #124 ","Url":"https://github.com/dotnet/foundation/pull/135","RelatedDescription":"Closed or merged PR \"adds Umbraco logo\" (#135)"},{"Id":"391459812","IsPullRequest":false,"CreatedAt":"2019-03-08T18:59:00","Actor":"manne","Number":"124","RawContent":null,"Title":"Missing logo for Umbraco","State":"closed","Body":"`https://fbcdn-profile-a.akamaihd.net/hprofile-ak-xap1/v/t1.0-1/p160x160/971596_519168901464439_566592989_n.png?oh=ce61e5b4cbd60c0d99c4164cbb05a434&oe=54F091C9&__gda__=1424472439_c9f76213a915bc2af88246f464f29e8b` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L149-L151","Url":"https://github.com/dotnet/foundation/issues/124","RelatedDescription":"Closed issue \"Missing logo for Umbraco\" (#124)"},{"Id":"416427614","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:45","Actor":"manne","Number":"134","RawContent":null,"Title":"adds the prism logo","State":"closed","Body":"fixes #126 ","Url":"https://github.com/dotnet/foundation/pull/134","RelatedDescription":"Closed or merged PR \"adds the prism logo\" (#134)"},{"Id":"391460225","IsPullRequest":false,"CreatedAt":"2019-03-08T18:58:44","Actor":"manne","Number":"126","RawContent":null,"Title":"No logo provided for Prism","State":"closed","Body":"Can/should this [image](http://prismlibrary.github.io/images/logo-prism-symbol@2x.png) be used?\r\n\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L155-L157","Url":"https://github.com/dotnet/foundation/issues/126","RelatedDescription":"Closed issue \"No logo provided for Prism\" (#126)"},{"Id":"416157860","IsPullRequest":true,"CreatedAt":"2019-03-08T18:58:26","Actor":"glennawatson","Number":"133","RawContent":null,"Title":"Add additional ReactiveUI organization projects.","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/133","RelatedDescription":"Closed or merged PR \"Add additional ReactiveUI organization projects.\" (#133)"},{"Id":"407251900","IsPullRequest":true,"CreatedAt":"2019-02-18T17:45:44","Actor":"Potapy4","Number":"132","RawContent":null,"Title":"Update MVVM project logo","State":"closed","Body":"Fixes dotnet/dotnetfoundation-website#72\r\nFixes #125","Url":"https://github.com/dotnet/foundation/pull/132","RelatedDescription":"Closed or merged PR \"Update MVVM project logo\" (#132)"},{"Id":"391459919","IsPullRequest":false,"CreatedAt":"2019-02-18T17:45:44","Actor":"manne","Number":"125","RawContent":null,"Title":"Missing logo for MVVM Light Toolkit","State":"closed","Body":"`https://raw.githubusercontent.com/paulcbetts/mvvmlight/master/Installer/InstallItems/html/MVVM_BlackText_190x147.png` results in a 404.\r\nhttps://github.com/dotnet/foundation/blob/c7e513139f593ad95237e864e4d2fdf9181ebafc/projects/projects.json#L137-L139","Url":"https://github.com/dotnet/foundation/issues/125","RelatedDescription":"Closed issue \"Missing logo for MVVM Light Toolkit\" (#125)"},{"Id":"406210463","IsPullRequest":true,"CreatedAt":"2019-02-18T17:44:39","Actor":"NextTurn","Number":"131","RawContent":null,"Title":"Replace http links with https links","State":"closed","Body":"Replace http links with https where possible - both returned 200 OK.","Url":"https://github.com/dotnet/foundation/pull/131","RelatedDescription":"Closed or merged PR \"Replace http links with https links\" (#131)"},{"Id":"399191617","IsPullRequest":true,"CreatedAt":"2019-02-02T11:04:15","Actor":"NextTurn","Number":"130","RawContent":null,"Title":"Update Open XML links","State":"closed","Body":"OpenXmlDeveloper.org was shut down long ago.\r\n\r\nThe content has been moved to EricWhite.com.","Url":"https://github.com/dotnet/foundation/pull/130","RelatedDescription":"Closed or merged PR \"Update Open XML links\" (#130)"},{"Id":"395863354","IsPullRequest":true,"CreatedAt":"2019-01-09T22:28:14","Actor":"ErikEJ","Number":"128","RawContent":null,"Title":"Update of EF description","State":"closed","Body":"@divega !","Url":"https://github.com/dotnet/foundation/pull/128","RelatedDescription":"Closed or merged PR \"Update of EF description\" (#128)"},{"Id":"395901602","IsPullRequest":true,"CreatedAt":"2019-01-05T03:23:39","Actor":"MarcBruins","Number":"129","RawContent":null,"Title":"Update to absolute path","State":"closed","Body":"Update to absolute path so that when this list is copied the link will actually work","Url":"https://github.com/dotnet/foundation/pull/129","RelatedDescription":"Closed or merged PR \"Update to absolute path\" (#129)"},{"Id":"395705579","IsPullRequest":true,"CreatedAt":"2019-01-04T00:22:42","Actor":"carloscds","Number":"127","RawContent":null,"Title":"Update documentation information","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/127","RelatedDescription":"Closed or merged PR \"Update documentation information\" (#127)"},{"Id":"391459057","IsPullRequest":true,"CreatedAt":"2019-01-03T04:47:09","Actor":"manne","Number":"122","RawContent":null,"Title":"targets the existing document","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/122","RelatedDescription":"Closed or merged PR \"targets the existing document\" (#122)"},{"Id":"384569679","IsPullRequest":true,"CreatedAt":"2019-01-03T04:46:31","Actor":"JamesNK","Number":"121","RawContent":null,"Title":"Add Newtonsoft.Json","State":"closed","Body":"// @jongalloway ","Url":"https://github.com/dotnet/foundation/pull/121","RelatedDescription":"Closed or merged PR \"Add Newtonsoft.Json\" (#121)"},{"Id":"384212839","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:50","Actor":"stefanov-stefan","Number":"120","RawContent":null,"Title":"Added Telerik info","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/120","RelatedDescription":"Closed or merged PR \"Added Telerik info\" (#120)"},{"Id":"384212448","IsPullRequest":true,"CreatedAt":"2018-11-26T09:33:22","Actor":"stefanov-stefan","Number":"119","RawContent":null,"Title":"Added Telerik UWP proj","State":"closed","Body":"","Url":"https://github.com/dotnet/foundation/pull/119","RelatedDescription":"Closed or merged PR \"Added Telerik UWP proj\" (#119)"}],"ResultType":"GitHubIssue"},"CoreCLR-Issues":{"Issues":[{"Id":"476620859","IsPullRequest":false,"CreatedAt":"2019-08-05T01:41:52","Actor":"VincentBu","Number":"26003","RawContent":null,"Title":"Test failed: JIT_Performance._CodeQuality_BenchmarksGame_regex_redux_regex_redux_1_regex_redux_1_._CodeQuality_BenchmarksGame_regex_redux_regex_redux_1_regex_redux_1_cmd","State":"open","Body":"**Job:**\r\nhttps://mc.dot.net/#/user/coreclr-jitstress/ci~2Fdotnet~2Fcoreclr~2Frefs~2Fheads~2Fmaster/test~2Ffunctional~2Fcli~2F/20190803.1/workItem/JIT/analysis/xunit/JIT_Performance._CodeQuality_BenchmarksGame_regex_redux_regex_redux_1_regex_redux_1_~2F_CodeQuality_BenchmarksGame_regex_redux_regex_redux_1_regex_redux_1_cmd\r\n\r\n**Failed tests:**\r\nJIT_Performance._CodeQuality_BenchmarksGame_regex_redux_regex_redux_1_regex_redux_1_._CodeQuality_BenchmarksGame_regex_redux_regex_redux_1_regex_redux_1_cmd\r\n\r\n**Log:**\r\n```\r\nProcess terminated. Assertion failed.\r\nCheck the arguments in the caller!\r\n   at System.Collections.Generic.ArraySortHelper`1.Sort(T[] keys, Int32 index, Int32 length, IComparer`1 comparer)\r\n   at System.Collections.Generic.List`1.Sort(Int32 index, Int32 count, IComparer`1 comparer)\r\n   at System.Text.RegularExpressions.RegexCharClass.Canonicalize() in /_/src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/RegexCharClass.cs:line 1096\r\n   at System.Text.RegularExpressions.RegexCharClass.ToStringClass() in /_/src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/RegexCharClass.cs:line 1033\r\n   at System.Text.RegularExpressions.RegexFCD.FirstChars(RegexTree t) in /_/src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/RegexFCD.cs:line 69\r\n   at System.Text.RegularExpressions.RegexWriter.RegexCodeFromRegexTree(RegexTree tree) in /_/src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/RegexWriter.cs:line 136\r\n   at System.Text.RegularExpressions.RegexWriter.Write(RegexTree tree) in /_/src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/RegexWriter.cs:line 56\r\n   at System.Text.RegularExpressions.Regex..ctor(String pattern, RegexOptions options, TimeSpan matchTimeout, Boolean addToCache) in /_/src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/Regex.cs:line 128\r\n   at BenchmarksGame.RegexRedux_1.Bench(TextReader inputReader, Boolean verbose)\r\n   at BenchmarksGame.RegexRedux_1.Main(String[] args)\r\n\r\nReturn code:      1\r\nRaw output file:      C:\\\\dotnetbuild\\\\work\\\\4a24df55-6bc0-4420-b77f-02b8a2f12bf9\\\\Work\\\\041a1baf-da71-47a6-8868-d43318676cfa\\\\Exec\\\\JIT\\\\Performance\\\\Reports\\\\JIT.Performance\\\\CodeQuality\\\\BenchmarksGame\\\\regex-redux\\\\regex-redux-1\\\\regex-redux-1.output.txt\r\nRaw output:\r\nBEGIN EXECUTION\r\n \\\"C:\\\\dotnetbuild\\\\work\\\\4a24df55-6bc0-4420-b77f-02b8a2f12bf9\\\\Payload\\\\corerun.exe\\\" regex-redux-1.exe \r\nExpected: 100\r\nActual: -2146232797\r\nEND EXECUTION - FAILED\r\nFAILED\r\nTest Harness Exitcode is : 1\r\nTo run the test:\r\n> set CORE_ROOT=C:\\\\dotnetbuild\\\\work\\\\4a24df55-6bc0-4420-b77f-02b8a2f12bf9\\\\Payload\r\n> C:\\\\dotnetbuild\\\\work\\\\4a24df55-6bc0-4420-b77f-02b8a2f12bf9\\\\Work\\\\041a1baf-da71-47a6-8868-d43318676cfa\\\\Exec\\\\JIT\\\\Performance\\\\CodeQuality\\\\BenchmarksGame\\\\regex-redux\\\\regex-redux-1\\\\regex-redux-1.cmd\r\nExpected: True\r\nActual:   False\r\n```","Url":"https://github.com/dotnet/coreclr/issues/26003","RelatedDescription":"Open issue \"Test failed: JIT_Performance._CodeQuality_BenchmarksGame_regex_redux_regex_redux_1_regex_redux_1_._CodeQuality_BenchmarksGame_regex_redux_regex_redux_1_regex_redux_1_cmd\" (#26003)"},{"Id":"476620179","IsPullRequest":false,"CreatedAt":"2019-08-05T01:37:16","Actor":"VincentBu","Number":"26002","RawContent":null,"Title":"Test failed: managed_Compilation._Compilation_Compilation_._Compilation_Compilation_cmd","State":"open","Body":"**Job:**\r\nhttps://mc.dot.net/#/user/coreclr-jitstress/ci~2Fdotnet~2Fcoreclr~2Frefs~2Fheads~2Fmaster/test~2Ffunctional~2Fcli~2F/20190803.1/workItem/PayloadGroup0/analysis/xunit/managed_Compilation._Compilation_Compilation_~2F_Compilation_Compilation_cmd\r\n\r\n**Failed tests:**\r\nmanaged_Compilation._Compilation_Compilation_._Compilation_Compilation_cmd\r\n\r\n**Log:**\r\n```\r\nAssert failure(PID 4968 [0x00001368], Thread: 8048 [0x1f70]): Consistency check failed: AV in clr at this callstack:\r\n------\r\nCORECLR! GetCLRRuntimeHost + 0x59B650 (0x00007fff`c738b9c0)\r\n<no module>! <no symbol> + 0x0 (0x00007fff`6a09084c)\r\n<no module>! <no symbol> + 0x0 (0x000001bd`0022c778)\r\n<no module>! <no symbol> + 0x0 (0x000001bd`0022c780)\r\n<no module>! <no symbol> + 0x0 (0x000001bd`0022c780)\r\n<no module>! <no symbol> + 0x0 (0x0000004a`d6b7cd90)\r\n<no module>! <no symbol> + 0x0 (0x000001bd`0022c780)\r\n<no module>! <no symbol> + 0x0 (0x000001bd`0022c778)\r\n<no module>! <no symbol> + 0x0 (0x000001bd`00190310)\r\nCORECLR! GetCLRRuntimeHost + 0x59BA66 (0x00007fff`c738bdd6)\r\n<no module>! <no symbol> + 0x0 (0x00007fff`6a0904b7)\r\n<no module>! <no symbol> + 0x0 (0x000001bd`00161fa0)\r\n<no module>! <no symbol> + 0x0 (0x0000004a`d6b7cdb8)\r\n<no module>! <no symbol> + 0x0 (0x00000000`00000051)\r\n<no module>! <no symbol> + 0x0 (0x00000000`00000051)\r\n-----\r\n.AV on tid=0x1f70 (8048), cxr=0000004AD6B7C580, exr=0000004AD6B7CA70\r\nFAILED: false\r\n\r\nCORECLR! coreclr_shutdown_2 + 0xEB34 (0x00007fff`c6d8dca4)\r\nCORECLR! GetCLRRuntimeHost + 0x13030A (0x00007fff`c6f2067a)\r\nCORECLR! GetCLRRuntimeHost + 0x12FD62 (0x00007fff`c6f200d2)\r\nCORECLR! GetCLRRuntimeHost + 0x12FCD6 (0x00007fff`c6f20046)\r\nCORECLR! GetCLRRuntimeHost + 0x130563 (0x00007fff`c6f208d3)\r\nNTDLL! RtlInitializeCriticalSection + 0x190 (0x00007fff`f2fa5e90)\r\nNTDLL! RtlImageNtHeaderEx + 0x17B (0x00007fff`f2f7fa1b)\r\nNTDLL! KiUserExceptionDispatcher + 0x3A (0x00007fff`f2fe96fa)\r\nCORECLR! GetCLRRuntimeHost + 0x59B650 (0x00007fff`c738b9c0)\r\n<no module>! <no symbol> + 0x0 (0x00007fff`6a09084c)\r\n    File: f:\\\\workspace\\\\_work\\\\1\\\\s\\\\src\\\\vm\\\\excep.cpp Line: 7639\r\n    Image: C:\\\\dotnetbuild\\\\work\\\\4a24df55-6bc0-4420-b77f-02b8a2f12bf9\\\\Payload\\\\CoreRun.exe\r\n\r\n\r\nReturn code:      1\r\nRaw output file:      C:\\\\dotnetbuild\\\\work\\\\4a24df55-6bc0-4420-b77f-02b8a2f12bf9\\\\Work\\\\2baf6f54-90c9-4727-8e54-e158cd568059\\\\Exec\\\\managed\\\\Compilation\\\\Reports\\\\managed.Compilation\\\\Compilation\\\\Compilation.output.txt\r\nRaw output:\r\nBEGIN EXECUTION\r\n \\\"C:\\\\dotnetbuild\\\\work\\\\4a24df55-6bc0-4420-b77f-02b8a2f12bf9\\\\Payload\\\\corerun.exe\\\" Compilation.exe \r\nStarting the test\r\nUsing reference to: C:\\\\dotnetbuild\\\\work\\\\4a24df55-6bc0-4420-b77f-02b8a2f12bf9\\\\Payload\\\\System.Private.CoreLib.dll\r\nTest compiled\r\nExpected: 100\r\nActual: -1073740286\r\nEND EXECUTION - FAILED\r\nFAILED\r\nTest Harness Exitcode is : 1\r\nTo run the test:\r\n> set CORE_ROOT=C:\\\\dotnetbuild\\\\work\\\\4a24df55-6bc0-4420-b77f-02b8a2f12bf9\\\\Payload\r\n> C:\\\\dotnetbuild\\\\work\\\\4a24df55-6bc0-4420-b77f-02b8a2f12bf9\\\\Work\\\\2baf6f54-90c9-4727-8e54-e158cd568059\\\\Exec\\\\managed\\\\Compilation\\\\Compilation\\\\Compilation.cmd\r\nExpected: True\r\nActual:   False\r\n```","Url":"https://github.com/dotnet/coreclr/issues/26002","RelatedDescription":"Open issue \"Test failed: managed_Compilation._Compilation_Compilation_._Compilation_Compilation_cmd\" (#26002)"},{"Id":"476618283","IsPullRequest":false,"CreatedAt":"2019-08-05T01:23:41","Actor":"VincentBu","Number":"26001","RawContent":null,"Title":"Test failed: Interop_COM._NETClients_IDispatch_NETClientIDispatch_NETClientIDispatch_._NETClients_IDispatch_NETClientIDispatch_NETClientIDispatch_cmd","State":"open","Body":"**Job:**\r\nhttps://mc.dot.net/#/user/coreclr-gcstress-extra/ci~2Fdotnet~2Fcoreclr~2Frefs~2Fheads~2Fmaster/test~2Ffunctional~2Fcli~2F/20190803.1/workItem/Interop/analysis/xunit/Interop_COM._NETClients_IDispatch_NETClientIDispatch_NETClientIDispatch_~2F_NETClients_IDispatch_NETClientIDispatch_NETClientIDispatch_cmd\r\n\r\n**Failed tests:**\r\nInterop_COM._NETClients_IDispatch_NETClientIDispatch_NETClientIDispatch_._NETClients_IDispatch_NETClientIDispatch_NETClientIDispatch_cmd\r\n\r\n**Log:**\r\n```\r\nAssert failure(PID 2784 [0x00000ae0], Thread: 648 [0x0288]): Consistency check failed: AV in clr at this callstack:\r\n------\r\nCORECLR! GetCLRRuntimeHost + 0x12503D (0x00007ffe`684c53ad)\r\nCORECLR! GetCLRRuntimeHost + 0xD3BE3 (0x00007ffe`68473f53)\r\nCORECLR! GetCLRRuntimeHost + 0xD5A0A (0x00007ffe`68475d7a)\r\nCORECLR! GetCLRRuntimeHost + 0xD867D (0x00007ffe`684789ed)\r\nCORECLR! GetCLRRuntimeHost + 0xD8488 (0x00007ffe`684787f8)\r\nCORECLR! GetCLRRuntimeHost + 0x80B35D (0x00007ffe`68bab6cd)\r\nCORECLR! GetCLRRuntimeHost + 0x809F26 (0x00007ffe`68baa296)\r\nCORECLR! GetCLRRuntimeHost + 0x79E84F (0x00007ffe`68b3ebbf)\r\nCORECLR! GetCLRRuntimeHost + 0x7969F0 (0x00007ffe`68b36d60)\r\nCORECLR! GetCLRRuntimeHost + 0x7966A0 (0x00007ffe`68b36a10)\r\nCORECLR! GetCLRRuntimeHost + 0x7828C9 (0x00007ffe`68b22c39)\r\nCORECLR! GetCLRRuntimeHost + 0x7825E6 (0x00007ffe`68b22956)\r\nCORECLR! GetCLRRuntimeHost + 0x7852B1 (0x00007ffe`68b25621)\r\nCORECLR! GetCLRRuntimeHost + 0x59BE30 (0x00007ffe`6893c1a0)\r\nCORECLR! GetCLRRuntimeHost + 0x1715B2 (0x00007ffe`68511922)\r\nCORECLR! GetCLRRuntimeHost + 0x59B4B6 (0x00007ffe`6893b826)\r\n<no module>! <no symbol> + 0x0 (0x00007ffe`091d0d12)\r\n<no module>! <no symbol> + 0x0 (0x00000000`00000004)\r\nCORECLR! GetCLRRuntimeHost + 0x32D3D6 (0x00007ffe`686cd746)\r\n-----\r\n.AV on tid=0x288 (648), cxr=0000004F089F6580, exr=0000004F089F6A70\r\nFAILED: false\r\n\r\nCORECLR! coreclr_shutdown_2 + 0xEB34 (0x00007ffe`6833dca4)\r\nCORECLR! GetCLRRuntimeHost + 0x13030A (0x00007ffe`684d067a)\r\nCORECLR! GetCLRRuntimeHost + 0x12FD62 (0x00007ffe`684d00d2)\r\nCORECLR! GetCLRRuntimeHost + 0x12FCD6 (0x00007ffe`684d0046)\r\nCORECLR! GetCLRRuntimeHost + 0x130563 (0x00007ffe`684d08d3)\r\nNTDLL! RtlInitializeCriticalSection + 0x190 (0x00007ffe`92035e90)\r\nNTDLL! RtlImageNtHeaderEx + 0x17B (0x00007ffe`9200fa1b)\r\nNTDLL! KiUserExceptionDispatcher + 0x3A (0x00007ffe`920796fa)\r\nCORECLR! GetCLRRuntimeHost + 0x12503D (0x00007ffe`684c53ad)\r\nCORECLR! GetCLRRuntimeHost + 0xD3BE3 (0x00007ffe`68473f53)\r\n    File: f:\\\\workspace.3\\\\_work\\\\1\\\\s\\\\src\\\\vm\\\\excep.cpp Line: 7639\r\n    Image: C:\\\\dotnetbuild\\\\work\\\\eee83513-d80e-4433-bee8-a2dba2bf27da\\\\Payload\\\\CoreRun.exe\r\n\r\n\r\nReturn code:      1\r\nRaw output file:      C:\\\\dotnetbuild\\\\work\\\\eee83513-d80e-4433-bee8-a2dba2bf27da\\\\Work\\\\8d7ab4df-4d32-43c4-95a2-18a1bb397e87\\\\Exec\\\\Interop\\\\COM\\\\Reports\\\\Interop.COM\\\\NETClients\\\\IDispatch\\\\NETClientIDispatch\\\\NETClientIDispatch.output.txt\r\nRaw output:\r\nBEGIN EXECUTION\r\n \\\"C:\\\\dotnetbuild\\\\work\\\\eee83513-d80e-4433-bee8-a2dba2bf27da\\\\Payload\\\\corerun.exe\\\" NETClientIDispatch.exe \r\nCalling DoubleNumeric_ReturnByRef ...\r\nCall to DoubleNumeric_ReturnByRef complete\r\nCalling Add_Float_ReturnAndUpdateByRef ...\r\nCall to Add_Float_ReturnAndUpdateByRef complete: 0.1 + 0.2 = 0.3; 0.3 == 0.3\r\nCalling Add_Double_ReturnAndUpdateByRef ...\r\nCall to Add_Double_ReturnAndUpdateByRef complete: 0.1 + 0.2 = 0.30000000000000004; 0.30000000000000004 == 0.30000000000000004\r\nCalling TriggerException with Disp 127...\r\nExpected: 100\r\nActual: -1073740286\r\nEND EXECUTION - FAILED\r\nFAILED\r\nTest Harness Exitcode is : 1\r\nTo run the test:\r\n> set CORE_ROOT=C:\\\\dotnetbuild\\\\work\\\\eee83513-d80e-4433-bee8-a2dba2bf27da\\\\Payload\r\n> C:\\\\dotnetbuild\\\\work\\\\eee83513-d80e-4433-bee8-a2dba2bf27da\\\\Work\\\\8d7ab4df-4d32-43c4-95a2-18a1bb397e87\\\\Exec\\\\Interop\\\\COM\\\\NETClients\\\\IDispatch\\\\NETClientIDispatch\\\\NETClientIDispatch.cmd\r\nExpected: True\r\nActual:   False\r\n```","Url":"https://github.com/dotnet/coreclr/issues/26001","RelatedDescription":"Open issue \"Test failed: Interop_COM._NETClients_IDispatch_NETClientIDispatch_NETClientIDispatch_._NETClients_IDispatch_NETClientIDispatch_NETClientIDispatch_cmd\" (#26001)"},{"Id":"476611332","IsPullRequest":true,"CreatedAt":"2019-08-05T00:26:28","Actor":"EgorBo","Number":"26000","RawContent":null,"Title":"JIT: Optimize \"constant_string\".Length","State":"open","Body":"Replace `\"Hello\".Length` with just `5`. See https://github.com/dotnet/coreclr/issues/3633\r\n\r\n```csharp\r\nstatic int Test()\r\n{\r\n   return \"Hello\".Length;\r\n}\r\n```\r\nBefore:\r\n```asm\r\n; Method ConsoleApp177.Program:Test():int\r\nG_M38358_IG01:\r\nG_M38358_IG02:\r\n       mov      rax, 0xD1FFAB1E\r\n       mov      rax, gword ptr [rax]\r\n       mov      eax, dword ptr [rax+8]\r\nG_M38358_IG03:\r\n       ret      \r\n; Total bytes of code: 17\r\n```\r\nAfter:\r\n```asm\r\n; Method ConsoleApp177.Program:Test():int\r\nG_M38358_IG01:\r\nG_M38358_IG02:\r\n       mov      eax, 5\r\nG_M38358_IG03:\r\n       ret      \r\n; Total bytes of code: 6\r\n```\r\n\r\nMorph:\r\n```\r\n    *  RETURN    int   \r\n    \\--*  ARR_LENGTH int   \r\n        \\--*  CNS_STR   ref   <string constant>\r\n\r\n    ↓\r\n\r\n    *  RETURN    int   \r\n    \\--*  ARR_LENGTH int   \r\n        \\--*  IND       ref   \r\n            \\--*  CNS_INT(h) long   0xD1FFAB1E \"Hello\"\r\n\r\n    ↓\r\n\r\n    *  RETURN    int   \r\n    \\--*  CNS_INT   int    5\r\n```","Url":"https://github.com/dotnet/coreclr/pull/26000","RelatedDescription":"Open PR \"JIT: Optimize \"constant_string\".Length\" (#26000)"},{"Id":"476611074","IsPullRequest":true,"CreatedAt":"2019-08-05T00:24:22","Actor":"KodrAus","Number":"25999","RawContent":null,"Title":"Use a platform-agnostic name for coredistools lib","State":"open","Body":"Hi! :wave:\r\n\r\nI've been playing with `R2RDump` on OSX and ran into an issue with the expected native library name being Windows specific.\r\n\r\nThe `coredistools` library that's actually published doesn't appear to work on non-Windows platforms yet (looks like it's old), but if I build `coredistools` locally in my OSX environment then I can use it successfully with `R2RDump`.","Url":"https://github.com/dotnet/coreclr/pull/25999","RelatedDescription":"Open PR \"Use a platform-agnostic name for coredistools lib\" (#25999)"},{"Id":"476547625","IsPullRequest":true,"CreatedAt":"2019-08-04T12:23:56","Actor":"dotnet-maestro[bot]","Number":"25998","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:1cc0f2b0-7abd-45f0-cee6-08d67668456c)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190803.1\r\n- **Date Produced**: 8/3/2019 1:03 PM\r\n- **Commit**: 3b75ef38a33579dcd32f2912ee69e886356b0f18\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19403.1\r\n  - **Microsoft.DotNet.Build.Tasks.Feed** -> 2.2.0-beta.19403.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19403.1\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19403.1\r\n\r\n[marker]: <> (End:1cc0f2b0-7abd-45f0-cee6-08d67668456c)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/25998","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/arcade\" (#25998)"},{"Id":"476446789","IsPullRequest":true,"CreatedAt":"2019-08-04T06:19:52","Actor":"dotnet-maestro[bot]","Number":"25995","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:1cc0f2b0-7abd-45f0-cee6-08d67668456c)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190802.16\r\n- **Date Produced**: 8/3/2019 12:35 AM\r\n- **Commit**: d8457f6ba527aef165ff6fb0aded44bf8123ce83\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19402.16\r\n  - **Microsoft.DotNet.Build.Tasks.Feed** -> 2.2.0-beta.19402.16\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19402.16\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19402.16\r\n\r\n[marker]: <> (End:1cc0f2b0-7abd-45f0-cee6-08d67668456c)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/25995","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#25995)"},{"Id":"476447402","IsPullRequest":true,"CreatedAt":"2019-08-04T06:19:35","Actor":"dotnet-maestro[bot]","Number":"25996","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:16d3c6aa-851a-4668-94d4-08d690bc143a)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190802.28\r\n- **Date Produced**: 8/3/2019 2:44 AM\r\n- **Commit**: 8a958aa3d1cf2e91f6e9cf839e023ad4f8d489f2\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.Platforms** -> 5.0.0-alpha1.19402.28\r\n  - **Microsoft.Private.CoreFx.NETCoreApp** -> 5.0.0-alpha1.19402.28\r\n\r\n[marker]: <> (End:16d3c6aa-851a-4668-94d4-08d690bc143a)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/25996","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#25996)"},{"Id":"476447741","IsPullRequest":true,"CreatedAt":"2019-08-03T12:34:49","Actor":"dotnet-maestro[bot]","Number":"25997","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d21e78e6-fa30-42ea-2807-08d690bc5860)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190802.8\r\n- **Date Produced**: 8/3/2019 4:15 AM\r\n- **Commit**: 18e5616f62e7ef3438749cc54170cc3bc74138df\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19402.8\r\n\r\n[marker]: <> (End:d21e78e6-fa30-42ea-2807-08d690bc5860)\r\n\r\n","Url":"https://github.com/dotnet/coreclr/pull/25997","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/core-setup\" (#25997)"},{"Id":"476410707","IsPullRequest":true,"CreatedAt":"2019-08-03T03:26:41","Actor":"jashook","Number":"25994","RawContent":null,"Title":"Add --pmi flag to superpmi collect","State":"open","Body":"In addition to passing -pmi_assemblies run through all of the passed assemblies or directories and pmi all managed assemblies as part of the collection.\r\n\r\nThis and the ability to merge mch files are required for collecting using chem.\r\n\r\n/cc @dotnet/jit-contrib ","Url":"https://github.com/dotnet/coreclr/pull/25994","RelatedDescription":"Open PR \"Add --pmi flag to superpmi collect\" (#25994)"},{"Id":"476393153","IsPullRequest":false,"CreatedAt":"2019-08-03T00:00:36","Actor":"jakobbotsch","Number":"25993","RawContent":null,"Title":"Wrong reflection invocation on ARM64 with HFAs","State":"open","Body":"The following example should print 1 twice but prints 0 when invoked through reflection on ARM64:\r\n```csharp\r\npublic struct Hfa\r\n{\r\n    public double A, B, C, D;\r\n    public Hfa(double a, double b, double c, double d)\r\n    {\r\n        A = a;\r\n        B = b;\r\n        C = c;\r\n        D = d;\r\n    }\r\n}\r\npublic class Program\r\n{\r\n    [MethodImpl(MethodImplOptions.NoInlining)]\r\n    public static double Foo(double a, Hfa b, Hfa c) => c.B;\r\n\r\n    internal static void Main()\r\n    {\r\n        Console.WriteLine(Foo(0, new Hfa(), new Hfa(0, 1, 0, 0)));\r\n\r\n        object[] arr = { 0d, new Hfa(), new Hfa(0, 1, 0, 0) };\r\n        MethodInfo fooMI = typeof(Program).GetMethod(\"Foo\");\r\n        Console.WriteLine(fooMI.Invoke(null, arr));\r\n    }\r\n}\r\n```","Url":"https://github.com/dotnet/coreclr/issues/25993","RelatedDescription":"Open issue \"Wrong reflection invocation on ARM64 with HFAs\" (#25993)"},{"Id":"476367980","IsPullRequest":true,"CreatedAt":"2019-08-02T23:27:13","Actor":"sandreenko","Number":"25991","RawContent":null,"Title":"Do not set source for CoreDisTools.","State":"closed","Body":"We do not set it when we restore other packages so unify that.\r\n\r\ndotnet -restore will search for nuget.config and find https://github.com/dotnet/coreclr/blob/master/NuGet.config that contains https://dotnet.myget.org/F/dotnet-core/api/v3/index.json that is needed here.\r\n\r\n\r\nI will monitor if it fixes issues like https://dev.azure.com/dnceng/9ee6d478-d288-47f7-aacc-f6e6d082ae6d/_apis/build/builds/277007/logs/482.","Url":"https://github.com/dotnet/coreclr/pull/25991","RelatedDescription":"Closed or merged PR \"Do not set source for CoreDisTools.\" (#25991)"},{"Id":"476367842","IsPullRequest":false,"CreatedAt":"2019-08-02T22:56:54","Actor":"echesakovMSFT","Number":"25990","RawContent":null,"Title":"[Linux_rhel6 x64 ] Build product failure after #25909","State":"closed","Body":"https://dev.azure.com/dnceng/public/_build/results?buildId=292830&view=logs\r\n```\r\n/__w/1/s/src/pal/src/exception/remote-unwind.cpp:976:51: error: expected ')'\r\n        TRACE(\"ELF: phdr %p type %d (%x) vaddr %\" PRIxA \" memsz %\" PRIxA \" paddr %\" PRIxA \" filesz %\" PRIxA \" offset %\" PRIxA \" align %\" PRIxA \"\\n\",\r\n                                                  ^\r\n/__w/1/s/src/pal/src/exception/remote-unwind.cpp:82:20: note: expanded from macro 'PRIxA'\r\n#define PRIxA PRIA PRIx\r\n                   ^\r\n/__w/1/s/src/pal/src/exception/remote-unwind.cpp:78:14: note: expanded from macro 'PRIx'\r\n#define PRIx PRIx64\r\n             ^\r\n/__w/1/s/src/pal/src/exception/remote-unwind.cpp:976:9: note: to match this '('\r\n        TRACE(\"ELF: phdr %p type %d (%x) vaddr %\" PRIxA \" memsz %\" PRIxA \" paddr %\" PRIxA \" filesz %\" PRIxA \" offset %\" PRIxA \" align %\" PRIxA \"\\n\",\r\n        ^\r\n/__w/1/s/src/pal/src/include/pal/dbgmsg.h:269:5: note: expanded from macro 'TRACE'\r\n    DBG_PRINTF(DLI_TRACE,defdbgchan,TRUE)\r\n    ^\r\n/__w/1/s/src/pal/src/include/pal/dbgmsg.h:325:9: note: expanded from macro 'DBG_PRINTF'\r\n        DBG_PRINTF2\r\n        ^\r\n/__w/1/s/src/pal/src/include/pal/dbgmsg.h:328:17: note: expanded from macro 'DBG_PRINTF2'\r\n      DBG_printf(__chanid,__levid,__bHeader,__FUNCTION__,__FILE__,__LINE__,__VA_ARGS__);\\\r\n                ^\r\n1 error generated.\r\n```\r\n\r\n@mikem8361 ","Url":"https://github.com/dotnet/coreclr/issues/25990","RelatedDescription":"Closed issue \"[Linux_rhel6 x64 ] Build product failure after #25909\" (#25990)"},{"Id":"476382803","IsPullRequest":true,"CreatedAt":"2019-08-02T22:56:37","Actor":"mikem8361","Number":"25992","RawContent":null,"Title":"Fix build break","State":"closed","Body":"Issue: https://github.com/dotnet/coreclr/issues/25990","Url":"https://github.com/dotnet/coreclr/pull/25992","RelatedDescription":"Closed or merged PR \"Fix build break\" (#25992)"},{"Id":"475884262","IsPullRequest":true,"CreatedAt":"2019-08-02T20:56:50","Actor":"sandreenko","Number":"25975","RawContent":null,"Title":"Fix telemetry for formatting jobs failures.","State":"closed","Body":"[The dashboard ](https://dev.azure.com/dnceng/public/_dashboards/dashboard/40ac4990-3498-4b3a-85dd-2ffde961d672 ) shows many failures in formatting tasks and these failures are now categorized as unknown failures.\r\n[Log example.](https://dev.azure.com/dnceng/9ee6d478-d288-47f7-aacc-f6e6d082ae6d/_apis/build/builds/270766/logs/186)\r\n\r\nThis PR:\r\n1. adds additional reporting to the format script, so we add the right telemetry record. Once the double reporting is fixed, it will clean our unknown bucket from formatting errors.","Url":"https://github.com/dotnet/coreclr/pull/25975","RelatedDescription":"Closed or merged PR \"Fix telemetry for formatting jobs failures.\" (#25975)"},{"Id":"476343419","IsPullRequest":true,"CreatedAt":"2019-08-02T20:26:40","Actor":"lambdageek","Number":"25989","RawContent":null,"Title":"Move AssemblyLoadContext VM-invoked resolve methods to shared","State":"open","Body":"Share between CoreCLR and Mono\r\n\r\nMono began using a copy of these methods with\r\nhttps://github.com/mono/mono/pull/15946","Url":"https://github.com/dotnet/coreclr/pull/25989","RelatedDescription":"Open PR \"Move AssemblyLoadContext VM-invoked resolve methods to shared\" (#25989)"},{"Id":"476306769","IsPullRequest":true,"CreatedAt":"2019-08-02T18:36:20","Actor":"briansull","Number":"25988","RawContent":null,"Title":"Fix Issue 20262 for release/3.0 -  ildasm/ilasm roundtrip - detect and mark the System assemblies","State":"open","Body":"#### Description\r\n\r\nIn order to properly roundtrip the System assemblies using `ildasm/ilasm` the System assembly must be marked with the `.mscorlib` directive.  In the CoreCLR runtimes, the System assembly can be System.Private.CoreLib.dll, System.Runtime.dll or netstandard.dll. \r\nPrior to this fix  `ildasm`  was using a string compare against `mscorlib` to mark the  System assembly. This would cause a failure to round tripping on CoreCLR where a different name is used for the System assembly.\r\nWith this fix we now determine the identity of the System assembly by querying if the Assembly defines the well known type System.Object as that type must be defined by the System assembly.\r\nThis allows us to successfully round trip the System assembly on CoreCLR.\r\nFor ilasm we also now have added System.Private.CoreLib.dll to list of assemblies that are accepted as the base System assembly.\r\n\r\n#### Customer Impact\r\n\r\nThis issue was impacting source build which is using IL as a source for several cases.  \r\nThey have requested that the tools  `ildasm/ilasm`  support round tripping of the various System assemblies on CoreCLR.  These include System.Private.CoreLib.dll, System.Runtime.dll or netstandard.dll. \r\nWith this fix the source build team is no longer blocked.\r\n\r\n#### Regression\r\n\r\nNot a regression.  This has never worked properly on CoreCLR.\r\n\r\n#### Risk\r\n\r\nVery Low - This check fixes defect in the `ildasm` tool and adds System.Private.CoreLib.dll to the set of System assemblies in `ilasm`.\r\n\r\nIssue #20262 \r\n\r\n**Details:**\r\nIn the CoreCLR with reference assemblies and redirection it is more difficult to determine if\r\na particular Assembly is the System assembly, like mscorlib.dll is for the Desktop CLR.\r\nIn the CoreCLR runtimes, the System assembly can be System.Private.CoreLib.dll, System.Runtime.dll\r\nor netstandard.dll and in the future a different Assembly name could be used.\r\nWe now determine the identity of the System assembly by querying if the Assembly defines the\r\nwell known type System.Object as that type must be defined by the System assembly\r\nIf this type is defined then we will output the \".mscorlib\" directive to indicate that this\r\nassembly is the System assembly.","Url":"https://github.com/dotnet/coreclr/pull/25988","RelatedDescription":"Open PR \"Fix Issue 20262 for release/3.0 -  ildasm/ilasm roundtrip - detect and mark the System assemblies\" (#25988)"},{"Id":"476249661","IsPullRequest":true,"CreatedAt":"2019-08-02T15:57:49","Actor":"tannergooding","Number":"25987","RawContent":null,"Title":"Ensure that we check for implicit ivals for single argument intrinsics before the SIMDScalar handling.","State":"open","Body":"### Description\r\n\r\nCertain intrinsic functions which took one argument, had an implicit immediate value , and were marked as `SIMDScalar` were not being handled correctly in codegen.\r\n\r\n### Customer Impact\r\n\r\nCustomers using functions qualifying under the above conditions would get invalid results in their program.\r\n\r\n### Regression?\r\n\r\nYes, as per the description.\r\n\r\n### Risk\r\n\r\nLow. This just reorders the branch statements and the list of intrinsics that are impacted is small and well-defined: there are 102 intrinsics marked `SIMDScalar` and only 7 of them have both an implicit immediate value and take one argument.","Url":"https://github.com/dotnet/coreclr/pull/25987","RelatedDescription":"Open PR \"Ensure that we check for implicit ivals for single argument intrinsics before the SIMDScalar handling.\" (#25987)"},{"Id":"476194283","IsPullRequest":true,"CreatedAt":"2019-08-02T13:59:30","Actor":"PeterSolMS","Number":"25986","RawContent":null,"Title":"Card mark steal","State":"open","Body":"Implement card marking stealing for better work balance in Server GC.\r\n\r\nOne of the last stages in the mark_phase is to mark objects referenced from older generations. This stage is often slow compared to the other stages, and it is also often somewhat unbalanced, i.e. some GC threads finish their work significantly sooner than others. The change also applies to the relocate_phase, but that phase usually takes significantly less time.\r\n\r\nThis change implements thread-safe enumeration of older generations by dividing them into chunks (256 kB in 64-bits, 128 kB in 32-bits), and arranges it so threads finishing work early will help on other heaps. Each thread grabs a chunk and then looks through the card table section corresponding to this chunk. When it's done with a chunk, it grabs the next one and so on.\r\n\r\nThere are changes at multiple levels:\r\n- at the top level, mark_phase and relocate_phase contain changes to check for work already done for both the heap associated with the thread and other heaps.\r\n- these routines call mark_through_cards_for_segments and mark_through_cards_for_large_objects which contain code to walk through the older generations in chunks.\r\n- ultimately card_marking_enumerator::move_next implements the thread safe enumeration, supplying chunks, and gc_heap::find_next_chunk supplies a chunk where all card bits are set.\r\n","Url":"https://github.com/dotnet/coreclr/pull/25986","RelatedDescription":"Open PR \"Card mark steal\" (#25986)"},{"Id":"476114235","IsPullRequest":false,"CreatedAt":"2019-08-02T10:42:03","Actor":"EgorBo","Number":"25985","RawContent":null,"Title":"JIT Optimization: Replace a bunch of cmp with a single shr","State":"closed","Body":"```csharp\r\nbool IsReservedCharacter(char character)\r\n{\r\n    return (character == ';')\r\n        || (character == '/')\r\n        || (character == ':')\r\n        || (character == '@')\r\n        || (character == '&')\r\n        || (character == '=')\r\n        || (character == '+')\r\n        || (character == '$')\r\n        || (character == ',');\r\n}\r\n```\r\nCurrently generates:\r\n```asm\r\n; Method ConsoleApp176.Program:IsReservedCharacter1(ushort):bool\r\nG_M56726_IG01:\r\n       nop      \r\n\r\nG_M56726_IG02:\r\n       movzx    rax, cx\r\n       cmp      eax, 59\r\n       je       SHORT G_M56726_IG04\r\n       cmp      eax, 47\r\n       je       SHORT G_M56726_IG04\r\n       cmp      eax, 58\r\n       je       SHORT G_M56726_IG04\r\n       cmp      eax, 64\r\n       je       SHORT G_M56726_IG04\r\n       cmp      eax, 38\r\n       je       SHORT G_M56726_IG04\r\n       cmp      eax, 61\r\n       je       SHORT G_M56726_IG04\r\n       cmp      eax, 43\r\n       je       SHORT G_M56726_IG04\r\n       cmp      eax, 36\r\n       je       SHORT G_M56726_IG04\r\n       cmp      eax, 44\r\n       sete     al\r\n       movzx    rax, al\r\n\r\nG_M56726_IG03:\r\n       ret      \r\n\r\nG_M56726_IG04:\r\n       mov      eax, 1\r\n\r\nG_M56726_IG05:\r\n       ret      \r\n; Total bytes of code: 64\r\n```\r\nLLVM (Clang/Mono-LLVM) generates:\r\n```asm\r\n; IsReservedCharacter(unsigned short):\r\n        add edi, -36\r\n        cmp di, 28\r\n        ja .LBB0_2\r\n        mov eax, 314575237\r\n        shrx eax, eax, edi ; or shr if shrx is not available\r\n        and al, 1\r\n        ret\r\n.LBB0_2:\r\n        xor eax, eax\r\n        ret\r\n```\r\n\r\nSo if values are close to each other it's possible to calculate a special bit-map (`314575237` in this case) and apply a shift to find out whether `c` is one of the chars or not (or, in some cases, even a jump table). Btw, LLVM's opt converts it to a switch and then DAG calculates the bitmap and insert the shift op.\r\n\r\nThere are really a lot of affected places in CoreFX, especially around URL parsing, examples:\r\n[Uri.cs:L550](https://github.com/dotnet/corefx/blob/954b1fdab8e98060cce3d0d88a34c3b0587a6acb/src/System.Private.Uri/src/System/Uri.cs#L550)\r\n[Uri.cs:L5555](https://github.com/dotnet/corefx/blob/954b1fdab8e98060cce3d0d88a34c3b0587a6acb/src/System.Private.Uri/src/System/Uri.cs#L5555)\r\n[Uri.cs:L5587](https://github.com/dotnet/corefx/blob/954b1fdab8e98060cce3d0d88a34c3b0587a6acb/src/System.Private.Uri/src/System/Uri.cs#L5587)\r\n[Uri.cs:L5626](https://github.com/dotnet/corefx/blob/954b1fdab8e98060cce3d0d88a34c3b0587a6acb/src/System.Private.Uri/src/System/Uri.cs#L5626)\r\n[Convert.cs:L2776](https://github.com/dotnet/corefx/blob/954b1fdab8e98060cce3d0d88a34c3b0587a6acb/src/Common/src/CoreLib/System/Convert.cs#L2776)\r\n[IPv4AddressHelper.Common.cs:L128](https://github.com/dotnet/corefx/blob/954b1fdab8e98060cce3d0d88a34c3b0587a6acb/src/Common/src/System/Net/IPv4AddressHelper.Common.cs#L128)","Url":"https://github.com/dotnet/coreclr/issues/25985","RelatedDescription":"Closed issue \"JIT Optimization: Replace a bunch of cmp with a single shr\" (#25985)"},{"Id":"476010989","IsPullRequest":true,"CreatedAt":"2019-08-02T06:42:54","Actor":"Dotnet-GitSync-Bot","Number":"25984","RawContent":null,"Title":"Mirror changes from dotnet/corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/coreclr/pull/25984","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx\" (#25984)"},{"Id":"475984774","IsPullRequest":false,"CreatedAt":"2019-08-02T03:57:26","Actor":"guodf","Number":"25983","RawContent":null,"Title":"Hopefully .net core supports all cpu architectures","State":"open","Body":"C#本来是一门优秀的语言，绝对有可能一统江湖，结果一手好牌被打的稀巴烂。\r\n以前因为不开源，处处受到限制，现在因为生态，处处受到限制，未来因为平台，依然会处处受到限制。\r\n从.net到.net core,从.net core到.net 5,我想说你们真的很闲，虽然统一.net这一步意义重大，但是当下环境可能并不是最重要的。\r\n最让人感觉垃圾的地方在于，不停的优化asp.net core，ef core，以及性能上的优化，我想问这些真的很重要吗？难道社区就不能出来做这些吧，好吧，我承认.net社区真的很烂，但是能怪谁呢！.net做的越多，社区做的就越少，可能最后都懒得做了，拿现成的用好了。\r\n尤其是.net在中国的市场，一步步被瓜分，不知道我软是否考虑过原因。\r\n.net core我们已经给了你5年的时间了，结果你也看见了，如果你以为这是绝地重生，我只能说哈哈~~你赢了。\r\n在中国这个市场，不是你想怎么做就怎么做的，如果你跟着政府的步伐走一定会走的很好。\r\n最后，从目前.net/.net core的市场情况来看，优化.net性能并不重要，现在的性能我们可以接收，ef core，asp.net core好不好用我们不在乎，能用就行，我们最关注的是你的可能性，可以在各种cpu架构下运行，支持所有国产操作系统（即使这些系统再垃圾），起码中国的市场还有一部分人愿意守护，维护你。\r\n\r\nIt would have been an excellent language, it is absolutely possible to unify the river and lake, the result of a good card was beaten with a thin bar.\r\nPreviously because not open source, everywhere is restricted, now because of ecology, everywhere is restricted, the future because of the platform, will still be restricted everywhere.\r\nFrom .net to .net core, from .net core to .net 5, I'd like to say that you're really idle, and while the step of unifying .net is significant, the environment may not be the most important.\r\nWhat makes people feel most trashy is that it's really important to keep optimizing asp.net core, ef core, and performance optimization. Can't the community come out and do this, well, I admit, the .net community is really bad, but who can blame it! .net do more, the less the community does, and may end up too lazy to do it, get ready-made.\r\nEspecially in the Chinese market.net, step by step is divided, do not know whether I soft whether to consider the reason.\r\n.net core we have given you 5 years, the result you also see, if you think this is the Rebirth of the Jedi, I can only say haha - you won.\r\nIn This market in China, it's not what you want to do, and if you follow the pace of the government, you'll definitely go well.\r\nFinally, from the current market situation of .net/ .net core, optimization of .net performance is not important, now the performance we can receive, ef core, asp.net core good use we do not care, can use on the line, we are most concerned about your possibility, Can run under a variety of cpu architecture, support all domestic operating systems (even if these systems are garbage), at least china's market there is still some people willing to guard, maintain you.","Url":"https://github.com/dotnet/coreclr/issues/25983","RelatedDescription":"Open issue \"Hopefully .net core supports all cpu architectures\" (#25983)"},{"Id":"475914494","IsPullRequest":true,"CreatedAt":"2019-08-02T00:11:00","Actor":"Dotnet-GitSync-Bot","Number":"25979","RawContent":null,"Title":"Mirror changes from dotnet/corert,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/corert,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/coreclr/pull/25979","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corert,corefx\" (#25979)"},{"Id":"475936910","IsPullRequest":true,"CreatedAt":"2019-08-01T23:55:14","Actor":"jkoritzinsky","Number":"25981","RawContent":null,"Title":"Delegate marshaling test refresh.","State":"open","Body":"Clean up and coalese delegate tests. Separate the native side of the \"delegate as IDispatch\" tests to a separate C++ file that is conditionally compiled in on Windows.","Url":"https://github.com/dotnet/coreclr/pull/25981","RelatedDescription":"Open PR \"Delegate marshaling test refresh.\" (#25981)"},{"Id":"475931949","IsPullRequest":true,"CreatedAt":"2019-08-01T23:32:14","Actor":"janvorli","Number":"25980","RawContent":null,"Title":"Port #25972 to 3.0 - Fix WSL alternate stack check","State":"open","Body":"#### Description\r\nOn WSL, the alternate stack check in sigsegv_handler doesn't work. The\r\nuc_stack members are always zero no matter whether the handler is\r\nexecuted on an alternate or default stack. So the check to detect\r\nwhether we are running on an alternate stack or not is always returning\r\nfalse on WSL and it prevents NULL reference exceptions from being\r\nhandled.\r\nThe fix is to introduce an env variable COMPlus_EnableAlternateStackCheck\r\nthat can be used to enable the alternate stack check. By default, the\r\nsigsegv_handler is considered to always run on an alternate stack.\r\n#### Customer Impact\r\n.NET Core applications running on the WSL (Windows subsystem for Linux)\r\ncrash whenever a null reference happens instead of converting that into\r\nNullReferenceException.\r\n#### Regression\r\nYes, regression on WSL in preview 7 \r\n#### Risk\r\nNone - default behavior reverts to the previous state that was there since release/2.0. \r\nThe COMPlus_EnableAlternateStackCheck can be used to explicitly enable the new\r\nbehavior that was added in preview 7 on non-WSL systems when needed.\r\nThe need for that is very rare and specific to applications that use third party native \r\nlibraries that register their own SIGSEGV handlers.\r\n\r\nIssue #25945","Url":"https://github.com/dotnet/coreclr/pull/25980","RelatedDescription":"Open PR \"Port #25972 to 3.0 - Fix WSL alternate stack check\" (#25980)"},{"Id":"475949168","IsPullRequest":false,"CreatedAt":"2019-08-01T23:19:10","Actor":"davidmikh","Number":"25982","RawContent":null,"Title":".NET Core apps emitting bad ETW events through DotNetRuntime provider","State":"open","Body":"Steps to repro:\r\n\r\n1) Create a .NET Core console app\r\n2) Add some basic code so there's some activity to profile (I used the following to repro this issue)\r\n\r\n        static void Main(string[] args)\r\n        {\r\n            Stopwatch watch = new Stopwatch();\r\n            watch.Start();\r\n            while(true)\r\n            {\r\n                System.Console.WriteLine(\"CONTINUE WRITING LINES\");\r\n                if (watch.ElapsedMilliseconds > 5000)\r\n                {\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n\r\n3) Build the application\r\n4) Profile the application's exe using perfview (Collect -> Run), the only provider you need to enable is `Microsoft-Windows-DotNETRuntime::Verbose`\r\n\r\n![image](https://user-images.githubusercontent.com/12531222/62333223-75aeab00-b477-11e9-8e04-32bc5e40f009.png)\r\n\r\n5) Open the events view of the generated ETL file\r\n6) Open the event type `Microsoft-Windows-DotNETRuntime/Method/ILToNativeMap`\r\n\r\nPerfview is unable to load any events for `Microsoft-Windows-DotNETRuntime/Method/ILToNativeMap`\r\n\r\nThis was done using .NET Core 3.0.100-preview8-013437","Url":"https://github.com/dotnet/coreclr/issues/25982","RelatedDescription":"Open issue \".NET Core apps emitting bad ETW events through DotNetRuntime provider\" (#25982)"},{"Id":"475875447","IsPullRequest":false,"CreatedAt":"2019-08-01T22:34:39","Actor":"jkoritzinsky","Number":"25974","RawContent":null,"Title":"Structure containing a single decimal field passed by-value incorrectly marshaled on Unix x64","State":"closed","Body":"Given a structure `struct A { decimal d;};`, we incorrectly classify this field's native representation as non-engregisterable. However, it is enregisterable on SystemV. As a result, we place it on the stack, but the native code expects it to be in registers.\r\n\r\nThis currently blocks merging #25955.\r\n\r\ncc: @AaronRobinsonMSFT \r\n","Url":"https://github.com/dotnet/coreclr/issues/25974","RelatedDescription":"Closed issue \"Structure containing a single decimal field passed by-value incorrectly marshaled on Unix x64\" (#25974)"},{"Id":"475908042","IsPullRequest":true,"CreatedAt":"2019-08-01T22:01:07","Actor":"sywhang","Number":"25978","RawContent":null,"Title":"[3.0 port] Make counters use dedicated thread for polling","State":"open","Body":"Port https://github.com/dotnet/coreclr/pull/25864 to 3.0. \r\n\r\nIssue: https://github.com/dotnet/coreclr/issues/25071\r\nCode Reviewer: Noah Falk\r\n\r\n#### Description\r\nAs of now, PollingCounter and IncrementingPollingCounter uses a Timer thread to poll/report values. This PR changes that to use a dedicated thread for polling the values.\r\n\r\n#### Customer Impact\r\nCounters are used for quickly diagnosing any performance issues in an app. If the app is experiencing threadpool starvation, users would want to look at counter values. But because of threadpool starvation, any PollingCounter/IncrementingPollingCounter (which includes counters for threadpool queue length, etc. inside the runtime) does not get scheduled due to threadpool starvation, and users cannot diagnose their issue.\r\n\r\n#### Regression?\r\nThis is not a regression in 3.0 since EventCounter always used a Timer thread for reporting payload per requested interval. \r\n\r\n#### Risk\r\nRan the app through tests I have for dotnet-counters, and also did a long-running test (>12 hours) using this change. I believe the risk is minimal.\r\n\r\ncc @noahfalk @tommcdon","Url":"https://github.com/dotnet/coreclr/pull/25978","RelatedDescription":"Open PR \"[3.0 port] Make counters use dedicated thread for polling\" (#25978)"},{"Id":"475904890","IsPullRequest":true,"CreatedAt":"2019-08-01T21:50:54","Actor":"elinor-fung","Number":"25977","RawContent":null,"Title":"Propagate errors during build to the Azure DevOps timeline","State":"open","Body":"Propagate errors during build to the Azure DevOps timeline\r\n- Use Arcade's msbuild script for building managed product and test projects. They include a logger when running under CI that outputs msbuild errors such that they appear in the timeline (and thus will be picked up by our telemetry)\r\n- Prefix error messages to make them logging commands when running as an Azure DevOps task\r\n\r\nThis makes it so that the actual build/restore errors from managed projects will show up as errors in CI builds (and get classified as Code failures in telemetry). For native projects, the actual build errors are still not propagated, but we will at least have an error indicating that we failed to build the native components (instead of just Bash/Cmd exited with code 1). I also did not try to categorize our error messages - just made them propagate as errors instead of normal output.","Url":"https://github.com/dotnet/coreclr/pull/25977","RelatedDescription":"Open PR \"Propagate errors during build to the Azure DevOps timeline\" (#25977)"},{"Id":"475888738","IsPullRequest":true,"CreatedAt":"2019-08-01T21:04:51","Actor":"sywhang","Number":"25976","RawContent":null,"Title":"Clean up diagnosticserver socket on unexpected shutdown","State":"open","Body":"Fixes #25968 ","Url":"https://github.com/dotnet/coreclr/pull/25976","RelatedDescription":"Open PR \"Clean up diagnosticserver socket on unexpected shutdown\" (#25976)"}],"ResultType":"GitHubIssue"},"CLI-Issues":{"Issues":[{"Id":"475935554","IsPullRequest":false,"CreatedAt":"2019-08-04T21:21:17","Actor":"mattscheffer","Number":"12116","RawContent":null,"Title":"Global.Microsoft.VisualBasic.MyServices.Internal.ContextValue is not defined in VB .NET core class library projects","State":"closed","Body":"## Steps to reproduce\r\nOpen a command prompt with cli.\r\nCreate a new VB Class Library using .NET Core 3.0:\r\ndotnet new classlib -f netcoreapp3.0 -lang vb -n test1\r\nBuild via: dotnet build\r\n\r\n## Expected  behavior\r\nLibrary builds correctly.\r\n\r\n## Actual behavior\r\nLibrary fails to build with the following error.\r\nvbc : error BC30002: Type 'Global.Microsoft.VisualBasic.MyServices.Internal.ContextValue' is not defined.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview8-013437\r\n Commit:    37fe062a9e\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview8-013437\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview8-28373-17\r\n  Commit:  5d8d5e8661\r\n\r\n.NET Core SDKs installed:\r\n  3.0.100-preview8-013437 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.App 3.0.0-preview8.19374.1 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview8-28373-17 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview8-28373-17 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/12116","RelatedDescription":"Closed issue \"Global.Microsoft.VisualBasic.MyServices.Internal.ContextValue is not defined in VB .NET core class library projects\" (#12116)"},{"Id":"476546570","IsPullRequest":true,"CreatedAt":"2019-08-04T12:54:11","Actor":"dotnet-maestro[bot]","Number":"12138","RawContent":null,"Title":"[master] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190803.1\r\n- **Date Produced**: 8/3/2019 12:49 PM\r\n- **Commit**: ee824bdd8d041c4eb731f000f7dadcf458274f69\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 5.0.0-alpha1.19403.1\r\n\r\n[marker]: <> (End:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12138","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/templating\" (#12138)"},{"Id":"476546470","IsPullRequest":true,"CreatedAt":"2019-08-04T12:51:30","Actor":"dotnet-maestro[bot]","Number":"12137","RawContent":null,"Title":"[master] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190803.1\r\n- **Date Produced**: 8/3/2019 12:49 PM\r\n- **Commit**: ee824bdd8d041c4eb731f000f7dadcf458274f69\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 5.0.0-alpha1.19403.1\r\n\r\n[marker]: <> (End:0be14b38-c39d-4bd1-cee3-08d67668456c)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12137","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/templating\" (#12137)"},{"Id":"476545836","IsPullRequest":true,"CreatedAt":"2019-08-04T12:44:06","Actor":"dotnet-maestro[bot]","Number":"12136","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:433865d5-f754-408e-06ed-08d645e2db8e)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190803.1\r\n- **Date Produced**: 8/3/2019 1:03 PM\r\n- **Commit**: 3b75ef38a33579dcd32f2912ee69e886356b0f18\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19403.1\r\n\r\n[marker]: <> (End:433865d5-f754-408e-06ed-08d645e2db8e)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12136","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#12136)"},{"Id":"476545827","IsPullRequest":true,"CreatedAt":"2019-08-04T12:43:11","Actor":"dotnet-maestro[bot]","Number":"12135","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:433865d5-f754-408e-06ed-08d645e2db8e)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190803.1\r\n- **Date Produced**: 8/3/2019 1:03 PM\r\n- **Commit**: 3b75ef38a33579dcd32f2912ee69e886356b0f18\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19403.1\r\n\r\n[marker]: <> (End:433865d5-f754-408e-06ed-08d645e2db8e)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12135","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#12135)"},{"Id":"476538965","IsPullRequest":false,"CreatedAt":"2019-08-04T10:39:37","Actor":"TFTomSun","Number":"12134","RawContent":null,"Title":"Why does dotnet update reinstall the existing version?","State":"open","Body":"`dotnet update -g MyTool `\r\nseems to reinstall the tool, which takes quite long. In case the version is up to date i get the following output:\r\n\r\n> 'MyTool' was reinstalled with the latest stable version (version '1.0.1564914607')\r\n\r\n\r\n What I wish is just an check for a newer version, and install it if available. Is there any undocumented flag to achieve that?\r\n\r\nWhy do I need that? I distribute workflows (e.g. Build pipelines) via global tools. And provide shell scripts for the workflows. So whenever the shell script is executed it shall run with the latest global tool behind, but in the same time the shell script should start as fast as possible. Thats why the reinstallation of the tools when they are already up to date is a bit annoying.\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/12134","RelatedDescription":"Open issue \"Why does dotnet update reinstall the existing version?\" (#12134)"},{"Id":"476512417","IsPullRequest":true,"CreatedAt":"2019-08-04T04:35:45","Actor":"dotnet-maestro[bot]","Number":"12133","RawContent":null,"Title":"[master] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190803.6\r\n- **Date Produced**: 8/4/2019 4:04 AM\r\n- **Commit**: b6f1a505833b552e425a8833f0b4bf9ca0c2e84a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 5.0.0-alpha1.19403.6\r\n\r\n[marker]: <> (End:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12133","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from aspnet/AspNetCore\" (#12133)"},{"Id":"476507088","IsPullRequest":true,"CreatedAt":"2019-08-04T02:51:11","Actor":"dotnet-maestro[bot]","Number":"12132","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190803.5\r\n- **Date Produced**: 8/4/2019 2:20 AM\r\n- **Commit**: 9f2b53443625493d425e3f8235567f2541098d33\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview9.19403.5\r\n\r\n[marker]: <> (End:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12132","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore\" (#12132)"},{"Id":"476495110","IsPullRequest":true,"CreatedAt":"2019-08-03T23:01:48","Actor":"dotnet-maestro[bot]","Number":"12131","RawContent":null,"Title":"[master] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190803.4\r\n- **Date Produced**: 8/3/2019 10:30 PM\r\n- **Commit**: 3148acfb105a16aa6c535d00eb0e50ec03992f3f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 5.0.0-alpha1.19403.4\r\n\r\n[marker]: <> (End:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12131","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from aspnet/AspNetCore\" (#12131)"},{"Id":"476467326","IsPullRequest":true,"CreatedAt":"2019-08-03T17:03:17","Actor":"dotnet-maestro[bot]","Number":"12130","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190803.2\r\n- **Date Produced**: 8/3/2019 4:27 PM\r\n- **Commit**: a69555ad965be37858738ec9fccd4a1df87800b2\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview9.19403.2\r\n\r\n[marker]: <> (End:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12130","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore\" (#12130)"},{"Id":"476451026","IsPullRequest":false,"CreatedAt":"2019-08-03T13:17:39","Actor":"TFTomSun","Number":"12129","RawContent":null,"Title":"CLI option to Build with full .NET Framework MSBuild","State":"open","Body":"I'm currently trying to build a net472 application that has a ComReference. ComReferences are not yet support by the msbuild that is integrated in the dotnet core sdk.\r\n\r\nI would like to propose a feature that allows us to use the dotnet cli to spawn a full .net framework MSBuild process. Something like\r\n\r\n> dotnet msbuild-net /t:Publish ....\r\n\r\nI think it wouldn't be a big issue to implement this. But it would help the developers to prepare everything for the future. Currently I would now have to find a why to get the path to the full msbuild.exe. Btw. is there a easy way to determine the latest msbuild.exe on a machine (e.g. via envrionment variable?\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/12129","RelatedDescription":"Open issue \"CLI option to Build with full .NET Framework MSBuild\" (#12129)"},{"Id":"476445467","IsPullRequest":true,"CreatedAt":"2019-08-03T12:39:23","Actor":"dotnet-maestro[bot]","Number":"12127","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:433865d5-f754-408e-06ed-08d645e2db8e)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190802.16\r\n- **Date Produced**: 8/3/2019 12:35 AM\r\n- **Commit**: d8457f6ba527aef165ff6fb0aded44bf8123ce83\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19402.16\r\n\r\n[marker]: <> (End:433865d5-f754-408e-06ed-08d645e2db8e)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12127","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#12127)"},{"Id":"476445511","IsPullRequest":true,"CreatedAt":"2019-08-03T12:39:00","Actor":"dotnet-maestro[bot]","Number":"12128","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:433865d5-f754-408e-06ed-08d645e2db8e)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190802.16\r\n- **Date Produced**: 8/3/2019 12:35 AM\r\n- **Commit**: d8457f6ba527aef165ff6fb0aded44bf8123ce83\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19402.16\r\n\r\n[marker]: <> (End:433865d5-f754-408e-06ed-08d645e2db8e)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12128","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#12128)"},{"Id":"476424642","IsPullRequest":true,"CreatedAt":"2019-08-03T07:52:21","Actor":"dotnet-maestro[bot]","Number":"12126","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190802.9\r\n- **Date Produced**: 8/3/2019 7:16 AM\r\n- **Commit**: 7b6654d164037368a2d6b2bede3d6d52f22bc893\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview9.19402.9\r\n\r\n[marker]: <> (End:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12126","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore\" (#12126)"},{"Id":"476417973","IsPullRequest":true,"CreatedAt":"2019-08-03T06:04:07","Actor":"dotnet-maestro[bot]","Number":"12125","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190802.8\r\n- **Date Produced**: 8/3/2019 5:28 AM\r\n- **Commit**: cd613fe7032fd598080c043c143c91fe48ed7f2d\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview9.19402.8\r\n\r\n[marker]: <> (End:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12125","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore\" (#12125)"},{"Id":"476366913","IsPullRequest":true,"CreatedAt":"2019-08-02T22:20:03","Actor":"dotnet-maestro[bot]","Number":"12123","RawContent":null,"Title":"[master] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190802.5\r\n- **Date Produced**: 8/2/2019 9:44 PM\r\n- **Commit**: 698a343128142e39ad02e6e389c554872df97678\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 5.0.0-alpha1.19402.5\r\n\r\n[marker]: <> (End:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12123","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from aspnet/AspNetCore\" (#12123)"},{"Id":"476367914","IsPullRequest":false,"CreatedAt":"2019-08-02T21:48:27","Actor":"elvisFabian","Number":"12124","RawContent":null,"Title":"dotnet test LogFileName break change in 2.2.300","State":"open","Body":"The last docker image `mcr.microsoft.com/dotnet/core/sdk:2.2` upgrade **DOTNET_SDK_VERSION** to **2.2.300**\r\n\r\n\r\n## Steps to reproduce\r\n- Create multiples test projects\r\n- run: `dotnet test --logger \"trx;LogFileName=TestResults.trx\"`\r\n\r\n## Expected  behavior\r\nCreate a unique file name per test project \r\n\r\n## Actual behavior\r\n\r\n**Using DOTNET_SDK_VERSION=2.2.202**\r\n```\r\nResults File: TestResults_2019-08-02_17-34-32-725.trx\r\nResults File: TestResults_2019-08-02_17-34-36-381.trx\r\nResults File: TestResults_2019-08-02_17-34-39-323.trx\r\n```\r\n\r\n**Using DOTNET_SDK_VERSION=2.2.300**\r\n```\r\nWARNING: Overwriting results file: TestResults.trx\r\nresult/TestResults.trx\r\n\r\nWARNING: Overwriting results file: TestResults.trx\r\nResults File: TestResults.trx\r\n\r\nWARNING: Overwriting results file: TestResults.trx\r\nResults File: TestResults.trx\r\n```\r\n\r\n## Workaround\r\nFix the tag of docker image to `FROM mcr.microsoft.com/dotnet/core/sdk:2.2.200`\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/12124","RelatedDescription":"Open issue \"dotnet test LogFileName break change in 2.2.300\" (#12124)"},{"Id":"476359226","IsPullRequest":true,"CreatedAt":"2019-08-02T21:47:20","Actor":"dotnet-maestro[bot]","Number":"12122","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190802.4\r\n- **Date Produced**: 8/2/2019 9:16 PM\r\n- **Commit**: c15f1e145f23188f743d335c4bc5acc8b24bf9f2\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview9.19402.4\r\n\r\n[marker]: <> (End:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12122","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore\" (#12122)"},{"Id":"476319260","IsPullRequest":true,"CreatedAt":"2019-08-02T19:42:55","Actor":"dotnet-maestro[bot]","Number":"12121","RawContent":null,"Title":"[master] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190802.2\r\n- **Date Produced**: 8/2/2019 7:12 PM\r\n- **Commit**: 27996712afc8f0cbc20142eb47ce497d198c2b78\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 5.0.0-alpha1.19402.2\r\n\r\n[marker]: <> (End:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12121","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from aspnet/AspNetCore\" (#12121)"},{"Id":"476147164","IsPullRequest":true,"CreatedAt":"2019-08-02T12:42:28","Actor":"dotnet-maestro[bot]","Number":"12120","RawContent":null,"Title":"[master] Update dependencies from dotnet/sdk","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:145b81c3-fdcc-4cb6-70fa-08d645e3a44f)\r\n## From https://github.com/dotnet/sdk\r\n- **Build**: 20190801.1\r\n- **Date Produced**: 8/1/2019 3:46 PM\r\n- **Commit**: b23fd25e1070aa8075b66f9d208835fa67af3dbb\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk** -> 5.0.100-alpha1.19401.1\r\n\r\n[marker]: <> (End:145b81c3-fdcc-4cb6-70fa-08d645e3a44f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12120","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/sdk\" (#12120)"},{"Id":"476146983","IsPullRequest":true,"CreatedAt":"2019-08-02T12:41:58","Actor":"dotnet-maestro[bot]","Number":"12119","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:433865d5-f754-408e-06ed-08d645e2db8e)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190801.23\r\n- **Date Produced**: 8/2/2019 6:58 AM\r\n- **Commit**: 941d6497356e00ea6b2bc35a22a67f4ecf988fd6\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19401.23\r\n\r\n[marker]: <> (End:433865d5-f754-408e-06ed-08d645e2db8e)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12119","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#12119)"},{"Id":"476034253","IsPullRequest":true,"CreatedAt":"2019-08-02T07:52:08","Actor":"dotnet-maestro[bot]","Number":"12118","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190801.10\r\n- **Date Produced**: 8/2/2019 7:16 AM\r\n- **Commit**: 8dd1be947460e9627c161caf581035a9c9ef5d4a\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview9.19401.10\r\n\r\n[marker]: <> (End:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12118","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore\" (#12118)"},{"Id":"475968688","IsPullRequest":true,"CreatedAt":"2019-08-02T03:11:37","Actor":"dotnet-maestro[bot]","Number":"12117","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190801.8\r\n- **Date Produced**: 8/2/2019 2:35 AM\r\n- **Commit**: 9b888e9df509fa311f7d745fe49776efe8099417\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview9.19401.8\r\n\r\n[marker]: <> (End:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12117","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore\" (#12117)"},{"Id":"475927195","IsPullRequest":false,"CreatedAt":"2019-08-01T23:30:46","Actor":"kjpou1","Number":"12115","RawContent":null,"Title":"Failure: System.NotImplementedException SDK 2.1.801","State":"closed","Body":"We ran into a possible regression in the mono CI after moving to 2.1.801.  PR in the mono repo can be seen here that fixed the problem: [PR 15844](https://github.com/mono/mono/pull/15844)\r\n\r\nThis code has been compiling for a while.\r\n\r\nA small repro is below.\r\n\r\n**Version Used**: \r\n\r\nMac\r\n\r\n```\r\ndotnet --list-sdks\r\n2.1.801 [/usr/local/share/dotnet/sdk]\r\n```\r\n\r\n```\r\ndotnet --list-runtimes\r\nMicrosoft.AspNetCore.All 2.1.12 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]\r\nMicrosoft.AspNetCore.App 2.1.12 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]\r\nMicrosoft.NETCore.App 2.1.12 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]\r\n```\r\n\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. Create a new netstandard2.0 library - `dotnet new classlib`\r\n2. Replace with the following code:\r\n\r\n```\r\nusing System;\r\nusing System.Runtime.InteropServices;\r\nusing System.Threading.Tasks;\r\nnamespace sdk_issue {\r\n    public class Class1    {\r\n        public Class1 ()   {\r\n            DoSomething();\r\n        }\r\n        public static async void DoSomething() {\r\n            Foo.From(await ReadAsByteArrayAsync());\r\n        }\r\n        public static Task<byte[]> ReadAsByteArrayAsync()  {\r\n            return null;\r\n        }\r\n    }\r\n    public sealed class Foo : TypedFoo<Foo, byte>  {    }\r\n    public abstract class TypedFoo<T, U>  where U : struct {\r\n\t        public unsafe static T From (ReadOnlySpan<U> span)\t{\r\n\t\t\tvar bytes = MemoryMarshal.AsBytes (span);\r\n\t\t\tfixed (byte* ptr = bytes) {\r\n\t\t\t\treturn default(T);\r\n\t\t\t}\r\n\t\t}\r\n    }\r\n}\r\n\r\n```\r\n\r\n3.  Add a reference to `System.Memory` to the project\r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netstandard2.0</TargetFramework>\r\n    <RootNamespace>sdk_issue</RootNamespace>\r\n    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Memory\" Version=\"4.5.2\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\n4. Execute `dotnet build`\r\n\r\n**Expected Behavior**:\r\n\r\nSuccessful build\r\n\r\n\r\n**Actual Behavior**:\r\n\r\nThe following is output:\r\n\r\n```\r\n/usr/local/share/dotnet/sdk/2.1.801/Roslyn/Microsoft.CSharp.Core.targets(59,5): error : FailFast: [/Users/Jimmy/websharp/projects/sdk-issue/sdk-issue.csproj]\r\n/usr/local/share/dotnet/sdk/2.1.801/Roslyn/Microsoft.CSharp.Core.targets(59,5): error : System.NotImplementedException: The method or operation is not implemented. [/Users/Jimmy/websharp/projects/sdk-issue/sdk-issue.csproj]\r\n```\r\n\r\nThe full log is attache below:\r\n\r\n[issue-text.txt](https://github.com/dotnet/roslyn/files/3435858/issue-text.txt)\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/12115","RelatedDescription":"Closed issue \"Failure: System.NotImplementedException SDK 2.1.801\" (#12115)"},{"Id":"475888870","IsPullRequest":true,"CreatedAt":"2019-08-01T21:05:12","Actor":"dotnet-maestro[bot]","Number":"12114","RawContent":null,"Title":"[release/3.0.100-preview8] Update dependencies from aspnet/AspNetCore","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:3cd0c0b2-118b-4b45-565e-08d7114adc5e)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190801.5\r\n- **Date Produced**: 8/1/2019 9:04 PM\r\n- **Commit**: 9459b7397243066134ace483c4083f1c83c2b093\r\n- **Branch**: refs/heads/release/3.0-preview8\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview8.19401.5\r\n\r\n[marker]: <> (End:3cd0c0b2-118b-4b45-565e-08d7114adc5e)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12114","RelatedDescription":"Open PR \"[release/3.0.100-preview8] Update dependencies from aspnet/AspNetCore\" (#12114)"},{"Id":"475836734","IsPullRequest":true,"CreatedAt":"2019-08-01T19:29:07","Actor":"dotnet-maestro[bot]","Number":"12113","RawContent":null,"Title":"[master] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190801.3\r\n- **Date Produced**: 8/1/2019 6:53 PM\r\n- **Commit**: 8d46b3a64ea784c95dddeb9d421c7cda6de993a2\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 5.0.0-alpha1.19401.3\r\n\r\n[marker]: <> (End:2ccdb5a8-3feb-4e97-d36a-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12113","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from aspnet/AspNetCore\" (#12113)"},{"Id":"475822632","IsPullRequest":true,"CreatedAt":"2019-08-01T19:09:16","Actor":"dotnet-maestro[bot]","Number":"12112","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190801.2\r\n- **Date Produced**: 8/1/2019 6:18 PM\r\n- **Commit**: 45f50905d5843d12a0def6de73bd70661e1ee0cb\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview9.19401.2\r\n\r\n[marker]: <> (End:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12112","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore\" (#12112)"},{"Id":"475777608","IsPullRequest":true,"CreatedAt":"2019-08-01T17:08:36","Actor":"dotnet-maestro[bot]","Number":"12111","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n## From https://github.com/aspnet/AspNetCore\r\n- **Build**: 20190801.1\r\n- **Date Produced**: 8/1/2019 4:25 PM\r\n- **Commit**: 97489dc50d8fd5f31e525f261791f05fb555133f\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.AspNetCore.DeveloperCertificates.XPlat** -> 3.0.0-preview9.19401.1\r\n\r\n[marker]: <> (End:d54a5172-b4ce-4f86-d36b-08d6f038a15f)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12111","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from aspnet/AspNetCore\" (#12111)"},{"Id":"475738354","IsPullRequest":false,"CreatedAt":"2019-08-01T15:09:19","Actor":"nguerrera","Number":"12110","RawContent":null,"Title":"SDK resolver does not work with snap installations of SDK on Linux","State":"open","Body":"See https://github.com/OmniSharp/omnisharp-vscode/issues/3160\r\n\r\nWhen installed via snap:\r\n\r\n```\r\nsudo snap install dotnet-sdk --beta --classic\r\nsudo snap alias dotnet-sdk.dotnet dotnet\r\n```\r\n\r\nThen `dotnet` on PATH resolves to a realpath of /usr/bin/snap and not to a dotnet executable next to the sdk foler.\r\n\r\nThis breaks an assumption of the resolver that we can use realpath on dotnet on PATH to find the SDK.\r\n\r\nWe could maybe implement something like the much slower option of shelling out to dotnet --info as msbuildlocator and legacy omnisharp do. Or we would need a way to resolve to the real directory somehow. I am not sure if snap gives us this ability. Is there a way to query snap to know if there is a dotnet-sdk installed and where can we find it's real directory. Can we do this without forking processes and parsing stdout?\r\n\r\nThe slow path could be a fallback. If there is a dotnet on PATH, but it does not resolve to a realpath with an sdk directory, try running it with --info. This would fix other hypothetical deployments like a dotnet that is a shell script that execs dotnet with custom args or whatever.  It may make sense to keep this as an ultimate fallback even if we find a more efficient way to handle the snap case.\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/cli/issues/12110","RelatedDescription":"Open issue \"SDK resolver does not work with snap installations of SDK on Linux\" (#12110)"},{"Id":"475692599","IsPullRequest":true,"CreatedAt":"2019-08-01T14:20:56","Actor":"dotnet-maestro[bot]","Number":"12109","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/templating","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:d4b89351-e138-4a22-94d9-08d690bc143a)\r\n## From https://github.com/dotnet/templating\r\n- **Build**: 20190801.1\r\n- **Date Produced**: 8/1/2019 12:52 PM\r\n- **Commit**: dc3de384829410500748023c862bab291ab0492d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.TemplateEngine.Cli** -> 5.0.0-alpha1.19401.1\r\n\r\n[marker]: <> (End:d4b89351-e138-4a22-94d9-08d690bc143a)\r\n\r\n","Url":"https://github.com/dotnet/cli/pull/12109","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/templating\" (#12109)"}],"ResultType":"GitHubIssue"},"Standard-Issues":{"Issues":[{"Id":"476550793","IsPullRequest":true,"CreatedAt":"2019-08-04T13:07:29","Actor":"dotnet-maestro[bot]","Number":"1394","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190804.1\r\n- **Date Produced**: 8/4/2019 9:19 AM\r\n- **Commit**: 4408bcb04b4e3a6174d9ec9660fadc71185af712\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19404.1\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19404.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19404.1\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1394","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1394)"},{"Id":"476550563","IsPullRequest":true,"CreatedAt":"2019-08-04T13:05:09","Actor":"dotnet-maestro[bot]","Number":"1393","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190804.1\r\n- **Date Produced**: 8/4/2019 9:19 AM\r\n- **Commit**: 4408bcb04b4e3a6174d9ec9660fadc71185af712\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19404.1\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19404.1\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19404.1\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1393","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1393)"},{"Id":"476545674","IsPullRequest":true,"CreatedAt":"2019-08-04T12:15:06","Actor":"dotnet-maestro[bot]","Number":"1392","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190803.1\r\n- **Date Produced**: 8/3/2019 1:03 PM\r\n- **Commit**: 3b75ef38a33579dcd32f2912ee69e886356b0f18\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19403.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19403.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19403.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19403.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19403.1\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19403.1\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1392","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1392)"},{"Id":"476545661","IsPullRequest":true,"CreatedAt":"2019-08-04T12:14:53","Actor":"dotnet-maestro[bot]","Number":"1391","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190803.1\r\n- **Date Produced**: 8/3/2019 1:03 PM\r\n- **Commit**: 3b75ef38a33579dcd32f2912ee69e886356b0f18\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19403.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19403.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19403.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19403.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19403.1\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19403.1\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1391","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1391)"},{"Id":"476449316","IsPullRequest":true,"CreatedAt":"2019-08-03T13:04:37","Actor":"dotnet-maestro[bot]","Number":"1390","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190802.28\r\n- **Date Produced**: 8/3/2019 2:44 AM\r\n- **Commit**: 8a958aa3d1cf2e91f6e9cf839e023ad4f8d489f2\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19402.28\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19402.28\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19402.28\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1390","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1390)"},{"Id":"476448944","IsPullRequest":true,"CreatedAt":"2019-08-03T13:00:12","Actor":"dotnet-maestro[bot]","Number":"1389","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190802.28\r\n- **Date Produced**: 8/3/2019 2:44 AM\r\n- **Commit**: 8a958aa3d1cf2e91f6e9cf839e023ad4f8d489f2\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19402.28\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19402.28\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19402.28\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1389","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1389)"},{"Id":"476445367","IsPullRequest":true,"CreatedAt":"2019-08-03T12:14:47","Actor":"dotnet-maestro[bot]","Number":"1388","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190802.16\r\n- **Date Produced**: 8/3/2019 12:35 AM\r\n- **Commit**: d8457f6ba527aef165ff6fb0aded44bf8123ce83\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19402.16\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19402.16\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19402.16\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19402.16\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19402.16\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19402.16\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1388","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1388)"},{"Id":"476445350","IsPullRequest":true,"CreatedAt":"2019-08-03T12:14:32","Actor":"dotnet-maestro[bot]","Number":"1387","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190802.16\r\n- **Date Produced**: 8/3/2019 12:35 AM\r\n- **Commit**: d8457f6ba527aef165ff6fb0aded44bf8123ce83\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19402.16\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19402.16\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19402.16\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19402.16\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19402.16\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19402.16\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1387","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1387)"},{"Id":"476164729","IsPullRequest":true,"CreatedAt":"2019-08-02T13:02:57","Actor":"dotnet-maestro[bot]","Number":"1386","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190801.3\r\n- **Date Produced**: 8/2/2019 12:21 AM\r\n- **Commit**: c4e7347021eabaac1bdc0b0e13dc46f8c1e37419\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19401.3\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19401.3\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19401.3\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1386","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1386)"},{"Id":"476146337","IsPullRequest":true,"CreatedAt":"2019-08-02T12:14:50","Actor":"dotnet-maestro[bot]","Number":"1385","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190801.23\r\n- **Date Produced**: 8/2/2019 6:58 AM\r\n- **Commit**: 941d6497356e00ea6b2bc35a22a67f4ecf988fd6\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19401.23\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19401.23\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19401.23\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19401.23\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19401.23\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19401.23\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1385","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1385)"},{"Id":"475661515","IsPullRequest":true,"CreatedAt":"2019-08-01T12:54:03","Actor":"dotnet-maestro[bot]","Number":"1384","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190731.8\r\n- **Date Produced**: 8/1/2019 2:10 AM\r\n- **Commit**: a12c557a72988070b8624cc7ecc46899629895c4\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19381.8\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19381.8\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19381.8\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1384","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1384)"},{"Id":"475644095","IsPullRequest":true,"CreatedAt":"2019-08-01T12:14:44","Actor":"dotnet-maestro[bot]","Number":"1383","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190731.19\r\n- **Date Produced**: 8/1/2019 12:27 AM\r\n- **Commit**: 48787606d809963cc800151cbfbefe0a74ae74b4\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19381.19\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19381.19\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19381.19\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19381.19\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19381.19\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19381.19\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1383","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1383)"},{"Id":"475352106","IsPullRequest":false,"CreatedAt":"2019-07-31T20:52:29","Actor":"mwpowellhtx","Number":"1382","RawContent":null,"Title":"Reconsider Debug.Listeners API exposure","State":"open","Body":"I am staring at a use case right now that I need to listen for ``System.Diagnostics.Debug.WriteLine`` messages and a listener would be just what I need to get the job done. Therefore, I strongly suggest [reconsidering Debug.Listeners exposure](/dotnet/standard/issues/84). Absent that we must look at adding unnecessary layers of overhead to our ``Debug.WriteLine`` listening efforts when a listener would fit the bill nicely.","Url":"https://github.com/dotnet/standard/issues/1382","RelatedDescription":"Open issue \"Reconsider Debug.Listeners API exposure\" (#1382)"},{"Id":"473325489","IsPullRequest":true,"CreatedAt":"2019-07-31T15:11:11","Actor":"dotnet-maestro[bot]","Number":"1370","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190730.3\r\n- **Date Produced**: 7/30/2019 6:57 PM\r\n- **Commit**: def377f94747dac91482aad67b33a1c011ffc770\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19380.3\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19380.3\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19380.3\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19380.3\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19380.3\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19380.3\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1370","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1370)"},{"Id":"475124222","IsPullRequest":true,"CreatedAt":"2019-07-31T12:57:06","Actor":"dotnet-maestro[bot]","Number":"1381","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190730.6\r\n- **Date Produced**: 7/30/2019 8:44 PM\r\n- **Commit**: 5b6a74d8455aab11f64377f3200ace1df71110ea\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19380.6\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19380.6\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19380.6\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1381","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1381)"},{"Id":"474306086","IsPullRequest":true,"CreatedAt":"2019-07-30T16:43:12","Actor":"JohnTortugo","Number":"1379","RawContent":null,"Title":"Patch reference to _PublishUsingPipelines","State":"closed","Body":"For context see description of this Arcade PR: https://github.com/dotnet/arcade/pull/3482\r\n\r\n/cc @riarenas @jcagme ","Url":"https://github.com/dotnet/standard/pull/1379","RelatedDescription":"Closed or merged PR \"Patch reference to _PublishUsingPipelines\" (#1379)"},{"Id":"474564366","IsPullRequest":true,"CreatedAt":"2019-07-30T12:56:42","Actor":"dotnet-maestro[bot]","Number":"1380","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190729.12\r\n- **Date Produced**: 7/30/2019 5:11 AM\r\n- **Commit**: b2ff0db61cc9348775d73a8934ad80218ded8bc0\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19379.12\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19379.12\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19379.12\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1380","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1380)"},{"Id":"474034730","IsPullRequest":true,"CreatedAt":"2019-07-29T13:03:24","Actor":"dotnet-maestro[bot]","Number":"1378","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190728.4\r\n- **Date Produced**: 7/29/2019 4:09 AM\r\n- **Commit**: e36291288fc182e94a919f45e61a8924f953c3cd\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19378.4\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19378.4\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19378.4\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1378","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1378)"},{"Id":"473779780","IsPullRequest":false,"CreatedAt":"2019-07-28T19:57:53","Actor":"KubaO","Number":"1377","RawContent":null,"Title":"System.Xml.Serialization needs a dynamic element name for interop","State":"open","Body":"There's some awful XML out there that uses such a multitude of element names that it's infeasible to map them all out in explicit `XMLElement` attributes. Heck, such XML is usually produced with  dynamically generated names. It's a horrible practice - not to be encouraged, but we should be able to simplify the life of people who need to interoperate with such XML.\r\n\r\nIt'd be nice if we could do this:\r\n\r\n```\r\nclass AwfulElement {\r\n  [XmlDynamicElementName]\r\n  string name;\r\n  [XmlText(typeOf(int))]\r\n  int aNumber;\r\n  ...\r\n}\r\n```\r\n\r\nOther names for the proposed attribute may be `XmlInteropDynamicElementName` to signify that this is for interop purposes only, or `XmlAwfulDynamicElementName` to make it abundantly clear what it is :/\r\n\r\n### Rationale\r\n\r\nAs it stands, `XmlSerializer` infrastructure does a very poor job of supporting this - it requires quite a bit of semi-efficient code. Imagine you wanted a bunch of such elements in a collection with the following spec (note that currently it requires having an `INamedElement`, but with the support for the proposed attribute there'd be no need for it):\r\n\r\n```\r\npartial class AwfulCollection<T> : IXmlSerializable, IEnumerable<T> where T : INamedElement, new();\r\n\r\nclass AwfulParent {\r\n  public AwfulCollection<AwfulElement> Elements;\r\n}\r\n\r\n<?xml>\r\n<AwfulParemt>\r\n  <Awful1\\>\r\n  <Awful2\\>\r\n</AwfulParent>\r\n```\r\n\r\nI'll spare the details, but implementing this generic `AwfulCollection` is a pain. With the support for the proposed attribute, the usual array could be used:\r\n\r\n```\r\nclass LessAwfulParent {\r\n  public AwfulElement[] Element;\r\n}\r\n```\r\n\r\n### Spec\r\n\r\nThe attribute definition would be rather basic. A `DefaultElementName` property is a fallback if the name the attribute applies to is null. An exception would be thrown on serialization if both the name-attributed field as well as the default name were empty. On deserialization, the `name` is filled in with the name of the element.\r\n\r\n```\r\n[System.AttributeUsageAttribute(System.AttributeTargets.Field | System.AttributeTargets.Property, AllowMultiple=false)]\r\n    public partial class XmlDynamicElementNameAttribute: System.Attribute\r\n    {\r\n        public XmlDynamicElementNameAttribute() { }\r\n        public XmlDynamicElementNameAttribute(string defaultElementName) { }\r\n        public string DefaultElementName { get { throw null; } set { } }\r\n        public System.Xml.Schema.XmlSchemaForm Form { get { throw null; } set { } }\r\n        public string Namespace { get { throw null; } set { } }\r\n    }\r\n```","Url":"https://github.com/dotnet/standard/issues/1377","RelatedDescription":"Open issue \"System.Xml.Serialization needs a dynamic element name for interop\" (#1377)"},{"Id":"473740823","IsPullRequest":true,"CreatedAt":"2019-07-28T13:03:23","Actor":"dotnet-maestro[bot]","Number":"1376","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190727.2\r\n- **Date Produced**: 7/28/2019 5:49 AM\r\n- **Commit**: 57df8b38e4e70fc25aabe3d061cd1745cff0b26b\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19377.2\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19377.2\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19377.2\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1376","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1376)"},{"Id":"473635514","IsPullRequest":true,"CreatedAt":"2019-07-27T13:03:22","Actor":"dotnet-maestro[bot]","Number":"1375","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190726.14\r\n- **Date Produced**: 7/27/2019 4:10 AM\r\n- **Commit**: 8a6389529afdc0dd53d4c94fe665695ec54c21af\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19376.14\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19376.14\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19376.14\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1375","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1375)"},{"Id":"473583225","IsPullRequest":false,"CreatedAt":"2019-07-27T01:16:07","Actor":"GrabYourPitchforks","Number":"1374","RawContent":null,"Title":"Obsolete String.Copy in netstandard","State":"open","Body":"This is obsoleted in .NET Core 3 (see https://github.com/dotnet/corefx/issues/32563). It needs to be obsoleted in netstandard as well for consistency.","Url":"https://github.com/dotnet/standard/issues/1374","RelatedDescription":"Open issue \"Obsolete String.Copy in netstandard\" (#1374)"},{"Id":"473519038","IsPullRequest":true,"CreatedAt":"2019-07-26T21:14:24","Actor":"wtgodbe","Number":"1373","RawContent":null,"Title":"Enable YAML Stages publishing","State":"closed","Body":"Resolves https://github.com/dotnet/standard/issues/1372 & takes care of https://github.com/dotnet/arcade/blob/master/Documentation/CorePackages/YamlStagesPublishing.md for Standard.\r\n\r\n@riarenas @safern PTAL\r\n\r\nDiff is easier to reason about if you just look at https://github.com/dotnet/standard/pull/1373/commits/a2553ad6d898cf5c2db8940eb6ad4c1f65448557 - the other commit just fixes indentation","Url":"https://github.com/dotnet/standard/pull/1373","RelatedDescription":"Closed or merged PR \"Enable YAML Stages publishing\" (#1373)"},{"Id":"473459061","IsPullRequest":false,"CreatedAt":"2019-07-26T21:14:24","Actor":"wtgodbe","Number":"1372","RawContent":null,"Title":"Use YAML stages publishing","State":"closed","Body":"See https://github.com/dotnet/arcade/blob/master/Documentation/CorePackages/YamlStagesPublishing.md for guidance - needs to done by 8/13.","Url":"https://github.com/dotnet/standard/issues/1372","RelatedDescription":"Closed issue \"Use YAML stages publishing\" (#1372)"},{"Id":"473345599","IsPullRequest":true,"CreatedAt":"2019-07-26T13:07:57","Actor":"dotnet-maestro[bot]","Number":"1371","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190725.17\r\n- **Date Produced**: 7/26/2019 6:46 AM\r\n- **Commit**: 98227597b152076cb02c55bb695c572c14284e32\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19375.17\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19375.17\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19375.17\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1371","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1371)"},{"Id":"472245036","IsPullRequest":true,"CreatedAt":"2019-07-25T22:51:23","Actor":"dotnet-maestro[bot]","Number":"1366","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190725.2\r\n- **Date Produced**: 7/25/2019 1:09 PM\r\n- **Commit**: 3dfa62fddcde597959c323d17426f215384e773a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19375.2\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19375.2\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19375.2\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19375.2\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19375.2\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19375.2\r\n\r\n[marker]: <> (End:13e4918d-b9bd-4474-29f1-08d6225f093d)\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1366","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#1366)"},{"Id":"472873123","IsPullRequest":true,"CreatedAt":"2019-07-25T13:51:44","Actor":"dotnet-maestro[bot]","Number":"1369","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190724.11\r\n- **Date Produced**: 7/25/2019 6:46 AM\r\n- **Commit**: bdd0814360d4c3a58860919f292a306242f27da1\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19374.11\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19374.11\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19374.11\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1369","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1369)"},{"Id":"472753186","IsPullRequest":false,"CreatedAt":"2019-07-25T09:12:42","Actor":"guliteb","Number":"1368","RawContent":null,"Title":"System.Management Plans?","State":"open","Body":"I am developing UWP and want to access some system information via WMI.\r\n\r\nSo I want to ask if there is plan to support System.Management namespace in the future.\r\n\r\nThanks.","Url":"https://github.com/dotnet/standard/issues/1368","RelatedDescription":"Open issue \"System.Management Plans?\" (#1368)"},{"Id":"472270481","IsPullRequest":true,"CreatedAt":"2019-07-24T13:11:42","Actor":"dotnet-maestro[bot]","Number":"1367","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190724.2\r\n- **Date Produced**: 7/24/2019 11:35 AM\r\n- **Commit**: ca3fe6738ae6afc56e1f8fb5477a57a8dc2e183c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19374.2\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19374.2\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19374.2\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1367","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1367)"},{"Id":"471683422","IsPullRequest":true,"CreatedAt":"2019-07-23T13:11:11","Actor":"dotnet-maestro[bot]","Number":"1365","RawContent":null,"Title":"[master] Update dependencies from dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190722.9\r\n- **Date Produced**: 7/23/2019 8:02 AM\r\n- **Commit**: b58a866ba8709d66eed52bb8ecb13966b7436a1d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **System.Reflection.Emit.Lightweight** -> 5.0.0-alpha1.19372.9\r\n  - **System.Reflection.Emit** -> 5.0.0-alpha1.19372.9\r\n  - **System.Reflection.Emit.ILGeneration** -> 5.0.0-alpha1.19372.9\r\n\r\n[marker]: <> (End:2a9b120a-74e9-4ac8-c08c-08d6da235811)\r\n\r\n","Url":"https://github.com/dotnet/standard/pull/1365","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/corefx\" (#1365)"}],"ResultType":"GitHubIssue"},"CoreFx-Issues":{"Issues":[{"Id":"476637447","IsPullRequest":false,"CreatedAt":"2019-08-05T03:16:38","Actor":"timandy","Number":"40014","RawContent":null,"Title":"Optimize Enumerable.SkipLast()","State":"open","Body":"Enumerable.SkipLast() can be cast to Enumerable.Take().\r\nEnumerable.TakeLast() did the similar operation.\r\n\r\nhttps://github.com/dotnet/corefx/blob/6d86975666ecd2e2b4f5ab808dcfeff94fd18789/src/System.Linq/src/System/Linq/Skip.cs#L116-L129\r\nhttps://github.com/dotnet/corefx/blob/6d86975666ecd2e2b4f5ab808dcfeff94fd18789/src/System.Linq/src/System/Linq/Take.SpeedOpt.cs#L17-L45","Url":"https://github.com/dotnet/corefx/issues/40014","RelatedDescription":"Open issue \"Optimize Enumerable.SkipLast()\" (#40014)"},{"Id":"476599154","IsPullRequest":false,"CreatedAt":"2019-08-04T22:09:12","Actor":"mklement0","Number":"40013","RawContent":null,"Title":"DirectoryInfo.MoveTo and Directory.Move mistakenly prevent renaming directories to case variations of themselves on Windows, macOS","State":"open","Body":"The default filesystems on macOS and Windows are case-_insensitive_, yet case-_preserving_.\r\n\r\nTherefore, renaming a filesystem item to a _case variation_ of its current name - e.g., `foo` to `FOO` - should be supported.\r\n\r\n* This  _is_ properly supported for _files_.\r\n\r\n* It is _not_ supported for _directories_, due to an explicit, conceptually flawed check that tests the new path for being the same _case-insensitively_, which throws a spurious exception stating that  `Source and destination path must be different.`\r\n\r\nYou can paste following snippet directly into a `dotnet script` REPL and press <kbd>Enter</kbd> or paste it into a `*.csx` file and execute it with `dotnet script /path/to/*.csx`:\r\n\r\n```csharp\r\nusing System.IO;\r\n\r\nEnvironment.CurrentDirectory = Path.GetTempPath();\r\n\r\nDirectory.CreateDirectory(\"foo\");\r\n\r\n// This should succeed even on macOS and Windows, but throws an exception.\r\n// System.DirectoryInfo.MoveTo() exhibits the same symptom.\r\nDirectory.Move(\"foo\", \"FOO\");\r\n```\r\n\r\nAdditionally: Even if the source and destination are _truly_ identical, it is arguably more sensible to apply _desired-state logic_ and perform a quiet no-op rather than throwing an exception.\r\n","Url":"https://github.com/dotnet/corefx/issues/40013","RelatedDescription":"Open issue \"DirectoryInfo.MoveTo and Directory.Move mistakenly prevent renaming directories to case variations of themselves on Windows, macOS\" (#40013)"},{"Id":"476591707","IsPullRequest":false,"CreatedAt":"2019-08-04T20:37:46","Actor":"nguerrera","Number":"40012","RawContent":null,"Title":"Cannot build VB .NET Core 3 library project without ContextValue","State":"open","Body":"# Repro steps\r\n\r\n1. Get latest 3.0 preview 8 build of the SDK: https://dotnetcli.blob.core.windows.net/dotnet/Sdk/release/3.0.100-preview8/dotnet-sdk-latest-win-x64.exe\r\n2. `mkdir repro`\r\n3. `cd repro`\r\n4. `dotnet new classlib --language VB --framework netcoreapp3.0`\r\n5. `dotnet build`\r\n\r\n# Expected result\r\n\r\nBuilds successfully\r\n\r\n# Actual result\r\n```\r\nvbc : error BC30002: Type 'Global.Microsoft.VisualBasic.MyServices.Internal.ContextValue' is not defined.\r\n```\r\n\r\nI believe this is coming from https://github.com/dotnet/roslyn/blob/fab7134296816fc80019c60b0f5bef7400cf23ea/src/Compilers/VisualBasic/Portable/Symbols/EmbeddedSymbols/VbMyTemplateText.vb#L355\r\n\r\nI suppose there are two fixes:\r\n\r\n1. Change the code spit in the compiler to not require this type when building a library. (In which case, this could be moved to dotnet/roslyn)\r\n2. Add the type to Microsoft.VisualBasic.Core.dll\r\n\r\ncc @danmosemsft @cston @KathleenDollard I believe this should be considered blocking for 3.0. \r\n\r\nIt is possible to work around this by setting VBRuntime=Embed or MyType=Empty in the vbproj, but I believe that is effectively undoing other work that was done for VB in 3.0.","Url":"https://github.com/dotnet/corefx/issues/40012","RelatedDescription":"Open issue \"Cannot build VB .NET Core 3 library project without ContextValue\" (#40012)"},{"Id":"476576240","IsPullRequest":false,"CreatedAt":"2019-08-04T17:35:22","Actor":"GSPP","Number":"40011","RawContent":null,"Title":"Utf8JsonWriter.Flush should flush the underlying stream only optionally","State":"open","Body":"`Utf8JsonWriter.Flush` flushes the underlying stream. I think this behavior should be decoupled from flushing the buffers of `Utf8JsonWriter`. I might want to flush the writer but not the stream.\r\n\r\nFor example, `FileStream.Flush` calls into the kernel which is not necessarily desired. Network-based streams (not `NetworkStream` itself) might cause packets to be sent prematurely. Compression streams might create inefficiently small chunks.\r\n\r\nOne solutions is to add a parameter:\r\n\r\n    void Flush(bool flushStream = false)\r\n\r\nAnother solution is to never flush the stream. User code can flush the stream by itself if it wants to.\r\n","Url":"https://github.com/dotnet/corefx/issues/40011","RelatedDescription":"Open issue \"Utf8JsonWriter.Flush should flush the underlying stream only optionally\" (#40011)"},{"Id":"476511004","IsPullRequest":true,"CreatedAt":"2019-08-04T15:14:19","Actor":"hez2010","Number":"40003","RawContent":null,"Title":"Add support for JsonSnakeNamingPolicy","State":"closed","Body":"* Add JsonSnakeNamingPolicy support\r\n* Add tests for JsonSnakeNamingPolicy\r\n\r\nFixed #39564","Url":"https://github.com/dotnet/corefx/pull/40003","RelatedDescription":"Closed or merged PR \"Add support for JsonSnakeNamingPolicy\" (#40003)"},{"Id":"476550026","IsPullRequest":true,"CreatedAt":"2019-08-04T13:59:52","Actor":"dotnet-maestro[bot]","Number":"40008","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:08549e3e-8f8e-4201-dc38-08d6815d521b)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190803.6\r\n- **Date Produced**: 8/4/2019 4:34 AM\r\n- **Commit**: de92ac36622cd4bdc37c4d19ede6de14a31df6c4\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19403.6\r\n  - **Microsoft.NETCore.DotNetHost** -> 5.0.0-alpha1.19403.6\r\n  - **Microsoft.NETCore.DotNetHostPolicy** -> 5.0.0-alpha1.19403.6\r\n\r\n[marker]: <> (End:08549e3e-8f8e-4201-dc38-08d6815d521b)\r\n\r\n[marker]: <> (Begin:368e60b9-57f7-48bd-020d-08d6874ba0bd)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190804.1\r\n- **Date Produced**: 8/4/2019 9:19 AM\r\n- **Commit**: 4408bcb04b4e3a6174d9ec9660fadc71185af712\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **runtime.native.System.IO.Ports** -> 5.0.0-alpha1.19404.1\r\n  - **Microsoft.NETCore.Platforms** -> 5.0.0-alpha1.19404.1\r\n\r\n[marker]: <> (End:368e60b9-57f7-48bd-020d-08d6874ba0bd)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/40008","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup dotnet/corefx\" (#40008)"},{"Id":"476549974","IsPullRequest":true,"CreatedAt":"2019-08-04T13:44:42","Actor":"dotnet-maestro[bot]","Number":"40007","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:08549e3e-8f8e-4201-dc38-08d6815d521b)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190803.6\r\n- **Date Produced**: 8/4/2019 4:34 AM\r\n- **Commit**: de92ac36622cd4bdc37c4d19ede6de14a31df6c4\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19403.6\r\n  - **Microsoft.NETCore.DotNetHost** -> 5.0.0-alpha1.19403.6\r\n  - **Microsoft.NETCore.DotNetHostPolicy** -> 5.0.0-alpha1.19403.6\r\n\r\n[marker]: <> (End:08549e3e-8f8e-4201-dc38-08d6815d521b)\r\n\r\n[marker]: <> (Begin:368e60b9-57f7-48bd-020d-08d6874ba0bd)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190804.1\r\n- **Date Produced**: 8/4/2019 9:19 AM\r\n- **Commit**: 4408bcb04b4e3a6174d9ec9660fadc71185af712\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **runtime.native.System.IO.Ports** -> 5.0.0-alpha1.19404.1\r\n  - **Microsoft.NETCore.Platforms** -> 5.0.0-alpha1.19404.1\r\n\r\n[marker]: <> (End:368e60b9-57f7-48bd-020d-08d6874ba0bd)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/40007","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup dotnet/corefx\" (#40007)"},{"Id":"476545632","IsPullRequest":true,"CreatedAt":"2019-08-04T12:04:29","Actor":"dotnet-maestro[bot]","Number":"40006","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c297d885-0692-40f8-6b97-08d61f281b4c)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190803.1\r\n- **Date Produced**: 8/3/2019 1:03 PM\r\n- **Commit**: 3b75ef38a33579dcd32f2912ee69e886356b0f18\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions** -> 2.4.1-beta.19403.1\r\n  - **Microsoft.DotNet.XUnitConsoleRunner** -> 2.5.1-beta.19403.1\r\n  - **Microsoft.DotNet.VersionTools.Tasks** -> 1.0.0-beta.19403.1\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19403.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19403.1\r\n  - **Microsoft.DotNet.Build.Tasks.Configuration** -> 1.0.0-beta.19403.1\r\n  - **Microsoft.DotNet.Build.Tasks.Feed** -> 2.2.0-beta.19403.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19403.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19403.1\r\n  - **Microsoft.DotNet.CoreFxTesting** -> 1.0.0-beta.19403.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19403.1\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19403.1\r\n  - **Microsoft.DotNet.RemoteExecutor** -> 1.0.0-beta.19403.1\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19403.1\r\n\r\n[marker]: <> (End:c297d885-0692-40f8-6b97-08d61f281b4c)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/40006","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/arcade\" (#40006)"},{"Id":"476545624","IsPullRequest":true,"CreatedAt":"2019-08-04T12:04:17","Actor":"dotnet-maestro[bot]","Number":"40005","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c297d885-0692-40f8-6b97-08d61f281b4c)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190803.1\r\n- **Date Produced**: 8/3/2019 1:03 PM\r\n- **Commit**: 3b75ef38a33579dcd32f2912ee69e886356b0f18\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions** -> 2.4.1-beta.19403.1\r\n  - **Microsoft.DotNet.XUnitConsoleRunner** -> 2.5.1-beta.19403.1\r\n  - **Microsoft.DotNet.VersionTools.Tasks** -> 1.0.0-beta.19403.1\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19403.1\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19403.1\r\n  - **Microsoft.DotNet.Build.Tasks.Configuration** -> 1.0.0-beta.19403.1\r\n  - **Microsoft.DotNet.Build.Tasks.Feed** -> 2.2.0-beta.19403.1\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19403.1\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19403.1\r\n  - **Microsoft.DotNet.CoreFxTesting** -> 1.0.0-beta.19403.1\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19403.1\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19403.1\r\n  - **Microsoft.DotNet.RemoteExecutor** -> 1.0.0-beta.19403.1\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19403.1\r\n\r\n[marker]: <> (End:c297d885-0692-40f8-6b97-08d61f281b4c)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/40005","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/arcade\" (#40005)"},{"Id":"476483555","IsPullRequest":true,"CreatedAt":"2019-08-04T07:31:36","Actor":"zerogouki","Number":"40001","RawContent":null,"Title":"native build incrementally by default, make rebuild optional","State":"closed","Body":"this attempts to address #29778 by avoid to delete the generates files and tlogs from previous builds. additionally dotnet/arcade#3441 (already integrated into corefx a few days ago) was making msbuild trigger a new build given the header file had an updated timestamp. \r\nthe changeset makes it so that you can't force a rebuild so I've added a rebuild parameter just in case somebody wants to do that, let me know if that change in behavior is fine","Url":"https://github.com/dotnet/corefx/pull/40001","RelatedDescription":"Closed or merged PR \"native build incrementally by default, make rebuild optional\" (#40001)"},{"Id":"476506222","IsPullRequest":true,"CreatedAt":"2019-08-04T02:03:22","Actor":"bartonjs","Number":"40002","RawContent":null,"Title":"Validate the algorithmParameters value in Pkcs8PrivateKeyInfo..ctor","State":"open","Body":"If the algorithmParameters value is not null, empty, or a single BER value then\r\nthe Encode method will throw an ArgumentException, despite not taking any\r\narguments.\r\n\r\nRather than let the exception be confusing and run late, catch it in the\r\nconstructor (throwing the same CryptographicException as other ctors in this\r\nnamespace that expect a single BER value parameter).\r\n\r\nFound during docs writing.\r\n\r\n(After merge I'll open a 3.0 version of the change to get it as a Preview break instead of a v2v break).","Url":"https://github.com/dotnet/corefx/pull/40002","RelatedDescription":"Open PR \"Validate the algorithmParameters value in Pkcs8PrivateKeyInfo..ctor\" (#40002)"},{"Id":"476468263","IsPullRequest":false,"CreatedAt":"2019-08-03T16:39:05","Actor":"nitinag","Number":"40000","RawContent":null,"Title":"Uri.CheckHostName does not check/limit total dns name length","State":"open","Body":"**Uri.CheckHostName** (and \"**new Uri(string uriString)**\", other possible areas) does not check/limit the total length of the dns name to **253** as required by the RFC. It does limit each label to 63 characters as expected/required.\r\n\r\nThe total dns name size limit is 255 octets per the RFC, but since in dns, the first label length byte does not represent a dot and the ending 0 length null byte is required, which also does not represent a dot, that makes for a max **total ASCII string length of 253** (with each part between dots limited to 63 characters).\r\n\r\nTest:\r\nUri.CheckHostName(\"abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijk.abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijk.abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijk.abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghij\");\r\nwith a 254 character dns name (greater than the allowed 253) should return UriHostNameType.Unknown due to max total length.\r\n\r\n\"To simplify implementations, the total length of a domain name (i.e.,\r\nlabel octets and label length octets) is restricted to 255 octets or\r\nless.\"\r\nhttps://tools.ietf.org/html/rfc1035#section-3.1\r\n\r\n\"names           255 octets or less\"\r\nhttps://tools.ietf.org/html/rfc1035#section-2.3.4\r\n\r\n\"Domain names in messages are expressed in terms of a sequence of labels.\r\nEach label is represented as a one octet length field followed by that\r\nnumber of octets.\"\r\nhttps://tools.ietf.org/html/rfc1035#section-3.1\r\n\r\n\"Since every domain name ends with the null label of\r\nthe root, a domain name is terminated by a length byte of zero.\"\r\nhttps://tools.ietf.org/html/rfc1035#section-3.1","Url":"https://github.com/dotnet/corefx/issues/40000","RelatedDescription":"Open issue \"Uri.CheckHostName does not check/limit total dns name length\" (#40000)"},{"Id":"476468178","IsPullRequest":false,"CreatedAt":"2019-08-03T16:38:05","Actor":"aliveli186","Number":"39999","RawContent":null,"Title":"Why PipeWriter doesn't have synchronous Flush?","State":"open","Body":"System.IO.Pipelines","Url":"https://github.com/dotnet/corefx/issues/39999","RelatedDescription":"Open issue \"Why PipeWriter doesn't have synchronous Flush?\" (#39999)"},{"Id":"476450493","IsPullRequest":true,"CreatedAt":"2019-08-03T14:21:41","Actor":"dotnet-maestro[bot]","Number":"39997","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:08549e3e-8f8e-4201-dc38-08d6815d521b)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190802.8\r\n- **Date Produced**: 8/3/2019 4:15 AM\r\n- **Commit**: 18e5616f62e7ef3438749cc54170cc3bc74138df\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19402.8\r\n  - **Microsoft.NETCore.DotNetHost** -> 5.0.0-alpha1.19402.8\r\n  - **Microsoft.NETCore.DotNetHostPolicy** -> 5.0.0-alpha1.19402.8\r\n\r\n[marker]: <> (End:08549e3e-8f8e-4201-dc38-08d6815d521b)\r\n\r\n[marker]: <> (Begin:368e60b9-57f7-48bd-020d-08d6874ba0bd)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190802.28\r\n- **Date Produced**: 8/3/2019 2:44 AM\r\n- **Commit**: 8a958aa3d1cf2e91f6e9cf839e023ad4f8d489f2\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **runtime.native.System.IO.Ports** -> 5.0.0-alpha1.19402.28\r\n  - **Microsoft.NETCore.Platforms** -> 5.0.0-alpha1.19402.28\r\n\r\n[marker]: <> (End:368e60b9-57f7-48bd-020d-08d6874ba0bd)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/39997","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup dotnet/corefx\" (#39997)"},{"Id":"476450162","IsPullRequest":true,"CreatedAt":"2019-08-03T14:16:55","Actor":"dotnet-maestro[bot]","Number":"39996","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup dotnet/corefx","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:08549e3e-8f8e-4201-dc38-08d6815d521b)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190802.8\r\n- **Date Produced**: 8/3/2019 4:15 AM\r\n- **Commit**: 18e5616f62e7ef3438749cc54170cc3bc74138df\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NETCore.App** -> 5.0.0-alpha1.19402.8\r\n  - **Microsoft.NETCore.DotNetHost** -> 5.0.0-alpha1.19402.8\r\n  - **Microsoft.NETCore.DotNetHostPolicy** -> 5.0.0-alpha1.19402.8\r\n\r\n[marker]: <> (End:08549e3e-8f8e-4201-dc38-08d6815d521b)\r\n\r\n[marker]: <> (Begin:368e60b9-57f7-48bd-020d-08d6874ba0bd)\r\n## From https://github.com/dotnet/corefx\r\n- **Build**: 20190802.28\r\n- **Date Produced**: 8/3/2019 2:44 AM\r\n- **Commit**: 8a958aa3d1cf2e91f6e9cf839e023ad4f8d489f2\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **runtime.native.System.IO.Ports** -> 5.0.0-alpha1.19402.28\r\n  - **Microsoft.NETCore.Platforms** -> 5.0.0-alpha1.19402.28\r\n\r\n[marker]: <> (End:368e60b9-57f7-48bd-020d-08d6874ba0bd)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/39996","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup dotnet/corefx\" (#39996)"},{"Id":"476453484","IsPullRequest":false,"CreatedAt":"2019-08-03T13:50:43","Actor":"tebeco","Number":"39998","RawContent":null,"Title":"API Proposal: Channel.QueueSize","State":"open","Body":"### Context\r\nWe are trying to add Monitoring/Healthchecks on the number of elements enqueued into the `Channel` internal queue\r\nA simple read only access to the `Count` is fine in order to avoid affecting `hot path` (`Read/Write` operations).\r\n\r\nThe idea is to access it as a `Counter` / `Gauge`, a \"one shot read\" so that these metrics can be used/pushed to Monitoring in order to see how a system behave over time.\r\nIt could also be used to affect custom `Healthchecks` => `Degraded` or `Unhealthy` if various thresholds are being hit.\r\n\r\n#### Workaround\r\nWe could (as of today) use things like `Interlocked.Increment()` / `Interlocked.Decrement()` anytime the `Writer` or `Reader` are affecting the `Channel` queue.\r\n* **It directly affects the hot path⚠**\r\n* it needs to be aware of `Bounded / Unbounded` + success of the operation.\r\n* It only works if both Consumer and Producer can share the same reference on the counter.\r\n\r\n### Current Api\r\nI took a really fast look at the code (probably too fast) [here.](https://github.com/dotnet/corefx/tree/master/src/System.Threading.Channels/src/System/Threading/Channels)\r\nAs i understand it the `Channels` has [an internal `Deque` structure to hold the data](https://github.com/dotnet/corefx/blob/master/src/System.Threading.Channels/src/System/Collections/Generic/Deque.cs#L12)\r\n\r\n### Personnal understanding\r\nI saw that there were multiple implementations of various kind of `Channels` base on :\r\n* `Bounded/Unbounded`\r\n* `Single/Multiple` Producer\r\n* `Single/Multiple` Consumer\r\n\r\nI'm a bit lost in the code base to be honnest as i see that it uses `Deque<T>` and/or [`ConcurrentQueue<T>`](https://github.com/dotnet/corefx/blob/master/src/System.Threading.Channels/src/System/Threading/Channels/UnboundedChannel.cs#L20)\r\nAs i understand the [`Deque<T>` type already have a public `Count` property](https://github.com/dotnet/corefx/blob/master/src/System.Threading.Channels/src/System/Collections/Generic/Deque.cs#L19) that looks like what we are looking for\r\n\r\n## Proposal\r\nWould it be possible to add the a public property the the `Channels` class ?\r\nI naive idea would look like :\r\n`public int Count => _queue.Count` or `public int Count => _items.Count`\r\n(but as i the main issue would be dedicated implementation per `Channel` \"Type\"\r\n","Url":"https://github.com/dotnet/corefx/issues/39998","RelatedDescription":"Open issue \"API Proposal: Channel.QueueSize\" (#39998)"},{"Id":"476445310","IsPullRequest":true,"CreatedAt":"2019-08-03T13:04:35","Actor":"dotnet-maestro[bot]","Number":"39992","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c297d885-0692-40f8-6b97-08d61f281b4c)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190802.16\r\n- **Date Produced**: 8/3/2019 12:35 AM\r\n- **Commit**: d8457f6ba527aef165ff6fb0aded44bf8123ce83\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions** -> 2.4.1-beta.19402.16\r\n  - **Microsoft.DotNet.XUnitConsoleRunner** -> 2.5.1-beta.19402.16\r\n  - **Microsoft.DotNet.VersionTools.Tasks** -> 1.0.0-beta.19402.16\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19402.16\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19402.16\r\n  - **Microsoft.DotNet.Build.Tasks.Configuration** -> 1.0.0-beta.19402.16\r\n  - **Microsoft.DotNet.Build.Tasks.Feed** -> 2.2.0-beta.19402.16\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19402.16\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19402.16\r\n  - **Microsoft.DotNet.CoreFxTesting** -> 1.0.0-beta.19402.16\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19402.16\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19402.16\r\n  - **Microsoft.DotNet.RemoteExecutor** -> 1.0.0-beta.19402.16\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19402.16\r\n\r\n[marker]: <> (End:c297d885-0692-40f8-6b97-08d61f281b4c)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/39992","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#39992)"},{"Id":"476445331","IsPullRequest":true,"CreatedAt":"2019-08-03T12:59:48","Actor":"dotnet-maestro[bot]","Number":"39993","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c297d885-0692-40f8-6b97-08d61f281b4c)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190802.16\r\n- **Date Produced**: 8/3/2019 12:35 AM\r\n- **Commit**: d8457f6ba527aef165ff6fb0aded44bf8123ce83\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.XUnitExtensions** -> 2.4.1-beta.19402.16\r\n  - **Microsoft.DotNet.XUnitConsoleRunner** -> 2.5.1-beta.19402.16\r\n  - **Microsoft.DotNet.VersionTools.Tasks** -> 1.0.0-beta.19402.16\r\n  - **Microsoft.DotNet.ApiCompat** -> 1.0.0-beta.19402.16\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19402.16\r\n  - **Microsoft.DotNet.Build.Tasks.Configuration** -> 1.0.0-beta.19402.16\r\n  - **Microsoft.DotNet.Build.Tasks.Feed** -> 2.2.0-beta.19402.16\r\n  - **Microsoft.DotNet.Build.Tasks.Packaging** -> 1.0.0-beta.19402.16\r\n  - **Microsoft.DotNet.CodeAnalysis** -> 1.0.0-beta.19402.16\r\n  - **Microsoft.DotNet.CoreFxTesting** -> 1.0.0-beta.19402.16\r\n  - **Microsoft.DotNet.GenAPI** -> 1.0.0-beta.19402.16\r\n  - **Microsoft.DotNet.Helix.Sdk** -> 2.0.0-beta.19402.16\r\n  - **Microsoft.DotNet.RemoteExecutor** -> 1.0.0-beta.19402.16\r\n  - **Microsoft.DotNet.GenFacades** -> 1.0.0-beta.19402.16\r\n\r\n[marker]: <> (End:c297d885-0692-40f8-6b97-08d61f281b4c)\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/39993","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#39993)"},{"Id":"476448723","IsPullRequest":true,"CreatedAt":"2019-08-03T12:46:59","Actor":"dotnet-maestro[bot]","Number":"39995","RawContent":null,"Title":"[master] Update dependencies from dotnet/coreclr","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:be1e858a-d56c-4174-7dc0-08d6ba16a224)\r\n## From https://github.com/dotnet/coreclr\r\n- **Build**: 20190803.2\r\n- **Date Produced**: 8/4/2019 12:37 AM\r\n- **Commit**: 69649624d71a4d7ebcae2ce5420508e5fe5ba7f2\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.Sdk.IL** -> 5.0.0-alpha1.19403.2\r\n  - **Microsoft.NETCore.ILAsm** -> 5.0.0-alpha1.19403.2\r\n  - **Microsoft.NETCore.Runtime.CoreCLR** -> 5.0.0-alpha1.19403.2\r\n\r\n[marker]: <> (End:be1e858a-d56c-4174-7dc0-08d6ba16a224)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/39995","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/coreclr\" (#39995)"},{"Id":"476448053","IsPullRequest":false,"CreatedAt":"2019-08-03T12:38:26","Actor":"benaadams","Number":"39994","RawContent":null,"Title":"API Proposal: TaskScheduler.Queue(Action, object)","State":"open","Body":"To support not creating an additional Task when the scheduler implements the method\r\n```csharp\r\nprotected internal virtual void QueueTask (Action<object?> continuation, object? state)\r\n    => Task.Factory.StartNew(\r\n        continuation, \r\n        state, \r\n        CancellationToken.None, \r\n        TaskCreationOptions.DenyChildAttach, \r\n        this);\r\n```\r\nA place this that could be used is in [ManualResetValueTaskSourceCore](https://github.com/dotnet/corefx/blob/8a958aa3d1cf2e91f6e9cf839e023ad4f8d489f2/src/Common/src/CoreLib/System/Threading/Tasks/Sources/ManualResetValueTaskSourceCore.cs#L185)\r\n```csharp\r\ncase TaskScheduler ts:\r\n    Task.Factory.StartNew(continuation, state, CancellationToken.None, TaskCreationOptions.DenyChildAttach, ts);\r\n    break;\r\n```\r\nWhere it could instead call\r\n```csharp\r\ncase TaskScheduler ts:\r\n    ts.Queue(continuation, state);\r\n    break;\r\n```\r\n\r\n/cc @ReubenBond @stephentoub ","Url":"https://github.com/dotnet/corefx/issues/39994","RelatedDescription":"Open issue \"API Proposal: TaskScheduler.Queue(Action, object)\" (#39994)"},{"Id":"476394903","IsPullRequest":true,"CreatedAt":"2019-08-03T01:15:28","Actor":"Jozkee","Number":"39990","RawContent":null,"Title":"Added triple-slash summary to TlsCipherSuite.tt template.","State":"closed","Body":"Based on https://github.com/dotnet/dotnet-api-docs/pull/2822#discussion_r307034081\r\n\r\n* Added triple-slash summary to TlsCipherSuite.tt template.\r\n* Added workaround for 403 response send by IANA when the request does not include a User-Agent header.\r\n\r\nThere has not been new cipher suites since last time `TlsCipherSuite.cs` file was auto-generated.","Url":"https://github.com/dotnet/corefx/pull/39990","RelatedDescription":"Closed or merged PR \"Added triple-slash summary to TlsCipherSuite.tt template.\" (#39990)"},{"Id":"476305827","IsPullRequest":false,"CreatedAt":"2019-08-03T01:00:02","Actor":"CodArs-van","Number":"39982","RawContent":null,"Title":"Bitmap metadata value from PropertyTagOrientation mismatches between Linux and Windows","State":"closed","Body":"## Development Environment:\r\n\r\n.Net Core: 2.2.401\r\nSystem.Drawing.Common: 4.5.1\r\n\r\n## Operating System\r\n\r\nWindows: 10\r\nLinux: Ubuntu 18.04\r\n\r\nSample Code:\r\n```csharp\r\nusing System;\r\nusing System.Drawing;\r\n\r\nnamespace ImageRotationCheck\r\n{\r\n    class Program\r\n    {\r\n        static void Main(string[] args)\r\n        {\r\n            var image = new Bitmap(args[0]);\r\n            Console.WriteLine($\"Image Dimension: {image.Width} x {image.Height}\");\r\n            var propertyId = 274;\r\n            var propertyItem = image.GetPropertyItem(propertyId);\r\n            Console.WriteLine($\"Value: {propertyItem.Value}\");\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## Input Data\r\n![ac00390089a62cdf2ac947208653f4a0e5bdf819996e82e3f8f9c5436e679c54](https://user-images.githubusercontent.com/25216338/62391193-025d7580-b519-11e9-90e8-c96f20156503.jpg)\r\n\r\n## Repro Steps:\r\n1. Build & Run the application with the attached image on Windows\r\n2. propertyItem.Value is [0x0, 0x6]\r\n3. Build & Run the application with the attached image on Linux\r\n4. propertyItem.Value is [0x6, 0x0]\r\n\r\nExpected propertyItem.Value to be equal but they're different\r\n","Url":"https://github.com/dotnet/corefx/issues/39982","RelatedDescription":"Closed issue \"Bitmap metadata value from PropertyTagOrientation mismatches between Linux and Windows\" (#39982)"},{"Id":"476395479","IsPullRequest":true,"CreatedAt":"2019-08-03T00:16:53","Actor":"bartonjs","Number":"39991","RawContent":null,"Title":"Improve bytesConsumed tests for Pkcs12Info.Decode","State":"open","Body":"Add tests which provide inputs that are overly large to measure the accuracy of bytesConsumed.\r\n\r\nFixes #39970.","Url":"https://github.com/dotnet/corefx/pull/39991","RelatedDescription":"Open PR \"Improve bytesConsumed tests for Pkcs12Info.Decode\" (#39991)"},{"Id":"476391599","IsPullRequest":false,"CreatedAt":"2019-08-02T23:49:36","Actor":"buyaa-n","Number":"39989","RawContent":null,"Title":"Mac Catalina compatability: System.Net.Http.Functional.Tests failed","State":"open","Body":"System.Net.Http.Functional.Tests failing:\r\n```xml\r\n<failure exception-type=\"System.AggregateException\">\r\n          <message><![CDATA[System.AggregateException : One or more errors occurred. (One or more errors occurred. (Authentication failed, see inner exception.)) (One or more errors occurred. (The SSL connection could not be established, see inner exception.))\\n---- System.AggregateException : One or more errors occurred. (Authentication failed, see inner exception.)\\n-------- System.Security.Authentication.AuthenticationException : Authentication failed, see inner exception.\\n------------ Interop+AppleCrypto+SslException : UNIX[Operation not permitted]\\n---- System.AggregateException : One or more errors occurred. (The SSL connection could not be established, see inner exception.)\\n-------- System.Net.Http.HttpRequestException : The SSL connection could not be established, see inner exception.\\n------------ System.IO.IOException : Authentication failed because the remote party has closed the transport stream.]]></message>\r\n          <stack-trace><![CDATA[   at System.Threading.Tasks.TaskTimeoutExtensions.WhenAllOrAnyFailed(Task[] tasks) in /Users/dotnet/furt/corefx/src/Common/tests/System/Threading/Tasks/TaskTimeoutExtensions.cs:line 111\r\n   at System.Threading.Tasks.TaskTimeoutExtensions.WhenAllOrAnyFailed(Task[] tasks, Int32 millisecondsTimeout) in /Users/dotnet/furt/corefx/src/Common/tests/System/Threading/Tasks/TaskTimeoutExtensions.cs:line 71\r\n   at System.Net.Http.Functional.Tests.HttpClientHandler_DangerousAcceptAllCertificatesValidator_Test.<>c__DisplayClass4_0.<<SetDelegate_ConnectionSucceeds>b__0>d.MoveNext() in /Users/dotnet/furt/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.AcceptAllCerts.cs:line 58\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Net.Test.Common.LoopbackServer.CreateServerAsync(Func`2 funcAsync, Options options) in /Users/dotnet/furt/corefx/src/Common/tests/System/Net/Http/LoopbackServer.cs:line 66\r\n   at System.Net.Http.Functional.Tests.HttpClientHandler_DangerousAcceptAllCertificatesValidator_Test.SetDelegate_ConnectionSucceeds(SslProtocols acceptedProtocol, Boolean requestOnlyThisProtocol) in /Users/dotnet/furt/corefx/src/System.Net.Http/tests/FunctionalTests/HttpClientHandlerTest.AcceptAllCerts.cs:line 56\r\n--- End of stack trace from previous location where exception was thrown ---\r\n----- Inner Stack Trace #1 (System.AggregateException) -----\r\n\r\n----- Inner Stack Trace -----\r\n   at System.Net.Security.SslStream.StartSendAuthResetSignal(ProtocolToken message, AsyncProtocolRequest asyncRequest, ExceptionDispatchInfo exception) in /Users/dotnet/furt/corefx/src/System.Net.Security/src/System/Net/Security/SslStream.Implementation.cs:line 710\r\n   at System.Net.Security.SslStream.CheckCompletionBeforeNextReceive(ProtocolToken message, AsyncProtocolRequest asyncRequest) in /Users/dotnet/furt/corefx/src/System.Net.Security/src/System/Net/Security/SslStream.Implementation.cs:line 537\r\n   at System.Net.Security.SslStream.StartSendBlob(Byte[] incoming, Int32 count, AsyncProtocolRequest asyncRequest) in /Users/dotnet/furt/corefx/src/System.Net.Security/src/System/Net/Security/SslStream.Implementation.cs:line 527\r\n   at System.Net.Security.SslStream.ProcessReceivedBlob(Byte[] buffer, Int32 count, AsyncProtocolRequest asyncRequest) in /Users/dotnet/furt/corefx/src/System.Net.Security/src/System/Net/Security/SslStream.Implementation.cs:line 696\r\n   at System.Net.Security.SslStream.StartReadFrame(Byte[] buffer, Int32 readBytes, AsyncProtocolRequest asyncRequest) in /Users/dotnet/furt/corefx/src/System.Net.Security/src/System/Net/Security/SslStream.Implementation.cs:line 651\r\n   at System.Net.Security.SslStream.StartReceiveBlob(Byte[] buffer, AsyncProtocolRequest asyncRequest) in /Users/dotnet/furt/corefx/src/System.Net.Security/src/System/Net/Security/SslStream.Implementation.cs:line 599\r\n   at System.Net.Security.SslStream.ForceAuthentication(Boolean receiveFirst, Byte[] buffer, AsyncProtocolRequest asyncRequest) in /Users/dotnet/furt/corefx/src/System.Net.Security/src/System/Net/Security/SslStream.Implementation.cs:line 393\r\n   at System.Net.Security.SslStream.ProcessAuthentication(LazyAsyncResult lazyResult, CancellationToken cancellationToken) in /Users/dotnet/furt/corefx/src/System.Net.Security/src/System/Net/Security/SslStream.Implementation.cs:line 309\r\n   at System.Net.Security.SslStream.BeginAuthenticateAsServer(SslServerAuthenticationOptions sslServerAuthenticationOptions, CancellationToken cancellationToken, AsyncCallback asyncCallback, Object asyncState) in /Users/dotnet/furt/corefx/src/System.Net.Security/src/System/Net/Security/SslStream.cs:line 280\r\n   at System.Net.Security.SslStream.BeginAuthenticateAsServer(X509Certificate serverCertificate, Boolean clientCertificateRequired, SslProtocols enabledSslProtocols, Boolean checkCertificateRevocation, AsyncCallback asyncCallback, Object asyncState) in /Users/dotnet/furt/corefx/src/System.Net.Security/src/System/Net/Security/SslStream.cs:line 270\r\n   at System.Net.Security.SslStream.<>c.<AuthenticateAsServerAsync>b__68_1(X509Certificate arg1, Boolean arg2, SslProtocols arg3, AsyncCallback callback, Object state) in /Users/dotnet/furt/corefx/src/System.Net.Security/src/System/Net/Security/SslStream.cs:line 427\r\n   at System.Threading.Tasks.TaskFactory`1.FromAsyncImpl[TArg1,TArg2,TArg3](Func`6 beginMethod, Func`2 endFunction, Action`1 endAction, TArg1 arg1, TArg2 arg2, TArg3 arg3, Object state, TaskCreationOptions creationOptions) in /_/src/System.Private.CoreLib/shared/System/Threading/Tasks/FutureFactory.cs:line 1152\r\n   at System.Threading.Tasks.TaskFactory.FromAsync[TArg1,TArg2,TArg3](Func`6 beginMethod, Action`1 endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, Object state, TaskCreationOptions creationOptions) in /_/src/System.Private.CoreLib/shared/System/Threading/Tasks/TaskFactory.cs:line 1135\r\n   at System.Threading.Tasks.TaskFactory.FromAsync[TArg1,TArg2,TArg3](Func`6 beginMethod, Action`1 endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, Object state) in /_/src/System.Private.CoreLib/shared/System/Threading/Tasks/TaskFactory.cs:line 1092\r\n   at System.Net.Security.SslStream.AuthenticateAsServerAsync(X509Certificate serverCertificate, Boolean clientCertificateRequired, SslProtocols enabledSslProtocols, Boolean checkCertificateRevocation) in /Users/dotnet/furt/corefx/src/System.Net.Security/src/System/Net/Security/SslStream.cs:line 428\r\n   at System.Net.Test.Common.LoopbackServer.AcceptConnectionAsync(Func`2 funcAsync) in /Users/dotnet/furt/corefx/src/Common/tests/System/Net/Http/LoopbackServer.cs:line 135\r\n   at System.Net.Test.Common.LoopbackServer.AcceptConnectionSendResponseAndCloseAsync(HttpStatusCode statusCode, String additionalHeaders, String content) in /Users/dotnet/furt/corefx/src/Common/tests/System/Net/Http/LoopbackServer.cs:line 190\r\n   at System.Threading.Tasks.TaskTimeoutExtensions.WhenAllOrAnyFailed(Task[] tasks) in /Users/dotnet/furt/corefx/src/Common/tests/System/Threading/Tasks/TaskTimeoutExtensions.cs:line 83\r\n```","Url":"https://github.com/dotnet/corefx/issues/39989","RelatedDescription":"Open issue \"Mac Catalina compatability: System.Net.Http.Functional.Tests failed\" (#39989)"},{"Id":"476389768","IsPullRequest":false,"CreatedAt":"2019-08-02T23:37:27","Actor":"buyaa-n","Number":"39988","RawContent":null,"Title":"Mac Catalina compatibility: System.Security.Cryptography.X509Certificates.Tests crashing","State":"open","Body":"System.Security.Cryptography.X509Certificates.Tests are crashing without producing result \r\n```\r\nStarting:    System.Security.Cryptography.X509Certificates.Tests (parallel test collections = on, max threads = 4)\r\n  Warning: unable to build chain to self-signed root for signer \"(null)\"Process terminated. Assertion failed.\r\n  X509ChainGetStatusAtIndex returned unexpected error 2\r\n     at Internal.Cryptography.Pal.SecTrustChainPal.ParseResults(SafeX509ChainHandle chainHandle, X509RevocationMode revocationMode) in /Users/dotnet/new_source/corefx/src/System.Security.Cryptography.X509Certificates/src/Internal/Cryptography/Pal.OSX/ChainPal.cs:line 250\r\n     at Internal.Cryptography.Pal.SecTrustChainPal.Execute(DateTime verificationTime, Boolean allowNetwork, OidCollection applicationPolicy, OidCollection certificatePolicy, X509RevocationFlag revocationFlag) in /Users/dotnet/new_source/corefx/src/System.Security.Cryptography.X509Certificates/src/Internal/Cryptography/Pal.OSX/ChainPal.cs:line 210\r\n     at Internal.Cryptography.Pal.ChainPal.BuildChain(Boolean useMachineContext, ICertificatePal cert, X509Certificate2Collection extraStore, OidCollection applicationPolicy, OidCollection certificatePolicy, X509RevocationMode revocationMode, X509RevocationFlag revocationFlag, DateTime verificationTime, TimeSpan timeout) in /Users/dotnet/new_source/corefx/src/System.Security.Cryptography.X509Certificates/src/Internal/Cryptography/Pal.OSX/ChainPal.cs:line 574\r\n     at System.Security.Cryptography.X509Certificates.X509Chain.Build(X509Certificate2 certificate, Boolean throwOnException) in /Users/dotnet/new_source/corefx/src/System.Security.Cryptography.X509Certificates/src/System/Security/Cryptography/X509Certificates/X509Chain.cs:line 118\r\n     at System.Security.Cryptography.X509Certificates.X509Chain.Build(X509Certificate2 certificate) in /Users/dotnet/new_source/corefx/src/System.Security.Cryptography.X509Certificates/src/System/Security/Cryptography/X509Certificates/X509Chain.cs:line 105\r\n     at System.Security.Cryptography.X509Certificates.Tests.DynamicChainTests.TestInvalidAia() in /Users/dotnet/new_source/corefx/src/System.Security.Cryptography.X509Certificates/tests/DynamicChainTests.cs:line 240\r\n     at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor, Boolean wrapExceptions)\r\n     at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture) in /_/src/System.Private.CoreLib/src/System/Reflection/RuntimeMethodInfo.cs:line 475\r\n     at System.Reflection.MethodBase.Invoke(Object obj, Object[] parameters) in /_/src/System.Private.CoreLib/shared/System/Reflection/MethodBase.cs:line 54\r\n     at Xunit.Sdk.TestInvoker`1.CallTestMethod(Object testClassInstance) in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\TestInvoker.cs:line 150\r\n     at Xunit.Sdk.TestInvoker`1.<>c__DisplayClass48_1.<<InvokeTestMethodAsync>b__1>d.MoveNext() in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\TestInvoker.cs:line 257\r\n     at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /_/src/System.Private.CoreLib/shared/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 1015\r\n     at Xunit.Sdk.TestInvoker`1.<>c__DisplayClass48_1.<InvokeTestMethodAsync>b__1()\r\n     at Xunit.Sdk.ExecutionTimer.AggregateAsync(Func`1 asyncAction) in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\ExecutionTimer.cs:line 48\r\n     at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /_/src/System.Private.CoreLib/shared/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 1015\r\n     at Xunit.Sdk.ExecutionTimer.AggregateAsync(Func`1 asyncAction)\r\n     at Xunit.Sdk.TestInvoker`1.<>c__DisplayClass48_1.<InvokeTestMethodAsync>b__0() in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\TestInvoker.cs:line 242\r\n     at Xunit.Sdk.ExceptionAggregator.RunAsync(Func`1 code) in C:\\Dev\\xunit\\xunit\\src\\xunit.core\\Sdk\\ExceptionAggregator.cs:line 90\r\n     at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /_/src/System.Private.CoreLib/shared/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 1015\r\n     at Xunit.Sdk.ExceptionAggregator.RunAsync(Func`1 code)\r\n     at Xunit.Sdk.TestInvoker`1.InvokeTestMethodAsync(Object testClassInstance) in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\TestInvoker.cs:line 241\r\n     at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /_/src/System.Private.CoreLib/shared/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 1015\r\n     at Xunit.Sdk.TestInvoker`1.InvokeTestMethodAsync(Object testClassInstance)\r\n     at Xunit.Sdk.XunitTestInvoker.InvokeTestMethodAsync(Object testClassInstance) in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\XunitTestInvoker.cs:line 112\r\n     at Xunit.Sdk.TestInvoker`1.<RunAsync>b__47_0() in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\TestInvoker.cs:line 206\r\n     at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /_/src/System.Private.CoreLib/shared/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 1015\r\n     at Xunit.Sdk.TestInvoker`1.<RunAsync>b__47_0()\r\n     at Xunit.Sdk.ExceptionAggregator.RunAsync[T](Func`1 code) in C:\\Dev\\xunit\\xunit\\src\\xunit.core\\Sdk\\ExceptionAggregator.cs:line 107\r\n     at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /_/src/System.Private.CoreLib/shared/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 1015\r\n     at Xunit.Sdk.ExceptionAggregator.RunAsync[T](Func`1 code)\r\n     at Xunit.Sdk.TestInvoker`1.RunAsync() in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\TestInvoker.cs:line 189\r\n     at Xunit.Sdk.XunitTestRunner.InvokeTestMethodAsync(ExceptionAggregator aggregator) in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\XunitTestRunner.cs:line 84\r\n     at Xunit.Sdk.XunitTestRunner.InvokeTestAsync(ExceptionAggregator aggregator) in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\XunitTestRunner.cs:line 67\r\n     at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /_/src/System.Private.CoreLib/shared/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 1015\r\n     at Xunit.Sdk.XunitTestRunner.InvokeTestAsync(ExceptionAggregator aggregator)\r\n     at Xunit.Sdk.TestRunner`1.<>c__DisplayClass43_0.<RunAsync>b__0() in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\TestRunner.cs:line 149\r\n     at Xunit.Sdk.ExceptionAggregator.RunAsync[T](Func`1 code) in C:\\Dev\\xunit\\xunit\\src\\xunit.core\\Sdk\\ExceptionAggregator.cs:line 107\r\n     at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /_/src/System.Private.CoreLib/shared/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 1015\r\n     at Xunit.Sdk.ExceptionAggregator.RunAsync[T](Func`1 code)\r\n     at Xunit.Sdk.TestRunner`1.RunAsync() in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\TestRunner.cs:line 149\r\n     at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /_/src/System.Private.CoreLib/shared/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 1015\r\n     at Xunit.Sdk.TestRunner`1.RunAsync()\r\n     at Xunit.Sdk.XunitTestCaseRunner.RunTestAsync() in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\XunitTestCaseRunner.cs:line 139\r\n     at Xunit.Sdk.TestCaseRunner`1.RunAsync() in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\TestCaseRunner.cs:line 82\r\n     at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /_/src/System.Private.CoreLib/shared/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 1015\r\n     at Xunit.Sdk.TestCaseRunner`1.RunAsync()\r\n     at Xunit.Sdk.XunitTestCase.RunAsync(IMessageSink diagnosticMessageSink, IMessageBus messageBus, Object[] constructorArguments, ExceptionAggregator aggregator, CancellationTokenSource cancellationTokenSource) in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\XunitTestCase.cs:line 162\r\n     at Xunit.Sdk.XunitTestMethodRunner.RunTestCaseAsync(IXunitTestCase testCase) in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\XunitTestMethodRunner.cs:line 45\r\n     at Xunit.Sdk.TestMethodRunner`1.RunTestCasesAsync() in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\TestMethodRunner.cs:line 136\r\n     at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /_/src/System.Private.CoreLib/shared/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 1015\r\n     at Xunit.Sdk.TestMethodRunner`1.RunTestCasesAsync()\r\n     at Xunit.Sdk.TestMethodRunner`1.RunAsync() in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\TestMethodRunner.cs:line 106\r\n     at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /_/src/System.Private.CoreLib/shared/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 1015\r\n     at Xunit.Sdk.TestMethodRunner`1.RunAsync()\r\n     at Xunit.Sdk.XunitTestClassRunner.RunTestMethodAsync(ITestMethod testMethod, IReflectionMethodInfo method, IEnumerable`1 testCases, Object[] constructorArguments) in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\XunitTestClassRunner.cs:line 168\r\n     at Xunit.Sdk.TestClassRunner`1.RunTestMethodsAsync() in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\TestClassRunner.cs:line 213\r\n     at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /_/src/System.Private.CoreLib/shared/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 1015\r\n     at Xunit.Sdk.TestClassRunner`1.RunTestMethodsAsync()\r\n     at Xunit.Sdk.TestClassRunner`1.RunAsync() in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\TestClassRunner.cs:line 171\r\n     at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /_/src/System.Private.CoreLib/shared/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 1015\r\n     at Xunit.Sdk.TestClassRunner`1.RunAsync()\r\n     at Xunit.Sdk.XunitTestCollectionRunner.RunTestClassAsync(ITestClass testClass, IReflectionTypeInfo class, IEnumerable`1 testCases) in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\XunitTestCollectionRunner.cs:line 158\r\n     at Xunit.Sdk.TestCollectionRunner`1.RunTestClassesAsync() in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\TestCollectionRunner.cs:line 130\r\n     at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /_/src/System.Private.CoreLib/shared/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 1015\r\n     at Xunit.Sdk.TestCollectionRunner`1.RunTestClassesAsync()\r\n     at Xunit.Sdk.TestCollectionRunner`1.RunAsync() in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\TestCollectionRunner.cs:line 101\r\n     at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine& stateMachine) in /_/src/System.Private.CoreLib/shared/System/Runtime/CompilerServices/AsyncMethodBuilder.cs:line 1015\r\n     at Xunit.Sdk.TestCollectionRunner`1.RunAsync()\r\n     at Xunit.Sdk.XunitTestAssemblyRunner.RunTestCollectionAsync(IMessageBus messageBus, ITestCollection testCollection, IEnumerable`1 testCases, CancellationTokenSource cancellationTokenSource) in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\XunitTestAssemblyRunner.cs:line 235\r\n     at Xunit.Sdk.XunitTestAssemblyRunner.<>c__DisplayClass14_2.<RunTestCollectionsAsync>b__2() in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\XunitTestAssemblyRunner.cs:line 184\r\n     at System.Threading.Tasks.Task`1.InnerInvoke() in /_/src/System.Private.CoreLib/shared/System/Threading/Tasks/Future.cs:line 518\r\n     at System.Threading.Tasks.Task.<>c.<.cctor>b__274_0(Object obj) in /_/src/System.Private.CoreLib/shared/System/Threading/Tasks/Task.cs:line 2428\r\n     at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) in /_/src/System.Private.CoreLib/shared/System/Threading/ExecutionContext.cs:line 172\r\n     at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot, Thread threadPoolThread) in /_/src/System.Private.CoreLib/shared/System/Threading/Tasks/Task.cs:line 2385\r\n     at System.Threading.Tasks.Task.ExecuteEntry() in /_/src/System.Private.CoreLib/shared/System/Threading/Tasks/Task.cs:line 2296\r\n     at System.Threading.Tasks.SynchronizationContextTaskScheduler.<>c.<.cctor>b__8_0(Object s) in /_/src/System.Private.CoreLib/shared/System/Threading/Tasks/TaskScheduler.cs:line 641\r\n     at Xunit.Sdk.MaxConcurrencySyncContext.RunOnSyncContext(SendOrPostCallback callback, Object state) in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\MaxConcurrencySyncContext.cs:line 107\r\n     at Xunit.Sdk.MaxConcurrencySyncContext.<>c__DisplayClass11_0.<WorkerThreadProc>b__0(Object _) in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\MaxConcurrencySyncContext.cs:line 96\r\n     at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) in /_/src/System.Private.CoreLib/shared/System/Threading/ExecutionContext.cs:line 172\r\n     at Xunit.Sdk.ExecutionContextHelper.Run(Object context, Action`1 action) in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\Utility\\ExecutionContextHelper.cs:line 111\r\n     at Xunit.Sdk.MaxConcurrencySyncContext.WorkerThreadProc() in C:\\Dev\\xunit\\xunit\\src\\xunit.execution\\Sdk\\MaxConcurrencySyncContext.cs:line 89\r\n     at Xunit.Sdk.XunitWorkerThread.<>c.<QueueUserWorkItem>b__5_0(Object _) in C:\\Dev\\xunit\\xunit\\src\\common\\XunitWorkerThread.cs:line 37\r\n     at System.Threading.Tasks.Task.InnerInvoke() in /_/src/System.Private.CoreLib/shared/System/Threading/Tasks/Task.cs:line 2449\r\n     at System.Threading.Tasks.Task.<>c.<.cctor>b__274_0(Object obj) in /_/src/System.Private.CoreLib/shared/System/Threading/Tasks/Task.cs:line 2428\r\n     at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) in /_/src/System.Private.CoreLib/shared/System/Threading/ExecutionContext.cs:line 172\r\n     at System.Threading.Tasks.Task.ExecuteWithThreadLocal(Task& currentTaskSlot, Thread threadPoolThread) in /_/src/System.Private.CoreLib/shared/System/Threading/Tasks/Task.cs:line 2385\r\n     at System.Threading.Tasks.Task.ExecuteEntryUnsafe(Thread threadPoolThread) in /_/src/System.Private.CoreLib/shared/System/Threading/Tasks/Task.cs:line 2327\r\n     at System.Threading.Tasks.ThreadPoolTaskScheduler.<>c.<.cctor>b__10_0(Object s) in /_/src/System.Private.CoreLib/shared/System/Threading/Tasks/ThreadPoolTaskScheduler.cs:line 37\r\n     at System.Threading.ThreadHelper.ThreadStart_Context(Object state) in /_/src/System.Private.CoreLib/src/System/Threading/Thread.CoreCLR.cs:line 50\r\n     at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state) in /_/src/System.Private.CoreLib/shared/System/Threading/ExecutionContext.cs:line 172\r\n     at System.Threading.ThreadHelper.ThreadStart(Object obj) in /_/src/System.Private.CoreLib/src/System/Threading/Thread.CoreCLR.cs:line 83\r\n  Unknown Chain Status: UnparseableExtension\r\n  /Users/dotnet/new_source/corefx/artifacts/bin/System.Security.Cryptography.X509Certificates.Tests/netcoreapp-OSX-Debug/RunTests.sh: line 161: 61473 Abort trap: 6           \"$RUNTIME_PATH/dotnet\" exec --runtimeconfig System.Security.Cryptography.X509Certificates.Tests.runtimeconfig.json xunit.console.dll System.Security.Cryptography.X509Certificates.Tests.dll -xml testResults.xml -nologo -notrait category=nonnetcoreapptests -notrait category=nonosxtests -notrait category=OuterLoop -notrait category=failing $RSP_FILE\r\n  ~/new_source/corefx/src/System.Security.Cryptography.X509Certificates/tests\r\n```","Url":"https://github.com/dotnet/corefx/issues/39988","RelatedDescription":"Open issue \"Mac Catalina compatibility: System.Security.Cryptography.X509Certificates.Tests crashing\" (#39988)"},{"Id":"476388806","IsPullRequest":false,"CreatedAt":"2019-08-02T23:31:28","Actor":"ivdiazsa","Number":"39987","RawContent":null,"Title":"Use GetPathOfFileAbove where appropriate","State":"open","Body":"Following up from CoreCLR's repo Issue 20582, there are certain places in the source code where GetPathOfFileAbove usage is preferred to the more verbose GetDirectoryNameOfFileAbove. The following example illustrates both calls:\r\n\r\nChange:\r\n- `\"$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), dir.props))\\dir.props\"`\r\n\r\nTo:\r\n- `\"$([MSBuild]::GetPathOfFileAbove(dir.props))\"`\r\n\r\nThe second one is easier to read and less prone to mistakes if edition is ever required. Are there any reasons to not use GetPathOfFileAbove in CoreFX?","Url":"https://github.com/dotnet/corefx/issues/39987","RelatedDescription":"Open issue \"Use GetPathOfFileAbove where appropriate\" (#39987)"},{"Id":"476377245","IsPullRequest":true,"CreatedAt":"2019-08-02T22:28:26","Actor":"benaadams","Number":"39986","RawContent":null,"Title":"Use non-virtual IsAuthenticated internal to SslStream","State":"open","Body":"It gets called a lot\r\n\r\n![image](https://user-images.githubusercontent.com/1142958/62402685-cd850900-b580-11e9-92a2-cdd47aa96908.png)\r\n\r\nI was trying to workout why it didn't inline, and its because its an virtual override. So use a concrete method internal to SslStream rather than virtual method so improve the performance of the high number of calls.\r\n\r\n/cc @stephentoub @davidsh ","Url":"https://github.com/dotnet/corefx/pull/39986","RelatedDescription":"Open PR \"Use non-virtual IsAuthenticated internal to SslStream\" (#39986)"},{"Id":"476376962","IsPullRequest":true,"CreatedAt":"2019-08-02T22:27:17","Actor":"geoffkizer","Number":"39985","RawContent":null,"Title":"HTTP2: Fix exceptions thrown from SendHeadersAsync to be consistent","State":"open","Body":"Fixes #39966 \r\n\r\nSee comments in that issue for a description of the change and rationale.","Url":"https://github.com/dotnet/corefx/pull/39985","RelatedDescription":"Open PR \"HTTP2: Fix exceptions thrown from SendHeadersAsync to be consistent\" (#39985)"},{"Id":"476371687","IsPullRequest":true,"CreatedAt":"2019-08-02T22:03:39","Actor":"buyaa-n","Number":"39984","RawContent":null,"Title":"[release/3.0] For Mac Catalina build, suppress warnings porting to 3.0","State":"open","Body":"#### Description \r\nSuppressing warnings for deprecated methods in macOS 10.15 (Porting from master)\r\n\t\t\r\n#### Customer Impact \r\nNo impact\r\n\t\t\r\n#### Regression? \r\nNo\r\n\t\t\r\n#### Risk \r\nNo\r\n\r\n","Url":"https://github.com/dotnet/corefx/pull/39984","RelatedDescription":"Open PR \"[release/3.0] For Mac Catalina build, suppress warnings porting to 3.0\" (#39984)"},{"Id":"476335388","IsPullRequest":false,"CreatedAt":"2019-08-02T20:01:43","Actor":"CodArs-van","Number":"39983","RawContent":null,"Title":"Bitmap Clone throws away all metadata on Linux","State":"open","Body":"## Development Environment\r\n\r\n.Net Core: 2.2.401\r\nSystem.Imaging.Common: 4.5.1\r\n\r\n## Operating System\r\nWindows: 10\r\nLinux: Ubuntu 18.04\r\n\r\n## Sample Code\r\n```csharp\r\nBitmap source(path);\r\nvar cloned = source.Clone(new Rectangle(0, 0, source.Width, source.Height), PixelFormat.Format24bppRgb);\r\nConsole.WriteLine($\"Length: {cloned.PropertyItems.Length}\");\r\n```\r\n\r\n## Repro Steps:\r\n1. Build & Run on Linux with a Bitmap having metadata\r\n2. On Linux, prints \"Length: 0\"\r\n3. On Windows, prints non zero","Url":"https://github.com/dotnet/corefx/issues/39983","RelatedDescription":"Open issue \"Bitmap Clone throws away all metadata on Linux\" (#39983)"}],"ResultType":"GitHubIssue"},"Roslyn-Issues":{"Issues":[{"Id":"476651436","IsPullRequest":false,"CreatedAt":"2019-08-05T04:32:44","Actor":"sunkin351","Number":"37720","RawContent":null,"Title":"XML documentation feature: Embeding <see href=\"\"/> link into VS doc hint window","State":"open","Body":"I wish to have the ability to embed a link in (what others are telling me to call) the \"parameter info box\" that shows you the summary of the XML documentation when you hover over a Type or type member. I want to embed a link to the official documentation of a class or member that's clickable from the hint window.\r\n\r\nAn example:\r\n```cs\r\n/// <summary>\r\n/// My Function. <see href=\"http://www.example.com/path/to/documentation.xml\">See this documentation</see>\r\n/// </summary>\r\npublic static void MyFunction()\r\n{\r\n}\r\n```\r\n\r\nIf this isn't possible, please explain why. ^^ It would be awesome to have this.\r\nEdit: This is an IDE feature request btw","Url":"https://github.com/dotnet/roslyn/issues/37720","RelatedDescription":"Open issue \"XML documentation feature: Embeding <see href=\"\"/> link into VS doc hint window\" (#37720)"},{"Id":"476607323","IsPullRequest":false,"CreatedAt":"2019-08-05T00:34:03","Actor":"Gnbrkm41","Number":"37719","RawContent":null,"Title":"different forms of double.MaxValue/MinValue might be recognised as out of range","State":"closed","Body":"**Version Used**: \r\nUsing Microsoft.Scripting.CSharp.Scripting package, version 3.3.0-beta2-19376-02(fc001df5)\r\n**Steps to Reproduce**:\r\n\r\n1. Copy the values returned from double.MaxValue/MinValue.ToString (which by default is \"R\"), which is printed as (+/-)1.79769313486232E+308 on .NET Core 3.0 P7.\r\n2. Try to use the value as a floating point literal in codes\r\n\r\n**Expected Behavior**:\r\nShould compile fine.\r\n\r\n**Actual Behavior**:\r\nFails to compile with the error CS0594 \"Floating-point constant is outside the range of type 'double'\".\r\n\r\nThe [System.Double source](https://github.com/dotnet/coreclr/blob/86d56cee7311dcf07e4ec3149c364da40c25ba87/src/System.Private.CoreLib/shared/System/Double.cs#L35) uses (+/-)1.7976931348623157E+308 instead. Feeding the value from ToString to Parse straight away (`double.Parse(double.MaxValue.ToString())`) seems to work fine without exceptions, which makes me believe the CoreLib should be IEEE compliant.... but @tannergooding probably knows better there. :smile: ","Url":"https://github.com/dotnet/roslyn/issues/37719","RelatedDescription":"Closed issue \"different forms of double.MaxValue/MinValue might be recognised as out of range\" (#37719)"},{"Id":"476598277","IsPullRequest":true,"CreatedAt":"2019-08-04T21:58:13","Actor":"jnm2","Number":"37718","RawContent":null,"Title":"UseExpressionBody cleanup","State":"open","Body":"I have this in another branch that I'm still working on, but I thought a separate PR would make reviewing easier.\r\n\r\nSee commit messages.\r\n\r\n/cc @CyrusNajmabadi who wrote the original code","Url":"https://github.com/dotnet/roslyn/pull/37718","RelatedDescription":"Open PR \"UseExpressionBody cleanup\" (#37718)"},{"Id":"476588074","IsPullRequest":false,"CreatedAt":"2019-08-04T19:58:16","Actor":"alrz","Number":"37717","RawContent":null,"Title":"Improve diagnostics when the project is not restored yet","State":"open","Body":"When a solution is opened in VS that is not restored yet, there can be hundreds of errors on missing built-in types. This can also happen when a sdk is missing so a mere restore won't resolve errors either. \r\n\r\nIn this state, navigation on user-code does work but there will be so many IDE squiggles that make it hard to even browse/read the code. Could we improve experience by not emitting all the errors when a design-time build is not possible at the moment?","Url":"https://github.com/dotnet/roslyn/issues/37717","RelatedDescription":"Open issue \"Improve diagnostics when the project is not restored yet\" (#37717)"},{"Id":"476545385","IsPullRequest":true,"CreatedAt":"2019-08-04T14:00:06","Actor":"dotnet-bot","Number":"37716","RawContent":null,"Title":"Merge master-vs-deps to release/dev16.4-preview1-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master-vs-deps into release/dev16.4-preview1-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-vs-deps-to-release/dev16.4-preview1-vs-deps\ngit reset --hard upstream/release/dev16.4-preview1-vs-deps\ngit merge upstream/master-vs-deps\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-vs-deps-to-release/dev16.4-preview1-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/37716","RelatedDescription":"Closed or merged PR \"Merge master-vs-deps to release/dev16.4-preview1-vs-deps\" (#37716)"},{"Id":"476545372","IsPullRequest":true,"CreatedAt":"2019-08-04T12:01:24","Actor":"dotnet-bot","Number":"37715","RawContent":null,"Title":"Merge release/dev16.3-preview2-vs-deps to master-vs-deps","State":"open","Body":"\nThis is an automatically generated pull request from release/dev16.3-preview2-vs-deps into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.3-preview2-vs-deps-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/release/dev16.3-preview2-vs-deps\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.3-preview2-vs-deps-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/37715","RelatedDescription":"Open PR \"Merge release/dev16.3-preview2-vs-deps to master-vs-deps\" (#37715)"},{"Id":"476445114","IsPullRequest":true,"CreatedAt":"2019-08-04T04:00:17","Actor":"dotnet-bot","Number":"37704","RawContent":null,"Title":"Merge release/dev16.3-preview2-vs-deps to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from release/dev16.3-preview2-vs-deps into master-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.3-preview2-vs-deps-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/release/dev16.3-preview2-vs-deps\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.3-preview2-vs-deps-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/37704","RelatedDescription":"Closed or merged PR \"Merge release/dev16.3-preview2-vs-deps to master-vs-deps\" (#37704)"},{"Id":"476500133","IsPullRequest":true,"CreatedAt":"2019-08-04T04:00:06","Actor":"dotnet-bot","Number":"37714","RawContent":null,"Title":"Merge master-vs-deps to release/dev16.4-preview1-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master-vs-deps into release/dev16.4-preview1-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/master-vs-deps-to-release/dev16.4-preview1-vs-deps\ngit reset --hard upstream/release/dev16.4-preview1-vs-deps\ngit merge upstream/master-vs-deps\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-vs-deps-to-release/dev16.4-preview1-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/37714","RelatedDescription":"Closed or merged PR \"Merge master-vs-deps to release/dev16.4-preview1-vs-deps\" (#37714)"},{"Id":"476499594","IsPullRequest":false,"CreatedAt":"2019-08-03T23:49:57","Actor":"gafter","Number":"37713","RawContent":null,"Title":"Test await in switch arm when state machine has a live ref struct value","State":"open","Body":"We should test both the switch statement and the switch expression behavior when there is an await in the when expression, and the switch's state machine contains a value of a ref struct type that is still alive after the when (e.g. when it is false).  Such a temp would have to be spilled but cannot be spilled, so a diagnostic must be given.","Url":"https://github.com/dotnet/roslyn/issues/37713","RelatedDescription":"Open issue \"Test await in switch arm when state machine has a live ref struct value\" (#37713)"},{"Id":"476445208","IsPullRequest":true,"CreatedAt":"2019-08-03T22:30:06","Actor":"dotnet-bot","Number":"37706","RawContent":null,"Title":"Merge release/dev16.4-preview1 to release/dev16.4-preview1-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from release/dev16.4-preview1 into release/dev16.4-preview1-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.4-preview1-to-release/dev16.4-preview1-vs-deps\ngit reset --hard upstream/release/dev16.4-preview1-vs-deps\ngit merge upstream/release/dev16.4-preview1\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.4-preview1-to-release/dev16.4-preview1-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/37706","RelatedDescription":"Closed or merged PR \"Merge release/dev16.4-preview1 to release/dev16.4-preview1-vs-deps\" (#37706)"},{"Id":"476492822","IsPullRequest":false,"CreatedAt":"2019-08-03T21:55:54","Actor":"gafter","Number":"37712","RawContent":null,"Title":"Test async pattern returning ref struct","State":"open","Body":"We should test the use of `await` on an API that is shaped appropriately for the await pattern, but for which the result type is a ref struct.  That should cause a compile-time error, as ref struct values cannot be spilled.  However it is not clear where in the compiler such a diagnostic would be produced.  I conjecture compiling a program such as this would today produce code that crashes at runtime.","Url":"https://github.com/dotnet/roslyn/issues/37712","RelatedDescription":"Open issue \"Test async pattern returning ref struct\" (#37712)"},{"Id":"476492155","IsPullRequest":true,"CreatedAt":"2019-08-03T21:45:50","Actor":"gafter","Number":"37711","RawContent":null,"Title":"Permit stackalloc to be used in an async method as long as it need not be spilled.","State":"open","Body":"Fixes #37461","Url":"https://github.com/dotnet/roslyn/pull/37711","RelatedDescription":"Open PR \"Permit stackalloc to be used in an async method as long as it need not be spilled.\" (#37711)"},{"Id":"476489652","IsPullRequest":false,"CreatedAt":"2019-08-03T21:09:09","Actor":"jnm2","Number":"37710","RawContent":null,"Title":"'Add missing cases' for type hierarchy","State":"open","Body":"If the expression type is an interface or a non-sealed class (or a generic type parameter constrained to a one or more of these), it's useful to generate cases for all derived or implementing types currently available to the project and to warn or suggest generating them if any are missing.\r\n\r\nCases should be generated for derived classes and interfaces even if they themselves have types that inherit or implement them, just in case future types are added to the hierarchy. This is symmetrical with having a default case at the top level.\r\n\r\nI'm not sure what should happen with types with free generic parameters, but my preference would be to generate the invalid code `case ImplementingType<> _:` so that the user doesn't overlook the possibility.\r\n\r\nThe classes `System.Object`, `System.Enum`, `System.ValueType`, `System.Delegate`, and `System.MulticastDelegate` should be excluded from this.\r\nMaybe other types such as `System.Attribute` and `System.IComparable` should be excluded, but on what basis? Maybe you're writing a method that handles `IEnumerable<T>` things and want to hit several of the top possibilities like `T[]`, `IReadOnlyCollection<T>`, `ICollection<T>`, etc. Deleting 90% of the generated cases is still probably a good experience compared to having to do all the typing for the 10% yourself. I'm not sure where the line is.","Url":"https://github.com/dotnet/roslyn/issues/37710","RelatedDescription":"Open issue \"'Add missing cases' for type hierarchy\" (#37710)"},{"Id":"476421822","IsPullRequest":true,"CreatedAt":"2019-08-03T20:30:19","Actor":"dotnet-bot","Number":"37698","RawContent":null,"Title":"Merge master-vs-deps to release/dev16.4-preview1-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master-vs-deps into release/dev16.4-preview1-vs-deps.\n(created from a manual run of the PR generation tool)\n\n``` bash\ngit fetch --all\ngit checkout merges/master-vs-deps-to-release/dev16.4-preview1-vs-deps\ngit reset --hard upstream/release/dev16.4-preview1-vs-deps\ngit merge upstream/master-vs-deps\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-vs-deps-to-release/dev16.4-preview1-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/37698","RelatedDescription":"Closed or merged PR \"Merge master-vs-deps to release/dev16.4-preview1-vs-deps\" (#37698)"},{"Id":"476456416","IsPullRequest":false,"CreatedAt":"2019-08-03T14:25:08","Actor":"theraot","Number":"37709","RawContent":null,"Title":"IDE0059 on ref parameter","State":"open","Body":"**Version Used**: \r\n\r\n**Steps to Reproduce**:\r\n\r\nI get IDE0059 on following code snippet:\r\n\r\n    public void DoSomething(ref bool p)\r\n    {\r\n        if (p)\r\n        {\r\n            p = false; // <--- IDE0059\r\n            throw new ArgumentException(string.Empty);\r\n        }\r\n\r\n        DoSomethingExtracted(0, ref p);\r\n    }\r\n\r\n**Expected Behavior**:\r\n\r\nIDE0059 should not be triggered because it is modifying a ref parameter.\r\n\r\n**Actual Behavior**:\r\n\r\nThe analitic recognizes that the ref parameter is not being used in the current method after its value its set. However, it appears to ignore the fact that it is a ref parameter, and thus this change is visible to the caller. Apparently the fact that I wrote an exception instead of returning causes this (changing `throw new ArgumentException(string.Empty);` to `return;` make it go away).","Url":"https://github.com/dotnet/roslyn/issues/37709","RelatedDescription":"Open issue \"IDE0059 on ref parameter\" (#37709)"},{"Id":"476456169","IsPullRequest":false,"CreatedAt":"2019-08-03T14:22:03","Actor":"davidhunter22","Number":"37708","RawContent":null,"Title":"Support Nullable reference syntax in 7.X","State":"open","Body":"I would love to switch on and use the new nullable reference stuff in 8.0. However 8.0 is not production yet and it will be a while before we switch to it even when it is. So I was wondering if it possible to at least accept and ignore the syntax in a 7.X compiler. That way  I can add all the \"?\" annotations to the code and get the checking benefit right now when using 8.0 but quietly ignore them when compiling production.\r\nSo this is not a request for a full back port just a switch to accept and completely ignore the syntax which I assume is simpler.","Url":"https://github.com/dotnet/roslyn/issues/37708","RelatedDescription":"Open issue \"Support Nullable reference syntax in 7.X\" (#37708)"},{"Id":"476445183","IsPullRequest":true,"CreatedAt":"2019-08-03T14:00:11","Actor":"dotnet-bot","Number":"37705","RawContent":null,"Title":"Merge release/dev16.3-preview2 to release/dev16.3-preview2-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from release/dev16.3-preview2 into release/dev16.3-preview2-vs-deps.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.3-preview2-to-release/dev16.3-preview2-vs-deps\ngit reset --hard upstream/release/dev16.3-preview2-vs-deps\ngit merge upstream/release/dev16.3-preview2\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.3-preview2-to-release/dev16.3-preview2-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/37705","RelatedDescription":"Closed or merged PR \"Merge release/dev16.3-preview2 to release/dev16.3-preview2-vs-deps\" (#37705)"},{"Id":"476446462","IsPullRequest":true,"CreatedAt":"2019-08-03T12:18:34","Actor":"dotnet-maestro[bot]","Number":"37707","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:567feadf-e495-4ebb-cee4-08d67668456c)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190803.1\r\n- **Date Produced**: 8/3/2019 1:03 PM\r\n- **Commit**: 3b75ef38a33579dcd32f2912ee69e886356b0f18\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19403.1\r\n\r\n[marker]: <> (End:567feadf-e495-4ebb-cee4-08d67668456c)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/roslyn/pull/37707","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/arcade\" (#37707)"},{"Id":"476435597","IsPullRequest":false,"CreatedAt":"2019-08-03T09:48:12","Actor":"miloush","Number":"37703","RawContent":null,"Title":"Cannot change compiler language version","State":"open","Body":"**Version Used**: 16.3 Preview 1.0\r\n\r\n**Steps to Reproduce**:\r\nProject properties > Build > Advanced...\r\n\r\n**Actual Behavior**:\r\n![image](https://user-images.githubusercontent.com/10546952/62410308-e242ba80-b5db-11e9-86e5-725184a032e4.png)\r\n\r\nIronically the link does not answer the question. Why can I no longer specify the language version? There has always been new language features that required various classes but they could have been provided in the project if needed.\r\n\r\nHow does this work with flavoured projects?","Url":"https://github.com/dotnet/roslyn/issues/37703","RelatedDescription":"Open issue \"Cannot change compiler language version\" (#37703)"},{"Id":"476421883","IsPullRequest":true,"CreatedAt":"2019-08-03T08:30:06","Actor":"dotnet-bot","Number":"37699","RawContent":null,"Title":"Merge master to master-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from master into master-vs-deps.\n(created from a manual run of the PR generation tool)\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-master-vs-deps\ngit reset --hard upstream/master-vs-deps\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-master-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/37699","RelatedDescription":"Closed or merged PR \"Merge master to master-vs-deps\" (#37699)"},{"Id":"476409683","IsPullRequest":true,"CreatedAt":"2019-08-03T08:00:51","Actor":"dotnet-bot","Number":"37694","RawContent":null,"Title":"Merge release/dev16.3-preview2 to release/dev16.3-preview2-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from release/dev16.3-preview2 into release/dev16.3-preview2-vs-deps.\n(created from a manual run of the PR generation tool)\n\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.3-preview2-to-release/dev16.3-preview2-vs-deps\ngit reset --hard upstream/release/dev16.3-preview2-vs-deps\ngit merge upstream/release/dev16.3-preview2\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.3-preview2-to-release/dev16.3-preview2-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/37694","RelatedDescription":"Closed or merged PR \"Merge release/dev16.3-preview2 to release/dev16.3-preview2-vs-deps\" (#37694)"},{"Id":"476421757","IsPullRequest":true,"CreatedAt":"2019-08-03T08:00:40","Actor":"dotnet-bot","Number":"37697","RawContent":null,"Title":"Merge master to release/dev16.4-preview1","State":"closed","Body":"\nThis is an automatically generated pull request from master into release/dev16.4-preview1.\n(created from a manual run of the PR generation tool)\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-release/dev16.4-preview1\ngit reset --hard upstream/release/dev16.4-preview1\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-release/dev16.4-preview1 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/37697","RelatedDescription":"Closed or merged PR \"Merge master to release/dev16.4-preview1\" (#37697)"},{"Id":"476421890","IsPullRequest":true,"CreatedAt":"2019-08-03T08:00:17","Actor":"dotnet-bot","Number":"37700","RawContent":null,"Title":"Merge release/dev16.4-preview1 to release/dev16.4-preview1-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from release/dev16.4-preview1 into release/dev16.4-preview1-vs-deps.\n(created from a manual run of the PR generation tool)\n\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.4-preview1-to-release/dev16.4-preview1-vs-deps\ngit reset --hard upstream/release/dev16.4-preview1-vs-deps\ngit merge upstream/release/dev16.4-preview1\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.4-preview1-to-release/dev16.4-preview1-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/37700","RelatedDescription":"Closed or merged PR \"Merge release/dev16.4-preview1 to release/dev16.4-preview1-vs-deps\" (#37700)"},{"Id":"476421914","IsPullRequest":true,"CreatedAt":"2019-08-03T08:00:07","Actor":"dotnet-bot","Number":"37702","RawContent":null,"Title":"Merge master to features/param-nullchecking","State":"closed","Body":"\nThis is an automatically generated pull request from master into features/param-nullchecking.\n(created from a manual run of the PR generation tool)\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/param-nullchecking\ngit reset --hard upstream/features/param-nullchecking\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/param-nullchecking --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/37702","RelatedDescription":"Closed or merged PR \"Merge master to features/param-nullchecking\" (#37702)"},{"Id":"476421899","IsPullRequest":true,"CreatedAt":"2019-08-03T06:33:08","Actor":"dotnet-bot","Number":"37701","RawContent":null,"Title":"Merge master to features/NullableDogfood","State":"open","Body":"\nThis is an automatically generated pull request from master into features/NullableDogfood.\n(created from a manual run of the PR generation tool)\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-features/NullableDogfood\ngit reset --hard upstream/features/NullableDogfood\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-features/NullableDogfood --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/37701","RelatedDescription":"Open PR \"Merge master to features/NullableDogfood\" (#37701)"},{"Id":"476409967","IsPullRequest":true,"CreatedAt":"2019-08-03T06:22:06","Actor":"JoeRobich","Number":"37696","RawContent":null,"Title":"Merge release/dev16.3-preview2 into master","State":"closed","Body":"This config was missing from the automerge","Url":"https://github.com/dotnet/roslyn/pull/37696","RelatedDescription":"Closed or merged PR \"Merge release/dev16.3-preview2 into master\" (#37696)"},{"Id":"476409599","IsPullRequest":true,"CreatedAt":"2019-08-03T04:50:51","Actor":"dotnet-bot","Number":"37693","RawContent":null,"Title":"Merge master to release/dev16.4-preview1","State":"closed","Body":"\nThis is an automatically generated pull request from master into release/dev16.4-preview1.\n(created from a manual run of the PR generation tool)\n\n``` bash\ngit fetch --all\ngit checkout merges/master-to-release/dev16.4-preview1\ngit reset --hard upstream/release/dev16.4-preview1\ngit merge upstream/master\n# Fix merge conflicts\ngit commit\ngit push upstream merges/master-to-release/dev16.4-preview1 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/37693","RelatedDescription":"Closed or merged PR \"Merge master to release/dev16.4-preview1\" (#37693)"},{"Id":"476409697","IsPullRequest":true,"CreatedAt":"2019-08-03T04:50:35","Actor":"dotnet-bot","Number":"37695","RawContent":null,"Title":"Merge release/dev16.4-preview1 to release/dev16.4-preview1-vs-deps","State":"closed","Body":"\nThis is an automatically generated pull request from release/dev16.4-preview1 into release/dev16.4-preview1-vs-deps.\n(created from a manual run of the PR generation tool)\n\n``` bash\ngit fetch --all\ngit checkout merges/release/dev16.4-preview1-to-release/dev16.4-preview1-vs-deps\ngit reset --hard upstream/release/dev16.4-preview1-vs-deps\ngit merge upstream/release/dev16.4-preview1\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/dev16.4-preview1-to-release/dev16.4-preview1-vs-deps --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/roslyn/pull/37695","RelatedDescription":"Closed or merged PR \"Merge release/dev16.4-preview1 to release/dev16.4-preview1-vs-deps\" (#37695)"},{"Id":"476408521","IsPullRequest":false,"CreatedAt":"2019-08-03T02:52:09","Actor":"CyrusNajmabadi","Number":"37692","RawContent":null,"Title":"compiler assert in refactoring.","State":"open","Body":"I tried to inline a local variable into a `..` range.  i.e.:\r\n\r\n```c#\r\n            var start = SeparatedSyntaxList.Length + 1;\r\n            var end = fieldType.Length - 1;\r\n            var underlyingType = fieldType[start..end];\r\n```\r\n\r\nI was trying to inline `start` and `end` into the range.\r\n\r\nThis caused the following crash:\r\n\r\n```\r\nSystem.NullReferenceException : Object reference not set to an instance of an object.\r\n   at Microsoft.CodeAnalysis.CSharp.MessageIDExtensions.CheckFeatureAvailability(MessageID feature,DiagnosticBag diagnostics,Location errorLocation)\r\n   at Microsoft.CodeAnalysis.CSharp.Binder.TryBindIndexOrRangeIndexer(SyntaxNode syntax,BoundExpression receiverOpt,ArrayBuilder`1 arguments,DiagnosticBag diagnostics,BoundIndexOrRangePatternIndexerAccess& patternIndexerAccess)\r\n   at Microsoft.CodeAnalysis.CSharp.Binder.BindIndexerOrIndexedPropertyAccess(SyntaxNode syntax,BoundExpression receiverOpt,ArrayBuilder`1 propertyGroup,AnalyzedArguments analyzedArguments,DiagnosticBag diagnostics)\r\n   at Microsoft.CodeAnalysis.CSharp.Binder.BindIndexerAccess(ExpressionSyntax node,BoundExpression expr,AnalyzedArguments analyzedArguments,DiagnosticBag diagnostics)\r\n   at Microsoft.CodeAnalysis.CSharp.Binder.BindElementAccessCore(ExpressionSyntax node,BoundExpression expr,AnalyzedArguments arguments,DiagnosticBag diagnostics)\r\n   at Microsoft.CodeAnalysis.CSharp.Binder.BindElementOrIndexerAccess(ExpressionSyntax node,BoundExpression expr,AnalyzedArguments analyzedArguments,DiagnosticBag diagnostics)\r\n   at Microsoft.CodeAnalysis.CSharp.Binder.BindElementAccess(ExpressionSyntax node,BoundExpression receiver,BracketedArgumentListSyntax argumentList,DiagnosticBag diagnostics)\r\n   at Microsoft.CodeAnalysis.CSharp.Binder.BindElementAccess(ElementAccessExpressionSyntax node,DiagnosticBag diagnostics)\r\n   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpressionInternal(ExpressionSyntax node,DiagnosticBag diagnostics,Boolean invoked,Boolean indexed)\r\n   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpression(ExpressionSyntax node,DiagnosticBag diagnostics,Boolean invoked,Boolean indexed)\r\n   at Microsoft.CodeAnalysis.CSharp.Binder.BindInferredVariableInitializer(DiagnosticBag diagnostics,ExpressionSyntax initializer,BindValueKind valueKind,RefKind refKind,CSharpSyntaxNode errorSyntax)\r\n   at Microsoft.CodeAnalysis.CSharp.Binder.BindVariableDeclaration(SourceLocalSymbol localSymbol,LocalDeclarationKind kind,Boolean isVar,VariableDeclaratorSyntax declarator,TypeSyntax typeSyntax,TypeWithAnnotations declTypeOpt,AliasSymbol aliasOpt,DiagnosticBag diagnostics,Boolean includeBoundType,CSharpSyntaxNode associatedSyntaxNode)\r\n   at Microsoft.CodeAnalysis.CSharp.Binder.BindDeclarationStatementParts(LocalDeclarationStatementSyntax node,DiagnosticBag diagnostics)\r\n   at Microsoft.CodeAnalysis.CSharp.Binder.BindLocalDeclarationStatement(LocalDeclarationStatementSyntax node,DiagnosticBag diagnostics)\r\n   at Microsoft.CodeAnalysis.CSharp.Binder.BindStatement(StatementSyntax node,DiagnosticBag diagnostics)\r\n   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.IncrementalBinder.BindStatement(StatementSyntax node,DiagnosticBag diagnostics)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.Bind(Binder binder,CSharpSyntaxNode node,DiagnosticBag diagnostics)\r\n   at Microsoft.CodeAnalysis.CSharp.MethodBodySemanticModel.Bind(Binder binder,CSharpSyntaxNode node,DiagnosticBag diagnostics)\r\n   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetBoundNodes(CSharpSyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetLowerBoundNode(CSharpSyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetBoundNodes(CSharpSyntaxNode node,CSharpSyntaxNode& bindableNode,BoundNode& lowestBoundNode,BoundNode& highestBoundNode,BoundNode& boundParent)\r\n   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetTypeInfoWorker(CSharpSyntaxNode node,CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetTypeInfo(ExpressionSyntax expression,CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetTypeInfo(SemanticModel semanticModel,ExpressionSyntax expression,CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.CSharp.Extensions.CastExpressionSyntaxExtensions.IsUnnecessaryCast(CastExpressionSyntax cast,SemanticModel semanticModel,CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.CSharp.Extensions.ExpressionSyntaxExtensions.CastIfPossible(ExpressionSyntax expression,ITypeSymbol targetType,Int32 position,SemanticModel semanticModel)\r\n   at Microsoft.CodeAnalysis.CSharp.Simplification.CSharpSimplificationService.Expander.TryCastTo(ITypeSymbol targetType,ExpressionSyntax expression,ExpressionSyntax newExpression,ExpressionSyntax& newExpressionWithCast)\r\n   at Microsoft.CodeAnalysis.CSharp.Simplification.CSharpSimplificationService.Expander.VisitArgument(ArgumentSyntax node)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.ArgumentSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.Simplification.CSharpSimplificationService.Expander.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitListElement[TNode](TNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitList[TNode](SeparatedSyntaxList`1 list)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitBracketedArgumentList(BracketedArgumentListSyntax node)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.BracketedArgumentListSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.Simplification.CSharpSimplificationService.Expander.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitElementAccessExpression(ElementAccessExpressionSyntax node)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.ElementAccessExpressionSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.Simplification.CSharpSimplificationService.Expander.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.Simplification.CSharpSimplificationService.Expand(SyntaxNode node,SemanticModel semanticModel,SyntaxAnnotation annotationForReplacedAliasIdentifier,Func`2 expandInsideNode,Boolean expandParameter,CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.Simplification.Simplifier.Expand[TNode](TNode node,SemanticModel semanticModel,Workspace workspace,Func`2 expandInsideNode,Boolean expandParameter,CancellationToken cancellationToken)\r\n   at Microsoft.CodeAnalysis.CSharp.CodeRefactorings.InlineTemporary.InlineTemporaryCodeRefactoringProvider.<>c__DisplayClass9_0.<InlineTemporaryAsync>b__5(SyntaxNode o,SyntaxNode n)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.SyntaxReplacer.Replacer`1.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitEqualsValueClause(EqualsValueClauseSyntax node)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.EqualsValueClauseSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.SyntaxReplacer.Replacer`1.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitVariableDeclarator(VariableDeclaratorSyntax node)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclaratorSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.SyntaxReplacer.Replacer`1.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitListElement[TNode](TNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitList[TNode](SeparatedSyntaxList`1 list)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitVariableDeclaration(VariableDeclarationSyntax node)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.VariableDeclarationSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.SyntaxReplacer.Replacer`1.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitLocalDeclarationStatement(LocalDeclarationStatementSyntax node)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.LocalDeclarationStatementSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.SyntaxReplacer.Replacer`1.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitListElement[TNode](TNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitList[TNode](SyntaxList`1 list)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitBlock(BlockSyntax node)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.BlockSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.SyntaxReplacer.Replacer`1.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitMethodDeclaration(MethodDeclarationSyntax node)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.MethodDeclarationSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.SyntaxReplacer.Replacer`1.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitListElement[TNode](TNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitList[TNode](SyntaxList`1 list)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitClassDeclaration(ClassDeclarationSyntax node)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.ClassDeclarationSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.SyntaxReplacer.Replacer`1.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitListElement[TNode](TNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitList[TNode](SyntaxList`1 list)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitNamespaceDeclaration(NamespaceDeclarationSyntax node)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.NamespaceDeclarationSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.SyntaxReplacer.Replacer`1.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitListElement[TNode](TNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitList[TNode](SyntaxList`1 list)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitCompilationUnit(CompilationUnitSyntax node)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.CompilationUnitSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.SyntaxReplacer.Replacer`1.Visit(SyntaxNode node)\r\n   at Microsoft.CodeAnalysis.CSharp.Syntax.SyntaxReplacer.Replace[TNode](SyntaxNode root,IEnumerable`1 nodes,Func`3 computeReplacementNode,IEnumerable`1 tokens,Func`3 computeReplacementToken,IEnumerable`1 trivia,Func`3 computeReplacementTrivia)\r\n   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxNode.ReplaceCore[TNode](IEnumerable`1 nodes,Func`3 computeReplacementNode,IEnumerable`1 tokens,Func`3 computeReplacementToken,IEnumerable`1 trivia,Func`3 computeReplacementTrivia)\r\n   at Microsoft.CodeAnalysis.SyntaxNodeExtensions.ReplaceNodes[TRoot,TNode](TRoot root,IEnumerable`1 nodes,Func`3 computeReplacementNode)\r\n   at async Microsoft.CodeAnalysis.Shared.Extensions.DocumentExtensions.ReplaceNodesAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.CSharp.CodeRefactorings.InlineTemporary.InlineTemporaryCodeRefactoringProvider.InlineTemporaryAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.GetChangedSolutionAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.ComputeOperationsAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.GetPreviewOperationsAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.GetPreviewResultAsync(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedActionWithNestedFlavors.<>c__DisplayClass11_0.<GetPreviewAsync>b__0(<Unknown Parameters>)\r\n   at async Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformFunctionAsync[T](<Unknown Parameters>)\r\n   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)\r\n```","Url":"https://github.com/dotnet/roslyn/issues/37692","RelatedDescription":"Open issue \"compiler assert in refactoring.\" (#37692)"},{"Id":"476404926","IsPullRequest":true,"CreatedAt":"2019-08-03T01:59:15","Actor":"ivanbasov","Number":"37691","RawContent":null,"Title":"UniqueItem is not triggered when completion is initiated by backspace","State":"open","Body":"Fixes https://github.com/dotnet/roslyn/issues/37231","Url":"https://github.com/dotnet/roslyn/pull/37691","RelatedDescription":"Open PR \"UniqueItem is not triggered when completion is initiated by backspace\" (#37691)"}],"ResultType":"GitHubIssue"},"CoreRT-Issues":{"Issues":[{"Id":"476583894","IsPullRequest":true,"CreatedAt":"2019-08-04T19:18:34","Actor":"MichalStrehovsky","Number":"7666","RawContent":null,"Title":"Add a note about `strip` program","State":"closed","Body":"","Url":"https://github.com/dotnet/corert/pull/7666","RelatedDescription":"Closed or merged PR \"Add a note about `strip` program\" (#7666)"},{"Id":"476583904","IsPullRequest":true,"CreatedAt":"2019-08-04T19:07:53","Actor":"MichalStrehovsky","Number":"7667","RawContent":null,"Title":"Add a doc on debugging CoreRT programs","State":"open","Body":"A couple useful tips.","Url":"https://github.com/dotnet/corert/pull/7667","RelatedDescription":"Open PR \"Add a doc on debugging CoreRT programs\" (#7667)"},{"Id":"476583874","IsPullRequest":true,"CreatedAt":"2019-08-04T19:07:32","Actor":"MichalStrehovsky","Number":"7665","RawContent":null,"Title":"Fix stack traces when reflection is disabled","State":"open","Body":"This enables stack trace metadata when `IlcDisableReflection == true` and `IlcGenerateStackTraceData == true`. Enabling stack trace metadata had no effect before this change.\r\n\r\nThis also has a side effect of always generating the metadata blob. This is necessary because `ModuleList` tends to ignore modules that don't have the embedded metadata blob (https://github.com/dotnet/corert/blob/635cf21aca11265ded9d78d216424bd609c052f5/src/System.Private.TypeLoader/src/Internal/Runtime/TypeLoader/ModuleList.cs#L713-L720). Emitting an empty blob fixes the bug where delegate interop didn't work with reflection disabled.","Url":"https://github.com/dotnet/corert/pull/7665","RelatedDescription":"Open PR \"Fix stack traces when reflection is disabled\" (#7665)"},{"Id":"476442652","IsPullRequest":false,"CreatedAt":"2019-08-03T13:05:03","Actor":"shaggygi","Number":"7664","RawContent":null,"Title":"[Question] Clean up milestones","State":"closed","Body":"Not a biggie, but could older milestones be closed?  See [September](https://github.com/dotnet/corert/milestone/15) and [October](https://github.com/dotnet/corert/milestone/14).","Url":"https://github.com/dotnet/corert/issues/7664","RelatedDescription":"Closed issue \"[Question] Clean up milestones\" (#7664)"},{"Id":"476147096","IsPullRequest":true,"CreatedAt":"2019-08-02T13:36:07","Actor":"Dotnet-GitSync-Bot","Number":"7663","RawContent":null,"Title":"Mirror changes from dotnet/corefx,coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx,coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7663","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx,coreclr\" (#7663)"},{"Id":"475993675","IsPullRequest":true,"CreatedAt":"2019-08-02T12:03:22","Actor":"Dotnet-GitSync-Bot","Number":"7662","RawContent":null,"Title":"Mirror changes from dotnet/coreclr","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**\n\n cc @josalem","Url":"https://github.com/dotnet/corert/pull/7662","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr\" (#7662)"},{"Id":"475915591","IsPullRequest":true,"CreatedAt":"2019-08-02T04:42:37","Actor":"Dotnet-GitSync-Bot","Number":"7661","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub @ts2do @sywhang","Url":"https://github.com/dotnet/corert/pull/7661","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#7661)"},{"Id":"475661957","IsPullRequest":false,"CreatedAt":"2019-08-01T13:06:06","Actor":"kvittokonito","Number":"7660","RawContent":null,"Title":"Inconsistent usage of rd.xml on referenced projects","State":"closed","Body":"When AOT compiling projects with dependent referenced projects via CoreRT, the rd.xml of the referenced child dependent projects is read used but that feature seems to be inconsistent at best.\r\nSupported directives are properly parsed and used but unsupported directives that would error on the root project such as \"<Namespace />\" do not throw an error and instead are ignored without warning.\r\n\r\nFor example, the following directive will produce an unsupported error when it is included in the rd.xml of the root project:\r\n`<Namespace Name=\"System.Collections.Generic\" Dynamic=\"Required All\" />`\r\n\r\nHowever, this directive will simply be silently ignored if it is included in the rd.xml of a project referenced via \"<ProjectReference />\" on the csproj of the root project.","Url":"https://github.com/dotnet/corert/issues/7660","RelatedDescription":"Closed issue \"Inconsistent usage of rd.xml on referenced projects\" (#7660)"},{"Id":"474043889","IsPullRequest":true,"CreatedAt":"2019-07-29T13:12:31","Actor":"MichalStrehovsky","Number":"7659","RawContent":null,"Title":"Prevent computing bad layout","State":"open","Body":"Value type fields that contain GC pointers need to start at pointer boundaries.\r\n\r\nCoreCLR does this check a bit differently (it technically allows unaligned fields, provided the GC pointer inside the valuetype ends up being aligned with respect to the beginning of the type, but in reality, I don't think it's possible to end up in such situation - the layout of the field type itself would end up being invalid).\r\n\r\nFixes one of the CPAOT failures.","Url":"https://github.com/dotnet/corert/pull/7659","RelatedDescription":"Open PR \"Prevent computing bad layout\" (#7659)"},{"Id":"473658285","IsPullRequest":true,"CreatedAt":"2019-07-29T06:41:45","Actor":"MichalStrehovsky","Number":"7657","RawContent":null,"Title":"Split interop manager to usage- and analysis-based","State":"closed","Body":"This puts interop manager on the same plan as metadata manager. The reason we need two managers is inlining: to determine what structs/delegates need marshaling data, we look at what methods got compiled. This works great as long as there's no inlining of these methods. If we inline a method used as such marker, we lose track of what needs interop data.\r\n\r\nWith this split, we can collect usage information during the IL scanning phase, and for codegen phase, we can reuse the information from the scanner.\r\n\r\nCommit 4c1058a removes a bunch of workarounds that we had in place because of this.\r\n\r\nThe commits mostly make sense (might help reviewing this big change), although I'm planning to squash them anyway. The `Don't make so much marshalling data` commit undoes something I did wrong in the `Track interop dependencies in the dependency graph` commit.\r\n\r\nFixes #6063.","Url":"https://github.com/dotnet/corert/pull/7657","RelatedDescription":"Closed or merged PR \"Split interop manager to usage- and analysis-based\" (#7657)"},{"Id":"473677246","IsPullRequest":true,"CreatedAt":"2019-07-27T21:00:42","Actor":"Suchiman","Number":"7658","RawContent":null,"Title":"Add support for embedding and processing embedded stacktrace line infos","State":"open","Body":"As discussed @MichalStrehovsky \r\n**TODO**:\r\n- configurability\r\n- compression\r\n- disabling reflection fallback\r\n\r\nUncompressed numbers for sizes:\r\nFor a debug Hello World application (which includes debug information for corelib).\r\n\r\n| Section | bytes | count |\r\n| --- | --- | --- |\r\n| rvaTokenMap | 127.788 | 10.648 |\r\n| sequencePoints | 1.012.608 | 111.737 |\r\n| stringHeap | 70.160 | 767 |","Url":"https://github.com/dotnet/corert/pull/7658","RelatedDescription":"Open PR \"Add support for embedding and processing embedded stacktrace line infos\" (#7658)"},{"Id":"470798920","IsPullRequest":false,"CreatedAt":"2019-07-27T17:34:25","Actor":"davidfowl","Number":"7640","RawContent":null,"Title":"Latest WebAPI broken","State":"closed","Body":"I haven't looked into it as yet but we made some changes that seem to result in failures after compiling with the IL compiler.\r\n\r\n```\r\nUnhandled Exception: System.PlatformNotSupportedException: Operation is not supported on this platform.\r\n   at System.Reflection.Runtime.Assemblies.RuntimeAssembly.get_CodeBase() + 0x24\r\n   at Microsoft.AspNetCore.Mvc.ApplicationParts.RelatedAssemblyAttribute.GetRelatedAssemblies(Assembly, Boolean, Func`2, Func`2) + 0x50\r\n   at Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartManager.<GetAsemblyClosure>d__9.MoveNext() + 0x8d\r\n   at System.Linq.Enumerable.ConcatIterator`1.MoveNext() + 0x62\r\n   at Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartManager.PopulateDefaultParts(String) + 0x16f\r\n   at Microsoft.Extensions.DependencyInjection.MvcCoreServiceCollectionExtensions.GetApplicationPartManager(IServiceCollection) + 0x81\r\n   at Microsoft.Extensions.DependencyInjection.MvcCoreServiceCollectionExtensions.AddMvcCore(IServiceCollection) + 0x17\r\n   at Microsoft.Extensions.DependencyInjection.MvcServiceCollectionExtensions.AddControllersCore(IServiceCollection) + 0xa\r\n   at Microsoft.Extensions.DependencyInjection.MvcServiceCollectionExtensions.AddControllers(IServiceCollection) + 0x11\r\n   at WebApplication2.Startup.ConfigureServices(IServiceCollection) + 0xc\r\n   at WebApplication2!<BaseAddress>+0xcd7ccd\r\n   at System.InvokeUtils.CallDynamicInvokeMethod(Object, IntPtr, Object, IntPtr, IntPtr, Object, Object[], BinderBundle, Boolean, Boolean, Boolean) + 0x218\r\n   at Internal.Reflection.Execution.MethodInvokers.InstanceMethodInvoker.Invoke(Object, Object[], BinderBundle, Boolean) + 0x7f\r\n   at Internal.Reflection.Core.Execution.MethodInvoker.Invoke(Object, Object[], Binder, BindingFlags, CultureInfo) + 0x46\r\n   at System.Reflection.Runtime.MethodInfos.RuntimeMethodInfo.Invoke(Object, BindingFlags, Binder, Object[], CultureInfo) + 0x58\r\n   at Microsoft.AspNetCore.Hosting.ConfigureServicesBuilder.InvokeCore(Object, IServiceCollection) + 0xf6\r\n   at Microsoft.AspNetCore.Hosting.GenericWebHostBuilder.UseStartup(Type, HostBuilderContext, IServiceCollection) + 0x198\r\n   at Microsoft.AspNetCore.Hosting.GenericWebHostBuilder.<>c__DisplayClass12_0.<UseStartup>b__0(HostBuilderContext, IServiceCollection) + 0xa1\r\n   at Microsoft.Extensions.Hosting.HostBuilder.CreateServiceProvider() + 0x19e\r\n   at Microsoft.Extensions.Hosting.HostBuilder.Build() + 0x3a\r\n   at WebApplication2.Program.Main(String[]) + 0x1b\r\n   at WebApplication2!<BaseAddress>+0xc04c30\r\n```\r\n\r\n","Url":"https://github.com/dotnet/corert/issues/7640","RelatedDescription":"Closed issue \"Latest WebAPI broken\" (#7640)"},{"Id":"472235106","IsPullRequest":false,"CreatedAt":"2019-07-27T17:10:19","Actor":"FrancoisM","Number":"7648","RawContent":null,"Title":"Build error: nutc_driver.exe returned exit code 1 with VS2019. No others errors. Ok on VS2017","State":"closed","Body":"My project has built on Azure Pipelines hosted agent for months.\r\nI switched from VS2017 to VS2019. Now it fails with \"nutc_driver.exe returned exit code 1\".\r\n\r\nI read about similar issue saying to use `<Use64BitCompiler>true</Use64BitCompiler>`. I did yet the problem remains. Other issues mention \"Out of memory\" or other errors. In my case, the log doesn't have any other errors but the one I report.\r\n\r\nI tried to uncheck \"native compilation\" but then the build took 2min (instead of over an hour), the app was about 30mb (vs 100mb usually) and would'nt install.\r\n","Url":"https://github.com/dotnet/corert/issues/7648","RelatedDescription":"Closed issue \"Build error: nutc_driver.exe returned exit code 1 with VS2019. No others errors. Ok on VS2017\" (#7648)"},{"Id":"473484940","IsPullRequest":true,"CreatedAt":"2019-07-27T09:46:44","Actor":"MichalStrehovsky","Number":"7656","RawContent":null,"Title":"Use a single ReadyToRunHelper enum","State":"closed","Body":"When I was troubleshooting the double/float helpers issue, it was really hairy because we have two copies or ReadyToRunHelper. We only need one.\r\n\r\nWhen Jan initially added the ILCompiler version in #129, it already came with `Keep in sync with https://github.com/dotnet/coreclr/blob/master/src/inc/readytorun.h`. We then added a couple helpers that don't exist in CoreCLR R2R because it was convenient, but we do want these numbers to match.\r\n\r\nI extracted the AOT specific ones to the end of the file, realizing that the ReadyToRun mode is trying to handle things it shouldn't. I deleted those.","Url":"https://github.com/dotnet/corert/pull/7656","RelatedDescription":"Closed or merged PR \"Use a single ReadyToRunHelper enum\" (#7656)"},{"Id":"473380499","IsPullRequest":true,"CreatedAt":"2019-07-26T19:08:27","Actor":"MichalStrehovsky","Number":"7653","RawContent":null,"Title":"Delete dead code in ILCompiler.ReadyToRun","State":"closed","Body":"Not sure how much of this is earmarked for the future (I left a couple that I found obvious), and how much is just leftovers from old designs that we should delete.","Url":"https://github.com/dotnet/corert/pull/7653","RelatedDescription":"Closed or merged PR \"Delete dead code in ILCompiler.ReadyToRun\" (#7653)"},{"Id":"473452930","IsPullRequest":true,"CreatedAt":"2019-07-26T19:07:42","Actor":"Dotnet-GitSync-Bot","Number":"7654","RawContent":null,"Title":"Mirror changes from dotnet/corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7654","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx\" (#7654)"},{"Id":"473357025","IsPullRequest":true,"CreatedAt":"2019-07-26T19:07:33","Actor":"MichalStrehovsky","Number":"7652","RawContent":null,"Title":"Add R2R implementation of getMethodSync","State":"closed","Body":"The R2R implementation is to just throw.\r\n\r\nThis doesn't throw in crossgen, but it takes an NGen-specific code path and _then_ throws when we deal with `CORINFO_HELP_MON_ENTER_STATIC`/`CORINFO_HELP_MON_EXIT_STATIC` (that the result of `getMethodSync` is the parameter for).","Url":"https://github.com/dotnet/corert/pull/7652","RelatedDescription":"Closed or merged PR \"Add R2R implementation of getMethodSync\" (#7652)"},{"Id":"473477763","IsPullRequest":true,"CreatedAt":"2019-07-26T18:15:15","Actor":"trylek","Number":"7655","RawContent":null,"Title":"One more fix for SuperILC OOM","State":"open","Body":"In my previous change I fixed OOM's caused by copying too long\r\nexecution log files but I forgot to apply the same fix to compilation\r\nlogs. This additional delta does just that.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7655","RelatedDescription":"Open PR \"One more fix for SuperILC OOM\" (#7655)"},{"Id":"473264674","IsPullRequest":true,"CreatedAt":"2019-07-26T11:03:46","Actor":"trylek","Number":"7651","RawContent":null,"Title":"Fork RyuJit and ReadyToRun version of getGSCookie","State":"closed","Body":"In CPAOT, we need a CoreCLR-compatible version of the GS cookie\r\nusing the appropriate R2R helper, not some hardcoded constant\r\npresumably used by the full AOT CoreRT runtime.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7651","RelatedDescription":"Closed or merged PR \"Fork RyuJit and ReadyToRun version of getGSCookie\" (#7651)"},{"Id":"473050887","IsPullRequest":true,"CreatedAt":"2019-07-26T06:02:22","Actor":"MichalStrehovsky","Number":"7650","RawContent":null,"Title":"Revert \"Fix enumeration value of R2R helpers [Dbl|Flt][Rem|Round]\"","State":"closed","Body":"Reverts dotnet/corert#6779\r\n\r\nThis is so that the enum matches CoreCLR readytorun.h.","Url":"https://github.com/dotnet/corert/pull/7650","RelatedDescription":"Closed or merged PR \"Revert \"Fix enumeration value of R2R helpers [Dbl|Flt][Rem|Round]\"\" (#7650)"},{"Id":"472326257","IsPullRequest":true,"CreatedAt":"2019-07-25T07:51:34","Actor":"Dotnet-GitSync-Bot","Number":"7649","RawContent":null,"Title":"Mirror changes from dotnet/corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @stephentoub","Url":"https://github.com/dotnet/corert/pull/7649","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/corefx\" (#7649)"},{"Id":"472004492","IsPullRequest":true,"CreatedAt":"2019-07-24T02:07:47","Actor":"Dotnet-GitSync-Bot","Number":"7647","RawContent":null,"Title":"Mirror changes from dotnet/coreclr,corefx","State":"closed","Body":"This PR contains mirrored changes from dotnet/coreclr,corefx\n\n\n**Please REBASE this PR when merging**\n\n cc @sywhang","Url":"https://github.com/dotnet/corert/pull/7647","RelatedDescription":"Closed or merged PR \"Mirror changes from dotnet/coreclr,corefx\" (#7647)"},{"Id":"471969859","IsPullRequest":true,"CreatedAt":"2019-07-24T02:00:21","Actor":"nattress","Number":"7646","RawContent":null,"Title":"Add Linux / Mac ReadyToRun CI testing","State":"closed","Body":"* Remove Windows_NT only condition on CI R2R test leg\r\n* Use Top200 suite of CoreCLR tests since they reliably pass in R2R mode","Url":"https://github.com/dotnet/corert/pull/7646","RelatedDescription":"Closed or merged PR \"Add Linux / Mac ReadyToRun CI testing\" (#7646)"},{"Id":"471965978","IsPullRequest":true,"CreatedAt":"2019-07-23T21:35:43","Actor":"trylek","Number":"7645","RawContent":null,"Title":"CoreCLR Pri#1 fixes for the IsManagedSequential method","State":"open","Body":"This change fixes all remaining differences between CPAOT\r\nand Crossgen for the CoreCLR Pri#1 tests w.r.t. my recently\r\nimplemented IsManagedSequential instrumentation.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7645","RelatedDescription":"Open PR \"CoreCLR Pri#1 fixes for the IsManagedSequential method\" (#7645)"},{"Id":"471750238","IsPullRequest":true,"CreatedAt":"2019-07-23T21:09:18","Actor":"trylek","Number":"7644","RawContent":null,"Title":"Mechanical move of IsManagedSequentialType to R2R field algorithm","State":"closed","Body":"Based on JanK's suggestion I'm moving IsManagedSequentialType\r\nto ReadyToRunMetadataFieldLayoutAlgorithm. In this change I'm not\r\nmaking any semantic changes to the method; I'll send out a subsequent\r\nPR for an additional delta fixing discrepancies in the method\r\nas discovered by the instrumentation I recently implemented.\r\n\r\nThanks\r\n\r\nTomas","Url":"https://github.com/dotnet/corert/pull/7644","RelatedDescription":"Closed or merged PR \"Mechanical move of IsManagedSequentialType to R2R field algorithm\" (#7644)"},{"Id":"471340295","IsPullRequest":false,"CreatedAt":"2019-07-22T21:15:59","Actor":"nattress","Number":"7643","RawContent":null,"Title":"Compile static constructors for R2R","State":"open","Body":"CPAOT doesn't compile static constructors which has a runtime JIT cost. We should measure with them enabled (rooting them all for compilation) to assess if they give a startup benefit worth the cost of carrying them in the binary.","Url":"https://github.com/dotnet/corert/issues/7643","RelatedDescription":"Open issue \"Compile static constructors for R2R\" (#7643)"},{"Id":"471311302","IsPullRequest":false,"CreatedAt":"2019-07-22T20:29:12","Actor":"nattress","Number":"7642","RawContent":null,"Title":"Access checks in JIT interface methods","State":"open","Body":"The final section of `CEEInfo::getCallInfo` (https://github.com/dotnet/coreclr/blob/5f93d3b1c48ba6916d5f31d79cb7c17d564eecef/src/vm/jitinterface.cpp#L5597) deals with access checks validating the declarative authority of a given caller to call the callee. This is currently missing in the CPAOT compiler. Similar checks needed in `CEEInfo::getFieldInfo`.","Url":"https://github.com/dotnet/corert/issues/7642","RelatedDescription":"Open issue \"Access checks in JIT interface methods\" (#7642)"},{"Id":"471307755","IsPullRequest":false,"CreatedAt":"2019-07-22T20:23:51","Actor":"nattress","Number":"7641","RawContent":null,"Title":"Type Layout Checks","State":"open","Body":"To protect system resiliency, Crossgen emits method pre-codes (code that is guaranteed to run once before a given method is executed for the first time) that checks various properties of dependent types outside the version bubble that affect codegen of that particular method. This functionality is currently missing and needs porting into CPAOT.","Url":"https://github.com/dotnet/corert/issues/7641","RelatedDescription":"Open issue \"Type Layout Checks\" (#7641)"},{"Id":"470729291","IsPullRequest":false,"CreatedAt":"2019-07-21T18:17:23","Actor":"Suchiman","Number":"7639","RawContent":null,"Title":"CoreRT instructions no longer work","State":"closed","Body":"I'm not sure what has changed but it affects both of my machines:\r\n```\r\nMicrosoft.NETCore.Native.Publish.targets(78,5): error :\r\nThe PrivateSdkAssemblies ItemGroup is required for _ComputeAssembliesToCompileToNative\r\n```\r\nbut only when using the nuget package and not when using my own CoreRT build","Url":"https://github.com/dotnet/corert/issues/7639","RelatedDescription":"Closed issue \"CoreRT instructions no longer work\" (#7639)"},{"Id":"470726858","IsPullRequest":false,"CreatedAt":"2019-07-21T03:46:42","Actor":"Shadow4walker","Number":"7638","RawContent":null,"Title":"System.Reflection.MissingRuntimeArtifactException","State":"closed","Body":"I'm trying to use a [NoesisGUI](https://github.com/Shadow4walker/NoesisSample) with corert\r\nalso i have tried all of rd.xml possible solutions with no luck!! idk what am i missing here! \"actually I don't know what's the correct way to use rd.xml with this\"\r\n[NoesisGUI Managed SDK](https://github.com/Noesis/Managed)\r\n\r\n here's the log after starting the sample\r\n\r\n> Unhandled Exception: EETypeRva:0x009F1C88(System.Reflection.MissingRuntimeArtifactException): MakeGenericMethod() cannot create this generic method instantiation because the instantiation was not metadata-enabled: 'Noesis.Extend.CreateGetterHelper<NoesisApp.Display,System.Int32>(System.Reflection.MethodInfo)' For more information, please visit http://go.microsoft.com/fwlink/?LinkID=616868\r\n   at Internal.Reflection.Core.Execution.ExecutionEnvironment.GetMethodInvoker(RuntimeTypeInfo, QMethodDefinition, RuntimeTypeInfo[], MemberInfo) + 0x148\r\n   at System.Reflection.Runtime.MethodInfos.NativeFormat.NativeFormatMethodCommon.GetUncachedMethodInvoker(RuntimeTypeInfo[], MemberInfo) + 0x50\r\n   at System.Reflection.Runtime.MethodInfos.RuntimeMethodInfo.get_MethodInvoker() + 0xa8\r\n   at System.Reflection.Runtime.MethodInfos.RuntimeNamedMethodInfo`1.MakeGenericMethod(Type[]) + 0x104\r\n   at Noesis.Extend.CreateGetter[ReturnT](Type, MethodInfo) + 0x6b\r\n   at Noesis.Extend.PropertyAccessorRO`1..ctor(PropertyInfo) + 0x3e\r\n   at Noesis.Extend.<>c__DisplayClass407_0`1.<AddPropertyAccessor>b__1() + 0x24\r\n   at Noesis.Extend.AddPropertyAccessor(Extend.NativeTypePropsInfo, PropertyInfo, Func`1, Func`1) + 0xa4\r\n   at Noesis.Extend.AddPropertyAccessor[PropertyT](Extend.NativeTypePropsInfo, PropertyInfo, Boolean) + 0x88\r\n   at Noesis.Extend.<>c.<AddPropertyFunctions>b__405_4(Extend.NativeTypePropsInfo, PropertyInfo, Boolean) + 0x39\r\n   at Noesis.Extend.AddProperty(Extend.NativeTypePropsInfo, PropertyInfo, Boolean) + 0xae\r\n   at Noesis.Extend.CreateNativePropsData(Type, PropertyInfo[], Extend.NativeTypeInfo, Int32&) + 0x1b4\r\n   at Noesis.Extend.RegisterNativeType(Type, Boolean) + 0x278\r\n   at Noesis.Extend.EnsureNativeType(Type, Boolean) + 0x31\r\n   at Noesis.Extend.AddProperty(Extend.NativeTypePropsInfo, PropertyInfo, Boolean) + 0x108\r\n   at Noesis.Extend.CreateNativePropsData(Type, PropertyInfo[], Extend.NativeTypeInfo, Int32&) + 0x1b4\r\n   at Noesis.Extend.RegisterNativeType(Type, Boolean) + 0x278\r\n   at Noesis.Extend.EnsureNativeType(Type, Boolean) + 0x31\r\n   at Noesis.Extend.CreateNativeTypeData(Type, IntPtr) + 0x4e\r\n   at Noesis.Extend.RegisterNativeType(Type, Boolean) + 0x266\r\n   at Noesis.Extend.EnsureNativeType(Type, Boolean) + 0x31\r\n   at Noesis.Extend.NewCPtr(Type, Object) + 0x21\r\n   at Noesis.Extend.GetInstanceHandle(Object) + 0x6c\r\n   at NoesisApp.Application.Start() + 0x28f\r\n   at NoesisApp.Application.Run() + 0x30\r\n   at ConsoleApp1.Program.Main(String[]) + 0x5c\r\n   at ConsoleApp1!<BaseAddress>+0x52d480<","Url":"https://github.com/dotnet/corert/issues/7638","RelatedDescription":"Closed issue \"System.Reflection.MissingRuntimeArtifactException\" (#7638)"}],"ResultType":"GitHubIssue"},"SDK-Issues":{"Issues":[{"Id":"476589815","IsPullRequest":false,"CreatedAt":"2019-08-04T20:17:24","Actor":"nguerrera","Number":"3504","RawContent":null,"Title":"Defensively set DisableSdkPath=true for non .NET framework VB projects","State":"open","Body":"Generally, this is benign, because we pass VBRuntime which will override the SDK path, but if there is a bug or other misconfiguration, the compiler will try to locate the SDK Path using the current runtime. This causes it to try to use Microsoft.VisualBasic.dll from the .NET framework while building against core, and leads to confounding errors such as \r\n\r\n```\r\nvbc error BC30560: 'User' is ambiguous in the namespace 'Microsoft.VisualBasic.ApplicationServices'. [C:\\Users\\nicholg\\Source\\repos\\WpfControlLibrary2\\WpfControlLibrary2\\WpfControlLibrary2.vbproj]\r\n```\r\n\r\nWithout the fix for https://github.com/dotnet/sdk/issues/3450, you get errors like above with `msbuild` instead of the \"Could not find library Microsoft.VisualBasic.dll\" that was reported for `dotnet bulild`.\r\n\r\nWe should make a defensive change to set DisableSdkPath=true so that the symptom for any failure to find the correct vb runtime is consistently cannot find Microsoft.VisualBasic.dll regardless of which compiler (.NET Core or desktop) is used.\r\n\r\nThis is not a blocking issue, though, as it changes the error symptoms only when the product has other bugs or the project has been misconfigured.\r\n\r\nRelated to https://dev.azure.com/devdiv/DevDiv/_workitems/edit/960757","Url":"https://github.com/dotnet/sdk/issues/3504","RelatedDescription":"Open issue \"Defensively set DisableSdkPath=true for non .NET framework VB projects\" (#3504)"},{"Id":"475397200","IsPullRequest":false,"CreatedAt":"2019-08-03T21:53:55","Actor":"sebastienros","Number":"3496","RawContent":null,"Title":"ResolveAssemblyReference returns 3.0 assemblies when 5.0 is requested","State":"closed","Body":"I have a project where I try to use the latest 5.0 branded aspnet core. I use a `FrameworkReference` update to do so. The machine has the latest sdk (5.0.x) and the latest aspnet core shared runtimes 3.0.x and 5.0.x.\r\n\r\nAt compilation I get this:\r\n\r\n```\r\nStartup.cs(188,21): error CS1705: Assembly 'Microsoft.AspNetCore.Mvc.NewtonsoftJson' with identity 'Microsoft.AspNetCore.Mvc.NewtonsoftJson, Version=5.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60' uses 'Microsoft.AspNetCore.Mvc.Core, Version=5.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60' which has a higher version than referenced assembly 'Microsoft.AspNetCore.Mvc.Core' with identity 'Microsoft.AspNetCore.Mvc.Core, Version=3.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60' [/tmp/BenchmarksServer/43sztvs0.trd/benchmarks/src/Benchmarks/Benchmarks.csproj]\r\nProgram.cs(117,21): error CS1705: Assembly 'Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv' with identity 'Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv, Version=5.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60' uses 'Microsoft.AspNetCore.Hosting.Abstractions, Version=5.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60' which has a higher version than referenced assembly 'Microsoft.AspNetCore.Hosting.Abstractions' with identity 'Microsoft.AspNetCore.Hosting.Abstractions, Version=3.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60' [/tmp/BenchmarksServer/43sztvs0.trd/benchmarks/src/Benchmarks/Benchmarks.csproj]\r\n```\r\n\r\nThe .binlog shows that `ResolveAssemblyReference` is returning these conflicting assemblies where it should instead pick them from the 5.0.x folder.\r\n\r\n[msbuild.binlog.zip](https://github.com/dotnet/sdk/files/3454241/msbuild.binlog.zip)\r\n\r\nRename the file by removing the .zip extension, don't extract it (GH limitation)\r\n","Url":"https://github.com/dotnet/sdk/issues/3496","RelatedDescription":"Closed issue \"ResolveAssemblyReference returns 3.0 assemblies when 5.0 is requested\" (#3496)"},{"Id":"476449692","IsPullRequest":true,"CreatedAt":"2019-08-03T12:59:37","Actor":"dotnet-maestro[bot]","Number":"3503","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c3e20d8c-7bed-4085-8124-08d70655e1d3)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190803.6\r\n- **Date Produced**: 8/4/2019 4:34 AM\r\n- **Commit**: de92ac36622cd4bdc37c4d19ede6de14a31df6c4\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19403.6\r\n\r\n[marker]: <> (End:c3e20d8c-7bed-4085-8124-08d70655e1d3)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3503","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/core-setup\" (#3503)"},{"Id":"476445375","IsPullRequest":true,"CreatedAt":"2019-08-03T12:04:51","Actor":"dotnet-maestro[bot]","Number":"3502","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190803.1\r\n- **Date Produced**: 8/3/2019 1:03 PM\r\n- **Commit**: 3b75ef38a33579dcd32f2912ee69e886356b0f18\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19403.1\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19403.1\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3502","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/arcade\" (#3502)"},{"Id":"476418956","IsPullRequest":true,"CreatedAt":"2019-08-03T05:44:40","Actor":"nguerrera","Number":"3501","RawContent":null,"Title":"Removed outdated, commented out code","State":"open","Body":"Fixing small things that distracted me while doing https://github.com/dotnet/core-sdk/pull/3741\r\n\r\nSubmitting for P9 consideration as I'd prefer not to stay confused by this for the lifetime of 3.0","Url":"https://github.com/dotnet/sdk/pull/3501","RelatedDescription":"Open PR \"Removed outdated, commented out code\" (#3501)"},{"Id":"476393427","IsPullRequest":true,"CreatedAt":"2019-08-03T00:02:28","Actor":"peterhuene","Number":"3500","RawContent":null,"Title":"Retry apphost creation. ","State":"open","Body":"This PR implements a parameterized retry count for creating the apphost.\r\n\r\nLike the `Copy` task from MSBuild, the `CreateAppHost` task now takes a\r\nparameter to specify the number of retries and the delay between retries (in\r\nmilliseconds) to perform if the creation fails.\r\n\r\nThis should help alleviate build failures when external processes are locking\r\nthe intermediate apphost during a build (especially on Windows).\r\n\r\nFixes [AB#950462](https://devdiv.visualstudio.com/0bdbc590-a062-4c3f-b0f6-9383f67865ee/_workitems/edit/950462).\r\nFixes dotnet/cli#11650.","Url":"https://github.com/dotnet/sdk/pull/3500","RelatedDescription":"Open PR \"Retry apphost creation. \" (#3500)"},{"Id":"474386703","IsPullRequest":true,"CreatedAt":"2019-08-03T00:00:40","Actor":"peterhuene","Number":"3484","RawContent":null,"Title":"Retry apphost creation.","State":"closed","Body":"This PR implements a parameterized retry count for creating the apphost.\r\n\r\nLike the `Copy` task from MSBuild, the `CreateAppHost` task now takes a\r\nparameter to specify the number of retries and the delay between retries (in\r\nmilliseconds) to perform if the creation fails.\r\n\r\nThis should help alleviate build failures when external processes are locking\r\nthe intermediate apphost during a build (especially on Windows).\r\n\r\nFixes [AB#950462](https://devdiv.visualstudio.com/0bdbc590-a062-4c3f-b0f6-9383f67865ee/_workitems/edit/950462).\r\nFixes dotnet/cli#11650.","Url":"https://github.com/dotnet/sdk/pull/3484","RelatedDescription":"Closed or merged PR \"Retry apphost creation.\" (#3484)"},{"Id":"476341414","IsPullRequest":false,"CreatedAt":"2019-08-02T20:20:33","Actor":"nguerrera","Number":"3499","RawContent":null,"Title":"Redundant PackageName and NuGetPackageId metadata","State":"open","Body":"There's a mix of checking PackageName and NuGetPackageId in the targets and now we seem to be setting both all the time in ResolvePackageAssets.\r\n\r\nI actually trimmed down the metadata in 2.1 to stop doing this, but it crept back in c7549ffe\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/issues/3499","RelatedDescription":"Open issue \"Redundant PackageName and NuGetPackageId metadata\" (#3499)"},{"Id":"476146474","IsPullRequest":true,"CreatedAt":"2019-08-02T12:05:08","Actor":"dotnet-maestro[bot]","Number":"3498","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190803.1\r\n- **Date Produced**: 8/3/2019 1:03 PM\r\n- **Commit**: 3b75ef38a33579dcd32f2912ee69e886356b0f18\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19403.1\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19403.1\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3498","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/arcade\" (#3498)"},{"Id":"475644278","IsPullRequest":true,"CreatedAt":"2019-08-01T14:11:23","Actor":"dotnet-maestro[bot]","Number":"3497","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190731.19\r\n- **Date Produced**: 8/1/2019 12:27 AM\r\n- **Commit**: 48787606d809963cc800151cbfbefe0a74ae74b4\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19381.19\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19381.19\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3497","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3497)"},{"Id":"475349038","IsPullRequest":true,"CreatedAt":"2019-08-01T03:37:28","Actor":"nugetlurker","Number":"3494","RawContent":null,"Title":"Insert NuGet Build 5.3.0-preview.2.6136 into sdk","State":"closed","Body":"Insert NuGet Build 5.3.0-preview.2.6136 into sdk release/3.0.100-preview8 branch","Url":"https://github.com/dotnet/sdk/pull/3494","RelatedDescription":"Closed or merged PR \"Insert NuGet Build 5.3.0-preview.2.6136 into sdk\" (#3494)"},{"Id":"475361769","IsPullRequest":false,"CreatedAt":"2019-07-31T21:17:43","Actor":"nguerrera","Number":"3495","RawContent":null,"Title":"Inclusion of runtime graph for all TFMs causes existing .NET Framework projects to turn x86","State":"open","Body":"So, it seems that giving the runtime graph to nuget for all TFMs is actually a pretty severe breaking change for .NET Framework in some cases.\r\n\r\nRoslyn builds with preview 8 (maybe 7, not sure when the rid graph change landed) will switch the .NET Framework csc.exe, vbc.exe, VBCSCompiler.exe to x86 from Any CPU.\r\n\r\nThis happens because they have a ref to Microsoft.DiasymReader.Native which has runtimes/win-x86 assets. The design for .NET Framework is that when we find RID-specific assets AND there is no explicit AnyCPU and no explicit RID, then we take the win7-x86 assets and use PlatformTarget=x86. \r\n\r\n(I regret this design, but that is the design since 1.0 SDK. It was done so that .NET Framework ASP.NET Core projects could consume libuv without setting a RID or PlatformTarget. Project.json just picked the RID of the current machine, which was worse as you get different apps on different machines. We tried to make it an error and say you had to pick a PlatformTarget or RID on .NET Framework exes, but there was a ton of complaints about it and we landed on the design described above by compromise.)\r\n\r\nThe thing is that we use win7-x86, but without a RID graph, we/NuGet don't know that win-x86 assets are applicable to win7-x86. Now that we have the RID graph always, we discover these win-x86 assets for the first time and the (regrettable) design actually kicks in.\r\n\r\nMy suggestion to avoid a breaking change here is to not pass the RID graph by default for TFMs that are not .NET Core 3.0+ or .NET Standard 2.1+. We can put it behind an opt-in for other TFMs.\r\n\r\nSeparately, roslyn should explicitly set Any CPU defensively so that they are not sensitive to which SDK is used to build them.\r\n\r\ncc @jaredpar @dsplaisted ","Url":"https://github.com/dotnet/sdk/issues/3495","RelatedDescription":"Open issue \"Inclusion of runtime graph for all TFMs causes existing .NET Framework projects to turn x86\" (#3495)"},{"Id":"474566979","IsPullRequest":true,"CreatedAt":"2019-07-31T20:00:57","Actor":"dotnet-maestro[bot]","Number":"3488","RawContent":null,"Title":"[release/3.0.1xx] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:ee7760b1-2875-4869-d002-08d7114cdbad)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190729.05\r\n- **Date Produced**: 7/29/2019 3:24 PM\r\n- **Commit**: d15a0adeb874801e7bfaa4fbbb306a2efa268497\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-preview8-28379-05\r\n\r\n[marker]: <> (End:ee7760b1-2875-4869-d002-08d7114cdbad)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3488","RelatedDescription":"Closed or merged PR \"[release/3.0.1xx] Update dependencies from dotnet/core-setup\" (#3488)"},{"Id":"475103999","IsPullRequest":true,"CreatedAt":"2019-07-31T15:57:53","Actor":"dotnet-maestro[bot]","Number":"3493","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190730.3\r\n- **Date Produced**: 7/30/2019 6:57 PM\r\n- **Commit**: def377f94747dac91482aad67b33a1c011ffc770\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19380.3\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19380.3\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3493","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3493)"},{"Id":"474174355","IsPullRequest":true,"CreatedAt":"2019-07-31T14:57:57","Actor":"livarcocc","Number":"3481","RawContent":null,"Title":"Updating the branding to preview9","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/3481","RelatedDescription":"Closed or merged PR \"Updating the branding to preview9\" (#3481)"},{"Id":"474677142","IsPullRequest":true,"CreatedAt":"2019-07-30T23:33:44","Actor":"dotnet-maestro[bot]","Number":"3491","RawContent":null,"Title":"[release/3.0.100-preview8] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:0e68ca02-619f-4dab-d003-08d7114cdbad)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190730.08\r\n- **Date Produced**: 7/30/2019 7:48 PM\r\n- **Commit**: c855ac718789051d5d67282c88decca445de7711\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-preview8-28380-08\r\n\r\n[marker]: <> (End:0e68ca02-619f-4dab-d003-08d7114cdbad)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3491","RelatedDescription":"Closed or merged PR \"[release/3.0.100-preview8] Update dependencies from dotnet/core-setup\" (#3491)"},{"Id":"474614791","IsPullRequest":false,"CreatedAt":"2019-07-30T22:18:15","Actor":"JohanLarsson","Number":"3489","RawContent":null,"Title":"Pack when referencing Microsoft.CodeAnalysis.CSharp generates exclude=\"Build,Analyzers\"","State":"closed","Body":"Repro steps:\r\n\r\n1. New project:\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netstandard1.3</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <PropertyGroup>\r\n    <Version>0.1.0-dev</Version>\r\n    <Authors>Author</Authors>\r\n    <Description>Descriptor</Description>\r\n    <NeutralLanguage>en</NeutralLanguage>\r\n    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>\r\n    <PackageLicenseExpression>MIT</PackageLicenseExpression>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.CodeAnalysis.CSharp\" Version=\"2.3.1\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\n2. Build in VS\r\n3. Check created package.\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<package xmlns=\"http://schemas.microsoft.com/packaging/2012/06/nuspec.xsd\">\r\n  <metadata>\r\n    <id>PackRepro</id>\r\n    <version>0.1.0-dev</version>\r\n    <authors>Author</authors>\r\n    <owners>Author</owners>\r\n    <requireLicenseAcceptance>false</requireLicenseAcceptance>\r\n    <license type=\"expression\">MIT</license>\r\n    <description>Descriptor</description>\r\n    <dependencies>\r\n      <group targetFramework=\".NETStandard1.3\">\r\n        <dependency id=\"Microsoft.CodeAnalysis.CSharp\" version=\"2.3.1\" exclude=\"Build,Analyzers\" />\r\n        <dependency id=\"NETStandard.Library\" version=\"1.6.1\" exclude=\"Build,Analyzers\" />\r\n      </group>\r\n    </dependencies>\r\n  </metadata>\r\n</package>\r\n```\r\n\r\nI tried `<PackageReference Include=\"Microsoft.CodeAnalysis.CSharp\" Version=\"2.3.1\" PrivateAssets=\"none\"/>` but it did not have any effect.\r\n\r\nIs there a way to pack this so that analyzers are not excluded?\r\nIs there documentation about this?","Url":"https://github.com/dotnet/sdk/issues/3489","RelatedDescription":"Closed issue \"Pack when referencing Microsoft.CodeAnalysis.CSharp generates exclude=\"Build,Analyzers\"\" (#3489)"},{"Id":"474858582","IsPullRequest":false,"CreatedAt":"2019-07-30T18:57:29","Actor":"davidmatson","Number":"3492","RawContent":null,"Title":"When using new-style csproj with .NET Framework, the default TargetPlatform is x86 rather than AnyCPU","State":"open","Body":"**Visual Studio Version**:\r\n2019 (16.2.0)\r\n\r\n**Summary**:\r\nWhen using the new-style (CPS?) csproj but targeting .NET Framework, the default TargetPlatform is differe than either .NET Core or old-style .NET Framework csprojs (x86 rather than AnyCPU).\r\n\r\n**Steps to Reproduce**:\r\n\r\n1. File -> New -> Project -> .NET Core exe\r\n\r\n2. Unload the csproj and replace the target framework line with: ```<TargetFramework>net472</TargetFramework>```\r\n\r\n3. Releoad the project and check its properties\r\n\r\n**Expected Behavior**:\r\nTarget platform in AnyCPU.\r\n\r\n**Actual Behavior**:\r\nTarget platform is x86.\r\n\r\n**User Impact**:\r\nConfusing behavior when restoring NuGet packages, and inconsistency with all other C# project variants.","Url":"https://github.com/dotnet/sdk/issues/3492","RelatedDescription":"Open issue \"When using new-style csproj with .NET Framework, the default TargetPlatform is x86 rather than AnyCPU\" (#3492)"},{"Id":"474626403","IsPullRequest":false,"CreatedAt":"2019-07-30T14:40:37","Actor":"JohanLarsson","Number":"3490","RawContent":null,"Title":"Pack without explicit NETStandard.Library dependency","State":"open","Body":"Repro steps:\r\n1. New project:\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFramework>netstandard1.3</TargetFramework>\r\n  </PropertyGroup>\r\n\r\n  <PropertyGroup>\r\n    <Version>0.1.0-dev</Version>\r\n    <Authors>Author</Authors>\r\n    <Description>Descriptor</Description>\r\n    <NeutralLanguage>en</NeutralLanguage>\r\n    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>\r\n    <PackageLicenseExpression>MIT</PackageLicenseExpression>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.CodeAnalysis.CSharp\" Version=\"2.3.1\" PrivateAssets=\"none\"/>\r\n    <PackageReference Update=\"NETStandard.Library\" PrivateAssets=\"all\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\n2. Build in VS\r\n3. Inspect package:\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<package xmlns=\"http://schemas.microsoft.com/packaging/2012/06/nuspec.xsd\">\r\n  <metadata>\r\n    <id>PackRepro</id>\r\n    <version>0.1.0-dev</version>\r\n    <authors>Author</authors>\r\n    <owners>Author</owners>\r\n    <requireLicenseAcceptance>false</requireLicenseAcceptance>\r\n    <license type=\"expression\">MIT</license>\r\n    <description>Descriptor</description>\r\n    <dependencies>\r\n      <group targetFramework=\".NETStandard1.3\">\r\n        <dependency id=\"Microsoft.CodeAnalysis.CSharp\" version=\"2.3.1\" exclude=\"Build,Analyzers\" />\r\n        <dependency id=\"NETStandard.Library\" version=\"1.6.1\" exclude=\"Build,Analyzers\" />\r\n      </group>\r\n    </dependencies>\r\n  </metadata>\r\n</package>\r\n```","Url":"https://github.com/dotnet/sdk/issues/3490","RelatedDescription":"Open issue \"Pack without explicit NETStandard.Library dependency\" (#3490)"},{"Id":"474545209","IsPullRequest":true,"CreatedAt":"2019-07-30T14:36:33","Actor":"dotnet-maestro[bot]","Number":"3486","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190729.29\r\n- **Date Produced**: 7/29/2019 10:51 PM\r\n- **Commit**: 84d9a013b66c3e14a67ace0a99ae84e6eb8b6a7d\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19379.29\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19379.29\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3486","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3486)"},{"Id":"474566203","IsPullRequest":true,"CreatedAt":"2019-07-30T12:50:34","Actor":"dotnet-maestro[bot]","Number":"3487","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"open","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c3e20d8c-7bed-4085-8124-08d70655e1d3)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190803.6\r\n- **Date Produced**: 8/4/2019 4:34 AM\r\n- **Commit**: de92ac36622cd4bdc37c4d19ede6de14a31df6c4\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 5.0.0-alpha1.19403.6\r\n\r\n[marker]: <> (End:c3e20d8c-7bed-4085-8124-08d70655e1d3)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3487","RelatedDescription":"Open PR \"[master] Update dependencies from dotnet/core-setup\" (#3487)"},{"Id":"474481551","IsPullRequest":false,"CreatedAt":"2019-07-30T09:41:44","Actor":"mcartoixa","Number":"3485","RawContent":null,"Title":"When using custom $(BaseIntermediateOutputPath) the build still picks files from obj/","State":"open","Body":"I like to customize `$(BaseIntermediateOutputPath)` on my build servers to a centralized location so that I am very sure to start from fresh (just delete the folder and there you go).\r\nOn a development machine, Visual Studio generates files (e.g. `AssemblyInfo.cs`) in the default folder, (`obj/`, inside the project folder). When trying the build server script, it regenerates those files in the customized `$(BaseIntermediateOutputPath)` folder but it stills picks up the default ones that have been generated before for compilation...\r\n\r\nMy workaround is to add the following property on my projects in the build server script: `DefaultItemExcludesInProjectFolder=bin/**;obj/**`. My use case might be a fringe one, but I think these folders should be excluded by default, in a hardcoded way (cf. https://github.com/dotnet/sdk/blob/master/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.Sdk.DefaultItems.targets#L39).\r\n\r\nUsing .NET Core 3.0 preview 7.","Url":"https://github.com/dotnet/sdk/issues/3485","RelatedDescription":"Open issue \"When using custom $(BaseIntermediateOutputPath) the build still picks files from obj/\" (#3485)"},{"Id":"474320728","IsPullRequest":true,"CreatedAt":"2019-07-30T03:36:59","Actor":"dotnet-maestro[bot]","Number":"3483","RawContent":null,"Title":"[release/3.0.100-preview8] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:0e68ca02-619f-4dab-d003-08d7114cdbad)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190729.14\r\n- **Date Produced**: 7/30/2019 12:15 AM\r\n- **Commit**: f4b35ce6e8583b08630baf576f55424728b04081\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-preview8-28379-14\r\n\r\n[marker]: <> (End:0e68ca02-619f-4dab-d003-08d7114cdbad)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3483","RelatedDescription":"Closed or merged PR \"[release/3.0.100-preview8] Update dependencies from dotnet/core-setup\" (#3483)"},{"Id":"474309570","IsPullRequest":true,"CreatedAt":"2019-07-30T00:06:01","Actor":"dotnet-bot","Number":"3482","RawContent":null,"Title":"Merge release/3.0.1xx to master","State":"open","Body":"\nThis is an automatically generated pull request from release/3.0.1xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/3.0.1xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/3.0.1xx\n# Fix merge conflicts\ngit commit\ngit push upstream merges/release/3.0.1xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request.","Url":"https://github.com/dotnet/sdk/pull/3482","RelatedDescription":"Open PR \"Merge release/3.0.1xx to master\" (#3482)"},{"Id":"473773578","IsPullRequest":true,"CreatedAt":"2019-07-29T17:26:53","Actor":"livarcocc","Number":"3478","RawContent":null,"Title":"Update branding on master to 5.0.100-alpha1","State":"closed","Body":"","Url":"https://github.com/dotnet/sdk/pull/3478","RelatedDescription":"Closed or merged PR \"Update branding on master to 5.0.100-alpha1\" (#3478)"},{"Id":"473773459","IsPullRequest":true,"CreatedAt":"2019-07-29T17:26:39","Actor":"livarcocc","Number":"3477","RawContent":null,"Title":"Merge master into release/3.0.1xx","State":"closed","Body":"This was a clean merge.","Url":"https://github.com/dotnet/sdk/pull/3477","RelatedDescription":"Closed or merged PR \"Merge master into release/3.0.1xx\" (#3477)"},{"Id":"474037748","IsPullRequest":true,"CreatedAt":"2019-07-29T14:35:37","Actor":"dotnet-maestro[bot]","Number":"3480","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c3e20d8c-7bed-4085-8124-08d70655e1d3)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190729.02\r\n- **Date Produced**: 7/29/2019 11:19 AM\r\n- **Commit**: 3a87ac0079c714f13e35b319ad68cd15f66e0172\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-preview8-28379-02\r\n\r\n[marker]: <> (End:c3e20d8c-7bed-4085-8124-08d70655e1d3)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3480","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#3480)"},{"Id":"474013337","IsPullRequest":true,"CreatedAt":"2019-07-29T13:46:01","Actor":"dotnet-maestro[bot]","Number":"3479","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n## From https://github.com/dotnet/arcade\r\n- **Build**: 20190728.1\r\n- **Date Produced**: 7/28/2019 12:52 PM\r\n- **Commit**: a8e982d3bac01d8f4f91a4c57191147570079448\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Arcade.Sdk** -> 1.0.0-beta.19378.1\r\n  - **Microsoft.DotNet.SignTool** -> 1.0.0-beta.19378.1\r\n\r\n[marker]: <> (End:daa187e0-7e60-4c7a-c1ac-08d6354da8a8)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3479","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#3479)"},{"Id":"473741363","IsPullRequest":true,"CreatedAt":"2019-07-28T14:35:12","Actor":"dotnet-maestro[bot]","Number":"3476","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c3e20d8c-7bed-4085-8124-08d70655e1d3)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190728.01\r\n- **Date Produced**: 7/28/2019 11:19 AM\r\n- **Commit**: 65ab0315fd8ad9a3c25493b3d3b234585a643ae0\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-preview8-28378-01\r\n\r\n[marker]: <> (End:c3e20d8c-7bed-4085-8124-08d70655e1d3)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3476","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#3476)"},{"Id":"473635972","IsPullRequest":true,"CreatedAt":"2019-07-27T14:35:24","Actor":"dotnet-maestro[bot]","Number":"3475","RawContent":null,"Title":"[master] Update dependencies from dotnet/core-setup","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:c3e20d8c-7bed-4085-8124-08d70655e1d3)\r\n## From https://github.com/dotnet/core-setup\r\n- **Build**: 20190726.29\r\n- **Date Produced**: 7/27/2019 8:19 AM\r\n- **Commit**: bd44f59e21537ce560d6924805a222f13c009bcb\r\n- **Branch**: refs/heads/release/3.0\r\n- **Updates**:\r\n  - **Microsoft.NET.HostModel** -> 3.0.0-preview8-28376-29\r\n\r\n[marker]: <> (End:c3e20d8c-7bed-4085-8124-08d70655e1d3)\r\n\r\n","Url":"https://github.com/dotnet/sdk/pull/3475","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/core-setup\" (#3475)"}],"ResultType":"GitHubIssue"},"Announcements-Issues":{"Issues":[{"Id":"470434872","IsPullRequest":false,"CreatedAt":"2019-07-19T16:54:02","Actor":"richlander","Number":"118","RawContent":null,"Title":".NET Core master branches have switched to \"5.0\"","State":"open","Body":"# .NET Core master branches have switched to \"5.0\"\r\n\r\nVarious .NET Core repos have switched their `master` branches to \"5.0\", and will use 3.x branches for 3.0 and 3.1 projects. This is very similar to how we approached 2.x and 3.0 projects. As context, `master` branches produced 3.0 builds for the entire period of the 2.2 project.\r\n\r\nAt present, this change is only relevant if you contribute to .NET Core repositories. Otherwise, we recommend that you wait for the 5.0 Preview releases before installing this new version.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/core #3059](https://github.com/dotnet/core/issues/3059)\r\n\r\n## Details\r\n\r\nThe following repos have moved their master branches to \"5.0\":\r\n\r\n- [dotnet/coreclr](https://github.com/dotnet/coreclr)\r\n- [dotnet/corefx](https://github.com/dotnet/corefx)\r\n- [dotnet/core-setup](https://github.com/dotnet/core-setup)\r\n\r\nYou can see that [5.0 .NET Core Runtime builds](https://github.com/dotnet/core-setup#daily-builds) are now being built and published at dotnet/core-setup.\r\n\r\nIn large part, we switched `master` to 5.0 to enable to the community to contribute changes. As the .NET Core 3.0 released has progressed, we've had to increase scrutiny on the changes we will accept. Now that we've permanently branched for 3.0, we can accept a much broader set of changes. Please consider that to be an open invitation!\r\n\r\nNotably, [dotnet/core-sdk](https://github.com/dotnet/core-sdk) is not yet producing 5.0 builds. We expect that the dotnet/core-sdk master branch will continue as a 3.0 branch for 2-3 months while we finish up the .NET Core 3.0 project.\r\n\r\nAt present, there is no developer experience for 5.0. We are waiting on the dotnet/core-sdk repo to switch to 5.0. Switching your project file to target `netcoreapp5.0` won't do anything useful. We'll update this issue when a 5.0 SDK comes available.","Url":"https://github.com/dotnet/announcements/issues/118","RelatedDescription":"Open issue \".NET Core master branches have switched to \"5.0\"\" (#118)"},{"Id":"465501070","IsPullRequest":false,"CreatedAt":"2019-07-08T23:25:31","Actor":"terrajobst","Number":"117","RawContent":null,"Title":"System.Text.Json usability study results","State":"open","Body":"We've performed a usability study on the new `System.Text.Json` APIs which will replace JSON.NET as the default JSON experience in .NET Core 3.0:\r\n\r\n* We focused on the primary \"getting started\" scenarios to validate that we picked the right type- and method names.\r\n* We simulated what we believe to be common error cases to validate that our exception messages are understandable and actionable.\r\n* Since we were short on time, we couldn't use the recruiting provided by the UX lab but instead brought in our own developers, which we recruited from the .NET engineering team\r\n\r\nThis has worked out well for us as we were able to get short term feedback which resulted in significant improvements to the overall API shape and usability. In the future, we should do more API focused UX studies 😊\r\n\r\n## Tasks\r\n\r\n| # | Description                            | Code\r\n|:--|:---------------------------------------|:-----\r\n| 1 | Serialize and pretty print             | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario1/Program.cs#L19-L31)\r\n| 2 | Deserialize with trailing comma        | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario2/Program.cs#L19-L25)\r\n| 3 | Deserialize with custom property names | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario3/Program.cs#L30-L45)\r\n| 4 | Read with DOM                          | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario4/Program.cs#L20-L35)\r\n| 5 | Pretty print an existing JSON file     | [Link](https://github.com/ahsonkhan/JsonUxStudy/blob/master/UxScenarios/Scenario5/Program.cs#L26-L34)\r\n\r\n## Hypotheses\r\n\r\nWe expect developers to...\r\n\r\n| # | Description                                            | Result\r\n|:--|:-------------------------------------------------------|:---------------\r\n| 1 | ...assume the APIs are similar/identical to JSON.NET   |  Validated\r\n| 2 | ...complete tasks 1-4 successfully                     |  Validated\r\n| 3 | ...struggle/unable to complete the task 5, because it requires working with two different components which is very different from JSON.NET |  Invalidated\r\n| 4 | ...not look at documentation for most of their coding as IntelliSense is good enough |  Invalidated\r\n| 5 | ...be happy with the experience of using the API                                     |  Validated\r\n| 6 | ...plan on using `System.Text.Json` for their next JSON task                         |  Partially Validated\r\n\r\n##  Key Observations\r\n\r\n* Everyone completed scenarios #1-#3, 2 didn't complete #4, 6 didn't complete #5\r\n    - The reason was always \"out of time\". Every person who started a scenario successfully finished it.\r\n    - We feel this validates that we picked the right scope for a 60 minute study of people from various backgrounds\r\n* Overall people liked the new API\r\n    - Key value prop for most people was the fact that \"it's now built in\"\r\n    - Very few mentioned perf and the ones that did thought that it probably wouldn't make a difference in their scenarios.\r\n    - Most people said they would prefer `System.Text.Json` for new APIs, but would stick to JSON.NET in code that already uses it.\r\n    - **[Action]** None, this is in line with what we expected.\r\n* Virtually everyone tried to google for sample code in the documentation\r\n    - Everyone found our blog post and online documentation\r\n    - People new to .NET were confused that JSON.NET and `System.Text.Json` weren't the same thing\r\n    - Everyone complained that the current docs are lacking, especially sample code.\r\n    - **[Action]** Docs are work in progress. We plan on shipping with a fully documented API surface and sample code.\r\n* Virtually everyone found the key type relatively quickly\r\n    - Some people were confused when types were static, rather than something that one can new up\r\n    - **[Action]** None. This is by-design as we try to reduce the number of allocations.\r\n* Virtually everyone had trouble selecting the correct method on\r\n  `JsonSerializer`\r\n    - We chose a very complicated naming convention\r\n    - **[Action]** We simplified it by using names that people in the study told us were looking for.\r\n* Most of our error messages were well received because they told people what\r\n  the problem is & how they can fix them.\r\n    - One error message was unclear because we reported an unexpected character when we could have reported that we didn't expect a comment.\r\n    - **[Action]** We've reworded the error message.\r\n    - We had one error message that was generated by a lower layer and provided an action item that doesn't make sense when people receive it when using the higher layer component.\r\n    - **[Action]** We've reworded the error message to be more generic so it makes sense for both kind of consumers.\r\n* Virtually everyone used the new Roslyn completion feature which will also show\r\n  types from namespaces not imported yet.\r\n    - However, virtually nobody realized that they were doing it.\r\n    - This caused confusion when people found other APIs that happen to include Json in them, specifically the old data contract serialization.\r\n    - **[Action]** Talk to the Roslyn IDE team to see if this something more people will run into. This could prove to be especially problematic for technologies that share type names (e.g. `UserControl` in WinForms and WPF) and both are referenced by the project.\r\n* Optional parameters and `async`/`await` are usability cliffs\r\n    - Many were confused by optional parameters and tried to pass them in, even though they didn't have to.\r\n    - **[Action]** Talk to the Roslyn IDE team to see if we can visualize them better in VS.\r\n    - **[Action]** Try to avoid heavy use of optional parameters for mainline APIs.\r\n    - Async is a very steep cliff. People have no idea what to do in their code to make async work. While IntelliSense shows the usage by prefixing it with await, people didn't notice that.\r\n    - **[Action]** Unclear; this is a broader issue.\r\n* Virtually nobody used F1 to get help for APIs\r\n    - *Surprise*. I expected more people to use <kbd>F1</kbd>.\r\n* Virtually everyone used F12 to explore the API (\"metadata view\")\r\n    - *Surprise*. I expected most people to explore the type via the\r\n      IntelliSense completion\r\n* Nobody used Object Browser to explorer the APIs\r\n    - *Surprise*. I expected at least some people to.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/39304.","Url":"https://github.com/dotnet/announcements/issues/117","RelatedDescription":"Open issue \"System.Text.Json usability study results\" (#117)"},{"Id":"465034831","IsPullRequest":false,"CreatedAt":"2019-07-08T03:13:38","Actor":"leecow","Number":"116","RawContent":null,"Title":"Updates to releases.json (.NET Core release metadata)","State":"open","Body":"**The changes described in this issue will be live with the .NET Core July update on 7/9/2019.**\r\n\r\nThe releases.json files (e.g. [2.2 releases.json](https://raw.githubusercontent.com/dotnet/core/master/release-notes/2.2/releases.json)) are comprehensive metadata files which capture details of each .NET Core release. These files, along with the top level [releases-index.json](https://raw.githubusercontent.com/dotnet/core/master/release-notes/releases-index.json), are becoming increasingly important .NET Core release assets. These files, one for each major.minor channel, are relied upon by many to detect when updates for .NET Core are available, discover security update details and other uses.\r\n\r\nChanges are sometimes necessary, and the growing dependencies require that we treat compatibility of the schema with the utmost care. This announcement describes an addition to the releases.json schema.\r\n\r\n## SDK Versions and Visual Studio\r\n\r\nBecause of current .NET Core SDK product construction dependencies, there is a hard link between the Runtime, SDK, toolset (compilers, MSBuild, NuGet, and other components), and Visual Studio. Simplistically, this means that when anything updates, everything updates. The unfortunate result of this linking is that multiple versions of the SDK are released with each monthly update for each supported versions of Visual Studio. For example, the May Update for .NET Core 2.2 included the 2.2.5 runtime, 2.2.107 SDK for Visual Studio 2017 and 2.2.204 for Visual Studio 2019 and yet another pair of SDK versions for .NET Core 2.1. An example of this is the [2.2.5 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.5/2.2.5.md). \r\n\r\nThis is a confusing situation and we are working to mitigate the need to release multiple SDKs with .NET Core 3.0. The need for multiple SDK versions will persist for 2.1 LTS.\r\n\r\n## Adding the SDKS array\r\n\r\nTo appropriately model multiple SDKs per release, we are adding an SDKs array to releases.json, which will contain SDK objects. The top-level SDK object will represent the highest versioned SDK for a given update. Using the previous 2.2.5 update example, SDK 2.2.204 is in the top SDK object as well as duplicated in the SDKS array. All other applicable 2.2* SDK objects are included in the SDKS array. The SDK objects within the array will carry specific Visual Studio compatibility and version inclusion information to provide appropriate context.\r\n\r\nHere is an example of the new array based on the upcoming July update.\r\nAgain, this will be additive and the previous SDK object will include the highest SDK version for the release.\r\n\r\n```json\r\n{\r\n    \"sdk\": {\r\n        \"version\": \"2.2.301\",\r\n        \"version-display\": \"2.2.301\",\r\n        \"runtime-version\": \"2.2.6\",\r\n        \"vs-version\": \"16.1.3\",\r\n        \"vs-support\": \"Visual Studio 2019 (v16.1)\",\r\n        \"csharp-version\": \"7.3\",\r\n        \"fsharp-version\": \"4.5\",\r\n        \"vb-version\": null,\r\n        \"files\": []\r\n    },\r\n    \"sdks\": [\r\n        {\r\n            \"version\": \"2.2.301\",\r\n            \"version-display\": \"2.2.301\",\r\n            \"runtime-version\": \"2.2.6\",\r\n            \"vs-version\": \"16.1.3\",\r\n            \"vs-support\": \"Visual Studio 2019 (v16.1)\",\r\n            \"csharp-version\": \"7.3\",\r\n            \"fsharp-version\": \"4.5\",\r\n            \"vb-version\": null,\r\n            \"files\": []\r\n        },\r\n        {\r\n          \"version\": \"2.2.205\",\r\n          \"version-display\": \"2.2.205\",\r\n          \"runtime-version\": \"2.2.6\",\r\n          \"vs-version\": \"16.0.5\",\r\n          \"vs-support\": \"Visual Studio 2019 (v16.0)\",\r\n          \"csharp-version\": \"7.3\",\r\n          \"fsharp-version\": \"4.5\",\r\n          \"vb-version\": null,\r\n          \"files\": []\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\n## vs-version and the Runtime\r\n\r\nThe same version of the runtime is included in multiple versions of Visual Studio. To account for this, the vs-version field is being updated to a comma-delimited string. The string will represent all versions of Visual Studio which first include the particular .NET Core update. Again, an example from the upcoming July Update.\r\n\r\n```json\r\n\"runtime\": {\r\n        \"version\": \"2.2.6\",\r\n        \"version-display\": \"2.2.6\",\r\n        \"vs-version\": \"15.9.13, 16.1.3, 16.2.0\",\r\n```\r\n\r\nThe same `vs-versions` changes will be seen in the `aspnetcore-runtime` object.\r\n\r\n## Future Enhancements\r\n\r\nThere are other improvements to the schema which have been suggested by the community which we are evaluating. Generally, theses enhancements are additive and should not represent compatibility compromises for existing parsers and similar announcements will be published ahead of any changes.\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/116","RelatedDescription":"Open issue \"Updates to releases.json (.NET Core release metadata)\" (#116)"},{"Id":"444065225","IsPullRequest":false,"CreatedAt":"2019-05-14T18:38:23","Actor":"TaraOverfield","Number":"114","RawContent":null,"Title":"May 2019 .NET Updates","State":"open","Body":"# May 2019 .NET Updates\r\n\r\nThe following .NET updates were released in May 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.16 and .NET Core SDK 1.1.13( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.16/1.0.16.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.13/1.1.13.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.11 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.11/2.1.11.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.5 and .NET Core SDK ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.5/2.2.5.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2727](https://github.com/dotnet/core/issues/2727)\r\n\r\n## .NET Framework\r\n* [.NET Framework May 2019 Security and Quality Rollup - May 14, 2019](https://devblogs.microsoft.com/dotnet/net-framework-may-2019-security-and-quality-rollup/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/114","RelatedDescription":"Open issue \"May 2019 .NET Updates\" (#114)"},{"Id":"444027703","IsPullRequest":false,"CreatedAt":"2019-05-14T17:06:24","Actor":"blowdart","Number":"113","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and ASP.NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core and ASP.NET Core improperly handle web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core and ASP.NET Core application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core and ASP.NET Core web applications handle web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37651\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Private.Uri package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0, 4.3.1 | 4.3.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Nemanja Mijailovic](https://mijailovic.net/)\r\n\r\n### External Links\r\n\r\n[CVE-2019-0981](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0981)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/113","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0981: .NET Core Denial of Service Vulnerability\" (#113)"},{"Id":"444027025","IsPullRequest":false,"CreatedAt":"2019-05-14T17:04:45","Actor":"blowdart","Number":"112","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core and ASP.NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core and ASP.NET Core improperly handle web requests. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET Core and ASP.NET Core application. The vulnerability can be exploited remotely, without authentication.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core and ASP.NET Core web applications handle web requests.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37650\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Private.Uri package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0, 4.3.1 | 4.3.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Nemanja Mijailovic](https://mijailovic.net/)\r\n\r\n### External Links\r\n\r\n[CVE-2019-0980](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0980)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/112","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0980: .NET Core Denial of Service Vulnerability\" (#112)"},{"Id":"444026277","IsPullRequest":false,"CreatedAt":"2019-05-14T17:02:57","Actor":"blowdart","Number":"111","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nA denial of service vulnerability exists when .NET Core improperly process RegEx strings. An attacker who successfully exploited this vulnerability could cause a denial of service against a .NET application.\r\n\r\nA remote unauthenticated attacker could exploit this vulnerability by issuing specially crafted requests to a .NET Core application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handle RegEx string processing.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/37649\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nThere are no mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the System.Text.RegularExpressions package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Text.RegularExpressions.dll | 4.3.0 | 4.3.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nThe affected assemblies are part of .NET Core. If you are running a vulnerable version of .NET Core you may be affected.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nTo fix the issue please install the latest version of .NET Core. If you have multiple versions of .NET Core installed you will need to install multiple runtimes, or SDKs depending on what you have installed.\r\n\r\nIf you have .NET Core 2.0 or greater installed you can list the versions you have installed by running the `dotnet --info` command. You will see output like the following;\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   3.0.100-preview3-010431\r\n Commit:    d72abce213\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.18362\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\3.0.100-preview3-010431\\\r\n\r\nHost (useful for support):\r\n  Version: 3.0.0-preview3-27503-5\r\n  Commit:  3844df9537\r\n\r\n.NET Core SDKs installed:\r\n  1.1.13 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.602 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.202 [C:\\Program Files\\dotnet\\sdk]\r\n  3.0.100-preview3-010431 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\\\r\n  Microsoft.AspNetCore.All 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.App 3.0.0-preview3-19153-02 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.15 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.3 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 3.0.0-preview3-27503-5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.WindowsDesktop.App 3.0.0-preview3-27504-2 [C:\\Program Files\\dotnet\\shared\\Microsoft.WindowsDesktop.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your version of .NET Core does not support the `dotnet --info` command then you have either .NET Core 1.0 or .NET Core 1.1 installed.\r\n\r\n* For machines running .NET Core 1.0 you should download Runtime 1.0.16 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.0.\r\n* For machines running .NET Core 1.1 you should download Runtime 1.1.13 or SDK 1.1.14 from https://dotnet.microsoft.com/download/dotnet-core/1.1.\r\n* For machines running .NET 2.1 you should download Runtime 2.1.11 or SDK 2.1.507 for Visual Studio 2017 or SDK 2.1.604 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.1\r\n* For machines running .NET 2.2 you should download Runtime 2.2.5 or SDK 2.2.107 for Visual Studio 2017 or SDK 2.2.204 for Visual Studio 2019 from https://dotnet.microsoft.com/download/dotnet-core/2.2.\r\n\r\nOnce you have installed the updated runtime or SDK you should restart your apps for the update to take effect.\r\n\r\nIf you have [pinned your application](https://docs.microsoft.com/en-us/dotnet/core/versions/selection) to a specific version of the runtime you must update your app, recompile and redeploy it for the update to take effect.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0820](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0820)\r\n\r\n### Revisions\r\n\r\nV1.0 (May 14, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-05-14_","Url":"https://github.com/dotnet/announcements/issues/111","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0820: .NET Core Denial of Service Vulnerability\" (#111)"},{"Id":"435015242","IsPullRequest":false,"CreatedAt":"2019-04-19T01:16:10","Actor":"MichaelSimons","Number":"110","RawContent":null,"Title":"New images for .NET Framework 4.8","State":"open","Body":"# New images for .NET Framework 4.8\r\n\r\nNew images have been released with support for [.NET Framework 4.8 runtime and SDK](https://devblogs.microsoft.com/dotnet/announcing-the-net-framework-4-8/).\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#271](https://github.com/Microsoft/dotnet-framework-docker/issues/271)\r\n\r\n## Details\r\n* Pull request: #270\r\n\r\nYou can access these new images with the following tags:\r\n* `mcr.microsoft.com/dotnet/framework/runtime:4.8`\r\n* `mcr.microsoft.com/dotnet/framework/sdk:4.8`\r\n\r\nIn addition, the `latest` tag has been updated to refer to these new 4.8 images.\r\n\r\nCheck out the readme files for more information on the latest tags:\r\n* [Runtime](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.runtime.md)\r\n* [SDK](https://github.com/Microsoft/dotnet-framework-docker/blob/master/README.sdk.md)\r\n\r\nThe [3.5 SDK](https://github.com/Microsoft/dotnet-framework-docker/tree/master/3.5/sdk) images are intended to always contain the latest .NET Framework SDK and have also been updated to use the 4.8 SDK.","Url":"https://github.com/dotnet/announcements/issues/110","RelatedDescription":"Open issue \"New images for .NET Framework 4.8\" (#110)"},{"Id":"433297298","IsPullRequest":false,"CreatedAt":"2019-04-15T13:57:07","Actor":"MichaelSimons","Number":"109","RawContent":null,"Title":".NET Framework SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Framework SDK container images now contain the Visual Studio 2019 toolset\r\n.NET Framework SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add additional tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Framework SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Framework SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker#269](https://github.com/Microsoft/dotnet-framework-docker/issues/269)\r\n\r\n## Details\r\nVisual Studio 2019 was released on April 2, 2019. We updated the .NET Framework SDK container images, on the same day, to include a new version of the .NET Framework SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag (e.g. mcr.microsoft.com/dotnet/framework/sdk:4.7.2-20190312-windowsservercore-ltsc2019).\r\n\r\nRelated pull request: [#252](https://github.com/Microsoft/dotnet-framework-docker/pull/252)","Url":"https://github.com/dotnet/announcements/issues/109","RelatedDescription":"Open issue \".NET Framework SDK container images now contain the Visual Studio 2019 toolset\" (#109)"},{"Id":"432735158","IsPullRequest":false,"CreatedAt":"2019-04-12T20:35:55","Actor":"KathleenDollard","Number":"108","RawContent":null,"Title":".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017","State":"open","Body":"# .NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\r\n\r\n.NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017. For example, 2.2.203 and 2.1.603 cause failures in Visual Studio 2017. To work on projects in Visual Studio 2017, use .NET Core SDK 2.2.1nn and 2.1.5nn, such as 2.2.106 and 2.1.506. You can install any combination of these SDKs side by side.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3124](https://github.com/dotnet/sdk/issues/3124)\r\n\r\n## Details\r\n\r\nYou can find the SDKs on you machine using the following at a command prompt:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2. Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nIf you downloaded the .NET Core SDK 2.2 between April 2 and April 12, 2019, the main [.NET downloads page](https://dotnet.microsoft.com/download/) included only 2.2.2nn. Starting April 12th, a new button marked \"Compatible with Visual Studio 2017\" is provided to target 2.2.1nn. If you downloaded 2.2 prior to this date, and you use Visual Studio 2017, install the compatible version.\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nThis problem most often occurs because you manually uninstall the 2.1.5nn version. Simply reinstall it from the [.NET Core 2.1 downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n## More information\r\n\r\nHere is the draft of an article we are preparing for .NET Core documentation:\r\n\r\n---\r\n\r\n## Solving Problems with .NET Core SDK Selection in Visual Studio\r\n\r\nYou may have .NET Core SDKs on your machine and still have problems with Visual Studio finding an appropriate one. This article explains why this happens and how you can fix your installation.\r\n\r\nWhen Visual Studio can't find an appropriate version of the .NET Core SDK, you'll receive an error message. This may appear in the Error pane as NETSDK1045:\r\n\r\n\"The current .NET SDK does not support targeting .NET Core 2...\"\r\n\r\nYou can check what .NET Core SDKs you have on your machine with the following command:\r\n\r\n```bash\r\ndotnet --list-sdks\r\n```\r\n\r\nUnless you have a global.json file, when you use `dotnet` from the command line, the latest .NET Core SDK is used.\r\n\r\n> [TIP!] \r\n> Open a command prompt and try to build with `dotnet build`. If the command line build works, but Visual Studio doesn't suggestions in this article may help.\r\n\r\nThe last two digits of the .NET Core SDK version numbers are in the format are a patch number, which is represented by `nn` in this article because we will continue to service them to include the latest runtimes. To find out more, vist the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\n## Fixes for Common Problems\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.2\r\n\r\nIf you receive the error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.2… Either target .NET Core 2.1 or lower, or use a version of the .NET SDK that supports .NET Core 2.2.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.2.1nn. As an example, 2.2.106 would be a valid entry.\r\n\r\nIf you downloaded the .NET Core SDK 2.2 after April 2, 2019, version 2.2.2nn (such as 2.2.203) is listed first and is the highest version available. However, Visual Studio 2017 requires 2.2.1nn (such as 2.2.106). .NET Core SDK 2.2.2nn works with Visual Studio 2019. Visual Studio 2017 and Visual Studio 2019 can be installed side by side, but this requires both .NET Core SDK 2.2.1nn and .NET Core SDK 2.2.2nn to develop .NET Core 2.2 applications.\r\n\r\nTo download .NET Core SDK 2.2.2nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n### Visual Studio 2017 can't target .NET Core 2.1\r\n\r\nIf you receive this error message in Visual Studio 2017:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 2.1.5nn. As an example, 2.1.505 would be a valid entry. \r\n\r\nThis problem occurs of you manually uninstall the 2.1.5nn version.\r\n\r\nThe Visual Studio 2019 installation will not remove this file and Visual Studio 2017 will continue to work side by side.\r\n\r\nTo reinstall .NET Core SDK 2.1.5nn, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\n### Visual Studio 2019 can't target .NET Core 3.0 Preview\r\n\r\nIf you receive this error message in Visual Studio 2019:\r\n\r\n`The current .NET SDK does not support targeting .NET Core 2.1. Either target .NET Core 2.0 or lower, or use a version of the .NET SDK that supports .NET Core 2.1.`\r\n\r\nUse `dotnet --list-sdks` to ensure you have .NET Core SDK 3.0.100-preview... As an example, SDK 3.0.100-preview3-010431 would be a valid entry.\r\n\r\nTo install .NET Core SDK 3.0.1nn preview, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core/3.0).\r\n\r\nIn Visual Studio, go to `Tools\\Options\\Projects and Solutions\\.NET Core` and check the box `Use Previews of the .NET Core SDK`.\r\n\r\n> [NOTE!]\r\n> This option will be moving to `Tools\\Options\\Environment` and renamed `Preview Features` in Visual Studio 2019 version 16.1 Preview 2.\r\n\r\nIf you are targeting .NET Core 3.0 preview, the [C# language version will be C# 8.0 Preview by default](https://docs.microsoft.com/en-us/visualstudio/releases/2019/release-notes#csharp-defaults) allowing you to use new C# features.\r\n\r\n## Understand the relationship between .NET Core SDKs and Visual Studio build tools\r\n\r\nVisual Studio has its own copies of tools like MSBuild, NuGet and the compilers. If you install the .NET Core workload, it also installs the .NET Core SDK which has versions of these tools and provides tasks and targets. These two versions are built from the same repositories, but target .NET Framework and .NET Core respectively. \r\n\r\nWhen you build a .NET Core project in Visual Studio, it uses Visual Studio's copy of MSBuild, but the tasks and targets are supplied from the selected version of the .NET Core SDK. \r\n\r\nWhen you upgrade the .NET Core SDK, you get new tasks and targets. These new tasks and targets may contain features that are not supported by older versions of MSBuild. Like all of the .NET Core SDK, MSBuild is backwards compatible. It is not forwards compatible.\r\n\r\nThis generally works well, but requires a guarantee that the tasks and targets work with the MSBuild version. To ensure this, each .NET Core SDK indicates an MSBuild version range that is used by Visual Studio to determine compatibility. Versions of the .NET Core SDK that have a higher MSBuild identifier than expected are ignored by Visual Studio. In the normal case, this simply means you use the tasks and targets that were installed with your version of Visual Studio.\r\n\r\nBecause of this, you may have many versions of the .NET Core SDK on your machine and Visual Studio still fail to find one it considers appropriate. This is compounded by a poor error message, which we cannot fully correct because it is from the old version of the .NET Core SDK on your machine. Confusion is also compounded by a complex non-linear release matrix that makes it difficult to predict the right .NET Core SDK to select. We are working to improve all this. \r\n\r\n## The Visual Studio / .NET Core SDK support matrix\r\n\r\nThe last two digits of the .NET Core SDK version number are a patch number, which are represented by a `nn` in this table. You can learn more about .NET Core SDK and .NET Core Runtime versioning at the [Overview of how .NET Core is versioned page](https://docs.microsoft.com/en-us/dotnet/core/versions/).\r\n\r\nThe following table shows which Visual Studio versions and .NET Core SDKs are compatible and how they are acquired if you are working with Visual Studio. \r\n\r\n| .NET Core SDK | .NET Core Runtime | Compatible Visual Studio | MSBuild | Notes                                     |\r\n|---------------|-------------------|--------------------------|---------|-------------------------------------------|\r\n| 2.1.5nn       | 2.1               | 2017                     | 15      | Installed as part of VS 2017 version 15.9 |\r\n| 2.1.6nn       | 2.1               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 2.2.1nn       | 2.2               | 2017                     | 15      | Installed manually                        |\r\n| 2.2.2nn       | 2.2               | 2019                     | 16      | Installed as part of VS 2019              |\r\n| 3.0.1nn       | 3.0 (Preview)     | 2019                     | 16      | Installed manually                        |\r\n\r\nVisual Studio 2017 cannot work with .NET Core SDK 2.1.6nn or 2.2.2nn.\r\n\r\nTo find out more about removing older versions of the .NET Core Runtime and .NET Core SDK, visit the [How to remove the .NET Core Runtime and SDK page](https://docs.microsoft.com/en-us/dotnet/core/versions/remove-runtime-sdk-versions?tabs=macos).\r\n\r\nTo download the .NET Core SDK, visit the [.NET downloads page](https://dotnet.microsoft.com/download/dotnet-core).","Url":"https://github.com/dotnet/announcements/issues/108","RelatedDescription":"Open issue \".NET Core SDK 2.2.2nn and 2.1.6nn do not work with Visual Studio 2017\" (#108)"},{"Id":"432081093","IsPullRequest":false,"CreatedAt":"2019-04-11T15:16:43","Actor":"KathleenDollard","Number":"107","RawContent":null,"Title":"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below","State":"open","Body":"# Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\r\n\r\n.NET Core 3 takes the next step in the .NET Core tool strategy with local tools. As part of this process, starting in Preview 4 DotNetCliToolReference tools will be restricted to targeting .NET Core 2.2 and below. DotNetCliToolReference tools can be used in projects targeting .NET Core 3.0, but the tools themselves should target .NET Core 2.2 or below.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/sdk #3115](https://github.com/dotnet/sdk/issues/3115)\r\n\r\n## Details\r\n\r\nThe suggested approach going forward is to to use [.NET Core Local Tools](https://aka.ms/local-tools) when you want a tool that is specific to a project or repository. At the same time we are removing the need to access local tools by the verbose `dotnet tool run <toolname>` that was present in earlier previews. You can now access local tools via `dotnet <toolname>`.\r\n\r\nDotNetCliToolReference tools have a flaw in how their dependencies are restored which can create [difficult to diagnose bugs when running these tools](https://github.com/NuGet/Home/issues/5067). This issue would occur much more frequently if targeting .NET Core 3.0 was allowed. Restricting tools to target only .NET Core 2.2 and below means existing scenarios to continue to work (as well as they previously did), regardless of the framework version targeted by the project or the current .NET Core SDK. \r\n\r\nThe new .NET Core tool strategy avoids this flaw in restore strategy and offers other benefits, like the ability to author one type of tool and install it in different ways depending on project and user needs.\r\n\r\nWe look forward to your feedback on .NET Core Local Tools, and on challenges you face moving away from DotNetCliToolReference tools. \r\n\r\n[dotnet/sdk #3057](https://github.com/dotnet/sdk/pull/3057)","Url":"https://github.com/dotnet/announcements/issues/107","RelatedDescription":"Open issue \"Limit DotNetCliToolReference Tools to .NET Core 2.2 and Below\" (#107)"},{"Id":"431012407","IsPullRequest":false,"CreatedAt":"2019-04-09T14:51:18","Actor":"MichaelSimons","Number":"106","RawContent":null,"Title":".NET Core SDK container images now contain the Visual Studio 2019 toolset","State":"open","Body":"# .NET Core SDK container images now contain the Visual Studio 2019 toolset\r\n\r\n.NET Core SDK container images now include Visual Studio 2019 tools. For most scenarios, this change will not be observable, however, there may be some breaks that will be documented in this issue. We did not add *additional* tools to the SDK, but updated existing tools to match the same tools in Visual Studio 2019. Previously, the tools in SDK matched the same tools in Visual Studio 2017.\r\n\r\nWe will only produce .NET Core SDK images that include Visual Studio 2019 tools. We will not produce another set of .NET Core SDK images that includes Visual Studio 2017 tools. There is a strong goal that the tools remain compatible over releases.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1042](https://github.com/dotnet/dotnet-docker/issues/1042)\r\n\r\n## Details\r\n\r\n[Visual Studio 2019](https://devblogs.microsoft.com/visualstudio/visual-studio-2019-code-faster-work-smarter-create-the-future/) was released on April 2, 2019. We updated the .NET Core SDK container images, on the same day, to include a new version of the .NET Core SDK that contains tools that match the same tools in Visual Studio 2019.\r\n\r\nThese tools include:\r\n\r\n* MSBuild\r\n* NuGet\r\n* C# compiler\r\n* F# compiler\r\n* VB compiler\r\n* VS Test\r\n\r\nIf you encounter a breaking change or other issues and need to quickly unblock yourself, you can reference the previous version of the image by using its full version tag:\r\n\r\n* 2.1: `mcr.microsoft.com/dotnet/core/sdk:2.1.505`\r\n* 2.2: `mcr.microsoft.com/dotnet/core/sdk:2.2.105`\r\n\r\nDetails:\r\n\r\n* [dotnet/dotnet-docker #1029](https://github.com/dotnet/dotnet-docker/pull/1029)\r\n* [2.1 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.602-SDK/2.1.602-SDK.md)\r\n* [2.2 SDK release notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.202-SDK/2.2.202-SDK.md)\r\n\r\n## Known Breaking Changes for SDK images (VS 2017 to VS 2019 upgrade)\r\n\r\nThe following issues and breaks have been discovered.\r\n \r\n### Test Log File Name Change\r\n\r\nA change was introduced to the `dotnet test` command when a user-defined log file name is specified.  In the previous version the resulting log file would be named exactly as specified.  In the current version, the log file is named with a timestamp suffix automatically added to the user-defined name.  \r\n\r\nDetails:\r\n* [Microsoft/vstest #1603](https://github.com/Microsoft/vstest/issues/1603) \r\n* [Microsoft/vstest#1876](https://github.com/Microsoft/vstest/issues/1876)","Url":"https://github.com/dotnet/announcements/issues/106","RelatedDescription":"Open issue \".NET Core SDK container images now contain the Visual Studio 2019 toolset\" (#106)"},{"Id":"431003701","IsPullRequest":false,"CreatedAt":"2019-04-09T14:35:39","Actor":"MichaelSimons","Number":"105","RawContent":null,"Title":"Windows Server, version 1709 no longer Supported by .NET Framework","State":"open","Body":"# Windows Server, version 1709 no longer Supported by .NET Framework\r\n\r\nWindows Server, version 1709 is no longer supported. As a result, this version of Windows is no longer supported by the .NET Team and we will no longer produce .NET Framework container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Framework Docker images](https://hub.docker.com/_/microsoft-dotnet-framework)\r\n* [.NET Framework Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-framework)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-framework-docker #259](https://github.com/Microsoft/dotnet-framework-docker/issues/259)\r\n\r\n## Details\r\n\r\nDocker tags that contain `windowsservercore-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Windows Server and .NET Framework.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `4.7.1`, and  `4.7.2`. These are tags that are supported on multiple operating systems and versions, and do  not contain the operating system in them. As a result of no longer producing new images for Windows Server, version 1709, manifest tags no longer include entries for Windows 10, version 1709, and Windows Server,version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.17134-based image is incompatible with a 10.0.16299 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Windows Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Windows Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/framework/runtime:4.7.2-windowsservercore-1709` or `mcr.microsoft.com/dotnet/framework/sdk:4.7.2-windowsservercore-1709`.","Url":"https://github.com/dotnet/announcements/issues/105","RelatedDescription":"Open issue \"Windows Server, version 1709 no longer Supported by .NET Framework\" (#105)"},{"Id":"430998341","IsPullRequest":false,"CreatedAt":"2019-04-09T14:25:57","Actor":"MichaelSimons","Number":"104","RawContent":null,"Title":"Nano Server 2016 and 1709 no longer Supported by .NET Core","State":"open","Body":"# Nano Server 2016 and 1709 no longer Supported by .NET Core\r\n\r\nNano Server 2016 and Nano Server, version 1709 are no longer supported. As a result, these versions of Windows are no longer supported by the .NET Team and we will no longer produce .NET Core container images for those Windows versions.\r\n\r\nSupport statements:\r\n\r\n* [Currently supported .NET Core Docker images](https://hub.docker.com/_/microsoft-dotnet-core)\r\n* [.NET Core Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-core)\r\n* [Products Reaching End of Support for 2018](https://support.microsoft.com/en-us/help/4043450/products-reaching-end-of-support-for-2018)\r\n* [Products Reaching End of Support for 2019](https://support.microsoft.com/en-us/help/4316957/products-reaching-end-of-support-for-2019)\r\n\r\nWe previously announced Nano Server 2016 going out of support in [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/). That post is still accurate.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #1041](https://github.com/dotnet/dotnet-docker/issues/1041)\r\n\r\n## Details\r\n\r\nDocker tags that contain `nanoserver-sac2016` and `nanoserver-1709` are no longer be produced. We will not delete existing images or those tags, however, they contain unsupported builds of Nano Server and .NET Core.\r\n\r\n## Pulling manifest tags\r\n\r\nThese changes also affect manifest tags (AKA “multi-arch tags“), such as `2.1`, `2.1-sdk`, `2.2.1-runtime`. These are tags that are supported on multiple operating systems, and do not contain the operating system in them. As a result of no longer producing new images for Nano Server 2016 and Nano Server, version 1709, manifest tags no longer include entries for Nano Server 2016, Windows Server 2016, Windows 10, version 1607, Windows 10, version 1709, and Windows Server, version 1709. That means that .NET Core manifest tags are no longer usable on those Windows versions.\r\n\r\nIf you pull a manifest tag on one of the Windows versions described, you may get one of the following error messages:\r\n\r\n* `a Windows version 10.0.16299-based image is incompatible with a 10.0.14393 host`\r\n* `no matching manifest for windows/amd64 in the manifest list entries`\r\n* `no matching manifest for unknown in the manifest list entries`\r\n\r\nIf you need to still use Nano Server 2016 or Nano Server, version 1709 images (even though they are no longer supported), you will need to use tags that include the Nano Server version (these are non-manifest tags), for example `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-sac2016` or `mcr.microsoft.com/dotnet/core/runtime:2.1-nanoserver-1709`.\r\n\r\n### Nano Server Support\r\n\r\n.NET Core is supported on Nano Server, version 1803 and later. \r\n\r\n.NET Core 2.x and 3.0 images are available for all supported versions of Nano Server, version 1803 and later. This means that 2.x and 3.0 manifest tags can be used on Windows 10, version 1803+, and Windows Server, version 1803+. You can also use non-manifest tags for those versions, too, such as `2.2-nanoserver-1809`.\r\n\r\n.NET Core 1.x images are available for Nano Server, version 1809 and later. This means that 1.x manifest tags can be used on Windows 10, version 1809+, Windows Server, version 1809+ and Windows Server 2019. You can also use non-manifest tags for those versions, too, such as `1.1-nanoserver-1809` tag.","Url":"https://github.com/dotnet/announcements/issues/104","RelatedDescription":"Open issue \"Nano Server 2016 and 1709 no longer Supported by .NET Core\" (#104)"},{"Id":"420117627","IsPullRequest":false,"CreatedAt":"2019-03-12T17:35:16","Actor":"vivmishra","Number":"103","RawContent":null,"Title":"March 2019 .NET Updates","State":"open","Body":"# March 2019 .NET Updates\r\n\r\nThe following .NET updates were released in March 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework March 2019 Update - March 19, 2019](https://devblogs.microsoft.com/dotnet/net-framework-march-2019-update/)\r\n* [.NET Framework April 2, 2019 Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - April 2, 2019](https://devblogs.microsoft.com/dotnet/net-framework-april-2-2019-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n\r\n## .NET Core\r\n\r\n* .NET Core 1.0.15 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.15/1.0.15.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.0) )\r\n\r\n* .NET Core 1.1.12 and .NET Core SDK 1.1.13 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.12/1.1.12.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/1.1) )\r\n\r\n* .NET Core 2.1.9 and .NET Core SDK 2.1.505 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.9/2.1.9.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.3 and .NET Core SDK 2.2.105 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.3/2.2.3.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2432](https://github.com/dotnet/core/issues/2432)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/103","RelatedDescription":"Open issue \"March 2019 .NET Updates\" (#103)"},{"Id":"415363751","IsPullRequest":false,"CreatedAt":"2019-02-27T22:49:51","Actor":"leecow","Number":"102","RawContent":null,"Title":"SDK Installers will remove previous patch versions","State":"open","Body":"The SDK Installers for Windows will upgrade patch versions in place within the same feature band. This will reduce the number of SDKs that are installed on programmer machines.\r\n\r\nFeature bands of the SDK are defined like 3.0.1nn. [Find out more about SDK version numbers](https://docs.microsoft.com/dotnet/core/versions/#versioning-details).\r\n\r\nThis means when .NET Core SDK 3.0.101 becomes available and is installed, .NET Core SDK 3.0.100 will be removed from the machine if it exists. When .NET Core SDK 3.0.200 becomes available and is installed on the same machine, .NET Core SDK versions like 3.0.101 will not be removed but stay side by side with 3.0.200.\r\n\r\nThis approach supports use of `global.json` which will roll forward across patch versions, but not feature bands of the SDK. Thus, upgrading via the SDK installer will not result in errors due to a missing SDK. Feature bands also align with side by side Visual Studio installations for those users that install SDKs for Visual Studio use. For example, Visual Studio 15.9 uses .NET Core SDK 2.2.500 but does not support .NET Core SDK 2.2.600.\r\n\r\nFind out how to [remove other .NET Core SDK versions here.](https://docs.microsoft.com/dotnet/core/versions/remove-runtime-sdk-versions).","Url":"https://github.com/dotnet/announcements/issues/102","RelatedDescription":"Open issue \"SDK Installers will remove previous patch versions\" (#102)"},{"Id":"410971363","IsPullRequest":false,"CreatedAt":"2019-02-15T22:24:40","Actor":"richlander","Number":"101","RawContent":null,"Title":"Publishing .NET Core images to Microsoft Container Registry (MCR)","State":"open","Body":"# Publishing .NET Core images to Microsoft Container Registry (MCR)\r\n\r\nMicrosoft teams are now publishing container images to the [Microsoft Container Registry](https://azure.microsoft.com/en-us/blog/microsoft-syndicates-container-catalog/). There are two primary reasons for this change:\r\n\r\n* Syndicate Microsoft-provided container images to multiple registries, like Docker Hub and Red Hat.\r\n* Use Microsoft Azure as a global CDN for delivering Microsoft-provided container images.\r\n\r\nYou will use and see MCR as a storage back-end for Microsoft images. The primary way you learn about Microsoft container images and tags will be through a registry, which for most users will continue to be Docker Hub. Most of the experience you've had browsing for .NET Core container images will continue unchanged with this new model. The Docker Hub URLs you've used for Microsoft repos will continue to work, and forward to updated locations on Docker Hub. Existing Docker Hub will images will be maintained as-is.\r\n\r\nSee [.NET Core Container Images now Published to Microsoft Container Registry](https://devblogs.microsoft.com/dotnet/net-core-container-images-now-published-to-microsoft-container-registry/) for the most updated information on our use of MCR.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #935](https://github.com/dotnet/dotnet-docker/issues/935)\r\n\r\n## Starting with .NET Core nightly repo\r\n\r\nOn the .NET team, we started our [transition to MCR](https://github.com/dotnet/dotnet-docker/issues/745) with the .NET Core \"nightly\" repo. [dotnet-nightly](dockerhub.com/r/microsoft/dotnet-nightly) is now hosted on MCR and syndicated to Docker Hub. We started with the nightly repo in order to discover and fix any challenges we found with this new model before we move our higher-traffic primary container repository.\r\n\r\nWe will start publishing [dotnet](dockerhub.com/r/microsoft/dotnet) to MCR a bit later, in either February or March. This issue will be updated when that happens.\r\n\r\n## Repo Split\r\n\r\nThe [.NET Core repo](https://hub.docker.com/r/microsoft/dotnet) currently includes 4 major categories of tags: \r\n\r\n* `sdk`\r\n* `aspnetcore-runtime`\r\n* `runtime` \r\n* `runtime-deps`\r\n\r\nProviding all of the tags in one place has helped with discoverability but made for a repo with an enormous README that can be challenging to navigate and consume. It is large enough that we exceeded Docker Hub README limits and had to artificially make it smaller.\r\n\r\nGoing forward, we will provide a repo for each of the tag categories listed above. We'll also provide a \"product repo\" that will hierarchicaly group all of our repos together. This will satisfy discoverability needs so that it will be easy to find the tags you want.\r\n\r\nYou can already see this experience with [microsoft-dotnet-core-nightly](https://hub.docker.com/_/microsoft-dotnet-core-nightly). There are now multiple repos for our nightly builds:\r\n\r\n* [.NET Core Nightly product repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly)\r\n* [.NET Core SDK Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-sdk/)\r\n* [.NET Core ASP.NET Core Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-aspnet/)\r\n* [.NET Core Runtime Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime/)\r\n* [.NET Core Runtime-deps Nightly repo](https://hub.docker.com/_/microsoft-dotnet-core-nightly-runtime-deps/)\r\n\r\nThe same split will exist for the non-nightly stable repo (currently hosted at  [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet)) when we start publishing it to MCR and syndicating it back to DockerHub.\r\n\r\n## Changes to registry URL\r\n\r\nThe biggest change is that your Dockerfiles need to be updated to point to the MCR registry in order get access to new .NET Core container tags. The same change is required for scripts or human operations that pull images via `docker pull`.\r\n\r\nThe following example shows the registry path, repo and tag for the .NET Core 2.2 \"Nightly\" SDK on MCR:\r\n\r\n```console\r\nmcr.microsoft.com/dotnet/core-nightly/sdk:2.2\r\n```\r\n\r\nAs comparison, the following repo and tag have been used to date for the .NET Core 2.2 \"Nightly\" SDK on Docker Hub:\r\n\r\n```console\r\nmicrosoft/dotnet-nightly:2.2-sdk\r\n```\r\n\r\nThe new repo URL is provided at each of the news repos. For example, the new .NET Core SDK \"nightly\" repo provides a box on the right where you can copy and paste the correct MCR-based repo syntax that you can use for `docker pull` or in `FROM` statements in your Dockerfiles.\r\n\r\n![image](https://user-images.githubusercontent.com/2608468/52811702-95c5eb80-304a-11e9-8de8-e6ea1f4b4d75.png)\r\n\r\n## Servicing existing Docker Hub tags\r\n\r\nWe will continue to service existing non-version-specific or floating tags on Docker Hub while the associated .NET Core version is supported. For example the `microsoft/dotnet:2.1-sdk` tag is a floating tag that will continue to be serviced for the lifetime of .NET Core 2.1. You can continue using floating tags without issue.\r\n\r\nIf you use non-floating tags, like `microsoft/dotnet:2.1.504-sdk-alpine`, then you will need to update your Dockerfile to use a new non-floating tag. No new non-floating tags will be published to `microsoft/dotnet` and `microsoft/dotnet-nightly` after we fully transition to MCR.\r\n\r\n.NET Core 3.0 Preview 3 and later will only be made available on MCR.\r\n\r\n## Microsoft is a Verified Publisher\r\n\r\nUntil now, Microsoft-provided container images were considered \"community images\". As part of this change, we are re-classifying Microsoft as a \"verified publisher\" on Docker Hub. This designation should make it clearer that .NET and other Microsoft-provided images are coming from a verified source. There clearly was that expectation previously, but Docker is now making that clearer in the Docker Hub pages they host for Microsoft.\r\n\r\nWe will provide official vulnerability scanning Microsoft-provided images as a second phase of this transition.","Url":"https://github.com/dotnet/announcements/issues/101","RelatedDescription":"Open issue \"Publishing .NET Core images to Microsoft Container Registry (MCR)\" (#101)"},{"Id":"410784442","IsPullRequest":false,"CreatedAt":"2019-02-15T14:06:29","Actor":"TaraOverfield","Number":"100","RawContent":null,"Title":"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809","State":"open","Body":"<strong><em>Final Update 2/19/19 @1:30 PM (PST)</em></strong><em>: This </em><em>advisory is now resolved with no action needed from Microsoft Customers. The issue was not applicable to any valid or supported configuration. There is no consequence for .NET 4.8 Preview customers. </em>\r\n\r\n<em>We strive to share timely information to protect our customer’s productivity, in this case, our finding was thankfully of no consequence for customers on supported configurations.</em>\r\n\r\n<del><em><strong>Update 2/15/19 @3:35 PM (PST)</strong></em><em>: As we continue our investigation, we are finding the issue to be restricted to a limited and isolated set of test-only systems that are using non-official versions of the .NET 4.8 Preview. As of 2/15/19 around 12:00 pm (PST) we further tightened our delivery mechanisms to ensure that the February .NET security updates are only deployed to their expected target systems.</em></del>\r\n\r\n<del><span>The </span><a href=\"https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/\" rel=\"nofollow\">February 2019 Security and Quality Rollup for Windows 10 update 1809</a><span> was released earlier this week. We have received multiple customer reports of issues when a customer has installed .NET Framework 4.8 Preview then installed the February security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>.</span> These reports are specific to only to the scenario when a customer has installed both .NET Framework 4.8 Preview and the February security update.</del>\r\n\r\n<del>We are actively working on investigating and addressing this issue. If you installed the February 2019 security update and have not seen any negative behavior, we recommend that you leave your system as-is but closely monitor it and ensure that you apply upcoming .NET Framework updates.</del>\r\n\r\n<del>We will continue to update this <a href=\"https://github.com/dotnet/announcements/issues/100\" rel=\"nofollow\">post</a> as we have new information.</del>\r\n<h2><del>Guidance</del></h2>\r\n<del>We are working on guidance and will update this post and as we have new information.</del>\r\n<h2><del>Workaround</del></h2>\r\n<del>There are no known workarounds at this time.</del>\r\n<h2><del>Symptoms</del></h2>\r\n<del>After installing .NET Framework 4.8 Preview then the February 2019 security update, <a href=\"https://support.microsoft.com/kb/4483452\" rel=\"nofollow\">4483452</a>, Visual Studios will crash with this error message:</del>\r\n<p class=\"xxxxxmsonormal\"><del><b><span style=\"font-size: 10.5pt;font-family: 'Segoe UI',sans-serif;color: black\">\"Exception has been thrown by the target of an invocation.\"</span></b></del></p>","Url":"https://github.com/dotnet/announcements/issues/100","RelatedDescription":"Open issue \"RESOLVED: Advisory on February 2019 Security update for Windows 10 update 1809\" (#100)"},{"Id":"410455095","IsPullRequest":false,"CreatedAt":"2019-02-14T19:28:25","Actor":"richlander","Number":"99","RawContent":null,"Title":"Supporting new Alpine versions (for containers)","State":"open","Body":"# Supporting new Alpine versions (for containers)\r\n\r\n[Alpine 3.9](https://twitter.com/alpinelinux/status/1090416212822110214) was recently announced. Congratulations, Alpine team! On the .NET team, we are committed to supporting new Alpine versions quickly, and also need to define a policy for older versions. This policy only applies for the container images that we publish.\r\n\r\n## Discussion\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet-docker #933](https://github.com/dotnet/dotnet-docker/issues/933)\r\n\r\n## Policy\r\n\r\nWe intend to establish the following policy for supporting Alpine with .NET Core container images:\r\n\r\n* Support new Alpine versions within 60 days of release (hopefully much less).\r\n* Support n-1 Alpine versions for 3 months after we support a new Alpine version.\r\n\r\nNote: The [.NET Core support policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md) may be broader. This policy is specific to the container images we produce.\r\n\r\n## Plans\r\n\r\nWe're in the process of [fixing issues required to support Alpine 3.9](https://github.com/dotnet/dotnet-docker/issues/921). We expect that these issues will be resolved in February and that we'll be able to provide support for Alpine 3.9 in March.\r\n\r\nWe will produce Alpine 3.9 images for .NET Core 2.1, 2.2 and 3.0. Assuming we publish 3.9 images in March, we'll stop producing and supporting Alpine 3.7 and 3.8 images after June (2019).\r\n\r\n## Using Alpine-based .NET Core images\r\n\r\nWe produce a variety of Alpine-based images. You can either depend on a specific Alpine version, like with `microsoft/dotnet:2.2-sdk-alpine3.8` or opt to use the latest Alpine image we have to offer, like with `microsoft/dotnet:2.2-sdk-alpine`. Either are good choices. It is just a question of whether you want to make a conscious decision to move to later Alpine releases.\r\n\r\n## Support for ARM32?\r\n\r\nWe produce Alpine images for x64 (and ARM64, shortly). The [Alpine 3.9 announcement](https://twitter.com/alpinelinux/status/1090416212822110214) made mention of support for ARM32v7. We would like to enable .NET Core [Alpine-based images on ARM32](https://github.com/gliderlabs/docker-alpine/issues/463#issuecomment-460530395). We are patiently waiting for that to happen. If that's important to you, you should comment on that thread.","Url":"https://github.com/dotnet/announcements/issues/99","RelatedDescription":"Open issue \"Supporting new Alpine versions (for containers)\" (#99)"},{"Id":"409840927","IsPullRequest":false,"CreatedAt":"2019-02-13T14:48:21","Actor":"TaraOverfield","Number":"98","RawContent":null,"Title":"February 2019 .NET Updates","State":"open","Body":"# February 2019 .NET Updates\r\nThe following .NET updates were released in February 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n* [.NET Framework February 2019 Security and Quality Rollup - February 12, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/13/net-framework-february-2019-security-and-quality-rollup/)\r\n* [.NET Framework February 2019 Preview of Quality Rollup - February 19, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/02/19/net-framework-february-2019-preview-of-quality-rollup/)\r\n\r\n## .NET Support Policies\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/98","RelatedDescription":"Open issue \"February 2019 .NET Updates\" (#98)"},{"Id":"409436643","IsPullRequest":false,"CreatedAt":"2019-02-12T18:21:22","Actor":"leecow","Number":"97","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability","State":"open","Body":"## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 1.0, 1.1, 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a domain spoofing vulnerability in .NET Framework and .NET Core which causes the meaning of a URI to change when International Domain Name encoding is applied. An attacker who successfully exploited the vulnerability could redirect a URI.\r\n\r\nThe security update addresses the vulnerability by disallowing certain Unicode characters from the URI.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/35265\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core 1.0 or 1.1 based application that uses the [System.Private.Uri](https://www.nuget.org/packages/System.Private.Uri/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nSystem.Private.Uri | 4.3.0 | 4.3.1\r\n\r\nAny .NET Core 2.1 or 2.2 based application that uses the [Microsoft.NETCore.App](https://www.nuget.org/packages/Microsoft.NETCore.App) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6, 2.1.7, 2.2.0, 2.2.1 | 2.1.8, 2.2.2\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Private.Uri` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.2.1, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `System.Private.Uri/4.3.0` is a reference to version 4.3.0 of `System.Private.Uri`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.8 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.2 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Private.Uri` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.Private.Uri` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Private.Uri\" Version=\"4.3.0\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0657](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0657)\r\n\r\n### Revisions\r\n\r\nV1.0 (February 12, 2019): Advisory published.\r\n\r\n_Version 1.0_\r\n\r\n_Last Updated 2019-02-08_\r\n","Url":"https://github.com/dotnet/announcements/issues/97","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0657: .NET Core Domain Spoofing Vulnerability\" (#97)"},{"Id":"397026248","IsPullRequest":false,"CreatedAt":"2019-01-08T18:17:45","Actor":"leecow","Number":"96","RawContent":null,"Title":"January 2019 .NET Updates","State":"open","Body":"# January 2019 .NET Updates\r\n\r\nThe following .NET updates were released in January 2019. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Framework\r\n\r\n* [.NET Framework January 2019 Preview of Quality Rollup - January 15, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/15/net-framework-january-2019-preview-of-quality-rollup/)\r\n* [.NET Framework January 2019 Security and Quality Rollup - January 8, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/08/net-framework-january-2019-security-and-quality-rollup/)\r\n* [.NET Framework January 22, 2018 Preview of Cumulative Update for Windows 10 version 1809 and Windows Server 2019 - January 22, 2019](https://blogs.msdn.microsoft.com/dotnet/2019/01/22/net-framework-january-22-2018-preview-of-cumulative-update-for-windows-10-version-1809-and-windows-server-2019/)\r\n\r\n## .NET Core\r\n\r\n* .NET Core 2.1.7 and .NET Core SDK 2.1.503 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.7/2.1.7.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.1) )\r\n\r\n* .NET Core 2.2.1 and .NET Core SDK 2.2.102 ( [Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.2/2.2.1/2.2.1.md) | [Download](https://dotnet.microsoft.com/download/dotnet-core/2.2) )\r\n\r\nA discussion issue is available at [core/2210](https://github.com/dotnet/core/issues/2210)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)","Url":"https://github.com/dotnet/announcements/issues/96","RelatedDescription":"Open issue \"January 2019 .NET Updates\" (#96)"},{"Id":"397020176","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:27","Actor":"blowdart","Number":"95","RawContent":null,"Title":" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a tampering vulnerability exists when .NET Core improperly handles specially crafted files. An attacker who successfully exploited this vulnerability could write arbitrary files and directories to certain locations on a vulnerable system. However, an attacker would have limited control over the destination of the files and directories.\r\n\r\nTo exploit the vulnerability, an attacker must send a specially crafted file to a vulnerable system\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core handles these files.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34427\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nIf your application does not extract ZIP compressed files it is unaffected.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.IO.Compression.ZipFile](https://www.nuget.org/packages/System.IO.Compression.ZipFile/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.IO.Compression.ZipFile) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n`System.IO.Compression.ZipFile` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\nFinally, you must restart your applications once an updated runtime or SDK is installed.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### Acknowledgments\r\n\r\n[Danny Grander](https://twitter.com/grander) of [Snyk](https://snyk.io/)\r\n\r\n### External Links\r\n\r\n[CVE-2018-8416](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8416)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected pacakge table.\r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n\r\n","Url":"https://github.com/dotnet/announcements/issues/95","RelatedDescription":"Open issue \" Microsoft Security Advisory CVE-2018-8416: .NET Core Tampering Vulnerability\" (#95)"},{"Id":"397020142","IsPullRequest":false,"CreatedAt":"2019-01-08T18:00:23","Actor":"blowdart","Number":"94","RawContent":null,"Title":"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core 2.1 and 2.2. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of an information disclosure vulnerability exists in .NET Framework and .NET Core which allows bypassing Cross-origin Resource Sharing (CORS) configurations. An attacker who successfully exploited the vulnerability could retrieve content, that is normally restricted, from a web application.\r\n\r\nThe security update addresses the vulnerability by enforcing CORS configuration to prevent its bypass.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at https://github.com/dotnet/corefx/issues/34428\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nMicrosoft has not identified any mitigating factors for this vulnerability.\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core based application that uses the [System.Net.Http](https://www.nuget.org/packages/System.Net.Http/) package with a vulnerable version listed below.\r\n\r\nPackage name | Vulnerable versions | Secure versions\r\n------------ | ------------------- | -------------------------\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.1.0, 2.1.1, 2.1.2, 2.1.3, 2.1.4, 2.1.5, 2.1.6 | 2.1.7\r\nMicrosoft.NETCore.App (System.Net.Http) | 2.2.0 | 2.2.1\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\n#### Applications that use Microsoft.NetCore.App\r\n\r\n`System.Net.Http` is distributed as part of the .NET Core 2.1 runtime. To check the currently installed runtimes, open a command prompt and run the `dotnet --info` command. If you have a 2.1 or greater runtime installed, you'll see output like the following;\r\n\r\n```text\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.2.100\r\n Commit:    b9f2fa0ca8\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17134\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.100\\\r\n\r\nHost (useful for support):\r\n  Version: 2.2.0\r\n  Commit:  1249f08fed\r\n\r\n.NET Core SDKs installed:\r\n  2.1.5 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.502 [C:\\Program Files\\dotnet\\sdk]\r\n  2.2.100 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.AspNetCore.All 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.6 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.2.0 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf your host version is 2.1.x and the highest `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\nIf your host version is 2.2.x and the highest 2.1.x `Microsoft.NETCore.App` runtime version is less than 2.1.7, you're vulnerable to this issue.\r\n\r\nYou will not see SDK versions if you have only installed the runtime.\r\n\r\n#### Applications not using Microsoft.NetCore.App\r\n\r\nThe affected assembly is also available separately as a NuGet package. If you are not using Microsoft.NetCore.App, you may still be affected if you are referencing the packages listed above.\r\n\r\n##### Direct dependencies\r\n\r\nDirect dependencies are discoverable by examining your `csproj` file. They can be fixed by [editing the project file](#fixing-direct-dependencies) or using NuGet to update the dependency.\r\n\r\n##### Transitive dependencies\r\n\r\nTransitive dependencies occur when you add a package to your project that in turn relies on another package. For example, if Contoso publishes a package `Contoso.Utility` which, in turn, depends on `Contoso.Internals` and you add the `Contoso.Utility` package to your project now your project has a direct dependency on `Contoso.Utility` and, because `Contoso.Utility` depends 'Contoso.Internals', your application gains a transitive dependency on the `Contoso.Internals` package.\r\n\r\nTransitive dependencies are reviewable in two ways:\r\n\r\n* In the Visual Studio Solution Explorer window, which supports searching.\r\n* By examining the `project.assets.json` file contained in the obj directory of your project for `csproj` based projects\r\n\r\nThe `project.assets.json` files are the authoritative list of all packages used by your project, containing both direct and transitive dependencies.\r\n\r\nThere are two ways to view transitive dependencies. You can either [use Visual Studio’s Solution Explorer](#vs-solution-explorer), or you can review [the `project.assets.json` file](#project-assets-json)).\r\n\r\n##### <a name=\"vs-solution-explorer\"></a>Using Visual Studio Solution Explorer\r\n\r\nTo use Solution Explorer, open the project in Visual Studio, and then press Ctrl+; to activate the search in Solution Explorer. Search for the [vulnerable package](#affected-software) and make a note of the version numbers of any results you find.\r\n\r\nFor example, searching for `Microsoft.AspNetCore.Mvc.Core` in an example project that contains a package that takes a dependency on `Microsoft.AspNetCore.Mvc` shows the following results in Visual Studio 2017:\r\n\r\n![Screenshot of search results in Visual Studio 2017](https://cloud.githubusercontent.com/assets/796298/25858816/8ecdc2b4-3491-11e7-9363-746804bb9832.png)\r\n\r\nThe search results appear as a tree. In the previous results, you can see that a reference to `Microsoft.AspNetCore.Mvc.Core` version 1.1.2 is discovered.\r\n\r\nUnder the Dependencies node is a NuGet node. Under the NuGet node is the list of packages you have directly taken a dependency on and their versions.\r\nIn screenshot, the application takes a direct dependency on `Microsoft.AspNetCore.Mvc`. `Microsoft.AspNetCore.Mvc` in turn has leaf nodes that list its dependencies and their versions.\r\nThe `Microsoft.AspNetCore.Mvc` package takes a dependency on a version of `Microsoft.AspNetCore.Mvc.ApiExplorer`, that in turn takes a dependency on a version of `Microsoft.AspNetCore.Mvc.Core`.\r\n\r\n##### <a name=\"project-assets-json\"></a> Manually reviewing project.assets.json\r\n\r\nOpen the *project.assets.json* file from your project’s obj directory in your editor. We suggest you use an editor that understands JSON and allows you to collapse and expand nodes to review this file.\r\nVisual Studio and Visual Studio Code provide JSON friendly editing.\r\n\r\nSearch the *project.assets.json* file for the [vulnerable package](#affected-software), using the format `packagename/` for each of the package names from the preceding table. If you find the assembly name in your search:\r\n\r\n* Examine the line on which they are found, the version number is after the `/`.\r\n* Compare to the [vulnerable versions table](#affected-software).\r\n\r\nFor example, a search result that shows `SSystem.Net.Http/4.3.0` is a reference to version 4.3.0 of `System.Net.Http`.\r\n\r\nIf your *project.assets.json* file includes references to the [vulnerable package](#affected-software), then you need to fix the transitive dependencies.\r\n\r\nIf you have not found any reference to any vulnerable packages, this means either\r\n\r\n* None of your direct dependencies depend on any vulnerable packages, or\r\n* You have already fixed the problem by updating the direct dependencies.\r\n\r\n### <a name=\"how-fix\"></a>How do I fix the issue?\r\n\r\n#### Updating the version of Microsoft.NETCore.App\r\n\r\nIf your host version is a 2.1.x host you must install version 2.1.7 or later of the [.NET Core 2.1 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.1), or corresponding [.NET Core 2.1 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.1).\r\n\r\nIf your host version is a 2.2.x you must install version 2.2.1 or later of the [.NET Core 2.2 runtime](https://dotnet.microsoft.com/download/dotnet-core/2.2), or corresponding  [.NET Core 2.2 SDK](https://dotnet.microsoft.com/download/dotnet-core/2.2).\r\n\r\n#### <a name=\"fixing-direct-dependencies\"></a>Fixing direct dependencies\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project. Look for `PackageReference` elements. The following shows an example project file:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nThe preceding example has a reference to the [vulnerable package](#affected-software), as seen by the single `PackageReference` element. The name of the package is in the `Include` attribute.\r\nThe package version number is in the `Version` attribute. The previous example shows a single direct dependency on `System.Net.Http` version 4.3.0\r\n\r\nTo update the version to the secure package, change the version number to the updated package version as listed on the table [previously](#affected-software).\r\nIn this example, update `System.IO.Pipelines` to the appropriate [fixed package number](#affected-software) for your major version. Save the *csproj* file. The example *csproj* now looks as follows:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIf you're using Visual Studio and you save your updated *csproj* file, Visual Studio will restore the new package version.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the updated dependencies.\r\n\r\nNow recompile your application. If after recompilation you see a *Dependency conflict warning*, you must update your other direct dependencies to versions that take a dependency on the updated package.\r\n\r\n#### <a name=\"transitive-dependencies\"></a>Fixing transitive dependencies\r\n\r\nIf your transitive dependency review found references to the [vulnerable package](#affected-software), you must add a direct dependency to the updated package to your *csproj* file to override the transitive dependency.\r\n\r\nOpen *projectname.csproj* in your editor. If you're using Visual Studio, right-click the project and choose **Edit projectname.csproj** from the context menu, where projectname is the name of your project.\r\nLook for `PackageReference` nodes, for example:\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nYou must add a direct dependency to the updated version of the [vulnerable package](#affected-software) by adding it to the *csproj* file.\r\nYou do this by adding a new line to the dependencies section, referencing the fixed version.\r\nFor example, if your search showed a transitive reference to a vulnerable `System.ServiceModel.Http` version, you'd add a reference to the [fixed package number](#affected-software).\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>net461</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Net.Http\" Version=\"4.3.5\" />\r\n    <PackageReference Include=\"ThirdParty.NotUpdatedYet\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nAfter you've added the direct dependency reference, save your *csproj* file.\r\n\r\nIf you're using Visual Studio, save your updated *csproj* file and Visual Studio will restore the new package versions.\r\nYou can see the restore results by opening the **Output** window (Ctrl+Alt+O) and changing the **Show output from** drop-down list to **Package Manager**.\r\n\r\nIf you're not using Visual Studio, open a command line and change to your project directory. Execute the `dotnet restore` command to restore the new dependencies.\r\n\r\n##### Rebuilding your application\r\n\r\nFinally, you must rebuild your application, test, and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at https://github.com/dotnet/ and https://github.com/aspnet/. The Announcements repo for each product (https://github.com/dotnet/Announcements and https://github.com/aspnet/Announcements) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2019-0545](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0545)\r\n\r\n### Revisions\r\n\r\nV1.1 (January 9, 2019): Correct affected package table. \r\nV1.0 (January 8, 2019): Advisory published.\r\n\r\n_Version 1.1_\r\n\r\n_Last Updated 2019-01-09_\r\n","Url":"https://github.com/dotnet/announcements/issues/94","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2019-0545: .NET Core Information Disclosure Vulnerability\" (#94)"},{"Id":"390948658","IsPullRequest":false,"CreatedAt":"2018-12-14T03:22:58","Actor":"wu-yafeng","Number":"93","RawContent":null,"Title":"Docker image with tag '2.2-aspnetcore-runtime' is not compatible","State":"closed","Body":"1. Install  .NET Core 2.2.100 sdk\r\n2. Create a new 'AspNetCore Web Api' by using Visual Studio 2017,and enbale docker support.\r\n3. F5 ,the Output Windows shows:\r\n>It was not possible to find any compatible framework version\r\n>The specified framework 'Microsoft.AspNetCore.App', version '2.2.0' was not found.\r\n>  - Check application dependencies and target a framework version installed at:\r\n>      /usr/share/dotnet/\r\n>  - Installing .NET Core prerequisites might help resolve this problem:\r\n>     http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n>  - The .NET Core framework and SDK can be installed from:\r\n>      https://aka.ms/dotnet-download\r\n>  - The following versions are installed:\r\n>      2.2.0-preview3-35497 at [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]","Url":"https://github.com/dotnet/announcements/issues/93","RelatedDescription":"Closed issue \"Docker image with tag '2.2-aspnetcore-runtime' is not compatible\" (#93)"},{"Id":"390193072","IsPullRequest":false,"CreatedAt":"2018-12-12T12:56:53","Actor":"bilalmalik777","Number":"92","RawContent":null,"Title":".net core Console","State":"closed","Body":"I am running dot net core console app as web jobs and it is working perfectly in docker with docker compose. Now the issue is I want to pass a value to the application via Console.ReadLine() over this value i make some decision but i am unable to pass value via Console.ReadLine(). How i can do it please help me. For more understanding, i have added my docker compose file below\r\n`version: '3.4'\r\n\r\nservices:\r\n  \r\n  tt.core.web:\r\n    image: ${DOCKER_REGISTRY-}ttcoreweb\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Web/Dockerfile\r\n    depends_on:\r\n     - db\r\n    networks:\r\n     - app-network\r\n\r\n  tt.core.downtime.webjob:\r\n    image: ${DOCKER_REGISTRY-}ttcoredowntimewebjob\r\n    environment:\r\n      CORE_ENVIRONMENT: devdocker\r\n    build:\r\n      context: .\r\n      dockerfile: TT.Core.Downtime.Webjob/Dockerfile\r\n    depends_on:\r\n     - db\r\n     - tt.core.web\r\n    networks:\r\n     - app-network\r\n\r\n  db:\r\n    image: microsoft/mssql-server-linux\r\n    container_name: db\r\n    environment:\r\n      SA_PASSWORD: \"Thingtrax%1\"\r\n      ACCEPT_EULA: \"Y\"\r\n      MSSQL_PID: Express\r\n    ports:\r\n      - \"7002:1433\"\r\n    networks:\r\n      app-network:\r\n        ipv4_address: 172.24.0.2\r\n\r\nnetworks:\r\n  app-network:\r\n    ipam:\r\n      driver: default\r\n      config:\r\n        - subnet: 172.24.0.0/16\r\n\r\n`\r\nIf the detail is not enough or you do not get my point, you can share your confusion in comment","Url":"https://github.com/dotnet/announcements/issues/92","RelatedDescription":"Closed issue \".net core Console\" (#92)"},{"Id":"380346599","IsPullRequest":false,"CreatedAt":"2018-11-13T17:44:44","Actor":"leecow","Number":"91","RawContent":null,"Title":"November 2018 .NET Updates","State":"open","Body":"# November 2018 .NET Updates\r\n\r\nThe following .NET updates were released in November 2018. This issue will be updated if there are any additional releases during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core November 2018 (2.1.6 and SDK 2.1.500) Update release notes](https://github.com/dotnet/core/blob/master/release-notes/2.1/2.1.6/2.1.6.md)\r\n\r\nA [discussion issue](https://github.com/dotnet/core/issues/2053) is available for questions or feedback about this release.\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [October 2018](https://github.com/dotnet/announcements/issues/89)\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/91","RelatedDescription":"Open issue \"November 2018 .NET Updates\" (#91)"},{"Id":"375230004","IsPullRequest":false,"CreatedAt":"2018-10-29T21:45:27","Actor":"terrajobst","Number":"90","RawContent":null,"Title":"The future of JSON in .NET Core 3.0","State":"open","Body":"JSON has become an essential part of virtually all modern .NET applications and in many cases even surpassed the usage of XML. However, .NET hasn't had a (great) built-in way to deal with JSON. Instead we've relied on [Json.NET] which continues to serve the .NET ecosystem well.\r\n\r\n[Json.NET]: https://www.newtonsoft.com/json\r\n\r\nMoving forward, we plan on making some changes to our JSON support:\r\n\r\n* **We need high-performance JSON APIs**. We need a new set of JSON APIs that are highly tuned for performance by using `Span<T>` and allows for processing UTF-8 directly without having to transcode to UTF-16 `string` instances. Both aspects are critical for our web server Kestrel, where throughput is a key requirement.\r\n\r\n* **Remove dependency from ASP.NET Core to Json.NET**. Today, ASP.NET Core has a dependency on Json.NET. While this provides a tight integration between ASP.NET Core and Json.NET, it also means that application developers cannot freely choose which JSON library they are using. This is also problematic for customers of Json.NET as the version is dictated by the underlying platform. However, Json.NET is frequently updated and application developers often want to -- or even have to -- use a specific version. Thus, we want to remove the dependency from ASP.NET Core 3.0 to Json.NET so that customers can choose which version to use, without fearing they might accidentally break the underlying platform. In addition, this makes it also possible to plug-in an entirely different JSON library.\r\n\r\n* **Provide an ASP.NET Core integration package for Json.NET**. Json.NET has basically become the Swiss Army knife of JSON processing in .NET. It provides many options and facilities that allow customers to handle their JSON needs with ease. We don't want to compromise on the Json.NET support customers are getting today, for example, the ability to configure the JSON serialization via the `AddJsonOptions` extension method. Thus, we want to provide the Json.NET integration as a NuGet package that developers can optionally install so they get all the bells and whistles they get from Json.NET today. The other part of this work item is to ensure we have the right extension points so that other parties can provide similar integration packages for their JSON library of choice.\r\n\r\nBelow are more details around this plan.\r\n\r\n## The need for high-performance JSON APIs\r\n\r\nThe requirements for the .NET stack have changed a bit since the arrival of .NET Core. Historically, .NET has valued usability and convenience. With .NET Core, we've added a focus on performance, and we've made significant investments to serve high performance needs. And the [improvements we made][techempower] in the popular TechEmpower benchmark are a testament to that.\r\n\r\n[techempower]: https://www.techempower.com/blog/2016/11/16/framework-benchmarks-round-13/\r\n\r\nWith .NET Core 2.1, we've added a brand new primitive called [Span\\<T>][span-msdn] that allows us to represent native memory and arrays in a uniform way. With this type, we've also added a set of parsing and encoding APIs that are much more memory efficient without having to resort to unsafe code.\r\n\r\n[span-msdn]: https://msdn.microsoft.com/en-us/magazine/mt814808.aspx\r\n\r\nPart of the work of minimizing allocations is to avoid having to transcode UTF-8 payloads into UTF-16 strings, purely for parsing reasons. Currently, Json.NET is implemented by reading UTF-16. We need the ability to read (and write) JSON documents directly in UTF-8 because most network protocols (including HTTP) use UTF-8.\r\n\r\nDuring .NET Core 2.1 we've learned that updating our existing APIs to leverage `Span<T>` has limits. While we did add a bunch of overloads that accept spans, we also had to produce brand new APIs that are designed around minimizing allocations and dealing with buffers, which we exposed in `System.Buffers` namespaces. And with `System.IO.Pipelines` we've also added a programming model that enables developers to share buffers without having to deal with lifetime issues.\r\n\r\nBased on these experiences we believe in order to support JSON parsing, we'll need to expose a new set of JSON APIs that are specifically geared for high-performance scenarios.\r\n\r\nYou might wonder why we can't just update Json.NET to include support for parsing JSON using `Span<T>`? Well, James Newton-King -- the author of Json.NET -- has the following to say about that:\r\n\r\n> Json.NET was created over 10 years ago, and since then it has added a wide range of features aimed to help developers work with JSON in .NET. In that time Json.NET has also become far and away NuGet's most depended on and downloaded package, and is the go-to library for JSON support in .NET. Unfortunately, Json.NET's wealth of features and popularity works against making major changes to it. Supporting new technologies like `Span<T>` would require fundamental breaking changes to the library and would disrupt existing applications and libraries that depend on it.\r\n>\r\n> Going forward Json.NET will continue to be worked on and invested in, both addressing known issues today and supporting new platforms in the future. Json.NET has always existed alongside other JSON libraries for .NET, and there will be nothing to prevent you using one or more together, depending on whether you need the performance of the new JSON APIs or the large feature set of Json.NET.\r\n\r\n## Move Json.NET integration into a separate NuGet package\r\n\r\nToday, you cannot use ASP.NET Core without Json.NET because it is a dependency of ASP.NET Core itself. Over the years, we've received feedback that the dependency can conflict with other libraries that have their own dependency on a different version of Json.NET. In the past, we've considered addressing this issue by using a private copy of Json.NET in ASP.NET. However, this would create problems when developers want to configure Json.NET (for instance, in order to control how the serializer behaves when formatting JSON objects).\r\n\r\nMoving forward we'd like to:\r\n\r\n1. Replace the internal usage of Json.NET in ASP.NET Core by the new platform-provided JSON APIs.\r\n\r\n2. Factor the public facing usage of Json.NET into an optional integration package that can be acquired from NuGet.\r\n\r\nSo the existing integration between ASP.NET Core and Json.NET will continue to be supported, but will be moving out of the platform and into a separate package. However, since the integration is then designed to sit on top of the platform, it will also allow customers to update Json.NET to later versions.\r\n\r\nFurthermore, customers who need more performance can also choose to use the new JSON APIs, at the expense of the rich feature set that Json.NET offers.\r\n\r\n## Discussion\r\n\r\nFor a discussion, please go to https://github.com/dotnet/corefx/issues/33115.","Url":"https://github.com/dotnet/announcements/issues/90","RelatedDescription":"Open issue \"The future of JSON in .NET Core 3.0\" (#90)"},{"Id":"368440353","IsPullRequest":false,"CreatedAt":"2018-10-09T23:44:06","Actor":"vivmishra","Number":"89","RawContent":null,"Title":"October 2018 .NET Updates","State":"open","Body":"# October 2018 .NET Updates\r\n\r\nThe following .NET updates were released in October 2018. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core October 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/10/09/net-core-october-2018-update-net-core-1-0-and-1-1/)\r\n\r\n## .NET Support Policies\r\n\r\nMicrosoft support policies are defined in the following documents:\r\n\r\n* [Microsoft .NET Support Policy](https://www.microsoft.com/net/support/policy)\r\n* [.NET Core OS Lifecycle Policy](https://github.com/dotnet/core/blob/master/os-lifecycle-policy.md)\r\n\r\n## Previous Updates\r\n* [September 2018](https://github.com/dotnet/announcements/issues/84)\r\n* [August 2018](https://github.com/dotnet/announcements/issues/79)\r\n* [July 2018](https://github.com/dotnet/announcements/issues/76)\r\n* [June 2018](https://github.com/dotnet/announcements/issues/75)\r\n* [May 2018](https://github.com/dotnet/announcements/issues/68)","Url":"https://github.com/dotnet/announcements/issues/89","RelatedDescription":"Open issue \"October 2018 .NET Updates\" (#89)"},{"Id":"368429033","IsPullRequest":false,"CreatedAt":"2018-10-09T22:51:18","Actor":"leecow","Number":"88","RawContent":null,"Title":"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability","State":"open","Body":"# Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\r\n\r\n## <a name=\"executive-summary\"></a>Executive summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in .NET Core. This advisory also provides guidance on what developers can do to update their applications to remove this vulnerability.\r\n\r\nMicrosoft is aware of a security feature bypass vulnerability that exists when .NET Core when HTTP authentication information is inadvertently exposed in an outbound request that encounters an HTTP redirect. An attacker who successfully exploited this vulnerability could use the information to further compromise the web application.\r\n\r\nThe update addresses the vulnerability by correcting how .NET Core applications handles HTTP redirects.\r\n\r\nSystem administrators running .NET Core 1.0 or .NET Core 1.1 applications must update their .NET Core runtimes to versions 1.0.13 and 1.1.10 then restart their applications. If installed applications target .NET Core 2.0, the applications must be migrated to 2.1 or newer and redeployed.\r\n\r\nDevelopers must update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core 2.0](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 then redeploy.\r\n\r\n## Discussion\r\n\r\nDiscussion for this issue can be found at <https://github.com/dotnet/corefx/issues/32730>\r\n\r\n### <a name=\"mitigation-factors\"></a>Mitigation factors\r\n\r\nNone\r\n\r\n## <a name=\"affected-software\"></a>Affected software\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nAdditionally package authors should check their dependencies to ensure they aren't depending on a vulnerable version of the following package:\r\n\r\n<a name=\"package-list\"></a>Package name | Vulnerable versions | Secure versions\r\n------------ | ---------------- | -------------------------\r\nSystem.Net.Http| 2.0.20126.16343, 2.0.20505, 2.0.20710, 4.0.0, 4.1.0, 4.1.1, 4.1.2, 4.3.0, 4.3.1, 4.3.2, 4.3.3 |  4.3.4 or later\r\n\r\n## <a name=\"advisory-faq\"></a>Advisory FAQ\r\n\r\n### <a name=\"how-affected\"></a>How do I know if I am affected?\r\n\r\nAny .NET Core application that runs on a .NET Core 1.0.x runtime with a version number of 1.0.12 or lower, or a .NET Core application that runs on a .NET Core 1.1.x runtime with a version number of 1.1.9 or lower, or a .NET Core application that runs on a .NET Core 2.0.x runtime.\r\n\r\nTo check the currently installed runtimes and SDKs with version 2.1 or later of .NET Core, open a command prompt and run the `dotnet --info` command. You should see an output similar to the following:\r\n\r\n```\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.403\r\n Commit:    04e15494b6\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.17763\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.403\\\r\n\r\nHost (useful for support):\r\n  Version: 2.1.5\r\n  Commit:  290303f510\r\n\r\n.NET Core SDKs installed:\r\n  1.0.4 [C:\\Program Files\\dotnet\\sdk]\r\n  1.1.10 [C:\\Program Files\\dotnet\\sdk]\r\n  2.0.3 [C:\\Program Files\\dotnet\\sdk]\r\n  2.1.4 [C:\\Program Files\\dotnet\\sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.4 [C:\\Program Files\\dotnet\\shared\\Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 1.0.12 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 1.1.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.0.9 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n  Microsoft.NETCore.App 2.1.5 [C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\nIf you don't see a runtime entry for 1.0.13 or 1.1.10, any .NET Core 1.x applications run on that computer are vulnerable.\r\n\r\nIf you don't have a 2.1 version of the runtime or SDK installed, you can produce the complete list of runtimes by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows | `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS | `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms | `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.13, 1.1.10 then any application targeting versions 1.0 or 1.1 are vulnerable.\r\n\r\nAdditionally, if you've deployed [self-contained applications](https://docs.microsoft.com/dotnet/core/deploying/#self-contained-deployments-scd) targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n### <a name=\"fix-runtime\">How do I fix the vulnerability?\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.13, 1.1.10 and install the latest 2.1 runtime, ensuring that any 2.0 applications are migrated to 2.1 as soon as possible.\r\n\r\n Developers are advised to update their .NET Core SDK to versions 1.1.11 and migrate any [.NET Core](https://docs.microsoft.com/dotnet/core/migration/20-21) or [ASP.NET Core 2.0](https://docs.microsoft.com/aspnet/core/migration/20_21?view=aspnetcore-2.1) applications to 2.1 and redeploy.\r\n\r\n## Other Information\r\n\r\n### Reporting Security Issues\r\n\r\nIf you have found a potential security issue in .NET Core, please email details to secure@microsoft.com. Reports may qualify for the .NET Core Bug Bounty. Details of the .NET Core Bug Bounty including terms and conditions are at [https://aka.ms/corebounty](https://aka.ms/corebounty).\r\n\r\n### Support\r\n\r\nYou can ask questions about this issue on GitHub in the .NET Core or ASP.NET Core organizations. These are located at <https://github.com/dotnet/> and <https://github.com/aspnet/>, respectively. The Announcements repo for each product (<https://github.com/dotnet/Announcements> and <https://github.com/aspnet/Announcements>) will contain this bulletin as an issue and will include a link to a discussion issue. You can ask questions in the discussion issue.\r\n\r\n### Disclaimer\r\n\r\nThe information provided in this advisory is provided \"as is\" without warranty of any kind. Microsoft disclaims all warranties, either express or implied, including the warranties of merchantability and fitness for a particular purpose. In no event shall Microsoft Corporation or its suppliers be liable for any damages whatsoever including direct, indirect, incidental, consequential, loss of business profits or special damages, even if Microsoft Corporation or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation may not apply.\r\n\r\n### External Links\r\n\r\n[CVE-2018-8292](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-CVE-2018-8292)\r\n\r\n### Revisions\r\n\r\nV1.0 (October 10, 2018): Advisory published.\r\n_Version 1.0_\r\n_Last Updated 2018-10-10_\r\n","Url":"https://github.com/dotnet/announcements/issues/88","RelatedDescription":"Open issue \"Microsoft Security Advisory CVE-2018-8292: .NET Core Information Disclosure Vulnerability\" (#88)"}],"ResultType":"GitHubIssue"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1157309583326633988","CreatedAt":"2019-08-02T15:18:01+00:00","UserScreenname":"dotnet","Text":"•Unity? ✔\n•Visual Studio? ✔\n•C#? ✔\n•41 videos on scripting fundamentals? ✔\n•$$$ - free\nCheck out our new, free lear… https://t.co/x9mazJYw7c","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":137,"FavoriteCount":43,"RawContent":null},{"Id":"1156973009279733761","CreatedAt":"2019-08-01T17:00:35+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demos and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":17,"FavoriteCount":5,"RawContent":null},{"Id":"1156590592089964544","CreatedAt":"2019-07-31T15:41:00+00:00","UserScreenname":"dotnet","Text":"Learn how you can measure code coverage in your .NET Core projects using Coverlet.\n\nhttps://t.co/xkEUGtRScd #dotnetcore #testing","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":82,"FavoriteCount":28,"RawContent":null},{"Id":"1156333221136625664","CreatedAt":"2019-07-30T22:38:18+00:00","UserScreenname":"dotnet","Text":"Join us live right now for another @dotnet #CommunityStandup with live demos and QA https://t.co/ptNZnKrqoO","Source":"<a href=\"https://www.elgato.com/gaming\" rel=\"nofollow\">Elgato Stream Deck</a>","RetweetCount":8,"FavoriteCount":3,"RawContent":null},{"Id":"1155911372049461248","CreatedAt":"2019-07-29T18:42:01+00:00","UserScreenname":"dotnet","Text":"The journey to a better game development experience starts here. Whether you’re new to game development or need a r… https://t.co/UjsTqoHRxc","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":43,"FavoriteCount":13,"RawContent":null},{"Id":"1154430362157821952","CreatedAt":"2019-07-25T16:37:01+00:00","UserScreenname":"dotnet","Text":"Game development can be fun we have the right tools to help you get off the ground quickly with a new, free learnin… https://t.co/AivXhRP7Sb","Source":"<a href=\"https://prod2.sprinklr.com\" rel=\"nofollow\">Sprinklr Publisher</a>","RetweetCount":31,"FavoriteCount":9,"RawContent":null},{"Id":"1154105630220640257","CreatedAt":"2019-07-24T19:06:39+00:00","UserScreenname":"dotnet","Text":"Announcing .NET Core 3.0 Preview 7\n\nhttps://t.co/gNfmpbO5bA","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":172,"FavoriteCount":87,"RawContent":null},{"Id":"1154104343131410432","CreatedAt":"2019-07-24T19:01:32+00:00","UserScreenname":"dotnet","Text":"Visual Studio 2019 version 16.2 Generally Available and 16.3 Preview 1\n\nhttps://t.co/Dd5t9pJ8nn","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":201,"FavoriteCount":124,"RawContent":null},{"Id":"1153711768151052289","CreatedAt":"2019-07-23T17:01:35+00:00","UserScreenname":"dotnet","Text":"https://t.co/iOiV9qNspl Core and Blazor updates in .NET Core 3.0 Preview 7 https://t.co/2gzRbk6aoK","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":129,"FavoriteCount":72,"RawContent":null}]}},"RunOn":"2019-08-05T05:30:35.7099043Z","RunDurationInMilliseconds":14800}