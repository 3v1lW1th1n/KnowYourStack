{"Data":{"GitHub":{"Issues":[{"Id":"413628805","IsPullRequest":true,"CreatedAt":"2019-02-24T02:20:09","Actor":"eerhardt","Number":"2703","RawContent":null,"Title":"Move the builder classes in DataViewSchema","State":"closed","Body":"- Move MetadataBuilder to be DataViewSchema.Metadata.Builder.\r\n- Move SchemaBuilder to DataViewSchema.Builder.\r\n- Rename `GetMetadata` and `GetSchema` to `ToMetadata` and `ToSchema`\r\n\r\nWorking towards #2297\r\n\r\nThere are 2 tasks left before that issue can be closed.\r\n\r\n1. Rename 'metadata' to 'annotations' - a very large change.\r\n2. Remove anything from DataViewRowId that makes it seem like a number.","Url":"https://github.com/dotnet/machinelearning/pull/2703","RelatedDescription":"Closed or merged PR \"Move the builder classes in DataViewSchema\" (#2703)"},{"Id":"413616093","IsPullRequest":true,"CreatedAt":"2019-02-24T00:05:30","Actor":"Ivanidzo4ka","Number":"2701","RawContent":null,"Title":"Hide delegates, model parameters constructors and other small things","State":"closed","Body":"should fix #1974","Url":"https://github.com/dotnet/machinelearning/pull/2701","RelatedDescription":"Closed or merged PR \"Hide delegates, model parameters constructors and other small things\" (#2701)"},{"Id":"413723002","IsPullRequest":true,"CreatedAt":"2019-02-23T22:10:54","Actor":"codemzs","Number":"2706","RawContent":null,"Title":"Remove MD5Hasher.","State":"closed","Body":"fixes #2696\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2706","RelatedDescription":"Closed or merged PR \"Remove MD5Hasher.\" (#2706)"},{"Id":"413504869","IsPullRequest":false,"CreatedAt":"2019-02-23T22:10:54","Actor":"glebuk","Number":"2696","RawContent":null,"Title":"Need to remove FastTree/Utils/MD5Hasher class","State":"closed","Body":"Currently FastTree uses a 16byte MD5 hash to ensure uniqueness of content. \r\n\r\n### There are several issues with this:\r\n- The MD5 hash is a (weak) cryptographic hash, resulting in additional work for the release process with regards to export controls.\r\n- MD5 hash is quite slow and memory intensive\r\n\r\n### Suggested Fix:\r\n- Rename MD5Hash to ContentHash or similar. \r\n- Same goes to MD5Hasher\r\n- Update all Hash(,,,) methods to not use MD5CryptoServiceProvider but murmur hash or equivalent instead.\r\n- Ensure no reference to System.Security.Cryptography namespace exists in the codebase afterwards.\r\n- Alternatively, we can extend the murmurhash class to return \r\n","Url":"https://github.com/dotnet/machinelearning/issues/2696","RelatedDescription":"Closed issue \"Need to remove FastTree/Utils/MD5Hasher class\" (#2696)"},{"Id":"413196519","IsPullRequest":true,"CreatedAt":"2019-02-23T17:05:58","Actor":"singlis","Number":"2690","RawContent":null,"Title":"Nuget package updates","State":"closed","Body":"- Removed ResultProcessor and Maml from Microsoft.ML nuget. These are\r\ncurrently not in a nuget package\r\n- Moved Sweeper from Microsoft.ML to Microsoft.ML.Sweep.\r\n- Updated nuget references as there were some other non-related errors\r\nfor ONNX Transformer.\r\n\r\nThis fixes #689","Url":"https://github.com/dotnet/machinelearning/pull/2690","RelatedDescription":"Closed or merged PR \"Nuget package updates\" (#2690)"},{"Id":"413656877","IsPullRequest":true,"CreatedAt":"2019-02-23T14:24:14","Actor":"singlis","Number":"2705","RawContent":null,"Title":"Fixing the project reference in the nuget packages for OnnxTransformer","State":"closed","Body":"- Fixes the project reference path for OnnxTransformer.\r\nFound while fixing #689, moved to separate commit.","Url":"https://github.com/dotnet/machinelearning/pull/2705","RelatedDescription":"Closed or merged PR \"Fixing the project reference in the nuget packages for OnnxTransformer\" (#2705)"},{"Id":"413653324","IsPullRequest":true,"CreatedAt":"2019-02-23T03:59:49","Actor":"najeeb-kazmi","Number":"2704","RawContent":null,"Title":"Adding a sample for LightGbm ranking","State":"open","Body":"Replacing PR #2650 as I messed up commit history there.\r\n\r\nFixes #2530\r\nFixes #776\r\n\r\n- Adds a sample for LightGbm ranking. \r\n- Cleans up namespaces in Microsoft.ML.Samples project.\r\n- Addresses feedback from first round of #2650. ","Url":"https://github.com/dotnet/machinelearning/pull/2704","RelatedDescription":"Open PR \"Adding a sample for LightGbm ranking\" (#2704)"},{"Id":"413207683","IsPullRequest":true,"CreatedAt":"2019-02-23T01:04:31","Actor":"singlis","Number":"2691","RawContent":null,"Title":"Remove learningRate parameter from RandomForest","State":"closed","Body":"Removes the learning rate parameter from RandomForest as this parameter was not used\r\nby the base class.\r\n\r\nThis fixes #2237","Url":"https://github.com/dotnet/machinelearning/pull/2691","RelatedDescription":"Closed or merged PR \"Remove learningRate parameter from RandomForest\" (#2691)"},{"Id":"413121420","IsPullRequest":true,"CreatedAt":"2019-02-22T23:59:18","Actor":"rogancarr","Number":"2684","RawContent":null,"Title":"Adding defaults for Label and GroupId to Ranking Evaluator","State":"closed","Body":"This PR adds default column names for Label and GroupId for the Ranking `Evaluator`, in line with all other Evaluators.\r\n\r\nFixes #2633 ","Url":"https://github.com/dotnet/machinelearning/pull/2684","RelatedDescription":"Closed or merged PR \"Adding defaults for Label and GroupId to Ranking Evaluator\" (#2684)"},{"Id":"413618522","IsPullRequest":true,"CreatedAt":"2019-02-22T23:28:10","Actor":"wschin","Number":"2702","RawContent":null,"Title":"Make separator char[] everywhere (previous type is char sometime)","State":"open","Body":"Fix #2472. This PR makes all separators a `char[]` instead of `char` in the public area of `TextLoader`. Note that `TextLoader`'s advanced `options` is already using `char[]`.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2702","RelatedDescription":"Open PR \"Make separator char[] everywhere (previous type is char sometime)\" (#2702)"},{"Id":"413584335","IsPullRequest":true,"CreatedAt":"2019-02-22T21:22:42","Actor":"codemzs","Number":"2700","RawContent":null,"Title":"Clean up metrics classes.","State":"open","Body":"fixes #2624","Url":"https://github.com/dotnet/machinelearning/pull/2700","RelatedDescription":"Open PR \"Clean up metrics classes.\" (#2700)"},{"Id":"413578753","IsPullRequest":false,"CreatedAt":"2019-02-22T21:05:13","Actor":"JakeRadMSFT","Number":"2699","RawContent":null,"Title":"Support TensorFlow Saved Model's with legacy_init_op and main_op","State":"open","Body":"### System information\r\n\r\n- **OS version/distro**: All\r\n- **.NET Version (eg., dotnet --info)**: ML.net 0.11\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\nTried to load SavedModel.\r\n- **What happened?**\r\nReceived a table not initialized error.\r\n- **What did you expect?**\r\nTable initialization is specified in legacy_init_op. I expected the operation(s) in legacy_init_op to be executed after loading the model.\r\n\r\nSee https://www.tensorflow.org/api_docs/python/tf/saved_model/Builder#add_meta_graph for more information on legacy_init_op and main_op.","Url":"https://github.com/dotnet/machinelearning/issues/2699","RelatedDescription":"Open issue \"Support TensorFlow Saved Model's with legacy_init_op and main_op\" (#2699)"},{"Id":"413549529","IsPullRequest":true,"CreatedAt":"2019-02-22T19:39:48","Actor":"yaeldekel","Number":"2698","RawContent":null,"Title":"Remove the IFourierDistributionSampler interface","State":"open","Body":"Fixes #2659,\r\nfixes #699.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2698","RelatedDescription":"Open PR \"Remove the IFourierDistributionSampler interface\" (#2698)"},{"Id":"413519947","IsPullRequest":true,"CreatedAt":"2019-02-22T18:15:55","Actor":"rogancarr","Number":"2697","RawContent":null,"Title":"WIP Move metrics from percentages to [0,1]","State":"open","Body":"This PR moves the metrics `LogLoss`, `LogLossReduction`, and `NDCG` to be between 0 and 1 instead of 0 and 100 (i.e. from percentage to fraction) to be in line with the community standards.\r\n\r\nFixes #2637 \r\n\r\nWIP until baseline tests are updated.","Url":"https://github.com/dotnet/machinelearning/pull/2697","RelatedDescription":"Open PR \"WIP Move metrics from percentages to [0,1]\" (#2697)"},{"Id":"413230656","IsPullRequest":true,"CreatedAt":"2019-02-22T03:48:41","Actor":"jignparm","Number":"2695","RawContent":null,"Title":"WIP - Update OnnxTransform unit tests for MacOS CI leg","State":"open","Body":"OnnxRuntime now supports MacOS runtimes. Activate  OnnxTransform unit tests for MacOS.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2695","RelatedDescription":"Open PR \"WIP - Update OnnxTransform unit tests for MacOS CI leg\" (#2695)"},{"Id":"413221888","IsPullRequest":false,"CreatedAt":"2019-02-22T03:05:43","Actor":"CESARDELATORRE","Number":"2694","RawContent":null,"Title":"ML.NET CLI using AutoML capabilities (Specs document for discussion)","State":"open","Body":"We're starting to work on a new ML.NET CLI (command-line tool) which aims to help developers to generate \"best models\" and their related C# ML.NET code (using .NET AutoML capabilities under the covers) so you don't need to be an expert in ML.NET algorithms and hyper-parameters in order to create a model and the C# code to train and score/run that model.\r\n\r\nI just created a PR with the initial specs we are thinking to target for the first preview versions, so anyone in the community can share their feedback and help us to improve the design of this CLI tool for ML.NET. \r\n\r\n[ML.NET CLI specs PR](https://github.com/dotnet/machinelearning/pull/2693)\r\n\r\nFeel free to share your feedback for the PR, we will really appreciate it.\r\n\r\n**High level plan:**\r\n\r\nThe initial design and development will be performed under a PRIVATE PREVIEW we'll make available for public enrollment in March 2019. \r\nIn the meantime, we'd love to get your feedback about this mentioned ML.NET CLI specs doc.\r\n\r\nRelated issues:\r\nhttps://github.com/dotnet/machinelearning/issues/1203","Url":"https://github.com/dotnet/machinelearning/issues/2694","RelatedDescription":"Open issue \"ML.NET CLI using AutoML capabilities (Specs document for discussion)\" (#2694)"},{"Id":"413219259","IsPullRequest":true,"CreatedAt":"2019-02-22T02:52:06","Actor":"CESARDELATORRE","Number":"2693","RawContent":null,"Title":"Draft version of ML.NET CLI specs with AutoML capabilities","State":"open","Body":"This is a draft version of ML.NET CLI specs to be discussed in the open with the ML.NET community.\r\nIts initial functionality will be based on .NET AutoML (Which will be also part of ML.NET)\r\n\r\nFor further details, read the **MLNET-CLI-Specs.md** document in the PR.\r\n\r\nRelated issues:\r\nhttps://github.com/dotnet/machinelearning/issues/2694\r\nhttps://github.com/dotnet/machinelearning/issues/1203\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2693","RelatedDescription":"Open PR \"Draft version of ML.NET CLI specs with AutoML capabilities\" (#2693)"},{"Id":"413218980","IsPullRequest":true,"CreatedAt":"2019-02-22T02:50:41","Actor":"hichemaichour","Number":"2692","RawContent":null,"Title":"Fix AnomalyDetection Evaluator returning NaN when there are no anomalies","State":"open","Body":"This PR ensures that an exception is thrown when AUC is calculated with a data consisting of only one class.\r\n\r\nFor anomaly detection, when test data has no anomalies, the returned AUC was NaN because there are no TPs causing the bug mentioned in #2644 \r\n\r\nI added Unit Tests to ensure that the exception is thrown\r\n\r\nNote: for DrAtK, it looked to me that it is returning NaN by design based on these lines of code:\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/412e1f904c9cd25b80e62bb01390e09360b5b50c/src/Microsoft.ML.Data/Evaluators/AnomalyDetectionEvaluator.cs#L255-L259\r\n\r\nFixes #2644 \r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/2692","RelatedDescription":"Open PR \"Fix AnomalyDetection Evaluator returning NaN when there are no anomalies\" (#2692)"},{"Id":"413180339","IsPullRequest":false,"CreatedAt":"2019-02-21T23:59:16","Actor":"rogancarr","Number":"2689","RawContent":null,"Title":"Metric Names: Relative Information Gain vs. LogLoss Reduction","State":"open","Body":"In our Binary Classification and Multiclass Classification metrics, we have a measure for Relative Information Gain called `LogLossReduction`. Relative information gain seems to be the more commonly used term &mdash; it's actually hard to find search results on log-loss reduction. I wanted to get a quick set of opinions on:\r\n1) Is this actually common nomenclature?\r\n2) If not, shall we rename this to be Relative Information Gain?","Url":"https://github.com/dotnet/machinelearning/issues/2689","RelatedDescription":"Open issue \"Metric Names: Relative Information Gain vs. LogLoss Reduction\" (#2689)"},{"Id":"413168754","IsPullRequest":true,"CreatedAt":"2019-02-21T23:15:03","Actor":"shmoradims","Number":"2688","RawContent":null,"Title":"Added samples & docs for BinaryClassification.StochasticGradientDescent","State":"open","Body":"Part of #1257 and #2522.\r\n\r\n* Added samples & docs for BinaryClassification.StochasticGradientDescent\r\n* Bunch of typo fixes","Url":"https://github.com/dotnet/machinelearning/pull/2688","RelatedDescription":"Open PR \"Added samples & docs for BinaryClassification.StochasticGradientDescent\" (#2688)"},{"Id":"413154507","IsPullRequest":true,"CreatedAt":"2019-02-21T22:30:59","Actor":"Anipik","Number":"2687","RawContent":null,"Title":"Update build tools version and use netcoreapp3.0 on ubuntu CI","State":"open","Body":"Fixes #2381 \r\n\r\nUpdates the buildtools version to latest and also running tests and building machinelearning repo with netcorepp3.0 on non-windows machine","Url":"https://github.com/dotnet/machinelearning/pull/2687","RelatedDescription":"Open PR \"Update build tools version and use netcoreapp3.0 on ubuntu CI\" (#2687)"},{"Id":"413131386","IsPullRequest":false,"CreatedAt":"2019-02-21T21:27:15","Actor":"rogancarr","Number":"2686","RawContent":null,"Title":"CrossValidation and TrainTest for AnomalyDetection","State":"open","Body":"There are two extensions for training, `TrainTestSplit` and `CrossValidation`, that are not clearly suited for `AnomalyDetection` as written.\r\n\r\n`TrainTestSplit` is available in `AnomalyDetection` as it's in the `TrainerCatalogBase`, but anomaly detection scenarios often have structured data (e.g. time series) that we don't handle. Do we disable `TrainTestSplit` for `AnomalyDetection`? Do we add support for some sorts of structured data different than we have now? Do we assume that all structural problems can be solved with a `SamplingKeyColumn`?\r\n\r\n`CrossValidation` is not supported, but could be supported, should we solve the `TrainTestSplit` issue.","Url":"https://github.com/dotnet/machinelearning/issues/2686","RelatedDescription":"Open issue \"CrossValidation and TrainTest for AnomalyDetection\" (#2686)"},{"Id":"413123714","IsPullRequest":false,"CreatedAt":"2019-02-21T21:06:33","Actor":"rogancarr","Number":"2685","RawContent":null,"Title":"CrossValidation not available for Ranking, TrainTest not suitable for Ranking","State":"open","Body":"`Ranking` does not support cross-validation. This task should support CV as well.\r\n\r\nEdited: See comment below.","Url":"https://github.com/dotnet/machinelearning/issues/2685","RelatedDescription":"Open issue \"CrossValidation not available for Ranking, TrainTest not suitable for Ranking\" (#2685)"},{"Id":"413091760","IsPullRequest":false,"CreatedAt":"2019-02-21T20:59:49","Actor":"knpoklonski","Number":"2683","RawContent":null,"Title":"ImagePixelExtractingEstimator do not applied scale and offset for image","State":"closed","Body":"### System information\r\n\r\n- **Windows 10**:\r\n- **.NET Core 2.1 ML.NET v0.10.0**: \r\n\r\n### Issue\r\n\r\n- **Try to use ImagePixelExtractingEstimator with scale and offset**\r\n- **sclae and offset do not applied for pixels data**\r\n- **sclale and offset should successfully applied**\r\n\r\n### Source code / logs\r\nThis code below doesn't work correctly\r\n```\r\nvar pipeline = new ImageLoadingEstimator(_mlContext, string.Empty, (\"ImageData\", \"ImagePath\"))\r\n                    .Append(new ImageResizingEstimator(_mlContext, \"ImageResized\", ImageWidth, ImageHeight, \"ImageData\"))\r\n                    .Append(new ImagePixelExtractingEstimator(_mlContext, \"input\", \"ImageResized\", colors: ImagePixelExtractorTransformer.ColorBits.Rgb, interleave:true, asFloat: true, offset: 128f, scale: 1/255f))\r\n```\r\n\r\nSample below works correctly, but here is shouldn't be difference, right?\r\n```\r\nvar pipeline = new ImageLoadingEstimator(_mlContext, string.Empty, (\"ImageData\", \"ImagePath\"))\r\n                    .Append(_mlContext.Transforms.Resize(\"ImageResized\", imageWidth: ImageWidth, imageHeight: ImageHeight, inputColumnName: \"ImageData\"))\r\n                    .Append(_mlContext.Transforms.ExtractPixels(new ColumnInfo(\"input\", \"ImageResized\", colors: ColorBits.Rgb, interleave:true, asFloat: true, offset: 128f, scale: 1 /255f)))\r\n```\r\n[Commit with changes in sample app](https://github.com/knpoklonski/image-recognition-onnx-sample/commit/79930119725e6981cab3f948a8e442cac0f7e9b6)\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2683","RelatedDescription":"Closed issue \"ImagePixelExtractingEstimator do not applied scale and offset for image\" (#2683)"},{"Id":"412893065","IsPullRequest":false,"CreatedAt":"2019-02-21T20:59:33","Actor":"rauhs","Number":"2677","RawContent":null,"Title":"How to debug ML.NET internals.","State":"closed","Body":"Hi,\r\n\r\nthis might be a more general question but I couldn't find anything in the developer-guide.\r\n\r\nIn the past months I've continously seen issues (or at least unintuitive exceptions thrown deep inside ML.NET) that I couldn't figure out.\r\n\r\nComing from a Java background we usually get the Java sources in our Jar and can just step into any code without any effort.\r\nThough, I'm having a really tough time to debug any errors.\r\n\r\n1. How can I step into the ML.NET code? I'm using the myget daily builds.\r\n\r\nCurrently I'm seeing an IndexOutOfRangeException somewhere deep inside the `KeyToVectorMappingTransformer`.\r\n\r\n2. Are there plans to offer a synchronous version of `Fit/Transform()` that avoids the whole threading problems?\r\n\r\nAny guidance on this would be greatly appreciated.\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2677","RelatedDescription":"Closed issue \"How to debug ML.NET internals.\" (#2677)"},{"Id":"413076278","IsPullRequest":true,"CreatedAt":"2019-02-21T19:17:57","Actor":"yaeldekel","Number":"2682","RawContent":null,"Title":"Fix the build","State":"closed","Body":"Sorry, PR #2580 broke the build. fixing it.","Url":"https://github.com/dotnet/machinelearning/pull/2682","RelatedDescription":"Closed or merged PR \"Fix the build\" (#2682)"},{"Id":"413052900","IsPullRequest":true,"CreatedAt":"2019-02-21T18:01:06","Actor":"Ivanidzo4ka","Number":"2681","RawContent":null,"Title":"IndexOutOfRange Exception in KeyToVector transformer","State":"open","Body":"Fixes #2678","Url":"https://github.com/dotnet/machinelearning/pull/2681","RelatedDescription":"Open PR \"IndexOutOfRange Exception in KeyToVector transformer\" (#2681)"},{"Id":"413017314","IsPullRequest":false,"CreatedAt":"2019-02-21T16:38:27","Actor":"shmoradims","Number":"2680","RawContent":null,"Title":"Make trainer input arguments' names consistent","State":"open","Body":"Just by looking at [StandardLearnersCatalog.cs](https://github.com/dotnet/machinelearning/blob/1f90f50f813ecd152e46e92deb4a7827c7f24e31/src/Microsoft.ML.StandardLearners/StandardLearnersCatalog.cs) I found a lot of inconsistent naming for the binary classification trainer arguments. \r\n\r\nBelow are the many naming variations that need to be conflated (both in extension method signatures and the Options properties):\r\n* labelColumnName, labelColumn\r\n* featureColumnName, featureColumn\r\n* weightColumnName, weights\r\n* initLearningRate, learningRate\r\n* l2Weight, l2Const, l2RegularizerWeight\r\n* l1Threshold, l1Weight\r\n* numIterations, maxIterations\r\n* lossFunction, loss\r\n* numIterations, NumberOfIterations\r\n\r\nI haven't checked yet, but it's probably the case for other trainers. There's probably more of these inconsistencies.","Url":"https://github.com/dotnet/machinelearning/issues/2680","RelatedDescription":"Open issue \"Make trainer input arguments' names consistent\" (#2680)"},{"Id":"412994257","IsPullRequest":false,"CreatedAt":"2019-02-21T15:51:37","Actor":"darren-zdc","Number":"2679","RawContent":null,"Title":"Using WordBagEstimator when building the pipeline result in a error \"System.IndexOutOfRangeException: Index was outside the bounds of the array\"","State":"open","Body":"I want to customize the process of the TextFeaturizing. And I try to use the code in the ML.NET cookbook, but I run into an error when include \r\n`.Append(new WordBagEstimator(mlContext, \"BagOfWords\", \"NormalizedMessage\"))` \r\n`Error message: System.IndexOutOfRangeException: Index was outside the bounds of the array`\r\n\r\nCode from cookBook,\r\n```\r\n    var pipeline =\r\n    // One-stop shop to run the full text featurization.\r\n    mlContext.Transforms.Text.FeaturizeText(\"TextFeatures\", \"Message\")\r\n\r\n    // Normalize the message for later transforms\r\n    .Append(mlContext.Transforms.Text.NormalizeText(\"NormalizedMessage\", \"Message\"))\r\n\r\n    // NLP pipeline 1: bag of words.\r\n    .Append(new WordBagEstimator(mlContext, \"BagOfWords\", \"NormalizedMessage\"))\r\n\r\n    // NLP pipeline 2: bag of bigrams, using hashes instead of dictionary indices.\r\n    .Append(new WordHashBagEstimator(mlContext, \"BagOfBigrams\",\"NormalizedMessage\", \r\n                ngramLength: 2, allLengths: false))\r\n\r\n    // NLP pipeline 3: bag of tri-character sequences with TF-IDF weighting.\r\n    .Append(mlContext.Transforms.Text.TokenizeCharacters(\"MessageChars\", \"Message\"))\r\n    .Append(new NgramExtractingEstimator(mlContext, \"BagOfTrichar\", \"MessageChars\", \r\n                ngramLength: 3, weighting: NgramExtractingEstimator.WeightingCriteria.TfIdf))\r\n\r\n    // NLP pipeline 4: word embeddings.\r\n    .Append(mlContext.Transforms.Text.TokenizeWords(\"TokenizedMessage\", \"NormalizedMessage\"))\r\n    .Append(mlContext.Transforms.Text.ExtractWordEmbeddings(\"Embeddings\", \"TokenizedMessage\",\r\n                WordEmbeddingsExtractingEstimator.PretrainedModelKind.GloVeTwitter25D));\r\n\r\n// Let's train our pipeline, and then apply it to the same data.\r\n// Note that even on a small dataset of 70KB the pipeline above can take up to a minute to completely train.\r\nvar transformedData = pipeline.Fit(data).Transform(data);\r\n```\r\n\r\nMy goal is to build a multiClass Classification model to detect city, firstName and lastName, but my logisticRegression Model is not working pretty well, although all the result is slightly higher than 50%. \r\n```\r\nAccuracyMacro = 0.6804, a value between 0 and 1, the closer to 1, the better\r\nAccuracyMicro = 0.7098, a value between 0 and 1, the closer to 1, the better\r\nLogLoss = 0.7575, the closer to 0, the better\r\nLogLoss for class 1 = 0.9082, the closer to 0, the better\r\nLogLoss for class 2 = 0.8419, the closer to 0, the better\r\nLogLoss for class 3 = 0.7824, the closer to 0, the better\r\n```\r\nI try the others ML tasks, but still not that accuracy. \r\nI'm just thinking what could be improved from here. \r\nMy training dataset is over 1m consisting of city, firstname and lastname. I think it should be sufficient. \r\nI'm thinking maybe the problem happened durring the propressing of the data.\r\nAny helps will be really appreciated!!","Url":"https://github.com/dotnet/machinelearning/issues/2679","RelatedDescription":"Open issue \"Using WordBagEstimator when building the pipeline result in a error \"System.IndexOutOfRangeException: Index was outside the bounds of the array\"\" (#2679)"},{"Id":"412925728","IsPullRequest":false,"CreatedAt":"2019-02-21T13:32:11","Actor":"rauhs","Number":"2678","RawContent":null,"Title":"Unintuitive error when giving array to OneHotEncoder","State":"open","Body":"The following will throw a very ugly exception only when calling `Preview()` and not before:\r\n\r\n```csharp\r\n    public class MlDataEx\r\n    {\r\n      public string[] A { get; set; }\r\n      public MlDataEx(string a)\r\n      {\r\n        this.A = new[] { a };\r\n      }\r\n    }\r\n\r\n    public static void MlStuff()\r\n    {\r\n      var ctx = new MLContext();\r\n      var dv = ctx.Data.ReadFromEnumerable(new[] { new MlDataEx(\"A\") });\r\n      var data = ctx.Transforms.Categorical.OneHotEncoding(\"A\").Fit(dv).Transform(dv).Preview();\r\n    }\r\n```\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/2678","RelatedDescription":"Open issue \"Unintuitive error when giving array to OneHotEncoder\" (#2678)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-02-24T05:30:49.3284596Z","RunDurationInMilliseconds":940}