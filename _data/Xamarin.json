{"Data":{"Blog":{"FeedItems":[{"Title":"Draw your Next App Idea with Ink to Code","PublishedOn":"2018-02-05T18:50:43+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Imagine that you&#8217;ve just been struck by inspiration for your next great app. You might start by jotting some notes and sketching out screens. If you&#8217;re thinking about reaching for a...","Href":"https://blog.xamarin.com/draw-next-app-idea-ink-code/","RawContent":null},{"Title":"Lose the Cables: Make Deploying to an iOS or tvOS Device Easier","PublishedOn":"2018-02-02T19:59:02+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"One thing most developers consistently do during app development is deploy to a testing device. One main drawback during this process is the struggle to find a cable, connect it to a computer, plug it...","Href":"https://blog.xamarin.com/lose-cables-make-deploying-ios-tvos-device-easier/","RawContent":null},{"Title":"Just Push Play: Using Google Play on an Android Emulator","PublishedOn":"2018-02-01T20:22:55+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The needs of an Android developer using the Android emulator continuously expand. The latest emulator development from Google provides a system image for the Google Play Store, which includes a fully...","Href":"https://blog.xamarin.com/just-push-play-using-google-play-android-emulator/","RawContent":null},{"Title":"Xamarin Developer Events in February","PublishedOn":"2018-01-31T19:26:04+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"If you haven&#8217;t started working on your new year&#8217;s resolutions yet, we have the perfect solution: get out there and start building on your mobile app development education by networking...","Href":"https://blog.xamarin.com/xamarin-developer-events-february/","RawContent":null},{"Title":"Webinar Recording | Xamarin University Presents: Ship Better Apps with Visual Studio App Center","PublishedOn":"2018-01-30T19:53:57+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In this pre-recorded webinar, Mark Smith, Director of Xamarin University, shows you how to automate your app development pipeline with Visual Studio App Center, walking through how to connect your app...","Href":"https://blog.xamarin.com/webinar-recording-xamarin-university-presents-ship-better-apps-visual-studio-app-center/","RawContent":null},{"Title":"Android Emulator Quick Boot","PublishedOn":"2018-01-29T19:41:31+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Android Emulator version 27.0.2 now includes a feature called Quick Boot, which launches the emulator in just a few seconds. For Quick Boot to work, your AVD must perform a cold boot on its first time...","Href":"https://blog.xamarin.com/android-emulator-quick-boot/","RawContent":null},{"Title":"First Look: Xamarin Android Device Manager Preview","PublishedOn":"2018-01-25T19:45:47+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"With the release of SDK Tools 26, Google replaced the standalone UI for the SDK and Device Manager with a command line interface. In an effort to make Android component management accessible and easy...","Href":"https://blog.xamarin.com/first-look-xamarin-android-device-manager-preview/","RawContent":null},{"Title":"Better Resource Organization in Xamarin.Forms","PublishedOn":"2018-01-23T19:28:44+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Resource Dictionary is a foundational building block to all Xamarin.Forms mobile development. It&#8217;s the primary vehicle for declaring XAML resources youâ€™ll use throughout your mobile application,...","Href":"https://blog.xamarin.com/better-resource-organization-xamarin-forms/","RawContent":null},{"Title":"The What, Why, and How of Mobile DevOps with Visual Studio App Center","PublishedOn":"2018-01-22T18:52:27+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"With constant operating system releases, ever-shifting user expectations, and new form factors launching every year, making sure your apps are high-quality, take advantage of the latest technology,...","Href":"https://blog.xamarin.com/mobile-devops-visual-studio-app-center/","RawContent":null},{"Title":"Running Xamarin.iOS Unit Tests in Visual Studio Team Services","PublishedOn":"2018-01-19T18:32:24+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In previous posts, we&#8217;ve discussed how to set up continuous integration for your Xamarin.iOS applications inside Visual Studio Team Services(VSTS) using the new Hosted macOS Agent. Building the...","Href":"https://blog.xamarin.com/running-xamarin-ios-unit-tests-visual-studio-team-services/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"7202223036","Type":"PullRequestEvent","CreatedAt":"2018-02-06T02:38:33","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1091","RelatedDescription":"Merged pull request \"[msbuild] Add JavaSourceJar build action to Binding project.\" (#1091) at xamarin/xamarin-android","RelatedBody":"JavaSourceJar works like JavaDocJar, but in slightly more complicated way.\r\n\r\nJavaDocJar only extracts the jar contents and pass index.html as JavaDocIndex,\r\nwhile JavaSourceJar extracts the jar, then run `javadoc` to generate javadoc,\r\nthen pass its generated index.html as JavaDocIndex."},{"Id":"7201891569","Type":"PullRequestEvent","CreatedAt":"2018-02-06T00:47:28","Actor":"atsushieno","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1038","RelatedDescription":"Merged pull request \"Generate api-*.xml.in on the fly, using class-parse and api-xml-adjuster.\" (#1038) at xamarin/xamarin-android","RelatedBody":"It helps API generator changes more robust by running API generation\r\nconsistently with unit testing."},{"Id":"7201274665","Type":"IssuesEvent","CreatedAt":"2018-02-05T21:59:03","Actor":"divega","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1275","RelatedDescription":"Opened issue \"System.IO.FileNotFoundException when using Xamarin Forms\" (#1275) at xamarin/xamarin-android","RelatedBody":"_From @frogcrush on November 7, 2017 22:16_\n\nWhen trying to use with a Xamarin Forms application, I keep receiving the following error message:\r\n\r\n![image](https://user-images.githubusercontent.com/6116333/32520758-f28f6dde-c3c5-11e7-895e-a456ff7cdb2b.png)\r\n\r\nIt's happened over two computers (one with a fresh VS2017 install). \r\n\r\nMicrosoft.EntityFrameworkcore.Sqlite and Microsoft.EntityframeworkCore is referenced in both the .NET Core \"shared\" project and the .Android project.\r\n\r\n### Steps to reproduce\r\nAttempt to use Microsoft.EntityFrameworkCore.Sqlite with a Xamarin Forms project\r\n\r\n\r\n### Further technical details\r\nEF Core version: 2.0.0\r\nDatabase Provider: e.g. Microsoft.EntityFrameworkCore.Sqlite\r\nOperating system: Windows 10\r\nIDE: Visual Studio Community 2017\r\n\n\n_Copied from original issue: aspnet/EntityFrameworkCore#10234_"},{"Id":"7200964300","Type":"PullRequestEvent","CreatedAt":"2018-02-05T20:52:30","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1273","RelatedDescription":"Merged pull request \"bump android SDK components for Android 8.1.\" (#1273) at xamarin/xamarin-android","RelatedBody":"If it builds then this should fix https://github.com/xamarin/xamarin-android/issues/1266"},{"Id":"7200368535","Type":"IssuesEvent","CreatedAt":"2018-02-05T18:49:42","Actor":"rob8861","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/issues/1274","RelatedDescription":"Opened issue \"An Exception is thrown in VS 2017 when opening an existing project with a layout file (axml)\" (#1274) at xamarin/xamarin-android","RelatedBody":"### Steps to Reproduce\r\n\r\n1. Create an empty activity xamarin.Android project in Visual Studio 2017\r\n2. Double click on the Main.axml and open the desginer\r\n3. Add few controls, it doesn't matter what you add\r\n4. Save the project and make sure the Main.axml remains open in Visual Studio\r\n5. Close Visual Studio\r\n6. Launch VS and open the project. You should now get an exception from VS complaining about a failed extension\r\n\r\n### Expected Behavior\r\nLaunching a project with a layout file already open should not cause Visual Studio to throw an exception.\r\n\r\n### Actual Behavior\r\nVisual studio throws the exception below\r\n\r\n```\r\n<entry>\r\n    <record>624</record>\r\n    <time>2018/02/05 18:38:17.821</time>\r\n    <type>Error</type>\r\n    <source>Editor or Editor Extension</source>\r\n    <description>System.NullReferenceException: Object reference not set to an instance of an object.&#x000D;&#x000A;   at Xamarin.VisualStudio.Android.Designer.MonoAndroidDesignerService.FindBestAndroidTarget(DesignerProject designerProject, Int32 apiLevel) in E:\\A\\_work\\12\\s\\Xamarin.Designer.VisualStudio\\src\\VisualStudio.Android.Designer\\MonoAndroidDesignerService.cs:line 136&#x000D;&#x000A;   at Xamarin.VisualStudio.Android.Designer.AxmlTextViewCreationListener.VsTextViewCreated(IVsTextView textViewAdapter) in E:\\A\\_work\\12\\s\\Xamarin.Designer.VisualStudio\\src\\VisualStudio.Android.Designer\\Editor\\AxmlTextViewCreationListener.cs:line 59&#x000D;&#x000A;   at Microsoft.VisualStudio.Editor.Implementation.SimpleTextViewWindow.&lt;&gt;c__DisplayClass565_0.&lt;SendVsTextViewCreated&gt;b__0()&#x000D;&#x000A;   at Microsoft.VisualStudio.Text.Utilities.GuardedOperations.CallExtensionPoint(Object errorSource, Action call)&#x000D;&#x000A;--- End of stack trace from previous location where exception was thrown ---&#x000D;&#x000A;   at Microsoft.VisualStudio.Telemetry.WindowsErrorReporting.WatsonReport.GetClrWatsonExceptionInfo(Exception exceptionObject)</description>\r\n  </entry>\r\n```\r\n\r\n### Version Information\r\n\r\nMicrosoft Visual Studio Professional 2017 \r\nVersion 15.5.5\r\nVisualStudio.15.Release/15.5.5+27130.2026\r\nMicrosoft .NET Framework\r\nVersion 4.7.02053\r\n\r\nInstalled Version: Professional\r\n\r\nVisual Basic 2017   00370-10001-14471-AA819\r\nMicrosoft Visual Basic 2017\r\n\r\nVisual C# 2017   00370-10001-14471-AA819\r\nMicrosoft Visual C# 2017\r\n\r\nVisual C++ 2017   00370-10001-14471-AA819\r\nMicrosoft Visual C++ 2017\r\n\r\nVisual F# 4.1   00370-10001-14471-AA819\r\nMicrosoft Visual F# 4.1\r\n\r\nApplication Insights Tools for Visual Studio Package   8.10.01106.1\r\nApplication Insights Tools for Visual Studio\r\n\r\nASP.NET and Web Tools 2017   15.0.31127.0\r\nASP.NET and Web Tools 2017\r\n\r\nASP.NET Core Razor Language Services   1.0\r\nProvides languages services for ASP.NET Core Razor.\r\n\r\nAzure App Service Tools v3.0.0   15.0.31106.0\r\nAzure App Service Tools v3.0.0\r\n\r\nCommon Azure Tools   1.10\r\nProvides common services for use by Azure Mobile Services and Microsoft Azure Tools.\r\n\r\nJavaScript Language Service   2.0\r\nJavaScript Language Service\r\n\r\nJetBrains ReSharper Ultimate 2017.3.2    Build 111.0.20180201.63358\r\nJetBrains ReSharper Ultimate package for Microsoft Visual Studio. For more information about ReSharper Ultimate, visit http://www.jetbrains.com/resharper. Copyright Â© 2018 JetBrains, Inc.\r\n\r\nMerq   1.1.17-rc (cba4571)\r\nCommand Bus, Event Stream and Async Manager for Visual Studio extensions.\r\n\r\nMicrosoft Continuous Delivery Tools for Visual Studio   0.3\r\nSimplifying the configuration of continuous build integration and continuous build delivery from within the Visual Studio IDE.\r\n\r\nMicrosoft JVM Debugger   1.0\r\nProvides support for connecting the Visual Studio debugger to JDWP compatible Java Virtual Machines\r\n\r\nMicrosoft MI-Based Debugger   1.0\r\nProvides support for connecting Visual Studio to MI compatible debuggers\r\n\r\nMicrosoft Visual C++ Wizards   1.0\r\nMicrosoft Visual C++ Wizards\r\n\r\nMicrosoft Visual Studio VC Package   1.0\r\nMicrosoft Visual Studio VC Package\r\n\r\nMono Debugging for Visual Studio   4.8.4-pre (3fe64e3)\r\nSupport for debugging Mono processes with Visual Studio.\r\n\r\nNuGet Package Manager   4.5.0\r\nNuGet Package Manager in Visual Studio. For more information about NuGet, visit http://docs.nuget.org/.\r\n\r\nSQL Server Data Tools   15.1.61710.120\r\nMicrosoft SQL Server Data Tools\r\n\r\nTypeScript Tools   15.5.11025.1\r\nTypeScript Tools for Microsoft Visual Studio\r\n\r\nVisual Studio Code Debug Adapter Host Package   1.0\r\nInterop layer for hosting Visual Studio Code debug adapters in Visual Studio\r\n\r\nVisual Studio Tools for CMake   1.0\r\nVisual Studio Tools for CMake\r\n\r\nVisualStudio.Mac   1.0\r\nMac Extension for Visual Studio\r\n\r\nXamarin   4.8.0.760 (fc93f3f5b)\r\nVisual Studio extension to enable development for Xamarin.iOS and Xamarin.Android.\r\n\r\nXamarin Designer   4.8.188 (c5813fa34)\r\nVisual Studio extension to enable Xamarin Designer tools in Visual Studio.\r\n\r\nXamarin.Android SDK   8.1.5.0 (HEAD/75f8c6838)\r\nXamarin.Android Reference Assemblies and MSBuild support.\r\n\r\nXamarin.iOS and Xamarin.Mac SDK   11.6.1.4 (db807ec)\r\nXamarin.iOS and Xamarin.Mac Reference Assemblies and MSBuild support.\r\n\r\n### Log File\r\n\r\n"},{"Id":"7199093294","Type":"PullRequestEvent","CreatedAt":"2018-02-05T14:58:51","Actor":"atsushieno","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1273","RelatedDescription":"Opened pull request \"bump android SDK components for Android 8.1.\" (#1273) at xamarin/xamarin-android","RelatedBody":"If it builds then this should fix https://github.com/xamarin/xamarin-android/issues/1266"},{"Id":"7198939070","Type":"PullRequestEvent","CreatedAt":"2018-02-05T14:31:34","Actor":"grendello","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1270","RelatedDescription":"Merged pull request \"Fix build with msbuild on Linux\" (#1270) at xamarin/xamarin-android","RelatedBody":"XA's Makefile exports the OS environment variable set to output of the `uname -s` \r\ncommand which returns the operating system's name. On macOS it will return\r\n`Darwin`, on Linux `Linux` etc. MSBuild (the build system, not the command)\r\ndefines a standard property `$(OS)` which names the operating system kind -\r\n`Windows_NT` on Windows and `Unix` on *nix systems.\r\n\r\nOur project and target files (also a large set of them from e.g. Mono) use the\r\nproperty to check whether they are running on Unix or Windows and they rely on\r\nthe property's value to be set correctly to make the right decisions.\r\nMSBuild (the system) supports setting of properties from the command line but it\r\nalso takes their values from the process environment. However, it appears\r\nthere's a major difference between Mono's xbuild (which is used by default by\r\nXA) and msbuild in that xbuild \"protects\" the `OS` property by NOT using the\r\nOS environment property to set its value, while msbuild sets the property from\r\nthe environment variable. This results in the property to have the value of\r\n`Darwin` on macOS and `Linux` on Linux and it happens to work (more or less)\r\ncorrectly on macOS because we do check for `'$(OS)' == 'Darwin' or '$(OS)' == 'Unix')` \r\nin a few places while we do NOT check for `'$(OS)' == 'Linux')`\r\nanywhere. All this together breaks XA build on Linux in a few places.\r\n\r\nThis patch makes the msbuild build (`make MSBUILD=msbuild`) to work on Linux by\r\nrenaming the Make `$(OS)` variable to `$(CURRENT_OS)` and thus \"protecting\" the\r\nstandard value of the `$(OS)` property during the build."},{"Id":"7198932731","Type":"PullRequestEvent","CreatedAt":"2018-02-05T14:30:24","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/1271","RelatedDescription":"Merged pull request \"[build] Use .csproj files, not .mdproj files\" (#1271) at xamarin/xamarin-android","RelatedBody":"(The extension is a lie!)\r\n\r\nCommit 6fd330df lists the ideal build scenario:\r\n\r\n> Load Xamarin.Android.sln into your IDE and Build the project.\r\n\r\nWe're not there yet.\r\n\r\nWhat *prevents* that? In part, the *existence* of `.mdproj` files.\r\nWhile `msbuild`-at-the-command-line doesn't care about project\r\nextensions, *Visual Studio **does***. Thus, the presence of `.mdproj`\r\nfiles results in Visual Studio showing an \"(incompatible)\" message\r\nnext to the project, and it refuses to load the project.\r\n\r\nImprove things by renaming all `.mdproj` files to `.csproj` files, and\r\nthen adding a `$(TargetFrameworkVersion)` value to each of them (as\r\nVisual Studio requires `$(TargetFrameworkVersion)` in order to load\r\nthe project file).\r\n\r\nWith these two changes -- change extension, set\r\n`$(TargetFrameworkVersion)` -- Visual Studo 2017 will load all of the\r\nprojects in the solution without showing the \"(incompatible)\" message.\r\n\r\nNote: Visual Studio caches project state within the `.vs` directory\r\n(stored in the toplevel checkout directory). If `Xamarin.Android.sln`\r\nhas been previously loaded into Visual Studio, you will need to do one\r\nof the following to allow Visual Studio to load the projects:\r\n\r\n 1. Right-click the project within the Solution Explorer, then click\r\n    Reload. Repeat for all such projects. Or,\r\n 2. Exit Visual Studio, and delete the `.vs` folder. When Visual\r\n    Studio next loads the project, the projects will load."}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"7202238603","Type":"IssuesEvent","CreatedAt":"2018-02-06T02:43:56","Actor":"xiangzLL","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/1799","RelatedDescription":"Opened issue \"listView without data crash on ipad. \" (#1799) at xamarin/Xamarin.Forms","RelatedBody":"Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues\r\n\r\nOn ipad,when set listView isrefreshing state is true and without items, at this time tap to srcoll the listView, it will crash.  but it's normal on iphone.\r\n\r\n### Steps to Reproduce\r\n\r\n1. set listview is refreshing is true  and without items.\r\n2. tap to scroll the listview  (normal tap is ok)\r\n3. app on ipad will crash.\r\n\r\n\r\n- Version with issue:  Xamarin.Forms.2.3.4.247\r\n- Last known good version:\r\n- IDE:  VS2017\r\n- Platform Target Frameworks: <!-- All that apply -->\r\n  - iOS:  11.2\r\n- Android Support Library Version: <!-- if applicable -->\r\n- Nuget Packages:\r\n- Affected Devices:\r\n\r\n### Screenshots\r\n![image](https://user-images.githubusercontent.com/19897396/35839293-9a8d1bd4-0b2a-11e8-8f45-a3f98c06624d.png)\r\n\r\n\r\n<!-- If the issue is a visual issue, please include screenshots showing the problem if possible -->\r\n\r\n### Reproduction Link\r\n\r\n<!-- Please upload or provide a link to a reproduction case -->\r\n"},{"Id":"7201667899","Type":"IssuesEvent","CreatedAt":"2018-02-05T23:36:11","Actor":"kzu","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/1798","RelatedDescription":"Opened issue \"Normal logging verbosity is way too verbose when processing XAML\" (#1798) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\n\r\nWhen using `Normal` verbosity, we should only issue minimal messages that indicate build progress. We are currently emitting very detailed XAML processing messages when `Normal` verbosity is active, instead of doing so only on `Detailed`.\r\n\r\n### Steps to Reproduce\r\n\r\n1.  Clone the SmartHotel360 clients repo from https://github.com/Microsoft/SmartHotel360-mobile-desktop-apps\r\n2. Open developer command prompt in the `src` directory\r\n3. Run `msbuild /t:restore SmartHotel.Clients.Android.sln`\r\n4. Run `msbuild SmartHotel.Clients.Android.sln /v:normal`\r\n\r\n### Expected Behavior\r\n\r\nOnly somewhat minimal progress information should be emitted.\r\n\r\n### Actual Behavior\r\n\r\nWe instead get a lot of:\r\n\r\n```\r\n_CoreXamlG:\r\n  Source: obj\\Debug\\netstandard1.4\\Views\\MyRoomView.xaml\r\n  Language: C#\r\n  AssemblyName: SmartHotel.Clients.Core\r\n  OutputFile obj\\Debug\\netstandard1.4\\SmartHotel.Clients.Core.obj.Debug.netstandard1._4.Views.MyRoomView.xaml.g.cs\r\n```\r\n\r\nFollowed by another lot of:\r\n\r\n```\r\n    Resource: SmartHotel.Clients.Core.obj.Debug.netstandard1._4.App.xaml...\r\n     Creating empty App.__InitComponentRuntime ...done.\r\n     Copying body of InitializeComponent to __InitComponentRuntime ...done.\r\n     Parsing Xaml... done.\r\n     Replacing App.InitializeComponent ()... done.\r\n     Optimizing IL... done\r\n```\r\n\r\n### Basic Information\r\n\r\n- Version with issue: VS 2017 15.5.6 with the XF version in the given repo.\r\n"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"7202445199","Type":"IssuesEvent","CreatedAt":"2018-02-06T03:59:49","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/3394","RelatedDescription":"Closed issue \"Query throws Exception with Xamarin iOS -> linking issue\" (#3394) at xamarin/xamarin-macios","RelatedBody":"_From @rob2212 on November 2, 2017 16:29_\n\nWhen I query a DbSet e.g. with a simple ToList() call I get the exception shown below. The exception is only thrown on real iOS device. It works with the iOS emulator.\r\n\r\n`var test = context.Images.ToList();`\r\n\r\n```\r\nException message: The type initializer for 'Microsoft.EntityFrameworkCore.Query.ResultOperators.Internal.TrackingExpressionNode' threw an exception.\r\nStack trace:   at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.get_NodeTypeProvider () [0x0000a] in <0998bf911f014e7884d2695c95a67016>:0 \r\n  at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler+<>c__DisplayClass15_0`1[TResult].<Execute>b__0 () [0x00000] in <0998bf911f014e7884d2695c95a67016>:0 \r\n  at Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryCache.GetOrAddQueryCore[TFunc] (System.Object cacheKey, System.Func`1[TResult] compiler) [0x0001f] in <0998bf911f014e7884d2695c95a67016>:0 \r\n  at Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryCache.GetOrAddQuery[TResult] (System.Object cacheKey, System.Func`1[TResult] compiler) [0x00000] in <0998bf911f014e7884d2695c95a67016>:0 \r\n  at Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler.Execute[TResult] (System.Linq.Expressions.Expression query) [0x00069] in <0998bf911f014e7884d2695c95a67016>:0 \r\n  at Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider.Execute[TResult] (System.Linq.Expressions.Expression expression) [0x00000] in <0998bf911f014e7884d2695c95a67016>:0 \r\n  at Remotion.Linq.QueryableBase`1[T].GetEnumerator () [0x0000c] in <4c6b24174f1a4a3a9c2e761b70716a02>:0 \r\n  at Microsoft.EntityFrameworkCore.Internal.InternalDbSet`1[TEntity].System.Collections.Generic.IEnumerable<TEntity>.GetEnumerator () [0x00006] in <0998bf911f014e7884d2695c95a67016>:0 \r\n  at System.Collections.Generic.List`1[T]..ctor (System.Collections.Generic.IEnumerable`1[T] collection) [0x00062] in <a89624c267f94034b6cf9aa0c56f8864>:0 \r\n  at System.Linq.Enumerable.ToList[TSource] (System.Collections.Generic.IEnumerable`1[T] source) [0x00018] in <773264786149499a986a13db6a7d46fe>:0 \r\n  at Erdmann.FW.LocationDatabase.DatabaseContentBuilder.Run (Erdmann.FW.LocationDatabase.LocationDbContext context) [0x00014] in E:\\IRISSYS\\Source\\OP-Tools\\Erdmann\\Erdmann.FW.LocationDatabase\\Erdmann.FW.LocationDatabase\\DatabaseContentBuilder.cs:25 \r\n  at Erdmann.FW.LocationDatabase.DatabaseManager.FillDatabase (Erdmann.FW.LocationDatabase.DataSources.IDataSource source) [0x0002a] in E:\\IRISSYS\\Source\\OP-Tools\\Erdmann\\Erdmann.FW.LocationDatabase\\Erdmann.FW.LocationDatabase\\DatabaseManager.cs:64 \r\n  at TestApp.MainViewModel.Run () [0x00049] in E:\\IRISSYS\\Source\\OP-Tools\\Erdmann\\Erdmann.FW.LocationDatabase\\TestApp\\TestApp.Shared\\MainViewModel.cs:56 \r\n```\r\nThe problem seems to be the linking behavior with the Xamarin project. I've tried to disable linking for some assemblies in the iOS Xamarin projefct under iOS Build:\r\n\r\n`--linkskip=Microsoft.EntityFrameworkCore --linkskip=Microsoft.EntityFrameworkCore.Relational  --linkskip=Microsoft.EntityFrameworkCore.Sqlite --linkskip=Remotion.Linq`\r\n\r\nThat didn't work. However disable linking completely does work (set Link Behavior to 'Don't Link'). But this can only be a temporary workaround not a final solution for production deployment.\r\n\r\n### Further technical details\r\nEF Core version: v2.0.0\r\nDatabase Provider: Microsoft.EntityFrameworkCore.Sqlite\r\nOperating system: Windows 10 / iOS 11.1\r\nIDE: Visual Studio 2017 (15.4.1)\r\n\n\n_Copied from original issue: aspnet/EntityFrameworkCore#10207_"},{"Id":"7202324845","Type":"PullRequestEvent","CreatedAt":"2018-02-06T03:14:08","Actor":"dalexsoto","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3388","RelatedDescription":"Merged pull request \"[generator] Teach generator about WrapAttribute on Getters and Setters\" (#3388) at xamarin/xamarin-macios","RelatedBody":"https://bugzilla.xamarin.com/show_bug.cgi?id=57870\r\n\r\n`WrapAttribute` can now be used in property getters and setters,\r\nthis allows to Wrap virtually anything the way you need, for example\r\nsmart enums, consider the following API definition:\r\n\r\n```csharp\r\n// Smart enum.\r\nenum PersonRelationship {\r\n\t[Field (null)]\r\n\tNone,\r\n\r\n\t[Field (\"FMFather\", \"__Internal\")]\r\n\tFather,\r\n\r\n\t[Field (\"FMMother\", \"__Internal\")]\r\n\tMother\r\n}\r\n```\r\n\r\n```csharp\r\n// Property definition.\r\n\r\n[Export (\"presenceType\")]\r\nNSString _PresenceType { get; set; }\r\n\r\nPersonRelationship PresenceType {\r\n\t[Wrap (\"PersonRelationshipExtensions.GetValue (_PresenceType)\")]\r\n\tget;\r\n\t[Wrap (\"_PresenceType = value.GetConstant ()\")]\r\n\tset;\r\n}\r\n```\r\n\r\nThis is the first part, teaching generator how to wrap getters and setters, the second part is coming after this gets merged and it is to teach `Wrap` about **SmartEnums** and also modify some src files so it does not conflict with this new capability.\r\n\r\nBuild diff https://gist.github.com/dalexsoto/39e7b12de0b3bc618d8e848f1355ae53"},{"Id":"7202168003","Type":"IssuesEvent","CreatedAt":"2018-02-06T02:19:52","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/3372","RelatedDescription":"Closed issue \"Include ReferenceConverter.ctor(Type) with linker by default\" (#3372) at xamarin/xamarin-macios","RelatedBody":"The missing ctor causes this common error - https://github.com/xamarin/xamarin-macios/issues/3144\r\n\r\nNeither the end user or Newtonsoft.Json is using that ctor. Something inside the .NET Framework is using reflection to invoke the ctor which causes an error when the linker doesn't include it.\r\n\r\nXamarin should link it by default rather than forcing the user to debug the error, search the web, and then eventually find the issue above and fix it themselves."},{"Id":"7202167772","Type":"PullRequestEvent","CreatedAt":"2018-02-06T02:19:47","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3396","RelatedDescription":"Merged pull request \"[linker] Mark all TypeConverter if TypeDescriptor is used. Fixes #3372\" (#3396) at xamarin/xamarin-macios","RelatedBody":"Moving to reference sources added a few, new converters so the existing\nlogic to preserve them was not complete.\n\nThis update the list of converters, sorted like the reference sources\n(RS) for easier reviews.\n\nIt also adds:\n* a canary test in \"dont link\" that will fail it the RS code change\nor is replaced;\n* more complete unit tests to ensure all cases works\n\nhttps://github.com/xamarin/xamarin-macios/issues/3372"},{"Id":"7201742123","Type":"PullRequestEvent","CreatedAt":"2018-02-05T23:59:00","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/3396","RelatedDescription":"Opened pull request \"[linker] Mark all TypeConverter if TypeDescriptor is used. Fixes #3372\" (#3396) at xamarin/xamarin-macios","RelatedBody":"Moving to reference sources added a few, new converters so the existing\nlogic to preserve them was not complete.\n\nThis update the list of converters, sorted like the reference sources\n(RS) for easier reviews.\n\nIt also adds:\n* a canary test in \"dont link\" that will fail it the RS code change\nor is replaced;\n* more complete unit tests to ensure all cases works\n\nhttps://github.com/xamarin/xamarin-macios/issues/3372"},{"Id":"7201321535","Type":"IssuesEvent","CreatedAt":"2018-02-05T22:09:28","Actor":"GouriKumari","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/issues/3395","RelatedDescription":"Opened issue \"[XI]OptimizeGeneratedCodeTest.IntPtrSizeTest :   non-empty body [LinkAll test] failed with Release config on device\" (#3395) at xamarin/xamarin-macios","RelatedBody":"### Steps to Reproduce\r\n\r\n1.  Update System to xamarin.ios-master build, bec116c273ab119c648522a28c3f650881ed4d9e\r\n2. Execute LinkAll tests on device with Release config with or without llvm enabled\r\n\r\n### Expected Behavior\r\nAll tests should pass\r\n\r\n### Actual Behavior\r\nOptimizeGeneratedCodeTest.IntPtrSizeTest :   non-empty body [LinkAll test] failed with Release config on device\r\n\r\n### Environment\r\nBuild Revision: bec116c273ab119c648522a28c3f650881ed4d9e\r\n\r\n### Build Logs\r\nhttp://xqa.blob.core.windows.net/gist/report-ca1699f85bad479ba01cba5e783f7d78.txt\r\nTest Logs: \r\nhttp://xqa.blob.core.windows.net/gist/linkall-ios07-50-59e978c67571aa0652bdb4ad6b8338ec46633e07ef07-50-59-2efba24d567e4e4bac8ede85435be3bc.zip"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"960588991375511552","CreatedAt":"2018-02-05T19:00:37+00:00","UserScreenname":"xamarinhq","Text":"Sketch out your next great app idea with Ink to Code, and see your ideas immediately converted into recognized compâ€¦ https://t.co/sIDGF4Kcp0","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":141,"FavoriteCount":67,"RawContent":null},{"Id":"960557379606794248","CreatedAt":"2018-02-05T16:55:00+00:00","UserScreenname":"xamarinhq","Text":"DataBinding Power Moves You May Not Be Using (Yet), with @davidortinau: https://t.co/VpucH7m8z9","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":29,"FavoriteCount":4,"RawContent":null},{"Id":"960308752409923584","CreatedAt":"2018-02-05T00:27:02+00:00","UserScreenname":"xamarinhq","Text":"#Xamarin's @lobrien explores the solar system with #ARKit and F#: https://t.co/0UXY2Lk1XB https://t.co/ChPi6XDAGH","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":27,"FavoriteCount":17,"RawContent":null},{"Id":"959520671754850304","CreatedAt":"2018-02-02T20:15:29+00:00","UserScreenname":"xamarinhq","Text":"Make deploying to an iOS or tvOS device easier with Wireless Deployment and our new Unlock Device Alert: https://t.co/DKgtjGzPfo","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":47,"FavoriteCount":21,"RawContent":null},{"Id":"959469971301691392","CreatedAt":"2018-02-02T16:54:01+00:00","UserScreenname":"xamarinhq","Text":"Add beautiful charts to ANY app with #MicroCharts from guest blogger @aloisdeniel: https://t.co/VeqfS1vfIL https://t.co/qc6cGwoxhK","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":95,"FavoriteCount":27,"RawContent":null},{"Id":"959164072196526085","CreatedAt":"2018-02-01T20:38:29+00:00","UserScreenname":"xamarinhq","Text":"Just push playâ€”using Google Play on an Android Emulator: https://t.co/wl37sjNIjv https://t.co/kmW8uIDW80","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":41,"FavoriteCount":18,"RawContent":null},{"Id":"959109618067738624","CreatedAt":"2018-02-01T17:02:06+00:00","UserScreenname":"xamarinhq","Text":"Bring 3D Models to life in augmented reality with #UrhoSharp: https://t.co/0c8YDgfF2Z https://t.co/xYx6fUVhML","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":41,"FavoriteCount":10,"RawContent":null},{"Id":"958788443647152136","CreatedAt":"2018-01-31T19:45:53+00:00","UserScreenname":"xamarinhq","Text":"Help ensure a productive 2018 with #Xamarin developer events near you this February: https://t.co/9aPslPGW2O https://t.co/zRGM0lEoZe","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":23,"FavoriteCount":7,"RawContent":null},{"Id":"958747709963415552","CreatedAt":"2018-01-31T17:04:01+00:00","UserScreenname":"xamarinhq","Text":"Supercharge your Xamarin.Mac app startup time: https://t.co/JzwELyF3Tm https://t.co/xLDqS3Z9sI","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":52,"FavoriteCount":21,"RawContent":null},{"Id":"958386328797884416","CreatedAt":"2018-01-30T17:08:01+00:00","UserScreenname":"xamarinhq","Text":"Explore Augmented Reality for #XamarinAndroid with #ARCore, featuring motion tracking, plane detection, and more:â€¦ https://t.co/JOLj1szAol","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":37,"FavoriteCount":16,"RawContent":null},{"Id":"958065243565051904","CreatedAt":"2018-01-29T19:52:08+00:00","UserScreenname":"xamarinhq","Text":"Check out Android Emulator version 27.0.2, now featuring \"Quick Boot\" to launch the emulator in just a few seconds:â€¦ https://t.co/75XbYDGg8m","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":223,"FavoriteCount":120,"RawContent":null},{"Id":"958020024941334528","CreatedAt":"2018-01-29T16:52:27+00:00","UserScreenname":"xamarinhq","Text":"Build a meeting scheduling mobile app using #XamarinForms and the Microsoft Graph API: https://t.co/LsMgiFD20d https://t.co/QvuhUZfhAd","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":83,"FavoriteCount":27,"RawContent":null},{"Id":"957782606992543745","CreatedAt":"2018-01-29T01:09:02+00:00","UserScreenname":"xamarinhq","Text":"Making iOS 11 even easier with #XamarinForms: https://t.co/nIDGNXGuF1 https://t.co/6qXhuCMSDp","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":48,"FavoriteCount":17,"RawContent":null},{"Id":"957415179091873792","CreatedAt":"2018-01-28T00:49:01+00:00","UserScreenname":"xamarinhq","Text":"Learn how to publish to #Azure from #VS4Mac: https://t.co/wnNmElsQrM https://t.co/DdxYLvB9ap","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":34,"FavoriteCount":16,"RawContent":null},{"Id":"956935518746546177","CreatedAt":"2018-01-26T17:03:01+00:00","UserScreenname":"xamarinhq","Text":"Add large titles to your iOS 11 apps in this post from @conceptdev: https://t.co/RDyk6GDVUU https://t.co/WlylY4fcZS","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":19,"FavoriteCount":5,"RawContent":null},{"Id":"956616920408772610","CreatedAt":"2018-01-25T19:57:01+00:00","UserScreenname":"xamarinhq","Text":"Get your first look at the #Xamarin Android Device Manager Preview: https://t.co/4cTyPaFfMb https://t.co/uKkOHzbp3U","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":61,"FavoriteCount":35,"RawContent":null},{"Id":"956570118569496576","CreatedAt":"2018-01-25T16:51:03+00:00","UserScreenname":"xamarinhq","Text":"Our @XamarinU webinar on automating the lifecycle of your iOS, Android, Windows, and macOS apps with #VSAppCenter iâ€¦ https://t.co/XuCIwVEtIh","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":20,"FavoriteCount":12,"RawContent":null},{"Id":"956210745984856064","CreatedAt":"2018-01-24T17:03:02+00:00","UserScreenname":"xamarinhq","Text":"Don't miss our @XamarinU webinar tomorrow (1/25) on automating the lifecycle of your iOS, Android, Windows, and macâ€¦ https://t.co/eKFBikD0kM","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Prod1</a>","RetweetCount":34,"FavoriteCount":12,"RawContent":null}]}},"RunOn":"2018-02-06T05:30:36.9302896Z","RunDurationInMilliseconds":3906}