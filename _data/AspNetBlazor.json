{"Data":{"GitHubIssues":{"Issues":[{"Id":"323872815","IsPullRequest":false,"CreatedAt":"2018-05-17T05:05:18","Actor":"abhishekgoenka","Number":"848","RawContent":null,"Title":"Object reference not set to an instance of an object.","State":"closed","Body":"I am getting the following error after including Newtonsoft.Json(version 11.0.2) package\r\n\r\nUncaught Error: Newtonsoft.Json.JsonSerializationException: Error setting value to 'TargetId' on 'BlazorApp1.Message'. ---> System.NullReferenceException: Object reference not set to an instance of an object.\r\n  at System.Linq.Expressions.Interpreter.LightLambda.MakeRunDelegateCtor (System.Type delegateType) <0x1d7f658 + 0x00308> in <e5348b97720a46d69ea40b87b6a035d9>:0 \r\n  at System.Linq.Expressions.Interpreter.LightLambda.GetRunDelegateCtor (System.Type delegateType) <0x1d78e70 + 0x00048> in <e5348b97720a46d69ea40b87b6a035d9>:0 \r\n  at System.Linq.Expressions.Interpreter.LightLambda.MakeDelegate (System.Type delegateType) <0x1d78ce8 + 0x0000e> in <e5348b97720a46d69ea40b87b6a035d9>:0 \r\n  at System.Linq.Expressions.Interpreter.LightDelegateCreator.CreateDelegate (System.Runtime.CompilerServices.IStrongBox[] closure) <0x1d783c0 + 0x00024> in <e5348b97720a46d69ea40b87b6a035d9>:0 \r\n  at System.Linq.Expressions.Interpreter.LightDelegateCreator.CreateDelegate () <0x1d78250 + 0x0000a> in <e5348b97720a46d69ea40b87b6a035d9>:0 \r\n  at System.Linq.Expressions.LambdaExpression.Compile (System.Boolean preferInterpretation) <0x205a910 + 0x00018> in <e5348b97720a46d69ea40b87b6a035d9>:0 \r\n  at System.Linq.Expressions.LambdaExpression.Compile () <0x205a8d8 + 0x0000a> in <e5348b97720a46d69ea40b87b6a035d9>:0 \r\n\r\n![image](https://user-images.githubusercontent.com/14522198/40157575-67c338c8-59bd-11e8-84bb-dbd41a5d6a36.png)\r\n","Url":"https://github.com/aspnet/Blazor/issues/848","RelatedDescription":"Closed issue \"Object reference not set to an instance of an object.\" (#848)"},{"Id":"323868928","IsPullRequest":false,"CreatedAt":"2018-05-17T04:32:44","Actor":"dotnetnoobie","Number":"847","RawContent":null,"Title":"Bootstrap 4 Templates Update to v4.1.1","State":"open","Body":"The current Blazor templates are Bootstrap 4.0.0\r\nthe latest bootstrap is currently v4.1.1\r\n\r\nAny chance of updating the templates to use the latest version of Bootstrap 4 to save having to manually update it every time you make a new project?","Url":"https://github.com/aspnet/Blazor/issues/847","RelatedDescription":"Open issue \"Bootstrap 4 Templates Update to v4.1.1\" (#847)"},{"Id":"323306966","IsPullRequest":false,"CreatedAt":"2018-05-17T02:24:08","Actor":"EdLichtman","Number":"838","RawContent":null,"Title":"Fatal Error while changing anything -- running in Docker","State":"closed","Body":"I used the codingblocks tutorial to get started with Blazor on Docker: https://www.youtube.com/watch?v=jGyFKH5y6LA&t=1052s. Therefore my configuration has removed launchSettings applicationUrl and openInBrowser settings, and I also added a <Watch Include=\"**\\*.cshtml\"/> to the csproj.\r\n\r\nI'm using Dotnet sdk: 2.1.300-rc1-008673\r\n\r\nWhile following the directions at https://blazor.net/docs/tutorials/build-your-first-blazor-app.html I added the IncrementCount Parameter to the Counter component and then tried to add IncrementCount=\"10\" as a property to the Counter element on the cshtml page and everything fell over. It wouldn't build, so I removed the Counter from the index.cshtml file and it still wouldn't build. I removed the Parameter IncrementCount from the Counter page and it still wouldn't build. I completely reset it (other than the csproj and launch settings configuration) and at every level I got this error:\r\n\r\nMSBUILD : error MSB1025: An internal failure occurred while running MSBuild.\r\nSystem.IO.FileNotFoundException: Unable to find the specified file.\r\n   at Interop.Sys.GetCwdHelper(Byte* ptr, Int32 bufferSize)\r\n   at Interop.Sys.GetCwd()\r\n   at System.IO.Path.GetFullPath(String path)\r\n   at System.IO.Enumeration.FileSystemEnumerator`1..ctor(String directory, EnumerationOptions options)\r\n   at System.IO.Enumeration.FileSystemEnumerable`1..ctor(String directory, FindTransform transform, EnumerationOptions options)\r\n   at System.IO.Enumeration.FileSystemEnumerableFactory.UserFiles(String directory, String expression, EnumerationOptions options)\r\n   at System.IO.Directory.InternalEnumeratePaths(String path, String searchPattern, SearchTarget searchTarget, EnumerationOptions options)\r\n   at System.IO.Directory.GetFiles(String path, String searchPattern)\r\n   at Microsoft.Build.CommandLine.MSBuildApp.ProcessProjectSwitch(String[] parameters, String[] projectsExtensionsToIgnore, DirectoryGetFiles getFiles)\r\n   at Microsoft.Build.CommandLine.MSBuildApp.ProcessCommandLineSwitches(CommandLineSwitches switchesFromAutoResponseFile, CommandLineSwitches switchesNotFromAutoResponseFile, String& projectFile, String[]& targets, String& toolsVersion, Dictionary`2& globalProperties, ILogger[]& loggers, LoggerVerbosity& verbosity, List`1& distributedLoggerRecords, Int32& cpuCount, Boolean& enableNodeReuse, TextWriter& preprocessWriter, Boolean& detailedSummary, ISet`1& warningsAsErrors, ISet`1& warningsAsMessages, Boolean& enableRestore, ProfilerLogger& profilerLogger, Boolean& enableProfiler, Dictionary`2& restoreProperties, Boolean recursing)\r\n   at Microsoft.Build.CommandLine.MSBuildApp.Execute(String[] commandLine)\r\n\r\nUnhandled Exception: System.IO.FileNotFoundException: Unable to find the specified file.\r\n   at Interop.Sys.GetCwdHelper(Byte* ptr, Int32 bufferSize)\r\n   at Interop.Sys.GetCwd()\r\n   at System.IO.Path.GetFullPath(String path)\r\n   at System.IO.Enumeration.FileSystemEnumerator`1..ctor(String directory, EnumerationOptions options)\r\n   at System.IO.Enumeration.FileSystemEnumerable`1..ctor(String directory, FindTransform transform, EnumerationOptions options)\r\n   at System.IO.Enumeration.FileSystemEnumerableFactory.UserFiles(String directory, String expression, EnumerationOptions options)\r\n   at System.IO.Directory.InternalEnumeratePaths(String path, String searchPattern, SearchTarget searchTarget, EnumerationOptions options)\r\n   at System.IO.Directory.GetFiles(String path, String searchPattern)\r\n   at Microsoft.Build.CommandLine.MSBuildApp.ProcessProjectSwitch(String[] parameters, String[] projectsExtensionsToIgnore, DirectoryGetFiles getFiles)\r\n   at Microsoft.Build.CommandLine.MSBuildApp.ProcessCommandLineSwitches(CommandLineSwitches switchesFromAutoResponseFile, CommandLineSwitches switchesNotFromAutoResponseFile, String& projectFile, String[]& targets, String& toolsVersion, Dictionary`2& globalProperties, ILogger[]& loggers, LoggerVerbosity& verbosity, List`1& distributedLoggerRecords, Int32& cpuCount, Boolean& enableNodeReuse, TextWriter& preprocessWriter, Boolean& detailedSummary, ISet`1& warningsAsErrors, ISet`1& warningsAsMessages, Boolean& enableRestore, ProfilerLogger& profilerLogger, Boolean& enableProfiler, Dictionary`2& restoreProperties, Boolean recursing)\r\n   at Microsoft.Build.CommandLine.MSBuildApp.Execute(String[] commandLine)\r\n   at Microsoft.Build.CommandLine.MSBuildApp.Main(String[] args)","Url":"https://github.com/aspnet/Blazor/issues/838","RelatedDescription":"Closed issue \"Fatal Error while changing anything -- running in Docker\" (#838)"},{"Id":"323814556","IsPullRequest":false,"CreatedAt":"2018-05-16T22:49:06","Actor":"galvesribeiro","Number":"846","RawContent":null,"Title":"A more complete Router","State":"open","Body":"Hello Blazor folks.\r\n\r\nWe at BlazorExtensions were looking for an enhanced/more complete router for Blazor. We have ways to do it without touch the current Blazor router but we feel that it would be too much work to wrap Blazor navigation into a HoC that would be responsible to render the proper components there. \r\n\r\nSo, in order to avoid that undertaking, we would like to contribute to Blazor repo the router work.\r\n\r\nThe first question is: Are Blazor team members already working on enhance the Router to be close in features to other frameworks' routers like ReactJS and Angular? In case of yes, and it would be released relatively soon, then we can close the issue and wait for it.\r\n\r\nOtherwise, here are the features we would like to add to the current router:\r\n\r\n1. Declarative Routing\r\n2. Complex/Nested routes\r\n3. State passing between routes\r\n4. Lazy/Decomposed/modular routing\r\n5. Guards \r\n6. Routing Abstractions (allow plugable external/custom routers)\r\n\r\nThose are the initial foundation we thought about that should be in place to allow more complete routing in Blazor apps.\r\n\r\nLooking forward to hear from you guys.\r\n\r\nThanks","Url":"https://github.com/aspnet/Blazor/issues/846","RelatedDescription":"Open issue \"A more complete Router\" (#846)"},{"Id":"323457365","IsPullRequest":false,"CreatedAt":"2018-05-16T21:58:11","Actor":"InnovationGB","Number":"839","RawContent":null,"Title":"[please close wrong place to post]DbContext optionsBuilder.UseSqlServer missing reference","State":"closed","Body":"Hello, I am sorry for the basic issue but there is no where else to get help on Blazor,\r\n\r\nI am trying to make a DbContext class and when I try to use optionsBuilder.UseSqlServer(\"connection string\") I get an error stated below\r\n\r\nI am trying to add the reference Microsoft.EntityFrameworkCore.SqlServer but there is no option for it in the dependencies reference manager, and simply typing using Microsoft.EntityFrameworkCore.SqlServer; does not work either.\r\n\r\nI tried to use nuget package manager to install the sql server package, and i get a warning stating I downgraded and that it was restored, yet I do not see it installed as a nuget package so I assume that the project template comes with it pre installed yet I am still getting this error. Please help.\r\n\r\n`Error\tCS1061\t'DbContextOptionsBuilder' does not contain a definition for 'UseSqlServer' and no extension method 'UseSqlServer' accepting a first argument of type 'DbContextOptionsBuilder' could be found (are you missing a using directive or an assembly reference?)\tBlazorCRUD.Shared\tC:\\Users\\User\\Desktop\\BlazorCRUD\\BlazorCRUD.Shared\\DataAccess\\EmployeeContext.cs\t15\tActive\r\n`","Url":"https://github.com/aspnet/Blazor/issues/839","RelatedDescription":"Closed issue \"[please close wrong place to post]DbContext optionsBuilder.UseSqlServer missing reference\" (#839)"},{"Id":"323460255","IsPullRequest":false,"CreatedAt":"2018-05-16T21:57:56","Actor":"Bartolomeus-649","Number":"840","RawContent":null,"Title":"Why are we messing around with html when we have .net?","State":"closed","Body":"How do you get winforms or a wpf application to run in the browser with Blazor?\r\n\r\nOr Silverlight, that's a framework even smaller than .NET/Mono, why not use that?  Just about anything is better then doing GUIs in HTML.\r\n\r\n","Url":"https://github.com/aspnet/Blazor/issues/840","RelatedDescription":"Closed issue \"Why are we messing around with html when we have .net?\" (#840)"},{"Id":"323791157","IsPullRequest":false,"CreatedAt":"2018-05-16T21:20:46","Actor":"danroth27","Number":"845","RawContent":null,"Title":"Update template links to be relative paths instead of absolute paths","State":"open","Body":"The nav links and fetch data URL in the templates are all absolute paths with a leading slash, which means they don't honor the base path for the app. I think these paths should be relative paths (no leading slashes).","Url":"https://github.com/aspnet/Blazor/issues/845","RelatedDescription":"Open issue \"Update template links to be relative paths instead of absolute paths\" (#845)"},{"Id":"323790440","IsPullRequest":false,"CreatedAt":"2018-05-16T21:18:13","Actor":"danroth27","Number":"844","RawContent":null,"Title":"HttpClient base address is missing trailing slash","State":"open","Body":"The `HttpClient` base address reflects the base path of the app, which is great, but it's missing the trailing slash:\r\n\r\n```html\r\n<base href=\"/foo/\" />\r\n```\r\n\r\n```csharp\r\n@inject HttpClient Http\r\n\r\n@functions {\r\n    protected override async Task OnInitAsync()\r\n    {\r\n        Console.WriteLine(Http.BaseAddress); // Expected: <base-uri>/foo/, Actual: <base-uri>/foo\r\n    }\r\n}\r\n```\r\n\r\nThe problem seems to be here:\r\n\r\nhttps://github.com/aspnet/Blazor/blob/a9c45fe78ac18b6bd524904b40896c249f9f09c0/src/Microsoft.AspNetCore.Blazor.Browser/Services/BrowserUriHelper.cs#L146-L158\r\n\r\n","Url":"https://github.com/aspnet/Blazor/issues/844","RelatedDescription":"Open issue \"HttpClient base address is missing trailing slash\" (#844)"},{"Id":"323690024","IsPullRequest":false,"CreatedAt":"2018-05-16T17:13:07","Actor":"abhisheksiddhu","Number":"843","RawContent":null,"Title":"allow framework assemblies to be transferred over cdn","State":"closed","Body":"I know that we're caching the framework dlls, the initial load is still very heavy, and as more and more applications start using blazor it would make a significant impact to serve the dll over a cdn, we can use the nuget or assembly version number to be the differentiator.","Url":"https://github.com/aspnet/Blazor/issues/843","RelatedDescription":"Closed issue \"allow framework assemblies to be transferred over cdn\" (#843)"},{"Id":"323685563","IsPullRequest":false,"CreatedAt":"2018-05-16T16:00:23","Actor":"GoranHalvarsson","Number":"842","RawContent":null,"Title":"Html meta tags, page title ","State":"open","Body":"Hello people\r\n\r\nYou guys are doing a wonderful job with Blazor :-)\r\n\r\nI have a question regarding Html meta tags. The app itself will be placed in the app element on the page. But how about stuff in the header? Like meta tags and so on. \r\nLet say I would like to change/update meta tag data depending on what page (in the app).  Or just update the page title. \r\nHow to do this? By Javascript interop?  \r\n","Url":"https://github.com/aspnet/Blazor/issues/842","RelatedDescription":"Open issue \"Html meta tags, page title \" (#842)"},{"Id":"323601935","IsPullRequest":false,"CreatedAt":"2018-05-16T13:15:47","Actor":"AlexStory","Number":"841","RawContent":null,"Title":"Parent losing track of children components","State":"closed","Body":"### Title\r\nParent components can have inconsistent updates based on their child components status.\r\n\r\n### Functional Impact\r\nReduces ability to break pages into components, affecting modularization, and code reuse.\r\n\r\n### Minimal repro steps\r\nFollow the [tutorial](https://blazor.net/docs/tutorials/build-your-first-blazor-app.html) \r\nThen move the TodoItems in the foreach into a separate template that takes a TodoItem as a parameter.\r\n\r\n### Expected result\r\nThe parent component changes the number of items remaining when one is marked complete.\r\n\r\n### Actual result\r\nThe parent page component will no longer update the unfinished task count when a child element is marked complete. But it will update to the correct amount whenever a new child is added.\r\n\r\n","Url":"https://github.com/aspnet/Blazor/issues/841","RelatedDescription":"Closed issue \"Parent losing track of children components\" (#841)"},{"Id":"323075591","IsPullRequest":false,"CreatedAt":"2018-05-15T20:46:13","Actor":"babula38","Number":"837","RawContent":null,"Title":"Error if you modify <base href=\"/test/\" />","State":"closed","Body":"HI,\r\n\r\nI modify the base url to \"/test/\", and i am getting the below error. if you use \"/test\" it is works as expected.\r\n-Blazor 0.3\r\n-vs2018\r\n![error in base url](https://user-images.githubusercontent.com/4153708/40038998-389ad0c4-5832-11e8-9b1e-a91dd64ee90f.PNG)\r\n","Url":"https://github.com/aspnet/Blazor/issues/837","RelatedDescription":"Closed issue \"Error if you modify <base href=\"/test/\" />\" (#837)"},{"Id":"323068179","IsPullRequest":false,"CreatedAt":"2018-05-15T08:36:41","Actor":"babula38","Number":"836","RawContent":null,"Title":"Use case of <base href=\"/> if i customize this to / test it is not reflecting on url","State":"closed","Body":"May it is a silly question, but when should i customize the <base href /> tag and why?\r\n","Url":"https://github.com/aspnet/Blazor/issues/836","RelatedDescription":"Closed issue \"Use case of <base href=\"/> if i customize this to / test it is not reflecting on url\" (#836)"},{"Id":"322991041","IsPullRequest":false,"CreatedAt":"2018-05-14T22:26:07","Actor":"EisenbergEffect","Number":"835","RawContent":null,"Title":"Separate The .NET Core to WASM Experience from Blazor","State":"closed","Body":"Please consider separating the UI-specific parts of this project from the basic capability to compile .NET Core code to WASM. There are many scenarios where it would be an advantage to run C# code without needing a full UI framework (or this framework).\r\n\r\nMinimally, I would expect the compilation process to produce:\r\n\r\n1. The WASM module\r\n2. A JavaScript module with a series of exports corresponding to WASM module function exports\r\n3. A TypeScript d.ts file which describes the WASM  module function exports\r\n\r\nThe combination of the above allows consumers to call the compiled code in a type-safe way from JavaScript or TypeScript.\r\n\r\nThis seems like a 1st step that we would want to get right, before proceeding on to building a full UI framework. It's an important step in democratizing the .NET ecosystem so that anyone can build frameworks, not just Microsoft.","Url":"https://github.com/aspnet/Blazor/issues/835","RelatedDescription":"Closed issue \"Separate The .NET Core to WASM Experience from Blazor\" (#835)"},{"Id":"322982101","IsPullRequest":false,"CreatedAt":"2018-05-14T21:08:14","Actor":"Andrzej-W","Number":"834","RawContent":null,"Title":"Blazor App - simple bug, hard to fix - make DOM/window properties and events available in Blazor","State":"open","Body":"There is a bug in default Blazor application template in client project in Shared\\NavMenu.cshtml file. It is very simple but I have absolutely no idea how we can fix this in Blazor (without JavaScript)\r\n\r\n`ToggleNavMenu` function is connected to `onclick` events in two places:\r\n`<button class=\"navbar-toggler\" onclick=@ToggleNavMenu>`\r\nand\r\n`<div class=@(collapseNavMenu ? \"collapse\" : null) onclick=@ToggleNavMenu>`\r\n\r\nBoth places are necessary if application works on small screen. First one shows or hides menu when we click on \"hamburger\" button. Second one hides menu when we click on any menu option.\r\n\r\nUnfortunately on big screen we have a problem. \"Hamburger\" button is not visible and it is OK, but each time we click on menu (strictly speaking on sidebar) `collapseNavMenu` variable is changed between true/false and `collapse` class is added/removed to/from `<div>` element. In site.css file we have:\r\n```\r\n@media (min-width: 768px) {\r\n.sidebar .collapse {\r\n        /* Never collapse the sidebar for wide screens */\r\n        display: block;\r\n    }\r\n}\r\n```\r\nso it is not a problem on big screen. But if `callapseNavMenu` variable is false and we make our browser windows smaller, menu will be visible - it should be hidden.\r\n\r\nTo solve the problem we should have access to browser window size from C# code and don't toggle the variable if it is 768px or wider.\r\n\r\nTo solve this and plenty of other problems related to responsive applications we should have access to DOM/window events and properties like onscroll, onresize, different width/height properties, pageXOffest, pageYOffset, and more.\r\n\r\nIs it planned in the future?","Url":"https://github.com/aspnet/Blazor/issues/834","RelatedDescription":"Open issue \"Blazor App - simple bug, hard to fix - make DOM/window properties and events available in Blazor\" (#834)"},{"Id":"322977497","IsPullRequest":false,"CreatedAt":"2018-05-14T20:53:58","Actor":"rglos","Number":"833","RawContent":null,"Title":"Unable to host in IIS on Windows 10 as an application","State":"open","Body":"I am unable to get Blazor working using the `Blazor (ASP.NET Core hosted)` template while hosting the application as an IIS application on my local Windows 10 machine.\r\n\r\n- File, New Project, ASP.NET Core Web Application\r\n- Name: `BlazorDotNetHosted`, click `OK`\r\n- Select `Blazor (ASP.NET Core hosted)`\r\n- Right-click `BlazorDotNetHosted.Server` and select Publish\r\n- Select `Folder`, note it's going to `bin\\Release\\netcoreapp2.1\\publish\\`, click Publish\r\n- Create local folder at `D:\\apps\\web\\BlazorDotNetHosted`\r\n- Copy+paste contents at `bin\\Release\\netcoreapp2.1\\publish\\` to `D:\\apps\\web\\BlazorDotNetHosted`\r\n- Open IIS, navigate to `Default Web Site`\r\n- Right-click `Default Web Site` and select `Add Application`\r\n- Alias: `BlazorDotNetHosted`, Application Pool: `DefaultAppPool`, Physical path: `D:\\apps\\web\\BlazorDotNetHosted`, click `OK`\r\n- Click `Browse..` to view the app at `http://localhost/BlazorDotNetHosted/` and note that the page just says `Loading...`\r\n\r\nThings I've tried:\r\n\r\nUpdate the app base path as suggested [here](https://blazor.net/docs/host-and-deploy/index.html#app-base-path) by opening the `index.html` at `D:\\apps\\web\\BlazorDotNetHosted\\BlazorDotNetHosted.Client\\dist\\index.html` and edit the `base` element to add the path:\r\n\r\n```\r\n<base href=\"/BlazorDotNetHosted/\" />\r\n```\r\n\r\nThis does allow the application to load.  However the links don't work as the `navbar-brand`, `Counter`, and `Fetch Data` links are `localhost`, `localhost/counter`, and `localhost/fetchdata`.  I even tried installing the `URL Rewrite Module` as suggested [here](https://blazor.net/docs/host-and-deploy/index.html#standalone-deployment).\r\n\r\nIf I manually navigate to `localhost/BlazorDotNetHosted/counter` that page works.\r\n\r\nIf I manually navigate to `http://localhost/BlazorDotNetHosted/fetchdata` it loads the page but the api call in Chrome Dev tools shows 404 not found on `http://localhost/api/SampleData/WeatherForecasts`.  \r\n\r\nIf I hit the api at `http://localhost/BlazorDotNetHosted/api/SampleData/WeatherForecasts` that returns data successfully.\r\n\r\n\r\n\r\nI feel like I'm very close but I'm unsure of how to get it to respect the `base` element.  Am I doing something wrong or is this not supported?  Does it have to be deployed to the root of a web server or hosted in app service at the root url?","Url":"https://github.com/aspnet/Blazor/issues/833","RelatedDescription":"Open issue \"Unable to host in IIS on Windows 10 as an application\" (#833)"},{"Id":"322901819","IsPullRequest":true,"CreatedAt":"2018-05-14T17:47:37","Actor":"rynowak","Number":"832","RawContent":null,"Title":"Fix #773 (for real this time)","State":"closed","Body":"The problem is that the new HTML rewrite pass was traversing into\r\nattributes of all kinds and would turn any HTML content inside those\r\nattributes into elements where possible. The solution is to not do\r\nthat.","Url":"https://github.com/aspnet/Blazor/pull/832","RelatedDescription":"Closed or merged PR \"Fix #773 (for real this time)\" (#832)"},{"Id":"322897116","IsPullRequest":false,"CreatedAt":"2018-05-14T16:49:18","Actor":"SteveSandersonMS","Number":"831","RawContent":null,"Title":"Update to latest Mono drop","State":"open","Body":"Tracking this for 0.4.0.\r\n\r\nFixes issues including #799","Url":"https://github.com/aspnet/Blazor/issues/831","RelatedDescription":"Open issue \"Update to latest Mono drop\" (#831)"},{"Id":"322618432","IsPullRequest":false,"CreatedAt":"2018-05-14T13:10:08","Actor":"ericgrantholland","Number":"830","RawContent":null,"Title":"Serving static files using Blazor routing","State":"closed","Body":"Is it possible to serve static files that are stored in the root folder(.PDF,.DOCX,.TXT, etc)? ","Url":"https://github.com/aspnet/Blazor/issues/830","RelatedDescription":"Closed issue \"Serving static files using Blazor routing\" (#830)"},{"Id":"322533980","IsPullRequest":false,"CreatedAt":"2018-05-14T13:09:09","Actor":"touseefbsb","Number":"828","RawContent":null,"Title":"where does blazor stand with web components?","State":"closed","Body":"reference : https://www.youtube.com/watch?v=7CUO7PyD5zA\r\n\r\nweb components aim to standardize the UI for web irrespective of how we do web development I just want to know whether brazor will be in sync to that so we can take advantage of that standardized web components and widges at one place, instead of being over whelmed by a lot of ways to build ui widgets.","Url":"https://github.com/aspnet/Blazor/issues/828","RelatedDescription":"Closed issue \"where does blazor stand with web components?\" (#828)"},{"Id":"322559973","IsPullRequest":false,"CreatedAt":"2018-05-13T03:30:03","Actor":"jiggadias","Number":"829","RawContent":null,"Title":"0.3.0 Blank after Loading","State":"closed","Body":"I've seen someone else with this issue, but it seemed to relate to an upgraded project. I'm trying to run the default generated project for a Blazor Standalone with a new application and as the title says it's blank after Loading... disappears.","Url":"https://github.com/aspnet/Blazor/issues/829","RelatedDescription":"Closed issue \"0.3.0 Blank after Loading\" (#829)"},{"Id":"322516626","IsPullRequest":false,"CreatedAt":"2018-05-12T17:44:22","Actor":"kstewart83","Number":"826","RawContent":null,"Title":"Native Electron/Cordova Support","State":"closed","Body":"One thing that I think would be valuable and would help broaden the use cases and appeal of Blazor would be first class integration with Electron and Cordova. This would include things like tooling in Visual Studio, debugging support, etc. A tight integration with these two other platforms would allow a high degree of code-base sharing across Web (backend / frontend), Desktop, and Mobile in a single language and programming paradigm. I think this would be a great boost to productivity.","Url":"https://github.com/aspnet/Blazor/issues/826","RelatedDescription":"Closed issue \"Native Electron/Cordova Support\" (#826)"},{"Id":"322529019","IsPullRequest":false,"CreatedAt":"2018-05-12T17:34:39","Actor":"jaysongo","Number":"827","RawContent":null,"Title":"Error BL9981: Unexpected closing tag 'div' with no matching start tag","State":"open","Body":"Blazor: 0.3.0\r\nIDE: VSCode\r\n\r\nSteps to Reproduce:\r\n\r\n1. Scaffold Blazor \"hosted\" (although I suspect any type will do). dotnet new blazorhosted\r\n2. Open MainLayout.cshtml\r\n3. Apply an HTML block comment to the inner div tag containing the @Body method.\r\nFrom: \r\n\r\n```\r\n<div class=\"content px-4\">\r\n    @Body\r\n</div>\r\n```\r\n\r\nTo:\r\n```\r\n<!-- <div class=\"content px-4\">\r\n    @Body\r\n</div> -->\r\n```\r\n\r\n4. Bug.\r\n```\r\nC:\\...\\Shared\\MainLayout.cshtml(44,1): error BL9981: Unexpected closing tag 'div' with no matching start tag. [C:\\....csproj]\r\n    0 Warning(s)\r\n    1 Error(s)\r\n```\r\n\r\n","Url":"https://github.com/aspnet/Blazor/issues/827","RelatedDescription":"Open issue \"Error BL9981: Unexpected closing tag 'div' with no matching start tag\" (#827)"},{"Id":"322507331","IsPullRequest":false,"CreatedAt":"2018-05-12T15:49:35","Actor":"davidnmbond","Number":"825","RawContent":null,"Title":"No way to bind <input readonly />","State":"closed","Body":"There is no way to bind an input readonly attribute to a bool.\r\n\r\nThis results in the following code abomination:\r\n\r\n```\r\n@if (Readonly)\r\n{\r\n    <input readonly type=\"@InputType\" class=\"form-control\" aria-describedby=\"emailHelp\" placeholder=\"@Placeholder\" value=\"@Value\" onchange=\"@ItChanged\" />\r\n}\r\nelse\r\n{\r\n    <input type=\"@InputType\" class=\"form-control\" aria-describedby=\"emailHelp\" placeholder=\"@Placeholder\" value=\"@Value\" onchange=\"@ItChanged\" />\r\n}\r\n```","Url":"https://github.com/aspnet/Blazor/issues/825","RelatedDescription":"Closed issue \"No way to bind <input readonly />\" (#825)"},{"Id":"322473812","IsPullRequest":false,"CreatedAt":"2018-05-12T01:56:16","Actor":"Eilon","Number":"824","RawContent":null,"Title":"Template files that are app code should not have license info in them","State":"open","Body":"For example:\r\n\r\nhttps://github.com/aspnet/Blazor/blob/dev/src/Microsoft.AspNetCore.Blazor.Templates/content/BlazorHosted-CSharp/BlazorHosted-CSharp.Server/Program.cs#L1-L2\r\n\r\nI recommend scanning all the template files and removing the .NET Foundation license from files that end up as application code.","Url":"https://github.com/aspnet/Blazor/issues/824","RelatedDescription":"Open issue \"Template files that are app code should not have license info in them\" (#824)"},{"Id":"322447711","IsPullRequest":true,"CreatedAt":"2018-05-11T22:04:04","Actor":"Asesjix","Number":"823","RawContent":null,"Title":"Complete the UIEventArgs, UIKeyboardEventArgs, UIMouseEventArgs, UIPointerEventArgs","State":"open","Body":"UIEventArgs\r\n- Bubbles\r\n- Cancelable\r\n- Composed\r\n\r\nUIKeyboardEventArgs\r\n- Code\r\n- Location\r\n- CtrlKey\r\n- ShiftKey\r\n- AltKey\r\n- MetaKey\r\n- Repeat\r\n- IsComposing\r\n\r\nUIMouseEventArgs\r\n- ScreenX\r\n- ScreenY\r\n- ClientX\r\n- ClientY\r\n- CtrlKey\r\n- ShiftKey\r\n- AltKey\r\n- MetaKey\r\n- Button\r\n- Buttons\r\n- RelatedTarget (prepared - need EventTarget support)\r\n- Region\r\n\r\nUIPointerEventArgs\r\n- PointerId\r\n- Width\r\n- Height\r\n- Pressure\r\n- TangentialPressure\r\n- TiltX\r\n- TiltY\r\n- Twist\r\n- PointerType\r\n- IsPrimary","Url":"https://github.com/aspnet/Blazor/pull/823","RelatedDescription":"Open PR \"Complete the UIEventArgs, UIKeyboardEventArgs, UIMouseEventArgs, UIPointerEventArgs\" (#823)"},{"Id":"322431942","IsPullRequest":false,"CreatedAt":"2018-05-11T21:49:12","Actor":"DrSensor","Number":"820","RawContent":null,"Title":"Build Blazor page/component and publish it to npm/nuget","State":"closed","Body":"> TL; DR: this is more like feature proposal for future Blazor Cli\r\n\r\nTaking inspiration from Vue that can [build SFC (Single File Component) `*.vue`](https://github.com/vuejs/vue-cli/blob/dev/docs/cli.md#vue-build) into redistributable [package](https://github.com/vuejs/vue-cli/blob/dev/docs/build-targets.md#library), it would be nice if Blazor can do the same thing. Because Blazor [can be compiled into](http://blog.stevensanderson.com/2018/02/06/blazor-intro/) `*.dll` (AOT compiled mode) and `.wasm` (interpreted mode), it also make sense to have ability to build and publish single Blazor Component (`.cshtml`) into NuGet and/or NPM for shareabilitiy.\r\n\r\n<details>\r\n<summary>Given this Blazor Component (if in the future Blazor support F#)</summary>\r\n\r\nwith usage\r\n\r\n```html\r\n<Propeller diameter=\"120cm\" power=\"24W\" propconstant=\"3.2\" scale=\"0.5px/cm\" />\r\n```\r\n\r\nthen the implementation of `Propeller.fshtml` will be\r\n\r\n```fs\r\n<!-- https://codepen.io/drsensor/pen/ELEzWb -->\r\n<svg width=\"@Diameter\" height=\"@Diameter\">\r\n  <g transform=\"translate(0 @(Diameter/4))\">\r\n    <rect width=\"@Diameter\" height=\"@(Diameter/2)\" rx=\"@(Diameter/2)\" ry=\"@(Diameter/4)\" >\r\n          <animateTransform attributeName=\"transform\"\r\n                          type=\"rotate\"\r\n                          from=\"0 @(Diameter/2) @(Diameter/4)\"\r\n                          to=\"360 @(Diameter/2) @(Diameter/4)\"\r\n                          dur=\"@Period\"\r\n                          repeatCount=\"indefinite\"/>\r\n    </rect>\r\n    <rect width=\"@Diameter\" height=\"@(Diameter/2)\" rx=\"@(Diameter/2)\" ry=\"@(Diameter/4)\" >\r\n      <animateTransform attributeName=\"transform\"\r\n                        type=\"rotate\"\r\n                        from=\"90 @(Diameter/2) @(Diameter/4)\"\r\n                        to=\"450 @(Diameter/2) @(Diameter/4)\"\r\n                        dur=\"@Period\"\r\n                        repeatCount=\"indefinite\"/>\r\n    </rect>\r\n  </g>\r\n  <text x=\"25%\" y=\"10%\">@Rpm RPM</text>\r\n  <text x=\"75%\" y=\"90%\">@Thrust N</text>\r\n</svg>\r\n\r\n@functions {\r\n  /// https://quadcopterproject.wordpress.com/static-thrust-calculation/\r\n  [<Measure>] type rad (* revolution or radians *)\r\n  [<Measure>] type s (* second *)\r\n  [<Measure>] type m (* meter *)\r\n  [<Measure>] type px (* pixels *)\r\n  [<Measure>] type kg (* kilogram *)\r\n  [<Measure>] type N = (kg*m)/(s^2) (* Newtons *)\r\n  [<Measure>] type W = (N*m)*(rad/s) (* Watts *) (* P = τ * ω *)\r\n  let π = 3.14159265359\r\n  let HertzOf (rpm : <rad/s>) : float<rad/s> = rpm/60\r\n\r\n  [<Measure>] let cm = 1/100<m>\r\n\r\n  let public scale : float<px/m> = 1.0<px/m>\r\n  val public power : float<W>\r\n  val public diameter : float<m>\r\n  val public propconstant : float<N*m>\r\n\r\n  let public propRpm powerFactor : float<rad/s> = (power/propconstant)^(1/powerFactor)\r\n\r\n  member Rpm with get () = propRpm(3.2)\r\n  member Thrust : float<N>\r\n    with get () = ((π/2) * (diameter^2) * 1.225<kg/m^3> * (power^2) )^(1/3)\r\n\r\n  member Period : float<script> with get () = 1/(HertzOf(Rpm))\r\n  member Diameter : int<px> with get () = diameter*scale\r\n}\r\n```\r\n</details>\r\n\r\n## Build and Publish to NPM\r\n\r\nTaking consideration that WebComponent became widely adopted, there is 2 build target that essential for sharing Blazor Component into another JS/TS based only project.\r\n\r\n### Build as WebAssembly\r\n\r\n> not sure about this\r\n\r\n#### CLI\r\n\r\n```bash\r\ndotnet blazor build --target wasm Propeller.fshtml\r\ncd dist\r\nnpm version minor\r\nnpm publish\r\n```\r\n\r\n<details>\r\n<summary>For building multiple Blazor Component into single wasm (not usre if this good)</summary>\r\n\r\ngiven the `Propeller.csproj`\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netstandard2.0</TargetFramework>\r\n    <EnableDefaultItems>false</EnableDefaultItems>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.FSharp\" Version=\"*\" />\r\n    <Compile Include=\"PropellerAPC.fshtml\" />\r\n    <Compile Include=\"PropellerWD.cshtml\" />\r\n    <Compile Include=\"PropellerCF.cshtml\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nthen build the `.csproj` file\r\n\r\n```bash\r\ndotnet blazor build --target wasm Propeller.csproj\r\n```\r\n\r\n> Still don't know if it's best to output single `Propeller.wasm` or multiple `Propeller*.wasm` ?\r\n\r\n</details>\r\n\r\n#### Usage\r\n\r\n* using webpack and wasm-loader\r\n\r\n> waiting for docs how to use _webpack 4_ `webassembly/experimental`\r\n\r\n```ts\r\nimport propeller from 'propeller'\r\n\r\npropeller().then(instance => {\r\n  // https://quadcopterproject.wordpress.com/static-thrust-calculation/\r\n  const calcrpm = instance.exports.propRpm\r\n  const rpm = calcrpm(3.2)\r\n  console.log(`${rpm} RPM`) // 24 Watt\r\n})\r\n```\r\n\r\n* using [fetch](https://developer.mozilla.org/en-US/docs/WebAssembly/Loading_and_running) (usefull for dynamic loading at runtime via CDN)\r\n\r\n```html\r\n<button onclick=\"instantiatePropeller()\">load component</button>\r\n<p id=\"rpm\" />\r\n<script>\r\nfunction instantiatePropeller() {\r\n  WebAssembly.instantiateStreaming(\r\n    fetch('https://cdn.jsdelivr.net/npm/propeller/dist/propeller.wasm'), importObject)\r\n    .then(obj => {\r\n      document.getElementById('rpm').textContent = obj.instance.exports.calcrpm(3.2);\r\n    }\r\n  );\r\n}\r\n</script>\r\n```\r\n\r\n### Build as WebComponent\r\n\r\n> If Blazor heading toward to support WebComponent\r\n\r\nThe produced WebComponent are just binding to the generated WebAssembly.\r\n\r\n#### CLI\r\n\r\n```bash\r\ndotnet blazor build --target wc Propeller.fshtml\r\ncd dist\r\nnpm version minor\r\nnpm publish\r\n```\r\n\r\n#### Usage\r\n\r\n- via CDN\r\n\r\n```html\r\n<head>\r\n  <script src=\"https://cdn.jsdelivr.net/npm/propeller\" />\r\n</head>\r\n<body>\r\n  <propeller diameter=\"120cm\" power=\"24W\" propconstant=\"3.2\" scale=\"0.5px/cm\" />\r\n</body>\r\n```\r\n\r\n<details>\r\n<summary>For building multiple Blazor Component into single `propeller.min.js`</summary>\r\n\r\n> the `Propeller.csproj` same as wasm\r\n\r\n```bash\r\ndotnet blazor build --target wc Propeller.csproj\r\n```\r\n\r\nusing multiple component\r\n\r\n```html\r\n<head>\r\n  <script src=\"https://cdn.jsdelivr.net/npm/propeller\" />\r\n</head>\r\n<body>\r\n  <propeller-apc diameter=\"120cm\" power=\"24W\" scale=\"0.5px/cm\" />\r\n  <propeller-w diameter=\"60cm\" power=\"24W\" scale=\"0.5px/cm\" />\r\n  <propeller-cf diameter=\"80cm\" power=\"24W\" scale=\"0.5px/cm\" />\r\n</body>\r\n```\r\n\r\n</details>\r\n\r\n## Build and Publish to NuGet\r\n\r\nWhile dotnet cli can build standalone blazor component, it would be nice to have dedicated cli for building standalone blazor component without tinkering with `.csproj` file.\r\n\r\n### CLI\r\n\r\n```bash\r\ndotnet blazor build Propeller.fshtml\r\ncd nupkgs\r\ndotnet nuget push Propeller.nupkg\r\n```\r\n\r\n### Usage\r\n\r\nadding to `.csproj`\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netstandard2.0</TargetFramework>\r\n  </PropertyGroup>\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Blazor.Browser\" Version=\"*\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Blazor.Build\" Version=\"*\" />\r\n    <PackageReference Include=\"Propeller\" Version=\"*\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\nIn `PropellerAPC.cshtml`\r\n\r\n```cshtml\r\n@addTagHelper *, Propeller\r\n@using Propeller\r\n\r\n<Propeller power=\"@power\" scale=\"@scale\" diameter=\"@diameter\" propconstant=\"4.6\" />\r\n\r\n@functions {\r\n  public double scale { get; set; } = 1.0;\r\n  public double power { get; set; }\r\n  public double diameter { get; set; }\r\n}\r\n```","Url":"https://github.com/aspnet/Blazor/issues/820","RelatedDescription":"Closed issue \"Build Blazor page/component and publish it to npm/nuget\" (#820)"},{"Id":"322441064","IsPullRequest":false,"CreatedAt":"2018-05-11T21:33:27","Actor":"Andrzej-W","Number":"822","RawContent":null,"Title":"[Bug] Inserting text from intellisense for @using doesn't work correctly","State":"closed","Body":"**Software**\r\nVS 15.7.0 Preview 6\r\nBlazor 0.3.0\r\n\r\n**Steps**\r\n- Create a new Blazor project (I have selected hosted, but probably it is not important, project name BugReport)\r\n- Open `BugReport.Client\\_ViewImports.cshtml` file\r\n- In the new line at the end of the file (line 8) type `@using BugReport.Client.` You will see two options in intellisense. Select any of them.\r\n\r\n**Expected behaviour**\r\nSelected text is inserted after dot in the current line.\r\n\r\n**Current behaviour**\r\nText is appended to end of line 6. This is the first line which contains the text `@using BugReport.Client` without dot at the end. You can try to write `@using Microsoft.AspNetCore.Blazor.` and you will see that selected text will be appended to the end of line 2 where we have `@using Microsoft.AspNetCore.Blazor`","Url":"https://github.com/aspnet/Blazor/issues/822","RelatedDescription":"Closed issue \"[Bug] Inserting text from intellisense for @using doesn't work correctly\" (#822)"},{"Id":"322434538","IsPullRequest":false,"CreatedAt":"2018-05-11T21:06:11","Actor":"Andrzej-W","Number":"821","RawContent":null,"Title":"bind-value-oninput throws","State":"open","Body":"Currently when we use `<input bind=\"@myVariable\" />` variable is updated when input field looses focus (onchange event is called). Popular requirement in many applications is to implement incremental search. To do this we need:\r\n\r\n- binding which updates variable after every input field change\r\n- throttling - this is necessary if we want to do incremental search on the server or we have a big collection to filter; we should be able to specify a delay in milliseconds and our variable should be updated only after user stops typing for the specified period of time\r\n\r\nI believe that throttling can be useful for other events also, for example mouse move, mouse wheel scrolling, etc.","Url":"https://github.com/aspnet/Blazor/issues/821","RelatedDescription":"Open issue \"bind-value-oninput throws\" (#821)"},{"Id":"322288772","IsPullRequest":false,"CreatedAt":"2018-05-11T16:39:10","Actor":"keyneom","Number":"819","RawContent":null,"Title":"Dependency Injection for dynamic Dependency Injection","State":"closed","Body":"I'm new to Blazor so perhaps this is already supported but not documented functionality, but is there a way to inject the ServiceProvider itself so that a component or service can resolve dependencies dynamically?\r\n\r\nIf this isn't already possible, it'd be great to be able to do so!","Url":"https://github.com/aspnet/Blazor/issues/819","RelatedDescription":"Closed issue \"Dependency Injection for dynamic Dependency Injection\" (#819)"}],"ResultType":"GitHubIssue"}},"RunOn":"2018-05-17T05:30:02.8283558Z","RunDurationInMilliseconds":1485}