{"Data":{"GitHub":{"Issues":[{"Id":"506062597","IsPullRequest":false,"CreatedAt":"2019-10-11T21:23:51","Actor":"CESARDELATORRE","Number":"4326","RawContent":null,"Title":"Move the Image Classification from the Experimental package (0.16) to a stable package heading to 1.4 GA","State":"closed","Body":"We want to mark the ImageClassification DNN based as a \"stable API\" when we ship 1.4 GA.\r\n\r\nHowever, it is currently in the Experimental package `Microsoft.ML.Dnn 0.16.0-preview2`, (**0.16**).\r\n\r\nWe should move the ImageClassification DNN to a stable package.\r\n\r\nOr we could also maintain the `Microsoft.ML.Dnn` package and simply change the version to 1.4. \r\n","Url":"https://github.com/dotnet/machinelearning/issues/4326","RelatedDescription":"Closed issue \"Move the Image Classification from the Experimental package (0.16) to a stable package heading to 1.4 GA\" (#4326)"},{"Id":"506060969","IsPullRequest":false,"CreatedAt":"2019-10-11T21:14:52","Actor":"CESARDELATORRE","Number":"4325","RawContent":null,"Title":"[Image Classification DNN based] Cannot use GPU with NuGet 0.16.0-preview2","State":"open","Body":"The NuGet package 'Microsoft.ML.Dnn 0.16.0-preview2' is including a dependency on the CPU-based `SciSharp.TensorFlow.Redist` package: \r\n\r\n![image](https://user-images.githubusercontent.com/1712635/66684962-1a93f400-ec30-11e9-96a2-fdb675fa9e20.png)\r\n\r\nTherefore the user cannot reference and use the `SciSharp.TensorFlow.Redist-Windows-GPU` package because the CPU version has preference, afaik.  \r\n\r\nThe NuGet package `Microsoft.ML.Dnn 0.16.0-preview2` must not reference any of those, so depending on what SciSharp TensorFlow redist (CPU vs. GPU) the user is referencing from his code, it'll use CPU or GPU.\r\n\r\nI know this is being fixed in the ML.NET source code repo with this PR after my heads-up:\r\nhttps://github.com/dotnet/machinelearning/pull/4324\r\n\r\n**But users mostly use the NuGet packages so we probably need to publish a new fix-patch-release for that package like the following?**:\r\n\r\n`Microsoft.ML.Dnn 0.16.1-preview2` ?\r\n\r\nAny other solution so users can try Image Classification with GPU when using the NuGet packages?","Url":"https://github.com/dotnet/machinelearning/issues/4325","RelatedDescription":"Open issue \"[Image Classification DNN based] Cannot use GPU with NuGet 0.16.0-preview2\" (#4325)"},{"Id":"505984007","IsPullRequest":true,"CreatedAt":"2019-10-11T17:59:39","Actor":"bpstark","Number":"4324","RawContent":null,"Title":"Fix nuget dependency for Dnn","State":"open","Body":"With change to allow users to support GPU, need to remove the dependency\r\non TF redist from nuget. It will now be up to the user to add a\r\ndependency on the correct nuget, such that they can choose to use either\r\nthe GPU or the CPU.","Url":"https://github.com/dotnet/machinelearning/pull/4324","RelatedDescription":"Open PR \"Fix nuget dependency for Dnn\" (#4324)"},{"Id":"503667463","IsPullRequest":true,"CreatedAt":"2019-10-10T22:53:46","Actor":"tannergooding","Number":"4308","RawContent":null,"Title":"Adding a LoadColumnNameAttribute","State":"closed","Body":"This resolves https://github.com/dotnet/machinelearning/issues/4195","Url":"https://github.com/dotnet/machinelearning/pull/4308","RelatedDescription":"Closed or merged PR \"Adding a LoadColumnNameAttribute\" (#4308)"},{"Id":"505538543","IsPullRequest":false,"CreatedAt":"2019-10-10T22:15:36","Actor":"eerhardt","Number":"4323","RawContent":null,"Title":"Move DatabaseLoader from the Experimental package","State":"open","Body":"We want to mark the DatabaseLoader as a \"stable API\" when we ship 1.4. However, it is currently in the Experimental package, which will never be marked as stable.\r\n\r\nWe should move the DatabaseLoader to a stable package.\r\n\r\nIf I get a vote, my vote would be to add it to the core `Microsoft.ML` package, next to TextLoader. DatabaseLoader adds no extra dependencies, so I think it is completely fine to add it to the `Microsoft.ML` package.","Url":"https://github.com/dotnet/machinelearning/issues/4323","RelatedDescription":"Open issue \"Move DatabaseLoader from the Experimental package\" (#4323)"},{"Id":"505475143","IsPullRequest":false,"CreatedAt":"2019-10-10T19:49:31","Actor":"hobbsa","Number":"4322","RawContent":null,"Title":"LDA Get Words for Topics","State":"open","Body":"### System information\r\n\r\n- **Win10\r\n- **.NET 4.7.2\r\n- **ML.NET 1.3.1\r\n\r\nI am trying to get the top N words for each topic after an LDA Transform but cannot seem to figure out how to do.  I've used Infer.Net and it returns the topics and top 20 words, is there a way to do it in ML.NET using the LDA Xform?  I've used relfection to look through almost everything in the xformer but cannot seem to find anything that would work?\r\n\r\nThe goal is to use the top N words to label a topic for display and to further determine if we need more/less topics based on repeating words.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4322","RelatedDescription":"Open issue \"LDA Get Words for Topics\" (#4322)"},{"Id":"504922836","IsPullRequest":true,"CreatedAt":"2019-10-09T22:11:08","Actor":"antoniovs1029","Number":"4321","RawContent":null,"Title":"WIP Addresses #4226 . Fixes problem when loading NormalizerTransformer from disk.","State":"open","Body":"Addresses and actually solves issue #4226 by fixing [the problem with loading a NormalizerTransformer from disk](https://github.com/dotnet/machinelearning/issues/4226#issuecomment-532902543), where the NormalizerTransformer is supposed to work with multidimensional vectors as input.\r\n\r\nAlthough this PR actually fixes that issue, another problem [is described in one comment](https://github.com/dotnet/machinelearning/issues/4226#issuecomment-533772062) of the issue. This other problem is related to Resnet18, and is independent of the problem here fixed. Solving any of these two problems actually solve this issue, but perhaps the issue shall remain open until both problems are fixed.\r\n\r\n### The solution\r\n- I changed the way NormalizerTransformers are saved and loaded, so that it included the information of the dimensions of the vector it has as input. This changes maintain backward compatibility in that it is still possible to load models that were saved with previous binary format . But notice that the original problem described in the issue will persist for models that were saved before the changes made in this PR... it would be necessary to save the model with the updated save method in order to avoid that specific problem when working with multidimensional vectors.\r\n\r\n- I added a test case that would fail without the changes added in this PR.","Url":"https://github.com/dotnet/machinelearning/pull/4321","RelatedDescription":"Open PR \"WIP Addresses #4226 . Fixes problem when loading NormalizerTransformer from disk.\" (#4321)"},{"Id":"504337044","IsPullRequest":true,"CreatedAt":"2019-10-09T21:07:31","Actor":"codemzs","Number":"4315","RawContent":null,"Title":"Release notes for 1.4.0-preview2 and 0.16.0-preview2.","State":"closed","Body":"We have released 1.4.0-preview2 and 0.16.0-preview2 versions of our nugets on nuget.org. These are the release notes.\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4315","RelatedDescription":"Closed or merged PR \"Release notes for 1.4.0-preview2 and 0.16.0-preview2.\" (#4315)"},{"Id":"503268888","IsPullRequest":false,"CreatedAt":"2019-10-09T16:56:56","Actor":"nighotatul","Number":"4303","RawContent":null,"Title":"why binning is importance in binary classification?","State":"closed","Body":"@eerhardt - when i have studied binning is one of the method to represent numeric data into the group of data.as per studied which numeric column have unique value that data taken into binning as consider.\r\nif this true then unique value is more then that numeric column does not consider as binning process.\r\nconsider heart attack prediction(for data:https://towardsdatascience.com/heart-disease-prediction-73468d630cfc)\r\nin that we calculate binning for age but we cannot calculate for Resting Blood Pressure\r\nhow we calculate number bins in numeric column and which numeric column has been consider for binning process?","Url":"https://github.com/dotnet/machinelearning/issues/4303","RelatedDescription":"Closed issue \"why binning is importance in binary classification?\" (#4303)"},{"Id":"504149555","IsPullRequest":false,"CreatedAt":"2019-10-09T16:43:57","Actor":"deiruch","Number":"4311","RawContent":null,"Title":"Documentation should state the default values","State":"closed","Body":"Knowing the default value of this option would be nice.\n\n---\n#### Document Details\n\n⚠ *Do not edit this section. It is required for docs.microsoft.com ➟ GitHub issue linking.*\n\n* ID: 68ab420f-a92f-61a5-6457-4434ec28fa31\n* Version Independent ID: c03e6492-9c30-c2bd-0014-7b9ab590864f\n* Content: [MatrixFactorizationTrainer.Options.ApproximationRank Field (Microsoft.ML.Trainers)](https://docs.microsoft.com/en-us/dotnet/api/microsoft.ml.trainers.matrixfactorizationtrainer.options.approximationrank?view=ml-dotnet-preview#feedback)\n* Content Source: [dotnet/xml/Microsoft.ML.Trainers/MatrixFactorizationTrainer+Options.xml](https://github.com/dotnet/ml-api-docs/blob/live/dotnet/xml/Microsoft.ML.Trainers/MatrixFactorizationTrainer+Options.xml)\n* Product: **dotnet-ml-api**\n* GitHub Login: @sfilipi\n* Microsoft Alias: **johalex**","Url":"https://github.com/dotnet/machinelearning/issues/4311","RelatedDescription":"Closed issue \"Documentation should state the default values\" (#4311)"},{"Id":"504697947","IsPullRequest":false,"CreatedAt":"2019-10-09T16:39:31","Actor":"fradav","Number":"4318","RawContent":null,"Title":"Interop with C++ (from/to)","State":"closed","Body":"### System information\r\n\r\n- **OS version/distro**:\r\nNot relevant\r\n- **.NET Version (eg., dotnet --info)**: \r\n.core 3.0\r\n\r\n### Issue\r\n\r\nIs there a way to interop from plain C++ with ml.net ? There is a lot of very useful ideas in ml.net (like DataView) and it would make sense to use them in a C++ project for example.  I know there is P/Invoke, but perhaps could we use a more streamlined way?","Url":"https://github.com/dotnet/machinelearning/issues/4318","RelatedDescription":"Closed issue \"Interop with C++ (from/to)\" (#4318)"},{"Id":"504747488","IsPullRequest":false,"CreatedAt":"2019-10-09T16:30:28","Actor":"luisquintanilla","Number":"4319","RawContent":null,"Title":"[Image Classification API] Schema mismatch when loading images using file paths","State":"closed","Body":"### System information\r\n\r\n- **OS version/distro**: Windows 10 \r\n- **.NET Version (eg., dotnet --info)**:  .NET Core 2.2\r\n\r\n### Issue\r\n\r\n- **What did you do?**\r\n\r\nUpdated from Microsoft.ML 1.4.0-preview to 1.4.0-preview2. Using code that worked, I ran into an issue when loading images.\r\n\r\n- **What happened?**\r\n\r\nAn ArgumentOutOfRangeException was thrown due to a schema mismatch.\r\n\r\n```text\r\nSystem.ArgumentOutOfRangeException: 'Schema mismatch for input column 'ImagePath': expected Vector<Byte>, got String\r\nParameter name: inputSchema'\r\n```\r\n\r\n- **What did you expect?**\r\n\r\nThe model to train.\r\n\r\n### Source code / logs\r\n\r\n\r\nRepo with source code : https://github.com/luisquintanilla/DeppLearning_ImageClassification_API\r\n\r\nThis repo uses 1.4.0-preview and works in training a model. If the same code is used with 1.4.0-preview2, the error mentioned in this issue occurs.","Url":"https://github.com/dotnet/machinelearning/issues/4319","RelatedDescription":"Closed issue \"[Image Classification API] Schema mismatch when loading images using file paths\" (#4319)"},{"Id":"504753469","IsPullRequest":false,"CreatedAt":"2019-10-09T16:14:48","Actor":"AceHack","Number":"4320","RawContent":null,"Title":"Export to ONNX","State":"open","Body":"What is the state of exporting to ONNX, I noticed it's missing from the latest documentation and only in the 0.15 docs.  Is it still supported?\r\n\r\nThanks.","Url":"https://github.com/dotnet/machinelearning/issues/4320","RelatedDescription":"Open issue \"Export to ONNX\" (#4320)"},{"Id":"504564460","IsPullRequest":false,"CreatedAt":"2019-10-09T10:39:11","Actor":"nighotatul","Number":"4317","RawContent":null,"Title":"how we can get number of row processed on each node to calculate score each node in decision tree for fasttree trainer?","State":"open","Body":"@yaeldekel - how we can get number of row processed on each node \r\nto calculate score each node in decision tree for fasttree trainer?\r\nexample:- root node(5000 row processed) then splitting left child (3000 row processed)\r\n and right child(2000 row processed)  again splitting on left child one have leaf node and second node have decision node(1000 row processed) to split again.\r\nso that how we get how many row has been processed to each node?\r\n                                                    ","Url":"https://github.com/dotnet/machinelearning/issues/4317","RelatedDescription":"Open issue \"how we can get number of row processed on each node to calculate score each node in decision tree for fasttree trainer?\" (#4317)"},{"Id":"504360827","IsPullRequest":false,"CreatedAt":"2019-10-09T01:38:43","Actor":"AceHack","Number":"4316","RawContent":null,"Title":"AutoTrain issues on Mac","State":"open","Body":"When running auto-train I get errors like the following:\r\n\r\nI'm wondering how I can fix these errors.  Thanks.\r\n\r\n`\r\nmlnet auto-train --task binary-classification --dataset ./training_data_v2.csv --label-column-name Class --max-exploration-time 3600 --verbosity=diag --has-header true --name Model\r\n`\r\n\r\nSystem.DllNotFoundException: Unable to load shared library 'lib_lightgbm' or one of its dependencies. In order to help diagnose loading problems, consider setting the DYLD_PRINT_LIBRARIES environment variable: dlopen(liblib_lightgbm, 1): image not found\r\n   at Microsoft.ML.Trainers.LightGbm.WrappedLightGbmInterface.DatasetCreateFromSampledColumn(IntPtr sampleValuePerColumn, IntPtr sampleIndicesPerColumn, Int32 numCol, Int32[] sampleNonZeroCntPerColumn, Int32 numSampleRow, Int32 numTotalRow, String parameters, IntPtr& ret)\r\n   at Microsoft.ML.Trainers.LightGbm.Dataset..ctor(Double[][] sampleValuePerColumn, Int32[][] sampleIndicesPerColumn, Int32 numCol, Int32[] sampleNonZeroCntPerColumn, Int32 numSampleRow, Int32 numTotalRow, String param, Single[] labels, Single[] weights, Int32[] groups)\r\n   at Microsoft.ML.Trainers.LightGbm.LightGbmTrainerBase`4.CreateDatasetFromSamplingData(IChannel ch, Factory factory, Int32 numRow, String param, Single[] labels, Single[] weights, Int32[] groups, CategoricalMetaData catMetaData, Dataset& dataset)\r\n   at Microsoft.ML.Trainers.LightGbm.LightGbmTrainerBase`4.LoadTrainingData(IChannel ch, RoleMappedData trainData, CategoricalMetaData& catMetaData)\r\n   at Microsoft.ML.Trainers.LightGbm.LightGbmTrainerBase`4.TrainModelCore(TrainContext context)\r\n   at Microsoft.ML.Trainers.TrainerEstimatorBase`2.TrainTransformer(IDataView trainSet, IDataView validationSet, IPredictor initPredictor)\r\n   at Microsoft.ML.Data.EstimatorChain`1.Fit(IDataView input)\r\n   at Microsoft.ML.AutoML.RunnerUtil.TrainAndScorePipeline[TMetrics](MLContext context, SuggestedPipeline pipeline, IDataView trainData, IDataView validData, String labelColumn, IMetricsAgent`1 metricsAgent, ITransformer preprocessorTransform, FileInfo modelFileInfo, DataViewSchema modelInputSchema, AutoMLLogger logger)\r\n[Source=AutoML, Kind=Trace] Evaluating pipeline xf=TextFeaturizing{ col=Title_tf:Title} xf=ColumnCopying{ col=Features:Title_tf} xf=Normalizing{ col=Features:Features} tr=SymbolicSgdLogisticRegressionBinary{}  cache=+\r\n[Source=AutoML, Kind=Error] Pipeline crashed: xf=TextFeaturizing{ col=Title_tf:Title} xf=ColumnCopying{ col=Features:Title_tf} xf=Normalizing{ col=Features:Features} tr=SymbolicSgdLogisticRegressionBinary{}  cache=+ . Exception: System.TypeInitializationException: The type initializer for 'Native' threw an exception. ---> System.DllNotFoundException: Unable to load shared library 'MklImports' or one of its dependencies. In order to help diagnose loading problems, consider setting the DYLD_PRINT_LIBRARIES environment variable: dlopen(libMklImports, 1): image not found\r\n   at Microsoft.ML.Trainers.SymbolicSgdLogisticRegressionBinaryTrainer.Native.ErrorMessage(Int32 status)\r\n   at Microsoft.ML.Trainers.SymbolicSgdLogisticRegressionBinaryTrainer.Native..cctor()\r\n   --- End of inner exception stack trace ---\r\n   at Microsoft.ML.Trainers.SymbolicSgdLogisticRegressionBinaryTrainer.Native.LearnAll(InputDataManager inputDataManager, Boolean tuneLR, Single& lr, Single l2Const, Single piw, Span`1 weightVector, Single& bias, Int32 numFeatres, Int32 numPasses, Int32 numThreads, Boolean tuneNumLocIter, Int32& numLocIter, Single tolerance, Boolean needShuffle, Boolean shouldInitialize, GCHandle stateGCHandle, ChannelCallBack info)\r\n   at Microsoft.ML.Trainers.SymbolicSgdLogisticRegressionBinaryTrainer.TrainCore(IChannel ch, RoleMappedData data, LinearModelParameters predictor, Int32 weightSetCount)\r\n   at Microsoft.ML.Trainers.SymbolicSgdLogisticRegressionBinaryTrainer.TrainModelCore(TrainContext context)\r\n   at Microsoft.ML.Trainers.TrainerEstimatorBase`2.TrainTransformer(IDataView trainSet, IDataView validationSet, IPredictor initPredictor)\r\n   at Microsoft.ML.Data.EstimatorChain`1.Fit(IDataView input)\r\n   at Microsoft.ML.AutoML.RunnerUtil.TrainAndScorePipeline[TMetrics](MLContext context, SuggestedPipeline pipeline, IDataView trainData, IDataView validData, String labelColumn, IMetricsAgent`1 metricsAgent, ITransformer preprocessorTransform, FileInfo modelFileInfo, DataViewSchema modelInputSchema, AutoMLLogger logger)\r\n[Source=AutoML, Kind=Trace] 4\tNaN\t00:00:06.7512942\txf=TextFeaturizing{ col=Title_tf:Title} xf=ColumnCopying{ col=Features:Title_tf} xf=Normalizing{ col=Features:Features} tr=SymbolicSgdLogisticRegressionBinary{}  cache=+\r\n|4    SymbolicSgdLogisticRegressionBinary       NaN      NaN      NaN       NaN       6.8          0             |\r\nSystem.TypeInitializationException: The type initializer for 'Native' threw an exception. ---> System.DllNotFoundException: Unable to load shared library 'MklImports' or one of its dependencies. In order to help diagnose loading problems, consider setting the DYLD_PRINT_LIBRARIES environment variable: dlopen(libMklImports, 1): image not found\r\n   at Microsoft.ML.Trainers.SymbolicSgdLogisticRegressionBinaryTrainer.Native.ErrorMessage(Int32 status)\r\n   at Microsoft.ML.Trainers.SymbolicSgdLogisticRegressionBinaryTrainer.Native..cctor()\r\n   --- End of inner exception stack trace ---\r\n   at Microsoft.ML.Trainers.SymbolicSgdLogisticRegressionBinaryTrainer.Native.LearnAll(InputDataManager inputDataManager, Boolean tuneLR, Single& lr, Single l2Const, Single piw, Span`1 weightVector, Single& bias, Int32 numFeatres, Int32 numPasses, Int32 numThreads, Boolean tuneNumLocIter, Int32& numLocIter, Single tolerance, Boolean needShuffle, Boolean shouldInitialize, GCHandle stateGCHandle, ChannelCallBack info)\r\n   at Microsoft.ML.Trainers.SymbolicSgdLogisticRegressionBinaryTrainer.TrainCore(IChannel ch, RoleMappedData data, LinearModelParameters predictor, Int32 weightSetCount)\r\n   at Microsoft.ML.Trainers.SymbolicSgdLogisticRegressionBinaryTrainer.TrainModelCore(TrainContext context)\r\n   at Microsoft.ML.Trainers.TrainerEstimatorBase`2.TrainTransformer(IDataView trainSet, IDataView validationSet, IPredictor initPredictor)\r\n   at Microsoft.ML.Data.EstimatorChain`1.Fit(IDataView input)\r\n   at Microsoft.ML.AutoML.RunnerUtil.TrainAndScorePipeline[TMetrics](MLContext context, SuggestedPipeline pipeline, IDataView trainData, IDataView validData, String labelColumn, IMetricsAgent`1 metricsAgent, ITransformer preprocessorTransform, FileInfo modelFileInfo, DataViewSchema modelInputSchema, AutoMLLogger logger)\r\n[Source=AutoML, Kind=Trace] Evaluating pipeline xf=TextFeaturizing{ col=Title_tf:Title} xf=ColumnCopying{ col=Features:Title_tf} xf=Normalizing{ col=Features:Features} tr=LinearSvmBinary{}  cache=+\r\n[Source=AutoML, Kind=Trace] 5\t0.999542783117267\t00:00:10.1887405\txf=TextFeaturizing{ col=Title_tf:Title} xf=ColumnCopying{ col=Features:Title_tf} xf=Normalizing{ col=Features:Features} tr=LinearSvmBinary{}  cache=+\r\n|5    LinearSvmBinary                        0.9995   1.0000   1.0000    0.9997      10.2          0             |\r\n[Source=AutoML, Kind=Trace] Evaluating pipeline xf=TextFeaturizing{ col=Title_tf:Title} xf=ColumnCopying{ col=Features:Title_tf} tr=FastTreeBinary{}  cache=-","Url":"https://github.com/dotnet/machinelearning/issues/4316","RelatedDescription":"Open issue \"AutoTrain issues on Mac\" (#4316)"},{"Id":"504279746","IsPullRequest":true,"CreatedAt":"2019-10-08T21:06:16","Actor":"ashbhandare","Number":"4314","RawContent":null,"Title":"Add functionality for re-downloading incomplete pre-trained model files. Fixes #4234","State":"open","Body":"Previously, when the ImageClassification pipeline is run for the first time, the meta graph of the model (ResnetV2101 or InceptionV3) is downloaded, and in the subsequent runs, it is reused. If the run is interrupted while the download is in progress(eg.: by stopping), the protobuff is partially downloaded. This throws an error when this incomplete graph is attempted to be read in the subsequent runs.\r\n\r\nThis change checks if the current existing file size is the same as the size of the file to be downloaded, and re-downloads the said file if it isn't.\r\nWIP to get initial feedback and add any tests necessary.\r\n\r\nFixes #4234","Url":"https://github.com/dotnet/machinelearning/pull/4314","RelatedDescription":"Open PR \"Add functionality for re-downloading incomplete pre-trained model files. Fixes #4234\" (#4314)"},{"Id":"504207567","IsPullRequest":false,"CreatedAt":"2019-10-08T18:33:37","Actor":"CESARDELATORRE","Number":"4313","RawContent":null,"Title":"[LoadImages estimator] Set useImageType: false as by default value","State":"open","Body":"In the current preview, in the LoadImages estimator, the parameter useImageType is by default true meaning that it'd use ImageDataView type. false indicates we want the image as a VBuffer<byte>.\r\n\r\nSince the ImageClassification API needs the image as VBuffer<byte> (ImageDataView type is only used for other existing/older scenarios with transforms like resize image, extract pixels etc...) it makes sense to set the parameter useImageType to false as default (to use VBuffer<byte>). \r\n\r\nHowever, that change will be convenient for the new ImageClassification API but it would break older code using the LoadImages estimator. Right?\r\n\r\nWe might need to decide what scenarios we want to favor here for this default value...","Url":"https://github.com/dotnet/machinelearning/issues/4313","RelatedDescription":"Open issue \"[LoadImages estimator] Set useImageType: false as by default value\" (#4313)"},{"Id":"504200912","IsPullRequest":true,"CreatedAt":"2019-10-08T18:19:43","Actor":"harishsk","Number":"4312","RawContent":null,"Title":"Add Onnx export support for string processing transformers","State":"open","Body":"This draft PR adds support for exporting to Onnx, the following transformers. \r\n- NgramTransformer\r\n- ValueToKeyMappingTransformer (upgraded support)\r\n- WordTokenizingTransformer\r\n\r\nThis PR also upgrades the version of Google Protobuf library.\r\n\r\nThis work is not ready for merging because this work relies on a new version of the Onnx runtime due to be released later. I am submitting this PR for review now so that this can be merged soon after the release of the runtime. \r\n\r\nPlease review the changes so that I can iterate on the review comments now, before the public release of the ORT.","Url":"https://github.com/dotnet/machinelearning/pull/4312","RelatedDescription":"Open PR \"Add Onnx export support for string processing transformers\" (#4312)"},{"Id":"503765806","IsPullRequest":true,"CreatedAt":"2019-10-08T02:56:12","Actor":"codemzs","Number":"4310","RawContent":null,"Title":"Modify image classification sample to take in-memory image for prediction.","State":"closed","Body":"fixes #4153\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4310","RelatedDescription":"Closed or merged PR \"Modify image classification sample to take in-memory image for prediction.\" (#4310)"},{"Id":"503674384","IsPullRequest":false,"CreatedAt":"2019-10-07T20:30:55","Actor":"Lynx1820","Number":"4309","RawContent":null,"Title":"LightGBM Build Failure","State":"open","Body":"### Issue\r\nI tried adding a test case to test RankingEvaluator with Maml using the LightGBMRanking trainer. The testcase passed on my machine and other build configurations. However, it failed on those same configurations on the github build. The testcase was added in response to issue #4081. To unblock me, I used the FastRankRanking trainer instead, which does work as expected.   \r\n\r\n### Source code / logs\r\nThe test case I added looks like this\r\n```\r\n        public void EvaluateRankingWithMaml()\r\n        {\r\n            string _mslrWeb10k_Train = GetDataPath(TestDatasets.MSLRWeb.trainFilename);\r\n            string extraArgs = \" tr=LightGBMRanking\" +\r\n                \" eval=RankingEvaluator{t=10}\" +\r\n                \" k=2\";\r\n            string loaderArgs = \" loader=TextLoader{col=Label:R4:0 col=GroupId:TX:1 col=Features:R4:2-138 header=+}\" +\r\n                \" xf = HashTransform{col=GroupId}\" +\r\n                \" xf = NAHandleTransform{col=Features}\";\r\n            int digitsOfPrecision = 2;\r\n            TestCore(\"cv\", _mslrWeb10k_Train, loaderArgs, extraArgs, digitsOfPrecision);\r\n            Done();\r\n\r\n        }\r\n```\r\n\r\n","Url":"https://github.com/dotnet/machinelearning/issues/4309","RelatedDescription":"Open issue \"LightGBM Build Failure\" (#4309)"},{"Id":"503626428","IsPullRequest":false,"CreatedAt":"2019-10-07T18:49:45","Actor":"eerhardt","Number":"4307","RawContent":null,"Title":"DnnCatalog methods should use a public Options class","State":"open","Body":"The two methods in `DnnCatalog`:\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/c9f616fdc5a144250535949fc8c8f9c971cbab88/src/Microsoft.ML.Dnn/DnnCatalog.cs#L49-L63\r\n\r\nand\r\n\r\nhttps://github.com/dotnet/machinelearning/blob/c9f616fdc5a144250535949fc8c8f9c971cbab88/src/Microsoft.ML.Dnn/DnnCatalog.cs#L120-L143\r\n\r\nhave a lot of optional parameters, and users may get confused on which ones are important, and which aren't.\r\n\r\nI've seen comments from @terrajobst in the past saying:\r\n\r\n> In UX studies we have seen that many developers struggle with methods that have many optional arguments.\r\n\r\nIn ML.NET, the pattern we have established is that we have 2 overloads:\r\n\r\n1. An overload that takes the required parameters, and optionally the most important/common parameters to a method.\r\n2. An overload that takes an `Options` object, which contains all the options to the method - simple and advanced.\r\n\r\nWe should follow this pattern with these DNN APIs as well. See the discussions and related PRs to https://github.com/dotnet/machinelearning/issues/1798.\r\n\r\n/cc @ebarsoumMS @codemzs ","Url":"https://github.com/dotnet/machinelearning/issues/4307","RelatedDescription":"Open issue \"DnnCatalog methods should use a public Options class\" (#4307)"},{"Id":"503626211","IsPullRequest":true,"CreatedAt":"2019-10-07T18:49:17","Actor":"antoniovs1029","Number":"4306","RawContent":null,"Title":"(WIP) Fixes #4292 about using PFI with BPT and CMPB","State":"open","Body":"Fixes #4292 about using PFI with a `BinaryPredictionTransformer<>` and `CalibratedModelParametersBase<>`.\r\n\r\nThis is a draft, so more tests need to be added, and some comments might need to be removed. I will do that if this approach of solution is approved.\r\n\r\n### Approach of the solution\r\nRegarding the 3 problems listed in #4292 the solutions were the following:\r\n1. **To call the correct 'create' method**: I created a static non-generic class for `ParameterMixingCalibratedModelParameters` whose create method would call the create method of the generic `PMCMP<>` when loading a `PMCMP<>`.\r\n2. **To create a `PMCMP` object with the correct parameter types**: I used a similar approach as the one explained in my previous pull request #4262. Here the calibrator and submodel of the `PMCMP<>` are loaded first, and then they are used to create a generic type at runtime for `PMCMP<>` but now using the correct parameter types.\r\n3. **To create a `BPT<CMPB<>>` object whereas a `PMCMP<>` was loaded**: After trying different approaches that didn't work, the best way I found to fix this was to add a field to `PMCMP<>` called  `LoadType`. I modified the create method of the prediction transformers so that when loading, for example, a `BPT<>`, it would look at the `LoadType` of the internal model and use that as the parameter type for the `BPT<>`. In this case, at runtime, `LoadType` would be `CMPB<>` with the correct type parameters for the calibrator and submodel, and so the BPT can be correctly loaded as a `BPT<CMPB<>>` instead of  `BPT<PMCMP<>>` (which is what happens if only problems 1) and 2) are addressed). If the internal model doesn't have a field called `LoadType` then this is pretty much ignored, and the behavior is the same as before.\r\n\r\nIf there's a better way to solve problem 3) I will be very happy to hear it.\r\n\r\n### Changes implemented\r\n* Changes in `PredictionTransformer.cs` and `Calibrator.cs` to implement the approach previously described\r\n* Added a working sample for using PFI with BPT and CMPB while loading a model from disk. This is based entirely in the original sample.\r\n* Changed a couple of tests in `LbfgsTests.cs` that failed because they used casts that now return 'null'. Notice that those casts involved using classes such as `IPredictorProducing ` and `PMCMP `which are internal classes, so a regular user wouldn't have been able to use those casts. They have now been replaced with casts to `BPT<CMPB<>>` and `CMPB<>` using the correct type parameters of the model.","Url":"https://github.com/dotnet/machinelearning/pull/4306","RelatedDescription":"Open PR \"(WIP) Fixes #4292 about using PFI with BPT and CMPB\" (#4306)"},{"Id":"503613368","IsPullRequest":false,"CreatedAt":"2019-10-07T18:21:48","Actor":"eerhardt","Number":"4305","RawContent":null,"Title":"ML.TensorFlow has a dependency on ML.Dnn","State":"open","Body":"I don't think the dependency from `ML.TensorFlow` to `ML.Dnn` is correct. My understanding of `ML.Dnn` is that it is a higher-level abstraction for deep neural networks, of which TensorFlow is the first one we are using. However, in the future, we may want to add more neural network libraries to `ML.Dnn` - for example, PyTorch. If that ever happens, now the `ML.TensorFlow` library will also be dependent on PyTorch, since it will have a transitive reference from `ML.Dnn` to PyTorch.\r\n\r\nWe should rethink the dependency structure here. If the only reason `ML.TensorFlow` has a dependency on `ML.Dnn` is for sharing internal code, we should come up with a different code sharing mechanism. For example, the way we solve this in dotnet/corefx is we use share the same source code, and compile it directly into multiple assemblies using source links in the .csprojs.","Url":"https://github.com/dotnet/machinelearning/issues/4305","RelatedDescription":"Open issue \"ML.TensorFlow has a dependency on ML.Dnn\" (#4305)"},{"Id":"503275449","IsPullRequest":false,"CreatedAt":"2019-10-07T07:22:48","Actor":"nighotatul","Number":"4304","RawContent":null,"Title":"how we visualize output for ranking?","State":"open","Body":"@eerhardt - how we visualize output for ranking?\r\ni.e. charts or heatmap and how?","Url":"https://github.com/dotnet/machinelearning/issues/4304","RelatedDescription":"Open issue \"how we visualize output for ranking?\" (#4304)"},{"Id":"503263900","IsPullRequest":false,"CreatedAt":"2019-10-07T06:51:17","Actor":"nighotatul","Number":"4302","RawContent":null,"Title":"how we visualize credit card fraud detection using anomaly detection trainer(PCA)?","State":"open","Body":"@eerhardt - how we represent best way credit card detection using anomaly detection method\r\ni.e. grid or charts.\r\nif grid then which column we added in that grid-\r\nexample-time,V1-V28,amount,probability,score as column\r\n\r\nand if charts then which column we take to draw the charts for x-axis and y-axis taken.\r\n\r\nplease helps us.","Url":"https://github.com/dotnet/machinelearning/issues/4302","RelatedDescription":"Open issue \"how we visualize credit card fraud detection using anomaly detection trainer(PCA)?\" (#4302)"},{"Id":"503034214","IsPullRequest":true,"CreatedAt":"2019-10-06T00:36:44","Actor":"codemzs","Number":"4301","RawContent":null,"Title":"[DO NOT REVIEW][TEMPORARY]","State":"open","Body":"DO NOT REVIEW, JUST A PR TO CREATE ANOTHER PR. WILL CLOSE SOON.","Url":"https://github.com/dotnet/machinelearning/pull/4301","RelatedDescription":"Open PR \"[DO NOT REVIEW][TEMPORARY]\" (#4301)"},{"Id":"502871807","IsPullRequest":true,"CreatedAt":"2019-10-05T00:57:05","Actor":"harshithapv","Number":"4298","RawContent":null,"Title":"Fixed documentation for ImageClassificationMetricsCallback to resolve the confusion in issue #4259","State":"closed","Body":"Fixed documentation for ImageClassificationMetricsCallback function to resolve the confusion in issue #4259\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4298","RelatedDescription":"Closed or merged PR \"Fixed documentation for ImageClassificationMetricsCallback to resolve the confusion in issue #4259\" (#4298)"},{"Id":"502863179","IsPullRequest":true,"CreatedAt":"2019-10-04T23:40:12","Actor":"frank-dong-ms","Number":"4297","RawContent":null,"Title":"Issue 4120","State":"closed","Body":"Follow up on Issue #4120 \r\n\r\n1. Use EditorBrowsable attribute to hide the default constructor from intellisense.\r\n2. Use Obsolete(\"XX\", false) instead of Obsolete(\"XX\", true) to be safe.\r\n","Url":"https://github.com/dotnet/machinelearning/pull/4297","RelatedDescription":"Closed or merged PR \"Issue 4120\" (#4297)"},{"Id":"502878212","IsPullRequest":true,"CreatedAt":"2019-10-04T23:06:34","Actor":"antoniovs1029","Number":"4300","RawContent":null,"Title":"Fixes #4299 related to ML.Samples and ML.Samples.GPU sharing the same Program.cs file","State":"open","Body":"A simple change to fix #4299 . Simply added a new Program.cs file to the ML.Samples.GPU, independent of the one in ML.Samples.","Url":"https://github.com/dotnet/machinelearning/pull/4300","RelatedDescription":"Open PR \"Fixes #4299 related to ML.Samples and ML.Samples.GPU sharing the same Program.cs file\" (#4300)"},{"Id":"502875147","IsPullRequest":false,"CreatedAt":"2019-10-04T22:52:37","Actor":"antoniovs1029","Number":"4299","RawContent":null,"Title":"Problems caused by ML.Samples and ML.Samples.GPU sharing the same Program.cs file","State":"open","Body":"### Issue\r\n\r\n**What did you do?**: I modified the Program.cs file in the ML.Samples project to run a sample that exists in the Samples.Dynamic.Trainers.Regression namespace.\r\n\r\n**What happened?**:\r\nSince ML.Samples and ML.Samples.GPU share the same Program.cs file, my changes in the Program.cs under ML.Samples had effects on the ML.Samples.GPU project.\r\n\r\nAn error appeared in the Program.cs file inside the ML.Samples.GPU project saying that the namespace Samples.Dynamic didn't have a name 'Trainers' and that I might have been missing an assembly reference. Also, while editing the Program.cs inside ML.Samples I received warning tooltips making reference to the errors in ML.Samples.GPU's Program.cs.\r\n\r\nAlthough this didn't prevent me to run the sample, it was odd to see that error messages. Also, later, when trying to run tests inside Visual Studio, I got a compiler errors because of this, and I couldn't run tests. I didn't use to have these compiler errors before, because ML.Samples.GPU was introduced in a recent commit to the master branch.\r\n\r\n**How to solve the problem?**\r\nEventhough ML.Samples has the correct settings to access the sample I was trying to run, ML.Samples.GPU doesn't. This problem might happen with other samples as well.\r\n\r\nSo to simply solve this problem, a new Program.cs file needs to be added to the ML.Samples.GPU project, that is independent to the one in ML.Samples.","Url":"https://github.com/dotnet/machinelearning/issues/4299","RelatedDescription":"Open issue \"Problems caused by ML.Samples and ML.Samples.GPU sharing the same Program.cs file\" (#4299)"}],"ResultType":"GitHubIssue"}},"RunOn":"2019-10-12T05:30:37.7215767Z","RunDurationInMilliseconds":683}