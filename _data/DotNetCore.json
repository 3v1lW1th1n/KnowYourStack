{"Data":{"Blog":{"FeedItems":[{"Title":"Announcing the .NET Framework 4.7.2","PublishedOn":"2018-04-30T20:56:19+00:00","CommentsCount":42,"FacebookCount":0,"Summary":"Today, we are happy to announce the release of the .NET Framework 4.7.2. It’s included in the Windows 10 April 2018 Update. .NET Framework 4.7.2 is also available on Windows 7+ and Windows Server 2008...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/30/announcing-the-net-framework-4-7-2/","RawContent":null},{"Title":"Help us plan the future of .NET!","PublishedOn":"2018-04-20T16:55:37+00:00","CommentsCount":74,"FacebookCount":0,"Summary":"We’re currently planning our next major .NET releases and would love to hear your feedback on how you interact with .NET Framework and .NET Core today. Please fill out the survey below and help shape...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/20/help-us-plan-the-future-of-net/","RawContent":null},{"Title":"Performance Improvements in .NET Core 2.1","PublishedOn":"2018-04-18T19:29:45+00:00","CommentsCount":48,"FacebookCount":0,"Summary":"Back before .NET Core 2.0 shipped, I wrote a post highlighting various performance improvements in .NET Core 2.0 when compared with .NET Core 1.1 and the .NET Framework. As .NET Core 2.1 is in its...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/18/performance-improvements-in-net-core-2-1/","RawContent":null},{"Title":".NET Highlights in Visual Studio 2017 version 15.7 Preview 4","PublishedOn":"2018-04-18T19:00:00+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"As you know we continue to incrementally improve Visual Studio 2017 (version 15), and our 7th significant update is currently well under way with the 4th preview shipping today. As we’re winding down...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/18/visual-studio-2017-15-7-preview-4/","RawContent":null},{"Title":".NET Core April 2018 Update","PublishedOn":"2018-04-17T23:50:13+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core April 2018 Update. This update includes .NET Core 1.0.11, 1.1.8 and 2.0.7. There are no new security fixes in this update. See April 2018 .NET Updates for other...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/17/net-core-april-2018-update/","RawContent":null},{"Title":"Announcing Entity Framework Core 2.1 Preview 2","PublishedOn":"2018-04-11T18:02:40+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"Today we’re releasing the second preview of EF Core 2.1, alongside .NET Core 2.1 Preview 2 and ASP.NET Core 2.1 Preview 2. Thank you so much to everyone who has tried our early builds and has helped...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/11/announcing-entity-framework-core-2-1-preview-2/","RawContent":null},{"Title":"Announcing .NET Core 2.1 Preview 2","PublishedOn":"2018-04-11T17:53:44+00:00","CommentsCount":41,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 2.1 Preview 2. The release is now ready for broad testing, as we get closer to a final build within the next two to three months. We&#8217;d appreciate any feedback...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/11/announcing-net-core-2-1-preview-2/","RawContent":null},{"Title":"Explore Azure Cosmos DB with .NET Core and MongoDB","PublishedOn":"2018-04-09T16:00:47+00:00","CommentsCount":9,"FacebookCount":0,"Summary":"Have you had to design general purpose &#8220;metadata&#8221; tables in your SQL database that basically store column names and values? Do you often serialize/de-serialize XML or JSON from your SQL...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/04/09/explore-cosmosdb-with-net-core-and-mongodb/","RawContent":null},{"Title":"Calling all Desktop Developers: how should UI development be improved?","PublishedOn":"2018-03-23T18:01:31+00:00","CommentsCount":66,"FacebookCount":0,"Summary":"The user interface (UI) of any application is critical in making your app convenient and efficient for the folks using it. When developing applications for Enterprise use, a good UI can shave time off...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/03/23/calling-all-desktop-developers-how-should-ui-development-be-improved/","RawContent":null},{"Title":".NET Framework 4.7.2 Developer Pack Early Access build 3056 is available!","PublishedOn":"2018-03-08T23:22:13+00:00","CommentsCount":4,"FacebookCount":0,"Summary":"Today, we are happy to share an Early Access build with the .NET Framework 4.7.2 Developer Pack. The .NET Framework 4.7.2 Developer Pack lets developers build applications that target the .NET...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/03/08/net-framework-4-7-2-developer-pack-early-access-build-3056-is-available/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7559882384","Type":"PullRequestEvent","CreatedAt":"2018-04-20T06:42:59","Actor":"Cheesebaron","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/100","RelatedDescription":"Opened pull request \"Create mvvmcross.md\" (#100) at dotnet/home","RelatedBody":"Added MvvmCross as project"},{"Id":"7452103949","Type":"PullRequestEvent","CreatedAt":"2018-03-29T07:03:03","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/97","RelatedDescription":"Merged pull request \"update CLA PDF link\" (#97) at dotnet/home","RelatedBody":""},{"Id":"7419410563","Type":"IssuesEvent","CreatedAt":"2018-03-22T14:02:36","Actor":"vvavrychuk","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/99","RelatedDescription":"Opened issue \"not working \"Linux Distribution\" dropdown on http://www.microsoft.com/net/learn/get-started/linux \" (#99) at dotnet/home","RelatedBody":"On the page http://www.microsoft.com/net/learn/get-started/linux dropdown \"Linux Distribution\" has no effect on the installation instruction next to him (they are always displayed for RedHat).\r\n\r\n![screenshot from 2018-03-22 16-02-19](https://user-images.githubusercontent.com/152563/37775020-6ec5778e-2dea-11e8-9ea3-b33e26c1c4e1.png)\r\n"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7619224203","Type":"IssuesEvent","CreatedAt":"2018-05-02T20:28:55","Actor":"MichaelSimons","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/65","RelatedDescription":"Opened issue \".NET Framework Runtime and Builder Docker repos have merged \" (#65) at dotnet/announcements","RelatedBody":"# .NET Framework Runtime and Builder Docker repos have merged\r\n\r\nThe [microsoft/dotnet-framework-build](https://hub.docker.com/r/microsoft/dotnet-framework-build/) Docker Hub repo has been merged into the [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) Docker Hub repo.  All new tags going forward will only be pushed to [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/).  The images in the [microsoft/dotnet-framework-build](https://hub.docker.com/r/microsoft/dotnet-framework-build/) Docker Hub repo will be retained and serviced accordingly as to not affect existing usage.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [Microsoft/dotnet-framework-docker #125](https://github.com/Microsoft/dotnet-framework-docker/issues/125)\r\n\r\n## Details\r\n\r\nThe [microsoft/dotnet-framework-build](https://hub.docker.com/r/microsoft/dotnet-framework-build/) Docker Hub repo has been merged into the [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) Docker Hub repo.\r\n\r\n* https://github.com/Microsoft/dotnet-framework-docker/pull/123\r\n* https://github.com/Microsoft/dotnet-framework-docker/issues/78\r\n\r\nIn order to differentiate the runtime and build images, `runtime` and `sdk` distinguishing identifiers have been added to the tags.  For example, `4.7.2-runtime` and `4.7.2-sdk`.\r\n\r\nAll new tags going forward will only be pushed to [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/).   For example, the build images for 4.7.2 which was released today, only exist in [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) repo.\r\n\r\nThe existing tags in [microsoft/dotnet-framework-build](https://hub.docker.com/r/microsoft/dotnet-framework-build/) will remain and be serviced accordingly.  For example, the stable tags such as `4.7.1-windowsservercore-1709` will continue to be patched on a monthly basis.\r\n\r\nWe recommend that as you create and maintain your code, you move to use the new `runtime` and `sdk` images from the [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) repo.\r\n"},{"Id":"7545995438","Type":"IssuesEvent","CreatedAt":"2018-04-18T00:20:14","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/64","RelatedDescription":"Opened issue \"April 2018 .NET Updates\" (#64) at dotnet/announcements","RelatedBody":"# April 2018 .NET Updates\r\n\r\nThe following .NET updates were released this month. This issue will be updated if there are any additional updates during the month.\r\n\r\n## .NET Framework\r\n\r\n* No new releases. See: [.NET Framework February 2018 Security and Quality Rollup](https://blogs.msdn.microsoft.com/dotnet/2018/02/13/net-framework-february-2018-security-and-quality-rollup/).\r\n* [microsoft/dotnet-framework](https://hub.docker.com/r/microsoft/dotnet-framework/) and related Docker images were updated for [KB4093112](https://support.microsoft.com/help/4093112) and associated updates.\r\n\r\n## .NET Core\r\n\r\n* [.NET Core April 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/04/17/net-core-april-2018-update/)\r\n   * [2.0.7 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/2.0/2.0.7.md)\r\n   * [1.1.8 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.8.md)\r\n   * [1.0.11 Release Notes](https://github.com/dotnet/core/blob/master/release-notes/1.0/1.0.11.md)\r\n* [.NET Core 2.1 Preview 2](https://blogs.msdn.microsoft.com/dotnet/2018/04/11/announcing-net-core-2-1-preview-2/)\r\n* [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) and related Docker images were updated for [KB4093112](https://support.microsoft.com/help/4093112) and associated updates.\r\n* Latest .NET Core security release: [.NET Core March 2018 Update](https://github.com/dotnet/core/issues/1341)\r\n\r\n## .NET for UWP\r\n\r\n* No new releases. See: [.NET for UWP January 2018 Update](https://blogs.msdn.microsoft.com/dotnet/2018/01/09/net-for-uwp-january-2018-update/).\r\n\r\n## Previous Updates\r\n\r\n* [February 2018 Security and Quality Updates](https://github.com/dotnet/announcements/issues/59)"},{"Id":"7387413694","Type":"IssuesEvent","CreatedAt":"2018-03-15T21:18:32","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/announcements/issues/63","RelatedDescription":"Reopened issue \"Transport Layer Security (TLS) best practices with the .NET Framework article published\" (#63) at dotnet/announcements","RelatedBody":"# Transport Layer Security (TLS) best practices with the .NET Framework article published\r\n\r\nA new article was published that discusses the Transport Layer Security (TLS) best practices at https://docs.microsoft.com/dotnet/framework/network-programming/tls.\r\n\r\nTo ensure .NET Framework applications remain secure, the TLS version should **not** be hardcoded. .NET Framework applications should use the TLS version the operating system (OS) supports.\r\n\r\nThe (TLS) best practices article targets developers who are:\r\n* Directly using the System.Net APIs (for example, `System.Net.Http.HttpClient` and `System.Net.Security.SslStream`).\r\n* Directly using WCF clients and services using the `System.ServiceModel` namespace.\r\n* Using [Azure Cloud Services](https://azure.microsoft.com/services/cloud-services/) Web and Worker roles to host and run your application. See the [Azure Cloud Services](https://docs.microsoft.com/dotnet/framework/network-programming/tls#azure-cloud-services) section.\r\n\r\nThe article explains how to enable the strongest security available for the version of the .NET Framework that your app targets and runs on.\r\n\r\nThe section [Audit your code and make code changes](https://docs.microsoft.com/dotnet/framework/network-programming/tls#audit-your-code-and-make-code-changes) covers auditing and updating your code.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\ndotnet/docs#4675"},{"Id":"7387391842","Type":"IssuesEvent","CreatedAt":"2018-03-15T21:13:45","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/63","RelatedDescription":"Closed issue \"Transport Layer Security (TLS) best practices with the .NET Framework article published\" (#63) at dotnet/announcements","RelatedBody":"# Transport Layer Security (TLS) best practices with the .NET Framework article published\r\n\r\nA new article was published that discussed the Transport Layer Security (TLS) best practices at https://docs.microsoft.com/dotnet/framework/network-programming/tls.\r\n\r\nTo ensure .NET Framework applications remain secure, the TLS version should **not** be hardcoded. .NET Framework applications should use the TLS version the operating system (OS) supports.\r\n\r\nThe (TLS) best practices article targets developers who are:\r\n* Directly using the System.Net APIs (for example, `System.Net.Http.HttpClient` and `System.Net.Security.SslStream`).\r\n* Directly using WCF clients and services using the `System.ServiceModel` namespace.\r\n* Using [Azure Cloud Services](https://azure.microsoft.com/services/cloud-services/) Web and Worker roles to host and run your application. See the [Azure Cloud Services](https://docs.microsoft.com/dotnet/framework/network-programming/tls#azure-cloud-services) section.\r\n\r\nThe article explains how to enable the strongest security available for the version of the .NET Framework that your app targets and runs on.\r\n\r\nThe section [Audit your code and make code changes](https://docs.microsoft.com/dotnet/framework/network-programming/tls#audit-your-code-and-make-code-changes) covers auditing and updating your code.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\ndotnet/docs#4675"},{"Id":"7373349220","Type":"IssuesEvent","CreatedAt":"2018-03-13T17:01:53","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/62","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0875: Hash Collison can cause Denial of Service\" (#62) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0875: Hash Collison can cause Denial of Service\r\n## Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 2.0 (including other minor and patch releases).\r\nThis advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability in the public versions of .NET Core where a malicious file or web request could cause a denial of service (DoS) attack.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.10, 1.1.7 or 2.0.6. Developers are advised to update their .NET Core SDK to versions 1.1.8 or 2.1.101.\r\n\r\n## Discussion\r\n\r\nUse *TBD* for discussion of this advisory.\r\n\r\n### Mitigation Factors\r\nNone\r\n\r\n### Affected Software\r\n\r\nAny application running against .NET Core 1.0.9 or lower versions, 1.1.6 or lower minor versions or 2.0.5 or lower minor versions is affected. \r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\nAny application running against .NET Core 1.0.9 or lower versions, 1.1.6 or lower minor versions or 2.0.5 or lower minor versions is affected. \r\n\r\nA complete list of runtimes can be discovered by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows\t| `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS\t| `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms\t| `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.10, 1.1.7 and 2.0.6, then any applications targeting the respective major/minor versions, 1.0 or 1.1 or 2.0 of .NET Core are vulnerable.\r\n\r\nAdditionally, if you've deployed self-contained applications targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n#### How do I fix my affected application?\r\n\r\nApplications can be fixed by installing the latest .NET Core runtimes or SDKs. Typically, application servers only have runtime packages installed and developer machines have the SDKs installed. \r\nInstallers for the runtimes can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). \r\n.NET Core 1.1.8 SDK installs both versions 1.0.10 and 1.1.7 of the .NET Core runtime.\r\n\r\nIf you've built a self-contained application, you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n#### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the `application.runtime.config` file for that application. Set the framework version to the desired version and the `rollForward` property to false. These settings should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nSince the `application.runtime.config` file is an optional file, you may need to create one for each application and add it alongside the executable.\r\n\r\n### Acknowledgments\r\n[Ben Adams](https://twitter.com/ben_a_adams) of [Illyriad Games](https://www.illyriad.co.uk/)\r\n\r\n### External Links\r\n[CVE-2018-0875](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0875)\r\n\r\n### Revisions\r\n\r\nV1.0 (Mar 13, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-03-13_\r\n"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7635508257","Type":"IssuesEvent","CreatedAt":"2018-05-07T04:07:07","Actor":"SonnevilleJ","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/17906","RelatedDescription":"Opened issue \"NumberFormatInfo.CurrentInfo.CurrencySymbol does not detect machine regionalization settings\" (#17906) at dotnet/coreclr","RelatedBody":"When running on a US MacBook Pro, NumberFormatInfo.CurrentInfo.CurrencySymbol does not detect machine regionalization settings and returns `¤` instead of `$` even though the regionalization settings clearly indicate `$` should be used. This appears to be [hardcoded here](https://github.com/dotnet/coreclr/blob/eb6430a72fa0fd6c5ee79b7b2209f7c51559f0c1/src/mscorlib/shared/System/Globalization/NumberFormatInfo.cs#L61) in the `coreclr` project.\r\n\r\nI've created a [.NET Core project](https://github.com/SonnevilleJ/dotnet-currency-test/) to demonstrate this issue."},{"Id":"7635354099","Type":"IssuesEvent","CreatedAt":"2018-05-07T02:58:40","Actor":"danmosemsft","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/17905","RelatedDescription":"Opened issue \"coreclr\\src\\mscorlib to coreclr\\src\\System.Private.CoreLib\" (#17905) at dotnet/coreclr","RelatedBody":"See #9474. This will reduce confusion: as the work continues to unify more and more code in the two corelibs, it makes sense for the directory name to reflect this. Also, it reflects the rename we did from mscorlib for 1.0.\r\n\r\n@maryamariyan you'll just need to do this and find everything that breaks. (Not just in the repo - eg., the mirror)"},{"Id":"7635346411","Type":"IssuesEvent","CreatedAt":"2018-05-07T02:55:07","Actor":"danmosemsft","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/17904","RelatedDescription":"Opened issue \"Unify remaining diverged misc types in corelib\" (#17904) at dotnet/coreclr","RelatedBody":"We have reached the point that 60% of CoreCLR corelib code is shareable. We believe we can reasonably take this further, perhaps to 80% however much of the remaining reconciliation will take domain knowledge because the merges are not trivial.   See #9474\r\n\r\nFrom a diff of `corert\\src\\system.private.corelib\\src` and `coreclr\\src\\mscorlib\\src` these are files whose implementations are yet to be unified. In some cases this will take care. In some happy cases the CoreRT code may just be a frozen old copy of the CoreCLR code from years ago in which case possibly resolution may be just \"take coreclr\". Once implementations have been reconciled, the shared copy should move under \"shared\" and the other copies deleted.\r\n\r\nSome of these will be specific to CoreCLR/CoreRT and those obviously should stay as they are.\r\n\r\n- [ ] \t.\\internal\\developerexperience\\developerexperience.cs\r\n- [ ]  \t.\\internal\\diagnostics\\exceptionextensions.cs\r\n- [ ]  \t.\\internal\\diagnostics\\stacktracehelper.cs\r\n- [ ]  \t.\\internal\\intrinsicsupport\\comparerhelpers.cs\r\n- [ ]  \t.\\internal\\intrinsicsupport\\equalitycomparerhelpers.cs\r\n- [ ]  \t.\\internal\\runtime\\eetype.runtime.cs\r\n- [ ]  \t.\\internal\\runtime\\threadstatics.cs\r\n- [ ]  \t.\\internal\\runtime\\typeloaderexceptionhelper.cs\r\n- [ ]  \t.\\internal\\runtime\\augments\\asynccausalitytracer.cs\r\n- [ ]  \t.\\internal\\runtime\\augments\\dynamicdelegateaugments.cs\r\n- [ ]  \t.\\internal\\runtime\\augments\\enuminfo.cs\r\n- [ ]  \t.\\internal\\runtime\\augments\\environmentaugments.corert.cs\r\n- [ ]  \t.\\internal\\runtime\\augments\\environmentaugments.corert.win32.cs\r\n- [ ]  \t.\\internal\\runtime\\augments\\environmentaugments.cs\r\n- [ ]  \t.\\internal\\runtime\\augments\\environmentaugments.fromregistry.win32.cs\r\n- [ ]  \t.\\internal\\runtime\\augments\\environmentaugments.fromregistry.withoutregistry.cs\r\n- [ ]  \t.\\internal\\runtime\\augments\\environmentaugments.projectn.cs\r\n- [ ]  \t.\\internal\\runtime\\augments\\environmentaugments.unix.cs\r\n- [ ]  \t.\\internal\\runtime\\augments\\environmentaugments.windows.cs\r\n- [ ]  \t.\\internal\\runtime\\augments\\interopcallbacks.cs\r\n- [ ]  \t.\\internal\\runtime\\augments\\reflectionexecutiondomaincallbacks.cs\r\n- [ ]  \t.\\internal\\runtime\\augments\\runtimeaugments.cs\r\n- [ ]  \t.\\internal\\runtime\\augments\\spinlocktracecallbacks.cs\r\n- [ ]  \t.\\internal\\runtime\\augments\\stacktracemetadatacallbacks.cs\r\n- [ ]  \t.\\internal\\runtime\\augments\\tasktracecallbacks.cs\r\n- [ ]  \t.\\internal\\runtime\\augments\\typeloadercallbacks.cs\r\n- [ ]  \t.\\internal\\runtime\\augments\\winrtinterop.cs\r\n- [ ]  \t.\\internal\\toolchain\\nonexecutableattribute.cs\r\n- [ ]  \t.\\interop\\interop.manual.cs\r\n- [ ]  \t.\\interop\\interop.winrt.cs\r\n- [ ]  \t.\\system\\__canon.cs\r\n- [ ]  \t.\\system\\activator.cs\r\n- [ ]  \t.\\system\\appcontext.cs\r\n- [ ]  \t.\\system\\appcontext.unix.cs\r\n- [ ]  \t.\\system\\appcontext.windows.cs\r\n- [ ]  \t.\\system\\appcontextconfighelper.cs\r\n- [ ]  \t.\\system\\appcontextdefaultvalues.cs\r\n- [ ]  \t.\\system\\array.corert.cs\r\n- [ ]  \t.\\system\\array.cs\r\n- [ ]  \t.\\system\\attribute.cs\r\n- [ ]  \t.\\system\\buffer.cs\r\n- [ ]  \t.\\system\\byreference.cs\r\n- [ ]  \t.\\system\\currentsystemtimezone.cache.cs\r\n- [ ]  \t.\\system\\datetime.unix.corert.cs\r\n- [ ]  \t.\\system\\datetime.windows.corert.cs\r\n- [ ]  \t.\\system\\decimal.cs\r\n- [ ]  \t.\\system\\decimal.deccalc.cs\r\n- [ ]  \t.\\system\\defaultbinder.canconvert.cs\r\n- [ ]  \t.\\system\\delegate.cs\r\n- [ ]  \t.\\system\\delegate.defaultparameters.cs\r\n- [ ]  \t.\\system\\eetypeptr.cs\r\n- [ ]  \t.\\system\\enum.cs\r\n- [ ]  \t.\\system\\environment.cs\r\n- [ ]  \t.\\system\\environment.unix.cs\r\n- [ ]  \t.\\system\\environment.win32.cs\r\n- [ ]  \t.\\system\\environment.windows.cs\r\n- [ ]  \t.\\system\\exception.cs\r\n- [ ]  \t.\\system\\gc.cs\r\n- [ ]  \t.\\system\\guid.corert.cs\r\n- [ ]  \t.\\system\\helpers.cs\r\n- [ ]  \t.\\system\\highperformancecounter.unix.cs\r\n- [ ]  \t.\\system\\highperformancecounter.windows.cs\r\n- [ ]  \t.\\system\\insufficientmemoryexception.cs\r\n- [ ]  \t.\\system\\invokeutils.cs\r\n- [ ]  \t.\\system\\math.corert.cs\r\n- [ ]  \t.\\system\\mathf.corert.cs\r\n- [ ]  \t.\\system\\mdarray.cs\r\n- [ ]  \t.\\system\\missingfieldexception.cs\r\n- [ ]  \t.\\system\\missingmemberexception.cs\r\n- [ ]  \t.\\system\\modulehandle.cs\r\n- [ ]  \t.\\system\\multicastdelegate.cs\r\n- [ ]  \t.\\system\\number.corert.cs\r\n- [ ]  \t.\\system\\number.unix.cs\r\n- [ ]  \t.\\system\\number.windows.cs\r\n- [ ]  \t.\\system\\object.cs\r\n- [ ]  \t.\\system\\outofmemoryexception.cs\r\n- [ ]  \t.\\system\\primitivesruntimecontracts.cs\r\n- [ ]  \t.\\system\\runtimeargumenthandle.cs\r\n- [ ]  \t.\\system\\runtimeexceptionhelpers.cs\r\n- [ ]  \t.\\system\\runtimefieldhandle.cs\r\n- [ ]  \t.\\system\\runtimemethodhandle.cs\r\n- [ ]  \t.\\system\\runtimetypehandle.cs\r\n- [ ]  \t.\\system\\string.corert.cs\r\n- [ ]  \t.\\system\\string.intern.cs\r\n- [ ]  \t.\\system\\throwhelper.cs\r\n- [ ]  \t.\\system\\timezoneinfo.winrt.cs\r\n- [ ]  \t.\\system\\type.corert.cs\r\n- [ ]  \t.\\system\\type.internal.cs\r\n- [ ]  \t.\\system\\type.unix.cs\r\n- [ ]  \t.\\system\\type.win32.cs\r\n- [ ]  \t.\\system\\type.winrt.cs\r\n- [ ]  \t.\\system\\typedreference.cs\r\n- [ ]  \t.\\system\\typeloadexception.corert.cs\r\n- [ ]  \t.\\system\\typeloadexception.cs\r\n- [ ]  \t.\\system\\typeunificationkey.cs\r\n- [ ]  \t.\\system\\valuetype.cs\r\n- [ ]  \t.\\system\\weakreference.cs\r\n- [ ]  \t.\\system\\weakreferenceoft.cs\r\n- [ ]  \t.\\system\\runtime\\commandline.windows.cs\r\n- [ ]  \t.\\system\\runtime\\exceptionids.cs\r\n- [ ]  \t.\\system\\runtime\\gcsettings.cs\r\n- [ ]  \t.\\system\\runtime\\initializefinalizerthread.cs\r\n- [ ]  \t.\\system\\runtime\\memoryfailpoint.cs\r\n- [ ]  \t.\\system\\runtime\\runtimeexportattribute.cs\r\n- [ ]  \t.\\system\\runtime\\runtimeimportattribute.cs\r\n- [ ]  \t.\\system\\runtime\\runtimeimports.cs\r\n- [ ]  \t.\\system\\runtime\\typeloaderexports.cs\r\n- [ ]  \t.\\system\\runtime\\loader\\assemblyloadcontext.cs\r\n- [ ]  \t.\\system\\runtime\\serialization\\serializationinfo.cs\r\n- [ ]  \t.\\system\\text\\stringbuilder.corert.cs\r\n- [ ]  \t.\\system\\text\\stringbuildercache.cs"},{"Id":"7635338006","Type":"IssuesEvent","CreatedAt":"2018-05-07T02:51:16","Actor":"danmosemsft","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/17903","RelatedDescription":"Opened issue \"Unify remaining diverged interopservices/compilerservices types in corelib\" (#17903) at dotnet/coreclr","RelatedBody":"We have reached the point that 60% of CoreCLR corelib code is shareable. We believe we can reasonably take this further, perhaps to 80% however much of the remaining reconciliation will take domain knowledge because the merges are not trivial.   See #9474\r\n\r\nFrom a diff of `corert\\src\\system.private.corelib\\src` and `coreclr\\src\\mscorlib\\src` these are files whose implementations are yet to be unified. In some cases this will take care. In some happy cases the CoreRT code may just be a frozen old copy of the CoreCLR code from years ago in which case possibly resolution may be just \"take coreclr\". Once implementations have been reconciled, the shared copy should move under \"shared\" and the other copies deleted.\r\n\r\n- [ ]  \t.\\system\\runtime\\compilerservices\\asyncmethodbuilder.cs\r\n- [ ]  \t.\\system\\runtime\\compilerservices\\castableobject.cs\r\n- [ ]  \t.\\system\\runtime\\compilerservices\\classconstructorrunner.cs\r\n- [ ]  \t.\\system\\runtime\\compilerservices\\classconstructorrunner.nonportable.cs\r\n- [ ]  \t.\\system\\runtime\\compilerservices\\conditionalweaktable.cs\r\n- [ ]  \t.\\system\\runtime\\compilerservices\\dependencyreductionconditionallydependentattribute.cs\r\n- [ ]  \t.\\system\\runtime\\compilerservices\\dependencyreductionrootattribute.cs\r\n- [ ]  \t.\\system\\runtime\\compilerservices\\dependencyreductiontyperemoved.cs\r\n- [ ]  \t.\\system\\runtime\\compilerservices\\eagerstaticclassconstructionattribute.cs\r\n- [ ]  \t.\\system\\runtime\\compilerservices\\fakeelementattribute.cs\r\n- [ ]  \t.\\system\\runtime\\compilerservices\\forcedictionarylookupsattribute.cs\r\n- [ ]  \t.\\system\\runtime\\compilerservices\\forcelazydictionaryattribute.cs\r\n- [ ]  \t.\\system\\runtime\\compilerservices\\icastable.cs\r\n- [ ]  \t.\\system\\runtime\\compilerservices\\iltransforminjectedattribute.cs\r\n- [ ]  \t.\\system\\runtime\\compilerservices\\initializeddataattributes.cs\r\n- [ ]  \t.\\system\\runtime\\compilerservices\\internalcompilerattributes.cs\r\n- [ ]  \t.\\system\\runtime\\compilerservices\\netnativetoolsversionattribute.cs\r\n- [ ]  \t.\\system\\runtime\\compilerservices\\reflectionblockedattribute.cs\r\n- [ ]  \t.\\system\\runtime\\compilerservices\\runtimehelpers.cs\r\n- [ ]  \t.\\system\\runtime\\compilerservices\\staticclassconstructioncontext.cs\r\n- [ ]  \t.\\system\\runtime\\compilerservices\\taskawaiter.cs\r\n- [ ]  \t.\\system\\runtime\\exceptionservices\\exceptiondispatchinfo.cs\r\n- [ ]  \t.\\system\\runtime\\interopservices\\criticalhandle.cs\r\n- [ ]  \t.\\system\\runtime\\interopservices\\gchandle.cs\r\n- [ ]  \t.\\system\\runtime\\interopservices\\gchandletype.cs\r\n- [ ]  \t.\\system\\runtime\\interopservices\\interopextensions.cs\r\n- [ ]  \t.\\system\\runtime\\interopservices\\marshal.cs\r\n- [ ]  \t.\\system\\runtime\\interopservices\\nativecallableattribute.cs\r\n- [ ]  \t.\\system\\runtime\\interopservices\\nativefunctionpointerwrapper.cs\r\n- [ ]  \t.\\system\\runtime\\interopservices\\pinvokemarshal.cs\r\n- [ ]  \t.\\system\\runtime\\interopservices\\pinvokemarshal.unix.cs\r\n- [ ]  \t.\\system\\runtime\\interopservices\\pinvokemarshal.windows.cs\r\n- [ ]  \t.\\system\\runtime\\interopservices\\safehandle.cs\r\n- [ ]  \t.\\system\\runtime\\interopservices\\unsafegchandle.cs\r\n- [ ]  \t.\\system\\runtime\\interopservices\\windowsruntime\\eventregistrationtoken.cs"},{"Id":"7635334631","Type":"IssuesEvent","CreatedAt":"2018-05-07T02:49:48","Actor":"danmosemsft","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/17902","RelatedDescription":"Opened issue \"Unify remaining diverged IO types in corelib\" (#17902) at dotnet/coreclr","RelatedBody":"We have reached the point that 60% of CoreCLR corelib code is shareable. We believe we can reasonably take this further, perhaps to 80% however much of the remaining reconciliation will take domain knowledge because the merges are not trivial.   See #9474\r\n\r\nFrom a diff of `corert\\src\\system.private.corelib\\src` and `coreclr\\src\\mscorlib\\src` these are files whose implementations are yet to be unified. In some cases this will take care. In some happy cases the CoreRT code may just be a frozen old copy of the CoreCLR code from years ago in which case possibly resolution may be just \"take coreclr\". Once implementations have been reconciled, the shared copy should move under \"shared\" and the other copies deleted.\r\n\r\n- [ ]  \t.\\system\\io\\binaryreader.cs\r\n- [ ]  \t.\\system\\io\\fileloadexception.corert.cs\r\n- [ ]  \t.\\system\\io\\stream.cs"},{"Id":"7635332954","Type":"IssuesEvent","CreatedAt":"2018-05-07T02:49:02","Actor":"danmosemsft","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/17901","RelatedDescription":"Opened issue \"Unify remaining diverged resource loader types in corelib\" (#17901) at dotnet/coreclr","RelatedBody":"We have reached the point that 60% of CoreCLR corelib code is shareable. We believe we can reasonably take this further, perhaps to 80% however much of the remaining reconciliation will take domain knowledge because the merges are not trivial.   See #9474\r\n\r\nFrom a diff of `corert\\src\\system.private.corelib\\src` and `coreclr\\src\\mscorlib\\src` these are files whose implementations are yet to be unified. In some cases this will take care. In some happy cases the CoreRT code may just be a frozen old copy of the CoreCLR code from years ago in which case possibly resolution may be just \"take coreclr\". Once implementations have been reconciled, the shared copy should move under \"shared\" and the other copies deleted.\r\n\r\n- [ ]  \t.\\system\\resources\\fastresourcecomparer.cs\r\n- [ ]  \t.\\system\\resources\\filebasedresourcegroveler.cs\r\n- [ ]  \t.\\system\\resources\\iresourcegroveler.cs\r\n- [ ]  \t.\\system\\resources\\manifestbasedresourcegroveler.cs\r\n- [ ]  \t.\\system\\resources\\resourcemanager.cs\r\n- [ ]  \t.\\system\\resources\\resourcereader.cs\r\n- [ ]  \t.\\system\\resources\\resourceset.cs"},{"Id":"7635331683","Type":"IssuesEvent","CreatedAt":"2018-05-07T02:48:26","Actor":"danmosemsft","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/17900","RelatedDescription":"Opened issue \"Unify remaining diverged reflection types in corelib\" (#17900) at dotnet/coreclr","RelatedBody":"We have reached the point that 60% of CoreCLR corelib code is shareable. We believe we can reasonably take this further, perhaps to 80% however much of the remaining reconciliation will take domain knowledge because the merges are not trivial.   See #9474\r\n\r\nFrom a diff of `corert\\src\\system.private.corelib\\src` and `coreclr\\src\\mscorlib\\src` these are files whose implementations are yet to be unified. In some cases this will take care. In some happy cases the CoreRT code may just be a frozen old copy of the CoreCLR code from years ago in which case possibly resolution may be just \"take coreclr\". Once implementations have been reconciled, the shared copy should move under \"shared\" and the other copies deleted.\r\n\r\n- [ ]   \t.\\system\\reflection\\assembly.corert.cs\r\n- [ ]  \t.\\system\\reflection\\assemblyname.cs\r\n- [ ]  \t.\\system\\reflection\\assemblynamehelpers.cs\r\n- [ ]  \t.\\system\\reflection\\assemblynamehelpers.strongname.cs\r\n- [ ]  \t.\\system\\reflection\\assemblynamelexer.cs\r\n- [ ]  \t.\\system\\reflection\\assemblynameparser.cs\r\n- [ ]  \t.\\system\\reflection\\binderbundle.cs\r\n- [ ]  \t.\\system\\reflection\\customattributedata.cs\r\n- [ ]  \t.\\system\\reflection\\customattributeextensions.cs\r\n- [ ]  \t.\\system\\reflection\\customattributenamedargument.cs\r\n- [ ]  \t.\\system\\reflection\\customattributetypedargument.cs\r\n- [ ]  \t.\\system\\reflection\\exceptionhandlingclause.cs\r\n- [ ]  \t.\\system\\reflection\\fieldinfo.corert.cs\r\n- [ ]  \t.\\system\\reflection\\legacycustomattributeapis.cs\r\n- [ ]  \t.\\system\\reflection\\localvariableinfo.cs\r\n- [ ]  \t.\\system\\reflection\\methodbase.corert.cs\r\n- [ ]  \t.\\system\\reflection\\methodbody.cs\r\n- [ ]  \t.\\system\\reflection\\missingmetadataexception.cs\r\n- [ ]  \t.\\system\\reflection\\runtimeassemblyname.cs\r\n- [ ]  \t.\\system\\reflection\\runtime\\customattributes\\runtimeimplementedcustomattributedata.cs"},{"Id":"7635326962","Type":"IssuesEvent","CreatedAt":"2018-05-07T02:46:18","Actor":"danmosemsft","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/17899","RelatedDescription":"Opened issue \"Unify remaining diverged microsoft\\win32 types in corelib\" (#17899) at dotnet/coreclr","RelatedBody":"We have reached the point that 60% of CoreCLR corelib code is shareable. We believe we can reasonably take this further, perhaps to 80% however much of the remaining reconciliation will take domain knowledge because the merges are not trivial.  \r\n\r\nFrom a diff of `corert\\src\\system.private.corelib\\src` and `coreclr\\src\\mscorlib\\src` these are files whose implementations are yet to be unified. In some cases this will take care. In some happy cases the CoreRT code may just be a frozen old copy of the CoreCLR code from years ago in which case possibly resolution may be just \"take coreclr\". Once implementations have been reconciled, the shared copy should move under \"shared\" and the other copies deleted.\r\n\r\n- [ ]  \t.\\microsoft\\win32\\registry.cs\r\n- [ ]  \t.\\microsoft\\win32\\registryhive.cs\r\n- [ ]  \t.\\microsoft\\win32\\registrykey.cs\r\n- [ ]  \t.\\microsoft\\win32\\registrykey.windows.cs\r\n- [ ]  \t.\\microsoft\\win32\\registryoptions.cs\r\n- [ ]  \t.\\microsoft\\win32\\registryvaluekind.cs\r\n- [ ]  \t.\\microsoft\\win32\\registryvalueoptions.cs\r\n- [ ]  \t.\\microsoft\\win32\\registryview.cs\r\n- [ ]  \t.\\microsoft\\win32\\throwhelper.cs\r\n- [ ]  \t.\\microsoft\\win32\\safehandles\\saferegistryhandle.cs\r\n- [ ]  \t.\\microsoft\\win32\\safehandles\\saferegistryhandle.windows.cs\r\n- [ ]  \t.\\microsoft\\win32\\safehandles\\safethreadpooliohandle.cs\r\n- [ ]  \t.\\microsoft\\win32\\safehandles\\safewaithandle.cs"},{"Id":"7635322808","Type":"IssuesEvent","CreatedAt":"2018-05-07T02:44:35","Actor":"danmosemsft","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/17898","RelatedDescription":"Opened issue \"Unify remaining diverged diagnostics types in corelib\" (#17898) at dotnet/coreclr","RelatedBody":"We have reached the point that 60% of CoreCLR corelib code is shareable. We believe we can reasonably take this further, perhaps to 80% however much of the remaining reconciliation will take domain knowledge because the merges are not trivial.  \r\n\r\nFrom a diff of `corert\\src\\system.private.corelib\\src` and `coreclr\\src\\mscorlib\\src` these are files related to diagnostics whose implementations are yet to be unified. In some cases this will take care. In some happy cases the CoreRT code may just be a frozen old copy of the CoreCLR code from years ago in which case possibly resolution may be just \"take coreclr\". Once implementations have been reconciled, the shared copy should move under \"shared\" and the other copies deleted\r\n\r\n \t.\\system\\diagnostics\\debug.corert.cs\r\n\r\n- [ ]  \t.\\system\\diagnostics\\debug.windows.cs\r\n- [ ]  \t.\\system\\diagnostics\\debugannotations.cs\r\n- [ ]  \t.\\system\\diagnostics\\debugger.cs\r\n- [ ]  \t.\\system\\diagnostics\\debuggerguidedstepthroughattribute.cs\r\n- [ ]  \t.\\system\\diagnostics\\lowleveldebugfunceval.cs\r\n- [ ]  \t.\\system\\diagnostics\\stackframe.corert.cs\r\n- [ ]  \t.\\system\\diagnostics\\stackframe.cs\r\n- [ ]  \t.\\system\\diagnostics\\stackframeextensions.cs\r\n- [ ]  \t.\\system\\diagnostics\\stacktrace.cs\r\n- [ ]  \t.\\system\\diagnostics\\contracts\\contracts.cs\r\n- [ ]  \t.\\system\\diagnostics\\contracts\\contractsbcl.cs\r\n- [ ]  \t.\\system\\diagnostics\\tracing\\eventsource_corert.cs\r\n- [ ]  \t.\\system\\diagnostics\\tracing\\unsafenativemethods.cs"},{"Id":"7635320643","Type":"IssuesEvent","CreatedAt":"2018-05-07T02:43:42","Actor":"danmosemsft","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/17897","RelatedDescription":"Opened issue \" Settings Unify remaining diverged collections types in corelib\" (#17897) at dotnet/coreclr","RelatedBody":"We have reached the point that 60% of CoreCLR corelib code is shareable. We believe we can reasonably take this further, perhaps to 80% however much of the remaining reconciliation will take domain knowledge because the merges are not trivial.  \r\n\r\nFrom a diff of `corert\\src\\system.private.corelib\\src` and `coreclr\\src\\mscorlib\\src` these are files related to collections whose implementations are yet to be unified. In some cases this will take care. In some happy cases the CoreRT code may just be a frozen old copy of the CoreCLR code from years ago in which case possibly resolution may be just \"take coreclr\". Once implementations have been reconciled, the shared copy should move under \"shared\" and the other copies deleted.\r\n \t\r\n- [ ]  \t.\\system\\collections\\concurrent\\lowlevelconcurrentqueue.cs\r\n- [ ]  \t.\\system\\collections\\generic\\arraysorthelper.cs\r\n- [ ]  \t.\\system\\collections\\generic\\comparer.cs\r\n- [ ]  \t.\\system\\collections\\generic\\compatibilityequalitycomparers.cs\r\n- [ ]  \t.\\system\\collections\\generic\\equalitycomparer.cs\r\n- [ ]  \t.\\system\\collections\\generic\\equalonlycomparer.cs"},{"Id":"7635316849","Type":"IssuesEvent","CreatedAt":"2018-05-07T02:42:05","Actor":"danmosemsft","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/17896","RelatedDescription":"Opened issue \"Unify remaining diverged globalization types in corelib\" (#17896) at dotnet/coreclr","RelatedBody":"We have reached the point that 60% of CoreCLR corelib code is shareable. We believe we can reasonably take this further, perhaps to 80% however much of the remaining reconciliation will take domain knowledge because the merges are not trivial.  \r\n\r\nFrom a diff of `corert\\src\\system.private.corelib\\src` and `coreclr\\src\\mscorlib\\src` these are files related to globalizations whose implementations are yet to be unified. In some cases this will take care. In some happy cases the CoreRT code may just be a frozen old copy of the CoreCLR code from years ago in which case possibly resolution may be just \"take coreclr\". Once implementations have been reconciled, the shared copy should move under \"shared\" and the other copies deleted.\r\n\r\n- [ ]  \t.\\system\\globalization\\calendardata.dummy.cs\r\n- [ ]  \t.\\system\\globalization\\charunicodeinfodata.cs\r\n- [ ]  \t.\\system\\globalization\\compareinfo.dummy.cs\r\n- [ ]  \t.\\system\\globalization\\culturedata.dummy.cs\r\n- [ ]  \t.\\system\\globalization\\cultureinfo.cs\r\n- [ ]  \t.\\system\\globalization\\cultureinfo.dummy.cs\r\n- [ ]  \t.\\system\\globalization\\cultureinfo.unix.cs\r\n- [ ]  \t.\\system\\globalization\\cultureinfo.windows.cs\r\n- [ ]  \t.\\system\\globalization\\globalizationmode.cs\r\n- [ ]  \t.\\system\\globalization\\globalizationmode.unix.cs\r\n- [ ]  \t.\\system\\globalization\\globalizationmode.windows.cs\r\n- [ ]  \t.\\system\\globalization\\hijricalendar.dummy.cs\r\n- [ ]  \t.\\system\\globalization\\idnmapping.dummy.cs\r\n- [ ]  \t.\\system\\globalization\\japanesecalendar.dummy.cs\r\n- [ ]  \t.\\system\\globalization\\normalization.dummy.cs\r\n- [ ]  \t.\\system\\globalization\\textinfo.dummy.cs\r\n\r\nhttps://github.com/dotnet/coreclr/issues/9474"},{"Id":"7635308317","Type":"IssuesEvent","CreatedAt":"2018-05-07T02:38:15","Actor":"danmosemsft","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/17895","RelatedDescription":"Opened issue \"Converge corelib - Threading types\" (#17895) at dotnet/coreclr","RelatedBody":"We have reached the point that 60% of CoreCLR corelib code is shareable. We believe we can reasonably take this further, perhaps to 80% however much of the remaining reconciliation will take domain knowledge because the merges are not trivial. \r\n\r\nThe work here is to unify implementations. In some cases this will take care. In some happy cases the CoreRT code may just be a frozen old copy of the CoreCLR code from years ago in which case possibly resolution may be just \"take coreclr\". Once implementations have been reconciled, the shared copy should move under \"shared\" and the other copies deleted.\r\n\r\nFrom a diff of `corert\\src\\system.private.corelib\\src` and `coreclr\\src\\mscorlib\\src` these are files related to threading/tasks.\r\n\r\n- [ ]     .\\internal\\runtime\\augments\\*thread.cs\r\n- [ ]     .\\system\\runtime\\compilerservices\\taskawaiter.cs\r\n- [ ]     .\\system\\threading\\*  (about 85 files)\r\n\r\n\r\nhttps://github.com/dotnet/coreclr/issues/9474"},{"Id":"7634534628","Type":"IssuesEvent","CreatedAt":"2018-05-06T18:27:51","Actor":"omariom","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/17828","RelatedDescription":"Closed issue \"[JIT]: Stack allocation to Span\" (#17828) at dotnet/coreclr","RelatedBody":"I looked at what IL and x86 code is generated for different ways of allocating memory on stack\r\nand think there is room for optimizations. \r\n\r\n1. Roslyn could generate better IL for `Span<byte> span = stackalloc byte[512];` (see `StackAllocFixedAsSpan`). It should be similar to the IL generated for `byte* ptr = stackalloc byte[512];` (`StackAllocFixedAsPtr`). I will create  an issue in Roslyn repo for that.\r\n\r\n2. JIT could recognize fixed size stack allocations and  generate simpler code.\r\n    Compare `StackAllocFixedAsPtr` to `LocalAsPtr` and `StackAllocFixedAsSpan` to `LocalAsSpan`.\r\n\r\n@VSadov @jkotas \r\n\r\n```C#\r\n[StructLayout(LayoutKind.Sequential, Size = 512)]\r\nstruct WideStruct { }\r\n\r\n[MethodImpl(MethodImplOptions.NoInlining)]\r\nprivate static unsafe void Consume(byte* ptr) {}\r\n\r\n[MethodImpl(MethodImplOptions.NoInlining)]\r\nprivate static unsafe void Consume(Span<byte> span) {}\r\n```\r\n\r\n<details><summary>LocalAsPtr</summary>\r\n<p>\r\n\r\n```C#\r\n[MethodImpl(MethodImplOptions.NoInlining)]\r\nprivate static unsafe void LocalAsPtr()\r\n{\r\n    WideStruct i;\r\n    Consume((byte*)&i);\r\n}\r\n```\r\n```\r\n.method private hidebysig static \r\n\tvoid LocalAsPtr () cil managed noinlining \r\n{\r\n\t// Method begins at RVA 0x20dc\r\n\t// Code size 9 (0x9)\r\n\t.maxstack 1\r\n\t.locals init (\r\n\t\t[0] valuetype TestDotNetCore.Program/WideStruct\r\n\t)\r\n\r\n\tIL_0000: ldloca.s 0\r\n\tIL_0002: conv.u\r\n\tIL_0003: call void TestDotNetCore.Program::Consume(uint8*)\r\n\tIL_0008: ret\r\n}\r\n```\r\n```ASM\r\n; Assembly listing for method Program:LocalAsPtr()\r\n; Emitting BLENDED_CODE for X64 CPU with AVX\r\n; optimized code\r\n; rsp based frame\r\n; partially interruptible\r\n; Final local variable assignments\r\n;\r\n;  V00 loc0         [V00    ] (  1,  1   )  struct (512) [rsp+0x20]   do-not-enreg[XS] must-init addr-exposed ld-addr-op\r\n;  V01 OutArgs      [V01    ] (  1,  1   )  lclBlk (32) [rsp+0x00]  \r\n;\r\n; Lcl frame size = 544\r\n\r\nG_M54392_IG01:\r\n       57                   push     rdi\r\n       4881EC20020000       sub      rsp, 544\r\n       488D7C2420           lea      rdi, [rsp+20H]\r\n       B980000000           mov      ecx, 128\r\n       33C0                 xor      rax, rax\r\n       F3AB                 rep stosd \r\n\r\nG_M54392_IG02:\r\n       488D4C2420           lea      rcx, bword ptr [rsp+20H]\r\n       E8A0FDFFFF           call     Program:Consume(long)\r\n       90                   nop      \r\n\r\nG_M54392_IG03:\r\n       4881C420020000       add      rsp, 544\r\n       5F                   pop      rdi\r\n       C3                   ret      \r\n\r\n; Total bytes of code 42, prolog size 22 for method Program:LocalAsPtr()\r\n; ============================================================\r\n```\r\n</p>\r\n</details>\r\n\r\n<details><summary>LocalAsSpan</summary>\r\n<p>\r\n\r\n```C#\r\n[MethodImpl(MethodImplOptions.NoInlining)]\r\nprivate static unsafe void LocalAsSpan()\r\n{\r\n    WideStruct i;\r\n    Consume(new Span<byte>((byte*)&i, sizeof(WideStruct)));\r\n}\r\n```\r\n```\r\n.method private hidebysig static \r\n\tvoid LocalAsSpan () cil managed noinlining \r\n{\r\n\t// Code size 20 (0x14)\r\n\t.maxstack 2\r\n\t.locals init (\r\n\t\t[0] valuetype TestDotNetCore.Program/WideStruct\r\n\t)\r\n\r\n\tIL_0000: ldloca.s 0\r\n\tIL_0002: conv.u\r\n\tIL_0003: sizeof TestDotNetCore.Program/WideStruct\r\n\tIL_0009: newobj instance void valuetype [System.Memory]System.Span`1<uint8>::.ctor(void*, int32)\r\n\tIL_000e: call void TestDotNetCore.Program::Consume(valuetype [System.Memory]System.Span`1<uint8>)\r\n\tIL_0013: ret\r\n}\r\n```\r\n```ASM\r\n; Assembly listing for method Program:LocalAsSpan()\r\n; Emitting BLENDED_CODE for X64 CPU with AVX\r\n; optimized code\r\n; rsp based frame\r\n; partially interruptible\r\n; Final local variable assignments\r\n;\r\n;  V00 loc0         [V00    ] (  1,  1   )  struct (512) [rsp+0x30]   do-not-enreg[XS] must-init addr-exposed ld-addr-op\r\n;  V01 OutArgs      [V01    ] (  1,  1   )  lclBlk (32) [rsp+0x00]  \r\n;* V02 tmp1         [V02    ] (  0,  0   )  struct (16) zero-ref   \r\n;  V03 tmp2         [V03,T01] (  2,  4   )    long  ->  rcx        \r\n;* V04 tmp3         [V04    ] (  0,  0   )  struct ( 8) zero-ref   \r\n;  V05 tmp4         [V05,T02] (  2,  2   )   byref  ->  rcx         V02._pointer(offs=0x00) P-INDEP\r\n;  V06 tmp5         [V06,T04] (  2,  2   )     int  ->  rax         V02._length(offs=0x08) P-INDEP\r\n;  V07 tmp6         [V07,T03] (  2,  2   )   byref  ->  rcx         V04._value(offs=0x00) P-INDEP\r\n;  V08 tmp7         [V08    ] (  3,  6   )  struct (16) [rsp+0x20]   do-not-enreg[XSB] must-init addr-exposed\r\n;  V09 tmp8         [V09,T00] (  3,  6   )   byref  ->  rdx         stack-byref\r\n;\r\n; Lcl frame size = 560\r\n\r\nG_M21189_IG01:\r\n       57                   push     rdi\r\n       4881EC30020000       sub      rsp, 560\r\n       488D7C2420           lea      rdi, [rsp+20H]\r\n       B984000000           mov      ecx, 132\r\n       33C0                 xor      rax, rax\r\n       F3AB                 rep stosd \r\n\r\nG_M21189_IG02:\r\n       488D4C2430           lea      rcx, bword ptr [rsp+30H]\r\n       B800020000           mov      eax, 512\r\n       488D542420           lea      rdx, bword ptr [rsp+20H]\r\n       48890A               mov      bword ptr [rdx], rcx\r\n       894208               mov      dword ptr [rdx+8], eax\r\n       488D4C2420           lea      rcx, bword ptr [rsp+20H]\r\n       E89BFEFFFF           call     Program:Consume(struct)\r\n       90                   nop      \r\n\r\nG_M21189_IG03:\r\n       4881C430020000       add      rsp, 560\r\n       5F                   pop      rdi\r\n       C3                   ret      \r\n\r\n; Total bytes of code 63, prolog size 22 for method Program:LocalAsSpan()\r\n; ============================================================\r\n```\r\n</p>\r\n</details>\r\n\r\n<details><summary>StackAllocFixedAsPtr</summary>\r\n<p>\r\n\r\n```C#\r\n[MethodImpl(MethodImplOptions.NoInlining)]\r\nprivate static unsafe void StackAllocFixedAsPtr()\r\n{\r\n    byte* ptr = stackalloc byte[512];\r\n    Consume(ptr);\r\n}\r\n```\r\n```\r\n.method private hidebysig static \r\n\tvoid StackAllocFixedAsPtr () cil managed noinlining \r\n{\r\n\t// Code size 14 (0xe)\r\n\t.maxstack 8\r\n\r\n\tIL_0000: ldc.i4 512\r\n\tIL_0005: conv.u\r\n\tIL_0006: localloc\r\n\tIL_0008: call void TestDotNetCore.Program::Consume(uint8*)\r\n\tIL_000d: ret\r\n}\r\n```\r\n```ASM\r\n; Assembly listing for method Program:StackAllocFixedAsPtr()\r\n; Emitting BLENDED_CODE for X64 CPU with AVX\r\n; optimized code\r\n; rbp based frame\r\n; partially interruptible\r\n; Final local variable assignments\r\n;\r\n;  V00 OutArgs      [V00    ] (  1,  1   )  lclBlk (32) [rsp+0x00]  \r\n;* V01 GsCookie     [V01    ] (  0,  0   )    long  ->  zero-ref    do-not-enreg[X] addr-exposed\r\n;  V02 LocAllocSP   [V02    ] (  1,  1   )    long  ->  [rbp+0x08]   do-not-enreg[X] addr-exposed\r\n;\r\n; Lcl frame size = 48\r\n\r\nG_M56192_IG01:\r\n       55                   push     rbp\r\n       4883EC30             sub      rsp, 48\r\n       488D6C2420           lea      rbp, [rsp+20H]\r\n       48896508             mov      qword ptr [rbp+08H], rsp\r\n       48B8818FC0ED9AA70000 mov      rax, 0xA79AEDC08F81\r\n       48894500             mov      qword ptr [rbp], rax\r\n\r\nG_M56192_IG02:\r\n       4883C420             add      rsp, 32\r\n       852424               test     dword ptr [rsp], esp\r\n       4881EC00020000       sub      rsp, 512\r\n       4883EC20             sub      rsp, 32\r\n       488D4C2420           lea      rcx, [rsp+20H]\r\n       48896508             mov      qword ptr [rbp+08H], rsp\r\n       E8E4FDFFFF           call     Program:Consume(long)\r\n       48B9818FC0ED9AA70000 mov      rcx, 0xA79AEDC08F81\r\n       48394D00             cmp      qword ptr [rbp], rcx\r\n       7405                 je       SHORT G_M56192_IG03\r\n       E8EFEFC35F           call     CORINFO_HELP_FAIL_FAST\r\n\r\nG_M56192_IG03:\r\n       90                   nop      \r\n\r\nG_M56192_IG04:\r\n       488D6510             lea      rsp, [rbp+10H]\r\n       5D                   pop      rbp\r\n       C3                   ret      \r\n\r\n; Total bytes of code 88, prolog size 28 for method Program:StackAllocFixedAsPtr()\r\n; ============================================================\r\n```\r\n</p>\r\n</details>\r\n\r\n<details><summary>StackAllocDynamicAsPtr</summary>\r\n<p>\r\n\r\n```C#\r\n[MethodImpl(MethodImplOptions.NoInlining)]\r\nprivate static unsafe void StackAllocDynamicAsPtr(int size)\r\n{\r\n    byte* ptr = stackalloc byte[size];\r\n    Consume(ptr);\r\n} \r\n```\r\n```\r\n.method private hidebysig static \r\n\tvoid StackAllocDynamicAsPtr (\r\n\t\tint32 size\r\n\t) cil managed noinlining \r\n{\r\n\t// Code size 10 (0xa)\r\n\t.maxstack 8\r\n\r\n\tIL_0000: ldarg.0\r\n\tIL_0001: conv.u\r\n\tIL_0002: localloc\r\n\tIL_0004: call void TestDotNetCore.Program::Consume(uint8*)\r\n\tIL_0009: ret\r\n}\r\n```\r\n```ASM\r\n; Assembly listing for method Program:StackAllocDynamicAsPtr(int)\r\n; Emitting BLENDED_CODE for X64 CPU with AVX\r\n; optimized code\r\n; rbp based frame\r\n; partially interruptible\r\n; Final local variable assignments\r\n;\r\n;  V00 arg0         [V00,T00] (  3,  3   )     int  ->  rcx        \r\n;  V01 OutArgs      [V01    ] (  1,  1   )  lclBlk (32) [rsp+0x00]  \r\n;* V02 GsCookie     [V02    ] (  0,  0   )    long  ->  zero-ref    do-not-enreg[X] addr-exposed\r\n;  V03 LocAllocSP   [V03    ] (  1,  1   )    long  ->  [rbp+0x08]   do-not-enreg[X] addr-exposed\r\n;\r\n; Lcl frame size = 48\r\n\r\nG_M8739_IG01:\r\n       55                   push     rbp\r\n       4883EC30             sub      rsp, 48\r\n       488D6C2420           lea      rbp, [rsp+20H]\r\n       48896508             mov      qword ptr [rbp+08H], rsp\r\n       48B8818FC0ED9AA70000 mov      rax, 0xA79AEDC08F81\r\n       48894500             mov      qword ptr [rbp], rax\r\n\r\nG_M8739_IG02:\r\n       8BC9                 mov      ecx, ecx\r\n       4885C9               test     rcx, rcx\r\n       743A                 je       SHORT G_M8739_IG04\r\n       488BC1               mov      rax, rcx\r\n       4883C00F             add      rax, 15\r\n       4883E0F0             and      rax, -16\r\n       4883C420             add      rsp, 32\r\n       48F7D8               neg      rax\r\n       4803C4               add      rax, rsp\r\n       7202                 jb       SHORT G_M8739_IG03\r\n       33C0                 xor      rax, rax\r\n\r\nG_M8739_IG03:\r\n       852424               test     dword ptr [rsp], esp\r\n       488BD4               mov      rdx, rsp\r\n       4881EA00100000       sub      rdx, 0x1000\r\n       488BE2               mov      rsp, rdx\r\n       483BE0               cmp      rsp, rax\r\n       73EB                 jae      SHORT G_M8739_IG03\r\n       488BE0               mov      rsp, rax\r\n       4883EC20             sub      rsp, 32\r\n       488D4C2420           lea      rcx, [rsp+20H]\r\n\r\nG_M8739_IG04:\r\n       48896508             mov      qword ptr [rbp+08H], rsp\r\n       E87AFFFFFF           call     Program:Consume(long)\r\n       48B9818FC0ED9AA70000 mov      rcx, 0xA79AEDC08F81\r\n       48394D00             cmp      qword ptr [rbp], rcx\r\n       7405                 je       SHORT G_M8739_IG05\r\n       E835EFC35F           call     CORINFO_HELP_FAIL_FAST\r\n\r\nG_M8739_IG05:\r\n       90                   nop      \r\n\r\nG_M8739_IG06:\r\n       488D6510             lea      rsp, [rbp+10H]\r\n       5D                   pop      rbp\r\n       C3                   ret      \r\n\r\n; Total bytes of code 130, prolog size 28 for method Program:StackAllocDynamicAsPtr(int)\r\n; ============================================================\r\n```\r\n</p>\r\n</details>\r\n\r\n<details><summary>StackAllocFixedAsSpan</summary>\r\n<p>\r\n\r\n```C#\r\n[MethodImpl(MethodImplOptions.NoInlining)]\r\nprivate static unsafe void StackAllocFixedAsSpan()\r\n{\r\n    Span<byte> span = stackalloc byte[512];\r\n    Consume(span);\r\n}\r\n```\r\n```\r\n.method private hidebysig static \r\n\tvoid StackAllocFixedAsSpan () cil managed noinlining \r\n{\r\n\t// Code size 22 (0x16)\r\n\t.maxstack 2\r\n\t.locals init (\r\n\t\t[0] int32\r\n\t)\r\n\r\n\tIL_0000: ldc.i4 512\r\n\tIL_0005: stloc.0\r\n\tIL_0006: ldloc.0\r\n\tIL_0007: conv.u\r\n\tIL_0008: localloc\r\n\tIL_000a: ldloc.0\r\n\tIL_000b: newobj instance void valuetype [System.Memory]System.Span`1<uint8>::.ctor(void*, int32)\r\n\tIL_0010: call void TestDotNetCore.Program::Consume(valuetype [System.Memory]System.Span`1<uint8>)\r\n\tIL_0015: ret\r\n}\r\n```\r\n```ASM\r\n; Assembly listing for method Program:StackAllocFixedAsSpan()\r\n; Emitting BLENDED_CODE for X64 CPU with AVX\r\n; optimized code\r\n; rbp based frame\r\n; partially interruptible\r\n; Final local variable assignments\r\n;\r\n;* V00 loc0         [V00,T05] (  0,  0   )     int  ->  zero-ref   \r\n;  V01 OutArgs      [V01    ] (  1,  1   )  lclBlk (32) [rsp+0x00]  \r\n;* V02 tmp1         [V02    ] (  0,  0   )  struct (16) zero-ref   \r\n;  V03 tmp2         [V03,T01] (  2,  4   )    long  ->  rcx        \r\n;* V04 tmp3         [V04    ] (  0,  0   )  struct ( 8) zero-ref   \r\n;  V05 tmp4         [V05,T03] (  2,  2   )   byref  ->  rcx         V02._pointer(offs=0x00) P-INDEP\r\n;  V06 tmp5         [V06,T02] (  3,  3   )     int  ->  rax         V02._length(offs=0x08) P-INDEP\r\n;  V07 tmp6         [V07,T04] (  2,  2   )   byref  ->  rcx         V04._value(offs=0x00) P-INDEP\r\n;  V08 tmp7         [V08    ] (  3,  6   )  struct (16) [rbp+0x10]   do-not-enreg[XSB] must-init addr-exposed\r\n;  V09 tmp8         [V09,T00] (  3,  6   )   byref  ->  rdx         stack-byref\r\n;* V10 GsCookie     [V10    ] (  0,  0   )    long  ->  zero-ref    do-not-enreg[X] must-init addr-exposed\r\n;  V11 LocAllocSP   [V11    ] (  1,  1   )    long  ->  [rbp+0x20]   do-not-enreg[X] must-init addr-exposed\r\n;\r\n; Lcl frame size = 72\r\n\r\nG_M31550_IG01:\r\n       55                   push     rbp\r\n       57                   push     rdi\r\n       4883EC48             sub      rsp, 72\r\n       488D6C2420           lea      rbp, [rsp+20H]\r\n       488D7D08             lea      rdi, [rbp+08H]\r\n       B908000000           mov      ecx, 8\r\n       33C0                 xor      rax, rax\r\n       F3AB                 rep stosd \r\n       48896520             mov      qword ptr [rbp+20H], rsp\r\n       48B8818FC0ED9AA70000 mov      rax, 0xA79AEDC08F81\r\n       48894508             mov      qword ptr [rbp+08H], rax\r\n\r\nG_M31550_IG02:\r\n       4883C420             add      rsp, 32\r\n       B920000000           mov      ecx, 32\r\n\r\nG_M31550_IG03:\r\n       6A00                 push     0\r\n       6A00                 push     0\r\n       48FFC9               dec      rcx\r\n       75F7                 jne      SHORT G_M31550_IG03\r\n       4883EC20             sub      rsp, 32\r\n       488D4C2420           lea      rcx, [rsp+20H]\r\n       48896520             mov      qword ptr [rbp+20H], rsp\r\n       B800020000           mov      eax, 512\r\n       488D5510             lea      rdx, bword ptr [rbp+10H]\r\n       48890A               mov      bword ptr [rdx], rcx\r\n       894208               mov      dword ptr [rdx+8], eax\r\n       488D4D10             lea      rcx, bword ptr [rbp+10H]\r\n       E897FCFFFF           call     Program:Consume(struct)\r\n       48B9818FC0ED9AA70000 mov      rcx, 0xA79AEDC08F81\r\n       48394D08             cmp      qword ptr [rbp+08H], rcx\r\n       7405                 je       SHORT G_M31550_IG04\r\n       E89AEEC35F           call     CORINFO_HELP_FAIL_FAST\r\n\r\nG_M31550_IG04:\r\n       90                   nop      \r\n\r\nG_M31550_IG05:\r\n       488D6528             lea      rsp, [rbp+28H]\r\n       5F                   pop      rdi\r\n       5D                   pop      rbp\r\n       C3                   ret      \r\n\r\n; Total bytes of code 126, prolog size 42 for method Program:StackAllocFixedAsSpan()\r\n; ============================================================\r\n```\r\n</p>\r\n</details>\r\n\r\n<details><summary>StackAllocDynamicAsSpan</summary>\r\n<p>\r\n\r\n```C#\r\n[MethodImpl(MethodImplOptions.NoInlining)]\r\nprivate static unsafe void StackAllocDynamicAsSpan(int size)\r\n{\r\n    Span<byte> span = stackalloc byte[size];\r\n    Consume(span);\r\n}\r\n```\r\n```\r\n.method private hidebysig static \r\n\tvoid StackAllocDynamicAsSpan (\r\n\t\tint32 size\r\n\t) cil managed noinlining \r\n{\r\n\t// Code size 18 (0x12)\r\n\t.maxstack 2\r\n\t.locals init (\r\n\t\t[0] int32\r\n\t)\r\n\r\n\tIL_0000: ldarg.0\r\n\tIL_0001: stloc.0\r\n\tIL_0002: ldloc.0\r\n\tIL_0003: conv.u\r\n\tIL_0004: localloc\r\n\tIL_0006: ldloc.0\r\n\tIL_0007: newobj instance void valuetype [System.Memory]System.Span`1<uint8>::.ctor(void*, int32)\r\n\tIL_000c: call void TestDotNetCore.Program::Consume(valuetype [System.Memory]System.Span`1<uint8>)\r\n\tIL_0011: ret\r\n}\r\n```\r\n```ASM\r\n; Assembly listing for method Program:StackAllocDynamicAsSpan(int)\r\n; Emitting BLENDED_CODE for X64 CPU with AVX\r\n; optimized code\r\n; rbp based frame\r\n; partially interruptible\r\n; Final local variable assignments\r\n;\r\n;  V00 arg0         [V00,T01] (  3,  3   )     int  ->  rcx        \r\n;  V01 loc0         [V01,T02] (  4,  4   )     int  ->  rcx        \r\n;  V02 OutArgs      [V02    ] (  1,  1   )  lclBlk (32) [rsp+0x00]  \r\n;* V03 tmp1         [V03    ] (  0,  0   )  struct (16) zero-ref   \r\n;  V04 tmp2         [V04,T03] (  2,  4   )    long  ->  rax        \r\n;* V05 tmp3         [V05    ] (  0,  0   )  struct ( 8) zero-ref   \r\n;  V06 tmp4         [V06,T04] (  2,  2   )   byref  ->  rax         V03._pointer(offs=0x00) P-INDEP\r\n;  V07 tmp5         [V07,T06] (  2,  2   )     int  ->  rcx         V03._length(offs=0x08) P-INDEP\r\n;  V08 tmp6         [V08,T05] (  2,  2   )   byref  ->  rax         V05._value(offs=0x00) P-INDEP\r\n;  V09 tmp7         [V09    ] (  3,  6   )  struct (16) [rbp+0x08]   do-not-enreg[XSB] must-init addr-exposed\r\n;  V10 tmp8         [V10,T00] (  3,  6   )   byref  ->  rdx         stack-byref\r\n;* V11 GsCookie     [V11    ] (  0,  0   )    long  ->  zero-ref    do-not-enreg[X] must-init addr-exposed\r\n;  V12 LocAllocSP   [V12    ] (  1,  1   )    long  ->  [rbp+0x18]   do-not-enreg[X] must-init addr-exposed\r\n;\r\n; Lcl frame size = 64\r\n\r\nG_M16477_IG01:\r\n       55                   push     rbp\r\n       57                   push     rdi\r\n       56                   push     rsi\r\n       4883EC40             sub      rsp, 64\r\n       488D6C2420           lea      rbp, [rsp+20H]\r\n       488BF1               mov      rsi, rcx\r\n       488D7D00             lea      rdi, [rbp]\r\n       B908000000           mov      ecx, 8\r\n       33C0                 xor      rax, rax\r\n       F3AB                 rep stosd \r\n       488BCE               mov      rcx, rsi\r\n       48896518             mov      qword ptr [rbp+18H], rsp\r\n       48B8818FC0ED9AA70000 mov      rax, 0xA79AEDC08F81\r\n       48894500             mov      qword ptr [rbp], rax\r\n\r\nG_M16477_IG02:\r\n       8BC1                 mov      eax, ecx\r\n       4885C0               test     rax, rax\r\n       741E                 je       SHORT G_M16477_IG04\r\n       4883C00F             add      rax, 15\r\n       48C1E804             shr      rax, 4\r\n       4883C420             add      rsp, 32\r\n\r\nG_M16477_IG03:\r\n       6A00                 push     0\r\n       6A00                 push     0\r\n       48FFC8               dec      rax\r\n       75F7                 jne      SHORT G_M16477_IG03\r\n       4883EC20             sub      rsp, 32\r\n       488D442420           lea      rax, [rsp+20H]\r\n\r\nG_M16477_IG04:\r\n       48896518             mov      qword ptr [rbp+18H], rsp\r\n       85C9                 test     ecx, ecx\r\n       7C31                 jl       SHORT G_M16477_IG08\r\n\r\nG_M16477_IG05:\r\n       488D5508             lea      rdx, bword ptr [rbp+08H]\r\n       488902               mov      bword ptr [rdx], rax\r\n       894A08               mov      dword ptr [rdx+8], ecx\r\n       488D4D08             lea      rcx, bword ptr [rbp+08H]\r\n       E86FFFFFFF           call     Program:Consume(struct)\r\n       48B9818FC0ED9AA70000 mov      rcx, 0xA79AEDC08F81\r\n       48394D00             cmp      qword ptr [rbp], rcx\r\n       7405                 je       SHORT G_M16477_IG06\r\n       E8CAEDC35F           call     CORINFO_HELP_FAIL_FAST\r\n\r\nG_M16477_IG06:\r\n       90                   nop      \r\n\r\nG_M16477_IG07:\r\n       488D6520             lea      rsp, [rbp+20H]\r\n       5E                   pop      rsi\r\n       5F                   pop      rdi\r\n       5D                   pop      rbp\r\n       C3                   ret      \r\n\r\nG_M16477_IG08:\r\n       E8BC0E7F59           call     ThrowHelper:ThrowArgumentOutOfRangeException()\r\n       CC                   int3     \r\n\r\n; Total bytes of code 149, prolog size 49 for method Program:StackAllocDynamicAsSpan(int)\r\n; ============================================================\r\n```\r\n</p>\r\n</details>\r\n\r\n\r\n\r\n"},{"Id":"7634153269","Type":"PullRequestEvent","CreatedAt":"2018-05-06T14:30:20","Actor":"dotnet-maestro-bot","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17894","RelatedDescription":"Opened pull request \"Update CoreClr, CoreFx to preview1-26506-04, preview1-26506-04, respectively (master)\" (#17894) at dotnet/coreclr","RelatedBody":"/cc @dotnet/coreclr-auto-update-notify"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7634946368","Type":"IssuesEvent","CreatedAt":"2018-05-06T23:08:49","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/9210","RelatedDescription":"Closed issue \"--list-sdks is broken\" (#9210) at dotnet/cli","RelatedBody":"I'm positive I remember --list-sdks working before, but I can't get it to work now:\r\n```\r\n> dotnet --list-sdks\r\nUnknown option: --list-sdks\r\n.NET Command Line Tools (2.1.105)\r\n```\r\n\r\nIronically:\r\n```\r\n> dotnet\r\n\r\nUsage: dotnet [options]\r\nUsage: dotnet [path-to-application]\r\n\r\nOptions:\r\n  -h|--help         Display help.\r\n  --info            Display .NET Core information..\r\n  --list-sdks       Display the installed SDKs.\r\n```\r\n\r\nAlso, there is a double period after `Display .NET Core information` which should be fixed.\r\n\r\nWhat information do you need? I have only SDKs 1.1.8 x64 and 2.1.105 x64 installed."},{"Id":"7634910496","Type":"IssuesEvent","CreatedAt":"2018-05-06T22:41:08","Actor":"jnm2","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/9210","RelatedDescription":"Opened issue \"--list-sdks is broken\" (#9210) at dotnet/cli","RelatedBody":"I'm positive I remember --list-sdks working before, but I can't get it to work now:\r\n```\r\n> dotnet --list-sdks\r\nUnknown option: --list-sdks\r\n.NET Command Line Tools (2.1.105)\r\n```\r\n\r\nIronically:\r\n```\r\n> dotnet\r\n\r\nUsage: dotnet [options]\r\nUsage: dotnet [path-to-application]\r\n\r\nOptions:\r\n  -h|--help         Display help.\r\n  --info            Display .NET Core information..\r\n  --list-sdks       Display the installed SDKs.\r\n```\r\n\r\nAlso, there is a double period after `Display .NET Core information` which should be fixed.\r\n\r\nWhat information do you need? I have only SDKs 1.1.8 x64 and 2.1.105 x64 installed."},{"Id":"7633379428","Type":"IssuesEvent","CreatedAt":"2018-05-06T04:08:03","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/cli/issues/9208","RelatedDescription":"Reopened issue \"Can't invoke global tool in bash\" (#9208) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\nInstall a global tool.\r\n\r\n## Expected  behavior\r\n\r\nGlobal tool should exist.\r\n\r\n## Actual behavior\r\n\r\n```\r\nroot@f43f17fa565a:/# dotnet tool list -g\r\nPackage Id           Version      Commands\r\n------------------------------------------\r\nnuke.globaltool      1.0.0        nuke\r\nroot@f43f17fa565a:/# bash\r\nroot@f43f17fa565a:/# nuke\r\nbash: nuke: command not found\r\n```\r\n\r\nEverything works inside Windows.\r\n\r\n## Environment data\r\n```\r\nroot@f43f17fa565a:/# dotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.300-preview2-008530\r\n Commit:    822ae6d43a\r\n\r\nRuntime Environment:\r\n OS Name:     debian\r\n OS Version:  9\r\n OS Platform: Linux\r\n RID:         debian.9-x64\r\n Base Path:   /usr/share/dotnet/sdk/2.1.300-preview2-008530/\r\n\r\nHost (useful for support):\r\n  Version: 2.1.0-preview2-26406-04\r\n  Commit:  6833f3026b\r\n\r\n.NET Core SDKs installed:\r\n  2.1.300-preview2-008530 [/usr/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0-preview2-final [/usr/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0-preview2-final [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.0-preview2-26406-04 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"7633366397","Type":"IssuesEvent","CreatedAt":"2018-05-06T03:55:02","Actor":"matkoch","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/9208","RelatedDescription":"Closed issue \"Can't invoke global tool in bash\" (#9208) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\nInstall a global tool.\r\n\r\n## Expected  behavior\r\n\r\nGlobal tool should exist.\r\n\r\n## Actual behavior\r\n\r\n```\r\nroot@f43f17fa565a:/# dotnet tool list -g\r\nPackage Id           Version      Commands\r\n------------------------------------------\r\nnuke.globaltool      1.0.0        nuke\r\nroot@f43f17fa565a:/# bash\r\nroot@f43f17fa565a:/# nuke\r\nbash: nuke: command not found\r\n```\r\n\r\nEverything works inside Windows.\r\n\r\n## Environment data\r\n```\r\nroot@f43f17fa565a:/# dotnet --info\r\n.NET Core SDK (reflecting any global.json):\r\n Version:   2.1.300-preview2-008530\r\n Commit:    822ae6d43a\r\n\r\nRuntime Environment:\r\n OS Name:     debian\r\n OS Version:  9\r\n OS Platform: Linux\r\n RID:         debian.9-x64\r\n Base Path:   /usr/share/dotnet/sdk/2.1.300-preview2-008530/\r\n\r\nHost (useful for support):\r\n  Version: 2.1.0-preview2-26406-04\r\n  Commit:  6833f3026b\r\n\r\n.NET Core SDKs installed:\r\n  2.1.300-preview2-008530 [/usr/share/dotnet/sdk]\r\n\r\n.NET Core runtimes installed:\r\n  Microsoft.AspNetCore.All 2.1.0-preview2-final [/usr/share/dotnet/shared/Microsoft.AspNetCore.All]\r\n  Microsoft.AspNetCore.App 2.1.0-preview2-final [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]\r\n  Microsoft.NETCore.App 2.1.0-preview2-26406-04 [/usr/share/dotnet/shared/Microsoft.NETCore.App]\r\n\r\nTo install additional .NET Core runtimes or SDKs:\r\n  https://aka.ms/dotnet-download\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"7633361026","Type":"IssuesEvent","CreatedAt":"2018-05-06T03:49:21","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/9209","RelatedDescription":"Closed issue \"dotnet tool install --source-feed doesn't support relative local paths\" (#9209) at dotnet/cli","RelatedBody":"As described in the headline. On Windows this would work. On UNIX an absolute path is required.\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7619511676","Type":"PullRequestEvent","CreatedAt":"2018-05-02T21:29:23","Actor":"ericstj","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/722","RelatedDescription":"Merged pull request \"Fix LockFileCache when SDK and trimming task are using different NuGet dlls\" (#722) at dotnet/standard","RelatedBody":"Previously I copied the SDK caching code for caching the loaded lock file across task boundaries.\r\n\r\nThis became a problem when the SDK updated their NuGet version.\r\n\r\nWe didn't agree on the type that belonged in the cache.\r\n\r\nAvoid this by using a versioned prefix for the cache key.  Of course we will no longer share the read if we happen to be on the same version, but this is safer.\r\n\r\n/cc @nguerrera @dsplaisted "},{"Id":"7619284155","Type":"PullRequestEvent","CreatedAt":"2018-05-02T20:41:05","Actor":"ericstj","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/722","RelatedDescription":"Opened pull request \"Fix LockFileCache when SDK and trimming task are using different NuGet dlls\" (#722) at dotnet/standard","RelatedBody":"Previously I copied the SDK caching code for caching the loaded lock file across task boundaries.\r\n\r\nThis became a problem when the SDK updated their NuGet version.\r\n\r\nWe didn't agree on the type that belonged in the cache.\r\n\r\nAvoid this by using a versioned prefix for the cache key.  Of course we will no longer share the read if we happen to be on the same version, but this is safer.\r\n\r\n/cc @nguerrera @dsplaisted "},{"Id":"7613299458","Type":"PullRequestEvent","CreatedAt":"2018-05-01T20:42:40","Actor":"dotnet-maestro-bot","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/721","RelatedDescription":"Opened pull request \"Update BuildTools to preview1-02801-01 (master)\" (#721) at dotnet/standard","RelatedBody":""}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7634968034","Type":"IssuesEvent","CreatedAt":"2018-05-06T23:25:46","Actor":"stephentoub","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/29537","RelatedDescription":"Closed issue \"DateTime.Parse has strange behavior!\" (#29537) at dotnet/corefx","RelatedBody":"DateTime.Parse(string s) has strange behavior!\r\nAccording to docs at: https://docs.microsoft.com/ar-sa/dotnet/api/system.datetime.parse?view=netframework-4.7.1#System_DateTime_Parse_System_String_ :\r\n\r\n>This overload attempts to parse s by using the formatting conventions of the current culture. The current culture is indicated by the CultureInfo.CurrentCulture property.\r\n\r\nThis means:\r\n\r\n`var D = DateTime.Parse(\"1/15/2018\");`\r\n\r\nis equivilant to:\r\n\r\n`var D = DateTime.Parse(\"1/15/2018\", CultureInfo.CurrentCulture);`\r\n\r\nSo, that code will have different results on different PCs!.. On Windows with Arabic culture, that code will cause an exception, because this culture uses the format: \"dd/MM/yyyy\" and there is no 15th month!\r\n\r\nThis is a bad error prone design! This overload should work with the Invariant Culture (\"en\"), and if anyone wants to change that, uses the second param. in the other overloads.\r\n\r\nI want to suggest to fix this behavior but I'm afraid of the famous reply: \"This would be a breaking change!\". I think it will worth a warring, and if it is fixed, IDE can offer to replace all old DateTime.Parse(s) with DateTime.Parse(s, CultureInfo.CurrentCulture) to maintain the same old behavior!\r\nOtherwise, IDE should offer to replace any new DateTime.Parse(s) with DateTime.Parse(s, new CultureInfo(\"en\"))"},{"Id":"7634882251","Type":"IssuesEvent","CreatedAt":"2018-05-06T22:19:54","Actor":"MohammadHamdyGhanem","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/29537","RelatedDescription":"Opened issue \"DateTime.Parse has strange behavior!\" (#29537) at dotnet/corefx","RelatedBody":"DateTime.Parse(string s) has strange behavior!\r\nAccording to docs at: https://docs.microsoft.com/ar-sa/dotnet/api/system.datetime.parse?view=netframework-4.7.1#System_DateTime_Parse_System_String_ :\r\n\r\n>This overload attempts to parse s by using the formatting conventions of the current culture. The current culture is indicated by the CultureInfo.CurrentCulture property.\r\n\r\nThis means:\r\n\r\n`var D = DateTime.Parse(\"1/15/2018\");`\r\n\r\nis equivilant to:\r\n\r\n`var D = DateTime.Parse(\"1/15/2018\", CultureInfo.CurrentCulture);`\r\n\r\nSo, that code will have different results on different PCs!.. On Windows with Arabic culture, that code will cause an exception, because this culture uses the format: \"dd/MM/yyyy\" and there is no 15th month!\r\n\r\nThis is a bad error prone design! This overload should work with the Invariant Culture (\"en\"), and if anyone wants to change that, uses the second param. in the other overloads.\r\n\r\nI want to suggest to fix this behavior but I'm afraid of the famous reply: \"This would be a breaking change!\". I think it will worth a warring, and if it is fixed, IDE can offer to replace all old DateTime.Parse(s) with DateTime.Parse(s, CultureInfo.CurrentCulture) to maintain the same old behavior!\r\nOtherwise, IDE should offer to replace any new DateTime.Parse(s) with DateTime.Parse(s, new CultureInfo(\"en\"))"},{"Id":"7634740463","Type":"IssuesEvent","CreatedAt":"2018-05-06T20:42:23","Actor":"davidsh","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/17174","RelatedDescription":"Closed issue \"HttpClient crashes when reading a stream with trailing headers on Linux\" (#17174) at dotnet/corefx","RelatedBody":"HttpClient ignores trailing headers on windows, however crash when the same headers are read on Ubuntu with\r\n\r\nSystem.Net.Http.HttpRequestException : Error while copying content to a stream.\r\n---- System.IO.IOException : The read operation failed, see inner exception.\r\n-------- System.Net.Http.CurlException : Failed writing received data to disk/application\r\nStack Trace:\r\n\r\nFailing test on ubuntu\r\n\r\nhttps://travis-ci.org/Drawaes/CondenserDotNet/builds/211566793\r\n\r\nPassing on windows\r\n\r\nhttps://ci.appveyor.com/project/Drawaes/condenserdotnet/build/0.7.418"},{"Id":"7634714340","Type":"IssuesEvent","CreatedAt":"2018-05-06T20:25:22","Actor":"davidsh","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/20066","RelatedDescription":"Closed issue \"HttpClient fails with \"The server returned an invalid or unrecognized response\" when using Apache mod_proxy\" (#20066) at dotnet/corefx","RelatedBody":"I have an issue in production where the heartbeat _GetAsync_ requests that a Windows Server 2012 R2 sends using HttpClient fail intermittently. Around 1 in 10 requests fail with: \r\n\r\n```shell\r\nUnhandled Exception: System.Net.Http.HttpRequestException: An error occurred while sending the request. ---> System.Net.Http.WinHttpException: The server returned an invalid or unrecognized response\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()\r\n   at System.Net.Http.WinHttpHandler.<StartRequest>d__105.MoveNext()\r\n   --- End of inner exception stack trace ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()\r\n   at System.Net.Http.HttpClient.<FinishSendAsync>d__58.MoveNext()\r\n--- End of stack trace from previous location where exception was thrown ---\r\n   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()\r\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\r\n   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()\r\n   at Program.Main(String[] args) \r\n```\r\nThe servers responding to these heartbeat are CentOS 7.1 with Apache mod_proxy version: httpd-2.4.6-45.el7.centos.4.x86_64\r\nAll applications are .NET Core 1.1.\r\n\r\nI was able to narrow down the issue to the combination of Client on Windows and Kestrel behind Apache. I created a [repo](https://github.com/bruno-garcia/apache-mod-proxy-unrecognized-response) with a script to reproduce the issue.\r\n\r\nI'm unable to reproduce the issue when the client is running on Linux.\r\nAlso, if I remove the break between requests, the issue doesn't not happen. If I change the interval from 5 seconds to 4 or 6 seconds, the issue doesn't happen either. \r\n\r\nThat is in fact my current work around."},{"Id":"7634697421","Type":"IssuesEvent","CreatedAt":"2018-05-06T20:14:14","Actor":"davidsh","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/10146","RelatedDescription":"Closed issue \"Documentation: Update docs on supported libcurl features on Linux and OSX.\" (#10146) at dotnet/corefx","RelatedBody":"This is a cross post from dotnet/KestrelHttpServer and WCF. I've closed that issue as it is not Kestrel related, but I apologize for the cross-posting, I'm still learning about the different repositories and what functions are where.\r\n\r\n I have some functionality that is working on windows, but fails on all of the unix droplets I've spun up. I'm seeing one type of failure message on ubuntu 14.04 and debian 8.5 and another type on fedora 23 and centos 7 when using BasicHttpsbinding and the connection factory. I've tried using the svcutil to generate the interface and I've also used the new WCF Connected Services utility and I've even crafted the entire message by hand and used SendAsync and PostAsync. All scenarios exhibit the same behavior.\r\n\r\nHere's the code:\r\n```c#\r\n    private string invokeSsoSoapRequest(string xmlRequest)\r\n    {\r\n        ChannelFactory factory = null;\r\n        SingleSignOnSoap serviceProxy = null;\r\n        var binding = new BasicHttpsBinding();\r\n        binding.Security.Mode = BasicHttpsSecurityMode.Transport;\r\n        binding.Security.Transport.ClientCredentialType = HttpClientCredentialType.Certificate;\r\n\r\n        var baseAddress = new Uri(mySettings.ClientUrl);\r\n        var endpointAddress = new EndpointAddress(baseAddress);\r\n\r\n        X509Certificate2Collection collection = new X509Certificate2Collection();\r\n\r\n        if (RuntimeEnvironment.OperatingSystemPlatform == Platform.Windows)\r\n        {\r\n            //windows file location\r\n            collection.Import(mySettings.ClientPrivateKeyWindowsPath, mySettings.ClientPfxPass, X509KeyStorageFlags.PersistKeySet);\r\n        }else\r\n        {\r\n            collection.Import(mySettings.ClientPrivateKeyUnixPath, mySettings.ClientPfxPass, X509KeyStorageFlags.PersistKeySet);\r\n        }\r\n\r\n        //parse pfx for client auth key\r\n        factory = new ChannelFactory<SingleSignOnSoap>(binding, new EndpointAddress(baseAddress));\r\n        foreach (X509Certificate2 cert in collection)\r\n        {\r\n            if (cert.HasPrivateKey)\r\n            {\r\n                factory.Credentials.ClientCertificate.Certificate = cert;\r\n            }\r\n        }\r\n        serviceProxy = factory.CreateChannel();\r\n        RequestTicketRequest request = new RequestTicketRequest();\r\n        RequestTicketRequestBody body = new RequestTicketRequestBody();\r\n        request.Body = body;\r\n        request.Body.sRequestXML = xmlRequest;\r\n        return serviceProxy.RequestTicket(request).Body.RequestTicketResult;\r\n    }\r\n}\r\n```\r\n\r\n`\r\n**Here are the errors I'm getting on Ubuntu and Debian:**\r\n\r\n> TimeoutException: The HTTP request to 'https://services.**********SingleSignOn.asmx' has exceeded the allotted timeout of 00:01:00. The time allotted to this operation may have been a portion of a longer timeout.\r\n\r\nThe above dotnet error claims the service timed out while waiting for a response (00:01:00), but a tshark trace shows the SOAP response negotiation failed when the client sent [RST, ACK] back the the remote webservice. See image below. The same trace in windows environment shows no errors and the transaction works and as you can see a few lines above, the server hello, certificate, and key exchanges appear to be successful, so I don't think I'm dealing with a cert issue.\r\n\r\n![image](https://cloud.githubusercontent.com/assets/596849/16950334/60888112-4d85-11e6-8d29-66a2a8badd9b.png)\r\n\r\nI've also tried this in docker just to rule out any host config issues with the following docker config and see the same error:\r\n\r\n> FROM microsoft/dotnet:1.0.0-preview2-sdk\r\n> RUN mkdir -p /dotnetapp\r\n> WORKDIR /dotnetapp\r\n> EXPOSE 5000\r\n> COPY . /dotnetapp\r\n> RUN dotnet restore\r\n> ENTRYPOINT [\"dotnet\", \"run\"]`\r\n\r\nI've tried this on Fedora and Centos, but get a different error related to the curl version that ships with those distros. I'm not entirely sure how to fix it, but I suspect I'd have the same issue if I got past it.\r\n\r\n**Here is the error I received on Fedora and Centos:**\r\n\r\n> System.PlatformNotSupportedException: The libcurl library in use (7.43.0) and its SSL backend (\"NSS/3.24 Basic ECC\") do not support custom handling of certificates. A libcurl built with OpenSSL is required.\r\n\r\n*As a note, I compiled 7.50 curl against openssl and still received the above error. I'm a little bit of a linux noob, so I'm not sure if there's a way to force dotnet core to use the 7.5 installation, but as of now, dotnet core is still using 7.4.3.\r\n\r\nHere is my project.json\r\n`\r\n{\r\n  \"dependencies\": {\r\n    \"Microsoft.NETCore.App\": {\r\n      \"version\": \"1.0.0\",\r\n      \"type\": \"platform\"\r\n    },\r\n    \"Microsoft.AspNetCore.Mvc\": \"1.0.0\",\r\n    \"Microsoft.AspNetCore.Server.Kestrel\": \"1.0.0\",\r\n    \"Microsoft.Extensions.Configuration.EnvironmentVariables\": \"1.0.0\",\r\n    \"Microsoft.Extensions.Configuration.FileExtensions\": \"1.0.0\",\r\n    \"Microsoft.Extensions.Configuration.Json\": \"1.0.0\",\r\n    \"Microsoft.Extensions.Logging\": \"1.0.0\",\r\n    \"Microsoft.Extensions.Logging.Console\": \"1.0.0\",\r\n    \"Microsoft.Extensions.Logging.Debug\": \"1.0.0\",\r\n    \"Microsoft.Extensions.Options.ConfigurationExtensions\": \"1.0.0\",\r\n    \"System.ServiceModel.Http\": \"4.1.0\",\r\n    \"System.Xml.XmlSerializer\": \"4.0.11\",\r\n    \"Microsoft.Extensions.Options\": \"1.0.0\",\r\n    \"System.Runtime.Extensions\": \"4.1.0\",\r\n    \"System.Text.Encoding\": \"4.0.11\",\r\n    \"System.Xml.XmlDocument\": \"4.0.1\",\r\n    \"System.Xml.XDocument\": \"4.0.11\",\r\n    \"System.Security.Cryptography.X509Certificates\": \"4.1.0\",\r\n    \"System.Security.Cryptography.Csp\": \"4.0.0\",\r\n    \"system.xml.xpath.xmldocument\": \"4.0.0\",\r\n    \"JsonWebTokens\": \"1.2.0\",\r\n    \"Microsoft.AspNetCore.Diagnostics\": \"1.0.0\",\r\n    \"Microsoft.AspNetCore.Server.IISIntegration\": \"1.0.0\"\r\n  },\r\n  \"tools\": {\r\n  },\r\n  \"frameworks\": {\r\n    \"netcoreapp1.0\": {\r\n      \"imports\": [\r\n        \"dotnet5.6\"\r\n      ]\r\n    }\r\n  },\r\n  \"buildOptions\": {\r\n    \"emitEntryPoint\": true,\r\n    \"preserveCompilationContext\": true,\r\n    \"debugType\": \"portable\"\r\n  },\r\n  \"runtimeOptions\": {\r\n    \"configProperties\": {\r\n      \"System.GC.Server\": true\r\n    }\r\n  },\r\n  \"publishOptions\": {\r\n    \"include\": [\r\n      \"wwwroot\",\r\n      \"Views\",\r\n      \"Areas/**/Views\",\r\n      \"appsettings.json\",\r\n      \"web.config\",\r\n      \"Dockerfile\"\r\n    ]\r\n  },\r\n  \"scripts\": {\r\n    \"postpublish\": [\r\n      \"dotnet publish-iis --publish-folder %publish:OutputPath% --framework %publish:FullTargetFramework%\"\r\n    ]\r\n  }\r\n}`\r\n\r\nAs I said on my other post, I would appreciate any help and know that it's more than plausible I've done something wrong here. This is the only piece of this API stack that we haven't been able to port. \r\n\r\nLastly, if I can provide any other information, please let me know!\r\nThank you!\r\n"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7635622266","Type":"IssuesEvent","CreatedAt":"2018-05-07T05:02:07","Actor":"davkean","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/26672","RelatedDescription":"Opened issue \"Opening a Visual Basic file resulted in >100 editor errors about NullReferenceException in DeferredContentFrameworkElementFactory.CreateElement\" (#26672) at dotnet/roslyn","RelatedBody":"No repro, just opened a Visual Basic source file, resulting in:\r\n\r\n```\r\n\r\nERROR | System.AggregateException: One or more errors occurred. ---> System.NullReferenceException: Object reference not set to an instance of an object.   \r\nat Microsoft.CodeAnalysis.Editor.QuickInfo.DeferredContentFrameworkElementFactory.CreateElement(IDeferredQuickInfoContent deferredContent)   \r\nat Microsoft.CodeAnalysis.Editor.QuickInfo.QuickInfoDisplayDeferredContentConverter.CreateFrameworkElement(IDeferredQuickInfoContent deferredContent, DeferredContentFrameworkElementFactory factory)   \r\nat Microsoft.CodeAnalysis.Editor.QuickInfo.DeferredContentFrameworkElementFactory.CreateElement(IDeferredQuickInfoContent deferredContent)   \r\nat Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.QuickInfo.Presentation.QuickInfoPresenter.QuickInfoPresenterSession.AugmentQuickInfoSession(IList`1 quickInfoContent, ITrackingSpan& applicableToSpan)   \r\nat Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.QuickInfo.Presentation.QuickInfoPresenter.QuickInfoSource.AugmentQuickInfoSession(IQuickInfoSession session, IList`1 quickInfoContent, ITrackingSpan& applicableToSpan)   \r\nat Microsoft.VisualStudio.Language.Intellisense.Implementation.LegacyQuickInfoSource.AugmentQuickInfoSession(IAsyncQuickInfoSession session, IList`1 content, ITrackingSpan& applicableToSpan)   \r\nat Microsoft.VisualStudio.Language.Intellisense.Implementation.AsyncQuickInfoSession.<TryComputeContentFromLegacySourceAsync>d__45.MoveNext() --- End of stack trace from previous location where exception was thrown ---    \r\nat System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)   \r\nat Microsoft.VisualStudio.Language.Intellisense.Implementation.AsyncQuickInfoSession.<ComputeSourceContentAsync>d__44.MoveNext()    \r\n--- End of inner exception stack trace \r\n--- ---> (Inner Exception #0) System.NullReferenceException: Object reference not set to an instance of an object.   \r\nat Microsoft.CodeAnalysis.Editor.QuickInfo.DeferredContentFrameworkElementFactory.CreateElement(IDeferredQuickInfoContent deferredContent)   \r\nat Microsoft.CodeAnalysis.Editor.QuickInfo.QuickInfoDisplayDeferredContentConverter.CreateFrameworkElement(IDeferredQuickInfoContent deferredContent, DeferredContentFrameworkElementFactory factory)   \r\nat Microsoft.CodeAnalysis.Editor.QuickInfo.DeferredContentFrameworkElementFactory.CreateElement(IDeferredQuickInfoContent deferredContent)   \r\nat Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.QuickInfo.Presentation.QuickInfoPresenter.QuickInfoPresenterSession.AugmentQuickInfoSession(IList`1 quickInfoContent, ITrackingSpan& applicableToSpan)   \r\nat Microsoft.CodeAnalysis.Editor.Implementation.IntelliSense.QuickInfo.Presentation.QuickInfoPresenter.QuickInfoSource.AugmentQuickInfoSession(IQuickInfoSession session, IList`1 quickInfoContent, ITrackingSpan& applicableToSpan)   \r\nat Microsoft.VisualStudio.Language.Intellisense.Implementation.LegacyQuickInfoSource.AugmentQuickInfoSession(IAsyncQuickInfoSession session, IList`1 content, ITrackingSpan& applicableToSpan)   \r\nat Microsoft.VisualStudio.Language.Intellisense.Implementation.AsyncQuickInfoSession.<TryComputeContentFromLegacySourceAsync>d__45.MoveNext() \r\n--- End of stack trace from previous location where exception was thrown ---    \r\nat System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)   \r\nat Microsoft.VisualStudio.Language.Intellisense.Implementation.AsyncQuickInfoSession.<ComputeSourceContentAsync>d__44.MoveNext()<---\r\n-- | --\r\n```\r\n\r\nLooked at [ActivityLog.zip](https://github.com/dotnet/roslyn/files/1978545/ActivityLog.zip) and this was output about ~100 times.\r\n\r\n"},{"Id":"7635537840","Type":"PullRequestEvent","CreatedAt":"2018-05-07T04:21:20","Actor":"CyrusNajmabadi","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/26671","RelatedDescription":"Opened pull request \"Use appropriate analyzer category for these analyzers.\" (#26671) at dotnet/roslyn","RelatedBody":"Noticed while reviewing: https://github.com/dotnet/roslyn/pull/26590\r\n\r\nA lot of our built in analyzers use to broad a analyzer-category.  This means they will run again, even when edits happen that won't affect them.\r\n\r\nSpecifically, we have the concept of 'SemanticSpan' analysis.  This category can be thought of \"do i need to be rerun if a method body *i'm* contained in changes?\"  vs. \"SemanticDocument\" analysis which can be thought of \"do i need to be rerun if anything in this document changes?\".  \"Remove unnecessary imports\" is a good example of the latter.  When you make an edit to any method, you'd have to reconsider if your imports are used or not.  However, for something like \"use object initializer\" you don't need to examine all the methods in a file when one method body is edited.\r\n\r\n"},{"Id":"7635530469","Type":"PullRequestEvent","CreatedAt":"2018-05-07T04:17:59","Actor":"CyrusNajmabadi","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/26670","RelatedDescription":"Opened pull request \"Simplify our use of an extension.\" (#26670) at dotnet/roslyn","RelatedBody":""},{"Id":"7635353767","Type":"IssuesEvent","CreatedAt":"2018-05-07T02:58:31","Actor":"davkean","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/26669","RelatedDescription":"Opened issue \"Decompile uses C# syntax for Visual Basic projects resulting in broken navigation\" (#26669) at dotnet/roslyn","RelatedBody":"_From @davkean on May 7, 2018 1:42_\n\n1. \r\n``` VB\r\nImports System.Windows.Forms\r\n\r\nModule Module1\r\n    Private ReadOnly _CF_UNICODE As String = DataFormats.UnicodeText ' <- Decompile this\r\n\r\nEnd Module\r\n\r\n```\r\n\r\nExpected: For the file to be decompiled in VB and to navigate to UnicodeText\r\nActual: The file is in C# syntax and it fails to navigate\n\n_Copied from original issue: dotnet/project-system#3519_"},{"Id":"7635228058","Type":"IssuesEvent","CreatedAt":"2018-05-07T02:02:24","Actor":"vsfeedback","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/26668","RelatedDescription":"Opened issue \"Inlining a ref variable\" (#26668) at dotnet/roslyn","RelatedBody":"VS2017 suggests I inline the temporary variable &quot;value&quot; in the following code:\n\nushort value = 0;\nint stat = L43_SubFrmWordRd(ref value, sf, word, A717Chan, m_handle);\nreturn (short)(stat == 0 ? value : -1);\n\nBy replacing it with this:\n\nushort value = 0;\nint stat = L43_SubFrmWordRd(ref value, sf, word, A717Chan, m_handle);\nreturn (short)(stat == 0 ? 0 : -1);\n\nVS appears to be completely oblivious to the fact that &quot;value&quot; is being passed by reference and its value could change.\n\n_This issue has been moved from https://developercommunity.visualstudio.com/content/problem/243165/inlining-a-ref-variable.html\nVSTS ticketId: 609147_\n_These are the original issue comments:_\n(no comments)\n_These are the original issue solutions:_\n(no solutions)"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7635342922","Type":"IssuesEvent","CreatedAt":"2018-05-07T02:53:32","Actor":"z1c0","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corert/issues/5766","RelatedDescription":"Closed issue \"[ILVerify] Tokens in referenced .netmodule are not resolved.\" (#5766) at dotnet/corert","RelatedBody":"Verifying an application that references a **.netmodule** (full CLR only) generates an \"Unable to resolve token\" error.\r\nTokens that are defined in the .netmodule cannot be resolved correctly.\r\n\r\nCan be reproduced with attached sample application.\r\n[netmodule.zip](https://github.com/dotnet/corert/files/1966964/netmodule.zip)\r\n"},{"Id":"7635014785","Type":"IssuesEvent","CreatedAt":"2018-05-07T00:00:37","Actor":"royoung","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/5779","RelatedDescription":"Opened issue \"Way of setting File version for resultant AOT exe\" (#5779) at dotnet/corert","RelatedBody":"Is there a way to control the file version attributes for the resultant native AOT exe (attributes on main IL asssembly such as AssemblyFileVersion are seemingly ignored)?"},{"Id":"7634738379","Type":"IssuesEvent","CreatedAt":"2018-05-06T20:40:57","Actor":"yowl","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/5778","RelatedDescription":"Opened issue \"wasm: Cast from int to double causes compilation to emit llvm_trap\" (#5778) at dotnet/corert","RelatedBody":"Add the following to HelloWasm/Program.cs:\r\n\r\n        int toDoubleInt = 1;\r\n        double castedDouble = (double)toDoubleInt;\r\n        if (castedDouble == 1d)\r\n        {\r\n            PrintLine(\"(double) cast test : Ok.\");\r\n        }\r\n        else\r\n        {\r\n            PrintLine(\"expected 1d, but was \" + castedDouble.ToString());\r\n            PrintLine(\"(double) cast test : Failed.\");\r\n            return 0;\r\n        }\r\n\r\nAnd it fails to compile.  Compiling to asm.js shows in HelloWasm.js at HelloWasm_Program__Main:\r\n\r\n    $175 = ((($0)) + 177|0);\r\n    HEAP8[$175>>0] = 0;\r\n    $176 = ((($0)) + 178|0);\r\n    HEAP8[$176>>0] = 0;\r\n    $177 = ((($0)) + 179|0);\r\n    HEAP8[$177>>0] = 0;\r\n    _llvm_trap();\r\n    // unreachable;\r\n    }\r\n"},{"Id":"7634420532","Type":"IssuesEvent","CreatedAt":"2018-05-06T17:14:11","Actor":"yowl","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/5777","RelatedDescription":"Opened issue \"How to implement Random.NextDouble for wasm\" (#5777) at dotnet/corert","RelatedBody":"I want to create some c# that ultimately goes to JS Math.random to implement some thing like NextDouble in the Random class.  I see when I compile HelloWorld to asm.js calls to clock() declared as:\r\n\r\n```    [DllImport(\"*\")]\r\n    private static unsafe extern long clock();```\r\n\r\nare translated into some js, but how does that happen and is there a list of symbols that can be imported like this.  I though it might be symbols from libc but trying to extern rand()\r\n\r\n```    [DllImport(\"*\")]\r\n    private static unsafe extern long rand();```\r\n\r\nJust causes a trap to be generated.  Following on from this would be the question, is this the right direction to  take if  System.Random was to be implemented for wasm target?\r\n"},{"Id":"7633903545","Type":"IssuesEvent","CreatedAt":"2018-05-06T11:43:56","Actor":"wieslawsoltes","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/issues/5776","RelatedDescription":"Opened issue \"TrySetApartmentState and GetApartmentState not implemented.\" (#5776) at dotnet/corert","RelatedBody":"When I try to call `Thread.CurrentThread.TrySetApartmentState(ApartmentState.STA); ` I get the following exception:\r\n```\r\nUnhandled Exception: System.NullReferenceException: Object reference not set to an instance of an object.\r\n   at Internal.Runtime.Augments.RuntimeThread.TrySetApartmentState(ApartmentState) + 0xa\r\n   at Core2D.Avalonia.Program.Main(String[]) + 0x2f\r\n   at Core2D.Avalonia!<BaseAddress>+0x18eaf3a\r\n```\r\nhttps://github.com/dotnet/corert/blob/91d08ec94192bd39e126cea2dc34795639726e2f/src/System.Private.CoreLib/src/Internal/Runtime/Augments/RuntimeThread.Windows.cs#L287\r\n\r\nIs this no implemented or not supported? \r\n\r\nI need to set `ApartmentState` to STA in order to get drag and drop support for Windows in my application.\r\n\r\nAnd same goes for `GetApartmentState` method:\r\n```\r\nObject reference not set to an instance of an object.\r\n   at Internal.Runtime.Augments.RuntimeThread.GetApartmentState() + 0xa\r\n   at Avalonia.Win32.OleContext.IsValidOleThread() + 0x3b\r\n   at Avalonia.Win32.OleContext.get_Current() + 0xa\r\n   at Avalonia.Win32.Win32Platform.Initialize(Boolean) + 0x1b5\r\n   at Avalonia.Controls.AppBuilderBase`1.Setup() + 0x99\r\n   at Core2D.Avalonia.Program.Main(String[]) + 0x28c\r\n```\r\nhttps://github.com/dotnet/corert/blob/91d08ec94192bd39e126cea2dc34795639726e2f/src/System.Private.CoreLib/src/Internal/Runtime/Augments/RuntimeThread.Windows.cs#L286\r\n\r\nVersion:  Microsoft.DotNet.ILCompiler 1.0.0-alpha-26505-01"},{"Id":"7633372622","Type":"PullRequestEvent","CreatedAt":"2018-05-06T04:01:11","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5775","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5775) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7633314183","Type":"PullRequestEvent","CreatedAt":"2018-05-06T03:01:00","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5775","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5775) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7632970566","Type":"PullRequestEvent","CreatedAt":"2018-05-05T21:28:24","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5767","RelatedDescription":"Merged pull request \"Enable resolving of .netmodule references\" (#5767) at dotnet/corert","RelatedBody":"This PR addresses issue https://github.com/dotnet/corert/issues/5766\r\n\r\n`HandleKind.ModuleReference` was not handled until now and resulted in a `BadImageFormatException`.\r\n\r\nThe newly added method `ResolveModuleReference` now takes care of this scenario.\r\n\r\nMost code could be shared with `ResolveAssemblyReference` but this required to use a plain string instead of an `AssemblyName` object in a couple of places.\r\n"}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7633367126","Type":"IssuesEvent","CreatedAt":"2018-05-06T03:55:44","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1100","RelatedDescription":"Closed issue \"PP file output is not generated during the build\" (#1100) at dotnet/sdk","RelatedBody":"PP file output is not being generated during the build.\r\n\r\n### Steps\r\n1. dotnet new\r\n1. dotnet add package contentfilesexample -v 1.0.2\r\n1. dotnet restore\r\n1. Add to Program.cs ``Console.WriteLine(ExampleReader.GetDataText());``\r\n1. dotnet build\r\n\r\n### Expected\r\nExampleReader will be in the current namespace from the pp file.\r\n\r\n### Actual\r\nExampleReader does not exist\r\n\r\nOriginally reported here https://github.com/NuGet/Home/issues/4803 //cc @damianh\r\n\r\nFrom @natidea \r\n\r\nI took a look at the pp file transformation issue and found a couple of things:\r\n- For the [ContentFilesExample](https://www.nuget.org/packages/ContentFilesExample/) package, I don't see pp files listed as dependencies in the assets file. They occur in the \"libraries\" but we are only processing content from the active TFM here: [Microsoft.PackageDependencyResolution.targets#L213](https://github.com/natidea/sdk/blob/0e64439c0660590ef93b1d86a6811a056b791bd8/src/Tasks/Microsoft.NET.Build.Tasks/build/Microsoft.PackageDependencyResolution.targets#L213)\r\n- For the [LiteGuard](https://github.com/adamralph/liteguard) package, I do see the pp files in the dependencies, but they were not being processed because `CopyLocalLockFileAssemblies`=false here: [Microsoft.PackageDependencyResolution.targets#L414](https://github.com/natidea/sdk/blob/0e64439c0660590ef93b1d86a6811a056b791bd8/src/Tasks/Microsoft.NET.Build.Tasks/build/Microsoft.PackageDependencyResolution.targets#L414)\r\nI was able to fix this by setting the property in my project file:\r\n```xml\r\n    <CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>\r\n```\r\nNow I can use the `Guard`. \r\n\r\nSo somewhere along the way, some concepts may have been crossed. We default `CopyLocalLockFileAssemblies` to [true](https://github.com/natidea/sdk/blob/0e64439c0660590ef93b1d86a6811a056b791bd8/src/Tasks/Microsoft.NET.Build.Tasks/build/Microsoft.PackageDependencyResolution.targets#L38) in that target file, but it gets set to false in [Microsoft.NET.Sdk.BeforeCommon.targets#L57](https://github.com/natidea/sdk/blob/0e64439c0660590ef93b1d86a6811a056b791bd8/src/Tasks/Microsoft.NET.Build.Tasks/build/Microsoft.NET.Sdk.BeforeCommon.targets#L57). Perhaps the real issue is that the produce content assets task is tied to `ResolveLockFileCopyLocalProjectDeps` and should instead be triggered in some other way.\r\n"},{"Id":"7630909485","Type":"PullRequestEvent","CreatedAt":"2018-05-04T21:41:37","Actor":"dotnet-bot","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/2224","RelatedDescription":"Opened pull request \"Merge release/2.1.4xx to master\" (#2224) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.1.4xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.4xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/2.1.4xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1.4xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7630837048","Type":"PullRequestEvent","CreatedAt":"2018-05-04T21:21:34","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/2191","RelatedDescription":"Closed pull request \"Insert NuGet Build 4.8.0-preview1.5158 into sdk\" (#2191) at dotnet/sdk","RelatedBody":"Insert NuGet Build 4.8.0-preview1.5158 into sdk release/2.1.3xx branch"},{"Id":"7630835029","Type":"PullRequestEvent","CreatedAt":"2018-05-04T21:21:01","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/2220","RelatedDescription":"Closed pull request \"Insert NuGet Build 4.8.0-preview1.5158 into sdk\" (#2220) at dotnet/sdk","RelatedBody":"Insert NuGet Build 4.8.0-preview1.5158 into sdk release/2.1.4xx branch"},{"Id":"7630653811","Type":"IssuesEvent","CreatedAt":"2018-05-04T20:36:31","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1502","RelatedDescription":"Closed issue \"Conflict resolution from desktop MSBuild fails to get assembly identity from cross-gen'ed linux binaries\" (#1502) at dotnet/sdk","RelatedBody":"1. Crete a new console project.\r\n2. Modify the contents to the following.\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>Exe</OutputType>\r\n    <TargetFramework>netcoreapp2.0</TargetFramework>\r\n    <RuntimeIdentifier>centos.7-x64</RuntimeIdentifier>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"System.Threading\" Version=\"4.3.0\" />\r\n  </ItemGroup>\r\n\r\n</Project>\r\n```\r\n\r\n3. dotnet restore\r\n4. dotnet publish --> works correctly\r\n5. msbuild /t:publish --> app will fail to start with a refdef mismatch for System.Threading.  \r\n\r\nThis is because the System.Threading.dll conflict isn't being resolved.  If you examine the log you'll see\r\n```\r\nEncountered conflict between 'CopyLocal:C:\\Users\\ericstj\\.nuget\\packages\\runtime.linux-x64.microsoft.netcore.app\\2.0.0\\runtimes\\linux-x64\\lib\\netcoreapp2.0\\System.Threading.dll' and 'CopyLocal:C:\\Users\\ericstj\\.nuget\\packages\\system.threading\\4.3.0\\lib\\netstandard1.3\\System.Threading.dll'.  Could not determine a winner because 'CopyLocal:C:\\Users\\ericstj\\.nuget\\packages\\runtime.linux-x64.microsoft.netcore.app\\2.0.0\\runtimes\\linux-x64\\lib\\netcoreapp2.0\\System.Threading.dll' is not an assembly.\r\n```\r\n\r\nCompare this to the following in dotnet publish:\r\n```\r\nEncountered conflict between 'CopyLocal:C:\\Users\\ericstj\\.nuget\\packages\\runtime.linux-x64.microsoft.netcore.app\\2.0.0\\runtimes\\linux-x64\\lib\\netcoreapp2.0\\System.Threading.dll' and 'CopyLocal:C:\\Users\\ericstj\\.nuget\\packages\\system.threading\\4.0.11\\lib\\netstandard1.3\\System.Threading.dll'.  Choosing 'CopyLocal:C:\\Users\\ericstj\\.nuget\\packages\\runtime.linux-x64.microsoft.netcore.app\\2.0.0\\runtimes\\linux-x64\\lib\\netcoreapp2.0\\System.Threading.dll' because AssemblyVersion '4.1.0.0' is greater than '4.0.11.0'.\r\n```\r\n\r\nIt would seem that the [desktop implementation](https://github.com/dotnet/sdk/blob/a34f9e69bad5c38a897e7102a16a242a82fa278d/src/Tasks/Common/src/FileUtilities.net45.cs#L13-L22) for getting the assembly version can't handle the cross-gened assemblies, however the [core implementation ](https://github.com/dotnet/sdk/blob/a34f9e69bad5c38a897e7102a16a242a82fa278d/src/Tasks/Common/src/FileUtilities.netstandard.cs#L17-L40) can.\r\n\r\n"},{"Id":"7630653075","Type":"PullRequestEvent","CreatedAt":"2018-05-04T20:36:20","Actor":"livarcocc","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/2185","RelatedDescription":"Merged pull request \"Use MetadataReader to get assembly versions for conflict resolution\" (#2185) at dotnet/sdk","RelatedBody":"Use MetadataReader version of GetAssemblyVersion for:\r\n\r\n- netcoreapp version of Microsoft.NET.Build.Extensions.Tasks\r\n- All versions of Microsoft.NET.Build.Tasks\r\n\r\nThis doesn't use it for the .NET Framework version of Microsoft.NET.Build.Extensions in order to avoid loading the System.Reflection.Metadata assembly in vanilla .NET Framework build scenarios.\r\n\r\nThis does use MetadataReader for the SDK tasks in order to correctly read the assembly versions of cross-gened assemblies.\r\n\r\nFixes #1502"},{"Id":"7630649372","Type":"IssuesEvent","CreatedAt":"2018-05-04T20:35:24","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1538","RelatedDescription":"Closed issue \"ResolvePackageFileConflicts fails when paths have New Line characters\" (#1538) at dotnet/sdk","RelatedBody":"NewLine characters in HintPaths are causing an exception in ResolvePackageFileConflicts for projects that previously worked. E.g. \r\n\r\n```xml\r\n<Reference Include=\"System.Collections.Immutable, Version=1.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\">\r\n      <HintPath>\r\n      ..\\..\\packages\\System.Collections.Immutable.1.3.1\\lib\\portable-net45+win8+wp8+wpa81\\System.Collections.Immutable.dll\r\n      </HintPath>\r\n</Reference>\r\n```\r\n\r\nStackTrace:\r\n```\r\nThe \"ResolvePackageFileConflicts\" task failed unexpectedly.\r\nSystem.ArgumentException: Illegal characters in path.\r\n   at System.IO.Path.CheckInvalidPathChars(String path, Boolean checkAdditional)\r\n   at System.IO.Path.GetFileName(String path)\r\n   at Microsoft.NET.Build.Tasks.ItemUtilities.GetTargetPath(ITaskItem item)\r\n   at Microsoft.NET.Build.Tasks.ItemUtilities.GetReferenceTargetPath(ITaskItem item)\r\n   at Microsoft.NET.Build.Tasks.ConflictResolution.ResolvePackageFileConflicts.<>c.<ExecuteCore>b__35_1(ConflictItem ci)\r\n   at Microsoft.NET.Build.Tasks.ConflictResolution.ConflictResolver`1.ResolveConflicts(IEnumerable`1 conflictItems, Func`2 getItemKey, Action`1 foundConflict, Boolean commitWinner, Action`1 unresolvedConflict)\r\n   at Microsoft.NET.Build.Tasks.ConflictResolution.ResolvePackageFileConflicts.ExecuteCore()\r\n   at Microsoft.NET.Build.Tasks.TaskBase.Execute()\r\n   at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute()\r\n   at Microsoft.Build.BackEnd.TaskBuilder.<ExecuteInstantiatedTask>d__26.MoveNext()\tServices (Services\\Services)\t\t\t\r\n```\r\n\r\nReports:\r\n- [VSFeedback](https://developercommunity.visualstudio.com/content/problem/99813/illegal-characters-in-path.html) | [484081](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/484081)\r\n- StackOverflow: https://stackoverflow.com/questions/45796041/visual-studio-illegal-characters-in-path\r\n- [VSFeedback](https://developercommunity.visualstudio.com/content/problem/98225/the-resolvepackagefileconflicts-task-failed-unexpe.html) | [482572](https://devdiv.visualstudio.com/DevDiv/_workitems/edit/482572)\r\n\r\n/cc @dsplaisted "},{"Id":"7630648193","Type":"PullRequestEvent","CreatedAt":"2018-05-04T20:35:09","Actor":"wli3","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/2196","RelatedDescription":"Merged pull request \"Add trim for path in Item\" (#2196) at dotnet/sdk","RelatedBody":"**Customer scenario**\r\n\r\nIf there is an extra new line in hint path. The fullmsbuild build will fail with error \"Illegal characters in path\". Fix it by adding trim() when process the path.\r\n\r\nFor example:\r\n```xml\r\n<Reference Include=\"System.Collections.Immutable, Version=1.2.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\">\r\n      <HintPath>\r\n      ..\\..\\packages\\System.Collections.Immutable.1.3.1\\lib\\portable-net45+win8+wp8+wpa81\\System.Collections.Immutable.dll\r\n      </HintPath>\r\n</Reference>\r\n```\r\n\r\n**Bugs this fixes**\r\n\r\nhttps://github.com/dotnet/sdk/issues/1538\r\n\r\n**Workarounds, if any**\r\n\r\nUse non new line instead\r\n```xml\r\n<HintPath>..\\..\\packages\\System.Collections.Immutable.1.3.1\\lib\\portable-net45+win8+wp8+wpa81\\System.Collections.Immutable.dll</HintPath>\r\n```\r\n\r\n**Risk**\r\n\r\nlow.\r\n\r\n**Performance impact**\r\n\r\nlow\r\n\r\n**Root cause analysis**\r\n\r\nNot enough regression test coverage.\r\n\r\n**How was the bug found?**\r\n\r\nIssue filed from Github\r\n"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"991311154747199488","CreatedAt":"2018-05-01T13:39:31+00:00","UserScreenname":"dotnet","Text":"Do you have questions about async and await in C#?  Join @csharpfritz and @billwagner at 10a ET / 7a PT / 14:00 UTC… https://t.co/Sdn4F5XeZ2","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":64,"FavoriteCount":21,"RawContent":null},{"Id":"991060228220178432","CreatedAt":"2018-04-30T21:02:26+00:00","UserScreenname":"dotnet","Text":"Announcing the .NET Framework 4.7.2 https://t.co/Tx658XoEZG","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":556,"FavoriteCount":412,"RawContent":null},{"Id":"989532387775205376","CreatedAt":"2018-04-26T15:51:20+00:00","UserScreenname":"dotnet","Text":"Get the Azure Quick Start Guide for .NET Developers https://t.co/ALECzXryjk","Source":"<a href=\"http://twitter.com\" rel=\"nofollow\">Twitter Web Client</a>","RetweetCount":50,"FavoriteCount":22,"RawContent":null},{"Id":"987375741204508673","CreatedAt":"2018-04-20T17:01:35+00:00","UserScreenname":"dotnet","Text":"Help us plan the future of .NET! https://t.co/R0QoZVvXx4","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":127,"FavoriteCount":96,"RawContent":null},{"Id":"986692696507953152","CreatedAt":"2018-04-18T19:47:25+00:00","UserScreenname":"dotnet","Text":"Performance Improvements in .NET Core 2.1 https://t.co/6YMK8P99cZ","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":249,"FavoriteCount":153,"RawContent":null},{"Id":"986692437211987969","CreatedAt":"2018-04-18T19:46:23+00:00","UserScreenname":"dotnet","Text":"Announcing Visual Studio 2017 15.7 Preview 4 https://t.co/XYIzXNDMhn","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":62,"FavoriteCount":44,"RawContent":null}]}},"RunOn":"2018-05-07T05:30:24.500409Z","RunDurationInMilliseconds":8893}