{"Data":{"GitHubIssues":{"Issues":[{"Id":"344655794","IsPullRequest":false,"CreatedAt":"2018-07-26T00:50:20","Actor":"guardrex","Number":"1193","RawContent":null,"Title":"0.5.0 is decoding HTML entities","State":"open","Body":"I have angle bracket HTML entities in a Blazor client-side app page ...\r\n\r\n```html\r\n&lt;h1 style=\"font-style:@@_headingFontStyle\"&gt;@@_headingText&lt;/h1&gt;\r\n```\r\n\r\n... it would render that content out with the encoded angle brackets. The browser would render that as text ...\r\n\r\n```text\r\n<h1 style=\"font-style:@_headingFontStyle\">@_headingText</h1>\r\n```\r\n\r\nI just did an 0.4.0 -> 0.5.0 update. It's apparently decoding those `&lt;` and `&gt;` into actual angle brackets. The browser is now rendering that content as HTML.\r\n\r\n<img width=\"481\" alt=\"capture\" src=\"https://user-images.githubusercontent.com/1622880/43234650-e0ead786-9042-11e8-8271-2860cabc0ae9.PNG\">\r\n","Url":"https://github.com/aspnet/Blazor/issues/1193","RelatedDescription":"Open issue \"0.5.0 is decoding HTML entities\" (#1193)"},{"Id":"344608989","IsPullRequest":false,"CreatedAt":"2018-07-25T21:11:52","Actor":"SteveSandersonMS","Number":"1192","RawContent":null,"Title":"Set up nupkg signing in CI","State":"open","Body":"Because we won't be able to ship 0.6.0 until that's done.","Url":"https://github.com/aspnet/Blazor/issues/1192","RelatedDescription":"Open issue \"Set up nupkg signing in CI\" (#1192)"},{"Id":"344273261","IsPullRequest":false,"CreatedAt":"2018-07-25T16:54:19","Actor":"thild","Number":"1186","RawContent":null,"Title":"Razor compiler rewriting valid markup","State":"closed","Body":"Given this valid markup on a cshtml page\r\n```\r\n<ul class=\"legend\">\r\n    <li><span class=\"primeira-serie\"></span> Primeira série</li>\r\n    <li><span class=\"segunda-serie\"></span> Segunda série</li>\r\n    <li><span class=\"terceira-serie\"></span> Terceira série</li>\r\n    <li><span class=\"quarta-serie\"></span> Quarta série</li>\r\n</ul>\r\n```\r\nrazor compiler is rewriting to this\r\n```\r\n<ul class=\"legend\">\r\n   <li><span class=\"primeira-serie\"> Primeira série</span></li>\r\n   <li><span class=\"segunda-serie\"> Segunda série</span></li>\r\n   <li><span class=\"terceira-serie\"> Terceira série</span></li>\r\n   <li><span class=\"quarta-serie\"> Quarta série</span></li>\r\n</ul>\r\n```\r\n```\r\n0.6.0-preview1-10371\r\n```","Url":"https://github.com/aspnet/Blazor/issues/1186","RelatedDescription":"Closed issue \"Razor compiler rewriting valid markup\" (#1186)"},{"Id":"344514948","IsPullRequest":true,"CreatedAt":"2018-07-25T16:53:33","Actor":"SteveSandersonMS","Number":"1190","RawContent":null,"Title":"Fix handling nonvoid elements in markup blocks","State":"closed","Body":"Fixes #1186","Url":"https://github.com/aspnet/Blazor/pull/1190","RelatedDescription":"Closed or merged PR \"Fix handling nonvoid elements in markup blocks\" (#1190)"},{"Id":"344518826","IsPullRequest":true,"CreatedAt":"2018-07-25T16:32:49","Actor":"SteveSandersonMS","Number":"1191","RawContent":null,"Title":"Further 0.5.0 tweaks","State":"closed","Body":"","Url":"https://github.com/aspnet/Blazor/pull/1191","RelatedDescription":"Closed or merged PR \"Further 0.5.0 tweaks\" (#1191)"},{"Id":"344473805","IsPullRequest":true,"CreatedAt":"2018-07-25T14:41:38","Actor":"deril","Number":"1189","RawContent":null,"Title":"In SimpleJson, support nullable  enum values serialized as numbers.","State":"open","Body":"","Url":"https://github.com/aspnet/Blazor/pull/1189","RelatedDescription":"Open PR \"In SimpleJson, support nullable  enum values serialized as numbers.\" (#1189)"},{"Id":"344365007","IsPullRequest":false,"CreatedAt":"2018-07-25T10:44:34","Actor":"cores-system","Number":"1188","RawContent":null,"Title":"Component libraries","State":"closed","Body":"Hello, is there an example of this https://github.com/aspnet/Blazor/issues/340 solution at Blazor 0.4.0?","Url":"https://github.com/aspnet/Blazor/issues/1188","RelatedDescription":"Closed issue \"Component libraries\" (#1188)"},{"Id":"344296803","IsPullRequest":false,"CreatedAt":"2018-07-25T05:23:15","Actor":"danroth27","Number":"1187","RawContent":null,"Title":"Enable HTTPS in all blazor templates","State":"open","Body":"","Url":"https://github.com/aspnet/Blazor/issues/1187","RelatedDescription":"Open issue \"Enable HTTPS in all blazor templates\" (#1187)"},{"Id":"344255121","IsPullRequest":false,"CreatedAt":"2018-07-25T01:07:07","Actor":"pranavkm","Number":"1185","RawContent":null,"Title":"[Server side] Doing a blocking call on IJSRuntime.InvokeAsync ends up locking the server","State":"open","Body":"Super nitpicky, but doing a .`Result` or '`Wait` on the task returned by `IJSRuntime` locks up the server. E.g. \r\n\r\n```C#\r\nvoid DoLog()\r\n{\r\n    JSRuntime.Current.InvokeAsync<string>(\"console.log\", \"Hello world\").Wait();\r\n}\r\n```\r\n\r\nThe server does not respond to any further actions.","Url":"https://github.com/aspnet/Blazor/issues/1185","RelatedDescription":"Open issue \"[Server side] Doing a blocking call on IJSRuntime.InvokeAsync ends up locking the server\" (#1185)"},{"Id":"344248746","IsPullRequest":false,"CreatedAt":"2018-07-25T00:25:50","Actor":"pranavkm","Number":"1184","RawContent":null,"Title":"[Server side] Exceptions thrown inside of a component are silently ignored","State":"open","Body":"I updated `FetchData.OnInitAsync` to throw an exception:\r\n\r\n```C#\r\n\r\n@functions {\r\n    WeatherForecast[] forecasts;\r\n\r\n    protected override async Task OnInitAsync()\r\n    {\r\n        if (forecasts == null)\r\n        {\r\n            throw new ArgumentException();\r\n        }\r\n\r\n        forecasts = await ForecastService.GetForecastAsync(DateTime.Now);\r\n    }\r\n}\r\n```\r\n\r\nI can debug the component and see the exception, but the exception is not logged to the server debug logs or visible in the console","Url":"https://github.com/aspnet/Blazor/issues/1184","RelatedDescription":"Open issue \"[Server side] Exceptions thrown inside of a component are silently ignored\" (#1184)"},{"Id":"344242771","IsPullRequest":true,"CreatedAt":"2018-07-24T23:51:01","Actor":"SteveSandersonMS","Number":"1183","RawContent":null,"Title":"Fixes for 0.5.0","State":"closed","Body":"Resolves issues we found today","Url":"https://github.com/aspnet/Blazor/pull/1183","RelatedDescription":"Closed or merged PR \"Fixes for 0.5.0\" (#1183)"},{"Id":"344238477","IsPullRequest":false,"CreatedAt":"2018-07-24T23:26:18","Actor":"pranavkm","Number":"1182","RawContent":null,"Title":"Generics in event handler tool tips aren't showing up correctly","State":"open","Body":"![image](https://user-images.githubusercontent.com/174281/43171299-472ef918-8f5e-11e8-9567-c802d7dbc1f1.png)\r\n\r\n\r\nMy guess is that it's supposed to say \r\n\r\n> Sets the 'onclick' attribute to the provided string or delegate value. A delegate value should be of type `'System.Action<Microsoft.AspNetCore.Blazor.UIMouseEventArgs>'`","Url":"https://github.com/aspnet/Blazor/issues/1182","RelatedDescription":"Open issue \"Generics in event handler tool tips aren't showing up correctly\" (#1182)"},{"Id":"343925651","IsPullRequest":false,"CreatedAt":"2018-07-24T20:20:19","Actor":"SlowLogicBoy","Number":"1179","RawContent":null,"Title":"Incorrect OutputPath when using $(MSBuildThisFileDirectory)","State":"closed","Body":"I have `Directory.Build.props` file:\r\n```xml\r\n<Project>\r\n    <PropertyGroup>\r\n        <OutputPath>$(MSBuildThisFileDirectory)out\\bin</OutputPath>\r\n        <CopyLocalLockFileAssemblies>true</CopyLocalLockFileAssemblies>\r\n    </PropertyGroup>\r\n</Project>\r\n```\r\nWhen I build Blazor app I get:\r\n```\r\nC:\\Users\\User\\.nuget\\packages\\microsoft.aspnetcore.blazor.build\\0.4.0\\targets\\Blazor.MonoRuntime.targets(11,5): \r\n    warning MSB3026: \r\n        Could not copy \r\n\"C:\\Users\\User\\.nuget\\packages\\microsoft.aspnetcore.blazor.build\\0.4.0\\targets\\..\\tools\\mono\\asmjs\\mono.asm.js\" \r\n        to \r\n\"d:\\Code\\Git\\MyApp\\src\\Client\\WebApp\\d:\\Code\\Git\\MyApp\\out\\bin\\netstandard2.0\\dist/_framework/asmjs/mono.asm.js\". \r\n    Beginning retry 1 in 1000ms. The filename, directory name, or volume label syntax is incorrect : \r\n'd:\\Code\\Git\\MyApp\\src\\Client\\WebApp\\d:\\Code\\Git\\MyApp\\out\\bin\\netstandard2.0\\dist\\_framework\\asmjs'  \r\n[d:\\Code\\Git\\MyApp\\src\\Client\\WebApp\\WebApp.csproj]\r\n```\r\nOutput Path seems to be generated incorrectly:\r\n`d:\\Code\\Git\\MyApp\\src\\Client\\WebApp\\d:\\Code\\Git\\MyApp\\out\\bin\\netstandard2.0\\dist\\_framework\\asmjs`\r\n\r\n**Workaround:**\r\nI added additional `Directory.Build.props` file in Blazor project directory:\r\n```xml\r\n<Project>\r\n    <!-- Reference to my main Directory.Build.props -->\r\n    <Import Project=\"..\\..\\..\\Directory.Build.props\" />\r\n    <PropertyGroup>\r\n        <!-- Override OutputPath with relative path -->\r\n        <OutputPath>..\\..\\..\\out\\bin</OutputPath>\r\n    </PropertyGroup>\r\n</Project>\r\n```","Url":"https://github.com/aspnet/Blazor/issues/1179","RelatedDescription":"Closed issue \"Incorrect OutputPath when using $(MSBuildThisFileDirectory)\" (#1179)"},{"Id":"344156330","IsPullRequest":true,"CreatedAt":"2018-07-24T18:59:24","Actor":"SteveSandersonMS","Number":"1181","RawContent":null,"Title":"Server template tweaks","State":"closed","Body":"@rynowak I've been trying the RC1 build and it looks great. Publishing etc all looks perfect. Hopefully these tweaks are self-explanatory but let me know what you think.\r\n\r\ncc @danroth27","Url":"https://github.com/aspnet/Blazor/pull/1181","RelatedDescription":"Closed or merged PR \"Server template tweaks\" (#1181)"},{"Id":"344117821","IsPullRequest":false,"CreatedAt":"2018-07-24T18:51:39","Actor":"vanderstack","Number":"1180","RawContent":null,"Title":"Embed independent components in existing site","State":"closed","Body":"I have an existing site built entirely in Aurelia. As a demo to my organization regarding Blazor, I would like to replace a single existing component. In Aurelia it is possible to extend an existing application by calling an enhance method and providing a DOM selector.\r\n\r\nIs there any way to accomplish something similar with Blazor?\r\n\r\nLong term it would be nice to be able to import arbitrary components independent of them being rendered client side and hosted on CDN or server side and rendered by Azure.","Url":"https://github.com/aspnet/Blazor/issues/1180","RelatedDescription":"Closed issue \"Embed independent components in existing site\" (#1180)"},{"Id":"343739324","IsPullRequest":true,"CreatedAt":"2018-07-24T15:11:03","Actor":"SteveSandersonMS","Number":"1171","RawContent":null,"Title":"preventDefault for form onsubmit handlers. Fixes #951","State":"closed","Body":"This is very much just a special case, and longer term we'll want to do something better. Specifically, we'd like to have a proper way to control whether `preventDefault` is applied to C#-handled events.\r\n\r\nThe special case here is \"if you have a C# `onsubmit` handler, then call `preventDefault` on those events\". There's basically no way you *wouldn't* want to `preventDefault` those events, since (if async) the event handler would run *after* the default navigation event, which is totally useless. So I think the special case is OK as a stopgap measure.\r\n\r\nThe alternative could be that we say we're not changing the behavior, and people should explicitly put `type=\"button\"` on buttons inside forms. @rynowak @danroth27 let me know if you feel strongly either way. UPDATE: Putting `type=\"button\"` on buttons inside form doesn't solve the wider issue, e.g., hitting enter on an textbox inside the form, so the workaround in the PR has got to be better.","Url":"https://github.com/aspnet/Blazor/pull/1171","RelatedDescription":"Closed or merged PR \"preventDefault for form onsubmit handlers. Fixes #951\" (#1171)"},{"Id":"343897534","IsPullRequest":true,"CreatedAt":"2018-07-24T06:26:21","Actor":"danroth27","Number":"1178","RawContent":null,"Title":"Fixup default value for TemplateBlazorPackageVersion in server-side template","State":"closed","Body":"","Url":"https://github.com/aspnet/Blazor/pull/1178","RelatedDescription":"Closed or merged PR \"Fixup default value for TemplateBlazorPackageVersion in server-side template\" (#1178)"},{"Id":"343835582","IsPullRequest":true,"CreatedAt":"2018-07-24T05:11:01","Actor":"danroth27","Number":"1176","RawContent":null,"Title":"Update survey link for 0.5.0","State":"closed","Body":"","Url":"https://github.com/aspnet/Blazor/pull/1176","RelatedDescription":"Closed or merged PR \"Update survey link for 0.5.0\" (#1176)"},{"Id":"343845259","IsPullRequest":true,"CreatedAt":"2018-07-24T04:54:51","Actor":"rynowak","Number":"1177","RawContent":null,"Title":"Template updates for 0.5","State":"closed","Body":"","Url":"https://github.com/aspnet/Blazor/pull/1177","RelatedDescription":"Closed or merged PR \"Template updates for 0.5\" (#1177)"},{"Id":"343766257","IsPullRequest":true,"CreatedAt":"2018-07-24T00:42:48","Actor":"rynowak","Number":"1172","RawContent":null,"Title":"Fix #1169 ignore DOCTYPE","State":"closed","Body":"This change will cause the compiler to ignore `<!DOCTYPE ...>`\r\ndeclarations in Blazor components. We don't think there's much useful\r\nBlazor can do with doctype, since we don't generate textual output for\r\nthe browser the parse. The sanest thing to do for now is just to skip\r\nover it.","Url":"https://github.com/aspnet/Blazor/pull/1172","RelatedDescription":"Closed or merged PR \"Fix #1169 ignore DOCTYPE\" (#1172)"},{"Id":"343806727","IsPullRequest":true,"CreatedAt":"2018-07-23T23:03:20","Actor":"SteveSandersonMS","Number":"1175","RawContent":null,"Title":"Fix updating attributes on SVG elements. Fixes #934 and #1114","State":"closed","Body":"@danroth27 As requested","Url":"https://github.com/aspnet/Blazor/pull/1175","RelatedDescription":"Closed or merged PR \"Fix updating attributes on SVG elements. Fixes #934 and #1114\" (#1175)"},{"Id":"343798576","IsPullRequest":true,"CreatedAt":"2018-07-23T21:44:00","Actor":"SteveSandersonMS","Number":"1174","RawContent":null,"Title":"Upgrade to Mono f07691d5125","State":"closed","Body":"","Url":"https://github.com/aspnet/Blazor/pull/1174","RelatedDescription":"Closed or merged PR \"Upgrade to Mono f07691d5125\" (#1174)"},{"Id":"343780085","IsPullRequest":false,"CreatedAt":"2018-07-23T20:17:55","Actor":"vertonghenb","Number":"1173","RawContent":null,"Title":"Component tag helper matching should be case-sensitive","State":"open","Body":"Initially started in #1155, make it possible to only match Blazor components as named by the C# class.\r\nThe following 2 snippets are not equal: \r\n```csharp\r\n<Form>\r\n...\r\n</Form>\r\n```\r\nis not equal to (mind the casing)\r\n```html\r\n<form>\r\n...\r\n</form>\r\n```\r\n\r\nWe could make it easier for component libraries as BlazorStrap for example, which has a [workaround](https://github.com/chanan/BlazorStrap/blob/d771191f7572aae1aba540c8f87fe81695a621d5/src/Sample/Pages/forms.cshtml#L9). Basically this is also what React does.\r\n\r\nI'm not really sure if this is Blazor or Razor specific, so if I'm mistaken I do apologise.","Url":"https://github.com/aspnet/Blazor/issues/1173","RelatedDescription":"Open issue \"Component tag helper matching should be case-sensitive\" (#1173)"},{"Id":"343421085","IsPullRequest":false,"CreatedAt":"2018-07-23T19:17:26","Actor":"kant2002","Number":"1167","RawContent":null,"Title":"Blazor failed to load large fils","State":"closed","Body":"It is likely not Blazor issue per se, but I would be good if it fail more gracefully, if some inherent limitations from the Browser.\r\n\r\nBasically I have following error in Chrome: \r\n```\r\nmono.js:1 Uncaught (in promise) RuntimeError: memory access out of bounds\r\n    at wasm-function[290]:104\r\n    at wasm-function[2458]:125\r\n    at wasm-function[563]:16\r\n    at wasm-function[246]:115\r\n    at wasm-function[2428]:33\r\n    at wasm-function[2429]:41\r\n    at wasm-function[4877]:10\r\n    at Module._mono_wasm_string_from_js (http://localhost:58134/_framework/wasm/mono.js:1:173587)\r\n    at ccall (http://localhost:58134/_framework/wasm/mono.js:1:5651)\r\n    at http://localhost:58134/_framework/wasm/mono.js:1:6032\r\n```\r\n\r\nMy scenario following. I have form with input file.\r\nUser select text file.\r\nThen application load file, split by lines and process file.\r\nWhen I load file with only 914KB it works. When I load larger file 7876KB it fails to load with aforementioned error. Not sure who is to blame.\r\n","Url":"https://github.com/aspnet/Blazor/issues/1167","RelatedDescription":"Closed issue \"Blazor failed to load large fils\" (#1167)"},{"Id":"343675034","IsPullRequest":false,"CreatedAt":"2018-07-23T19:16:13","Actor":"fosteralwec","Number":"1169","RawContent":null,"Title":"Unable to install Blazor Extension Windows / Visual Studio 15.7.4 and 15.7.5","State":"closed","Body":"I've been trying to install the Blazor Extensions for some time. I recently updated Visual Studio to 15.7.5 and am still having a problem. T\r\n![stalledblazorinstallation](https://user-images.githubusercontent.com/32308340/43085466-0b7e2510-8e69-11e8-92f6-6e3645fbe034.png)\r\nhe extension install \"stalls\". I have attached a screen shot.","Url":"https://github.com/aspnet/Blazor/issues/1169","RelatedDescription":"Closed issue \"Unable to install Blazor Extension Windows / Visual Studio 15.7.4 and 15.7.5\" (#1169)"},{"Id":"343447100","IsPullRequest":true,"CreatedAt":"2018-07-23T16:33:40","Actor":"SteveSandersonMS","Number":"1168","RawContent":null,"Title":"TextDecoder polyfill","State":"closed","Body":"Continuation of #1150 by @Suchiman ","Url":"https://github.com/aspnet/Blazor/pull/1168","RelatedDescription":"Closed or merged PR \"TextDecoder polyfill\" (#1168)"},{"Id":"343703530","IsPullRequest":false,"CreatedAt":"2018-07-23T16:23:03","Actor":"SteveSandersonMS","Number":"1170","RawContent":null,"Title":"In RazorCompiler, coalesce adjacent markup blocks","State":"open","Body":"Follow up on #1146","Url":"https://github.com/aspnet/Blazor/issues/1170","RelatedDescription":"Open issue \"In RazorCompiler, coalesce adjacent markup blocks\" (#1170)"},{"Id":"343385397","IsPullRequest":false,"CreatedAt":"2018-07-22T17:46:41","Actor":"RickStrahl","Number":"1166","RawContent":null,"Title":"DateTime always displays as UTC","State":"closed","Body":"DateTime values  always display as UTC time, rather than local time even when explicitly forcing `.ToLocalTime()`.\r\n\r\nThis:\r\n```csharp\r\nConsole.WriteLine(DateTime.Now.ToLocalTime().ToString(\"HH:mm\"));\r\n```\r\n\r\ndisplays UTC time.\r\n","Url":"https://github.com/aspnet/Blazor/issues/1166","RelatedDescription":"Closed issue \"DateTime always displays as UTC\" (#1166)"},{"Id":"343336861","IsPullRequest":false,"CreatedAt":"2018-07-22T01:40:37","Actor":"conficient","Number":"1165","RawContent":null,"Title":"Automating of Server API use in Blazor clients","State":"closed","Body":"One of the things that annoyed me about writing C# on the server and Javascript/Typescript on the client was how much plumbing you had to do to transfer data between the the two.\r\n\r\nYou create a strongly typed WebAPI in C# on the server, then have to reconstruct this on the client in TypeScript and reference the API using strings for URLs etc.\r\n\r\nThings are a lot better in Blazor where we can call a Web API and transform back into strongly-typed C#, but perhaps there is a 'next level' where we can create an interface object to the API that can be consumed in Blazor. \r\n\r\nFor example the sample app gets the Weather Forecasts using\r\n```\r\n        forecasts = await Http.GetJsonAsync<WeatherForecast[]>(\"api/SampleData/WeatherForecasts\");\r\n```\r\nWe still have a magic string here, which would break if the URL changes, and if we had parameters would be more complicated to put together.\r\n\r\nIf the server API code could generate something the client could consume, perhaps we could in future have something like this:\r\n```\r\n        forecasts = await BlazorApp.Server.API.SampleData.GetWeatherForecasts();\r\n```\r\nThis is a similar concept to the webservices that asp.net used to generate for SilverLight to consume.\r\n\r\nThis is just floating an idea for future, so please close as needed\r\n","Url":"https://github.com/aspnet/Blazor/issues/1165","RelatedDescription":"Closed issue \"Automating of Server API use in Blazor clients\" (#1165)"},{"Id":"343328430","IsPullRequest":false,"CreatedAt":"2018-07-21T13:59:12","Actor":"PeterHimschoot","Number":"1164","RawContent":null,"Title":"Accidentally adding a Razor layout crashed Visual Studio","State":"open","Body":"I added a MVC razor layout to my visual studio project Shared folder (by accident) and Visual Studio crashes continuously. \r\nI fixed this issue by manually deleting this view from the project using File Explorer.","Url":"https://github.com/aspnet/Blazor/issues/1164","RelatedDescription":"Open issue \"Accidentally adding a Razor layout crashed Visual Studio\" (#1164)"}],"ResultType":"GitHubIssue"}},"RunOn":"2018-07-26T05:30:03.0265223Z","RunDurationInMilliseconds":1673}