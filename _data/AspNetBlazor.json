{"Data":{"GitHubIssues":{"Issues":[{"Id":"350645134","IsPullRequest":false,"CreatedAt":"2018-08-15T00:39:56","Actor":"danielmeza","Number":"1313","RawContent":null,"Title":"Make autogenerated class for component partial","State":"open","Body":"The idea is to make the class generated for a .cshtml component partial in order to extend it","Url":"https://github.com/aspnet/Blazor/issues/1313","RelatedDescription":"Open issue \"Make autogenerated class for component partial\" (#1313)"},{"Id":"350592847","IsPullRequest":false,"CreatedAt":"2018-08-15T00:01:59","Actor":"kant2002","Number":"1312","RawContent":null,"Title":"Notification about UI state change for long running tasks","State":"closed","Body":"I play with simple NLP application inside browser.\r\n I want to add loading indicator. Right now I use following approach\r\n\r\n```\r\nthis.loading = true;\r\nthis.StateHasChanged();\r\ntry {\r\n    this.result = await httpClient.GetJsonAsync<SearchResult[]>($\"api/search/sentence?content={content}\");\r\n} finally {\r\n     this.loading = false;\r\n}\r\n```\r\n\r\nMain trick is using `StateHasChanged`. My question is: Is this correct way to do that? How Blazor in general think such cases should be handled. I'm fine with calling `StateHasChanged()` but I prefer that it would be called automatically before `await`. \r\n\r\n\r\n## Example 1\r\n```\r\nthis.loading = true;\r\ntry {\r\n    // this.StateHasChanged(); called here by runtime\r\n    this.result = await httpClient.GetJsonAsync<SearchResult[]>($\"api/search/sentence?content={content}\");\r\n} finally {\r\n     this.loading = false;\r\n}\r\n```\r\n\r\n## Example 2\r\nor better, if I could control that using for example `.ConfigureAwait(false)`\r\n\r\n```\r\nthis.loading = true;\r\ntry {\r\n    // this.StateHasChanged(); called here by runtime\r\n    this.result = await httpClient.GetJsonAsync<SearchResult[]>($\"api/search/sentence?content={content}\")\r\n             .ConfigureAwait(false);\r\n} finally {\r\n     this.loading = false;\r\n}\r\n```","Url":"https://github.com/aspnet/Blazor/issues/1312","RelatedDescription":"Closed issue \"Notification about UI state change for long running tasks\" (#1312)"},{"Id":"350523660","IsPullRequest":false,"CreatedAt":"2018-08-14T23:55:02","Actor":"Andrzej-W","Number":"1311","RawContent":null,"Title":"Priority for SSR (Server Side Rendering)","State":"closed","Body":"Hello Blazor Team\r\nA few days ago I wrote this answer https://github.com/aspnet/Blazor/issues/1299#issuecomment-412340860 to one of the questions. Now I'm thinking about already available Blazor features and current limitations. We all know that Blazor is not perfect yet, but in my opinion it is good enough to create first experimental projects and publish them to show to other people around the world how wonderful it is. There is one **big** missing feature - server side rendering #24. Web site which is not available for indexing by Google/Bing/Yahoo robots simply does not exists in the internet.\r\n\r\nSome features mentioned in https://github.com/aspnet/Blazor/issues/1299#issuecomment-412340860 are not implemented at all or have bugs/limitations, but in basic, experimental projects we can try to find a workaround or simply don't use something. Unfortunately there is no workaround for SSR and SEO. If possible please prioritize this task.","Url":"https://github.com/aspnet/Blazor/issues/1311","RelatedDescription":"Closed issue \"Priority for SSR (Server Side Rendering)\" (#1311)"},{"Id":"350031209","IsPullRequest":false,"CreatedAt":"2018-08-14T21:44:19","Actor":"Lupusa87","Number":"1306","RawContent":null,"Title":"<UseRazorBuildServer>false</UseRazorBuildServer> as default","State":"closed","Body":"```\r\n<PropertyGroup>\r\n    <TargetFramework>netstandard2.0</TargetFramework>\r\n    <UseRazorBuildServer>false</UseRazorBuildServer>\r\n    <OutputType>Library</OutputType>\r\n    <IsPackable>true</IsPackable>\r\n    <BlazorLinkOnBuild>false</BlazorLinkOnBuild>\r\n    <LangVersion>7.3</LangVersion>\r\n  </PropertyGroup>\r\n```\r\n\r\nI am adding <UseRazorBuildServer>false</UseRazorBuildServer> for all my projects because it was taking long to build without this. I did some research and found this solution.\r\n\r\nFor new people it will be better to avoid this problem having this as default.\r\nIf you will not be agree then it is necessary blazor.net to advice about this when getting started with blazor.","Url":"https://github.com/aspnet/Blazor/issues/1306","RelatedDescription":"Closed issue \"<UseRazorBuildServer>false</UseRazorBuildServer> as default\" (#1306)"},{"Id":"350029048","IsPullRequest":false,"CreatedAt":"2018-08-14T15:14:04","Actor":"Lupusa87","Number":"1305","RawContent":null,"Title":"dotnet new blazorlib creates 0.4.0","State":"closed","Body":"Current:\r\n\r\n```\r\n<ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Blazor.Browser\" Version=\"0.4.0\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Blazor.Build\" Version=\"0.4.0\" />\r\n  </ItemGroup>\r\n\r\n```\r\nShould be:\r\n\r\n```\r\n <ItemGroup>\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Blazor.Browser\" Version=\"0.5.1\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.Blazor.Build\" Version=\"0.5.1\" />\r\n  </ItemGroup>\r\n```","Url":"https://github.com/aspnet/Blazor/issues/1305","RelatedDescription":"Closed issue \"dotnet new blazorlib creates 0.4.0\" (#1305)"},{"Id":"350411432","IsPullRequest":false,"CreatedAt":"2018-08-14T13:05:31","Actor":"hokusp","Number":"1310","RawContent":null,"Title":"Load shared component dynamically","State":"closed","Body":"Is it possible to load a dll with a shared BlazorComponent from a file (or download it, or...) and then use it?\r\n\r\nthanks for hints","Url":"https://github.com/aspnet/Blazor/issues/1310","RelatedDescription":"Closed issue \"Load shared component dynamically\" (#1310)"},{"Id":"350064691","IsPullRequest":true,"CreatedAt":"2018-08-14T12:21:20","Actor":"SteveSandersonMS","Number":"1307","RawContent":null,"Title":"E2E benchmarks","State":"closed","Body":"Adds a new project, `Microsoft.AspNetCore.Blazor.E2EPerformance`. When run it displays a benchmark runner that works by launching a real Blazor app in an iframe and scripting various perf test cases.\r\n\r\nThe intent is that:\r\n\r\n(1) We can publish this app to pure static files, and hand a copy to the Mono WebAssembly team who can then try running it against newer builds of Mono WebAssembly (by replacing mono.wasm/mono.js), so as to quanity the effects of optimisations\r\n(2) We can track the figures for different versions of Blazor (which includes the effects of moving to newer versions of Mono). We intend to record \"official\" timings using the ASP.NET perf test rig so as to be comparing with consistent hardware over time.\r\n\r\nWe can add further benchmark cases over time if we want, but the simple set in `Microsoft.AspNetCore.Blazor.E2EPerformance/wwwroot/benchmarks/*.js` will suffice for now.\r\n\r\n![image](https://user-images.githubusercontent.com/1101362/44039603-5835862e-9f11-11e8-9e8a-0aeab3ce4404.png)\r\n","Url":"https://github.com/aspnet/Blazor/pull/1307","RelatedDescription":"Closed or merged PR \"E2E benchmarks\" (#1307)"},{"Id":"350177908","IsPullRequest":true,"CreatedAt":"2018-08-13T20:17:46","Actor":"rynowak","Number":"1309","RawContent":null,"Title":"Fix #1298","State":"open","Body":"This change lifts our Razor dependencies to 2.1.1. This is needed\r\nbecause by default ASP.NET Core projects will depend on 2.1.1 - which\r\nresults in a conflict trying to use the Blazor compiler. The Blazor\r\ncompiler will load the 2.1.0 msbuild tasks, which then break loading the\r\n2.1.1 tasks.\r\n\r\nSince this is happening in the MSBuild process, we can't really write\r\nany code to sort this out. We have to make sure the versions match.\r\n\r\nIn general the guidance for ASP.NET Core is that projects will **compile\r\nagainst** 2.1.1 so this won't be a problem in the future unless a user\r\nproject specifically lifts ASP.NET Core to a higher version. If that's\r\nthe case they will also have to live `Microsoft.AspNetCore.Razor.Design`\r\nto match.","Url":"https://github.com/aspnet/Blazor/pull/1309","RelatedDescription":"Open PR \"Fix #1298\" (#1309)"},{"Id":"350151893","IsPullRequest":false,"CreatedAt":"2018-08-13T18:59:54","Actor":"kant2002","Number":"1308","RawContent":null,"Title":"ILLink incorrect parameters","State":"open","Body":"I have issue which is similar to #356, but appear of different nature.\r\n\r\n```\r\n2018-08-13T17:41:23.3856861Z _LinkBlazorApplication:\r\n2018-08-13T17:41:23.3864968Z   dotnet \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\microsoft.aspnetcore.blazor.build\\0.5.1\\targets\\../tools/illink/illink.dll\" -l none -c link -u link -b true -t --verbose  -d \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\microsoft.aspnetcore.blazor.build\\0.5.1\\targets\\../tools/mono/bcl/\" -d \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\microsoft.aspnetcore.blazor.build\\0.5.1\\targets\\../tools/mono/bcl/Facades/\" -o \"c:\\b\\_work\\17\\s\\MedNotes.Diagnostics\\obj\\Release\\netstandard2.0\\blazor/linker/\" -x \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\microsoft.aspnetcore.blazor.build\\0.5.1\\targets\\BuiltInBclLinkerDescriptor.xml\" -x \"c:\\b\\_work\\17\\s\\MedNotes.Diagnostics\\obj\\Release\\netstandard2.0\\blazor\\linker.descriptor.xml\" -a \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\exceldatareader\\3.4.0\\lib\\netstandard2.0\\ExcelDataReader.dll\" -a \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\htmlagilitypack\\1.8.5\\lib\\netstandard2.0\\HtmlAgilityPack.dll\" -a \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\lucene.net\\4.8.0-beta00005\\lib\\netstandard2.0\\Lucene.Net.dll\" -a \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\lucene.net.analysis.common\\4.8.0-beta00005\\lib\\netstandard2.0\\Lucene.Net.Analysis.Common.dll\" -a \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\lucene.net.queries\\4.8.0-beta00005\\lib\\netstandard1.6\\Lucene.Net.Queries.dll\" -a \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\lucene.net.queryparser\\4.8.0-beta00005\\lib\\netstandard2.0\\Lucene.Net.QueryParser.dll\" -a \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\lucene.net.sandbox\\4.8.0-beta00005\\lib\\netstandard1.6\\Lucene.Net.Sandbox.dll\" -a \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\microsoft.aspnetcore.blazor\\0.5.1\\lib\\netstandard2.0\\Microsoft.AspNetCore.Blazor.dll\" -a \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\microsoft.aspnetcore.blazor.browser\\0.5.1\\lib\\netstandard2.0\\Microsoft.AspNetCore.Blazor.Browser.dll\" -a \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\microsoft.csharp\\4.4.0\\lib\\netstandard2.0\\Microsoft.CSharp.dll\" -a \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\microsoft.extensions.dependencyinjection\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.DependencyInjection.dll\" -a \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\microsoft.extensions.dependencyinjection.abstractions\\2.1.0\\lib\\netstandard2.0\\Microsoft.Extensions.DependencyInjection.Abstractions.dll\" -a \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\microsoft.jsinterop\\0.5.1\\lib\\netstandard2.0\\Microsoft.JSInterop.dll\" -a \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\microsoft.rest.clientruntime\\2.3.12\\lib\\netstandard1.4\\Microsoft.Rest.ClientRuntime.dll\" -a \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\mono.webassembly.interop\\0.5.1\\lib\\netstandard2.0\\Mono.WebAssembly.Interop.dll\" -a \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\newtonsoft.json\\9.0.1\\lib\\netstandard1.0\\Newtonsoft.Json.dll\" -a \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\system.buffers\\4.4.0\\lib\\netstandard2.0\\System.Buffers.dll\" -a \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\system.collections.concurrent\\4.3.0\\lib\\netstandard1.3\\System.Collections.Concurrent.dll\" -a \"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.collections.immutable\\1.5.0\\lib\\netstandard2.0\\System.Collections.Immutable.dll\" -a \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\system.configuration.configurationmanager\\4.5.0\\lib\\netstandard2.0\\System.Configuration.ConfigurationManager.dll\" -a \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\system.diagnostics.diagnosticsource\\4.3.0\\lib\\netstandard1.3\\System.Diagnostics.DiagnosticSource.dll\" -a \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\system.dynamic.runtime\\4.0.11\\lib\\netstandard1.3\\System.Dynamic.Runtime.dll\" -a \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\system.io.filesystem.primitives\\4.3.0\\lib\\netstandard1.3\\System.IO.FileSystem.Primitives.dll\" -a \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\system.linq\\4.3.0\\lib\\netstandard1.6\\System.Linq.dll\" -a \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\system.linq.expressions\\4.1.0\\lib\\netstandard1.6\\System.Linq.Expressions.dll\" -a \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\system.memory\\4.5.1\\lib\\netstandard2.0\\System.Memory.dll\" -a \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\system.numerics.vectors\\4.4.0\\lib\\netstandard2.0\\System.Numerics.Vectors.dll\" -a \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\system.objectmodel\\4.0.12\\lib\\netstandard1.3\\System.ObjectModel.dll\" -a \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\system.reflection.emit\\4.0.1\\lib\\netstandard1.3\\System.Reflection.Emit.dll\" -a \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\system.reflection.emit.ilgeneration\\4.0.1\\lib\\netstandard1.3\\System.Reflection.Emit.ILGeneration.dll\" -a \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\system.reflection.emit.lightweight\\4.0.1\\lib\\netstandard1.3\\System.Reflection.Emit.Lightweight.dll\" -a \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\system.reflection.typeextensions\\4.1.0\\lib\\netstandard1.5\\System.Reflection.TypeExtensions.dll\" -a \"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.runtime.compilerservices.unsafe\\4.5.0\\lib\\netstandard2.0\\System.Runtime.CompilerServices.Unsafe.dll\" -a \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\system.runtime.numerics\\4.3.0\\lib\\netstandard1.3\\System.Runtime.Numerics.dll\" -a \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\system.runtime.serialization.primitives\\4.1.1\\lib\\netstandard1.3\\System.Runtime.Serialization.Primitives.dll\" -a \"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.security.accesscontrol\\4.5.0\\lib\\netstandard2.0\\System.Security.AccessControl.dll\" -a \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\system.security.cryptography.openssl\\4.3.0\\lib\\netstandard1.6\\System.Security.Cryptography.OpenSsl.dll\" -a \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\system.security.cryptography.primitives\\4.3.0\\lib\\netstandard1.3\\System.Security.Cryptography.Primitives.dll\" -a \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\system.security.cryptography.protecteddata\\4.5.0\\lib\\netstandard2.0\\System.Security.Cryptography.ProtectedData.dll\" -a \"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.security.permissions\\4.5.0\\lib\\netstandard2.0\\System.Security.Permissions.dll\" -a \"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.security.principal.windows\\4.5.0\\lib\\netstandard2.0\\System.Security.Principal.Windows.dll\" -a \"C:\\Program Files\\dotnet\\sdk\\NuGetFallbackFolder\\system.text.encoding.codepages\\4.5.0\\lib\\netstandard2.0\\System.Text.Encoding.CodePages.dll\" -a \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\system.text.regularexpressions\\4.3.0\\lib\\netstandard1.6\\System.Text.RegularExpressions.dll\" -a \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\system.threading\\4.3.0\\lib\\netstandard1.3\\System.Threading.dll\" -a \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\system.threading.tasks.extensions\\4.3.0\\lib\\netstandard1.0\\System.Threading.Tasks.Extensions.dll\" -a \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\system.xml.readerwriter\\4.3.0\\lib\\netstandard1.3\\System.Xml.ReaderWriter.dll\" -a \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\system.xml.xdocument\\4.0.11\\lib\\netstandard1.3\\System.Xml.XDocument.dll\" -a \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\system.xml.xmldocument\\4.3.0\\lib\\netstandard1.3\\System.Xml.XmlDocument.dll\" -a \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\system.xml.xpath\\4.3.0\\lib\\netstandard1.3\\System.Xml.XPath.dll\" -a \"C:\\WINDOWS\\ServiceProfiles\\NetworkService\\.nuget\\packages\\system.xml.xpath.xmldocument\\4.3.0\\lib\\netstandard1.3\\System.Xml.XPath.XmlDocument.dll\" -a \"c:\\b\\_work\\17\\s\\MedNotes.Api.Client\\bin\\Release\\netstandard2.0\\MedNotes.Api.Client.dll\" -a \"c:\\b\\_work\\17\\s\\MedNotes.Core\\bin\\Release\\netstandard2.0\\MedNotes.Core.dll\" -a \"c:\\b\\_work\\17\\s\\MedNotes.Diagnostics\\obj\\Release\\netstandard2.0\\MedNotes.Diagnostics.dll\"\r\n2018-08-13T17:41:24.0026278Z   IL Linker\r\n2018-08-13T17:41:24.0056464Z ##[error]EXEC(0,0): Error : Expecting an option, got instead: c:\\b\\_work\\17\\s\\MedNotes.Core\\bin\\Release\\netstandard2.0\\MedNotes.Core.dll\r\n2018-08-13T17:41:24.0062141Z EXEC : error : Expecting an option, got instead: c:\\b\\_work\\17\\s\\MedNotes.Core\\bin\\Release\\netstandard2.0\\MedNotes.Core.dll [c:\\b\\_work\\17\\s\\MedNotes.Diagnostics\\MedNotes.Diagnostics.csproj]\r\n2018-08-13T17:41:24.0062611Z   illink [options] -x|-a|-i file\r\n2018-08-13T17:41:24.0062850Z      --about             About the IL Linker\r\n2018-08-13T17:41:24.0063090Z      --version           Print the version number of the IL Linker\r\n2018-08-13T17:41:24.0063358Z      --skip-unresolved   Ignore unresolved types, methods, and assemblies (true or false)\r\n2018-08-13T17:41:24.0091550Z      --verbose           Log messages indicating progress and warnings\r\n2018-08-13T17:41:24.0091945Z      --dependencies-file Specify the dependencies file path, if unset the default path is used: <output directory>/linker-dependencies.xml.gz\r\n2018-08-13T17:41:24.0092441Z      --dump-dependencies Dump dependencies for the linker analyzer tool\r\n2018-08-13T17:41:24.0092728Z      --reduced-tracing   Reduces dependency output related to assemblies that will not be modified\r\n2018-08-13T17:41:24.0093128Z      --used-attrs-only   Attributes on types, methods, etc will be removed if the attribute type is not used\r\n2018-08-13T17:41:24.0093453Z      --strip-security    In linked assemblies, attributes on assemblies, types, and methods related to security will be removed\r\n2018-08-13T17:41:24.0093795Z      --strip-resources   Remove link xml resources that were processed (true or false), default to true\r\n2018-08-13T17:41:24.0094081Z      --exclude-feature   Any code which has feature-name dependency will be removed\r\n2018-08-13T17:41:24.0094349Z      -out                Specify the output directory, default to `output'\r\n2018-08-13T17:41:24.0094655Z      -c                  Action on the core assemblies, skip, copy, copyused, addbypassngen, addbypassngenused or link, default to skip\r\n2018-08-13T17:41:24.0095003Z      -u                  Action on the user assemblies, skip, copy, copyused, addbypassngen, addbypassngenused or link, default to link\r\n2018-08-13T17:41:24.0095290Z      -p                  Action per assembly\r\n2018-08-13T17:41:24.0095513Z      -s                  Add a new step to the pipeline.\r\n2018-08-13T17:41:24.0095771Z      -t                  Keep assemblies in which only type forwarders are referenced.\r\n2018-08-13T17:41:24.0096047Z      -d                  Add a directory where the linker will look for assemblies\r\n2018-08-13T17:41:24.0096317Z      -b                  Generate debug symbols for each linked module (true or false)\r\n2018-08-13T17:41:24.0096597Z      -g                  Generate a new unique guid for each linked module (true or false)\r\n2018-08-13T17:41:24.0096863Z      -v                  Keep members needed by debugger (true or false)\r\n2018-08-13T17:41:24.0097128Z      -l                  List of i18n assemblies to copy to the output directory\r\n2018-08-13T17:41:24.0097403Z                            separated with a comma: none,all,cjk,mideast,other,rare,west\r\n2018-08-13T17:41:24.0097650Z                            default is all\r\n2018-08-13T17:41:24.0097878Z      -x                  Link from an XML descriptor\r\n2018-08-13T17:41:24.0098106Z      -a                  Link from a list of assemblies\r\n2018-08-13T17:41:24.0098369Z      -r                  Link from a list of assemblies using roots visible outside of the assembly\r\n2018-08-13T17:41:24.0098633Z      -i                  Link from an mono-api-info descriptor\r\n2018-08-13T17:41:24.0098895Z      -z                  Include default preservations (true or false), default to true\r\n2018-08-13T17:41:24.0099109Z   \r\n\r\n```\r\n\r\nFor now looks like I could workaround that with `<BlazorLinkOnBuild>false</BlazorLinkOnBuild>`, but issue appear more inside MSBuild setup for ILLink, then inside ILLink itself.","Url":"https://github.com/aspnet/Blazor/issues/1308","RelatedDescription":"Open issue \"ILLink incorrect parameters\" (#1308)"},{"Id":"349685630","IsPullRequest":true,"CreatedAt":"2018-08-13T18:17:12","Actor":"rynowak","Number":"1296","RawContent":null,"Title":"Merge sibling nodes during markup block rewrite","State":"closed","Body":"This change adds the ability to merge sibling nodes when possible during\r\nmarkup block rewriting. We retain that invariant that each markup block\r\nis a valid chunk of markup containing properly nested tags.\r\n\r\nWe still haven't done any work to remove whitespace yet, so most of the\r\ncases where this comes into play right now will merge an element with\r\nits surrounding whitespace.","Url":"https://github.com/aspnet/Blazor/pull/1296","RelatedDescription":"Closed or merged PR \"Merge sibling nodes during markup block rewrite\" (#1296)"},{"Id":"350020122","IsPullRequest":false,"CreatedAt":"2018-08-13T13:02:11","Actor":"RoryChrist","Number":"1304","RawContent":null,"Title":"Rendering lists of components","State":"open","Body":"I don't see anything mentioned in the \"Component model\" issue (#1), so I was wondering if there are plans to address rendering list of components.  For example:\r\n\r\n```\r\n    @foreach (var item in toDoListItems)\r\n    {\r\n        <ToDoItemComponent Item=\"@item\" />\r\n    }\r\n```\r\n\r\nAs it currently stands, if I insert an item at position \"i\", all the existing component instances from \"i\" to the end of the list will have their parameter set to \"i + 1\", resulting in a significant number of changes instead of just one component instance being created.  The same with removing an item from a list.\r\n\r\nAre there plans to add some sort of \"key\" functionality, so the framework can match up list items with their original component instances and process changes more efficiently?","Url":"https://github.com/aspnet/Blazor/issues/1304","RelatedDescription":"Open issue \"Rendering lists of components\" (#1304)"},{"Id":"349896866","IsPullRequest":false,"CreatedAt":"2018-08-13T10:08:01","Actor":"Arshia001","Number":"1303","RawContent":null,"Title":"Create more than one SPA within the same project?","State":"closed","Body":"If I'm correct, an entire Blazor client app gets bundled into a single DLL which is then executed on the browser side in Single Page App fashion. Is there an option to split a project into many pages? Having an SPA is good, as long as the app is relatively small. In a project with hundreds or thousands of pages, having them all preload at the same time will cause inacceptable delays.","Url":"https://github.com/aspnet/Blazor/issues/1303","RelatedDescription":"Closed issue \"Create more than one SPA within the same project?\" (#1303)"},{"Id":"349863851","IsPullRequest":false,"CreatedAt":"2018-08-13T01:44:47","Actor":"rpedretti","Number":"1302","RawContent":null,"Title":"[Quesion] JS Context is different when published?","State":"open","Body":"At my machine, in Release build, the `window.AmbientLightSensor` does exists, but after publishing it to Azure the JS context is not the same as running it at localhost.\r\n\r\nIs it a bug or a special config is needed to work as expected?","Url":"https://github.com/aspnet/Blazor/issues/1302","RelatedDescription":"Open issue \"[Quesion] JS Context is different when published?\" (#1302)"},{"Id":"349856711","IsPullRequest":false,"CreatedAt":"2018-08-13T01:15:31","Actor":"rpedretti","Number":"1301","RawContent":null,"Title":"Access to Web Apis is different from expected","State":"closed","Body":"Trying to access a Web Api (window.AmbientLightSensor) from a blaro app does not work while accessig it from a simple index.html works. I tested on Chrome with the requred flags on. When checking for it I noticed that on the blazor app the `window` object does not have `AmbientLightSensor`  while on the simple index.html the `AmbientLightSensor` do exists.","Url":"https://github.com/aspnet/Blazor/issues/1301","RelatedDescription":"Closed issue \"Access to Web Apis is different from expected\" (#1301)"},{"Id":"349776142","IsPullRequest":false,"CreatedAt":"2018-08-12T04:24:12","Actor":"kevinjpetersen","Number":"1299","RawContent":null,"Title":"Ready for Production Projects?","State":"closed","Body":"Hello I found this awesome framework from watching the Microsoft Build Conference and I really like it. It's amazing!\r\n\r\nSince this is still in experimental stage, I was wondering if there would be any negative impacts of making a production ready project built on Blazor? I have a website that I need to port from ColdFusion onto ASP.NET Core, and by using Blazor's framework it's gonna speed up porting time faster than ever!\r\n\r\nAm I ok to do this, or should I wait until an actual \"finished release\" of Blazor?\r\n\r\nThanks :)","Url":"https://github.com/aspnet/Blazor/issues/1299","RelatedDescription":"Closed issue \"Ready for Production Projects?\" (#1299)"},{"Id":"349778312","IsPullRequest":false,"CreatedAt":"2018-08-12T02:21:37","Actor":"enetstudio","Number":"1300","RawContent":null,"Title":"Please, Update Blazor FlightFinder to 0.5.0","State":"open","Body":"Thanks","Url":"https://github.com/aspnet/Blazor/issues/1300","RelatedDescription":"Open issue \"Please, Update Blazor FlightFinder to 0.5.0\" (#1300)"},{"Id":"349756974","IsPullRequest":false,"CreatedAt":"2018-08-11T19:11:49","Actor":"Mitch528","Number":"1298","RawContent":null,"Title":"Getting weird build error MSB4062","State":"open","Body":"All of a sudden I've been starting to get this build error:\r\n\r\nC:\\Users\\mitch\\.nuget\\packages\\microsoft.aspnetcore.blazor.build\\0.5.1\\targets\\RazorCompilation.targets(184,5): error MSB4062: The \"Microsoft.AspNetCore.Razor.Tasks.RazorGenerate\" task could not be loaded from the assembly C:\\Users\\mitch\\.nuget\\packages\\microsoft.aspnetcore.razor.design\\2.1.0\\build\\netstandard2.0\\..\\..\\\\tasks\\netstandard2.0\\Microsoft.AspNetCore.Razor.Tasks.dll. Assembly with same name is already loaded Confirm that the <UsingTask> declaration is correct, that the assembly and all its dependencies are available, and that the task contains a public class that implements Microsoft.Build.Framework.ITask.\r\n\r\nThe project was running before just fine too. It seems to have started happening once I ran another ASP.NET Core (non-blazor) project. I've tried cleaning/rebuilding the project and clearing nuget locals, but I can't seem to fix it.\r\n\r\nSeems to be related to #1107 ","Url":"https://github.com/aspnet/Blazor/issues/1298","RelatedDescription":"Open issue \"Getting weird build error MSB4062\" (#1298)"},{"Id":"349738291","IsPullRequest":false,"CreatedAt":"2018-08-11T15:58:26","Actor":"MarkStega","Number":"1297","RawContent":null,"Title":"[Documentation] Dependency Injection","State":"closed","Body":"If I follow the pattern shown in the Blazor DI documentation and have two services, RestBaseService & RestProcessService that have an injection of\r\n```\r\n            services.AddTransient<IRestBaseService, RestBaseService>();\r\n            services.AddTransient<IRestProcessService, RestProcessService>();\r\n```\r\nthen I can't have a constructor injection that refers to RestBaseService; it has to refer to IRestBaseService like this\r\n```\r\n        public RestProcessService(\r\n            IRestBaseService p_RestBaseService,\r\n            ILogger<LoggingFramework> p_Logger)\r\n        {\r\n            m_RestBaseService = (RestBaseService)p_RestBaseService;\r\n            m_Logger = p_Logger;\r\n            p_Logger.LogDebug(\"RestProcessService constructor\");\r\n        }\r\n```\r\nIf I try that same constructor with RestBaseService an error is thrown saying that that type can not be resolved.\r\n\r\nIf I change the service registration to just reference the class\r\n```\r\n            services.AddTransient<RestBaseService>();\r\n            services.AddTransient<RestProcessService>();\r\n```\r\nthen I can use the class name in constructors. Then in BrowserServiceProvider.cs I see yet another form of service registration that appears to add explicit instances to the services collection\r\n```\r\n        private void AddDefaultServices(ServiceCollection serviceCollection)\r\n        {\r\n            serviceCollection.AddSingleton<IUriHelper>(BrowserUriHelper.Instance);\r\n            serviceCollection.AddSingleton(new HttpClient(new BrowserHttpMessageHandler())\r\n            {\r\n                BaseAddress = new Uri(BrowserUriHelper.Instance.GetBaseUri())\r\n            });\r\n        }\r\n```\r\n\r\nAll said, I think that the DI documentation page needs a little beefing up to explain the different scenarios because if you follow its guidance now the outcome is poor.","Url":"https://github.com/aspnet/Blazor/issues/1297","RelatedDescription":"Closed issue \"[Documentation] Dependency Injection\" (#1297)"},{"Id":"349376838","IsPullRequest":true,"CreatedAt":"2018-08-11T03:35:28","Actor":"rynowak","Number":"1291","RawContent":null,"Title":"Install ASP.NET Core runtime","State":"closed","Body":"This will make sure the build script includes the ASP.NET Core runtime\r\nwhen running on local .NET. The effect of this is that our test projects\r\nand apps will 'roll forward' unto the newest runtime without us\r\nhardcoding it.","Url":"https://github.com/aspnet/Blazor/pull/1291","RelatedDescription":"Closed or merged PR \"Install ASP.NET Core runtime\" (#1291)"},{"Id":"348981667","IsPullRequest":true,"CreatedAt":"2018-08-10T23:29:40","Actor":"rynowak","Number":"1286","RawContent":null,"Title":"Reenable markup blocks","State":"closed","Body":"There were two problems here:\r\n- We weren't incrementing child count inside child content - fixed in #1290\r\n- We weren't dealing with HTML entities correctly (fixed in this PR)","Url":"https://github.com/aspnet/Blazor/pull/1286","RelatedDescription":"Closed or merged PR \"Reenable markup blocks\" (#1286)"},{"Id":"349669075","IsPullRequest":false,"CreatedAt":"2018-08-10T21:58:57","Actor":"rpedretti","Number":"1295","RawContent":null,"Title":"Getting erro calling registered JSInvokable function in component lib","State":"open","Body":"I have a Component lib created using the blazom component lib template (CLI) asn have registered a instance method to be invokable in th JS side\r\n\r\n```\r\n[JSInvokable]\r\npublic Task ClearSelection()\r\n{\r\n...\r\n}\r\n```\r\n\r\nBut when calling it i get the following error:\r\n\r\n```\r\nError: System.InvalidOperationException: The assembly 'RPedretti.Blazor.Components' contains more than one [JSInvokable] method with identifier 'ClearSelection'. All [JSInvokable] methods within the same assembly must have different identifiers. You can pass a custom identifier as a parameter to the [JSInvokable] attribute.\r\n```\r\n\r\nI tried to to register using a identifyer but the error remains. This doesn't happens in a instance method registered in the main assembly","Url":"https://github.com/aspnet/Blazor/issues/1295","RelatedDescription":"Open issue \"Getting erro calling registered JSInvokable function in component lib\" (#1295)"},{"Id":"349563030","IsPullRequest":false,"CreatedAt":"2018-08-10T15:37:02","Actor":"masonwheeler","Number":"1294","RawContent":null,"Title":"What can cause Navigation to completely stop working?","State":"open","Body":"I have a very strange situation in my Blazor app.  Everything was working fine until I updated to 0.5.  Now navigation is broken... mostly.\r\n\r\nI can load up the SPA, and whatever page the URL is pointing to comes up as expected.  But if I try to click any link, the URL in the browser's address bar changes, but no content takes place.  The `OnInit` for the target page never gets called (verified by putting a `Console.WriteLine` in the `OnInit`) and neither does the `IUriHelper.OnLocationChanged` event.\r\n\r\nHowever, I have a few pages that perform validation in their `OnInit`, and navigate you to `/` if you're not a valid user.  When I enter one of these pages in the address bar, I end up getting redirected to the SPA's homepage as expected, which means that as of `OnInit` time, navigation is working, but at some later point it's breaking.\r\n\r\nNo errors are getting logged to the console when I click a link.\r\n\r\nI've ruled out that it's any of my external JS scripts by disabling them. The problem still occurs.\r\n\r\nIt appears that the relevant code that performs the navigation is in [UriHelper.ts](https://github.com/aspnet/Blazor/blob/master/src/Microsoft.AspNetCore.Blazor.Browser.JS/src/Services/UriHelper.ts), but I can't find any of that code in `blazor.webassembly.js`, or anywhere in the `dist\\_framework` subtree for that matter, to attempt to debug it.  So at this point I'm completely at a loss for what to do next.\r\n\r\nSomething is disabling navigation, and doing so in such a way that no errors get displayed on the console.  I don't know what or why.  How do I track it down?","Url":"https://github.com/aspnet/Blazor/issues/1294","RelatedDescription":"Open issue \"What can cause Navigation to completely stop working?\" (#1294)"},{"Id":"349490865","IsPullRequest":false,"CreatedAt":"2018-08-10T12:07:18","Actor":"pavel-purma","Number":"1293","RawContent":null,"Title":"Nested div onclick event","State":"open","Body":"I have a overlay background element and dialog inside. The problem is that onclick event of overlay div is fired event if that div is under dialog. That cause me closing the dialog. Then I tried to solve that by addEventListener via JSInterop and use e.stopPropagation() but it fail another way. It stop all blazor onclick events inside of popup dialog. Blazor use document as the only point to attach event listeners. Should I use other way to stop propagation in blazor ?","Url":"https://github.com/aspnet/Blazor/issues/1293","RelatedDescription":"Open issue \"Nested div onclick event\" (#1293)"},{"Id":"349460575","IsPullRequest":false,"CreatedAt":"2018-08-10T10:38:25","Actor":"montyclt","Number":"1292","RawContent":null,"Title":"SessionStorage and LocalStorage","State":"closed","Body":"There are any API to save C# objects in SessionStorage or LocalStorage?\r\n\r\nExample:\r\n```\r\nvar person = new Person(\"Monty\");\r\n\r\nLocalStorage.Session.StoreObject(\"key\", person);\r\n\r\n// I thinked use generic to implicitly cast saved object to generic type.\r\nvar retrievedPerson = LocalStorage.Session.RetrieveObject<Person>(\"key\");\r\n\r\n// Allow explicit cast too...\r\nvar retrievedPerson = LocalStorage.Session.RetriveObject(\"key\") as Person;\r\nvar retrievedPerson = (Person)LocalStorage.Session.RetrieveObject(\"key\");\r\n```","Url":"https://github.com/aspnet/Blazor/issues/1292","RelatedDescription":"Closed issue \"SessionStorage and LocalStorage\" (#1292)"},{"Id":"349106815","IsPullRequest":false,"CreatedAt":"2018-08-10T10:01:14","Actor":"masonwheeler","Number":"1287","RawContent":null,"Title":"New App/Startup model is a massively breaking change","State":"closed","Body":"In the old version, I had some crucial setup that came between setting up the `ServiceProvider` and launching the `BrowserRenderer`.  It had to happen in that order because it needed access to some of the things that are automagically added to the `ServiceProvider` by the Blazor framework, which the IServiceCollection inside of the setup routine does not give you access to.\r\n\r\nThis workflow, which used to be explicit, is now broken in 5.0 because it's been replaced with reflection magic.\r\n\r\nWhat is the new way to do things such as [retrieving data from the HttpClient](https://github.com/aspnet/Blazor/issues/567#issuecomment-381226776) or setting up a lambda that calls `IUriHelper.NavigateTo` (needed so I can assign this to a delegate on a static class, so that I'm able to navigate from JS interop)?  I need both of these things, and right now they're both broken because I don't have explicit access to the `BrowserServiceProvider` object anymore.","Url":"https://github.com/aspnet/Blazor/issues/1287","RelatedDescription":"Closed issue \"New App/Startup model is a massively breaking change\" (#1287)"},{"Id":"349137124","IsPullRequest":false,"CreatedAt":"2018-08-10T09:38:58","Actor":"kant2002","Number":"1288","RawContent":null,"Title":"AutoRest generation proxy does not work","State":"closed","Body":"Basically appears similar to #1122 and #634 , but not this one.\r\n\r\nI have Blazor application with server API on http://localhost:50140 address.\r\n\r\nIn Chrome\r\n```\r\nFailed to load http://localhost/api/Dictionary/search?content=123&parseStructure=false: No 'Access-Control-Allow-Origin' header is present on the requested resource. Origin 'http://localhost:50140' is therefore not allowed access. The response had HTTP status code 502. If an opaque response serves your needs, set the request's mode to 'no-cors' to fetch the resource with CORS disabled.\r\n16:42:00.172 \r\n\r\n\r\nWASM: [System.Net.Http.HttpRequestException] TypeError: Failed to fetch\r\n```\r\nI have following code\r\n```csharp\r\nvar api = new AutoRestAPI(Http, false);\r\nthis.result = await api.ApiDictionarySearchGetAsync(content, parseStructure);\r\n// this.result = await Http.GetJsonAsync<SearchResult[]>($\"api/Dictionary/search?content={content}&parseStructure=false\");\r\n```\r\n\r\nIf I uncomment line, and use standard injected client, then things start working.\r\n\r\nThe error appears because either AutoRest incorrectly get URL to which made calls, or BrowserHttpMessageHandler does not handle some corner case.\r\n","Url":"https://github.com/aspnet/Blazor/issues/1288","RelatedDescription":"Closed issue \"AutoRest generation proxy does not work\" (#1288)"},{"Id":"349244005","IsPullRequest":false,"CreatedAt":"2018-08-09T21:27:31","Actor":"stsrki","Number":"1289","RawContent":null,"Title":"DataContract and DataMember are ignored for Json serialize/deserialize","State":"closed","Body":"I'm trying to call REST API but I keep getting 400(Bar Request). It seems that the Blazor built-in SimpleJson is ignoring DataContract and DataMember attributes.\r\n\r\n```\r\ntoken = await Http.PostJsonAsync<TokenResponse>( \"http://_my_rest_url_/api/token\", new TokenRequest\r\n{\r\n    GrantType = \"password\",\r\n    Username = \"abc\",\r\n    Password = \"123\"\r\n} );\r\n```\r\n\r\nHere are my models\r\n\r\n```\r\n[DataContract]\r\npublic class TokenRequest\r\n{\r\n    [DataMember( Name = \"grant_type\" )]\r\n    public string GrantType { get; set; }\r\n\r\n    [DataMember( Name = \"username\" )]\r\n    public string Username { get; set; }\r\n\r\n    [DataMember( Name = \"password\" )]\r\n    public string Password { get; set; }\r\n}\r\n```\r\n\r\n```\r\n[DataContract]\r\npublic class TokenResponse\r\n{\r\n    [DataMember( Name = \"token_type\" )]\r\n    public string TokenType { get; set; }\r\n\r\n    [DataMember( Name = \"access_token\" )]\r\n    public string AccessToken { get; set; }\r\n\r\n    // other members\r\n}\r\n```\r\n\r\nand this is the request that I see in the Chrome developer tools\r\n\r\n`{\"grantType\":\"password\",\"username\":\"abc\",\"password\":\"123\"}`","Url":"https://github.com/aspnet/Blazor/issues/1289","RelatedDescription":"Closed issue \"DataContract and DataMember are ignored for Json serialize/deserialize\" (#1289)"},{"Id":"349262996","IsPullRequest":false,"CreatedAt":"2018-08-09T19:40:31","Actor":"Andrzej-W","Number":"1290","RawContent":null,"Title":"UIKeyboardEventArgs.Code in Edge browser is always empty + problems with UIKeyboardEventArgs.Key","State":"open","Body":"```html\r\n<div>\r\n    <input onkeydown=\"@OnKeyDown\" />\r\n    <div>key: '@key'</div>\r\n    <div>code: '@code'</div>\r\n</div>\r\n```\r\n```c#\r\n@functions{\r\n    string key;\r\n    string code;\r\n    void OnKeyDown(UIKeyboardEventArgs eventArgs)\r\n    {\r\n        key = eventArgs.Key;\r\n        code = eventArgs.Code;\r\n    }\r\n}\r\n```\r\nThis code works in Firefox and Chrome but not in Edge.\r\nOn Windows 10 I have the following browsers:\r\n* Firefox 61.0.1\r\n* Chrome 68.0.3440.84\r\n* Edge 16.16299\r\n\r\nI have standard US layout keyboard and Windows with Polish language.\r\nEdge does not return `Code` - we cannot distinguish between left and right shift/control/alt/menu start.\r\n\r\n***Edge returns Unidentified*** in `key` for all braces, punctuation characters, etc. ,./<>?;':\"[]\\{}|-=_+ For all characters above numbers !@#$%^&*() it returns numbers, which is correct, but without `Code` it is hard to guess what key was pressed.\r\n\r\n**Blazor 0.5.1**","Url":"https://github.com/aspnet/Blazor/issues/1290","RelatedDescription":"Open issue \"UIKeyboardEventArgs.Code in Edge browser is always empty + problems with UIKeyboardEventArgs.Key\" (#1290)"},{"Id":"348674818","IsPullRequest":false,"CreatedAt":"2018-08-09T10:06:06","Actor":"MarkStega","Number":"1284","RawContent":null,"Title":"[Question] [Server side rendering] Guidance on adding logging to Blazor app","State":"closed","Body":"I had tried SSR when 0.5 arrived and other than some dropping of the SignalR update path my application worked as it did on the client.\r\n\r\nI just decided to try SSR again and the app fails. I suspect it is because the client is now filled (some say littered) with calls to Blazor.Extensions.Logging methods.\r\n\r\nI thought (looking at the architecture diagram in the 0.5 announcement blog) that I could simply add the references to NLog as I do on the web server itself.\r\n\r\nI started by removing this fragment\r\n```\r\n            services.AddLogging(builder => builder\r\n                .AddBrowserConsole() // Add Blazor.Extensions.Logging.BrowserConsoleLogger\r\n                .SetMinimumLevel(LogLevel.Trace)\r\n            );\r\n```\r\nfrom ConfigureServices(IServiceCollection services)\r\n\r\nI was immediately stymied when trying to add this fragment\r\n\r\n                   .ConfigureLogging(logging =>\r\n                       {\r\n                           logging.ClearProviders();\r\n                           logging.SetMinimumLevel(LogLevel.Trace);\r\n                       })\r\n                   .UseNLog()  // NLog: setup NLog for Dependency injection\r\nto BlazorWebAssemblyHost.CreateDefaultBuilder just as I add it to WebHost.CreateDefaultBuilder in the web server program.cs\r\n\r\nIs this an issue that the CreateDefaultBuilder has to have 'UseNLog()' added meaning that the NLog team (or I) need to write an extension to BlazorWebAssemblyHost.CreateDefaultBuilder?","Url":"https://github.com/aspnet/Blazor/issues/1284","RelatedDescription":"Closed issue \"[Question] [Server side rendering] Guidance on adding logging to Blazor app\" (#1284)"},{"Id":"348829898","IsPullRequest":false,"CreatedAt":"2018-08-08T17:55:28","Actor":"natemcmaster","Number":"1285","RawContent":null,"Title":"Move x-plat testing into VSTS","State":"open","Body":"AppVeyor and Travis are still required to provide full test coverage. To make VSTS provide the same level of coverage, we need to\r\n\r\n* Enable selenium-standalone on VSTS\r\n* Add macOS and Linux build phases\r\n* Ensure tests run with `/p:BlazorAllTests=true` (or just make this default)\r\n","Url":"https://github.com/aspnet/Blazor/issues/1285","RelatedDescription":"Open issue \"Move x-plat testing into VSTS\" (#1285)"}],"ResultType":"GitHubIssue"}},"RunOn":"2018-08-15T05:30:02.7889697Z","RunDurationInMilliseconds":1270}