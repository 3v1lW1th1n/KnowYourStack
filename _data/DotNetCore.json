{"Data":{"Blog":{"FeedItems":[{"Title":"Calling all Desktop Developers: how should UI development be improved?","PublishedOn":"2018-03-23T18:01:31+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The user interface (UI) of any application is critical in making your app convenient and efficient for the folks using it. When developing applications for Enterprise use, a good UI can shave time off...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/03/23/calling-all-desktop-developers-how-should-ui-development-be-improved/","RawContent":null},{"Title":".NET Framework 4.7.2 Developer Pack Early Access build 3056 is available!","PublishedOn":"2018-03-08T23:22:13+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are happy to share an Early Access build with the .NET Framework 4.7.2 Developer Pack. The .NET Framework 4.7.2 Developer Pack lets developers build applications that target the .NET...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/03/08/net-framework-4-7-2-developer-pack-early-access-build-3056-is-available/","RawContent":null},{"Title":"F# language and tools update for Visual Studio 2017 version 15.6","PublishedOn":"2018-03-06T18:28:06+00:00","CommentsCount":2,"FacebookCount":0,"Summary":"With the release of Visual Studio 2017 version 15.6, we’re excited to share updates to the F# language and core library, F# tooling in Visual Studio, and infrastructure updates that concern OSS...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/03/06/f-language-and-tools-update-for-visual-studio-2017-version-15-6/","RawContent":null},{"Title":"Announcing Entity Framework Core 2.1 Preview 1","PublishedOn":"2018-02-27T18:11:29+00:00","CommentsCount":7,"FacebookCount":0,"Summary":"Today we are releasing the first preview of EF Core 2.1, alongside .NET Core 2.1 Preview 1 and ASP.NET Core 2.1 Preview 1. The new bits are available in NuGet as part of the individual packages, and...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/27/announcing-entity-framework-core-2-1-preview-1/","RawContent":null},{"Title":"Announcing .NET Core 2.1 Preview 1","PublishedOn":"2018-02-27T18:08:23+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Today, we are announcing .NET Core 2.1 Preview 1. It is the first public release of .NET Core 2.1. We have great improvements that we want to share and that we would love to get your feedback on,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/27/announcing-net-core-2-1-preview-1/","RawContent":null},{"Title":"Calling All Desktop Developers: How do you interact with data?","PublishedOn":"2018-02-27T17:00:36+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Connecting to databases and services is an important part of desktop application development for many of our customers. Visual Studio provides a variety of tools and technologies that can help you...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/27/calling-all-desktop-developers-how-do-you-interact-with-data/","RawContent":null},{"Title":"Azure Blob Storage as a Network Drive","PublishedOn":"2018-02-26T16:00:00+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Many applications make use of a network drive to backup and store files. When I was in university I found myself constantly coding for fun, and one example took the form of a network share for my...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/26/azure-blob-storage-as-a-network-drive/","RawContent":null},{"Title":".NET Framework February 2018 Security and Quality Rollup","PublishedOn":"2018-02-14T04:27:17+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Today, we are releasing the February 2018 Security and Quality Rollup. Security No new security fixes. See .NET Framework January 2018 Security and Quality Rollup for the latest security updates....","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/13/net-framework-february-2018-security-and-quality-rollup/","RawContent":null},{"Title":"Machine Learning in .NET – Help us build the right experience!","PublishedOn":"2018-02-13T17:17:58+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"In the past few years, Machine Learning (ML) and Artificial Intelligence (AI) have paved the road for building smarter applications through advancements in speech recognition, computer vision,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/13/machine-learning-in-net-help-us-build-the-right-experience/","RawContent":null},{"Title":"Announcing .NET Framework 4.7.2 Early Access build 3052!","PublishedOn":"2018-02-05T21:55:13+00:00","CommentsCount":14,"FacebookCount":0,"Summary":"Today, we are happy to share the .NET Framework 4.7.2 Early Access build 3052 for your feedback. .NET Framework 4.7.2 is the next version of the .NET Framework. It is currently feature-complete and in...","Href":"https://blogs.msdn.microsoft.com/dotnet/2018/02/05/announcing-net-framework-4-7-2-early-access-build-3052/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"7419410563","Type":"IssuesEvent","CreatedAt":"2018-03-22T14:02:36","Actor":"vvavrychuk","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/issues/99","RelatedDescription":"Opened issue \"not working \"Linux Distribution\" dropdown on http://www.microsoft.com/net/learn/get-started/linux \" (#99) at dotnet/home","RelatedBody":"On the page http://www.microsoft.com/net/learn/get-started/linux dropdown \"Linux Distribution\" has no effect on the installation instruction next to him (they are always displayed for RedHat).\r\n\r\n![screenshot from 2018-03-22 16-02-19](https://user-images.githubusercontent.com/152563/37775020-6ec5778e-2dea-11e8-9ea3-b33e26c1c4e1.png)\r\n"},{"Id":"7192252734","Type":"PullRequestEvent","CreatedAt":"2018-02-03T01:30:47","Actor":"karann-msft","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/98","RelatedDescription":"Opened pull request \"Updates to reflect the latest information\" (#98) at dotnet/home","RelatedBody":""},{"Id":"7187459205","Type":"PullRequestEvent","CreatedAt":"2018-02-02T05:26:03","Actor":"mairaw","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/97","RelatedDescription":"Opened pull request \"update CLA PDF link\" (#97) at dotnet/home","RelatedBody":""},{"Id":"7102763357","Type":"PullRequestEvent","CreatedAt":"2018-01-16T00:17:04","Actor":"galatrash-at-dnn","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/96","RelatedDescription":"Opened pull request \"Adding DNN Platform.\" (#96) at dotnet/home","RelatedBody":""},{"Id":"7097053889","Type":"PullRequestEvent","CreatedAt":"2018-01-14T15:15:00","Actor":"bfistein","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/95","RelatedDescription":"Opened pull request \"Fix broken logo URL\" (#95) at dotnet/home","RelatedBody":""},{"Id":"7065382954","Type":"PullRequestEvent","CreatedAt":"2018-01-06T19:21:47","Actor":"ctaggart","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/94","RelatedDescription":"Opened pull request \"add SourceLink\" (#94) at dotnet/home","RelatedBody":"Adding SourceLink to the project list as per the checklist https://github.com/ctaggart/SourceLink/issues/138"}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"7387413694","Type":"IssuesEvent","CreatedAt":"2018-03-15T21:18:32","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/announcements/issues/63","RelatedDescription":"Reopened issue \"Transport Layer Security (TLS) best practices with the .NET Framework article published\" (#63) at dotnet/announcements","RelatedBody":"# Transport Layer Security (TLS) best practices with the .NET Framework article published\r\n\r\nA new article was published that discusses the Transport Layer Security (TLS) best practices at https://docs.microsoft.com/dotnet/framework/network-programming/tls.\r\n\r\nTo ensure .NET Framework applications remain secure, the TLS version should **not** be hardcoded. .NET Framework applications should use the TLS version the operating system (OS) supports.\r\n\r\nThe (TLS) best practices article targets developers who are:\r\n* Directly using the System.Net APIs (for example, `System.Net.Http.HttpClient` and `System.Net.Security.SslStream`).\r\n* Directly using WCF clients and services using the `System.ServiceModel` namespace.\r\n* Using [Azure Cloud Services](https://azure.microsoft.com/services/cloud-services/) Web and Worker roles to host and run your application. See the [Azure Cloud Services](https://docs.microsoft.com/dotnet/framework/network-programming/tls#azure-cloud-services) section.\r\n\r\nThe article explains how to enable the strongest security available for the version of the .NET Framework that your app targets and runs on.\r\n\r\nThe section [Audit your code and make code changes](https://docs.microsoft.com/dotnet/framework/network-programming/tls#audit-your-code-and-make-code-changes) covers auditing and updating your code.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\ndotnet/docs#4675"},{"Id":"7387391842","Type":"IssuesEvent","CreatedAt":"2018-03-15T21:13:45","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/63","RelatedDescription":"Closed issue \"Transport Layer Security (TLS) best practices with the .NET Framework article published\" (#63) at dotnet/announcements","RelatedBody":"# Transport Layer Security (TLS) best practices with the .NET Framework article published\r\n\r\nA new article was published that discussed the Transport Layer Security (TLS) best practices at https://docs.microsoft.com/dotnet/framework/network-programming/tls.\r\n\r\nTo ensure .NET Framework applications remain secure, the TLS version should **not** be hardcoded. .NET Framework applications should use the TLS version the operating system (OS) supports.\r\n\r\nThe (TLS) best practices article targets developers who are:\r\n* Directly using the System.Net APIs (for example, `System.Net.Http.HttpClient` and `System.Net.Security.SslStream`).\r\n* Directly using WCF clients and services using the `System.ServiceModel` namespace.\r\n* Using [Azure Cloud Services](https://azure.microsoft.com/services/cloud-services/) Web and Worker roles to host and run your application. See the [Azure Cloud Services](https://docs.microsoft.com/dotnet/framework/network-programming/tls#azure-cloud-services) section.\r\n\r\nThe article explains how to enable the strongest security available for the version of the .NET Framework that your app targets and runs on.\r\n\r\nThe section [Audit your code and make code changes](https://docs.microsoft.com/dotnet/framework/network-programming/tls#audit-your-code-and-make-code-changes) covers auditing and updating your code.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\ndotnet/docs#4675"},{"Id":"7373349220","Type":"IssuesEvent","CreatedAt":"2018-03-13T17:01:53","Actor":"blowdart","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/62","RelatedDescription":"Opened issue \"Microsoft Security Advisory CVE-2018-0875: Hash Collison can cause Denial of Service\" (#62) at dotnet/announcements","RelatedBody":"# Microsoft Security Advisory CVE-2018-0875: Hash Collison can cause Denial of Service\r\n## Executive Summary\r\n\r\nMicrosoft is releasing this security advisory to provide information about a vulnerability in the public versions of .NET Core 1.0 and 2.0 (including other minor and patch releases).\r\nThis advisory also provides guidance on what developers can do to update their applications correctly.\r\n\r\nMicrosoft is aware of a security vulnerability in the public versions of .NET Core where a malicious file or web request could cause a denial of service (DoS) attack.\r\n\r\nSystem administrators are advised to update their .NET Core runtimes to versions 1.0.10, 1.1.7 or 2.0.6. Developers are advised to update their .NET Core SDK to versions 1.1.8 or 2.1.101.\r\n\r\n## Discussion\r\n\r\nUse *TBD* for discussion of this advisory.\r\n\r\n### Mitigation Factors\r\nNone\r\n\r\n### Affected Software\r\n\r\nAny application running against .NET Core 1.0.9 or lower versions, 1.1.6 or lower minor versions or 2.0.5 or lower minor versions is affected. \r\n\r\n### Advisory FAQ\r\n#### How do I know if I am affected?\r\nAny application running against .NET Core 1.0.9 or lower versions, 1.1.6 or lower minor versions or 2.0.5 or lower minor versions is affected. \r\n\r\nA complete list of runtimes can be discovered by performing a directory listing in the install root directories. The default root directories are listed in the following table:\r\n\r\n| Operating System | Location |\r\n|------------------|----------|\r\n| Windows\t| `C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\` |\r\n| macOS\t| `/usr/local/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n| Supported Linux platforms\t| `/usr/share/dotnet/shared/Microsoft.NETCore.App/` |\r\n\r\nEach runtime version is installed in its own directory, where the directory name is the version number. If you don't have a directory for 1.0.10, 1.1.7 and 2.0.6, then any applications targeting the respective major/minor versions, 1.0 or 1.1 or 2.0 of .NET Core are vulnerable.\r\n\r\nAdditionally, if you've deployed self-contained applications targeting any of the impacted versions, these applications are also vulnerable and must be recompiled and redeployed.\r\n\r\n#### How do I fix my affected application?\r\n\r\nApplications can be fixed by installing the latest .NET Core runtimes or SDKs. Typically, application servers only have runtime packages installed and developer machines have the SDKs installed. \r\nInstallers for the runtimes can be downloaded from the [Runtime and SDK download archive](https://github.com/dotnet/core/blob/master/release-notes/download-archive.md). \r\n.NET Core 1.1.8 SDK installs both versions 1.0.10 and 1.1.7 of the .NET Core runtime.\r\n\r\nIf you've built a self-contained application, you must install the new runtime and SDK, recompile your application and redeploy.\r\n\r\n#### What if the update breaks my application?\r\nAn application can be pinned to a previous version of the runtime by editing the `application.runtime.config` file for that application. Set the framework version to the desired version and the `rollForward` property to false. These settings should be treated as a temporary measure and the application updated to work with the patched versions of the framework.\r\n\r\nSince the `application.runtime.config` file is an optional file, you may need to create one for each application and add it alongside the executable.\r\n\r\n### Acknowledgments\r\n[Ben Adams](https://twitter.com/ben_a_adams) of [Illyriad Games](https://www.illyriad.co.uk/)\r\n\r\n### External Links\r\n[CVE-2018-0875](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0875)\r\n\r\n### Revisions\r\n\r\nV1.0 (Mar 13, 2018): Advisory published.\r\n\r\n_Version 1.0_\r\n_Last Updated 2018-03-13_\r\n"},{"Id":"7301596554","Type":"IssuesEvent","CreatedAt":"2018-02-27T06:10:33","Actor":"mairaw","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/61","RelatedDescription":"Opened issue \"New offline books released for Visual Studio 2017\" (#61) at dotnet/announcements","RelatedBody":"# New offline books released for Visual Studio 2017\r\n\r\nEarlier this month, we released an update to Offline Books for the Visual Studio 2017 Help Viewer.\r\n\r\nThis release includes new .NET books, including .NET Core Guide, .NET Guide, .NET Framework Guide and the .NET API Reference. It also includes the latest content for Visual Studio 2017 version 15.5, the latest updates to Visual Basic, C# (7.1 and 7.2), F#, ASP.NET Core, NuGet, SQL Server, and the Universal Windows Platform.\r\n\r\nThe .NET Guide, .NET Framework Guide and .NET API Reference books together are a replacement for the .NET Framework 4.6 and 4.5 book, which can be removed. Just be aware that the new .NET API Reference book currently displays the API syntax block for C# only, but examples are shown in other languages, just like the experience you currently have on docs.microsoft.com.If you need to see the API syntax for Visual Basic, C++/CLI or F#, then you should keep the old book until the new reference book is updated again in a few weeks. Once you remove the .NET Framework 4.6 and 4.5 book, you cannot reinstall it.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts and have any discussions with us at:\r\n\r\n- https://github.com/dotnet/docs/issues/4502\r\n\r\n## Add new content\r\n\r\nYou will see these new books when you have Help Viewer installed and choose **Help** > **Add and Remove Content** from the Visual Studio 2017 main menu. If you don't see this menu item, then [open the Visual Studio Installer](https://docs.microsoft.com/visualstudio/install/modify-visual-studio), click the **More** dropdown and choose **Modify**. When the component list appears, choose **Individual Components** at the top, then check **Help Viewer**.\r\n\r\n![help_viewer_component](https://user-images.githubusercontent.com/12971179/36713111-c9d49a7c-1b40-11e8-918a-e7e3619669a2.png)\r\n\r\n## Help Viewer Installation\r\n\r\nTo start the installation, select the **Modify** button in the lower right corner of the Installer window.\r\n\r\nTo update individual books whose status is \"Updates available\", remove the book and then click **Add** to get the new version. To update all your books at once, select the link in the lower right corner of the **Add and Remove Content** window:\r\n\r\n![offline-books](https://user-images.githubusercontent.com/12971179/36713028-75b944f6-1b40-11e8-91c4-4830355f815e.png)"},{"Id":"7300537622","Type":"IssuesEvent","CreatedAt":"2018-02-27T00:12:10","Actor":"eerhardt","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/60","RelatedDescription":"Opened issue \"System.Runtime.Intrinsics in .NET Core 2.1\" (#60) at dotnet/announcements","RelatedBody":"# System.Runtime.Intrinsics in .NET Core 2.1\r\n\r\n.NET Core 2.1 has been adding platform intrinsic APIs to support directly calling processor specific instructions, such as Intel’s x86 SIMD instructions.  See the [initial platform intrinsics design](https://github.com/dotnet/designs/blob/master/accepted/platform-intrinsics.md) for more information.\r\n\r\nWe have decided that it makes the most sense for this intrinsics feature to ship in a “preview” status in the .NET Core 2.1 RTM timeframe.  This means that the runtime support we are implementing will be included, but the assembly exposing the intrinsics will only be available to projects via explicit reference to a “preview-only” package.  These APIs won’t be included in the official .NET Core 2.1 packages.\r\n\r\nGiven our limited time and resources, recent changes in the approach we take to expose the intrinsics, and API changes prompted by design feedback from the community, we don’t believe there is enough time to settle these APIs for 2.1. We plan to follow the pattern of other recent features like Span<T> and Memory<T> that first shipped in preview before formally joining the supported API surface.  Not only would we expect the next version of .NET Core to support more intrinsics than could be supported in 2.1, but we expect to have real usage examples in CoreFX and higher level components as well.  These real world examples, as well as feedback from customers who opt in to the preview, should give us the confidence we need to officially support the APIs going forward.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\nhttps://github.com/dotnet/corefx/issues/27486\r\n\r\n## Details\r\n\r\nIn the coming days, we plan on removing System.Runtime.Intrinsics.dll from the Microsoft.NETCore.App package.  This means any libraries/applications that are using these APIs will no longer compile by default, and will not run on new builds of .NET Core 2.1.\r\n\r\nAt the same time, we will start producing a new System.Runtime.Intrinsics.Experimental NuGet package.  In order to continue using these APIs on .NET Core 2.1, a project will need to add a reference to this new package.\r\n\r\nAs its name implies, this package is experimental and should only be used for preview purposes.  It isn’t expected to be used in production scenarios.  Future version of .NET Core (after 2.1) will be allowed to break this package. This enables us respond to future feedback that requires the APIs to be modified.\r\n\r\nIn the future, when we are confident we have the intrinsic APIs right, we will stop producing the System.Runtime.Intrinsics.Experimental package. The platform intrinsics APIs will then be added back to Microsoft.NETCore.App and will be officially supported."},{"Id":"7273056222","Type":"IssuesEvent","CreatedAt":"2018-02-21T02:28:03","Actor":"KathleenDollard","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/57","RelatedDescription":"Opened issue \"Manually Uninstall .NET Core SDK 2.2.0-Preview Nightly Builds\" (#57) at dotnet/announcements","RelatedBody":"# Manually Uninstall .NET Core SDK 2.2.0-Preview Nightly Builds\r\n\r\n[A change in the version number strategy for .NET Core SDK](https://github.com/dotnet/designs/pull/29) resulted in some nightly builds having a higher version number. This higher version number will block the installation of the correct .NET Core SDK.\r\n\r\nIf you have installed nightly builds of the .NET Core SDK that start with version number that begin with `2.2.0-preview1`, you must manually uninstall these preview builds before later versions of the SDK with version numbers like 2.1.xxx will be available. This may have occurred by installing nightly builds of the .NET Core SDK or nightly builds of Visual Studio 15.5 Preview. \r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n[dotnet/cli #8652](https://github.com/dotnet/cli/issues/8652)\r\n\r\n## Details\r\n\r\n[We changed the version number strategy for .NET Core SDK](https://github.com/dotnet/designs/pull/29) as development was ongoing. Because of this, version numbers on the old scheme appeared in nightly builds. Unfortunately, these numbers are higher than the version numbers in the new scheme. All of the newer SDKs for .NET Core 2.1 will be ignored due to this higher version number; this includes newer nightly builds, public previews and eventual releases.\r\n\r\nThese older version numbers are similar to the following, with the last several different values in the last six digits:\r\n\r\n```\r\n2.2.0-preview1-008000\r\n```\r\n\r\nSince the newer versions are in the form:\r\n\r\n```\r\n2.1.300-preview1-008000\r\n```\r\n\r\n## Call to Action\r\n\r\nIf you have installed nightly builds. Please uninstall any .NET SDK versions that start with 2.2.0-preview1."}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7451591784","Type":"PullRequestEvent","CreatedAt":"2018-03-29T03:55:22","Actor":"ahsonkhan","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17309","RelatedDescription":"Merged pull request \"Update BuildTools, CoreClr, CoreFx to preview3-02629-02, preview3-26329-01, preview3-26329-01, respectively (master)\" (#17309) at dotnet/coreclr","RelatedBody":"/cc @dotnet/coreclr-auto-update-notify"},{"Id":"7451451034","Type":"IssuesEvent","CreatedAt":"2018-03-29T03:02:30","Actor":"daoqiang","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/17312","RelatedDescription":"Opened issue \"On static references\" (#17312) at dotnet/coreclr","RelatedBody":"I compiled the coreclr in static state and added it to my c++ project, but failed, some functions could not be found, and I couldn't use coreclr.lib correctly."},{"Id":"7451417602","Type":"PullRequestEvent","CreatedAt":"2018-03-29T02:50:34","Actor":"maryamariyan","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/17311","RelatedDescription":"Opened pull request \"StringBuilder.Equals: value to span\" (#17311) at dotnet/coreclr","RelatedBody":"cc: @ahsonkhan @danmosemsft @terrajobst "},{"Id":"7451258137","Type":"IssuesEvent","CreatedAt":"2018-03-29T01:51:16","Actor":"sdmaclea","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/10982","RelatedDescription":"Closed issue \"[Arm64/Unix] SOS 64K page support\" (#10982) at dotnet/coreclr","RelatedBody":"Fix \"TODO-ARM64-NYI Support for SOS on target with 64K pages\" Introduced by #10981\r\n"},{"Id":"7451254333","Type":"IssuesEvent","CreatedAt":"2018-03-29T01:49:48","Actor":"sdmaclea","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/11659","RelatedDescription":"Closed issue \"[Arm64/Unix] GC Fails\" (#11659) at dotnet/coreclr","RelatedBody":"Testing f2913a3 showed a few new GC Stress fails.\r\n\r\n```\r\nbaseservices/threading/interlocked/add/InterlockedAddLong_1/InterlockedAddLong_1.sh\r\nJIT/Directed/nullabletypes/castclassvaluetype_d/castclassvaluetype_d.sh\r\nJIT/Generics/Exceptions/general_struct_instance01/general_struct_instance01.sh\r\n```"},{"Id":"7451251755","Type":"IssuesEvent","CreatedAt":"2018-03-29T01:48:48","Actor":"sdmaclea","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/14104","RelatedDescription":"Closed issue \"[Arm64] JIT NYI questions \" (#14104) at dotnet/coreclr","RelatedBody":" These codegen nodes are not implemented in Arm64\r\n`GT_LOCKADD`, `GT_XCHG`, `GT_XADD`, `GT_CMPXCHG`, `GT_CLS_VAR_ADDR`.\r\n\r\n+ Should they be?  \r\n+ Would it be beneficial?\r\n+ Why are they not triggering a NYI related assert?  What is disabled?\r\n \r\n@dotnet/jit-contrib @dotnet/arm64-contrib "},{"Id":"7451246110","Type":"IssuesEvent","CreatedAt":"2018-03-29T01:46:41","Actor":"maryamariyan","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/issues/17310","RelatedDescription":"Opened issue \"MEF tests failed on redhat 69 for possible runtime issue\" (#17310) at dotnet/coreclr","RelatedBody":"MEF tests failed on redhat 69 for possible runtime issue\r\n\r\nDetails:\r\n```\r\n Discovering: System.ComponentModel.Composition.Tests\r\n Discovered:  System.ComponentModel.Composition.Tests\r\n Starting:    System.ComponentModel.Composition.Tests\r\n requiredService: System.ComponentModel.Composition.Hosting.CompositionContainer+CompositionServiceShim\r\n optionalService: System.ComponentModel.Composition.Hosting.CompositionContainer+CompositionServiceShim\r\n /home/helixbot/dotnetbuild/work/10f7163c-1a92-4504-9c3c-53c1cf142621/Work/7133f59b-1b5d-421f-b049-eb73728c0614/Unzip/RunTests.sh: line 95: 93251 Aborted\r\n (core dumped) $RUNTIME_PATH/dotnet xunit.console.netcore.exe System.ComponentModel.Composition.Tests.dll -xml testResults.xml -notrait category=nonnetcoreapptests -notrait category=nonlinuxtests -notrait category=failing\r\n Dumpling has not been installed yet. Please run \"DumplingHelper.py install_dumpling\" before collect_dumps.\r\n ~/dotnetbuild/work/10f7163c-1a92-4504-9c3c-53c1cf142621/Work/7133f59b-1b5d-421f-b049-eb73728c0614/Unzip\r\n ----- end 09:13:48 ----- exit code 134 ----------------------------------------------------------\r\n Looking around for any Linux dump...\r\n Looking for files matching core.93251 ...\r\n Printing info from core file core.93251\r\n Missing separate debuginfo for ..../Payload/dotnet\r\n ....\r\n [Thread debugging using libthread_db enabled]\r\n Missing separate debuginfo for ..../Payload/host/fxr/9.9.9/libhostfxr.so\r\n Try: yum --enablerepo='*-debug*' install /usr/lib/debug/.build-id/b9/571b3e33fca3dd72032aac5e8d1429f094773d.debug\r\n Missing separate debuginfo for ..../Payload/shared/Microsoft.NETCore.App/9.9.9/libhostpolicy.so\r\n Try: yum --enablerepo='*-debug*' install /usr/lib/debug/.build-id/1e/efba7defe2402155b53b8bf2f550c228b412fd.debug\r\n Missing separate debuginfo for ..../Payload/shared/Microsoft.NETCore.App/9.9.9/libclrjit.so\r\n Try: yum --enablerepo='*-debug*' install /usr/lib/debug/.build-id/28/9ecb37d0b8869d97ae27f3e0071b435ba9d0da.debug\r\n Core was generated by `..../Payload/do'.\r\n Program terminated with signal 6, Aborted.\r\n #0  0x0000003596a32495 in raise () from /lib64/libc.so.6\r\n```\r\n\r\nBelow showing a bit of dump from Thread 1 and Thread 9:\r\n\r\n```\r\nThread 1 (Thread 0x7fe43ebfd700 (LWP 93262)):\r\n  #0  0x0000003596a32495 in raise () from /lib64/libc.so.6\r\nNo symbol table info available.\r\n  #1  0x0000003596a33c75 in abort () from /lib64/libc.so.6\r\nNo symbol table info available.\r\n  #2  0x00007fe4e81d9dfe in PROCAbort () at /root/coreclr/src/pal/src/thread/process.cpp:3068\r\n  #3  0x00007fe4e81d8cfb in PROCEndProcess(void*, unsigned int, int) () at /root/coreclr/src/pal/src/thread/process.cpp:1394\r\n  #4  0x00007fe4e7e9135e in SafeExitProcess(unsigned int, int, ShutdownCompleteAction) () at /root/coreclr/src/vm/eepolicy.cpp:519\r\n  #5  0x00007fe4e7e92828 in EEPolicy::HandleFatalError(unsigned int, unsigned long, char16_t const*, _EXCEPTION_POINTERS*, char16_t const*, char16_t const*) () at /root/coreclr/src/vm/eepolicy.cpp:1545\r\n  #6  0x00007fe4e7f4365e in ProcessCLRException () at /root/coreclr/src/vm/exceptionhandling.cpp:1029\r\n  #7  0x00007fe4e7f476e4 in UnwindManagedExceptionPass1(PAL_SEHException&, _CONTEXT*) () at /root/coreclr/src/vm/exceptionhandling.cpp:4630\r\n  #8  0x00007fe4e7f479e3 in DispatchManagedException(PAL_SEHException&, bool) () at /root/coreclr/src/vm/exceptionhandling.cpp:4752\r\n  #9  0x00007fe4e7f42284 in HandleHardwareException(PAL_SEHException*) () at /root/coreclr/src/vm/exceptionhandling.cpp:5275\r\n  #10 0x00007fe4e81a1a91 in SEHProcessException(PAL_SEHException*) () at /root/coreclr/src/pal/src/exception/seh.cpp:286\r\n```\r\n\r\n```\r\n Thread 9 (Thread 0x7fe43e1fc700 (LWP 93263)):\r\n  #0  JIT_IsInstanceOfInterface_Portable () at /root/coreclr/src/vm/jithelpers.cpp:2487\r\n  #1  0x00007fe46ed6f3be in ?? ()\r\n No symbol table info available.\r\n  #2  0x00007fe43e1f9ae8 in ?? ()\r\n No symbol table info available.\r\n....\r\n  #19 0x00007fe46f11c734 in ?? ()\r\n No symbol table info available.\r\n  #20 0x00007fe43e1f9a80 in ?? ()\r\n No symbol table info available.\r\n  #21 0x00007fe4e7ec2bf2 in JIT_MonExit_Portable () at /root/coreclr/src/vm/threads.inl:34\r\n Backtrace stopped: previous frame inner to this frame (corrupt stack?)\r\n```\r\n"},{"Id":"7451213582","Type":"IssuesEvent","CreatedAt":"2018-03-29T01:34:31","Actor":"sdmaclea","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/17007","RelatedDescription":"Closed issue \"[Arm64/Ubuntu] Crossgen segmentation faults during build bootstrap\" (#17007) at dotnet/coreclr","RelatedBody":"While buidling arm64 bootstrap cli with this combination\r\n\r\n```\r\n**** DETECTING VERSIONS IN SEED CLI ****\r\nFramework version: 2.1.0-preview2-26316-06\r\nSDK version:       2.1.300-preview2-008375\r\nFXR version:       2.1.0-preview2-26316-06\r\n**** DETECTING GIT COMMIT HASHES ****\r\ncoreclr hash:    9d0e7065b788333c712a31d11fc46fe561887b66\r\ncorefx hash:     23165cee77ae4dd7a7645b7927872948bb27a73e\r\ncore-setup hash: e8d248c21937da58626ef828f6e55abfa22ca8a1\r\n```\r\n\r\nI am seeing segmentation faults during crossgen\r\n\r\n```\r\n**** Beginning crossgen for arm64 target  ****\r\n_: line 1: 10247 Segmentation fault      timeout $__crossgentimeout $2/crossgen /MissingDependenciesOK /Platform_Assemblies_Paths $2:$(dirname $1) /in $1 /out $1.ni >> $1.log 2>&1\r\n_: line 1: 11712 Segmentation fault      timeout $__crossgentimeout $2/crossgen /MissingDependenciesOK /Platform_Assemblies_Paths $2:$(dirname $1) /in $1 /out $1.ni >> $1.log 2>&1\r\n_: line 1: 13638 Segmentation fault      timeout $__crossgentimeout $2/crossgen /MissingDependenciesOK /Platform_Assemblies_Paths $2:$(dirname $1) /in $1 /out $1.ni >> $1.log 2>&1\r\n_: line 1: 14088 Segmentation fault      timeout $__crossgentimeout $2/crossgen /MissingDependenciesOK /Platform_Assemblies_Paths $2:$(dirname $1) /in $1 /out $1.ni >> $1.log 2>&1\r\n_: line 1: 13977 Segmentation fault      timeout $__crossgentimeout $2/crossgen /MissingDependenciesOK /Platform_Assemblies_Paths $2:$(dirname $1) /in $1 /out $1.ni >> $1.log 2>&1\r\n_: line 1: 12109 Segmentation fault      timeout $__crossgentimeout $2/crossgen /MissingDependenciesOK /Platform_Assemblies_Paths $2:$(dirname $1) /in $1 /out $1.ni >> $1.log 2>&1\r\n_: line 1: 13673 Segmentation fault      timeout $__crossgentimeout $2/crossgen /MissingDependenciesOK /Platform_Assemblies_Paths $2:$(dirname $1) /in $1 /out $1.ni >> $1.log 2>&1\r\n\r\n**** Crossgen failed for the following dlls:\r\n\r\n/home/vmjenkins/workspace/Dotnet/build-bootstrap/bootstrap/dotnetcli/sdk/2.1.300-preview2-008375/TestHost/System.Collections.Immutable.dll\r\n/home/vmjenkins/workspace/Dotnet/build-bootstrap/bootstrap/dotnetcli/shared/Microsoft.AspNetCore.All/2.1.0-preview2-30338/Microsoft.AspNetCore.SignalR.Redis.dll\r\n/home/vmjenkins/workspace/Dotnet/build-bootstrap/bootstrap/dotnetcli/sdk/2.1.300-preview2-008375/MSBuild.dll\r\n/home/vmjenkins/workspace/Dotnet/build-bootstrap/bootstrap/dotnetcli/shared/Microsoft.AspNetCore.All/2.1.0-preview2-30338/Microsoft.AspNetCore.Server.Kestrel.Transport.Libuv.dll\r\n/home/vmjenkins/workspace/Dotnet/build-bootstrap/bootstrap/dotnetcli/shared/Microsoft.AspNetCore.App/2.1.0-preview2-30338/Microsoft.AspNetCore.JsonPatch.dll\r\n/home/vmjenkins/workspace/Dotnet/build-bootstrap/bootstrap/dotnetcli/shared/Microsoft.NETCore.App/2.1.0-preview2-26316-06/System.Collections.Immutable.dll\r\n/home/vmjenkins/workspace/Dotnet/build-bootstrap/bootstrap/dotnetcli/shared/Microsoft.NETCore.App/2.1.0-preview2-26316-06/System.Collections.dll\r\n/home/vmjenkins/workspace/Dotnet/build-bootstrap/bootstrap/dotnetcli/sdk/2.1.300-preview2-008375/Microsoft.CodeAnalysis.CSharp.dll\r\n/home/vmjenkins/workspace/Dotnet/build-bootstrap/bootstrap/dotnetcli/shared/Microsoft.AspNetCore.App/2.1.0-preview2-30338/Microsoft.CodeAnalysis.CSharp.dll\r\n```"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7451085804","Type":"PullRequestEvent","CreatedAt":"2018-03-29T00:46:35","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8922","RelatedDescription":"Merged pull request \"Fix wrong instruction\" (#8922) at dotnet/cli","RelatedBody":""},{"Id":"7450932751","Type":"IssuesEvent","CreatedAt":"2018-03-28T23:50:03","Actor":"omajid","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8923","RelatedDescription":"Opened issue \"Port zsh shell completion to #compdef\" (#8923) at dotnet/cli","RelatedBody":"Our current [shell completion for zsh](https://github.com/dotnet/cli/blob/master/scripts/register-completions.zsh) uses `compctl`. This makes it hard for any packages (like `.deb`, or `.rpm`) to register these completions as system-wide by default. We can't simply copy the file at `/usr/share/zsh/site-functions/` and call it a day. They wont get picked up. As far as I can tell, `zsh` actually only supports `#compdef`-style completions for this: http://zsh.sourceforge.net/Doc/Release/Completion-System.html#Autoloaded-files\r\n\r\nWe should port the completions to the new `#compdef` format and instead of using the older `compctl`-format which has been obsolete since the 90s.\r\n\r\n\r\n"},{"Id":"7450709638","Type":"PullRequestEvent","CreatedAt":"2018-03-28T22:40:54","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8922","RelatedDescription":"Opened pull request \"Fix wrong instruction\" (#8922) at dotnet/cli","RelatedBody":""},{"Id":"7450647247","Type":"IssuesEvent","CreatedAt":"2018-03-28T22:23:42","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7551","RelatedDescription":"Closed issue \"\"dotnet run\" went from 4 seconds to 45 seconds to lauch project\" (#7551) at dotnet/cli","RelatedBody":"Looks like dotnet is scanning the complete directory rather than specifying a 'launch' .cs file and following dependencies used from that file.  Equally, it would be good to be able to specify different launch commands under one git repo to manage different process types, for example: \r\n\r\n```\r\n> dotnet run worker_imageprocessor.cs\r\n> dotnet run kestel_server.cs\r\n```\r\n\r\n## Steps to reproduce\r\n\r\nWorking on a small app, c#  backend, react frontend.   Used 'create-react-app & npm install' to create a folder 'frontend' under project directory (common directory structure in nodejs projects)\r\n\r\n## Expected  behavior\r\n\r\nExpected this would have no impact on dotnet cli as the frontend folder has no files related to the backend build process, however.\r\n\r\n## Actual behaviour\r\n\r\nIt caused every dotnet run to take 10x longer.  \r\n\r\n\r\n## Environment data\r\n\r\n.NET Command Line Tools (2.0.0)\r\n\r\nProduct Information:\r\n Version:            2.0.0\r\n Commit SHA-1 hash:  cdcd1928c9\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.15063\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.0\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.0\r\n  Build    : e8b8861ac7faf042c87a5c2f9f2d04c98b69f28d\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"7450635060","Type":"IssuesEvent","CreatedAt":"2018-03-28T22:20:33","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/8103","RelatedDescription":"Closed issue \"dotnet run is slow in directory with many files\" (#8103) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\nCreate a .net core project, put some `node_modules` in that has tons of files and directories\r\nMove all sources to `src` subdirectory\r\nPut in `<EnableDefaultItems>false</EnableDefaultItems>` to disable msbuild globbing\r\nPut in `<Compile Include=\"src/**/*.cs\"></Compile>` to actually make it compile\r\nRun `dotnet build`\r\nRun `dotnet run`\r\n\r\n## Expected  behavior\r\nBuild runs fast (since `EnableDefaultItems` prevents msbuild from slowly checking `node_modules`)\r\nRun runs fast (for the same reason as build)\r\n\r\n## Actual behavior\r\nBuild runs fast\r\nRun runs SUPER SLOW (30 seconds for big `package.json`)\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\n.NET Command Line Tools (2.0.3)\r\n\r\nProduct Information:\r\n Version:            2.0.3\r\n Commit SHA-1 hash:  12f0c7efcc\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.0.3\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.3\r\n  Build    : a9190d4a75f4a982ae4b4fa8d1a24526566c69df\r\n```\r\n\r\nThe fact msbuild tries to traverse all the files by default is already super annoying and staying in the way. However it can be avoided as described in reproduction steps. This however doesn't help too much with `dotnet run` and I don't see why it wouldn't. Looks like a bug?"},{"Id":"7450624665","Type":"IssuesEvent","CreatedAt":"2018-03-28T22:17:44","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7511","RelatedDescription":"Closed issue \"Re-enable argument forwarding tests\" (#7511) at dotnet/cli","RelatedBody":"The argument forwarding tests are being disabled as part of #7478, due to https://github.com/dotnet/corefx/issues/23496.  We should re-enable them once that bug is fixed, or when we get a version of MSBuild with https://github.com/Microsoft/msbuild/pull/2467, which also works around the issue."},{"Id":"7450579966","Type":"PullRequestEvent","CreatedAt":"2018-03-28T22:06:37","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8907","RelatedDescription":"Merged pull request \"Prevent default item glgobing when evaluating run properties.\" (#8907) at dotnet/cli","RelatedBody":"When `dotnet run` is executed, a project evaluation occurs to obtain properties\r\nrelated to running the target executable.  Currently, this evaluation causes\r\nthe default item globs to be evaluated.  For project directories containing a\r\nlarge number of files, this can be a bit performance hit since the globbing\r\nhappens twice: once for the build and again for evaluating the run properties.\r\n\r\nThis commit prevents the globbing from taking place when evaluating the run\r\nproperties.\r\n\r\nFixes #8103."},{"Id":"7450533204","Type":"IssuesEvent","CreatedAt":"2018-03-28T21:55:26","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/7331","RelatedDescription":"Closed issue \"Dotnet add package: don't fail when temp files are exhausted.\" (#7331) at dotnet/cli","RelatedBody":"When adding a nuget package to a .net core app 1.1, get the following result:\r\n\r\nA more useful error which doesn't cause the application to fail would be helpful.\r\n\r\n```\r\nPS C:\\docker\\benchmarks\\src> dotnet add package System.Runtime.Serialization.Primitives -v 4.0.10\r\n\r\nUnhandled Exception: System.IO.IOException: The file exists\r\n   at System.IO.Path.GetTempFileName()\r\n   at Microsoft.DotNet.Tools.Add.PackageReference.AddPackageReferenceCommand.Run(String fileOrDirectory)\r\n   at Microsoft.DotNet.Cli.DotNetTopLevelCommandBase.<>c__DisplayClass10_1.<RunCommand>b__0()\r\n   at Microsoft.DotNet.Cli.CommandLine.CommandLineApplication.Execute(String[] args)\r\n   at Microsoft.DotNet.Cli.DotNetTopLevelCommandBase.RunCommand(String[] args)\r\n   at Microsoft.DotNet.Tools.Add.AddCommand.Run(String[] args)\r\n   at Microsoft.DotNet.Cli.Program.ProcessArgs(String[] args, ITelemetry telemetryClient)\r\n   at Microsoft.DotNet.Cli.Program.Main(String[] args)\r\nPS C:\\docker\\benchmarks\\src>\r\n```\r\n\r\n```\r\nPS C:\\Docker\\Benchmarks\\src> dotnet add package \"System.Runtime.Serialization.Primitives\" -version \"4.1.0-beta-23516\"\r\nPlease specify one package reference to add.\r\n```\r\n\r\n![dotnet add error](https://user-images.githubusercontent.com/271732/28842028-f365125c-76b0-11e7-9fcf-eadb5162e91f.png)\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n.NET Command Line Tools (1.0.4)\r\n\r\nProduct Information:\r\n Version:            1.0.4\r\n Commit SHA-1 hash:  af1e6684fd\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.14393\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\1.0.4\r\n\r\n\r\n\r\n\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7451276904","Type":"PullRequestEvent","CreatedAt":"2018-03-29T01:58:17","Actor":"dotnet-maestro-bot","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/695","RelatedDescription":"Opened pull request \"Update BuildTools to preview3-02629-02 (master)\" (#695) at dotnet/standard","RelatedBody":""},{"Id":"7451016632","Type":"PullRequestEvent","CreatedAt":"2018-03-29T00:20:18","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/694","RelatedDescription":"Merged pull request \"Update BuildTools to preview3-02628-01 (master)\" (#694) at dotnet/standard","RelatedBody":""},{"Id":"7447113182","Type":"IssuesEvent","CreatedAt":"2018-03-28T11:23:52","Actor":"Foroughi","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/686","RelatedDescription":"Closed issue \"Missing NetStatandard 2 after install my nuget package\" (#686) at dotnet/standard","RelatedBody":"I have a netstandard2 class library project, which contains some Roslyn analyzers. I'm trying to create NuGet package using a` .nuspec `and `msbuild \\t:pack` command. All working find and i can create the nuget package easily. But as soon as i register my analyzer afteer installing the package on another project i get the following error for each analyzer in my package :\r\n\r\n`An instance of analyzer [AnalyzerName] cannot be created from [AnalyzerDllFile]: Could not load file or assembly 'netstandard, Version=2.0.0.0, Culture=neutral, PublicKeyToken=cc7b13ffcd2ddd51' or one of its dependencies. The system cannot find the file specified`\r\n\r\nHere is the .nuspec file :\r\n\r\n```\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<package xmlns=\"http://schemas.microsoft.com/packaging/2012/06/nuspec.xsd\">\r\n  <metadata>\r\n    <id>[PackageId]</id>\r\n    <version>1.0.9</version>\r\n    <authors>Ali</authors>\r\n    <requireLicenseAcceptance>false</requireLicenseAcceptance>\r\n    <description>test</description>  \r\n  <!-- Solution A i found -->\r\n  <dependencies>\r\n  <group targetFramework=\"net46\">\r\n    <dependency id=\"NETStandard.Library\" version=\"2.0.0\" />\r\n  </group>\r\n\r\n  </dependencies>\r\n     <!-- Solution B i found -->\r\n    <references>      \r\n      <reference file=\"netstandard.dll\" />\r\n  </references>\r\n  </metadata>\r\n  <files>    \r\n    <file src=\"bin\\Debug\\netstandard2.0\\[PackageName].dll\" target=\"analyzers\\dotnet\\cs\" />    \r\n    <file src=\"tools\\*.ps1\" target=\"tools\\\" />\r\n  </files>\r\n</package>\r\n```\r\n\r\n\r\n\r\nI tried many solution that i found on internet but seems I'm missing something else\r\n\r\nFYI both project are targeting to .Net Framework 4.6.1"},{"Id":"7438650960","Type":"PullRequestEvent","CreatedAt":"2018-03-27T01:42:29","Actor":"weshaggard","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/standard/pull/692","RelatedDescription":"Merged pull request \"Simplify apiExcludeList.txt for Xamarin platforms\" (#692) at dotnet/standard","RelatedBody":"Now that excluding namespaces is supported (dotnet/buildtools#1962) we can trim down the list.\r\n\r\n/cc @weshaggard "},{"Id":"7438376889","Type":"PullRequestEvent","CreatedAt":"2018-03-27T00:00:51","Actor":"dotnet-maestro-bot","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/694","RelatedDescription":"Opened pull request \"Update BuildTools to preview3-02627-01 (master)\" (#694) at dotnet/standard","RelatedBody":""},{"Id":"7436105403","Type":"IssuesEvent","CreatedAt":"2018-03-26T15:55:19","Actor":"ericstj","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/693","RelatedDescription":"Opened issue \"Trimming logging is misleading and insufficient\" (#693) at dotnet/standard","RelatedBody":"For shared framework applications we list out files being trimmed that will never deploy with the application.  We should see if we can more accurately represent the trimmed set, or at least don't make any claims about the size savings for shared framework apps.\r\n\r\nAlso there is a large cliff between the amount of information by default and the DGML.  We should look at something in between that provides normal status info (eg: files trimmed) that isn't quite as overwhelming as the DGML."},{"Id":"7434965031","Type":"PullRequestEvent","CreatedAt":"2018-03-26T12:53:28","Actor":"akoeplinger","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/692","RelatedDescription":"Opened pull request \"Simplify apiExcludeList.txt for Xamarin platforms\" (#692) at dotnet/standard","RelatedBody":"Now that excluding namespaces is supported (dotnet/buildtools#1962) we can trim down the list.\r\n\r\n/cc @weshaggard "}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7451783423","Type":"PullRequestEvent","CreatedAt":"2018-03-29T05:17:00","Actor":"pjanotti","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/28587","RelatedDescription":"Opened pull request \"CurlHandler is deadlocking like WinHttpHandler\" (#28587) at dotnet/corefx","RelatedBody":"This repros consistently for Release on High Sierra. Issue #27746 already tracks it.\r\n\r\nIssue tracking the hanging in macOS is #28116 "},{"Id":"7451781123","Type":"PullRequestEvent","CreatedAt":"2018-03-29T05:16:02","Actor":"dotnet-maestro-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/28586","RelatedDescription":"Opened pull request \"Update ProjectNTfs, ProjectNTfsTestILC to beta-26329-00, beta-26329-00, respectively (master)\" (#28586) at dotnet/corefx","RelatedBody":""},{"Id":"7451698362","Type":"IssuesEvent","CreatedAt":"2018-03-29T04:40:30","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/corefx/issues/28238","RelatedDescription":"Reopened issue \"Consolidate the string and span tests for the string-like APIs\" (#28238) at dotnet/corefx","RelatedBody":"See https://github.com/dotnet/corefx/pull/27319#discussion_r170049466 for additional details and context.\r\n\r\nThis way, all the tests will be in one place making it easier to maintain, rather than duplicated between assemblies. Consider moving them to Common as well and reference from System.Memory.csproj so that running System.Memory tests will run all the span related tests.\r\n\r\ncc @tarekgh "},{"Id":"7451691626","Type":"IssuesEvent","CreatedAt":"2018-03-29T04:37:28","Actor":"krwq","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/28585","RelatedDescription":"Opened issue \"Investigate IDN mapping rules when parsing/writing server name\" (#28585) at dotnet/corefx","RelatedBody":"Known issues:\r\n- [ ] client on Windows does not seem to be IDN mapping before sending (investigate if this is correct and if not fix)\r\n- [ ] investigate if fallback is ok in SniHelper.cs (DecodeString) - currently because of the above we can't roundtrip the hostname\r\n"},{"Id":"7451603768","Type":"IssuesEvent","CreatedAt":"2018-03-29T04:00:07","Actor":"ahsonkhan","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/28584","RelatedDescription":"Opened issue \"TestKeyAgreesRecipientIdType_RoundTrip failing in Ci with WindowsCryptographicException on Win7\" (#28584) at dotnet/corefx","RelatedBody":"From https://github.com/dotnet/corefx/pull/28582\r\nWindows.7.Amd64.Open-x64-Debug\r\nhttps://mc.dot.net/#/user/benaadams/pr~2Fjenkins~2Fdotnet~2Fcorefx~2Fmaster~2F/test~2Ffunctional~2Fcli~2F/55bf1b5b0f691c9d6f223c60cbeb2fc46bf746cc/workItem/System.Security.Cryptography.Pkcs.Tests/analysis/xunit/System.Security.Cryptography.Pkcs.EnvelopedCmsTests.Tests.KeyAgreeRecipientInfoTests~2FTestKeyAgreesRecipientIdType_RoundTrip\r\n```text\r\nUnhandled Exception of Type Internal.Cryptography.CryptoThrowHelper+WindowsCryptographicException\r\nMessage :\r\nInternal.Cryptography.CryptoThrowHelper+WindowsCryptographicException : An internal error occurred\r\nStack Trace :\r\n   at Internal.Cryptography.Pal.Windows.PkcsPalWindows.EncodeHelpers.CreateCryptMsgHandleToEncode(CmsRecipientCollection recipients, Oid innerContentType, AlgorithmIdentifier contentEncryptionAlgorithm, X509Certificate2Collection originatorCerts, CryptographicAttributeObjectCollection unprotectedAttributes) in D:\\j\\workspace\\windows-TGrou---74aa877a\\src\\System.Security.Cryptography.Pkcs\\src\\Internal\\Cryptography\\Pal\\Windows\\PkcsPalWindows.Encrypt.cs:line 80\r\n   at Internal.Cryptography.Pal.Windows.PkcsPalWindows.Encrypt(CmsRecipientCollection recipients, ContentInfo contentInfo, AlgorithmIdentifier contentEncryptionAlgorithm, X509Certificate2Collection originatorCerts, CryptographicAttributeObjectCollection unprotectedAttributes) in D:\\j\\workspace\\windows-TGrou---74aa877a\\src\\System.Security.Cryptography.Pkcs\\src\\Internal\\Cryptography\\Pal\\Windows\\PkcsPalWindows.Encrypt.cs:line 25\r\n   at System.Security.Cryptography.Pkcs.EnvelopedCms.Encrypt(CmsRecipientCollection recipients) in D:\\j\\workspace\\windows-TGrou---74aa877a\\src\\System.Security.Cryptography.Pkcs\\src\\System\\Security\\Cryptography\\Pkcs\\EnvelopedCms.cs:line 109\r\n   at System.Security.Cryptography.Pkcs.EnvelopedCms.Encrypt(CmsRecipient recipient) in D:\\j\\workspace\\windows-TGrou---74aa877a\\src\\System.Security.Cryptography.Pkcs\\src\\System\\Security\\Cryptography\\Pkcs\\EnvelopedCms.cs:line 92\r\n   at System.Security.Cryptography.Pkcs.EnvelopedCmsTests.Tests.KeyAgreeRecipientInfoTests.EncodeKeyAgreel(SubjectIdentifierType type) in D:\\j\\workspace\\windows-TGrou---74aa877a\\src\\System.Security.Cryptography.Pkcs\\tests\\EnvelopedCms\\KeyAgreeRecipientInfoTests.cs:line 361\r\n   at System.Security.Cryptography.Pkcs.EnvelopedCmsTests.Tests.KeyAgreeRecipientInfoTests.TestKeyAgreesRecipientIdType_RoundTrip() in D:\\j\\workspace\\windows-TGrou---74aa877a\\src\\System.Security.Cryptography.Pkcs\\tests\\EnvelopedCms\\KeyAgreeRecipientInfoTests.cs:line 66\r\n```\r\n\r\ncc @bartonjs "},{"Id":"7451583172","Type":"PullRequestEvent","CreatedAt":"2018-03-29T03:51:57","Actor":"dotnet-bot","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/28583","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#28583) at dotnet/corefx","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7451641286","Type":"IssuesEvent","CreatedAt":"2018-03-29T04:15:21","Actor":"sharwell","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/25806","RelatedDescription":"Opened issue \"Simplify DoEvents implementation and use for test state cleanup\" (#25806) at dotnet/roslyn","RelatedBody":"Related comments:\r\n\r\n* https://github.com/dotnet/roslyn/pull/25681#discussion_r177920378\r\n* https://github.com/dotnet/roslyn/pull/25681#discussion_r177921950\r\n\r\nThe `DispatcherExtensions.DoEvents` and `UseExportProviderAttribute.After` methods went through several iterations that eventually led to a state of \"reasonable reliability\" for test cleanup. Two issues proved complex here:\r\n\r\n1. The message pump required for executing tasks dispatched to the main thread, on which the synchronous `After` method is executing\r\n2. The execution efficiency of looping while waiting for a test timeout to expire, which can impact the total test execution time\r\n\r\nI am quite confident that the pair of methods can be simplified without any negative impact on usability/reliability, but am uncomfortable making ongoing large changes in the original review due to is size."}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7451139923","Type":"PullRequestEvent","CreatedAt":"2018-03-29T01:06:36","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5640","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5640) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7451127717","Type":"PullRequestEvent","CreatedAt":"2018-03-29T01:02:03","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5639","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5639) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7450827964","Type":"PullRequestEvent","CreatedAt":"2018-03-28T23:15:30","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5639","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5639) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7450721883","Type":"PullRequestEvent","CreatedAt":"2018-03-28T22:44:34","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5637","RelatedDescription":"Merged pull request \"Mirror changes from dotnet/coreclr\" (#5637) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7449829235","Type":"PullRequestEvent","CreatedAt":"2018-03-28T19:31:56","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5638","RelatedDescription":"Merged pull request \"Update dependencies\" (#5638) at dotnet/corert","RelatedBody":"Catches up to the breaking changes introduced around dotnet/corefx#27094."},{"Id":"7449573464","Type":"PullRequestEvent","CreatedAt":"2018-03-28T18:41:17","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5636","RelatedDescription":"Merged pull request \"Get rid of compiler warning in StaticLibrary test\" (#5636) at dotnet/corert","RelatedBody":"Gets rid of `LINK : warning LNK4098: defaultlib 'LIBCMTD' conflicts with use of other libs; use /NODEFAULTLIB:library [d:\\git\\rt\\tests\\src\\Simple\\StaticLibrary\\StaticLibrary.csproj]`."},{"Id":"7449448238","Type":"PullRequestEvent","CreatedAt":"2018-03-28T18:17:27","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5638","RelatedDescription":"Opened pull request \"Update dependencies\" (#5638) at dotnet/corert","RelatedBody":"Catches up to the breaking changes introduced around dotnet/corefx#27094."},{"Id":"7449423249","Type":"PullRequestEvent","CreatedAt":"2018-03-28T18:12:43","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5637","RelatedDescription":"Opened pull request \"Mirror changes from dotnet/coreclr\" (#5637) at dotnet/corert","RelatedBody":"This PR contains mirrored changes from dotnet/coreclr\n\n\n**Please REBASE this PR when merging**"},{"Id":"7449316043","Type":"PullRequestEvent","CreatedAt":"2018-03-28T17:52:15","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5636","RelatedDescription":"Opened pull request \"Get rid of compiler warning in StaticLibrary test\" (#5636) at dotnet/corert","RelatedBody":"Gets rid of `LINK : warning LNK4098: defaultlib 'LIBCMTD' conflicts with use of other libs; use /NODEFAULTLIB:library [d:\\git\\rt\\tests\\src\\Simple\\StaticLibrary\\StaticLibrary.csproj]`."},{"Id":"7448171859","Type":"PullRequestEvent","CreatedAt":"2018-03-28T14:35:45","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5634","RelatedDescription":"Merged pull request \"[Linux/ARM] Fix mapping symbols for compiled managed code\" (#5634) at dotnet/corert","RelatedBody":"ObjWriter emits compiled managed code as data (using MCStreamer::EmitBytes method). In this case on arm code is marked as data using special mapping symbol '$d' that leads to problems during debugging. For example gdb uses incorrect opcode for breakpoints that brokes program execution.\r\n\r\nIn this patch new method MCStreamer::EmitInstructionBytes is added. It uses '$a'/'$t' mapping symbols to mark data as arm/thumb code. This method is used to emit compiled managed code in ObjWriter."}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7450504403","Type":"PullRequestEvent","CreatedAt":"2018-03-28T21:48:29","Actor":"dsplaisted","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/2085","RelatedDescription":"Merged pull request \"Roll forward self-contained apps to latest patch version\" (#2085) at dotnet/sdk","RelatedBody":"- Bring back behavior where self-contained apps will roll-forward to the latest patch the SDK knows about\r\n  - We had reverted this in #1574\r\n  - Hopefully the implementation here should be a bit easier to follow\r\n- Add an error message when the version of .NET Core in the assets file is different than what was expected based on current settings: `The project was restored using Microsoft.NETCore.App version 2.0.0, but with current settings, version 2.0.6 would be used instead.  To resolve this issue, make sure the same settings are used for restore and for subsequent operations such as build or publish.  Typically this issue can occur if the RuntimeIdentifier property is set during build or publish but not during restore.`\r\n- Fix various test issues\r\n\r\nRelated: #1570\r\n\r\n@nguerrera @livarcocc @dotnet/dotnet-cli for review"},{"Id":"7450411354","Type":"PullRequestEvent","CreatedAt":"2018-03-28T21:27:43","Actor":"johnbeisner","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/sdk/pull/2094","RelatedDescription":"Merged pull request \"Merge release/2.1.3xx to master\" (#2094) at dotnet/sdk","RelatedBody":"\nThis is an automatically generated pull request from release/2.1.3xx into master.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.1.3xx-to-master\ngit reset --hard upstream/master\ngit merge upstream/release/2.1.3xx\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.1.3xx-to-master --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"977245582724022272","CreatedAt":"2018-03-23T18:07:57+00:00","UserScreenname":"dotnet","Text":"Calling all Desktop Developers: how should UI development be improved? https://t.co/lKHACsK0Sv","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":104,"FavoriteCount":74,"RawContent":null},{"Id":"976910301634465792","CreatedAt":"2018-03-22T19:55:40+00:00","UserScreenname":"dotnet","Text":"Get started building .NET web apps in the browser with Blazor https://t.co/OokEA8H4Mo","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":230,"FavoriteCount":178,"RawContent":null},{"Id":"976141100074373120","CreatedAt":"2018-03-20T16:59:08+00:00","UserScreenname":"dotnet","Text":"Check out this video from @csharpfritz and @jasonbock talking about @roslyn Analyzers and making your code easier t… https://t.co/Nv8pTxt0zP","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":18,"FavoriteCount":9,"RawContent":null}]}},"RunOn":"2018-03-29T05:30:20.5770664Z","RunDurationInMilliseconds":8435}