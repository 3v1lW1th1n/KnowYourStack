{"Data":{"Blog":{"FeedItems":[{"Title":"Xamarin and Azure Office Hours Recap from December 2018 and January 2019","PublishedOn":"2019-02-21T18:11:51+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"That&#8217;s right, I ❤️ every single one of you(!) and I want to know more about your stories building mobile apps. I want to hear stories of your successes and also, the not-so-successful...","Href":"https://blog.xamarin.com/xamarin-azure-office-hours-recap-december-january/","RawContent":null},{"Title":"Persisting Settings and Preferences in Mobile Apps with Xamarin.Essentials","PublishedOn":"2019-02-19T19:56:32+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"An essential part of any mobile application is the ability to persist data. Sometimes that is a large amount of data that requires a database, but often it is smaller pieces of data such as settings...","Href":"https://blog.xamarin.com/persisting-settings-preferences-mobile-apps-xamarin-essentials/","RawContent":null},{"Title":"Xamarin Developer Blog is Getting an Update!","PublishedOn":"2019-02-15T18:56:04+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Next week, the Xamarin Developer Blog will be migrating to a new platform with a modern, clean design and powerful features that will make it easy for you to discover and share great content. Starting...","Href":"https://blog.xamarin.com/xamarin-developer-blog-is-getting-an-update/","RawContent":null},{"Title":"Visual Studio Mobile Developer Podcast: Releases, Previews, and Roadmaps!","PublishedOn":"2019-02-13T19:56:28+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"The Visual Studio Mobile Developer Podcast features Matt Soucoup and James Montemagno discussing the latest and greatest in mobile and cloud development. In this episode, we discuss the best of...","Href":"https://blog.xamarin.com/podcast-releases-previews-roadmaps/","RawContent":null},{"Title":"Easily Check Mobile Device Connectivity with Xamarin.Essentials","PublishedOn":"2019-02-12T19:06:36+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"One of the best parts of a mobile device is their instant access to the internet. As a mobile app developer, it&#8217;s great to be able to pull data from the server to our apps to provide users with...","Href":"https://blog.xamarin.com/easily-check-mobile-device-connectivity-with-xamarin-essentials/","RawContent":null},{"Title":"5 Things You’ll Love in Xamarin.Forms 3.5","PublishedOn":"2019-02-06T17:22:16+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Although Valentine&#8217;s Day isn&#8217;t for a few more days, we just couldn&#8217;t wait to celebrate the love by sharing a new stable release of Xamarin.Forms &#8211; 3.5. Your engagement and...","Href":"https://blog.xamarin.com/5-things-youll-love-xamarin-forms-3-5/","RawContent":null},{"Title":"Using Existing C++ Libraries in Cross-Platform Xamarin.Forms Applications","PublishedOn":"2019-02-04T18:52:08+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"There are many libraries developed using C or C++ which can be brought to bear when creating Xamarin-based mobile apps such as those leveraged by Microsoft’s Hyperlapse Mobile and Pix Camera in order...","Href":"https://blog.xamarin.com/using-c-libraries-xamarin-forms-apps/","RawContent":null},{"Title":"Mobile & .NET Developer Community Events in February","PublishedOn":"2019-02-01T17:31:08+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Fall in love with building your next mobile application by networking with local user groups to learn about new and exciting releases, tooling, or updates with Xamarin and .NET related technologies!...","Href":"https://blog.xamarin.com/mobile-net-developer-community-events-in-february/","RawContent":null},{"Title":"Complex UI with FastGrid for Xamarin.Forms","PublishedOn":"2019-01-30T17:56:02+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"This guest post was contributed by Slava Chernikoff (Principal Engineer at Binwell,  Microsoft MVP, Xamarin Certified Mobile Developer), Artem Tischenko (Xamarin developer at Binwell) and Kirill...","Href":"https://blog.xamarin.com/complex-ui-with-fastgrid-for-xamarin-forms/","RawContent":null},{"Title":"Android’s D8 dexer and R8 shrinker","PublishedOn":"2019-01-28T18:10:03+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"There is quite a bit of complexity to packaging an Android application. Xamarin.Android has to run through the same build pipeline as Android apps built in Android Studio&#8211;with the addition of...","Href":"https://blog.xamarin.com/androids-d8-dexer-and-r8-shrinker/","RawContent":null}],"ResultType":"Feed"},"Android":{"Events":[{"Id":"9121083634","Type":"PullRequestEvent","CreatedAt":"2019-02-22T22:00:03","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2761","RelatedDescription":"Merged pull request \"[r8] bump to 1.3.52\" (#2761) at xamarin/xamarin-android","RelatedBody":"Context: https://mvnrepository.com/artifact/com.android.tools/r8/1.3.52\r\nContext: https://r8.googlesource.com/r8/+/refs/tags/1.3.52/build.gradle#52\r\n\r\nUpdate r8 to the latest stable release on Maven.\r\n\r\nThere is also now some dependencies on packages at:\r\n\r\n    https://kotlin.bintray.com/kotlinx\r\n\r\nI updated the `repositories` defined in `build.gradle` to match what r8's source code has."},{"Id":"9121077975","Type":"PullRequestEvent","CreatedAt":"2019-02-22T21:58:53","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2762","RelatedDescription":"Merged pull request \"Update CODEOWNERS\" (#2762) at xamarin/xamarin-android","RelatedBody":"* Added myself for `/src/r8`\r\n* Added @garuma for the new designer MSBuild targets file"},{"Id":"9119951763","Type":"PullRequestEvent","CreatedAt":"2019-02-22T18:32:50","Actor":"jonpryor","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2759","RelatedDescription":"Merged pull request \"Don't strip some Windows DLLs\" (#2759) at xamarin/xamarin-android","RelatedBody":"32-bit Windows DLLs cannot be stripped (`strip` from mxe fails when attempting\r\nto do that). This commit adds a metadata item to the `_MonoRuntime` items which\r\ntells the build whether it's ok to strip the DLL for particular instance of\r\nthe runtime build."},{"Id":"9119107494","Type":"PullRequestEvent","CreatedAt":"2019-02-22T16:14:57","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2762","RelatedDescription":"Opened pull request \"Update CODEOWNERS\" (#2762) at xamarin/xamarin-android","RelatedBody":"* Added myself for `/src/r8`\r\n* Added @garuma for the new designer MSBuild targets file"},{"Id":"9118465345","Type":"PullRequestEvent","CreatedAt":"2019-02-22T14:43:42","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2761","RelatedDescription":"Opened pull request \"[r8] bump to 1.3.52\" (#2761) at xamarin/xamarin-android","RelatedBody":"Context: https://mvnrepository.com/artifact/com.android.tools/r8/1.3.52\r\nContext: https://r8.googlesource.com/r8/+/refs/tags/1.3.52/build.gradle#52\r\n\r\nUpdate r8 to the latest stable release on Maven.\r\n\r\nThere is also now some dependencies on packages at:\r\n\r\n    https://kotlin.bintray.com/kotlinx\r\n\r\nI updated the `repositories` defined in `build.gradle` to match what r8's source code has."},{"Id":"9115484198","Type":"PullRequestEvent","CreatedAt":"2019-02-22T05:14:11","Actor":"jonathanpeppers","Repository":"xamarin/xamarin-android","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-android/pull/2760","RelatedDescription":"Opened pull request \"[Xamarin.Android.Build.Tasks] support F# 4.5 Windows path\" (#2760) at xamarin/xamarin-android","RelatedBody":"Context: https://devblogs.microsoft.com/dotnet/announcing-f-4-5/\r\n\r\nSince VS 15.8 on Windows, F# 4.5 is now installed along with Visual\r\nStudio to support side-by-side installations. Previously F# was\r\ninstalled in a system-wide location specified by `%FSHARPINSTALLDIR%`:\r\n\r\n    C:\\Program Files (x86)\\Microsoft SDKs\\F#\\10.1\\Framework\\v4.0\\\r\n\r\nThe new locations are, for example:\r\n\r\n    C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\Common7\\IDE\\CommonExtensions\\Microsoft\\FSharp\r\n    C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Preview\\Common7\\IDE\\CommonExtensions\\Microsoft\\FSharp\r\n\r\nI have also seen a few instances where our F#-related MSBuild tests\r\nfailed on Windows, failing to import `Microsoft.FSharp.targets`:\r\n\r\n    bin\\TestRelease\\temp\\BuildBasicApplicationFSharp\\UnnamedProject.fsproj error MSB4057:\r\n        The target \"Build\" does not exist in the project.\r\n\r\nIn this case, *all* of our probing for `Microsoft.FSharp.targets`\r\nfailed:\r\n\r\n    NoImport: $(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v$(VisualStudioVersion)\\FSharp\\Microsoft.FSharp.Targets at (44;5) Not imported due to false condition; ('$(Language)' != 'F#' And Exists('$(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v$(VisualStudioVersion)\\FSharp\\Microsoft.FSharp.Targets')) was evaluated as ('' != 'F#' And Exists('E:\\A\\_work\\382\\s\\bin\\Release\\lib\\xamarin.android\\xbuild\\Microsoft\\VisualStudio\\v15.0\\FSharp\\Microsoft.FSharp.Targets')).\r\n    NoImport: $(FSharpInstallDir)Microsoft.FSharp.Targets at (47;5) Not imported due to false condition; ('$(Language)' != 'F#' And Exists('$(FSharpInstallDir)Microsoft.FSharp.Targets')) was evaluated as ('' != 'F#' And Exists('Microsoft.FSharp.Targets')).\r\n    NoImport: $(MSBuildExtensionsPath32)\\..\\Microsoft SDKs\\F#\\4.1\\Framework\\v4.0\\Microsoft.FSharp.Targets at (50;5) Not imported due to false condition; ('$(Language)' != 'F#' And Exists('$(MSBuildExtensionsPath32)\\..\\Microsoft SDKs\\F#\\4.1\\Framework\\v4.0\\Microsoft.FSharp.Targets')) was evaluated as ('' != 'F#' And Exists('E:\\A\\_work\\382\\s\\bin\\Release\\lib\\xamarin.android\\xbuild\\..\\Microsoft SDKs\\F#\\4.1\\Framework\\v4.0\\Microsoft.FSharp.Targets')).\r\n    NoImport: $(MSBuildExtensionsPath32)\\..\\Microsoft SDKs\\F#\\4.0\\Framework\\v4.0\\Microsoft.FSharp.Targets at (53;5) Not imported due to false condition; ('$(Language)' != 'F#' And Exists('$(MSBuildExtensionsPath32)\\..\\Microsoft SDKs\\F#\\4.0\\Framework\\v4.0\\Microsoft.FSharp.Targets')) was evaluated as ('' != 'F#' And Exists('E:\\A\\_work\\382\\s\\bin\\Release\\lib\\xamarin.android\\xbuild\\..\\Microsoft SDKs\\F#\\4.0\\Framework\\v4.0\\Microsoft.FSharp.Targets')).\r\n    NoImport: $(MSBuildExtensionsPath32)\\..\\Microsoft SDKs\\F#\\3.1\\Framework\\v4.0\\Microsoft.FSharp.Targets at (56;5) Not imported due to false condition; ('$(Language)' != 'F#' And Exists('$(MSBuildExtensionsPath32)\\..\\Microsoft SDKs\\F#\\3.1\\Framework\\v4.0\\Microsoft.FSharp.Targets')) was evaluated as ('' != 'F#' And Exists('E:\\A\\_work\\382\\s\\bin\\Release\\lib\\xamarin.android\\xbuild\\..\\Microsoft SDKs\\F#\\3.1\\Framework\\v4.0\\Microsoft.FSharp.Targets')).\r\n\r\nSo the fix here is to add an extra `<Import/>` for:\r\n\r\n    $(MSBuildToolsPath32)\\..\\..\\..\\Common7\\IDE\\CommonExtensions\\Microsoft\\FSharp\\Microsoft.FSharp.Targets\r\n\r\nI found this path when digging through binlogs, which is how NuGet's\r\nMSBuild targets are imported:\r\n\r\n    <PropertyGroup>\r\n      <NuGetRestoreTargets Condition=\"'$(NuGetRestoreTargets)'==''\">$(MSBuildToolsPath32)\\..\\..\\..\\Common7\\IDE\\CommonExtensions\\Microsoft\\NuGet\\NuGet.targets</NuGetRestoreTargets>\r\n      ...\r\n      </PropertyGroup>\r\n    <Import Condition=\"Exists('$(NuGetRestoreTargets)')\" Project=\"$(NuGetRestoreTargets)\" />\r\n\r\nCurrently, I think you would have to modify `%FSHARPINSTALLDIR%` to\r\nuse F# 4.5 with Xamarin.Android on Windows."}],"ResultType":"GitHubEvent"},"Forms":{"Events":[{"Id":"9122071479","Type":"PullRequestEvent","CreatedAt":"2019-02-23T03:57:03","Actor":"PureWeen","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/5356","RelatedDescription":"Opened pull request \"[Visual, WiP] Visual tidy\" (#5356) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\nTidy up Material Renderers and remove flag\r\n\r\n### API Changes ###\r\n- will update with exposed apis once done tidying\r\n\r\n### Platforms Affected ### \r\n<!-- Please list all platforms affected by these changes -->\r\n\r\n- Core/XAML (all platforms)\r\n- iOS\r\n- Android\r\n- UWP\r\n\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [ ] Rebased on top of the target branch at time of PR\r\n- [ ] Changes adhere to coding standard\r\n"},{"Id":"9121947160","Type":"IssuesEvent","CreatedAt":"2019-02-23T02:45:41","Actor":"dirivero","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/5355","RelatedDescription":"Opened issue \"[iOS] TextColor on Span's Implicit Style affects SearchBar PlaceholderColor\" (#5355) at xamarin/Xamarin.Forms","RelatedBody":"### Description\r\n\r\nSetting the Spans TextColor from an implicit style in the App.xaml makes all SearchBars have that color in their Placeholder.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Put this in the App.xaml\r\n```\r\n<Style TargetType=\"Span\">\r\n    <Setter Property=\"TextColor\" Value=\"Red\" />\r\n</Style>\r\n```\r\n\r\n2. Put this in the main page:\r\n\r\n```\r\n<SearchBar Placeholder=\"Search...\" PlaceholderColor=\"Green\" />\r\n```\r\n\r\n### Expected Behavior\r\n\r\nGreen placeholder.\r\n\r\n### Actual Behavior\r\n\r\nRed placeholder.\r\n\r\n### Basic Information\r\n\r\n- Version with issue: happens since TextColor in Span was introduced in XF 3.1\r\n- Last known good version: N/A\r\n- Platform Target Frameworks:\r\n  - iOS:  12.1\r\n  - Android: N/A\r\n  - UWP:  N/A\r\n\r\n### Screenshots\r\n\r\n<img width=\"294\" alt=\"screen shot 2019-02-22 at 11 30 32 pm\" src=\"https://user-images.githubusercontent.com/7670773/53280658-6d4d8980-36fb-11e9-804a-bbb512932fbe.png\">\r\n\r\n### Reproduction Link\r\n\r\nhttps://drive.google.com/open?id=1U9uVOpJ7HalQJZK_I6ZH0Xck5yC9kHsw\r\n"},{"Id":"9121892135","Type":"IssuesEvent","CreatedAt":"2019-02-23T02:15:30","Actor":"pauldipietro","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/5354","RelatedDescription":"Opened issue \"[CollectionView] Updating the ItemsLayout type should refresh the layout\" (#5354) at xamarin/Xamarin.Forms","RelatedBody":"More a work task than a bug due to the ongoing development of `CollectionView` (but we'll just categorize it as a bug for now), it should update its layout when switching the `ItemsLayout` types from a `ListItemsLayout` to `GridItemsLayout`. A good example of where this would be used is in a UI where the user is allowed to toggle between those layouts, such as in a retail app. \r\n\r\nThis is supposedly semi-functional on iOS but wasn't personally tried. Android doesn't update the layout.\r\n\r\n### Steps to Reproduce\r\n\r\n1. Use a CollectionView with one of the two layout types\r\n2. Switch to the other layout type in app (such as via a button tap)\r\n\r\n### Expected Behavior\r\nThe CollectionView updates its layout to the new type.\r\n\r\n### Actual Behavior\r\nThe CollectionView does not update its layout until leaving and reentering the page (such as with tabs).\r\n"},{"Id":"9121872849","Type":"PullRequestEvent","CreatedAt":"2019-02-23T02:05:43","Actor":"hartez","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/5353","RelatedDescription":"Opened pull request \"[iOS] Properly handle EmptyView updates\" (#5353) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nOn iOS, updating the EmptyView while it is visible can cause a crash. And swapping between two EmptyViews at runtime can cause one of the views to remain visible even when there are items in the CollectionView.\r\n\r\nThese changes address both problems and add a test page for updating EmptyView properties while the EmptyView is visible.\r\n\r\n### Issues Resolved ### \r\n\r\nNone\r\n\r\n### API Changes ###\r\n \r\n None\r\n\r\n### Platforms Affected ### \r\n\r\n- iOS\r\n\r\n### Behavioral/Visual Changes ###\r\n\r\nNone\r\n\r\n### Before/After Screenshots ### \r\n\r\nNot applicable\r\n\r\n### Testing Procedure ###\r\n\r\nOpen Control Gallery, navigate to CollectionView Gallery -> EmptyView Galleries -> EmptyView (Swap EmptyView). \r\n\r\nSearching for a non-matching term should display the EmptyView; toggling the switch will change the EmptyView property. Switching the EmptyView property should not crash and should display the alternate EmptyView as expected.\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has automated tests \r\n- [x] Rebased on top of the target branch at time of PR\r\n- [x] Changes adhere to coding standard\r\n"},{"Id":"9121795400","Type":"IssuesEvent","CreatedAt":"2019-02-23T01:29:33","Actor":"samhouts","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/issues/4749","RelatedDescription":"Closed issue \"Unhandled Exception:  System.InvalidOperationException\" (#4749) at xamarin/Xamarin.Forms","RelatedBody":"<!-- Bug report best practices: https://github.com/xamarin/Xamarin.Forms/wiki/Submitting-Issues -->\r\n\r\n### Description\r\n\r\nDuring some animation; suchase fadeto, translateto etc my app crashed with this follow exception:\r\n\r\nUnhandled Exception:\r\n\r\nSystem.InvalidOperationException: Collection was modified; enumeration operation may not execute.\r\n\r\n12-15 15:56:47.113 I/MonoDroid(13943): UNHANDLED EXCEPTION:\r\n12-15 15:56:47.122 I/MonoDroid(13943): System.InvalidOperationException: Collection was modified; enumeration operation may not execute.\r\n12-15 15:56:47.122 I/MonoDroid(13943):   at (wrapper dynamic-method) System.Object.45(intptr,intptr,bool,int,int,int,int)\r\n12-15 15:56:47.122 I/MonoDroid(13943):   at (wrapper native-to-managed) System.Object.45(intptr,intptr,int,int,int,int,int)\r\n12-15 15:56:47.122 I/MonoDroid(13943):   at (wrapper managed-to-native) Java.Interop.NativeMethods.java_interop_jnienv_call_nonvirtual_void_method_a(intptr,intptr&,intptr,intptr,intptr,Java.Interop.JniArgumentValue*)\r\n12-15 15:56:47.122 I/MonoDroid(13943):   at Java.Interop.JniEnvironment+InstanceMethods.CallNonvirtualVoidMethod (Java.Interop.JniObjectReference instance, Java.Interop.JniObjectReference type, Java.Interop.JniMethodInfo method, Java.Interop.JniArgumentValue* args) [0x00073] in <42dc777b518744fdae9988e94489a4a0>:0 \r\n12-15 15:56:47.122 I/MonoDroid(13943):   at Java.Interop.JniPeerMembers+JniInstanceMethods.InvokeVirtualVoidMethod (System.String encodedMember, Java.Interop.IJavaPeerable self, Java.Interop.JniArgumentValue* parameters) [0x0005d] in <42dc777b518744fdae9988e94489a4a0>:0 \r\n12-15 15:56:47.122 I/MonoDroid(13943):   at Xamarin.Forms.Platform.Android.FormsViewGroup.MeasureAndLayout (System.Int32 p0, System.Int32 p1, System.Int32 p2, System.Int32 p3, System.Int32 p4, System.Int32 p5) [0x00086] in D:\\a\\1\\s\\Xamarin.Forms.Platform.Android.FormsViewGroup\\obj\\Release\\generated\\src\\Xamarin.Forms.Platform.Android.FormsViewGroup.cs:181 \r\n12-15 15:56:47.122 I/MonoDroid(13943):   at Xamarin.Forms.Platform.Android.VisualElementTracker.UpdateLayout () [0x00149] in D:\\a\\1\\s\\Xamarin.Forms.Platform.Android\\VisualElementTracker.cs:102 \r\n12-15 15:56:47.122 I/MonoDroid(13943):   at Xamarin.Forms.Platform.Android.VisualElementRenderer`1[TElement].UpdateLayout () [0x00012] in D:\\a\\1\\s\\Xamarin.Forms.Platform.Android\\VisualElementRenderer.cs:133 \r\n12-15 15:56:47.123 I/MonoDroid(13943):   at Xamarin.Forms.Platform.Android.VisualElementRenderer`1[TElement].UpdateLayout (System.Collections.Generic.IEnumerable`1[T] children) [0x00034] in D:\\a\\1\\s\\Xamarin.Forms.Platform.Android\\VisualElementRenderer.cs:350 \r\n12-15 15:56:47.123 I/MonoDroid(13943):   at Xamarin.Forms.Platform.Android.VisualElementRenderer`1[TElement].OnLayout (System.Boolean changed, System.Int32 l, System.Int32 t, System.Int32 r, System.Int32 b) [0x0000e] in D:\\a\\1\\s\\Xamarin.Forms.Platform.Android\\VisualElementRenderer.cs:336 \r\n12-15 15:56:47.123 I/MonoDroid(13943):   at Xamarin.Forms.Platform.Android.FormsViewGroup.n_OnLayout_ZIIII (System.IntPtr jnienv, System.IntPtr native__this, System.Boolean p0, System.Int32 p1, System.Int32 p2, System.Int32 p3, System.Int32 p4) [0x00008] in D:\\a\\1\\s\\Xamarin.Forms.Platform.Android.FormsViewGroup\\obj\\Release\\generated\\src\\Xamarin.Forms.Platform.Android.FormsViewGroup.cs:198 \r\n12-15 15:56:47.123 I/MonoDroid(13943):   at (wrapper dynamic-method) System.Object.45(intptr,intptr,bool,int,int,int,int)\r\n12-15 15:56:47.287 W/google-breakpad(13943): ### ### ### ### ### ### ### ### ### ### ### ### ###\r\n12-15 15:56:47.287 W/google-breakpad(13943): Chrome build fingerprint:\r\n12-15 15:56:47.287 W/google-breakpad(13943): 71.0.3578.98\r\n12-15 15:56:47.287 W/google-breakpad(13943): 357809852\r\n12-15 15:56:47.287 W/google-breakpad(13943): ### ### ### ### ### ### ### ### ### ### ### ### ###\r\n12-15 15:56:47.287 E/mono-rt (13943): Stacktrace:\r\n12-15 15:56:47.287 E/mono-rt (13943): \r\n12-15 15:56:47.288 E/mono-rt (13943):   at <unknown> <0xffffffff>\r\n12-15 15:56:47.288 E/mono-rt (13943):   at (wrapper managed-to-native) Java.Interop.NativeMethods.java_interop_jnienv_new_string (intptr,intptr&,char*,int) <0x00007>\r\n12-15 15:56:47.288 E/mono-rt (13943):   at Java.Interop.JniEnvironment/Strings.NewString (char*,int) [0x00009] in <42dc777b518744fdae9988e94489a4a0>:0\r\n12-15 15:56:47.288 E/mono-rt (13943):   at Java.Interop.JniEnvironment/Strings.NewString (string) [0x00024] in <42dc777b518744fdae9988e94489a4a0>:0\r\n12-15 15:56:47.288 E/mono-rt (13943):   at Android.Runtime.JNIEnv.NewString (string) [0x0000a] in <1219ce5aae934ab095dc0e05b2110050>:0\r\n12-15 15:56:47.288 E/mono-rt (13943):   at Java.Lang.Error..ctor (string) [0x00020] in <1219ce5aae934ab095dc0e05b2110050>:0\r\n12-15 15:56:47.288 E/mono-rt (13943):   at Android.Runtime.JavaProxyThrowable..ctor (System.Exception) [0x00007] in <1219ce5aae934ab095dc0e05b2110050>:0\r\n12-15 15:56:47.288 E/mono-rt (13943):   at Java.Lang.Throwable.FromException (System.Exception) [0x0001e] in <1219ce5aae934ab095dc0e05b2110050>:0\r\n12-15 15:56:47.288 E/mono-rt (13943):   at Android.Runtime.AndroidEnvironment.UnhandledException (System.Exception) [0x0006a] in <1219ce5aae934ab095dc0e05b2110050>:0\r\n12-15 15:56:47.288 E/mono-rt (13943):   at (wrapper dynamic-method) object.45 (intptr,intptr,bool,int,int,int,int) [0x00047] in <d4a23bbd2f544c30a48c44dd622ce09f>:0\r\n12-15 15:56:47.288 E/mono-rt (13943):   at (wrapper native-to-managed) object.45 (intptr,intptr,int,int,int,int,int) [0x00033] in <d4a23bbd2f544c30a48c44dd622ce09f>:0\r\n12-15 15:56:47.289 E/mono-rt (13943):   at <unknown> <0xffffffff>\r\n12-15 15:56:47.289 E/mono-rt (13943):   at (wrapper managed-to-native) Java.Interop.NativeMethods.java_interop_jnienv_call_nonvirtual_void_method_a (intptr,intptr&,intptr,intptr,intptr,Java.Interop.JniArgumentValue*) <0x00007>\r\n12-15 15:56:47.289 E/mono-rt (13943):   at Java.Interop.JniEnvironment/InstanceMethods.CallNonvirtualVoidMethod (Java.Interop.JniObjectReference,Java.Interop.JniObjectReference,Java.Interop.JniMethodInfo,Java.Interop.JniArgumentValue*) [0x00074] in <42dc777b518744fdae9988e94489a4a0>:0\r\n12-15 15:56:47.289 E/mono-rt (13943):   at Java.Interop.JniPeerMembers/JniInstanceMethods.InvokeVirtualVoidMethod (string,Java.Interop.IJavaPeerable,Java.Interop.JniArgumentValue*) [0x0005f] in <42dc777b518744fdae9988e94489a4a0>:0\r\n12-15 15:56:47.289 E/mono-rt (13943):   at Xamarin.Forms.Platform.Android.FormsViewGroup.MeasureAndLayout (int,int,int,int,int,int) [0x00086] in D:\\a\\1\\s\\Xamarin.Forms.Platform.Android.FormsViewGroup\\obj\\Release\\generated\\src\\Xamarin.Forms.Platform.Android.FormsViewGroup.cs:181\r\n12-15 15:56:47.289 E/mono-rt (13943):   at Xamarin.Forms.Platform.Android.VisualElementTracker.UpdateLayout () [0x00149] in D:\\a\\1\\s\\Xamarin.Forms.Platform.Android\\VisualElementTracker.cs:102\r\n12-15 15:56:47.289 E/mono-rt (13943):   at Xamarin.Forms.Platform.Android.VisualElementRenderer`1<TElement_REF>.UpdateLayout () [0x00012] in D:\\a\\1\\s\\Xamarin.Forms.Platform.Android\\VisualElementRenderer.cs:133\r\n12-15 15:56:47.289 E/mono-rt (13943):   at Xamarin.Forms.Platform.Android.VisualElementRenderer`1<TElement_REF>.UpdateLayout (System.Collections.Generic.IEnumerable`1<Xamarin.Forms.Element>) [0x00034] in D:\\a\\1\\s\\Xamarin.Forms.Platform.Android\\VisualElementRenderer.cs:350\r\n12-15 15:56:47.289 E/mono-rt (13943):   at Xamarin.Forms.Platform.Android.VisualElementRenderer`1<TElement_REF>.OnLayout (bool,int,int,int,int) [0x0000e] in D:\\a\\1\\s\\Xamarin.Forms.Platform.Android\\VisualElementRenderer.cs:336\r\n12-15 15:56:47.289 E/mono-rt (13943):   at Xamarin.Forms.Platform.Android.AppCompat.NavigationPageRenderer.OnLayout (bool,int,int,int,int) [0x0000d] in D:\\a\\1\\s\\Xamarin.Forms.Platform.Android\\AppCompat\\NavigationPageRenderer.cs:365\r\n12-15 15:56:47.289 E/mono-rt (13943):   at Xamarin.Forms.Platform.Android.FormsViewGroup.n_OnLayout_ZIIII (intptr,intptr,bool,int,int,int,int) [0x00008] in D:\\a\\1\\s\\Xamarin.Forms.Platform.Android.FormsViewGroup\\obj\\Release\\generated\\src\\Xamarin.Forms.Platform.Android.FormsViewGroup.cs:198\r\n12-15 15:56:47.289 E/mono-rt (13943):   at (wrapper dynamic-method) object.45 (intptr,intptr,bool,int,int,int,int) [0x0002f] in <d4a23bbd2f544c30a48c44dd622ce09f>:0\r\n12-15 15:56:47.289 E/mono-rt (13943):   at (wrapper native-to-managed) object.45 (intptr,intptr,int,int,int,int,int) [0x00033] in <d4a23bbd2f544c30a48c44dd622ce09f>:0\r\n12-15 15:56:47.289 E/mono-rt (13943):   at <unknown> <0xffffffff>\r\n12-15 15:56:47.290 E/mono-rt (13943):   at (wrapper managed-to-native) Java.Interop.NativeMethods.java_interop_jnienv_call_nonvirtual_void_method_a (intptr,intptr&,intptr,intptr,intptr,Java.Interop.JniArgumentValue*) <0x00007>\r\n12-15 15:56:47.290 E/mono-rt (13943):   at Java.Interop.JniEnvironment/InstanceMethods.CallNonvirtualVoidMethod (Java.Interop.JniObjectReference,Java.Interop.JniObjectReference,Java.Interop.JniMethodInfo,Java.Interop.JniArgumentValue*) [0x00074] in <42dc777b518744fdae9988e94489a4a0>:0\r\n12-15 15:56:47.290 E/mono-rt (13943):   at Java.Interop.JniPeerMembers/JniInstanceMethods.InvokeVirtualVoidMethod (string,Java.Interop.IJavaPeerable,Java.Interop.JniArgumentValue*) [0x0005f] in <42dc777b518744fdae9988e94489a4a0>:0\r\n12-15 15:56:47.290 E/mono-rt (13943):   at Xamarin.Forms.Platform.Android.FormsViewGroup.MeasureAndLayout (int,int,int,int,int,int) [0x00086] in D:\\a\\1\\s\\Xamarin.Forms.Platform.Android.FormsViewGroup\\obj\\Release\\generated\\src\\Xamarin.Forms.Platform.Android.FormsViewGroup.cs:181\r\n12-15 15:56:47.290 E/mono-rt (13943):   at Xamarin.Forms.Platform.Android.VisualElementTracker.UpdateLayout () [0x00149] in D:\\a\\1\\s\\Xamarin.Forms.Platform.Android\\VisualElementTracker.cs:102\r\n12-15 15:56:47.290 E/mono-rt (13943):   at Xamarin.Forms.Platform.Android.VisualElementRenderer`1<TElement_REF>.UpdateLayout () [0x00012] in D:\\a\\1\\s\\Xamarin.Forms.Platform.Android\\VisualElementRenderer.cs:133\r\n12-15 15:56:47.290 E/mono-rt (13943):   at Xamarin.Forms.Platform.Android.AppCompat.Platform.Xamarin.Forms.Platform.Android.IPlatformLayout.OnLayout (bool,int,int,int,int) [0x00020] in D:\\a\\1\\s\\Xamarin.Forms.Platform.Android\\AppCompat\\Platform.cs:218\r\n12-15 15:56:47.290 E/mono-rt (13943):   at Xamarin.Forms.Platform.Android.PlatformRenderer.OnLayout (bool,int,int,int,int) [0x0000e] in D:\\a\\1\\s\\Xamarin.Forms.Platform.Android\\PlatformRenderer.cs:73\r\n12-15 15:56:47.290 E/mono-rt (13943):   at Android.Views.ViewGroup.n_OnLayout_ZIIII (intptr,intptr,bool,int,int,int,int) [0x00012] in <1219ce5aae934ab095dc0e05b2110050>:0\r\n12-15 15:56:47.290 E/mono-rt (13943):   at (wrapper dynamic-method) object.40 (intptr,intptr,bool,int,int,int,int) [0x0002f] in <d4a23bbd2f544c30a48c44dd622ce09f>:0\r\n12-15 15:56:47.290 E/mono-rt (13943):   at (wrapper native-to-managed) object.40 (intptr,intptr,int,int,int,int,int) [0x00033] in <d4a23bbd2f544c30a48c44dd622ce09f>:0\r\n\r\n### Steps to Reproduce\r\n\r\nCan't reproduce case\r\n\r\n### Expected Behavior\r\n\r\n### Actual Behavior\r\n\r\n### Basic Information\r\n\r\n- Version with issue: latest Xamarin.Forms stable version\r\n- Last known good version:\r\n- IDE: Visa Studio 2017 15.9.4\r\n- Platform Target Frameworks:\r\n  - Android: Android SDK version 8.0\r\n- Android Support Library Version: ?\r\n- Nuget Packages:\r\n- Affected Devices: Xiaiomi Mi6\r\n\r\n### Screenshots\r\n\r\nNo screenshoots\r\n\r\n### Reproduction Link\r\n\r\nNo link\r\n"},{"Id":"9121312589","Type":"PullRequestEvent","CreatedAt":"2019-02-22T22:50:37","Actor":"hartez","Repository":"xamarin/Xamarin.Forms","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/Xamarin.Forms/pull/5352","RelatedDescription":"Opened pull request \"Handle CollectionView multiple selection on Android and iOS\" (#5352) at xamarin/Xamarin.Forms","RelatedBody":"### Description of Change ###\r\n\r\nAdd support for SelectionMode.Multiple on the CollectionView for Android/iOS.\r\n\r\n### Issues Resolved ### \r\n\r\n- partially implements #3172\r\n\r\n### API Changes ###\r\n\r\nAdded:\r\n- SelectableItemsView.SelectedItemsProperty \r\n- IList<object> SelectableItemsView.SelectedItems\r\n\r\n ### Platforms Affected ### \r\n\r\n- Core/XAML (all platforms)\r\n- iOS\r\n- Android\r\n\r\n\r\n### Behavioral/Visual Changes ###\r\n\r\nNone\r\n\r\n### Before/After Screenshots ### \r\n\r\nNot applicable\r\n\r\n### Testing Procedure ###\r\n\r\nIn Control Gallery, navigate to CollectionView Gallery -> Selection Galleries\r\n\r\n### PR Checklist ###\r\n\r\n- [ ] Has automated tests <!-- (if tests are omitted or manual, state reason in description) -->\r\n- [x] Rebased on top of the target branch at time of PR\r\n- [x] Changes adhere to coding standard\r\n"}],"ResultType":"GitHubEvent"},"Macios":{"Events":[{"Id":"9121252850","Type":"PullRequestEvent","CreatedAt":"2019-02-22T22:36:17","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5663","RelatedDescription":"Opened pull request \"[api-diff] Remove apidiff XML reference files. Fixes #4891\" (#5663) at xamarin/xamarin-macios","RelatedBody":"Instead download the assemblies (part of existing bundle.zip) of the\ncurrent release and generate the XML locally (no storage in github)\nbefore doing the diff against the newer, just built, assemblies.\n\nreference: https://github.com/xamarin/xamarin-macios/issues/4891"},{"Id":"9120331293","Type":"PullRequestEvent","CreatedAt":"2019-02-22T19:38:41","Actor":"rolfbjarne","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5662","RelatedDescription":"Opened pull request \"[siminstaller] Improve failure scenarios.\" (#5662) at xamarin/xamarin-macios","RelatedBody":"* Improve the behavior when we fail to download the .dvtdownloadableindex file\n  to report a \"Not Found\" if we get a \"Forbidden\" (403) response, since that's\n  what it really is.\n* Improve the behavior when we fail to download the .dvtdownloadableindex file\n  to check if the requested simulators are already installed instead of always\n  failing. This makes it possible to manually install the required simulators\n  if needed (Apple might not have published simulators for the Xcode version\n  we're using), and this would allow any checks to pass if the required\n  simulators are already installed.\n* Improve the code to modify the PackageInfo XML to not use simple string\n  replacement (it's too fragile), use proper XML parsing instead.\n* Fix \"time left\" math, I have no idea what my previous math was doing."},{"Id":"9120191069","Type":"PullRequestEvent","CreatedAt":"2019-02-22T19:14:29","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5660","RelatedDescription":"Closed pull request \"[objcruntime] watchOS build needs to be aware of IsARM64CallingConvention for arm64_32\" (#5660) at xamarin/xamarin-macios","RelatedBody":""},{"Id":"9120183743","Type":"PullRequestEvent","CreatedAt":"2019-02-22T19:13:15","Actor":"spouliot","Repository":"xamarin/xamarin-macios","Organization":"xamarin","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/xamarin/xamarin-macios/pull/5659","RelatedDescription":"Closed pull request \"[coregraphics] watchOS build needs to be aware of IsARM64CallingConvention for arm64_32\" (#5659) at xamarin/xamarin-macios","RelatedBody":""}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"1098996242238111745","CreatedAt":"2019-02-22T17:21:37+00:00","UserScreenname":"xamarinhq","Text":"This week on the #XamarinShow, @DavidOrtinau gives us all the reasons and features to &lt;3 in Xamarin.Forms 3.5. This… https://t.co/pVcHVX6LYJ","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":35,"FavoriteCount":15,"RawContent":null},{"Id":"1097993381496700935","CreatedAt":"2019-02-19T22:56:36+00:00","UserScreenname":"xamarinhq","Text":"With only a few lines of code, today's #Xamarin.Essentials API of the week helps you persist settings and preferenc… https://t.co/izkl5pGL6m","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":48,"FavoriteCount":20,"RawContent":null},{"Id":"1097939132532310018","CreatedAt":"2019-02-19T19:21:02+00:00","UserScreenname":"xamarinhq","Text":"On this week's #XamarinShow Essential API of the week, we take a look at Secure Storage, which enables you to easil… https://t.co/OwQSZ1QRlI","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":44,"FavoriteCount":25,"RawContent":null},{"Id":"1097603017375993857","CreatedAt":"2019-02-18T21:05:26+00:00","UserScreenname":"xamarinhq","Text":"Xamarin.Forms 101: Command Parameters: https://t.co/rwzzq9yQib\n\n.@JamesMontemagno takes us through a new mini-serie… https://t.co/ZFInvKFhSL","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":108,"FavoriteCount":47,"RawContent":null},{"Id":"1096561048562384898","CreatedAt":"2019-02-16T00:05:01+00:00","UserScreenname":"xamarinhq","Text":"The #Xamarin Developer Blog is migrating to a new platform with a modern, clean design and powerful features that m… https://t.co/nJUxXItfe8","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":98,"FavoriteCount":35,"RawContent":null},{"Id":"1095804816121581570","CreatedAt":"2019-02-13T22:00:01+00:00","UserScreenname":"xamarinhq","Text":"The #VisualStudio Mobile Dev Podcast is out. In this episode, @CodeMillMatt &amp; @JamesMontemagno discuss the latest &amp;… https://t.co/SPEvfxFuLn","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":57,"FavoriteCount":14,"RawContent":null},{"Id":"1095445655076700162","CreatedAt":"2019-02-12T22:12:51+00:00","UserScreenname":"xamarinhq","Text":"To provide the best user experience we need access to the current network state of our users’ devices.\n\n...new from… https://t.co/w2ZGMgKqli","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":42,"FavoriteCount":23,"RawContent":null},{"Id":"1093221405917937670","CreatedAt":"2019-02-06T18:54:28+00:00","UserScreenname":"xamarinhq","Text":"Every month we survey &amp; interview our Xamarin devs, listening to your firsthand stories. Why? To make #Xamarin bett… https://t.co/Gwc32YD8qG","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":94,"FavoriteCount":42,"RawContent":null},{"Id":"1093196382901547008","CreatedAt":"2019-02-06T17:15:02+00:00","UserScreenname":"xamarinhq","Text":"On a recent #XamarinShow, Mike Parker from the Microsoft Mobile Customer Advisory Team that shows us how to easily… https://t.co/jdjf2oZXwI","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":48,"FavoriteCount":16,"RawContent":null},{"Id":"1092542167078326279","CreatedAt":"2019-02-04T21:55:25+00:00","UserScreenname":"xamarinhq","Text":"Walk through some techniques for separating the concerns of dev'ing a C/C++ library, a C# wrapper, &amp; a mobile app s… https://t.co/W1RmRSHzXZ","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":72,"FavoriteCount":36,"RawContent":null},{"Id":"1091455153868296201","CreatedAt":"2019-02-01T21:56:01+00:00","UserScreenname":"xamarinhq","Text":"Announcing .NET Foundation Open Membership. We're making some big changes to expand the #dotNET Foundation. We’re i… https://t.co/iePYJUdean","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":69,"FavoriteCount":39,"RawContent":null},{"Id":"1091387761297362944","CreatedAt":"2019-02-01T17:28:13+00:00","UserScreenname":"xamarinhq","Text":"There's a new Xamarin.Essentials out. Today, @JamesMontemagno highlights API of the Week, App Information; which gi… https://t.co/WlU6hQHbNl","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":66,"FavoriteCount":22,"RawContent":null},{"Id":"1090678537491808256","CreatedAt":"2019-01-30T18:30:01+00:00","UserScreenname":"xamarinhq","Text":"Check out this super-interesting use-case for creating complex UI using FastGrid for Xamarin.Forms with many cell v… https://t.co/SNff8XhdJ3","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":99,"FavoriteCount":42,"RawContent":null},{"Id":"1089964090339049472","CreatedAt":"2019-01-28T19:11:04+00:00","UserScreenname":"xamarinhq","Text":"Finding it a bit complex packaging your Xamarin. Android application? Here's some excellent info about Android’s D8… https://t.co/1qhLDuX3m6","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":71,"FavoriteCount":28,"RawContent":null},{"Id":"1088179823762161664","CreatedAt":"2019-01-23T21:01:02+00:00","UserScreenname":"xamarinhq","Text":"Just released: #VS2019 Preview 2 which includes tons of improvements for mobile devs to make you more productive wh… https://t.co/j4LgiuYkgc","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":156,"FavoriteCount":74,"RawContent":null},{"Id":"1086352280604065792","CreatedAt":"2019-01-18T19:59:01+00:00","UserScreenname":"xamarinhq","Text":"New Year – New podcast. Now on the Visual Studio Mobile Developer Podcast: Office Hours, Hockey App moving to… https://t.co/QtObsRI6av","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":45,"FavoriteCount":20,"RawContent":null},{"Id":"1085961073902129152","CreatedAt":"2019-01-17T18:04:30+00:00","UserScreenname":"xamarinhq","Text":"As the .NET community expands so should the community standups... We are pleased to introduce the expansion of the… https://t.co/EDO0vChQlR","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":45,"FavoriteCount":22,"RawContent":null},{"Id":"1083829954515750923","CreatedAt":"2019-01-11T20:56:12+00:00","UserScreenname":"xamarinhq","Text":"...just posted on the Xamarin Blog, Andrei Nitescu shares one of his contributions to Xamarin.Forms, the bindable l… https://t.co/rp3eVPLbYl","Source":"<a href=\"https://prod1.sprinklr.com\" rel=\"nofollow\">Sprinklr Publishing</a>","RetweetCount":105,"FavoriteCount":45,"RawContent":null}]}},"RunOn":"2019-02-23T05:31:07.7286756Z","RunDurationInMilliseconds":2750}