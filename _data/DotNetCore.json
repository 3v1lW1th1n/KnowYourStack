{"Data":{"Blog":{"FeedItems":[{"Title":"Migrating your existing .NET application to the cloud? Tell us about it!","PublishedOn":"2017-12-05T18:14:46+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Hi everyone! The .NET team is conducting a survey to learn more about your approach for moving existing .NET applications to the cloud.  The survey should take less than 5 minutes to complete. Take...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/12/05/migrating-your-existing-net-application-to-the-cloud-tell-us-about-it/","RawContent":null},{"Title":"Announcing the Windows Compatibility Pack for .NET Core","PublishedOn":"2017-11-17T04:59:32+00:00","CommentsCount":73,"FacebookCount":0,"Summary":"Porting existing code to .NET Core used to be quite hard because the available API set was very small. In .NET Core 2.0, we already made this much easier, thanks to .NET Standard 2.0. Today,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/announcing-the-windows-compatibility-pack-for-net-core/","RawContent":null},{"Title":"UPDATE – Microservices and Docker containers: Architecture, Patterns and Development guidance (Updated for .NET Core 2.0)","PublishedOn":"2017-11-16T22:00:06+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Nov. 15th 2017 update Earlier this year, we published this eBook/guide and sample application offering guidance for architecting microservices and Docker containers based applications. We have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/update-microservices-and-docker-containers-architecture-patterns-and-development-guidance-updated-for-net-core-2-0/","RawContent":null},{"Title":"UPDATE – Web Applications with ASP.NET Core Architecture and Patterns guidance (Updated for ASP.NET Core 2)","PublishedOn":"2017-11-16T21:00:05+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Nov. 15th 2017 update Earlier this year, we published an eBook/Guide and sample application offering guidance named Architecting Modern Web Applications with ASP.NET Core and Microsoft Azure. We have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/update-web-applications-with-asp-net-core-architecture-and-patterns-guidance-updated-for-asp-net-core-2/","RawContent":null},{"Title":"Introducing Tensor for multi-dimensional Machine Learning and AI data","PublishedOn":"2017-11-15T22:00:18+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"Overview Tensor is an exchange type for homogenous multi-dimensional data for 1 to N dimensions. The motivation behind introducing Tensor&#60;T&#62; is to make it easy for Machine Learning library...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/introducing-tensor-for-multi-dimensional-machine-learning-and-ai-data/","RawContent":null},{"Title":"Introducing Nullable Reference Types in C#","PublishedOn":"2017-11-15T20:00:47+00:00","CommentsCount":234,"FacebookCount":0,"Summary":"Today we released a prototype of a C# feature called &#8220;nullable reference types&#8220;, which is intended to help you find and fix most of your null-related bugs before they blow up at runtime....","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/nullable-reference-types-in-csharp/","RawContent":null},{"Title":"Announcing F# support for .NET Core and .NET Standard projects in Visual Studio","PublishedOn":"2017-11-15T19:00:49+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"We&#8217;re pleased to announce that Visual Studio 2017 15.5 Preview 4 now supports F# projects targeting .NET Core, .NET Standard, and .NET Framework through the .NET Core SDK. Some of you have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/announcing-f-support-for-net-core-and-net-standard-projects-in-visual-studio/","RawContent":null},{"Title":"Welcome to C# 7.2 and Span","PublishedOn":"2017-11-15T19:00:26+00:00","CommentsCount":29,"FacebookCount":0,"Summary":"C# 7.2 is the latest point release of C#, and adds a number of small but useful features. All the features are described in wonderful detail in the docs. Start with the overview, What&#8217;s new in...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/welcome-to-c-7-2-and-span/","RawContent":null},{"Title":".NET Core November 2017 Update","PublishedOn":"2017-11-15T05:25:23+00:00","CommentsCount":12,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core November Update. This includes .NET Core 1.0.8, 1.1.5 and 2.0.1 and .NET Core SDK 1.1.5 and 2.0.3. Details regarding the security issues addressed by this release...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/14/net-core-november-2017-update/","RawContent":null},{"Title":".NET Framework November 2017 Security and Quality Rollup","PublishedOn":"2017-11-15T03:54:36+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"Today, we are releasing the November 2017 Security and Quality Rollup. Security This release contains no new security updates. The most recent .NET security updates were shipped with the September...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/14/net-framework-november-2017-security-and-quality-rollup/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"6946829856","Type":"PullRequestEvent","CreatedAt":"2017-12-05T18:08:42","Actor":"heiligerdankgesang","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/92","RelatedDescription":"Opened pull request \"Remove contact email from system.drawing.md\" (#92) at dotnet/home","RelatedBody":"Contact email is outdated. Mono-project site's community section has better, more up-to-date information."},{"Id":"6934052963","Type":"PullRequestEvent","CreatedAt":"2017-12-02T15:19:09","Actor":"rprouse","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/91","RelatedDescription":"Opened pull request \"Add NUnit to the .NET Foundation Projects\" (#91) at dotnet/home","RelatedBody":""},{"Id":"6872255902","Type":"PullRequestEvent","CreatedAt":"2017-11-17T22:01:26","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/90","RelatedDescription":"Merged pull request \"Add BenchmarkDotNet to README.md and project.json\" (#90) at dotnet/home","RelatedBody":""},{"Id":"6872252909","Type":"PullRequestEvent","CreatedAt":"2017-11-17T22:00:44","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/89","RelatedDescription":"Merged pull request \"New logo and SSL certificate for Peachpie\" (#89) at dotnet/home","RelatedBody":""},{"Id":"6868854916","Type":"PullRequestEvent","CreatedAt":"2017-11-17T09:04:03","Actor":"AndreyAkinshin","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/90","RelatedDescription":"Opened pull request \"Add BenchmarkDotNet to README.md and project.json\" (#90) at dotnet/home","RelatedBody":""},{"Id":"6816687850","Type":"IssuesEvent","CreatedAt":"2017-11-06T20:30:07","Actor":"Petermarcu","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/home/issues/88","RelatedDescription":"Closed issue \"File system watcher crash\" (#88) at dotnet/home","RelatedBody":"Not sure where to open this issue.\r\nI'm experiencing crashes since I migrated to .net core 2.0 while running my site.\r\nThe following is the exception and stack trace:\r\n```\r\nAn unhandled exception of type 'System.ArgumentException' occurred in System.Private.CoreLib.dll\r\nThe path is not of a legal form.\r\n\r\nSystem.Private.CoreLib.dll!System.IO.Path.GetFullPath(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.InMemoryDirectoryInfo.InMemoryDirectoryInfo(string rootDir, System.Collections.Generic.IEnumerable<string> files, bool normalized)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string rootDir, System.Collections.Generic.IEnumerable<string> files)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string file)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.ReportChangeForMatchedEntries(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnFileSystemEntryChange(string fullPath)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnRenamed(object sender, System.IO.RenamedEventArgs e)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.NotifyRenameEventArgs(System.IO.WatcherChangeTypes action, string name, string oldName)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ParseEventBufferAndNotifyForEach(byte[] buffer)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ReadDirectoryChangesCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* overlappedPointer)\tUnknown\tNo symbols loaded.\r\n \tSystem.Private.CoreLib.dll!System.Threading._IOCompletionCallback.PerformIOCompletionCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* pOVERLAP)\tUnknown\tNo symbols loaded.\r\n```\r\n\r\nI'm not sure how to fix this. I can reproduce it although it's not easy since I think it has to do with timing..."},{"Id":"6797468573","Type":"PullRequestEvent","CreatedAt":"2017-11-01T23:04:17","Actor":"bfistein","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/89","RelatedDescription":"Opened pull request \"New logo and SSL certificate for Peachpie\" (#89) at dotnet/home","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"6948315401","Type":"IssuesEvent","CreatedAt":"2017-12-05T23:41:57","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/50","RelatedDescription":"Closed issue \".Net Core ARM32 SDK availability\" (#50) at dotnet/announcements","RelatedBody":"Referencing #29.\r\n\r\nWill it be possible to : \r\n\r\na) Provide ARM32 builds for the SDK at its current state\r\nor\r\nb) Provide links on how to build the .Net Core SDK for ARM32?\r\n\r\nThe thing is I am planning to use it in a virtual environnement, through proot + qemu-arm-static. This way I would be able to build and, more importantly, run unit tests on ARM32. Another thing I am planning to do is to setup a build environnement on i686 through virtualisation as qemu doesn't seem to be able to emulate x86_64 on i686 (but arm32 does seem to work well enough).\r\n\r\nThank you in advance.\r\n\r\nSergio\r\n\r\n"},{"Id":"6944555922","Type":"IssuesEvent","CreatedAt":"2017-12-05T10:46:06","Actor":"tioduke","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/50","RelatedDescription":"Opened issue \".Net Core ARM32 SDK availability\" (#50) at dotnet/announcements","RelatedBody":"Will it be possible to : \r\n\r\na) Provide ARM32 builds for the SDK at its current state\r\nor\r\nb) Provide links on how to build the .Net Core SDK for ARM32?\r\n\r\nThe thing is I am planning to use it in a virtual environnement, through proot + qemu-arm-static. This way I would be able to build and, more importantly, run unit tests on ARM32. Another thing I am planning to do is to setup a build environnement on i686 through virtualisation as qemu doesn't seem to be able to emulate x86_64 on i686 (but arm32 does seem to work well enough).\r\n\r\nThank you in advance.\r\n\r\nSergio\r\n\r\n"},{"Id":"6886438076","Type":"IssuesEvent","CreatedAt":"2017-11-21T19:28:57","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/49","RelatedDescription":"Opened issue \".NET Core Alpine Image Ready for Testing\" (#49) at dotnet/announcements","RelatedBody":"# .NET Core Alpine Image Ready for Testing\r\n\r\nAn [Alpine](https://hub.docker.com/_/alpine/)-based Docker image is now available for .NET Core. Alpine is much smaller than Debian, which we have used for the .NET Core base image to date. There have been many requests for an Alpine image. We are pleased to make it available. Please check out [.NET Core Docker Alpine Production Sample (Preview)](https://github.com/dotnet/dotnet-docker-samples/blob/master/dotnetapp-prod-alpine-preview/README.md) to see examples of using this image.\r\n\r\nWe have added two new images:\r\n\r\n- `2.1-runtime-alpine`\r\n- `2.1-runtime-deps-alpine`\r\n\r\nAlpine support is part of the .NET Core 2.1 release. .NET Core 2.1 images are currently provided at the [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/) repo, including the new Alpine images. .NET Core 2.1 images will be promoted to the [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) repo when .NET Core 2.1 is shipped as a Preview, expected to be early 2018.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker-nightly #500](https://github.com/dotnet/dotnet-docker-nightly/issues/500)\r\n\r\n## Details\r\n\r\n* [dotnet/dotnet-docker-nightly #480](https://github.com/dotnet/dotnet-docker-nightly/pull/480)\r\n* [dotnet/announcements #20](https://github.com/dotnet/announcements/issues/20)\r\n* [dotnet/dotnet-docker-samples #94](https://github.com/dotnet/dotnet-docker-samples/pull/94)\r\n\r\nThe primary goal of Alpine is very small deployments. We have been considering various design decisions to make .NET Core Alpine base images as small as possible to align with that. In this first iteration, we enabled [.NET Core 2.0 Globalization Invariant Mode](https://github.com/dotnet/announcements/issues/20) in order to reduce the default size of the image. This change reduced the image by ~30MB. You can see the reduction in size for .NET Core images relative to Debian in the following table.\r\n\r\n|2.1 Image|Debian|Alpine|\r\n|-----    |------|------|\r\n|`-deps`   |153MB (68MB compressed) |13.8 MB (6MB compressed)|\r\n|`-runtime`|222MB (96MB compressed) |82.5 (34MB compressed)|\r\n\r\nNote: The compressed size is what you will see in a [registry](https://hub.docker.com/r/microsoft/dotnet-nightly/tags/) and is the wire-size cost.\r\n\r\nWe are also considering saving more space by native-compiling fewer assemblies. .NET Core runtime assemblies are native-compiled with the [crossgen tool](https://github.com/dotnet/coreclr/blob/master/Documentation/building/crossgen.md) in the [Ready2Run format](https://github.com/dotnet/coreclr/blob/master/Documentation/botr/readytorun-overview.md). Native-compiled code delivers superior startup performance but at the cost of 2-3x larger files. We have the opportunity to compile less, skipping compiling assemblies in part or in whole. We believe that we can save at least another 10MB through compiling less without a material drop in performance. For scenarios that value size over startup or where wire cost is significant, it may be valuable to aggressively reduce the number/% of compilation.\r\n\r\nAlpine images are only available for .NET Core 2.1. At the current time, only Runtime images are available. We intend to offer SDK images at a later date.\r\n\r\nUse cases that cannot tolerate Globalization invariant mode can reset the `DOTNET_SYSTEM_GLOBALIZATION_INVARIANT` environment variable and install the ICU package. Please check out [.NET Core Docker Alpine Production Sample (Preview)](https://github.com/dotnet/dotnet-docker-samples/blob/master/dotnetapp-prod-alpine-preview/README.md) to see examples of using this image with and without Globalization Invariant Mode enabled.\r\n\r\n## Call to Action\r\n\r\nPlease test your workloads with the new Alpine image. In particular, we want to know if enabling .NET Core Globalization Invariant Mode is acceptable/appreciated.\r\n"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7024922570","Type":"PullRequestEvent","CreatedAt":"2017-12-23T01:28:58","Actor":"dotnet-maestro-bot","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15622","RelatedDescription":"Opened pull request \"Update CoreClr to preview1-26023-01 (master)\" (#15622) at dotnet/coreclr","RelatedBody":"/cc @dotnet/coreclr-auto-update-notify"},{"Id":"7024880241","Type":"PullRequestEvent","CreatedAt":"2017-12-23T00:54:36","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15603","RelatedDescription":"Merged pull request \"[Arm64] Disable HW Intrinsic NGEN\" (#15603) at dotnet/coreclr","RelatedBody":"@jkotas @dotnet/jit-contrib @dotnet/arm64-contrib PTAL"},{"Id":"7024589129","Type":"PullRequestEvent","CreatedAt":"2017-12-22T22:00:10","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15612","RelatedDescription":"Merged pull request \"Update BuildTools, CoreClr, CoreFx to prerelease-02322-02, preview1-26022-02, preview1-26022-02, respectively (master)\" (#15612) at dotnet/coreclr","RelatedBody":"/cc @dotnet/coreclr-auto-update-notify"},{"Id":"7024582993","Type":"PullRequestEvent","CreatedAt":"2017-12-22T21:57:21","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15621","RelatedDescription":"Merged pull request \"Fix manual GC_PROTECTs around StackTraceArray\" (#15621) at dotnet/coreclr","RelatedBody":"StackTraceArray wraps GC reference that needs to be GC_PROTECTED exactly once accross all GC triggering points. The calls from copy constructor and assignment operator were violating this invariant. I have fixed this by deleting the copy constructor and assignment operator, and replaced their use by explicit CopyFrom method.\r\n\r\nFixes #15537"},{"Id":"7024582986","Type":"IssuesEvent","CreatedAt":"2017-12-22T21:57:21","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/15537","RelatedDescription":"Closed issue \"Assert failure: Thread::IsObjRefValid(&objref) testing checked against corefx\" (#15537) at dotnet/coreclr","RelatedBody":"Windows_NT x64 Checked corefx_baseline failure\r\n```\r\n  Assert failure(PID 6704 [0x00001a30], Thread: 4120 [0x1018]): Thread::IsObjRefValid(&objref)\r\n19:18:16   \r\n19:18:16   CORECLR! OBJECTREF::OBJECTREF + 0x11D (0x00007ffd`63f1505d)\r\n19:18:16   CORECLR! ExceptionNative::GetStackTracesDeepCopy + 0x490 (0x00007ffd`64275a80)\r\n19:18:16   SYSTEM.PRIVATE.CORELIB! <no symbol> + 0x0 (0x00007ffd`6389c6f7)\r\n19:18:16   SYSTEM.PRIVATE.CORELIB! <no symbol> + 0x0 (0x00007ffd`6389c7ac)\r\n19:18:16   <no module>! <no symbol> + 0x0 (0x00007ffd`0596fd2d)\r\n19:18:16   <no module>! <no symbol> + 0x0 (0xffffffff`fffffffe)\r\n19:18:16   <no module>! <no symbol> + 0x0 (0x000000fc`4589b450)\r\n19:18:16   <no module>! <no symbol> + 0x0 (0x00000000`00000001)\r\n19:18:16   CORECLR! GetClrDebugState + 0x23 (0x00007ffd`63e38c8f)\r\n19:18:16   CORECLR! ENABLESTRESSHEAP + 0xE (0x00007ffd`63f188de)\r\n19:18:16       File: d:\\j\\workspace\\x64_checked_w---d7295605\\src\\vm\\object.cpp Line: 2662\r\n19:18:16       Image: D:\\j\\workspace\\x64_checked_w---d7295605\\_\\fx\\bin\\testhost\\netcoreapp-Windows_NT-Release-x64\\dotnet.exe\r\n19:18:16   \r\n19:18:16   Finished running tests.  End time=19:18:16.96, Exit code = 123456789\r\n19:18:16 D:\\j\\workspace\\x64_checked_w---d7295605\\_\\fx\\Tools\\tests.targets(484,5): \r\nwarning MSB3073: The command \"D:\\j\\workspace\\x64_checked_w---d7295605\\_\\fx\\bin/tests/System.Linq.Expressions.Tests/netcoreapp-Windows_NT-Release-x64//RunTests.cmd \r\nD:\\j\\workspace\\x64_checked_w---d7295605\\_\\fx\\bin/testhost/netcoreapp-Windows_NT-Release-x64/\" \r\nexited with code 123456789. \r\n[D:\\j\\workspace\\x64_checked_w---d7295605\\_\\fx\\src\\System.Linq.Expressions\\tests\\System.Linq.Expressions.Tests.csproj]\r\n```\r\n\r\n/cc @jkotas "},{"Id":"7024486476","Type":"PullRequestEvent","CreatedAt":"2017-12-22T21:15:42","Actor":"sandreenko","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15616","RelatedDescription":"Merged pull request \"Small changes around stack levels.\" (#15616) at dotnet/coreclr","RelatedBody":"As the comment in flowgraph says:\r\n```\r\n    // For debuggable code, genJumpToThrowHlpBlk() will generate the 'throw'\r\n    // code inline. It has to be kept consistent with fgAddCodeRef()\r\n    if (opts.compDbgCode)\r\n    {\r\n        return nullptr;\r\n    }\r\n```\r\nso check that we do not ask for these blocks when compile dbg code.\r\n\r\nand an additional `ifdef` for x86 only function."},{"Id":"7024443186","Type":"PullRequestEvent","CreatedAt":"2017-12-22T20:57:29","Actor":"fiigii","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15582","RelatedDescription":"Closed pull request \"Implement Multiply intrinsics of AVX/AVX2/SSE4.1\" (#15582) at dotnet/coreclr","RelatedBody":"This PR implements `Multiply` intrinsics of AVX/AVX2/SSE4.1.\r\n"}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7024735529","Type":"PullRequestEvent","CreatedAt":"2017-12-22T23:15:20","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8287","RelatedDescription":"Merged pull request \"Update CoreSetup to preview1-26022-04 (master)\" (#8287) at dotnet/cli","RelatedBody":"/cc @dotnet/dotnet-cli"},{"Id":"7024659621","Type":"PullRequestEvent","CreatedAt":"2017-12-22T22:34:25","Actor":"dotnet-bot","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8287","RelatedDescription":"Opened pull request \"Update CoreSetup to preview1-26022-04 (master)\" (#8287) at dotnet/cli","RelatedBody":"/cc @dotnet/dotnet-cli"},{"Id":"7024582180","Type":"PullRequestEvent","CreatedAt":"2017-12-22T21:57:00","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8281","RelatedDescription":"Merged pull request \"Insert NuGet Build 4.6.0-preview2-4759 into cli\" (#8281) at dotnet/cli","RelatedBody":"Insert NuGet Build 4.6.0-preview2-4759 into cli master branch"},{"Id":"7024456474","Type":"PullRequestEvent","CreatedAt":"2017-12-22T21:03:06","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/pull/8277","RelatedDescription":"Closed pull request \"Merge release/2.0.0 to release/2.1\" (#8277) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.0.0 into release/2.1.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.0.0-to-release/2.1-20171221-080038\ngit reset --hard upstream/release/2.1\ngit merge upstream/release/2.0.0\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.0.0-to-release/2.1-20171221-080038 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7024456328","Type":"PullRequestEvent","CreatedAt":"2017-12-22T21:03:01","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/pull/8272","RelatedDescription":"Closed pull request \"Merge release/2.0.0 to release/2.1\" (#8272) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.0.0 into release/2.1.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.0.0-to-release/2.1-20171220-080041\ngit reset --hard upstream/release/2.1\ngit merge upstream/release/2.0.0\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.0.0-to-release/2.1-20171220-080041 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7024455717","Type":"PullRequestEvent","CreatedAt":"2017-12-22T21:02:46","Actor":"johnbeisner","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/pull/8229","RelatedDescription":"Closed pull request \"Merge release/2.0.0 to release/2.1\" (#8229) at dotnet/cli","RelatedBody":"\nThis is an automatically generated pull request from release/2.0.0 into release/2.1.\n\n``` bash\ngit fetch --all\ngit checkout merges/release/2.0.0-to-release/2.1-20171213-080039\ngit reset --hard upstream/release/2.1\ngit merge upstream/release/2.0.0\n# Fix merge conflicts\ngit commit\ngit push merges/release/2.0.0-to-release/2.1-20171213-080039 --force\n```\n\nOnce all conflicts are resolved and all the tests pass, you are free to merge the pull request."},{"Id":"7024418751","Type":"PullRequestEvent","CreatedAt":"2017-12-22T20:47:34","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/cli/pull/8286","RelatedDescription":"Merged pull request \"Check null for getenv\" (#8286) at dotnet/cli","RelatedBody":"As you see, the implementation of the 3 OS to check PATH is different.\r\nThere is not too much to extract. And I tried to move the\r\n\"contains a folder path in env:path?\" to a method. But that\r\nmethod requires to pass in env:path, targetapath and path separator for\r\ndifferent OS. This method has low value. And people still must\r\nremember to use this method. So I just added simple null check to the\r\nplace I used GetEnvPath.\r\n"},{"Id":"7024297292","Type":"PullRequestEvent","CreatedAt":"2017-12-22T19:59:51","Actor":"wli3","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8286","RelatedDescription":"Opened pull request \"Check null for getenv\" (#8286) at dotnet/cli","RelatedBody":"As you see, the implementation of the 3 OS to check PATH is different.\r\nThere is not too much to extract. And I tried to move the\r\n\"contains a folder path in env:path?\" to a method. But that\r\nmethod requires to pass in env:path, targetapath and path separator for\r\ndifferent OS. This method has low value. And people still must\r\nremember to use this method. So I just added simple null check to the\r\nplace I used GetEnvPath.\r\n"},{"Id":"7024100508","Type":"PullRequestEvent","CreatedAt":"2017-12-22T18:55:30","Actor":"peterhuene","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8285","RelatedDescription":"Opened pull request \"Map solution configurations to existing project configurations on add. \" (#8285) at dotnet/cli","RelatedBody":"This PR implements solution configuration to project configuration mapping.\r\n\r\nPreviously, when a project was added to the solution with the `sln add`\r\ncommand, solution configurations would be mapped to a project configuration and\r\nplatform of the same name, regardless of whether or not the project had a\r\nconfiguration or platform of that name.  This caused the solution to appear\r\ndirty when opened in Visual Studio if the configuration or platform did not\r\nexist at the project level because Visual Studio would attempt to correct the\r\nmapping.\r\n\r\nThe fix is to check what configurations and platforms are supported by the\r\nproject and only map to what is present.  If a solution configuration can't be\r\nmapped, the first configuration/platform supported by the project is chosen;\r\nthis is consistent with how Visual Studio does the fallback mapping.\r\n\r\nFixes #6221."},{"Id":"7022428177","Type":"PullRequestEvent","CreatedAt":"2017-12-22T10:31:15","Actor":"v-mdriml","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8284","RelatedDescription":"Opened pull request \"LOC CHECKIN | dotnet/cli – master | 20171222\" (#8284) at dotnet/cli","RelatedBody":null}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7020301855","Type":"IssuesEvent","CreatedAt":"2017-12-21T20:59:25","Actor":"desmondgc","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/604","RelatedDescription":"Closed issue \"How to avoid incompatibilities between .NET Standard 2.0 and .NET Framework 4.6.1\" (#604) at dotnet/standard","RelatedBody":"I have a .NET Standard 2.0 class library that uses System.Net.Http.HttpClientHandler. The class library is referenced in multiple projects, including a WPF application targeting .NET Framework 4.6.1. I am trying to set the HttpClientHandler.MaxConnectionsPerServer property which causes a MissingMethodException on systems without .NET Framework 4.7.1 installed.\r\n\r\n```\r\nvar baseHandler = new HttpClientHandler\r\n{\r\n    AutomaticDecompression = System.Net.DecompressionMethods.GZip,\r\n    MaxConnectionsPerServer = 32\r\n};\r\n```\r\n\r\n```\r\nSystem.MissingMethodException: Method not found: 'Void System.Net.Http.HttpClientHandler.set_MaxConnectionsPerServer(Int32)'.\r\n```\r\n\r\nThis is expected - MaxConnectionsPerServer is one of the [APIs with known compatibility issues](https://github.com/dotnet/standard/blob/master/netstandard/src/ApiCompatBaseline.net461.txt).\r\n\r\nFirst workaround attempt - catch MissingMethodException:\r\n\r\n```\r\nvar baseHandler = new HttpClientHandler\r\n{\r\n    AutomaticDecompression = System.Net.DecompressionMethods.GZip,\r\n};\r\n\r\ntry\r\n{\r\n    baseHandler.MaxConnectionsPerServer = 32;\r\n}\r\ncatch (MissingMethodException)\r\n{\r\n    // Available since .NET Framework 4.7.1\r\n}\r\n```\r\n\r\nDoesn't work - the exception is still raised. Some SO posts suggest that it's generally not possible to catch MissingMethodException.\r\n\r\nSecond workaround attempt - reflection:\r\n\r\n```\r\nvar baseHandler = new HttpClientHandler\r\n{\r\n    AutomaticDecompression = System.Net.DecompressionMethods.GZip,\r\n};\r\n\r\nif (typeof(HttpClientHandler).GetProperty(\"MaxConnectionsPerServer\") != null)\r\n{\r\n    // Available since .NET Framework 4.7.1\r\n    baseHandler.MaxConnectionsPerServer = 32;\r\n}\r\n```\r\n\r\nDoesn't work - GetProperty doesn't return null.\r\n\r\nHow am I expected to avoid this scenario?"},{"Id":"7018954133","Type":"IssuesEvent","CreatedAt":"2017-12-21T15:32:21","Actor":"0xF6","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/612","RelatedDescription":"Opened issue \"Merge Library?\" (#612) at dotnet/standard","RelatedBody":"Now to merge.NET Standard libraries into one library?"},{"Id":"7016897774","Type":"IssuesEvent","CreatedAt":"2017-12-21T07:05:12","Actor":"viswa18","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/611","RelatedDescription":"Opened issue \"System.Diagnostics.Process.Start(info) show icon in Mac\" (#611) at dotnet/standard","RelatedBody":"I am having a simple C++ command line app, which is starts from .NetStandard2.0 class library. Below is code snippet to start the process, but it show dock icon in mac. \r\n\r\n```\r\nSystem.Diagnostics.ProcessStartInfo info = new System.Diagnostics.ProcessStartInfo \r\n{\r\nFileName = helloworld\",\r\nRedirectStandardOutput = true,\r\nRedirectStandardError = true,\r\nUseShellExecute = false,\r\nCreateNoWindow = true,\r\nArguments = args,\r\nWindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden, \r\nErrorDialog = false,\r\n};\r\nSystem.Diagnostics.Process process = System.Diagnostics.Process.Start(info);\r\n```\r\nIs it possible to prevent the icon in dock for mac? "},{"Id":"7015432489","Type":"PullRequestEvent","CreatedAt":"2017-12-20T21:45:45","Actor":"dotnet-maestro-bot","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/610","RelatedDescription":"Opened pull request \"Update BuildTools to prerelease-02320-01 (master)\" (#610) at dotnet/standard","RelatedBody":""}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7024922215","Type":"PullRequestEvent","CreatedAt":"2017-12-23T01:28:35","Actor":"tannergooding","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/26035","RelatedDescription":"Opened pull request \"Adding the Acosh, Asinh, Atanh, and Cbrt functions to System.Math and System.MathF\" (#26035) at dotnet/corefx","RelatedBody":"This resolves https://github.com/dotnet/corefx/issues/16428"},{"Id":"7024735680","Type":"IssuesEvent","CreatedAt":"2017-12-22T23:15:25","Actor":"karelz","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/corefx/issues/25984","RelatedDescription":"Closed issue \"Test failure: System.Net.Tests.SyncWebClientTest / OpenWrite_Success\" (#25984) at dotnet/corefx","RelatedBody":"## Type of failures\r\n\r\n### CurlException: SSL connect error\r\n\r\nBuild 20171210.01 (Fedora26):\r\n```\r\nSystem.Net.WebException : An error occurred while sending the request. SSL connect error\r\n---- System.Net.Http.HttpRequestException : An error occurred while sending the request.\r\n-------- System.Net.Http.CurlException : SSL connect error\r\nat System.Net.HttpWebRequest.GetResponse() in /root/corefx-1210471/src/System.Net.Requests/src/System/Net/HttpWebRequest.cs:line 1014\r\nat System.Net.WebClient.GetWebResponse(WebRequest request) in /root/corefx-1210471/src/System.Net.WebClient/src/System/Net/WebClient.cs:line 249\r\nat System.Net.WebClient.WebClientWriteStream.Dispose(Boolean disposing) in /root/corefx-1210471/src/System.Net.WebClient/src/System/Net/WebClient.cs:line 1977\r\nat System.IO.Stream.Close() in /root/coreclr/src/mscorlib/src/System/IO/Stream.cs:line 240\r\nat System.Net.Tests.WebClientTestBase.<OpenWrite_Success>d__19.MoveNext() in /root/corefx-1210471/src/System.Net.WebClient/tests/WebClientTest.cs:line 631\r\n--- End of stack trace from previous location where exception was thrown ---\r\n--- End of stack trace from previous location where exception was thrown ---\r\n--- End of stack trace from previous location where exception was thrown ---\r\n----- Inner Stack Trace -----\r\nat System.Net.Http.HttpClient.<FinishSendAsyncUnbuffered>d__59.MoveNext() in /root/corefx-1210471/src/System.Net.Http/src/System/Net/Http/HttpClient.cs:line 489\r\n--- End of stack trace from previous location where exception was thrown ---\r\nat System.Net.HttpWebRequest.<SendRequest>d__194.MoveNext() in /root/corefx-1210471/src/System.Net.Requests/src/System/Net/HttpWebRequest.cs:line 1209\r\n--- End of stack trace from previous location where exception was thrown ---\r\nat System.Net.HttpWebRequest.GetResponse() in /root/corefx-1210471/src/System.Net.Requests/src/System/Net/HttpWebRequest.cs:line 1009\r\n----- Inner Stack Trace -----\r\nat System.Net.Http.CurlHandler.ThrowIfCURLEError(CURLcode error) in /root/corefx-1210471/src/System.Net.Http/src/System/Net/Http/Unix/CurlHandler.cs:line 663\r\nat System.Net.Http.CurlHandler.MultiAgent.FinishRequest(StrongToWeakReference`1 easyWrapper, CURLcode messageResult) in /root/corefx-1210471/src/System.Net.Http/src/System/Net/Http/Unix/CurlHandler.MultiAgent.cs:line 883\r\n```\r\n\r\n## History of failures\r\n\r\nDay | Build | OS | Error message\r\n-- | -- | -- | --\r\n9/3 | 20170903.01 | Ubuntu17.04 | System.Net.WebException : The operation has timed out.\r\n10/9 | 20171009.04 | Fedora25 | CurlException: SSL connect error\r\n10/24 | 20171024.02 | Fedora26 | CurlException: SSL connect error\r\n11/3 | 20171103.01 | Fedora26 | CurlException: SSL connect error\r\n11/4 | 20171104.04 | Fedora26 | CurlException: SSL connect error\r\n11/8 | 20171108.02 | Fedora25 | CurlException: SSL connect error\r\n11/16 | 20171116.51 | Fedora26 | CurlException: SSL connect error\r\n12/10 | 20171210.01 | Fedora26 | CurlException: SSL connect error\r\n"}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7024866939","Type":"PullRequestEvent","CreatedAt":"2017-12-23T00:43:58","Actor":"gafter","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/23921","RelatedDescription":"Opened pull request \"WIP recursive-patterns(4): Next phase of recursive pattern-matching\" (#23921) at dotnet/roslyn","RelatedBody":"## For personal review at this time\r\n\r\n- No changes yet\r\n\r\nThis is the fifth of several PRs for the implementation of recursive pattern-matching, each of which builds on the previous. Until the previous PR #23357 is integrated, you will also see the changes from that PR included here. You should review #23208 (DONE) and #23209 and #23228 and #23357 first, and only review new deltas in this review.\r\n"}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7025131459","Type":"PullRequestEvent","CreatedAt":"2017-12-23T05:05:32","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5148","RelatedDescription":"Opened pull request \"Merge nmirror to master\" (#5148) at dotnet/corert","RelatedBody":""},{"Id":"7025131213","Type":"PullRequestEvent","CreatedAt":"2017-12-23T05:05:14","Actor":"jkotas","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5147","RelatedDescription":"Merged pull request \"Merge changes from TFS\" (#5147) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"7025131028","Type":"PullRequestEvent","CreatedAt":"2017-12-23T05:05:05","Actor":"dotnet-bot","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5147","RelatedDescription":"Opened pull request \"Merge changes from TFS\" (#5147) at dotnet/corert","RelatedBody":"When merging, this PR, please ensure a merge commit is created as automation requires the merge commit.  Do not 'Squash and merge' or 'Rebase and merge'!"},{"Id":"7022590915","Type":"PullRequestEvent","CreatedAt":"2017-12-22T11:19:07","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5146","RelatedDescription":"Opened pull request \"Give MetadataManager option to control field reflectability\" (#5146) at dotnet/corert","RelatedBody":"Progress towards #3224: The policy that says all types have all of their fields reflectable was getting hardcoded in places we don't want.\r\n\r\nI'm moving the logic down into `MetadataManager` and it's descendants so that we can have more control over this logic. This has an immediate benefit that when `EmptyMetadataManager` is in use, we no longer root all the static bases of generated types.\r\n\r\nThe `UsageBasedMetadataManager` has extensibility points to be able to track exact fields that were statically used (so that we don't reflection enable fields that weren't statically referenced), but this is currently unused. We could implement exact tracking for when ILScanner is used, but I'm not sure we would actually want this kind of debug/release difference.\r\n\r\nThis is mostly done so that we can respect field reflectability information coming from an external tool."}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7024482097","Type":"PullRequestEvent","CreatedAt":"2017-12-22T21:13:52","Actor":"nugetlurker","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1831","RelatedDescription":"Opened pull request \"Insert NuGet Build 4.6.0-preview2-4759 into sdk\" (#1831) at dotnet/sdk","RelatedBody":"Insert NuGet Build 4.6.0-preview2-4759 into sdk master branch"},{"Id":"7024443991","Type":"PullRequestEvent","CreatedAt":"2017-12-22T20:57:50","Actor":"johnbeisner","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"reopened","RelatedUrl":"https://github.com/dotnet/sdk/pull/1753","RelatedDescription":null,"RelatedBody":"Insert NuGet Build 4.5.0-rtm-4651 into sdk release/15.5 branch"},{"Id":"7024440549","Type":"PullRequestEvent","CreatedAt":"2017-12-22T20:56:24","Actor":"johnbeisner","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/1753","RelatedDescription":"Closed pull request \"Insert NuGet Build 4.5.0-rtm-4651 into sdk\" (#1753) at dotnet/sdk","RelatedBody":"Insert NuGet Build 4.5.0-rtm-4651 into sdk release/15.5 branch"},{"Id":"7024228195","Type":"PullRequestEvent","CreatedAt":"2017-12-22T19:36:32","Actor":"johnbeisner","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/pull/1829","RelatedDescription":"Closed pull request \"Insert NuGet Build 4.6.0-preview2-4745 into sdk\" (#1829) at dotnet/sdk","RelatedBody":"Insert NuGet Build 4.6.0-preview2-4745 into sdk master branch"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"943234846079496192","CreatedAt":"2017-12-19T21:41:26+00:00","UserScreenname":"dotnet","Text":"Join our Jeff Fritz (@csharpfritz) in a little more than 2 hours for LIVE CODING. He's working on an @aspnet Core p… https://t.co/Xm2utapspg","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":35,"FavoriteCount":15,"RawContent":null},{"Id":"942039735144452097","CreatedAt":"2017-12-16T14:32:29+00:00","UserScreenname":"dotnet","Text":"Join our Jeff Fritz in 30 minutes for some LIVE CODING and answering your questions about .NET and Visual Studio.  https://t.co/UjBOoFqFp5","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":23,"FavoriteCount":18,"RawContent":null},{"Id":"941295101212549121","CreatedAt":"2017-12-14T13:13:35+00:00","UserScreenname":"dotnet","Text":"Join our Jeff Fritz at 10am ET for a LIVE CODING session.  He'll answer your questions about .NET, Visual Studio, a… https://t.co/qJHWFDaUGf","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":21,"FavoriteCount":14,"RawContent":null}]}},"RunOn":"2017-12-23T05:30:21.7923613Z","RunDurationInMilliseconds":7899}