{"Data":{"GitHubIssues":{"Issues":[{"Id":"318788049","IsPullRequest":true,"CreatedAt":"2018-04-30T05:19:55","Actor":"rynowak","Number":"709","RawContent":null,"Title":"Add [Parameter] for component parameters","State":"open","Body":"This change introduces ParameterAttribute to specify a bindable\r\ncomponent parameter. As of the 0.3 release of Blazor we plan to make\r\n[Parameter] required to make a property bindable by callers.\r\n\r\nThis also applies to parameters when their value is set by the\r\ninfrastructure, such as `Body` for layouts, and route paramters.\r\n\r\nThe rationale behind this change is that we think there is a need to\r\nseparate the definition of properties from their suitability for a\r\ncaller to set them through markup. We plan to introduce more features in\r\nthis area in the future such as marking parameters as required. This is\r\nfirst step, and we think that this approach will scale nicely as we add\r\nmore functionaly.\r\n\r\nThe 0.3 release seems like the right time to change this behavior since\r\nwe're also introducing `ref` for captures in this release.","Url":"https://github.com/aspnet/Blazor/pull/709","RelatedDescription":"Open PR \"Add [Parameter] for component parameters\" (#709)"},{"Id":"318769178","IsPullRequest":true,"CreatedAt":"2018-04-30T01:41:54","Actor":"rynowak","Number":"708","RawContent":null,"Title":"Resolves #297","State":"open","Body":"Removes the workaround for #297 and sets the langauge version to\r\nexperimental.\r\n\r\nThis will require 2.1.0-rc of Razor.","Url":"https://github.com/aspnet/Blazor/pull/708","RelatedDescription":"Open PR \"Resolves #297\" (#708)"},{"Id":"318761037","IsPullRequest":true,"CreatedAt":"2018-04-29T23:50:20","Actor":"rynowak","Number":"707","RawContent":null,"Title":"Rewrite of HTML handling for Blazor","State":"open","Body":"This change replaces the parsing of HTML that we perform during the code\r\ngeneration phase, which parsing of HTML during the IR lowering phase.\r\nThe main benefit of this change is that the structure of the HTML is\r\nreflected in the IR tree, allowing us to do more more advance\r\ntransformations.\r\n\r\nAs an example, see how the the handling of `<script>` tags is now a\r\nseparate pass.\r\n\r\nAs an aside from this I also redesigned the structure of component IR\r\nnodes to match the new HTML element nodes. Passes are now more easily\r\naware of the nodes they are expected to handle and are more easily aware\r\nof the difference between a component and element. This still isn't as\r\nclean as I would like, but I think it's a reasonable improvement.\r\n\r\nAnother benefit of this is that the code generation is much simpler and\r\nrequires much less bookkeeping and statefulness.","Url":"https://github.com/aspnet/Blazor/pull/707","RelatedDescription":"Open PR \"Rewrite of HTML handling for Blazor\" (#707)"},{"Id":"318751372","IsPullRequest":false,"CreatedAt":"2018-04-29T21:24:36","Actor":"VladislavFurdak","Number":"706","RawContent":null,"Title":"After run Blazor project i see empty browser window","State":"open","Body":"There are that i see:\r\n![issue1](https://user-images.githubusercontent.com/4522419/39411134-b07cae82-4c0c-11e8-9547-da1640d61787.png)\r\n![issue2](https://user-images.githubusercontent.com/4522419/39411135-b09efc3a-4c0c-11e8-8c9b-0c3533c5fa56.png)\r\n![issue3](https://user-images.githubusercontent.com/4522419/39411136-b0be0fd0-4c0c-11e8-86cf-ab6ee11093ff.png)\r\n\r\nBut as i understand empty project after \"Loading...\" label should show something\r\nAlso, when i tried to run any sample projects written in Blazor, i got the same thing\r\nAlso, i have installed VS 2017 of earlier edition on my PC.\r\n","Url":"https://github.com/aspnet/Blazor/issues/706","RelatedDescription":"Open issue \"After run Blazor project i see empty browser window\" (#706)"},{"Id":"318732051","IsPullRequest":false,"CreatedAt":"2018-04-29T16:55:54","Actor":"mrpmorris","Number":"705","RawContent":null,"Title":"Allow coder to specify BindingFlags in JsonUtil","State":"open","Body":"I want my state to be read-only, but I also need to be able to serialise/deserialise that state using JsonUtil. As they have private setters these properties are not being set.\r\n\r\nPlease could you add a BindingFlags parameter to the Deserialize() method which will allow me to tell it to set properties with private setters? ","Url":"https://github.com/aspnet/Blazor/issues/705","RelatedDescription":"Open issue \"Allow coder to specify BindingFlags in JsonUtil\" (#705)"},{"Id":"318660740","IsPullRequest":false,"CreatedAt":"2018-04-29T10:12:11","Actor":"stavroskasidis","Number":"701","RawContent":null,"Title":"Passing element reference from js to C# and back","State":"closed","Body":"I am trying to pass an element reference to C# from JS in my blazor library,\r\nI am trying with the following code:\r\n\r\n``` html\r\n<!-- Index.cshtml -->\r\n\r\n<h1 ref=\"element\">Hello, world!</h1>\r\n<button type=\"button\" onclick=\"@PassElement\">Pass element</button>\r\n@functions{\r\n    ElementRef element;\r\n    void PassElement()\r\n    {\r\n        RegisteredFunction.Invoke<object>(\"PassElementToJs\", element);\r\n    }\r\n}\r\n```\r\n\r\n``` javascript\r\n<script>\r\n   // javascript interop\r\n   Blazor.registerFunction('PassElementToJs', function (element) {\r\n       console.log(\"JS: PassElementToJs => element: \", element); //this is ok, element is populated\r\n       var method = Blazor.platform.findMethod(\"WebApplication1.Client\", \"WebApplication1.Client\", \"JsInterop\", \"PassElementToCSharp\");\r\n       Blazor.platform.callMethod(method, null, [element]);\r\n    });\r\n\r\n   Blazor.registerFunction('SecondPassElementToJs', function (element) {\r\n        //element is null\r\n        console.log(\"JS: SecondPassElementToJs => element: \", element);\r\n   });\r\n</script>\r\n```\r\n\r\n\r\n``` csharp\r\n//C# interop\r\n\r\npublic static class JsInterop\r\n{\r\n  public static void PassElementToCSharp(ElementRef element)\r\n  {\r\n      Console.WriteLine(\"C#: PassElementToCSharp => element: \" + element);\r\n      RegisteredFunction.Invoke<object>(\"SecondPassElementToJs\", element);\r\n  }\r\n}\r\n```\r\n\r\nWhat I am doing wrong ?","Url":"https://github.com/aspnet/Blazor/issues/701","RelatedDescription":"Closed issue \"Passing element reference from js to C# and back\" (#701)"},{"Id":"318701385","IsPullRequest":false,"CreatedAt":"2018-04-29T08:58:21","Actor":"mrpmorris","Number":"704","RawContent":null,"Title":"Request: A global method call to rerender all components","State":"open","Body":"My Redux/Flux library (Blazor.Fluxor) can have its state set via a Chrome plugin (Redux Dev Tools), so it is possible to change state without first having any user interaction on the page.\r\n\r\nAs my debugger tool uses an AddMiddleware approach this means there is no component, and having all components in an app descend from base class would be an incorrect approach.\r\n\r\nWhat I need is to be able to either iterate all correct component instances and call StateHasChanged on them, or have some kind of global method to call that will instruct all components to re-bind.\r\n\r\nI'm really hoping someone can tell me how this is already possible.","Url":"https://github.com/aspnet/Blazor/issues/704","RelatedDescription":"Open issue \"Request: A global method call to rerender all components\" (#704)"},{"Id":"318677992","IsPullRequest":false,"CreatedAt":"2018-04-29T00:05:47","Actor":"rynowak","Number":"703","RawContent":null,"Title":"value handling for checkbox initial state is dependent on the attribute ordering","State":"open","Body":"It looks like this logic: https://github.com/aspnet/Blazor/blob/dev/src/Microsoft.AspNetCore.Blazor.Browser.JS/src/Rendering/BrowserRenderer.ts#L227\r\n\r\nDepends on the order in which attributes are applied to an element.\r\n\r\nOn the initial render pass if you end up with C# code like:\r\n```\r\n            builder.AddAttribute(60, \"id\", \"checkbox-initially-unchecked\");\r\n            builder.AddAttribute(61, \"value\", Microsoft.AspNetCore.Blazor.Components.BindMethods.GetValue(checkboxInitiallyUncheckedValue));\r\n            builder.AddAttribute(62, \"onchange\", Microsoft.AspNetCore.Blazor.Components.BindMethods.SetValueHandler(__value => checkboxInitiallyUncheckedValue = __value, checkboxInitiallyUncheckedValue));\r\n            builder.AddAttribute(63, \"type\", \"checkbox\");\r\n```\r\n\r\nThe `type` attribute will be set after the value attribute, which will prevent it from being remapped to 'checked'.\r\n\r\nSome changes I'm making in the HTML handling exposed this issue by making the actual attribute order in the generated code reflect what the user typed in more deterministically, which means that this code from our E2E tests breaks.\r\n```\r\n<p>\r\n    Initially checked:\r\n    <input id=\"checkbox-initially-checked\" bind=\"checkboxInitiallyCheckedValue\" type=\"checkbox\" />\r\n    <span id=\"checkbox-initially-checked-value\">@checkboxInitiallyCheckedValue</span>\r\n</p>\r\n```\r\n\r\nReordering the `bind` and `type` attributes in the test code also works around the issue.\r\n\r\nI'm planning to work around this issue for `bind` for now by forcibly adding the value attribute at the end.","Url":"https://github.com/aspnet/Blazor/issues/703","RelatedDescription":"Open issue \"value handling for checkbox initial state is dependent on the attribute ordering\" (#703)"},{"Id":"318638674","IsPullRequest":false,"CreatedAt":"2018-04-28T21:04:51","Actor":"drinkwater99","Number":"699","RawContent":null,"Title":"Binding / rendering issue","State":"closed","Body":"Basically showing a list of blog posts with a filter button. When applying with the filter button, the list does not refresh until I click a second time on the apply filter button.\r\n\r\nShould this work ?\r\n\r\n\r\n```\r\n@page \"/fetchdata\"\r\n@inject HttpClient Http\r\n\r\n@if (BlogPosts == null)\r\n{\r\n    <p><em>Loading...</em></p>\r\n}\r\nelse\r\n{\r\n    <div class=\"card\" style=\"width: 100%;\">\r\n        <div class=\"card-body\">\r\n            <h5 class=\"card-title\">Blog posts</h5>\r\n            \r\n            <form class=\"form-inline\">\r\n                <div class=\"form-group\">\r\n                    <label class=\"control-label\">Filter&nbsp;</label>\r\n                    <input class=\"form-control\" bind=\"@Filter\" />\r\n                    <button class=\"btn\" onclick=\"@ApplyFilter\">Apply filter</button>\r\n                </div>\r\n            </form>\r\n\r\n            <table class='table table-striped table-bordered table-hover table-condensed'>\r\n                <thead>\r\n                    <tr>\r\n                        <th>userId</th>\r\n                        <th>id</th>\r\n                        <th>title</th>\r\n                        <th>body</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    @foreach (var post in BlogPosts)\r\n                    {\r\n                        <tr>\r\n                            <td>@post.userId</td>\r\n                            <td>@post.id</td>\r\n                            <td>@post.title</td>\r\n                            <td>@post.body</td>\r\n                        </tr>\r\n                    }\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    </div>\r\n}\r\n\r\n@functions {\r\n    public BlogPost[] BlogPosts;\r\n\r\n    public string Filter { get; set; } = \"\";\r\n\r\n    protected override async Task OnInitAsync()\r\n    {\r\n        BlogPosts = await Http.GetJsonAsync<BlogPost[]>(\"https://jsonplaceholder.typicode.com/posts\");\r\n    }\r\n\r\n    public async void ApplyFilter()\r\n    {\r\n        var all = await Http.GetJsonAsync<BlogPost[]>(\"https://jsonplaceholder.typicode.com/posts\");\r\n\r\n        BlogPosts = all.Where(x => x.title.Contains(Filter)).ToArray<BlogPost>();\r\n\r\n        Console.WriteLine(BlogPosts.Length.ToString());\r\n    }\r\n\r\n    public class BlogPost\r\n    {\r\n        public int userId { get; set; }\r\n        public int id { get; set; }\r\n        public string title { get; set; }\r\n        public string body { get; set; }\r\n    }\r\n}\r\n```\r\n\r\n\r\n","Url":"https://github.com/aspnet/Blazor/issues/699","RelatedDescription":"Closed issue \"Binding / rendering issue\" (#699)"},{"Id":"318663911","IsPullRequest":false,"CreatedAt":"2018-04-28T19:50:10","Actor":"GoldenCrystal","Number":"702","RawContent":null,"Title":"Route segments are not decoded","State":"open","Body":"### Title\r\nRoute segments are not decoded\r\n\r\n### Functional impact\r\nSpaces, non-ASCII characters, or other unsafe characters will not work properly inside URLs out of the box.\r\nThis impacts routes such as ````@page \"/ブラゾル\" ````, or any route parameter that would contain unsafe characters.\r\n\r\n### Minimal repro steps\r\n1. Create a new Blazor application\r\n2. Create a page like this one:\r\n````\r\n@page \"/wiki/{topic}\"\r\n\r\n<p>@Topic</p>\r\n\r\n@functions {\r\n    public string Topic { get; set; }\r\n}\r\n````\r\n3. Start the application and navigate to \"/wiki/déjà vu\" in your Browser\r\n\r\n### Expected result\r\nI expect the page to display \"déjà vu\"\r\n\r\n### Actual result\r\nInstead, I see \"d%C3%A9j%C3%A0%20vu\"\r\n\r\n### Further technical details\r\nI tested this on Chrome 65 and Firefox 59.\r\n\r\nIt seems that the simplified parsing implementation in [RouteContext](https://github.com/aspnet/Blazor/blob/dev/src/Microsoft.AspNetCore.Blazor/Routing/RouteContext.cs) could easily be improved for handling this scenario.\r\n\r\nI'm ok with providing a PR for this, if needed.","Url":"https://github.com/aspnet/Blazor/issues/702","RelatedDescription":"Open issue \"Route segments are not decoded\" (#702)"},{"Id":"318640528","IsPullRequest":false,"CreatedAt":"2018-04-28T14:21:45","Actor":"DNF-SaS","Number":"700","RawContent":null,"Title":"Can Microsoft.Extensions.Logging be used in Blazor?","State":"open","Body":"Unfortunately, no luck using\r\n`services.AddLogging(loggingBuilder => loggingBuilder.AddConsole());`\r\nand\r\n`ILogger<xxx> logger`\r\nand the \"2.1.0-preview2-final\"-Packages of Microsoft.Extensions.Logging.\r\n\r\nIs there anything special to consider?","Url":"https://github.com/aspnet/Blazor/issues/700","RelatedDescription":"Open issue \"Can Microsoft.Extensions.Logging be used in Blazor?\" (#700)"},{"Id":"318625939","IsPullRequest":false,"CreatedAt":"2018-04-28T10:58:04","Actor":"conficient","Number":"698","RawContent":null,"Title":"Authentication & Identity","State":"open","Body":"I couldn't find an issue tracking authentication and identity and how this would be handled in Blazor? I assume we would try to follow asp.net core practices on the server, but how would this be handled on the client?\r\n\r\nI expect we'd need something in the routing engine, and possibly per-page attributes as well?","Url":"https://github.com/aspnet/Blazor/issues/698","RelatedDescription":"Open issue \"Authentication & Identity\" (#698)"},{"Id":"318548428","IsPullRequest":false,"CreatedAt":"2018-04-27T21:28:52","Actor":"shawnwildermuth","Number":"697","RawContent":null,"Title":"Looking for a use-case more like a replacement for large-scale JS","State":"closed","Body":"While the framework seems like an interesting replacement for client-side dev, I am more interested in a model where I build a wasm that I can talk to via JS. Imagine a Vue or Angular project where I can supply the data and data-access and business logic through a wasm and leave the binding and/or markup to JS.\r\n\r\nI'm interested in Blazor as a wasm generator, not as a bridge to JavaScript. It seems like the download of .NET Core assemblies and then using mono.js to execute them is complicating, not simplifying the process. I want to build simple wasm (even if large) that represent what is happening now with webpack/browserify on the JS side.","Url":"https://github.com/aspnet/Blazor/issues/697","RelatedDescription":"Closed issue \"Looking for a use-case more like a replacement for large-scale JS\" (#697)"},{"Id":"318283397","IsPullRequest":false,"CreatedAt":"2018-04-27T20:48:04","Actor":"babula38","Number":"693","RawContent":null,"Title":"Is there any plan for MVC like Html Helpers?","State":"closed","Body":"Is there any plan for MVC like Html Helpers? as those are really handy and a developer need not to worry about all the implementation of HTML. A developer like me who is more comfortable in c# can write code very much easily. \r\nIt is my view only.","Url":"https://github.com/aspnet/Blazor/issues/693","RelatedDescription":"Closed issue \"Is there any plan for MVC like Html Helpers?\" (#693)"},{"Id":"318212707","IsPullRequest":true,"CreatedAt":"2018-04-27T18:45:20","Actor":"SteveSandersonMS","Number":"691","RawContent":null,"Title":"OnAfterRender / OnAfterRenderAsync","State":"closed","Body":"Gives components notification when rendering has occurred. This makes it possible to perform additional initialization, such as activating third-party JS libraries that want to operate on the rendered DOM elements.\r\n\r\nI've chained this PR onto #685 because I wanted the E2E test to cover the combination of these two features, as it's the most interesting and important use case.","Url":"https://github.com/aspnet/Blazor/pull/691","RelatedDescription":"Closed or merged PR \"OnAfterRender / OnAfterRenderAsync\" (#691)"},{"Id":"317988519","IsPullRequest":true,"CreatedAt":"2018-04-27T16:41:22","Actor":"SteveSandersonMS","Number":"685","RawContent":null,"Title":"Support 'ref' syntax for capturing references to elements and components","State":"closed","Body":"First, apologies that this is such a massive PR. It involves every level of the system, including tooling, compilation, component APIs, rendering/diffing, and JS interop. I'm providing the following information in the hope that it will be useful when writing docs for these features.\r\n\r\nThis PR provides two related features:\r\n\r\n### Capturing references to elements\r\n\r\nExample:\r\n\r\n```\r\n    <input ref=\"username\" ... />\r\n\r\n    @functions {\r\n        ElementRef username;\r\n    }\r\n```\r\n\r\nAs far as .NET code is concerned, an `ElementRef` is an opaque handle. The *only* thing you can do with it is pass it through to JS code via JSON-marshalled interop. When you do so, the JS-side code receives an `HTMLElement` instance which it can use in normal DOM APIs.\r\n\r\nFor example, if you registered the following:\r\n\r\n```js\r\nBlazor.registerFunction('MyLib.FocusElement', function (element) {\r\n    element.focus();\r\n});\r\n```\r\n\r\n... then in .NET code you could also define an extension method:\r\n\r\n```csharp\r\nnamespace MyLib\r\n{\r\n    public static class MyLibElementRefExtensions\r\n    {\r\n        public static void Focus(this ElementRef elementRef)\r\n        {\r\n            RegisteredFunction.Invoke<object>(\"MyLib.FocusElement\", elementRef);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nNow you can focus inputs in any of your components:\r\n\r\n```\r\n    @using MyLib\r\n\r\n    <input ref=\"username\" />\r\n    <button onclick=\"@SetFocus\">Set focus</button>\r\n\r\n    @functions {\r\n        ElementRef username;\r\n\r\n        void SetFocus()\r\n        {\r\n            username.Focus();\r\n        }\r\n    }\r\n```\r\n\r\n*Important*: The `username` variable will only be populated after the component has rendered and its output includes the `<input>` element, because until then there is nothing to reference. If you try to pass an unpopulated `ElementRef` to JS code, then the JS code will receive `null`. Once we implement support for an \"after render\" lifecycle method, you'll be able to put code in it that lifecycle method that, for example, sets the initial focus on an element as soon as the component is first rendered.\r\n\r\n**Use case**\r\n\r\nThe intended use cases for this feature are:\r\n\r\n1. Integration with third-party UI libraries (such as Bootstrap) whose APIs sometimes require you to pass them references to elements for initialization\r\n2. Calling DOM APIs that represent \"commands\" such as `focus` or `play` (but *not* APIs that are for constructing content, such as setting text).\r\n\r\nIt is **strongly not recommended** to use this as a way of populating the DOM routinely in cases where you could instead use Blazor's normal declarative rendering. Declarative rendering is strongly preferred because it knows how to update automatically at the correct time with minimal diffs.\r\n\r\n### Capturing references to components\r\n\r\nSimilarly, you can use `ref` on child components:\r\n\r\n```\r\n    <MyLoginDialog ref=\"loginDialog\" ... />\r\n\r\n    @functions {\r\n        MyLoginDialog loginDialog;\r\n\r\n        void OnSomething()\r\n        {\r\n            loginDialog.Show();\r\n        }\r\n    }\r\n```\r\n\r\nAs you can see, in this case the value type is not `ElementRef`, but instead is the type of the component being referenced. Again, the `loginDialog` field will only be non-`null` once the component is rendered, because until then there is no child component to reference.\r\n\r\n*Note:* This is not a JS interop feature. It's not expected that you will pass instances of Blazor components to JS code, because the JS code would not be able to do anything meaningful with it. It's only expected that you'll use the references in .NET code.\r\n\r\n**Use case**\r\n\r\nThe intended use case is to allow parent components to issue commands to child components such as \"show\" or \"reset\".\r\n\r\nEven then, architecturally it's a compromise because it would be cleaner still for your child components to be stateless (that is, not acting on any state other than their parameters) and in that case it's not even theoretically possible for it to make sense to issue an \"action\" other than by changing their child's parameters, in which case you don't need `ref` at all.\r\n\r\nIt is **strongly not recommended** that you use `ref` as a way of mutating the state of child components. Instead, always use normal declarative parameters to pass data to child components. This will cause child components to re-render at the correct times automatically. We are moving towards changing how parameters on components are represented so that by default they are encapsulated and not possible to read/write from outside.\r\n\r\n### Notes for PR reviewers\r\n\r\n**Perf**\r\n\r\nI had to introduce a new `RenderTreeFrame` type to hold a delegate that assigns the reference. This is because we can't obtain the reference during the render phase; we can only obtain it during diffing because that's when children are instantiated.\r\n\r\nWith current versions of C#, this means it will cause one allocation per `ref` per render. Later versions of C# that cache noncapturing lambda delegate instances will only require one allocation per `ref` per component (not per render).\r\n\r\nThat is, except for when it's a capturing lambda (e.g., `<div ref=\"someLoopVariable.SomeReference\" />`. In this case there will always be more allocations, but I consider that enough of an edge case not to mind. Plus it's not like I have any reasonable alternative.\r\n\r\nOther than that, it should be pretty neutral on perf.\r\n\r\n**Issues**\r\n\r\n* The `ref` tag helper doesn't show any intellisense if you prefix its value with `@` (e.g., `<div ref=\"@myThing\" />`), even though it's fine without (e.g., `<div ref=\"myThing\" />`). I have not been able to track down why this difference exists. The source map data *looks* correct. Would appreciate any insight from @rynowak on this! It does work correctly in runtime builds with or without `@`.\r\n* The `ref` tag helper does show correct warning squigglies if you reference a nonexistent variable (e.g., `<div ref=\"somethingThatIsNotDefined\" />`). But it does *not* show squigglies if you reference something of the wrong type (e.g., `<div ref=\"someIntField\" />`). I know why, which is because in the generated code we can only associate the source token with either the assigned variable **or** the value we're assigning to it. In the case of a type mismatch, the error is associated with the value being assigned. I consider it more important to catch the \"nonexistent variable\" case. In both cases the runtime compiler output is correct and makes it easy to diagnose the error. I didn't find any trick to produce alternate design-time code that catches both error types using a single token.","Url":"https://github.com/aspnet/Blazor/pull/685","RelatedDescription":"Closed or merged PR \"Support 'ref' syntax for capturing references to elements and components\" (#685)"},{"Id":"318461915","IsPullRequest":false,"CreatedAt":"2018-04-27T16:35:06","Actor":"SergeySeleznyov","Number":"695","RawContent":null,"Title":"Decimal values are rounded to js-Number precision","State":"closed","Body":"Let's take the \"FetchData.cshtml\" example form the project template.\r\n\r\nModify the data type:\r\n\r\n```\r\npublic class WeatherForecast\r\n{\r\n    ... // origin properties (not changed)\r\n    public decimal DecimalProp { get; set; }\r\n    public string StringDecimalProp { get { return DecimalProp.ToString(); } }\r\n}\r\n\r\n```\r\n\r\nJSON that comes from the server to the client may look as follows:\r\n\r\n```\r\n[{\r\n\t...\r\n\t       DecimalProp:16808220559571622000\r\n\tStringDecimalProp:\"16808220559571621480.16240545\"\r\n},\r\n{\r\n\t...\r\n\t       DecimalProp:-54580.79494236794\r\n\tStringDecimalProp:\"-54580.794942367938243476284644\"\r\n}...]\r\n\r\n```\r\n\r\nThus, on the client side, WeatherForecast's \"DecimalProp\" property has a decimal type but the js-Number type's precision.\r\n\r\nThis behavior may be OK for the javascript processing, but in the case of Blazor, customers may expect passing server-side data and data-processing logic to the \"client side\" without JS-based side effects like losing precision. \r\n\r\nIs it going to be improved in the future?\r\nIs there any doc with Blazor's data-passing limitation?","Url":"https://github.com/aspnet/Blazor/issues/695","RelatedDescription":"Closed issue \"Decimal values are rounded to js-Number precision\" (#695)"},{"Id":"318467022","IsPullRequest":false,"CreatedAt":"2018-04-27T16:09:49","Actor":"danroth27","Number":"696","RawContent":null,"Title":"Change component parameter declaration programming model","State":"open","Body":"","Url":"https://github.com/aspnet/Blazor/issues/696","RelatedDescription":"Open issue \"Change component parameter declaration programming model\" (#696)"},{"Id":"318428840","IsPullRequest":true,"CreatedAt":"2018-04-27T14:44:00","Actor":"SteveSandersonMS","Number":"694","RawContent":null,"Title":"Fix ordering issue with nested logical element insertion","State":"closed","Body":"","Url":"https://github.com/aspnet/Blazor/pull/694","RelatedDescription":"Closed or merged PR \"Fix ordering issue with nested logical element insertion\" (#694)"},{"Id":"318242553","IsPullRequest":true,"CreatedAt":"2018-04-27T00:47:10","Actor":"danroth27","Number":"692","RawContent":null,"Title":"[WIP] Fixup project templates to handle project names with dashes","State":"open","Body":"This template update is a partial fix for when the project name has a dash in it. \r\n\r\nIt's  only a partial fix because it doesn't address sanitizing the namespace for the generated component classes. @rynowak Is this something you could help me out with?","Url":"https://github.com/aspnet/Blazor/pull/692","RelatedDescription":"Open PR \"[WIP] Fixup project templates to handle project names with dashes\" (#692)"},{"Id":"318141013","IsPullRequest":false,"CreatedAt":"2018-04-26T21:03:07","Actor":"alexfdezsauco","Number":"688","RawContent":null,"Title":"Expose getRegisteredFunctions from Blazor javascript module","State":"closed","Body":"Should be possible expose the getRegisteredFunctions from Blazor javascript module.\r\n\r\nThis could be useful in custom interop solutions like this one for promises:\r\n\r\nhttps://joonasw.net/view/csharp-await-and-js-promises-in-blazor\r\n\r\ndoesn't require 'host' the functions in the window object. Just use the same approach to register the function to be called.\r\n\r\nThe implementation could be this one:\r\n\r\n`let promise = Blazor.getRegisteredFunction(fnName)(data)`\r\n\r\ninstead this one:\r\n\r\n`let promise = window[fnName](data);`\r\n\r\nBWT, could Blazor include a solution like this one https://joonasw.net/view/csharp-await-and-js-promises-in-blazor to call promise (async/await).","Url":"https://github.com/aspnet/Blazor/issues/688","RelatedDescription":"Closed issue \"Expose getRegisteredFunctions from Blazor javascript module\" (#688)"},{"Id":"318173475","IsPullRequest":false,"CreatedAt":"2018-04-26T21:00:58","Actor":"grahamehorner","Number":"689","RawContent":null,"Title":"[Feature Request] Generate JavaScriptInterop using Roslyn","State":"closed","Body":"IMHO It would be a great if Blazor used Roslyn to dynamically create in memory implementation of JavaScriptInterop based of c# abstract classes, eg.\r\n\r\n`\r\nnamespace someJavascriptNamespace {\r\npublic abstract class someJavaScriptInterop { \r\npublic abstract bool someJavaScriptMethod(string stringParameter, bool boolParameter);\r\n...\r\n}\r\n}\r\n\r\n/// use roslyn to generate and compile the code that calls/invokes the javascript  \r\nTJavaScriptInteropDefinition GenerateImplementation<TJavaScriptInteropDefinition>( );\r\n`\r\n/// calling the generated implementation \r\nvar result = GenerateImplementation<TJavaScriptInteropDefinition>( )\r\n.someJavaScriptMethod(\"\",true);\r\n\r\n\r\n\r\n","Url":"https://github.com/aspnet/Blazor/issues/689","RelatedDescription":"Closed issue \"[Feature Request] Generate JavaScriptInterop using Roslyn\" (#689)"},{"Id":"318194771","IsPullRequest":false,"CreatedAt":"2018-04-26T21:00:00","Actor":"danroth27","Number":"690","RawContent":null,"Title":"Bootstrap 4 component library","State":"open","Body":"","Url":"https://github.com/aspnet/Blazor/issues/690","RelatedDescription":"Open issue \"Bootstrap 4 component library\" (#690)"},{"Id":"318028339","IsPullRequest":false,"CreatedAt":"2018-04-26T13:45:17","Actor":"daveabrock","Number":"687","RawContent":null,"Title":"Getting started?","State":"closed","Body":"Hey all! I am loving this project and would love to help! Of course, I read through the [contributing guide](https://github.com/aspnet/Blazor/blob/dev/CONTRIBUTING.md) so would be happy to look at any issues or make suggestions, but is there anything that newbies to Blazor could review? If not, I can just play with it and help where I can!","Url":"https://github.com/aspnet/Blazor/issues/687","RelatedDescription":"Closed issue \"Getting started?\" (#687)"},{"Id":"317946390","IsPullRequest":true,"CreatedAt":"2018-04-26T12:30:07","Actor":"Daddoon","Number":"684","RawContent":null,"Title":"Added OnRemove and OnRemoveAsync method on BlazorComponent","State":"closed","Body":"Added **OnRemove** and **OnRemoveAsync** method on **BlazorComponent**.\r\n\r\nLike the opposite of OnInit and OnInitAsync, theses methods are overridable, and will be called once when disposing in ComponentState.DisposeInBatch method.\r\n\r\nThis way we can leverage some specific event based on type or data or whatever.\r\n\r\nMy actual needs were more for caching some component somewhere, like some \"singleton\" component, but being able to track them if any dispose occur, in order to free their reference/existence somewhere in my app for consistency and security.\r\n\r\nI searched for an existing unit test for this case, something like OnInit, but i didn't find it.\r\n\r\nTested on the template project, with a nested component in a foreach loop, then leaving the page, checking that OnRemove was called.","Url":"https://github.com/aspnet/Blazor/pull/684","RelatedDescription":"Closed or merged PR \"Added OnRemove and OnRemoveAsync method on BlazorComponent\" (#684)"},{"Id":"317990596","IsPullRequest":false,"CreatedAt":"2018-04-26T11:41:12","Actor":"ivryakhov","Number":"686","RawContent":null,"Title":"Failed to set a RenderFragment property of a child component","State":"closed","Body":"Hi,\r\n\r\nthere is an error in browser's console when I try to pass some text to a child component via a RenderFragment property as it is described in a doc. The page is not rendered as a result.\r\n\r\nI'm going throw the Blazor's tutorial from https://blazor.net/docs/components/index.html\r\nAnd I have a fault trying to execute examples from the **Child content** section.\r\n\r\nI created the both  _ParentComponent.cshtml_ and _ChildComponent.cshtml_ with  the same content as described in the doc. \r\n\r\n_ParentComponent.cshtml:_\r\n```\r\n@page \"/ParentComponent\"\r\n\r\n<h1>Parent-child example</h1>\r\n\r\n<ChildComponent Title=\"Panel Title from Parent\">\r\n    Panel content of the child component is supplied by the parent component.\r\n</ChildComponent>\r\n```\r\n\r\n_ChildComponent.cshtml:_\r\n```\r\n<div class=\"panel panel-success\">\r\n  <div class=\"panel-heading\">@Title</div>\r\n  <div class=\"panel-body\">@PanelContent</div>\r\n</div>\r\n\r\n@functions {\r\n    public string Title { get; set; }\r\n    public RenderFragment PanelContent { get; set; }\r\n}\r\n```\r\n\r\n\r\nAs a result, there are a lot of errors in a browser's console after trying to render the /ParentComponent page:\r\n\r\n> Uncaught (in promise) Error: System.InvalidOperationException: Object of type 'WebApplication1.Pages.ChildComponent' does not have a property matching the name 'ChildContent'.\r\n>   at Microsoft.AspNetCore.Blazor.Components.ParameterCollectionExtensions.GetPropertyInfo (System.Type targetType, System.String propertyName) <0x1a16c48 + 0x00058> in <8a8022566b074cca8a70e10050945cdd>:0 \r\n\r\n<details> \r\n  <summary>The full trace: </summary>\r\n\r\n> Uncaught (in promise) Error: System.InvalidOperationException: Object of type 'WebApplication1.Pages.ChildComponent' does not have a property matching the name 'ChildContent'.\r\n>   at Microsoft.AspNetCore.Blazor.Components.ParameterCollectionExtensions.GetPropertyInfo (System.Type targetType, System.String propertyName) <0x1a16c48 + 0x00058> in <8a8022566b074cca8a70e10050945cdd>:0 \r\n>   at Microsoft.AspNetCore.Blazor.Components.ParameterCollectionExtensions.AssignToProperty (System.Object target, Microsoft.AspNetCore.Blazor.Components.Parameter parameter) <0x1a16a70 + 0x00022> in <8a8022566b074cca8a70e10050945cdd>:0 \r\n>   at Microsoft.AspNetCore.Blazor.Components.ParameterCollectionExtensions.AssignToProperties (Microsoft.AspNetCore.Blazor.Components.ParameterCollection parameterCollection, System.Object target) <0x19cc3c8 + 0x00060> in <8a8022566b074cca8a70e10050945cdd>:0 \r\n>   at Microsoft.AspNetCore.Blazor.Components.BlazorComponent.SetParameters (Microsoft.AspNetCore.Blazor.Components.ParameterCollection parameters) <0x19cc0a8 + 0x00018> in <8a8022566b074cca8a70e10050945cdd>:0 \r\n>   at Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder.InitializeNewComponentFrame (Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder+DiffContext& diffContext, System.Int32 frameIndex) <0x19dd138 + 0x0007a> in <8a8022566b074cca8a70e10050945cdd>:0 \r\n>   at Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder.InitializeNewSubtree (Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder+DiffContext& diffContext, System.Int32 frameIndex) <0x19dcfe0 + 0x00074> in <8a8022566b074cca8a70e10050945cdd>:0 \r\n>   at Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder.InsertNewFrame (Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder+DiffContext& diffContext, System.Int32 newFrameIndex) <0x19dca70 + 0x000b4> in <8a8022566b074cca8a70e10050945cdd>:0 \r\n>   at Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder.AppendDiffEntriesForRange (Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder+DiffContext& diffContext, System.Int32 oldStartIndex, System.Int32 oldEndIndexExcl, System.Int32 newStartIndex, System.Int32 newEndIndexExcl) <0x19dc400 + 0x0025e> in <8a8022566b074cca8a70e10050945cdd>:0 \r\n>   at Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder.ComputeDiff (Microsoft.AspNetCore.Blazor.Rendering.Renderer renderer, Microsoft.AspNetCore.Blazor.Rendering.RenderBatchBuilder batchBuilder, System.Int32 componentId, Microsoft.AspNetCore.Blazor.RenderTree.ArrayRange`1[T] oldTree, Microsoft.AspNetCore.Blazor.RenderTree.ArrayRange`1[T] newTree) <0x19d5b80 + 0x000a2> in <8a8022566b074cca8a70e10050945cdd>:0 \r\n>   at Microsoft.AspNetCore.Blazor.Rendering.ComponentState.RenderIntoBatch (Microsoft.AspNetCore.Blazor.Rendering.RenderBatchBuilder batchBuilder, Microsoft.AspNetCore.Blazor.RenderFragment renderFragment) <0x19d2dc0 + 0x000b4> in <8a8022566b074cca8a70e10050945cdd>:0 \r\n>   at Microsoft.AspNetCore.Blazor.Rendering.Renderer.RenderInExistingBatch (Microsoft.AspNetCore.Blazor.Rendering.RenderQueueEntry renderQueueEntry) <0x19d2968 + 0x00040> in <8a8022566b074cca8a70e10050945cdd>:0 \r\n>   at Microsoft.AspNetCore.Blazor.Rendering.Renderer.ProcessRenderQueue () <0x19cdb80 + 0x00048> in <8a8022566b074cca8a70e10050945cdd>:0 \r\n>   at Microsoft.AspNetCore.Blazor.Rendering.Renderer.AddToRenderQueue (System.Int32 componentId, Microsoft.AspNetCore.Blazor.RenderFragment renderFragment) <0x19ccbf8 + 0x00068> in <8a8022566b074cca8a70e10050945cdd>:0 \r\n>   at Microsoft.AspNetCore.Blazor.Components.RenderHandle.Render (Microsoft.AspNetCore.Blazor.RenderFragment renderFragment) <0x19cc8e0 + 0x00036> in <8a8022566b074cca8a70e10050945cdd>:0 \r\n>   at Microsoft.AspNetCore.Blazor.Components.BlazorComponent.StateHasChanged () <0x19cc7e8 + 0x00048> in <8a8022566b074cca8a70e10050945cdd>:0 \r\n>   at Microsoft.AspNetCore.Blazor.Components.BlazorComponent.SetParameters (Microsoft.AspNetCore.Blazor.Components.ParameterCollection parameters) <0x19cc0a8 + 0x000b2> in <8a8022566b074cca8a70e10050945cdd>:0 \r\n>   at Microsoft.AspNetCore.Blazor.Browser.Rendering.BrowserRenderer.AddComponent (System.Type componentType, System.String domElementSelector) <0x1995690 + 0x0005e> in <08ceae4b872f4f8d8ccefc410a9a8971>:0 \r\n>   at Microsoft.AspNetCore.Blazor.Browser.Rendering.BrowserRenderer.AddComponent[TComponent] (System.String domElementSelector) <0x1995380 + 0x00020> in <08ceae4b872f4f8d8ccefc410a9a8971>:0 \r\n>   at WebApplication1.Program.Main (System.String[] args) <0x184fbc0 + 0x00036> in <98a6978f1ec940a2bec6710e05bf3770>:0 \r\n>   at Microsoft.AspNetCore.Blazor.Components.ParameterCollectionExtensions.GetPropertyInfo (System.Type targetType, System.String propertyName) <0x1a16c48 + 0x00058> in <8a8022566b074cca8a70e10050945cdd>:0 \r\n>   at Microsoft.AspNetCore.Blazor.Components.ParameterCollectionExtensions.AssignToProperty (System.Object target, Microsoft.AspNetCore.Blazor.Components.Parameter parameter) <0x1a16a70 + 0x00022> in <8a8022566b074cca8a70e10050945cdd>:0 \r\n>   at Microsoft.AspNetCore.Blazor.Components.ParameterCollectionExtensions.AssignToProperties (Microsoft.AspNetCore.Blazor.Components.ParameterCollection parameterCollection, System.Object target) <0x19cc3c8 + 0x00060> in <8a8022566b074cca8a70e10050945cdd>:0 \r\n>   at Microsoft.AspNetCore.Blazor.Components.BlazorComponent.SetParameters (Microsoft.AspNetCore.Blazor.Components.ParameterCollection parameters) <0x19cc0a8 + 0x00018> in <8a8022566b074cca8a70e10050945cdd>:0 \r\n>   at Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder.InitializeNewComponentFrame (Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder+DiffContext& diffContext, System.Int32 frameIndex) <0x19dd138 + 0x0007a> in <8a8022566b074cca8a70e10050945cdd>:0 \r\n>   at Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder.InitializeNewSubtree (Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder+DiffContext& diffContext, System.Int32 frameIndex) <0x19dcfe0 + 0x00074> in <8a8022566b074cca8a70e10050945cdd>:0 \r\n>   at Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder.InsertNewFrame (Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder+DiffContext& diffContext, System.Int32 newFrameIndex) <0x19dca70 + 0x000b4> in <8a8022566b074cca8a70e10050945cdd>:0 \r\n>   at Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder.AppendDiffEntriesForRange (Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder+DiffContext& diffContext, System.Int32 oldStartIndex, System.Int32 oldEndIndexExcl, System.Int32 newStartIndex, System.Int32 newEndIndexExcl) <0x19dc400 + 0x0025e> in <8a8022566b074cca8a70e10050945cdd>:0 \r\n>   at Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeDiffBuilder.ComputeDiff (Microsoft.AspNetCore.Blazor.Rendering.Renderer renderer, Microsoft.AspNetCore.Blazor.Rendering.RenderBatchBuilder batchBuilder, System.Int32 componentId, Microsoft.AspNetCore.Blazor.RenderTree.ArrayRange`1[T] oldTree, Microsoft.AspNetCore.Blazor.RenderTree.ArrayRange`1[T] newTree) <0x19d5b80 + 0x000a2> in <8a8022566b074cca8a70e10050945cdd>:0 \r\n>   at Microsoft.AspNetCore.Blazor.Rendering.ComponentState.RenderIntoBatch (Microsoft.AspNetCore.Blazor.Rendering.RenderBatchBuilder batchBuilder, Microsoft.AspNetCore.Blazor.RenderFragment renderFragment) <0x19d2dc0 + 0x000b4> in <8a8022566b074cca8a70e10050945cdd>:0 \r\n>   at Microsoft.AspNetCore.Blazor.Rendering.Renderer.RenderInExistingBatch (Microsoft.AspNetCore.Blazor.Rendering.RenderQueueEntry renderQueueEntry) <0x19d2968 + 0x00040> in <8a8022566b074cca8a70e10050945cdd>:0 \r\n>   at Microsoft.AspNetCore.Blazor.Rendering.Renderer.ProcessRenderQueue () <0x19cdb80 + 0x00048> in <8a8022566b074cca8a70e10050945cdd>:0 \r\n>   at Microsoft.AspNetCore.Blazor.Rendering.Renderer.AddToRenderQueue (System.Int32 componentId, Microsoft.AspNetCore.Blazor.RenderFragment renderFragment) <0x19ccbf8 + 0x00068> in <8a8022566b074cca8a70e10050945cdd>:0 \r\n>   at Microsoft.AspNetCore.Blazor.Components.RenderHandle.Render (Microsoft.AspNetCore.Blazor.RenderFragment renderFragment) <0x19cc8e0 + 0x00036> in <8a8022566b074cca8a70e10050945cdd>:0 \r\n>   at Microsoft.AspNetCore.Blazor.Components.BlazorComponent.StateHasChanged () <0x19cc7e8 + 0x00048> in <8a8022566b074cca8a70e10050945cdd>:0 \r\n>   at Microsoft.AspNetCore.Blazor.Components.BlazorComponent.SetParameters (Microsoft.AspNetCore.Blazor.Components.ParameterCollection parameters) <0x19cc0a8 + 0x000b2> in <8a8022566b074cca8a70e10050945cdd>:0 \r\n>   at Microsoft.AspNetCore.Blazor.Browser.Rendering.BrowserRenderer.AddComponent (System.Type componentType, System.String domElementSelector) <0x1995690 + 0x0005e> in <08ceae4b872f4f8d8ccefc410a9a8971>:0 \r\n>   at Microsoft.AspNetCore.Blazor.Browser.Rendering.BrowserRenderer.AddComponent[TComponent] (System.String domElementSelector) <0x1995380 + 0x00020> in <08ceae4b872f4f8d8ccefc410a9a8971>:0 \r\n>   at WebApplication1.Program.Main (System.String[] args) <0x184fbc0 + 0x00036> in <98a6978f1ec940a2bec6710e05bf3770>:0 \r\n>     at Object.callMethod (MonoPlatform.ts:70)\r\n>     at Object.callEntryPoint (MonoPlatform.ts:47)\r\n>     at Boot.ts:38\r\n>     at step (UriHelper.ts:89)\r\n>     at Object.next (UriHelper.ts:89)\r\n>     at fulfilled (UriHelper.ts:89)\r\n\r\n</details>\r\n<br>\r\nI'm not sure if this is a bug or documentation is outdated. Though, I didn't find any spec if is it allowed to pass RenderFragment to a child component.\r\n\r\n\r\nMy setup:\r\n- Windows 8\r\n- Visual Studio 2017 15.7 preview\r\n- .NET Core 2.1 Preview 2 SDK.\r\n- Blazor 0.2.0\r\n- Chrome browser  65.0.3325.181\r\n\r\n\r\n\r\n","Url":"https://github.com/aspnet/Blazor/issues/686","RelatedDescription":"Closed issue \"Failed to set a RenderFragment property of a child component\" (#686)"},{"Id":"317831730","IsPullRequest":true,"CreatedAt":"2018-04-25T23:53:23","Actor":"marcusbooyah","Number":"683","RawContent":null,"Title":"Pass list of references via temp file #682","State":"open","Body":"…ild commands","Url":"https://github.com/aspnet/Blazor/pull/683","RelatedDescription":"Open PR \"Pass list of references via temp file #682\" (#683)"},{"Id":"317807524","IsPullRequest":false,"CreatedAt":"2018-04-25T21:53:37","Actor":"marcusbooyah","Number":"682","RawContent":null,"Title":"Unable to build Blazor: Input too long","State":"open","Body":"This is similar to #554 \r\n\r\nMy project has a long list of references, not embedded resources and I'm getting the same error as #554.\r\n\r\nI think the fix is the same as #561 but for references. ","Url":"https://github.com/aspnet/Blazor/issues/682","RelatedDescription":"Open issue \"Unable to build Blazor: Input too long\" (#682)"},{"Id":"317696079","IsPullRequest":false,"CreatedAt":"2018-04-25T16:32:14","Actor":"copernicus365","Number":"681","RawContent":null,"Title":"Use Blazor just for client side C# code in place of JavaScript (no UI)","State":"closed","Body":"I don't know if this is already possible or not, but could Blazor be used just for getting C# working as client-side code in place of JavaScript, while keeping the regular html / css rendering? \r\n\r\nIf I could preempt one comment: No, I'm not trying to replace every day little client-side javascript, but for more significant use cases. \r\n\r\nHere's one example: See this [blazedown](https://www.telerik.com/blogs/blazedown-experiment-with-markdown-and-blazor) experiment. Like him, I happen to be using MarkDig on the backend to render markdown, while for the ongoing preview while client types, I make calls to the backend every half second etc to render an html preview panel of the document (yes, I could use, as I did originally, one of the javascript based MD renderers, but without going into details, this way gives me consistent *and* better results to what I'm doing on the backend for rendering). It would be terrific if MarkDig could be compiled and used client-side with Blazor, using whatever it does to get .NET working with webassembly on the client, without replacing the UI. So I'm envisioning a way to probably use javascript to call functions in the webassembly / blazor .NET code. Or is that just not possible?\r\n\r\nThanks y'all ","Url":"https://github.com/aspnet/Blazor/issues/681","RelatedDescription":"Closed issue \"Use Blazor just for client side C# code in place of JavaScript (no UI)\" (#681)"},{"Id":"317630458","IsPullRequest":false,"CreatedAt":"2018-04-25T14:44:04","Actor":"MangeshPersonal","Number":"680","RawContent":null,"Title":"the name @onclick  does not exist in current context","State":"closed","Body":"I am using the button but i am getting error as @onclick does not exist in current context \r\n\r\nplease help","Url":"https://github.com/aspnet/Blazor/issues/680","RelatedDescription":"Closed issue \"the name @onclick  does not exist in current context\" (#680)"}],"ResultType":"GitHubIssue"}},"RunOn":"2018-04-30T05:30:02.7774836Z","RunDurationInMilliseconds":1492}