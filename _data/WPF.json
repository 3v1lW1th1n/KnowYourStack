{"Data":{"GitHub":{"Issues":[{"Id":"598481736","IsPullRequest":true,"CreatedAt":"2020-04-12T13:28:20","Actor":"dotnet-maestro[bot]","Number":"2875","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Subscription**: 46a15fe4-6c2c-480d-9cdd-08d71053b252\r\n- **Build**: 20200412.2\r\n- **Date Produced**: 4/12/2020 1:01 PM\r\n- **Commit**: 26041c2c26af32237afa4cdf75884f900fce80e0\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng**: from 5.0.0-preview.4.20211.2 to 5.0.0-preview.4.20212.2\r\n\r\n[marker]: <> (End:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2875","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#2875)"},{"Id":"598380662","IsPullRequest":false,"CreatedAt":"2020-04-12T00:35:24","Actor":"KirillOsenkov","Number":"2874","RawContent":null,"Title":"Allow setting padding on DataGrid cells","State":"open","Body":"WPF is amazing but there is still a number of scenarios where it feels unfinished. \r\n\r\nPlease make it very easy to add padding to DataGrid cells. It is possible to work around but it's a bit cumbersome.\r\n\r\nExamples:\r\nhttps://stackoverflow.com/questions/5246745/set-a-padding-on-datagridcells-in-wpf\r\n\r\nI suppose it could be a property like DefaultCellPadding of type Thickness on DataGrid itself, and a matching property on each column, which would override the DataGrid one.","Url":"https://github.com/dotnet/wpf/issues/2874","RelatedDescription":"Open issue \"Allow setting padding on DataGrid cells\" (#2874)"},{"Id":"598264019","IsPullRequest":true,"CreatedAt":"2020-04-11T13:50:03","Actor":"dotnet-maestro[bot]","Number":"2873","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Subscription**: 46a15fe4-6c2c-480d-9cdd-08d71053b252\r\n- **Build**: 20200411.2\r\n- **Date Produced**: 4/11/2020 1:04 PM\r\n- **Commit**: 3cda01fe9a9b36c42972f2deeddbe7a51aa2e015\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng**: from 5.0.0-preview.4.20210.2 to 5.0.0-preview.4.20211.2\r\n\r\n[marker]: <> (End:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2873","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#2873)"},{"Id":"596879586","IsPullRequest":true,"CreatedAt":"2020-04-11T00:40:33","Actor":"dotnet-maestro[bot]","Number":"2859","RawContent":null,"Title":"[master] Update dependencies from dotnet/arcade","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:3a1d3bb6-c64d-406d-e8f4-08d648cf64cb)\r\n## From https://github.com/dotnet/arcade\r\n- **Subscription**: 3a1d3bb6-c64d-406d-e8f4-08d648cf64cb\r\n- **Build**: 20200401.2\r\n- **Date Produced**: 4/1/2020 4:57 PM\r\n- **Commit**: bce0a98620c1c5a110b2bba9912f3d5929069c6b\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.ApiCompat**: from 5.0.0-beta.20162.3 to 5.0.0-beta.20201.2\r\n  - **Microsoft.DotNet.Arcade.Sdk**: from 5.0.0-beta.20162.3 to 5.0.0-beta.20201.2\r\n  - **Microsoft.DotNet.CodeAnalysis**: from 5.0.0-beta.20162.3 to 5.0.0-beta.20201.2\r\n  - **Microsoft.DotNet.GenAPI**: from 5.0.0-beta.20162.3 to 5.0.0-beta.20201.2\r\n  - **Microsoft.DotNet.Helix.Sdk**: from 5.0.0-beta.20162.3 to 5.0.0-beta.20201.2\r\n\r\n[marker]: <> (End:3a1d3bb6-c64d-406d-e8f4-08d648cf64cb)\r\n\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2859","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/arcade\" (#2859)"},{"Id":"598135530","IsPullRequest":true,"CreatedAt":"2020-04-11T00:22:03","Actor":"vatsan-madhavan","Number":"2872","RawContent":null,"Title":"Update ApiCompat baselines against enhanced MembersMustExist messages","State":"closed","Body":"https://github.com/dotnet/arcade/pull/4995 enhanced checks for MembersMustExist and InterfacesShouldHaveSameMembers. \r\n\r\nUpdate baselines compatible with this change - Fixes #2860. ","Url":"https://github.com/dotnet/wpf/pull/2872","RelatedDescription":"Closed or merged PR \"Update ApiCompat baselines against enhanced MembersMustExist messages\" (#2872)"},{"Id":"596899492","IsPullRequest":false,"CreatedAt":"2020-04-11T00:22:03","Actor":"vatsan-madhavan","Number":"2860","RawContent":null,"Title":"Arcade ingestion is blocked due to ApiCompat failures","State":"closed","Body":"Updates from https://github.com/dotnet/arcade is blocked due to ApiCompat failures. \r\n\r\nI tried fixing this as part of #2857 but this turned out to be extensive - so opening an issue instead. Initially the build failures seem to suggest a very small problem (only a handful a failures), but after fixing problems reported by each reference-assembly, ApiCompat complains about the next one and so on. \r\n\r\nIt looks like every baselined `MembersMustExist` signature needs a fixup (at the minimum), and there are about 75 of them, I think. \r\n\r\nThis blocks updates from Arcade, and it will likely block Preview 4 branch-snap (or P4 builds). Someone needs to address this quickly. \r\n\r\nAlso see: \r\n- https://github.com/dotnet/wpf/pull/2859\r\n- https://dev.azure.com/dnceng/public/_build/results?buildId=593715&view=results\r\n- https://github.com/dotnet/wpf/pull/2826#issuecomment-606933010\r\n\r\n/cc @fabiant3, @ryalanms, @SamBent \r\n/cc @dotnet/wpf-developers ","Url":"https://github.com/dotnet/wpf/issues/2860","RelatedDescription":"Closed issue \"Arcade ingestion is blocked due to ApiCompat failures\" (#2860)"},{"Id":"598097847","IsPullRequest":true,"CreatedAt":"2020-04-10T21:14:36","Actor":"vatsan-madhavan","Number":"2871","RawContent":null,"Title":"SpellCheck incorrectly detects common abbreviations like \"e.g.\" as misspellings","State":"open","Body":"WPF's spell-checker on Win8+ ignores punctuations like `.` (period) at the end of words like `etc.` This results in well-formed words like `etc.`, `Mr.`, `Mrs.` being marked as spelling-errors.\r\n\r\nFurther, it is impossible to _correct_ these words in WPF.\r\n\r\nBecause of the way word-breaking is performed by `MS.Data.Text.WordsSegmenter` under the hood, these punctuations are always dropped during word-breaking. The older spell-checker (NaturalLanguage6.dll) used on Win7 does not have this defect.\r\n\r\n`MS.Data.Text.WordsSegmenter` has declined to 'fix'/'modify this behavior, so we are adding a workaround in WPF.\r\n\r\nThis change introduces a wrapper on top of the word-breaker and recalculates the tokens, taking into account dropped text that occurs immediately after a token that is likely to fail spell-checking.\r\n\r\n**Note:** See #2753 for the main discussion ","Url":"https://github.com/dotnet/wpf/pull/2871","RelatedDescription":"Open PR \"SpellCheck incorrectly detects common abbreviations like \"e.g.\" as misspellings\" (#2871)"},{"Id":"597271402","IsPullRequest":true,"CreatedAt":"2020-04-10T14:10:17","Actor":"dotnet-maestro[bot]","Number":"2864","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Subscription**: 46a15fe4-6c2c-480d-9cdd-08d71053b252\r\n- **Build**: 20200410.2\r\n- **Date Produced**: 4/10/2020 1:04 PM\r\n- **Commit**: 6904f87ebf8c9d26755bc0cacdd36ec745127f0a\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng**: from 5.0.0-preview.4.20208.8 to 5.0.0-preview.4.20210.2\r\n\r\n[marker]: <> (End:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2864","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#2864)"},{"Id":"597637290","IsPullRequest":false,"CreatedAt":"2020-04-10T01:07:09","Actor":"vatsan-madhavan","Number":"2870","RawContent":null,"Title":"Unpin privatized C++ toolsets and ship using real-signed shipping tools","State":"open","Body":"https://github.com/dotnet/wpf/pull/2857 introduced use of privatized C++/CLI toolsets. This is a temporary fix and should be rolled back in favor of production tools. \r\n\r\n//build and RC/RTM products should not ship using these tools - they should be changed to production tools obtained from ambient tools coming from build pipeline machines. \r\n\r\nThis would become possible as soon as Dev16.6p3 ships. \r\n\r\n**This should be treated as a release blocker for broad releases like //build, RC etc ** \r\n\r\n/cc @dotnet/wpf-developers ","Url":"https://github.com/dotnet/wpf/issues/2870","RelatedDescription":"Open issue \"Unpin privatized C++ toolsets and ship using real-signed shipping tools\" (#2870)"},{"Id":"597618312","IsPullRequest":true,"CreatedAt":"2020-04-09T23:54:42","Actor":"wli3","Number":"2869","RawContent":null,"Title":"WIP Adjust properties to allow muti-target","State":"open","Body":"without special Sdk=\"Microsoft.NET.Sdk.WindowsDesktop\"\r\n\r\nThe project could look like\r\n\r\n```xml\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <OutputType>WinExe</OutputType>\r\n    <TargetFramework>net5.0</TargetFramework>\r\n    <UseWPF>true</UseWPF>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```","Url":"https://github.com/dotnet/wpf/pull/2869","RelatedDescription":"Open PR \"WIP Adjust properties to allow muti-target\" (#2869)"},{"Id":"597561942","IsPullRequest":false,"CreatedAt":"2020-04-09T21:25:06","Actor":"ReeJK","Number":"2868","RawContent":null,"Title":"Hidden cursor causes freezes","State":"open","Body":"* .NET Core Version: Any\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Yes\r\n\r\n **Problem description:**\r\nWhen the cursor is hidden (`Cursor = Cursors.None`) and a application has a large heap, a lot mouse moves causes it to freeze.\r\n \r\n **Actual behavior:**\r\n* `Cursors.None._cursorHandle` is null ([load code](https://github.com/dotnet/wpf/blob/ac9d1b7a6b0ee7c44fd2875a1174b820b3940619/src/Microsoft.DotNet.Wpf/src/PresentationCore/System/Windows/Input/Cursor.cs#L326));\r\n* `Cursors.None.Handle` always creates a new handle ([Cursor.Handle](https://github.com/dotnet/wpf/blob/ac9d1b7a6b0ee7c44fd2875a1174b820b3940619/src/Microsoft.DotNet.Wpf/src/PresentationCore/System/Windows/Input/Cursor.cs#L163), [GetInvalidCursor](https://github.com/dotnet/wpf/blob/ac9d1b7a6b0ee7c44fd2875a1174b820b3940619/src/Microsoft.DotNet.Wpf/src/Shared/MS/Win32/NativeMethodsOther.cs#L321));\r\n* `CursorSafeHandle` is counted by `HandleCollector` ([here](https://github.com/dotnet/wpf/blob/ac9d1b7a6b0ee7c44fd2875a1174b820b3940619/src/Microsoft.DotNet.Wpf/src/Shared/MS/Win32/NativeMethodsOther.cs#L238));\r\n* When more than [500](https://github.com/dotnet/wpf/blob/ac9d1b7a6b0ee7c44fd2875a1174b820b3940619/src/Microsoft.DotNet.Wpf/src/Shared/MS/Win32/NativeMethodsCLR.cs#L6340) `CursorSafeHandle` are created, `HandleCollector` calls `GC.Collect()` ([here](https://github.com/dotnet/wpf/blob/8c7ab1592b6c70e732106aeabf58f215d4b71c22/src/Microsoft.DotNet.Wpf/src/Shared/MS/Win32/HandleCollector.cs#L121));\r\n* Garbage Collection freezes all threads.\r\n \r\n **Expected behavior:**\r\nCursors.None hides cursor and not causes GC.Collect\r\n \r\nCode to reproduce: https://gist.github.com/ReeJK/a8a0e3b5569741b24311d23fe071452b","Url":"https://github.com/dotnet/wpf/issues/2868","RelatedDescription":"Open issue \"Hidden cursor causes freezes\" (#2868)"},{"Id":"597509901","IsPullRequest":true,"CreatedAt":"2020-04-09T21:18:11","Actor":"vatsan-madhavan","Number":"2867","RawContent":null,"Title":"Update roadmap and contrib guidelines","State":"closed","Body":"- A few updates to roadmap to fixup open-sourcing status\r\n- Partial updates to contrib guidelines \r\n  - Addition of wpf.vsconfig to specify individual workloads. ","Url":"https://github.com/dotnet/wpf/pull/2867","RelatedDescription":"Closed or merged PR \"Update roadmap and contrib guidelines\" (#2867)"},{"Id":"597497556","IsPullRequest":false,"CreatedAt":"2020-04-09T19:17:08","Actor":"Const-me","Number":"2866","RawContent":null,"Title":"Requesting help with building the repo","State":"open","Body":"**Actual behavior:**\r\n\r\nbuild.cmd fails, prints pages of messages like this: `C:\\Temp\\wpf\\src\\Microsoft.DotNet.Wpf\\src\\DirectWriteForwarder\\DirectWriteForwarder.vcxproj(28,5): error MSB4019: The im\r\nported project \"C:\\Temp\\wpf\\.tools\\msbuild\\16.5.0-alpha\\tools\\MSBuild\\Microsoft\\VC\\v160\\Microsoft.Cpp.Default.props\" wa\r\ns not found. Confirm that the expression in the Import declaration \"C:\\Temp\\wpf\\.tools\\msbuild\\16.5.0-alpha\\tools\\MSBui\r\nld\\Microsoft\\VC\\v160\\\\Microsoft.Cpp.Default.props\" is correct, and that the file exists on disk.`\r\n\r\nI've checked and indeed, there's no VC directory in that location. Your build.cmd has downloaded the msbuild with the following subfolders in MSBuild\\Microsoft:\r\n\r\nMicrosoft.NET.Build.Extensions\r\nNuGet\r\nVisualStudio\r\n\r\nNone of them contains `Microsoft.Cpp.Default.props` file.\r\n \r\n **Expected behavior:**\r\n\r\nBuilt.cmd should work.\r\n\r\n **Minimal repro:**\r\n\r\nNot available. Checkout the repository.","Url":"https://github.com/dotnet/wpf/issues/2866","RelatedDescription":"Open issue \"Requesting help with building the repo\" (#2866)"},{"Id":"597159177","IsPullRequest":true,"CreatedAt":"2020-04-09T10:01:09","Actor":"dotnet-maestro[bot]","Number":"2863","RawContent":null,"Title":"[master] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n## From https://github.com/dotnet/winforms\r\n- **Subscription**: 256c8be3-de58-46f5-d219-08d6ba11f126\r\n- **Build**: 20200409.1\r\n- **Date Produced**: 4/9/2020 9:31 AM\r\n- **Commit**: b62e3ae3fef254789cf6ede0a0d5e0543ce392cc\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms**: from 5.0.0-preview.4.20208.1 to 5.0.0-preview.4.20209.1\r\n\r\n[marker]: <> (End:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2863","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/winforms\" (#2863)"},{"Id":"596604171","IsPullRequest":false,"CreatedAt":"2020-04-09T07:47:01","Actor":"mrakgr","Number":"2856","RawContent":null,"Title":"How to get the dispatcher scheduler?","State":"closed","Body":"I am trying to use WPF with reactive extensions and am having difficulty figuring out how to do this on .NET Core 3.1. Everything on SO pertaining to this question is out of date.\r\n\r\n[Also, see this question.](https://stackoverflow.com/questions/61097363/why-does-observable-range-freeze-when-run-on-the-gui-thread)","Url":"https://github.com/dotnet/wpf/issues/2856","RelatedDescription":"Closed issue \"How to get the dispatcher scheduler?\" (#2856)"},{"Id":"596976356","IsPullRequest":true,"CreatedAt":"2020-04-09T02:42:24","Actor":"dotnet-maestro[bot]","Number":"2862","RawContent":null,"Title":"[master] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n## From https://github.com/dotnet/winforms\r\n- **Subscription**: 256c8be3-de58-46f5-d219-08d6ba11f126\r\n- **Build**: 20200408.1\r\n- **Date Produced**: 4/9/2020 2:18 AM\r\n- **Commit**: e1cfc9632a090943acab21790f8d674cb833aa6c\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms**: from 5.0.0-preview.4.20207.2 to 5.0.0-preview.4.20208.1\r\n\r\n[marker]: <> (End:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2862","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/winforms\" (#2862)"},{"Id":"596928120","IsPullRequest":true,"CreatedAt":"2020-04-09T00:01:42","Actor":"dotnet-maestro[bot]","Number":"2861","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Subscription**: 46a15fe4-6c2c-480d-9cdd-08d71053b252\r\n- **Build**: 20200408.8\r\n- **Date Produced**: 4/8/2020 11:28 PM\r\n- **Commit**: 748807e1d142fe23a65200290affe93db9b8a75e\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng**: from 5.0.0-preview.4.20208.6 to 5.0.0-preview.4.20208.8\r\n\r\n[marker]: <> (End:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2861","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#2861)"},{"Id":"596229638","IsPullRequest":true,"CreatedAt":"2020-04-08T21:34:38","Actor":"dotnet-maestro[bot]","Number":"2853","RawContent":null,"Title":"[master] Update dependencies from dotnet/winforms","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n## From https://github.com/dotnet/winforms\r\n- **Subscription**: 256c8be3-de58-46f5-d219-08d6ba11f126\r\n- **Build**: 20200407.2\r\n- **Date Produced**: 4/8/2020 5:44 AM\r\n- **Commit**: 1e0ac96b26a50d70305a79612744a370de6e1242\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.Private.Winforms** -> 5.0.0-preview.4.20207.2\r\n\r\n[marker]: <> (End:256c8be3-de58-46f5-d219-08d6ba11f126)\r\n\r\n\r\n[marker]: <> (Begin:Coherency Updates)\r\n## Coherency Updates\r\n\r\nThe following updates ensure that dependencies with a *CoherentParentDependency*\r\nattribute were produced in a build used as input to the parent dependency's build.\r\nSee [Dependency Description Format](https://github.com/dotnet/arcade/blob/master/Documentation/DependencyDescriptionFormat.md#dependency-description-overview)\r\n\r\n- **Microsoft.Win32.Registry** -> 5.0.0-preview.4.20205.13 (parent: Microsoft.Private.Winforms)\r\n- **System.CodeDom** -> 5.0.0-preview.4.20205.13 (parent: Microsoft.Private.Winforms)\r\n- **System.Configuration.ConfigurationManager** -> 5.0.0-preview.4.20205.13 (parent: Microsoft.Private.Winforms)\r\n- **System.Diagnostics.EventLog** -> 5.0.0-preview.4.20205.13 (parent: Microsoft.Private.Winforms)\r\n- **System.DirectoryServices** -> 5.0.0-preview.4.20205.13 (parent: Microsoft.Private.Winforms)\r\n- **System.Drawing.Common** -> 5.0.0-preview.4.20205.13 (parent: Microsoft.Private.Winforms)\r\n- **System.Reflection.Emit** -> 5.0.0-alpha.1.19563.6 (parent: Microsoft.Private.Winforms)\r\n- **System.Reflection.MetadataLoadContext** -> 5.0.0-preview.4.20205.13 (parent: Microsoft.Private.Winforms)\r\n- **System.Security.AccessControl** -> 5.0.0-preview.4.20205.13 (parent: Microsoft.Private.Winforms)\r\n- **System.Security.Cryptography.Xml** -> 5.0.0-preview.4.20205.13 (parent: Microsoft.Private.Winforms)\r\n- **System.Security.Permissions** -> 5.0.0-preview.4.20205.13 (parent: Microsoft.Private.Winforms)\r\n- **System.Security.Principal.Windows** -> 5.0.0-preview.4.20205.13 (parent: Microsoft.Private.Winforms)\r\n- **System.Windows.Extensions** -> 5.0.0-preview.4.20205.13 (parent: Microsoft.Private.Winforms)\r\n- **Microsoft.NETCore.Platforms** -> 5.0.0-preview.4.20205.13 (parent: Microsoft.Private.Winforms)\r\n- **System.IO.Packaging** -> 5.0.0-preview.4.20205.13 (parent: Microsoft.Private.Winforms)\r\n- **Microsoft.NETCore.Runtime.CoreCLR** -> 5.0.0-alpha1.19562.1 (parent: Microsoft.Private.Winforms)\r\n- **Microsoft.NETCore.ILDAsm** -> 5.0.0-preview.4.20205.13 (parent: Microsoft.Private.Winforms)\r\n- **Microsoft.NETCore.ILAsm** -> 5.0.0-preview.4.20205.13 (parent: Microsoft.Private.Winforms)\r\n- **System.Resources.Extensions** -> 5.0.0-preview.4.20205.13 (parent: Microsoft.Private.Winforms)\r\n- **Microsoft.NETCore.App.Internal** -> 5.0.0-preview.4.20205.13 (parent: Microsoft.Private.Winforms)\r\n\r\n[marker]: <> (End:Coherency Updates)\r\n\r\n\r\n\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2853","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dotnet/winforms\" (#2853)"},{"Id":"596832172","IsPullRequest":true,"CreatedAt":"2020-04-08T21:34:20","Actor":"dotnet-maestro[bot]","Number":"2858","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Subscription**: 46a15fe4-6c2c-480d-9cdd-08d71053b252\r\n- **Build**: 20200408.6\r\n- **Date Produced**: 4/8/2020 7:50 PM\r\n- **Commit**: 31cea8e501c4649083b88fd2ec48182106433749\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng**: from 5.0.0-preview.4.20208.4 to 5.0.0-preview.4.20208.6\r\n\r\n[marker]: <> (End:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2858","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#2858)"},{"Id":"596769372","IsPullRequest":true,"CreatedAt":"2020-04-08T21:18:28","Actor":"vatsan-madhavan","Number":"2857","RawContent":null,"Title":"Incorporate C++/CLI tools that can build against updated runtime bits","State":"closed","Body":"- Incorporate updated and _privatized_ C++/CLI tools that can build against updated runtime bits\r\n  - Update `msvcurt-c1xx` to `0.0.1.2`\r\n  - Update versions to bring in updated runtime bits. \r\n  - This updates to versions specified by the dotnet/winforms build generated by https://github.com/dotnet/winforms/pull/3045 (this is what the _CoherentParentDependency_ attributes in `eng\\Version.Details.xml` accomplish)\r\n  - Also updates versions generated by dotnet-wpf-int/7161\r\n- Fixes #2757 which is now triggered due to updated runtime bits. \r\n- Fixes various build breaks that are triggered due to updated compiler bits, notably `error C5208: unnamed class used in typedef name cannot declare members other than non-static data members, member enumerations, or member classes`\r\n- Unpin `System.Memory` dependency in PresentationBuildTasks. \r\n  - This had been pinned due to a bug in builds of System.Memory which has since been fixed in dotnet/runtime, but was invisible to us due to our inability to consume the said fix. Now the fix is available and the version need not be pinned any longer (in fact, the pinned version breaks the build and had to be freed). \r\n- Update `global.json` to use .NET 5 Preview 1 SDK for building the repo (i.e., update `tools.dotnet` and `sdk.version` values). \r\n- Migrate documentation from [dotnet-wpf-int](https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int) and update them. \r\n  - Notably, this contains instructions for updating `msvcurt-c1xx` package in the future. \r\n  - This documentation is intended for internal use by the product-team only. \r\n\r\n/cc @dotnet/wpf-developers, @dotnet/dotnet-winforms, @mateoatr \r\n\r\n**note:** Do not squash this PR - create a merge commit and preserve individual commit history. ","Url":"https://github.com/dotnet/wpf/pull/2857","RelatedDescription":"Closed or merged PR \"Incorporate C++/CLI tools that can build against updated runtime bits\" (#2857)"},{"Id":"596572814","IsPullRequest":true,"CreatedAt":"2020-04-08T13:35:57","Actor":"dotnet-maestro[bot]","Number":"2855","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Subscription**: 46a15fe4-6c2c-480d-9cdd-08d71053b252\r\n- **Build**: 20200408.4\r\n- **Date Produced**: 4/8/2020 1:04 PM\r\n- **Commit**: 3de9ffd307bc8de030788df057e44b9dae78ed38\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng** -> 5.0.0-preview.4.20208.4\r\n\r\n[marker]: <> (End:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2855","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#2855)"},{"Id":"596440773","IsPullRequest":false,"CreatedAt":"2020-04-08T09:32:23","Actor":"nerai","Number":"2854","RawContent":null,"Title":"Crash: Height must be non-negative","State":"open","Body":"* .NET Core Version: .NET Core 3.1.100\r\n* Windows version: 10.0.18362\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: did not test\r\n\r\n **Problem description:**\r\n\r\nConcurrently adding/removing items to ListBox and moving focus causes exception.\r\n \r\n **Actual behavior:** \r\n\r\n```\r\nSystem.ArgumentException\r\n  HResult=0x80070057\r\n  Message=Height must be non-negative.\r\n  Source=WindowsBase\r\n  StackTrace:\r\n   at System.Windows.Rect.set_Height(Double value)\r\n   at System.Windows.Controls.VirtualizingStackPanel.ExtendViewport(IHierarchicalVirtualizationAndScrollInfo virtualizationInfoProvider, Boolean isHorizontal, Rect viewport, VirtualizationCacheLength cacheLength, VirtualizationCacheLengthUnit cacheUnit, Size stackPixelSizeInCacheBeforeViewport, Size stackLogicalSizeInCacheBeforeViewport, Size stackPixelSizeInCacheAfterViewport, Size stackLogicalSizeInCacheAfterViewport, Size stackPixelSize, Size stackLogicalSize, Int32& itemsInExtendedViewportCount)\r\n   at System.Windows.Controls.VirtualizingStackPanel.IsExtendedViewportFull()\r\n   at System.Windows.Controls.VirtualizingStackPanel.ShouldItemsChangeAffectLayoutCore(Boolean areItemChangesLocal, ItemsChangedEventArgs args)\r\n   at System.Windows.Controls.Panel.OnItemsChanged(Object sender, ItemsChangedEventArgs args)\r\n   at System.Windows.Controls.ItemContainerGenerator.OnItemAdded(Object item, Int32 index)\r\n   at System.Windows.Controls.ItemContainerGenerator.OnCollectionChanged(Object sender, NotifyCollectionChangedEventArgs args)\r\n   at System.Windows.WeakEventManager.ListenerList`1.DeliverEvent(Object sender, EventArgs e, Type managerType)\r\n   at System.Windows.WeakEventManager.DeliverEvent(Object sender, EventArgs args)\r\n   at System.Windows.Data.CollectionView.OnCollectionChanged(NotifyCollectionChangedEventArgs args)\r\n   at System.Windows.WeakEventManager.ListenerList`1.DeliverEvent(Object sender, EventArgs e, Type managerType)\r\n   at System.Windows.WeakEventManager.DeliverEvent(Object sender, EventArgs args)\r\n   at System.Windows.Data.CollectionView.OnCollectionChanged(NotifyCollectionChangedEventArgs args)\r\n   at MS.Internal.Controls.InnerItemCollectionView.Add(Object item)\r\n   at System.Windows.Controls.ItemCollection.Add(Object newItem)\r\n   at WpfApp1.MainWindow.<>c__DisplayClass1_0.<Work>b__0() in C:\\Users\\mafu\\source\\repos\\WpfApp1\\WpfApp1\\MainWindow.xaml.cs:line 42\r\n   at System.Windows.Threading.ExceptionWrapper.InternalRealCall(Delegate callback, Object args, Int32 numArgs)\r\n   at System.Windows.Threading.ExceptionWrapper.TryCatchWhen(Object source, Delegate callback, Object args, Int32 numArgs, Delegate catchHandler)\r\n   at System.Windows.Threading.DispatcherOperation.InvokeImpl()\r\n   at MS.Internal.CulturePreservingExecutionContext.CallbackWrapper(Object obj)\r\n   at System.Threading.ExecutionContext.RunInternal(ExecutionContext executionContext, ContextCallback callback, Object state)\r\n```\r\n \r\n **Expected behavior:**\r\n\r\nNo exception.\r\n \r\n **Minimal repro:**\r\n\r\nXAML:\r\n\r\n```\r\n<Window x:Class=\"WpfApp1.MainWindow\"\r\n        xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\r\n        xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\r\n        xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\r\n        xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\r\n        xmlns:local=\"clr-namespace:WpfApp1\"\r\n        mc:Ignorable=\"d\"\r\n        Title=\"MainWindow\" Height=\"450\" Width=\"800\">\r\n\t<Grid>\r\n\t\t<ListBox x:Name=\"list\"/>\r\n\t</Grid>\r\n</Window>\r\n```\r\n\r\nCS:\r\n```\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Threading;\r\nusing System.Windows;\r\n\r\nnamespace WpfApp1\r\n{\r\n\tpublic partial class MainWindow : Window\r\n\t{\r\n\t\tpublic MainWindow ()\r\n\t\t{\r\n\t\t\tInitializeComponent ();\r\n\r\n\t\t\tfor (int i = 0; i < 4; i++) {\r\n\t\t\t\tnew Thread (Work) { IsBackground = true }.Start ();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tprivate void Work ()\r\n\t\t{\r\n\t\t\tvar mtid = Thread.CurrentThread.ManagedThreadId;\r\n\t\t\tvar r = new Random (mtid);\r\n\t\t\tint i = 0;\r\n\t\t\tvar its = new List<string> ();\r\n\r\n\t\t\twhile (true) {\r\n\t\t\t\tif ((its.Count == 0) || (r.Next () % 2 == 0)) {\r\n\t\t\t\t\tvar it = $\"{mtid}-{++i}\";\r\n\t\t\t\t\tits.Add (it);\r\n\t\t\t\t\tDispatcher.BeginInvoke ((Action) delegate {\r\n\t\t\t\t\t\tlist.Items.Add (it);\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tvar index = r.Next (its.Count);\r\n\t\t\t\t\tvar it = its [index];\r\n\t\t\t\t\tits.RemoveAt (index);\r\n\t\t\t\t\tDispatcher.BeginInvoke ((Action) delegate {\r\n\t\t\t\t\t\tlist.Items.Remove (it);\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tThread.Sleep (r.Next (2));\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n```\r\n\r\nWhen the application is running, press HOME, END and ARROW-DOWN keys randomly in quick succession until it crashes (takes a few seconds).\r\n","Url":"https://github.com/dotnet/wpf/issues/2854","RelatedDescription":"Open issue \"Crash: Height must be non-negative\" (#2854)"},{"Id":"596140234","IsPullRequest":true,"CreatedAt":"2020-04-07T23:45:49","Actor":"rladuca","Number":"2851","RawContent":null,"Title":"Ensure PimcContexts are eagerly release when no longer needed","State":"closed","Body":"Fixes #2850 \r\n\r\nI've stress tested this with 100s of windows across multiple threads coming up and going down randomly.  This caused several PenThreads to be allocated as well.  While this was running (for about 10 minutes) I was plugging and unplugging devices and testing that they still received input.  All seemed to be fine.\r\n\r\nWe also have a full test pass with this on .NET Framework 4.8, but the lower risk is to change this in .NET 5 as there is a reasonable workaround (see the issue).","Url":"https://github.com/dotnet/wpf/pull/2851","RelatedDescription":"Closed or merged PR \"Ensure PimcContexts are eagerly release when no longer needed\" (#2851)"},{"Id":"596135569","IsPullRequest":false,"CreatedAt":"2020-04-07T23:45:49","Actor":"rladuca","Number":"2850","RawContent":null,"Title":"Eager Release of WPF Touch/Stylus COM Objects","State":"closed","Body":"* .NET Core Version: (e.g. 3.0 Preview1, or daily build number, use `dotnet --info`) All\r\n* Windows version: (`winver`) All\r\n* Does the bug reproduce also in WPF for .NET Framework 4.8?: Yes\r\n* Is this bug related specifically to tooling in Visual Studio (e.g. XAML Designer, Code editing, etc...)? If yes, please file the issue via the instructions [here](https://docs.microsoft.com/visualstudio/ide/how-to-report-a-problem-with-visual-studio?view=vs-2019).\r\n* Security issues and bugs should be reported privately, learn more via our [responsible disclosure guidelines](https://github.com/dotnet/wpf/blob/master/README.md#reporting-security-issues-and-security-bugs).\r\n \r\n **Problem description:**\r\n When using top-level windows in WPF, unplugging a stylus or touch device can result in temporary loss of touch or stylus input from another device.  This occurs because WPF uses COM objects (`PimcContext`) that wrap COM objects from `WISP`.  When a tablet/stylus is disconnected or a Window is closed, WPF removes these `PimcContexts` from a list in the `PenThread`.  The RCWs are then queued for garbage collection.\r\n\r\nIf a `PimcContext` corresponds with a top-level window, there is a corresponding WISP COM object underneath it that has a top-level hook within WISP (these are not OS input hook, but WISP specific creations).  These hooks are associated with specific HWNDs.  Since the `PimcContext` COM object is still awaiting collection, any tablet/stylus input from a device lower in the hook-chain will now no longer receive input.\r\n\r\nThe solution is to eagerly release the COM object when we are sure we no longer need it.  You can see this code [here](https://github.com/dotnet/wpf/blob/83330faa6104f7e3af8caff1e7a3c5300b1755fc/src/Microsoft.DotNet.Wpf/src/PresentationCore/System/Windows/Input/Stylus/Wisp/PenThreadWorker.cs#L1134), but conditioned to only run on Windows 7.  This was due to confusion and a mistake that I made when investigating a broader COM issue that WPF eventually worked around (the fix for this is spread widely through the code, but see [here ](https://github.com/dotnet/wpf/blob/83330faa6104f7e3af8caff1e7a3c5300b1755fc/src/Microsoft.DotNet.Wpf/src/PresentationCore/System/Windows/Input/Stylus/Wisp/PenThreadWorker.cs#L1126)for a very brief comment on it).  There was, in the end, no need for this OS conditional to fix the overall issue and it opened up Win8+ to the same top-level window bugs it originally fixed.\r\n\r\nWe need to remove that OS check so that we always eagerly release `PimcContexts` that we no longer need.\r\n\r\n**Work-around**\r\nYou can force garbage collection whenever a tablet/stylus is removed by doing something like the following:\r\n\r\n```\r\n static MainWindow()\r\n {\r\n     ComponentDispatcher.ThreadFilterMessage += ComponentDispatcher_ThreadFilterMessage;\r\n }\r\n\r\n private const int WM_TABLETDELETED = 0x02C9;\r\n\r\n private static void ComponentDispatcher_ThreadFilterMessage(ref MSG msg, ref bool handled)\r\n {\r\n     if (msg.message == WM_TABLETDELETED)\r\n     {\r\n         System.Windows.Threading.Dispatcher.CurrentDispatcher.BeginInvoke(new Action(() => { GC.Collect(); GC.WaitForPendingFinalizers(); }), System.Windows.Threading.DispatcherPriority.ApplicationIdle);\r\n     }\r\n }\r\n```\r\n\r\nThis should clean up the pending collection of PimcContexts and free up the hook in WISP.","Url":"https://github.com/dotnet/wpf/issues/2850","RelatedDescription":"Closed issue \"Eager Release of WPF Touch/Stylus COM Objects\" (#2850)"},{"Id":"595868219","IsPullRequest":true,"CreatedAt":"2020-04-07T14:03:32","Actor":"dotnet-maestro[bot]","Number":"2849","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Subscription**: 46a15fe4-6c2c-480d-9cdd-08d71053b252\r\n- **Build**: 20200407.4\r\n- **Date Produced**: 4/7/2020 1:04 PM\r\n- **Commit**: 740946ae5725713ba3ccdd3c16e4707b16b31ba0\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng** -> 5.0.0-preview.4.20207.4\r\n\r\n[marker]: <> (End:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2849","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#2849)"},{"Id":"595457595","IsPullRequest":false,"CreatedAt":"2020-04-06T22:04:30","Actor":"DigitalPilgrim","Number":"2848","RawContent":null,"Title":"WPF and CLR Net Core as part of C++ and with all DLL for Net Core. How to?","State":"open","Body":"I created test project where is used WPF Core as DLL with CLR (C++/CLI) Core DLL in console C++ application. It runs ok until I tested it in second pc. I realized, that I need installed VC Runtime and NET Core \"runtime\" on second PC. \r\nAs I searched on documentation, NET Core can be deployed as self-contained throught publish button. Problem is NET Core doesn't have that option and WPF Core as ClassLibrary doesn't produce anything except some nupkg. It is strange because I don't select option to publish it as nupkg.\r\n\r\nQuestion is, can be C++ application which use WPF DLL and CLR Core DLL as self-contained? If yes, how? I mean, user doesn't need install any NET Core to run my app. I hope it is possible, because this is main advantage (NET Core) I think.","Url":"https://github.com/dotnet/wpf/issues/2848","RelatedDescription":"Open issue \"WPF and CLR Net Core as part of C++ and with all DLL for Net Core. How to?\" (#2848)"},{"Id":"595423608","IsPullRequest":false,"CreatedAt":"2020-04-06T20:58:52","Actor":"thansen24","Number":"2847","RawContent":null,"Title":"DataBindEngine.CrossThreadThreshold const is ambiguous with code comment","State":"open","Body":"the internal constant DataBindEngine.CrossThreadThreshold is defined as:\r\n\r\n`internal const int CrossThreadThreshold = 50000;   // 50 msec`\r\n\r\nThis const is used in places that compare ticks, so 50000 is actually 5 milliseconds, not 50 as the comment suggests.  I'm happy to push up a fix for this, either the value of the const to reflect 50 msec or the comment to reflect that the value is 5 msec, but it's unclear exactly what the intent is here?","Url":"https://github.com/dotnet/wpf/issues/2847","RelatedDescription":"Open issue \"DataBindEngine.CrossThreadThreshold const is ambiguous with code comment\" (#2847)"},{"Id":"595111623","IsPullRequest":true,"CreatedAt":"2020-04-06T13:42:25","Actor":"dotnet-maestro[bot]","Number":"2846","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Subscription**: 46a15fe4-6c2c-480d-9cdd-08d71053b252\r\n- **Build**: 20200406.4\r\n- **Date Produced**: 4/6/2020 1:03 PM\r\n- **Commit**: 9a7b18ab030777749ecc3e5f73def266f9617981\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng** -> 5.0.0-preview.4.20206.4\r\n\r\n[marker]: <> (End:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2846","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#2846)"},{"Id":"594440062","IsPullRequest":true,"CreatedAt":"2020-04-05T13:26:03","Actor":"dotnet-maestro[bot]","Number":"2845","RawContent":null,"Title":"[master] Update dependencies from dnceng/internal/dotnet-wpf-int","State":"closed","Body":"This pull request updates the following dependencies\r\n\r\n[marker]: <> (Begin:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n## From https://dev.azure.com/dnceng/internal/_git/dotnet-wpf-int\r\n- **Subscription**: 46a15fe4-6c2c-480d-9cdd-08d71053b252\r\n- **Build**: 20200405.3\r\n- **Date Produced**: 4/5/2020 12:38 PM\r\n- **Commit**: 61aaa8bb241614d5aadac2ebe3a7fa8fc073bc1f\r\n- **Branch**: refs/heads/master\r\n- **Updates**:\r\n  - **Microsoft.DotNet.Wpf.DncEng** -> 5.0.0-preview.4.20205.3\r\n\r\n[marker]: <> (End:46a15fe4-6c2c-480d-9cdd-08d71053b252)\r\n\r\n","Url":"https://github.com/dotnet/wpf/pull/2845","RelatedDescription":"Closed or merged PR \"[master] Update dependencies from dnceng/internal/dotnet-wpf-int\" (#2845)"},{"Id":"596165303","IsPullRequest":false,"CreatedAt":"2020-04-03T13:08:04","Actor":"DaveInCaz","Number":"2852","RawContent":null,"Title":" System.Windows.Media.Rotate() does not state units of measure of its parameter","State":"open","Body":"The parameter `angle` needs to be in degrees but this is not stated in the tooltip in VS nor in the comments when you view metadata for the method.\r\n\r\n\r\nHere's what's in the metadata for `Rotate()`:\r\n\r\n        //\r\n        // Summary:\r\n        //     Applies a rotation of the specified angle about the origin of this System.Windows.Media.Matrix\r\n        //     structure.\r\n        //\r\n        // Parameters:\r\n        //   angle:\r\n        //     The angle of rotation.\r\n        public void Rotate(double angle);\r\n\r\nIn contrast `RotateAt()` does state the units:\r\n\r\n        //\r\n        // Summary:\r\n        //     Rotates this matrix about the specified point.\r\n        //\r\n        // Parameters:\r\n        //   angle:\r\n        //     The angle, in degrees, by which to rotate this matrix.\r\n        ...\r\n        public void RotateAt(double angle, double centerX, double centerY);\r\n\r\nThanks","Url":"https://github.com/dotnet/wpf/issues/2852","RelatedDescription":"Open issue \" System.Windows.Media.Rotate() does not state units of measure of its parameter\" (#2852)"}],"ResultType":"GitHubIssue"}},"RunOn":"2020-04-13T05:30:47.3825953Z","RunDurationInMilliseconds":552}