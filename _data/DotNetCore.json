{"Data":{"Blog":{"FeedItems":[{"Title":"Migrating your existing .NET application to the cloud? Tell us about it!","PublishedOn":"2017-12-05T18:14:46+00:00","CommentsCount":0,"FacebookCount":0,"Summary":"Hi everyone! The .NET team is conducting a survey to learn more about your approach for moving existing .NET applications to the cloud.  The survey should take less than 5 minutes to complete. Take...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/12/05/migrating-your-existing-net-application-to-the-cloud-tell-us-about-it/","RawContent":null},{"Title":"Announcing the Windows Compatibility Pack for .NET Core","PublishedOn":"2017-11-17T04:59:32+00:00","CommentsCount":73,"FacebookCount":0,"Summary":"Porting existing code to .NET Core used to be quite hard because the available API set was very small. In .NET Core 2.0, we already made this much easier, thanks to .NET Standard 2.0. Today,...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/announcing-the-windows-compatibility-pack-for-net-core/","RawContent":null},{"Title":"UPDATE – Microservices and Docker containers: Architecture, Patterns and Development guidance (Updated for .NET Core 2.0)","PublishedOn":"2017-11-16T22:00:06+00:00","CommentsCount":1,"FacebookCount":0,"Summary":"Nov. 15th 2017 update Earlier this year, we published this eBook/guide and sample application offering guidance for architecting microservices and Docker containers based applications. We have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/update-microservices-and-docker-containers-architecture-patterns-and-development-guidance-updated-for-net-core-2-0/","RawContent":null},{"Title":"UPDATE – Web Applications with ASP.NET Core Architecture and Patterns guidance (Updated for ASP.NET Core 2)","PublishedOn":"2017-11-16T21:00:05+00:00","CommentsCount":3,"FacebookCount":0,"Summary":"Nov. 15th 2017 update Earlier this year, we published an eBook/Guide and sample application offering guidance named Architecting Modern Web Applications with ASP.NET Core and Microsoft Azure. We have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/16/update-web-applications-with-asp-net-core-architecture-and-patterns-guidance-updated-for-asp-net-core-2/","RawContent":null},{"Title":"Introducing Tensor for multi-dimensional Machine Learning and AI data","PublishedOn":"2017-11-15T22:00:18+00:00","CommentsCount":10,"FacebookCount":0,"Summary":"Overview Tensor is an exchange type for homogenous multi-dimensional data for 1 to N dimensions. The motivation behind introducing Tensor&#60;T&#62; is to make it easy for Machine Learning library...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/introducing-tensor-for-multi-dimensional-machine-learning-and-ai-data/","RawContent":null},{"Title":"Introducing Nullable Reference Types in C#","PublishedOn":"2017-11-15T20:00:47+00:00","CommentsCount":234,"FacebookCount":0,"Summary":"Today we released a prototype of a C# feature called &#8220;nullable reference types&#8220;, which is intended to help you find and fix most of your null-related bugs before they blow up at runtime....","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/nullable-reference-types-in-csharp/","RawContent":null},{"Title":"Announcing F# support for .NET Core and .NET Standard projects in Visual Studio","PublishedOn":"2017-11-15T19:00:49+00:00","CommentsCount":11,"FacebookCount":0,"Summary":"We&#8217;re pleased to announce that Visual Studio 2017 15.5 Preview 4 now supports F# projects targeting .NET Core, .NET Standard, and .NET Framework through the .NET Core SDK. Some of you have...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/announcing-f-support-for-net-core-and-net-standard-projects-in-visual-studio/","RawContent":null},{"Title":"Welcome to C# 7.2 and Span","PublishedOn":"2017-11-15T19:00:26+00:00","CommentsCount":29,"FacebookCount":0,"Summary":"C# 7.2 is the latest point release of C#, and adds a number of small but useful features. All the features are described in wonderful detail in the docs. Start with the overview, What&#8217;s new in...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/welcome-to-c-7-2-and-span/","RawContent":null},{"Title":".NET Core November 2017 Update","PublishedOn":"2017-11-15T05:25:23+00:00","CommentsCount":12,"FacebookCount":0,"Summary":"Today, we are releasing the .NET Core November Update. This includes .NET Core 1.0.8, 1.1.5 and 2.0.1 and .NET Core SDK 1.1.5 and 2.0.3. Details regarding the security issues addressed by this release...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/14/net-core-november-2017-update/","RawContent":null},{"Title":".NET Framework November 2017 Security and Quality Rollup","PublishedOn":"2017-11-15T03:54:36+00:00","CommentsCount":8,"FacebookCount":0,"Summary":"Today, we are releasing the November 2017 Security and Quality Rollup. Security This release contains no new security updates. The most recent .NET security updates were shipped with the September...","Href":"https://blogs.msdn.microsoft.com/dotnet/2017/11/14/net-framework-november-2017-security-and-quality-rollup/","RawContent":null}],"ResultType":"Feed"},"Home":{"Events":[{"Id":"6946829856","Type":"PullRequestEvent","CreatedAt":"2017-12-05T18:08:42","Actor":"heiligerdankgesang","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/92","RelatedDescription":"Opened pull request \"Remove contact email from system.drawing.md\" (#92) at dotnet/home","RelatedBody":"Contact email is outdated. Mono-project site's community section has better, more up-to-date information."},{"Id":"6934052963","Type":"PullRequestEvent","CreatedAt":"2017-12-02T15:19:09","Actor":"rprouse","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/91","RelatedDescription":"Opened pull request \"Add NUnit to the .NET Foundation Projects\" (#91) at dotnet/home","RelatedBody":""},{"Id":"6872255902","Type":"PullRequestEvent","CreatedAt":"2017-11-17T22:01:26","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/90","RelatedDescription":"Merged pull request \"Add BenchmarkDotNet to README.md and project.json\" (#90) at dotnet/home","RelatedBody":""},{"Id":"6872252909","Type":"PullRequestEvent","CreatedAt":"2017-11-17T22:00:44","Actor":"jongalloway","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/home/pull/89","RelatedDescription":"Merged pull request \"New logo and SSL certificate for Peachpie\" (#89) at dotnet/home","RelatedBody":""},{"Id":"6868854916","Type":"PullRequestEvent","CreatedAt":"2017-11-17T09:04:03","Actor":"AndreyAkinshin","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/90","RelatedDescription":"Opened pull request \"Add BenchmarkDotNet to README.md and project.json\" (#90) at dotnet/home","RelatedBody":""},{"Id":"6816687850","Type":"IssuesEvent","CreatedAt":"2017-11-06T20:30:07","Actor":"Petermarcu","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/home/issues/88","RelatedDescription":"Closed issue \"File system watcher crash\" (#88) at dotnet/home","RelatedBody":"Not sure where to open this issue.\r\nI'm experiencing crashes since I migrated to .net core 2.0 while running my site.\r\nThe following is the exception and stack trace:\r\n```\r\nAn unhandled exception of type 'System.ArgumentException' occurred in System.Private.CoreLib.dll\r\nThe path is not of a legal form.\r\n\r\nSystem.Private.CoreLib.dll!System.IO.Path.GetFullPath(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.InMemoryDirectoryInfo.InMemoryDirectoryInfo(string rootDir, System.Collections.Generic.IEnumerable<string> files, bool normalized)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string rootDir, System.Collections.Generic.IEnumerable<string> files)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileSystemGlobbing.dll!Microsoft.Extensions.FileSystemGlobbing.MatcherExtensions.Match(Microsoft.Extensions.FileSystemGlobbing.Matcher matcher, string file)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.ReportChangeForMatchedEntries(string path)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnFileSystemEntryChange(string fullPath)\tUnknown\tNo symbols loaded.\r\n \tMicrosoft.Extensions.FileProviders.Physical.dll!Microsoft.Extensions.FileProviders.Physical.PhysicalFilesWatcher.OnRenamed(object sender, System.IO.RenamedEventArgs e)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.NotifyRenameEventArgs(System.IO.WatcherChangeTypes action, string name, string oldName)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ParseEventBufferAndNotifyForEach(byte[] buffer)\tUnknown\tNo symbols loaded.\r\n \tSystem.IO.FileSystem.Watcher.dll!System.IO.FileSystemWatcher.ReadDirectoryChangesCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* overlappedPointer)\tUnknown\tNo symbols loaded.\r\n \tSystem.Private.CoreLib.dll!System.Threading._IOCompletionCallback.PerformIOCompletionCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* pOVERLAP)\tUnknown\tNo symbols loaded.\r\n```\r\n\r\nI'm not sure how to fix this. I can reproduce it although it's not easy since I think it has to do with timing..."},{"Id":"6797468573","Type":"PullRequestEvent","CreatedAt":"2017-11-01T23:04:17","Actor":"bfistein","Repository":"dotnet/home","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/home/pull/89","RelatedDescription":"Opened pull request \"New logo and SSL certificate for Peachpie\" (#89) at dotnet/home","RelatedBody":""}],"ResultType":"GitHubEvent"},"Announcements":{"Events":[{"Id":"6948315401","Type":"IssuesEvent","CreatedAt":"2017-12-05T23:41:57","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/announcements/issues/50","RelatedDescription":"Closed issue \".Net Core ARM32 SDK availability\" (#50) at dotnet/announcements","RelatedBody":"Referencing #29.\r\n\r\nWill it be possible to : \r\n\r\na) Provide ARM32 builds for the SDK at its current state\r\nor\r\nb) Provide links on how to build the .Net Core SDK for ARM32?\r\n\r\nThe thing is I am planning to use it in a virtual environnement, through proot + qemu-arm-static. This way I would be able to build and, more importantly, run unit tests on ARM32. Another thing I am planning to do is to setup a build environnement on i686 through virtualisation as qemu doesn't seem to be able to emulate x86_64 on i686 (but arm32 does seem to work well enough).\r\n\r\nThank you in advance.\r\n\r\nSergio\r\n\r\n"},{"Id":"6944555922","Type":"IssuesEvent","CreatedAt":"2017-12-05T10:46:06","Actor":"tioduke","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/50","RelatedDescription":"Opened issue \".Net Core ARM32 SDK availability\" (#50) at dotnet/announcements","RelatedBody":"Will it be possible to : \r\n\r\na) Provide ARM32 builds for the SDK at its current state\r\nor\r\nb) Provide links on how to build the .Net Core SDK for ARM32?\r\n\r\nThe thing is I am planning to use it in a virtual environnement, through proot + qemu-arm-static. This way I would be able to build and, more importantly, run unit tests on ARM32. Another thing I am planning to do is to setup a build environnement on i686 through virtualisation as qemu doesn't seem to be able to emulate x86_64 on i686 (but arm32 does seem to work well enough).\r\n\r\nThank you in advance.\r\n\r\nSergio\r\n\r\n"},{"Id":"6886438076","Type":"IssuesEvent","CreatedAt":"2017-11-21T19:28:57","Actor":"richlander","Repository":"dotnet/announcements","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/announcements/issues/49","RelatedDescription":"Opened issue \".NET Core Alpine Image Ready for Testing\" (#49) at dotnet/announcements","RelatedBody":"# .NET Core Alpine Image Ready for Testing\r\n\r\nAn [Alpine](https://hub.docker.com/_/alpine/)-based Docker image is now available for .NET Core. Alpine is much smaller than Debian, which we have used for the .NET Core base image to date. There have been many requests for an Alpine image. We are pleased to make it available. Please check out [.NET Core Docker Alpine Production Sample (Preview)](https://github.com/dotnet/dotnet-docker-samples/blob/master/dotnetapp-prod-alpine-preview/README.md) to see examples of using this image.\r\n\r\nWe have added two new images:\r\n\r\n- `2.1-runtime-alpine`\r\n- `2.1-runtime-deps-alpine`\r\n\r\nAlpine support is part of the .NET Core 2.1 release. .NET Core 2.1 images are currently provided at the [microsoft/dotnet-nightly](https://hub.docker.com/r/microsoft/dotnet-nightly/) repo, including the new Alpine images. .NET Core 2.1 images will be promoted to the [microsoft/dotnet](https://hub.docker.com/r/microsoft/dotnet/) repo when .NET Core 2.1 is shipped as a Preview, expected to be early 2018.\r\n\r\n## Discussion\r\n\r\nPlease share your thoughts on this change and see what others are saying at:\r\n\r\n* [dotnet/dotnet-docker-nightly #500](https://github.com/dotnet/dotnet-docker-nightly/issues/500)\r\n\r\n## Details\r\n\r\n* [dotnet/dotnet-docker-nightly #480](https://github.com/dotnet/dotnet-docker-nightly/pull/480)\r\n* [dotnet/announcements #20](https://github.com/dotnet/announcements/issues/20)\r\n* [dotnet/dotnet-docker-samples #94](https://github.com/dotnet/dotnet-docker-samples/pull/94)\r\n\r\nThe primary goal of Alpine is very small deployments. We have been considering various design decisions to make .NET Core Alpine base images as small as possible to align with that. In this first iteration, we enabled [.NET Core 2.0 Globalization Invariant Mode](https://github.com/dotnet/announcements/issues/20) in order to reduce the default size of the image. This change reduced the image by ~30MB. You can see the reduction in size for .NET Core images relative to Debian in the following table.\r\n\r\n|2.1 Image|Debian|Alpine|\r\n|-----    |------|------|\r\n|`-deps`   |153MB (68MB compressed) |13.8 MB (6MB compressed)|\r\n|`-runtime`|222MB (96MB compressed) |82.5 (34MB compressed)|\r\n\r\nNote: The compressed size is what you will see in a [registry](https://hub.docker.com/r/microsoft/dotnet-nightly/tags/) and is the wire-size cost.\r\n\r\nWe are also considering saving more space by native-compiling fewer assemblies. .NET Core runtime assemblies are native-compiled with the [crossgen tool](https://github.com/dotnet/coreclr/blob/master/Documentation/building/crossgen.md) in the [Ready2Run format](https://github.com/dotnet/coreclr/blob/master/Documentation/botr/readytorun-overview.md). Native-compiled code delivers superior startup performance but at the cost of 2-3x larger files. We have the opportunity to compile less, skipping compiling assemblies in part or in whole. We believe that we can save at least another 10MB through compiling less without a material drop in performance. For scenarios that value size over startup or where wire cost is significant, it may be valuable to aggressively reduce the number/% of compilation.\r\n\r\nAlpine images are only available for .NET Core 2.1. At the current time, only Runtime images are available. We intend to offer SDK images at a later date.\r\n\r\nUse cases that cannot tolerate Globalization invariant mode can reset the `DOTNET_SYSTEM_GLOBALIZATION_INVARIANT` environment variable and install the ICU package. Please check out [.NET Core Docker Alpine Production Sample (Preview)](https://github.com/dotnet/dotnet-docker-samples/blob/master/dotnetapp-prod-alpine-preview/README.md) to see examples of using this image with and without Globalization Invariant Mode enabled.\r\n\r\n## Call to Action\r\n\r\nPlease test your workloads with the new Alpine image. In particular, we want to know if enabling .NET Core Globalization Invariant Mode is acceptable/appreciated.\r\n"}],"ResultType":"GitHubEvent"},"CoreCLR":{"Events":[{"Id":"7021544618","Type":"IssuesEvent","CreatedAt":"2017-12-22T05:21:51","Actor":"jkotas","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/issues/12159","RelatedDescription":"Closed issue \"[Question] Will UWP6.0 Milestone Support Windows IoT\" (#12159) at dotnet/coreclr","RelatedBody":"Does anyone know if this [milestone](https://github.com/dotnet/coreclr/milestone/11) will support .NET Core for Windows IoT UWP apps that runs on RPi3 or is the focus more for desktop?\r\n\r\nCC @karelz \r\n\r\nThx\r\n\r\n"},{"Id":"7021461255","Type":"PullRequestEvent","CreatedAt":"2017-12-22T04:34:15","Actor":"tannergooding","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15617","RelatedDescription":"Opened pull request \"Organizing the tests/src/JIT/HardwareIntrinsics/X86 folder by ISA to make it more manageable.\" (#15617) at dotnet/coreclr","RelatedBody":"As per the title, this splits the existing tests into ISA specific tests.\r\n\r\nThis makes it easier to determine what instructions have coverage and the coverage actually provided for said instruction."},{"Id":"7021122121","Type":"PullRequestEvent","CreatedAt":"2017-12-22T01:50:00","Actor":"benaadams","Repository":"dotnet/coreclr","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/coreclr/pull/15533","RelatedDescription":"Closed pull request \"[WIP]Testing corefx build\" (#15533) at dotnet/coreclr","RelatedBody":""}],"ResultType":"GitHubEvent"},"CLI":{"Events":[{"Id":"7021482482","Type":"IssuesEvent","CreatedAt":"2017-12-22T04:46:52","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/8282","RelatedDescription":"Closed issue \"dotnet add package <Project> --source <LocalDir> fails when offline\" (#8282) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n1. ensure newtonsoft.json is in nuget global cache\r\n2. disconnect from internet\r\n3. dotnet add package Newtonsoft --source \"$home/.nuget/packages\"\r\n\r\n## Expected  behavior\r\nFor dotnet/nuget to skip request to nuget.org and go directly to specified source\r\n\r\n## Actual behavior\r\n```\r\nPS C:\\Users\\lambdakris\\Code\\Hobby\\Cafe\\Cafe.Service> dotnet add package Newtonsoft.Json --source \"$home/.nuget/packages\"\r\n  Writing C:\\Users\\lambdakris\\AppData\\Local\\Temp\\tmp2C91.tmp\r\ninfo : Adding PackageReference for package 'Newtonsoft.Json' into project 'C:\\Users\\lambdakris\\Code\\Hobby\\Cafe\\Cafe.Service\\Cafe.Service.fsproj'.\r\nlog  : Restoring packages for C:\\Users\\lambdakris\\Code\\Hobby\\Cafe\\Cafe.Service\\Cafe.Service.fsproj...\r\ninfo :   CACHE https://api.nuget.org/v3-flatcontainer/fsharp.core/index.json\r\ninfo :   GET https://api.nuget.org/v3-flatcontainer/newtonsoft.json/index.json\r\nlog  : Retrying 'FindPackagesByIdAsync' for source 'https://api.nuget.org/v3-flatcontainer/newtonsoft.json/index.json'.\r\nlog  : An error occurred while sending the request.\r\nlog  :   The server name or address could not be resolved\r\ninfo :   GET https://api.nuget.org/v3-flatcontainer/newtonsoft.json/index.json\r\nlog  : Retrying 'FindPackagesByIdAsync' for source 'https://api.nuget.org/v3-flatcontainer/newtonsoft.json/index.json'.\r\nlog  : An error occurred while sending the request.\r\nlog  :   The server name or address could not be resolved\r\ninfo :   GET https://api.nuget.org/v3-flatcontainer/newtonsoft.json/index.json\r\nerror: Failed to retrieve information about 'Newtonsoft.Json' from remote source 'https://api.nuget.org/v3-flatcontainer/newtonsoft.json/index.json'.\r\nerror:   An error occurred while sending the request.\r\nerror:   The server name or address could not be resolved\r\n```\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\nPS C:\\Users\\lambdakris\\Code\\Hobby\\Cafe\\Cafe.Service> dotnet --info\r\n.NET Command Line Tools (2.1.2)\r\n\r\nProduct Information:\r\n Version:            2.1.2\r\n Commit SHA-1 hash:  5695315371\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.2\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.3\r\n  Build    : a9190d4a75f4a982ae4b4fa8d1a24526566c69df\r\n```\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"7021461436","Type":"IssuesEvent","CreatedAt":"2017-12-22T04:34:20","Actor":"livarcocc","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/8280","RelatedDescription":"Closed issue \"XXX depends on Microsoft.NETCore.App (>= 2.1.0-preview1-26015-04) but Microsoft.NETCore.App 2.1.0-preview1-26015-04 was not found\" (#8280) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n\r\n- Install the latest bit from here: https://github.com/dotnet/cli#installers-and-binaries\r\n- Have a \".csproj\" that looks like this one:\r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n    <TypeScriptCompileBlocked>True</TypeScriptCompileBlocked>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Dapper\" Version=\"1.50.2\" />\r\n    <PackageReference Include=\"Dapper.Mapper\" Version=\"2.0.0\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.1.0-preview1-27884\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.SignalR\" Version=\"2.1.0-preview1-27884\" />\r\n  </ItemGroup>\r\n\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.DotNet.Watcher.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\n- Execute `dotnet restore`\r\n- Execute `dotnet run`\r\n\r\n## Expected  behavior\r\n\r\nEverything should be restored and the application should run...\r\n\r\n## Actual behavior\r\n\r\nWhen I run the `dotnet restore`, I get the following warning:\r\n\r\n> C:\\Users\\...\\RobotWar.csproj : warning NU1603: RobotWar depends on Microsoft.NETCore.App (>= 2.1.0-preview1-26015-04) but Microsoft.NETCore.App 2.1.0-preview1-26015-04 was not found. An approximate best match of Microsoft.NETCore.App 2.1.0-preview1-26016-05 was resolved.\r\n\r\nWhich is pretty weird. Indeed, when I go in \"C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\", I see two folders:\r\n\r\n- 2.0.4\r\n- 2.1.0-preview1-26015-04\r\n\r\nApparently, \"2.1.0-preview1-26015-04\" **is** installed, but if I understand correctly the message above, it says that it's not and also says that it could resolve the version \"2.1.0-preview1-26016-05\" which is not installed... Note that I checked my PATH variable (via $env:PATH in PowerShell) and \"C:\\Program Files\\dotnet\" is in it.\r\n\r\nIf I execute the `dotnet run`, besides the aforementioned message, I also get:\r\n\r\n> Using launch settings from C:\\Users\\...\\RobotWar\\Properties\\launchSettings.json...\r\n> It was not possible to find any compatible framework version\r\n> The specified framework 'Microsoft.AspNetCore.All', version '2.1.0-preview1-27884' was not found.\r\n>   - Check application dependencies and target a framework version installed at:\r\n>       C:\\Program Files\\dotnet\\\r\n>   - The .NET framework can be installed from:\r\n>       https://aka.ms/dotnet-download-runtime\r\n>   - The .NET framework and SDK can be installed from:\r\n>       http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n\r\nI tried to install the package located on the page proposed by the message (and I think that's how I got the \"2.0.4\" folder) but, as you can imagine, this didn't solve anything. \r\n\r\nMoreover, you'll see in the \"Environment data\" section that `dotnet --info` shows correctly that the installed version is \"2.1.0-preview1-26015-04\".\r\n\r\nI'm using the \"aspnetcore-dev\" feed (\"https://dotnet.myget.org/F/aspnetcore-dev/api/v3/index.json\").\r\n\r\nI also noticed that in Visual Studio 2017 15.5.2, when I check \"Dependencies > NuGet\" in the solution explorer, the meta-package \"Microsoft.AspNetCore.All\" has a small warning sign on it. I tried to uninstall it and reinstall it via the GUI, the installation went fine but all the rest remains (the warning message and the warning icon in the solution explorer).\r\n\r\nFor this issue, I tried to install Visual Studio 2017 preview (15.6) and now, I can see the NuGet packages but all the other issue remain.\r\n\r\nFinally, in this Visual Studio, I check the path where NuGet DLL are loaded and I got \"C:\\Users\\ssoug\\.nuget\\packages\\microsoft.aspnetcore.all\\2.1.0-preview1-27884\". When I go there and open the \"lib\\netcoreapp2.1\" folder, I get a file called \"_._\" which is empty. I'd say it's not normal but I'm not 100% sure :-D However, \"C:\\Users\\ssoug\\.nuget\\packages\\microsoft.aspnetcore\\2.1.0-preview1-27884\\lib\\netstandard2.0\" contains a \"Microsoft.AspNetCore.dll\".\r\n\r\n## Environment data\r\n.NET Command Line Tools (2.2.0-preview1-007846)\r\n\r\nProduct Information:\r\n Version:            2.2.0-preview1-007846\r\n Commit SHA-1 hash:  15725d7cac\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.0-preview1-007846\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.1.0-preview1-26015-04\r\n  Build    : 8485f1ee2416d900d57074e2ae21f287b0c2c3b2"},{"Id":"7021247916","Type":"IssuesEvent","CreatedAt":"2017-12-22T02:46:33","Actor":"lambdakris","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8282","RelatedDescription":"Opened issue \"dotnet add package <Project> --source <LocalDir> fails when offline\" (#8282) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n1. ensure newtonsoft.json is in nuget global cache\r\n2. disconnect from internet\r\n3. dotnet add package Newtonsoft --source \"$home/.nuget/packages\"\r\n\r\n## Expected  behavior\r\nFor dotnet/nuget to skip request to nuget.org and go directly to specified source\r\n\r\n## Actual behavior\r\n```\r\nPS C:\\Users\\lambdakris\\Code\\Hobby\\Cafe\\Cafe.Service> dotnet add package Newtonsoft.Json --source \"$home/.nuget/packages\"\r\n  Writing C:\\Users\\lambdakris\\AppData\\Local\\Temp\\tmp2C91.tmp\r\ninfo : Adding PackageReference for package 'Newtonsoft.Json' into project 'C:\\Users\\lambdakris\\Code\\Hobby\\Cafe\\Cafe.Service\\Cafe.Service.fsproj'.\r\nlog  : Restoring packages for C:\\Users\\lambdakris\\Code\\Hobby\\Cafe\\Cafe.Service\\Cafe.Service.fsproj...\r\ninfo :   CACHE https://api.nuget.org/v3-flatcontainer/fsharp.core/index.json\r\ninfo :   GET https://api.nuget.org/v3-flatcontainer/newtonsoft.json/index.json\r\nlog  : Retrying 'FindPackagesByIdAsync' for source 'https://api.nuget.org/v3-flatcontainer/newtonsoft.json/index.json'.\r\nlog  : An error occurred while sending the request.\r\nlog  :   The server name or address could not be resolved\r\ninfo :   GET https://api.nuget.org/v3-flatcontainer/newtonsoft.json/index.json\r\nlog  : Retrying 'FindPackagesByIdAsync' for source 'https://api.nuget.org/v3-flatcontainer/newtonsoft.json/index.json'.\r\nlog  : An error occurred while sending the request.\r\nlog  :   The server name or address could not be resolved\r\ninfo :   GET https://api.nuget.org/v3-flatcontainer/newtonsoft.json/index.json\r\nerror: Failed to retrieve information about 'Newtonsoft.Json' from remote source 'https://api.nuget.org/v3-flatcontainer/newtonsoft.json/index.json'.\r\nerror:   An error occurred while sending the request.\r\nerror:   The server name or address could not be resolved\r\n```\r\n## Environment data\r\n`dotnet --info` output:\r\n```\r\nPS C:\\Users\\lambdakris\\Code\\Hobby\\Cafe\\Cafe.Service> dotnet --info\r\n.NET Command Line Tools (2.1.2)\r\n\r\nProduct Information:\r\n Version:            2.1.2\r\n Commit SHA-1 hash:  5695315371\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.2\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.3\r\n  Build    : a9190d4a75f4a982ae4b4fa8d1a24526566c69df\r\n```\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"7020856450","Type":"IssuesEvent","CreatedAt":"2017-12-21T23:55:37","Actor":"AArnott","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/cli/issues/8275","RelatedDescription":"Closed issue \"`dotnet test --no-build` should not restore packages before running tests\" (#8275) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n\r\n`dotnet test -f netcoreapp1.0 --no-build`\r\n\r\n## Expected  behavior\r\n\r\nThe tests run without a restore or build beforehand.\r\n\r\n## Actual behavior\r\n\r\ndotnet first restores packages, then immediately runs tests without building.\r\n\r\nRestoring without building is pointless. If I specify `--no-build`, it's because I want to run tests on a previous build.\r\n\r\n## Environment data\r\n`dotnet --info` output:\r\n\r\n```\r\n.NET Command Line Tools (2.1.4-preview-007239)\r\n\r\nProduct Information:\r\n Version:            2.1.4-preview-007239\r\n Commit SHA-1 hash:  8b4773e1d3\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.4-preview-007239\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.0.4\r\n  Build    : 7f262f453d8c8479b9af91d34c013b3aa05bc1ff\r\n```"},{"Id":"7020807003","Type":"PullRequestEvent","CreatedAt":"2017-12-21T23:35:33","Actor":"nugetlurker","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/pull/8281","RelatedDescription":"Opened pull request \"Insert NuGet Build 4.6.0-preview2-4759 into cli\" (#8281) at dotnet/cli","RelatedBody":"Insert NuGet Build 4.6.0-preview2-4759 into cli master branch"},{"Id":"7020145253","Type":"IssuesEvent","CreatedAt":"2017-12-21T20:16:31","Actor":"ssougnez","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8280","RelatedDescription":"Opened issue \"XXX depends on Microsoft.NETCore.App (>= 2.1.0-preview1-26015-04) but Microsoft.NETCore.App 2.1.0-preview1-26015-04 was not found\" (#8280) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\n\r\n- Install the latest bit from here: https://github.com/dotnet/cli#installers-and-binaries\r\n- Have a \".csproj\" that looks like this one:\r\n\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk.Web\">\r\n  <PropertyGroup>\r\n    <TargetFramework>netcoreapp2.1</TargetFramework>\r\n    <TypeScriptCompileBlocked>True</TypeScriptCompileBlocked>\r\n  </PropertyGroup>\r\n\r\n  <ItemGroup>\r\n    <PackageReference Include=\"Dapper\" Version=\"1.50.2\" />\r\n    <PackageReference Include=\"Dapper.Mapper\" Version=\"2.0.0\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.1.0-preview1-27884\" />\r\n    <PackageReference Include=\"Microsoft.AspNetCore.SignalR\" Version=\"2.1.0-preview1-27884\" />\r\n  </ItemGroup>\r\n\r\n  <ItemGroup>\r\n    <DotNetCliToolReference Include=\"Microsoft.DotNet.Watcher.Tools\" Version=\"2.0.0\" />\r\n  </ItemGroup>\r\n</Project>\r\n```\r\n\r\n- Execute `dotnet restore`\r\n- Execute `dotnet run`\r\n\r\n## Expected  behavior\r\n\r\nEverything should be restored and the application should run...\r\n\r\n## Actual behavior\r\n\r\nWhen I run the `dotnet restore`, I get the following warning:\r\n\r\n> C:\\Users\\...\\RobotWar.csproj : warning NU1603: RobotWar depends on Microsoft.NETCore.App (>= 2.1.0-preview1-26015-04) but Microsoft.NETCore.App 2.1.0-preview1-26015-04 was not found. An approximate best match of Microsoft.NETCore.App 2.1.0-preview1-26016-05 was resolved.\r\n\r\nWhich is pretty weird. Indeed, when I go in \"C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\", I see two folders:\r\n\r\n- 2.0.4\r\n- 2.1.0-preview1-26015-04\r\n\r\nApparently, \"2.1.0-preview1-26015-04\" **is** installed, but if I understand correctly the message above, it says that it's not and also says that it could resolve the version \"2.1.0-preview1-26016-05\" which is not installed... Note that I checked my PATH variable (via $env:PATH in PowerShell) and \"C:\\Program Files\\dotnet\" is in it.\r\n\r\nIf I execute the `dotnet run`, besides the aforementioned message, I also get:\r\n\r\n> Using launch settings from C:\\Users\\...\\RobotWar\\Properties\\launchSettings.json...\r\n> It was not possible to find any compatible framework version\r\n> The specified framework 'Microsoft.AspNetCore.All', version '2.1.0-preview1-27884' was not found.\r\n>   - Check application dependencies and target a framework version installed at:\r\n>       C:\\Program Files\\dotnet\\\r\n>   - The .NET framework can be installed from:\r\n>       https://aka.ms/dotnet-download-runtime\r\n>   - The .NET framework and SDK can be installed from:\r\n>       http://go.microsoft.com/fwlink/?LinkID=798306&clcid=0x409\r\n\r\nI tried installing the package located on the page proposed by the message (and I think that's how I got the \"2.0.4\" folder) but, as you can imagine, this didn't solve anything. \r\n\r\nMoreover, you'll see in the \"Environment data\" section that `dotnet --info` shows correctly that the installed version is \"2.1.0-preview1-26015-04\".\r\n\r\nI'm using the \"aspnetcore-dev\" feed (\"https://dotnet.myget.org/F/aspnetcore-dev/api/v3/index.json\").\r\n\r\nI also noticed that in Visual Studio 2017 15.5.2, when I check \"Dependencies > NuGet\" in the solution explorer, the meta-package \"Microsoft.AspNetCore.All\" has a small warning sign on it. I tried to uninstall it and reinstall it via the GUI, the installation went fine but all the rest remains (the warning message and the warning icon in the solution explorer).\r\n\r\nFor this issue, I tried to install Visual Studio 2017 preview (15.6) and now, I can see the NuGet packages but all the other issue remain.\r\n\r\n## Environment data\r\n.NET Command Line Tools (2.2.0-preview1-007846)\r\n\r\nProduct Information:\r\n Version:            2.2.0-preview1-007846\r\n Commit SHA-1 hash:  15725d7cac\r\n\r\nRuntime Environment:\r\n OS Name:     Windows\r\n OS Version:  10.0.16299\r\n OS Platform: Windows\r\n RID:         win10-x64\r\n Base Path:   C:\\Program Files\\dotnet\\sdk\\2.2.0-preview1-007846\\\r\n\r\nMicrosoft .NET Core Shared Framework Host\r\n\r\n  Version  : 2.1.0-preview1-26015-04\r\n  Build    : 8485f1ee2416d900d57074e2ae21f287b0c2c3b2\r\n\r\n\r\n\r\n\r\n\r\n\r\n"},{"Id":"7019965703","Type":"IssuesEvent","CreatedAt":"2017-12-21T19:28:48","Actor":"hvanbakel","Repository":"dotnet/cli","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/cli/issues/8279","RelatedDescription":"Opened issue \"dotnet build with output folder generates puts wrong assembly in package\" (#8279) at dotnet/cli","RelatedBody":"## Steps to reproduce\r\nCreate new net standard library. \r\nSet project file to be:\r\n```\r\n<Project Sdk=\"Microsoft.NET.Sdk\">\r\n\r\n  <PropertyGroup>\r\n    <TargetFrameworks>net46;netstandard2.0</TargetFrameworks>\r\n    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>\r\n  </PropertyGroup>\r\n\r\n</Project>\r\n```\r\nopen command line and run \r\n\r\n> dotnet build -o .\\out\r\n\r\nExtract the nupkg generated in the out folder\r\nIn the extracted folder, open the lib\\net46 folder and decompile the assembly that is in there.\r\n\r\n## Expected  behavior\r\nThis assembly should have\r\n> [assembly: TargetFramework(\".NETFramework,Version=v4.6\", FrameworkDisplayName = \".NET Framework 4.6\")]\r\n\r\n## Actual behavior\r\ninstead it has:\r\n> [assembly: TargetFramework(\".NETStandard,Version=v2.0\", FrameworkDisplayName = \"\")]\r\nWhich results in similar errors as reported here:\r\ndotnet/standard/issues/542\r\n\r\n## Environment data\r\n> C:\\Program Files (x86)\\Microsoft Visual Studio 14.0>dotnet --info\r\n.NET Command Line Tools (2.1.2)\r\n> \r\n> Product Information:\r\n>  Version:            2.1.2\r\n>  Commit SHA-1 hash:  5695315371\r\n> \r\n> Runtime Environment:\r\n>  OS Name:     Windows\r\n>  OS Version:  10.0.10586\r\n>  OS Platform: Windows\r\n>  RID:         win10-x64\r\n>  Base Path:   C:\\Program Files\\dotnet\\sdk\\2.1.2\\\r\n> \r\n> Microsoft .NET Core Shared Framework Host\r\n> \r\n>   Version  : 2.0.3\r\n>   Build    : a9190d4a75f4a982ae4b4fa8d1a24526566c69df\r\n\r\nTo be fair, this issue doesn't occur when there is no output folder specified.\r\n\r\n\r\n"}],"ResultType":"GitHubEvent"},"Standard":{"Events":[{"Id":"7020301855","Type":"IssuesEvent","CreatedAt":"2017-12-21T20:59:25","Actor":"desmondgc","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/standard/issues/604","RelatedDescription":"Closed issue \"How to avoid incompatibilities between .NET Standard 2.0 and .NET Framework 4.6.1\" (#604) at dotnet/standard","RelatedBody":"I have a .NET Standard 2.0 class library that uses System.Net.Http.HttpClientHandler. The class library is referenced in multiple projects, including a WPF application targeting .NET Framework 4.6.1. I am trying to set the HttpClientHandler.MaxConnectionsPerServer property which causes a MissingMethodException on systems without .NET Framework 4.7.1 installed.\r\n\r\n```\r\nvar baseHandler = new HttpClientHandler\r\n{\r\n    AutomaticDecompression = System.Net.DecompressionMethods.GZip,\r\n    MaxConnectionsPerServer = 32\r\n};\r\n```\r\n\r\n```\r\nSystem.MissingMethodException: Method not found: 'Void System.Net.Http.HttpClientHandler.set_MaxConnectionsPerServer(Int32)'.\r\n```\r\n\r\nThis is expected - MaxConnectionsPerServer is one of the [APIs with known compatibility issues](https://github.com/dotnet/standard/blob/master/netstandard/src/ApiCompatBaseline.net461.txt).\r\n\r\nFirst workaround attempt - catch MissingMethodException:\r\n\r\n```\r\nvar baseHandler = new HttpClientHandler\r\n{\r\n    AutomaticDecompression = System.Net.DecompressionMethods.GZip,\r\n};\r\n\r\ntry\r\n{\r\n    baseHandler.MaxConnectionsPerServer = 32;\r\n}\r\ncatch (MissingMethodException)\r\n{\r\n    // Available since .NET Framework 4.7.1\r\n}\r\n```\r\n\r\nDoesn't work - the exception is still raised. Some SO posts suggest that it's generally not possible to catch MissingMethodException.\r\n\r\nSecond workaround attempt - reflection:\r\n\r\n```\r\nvar baseHandler = new HttpClientHandler\r\n{\r\n    AutomaticDecompression = System.Net.DecompressionMethods.GZip,\r\n};\r\n\r\nif (typeof(HttpClientHandler).GetProperty(\"MaxConnectionsPerServer\") != null)\r\n{\r\n    // Available since .NET Framework 4.7.1\r\n    baseHandler.MaxConnectionsPerServer = 32;\r\n}\r\n```\r\n\r\nDoesn't work - GetProperty doesn't return null.\r\n\r\nHow am I expected to avoid this scenario?"},{"Id":"7018954133","Type":"IssuesEvent","CreatedAt":"2017-12-21T15:32:21","Actor":"0xF6","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/612","RelatedDescription":"Opened issue \"Merge Library?\" (#612) at dotnet/standard","RelatedBody":"Now to merge.NET Standard libraries into one library?"},{"Id":"7016897774","Type":"IssuesEvent","CreatedAt":"2017-12-21T07:05:12","Actor":"viswa18","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/611","RelatedDescription":"Opened issue \"System.Diagnostics.Process.Start(info) show icon in Mac\" (#611) at dotnet/standard","RelatedBody":"I am having a simple C++ command line app, which is starts from .NetStandard2.0 class library. Below is code snippet to start the process, but it show dock icon in mac. \r\n\r\n```\r\nSystem.Diagnostics.ProcessStartInfo info = new System.Diagnostics.ProcessStartInfo \r\n{\r\nFileName = helloworld\",\r\nRedirectStandardOutput = true,\r\nRedirectStandardError = true,\r\nUseShellExecute = false,\r\nCreateNoWindow = true,\r\nArguments = args,\r\nWindowStyle = System.Diagnostics.ProcessWindowStyle.Hidden, \r\nErrorDialog = false,\r\n};\r\nSystem.Diagnostics.Process process = System.Diagnostics.Process.Start(info);\r\n```\r\nIs it possible to prevent the icon in dock for mac? "},{"Id":"7015432489","Type":"PullRequestEvent","CreatedAt":"2017-12-20T21:45:45","Actor":"dotnet-maestro-bot","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/pull/610","RelatedDescription":"Opened pull request \"Update BuildTools to prerelease-02320-01 (master)\" (#610) at dotnet/standard","RelatedBody":""},{"Id":"7010697151","Type":"IssuesEvent","CreatedAt":"2017-12-20T00:48:14","Actor":"breyed","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/609","RelatedDescription":"Opened issue \"NuGet links to out-of-date release notes\" (#609) at dotnet/standard","RelatedBody":"The \"Release Notes\" section of the [NETStandard.Library](https://www.nuget.org/packages/NETStandard.Library/) NuGet page links to [release notes for an old prerelease](https://github.com/dotnet/core/blob/master/release-notes/1.1/1.1.0-preview1.md). Since the Release Notes section is version independent, it would be better to back the link up to the `release-notes` folder.\r\n\r\nA related issue is #171, which mentions the link, but focuses on the .NET Core vs. .NET Standard distinction."},{"Id":"7009282816","Type":"IssuesEvent","CreatedAt":"2017-12-19T18:33:37","Actor":"diddledan","Repository":"dotnet/standard","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/standard/issues/608","RelatedDescription":"Opened issue \"Proposal: add GetEnvironmentVariableAsBool to netstandard\" (#608) at dotnet/standard","RelatedBody":"Currently the dotnet cli has a function which is located at: [src/Microsoft.DotNet.Cli.Utils/EnvironmentProvider.cs Line 106](https://github.com/dotnet/cli/blob/fffe3142ad8043743d83885df2166fd2f80dceca/src/Microsoft.DotNet.Cli.Utils/EnvironmentProvider.cs#L106)\r\n\r\nI think it would be useful to consider this functionality for inclusion into the `System.Environment` namespace.\r\n\r\nThis issue is to raise the idea and garner discussion. I do not believe it would conflict with anything already present, though I've not performed a thorough examination to prove it."}],"ResultType":"GitHubEvent"},"CoreFx":{"Events":[{"Id":"7021248537","Type":"IssuesEvent","CreatedAt":"2017-12-22T02:46:51","Actor":"IEvangelist","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/issues/26023","RelatedDescription":"Opened issue \"Simplify Nullable<T> usage with deconstruction semantics \" (#26023) at dotnet/corefx","RelatedBody":"Recently I upgraded to using C# 7.* and I finally got to do more with tuples. I love the `.Deconstruct` capabilities and how they extend into anything. I have found this to be particularly useful for `Nullable<T>`. I tweeted about it <a href=\"https://twitter.com/davidpine7/status/941759704363085825\" target=\"_blank\">here</a> and it caught a lot of positive attention from the developer community. In fact, I was inspired to make a pull request as @jaredpar and @VSadov seemed to think it \"should just be added to Nullable\".\r\n\r\n# Rationale and Usage\r\n\r\nThis feature will simplify the usage of `Nullable<T>` access, as the consumer will have two variables namely `hasValue` and `value` - instead of an instance of the `Nullable<T>` that they would then have to `.` into.\r\n\r\n```csharp\r\npublic void TakeActionOnNullable<T>(Nullable<T> nullable)\r\n{\r\n    // Leveraging the generic nullable deconstruction extension method\r\n   var (hasValue, value) = nullable;\r\n}\r\n```\r\n\r\n# Proposed API\r\n\r\nThis is my first PR in coreclr / corefx, is this what you're looking for?\r\n\r\n```csharp\r\n[EditorBrowsable(EditorBrowsableState.Never)]\r\npublic static void Deconstruct<T>(this T? nullable, out bool hasValue, out T value)\r\n    where T : struct\r\n{\r\n    hasValue = nullable.HasValue;\r\n    value = nullable ?? default;\r\n}\r\n```\r\n\r\n# Details\r\n\r\nThis extension method is generic and will support all variations of `Nullable<T>`, this means that any `Nullable<T>` can easily be deconstructed. This is obviously an opt-in, no developer will be forced to use this. It is however an option that could be considered a more terse approach. \r\n\r\n# Pull Request\r\n\r\nHere is the PR: https://github.com/dotnet/coreclr/pull/15605"},{"Id":"7021029020","Type":"PullRequestEvent","CreatedAt":"2017-12-22T01:09:00","Actor":"rmkerr","Repository":"dotnet/corefx","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corefx/pull/26022","RelatedDescription":"Opened pull request \"Allow bidirectional control characters in System.Uri\" (#26022) at dotnet/corefx","RelatedBody":"There is an issue in System.Uri that causes Unicode bidirectional control characters to be stripped during the encoding process, in violation of the IRI RFC. This occurs regardless of whether or not the characters occur as literals or as percent encoded UTF-8 octets.  There are five affected bidirectional formatting characters (LRN, RLM, LRE, LRO, and RTL). For example, the following source URI contains percent encoded UTF-8 octets representing the Unicode RTL control character U+200F:\r\n```\r\n    https://a/bcd/%E2%80%8Fefg/\r\n```\r\nLike any other encoded Unicode character, we expect the result to remain percent encoded, as shown below:\r\n```\r\n    https://a/bcd/%E2%80%8Fefg/\r\n```\r\nBut the actual result is this:\r\n```\r\n    https://a/bcd/efg/\r\n```\r\nThis is clearly wrong -- we shouldn't be stripping percent encoded characters just because they have a special meaning when decoded. We see the same behavior when passing in an un-encoded version of the Bidi control character. \r\n \r\nThe problematic Bidi control characters are represented by the code points x200E, x200f, and x202A-x202E. According to the IRI Spec ABNF, these characters fall under the definition of ucschar. Ucschars are considered unreserved in the IRI spec, and thus should be legal to use. Additionally, during the Uri conversion process RFC 3987 Sec. 3.1 should apply, and un-encoded BiDi characters should be percent encoded.\r\n \r\nAfter the fix is applied the behavior of System.Uri will match that of WinRT Windows.Foundation.Uri as well as that of common browsers such as Edge and Chrome.\r\n\r\nThis issue was initially reported in .NET Framework, and was tracked by internal bug 130850."}],"ResultType":"GitHubEvent"},"Roslyn":{"Events":[{"Id":"7021506001","Type":"IssuesEvent","CreatedAt":"2017-12-22T05:00:13","Actor":"jcouv","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23895","RelatedDescription":"Closed issue \"Wrong order of 'in' and 'this' in extension method tooltip\" (#23895) at dotnet/roslyn","RelatedBody":"Version: VS2017 15.5.2\r\n\r\nHover over `M`, the tooltip shows `M(this in int a)` which is invalid C# (`error CS8339: The parameter modifier 'in' cannot be used after the modifier 'this'`)\r\n\r\n```C#\r\n\tstatic class Extensions {\r\n\t\tpublic static int M(in this int a) => a;\r\n\t}\r\n```\r\n"},{"Id":"7021423145","Type":"IssuesEvent","CreatedAt":"2017-12-22T04:12:38","Actor":"davkean","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/issues/23907","RelatedDescription":"Opened issue \"\"When variable type is apparent\" doesn't apply to arrays\" (#23907) at dotnet/roslyn","RelatedBody":"![image](https://user-images.githubusercontent.com/1103906/34284997-4f721560-e72a-11e7-959a-639088c6bd82.png)\r\n\r\n``` C#\r\nusing System.Threading.Tasks;\r\n\r\nclass Program\r\n{\r\n    static void Main(string[] args)\r\n    {\r\n        var tasks = new Task[0];\r\n    }\r\n}\r\n\r\n```\r\n\r\nExpected: No messages\r\nActual: For IDE0008 \"use explicit type instead of var\" not fire\r\n"},{"Id":"7021382900","Type":"PullRequestEvent","CreatedAt":"2017-12-22T03:51:28","Actor":"jasonmalinowski","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/23906","RelatedDescription":"Opened pull request \"Add MEF metadata to IDeferredQuickInfoContentToFrameworkElementConverter\" (#23906) at dotnet/roslyn","RelatedBody":"When I added this interface, I had the implementations expose their applicable type not by metadata, but by simply calling a method on the instance. This is problematic if the implementation is in a\r\ndifferent assembly as we'll load it too early. This is causing F# to load when they shouldn't.\r\n\r\nThis is intended as a temporary shim that fixes the perf load for the F# case (the only current exporter of these outside the Roslyn repo itself) without forcing an interface change. This will get deleted soon enough once we migrate to newer Quick Info APIs.\r\n\r\n<details><summary>Ask Mode template</summary>\r\n\r\n### Customer scenario\r\n\r\nInvoke Quick Info in C# or VB. An F# assembly is loaded by accident.\r\n\r\n### Bugs this fixes\r\n\r\nNo bug yet (but we'll get one eventually.)\r\n\r\n### Workarounds, if any\r\n\r\nNone.\r\n\r\n### Risk\r\n\r\nLow, easy to test.\r\n\r\n### Performance impact\r\n\r\nFixes assembly load.\r\n\r\n### Is this a regression from a previous update?\r\n\r\nYes.\r\n\r\n### Root cause analysis\r\n\r\nThis was an oversight caught during RPS runs during the first attempted insertion of the code. The regression is below the degrade bar so it's easy to miss.\r\n\r\n### How was the bug found?\r\n\r\nRPS.\r\n\r\n</details>\r\n"},{"Id":"7021038366","Type":"PullRequestEvent","CreatedAt":"2017-12-22T01:13:17","Actor":"OmarTawfik","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/roslyn/pull/23905","RelatedDescription":"Opened pull request \"Reject ref as an invalid modifier for accessors\" (#23905) at dotnet/roslyn","RelatedBody":"### Customer scenario\r\n\r\nUser typing `ref` before an accessor (like `add`, `remove`, `set`, and `get`), will cause the C# compiler to OOM. VS will hang until it eventually runs out of memory.\r\n\r\n```csharp\r\npublic int Prop\r\n{\r\n    ref get {\r\n```\r\n\r\n### Bugs this fixes\r\n\r\nFixes #23833\r\n\r\n### Workarounds, if any\r\n\r\nNone.\r\n\r\n### Risk\r\n\r\nMinimal. It is rejecting a certain keyword in the parser.\r\n\r\n### Performance impact\r\n\r\nMinimal.\r\n\r\n### Is this a regression from a previous update?\r\n\r\nYes. This bug shipped with ref structs.\r\n\r\n### Root cause analysis\r\n\r\nWith the introduction of `ref struct`s, `ref` was considered a valid modifier, but accessor modifiers were not adjusted as well.\r\n\r\n### How was the bug found?\r\n\r\nCustomer report.\r\n\r\n### Test documentation updated?\r\n\r\nYes."},{"Id":"7020804109","Type":"PullRequestEvent","CreatedAt":"2017-12-21T23:34:30","Actor":"AlekseyTs","Repository":"dotnet/roslyn","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/roslyn/pull/23888","RelatedDescription":"Merged pull request \"Remove obsolete duplicate APIs from type symbols.\" (#23888) at dotnet/roslyn","RelatedBody":"This change removes the following APIs:\r\n- TypeSymbol.BaseType\r\n- TypeSymbol.Interfaces\r\n- TypeSymbol.AllInterfaces\r\n- NamedTypeSymbol.TypeArguments\r\n- TypeParameterSymbol.ConstraintTypes\r\n\r\nThese APIs simply delegate the work to APIs with \"NoUseSiteDiagnostics\" suffix and are not supposed to be used inside compilers. They were left in the code-base because they used to be part of the public surface and the names were nicer, but they are no longer part of the public surface.\r\n "}],"ResultType":"GitHubEvent"},"CoreRT":{"Events":[{"Id":"7019614802","Type":"PullRequestEvent","CreatedAt":"2017-12-21T17:57:23","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5145","RelatedDescription":"Merged pull request \"Route abstract method reflectability through MetadataManager\" (#5145) at dotnet/corert","RelatedBody":"Progress towards #3224: route code that handles tracking reflectable abstract methods through `MetadataManager`. This is so that if we're using a `MetadataManager` that doesn't need this kind of accounting, we could avoid allocating the `ReflectableMethodNode` nodes.\r\n\r\nThis change is also making the `ReflectableMethodNode` practically a private implementation detail of `MetadataManager`."},{"Id":"7019274256","Type":"PullRequestEvent","CreatedAt":"2017-12-21T16:37:52","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"merged","RelatedUrl":"https://github.com/dotnet/corert/pull/5144","RelatedDescription":"Merged pull request \"Make sure CORINFO_FLG_FINAL is reported on delegate invoke methods\" (#5144) at dotnet/corert","RelatedBody":"RyuJIT special cases delegate invocation and there is an assert that the special casing is safe (the method is indeed final).\r\n\r\nWe could end up not reporting `final` if we used a devirtualization algorithm that wants to prevent devirtualization there (because the delegate type was never allocated). This is pretty safe to devirtualize though (RyuJIT is not going to actually call it anyway)."},{"Id":"7019250824","Type":"PullRequestEvent","CreatedAt":"2017-12-21T16:32:50","Actor":"MichalStrehovsky","Repository":"dotnet/corert","Organization":"dotnet","RawContent":null,"RelatedAction":"opened","RelatedUrl":"https://github.com/dotnet/corert/pull/5145","RelatedDescription":"Opened pull request \"Route abstract method reflectability through MetadataManager\" (#5145) at dotnet/corert","RelatedBody":"Progress towards #3224: route code that handles tracking reflectable abstract methods through `MetadataManager`. This is so that if we're using a `MetadataManager` that doesn't need this kind of accounting, we could avoid allocating the `ReflectableMethodNode` nodes.\r\n\r\nThis change is also making the `ReflectableMethodNode` practically a private implementation detail of `MetadataManager`."}],"ResultType":"GitHubEvent"},"SDK":{"Events":[{"Id":"7014464972","Type":"IssuesEvent","CreatedAt":"2017-12-20T17:50:57","Actor":"rainersigwald","Repository":"dotnet/sdk","Organization":"dotnet","RawContent":null,"RelatedAction":"closed","RelatedUrl":"https://github.com/dotnet/sdk/issues/1780","RelatedDescription":"Closed issue \"Migrating tasks from old csproj to new csproj format\" (#1780) at dotnet/sdk","RelatedBody":"_From @MNie on November 30, 2017 21:20_\n\nI'm currently in a process of migrating old csprojs to a new format. In some of them I have a msbuild task to replace app.config with app.debug/release.config (depending on build configuration).\r\nIn old csproj code to achieve that looks as follows:\r\n\r\n```xml\r\n<UsingTask TaskName=\"TransformXml\" AssemblyFile=\"$(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v$(VisualStudioVersion)\\Web\\Microsoft.Web.Publishing.Tasks.dll\" />\r\n  <Target Name=\"AfterCompile\" Condition=\"Exists('App.$(Configuration).config')\">\r\n    <!--Generate transformed app config in the intermediate directory-->\r\n    <TransformXml Source=\"App.config\" Destination=\"$(IntermediateOutputPath)$(TargetFileName).config\" Transform=\"App.$(Configuration).config\" />\r\n    <!--Force build process to use the transformed configuration file from now on.-->\r\n    <ItemGroup>\r\n      <AppConfigWithTargetPath Remove=\"App.config\" />\r\n      <AppConfigWithTargetPath Include=\"$(IntermediateOutputPath)$(TargetFileName).config\">\r\n        <TargetPath>$(TargetFileName).config</TargetPath>\r\n      </AppConfigWithTargetPath>\r\n    </ItemGroup>\r\n  </Target>\r\n```\r\n\r\nCurrently I have a piece of code like this which in fact doesn't work, but project compiles with it:\r\n\r\n```xml\r\n<UsingTask TaskName=\"TransformXml\" AssemblyFile=\"$(MSBuildExtensionsPath32)\\Microsoft\\VisualStudio\\v$(VisualStudioVersion)\\Web\\Microsoft.Web.Publishing.Tasks.dll\" />\r\n<Target Name=\"AfterCompile\" AfterTargets=\"Build\">\r\n  <TransformXml Source=\"App.config\" Destination=\"$(IntermediateOutputPath)$(TargetFileName).config\" Transform=\"App.$(Configuration).config\" />\r\n  <ItemGroup>\r\n    <AppConfigWithTargetPath Remove=\"App.config\" />\r\n    <AppConfigWithTargetPath Include=\"$(IntermediateOutputPath)$(TargetFileName).config\">\r\n      <TargetPath>$(TargetFileName).config</TargetPath>\r\n    </AppConfigWithTargetPath>\r\n  </ItemGroup>\r\n</Target>\r\n```\r\n\r\nSo the question is, is it supported in new csproj format? \r\nIf yes, how I could port such task(s)?\r\nIf no, would it be supported in future?\r\n\r\nOS info:\r\nVisual studio 15.4.4\r\n\r\n\r\n[msbuild issue](https://github.com/Microsoft/msbuild/issues/2746)\n\n_Copied from original issue: dotnet/project-system#3011_"}],"ResultType":"GitHubEvent"},"Twitter":{"ResultType":"TwitterTimeline","Tweets":[{"Id":"943234846079496192","CreatedAt":"2017-12-19T21:41:26+00:00","UserScreenname":"dotnet","Text":"Join our Jeff Fritz (@csharpfritz) in a little more than 2 hours for LIVE CODING. He's working on an @aspnet Core p… https://t.co/Xm2utapspg","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":34,"FavoriteCount":15,"RawContent":null},{"Id":"942039735144452097","CreatedAt":"2017-12-16T14:32:29+00:00","UserScreenname":"dotnet","Text":"Join our Jeff Fritz in 30 minutes for some LIVE CODING and answering your questions about .NET and Visual Studio.  https://t.co/UjBOoFqFp5","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":23,"FavoriteCount":18,"RawContent":null},{"Id":"941295101212549121","CreatedAt":"2017-12-14T13:13:35+00:00","UserScreenname":"dotnet","Text":"Join our Jeff Fritz at 10am ET for a LIVE CODING session.  He'll answer your questions about .NET, Visual Studio, a… https://t.co/qJHWFDaUGf","Source":"<a href=\"https://about.twitter.com/products/tweetdeck\" rel=\"nofollow\">TweetDeck</a>","RetweetCount":21,"FavoriteCount":14,"RawContent":null}]}},"RunOn":"2017-12-22T05:30:24.4989455Z","RunDurationInMilliseconds":8835}